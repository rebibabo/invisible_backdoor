<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17563.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">compat_decode</name><parameter_list pos:start="1:25" pos:end="3:61">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:62"><decl pos:start="1:49" pos:end="1:62"><type pos:start="1:49" pos:end="1:62"><name pos:start="1:49" pos:end="1:55">AVFrame</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:62">frame</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:39"><decl pos:start="3:26" pos:end="3:39"><type pos:start="3:26" pos:end="3:39"><name pos:start="3:26" pos:end="3:28">int</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:39">got_frame</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:60"><decl pos:start="3:42" pos:end="3:60"><type pos:start="3:42" pos:end="3:60"><specifier pos:start="3:42" pos:end="3:46">const</specifier> <name pos:start="3:48" pos:end="3:55">AVPacket</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:60">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="151:1">{<block_content pos:start="7:5" pos:end="149:15">

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">AVCodecInternal</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:25">avci</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:33">avctx</name><operator pos:start="7:34" pos:end="7:35">-&gt;</operator><name pos:start="7:36" pos:end="7:43">internal</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:50"><expr pos:start="13:5" pos:end="13:49"><call pos:start="13:5" pos:end="13:49"><name pos:start="13:5" pos:end="13:14">av_assert0</name><argument_list pos:start="13:15" pos:end="13:49">(<argument pos:start="13:16" pos:end="13:48"><expr pos:start="13:16" pos:end="13:48"><name pos:start="13:16" pos:end="13:43"><name pos:start="13:16" pos:end="13:19">avci</name><operator pos:start="13:20" pos:end="13:21">-&gt;</operator><name pos:start="13:22" pos:end="13:43">compat_decode_consumed</name></name> <operator pos:start="13:45" pos:end="13:46">==</operator> <literal type="number" pos:start="13:48" pos:end="13:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:19"><expr pos:start="17:5" pos:end="17:18"><operator pos:start="17:5" pos:end="17:5">*</operator><name pos:start="17:6" pos:end="17:14">got_frame</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <literal type="number" pos:start="17:18" pos:end="17:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:28"><expr pos:start="19:5" pos:end="19:27"><name pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:8">avci</name><operator pos:start="19:9" pos:end="19:10">-&gt;</operator><name pos:start="19:11" pos:end="19:23">compat_decode</name></name> <operator pos:start="19:25" pos:end="19:25">=</operator> <literal type="number" pos:start="19:27" pos:end="19:27">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="35:5"><if pos:start="23:5" pos:end="35:5">if <condition pos:start="23:8" pos:end="25:54">(<expr pos:start="23:9" pos:end="25:53"><name pos:start="23:9" pos:end="23:40"><name pos:start="23:9" pos:end="23:12">avci</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:40">compat_decode_partial_size</name></name> <operator pos:start="23:42" pos:end="23:42">&gt;</operator> <literal type="number" pos:start="23:44" pos:end="23:44">0</literal> <operator pos:start="23:46" pos:end="23:47">&amp;&amp;</operator>

        <name pos:start="25:9" pos:end="25:40"><name pos:start="25:9" pos:end="25:12">avci</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:40">compat_decode_partial_size</name></name> <operator pos:start="25:42" pos:end="25:43">!=</operator> <name pos:start="25:45" pos:end="25:53"><name pos:start="25:45" pos:end="25:47">pkt</name><operator pos:start="25:48" pos:end="25:49">-&gt;</operator><name pos:start="25:50" pos:end="25:53">size</name></name></expr>)</condition> <block pos:start="25:56" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:20">

        <expr_stmt pos:start="27:9" pos:end="29:70"><expr pos:start="27:9" pos:end="29:69"><call pos:start="27:9" pos:end="29:69"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="29:69">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="29:16" pos:end="29:68"><expr pos:start="29:16" pos:end="29:68"><literal type="string" pos:start="29:16" pos:end="29:68">"Got unexpected packet size after a partial decode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:30"><expr pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:29"><name pos:start="31:15" pos:end="31:21">AVERROR</name><argument_list pos:start="31:22" pos:end="31:29">(<argument pos:start="31:23" pos:end="31:28"><expr pos:start="31:23" pos:end="31:28"><name pos:start="31:23" pos:end="31:28">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="33:9" pos:end="33:20">goto <name pos:start="33:14" pos:end="33:19">finish</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="61:5"><if pos:start="39:5" pos:end="61:5">if <condition pos:start="39:8" pos:end="39:42">(<expr pos:start="39:9" pos:end="39:41"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:41"><name pos:start="39:10" pos:end="39:13">avci</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:41">compat_decode_partial_size</name></name></expr>)</condition> <block pos:start="39:44" pos:end="61:5">{<block_content pos:start="41:9" pos:end="59:24">

        <expr_stmt pos:start="41:9" pos:end="41:46"><expr pos:start="41:9" pos:end="41:45"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <call pos:start="41:15" pos:end="41:45"><name pos:start="41:15" pos:end="41:33">avcodec_send_packet</name><argument_list pos:start="41:34" pos:end="41:45">(<argument pos:start="41:35" pos:end="41:39"><expr pos:start="41:35" pos:end="41:39"><name pos:start="41:35" pos:end="41:39">avctx</name></expr></argument>, <argument pos:start="41:42" pos:end="41:44"><expr pos:start="41:42" pos:end="41:44"><name pos:start="41:42" pos:end="41:44">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="59:24"><if pos:start="43:9" pos:end="45:20">if <condition pos:start="43:12" pos:end="43:31">(<expr pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:15">ret</name> <operator pos:start="43:17" pos:end="43:18">==</operator> <name pos:start="43:20" pos:end="43:30">AVERROR_EOF</name></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:20"><block_content pos:start="45:13" pos:end="45:20">

            <expr_stmt pos:start="45:13" pos:end="45:20"><expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="47:9" pos:end="57:9">else if <condition pos:start="47:17" pos:end="47:40">(<expr pos:start="47:18" pos:end="47:39"><name pos:start="47:18" pos:end="47:20">ret</name> <operator pos:start="47:22" pos:end="47:23">==</operator> <call pos:start="47:25" pos:end="47:39"><name pos:start="47:25" pos:end="47:31">AVERROR</name><argument_list pos:start="47:32" pos:end="47:39">(<argument pos:start="47:33" pos:end="47:38"><expr pos:start="47:33" pos:end="47:38"><name pos:start="47:33" pos:end="47:38">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:42" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:24">

            <comment type="block" pos:start="49:13" pos:end="51:29">/* we fully drain all the output in each decode call, so this should not

             * ever happen */</comment>

            <expr_stmt pos:start="53:13" pos:end="53:30"><expr pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <name pos:start="53:19" pos:end="53:29">AVERROR_BUG</name></expr>;</expr_stmt>

            <goto pos:start="55:13" pos:end="55:24">goto <name pos:start="55:18" pos:end="55:23">finish</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="57:11" pos:end="59:24">else if <condition pos:start="57:19" pos:end="57:27">(<expr pos:start="57:20" pos:end="57:26"><name pos:start="57:20" pos:end="57:22">ret</name> <operator pos:start="57:24" pos:end="57:24">&lt;</operator> <literal type="number" pos:start="57:26" pos:end="57:26">0</literal></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:24"><block_content pos:start="59:13" pos:end="59:24">

            <goto pos:start="59:13" pos:end="59:24">goto <name pos:start="59:18" pos:end="59:23">finish</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="65:5" pos:end="123:5">while <condition pos:start="65:11" pos:end="65:20">(<expr pos:start="65:12" pos:end="65:19"><name pos:start="65:12" pos:end="65:14">ret</name> <operator pos:start="65:16" pos:end="65:17">&gt;=</operator> <literal type="number" pos:start="65:19" pos:end="65:19">0</literal></expr>)</condition> <block pos:start="65:22" pos:end="123:5">{<block_content pos:start="67:9" pos:end="121:18">

        <expr_stmt pos:start="67:9" pos:end="67:50"><expr pos:start="67:9" pos:end="67:49"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:49"><name pos:start="67:15" pos:end="67:35">avcodec_receive_frame</name><argument_list pos:start="67:36" pos:end="67:49">(<argument pos:start="67:37" pos:end="67:41"><expr pos:start="67:37" pos:end="67:41"><name pos:start="67:37" pos:end="67:41">avctx</name></expr></argument>, <argument pos:start="67:44" pos:end="67:48"><expr pos:start="67:44" pos:end="67:48"><name pos:start="67:44" pos:end="67:48">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="77:9"><if pos:start="69:9" pos:end="77:9">if <condition pos:start="69:12" pos:end="69:20">(<expr pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">&lt;</operator> <literal type="number" pos:start="69:19" pos:end="69:19">0</literal></expr>)</condition> <block pos:start="69:22" pos:end="77:9">{<block_content pos:start="71:13" pos:end="75:24">

            <if_stmt pos:start="71:13" pos:end="73:24"><if pos:start="71:13" pos:end="73:24">if <condition pos:start="71:16" pos:end="71:61">(<expr pos:start="71:17" pos:end="71:60"><name pos:start="71:17" pos:end="71:19">ret</name> <operator pos:start="71:21" pos:end="71:22">==</operator> <call pos:start="71:24" pos:end="71:38"><name pos:start="71:24" pos:end="71:30">AVERROR</name><argument_list pos:start="71:31" pos:end="71:38">(<argument pos:start="71:32" pos:end="71:37"><expr pos:start="71:32" pos:end="71:37"><name pos:start="71:32" pos:end="71:37">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="71:40" pos:end="71:41">||</operator> <name pos:start="71:43" pos:end="71:45">ret</name> <operator pos:start="71:47" pos:end="71:48">==</operator> <name pos:start="71:50" pos:end="71:60">AVERROR_EOF</name></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="73:24"><block_content pos:start="73:17" pos:end="73:24">

                <expr_stmt pos:start="73:17" pos:end="73:24"><expr pos:start="73:17" pos:end="73:23"><name pos:start="73:17" pos:end="73:19">ret</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <literal type="number" pos:start="73:23" pos:end="73:23">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <goto pos:start="75:13" pos:end="75:24">goto <name pos:start="75:18" pos:end="75:23">finish</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="81:9" pos:end="115:9"><if pos:start="81:9" pos:end="99:9">if <condition pos:start="81:12" pos:end="81:47">(<expr pos:start="81:13" pos:end="81:46"><name pos:start="81:13" pos:end="81:17">frame</name> <operator pos:start="81:19" pos:end="81:20">!=</operator> <name pos:start="81:22" pos:end="81:46"><name pos:start="81:22" pos:end="81:25">avci</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:46">compat_decode_frame</name></name></expr>)</condition> <block pos:start="81:49" pos:end="99:9">{<block_content pos:start="83:13" pos:end="97:46">

            <if_stmt pos:start="83:13" pos:end="91:13"><if pos:start="83:13" pos:end="91:13">if <condition pos:start="83:16" pos:end="83:42">(<expr pos:start="83:17" pos:end="83:41"><operator pos:start="83:17" pos:end="83:17">!</operator><name pos:start="83:18" pos:end="83:41"><name pos:start="83:18" pos:end="83:22">avctx</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:41">refcounted_frames</name></name></expr>)</condition> <block pos:start="83:44" pos:end="91:13">{<block_content pos:start="85:17" pos:end="89:32">

                <expr_stmt pos:start="85:17" pos:end="85:52"><expr pos:start="85:17" pos:end="85:51"><name pos:start="85:17" pos:end="85:19">ret</name> <operator pos:start="85:21" pos:end="85:21">=</operator> <call pos:start="85:23" pos:end="85:51"><name pos:start="85:23" pos:end="85:38">unrefcount_frame</name><argument_list pos:start="85:39" pos:end="85:51">(<argument pos:start="85:40" pos:end="85:43"><expr pos:start="85:40" pos:end="85:43"><name pos:start="85:40" pos:end="85:43">avci</name></expr></argument>, <argument pos:start="85:46" pos:end="85:50"><expr pos:start="85:46" pos:end="85:50"><name pos:start="85:46" pos:end="85:50">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="87:17" pos:end="89:32"><if pos:start="87:17" pos:end="89:32">if <condition pos:start="87:20" pos:end="87:28">(<expr pos:start="87:21" pos:end="87:27"><name pos:start="87:21" pos:end="87:23">ret</name> <operator pos:start="87:25" pos:end="87:25">&lt;</operator> <literal type="number" pos:start="87:27" pos:end="87:27">0</literal></expr>)</condition><block type="pseudo" pos:start="89:21" pos:end="89:32"><block_content pos:start="89:21" pos:end="89:32">

                    <goto pos:start="89:21" pos:end="89:32">goto <name pos:start="89:26" pos:end="89:31">finish</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="95:13" pos:end="95:27"><expr pos:start="95:13" pos:end="95:26"><operator pos:start="95:13" pos:end="95:13">*</operator><name pos:start="95:14" pos:end="95:22">got_frame</name> <operator pos:start="95:24" pos:end="95:24">=</operator> <literal type="number" pos:start="95:26" pos:end="95:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:46"><expr pos:start="97:13" pos:end="97:45"><name pos:start="97:13" pos:end="97:17">frame</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <name pos:start="97:21" pos:end="97:45"><name pos:start="97:21" pos:end="97:24">avci</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:45">compat_decode_frame</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="99:11" pos:end="115:9">else <block pos:start="99:16" pos:end="115:9">{<block_content pos:start="101:13" pos:end="113:13">

            <if_stmt pos:start="101:13" pos:end="113:13"><if pos:start="101:13" pos:end="113:13">if <condition pos:start="101:16" pos:end="101:44">(<expr pos:start="101:17" pos:end="101:43"><operator pos:start="101:17" pos:end="101:17">!</operator><name pos:start="101:18" pos:end="101:43"><name pos:start="101:18" pos:end="101:21">avci</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:43">compat_decode_warned</name></name></expr>)</condition> <block pos:start="101:46" pos:end="113:13">{<block_content pos:start="103:17" pos:end="111:47">

                <expr_stmt pos:start="103:17" pos:end="109:58"><expr pos:start="103:17" pos:end="109:57"><call pos:start="103:17" pos:end="109:57"><name pos:start="103:17" pos:end="103:22">av_log</name><argument_list pos:start="103:23" pos:end="109:57">(<argument pos:start="103:24" pos:end="103:28"><expr pos:start="103:24" pos:end="103:28"><name pos:start="103:24" pos:end="103:28">avctx</name></expr></argument>, <argument pos:start="103:31" pos:end="103:44"><expr pos:start="103:31" pos:end="103:44"><name pos:start="103:31" pos:end="103:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="103:47" pos:end="109:56"><expr pos:start="103:47" pos:end="109:56"><literal type="string" pos:start="103:47" pos:end="103:80">"The deprecated avcodec_decode_* "</literal>

                       <literal type="string" pos:start="105:24" pos:end="105:76">"API cannot return all the frames for this decoder. "</literal>

                       <literal type="string" pos:start="107:24" pos:end="107:78">"Some frames will be dropped. Update your code to the "</literal>

                       <literal type="string" pos:start="109:24" pos:end="109:56">"new decoding API to fix this.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:47"><expr pos:start="111:17" pos:end="111:46"><name pos:start="111:17" pos:end="111:42"><name pos:start="111:17" pos:end="111:20">avci</name><operator pos:start="111:21" pos:end="111:22">-&gt;</operator><name pos:start="111:23" pos:end="111:42">compat_decode_warned</name></name> <operator pos:start="111:44" pos:end="111:44">=</operator> <literal type="number" pos:start="111:46" pos:end="111:46">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="119:9" pos:end="121:18"><if pos:start="119:9" pos:end="121:18">if <condition pos:start="119:12" pos:end="119:96">(<expr pos:start="119:13" pos:end="119:95"><name pos:start="119:13" pos:end="119:26"><name pos:start="119:13" pos:end="119:16">avci</name><operator pos:start="119:17" pos:end="119:18">-&gt;</operator><name pos:start="119:19" pos:end="119:26">draining</name></name> <operator pos:start="119:28" pos:end="119:29">||</operator> <operator pos:start="119:31" pos:end="119:31">(</operator><operator pos:start="119:32" pos:end="119:32">!</operator><name pos:start="119:33" pos:end="119:50"><name pos:start="119:33" pos:end="119:37">avctx</name><operator pos:start="119:38" pos:end="119:39">-&gt;</operator><name pos:start="119:40" pos:end="119:44">codec</name><operator pos:start="119:45" pos:end="119:46">-&gt;</operator><name pos:start="119:47" pos:end="119:50">bsfs</name></name> <operator pos:start="119:52" pos:end="119:53">&amp;&amp;</operator> <name pos:start="119:55" pos:end="119:82"><name pos:start="119:55" pos:end="119:58">avci</name><operator pos:start="119:59" pos:end="119:60">-&gt;</operator><name pos:start="119:61" pos:end="119:82">compat_decode_consumed</name></name> <operator pos:start="119:84" pos:end="119:84">&lt;</operator> <name pos:start="119:86" pos:end="119:94"><name pos:start="119:86" pos:end="119:88">pkt</name><operator pos:start="119:89" pos:end="119:90">-&gt;</operator><name pos:start="119:91" pos:end="119:94">size</name></name><operator pos:start="119:95" pos:end="119:95">)</operator></expr>)</condition><block type="pseudo" pos:start="121:13" pos:end="121:18"><block_content pos:start="121:13" pos:end="121:18">

            <break pos:start="121:13" pos:end="121:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></while>



<label pos:start="127:1" pos:end="127:7"><name pos:start="127:1" pos:end="127:6">finish</name>:</label>

    <if_stmt pos:start="129:5" pos:end="141:5"><if pos:start="129:5" pos:end="141:5">if <condition pos:start="129:8" pos:end="129:17">(<expr pos:start="129:9" pos:end="129:16"><name pos:start="129:9" pos:end="129:11">ret</name> <operator pos:start="129:13" pos:end="129:14">==</operator> <literal type="number" pos:start="129:16" pos:end="129:16">0</literal></expr>)</condition> <block pos:start="129:19" pos:end="141:5">{<block_content pos:start="133:9" pos:end="139:65">

        <comment type="block" pos:start="131:9" pos:end="131:78">/* if there are any bsfs then assume full packet is always consumed */</comment>

        <if_stmt pos:start="133:9" pos:end="139:65"><if pos:start="133:9" pos:end="135:28">if <condition pos:start="133:12" pos:end="133:31">(<expr pos:start="133:13" pos:end="133:30"><name pos:start="133:13" pos:end="133:30"><name pos:start="133:13" pos:end="133:17">avctx</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:24">codec</name><operator pos:start="133:25" pos:end="133:26">-&gt;</operator><name pos:start="133:27" pos:end="133:30">bsfs</name></name></expr>)</condition><block type="pseudo" pos:start="135:13" pos:end="135:28"><block_content pos:start="135:13" pos:end="135:28">

            <expr_stmt pos:start="135:13" pos:end="135:28"><expr pos:start="135:13" pos:end="135:27"><name pos:start="135:13" pos:end="135:15">ret</name> <operator pos:start="135:17" pos:end="135:17">=</operator> <name pos:start="135:19" pos:end="135:27"><name pos:start="135:19" pos:end="135:21">pkt</name><operator pos:start="135:22" pos:end="135:23">-&gt;</operator><name pos:start="135:24" pos:end="135:27">size</name></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="137:9" pos:end="139:65">else<block type="pseudo" pos:start="139:13" pos:end="139:65"><block_content pos:start="139:13" pos:end="139:65">

            <expr_stmt pos:start="139:13" pos:end="139:65"><expr pos:start="139:13" pos:end="139:64"><name pos:start="139:13" pos:end="139:15">ret</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <call pos:start="139:19" pos:end="139:64"><name pos:start="139:19" pos:end="139:23">FFMIN</name><argument_list pos:start="139:24" pos:end="139:64">(<argument pos:start="139:25" pos:end="139:52"><expr pos:start="139:25" pos:end="139:52"><name pos:start="139:25" pos:end="139:52"><name pos:start="139:25" pos:end="139:28">avci</name><operator pos:start="139:29" pos:end="139:30">-&gt;</operator><name pos:start="139:31" pos:end="139:52">compat_decode_consumed</name></name></expr></argument>, <argument pos:start="139:55" pos:end="139:63"><expr pos:start="139:55" pos:end="139:63"><name pos:start="139:55" pos:end="139:63"><name pos:start="139:55" pos:end="139:57">pkt</name><operator pos:start="139:58" pos:end="139:59">-&gt;</operator><name pos:start="139:60" pos:end="139:63">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:37"><expr pos:start="143:5" pos:end="143:36"><name pos:start="143:5" pos:end="143:32"><name pos:start="143:5" pos:end="143:8">avci</name><operator pos:start="143:9" pos:end="143:10">-&gt;</operator><name pos:start="143:11" pos:end="143:32">compat_decode_consumed</name></name> <operator pos:start="143:34" pos:end="143:34">=</operator> <literal type="number" pos:start="143:36" pos:end="143:36">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:72"><expr pos:start="145:5" pos:end="145:71"><name pos:start="145:5" pos:end="145:36"><name pos:start="145:5" pos:end="145:8">avci</name><operator pos:start="145:9" pos:end="145:10">-&gt;</operator><name pos:start="145:11" pos:end="145:36">compat_decode_partial_size</name></name> <operator pos:start="145:38" pos:end="145:38">=</operator> <ternary pos:start="145:40" pos:end="145:71"><condition pos:start="145:40" pos:end="145:51"><expr pos:start="145:40" pos:end="145:49"><operator pos:start="145:40" pos:end="145:40">(</operator><name pos:start="145:41" pos:end="145:43">ret</name> <operator pos:start="145:45" pos:end="145:46">&gt;=</operator> <literal type="number" pos:start="145:48" pos:end="145:48">0</literal><operator pos:start="145:49" pos:end="145:49">)</operator></expr> ?</condition><then pos:start="145:53" pos:end="145:67"> <expr pos:start="145:53" pos:end="145:67"><name pos:start="145:53" pos:end="145:61"><name pos:start="145:53" pos:end="145:55">pkt</name><operator pos:start="145:56" pos:end="145:57">-&gt;</operator><name pos:start="145:58" pos:end="145:61">size</name></name> <operator pos:start="145:63" pos:end="145:63">-</operator> <name pos:start="145:65" pos:end="145:67">ret</name></expr> </then><else pos:start="145:69" pos:end="145:71">: <expr pos:start="145:71" pos:end="145:71"><literal type="number" pos:start="145:71" pos:end="145:71">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <return pos:start="149:5" pos:end="149:15">return <expr pos:start="149:12" pos:end="149:14"><name pos:start="149:12" pos:end="149:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
