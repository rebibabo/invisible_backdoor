<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12502.c" pos:tabs="8"><function pos:start="1:1" pos:end="249:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:34">get_cluster_offset</name><parameter_list pos:start="1:35" pos:end="7:58">(<parameter pos:start="1:36" pos:end="1:55"><decl pos:start="1:36" pos:end="1:55"><type pos:start="1:36" pos:end="1:55"><name pos:start="1:36" pos:end="1:51">BlockDriverState</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">bs</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:50"><decl pos:start="3:36" pos:end="3:50"><type pos:start="3:36" pos:end="3:50"><name pos:start="3:36" pos:end="3:43">uint64_t</name></type> <name pos:start="3:45" pos:end="3:50">offset</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:64"><decl pos:start="3:53" pos:end="3:64"><type pos:start="3:53" pos:end="3:64"><name pos:start="3:53" pos:end="3:55">int</name></type> <name pos:start="3:57" pos:end="3:64">allocate</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:54"><decl pos:start="5:36" pos:end="5:54"><type pos:start="5:36" pos:end="5:54"><name pos:start="5:36" pos:end="5:38">int</name></type> <name pos:start="5:40" pos:end="5:54">compressed_size</name></decl></parameter>,

                                   <parameter pos:start="7:36" pos:end="7:46"><decl pos:start="7:36" pos:end="7:46"><type pos:start="7:36" pos:end="7:46"><name pos:start="7:36" pos:end="7:38">int</name></type> <name pos:start="7:40" pos:end="7:46">n_start</name></decl></parameter>, <parameter pos:start="7:49" pos:end="7:57"><decl pos:start="7:49" pos:end="7:57"><type pos:start="7:49" pos:end="7:57"><name pos:start="7:49" pos:end="7:51">int</name></type> <name pos:start="7:53" pos:end="7:57">n_end</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="249:1">{<block_content pos:start="11:5" pos:end="247:26">

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">BDRVQcowState</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">s</name> <init pos:start="11:22" pos:end="11:33">= <expr pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:25">bs</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">min_index</name></decl>, <decl pos:start="13:20" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:20" pos:end="13:20">i</name></decl>, <decl pos:start="13:23" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:23" pos:end="13:23">j</name></decl>, <decl pos:start="13:26" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:26" pos:end="13:33">l1_index</name></decl>, <decl pos:start="13:36" pos:end="13:43"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:36" pos:end="13:43">l2_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:55"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:22">l2_offset</name></decl>, <decl pos:start="15:25" pos:end="15:33"><type ref="prev" pos:start="15:5" pos:end="15:12"><modifier pos:start="15:25" pos:end="15:25">*</modifier></type><name pos:start="15:26" pos:end="15:33">l2_table</name></decl>, <decl pos:start="15:36" pos:end="15:49"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:36" pos:end="15:49">cluster_offset</name></decl>, <decl pos:start="15:52" pos:end="15:54"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:52" pos:end="15:54">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:22">min_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:20">new_l2_table</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:56"><expr pos:start="23:5" pos:end="23:55"><name pos:start="23:5" pos:end="23:12">l1_index</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:21">offset</name> <operator pos:start="23:23" pos:end="23:24">&gt;&gt;</operator> <operator pos:start="23:26" pos:end="23:26">(</operator><name pos:start="23:27" pos:end="23:36"><name pos:start="23:27" pos:end="23:27">s</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:36">l2_bits</name></name> <operator pos:start="23:38" pos:end="23:38">+</operator> <name pos:start="23:40" pos:end="23:54"><name pos:start="23:40" pos:end="23:40">s</name><operator pos:start="23:41" pos:end="23:42">-&gt;</operator><name pos:start="23:43" pos:end="23:54">cluster_bits</name></name><operator pos:start="23:55" pos:end="23:55">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:13">l2_offset</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <name pos:start="25:17" pos:end="25:37"><name pos:start="25:17" pos:end="25:17">s</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:27">l1_table</name><index pos:start="25:28" pos:end="25:37">[<expr pos:start="25:29" pos:end="25:36"><name pos:start="25:29" pos:end="25:36">l1_index</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:16">new_l2_table</name> <operator pos:start="27:18" pos:end="27:18">=</operator> <literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="57:5"><if pos:start="29:5" pos:end="57:5">if <condition pos:start="29:8" pos:end="29:19">(<expr pos:start="29:9" pos:end="29:18"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:18">l2_offset</name></expr>)</condition> <block pos:start="29:21" pos:end="57:5">{<block_content pos:start="31:9" pos:end="55:25">

        <if_stmt pos:start="31:9" pos:end="33:21"><if pos:start="31:9" pos:end="33:21">if <condition pos:start="31:12" pos:end="31:22">(<expr pos:start="31:13" pos:end="31:21"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:21">allocate</name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:21"><block_content pos:start="33:13" pos:end="33:21">

            <return pos:start="33:13" pos:end="33:21">return <expr pos:start="33:20" pos:end="33:20"><literal type="number" pos:start="33:20" pos:end="33:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="35:9" pos:end="35:37">/* allocate a new l2 entry */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:45"><expr pos:start="37:9" pos:end="37:44"><name pos:start="37:9" pos:end="37:17">l2_offset</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <call pos:start="37:21" pos:end="37:44"><name pos:start="37:21" pos:end="37:34">bdrv_getlength</name><argument_list pos:start="37:35" pos:end="37:44">(<argument pos:start="37:36" pos:end="37:43"><expr pos:start="37:36" pos:end="37:43"><name pos:start="37:36" pos:end="37:43"><name pos:start="37:36" pos:end="37:37">bs</name><operator pos:start="37:38" pos:end="37:39">-&gt;</operator><name pos:start="37:40" pos:end="37:43">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="39:9" pos:end="39:35">/* round to cluster size */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:79"><expr pos:start="41:9" pos:end="41:78"><name pos:start="41:9" pos:end="41:17">l2_offset</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <operator pos:start="41:21" pos:end="41:21">(</operator><name pos:start="41:22" pos:end="41:30">l2_offset</name> <operator pos:start="41:32" pos:end="41:32">+</operator> <name pos:start="41:34" pos:end="41:48"><name pos:start="41:34" pos:end="41:34">s</name><operator pos:start="41:35" pos:end="41:36">-&gt;</operator><name pos:start="41:37" pos:end="41:48">cluster_size</name></name> <operator pos:start="41:50" pos:end="41:50">-</operator> <literal type="number" pos:start="41:52" pos:end="41:52">1</literal><operator pos:start="41:53" pos:end="41:53">)</operator> <operator pos:start="41:55" pos:end="41:55">&amp;</operator> <operator pos:start="41:57" pos:end="41:57">~</operator><operator pos:start="41:58" pos:end="41:58">(</operator><name pos:start="41:59" pos:end="41:73"><name pos:start="41:59" pos:end="41:59">s</name><operator pos:start="41:60" pos:end="41:61">-&gt;</operator><name pos:start="41:62" pos:end="41:73">cluster_size</name></name> <operator pos:start="41:75" pos:end="41:75">-</operator> <literal type="number" pos:start="41:77" pos:end="41:77">1</literal><operator pos:start="41:78" pos:end="41:78">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="43:9" pos:end="43:33">/* update the L1 entry */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:42"><expr pos:start="45:9" pos:end="45:41"><name pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:19">l1_table</name><index pos:start="45:20" pos:end="45:29">[<expr pos:start="45:21" pos:end="45:28"><name pos:start="45:21" pos:end="45:28">l1_index</name></expr>]</index></name> <operator pos:start="45:31" pos:end="45:31">=</operator> <name pos:start="45:33" pos:end="45:41">l2_offset</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:37"><expr pos:start="47:9" pos:end="47:36"><name pos:start="47:9" pos:end="47:11">tmp</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:36"><name pos:start="47:15" pos:end="47:25">cpu_to_be64</name><argument_list pos:start="47:26" pos:end="47:36">(<argument pos:start="47:27" pos:end="47:35"><expr pos:start="47:27" pos:end="47:35"><name pos:start="47:27" pos:end="47:35">l2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:21"><if pos:start="49:9" pos:end="53:21">if <condition pos:start="49:12" pos:end="51:58">(<expr pos:start="49:13" pos:end="51:57"><call pos:start="49:13" pos:end="51:42"><name pos:start="49:13" pos:end="49:23">bdrv_pwrite</name><argument_list pos:start="49:24" pos:end="51:42">(<argument pos:start="49:25" pos:end="49:32"><expr pos:start="49:25" pos:end="49:32"><name pos:start="49:25" pos:end="49:32"><name pos:start="49:25" pos:end="49:26">bs</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:32">file</name></name></expr></argument>, <argument pos:start="49:35" pos:end="49:77"><expr pos:start="49:35" pos:end="49:77"><name pos:start="49:35" pos:end="49:52"><name pos:start="49:35" pos:end="49:35">s</name><operator pos:start="49:36" pos:end="49:37">-&gt;</operator><name pos:start="49:38" pos:end="49:52">l1_table_offset</name></name> <operator pos:start="49:54" pos:end="49:54">+</operator> <name pos:start="49:56" pos:end="49:63">l1_index</name> <operator pos:start="49:65" pos:end="49:65">*</operator> <sizeof pos:start="49:67" pos:end="49:77">sizeof<argument_list pos:start="49:73" pos:end="49:77">(<argument pos:start="49:74" pos:end="49:76"><expr pos:start="49:74" pos:end="49:76"><name pos:start="49:74" pos:end="49:76">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                        <argument pos:start="51:25" pos:end="51:28"><expr pos:start="51:25" pos:end="51:28"><operator pos:start="51:25" pos:end="51:25">&amp;</operator><name pos:start="51:26" pos:end="51:28">tmp</name></expr></argument>, <argument pos:start="51:31" pos:end="51:41"><expr pos:start="51:31" pos:end="51:41"><sizeof pos:start="51:31" pos:end="51:41">sizeof<argument_list pos:start="51:37" pos:end="51:41">(<argument pos:start="51:38" pos:end="51:40"><expr pos:start="51:38" pos:end="51:40"><name pos:start="51:38" pos:end="51:40">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="51:44" pos:end="51:45">!=</operator> <sizeof pos:start="51:47" pos:end="51:57">sizeof<argument_list pos:start="51:53" pos:end="51:57">(<argument pos:start="51:54" pos:end="51:56"><expr pos:start="51:54" pos:end="51:56"><name pos:start="51:54" pos:end="51:56">tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:21"><block_content pos:start="53:13" pos:end="53:21">

            <return pos:start="53:13" pos:end="53:21">return <expr pos:start="53:20" pos:end="53:20"><literal type="number" pos:start="53:20" pos:end="53:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:25"><expr pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:20">new_l2_table</name> <operator pos:start="55:22" pos:end="55:22">=</operator> <literal type="number" pos:start="55:24" pos:end="55:24">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="59:5" pos:end="81:5">for<control pos:start="59:8" pos:end="59:38">(<init pos:start="59:9" pos:end="59:14"><expr pos:start="59:9" pos:end="59:13"><name pos:start="59:9" pos:end="59:9">i</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <literal type="number" pos:start="59:13" pos:end="59:13">0</literal></expr>;</init> <condition pos:start="59:16" pos:end="59:33"><expr pos:start="59:16" pos:end="59:32"><name pos:start="59:16" pos:end="59:16">i</name> <operator pos:start="59:18" pos:end="59:18">&lt;</operator> <name pos:start="59:20" pos:end="59:32">L2_CACHE_SIZE</name></expr>;</condition> <incr pos:start="59:35" pos:end="59:37"><expr pos:start="59:35" pos:end="59:37"><name pos:start="59:35" pos:end="59:35">i</name><operator pos:start="59:36" pos:end="59:37">++</operator></expr></incr>)</control> <block pos:start="59:40" pos:end="81:5">{<block_content pos:start="61:9" pos:end="79:9">

        <if_stmt pos:start="61:9" pos:end="79:9"><if pos:start="61:9" pos:end="79:9">if <condition pos:start="61:12" pos:end="61:48">(<expr pos:start="61:13" pos:end="61:47"><name pos:start="61:13" pos:end="61:21">l2_offset</name> <operator pos:start="61:23" pos:end="61:24">==</operator> <name pos:start="61:26" pos:end="61:47"><name pos:start="61:26" pos:end="61:26">s</name><operator pos:start="61:27" pos:end="61:28">-&gt;</operator><name pos:start="61:29" pos:end="61:44">l2_cache_offsets</name><index pos:start="61:45" pos:end="61:47">[<expr pos:start="61:46" pos:end="61:46"><name pos:start="61:46" pos:end="61:46">i</name></expr>]</index></name></expr>)</condition> <block pos:start="61:50" pos:end="79:9">{<block_content pos:start="65:13" pos:end="77:23">

            <comment type="block" pos:start="63:13" pos:end="63:41">/* increment the hit count */</comment>

            <if_stmt pos:start="65:13" pos:end="73:13"><if pos:start="65:13" pos:end="73:13">if <condition pos:start="65:16" pos:end="65:54">(<expr pos:start="65:17" pos:end="65:53"><operator pos:start="65:17" pos:end="65:18">++</operator><name pos:start="65:19" pos:end="65:39"><name pos:start="65:19" pos:end="65:19">s</name><operator pos:start="65:20" pos:end="65:21">-&gt;</operator><name pos:start="65:22" pos:end="65:36">l2_cache_counts</name><index pos:start="65:37" pos:end="65:39">[<expr pos:start="65:38" pos:end="65:38"><name pos:start="65:38" pos:end="65:38">i</name></expr>]</index></name> <operator pos:start="65:41" pos:end="65:42">==</operator> <literal type="number" pos:start="65:44" pos:end="65:53">0xffffffff</literal></expr>)</condition> <block pos:start="65:56" pos:end="73:13">{<block_content pos:start="67:17" pos:end="71:17">

                <for pos:start="67:17" pos:end="71:17">for<control pos:start="67:20" pos:end="67:50">(<init pos:start="67:21" pos:end="67:26"><expr pos:start="67:21" pos:end="67:25"><name pos:start="67:21" pos:end="67:21">j</name> <operator pos:start="67:23" pos:end="67:23">=</operator> <literal type="number" pos:start="67:25" pos:end="67:25">0</literal></expr>;</init> <condition pos:start="67:28" pos:end="67:45"><expr pos:start="67:28" pos:end="67:44"><name pos:start="67:28" pos:end="67:28">j</name> <operator pos:start="67:30" pos:end="67:30">&lt;</operator> <name pos:start="67:32" pos:end="67:44">L2_CACHE_SIZE</name></expr>;</condition> <incr pos:start="67:47" pos:end="67:49"><expr pos:start="67:47" pos:end="67:49"><name pos:start="67:47" pos:end="67:47">j</name><operator pos:start="67:48" pos:end="67:49">++</operator></expr></incr>)</control> <block pos:start="67:52" pos:end="71:17">{<block_content pos:start="69:21" pos:end="69:48">

                    <expr_stmt pos:start="69:21" pos:end="69:48"><expr pos:start="69:21" pos:end="69:47"><name pos:start="69:21" pos:end="69:41"><name pos:start="69:21" pos:end="69:21">s</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:38">l2_cache_counts</name><index pos:start="69:39" pos:end="69:41">[<expr pos:start="69:40" pos:end="69:40"><name pos:start="69:40" pos:end="69:40">j</name></expr>]</index></name> <operator pos:start="69:43" pos:end="69:45">&gt;&gt;=</operator> <literal type="number" pos:start="69:47" pos:end="69:47">1</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:55"><expr pos:start="75:13" pos:end="75:54"><name pos:start="75:13" pos:end="75:20">l2_table</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <name pos:start="75:24" pos:end="75:34"><name pos:start="75:24" pos:end="75:24">s</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:34">l2_cache</name></name> <operator pos:start="75:36" pos:end="75:36">+</operator> <operator pos:start="75:38" pos:end="75:38">(</operator><name pos:start="75:39" pos:end="75:39">i</name> <operator pos:start="75:41" pos:end="75:42">&lt;&lt;</operator> <name pos:start="75:44" pos:end="75:53"><name pos:start="75:44" pos:end="75:44">s</name><operator pos:start="75:45" pos:end="75:46">-&gt;</operator><name pos:start="75:47" pos:end="75:53">l2_bits</name></name><operator pos:start="75:54" pos:end="75:54">)</operator></expr>;</expr_stmt>

            <goto pos:start="77:13" pos:end="77:23">goto <name pos:start="77:18" pos:end="77:22">found</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="83:5" pos:end="83:59">/* not found: load a new entry in the least used one */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:18"><expr pos:start="85:5" pos:end="85:17"><name pos:start="85:5" pos:end="85:13">min_index</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <literal type="number" pos:start="85:17" pos:end="85:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:27"><expr pos:start="87:5" pos:end="87:26"><name pos:start="87:5" pos:end="87:13">min_count</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <literal type="number" pos:start="87:17" pos:end="87:26">0xffffffff</literal></expr>;</expr_stmt>

    <for pos:start="89:5" pos:end="99:5">for<control pos:start="89:8" pos:end="89:38">(<init pos:start="89:9" pos:end="89:14"><expr pos:start="89:9" pos:end="89:13"><name pos:start="89:9" pos:end="89:9">i</name> <operator pos:start="89:11" pos:end="89:11">=</operator> <literal type="number" pos:start="89:13" pos:end="89:13">0</literal></expr>;</init> <condition pos:start="89:16" pos:end="89:33"><expr pos:start="89:16" pos:end="89:32"><name pos:start="89:16" pos:end="89:16">i</name> <operator pos:start="89:18" pos:end="89:18">&lt;</operator> <name pos:start="89:20" pos:end="89:32">L2_CACHE_SIZE</name></expr>;</condition> <incr pos:start="89:35" pos:end="89:37"><expr pos:start="89:35" pos:end="89:37"><name pos:start="89:35" pos:end="89:35">i</name><operator pos:start="89:36" pos:end="89:37">++</operator></expr></incr>)</control> <block pos:start="89:40" pos:end="99:5">{<block_content pos:start="91:9" pos:end="97:9">

        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:46">(<expr pos:start="91:13" pos:end="91:45"><name pos:start="91:13" pos:end="91:33"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:30">l2_cache_counts</name><index pos:start="91:31" pos:end="91:33">[<expr pos:start="91:32" pos:end="91:32"><name pos:start="91:32" pos:end="91:32">i</name></expr>]</index></name> <operator pos:start="91:35" pos:end="91:35">&lt;</operator> <name pos:start="91:37" pos:end="91:45">min_count</name></expr>)</condition> <block pos:start="91:48" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:26">

            <expr_stmt pos:start="93:13" pos:end="93:46"><expr pos:start="93:13" pos:end="93:45"><name pos:start="93:13" pos:end="93:21">min_count</name> <operator pos:start="93:23" pos:end="93:23">=</operator> <name pos:start="93:25" pos:end="93:45"><name pos:start="93:25" pos:end="93:25">s</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:42">l2_cache_counts</name><index pos:start="93:43" pos:end="93:45">[<expr pos:start="93:44" pos:end="93:44"><name pos:start="93:44" pos:end="93:44">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:26"><expr pos:start="95:13" pos:end="95:25"><name pos:start="95:13" pos:end="95:21">min_index</name> <operator pos:start="95:23" pos:end="95:23">=</operator> <name pos:start="95:25" pos:end="95:25">i</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="101:5" pos:end="101:55"><expr pos:start="101:5" pos:end="101:54"><name pos:start="101:5" pos:end="101:12">l2_table</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <name pos:start="101:16" pos:end="101:26"><name pos:start="101:16" pos:end="101:16">s</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:26">l2_cache</name></name> <operator pos:start="101:28" pos:end="101:28">+</operator> <operator pos:start="101:30" pos:end="101:30">(</operator><name pos:start="101:31" pos:end="101:39">min_index</name> <operator pos:start="101:41" pos:end="101:42">&lt;&lt;</operator> <name pos:start="101:44" pos:end="101:53"><name pos:start="101:44" pos:end="101:44">s</name><operator pos:start="101:45" pos:end="101:46">-&gt;</operator><name pos:start="101:47" pos:end="101:53">l2_bits</name></name><operator pos:start="101:54" pos:end="101:54">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="121:5"><if pos:start="103:5" pos:end="113:5">if <condition pos:start="103:8" pos:end="103:21">(<expr pos:start="103:9" pos:end="103:20"><name pos:start="103:9" pos:end="103:20">new_l2_table</name></expr>)</condition> <block pos:start="103:23" pos:end="113:5">{<block_content pos:start="105:9" pos:end="111:21">

        <expr_stmt pos:start="105:9" pos:end="105:59"><expr pos:start="105:9" pos:end="105:58"><call pos:start="105:9" pos:end="105:58"><name pos:start="105:9" pos:end="105:14">memset</name><argument_list pos:start="105:15" pos:end="105:58">(<argument pos:start="105:16" pos:end="105:23"><expr pos:start="105:16" pos:end="105:23"><name pos:start="105:16" pos:end="105:23">l2_table</name></expr></argument>, <argument pos:start="105:26" pos:end="105:26"><expr pos:start="105:26" pos:end="105:26"><literal type="number" pos:start="105:26" pos:end="105:26">0</literal></expr></argument>, <argument pos:start="105:29" pos:end="105:57"><expr pos:start="105:29" pos:end="105:57"><name pos:start="105:29" pos:end="105:38"><name pos:start="105:29" pos:end="105:29">s</name><operator pos:start="105:30" pos:end="105:31">-&gt;</operator><name pos:start="105:32" pos:end="105:38">l2_size</name></name> <operator pos:start="105:40" pos:end="105:40">*</operator> <sizeof pos:start="105:42" pos:end="105:57">sizeof<argument_list pos:start="105:48" pos:end="105:57">(<argument pos:start="105:49" pos:end="105:56"><expr pos:start="105:49" pos:end="105:56"><name pos:start="105:49" pos:end="105:56">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="111:21"><if pos:start="107:9" pos:end="111:21">if <condition pos:start="107:12" pos:end="109:42">(<expr pos:start="107:13" pos:end="109:41"><call pos:start="107:13" pos:end="107:85"><name pos:start="107:13" pos:end="107:23">bdrv_pwrite</name><argument_list pos:start="107:24" pos:end="107:85">(<argument pos:start="107:25" pos:end="107:32"><expr pos:start="107:25" pos:end="107:32"><name pos:start="107:25" pos:end="107:32"><name pos:start="107:25" pos:end="107:26">bs</name><operator pos:start="107:27" pos:end="107:28">-&gt;</operator><name pos:start="107:29" pos:end="107:32">file</name></name></expr></argument>, <argument pos:start="107:35" pos:end="107:43"><expr pos:start="107:35" pos:end="107:43"><name pos:start="107:35" pos:end="107:43">l2_offset</name></expr></argument>, <argument pos:start="107:46" pos:end="107:53"><expr pos:start="107:46" pos:end="107:53"><name pos:start="107:46" pos:end="107:53">l2_table</name></expr></argument>, <argument pos:start="107:56" pos:end="107:84"><expr pos:start="107:56" pos:end="107:84"><name pos:start="107:56" pos:end="107:65"><name pos:start="107:56" pos:end="107:56">s</name><operator pos:start="107:57" pos:end="107:58">-&gt;</operator><name pos:start="107:59" pos:end="107:65">l2_size</name></name> <operator pos:start="107:67" pos:end="107:67">*</operator> <sizeof pos:start="107:69" pos:end="107:84">sizeof<argument_list pos:start="107:75" pos:end="107:84">(<argument pos:start="107:76" pos:end="107:83"><expr pos:start="107:76" pos:end="107:83"><name pos:start="107:76" pos:end="107:83">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="107:87" pos:end="107:88">!=</operator>

            <name pos:start="109:13" pos:end="109:22"><name pos:start="109:13" pos:end="109:13">s</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:22">l2_size</name></name> <operator pos:start="109:24" pos:end="109:24">*</operator> <sizeof pos:start="109:26" pos:end="109:41">sizeof<argument_list pos:start="109:32" pos:end="109:41">(<argument pos:start="109:33" pos:end="109:40"><expr pos:start="109:33" pos:end="109:40"><name pos:start="109:33" pos:end="109:40">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:21"><block_content pos:start="111:13" pos:end="111:21">

            <return pos:start="111:13" pos:end="111:21">return <expr pos:start="111:20" pos:end="111:20"><literal type="number" pos:start="111:20" pos:end="111:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="113:7" pos:end="121:5">else <block pos:start="113:12" pos:end="121:5">{<block_content pos:start="115:9" pos:end="119:21">

        <if_stmt pos:start="115:9" pos:end="119:21"><if pos:start="115:9" pos:end="119:21">if <condition pos:start="115:12" pos:end="117:42">(<expr pos:start="115:13" pos:end="117:41"><call pos:start="115:13" pos:end="115:84"><name pos:start="115:13" pos:end="115:22">bdrv_pread</name><argument_list pos:start="115:23" pos:end="115:84">(<argument pos:start="115:24" pos:end="115:31"><expr pos:start="115:24" pos:end="115:31"><name pos:start="115:24" pos:end="115:31"><name pos:start="115:24" pos:end="115:25">bs</name><operator pos:start="115:26" pos:end="115:27">-&gt;</operator><name pos:start="115:28" pos:end="115:31">file</name></name></expr></argument>, <argument pos:start="115:34" pos:end="115:42"><expr pos:start="115:34" pos:end="115:42"><name pos:start="115:34" pos:end="115:42">l2_offset</name></expr></argument>, <argument pos:start="115:45" pos:end="115:52"><expr pos:start="115:45" pos:end="115:52"><name pos:start="115:45" pos:end="115:52">l2_table</name></expr></argument>, <argument pos:start="115:55" pos:end="115:83"><expr pos:start="115:55" pos:end="115:83"><name pos:start="115:55" pos:end="115:64"><name pos:start="115:55" pos:end="115:55">s</name><operator pos:start="115:56" pos:end="115:57">-&gt;</operator><name pos:start="115:58" pos:end="115:64">l2_size</name></name> <operator pos:start="115:66" pos:end="115:66">*</operator> <sizeof pos:start="115:68" pos:end="115:83">sizeof<argument_list pos:start="115:74" pos:end="115:83">(<argument pos:start="115:75" pos:end="115:82"><expr pos:start="115:75" pos:end="115:82"><name pos:start="115:75" pos:end="115:82">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="115:86" pos:end="115:87">!=</operator>

            <name pos:start="117:13" pos:end="117:22"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:22">l2_size</name></name> <operator pos:start="117:24" pos:end="117:24">*</operator> <sizeof pos:start="117:26" pos:end="117:41">sizeof<argument_list pos:start="117:32" pos:end="117:41">(<argument pos:start="117:33" pos:end="117:40"><expr pos:start="117:33" pos:end="117:40"><name pos:start="117:33" pos:end="117:40">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="119:13" pos:end="119:21"><block_content pos:start="119:13" pos:end="119:21">

            <return pos:start="119:13" pos:end="119:21">return <expr pos:start="119:20" pos:end="119:20"><literal type="number" pos:start="119:20" pos:end="119:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:47"><expr pos:start="123:5" pos:end="123:46"><name pos:start="123:5" pos:end="123:34"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:23">l2_cache_offsets</name><index pos:start="123:24" pos:end="123:34">[<expr pos:start="123:25" pos:end="123:33"><name pos:start="123:25" pos:end="123:33">min_index</name></expr>]</index></name> <operator pos:start="123:36" pos:end="123:36">=</operator> <name pos:start="123:38" pos:end="123:46">l2_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:38"><expr pos:start="125:5" pos:end="125:37"><name pos:start="125:5" pos:end="125:33"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:22">l2_cache_counts</name><index pos:start="125:23" pos:end="125:33">[<expr pos:start="125:24" pos:end="125:32"><name pos:start="125:24" pos:end="125:32">min_index</name></expr>]</index></name> <operator pos:start="125:35" pos:end="125:35">=</operator> <literal type="number" pos:start="125:37" pos:end="125:37">1</literal></expr>;</expr_stmt>

 <label pos:start="127:2" pos:end="127:7"><name pos:start="127:2" pos:end="127:6">found</name>:</label>

    <expr_stmt pos:start="129:5" pos:end="129:62"><expr pos:start="129:5" pos:end="129:61"><name pos:start="129:5" pos:end="129:12">l2_index</name> <operator pos:start="129:14" pos:end="129:14">=</operator> <operator pos:start="129:16" pos:end="129:16">(</operator><name pos:start="129:17" pos:end="129:22">offset</name> <operator pos:start="129:24" pos:end="129:25">&gt;&gt;</operator> <name pos:start="129:27" pos:end="129:41"><name pos:start="129:27" pos:end="129:27">s</name><operator pos:start="129:28" pos:end="129:29">-&gt;</operator><name pos:start="129:30" pos:end="129:41">cluster_bits</name></name><operator pos:start="129:42" pos:end="129:42">)</operator> <operator pos:start="129:44" pos:end="129:44">&amp;</operator> <operator pos:start="129:46" pos:end="129:46">(</operator><name pos:start="129:47" pos:end="129:56"><name pos:start="129:47" pos:end="129:47">s</name><operator pos:start="129:48" pos:end="129:49">-&gt;</operator><name pos:start="129:50" pos:end="129:56">l2_size</name></name> <operator pos:start="129:58" pos:end="129:58">-</operator> <literal type="number" pos:start="129:60" pos:end="129:60">1</literal><operator pos:start="129:61" pos:end="129:61">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:53"><expr pos:start="131:5" pos:end="131:52"><name pos:start="131:5" pos:end="131:18">cluster_offset</name> <operator pos:start="131:20" pos:end="131:20">=</operator> <call pos:start="131:22" pos:end="131:52"><name pos:start="131:22" pos:end="131:32">be64_to_cpu</name><argument_list pos:start="131:33" pos:end="131:52">(<argument pos:start="131:34" pos:end="131:51"><expr pos:start="131:34" pos:end="131:51"><name pos:start="131:34" pos:end="131:51"><name pos:start="131:34" pos:end="131:41">l2_table</name><index pos:start="131:42" pos:end="131:51">[<expr pos:start="131:43" pos:end="131:50"><name pos:start="131:43" pos:end="131:50">l2_index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="245:5"><if pos:start="133:5" pos:end="245:5">if <condition pos:start="133:8" pos:end="135:68">(<expr pos:start="133:9" pos:end="135:67"><operator pos:start="133:9" pos:end="133:9">!</operator><name pos:start="133:10" pos:end="133:23">cluster_offset</name> <operator pos:start="133:25" pos:end="133:26">||</operator>

        <operator pos:start="135:9" pos:end="135:9">(</operator><operator pos:start="135:10" pos:end="135:10">(</operator><name pos:start="135:11" pos:end="135:24">cluster_offset</name> <operator pos:start="135:26" pos:end="135:26">&amp;</operator> <name pos:start="135:28" pos:end="135:48">QCOW_OFLAG_COMPRESSED</name><operator pos:start="135:49" pos:end="135:49">)</operator> <operator pos:start="135:51" pos:end="135:52">&amp;&amp;</operator> <name pos:start="135:54" pos:end="135:61">allocate</name> <operator pos:start="135:63" pos:end="135:64">==</operator> <literal type="number" pos:start="135:66" pos:end="135:66">1</literal><operator pos:start="135:67" pos:end="135:67">)</operator></expr>)</condition> <block pos:start="135:70" pos:end="245:5">{<block_content pos:start="137:9" pos:end="243:21">

        <if_stmt pos:start="137:9" pos:end="139:21"><if pos:start="137:9" pos:end="139:21">if <condition pos:start="137:12" pos:end="137:22">(<expr pos:start="137:13" pos:end="137:21"><operator pos:start="137:13" pos:end="137:13">!</operator><name pos:start="137:14" pos:end="137:21">allocate</name></expr>)</condition><block type="pseudo" pos:start="139:13" pos:end="139:21"><block_content pos:start="139:13" pos:end="139:21">

            <return pos:start="139:13" pos:end="139:21">return <expr pos:start="139:20" pos:end="139:20"><literal type="number" pos:start="139:20" pos:end="139:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="141:9" pos:end="141:36">/* allocate a new cluster */</comment>

        <if_stmt pos:start="143:9" pos:end="231:9"><if pos:start="143:9" pos:end="171:9">if <condition pos:start="143:12" pos:end="145:51">(<expr pos:start="143:13" pos:end="145:50"><operator pos:start="143:13" pos:end="143:13">(</operator><name pos:start="143:14" pos:end="143:27">cluster_offset</name> <operator pos:start="143:29" pos:end="143:29">&amp;</operator> <name pos:start="143:31" pos:end="143:51">QCOW_OFLAG_COMPRESSED</name><operator pos:start="143:52" pos:end="143:52">)</operator> <operator pos:start="143:54" pos:end="143:55">&amp;&amp;</operator>

            <operator pos:start="145:13" pos:end="145:13">(</operator><name pos:start="145:14" pos:end="145:18">n_end</name> <operator pos:start="145:20" pos:end="145:20">-</operator> <name pos:start="145:22" pos:end="145:28">n_start</name><operator pos:start="145:29" pos:end="145:29">)</operator> <operator pos:start="145:31" pos:end="145:31">&lt;</operator> <name pos:start="145:33" pos:end="145:50"><name pos:start="145:33" pos:end="145:33">s</name><operator pos:start="145:34" pos:end="145:35">-&gt;</operator><name pos:start="145:36" pos:end="145:50">cluster_sectors</name></name></expr>)</condition> <block pos:start="145:53" pos:end="171:9">{<block_content pos:start="153:13" pos:end="169:26">

            <comment type="block" pos:start="147:13" pos:end="151:29">/* if the cluster is already compressed, we must

               decompress it in the case it is not completely

               overwritten */</comment>

            <if_stmt pos:start="153:13" pos:end="155:25"><if pos:start="153:13" pos:end="155:25">if <condition pos:start="153:16" pos:end="153:59">(<expr pos:start="153:17" pos:end="153:58"><call pos:start="153:17" pos:end="153:54"><name pos:start="153:17" pos:end="153:34">decompress_cluster</name><argument_list pos:start="153:35" pos:end="153:54">(<argument pos:start="153:36" pos:end="153:37"><expr pos:start="153:36" pos:end="153:37"><name pos:start="153:36" pos:end="153:37">bs</name></expr></argument>, <argument pos:start="153:40" pos:end="153:53"><expr pos:start="153:40" pos:end="153:53"><name pos:start="153:40" pos:end="153:53">cluster_offset</name></expr></argument>)</argument_list></call> <operator pos:start="153:56" pos:end="153:56">&lt;</operator> <literal type="number" pos:start="153:58" pos:end="153:58">0</literal></expr>)</condition><block type="pseudo" pos:start="155:17" pos:end="155:25"><block_content pos:start="155:17" pos:end="155:25">

                <return pos:start="155:17" pos:end="155:25">return <expr pos:start="155:24" pos:end="155:24"><literal type="number" pos:start="155:24" pos:end="155:24">0</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:54"><expr pos:start="157:13" pos:end="157:53"><name pos:start="157:13" pos:end="157:26">cluster_offset</name> <operator pos:start="157:28" pos:end="157:28">=</operator> <call pos:start="157:30" pos:end="157:53"><name pos:start="157:30" pos:end="157:43">bdrv_getlength</name><argument_list pos:start="157:44" pos:end="157:53">(<argument pos:start="157:45" pos:end="157:52"><expr pos:start="157:45" pos:end="157:52"><name pos:start="157:45" pos:end="157:52"><name pos:start="157:45" pos:end="157:46">bs</name><operator pos:start="157:47" pos:end="157:48">-&gt;</operator><name pos:start="157:49" pos:end="157:52">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="161:39"><expr pos:start="159:13" pos:end="161:38"><name pos:start="159:13" pos:end="159:26">cluster_offset</name> <operator pos:start="159:28" pos:end="159:28">=</operator> <operator pos:start="159:30" pos:end="159:30">(</operator><name pos:start="159:31" pos:end="159:44">cluster_offset</name> <operator pos:start="159:46" pos:end="159:46">+</operator> <name pos:start="159:48" pos:end="159:62"><name pos:start="159:48" pos:end="159:48">s</name><operator pos:start="159:49" pos:end="159:50">-&gt;</operator><name pos:start="159:51" pos:end="159:62">cluster_size</name></name> <operator pos:start="159:64" pos:end="159:64">-</operator> <literal type="number" pos:start="159:66" pos:end="159:66">1</literal><operator pos:start="159:67" pos:end="159:67">)</operator> <operator pos:start="159:69" pos:end="159:69">&amp;</operator>

                <operator pos:start="161:17" pos:end="161:17">~</operator><operator pos:start="161:18" pos:end="161:18">(</operator><name pos:start="161:19" pos:end="161:33"><name pos:start="161:19" pos:end="161:19">s</name><operator pos:start="161:20" pos:end="161:21">-&gt;</operator><name pos:start="161:22" pos:end="161:33">cluster_size</name></name> <operator pos:start="161:35" pos:end="161:35">-</operator> <literal type="number" pos:start="161:37" pos:end="161:37">1</literal><operator pos:start="161:38" pos:end="161:38">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="163:13" pos:end="163:43">/* write the cluster content */</comment>

            <if_stmt pos:start="165:13" pos:end="169:26"><if pos:start="165:13" pos:end="169:26">if <condition pos:start="165:16" pos:end="167:32">(<expr pos:start="165:17" pos:end="167:31"><call pos:start="165:17" pos:end="165:88"><name pos:start="165:17" pos:end="165:27">bdrv_pwrite</name><argument_list pos:start="165:28" pos:end="165:88">(<argument pos:start="165:29" pos:end="165:36"><expr pos:start="165:29" pos:end="165:36"><name pos:start="165:29" pos:end="165:36"><name pos:start="165:29" pos:end="165:30">bs</name><operator pos:start="165:31" pos:end="165:32">-&gt;</operator><name pos:start="165:33" pos:end="165:36">file</name></name></expr></argument>, <argument pos:start="165:39" pos:end="165:52"><expr pos:start="165:39" pos:end="165:52"><name pos:start="165:39" pos:end="165:52">cluster_offset</name></expr></argument>, <argument pos:start="165:55" pos:end="165:70"><expr pos:start="165:55" pos:end="165:70"><name pos:start="165:55" pos:end="165:70"><name pos:start="165:55" pos:end="165:55">s</name><operator pos:start="165:56" pos:end="165:57">-&gt;</operator><name pos:start="165:58" pos:end="165:70">cluster_cache</name></name></expr></argument>, <argument pos:start="165:73" pos:end="165:87"><expr pos:start="165:73" pos:end="165:87"><name pos:start="165:73" pos:end="165:87"><name pos:start="165:73" pos:end="165:73">s</name><operator pos:start="165:74" pos:end="165:75">-&gt;</operator><name pos:start="165:76" pos:end="165:87">cluster_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="165:90" pos:end="165:91">!=</operator>

                <name pos:start="167:17" pos:end="167:31"><name pos:start="167:17" pos:end="167:17">s</name><operator pos:start="167:18" pos:end="167:19">-&gt;</operator><name pos:start="167:20" pos:end="167:31">cluster_size</name></name></expr>)</condition><block type="pseudo" pos:start="169:17" pos:end="169:26"><block_content pos:start="169:17" pos:end="169:26">

                <return pos:start="169:17" pos:end="169:26">return <expr pos:start="169:24" pos:end="169:25"><operator pos:start="169:24" pos:end="169:24">-</operator><literal type="number" pos:start="169:25" pos:end="169:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="171:11" pos:end="231:9">else <block pos:start="171:16" pos:end="231:9">{<block_content pos:start="173:13" pos:end="229:13">

            <expr_stmt pos:start="173:13" pos:end="173:54"><expr pos:start="173:13" pos:end="173:53"><name pos:start="173:13" pos:end="173:26">cluster_offset</name> <operator pos:start="173:28" pos:end="173:28">=</operator> <call pos:start="173:30" pos:end="173:53"><name pos:start="173:30" pos:end="173:43">bdrv_getlength</name><argument_list pos:start="173:44" pos:end="173:53">(<argument pos:start="173:45" pos:end="173:52"><expr pos:start="173:45" pos:end="173:52"><name pos:start="173:45" pos:end="173:52"><name pos:start="173:45" pos:end="173:46">bs</name><operator pos:start="173:47" pos:end="173:48">-&gt;</operator><name pos:start="173:49" pos:end="173:52">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="175:13" pos:end="229:13"><if pos:start="175:13" pos:end="223:13">if <condition pos:start="175:16" pos:end="175:30">(<expr pos:start="175:17" pos:end="175:29"><name pos:start="175:17" pos:end="175:24">allocate</name> <operator pos:start="175:26" pos:end="175:27">==</operator> <literal type="number" pos:start="175:29" pos:end="175:29">1</literal></expr>)</condition> <block pos:start="175:32" pos:end="223:13">{<block_content pos:start="179:17" pos:end="221:17">

                <comment type="block" pos:start="177:17" pos:end="177:43">/* round to cluster size */</comment>

                <expr_stmt pos:start="179:17" pos:end="181:43"><expr pos:start="179:17" pos:end="181:42"><name pos:start="179:17" pos:end="179:30">cluster_offset</name> <operator pos:start="179:32" pos:end="179:32">=</operator> <operator pos:start="179:34" pos:end="179:34">(</operator><name pos:start="179:35" pos:end="179:48">cluster_offset</name> <operator pos:start="179:50" pos:end="179:50">+</operator> <name pos:start="179:52" pos:end="179:66"><name pos:start="179:52" pos:end="179:52">s</name><operator pos:start="179:53" pos:end="179:54">-&gt;</operator><name pos:start="179:55" pos:end="179:66">cluster_size</name></name> <operator pos:start="179:68" pos:end="179:68">-</operator> <literal type="number" pos:start="179:70" pos:end="179:70">1</literal><operator pos:start="179:71" pos:end="179:71">)</operator> <operator pos:start="179:73" pos:end="179:73">&amp;</operator>

                    <operator pos:start="181:21" pos:end="181:21">~</operator><operator pos:start="181:22" pos:end="181:22">(</operator><name pos:start="181:23" pos:end="181:37"><name pos:start="181:23" pos:end="181:23">s</name><operator pos:start="181:24" pos:end="181:25">-&gt;</operator><name pos:start="181:26" pos:end="181:37">cluster_size</name></name> <operator pos:start="181:39" pos:end="181:39">-</operator> <literal type="number" pos:start="181:41" pos:end="181:41">1</literal><operator pos:start="181:42" pos:end="181:42">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:74"><expr pos:start="183:17" pos:end="183:73"><call pos:start="183:17" pos:end="183:73"><name pos:start="183:17" pos:end="183:29">bdrv_truncate</name><argument_list pos:start="183:30" pos:end="183:73">(<argument pos:start="183:31" pos:end="183:38"><expr pos:start="183:31" pos:end="183:38"><name pos:start="183:31" pos:end="183:38"><name pos:start="183:31" pos:end="183:32">bs</name><operator pos:start="183:33" pos:end="183:34">-&gt;</operator><name pos:start="183:35" pos:end="183:38">file</name></name></expr></argument>, <argument pos:start="183:41" pos:end="183:72"><expr pos:start="183:41" pos:end="183:72"><name pos:start="183:41" pos:end="183:54">cluster_offset</name> <operator pos:start="183:56" pos:end="183:56">+</operator> <name pos:start="183:58" pos:end="183:72"><name pos:start="183:58" pos:end="183:58">s</name><operator pos:start="183:59" pos:end="183:60">-&gt;</operator><name pos:start="183:61" pos:end="183:72">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="185:17" pos:end="187:52">/* if encrypted, we must initialize the cluster

                   content which won't be written */</comment>

                <if_stmt pos:start="189:17" pos:end="221:17"><if pos:start="189:17" pos:end="221:17">if <condition pos:start="189:20" pos:end="191:59">(<expr pos:start="189:21" pos:end="191:58"><name pos:start="189:21" pos:end="189:35"><name pos:start="189:21" pos:end="189:21">s</name><operator pos:start="189:22" pos:end="189:23">-&gt;</operator><name pos:start="189:24" pos:end="189:35">crypt_method</name></name> <operator pos:start="189:37" pos:end="189:38">&amp;&amp;</operator>

                    <operator pos:start="191:21" pos:end="191:21">(</operator><name pos:start="191:22" pos:end="191:26">n_end</name> <operator pos:start="191:28" pos:end="191:28">-</operator> <name pos:start="191:30" pos:end="191:36">n_start</name><operator pos:start="191:37" pos:end="191:37">)</operator> <operator pos:start="191:39" pos:end="191:39">&lt;</operator> <name pos:start="191:41" pos:end="191:58"><name pos:start="191:41" pos:end="191:41">s</name><operator pos:start="191:42" pos:end="191:43">-&gt;</operator><name pos:start="191:44" pos:end="191:58">cluster_sectors</name></name></expr>)</condition> <block pos:start="191:61" pos:end="221:17">{<block_content pos:start="193:21" pos:end="219:21">

                    <decl_stmt pos:start="193:21" pos:end="193:40"><decl pos:start="193:21" pos:end="193:39"><type pos:start="193:21" pos:end="193:28"><name pos:start="193:21" pos:end="193:28">uint64_t</name></type> <name pos:start="193:30" pos:end="193:39">start_sect</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="195:21" pos:end="195:72"><expr pos:start="195:21" pos:end="195:71"><name pos:start="195:21" pos:end="195:30">start_sect</name> <operator pos:start="195:32" pos:end="195:32">=</operator> <operator pos:start="195:34" pos:end="195:34">(</operator><name pos:start="195:35" pos:end="195:40">offset</name> <operator pos:start="195:42" pos:end="195:42">&amp;</operator> <operator pos:start="195:44" pos:end="195:44">~</operator><operator pos:start="195:45" pos:end="195:45">(</operator><name pos:start="195:46" pos:end="195:60"><name pos:start="195:46" pos:end="195:46">s</name><operator pos:start="195:47" pos:end="195:48">-&gt;</operator><name pos:start="195:49" pos:end="195:60">cluster_size</name></name> <operator pos:start="195:62" pos:end="195:62">-</operator> <literal type="number" pos:start="195:64" pos:end="195:64">1</literal><operator pos:start="195:65" pos:end="195:65">)</operator><operator pos:start="195:66" pos:end="195:66">)</operator> <operator pos:start="195:68" pos:end="195:69">&gt;&gt;</operator> <literal type="number" pos:start="195:71" pos:end="195:71">9</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="197:21" pos:end="197:61"><expr pos:start="197:21" pos:end="197:60"><call pos:start="197:21" pos:end="197:60"><name pos:start="197:21" pos:end="197:26">memset</name><argument_list pos:start="197:27" pos:end="197:60">(<argument pos:start="197:28" pos:end="197:48"><expr pos:start="197:28" pos:end="197:48"><name pos:start="197:28" pos:end="197:42"><name pos:start="197:28" pos:end="197:28">s</name><operator pos:start="197:29" pos:end="197:30">-&gt;</operator><name pos:start="197:31" pos:end="197:42">cluster_data</name></name> <operator pos:start="197:44" pos:end="197:44">+</operator> <literal type="number" pos:start="197:46" pos:end="197:48">512</literal></expr></argument>, <argument pos:start="197:51" pos:end="197:54"><expr pos:start="197:51" pos:end="197:54"><literal type="number" pos:start="197:51" pos:end="197:54">0x00</literal></expr></argument>, <argument pos:start="197:57" pos:end="197:59"><expr pos:start="197:57" pos:end="197:59"><literal type="number" pos:start="197:57" pos:end="197:59">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="199:21" pos:end="219:21">for<control pos:start="199:24" pos:end="199:59">(<init pos:start="199:25" pos:end="199:30"><expr pos:start="199:25" pos:end="199:29"><name pos:start="199:25" pos:end="199:25">i</name> <operator pos:start="199:27" pos:end="199:27">=</operator> <literal type="number" pos:start="199:29" pos:end="199:29">0</literal></expr>;</init> <condition pos:start="199:32" pos:end="199:54"><expr pos:start="199:32" pos:end="199:53"><name pos:start="199:32" pos:end="199:32">i</name> <operator pos:start="199:34" pos:end="199:34">&lt;</operator> <name pos:start="199:36" pos:end="199:53"><name pos:start="199:36" pos:end="199:36">s</name><operator pos:start="199:37" pos:end="199:38">-&gt;</operator><name pos:start="199:39" pos:end="199:53">cluster_sectors</name></name></expr>;</condition> <incr pos:start="199:56" pos:end="199:58"><expr pos:start="199:56" pos:end="199:58"><name pos:start="199:56" pos:end="199:56">i</name><operator pos:start="199:57" pos:end="199:58">++</operator></expr></incr>)</control> <block pos:start="199:61" pos:end="219:21">{<block_content pos:start="201:25" pos:end="217:25">

                        <if_stmt pos:start="201:25" pos:end="217:25"><if pos:start="201:25" pos:end="217:25">if <condition pos:start="201:28" pos:end="201:54">(<expr pos:start="201:29" pos:end="201:53"><name pos:start="201:29" pos:end="201:29">i</name> <operator pos:start="201:31" pos:end="201:31">&lt;</operator> <name pos:start="201:33" pos:end="201:39">n_start</name> <operator pos:start="201:41" pos:end="201:42">||</operator> <name pos:start="201:44" pos:end="201:44">i</name> <operator pos:start="201:46" pos:end="201:47">&gt;=</operator> <name pos:start="201:49" pos:end="201:53">n_end</name></expr>)</condition> <block pos:start="201:56" pos:end="217:25">{<block_content pos:start="203:29" pos:end="215:42">

                            <expr_stmt pos:start="203:29" pos:end="209:65"><expr pos:start="203:29" pos:end="209:64"><call pos:start="203:29" pos:end="209:64"><name pos:start="203:29" pos:end="203:43">encrypt_sectors</name><argument_list pos:start="203:44" pos:end="209:64">(<argument pos:start="203:45" pos:end="203:45"><expr pos:start="203:45" pos:end="203:45"><name pos:start="203:45" pos:end="203:45">s</name></expr></argument>, <argument pos:start="203:48" pos:end="203:61"><expr pos:start="203:48" pos:end="203:61"><name pos:start="203:48" pos:end="203:57">start_sect</name> <operator pos:start="203:59" pos:end="203:59">+</operator> <name pos:start="203:61" pos:end="203:61">i</name></expr></argument>,

                                            <argument pos:start="205:45" pos:end="205:59"><expr pos:start="205:45" pos:end="205:59"><name pos:start="205:45" pos:end="205:59"><name pos:start="205:45" pos:end="205:45">s</name><operator pos:start="205:46" pos:end="205:47">-&gt;</operator><name pos:start="205:48" pos:end="205:59">cluster_data</name></name></expr></argument>,

                                            <argument pos:start="207:45" pos:end="207:65"><expr pos:start="207:45" pos:end="207:65"><name pos:start="207:45" pos:end="207:59"><name pos:start="207:45" pos:end="207:45">s</name><operator pos:start="207:46" pos:end="207:47">-&gt;</operator><name pos:start="207:48" pos:end="207:59">cluster_data</name></name> <operator pos:start="207:61" pos:end="207:61">+</operator> <literal type="number" pos:start="207:63" pos:end="207:65">512</literal></expr></argument>, <argument pos:start="207:68" pos:end="207:68"><expr pos:start="207:68" pos:end="207:68"><literal type="number" pos:start="207:68" pos:end="207:68">1</literal></expr></argument>, <argument pos:start="207:71" pos:end="207:71"><expr pos:start="207:71" pos:end="207:71"><literal type="number" pos:start="207:71" pos:end="207:71">1</literal></expr></argument>,

                                            <argument pos:start="209:45" pos:end="209:63"><expr pos:start="209:45" pos:end="209:63"><operator pos:start="209:45" pos:end="209:45">&amp;</operator><name pos:start="209:46" pos:end="209:63"><name pos:start="209:46" pos:end="209:46">s</name><operator pos:start="209:47" pos:end="209:48">-&gt;</operator><name pos:start="209:49" pos:end="209:63">aes_encrypt_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="211:29" pos:end="215:42"><if pos:start="211:29" pos:end="215:42">if <condition pos:start="211:32" pos:end="213:73">(<expr pos:start="211:33" pos:end="213:72"><call pos:start="211:33" pos:end="213:65"><name pos:start="211:33" pos:end="211:43">bdrv_pwrite</name><argument_list pos:start="211:44" pos:end="213:65">(<argument pos:start="211:45" pos:end="211:52"><expr pos:start="211:45" pos:end="211:52"><name pos:start="211:45" pos:end="211:52"><name pos:start="211:45" pos:end="211:46">bs</name><operator pos:start="211:47" pos:end="211:48">-&gt;</operator><name pos:start="211:49" pos:end="211:52">file</name></name></expr></argument>, <argument pos:start="211:55" pos:end="211:78"><expr pos:start="211:55" pos:end="211:78"><name pos:start="211:55" pos:end="211:68">cluster_offset</name> <operator pos:start="211:70" pos:end="211:70">+</operator> <name pos:start="211:72" pos:end="211:72">i</name> <operator pos:start="211:74" pos:end="211:74">*</operator> <literal type="number" pos:start="211:76" pos:end="211:78">512</literal></expr></argument>,

                                            <argument pos:start="213:45" pos:end="213:59"><expr pos:start="213:45" pos:end="213:59"><name pos:start="213:45" pos:end="213:59"><name pos:start="213:45" pos:end="213:45">s</name><operator pos:start="213:46" pos:end="213:47">-&gt;</operator><name pos:start="213:48" pos:end="213:59">cluster_data</name></name></expr></argument>, <argument pos:start="213:62" pos:end="213:64"><expr pos:start="213:62" pos:end="213:64"><literal type="number" pos:start="213:62" pos:end="213:64">512</literal></expr></argument>)</argument_list></call> <operator pos:start="213:67" pos:end="213:68">!=</operator> <literal type="number" pos:start="213:70" pos:end="213:72">512</literal></expr>)</condition><block type="pseudo" pos:start="215:33" pos:end="215:42"><block_content pos:start="215:33" pos:end="215:42">

                                <return pos:start="215:33" pos:end="215:42">return <expr pos:start="215:40" pos:end="215:41"><operator pos:start="215:40" pos:end="215:40">-</operator><literal type="number" pos:start="215:41" pos:end="215:41">1</literal></expr>;</return></block_content></block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="223:15" pos:end="229:13">else if <condition pos:start="223:23" pos:end="223:37">(<expr pos:start="223:24" pos:end="223:36"><name pos:start="223:24" pos:end="223:31">allocate</name> <operator pos:start="223:33" pos:end="223:34">==</operator> <literal type="number" pos:start="223:36" pos:end="223:36">2</literal></expr>)</condition> <block pos:start="223:39" pos:end="229:13">{<block_content pos:start="225:17" pos:end="227:72">

                <expr_stmt pos:start="225:17" pos:end="227:72"><expr pos:start="225:17" pos:end="227:71"><name pos:start="225:17" pos:end="225:30">cluster_offset</name> <operator pos:start="225:32" pos:end="225:33">|=</operator> <name pos:start="225:35" pos:end="225:55">QCOW_OFLAG_COMPRESSED</name> <operator pos:start="225:57" pos:end="225:57">|</operator>

                    <operator pos:start="227:21" pos:end="227:21">(</operator><name pos:start="227:22" pos:end="227:29">uint64_t</name><operator pos:start="227:30" pos:end="227:30">)</operator><name pos:start="227:31" pos:end="227:45">compressed_size</name> <operator pos:start="227:47" pos:end="227:48">&lt;&lt;</operator> <operator pos:start="227:50" pos:end="227:50">(</operator><literal type="number" pos:start="227:51" pos:end="227:54">63</literal> <operator pos:start="227:54" pos:end="227:54">-</operator> <name pos:start="227:56" pos:end="227:70"><name pos:start="227:56" pos:end="227:56">s</name><operator pos:start="227:57" pos:end="227:58">-&gt;</operator><name pos:start="227:59" pos:end="227:70">cluster_bits</name></name><operator pos:start="227:71" pos:end="227:71">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="233:9" pos:end="233:29">/* update L2 table */</comment>

        <expr_stmt pos:start="235:9" pos:end="235:42"><expr pos:start="235:9" pos:end="235:41"><name pos:start="235:9" pos:end="235:11">tmp</name> <operator pos:start="235:13" pos:end="235:13">=</operator> <call pos:start="235:15" pos:end="235:41"><name pos:start="235:15" pos:end="235:25">cpu_to_be64</name><argument_list pos:start="235:26" pos:end="235:41">(<argument pos:start="235:27" pos:end="235:40"><expr pos:start="235:27" pos:end="235:40"><name pos:start="235:27" pos:end="235:40">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:33"><expr pos:start="237:9" pos:end="237:32"><name pos:start="237:9" pos:end="237:26"><name pos:start="237:9" pos:end="237:16">l2_table</name><index pos:start="237:17" pos:end="237:26">[<expr pos:start="237:18" pos:end="237:25"><name pos:start="237:18" pos:end="237:25">l2_index</name></expr>]</index></name> <operator pos:start="237:28" pos:end="237:28">=</operator> <name pos:start="237:30" pos:end="237:32">tmp</name></expr>;</expr_stmt>

        <if_stmt pos:start="239:9" pos:end="243:21"><if pos:start="239:9" pos:end="243:21">if <condition pos:start="239:12" pos:end="241:94">(<expr pos:start="239:13" pos:end="241:93"><call pos:start="239:13" pos:end="241:78"><name pos:start="239:13" pos:end="239:23">bdrv_pwrite</name><argument_list pos:start="239:24" pos:end="241:78">(<argument pos:start="239:25" pos:end="239:32"><expr pos:start="239:25" pos:end="239:32"><name pos:start="239:25" pos:end="239:32"><name pos:start="239:25" pos:end="239:26">bs</name><operator pos:start="239:27" pos:end="239:28">-&gt;</operator><name pos:start="239:29" pos:end="239:32">file</name></name></expr></argument>,

                        <argument pos:start="241:25" pos:end="241:58"><expr pos:start="241:25" pos:end="241:58"><name pos:start="241:25" pos:end="241:33">l2_offset</name> <operator pos:start="241:35" pos:end="241:35">+</operator> <name pos:start="241:37" pos:end="241:44">l2_index</name> <operator pos:start="241:46" pos:end="241:46">*</operator> <sizeof pos:start="241:48" pos:end="241:58">sizeof<argument_list pos:start="241:54" pos:end="241:58">(<argument pos:start="241:55" pos:end="241:57"><expr pos:start="241:55" pos:end="241:57"><name pos:start="241:55" pos:end="241:57">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="241:61" pos:end="241:64"><expr pos:start="241:61" pos:end="241:64"><operator pos:start="241:61" pos:end="241:61">&amp;</operator><name pos:start="241:62" pos:end="241:64">tmp</name></expr></argument>, <argument pos:start="241:67" pos:end="241:77"><expr pos:start="241:67" pos:end="241:77"><sizeof pos:start="241:67" pos:end="241:77">sizeof<argument_list pos:start="241:73" pos:end="241:77">(<argument pos:start="241:74" pos:end="241:76"><expr pos:start="241:74" pos:end="241:76"><name pos:start="241:74" pos:end="241:76">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="241:80" pos:end="241:81">!=</operator> <sizeof pos:start="241:83" pos:end="241:93">sizeof<argument_list pos:start="241:89" pos:end="241:93">(<argument pos:start="241:90" pos:end="241:92"><expr pos:start="241:90" pos:end="241:92"><name pos:start="241:90" pos:end="241:92">tmp</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="243:13" pos:end="243:21"><block_content pos:start="243:13" pos:end="243:21">

            <return pos:start="243:13" pos:end="243:21">return <expr pos:start="243:20" pos:end="243:20"><literal type="number" pos:start="243:20" pos:end="243:20">0</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="247:5" pos:end="247:26">return <expr pos:start="247:12" pos:end="247:25"><name pos:start="247:12" pos:end="247:25">cluster_offset</name></expr>;</return>

</block_content>}</block></function>
</unit>
