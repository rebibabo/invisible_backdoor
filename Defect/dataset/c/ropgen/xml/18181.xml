<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18181.c" pos:tabs="8"><function pos:start="1:1" pos:end="235:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">img_map</name><parameter_list pos:start="1:19" pos:end="1:41">(<parameter pos:start="1:20" pos:end="1:27"><decl pos:start="1:20" pos:end="1:27"><type pos:start="1:20" pos:end="1:27"><name pos:start="1:20" pos:end="1:22">int</name></type> <name pos:start="1:24" pos:end="1:27">argc</name></decl></parameter>, <parameter pos:start="1:30" pos:end="1:40"><decl pos:start="1:30" pos:end="1:40"><type pos:start="1:30" pos:end="1:40"><name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier><modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:40">argv</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="235:1">{<block_content pos:start="5:5" pos:end="233:19">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">OutputFormat</name></type> <name pos:start="7:18" pos:end="7:30">output_format</name> <init pos:start="7:32" pos:end="7:46">= <expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">OFORMAT_HUMAN</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">BlockBackend</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">blk</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:40"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:24">filename</name></decl>, <decl pos:start="13:27" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:27" pos:end="13:27">*</modifier></type><name pos:start="13:28" pos:end="13:30">fmt</name></decl>, <decl pos:start="13:33" pos:end="13:39"><type ref="prev" pos:start="13:5" pos:end="13:16"><modifier pos:start="13:33" pos:end="13:33">*</modifier></type><name pos:start="13:34" pos:end="13:39">output</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:18">length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">MapEntry</name></type> <name pos:start="17:14" pos:end="17:17">curr</name> <init pos:start="17:19" pos:end="17:35">= <expr pos:start="17:21" pos:end="17:35"><block pos:start="17:21" pos:end="17:35">{ <expr pos:start="17:23" pos:end="17:33"><operator pos:start="17:23" pos:end="17:23">.</operator><name pos:start="17:24" pos:end="17:29">length</name> <operator pos:start="17:31" pos:end="17:31">=</operator> <literal type="number" pos:start="17:33" pos:end="17:33">0</literal></expr> }</block></expr></init></decl>, <decl pos:start="17:38" pos:end="17:41"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:38" pos:end="17:41">next</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name> <init pos:start="19:13" pos:end="19:15">= <expr pos:start="19:15" pos:end="19:15"><literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:19">image_opts</name> <init pos:start="21:21" pos:end="21:27">= <expr pos:start="21:23" pos:end="21:27"><name pos:start="21:23" pos:end="21:27">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:15"><expr pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:7">fmt</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <name pos:start="25:11" pos:end="25:14">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:18"><expr pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:10">output</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <name pos:start="27:14" pos:end="27:17">NULL</name></expr>;</expr_stmt>

    <for pos:start="29:5" pos:end="105:5">for <control pos:start="29:9" pos:end="29:12">(<init pos:start="29:10" pos:end="29:10">;</init><condition pos:start="29:11" pos:end="29:11">;</condition><incr/>)</control> <block pos:start="29:14" pos:end="105:5">{<block_content pos:start="31:9" pos:end="103:9">

        <decl_stmt pos:start="31:9" pos:end="31:29"><decl pos:start="31:9" pos:end="31:28"><type pos:start="31:9" pos:end="31:11"><name pos:start="31:9" pos:end="31:11">int</name></type> <name pos:start="31:13" pos:end="31:24">option_index</name> <init pos:start="31:26" pos:end="31:28">= <expr pos:start="31:28" pos:end="31:28"><literal type="number" pos:start="31:28" pos:end="31:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="47:10"><decl pos:start="33:9" pos:end="47:9"><type pos:start="33:9" pos:end="33:34"><specifier pos:start="33:9" pos:end="33:14">static</specifier> <specifier pos:start="33:16" pos:end="33:20">const</specifier> <name pos:start="33:22" pos:end="33:34"><name pos:start="33:22" pos:end="33:27">struct</name> <name pos:start="33:29" pos:end="33:34">option</name></name></type> <name pos:start="33:36" pos:end="33:49"><name pos:start="33:36" pos:end="33:47">long_options</name><index pos:start="33:48" pos:end="33:49">[]</index></name> <init pos:start="33:51" pos:end="47:9">= <expr pos:start="33:53" pos:end="47:9"><block pos:start="33:53" pos:end="47:9">{

            <expr pos:start="35:13" pos:end="35:41"><block pos:start="35:13" pos:end="35:41">{<expr pos:start="35:14" pos:end="35:19"><literal type="string" pos:start="35:14" pos:end="35:19">"help"</literal></expr>, <expr pos:start="35:22" pos:end="35:32"><name pos:start="35:22" pos:end="35:32">no_argument</name></expr>, <expr pos:start="35:35" pos:end="35:35"><literal type="number" pos:start="35:35" pos:end="35:35">0</literal></expr>, <expr pos:start="35:38" pos:end="35:40"><literal type="char" pos:start="35:38" pos:end="35:40">'h'</literal></expr>}</block></expr>,

            <expr pos:start="37:13" pos:end="37:49"><block pos:start="37:13" pos:end="37:49">{<expr pos:start="37:14" pos:end="37:21"><literal type="string" pos:start="37:14" pos:end="37:21">"format"</literal></expr>, <expr pos:start="37:24" pos:end="37:40"><name pos:start="37:24" pos:end="37:40">required_argument</name></expr>, <expr pos:start="37:43" pos:end="37:43"><literal type="number" pos:start="37:43" pos:end="37:43">0</literal></expr>, <expr pos:start="37:46" pos:end="37:48"><literal type="char" pos:start="37:46" pos:end="37:48">'f'</literal></expr>}</block></expr>,

            <expr pos:start="39:13" pos:end="39:59"><block pos:start="39:13" pos:end="39:59">{<expr pos:start="39:14" pos:end="39:21"><literal type="string" pos:start="39:14" pos:end="39:21">"output"</literal></expr>, <expr pos:start="39:24" pos:end="39:40"><name pos:start="39:24" pos:end="39:40">required_argument</name></expr>, <expr pos:start="39:43" pos:end="39:43"><literal type="number" pos:start="39:43" pos:end="39:43">0</literal></expr>, <expr pos:start="39:46" pos:end="39:58"><name pos:start="39:46" pos:end="39:58">OPTION_OUTPUT</name></expr>}</block></expr>,

            <expr pos:start="41:13" pos:end="41:59"><block pos:start="41:13" pos:end="41:59">{<expr pos:start="41:14" pos:end="41:21"><literal type="string" pos:start="41:14" pos:end="41:21">"object"</literal></expr>, <expr pos:start="41:24" pos:end="41:40"><name pos:start="41:24" pos:end="41:40">required_argument</name></expr>, <expr pos:start="41:43" pos:end="41:43"><literal type="number" pos:start="41:43" pos:end="41:43">0</literal></expr>, <expr pos:start="41:46" pos:end="41:58"><name pos:start="41:46" pos:end="41:58">OPTION_OBJECT</name></expr>}</block></expr>,

            <expr pos:start="43:13" pos:end="43:61"><block pos:start="43:13" pos:end="43:61">{<expr pos:start="43:14" pos:end="43:25"><literal type="string" pos:start="43:14" pos:end="43:25">"image-opts"</literal></expr>, <expr pos:start="43:28" pos:end="43:38"><name pos:start="43:28" pos:end="43:38">no_argument</name></expr>, <expr pos:start="43:41" pos:end="43:41"><literal type="number" pos:start="43:41" pos:end="43:41">0</literal></expr>, <expr pos:start="43:44" pos:end="43:60"><name pos:start="43:44" pos:end="43:60">OPTION_IMAGE_OPTS</name></expr>}</block></expr>,

            <expr pos:start="45:13" pos:end="45:24"><block pos:start="45:13" pos:end="45:24">{<expr pos:start="45:14" pos:end="45:14"><literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>, <expr pos:start="45:17" pos:end="45:17"><literal type="number" pos:start="45:17" pos:end="45:17">0</literal></expr>, <expr pos:start="45:20" pos:end="45:20"><literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>, <expr pos:start="45:23" pos:end="45:23"><literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>}</block></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="49:9" pos:end="51:53"><expr pos:start="49:9" pos:end="51:52"><name pos:start="49:9" pos:end="49:9">c</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <call pos:start="49:13" pos:end="51:52"><name pos:start="49:13" pos:end="49:23">getopt_long</name><argument_list pos:start="49:24" pos:end="51:52">(<argument pos:start="49:25" pos:end="49:28"><expr pos:start="49:25" pos:end="49:28"><name pos:start="49:25" pos:end="49:28">argc</name></expr></argument>, <argument pos:start="49:31" pos:end="49:34"><expr pos:start="49:31" pos:end="49:34"><name pos:start="49:31" pos:end="49:34">argv</name></expr></argument>, <argument pos:start="49:37" pos:end="49:41"><expr pos:start="49:37" pos:end="49:41"><literal type="string" pos:start="49:37" pos:end="49:41">"f:h"</literal></expr></argument>,

                        <argument pos:start="51:25" pos:end="51:36"><expr pos:start="51:25" pos:end="51:36"><name pos:start="51:25" pos:end="51:36">long_options</name></expr></argument>, <argument pos:start="51:39" pos:end="51:51"><expr pos:start="51:39" pos:end="51:51"><operator pos:start="51:39" pos:end="51:39">&amp;</operator><name pos:start="51:40" pos:end="51:51">option_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:20">(<expr pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:13">c</name> <operator pos:start="53:15" pos:end="53:16">==</operator> <operator pos:start="53:18" pos:end="53:18">-</operator><literal type="number" pos:start="53:19" pos:end="53:19">1</literal></expr>)</condition> <block pos:start="53:22" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:18">

            <break pos:start="55:13" pos:end="55:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="59:9" pos:end="103:9">switch <condition pos:start="59:16" pos:end="59:18">(<expr pos:start="59:17" pos:end="59:17"><name pos:start="59:17" pos:end="59:17">c</name></expr>)</condition> <block pos:start="59:20" pos:end="103:9">{<block_content pos:start="61:9" pos:end="101:18">

        <case pos:start="61:9" pos:end="61:17">case <expr pos:start="61:14" pos:end="61:16"><literal type="char" pos:start="61:14" pos:end="61:16">'?'</literal></expr>:</case>

        <case pos:start="63:9" pos:end="63:17">case <expr pos:start="63:14" pos:end="63:16"><literal type="char" pos:start="63:14" pos:end="63:16">'h'</literal></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="65:19"><expr pos:start="65:13" pos:end="65:18"><call pos:start="65:13" pos:end="65:18"><name pos:start="65:13" pos:end="65:16">help</name><argument_list pos:start="65:17" pos:end="65:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <case pos:start="69:9" pos:end="69:17">case <expr pos:start="69:14" pos:end="69:16"><literal type="char" pos:start="69:14" pos:end="69:16">'f'</literal></expr>:</case>

            <expr_stmt pos:start="71:13" pos:end="71:25"><expr pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:15">fmt</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:24">optarg</name></expr>;</expr_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>

        <case pos:start="75:9" pos:end="75:27">case <expr pos:start="75:14" pos:end="75:26"><name pos:start="75:14" pos:end="75:26">OPTION_OUTPUT</name></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:28"><expr pos:start="77:13" pos:end="77:27"><name pos:start="77:13" pos:end="77:18">output</name> <operator pos:start="77:20" pos:end="77:20">=</operator> <name pos:start="77:22" pos:end="77:27">optarg</name></expr>;</expr_stmt>

            <break pos:start="79:13" pos:end="79:18">break;</break>

        <case pos:start="81:9" pos:end="81:27">case <expr pos:start="81:14" pos:end="81:26"><name pos:start="81:14" pos:end="81:26">OPTION_OBJECT</name></expr>:</case> <block pos:start="81:29" pos:end="95:9">{<block_content pos:start="83:13" pos:end="93:13">

            <decl_stmt pos:start="83:13" pos:end="83:27"><decl pos:start="83:13" pos:end="83:26"><type pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:20">QemuOpts</name> <modifier pos:start="83:22" pos:end="83:22">*</modifier></type><name pos:start="83:23" pos:end="83:26">opts</name></decl>;</decl_stmt>

            <expr_stmt pos:start="85:13" pos:end="87:57"><expr pos:start="85:13" pos:end="87:56"><name pos:start="85:13" pos:end="85:16">opts</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <call pos:start="85:20" pos:end="87:56"><name pos:start="85:20" pos:end="85:42">qemu_opts_parse_noisily</name><argument_list pos:start="85:43" pos:end="87:56">(<argument pos:start="85:44" pos:end="85:60"><expr pos:start="85:44" pos:end="85:60"><operator pos:start="85:44" pos:end="85:44">&amp;</operator><name pos:start="85:45" pos:end="85:60">qemu_object_opts</name></expr></argument>,

                                           <argument pos:start="87:44" pos:end="87:49"><expr pos:start="87:44" pos:end="87:49"><name pos:start="87:44" pos:end="87:49">optarg</name></expr></argument>, <argument pos:start="87:52" pos:end="87:55"><expr pos:start="87:52" pos:end="87:55"><name pos:start="87:52" pos:end="87:55">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="93:13"><if pos:start="89:13" pos:end="93:13">if <condition pos:start="89:16" pos:end="89:22">(<expr pos:start="89:17" pos:end="89:21"><operator pos:start="89:17" pos:end="89:17">!</operator><name pos:start="89:18" pos:end="89:21">opts</name></expr>)</condition> <block pos:start="89:24" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:25">

                <return pos:start="91:17" pos:end="91:25">return <expr pos:start="91:24" pos:end="91:24"><literal type="number" pos:start="91:24" pos:end="91:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>   <break pos:start="95:13" pos:end="95:18">break;</break>

        <case pos:start="97:9" pos:end="97:31">case <expr pos:start="97:14" pos:end="97:30"><name pos:start="97:14" pos:end="97:30">OPTION_IMAGE_OPTS</name></expr>:</case>

            <expr_stmt pos:start="99:13" pos:end="99:30"><expr pos:start="99:13" pos:end="99:29"><name pos:start="99:13" pos:end="99:22">image_opts</name> <operator pos:start="99:24" pos:end="99:24">=</operator> <name pos:start="99:26" pos:end="99:29">true</name></expr>;</expr_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:27">(<expr pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:14">optind</name> <operator pos:start="107:16" pos:end="107:17">!=</operator> <name pos:start="107:19" pos:end="107:22">argc</name> <operator pos:start="107:24" pos:end="107:24">-</operator> <literal type="number" pos:start="107:26" pos:end="107:26">1</literal></expr>)</condition> <block pos:start="107:29" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:52">

        <expr_stmt pos:start="109:9" pos:end="109:52"><expr pos:start="109:9" pos:end="109:51"><call pos:start="109:9" pos:end="109:51"><name pos:start="109:9" pos:end="109:18">error_exit</name><argument_list pos:start="109:19" pos:end="109:51">(<argument pos:start="109:20" pos:end="109:50"><expr pos:start="109:20" pos:end="109:50"><literal type="string" pos:start="109:20" pos:end="109:50">"Expecting one image file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:28"><expr pos:start="113:5" pos:end="113:27"><name pos:start="113:5" pos:end="113:12">filename</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <name pos:start="113:16" pos:end="113:27"><name pos:start="113:16" pos:end="113:19">argv</name><index pos:start="113:20" pos:end="113:27">[<expr pos:start="113:21" pos:end="113:26"><name pos:start="113:21" pos:end="113:26">optind</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="131:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:42">(<expr pos:start="117:9" pos:end="117:41"><name pos:start="117:9" pos:end="117:14">output</name> <operator pos:start="117:16" pos:end="117:17">&amp;&amp;</operator> <operator pos:start="117:19" pos:end="117:19">!</operator><call pos:start="117:20" pos:end="117:41"><name pos:start="117:20" pos:end="117:25">strcmp</name><argument_list pos:start="117:26" pos:end="117:41">(<argument pos:start="117:27" pos:end="117:32"><expr pos:start="117:27" pos:end="117:32"><name pos:start="117:27" pos:end="117:32">output</name></expr></argument>, <argument pos:start="117:35" pos:end="117:40"><expr pos:start="117:35" pos:end="117:40"><literal type="string" pos:start="117:35" pos:end="117:40">"json"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:44" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:37">

        <expr_stmt pos:start="119:9" pos:end="119:37"><expr pos:start="119:9" pos:end="119:36"><name pos:start="119:9" pos:end="119:21">output_format</name> <operator pos:start="119:23" pos:end="119:23">=</operator> <name pos:start="119:25" pos:end="119:36">OFORMAT_JSON</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="121:7" pos:end="125:5">else if <condition pos:start="121:15" pos:end="121:50">(<expr pos:start="121:16" pos:end="121:49"><name pos:start="121:16" pos:end="121:21">output</name> <operator pos:start="121:23" pos:end="121:24">&amp;&amp;</operator> <operator pos:start="121:26" pos:end="121:26">!</operator><call pos:start="121:27" pos:end="121:49"><name pos:start="121:27" pos:end="121:32">strcmp</name><argument_list pos:start="121:33" pos:end="121:49">(<argument pos:start="121:34" pos:end="121:39"><expr pos:start="121:34" pos:end="121:39"><name pos:start="121:34" pos:end="121:39">output</name></expr></argument>, <argument pos:start="121:42" pos:end="121:48"><expr pos:start="121:42" pos:end="121:48"><literal type="string" pos:start="121:42" pos:end="121:48">"human"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:52" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:38">

        <expr_stmt pos:start="123:9" pos:end="123:38"><expr pos:start="123:9" pos:end="123:37"><name pos:start="123:9" pos:end="123:21">output_format</name> <operator pos:start="123:23" pos:end="123:23">=</operator> <name pos:start="123:25" pos:end="123:37">OFORMAT_HUMAN</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="125:7" pos:end="131:5">else if <condition pos:start="125:15" pos:end="125:22">(<expr pos:start="125:16" pos:end="125:21"><name pos:start="125:16" pos:end="125:21">output</name></expr>)</condition> <block pos:start="125:24" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:17">

        <expr_stmt pos:start="127:9" pos:end="127:78"><expr pos:start="127:9" pos:end="127:77"><call pos:start="127:9" pos:end="127:77"><name pos:start="127:9" pos:end="127:20">error_report</name><argument_list pos:start="127:21" pos:end="127:77">(<argument pos:start="127:22" pos:end="127:76"><expr pos:start="127:22" pos:end="127:76"><literal type="string" pos:start="127:22" pos:end="127:76">"--output must be used with human or json as argument."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="129:9" pos:end="129:17">return <expr pos:start="129:16" pos:end="129:16"><literal type="number" pos:start="129:16" pos:end="129:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="135:5" pos:end="143:5"><if pos:start="135:5" pos:end="143:5">if <condition pos:start="135:8" pos:end="139:38">(<expr pos:start="135:9" pos:end="139:37"><call pos:start="135:9" pos:end="139:37"><name pos:start="135:9" pos:end="135:25">qemu_opts_foreach</name><argument_list pos:start="135:26" pos:end="139:37">(<argument pos:start="135:27" pos:end="135:43"><expr pos:start="135:27" pos:end="135:43"><operator pos:start="135:27" pos:end="135:27">&amp;</operator><name pos:start="135:28" pos:end="135:43">qemu_object_opts</name></expr></argument>,

                          <argument pos:start="137:27" pos:end="137:57"><expr pos:start="137:27" pos:end="137:57"><name pos:start="137:27" pos:end="137:57">user_creatable_add_opts_foreach</name></expr></argument>,

                          <argument pos:start="139:27" pos:end="139:30"><expr pos:start="139:27" pos:end="139:30"><name pos:start="139:27" pos:end="139:30">NULL</name></expr></argument>, <argument pos:start="139:33" pos:end="139:36"><expr pos:start="139:33" pos:end="139:36"><name pos:start="139:33" pos:end="139:36">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:40" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:17">

        <return pos:start="141:9" pos:end="141:17">return <expr pos:start="141:16" pos:end="141:16"><literal type="number" pos:start="141:16" pos:end="141:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:63"><expr pos:start="147:5" pos:end="147:62"><name pos:start="147:5" pos:end="147:7">blk</name> <operator pos:start="147:9" pos:end="147:9">=</operator> <call pos:start="147:11" pos:end="147:62"><name pos:start="147:11" pos:end="147:18">img_open</name><argument_list pos:start="147:19" pos:end="147:62">(<argument pos:start="147:20" pos:end="147:29"><expr pos:start="147:20" pos:end="147:29"><name pos:start="147:20" pos:end="147:29">image_opts</name></expr></argument>, <argument pos:start="147:32" pos:end="147:39"><expr pos:start="147:32" pos:end="147:39"><name pos:start="147:32" pos:end="147:39">filename</name></expr></argument>, <argument pos:start="147:42" pos:end="147:44"><expr pos:start="147:42" pos:end="147:44"><name pos:start="147:42" pos:end="147:44">fmt</name></expr></argument>, <argument pos:start="147:47" pos:end="147:47"><expr pos:start="147:47" pos:end="147:47"><literal type="number" pos:start="147:47" pos:end="147:47">0</literal></expr></argument>, <argument pos:start="147:50" pos:end="147:54"><expr pos:start="147:50" pos:end="147:54"><name pos:start="147:50" pos:end="147:54">false</name></expr></argument>, <argument pos:start="147:57" pos:end="147:61"><expr pos:start="147:57" pos:end="147:61"><name pos:start="147:57" pos:end="147:61">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="153:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:13">(<expr pos:start="149:9" pos:end="149:12"><operator pos:start="149:9" pos:end="149:9">!</operator><name pos:start="149:10" pos:end="149:12">blk</name></expr>)</condition> <block pos:start="149:15" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:17">

        <return pos:start="151:9" pos:end="151:17">return <expr pos:start="151:16" pos:end="151:16"><literal type="number" pos:start="151:16" pos:end="151:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:21"><expr pos:start="155:5" pos:end="155:20"><name pos:start="155:5" pos:end="155:6">bs</name> <operator pos:start="155:8" pos:end="155:8">=</operator> <call pos:start="155:10" pos:end="155:20"><name pos:start="155:10" pos:end="155:15">blk_bs</name><argument_list pos:start="155:16" pos:end="155:20">(<argument pos:start="155:17" pos:end="155:19"><expr pos:start="155:17" pos:end="155:19"><name pos:start="155:17" pos:end="155:19">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="159:5" pos:end="163:5"><if pos:start="159:5" pos:end="163:5">if <condition pos:start="159:8" pos:end="159:39">(<expr pos:start="159:9" pos:end="159:38"><name pos:start="159:9" pos:end="159:21">output_format</name> <operator pos:start="159:23" pos:end="159:24">==</operator> <name pos:start="159:26" pos:end="159:38">OFORMAT_HUMAN</name></expr>)</condition> <block pos:start="159:41" pos:end="163:5">{<block_content pos:start="161:9" pos:end="161:79">

        <expr_stmt pos:start="161:9" pos:end="161:79"><expr pos:start="161:9" pos:end="161:78"><call pos:start="161:9" pos:end="161:78"><name pos:start="161:9" pos:end="161:14">printf</name><argument_list pos:start="161:15" pos:end="161:78">(<argument pos:start="161:16" pos:end="161:36"><expr pos:start="161:16" pos:end="161:36"><literal type="string" pos:start="161:16" pos:end="161:36">"%-16s%-16s%-16s%s\n"</literal></expr></argument>, <argument pos:start="161:39" pos:end="161:46"><expr pos:start="161:39" pos:end="161:46"><literal type="string" pos:start="161:39" pos:end="161:46">"Offset"</literal></expr></argument>, <argument pos:start="161:49" pos:end="161:56"><expr pos:start="161:49" pos:end="161:56"><literal type="string" pos:start="161:49" pos:end="161:56">"Length"</literal></expr></argument>, <argument pos:start="161:59" pos:end="161:69"><expr pos:start="161:59" pos:end="161:69"><literal type="string" pos:start="161:59" pos:end="161:69">"Mapped to"</literal></expr></argument>, <argument pos:start="161:72" pos:end="161:77"><expr pos:start="161:72" pos:end="161:77"><literal type="string" pos:start="161:72" pos:end="161:77">"File"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:32"><expr pos:start="167:5" pos:end="167:31"><name pos:start="167:5" pos:end="167:10">length</name> <operator pos:start="167:12" pos:end="167:12">=</operator> <call pos:start="167:14" pos:end="167:31"><name pos:start="167:14" pos:end="167:26">blk_getlength</name><argument_list pos:start="167:27" pos:end="167:31">(<argument pos:start="167:28" pos:end="167:30"><expr pos:start="167:28" pos:end="167:30"><name pos:start="167:28" pos:end="167:30">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="169:5" pos:end="221:5">while <condition pos:start="169:11" pos:end="169:45">(<expr pos:start="169:12" pos:end="169:44"><name pos:start="169:12" pos:end="169:21"><name pos:start="169:12" pos:end="169:15">curr</name><operator pos:start="169:16" pos:end="169:16">.</operator><name pos:start="169:17" pos:end="169:21">start</name></name> <operator pos:start="169:23" pos:end="169:23">+</operator> <name pos:start="169:25" pos:end="169:35"><name pos:start="169:25" pos:end="169:28">curr</name><operator pos:start="169:29" pos:end="169:29">.</operator><name pos:start="169:30" pos:end="169:35">length</name></name> <operator pos:start="169:37" pos:end="169:37">&lt;</operator> <name pos:start="169:39" pos:end="169:44">length</name></expr>)</condition> <block pos:start="169:47" pos:end="221:5">{<block_content pos:start="171:9" pos:end="219:20">

        <decl_stmt pos:start="171:9" pos:end="171:30"><decl pos:start="171:9" pos:end="171:29"><type pos:start="171:9" pos:end="171:15"><name pos:start="171:9" pos:end="171:15">int64_t</name></type> <name pos:start="171:17" pos:end="171:29">nsectors_left</name></decl>;</decl_stmt>

        <decl_stmt pos:start="173:9" pos:end="173:27"><decl pos:start="173:9" pos:end="173:26"><type pos:start="173:9" pos:end="173:15"><name pos:start="173:9" pos:end="173:15">int64_t</name></type> <name pos:start="173:17" pos:end="173:26">sector_num</name></decl>;</decl_stmt>

        <decl_stmt pos:start="175:9" pos:end="175:14"><decl pos:start="175:9" pos:end="175:13"><type pos:start="175:9" pos:end="175:11"><name pos:start="175:9" pos:end="175:11">int</name></type> <name pos:start="175:13" pos:end="175:13">n</name></decl>;</decl_stmt>



        <expr_stmt pos:start="179:9" pos:end="179:68"><expr pos:start="179:9" pos:end="179:67"><name pos:start="179:9" pos:end="179:18">sector_num</name> <operator pos:start="179:20" pos:end="179:20">=</operator> <operator pos:start="179:22" pos:end="179:22">(</operator><name pos:start="179:23" pos:end="179:32"><name pos:start="179:23" pos:end="179:26">curr</name><operator pos:start="179:27" pos:end="179:27">.</operator><name pos:start="179:28" pos:end="179:32">start</name></name> <operator pos:start="179:34" pos:end="179:34">+</operator> <name pos:start="179:36" pos:end="179:46"><name pos:start="179:36" pos:end="179:39">curr</name><operator pos:start="179:40" pos:end="179:40">.</operator><name pos:start="179:41" pos:end="179:46">length</name></name><operator pos:start="179:47" pos:end="179:47">)</operator> <operator pos:start="179:49" pos:end="179:50">&gt;&gt;</operator> <name pos:start="179:52" pos:end="179:67">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>



        <comment type="block" pos:start="183:9" pos:end="183:43">/* Probe up to 1 GiB at a time.  */</comment>

        <expr_stmt pos:start="185:9" pos:end="185:76"><expr pos:start="185:9" pos:end="185:75"><name pos:start="185:9" pos:end="185:21">nsectors_left</name> <operator pos:start="185:23" pos:end="185:23">=</operator> <call pos:start="185:25" pos:end="185:62"><name pos:start="185:25" pos:end="185:36">DIV_ROUND_UP</name><argument_list pos:start="185:37" pos:end="185:62">(<argument pos:start="185:38" pos:end="185:43"><expr pos:start="185:38" pos:end="185:43"><name pos:start="185:38" pos:end="185:43">length</name></expr></argument>, <argument pos:start="185:46" pos:end="185:61"><expr pos:start="185:46" pos:end="185:61"><name pos:start="185:46" pos:end="185:61">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call> <operator pos:start="185:64" pos:end="185:64">-</operator> <name pos:start="185:66" pos:end="185:75">sector_num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:61"><expr pos:start="187:9" pos:end="187:60"><name pos:start="187:9" pos:end="187:9">n</name> <operator pos:start="187:11" pos:end="187:11">=</operator> <call pos:start="187:13" pos:end="187:60"><name pos:start="187:13" pos:end="187:15">MIN</name><argument_list pos:start="187:16" pos:end="187:60">(<argument pos:start="187:17" pos:end="187:44"><expr pos:start="187:17" pos:end="187:44"><literal type="number" pos:start="187:17" pos:end="187:17">1</literal> <operator pos:start="187:19" pos:end="187:20">&lt;&lt;</operator> <operator pos:start="187:22" pos:end="187:22">(</operator><literal type="number" pos:start="187:23" pos:end="187:26">30</literal> <operator pos:start="187:26" pos:end="187:26">-</operator> <name pos:start="187:28" pos:end="187:43">BDRV_SECTOR_BITS</name><operator pos:start="187:44" pos:end="187:44">)</operator></expr></argument>, <argument pos:start="187:47" pos:end="187:59"><expr pos:start="187:47" pos:end="187:59"><name pos:start="187:47" pos:end="187:59">nsectors_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:57"><expr pos:start="189:9" pos:end="189:56"><name pos:start="189:9" pos:end="189:11">ret</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <call pos:start="189:15" pos:end="189:56"><name pos:start="189:15" pos:end="189:30">get_block_status</name><argument_list pos:start="189:31" pos:end="189:56">(<argument pos:start="189:32" pos:end="189:33"><expr pos:start="189:32" pos:end="189:33"><name pos:start="189:32" pos:end="189:33">bs</name></expr></argument>, <argument pos:start="189:36" pos:end="189:45"><expr pos:start="189:36" pos:end="189:45"><name pos:start="189:36" pos:end="189:45">sector_num</name></expr></argument>, <argument pos:start="189:48" pos:end="189:48"><expr pos:start="189:48" pos:end="189:48"><name pos:start="189:48" pos:end="189:48">n</name></expr></argument>, <argument pos:start="189:51" pos:end="189:55"><expr pos:start="189:51" pos:end="189:55"><operator pos:start="189:51" pos:end="189:51">&amp;</operator><name pos:start="189:52" pos:end="189:55">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="193:9" pos:end="199:9"><if pos:start="193:9" pos:end="199:9">if <condition pos:start="193:12" pos:end="193:20">(<expr pos:start="193:13" pos:end="193:19"><name pos:start="193:13" pos:end="193:15">ret</name> <operator pos:start="193:17" pos:end="193:17">&lt;</operator> <literal type="number" pos:start="193:19" pos:end="193:19">0</literal></expr>)</condition> <block pos:start="193:22" pos:end="199:9">{<block_content pos:start="195:13" pos:end="197:21">

            <expr_stmt pos:start="195:13" pos:end="195:77"><expr pos:start="195:13" pos:end="195:76"><call pos:start="195:13" pos:end="195:76"><name pos:start="195:13" pos:end="195:24">error_report</name><argument_list pos:start="195:25" pos:end="195:76">(<argument pos:start="195:26" pos:end="195:59"><expr pos:start="195:26" pos:end="195:59"><literal type="string" pos:start="195:26" pos:end="195:59">"Could not read file metadata: %s"</literal></expr></argument>, <argument pos:start="195:62" pos:end="195:75"><expr pos:start="195:62" pos:end="195:75"><call pos:start="195:62" pos:end="195:75"><name pos:start="195:62" pos:end="195:69">strerror</name><argument_list pos:start="195:70" pos:end="195:75">(<argument pos:start="195:71" pos:end="195:74"><expr pos:start="195:71" pos:end="195:74"><operator pos:start="195:71" pos:end="195:71">-</operator><name pos:start="195:72" pos:end="195:74">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="197:13" pos:end="197:21">goto <name pos:start="197:18" pos:end="197:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="203:9" pos:end="209:9"><if pos:start="203:9" pos:end="209:9">if <condition pos:start="203:12" pos:end="203:42">(<expr pos:start="203:13" pos:end="203:41"><call pos:start="203:13" pos:end="203:41"><name pos:start="203:13" pos:end="203:27">entry_mergeable</name><argument_list pos:start="203:28" pos:end="203:41">(<argument pos:start="203:29" pos:end="203:33"><expr pos:start="203:29" pos:end="203:33"><operator pos:start="203:29" pos:end="203:29">&amp;</operator><name pos:start="203:30" pos:end="203:33">curr</name></expr></argument>, <argument pos:start="203:36" pos:end="203:40"><expr pos:start="203:36" pos:end="203:40"><operator pos:start="203:36" pos:end="203:36">&amp;</operator><name pos:start="203:37" pos:end="203:40">next</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="203:44" pos:end="209:9">{<block_content pos:start="205:13" pos:end="207:21">

            <expr_stmt pos:start="205:13" pos:end="205:39"><expr pos:start="205:13" pos:end="205:38"><name pos:start="205:13" pos:end="205:23"><name pos:start="205:13" pos:end="205:16">curr</name><operator pos:start="205:17" pos:end="205:17">.</operator><name pos:start="205:18" pos:end="205:23">length</name></name> <operator pos:start="205:25" pos:end="205:26">+=</operator> <name pos:start="205:28" pos:end="205:38"><name pos:start="205:28" pos:end="205:31">next</name><operator pos:start="205:32" pos:end="205:32">.</operator><name pos:start="205:33" pos:end="205:38">length</name></name></expr>;</expr_stmt>

            <continue pos:start="207:13" pos:end="207:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="213:9" pos:end="217:9"><if pos:start="213:9" pos:end="217:9">if <condition pos:start="213:12" pos:end="213:28">(<expr pos:start="213:13" pos:end="213:27"><name pos:start="213:13" pos:end="213:23"><name pos:start="213:13" pos:end="213:16">curr</name><operator pos:start="213:17" pos:end="213:17">.</operator><name pos:start="213:18" pos:end="213:23">length</name></name> <operator pos:start="213:25" pos:end="213:25">&gt;</operator> <literal type="number" pos:start="213:27" pos:end="213:27">0</literal></expr>)</condition> <block pos:start="213:30" pos:end="217:9">{<block_content pos:start="215:13" pos:end="215:56">

            <expr_stmt pos:start="215:13" pos:end="215:56"><expr pos:start="215:13" pos:end="215:55"><call pos:start="215:13" pos:end="215:55"><name pos:start="215:13" pos:end="215:26">dump_map_entry</name><argument_list pos:start="215:27" pos:end="215:55">(<argument pos:start="215:28" pos:end="215:40"><expr pos:start="215:28" pos:end="215:40"><name pos:start="215:28" pos:end="215:40">output_format</name></expr></argument>, <argument pos:start="215:43" pos:end="215:47"><expr pos:start="215:43" pos:end="215:47"><operator pos:start="215:43" pos:end="215:43">&amp;</operator><name pos:start="215:44" pos:end="215:47">curr</name></expr></argument>, <argument pos:start="215:50" pos:end="215:54"><expr pos:start="215:50" pos:end="215:54"><operator pos:start="215:50" pos:end="215:50">&amp;</operator><name pos:start="215:51" pos:end="215:54">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:20"><expr pos:start="219:9" pos:end="219:19"><name pos:start="219:9" pos:end="219:12">curr</name> <operator pos:start="219:14" pos:end="219:14">=</operator> <name pos:start="219:16" pos:end="219:19">next</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="225:5" pos:end="225:47"><expr pos:start="225:5" pos:end="225:46"><call pos:start="225:5" pos:end="225:46"><name pos:start="225:5" pos:end="225:18">dump_map_entry</name><argument_list pos:start="225:19" pos:end="225:46">(<argument pos:start="225:20" pos:end="225:32"><expr pos:start="225:20" pos:end="225:32"><name pos:start="225:20" pos:end="225:32">output_format</name></expr></argument>, <argument pos:start="225:35" pos:end="225:39"><expr pos:start="225:35" pos:end="225:39"><operator pos:start="225:35" pos:end="225:35">&amp;</operator><name pos:start="225:36" pos:end="225:39">curr</name></expr></argument>, <argument pos:start="225:42" pos:end="225:45"><expr pos:start="225:42" pos:end="225:45"><name pos:start="225:42" pos:end="225:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="229:1" pos:end="229:4"><name pos:start="229:1" pos:end="229:3">out</name>:</label>

    <expr_stmt pos:start="231:5" pos:end="231:19"><expr pos:start="231:5" pos:end="231:18"><call pos:start="231:5" pos:end="231:18"><name pos:start="231:5" pos:end="231:13">blk_unref</name><argument_list pos:start="231:14" pos:end="231:18">(<argument pos:start="231:15" pos:end="231:17"><expr pos:start="231:15" pos:end="231:17"><name pos:start="231:15" pos:end="231:17">blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="233:5" pos:end="233:19">return <expr pos:start="233:12" pos:end="233:18"><name pos:start="233:12" pos:end="233:14">ret</name> <operator pos:start="233:16" pos:end="233:16">&lt;</operator> <literal type="number" pos:start="233:18" pos:end="233:18">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
