<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23382.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:41"><name pos:start="1:1" pos:end="1:20">vubr_backend_recv_cb</name><argument_list pos:start="1:21" pos:end="1:41">(<argument pos:start="1:22" pos:end="1:29">int sock</argument>, <argument pos:start="1:32" pos:end="1:40">void *ctx</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="199:1">{<block_content pos:start="5:5" pos:end="197:15">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">VubrDev</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:17">vubr</name> <init pos:start="5:19" pos:end="5:35">= <expr pos:start="5:21" pos:end="5:35"><operator pos:start="5:21" pos:end="5:21">(</operator><name pos:start="5:22" pos:end="5:28">VubrDev</name> <operator pos:start="5:30" pos:end="5:30">*</operator><operator pos:start="5:31" pos:end="5:31">)</operator> <name pos:start="5:33" pos:end="5:35">ctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">VuDev</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:14">dev</name> <init pos:start="7:16" pos:end="7:29">= <expr pos:start="7:18" pos:end="7:29"><operator pos:start="7:18" pos:end="7:18">&amp;</operator><name pos:start="7:19" pos:end="7:29"><name pos:start="7:19" pos:end="7:22">vubr</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:29">vudev</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">VuVirtq</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:15">vq</name> <init pos:start="9:17" pos:end="9:38">= <expr pos:start="9:19" pos:end="9:38"><call pos:start="9:19" pos:end="9:38"><name pos:start="9:19" pos:end="9:30">vu_get_queue</name><argument_list pos:start="9:31" pos:end="9:38">(<argument pos:start="9:32" pos:end="9:34"><expr pos:start="9:32" pos:end="9:34"><name pos:start="9:32" pos:end="9:34">dev</name></expr></argument>, <argument pos:start="9:37" pos:end="9:37"><expr pos:start="9:37" pos:end="9:37"><literal type="number" pos:start="9:37" pos:end="9:37">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">VuVirtqElement</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:24">elem</name> <init pos:start="11:26" pos:end="11:31">= <expr pos:start="11:28" pos:end="11:31"><name pos:start="11:28" pos:end="11:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:16">iovec</name></name></type> <name pos:start="13:18" pos:end="13:44"><name pos:start="13:18" pos:end="13:24">mhdr_sg</name><index pos:start="13:25" pos:end="13:44">[<expr pos:start="13:26" pos:end="13:43"><name pos:start="13:26" pos:end="13:43">VIRTQUEUE_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:41"><decl pos:start="15:5" pos:end="15:40"><type pos:start="15:5" pos:end="15:35"><name pos:start="15:5" pos:end="15:35"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:35">virtio_net_hdr_mrg_rxbuf</name></name></type> <name pos:start="15:37" pos:end="15:40">mhdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">unsigned</name></type> <name pos:start="17:14" pos:end="17:21">mhdr_cnt</name> <init pos:start="17:23" pos:end="17:25">= <expr pos:start="17:25" pos:end="17:25"><literal type="number" pos:start="17:25" pos:end="17:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:30"><decl pos:start="19:5" pos:end="19:29"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">hdrlen</name> <init pos:start="19:16" pos:end="19:29">= <expr pos:start="19:18" pos:end="19:29"><name pos:start="19:18" pos:end="19:29"><name pos:start="19:18" pos:end="19:21">vubr</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:29">hdrlen</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name> <init pos:start="21:11" pos:end="21:13">= <expr pos:start="21:13" pos:end="21:13"><literal type="number" pos:start="21:13" pos:end="21:13">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="29:6"><decl pos:start="23:5" pos:end="29:5"><type pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:25"><name pos:start="23:5" pos:end="23:10">struct</name> <name pos:start="23:12" pos:end="23:25">virtio_net_hdr</name></name></type> <name pos:start="23:27" pos:end="23:29">hdr</name> <init pos:start="23:31" pos:end="29:5">= <expr pos:start="23:33" pos:end="29:5"><block pos:start="23:33" pos:end="29:5">{

        <expr pos:start="25:9" pos:end="25:18"><operator pos:start="25:9" pos:end="25:9">.</operator><name pos:start="25:10" pos:end="25:14">flags</name> <operator pos:start="25:16" pos:end="25:16">=</operator> <literal type="number" pos:start="25:18" pos:end="25:18">0</literal></expr>,

        <expr pos:start="27:9" pos:end="27:43"><operator pos:start="27:9" pos:end="27:9">.</operator><name pos:start="27:10" pos:end="27:17">gso_type</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:43">VIRTIO_NET_HDR_GSO_NONE</name></expr>

    }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:62"><expr pos:start="33:5" pos:end="33:61"><call pos:start="33:5" pos:end="33:61"><name pos:start="33:5" pos:end="33:10">DPRINT</name><argument_list pos:start="33:11" pos:end="33:61">(<argument pos:start="33:12" pos:end="33:60"><expr pos:start="33:12" pos:end="33:60"><literal type="string" pos:start="33:12" pos:end="33:60">"\n\n   ***   IN UDP RECEIVE CALLBACK    ***\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:40"><expr pos:start="35:5" pos:end="35:39"><call pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:10">DPRINT</name><argument_list pos:start="35:11" pos:end="35:39">(<argument pos:start="35:12" pos:end="35:30"><expr pos:start="35:12" pos:end="35:30"><literal type="string" pos:start="35:12" pos:end="35:30">"    hdrlen = %d\n"</literal></expr></argument>, <argument pos:start="35:33" pos:end="35:38"><expr pos:start="35:33" pos:end="35:38"><name pos:start="35:33" pos:end="35:38">hdrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="49:5"><if pos:start="39:5" pos:end="49:5">if <condition pos:start="39:8" pos:end="43:50">(<expr pos:start="39:9" pos:end="43:49"><operator pos:start="39:9" pos:end="39:9">!</operator><call pos:start="39:10" pos:end="39:34"><name pos:start="39:10" pos:end="39:25">vu_queue_enabled</name><argument_list pos:start="39:26" pos:end="39:34">(<argument pos:start="39:27" pos:end="39:29"><expr pos:start="39:27" pos:end="39:29"><name pos:start="39:27" pos:end="39:29">dev</name></expr></argument>, <argument pos:start="39:32" pos:end="39:33"><expr pos:start="39:32" pos:end="39:33"><name pos:start="39:32" pos:end="39:33">vq</name></expr></argument>)</argument_list></call> <operator pos:start="39:36" pos:end="39:37">||</operator>

        <operator pos:start="41:9" pos:end="41:9">!</operator><call pos:start="41:10" pos:end="41:34"><name pos:start="41:10" pos:end="41:25">vu_queue_started</name><argument_list pos:start="41:26" pos:end="41:34">(<argument pos:start="41:27" pos:end="41:29"><expr pos:start="41:27" pos:end="41:29"><name pos:start="41:27" pos:end="41:29">dev</name></expr></argument>, <argument pos:start="41:32" pos:end="41:33"><expr pos:start="41:32" pos:end="41:33"><name pos:start="41:32" pos:end="41:33">vq</name></expr></argument>)</argument_list></call> <operator pos:start="41:36" pos:end="41:37">||</operator>

        <operator pos:start="43:9" pos:end="43:9">!</operator><call pos:start="43:10" pos:end="43:49"><name pos:start="43:10" pos:end="43:29">vu_queue_avail_bytes</name><argument_list pos:start="43:30" pos:end="43:49">(<argument pos:start="43:31" pos:end="43:33"><expr pos:start="43:31" pos:end="43:33"><name pos:start="43:31" pos:end="43:33">dev</name></expr></argument>, <argument pos:start="43:36" pos:end="43:37"><expr pos:start="43:36" pos:end="43:37"><name pos:start="43:36" pos:end="43:37">vq</name></expr></argument>, <argument pos:start="43:40" pos:end="43:45"><expr pos:start="43:40" pos:end="43:45"><name pos:start="43:40" pos:end="43:45">hdrlen</name></expr></argument>, <argument pos:start="43:48" pos:end="43:48"><expr pos:start="43:48" pos:end="43:48"><literal type="number" pos:start="43:48" pos:end="43:48">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:52" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:15">

        <expr_stmt pos:start="45:9" pos:end="45:78"><expr pos:start="45:9" pos:end="45:77"><call pos:start="45:9" pos:end="45:77"><name pos:start="45:9" pos:end="45:14">DPRINT</name><argument_list pos:start="45:15" pos:end="45:77">(<argument pos:start="45:16" pos:end="45:76"><expr pos:start="45:16" pos:end="45:76"><literal type="string" pos:start="45:16" pos:end="45:76">"Got UDP packet, but no available descriptors on RX virtq.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <do pos:start="53:5" pos:end="173:20">do <block pos:start="53:8" pos:end="173:5">{<block_content pos:start="55:9" pos:end="171:20">

        <decl_stmt pos:start="55:9" pos:end="55:25"><decl pos:start="55:9" pos:end="55:24"><type pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:14">struct</name> <name pos:start="55:16" pos:end="55:20">iovec</name></name> <modifier pos:start="55:22" pos:end="55:22">*</modifier></type><name pos:start="55:23" pos:end="55:24">sg</name></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:31"><decl pos:start="57:9" pos:end="57:19"><type pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:15">ssize_t</name></type> <name pos:start="57:17" pos:end="57:19">ret</name></decl>, <decl pos:start="57:22" pos:end="57:30"><type ref="prev" pos:start="57:9" pos:end="57:15"/><name pos:start="57:22" pos:end="57:26">total</name> <init pos:start="57:28" pos:end="57:30">= <expr pos:start="57:30" pos:end="57:30"><literal type="number" pos:start="57:30" pos:end="57:30">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="59:9" pos:end="59:25"><decl pos:start="59:9" pos:end="59:24"><type pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:16">unsigned</name> <name pos:start="59:18" pos:end="59:20">int</name></type> <name pos:start="59:22" pos:end="59:24">num</name></decl>;</decl_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:61"><expr pos:start="63:9" pos:end="63:60"><name pos:start="63:9" pos:end="63:12">elem</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:60"><name pos:start="63:16" pos:end="63:27">vu_queue_pop</name><argument_list pos:start="63:28" pos:end="63:60">(<argument pos:start="63:29" pos:end="63:31"><expr pos:start="63:29" pos:end="63:31"><name pos:start="63:29" pos:end="63:31">dev</name></expr></argument>, <argument pos:start="63:34" pos:end="63:35"><expr pos:start="63:34" pos:end="63:35"><name pos:start="63:34" pos:end="63:35">vq</name></expr></argument>, <argument pos:start="63:38" pos:end="63:59"><expr pos:start="63:38" pos:end="63:59"><sizeof pos:start="63:38" pos:end="63:59">sizeof<argument_list pos:start="63:44" pos:end="63:59">(<argument pos:start="63:45" pos:end="63:58"><expr pos:start="63:45" pos:end="63:58"><name pos:start="63:45" pos:end="63:58">VuVirtqElement</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:18">(<expr pos:start="65:13" pos:end="65:17"><operator pos:start="65:13" pos:end="65:13">!</operator><name pos:start="65:14" pos:end="65:17">elem</name></expr>)</condition> <block pos:start="65:20" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:18">

            <break pos:start="67:13" pos:end="67:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:29">(<expr pos:start="73:13" pos:end="73:28"><name pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:16">elem</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:24">in_num</name></name> <operator pos:start="73:26" pos:end="73:26">&lt;</operator> <literal type="number" pos:start="73:28" pos:end="73:28">1</literal></expr>)</condition> <block pos:start="73:31" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:18">

            <expr_stmt pos:start="75:13" pos:end="75:67"><expr pos:start="75:13" pos:end="75:66"><call pos:start="75:13" pos:end="75:66"><name pos:start="75:13" pos:end="75:19">fprintf</name><argument_list pos:start="75:20" pos:end="75:66">(<argument pos:start="75:21" pos:end="75:26"><expr pos:start="75:21" pos:end="75:26"><name pos:start="75:21" pos:end="75:26">stderr</name></expr></argument>, <argument pos:start="75:29" pos:end="75:65"><expr pos:start="75:29" pos:end="75:65"><literal type="string" pos:start="75:29" pos:end="75:65">"virtio-net contains no in buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:25"><expr pos:start="83:9" pos:end="83:24"><name pos:start="83:9" pos:end="83:10">sg</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <name pos:start="83:14" pos:end="83:24"><name pos:start="83:14" pos:end="83:17">elem</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:24">in_sg</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:27"><expr pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:11">num</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <name pos:start="85:15" pos:end="85:26"><name pos:start="85:15" pos:end="85:18">elem</name><operator pos:start="85:19" pos:end="85:20">-&gt;</operator><name pos:start="85:21" pos:end="85:26">in_num</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="109:9"><if pos:start="87:9" pos:end="109:9">if <condition pos:start="87:12" pos:end="87:19">(<expr pos:start="87:13" pos:end="87:18"><name pos:start="87:13" pos:end="87:13">i</name> <operator pos:start="87:15" pos:end="87:16">==</operator> <literal type="number" pos:start="87:18" pos:end="87:18">0</literal></expr>)</condition> <block pos:start="87:21" pos:end="109:9">{<block_content pos:start="89:13" pos:end="107:34">

            <if_stmt pos:start="89:13" pos:end="99:13"><if pos:start="89:13" pos:end="99:13">if <condition pos:start="89:16" pos:end="89:29">(<expr pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:22">hdrlen</name> <operator pos:start="89:24" pos:end="89:25">==</operator> <literal type="number" pos:start="89:27" pos:end="89:28">12</literal></expr>)</condition> <block pos:start="89:31" pos:end="99:13">{<block_content pos:start="91:17" pos:end="97:62">

                <expr_stmt pos:start="91:17" pos:end="97:62"><expr pos:start="91:17" pos:end="97:61"><name pos:start="91:17" pos:end="91:24">mhdr_cnt</name> <operator pos:start="91:26" pos:end="91:26">=</operator> <call pos:start="91:28" pos:end="97:61"><name pos:start="91:28" pos:end="91:35">iov_copy</name><argument_list pos:start="91:36" pos:end="97:61">(<argument pos:start="91:37" pos:end="91:43"><expr pos:start="91:37" pos:end="91:43"><name pos:start="91:37" pos:end="91:43">mhdr_sg</name></expr></argument>, <argument pos:start="91:46" pos:end="91:64"><expr pos:start="91:46" pos:end="91:64"><call pos:start="91:46" pos:end="91:64"><name pos:start="91:46" pos:end="91:55">ARRAY_SIZE</name><argument_list pos:start="91:56" pos:end="91:64">(<argument pos:start="91:57" pos:end="91:63"><expr pos:start="91:57" pos:end="91:63"><name pos:start="91:57" pos:end="91:63">mhdr_sg</name></expr></argument>)</argument_list></call></expr></argument>,

                                    <argument pos:start="93:37" pos:end="93:38"><expr pos:start="93:37" pos:end="93:38"><name pos:start="93:37" pos:end="93:38">sg</name></expr></argument>, <argument pos:start="93:41" pos:end="93:52"><expr pos:start="93:41" pos:end="93:52"><name pos:start="93:41" pos:end="93:52"><name pos:start="93:41" pos:end="93:44">elem</name><operator pos:start="93:45" pos:end="93:46">-&gt;</operator><name pos:start="93:47" pos:end="93:52">in_num</name></name></expr></argument>,

                                    <argument pos:start="95:37" pos:end="95:71"><expr pos:start="95:37" pos:end="95:71"><call pos:start="95:37" pos:end="95:71"><name pos:start="95:37" pos:end="95:44">offsetof</name><argument_list pos:start="95:45" pos:end="95:71">(<argument pos:start="95:46" pos:end="95:57"><expr pos:start="95:46" pos:end="95:57"><call pos:start="95:46" pos:end="95:57"><name pos:start="95:46" pos:end="95:51">typeof</name><argument_list pos:start="95:52" pos:end="95:57">(<argument pos:start="95:53" pos:end="95:56"><expr pos:start="95:53" pos:end="95:56"><name pos:start="95:53" pos:end="95:56">mhdr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:60" pos:end="95:70"><expr pos:start="95:60" pos:end="95:70"><name pos:start="95:60" pos:end="95:70">num_buffers</name></expr></argument>)</argument_list></call></expr></argument>,

                                    <argument pos:start="97:37" pos:end="97:60"><expr pos:start="97:37" pos:end="97:60"><sizeof pos:start="97:37" pos:end="97:60">sizeof<argument_list pos:start="97:43" pos:end="97:60">(<argument pos:start="97:44" pos:end="97:59"><expr pos:start="97:44" pos:end="97:59"><name pos:start="97:44" pos:end="97:59"><name pos:start="97:44" pos:end="97:47">mhdr</name><operator pos:start="97:48" pos:end="97:48">.</operator><name pos:start="97:49" pos:end="97:59">num_buffers</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:64"><expr pos:start="101:13" pos:end="101:63"><call pos:start="101:13" pos:end="101:63"><name pos:start="101:13" pos:end="101:24">iov_from_buf</name><argument_list pos:start="101:25" pos:end="101:63">(<argument pos:start="101:26" pos:end="101:27"><expr pos:start="101:26" pos:end="101:27"><name pos:start="101:26" pos:end="101:27">sg</name></expr></argument>, <argument pos:start="101:30" pos:end="101:41"><expr pos:start="101:30" pos:end="101:41"><name pos:start="101:30" pos:end="101:41"><name pos:start="101:30" pos:end="101:33">elem</name><operator pos:start="101:34" pos:end="101:35">-&gt;</operator><name pos:start="101:36" pos:end="101:41">in_num</name></name></expr></argument>, <argument pos:start="101:44" pos:end="101:44"><expr pos:start="101:44" pos:end="101:44"><literal type="number" pos:start="101:44" pos:end="101:44">0</literal></expr></argument>, <argument pos:start="101:47" pos:end="101:50"><expr pos:start="101:47" pos:end="101:50"><operator pos:start="101:47" pos:end="101:47">&amp;</operator><name pos:start="101:48" pos:end="101:50">hdr</name></expr></argument>, <argument pos:start="101:53" pos:end="101:62"><expr pos:start="101:53" pos:end="101:62"><sizeof pos:start="101:53" pos:end="101:62">sizeof <name pos:start="101:60" pos:end="101:62">hdr</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:28"><expr pos:start="103:13" pos:end="103:27"><name pos:start="103:13" pos:end="103:17">total</name> <operator pos:start="103:19" pos:end="103:20">+=</operator> <name pos:start="103:22" pos:end="103:27">hdrlen</name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:55"><expr pos:start="105:13" pos:end="105:54"><name pos:start="105:13" pos:end="105:15">ret</name> <operator pos:start="105:17" pos:end="105:17">=</operator> <call pos:start="105:19" pos:end="105:54"><name pos:start="105:19" pos:end="105:35">iov_discard_front</name><argument_list pos:start="105:36" pos:end="105:54">(<argument pos:start="105:37" pos:end="105:39"><expr pos:start="105:37" pos:end="105:39"><operator pos:start="105:37" pos:end="105:37">&amp;</operator><name pos:start="105:38" pos:end="105:39">sg</name></expr></argument>, <argument pos:start="105:42" pos:end="105:45"><expr pos:start="105:42" pos:end="105:45"><operator pos:start="105:42" pos:end="105:42">&amp;</operator><name pos:start="105:43" pos:end="105:45">num</name></expr></argument>, <argument pos:start="105:48" pos:end="105:53"><expr pos:start="105:48" pos:end="105:53"><name pos:start="105:48" pos:end="105:53">hdrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:34"><expr pos:start="107:13" pos:end="107:33"><call pos:start="107:13" pos:end="107:33"><name pos:start="107:13" pos:end="107:18">assert</name><argument_list pos:start="107:19" pos:end="107:33">(<argument pos:start="107:20" pos:end="107:32"><expr pos:start="107:20" pos:end="107:32"><name pos:start="107:20" pos:end="107:22">ret</name> <operator pos:start="107:24" pos:end="107:25">==</operator> <name pos:start="107:27" pos:end="107:32">hdrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <decl_stmt pos:start="113:9" pos:end="125:10"><decl pos:start="113:9" pos:end="125:9"><type pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:14">struct</name> <name pos:start="113:16" pos:end="113:21">msghdr</name></name></type> <name pos:start="113:23" pos:end="113:25">msg</name> <init pos:start="113:27" pos:end="125:9">= <expr pos:start="113:29" pos:end="125:9"><block pos:start="113:29" pos:end="125:9">{

            <expr pos:start="115:13" pos:end="115:67"><operator pos:start="115:13" pos:end="115:13">.</operator><name pos:start="115:14" pos:end="115:21">msg_name</name> <operator pos:start="115:23" pos:end="115:23">=</operator> <operator pos:start="115:25" pos:end="115:25">(</operator>struct <name pos:start="115:33" pos:end="115:40">sockaddr</name> <operator pos:start="115:42" pos:end="115:42">*</operator><operator pos:start="115:43" pos:end="115:43">)</operator> <operator pos:start="115:45" pos:end="115:45">&amp;</operator><name pos:start="115:46" pos:end="115:67"><name pos:start="115:46" pos:end="115:49">vubr</name><operator pos:start="115:50" pos:end="115:51">-&gt;</operator><name pos:start="115:52" pos:end="115:67">backend_udp_dest</name></name></expr>,

            <expr pos:start="117:13" pos:end="117:53"><operator pos:start="117:13" pos:end="117:13">.</operator><name pos:start="117:14" pos:end="117:24">msg_namelen</name> <operator pos:start="117:26" pos:end="117:26">=</operator> <sizeof pos:start="117:28" pos:end="117:53">sizeof<argument_list pos:start="117:34" pos:end="117:53">(<argument pos:start="117:35" pos:end="117:52"><expr pos:start="117:35" pos:end="117:52">struct <name pos:start="117:42" pos:end="117:52">sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>,

            <expr pos:start="119:13" pos:end="119:25"><operator pos:start="119:13" pos:end="119:13">.</operator><name pos:start="119:14" pos:end="119:20">msg_iov</name> <operator pos:start="119:22" pos:end="119:22">=</operator> <name pos:start="119:24" pos:end="119:25">sg</name></expr>,

            <expr pos:start="121:13" pos:end="121:38"><operator pos:start="121:13" pos:end="121:13">.</operator><name pos:start="121:14" pos:end="121:23">msg_iovlen</name> <operator pos:start="121:25" pos:end="121:25">=</operator> <name pos:start="121:27" pos:end="121:38"><name pos:start="121:27" pos:end="121:30">elem</name><operator pos:start="121:31" pos:end="121:32">-&gt;</operator><name pos:start="121:33" pos:end="121:38">in_num</name></name></expr>,

            <expr pos:start="123:13" pos:end="123:37"><operator pos:start="123:13" pos:end="123:13">.</operator><name pos:start="123:14" pos:end="123:22">msg_flags</name> <operator pos:start="123:24" pos:end="123:24">=</operator> <name pos:start="123:26" pos:end="123:37">MSG_DONTWAIT</name></expr>,

        }</block></expr></init></decl>;</decl_stmt>

        <do pos:start="127:9" pos:end="131:48">do <block pos:start="127:12" pos:end="131:9">{<block_content pos:start="129:13" pos:end="129:59">

            <expr_stmt pos:start="129:13" pos:end="129:59"><expr pos:start="129:13" pos:end="129:58"><name pos:start="129:13" pos:end="129:15">ret</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <call pos:start="129:19" pos:end="129:58"><name pos:start="129:19" pos:end="129:25">recvmsg</name><argument_list pos:start="129:26" pos:end="129:58">(<argument pos:start="129:27" pos:end="129:48"><expr pos:start="129:27" pos:end="129:48"><name pos:start="129:27" pos:end="129:48"><name pos:start="129:27" pos:end="129:30">vubr</name><operator pos:start="129:31" pos:end="129:32">-&gt;</operator><name pos:start="129:33" pos:end="129:48">backend_udp_sock</name></name></expr></argument>, <argument pos:start="129:51" pos:end="129:54"><expr pos:start="129:51" pos:end="129:54"><operator pos:start="129:51" pos:end="129:51">&amp;</operator><name pos:start="129:52" pos:end="129:54">msg</name></expr></argument>, <argument pos:start="129:57" pos:end="129:57"><expr pos:start="129:57" pos:end="129:57"><literal type="number" pos:start="129:57" pos:end="129:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="131:17" pos:end="131:47">(<expr pos:start="131:18" pos:end="131:46"><name pos:start="131:18" pos:end="131:20">ret</name> <operator pos:start="131:22" pos:end="131:23">==</operator> <operator pos:start="131:25" pos:end="131:25">-</operator><literal type="number" pos:start="131:26" pos:end="131:26">1</literal> <operator pos:start="131:28" pos:end="131:29">&amp;&amp;</operator> <operator pos:start="131:31" pos:end="131:31">(</operator><name pos:start="131:32" pos:end="131:36">errno</name> <operator pos:start="131:38" pos:end="131:39">==</operator> <name pos:start="131:41" pos:end="131:45">EINTR</name><operator pos:start="131:46" pos:end="131:46">)</operator></expr>)</condition>;</do>



        <if_stmt pos:start="135:9" pos:end="139:9"><if pos:start="135:9" pos:end="139:9">if <condition pos:start="135:12" pos:end="135:19">(<expr pos:start="135:13" pos:end="135:18"><name pos:start="135:13" pos:end="135:13">i</name> <operator pos:start="135:15" pos:end="135:16">==</operator> <literal type="number" pos:start="135:18" pos:end="135:18">0</literal></expr>)</condition> <block pos:start="135:21" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:55">

            <expr_stmt pos:start="137:13" pos:end="137:55"><expr pos:start="137:13" pos:end="137:54"><call pos:start="137:13" pos:end="137:54"><name pos:start="137:13" pos:end="137:29">iov_restore_front</name><argument_list pos:start="137:30" pos:end="137:54">(<argument pos:start="137:31" pos:end="137:41"><expr pos:start="137:31" pos:end="137:41"><name pos:start="137:31" pos:end="137:41"><name pos:start="137:31" pos:end="137:34">elem</name><operator pos:start="137:35" pos:end="137:36">-&gt;</operator><name pos:start="137:37" pos:end="137:41">in_sg</name></name></expr></argument>, <argument pos:start="137:44" pos:end="137:45"><expr pos:start="137:44" pos:end="137:45"><name pos:start="137:44" pos:end="137:45">sg</name></expr></argument>, <argument pos:start="137:48" pos:end="137:53"><expr pos:start="137:48" pos:end="137:53"><name pos:start="137:48" pos:end="137:53">hdrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="143:9" pos:end="157:9"><if pos:start="143:9" pos:end="157:9">if <condition pos:start="143:12" pos:end="143:22">(<expr pos:start="143:13" pos:end="143:21"><name pos:start="143:13" pos:end="143:15">ret</name> <operator pos:start="143:17" pos:end="143:18">==</operator> <operator pos:start="143:20" pos:end="143:20">-</operator><literal type="number" pos:start="143:21" pos:end="143:21">1</literal></expr>)</condition> <block pos:start="143:24" pos:end="157:9">{<block_content pos:start="145:13" pos:end="155:34">

            <if_stmt pos:start="145:13" pos:end="151:13"><if pos:start="145:13" pos:end="151:13">if <condition pos:start="145:16" pos:end="145:37">(<expr pos:start="145:17" pos:end="145:36"><name pos:start="145:17" pos:end="145:21">errno</name> <operator pos:start="145:23" pos:end="145:24">==</operator> <name pos:start="145:26" pos:end="145:36">EWOULDBLOCK</name></expr>)</condition> <block pos:start="145:39" pos:end="151:13">{<block_content pos:start="147:17" pos:end="149:22">

                <expr_stmt pos:start="147:17" pos:end="147:44"><expr pos:start="147:17" pos:end="147:43"><call pos:start="147:17" pos:end="147:43"><name pos:start="147:17" pos:end="147:31">vu_queue_rewind</name><argument_list pos:start="147:32" pos:end="147:43">(<argument pos:start="147:33" pos:end="147:35"><expr pos:start="147:33" pos:end="147:35"><name pos:start="147:33" pos:end="147:35">dev</name></expr></argument>, <argument pos:start="147:38" pos:end="147:39"><expr pos:start="147:38" pos:end="147:39"><name pos:start="147:38" pos:end="147:39">vq</name></expr></argument>, <argument pos:start="147:42" pos:end="147:42"><expr pos:start="147:42" pos:end="147:42"><literal type="number" pos:start="147:42" pos:end="147:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="149:17" pos:end="149:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="155:13" pos:end="155:34"><expr pos:start="155:13" pos:end="155:33"><call pos:start="155:13" pos:end="155:33"><name pos:start="155:13" pos:end="155:20">vubr_die</name><argument_list pos:start="155:21" pos:end="155:33">(<argument pos:start="155:22" pos:end="155:32"><expr pos:start="155:22" pos:end="155:32"><literal type="string" pos:start="155:22" pos:end="155:32">"recvmsg()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="161:9" pos:end="161:21"><expr pos:start="161:9" pos:end="161:20"><name pos:start="161:9" pos:end="161:13">total</name> <operator pos:start="161:15" pos:end="161:16">+=</operator> <name pos:start="161:18" pos:end="161:20">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:55"><expr pos:start="163:9" pos:end="163:54"><call pos:start="163:9" pos:end="163:54"><name pos:start="163:9" pos:end="163:20">iov_truncate</name><argument_list pos:start="163:21" pos:end="163:54">(<argument pos:start="163:22" pos:end="163:32"><expr pos:start="163:22" pos:end="163:32"><name pos:start="163:22" pos:end="163:32"><name pos:start="163:22" pos:end="163:25">elem</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:32">in_sg</name></name></expr></argument>, <argument pos:start="163:35" pos:end="163:46"><expr pos:start="163:35" pos:end="163:46"><name pos:start="163:35" pos:end="163:46"><name pos:start="163:35" pos:end="163:38">elem</name><operator pos:start="163:39" pos:end="163:40">-&gt;</operator><name pos:start="163:41" pos:end="163:46">in_num</name></name></expr></argument>, <argument pos:start="163:49" pos:end="163:53"><expr pos:start="163:49" pos:end="163:53"><name pos:start="163:49" pos:end="163:53">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:49"><expr pos:start="165:9" pos:end="165:48"><call pos:start="165:9" pos:end="165:48"><name pos:start="165:9" pos:end="165:21">vu_queue_fill</name><argument_list pos:start="165:22" pos:end="165:48">(<argument pos:start="165:23" pos:end="165:25"><expr pos:start="165:23" pos:end="165:25"><name pos:start="165:23" pos:end="165:25">dev</name></expr></argument>, <argument pos:start="165:28" pos:end="165:29"><expr pos:start="165:28" pos:end="165:29"><name pos:start="165:28" pos:end="165:29">vq</name></expr></argument>, <argument pos:start="165:32" pos:end="165:35"><expr pos:start="165:32" pos:end="165:35"><name pos:start="165:32" pos:end="165:35">elem</name></expr></argument>, <argument pos:start="165:38" pos:end="165:42"><expr pos:start="165:38" pos:end="165:42"><name pos:start="165:38" pos:end="165:42">total</name></expr></argument>, <argument pos:start="165:45" pos:end="165:47"><expr pos:start="165:45" pos:end="165:47"><name pos:start="165:45" pos:end="165:45">i</name><operator pos:start="165:46" pos:end="165:47">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:19"><expr pos:start="169:9" pos:end="169:18"><call pos:start="169:9" pos:end="169:18"><name pos:start="169:9" pos:end="169:12">free</name><argument_list pos:start="169:13" pos:end="169:18">(<argument pos:start="169:14" pos:end="169:17"><expr pos:start="169:14" pos:end="169:17"><name pos:start="169:14" pos:end="169:17">elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:20"><expr pos:start="171:9" pos:end="171:19"><name pos:start="171:9" pos:end="171:12">elem</name> <operator pos:start="171:14" pos:end="171:14">=</operator> <name pos:start="171:16" pos:end="171:19">NULL</name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="173:13" pos:end="173:19">(<expr pos:start="173:14" pos:end="173:18"><name pos:start="173:14" pos:end="173:18">false</name></expr>)</condition>;</do> <comment type="block" pos:start="173:22" pos:end="173:57">/* could loop if DONTWAIT worked? */</comment>



    <if_stmt pos:start="177:5" pos:end="187:5"><if pos:start="177:5" pos:end="187:5">if <condition pos:start="177:8" pos:end="177:17">(<expr pos:start="177:9" pos:end="177:16"><name pos:start="177:9" pos:end="177:16">mhdr_cnt</name></expr>)</condition> <block pos:start="177:19" pos:end="187:5">{<block_content pos:start="179:9" pos:end="185:65">

        <expr_stmt pos:start="179:9" pos:end="179:29"><expr pos:start="179:9" pos:end="179:28"><name pos:start="179:9" pos:end="179:24"><name pos:start="179:9" pos:end="179:12">mhdr</name><operator pos:start="179:13" pos:end="179:13">.</operator><name pos:start="179:14" pos:end="179:24">num_buffers</name></name> <operator pos:start="179:26" pos:end="179:26">=</operator> <name pos:start="179:28" pos:end="179:28">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="185:65"><expr pos:start="181:9" pos:end="185:64"><call pos:start="181:9" pos:end="185:64"><name pos:start="181:9" pos:end="181:20">iov_from_buf</name><argument_list pos:start="181:21" pos:end="185:64">(<argument pos:start="181:22" pos:end="181:28"><expr pos:start="181:22" pos:end="181:28"><name pos:start="181:22" pos:end="181:28">mhdr_sg</name></expr></argument>, <argument pos:start="181:31" pos:end="181:38"><expr pos:start="181:31" pos:end="181:38"><name pos:start="181:31" pos:end="181:38">mhdr_cnt</name></expr></argument>,

                     <argument pos:start="183:22" pos:end="183:22"><expr pos:start="183:22" pos:end="183:22"><literal type="number" pos:start="183:22" pos:end="183:22">0</literal></expr></argument>,

                     <argument pos:start="185:22" pos:end="185:38"><expr pos:start="185:22" pos:end="185:38"><operator pos:start="185:22" pos:end="185:22">&amp;</operator><name pos:start="185:23" pos:end="185:38"><name pos:start="185:23" pos:end="185:26">mhdr</name><operator pos:start="185:27" pos:end="185:27">.</operator><name pos:start="185:28" pos:end="185:38">num_buffers</name></name></expr></argument>, <argument pos:start="185:41" pos:end="185:63"><expr pos:start="185:41" pos:end="185:63"><sizeof pos:start="185:41" pos:end="185:63">sizeof <name pos:start="185:48" pos:end="185:63"><name pos:start="185:48" pos:end="185:51">mhdr</name><operator pos:start="185:52" pos:end="185:52">.</operator><name pos:start="185:53" pos:end="185:63">num_buffers</name></name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:31"><expr pos:start="191:5" pos:end="191:30"><call pos:start="191:5" pos:end="191:30"><name pos:start="191:5" pos:end="191:18">vu_queue_flush</name><argument_list pos:start="191:19" pos:end="191:30">(<argument pos:start="191:20" pos:end="191:22"><expr pos:start="191:20" pos:end="191:22"><name pos:start="191:20" pos:end="191:22">dev</name></expr></argument>, <argument pos:start="191:25" pos:end="191:26"><expr pos:start="191:25" pos:end="191:26"><name pos:start="191:25" pos:end="191:26">vq</name></expr></argument>, <argument pos:start="191:29" pos:end="191:29"><expr pos:start="191:29" pos:end="191:29"><name pos:start="191:29" pos:end="191:29">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:29"><expr pos:start="193:5" pos:end="193:28"><call pos:start="193:5" pos:end="193:28"><name pos:start="193:5" pos:end="193:19">vu_queue_notify</name><argument_list pos:start="193:20" pos:end="193:28">(<argument pos:start="193:21" pos:end="193:23"><expr pos:start="193:21" pos:end="193:23"><name pos:start="193:21" pos:end="193:23">dev</name></expr></argument>, <argument pos:start="193:26" pos:end="193:27"><expr pos:start="193:26" pos:end="193:27"><name pos:start="193:26" pos:end="193:27">vq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:15"><expr pos:start="197:5" pos:end="197:14"><call pos:start="197:5" pos:end="197:14"><name pos:start="197:5" pos:end="197:8">free</name><argument_list pos:start="197:9" pos:end="197:14">(<argument pos:start="197:10" pos:end="197:13"><expr pos:start="197:10" pos:end="197:13"><name pos:start="197:10" pos:end="197:13">elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
