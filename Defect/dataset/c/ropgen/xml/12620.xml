<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12620.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:33">mpeg4_decode_dc</name><parameter_list pos:start="1:34" pos:end="1:74">(<parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:48">MpegEncContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type> <name pos:start="1:52" pos:end="1:52">s</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:59"><decl pos:start="1:55" pos:end="1:59"><type pos:start="1:55" pos:end="1:59"><name pos:start="1:55" pos:end="1:57">int</name></type> <name pos:start="1:59" pos:end="1:59">n</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:73"><decl pos:start="1:62" pos:end="1:73"><type pos:start="1:62" pos:end="1:73"><name pos:start="1:62" pos:end="1:64">int</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:73">dir_ptr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:17">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">level</name></decl>, <decl pos:start="5:16" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:19">pred</name></decl>, <decl pos:start="5:22" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:25">code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">uint16_t</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:20">dc_val</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:64"><if pos:start="11:5" pos:end="13:62">if <condition pos:start="11:8" pos:end="11:14">(<expr pos:start="11:9" pos:end="11:13"><name pos:start="11:9" pos:end="11:9">n</name> <operator pos:start="11:11" pos:end="11:11">&lt;</operator> <literal type="number" pos:start="11:13" pos:end="11:13">4</literal></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:62"><block_content pos:start="13:9" pos:end="13:62"> 

        <expr_stmt pos:start="13:9" pos:end="13:62"><expr pos:start="13:9" pos:end="13:61"><name pos:start="13:9" pos:end="13:12">code</name> <operator pos:start="13:14" pos:end="13:14">=</operator> <call pos:start="13:16" pos:end="13:61"><name pos:start="13:16" pos:end="13:23">get_vlc2</name><argument_list pos:start="13:24" pos:end="13:61">(<argument pos:start="13:25" pos:end="13:30"><expr pos:start="13:25" pos:end="13:30"><operator pos:start="13:25" pos:end="13:25">&amp;</operator><name pos:start="13:26" pos:end="13:30"><name pos:start="13:26" pos:end="13:26">s</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:30">gb</name></name></expr></argument>, <argument pos:start="13:33" pos:end="13:44"><expr pos:start="13:33" pos:end="13:44"><name pos:start="13:33" pos:end="13:44"><name pos:start="13:33" pos:end="13:38">dc_lum</name><operator pos:start="13:39" pos:end="13:39">.</operator><name pos:start="13:40" pos:end="13:44">table</name></name></expr></argument>, <argument pos:start="13:47" pos:end="13:57"><expr pos:start="13:47" pos:end="13:57"><name pos:start="13:47" pos:end="13:57">DC_VLC_BITS</name></expr></argument>, <argument pos:start="13:60" pos:end="13:60"><expr pos:start="13:60" pos:end="13:60"><literal type="number" pos:start="13:60" pos:end="13:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="15:5" pos:end="17:64">else<block type="pseudo" pos:start="17:9" pos:end="17:64"><block_content pos:start="17:9" pos:end="17:64"> 

        <expr_stmt pos:start="17:9" pos:end="17:64"><expr pos:start="17:9" pos:end="17:63"><name pos:start="17:9" pos:end="17:12">code</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <call pos:start="17:16" pos:end="17:63"><name pos:start="17:16" pos:end="17:23">get_vlc2</name><argument_list pos:start="17:24" pos:end="17:63">(<argument pos:start="17:25" pos:end="17:30"><expr pos:start="17:25" pos:end="17:30"><operator pos:start="17:25" pos:end="17:25">&amp;</operator><name pos:start="17:26" pos:end="17:30"><name pos:start="17:26" pos:end="17:26">s</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:30">gb</name></name></expr></argument>, <argument pos:start="17:33" pos:end="17:46"><expr pos:start="17:33" pos:end="17:46"><name pos:start="17:33" pos:end="17:46"><name pos:start="17:33" pos:end="17:40">dc_chrom</name><operator pos:start="17:41" pos:end="17:41">.</operator><name pos:start="17:42" pos:end="17:46">table</name></name></expr></argument>, <argument pos:start="17:49" pos:end="17:59"><expr pos:start="17:49" pos:end="17:59"><name pos:start="17:49" pos:end="17:59">DC_VLC_BITS</name></expr></argument>, <argument pos:start="17:62" pos:end="17:62"><expr pos:start="17:62" pos:end="17:62"><literal type="number" pos:start="17:62" pos:end="17:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:48">(<expr pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:12">code</name> <argument_list type="generic" pos:start="19:14" pos:end="19:26">&lt; <argument pos:start="19:16" pos:end="19:24"><expr pos:start="19:16" pos:end="19:24"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal> <operator pos:start="19:18" pos:end="19:19">||</operator> <name pos:start="19:21" pos:end="19:24">code</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="19:28" pos:end="19:28">9</literal></expr> <comment type="block" pos:start="19:30" pos:end="19:47">/* &amp;&amp; s-&gt;nbit&lt;9 */</comment>)</condition><block pos:start="19:49" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:18">

        <expr_stmt pos:start="21:9" pos:end="21:44"><expr pos:start="21:9" pos:end="21:43"><call pos:start="21:9" pos:end="21:43"><name pos:start="21:9" pos:end="21:15">fprintf</name><argument_list pos:start="21:16" pos:end="21:43">(<argument pos:start="21:17" pos:end="21:22"><expr pos:start="21:17" pos:end="21:22"><name pos:start="21:17" pos:end="21:22">stderr</name></expr></argument>, <argument pos:start="21:25" pos:end="21:42"><expr pos:start="21:25" pos:end="21:42"><literal type="string" pos:start="21:25" pos:end="21:42">"illegal dc vlc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:18">return <expr pos:start="23:16" pos:end="23:17"><operator pos:start="23:16" pos:end="23:16">-</operator><literal type="number" pos:start="23:17" pos:end="23:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="51:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:18">(<expr pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:12">code</name> <operator pos:start="27:14" pos:end="27:15">==</operator> <literal type="number" pos:start="27:17" pos:end="27:17">0</literal></expr>)</condition> <block pos:start="27:20" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:18">

        <expr_stmt pos:start="29:9" pos:end="29:18"><expr pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:13">level</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <literal type="number" pos:start="29:17" pos:end="29:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="51:5">else <block pos:start="31:12" pos:end="51:5">{<block_content pos:start="33:9" pos:end="49:9">

        <expr_stmt pos:start="33:9" pos:end="33:40"><expr pos:start="33:9" pos:end="33:39"><name pos:start="33:9" pos:end="33:13">level</name> <operator pos:start="33:15" pos:end="33:15">=</operator> <call pos:start="33:17" pos:end="33:39"><name pos:start="33:17" pos:end="33:25">get_xbits</name><argument_list pos:start="33:26" pos:end="33:39">(<argument pos:start="33:27" pos:end="33:32"><expr pos:start="33:27" pos:end="33:32"><operator pos:start="33:27" pos:end="33:27">&amp;</operator><name pos:start="33:28" pos:end="33:32"><name pos:start="33:28" pos:end="33:28">s</name><operator pos:start="33:29" pos:end="33:30">-&gt;</operator><name pos:start="33:31" pos:end="33:32">gb</name></name></expr></argument>, <argument pos:start="33:35" pos:end="33:38"><expr pos:start="33:35" pos:end="33:38"><name pos:start="33:35" pos:end="33:38">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="49:9"><if pos:start="35:9" pos:end="49:9">if <condition pos:start="35:12" pos:end="35:21">(<expr pos:start="35:13" pos:end="35:20"><name pos:start="35:13" pos:end="35:16">code</name> <operator pos:start="35:18" pos:end="35:18">&gt;</operator> <literal type="number" pos:start="35:20" pos:end="35:20">8</literal></expr>)</condition><block pos:start="35:22" pos:end="49:9">{<block_content pos:start="37:13" pos:end="47:13">

            <if_stmt pos:start="37:13" pos:end="47:13"><if pos:start="37:13" pos:end="47:13">if<condition pos:start="37:15" pos:end="37:36">(<expr pos:start="37:16" pos:end="37:35"><call pos:start="37:16" pos:end="37:32"><name pos:start="37:16" pos:end="37:24">get_bits1</name><argument_list pos:start="37:25" pos:end="37:32">(<argument pos:start="37:26" pos:end="37:31"><expr pos:start="37:26" pos:end="37:31"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:31"><name pos:start="37:27" pos:end="37:27">s</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:31">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="37:33" pos:end="37:34">==</operator><literal type="number" pos:start="37:35" pos:end="37:35">0</literal></expr>)</condition><block pos:start="37:37" pos:end="47:13">{<block_content pos:start="39:17" pos:end="45:17"> <comment type="block" pos:start="37:39" pos:end="37:50">/* marker */</comment>

                <if_stmt pos:start="39:17" pos:end="45:17"><if pos:start="39:17" pos:end="45:17">if<condition pos:start="39:19" pos:end="39:42">(<expr pos:start="39:20" pos:end="39:41"><name pos:start="39:20" pos:end="39:38"><name pos:start="39:20" pos:end="39:20">s</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:38">error_resilience</name></name><operator pos:start="39:39" pos:end="39:40">&gt;=</operator><literal type="number" pos:start="39:41" pos:end="39:41">2</literal></expr>)</condition><block pos:start="39:43" pos:end="45:17">{<block_content pos:start="41:21" pos:end="43:30">

                    <expr_stmt pos:start="41:21" pos:end="41:63"><expr pos:start="41:21" pos:end="41:62"><call pos:start="41:21" pos:end="41:62"><name pos:start="41:21" pos:end="41:27">fprintf</name><argument_list pos:start="41:28" pos:end="41:62">(<argument pos:start="41:29" pos:end="41:34"><expr pos:start="41:29" pos:end="41:34"><name pos:start="41:29" pos:end="41:34">stderr</name></expr></argument>, <argument pos:start="41:37" pos:end="41:61"><expr pos:start="41:37" pos:end="41:61"><literal type="string" pos:start="41:37" pos:end="41:61">"dc marker bit missing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="43:21" pos:end="43:30">return <expr pos:start="43:28" pos:end="43:29"><operator pos:start="43:28" pos:end="43:28">-</operator><literal type="number" pos:start="43:29" pos:end="43:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:52"><expr pos:start="53:5" pos:end="53:51"><name pos:start="53:5" pos:end="53:8">pred</name> <operator pos:start="53:10" pos:end="53:10">=</operator> <call pos:start="53:12" pos:end="53:51"><name pos:start="53:12" pos:end="53:27">ff_mpeg4_pred_dc</name><argument_list pos:start="53:28" pos:end="53:51">(<argument pos:start="53:29" pos:end="53:29"><expr pos:start="53:29" pos:end="53:29"><name pos:start="53:29" pos:end="53:29">s</name></expr></argument>, <argument pos:start="53:32" pos:end="53:32"><expr pos:start="53:32" pos:end="53:32"><name pos:start="53:32" pos:end="53:32">n</name></expr></argument>, <argument pos:start="53:35" pos:end="53:41"><expr pos:start="53:35" pos:end="53:41"><operator pos:start="53:35" pos:end="53:35">&amp;</operator><name pos:start="53:36" pos:end="53:41">dc_val</name></expr></argument>, <argument pos:start="53:44" pos:end="53:50"><expr pos:start="53:44" pos:end="53:50"><name pos:start="53:44" pos:end="53:50">dir_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:18"><expr pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:9">level</name> <operator pos:start="55:11" pos:end="55:12">+=</operator> <name pos:start="55:14" pos:end="55:17">pred</name></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="69:5"><if pos:start="57:5" pos:end="69:5">if <condition pos:start="57:8" pos:end="57:18">(<expr pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:13">level</name> <operator pos:start="57:15" pos:end="57:15">&lt;</operator> <literal type="number" pos:start="57:17" pos:end="57:17">0</literal></expr>)</condition><block pos:start="57:19" pos:end="69:5">{<block_content pos:start="59:9" pos:end="67:18">

        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if<condition pos:start="59:11" pos:end="59:34">(<expr pos:start="59:12" pos:end="59:33"><name pos:start="59:12" pos:end="59:30"><name pos:start="59:12" pos:end="59:12">s</name><operator pos:start="59:13" pos:end="59:14">-&gt;</operator><name pos:start="59:15" pos:end="59:30">error_resilience</name></name><operator pos:start="59:31" pos:end="59:32">&gt;=</operator><literal type="number" pos:start="59:33" pos:end="59:33">3</literal></expr>)</condition><block pos:start="59:35" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:22">

            <expr_stmt pos:start="61:13" pos:end="61:65"><expr pos:start="61:13" pos:end="61:64"><call pos:start="61:13" pos:end="61:64"><name pos:start="61:13" pos:end="61:19">fprintf</name><argument_list pos:start="61:20" pos:end="61:64">(<argument pos:start="61:21" pos:end="61:26"><expr pos:start="61:21" pos:end="61:26"><name pos:start="61:21" pos:end="61:26">stderr</name></expr></argument>, <argument pos:start="61:29" pos:end="61:45"><expr pos:start="61:29" pos:end="61:45"><literal type="string" pos:start="61:29" pos:end="61:45">"dc&lt;0 at %dx%d\n"</literal></expr></argument>, <argument pos:start="61:48" pos:end="61:54"><expr pos:start="61:48" pos:end="61:54"><name pos:start="61:48" pos:end="61:54"><name pos:start="61:48" pos:end="61:48">s</name><operator pos:start="61:49" pos:end="61:50">-&gt;</operator><name pos:start="61:51" pos:end="61:54">mb_x</name></name></expr></argument>, <argument pos:start="61:57" pos:end="61:63"><expr pos:start="61:57" pos:end="61:63"><name pos:start="61:57" pos:end="61:63"><name pos:start="61:57" pos:end="61:57">s</name><operator pos:start="61:58" pos:end="61:59">-&gt;</operator><name pos:start="61:60" pos:end="61:63">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="63:13" pos:end="63:22">return <expr pos:start="63:20" pos:end="63:21"><operator pos:start="63:20" pos:end="63:20">-</operator><literal type="number" pos:start="63:21" pos:end="63:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:18"><expr pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:13">level</name> <operator pos:start="67:15" pos:end="67:15">=</operator> <literal type="number" pos:start="67:17" pos:end="67:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:14">(<expr pos:start="71:9" pos:end="71:13"><name pos:start="71:9" pos:end="71:9">n</name> <operator pos:start="71:11" pos:end="71:11">&lt;</operator> <literal type="number" pos:start="71:13" pos:end="71:13">4</literal></expr>)</condition> <block pos:start="71:16" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:40">

        <expr_stmt pos:start="73:9" pos:end="73:40"><expr pos:start="73:9" pos:end="73:39"><operator pos:start="73:9" pos:end="73:9">*</operator><name pos:start="73:10" pos:end="73:15">dc_val</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <name pos:start="73:19" pos:end="73:23">level</name> <operator pos:start="73:25" pos:end="73:25">*</operator> <name pos:start="73:27" pos:end="73:39"><name pos:start="73:27" pos:end="73:27">s</name><operator pos:start="73:28" pos:end="73:29">-&gt;</operator><name pos:start="73:30" pos:end="73:39">y_dc_scale</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="75:7" pos:end="79:5">else <block pos:start="75:12" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:40">

        <expr_stmt pos:start="77:9" pos:end="77:40"><expr pos:start="77:9" pos:end="77:39"><operator pos:start="77:9" pos:end="77:9">*</operator><name pos:start="77:10" pos:end="77:15">dc_val</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:23">level</name> <operator pos:start="77:25" pos:end="77:25">*</operator> <name pos:start="77:27" pos:end="77:39"><name pos:start="77:27" pos:end="77:27">s</name><operator pos:start="77:28" pos:end="77:29">-&gt;</operator><name pos:start="77:30" pos:end="77:39">c_dc_scale</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="81:5" pos:end="91:5"><if pos:start="81:5" pos:end="91:5">if<condition pos:start="81:7" pos:end="81:30">(<expr pos:start="81:8" pos:end="81:29"><name pos:start="81:8" pos:end="81:26"><name pos:start="81:8" pos:end="81:8">s</name><operator pos:start="81:9" pos:end="81:10">-&gt;</operator><name pos:start="81:11" pos:end="81:26">error_resilience</name></name><operator pos:start="81:27" pos:end="81:28">&gt;=</operator><literal type="number" pos:start="81:29" pos:end="81:29">3</literal></expr>)</condition><block pos:start="81:31" pos:end="91:5">{<block_content pos:start="83:9" pos:end="89:9">

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if<condition pos:start="83:11" pos:end="83:58">(<expr pos:start="83:12" pos:end="83:57"><operator pos:start="83:12" pos:end="83:12">*</operator><name pos:start="83:13" pos:end="83:18">dc_val</name> <operator pos:start="83:20" pos:end="83:20">&gt;</operator> <literal type="number" pos:start="83:22" pos:end="83:27">2048</literal> <operator pos:start="83:27" pos:end="83:27">+</operator> <name pos:start="83:29" pos:end="83:41"><name pos:start="83:29" pos:end="83:29">s</name><operator pos:start="83:30" pos:end="83:31">-&gt;</operator><name pos:start="83:32" pos:end="83:41">y_dc_scale</name></name> <operator pos:start="83:43" pos:end="83:43">+</operator> <name pos:start="83:45" pos:end="83:57"><name pos:start="83:45" pos:end="83:45">s</name><operator pos:start="83:46" pos:end="83:47">-&gt;</operator><name pos:start="83:48" pos:end="83:57">c_dc_scale</name></name></expr>)</condition><block pos:start="83:59" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:22">

            <expr_stmt pos:start="85:13" pos:end="85:72"><expr pos:start="85:13" pos:end="85:71"><call pos:start="85:13" pos:end="85:71"><name pos:start="85:13" pos:end="85:19">fprintf</name><argument_list pos:start="85:20" pos:end="85:71">(<argument pos:start="85:21" pos:end="85:26"><expr pos:start="85:21" pos:end="85:26"><name pos:start="85:21" pos:end="85:26">stderr</name></expr></argument>, <argument pos:start="85:29" pos:end="85:52"><expr pos:start="85:29" pos:end="85:52"><literal type="string" pos:start="85:29" pos:end="85:52">"dc overflow at %dx%d\n"</literal></expr></argument>, <argument pos:start="85:55" pos:end="85:61"><expr pos:start="85:55" pos:end="85:61"><name pos:start="85:55" pos:end="85:61"><name pos:start="85:55" pos:end="85:55">s</name><operator pos:start="85:56" pos:end="85:57">-&gt;</operator><name pos:start="85:58" pos:end="85:61">mb_x</name></name></expr></argument>, <argument pos:start="85:64" pos:end="85:70"><expr pos:start="85:64" pos:end="85:70"><name pos:start="85:64" pos:end="85:70"><name pos:start="85:64" pos:end="85:64">s</name><operator pos:start="85:65" pos:end="85:66">-&gt;</operator><name pos:start="85:67" pos:end="85:70">mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:22">return <expr pos:start="87:20" pos:end="87:21"><operator pos:start="87:20" pos:end="87:20">-</operator><literal type="number" pos:start="87:21" pos:end="87:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="93:5" pos:end="93:17">return <expr pos:start="93:12" pos:end="93:16"><name pos:start="93:12" pos:end="93:16">level</name></expr>;</return>

</block_content>}</block></function>
</unit>
