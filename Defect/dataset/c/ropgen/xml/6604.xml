<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6604.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">long</name></type> <name pos:start="1:6" pos:end="1:17">do_sigreturn</name><parameter_list pos:start="1:18" pos:end="1:32">(<parameter pos:start="1:19" pos:end="1:31"><decl pos:start="1:19" pos:end="1:31"><type pos:start="1:19" pos:end="1:28"><name pos:start="1:19" pos:end="1:26">CPUState</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:31">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="143:1">{<block_content pos:start="5:9" pos:end="141:34">

        <decl_stmt pos:start="5:9" pos:end="5:39"><decl pos:start="5:9" pos:end="5:38"><type pos:start="5:9" pos:end="5:36"><name pos:start="5:9" pos:end="5:34"><name pos:start="5:9" pos:end="5:14">struct</name> <name pos:start="5:16" pos:end="5:34">target_signal_frame</name></name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:38">sf</name></decl>;</decl_stmt>

        <decl_stmt pos:start="7:9" pos:end="7:33"><decl pos:start="7:9" pos:end="7:23"><type pos:start="7:9" pos:end="7:16"><name pos:start="7:9" pos:end="7:16">uint32_t</name></type> <name pos:start="7:18" pos:end="7:23">up_psr</name></decl>, <decl pos:start="7:26" pos:end="7:27"><type ref="prev" pos:start="7:9" pos:end="7:16"/><name pos:start="7:26" pos:end="7:27">pc</name></decl>, <decl pos:start="7:30" pos:end="7:32"><type ref="prev" pos:start="7:9" pos:end="7:16"/><name pos:start="7:30" pos:end="7:32">npc</name></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:28"><decl pos:start="9:9" pos:end="9:27"><type pos:start="9:9" pos:end="9:23"><name pos:start="9:9" pos:end="9:23">target_sigset_t</name></type> <name pos:start="9:25" pos:end="9:27">set</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:26"><decl pos:start="11:9" pos:end="11:25"><type pos:start="11:9" pos:end="11:16"><name pos:start="11:9" pos:end="11:16">sigset_t</name></type> <name pos:start="11:18" pos:end="11:25">host_set</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:27"><decl pos:start="13:9" pos:end="13:26"><type pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:17">abi_ulong</name></type> <name pos:start="13:19" pos:end="13:26">fpu_save</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:19"><decl pos:start="15:9" pos:end="15:15"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:15">err</name></decl>, <decl pos:start="15:18" pos:end="15:18"><type ref="prev" pos:start="15:9" pos:end="15:11"/><name pos:start="15:18" pos:end="15:18">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="19:9" pos:end="42:0"><expr pos:start="19:9" pos:end="19:69"><name pos:start="19:9" pos:end="19:10">sf</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <operator pos:start="19:14" pos:end="19:14">(</operator>struct <name pos:start="19:22" pos:end="19:40">target_signal_frame</name> <operator pos:start="19:42" pos:end="19:42">*</operator><operator pos:start="19:43" pos:end="19:43">)</operator><call pos:start="19:44" pos:end="19:69"><name pos:start="19:44" pos:end="19:46">g2h</name><argument_list pos:start="19:47" pos:end="19:69">(<argument pos:start="19:48" pos:end="19:68"><expr pos:start="19:48" pos:end="19:68"><name pos:start="19:48" pos:end="19:68"><name pos:start="19:48" pos:end="19:50">env</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:59">regwptr</name><index pos:start="19:60" pos:end="19:68">[<expr pos:start="19:61" pos:end="19:67"><name pos:start="19:61" pos:end="19:67">UREG_FP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="21:1" pos:end="21:5">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:5"><literal type="number" pos:start="21:5" pos:end="21:5">0</literal></expr></cpp:if>

	fprintf(stderr, "sigreturn\n");

	fprintf(stderr, "sf: %x pc %x fp %x sp %x\n", sf, env-&gt;pc, env-&gt;regwptr[UREG_FP], env-&gt;regwptr[UREG_SP]);

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

	<comment type="line" pos:start="29:9" pos:end="29:50">//cpu_dump_state(env, stderr, fprintf, 0);</comment>



        <comment type="block" pos:start="33:9" pos:end="33:67">/* 1. Make sure we are not getting garbage from the user */</comment>

<cpp:if pos:start="35:1" pos:end="35:5">#<cpp:directive pos:start="35:2" pos:end="35:3">if</cpp:directive> <expr pos:start="35:5" pos:end="35:5"><literal type="number" pos:start="35:5" pos:end="35:5">0</literal></expr></cpp:if>

        if (verify_area (VERIFY_READ, sf, sizeof (*sf)))

                goto segv_and_exit;

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>



        <if_stmt pos:start="45:9" pos:end="47:35"><if pos:start="45:9" pos:end="47:35">if <condition pos:start="45:12" pos:end="45:28">(<expr pos:start="45:13" pos:end="45:27"><operator pos:start="45:13" pos:end="45:13">(</operator><operator pos:start="45:14" pos:end="45:14">(</operator><name pos:start="45:15" pos:end="45:18">uint</name><operator pos:start="45:19" pos:end="45:19">)</operator> <name pos:start="45:21" pos:end="45:22">sf</name><operator pos:start="45:23" pos:end="45:23">)</operator> <operator pos:start="45:25" pos:end="45:25">&amp;</operator> <literal type="number" pos:start="45:27" pos:end="45:27">3</literal></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:35"><block_content pos:start="47:17" pos:end="47:35">

                <goto pos:start="47:17" pos:end="47:35">goto <name pos:start="47:22" pos:end="47:34">segv_and_exit</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:52"><expr pos:start="51:9" pos:end="51:51"><name pos:start="51:9" pos:end="51:11">err</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="51:51"><name pos:start="51:15" pos:end="51:24">__get_user</name><argument_list pos:start="51:25" pos:end="51:51">(<argument pos:start="51:26" pos:end="51:27"><expr pos:start="51:26" pos:end="51:27"><name pos:start="51:26" pos:end="51:27">pc</name></expr></argument>,  <argument pos:start="51:31" pos:end="51:50"><expr pos:start="51:31" pos:end="51:50"><operator pos:start="51:31" pos:end="51:31">&amp;</operator><name pos:start="51:32" pos:end="51:50"><name pos:start="51:32" pos:end="51:33">sf</name><operator pos:start="51:34" pos:end="51:35">-&gt;</operator><name pos:start="51:36" pos:end="51:39">info</name><operator pos:start="51:40" pos:end="51:40">.</operator><name pos:start="51:41" pos:end="51:47">si_regs</name><operator pos:start="51:48" pos:end="51:48">.</operator><name pos:start="51:49" pos:end="51:50">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:54"><expr pos:start="53:9" pos:end="53:53"><name pos:start="53:9" pos:end="53:11">err</name> <operator pos:start="53:13" pos:end="53:14">|=</operator> <call pos:start="53:16" pos:end="53:53"><name pos:start="53:16" pos:end="53:25">__get_user</name><argument_list pos:start="53:26" pos:end="53:53">(<argument pos:start="53:27" pos:end="53:29"><expr pos:start="53:27" pos:end="53:29"><name pos:start="53:27" pos:end="53:29">npc</name></expr></argument>, <argument pos:start="53:32" pos:end="53:52"><expr pos:start="53:32" pos:end="53:52"><operator pos:start="53:32" pos:end="53:32">&amp;</operator><name pos:start="53:33" pos:end="53:52"><name pos:start="53:33" pos:end="53:34">sf</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:40">info</name><operator pos:start="53:41" pos:end="53:41">.</operator><name pos:start="53:42" pos:end="53:48">si_regs</name><operator pos:start="53:49" pos:end="53:49">.</operator><name pos:start="53:50" pos:end="53:52">npc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="57:9" pos:end="59:35"><if pos:start="57:9" pos:end="59:35">if <condition pos:start="57:12" pos:end="57:27">(<expr pos:start="57:13" pos:end="57:26"><operator pos:start="57:13" pos:end="57:13">(</operator><name pos:start="57:14" pos:end="57:15">pc</name> <operator pos:start="57:17" pos:end="57:17">|</operator> <name pos:start="57:19" pos:end="57:21">npc</name><operator pos:start="57:22" pos:end="57:22">)</operator> <operator pos:start="57:24" pos:end="57:24">&amp;</operator> <literal type="number" pos:start="57:26" pos:end="57:26">3</literal></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:35"><block_content pos:start="59:17" pos:end="59:35">

                <goto pos:start="59:17" pos:end="59:35">goto <name pos:start="59:22" pos:end="59:34">segv_and_exit</name>;</goto></block_content></block></if></if_stmt>



        <comment type="block" pos:start="63:9" pos:end="63:34">/* 2. Restore the state */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:57"><expr pos:start="65:9" pos:end="65:56"><name pos:start="65:9" pos:end="65:11">err</name> <operator pos:start="65:13" pos:end="65:14">|=</operator> <call pos:start="65:16" pos:end="65:56"><name pos:start="65:16" pos:end="65:25">__get_user</name><argument_list pos:start="65:26" pos:end="65:56">(<argument pos:start="65:27" pos:end="65:32"><expr pos:start="65:27" pos:end="65:32"><name pos:start="65:27" pos:end="65:32">up_psr</name></expr></argument>, <argument pos:start="65:35" pos:end="65:55"><expr pos:start="65:35" pos:end="65:55"><operator pos:start="65:35" pos:end="65:35">&amp;</operator><name pos:start="65:36" pos:end="65:55"><name pos:start="65:36" pos:end="65:37">sf</name><operator pos:start="65:38" pos:end="65:39">-&gt;</operator><name pos:start="65:40" pos:end="65:43">info</name><operator pos:start="65:44" pos:end="65:44">.</operator><name pos:start="65:45" pos:end="65:51">si_regs</name><operator pos:start="65:52" pos:end="65:52">.</operator><name pos:start="65:53" pos:end="65:55">psr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="69:9" pos:end="69:76">/* User can only change condition codes and FPU enabling in %psr. */</comment>

        <expr_stmt pos:start="71:9" pos:end="73:59"><expr pos:start="71:9" pos:end="73:58"><name pos:start="71:9" pos:end="71:16"><name pos:start="71:9" pos:end="71:11">env</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:16">psr</name></name> <operator pos:start="71:18" pos:end="71:18">=</operator> <operator pos:start="71:20" pos:end="71:20">(</operator><name pos:start="71:21" pos:end="71:26">up_psr</name> <operator pos:start="71:28" pos:end="71:28">&amp;</operator> <operator pos:start="71:30" pos:end="71:30">(</operator><name pos:start="71:31" pos:end="71:37">PSR_ICC</name> <comment type="block" pos:start="71:39" pos:end="71:52">/* | PSR_EF */</comment><operator pos:start="71:53" pos:end="71:53">)</operator><operator pos:start="71:54" pos:end="71:54">)</operator>

                  <operator pos:start="73:19" pos:end="73:19">|</operator> <operator pos:start="73:21" pos:end="73:21">(</operator><name pos:start="73:22" pos:end="73:29"><name pos:start="73:22" pos:end="73:24">env</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:29">psr</name></name> <operator pos:start="73:31" pos:end="73:31">&amp;</operator> <operator pos:start="73:33" pos:end="73:33">~</operator><operator pos:start="73:34" pos:end="73:34">(</operator><name pos:start="73:35" pos:end="73:41">PSR_ICC</name> <comment type="block" pos:start="73:43" pos:end="73:56">/* | PSR_EF */</comment><operator pos:start="73:57" pos:end="73:57">)</operator><operator pos:start="73:58" pos:end="73:58">)</operator></expr>;</expr_stmt>



	<expr_stmt pos:start="77:9" pos:end="77:21"><expr pos:start="77:9" pos:end="77:20"><name pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:11">env</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:15">pc</name></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:20">pc</name></expr>;</expr_stmt>

	<expr_stmt pos:start="79:9" pos:end="79:23"><expr pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:11">env</name><operator pos:start="79:12" pos:end="79:13">-&gt;</operator><name pos:start="79:14" pos:end="79:16">npc</name></name> <operator pos:start="79:18" pos:end="79:18">=</operator> <name pos:start="79:20" pos:end="79:22">npc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:55"><expr pos:start="81:9" pos:end="81:54"><name pos:start="81:9" pos:end="81:11">err</name> <operator pos:start="81:13" pos:end="81:14">|=</operator> <call pos:start="81:16" pos:end="81:54"><name pos:start="81:16" pos:end="81:25">__get_user</name><argument_list pos:start="81:26" pos:end="81:54">(<argument pos:start="81:27" pos:end="81:32"><expr pos:start="81:27" pos:end="81:32"><name pos:start="81:27" pos:end="81:32"><name pos:start="81:27" pos:end="81:29">env</name><operator pos:start="81:30" pos:end="81:31">-&gt;</operator><name pos:start="81:32" pos:end="81:32">y</name></name></expr></argument>, <argument pos:start="81:35" pos:end="81:53"><expr pos:start="81:35" pos:end="81:53"><operator pos:start="81:35" pos:end="81:35">&amp;</operator><name pos:start="81:36" pos:end="81:53"><name pos:start="81:36" pos:end="81:37">sf</name><operator pos:start="81:38" pos:end="81:39">-&gt;</operator><name pos:start="81:40" pos:end="81:43">info</name><operator pos:start="81:44" pos:end="81:44">.</operator><name pos:start="81:45" pos:end="81:51">si_regs</name><operator pos:start="81:52" pos:end="81:52">.</operator><name pos:start="81:53" pos:end="81:53">y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for pos:start="83:9" pos:end="87:9">for <control pos:start="83:13" pos:end="83:29">(<init pos:start="83:14" pos:end="83:17"><expr pos:start="83:14" pos:end="83:16"><name pos:start="83:14" pos:end="83:14">i</name><operator pos:start="83:15" pos:end="83:15">=</operator><literal type="number" pos:start="83:16" pos:end="83:16">0</literal></expr>;</init> <condition pos:start="83:19" pos:end="83:24"><expr pos:start="83:19" pos:end="83:23"><name pos:start="83:19" pos:end="83:19">i</name> <operator pos:start="83:21" pos:end="83:21">&lt;</operator> <literal type="number" pos:start="83:23" pos:end="83:23">8</literal></expr>;</condition> <incr pos:start="83:26" pos:end="83:28"><expr pos:start="83:26" pos:end="83:28"><name pos:start="83:26" pos:end="83:26">i</name><operator pos:start="83:27" pos:end="83:28">++</operator></expr></incr>)</control> <block pos:start="83:31" pos:end="87:9">{<block_content pos:start="85:17" pos:end="85:78">

		<expr_stmt pos:start="85:17" pos:end="85:78"><expr pos:start="85:17" pos:end="85:77"><name pos:start="85:17" pos:end="85:19">err</name> <operator pos:start="85:21" pos:end="85:22">|=</operator> <call pos:start="85:24" pos:end="85:77"><name pos:start="85:24" pos:end="85:33">__get_user</name><argument_list pos:start="85:34" pos:end="85:77">(<argument pos:start="85:35" pos:end="85:47"><expr pos:start="85:35" pos:end="85:47"><name pos:start="85:35" pos:end="85:47"><name pos:start="85:35" pos:end="85:37">env</name><operator pos:start="85:38" pos:end="85:39">-&gt;</operator><name pos:start="85:40" pos:end="85:44">gregs</name><index pos:start="85:45" pos:end="85:47">[<expr pos:start="85:46" pos:end="85:46"><name pos:start="85:46" pos:end="85:46">i</name></expr>]</index></name></expr></argument>, <argument pos:start="85:50" pos:end="85:76"><expr pos:start="85:50" pos:end="85:76"><operator pos:start="85:50" pos:end="85:50">&amp;</operator><name pos:start="85:51" pos:end="85:76"><name pos:start="85:51" pos:end="85:52">sf</name><operator pos:start="85:53" pos:end="85:54">-&gt;</operator><name pos:start="85:55" pos:end="85:58">info</name><operator pos:start="85:59" pos:end="85:59">.</operator><name pos:start="85:60" pos:end="85:66">si_regs</name><operator pos:start="85:67" pos:end="85:67">.</operator><name pos:start="85:68" pos:end="85:73">u_regs</name><index pos:start="85:74" pos:end="85:76">[<expr pos:start="85:75" pos:end="85:75"><name pos:start="85:75" pos:end="85:75">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></for>

	<for pos:start="89:9" pos:end="93:9">for <control pos:start="89:13" pos:end="89:29">(<init pos:start="89:14" pos:end="89:17"><expr pos:start="89:14" pos:end="89:16"><name pos:start="89:14" pos:end="89:14">i</name><operator pos:start="89:15" pos:end="89:15">=</operator><literal type="number" pos:start="89:16" pos:end="89:16">0</literal></expr>;</init> <condition pos:start="89:19" pos:end="89:24"><expr pos:start="89:19" pos:end="89:23"><name pos:start="89:19" pos:end="89:19">i</name> <operator pos:start="89:21" pos:end="89:21">&lt;</operator> <literal type="number" pos:start="89:23" pos:end="89:23">8</literal></expr>;</condition> <incr pos:start="89:26" pos:end="89:28"><expr pos:start="89:26" pos:end="89:28"><name pos:start="89:26" pos:end="89:26">i</name><operator pos:start="89:27" pos:end="89:28">++</operator></expr></incr>)</control> <block pos:start="89:31" pos:end="93:9">{<block_content pos:start="91:17" pos:end="91:92">

		<expr_stmt pos:start="91:17" pos:end="91:92"><expr pos:start="91:17" pos:end="91:91"><name pos:start="91:17" pos:end="91:19">err</name> <operator pos:start="91:21" pos:end="91:22">|=</operator> <call pos:start="91:24" pos:end="91:91"><name pos:start="91:24" pos:end="91:33">__get_user</name><argument_list pos:start="91:34" pos:end="91:91">(<argument pos:start="91:35" pos:end="91:59"><expr pos:start="91:35" pos:end="91:59"><name pos:start="91:35" pos:end="91:59"><name pos:start="91:35" pos:end="91:37">env</name><operator pos:start="91:38" pos:end="91:39">-&gt;</operator><name pos:start="91:40" pos:end="91:46">regwptr</name><index pos:start="91:47" pos:end="91:59">[<expr pos:start="91:48" pos:end="91:58"><name pos:start="91:48" pos:end="91:48">i</name> <operator pos:start="91:50" pos:end="91:50">+</operator> <name pos:start="91:52" pos:end="91:58">UREG_I0</name></expr>]</index></name></expr></argument>, <argument pos:start="91:62" pos:end="91:90"><expr pos:start="91:62" pos:end="91:90"><operator pos:start="91:62" pos:end="91:62">&amp;</operator><name pos:start="91:63" pos:end="91:90"><name pos:start="91:63" pos:end="91:64">sf</name><operator pos:start="91:65" pos:end="91:66">-&gt;</operator><name pos:start="91:67" pos:end="91:70">info</name><operator pos:start="91:71" pos:end="91:71">.</operator><name pos:start="91:72" pos:end="91:78">si_regs</name><operator pos:start="91:79" pos:end="91:79">.</operator><name pos:start="91:80" pos:end="91:85">u_regs</name><index pos:start="91:86" pos:end="91:90">[<expr pos:start="91:87" pos:end="91:89"><name pos:start="91:87" pos:end="91:87">i</name><operator pos:start="91:88" pos:end="91:88">+</operator><literal type="number" pos:start="91:89" pos:end="91:89">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></for>



        <expr_stmt pos:start="97:9" pos:end="97:64"><expr pos:start="97:9" pos:end="97:63"><name pos:start="97:9" pos:end="97:11">err</name> <operator pos:start="97:13" pos:end="97:14">|=</operator> <call pos:start="97:16" pos:end="97:63"><name pos:start="97:16" pos:end="97:25">__get_user</name><argument_list pos:start="97:26" pos:end="97:63">(<argument pos:start="97:27" pos:end="97:34"><expr pos:start="97:27" pos:end="97:34"><name pos:start="97:27" pos:end="97:34">fpu_save</name></expr></argument>, <argument pos:start="97:37" pos:end="97:62"><expr pos:start="97:37" pos:end="97:62"><operator pos:start="97:37" pos:end="97:37">(</operator><name pos:start="97:38" pos:end="97:46">abi_ulong</name> <operator pos:start="97:48" pos:end="97:48">*</operator><operator pos:start="97:49" pos:end="97:49">)</operator><operator pos:start="97:50" pos:end="97:50">&amp;</operator><name pos:start="97:51" pos:end="97:62"><name pos:start="97:51" pos:end="97:52">sf</name><operator pos:start="97:53" pos:end="97:54">-&gt;</operator><name pos:start="97:55" pos:end="97:62">fpu_save</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="101:9" pos:end="101:23">//if (fpu_save)</comment>

        <comment type="line" pos:start="103:9" pos:end="103:58">//        err |= restore_fpu_state(env, fpu_save);</comment>



        <comment type="block" pos:start="107:9" pos:end="111:11">/* This is pretty much atomic, no amount locking would prevent

         * the races which exist anyways.

         */</comment>

        <expr_stmt pos:start="113:9" pos:end="113:57"><expr pos:start="113:9" pos:end="113:56"><name pos:start="113:9" pos:end="113:11">err</name> <operator pos:start="113:13" pos:end="113:14">|=</operator> <call pos:start="113:16" pos:end="113:56"><name pos:start="113:16" pos:end="113:25">__get_user</name><argument_list pos:start="113:26" pos:end="113:56">(<argument pos:start="113:27" pos:end="113:36"><expr pos:start="113:27" pos:end="113:36"><name pos:start="113:27" pos:end="113:36"><name pos:start="113:27" pos:end="113:29">set</name><operator pos:start="113:30" pos:end="113:30">.</operator><name pos:start="113:31" pos:end="113:33">sig</name><index pos:start="113:34" pos:end="113:36">[<expr pos:start="113:35" pos:end="113:35"><literal type="number" pos:start="113:35" pos:end="113:35">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="113:39" pos:end="113:55"><expr pos:start="113:39" pos:end="113:55"><operator pos:start="113:39" pos:end="113:39">&amp;</operator><name pos:start="113:40" pos:end="113:55"><name pos:start="113:40" pos:end="113:41">sf</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:47">info</name><operator pos:start="113:48" pos:end="113:48">.</operator><name pos:start="113:49" pos:end="113:55">si_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="115:9" pos:end="119:9">for<control pos:start="115:12" pos:end="115:46">(<init pos:start="115:13" pos:end="115:18"><expr pos:start="115:13" pos:end="115:17"><name pos:start="115:13" pos:end="115:13">i</name> <operator pos:start="115:15" pos:end="115:15">=</operator> <literal type="number" pos:start="115:17" pos:end="115:17">1</literal></expr>;</init> <condition pos:start="115:20" pos:end="115:41"><expr pos:start="115:20" pos:end="115:40"><name pos:start="115:20" pos:end="115:20">i</name> <operator pos:start="115:22" pos:end="115:22">&lt;</operator> <name pos:start="115:24" pos:end="115:40">TARGET_NSIG_WORDS</name></expr>;</condition> <incr pos:start="115:43" pos:end="115:45"><expr pos:start="115:43" pos:end="115:45"><name pos:start="115:43" pos:end="115:43">i</name><operator pos:start="115:44" pos:end="115:45">++</operator></expr></incr>)</control> <block pos:start="115:48" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:67">

            <expr_stmt pos:start="117:13" pos:end="117:67"><expr pos:start="117:13" pos:end="117:66"><name pos:start="117:13" pos:end="117:15">err</name> <operator pos:start="117:17" pos:end="117:18">|=</operator> <operator pos:start="117:20" pos:end="117:20">(</operator><call pos:start="117:21" pos:end="117:65"><name pos:start="117:21" pos:end="117:30">__get_user</name><argument_list pos:start="117:31" pos:end="117:65">(<argument pos:start="117:32" pos:end="117:41"><expr pos:start="117:32" pos:end="117:41"><name pos:start="117:32" pos:end="117:41"><name pos:start="117:32" pos:end="117:34">set</name><operator pos:start="117:35" pos:end="117:35">.</operator><name pos:start="117:36" pos:end="117:38">sig</name><index pos:start="117:39" pos:end="117:41">[<expr pos:start="117:40" pos:end="117:40"><name pos:start="117:40" pos:end="117:40">i</name></expr>]</index></name></expr></argument>, <argument pos:start="117:44" pos:end="117:64"><expr pos:start="117:44" pos:end="117:64"><operator pos:start="117:44" pos:end="117:44">&amp;</operator><name pos:start="117:45" pos:end="117:64"><name pos:start="117:45" pos:end="117:46">sf</name><operator pos:start="117:47" pos:end="117:48">-&gt;</operator><name pos:start="117:49" pos:end="117:57">extramask</name><index pos:start="117:58" pos:end="117:64">[<expr pos:start="117:59" pos:end="117:63"><name pos:start="117:59" pos:end="117:59">i</name> <operator pos:start="117:61" pos:end="117:61">-</operator> <literal type="number" pos:start="117:63" pos:end="117:63">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="117:66" pos:end="117:66">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="123:9" pos:end="123:56"><expr pos:start="123:9" pos:end="123:55"><call pos:start="123:9" pos:end="123:55"><name pos:start="123:9" pos:end="123:38">target_to_host_sigset_internal</name><argument_list pos:start="123:39" pos:end="123:55">(<argument pos:start="123:40" pos:end="123:48"><expr pos:start="123:40" pos:end="123:48"><operator pos:start="123:40" pos:end="123:40">&amp;</operator><name pos:start="123:41" pos:end="123:48">host_set</name></expr></argument>, <argument pos:start="123:51" pos:end="123:54"><expr pos:start="123:51" pos:end="123:54"><operator pos:start="123:51" pos:end="123:51">&amp;</operator><name pos:start="123:52" pos:end="123:54">set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:50"><expr pos:start="125:9" pos:end="125:49"><call pos:start="125:9" pos:end="125:49"><name pos:start="125:9" pos:end="125:19">sigprocmask</name><argument_list pos:start="125:20" pos:end="125:49">(<argument pos:start="125:21" pos:end="125:31"><expr pos:start="125:21" pos:end="125:31"><name pos:start="125:21" pos:end="125:31">SIG_SETMASK</name></expr></argument>, <argument pos:start="125:34" pos:end="125:42"><expr pos:start="125:34" pos:end="125:42"><operator pos:start="125:34" pos:end="125:34">&amp;</operator><name pos:start="125:35" pos:end="125:42">host_set</name></expr></argument>, <argument pos:start="125:45" pos:end="125:48"><expr pos:start="125:45" pos:end="125:48"><name pos:start="125:45" pos:end="125:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="129:9" pos:end="131:35"><if pos:start="129:9" pos:end="131:35">if <condition pos:start="129:12" pos:end="129:16">(<expr pos:start="129:13" pos:end="129:15"><name pos:start="129:13" pos:end="129:15">err</name></expr>)</condition><block type="pseudo" pos:start="131:17" pos:end="131:35"><block_content pos:start="131:17" pos:end="131:35">

                <goto pos:start="131:17" pos:end="131:35">goto <name pos:start="131:22" pos:end="131:34">segv_and_exit</name>;</goto></block_content></block></if></if_stmt>



        <return pos:start="135:9" pos:end="135:31">return <expr pos:start="135:16" pos:end="135:30"><name pos:start="135:16" pos:end="135:30"><name pos:start="135:16" pos:end="135:18">env</name><operator pos:start="135:19" pos:end="135:20">-&gt;</operator><name pos:start="135:21" pos:end="135:27">regwptr</name><index pos:start="135:28" pos:end="135:30">[<expr pos:start="135:29" pos:end="135:29"><literal type="number" pos:start="135:29" pos:end="135:29">0</literal></expr>]</index></name></expr>;</return>



<label pos:start="139:1" pos:end="139:14"><name pos:start="139:1" pos:end="139:13">segv_and_exit</name>:</label>

	<expr_stmt pos:start="141:9" pos:end="141:34"><expr pos:start="141:9" pos:end="141:33"><call pos:start="141:9" pos:end="141:33"><name pos:start="141:9" pos:end="141:17">force_sig</name><argument_list pos:start="141:18" pos:end="141:33">(<argument pos:start="141:19" pos:end="141:32"><expr pos:start="141:19" pos:end="141:32"><name pos:start="141:19" pos:end="141:32">TARGET_SIGSEGV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
