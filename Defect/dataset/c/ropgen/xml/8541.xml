<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8541.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">ahci_populate_sglist</name><parameter_list pos:start="1:32" pos:end="1:67">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:42">AHCIDevice</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">ad</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><name pos:start="1:49" pos:end="1:58">QEMUSGList</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:66">sglist</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:13">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">AHCICmdHdr</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">cmd</name> <init pos:start="5:21" pos:end="5:33">= <expr pos:start="5:23" pos:end="5:33"><name pos:start="5:23" pos:end="5:33"><name pos:start="5:23" pos:end="5:24">ad</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:33">cur_cmd</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">opts</name> <init pos:start="7:19" pos:end="7:42">= <expr pos:start="7:21" pos:end="7:42"><call pos:start="7:21" pos:end="7:42"><name pos:start="7:21" pos:end="7:31">le32_to_cpu</name><argument_list pos:start="7:32" pos:end="7:42">(<argument pos:start="7:33" pos:end="7:41"><expr pos:start="7:33" pos:end="7:41"><name pos:start="7:33" pos:end="7:41"><name pos:start="7:33" pos:end="7:35">cmd</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:41">opts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:22">prdt_addr</name> <init pos:start="9:24" pos:end="9:58">= <expr pos:start="9:26" pos:end="9:58"><call pos:start="9:26" pos:end="9:51"><name pos:start="9:26" pos:end="9:36">le64_to_cpu</name><argument_list pos:start="9:37" pos:end="9:51">(<argument pos:start="9:38" pos:end="9:50"><expr pos:start="9:38" pos:end="9:50"><name pos:start="9:38" pos:end="9:50"><name pos:start="9:38" pos:end="9:40">cmd</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:50">tbl_addr</name></name></expr></argument>)</argument_list></call> <operator pos:start="9:53" pos:end="9:53">+</operator> <literal type="number" pos:start="9:55" pos:end="9:58">0x80</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:58"><decl pos:start="11:5" pos:end="11:57"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:25">sglist_alloc_hint</name> <init pos:start="11:27" pos:end="11:57">= <expr pos:start="11:29" pos:end="11:57"><name pos:start="11:29" pos:end="11:32">opts</name> <operator pos:start="11:34" pos:end="11:35">&gt;&gt;</operator> <name pos:start="11:37" pos:end="11:57">AHCI_CMD_HDR_PRDT_LEN</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:64"><decl pos:start="13:5" pos:end="13:63"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">dma_addr_t</name></type> <name pos:start="13:16" pos:end="13:23">prdt_len</name> <init pos:start="13:25" pos:end="13:63">= <expr pos:start="13:27" pos:end="13:63"><operator pos:start="13:27" pos:end="13:27">(</operator><name pos:start="13:28" pos:end="13:44">sglist_alloc_hint</name> <operator pos:start="13:46" pos:end="13:46">*</operator> <sizeof pos:start="13:48" pos:end="13:62">sizeof<argument_list pos:start="13:54" pos:end="13:62">(<argument pos:start="13:55" pos:end="13:61"><expr pos:start="13:55" pos:end="13:61"><name pos:start="13:55" pos:end="13:61">AHCI_SG</name></expr></argument>)</argument_list></sizeof><operator pos:start="13:63" pos:end="13:63">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:40"><decl pos:start="15:5" pos:end="15:39"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">dma_addr_t</name></type> <name pos:start="15:16" pos:end="15:28">real_prdt_len</name> <init pos:start="15:30" pos:end="15:39">= <expr pos:start="15:32" pos:end="15:39"><name pos:start="15:32" pos:end="15:39">prdt_len</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:17">prdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">r</name> <init pos:start="21:11" pos:end="21:13">= <expr pos:start="21:13" pos:end="21:13"><literal type="number" pos:start="21:13" pos:end="21:13">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:27">(<expr pos:start="25:9" pos:end="25:26"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:26">sglist_alloc_hint</name></expr>)</condition> <block pos:start="25:29" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:74"><expr pos:start="27:9" pos:end="27:73"><call pos:start="27:9" pos:end="27:73"><name pos:start="27:9" pos:end="27:15">DPRINTF</name><argument_list pos:start="27:16" pos:end="27:73">(<argument pos:start="27:17" pos:end="27:27"><expr pos:start="27:17" pos:end="27:27"><name pos:start="27:17" pos:end="27:27"><name pos:start="27:17" pos:end="27:18">ad</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:27">port_no</name></name></expr></argument>, <argument pos:start="27:30" pos:end="27:66"><expr pos:start="27:30" pos:end="27:66"><literal type="string" pos:start="27:30" pos:end="27:66">"no sg list given by guest: 0x%08x\n"</literal></expr></argument>, <argument pos:start="27:69" pos:end="27:72"><expr pos:start="27:69" pos:end="27:72"><name pos:start="27:69" pos:end="27:72">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:18">/* map PRDT */</comment>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="39:58">(<expr pos:start="37:9" pos:end="39:57"><operator pos:start="37:9" pos:end="37:9">!</operator><operator pos:start="37:10" pos:end="37:10">(</operator><name pos:start="37:11" pos:end="37:14">prdt</name> <operator pos:start="37:16" pos:end="37:16">=</operator> <call pos:start="37:18" pos:end="39:56"><name pos:start="37:18" pos:end="37:31">dma_memory_map</name><argument_list pos:start="37:32" pos:end="39:56">(<argument pos:start="37:33" pos:end="37:44"><expr pos:start="37:33" pos:end="37:44"><name pos:start="37:33" pos:end="37:44"><name pos:start="37:33" pos:end="37:34">ad</name><operator pos:start="37:35" pos:end="37:36">-&gt;</operator><name pos:start="37:37" pos:end="37:39">hba</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:44">dma</name></name></expr></argument>, <argument pos:start="37:47" pos:end="37:55"><expr pos:start="37:47" pos:end="37:55"><name pos:start="37:47" pos:end="37:55">prdt_addr</name></expr></argument>, <argument pos:start="37:58" pos:end="37:66"><expr pos:start="37:58" pos:end="37:66"><operator pos:start="37:58" pos:end="37:58">&amp;</operator><name pos:start="37:59" pos:end="37:66">prdt_len</name></expr></argument>,

                                <argument pos:start="39:33" pos:end="39:55"><expr pos:start="39:33" pos:end="39:55"><name pos:start="39:33" pos:end="39:55">DMA_DIRECTION_TO_DEVICE</name></expr></argument>)</argument_list></call><operator pos:start="39:57" pos:end="39:57">)</operator></expr>)</condition><block pos:start="39:59" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:45"><expr pos:start="41:9" pos:end="41:44"><call pos:start="41:9" pos:end="41:44"><name pos:start="41:9" pos:end="41:15">DPRINTF</name><argument_list pos:start="41:16" pos:end="41:44">(<argument pos:start="41:17" pos:end="41:27"><expr pos:start="41:17" pos:end="41:27"><name pos:start="41:17" pos:end="41:27"><name pos:start="41:17" pos:end="41:18">ad</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:27">port_no</name></name></expr></argument>, <argument pos:start="41:30" pos:end="41:43"><expr pos:start="41:30" pos:end="41:43"><literal type="string" pos:start="41:30" pos:end="41:43">"map failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="57:5"><if pos:start="49:5" pos:end="57:5">if <condition pos:start="49:8" pos:end="49:33">(<expr pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:16">prdt_len</name> <operator pos:start="49:18" pos:end="49:18">&lt;</operator> <name pos:start="49:20" pos:end="49:32">real_prdt_len</name></expr>)</condition> <block pos:start="49:35" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:17">

        <expr_stmt pos:start="51:9" pos:end="51:60"><expr pos:start="51:9" pos:end="51:59"><call pos:start="51:9" pos:end="51:59"><name pos:start="51:9" pos:end="51:15">DPRINTF</name><argument_list pos:start="51:16" pos:end="51:59">(<argument pos:start="51:17" pos:end="51:27"><expr pos:start="51:17" pos:end="51:27"><name pos:start="51:17" pos:end="51:27"><name pos:start="51:17" pos:end="51:18">ad</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:27">port_no</name></name></expr></argument>, <argument pos:start="51:30" pos:end="51:58"><expr pos:start="51:30" pos:end="51:58"><literal type="string" pos:start="51:30" pos:end="51:58">"mapped less than expected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:15"><expr pos:start="53:9" pos:end="53:14"><name pos:start="53:9" pos:end="53:9">r</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <operator pos:start="53:13" pos:end="53:13">-</operator><literal type="number" pos:start="53:14" pos:end="53:14">1</literal></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:17">goto <name pos:start="55:14" pos:end="55:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:65">/* Get entries in the PRDT, init a qemu sglist accordingly */</comment>

    <if_stmt pos:start="63:5" pos:end="81:5"><if pos:start="63:5" pos:end="81:5">if <condition pos:start="63:8" pos:end="63:30">(<expr pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:25">sglist_alloc_hint</name> <operator pos:start="63:27" pos:end="63:27">&gt;</operator> <literal type="number" pos:start="63:29" pos:end="63:29">0</literal></expr>)</condition> <block pos:start="63:32" pos:end="81:5">{<block_content pos:start="65:9" pos:end="79:9">

        <decl_stmt pos:start="65:9" pos:end="65:39"><decl pos:start="65:9" pos:end="65:38"><type pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:15">AHCI_SG</name> <modifier pos:start="65:17" pos:end="65:17">*</modifier></type><name pos:start="65:18" pos:end="65:20">tbl</name> <init pos:start="65:22" pos:end="65:38">= <expr pos:start="65:24" pos:end="65:38"><operator pos:start="65:24" pos:end="65:24">(</operator><name pos:start="65:25" pos:end="65:31">AHCI_SG</name> <operator pos:start="65:33" pos:end="65:33">*</operator><operator pos:start="65:34" pos:end="65:34">)</operator><name pos:start="65:35" pos:end="65:38">prdt</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="69:9" pos:end="69:66"><expr pos:start="69:9" pos:end="69:65"><call pos:start="69:9" pos:end="69:65"><name pos:start="69:9" pos:end="69:24">qemu_sglist_init</name><argument_list pos:start="69:25" pos:end="69:65">(<argument pos:start="69:26" pos:end="69:31"><expr pos:start="69:26" pos:end="69:31"><name pos:start="69:26" pos:end="69:31">sglist</name></expr></argument>, <argument pos:start="69:34" pos:end="69:50"><expr pos:start="69:34" pos:end="69:50"><name pos:start="69:34" pos:end="69:50">sglist_alloc_hint</name></expr></argument>, <argument pos:start="69:53" pos:end="69:64"><expr pos:start="69:53" pos:end="69:64"><name pos:start="69:53" pos:end="69:64"><name pos:start="69:53" pos:end="69:54">ad</name><operator pos:start="69:55" pos:end="69:56">-&gt;</operator><name pos:start="69:57" pos:end="69:59">hba</name><operator pos:start="69:60" pos:end="69:61">-&gt;</operator><name pos:start="69:62" pos:end="69:64">dma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="71:9" pos:end="79:9">for <control pos:start="71:13" pos:end="71:47">(<init pos:start="71:14" pos:end="71:19"><expr pos:start="71:14" pos:end="71:18"><name pos:start="71:14" pos:end="71:14">i</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <literal type="number" pos:start="71:18" pos:end="71:18">0</literal></expr>;</init> <condition pos:start="71:21" pos:end="71:42"><expr pos:start="71:21" pos:end="71:41"><name pos:start="71:21" pos:end="71:21">i</name> <operator pos:start="71:23" pos:end="71:23">&lt;</operator> <name pos:start="71:25" pos:end="71:41">sglist_alloc_hint</name></expr>;</condition> <incr pos:start="71:44" pos:end="71:46"><expr pos:start="71:44" pos:end="71:46"><name pos:start="71:44" pos:end="71:44">i</name><operator pos:start="71:45" pos:end="71:46">++</operator></expr></incr>)</control> <block pos:start="71:49" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:64">

            <comment type="block" pos:start="73:13" pos:end="73:42">/* flags_size is zero-based */</comment>

            <expr_stmt pos:start="75:13" pos:end="77:64"><expr pos:start="75:13" pos:end="77:63"><call pos:start="75:13" pos:end="77:63"><name pos:start="75:13" pos:end="75:27">qemu_sglist_add</name><argument_list pos:start="75:28" pos:end="77:63">(<argument pos:start="75:29" pos:end="75:34"><expr pos:start="75:29" pos:end="75:34"><name pos:start="75:29" pos:end="75:34">sglist</name></expr></argument>, <argument pos:start="75:37" pos:end="75:60"><expr pos:start="75:37" pos:end="75:60"><call pos:start="75:37" pos:end="75:60"><name pos:start="75:37" pos:end="75:47">le64_to_cpu</name><argument_list pos:start="75:48" pos:end="75:60">(<argument pos:start="75:49" pos:end="75:59"><expr pos:start="75:49" pos:end="75:59"><name pos:start="75:49" pos:end="75:54"><name pos:start="75:49" pos:end="75:51">tbl</name><index pos:start="75:52" pos:end="75:54">[<expr pos:start="75:53" pos:end="75:53"><name pos:start="75:53" pos:end="75:53">i</name></expr>]</index></name><operator pos:start="75:55" pos:end="75:55">.</operator><name pos:start="75:56" pos:end="75:59">addr</name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="77:29" pos:end="77:62"><expr pos:start="77:29" pos:end="77:62"><call pos:start="77:29" pos:end="77:58"><name pos:start="77:29" pos:end="77:39">le32_to_cpu</name><argument_list pos:start="77:40" pos:end="77:58">(<argument pos:start="77:41" pos:end="77:57"><expr pos:start="77:41" pos:end="77:57"><name pos:start="77:41" pos:end="77:46"><name pos:start="77:41" pos:end="77:43">tbl</name><index pos:start="77:44" pos:end="77:46">[<expr pos:start="77:45" pos:end="77:45"><name pos:start="77:45" pos:end="77:45">i</name></expr>]</index></name><operator pos:start="77:47" pos:end="77:47">.</operator><name pos:start="77:48" pos:end="77:57">flags_size</name></expr></argument>)</argument_list></call> <operator pos:start="77:60" pos:end="77:60">+</operator> <literal type="number" pos:start="77:62" pos:end="77:62">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



<label pos:start="85:1" pos:end="85:4"><name pos:start="85:1" pos:end="85:3">out</name>:</label>

    <expr_stmt pos:start="87:5" pos:end="89:56"><expr pos:start="87:5" pos:end="89:55"><call pos:start="87:5" pos:end="89:55"><name pos:start="87:5" pos:end="87:20">dma_memory_unmap</name><argument_list pos:start="87:21" pos:end="89:55">(<argument pos:start="87:22" pos:end="87:33"><expr pos:start="87:22" pos:end="87:33"><name pos:start="87:22" pos:end="87:33"><name pos:start="87:22" pos:end="87:23">ad</name><operator pos:start="87:24" pos:end="87:25">-&gt;</operator><name pos:start="87:26" pos:end="87:28">hba</name><operator pos:start="87:29" pos:end="87:30">-&gt;</operator><name pos:start="87:31" pos:end="87:33">dma</name></name></expr></argument>, <argument pos:start="87:36" pos:end="87:39"><expr pos:start="87:36" pos:end="87:39"><name pos:start="87:36" pos:end="87:39">prdt</name></expr></argument>, <argument pos:start="87:42" pos:end="87:49"><expr pos:start="87:42" pos:end="87:49"><name pos:start="87:42" pos:end="87:49">prdt_len</name></expr></argument>,

                     <argument pos:start="89:22" pos:end="89:44"><expr pos:start="89:22" pos:end="89:44"><name pos:start="89:22" pos:end="89:44">DMA_DIRECTION_TO_DEVICE</name></expr></argument>, <argument pos:start="89:47" pos:end="89:54"><expr pos:start="89:47" pos:end="89:54"><name pos:start="89:47" pos:end="89:54">prdt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="91:5" pos:end="91:13">return <expr pos:start="91:12" pos:end="91:12"><name pos:start="91:12" pos:end="91:12">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
