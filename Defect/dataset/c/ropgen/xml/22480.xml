<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22480.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:8">unsigned</name> <name pos:start="1:10" pos:end="1:12">int</name></type> <name pos:start="1:14" pos:end="1:23">EmulateAll</name><parameter_list pos:start="1:24" pos:end="1:77">(<parameter pos:start="1:25" pos:end="1:43"><decl pos:start="1:25" pos:end="1:43"><type pos:start="1:25" pos:end="1:43"><name pos:start="1:25" pos:end="1:32">unsigned</name> <name pos:start="1:34" pos:end="1:36">int</name></type> <name pos:start="1:38" pos:end="1:43">opcode</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:56"><decl pos:start="1:46" pos:end="1:56"><type pos:start="1:46" pos:end="1:56"><name pos:start="1:46" pos:end="1:50">FPA11</name><modifier pos:start="1:51" pos:end="1:51">*</modifier></type> <name pos:start="1:53" pos:end="1:56">qfpa</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:76"><decl pos:start="1:59" pos:end="1:76"><type pos:start="1:59" pos:end="1:76"><name pos:start="1:59" pos:end="1:69">CPUARMState</name><modifier pos:start="1:70" pos:end="1:70">*</modifier></type> <name pos:start="1:72" pos:end="1:76">qregs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:3" pos:end="125:14">

  <decl_stmt pos:start="5:3" pos:end="5:23"><decl pos:start="5:3" pos:end="5:22"><type pos:start="5:3" pos:end="5:14"><name pos:start="5:3" pos:end="5:10">unsigned</name> <name pos:start="5:12" pos:end="5:14">int</name></type> <name pos:start="5:16" pos:end="5:18">nRc</name> <init pos:start="5:20" pos:end="5:22">= <expr pos:start="5:22" pos:end="5:22"><literal type="number" pos:start="5:22" pos:end="5:22">0</literal></expr></init></decl>;</decl_stmt>

<comment type="line" pos:start="7:1" pos:end="7:24">//  unsigned long flags;</comment>

  <decl_stmt pos:start="9:3" pos:end="9:15"><decl pos:start="9:3" pos:end="9:14"><type pos:start="9:3" pos:end="9:9"><name pos:start="9:3" pos:end="9:7">FPA11</name> <modifier pos:start="9:9" pos:end="9:9">*</modifier></type><name pos:start="9:10" pos:end="9:14">fpa11</name></decl>;</decl_stmt>

<comment type="line" pos:start="11:1" pos:end="11:29">//  save_flags(flags); sti();</comment>



  <expr_stmt pos:start="15:3" pos:end="15:15"><expr pos:start="15:3" pos:end="15:14"><name pos:start="15:3" pos:end="15:9">qemufpa</name><operator pos:start="15:10" pos:end="15:10">=</operator><name pos:start="15:11" pos:end="15:14">qfpa</name></expr>;</expr_stmt>

  <expr_stmt pos:start="17:3" pos:end="28:0"><expr pos:start="17:3" pos:end="17:22"><name pos:start="17:3" pos:end="17:16">user_registers</name><operator pos:start="17:17" pos:end="17:17">=</operator><name pos:start="17:18" pos:end="17:22">qregs</name></expr>;</expr_stmt>



<cpp:if pos:start="21:1" pos:end="21:5">#<cpp:directive pos:start="21:2" pos:end="21:3">if</cpp:directive> <expr pos:start="21:5" pos:end="21:5"><literal type="number" pos:start="21:5" pos:end="21:5">0</literal></expr></cpp:if>

  fprintf(stderr,"emulating FP insn 0x%08x, PC=0x%08x\n",

          opcode, qregs[REG_PC]);

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

  <expr_stmt pos:start="29:3" pos:end="29:22"><expr pos:start="29:3" pos:end="29:21"><name pos:start="29:3" pos:end="29:7">fpa11</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:21"><name pos:start="29:11" pos:end="29:19">GET_FPA11</name><argument_list pos:start="29:20" pos:end="29:21">()</argument_list></call></expr>;</expr_stmt>



  <if_stmt pos:start="33:3" pos:end="45:3"><if pos:start="33:3" pos:end="45:3">if <condition pos:start="33:6" pos:end="33:27">(<expr pos:start="33:7" pos:end="33:26"><name pos:start="33:7" pos:end="33:21"><name pos:start="33:7" pos:end="33:11">fpa11</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:21">initflag</name></name> <operator pos:start="33:23" pos:end="33:24">==</operator> <literal type="number" pos:start="33:26" pos:end="33:26">0</literal></expr>)</condition>		<comment type="block" pos:start="33:41" pos:end="33:77">/* good place for __builtin_expect */</comment>

  <block pos:start="35:3" pos:end="45:3">{<block_content pos:start="37:5" pos:end="43:24">

    <expr_stmt pos:start="37:5" pos:end="37:17"><expr pos:start="37:5" pos:end="37:16"><call pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:14">resetFPA11</name><argument_list pos:start="37:15" pos:end="37:16">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><call pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:19">SetRoundingMode</name><argument_list pos:start="39:20" pos:end="39:37">(<argument pos:start="39:21" pos:end="39:36"><expr pos:start="39:21" pos:end="39:36"><name pos:start="39:21" pos:end="39:36">ROUND_TO_NEAREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:41"><expr pos:start="41:5" pos:end="41:40"><call pos:start="41:5" pos:end="41:40"><name pos:start="41:5" pos:end="41:24">SetRoundingPrecision</name><argument_list pos:start="41:25" pos:end="41:40">(<argument pos:start="41:26" pos:end="41:39"><expr pos:start="41:26" pos:end="41:39"><name pos:start="41:26" pos:end="41:39">ROUND_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:24"><expr pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:9">fpa11</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:19">initflag</name></name> <operator pos:start="43:21" pos:end="43:21">=</operator> <literal type="number" pos:start="43:23" pos:end="43:23">1</literal></expr>;</expr_stmt>

  </block_content>}</block></if></if_stmt>



  <expr_stmt pos:start="49:3" pos:end="49:50"><expr pos:start="49:3" pos:end="49:49"><call pos:start="49:3" pos:end="49:49"><name pos:start="49:3" pos:end="49:27">set_float_exception_flags</name><argument_list pos:start="49:28" pos:end="49:49">(<argument pos:start="49:29" pos:end="49:29"><expr pos:start="49:29" pos:end="49:29"><literal type="number" pos:start="49:29" pos:end="49:29">0</literal></expr></argument>, <argument pos:start="49:32" pos:end="49:48"><expr pos:start="49:32" pos:end="49:48"><operator pos:start="49:32" pos:end="49:32">&amp;</operator><name pos:start="49:33" pos:end="49:48"><name pos:start="49:33" pos:end="49:37">fpa11</name><operator pos:start="49:38" pos:end="49:39">-&gt;</operator><name pos:start="49:40" pos:end="49:48">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



  <if_stmt pos:start="53:3" pos:end="105:3"><if pos:start="53:3" pos:end="67:3">if <condition pos:start="53:6" pos:end="53:36">(<expr pos:start="53:7" pos:end="53:35"><call pos:start="53:7" pos:end="53:35"><name pos:start="53:7" pos:end="53:17">TEST_OPCODE</name><argument_list pos:start="53:18" pos:end="53:35">(<argument pos:start="53:19" pos:end="53:24"><expr pos:start="53:19" pos:end="53:24"><name pos:start="53:19" pos:end="53:24">opcode</name></expr></argument>,<argument pos:start="53:26" pos:end="53:34"><expr pos:start="53:26" pos:end="53:34"><name pos:start="53:26" pos:end="53:34">MASK_CPRT</name></expr></argument>)</argument_list></call></expr>)</condition>

  <block pos:start="55:3" pos:end="67:3">{<block_content pos:start="65:5" pos:end="65:30">

    <comment type="line" pos:start="57:5" pos:end="57:41">//fprintf(stderr,"emulating CPRT\n");</comment>

    <comment type="block" pos:start="59:5" pos:end="59:37">/* Emulate conversion opcodes. */</comment>

    <comment type="block" pos:start="61:5" pos:end="61:44">/* Emulate register transfer opcodes. */</comment>

    <comment type="block" pos:start="63:5" pos:end="63:37">/* Emulate comparison opcodes. */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:30"><expr pos:start="65:5" pos:end="65:29"><name pos:start="65:5" pos:end="65:7">nRc</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:29"><name pos:start="65:11" pos:end="65:21">EmulateCPRT</name><argument_list pos:start="65:22" pos:end="65:29">(<argument pos:start="65:23" pos:end="65:28"><expr pos:start="65:23" pos:end="65:28"><name pos:start="65:23" pos:end="65:28">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if>

  <if type="elseif" pos:start="69:3" pos:end="81:3">else if <condition pos:start="69:11" pos:end="69:41">(<expr pos:start="69:12" pos:end="69:40"><call pos:start="69:12" pos:end="69:40"><name pos:start="69:12" pos:end="69:22">TEST_OPCODE</name><argument_list pos:start="69:23" pos:end="69:40">(<argument pos:start="69:24" pos:end="69:29"><expr pos:start="69:24" pos:end="69:29"><name pos:start="69:24" pos:end="69:29">opcode</name></expr></argument>,<argument pos:start="69:31" pos:end="69:39"><expr pos:start="69:31" pos:end="69:39"><name pos:start="69:31" pos:end="69:39">MASK_CPDO</name></expr></argument>)</argument_list></call></expr>)</condition>

  <block pos:start="71:3" pos:end="81:3">{<block_content pos:start="79:5" pos:end="79:30">

    <comment type="line" pos:start="73:5" pos:end="73:41">//fprintf(stderr,"emulating CPDO\n");</comment>

    <comment type="block" pos:start="75:5" pos:end="75:45">/* Emulate monadic arithmetic opcodes. */</comment>

    <comment type="block" pos:start="77:5" pos:end="77:44">/* Emulate dyadic arithmetic opcodes. */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:30"><expr pos:start="79:5" pos:end="79:29"><name pos:start="79:5" pos:end="79:7">nRc</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="79:29"><name pos:start="79:11" pos:end="79:21">EmulateCPDO</name><argument_list pos:start="79:22" pos:end="79:29">(<argument pos:start="79:23" pos:end="79:28"><expr pos:start="79:23" pos:end="79:28"><name pos:start="79:23" pos:end="79:28">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if>

  <if type="elseif" pos:start="83:3" pos:end="95:3">else if <condition pos:start="83:11" pos:end="83:41">(<expr pos:start="83:12" pos:end="83:40"><call pos:start="83:12" pos:end="83:40"><name pos:start="83:12" pos:end="83:22">TEST_OPCODE</name><argument_list pos:start="83:23" pos:end="83:40">(<argument pos:start="83:24" pos:end="83:29"><expr pos:start="83:24" pos:end="83:29"><name pos:start="83:24" pos:end="83:29">opcode</name></expr></argument>,<argument pos:start="83:31" pos:end="83:39"><expr pos:start="83:31" pos:end="83:39"><name pos:start="83:31" pos:end="83:39">MASK_CPDT</name></expr></argument>)</argument_list></call></expr>)</condition>

  <block pos:start="85:3" pos:end="95:3">{<block_content pos:start="93:5" pos:end="93:30">

    <comment type="line" pos:start="87:5" pos:end="87:41">//fprintf(stderr,"emulating CPDT\n");</comment>

    <comment type="block" pos:start="89:5" pos:end="89:37">/* Emulate load/store opcodes. */</comment>

    <comment type="block" pos:start="91:5" pos:end="91:46">/* Emulate load/store multiple opcodes. */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:30"><expr pos:start="93:5" pos:end="93:29"><name pos:start="93:5" pos:end="93:7">nRc</name> <operator pos:start="93:9" pos:end="93:9">=</operator> <call pos:start="93:11" pos:end="93:29"><name pos:start="93:11" pos:end="93:21">EmulateCPDT</name><argument_list pos:start="93:22" pos:end="93:29">(<argument pos:start="93:23" pos:end="93:28"><expr pos:start="93:23" pos:end="93:28"><name pos:start="93:23" pos:end="93:28">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if>

  <else pos:start="97:3" pos:end="105:3">else

  <block pos:start="99:3" pos:end="105:3">{<block_content pos:start="103:5" pos:end="103:12">

    <comment type="block" pos:start="101:5" pos:end="101:54">/* Invalid instruction detected.  Return FALSE. */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:12"><expr pos:start="103:5" pos:end="103:11"><name pos:start="103:5" pos:end="103:7">nRc</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <literal type="number" pos:start="103:11" pos:end="103:11">0</literal></expr>;</expr_stmt>

  </block_content>}</block></else></if_stmt>



<comment type="line" pos:start="109:1" pos:end="109:25">//  restore_flags(flags);</comment>

  <if_stmt pos:start="111:3" pos:end="119:3"><if pos:start="111:3" pos:end="119:3">if<condition pos:start="111:5" pos:end="111:62">(<expr pos:start="111:6" pos:end="111:61"><name pos:start="111:6" pos:end="111:8">nRc</name> <operator pos:start="111:10" pos:end="111:11">==</operator> <literal type="number" pos:start="111:13" pos:end="111:13">1</literal> <operator pos:start="111:15" pos:end="111:16">&amp;&amp;</operator> <call pos:start="111:18" pos:end="111:61"><name pos:start="111:18" pos:end="111:42">get_float_exception_flags</name><argument_list pos:start="111:43" pos:end="111:61">(<argument pos:start="111:44" pos:end="111:60"><expr pos:start="111:44" pos:end="111:60"><operator pos:start="111:44" pos:end="111:44">&amp;</operator><name pos:start="111:45" pos:end="111:60"><name pos:start="111:45" pos:end="111:49">fpa11</name><operator pos:start="111:50" pos:end="111:51">-&gt;</operator><name pos:start="111:52" pos:end="111:60">fp_status</name></name></expr></argument>)</argument_list></call></expr>)</condition>

  <block pos:start="113:3" pos:end="119:3">{<block_content pos:start="117:5" pos:end="117:56">

    <comment type="line" pos:start="115:5" pos:end="115:49">//printf("fef 0x%x\n",float_exception_flags);</comment>

    <expr_stmt pos:start="117:5" pos:end="117:56"><expr pos:start="117:5" pos:end="117:55"><name pos:start="117:5" pos:end="117:7">nRc</name> <operator pos:start="117:9" pos:end="117:10">-=</operator> <call pos:start="117:12" pos:end="117:55"><name pos:start="117:12" pos:end="117:36">get_float_exception_flags</name><argument_list pos:start="117:37" pos:end="117:55">(<argument pos:start="117:38" pos:end="117:54"><expr pos:start="117:38" pos:end="117:54"><operator pos:start="117:38" pos:end="117:38">&amp;</operator><name pos:start="117:39" pos:end="117:54"><name pos:start="117:39" pos:end="117:43">fpa11</name><operator pos:start="117:44" pos:end="117:45">-&gt;</operator><name pos:start="117:46" pos:end="117:54">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  </block_content>}</block></if></if_stmt>



  <comment type="line" pos:start="123:3" pos:end="123:33">//printf("returning %d\n",nRc);</comment>

  <return pos:start="125:3" pos:end="125:14">return<expr pos:start="125:9" pos:end="125:13"><operator pos:start="125:9" pos:end="125:9">(</operator><name pos:start="125:10" pos:end="125:12">nRc</name><operator pos:start="125:13" pos:end="125:13">)</operator></expr>;</return>

</block_content>}</block></function>
</unit>
