<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13162.c" pos:tabs="8"><function pos:start="1:1" pos:end="175:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">always_inline</name> <name pos:start="1:22" pos:end="1:24">int</name></type> <name pos:start="1:26" pos:end="1:34">_find_pte</name> <parameter_list pos:start="1:36" pos:end="1:78">(<parameter pos:start="1:37" pos:end="1:50"><decl pos:start="1:37" pos:end="1:50"><type pos:start="1:37" pos:end="1:50"><name pos:start="1:37" pos:end="1:45">mmu_ctx_t</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">ctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:62">is_64b</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:69"><decl pos:start="1:65" pos:end="1:69"><type pos:start="1:65" pos:end="1:69"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:69">h</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:77"><decl pos:start="1:72" pos:end="1:77"><type pos:start="1:72" pos:end="1:77"><name pos:start="1:72" pos:end="1:74">int</name></type> <name pos:start="1:76" pos:end="1:77">rw</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="175:1">{<block_content pos:start="5:5" pos:end="173:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">target_ulong</name></type> <name pos:start="5:18" pos:end="5:21">base</name></decl>, <decl pos:start="5:24" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:24" pos:end="5:27">pte0</name></decl>, <decl pos:start="5:30" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:16"/><name pos:start="5:30" pos:end="5:33">pte1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:15">good</name> <init pos:start="7:17" pos:end="7:20">= <expr pos:start="7:19" pos:end="7:20"><operator pos:start="7:19" pos:end="7:19">-</operator><literal type="number" pos:start="7:20" pos:end="7:20">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:14">r</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:13"><expr pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <operator pos:start="13:11" pos:end="13:11">-</operator><literal type="number" pos:start="13:12" pos:end="13:12">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="13:15" pos:end="13:34">/* No entry found */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:27"><expr pos:start="15:5" pos:end="15:26"><name pos:start="15:5" pos:end="15:8">base</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <name pos:start="15:12" pos:end="15:26"><name pos:start="15:12" pos:end="15:14">ctx</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:23">pg_addr</name><index pos:start="15:24" pos:end="15:26">[<expr pos:start="15:25" pos:end="15:25"><name pos:start="15:25" pos:end="15:25">h</name></expr>]</index></name></expr>;</expr_stmt>

    <for pos:start="17:5" pos:end="125:5">for <control pos:start="17:9" pos:end="17:27">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:22"><expr pos:start="17:17" pos:end="17:21"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <literal type="number" pos:start="17:21" pos:end="17:21">8</literal></expr>;</condition> <incr pos:start="17:24" pos:end="17:26"><expr pos:start="17:24" pos:end="17:26"><name pos:start="17:24" pos:end="17:24">i</name><operator pos:start="17:25" pos:end="17:26">++</operator></expr></incr>)</control> <block pos:start="17:29" pos:end="125:5">{<block_content pos:start="21:9" pos:end="123:9">

<cpp:if pos:start="19:1" pos:end="19:25">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:25"><call pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:11">defined</name><argument_list pos:start="19:12" pos:end="19:25">(<argument pos:start="19:13" pos:end="19:24"><expr pos:start="19:13" pos:end="19:24"><name pos:start="19:13" pos:end="19:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="21:9" pos:end="77:9"><if pos:start="21:9" pos:end="47:9">if <condition pos:start="21:12" pos:end="21:19">(<expr pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:18">is_64b</name></expr>)</condition> <block pos:start="21:21" pos:end="47:9">{<block_content pos:start="23:13" pos:end="46:0">

            <expr_stmt pos:start="23:13" pos:end="23:45"><expr pos:start="23:13" pos:end="23:44"><name pos:start="23:13" pos:end="23:16">pte0</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <call pos:start="23:20" pos:end="23:44"><name pos:start="23:20" pos:end="23:27">ldq_phys</name><argument_list pos:start="23:28" pos:end="23:44">(<argument pos:start="23:29" pos:end="23:43"><expr pos:start="23:29" pos:end="23:43"><name pos:start="23:29" pos:end="23:32">base</name> <operator pos:start="23:34" pos:end="23:34">+</operator> <operator pos:start="23:36" pos:end="23:36">(</operator><name pos:start="23:37" pos:end="23:37">i</name> <operator pos:start="23:39" pos:end="23:39">*</operator> <literal type="number" pos:start="23:41" pos:end="23:42">16</literal><operator pos:start="23:43" pos:end="23:43">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:50"><expr pos:start="25:13" pos:end="25:49"><name pos:start="25:13" pos:end="25:16">pte1</name> <operator pos:start="25:18" pos:end="25:18">=</operator>  <call pos:start="25:21" pos:end="25:49"><name pos:start="25:21" pos:end="25:28">ldq_phys</name><argument_list pos:start="25:29" pos:end="25:49">(<argument pos:start="25:30" pos:end="25:48"><expr pos:start="25:30" pos:end="25:48"><name pos:start="25:30" pos:end="25:33">base</name> <operator pos:start="25:35" pos:end="25:35">+</operator> <operator pos:start="25:37" pos:end="25:37">(</operator><name pos:start="25:38" pos:end="25:38">i</name> <operator pos:start="25:40" pos:end="25:40">*</operator> <literal type="number" pos:start="25:42" pos:end="25:43">16</literal><operator pos:start="25:44" pos:end="25:44">)</operator> <operator pos:start="25:46" pos:end="25:46">+</operator> <literal type="number" pos:start="25:48" pos:end="25:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="30:0"><expr pos:start="27:13" pos:end="27:51"><name pos:start="27:13" pos:end="27:13">r</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:51"><name pos:start="27:17" pos:end="27:27">pte64_check</name><argument_list pos:start="27:28" pos:end="27:51">(<argument pos:start="27:29" pos:end="27:31"><expr pos:start="27:29" pos:end="27:31"><name pos:start="27:29" pos:end="27:31">ctx</name></expr></argument>, <argument pos:start="27:34" pos:end="27:37"><expr pos:start="27:34" pos:end="27:37"><name pos:start="27:34" pos:end="27:37">pte0</name></expr></argument>, <argument pos:start="27:40" pos:end="27:43"><expr pos:start="27:40" pos:end="27:43"><name pos:start="27:40" pos:end="27:43">pte1</name></expr></argument>, <argument pos:start="27:46" pos:end="27:46"><expr pos:start="27:46" pos:end="27:46"><name pos:start="27:46" pos:end="27:46">h</name></expr></argument>, <argument pos:start="27:49" pos:end="27:50"><expr pos:start="27:49" pos:end="27:50"><name pos:start="27:49" pos:end="27:50">rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="29:1" pos:end="29:23">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:23"><call pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:11">defined</name> <argument_list pos:start="29:13" pos:end="29:23">(<argument pos:start="29:14" pos:end="29:22"><expr pos:start="29:14" pos:end="29:22"><name pos:start="29:14" pos:end="29:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="31:13" pos:end="46:0"><if pos:start="31:13" pos:end="46:0">if <condition pos:start="31:16" pos:end="31:30">(<expr pos:start="31:17" pos:end="31:29"><name pos:start="31:17" pos:end="31:24">loglevel</name> <operator pos:start="31:26" pos:end="31:27">!=</operator> <literal type="number" pos:start="31:29" pos:end="31:29">0</literal></expr>)</condition> <block pos:start="31:32" pos:end="46:0">{<block_content pos:start="33:17" pos:end="41:35">

                <expr_stmt pos:start="33:17" pos:end="41:35"><expr pos:start="33:17" pos:end="41:34"><call pos:start="33:17" pos:end="41:34"><name pos:start="33:17" pos:end="33:23">fprintf</name><argument_list pos:start="33:24" pos:end="41:34">(<argument pos:start="33:25" pos:end="33:31"><expr pos:start="33:25" pos:end="33:31"><name pos:start="33:25" pos:end="33:31">logfile</name></expr></argument>, <argument pos:start="33:34" pos:end="35:61"><expr pos:start="33:34" pos:end="35:61"><literal type="string" pos:start="33:34" pos:end="33:51">"Load pte from 0x"</literal> <name pos:start="33:53" pos:end="33:57">ADDRX</name> <literal type="string" pos:start="33:59" pos:end="33:66">" =&gt; 0x"</literal> <name pos:start="33:68" pos:end="33:72">ADDRX</name>

                        <literal type="string" pos:start="35:25" pos:end="35:29">" 0x"</literal> <name pos:start="35:31" pos:end="35:35">ADDRX</name> <literal type="string" pos:start="35:37" pos:end="35:50">" %d %d %d 0x"</literal> <name pos:start="35:52" pos:end="35:56">ADDRX</name> <literal type="string" pos:start="35:58" pos:end="35:61">"\n"</literal></expr></argument>,

                        <argument pos:start="37:25" pos:end="37:39"><expr pos:start="37:25" pos:end="37:39"><name pos:start="37:25" pos:end="37:28">base</name> <operator pos:start="37:30" pos:end="37:30">+</operator> <operator pos:start="37:32" pos:end="37:32">(</operator><name pos:start="37:33" pos:end="37:33">i</name> <operator pos:start="37:35" pos:end="37:35">*</operator> <literal type="number" pos:start="37:37" pos:end="37:38">16</literal><operator pos:start="37:39" pos:end="37:39">)</operator></expr></argument>, <argument pos:start="37:42" pos:end="37:45"><expr pos:start="37:42" pos:end="37:45"><name pos:start="37:42" pos:end="37:45">pte0</name></expr></argument>, <argument pos:start="37:48" pos:end="37:51"><expr pos:start="37:48" pos:end="37:51"><name pos:start="37:48" pos:end="37:51">pte1</name></expr></argument>,

                        <argument pos:start="39:25" pos:end="39:39"><expr pos:start="39:25" pos:end="39:39"><operator pos:start="39:25" pos:end="39:25">(</operator><name pos:start="39:26" pos:end="39:28">int</name><operator pos:start="39:29" pos:end="39:29">)</operator><operator pos:start="39:30" pos:end="39:30">(</operator><name pos:start="39:31" pos:end="39:34">pte0</name> <operator pos:start="39:36" pos:end="39:36">&amp;</operator> <literal type="number" pos:start="39:38" pos:end="39:38">1</literal><operator pos:start="39:39" pos:end="39:39">)</operator></expr></argument>, <argument pos:start="39:42" pos:end="39:42"><expr pos:start="39:42" pos:end="39:42"><name pos:start="39:42" pos:end="39:42">h</name></expr></argument>, <argument pos:start="39:45" pos:end="39:66"><expr pos:start="39:45" pos:end="39:66"><operator pos:start="39:45" pos:end="39:45">(</operator><name pos:start="39:46" pos:end="39:48">int</name><operator pos:start="39:49" pos:end="39:49">)</operator><operator pos:start="39:50" pos:end="39:50">(</operator><operator pos:start="39:51" pos:end="39:51">(</operator><name pos:start="39:52" pos:end="39:55">pte0</name> <operator pos:start="39:57" pos:end="39:58">&gt;&gt;</operator> <literal type="number" pos:start="39:60" pos:end="39:60">1</literal><operator pos:start="39:61" pos:end="39:61">)</operator> <operator pos:start="39:63" pos:end="39:63">&amp;</operator> <literal type="number" pos:start="39:65" pos:end="39:65">1</literal><operator pos:start="39:66" pos:end="39:66">)</operator></expr></argument>,

                        <argument pos:start="41:25" pos:end="41:33"><expr pos:start="41:25" pos:end="41:33"><name pos:start="41:25" pos:end="41:33"><name pos:start="41:25" pos:end="41:27">ctx</name><operator pos:start="41:28" pos:end="41:29">-&gt;</operator><name pos:start="41:30" pos:end="41:33">ptem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="47:11" pos:end="77:9">else

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

        <block pos:start="51:9" pos:end="77:9">{<block_content pos:start="53:13" pos:end="76:0">

            <expr_stmt pos:start="53:13" pos:end="53:44"><expr pos:start="53:13" pos:end="53:43"><name pos:start="53:13" pos:end="53:16">pte0</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <call pos:start="53:20" pos:end="53:43"><name pos:start="53:20" pos:end="53:27">ldl_phys</name><argument_list pos:start="53:28" pos:end="53:43">(<argument pos:start="53:29" pos:end="53:42"><expr pos:start="53:29" pos:end="53:42"><name pos:start="53:29" pos:end="53:32">base</name> <operator pos:start="53:34" pos:end="53:34">+</operator> <operator pos:start="53:36" pos:end="53:36">(</operator><name pos:start="53:37" pos:end="53:37">i</name> <operator pos:start="53:39" pos:end="53:39">*</operator> <literal type="number" pos:start="53:41" pos:end="53:41">8</literal><operator pos:start="53:42" pos:end="53:42">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:49"><expr pos:start="55:13" pos:end="55:48"><name pos:start="55:13" pos:end="55:16">pte1</name> <operator pos:start="55:18" pos:end="55:18">=</operator>  <call pos:start="55:21" pos:end="55:48"><name pos:start="55:21" pos:end="55:28">ldl_phys</name><argument_list pos:start="55:29" pos:end="55:48">(<argument pos:start="55:30" pos:end="55:47"><expr pos:start="55:30" pos:end="55:47"><name pos:start="55:30" pos:end="55:33">base</name> <operator pos:start="55:35" pos:end="55:35">+</operator> <operator pos:start="55:37" pos:end="55:37">(</operator><name pos:start="55:38" pos:end="55:38">i</name> <operator pos:start="55:40" pos:end="55:40">*</operator> <literal type="number" pos:start="55:42" pos:end="55:42">8</literal><operator pos:start="55:43" pos:end="55:43">)</operator> <operator pos:start="55:45" pos:end="55:45">+</operator> <literal type="number" pos:start="55:47" pos:end="55:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="60:0"><expr pos:start="57:13" pos:end="57:51"><name pos:start="57:13" pos:end="57:13">r</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <call pos:start="57:17" pos:end="57:51"><name pos:start="57:17" pos:end="57:27">pte32_check</name><argument_list pos:start="57:28" pos:end="57:51">(<argument pos:start="57:29" pos:end="57:31"><expr pos:start="57:29" pos:end="57:31"><name pos:start="57:29" pos:end="57:31">ctx</name></expr></argument>, <argument pos:start="57:34" pos:end="57:37"><expr pos:start="57:34" pos:end="57:37"><name pos:start="57:34" pos:end="57:37">pte0</name></expr></argument>, <argument pos:start="57:40" pos:end="57:43"><expr pos:start="57:40" pos:end="57:43"><name pos:start="57:40" pos:end="57:43">pte1</name></expr></argument>, <argument pos:start="57:46" pos:end="57:46"><expr pos:start="57:46" pos:end="57:46"><name pos:start="57:46" pos:end="57:46">h</name></expr></argument>, <argument pos:start="57:49" pos:end="57:50"><expr pos:start="57:49" pos:end="57:50"><name pos:start="57:49" pos:end="57:50">rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="59:1" pos:end="59:23">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:23"><call pos:start="59:5" pos:end="59:23"><name pos:start="59:5" pos:end="59:11">defined</name> <argument_list pos:start="59:13" pos:end="59:23">(<argument pos:start="59:14" pos:end="59:22"><expr pos:start="59:14" pos:end="59:22"><name pos:start="59:14" pos:end="59:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="61:13" pos:end="76:0"><if pos:start="61:13" pos:end="76:0">if <condition pos:start="61:16" pos:end="61:30">(<expr pos:start="61:17" pos:end="61:29"><name pos:start="61:17" pos:end="61:24">loglevel</name> <operator pos:start="61:26" pos:end="61:27">!=</operator> <literal type="number" pos:start="61:29" pos:end="61:29">0</literal></expr>)</condition> <block pos:start="61:32" pos:end="76:0">{<block_content pos:start="63:17" pos:end="71:35">

                <expr_stmt pos:start="63:17" pos:end="71:35"><expr pos:start="63:17" pos:end="71:34"><call pos:start="63:17" pos:end="71:34"><name pos:start="63:17" pos:end="63:23">fprintf</name><argument_list pos:start="63:24" pos:end="71:34">(<argument pos:start="63:25" pos:end="63:31"><expr pos:start="63:25" pos:end="63:31"><name pos:start="63:25" pos:end="63:31">logfile</name></expr></argument>, <argument pos:start="63:34" pos:end="65:61"><expr pos:start="63:34" pos:end="65:61"><literal type="string" pos:start="63:34" pos:end="63:51">"Load pte from 0x"</literal> <name pos:start="63:53" pos:end="63:57">ADDRX</name> <literal type="string" pos:start="63:59" pos:end="63:66">" =&gt; 0x"</literal> <name pos:start="63:68" pos:end="63:72">ADDRX</name>

                        <literal type="string" pos:start="65:25" pos:end="65:29">" 0x"</literal> <name pos:start="65:31" pos:end="65:35">ADDRX</name> <literal type="string" pos:start="65:37" pos:end="65:50">" %d %d %d 0x"</literal> <name pos:start="65:52" pos:end="65:56">ADDRX</name> <literal type="string" pos:start="65:58" pos:end="65:61">"\n"</literal></expr></argument>,

                        <argument pos:start="67:25" pos:end="67:38"><expr pos:start="67:25" pos:end="67:38"><name pos:start="67:25" pos:end="67:28">base</name> <operator pos:start="67:30" pos:end="67:30">+</operator> <operator pos:start="67:32" pos:end="67:32">(</operator><name pos:start="67:33" pos:end="67:33">i</name> <operator pos:start="67:35" pos:end="67:35">*</operator> <literal type="number" pos:start="67:37" pos:end="67:37">8</literal><operator pos:start="67:38" pos:end="67:38">)</operator></expr></argument>, <argument pos:start="67:41" pos:end="67:44"><expr pos:start="67:41" pos:end="67:44"><name pos:start="67:41" pos:end="67:44">pte0</name></expr></argument>, <argument pos:start="67:47" pos:end="67:50"><expr pos:start="67:47" pos:end="67:50"><name pos:start="67:47" pos:end="67:50">pte1</name></expr></argument>,

                        <argument pos:start="69:25" pos:end="69:41"><expr pos:start="69:25" pos:end="69:41"><operator pos:start="69:25" pos:end="69:25">(</operator><name pos:start="69:26" pos:end="69:28">int</name><operator pos:start="69:29" pos:end="69:29">)</operator><operator pos:start="69:30" pos:end="69:30">(</operator><name pos:start="69:31" pos:end="69:34">pte0</name> <operator pos:start="69:36" pos:end="69:37">&gt;&gt;</operator> <literal type="number" pos:start="69:39" pos:end="69:40">31</literal><operator pos:start="69:41" pos:end="69:41">)</operator></expr></argument>, <argument pos:start="69:44" pos:end="69:44"><expr pos:start="69:44" pos:end="69:44"><name pos:start="69:44" pos:end="69:44">h</name></expr></argument>, <argument pos:start="69:47" pos:end="69:68"><expr pos:start="69:47" pos:end="69:68"><operator pos:start="69:47" pos:end="69:47">(</operator><name pos:start="69:48" pos:end="69:50">int</name><operator pos:start="69:51" pos:end="69:51">)</operator><operator pos:start="69:52" pos:end="69:52">(</operator><operator pos:start="69:53" pos:end="69:53">(</operator><name pos:start="69:54" pos:end="69:57">pte0</name> <operator pos:start="69:59" pos:end="69:60">&gt;&gt;</operator> <literal type="number" pos:start="69:62" pos:end="69:62">6</literal><operator pos:start="69:63" pos:end="69:63">)</operator> <operator pos:start="69:65" pos:end="69:65">&amp;</operator> <literal type="number" pos:start="69:67" pos:end="69:67">1</literal><operator pos:start="69:68" pos:end="69:68">)</operator></expr></argument>,

                        <argument pos:start="71:25" pos:end="71:33"><expr pos:start="71:25" pos:end="71:33"><name pos:start="71:25" pos:end="71:33"><name pos:start="71:25" pos:end="71:27">ctx</name><operator pos:start="71:28" pos:end="71:29">-&gt;</operator><name pos:start="71:30" pos:end="71:33">ptem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></else></if_stmt>

        <switch pos:start="79:9" pos:end="123:9">switch <condition pos:start="79:16" pos:end="79:18">(<expr pos:start="79:17" pos:end="79:17"><name pos:start="79:17" pos:end="79:17">r</name></expr>)</condition> <block pos:start="79:20" pos:end="123:9">{<block_content pos:start="81:9" pos:end="121:22">

        <case pos:start="81:9" pos:end="81:16">case <expr pos:start="81:14" pos:end="81:15"><operator pos:start="81:14" pos:end="81:14">-</operator><literal type="number" pos:start="81:15" pos:end="81:15">3</literal></expr>:</case>

            <comment type="block" pos:start="83:13" pos:end="83:35">/* PTE inconsistency */</comment>

            <return pos:start="85:13" pos:end="85:22">return <expr pos:start="85:20" pos:end="85:21"><operator pos:start="85:20" pos:end="85:20">-</operator><literal type="number" pos:start="85:21" pos:end="85:21">1</literal></expr>;</return>

        <case pos:start="87:9" pos:end="87:16">case <expr pos:start="87:14" pos:end="87:15"><operator pos:start="87:14" pos:end="87:14">-</operator><literal type="number" pos:start="87:15" pos:end="87:15">2</literal></expr>:</case>

            <comment type="block" pos:start="89:13" pos:end="89:34">/* Access violation */</comment>

            <expr_stmt pos:start="91:13" pos:end="91:21"><expr pos:start="91:13" pos:end="91:20"><name pos:start="91:13" pos:end="91:15">ret</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <operator pos:start="91:19" pos:end="91:19">-</operator><literal type="number" pos:start="91:20" pos:end="91:20">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:21"><expr pos:start="93:13" pos:end="93:20"><name pos:start="93:13" pos:end="93:16">good</name> <operator pos:start="93:18" pos:end="93:18">=</operator> <name pos:start="93:20" pos:end="93:20">i</name></expr>;</expr_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>

        <case pos:start="97:9" pos:end="97:16">case <expr pos:start="97:14" pos:end="97:15"><operator pos:start="97:14" pos:end="97:14">-</operator><literal type="number" pos:start="97:15" pos:end="97:15">1</literal></expr>:</case>

        <default pos:start="99:9" pos:end="99:16">default:</default>

            <comment type="block" pos:start="101:13" pos:end="101:30">/* No PTE match */</comment>

            <break pos:start="103:13" pos:end="103:18">break;</break>

        <case pos:start="105:9" pos:end="105:15">case <expr pos:start="105:14" pos:end="105:14"><literal type="number" pos:start="105:14" pos:end="105:14">0</literal></expr>:</case>

            <comment type="block" pos:start="107:13" pos:end="107:32">/* access granted */</comment>

            <comment type="block" pos:start="109:13" pos:end="115:15">/* XXX: we should go on looping to check all PTEs consistency

             *      but if we can speed-up the whole thing as the

             *      result would be undefined if PTEs are not consistent.

             */</comment>

            <expr_stmt pos:start="117:13" pos:end="117:20"><expr pos:start="117:13" pos:end="117:19"><name pos:start="117:13" pos:end="117:15">ret</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <literal type="number" pos:start="117:19" pos:end="117:19">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:21"><expr pos:start="119:13" pos:end="119:20"><name pos:start="119:13" pos:end="119:16">good</name> <operator pos:start="119:18" pos:end="119:18">=</operator> <name pos:start="119:20" pos:end="119:20">i</name></expr>;</expr_stmt>

            <goto pos:start="121:13" pos:end="121:22">goto <name pos:start="121:18" pos:end="121:21">done</name>;</goto>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <if_stmt pos:start="127:5" pos:end="169:5"><if pos:start="127:5" pos:end="169:5">if <condition pos:start="127:8" pos:end="127:19">(<expr pos:start="127:9" pos:end="127:18"><name pos:start="127:9" pos:end="127:12">good</name> <operator pos:start="127:14" pos:end="127:15">!=</operator> <operator pos:start="127:17" pos:end="127:17">-</operator><literal type="number" pos:start="127:18" pos:end="127:18">1</literal></expr>)</condition> <block pos:start="127:21" pos:end="169:5">{<block_content pos:start="129:5" pos:end="167:9">

    <label pos:start="129:5" pos:end="132:0"><name pos:start="129:5" pos:end="129:8">done</name>:</label>

<cpp:if pos:start="131:1" pos:end="131:23">#<cpp:directive pos:start="131:2" pos:end="131:3">if</cpp:directive> <expr pos:start="131:5" pos:end="131:23"><call pos:start="131:5" pos:end="131:23"><name pos:start="131:5" pos:end="131:11">defined</name> <argument_list pos:start="131:13" pos:end="131:23">(<argument pos:start="131:14" pos:end="131:22"><expr pos:start="131:14" pos:end="131:22"><name pos:start="131:14" pos:end="131:22">DEBUG_MMU</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="133:9" pos:end="144:0"><if pos:start="133:9" pos:end="144:0">if <condition pos:start="133:12" pos:end="133:26">(<expr pos:start="133:13" pos:end="133:25"><name pos:start="133:13" pos:end="133:20">loglevel</name> <operator pos:start="133:22" pos:end="133:23">!=</operator> <literal type="number" pos:start="133:25" pos:end="133:25">0</literal></expr>)</condition> <block pos:start="133:28" pos:end="144:0">{<block_content pos:start="135:13" pos:end="139:48">

            <expr_stmt pos:start="135:13" pos:end="139:48"><expr pos:start="135:13" pos:end="139:47"><call pos:start="135:13" pos:end="139:47"><name pos:start="135:13" pos:end="135:19">fprintf</name><argument_list pos:start="135:20" pos:end="139:47">(<argument pos:start="135:21" pos:end="135:27"><expr pos:start="135:21" pos:end="135:27"><name pos:start="135:21" pos:end="135:27">logfile</name></expr></argument>, <argument pos:start="135:30" pos:end="137:30"><expr pos:start="135:30" pos:end="137:30"><literal type="string" pos:start="135:30" pos:end="135:51">"found PTE at addr 0x"</literal> <name pos:start="135:53" pos:end="135:58">PADDRX</name> <literal type="string" pos:start="135:60" pos:end="135:74">" prot=0x%01x "</literal>

                    <literal type="string" pos:start="137:21" pos:end="137:30">"ret=%d\n"</literal></expr></argument>,

                    <argument pos:start="139:21" pos:end="139:30"><expr pos:start="139:21" pos:end="139:30"><name pos:start="139:21" pos:end="139:30"><name pos:start="139:21" pos:end="139:23">ctx</name><operator pos:start="139:24" pos:end="139:25">-&gt;</operator><name pos:start="139:26" pos:end="139:30">raddr</name></name></expr></argument>, <argument pos:start="139:33" pos:end="139:41"><expr pos:start="139:33" pos:end="139:41"><name pos:start="139:33" pos:end="139:41"><name pos:start="139:33" pos:end="139:35">ctx</name><operator pos:start="139:36" pos:end="139:37">-&gt;</operator><name pos:start="139:38" pos:end="139:41">prot</name></name></expr></argument>, <argument pos:start="139:44" pos:end="139:46"><expr pos:start="139:44" pos:end="139:46"><name pos:start="139:44" pos:end="139:46">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="143:1" pos:end="143:6">#<cpp:directive pos:start="143:2" pos:end="143:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="145:9" pos:end="145:31">/* Update page flags */</comment>

        <expr_stmt pos:start="147:9" pos:end="147:26"><expr pos:start="147:9" pos:end="147:25"><name pos:start="147:9" pos:end="147:12">pte1</name> <operator pos:start="147:14" pos:end="147:14">=</operator> <name pos:start="147:16" pos:end="147:25"><name pos:start="147:16" pos:end="147:18">ctx</name><operator pos:start="147:19" pos:end="147:20">-&gt;</operator><name pos:start="147:21" pos:end="147:25">raddr</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="167:9"><if pos:start="149:9" pos:end="167:9">if <condition pos:start="149:12" pos:end="149:55">(<expr pos:start="149:13" pos:end="149:54"><call pos:start="149:13" pos:end="149:49"><name pos:start="149:13" pos:end="149:28">pte_update_flags</name><argument_list pos:start="149:29" pos:end="149:49">(<argument pos:start="149:30" pos:end="149:32"><expr pos:start="149:30" pos:end="149:32"><name pos:start="149:30" pos:end="149:32">ctx</name></expr></argument>, <argument pos:start="149:35" pos:end="149:39"><expr pos:start="149:35" pos:end="149:39"><operator pos:start="149:35" pos:end="149:35">&amp;</operator><name pos:start="149:36" pos:end="149:39">pte1</name></expr></argument>, <argument pos:start="149:42" pos:end="149:44"><expr pos:start="149:42" pos:end="149:44"><name pos:start="149:42" pos:end="149:44">ret</name></expr></argument>, <argument pos:start="149:47" pos:end="149:48"><expr pos:start="149:47" pos:end="149:48"><name pos:start="149:47" pos:end="149:48">rw</name></expr></argument>)</argument_list></call> <operator pos:start="149:51" pos:end="149:52">==</operator> <literal type="number" pos:start="149:54" pos:end="149:54">1</literal></expr>)</condition> <block pos:start="149:57" pos:end="167:9">{<block_content pos:start="153:13" pos:end="165:13">

<cpp:if pos:start="151:1" pos:end="151:25">#<cpp:directive pos:start="151:2" pos:end="151:3">if</cpp:directive> <expr pos:start="151:5" pos:end="151:25"><call pos:start="151:5" pos:end="151:25"><name pos:start="151:5" pos:end="151:11">defined</name><argument_list pos:start="151:12" pos:end="151:25">(<argument pos:start="151:13" pos:end="151:24"><expr pos:start="151:13" pos:end="151:24"><name pos:start="151:13" pos:end="151:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <if_stmt pos:start="153:13" pos:end="165:13"><if pos:start="153:13" pos:end="157:13">if <condition pos:start="153:16" pos:end="153:23">(<expr pos:start="153:17" pos:end="153:22"><name pos:start="153:17" pos:end="153:22">is_64b</name></expr>)</condition> <block pos:start="153:25" pos:end="157:13">{<block_content pos:start="155:17" pos:end="155:64">

                <expr_stmt pos:start="155:17" pos:end="155:64"><expr pos:start="155:17" pos:end="155:63"><call pos:start="155:17" pos:end="155:63"><name pos:start="155:17" pos:end="155:33">stq_phys_notdirty</name><argument_list pos:start="155:34" pos:end="155:63">(<argument pos:start="155:35" pos:end="155:56"><expr pos:start="155:35" pos:end="155:56"><name pos:start="155:35" pos:end="155:38">base</name> <operator pos:start="155:40" pos:end="155:40">+</operator> <operator pos:start="155:42" pos:end="155:42">(</operator><name pos:start="155:43" pos:end="155:46">good</name> <operator pos:start="155:48" pos:end="155:48">*</operator> <literal type="number" pos:start="155:50" pos:end="155:51">16</literal><operator pos:start="155:52" pos:end="155:52">)</operator> <operator pos:start="155:54" pos:end="155:54">+</operator> <literal type="number" pos:start="155:56" pos:end="155:56">8</literal></expr></argument>, <argument pos:start="155:59" pos:end="155:62"><expr pos:start="155:59" pos:end="155:62"><name pos:start="155:59" pos:end="155:62">pte1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="157:15" pos:end="165:13">else

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>

            <block pos:start="161:13" pos:end="165:13">{<block_content pos:start="163:17" pos:end="163:63">

                <expr_stmt pos:start="163:17" pos:end="163:63"><expr pos:start="163:17" pos:end="163:62"><call pos:start="163:17" pos:end="163:62"><name pos:start="163:17" pos:end="163:33">stl_phys_notdirty</name><argument_list pos:start="163:34" pos:end="163:62">(<argument pos:start="163:35" pos:end="163:55"><expr pos:start="163:35" pos:end="163:55"><name pos:start="163:35" pos:end="163:38">base</name> <operator pos:start="163:40" pos:end="163:40">+</operator> <operator pos:start="163:42" pos:end="163:42">(</operator><name pos:start="163:43" pos:end="163:46">good</name> <operator pos:start="163:48" pos:end="163:48">*</operator> <literal type="number" pos:start="163:50" pos:end="163:50">8</literal><operator pos:start="163:51" pos:end="163:51">)</operator> <operator pos:start="163:53" pos:end="163:53">+</operator> <literal type="number" pos:start="163:55" pos:end="163:55">4</literal></expr></argument>, <argument pos:start="163:58" pos:end="163:61"><expr pos:start="163:58" pos:end="163:61"><name pos:start="163:58" pos:end="163:61">pte1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="173:5" pos:end="173:15">return <expr pos:start="173:12" pos:end="173:14"><name pos:start="173:12" pos:end="173:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
