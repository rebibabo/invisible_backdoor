<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15697.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">do_getfd</name><parameter_list pos:start="1:21" pos:end="1:54">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:28">Monitor</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:33">mon</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:53"><decl pos:start="1:36" pos:end="1:53"><type pos:start="1:36" pos:end="1:53"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:46">QDict</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:45">

    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:22">fdname</name> <init pos:start="5:24" pos:end="5:55">= <expr pos:start="5:26" pos:end="5:55"><call pos:start="5:26" pos:end="5:55"><name pos:start="5:26" pos:end="5:38">qdict_get_str</name><argument_list pos:start="5:39" pos:end="5:55">(<argument pos:start="5:40" pos:end="5:44"><expr pos:start="5:40" pos:end="5:44"><name pos:start="5:40" pos:end="5:44">qdict</name></expr></argument>, <argument pos:start="5:47" pos:end="5:54"><expr pos:start="5:47" pos:end="5:54"><literal type="string" pos:start="5:47" pos:end="5:54">"fdname"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">mon_fd_t</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:19">monfd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">fd</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:38"><expr pos:start="13:5" pos:end="13:37"><name pos:start="13:5" pos:end="13:6">fd</name> <operator pos:start="13:8" pos:end="13:8">=</operator> <call pos:start="13:10" pos:end="13:37"><name pos:start="13:10" pos:end="13:27">qemu_chr_get_msgfd</name><argument_list pos:start="13:28" pos:end="13:37">(<argument pos:start="13:29" pos:end="13:36"><expr pos:start="13:29" pos:end="13:36"><name pos:start="13:29" pos:end="13:36"><name pos:start="13:29" pos:end="13:31">mon</name><operator pos:start="13:32" pos:end="13:33">-&gt;</operator><name pos:start="13:34" pos:end="13:36">chr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:17">(<expr pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:10">fd</name> <operator pos:start="15:12" pos:end="15:13">==</operator> <operator pos:start="15:15" pos:end="15:15">-</operator><literal type="number" pos:start="15:16" pos:end="15:16">1</literal></expr>)</condition> <block pos:start="15:19" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:15">

        <expr_stmt pos:start="17:9" pos:end="17:83"><expr pos:start="17:9" pos:end="17:82"><call pos:start="17:9" pos:end="17:82"><name pos:start="17:9" pos:end="17:22">monitor_printf</name><argument_list pos:start="17:23" pos:end="17:82">(<argument pos:start="17:24" pos:end="17:26"><expr pos:start="17:24" pos:end="17:26"><name pos:start="17:24" pos:end="17:26">mon</name></expr></argument>, <argument pos:start="17:29" pos:end="17:81"><expr pos:start="17:29" pos:end="17:81"><literal type="string" pos:start="17:29" pos:end="17:81">"getfd: no file descriptor supplied via SCM_RIGHTS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:32">(<expr pos:start="25:9" pos:end="25:31"><call pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:20">qemu_isdigit</name><argument_list pos:start="25:21" pos:end="25:31">(<argument pos:start="25:22" pos:end="25:30"><expr pos:start="25:22" pos:end="25:30"><name pos:start="25:22" pos:end="25:30"><name pos:start="25:22" pos:end="25:27">fdname</name><index pos:start="25:28" pos:end="25:30">[<expr pos:start="25:29" pos:end="25:29"><literal type="number" pos:start="25:29" pos:end="25:29">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:34" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:15">

        <expr_stmt pos:start="27:9" pos:end="27:82"><expr pos:start="27:9" pos:end="27:81"><call pos:start="27:9" pos:end="27:81"><name pos:start="27:9" pos:end="27:22">monitor_printf</name><argument_list pos:start="27:23" pos:end="27:81">(<argument pos:start="27:24" pos:end="27:26"><expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:26">mon</name></expr></argument>, <argument pos:start="27:29" pos:end="27:80"><expr pos:start="27:29" pos:end="27:80"><literal type="string" pos:start="27:29" pos:end="27:80">"getfd: monitor names may not begin with a number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:17"><expr pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:6">fd</name> <operator pos:start="35:8" pos:end="35:8">=</operator> <call pos:start="35:10" pos:end="35:16"><name pos:start="35:10" pos:end="35:12">dup</name><argument_list pos:start="35:13" pos:end="35:16">(<argument pos:start="35:14" pos:end="35:15"><expr pos:start="35:14" pos:end="35:15"><name pos:start="35:14" pos:end="35:15">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:17">(<expr pos:start="37:9" pos:end="37:16"><name pos:start="37:9" pos:end="37:10">fd</name> <operator pos:start="37:12" pos:end="37:13">==</operator> <operator pos:start="37:15" pos:end="37:15">-</operator><literal type="number" pos:start="37:16" pos:end="37:16">1</literal></expr>)</condition> <block pos:start="37:19" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:15">

        <expr_stmt pos:start="39:9" pos:end="41:40"><expr pos:start="39:9" pos:end="41:39"><call pos:start="39:9" pos:end="41:39"><name pos:start="39:9" pos:end="39:22">monitor_printf</name><argument_list pos:start="39:23" pos:end="41:39">(<argument pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><name pos:start="39:24" pos:end="39:26">mon</name></expr></argument>, <argument pos:start="39:29" pos:end="39:67"><expr pos:start="39:29" pos:end="39:67"><literal type="string" pos:start="39:29" pos:end="39:67">"Failed to dup() file descriptor: %s\n"</literal></expr></argument>,

                       <argument pos:start="41:24" pos:end="41:38"><expr pos:start="41:24" pos:end="41:38"><call pos:start="41:24" pos:end="41:38"><name pos:start="41:24" pos:end="41:31">strerror</name><argument_list pos:start="41:32" pos:end="41:38">(<argument pos:start="41:33" pos:end="41:37"><expr pos:start="41:33" pos:end="41:37"><name pos:start="41:33" pos:end="41:37">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="49:5" pos:end="49:40"><name pos:start="49:5" pos:end="49:16">LIST_FOREACH</name><argument_list pos:start="49:17" pos:end="49:40">(<argument pos:start="49:18" pos:end="49:22">monfd</argument>, <argument pos:start="49:25" pos:end="49:33">&amp;mon-&gt;fds</argument>, <argument pos:start="49:36" pos:end="49:39">next</argument>)</argument_list></macro> <block pos:start="49:42" pos:end="65:5">{<block_content pos:start="51:9" pos:end="63:15">

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:45">(<expr pos:start="51:13" pos:end="51:44"><call pos:start="51:13" pos:end="51:39"><name pos:start="51:13" pos:end="51:18">strcmp</name><argument_list pos:start="51:19" pos:end="51:39">(<argument pos:start="51:20" pos:end="51:30"><expr pos:start="51:20" pos:end="51:30"><name pos:start="51:20" pos:end="51:30"><name pos:start="51:20" pos:end="51:24">monfd</name><operator pos:start="51:25" pos:end="51:26">-&gt;</operator><name pos:start="51:27" pos:end="51:30">name</name></name></expr></argument>, <argument pos:start="51:33" pos:end="51:38"><expr pos:start="51:33" pos:end="51:38"><name pos:start="51:33" pos:end="51:38">fdname</name></expr></argument>)</argument_list></call> <operator pos:start="51:41" pos:end="51:42">!=</operator> <literal type="number" pos:start="51:44" pos:end="51:44">0</literal></expr>)</condition> <block pos:start="51:47" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:21">

            <continue pos:start="53:13" pos:end="53:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:25"><expr pos:start="59:9" pos:end="59:24"><call pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:13">close</name><argument_list pos:start="59:14" pos:end="59:24">(<argument pos:start="59:15" pos:end="59:23"><expr pos:start="59:15" pos:end="59:23"><name pos:start="59:15" pos:end="59:23"><name pos:start="59:15" pos:end="59:19">monfd</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:23">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:23"><expr pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:13">monfd</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:17">fd</name></name> <operator pos:start="61:19" pos:end="61:19">=</operator> <name pos:start="61:21" pos:end="61:22">fd</name></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block>



    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:9">monfd</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <call pos:start="69:13" pos:end="69:42"><name pos:start="69:13" pos:end="69:24">qemu_mallocz</name><argument_list pos:start="69:25" pos:end="69:42">(<argument pos:start="69:26" pos:end="69:41"><expr pos:start="69:26" pos:end="69:41"><sizeof pos:start="69:26" pos:end="69:41">sizeof<argument_list pos:start="69:32" pos:end="69:41">(<argument pos:start="69:33" pos:end="69:40"><expr pos:start="69:33" pos:end="69:40"><name pos:start="69:33" pos:end="69:40">mon_fd_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:38"><expr pos:start="71:5" pos:end="71:37"><name pos:start="71:5" pos:end="71:15"><name pos:start="71:5" pos:end="71:9">monfd</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:15">name</name></name> <operator pos:start="71:17" pos:end="71:17">=</operator> <call pos:start="71:19" pos:end="71:37"><name pos:start="71:19" pos:end="71:29">qemu_strdup</name><argument_list pos:start="71:30" pos:end="71:37">(<argument pos:start="71:31" pos:end="71:36"><expr pos:start="71:31" pos:end="71:36"><name pos:start="71:31" pos:end="71:36">fdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:19"><expr pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:13"><name pos:start="73:5" pos:end="73:9">monfd</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:13">fd</name></name> <operator pos:start="73:15" pos:end="73:15">=</operator> <name pos:start="73:17" pos:end="73:18">fd</name></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:45"><expr pos:start="77:5" pos:end="77:44"><call pos:start="77:5" pos:end="77:44"><name pos:start="77:5" pos:end="77:20">LIST_INSERT_HEAD</name><argument_list pos:start="77:21" pos:end="77:44">(<argument pos:start="77:22" pos:end="77:30"><expr pos:start="77:22" pos:end="77:30"><operator pos:start="77:22" pos:end="77:22">&amp;</operator><name pos:start="77:23" pos:end="77:30"><name pos:start="77:23" pos:end="77:25">mon</name><operator pos:start="77:26" pos:end="77:27">-&gt;</operator><name pos:start="77:28" pos:end="77:30">fds</name></name></expr></argument>, <argument pos:start="77:33" pos:end="77:37"><expr pos:start="77:33" pos:end="77:37"><name pos:start="77:33" pos:end="77:37">monfd</name></expr></argument>, <argument pos:start="77:40" pos:end="77:43"><expr pos:start="77:40" pos:end="77:43"><name pos:start="77:40" pos:end="77:43">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
