<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13518.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:30">cmd_write_multiple</name><parameter_list pos:start="1:31" pos:end="1:56">(<parameter pos:start="1:32" pos:end="1:42"><decl pos:start="1:32" pos:end="1:42"><type pos:start="1:32" pos:end="1:42"><name pos:start="1:32" pos:end="1:39">IDEState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:55"><decl pos:start="1:45" pos:end="1:55"><type pos:start="1:45" pos:end="1:55"><name pos:start="1:45" pos:end="1:51">uint8_t</name></type> <name pos:start="1:53" pos:end="1:55">cmd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:17">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">bool</name></type> <name pos:start="5:10" pos:end="5:14">lba48</name> <init pos:start="5:16" pos:end="5:43">= <expr pos:start="5:18" pos:end="5:43"><operator pos:start="5:18" pos:end="5:18">(</operator><name pos:start="5:19" pos:end="5:21">cmd</name> <operator pos:start="5:23" pos:end="5:24">==</operator> <name pos:start="5:26" pos:end="5:42">WIN_MULTWRITE_EXT</name><operator pos:start="5:43" pos:end="5:43">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:35">(<expr pos:start="11:9" pos:end="11:34"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:14"><name pos:start="11:10" pos:end="11:10">s</name><operator pos:start="11:11" pos:end="11:12">-&gt;</operator><name pos:start="11:13" pos:end="11:14">bs</name></name> <operator pos:start="11:16" pos:end="11:17">||</operator> <operator pos:start="11:19" pos:end="11:19">!</operator><name pos:start="11:20" pos:end="11:34"><name pos:start="11:20" pos:end="11:20">s</name><operator pos:start="11:21" pos:end="11:22">-&gt;</operator><name pos:start="11:23" pos:end="11:34">mult_sectors</name></name></expr>)</condition> <block pos:start="11:37" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:20">

        <expr_stmt pos:start="13:9" pos:end="13:29"><expr pos:start="13:9" pos:end="13:28"><call pos:start="13:9" pos:end="13:28"><name pos:start="13:9" pos:end="13:25">ide_abort_command</name><argument_list pos:start="13:26" pos:end="13:28">(<argument pos:start="13:27" pos:end="13:27"><expr pos:start="13:27" pos:end="13:27"><name pos:start="13:27" pos:end="13:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:20">return <expr pos:start="15:16" pos:end="15:19"><name pos:start="15:16" pos:end="15:19">true</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:38"><expr pos:start="21:5" pos:end="21:37"><call pos:start="21:5" pos:end="21:37"><name pos:start="21:5" pos:end="21:27">ide_cmd_lba48_transform</name><argument_list pos:start="21:28" pos:end="21:37">(<argument pos:start="21:29" pos:end="21:29"><expr pos:start="21:29" pos:end="21:29"><name pos:start="21:29" pos:end="21:29">s</name></expr></argument>, <argument pos:start="21:32" pos:end="21:36"><expr pos:start="21:32" pos:end="21:36"><name pos:start="21:32" pos:end="21:36">lba48</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:40"><expr pos:start="25:5" pos:end="25:39"><name pos:start="25:5" pos:end="25:21"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:21">req_nb_sectors</name></name> <operator pos:start="25:23" pos:end="25:23">=</operator> <name pos:start="25:25" pos:end="25:39"><name pos:start="25:25" pos:end="25:25">s</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:39">mult_sectors</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:43"><expr pos:start="27:5" pos:end="27:42"><name pos:start="27:5" pos:end="27:5">n</name> <operator pos:start="27:7" pos:end="27:7">=</operator> <call pos:start="27:9" pos:end="27:42"><name pos:start="27:9" pos:end="27:11">MIN</name><argument_list pos:start="27:12" pos:end="27:42">(<argument pos:start="27:13" pos:end="27:22"><expr pos:start="27:13" pos:end="27:22"><name pos:start="27:13" pos:end="27:22"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:22">nsector</name></name></expr></argument>, <argument pos:start="27:25" pos:end="27:41"><expr pos:start="27:25" pos:end="27:41"><name pos:start="27:25" pos:end="27:41"><name pos:start="27:25" pos:end="27:25">s</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:41">req_nb_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:39"><expr pos:start="31:5" pos:end="31:38"><name pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:13">status</name></name> <operator pos:start="31:15" pos:end="31:15">=</operator> <name pos:start="31:17" pos:end="31:25">SEEK_STAT</name> <operator pos:start="31:27" pos:end="31:27">|</operator> <name pos:start="31:29" pos:end="31:38">READY_STAT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:67"><expr pos:start="33:5" pos:end="33:66"><call pos:start="33:5" pos:end="33:66"><name pos:start="33:5" pos:end="33:22">ide_transfer_start</name><argument_list pos:start="33:23" pos:end="33:66">(<argument pos:start="33:24" pos:end="33:24"><expr pos:start="33:24" pos:end="33:24"><name pos:start="33:24" pos:end="33:24">s</name></expr></argument>, <argument pos:start="33:27" pos:end="33:38"><expr pos:start="33:27" pos:end="33:38"><name pos:start="33:27" pos:end="33:38"><name pos:start="33:27" pos:end="33:27">s</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:38">io_buffer</name></name></expr></argument>, <argument pos:start="33:41" pos:end="33:47"><expr pos:start="33:41" pos:end="33:47"><literal type="number" pos:start="33:41" pos:end="33:43">512</literal> <operator pos:start="33:45" pos:end="33:45">*</operator> <name pos:start="33:47" pos:end="33:47">n</name></expr></argument>, <argument pos:start="33:50" pos:end="33:65"><expr pos:start="33:50" pos:end="33:65"><name pos:start="33:50" pos:end="33:65">ide_sector_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:25"><expr pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:20"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:20">media_changed</name></name> <operator pos:start="37:22" pos:end="37:22">=</operator> <literal type="number" pos:start="37:24" pos:end="37:24">1</literal></expr>;</expr_stmt>



    <return pos:start="41:5" pos:end="41:17">return <expr pos:start="41:12" pos:end="41:16"><name pos:start="41:12" pos:end="41:16">false</name></expr>;</return>

</block_content>}</block></function>
</unit>
