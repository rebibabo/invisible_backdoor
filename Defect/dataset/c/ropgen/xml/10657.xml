<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10657.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:30">libgsm_init</name><parameter_list pos:start="1:31" pos:end="1:53">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>)</parameter_list> <block pos:start="1:55" pos:end="103:1">{<block_content pos:start="3:5" pos:end="101:13">

    <if_stmt pos:start="3:5" pos:end="11:5"><if pos:start="3:5" pos:end="11:5">if <condition pos:start="3:8" pos:end="3:28">(<expr pos:start="3:9" pos:end="3:27"><name pos:start="3:9" pos:end="3:23"><name pos:start="3:9" pos:end="3:13">avctx</name><operator pos:start="3:14" pos:end="3:15">-&gt;</operator><name pos:start="3:16" pos:end="3:23">channels</name></name> <operator pos:start="3:25" pos:end="3:25">&gt;</operator> <literal type="number" pos:start="3:27" pos:end="3:27">1</literal></expr>)</condition> <block pos:start="3:30" pos:end="11:5">{<block_content pos:start="5:9" pos:end="9:18">

        <expr_stmt pos:start="5:9" pos:end="7:32"><expr pos:start="5:9" pos:end="7:31"><call pos:start="5:9" pos:end="7:31"><name pos:start="5:9" pos:end="5:14">av_log</name><argument_list pos:start="5:15" pos:end="7:31">(<argument pos:start="5:16" pos:end="5:20"><expr pos:start="5:16" pos:end="5:20"><name pos:start="5:16" pos:end="5:20">avctx</name></expr></argument>, <argument pos:start="5:23" pos:end="5:34"><expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="5:37" pos:end="5:78"><expr pos:start="5:37" pos:end="5:78"><literal type="string" pos:start="5:37" pos:end="5:78">"Mono required for GSM, got %d channels\n"</literal></expr></argument>,

               <argument pos:start="7:16" pos:end="7:30"><expr pos:start="7:16" pos:end="7:30"><name pos:start="7:16" pos:end="7:30"><name pos:start="7:16" pos:end="7:20">avctx</name><operator pos:start="7:21" pos:end="7:22">-&gt;</operator><name pos:start="7:23" pos:end="7:30">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="9:9" pos:end="9:18">return <expr pos:start="9:16" pos:end="9:17"><operator pos:start="9:16" pos:end="9:16">-</operator><literal type="number" pos:start="9:17" pos:end="9:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="15:5" pos:end="61:5"><if pos:start="15:5" pos:end="31:5">if<condition pos:start="15:7" pos:end="15:28">(<expr pos:start="15:8" pos:end="15:27"><name pos:start="15:8" pos:end="15:27"><name pos:start="15:8" pos:end="15:12">avctx</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:19">codec</name><operator pos:start="15:20" pos:end="15:21">-&gt;</operator><name pos:start="15:22" pos:end="15:27">decode</name></name></expr>)</condition><block pos:start="15:29" pos:end="31:5">{<block_content pos:start="17:9" pos:end="29:46">

        <if_stmt pos:start="17:9" pos:end="19:31"><if pos:start="17:9" pos:end="19:31">if<condition pos:start="17:11" pos:end="17:28">(<expr pos:start="17:12" pos:end="17:27"><operator pos:start="17:12" pos:end="17:12">!</operator><name pos:start="17:13" pos:end="17:27"><name pos:start="17:13" pos:end="17:17">avctx</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:27">channels</name></name></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:31"><block_content pos:start="19:13" pos:end="19:31">

            <expr_stmt pos:start="19:13" pos:end="19:31"><expr pos:start="19:13" pos:end="19:30"><name pos:start="19:13" pos:end="19:27"><name pos:start="19:13" pos:end="19:17">avctx</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:27">channels</name></name><operator pos:start="19:28" pos:end="19:28">=</operator> <literal type="number" pos:start="19:30" pos:end="19:30">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="23:9" pos:end="25:37"><if pos:start="23:9" pos:end="25:37">if<condition pos:start="23:11" pos:end="23:31">(<expr pos:start="23:12" pos:end="23:30"><operator pos:start="23:12" pos:end="23:12">!</operator><name pos:start="23:13" pos:end="23:30"><name pos:start="23:13" pos:end="23:17">avctx</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:30">sample_rate</name></name></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:37"><block_content pos:start="25:13" pos:end="25:37">

            <expr_stmt pos:start="25:13" pos:end="25:37"><expr pos:start="25:13" pos:end="25:36"><name pos:start="25:13" pos:end="25:30"><name pos:start="25:13" pos:end="25:17">avctx</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:30">sample_rate</name></name><operator pos:start="25:31" pos:end="25:31">=</operator> <literal type="number" pos:start="25:33" pos:end="25:36">8000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:46"><expr pos:start="29:9" pos:end="29:45"><name pos:start="29:9" pos:end="29:25"><name pos:start="29:9" pos:end="29:13">avctx</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:25">sample_fmt</name></name> <operator pos:start="29:27" pos:end="29:27">=</operator> <name pos:start="29:29" pos:end="29:45">AV_SAMPLE_FMT_S16</name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="31:6" pos:end="61:5">else<block pos:start="31:10" pos:end="61:5">{<block_content pos:start="33:9" pos:end="59:9">

        <if_stmt pos:start="33:9" pos:end="43:9"><if pos:start="33:9" pos:end="43:9">if <condition pos:start="33:12" pos:end="33:39">(<expr pos:start="33:13" pos:end="33:38"><name pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:17">avctx</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:30">sample_rate</name></name> <operator pos:start="33:32" pos:end="33:33">!=</operator> <literal type="number" pos:start="33:35" pos:end="33:38">8000</literal></expr>)</condition> <block pos:start="33:41" pos:end="43:9">{<block_content pos:start="35:13" pos:end="41:26">

            <expr_stmt pos:start="35:13" pos:end="37:36"><expr pos:start="35:13" pos:end="37:35"><call pos:start="35:13" pos:end="37:35"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="37:35">(<argument pos:start="35:20" pos:end="35:24"><expr pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:24">avctx</name></expr></argument>, <argument pos:start="35:27" pos:end="35:38"><expr pos:start="35:27" pos:end="35:38"><name pos:start="35:27" pos:end="35:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:41" pos:end="35:89"><expr pos:start="35:41" pos:end="35:89"><literal type="string" pos:start="35:41" pos:end="35:89">"Sample rate 8000Hz required for GSM, got %dHz\n"</literal></expr></argument>,

                <argument pos:start="37:17" pos:end="37:34"><expr pos:start="37:17" pos:end="37:34"><name pos:start="37:17" pos:end="37:34"><name pos:start="37:17" pos:end="37:21">avctx</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:34">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="41:26"><if pos:start="39:13" pos:end="41:26">if<condition pos:start="39:15" pos:end="39:71">(<expr pos:start="39:16" pos:end="39:70"><name pos:start="39:16" pos:end="39:43"><name pos:start="39:16" pos:end="39:20">avctx</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:43">strict_std_compliance</name></name> <operator pos:start="39:45" pos:end="39:45">&gt;</operator> <name pos:start="39:47" pos:end="39:70">FF_COMPLIANCE_UNOFFICIAL</name></expr>)</condition><block type="pseudo" pos:start="41:17" pos:end="41:26"><block_content pos:start="41:17" pos:end="41:26">

                <return pos:start="41:17" pos:end="41:26">return <expr pos:start="41:24" pos:end="41:25"><operator pos:start="41:24" pos:end="41:24">-</operator><literal type="number" pos:start="41:25" pos:end="41:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="59:9"><if pos:start="45:9" pos:end="59:9">if <condition pos:start="45:12" pos:end="49:93">(<expr pos:start="45:13" pos:end="49:32"><name pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:17">avctx</name><operator pos:start="45:18" pos:end="45:19">-&gt;</operator><name pos:start="45:20" pos:end="45:27">bit_rate</name></name> <operator pos:start="45:29" pos:end="45:30">!=</operator> <literal type="number" pos:start="45:32" pos:end="45:36">13000</literal> <comment type="block" pos:start="45:38" pos:end="45:51">/* Official */</comment> <operator pos:start="45:53" pos:end="45:54">&amp;&amp;</operator>

            <name pos:start="47:13" pos:end="47:27"><name pos:start="47:13" pos:end="47:17">avctx</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:27">bit_rate</name></name> <operator pos:start="47:29" pos:end="47:30">!=</operator> <literal type="number" pos:start="47:32" pos:end="47:36">13200</literal> <comment type="block" pos:start="47:38" pos:end="47:54">/* Very common */</comment> <operator pos:start="47:56" pos:end="47:57">&amp;&amp;</operator>

            <name pos:start="49:13" pos:end="49:27"><name pos:start="49:13" pos:end="49:17">avctx</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:27">bit_rate</name></name> <operator pos:start="49:29" pos:end="49:30">!=</operator> <literal type="number" pos:start="49:32" pos:end="49:32">0</literal></expr> <comment type="block" pos:start="49:34" pos:end="49:91">/* Unknown; a.o. mov does not set bitrate when decoding */</comment> )</condition> <block pos:start="49:95" pos:end="59:9">{<block_content pos:start="51:13" pos:end="57:26">

            <expr_stmt pos:start="51:13" pos:end="53:33"><expr pos:start="51:13" pos:end="53:32"><call pos:start="51:13" pos:end="53:32"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="53:32">(<argument pos:start="51:20" pos:end="51:24"><expr pos:start="51:20" pos:end="51:24"><name pos:start="51:20" pos:end="51:24">avctx</name></expr></argument>, <argument pos:start="51:27" pos:end="51:38"><expr pos:start="51:27" pos:end="51:38"><name pos:start="51:27" pos:end="51:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:41" pos:end="51:88"><expr pos:start="51:41" pos:end="51:88"><literal type="string" pos:start="51:41" pos:end="51:88">"Bitrate 13000bps required for GSM, got %dbps\n"</literal></expr></argument>,

                <argument pos:start="53:17" pos:end="53:31"><expr pos:start="53:17" pos:end="53:31"><name pos:start="53:17" pos:end="53:31"><name pos:start="53:17" pos:end="53:21">avctx</name><operator pos:start="53:22" pos:end="53:23">-&gt;</operator><name pos:start="53:24" pos:end="53:31">bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="55:13" pos:end="57:26"><if pos:start="55:13" pos:end="57:26">if<condition pos:start="55:15" pos:end="55:71">(<expr pos:start="55:16" pos:end="55:70"><name pos:start="55:16" pos:end="55:43"><name pos:start="55:16" pos:end="55:20">avctx</name><operator pos:start="55:21" pos:end="55:22">-&gt;</operator><name pos:start="55:23" pos:end="55:43">strict_std_compliance</name></name> <operator pos:start="55:45" pos:end="55:45">&gt;</operator> <name pos:start="55:47" pos:end="55:70">FF_COMPLIANCE_UNOFFICIAL</name></expr>)</condition><block type="pseudo" pos:start="57:17" pos:end="57:26"><block_content pos:start="57:17" pos:end="57:26">

                <return pos:start="57:17" pos:end="57:26">return <expr pos:start="57:24" pos:end="57:25"><operator pos:start="57:24" pos:end="57:24">-</operator><literal type="number" pos:start="57:25" pos:end="57:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:36"><expr pos:start="65:5" pos:end="65:35"><name pos:start="65:5" pos:end="65:20"><name pos:start="65:5" pos:end="65:9">avctx</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:20">priv_data</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <call pos:start="65:24" pos:end="65:35"><name pos:start="65:24" pos:end="65:33">gsm_create</name><argument_list pos:start="65:34" pos:end="65:35">()</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="69:5" pos:end="91:5">switch<condition pos:start="69:11" pos:end="69:27">(<expr pos:start="69:12" pos:end="69:26"><name pos:start="69:12" pos:end="69:26"><name pos:start="69:12" pos:end="69:16">avctx</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:26">codec_id</name></name></expr>)</condition> <block pos:start="69:29" pos:end="91:5">{<block_content pos:start="71:5" pos:end="89:9">

    <case pos:start="71:5" pos:end="71:22">case <expr pos:start="71:10" pos:end="71:21"><name pos:start="71:10" pos:end="71:21">CODEC_ID_GSM</name></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:43"><expr pos:start="73:9" pos:end="73:42"><name pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:13">avctx</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:25">frame_size</name></name> <operator pos:start="73:27" pos:end="73:27">=</operator> <name pos:start="73:29" pos:end="73:42">GSM_FRAME_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:44"><expr pos:start="75:9" pos:end="75:43"><name pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:13">avctx</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:26">block_align</name></name> <operator pos:start="75:28" pos:end="75:28">=</operator> <name pos:start="75:30" pos:end="75:43">GSM_BLOCK_SIZE</name></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:25">case <expr pos:start="79:10" pos:end="79:24"><name pos:start="79:10" pos:end="79:24">CODEC_ID_GSM_MS</name></expr>:</case> <block pos:start="79:27" pos:end="89:9">{<block_content pos:start="81:9" pos:end="87:47">

        <decl_stmt pos:start="81:9" pos:end="81:20"><decl pos:start="81:9" pos:end="81:19"><type pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">int</name></type> <name pos:start="81:13" pos:end="81:15">one</name> <init pos:start="81:17" pos:end="81:19">= <expr pos:start="81:19" pos:end="81:19"><literal type="number" pos:start="81:19" pos:end="81:19">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:58"><expr pos:start="83:9" pos:end="83:57"><call pos:start="83:9" pos:end="83:57"><name pos:start="83:9" pos:end="83:18">gsm_option</name><argument_list pos:start="83:19" pos:end="83:57">(<argument pos:start="83:20" pos:end="83:35"><expr pos:start="83:20" pos:end="83:35"><name pos:start="83:20" pos:end="83:35"><name pos:start="83:20" pos:end="83:24">avctx</name><operator pos:start="83:25" pos:end="83:26">-&gt;</operator><name pos:start="83:27" pos:end="83:35">priv_data</name></name></expr></argument>, <argument pos:start="83:38" pos:end="83:50"><expr pos:start="83:38" pos:end="83:50"><name pos:start="83:38" pos:end="83:50">GSM_OPT_WAV49</name></expr></argument>, <argument pos:start="83:53" pos:end="83:56"><expr pos:start="83:53" pos:end="83:56"><operator pos:start="83:53" pos:end="83:53">&amp;</operator><name pos:start="83:54" pos:end="83:56">one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:45"><expr pos:start="85:9" pos:end="85:44"><name pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:13">avctx</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:25">frame_size</name></name> <operator pos:start="85:27" pos:end="85:27">=</operator> <literal type="number" pos:start="85:29" pos:end="85:29">2</literal><operator pos:start="85:30" pos:end="85:30">*</operator><name pos:start="85:31" pos:end="85:44">GSM_FRAME_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:47"><expr pos:start="87:9" pos:end="87:46"><name pos:start="87:9" pos:end="87:26"><name pos:start="87:9" pos:end="87:13">avctx</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:26">block_align</name></name> <operator pos:start="87:28" pos:end="87:28">=</operator> <name pos:start="87:30" pos:end="87:46">GSM_MS_BLOCK_SIZE</name></expr>;</expr_stmt>

        </block_content>}</block>

    </block_content>}</block></switch>



    <expr_stmt pos:start="95:5" pos:end="95:46"><expr pos:start="95:5" pos:end="95:45"><name pos:start="95:5" pos:end="95:22"><name pos:start="95:5" pos:end="95:9">avctx</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:22">coded_frame</name></name><operator pos:start="95:23" pos:end="95:23">=</operator> <call pos:start="95:25" pos:end="95:45"><name pos:start="95:25" pos:end="95:43">avcodec_alloc_frame</name><argument_list pos:start="95:44" pos:end="95:45">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:37"><expr pos:start="97:5" pos:end="97:36"><name pos:start="97:5" pos:end="97:33"><name pos:start="97:5" pos:end="97:9">avctx</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:22">coded_frame</name><operator pos:start="97:23" pos:end="97:24">-&gt;</operator><name pos:start="97:25" pos:end="97:33">key_frame</name></name><operator pos:start="97:34" pos:end="97:34">=</operator> <literal type="number" pos:start="97:36" pos:end="97:36">1</literal></expr>;</expr_stmt>



    <return pos:start="101:5" pos:end="101:13">return <expr pos:start="101:12" pos:end="101:12"><literal type="number" pos:start="101:12" pos:end="101:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
