<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11214.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">inet_dgram_opts</name><parameter_list pos:start="1:20" pos:end="1:49">(<parameter pos:start="1:21" pos:end="1:34"><decl pos:start="1:21" pos:end="1:34"><type pos:start="1:21" pos:end="1:34"><name pos:start="1:21" pos:end="1:28">QemuOpts</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:34">opts</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:41">Error</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier><modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:48">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="173:1">{<block_content pos:start="5:5" pos:end="171:14">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:19">addrinfo</name></name></type> <name pos:start="5:21" pos:end="5:22">ai</name></decl>, <decl pos:start="5:25" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:25" pos:end="5:25">*</modifier></type><name pos:start="5:26" pos:end="5:29">peer</name> <init pos:start="5:31" pos:end="5:36">= <expr pos:start="5:33" pos:end="5:36"><name pos:start="5:33" pos:end="5:36">NULL</name></expr></init></decl>, <decl pos:start="5:39" pos:end="5:51"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:44">local</name> <init pos:start="5:46" pos:end="5:51">= <expr pos:start="5:48" pos:end="5:51"><name pos:start="5:48" pos:end="5:51">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:20">port</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">sock</name> <init pos:start="11:14" pos:end="11:17">= <expr pos:start="11:16" pos:end="11:17"><operator pos:start="11:16" pos:end="11:16">-</operator><literal type="number" pos:start="11:17" pos:end="11:17">1</literal></expr></init></decl>, <decl pos:start="11:20" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:20" pos:end="11:21">rc</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:26">/* lookup peer addr */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:30"><expr pos:start="17:5" pos:end="17:29"><call pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:10">memset</name><argument_list pos:start="17:11" pos:end="17:29">(<argument pos:start="17:12" pos:end="17:14"><expr pos:start="17:12" pos:end="17:14"><operator pos:start="17:12" pos:end="17:12">&amp;</operator><name pos:start="17:13" pos:end="17:14">ai</name></expr></argument>,<argument pos:start="17:16" pos:end="17:16"><expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr></argument>, <argument pos:start="17:19" pos:end="17:28"><expr pos:start="17:19" pos:end="17:28"><sizeof pos:start="17:19" pos:end="17:28">sizeof<argument_list pos:start="17:25" pos:end="17:28">(<argument pos:start="17:26" pos:end="17:27"><expr pos:start="17:26" pos:end="17:27"><name pos:start="17:26" pos:end="17:27">ai</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:47"><expr pos:start="19:5" pos:end="19:46"><name pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:6">ai</name><operator pos:start="19:7" pos:end="19:7">.</operator><name pos:start="19:8" pos:end="19:15">ai_flags</name></name> <operator pos:start="19:17" pos:end="19:17">=</operator> <name pos:start="19:19" pos:end="19:30">AI_CANONNAME</name> <operator pos:start="19:32" pos:end="19:32">|</operator> <name pos:start="19:34" pos:end="19:46">AI_ADDRCONFIG</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:6">ai</name><operator pos:start="21:7" pos:end="21:7">.</operator><name pos:start="21:8" pos:end="21:16">ai_family</name></name> <operator pos:start="21:18" pos:end="21:18">=</operator> <name pos:start="21:20" pos:end="21:28">PF_UNSPEC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:32"><expr pos:start="23:5" pos:end="23:31"><name pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:6">ai</name><operator pos:start="23:7" pos:end="23:7">.</operator><name pos:start="23:8" pos:end="23:18">ai_socktype</name></name> <operator pos:start="23:20" pos:end="23:20">=</operator> <name pos:start="23:22" pos:end="23:31">SOCK_DGRAM</name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:8">addr</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:37"><name pos:start="27:12" pos:end="27:23">qemu_opt_get</name><argument_list pos:start="27:24" pos:end="27:37">(<argument pos:start="27:25" pos:end="27:28"><expr pos:start="27:25" pos:end="27:28"><name pos:start="27:25" pos:end="27:28">opts</name></expr></argument>, <argument pos:start="27:31" pos:end="27:36"><expr pos:start="27:31" pos:end="27:36"><literal type="string" pos:start="27:31" pos:end="27:36">"host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:38"><expr pos:start="29:5" pos:end="29:37"><name pos:start="29:5" pos:end="29:8">port</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:37"><name pos:start="29:12" pos:end="29:23">qemu_opt_get</name><argument_list pos:start="29:24" pos:end="29:37">(<argument pos:start="29:25" pos:end="29:28"><expr pos:start="29:25" pos:end="29:28"><name pos:start="29:25" pos:end="29:28">opts</name></expr></argument>, <argument pos:start="29:31" pos:end="29:36"><expr pos:start="29:31" pos:end="29:36"><literal type="string" pos:start="29:31" pos:end="29:36">"port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:42">(<expr pos:start="31:9" pos:end="31:41"><name pos:start="31:9" pos:end="31:12">addr</name> <operator pos:start="31:14" pos:end="31:15">==</operator> <name pos:start="31:17" pos:end="31:20">NULL</name> <operator pos:start="31:22" pos:end="31:23">||</operator> <call pos:start="31:25" pos:end="31:36"><name pos:start="31:25" pos:end="31:30">strlen</name><argument_list pos:start="31:31" pos:end="31:36">(<argument pos:start="31:32" pos:end="31:35"><expr pos:start="31:32" pos:end="31:35"><name pos:start="31:32" pos:end="31:35">addr</name></expr></argument>)</argument_list></call> <operator pos:start="31:38" pos:end="31:39">==</operator> <literal type="number" pos:start="31:41" pos:end="31:41">0</literal></expr>)</condition> <block pos:start="31:44" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:27">

        <expr_stmt pos:start="33:9" pos:end="33:27"><expr pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:12">addr</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <literal type="string" pos:start="33:16" pos:end="33:26">"localhost"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:42">(<expr pos:start="37:9" pos:end="37:41"><name pos:start="37:9" pos:end="37:12">port</name> <operator pos:start="37:14" pos:end="37:15">==</operator> <name pos:start="37:17" pos:end="37:20">NULL</name> <operator pos:start="37:22" pos:end="37:23">||</operator> <call pos:start="37:25" pos:end="37:36"><name pos:start="37:25" pos:end="37:30">strlen</name><argument_list pos:start="37:31" pos:end="37:36">(<argument pos:start="37:32" pos:end="37:35"><expr pos:start="37:32" pos:end="37:35"><name pos:start="37:32" pos:end="37:35">port</name></expr></argument>)</argument_list></call> <operator pos:start="37:38" pos:end="37:39">==</operator> <literal type="number" pos:start="37:41" pos:end="37:41">0</literal></expr>)</condition> <block pos:start="37:44" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:54"><expr pos:start="39:9" pos:end="39:53"><call pos:start="39:9" pos:end="39:53"><name pos:start="39:9" pos:end="39:18">error_setg</name><argument_list pos:start="39:19" pos:end="39:53">(<argument pos:start="39:20" pos:end="39:23"><expr pos:start="39:20" pos:end="39:23"><name pos:start="39:20" pos:end="39:23">errp</name></expr></argument>, <argument pos:start="39:26" pos:end="39:52"><expr pos:start="39:26" pos:end="39:52"><literal type="string" pos:start="39:26" pos:end="39:52">"remote port not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="49:31"><if pos:start="47:5" pos:end="49:31">if <condition pos:start="47:8" pos:end="47:43">(<expr pos:start="47:9" pos:end="47:42"><call pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:25">qemu_opt_get_bool</name><argument_list pos:start="47:26" pos:end="47:42">(<argument pos:start="47:27" pos:end="47:30"><expr pos:start="47:27" pos:end="47:30"><name pos:start="47:27" pos:end="47:30">opts</name></expr></argument>, <argument pos:start="47:33" pos:end="47:38"><expr pos:start="47:33" pos:end="47:38"><literal type="string" pos:start="47:33" pos:end="47:38">"ipv4"</literal></expr></argument>, <argument pos:start="47:41" pos:end="47:41"><expr pos:start="47:41" pos:end="47:41"><literal type="number" pos:start="47:41" pos:end="47:41">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:31"><block_content pos:start="49:9" pos:end="49:31">

        <expr_stmt pos:start="49:9" pos:end="49:31"><expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:10">ai</name><operator pos:start="49:11" pos:end="49:11">.</operator><name pos:start="49:12" pos:end="49:20">ai_family</name></name> <operator pos:start="49:22" pos:end="49:22">=</operator> <name pos:start="49:24" pos:end="49:30">PF_INET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="53:32"><if pos:start="51:5" pos:end="53:32">if <condition pos:start="51:8" pos:end="51:43">(<expr pos:start="51:9" pos:end="51:42"><call pos:start="51:9" pos:end="51:42"><name pos:start="51:9" pos:end="51:25">qemu_opt_get_bool</name><argument_list pos:start="51:26" pos:end="51:42">(<argument pos:start="51:27" pos:end="51:30"><expr pos:start="51:27" pos:end="51:30"><name pos:start="51:27" pos:end="51:30">opts</name></expr></argument>, <argument pos:start="51:33" pos:end="51:38"><expr pos:start="51:33" pos:end="51:38"><literal type="string" pos:start="51:33" pos:end="51:38">"ipv6"</literal></expr></argument>, <argument pos:start="51:41" pos:end="51:41"><expr pos:start="51:41" pos:end="51:41"><literal type="number" pos:start="51:41" pos:end="51:41">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:32"><block_content pos:start="53:9" pos:end="53:32">

        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:10">ai</name><operator pos:start="53:11" pos:end="53:11">.</operator><name pos:start="53:12" pos:end="53:20">ai_family</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:31">PF_INET6</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="57:56">(<expr pos:start="57:9" pos:end="57:55"><literal type="number" pos:start="57:9" pos:end="57:9">0</literal> <operator pos:start="57:11" pos:end="57:12">!=</operator> <operator pos:start="57:14" pos:end="57:14">(</operator><name pos:start="57:15" pos:end="57:16">rc</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <call pos:start="57:20" pos:end="57:54"><name pos:start="57:20" pos:end="57:30">getaddrinfo</name><argument_list pos:start="57:31" pos:end="57:54">(<argument pos:start="57:32" pos:end="57:35"><expr pos:start="57:32" pos:end="57:35"><name pos:start="57:32" pos:end="57:35">addr</name></expr></argument>, <argument pos:start="57:38" pos:end="57:41"><expr pos:start="57:38" pos:end="57:41"><name pos:start="57:38" pos:end="57:41">port</name></expr></argument>, <argument pos:start="57:44" pos:end="57:46"><expr pos:start="57:44" pos:end="57:46"><operator pos:start="57:44" pos:end="57:44">&amp;</operator><name pos:start="57:45" pos:end="57:46">ai</name></expr></argument>, <argument pos:start="57:49" pos:end="57:53"><expr pos:start="57:49" pos:end="57:53"><operator pos:start="57:49" pos:end="57:49">&amp;</operator><name pos:start="57:50" pos:end="57:53">peer</name></expr></argument>)</argument_list></call><operator pos:start="57:55" pos:end="57:55">)</operator></expr>)</condition> <block pos:start="57:58" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:18">

        <expr_stmt pos:start="59:9" pos:end="61:37"><expr pos:start="59:9" pos:end="61:36"><call pos:start="59:9" pos:end="61:36"><name pos:start="59:9" pos:end="59:18">error_setg</name><argument_list pos:start="59:19" pos:end="61:36">(<argument pos:start="59:20" pos:end="59:23"><expr pos:start="59:20" pos:end="59:23"><name pos:start="59:20" pos:end="59:23">errp</name></expr></argument>, <argument pos:start="59:26" pos:end="59:66"><expr pos:start="59:26" pos:end="59:66"><literal type="string" pos:start="59:26" pos:end="59:66">"address resolution failed for %s:%s: %s"</literal></expr></argument>, <argument pos:start="59:69" pos:end="59:72"><expr pos:start="59:69" pos:end="59:72"><name pos:start="59:69" pos:end="59:72">addr</name></expr></argument>, <argument pos:start="59:75" pos:end="59:78"><expr pos:start="59:75" pos:end="59:78"><name pos:start="59:75" pos:end="59:78">port</name></expr></argument>,

                   <argument pos:start="61:20" pos:end="61:35"><expr pos:start="61:20" pos:end="61:35"><call pos:start="61:20" pos:end="61:35"><name pos:start="61:20" pos:end="61:31">gai_strerror</name><argument_list pos:start="61:32" pos:end="61:35">(<argument pos:start="61:33" pos:end="61:34"><expr pos:start="61:33" pos:end="61:34"><name pos:start="61:33" pos:end="61:34">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return pos:start="63:9" pos:end="63:18">return <expr pos:start="63:16" pos:end="63:17"><operator pos:start="63:16" pos:end="63:16">-</operator><literal type="number" pos:start="63:17" pos:end="63:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:27">/* lookup local addr */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:30"><expr pos:start="71:5" pos:end="71:29"><call pos:start="71:5" pos:end="71:29"><name pos:start="71:5" pos:end="71:10">memset</name><argument_list pos:start="71:11" pos:end="71:29">(<argument pos:start="71:12" pos:end="71:14"><expr pos:start="71:12" pos:end="71:14"><operator pos:start="71:12" pos:end="71:12">&amp;</operator><name pos:start="71:13" pos:end="71:14">ai</name></expr></argument>,<argument pos:start="71:16" pos:end="71:16"><expr pos:start="71:16" pos:end="71:16"><literal type="number" pos:start="71:16" pos:end="71:16">0</literal></expr></argument>, <argument pos:start="71:19" pos:end="71:28"><expr pos:start="71:19" pos:end="71:28"><sizeof pos:start="71:19" pos:end="71:28">sizeof<argument_list pos:start="71:25" pos:end="71:28">(<argument pos:start="71:26" pos:end="71:27"><expr pos:start="71:26" pos:end="71:27"><name pos:start="71:26" pos:end="71:27">ai</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:29"><expr pos:start="73:5" pos:end="73:28"><name pos:start="73:5" pos:end="73:15"><name pos:start="73:5" pos:end="73:6">ai</name><operator pos:start="73:7" pos:end="73:7">.</operator><name pos:start="73:8" pos:end="73:15">ai_flags</name></name> <operator pos:start="73:17" pos:end="73:17">=</operator> <name pos:start="73:19" pos:end="73:28">AI_PASSIVE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:35"><expr pos:start="75:5" pos:end="75:34"><name pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:6">ai</name><operator pos:start="75:7" pos:end="75:7">.</operator><name pos:start="75:8" pos:end="75:16">ai_family</name></name> <operator pos:start="75:18" pos:end="75:18">=</operator> <name pos:start="75:20" pos:end="75:34"><name pos:start="75:20" pos:end="75:23">peer</name><operator pos:start="75:24" pos:end="75:25">-&gt;</operator><name pos:start="75:26" pos:end="75:34">ai_family</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:32"><expr pos:start="77:5" pos:end="77:31"><name pos:start="77:5" pos:end="77:18"><name pos:start="77:5" pos:end="77:6">ai</name><operator pos:start="77:7" pos:end="77:7">.</operator><name pos:start="77:8" pos:end="77:18">ai_socktype</name></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <name pos:start="77:22" pos:end="77:31">SOCK_DGRAM</name></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:43"><expr pos:start="81:5" pos:end="81:42"><name pos:start="81:5" pos:end="81:8">addr</name> <operator pos:start="81:10" pos:end="81:10">=</operator> <call pos:start="81:12" pos:end="81:42"><name pos:start="81:12" pos:end="81:23">qemu_opt_get</name><argument_list pos:start="81:24" pos:end="81:42">(<argument pos:start="81:25" pos:end="81:28"><expr pos:start="81:25" pos:end="81:28"><name pos:start="81:25" pos:end="81:28">opts</name></expr></argument>, <argument pos:start="81:31" pos:end="81:41"><expr pos:start="81:31" pos:end="81:41"><literal type="string" pos:start="81:31" pos:end="81:41">"localaddr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:43"><expr pos:start="83:5" pos:end="83:42"><name pos:start="83:5" pos:end="83:8">port</name> <operator pos:start="83:10" pos:end="83:10">=</operator> <call pos:start="83:12" pos:end="83:42"><name pos:start="83:12" pos:end="83:23">qemu_opt_get</name><argument_list pos:start="83:24" pos:end="83:42">(<argument pos:start="83:25" pos:end="83:28"><expr pos:start="83:25" pos:end="83:28"><name pos:start="83:25" pos:end="83:28">opts</name></expr></argument>, <argument pos:start="83:31" pos:end="83:41"><expr pos:start="83:31" pos:end="83:41"><literal type="string" pos:start="83:31" pos:end="83:41">"localport"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:42">(<expr pos:start="85:9" pos:end="85:41"><name pos:start="85:9" pos:end="85:12">addr</name> <operator pos:start="85:14" pos:end="85:15">==</operator> <name pos:start="85:17" pos:end="85:20">NULL</name> <operator pos:start="85:22" pos:end="85:23">||</operator> <call pos:start="85:25" pos:end="85:36"><name pos:start="85:25" pos:end="85:30">strlen</name><argument_list pos:start="85:31" pos:end="85:36">(<argument pos:start="85:32" pos:end="85:35"><expr pos:start="85:32" pos:end="85:35"><name pos:start="85:32" pos:end="85:35">addr</name></expr></argument>)</argument_list></call> <operator pos:start="85:38" pos:end="85:39">==</operator> <literal type="number" pos:start="85:41" pos:end="85:41">0</literal></expr>)</condition> <block pos:start="85:44" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:20">

        <expr_stmt pos:start="87:9" pos:end="87:20"><expr pos:start="87:9" pos:end="87:19"><name pos:start="87:9" pos:end="87:12">addr</name> <operator pos:start="87:14" pos:end="87:14">=</operator> <name pos:start="87:16" pos:end="87:19">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="91:5" pos:end="93:19"><if pos:start="91:5" pos:end="93:19">if <condition pos:start="91:8" pos:end="91:35">(<expr pos:start="91:9" pos:end="91:34"><operator pos:start="91:9" pos:end="91:9">!</operator><name pos:start="91:10" pos:end="91:13">port</name> <operator pos:start="91:15" pos:end="91:16">||</operator> <call pos:start="91:18" pos:end="91:29"><name pos:start="91:18" pos:end="91:23">strlen</name><argument_list pos:start="91:24" pos:end="91:29">(<argument pos:start="91:25" pos:end="91:28"><expr pos:start="91:25" pos:end="91:28"><name pos:start="91:25" pos:end="91:28">port</name></expr></argument>)</argument_list></call> <operator pos:start="91:31" pos:end="91:32">==</operator> <literal type="number" pos:start="91:34" pos:end="91:34">0</literal></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:19"><block_content pos:start="93:9" pos:end="93:19">

        <expr_stmt pos:start="93:9" pos:end="93:19"><expr pos:start="93:9" pos:end="93:18"><name pos:start="93:9" pos:end="93:12">port</name> <operator pos:start="93:14" pos:end="93:14">=</operator> <literal type="string" pos:start="93:16" pos:end="93:18">"0"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="105:5"><if pos:start="97:5" pos:end="105:5">if <condition pos:start="97:8" pos:end="97:57">(<expr pos:start="97:9" pos:end="97:56"><literal type="number" pos:start="97:9" pos:end="97:9">0</literal> <operator pos:start="97:11" pos:end="97:12">!=</operator> <operator pos:start="97:14" pos:end="97:14">(</operator><name pos:start="97:15" pos:end="97:16">rc</name> <operator pos:start="97:18" pos:end="97:18">=</operator> <call pos:start="97:20" pos:end="97:55"><name pos:start="97:20" pos:end="97:30">getaddrinfo</name><argument_list pos:start="97:31" pos:end="97:55">(<argument pos:start="97:32" pos:end="97:35"><expr pos:start="97:32" pos:end="97:35"><name pos:start="97:32" pos:end="97:35">addr</name></expr></argument>, <argument pos:start="97:38" pos:end="97:41"><expr pos:start="97:38" pos:end="97:41"><name pos:start="97:38" pos:end="97:41">port</name></expr></argument>, <argument pos:start="97:44" pos:end="97:46"><expr pos:start="97:44" pos:end="97:46"><operator pos:start="97:44" pos:end="97:44">&amp;</operator><name pos:start="97:45" pos:end="97:46">ai</name></expr></argument>, <argument pos:start="97:49" pos:end="97:54"><expr pos:start="97:49" pos:end="97:54"><operator pos:start="97:49" pos:end="97:49">&amp;</operator><name pos:start="97:50" pos:end="97:54">local</name></expr></argument>)</argument_list></call><operator pos:start="97:56" pos:end="97:56">)</operator></expr>)</condition> <block pos:start="97:59" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:17">

        <expr_stmt pos:start="99:9" pos:end="101:37"><expr pos:start="99:9" pos:end="101:36"><call pos:start="99:9" pos:end="101:36"><name pos:start="99:9" pos:end="99:18">error_setg</name><argument_list pos:start="99:19" pos:end="101:36">(<argument pos:start="99:20" pos:end="99:23"><expr pos:start="99:20" pos:end="99:23"><name pos:start="99:20" pos:end="99:23">errp</name></expr></argument>, <argument pos:start="99:26" pos:end="99:66"><expr pos:start="99:26" pos:end="99:66"><literal type="string" pos:start="99:26" pos:end="99:66">"address resolution failed for %s:%s: %s"</literal></expr></argument>, <argument pos:start="99:69" pos:end="99:72"><expr pos:start="99:69" pos:end="99:72"><name pos:start="99:69" pos:end="99:72">addr</name></expr></argument>, <argument pos:start="99:75" pos:end="99:78"><expr pos:start="99:75" pos:end="99:78"><name pos:start="99:75" pos:end="99:78">port</name></expr></argument>,

                   <argument pos:start="101:20" pos:end="101:35"><expr pos:start="101:20" pos:end="101:35"><call pos:start="101:20" pos:end="101:35"><name pos:start="101:20" pos:end="101:31">gai_strerror</name><argument_list pos:start="101:32" pos:end="101:35">(<argument pos:start="101:33" pos:end="101:34"><expr pos:start="101:33" pos:end="101:34"><name pos:start="101:33" pos:end="101:34">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:17">goto <name pos:start="103:14" pos:end="103:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:23">/* create socket */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:78"><expr pos:start="111:5" pos:end="111:77"><name pos:start="111:5" pos:end="111:8">sock</name> <operator pos:start="111:10" pos:end="111:10">=</operator> <call pos:start="111:12" pos:end="111:77"><name pos:start="111:12" pos:end="111:22">qemu_socket</name><argument_list pos:start="111:23" pos:end="111:77">(<argument pos:start="111:24" pos:end="111:38"><expr pos:start="111:24" pos:end="111:38"><name pos:start="111:24" pos:end="111:38"><name pos:start="111:24" pos:end="111:27">peer</name><operator pos:start="111:28" pos:end="111:29">-&gt;</operator><name pos:start="111:30" pos:end="111:38">ai_family</name></name></expr></argument>, <argument pos:start="111:41" pos:end="111:57"><expr pos:start="111:41" pos:end="111:57"><name pos:start="111:41" pos:end="111:57"><name pos:start="111:41" pos:end="111:44">peer</name><operator pos:start="111:45" pos:end="111:46">-&gt;</operator><name pos:start="111:47" pos:end="111:57">ai_socktype</name></name></expr></argument>, <argument pos:start="111:60" pos:end="111:76"><expr pos:start="111:60" pos:end="111:76"><name pos:start="111:60" pos:end="111:76"><name pos:start="111:60" pos:end="111:63">peer</name><operator pos:start="111:64" pos:end="111:65">-&gt;</operator><name pos:start="111:66" pos:end="111:76">ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:17">(<expr pos:start="113:9" pos:end="113:16"><name pos:start="113:9" pos:end="113:12">sock</name> <operator pos:start="113:14" pos:end="113:14">&lt;</operator> <literal type="number" pos:start="113:16" pos:end="113:16">0</literal></expr>)</condition> <block pos:start="113:19" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:17">

        <expr_stmt pos:start="115:9" pos:end="115:65"><expr pos:start="115:9" pos:end="115:64"><call pos:start="115:9" pos:end="115:64"><name pos:start="115:9" pos:end="115:24">error_setg_errno</name><argument_list pos:start="115:25" pos:end="115:64">(<argument pos:start="115:26" pos:end="115:29"><expr pos:start="115:26" pos:end="115:29"><name pos:start="115:26" pos:end="115:29">errp</name></expr></argument>, <argument pos:start="115:32" pos:end="115:36"><expr pos:start="115:32" pos:end="115:36"><name pos:start="115:32" pos:end="115:36">errno</name></expr></argument>, <argument pos:start="115:39" pos:end="115:63"><expr pos:start="115:39" pos:end="115:63"><literal type="string" pos:start="115:39" pos:end="115:63">"Failed to create socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="117:9" pos:end="117:17">goto <name pos:start="117:14" pos:end="117:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:32"><expr pos:start="121:5" pos:end="121:31"><call pos:start="121:5" pos:end="121:31"><name pos:start="121:5" pos:end="121:25">socket_set_fast_reuse</name><argument_list pos:start="121:26" pos:end="121:31">(<argument pos:start="121:27" pos:end="121:30"><expr pos:start="121:27" pos:end="121:30"><name pos:start="121:27" pos:end="121:30">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:21">/* bind socket */</comment>

    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:58">(<expr pos:start="127:9" pos:end="127:57"><call pos:start="127:9" pos:end="127:53"><name pos:start="127:9" pos:end="127:12">bind</name><argument_list pos:start="127:13" pos:end="127:53">(<argument pos:start="127:14" pos:end="127:17"><expr pos:start="127:14" pos:end="127:17"><name pos:start="127:14" pos:end="127:17">sock</name></expr></argument>, <argument pos:start="127:20" pos:end="127:33"><expr pos:start="127:20" pos:end="127:33"><name pos:start="127:20" pos:end="127:33"><name pos:start="127:20" pos:end="127:24">local</name><operator pos:start="127:25" pos:end="127:26">-&gt;</operator><name pos:start="127:27" pos:end="127:33">ai_addr</name></name></expr></argument>, <argument pos:start="127:36" pos:end="127:52"><expr pos:start="127:36" pos:end="127:52"><name pos:start="127:36" pos:end="127:52"><name pos:start="127:36" pos:end="127:40">local</name><operator pos:start="127:41" pos:end="127:42">-&gt;</operator><name pos:start="127:43" pos:end="127:52">ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator pos:start="127:55" pos:end="127:55">&lt;</operator> <literal type="number" pos:start="127:57" pos:end="127:57">0</literal></expr>)</condition> <block pos:start="127:60" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:17">

        <expr_stmt pos:start="129:9" pos:end="129:63"><expr pos:start="129:9" pos:end="129:62"><call pos:start="129:9" pos:end="129:62"><name pos:start="129:9" pos:end="129:24">error_setg_errno</name><argument_list pos:start="129:25" pos:end="129:62">(<argument pos:start="129:26" pos:end="129:29"><expr pos:start="129:26" pos:end="129:29"><name pos:start="129:26" pos:end="129:29">errp</name></expr></argument>, <argument pos:start="129:32" pos:end="129:36"><expr pos:start="129:32" pos:end="129:36"><name pos:start="129:32" pos:end="129:36">errno</name></expr></argument>, <argument pos:start="129:39" pos:end="129:61"><expr pos:start="129:39" pos:end="129:61"><literal type="string" pos:start="129:39" pos:end="129:61">"Failed to bind socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="131:9" pos:end="131:17">goto <name pos:start="131:14" pos:end="131:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:25">/* connect to peer */</comment>

    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:57">(<expr pos:start="139:9" pos:end="139:56"><call pos:start="139:9" pos:end="139:52"><name pos:start="139:9" pos:end="139:15">connect</name><argument_list pos:start="139:16" pos:end="139:52">(<argument pos:start="139:17" pos:end="139:20"><expr pos:start="139:17" pos:end="139:20"><name pos:start="139:17" pos:end="139:20">sock</name></expr></argument>,<argument pos:start="139:22" pos:end="139:34"><expr pos:start="139:22" pos:end="139:34"><name pos:start="139:22" pos:end="139:34"><name pos:start="139:22" pos:end="139:25">peer</name><operator pos:start="139:26" pos:end="139:27">-&gt;</operator><name pos:start="139:28" pos:end="139:34">ai_addr</name></name></expr></argument>,<argument pos:start="139:36" pos:end="139:51"><expr pos:start="139:36" pos:end="139:51"><name pos:start="139:36" pos:end="139:51"><name pos:start="139:36" pos:end="139:39">peer</name><operator pos:start="139:40" pos:end="139:41">-&gt;</operator><name pos:start="139:42" pos:end="139:51">ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator pos:start="139:54" pos:end="139:54">&lt;</operator> <literal type="number" pos:start="139:56" pos:end="139:56">0</literal></expr>)</condition> <block pos:start="139:59" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:17">

        <expr_stmt pos:start="141:9" pos:end="141:66"><expr pos:start="141:9" pos:end="141:65"><call pos:start="141:9" pos:end="141:65"><name pos:start="141:9" pos:end="141:24">error_setg_errno</name><argument_list pos:start="141:25" pos:end="141:65">(<argument pos:start="141:26" pos:end="141:29"><expr pos:start="141:26" pos:end="141:29"><name pos:start="141:26" pos:end="141:29">errp</name></expr></argument>, <argument pos:start="141:32" pos:end="141:36"><expr pos:start="141:32" pos:end="141:36"><name pos:start="141:32" pos:end="141:36">errno</name></expr></argument>, <argument pos:start="141:39" pos:end="141:64"><expr pos:start="141:39" pos:end="141:64"><literal type="string" pos:start="141:39" pos:end="141:64">"Failed to connect socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="143:9" pos:end="143:17">goto <name pos:start="143:14" pos:end="143:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:24"><expr pos:start="149:5" pos:end="149:23"><call pos:start="149:5" pos:end="149:23"><name pos:start="149:5" pos:end="149:16">freeaddrinfo</name><argument_list pos:start="149:17" pos:end="149:23">(<argument pos:start="149:18" pos:end="149:22"><expr pos:start="149:18" pos:end="149:22"><name pos:start="149:18" pos:end="149:22">local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:23"><expr pos:start="151:5" pos:end="151:22"><call pos:start="151:5" pos:end="151:22"><name pos:start="151:5" pos:end="151:16">freeaddrinfo</name><argument_list pos:start="151:17" pos:end="151:22">(<argument pos:start="151:18" pos:end="151:21"><expr pos:start="151:18" pos:end="151:21"><name pos:start="151:18" pos:end="151:21">peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="153:5" pos:end="153:16">return <expr pos:start="153:12" pos:end="153:15"><name pos:start="153:12" pos:end="153:15">sock</name></expr>;</return>



<label pos:start="157:1" pos:end="157:4"><name pos:start="157:1" pos:end="157:3">err</name>:</label>

    <if_stmt pos:start="159:5" pos:end="161:26"><if pos:start="159:5" pos:end="161:26">if <condition pos:start="159:8" pos:end="159:19">(<expr pos:start="159:9" pos:end="159:18"><operator pos:start="159:9" pos:end="159:9">-</operator><literal type="number" pos:start="159:10" pos:end="159:10">1</literal> <operator pos:start="159:12" pos:end="159:13">!=</operator> <name pos:start="159:15" pos:end="159:18">sock</name></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:26"><block_content pos:start="161:9" pos:end="161:26">

        <expr_stmt pos:start="161:9" pos:end="161:26"><expr pos:start="161:9" pos:end="161:25"><call pos:start="161:9" pos:end="161:25"><name pos:start="161:9" pos:end="161:19">closesocket</name><argument_list pos:start="161:20" pos:end="161:25">(<argument pos:start="161:21" pos:end="161:24"><expr pos:start="161:21" pos:end="161:24"><name pos:start="161:21" pos:end="161:24">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="163:5" pos:end="165:28"><if pos:start="163:5" pos:end="165:28">if <condition pos:start="163:8" pos:end="163:14">(<expr pos:start="163:9" pos:end="163:13"><name pos:start="163:9" pos:end="163:13">local</name></expr>)</condition><block type="pseudo" pos:start="165:9" pos:end="165:28"><block_content pos:start="165:9" pos:end="165:28">

        <expr_stmt pos:start="165:9" pos:end="165:28"><expr pos:start="165:9" pos:end="165:27"><call pos:start="165:9" pos:end="165:27"><name pos:start="165:9" pos:end="165:20">freeaddrinfo</name><argument_list pos:start="165:21" pos:end="165:27">(<argument pos:start="165:22" pos:end="165:26"><expr pos:start="165:22" pos:end="165:26"><name pos:start="165:22" pos:end="165:26">local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="167:5" pos:end="169:27"><if pos:start="167:5" pos:end="169:27">if <condition pos:start="167:8" pos:end="167:13">(<expr pos:start="167:9" pos:end="167:12"><name pos:start="167:9" pos:end="167:12">peer</name></expr>)</condition><block type="pseudo" pos:start="169:9" pos:end="169:27"><block_content pos:start="169:9" pos:end="169:27">

        <expr_stmt pos:start="169:9" pos:end="169:27"><expr pos:start="169:9" pos:end="169:26"><call pos:start="169:9" pos:end="169:26"><name pos:start="169:9" pos:end="169:20">freeaddrinfo</name><argument_list pos:start="169:21" pos:end="169:26">(<argument pos:start="169:22" pos:end="169:25"><expr pos:start="169:22" pos:end="169:25"><name pos:start="169:22" pos:end="169:25">peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="171:5" pos:end="171:14">return <expr pos:start="171:12" pos:end="171:13"><operator pos:start="171:12" pos:end="171:12">-</operator><literal type="number" pos:start="171:13" pos:end="171:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
