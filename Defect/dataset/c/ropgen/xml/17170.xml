<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17170.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">become_daemon</name><parameter_list pos:start="1:26" pos:end="1:46">(<parameter pos:start="1:27" pos:end="1:45"><decl pos:start="1:27" pos:end="1:45"><type pos:start="1:27" pos:end="1:38"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:45">pidfile</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="7:5" pos:end="78:0">

<cpp:ifndef pos:start="5:1" pos:end="5:14">#<cpp:directive pos:start="5:2" pos:end="5:7">ifndef</cpp:directive> <name pos:start="5:9" pos:end="5:14">_WIN32</name></cpp:ifndef>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:9">pid_t</name></type> <name pos:start="7:11" pos:end="7:13">pid</name></decl>, <decl pos:start="7:16" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:9"/><name pos:start="7:16" pos:end="7:18">sid</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:17"><expr pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:7">pid</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:16"><name pos:start="11:11" pos:end="11:14">fork</name><argument_list pos:start="11:15" pos:end="11:16">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:16">(<expr pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:11">pid</name> <operator pos:start="13:13" pos:end="13:13">&lt;</operator> <literal type="number" pos:start="13:15" pos:end="13:15">0</literal></expr>)</condition> <block pos:start="13:18" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:27">

        <expr_stmt pos:start="15:9" pos:end="15:27"><expr pos:start="15:9" pos:end="15:26"><call pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:12">exit</name><argument_list pos:start="15:13" pos:end="15:26">(<argument pos:start="15:14" pos:end="15:25"><expr pos:start="15:14" pos:end="15:25"><name pos:start="15:14" pos:end="15:25">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:16">(<expr pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:11">pid</name> <operator pos:start="19:13" pos:end="19:13">&gt;</operator> <literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr>)</condition> <block pos:start="19:18" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:27">

        <expr_stmt pos:start="21:9" pos:end="21:27"><expr pos:start="21:9" pos:end="21:26"><call pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:12">exit</name><argument_list pos:start="21:13" pos:end="21:26">(<argument pos:start="21:14" pos:end="21:25"><expr pos:start="21:14" pos:end="21:25"><name pos:start="21:14" pos:end="21:25">EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:15">pidfile</name></expr>)</condition> <block pos:start="27:18" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:9">

        <if_stmt pos:start="29:9" pos:end="35:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:38">(<expr pos:start="29:13" pos:end="29:37"><operator pos:start="29:13" pos:end="29:13">!</operator><call pos:start="29:14" pos:end="29:37"><name pos:start="29:14" pos:end="29:28">ga_open_pidfile</name><argument_list pos:start="29:29" pos:end="29:37">(<argument pos:start="29:30" pos:end="29:36"><expr pos:start="29:30" pos:end="29:36"><name pos:start="29:30" pos:end="29:36">pidfile</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:40" pos:end="35:9">{<block_content pos:start="31:13" pos:end="33:31">

            <expr_stmt pos:start="31:13" pos:end="31:51"><expr pos:start="31:13" pos:end="31:50"><call pos:start="31:13" pos:end="31:50"><name pos:start="31:13" pos:end="31:22">g_critical</name><argument_list pos:start="31:23" pos:end="31:50">(<argument pos:start="31:24" pos:end="31:49"><expr pos:start="31:24" pos:end="31:49"><literal type="string" pos:start="31:24" pos:end="31:49">"failed to create pidfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:31"><expr pos:start="33:13" pos:end="33:30"><call pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:16">exit</name><argument_list pos:start="33:17" pos:end="33:30">(<argument pos:start="33:18" pos:end="33:29"><expr pos:start="33:18" pos:end="33:29"><name pos:start="33:18" pos:end="33:29">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:13"><expr pos:start="41:5" pos:end="41:12"><call pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:9">umask</name><argument_list pos:start="41:10" pos:end="41:12">(<argument pos:start="41:11" pos:end="41:11"><expr pos:start="41:11" pos:end="41:11"><literal type="number" pos:start="41:11" pos:end="41:11">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:19"><expr pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:7">sid</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:18"><name pos:start="43:11" pos:end="43:16">setsid</name><argument_list pos:start="43:17" pos:end="43:18">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:16">(<expr pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:11">sid</name> <operator pos:start="45:13" pos:end="45:13">&lt;</operator> <literal type="number" pos:start="45:15" pos:end="45:15">0</literal></expr>)</condition> <block pos:start="45:18" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:18">

        <goto pos:start="47:9" pos:end="47:18">goto <name pos:start="47:14" pos:end="47:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:25">(<expr pos:start="51:9" pos:end="51:24"><operator pos:start="51:9" pos:end="51:9">(</operator><call pos:start="51:10" pos:end="51:19"><name pos:start="51:10" pos:end="51:14">chdir</name><argument_list pos:start="51:15" pos:end="51:19">(<argument pos:start="51:16" pos:end="51:18"><expr pos:start="51:16" pos:end="51:18"><literal type="string" pos:start="51:16" pos:end="51:18">"/"</literal></expr></argument>)</argument_list></call><operator pos:start="51:20" pos:end="51:20">)</operator> <operator pos:start="51:22" pos:end="51:22">&lt;</operator> <literal type="number" pos:start="51:24" pos:end="51:24">0</literal></expr>)</condition> <block pos:start="51:27" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:18">

        <goto pos:start="53:9" pos:end="53:18">goto <name pos:start="53:14" pos:end="53:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:24"><expr pos:start="59:5" pos:end="59:23"><call pos:start="59:5" pos:end="59:23"><name pos:start="59:5" pos:end="59:9">close</name><argument_list pos:start="59:10" pos:end="59:23">(<argument pos:start="59:11" pos:end="59:22"><expr pos:start="59:11" pos:end="59:22"><name pos:start="59:11" pos:end="59:22">STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:25"><expr pos:start="61:5" pos:end="61:24"><call pos:start="61:5" pos:end="61:24"><name pos:start="61:5" pos:end="61:9">close</name><argument_list pos:start="61:10" pos:end="61:24">(<argument pos:start="61:11" pos:end="61:23"><expr pos:start="61:11" pos:end="61:23"><name pos:start="61:11" pos:end="61:23">STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:25"><expr pos:start="63:5" pos:end="63:24"><call pos:start="63:5" pos:end="63:24"><name pos:start="63:5" pos:end="63:9">close</name><argument_list pos:start="63:10" pos:end="63:24">(<argument pos:start="63:11" pos:end="63:23"><expr pos:start="63:11" pos:end="63:23"><name pos:start="63:11" pos:end="63:23">STDERR_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="65:5" pos:end="65:11">return;</return>



<label pos:start="69:1" pos:end="69:5"><name pos:start="69:1" pos:end="69:4">fail</name>:</label>

    <expr_stmt pos:start="71:5" pos:end="71:20"><expr pos:start="71:5" pos:end="71:19"><call pos:start="71:5" pos:end="71:19"><name pos:start="71:5" pos:end="71:10">unlink</name><argument_list pos:start="71:11" pos:end="71:19">(<argument pos:start="71:12" pos:end="71:18"><expr pos:start="71:12" pos:end="71:18"><name pos:start="71:12" pos:end="71:18">pidfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:38"><expr pos:start="73:5" pos:end="73:37"><call pos:start="73:5" pos:end="73:37"><name pos:start="73:5" pos:end="73:14">g_critical</name><argument_list pos:start="73:15" pos:end="73:37">(<argument pos:start="73:16" pos:end="73:36"><expr pos:start="73:16" pos:end="73:36"><literal type="string" pos:start="73:16" pos:end="73:36">"failed to daemonize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="78:0"><expr pos:start="75:5" pos:end="75:22"><call pos:start="75:5" pos:end="75:22"><name pos:start="75:5" pos:end="75:8">exit</name><argument_list pos:start="75:9" pos:end="75:22">(<argument pos:start="75:10" pos:end="75:21"><expr pos:start="75:10" pos:end="75:21"><name pos:start="75:10" pos:end="75:21">EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
