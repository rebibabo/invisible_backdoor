<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10483.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">chr_read</name><parameter_list pos:start="1:21" pos:end="1:64">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:25">void</name> <modifier pos:start="1:27" pos:end="1:27">*</modifier></type><name pos:start="1:28" pos:end="1:33">opaque</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:50"><decl pos:start="1:36" pos:end="1:50"><type pos:start="1:36" pos:end="1:50"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:45">void</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">buf</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:63"><decl pos:start="1:53" pos:end="1:63"><type pos:start="1:53" pos:end="1:63"><name pos:start="1:53" pos:end="1:58">size_t</name></type> <name pos:start="1:60" pos:end="1:63">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:5">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">VirtIORNG</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:19">vrng</name> <init pos:start="5:21" pos:end="5:28">= <expr pos:start="5:23" pos:end="5:28"><name pos:start="5:23" pos:end="5:28">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">size_t</name></type> <name pos:start="7:12" pos:end="7:14">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">offset</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:30">(<expr pos:start="13:9" pos:end="13:29"><operator pos:start="13:9" pos:end="13:9">!</operator><call pos:start="13:10" pos:end="13:29"><name pos:start="13:10" pos:end="13:23">is_guest_ready</name><argument_list pos:start="13:24" pos:end="13:29">(<argument pos:start="13:25" pos:end="13:28"><expr pos:start="13:25" pos:end="13:28"><name pos:start="13:25" pos:end="13:28">vrng</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:32" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:15"><expr pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:10">offset</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr>;</expr_stmt>

    <while pos:start="23:5" pos:end="43:5">while <condition pos:start="23:11" pos:end="23:25">(<expr pos:start="23:12" pos:end="23:24"><name pos:start="23:12" pos:end="23:17">offset</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <name pos:start="23:21" pos:end="23:24">size</name></expr>)</condition> <block pos:start="23:27" pos:end="43:5">{<block_content pos:start="25:9" pos:end="41:29">

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:31">(<expr pos:start="25:13" pos:end="25:30"><operator pos:start="25:13" pos:end="25:13">!</operator><call pos:start="25:14" pos:end="25:30"><name pos:start="25:14" pos:end="25:24">pop_an_elem</name><argument_list pos:start="25:25" pos:end="25:30">(<argument pos:start="25:26" pos:end="25:29"><expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">vrng</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:33" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:18">

            <break pos:start="27:13" pos:end="27:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="31:9" pos:end="33:59"><expr pos:start="31:9" pos:end="33:58"><name pos:start="31:9" pos:end="31:11">len</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="33:58"><name pos:start="31:15" pos:end="31:26">iov_from_buf</name><argument_list pos:start="31:27" pos:end="33:58">(<argument pos:start="31:28" pos:end="31:43"><expr pos:start="31:28" pos:end="31:43"><name pos:start="31:28" pos:end="31:43"><name pos:start="31:28" pos:end="31:31">vrng</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:37">elem</name><operator pos:start="31:38" pos:end="31:38">.</operator><name pos:start="31:39" pos:end="31:43">in_sg</name></name></expr></argument>, <argument pos:start="31:46" pos:end="31:62"><expr pos:start="31:46" pos:end="31:62"><name pos:start="31:46" pos:end="31:62"><name pos:start="31:46" pos:end="31:49">vrng</name><operator pos:start="31:50" pos:end="31:51">-&gt;</operator><name pos:start="31:52" pos:end="31:55">elem</name><operator pos:start="31:56" pos:end="31:56">.</operator><name pos:start="31:57" pos:end="31:62">in_num</name></name></expr></argument>,

                           <argument pos:start="33:28" pos:end="33:28"><expr pos:start="33:28" pos:end="33:28"><literal type="number" pos:start="33:28" pos:end="33:28">0</literal></expr></argument>, <argument pos:start="33:31" pos:end="33:42"><expr pos:start="33:31" pos:end="33:42"><name pos:start="33:31" pos:end="33:33">buf</name> <operator pos:start="33:35" pos:end="33:35">+</operator> <name pos:start="33:37" pos:end="33:42">offset</name></expr></argument>, <argument pos:start="33:45" pos:end="33:57"><expr pos:start="33:45" pos:end="33:57"><name pos:start="33:45" pos:end="33:48">size</name> <operator pos:start="33:50" pos:end="33:50">-</operator> <name pos:start="33:52" pos:end="33:57">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:22"><expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:14">offset</name> <operator pos:start="35:16" pos:end="35:17">+=</operator> <name pos:start="35:19" pos:end="35:21">len</name></expr>;</expr_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:51"><expr pos:start="39:9" pos:end="39:50"><call pos:start="39:9" pos:end="39:50"><name pos:start="39:9" pos:end="39:22">virtqueue_push</name><argument_list pos:start="39:23" pos:end="39:50">(<argument pos:start="39:24" pos:end="39:31"><expr pos:start="39:24" pos:end="39:31"><name pos:start="39:24" pos:end="39:31"><name pos:start="39:24" pos:end="39:27">vrng</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:31">vq</name></name></expr></argument>, <argument pos:start="39:34" pos:end="39:44"><expr pos:start="39:34" pos:end="39:44"><operator pos:start="39:34" pos:end="39:34">&amp;</operator><name pos:start="39:35" pos:end="39:44"><name pos:start="39:35" pos:end="39:38">vrng</name><operator pos:start="39:39" pos:end="39:40">-&gt;</operator><name pos:start="39:41" pos:end="39:44">elem</name></name></expr></argument>, <argument pos:start="39:47" pos:end="39:49"><expr pos:start="39:47" pos:end="39:49"><name pos:start="39:47" pos:end="39:49">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:29"><expr pos:start="41:9" pos:end="41:28"><name pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:12">vrng</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:20">popped</name></name> <operator pos:start="41:22" pos:end="41:22">=</operator> <name pos:start="41:24" pos:end="41:28">false</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="45:5" pos:end="45:41"><expr pos:start="45:5" pos:end="45:40"><call pos:start="45:5" pos:end="45:40"><name pos:start="45:5" pos:end="45:17">virtio_notify</name><argument_list pos:start="45:18" pos:end="45:40">(<argument pos:start="45:19" pos:end="45:29"><expr pos:start="45:19" pos:end="45:29"><operator pos:start="45:19" pos:end="45:19">&amp;</operator><name pos:start="45:20" pos:end="45:29"><name pos:start="45:20" pos:end="45:23">vrng</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:29">vdev</name></name></expr></argument>, <argument pos:start="45:32" pos:end="45:39"><expr pos:start="45:32" pos:end="45:39"><name pos:start="45:32" pos:end="45:39"><name pos:start="45:32" pos:end="45:35">vrng</name><operator pos:start="45:36" pos:end="45:37">-&gt;</operator><name pos:start="45:38" pos:end="45:39">vq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="57:7">/*

     * Lastly, if we had multiple elems queued by the guest, and we

     * didn't have enough data to fill them all, indicate we want more

     * data.

     */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:28"><expr pos:start="59:5" pos:end="59:27"><name pos:start="59:5" pos:end="59:7">len</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <call pos:start="59:11" pos:end="59:27"><name pos:start="59:11" pos:end="59:21">pop_an_elem</name><argument_list pos:start="59:22" pos:end="59:27">(<argument pos:start="59:23" pos:end="59:26"><expr pos:start="59:23" pos:end="59:26"><name pos:start="59:23" pos:end="59:26">vrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:12">(<expr pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">len</name></expr>)</condition> <block pos:start="61:14" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:69">

        <expr_stmt pos:start="63:9" pos:end="63:69"><expr pos:start="63:9" pos:end="63:68"><call pos:start="63:9" pos:end="63:68"><name pos:start="63:9" pos:end="63:35">rng_backend_request_entropy</name><argument_list pos:start="63:36" pos:end="63:68">(<argument pos:start="63:37" pos:end="63:45"><expr pos:start="63:37" pos:end="63:45"><name pos:start="63:37" pos:end="63:45"><name pos:start="63:37" pos:end="63:40">vrng</name><operator pos:start="63:41" pos:end="63:42">-&gt;</operator><name pos:start="63:43" pos:end="63:45">rng</name></name></expr></argument>, <argument pos:start="63:48" pos:end="63:51"><expr pos:start="63:48" pos:end="63:51"><name pos:start="63:48" pos:end="63:51">size</name></expr></argument>, <argument pos:start="63:54" pos:end="63:61"><expr pos:start="63:54" pos:end="63:61"><name pos:start="63:54" pos:end="63:61">chr_read</name></expr></argument>, <argument pos:start="63:64" pos:end="63:67"><expr pos:start="63:64" pos:end="63:67"><name pos:start="63:64" pos:end="63:67">vrng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
