<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2097.c" pos:tabs="8"><function pos:start="1:1" pos:end="249:39"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">decode_nal_units</name><parameter_list pos:start="1:28" pos:end="2:48">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:39">H264Context</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">h</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:62"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:57">uint8_t</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:62">buf</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:76"><decl pos:start="1:65" pos:end="1:76"><type pos:start="1:65" pos:end="1:76"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:76">buf_size</name></decl></parameter>,
                            <parameter pos:start="2:29" pos:end="2:47"><decl pos:start="2:29" pos:end="2:47"><type pos:start="2:29" pos:end="2:47"><name pos:start="2:29" pos:end="2:31">int</name></type> <name pos:start="2:33" pos:end="2:47">parse_extradata</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="249:39">{<block_content pos:start="4:5" pos:end="249:39">
    <decl_stmt pos:start="4:5" pos:end="4:43"><decl pos:start="4:5" pos:end="4:42"><type pos:start="4:5" pos:end="4:25"><name pos:start="4:5" pos:end="4:18">AVCodecContext</name> <modifier pos:start="4:20" pos:end="4:20">*</modifier><specifier pos:start="4:21" pos:end="4:25">const</specifier></type> <name pos:start="4:27" pos:end="4:31">avctx</name> <init pos:start="4:33" pos:end="4:42">= <expr pos:start="4:35" pos:end="4:42"><name pos:start="4:35" pos:end="4:42"><name pos:start="4:35" pos:end="4:35">h</name><operator pos:start="4:36" pos:end="4:37">-&gt;</operator><name pos:start="4:38" pos:end="4:42">avctx</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">H264SliceContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">sl</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:18"><decl pos:start="6:5" pos:end="6:17"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:17">buf_index</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">unsigned</name></type> <name pos:start="7:14" pos:end="7:26">context_count</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:17"><decl pos:start="8:5" pos:end="8:16"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:16">next_avc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">nals_needed</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt> <comment type="line" format="doxygen" pos:start="9:26" pos:end="9:99">///&lt; number of NALs that need decoding before the next frame thread starts</comment>
    <decl_stmt pos:start="10:5" pos:end="10:18"><decl pos:start="10:5" pos:end="10:17"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:17">nal_index</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">idr_cleared</name><init pos:start="11:20" pos:end="11:21">=<expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:16"><decl pos:start="12:5" pos:end="12:15"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:11">ret</name> <init pos:start="12:13" pos:end="12:15">= <expr pos:start="12:15" pos:end="12:15"><literal type="number" pos:start="12:15" pos:end="12:15">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:24"><expr pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:5">h</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:20">nal_unit_type</name></name><operator pos:start="13:21" pos:end="13:21">=</operator> <literal type="number" pos:start="13:23" pos:end="13:23">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="14:5" pos:end="15:35"><if pos:start="14:5" pos:end="15:35">if<condition pos:start="14:7" pos:end="14:31">(<expr pos:start="14:8" pos:end="14:30"><operator pos:start="14:8" pos:end="14:8">!</operator><name pos:start="14:9" pos:end="14:30"><name pos:start="14:9" pos:end="14:9">h</name><operator pos:start="14:10" pos:end="14:11">-&gt;</operator><name pos:start="14:12" pos:end="14:30">slice_context_count</name></name></expr>)</condition><block type="pseudo" pos:start="15:10" pos:end="15:35"><block_content pos:start="15:10" pos:end="15:35">
         <expr_stmt pos:start="15:10" pos:end="15:35"><expr pos:start="15:10" pos:end="15:34"><name pos:start="15:10" pos:end="15:31"><name pos:start="15:10" pos:end="15:10">h</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:31">slice_context_count</name></name><operator pos:start="15:32" pos:end="15:32">=</operator> <literal type="number" pos:start="15:34" pos:end="15:34">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:45"><expr pos:start="16:5" pos:end="16:44"><name pos:start="16:5" pos:end="16:19"><name pos:start="16:5" pos:end="16:5">h</name><operator pos:start="16:6" pos:end="16:7">-&gt;</operator><name pos:start="16:8" pos:end="16:19">max_contexts</name></name> <operator pos:start="16:21" pos:end="16:21">=</operator> <name pos:start="16:23" pos:end="16:44"><name pos:start="16:23" pos:end="16:23">h</name><operator pos:start="16:24" pos:end="16:25">-&gt;</operator><name pos:start="16:26" pos:end="16:44">slice_context_count</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="17:5" pos:end="249:39"><if pos:start="17:5" pos:end="249:39">if <condition pos:start="17:8" pos:end="17:49">(<expr pos:start="17:9" pos:end="17:48"><operator pos:start="17:9" pos:end="17:9">!</operator><operator pos:start="17:10" pos:end="17:10">(</operator><name pos:start="17:11" pos:end="17:23"><name pos:start="17:11" pos:end="17:15">avctx</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:23">flags2</name></name> <operator pos:start="17:25" pos:end="17:25">&amp;</operator> <name pos:start="17:27" pos:end="17:47">AV_CODEC_FLAG2_CHUNKS</name><operator pos:start="17:48" pos:end="17:48">)</operator></expr>)</condition> <block pos:start="17:51" pos:end="249:39">{<block_content pos:start="18:9" pos:end="249:39">
        <expr_stmt pos:start="18:9" pos:end="18:29"><expr pos:start="18:9" pos:end="18:28"><name pos:start="18:9" pos:end="18:24"><name pos:start="18:9" pos:end="18:9">h</name><operator pos:start="18:10" pos:end="18:11">-&gt;</operator><name pos:start="18:12" pos:end="18:24">current_slice</name></name> <operator pos:start="18:26" pos:end="18:26">=</operator> <literal type="number" pos:start="18:28" pos:end="18:28">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="19:9" pos:end="20:34"><if pos:start="19:9" pos:end="20:34">if <condition pos:start="19:12" pos:end="19:28">(<expr pos:start="19:13" pos:end="19:27"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:27"><name pos:start="19:14" pos:end="19:14">h</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:27">first_field</name></name></expr>)</condition><block type="pseudo" pos:start="20:13" pos:end="20:34"><block_content pos:start="20:13" pos:end="20:34">
            <expr_stmt pos:start="20:13" pos:end="20:34"><expr pos:start="20:13" pos:end="20:33"><name pos:start="20:13" pos:end="20:26"><name pos:start="20:13" pos:end="20:13">h</name><operator pos:start="20:14" pos:end="20:15">-&gt;</operator><name pos:start="20:16" pos:end="20:26">cur_pic_ptr</name></name> <operator pos:start="20:28" pos:end="20:28">=</operator> <name pos:start="20:30" pos:end="20:33">NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="21:9" pos:end="21:29"><expr pos:start="21:9" pos:end="21:28"><call pos:start="21:9" pos:end="21:28"><name pos:start="21:9" pos:end="21:25">ff_h264_reset_sei</name><argument_list pos:start="21:26" pos:end="21:28">(<argument pos:start="21:27" pos:end="21:27"><expr pos:start="21:27" pos:end="21:27"><name pos:start="21:27" pos:end="21:27">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="22:5" pos:end="249:39"><if pos:start="22:5" pos:end="249:39">if <condition pos:start="22:8" pos:end="22:32">(<expr pos:start="22:9" pos:end="22:31"><name pos:start="22:9" pos:end="22:26"><name pos:start="22:9" pos:end="22:9">h</name><operator pos:start="22:10" pos:end="22:11">-&gt;</operator><name pos:start="22:12" pos:end="22:26">nal_length_size</name></name> <operator pos:start="22:28" pos:end="22:29">==</operator> <literal type="number" pos:start="22:31" pos:end="22:31">4</literal></expr>)</condition> <block pos:start="22:34" pos:end="249:39">{<block_content pos:start="23:9" pos:end="249:39">
        <if_stmt pos:start="23:9" pos:end="26:26"><if pos:start="23:9" pos:end="25:9">if <condition pos:start="23:12" pos:end="23:85">(<expr pos:start="23:13" pos:end="23:84"><name pos:start="23:13" pos:end="23:20">buf_size</name> <operator pos:start="23:22" pos:end="23:22">&gt;</operator> <literal type="number" pos:start="23:24" pos:end="23:24">8</literal> <operator pos:start="23:26" pos:end="23:27">&amp;&amp;</operator> <call pos:start="23:29" pos:end="23:40"><name pos:start="23:29" pos:end="23:35">AV_RB32</name><argument_list pos:start="23:36" pos:end="23:40">(<argument pos:start="23:37" pos:end="23:39"><expr pos:start="23:37" pos:end="23:39"><name pos:start="23:37" pos:end="23:39">buf</name></expr></argument>)</argument_list></call> <operator pos:start="23:42" pos:end="23:43">==</operator> <literal type="number" pos:start="23:45" pos:end="23:45">1</literal> <operator pos:start="23:47" pos:end="23:48">&amp;&amp;</operator> <call pos:start="23:50" pos:end="23:63"><name pos:start="23:50" pos:end="23:56">AV_RB32</name><argument_list pos:start="23:57" pos:end="23:63">(<argument pos:start="23:58" pos:end="23:62"><expr pos:start="23:58" pos:end="23:62"><name pos:start="23:58" pos:end="23:60">buf</name><operator pos:start="23:61" pos:end="23:61">+</operator><literal type="number" pos:start="23:62" pos:end="23:62">5</literal></expr></argument>)</argument_list></call> <operator pos:start="23:65" pos:end="23:65">&gt;</operator> <operator pos:start="23:67" pos:end="23:67">(</operator><name pos:start="23:68" pos:end="23:75">unsigned</name><operator pos:start="23:76" pos:end="23:76">)</operator><name pos:start="23:77" pos:end="23:84">buf_size</name></expr>)</condition> <block pos:start="23:87" pos:end="25:9">{<block_content pos:start="24:13" pos:end="24:26">
            <expr_stmt pos:start="24:13" pos:end="24:26"><expr pos:start="24:13" pos:end="24:25"><name pos:start="24:13" pos:end="24:21"><name pos:start="24:13" pos:end="24:13">h</name><operator pos:start="24:14" pos:end="24:15">-&gt;</operator><name pos:start="24:16" pos:end="24:21">is_avc</name></name> <operator pos:start="24:23" pos:end="24:23">=</operator> <literal type="number" pos:start="24:25" pos:end="24:25">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif" pos:start="25:10" pos:end="26:26">else if<condition pos:start="25:17" pos:end="25:88">(<expr pos:start="25:18" pos:end="25:87"><name pos:start="25:18" pos:end="25:25">buf_size</name> <operator pos:start="25:27" pos:end="25:27">&gt;</operator> <literal type="number" pos:start="25:29" pos:end="25:29">3</literal> <operator pos:start="25:31" pos:end="25:32">&amp;&amp;</operator> <call pos:start="25:34" pos:end="25:45"><name pos:start="25:34" pos:end="25:40">AV_RB32</name><argument_list pos:start="25:41" pos:end="25:45">(<argument pos:start="25:42" pos:end="25:44"><expr pos:start="25:42" pos:end="25:44"><name pos:start="25:42" pos:end="25:44">buf</name></expr></argument>)</argument_list></call> <operator pos:start="25:47" pos:end="25:47">&gt;</operator> <literal type="number" pos:start="25:49" pos:end="25:49">1</literal> <operator pos:start="25:51" pos:end="25:52">&amp;&amp;</operator> <call pos:start="25:54" pos:end="25:65"><name pos:start="25:54" pos:end="25:60">AV_RB32</name><argument_list pos:start="25:61" pos:end="25:65">(<argument pos:start="25:62" pos:end="25:64"><expr pos:start="25:62" pos:end="25:64"><name pos:start="25:62" pos:end="25:64">buf</name></expr></argument>)</argument_list></call> <operator pos:start="25:67" pos:end="25:68">&lt;=</operator> <operator pos:start="25:70" pos:end="25:70">(</operator><name pos:start="25:71" pos:end="25:78">unsigned</name><operator pos:start="25:79" pos:end="25:79">)</operator><name pos:start="25:80" pos:end="25:87">buf_size</name></expr>)</condition><block type="pseudo" pos:start="26:13" pos:end="26:26"><block_content pos:start="26:13" pos:end="26:26">
            <expr_stmt pos:start="26:13" pos:end="26:26"><expr pos:start="26:13" pos:end="26:25"><name pos:start="26:13" pos:end="26:21"><name pos:start="26:13" pos:end="26:13">h</name><operator pos:start="26:14" pos:end="26:15">-&gt;</operator><name pos:start="26:16" pos:end="26:21">is_avc</name></name> <operator pos:start="26:23" pos:end="26:23">=</operator> <literal type="number" pos:start="26:25" pos:end="26:25">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="27:5" pos:end="28:60"><if pos:start="27:5" pos:end="28:60">if <condition pos:start="27:8" pos:end="27:52">(<expr pos:start="27:9" pos:end="27:51"><name pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:13">avctx</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:33">active_thread_type</name></name> <operator pos:start="27:35" pos:end="27:35">&amp;</operator> <name pos:start="27:37" pos:end="27:51">FF_THREAD_FRAME</name></expr>)</condition><block type="pseudo" pos:start="28:9" pos:end="28:60"><block_content pos:start="28:9" pos:end="28:60">
        <expr_stmt pos:start="28:9" pos:end="28:60"><expr pos:start="28:9" pos:end="28:59"><name pos:start="28:9" pos:end="28:19">nals_needed</name> <operator pos:start="28:21" pos:end="28:21">=</operator> <call pos:start="28:23" pos:end="28:59"><name pos:start="28:23" pos:end="28:41">get_last_needed_nal</name><argument_list pos:start="28:42" pos:end="28:59">(<argument pos:start="28:43" pos:end="28:43"><expr pos:start="28:43" pos:end="28:43"><name pos:start="28:43" pos:end="28:43">h</name></expr></argument>, <argument pos:start="28:46" pos:end="28:48"><expr pos:start="28:46" pos:end="28:48"><name pos:start="28:46" pos:end="28:48">buf</name></expr></argument>, <argument pos:start="28:51" pos:end="28:58"><expr pos:start="28:51" pos:end="28:58"><name pos:start="28:51" pos:end="28:58">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <block pos:start="29:5" pos:end="249:39">{<block_content pos:start="30:9" pos:end="249:39">
        <expr_stmt pos:start="30:9" pos:end="30:26"><expr pos:start="30:9" pos:end="30:25"><name pos:start="30:9" pos:end="30:17">buf_index</name>     <operator pos:start="30:23" pos:end="30:23">=</operator> <literal type="number" pos:start="30:25" pos:end="30:25">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="31:9" pos:end="31:26"><expr pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:21">context_count</name> <operator pos:start="31:23" pos:end="31:23">=</operator> <literal type="number" pos:start="31:25" pos:end="31:25">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="32:9" pos:end="32:49"><expr pos:start="32:9" pos:end="32:48"><name pos:start="32:9" pos:end="32:16">next_avc</name>      <operator pos:start="32:23" pos:end="32:23">=</operator> <ternary pos:start="32:25" pos:end="32:48"><condition pos:start="32:25" pos:end="32:35"><expr pos:start="32:25" pos:end="32:33"><name pos:start="32:25" pos:end="32:33"><name pos:start="32:25" pos:end="32:25">h</name><operator pos:start="32:26" pos:end="32:27">-&gt;</operator><name pos:start="32:28" pos:end="32:33">is_avc</name></name></expr> ?</condition><then pos:start="32:37" pos:end="32:37"> <expr pos:start="32:37" pos:end="32:37"><literal type="number" pos:start="32:37" pos:end="32:37">0</literal></expr> </then><else pos:start="32:39" pos:end="32:48">: <expr pos:start="32:41" pos:end="32:48"><name pos:start="32:41" pos:end="32:48">buf_size</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt pos:start="33:9" pos:end="33:26"><expr pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:17">nal_index</name>     <operator pos:start="33:23" pos:end="33:23">=</operator> <literal type="number" pos:start="33:25" pos:end="33:25">0</literal></expr>;</expr_stmt>
        <for pos:start="34:9" pos:end="249:39">for <control pos:start="34:13" pos:end="34:16">(<init pos:start="34:14" pos:end="34:14">;</init><condition pos:start="34:15" pos:end="34:15">;</condition><incr/>)</control> <block pos:start="34:18" pos:end="249:39">{<block_content pos:start="35:13" pos:end="249:39">
            <decl_stmt pos:start="35:13" pos:end="35:25"><decl pos:start="35:13" pos:end="35:24"><type pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">int</name></type> <name pos:start="35:17" pos:end="35:24">consumed</name></decl>;</decl_stmt>
            <decl_stmt pos:start="36:13" pos:end="36:27"><decl pos:start="36:13" pos:end="36:26"><type pos:start="36:13" pos:end="36:15"><name pos:start="36:13" pos:end="36:15">int</name></type> <name pos:start="36:17" pos:end="36:26">dst_length</name></decl>;</decl_stmt>
            <decl_stmt pos:start="37:13" pos:end="37:27"><decl pos:start="37:13" pos:end="37:26"><type pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:15">int</name></type> <name pos:start="37:17" pos:end="37:26">bit_length</name></decl>;</decl_stmt>
            <decl_stmt pos:start="38:13" pos:end="38:31"><decl pos:start="38:13" pos:end="38:30"><type pos:start="38:13" pos:end="38:27"><specifier pos:start="38:13" pos:end="38:17">const</specifier> <name pos:start="38:19" pos:end="38:25">uint8_t</name> <modifier pos:start="38:27" pos:end="38:27">*</modifier></type><name pos:start="38:28" pos:end="38:30">ptr</name></decl>;</decl_stmt>
            <decl_stmt pos:start="39:13" pos:end="39:28"><decl pos:start="39:13" pos:end="39:27"><type pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">int</name></type> <name pos:start="39:17" pos:end="39:23">nalsize</name> <init pos:start="39:25" pos:end="39:27">= <expr pos:start="39:27" pos:end="39:27"><literal type="number" pos:start="39:27" pos:end="39:27">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt pos:start="40:13" pos:end="40:20"><decl pos:start="40:13" pos:end="40:19"><type pos:start="40:13" pos:end="40:15"><name pos:start="40:13" pos:end="40:15">int</name></type> <name pos:start="40:17" pos:end="40:19">err</name></decl>;</decl_stmt>
            <if_stmt pos:start="41:13" pos:end="249:39"><if pos:start="41:13" pos:end="46:13">if <condition pos:start="41:16" pos:end="41:38">(<expr pos:start="41:17" pos:end="41:37"><name pos:start="41:17" pos:end="41:25">buf_index</name> <operator pos:start="41:27" pos:end="41:28">&gt;=</operator> <name pos:start="41:30" pos:end="41:37">next_avc</name></expr>)</condition> <block pos:start="41:40" pos:end="46:13">{<block_content pos:start="42:17" pos:end="45:47">
                <expr_stmt pos:start="42:17" pos:end="42:72"><expr pos:start="42:17" pos:end="42:71"><name pos:start="42:17" pos:end="42:23">nalsize</name> <operator pos:start="42:25" pos:end="42:25">=</operator> <call pos:start="42:27" pos:end="42:71"><name pos:start="42:27" pos:end="42:41">get_avc_nalsize</name><argument_list pos:start="42:42" pos:end="42:71">(<argument pos:start="42:43" pos:end="42:43"><expr pos:start="42:43" pos:end="42:43"><name pos:start="42:43" pos:end="42:43">h</name></expr></argument>, <argument pos:start="42:46" pos:end="42:48"><expr pos:start="42:46" pos:end="42:48"><name pos:start="42:46" pos:end="42:48">buf</name></expr></argument>, <argument pos:start="42:51" pos:end="42:58"><expr pos:start="42:51" pos:end="42:58"><name pos:start="42:51" pos:end="42:58">buf_size</name></expr></argument>, <argument pos:start="42:61" pos:end="42:70"><expr pos:start="42:61" pos:end="42:70"><operator pos:start="42:61" pos:end="42:61">&amp;</operator><name pos:start="42:62" pos:end="42:70">buf_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="43:17" pos:end="44:26"><if pos:start="43:17" pos:end="44:26">if <condition pos:start="43:20" pos:end="43:32">(<expr pos:start="43:21" pos:end="43:31"><name pos:start="43:21" pos:end="43:27">nalsize</name> <operator pos:start="43:29" pos:end="43:29">&lt;</operator> <literal type="number" pos:start="43:31" pos:end="43:31">0</literal></expr>)</condition><block type="pseudo" pos:start="44:21" pos:end="44:26"><block_content pos:start="44:21" pos:end="44:26">
                    <break pos:start="44:21" pos:end="44:26">break;</break></block_content></block></if></if_stmt>
                <expr_stmt pos:start="45:17" pos:end="45:47"><expr pos:start="45:17" pos:end="45:46"><name pos:start="45:17" pos:end="45:24">next_avc</name> <operator pos:start="45:26" pos:end="45:26">=</operator> <name pos:start="45:28" pos:end="45:36">buf_index</name> <operator pos:start="45:38" pos:end="45:38">+</operator> <name pos:start="45:40" pos:end="45:46">nalsize</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="46:15" pos:end="249:39">else <block pos:start="46:20" pos:end="249:39">{<block_content pos:start="47:17" pos:end="249:39">
                <expr_stmt pos:start="47:17" pos:end="47:80"><expr pos:start="47:17" pos:end="47:79"><name pos:start="47:17" pos:end="47:25">buf_index</name> <operator pos:start="47:27" pos:end="47:27">=</operator> <call pos:start="47:29" pos:end="47:79"><name pos:start="47:29" pos:end="47:43">find_start_code</name><argument_list pos:start="47:44" pos:end="47:79">(<argument pos:start="47:45" pos:end="47:47"><expr pos:start="47:45" pos:end="47:47"><name pos:start="47:45" pos:end="47:47">buf</name></expr></argument>, <argument pos:start="47:50" pos:end="47:57"><expr pos:start="47:50" pos:end="47:57"><name pos:start="47:50" pos:end="47:57">buf_size</name></expr></argument>, <argument pos:start="47:60" pos:end="47:68"><expr pos:start="47:60" pos:end="47:68"><name pos:start="47:60" pos:end="47:68">buf_index</name></expr></argument>, <argument pos:start="47:71" pos:end="47:78"><expr pos:start="47:71" pos:end="47:78"><name pos:start="47:71" pos:end="47:78">next_avc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="48:17" pos:end="49:26"><if pos:start="48:17" pos:end="49:26">if <condition pos:start="48:20" pos:end="48:42">(<expr pos:start="48:21" pos:end="48:41"><name pos:start="48:21" pos:end="48:29">buf_index</name> <operator pos:start="48:31" pos:end="48:32">&gt;=</operator> <name pos:start="48:34" pos:end="48:41">buf_size</name></expr>)</condition><block type="pseudo" pos:start="49:21" pos:end="49:26"><block_content pos:start="49:21" pos:end="49:26">
                    <break pos:start="49:21" pos:end="49:26">break;</break></block_content></block></if></if_stmt>
                <if_stmt pos:start="50:17" pos:end="51:29"><if pos:start="50:17" pos:end="51:29">if <condition pos:start="50:20" pos:end="50:42">(<expr pos:start="50:21" pos:end="50:41"><name pos:start="50:21" pos:end="50:29">buf_index</name> <operator pos:start="50:31" pos:end="50:32">&gt;=</operator> <name pos:start="50:34" pos:end="50:41">next_avc</name></expr>)</condition><block type="pseudo" pos:start="51:21" pos:end="51:29"><block_content pos:start="51:21" pos:end="51:29">
                    <continue pos:start="51:21" pos:end="51:29">continue;</continue></block_content></block></if></if_stmt>
            <expr_stmt pos:start="52:13" pos:end="52:46"><expr pos:start="52:13" pos:end="52:45"><name pos:start="52:13" pos:end="52:14">sl</name> <operator pos:start="52:16" pos:end="52:16">=</operator> <operator pos:start="52:18" pos:end="52:18">&amp;</operator><name pos:start="52:19" pos:end="52:45"><name pos:start="52:19" pos:end="52:19">h</name><operator pos:start="52:20" pos:end="52:21">-&gt;</operator><name pos:start="52:22" pos:end="52:30">slice_ctx</name><index pos:start="52:31" pos:end="52:45">[<expr pos:start="52:32" pos:end="52:44"><name pos:start="52:32" pos:end="52:44">context_count</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt pos:start="53:13" pos:end="54:70"><expr pos:start="53:13" pos:end="54:69"><name pos:start="53:13" pos:end="53:15">ptr</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="54:69"><name pos:start="53:19" pos:end="53:36">ff_h264_decode_nal</name><argument_list pos:start="53:37" pos:end="54:69">(<argument pos:start="53:38" pos:end="53:38"><expr pos:start="53:38" pos:end="53:38"><name pos:start="53:38" pos:end="53:38">h</name></expr></argument>, <argument pos:start="53:41" pos:end="53:42"><expr pos:start="53:41" pos:end="53:42"><name pos:start="53:41" pos:end="53:42">sl</name></expr></argument>, <argument pos:start="53:45" pos:end="53:59"><expr pos:start="53:45" pos:end="53:59"><name pos:start="53:45" pos:end="53:47">buf</name> <operator pos:start="53:49" pos:end="53:49">+</operator> <name pos:start="53:51" pos:end="53:59">buf_index</name></expr></argument>, <argument pos:start="53:62" pos:end="53:72"><expr pos:start="53:62" pos:end="53:72"><operator pos:start="53:62" pos:end="53:62">&amp;</operator><name pos:start="53:63" pos:end="53:72">dst_length</name></expr></argument>,
                                     <argument pos:start="54:38" pos:end="54:46"><expr pos:start="54:38" pos:end="54:46"><operator pos:start="54:38" pos:end="54:38">&amp;</operator><name pos:start="54:39" pos:end="54:46">consumed</name></expr></argument>, <argument pos:start="54:49" pos:end="54:68"><expr pos:start="54:49" pos:end="54:68"><name pos:start="54:49" pos:end="54:56">next_avc</name> <operator pos:start="54:58" pos:end="54:58">-</operator> <name pos:start="54:60" pos:end="54:68">buf_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="55:13" pos:end="249:39"><if pos:start="55:13" pos:end="249:39">if <condition pos:start="55:16" pos:end="55:39">(<expr pos:start="55:17" pos:end="55:38"><operator pos:start="55:17" pos:end="55:17">!</operator><name pos:start="55:18" pos:end="55:20">ptr</name> <operator pos:start="55:22" pos:end="55:23">||</operator> <name pos:start="55:25" pos:end="55:34">dst_length</name> <operator pos:start="55:36" pos:end="55:36">&lt;</operator> <literal type="number" pos:start="55:38" pos:end="55:38">0</literal></expr>)</condition> <block pos:start="55:41" pos:end="249:39">{<block_content pos:start="56:17" pos:end="249:39">
                <expr_stmt pos:start="56:17" pos:end="56:25"><expr pos:start="56:17" pos:end="56:24"><name pos:start="56:17" pos:end="56:19">ret</name> <operator pos:start="56:21" pos:end="56:21">=</operator> <operator pos:start="56:23" pos:end="56:23">-</operator><literal type="number" pos:start="56:24" pos:end="56:24">1</literal></expr>;</expr_stmt>
                <goto pos:start="57:17" pos:end="57:25">goto <name pos:start="57:22" pos:end="57:24">end</name>;</goto>
            <expr_stmt pos:start="58:13" pos:end="59:72"><expr pos:start="58:13" pos:end="59:71"><name pos:start="58:13" pos:end="58:22">bit_length</name> <operator pos:start="58:24" pos:end="58:24">=</operator> <call pos:start="58:26" pos:end="59:71"><name pos:start="58:26" pos:end="58:39">get_bit_length</name><argument_list pos:start="58:40" pos:end="59:71">(<argument pos:start="58:41" pos:end="58:41"><expr pos:start="58:41" pos:end="58:41"><name pos:start="58:41" pos:end="58:41">h</name></expr></argument>, <argument pos:start="58:44" pos:end="58:46"><expr pos:start="58:44" pos:end="58:46"><name pos:start="58:44" pos:end="58:46">buf</name></expr></argument>, <argument pos:start="58:49" pos:end="58:51"><expr pos:start="58:49" pos:end="58:51"><name pos:start="58:49" pos:end="58:51">ptr</name></expr></argument>, <argument pos:start="58:54" pos:end="58:63"><expr pos:start="58:54" pos:end="58:63"><name pos:start="58:54" pos:end="58:63">dst_length</name></expr></argument>,
                                        <argument pos:start="59:41" pos:end="59:60"><expr pos:start="59:41" pos:end="59:60"><name pos:start="59:41" pos:end="59:49">buf_index</name> <operator pos:start="59:51" pos:end="59:51">+</operator> <name pos:start="59:53" pos:end="59:60">consumed</name></expr></argument>, <argument pos:start="59:63" pos:end="59:70"><expr pos:start="59:63" pos:end="59:70"><name pos:start="59:63" pos:end="59:70">next_avc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="60:13" pos:end="63:90"><if pos:start="60:13" pos:end="63:90">if <condition pos:start="60:16" pos:end="60:53">(<expr pos:start="60:17" pos:end="60:52"><name pos:start="60:17" pos:end="60:31"><name pos:start="60:17" pos:end="60:17">h</name><operator pos:start="60:18" pos:end="60:19">-&gt;</operator><name pos:start="60:20" pos:end="60:24">avctx</name><operator pos:start="60:25" pos:end="60:26">-&gt;</operator><name pos:start="60:27" pos:end="60:31">debug</name></name> <operator pos:start="60:33" pos:end="60:33">&amp;</operator> <name pos:start="60:35" pos:end="60:52">FF_DEBUG_STARTCODE</name></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="63:90"><block_content pos:start="61:17" pos:end="63:90">
                <expr_stmt pos:start="61:17" pos:end="63:90"><expr pos:start="61:17" pos:end="63:89"><call pos:start="61:17" pos:end="63:89"><name pos:start="61:17" pos:end="61:22">av_log</name><argument_list pos:start="61:23" pos:end="63:89">(<argument pos:start="61:24" pos:end="61:31"><expr pos:start="61:24" pos:end="61:31"><name pos:start="61:24" pos:end="61:31"><name pos:start="61:24" pos:end="61:24">h</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:31">avctx</name></name></expr></argument>, <argument pos:start="61:34" pos:end="61:45"><expr pos:start="61:34" pos:end="61:45"><name pos:start="61:34" pos:end="61:45">AV_LOG_DEBUG</name></expr></argument>,
                       <argument pos:start="62:24" pos:end="62:55"><expr pos:start="62:24" pos:end="62:55"><literal type="string" pos:start="62:24" pos:end="62:55">"NAL %d/%d at %d/%d length %d\n"</literal></expr></argument>,
                       <argument pos:start="63:24" pos:end="63:39"><expr pos:start="63:24" pos:end="63:39"><name pos:start="63:24" pos:end="63:39"><name pos:start="63:24" pos:end="63:24">h</name><operator pos:start="63:25" pos:end="63:26">-&gt;</operator><name pos:start="63:27" pos:end="63:39">nal_unit_type</name></name></expr></argument>, <argument pos:start="63:42" pos:end="63:55"><expr pos:start="63:42" pos:end="63:55"><name pos:start="63:42" pos:end="63:55"><name pos:start="63:42" pos:end="63:42">h</name><operator pos:start="63:43" pos:end="63:44">-&gt;</operator><name pos:start="63:45" pos:end="63:55">nal_ref_idc</name></name></expr></argument>, <argument pos:start="63:58" pos:end="63:66"><expr pos:start="63:58" pos:end="63:66"><name pos:start="63:58" pos:end="63:66">buf_index</name></expr></argument>, <argument pos:start="63:69" pos:end="63:76"><expr pos:start="63:69" pos:end="63:76"><name pos:start="63:69" pos:end="63:76">buf_size</name></expr></argument>, <argument pos:start="63:79" pos:end="63:88"><expr pos:start="63:79" pos:end="63:88"><name pos:start="63:79" pos:end="63:88">dst_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="64:13" pos:end="67:42"><if pos:start="64:13" pos:end="67:42">if <condition pos:start="64:16" pos:end="64:62">(<expr pos:start="64:17" pos:end="64:61"><name pos:start="64:17" pos:end="64:25"><name pos:start="64:17" pos:end="64:17">h</name><operator pos:start="64:18" pos:end="64:19">-&gt;</operator><name pos:start="64:20" pos:end="64:25">is_avc</name></name> <operator pos:start="64:27" pos:end="64:28">&amp;&amp;</operator> <operator pos:start="64:30" pos:end="64:30">(</operator><name pos:start="64:31" pos:end="64:37">nalsize</name> <operator pos:start="64:39" pos:end="64:40">!=</operator> <name pos:start="64:42" pos:end="64:49">consumed</name><operator pos:start="64:50" pos:end="64:50">)</operator> <operator pos:start="64:52" pos:end="64:53">&amp;&amp;</operator> <name pos:start="64:55" pos:end="64:61">nalsize</name></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="67:42"><block_content pos:start="65:17" pos:end="67:42">
                <expr_stmt pos:start="65:17" pos:end="67:42"><expr pos:start="65:17" pos:end="67:41"><call pos:start="65:17" pos:end="67:41"><name pos:start="65:17" pos:end="65:22">av_log</name><argument_list pos:start="65:23" pos:end="67:41">(<argument pos:start="65:24" pos:end="65:31"><expr pos:start="65:24" pos:end="65:31"><name pos:start="65:24" pos:end="65:31"><name pos:start="65:24" pos:end="65:24">h</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:31">avctx</name></name></expr></argument>, <argument pos:start="65:34" pos:end="65:45"><expr pos:start="65:34" pos:end="65:45"><name pos:start="65:34" pos:end="65:45">AV_LOG_DEBUG</name></expr></argument>,
                       <argument pos:start="66:24" pos:end="66:68"><expr pos:start="66:24" pos:end="66:68"><literal type="string" pos:start="66:24" pos:end="66:68">"AVC: Consumed only %d bytes instead of %d\n"</literal></expr></argument>,
                       <argument pos:start="67:24" pos:end="67:31"><expr pos:start="67:24" pos:end="67:31"><name pos:start="67:24" pos:end="67:31">consumed</name></expr></argument>, <argument pos:start="67:34" pos:end="67:40"><expr pos:start="67:34" pos:end="67:40"><name pos:start="67:34" pos:end="67:40">nalsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="68:13" pos:end="68:34"><expr pos:start="68:13" pos:end="68:33"><name pos:start="68:13" pos:end="68:21">buf_index</name> <operator pos:start="68:23" pos:end="68:24">+=</operator> <name pos:start="68:26" pos:end="68:33">consumed</name></expr>;</expr_stmt>
            <expr_stmt pos:start="69:13" pos:end="69:24"><expr pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:21">nal_index</name><operator pos:start="69:22" pos:end="69:23">++</operator></expr>;</expr_stmt>
            <if_stmt pos:start="70:13" pos:end="73:25"><if pos:start="70:13" pos:end="73:25">if <condition pos:start="70:16" pos:end="72:44">(<expr pos:start="70:17" pos:end="72:43"><name pos:start="70:17" pos:end="70:33"><name pos:start="70:17" pos:end="70:21">avctx</name><operator pos:start="70:22" pos:end="70:23">-&gt;</operator><name pos:start="70:24" pos:end="70:33">skip_frame</name></name> <operator pos:start="70:35" pos:end="70:36">&gt;=</operator> <name pos:start="70:38" pos:end="70:53">AVDISCARD_NONREF</name> <operator pos:start="70:55" pos:end="70:56">&amp;&amp;</operator>
                <name pos:start="71:17" pos:end="71:30"><name pos:start="71:17" pos:end="71:17">h</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:30">nal_ref_idc</name></name> <operator pos:start="71:32" pos:end="71:33">==</operator> <literal type="number" pos:start="71:35" pos:end="71:35">0</literal> <operator pos:start="71:37" pos:end="71:38">&amp;&amp;</operator>
                <name pos:start="72:17" pos:end="72:32"><name pos:start="72:17" pos:end="72:17">h</name><operator pos:start="72:18" pos:end="72:19">-&gt;</operator><name pos:start="72:20" pos:end="72:32">nal_unit_type</name></name> <operator pos:start="72:34" pos:end="72:35">!=</operator> <name pos:start="72:37" pos:end="72:43">NAL_SEI</name></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="73:25"><block_content pos:start="73:17" pos:end="73:25">
                <continue pos:start="73:17" pos:end="73:25">continue;</continue></block_content></block></if></if_stmt>
<label pos:start="74:1" pos:end="74:6"><name pos:start="74:1" pos:end="74:5">again</name>:</label>
            <comment type="block" pos:start="75:13" pos:end="77:31">/* Ignore per frame NAL unit type during extradata
             * parsing. Decoding slices is not possible in codec init
             * with frame-mt */</comment>
            <if_stmt pos:start="78:13" pos:end="249:39"><if pos:start="78:13" pos:end="249:39">if <condition pos:start="78:16" pos:end="78:32">(<expr pos:start="78:17" pos:end="78:31"><name pos:start="78:17" pos:end="78:31">parse_extradata</name></expr>)</condition> <block pos:start="78:34" pos:end="249:39">{<block_content pos:start="79:17" pos:end="249:39">
                <switch pos:start="79:17" pos:end="249:39">switch <condition pos:start="79:24" pos:end="79:41">(<expr pos:start="79:25" pos:end="79:40"><name pos:start="79:25" pos:end="79:40"><name pos:start="79:25" pos:end="79:25">h</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:40">nal_unit_type</name></name></expr>)</condition> <block pos:start="79:43" pos:end="249:39">{<block_content pos:start="80:17" pos:end="249:39">
                <case pos:start="80:17" pos:end="80:35">case <expr pos:start="80:22" pos:end="80:34"><name pos:start="80:22" pos:end="80:34">NAL_IDR_SLICE</name></expr>:</case>
                <case pos:start="81:17" pos:end="81:31">case <expr pos:start="81:22" pos:end="81:30"><name pos:start="81:22" pos:end="81:30">NAL_SLICE</name></expr>:</case>
                <case pos:start="82:17" pos:end="82:29">case <expr pos:start="82:22" pos:end="82:28"><name pos:start="82:22" pos:end="82:28">NAL_DPA</name></expr>:</case>
                <case pos:start="83:17" pos:end="83:29">case <expr pos:start="83:22" pos:end="83:28"><name pos:start="83:22" pos:end="83:28">NAL_DPB</name></expr>:</case>
                <case pos:start="84:17" pos:end="84:29">case <expr pos:start="84:22" pos:end="84:28"><name pos:start="84:22" pos:end="84:28">NAL_DPC</name></expr>:</case>
                    <expr_stmt pos:start="85:21" pos:end="87:45"><expr pos:start="85:21" pos:end="87:44"><call pos:start="85:21" pos:end="87:44"><name pos:start="85:21" pos:end="85:26">av_log</name><argument_list pos:start="85:27" pos:end="87:44">(<argument pos:start="85:28" pos:end="85:35"><expr pos:start="85:28" pos:end="85:35"><name pos:start="85:28" pos:end="85:35"><name pos:start="85:28" pos:end="85:28">h</name><operator pos:start="85:29" pos:end="85:30">-&gt;</operator><name pos:start="85:31" pos:end="85:35">avctx</name></name></expr></argument>, <argument pos:start="85:38" pos:end="85:51"><expr pos:start="85:38" pos:end="85:51"><name pos:start="85:38" pos:end="85:51">AV_LOG_WARNING</name></expr></argument>,
                           <argument pos:start="86:28" pos:end="86:73"><expr pos:start="86:28" pos:end="86:73"><literal type="string" pos:start="86:28" pos:end="86:73">"Ignoring NAL %d in global header/extradata\n"</literal></expr></argument>,
                           <argument pos:start="87:28" pos:end="87:43"><expr pos:start="87:28" pos:end="87:43"><name pos:start="87:28" pos:end="87:43"><name pos:start="87:28" pos:end="87:28">h</name><operator pos:start="87:29" pos:end="87:30">-&gt;</operator><name pos:start="87:31" pos:end="87:43">nal_unit_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line" pos:start="88:21" pos:end="88:48">// fall through to next case</comment>
                <case pos:start="89:17" pos:end="89:41">case <expr pos:start="89:22" pos:end="89:40"><name pos:start="89:22" pos:end="89:40">NAL_AUXILIARY_SLICE</name></expr>:</case>
                    <expr_stmt pos:start="90:21" pos:end="90:53"><expr pos:start="90:21" pos:end="90:52"><name pos:start="90:21" pos:end="90:36"><name pos:start="90:21" pos:end="90:21">h</name><operator pos:start="90:22" pos:end="90:23">-&gt;</operator><name pos:start="90:24" pos:end="90:36">nal_unit_type</name></name> <operator pos:start="90:38" pos:end="90:38">=</operator> <name pos:start="90:40" pos:end="90:52">NAL_FF_IGNORE</name></expr>;</expr_stmt>
            <expr_stmt pos:start="91:13" pos:end="91:20"><expr pos:start="91:13" pos:end="91:19"><name pos:start="91:13" pos:end="91:15">err</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <literal type="number" pos:start="91:19" pos:end="91:19">0</literal></expr>;</expr_stmt>
            <switch pos:start="92:13" pos:end="249:39">switch <condition pos:start="92:20" pos:end="92:37">(<expr pos:start="92:21" pos:end="92:36"><name pos:start="92:21" pos:end="92:36"><name pos:start="92:21" pos:end="92:21">h</name><operator pos:start="92:22" pos:end="92:23">-&gt;</operator><name pos:start="92:24" pos:end="92:36">nal_unit_type</name></name></expr>)</condition> <block pos:start="92:39" pos:end="249:39">{<block_content pos:start="93:13" pos:end="249:39">
            <case pos:start="93:13" pos:end="93:31">case <expr pos:start="93:18" pos:end="93:30"><name pos:start="93:18" pos:end="93:30">NAL_IDR_SLICE</name></expr>:</case>
                <if_stmt pos:start="94:17" pos:end="249:39"><if pos:start="94:17" pos:end="249:39">if <condition pos:start="94:20" pos:end="94:44">(<expr pos:start="94:21" pos:end="94:43"><operator pos:start="94:21" pos:end="94:21">(</operator><name pos:start="94:22" pos:end="94:27"><name pos:start="94:22" pos:end="94:24">ptr</name><index pos:start="94:25" pos:end="94:27">[<expr pos:start="94:26" pos:end="94:26"><literal type="number" pos:start="94:26" pos:end="94:26">0</literal></expr>]</index></name> <operator pos:start="94:29" pos:end="94:29">&amp;</operator> <literal type="number" pos:start="94:31" pos:end="94:34">0xFC</literal><operator pos:start="94:35" pos:end="94:35">)</operator> <operator pos:start="94:37" pos:end="94:38">==</operator> <literal type="number" pos:start="94:40" pos:end="94:43">0x98</literal></expr>)</condition> <block pos:start="94:46" pos:end="249:39">{<block_content pos:start="95:21" pos:end="249:39">
                    <expr_stmt pos:start="95:21" pos:end="95:80"><expr pos:start="95:21" pos:end="95:79"><call pos:start="95:21" pos:end="95:79"><name pos:start="95:21" pos:end="95:26">av_log</name><argument_list pos:start="95:27" pos:end="95:79">(<argument pos:start="95:28" pos:end="95:35"><expr pos:start="95:28" pos:end="95:35"><name pos:start="95:28" pos:end="95:35"><name pos:start="95:28" pos:end="95:28">h</name><operator pos:start="95:29" pos:end="95:30">-&gt;</operator><name pos:start="95:31" pos:end="95:35">avctx</name></name></expr></argument>, <argument pos:start="95:38" pos:end="95:49"><expr pos:start="95:38" pos:end="95:49"><name pos:start="95:38" pos:end="95:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:52" pos:end="95:78"><expr pos:start="95:52" pos:end="95:78"><literal type="string" pos:start="95:52" pos:end="95:78">"Invalid inter IDR frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="96:21" pos:end="96:51"><expr pos:start="96:21" pos:end="96:50"><name pos:start="96:21" pos:end="96:40"><name pos:start="96:21" pos:end="96:21">h</name><operator pos:start="96:22" pos:end="96:23">-&gt;</operator><name pos:start="96:24" pos:end="96:40">next_outputed_poc</name></name> <operator pos:start="96:42" pos:end="96:42">=</operator> <name pos:start="96:44" pos:end="96:50">INT_MIN</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="97:21" pos:end="97:29"><expr pos:start="97:21" pos:end="97:28"><name pos:start="97:21" pos:end="97:23">ret</name> <operator pos:start="97:25" pos:end="97:25">=</operator> <operator pos:start="97:27" pos:end="97:27">-</operator><literal type="number" pos:start="97:28" pos:end="97:28">1</literal></expr>;</expr_stmt>
                    <goto pos:start="98:21" pos:end="98:29">goto <name pos:start="98:26" pos:end="98:28">end</name>;</goto>
                <if_stmt pos:start="99:17" pos:end="249:39"><if pos:start="99:17" pos:end="249:39">if <condition pos:start="99:20" pos:end="99:54">(<expr pos:start="99:21" pos:end="99:53"><name pos:start="99:21" pos:end="99:36"><name pos:start="99:21" pos:end="99:21">h</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:36">nal_unit_type</name></name> <operator pos:start="99:38" pos:end="99:39">!=</operator> <name pos:start="99:41" pos:end="99:53">NAL_IDR_SLICE</name></expr>)</condition> <block pos:start="99:56" pos:end="249:39">{<block_content pos:start="100:21" pos:end="249:39">
                    <expr_stmt pos:start="100:21" pos:end="101:70"><expr pos:start="100:21" pos:end="101:69"><call pos:start="100:21" pos:end="101:69"><name pos:start="100:21" pos:end="100:26">av_log</name><argument_list pos:start="100:27" pos:end="101:69">(<argument pos:start="100:28" pos:end="100:35"><expr pos:start="100:28" pos:end="100:35"><name pos:start="100:28" pos:end="100:35"><name pos:start="100:28" pos:end="100:28">h</name><operator pos:start="100:29" pos:end="100:30">-&gt;</operator><name pos:start="100:31" pos:end="100:35">avctx</name></name></expr></argument>, <argument pos:start="100:38" pos:end="100:49"><expr pos:start="100:38" pos:end="100:49"><name pos:start="100:38" pos:end="100:49">AV_LOG_ERROR</name></expr></argument>,
                           <argument pos:start="101:28" pos:end="101:68"><expr pos:start="101:28" pos:end="101:68"><literal type="string" pos:start="101:28" pos:end="101:68">"Invalid mix of idr and non-idr slices\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="102:21" pos:end="102:29"><expr pos:start="102:21" pos:end="102:28"><name pos:start="102:21" pos:end="102:23">ret</name> <operator pos:start="102:25" pos:end="102:25">=</operator> <operator pos:start="102:27" pos:end="102:27">-</operator><literal type="number" pos:start="102:28" pos:end="102:28">1</literal></expr>;</expr_stmt>
                    <goto pos:start="103:21" pos:end="103:29">goto <name pos:start="103:26" pos:end="103:28">end</name>;</goto>
                <if_stmt pos:start="104:17" pos:end="249:39"><if pos:start="104:17" pos:end="249:39">if<condition pos:start="104:19" pos:end="104:32">(<expr pos:start="104:20" pos:end="104:31"><operator pos:start="104:20" pos:end="104:20">!</operator><name pos:start="104:21" pos:end="104:31">idr_cleared</name></expr>)</condition> <block pos:start="104:34" pos:end="249:39">{<block_content pos:start="105:21" pos:end="249:39">
                    <if_stmt pos:start="105:21" pos:end="249:39"><if pos:start="105:21" pos:end="249:39">if <condition pos:start="105:24" pos:end="105:90">(<expr pos:start="105:25" pos:end="105:89"><name pos:start="105:25" pos:end="105:40"><name pos:start="105:25" pos:end="105:25">h</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:40">current_slice</name></name> <operator pos:start="105:42" pos:end="105:43">&amp;&amp;</operator> <operator pos:start="105:45" pos:end="105:45">(</operator><name pos:start="105:46" pos:end="105:70"><name pos:start="105:46" pos:end="105:50">avctx</name><operator pos:start="105:51" pos:end="105:52">-&gt;</operator><name pos:start="105:53" pos:end="105:70">active_thread_type</name></name> <operator pos:start="105:72" pos:end="105:72">&amp;</operator> <name pos:start="105:74" pos:end="105:88">FF_THREAD_SLICE</name><operator pos:start="105:89" pos:end="105:89">)</operator></expr>)</condition> <block pos:start="105:92" pos:end="249:39">{<block_content pos:start="106:25" pos:end="249:39">
                        <expr_stmt pos:start="106:25" pos:end="106:135"><expr pos:start="106:25" pos:end="106:134"><call pos:start="106:25" pos:end="106:134"><name pos:start="106:25" pos:end="106:30">av_log</name><argument_list pos:start="106:31" pos:end="106:134">(<argument pos:start="106:32" pos:end="106:32"><expr pos:start="106:32" pos:end="106:32"><name pos:start="106:32" pos:end="106:32">h</name></expr></argument>, <argument pos:start="106:35" pos:end="106:46"><expr pos:start="106:35" pos:end="106:46"><name pos:start="106:35" pos:end="106:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="106:49" pos:end="106:133"><expr pos:start="106:49" pos:end="106:133"><literal type="string" pos:start="106:49" pos:end="106:133">"invalid mixed IDR / non IDR frames cannot be decoded in slice multithreading mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="107:25" pos:end="107:50"><expr pos:start="107:25" pos:end="107:49"><name pos:start="107:25" pos:end="107:27">ret</name> <operator pos:start="107:29" pos:end="107:29">=</operator> <name pos:start="107:31" pos:end="107:49">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>
                        <goto pos:start="108:25" pos:end="108:33">goto <name pos:start="108:30" pos:end="108:32">end</name>;</goto>
                    <expr_stmt pos:start="109:21" pos:end="109:27"><expr pos:start="109:21" pos:end="109:26"><call pos:start="109:21" pos:end="109:26"><name pos:start="109:21" pos:end="109:23">idr</name><argument_list pos:start="109:24" pos:end="109:26">(<argument pos:start="109:25" pos:end="109:25"><expr pos:start="109:25" pos:end="109:25"><name pos:start="109:25" pos:end="109:25">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="109:29" pos:end="109:92">// FIXME ensure we don't lose some frames if there is reordering</comment>
                <expr_stmt pos:start="110:17" pos:end="110:32"><expr pos:start="110:17" pos:end="110:31"><name pos:start="110:17" pos:end="110:27">idr_cleared</name> <operator pos:start="110:29" pos:end="110:29">=</operator> <literal type="number" pos:start="110:31" pos:end="110:31">1</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="111:17" pos:end="111:42"><expr pos:start="111:17" pos:end="111:41"><name pos:start="111:17" pos:end="111:37"><name pos:start="111:17" pos:end="111:17">h</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:37">has_recovery_point</name></name> <operator pos:start="111:39" pos:end="111:39">=</operator> <literal type="number" pos:start="111:41" pos:end="111:41">1</literal></expr>;</expr_stmt>
            <case pos:start="112:13" pos:end="112:27">case <expr pos:start="112:18" pos:end="112:26"><name pos:start="112:18" pos:end="112:26">NAL_SLICE</name></expr>:</case>
                <expr_stmt pos:start="113:17" pos:end="113:56"><expr pos:start="113:17" pos:end="113:55"><call pos:start="113:17" pos:end="113:55"><name pos:start="113:17" pos:end="113:29">init_get_bits</name><argument_list pos:start="113:30" pos:end="113:55">(<argument pos:start="113:31" pos:end="113:37"><expr pos:start="113:31" pos:end="113:37"><operator pos:start="113:31" pos:end="113:31">&amp;</operator><name pos:start="113:32" pos:end="113:37"><name pos:start="113:32" pos:end="113:33">sl</name><operator pos:start="113:34" pos:end="113:35">-&gt;</operator><name pos:start="113:36" pos:end="113:37">gb</name></name></expr></argument>, <argument pos:start="113:40" pos:end="113:42"><expr pos:start="113:40" pos:end="113:42"><name pos:start="113:40" pos:end="113:42">ptr</name></expr></argument>, <argument pos:start="113:45" pos:end="113:54"><expr pos:start="113:45" pos:end="113:54"><name pos:start="113:45" pos:end="113:54">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="114:17" pos:end="116:38"><if pos:start="114:17" pos:end="116:38">if <condition pos:start="114:20" pos:end="115:90">(   <expr pos:start="114:24" pos:end="115:89"><name pos:start="114:24" pos:end="114:34">nals_needed</name> <operator pos:start="114:36" pos:end="114:37">&gt;=</operator> <name pos:start="114:39" pos:end="114:47">nal_index</name>
                    <operator pos:start="115:21" pos:end="115:22">||</operator> <operator pos:start="115:24" pos:end="115:24">(</operator><operator pos:start="115:25" pos:end="115:25">!</operator><operator pos:start="115:26" pos:end="115:26">(</operator><name pos:start="115:27" pos:end="115:51"><name pos:start="115:27" pos:end="115:31">avctx</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:51">active_thread_type</name></name> <operator pos:start="115:53" pos:end="115:53">&amp;</operator> <name pos:start="115:55" pos:end="115:69">FF_THREAD_FRAME</name><operator pos:start="115:70" pos:end="115:70">)</operator> <operator pos:start="115:72" pos:end="115:73">&amp;&amp;</operator> <operator pos:start="115:75" pos:end="115:75">!</operator><name pos:start="115:76" pos:end="115:88">context_count</name><operator pos:start="115:89" pos:end="115:89">)</operator></expr>)</condition><block type="pseudo" pos:start="116:21" pos:end="116:38"><block_content pos:start="116:21" pos:end="116:38">
                    <expr_stmt pos:start="116:21" pos:end="116:38"><expr pos:start="116:21" pos:end="116:37"><name pos:start="116:21" pos:end="116:32"><name pos:start="116:21" pos:end="116:21">h</name><operator pos:start="116:22" pos:end="116:23">-&gt;</operator><name pos:start="116:24" pos:end="116:32">au_pps_id</name></name> <operator pos:start="116:34" pos:end="116:34">=</operator> <operator pos:start="116:36" pos:end="116:36">-</operator><literal type="number" pos:start="116:37" pos:end="116:37">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt pos:start="117:17" pos:end="118:26"><if pos:start="117:17" pos:end="118:26">if <condition pos:start="117:20" pos:end="117:63">(<expr pos:start="117:21" pos:end="117:62"><operator pos:start="117:21" pos:end="117:21">(</operator><name pos:start="117:22" pos:end="117:24">err</name> <operator pos:start="117:26" pos:end="117:26">=</operator> <call pos:start="117:28" pos:end="117:61"><name pos:start="117:28" pos:end="117:54">ff_h264_decode_slice_header</name><argument_list pos:start="117:55" pos:end="117:61">(<argument pos:start="117:56" pos:end="117:56"><expr pos:start="117:56" pos:end="117:56"><name pos:start="117:56" pos:end="117:56">h</name></expr></argument>, <argument pos:start="117:59" pos:end="117:60"><expr pos:start="117:59" pos:end="117:60"><name pos:start="117:59" pos:end="117:60">sl</name></expr></argument>)</argument_list></call><operator pos:start="117:62" pos:end="117:62">)</operator></expr>)</condition><block type="pseudo" pos:start="118:21" pos:end="118:26"><block_content pos:start="118:21" pos:end="118:26">
                    <break pos:start="118:21" pos:end="118:26">break;</break></block_content></block></if></if_stmt>
                <if_stmt pos:start="119:17" pos:end="249:39"><if pos:start="119:17" pos:end="249:39">if <condition pos:start="119:20" pos:end="119:51">(<expr pos:start="119:21" pos:end="119:50"><name pos:start="119:21" pos:end="119:45"><name pos:start="119:21" pos:end="119:21">h</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:45">sei_recovery_frame_cnt</name></name> <operator pos:start="119:47" pos:end="119:48">&gt;=</operator> <literal type="number" pos:start="119:50" pos:end="119:50">0</literal></expr>)</condition> <block pos:start="119:53" pos:end="249:39">{<block_content pos:start="120:21" pos:end="249:39">
                    <if_stmt pos:start="120:21" pos:end="121:52"><if pos:start="120:21" pos:end="121:52">if <condition pos:start="120:24" pos:end="120:109">(<expr pos:start="120:25" pos:end="120:108"><name pos:start="120:25" pos:end="120:36"><name pos:start="120:25" pos:end="120:25">h</name><operator pos:start="120:26" pos:end="120:27">-&gt;</operator><name pos:start="120:28" pos:end="120:36">frame_num</name></name> <operator pos:start="120:38" pos:end="120:39">!=</operator> <name pos:start="120:41" pos:end="120:65"><name pos:start="120:41" pos:end="120:41">h</name><operator pos:start="120:42" pos:end="120:43">-&gt;</operator><name pos:start="120:44" pos:end="120:65">sei_recovery_frame_cnt</name></name> <operator pos:start="120:67" pos:end="120:68">||</operator> <name pos:start="120:70" pos:end="120:87"><name pos:start="120:70" pos:end="120:71">sl</name><operator pos:start="120:72" pos:end="120:73">-&gt;</operator><name pos:start="120:74" pos:end="120:87">slice_type_nos</name></name> <operator pos:start="120:89" pos:end="120:90">!=</operator> <name pos:start="120:92" pos:end="120:108">AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo" pos:start="121:25" pos:end="121:52"><block_content pos:start="121:25" pos:end="121:52">
                        <expr_stmt pos:start="121:25" pos:end="121:52"><expr pos:start="121:25" pos:end="121:51"><name pos:start="121:25" pos:end="121:47"><name pos:start="121:25" pos:end="121:25">h</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:47">valid_recovery_point</name></name> <operator pos:start="121:49" pos:end="121:49">=</operator> <literal type="number" pos:start="121:51" pos:end="121:51">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt pos:start="122:21" pos:end="249:39"><if pos:start="122:21" pos:end="249:39">if <condition pos:start="122:24" pos:end="123:130">(   <expr pos:start="122:28" pos:end="123:129"><name pos:start="122:28" pos:end="122:44"><name pos:start="122:28" pos:end="122:28">h</name><operator pos:start="122:29" pos:end="122:30">-&gt;</operator><name pos:start="122:31" pos:end="122:44">recovery_frame</name></name> <operator pos:start="122:46" pos:end="122:46">&lt;</operator> <literal type="number" pos:start="122:48" pos:end="122:48">0</literal>
                        <operator pos:start="123:25" pos:end="123:26">||</operator> <call pos:start="123:28" pos:end="123:101"><name pos:start="123:28" pos:end="123:40">av_mod_uintp2</name><argument_list pos:start="123:41" pos:end="123:101">(<argument pos:start="123:42" pos:end="123:73"><expr pos:start="123:42" pos:end="123:73"><name pos:start="123:42" pos:end="123:58"><name pos:start="123:42" pos:end="123:42">h</name><operator pos:start="123:43" pos:end="123:44">-&gt;</operator><name pos:start="123:45" pos:end="123:58">recovery_frame</name></name> <operator pos:start="123:60" pos:end="123:60">-</operator> <name pos:start="123:62" pos:end="123:73"><name pos:start="123:62" pos:end="123:62">h</name><operator pos:start="123:63" pos:end="123:64">-&gt;</operator><name pos:start="123:65" pos:end="123:73">frame_num</name></name></expr></argument>, <argument pos:start="123:76" pos:end="123:100"><expr pos:start="123:76" pos:end="123:100"><name pos:start="123:76" pos:end="123:100"><name pos:start="123:76" pos:end="123:76">h</name><operator pos:start="123:77" pos:end="123:78">-&gt;</operator><name pos:start="123:79" pos:end="123:81">sps</name><operator pos:start="123:82" pos:end="123:82">.</operator><name pos:start="123:83" pos:end="123:100">log2_max_frame_num</name></name></expr></argument>)</argument_list></call> <operator pos:start="123:103" pos:end="123:103">&gt;</operator> <name pos:start="123:105" pos:end="123:129"><name pos:start="123:105" pos:end="123:105">h</name><operator pos:start="123:106" pos:end="123:107">-&gt;</operator><name pos:start="123:108" pos:end="123:129">sei_recovery_frame_cnt</name></name></expr>)</condition> <block pos:start="123:132" pos:end="249:39">{<block_content pos:start="124:25" pos:end="249:39">
                        <expr_stmt pos:start="124:25" pos:end="124:127"><expr pos:start="124:25" pos:end="124:126"><name pos:start="124:25" pos:end="124:41"><name pos:start="124:25" pos:end="124:25">h</name><operator pos:start="124:26" pos:end="124:27">-&gt;</operator><name pos:start="124:28" pos:end="124:41">recovery_frame</name></name> <operator pos:start="124:43" pos:end="124:43">=</operator> <call pos:start="124:45" pos:end="124:126"><name pos:start="124:45" pos:end="124:57">av_mod_uintp2</name><argument_list pos:start="124:58" pos:end="124:126">(<argument pos:start="124:59" pos:end="124:98"><expr pos:start="124:59" pos:end="124:98"><name pos:start="124:59" pos:end="124:70"><name pos:start="124:59" pos:end="124:59">h</name><operator pos:start="124:60" pos:end="124:61">-&gt;</operator><name pos:start="124:62" pos:end="124:70">frame_num</name></name> <operator pos:start="124:72" pos:end="124:72">+</operator> <name pos:start="124:74" pos:end="124:98"><name pos:start="124:74" pos:end="124:74">h</name><operator pos:start="124:75" pos:end="124:76">-&gt;</operator><name pos:start="124:77" pos:end="124:98">sei_recovery_frame_cnt</name></name></expr></argument>, <argument pos:start="124:101" pos:end="124:125"><expr pos:start="124:101" pos:end="124:125"><name pos:start="124:101" pos:end="124:125"><name pos:start="124:101" pos:end="124:101">h</name><operator pos:start="124:102" pos:end="124:103">-&gt;</operator><name pos:start="124:104" pos:end="124:106">sps</name><operator pos:start="124:107" pos:end="124:107">.</operator><name pos:start="124:108" pos:end="124:125">log2_max_frame_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt pos:start="125:25" pos:end="126:61"><if pos:start="125:25" pos:end="126:61">if <condition pos:start="125:28" pos:end="125:53">(<expr pos:start="125:29" pos:end="125:52"><operator pos:start="125:29" pos:end="125:29">!</operator><name pos:start="125:30" pos:end="125:52"><name pos:start="125:30" pos:end="125:30">h</name><operator pos:start="125:31" pos:end="125:32">-&gt;</operator><name pos:start="125:33" pos:end="125:52">valid_recovery_point</name></name></expr>)</condition><block type="pseudo" pos:start="126:29" pos:end="126:61"><block_content pos:start="126:29" pos:end="126:61">
                            <expr_stmt pos:start="126:29" pos:end="126:61"><expr pos:start="126:29" pos:end="126:60"><name pos:start="126:29" pos:end="126:45"><name pos:start="126:29" pos:end="126:29">h</name><operator pos:start="126:30" pos:end="126:31">-&gt;</operator><name pos:start="126:32" pos:end="126:45">recovery_frame</name></name> <operator pos:start="126:47" pos:end="126:47">=</operator> <name pos:start="126:49" pos:end="126:60"><name pos:start="126:49" pos:end="126:49">h</name><operator pos:start="126:50" pos:end="126:51">-&gt;</operator><name pos:start="126:52" pos:end="126:60">frame_num</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt pos:start="127:17" pos:end="128:56"><expr pos:start="127:17" pos:end="128:55"><name pos:start="127:17" pos:end="127:44"><name pos:start="127:17" pos:end="127:17">h</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:30">cur_pic_ptr</name><operator pos:start="127:31" pos:end="127:32">-&gt;</operator><name pos:start="127:33" pos:end="127:33">f</name><operator pos:start="127:34" pos:end="127:35">-&gt;</operator><name pos:start="127:36" pos:end="127:44">key_frame</name></name> <operator pos:start="127:46" pos:end="127:47">|=</operator>
                    <operator pos:start="128:21" pos:end="128:21">(</operator><name pos:start="128:22" pos:end="128:37"><name pos:start="128:22" pos:end="128:22">h</name><operator pos:start="128:23" pos:end="128:24">-&gt;</operator><name pos:start="128:25" pos:end="128:37">nal_unit_type</name></name> <operator pos:start="128:39" pos:end="128:40">==</operator> <name pos:start="128:42" pos:end="128:54">NAL_IDR_SLICE</name><operator pos:start="128:55" pos:end="128:55">)</operator></expr>;</expr_stmt>
                <if_stmt pos:start="129:17" pos:end="249:39"><if pos:start="129:17" pos:end="249:39">if <condition pos:start="129:20" pos:end="130:54">(<expr pos:start="129:21" pos:end="130:53"><name pos:start="129:21" pos:end="129:36"><name pos:start="129:21" pos:end="129:21">h</name><operator pos:start="129:22" pos:end="129:23">-&gt;</operator><name pos:start="129:24" pos:end="129:36">nal_unit_type</name></name> <operator pos:start="129:38" pos:end="129:39">==</operator> <name pos:start="129:41" pos:end="129:53">NAL_IDR_SLICE</name> <operator pos:start="129:55" pos:end="129:56">||</operator>
                    <name pos:start="130:21" pos:end="130:37"><name pos:start="130:21" pos:end="130:21">h</name><operator pos:start="130:22" pos:end="130:23">-&gt;</operator><name pos:start="130:24" pos:end="130:37">recovery_frame</name></name> <operator pos:start="130:39" pos:end="130:40">==</operator> <name pos:start="130:42" pos:end="130:53"><name pos:start="130:42" pos:end="130:42">h</name><operator pos:start="130:43" pos:end="130:44">-&gt;</operator><name pos:start="130:45" pos:end="130:53">frame_num</name></name></expr>)</condition> <block pos:start="130:56" pos:end="249:39">{<block_content pos:start="131:21" pos:end="249:39">
                    <expr_stmt pos:start="131:21" pos:end="131:51"><expr pos:start="131:21" pos:end="131:50"><name pos:start="131:21" pos:end="131:37"><name pos:start="131:21" pos:end="131:21">h</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:37">recovery_frame</name></name>         <operator pos:start="131:47" pos:end="131:47">=</operator> <operator pos:start="131:49" pos:end="131:49">-</operator><literal type="number" pos:start="131:50" pos:end="131:50">1</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="132:21" pos:end="132:50"><expr pos:start="132:21" pos:end="132:49"><name pos:start="132:21" pos:end="132:45"><name pos:start="132:21" pos:end="132:21">h</name><operator pos:start="132:22" pos:end="132:23">-&gt;</operator><name pos:start="132:24" pos:end="132:34">cur_pic_ptr</name><operator pos:start="132:35" pos:end="132:36">-&gt;</operator><name pos:start="132:37" pos:end="132:45">recovered</name></name> <operator pos:start="132:47" pos:end="132:47">=</operator> <literal type="number" pos:start="132:49" pos:end="132:49">1</literal></expr>;</expr_stmt>
                <comment type="line" pos:start="133:17" pos:end="133:78">// If we have an IDR, all frames after it in decoded order are</comment>
                <comment type="line" pos:start="134:17" pos:end="134:31">// "recovered".</comment>
                <if_stmt pos:start="135:17" pos:end="138:0"><if pos:start="135:17" pos:end="138:0">if <condition pos:start="135:20" pos:end="135:54">(<expr pos:start="135:21" pos:end="135:53"><name pos:start="135:21" pos:end="135:36"><name pos:start="135:21" pos:end="135:21">h</name><operator pos:start="135:22" pos:end="135:23">-&gt;</operator><name pos:start="135:24" pos:end="135:36">nal_unit_type</name></name> <operator pos:start="135:38" pos:end="135:39">==</operator> <name pos:start="135:41" pos:end="135:53">NAL_IDR_SLICE</name></expr>)</condition><block type="pseudo" pos:start="136:21" pos:end="138:0"><block_content pos:start="136:21" pos:end="138:0">
                    <expr_stmt pos:start="136:21" pos:end="138:0"><expr pos:start="136:21" pos:end="136:61"><name pos:start="136:21" pos:end="136:38"><name pos:start="136:21" pos:end="136:21">h</name><operator pos:start="136:22" pos:end="136:23">-&gt;</operator><name pos:start="136:24" pos:end="136:38">frame_recovered</name></name> <operator pos:start="136:40" pos:end="136:41">|=</operator> <name pos:start="136:43" pos:end="136:61">FRAME_RECOVERED_IDR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if pos:start="137:1" pos:end="137:5">#<cpp:directive pos:start="137:2" pos:end="137:3">if</cpp:directive> <expr pos:start="137:5" pos:end="137:5"><literal type="number" pos:start="137:5" pos:end="137:5">1</literal></expr></cpp:if>
                <expr_stmt pos:start="138:17" pos:end="140:0"><expr pos:start="138:17" pos:end="138:63"><name pos:start="138:17" pos:end="138:41"><name pos:start="138:17" pos:end="138:17">h</name><operator pos:start="138:18" pos:end="138:19">-&gt;</operator><name pos:start="138:20" pos:end="138:30">cur_pic_ptr</name><operator pos:start="138:31" pos:end="138:32">-&gt;</operator><name pos:start="138:33" pos:end="138:41">recovered</name></name> <operator pos:start="138:43" pos:end="138:44">|=</operator> <name pos:start="138:46" pos:end="138:63"><name pos:start="138:46" pos:end="138:46">h</name><operator pos:start="138:47" pos:end="138:48">-&gt;</operator><name pos:start="138:49" pos:end="138:63">frame_recovered</name></name></expr>;</expr_stmt>
<cpp:else pos:start="139:1" pos:end="139:5">#<cpp:directive pos:start="139:2" pos:end="139:5">else</cpp:directive></cpp:else>
                <expr_stmt pos:start="140:17" pos:end="142:0"><expr pos:start="140:17" pos:end="140:89"><name pos:start="140:17" pos:end="140:41"><name pos:start="140:17" pos:end="140:17">h</name><operator pos:start="140:18" pos:end="140:19">-&gt;</operator><name pos:start="140:20" pos:end="140:30">cur_pic_ptr</name><operator pos:start="140:31" pos:end="140:32">-&gt;</operator><name pos:start="140:33" pos:end="140:41">recovered</name></name> <operator pos:start="140:43" pos:end="140:44">|=</operator> <operator pos:start="140:46" pos:end="140:46">!</operator><operator pos:start="140:47" pos:end="140:47">!</operator><operator pos:start="140:48" pos:end="140:48">(</operator><name pos:start="140:49" pos:end="140:66"><name pos:start="140:49" pos:end="140:49">h</name><operator pos:start="140:50" pos:end="140:51">-&gt;</operator><name pos:start="140:52" pos:end="140:66">frame_recovered</name></name> <operator pos:start="140:68" pos:end="140:68">&amp;</operator> <name pos:start="140:70" pos:end="140:88">FRAME_RECOVERED_IDR</name><operator pos:start="140:89" pos:end="140:89">)</operator></expr>;</expr_stmt>
<cpp:endif pos:start="141:1" pos:end="141:6">#<cpp:directive pos:start="141:2" pos:end="141:6">endif</cpp:directive></cpp:endif>
                <if_stmt pos:start="142:17" pos:end="249:39"><if pos:start="142:17" pos:end="249:39">if <condition pos:start="142:20" pos:end="142:42">(<expr pos:start="142:21" pos:end="142:41"><name pos:start="142:21" pos:end="142:36"><name pos:start="142:21" pos:end="142:21">h</name><operator pos:start="142:22" pos:end="142:23">-&gt;</operator><name pos:start="142:24" pos:end="142:36">current_slice</name></name> <operator pos:start="142:38" pos:end="142:39">==</operator> <literal type="number" pos:start="142:41" pos:end="142:41">1</literal></expr>)</condition> <block pos:start="142:44" pos:end="249:39">{<block_content pos:start="143:21" pos:end="249:39">
                    <if_stmt pos:start="143:21" pos:end="144:69"><if pos:start="143:21" pos:end="144:69">if <condition pos:start="143:24" pos:end="143:65">(<expr pos:start="143:25" pos:end="143:64"><operator pos:start="143:25" pos:end="143:25">!</operator><operator pos:start="143:26" pos:end="143:26">(</operator><name pos:start="143:27" pos:end="143:39"><name pos:start="143:27" pos:end="143:31">avctx</name><operator pos:start="143:32" pos:end="143:33">-&gt;</operator><name pos:start="143:34" pos:end="143:39">flags2</name></name> <operator pos:start="143:41" pos:end="143:41">&amp;</operator> <name pos:start="143:43" pos:end="143:63">AV_CODEC_FLAG2_CHUNKS</name><operator pos:start="143:64" pos:end="143:64">)</operator></expr>)</condition><block type="pseudo" pos:start="144:25" pos:end="144:69"><block_content pos:start="144:25" pos:end="144:69">
                        <expr_stmt pos:start="144:25" pos:end="144:69"><expr pos:start="144:25" pos:end="144:68"><call pos:start="144:25" pos:end="144:68"><name pos:start="144:25" pos:end="144:39">decode_postinit</name><argument_list pos:start="144:40" pos:end="144:68">(<argument pos:start="144:41" pos:end="144:41"><expr pos:start="144:41" pos:end="144:41"><name pos:start="144:41" pos:end="144:41">h</name></expr></argument>, <argument pos:start="144:44" pos:end="144:67"><expr pos:start="144:44" pos:end="144:67"><name pos:start="144:44" pos:end="144:52">nal_index</name> <operator pos:start="144:54" pos:end="144:55">&gt;=</operator> <name pos:start="144:57" pos:end="144:67">nals_needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt pos:start="145:21" pos:end="149:0"><if pos:start="145:21" pos:end="149:0">if <condition pos:start="145:24" pos:end="146:92">(<expr pos:start="145:25" pos:end="146:91"><name pos:start="145:25" pos:end="145:41"><name pos:start="145:25" pos:end="145:25">h</name><operator pos:start="145:26" pos:end="145:27">-&gt;</operator><name pos:start="145:28" pos:end="145:32">avctx</name><operator pos:start="145:33" pos:end="145:34">-&gt;</operator><name pos:start="145:35" pos:end="145:41">hwaccel</name></name> <operator pos:start="145:43" pos:end="145:44">&amp;&amp;</operator>
                        <operator pos:start="146:25" pos:end="146:25">(</operator><name pos:start="146:26" pos:end="146:28">ret</name> <operator pos:start="146:30" pos:end="146:30">=</operator> <call pos:start="146:32" pos:end="146:86"><name pos:start="146:32" pos:end="146:61"><name pos:start="146:32" pos:end="146:32">h</name><operator pos:start="146:33" pos:end="146:34">-&gt;</operator><name pos:start="146:35" pos:end="146:39">avctx</name><operator pos:start="146:40" pos:end="146:41">-&gt;</operator><name pos:start="146:42" pos:end="146:48">hwaccel</name><operator pos:start="146:49" pos:end="146:50">-&gt;</operator><name pos:start="146:51" pos:end="146:61">start_frame</name></name><argument_list pos:start="146:62" pos:end="146:86">(<argument pos:start="146:63" pos:end="146:70"><expr pos:start="146:63" pos:end="146:70"><name pos:start="146:63" pos:end="146:70"><name pos:start="146:63" pos:end="146:63">h</name><operator pos:start="146:64" pos:end="146:65">-&gt;</operator><name pos:start="146:66" pos:end="146:70">avctx</name></name></expr></argument>, <argument pos:start="146:73" pos:end="146:75"><expr pos:start="146:73" pos:end="146:75"><name pos:start="146:73" pos:end="146:75">buf</name></expr></argument>, <argument pos:start="146:78" pos:end="146:85"><expr pos:start="146:78" pos:end="146:85"><name pos:start="146:78" pos:end="146:85">buf_size</name></expr></argument>)</argument_list></call><operator pos:start="146:87" pos:end="146:87">)</operator> <operator pos:start="146:89" pos:end="146:89">&lt;</operator> <literal type="number" pos:start="146:91" pos:end="146:91">0</literal></expr>)</condition><block type="pseudo" pos:start="147:25" pos:end="149:0"><block_content pos:start="147:25" pos:end="149:0">
                        <goto pos:start="147:25" pos:end="149:0">goto <name pos:start="147:30" pos:end="147:32">end</name>;</goto></block_content></block></if></if_stmt>
<cpp:if pos:start="148:1" pos:end="148:20">#<cpp:directive pos:start="148:2" pos:end="148:3">if</cpp:directive> <expr pos:start="148:5" pos:end="148:20"><name pos:start="148:5" pos:end="148:20">FF_API_CAP_VDPAU</name></expr></cpp:if>
                    <if_stmt pos:start="149:21" pos:end="153:0"><if pos:start="149:21" pos:end="153:0">if <condition pos:start="149:24" pos:end="150:83">(<expr pos:start="149:25" pos:end="150:82"><name pos:start="149:25" pos:end="149:49">CONFIG_H264_VDPAU_DECODER</name> <operator pos:start="149:51" pos:end="149:52">&amp;&amp;</operator>
                        <name pos:start="150:25" pos:end="150:53"><name pos:start="150:25" pos:end="150:25">h</name><operator pos:start="150:26" pos:end="150:27">-&gt;</operator><name pos:start="150:28" pos:end="150:32">avctx</name><operator pos:start="150:33" pos:end="150:34">-&gt;</operator><name pos:start="150:35" pos:end="150:39">codec</name><operator pos:start="150:40" pos:end="150:41">-&gt;</operator><name pos:start="150:42" pos:end="150:53">capabilities</name></name> <operator pos:start="150:55" pos:end="150:55">&amp;</operator> <name pos:start="150:57" pos:end="150:82">AV_CODEC_CAP_HWACCEL_VDPAU</name></expr>)</condition><block type="pseudo" pos:start="151:25" pos:end="153:0"><block_content pos:start="151:25" pos:end="153:0">
                        <expr_stmt pos:start="151:25" pos:end="153:0"><expr pos:start="151:25" pos:end="151:54"><call pos:start="151:25" pos:end="151:54"><name pos:start="151:25" pos:end="151:51">ff_vdpau_h264_picture_start</name><argument_list pos:start="151:52" pos:end="151:54">(<argument pos:start="151:53" pos:end="151:53"><expr pos:start="151:53" pos:end="151:53"><name pos:start="151:53" pos:end="151:53">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif pos:start="152:1" pos:end="152:6">#<cpp:directive pos:start="152:2" pos:end="152:6">endif</cpp:directive></cpp:endif>
                <if_stmt pos:start="153:17" pos:end="249:39"><if pos:start="153:17" pos:end="249:39">if <condition pos:start="153:20" pos:end="153:49">(<expr pos:start="153:21" pos:end="153:48"><name pos:start="153:21" pos:end="153:43"><name pos:start="153:21" pos:end="153:22">sl</name><operator pos:start="153:23" pos:end="153:24">-&gt;</operator><name pos:start="153:25" pos:end="153:43">redundant_pic_count</name></name> <operator pos:start="153:45" pos:end="153:46">==</operator> <literal type="number" pos:start="153:48" pos:end="153:48">0</literal></expr>)</condition> <block pos:start="153:51" pos:end="249:39">{<block_content pos:start="154:21" pos:end="249:39">
                    <if_stmt pos:start="154:21" pos:end="249:39"><if pos:start="154:21" pos:end="161:21">if <condition pos:start="154:24" pos:end="154:39">(<expr pos:start="154:25" pos:end="154:38"><name pos:start="154:25" pos:end="154:38"><name pos:start="154:25" pos:end="154:29">avctx</name><operator pos:start="154:30" pos:end="154:31">-&gt;</operator><name pos:start="154:32" pos:end="154:38">hwaccel</name></name></expr>)</condition> <block pos:start="154:41" pos:end="161:21">{<block_content pos:start="155:25" pos:end="161:0">
                        <expr_stmt pos:start="155:25" pos:end="157:69"><expr pos:start="155:25" pos:end="157:68"><name pos:start="155:25" pos:end="155:27">ret</name> <operator pos:start="155:29" pos:end="155:29">=</operator> <call pos:start="155:31" pos:end="157:68"><name pos:start="155:31" pos:end="155:58"><name pos:start="155:31" pos:end="155:35">avctx</name><operator pos:start="155:36" pos:end="155:37">-&gt;</operator><name pos:start="155:38" pos:end="155:44">hwaccel</name><operator pos:start="155:45" pos:end="155:46">-&gt;</operator><name pos:start="155:47" pos:end="155:58">decode_slice</name></name><argument_list pos:start="155:59" pos:end="157:68">(<argument pos:start="155:60" pos:end="155:64"><expr pos:start="155:60" pos:end="155:64"><name pos:start="155:60" pos:end="155:64">avctx</name></expr></argument>,
                                                           <argument pos:start="156:60" pos:end="156:85"><expr pos:start="156:60" pos:end="156:85"><operator pos:start="156:60" pos:end="156:60">&amp;</operator><name pos:start="156:61" pos:end="156:85"><name pos:start="156:61" pos:end="156:63">buf</name><index pos:start="156:64" pos:end="156:85">[<expr pos:start="156:65" pos:end="156:84"><name pos:start="156:65" pos:end="156:73">buf_index</name> <operator pos:start="156:75" pos:end="156:75">-</operator> <name pos:start="156:77" pos:end="156:84">consumed</name></expr>]</index></name></expr></argument>,
                                                           <argument pos:start="157:60" pos:end="157:67"><expr pos:start="157:60" pos:end="157:67"><name pos:start="157:60" pos:end="157:67">consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt pos:start="158:25" pos:end="161:0"><if pos:start="158:25" pos:end="161:0">if <condition pos:start="158:28" pos:end="158:36">(<expr pos:start="158:29" pos:end="158:35"><name pos:start="158:29" pos:end="158:31">ret</name> <operator pos:start="158:33" pos:end="158:33">&lt;</operator> <literal type="number" pos:start="158:35" pos:end="158:35">0</literal></expr>)</condition><block type="pseudo" pos:start="159:29" pos:end="161:0"><block_content pos:start="159:29" pos:end="161:0">
                            <goto pos:start="159:29" pos:end="161:0">goto <name pos:start="159:34" pos:end="159:36">end</name>;</goto></block_content></block></if></if_stmt>
<cpp:if pos:start="160:1" pos:end="160:20">#<cpp:directive pos:start="160:2" pos:end="160:3">if</cpp:directive> <expr pos:start="160:5" pos:end="160:20"><name pos:start="160:5" pos:end="160:20">FF_API_CAP_VDPAU</name></expr></cpp:if>
                    </block_content>}</block></if> <if type="elseif" pos:start="161:23" pos:end="249:39">else if <condition pos:start="161:31" pos:end="162:90">(<expr pos:start="161:32" pos:end="162:89"><name pos:start="161:32" pos:end="161:56">CONFIG_H264_VDPAU_DECODER</name> <operator pos:start="161:58" pos:end="161:59">&amp;&amp;</operator>
                               <name pos:start="162:32" pos:end="162:60"><name pos:start="162:32" pos:end="162:32">h</name><operator pos:start="162:33" pos:end="162:34">-&gt;</operator><name pos:start="162:35" pos:end="162:39">avctx</name><operator pos:start="162:40" pos:end="162:41">-&gt;</operator><name pos:start="162:42" pos:end="162:46">codec</name><operator pos:start="162:47" pos:end="162:48">-&gt;</operator><name pos:start="162:49" pos:end="162:60">capabilities</name></name> <operator pos:start="162:62" pos:end="162:62">&amp;</operator> <name pos:start="162:64" pos:end="162:89">AV_CODEC_CAP_HWACCEL_VDPAU</name></expr>)</condition> <block pos:start="162:92" pos:end="249:39">{<block_content pos:start="163:25" pos:end="249:39">
                        <expr_stmt pos:start="163:25" pos:end="165:68"><expr pos:start="163:25" pos:end="165:67"><call pos:start="163:25" pos:end="165:67"><name pos:start="163:25" pos:end="163:47">ff_vdpau_add_data_chunk</name><argument_list pos:start="163:48" pos:end="165:67">(<argument pos:start="163:49" pos:end="163:74"><expr pos:start="163:49" pos:end="163:74"><name pos:start="163:49" pos:end="163:74"><name pos:start="163:49" pos:end="163:49">h</name><operator pos:start="163:50" pos:end="163:51">-&gt;</operator><name pos:start="163:52" pos:end="163:62">cur_pic_ptr</name><operator pos:start="163:63" pos:end="163:64">-&gt;</operator><name pos:start="163:65" pos:end="163:65">f</name><operator pos:start="163:66" pos:end="163:67">-&gt;</operator><name pos:start="163:68" pos:end="163:71">data</name><index pos:start="163:72" pos:end="163:74">[<expr pos:start="163:73" pos:end="163:73"><literal type="number" pos:start="163:73" pos:end="163:73">0</literal></expr>]</index></name></expr></argument>,
                                                <argument pos:start="164:49" pos:end="164:58"><expr pos:start="164:49" pos:end="164:58"><name pos:start="164:49" pos:end="164:58">start_code</name></expr></argument>,
                                                <argument pos:start="165:49" pos:end="165:66"><expr pos:start="165:49" pos:end="165:66"><sizeof pos:start="165:49" pos:end="165:66">sizeof<argument_list pos:start="165:55" pos:end="165:66">(<argument pos:start="165:56" pos:end="165:65"><expr pos:start="165:56" pos:end="165:65"><name pos:start="165:56" pos:end="165:65">start_code</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt pos:start="166:25" pos:end="170:0"><expr pos:start="166:25" pos:end="168:57"><call pos:start="166:25" pos:end="168:57"><name pos:start="166:25" pos:end="166:47">ff_vdpau_add_data_chunk</name><argument_list pos:start="166:48" pos:end="168:57">(<argument pos:start="166:49" pos:end="166:74"><expr pos:start="166:49" pos:end="166:74"><name pos:start="166:49" pos:end="166:74"><name pos:start="166:49" pos:end="166:49">h</name><operator pos:start="166:50" pos:end="166:51">-&gt;</operator><name pos:start="166:52" pos:end="166:62">cur_pic_ptr</name><operator pos:start="166:63" pos:end="166:64">-&gt;</operator><name pos:start="166:65" pos:end="166:65">f</name><operator pos:start="166:66" pos:end="166:67">-&gt;</operator><name pos:start="166:68" pos:end="166:71">data</name><index pos:start="166:72" pos:end="166:74">[<expr pos:start="166:73" pos:end="166:73"><literal type="number" pos:start="166:73" pos:end="166:73">0</literal></expr>]</index></name></expr></argument>,
                                                <argument pos:start="167:49" pos:end="167:74"><expr pos:start="167:49" pos:end="167:74"><operator pos:start="167:49" pos:end="167:49">&amp;</operator><name pos:start="167:50" pos:end="167:74"><name pos:start="167:50" pos:end="167:52">buf</name><index pos:start="167:53" pos:end="167:74">[<expr pos:start="167:54" pos:end="167:73"><name pos:start="167:54" pos:end="167:62">buf_index</name> <operator pos:start="167:64" pos:end="167:64">-</operator> <name pos:start="167:66" pos:end="167:73">consumed</name></expr>]</index></name></expr></argument>,
                                                <argument pos:start="168:49" pos:end="168:56"><expr pos:start="168:49" pos:end="168:56"><name pos:start="168:49" pos:end="168:56">consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif pos:start="169:1" pos:end="169:6">#<cpp:directive pos:start="169:2" pos:end="169:6">endif</cpp:directive></cpp:endif>
                        <expr_stmt pos:start="170:25" pos:end="170:40"><expr pos:start="170:25" pos:end="170:39"><name pos:start="170:25" pos:end="170:37">context_count</name><operator pos:start="170:38" pos:end="170:39">++</operator></expr>;</expr_stmt>
                <break pos:start="171:17" pos:end="171:22">break;</break>
            <case pos:start="172:13" pos:end="172:25">case <expr pos:start="172:18" pos:end="172:24"><name pos:start="172:18" pos:end="172:24">NAL_DPA</name></expr>:</case>
            <case pos:start="173:13" pos:end="173:25">case <expr pos:start="173:18" pos:end="173:24"><name pos:start="173:18" pos:end="173:24">NAL_DPB</name></expr>:</case>
            <case pos:start="174:13" pos:end="174:25">case <expr pos:start="174:18" pos:end="174:24"><name pos:start="174:18" pos:end="174:24">NAL_DPC</name></expr>:</case>
                <expr_stmt pos:start="175:17" pos:end="175:66"><expr pos:start="175:17" pos:end="175:65"><call pos:start="175:17" pos:end="175:65"><name pos:start="175:17" pos:end="175:37">avpriv_request_sample</name><argument_list pos:start="175:38" pos:end="175:65">(<argument pos:start="175:39" pos:end="175:43"><expr pos:start="175:39" pos:end="175:43"><name pos:start="175:39" pos:end="175:43">avctx</name></expr></argument>, <argument pos:start="175:46" pos:end="175:64"><expr pos:start="175:46" pos:end="175:64"><literal type="string" pos:start="175:46" pos:end="175:64">"data partitioning"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="176:17" pos:end="176:22">break;</break>
            <case pos:start="177:13" pos:end="177:25">case <expr pos:start="177:18" pos:end="177:24"><name pos:start="177:18" pos:end="177:24">NAL_SEI</name></expr>:</case>
                <expr_stmt pos:start="178:17" pos:end="178:55"><expr pos:start="178:17" pos:end="178:54"><call pos:start="178:17" pos:end="178:54"><name pos:start="178:17" pos:end="178:29">init_get_bits</name><argument_list pos:start="178:30" pos:end="178:54">(<argument pos:start="178:31" pos:end="178:36"><expr pos:start="178:31" pos:end="178:36"><operator pos:start="178:31" pos:end="178:31">&amp;</operator><name pos:start="178:32" pos:end="178:36"><name pos:start="178:32" pos:end="178:32">h</name><operator pos:start="178:33" pos:end="178:34">-&gt;</operator><name pos:start="178:35" pos:end="178:36">gb</name></name></expr></argument>, <argument pos:start="178:39" pos:end="178:41"><expr pos:start="178:39" pos:end="178:41"><name pos:start="178:39" pos:end="178:41">ptr</name></expr></argument>, <argument pos:start="178:44" pos:end="178:53"><expr pos:start="178:44" pos:end="178:53"><name pos:start="178:44" pos:end="178:53">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="179:17" pos:end="179:44"><expr pos:start="179:17" pos:end="179:43"><name pos:start="179:17" pos:end="179:19">ret</name> <operator pos:start="179:21" pos:end="179:21">=</operator> <call pos:start="179:23" pos:end="179:43"><name pos:start="179:23" pos:end="179:40">ff_h264_decode_sei</name><argument_list pos:start="179:41" pos:end="179:43">(<argument pos:start="179:42" pos:end="179:42"><expr pos:start="179:42" pos:end="179:42"><name pos:start="179:42" pos:end="179:42">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="180:17" pos:end="181:29"><if pos:start="180:17" pos:end="181:29">if <condition pos:start="180:20" pos:end="180:75">(<expr pos:start="180:21" pos:end="180:74"><name pos:start="180:21" pos:end="180:23">ret</name> <operator pos:start="180:25" pos:end="180:25">&lt;</operator> <literal type="number" pos:start="180:27" pos:end="180:27">0</literal> <operator pos:start="180:29" pos:end="180:30">&amp;&amp;</operator> <operator pos:start="180:32" pos:end="180:32">(</operator><name pos:start="180:33" pos:end="180:57"><name pos:start="180:33" pos:end="180:33">h</name><operator pos:start="180:34" pos:end="180:35">-&gt;</operator><name pos:start="180:36" pos:end="180:40">avctx</name><operator pos:start="180:41" pos:end="180:42">-&gt;</operator><name pos:start="180:43" pos:end="180:57">err_recognition</name></name> <operator pos:start="180:59" pos:end="180:59">&amp;</operator> <name pos:start="180:61" pos:end="180:73">AV_EF_EXPLODE</name><operator pos:start="180:74" pos:end="180:74">)</operator></expr>)</condition><block type="pseudo" pos:start="181:21" pos:end="181:29"><block_content pos:start="181:21" pos:end="181:29">
                    <goto pos:start="181:21" pos:end="181:29">goto <name pos:start="181:26" pos:end="181:28">end</name>;</goto></block_content></block></if></if_stmt>
                <break pos:start="182:17" pos:end="182:22">break;</break>
            <case pos:start="183:13" pos:end="183:25">case <expr pos:start="183:18" pos:end="183:24"><name pos:start="183:18" pos:end="183:24">NAL_SPS</name></expr>:</case>
                <expr_stmt pos:start="184:17" pos:end="184:55"><expr pos:start="184:17" pos:end="184:54"><call pos:start="184:17" pos:end="184:54"><name pos:start="184:17" pos:end="184:29">init_get_bits</name><argument_list pos:start="184:30" pos:end="184:54">(<argument pos:start="184:31" pos:end="184:36"><expr pos:start="184:31" pos:end="184:36"><operator pos:start="184:31" pos:end="184:31">&amp;</operator><name pos:start="184:32" pos:end="184:36"><name pos:start="184:32" pos:end="184:32">h</name><operator pos:start="184:33" pos:end="184:34">-&gt;</operator><name pos:start="184:35" pos:end="184:36">gb</name></name></expr></argument>, <argument pos:start="184:39" pos:end="184:41"><expr pos:start="184:39" pos:end="184:41"><name pos:start="184:39" pos:end="184:41">ptr</name></expr></argument>, <argument pos:start="184:44" pos:end="184:53"><expr pos:start="184:44" pos:end="184:53"><name pos:start="184:44" pos:end="184:53">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="185:17" pos:end="186:26"><if pos:start="185:17" pos:end="186:26">if <condition pos:start="185:20" pos:end="185:64">(<expr pos:start="185:21" pos:end="185:63"><call pos:start="185:21" pos:end="185:58"><name pos:start="185:21" pos:end="185:52">ff_h264_decode_seq_parameter_set</name><argument_list pos:start="185:53" pos:end="185:58">(<argument pos:start="185:54" pos:end="185:54"><expr pos:start="185:54" pos:end="185:54"><name pos:start="185:54" pos:end="185:54">h</name></expr></argument>, <argument pos:start="185:57" pos:end="185:57"><expr pos:start="185:57" pos:end="185:57"><literal type="number" pos:start="185:57" pos:end="185:57">0</literal></expr></argument>)</argument_list></call> <operator pos:start="185:60" pos:end="185:61">&gt;=</operator> <literal type="number" pos:start="185:63" pos:end="185:63">0</literal></expr>)</condition><block type="pseudo" pos:start="186:21" pos:end="186:26"><block_content pos:start="186:21" pos:end="186:26">
                    <break pos:start="186:21" pos:end="186:26">break;</break></block_content></block></if></if_stmt>
                <if_stmt pos:start="187:17" pos:end="249:39"><if pos:start="187:17" pos:end="249:39">if <condition pos:start="187:20" pos:end="187:44">(<expr pos:start="187:21" pos:end="187:43"><ternary pos:start="187:21" pos:end="187:43"><condition pos:start="187:21" pos:end="187:31"><expr pos:start="187:21" pos:end="187:29"><name pos:start="187:21" pos:end="187:29"><name pos:start="187:21" pos:end="187:21">h</name><operator pos:start="187:22" pos:end="187:23">-&gt;</operator><name pos:start="187:24" pos:end="187:29">is_avc</name></name></expr> ?</condition><then pos:start="187:33" pos:end="187:39"> <expr pos:start="187:33" pos:end="187:39"><name pos:start="187:33" pos:end="187:39">nalsize</name></expr> </then><else pos:start="187:41" pos:end="187:43">: <expr pos:start="187:43" pos:end="187:43"><literal type="number" pos:start="187:43" pos:end="187:43">1</literal></expr></else></ternary></expr>)</condition> <block pos:start="187:46" pos:end="249:39">{<block_content pos:start="188:21" pos:end="249:39">
                    <expr_stmt pos:start="188:21" pos:end="189:89"><expr pos:start="188:21" pos:end="189:88"><call pos:start="188:21" pos:end="189:88"><name pos:start="188:21" pos:end="188:26">av_log</name><argument_list pos:start="188:27" pos:end="189:88">(<argument pos:start="188:28" pos:end="188:35"><expr pos:start="188:28" pos:end="188:35"><name pos:start="188:28" pos:end="188:35"><name pos:start="188:28" pos:end="188:28">h</name><operator pos:start="188:29" pos:end="188:30">-&gt;</operator><name pos:start="188:31" pos:end="188:35">avctx</name></name></expr></argument>, <argument pos:start="188:38" pos:end="188:49"><expr pos:start="188:38" pos:end="188:49"><name pos:start="188:38" pos:end="188:49">AV_LOG_DEBUG</name></expr></argument>,
                           <argument pos:start="189:28" pos:end="189:87"><expr pos:start="189:28" pos:end="189:87"><literal type="string" pos:start="189:28" pos:end="189:87">"SPS decoding failure, trying again with the complete NAL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="190:21" pos:end="191:79"><if pos:start="190:21" pos:end="191:79">if <condition pos:start="190:24" pos:end="190:34">(<expr pos:start="190:25" pos:end="190:33"><name pos:start="190:25" pos:end="190:33"><name pos:start="190:25" pos:end="190:25">h</name><operator pos:start="190:26" pos:end="190:27">-&gt;</operator><name pos:start="190:28" pos:end="190:33">is_avc</name></name></expr>)</condition><block type="pseudo" pos:start="191:25" pos:end="191:79"><block_content pos:start="191:25" pos:end="191:79">
                        <expr_stmt pos:start="191:25" pos:end="191:79"><expr pos:start="191:25" pos:end="191:78"><call pos:start="191:25" pos:end="191:78"><name pos:start="191:25" pos:end="191:34">av_assert0</name><argument_list pos:start="191:35" pos:end="191:78">(<argument pos:start="191:36" pos:end="191:77"><expr pos:start="191:36" pos:end="191:77"><name pos:start="191:36" pos:end="191:43">next_avc</name> <operator pos:start="191:45" pos:end="191:45">-</operator> <name pos:start="191:47" pos:end="191:55">buf_index</name> <operator pos:start="191:57" pos:end="191:57">+</operator> <name pos:start="191:59" pos:end="191:66">consumed</name> <operator pos:start="191:68" pos:end="191:69">==</operator> <name pos:start="191:71" pos:end="191:77">nalsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <if_stmt pos:start="192:21" pos:end="193:30"><if pos:start="192:21" pos:end="193:30">if <condition pos:start="192:24" pos:end="192:75">(<expr pos:start="192:25" pos:end="192:74"><operator pos:start="192:25" pos:end="192:25">(</operator><name pos:start="192:26" pos:end="192:33">next_avc</name> <operator pos:start="192:35" pos:end="192:35">-</operator> <name pos:start="192:37" pos:end="192:45">buf_index</name> <operator pos:start="192:47" pos:end="192:47">+</operator> <name pos:start="192:49" pos:end="192:56">consumed</name> <operator pos:start="192:58" pos:end="192:58">-</operator> <literal type="number" pos:start="192:60" pos:end="192:60">1</literal><operator pos:start="192:61" pos:end="192:61">)</operator> <operator pos:start="192:63" pos:end="192:64">&gt;=</operator> <name pos:start="192:66" pos:end="192:72">INT_MAX</name><operator pos:start="192:73" pos:end="192:73">/</operator><literal type="number" pos:start="192:74" pos:end="192:74">8</literal></expr>)</condition><block type="pseudo" pos:start="193:25" pos:end="193:30"><block_content pos:start="193:25" pos:end="193:30">
                        <break pos:start="193:25" pos:end="193:30">break;</break></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="194:21" pos:end="195:75"><expr pos:start="194:21" pos:end="195:74"><call pos:start="194:21" pos:end="195:74"><name pos:start="194:21" pos:end="194:33">init_get_bits</name><argument_list pos:start="194:34" pos:end="195:74">(<argument pos:start="194:35" pos:end="194:40"><expr pos:start="194:35" pos:end="194:40"><operator pos:start="194:35" pos:end="194:35">&amp;</operator><name pos:start="194:36" pos:end="194:40"><name pos:start="194:36" pos:end="194:36">h</name><operator pos:start="194:37" pos:end="194:38">-&gt;</operator><name pos:start="194:39" pos:end="194:40">gb</name></name></expr></argument>, <argument pos:start="194:43" pos:end="194:72"><expr pos:start="194:43" pos:end="194:72"><operator pos:start="194:43" pos:end="194:43">&amp;</operator><name pos:start="194:44" pos:end="194:72"><name pos:start="194:44" pos:end="194:46">buf</name><index pos:start="194:47" pos:end="194:72">[<expr pos:start="194:48" pos:end="194:71"><name pos:start="194:48" pos:end="194:56">buf_index</name> <operator pos:start="194:58" pos:end="194:58">+</operator> <literal type="number" pos:start="194:60" pos:end="194:62">1</literal> <operator pos:start="194:62" pos:end="194:62">-</operator> <name pos:start="194:64" pos:end="194:71">consumed</name></expr>]</index></name></expr></argument>,
                                  <argument pos:start="195:35" pos:end="195:73"><expr pos:start="195:35" pos:end="195:73"><literal type="number" pos:start="195:35" pos:end="195:35">8</literal><operator pos:start="195:36" pos:end="195:36">*</operator><operator pos:start="195:37" pos:end="195:37">(</operator><name pos:start="195:38" pos:end="195:45">next_avc</name> <operator pos:start="195:47" pos:end="195:47">-</operator> <name pos:start="195:49" pos:end="195:57">buf_index</name> <operator pos:start="195:59" pos:end="195:59">+</operator> <name pos:start="195:61" pos:end="195:68">consumed</name> <operator pos:start="195:70" pos:end="195:70">-</operator> <literal type="number" pos:start="195:72" pos:end="195:72">1</literal><operator pos:start="195:73" pos:end="195:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="196:21" pos:end="197:30"><if pos:start="196:21" pos:end="197:30">if <condition pos:start="196:24" pos:end="196:68">(<expr pos:start="196:25" pos:end="196:67"><call pos:start="196:25" pos:end="196:62"><name pos:start="196:25" pos:end="196:56">ff_h264_decode_seq_parameter_set</name><argument_list pos:start="196:57" pos:end="196:62">(<argument pos:start="196:58" pos:end="196:58"><expr pos:start="196:58" pos:end="196:58"><name pos:start="196:58" pos:end="196:58">h</name></expr></argument>, <argument pos:start="196:61" pos:end="196:61"><expr pos:start="196:61" pos:end="196:61"><literal type="number" pos:start="196:61" pos:end="196:61">0</literal></expr></argument>)</argument_list></call> <operator pos:start="196:64" pos:end="196:65">&gt;=</operator> <literal type="number" pos:start="196:67" pos:end="196:67">0</literal></expr>)</condition><block type="pseudo" pos:start="197:25" pos:end="197:30"><block_content pos:start="197:25" pos:end="197:30">
                        <break pos:start="197:25" pos:end="197:30">break;</break></block_content></block></if></if_stmt>
                <expr_stmt pos:start="198:17" pos:end="198:55"><expr pos:start="198:17" pos:end="198:54"><call pos:start="198:17" pos:end="198:54"><name pos:start="198:17" pos:end="198:29">init_get_bits</name><argument_list pos:start="198:30" pos:end="198:54">(<argument pos:start="198:31" pos:end="198:36"><expr pos:start="198:31" pos:end="198:36"><operator pos:start="198:31" pos:end="198:31">&amp;</operator><name pos:start="198:32" pos:end="198:36"><name pos:start="198:32" pos:end="198:32">h</name><operator pos:start="198:33" pos:end="198:34">-&gt;</operator><name pos:start="198:35" pos:end="198:36">gb</name></name></expr></argument>, <argument pos:start="198:39" pos:end="198:41"><expr pos:start="198:39" pos:end="198:41"><name pos:start="198:39" pos:end="198:41">ptr</name></expr></argument>, <argument pos:start="198:44" pos:end="198:53"><expr pos:start="198:44" pos:end="198:53"><name pos:start="198:44" pos:end="198:53">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="199:17" pos:end="199:55"><expr pos:start="199:17" pos:end="199:54"><call pos:start="199:17" pos:end="199:54"><name pos:start="199:17" pos:end="199:48">ff_h264_decode_seq_parameter_set</name><argument_list pos:start="199:49" pos:end="199:54">(<argument pos:start="199:50" pos:end="199:50"><expr pos:start="199:50" pos:end="199:50"><name pos:start="199:50" pos:end="199:50">h</name></expr></argument>, <argument pos:start="199:53" pos:end="199:53"><expr pos:start="199:53" pos:end="199:53"><literal type="number" pos:start="199:53" pos:end="199:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="200:17" pos:end="200:22">break;</break>
            <case pos:start="201:13" pos:end="201:25">case <expr pos:start="201:18" pos:end="201:24"><name pos:start="201:18" pos:end="201:24">NAL_PPS</name></expr>:</case>
                <expr_stmt pos:start="202:17" pos:end="202:55"><expr pos:start="202:17" pos:end="202:54"><call pos:start="202:17" pos:end="202:54"><name pos:start="202:17" pos:end="202:29">init_get_bits</name><argument_list pos:start="202:30" pos:end="202:54">(<argument pos:start="202:31" pos:end="202:36"><expr pos:start="202:31" pos:end="202:36"><operator pos:start="202:31" pos:end="202:31">&amp;</operator><name pos:start="202:32" pos:end="202:36"><name pos:start="202:32" pos:end="202:32">h</name><operator pos:start="202:33" pos:end="202:34">-&gt;</operator><name pos:start="202:35" pos:end="202:36">gb</name></name></expr></argument>, <argument pos:start="202:39" pos:end="202:41"><expr pos:start="202:39" pos:end="202:41"><name pos:start="202:39" pos:end="202:41">ptr</name></expr></argument>, <argument pos:start="202:44" pos:end="202:53"><expr pos:start="202:44" pos:end="202:53"><name pos:start="202:44" pos:end="202:53">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="203:17" pos:end="203:74"><expr pos:start="203:17" pos:end="203:73"><name pos:start="203:17" pos:end="203:19">ret</name> <operator pos:start="203:21" pos:end="203:21">=</operator> <call pos:start="203:23" pos:end="203:73"><name pos:start="203:23" pos:end="203:58">ff_h264_decode_picture_parameter_set</name><argument_list pos:start="203:59" pos:end="203:73">(<argument pos:start="203:60" pos:end="203:60"><expr pos:start="203:60" pos:end="203:60"><name pos:start="203:60" pos:end="203:60">h</name></expr></argument>, <argument pos:start="203:63" pos:end="203:72"><expr pos:start="203:63" pos:end="203:72"><name pos:start="203:63" pos:end="203:72">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="204:17" pos:end="205:29"><if pos:start="204:17" pos:end="205:29">if <condition pos:start="204:20" pos:end="204:75">(<expr pos:start="204:21" pos:end="204:74"><name pos:start="204:21" pos:end="204:23">ret</name> <operator pos:start="204:25" pos:end="204:25">&lt;</operator> <literal type="number" pos:start="204:27" pos:end="204:27">0</literal> <operator pos:start="204:29" pos:end="204:30">&amp;&amp;</operator> <operator pos:start="204:32" pos:end="204:32">(</operator><name pos:start="204:33" pos:end="204:57"><name pos:start="204:33" pos:end="204:33">h</name><operator pos:start="204:34" pos:end="204:35">-&gt;</operator><name pos:start="204:36" pos:end="204:40">avctx</name><operator pos:start="204:41" pos:end="204:42">-&gt;</operator><name pos:start="204:43" pos:end="204:57">err_recognition</name></name> <operator pos:start="204:59" pos:end="204:59">&amp;</operator> <name pos:start="204:61" pos:end="204:73">AV_EF_EXPLODE</name><operator pos:start="204:74" pos:end="204:74">)</operator></expr>)</condition><block type="pseudo" pos:start="205:21" pos:end="205:29"><block_content pos:start="205:21" pos:end="205:29">
                    <goto pos:start="205:21" pos:end="205:29">goto <name pos:start="205:26" pos:end="205:28">end</name>;</goto></block_content></block></if></if_stmt>
                <break pos:start="206:17" pos:end="206:22">break;</break>
            <case pos:start="207:13" pos:end="207:25">case <expr pos:start="207:18" pos:end="207:24"><name pos:start="207:18" pos:end="207:24">NAL_AUD</name></expr>:</case>
            <case pos:start="208:13" pos:end="208:34">case <expr pos:start="208:18" pos:end="208:33"><name pos:start="208:18" pos:end="208:33">NAL_END_SEQUENCE</name></expr>:</case>
            <case pos:start="209:13" pos:end="209:32">case <expr pos:start="209:18" pos:end="209:31"><name pos:start="209:18" pos:end="209:31">NAL_END_STREAM</name></expr>:</case>
            <case pos:start="210:13" pos:end="210:33">case <expr pos:start="210:18" pos:end="210:32"><name pos:start="210:18" pos:end="210:32">NAL_FILLER_DATA</name></expr>:</case>
            <case pos:start="211:13" pos:end="211:29">case <expr pos:start="211:18" pos:end="211:28"><name pos:start="211:18" pos:end="211:28">NAL_SPS_EXT</name></expr>:</case>
            <case pos:start="212:13" pos:end="212:37">case <expr pos:start="212:18" pos:end="212:36"><name pos:start="212:18" pos:end="212:36">NAL_AUXILIARY_SLICE</name></expr>:</case>
                <break pos:start="213:17" pos:end="213:22">break;</break>
            <case pos:start="214:13" pos:end="214:31">case <expr pos:start="214:18" pos:end="214:30"><name pos:start="214:18" pos:end="214:30">NAL_FF_IGNORE</name></expr>:</case>
                <break pos:start="215:17" pos:end="215:22">break;</break>
            <default pos:start="216:13" pos:end="216:20">default:</default>
                <expr_stmt pos:start="217:17" pos:end="218:53"><expr pos:start="217:17" pos:end="218:52"><call pos:start="217:17" pos:end="218:52"><name pos:start="217:17" pos:end="217:22">av_log</name><argument_list pos:start="217:23" pos:end="218:52">(<argument pos:start="217:24" pos:end="217:28"><expr pos:start="217:24" pos:end="217:28"><name pos:start="217:24" pos:end="217:28">avctx</name></expr></argument>, <argument pos:start="217:31" pos:end="217:42"><expr pos:start="217:31" pos:end="217:42"><name pos:start="217:31" pos:end="217:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="217:45" pos:end="217:78"><expr pos:start="217:45" pos:end="217:78"><literal type="string" pos:start="217:45" pos:end="217:78">"Unknown NAL code: %d (%d bits)\n"</literal></expr></argument>,
                       <argument pos:start="218:24" pos:end="218:39"><expr pos:start="218:24" pos:end="218:39"><name pos:start="218:24" pos:end="218:39"><name pos:start="218:24" pos:end="218:24">h</name><operator pos:start="218:25" pos:end="218:26">-&gt;</operator><name pos:start="218:27" pos:end="218:39">nal_unit_type</name></name></expr></argument>, <argument pos:start="218:42" pos:end="218:51"><expr pos:start="218:42" pos:end="218:51"><name pos:start="218:42" pos:end="218:51">bit_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="219:13" pos:end="249:39"><if pos:start="219:13" pos:end="249:39">if <condition pos:start="219:16" pos:end="219:49">(<expr pos:start="219:17" pos:end="219:48"><name pos:start="219:17" pos:end="219:29">context_count</name> <operator pos:start="219:31" pos:end="219:32">==</operator> <name pos:start="219:34" pos:end="219:48"><name pos:start="219:34" pos:end="219:34">h</name><operator pos:start="219:35" pos:end="219:36">-&gt;</operator><name pos:start="219:37" pos:end="219:48">max_contexts</name></name></expr>)</condition> <block pos:start="219:51" pos:end="249:39">{<block_content pos:start="220:17" pos:end="249:39">
                <expr_stmt pos:start="220:17" pos:end="220:70"><expr pos:start="220:17" pos:end="220:69"><name pos:start="220:17" pos:end="220:19">ret</name> <operator pos:start="220:21" pos:end="220:21">=</operator> <call pos:start="220:23" pos:end="220:69"><name pos:start="220:23" pos:end="220:51">ff_h264_execute_decode_slices</name><argument_list pos:start="220:52" pos:end="220:69">(<argument pos:start="220:53" pos:end="220:53"><expr pos:start="220:53" pos:end="220:53"><name pos:start="220:53" pos:end="220:53">h</name></expr></argument>, <argument pos:start="220:56" pos:end="220:68"><expr pos:start="220:56" pos:end="220:68"><name pos:start="220:56" pos:end="220:68">context_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="221:17" pos:end="222:29"><if pos:start="221:17" pos:end="222:29">if <condition pos:start="221:20" pos:end="221:75">(<expr pos:start="221:21" pos:end="221:74"><name pos:start="221:21" pos:end="221:23">ret</name> <operator pos:start="221:25" pos:end="221:25">&lt;</operator> <literal type="number" pos:start="221:27" pos:end="221:27">0</literal> <operator pos:start="221:29" pos:end="221:30">&amp;&amp;</operator> <operator pos:start="221:32" pos:end="221:32">(</operator><name pos:start="221:33" pos:end="221:57"><name pos:start="221:33" pos:end="221:33">h</name><operator pos:start="221:34" pos:end="221:35">-&gt;</operator><name pos:start="221:36" pos:end="221:40">avctx</name><operator pos:start="221:41" pos:end="221:42">-&gt;</operator><name pos:start="221:43" pos:end="221:57">err_recognition</name></name> <operator pos:start="221:59" pos:end="221:59">&amp;</operator> <name pos:start="221:61" pos:end="221:73">AV_EF_EXPLODE</name><operator pos:start="221:74" pos:end="221:74">)</operator></expr>)</condition><block type="pseudo" pos:start="222:21" pos:end="222:29"><block_content pos:start="222:21" pos:end="222:29">
                    <goto pos:start="222:21" pos:end="222:29">goto <name pos:start="222:26" pos:end="222:28">end</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="223:17" pos:end="223:34"><expr pos:start="223:17" pos:end="223:33"><name pos:start="223:17" pos:end="223:29">context_count</name> <operator pos:start="223:31" pos:end="223:31">=</operator> <literal type="number" pos:start="223:33" pos:end="223:33">0</literal></expr>;</expr_stmt>
            <if_stmt pos:start="224:13" pos:end="249:39"><if pos:start="224:13" pos:end="228:13">if <condition pos:start="224:16" pos:end="224:47">(<expr pos:start="224:17" pos:end="224:46"><name pos:start="224:17" pos:end="224:19">err</name> <operator pos:start="224:21" pos:end="224:21">&lt;</operator> <literal type="number" pos:start="224:23" pos:end="224:23">0</literal> <operator pos:start="224:25" pos:end="224:26">||</operator> <name pos:start="224:28" pos:end="224:30">err</name> <operator pos:start="224:32" pos:end="224:33">==</operator> <name pos:start="224:35" pos:end="224:46">SLICE_SKIPED</name></expr>)</condition> <block pos:start="224:49" pos:end="228:13">{<block_content pos:start="225:17" pos:end="227:73">
                <if_stmt pos:start="225:17" pos:end="226:82"><if pos:start="225:17" pos:end="226:82">if <condition pos:start="225:20" pos:end="225:28">(<expr pos:start="225:21" pos:end="225:27"><name pos:start="225:21" pos:end="225:23">err</name> <operator pos:start="225:25" pos:end="225:25">&lt;</operator> <literal type="number" pos:start="225:27" pos:end="225:27">0</literal></expr>)</condition><block type="pseudo" pos:start="226:21" pos:end="226:82"><block_content pos:start="226:21" pos:end="226:82">
                    <expr_stmt pos:start="226:21" pos:end="226:82"><expr pos:start="226:21" pos:end="226:81"><call pos:start="226:21" pos:end="226:81"><name pos:start="226:21" pos:end="226:26">av_log</name><argument_list pos:start="226:27" pos:end="226:81">(<argument pos:start="226:28" pos:end="226:35"><expr pos:start="226:28" pos:end="226:35"><name pos:start="226:28" pos:end="226:35"><name pos:start="226:28" pos:end="226:28">h</name><operator pos:start="226:29" pos:end="226:30">-&gt;</operator><name pos:start="226:31" pos:end="226:35">avctx</name></name></expr></argument>, <argument pos:start="226:38" pos:end="226:49"><expr pos:start="226:38" pos:end="226:49"><name pos:start="226:38" pos:end="226:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="226:52" pos:end="226:80"><expr pos:start="226:52" pos:end="226:80"><literal type="string" pos:start="226:52" pos:end="226:80">"decode_slice_header error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt pos:start="227:17" pos:end="227:73"><expr pos:start="227:17" pos:end="227:72"><name pos:start="227:17" pos:end="227:32"><name pos:start="227:17" pos:end="227:18">sl</name><operator pos:start="227:19" pos:end="227:20">-&gt;</operator><name pos:start="227:21" pos:end="227:29">ref_count</name><index pos:start="227:30" pos:end="227:32">[<expr pos:start="227:31" pos:end="227:31"><literal type="number" pos:start="227:31" pos:end="227:31">0</literal></expr>]</index></name> <operator pos:start="227:34" pos:end="227:34">=</operator> <name pos:start="227:36" pos:end="227:51"><name pos:start="227:36" pos:end="227:37">sl</name><operator pos:start="227:38" pos:end="227:39">-&gt;</operator><name pos:start="227:40" pos:end="227:48">ref_count</name><index pos:start="227:49" pos:end="227:51">[<expr pos:start="227:50" pos:end="227:50"><literal type="number" pos:start="227:50" pos:end="227:50">1</literal></expr>]</index></name> <operator pos:start="227:53" pos:end="227:53">=</operator> <name pos:start="227:55" pos:end="227:68"><name pos:start="227:55" pos:end="227:56">sl</name><operator pos:start="227:57" pos:end="227:58">-&gt;</operator><name pos:start="227:59" pos:end="227:68">list_count</name></name> <operator pos:start="227:70" pos:end="227:70">=</operator> <literal type="number" pos:start="227:72" pos:end="227:72">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="228:15" pos:end="249:39">else if <condition pos:start="228:23" pos:end="228:49">(<expr pos:start="228:24" pos:end="228:48"><name pos:start="228:24" pos:end="228:26">err</name> <operator pos:start="228:28" pos:end="228:29">==</operator> <name pos:start="228:31" pos:end="228:48">SLICE_SINGLETHREAD</name></expr>)</condition> <block pos:start="228:51" pos:end="249:39">{<block_content pos:start="229:17" pos:end="249:39">
                <if_stmt pos:start="229:17" pos:end="249:39"><if pos:start="229:17" pos:end="249:39">if <condition pos:start="229:20" pos:end="229:38">(<expr pos:start="229:21" pos:end="229:37"><name pos:start="229:21" pos:end="229:33">context_count</name> <operator pos:start="229:35" pos:end="229:35">&gt;</operator> <literal type="number" pos:start="229:37" pos:end="229:37">1</literal></expr>)</condition> <block pos:start="229:40" pos:end="249:39">{<block_content pos:start="230:21" pos:end="249:39">
                    <expr_stmt pos:start="230:21" pos:end="230:78"><expr pos:start="230:21" pos:end="230:77"><name pos:start="230:21" pos:end="230:23">ret</name> <operator pos:start="230:25" pos:end="230:25">=</operator> <call pos:start="230:27" pos:end="230:77"><name pos:start="230:27" pos:end="230:55">ff_h264_execute_decode_slices</name><argument_list pos:start="230:56" pos:end="230:77">(<argument pos:start="230:57" pos:end="230:57"><expr pos:start="230:57" pos:end="230:57"><name pos:start="230:57" pos:end="230:57">h</name></expr></argument>, <argument pos:start="230:60" pos:end="230:76"><expr pos:start="230:60" pos:end="230:76"><name pos:start="230:60" pos:end="230:72">context_count</name> <operator pos:start="230:74" pos:end="230:74">-</operator> <literal type="number" pos:start="230:76" pos:end="230:76">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="231:21" pos:end="232:33"><if pos:start="231:21" pos:end="232:33">if <condition pos:start="231:24" pos:end="231:79">(<expr pos:start="231:25" pos:end="231:78"><name pos:start="231:25" pos:end="231:27">ret</name> <operator pos:start="231:29" pos:end="231:29">&lt;</operator> <literal type="number" pos:start="231:31" pos:end="231:31">0</literal> <operator pos:start="231:33" pos:end="231:34">&amp;&amp;</operator> <operator pos:start="231:36" pos:end="231:36">(</operator><name pos:start="231:37" pos:end="231:61"><name pos:start="231:37" pos:end="231:37">h</name><operator pos:start="231:38" pos:end="231:39">-&gt;</operator><name pos:start="231:40" pos:end="231:44">avctx</name><operator pos:start="231:45" pos:end="231:46">-&gt;</operator><name pos:start="231:47" pos:end="231:61">err_recognition</name></name> <operator pos:start="231:63" pos:end="231:63">&amp;</operator> <name pos:start="231:65" pos:end="231:77">AV_EF_EXPLODE</name><operator pos:start="231:78" pos:end="231:78">)</operator></expr>)</condition><block type="pseudo" pos:start="232:25" pos:end="232:33"><block_content pos:start="232:25" pos:end="232:33">
                        <goto pos:start="232:25" pos:end="232:33">goto <name pos:start="232:30" pos:end="232:32">end</name>;</goto></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="233:21" pos:end="233:38"><expr pos:start="233:21" pos:end="233:37"><name pos:start="233:21" pos:end="233:33">context_count</name> <operator pos:start="233:35" pos:end="233:35">=</operator> <literal type="number" pos:start="233:37" pos:end="233:37">0</literal></expr>;</expr_stmt>
                <comment type="block" pos:start="234:17" pos:end="236:71">/* Slice could not be decoded in parallel mode, restart. Note
                 * that rbsp_buffer is not transferred, but since we no longer
                 * run in parallel mode this should not be an issue. */</comment>
                <expr_stmt pos:start="237:17" pos:end="237:52"><expr pos:start="237:17" pos:end="237:51"><name pos:start="237:17" pos:end="237:18">sl</name>               <operator pos:start="237:34" pos:end="237:34">=</operator> <operator pos:start="237:36" pos:end="237:36">&amp;</operator><name pos:start="237:37" pos:end="237:51"><name pos:start="237:37" pos:end="237:37">h</name><operator pos:start="237:38" pos:end="237:39">-&gt;</operator><name pos:start="237:40" pos:end="237:48">slice_ctx</name><index pos:start="237:49" pos:end="237:51">[<expr pos:start="237:50" pos:end="237:50"><literal type="number" pos:start="237:50" pos:end="237:50">0</literal></expr>]</index></name></expr>;</expr_stmt>
                <goto pos:start="238:17" pos:end="238:27">goto <name pos:start="238:22" pos:end="238:26">again</name>;</goto>
    <if_stmt pos:start="239:5" pos:end="249:39"><if pos:start="239:5" pos:end="249:39">if <condition pos:start="239:8" pos:end="239:22">(<expr pos:start="239:9" pos:end="239:21"><name pos:start="239:9" pos:end="239:21">context_count</name></expr>)</condition> <block pos:start="239:24" pos:end="249:39">{<block_content pos:start="240:9" pos:end="249:39">
        <expr_stmt pos:start="240:9" pos:end="240:62"><expr pos:start="240:9" pos:end="240:61"><name pos:start="240:9" pos:end="240:11">ret</name> <operator pos:start="240:13" pos:end="240:13">=</operator> <call pos:start="240:15" pos:end="240:61"><name pos:start="240:15" pos:end="240:43">ff_h264_execute_decode_slices</name><argument_list pos:start="240:44" pos:end="240:61">(<argument pos:start="240:45" pos:end="240:45"><expr pos:start="240:45" pos:end="240:45"><name pos:start="240:45" pos:end="240:45">h</name></expr></argument>, <argument pos:start="240:48" pos:end="240:60"><expr pos:start="240:48" pos:end="240:60"><name pos:start="240:48" pos:end="240:60">context_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="241:9" pos:end="242:21"><if pos:start="241:9" pos:end="242:21">if <condition pos:start="241:12" pos:end="241:67">(<expr pos:start="241:13" pos:end="241:66"><name pos:start="241:13" pos:end="241:15">ret</name> <operator pos:start="241:17" pos:end="241:17">&lt;</operator> <literal type="number" pos:start="241:19" pos:end="241:19">0</literal> <operator pos:start="241:21" pos:end="241:22">&amp;&amp;</operator> <operator pos:start="241:24" pos:end="241:24">(</operator><name pos:start="241:25" pos:end="241:49"><name pos:start="241:25" pos:end="241:25">h</name><operator pos:start="241:26" pos:end="241:27">-&gt;</operator><name pos:start="241:28" pos:end="241:32">avctx</name><operator pos:start="241:33" pos:end="241:34">-&gt;</operator><name pos:start="241:35" pos:end="241:49">err_recognition</name></name> <operator pos:start="241:51" pos:end="241:51">&amp;</operator> <name pos:start="241:53" pos:end="241:65">AV_EF_EXPLODE</name><operator pos:start="241:66" pos:end="241:66">)</operator></expr>)</condition><block type="pseudo" pos:start="242:13" pos:end="242:21"><block_content pos:start="242:13" pos:end="242:21">
            <goto pos:start="242:13" pos:end="242:21">goto <name pos:start="242:18" pos:end="242:20">end</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt pos:start="243:5" pos:end="243:12"><expr pos:start="243:5" pos:end="243:11"><name pos:start="243:5" pos:end="243:7">ret</name> <operator pos:start="243:9" pos:end="243:9">=</operator> <literal type="number" pos:start="243:11" pos:end="243:11">0</literal></expr>;</expr_stmt>
<label pos:start="244:1" pos:end="244:4"><name pos:start="244:1" pos:end="244:3">end</name>:</label>
    <comment type="block" pos:start="245:5" pos:end="245:18">/* clean up */</comment>
    <if_stmt pos:start="246:5" pos:end="249:39"><if pos:start="246:5" pos:end="249:39">if <condition pos:start="246:8" pos:end="246:40">(<expr pos:start="246:9" pos:end="246:39"><name pos:start="246:9" pos:end="246:22"><name pos:start="246:9" pos:end="246:9">h</name><operator pos:start="246:10" pos:end="246:11">-&gt;</operator><name pos:start="246:12" pos:end="246:22">cur_pic_ptr</name></name> <operator pos:start="246:24" pos:end="246:25">&amp;&amp;</operator> <operator pos:start="246:27" pos:end="246:27">!</operator><name pos:start="246:28" pos:end="246:39"><name pos:start="246:28" pos:end="246:28">h</name><operator pos:start="246:29" pos:end="246:30">-&gt;</operator><name pos:start="246:31" pos:end="246:39">droppable</name></name></expr>)</condition> <block pos:start="246:42" pos:end="249:39">{<block_content pos:start="247:9" pos:end="249:39">
        <expr_stmt pos:start="247:9" pos:end="248:77"><expr pos:start="247:9" pos:end="248:76"><call pos:start="247:9" pos:end="248:76"><name pos:start="247:9" pos:end="247:33">ff_thread_report_progress</name><argument_list pos:start="247:34" pos:end="248:76">(<argument pos:start="247:35" pos:end="247:53"><expr pos:start="247:35" pos:end="247:53"><operator pos:start="247:35" pos:end="247:35">&amp;</operator><name pos:start="247:36" pos:end="247:53"><name pos:start="247:36" pos:end="247:36">h</name><operator pos:start="247:37" pos:end="247:38">-&gt;</operator><name pos:start="247:39" pos:end="247:49">cur_pic_ptr</name><operator pos:start="247:50" pos:end="247:51">-&gt;</operator><name pos:start="247:52" pos:end="247:53">tf</name></name></expr></argument>, <argument pos:start="247:56" pos:end="247:62"><expr pos:start="247:56" pos:end="247:62"><name pos:start="247:56" pos:end="247:62">INT_MAX</name></expr></argument>,
                                  <argument pos:start="248:35" pos:end="248:75"><expr pos:start="248:35" pos:end="248:75"><name pos:start="248:35" pos:end="248:54"><name pos:start="248:35" pos:end="248:35">h</name><operator pos:start="248:36" pos:end="248:37">-&gt;</operator><name pos:start="248:38" pos:end="248:54">picture_structure</name></name> <operator pos:start="248:56" pos:end="248:57">==</operator> <name pos:start="248:59" pos:end="248:75">PICT_BOTTOM_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="249:5" pos:end="249:39">return <expr pos:start="249:12" pos:end="249:38"><ternary pos:start="249:12" pos:end="249:38"><condition pos:start="249:12" pos:end="249:22"><expr pos:start="249:12" pos:end="249:20"><operator pos:start="249:12" pos:end="249:12">(</operator><name pos:start="249:13" pos:end="249:15">ret</name> <operator pos:start="249:17" pos:end="249:17">&lt;</operator> <literal type="number" pos:start="249:19" pos:end="249:19">0</literal><operator pos:start="249:20" pos:end="249:20">)</operator></expr> ?</condition><then pos:start="249:24" pos:end="249:26"> <expr pos:start="249:24" pos:end="249:26"><name pos:start="249:24" pos:end="249:26">ret</name></expr> </then><else pos:start="249:28" pos:end="249:38">: <expr pos:start="249:30" pos:end="249:38"><name pos:start="249:30" pos:end="249:38">buf_index</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></for></block_content></block></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
