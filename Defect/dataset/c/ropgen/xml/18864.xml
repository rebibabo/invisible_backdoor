<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18864.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:5">GList</name> <modifier pos:start="1:7" pos:end="1:7">*</modifier></type><name pos:start="1:8" pos:end="1:24">range_list_insert</name><parameter_list pos:start="1:25" pos:end="1:50">(<parameter pos:start="1:26" pos:end="1:36"><decl pos:start="1:26" pos:end="1:36"><type pos:start="1:26" pos:end="1:36"><name pos:start="1:26" pos:end="1:30">GList</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:36">list</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:49"><decl pos:start="1:39" pos:end="1:49"><type pos:start="1:39" pos:end="1:49"><name pos:start="1:39" pos:end="1:43">Range</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">data</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:16">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">GList</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:12">l</name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:45">/* Range lists require no empty ranges */</comment>

    <expr_stmt pos:start="11:5" pos:end="11:67"><expr pos:start="11:5" pos:end="11:66"><call pos:start="11:5" pos:end="11:66"><name pos:start="11:5" pos:end="11:10">assert</name><argument_list pos:start="11:11" pos:end="11:66">(<argument pos:start="11:12" pos:end="11:65"><expr pos:start="11:12" pos:end="11:65"><name pos:start="11:12" pos:end="11:22"><name pos:start="11:12" pos:end="11:15">data</name><operator pos:start="11:16" pos:end="11:17">-&gt;</operator><name pos:start="11:18" pos:end="11:22">begin</name></name> <operator pos:start="11:24" pos:end="11:24">&lt;</operator> <name pos:start="11:26" pos:end="11:34"><name pos:start="11:26" pos:end="11:29">data</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:34">end</name></name> <operator pos:start="11:36" pos:end="11:37">||</operator> <operator pos:start="11:39" pos:end="11:39">(</operator><name pos:start="11:40" pos:end="11:50"><name pos:start="11:40" pos:end="11:43">data</name><operator pos:start="11:44" pos:end="11:45">-&gt;</operator><name pos:start="11:46" pos:end="11:50">begin</name></name> <operator pos:start="11:52" pos:end="11:53">&amp;&amp;</operator> <operator pos:start="11:55" pos:end="11:55">!</operator><name pos:start="11:56" pos:end="11:64"><name pos:start="11:56" pos:end="11:59">data</name><operator pos:start="11:60" pos:end="11:61">-&gt;</operator><name pos:start="11:62" pos:end="11:64">end</name></name><operator pos:start="11:65" pos:end="11:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:56">/* Skip all list elements strictly less than data */</comment>

    <for pos:start="17:5" pos:end="19:5">for <control pos:start="17:9" pos:end="17:70">(<init pos:start="17:10" pos:end="17:18"><expr pos:start="17:10" pos:end="17:17"><name pos:start="17:10" pos:end="17:10">l</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <name pos:start="17:14" pos:end="17:17">list</name></expr>;</init> <condition pos:start="17:20" pos:end="17:57"><expr pos:start="17:20" pos:end="17:56"><name pos:start="17:20" pos:end="17:20">l</name> <operator pos:start="17:22" pos:end="17:23">&amp;&amp;</operator> <call pos:start="17:25" pos:end="17:52"><name pos:start="17:25" pos:end="17:37">range_compare</name><argument_list pos:start="17:38" pos:end="17:52">(<argument pos:start="17:39" pos:end="17:45"><expr pos:start="17:39" pos:end="17:45"><name pos:start="17:39" pos:end="17:45"><name pos:start="17:39" pos:end="17:39">l</name><operator pos:start="17:40" pos:end="17:41">-&gt;</operator><name pos:start="17:42" pos:end="17:45">data</name></name></expr></argument>, <argument pos:start="17:48" pos:end="17:51"><expr pos:start="17:48" pos:end="17:51"><name pos:start="17:48" pos:end="17:51">data</name></expr></argument>)</argument_list></call> <operator pos:start="17:54" pos:end="17:54">&lt;</operator> <literal type="number" pos:start="17:56" pos:end="17:56">0</literal></expr>;</condition> <incr pos:start="17:59" pos:end="17:69"><expr pos:start="17:59" pos:end="17:69"><name pos:start="17:59" pos:end="17:59">l</name> <operator pos:start="17:61" pos:end="17:61">=</operator> <name pos:start="17:63" pos:end="17:69"><name pos:start="17:63" pos:end="17:63">l</name><operator pos:start="17:64" pos:end="17:65">-&gt;</operator><name pos:start="17:66" pos:end="17:69">next</name></name></expr></incr>)</control> <block pos:start="17:72" pos:end="19:5">{<block_content>

    </block_content>}</block></for>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:47">(<expr pos:start="23:9" pos:end="23:46"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:10">l</name> <operator pos:start="23:12" pos:end="23:13">||</operator> <call pos:start="23:15" pos:end="23:42"><name pos:start="23:15" pos:end="23:27">range_compare</name><argument_list pos:start="23:28" pos:end="23:42">(<argument pos:start="23:29" pos:end="23:35"><expr pos:start="23:29" pos:end="23:35"><name pos:start="23:29" pos:end="23:35"><name pos:start="23:29" pos:end="23:29">l</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:35">data</name></name></expr></argument>, <argument pos:start="23:38" pos:end="23:41"><expr pos:start="23:38" pos:end="23:41"><name pos:start="23:38" pos:end="23:41">data</name></expr></argument>)</argument_list></call> <operator pos:start="23:44" pos:end="23:44">&gt;</operator> <literal type="number" pos:start="23:46" pos:end="23:46">0</literal></expr>)</condition> <block pos:start="23:49" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:51">

        <comment type="block" pos:start="25:9" pos:end="25:70">/* Rest of the list (if any) is strictly greater than @data */</comment>

        <return pos:start="27:9" pos:end="27:51">return <expr pos:start="27:16" pos:end="27:50"><call pos:start="27:16" pos:end="27:50"><name pos:start="27:16" pos:end="27:35">g_list_insert_before</name><argument_list pos:start="27:36" pos:end="27:50">(<argument pos:start="27:37" pos:end="27:40"><expr pos:start="27:37" pos:end="27:40"><name pos:start="27:37" pos:end="27:40">list</name></expr></argument>, <argument pos:start="27:43" pos:end="27:43"><expr pos:start="27:43" pos:end="27:43"><name pos:start="27:43" pos:end="27:43">l</name></expr></argument>, <argument pos:start="27:46" pos:end="27:49"><expr pos:start="27:46" pos:end="27:49"><name pos:start="27:46" pos:end="27:49">data</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:60">/* Current list element overlaps @data, merge the two */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:32"><expr pos:start="35:5" pos:end="35:31"><call pos:start="35:5" pos:end="35:31"><name pos:start="35:5" pos:end="35:16">range_extend</name><argument_list pos:start="35:17" pos:end="35:31">(<argument pos:start="35:18" pos:end="35:24"><expr pos:start="35:18" pos:end="35:24"><name pos:start="35:18" pos:end="35:24"><name pos:start="35:18" pos:end="35:18">l</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:24">data</name></name></expr></argument>, <argument pos:start="35:27" pos:end="35:30"><expr pos:start="35:27" pos:end="35:30"><name pos:start="35:27" pos:end="35:30">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:17"><expr pos:start="37:5" pos:end="37:16"><call pos:start="37:5" pos:end="37:16"><name pos:start="37:5" pos:end="37:10">g_free</name><argument_list pos:start="37:11" pos:end="37:16">(<argument pos:start="37:12" pos:end="37:15"><expr pos:start="37:12" pos:end="37:15"><name pos:start="37:12" pos:end="37:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:66">/* Merge any subsequent list elements that now also overlap */</comment>

    <while pos:start="43:5" pos:end="57:5">while <condition pos:start="43:11" pos:end="43:65">(<expr pos:start="43:12" pos:end="43:64"><name pos:start="43:12" pos:end="43:18"><name pos:start="43:12" pos:end="43:12">l</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:18">next</name></name> <operator pos:start="43:20" pos:end="43:21">&amp;&amp;</operator> <call pos:start="43:23" pos:end="43:59"><name pos:start="43:23" pos:end="43:35">range_compare</name><argument_list pos:start="43:36" pos:end="43:59">(<argument pos:start="43:37" pos:end="43:43"><expr pos:start="43:37" pos:end="43:43"><name pos:start="43:37" pos:end="43:43"><name pos:start="43:37" pos:end="43:37">l</name><operator pos:start="43:38" pos:end="43:39">-&gt;</operator><name pos:start="43:40" pos:end="43:43">data</name></name></expr></argument>, <argument pos:start="43:46" pos:end="43:58"><expr pos:start="43:46" pos:end="43:58"><name pos:start="43:46" pos:end="43:58"><name pos:start="43:46" pos:end="43:46">l</name><operator pos:start="43:47" pos:end="43:48">-&gt;</operator><name pos:start="43:49" pos:end="43:52">next</name><operator pos:start="43:53" pos:end="43:54">-&gt;</operator><name pos:start="43:55" pos:end="43:58">data</name></name></expr></argument>)</argument_list></call> <operator pos:start="43:61" pos:end="43:62">==</operator> <literal type="number" pos:start="43:64" pos:end="43:64">0</literal></expr>)</condition> <block pos:start="43:67" pos:end="57:5">{<block_content pos:start="45:9" pos:end="55:30">

        <decl_stmt pos:start="45:9" pos:end="45:21"><decl pos:start="45:9" pos:end="45:20"><type pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:13">GList</name> <modifier pos:start="45:15" pos:end="45:15">*</modifier></type><name pos:start="45:16" pos:end="45:20">new_l</name></decl>;</decl_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:45"><expr pos:start="49:9" pos:end="49:44"><call pos:start="49:9" pos:end="49:44"><name pos:start="49:9" pos:end="49:20">range_extend</name><argument_list pos:start="49:21" pos:end="49:44">(<argument pos:start="49:22" pos:end="49:28"><expr pos:start="49:22" pos:end="49:28"><name pos:start="49:22" pos:end="49:28"><name pos:start="49:22" pos:end="49:22">l</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:28">data</name></name></expr></argument>, <argument pos:start="49:31" pos:end="49:43"><expr pos:start="49:31" pos:end="49:43"><name pos:start="49:31" pos:end="49:43"><name pos:start="49:31" pos:end="49:31">l</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:37">next</name><operator pos:start="49:38" pos:end="49:39">-&gt;</operator><name pos:start="49:40" pos:end="49:43">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:30"><expr pos:start="51:9" pos:end="51:29"><call pos:start="51:9" pos:end="51:29"><name pos:start="51:9" pos:end="51:14">g_free</name><argument_list pos:start="51:15" pos:end="51:29">(<argument pos:start="51:16" pos:end="51:28"><expr pos:start="51:16" pos:end="51:28"><name pos:start="51:16" pos:end="51:28"><name pos:start="51:16" pos:end="51:16">l</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:22">next</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:28">data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:50"><expr pos:start="53:9" pos:end="53:49"><name pos:start="53:9" pos:end="53:13">new_l</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <call pos:start="53:17" pos:end="53:49"><name pos:start="53:17" pos:end="53:34">g_list_delete_link</name><argument_list pos:start="53:35" pos:end="53:49">(<argument pos:start="53:36" pos:end="53:39"><expr pos:start="53:36" pos:end="53:39"><name pos:start="53:36" pos:end="53:39">list</name></expr></argument>, <argument pos:start="53:42" pos:end="53:48"><expr pos:start="53:42" pos:end="53:48"><name pos:start="53:42" pos:end="53:48"><name pos:start="53:42" pos:end="53:42">l</name><operator pos:start="53:43" pos:end="53:44">-&gt;</operator><name pos:start="53:45" pos:end="53:48">next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><call pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:14">assert</name><argument_list pos:start="55:15" pos:end="55:29">(<argument pos:start="55:16" pos:end="55:28"><expr pos:start="55:16" pos:end="55:28"><name pos:start="55:16" pos:end="55:20">new_l</name> <operator pos:start="55:22" pos:end="55:23">==</operator> <name pos:start="55:25" pos:end="55:28">list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="61:5" pos:end="61:16">return <expr pos:start="61:12" pos:end="61:15"><name pos:start="61:12" pos:end="61:15">list</name></expr>;</return>

</block_content>}</block></function>
</unit>
