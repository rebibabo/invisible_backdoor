<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26821.c" pos:tabs="8"><function pos:start="1:1" pos:end="691:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">decode_vol_header</name><parameter_list pos:start="1:29" pos:end="1:69">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:44">Mpeg4DecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:68"><decl pos:start="1:52" pos:end="1:68"><type pos:start="1:52" pos:end="1:68"><name pos:start="1:52" pos:end="1:64">GetBitContext</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">gb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="691:1">{<block_content pos:start="5:5" pos:end="689:13">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MpegEncContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:31">= <expr pos:start="5:25" pos:end="5:31"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:31"><name pos:start="5:26" pos:end="5:28">ctx</name><operator pos:start="5:29" pos:end="5:30">-&gt;</operator><name pos:start="5:31" pos:end="5:31">m</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">width</name></decl>, <decl pos:start="7:16" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:21">height</name></decl>, <decl pos:start="7:24" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:24" pos:end="7:32">vo_ver_id</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:20">/* vol header */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:21"><expr pos:start="13:5" pos:end="13:20"><call pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:13">skip_bits</name><argument_list pos:start="13:14" pos:end="13:20">(<argument pos:start="13:15" pos:end="13:16"><expr pos:start="13:15" pos:end="13:16"><name pos:start="13:15" pos:end="13:16">gb</name></expr></argument>, <argument pos:start="13:19" pos:end="13:19"><expr pos:start="13:19" pos:end="13:19"><literal type="number" pos:start="13:19" pos:end="13:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="block" pos:start="13:41" pos:end="13:59">/* random access */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:33"><expr pos:start="15:5" pos:end="15:32"><name pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:14">vo_type</name></name> <operator pos:start="15:16" pos:end="15:16">=</operator> <call pos:start="15:18" pos:end="15:32"><name pos:start="15:18" pos:end="15:25">get_bits</name><argument_list pos:start="15:26" pos:end="15:32">(<argument pos:start="15:27" pos:end="15:28"><expr pos:start="15:27" pos:end="15:28"><name pos:start="15:27" pos:end="15:28">gb</name></expr></argument>, <argument pos:start="15:31" pos:end="15:31"><expr pos:start="15:31" pos:end="15:31"><literal type="number" pos:start="15:31" pos:end="15:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="27:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:27">(<expr pos:start="17:9" pos:end="17:26"><call pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:17">get_bits1</name><argument_list pos:start="17:18" pos:end="17:21">(<argument pos:start="17:19" pos:end="17:20"><expr pos:start="17:19" pos:end="17:20"><name pos:start="17:19" pos:end="17:20">gb</name></expr></argument>)</argument_list></call> <operator pos:start="17:23" pos:end="17:24">!=</operator> <literal type="number" pos:start="17:26" pos:end="17:26">0</literal></expr>)</condition> <block pos:start="17:29" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:25">           <comment type="block" pos:start="17:41" pos:end="17:54">/* is_ol_id */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:36"><expr pos:start="19:9" pos:end="19:35"><name pos:start="19:9" pos:end="19:17">vo_ver_id</name> <operator pos:start="19:19" pos:end="19:19">=</operator> <call pos:start="19:21" pos:end="19:35"><name pos:start="19:21" pos:end="19:28">get_bits</name><argument_list pos:start="19:29" pos:end="19:35">(<argument pos:start="19:30" pos:end="19:31"><expr pos:start="19:30" pos:end="19:31"><name pos:start="19:30" pos:end="19:31">gb</name></expr></argument>, <argument pos:start="19:34" pos:end="19:34"><expr pos:start="19:34" pos:end="19:34"><literal type="number" pos:start="19:34" pos:end="19:34">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="19:41" pos:end="19:55">/* vo_ver_id */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:25"><expr pos:start="21:9" pos:end="21:24"><call pos:start="21:9" pos:end="21:24"><name pos:start="21:9" pos:end="21:17">skip_bits</name><argument_list pos:start="21:18" pos:end="21:24">(<argument pos:start="21:19" pos:end="21:20"><expr pos:start="21:19" pos:end="21:20"><name pos:start="21:19" pos:end="21:20">gb</name></expr></argument>, <argument pos:start="21:23" pos:end="21:23"><expr pos:start="21:23" pos:end="21:23"><literal type="number" pos:start="21:23" pos:end="21:23">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>               <comment type="block" pos:start="21:41" pos:end="21:57">/* vo_priority */</comment>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="27:5">else <block pos:start="23:12" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:22">

        <expr_stmt pos:start="25:9" pos:end="25:22"><expr pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:17">vo_ver_id</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <literal type="number" pos:start="25:21" pos:end="25:21">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:43"><expr pos:start="29:5" pos:end="29:42"><name pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:24">aspect_ratio_info</name></name> <operator pos:start="29:26" pos:end="29:26">=</operator> <call pos:start="29:28" pos:end="29:42"><name pos:start="29:28" pos:end="29:35">get_bits</name><argument_list pos:start="29:36" pos:end="29:42">(<argument pos:start="29:37" pos:end="29:38"><expr pos:start="29:37" pos:end="29:38"><name pos:start="29:37" pos:end="29:38">gb</name></expr></argument>, <argument pos:start="29:41" pos:end="29:41"><expr pos:start="29:41" pos:end="29:41"><literal type="number" pos:start="29:41" pos:end="29:41">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="41:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:51">(<expr pos:start="31:9" pos:end="31:50"><name pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:28">aspect_ratio_info</name></name> <operator pos:start="31:30" pos:end="31:31">==</operator> <name pos:start="31:33" pos:end="31:50">FF_ASPECT_EXTENDED</name></expr>)</condition> <block pos:start="31:53" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:60">

        <expr_stmt pos:start="33:9" pos:end="33:60"><expr pos:start="33:9" pos:end="33:59"><name pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:16">avctx</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:37">sample_aspect_ratio</name><operator pos:start="33:38" pos:end="33:38">.</operator><name pos:start="33:39" pos:end="33:41">num</name></name> <operator pos:start="33:43" pos:end="33:43">=</operator> <call pos:start="33:45" pos:end="33:59"><name pos:start="33:45" pos:end="33:52">get_bits</name><argument_list pos:start="33:53" pos:end="33:59">(<argument pos:start="33:54" pos:end="33:55"><expr pos:start="33:54" pos:end="33:55"><name pos:start="33:54" pos:end="33:55">gb</name></expr></argument>, <argument pos:start="33:58" pos:end="33:58"><expr pos:start="33:58" pos:end="33:58"><literal type="number" pos:start="33:58" pos:end="33:58">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="33:63" pos:end="33:74">// par_width</comment>

        <expr_stmt pos:start="35:9" pos:end="35:60"><expr pos:start="35:9" pos:end="35:59"><name pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:16">avctx</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:37">sample_aspect_ratio</name><operator pos:start="35:38" pos:end="35:38">.</operator><name pos:start="35:39" pos:end="35:41">den</name></name> <operator pos:start="35:43" pos:end="35:43">=</operator> <call pos:start="35:45" pos:end="35:59"><name pos:start="35:45" pos:end="35:52">get_bits</name><argument_list pos:start="35:53" pos:end="35:59">(<argument pos:start="35:54" pos:end="35:55"><expr pos:start="35:54" pos:end="35:55"><name pos:start="35:54" pos:end="35:55">gb</name></expr></argument>, <argument pos:start="35:58" pos:end="35:58"><expr pos:start="35:58" pos:end="35:58"><literal type="number" pos:start="35:58" pos:end="35:58">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="35:63" pos:end="35:75">// par_height</comment>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="41:5">else <block pos:start="37:12" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:83">

        <expr_stmt pos:start="39:9" pos:end="39:83"><expr pos:start="39:9" pos:end="39:82"><name pos:start="39:9" pos:end="39:37"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:16">avctx</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:37">sample_aspect_ratio</name></name> <operator pos:start="39:39" pos:end="39:39">=</operator> <name pos:start="39:41" pos:end="39:82"><name pos:start="39:41" pos:end="39:60">ff_h263_pixel_aspect</name><index pos:start="39:61" pos:end="39:82">[<expr pos:start="39:62" pos:end="39:81"><name pos:start="39:62" pos:end="39:81"><name pos:start="39:62" pos:end="39:62">s</name><operator pos:start="39:63" pos:end="39:64">-&gt;</operator><name pos:start="39:65" pos:end="39:81">aspect_ratio_info</name></name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="45:5" pos:end="93:5"><if pos:start="45:5" pos:end="83:5">if <condition pos:start="45:8" pos:end="45:54">(<expr pos:start="45:9" pos:end="45:53"><operator pos:start="45:9" pos:end="45:9">(</operator><name pos:start="45:10" pos:end="45:36"><name pos:start="45:10" pos:end="45:12">ctx</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:36">vol_control_parameters</name></name> <operator pos:start="45:38" pos:end="45:38">=</operator> <call pos:start="45:40" pos:end="45:52"><name pos:start="45:40" pos:end="45:48">get_bits1</name><argument_list pos:start="45:49" pos:end="45:52">(<argument pos:start="45:50" pos:end="45:51"><expr pos:start="45:50" pos:end="45:51"><name pos:start="45:50" pos:end="45:51">gb</name></expr></argument>)</argument_list></call><operator pos:start="45:53" pos:end="45:53">)</operator></expr>)</condition> <block pos:start="45:56" pos:end="83:5">{<block_content pos:start="47:9" pos:end="81:9"> <comment type="block" pos:start="45:58" pos:end="45:84">/* vol control parameter */</comment>

        <decl_stmt pos:start="47:9" pos:end="47:44"><decl pos:start="47:9" pos:end="47:43"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:25">chroma_format</name> <init pos:start="47:27" pos:end="47:43">= <expr pos:start="47:29" pos:end="47:43"><call pos:start="47:29" pos:end="47:43"><name pos:start="47:29" pos:end="47:36">get_bits</name><argument_list pos:start="47:37" pos:end="47:43">(<argument pos:start="47:38" pos:end="47:39"><expr pos:start="47:38" pos:end="47:39"><name pos:start="47:38" pos:end="47:39">gb</name></expr></argument>, <argument pos:start="47:42" pos:end="47:42"><expr pos:start="47:42" pos:end="47:42"><literal type="number" pos:start="47:42" pos:end="47:42">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="49:9" pos:end="51:70"><if pos:start="49:9" pos:end="51:70">if <condition pos:start="49:12" pos:end="49:40">(<expr pos:start="49:13" pos:end="49:39"><name pos:start="49:13" pos:end="49:25">chroma_format</name> <operator pos:start="49:27" pos:end="49:28">!=</operator> <name pos:start="49:30" pos:end="49:39">CHROMA_420</name></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:70"><block_content pos:start="51:13" pos:end="51:70">

            <expr_stmt pos:start="51:13" pos:end="51:70"><expr pos:start="51:13" pos:end="51:69"><call pos:start="51:13" pos:end="51:69"><name pos:start="51:13" pos:end="51:18">av_log</name><argument_list pos:start="51:19" pos:end="51:69">(<argument pos:start="51:20" pos:end="51:27"><expr pos:start="51:20" pos:end="51:27"><name pos:start="51:20" pos:end="51:27"><name pos:start="51:20" pos:end="51:20">s</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:27">avctx</name></name></expr></argument>, <argument pos:start="51:30" pos:end="51:41"><expr pos:start="51:30" pos:end="51:41"><name pos:start="51:30" pos:end="51:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:44" pos:end="51:68"><expr pos:start="51:44" pos:end="51:68"><literal type="string" pos:start="51:44" pos:end="51:68">"illegal chroma format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:37"><expr pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:20">low_delay</name></name> <operator pos:start="55:22" pos:end="55:22">=</operator> <call pos:start="55:24" pos:end="55:36"><name pos:start="55:24" pos:end="55:32">get_bits1</name><argument_list pos:start="55:33" pos:end="55:36">(<argument pos:start="55:34" pos:end="55:35"><expr pos:start="55:34" pos:end="55:35"><name pos:start="55:34" pos:end="55:35">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="81:9"><if pos:start="57:9" pos:end="81:9">if <condition pos:start="57:12" pos:end="57:26">(<expr pos:start="57:13" pos:end="57:25"><call pos:start="57:13" pos:end="57:25"><name pos:start="57:13" pos:end="57:21">get_bits1</name><argument_list pos:start="57:22" pos:end="57:25">(<argument pos:start="57:23" pos:end="57:24"><expr pos:start="57:23" pos:end="57:24"><name pos:start="57:23" pos:end="57:24">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:28" pos:end="81:9">{<block_content pos:start="59:13" pos:end="79:27">    <comment type="block" pos:start="57:33" pos:end="57:52">/* vbv parameters */</comment>

            <expr_stmt pos:start="59:13" pos:end="59:29"><expr pos:start="59:13" pos:end="59:28"><call pos:start="59:13" pos:end="59:28"><name pos:start="59:13" pos:end="59:20">get_bits</name><argument_list pos:start="59:21" pos:end="59:28">(<argument pos:start="59:22" pos:end="59:23"><expr pos:start="59:22" pos:end="59:23"><name pos:start="59:22" pos:end="59:23">gb</name></expr></argument>, <argument pos:start="59:26" pos:end="59:27"><expr pos:start="59:26" pos:end="59:27"><literal type="number" pos:start="59:26" pos:end="59:27">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="59:33" pos:end="59:56">/* first_half_bitrate */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:27"><expr pos:start="61:13" pos:end="61:26"><call pos:start="61:13" pos:end="61:26"><name pos:start="61:13" pos:end="61:22">skip_bits1</name><argument_list pos:start="61:23" pos:end="61:26">(<argument pos:start="61:24" pos:end="61:25"><expr pos:start="61:24" pos:end="61:25"><name pos:start="61:24" pos:end="61:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="61:33" pos:end="61:44">/* marker */</comment>

            <expr_stmt pos:start="63:13" pos:end="63:29"><expr pos:start="63:13" pos:end="63:28"><call pos:start="63:13" pos:end="63:28"><name pos:start="63:13" pos:end="63:20">get_bits</name><argument_list pos:start="63:21" pos:end="63:28">(<argument pos:start="63:22" pos:end="63:23"><expr pos:start="63:22" pos:end="63:23"><name pos:start="63:22" pos:end="63:23">gb</name></expr></argument>, <argument pos:start="63:26" pos:end="63:27"><expr pos:start="63:26" pos:end="63:27"><literal type="number" pos:start="63:26" pos:end="63:27">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="63:33" pos:end="63:57">/* latter_half_bitrate */</comment>

            <expr_stmt pos:start="65:13" pos:end="65:27"><expr pos:start="65:13" pos:end="65:26"><call pos:start="65:13" pos:end="65:26"><name pos:start="65:13" pos:end="65:22">skip_bits1</name><argument_list pos:start="65:23" pos:end="65:26">(<argument pos:start="65:24" pos:end="65:25"><expr pos:start="65:24" pos:end="65:25"><name pos:start="65:24" pos:end="65:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="65:33" pos:end="65:44">/* marker */</comment>

            <expr_stmt pos:start="67:13" pos:end="67:29"><expr pos:start="67:13" pos:end="67:28"><call pos:start="67:13" pos:end="67:28"><name pos:start="67:13" pos:end="67:20">get_bits</name><argument_list pos:start="67:21" pos:end="67:28">(<argument pos:start="67:22" pos:end="67:23"><expr pos:start="67:22" pos:end="67:23"><name pos:start="67:22" pos:end="67:23">gb</name></expr></argument>, <argument pos:start="67:26" pos:end="67:27"><expr pos:start="67:26" pos:end="67:27"><literal type="number" pos:start="67:26" pos:end="67:27">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="67:33" pos:end="67:64">/* first_half_vbv_buffer_size */</comment>

            <expr_stmt pos:start="69:13" pos:end="69:27"><expr pos:start="69:13" pos:end="69:26"><call pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:22">skip_bits1</name><argument_list pos:start="69:23" pos:end="69:26">(<argument pos:start="69:24" pos:end="69:25"><expr pos:start="69:24" pos:end="69:25"><name pos:start="69:24" pos:end="69:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="69:33" pos:end="69:44">/* marker */</comment>

            <expr_stmt pos:start="71:13" pos:end="71:28"><expr pos:start="71:13" pos:end="71:27"><call pos:start="71:13" pos:end="71:27"><name pos:start="71:13" pos:end="71:20">get_bits</name><argument_list pos:start="71:21" pos:end="71:27">(<argument pos:start="71:22" pos:end="71:23"><expr pos:start="71:22" pos:end="71:23"><name pos:start="71:22" pos:end="71:23">gb</name></expr></argument>, <argument pos:start="71:26" pos:end="71:26"><expr pos:start="71:26" pos:end="71:26"><literal type="number" pos:start="71:26" pos:end="71:26">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="71:33" pos:end="71:65">/* latter_half_vbv_buffer_size */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:29"><expr pos:start="73:13" pos:end="73:28"><call pos:start="73:13" pos:end="73:28"><name pos:start="73:13" pos:end="73:20">get_bits</name><argument_list pos:start="73:21" pos:end="73:28">(<argument pos:start="73:22" pos:end="73:23"><expr pos:start="73:22" pos:end="73:23"><name pos:start="73:22" pos:end="73:23">gb</name></expr></argument>, <argument pos:start="73:26" pos:end="73:27"><expr pos:start="73:26" pos:end="73:27"><literal type="number" pos:start="73:26" pos:end="73:27">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="73:33" pos:end="73:62">/* first_half_vbv_occupancy */</comment>

            <expr_stmt pos:start="75:13" pos:end="75:27"><expr pos:start="75:13" pos:end="75:26"><call pos:start="75:13" pos:end="75:26"><name pos:start="75:13" pos:end="75:22">skip_bits1</name><argument_list pos:start="75:23" pos:end="75:26">(<argument pos:start="75:24" pos:end="75:25"><expr pos:start="75:24" pos:end="75:25"><name pos:start="75:24" pos:end="75:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="75:33" pos:end="75:44">/* marker */</comment>

            <expr_stmt pos:start="77:13" pos:end="77:29"><expr pos:start="77:13" pos:end="77:28"><call pos:start="77:13" pos:end="77:28"><name pos:start="77:13" pos:end="77:20">get_bits</name><argument_list pos:start="77:21" pos:end="77:28">(<argument pos:start="77:22" pos:end="77:23"><expr pos:start="77:22" pos:end="77:23"><name pos:start="77:22" pos:end="77:23">gb</name></expr></argument>, <argument pos:start="77:26" pos:end="77:27"><expr pos:start="77:26" pos:end="77:27"><literal type="number" pos:start="77:26" pos:end="77:27">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="77:33" pos:end="77:63">/* latter_half_vbv_occupancy */</comment>

            <expr_stmt pos:start="79:13" pos:end="79:27"><expr pos:start="79:13" pos:end="79:26"><call pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:22">skip_bits1</name><argument_list pos:start="79:23" pos:end="79:26">(<argument pos:start="79:24" pos:end="79:25"><expr pos:start="79:24" pos:end="79:25"><name pos:start="79:24" pos:end="79:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block" pos:start="79:33" pos:end="79:44">/* marker */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="93:5">else <block pos:start="83:12" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:29">

        <comment type="block" pos:start="85:9" pos:end="87:54">/* is setting low delay flag only once the smartest thing to do?

         * low delay detection won't be overridden. */</comment>

        <if_stmt pos:start="89:9" pos:end="91:29"><if pos:start="89:9" pos:end="91:29">if <condition pos:start="89:12" pos:end="89:35">(<expr pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:29"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:29">picture_number</name></name> <operator pos:start="89:31" pos:end="89:32">==</operator> <literal type="number" pos:start="89:34" pos:end="89:34">0</literal></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:29"><block_content pos:start="91:13" pos:end="91:29">

            <expr_stmt pos:start="91:13" pos:end="91:29"><expr pos:start="91:13" pos:end="91:28"><name pos:start="91:13" pos:end="91:24"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:24">low_delay</name></name> <operator pos:start="91:26" pos:end="91:26">=</operator> <literal type="number" pos:start="91:28" pos:end="91:28">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:33"><expr pos:start="97:5" pos:end="97:32"><name pos:start="97:5" pos:end="97:14"><name pos:start="97:5" pos:end="97:7">ctx</name><operator pos:start="97:8" pos:end="97:9">-&gt;</operator><name pos:start="97:10" pos:end="97:14">shape</name></name> <operator pos:start="97:16" pos:end="97:16">=</operator> <call pos:start="97:18" pos:end="97:32"><name pos:start="97:18" pos:end="97:25">get_bits</name><argument_list pos:start="97:26" pos:end="97:32">(<argument pos:start="97:27" pos:end="97:28"><expr pos:start="97:27" pos:end="97:28"><name pos:start="97:27" pos:end="97:28">gb</name></expr></argument>, <argument pos:start="97:31" pos:end="97:31"><expr pos:start="97:31" pos:end="97:31"><literal type="number" pos:start="97:31" pos:end="97:31">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="97:35" pos:end="97:49">/* vol shape */</comment>

    <if_stmt pos:start="99:5" pos:end="101:75"><if pos:start="99:5" pos:end="101:75">if <condition pos:start="99:8" pos:end="99:33">(<expr pos:start="99:9" pos:end="99:32"><name pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:11">ctx</name><operator pos:start="99:12" pos:end="99:13">-&gt;</operator><name pos:start="99:14" pos:end="99:18">shape</name></name> <operator pos:start="99:20" pos:end="99:21">!=</operator> <name pos:start="99:23" pos:end="99:32">RECT_SHAPE</name></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:75"><block_content pos:start="101:9" pos:end="101:75">

        <expr_stmt pos:start="101:9" pos:end="101:75"><expr pos:start="101:9" pos:end="101:74"><call pos:start="101:9" pos:end="101:74"><name pos:start="101:9" pos:end="101:14">av_log</name><argument_list pos:start="101:15" pos:end="101:74">(<argument pos:start="101:16" pos:end="101:23"><expr pos:start="101:16" pos:end="101:23"><name pos:start="101:16" pos:end="101:23"><name pos:start="101:16" pos:end="101:16">s</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:23">avctx</name></name></expr></argument>, <argument pos:start="101:26" pos:end="101:37"><expr pos:start="101:26" pos:end="101:37"><name pos:start="101:26" pos:end="101:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:40" pos:end="101:73"><expr pos:start="101:40" pos:end="101:73"><literal type="string" pos:start="101:40" pos:end="101:73">"only rectangular vol supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="103:51">(<expr pos:start="103:9" pos:end="103:50"><name pos:start="103:9" pos:end="103:18"><name pos:start="103:9" pos:end="103:11">ctx</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:18">shape</name></name> <operator pos:start="103:20" pos:end="103:21">==</operator> <name pos:start="103:23" pos:end="103:32">GRAY_SHAPE</name> <operator pos:start="103:34" pos:end="103:35">&amp;&amp;</operator> <name pos:start="103:37" pos:end="103:45">vo_ver_id</name> <operator pos:start="103:47" pos:end="103:48">!=</operator> <literal type="number" pos:start="103:50" pos:end="103:50">1</literal></expr>)</condition> <block pos:start="103:53" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:25">

        <expr_stmt pos:start="105:9" pos:end="105:69"><expr pos:start="105:9" pos:end="105:68"><call pos:start="105:9" pos:end="105:68"><name pos:start="105:9" pos:end="105:14">av_log</name><argument_list pos:start="105:15" pos:end="105:68">(<argument pos:start="105:16" pos:end="105:23"><expr pos:start="105:16" pos:end="105:23"><name pos:start="105:16" pos:end="105:23"><name pos:start="105:16" pos:end="105:16">s</name><operator pos:start="105:17" pos:end="105:18">-&gt;</operator><name pos:start="105:19" pos:end="105:23">avctx</name></name></expr></argument>, <argument pos:start="105:26" pos:end="105:37"><expr pos:start="105:26" pos:end="105:37"><name pos:start="105:26" pos:end="105:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="105:40" pos:end="105:67"><expr pos:start="105:40" pos:end="105:67"><literal type="string" pos:start="105:40" pos:end="105:67">"Gray shape not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:25"><expr pos:start="107:9" pos:end="107:24"><call pos:start="107:9" pos:end="107:24"><name pos:start="107:9" pos:end="107:17">skip_bits</name><argument_list pos:start="107:18" pos:end="107:24">(<argument pos:start="107:19" pos:end="107:20"><expr pos:start="107:19" pos:end="107:20"><name pos:start="107:19" pos:end="107:20">gb</name></expr></argument>, <argument pos:start="107:23" pos:end="107:23"><expr pos:start="107:23" pos:end="107:23"><literal type="number" pos:start="107:23" pos:end="107:23">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="107:28" pos:end="107:67">/* video_object_layer_shape_extension */</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:57"><expr pos:start="113:5" pos:end="113:56"><call pos:start="113:5" pos:end="113:56"><name pos:start="113:5" pos:end="113:16">check_marker</name><argument_list pos:start="113:17" pos:end="113:56">(<argument pos:start="113:18" pos:end="113:19"><expr pos:start="113:18" pos:end="113:19"><name pos:start="113:18" pos:end="113:19">gb</name></expr></argument>, <argument pos:start="113:22" pos:end="113:55"><expr pos:start="113:22" pos:end="113:55"><literal type="string" pos:start="113:22" pos:end="113:55">"before time_increment_resolution"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:47"><expr pos:start="117:5" pos:end="117:46"><name pos:start="117:5" pos:end="117:27"><name pos:start="117:5" pos:end="117:5">s</name><operator pos:start="117:6" pos:end="117:7">-&gt;</operator><name pos:start="117:8" pos:end="117:12">avctx</name><operator pos:start="117:13" pos:end="117:14">-&gt;</operator><name pos:start="117:15" pos:end="117:23">framerate</name><operator pos:start="117:24" pos:end="117:24">.</operator><name pos:start="117:25" pos:end="117:27">num</name></name> <operator pos:start="117:29" pos:end="117:29">=</operator> <call pos:start="117:31" pos:end="117:46"><name pos:start="117:31" pos:end="117:38">get_bits</name><argument_list pos:start="117:39" pos:end="117:46">(<argument pos:start="117:40" pos:end="117:41"><expr pos:start="117:40" pos:end="117:41"><name pos:start="117:40" pos:end="117:41">gb</name></expr></argument>, <argument pos:start="117:44" pos:end="117:45"><expr pos:start="117:44" pos:end="117:45"><literal type="number" pos:start="117:44" pos:end="117:45">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="125:5"><if pos:start="119:5" pos:end="125:5">if <condition pos:start="119:8" pos:end="119:33">(<expr pos:start="119:9" pos:end="119:32"><operator pos:start="119:9" pos:end="119:9">!</operator><name pos:start="119:10" pos:end="119:32"><name pos:start="119:10" pos:end="119:10">s</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:17">avctx</name><operator pos:start="119:18" pos:end="119:19">-&gt;</operator><name pos:start="119:20" pos:end="119:28">framerate</name><operator pos:start="119:29" pos:end="119:29">.</operator><name pos:start="119:30" pos:end="119:32">num</name></name></expr>)</condition> <block pos:start="119:35" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:35">

        <expr_stmt pos:start="121:9" pos:end="121:57"><expr pos:start="121:9" pos:end="121:56"><call pos:start="121:9" pos:end="121:56"><name pos:start="121:9" pos:end="121:14">av_log</name><argument_list pos:start="121:15" pos:end="121:56">(<argument pos:start="121:16" pos:end="121:23"><expr pos:start="121:16" pos:end="121:23"><name pos:start="121:16" pos:end="121:23"><name pos:start="121:16" pos:end="121:16">s</name><operator pos:start="121:17" pos:end="121:18">-&gt;</operator><name pos:start="121:19" pos:end="121:23">avctx</name></name></expr></argument>, <argument pos:start="121:26" pos:end="121:37"><expr pos:start="121:26" pos:end="121:37"><name pos:start="121:26" pos:end="121:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="121:40" pos:end="121:55"><expr pos:start="121:40" pos:end="121:55"><literal type="string" pos:start="121:40" pos:end="121:55">"framerate==0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="123:9" pos:end="123:35">return <expr pos:start="123:16" pos:end="123:34"><name pos:start="123:16" pos:end="123:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:72"><expr pos:start="129:5" pos:end="129:71"><name pos:start="129:5" pos:end="129:28"><name pos:start="129:5" pos:end="129:7">ctx</name><operator pos:start="129:8" pos:end="129:9">-&gt;</operator><name pos:start="129:10" pos:end="129:28">time_increment_bits</name></name> <operator pos:start="129:30" pos:end="129:30">=</operator> <call pos:start="129:32" pos:end="129:67"><name pos:start="129:32" pos:end="129:38">av_log2</name><argument_list pos:start="129:39" pos:end="129:67">(<argument pos:start="129:40" pos:end="129:66"><expr pos:start="129:40" pos:end="129:66"><name pos:start="129:40" pos:end="129:62"><name pos:start="129:40" pos:end="129:40">s</name><operator pos:start="129:41" pos:end="129:42">-&gt;</operator><name pos:start="129:43" pos:end="129:47">avctx</name><operator pos:start="129:48" pos:end="129:49">-&gt;</operator><name pos:start="129:50" pos:end="129:58">framerate</name><operator pos:start="129:59" pos:end="129:59">.</operator><name pos:start="129:60" pos:end="129:62">num</name></name> <operator pos:start="129:64" pos:end="129:64">-</operator> <literal type="number" pos:start="129:66" pos:end="129:66">1</literal></expr></argument>)</argument_list></call> <operator pos:start="129:69" pos:end="129:69">+</operator> <literal type="number" pos:start="129:71" pos:end="129:71">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="133:37"><if pos:start="131:5" pos:end="133:37">if <condition pos:start="131:8" pos:end="131:37">(<expr pos:start="131:9" pos:end="131:36"><name pos:start="131:9" pos:end="131:32"><name pos:start="131:9" pos:end="131:11">ctx</name><operator pos:start="131:12" pos:end="131:13">-&gt;</operator><name pos:start="131:14" pos:end="131:32">time_increment_bits</name></name> <operator pos:start="131:34" pos:end="131:34">&lt;</operator> <literal type="number" pos:start="131:36" pos:end="131:36">1</literal></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:37"><block_content pos:start="133:9" pos:end="133:37">

        <expr_stmt pos:start="133:9" pos:end="133:37"><expr pos:start="133:9" pos:end="133:36"><name pos:start="133:9" pos:end="133:32"><name pos:start="133:9" pos:end="133:11">ctx</name><operator pos:start="133:12" pos:end="133:13">-&gt;</operator><name pos:start="133:14" pos:end="133:32">time_increment_bits</name></name> <operator pos:start="133:34" pos:end="133:34">=</operator> <literal type="number" pos:start="133:36" pos:end="133:36">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:46"><expr pos:start="137:5" pos:end="137:45"><call pos:start="137:5" pos:end="137:45"><name pos:start="137:5" pos:end="137:16">check_marker</name><argument_list pos:start="137:17" pos:end="137:45">(<argument pos:start="137:18" pos:end="137:19"><expr pos:start="137:18" pos:end="137:19"><name pos:start="137:18" pos:end="137:19">gb</name></expr></argument>, <argument pos:start="137:22" pos:end="137:44"><expr pos:start="137:22" pos:end="137:44"><literal type="string" pos:start="137:22" pos:end="137:44">"before fixed_vop_rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="141:5" pos:end="147:36"><if pos:start="141:5" pos:end="143:73">if <condition pos:start="141:8" pos:end="141:27">(<expr pos:start="141:9" pos:end="141:26"><call pos:start="141:9" pos:end="141:21"><name pos:start="141:9" pos:end="141:17">get_bits1</name><argument_list pos:start="141:18" pos:end="141:21">(<argument pos:start="141:19" pos:end="141:20"><expr pos:start="141:19" pos:end="141:20"><name pos:start="141:19" pos:end="141:20">gb</name></expr></argument>)</argument_list></call> <operator pos:start="141:23" pos:end="141:24">!=</operator> <literal type="number" pos:start="141:26" pos:end="141:26">0</literal></expr>)</condition><block type="pseudo" pos:start="143:9" pos:end="143:73"><block_content pos:start="143:9" pos:end="143:73">     <comment type="block" pos:start="141:33" pos:end="141:53">/* fixed_vop_rate  */</comment>

        <expr_stmt pos:start="143:9" pos:end="143:73"><expr pos:start="143:9" pos:end="143:72"><name pos:start="143:9" pos:end="143:31"><name pos:start="143:9" pos:end="143:9">s</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:16">avctx</name><operator pos:start="143:17" pos:end="143:18">-&gt;</operator><name pos:start="143:19" pos:end="143:27">framerate</name><operator pos:start="143:28" pos:end="143:28">.</operator><name pos:start="143:29" pos:end="143:31">den</name></name> <operator pos:start="143:33" pos:end="143:33">=</operator> <call pos:start="143:35" pos:end="143:72"><name pos:start="143:35" pos:end="143:42">get_bits</name><argument_list pos:start="143:43" pos:end="143:72">(<argument pos:start="143:44" pos:end="143:45"><expr pos:start="143:44" pos:end="143:45"><name pos:start="143:44" pos:end="143:45">gb</name></expr></argument>, <argument pos:start="143:48" pos:end="143:71"><expr pos:start="143:48" pos:end="143:71"><name pos:start="143:48" pos:end="143:71"><name pos:start="143:48" pos:end="143:50">ctx</name><operator pos:start="143:51" pos:end="143:52">-&gt;</operator><name pos:start="143:53" pos:end="143:71">time_increment_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="145:5" pos:end="147:36">else<block type="pseudo" pos:start="147:9" pos:end="147:36"><block_content pos:start="147:9" pos:end="147:36">

        <expr_stmt pos:start="147:9" pos:end="147:36"><expr pos:start="147:9" pos:end="147:35"><name pos:start="147:9" pos:end="147:31"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:16">avctx</name><operator pos:start="147:17" pos:end="147:18">-&gt;</operator><name pos:start="147:19" pos:end="147:27">framerate</name><operator pos:start="147:28" pos:end="147:28">.</operator><name pos:start="147:29" pos:end="147:31">den</name></name> <operator pos:start="147:33" pos:end="147:33">=</operator> <literal type="number" pos:start="147:35" pos:end="147:35">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:110"><expr pos:start="151:5" pos:end="151:109"><name pos:start="151:5" pos:end="151:23"><name pos:start="151:5" pos:end="151:5">s</name><operator pos:start="151:6" pos:end="151:7">-&gt;</operator><name pos:start="151:8" pos:end="151:12">avctx</name><operator pos:start="151:13" pos:end="151:14">-&gt;</operator><name pos:start="151:15" pos:end="151:23">time_base</name></name> <operator pos:start="151:25" pos:end="151:25">=</operator> <macro pos:start="151:27" pos:end="151:109"><name pos:start="151:27" pos:end="151:34">av_inv_q</name><argument_list pos:start="151:35" pos:end="151:109">(<argument pos:start="151:36" pos:end="151:108">av_mul_q(s-&gt;avctx-&gt;framerate, (AVRational){s-&gt;avctx-&gt;ticks_per_frame, <literal type="number" pos:start="151:106" pos:end="151:106">1</literal>})</argument>)</argument_list></macro></expr>;</expr_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:21"><expr pos:start="155:5" pos:end="155:20"><name pos:start="155:5" pos:end="155:16"><name pos:start="155:5" pos:end="155:7">ctx</name><operator pos:start="155:8" pos:end="155:9">-&gt;</operator><name pos:start="155:10" pos:end="155:16">t_frame</name></name> <operator pos:start="155:18" pos:end="155:18">=</operator> <literal type="number" pos:start="155:20" pos:end="155:20">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="159:5" pos:end="663:5"><if pos:start="159:5" pos:end="663:5">if <condition pos:start="159:8" pos:end="159:37">(<expr pos:start="159:9" pos:end="159:36"><name pos:start="159:9" pos:end="159:18"><name pos:start="159:9" pos:end="159:11">ctx</name><operator pos:start="159:12" pos:end="159:13">-&gt;</operator><name pos:start="159:14" pos:end="159:18">shape</name></name> <operator pos:start="159:20" pos:end="159:21">!=</operator> <name pos:start="159:23" pos:end="159:36">BIN_ONLY_SHAPE</name></expr>)</condition> <block pos:start="159:39" pos:end="663:5">{<block_content pos:start="161:9" pos:end="661:9">

        <if_stmt pos:start="161:9" pos:end="189:9"><if pos:start="161:9" pos:end="189:9">if <condition pos:start="161:12" pos:end="161:37">(<expr pos:start="161:13" pos:end="161:36"><name pos:start="161:13" pos:end="161:22"><name pos:start="161:13" pos:end="161:15">ctx</name><operator pos:start="161:16" pos:end="161:17">-&gt;</operator><name pos:start="161:18" pos:end="161:22">shape</name></name> <operator pos:start="161:24" pos:end="161:25">==</operator> <name pos:start="161:27" pos:end="161:36">RECT_SHAPE</name></expr>)</condition> <block pos:start="161:39" pos:end="189:9">{<block_content pos:start="163:13" pos:end="187:13">

            <expr_stmt pos:start="163:13" pos:end="163:45"><expr pos:start="163:13" pos:end="163:44"><call pos:start="163:13" pos:end="163:44"><name pos:start="163:13" pos:end="163:24">check_marker</name><argument_list pos:start="163:25" pos:end="163:44">(<argument pos:start="163:26" pos:end="163:27"><expr pos:start="163:26" pos:end="163:27"><name pos:start="163:26" pos:end="163:27">gb</name></expr></argument>, <argument pos:start="163:30" pos:end="163:43"><expr pos:start="163:30" pos:end="163:43"><literal type="string" pos:start="163:30" pos:end="163:43">"before width"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:37"><expr pos:start="165:13" pos:end="165:36"><name pos:start="165:13" pos:end="165:17">width</name> <operator pos:start="165:19" pos:end="165:19">=</operator> <call pos:start="165:21" pos:end="165:36"><name pos:start="165:21" pos:end="165:28">get_bits</name><argument_list pos:start="165:29" pos:end="165:36">(<argument pos:start="165:30" pos:end="165:31"><expr pos:start="165:30" pos:end="165:31"><name pos:start="165:30" pos:end="165:31">gb</name></expr></argument>, <argument pos:start="165:34" pos:end="165:35"><expr pos:start="165:34" pos:end="165:35"><literal type="number" pos:start="165:34" pos:end="165:35">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:46"><expr pos:start="167:13" pos:end="167:45"><call pos:start="167:13" pos:end="167:45"><name pos:start="167:13" pos:end="167:24">check_marker</name><argument_list pos:start="167:25" pos:end="167:45">(<argument pos:start="167:26" pos:end="167:27"><expr pos:start="167:26" pos:end="167:27"><name pos:start="167:26" pos:end="167:27">gb</name></expr></argument>, <argument pos:start="167:30" pos:end="167:44"><expr pos:start="167:30" pos:end="167:44"><literal type="string" pos:start="167:30" pos:end="167:44">"before height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:38"><expr pos:start="169:13" pos:end="169:37"><name pos:start="169:13" pos:end="169:18">height</name> <operator pos:start="169:20" pos:end="169:20">=</operator> <call pos:start="169:22" pos:end="169:37"><name pos:start="169:22" pos:end="169:29">get_bits</name><argument_list pos:start="169:30" pos:end="169:37">(<argument pos:start="169:31" pos:end="169:32"><expr pos:start="169:31" pos:end="169:32"><name pos:start="169:31" pos:end="169:32">gb</name></expr></argument>, <argument pos:start="169:35" pos:end="169:36"><expr pos:start="169:35" pos:end="169:36"><literal type="number" pos:start="169:35" pos:end="169:36">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:45"><expr pos:start="171:13" pos:end="171:44"><call pos:start="171:13" pos:end="171:44"><name pos:start="171:13" pos:end="171:24">check_marker</name><argument_list pos:start="171:25" pos:end="171:44">(<argument pos:start="171:26" pos:end="171:27"><expr pos:start="171:26" pos:end="171:27"><name pos:start="171:26" pos:end="171:27">gb</name></expr></argument>, <argument pos:start="171:30" pos:end="171:43"><expr pos:start="171:30" pos:end="171:43"><literal type="string" pos:start="171:30" pos:end="171:43">"after height"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="173:13" pos:end="187:13"><if pos:start="173:13" pos:end="187:13">if <condition pos:start="173:16" pos:end="175:63">(<expr pos:start="173:17" pos:end="175:62"><name pos:start="173:17" pos:end="173:21">width</name> <operator pos:start="173:23" pos:end="173:24">&amp;&amp;</operator> <name pos:start="173:26" pos:end="173:31">height</name> <operator pos:start="173:33" pos:end="173:34">&amp;&amp;</operator>  <comment type="block" pos:start="173:37" pos:end="173:79">/* they should be non zero but who knows */</comment>

                <operator pos:start="175:17" pos:end="175:17">!</operator><operator pos:start="175:18" pos:end="175:18">(</operator><name pos:start="175:19" pos:end="175:26"><name pos:start="175:19" pos:end="175:19">s</name><operator pos:start="175:20" pos:end="175:21">-&gt;</operator><name pos:start="175:22" pos:end="175:26">width</name></name> <operator pos:start="175:28" pos:end="175:29">&amp;&amp;</operator> <name pos:start="175:31" pos:end="175:42"><name pos:start="175:31" pos:end="175:31">s</name><operator pos:start="175:32" pos:end="175:33">-&gt;</operator><name pos:start="175:34" pos:end="175:42">codec_tag</name></name> <operator pos:start="175:44" pos:end="175:45">==</operator> <call pos:start="175:47" pos:end="175:61"><name pos:start="175:47" pos:end="175:53">AV_RL32</name><argument_list pos:start="175:54" pos:end="175:61">(<argument pos:start="175:55" pos:end="175:60"><expr pos:start="175:55" pos:end="175:60"><literal type="string" pos:start="175:55" pos:end="175:60">"MP4S"</literal></expr></argument>)</argument_list></call><operator pos:start="175:62" pos:end="175:62">)</operator></expr>)</condition> <block pos:start="175:65" pos:end="187:13">{<block_content pos:start="177:17" pos:end="185:35">

                <if_stmt pos:start="177:17" pos:end="181:42"><if pos:start="177:17" pos:end="181:42">if <condition pos:start="177:20" pos:end="179:63">(<expr pos:start="177:21" pos:end="179:62"><name pos:start="177:21" pos:end="177:28"><name pos:start="177:21" pos:end="177:21">s</name><operator pos:start="177:22" pos:end="177:23">-&gt;</operator><name pos:start="177:24" pos:end="177:28">width</name></name> <operator pos:start="177:30" pos:end="177:31">&amp;&amp;</operator> <name pos:start="177:33" pos:end="177:41"><name pos:start="177:33" pos:end="177:33">s</name><operator pos:start="177:34" pos:end="177:35">-&gt;</operator><name pos:start="177:36" pos:end="177:41">height</name></name> <operator pos:start="177:43" pos:end="177:44">&amp;&amp;</operator>

                    <operator pos:start="179:21" pos:end="179:21">(</operator><name pos:start="179:22" pos:end="179:29"><name pos:start="179:22" pos:end="179:22">s</name><operator pos:start="179:23" pos:end="179:24">-&gt;</operator><name pos:start="179:25" pos:end="179:29">width</name></name> <operator pos:start="179:31" pos:end="179:32">!=</operator> <name pos:start="179:34" pos:end="179:38">width</name> <operator pos:start="179:40" pos:end="179:41">||</operator> <name pos:start="179:43" pos:end="179:51"><name pos:start="179:43" pos:end="179:43">s</name><operator pos:start="179:44" pos:end="179:45">-&gt;</operator><name pos:start="179:46" pos:end="179:51">height</name></name> <operator pos:start="179:53" pos:end="179:54">!=</operator> <name pos:start="179:56" pos:end="179:61">height</name><operator pos:start="179:62" pos:end="179:62">)</operator></expr>)</condition><block type="pseudo" pos:start="181:21" pos:end="181:42"><block_content pos:start="181:21" pos:end="181:42">

                    <expr_stmt pos:start="181:21" pos:end="181:42"><expr pos:start="181:21" pos:end="181:41"><name pos:start="181:21" pos:end="181:37"><name pos:start="181:21" pos:end="181:21">s</name><operator pos:start="181:22" pos:end="181:23">-&gt;</operator><name pos:start="181:24" pos:end="181:37">context_reinit</name></name> <operator pos:start="181:39" pos:end="181:39">=</operator> <literal type="number" pos:start="181:41" pos:end="181:41">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:34"><expr pos:start="183:17" pos:end="183:33"><name pos:start="183:17" pos:end="183:24"><name pos:start="183:17" pos:end="183:17">s</name><operator pos:start="183:18" pos:end="183:19">-&gt;</operator><name pos:start="183:20" pos:end="183:24">width</name></name>  <operator pos:start="183:27" pos:end="183:27">=</operator> <name pos:start="183:29" pos:end="183:33">width</name></expr>;</expr_stmt>

                <expr_stmt pos:start="185:17" pos:end="185:35"><expr pos:start="185:17" pos:end="185:34"><name pos:start="185:17" pos:end="185:25"><name pos:start="185:17" pos:end="185:17">s</name><operator pos:start="185:18" pos:end="185:19">-&gt;</operator><name pos:start="185:20" pos:end="185:25">height</name></name> <operator pos:start="185:27" pos:end="185:27">=</operator> <name pos:start="185:29" pos:end="185:34">height</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="193:9" pos:end="195:53"><expr pos:start="193:9" pos:end="195:52"><name pos:start="193:9" pos:end="193:31"><name pos:start="193:9" pos:end="193:9">s</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:31">progressive_sequence</name></name>  <operator pos:start="193:34" pos:end="193:34">=</operator>

        <name pos:start="195:9" pos:end="195:28"><name pos:start="195:9" pos:end="195:9">s</name><operator pos:start="195:10" pos:end="195:11">-&gt;</operator><name pos:start="195:12" pos:end="195:28">progressive_frame</name></name>     <operator pos:start="195:34" pos:end="195:34">=</operator> <call pos:start="195:36" pos:end="195:48"><name pos:start="195:36" pos:end="195:44">get_bits1</name><argument_list pos:start="195:45" pos:end="195:48">(<argument pos:start="195:46" pos:end="195:47"><expr pos:start="195:46" pos:end="195:47"><name pos:start="195:46" pos:end="195:47">gb</name></expr></argument>)</argument_list></call> <operator pos:start="195:50" pos:end="195:50">^</operator> <literal type="number" pos:start="195:52" pos:end="195:52">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:37"><expr pos:start="197:9" pos:end="197:36"><name pos:start="197:9" pos:end="197:25"><name pos:start="197:9" pos:end="197:9">s</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:25">interlaced_dct</name></name>        <operator pos:start="197:34" pos:end="197:34">=</operator> <literal type="number" pos:start="197:36" pos:end="197:36">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="199:9" pos:end="203:77"><if pos:start="199:9" pos:end="203:77">if <condition pos:start="199:12" pos:end="199:69">(<expr pos:start="199:13" pos:end="199:68"><operator pos:start="199:13" pos:end="199:13">!</operator><call pos:start="199:14" pos:end="199:26"><name pos:start="199:14" pos:end="199:22">get_bits1</name><argument_list pos:start="199:23" pos:end="199:26">(<argument pos:start="199:24" pos:end="199:25"><expr pos:start="199:24" pos:end="199:25"><name pos:start="199:24" pos:end="199:25">gb</name></expr></argument>)</argument_list></call> <operator pos:start="199:28" pos:end="199:29">&amp;&amp;</operator> <operator pos:start="199:31" pos:end="199:31">(</operator><name pos:start="199:32" pos:end="199:46"><name pos:start="199:32" pos:end="199:32">s</name><operator pos:start="199:33" pos:end="199:34">-&gt;</operator><name pos:start="199:35" pos:end="199:39">avctx</name><operator pos:start="199:40" pos:end="199:41">-&gt;</operator><name pos:start="199:42" pos:end="199:46">debug</name></name> <operator pos:start="199:48" pos:end="199:48">&amp;</operator> <name pos:start="199:50" pos:end="199:67">FF_DEBUG_PICT_INFO</name><operator pos:start="199:68" pos:end="199:68">)</operator></expr>)</condition><block type="pseudo" pos:start="201:13" pos:end="203:77"><block_content pos:start="201:13" pos:end="203:77">

            <expr_stmt pos:start="201:13" pos:end="203:77"><expr pos:start="201:13" pos:end="203:76"><call pos:start="201:13" pos:end="203:76"><name pos:start="201:13" pos:end="201:18">av_log</name><argument_list pos:start="201:19" pos:end="203:76">(<argument pos:start="201:20" pos:end="201:27"><expr pos:start="201:20" pos:end="201:27"><name pos:start="201:20" pos:end="201:27"><name pos:start="201:20" pos:end="201:20">s</name><operator pos:start="201:21" pos:end="201:22">-&gt;</operator><name pos:start="201:23" pos:end="201:27">avctx</name></name></expr></argument>, <argument pos:start="201:30" pos:end="201:40"><expr pos:start="201:30" pos:end="201:40"><name pos:start="201:30" pos:end="201:40">AV_LOG_INFO</name></expr></argument>,           <comment type="block" pos:start="201:53" pos:end="201:70">/* OBMC Disable */</comment>

                   <argument pos:start="203:20" pos:end="203:75"><expr pos:start="203:20" pos:end="203:75"><literal type="string" pos:start="203:20" pos:end="203:75">"MPEG4 OBMC not supported (very likely buggy encoder)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="205:9" pos:end="211:52"><if pos:start="205:9" pos:end="207:50">if <condition pos:start="205:12" pos:end="205:27">(<expr pos:start="205:13" pos:end="205:26"><name pos:start="205:13" pos:end="205:21">vo_ver_id</name> <operator pos:start="205:23" pos:end="205:24">==</operator> <literal type="number" pos:start="205:26" pos:end="205:26">1</literal></expr>)</condition><block type="pseudo" pos:start="207:13" pos:end="207:50"><block_content pos:start="207:13" pos:end="207:50">

            <expr_stmt pos:start="207:13" pos:end="207:50"><expr pos:start="207:13" pos:end="207:49"><name pos:start="207:13" pos:end="207:33"><name pos:start="207:13" pos:end="207:15">ctx</name><operator pos:start="207:16" pos:end="207:17">-&gt;</operator><name pos:start="207:18" pos:end="207:33">vol_sprite_usage</name></name> <operator pos:start="207:35" pos:end="207:35">=</operator> <call pos:start="207:37" pos:end="207:49"><name pos:start="207:37" pos:end="207:45">get_bits1</name><argument_list pos:start="207:46" pos:end="207:49">(<argument pos:start="207:47" pos:end="207:48"><expr pos:start="207:47" pos:end="207:48"><name pos:start="207:47" pos:end="207:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>    <comment type="block" pos:start="207:55" pos:end="207:76">/* vol_sprite_usage */</comment>

        <else pos:start="209:9" pos:end="211:52">else<block type="pseudo" pos:start="211:13" pos:end="211:52"><block_content pos:start="211:13" pos:end="211:52">

            <expr_stmt pos:start="211:13" pos:end="211:52"><expr pos:start="211:13" pos:end="211:51"><name pos:start="211:13" pos:end="211:33"><name pos:start="211:13" pos:end="211:15">ctx</name><operator pos:start="211:16" pos:end="211:17">-&gt;</operator><name pos:start="211:18" pos:end="211:33">vol_sprite_usage</name></name> <operator pos:start="211:35" pos:end="211:35">=</operator> <call pos:start="211:37" pos:end="211:51"><name pos:start="211:37" pos:end="211:44">get_bits</name><argument_list pos:start="211:45" pos:end="211:51">(<argument pos:start="211:46" pos:end="211:47"><expr pos:start="211:46" pos:end="211:47"><name pos:start="211:46" pos:end="211:47">gb</name></expr></argument>, <argument pos:start="211:50" pos:end="211:50"><expr pos:start="211:50" pos:end="211:50"><literal type="number" pos:start="211:50" pos:end="211:50">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>  <comment type="block" pos:start="211:55" pos:end="211:76">/* vol_sprite_usage */</comment>



        <if_stmt pos:start="215:9" pos:end="217:77"><if pos:start="215:9" pos:end="217:77">if <condition pos:start="215:12" pos:end="215:51">(<expr pos:start="215:13" pos:end="215:50"><name pos:start="215:13" pos:end="215:33"><name pos:start="215:13" pos:end="215:15">ctx</name><operator pos:start="215:16" pos:end="215:17">-&gt;</operator><name pos:start="215:18" pos:end="215:33">vol_sprite_usage</name></name> <operator pos:start="215:35" pos:end="215:36">==</operator> <name pos:start="215:38" pos:end="215:50">STATIC_SPRITE</name></expr>)</condition><block type="pseudo" pos:start="217:13" pos:end="217:77"><block_content pos:start="217:13" pos:end="217:77">

            <expr_stmt pos:start="217:13" pos:end="217:77"><expr pos:start="217:13" pos:end="217:76"><call pos:start="217:13" pos:end="217:76"><name pos:start="217:13" pos:end="217:18">av_log</name><argument_list pos:start="217:19" pos:end="217:76">(<argument pos:start="217:20" pos:end="217:27"><expr pos:start="217:20" pos:end="217:27"><name pos:start="217:20" pos:end="217:27"><name pos:start="217:20" pos:end="217:20">s</name><operator pos:start="217:21" pos:end="217:22">-&gt;</operator><name pos:start="217:23" pos:end="217:27">avctx</name></name></expr></argument>, <argument pos:start="217:30" pos:end="217:41"><expr pos:start="217:30" pos:end="217:41"><name pos:start="217:30" pos:end="217:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="217:44" pos:end="217:75"><expr pos:start="217:44" pos:end="217:75"><literal type="string" pos:start="217:44" pos:end="217:75">"Static Sprites not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="219:9" pos:end="267:9"><if pos:start="219:9" pos:end="267:9">if <condition pos:start="219:12" pos:end="221:48">(<expr pos:start="219:13" pos:end="221:47"><name pos:start="219:13" pos:end="219:33"><name pos:start="219:13" pos:end="219:15">ctx</name><operator pos:start="219:16" pos:end="219:17">-&gt;</operator><name pos:start="219:18" pos:end="219:33">vol_sprite_usage</name></name> <operator pos:start="219:35" pos:end="219:36">==</operator> <name pos:start="219:38" pos:end="219:50">STATIC_SPRITE</name> <operator pos:start="219:52" pos:end="219:53">||</operator>

            <name pos:start="221:13" pos:end="221:33"><name pos:start="221:13" pos:end="221:15">ctx</name><operator pos:start="221:16" pos:end="221:17">-&gt;</operator><name pos:start="221:18" pos:end="221:33">vol_sprite_usage</name></name> <operator pos:start="221:35" pos:end="221:36">==</operator> <name pos:start="221:38" pos:end="221:47">GMC_SPRITE</name></expr>)</condition> <block pos:start="221:50" pos:end="267:9">{<block_content pos:start="223:13" pos:end="265:31">

            <if_stmt pos:start="223:13" pos:end="241:13"><if pos:start="223:13" pos:end="241:13">if <condition pos:start="223:16" pos:end="223:55">(<expr pos:start="223:17" pos:end="223:54"><name pos:start="223:17" pos:end="223:37"><name pos:start="223:17" pos:end="223:19">ctx</name><operator pos:start="223:20" pos:end="223:21">-&gt;</operator><name pos:start="223:22" pos:end="223:37">vol_sprite_usage</name></name> <operator pos:start="223:39" pos:end="223:40">==</operator> <name pos:start="223:42" pos:end="223:54">STATIC_SPRITE</name></expr>)</condition> <block pos:start="223:57" pos:end="241:13">{<block_content pos:start="225:17" pos:end="239:31">

                <expr_stmt pos:start="225:17" pos:end="225:34"><expr pos:start="225:17" pos:end="225:33"><call pos:start="225:17" pos:end="225:33"><name pos:start="225:17" pos:end="225:25">skip_bits</name><argument_list pos:start="225:26" pos:end="225:33">(<argument pos:start="225:27" pos:end="225:28"><expr pos:start="225:27" pos:end="225:28"><name pos:start="225:27" pos:end="225:28">gb</name></expr></argument>, <argument pos:start="225:31" pos:end="225:32"><expr pos:start="225:31" pos:end="225:32"><literal type="number" pos:start="225:31" pos:end="225:32">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="225:36" pos:end="225:50">// sprite_width</comment>

                <expr_stmt pos:start="227:17" pos:end="227:31"><expr pos:start="227:17" pos:end="227:30"><call pos:start="227:17" pos:end="227:30"><name pos:start="227:17" pos:end="227:26">skip_bits1</name><argument_list pos:start="227:27" pos:end="227:30">(<argument pos:start="227:28" pos:end="227:29"><expr pos:start="227:28" pos:end="227:29"><name pos:start="227:28" pos:end="227:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="227:33" pos:end="227:44">/* marker */</comment>

                <expr_stmt pos:start="229:17" pos:end="229:34"><expr pos:start="229:17" pos:end="229:33"><call pos:start="229:17" pos:end="229:33"><name pos:start="229:17" pos:end="229:25">skip_bits</name><argument_list pos:start="229:26" pos:end="229:33">(<argument pos:start="229:27" pos:end="229:28"><expr pos:start="229:27" pos:end="229:28"><name pos:start="229:27" pos:end="229:28">gb</name></expr></argument>, <argument pos:start="229:31" pos:end="229:32"><expr pos:start="229:31" pos:end="229:32"><literal type="number" pos:start="229:31" pos:end="229:32">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="229:36" pos:end="229:51">// sprite_height</comment>

                <expr_stmt pos:start="231:17" pos:end="231:31"><expr pos:start="231:17" pos:end="231:30"><call pos:start="231:17" pos:end="231:30"><name pos:start="231:17" pos:end="231:26">skip_bits1</name><argument_list pos:start="231:27" pos:end="231:30">(<argument pos:start="231:28" pos:end="231:29"><expr pos:start="231:28" pos:end="231:29"><name pos:start="231:28" pos:end="231:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="231:33" pos:end="231:44">/* marker */</comment>

                <expr_stmt pos:start="233:17" pos:end="233:34"><expr pos:start="233:17" pos:end="233:33"><call pos:start="233:17" pos:end="233:33"><name pos:start="233:17" pos:end="233:25">skip_bits</name><argument_list pos:start="233:26" pos:end="233:33">(<argument pos:start="233:27" pos:end="233:28"><expr pos:start="233:27" pos:end="233:28"><name pos:start="233:27" pos:end="233:28">gb</name></expr></argument>, <argument pos:start="233:31" pos:end="233:32"><expr pos:start="233:31" pos:end="233:32"><literal type="number" pos:start="233:31" pos:end="233:32">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="233:36" pos:end="233:49">// sprite_left</comment>

                <expr_stmt pos:start="235:17" pos:end="235:31"><expr pos:start="235:17" pos:end="235:30"><call pos:start="235:17" pos:end="235:30"><name pos:start="235:17" pos:end="235:26">skip_bits1</name><argument_list pos:start="235:27" pos:end="235:30">(<argument pos:start="235:28" pos:end="235:29"><expr pos:start="235:28" pos:end="235:29"><name pos:start="235:28" pos:end="235:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="235:33" pos:end="235:44">/* marker */</comment>

                <expr_stmt pos:start="237:17" pos:end="237:34"><expr pos:start="237:17" pos:end="237:33"><call pos:start="237:17" pos:end="237:33"><name pos:start="237:17" pos:end="237:25">skip_bits</name><argument_list pos:start="237:26" pos:end="237:33">(<argument pos:start="237:27" pos:end="237:28"><expr pos:start="237:27" pos:end="237:28"><name pos:start="237:27" pos:end="237:28">gb</name></expr></argument>, <argument pos:start="237:31" pos:end="237:32"><expr pos:start="237:31" pos:end="237:32"><literal type="number" pos:start="237:31" pos:end="237:32">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="237:36" pos:end="237:48">// sprite_top</comment>

                <expr_stmt pos:start="239:17" pos:end="239:31"><expr pos:start="239:17" pos:end="239:30"><call pos:start="239:17" pos:end="239:30"><name pos:start="239:17" pos:end="239:26">skip_bits1</name><argument_list pos:start="239:27" pos:end="239:30">(<argument pos:start="239:28" pos:end="239:29"><expr pos:start="239:28" pos:end="239:29"><name pos:start="239:28" pos:end="239:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="239:33" pos:end="239:44">/* marker */</comment>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="243:13" pos:end="243:61"><expr pos:start="243:13" pos:end="243:60"><name pos:start="243:13" pos:end="243:42"><name pos:start="243:13" pos:end="243:15">ctx</name><operator pos:start="243:16" pos:end="243:17">-&gt;</operator><name pos:start="243:18" pos:end="243:42">num_sprite_warping_points</name></name> <operator pos:start="243:44" pos:end="243:44">=</operator> <call pos:start="243:46" pos:end="243:60"><name pos:start="243:46" pos:end="243:53">get_bits</name><argument_list pos:start="243:54" pos:end="243:60">(<argument pos:start="243:55" pos:end="243:56"><expr pos:start="243:55" pos:end="243:56"><name pos:start="243:55" pos:end="243:56">gb</name></expr></argument>, <argument pos:start="243:59" pos:end="243:59"><expr pos:start="243:59" pos:end="243:59"><literal type="number" pos:start="243:59" pos:end="243:59">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="245:13" pos:end="257:13"><if pos:start="245:13" pos:end="257:13">if <condition pos:start="245:16" pos:end="245:51">(<expr pos:start="245:17" pos:end="245:50"><name pos:start="245:17" pos:end="245:46"><name pos:start="245:17" pos:end="245:19">ctx</name><operator pos:start="245:20" pos:end="245:21">-&gt;</operator><name pos:start="245:22" pos:end="245:46">num_sprite_warping_points</name></name> <operator pos:start="245:48" pos:end="245:48">&gt;</operator> <literal type="number" pos:start="245:50" pos:end="245:50">3</literal></expr>)</condition> <block pos:start="245:53" pos:end="257:13">{<block_content pos:start="247:17" pos:end="255:43">

                <expr_stmt pos:start="247:17" pos:end="251:55"><expr pos:start="247:17" pos:end="251:54"><call pos:start="247:17" pos:end="251:54"><name pos:start="247:17" pos:end="247:22">av_log</name><argument_list pos:start="247:23" pos:end="251:54">(<argument pos:start="247:24" pos:end="247:31"><expr pos:start="247:24" pos:end="247:31"><name pos:start="247:24" pos:end="247:31"><name pos:start="247:24" pos:end="247:24">s</name><operator pos:start="247:25" pos:end="247:26">-&gt;</operator><name pos:start="247:27" pos:end="247:31">avctx</name></name></expr></argument>, <argument pos:start="247:34" pos:end="247:45"><expr pos:start="247:34" pos:end="247:45"><name pos:start="247:34" pos:end="247:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="249:24" pos:end="249:51"><expr pos:start="249:24" pos:end="249:51"><literal type="string" pos:start="249:24" pos:end="249:51">"%d sprite_warping_points\n"</literal></expr></argument>,

                       <argument pos:start="251:24" pos:end="251:53"><expr pos:start="251:24" pos:end="251:53"><name pos:start="251:24" pos:end="251:53"><name pos:start="251:24" pos:end="251:26">ctx</name><operator pos:start="251:27" pos:end="251:28">-&gt;</operator><name pos:start="251:29" pos:end="251:53">num_sprite_warping_points</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:51"><expr pos:start="253:17" pos:end="253:50"><name pos:start="253:17" pos:end="253:46"><name pos:start="253:17" pos:end="253:19">ctx</name><operator pos:start="253:20" pos:end="253:21">-&gt;</operator><name pos:start="253:22" pos:end="253:46">num_sprite_warping_points</name></name> <operator pos:start="253:48" pos:end="253:48">=</operator> <literal type="number" pos:start="253:50" pos:end="253:50">0</literal></expr>;</expr_stmt>

                <return pos:start="255:17" pos:end="255:43">return <expr pos:start="255:24" pos:end="255:42"><name pos:start="255:24" pos:end="255:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:58"><expr pos:start="259:13" pos:end="259:57"><name pos:start="259:13" pos:end="259:38"><name pos:start="259:13" pos:end="259:13">s</name><operator pos:start="259:14" pos:end="259:15">-&gt;</operator><name pos:start="259:16" pos:end="259:38">sprite_warping_accuracy</name></name>  <operator pos:start="259:41" pos:end="259:41">=</operator> <call pos:start="259:43" pos:end="259:57"><name pos:start="259:43" pos:end="259:50">get_bits</name><argument_list pos:start="259:51" pos:end="259:57">(<argument pos:start="259:52" pos:end="259:53"><expr pos:start="259:52" pos:end="259:53"><name pos:start="259:52" pos:end="259:53">gb</name></expr></argument>, <argument pos:start="259:56" pos:end="259:56"><expr pos:start="259:56" pos:end="259:56"><literal type="number" pos:start="259:56" pos:end="259:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:58"><expr pos:start="261:13" pos:end="261:57"><name pos:start="261:13" pos:end="261:41"><name pos:start="261:13" pos:end="261:15">ctx</name><operator pos:start="261:16" pos:end="261:17">-&gt;</operator><name pos:start="261:18" pos:end="261:41">sprite_brightness_change</name></name> <operator pos:start="261:43" pos:end="261:43">=</operator> <call pos:start="261:45" pos:end="261:57"><name pos:start="261:45" pos:end="261:53">get_bits1</name><argument_list pos:start="261:54" pos:end="261:57">(<argument pos:start="261:55" pos:end="261:56"><expr pos:start="261:55" pos:end="261:56"><name pos:start="261:55" pos:end="261:56">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="263:13" pos:end="265:31"><if pos:start="263:13" pos:end="265:31">if <condition pos:start="263:16" pos:end="263:55">(<expr pos:start="263:17" pos:end="263:54"><name pos:start="263:17" pos:end="263:37"><name pos:start="263:17" pos:end="263:19">ctx</name><operator pos:start="263:20" pos:end="263:21">-&gt;</operator><name pos:start="263:22" pos:end="263:37">vol_sprite_usage</name></name> <operator pos:start="263:39" pos:end="263:40">==</operator> <name pos:start="263:42" pos:end="263:54">STATIC_SPRITE</name></expr>)</condition><block type="pseudo" pos:start="265:17" pos:end="265:31"><block_content pos:start="265:17" pos:end="265:31">

                <expr_stmt pos:start="265:17" pos:end="265:31"><expr pos:start="265:17" pos:end="265:30"><call pos:start="265:17" pos:end="265:30"><name pos:start="265:17" pos:end="265:26">skip_bits1</name><argument_list pos:start="265:27" pos:end="265:30">(<argument pos:start="265:28" pos:end="265:29"><expr pos:start="265:28" pos:end="265:29"><name pos:start="265:28" pos:end="265:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="265:33" pos:end="265:53">// low_latency_sprite</comment>

        </block_content>}</block></if></if_stmt>

        <comment type="line" pos:start="269:9" pos:end="269:64">// FIXME sadct disable bit if verid!=1 &amp;&amp; shape not rect</comment>



        <if_stmt pos:start="273:9" pos:end="297:9"><if pos:start="273:9" pos:end="293:9">if <condition pos:start="273:12" pos:end="273:31">(<expr pos:start="273:13" pos:end="273:30"><call pos:start="273:13" pos:end="273:25"><name pos:start="273:13" pos:end="273:21">get_bits1</name><argument_list pos:start="273:22" pos:end="273:25">(<argument pos:start="273:23" pos:end="273:24"><expr pos:start="273:23" pos:end="273:24"><name pos:start="273:23" pos:end="273:24">gb</name></expr></argument>)</argument_list></call> <operator pos:start="273:27" pos:end="273:28">==</operator> <literal type="number" pos:start="273:30" pos:end="273:30">1</literal></expr>)</condition> <block pos:start="273:33" pos:end="293:9">{<block_content pos:start="275:13" pos:end="291:13">                   <comment type="block" pos:start="273:53" pos:end="273:67">/* not_8_bit */</comment>

            <expr_stmt pos:start="275:13" pos:end="275:49"><expr pos:start="275:13" pos:end="275:48"><name pos:start="275:13" pos:end="275:30"><name pos:start="275:13" pos:end="275:13">s</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:30">quant_precision</name></name> <operator pos:start="275:32" pos:end="275:32">=</operator> <call pos:start="275:34" pos:end="275:48"><name pos:start="275:34" pos:end="275:41">get_bits</name><argument_list pos:start="275:42" pos:end="275:48">(<argument pos:start="275:43" pos:end="275:44"><expr pos:start="275:43" pos:end="275:44"><name pos:start="275:43" pos:end="275:44">gb</name></expr></argument>, <argument pos:start="275:47" pos:end="275:47"><expr pos:start="275:47" pos:end="275:47"><literal type="number" pos:start="275:47" pos:end="275:47">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="275:53" pos:end="275:73">/* quant_precision */</comment>

            <if_stmt pos:start="277:13" pos:end="279:72"><if pos:start="277:13" pos:end="279:72">if <condition pos:start="277:16" pos:end="277:37">(<expr pos:start="277:17" pos:end="277:36"><call pos:start="277:17" pos:end="277:31"><name pos:start="277:17" pos:end="277:24">get_bits</name><argument_list pos:start="277:25" pos:end="277:31">(<argument pos:start="277:26" pos:end="277:27"><expr pos:start="277:26" pos:end="277:27"><name pos:start="277:26" pos:end="277:27">gb</name></expr></argument>, <argument pos:start="277:30" pos:end="277:30"><expr pos:start="277:30" pos:end="277:30"><literal type="number" pos:start="277:30" pos:end="277:30">4</literal></expr></argument>)</argument_list></call> <operator pos:start="277:33" pos:end="277:34">!=</operator> <literal type="number" pos:start="277:36" pos:end="277:36">8</literal></expr>)</condition><block type="pseudo" pos:start="279:17" pos:end="279:72"><block_content pos:start="279:17" pos:end="279:72">               <comment type="block" pos:start="277:53" pos:end="277:72">/* bits_per_pixel */</comment>

                <expr_stmt pos:start="279:17" pos:end="279:72"><expr pos:start="279:17" pos:end="279:71"><call pos:start="279:17" pos:end="279:71"><name pos:start="279:17" pos:end="279:22">av_log</name><argument_list pos:start="279:23" pos:end="279:71">(<argument pos:start="279:24" pos:end="279:31"><expr pos:start="279:24" pos:end="279:31"><name pos:start="279:24" pos:end="279:31"><name pos:start="279:24" pos:end="279:24">s</name><operator pos:start="279:25" pos:end="279:26">-&gt;</operator><name pos:start="279:27" pos:end="279:31">avctx</name></name></expr></argument>, <argument pos:start="279:34" pos:end="279:45"><expr pos:start="279:34" pos:end="279:45"><name pos:start="279:34" pos:end="279:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="279:48" pos:end="279:70"><expr pos:start="279:48" pos:end="279:70"><literal type="string" pos:start="279:48" pos:end="279:70">"N-bit not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="281:13" pos:end="285:67"><if pos:start="281:13" pos:end="285:67">if <condition pos:start="281:16" pos:end="281:40">(<expr pos:start="281:17" pos:end="281:39"><name pos:start="281:17" pos:end="281:34"><name pos:start="281:17" pos:end="281:17">s</name><operator pos:start="281:18" pos:end="281:19">-&gt;</operator><name pos:start="281:20" pos:end="281:34">quant_precision</name></name> <operator pos:start="281:36" pos:end="281:37">!=</operator> <literal type="number" pos:start="281:39" pos:end="281:39">5</literal></expr>)</condition><block type="pseudo" pos:start="283:17" pos:end="285:67"><block_content pos:start="283:17" pos:end="285:67">

                <expr_stmt pos:start="283:17" pos:end="285:67"><expr pos:start="283:17" pos:end="285:66"><call pos:start="283:17" pos:end="285:66"><name pos:start="283:17" pos:end="283:22">av_log</name><argument_list pos:start="283:23" pos:end="285:66">(<argument pos:start="283:24" pos:end="283:31"><expr pos:start="283:24" pos:end="283:31"><name pos:start="283:24" pos:end="283:31"><name pos:start="283:24" pos:end="283:24">s</name><operator pos:start="283:25" pos:end="283:26">-&gt;</operator><name pos:start="283:27" pos:end="283:31">avctx</name></name></expr></argument>, <argument pos:start="283:34" pos:end="283:45"><expr pos:start="283:34" pos:end="283:45"><name pos:start="283:34" pos:end="283:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="285:24" pos:end="285:45"><expr pos:start="285:24" pos:end="285:45"><literal type="string" pos:start="285:24" pos:end="285:45">"quant precision %d\n"</literal></expr></argument>, <argument pos:start="285:48" pos:end="285:65"><expr pos:start="285:48" pos:end="285:65"><name pos:start="285:48" pos:end="285:65"><name pos:start="285:48" pos:end="285:48">s</name><operator pos:start="285:49" pos:end="285:50">-&gt;</operator><name pos:start="285:51" pos:end="285:65">quant_precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="287:13" pos:end="291:13"><if pos:start="287:13" pos:end="291:13">if <condition pos:start="287:16" pos:end="287:61">(<expr pos:start="287:17" pos:end="287:60"><name pos:start="287:17" pos:end="287:34"><name pos:start="287:17" pos:end="287:17">s</name><operator pos:start="287:18" pos:end="287:19">-&gt;</operator><name pos:start="287:20" pos:end="287:34">quant_precision</name></name><operator pos:start="287:35" pos:end="287:35">&lt;</operator><literal type="number" pos:start="287:36" pos:end="287:36">3</literal> <operator pos:start="287:38" pos:end="287:39">||</operator> <name pos:start="287:41" pos:end="287:58"><name pos:start="287:41" pos:end="287:41">s</name><operator pos:start="287:42" pos:end="287:43">-&gt;</operator><name pos:start="287:44" pos:end="287:58">quant_precision</name></name><operator pos:start="287:59" pos:end="287:59">&gt;</operator><literal type="number" pos:start="287:60" pos:end="287:60">9</literal></expr>)</condition> <block pos:start="287:63" pos:end="291:13">{<block_content pos:start="289:17" pos:end="289:39">

                <expr_stmt pos:start="289:17" pos:end="289:39"><expr pos:start="289:17" pos:end="289:38"><name pos:start="289:17" pos:end="289:34"><name pos:start="289:17" pos:end="289:17">s</name><operator pos:start="289:18" pos:end="289:19">-&gt;</operator><name pos:start="289:20" pos:end="289:34">quant_precision</name></name> <operator pos:start="289:36" pos:end="289:36">=</operator> <literal type="number" pos:start="289:38" pos:end="289:38">5</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="293:11" pos:end="297:9">else <block pos:start="293:16" pos:end="297:9">{<block_content pos:start="295:13" pos:end="295:35">

            <expr_stmt pos:start="295:13" pos:end="295:35"><expr pos:start="295:13" pos:end="295:34"><name pos:start="295:13" pos:end="295:30"><name pos:start="295:13" pos:end="295:13">s</name><operator pos:start="295:14" pos:end="295:15">-&gt;</operator><name pos:start="295:16" pos:end="295:30">quant_precision</name></name> <operator pos:start="295:32" pos:end="295:32">=</operator> <literal type="number" pos:start="295:34" pos:end="295:34">5</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="line" pos:start="301:9" pos:end="301:50">// FIXME a bunch of grayscale shape things</comment>



        <if_stmt pos:start="305:9" pos:end="429:9"><if pos:start="305:9" pos:end="429:9">if <condition pos:start="305:12" pos:end="305:44">(<expr pos:start="305:13" pos:end="305:43"><operator pos:start="305:13" pos:end="305:13">(</operator><name pos:start="305:14" pos:end="305:26"><name pos:start="305:14" pos:end="305:14">s</name><operator pos:start="305:15" pos:end="305:16">-&gt;</operator><name pos:start="305:17" pos:end="305:26">mpeg_quant</name></name> <operator pos:start="305:28" pos:end="305:28">=</operator> <call pos:start="305:30" pos:end="305:42"><name pos:start="305:30" pos:end="305:38">get_bits1</name><argument_list pos:start="305:39" pos:end="305:42">(<argument pos:start="305:40" pos:end="305:41"><expr pos:start="305:40" pos:end="305:41"><name pos:start="305:40" pos:end="305:41">gb</name></expr></argument>)</argument_list></call><operator pos:start="305:43" pos:end="305:43">)</operator></expr>)</condition> <block pos:start="305:46" pos:end="429:9">{<block_content pos:start="307:13" pos:end="423:13"> <comment type="block" pos:start="305:48" pos:end="305:67">/* vol_quant_type */</comment>

            <decl_stmt pos:start="307:13" pos:end="307:21"><decl pos:start="307:13" pos:end="307:17"><type pos:start="307:13" pos:end="307:15"><name pos:start="307:13" pos:end="307:15">int</name></type> <name pos:start="307:17" pos:end="307:17">i</name></decl>, <decl pos:start="307:20" pos:end="307:20"><type ref="prev" pos:start="307:13" pos:end="307:15"/><name pos:start="307:20" pos:end="307:20">v</name></decl>;</decl_stmt>



            <comment type="block" pos:start="311:13" pos:end="311:39">/* load default matrixes */</comment>

            <for pos:start="313:13" pos:end="331:13">for <control pos:start="313:17" pos:end="313:36">(<init pos:start="313:18" pos:end="313:23"><expr pos:start="313:18" pos:end="313:22"><name pos:start="313:18" pos:end="313:18">i</name> <operator pos:start="313:20" pos:end="313:20">=</operator> <literal type="number" pos:start="313:22" pos:end="313:22">0</literal></expr>;</init> <condition pos:start="313:25" pos:end="313:31"><expr pos:start="313:25" pos:end="313:30"><name pos:start="313:25" pos:end="313:25">i</name> <operator pos:start="313:27" pos:end="313:27">&lt;</operator> <literal type="number" pos:start="313:29" pos:end="313:30">64</literal></expr>;</condition> <incr pos:start="313:33" pos:end="313:35"><expr pos:start="313:33" pos:end="313:35"><name pos:start="313:33" pos:end="313:33">i</name><operator pos:start="313:34" pos:end="313:35">++</operator></expr></incr>)</control> <block pos:start="313:38" pos:end="331:13">{<block_content pos:start="315:17" pos:end="329:46">

                <decl_stmt pos:start="315:17" pos:end="315:52"><decl pos:start="315:17" pos:end="315:51"><type pos:start="315:17" pos:end="315:19"><name pos:start="315:17" pos:end="315:19">int</name></type> <name pos:start="315:21" pos:end="315:21">j</name> <init pos:start="315:23" pos:end="315:51">= <expr pos:start="315:25" pos:end="315:51"><name pos:start="315:25" pos:end="315:51"><name pos:start="315:25" pos:end="315:25">s</name><operator pos:start="315:26" pos:end="315:27">-&gt;</operator><name pos:start="315:28" pos:end="315:31">idsp</name><operator pos:start="315:32" pos:end="315:32">.</operator><name pos:start="315:33" pos:end="315:48">idct_permutation</name><index pos:start="315:49" pos:end="315:51">[<expr pos:start="315:50" pos:end="315:50"><name pos:start="315:50" pos:end="315:50">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="317:17" pos:end="317:53"><expr pos:start="317:17" pos:end="317:52"><name pos:start="317:17" pos:end="317:17">v</name> <operator pos:start="317:19" pos:end="317:19">=</operator> <name pos:start="317:21" pos:end="317:52"><name pos:start="317:21" pos:end="317:49">ff_mpeg4_default_intra_matrix</name><index pos:start="317:50" pos:end="317:52">[<expr pos:start="317:51" pos:end="317:51"><name pos:start="317:51" pos:end="317:51">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="319:17" pos:end="319:46"><expr pos:start="319:17" pos:end="319:45"><name pos:start="319:17" pos:end="319:34"><name pos:start="319:17" pos:end="319:17">s</name><operator pos:start="319:18" pos:end="319:19">-&gt;</operator><name pos:start="319:20" pos:end="319:31">intra_matrix</name><index pos:start="319:32" pos:end="319:34">[<expr pos:start="319:33" pos:end="319:33"><name pos:start="319:33" pos:end="319:33">j</name></expr>]</index></name>        <operator pos:start="319:43" pos:end="319:43">=</operator> <name pos:start="319:45" pos:end="319:45">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="321:17" pos:end="321:46"><expr pos:start="321:17" pos:end="321:45"><name pos:start="321:17" pos:end="321:41"><name pos:start="321:17" pos:end="321:17">s</name><operator pos:start="321:18" pos:end="321:19">-&gt;</operator><name pos:start="321:20" pos:end="321:38">chroma_intra_matrix</name><index pos:start="321:39" pos:end="321:41">[<expr pos:start="321:40" pos:end="321:40"><name pos:start="321:40" pos:end="321:40">j</name></expr>]</index></name> <operator pos:start="321:43" pos:end="321:43">=</operator> <name pos:start="321:45" pos:end="321:45">v</name></expr>;</expr_stmt>



                <expr_stmt pos:start="325:17" pos:end="325:57"><expr pos:start="325:17" pos:end="325:56"><name pos:start="325:17" pos:end="325:17">v</name> <operator pos:start="325:19" pos:end="325:19">=</operator> <name pos:start="325:21" pos:end="325:56"><name pos:start="325:21" pos:end="325:53">ff_mpeg4_default_non_intra_matrix</name><index pos:start="325:54" pos:end="325:56">[<expr pos:start="325:55" pos:end="325:55"><name pos:start="325:55" pos:end="325:55">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="327:17" pos:end="327:46"><expr pos:start="327:17" pos:end="327:45"><name pos:start="327:17" pos:end="327:34"><name pos:start="327:17" pos:end="327:17">s</name><operator pos:start="327:18" pos:end="327:19">-&gt;</operator><name pos:start="327:20" pos:end="327:31">inter_matrix</name><index pos:start="327:32" pos:end="327:34">[<expr pos:start="327:33" pos:end="327:33"><name pos:start="327:33" pos:end="327:33">j</name></expr>]</index></name>        <operator pos:start="327:43" pos:end="327:43">=</operator> <name pos:start="327:45" pos:end="327:45">v</name></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="329:46"><expr pos:start="329:17" pos:end="329:45"><name pos:start="329:17" pos:end="329:41"><name pos:start="329:17" pos:end="329:17">s</name><operator pos:start="329:18" pos:end="329:19">-&gt;</operator><name pos:start="329:20" pos:end="329:38">chroma_inter_matrix</name><index pos:start="329:39" pos:end="329:41">[<expr pos:start="329:40" pos:end="329:40"><name pos:start="329:40" pos:end="329:40">j</name></expr>]</index></name> <operator pos:start="329:43" pos:end="329:43">=</operator> <name pos:start="329:45" pos:end="329:45">v</name></expr>;</expr_stmt>

            </block_content>}</block></for>



            <comment type="block" pos:start="335:13" pos:end="335:42">/* load custom intra matrix */</comment>

            <if_stmt pos:start="337:13" pos:end="377:13"><if pos:start="337:13" pos:end="377:13">if <condition pos:start="337:16" pos:end="337:30">(<expr pos:start="337:17" pos:end="337:29"><call pos:start="337:17" pos:end="337:29"><name pos:start="337:17" pos:end="337:25">get_bits1</name><argument_list pos:start="337:26" pos:end="337:29">(<argument pos:start="337:27" pos:end="337:28"><expr pos:start="337:27" pos:end="337:28"><name pos:start="337:27" pos:end="337:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="337:32" pos:end="377:13">{<block_content pos:start="339:17" pos:end="375:17">

                <decl_stmt pos:start="339:17" pos:end="339:29"><decl pos:start="339:17" pos:end="339:28"><type pos:start="339:17" pos:end="339:19"><name pos:start="339:17" pos:end="339:19">int</name></type> <name pos:start="339:21" pos:end="339:24">last</name> <init pos:start="339:26" pos:end="339:28">= <expr pos:start="339:28" pos:end="339:28"><literal type="number" pos:start="339:28" pos:end="339:28">0</literal></expr></init></decl>;</decl_stmt>

                <for pos:start="341:17" pos:end="361:17">for <control pos:start="341:21" pos:end="341:40">(<init pos:start="341:22" pos:end="341:27"><expr pos:start="341:22" pos:end="341:26"><name pos:start="341:22" pos:end="341:22">i</name> <operator pos:start="341:24" pos:end="341:24">=</operator> <literal type="number" pos:start="341:26" pos:end="341:26">0</literal></expr>;</init> <condition pos:start="341:29" pos:end="341:35"><expr pos:start="341:29" pos:end="341:34"><name pos:start="341:29" pos:end="341:29">i</name> <operator pos:start="341:31" pos:end="341:31">&lt;</operator> <literal type="number" pos:start="341:33" pos:end="341:34">64</literal></expr>;</condition> <incr pos:start="341:37" pos:end="341:39"><expr pos:start="341:37" pos:end="341:39"><name pos:start="341:37" pos:end="341:37">i</name><operator pos:start="341:38" pos:end="341:39">++</operator></expr></incr>)</control> <block pos:start="341:42" pos:end="361:17">{<block_content pos:start="343:21" pos:end="359:53">

                    <decl_stmt pos:start="343:21" pos:end="343:26"><decl pos:start="343:21" pos:end="343:25"><type pos:start="343:21" pos:end="343:23"><name pos:start="343:21" pos:end="343:23">int</name></type> <name pos:start="343:25" pos:end="343:25">j</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="345:21" pos:end="345:40"><expr pos:start="345:21" pos:end="345:39"><name pos:start="345:21" pos:end="345:21">v</name> <operator pos:start="345:23" pos:end="345:23">=</operator> <call pos:start="345:25" pos:end="345:39"><name pos:start="345:25" pos:end="345:32">get_bits</name><argument_list pos:start="345:33" pos:end="345:39">(<argument pos:start="345:34" pos:end="345:35"><expr pos:start="345:34" pos:end="345:35"><name pos:start="345:34" pos:end="345:35">gb</name></expr></argument>, <argument pos:start="345:38" pos:end="345:38"><expr pos:start="345:38" pos:end="345:38"><literal type="number" pos:start="345:38" pos:end="345:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="347:21" pos:end="349:30"><if pos:start="347:21" pos:end="349:30">if <condition pos:start="347:24" pos:end="347:31">(<expr pos:start="347:25" pos:end="347:30"><name pos:start="347:25" pos:end="347:25">v</name> <operator pos:start="347:27" pos:end="347:28">==</operator> <literal type="number" pos:start="347:30" pos:end="347:30">0</literal></expr>)</condition><block type="pseudo" pos:start="349:25" pos:end="349:30"><block_content pos:start="349:25" pos:end="349:30">

                        <break pos:start="349:25" pos:end="349:30">break;</break></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="353:21" pos:end="353:29"><expr pos:start="353:21" pos:end="353:28"><name pos:start="353:21" pos:end="353:24">last</name> <operator pos:start="353:26" pos:end="353:26">=</operator> <name pos:start="353:28" pos:end="353:28">v</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="355:21" pos:end="355:70"><expr pos:start="355:21" pos:end="355:69"><name pos:start="355:21" pos:end="355:21">j</name> <operator pos:start="355:23" pos:end="355:23">=</operator> <name pos:start="355:25" pos:end="355:69"><name pos:start="355:25" pos:end="355:25">s</name><operator pos:start="355:26" pos:end="355:27">-&gt;</operator><name pos:start="355:28" pos:end="355:31">idsp</name><operator pos:start="355:32" pos:end="355:32">.</operator><name pos:start="355:33" pos:end="355:48">idct_permutation</name><index pos:start="355:49" pos:end="355:69">[<expr pos:start="355:50" pos:end="355:68"><name pos:start="355:50" pos:end="355:68"><name pos:start="355:50" pos:end="355:65">ff_zigzag_direct</name><index pos:start="355:66" pos:end="355:68">[<expr pos:start="355:67" pos:end="355:67"><name pos:start="355:67" pos:end="355:67">i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="357:21" pos:end="357:53"><expr pos:start="357:21" pos:end="357:52"><name pos:start="357:21" pos:end="357:38"><name pos:start="357:21" pos:end="357:21">s</name><operator pos:start="357:22" pos:end="357:23">-&gt;</operator><name pos:start="357:24" pos:end="357:35">intra_matrix</name><index pos:start="357:36" pos:end="357:38">[<expr pos:start="357:37" pos:end="357:37"><name pos:start="357:37" pos:end="357:37">j</name></expr>]</index></name>        <operator pos:start="357:47" pos:end="357:47">=</operator> <name pos:start="357:49" pos:end="357:52">last</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="359:21" pos:end="359:53"><expr pos:start="359:21" pos:end="359:52"><name pos:start="359:21" pos:end="359:45"><name pos:start="359:21" pos:end="359:21">s</name><operator pos:start="359:22" pos:end="359:23">-&gt;</operator><name pos:start="359:24" pos:end="359:42">chroma_intra_matrix</name><index pos:start="359:43" pos:end="359:45">[<expr pos:start="359:44" pos:end="359:44"><name pos:start="359:44" pos:end="359:44">j</name></expr>]</index></name> <operator pos:start="359:47" pos:end="359:47">=</operator> <name pos:start="359:49" pos:end="359:52">last</name></expr>;</expr_stmt>

                </block_content>}</block></for>



                <comment type="block" pos:start="365:17" pos:end="365:42">/* replicate last value */</comment>

                <for pos:start="367:17" pos:end="375:17">for <control pos:start="367:21" pos:end="367:35">(<init pos:start="367:22" pos:end="367:22">;</init> <condition pos:start="367:24" pos:end="367:30"><expr pos:start="367:24" pos:end="367:29"><name pos:start="367:24" pos:end="367:24">i</name> <operator pos:start="367:26" pos:end="367:26">&lt;</operator> <literal type="number" pos:start="367:28" pos:end="367:29">64</literal></expr>;</condition> <incr pos:start="367:32" pos:end="367:34"><expr pos:start="367:32" pos:end="367:34"><name pos:start="367:32" pos:end="367:32">i</name><operator pos:start="367:33" pos:end="367:34">++</operator></expr></incr>)</control> <block pos:start="367:37" pos:end="375:17">{<block_content pos:start="369:21" pos:end="373:53">

                    <decl_stmt pos:start="369:21" pos:end="369:74"><decl pos:start="369:21" pos:end="369:73"><type pos:start="369:21" pos:end="369:23"><name pos:start="369:21" pos:end="369:23">int</name></type> <name pos:start="369:25" pos:end="369:25">j</name> <init pos:start="369:27" pos:end="369:73">= <expr pos:start="369:29" pos:end="369:73"><name pos:start="369:29" pos:end="369:73"><name pos:start="369:29" pos:end="369:29">s</name><operator pos:start="369:30" pos:end="369:31">-&gt;</operator><name pos:start="369:32" pos:end="369:35">idsp</name><operator pos:start="369:36" pos:end="369:36">.</operator><name pos:start="369:37" pos:end="369:52">idct_permutation</name><index pos:start="369:53" pos:end="369:73">[<expr pos:start="369:54" pos:end="369:72"><name pos:start="369:54" pos:end="369:72"><name pos:start="369:54" pos:end="369:69">ff_zigzag_direct</name><index pos:start="369:70" pos:end="369:72">[<expr pos:start="369:71" pos:end="369:71"><name pos:start="369:71" pos:end="369:71">i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="371:21" pos:end="371:53"><expr pos:start="371:21" pos:end="371:52"><name pos:start="371:21" pos:end="371:38"><name pos:start="371:21" pos:end="371:21">s</name><operator pos:start="371:22" pos:end="371:23">-&gt;</operator><name pos:start="371:24" pos:end="371:35">intra_matrix</name><index pos:start="371:36" pos:end="371:38">[<expr pos:start="371:37" pos:end="371:37"><name pos:start="371:37" pos:end="371:37">j</name></expr>]</index></name>        <operator pos:start="371:47" pos:end="371:47">=</operator> <name pos:start="371:49" pos:end="371:52">last</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="373:21" pos:end="373:53"><expr pos:start="373:21" pos:end="373:52"><name pos:start="373:21" pos:end="373:45"><name pos:start="373:21" pos:end="373:21">s</name><operator pos:start="373:22" pos:end="373:23">-&gt;</operator><name pos:start="373:24" pos:end="373:42">chroma_intra_matrix</name><index pos:start="373:43" pos:end="373:45">[<expr pos:start="373:44" pos:end="373:44"><name pos:start="373:44" pos:end="373:44">j</name></expr>]</index></name> <operator pos:start="373:47" pos:end="373:47">=</operator> <name pos:start="373:49" pos:end="373:52">last</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="381:13" pos:end="381:46">/* load custom non intra matrix */</comment>

            <if_stmt pos:start="383:13" pos:end="423:13"><if pos:start="383:13" pos:end="423:13">if <condition pos:start="383:16" pos:end="383:30">(<expr pos:start="383:17" pos:end="383:29"><call pos:start="383:17" pos:end="383:29"><name pos:start="383:17" pos:end="383:25">get_bits1</name><argument_list pos:start="383:26" pos:end="383:29">(<argument pos:start="383:27" pos:end="383:28"><expr pos:start="383:27" pos:end="383:28"><name pos:start="383:27" pos:end="383:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="383:32" pos:end="423:13">{<block_content pos:start="385:17" pos:end="421:17">

                <decl_stmt pos:start="385:17" pos:end="385:29"><decl pos:start="385:17" pos:end="385:28"><type pos:start="385:17" pos:end="385:19"><name pos:start="385:17" pos:end="385:19">int</name></type> <name pos:start="385:21" pos:end="385:24">last</name> <init pos:start="385:26" pos:end="385:28">= <expr pos:start="385:28" pos:end="385:28"><literal type="number" pos:start="385:28" pos:end="385:28">0</literal></expr></init></decl>;</decl_stmt>

                <for pos:start="387:17" pos:end="407:17">for <control pos:start="387:21" pos:end="387:40">(<init pos:start="387:22" pos:end="387:27"><expr pos:start="387:22" pos:end="387:26"><name pos:start="387:22" pos:end="387:22">i</name> <operator pos:start="387:24" pos:end="387:24">=</operator> <literal type="number" pos:start="387:26" pos:end="387:26">0</literal></expr>;</init> <condition pos:start="387:29" pos:end="387:35"><expr pos:start="387:29" pos:end="387:34"><name pos:start="387:29" pos:end="387:29">i</name> <operator pos:start="387:31" pos:end="387:31">&lt;</operator> <literal type="number" pos:start="387:33" pos:end="387:34">64</literal></expr>;</condition> <incr pos:start="387:37" pos:end="387:39"><expr pos:start="387:37" pos:end="387:39"><name pos:start="387:37" pos:end="387:37">i</name><operator pos:start="387:38" pos:end="387:39">++</operator></expr></incr>)</control> <block pos:start="387:42" pos:end="407:17">{<block_content pos:start="389:21" pos:end="405:50">

                    <decl_stmt pos:start="389:21" pos:end="389:26"><decl pos:start="389:21" pos:end="389:25"><type pos:start="389:21" pos:end="389:23"><name pos:start="389:21" pos:end="389:23">int</name></type> <name pos:start="389:25" pos:end="389:25">j</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="391:21" pos:end="391:40"><expr pos:start="391:21" pos:end="391:39"><name pos:start="391:21" pos:end="391:21">v</name> <operator pos:start="391:23" pos:end="391:23">=</operator> <call pos:start="391:25" pos:end="391:39"><name pos:start="391:25" pos:end="391:32">get_bits</name><argument_list pos:start="391:33" pos:end="391:39">(<argument pos:start="391:34" pos:end="391:35"><expr pos:start="391:34" pos:end="391:35"><name pos:start="391:34" pos:end="391:35">gb</name></expr></argument>, <argument pos:start="391:38" pos:end="391:38"><expr pos:start="391:38" pos:end="391:38"><literal type="number" pos:start="391:38" pos:end="391:38">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="393:21" pos:end="395:30"><if pos:start="393:21" pos:end="395:30">if <condition pos:start="393:24" pos:end="393:31">(<expr pos:start="393:25" pos:end="393:30"><name pos:start="393:25" pos:end="393:25">v</name> <operator pos:start="393:27" pos:end="393:28">==</operator> <literal type="number" pos:start="393:30" pos:end="393:30">0</literal></expr>)</condition><block type="pseudo" pos:start="395:25" pos:end="395:30"><block_content pos:start="395:25" pos:end="395:30">

                        <break pos:start="395:25" pos:end="395:30">break;</break></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="399:21" pos:end="399:29"><expr pos:start="399:21" pos:end="399:28"><name pos:start="399:21" pos:end="399:24">last</name> <operator pos:start="399:26" pos:end="399:26">=</operator> <name pos:start="399:28" pos:end="399:28">v</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="401:21" pos:end="401:70"><expr pos:start="401:21" pos:end="401:69"><name pos:start="401:21" pos:end="401:21">j</name> <operator pos:start="401:23" pos:end="401:23">=</operator> <name pos:start="401:25" pos:end="401:69"><name pos:start="401:25" pos:end="401:25">s</name><operator pos:start="401:26" pos:end="401:27">-&gt;</operator><name pos:start="401:28" pos:end="401:31">idsp</name><operator pos:start="401:32" pos:end="401:32">.</operator><name pos:start="401:33" pos:end="401:48">idct_permutation</name><index pos:start="401:49" pos:end="401:69">[<expr pos:start="401:50" pos:end="401:68"><name pos:start="401:50" pos:end="401:68"><name pos:start="401:50" pos:end="401:65">ff_zigzag_direct</name><index pos:start="401:66" pos:end="401:68">[<expr pos:start="401:67" pos:end="401:67"><name pos:start="401:67" pos:end="401:67">i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="403:21" pos:end="403:50"><expr pos:start="403:21" pos:end="403:49"><name pos:start="403:21" pos:end="403:38"><name pos:start="403:21" pos:end="403:21">s</name><operator pos:start="403:22" pos:end="403:23">-&gt;</operator><name pos:start="403:24" pos:end="403:35">inter_matrix</name><index pos:start="403:36" pos:end="403:38">[<expr pos:start="403:37" pos:end="403:37"><name pos:start="403:37" pos:end="403:37">j</name></expr>]</index></name>        <operator pos:start="403:47" pos:end="403:47">=</operator> <name pos:start="403:49" pos:end="403:49">v</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="405:21" pos:end="405:50"><expr pos:start="405:21" pos:end="405:49"><name pos:start="405:21" pos:end="405:45"><name pos:start="405:21" pos:end="405:21">s</name><operator pos:start="405:22" pos:end="405:23">-&gt;</operator><name pos:start="405:24" pos:end="405:42">chroma_inter_matrix</name><index pos:start="405:43" pos:end="405:45">[<expr pos:start="405:44" pos:end="405:44"><name pos:start="405:44" pos:end="405:44">j</name></expr>]</index></name> <operator pos:start="405:47" pos:end="405:47">=</operator> <name pos:start="405:49" pos:end="405:49">v</name></expr>;</expr_stmt>

                </block_content>}</block></for>



                <comment type="block" pos:start="411:17" pos:end="411:42">/* replicate last value */</comment>

                <for pos:start="413:17" pos:end="421:17">for <control pos:start="413:21" pos:end="413:35">(<init pos:start="413:22" pos:end="413:22">;</init> <condition pos:start="413:24" pos:end="413:30"><expr pos:start="413:24" pos:end="413:29"><name pos:start="413:24" pos:end="413:24">i</name> <operator pos:start="413:26" pos:end="413:26">&lt;</operator> <literal type="number" pos:start="413:28" pos:end="413:29">64</literal></expr>;</condition> <incr pos:start="413:32" pos:end="413:34"><expr pos:start="413:32" pos:end="413:34"><name pos:start="413:32" pos:end="413:32">i</name><operator pos:start="413:33" pos:end="413:34">++</operator></expr></incr>)</control> <block pos:start="413:37" pos:end="421:17">{<block_content pos:start="415:21" pos:end="419:53">

                    <decl_stmt pos:start="415:21" pos:end="415:74"><decl pos:start="415:21" pos:end="415:73"><type pos:start="415:21" pos:end="415:23"><name pos:start="415:21" pos:end="415:23">int</name></type> <name pos:start="415:25" pos:end="415:25">j</name> <init pos:start="415:27" pos:end="415:73">= <expr pos:start="415:29" pos:end="415:73"><name pos:start="415:29" pos:end="415:73"><name pos:start="415:29" pos:end="415:29">s</name><operator pos:start="415:30" pos:end="415:31">-&gt;</operator><name pos:start="415:32" pos:end="415:35">idsp</name><operator pos:start="415:36" pos:end="415:36">.</operator><name pos:start="415:37" pos:end="415:52">idct_permutation</name><index pos:start="415:53" pos:end="415:73">[<expr pos:start="415:54" pos:end="415:72"><name pos:start="415:54" pos:end="415:72"><name pos:start="415:54" pos:end="415:69">ff_zigzag_direct</name><index pos:start="415:70" pos:end="415:72">[<expr pos:start="415:71" pos:end="415:71"><name pos:start="415:71" pos:end="415:71">i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="417:21" pos:end="417:53"><expr pos:start="417:21" pos:end="417:52"><name pos:start="417:21" pos:end="417:38"><name pos:start="417:21" pos:end="417:21">s</name><operator pos:start="417:22" pos:end="417:23">-&gt;</operator><name pos:start="417:24" pos:end="417:35">inter_matrix</name><index pos:start="417:36" pos:end="417:38">[<expr pos:start="417:37" pos:end="417:37"><name pos:start="417:37" pos:end="417:37">j</name></expr>]</index></name>        <operator pos:start="417:47" pos:end="417:47">=</operator> <name pos:start="417:49" pos:end="417:52">last</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="419:21" pos:end="419:53"><expr pos:start="419:21" pos:end="419:52"><name pos:start="419:21" pos:end="419:45"><name pos:start="419:21" pos:end="419:21">s</name><operator pos:start="419:22" pos:end="419:23">-&gt;</operator><name pos:start="419:24" pos:end="419:42">chroma_inter_matrix</name><index pos:start="419:43" pos:end="419:45">[<expr pos:start="419:44" pos:end="419:44"><name pos:start="419:44" pos:end="419:44">j</name></expr>]</index></name> <operator pos:start="419:47" pos:end="419:47">=</operator> <name pos:start="419:49" pos:end="419:52">last</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>



            <comment type="line" pos:start="427:13" pos:end="427:54">// FIXME a bunch of grayscale shape things</comment>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="433:9" pos:end="439:34"><if pos:start="433:9" pos:end="435:46">if <condition pos:start="433:12" pos:end="433:27">(<expr pos:start="433:13" pos:end="433:26"><name pos:start="433:13" pos:end="433:21">vo_ver_id</name> <operator pos:start="433:23" pos:end="433:24">!=</operator> <literal type="number" pos:start="433:26" pos:end="433:26">1</literal></expr>)</condition><block type="pseudo" pos:start="435:13" pos:end="435:46"><block_content pos:start="435:13" pos:end="435:46">

            <expr_stmt pos:start="435:13" pos:end="435:46"><expr pos:start="435:13" pos:end="435:45"><name pos:start="435:13" pos:end="435:29"><name pos:start="435:13" pos:end="435:13">s</name><operator pos:start="435:14" pos:end="435:15">-&gt;</operator><name pos:start="435:16" pos:end="435:29">quarter_sample</name></name> <operator pos:start="435:31" pos:end="435:31">=</operator> <call pos:start="435:33" pos:end="435:45"><name pos:start="435:33" pos:end="435:41">get_bits1</name><argument_list pos:start="435:42" pos:end="435:45">(<argument pos:start="435:43" pos:end="435:44"><expr pos:start="435:43" pos:end="435:44"><name pos:start="435:43" pos:end="435:44">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="437:9" pos:end="439:34">else<block type="pseudo" pos:start="439:13" pos:end="439:34"><block_content pos:start="439:13" pos:end="439:34">

            <expr_stmt pos:start="439:13" pos:end="439:34"><expr pos:start="439:13" pos:end="439:33"><name pos:start="439:13" pos:end="439:29"><name pos:start="439:13" pos:end="439:13">s</name><operator pos:start="439:14" pos:end="439:15">-&gt;</operator><name pos:start="439:16" pos:end="439:29">quarter_sample</name></name> <operator pos:start="439:31" pos:end="439:31">=</operator> <literal type="number" pos:start="439:33" pos:end="439:33">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="443:9" pos:end="449:9"><if pos:start="443:9" pos:end="449:9">if <condition pos:start="443:12" pos:end="443:34">(<expr pos:start="443:13" pos:end="443:33"><call pos:start="443:13" pos:end="443:29"><name pos:start="443:13" pos:end="443:25">get_bits_left</name><argument_list pos:start="443:26" pos:end="443:29">(<argument pos:start="443:27" pos:end="443:28"><expr pos:start="443:27" pos:end="443:28"><name pos:start="443:27" pos:end="443:28">gb</name></expr></argument>)</argument_list></call> <operator pos:start="443:31" pos:end="443:31">&lt;</operator> <literal type="number" pos:start="443:33" pos:end="443:33">4</literal></expr>)</condition> <block pos:start="443:36" pos:end="449:9">{<block_content pos:start="445:13" pos:end="447:39">

            <expr_stmt pos:start="445:13" pos:end="445:69"><expr pos:start="445:13" pos:end="445:68"><call pos:start="445:13" pos:end="445:68"><name pos:start="445:13" pos:end="445:18">av_log</name><argument_list pos:start="445:19" pos:end="445:68">(<argument pos:start="445:20" pos:end="445:27"><expr pos:start="445:20" pos:end="445:27"><name pos:start="445:20" pos:end="445:27"><name pos:start="445:20" pos:end="445:20">s</name><operator pos:start="445:21" pos:end="445:22">-&gt;</operator><name pos:start="445:23" pos:end="445:27">avctx</name></name></expr></argument>, <argument pos:start="445:30" pos:end="445:41"><expr pos:start="445:30" pos:end="445:41"><name pos:start="445:30" pos:end="445:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="445:44" pos:end="445:67"><expr pos:start="445:44" pos:end="445:67"><literal type="string" pos:start="445:44" pos:end="445:67">"VOL Header truncated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="447:13" pos:end="447:39">return <expr pos:start="447:20" pos:end="447:38"><name pos:start="447:20" pos:end="447:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="453:9" pos:end="561:9"><if pos:start="453:9" pos:end="549:9">if <condition pos:start="453:12" pos:end="453:27">(<expr pos:start="453:13" pos:end="453:26"><operator pos:start="453:13" pos:end="453:13">!</operator><call pos:start="453:14" pos:end="453:26"><name pos:start="453:14" pos:end="453:22">get_bits1</name><argument_list pos:start="453:23" pos:end="453:26">(<argument pos:start="453:24" pos:end="453:25"><expr pos:start="453:24" pos:end="453:25"><name pos:start="453:24" pos:end="453:25">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="453:29" pos:end="549:9">{<block_content pos:start="455:13" pos:end="547:42">

            <decl_stmt pos:start="455:13" pos:end="455:55"><decl pos:start="455:13" pos:end="455:54"><type pos:start="455:13" pos:end="455:15"><name pos:start="455:13" pos:end="455:15">int</name></type> <name pos:start="455:17" pos:end="455:19">pos</name>               <init pos:start="455:35" pos:end="455:54">= <expr pos:start="455:37" pos:end="455:54"><call pos:start="455:37" pos:end="455:54"><name pos:start="455:37" pos:end="455:50">get_bits_count</name><argument_list pos:start="455:51" pos:end="455:54">(<argument pos:start="455:52" pos:end="455:53"><expr pos:start="455:52" pos:end="455:53"><name pos:start="455:52" pos:end="455:53">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="457:13" pos:end="457:52"><decl pos:start="457:13" pos:end="457:51"><type pos:start="457:13" pos:end="457:15"><name pos:start="457:13" pos:end="457:15">int</name></type> <name pos:start="457:17" pos:end="457:33">estimation_method</name> <init pos:start="457:35" pos:end="457:51">= <expr pos:start="457:37" pos:end="457:51"><call pos:start="457:37" pos:end="457:51"><name pos:start="457:37" pos:end="457:44">get_bits</name><argument_list pos:start="457:45" pos:end="457:51">(<argument pos:start="457:46" pos:end="457:47"><expr pos:start="457:46" pos:end="457:47"><name pos:start="457:46" pos:end="457:47">gb</name></expr></argument>, <argument pos:start="457:50" pos:end="457:50"><expr pos:start="457:50" pos:end="457:50"><literal type="number" pos:start="457:50" pos:end="457:50">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="459:13" pos:end="547:42"><if pos:start="459:13" pos:end="541:13">if <condition pos:start="459:16" pos:end="459:38">(<expr pos:start="459:17" pos:end="459:37"><name pos:start="459:17" pos:end="459:33">estimation_method</name> <operator pos:start="459:35" pos:end="459:35">&lt;</operator> <literal type="number" pos:start="459:37" pos:end="459:37">2</literal></expr>)</condition> <block pos:start="459:40" pos:end="541:13">{<block_content pos:start="461:17" pos:end="539:17">

                <if_stmt pos:start="461:17" pos:end="475:17"><if pos:start="461:17" pos:end="475:17">if <condition pos:start="461:20" pos:end="461:35">(<expr pos:start="461:21" pos:end="461:34"><operator pos:start="461:21" pos:end="461:21">!</operator><call pos:start="461:22" pos:end="461:34"><name pos:start="461:22" pos:end="461:30">get_bits1</name><argument_list pos:start="461:31" pos:end="461:34">(<argument pos:start="461:32" pos:end="461:33"><expr pos:start="461:32" pos:end="461:33"><name pos:start="461:32" pos:end="461:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="461:37" pos:end="475:17">{<block_content pos:start="463:21" pos:end="473:70">

                    <expr_stmt pos:start="463:21" pos:end="463:70"><expr pos:start="463:21" pos:end="463:69"><name pos:start="463:21" pos:end="463:48"><name pos:start="463:21" pos:end="463:23">ctx</name><operator pos:start="463:24" pos:end="463:25">-&gt;</operator><name pos:start="463:26" pos:end="463:48">cplx_estimation_trash_i</name></name> <operator pos:start="463:50" pos:end="463:51">+=</operator> <literal type="number" pos:start="463:53" pos:end="463:53">8</literal> <operator pos:start="463:55" pos:end="463:55">*</operator> <call pos:start="463:57" pos:end="463:69"><name pos:start="463:57" pos:end="463:65">get_bits1</name><argument_list pos:start="463:66" pos:end="463:69">(<argument pos:start="463:67" pos:end="463:68"><expr pos:start="463:67" pos:end="463:68"><name pos:start="463:67" pos:end="463:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="463:73" pos:end="463:84">/* opaque */</comment>

                    <expr_stmt pos:start="465:21" pos:end="465:70"><expr pos:start="465:21" pos:end="465:69"><name pos:start="465:21" pos:end="465:48"><name pos:start="465:21" pos:end="465:23">ctx</name><operator pos:start="465:24" pos:end="465:25">-&gt;</operator><name pos:start="465:26" pos:end="465:48">cplx_estimation_trash_i</name></name> <operator pos:start="465:50" pos:end="465:51">+=</operator> <literal type="number" pos:start="465:53" pos:end="465:53">8</literal> <operator pos:start="465:55" pos:end="465:55">*</operator> <call pos:start="465:57" pos:end="465:69"><name pos:start="465:57" pos:end="465:65">get_bits1</name><argument_list pos:start="465:66" pos:end="465:69">(<argument pos:start="465:67" pos:end="465:68"><expr pos:start="465:67" pos:end="465:68"><name pos:start="465:67" pos:end="465:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="465:73" pos:end="465:89">/* transparent */</comment>

                    <expr_stmt pos:start="467:21" pos:end="467:70"><expr pos:start="467:21" pos:end="467:69"><name pos:start="467:21" pos:end="467:48"><name pos:start="467:21" pos:end="467:23">ctx</name><operator pos:start="467:24" pos:end="467:25">-&gt;</operator><name pos:start="467:26" pos:end="467:48">cplx_estimation_trash_i</name></name> <operator pos:start="467:50" pos:end="467:51">+=</operator> <literal type="number" pos:start="467:53" pos:end="467:53">8</literal> <operator pos:start="467:55" pos:end="467:55">*</operator> <call pos:start="467:57" pos:end="467:69"><name pos:start="467:57" pos:end="467:65">get_bits1</name><argument_list pos:start="467:66" pos:end="467:69">(<argument pos:start="467:67" pos:end="467:68"><expr pos:start="467:67" pos:end="467:68"><name pos:start="467:67" pos:end="467:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="467:73" pos:end="467:87">/* intra_cae */</comment>

                    <expr_stmt pos:start="469:21" pos:end="469:70"><expr pos:start="469:21" pos:end="469:69"><name pos:start="469:21" pos:end="469:48"><name pos:start="469:21" pos:end="469:23">ctx</name><operator pos:start="469:24" pos:end="469:25">-&gt;</operator><name pos:start="469:26" pos:end="469:48">cplx_estimation_trash_i</name></name> <operator pos:start="469:50" pos:end="469:51">+=</operator> <literal type="number" pos:start="469:53" pos:end="469:53">8</literal> <operator pos:start="469:55" pos:end="469:55">*</operator> <call pos:start="469:57" pos:end="469:69"><name pos:start="469:57" pos:end="469:65">get_bits1</name><argument_list pos:start="469:66" pos:end="469:69">(<argument pos:start="469:67" pos:end="469:68"><expr pos:start="469:67" pos:end="469:68"><name pos:start="469:67" pos:end="469:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="469:73" pos:end="469:87">/* inter_cae */</comment>

                    <expr_stmt pos:start="471:21" pos:end="471:70"><expr pos:start="471:21" pos:end="471:69"><name pos:start="471:21" pos:end="471:48"><name pos:start="471:21" pos:end="471:23">ctx</name><operator pos:start="471:24" pos:end="471:25">-&gt;</operator><name pos:start="471:26" pos:end="471:48">cplx_estimation_trash_i</name></name> <operator pos:start="471:50" pos:end="471:51">+=</operator> <literal type="number" pos:start="471:53" pos:end="471:53">8</literal> <operator pos:start="471:55" pos:end="471:55">*</operator> <call pos:start="471:57" pos:end="471:69"><name pos:start="471:57" pos:end="471:65">get_bits1</name><argument_list pos:start="471:66" pos:end="471:69">(<argument pos:start="471:67" pos:end="471:68"><expr pos:start="471:67" pos:end="471:68"><name pos:start="471:67" pos:end="471:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="471:73" pos:end="471:87">/* no_update */</comment>

                    <expr_stmt pos:start="473:21" pos:end="473:70"><expr pos:start="473:21" pos:end="473:69"><name pos:start="473:21" pos:end="473:48"><name pos:start="473:21" pos:end="473:23">ctx</name><operator pos:start="473:24" pos:end="473:25">-&gt;</operator><name pos:start="473:26" pos:end="473:48">cplx_estimation_trash_i</name></name> <operator pos:start="473:50" pos:end="473:51">+=</operator> <literal type="number" pos:start="473:53" pos:end="473:53">8</literal> <operator pos:start="473:55" pos:end="473:55">*</operator> <call pos:start="473:57" pos:end="473:69"><name pos:start="473:57" pos:end="473:65">get_bits1</name><argument_list pos:start="473:66" pos:end="473:69">(<argument pos:start="473:67" pos:end="473:68"><expr pos:start="473:67" pos:end="473:68"><name pos:start="473:67" pos:end="473:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="473:73" pos:end="473:87">/* upampling */</comment>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="477:17" pos:end="487:17"><if pos:start="477:17" pos:end="487:17">if <condition pos:start="477:20" pos:end="477:35">(<expr pos:start="477:21" pos:end="477:34"><operator pos:start="477:21" pos:end="477:21">!</operator><call pos:start="477:22" pos:end="477:34"><name pos:start="477:22" pos:end="477:30">get_bits1</name><argument_list pos:start="477:31" pos:end="477:34">(<argument pos:start="477:32" pos:end="477:33"><expr pos:start="477:32" pos:end="477:33"><name pos:start="477:32" pos:end="477:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="477:37" pos:end="487:17">{<block_content pos:start="479:21" pos:end="485:70">

                    <expr_stmt pos:start="479:21" pos:end="479:70"><expr pos:start="479:21" pos:end="479:69"><name pos:start="479:21" pos:end="479:48"><name pos:start="479:21" pos:end="479:23">ctx</name><operator pos:start="479:24" pos:end="479:25">-&gt;</operator><name pos:start="479:26" pos:end="479:48">cplx_estimation_trash_i</name></name> <operator pos:start="479:50" pos:end="479:51">+=</operator> <literal type="number" pos:start="479:53" pos:end="479:53">8</literal> <operator pos:start="479:55" pos:end="479:55">*</operator> <call pos:start="479:57" pos:end="479:69"><name pos:start="479:57" pos:end="479:65">get_bits1</name><argument_list pos:start="479:66" pos:end="479:69">(<argument pos:start="479:67" pos:end="479:68"><expr pos:start="479:67" pos:end="479:68"><name pos:start="479:67" pos:end="479:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="479:73" pos:end="479:90">/* intra_blocks */</comment>

                    <expr_stmt pos:start="481:21" pos:end="481:70"><expr pos:start="481:21" pos:end="481:69"><name pos:start="481:21" pos:end="481:48"><name pos:start="481:21" pos:end="481:23">ctx</name><operator pos:start="481:24" pos:end="481:25">-&gt;</operator><name pos:start="481:26" pos:end="481:48">cplx_estimation_trash_p</name></name> <operator pos:start="481:50" pos:end="481:51">+=</operator> <literal type="number" pos:start="481:53" pos:end="481:53">8</literal> <operator pos:start="481:55" pos:end="481:55">*</operator> <call pos:start="481:57" pos:end="481:69"><name pos:start="481:57" pos:end="481:65">get_bits1</name><argument_list pos:start="481:66" pos:end="481:69">(<argument pos:start="481:67" pos:end="481:68"><expr pos:start="481:67" pos:end="481:68"><name pos:start="481:67" pos:end="481:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="481:73" pos:end="481:90">/* inter_blocks */</comment>

                    <expr_stmt pos:start="483:21" pos:end="483:70"><expr pos:start="483:21" pos:end="483:69"><name pos:start="483:21" pos:end="483:48"><name pos:start="483:21" pos:end="483:23">ctx</name><operator pos:start="483:24" pos:end="483:25">-&gt;</operator><name pos:start="483:26" pos:end="483:48">cplx_estimation_trash_p</name></name> <operator pos:start="483:50" pos:end="483:51">+=</operator> <literal type="number" pos:start="483:53" pos:end="483:53">8</literal> <operator pos:start="483:55" pos:end="483:55">*</operator> <call pos:start="483:57" pos:end="483:69"><name pos:start="483:57" pos:end="483:65">get_bits1</name><argument_list pos:start="483:66" pos:end="483:69">(<argument pos:start="483:67" pos:end="483:68"><expr pos:start="483:67" pos:end="483:68"><name pos:start="483:67" pos:end="483:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="483:73" pos:end="483:92">/* inter4v_blocks */</comment>

                    <expr_stmt pos:start="485:21" pos:end="485:70"><expr pos:start="485:21" pos:end="485:69"><name pos:start="485:21" pos:end="485:48"><name pos:start="485:21" pos:end="485:23">ctx</name><operator pos:start="485:24" pos:end="485:25">-&gt;</operator><name pos:start="485:26" pos:end="485:48">cplx_estimation_trash_i</name></name> <operator pos:start="485:50" pos:end="485:51">+=</operator> <literal type="number" pos:start="485:53" pos:end="485:53">8</literal> <operator pos:start="485:55" pos:end="485:55">*</operator> <call pos:start="485:57" pos:end="485:69"><name pos:start="485:57" pos:end="485:65">get_bits1</name><argument_list pos:start="485:66" pos:end="485:69">(<argument pos:start="485:67" pos:end="485:68"><expr pos:start="485:67" pos:end="485:68"><name pos:start="485:67" pos:end="485:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="485:73" pos:end="485:94">/* not coded blocks */</comment>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="489:17" pos:end="495:17"><if pos:start="489:17" pos:end="495:17">if <condition pos:start="489:20" pos:end="489:73">(<expr pos:start="489:21" pos:end="489:72"><operator pos:start="489:21" pos:end="489:21">!</operator><call pos:start="489:22" pos:end="489:72"><name pos:start="489:22" pos:end="489:33">check_marker</name><argument_list pos:start="489:34" pos:end="489:72">(<argument pos:start="489:35" pos:end="489:36"><expr pos:start="489:35" pos:end="489:36"><name pos:start="489:35" pos:end="489:36">gb</name></expr></argument>, <argument pos:start="489:39" pos:end="489:71"><expr pos:start="489:39" pos:end="489:71"><literal type="string" pos:start="489:39" pos:end="489:71">"in complexity estimation part 1"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="489:75" pos:end="495:17">{<block_content pos:start="491:21" pos:end="493:37">

                    <expr_stmt pos:start="491:21" pos:end="491:65"><expr pos:start="491:21" pos:end="491:64"><call pos:start="491:21" pos:end="491:64"><name pos:start="491:21" pos:end="491:34">skip_bits_long</name><argument_list pos:start="491:35" pos:end="491:64">(<argument pos:start="491:36" pos:end="491:37"><expr pos:start="491:36" pos:end="491:37"><name pos:start="491:36" pos:end="491:37">gb</name></expr></argument>, <argument pos:start="491:40" pos:end="491:63"><expr pos:start="491:40" pos:end="491:63"><name pos:start="491:40" pos:end="491:42">pos</name> <operator pos:start="491:44" pos:end="491:44">-</operator> <call pos:start="491:46" pos:end="491:63"><name pos:start="491:46" pos:end="491:59">get_bits_count</name><argument_list pos:start="491:60" pos:end="491:63">(<argument pos:start="491:61" pos:end="491:62"><expr pos:start="491:61" pos:end="491:62"><name pos:start="491:61" pos:end="491:62">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="493:21" pos:end="493:37">goto <name pos:start="493:26" pos:end="493:36">no_cplx_est</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="497:17" pos:end="507:17"><if pos:start="497:17" pos:end="507:17">if <condition pos:start="497:20" pos:end="497:35">(<expr pos:start="497:21" pos:end="497:34"><operator pos:start="497:21" pos:end="497:21">!</operator><call pos:start="497:22" pos:end="497:34"><name pos:start="497:22" pos:end="497:30">get_bits1</name><argument_list pos:start="497:31" pos:end="497:34">(<argument pos:start="497:32" pos:end="497:33"><expr pos:start="497:32" pos:end="497:33"><name pos:start="497:32" pos:end="497:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="497:37" pos:end="507:17">{<block_content pos:start="499:21" pos:end="505:70">

                    <expr_stmt pos:start="499:21" pos:end="499:70"><expr pos:start="499:21" pos:end="499:69"><name pos:start="499:21" pos:end="499:48"><name pos:start="499:21" pos:end="499:23">ctx</name><operator pos:start="499:24" pos:end="499:25">-&gt;</operator><name pos:start="499:26" pos:end="499:48">cplx_estimation_trash_i</name></name> <operator pos:start="499:50" pos:end="499:51">+=</operator> <literal type="number" pos:start="499:53" pos:end="499:53">8</literal> <operator pos:start="499:55" pos:end="499:55">*</operator> <call pos:start="499:57" pos:end="499:69"><name pos:start="499:57" pos:end="499:65">get_bits1</name><argument_list pos:start="499:66" pos:end="499:69">(<argument pos:start="499:67" pos:end="499:68"><expr pos:start="499:67" pos:end="499:68"><name pos:start="499:67" pos:end="499:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="499:73" pos:end="499:88">/* dct_coeffs */</comment>

                    <expr_stmt pos:start="501:21" pos:end="501:70"><expr pos:start="501:21" pos:end="501:69"><name pos:start="501:21" pos:end="501:48"><name pos:start="501:21" pos:end="501:23">ctx</name><operator pos:start="501:24" pos:end="501:25">-&gt;</operator><name pos:start="501:26" pos:end="501:48">cplx_estimation_trash_i</name></name> <operator pos:start="501:50" pos:end="501:51">+=</operator> <literal type="number" pos:start="501:53" pos:end="501:53">8</literal> <operator pos:start="501:55" pos:end="501:55">*</operator> <call pos:start="501:57" pos:end="501:69"><name pos:start="501:57" pos:end="501:65">get_bits1</name><argument_list pos:start="501:66" pos:end="501:69">(<argument pos:start="501:67" pos:end="501:68"><expr pos:start="501:67" pos:end="501:68"><name pos:start="501:67" pos:end="501:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="501:73" pos:end="501:87">/* dct_lines */</comment>

                    <expr_stmt pos:start="503:21" pos:end="503:70"><expr pos:start="503:21" pos:end="503:69"><name pos:start="503:21" pos:end="503:48"><name pos:start="503:21" pos:end="503:23">ctx</name><operator pos:start="503:24" pos:end="503:25">-&gt;</operator><name pos:start="503:26" pos:end="503:48">cplx_estimation_trash_i</name></name> <operator pos:start="503:50" pos:end="503:51">+=</operator> <literal type="number" pos:start="503:53" pos:end="503:53">8</literal> <operator pos:start="503:55" pos:end="503:55">*</operator> <call pos:start="503:57" pos:end="503:69"><name pos:start="503:57" pos:end="503:65">get_bits1</name><argument_list pos:start="503:66" pos:end="503:69">(<argument pos:start="503:67" pos:end="503:68"><expr pos:start="503:67" pos:end="503:68"><name pos:start="503:67" pos:end="503:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="503:73" pos:end="503:86">/* vlc_syms */</comment>

                    <expr_stmt pos:start="505:21" pos:end="505:70"><expr pos:start="505:21" pos:end="505:69"><name pos:start="505:21" pos:end="505:48"><name pos:start="505:21" pos:end="505:23">ctx</name><operator pos:start="505:24" pos:end="505:25">-&gt;</operator><name pos:start="505:26" pos:end="505:48">cplx_estimation_trash_i</name></name> <operator pos:start="505:50" pos:end="505:51">+=</operator> <literal type="number" pos:start="505:53" pos:end="505:53">4</literal> <operator pos:start="505:55" pos:end="505:55">*</operator> <call pos:start="505:57" pos:end="505:69"><name pos:start="505:57" pos:end="505:65">get_bits1</name><argument_list pos:start="505:66" pos:end="505:69">(<argument pos:start="505:67" pos:end="505:68"><expr pos:start="505:67" pos:end="505:68"><name pos:start="505:67" pos:end="505:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="505:73" pos:end="505:86">/* vlc_bits */</comment>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="509:17" pos:end="523:17"><if pos:start="509:17" pos:end="523:17">if <condition pos:start="509:20" pos:end="509:35">(<expr pos:start="509:21" pos:end="509:34"><operator pos:start="509:21" pos:end="509:21">!</operator><call pos:start="509:22" pos:end="509:34"><name pos:start="509:22" pos:end="509:30">get_bits1</name><argument_list pos:start="509:31" pos:end="509:34">(<argument pos:start="509:32" pos:end="509:33"><expr pos:start="509:32" pos:end="509:33"><name pos:start="509:32" pos:end="509:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="509:37" pos:end="523:17">{<block_content pos:start="511:21" pos:end="521:70">

                    <expr_stmt pos:start="511:21" pos:end="511:70"><expr pos:start="511:21" pos:end="511:69"><name pos:start="511:21" pos:end="511:48"><name pos:start="511:21" pos:end="511:23">ctx</name><operator pos:start="511:24" pos:end="511:25">-&gt;</operator><name pos:start="511:26" pos:end="511:48">cplx_estimation_trash_p</name></name> <operator pos:start="511:50" pos:end="511:51">+=</operator> <literal type="number" pos:start="511:53" pos:end="511:53">8</literal> <operator pos:start="511:55" pos:end="511:55">*</operator> <call pos:start="511:57" pos:end="511:69"><name pos:start="511:57" pos:end="511:65">get_bits1</name><argument_list pos:start="511:66" pos:end="511:69">(<argument pos:start="511:67" pos:end="511:68"><expr pos:start="511:67" pos:end="511:68"><name pos:start="511:67" pos:end="511:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="511:73" pos:end="511:81">/* apm */</comment>

                    <expr_stmt pos:start="513:21" pos:end="513:70"><expr pos:start="513:21" pos:end="513:69"><name pos:start="513:21" pos:end="513:48"><name pos:start="513:21" pos:end="513:23">ctx</name><operator pos:start="513:24" pos:end="513:25">-&gt;</operator><name pos:start="513:26" pos:end="513:48">cplx_estimation_trash_p</name></name> <operator pos:start="513:50" pos:end="513:51">+=</operator> <literal type="number" pos:start="513:53" pos:end="513:53">8</literal> <operator pos:start="513:55" pos:end="513:55">*</operator> <call pos:start="513:57" pos:end="513:69"><name pos:start="513:57" pos:end="513:65">get_bits1</name><argument_list pos:start="513:66" pos:end="513:69">(<argument pos:start="513:67" pos:end="513:68"><expr pos:start="513:67" pos:end="513:68"><name pos:start="513:67" pos:end="513:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="513:73" pos:end="513:81">/* npm */</comment>

                    <expr_stmt pos:start="515:21" pos:end="515:70"><expr pos:start="515:21" pos:end="515:69"><name pos:start="515:21" pos:end="515:48"><name pos:start="515:21" pos:end="515:23">ctx</name><operator pos:start="515:24" pos:end="515:25">-&gt;</operator><name pos:start="515:26" pos:end="515:48">cplx_estimation_trash_b</name></name> <operator pos:start="515:50" pos:end="515:51">+=</operator> <literal type="number" pos:start="515:53" pos:end="515:53">8</literal> <operator pos:start="515:55" pos:end="515:55">*</operator> <call pos:start="515:57" pos:end="515:69"><name pos:start="515:57" pos:end="515:65">get_bits1</name><argument_list pos:start="515:66" pos:end="515:69">(<argument pos:start="515:67" pos:end="515:68"><expr pos:start="515:67" pos:end="515:68"><name pos:start="515:67" pos:end="515:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="515:73" pos:end="515:94">/* interpolate_mc_q */</comment>

                    <expr_stmt pos:start="517:21" pos:end="517:70"><expr pos:start="517:21" pos:end="517:69"><name pos:start="517:21" pos:end="517:48"><name pos:start="517:21" pos:end="517:23">ctx</name><operator pos:start="517:24" pos:end="517:25">-&gt;</operator><name pos:start="517:26" pos:end="517:48">cplx_estimation_trash_p</name></name> <operator pos:start="517:50" pos:end="517:51">+=</operator> <literal type="number" pos:start="517:53" pos:end="517:53">8</literal> <operator pos:start="517:55" pos:end="517:55">*</operator> <call pos:start="517:57" pos:end="517:69"><name pos:start="517:57" pos:end="517:65">get_bits1</name><argument_list pos:start="517:66" pos:end="517:69">(<argument pos:start="517:67" pos:end="517:68"><expr pos:start="517:67" pos:end="517:68"><name pos:start="517:67" pos:end="517:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="517:73" pos:end="517:91">/* forwback_mc_q */</comment>

                    <expr_stmt pos:start="519:21" pos:end="519:70"><expr pos:start="519:21" pos:end="519:69"><name pos:start="519:21" pos:end="519:48"><name pos:start="519:21" pos:end="519:23">ctx</name><operator pos:start="519:24" pos:end="519:25">-&gt;</operator><name pos:start="519:26" pos:end="519:48">cplx_estimation_trash_p</name></name> <operator pos:start="519:50" pos:end="519:51">+=</operator> <literal type="number" pos:start="519:53" pos:end="519:53">8</literal> <operator pos:start="519:55" pos:end="519:55">*</operator> <call pos:start="519:57" pos:end="519:69"><name pos:start="519:57" pos:end="519:65">get_bits1</name><argument_list pos:start="519:66" pos:end="519:69">(<argument pos:start="519:67" pos:end="519:68"><expr pos:start="519:67" pos:end="519:68"><name pos:start="519:67" pos:end="519:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="519:73" pos:end="519:86">/* halfpel2 */</comment>

                    <expr_stmt pos:start="521:21" pos:end="521:70"><expr pos:start="521:21" pos:end="521:69"><name pos:start="521:21" pos:end="521:48"><name pos:start="521:21" pos:end="521:23">ctx</name><operator pos:start="521:24" pos:end="521:25">-&gt;</operator><name pos:start="521:26" pos:end="521:48">cplx_estimation_trash_p</name></name> <operator pos:start="521:50" pos:end="521:51">+=</operator> <literal type="number" pos:start="521:53" pos:end="521:53">8</literal> <operator pos:start="521:55" pos:end="521:55">*</operator> <call pos:start="521:57" pos:end="521:69"><name pos:start="521:57" pos:end="521:65">get_bits1</name><argument_list pos:start="521:66" pos:end="521:69">(<argument pos:start="521:67" pos:end="521:68"><expr pos:start="521:67" pos:end="521:68"><name pos:start="521:67" pos:end="521:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="521:73" pos:end="521:86">/* halfpel4 */</comment>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="525:17" pos:end="531:17"><if pos:start="525:17" pos:end="531:17">if <condition pos:start="525:20" pos:end="525:73">(<expr pos:start="525:21" pos:end="525:72"><operator pos:start="525:21" pos:end="525:21">!</operator><call pos:start="525:22" pos:end="525:72"><name pos:start="525:22" pos:end="525:33">check_marker</name><argument_list pos:start="525:34" pos:end="525:72">(<argument pos:start="525:35" pos:end="525:36"><expr pos:start="525:35" pos:end="525:36"><name pos:start="525:35" pos:end="525:36">gb</name></expr></argument>, <argument pos:start="525:39" pos:end="525:71"><expr pos:start="525:39" pos:end="525:71"><literal type="string" pos:start="525:39" pos:end="525:71">"in complexity estimation part 2"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="525:75" pos:end="531:17">{<block_content pos:start="527:21" pos:end="529:37">

                    <expr_stmt pos:start="527:21" pos:end="527:65"><expr pos:start="527:21" pos:end="527:64"><call pos:start="527:21" pos:end="527:64"><name pos:start="527:21" pos:end="527:34">skip_bits_long</name><argument_list pos:start="527:35" pos:end="527:64">(<argument pos:start="527:36" pos:end="527:37"><expr pos:start="527:36" pos:end="527:37"><name pos:start="527:36" pos:end="527:37">gb</name></expr></argument>, <argument pos:start="527:40" pos:end="527:63"><expr pos:start="527:40" pos:end="527:63"><name pos:start="527:40" pos:end="527:42">pos</name> <operator pos:start="527:44" pos:end="527:44">-</operator> <call pos:start="527:46" pos:end="527:63"><name pos:start="527:46" pos:end="527:59">get_bits_count</name><argument_list pos:start="527:60" pos:end="527:63">(<argument pos:start="527:61" pos:end="527:62"><expr pos:start="527:61" pos:end="527:62"><name pos:start="527:61" pos:end="527:62">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="529:21" pos:end="529:37">goto <name pos:start="529:26" pos:end="529:36">no_cplx_est</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="533:17" pos:end="539:17"><if pos:start="533:17" pos:end="539:17">if <condition pos:start="533:20" pos:end="533:43">(<expr pos:start="533:21" pos:end="533:42"><name pos:start="533:21" pos:end="533:37">estimation_method</name> <operator pos:start="533:39" pos:end="533:40">==</operator> <literal type="number" pos:start="533:42" pos:end="533:42">1</literal></expr>)</condition> <block pos:start="533:45" pos:end="539:17">{<block_content pos:start="535:21" pos:end="537:70">

                    <expr_stmt pos:start="535:21" pos:end="535:70"><expr pos:start="535:21" pos:end="535:69"><name pos:start="535:21" pos:end="535:48"><name pos:start="535:21" pos:end="535:23">ctx</name><operator pos:start="535:24" pos:end="535:25">-&gt;</operator><name pos:start="535:26" pos:end="535:48">cplx_estimation_trash_i</name></name> <operator pos:start="535:50" pos:end="535:51">+=</operator> <literal type="number" pos:start="535:53" pos:end="535:53">8</literal> <operator pos:start="535:55" pos:end="535:55">*</operator> <call pos:start="535:57" pos:end="535:69"><name pos:start="535:57" pos:end="535:65">get_bits1</name><argument_list pos:start="535:66" pos:end="535:69">(<argument pos:start="535:67" pos:end="535:68"><expr pos:start="535:67" pos:end="535:68"><name pos:start="535:67" pos:end="535:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="535:73" pos:end="535:83">/* sadct */</comment>

                    <expr_stmt pos:start="537:21" pos:end="537:70"><expr pos:start="537:21" pos:end="537:69"><name pos:start="537:21" pos:end="537:48"><name pos:start="537:21" pos:end="537:23">ctx</name><operator pos:start="537:24" pos:end="537:25">-&gt;</operator><name pos:start="537:26" pos:end="537:48">cplx_estimation_trash_p</name></name> <operator pos:start="537:50" pos:end="537:51">+=</operator> <literal type="number" pos:start="537:53" pos:end="537:53">8</literal> <operator pos:start="537:55" pos:end="537:55">*</operator> <call pos:start="537:57" pos:end="537:69"><name pos:start="537:57" pos:end="537:65">get_bits1</name><argument_list pos:start="537:66" pos:end="537:69">(<argument pos:start="537:67" pos:end="537:68"><expr pos:start="537:67" pos:end="537:68"><name pos:start="537:67" pos:end="537:68">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="537:73" pos:end="537:82">/* qpel */</comment>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="541:15" pos:end="547:42">else<block type="pseudo" pos:start="543:17" pos:end="547:42"><block_content pos:start="543:17" pos:end="547:42">

                <expr_stmt pos:start="543:17" pos:end="547:42"><expr pos:start="543:17" pos:end="547:41"><call pos:start="543:17" pos:end="547:41"><name pos:start="543:17" pos:end="543:22">av_log</name><argument_list pos:start="543:23" pos:end="547:41">(<argument pos:start="543:24" pos:end="543:31"><expr pos:start="543:24" pos:end="543:31"><name pos:start="543:24" pos:end="543:31"><name pos:start="543:24" pos:end="543:24">s</name><operator pos:start="543:25" pos:end="543:26">-&gt;</operator><name pos:start="543:27" pos:end="543:31">avctx</name></name></expr></argument>, <argument pos:start="543:34" pos:end="543:45"><expr pos:start="543:34" pos:end="543:45"><name pos:start="543:34" pos:end="543:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="545:24" pos:end="545:66"><expr pos:start="545:24" pos:end="545:66"><literal type="string" pos:start="545:24" pos:end="545:66">"Invalid Complexity estimation method %d\n"</literal></expr></argument>,

                       <argument pos:start="547:24" pos:end="547:40"><expr pos:start="547:24" pos:end="547:40"><name pos:start="547:24" pos:end="547:40">estimation_method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="549:11" pos:end="561:9">else <block pos:start="549:16" pos:end="561:9">{<block_content pos:start="553:1" pos:end="559:45">



<label pos:start="553:1" pos:end="553:12"><name pos:start="553:1" pos:end="553:11">no_cplx_est</name>:</label>

            <expr_stmt pos:start="555:13" pos:end="559:45"><expr pos:start="555:13" pos:end="559:44"><name pos:start="555:13" pos:end="555:40"><name pos:start="555:13" pos:end="555:15">ctx</name><operator pos:start="555:16" pos:end="555:17">-&gt;</operator><name pos:start="555:18" pos:end="555:40">cplx_estimation_trash_i</name></name> <operator pos:start="555:42" pos:end="555:42">=</operator>

            <name pos:start="557:13" pos:end="557:40"><name pos:start="557:13" pos:end="557:15">ctx</name><operator pos:start="557:16" pos:end="557:17">-&gt;</operator><name pos:start="557:18" pos:end="557:40">cplx_estimation_trash_p</name></name> <operator pos:start="557:42" pos:end="557:42">=</operator>

            <name pos:start="559:13" pos:end="559:40"><name pos:start="559:13" pos:end="559:15">ctx</name><operator pos:start="559:16" pos:end="559:17">-&gt;</operator><name pos:start="559:18" pos:end="559:40">cplx_estimation_trash_b</name></name> <operator pos:start="559:42" pos:end="559:42">=</operator> <literal type="number" pos:start="559:44" pos:end="559:44">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="565:9" pos:end="565:44"><expr pos:start="565:9" pos:end="565:43"><name pos:start="565:9" pos:end="565:26"><name pos:start="565:9" pos:end="565:11">ctx</name><operator pos:start="565:12" pos:end="565:13">-&gt;</operator><name pos:start="565:14" pos:end="565:26">resync_marker</name></name> <operator pos:start="565:28" pos:end="565:28">=</operator> <operator pos:start="565:30" pos:end="565:30">!</operator><call pos:start="565:31" pos:end="565:43"><name pos:start="565:31" pos:end="565:39">get_bits1</name><argument_list pos:start="565:40" pos:end="565:43">(<argument pos:start="565:41" pos:end="565:42"><expr pos:start="565:41" pos:end="565:42"><name pos:start="565:41" pos:end="565:42">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="565:46" pos:end="565:73">/* resync_marker_disabled */</comment>



        <expr_stmt pos:start="569:9" pos:end="569:45"><expr pos:start="569:9" pos:end="569:44"><name pos:start="569:9" pos:end="569:28"><name pos:start="569:9" pos:end="569:9">s</name><operator pos:start="569:10" pos:end="569:11">-&gt;</operator><name pos:start="569:12" pos:end="569:28">data_partitioning</name></name> <operator pos:start="569:30" pos:end="569:30">=</operator> <call pos:start="569:32" pos:end="569:44"><name pos:start="569:32" pos:end="569:40">get_bits1</name><argument_list pos:start="569:41" pos:end="569:44">(<argument pos:start="569:42" pos:end="569:43"><expr pos:start="569:42" pos:end="569:43"><name pos:start="569:42" pos:end="569:43">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="571:9" pos:end="573:38"><if pos:start="571:9" pos:end="573:38">if <condition pos:start="571:12" pos:end="571:33">(<expr pos:start="571:13" pos:end="571:32"><name pos:start="571:13" pos:end="571:32"><name pos:start="571:13" pos:end="571:13">s</name><operator pos:start="571:14" pos:end="571:15">-&gt;</operator><name pos:start="571:16" pos:end="571:32">data_partitioning</name></name></expr>)</condition><block type="pseudo" pos:start="573:13" pos:end="573:38"><block_content pos:start="573:13" pos:end="573:38">

            <expr_stmt pos:start="573:13" pos:end="573:38"><expr pos:start="573:13" pos:end="573:37"><name pos:start="573:13" pos:end="573:21"><name pos:start="573:13" pos:end="573:15">ctx</name><operator pos:start="573:16" pos:end="573:17">-&gt;</operator><name pos:start="573:18" pos:end="573:21">rvlc</name></name> <operator pos:start="573:23" pos:end="573:23">=</operator> <call pos:start="573:25" pos:end="573:37"><name pos:start="573:25" pos:end="573:33">get_bits1</name><argument_list pos:start="573:34" pos:end="573:37">(<argument pos:start="573:35" pos:end="573:36"><expr pos:start="573:35" pos:end="573:36"><name pos:start="573:35" pos:end="573:36">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="577:9" pos:end="601:9"><if pos:start="577:9" pos:end="597:9">if <condition pos:start="577:12" pos:end="577:27">(<expr pos:start="577:13" pos:end="577:26"><name pos:start="577:13" pos:end="577:21">vo_ver_id</name> <operator pos:start="577:23" pos:end="577:24">!=</operator> <literal type="number" pos:start="577:26" pos:end="577:26">1</literal></expr>)</condition> <block pos:start="577:29" pos:end="597:9">{<block_content pos:start="579:13" pos:end="595:65">

            <expr_stmt pos:start="579:13" pos:end="579:42"><expr pos:start="579:13" pos:end="579:41"><name pos:start="579:13" pos:end="579:25"><name pos:start="579:13" pos:end="579:15">ctx</name><operator pos:start="579:16" pos:end="579:17">-&gt;</operator><name pos:start="579:18" pos:end="579:25">new_pred</name></name> <operator pos:start="579:27" pos:end="579:27">=</operator> <call pos:start="579:29" pos:end="579:41"><name pos:start="579:29" pos:end="579:37">get_bits1</name><argument_list pos:start="579:38" pos:end="579:41">(<argument pos:start="579:39" pos:end="579:40"><expr pos:start="579:39" pos:end="579:40"><name pos:start="579:39" pos:end="579:40">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="581:13" pos:end="589:13"><if pos:start="581:13" pos:end="589:13">if <condition pos:start="581:16" pos:end="581:30">(<expr pos:start="581:17" pos:end="581:29"><name pos:start="581:17" pos:end="581:29"><name pos:start="581:17" pos:end="581:19">ctx</name><operator pos:start="581:20" pos:end="581:21">-&gt;</operator><name pos:start="581:22" pos:end="581:29">new_pred</name></name></expr>)</condition> <block pos:start="581:32" pos:end="589:13">{<block_content pos:start="583:17" pos:end="587:31">

                <expr_stmt pos:start="583:17" pos:end="583:75"><expr pos:start="583:17" pos:end="583:74"><call pos:start="583:17" pos:end="583:74"><name pos:start="583:17" pos:end="583:22">av_log</name><argument_list pos:start="583:23" pos:end="583:74">(<argument pos:start="583:24" pos:end="583:31"><expr pos:start="583:24" pos:end="583:31"><name pos:start="583:24" pos:end="583:31"><name pos:start="583:24" pos:end="583:24">s</name><operator pos:start="583:25" pos:end="583:26">-&gt;</operator><name pos:start="583:27" pos:end="583:31">avctx</name></name></expr></argument>, <argument pos:start="583:34" pos:end="583:45"><expr pos:start="583:34" pos:end="583:45"><name pos:start="583:34" pos:end="583:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="583:48" pos:end="583:73"><expr pos:start="583:48" pos:end="583:73"><literal type="string" pos:start="583:48" pos:end="583:73">"new pred not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="585:17" pos:end="585:33"><expr pos:start="585:17" pos:end="585:32"><call pos:start="585:17" pos:end="585:32"><name pos:start="585:17" pos:end="585:25">skip_bits</name><argument_list pos:start="585:26" pos:end="585:32">(<argument pos:start="585:27" pos:end="585:28"><expr pos:start="585:27" pos:end="585:28"><name pos:start="585:27" pos:end="585:28">gb</name></expr></argument>, <argument pos:start="585:31" pos:end="585:31"><expr pos:start="585:31" pos:end="585:31"><literal type="number" pos:start="585:31" pos:end="585:31">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="585:35" pos:end="585:71">/* requested upstream message type */</comment>

                <expr_stmt pos:start="587:17" pos:end="587:31"><expr pos:start="587:17" pos:end="587:30"><call pos:start="587:17" pos:end="587:30"><name pos:start="587:17" pos:end="587:26">skip_bits1</name><argument_list pos:start="587:27" pos:end="587:30">(<argument pos:start="587:28" pos:end="587:29"><expr pos:start="587:28" pos:end="587:29"><name pos:start="587:28" pos:end="587:29">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="587:35" pos:end="587:60">/* newpred segment type */</comment>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="591:13" pos:end="595:65"><if pos:start="591:13" pos:end="595:65">if <condition pos:start="591:16" pos:end="591:30">(<expr pos:start="591:17" pos:end="591:29"><call pos:start="591:17" pos:end="591:29"><name pos:start="591:17" pos:end="591:25">get_bits1</name><argument_list pos:start="591:26" pos:end="591:29">(<argument pos:start="591:27" pos:end="591:28"><expr pos:start="591:27" pos:end="591:28"><name pos:start="591:27" pos:end="591:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="593:17" pos:end="595:65"><block_content pos:start="593:17" pos:end="595:65"> <comment type="line" pos:start="591:32" pos:end="591:49">// reduced_res_vop</comment>

                <expr_stmt pos:start="593:17" pos:end="595:65"><expr pos:start="593:17" pos:end="595:64"><call pos:start="593:17" pos:end="595:64"><name pos:start="593:17" pos:end="593:22">av_log</name><argument_list pos:start="593:23" pos:end="595:64">(<argument pos:start="593:24" pos:end="593:31"><expr pos:start="593:24" pos:end="593:31"><name pos:start="593:24" pos:end="593:31"><name pos:start="593:24" pos:end="593:24">s</name><operator pos:start="593:25" pos:end="593:26">-&gt;</operator><name pos:start="593:27" pos:end="593:31">avctx</name></name></expr></argument>, <argument pos:start="593:34" pos:end="593:45"><expr pos:start="593:34" pos:end="593:45"><name pos:start="593:34" pos:end="593:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="595:24" pos:end="595:63"><expr pos:start="595:24" pos:end="595:63"><literal type="string" pos:start="595:24" pos:end="595:63">"reduced resolution VOP not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="597:11" pos:end="601:9">else <block pos:start="597:16" pos:end="601:9">{<block_content pos:start="599:13" pos:end="599:30">

            <expr_stmt pos:start="599:13" pos:end="599:30"><expr pos:start="599:13" pos:end="599:29"><name pos:start="599:13" pos:end="599:25"><name pos:start="599:13" pos:end="599:15">ctx</name><operator pos:start="599:16" pos:end="599:17">-&gt;</operator><name pos:start="599:18" pos:end="599:25">new_pred</name></name> <operator pos:start="599:27" pos:end="599:27">=</operator> <literal type="number" pos:start="599:29" pos:end="599:29">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="605:9" pos:end="605:41"><expr pos:start="605:9" pos:end="605:40"><name pos:start="605:9" pos:end="605:24"><name pos:start="605:9" pos:end="605:11">ctx</name><operator pos:start="605:12" pos:end="605:13">-&gt;</operator><name pos:start="605:14" pos:end="605:24">scalability</name></name> <operator pos:start="605:26" pos:end="605:26">=</operator> <call pos:start="605:28" pos:end="605:40"><name pos:start="605:28" pos:end="605:36">get_bits1</name><argument_list pos:start="605:37" pos:end="605:40">(<argument pos:start="605:38" pos:end="605:39"><expr pos:start="605:38" pos:end="605:39"><name pos:start="605:38" pos:end="605:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="609:9" pos:end="661:9"><if pos:start="609:9" pos:end="661:9">if <condition pos:start="609:12" pos:end="609:29">(<expr pos:start="609:13" pos:end="609:28"><name pos:start="609:13" pos:end="609:28"><name pos:start="609:13" pos:end="609:15">ctx</name><operator pos:start="609:16" pos:end="609:17">-&gt;</operator><name pos:start="609:18" pos:end="609:28">scalability</name></name></expr>)</condition> <block pos:start="609:31" pos:end="661:9">{<block_content pos:start="611:13" pos:end="655:78">

            <decl_stmt pos:start="611:13" pos:end="611:36"><decl pos:start="611:13" pos:end="611:35"><type pos:start="611:13" pos:end="611:25"><name pos:start="611:13" pos:end="611:25">GetBitContext</name></type> <name pos:start="611:27" pos:end="611:29">bak</name> <init pos:start="611:31" pos:end="611:35">= <expr pos:start="611:33" pos:end="611:35"><operator pos:start="611:33" pos:end="611:33">*</operator><name pos:start="611:34" pos:end="611:35">gb</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="613:13" pos:end="613:36"><decl pos:start="613:13" pos:end="613:35"><type pos:start="613:13" pos:end="613:15"><name pos:start="613:13" pos:end="613:15">int</name></type> <name pos:start="613:17" pos:end="613:35">h_sampling_factor_n</name></decl>;</decl_stmt>

            <decl_stmt pos:start="615:13" pos:end="615:36"><decl pos:start="615:13" pos:end="615:35"><type pos:start="615:13" pos:end="615:15"><name pos:start="615:13" pos:end="615:15">int</name></type> <name pos:start="615:17" pos:end="615:35">h_sampling_factor_m</name></decl>;</decl_stmt>

            <decl_stmt pos:start="617:13" pos:end="617:36"><decl pos:start="617:13" pos:end="617:35"><type pos:start="617:13" pos:end="617:15"><name pos:start="617:13" pos:end="617:15">int</name></type> <name pos:start="617:17" pos:end="617:35">v_sampling_factor_n</name></decl>;</decl_stmt>

            <decl_stmt pos:start="619:13" pos:end="619:36"><decl pos:start="619:13" pos:end="619:35"><type pos:start="619:13" pos:end="619:15"><name pos:start="619:13" pos:end="619:15">int</name></type> <name pos:start="619:17" pos:end="619:35">v_sampling_factor_m</name></decl>;</decl_stmt>



            <expr_stmt pos:start="623:13" pos:end="623:27"><expr pos:start="623:13" pos:end="623:26"><call pos:start="623:13" pos:end="623:26"><name pos:start="623:13" pos:end="623:22">skip_bits1</name><argument_list pos:start="623:23" pos:end="623:26">(<argument pos:start="623:24" pos:end="623:25"><expr pos:start="623:24" pos:end="623:25"><name pos:start="623:24" pos:end="623:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line" pos:start="623:32" pos:end="623:48">// hierarchy_type</comment>

            <expr_stmt pos:start="625:13" pos:end="625:29"><expr pos:start="625:13" pos:end="625:28"><call pos:start="625:13" pos:end="625:28"><name pos:start="625:13" pos:end="625:21">skip_bits</name><argument_list pos:start="625:22" pos:end="625:28">(<argument pos:start="625:23" pos:end="625:24"><expr pos:start="625:23" pos:end="625:24"><name pos:start="625:23" pos:end="625:24">gb</name></expr></argument>, <argument pos:start="625:27" pos:end="625:27"><expr pos:start="625:27" pos:end="625:27"><literal type="number" pos:start="625:27" pos:end="625:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="625:32" pos:end="625:49">/* ref_layer_id */</comment>

            <expr_stmt pos:start="627:13" pos:end="627:27"><expr pos:start="627:13" pos:end="627:26"><call pos:start="627:13" pos:end="627:26"><name pos:start="627:13" pos:end="627:22">skip_bits1</name><argument_list pos:start="627:23" pos:end="627:26">(<argument pos:start="627:24" pos:end="627:25"><expr pos:start="627:24" pos:end="627:25"><name pos:start="627:24" pos:end="627:25">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block" pos:start="627:32" pos:end="627:59">/* ref_layer_sampling_dir */</comment>

            <expr_stmt pos:start="629:13" pos:end="629:50"><expr pos:start="629:13" pos:end="629:49"><name pos:start="629:13" pos:end="629:31">h_sampling_factor_n</name> <operator pos:start="629:33" pos:end="629:33">=</operator> <call pos:start="629:35" pos:end="629:49"><name pos:start="629:35" pos:end="629:42">get_bits</name><argument_list pos:start="629:43" pos:end="629:49">(<argument pos:start="629:44" pos:end="629:45"><expr pos:start="629:44" pos:end="629:45"><name pos:start="629:44" pos:end="629:45">gb</name></expr></argument>, <argument pos:start="629:48" pos:end="629:48"><expr pos:start="629:48" pos:end="629:48"><literal type="number" pos:start="629:48" pos:end="629:48">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="631:13" pos:end="631:50"><expr pos:start="631:13" pos:end="631:49"><name pos:start="631:13" pos:end="631:31">h_sampling_factor_m</name> <operator pos:start="631:33" pos:end="631:33">=</operator> <call pos:start="631:35" pos:end="631:49"><name pos:start="631:35" pos:end="631:42">get_bits</name><argument_list pos:start="631:43" pos:end="631:49">(<argument pos:start="631:44" pos:end="631:45"><expr pos:start="631:44" pos:end="631:45"><name pos:start="631:44" pos:end="631:45">gb</name></expr></argument>, <argument pos:start="631:48" pos:end="631:48"><expr pos:start="631:48" pos:end="631:48"><literal type="number" pos:start="631:48" pos:end="631:48">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="633:13" pos:end="633:50"><expr pos:start="633:13" pos:end="633:49"><name pos:start="633:13" pos:end="633:31">v_sampling_factor_n</name> <operator pos:start="633:33" pos:end="633:33">=</operator> <call pos:start="633:35" pos:end="633:49"><name pos:start="633:35" pos:end="633:42">get_bits</name><argument_list pos:start="633:43" pos:end="633:49">(<argument pos:start="633:44" pos:end="633:45"><expr pos:start="633:44" pos:end="633:45"><name pos:start="633:44" pos:end="633:45">gb</name></expr></argument>, <argument pos:start="633:48" pos:end="633:48"><expr pos:start="633:48" pos:end="633:48"><literal type="number" pos:start="633:48" pos:end="633:48">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="635:13" pos:end="635:50"><expr pos:start="635:13" pos:end="635:49"><name pos:start="635:13" pos:end="635:31">v_sampling_factor_m</name> <operator pos:start="635:33" pos:end="635:33">=</operator> <call pos:start="635:35" pos:end="635:49"><name pos:start="635:35" pos:end="635:42">get_bits</name><argument_list pos:start="635:43" pos:end="635:49">(<argument pos:start="635:44" pos:end="635:45"><expr pos:start="635:44" pos:end="635:45"><name pos:start="635:44" pos:end="635:45">gb</name></expr></argument>, <argument pos:start="635:48" pos:end="635:48"><expr pos:start="635:48" pos:end="635:48"><literal type="number" pos:start="635:48" pos:end="635:48">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="637:13" pos:end="637:50"><expr pos:start="637:13" pos:end="637:49"><name pos:start="637:13" pos:end="637:33"><name pos:start="637:13" pos:end="637:15">ctx</name><operator pos:start="637:16" pos:end="637:17">-&gt;</operator><name pos:start="637:18" pos:end="637:33">enhancement_type</name></name> <operator pos:start="637:35" pos:end="637:35">=</operator> <call pos:start="637:37" pos:end="637:49"><name pos:start="637:37" pos:end="637:45">get_bits1</name><argument_list pos:start="637:46" pos:end="637:49">(<argument pos:start="637:47" pos:end="637:48"><expr pos:start="637:47" pos:end="637:48"><name pos:start="637:47" pos:end="637:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="641:13" pos:end="655:78"><if pos:start="641:13" pos:end="653:13">if <condition pos:start="641:16" pos:end="643:69">(<expr pos:start="641:17" pos:end="643:68"><name pos:start="641:17" pos:end="641:35">h_sampling_factor_n</name> <operator pos:start="641:37" pos:end="641:38">==</operator> <literal type="number" pos:start="641:40" pos:end="641:40">0</literal> <operator pos:start="641:42" pos:end="641:43">||</operator> <name pos:start="641:45" pos:end="641:63">h_sampling_factor_m</name> <operator pos:start="641:65" pos:end="641:66">==</operator> <literal type="number" pos:start="641:68" pos:end="641:68">0</literal> <operator pos:start="641:70" pos:end="641:71">||</operator>

                <name pos:start="643:17" pos:end="643:35">v_sampling_factor_n</name> <operator pos:start="643:37" pos:end="643:38">==</operator> <literal type="number" pos:start="643:40" pos:end="643:40">0</literal> <operator pos:start="643:42" pos:end="643:43">||</operator> <name pos:start="643:45" pos:end="643:63">v_sampling_factor_m</name> <operator pos:start="643:65" pos:end="643:66">==</operator> <literal type="number" pos:start="643:68" pos:end="643:68">0</literal></expr>)</condition> <block pos:start="643:71" pos:end="653:13">{<block_content pos:start="649:17" pos:end="651:37">

                <comment type="block" pos:start="645:17" pos:end="647:42">/* illegal scalability header (VERY broken encoder),

                 * trying to workaround */</comment>

                <expr_stmt pos:start="649:17" pos:end="649:37"><expr pos:start="649:17" pos:end="649:36"><name pos:start="649:17" pos:end="649:32"><name pos:start="649:17" pos:end="649:19">ctx</name><operator pos:start="649:20" pos:end="649:21">-&gt;</operator><name pos:start="649:22" pos:end="649:32">scalability</name></name> <operator pos:start="649:34" pos:end="649:34">=</operator> <literal type="number" pos:start="649:36" pos:end="649:36">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="651:17" pos:end="651:37"><expr pos:start="651:17" pos:end="651:36"><operator pos:start="651:17" pos:end="651:17">*</operator><name pos:start="651:18" pos:end="651:19">gb</name>            <operator pos:start="651:32" pos:end="651:32">=</operator> <name pos:start="651:34" pos:end="651:36">bak</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="653:15" pos:end="655:78">else<block type="pseudo" pos:start="655:17" pos:end="655:78"><block_content pos:start="655:17" pos:end="655:78">

                <expr_stmt pos:start="655:17" pos:end="655:78"><expr pos:start="655:17" pos:end="655:77"><call pos:start="655:17" pos:end="655:77"><name pos:start="655:17" pos:end="655:22">av_log</name><argument_list pos:start="655:23" pos:end="655:77">(<argument pos:start="655:24" pos:end="655:31"><expr pos:start="655:24" pos:end="655:31"><name pos:start="655:24" pos:end="655:31"><name pos:start="655:24" pos:end="655:24">s</name><operator pos:start="655:25" pos:end="655:26">-&gt;</operator><name pos:start="655:27" pos:end="655:31">avctx</name></name></expr></argument>, <argument pos:start="655:34" pos:end="655:45"><expr pos:start="655:34" pos:end="655:45"><name pos:start="655:34" pos:end="655:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="655:48" pos:end="655:76"><expr pos:start="655:48" pos:end="655:76"><literal type="string" pos:start="655:48" pos:end="655:76">"scalability not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <comment type="line" pos:start="659:13" pos:end="659:36">// bin shape stuff FIXME</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="667:5" pos:end="685:5"><if pos:start="667:5" pos:end="685:5">if <condition pos:start="667:8" pos:end="667:43">(<expr pos:start="667:9" pos:end="667:42"><name pos:start="667:9" pos:end="667:23"><name pos:start="667:9" pos:end="667:9">s</name><operator pos:start="667:10" pos:end="667:11">-&gt;</operator><name pos:start="667:12" pos:end="667:16">avctx</name><operator pos:start="667:17" pos:end="667:18">-&gt;</operator><name pos:start="667:19" pos:end="667:23">debug</name></name><operator pos:start="667:24" pos:end="667:24">&amp;</operator><name pos:start="667:25" pos:end="667:42">FF_DEBUG_PICT_INFO</name></expr>)</condition> <block pos:start="667:45" pos:end="685:5">{<block_content pos:start="669:9" pos:end="683:10">

        <expr_stmt pos:start="669:9" pos:end="683:10"><expr pos:start="669:9" pos:end="683:9"><call pos:start="669:9" pos:end="683:9"><name pos:start="669:9" pos:end="669:14">av_log</name><argument_list pos:start="669:15" pos:end="683:9">(<argument pos:start="669:16" pos:end="669:23"><expr pos:start="669:16" pos:end="669:23"><name pos:start="669:16" pos:end="669:23"><name pos:start="669:16" pos:end="669:16">s</name><operator pos:start="669:17" pos:end="669:18">-&gt;</operator><name pos:start="669:19" pos:end="669:23">avctx</name></name></expr></argument>, <argument pos:start="669:26" pos:end="669:37"><expr pos:start="669:26" pos:end="669:37"><name pos:start="669:26" pos:end="669:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="669:40" pos:end="669:95"><expr pos:start="669:40" pos:end="669:95"><literal type="string" pos:start="669:40" pos:end="669:95">"tb %d/%d, tincrbits:%d, qp_prec:%d, ps:%d,  %s%s%s%s\n"</literal></expr></argument>,

               <argument pos:start="671:16" pos:end="671:38"><expr pos:start="671:16" pos:end="671:38"><name pos:start="671:16" pos:end="671:38"><name pos:start="671:16" pos:end="671:16">s</name><operator pos:start="671:17" pos:end="671:18">-&gt;</operator><name pos:start="671:19" pos:end="671:23">avctx</name><operator pos:start="671:24" pos:end="671:25">-&gt;</operator><name pos:start="671:26" pos:end="671:34">framerate</name><operator pos:start="671:35" pos:end="671:35">.</operator><name pos:start="671:36" pos:end="671:38">den</name></name></expr></argument>, <argument pos:start="671:41" pos:end="671:63"><expr pos:start="671:41" pos:end="671:63"><name pos:start="671:41" pos:end="671:63"><name pos:start="671:41" pos:end="671:41">s</name><operator pos:start="671:42" pos:end="671:43">-&gt;</operator><name pos:start="671:44" pos:end="671:48">avctx</name><operator pos:start="671:49" pos:end="671:50">-&gt;</operator><name pos:start="671:51" pos:end="671:59">framerate</name><operator pos:start="671:60" pos:end="671:60">.</operator><name pos:start="671:61" pos:end="671:63">num</name></name></expr></argument>,

               <argument pos:start="673:16" pos:end="673:39"><expr pos:start="673:16" pos:end="673:39"><name pos:start="673:16" pos:end="673:39"><name pos:start="673:16" pos:end="673:18">ctx</name><operator pos:start="673:19" pos:end="673:20">-&gt;</operator><name pos:start="673:21" pos:end="673:39">time_increment_bits</name></name></expr></argument>,

               <argument pos:start="675:16" pos:end="675:33"><expr pos:start="675:16" pos:end="675:33"><name pos:start="675:16" pos:end="675:33"><name pos:start="675:16" pos:end="675:16">s</name><operator pos:start="675:17" pos:end="675:18">-&gt;</operator><name pos:start="675:19" pos:end="675:33">quant_precision</name></name></expr></argument>,

               <argument pos:start="677:16" pos:end="677:38"><expr pos:start="677:16" pos:end="677:38"><name pos:start="677:16" pos:end="677:38"><name pos:start="677:16" pos:end="677:16">s</name><operator pos:start="677:17" pos:end="677:18">-&gt;</operator><name pos:start="677:19" pos:end="677:38">progressive_sequence</name></name></expr></argument>,

               <argument pos:start="679:16" pos:end="679:52"><expr pos:start="679:16" pos:end="679:52"><ternary pos:start="679:16" pos:end="679:52"><condition pos:start="679:16" pos:end="679:33"><expr pos:start="679:16" pos:end="679:31"><name pos:start="679:16" pos:end="679:31"><name pos:start="679:16" pos:end="679:18">ctx</name><operator pos:start="679:19" pos:end="679:20">-&gt;</operator><name pos:start="679:21" pos:end="679:31">scalability</name></name></expr> ?</condition><then pos:start="679:35" pos:end="679:48"> <expr pos:start="679:35" pos:end="679:48"><literal type="string" pos:start="679:35" pos:end="679:48">"scalability "</literal></expr> </then><else pos:start="679:50" pos:end="679:52">:<expr pos:start="679:51" pos:end="679:52"><literal type="string" pos:start="679:51" pos:end="679:52">""</literal></expr></else></ternary></expr></argument> , <argument pos:start="679:56" pos:end="679:87"><expr pos:start="679:56" pos:end="679:87"><ternary pos:start="679:56" pos:end="679:87"><condition pos:start="679:56" pos:end="679:74"><expr pos:start="679:56" pos:end="679:72"><name pos:start="679:56" pos:end="679:72"><name pos:start="679:56" pos:end="679:56">s</name><operator pos:start="679:57" pos:end="679:58">-&gt;</operator><name pos:start="679:59" pos:end="679:72">quarter_sample</name></name></expr> ?</condition><then pos:start="679:76" pos:end="679:82"> <expr pos:start="679:76" pos:end="679:82"><literal type="string" pos:start="679:76" pos:end="679:82">"qpel "</literal></expr> </then><else pos:start="679:84" pos:end="679:87">: <expr pos:start="679:86" pos:end="679:87"><literal type="string" pos:start="679:86" pos:end="679:87">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="681:16" pos:end="681:55"><expr pos:start="681:16" pos:end="681:55"><ternary pos:start="681:16" pos:end="681:55"><condition pos:start="681:16" pos:end="681:37"><expr pos:start="681:16" pos:end="681:35"><name pos:start="681:16" pos:end="681:35"><name pos:start="681:16" pos:end="681:16">s</name><operator pos:start="681:17" pos:end="681:18">-&gt;</operator><name pos:start="681:19" pos:end="681:35">data_partitioning</name></name></expr> ?</condition><then pos:start="681:39" pos:end="681:50"> <expr pos:start="681:39" pos:end="681:50"><literal type="string" pos:start="681:39" pos:end="681:50">"partition "</literal></expr> </then><else pos:start="681:52" pos:end="681:55">: <expr pos:start="681:54" pos:end="681:55"><literal type="string" pos:start="681:54" pos:end="681:55">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="681:58" pos:end="681:81"><expr pos:start="681:58" pos:end="681:81"><ternary pos:start="681:58" pos:end="681:81"><condition pos:start="681:58" pos:end="681:68"><expr pos:start="681:58" pos:end="681:66"><name pos:start="681:58" pos:end="681:66"><name pos:start="681:58" pos:end="681:60">ctx</name><operator pos:start="681:61" pos:end="681:62">-&gt;</operator><name pos:start="681:63" pos:end="681:66">rvlc</name></name></expr> ?</condition><then pos:start="681:70" pos:end="681:76"> <expr pos:start="681:70" pos:end="681:76"><literal type="string" pos:start="681:70" pos:end="681:76">"rvlc "</literal></expr> </then><else pos:start="681:78" pos:end="681:81">: <expr pos:start="681:80" pos:end="681:81"><literal type="string" pos:start="681:80" pos:end="681:81">""</literal></expr></else></ternary></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="689:5" pos:end="689:13">return <expr pos:start="689:12" pos:end="689:12"><literal type="number" pos:start="689:12" pos:end="689:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
