<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20668.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">find_unused_picture</name><parameter_list pos:start="1:31" pos:end="1:61">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:45">MpegEncContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:60"><decl pos:start="1:51" pos:end="1:60"><type pos:start="1:51" pos:end="1:60"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:60">shared</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:14">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="29:5"><if pos:start="9:5" pos:end="19:5">if <condition pos:start="9:8" pos:end="9:15">(<expr pos:start="9:9" pos:end="9:14"><name pos:start="9:9" pos:end="9:14">shared</name></expr>)</condition> <block pos:start="9:17" pos:end="19:5">{<block_content pos:start="11:9" pos:end="17:9">

        <for pos:start="11:9" pos:end="17:9">for <control pos:start="11:13" pos:end="11:47">(<init pos:start="11:14" pos:end="11:19"><expr pos:start="11:14" pos:end="11:18"><name pos:start="11:14" pos:end="11:14">i</name> <operator pos:start="11:16" pos:end="11:16">=</operator> <literal type="number" pos:start="11:18" pos:end="11:18">0</literal></expr>;</init> <condition pos:start="11:21" pos:end="11:42"><expr pos:start="11:21" pos:end="11:41"><name pos:start="11:21" pos:end="11:21">i</name> <operator pos:start="11:23" pos:end="11:23">&lt;</operator> <name pos:start="11:25" pos:end="11:41">MAX_PICTURE_COUNT</name></expr>;</condition> <incr pos:start="11:44" pos:end="11:46"><expr pos:start="11:44" pos:end="11:46"><name pos:start="11:44" pos:end="11:44">i</name><operator pos:start="11:45" pos:end="11:46">++</operator></expr></incr>)</control> <block pos:start="11:49" pos:end="17:9">{<block_content pos:start="13:13" pos:end="15:25">

            <if_stmt pos:start="13:13" pos:end="15:25"><if pos:start="13:13" pos:end="15:25">if <condition pos:start="13:16" pos:end="13:48">(<expr pos:start="13:17" pos:end="13:47"><name pos:start="13:17" pos:end="13:29"><name pos:start="13:17" pos:end="13:17">s</name><operator pos:start="13:18" pos:end="13:19">-&gt;</operator><name pos:start="13:20" pos:end="13:26">picture</name><index pos:start="13:27" pos:end="13:29">[<expr pos:start="13:28" pos:end="13:28"><name pos:start="13:28" pos:end="13:28">i</name></expr>]</index></name><operator pos:start="13:30" pos:end="13:30">.</operator><name pos:start="13:31" pos:end="13:39"><name pos:start="13:31" pos:end="13:31">f</name><operator pos:start="13:32" pos:end="13:32">.</operator><name pos:start="13:33" pos:end="13:36">data</name><index pos:start="13:37" pos:end="13:39">[<expr pos:start="13:38" pos:end="13:38"><literal type="number" pos:start="13:38" pos:end="13:38">0</literal></expr>]</index></name> <operator pos:start="13:41" pos:end="13:42">==</operator> <name pos:start="13:44" pos:end="13:47">NULL</name></expr>)</condition><block type="pseudo" pos:start="15:17" pos:end="15:25"><block_content pos:start="15:17" pos:end="15:25">

                <return pos:start="15:17" pos:end="15:25">return <expr pos:start="15:24" pos:end="15:24"><name pos:start="15:24" pos:end="15:24">i</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="29:5">else <block pos:start="19:12" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:9">

        <for pos:start="21:9" pos:end="27:9">for <control pos:start="21:13" pos:end="21:47">(<init pos:start="21:14" pos:end="21:19"><expr pos:start="21:14" pos:end="21:18"><name pos:start="21:14" pos:end="21:14">i</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>;</init> <condition pos:start="21:21" pos:end="21:42"><expr pos:start="21:21" pos:end="21:41"><name pos:start="21:21" pos:end="21:21">i</name> <operator pos:start="21:23" pos:end="21:23">&lt;</operator> <name pos:start="21:25" pos:end="21:41">MAX_PICTURE_COUNT</name></expr>;</condition> <incr pos:start="21:44" pos:end="21:46"><expr pos:start="21:44" pos:end="21:46"><name pos:start="21:44" pos:end="21:44">i</name><operator pos:start="21:45" pos:end="21:46">++</operator></expr></incr>)</control> <block pos:start="21:49" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:25">

            <if_stmt pos:start="23:13" pos:end="25:25"><if pos:start="23:13" pos:end="25:25">if <condition pos:start="23:16" pos:end="23:49">(<expr pos:start="23:17" pos:end="23:48"><call pos:start="23:17" pos:end="23:48"><name pos:start="23:17" pos:end="23:29">pic_is_unused</name><argument_list pos:start="23:30" pos:end="23:48">(<argument pos:start="23:31" pos:end="23:31"><expr pos:start="23:31" pos:end="23:31"><name pos:start="23:31" pos:end="23:31">s</name></expr></argument>, <argument pos:start="23:34" pos:end="23:47"><expr pos:start="23:34" pos:end="23:47"><operator pos:start="23:34" pos:end="23:34">&amp;</operator><name pos:start="23:35" pos:end="23:47"><name pos:start="23:35" pos:end="23:35">s</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:44">picture</name><index pos:start="23:45" pos:end="23:47">[<expr pos:start="23:46" pos:end="23:46"><name pos:start="23:46" pos:end="23:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="25:17" pos:end="25:25"><block_content pos:start="25:17" pos:end="25:25">

                <return pos:start="25:17" pos:end="25:25">return <expr pos:start="25:24" pos:end="25:24"><name pos:start="25:24" pos:end="25:24">i</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="35:56"><expr pos:start="33:5" pos:end="35:55"><call pos:start="33:5" pos:end="35:55"><name pos:start="33:5" pos:end="33:10">av_log</name><argument_list pos:start="33:11" pos:end="35:55">(<argument pos:start="33:12" pos:end="33:19"><expr pos:start="33:12" pos:end="33:19"><name pos:start="33:12" pos:end="33:19"><name pos:start="33:12" pos:end="33:12">s</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:19">avctx</name></name></expr></argument>, <argument pos:start="33:22" pos:end="33:33"><expr pos:start="33:22" pos:end="33:33"><name pos:start="33:22" pos:end="33:33">AV_LOG_FATAL</name></expr></argument>,

           <argument pos:start="35:12" pos:end="35:54"><expr pos:start="35:12" pos:end="35:54"><literal type="string" pos:start="35:12" pos:end="35:54">"Internal error, picture buffer overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="37:5" pos:end="57:7">/* We could return -1, but the codec would crash trying to draw into a

     * non-existing frame anyway. This is safer than waiting for a random crash.

     * Also the return of this is never useful, an encoder must only allocate

     * as much as allowed in the specification. This has no relationship to how

     * much libavcodec could allocate (and MAX_PICTURE_COUNT is always large

     * enough for such valid streams).

     * Plus, a decoder has to check stream validity and remove frames if too

     * many reference frames are around. Waiting for "OOM" is not correct at

     * all. Similarly, missing reference frames have to be replaced by

     * interpolated/MC frames, anything else is a bug in the codec ...

     */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:12"><expr pos:start="59:5" pos:end="59:11"><call pos:start="59:5" pos:end="59:11"><name pos:start="59:5" pos:end="59:9">abort</name><argument_list pos:start="59:10" pos:end="59:11">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="61:5" pos:end="61:14">return <expr pos:start="61:12" pos:end="61:13"><operator pos:start="61:12" pos:end="61:12">-</operator><literal type="number" pos:start="61:13" pos:end="61:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
