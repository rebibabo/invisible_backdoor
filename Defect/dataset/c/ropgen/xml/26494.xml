<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26494.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:37"><name pos:start="1:1" pos:end="1:14">milkymist_init</name><argument_list pos:start="1:15" pos:end="1:37">(<argument pos:start="1:16" pos:end="1:36">MachineState *machine</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="267:1">{<block_content pos:start="5:5" pos:end="265:52">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:25">cpu_model</name> <init pos:start="5:27" pos:end="5:46">= <expr pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:35">machine</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:58">= <expr pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:41">machine</name><operator pos:start="7:42" pos:end="7:43">-&gt;</operator><name pos:start="7:44" pos:end="7:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:30">kernel_cmdline</name> <init pos:start="9:32" pos:end="9:56">= <expr pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:40">machine</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">initrd_filename</name> <init pos:start="11:33" pos:end="11:58">= <expr pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:41">machine</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">LM32CPU</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">CPULM32State</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">DriveInfo</name> <modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:58"><decl pos:start="21:5" pos:end="21:57"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:35">address_space_mem</name> <init pos:start="21:37" pos:end="21:57">= <expr pos:start="21:39" pos:end="21:57"><call pos:start="21:39" pos:end="21:57"><name pos:start="21:39" pos:end="21:55">get_system_memory</name><argument_list pos:start="21:56" pos:end="21:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:54"><decl pos:start="23:5" pos:end="23:53"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:28">phys_sdram</name> <init pos:start="23:30" pos:end="23:53">= <expr pos:start="23:32" pos:end="23:53"><call pos:start="23:32" pos:end="23:53"><name pos:start="23:32" pos:end="23:36">g_new</name><argument_list pos:start="23:37" pos:end="23:53">(<argument pos:start="23:38" pos:end="23:49"><expr pos:start="23:38" pos:end="23:49"><name pos:start="23:38" pos:end="23:49">MemoryRegion</name></expr></argument>, <argument pos:start="23:52" pos:end="23:52"><expr pos:start="23:52" pos:end="23:52"><literal type="number" pos:start="23:52" pos:end="23:52">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">qemu_irq</name></type> <name pos:start="25:14" pos:end="25:20"><name pos:start="25:14" pos:end="25:16">irq</name><index pos:start="25:17" pos:end="25:20">[<expr pos:start="25:18" pos:end="25:19"><literal type="number" pos:start="25:18" pos:end="25:19">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:10"><decl pos:start="27:5" pos:end="27:9"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:24"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:8">char</name> <modifier pos:start="29:10" pos:end="29:10">*</modifier></type><name pos:start="29:11" pos:end="29:23">bios_filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:26"><decl pos:start="31:5" pos:end="31:25"><type pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:13">ResetInfo</name> <modifier pos:start="31:15" pos:end="31:15">*</modifier></type><name pos:start="31:16" pos:end="31:25">reset_info</name></decl>;</decl_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:20">/* memory map */</comment>

    <decl_stmt pos:start="37:5" pos:end="37:37"><decl pos:start="37:5" pos:end="37:36"><type pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:10">hwaddr</name></type> <name pos:start="37:12" pos:end="37:21">flash_base</name>   <init pos:start="37:25" pos:end="37:36">= <expr pos:start="37:27" pos:end="37:36"><literal type="number" pos:start="37:27" pos:end="37:36">0x00000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:49"><decl pos:start="39:5" pos:end="39:48"><type pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:10">size_t</name></type> <name pos:start="39:12" pos:end="39:28">flash_sector_size</name>        <init pos:start="39:37" pos:end="39:48">= <expr pos:start="39:39" pos:end="39:48"><literal type="number" pos:start="39:39" pos:end="39:41">128</literal> <operator pos:start="39:43" pos:end="39:43">*</operator> <literal type="number" pos:start="39:45" pos:end="39:48">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:55"><decl pos:start="41:5" pos:end="41:54"><type pos:start="41:5" pos:end="41:10"><name pos:start="41:5" pos:end="41:10">size_t</name></type> <name pos:start="41:12" pos:end="41:21">flash_size</name>               <init pos:start="41:37" pos:end="41:54">= <expr pos:start="41:39" pos:end="41:54"><literal type="number" pos:start="41:39" pos:end="41:40">32</literal> <operator pos:start="41:42" pos:end="41:42">*</operator> <literal type="number" pos:start="41:44" pos:end="41:47">1024</literal> <operator pos:start="41:49" pos:end="41:49">*</operator> <literal type="number" pos:start="41:51" pos:end="41:54">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:37"><decl pos:start="43:5" pos:end="43:36"><type pos:start="43:5" pos:end="43:10"><name pos:start="43:5" pos:end="43:10">hwaddr</name></type> <name pos:start="43:12" pos:end="43:21">sdram_base</name>   <init pos:start="43:25" pos:end="43:36">= <expr pos:start="43:27" pos:end="43:36"><literal type="number" pos:start="43:27" pos:end="43:36">0x40000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:56"><decl pos:start="45:5" pos:end="45:55"><type pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:10">size_t</name></type> <name pos:start="45:12" pos:end="45:21">sdram_size</name>               <init pos:start="45:37" pos:end="45:55">= <expr pos:start="45:39" pos:end="45:55"><literal type="number" pos:start="45:39" pos:end="45:41">128</literal> <operator pos:start="45:43" pos:end="45:43">*</operator> <literal type="number" pos:start="45:45" pos:end="45:48">1024</literal> <operator pos:start="45:50" pos:end="45:50">*</operator> <literal type="number" pos:start="45:52" pos:end="45:55">1024</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="49:5" pos:end="49:49"><decl pos:start="49:5" pos:end="49:48"><type pos:start="49:5" pos:end="49:10"><name pos:start="49:5" pos:end="49:10">hwaddr</name></type> <name pos:start="49:12" pos:end="49:22">initrd_base</name>  <init pos:start="49:25" pos:end="49:48">= <expr pos:start="49:27" pos:end="49:48"><name pos:start="49:27" pos:end="49:36">sdram_base</name> <operator pos:start="49:38" pos:end="49:38">+</operator> <literal type="number" pos:start="49:40" pos:end="49:48">0x1002000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:49"><decl pos:start="51:5" pos:end="51:48"><type pos:start="51:5" pos:end="51:10"><name pos:start="51:5" pos:end="51:10">hwaddr</name></type> <name pos:start="51:12" pos:end="51:23">cmdline_base</name> <init pos:start="51:25" pos:end="51:48">= <expr pos:start="51:27" pos:end="51:48"><name pos:start="51:27" pos:end="51:36">sdram_base</name> <operator pos:start="51:38" pos:end="51:38">+</operator> <literal type="number" pos:start="51:40" pos:end="51:48">0x1000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:47"><decl pos:start="53:5" pos:end="53:46"><type pos:start="53:5" pos:end="53:10"><name pos:start="53:5" pos:end="53:10">size_t</name></type> <name pos:start="53:12" pos:end="53:21">initrd_max</name> <init pos:start="53:23" pos:end="53:46">= <expr pos:start="53:25" pos:end="53:46"><name pos:start="53:25" pos:end="53:34">sdram_size</name> <operator pos:start="53:36" pos:end="53:36">-</operator> <literal type="number" pos:start="53:38" pos:end="53:46">0x1002000</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:46"><expr pos:start="57:5" pos:end="57:45"><name pos:start="57:5" pos:end="57:14">reset_info</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <call pos:start="57:18" pos:end="57:45"><name pos:start="57:18" pos:end="57:26">g_malloc0</name><argument_list pos:start="57:27" pos:end="57:45">(<argument pos:start="57:28" pos:end="57:44"><expr pos:start="57:28" pos:end="57:44"><sizeof pos:start="57:28" pos:end="57:44">sizeof<argument_list pos:start="57:34" pos:end="57:44">(<argument pos:start="57:35" pos:end="57:43"><expr pos:start="57:35" pos:end="57:43"><name pos:start="57:35" pos:end="57:43">ResetInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:26">(<expr pos:start="61:9" pos:end="61:25"><name pos:start="61:9" pos:end="61:17">cpu_model</name> <operator pos:start="61:19" pos:end="61:20">==</operator> <name pos:start="61:22" pos:end="61:25">NULL</name></expr>)</condition> <block pos:start="61:28" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:32">

        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:17">cpu_model</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <literal type="string" pos:start="63:21" pos:end="63:31">"lm32-full"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><name pos:start="67:5" pos:end="67:7">cpu</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:34"><name pos:start="67:11" pos:end="67:23">cpu_lm32_init</name><argument_list pos:start="67:24" pos:end="67:34">(<argument pos:start="67:25" pos:end="67:33"><expr pos:start="67:25" pos:end="67:33"><name pos:start="67:25" pos:end="67:33">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:20">(<expr pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:11">cpu</name> <operator pos:start="69:13" pos:end="69:14">==</operator> <name pos:start="69:16" pos:end="69:19">NULL</name></expr>)</condition> <block pos:start="69:22" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:16">

        <expr_stmt pos:start="71:9" pos:end="71:70"><expr pos:start="71:9" pos:end="71:69"><call pos:start="71:9" pos:end="71:69"><name pos:start="71:9" pos:end="71:15">fprintf</name><argument_list pos:start="71:16" pos:end="71:69">(<argument pos:start="71:17" pos:end="71:22"><expr pos:start="71:17" pos:end="71:22"><name pos:start="71:17" pos:end="71:22">stderr</name></expr></argument>, <argument pos:start="71:25" pos:end="71:57"><expr pos:start="71:25" pos:end="71:57"><literal type="string" pos:start="71:25" pos:end="71:57">"qemu: unable to find CPU '%s'\n"</literal></expr></argument>, <argument pos:start="71:60" pos:end="71:68"><expr pos:start="71:60" pos:end="71:68"><name pos:start="71:60" pos:end="71:68">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:16"><expr pos:start="73:9" pos:end="73:15"><call pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:12">exit</name><argument_list pos:start="73:13" pos:end="73:15">(<argument pos:start="73:14" pos:end="73:14"><expr pos:start="73:14" pos:end="73:14"><literal type="number" pos:start="73:14" pos:end="73:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:20"><expr pos:start="79:5" pos:end="79:19"><name pos:start="79:5" pos:end="79:7">env</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <operator pos:start="79:11" pos:end="79:11">&amp;</operator><name pos:start="79:12" pos:end="79:19"><name pos:start="79:12" pos:end="79:14">cpu</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:19">env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:26"><expr pos:start="81:5" pos:end="81:25"><name pos:start="81:5" pos:end="81:19"><name pos:start="81:5" pos:end="81:14">reset_info</name><operator pos:start="81:15" pos:end="81:16">-&gt;</operator><name pos:start="81:17" pos:end="81:19">cpu</name></name> <operator pos:start="81:21" pos:end="81:21">=</operator> <name pos:start="81:23" pos:end="81:25">cpu</name></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:41"><expr pos:start="85:5" pos:end="85:40"><call pos:start="85:5" pos:end="85:40"><name pos:start="85:5" pos:end="85:32">cpu_lm32_set_phys_msb_ignore</name><argument_list pos:start="85:33" pos:end="85:40">(<argument pos:start="85:34" pos:end="85:36"><expr pos:start="85:34" pos:end="85:36"><name pos:start="85:34" pos:end="85:36">env</name></expr></argument>, <argument pos:start="85:39" pos:end="85:39"><expr pos:start="85:39" pos:end="85:39"><literal type="number" pos:start="85:39" pos:end="85:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="91:53"><expr pos:start="89:5" pos:end="91:52"><call pos:start="89:5" pos:end="91:52"><name pos:start="89:5" pos:end="89:40">memory_region_allocate_system_memory</name><argument_list pos:start="89:41" pos:end="91:52">(<argument pos:start="89:42" pos:end="89:51"><expr pos:start="89:42" pos:end="89:51"><name pos:start="89:42" pos:end="89:51">phys_sdram</name></expr></argument>, <argument pos:start="89:54" pos:end="89:57"><expr pos:start="89:54" pos:end="89:57"><name pos:start="89:54" pos:end="89:57">NULL</name></expr></argument>, <argument pos:start="89:60" pos:end="89:76"><expr pos:start="89:60" pos:end="89:76"><literal type="string" pos:start="89:60" pos:end="89:76">"milkymist.sdram"</literal></expr></argument>,

                                         <argument pos:start="91:42" pos:end="91:51"><expr pos:start="91:42" pos:end="91:51"><name pos:start="91:42" pos:end="91:51">sdram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:75"><expr pos:start="93:5" pos:end="93:74"><call pos:start="93:5" pos:end="93:74"><name pos:start="93:5" pos:end="93:31">memory_region_add_subregion</name><argument_list pos:start="93:32" pos:end="93:74">(<argument pos:start="93:33" pos:end="93:49"><expr pos:start="93:33" pos:end="93:49"><name pos:start="93:33" pos:end="93:49">address_space_mem</name></expr></argument>, <argument pos:start="93:52" pos:end="93:61"><expr pos:start="93:52" pos:end="93:61"><name pos:start="93:52" pos:end="93:61">sdram_base</name></expr></argument>, <argument pos:start="93:64" pos:end="93:73"><expr pos:start="93:64" pos:end="93:73"><name pos:start="93:64" pos:end="93:73">phys_sdram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:39"><expr pos:start="97:5" pos:end="97:38"><name pos:start="97:5" pos:end="97:9">dinfo</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <call pos:start="97:13" pos:end="97:38"><name pos:start="97:13" pos:end="97:21">drive_get</name><argument_list pos:start="97:22" pos:end="97:38">(<argument pos:start="97:23" pos:end="97:31"><expr pos:start="97:23" pos:end="97:31"><name pos:start="97:23" pos:end="97:31">IF_PFLASH</name></expr></argument>, <argument pos:start="97:34" pos:end="97:34"><expr pos:start="97:34" pos:end="97:34"><literal type="number" pos:start="97:34" pos:end="97:34">0</literal></expr></argument>, <argument pos:start="97:37" pos:end="97:37"><expr pos:start="97:37" pos:end="97:37"><literal type="number" pos:start="97:37" pos:end="97:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="99:5" pos:end="99:32">/* Numonyx JS28F256J3F105 */</comment>

    <expr_stmt pos:start="101:5" pos:end="107:56"><expr pos:start="101:5" pos:end="107:55"><call pos:start="101:5" pos:end="107:55"><name pos:start="101:5" pos:end="101:25">pflash_cfi01_register</name><argument_list pos:start="101:26" pos:end="107:55">(<argument pos:start="101:27" pos:end="101:36"><expr pos:start="101:27" pos:end="101:36"><name pos:start="101:27" pos:end="101:36">flash_base</name></expr></argument>, <argument pos:start="101:39" pos:end="101:42"><expr pos:start="101:39" pos:end="101:42"><name pos:start="101:39" pos:end="101:42">NULL</name></expr></argument>, <argument pos:start="101:45" pos:end="101:61"><expr pos:start="101:45" pos:end="101:61"><literal type="string" pos:start="101:45" pos:end="101:61">"milkymist.flash"</literal></expr></argument>, <argument pos:start="101:64" pos:end="101:73"><expr pos:start="101:64" pos:end="101:73"><name pos:start="101:64" pos:end="101:73">flash_size</name></expr></argument>,

                          <argument pos:start="103:27" pos:end="103:67"><expr pos:start="103:27" pos:end="103:67"><ternary pos:start="103:27" pos:end="103:67"><condition pos:start="103:27" pos:end="103:33"><expr pos:start="103:27" pos:end="103:31"><name pos:start="103:27" pos:end="103:31">dinfo</name></expr> ?</condition><then pos:start="103:35" pos:end="103:60"> <expr pos:start="103:35" pos:end="103:60"><call pos:start="103:35" pos:end="103:60"><name pos:start="103:35" pos:end="103:53">blk_by_legacy_dinfo</name><argument_list pos:start="103:54" pos:end="103:60">(<argument pos:start="103:55" pos:end="103:59"><expr pos:start="103:55" pos:end="103:59"><name pos:start="103:55" pos:end="103:59">dinfo</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="103:62" pos:end="103:67">: <expr pos:start="103:64" pos:end="103:67"><name pos:start="103:64" pos:end="103:67">NULL</name></expr></else></ternary></expr></argument>,

                          <argument pos:start="105:27" pos:end="105:43"><expr pos:start="105:27" pos:end="105:43"><name pos:start="105:27" pos:end="105:43">flash_sector_size</name></expr></argument>, <argument pos:start="105:46" pos:end="105:75"><expr pos:start="105:46" pos:end="105:75"><name pos:start="105:46" pos:end="105:55">flash_size</name> <operator pos:start="105:57" pos:end="105:57">/</operator> <name pos:start="105:59" pos:end="105:75">flash_sector_size</name></expr></argument>,

                          <argument pos:start="107:27" pos:end="107:27"><expr pos:start="107:27" pos:end="107:27"><literal type="number" pos:start="107:27" pos:end="107:27">2</literal></expr></argument>, <argument pos:start="107:30" pos:end="107:33"><expr pos:start="107:30" pos:end="107:33"><literal type="number" pos:start="107:30" pos:end="107:33">0x00</literal></expr></argument>, <argument pos:start="107:36" pos:end="107:39"><expr pos:start="107:36" pos:end="107:39"><literal type="number" pos:start="107:36" pos:end="107:39">0x89</literal></expr></argument>, <argument pos:start="107:42" pos:end="107:45"><expr pos:start="107:42" pos:end="107:45"><literal type="number" pos:start="107:42" pos:end="107:45">0x00</literal></expr></argument>, <argument pos:start="107:48" pos:end="107:51"><expr pos:start="107:48" pos:end="107:51"><literal type="number" pos:start="107:48" pos:end="107:51">0x1d</literal></expr></argument>, <argument pos:start="107:54" pos:end="107:54"><expr pos:start="107:54" pos:end="107:54"><literal type="number" pos:start="107:54" pos:end="107:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:26">/* create irq lines */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:79"><expr pos:start="113:5" pos:end="113:78"><name pos:start="113:5" pos:end="113:18"><name pos:start="113:5" pos:end="113:7">env</name><operator pos:start="113:8" pos:end="113:9">-&gt;</operator><name pos:start="113:10" pos:end="113:18">pic_state</name></name> <operator pos:start="113:20" pos:end="113:20">=</operator> <call pos:start="113:22" pos:end="113:78"><name pos:start="113:22" pos:end="113:34">lm32_pic_init</name><argument_list pos:start="113:35" pos:end="113:78">(<argument pos:start="113:36" pos:end="113:77"><expr pos:start="113:36" pos:end="113:77"><call pos:start="113:36" pos:end="113:77"><name pos:start="113:36" pos:end="113:52">qemu_allocate_irq</name><argument_list pos:start="113:53" pos:end="113:77">(<argument pos:start="113:54" pos:end="113:68"><expr pos:start="113:54" pos:end="113:68"><name pos:start="113:54" pos:end="113:68">cpu_irq_handler</name></expr></argument>, <argument pos:start="113:71" pos:end="113:73"><expr pos:start="113:71" pos:end="113:73"><name pos:start="113:71" pos:end="113:73">cpu</name></expr></argument>, <argument pos:start="113:76" pos:end="113:76"><expr pos:start="113:76" pos:end="113:76"><literal type="number" pos:start="113:76" pos:end="113:76">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="115:5" pos:end="119:5">for <control pos:start="115:9" pos:end="115:28">(<init pos:start="115:10" pos:end="115:15"><expr pos:start="115:10" pos:end="115:14"><name pos:start="115:10" pos:end="115:10">i</name> <operator pos:start="115:12" pos:end="115:12">=</operator> <literal type="number" pos:start="115:14" pos:end="115:14">0</literal></expr>;</init> <condition pos:start="115:17" pos:end="115:23"><expr pos:start="115:17" pos:end="115:22"><name pos:start="115:17" pos:end="115:17">i</name> <operator pos:start="115:19" pos:end="115:19">&lt;</operator> <literal type="number" pos:start="115:21" pos:end="115:22">32</literal></expr>;</condition> <incr pos:start="115:25" pos:end="115:27"><expr pos:start="115:25" pos:end="115:27"><name pos:start="115:25" pos:end="115:25">i</name><operator pos:start="115:26" pos:end="115:27">++</operator></expr></incr>)</control> <block pos:start="115:30" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:53">

        <expr_stmt pos:start="117:9" pos:end="117:53"><expr pos:start="117:9" pos:end="117:52"><name pos:start="117:9" pos:end="117:14"><name pos:start="117:9" pos:end="117:11">irq</name><index pos:start="117:12" pos:end="117:14">[<expr pos:start="117:13" pos:end="117:13"><name pos:start="117:13" pos:end="117:13">i</name></expr>]</index></name> <operator pos:start="117:16" pos:end="117:16">=</operator> <call pos:start="117:18" pos:end="117:52"><name pos:start="117:18" pos:end="117:33">qdev_get_gpio_in</name><argument_list pos:start="117:34" pos:end="117:52">(<argument pos:start="117:35" pos:end="117:48"><expr pos:start="117:35" pos:end="117:48"><name pos:start="117:35" pos:end="117:48"><name pos:start="117:35" pos:end="117:37">env</name><operator pos:start="117:38" pos:end="117:39">-&gt;</operator><name pos:start="117:40" pos:end="117:48">pic_state</name></name></expr></argument>, <argument pos:start="117:51" pos:end="117:51"><expr pos:start="117:51" pos:end="117:51"><name pos:start="117:51" pos:end="117:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="123:5" pos:end="123:23">/* load bios rom */</comment>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:26">(<expr pos:start="125:9" pos:end="125:25"><name pos:start="125:9" pos:end="125:17">bios_name</name> <operator pos:start="125:19" pos:end="125:20">==</operator> <name pos:start="125:22" pos:end="125:25">NULL</name></expr>)</condition> <block pos:start="125:28" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:34">

        <expr_stmt pos:start="127:9" pos:end="127:34"><expr pos:start="127:9" pos:end="127:33"><name pos:start="127:9" pos:end="127:17">bios_name</name> <operator pos:start="127:19" pos:end="127:19">=</operator> <name pos:start="127:21" pos:end="127:33">BIOS_FILENAME</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:67"><expr pos:start="131:5" pos:end="131:66"><name pos:start="131:5" pos:end="131:17">bios_filename</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <call pos:start="131:21" pos:end="131:66"><name pos:start="131:21" pos:end="131:34">qemu_find_file</name><argument_list pos:start="131:35" pos:end="131:66">(<argument pos:start="131:36" pos:end="131:54"><expr pos:start="131:36" pos:end="131:54"><name pos:start="131:36" pos:end="131:54">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="131:57" pos:end="131:65"><expr pos:start="131:57" pos:end="131:65"><name pos:start="131:57" pos:end="131:65">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="135:5" pos:end="139:5"><if pos:start="135:5" pos:end="139:5">if <condition pos:start="135:8" pos:end="135:22">(<expr pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:21">bios_filename</name></expr>)</condition> <block pos:start="135:24" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:67">

        <expr_stmt pos:start="137:9" pos:end="137:67"><expr pos:start="137:9" pos:end="137:66"><call pos:start="137:9" pos:end="137:66"><name pos:start="137:9" pos:end="137:27">load_image_targphys</name><argument_list pos:start="137:28" pos:end="137:66">(<argument pos:start="137:29" pos:end="137:41"><expr pos:start="137:29" pos:end="137:41"><name pos:start="137:29" pos:end="137:41">bios_filename</name></expr></argument>, <argument pos:start="137:44" pos:end="137:54"><expr pos:start="137:44" pos:end="137:54"><name pos:start="137:44" pos:end="137:54">BIOS_OFFSET</name></expr></argument>, <argument pos:start="137:57" pos:end="137:65"><expr pos:start="137:57" pos:end="137:65"><name pos:start="137:57" pos:end="137:65">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:43"><expr pos:start="143:5" pos:end="143:42"><name pos:start="143:5" pos:end="143:28"><name pos:start="143:5" pos:end="143:14">reset_info</name><operator pos:start="143:15" pos:end="143:16">-&gt;</operator><name pos:start="143:17" pos:end="143:28">bootstrap_pc</name></name> <operator pos:start="143:30" pos:end="143:30">=</operator> <name pos:start="143:32" pos:end="143:42">BIOS_OFFSET</name></expr>;</expr_stmt>



    <comment type="block" pos:start="147:5" pos:end="147:66">/* if no kernel is given no valid bios rom is a fatal error */</comment>

    <if_stmt pos:start="149:5" pos:end="157:5"><if pos:start="149:5" pos:end="157:5">if <condition pos:start="149:8" pos:end="149:73">(<expr pos:start="149:9" pos:end="149:72"><operator pos:start="149:9" pos:end="149:9">!</operator><name pos:start="149:10" pos:end="149:24">kernel_filename</name> <operator pos:start="149:26" pos:end="149:27">&amp;&amp;</operator> <operator pos:start="149:29" pos:end="149:29">!</operator><name pos:start="149:30" pos:end="149:34">dinfo</name> <operator pos:start="149:36" pos:end="149:37">&amp;&amp;</operator> <operator pos:start="149:39" pos:end="149:39">!</operator><name pos:start="149:40" pos:end="149:52">bios_filename</name> <operator pos:start="149:54" pos:end="149:55">&amp;&amp;</operator> <operator pos:start="149:57" pos:end="149:57">!</operator><call pos:start="149:58" pos:end="149:72"><name pos:start="149:58" pos:end="149:70">qtest_enabled</name><argument_list pos:start="149:71" pos:end="149:72">()</argument_list></call></expr>)</condition> <block pos:start="149:75" pos:end="157:5">{<block_content pos:start="151:9" pos:end="155:16">

        <expr_stmt pos:start="151:9" pos:end="153:27"><expr pos:start="151:9" pos:end="153:26"><call pos:start="151:9" pos:end="153:26"><name pos:start="151:9" pos:end="151:15">fprintf</name><argument_list pos:start="151:16" pos:end="153:26">(<argument pos:start="151:17" pos:end="151:22"><expr pos:start="151:17" pos:end="151:22"><name pos:start="151:17" pos:end="151:22">stderr</name></expr></argument>, <argument pos:start="151:25" pos:end="151:72"><expr pos:start="151:25" pos:end="151:72"><literal type="string" pos:start="151:25" pos:end="151:72">"qemu: could not load Milkymist One bios '%s'\n"</literal></expr></argument>,

                <argument pos:start="153:17" pos:end="153:25"><expr pos:start="153:17" pos:end="153:25"><name pos:start="153:17" pos:end="153:25">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:16"><expr pos:start="155:9" pos:end="155:15"><call pos:start="155:9" pos:end="155:15"><name pos:start="155:9" pos:end="155:12">exit</name><argument_list pos:start="155:13" pos:end="155:15">(<argument pos:start="155:14" pos:end="155:14"><expr pos:start="155:14" pos:end="155:14"><literal type="number" pos:start="155:14" pos:end="155:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:26"><expr pos:start="159:5" pos:end="159:25"><call pos:start="159:5" pos:end="159:25"><name pos:start="159:5" pos:end="159:10">g_free</name><argument_list pos:start="159:11" pos:end="159:25">(<argument pos:start="159:12" pos:end="159:24"><expr pos:start="159:12" pos:end="159:24"><name pos:start="159:12" pos:end="159:24">bios_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:46"><expr pos:start="163:5" pos:end="163:45"><call pos:start="163:5" pos:end="163:45"><name pos:start="163:5" pos:end="163:25">milkymist_uart_create</name><argument_list pos:start="163:26" pos:end="163:45">(<argument pos:start="163:27" pos:end="163:36"><expr pos:start="163:27" pos:end="163:36"><literal type="number" pos:start="163:27" pos:end="163:36">0x60000000</literal></expr></argument>, <argument pos:start="163:39" pos:end="163:44"><expr pos:start="163:39" pos:end="163:44"><name pos:start="163:39" pos:end="163:44"><name pos:start="163:39" pos:end="163:41">irq</name><index pos:start="163:42" pos:end="163:44">[<expr pos:start="163:43" pos:end="163:43"><literal type="number" pos:start="163:43" pos:end="163:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="167:58"><expr pos:start="165:5" pos:end="167:57"><call pos:start="165:5" pos:end="167:57"><name pos:start="165:5" pos:end="165:27">milkymist_sysctl_create</name><argument_list pos:start="165:28" pos:end="167:57">(<argument pos:start="165:29" pos:end="165:38"><expr pos:start="165:29" pos:end="165:38"><literal type="number" pos:start="165:29" pos:end="165:38">0x60001000</literal></expr></argument>, <argument pos:start="165:41" pos:end="165:46"><expr pos:start="165:41" pos:end="165:46"><name pos:start="165:41" pos:end="165:46"><name pos:start="165:41" pos:end="165:43">irq</name><index pos:start="165:44" pos:end="165:46">[<expr pos:start="165:45" pos:end="165:45"><literal type="number" pos:start="165:45" pos:end="165:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="165:49" pos:end="165:54"><expr pos:start="165:49" pos:end="165:54"><name pos:start="165:49" pos:end="165:54"><name pos:start="165:49" pos:end="165:51">irq</name><index pos:start="165:52" pos:end="165:54">[<expr pos:start="165:53" pos:end="165:53"><literal type="number" pos:start="165:53" pos:end="165:53">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="165:57" pos:end="165:62"><expr pos:start="165:57" pos:end="165:62"><name pos:start="165:57" pos:end="165:62"><name pos:start="165:57" pos:end="165:59">irq</name><index pos:start="165:60" pos:end="165:62">[<expr pos:start="165:61" pos:end="165:61"><literal type="number" pos:start="165:61" pos:end="165:61">3</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="167:13" pos:end="167:20"><expr pos:start="167:13" pos:end="167:20"><literal type="number" pos:start="167:13" pos:end="167:20">80000000</literal></expr></argument>, <argument pos:start="167:23" pos:end="167:32"><expr pos:start="167:23" pos:end="167:32"><literal type="number" pos:start="167:23" pos:end="167:32">0x10014d31</literal></expr></argument>, <argument pos:start="167:35" pos:end="167:44"><expr pos:start="167:35" pos:end="167:44"><literal type="number" pos:start="167:35" pos:end="167:44">0x0000041f</literal></expr></argument>, <argument pos:start="167:47" pos:end="167:56"><expr pos:start="167:47" pos:end="167:56"><literal type="number" pos:start="167:47" pos:end="167:56">0x00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:39"><expr pos:start="169:5" pos:end="169:38"><call pos:start="169:5" pos:end="169:38"><name pos:start="169:5" pos:end="169:26">milkymist_hpdmc_create</name><argument_list pos:start="169:27" pos:end="169:38">(<argument pos:start="169:28" pos:end="169:37"><expr pos:start="169:28" pos:end="169:37"><literal type="number" pos:start="169:28" pos:end="169:37">0x60002000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:63"><expr pos:start="171:5" pos:end="171:62"><call pos:start="171:5" pos:end="171:62"><name pos:start="171:5" pos:end="171:26">milkymist_vgafb_create</name><argument_list pos:start="171:27" pos:end="171:62">(<argument pos:start="171:28" pos:end="171:37"><expr pos:start="171:28" pos:end="171:37"><literal type="number" pos:start="171:28" pos:end="171:37">0x60003000</literal></expr></argument>, <argument pos:start="171:40" pos:end="171:49"><expr pos:start="171:40" pos:end="171:49"><literal type="number" pos:start="171:40" pos:end="171:49">0x40000000</literal></expr></argument>, <argument pos:start="171:52" pos:end="171:61"><expr pos:start="171:52" pos:end="171:61"><literal type="number" pos:start="171:52" pos:end="171:61">0x0fffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:41"><expr pos:start="173:5" pos:end="173:40"><call pos:start="173:5" pos:end="173:40"><name pos:start="173:5" pos:end="173:28">milkymist_memcard_create</name><argument_list pos:start="173:29" pos:end="173:40">(<argument pos:start="173:30" pos:end="173:39"><expr pos:start="173:30" pos:end="173:39"><literal type="number" pos:start="173:30" pos:end="173:39">0x60004000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:70"><expr pos:start="175:5" pos:end="175:69"><call pos:start="175:5" pos:end="175:69"><name pos:start="175:5" pos:end="175:25">milkymist_ac97_create</name><argument_list pos:start="175:26" pos:end="175:69">(<argument pos:start="175:27" pos:end="175:36"><expr pos:start="175:27" pos:end="175:36"><literal type="number" pos:start="175:27" pos:end="175:36">0x60005000</literal></expr></argument>, <argument pos:start="175:39" pos:end="175:44"><expr pos:start="175:39" pos:end="175:44"><name pos:start="175:39" pos:end="175:44"><name pos:start="175:39" pos:end="175:41">irq</name><index pos:start="175:42" pos:end="175:44">[<expr pos:start="175:43" pos:end="175:43"><literal type="number" pos:start="175:43" pos:end="175:43">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="175:47" pos:end="175:52"><expr pos:start="175:47" pos:end="175:52"><name pos:start="175:47" pos:end="175:52"><name pos:start="175:47" pos:end="175:49">irq</name><index pos:start="175:50" pos:end="175:52">[<expr pos:start="175:51" pos:end="175:51"><literal type="number" pos:start="175:51" pos:end="175:51">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="175:55" pos:end="175:60"><expr pos:start="175:55" pos:end="175:60"><name pos:start="175:55" pos:end="175:60"><name pos:start="175:55" pos:end="175:57">irq</name><index pos:start="175:58" pos:end="175:60">[<expr pos:start="175:59" pos:end="175:59"><literal type="number" pos:start="175:59" pos:end="175:59">6</literal></expr>]</index></name></expr></argument>, <argument pos:start="175:63" pos:end="175:68"><expr pos:start="175:63" pos:end="175:68"><name pos:start="175:63" pos:end="175:68"><name pos:start="175:63" pos:end="175:65">irq</name><index pos:start="175:66" pos:end="175:68">[<expr pos:start="175:67" pos:end="175:67"><literal type="number" pos:start="175:67" pos:end="175:67">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:46"><expr pos:start="177:5" pos:end="177:45"><call pos:start="177:5" pos:end="177:45"><name pos:start="177:5" pos:end="177:25">milkymist_pfpu_create</name><argument_list pos:start="177:26" pos:end="177:45">(<argument pos:start="177:27" pos:end="177:36"><expr pos:start="177:27" pos:end="177:36"><literal type="number" pos:start="177:27" pos:end="177:36">0x60006000</literal></expr></argument>, <argument pos:start="177:39" pos:end="177:44"><expr pos:start="177:39" pos:end="177:44"><name pos:start="177:39" pos:end="177:44"><name pos:start="177:39" pos:end="177:41">irq</name><index pos:start="177:42" pos:end="177:44">[<expr pos:start="177:43" pos:end="177:43"><literal type="number" pos:start="177:43" pos:end="177:43">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:46"><expr pos:start="179:5" pos:end="179:45"><call pos:start="179:5" pos:end="179:45"><name pos:start="179:5" pos:end="179:25">milkymist_tmu2_create</name><argument_list pos:start="179:26" pos:end="179:45">(<argument pos:start="179:27" pos:end="179:36"><expr pos:start="179:27" pos:end="179:36"><literal type="number" pos:start="179:27" pos:end="179:36">0x60007000</literal></expr></argument>, <argument pos:start="179:39" pos:end="179:44"><expr pos:start="179:39" pos:end="179:44"><name pos:start="179:39" pos:end="179:44"><name pos:start="179:39" pos:end="179:41">irq</name><index pos:start="179:42" pos:end="179:44">[<expr pos:start="179:43" pos:end="179:43"><literal type="number" pos:start="179:43" pos:end="179:43">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:72"><expr pos:start="181:5" pos:end="181:71"><call pos:start="181:5" pos:end="181:71"><name pos:start="181:5" pos:end="181:29">milkymist_minimac2_create</name><argument_list pos:start="181:30" pos:end="181:71">(<argument pos:start="181:31" pos:end="181:40"><expr pos:start="181:31" pos:end="181:40"><literal type="number" pos:start="181:31" pos:end="181:40">0x60008000</literal></expr></argument>, <argument pos:start="181:43" pos:end="181:52"><expr pos:start="181:43" pos:end="181:52"><literal type="number" pos:start="181:43" pos:end="181:52">0x30000000</literal></expr></argument>, <argument pos:start="181:55" pos:end="181:61"><expr pos:start="181:55" pos:end="181:61"><name pos:start="181:55" pos:end="181:61"><name pos:start="181:55" pos:end="181:57">irq</name><index pos:start="181:58" pos:end="181:61">[<expr pos:start="181:59" pos:end="181:60"><literal type="number" pos:start="181:59" pos:end="181:60">10</literal></expr>]</index></name></expr></argument>, <argument pos:start="181:64" pos:end="181:70"><expr pos:start="181:64" pos:end="181:70"><name pos:start="181:64" pos:end="181:70"><name pos:start="181:64" pos:end="181:66">irq</name><index pos:start="181:67" pos:end="181:70">[<expr pos:start="181:68" pos:end="181:69"><literal type="number" pos:start="181:68" pos:end="181:69">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="185:52"><expr pos:start="183:5" pos:end="185:51"><call pos:start="183:5" pos:end="185:51"><name pos:start="183:5" pos:end="183:28">milkymist_softusb_create</name><argument_list pos:start="183:29" pos:end="185:51">(<argument pos:start="183:30" pos:end="183:39"><expr pos:start="183:30" pos:end="183:39"><literal type="number" pos:start="183:30" pos:end="183:39">0x6000f000</literal></expr></argument>, <argument pos:start="183:42" pos:end="183:48"><expr pos:start="183:42" pos:end="183:48"><name pos:start="183:42" pos:end="183:48"><name pos:start="183:42" pos:end="183:44">irq</name><index pos:start="183:45" pos:end="183:48">[<expr pos:start="183:46" pos:end="183:47"><literal type="number" pos:start="183:46" pos:end="183:47">15</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="185:13" pos:end="185:22"><expr pos:start="185:13" pos:end="185:22"><literal type="number" pos:start="185:13" pos:end="185:22">0x20000000</literal></expr></argument>, <argument pos:start="185:25" pos:end="185:30"><expr pos:start="185:25" pos:end="185:30"><literal type="number" pos:start="185:25" pos:end="185:30">0x1000</literal></expr></argument>, <argument pos:start="185:33" pos:end="185:42"><expr pos:start="185:33" pos:end="185:42"><literal type="number" pos:start="185:33" pos:end="185:42">0x20020000</literal></expr></argument>, <argument pos:start="185:45" pos:end="185:50"><expr pos:start="185:45" pos:end="185:50"><literal type="number" pos:start="185:45" pos:end="185:50">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="189:5" pos:end="189:49">/* make sure juart isn't the first chardev */</comment>

    <expr_stmt pos:start="191:5" pos:end="191:41"><expr pos:start="191:5" pos:end="191:40"><name pos:start="191:5" pos:end="191:20"><name pos:start="191:5" pos:end="191:7">env</name><operator pos:start="191:8" pos:end="191:9">-&gt;</operator><name pos:start="191:10" pos:end="191:20">juart_state</name></name> <operator pos:start="191:22" pos:end="191:22">=</operator> <call pos:start="191:24" pos:end="191:40"><name pos:start="191:24" pos:end="191:38">lm32_juart_init</name><argument_list pos:start="191:39" pos:end="191:40">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="195:5" pos:end="233:5"><if pos:start="195:5" pos:end="233:5">if <condition pos:start="195:8" pos:end="195:24">(<expr pos:start="195:9" pos:end="195:23"><name pos:start="195:9" pos:end="195:23">kernel_filename</name></expr>)</condition> <block pos:start="195:26" pos:end="233:5">{<block_content pos:start="197:9" pos:end="231:9">

        <decl_stmt pos:start="197:9" pos:end="197:23"><decl pos:start="197:9" pos:end="197:22"><type pos:start="197:9" pos:end="197:16"><name pos:start="197:9" pos:end="197:16">uint64_t</name></type> <name pos:start="197:18" pos:end="197:22">entry</name></decl>;</decl_stmt>



        <comment type="block" pos:start="201:9" pos:end="201:41">/* Boots a kernel elf binary.  */</comment>

        <expr_stmt pos:start="203:9" pos:end="205:58"><expr pos:start="203:9" pos:end="205:57"><name pos:start="203:9" pos:end="203:19">kernel_size</name> <operator pos:start="203:21" pos:end="203:21">=</operator> <call pos:start="203:23" pos:end="205:57"><name pos:start="203:23" pos:end="203:30">load_elf</name><argument_list pos:start="203:31" pos:end="205:57">(<argument pos:start="203:32" pos:end="203:46"><expr pos:start="203:32" pos:end="203:46"><name pos:start="203:32" pos:end="203:46">kernel_filename</name></expr></argument>, <argument pos:start="203:49" pos:end="203:52"><expr pos:start="203:49" pos:end="203:52"><name pos:start="203:49" pos:end="203:52">NULL</name></expr></argument>, <argument pos:start="203:55" pos:end="203:58"><expr pos:start="203:55" pos:end="203:58"><name pos:start="203:55" pos:end="203:58">NULL</name></expr></argument>, <argument pos:start="203:61" pos:end="203:66"><expr pos:start="203:61" pos:end="203:66"><operator pos:start="203:61" pos:end="203:61">&amp;</operator><name pos:start="203:62" pos:end="203:66">entry</name></expr></argument>, <argument pos:start="203:69" pos:end="203:72"><expr pos:start="203:69" pos:end="203:72"><name pos:start="203:69" pos:end="203:72">NULL</name></expr></argument>, <argument pos:start="203:75" pos:end="203:78"><expr pos:start="203:75" pos:end="203:78"><name pos:start="203:75" pos:end="203:78">NULL</name></expr></argument>,

                               <argument pos:start="205:32" pos:end="205:32"><expr pos:start="205:32" pos:end="205:32"><literal type="number" pos:start="205:32" pos:end="205:32">1</literal></expr></argument>, <argument pos:start="205:35" pos:end="205:50"><expr pos:start="205:35" pos:end="205:50"><name pos:start="205:35" pos:end="205:50">EM_LATTICEMICO32</name></expr></argument>, <argument pos:start="205:53" pos:end="205:53"><expr pos:start="205:53" pos:end="205:53"><literal type="number" pos:start="205:53" pos:end="205:53">0</literal></expr></argument>, <argument pos:start="205:56" pos:end="205:56"><expr pos:start="205:56" pos:end="205:56"><literal type="number" pos:start="205:56" pos:end="205:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:41"><expr pos:start="207:9" pos:end="207:40"><name pos:start="207:9" pos:end="207:32"><name pos:start="207:9" pos:end="207:18">reset_info</name><operator pos:start="207:19" pos:end="207:20">-&gt;</operator><name pos:start="207:21" pos:end="207:32">bootstrap_pc</name></name> <operator pos:start="207:34" pos:end="207:34">=</operator> <name pos:start="207:36" pos:end="207:40">entry</name></expr>;</expr_stmt>



        <if_stmt pos:start="211:9" pos:end="219:9"><if pos:start="211:9" pos:end="219:9">if <condition pos:start="211:12" pos:end="211:28">(<expr pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:23">kernel_size</name> <operator pos:start="211:25" pos:end="211:25">&lt;</operator> <literal type="number" pos:start="211:27" pos:end="211:27">0</literal></expr>)</condition> <block pos:start="211:30" pos:end="219:9">{<block_content pos:start="213:13" pos:end="217:50">

            <expr_stmt pos:start="213:13" pos:end="215:58"><expr pos:start="213:13" pos:end="215:57"><name pos:start="213:13" pos:end="213:23">kernel_size</name> <operator pos:start="213:25" pos:end="213:25">=</operator> <call pos:start="213:27" pos:end="215:57"><name pos:start="213:27" pos:end="213:45">load_image_targphys</name><argument_list pos:start="213:46" pos:end="215:57">(<argument pos:start="213:47" pos:end="213:61"><expr pos:start="213:47" pos:end="213:61"><name pos:start="213:47" pos:end="213:61">kernel_filename</name></expr></argument>, <argument pos:start="213:64" pos:end="213:73"><expr pos:start="213:64" pos:end="213:73"><name pos:start="213:64" pos:end="213:73">sdram_base</name></expr></argument>,

                                              <argument pos:start="215:47" pos:end="215:56"><expr pos:start="215:47" pos:end="215:56"><name pos:start="215:47" pos:end="215:56">sdram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:50"><expr pos:start="217:13" pos:end="217:49"><name pos:start="217:13" pos:end="217:36"><name pos:start="217:13" pos:end="217:22">reset_info</name><operator pos:start="217:23" pos:end="217:24">-&gt;</operator><name pos:start="217:25" pos:end="217:36">bootstrap_pc</name></name> <operator pos:start="217:38" pos:end="217:38">=</operator> <name pos:start="217:40" pos:end="217:49">sdram_base</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="223:9" pos:end="231:9"><if pos:start="223:9" pos:end="231:9">if <condition pos:start="223:12" pos:end="223:28">(<expr pos:start="223:13" pos:end="223:27"><name pos:start="223:13" pos:end="223:23">kernel_size</name> <operator pos:start="223:25" pos:end="223:25">&lt;</operator> <literal type="number" pos:start="223:27" pos:end="223:27">0</literal></expr>)</condition> <block pos:start="223:30" pos:end="231:9">{<block_content pos:start="225:13" pos:end="229:20">

            <expr_stmt pos:start="225:13" pos:end="227:37"><expr pos:start="225:13" pos:end="227:36"><call pos:start="225:13" pos:end="227:36"><name pos:start="225:13" pos:end="225:19">fprintf</name><argument_list pos:start="225:20" pos:end="227:36">(<argument pos:start="225:21" pos:end="225:26"><expr pos:start="225:21" pos:end="225:26"><name pos:start="225:21" pos:end="225:26">stderr</name></expr></argument>, <argument pos:start="225:29" pos:end="225:64"><expr pos:start="225:29" pos:end="225:64"><literal type="string" pos:start="225:29" pos:end="225:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="227:21" pos:end="227:35"><expr pos:start="227:21" pos:end="227:35"><name pos:start="227:21" pos:end="227:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:20"><expr pos:start="229:13" pos:end="229:19"><call pos:start="229:13" pos:end="229:19"><name pos:start="229:13" pos:end="229:16">exit</name><argument_list pos:start="229:17" pos:end="229:19">(<argument pos:start="229:18" pos:end="229:18"><expr pos:start="229:18" pos:end="229:18"><literal type="number" pos:start="229:18" pos:end="229:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="237:5" pos:end="245:5"><if pos:start="237:5" pos:end="245:5">if <condition pos:start="237:8" pos:end="237:49">(<expr pos:start="237:9" pos:end="237:48"><name pos:start="237:9" pos:end="237:22">kernel_cmdline</name> <operator pos:start="237:24" pos:end="237:25">&amp;&amp;</operator> <call pos:start="237:27" pos:end="237:48"><name pos:start="237:27" pos:end="237:32">strlen</name><argument_list pos:start="237:33" pos:end="237:48">(<argument pos:start="237:34" pos:end="237:47"><expr pos:start="237:34" pos:end="237:47"><name pos:start="237:34" pos:end="237:47">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="237:51" pos:end="245:5">{<block_content pos:start="239:9" pos:end="243:58">

        <expr_stmt pos:start="239:9" pos:end="241:32"><expr pos:start="239:9" pos:end="241:31"><call pos:start="239:9" pos:end="241:31"><name pos:start="239:9" pos:end="239:24">pstrcpy_targphys</name><argument_list pos:start="239:25" pos:end="241:31">(<argument pos:start="239:26" pos:end="239:34"><expr pos:start="239:26" pos:end="239:34"><literal type="string" pos:start="239:26" pos:end="239:34">"cmdline"</literal></expr></argument>, <argument pos:start="239:37" pos:end="239:48"><expr pos:start="239:37" pos:end="239:48"><name pos:start="239:37" pos:end="239:48">cmdline_base</name></expr></argument>, <argument pos:start="239:51" pos:end="239:66"><expr pos:start="239:51" pos:end="239:66"><name pos:start="239:51" pos:end="239:66">TARGET_PAGE_SIZE</name></expr></argument>,

                <argument pos:start="241:17" pos:end="241:30"><expr pos:start="241:17" pos:end="241:30"><name pos:start="241:17" pos:end="241:30">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:58"><expr pos:start="243:9" pos:end="243:57"><name pos:start="243:9" pos:end="243:32"><name pos:start="243:9" pos:end="243:18">reset_info</name><operator pos:start="243:19" pos:end="243:20">-&gt;</operator><name pos:start="243:21" pos:end="243:32">cmdline_base</name></name> <operator pos:start="243:34" pos:end="243:34">=</operator> <operator pos:start="243:36" pos:end="243:36">(</operator><name pos:start="243:37" pos:end="243:44">uint32_t</name><operator pos:start="243:45" pos:end="243:45">)</operator><name pos:start="243:46" pos:end="243:57">cmdline_base</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="249:5" pos:end="261:5"><if pos:start="249:5" pos:end="261:5">if <condition pos:start="249:8" pos:end="249:24">(<expr pos:start="249:9" pos:end="249:23"><name pos:start="249:9" pos:end="249:23">initrd_filename</name></expr>)</condition> <block pos:start="249:26" pos:end="261:5">{<block_content pos:start="251:9" pos:end="259:56">

        <decl_stmt pos:start="251:9" pos:end="251:27"><decl pos:start="251:9" pos:end="251:26"><type pos:start="251:9" pos:end="251:14"><name pos:start="251:9" pos:end="251:14">size_t</name></type> <name pos:start="251:16" pos:end="251:26">initrd_size</name></decl>;</decl_stmt>

        <expr_stmt pos:start="253:9" pos:end="255:28"><expr pos:start="253:9" pos:end="255:27"><name pos:start="253:9" pos:end="253:19">initrd_size</name> <operator pos:start="253:21" pos:end="253:21">=</operator> <call pos:start="253:23" pos:end="255:27"><name pos:start="253:23" pos:end="253:41">load_image_targphys</name><argument_list pos:start="253:42" pos:end="255:27">(<argument pos:start="253:43" pos:end="253:57"><expr pos:start="253:43" pos:end="253:57"><name pos:start="253:43" pos:end="253:57">initrd_filename</name></expr></argument>, <argument pos:start="253:60" pos:end="253:70"><expr pos:start="253:60" pos:end="253:70"><name pos:start="253:60" pos:end="253:70">initrd_base</name></expr></argument>,

                <argument pos:start="255:17" pos:end="255:26"><expr pos:start="255:17" pos:end="255:26"><name pos:start="255:17" pos:end="255:26">initrd_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:56"><expr pos:start="257:9" pos:end="257:55"><name pos:start="257:9" pos:end="257:31"><name pos:start="257:9" pos:end="257:18">reset_info</name><operator pos:start="257:19" pos:end="257:20">-&gt;</operator><name pos:start="257:21" pos:end="257:31">initrd_base</name></name> <operator pos:start="257:33" pos:end="257:33">=</operator> <operator pos:start="257:35" pos:end="257:35">(</operator><name pos:start="257:36" pos:end="257:43">uint32_t</name><operator pos:start="257:44" pos:end="257:44">)</operator><name pos:start="257:45" pos:end="257:55">initrd_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:56"><expr pos:start="259:9" pos:end="259:55"><name pos:start="259:9" pos:end="259:31"><name pos:start="259:9" pos:end="259:18">reset_info</name><operator pos:start="259:19" pos:end="259:20">-&gt;</operator><name pos:start="259:21" pos:end="259:31">initrd_size</name></name> <operator pos:start="259:33" pos:end="259:33">=</operator> <operator pos:start="259:35" pos:end="259:35">(</operator><name pos:start="259:36" pos:end="259:43">uint32_t</name><operator pos:start="259:44" pos:end="259:44">)</operator><name pos:start="259:45" pos:end="259:55">initrd_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="265:5" pos:end="265:52"><expr pos:start="265:5" pos:end="265:51"><call pos:start="265:5" pos:end="265:51"><name pos:start="265:5" pos:end="265:23">qemu_register_reset</name><argument_list pos:start="265:24" pos:end="265:51">(<argument pos:start="265:25" pos:end="265:38"><expr pos:start="265:25" pos:end="265:38"><name pos:start="265:25" pos:end="265:38">main_cpu_reset</name></expr></argument>, <argument pos:start="265:41" pos:end="265:50"><expr pos:start="265:41" pos:end="265:50"><name pos:start="265:41" pos:end="265:50">reset_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
