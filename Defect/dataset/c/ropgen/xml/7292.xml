<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7292.c" pos:tabs="8"><function pos:start="1:1" pos:end="80:1"><type pos:start="1:1" pos:end="1:16"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:16">coroutine_fn</name></type> <name pos:start="1:18" pos:end="1:30">bdrv_co_flush</name><parameter_list pos:start="1:31" pos:end="1:52">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:49"><name pos:start="1:32" pos:end="1:47">BlockDriverState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">bs</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="80:1">{<block_content pos:start="3:5" pos:end="79:15">
    <decl_stmt pos:start="3:5" pos:end="3:12"><decl pos:start="3:5" pos:end="3:11"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:27"><decl pos:start="4:5" pos:end="4:26"><type pos:start="4:5" pos:end="4:22"><name pos:start="4:5" pos:end="4:22">BdrvTrackedRequest</name></type> <name pos:start="4:24" pos:end="4:26">req</name></decl>;</decl_stmt>
    <if_stmt pos:start="5:5" pos:end="8:5"><if pos:start="5:5" pos:end="8:5">if <condition pos:start="5:8" pos:end="6:23">(<expr pos:start="5:9" pos:end="6:22"><operator pos:start="5:9" pos:end="5:9">!</operator><name pos:start="5:10" pos:end="5:11">bs</name> <operator pos:start="5:13" pos:end="5:14">||</operator> <operator pos:start="5:16" pos:end="5:16">!</operator><call pos:start="5:17" pos:end="5:36"><name pos:start="5:17" pos:end="5:32">bdrv_is_inserted</name><argument_list pos:start="5:33" pos:end="5:36">(<argument pos:start="5:34" pos:end="5:35"><expr pos:start="5:34" pos:end="5:35"><name pos:start="5:34" pos:end="5:35">bs</name></expr></argument>)</argument_list></call> <operator pos:start="5:38" pos:end="5:39">||</operator> <call pos:start="5:41" pos:end="5:61"><name pos:start="5:41" pos:end="5:57">bdrv_is_read_only</name><argument_list pos:start="5:58" pos:end="5:61">(<argument pos:start="5:59" pos:end="5:60"><expr pos:start="5:59" pos:end="5:60"><name pos:start="5:59" pos:end="5:60">bs</name></expr></argument>)</argument_list></call> <operator pos:start="5:63" pos:end="5:64">||</operator>
        <call pos:start="6:9" pos:end="6:22"><name pos:start="6:9" pos:end="6:18">bdrv_is_sg</name><argument_list pos:start="6:19" pos:end="6:22">(<argument pos:start="6:20" pos:end="6:21"><expr pos:start="6:20" pos:end="6:21"><name pos:start="6:20" pos:end="6:21">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="6:25" pos:end="8:5">{<block_content pos:start="7:9" pos:end="7:17">
        <return pos:start="7:9" pos:end="7:17">return <expr pos:start="7:16" pos:end="7:16"><literal type="number" pos:start="7:16" pos:end="7:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:62"><expr pos:start="9:5" pos:end="9:61"><call pos:start="9:5" pos:end="9:61"><name pos:start="9:5" pos:end="9:25">tracked_request_begin</name><argument_list pos:start="9:26" pos:end="9:61">(<argument pos:start="9:27" pos:end="9:30"><expr pos:start="9:27" pos:end="9:30"><operator pos:start="9:27" pos:end="9:27">&amp;</operator><name pos:start="9:28" pos:end="9:30">req</name></expr></argument>, <argument pos:start="9:33" pos:end="9:34"><expr pos:start="9:33" pos:end="9:34"><name pos:start="9:33" pos:end="9:34">bs</name></expr></argument>, <argument pos:start="9:37" pos:end="9:37"><expr pos:start="9:37" pos:end="9:37"><literal type="number" pos:start="9:37" pos:end="9:37">0</literal></expr></argument>, <argument pos:start="9:40" pos:end="9:40"><expr pos:start="9:40" pos:end="9:40"><literal type="number" pos:start="9:40" pos:end="9:40">0</literal></expr></argument>, <argument pos:start="9:43" pos:end="9:60"><expr pos:start="9:43" pos:end="9:60"><name pos:start="9:43" pos:end="9:60">BDRV_TRACKED_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:36"><decl pos:start="10:5" pos:end="10:35"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:19">current_gen</name> <init pos:start="10:21" pos:end="10:35">= <expr pos:start="10:23" pos:end="10:35"><name pos:start="10:23" pos:end="10:35"><name pos:start="10:23" pos:end="10:24">bs</name><operator pos:start="10:25" pos:end="10:26">-&gt;</operator><name pos:start="10:27" pos:end="10:35">write_gen</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="11:5" pos:end="11:55">/* Wait until any previous flushes are completed */</comment>
    <while pos:start="12:5" pos:end="14:5">while <condition pos:start="12:11" pos:end="12:52">(<expr pos:start="12:12" pos:end="12:51"><name pos:start="12:12" pos:end="12:32"><name pos:start="12:12" pos:end="12:13">bs</name><operator pos:start="12:14" pos:end="12:15">-&gt;</operator><name pos:start="12:16" pos:end="12:32">flush_started_gen</name></name> <operator pos:start="12:34" pos:end="12:35">!=</operator> <name pos:start="12:37" pos:end="12:51"><name pos:start="12:37" pos:end="12:38">bs</name><operator pos:start="12:39" pos:end="12:40">-&gt;</operator><name pos:start="12:41" pos:end="12:51">flushed_gen</name></name></expr>)</condition> <block pos:start="12:54" pos:end="14:5">{<block_content pos:start="13:9" pos:end="13:45">
        <expr_stmt pos:start="13:9" pos:end="13:45"><expr pos:start="13:9" pos:end="13:44"><call pos:start="13:9" pos:end="13:44"><name pos:start="13:9" pos:end="13:26">qemu_co_queue_wait</name><argument_list pos:start="13:27" pos:end="13:44">(<argument pos:start="13:28" pos:end="13:43"><expr pos:start="13:28" pos:end="13:43"><operator pos:start="13:28" pos:end="13:28">&amp;</operator><name pos:start="13:29" pos:end="13:43"><name pos:start="13:29" pos:end="13:30">bs</name><operator pos:start="13:31" pos:end="13:32">-&gt;</operator><name pos:start="13:33" pos:end="13:43">flush_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="15:5" pos:end="15:40"><expr pos:start="15:5" pos:end="15:39"><name pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:6">bs</name><operator pos:start="15:7" pos:end="15:8">-&gt;</operator><name pos:start="15:9" pos:end="15:25">flush_started_gen</name></name> <operator pos:start="15:27" pos:end="15:27">=</operator> <name pos:start="15:29" pos:end="15:39">current_gen</name></expr>;</expr_stmt>
    <comment type="block" pos:start="16:5" pos:end="16:62">/* Write back all layers by calling one driver function */</comment>
    <if_stmt pos:start="17:5" pos:end="20:5"><if pos:start="17:5" pos:end="20:5">if <condition pos:start="17:8" pos:end="17:31">(<expr pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:30"><name pos:start="17:9" pos:end="17:10">bs</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:15">drv</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:30">bdrv_co_flush</name></name></expr>)</condition> <block pos:start="17:33" pos:end="20:5">{<block_content pos:start="18:9" pos:end="19:17">
        <expr_stmt pos:start="18:9" pos:end="18:41"><expr pos:start="18:9" pos:end="18:40"><name pos:start="18:9" pos:end="18:11">ret</name> <operator pos:start="18:13" pos:end="18:13">=</operator> <call pos:start="18:15" pos:end="18:40"><name pos:start="18:15" pos:end="18:36"><name pos:start="18:15" pos:end="18:16">bs</name><operator pos:start="18:17" pos:end="18:18">-&gt;</operator><name pos:start="18:19" pos:end="18:21">drv</name><operator pos:start="18:22" pos:end="18:23">-&gt;</operator><name pos:start="18:24" pos:end="18:36">bdrv_co_flush</name></name><argument_list pos:start="18:37" pos:end="18:40">(<argument pos:start="18:38" pos:end="18:39"><expr pos:start="18:38" pos:end="18:39"><name pos:start="18:38" pos:end="18:39">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="19:9" pos:end="19:17">goto <name pos:start="19:14" pos:end="19:16">out</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="21:5" pos:end="21:65">/* Write back cached data to the OS even with cache=unsafe */</comment>
    <expr_stmt pos:start="22:5" pos:end="22:47"><expr pos:start="22:5" pos:end="22:46"><call pos:start="22:5" pos:end="22:46"><name pos:start="22:5" pos:end="22:16">BLKDBG_EVENT</name><argument_list pos:start="22:17" pos:end="22:46">(<argument pos:start="22:18" pos:end="22:25"><expr pos:start="22:18" pos:end="22:25"><name pos:start="22:18" pos:end="22:25"><name pos:start="22:18" pos:end="22:19">bs</name><operator pos:start="22:20" pos:end="22:21">-&gt;</operator><name pos:start="22:22" pos:end="22:25">file</name></name></expr></argument>, <argument pos:start="22:28" pos:end="22:45"><expr pos:start="22:28" pos:end="22:45"><name pos:start="22:28" pos:end="22:45">BLKDBG_FLUSH_TO_OS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="23:5" pos:end="28:5"><if pos:start="23:5" pos:end="28:5">if <condition pos:start="23:8" pos:end="23:37">(<expr pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:10">bs</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:15">drv</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:36">bdrv_co_flush_to_os</name></name></expr>)</condition> <block pos:start="23:39" pos:end="28:5">{<block_content pos:start="24:9" pos:end="27:9">
        <expr_stmt pos:start="24:9" pos:end="24:47"><expr pos:start="24:9" pos:end="24:46"><name pos:start="24:9" pos:end="24:11">ret</name> <operator pos:start="24:13" pos:end="24:13">=</operator> <call pos:start="24:15" pos:end="24:46"><name pos:start="24:15" pos:end="24:42"><name pos:start="24:15" pos:end="24:16">bs</name><operator pos:start="24:17" pos:end="24:18">-&gt;</operator><name pos:start="24:19" pos:end="24:21">drv</name><operator pos:start="24:22" pos:end="24:23">-&gt;</operator><name pos:start="24:24" pos:end="24:42">bdrv_co_flush_to_os</name></name><argument_list pos:start="24:43" pos:end="24:46">(<argument pos:start="24:44" pos:end="24:45"><expr pos:start="24:44" pos:end="24:45"><name pos:start="24:44" pos:end="24:45">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="25:9" pos:end="27:9"><if pos:start="25:9" pos:end="27:9">if <condition pos:start="25:12" pos:end="25:20">(<expr pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:17">&lt;</operator> <literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr>)</condition> <block pos:start="25:22" pos:end="27:9">{<block_content pos:start="26:13" pos:end="26:21">
            <goto pos:start="26:13" pos:end="26:21">goto <name pos:start="26:18" pos:end="26:20">out</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="29:5" pos:end="29:67">/* But don't actually force it to the disk with cache=unsafe */</comment>
    <if_stmt pos:start="30:5" pos:end="32:5"><if pos:start="30:5" pos:end="32:5">if <condition pos:start="30:8" pos:end="30:41">(<expr pos:start="30:9" pos:end="30:40"><name pos:start="30:9" pos:end="30:22"><name pos:start="30:9" pos:end="30:10">bs</name><operator pos:start="30:11" pos:end="30:12">-&gt;</operator><name pos:start="30:13" pos:end="30:22">open_flags</name></name> <operator pos:start="30:24" pos:end="30:24">&amp;</operator> <name pos:start="30:26" pos:end="30:40">BDRV_O_NO_FLUSH</name></expr>)</condition> <block pos:start="30:43" pos:end="32:5">{<block_content pos:start="31:9" pos:end="31:26">
        <goto pos:start="31:9" pos:end="31:26">goto <name pos:start="31:14" pos:end="31:25">flush_parent</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="33:5" pos:end="33:51">/* Check if we really need to flush anything */</comment>
    <if_stmt pos:start="34:5" pos:end="36:5"><if pos:start="34:5" pos:end="36:5">if <condition pos:start="34:8" pos:end="34:39">(<expr pos:start="34:9" pos:end="34:38"><name pos:start="34:9" pos:end="34:23"><name pos:start="34:9" pos:end="34:10">bs</name><operator pos:start="34:11" pos:end="34:12">-&gt;</operator><name pos:start="34:13" pos:end="34:23">flushed_gen</name></name> <operator pos:start="34:25" pos:end="34:26">==</operator> <name pos:start="34:28" pos:end="34:38">current_gen</name></expr>)</condition> <block pos:start="34:41" pos:end="36:5">{<block_content pos:start="35:9" pos:end="35:26">
        <goto pos:start="35:9" pos:end="35:26">goto <name pos:start="35:14" pos:end="35:25">flush_parent</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:49"><expr pos:start="37:5" pos:end="37:48"><call pos:start="37:5" pos:end="37:48"><name pos:start="37:5" pos:end="37:16">BLKDBG_EVENT</name><argument_list pos:start="37:17" pos:end="37:48">(<argument pos:start="37:18" pos:end="37:25"><expr pos:start="37:18" pos:end="37:25"><name pos:start="37:18" pos:end="37:25"><name pos:start="37:18" pos:end="37:19">bs</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:25">file</name></name></expr></argument>, <argument pos:start="37:28" pos:end="37:47"><expr pos:start="37:28" pos:end="37:47"><name pos:start="37:28" pos:end="37:47">BLKDBG_FLUSH_TO_DISK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="38:5" pos:end="65:5"><if pos:start="38:5" pos:end="40:5">if <condition pos:start="38:8" pos:end="38:39">(<expr pos:start="38:9" pos:end="38:38"><name pos:start="38:9" pos:end="38:38"><name pos:start="38:9" pos:end="38:10">bs</name><operator pos:start="38:11" pos:end="38:12">-&gt;</operator><name pos:start="38:13" pos:end="38:15">drv</name><operator pos:start="38:16" pos:end="38:17">-&gt;</operator><name pos:start="38:18" pos:end="38:38">bdrv_co_flush_to_disk</name></name></expr>)</condition> <block pos:start="38:41" pos:end="40:5">{<block_content pos:start="39:9" pos:end="39:49">
        <expr_stmt pos:start="39:9" pos:end="39:49"><expr pos:start="39:9" pos:end="39:48"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:48"><name pos:start="39:15" pos:end="39:44"><name pos:start="39:15" pos:end="39:16">bs</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:21">drv</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:44">bdrv_co_flush_to_disk</name></name><argument_list pos:start="39:45" pos:end="39:48">(<argument pos:start="39:46" pos:end="39:47"><expr pos:start="39:46" pos:end="39:47"><name pos:start="39:46" pos:end="39:47">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif" pos:start="40:7" pos:end="52:5">else if <condition pos:start="40:15" pos:end="40:39">(<expr pos:start="40:16" pos:end="40:38"><name pos:start="40:16" pos:end="40:38"><name pos:start="40:16" pos:end="40:17">bs</name><operator pos:start="40:18" pos:end="40:19">-&gt;</operator><name pos:start="40:20" pos:end="40:22">drv</name><operator pos:start="40:23" pos:end="40:24">-&gt;</operator><name pos:start="40:25" pos:end="40:38">bdrv_aio_flush</name></name></expr>)</condition> <block pos:start="40:41" pos:end="52:5">{<block_content pos:start="41:9" pos:end="51:9">
        <decl_stmt pos:start="41:9" pos:end="41:24"><decl pos:start="41:9" pos:end="41:23"><type pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:18">BlockAIOCB</name> <modifier pos:start="41:20" pos:end="41:20">*</modifier></type><name pos:start="41:21" pos:end="41:23">acb</name></decl>;</decl_stmt>
        <decl_stmt pos:start="42:9" pos:end="44:10"><decl pos:start="42:9" pos:end="44:9"><type pos:start="42:9" pos:end="42:29"><name pos:start="42:9" pos:end="42:29">CoroutineIOCompletion</name></type> <name pos:start="42:31" pos:end="42:32">co</name> <init pos:start="42:34" pos:end="44:9">= <expr pos:start="42:36" pos:end="44:9"><block pos:start="42:36" pos:end="44:9">{
            <expr pos:start="43:13" pos:end="43:46"><operator pos:start="43:13" pos:end="43:13">.</operator><name pos:start="43:14" pos:end="43:22">coroutine</name> <operator pos:start="43:24" pos:end="43:24">=</operator> <call pos:start="43:26" pos:end="43:46"><name pos:start="43:26" pos:end="43:44">qemu_coroutine_self</name><argument_list pos:start="43:45" pos:end="43:46">()</argument_list></call></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt pos:start="45:9" pos:end="45:71"><expr pos:start="45:9" pos:end="45:70"><name pos:start="45:9" pos:end="45:11">acb</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:70"><name pos:start="45:15" pos:end="45:37"><name pos:start="45:15" pos:end="45:16">bs</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:21">drv</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:37">bdrv_aio_flush</name></name><argument_list pos:start="45:38" pos:end="45:70">(<argument pos:start="45:39" pos:end="45:40"><expr pos:start="45:39" pos:end="45:40"><name pos:start="45:39" pos:end="45:40">bs</name></expr></argument>, <argument pos:start="45:43" pos:end="45:64"><expr pos:start="45:43" pos:end="45:64"><name pos:start="45:43" pos:end="45:64">bdrv_co_io_em_complete</name></expr></argument>, <argument pos:start="45:67" pos:end="45:69"><expr pos:start="45:67" pos:end="45:69"><operator pos:start="45:67" pos:end="45:67">&amp;</operator><name pos:start="45:68" pos:end="45:69">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="46:9" pos:end="51:9"><if pos:start="46:9" pos:end="48:9">if <condition pos:start="46:12" pos:end="46:24">(<expr pos:start="46:13" pos:end="46:23"><name pos:start="46:13" pos:end="46:15">acb</name> <operator pos:start="46:17" pos:end="46:18">==</operator> <name pos:start="46:20" pos:end="46:23">NULL</name></expr>)</condition> <block pos:start="46:26" pos:end="48:9">{<block_content pos:start="47:13" pos:end="47:23">
            <expr_stmt pos:start="47:13" pos:end="47:23"><expr pos:start="47:13" pos:end="47:22"><name pos:start="47:13" pos:end="47:15">ret</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <operator pos:start="47:19" pos:end="47:19">-</operator><name pos:start="47:20" pos:end="47:22">EIO</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="48:11" pos:end="51:9">else <block pos:start="48:16" pos:end="51:9">{<block_content pos:start="49:13" pos:end="50:25">
            <expr_stmt pos:start="49:13" pos:end="49:35"><expr pos:start="49:13" pos:end="49:34"><call pos:start="49:13" pos:end="49:34"><name pos:start="49:13" pos:end="49:32">qemu_coroutine_yield</name><argument_list pos:start="49:33" pos:end="49:34">()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="50:13" pos:end="50:25"><expr pos:start="50:13" pos:end="50:24"><name pos:start="50:13" pos:end="50:15">ret</name> <operator pos:start="50:17" pos:end="50:17">=</operator> <name pos:start="50:19" pos:end="50:24"><name pos:start="50:19" pos:end="50:20">co</name><operator pos:start="50:21" pos:end="50:21">.</operator><name pos:start="50:22" pos:end="50:24">ret</name></name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else pos:start="52:7" pos:end="65:5">else <block pos:start="52:12" pos:end="65:5">{<block_content pos:start="64:9" pos:end="64:16">
        <comment type="block" pos:start="53:9" pos:end="63:11">/*
         * Some block drivers always operate in either writethrough or unsafe
         * mode and don't support bdrv_flush therefore. Usually qemu doesn't
         * know how the server works (because the behaviour is hardcoded or
         * depends on server-side configuration), so we can't ensure that
         * everything is safe on disk. Returning an error doesn't work because
         * that would break guests even if the server operates in writethrough
         * mode.
         *
         * Let's hope the user knows what he's doing.
         */</comment>
        <expr_stmt pos:start="64:9" pos:end="64:16"><expr pos:start="64:9" pos:end="64:15"><name pos:start="64:9" pos:end="64:11">ret</name> <operator pos:start="64:13" pos:end="64:13">=</operator> <literal type="number" pos:start="64:15" pos:end="64:15">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt pos:start="66:5" pos:end="68:5"><if pos:start="66:5" pos:end="68:5">if <condition pos:start="66:8" pos:end="66:16">(<expr pos:start="66:9" pos:end="66:15"><name pos:start="66:9" pos:end="66:11">ret</name> <operator pos:start="66:13" pos:end="66:13">&lt;</operator> <literal type="number" pos:start="66:15" pos:end="66:15">0</literal></expr>)</condition> <block pos:start="66:18" pos:end="68:5">{<block_content pos:start="67:9" pos:end="67:17">
        <goto pos:start="67:9" pos:end="67:17">goto <name pos:start="67:14" pos:end="67:16">out</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="69:5" pos:end="71:7">/* Now flush the underlying protocol.  It will also have BDRV_O_NO_FLUSH
     * in the case of cache=unsafe, so there are no useless flushes.
     */</comment>
<label pos:start="72:1" pos:end="72:13"><name pos:start="72:1" pos:end="72:12">flush_parent</name>:</label>
    <expr_stmt pos:start="73:5" pos:end="73:53"><expr pos:start="73:5" pos:end="73:52"><name pos:start="73:5" pos:end="73:7">ret</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <ternary pos:start="73:11" pos:end="73:52"><condition pos:start="73:11" pos:end="73:20"><expr pos:start="73:11" pos:end="73:18"><name pos:start="73:11" pos:end="73:18"><name pos:start="73:11" pos:end="73:12">bs</name><operator pos:start="73:13" pos:end="73:14">-&gt;</operator><name pos:start="73:15" pos:end="73:18">file</name></name></expr> ?</condition><then pos:start="73:22" pos:end="73:48"> <expr pos:start="73:22" pos:end="73:48"><call pos:start="73:22" pos:end="73:48"><name pos:start="73:22" pos:end="73:34">bdrv_co_flush</name><argument_list pos:start="73:35" pos:end="73:48">(<argument pos:start="73:36" pos:end="73:47"><expr pos:start="73:36" pos:end="73:47"><name pos:start="73:36" pos:end="73:47"><name pos:start="73:36" pos:end="73:37">bs</name><operator pos:start="73:38" pos:end="73:39">-&gt;</operator><name pos:start="73:40" pos:end="73:43">file</name><operator pos:start="73:44" pos:end="73:45">-&gt;</operator><name pos:start="73:46" pos:end="73:47">bs</name></name></expr></argument>)</argument_list></call></expr> </then><else pos:start="73:50" pos:end="73:52">: <expr pos:start="73:52" pos:end="73:52"><literal type="number" pos:start="73:52" pos:end="73:52">0</literal></expr></else></ternary></expr>;</expr_stmt>
<label pos:start="74:1" pos:end="74:4"><name pos:start="74:1" pos:end="74:3">out</name>:</label>
    <comment type="block" pos:start="75:5" pos:end="75:59">/* Notify any pending flushes that we have completed */</comment>
    <expr_stmt pos:start="76:5" pos:end="76:34"><expr pos:start="76:5" pos:end="76:33"><name pos:start="76:5" pos:end="76:19"><name pos:start="76:5" pos:end="76:6">bs</name><operator pos:start="76:7" pos:end="76:8">-&gt;</operator><name pos:start="76:9" pos:end="76:19">flushed_gen</name></name> <operator pos:start="76:21" pos:end="76:21">=</operator> <name pos:start="76:23" pos:end="76:33">current_gen</name></expr>;</expr_stmt>
    <expr_stmt pos:start="77:5" pos:end="77:48"><expr pos:start="77:5" pos:end="77:47"><call pos:start="77:5" pos:end="77:47"><name pos:start="77:5" pos:end="77:29">qemu_co_queue_restart_all</name><argument_list pos:start="77:30" pos:end="77:47">(<argument pos:start="77:31" pos:end="77:46"><expr pos:start="77:31" pos:end="77:46"><operator pos:start="77:31" pos:end="77:31">&amp;</operator><name pos:start="77:32" pos:end="77:46"><name pos:start="77:32" pos:end="77:33">bs</name><operator pos:start="77:34" pos:end="77:35">-&gt;</operator><name pos:start="77:36" pos:end="77:46">flush_queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="78:5" pos:end="78:30"><expr pos:start="78:5" pos:end="78:29"><call pos:start="78:5" pos:end="78:29"><name pos:start="78:5" pos:end="78:23">tracked_request_end</name><argument_list pos:start="78:24" pos:end="78:29">(<argument pos:start="78:25" pos:end="78:28"><expr pos:start="78:25" pos:end="78:28"><operator pos:start="78:25" pos:end="78:25">&amp;</operator><name pos:start="78:26" pos:end="78:28">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="79:5" pos:end="79:15">return <expr pos:start="79:12" pos:end="79:14"><name pos:start="79:12" pos:end="79:14">ret</name></expr>;</return>
</block_content>}</block></function></unit>
