<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23230.c" pos:tabs="8"><function pos:start="1:1" pos:end="255:1"><name pos:start="1:1" pos:end="1:4">main</name><parameter_list pos:start="1:5" pos:end="7:1">(

    <parameter pos:start="3:5" pos:end="3:12"><decl pos:start="3:5" pos:end="3:12"><type pos:start="3:5" pos:end="3:12"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:12">argc</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:16"><name pos:start="5:11" pos:end="5:14">argv</name><index pos:start="5:15" pos:end="5:16">[]</index></name></decl></parameter>

)</parameter_list> <block pos:start="7:3" pos:end="255:1">{<block_content pos:start="9:5" pos:end="253:13">

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">GMainLoop</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:19">loop</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">GIOChannel</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:29">channel_stdin</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:19">qemu_host</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:19">qemu_port</name></decl>;</decl_stmt>



    <decl_stmt pos:start="19:5" pos:end="19:50"><decl pos:start="19:5" pos:end="19:49"><type pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">VCardEmulOptions</name> <modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:42">command_line_options</name> <init pos:start="19:44" pos:end="19:49">= <expr pos:start="19:46" pos:end="19:49"><name pos:start="19:46" pos:end="19:49">NULL</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="23:5" pos:end="23:32"><decl pos:start="23:5" pos:end="23:31"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">char</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:31"><name pos:start="23:11" pos:end="23:20">cert_names</name><index pos:start="23:21" pos:end="23:31">[<expr pos:start="23:22" pos:end="23:30"><name pos:start="23:22" pos:end="23:30">MAX_CERTS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:8">char</name> <modifier pos:start="25:10" pos:end="25:10">*</modifier></type><name pos:start="25:11" pos:end="25:19">emul_args</name> <init pos:start="25:21" pos:end="25:26">= <expr pos:start="25:23" pos:end="25:26"><name pos:start="25:23" pos:end="25:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:23"><decl pos:start="27:5" pos:end="27:22"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">cert_count</name> <init pos:start="27:20" pos:end="27:22">= <expr pos:start="27:22" pos:end="27:22"><literal type="number" pos:start="27:22" pos:end="27:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:16"><decl pos:start="29:5" pos:end="29:9"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:9">c</name></decl>, <decl pos:start="29:12" pos:end="29:15"><type ref="prev" pos:start="29:5" pos:end="29:7"/><name pos:start="29:12" pos:end="29:15">sock</name></decl>;</decl_stmt>



    <if_stmt pos:start="33:5" pos:end="35:17"><if pos:start="33:5" pos:end="35:17">if <condition pos:start="33:8" pos:end="33:27">(<expr pos:start="33:9" pos:end="33:26"><call pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:19">socket_init</name><argument_list pos:start="33:20" pos:end="33:21">()</argument_list></call> <operator pos:start="33:23" pos:end="33:24">!=</operator> <literal type="number" pos:start="33:26" pos:end="33:26">0</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:17"><block_content pos:start="35:9" pos:end="35:17">

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <while pos:start="39:5" pos:end="79:5">while <condition pos:start="39:11" pos:end="39:53">(<expr pos:start="39:12" pos:end="39:52"><operator pos:start="39:12" pos:end="39:12">(</operator><name pos:start="39:13" pos:end="39:13">c</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:45"><name pos:start="39:17" pos:end="39:22">getopt</name><argument_list pos:start="39:23" pos:end="39:45">(<argument pos:start="39:24" pos:end="39:27"><expr pos:start="39:24" pos:end="39:27"><name pos:start="39:24" pos:end="39:27">argc</name></expr></argument>, <argument pos:start="39:30" pos:end="39:33"><expr pos:start="39:30" pos:end="39:33"><name pos:start="39:30" pos:end="39:33">argv</name></expr></argument>, <argument pos:start="39:36" pos:end="39:44"><expr pos:start="39:36" pos:end="39:44"><literal type="string" pos:start="39:36" pos:end="39:44">"c:e:pd:"</literal></expr></argument>)</argument_list></call><operator pos:start="39:46" pos:end="39:46">)</operator> <operator pos:start="39:48" pos:end="39:49">!=</operator> <operator pos:start="39:51" pos:end="39:51">-</operator><literal type="number" pos:start="39:52" pos:end="39:52">1</literal></expr>)</condition> <block pos:start="39:55" pos:end="79:5">{<block_content pos:start="41:9" pos:end="77:9">

        <switch pos:start="41:9" pos:end="77:9">switch <condition pos:start="41:16" pos:end="41:18">(<expr pos:start="41:17" pos:end="41:17"><name pos:start="41:17" pos:end="41:17">c</name></expr>)</condition> <block pos:start="41:20" pos:end="77:9">{<block_content pos:start="43:9" pos:end="75:18">

        <case pos:start="43:9" pos:end="43:17">case <expr pos:start="43:14" pos:end="43:16"><literal type="char" pos:start="43:14" pos:end="43:16">'c'</literal></expr>:</case>

            <if_stmt pos:start="45:13" pos:end="51:13"><if pos:start="45:13" pos:end="51:13">if <condition pos:start="45:16" pos:end="45:40">(<expr pos:start="45:17" pos:end="45:39"><name pos:start="45:17" pos:end="45:26">cert_count</name> <operator pos:start="45:28" pos:end="45:29">&gt;=</operator> <name pos:start="45:31" pos:end="45:39">MAX_CERTS</name></expr>)</condition> <block pos:start="45:42" pos:end="51:13">{<block_content pos:start="47:17" pos:end="49:24">

                <expr_stmt pos:start="47:17" pos:end="47:72"><expr pos:start="47:17" pos:end="47:71"><call pos:start="47:17" pos:end="47:71"><name pos:start="47:17" pos:end="47:22">printf</name><argument_list pos:start="47:23" pos:end="47:71">(<argument pos:start="47:24" pos:end="47:59"><expr pos:start="47:24" pos:end="47:59"><literal type="string" pos:start="47:24" pos:end="47:59">"too many certificates (max = %d)\n"</literal></expr></argument>, <argument pos:start="47:62" pos:end="47:70"><expr pos:start="47:62" pos:end="47:70"><name pos:start="47:62" pos:end="47:70">MAX_CERTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:24"><expr pos:start="49:17" pos:end="49:23"><call pos:start="49:17" pos:end="49:23"><name pos:start="49:17" pos:end="49:20">exit</name><argument_list pos:start="49:21" pos:end="49:23">(<argument pos:start="49:22" pos:end="49:22"><expr pos:start="49:22" pos:end="49:22"><literal type="number" pos:start="49:22" pos:end="49:22">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:46"><expr pos:start="53:13" pos:end="53:45"><name pos:start="53:13" pos:end="53:36"><name pos:start="53:13" pos:end="53:22">cert_names</name><index pos:start="53:23" pos:end="53:36">[<expr pos:start="53:24" pos:end="53:35"><name pos:start="53:24" pos:end="53:33">cert_count</name><operator pos:start="53:34" pos:end="53:35">++</operator></expr>]</index></name> <operator pos:start="53:38" pos:end="53:38">=</operator> <name pos:start="53:40" pos:end="53:45">optarg</name></expr>;</expr_stmt>

            <break pos:start="55:13" pos:end="55:18">break;</break>

        <case pos:start="57:9" pos:end="57:17">case <expr pos:start="57:14" pos:end="57:16"><literal type="char" pos:start="57:14" pos:end="57:16">'e'</literal></expr>:</case>

            <expr_stmt pos:start="59:13" pos:end="59:31"><expr pos:start="59:13" pos:end="59:30"><name pos:start="59:13" pos:end="59:21">emul_args</name> <operator pos:start="59:23" pos:end="59:23">=</operator> <name pos:start="59:25" pos:end="59:30">optarg</name></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        <case pos:start="63:9" pos:end="63:17">case <expr pos:start="63:14" pos:end="63:16"><literal type="char" pos:start="63:14" pos:end="63:16">'p'</literal></expr>:</case>

            <expr_stmt pos:start="65:13" pos:end="65:26"><expr pos:start="65:13" pos:end="65:25"><call pos:start="65:13" pos:end="65:25"><name pos:start="65:13" pos:end="65:23">print_usage</name><argument_list pos:start="65:24" pos:end="65:25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:20"><expr pos:start="67:13" pos:end="67:19"><call pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:16">exit</name><argument_list pos:start="67:17" pos:end="67:19">(<argument pos:start="67:18" pos:end="67:18"><expr pos:start="67:18" pos:end="67:18"><literal type="number" pos:start="67:18" pos:end="67:18">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        <case pos:start="71:9" pos:end="71:17">case <expr pos:start="71:14" pos:end="71:16"><literal type="char" pos:start="71:14" pos:end="71:16">'d'</literal></expr>:</case>

            <expr_stmt pos:start="73:13" pos:end="73:52"><expr pos:start="73:13" pos:end="73:51"><name pos:start="73:13" pos:end="73:19">verbose</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <call pos:start="73:23" pos:end="73:51"><name pos:start="73:23" pos:end="73:40">get_id_from_string</name><argument_list pos:start="73:41" pos:end="73:51">(<argument pos:start="73:42" pos:end="73:47"><expr pos:start="73:42" pos:end="73:47"><name pos:start="73:42" pos:end="73:47">optarg</name></expr></argument>, <argument pos:start="73:50" pos:end="73:50"><expr pos:start="73:50" pos:end="73:50"><literal type="number" pos:start="73:50" pos:end="73:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:27">(<expr pos:start="83:9" pos:end="83:26"><name pos:start="83:9" pos:end="83:12">argc</name> <operator pos:start="83:14" pos:end="83:14">-</operator> <name pos:start="83:16" pos:end="83:21">optind</name> <operator pos:start="83:23" pos:end="83:24">!=</operator> <literal type="number" pos:start="83:26" pos:end="83:26">2</literal></expr>)</condition> <block pos:start="83:29" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:16">

        <expr_stmt pos:start="85:9" pos:end="85:22"><expr pos:start="85:9" pos:end="85:21"><call pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:19">print_usage</name><argument_list pos:start="85:20" pos:end="85:21">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:16"><expr pos:start="87:9" pos:end="87:15"><call pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:12">exit</name><argument_list pos:start="87:13" pos:end="87:15">(<argument pos:start="87:14" pos:end="87:14"><expr pos:start="87:14" pos:end="87:14"><literal type="number" pos:start="87:14" pos:end="87:14">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="93:5" pos:end="141:5"><if pos:start="93:5" pos:end="141:5">if <condition pos:start="93:8" pos:end="93:23">(<expr pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:18">cert_count</name> <operator pos:start="93:20" pos:end="93:20">&gt;</operator> <literal type="number" pos:start="93:22" pos:end="93:22">0</literal></expr>)</condition> <block pos:start="93:25" pos:end="141:5">{<block_content pos:start="95:9" pos:end="139:29">

        <decl_stmt pos:start="95:9" pos:end="95:23"><decl pos:start="95:9" pos:end="95:22"><type pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:12">char</name> <modifier pos:start="95:14" pos:end="95:14">*</modifier></type><name pos:start="95:15" pos:end="95:22">new_args</name></decl>;</decl_stmt>

        <decl_stmt pos:start="97:9" pos:end="97:19"><decl pos:start="97:9" pos:end="97:15"><type pos:start="97:9" pos:end="97:11"><name pos:start="97:9" pos:end="97:11">int</name></type> <name pos:start="97:13" pos:end="97:15">len</name></decl>, <decl pos:start="97:18" pos:end="97:18"><type ref="prev" pos:start="97:9" pos:end="97:11"/><name pos:start="97:18" pos:end="97:18">i</name></decl>;</decl_stmt>

        <comment type="block" pos:start="99:9" pos:end="103:22">/* if we've given some -c options, we clearly we want do so some

         * software emulation.  add that emulation now. this is NSS Emulator

         * specific */</comment>

        <if_stmt pos:start="105:9" pos:end="112:0"><if pos:start="105:9" pos:end="112:0">if <condition pos:start="105:12" pos:end="105:30">(<expr pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:21">emul_args</name> <operator pos:start="105:23" pos:end="105:24">==</operator> <name pos:start="105:26" pos:end="105:29">NULL</name></expr>)</condition> <block pos:start="105:32" pos:end="112:0">{<block_content pos:start="107:13" pos:end="107:56">

            <expr_stmt pos:start="107:13" pos:end="107:56"><expr pos:start="107:13" pos:end="107:55"><name pos:start="107:13" pos:end="107:21">emul_args</name> <operator pos:start="107:23" pos:end="107:23">=</operator> <operator pos:start="107:25" pos:end="107:25">(</operator><name pos:start="107:26" pos:end="107:29">char</name> <operator pos:start="107:31" pos:end="107:31">*</operator><operator pos:start="107:32" pos:end="107:32">)</operator><literal type="string" pos:start="107:33" pos:end="107:55">"db=\"/etc/pki/nssdb\""</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:define pos:start="111:1" pos:end="111:50">#<cpp:directive pos:start="111:2" pos:end="111:7">define</cpp:directive> <cpp:macro pos:start="111:9" pos:end="111:19"><name pos:start="111:9" pos:end="111:19">SOFT_STRING</name></cpp:macro> <cpp:value pos:start="111:21" pos:end="111:50">",soft=(,Virtual Reader,CAC,,"</cpp:value></cpp:define>

             <comment type="block" pos:start="113:14" pos:end="113:42">/* 2 == close paren &amp; null */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:58"><expr pos:start="115:9" pos:end="115:57"><name pos:start="115:9" pos:end="115:11">len</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <call pos:start="115:15" pos:end="115:31"><name pos:start="115:15" pos:end="115:20">strlen</name><argument_list pos:start="115:21" pos:end="115:31">(<argument pos:start="115:22" pos:end="115:30"><expr pos:start="115:22" pos:end="115:30"><name pos:start="115:22" pos:end="115:30">emul_args</name></expr></argument>)</argument_list></call> <operator pos:start="115:33" pos:end="115:33">+</operator> <call pos:start="115:35" pos:end="115:53"><name pos:start="115:35" pos:end="115:40">strlen</name><argument_list pos:start="115:41" pos:end="115:53">(<argument pos:start="115:42" pos:end="115:52"><expr pos:start="115:42" pos:end="115:52"><name pos:start="115:42" pos:end="115:52">SOFT_STRING</name></expr></argument>)</argument_list></call> <operator pos:start="115:55" pos:end="115:55">+</operator> <literal type="number" pos:start="115:57" pos:end="115:57">2</literal></expr>;</expr_stmt>

        <for pos:start="117:9" pos:end="121:9">for <control pos:start="117:13" pos:end="117:40">(<init pos:start="117:14" pos:end="117:19"><expr pos:start="117:14" pos:end="117:18"><name pos:start="117:14" pos:end="117:14">i</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <literal type="number" pos:start="117:18" pos:end="117:18">0</literal></expr>;</init> <condition pos:start="117:21" pos:end="117:35"><expr pos:start="117:21" pos:end="117:34"><name pos:start="117:21" pos:end="117:21">i</name> <operator pos:start="117:23" pos:end="117:23">&lt;</operator> <name pos:start="117:25" pos:end="117:34">cert_count</name></expr>;</condition> <incr pos:start="117:37" pos:end="117:39"><expr pos:start="117:37" pos:end="117:39"><name pos:start="117:37" pos:end="117:37">i</name><operator pos:start="117:38" pos:end="117:39">++</operator></expr></incr>)</control> <block pos:start="117:42" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:43">

            <expr_stmt pos:start="119:13" pos:end="119:43"><expr pos:start="119:13" pos:end="119:42"><name pos:start="119:13" pos:end="119:15">len</name> <operator pos:start="119:17" pos:end="119:18">+=</operator> <call pos:start="119:20" pos:end="119:40"><name pos:start="119:20" pos:end="119:25">strlen</name><argument_list pos:start="119:26" pos:end="119:40">(<argument pos:start="119:27" pos:end="119:39"><expr pos:start="119:27" pos:end="119:39"><name pos:start="119:27" pos:end="119:39"><name pos:start="119:27" pos:end="119:36">cert_names</name><index pos:start="119:37" pos:end="119:39">[<expr pos:start="119:38" pos:end="119:38"><name pos:start="119:38" pos:end="119:38">i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="119:41" pos:end="119:41">+</operator><literal type="number" pos:start="119:42" pos:end="119:42">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="119:45" pos:end="119:60">/* 1 == comma */</comment>

        </block_content>}</block></for>

        <expr_stmt pos:start="123:9" pos:end="123:33"><expr pos:start="123:9" pos:end="123:32"><name pos:start="123:9" pos:end="123:16">new_args</name> <operator pos:start="123:18" pos:end="123:18">=</operator> <call pos:start="123:20" pos:end="123:32"><name pos:start="123:20" pos:end="123:27">g_malloc</name><argument_list pos:start="123:28" pos:end="123:32">(<argument pos:start="123:29" pos:end="123:31"><expr pos:start="123:29" pos:end="123:31"><name pos:start="123:29" pos:end="123:31">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:36"><expr pos:start="125:9" pos:end="125:35"><call pos:start="125:9" pos:end="125:35"><name pos:start="125:9" pos:end="125:14">strcpy</name><argument_list pos:start="125:15" pos:end="125:35">(<argument pos:start="125:16" pos:end="125:23"><expr pos:start="125:16" pos:end="125:23"><name pos:start="125:16" pos:end="125:23">new_args</name></expr></argument>, <argument pos:start="125:26" pos:end="125:34"><expr pos:start="125:26" pos:end="125:34"><name pos:start="125:26" pos:end="125:34">emul_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:38"><expr pos:start="127:9" pos:end="127:37"><call pos:start="127:9" pos:end="127:37"><name pos:start="127:9" pos:end="127:14">strcat</name><argument_list pos:start="127:15" pos:end="127:37">(<argument pos:start="127:16" pos:end="127:23"><expr pos:start="127:16" pos:end="127:23"><name pos:start="127:16" pos:end="127:23">new_args</name></expr></argument>, <argument pos:start="127:26" pos:end="127:36"><expr pos:start="127:26" pos:end="127:36"><name pos:start="127:26" pos:end="127:36">SOFT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="129:9" pos:end="135:9">for <control pos:start="129:13" pos:end="129:40">(<init pos:start="129:14" pos:end="129:19"><expr pos:start="129:14" pos:end="129:18"><name pos:start="129:14" pos:end="129:14">i</name> <operator pos:start="129:16" pos:end="129:16">=</operator> <literal type="number" pos:start="129:18" pos:end="129:18">0</literal></expr>;</init> <condition pos:start="129:21" pos:end="129:35"><expr pos:start="129:21" pos:end="129:34"><name pos:start="129:21" pos:end="129:21">i</name> <operator pos:start="129:23" pos:end="129:23">&lt;</operator> <name pos:start="129:25" pos:end="129:34">cert_count</name></expr>;</condition> <incr pos:start="129:37" pos:end="129:39"><expr pos:start="129:37" pos:end="129:39"><name pos:start="129:37" pos:end="129:37">i</name><operator pos:start="129:38" pos:end="129:39">++</operator></expr></incr>)</control> <block pos:start="129:42" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:34">

            <expr_stmt pos:start="131:13" pos:end="131:44"><expr pos:start="131:13" pos:end="131:43"><call pos:start="131:13" pos:end="131:43"><name pos:start="131:13" pos:end="131:18">strcat</name><argument_list pos:start="131:19" pos:end="131:43">(<argument pos:start="131:20" pos:end="131:27"><expr pos:start="131:20" pos:end="131:27"><name pos:start="131:20" pos:end="131:27">new_args</name></expr></argument>, <argument pos:start="131:30" pos:end="131:42"><expr pos:start="131:30" pos:end="131:42"><name pos:start="131:30" pos:end="131:42"><name pos:start="131:30" pos:end="131:39">cert_names</name><index pos:start="131:40" pos:end="131:42">[<expr pos:start="131:41" pos:end="131:41"><name pos:start="131:41" pos:end="131:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:34"><expr pos:start="133:13" pos:end="133:33"><call pos:start="133:13" pos:end="133:33"><name pos:start="133:13" pos:end="133:18">strcat</name><argument_list pos:start="133:19" pos:end="133:33">(<argument pos:start="133:20" pos:end="133:27"><expr pos:start="133:20" pos:end="133:27"><name pos:start="133:20" pos:end="133:27">new_args</name></expr></argument>, <argument pos:start="133:30" pos:end="133:32"><expr pos:start="133:30" pos:end="133:32"><literal type="string" pos:start="133:30" pos:end="133:32">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="137:9" pos:end="137:30"><expr pos:start="137:9" pos:end="137:29"><call pos:start="137:9" pos:end="137:29"><name pos:start="137:9" pos:end="137:14">strcat</name><argument_list pos:start="137:15" pos:end="137:29">(<argument pos:start="137:16" pos:end="137:23"><expr pos:start="137:16" pos:end="137:23"><name pos:start="137:16" pos:end="137:23">new_args</name></expr></argument>, <argument pos:start="137:26" pos:end="137:28"><expr pos:start="137:26" pos:end="137:28"><literal type="string" pos:start="137:26" pos:end="137:28">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:29"><expr pos:start="139:9" pos:end="139:28"><name pos:start="139:9" pos:end="139:17">emul_args</name> <operator pos:start="139:19" pos:end="139:19">=</operator> <name pos:start="139:21" pos:end="139:28">new_args</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="143:5" pos:end="147:5"><if pos:start="143:5" pos:end="147:5">if <condition pos:start="143:8" pos:end="143:18">(<expr pos:start="143:9" pos:end="143:17"><name pos:start="143:9" pos:end="143:17">emul_args</name></expr>)</condition> <block pos:start="143:20" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:61">

        <expr_stmt pos:start="145:9" pos:end="145:61"><expr pos:start="145:9" pos:end="145:60"><name pos:start="145:9" pos:end="145:28">command_line_options</name> <operator pos:start="145:30" pos:end="145:30">=</operator> <call pos:start="145:32" pos:end="145:60"><name pos:start="145:32" pos:end="145:49">vcard_emul_options</name><argument_list pos:start="145:50" pos:end="145:60">(<argument pos:start="145:51" pos:end="145:59"><expr pos:start="145:51" pos:end="145:59"><name pos:start="145:51" pos:end="145:59">emul_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:41"><expr pos:start="151:5" pos:end="151:40"><name pos:start="151:5" pos:end="151:13">qemu_host</name> <operator pos:start="151:15" pos:end="151:15">=</operator> <call pos:start="151:17" pos:end="151:40"><name pos:start="151:17" pos:end="151:24">g_strdup</name><argument_list pos:start="151:25" pos:end="151:40">(<argument pos:start="151:26" pos:end="151:39"><expr pos:start="151:26" pos:end="151:39"><name pos:start="151:26" pos:end="151:39"><name pos:start="151:26" pos:end="151:29">argv</name><index pos:start="151:30" pos:end="151:39">[<expr pos:start="151:31" pos:end="151:38"><name pos:start="151:31" pos:end="151:34">argc</name> <operator pos:start="151:36" pos:end="151:36">-</operator> <literal type="number" pos:start="151:38" pos:end="151:38">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:41"><expr pos:start="153:5" pos:end="153:40"><name pos:start="153:5" pos:end="153:13">qemu_port</name> <operator pos:start="153:15" pos:end="153:15">=</operator> <call pos:start="153:17" pos:end="153:40"><name pos:start="153:17" pos:end="153:24">g_strdup</name><argument_list pos:start="153:25" pos:end="153:40">(<argument pos:start="153:26" pos:end="153:39"><expr pos:start="153:26" pos:end="153:39"><name pos:start="153:26" pos:end="153:39"><name pos:start="153:26" pos:end="153:29">argv</name><index pos:start="153:30" pos:end="153:39">[<expr pos:start="153:31" pos:end="153:38"><name pos:start="153:31" pos:end="153:34">argc</name> <operator pos:start="153:36" pos:end="153:36">-</operator> <literal type="number" pos:start="153:38" pos:end="153:38">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:49"><expr pos:start="155:5" pos:end="155:48"><name pos:start="155:5" pos:end="155:8">sock</name> <operator pos:start="155:10" pos:end="155:10">=</operator> <call pos:start="155:12" pos:end="155:48"><name pos:start="155:12" pos:end="155:26">connect_to_qemu</name><argument_list pos:start="155:27" pos:end="155:48">(<argument pos:start="155:28" pos:end="155:36"><expr pos:start="155:28" pos:end="155:36"><name pos:start="155:28" pos:end="155:36">qemu_host</name></expr></argument>, <argument pos:start="155:39" pos:end="155:47"><expr pos:start="155:39" pos:end="155:47"><name pos:start="155:39" pos:end="155:47">qemu_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="157:5" pos:end="163:5"><if pos:start="157:5" pos:end="163:5">if <condition pos:start="157:8" pos:end="157:19">(<expr pos:start="157:9" pos:end="157:18"><name pos:start="157:9" pos:end="157:12">sock</name> <operator pos:start="157:14" pos:end="157:15">==</operator> <operator pos:start="157:17" pos:end="157:17">-</operator><literal type="number" pos:start="157:18" pos:end="157:18">1</literal></expr>)</condition> <block pos:start="157:21" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:16">

        <expr_stmt pos:start="159:9" pos:end="159:60"><expr pos:start="159:9" pos:end="159:59"><call pos:start="159:9" pos:end="159:59"><name pos:start="159:9" pos:end="159:15">fprintf</name><argument_list pos:start="159:16" pos:end="159:59">(<argument pos:start="159:17" pos:end="159:22"><expr pos:start="159:17" pos:end="159:22"><name pos:start="159:17" pos:end="159:22">stderr</name></expr></argument>, <argument pos:start="159:25" pos:end="159:58"><expr pos:start="159:25" pos:end="159:58"><literal type="string" pos:start="159:25" pos:end="159:58">"error opening socket, exiting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:16"><expr pos:start="161:9" pos:end="161:15"><call pos:start="161:9" pos:end="161:15"><name pos:start="161:9" pos:end="161:12">exit</name><argument_list pos:start="161:13" pos:end="161:15">(<argument pos:start="161:14" pos:end="161:14"><expr pos:start="161:14" pos:end="161:14"><literal type="number" pos:start="161:14" pos:end="161:14">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="167:5" pos:end="167:40"><expr pos:start="167:5" pos:end="167:39"><name pos:start="167:5" pos:end="167:18">socket_to_send</name> <operator pos:start="167:20" pos:end="167:20">=</operator> <call pos:start="167:22" pos:end="167:39"><name pos:start="167:22" pos:end="167:37">g_byte_array_new</name><argument_list pos:start="167:38" pos:end="167:39">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:42"><expr pos:start="169:5" pos:end="169:41"><call pos:start="169:5" pos:end="169:41"><name pos:start="169:5" pos:end="169:19">qemu_mutex_init</name><argument_list pos:start="169:20" pos:end="169:41">(<argument pos:start="169:21" pos:end="169:40"><expr pos:start="169:21" pos:end="169:40"><operator pos:start="169:21" pos:end="169:21">&amp;</operator><name pos:start="169:22" pos:end="169:40">socket_to_send_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:42"><expr pos:start="171:5" pos:end="171:41"><call pos:start="171:5" pos:end="171:41"><name pos:start="171:5" pos:end="171:19">qemu_mutex_init</name><argument_list pos:start="171:20" pos:end="171:41">(<argument pos:start="171:21" pos:end="171:40"><expr pos:start="171:21" pos:end="171:40"><operator pos:start="171:21" pos:end="171:21">&amp;</operator><name pos:start="171:22" pos:end="171:40">pending_reader_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:46"><expr pos:start="173:5" pos:end="173:45"><call pos:start="173:5" pos:end="173:45"><name pos:start="173:5" pos:end="173:18">qemu_cond_init</name><argument_list pos:start="173:19" pos:end="173:45">(<argument pos:start="173:20" pos:end="173:44"><expr pos:start="173:20" pos:end="173:44"><operator pos:start="173:20" pos:end="173:20">&amp;</operator><name pos:start="173:21" pos:end="173:44">pending_reader_condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:42"><expr pos:start="177:5" pos:end="177:41"><call pos:start="177:5" pos:end="177:41"><name pos:start="177:5" pos:end="177:19">vcard_emul_init</name><argument_list pos:start="177:20" pos:end="177:41">(<argument pos:start="177:21" pos:end="177:40"><expr pos:start="177:21" pos:end="177:40"><name pos:start="177:21" pos:end="177:40">command_line_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:39"><expr pos:start="181:5" pos:end="181:38"><name pos:start="181:5" pos:end="181:8">loop</name> <operator pos:start="181:10" pos:end="181:10">=</operator> <call pos:start="181:12" pos:end="181:38"><name pos:start="181:12" pos:end="181:26">g_main_loop_new</name><argument_list pos:start="181:27" pos:end="181:38">(<argument pos:start="181:28" pos:end="181:31"><expr pos:start="181:28" pos:end="181:31"><name pos:start="181:28" pos:end="181:31">NULL</name></expr></argument>, <argument pos:start="181:34" pos:end="181:37"><expr pos:start="181:34" pos:end="181:37"><name pos:start="181:34" pos:end="181:37">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:17"><expr pos:start="185:5" pos:end="185:16"><call pos:start="185:5" pos:end="185:16"><name pos:start="185:5" pos:end="185:10">printf</name><argument_list pos:start="185:11" pos:end="185:16">(<argument pos:start="185:12" pos:end="185:15"><expr pos:start="185:12" pos:end="185:15"><literal type="string" pos:start="185:12" pos:end="185:15">"&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="192:0"><expr pos:start="187:5" pos:end="187:18"><call pos:start="187:5" pos:end="187:18"><name pos:start="187:5" pos:end="187:10">fflush</name><argument_list pos:start="187:11" pos:end="187:18">(<argument pos:start="187:12" pos:end="187:17"><expr pos:start="187:12" pos:end="187:17"><name pos:start="187:12" pos:end="187:17">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="191:1" pos:end="191:13">#<cpp:directive pos:start="191:2" pos:end="191:6">ifdef</cpp:directive> <name pos:start="191:8" pos:end="191:13">_WIN32</name></cpp:ifdef>

    <expr_stmt pos:start="193:5" pos:end="196:0"><expr pos:start="193:5" pos:end="193:59"><name pos:start="193:5" pos:end="193:17">channel_stdin</name> <operator pos:start="193:19" pos:end="193:19">=</operator> <call pos:start="193:21" pos:end="193:59"><name pos:start="193:21" pos:end="193:45">g_io_channel_win32_new_fd</name><argument_list pos:start="193:46" pos:end="193:59">(<argument pos:start="193:47" pos:end="193:58"><expr pos:start="193:47" pos:end="193:58"><name pos:start="193:47" pos:end="193:58">STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="195:1" pos:end="195:5">#<cpp:directive pos:start="195:2" pos:end="195:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="197:5" pos:end="200:0"><expr pos:start="197:5" pos:end="197:55"><name pos:start="197:5" pos:end="197:17">channel_stdin</name> <operator pos:start="197:19" pos:end="197:19">=</operator> <call pos:start="197:21" pos:end="197:55"><name pos:start="197:21" pos:end="197:41">g_io_channel_unix_new</name><argument_list pos:start="197:42" pos:end="197:55">(<argument pos:start="197:43" pos:end="197:54"><expr pos:start="197:43" pos:end="197:54"><name pos:start="197:43" pos:end="197:54">STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="199:1" pos:end="199:6">#<cpp:directive pos:start="199:2" pos:end="199:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="201:5" pos:end="204:0"><expr pos:start="201:5" pos:end="201:60"><call pos:start="201:5" pos:end="201:60"><name pos:start="201:5" pos:end="201:18">g_io_add_watch</name><argument_list pos:start="201:19" pos:end="201:60">(<argument pos:start="201:20" pos:end="201:32"><expr pos:start="201:20" pos:end="201:32"><name pos:start="201:20" pos:end="201:32">channel_stdin</name></expr></argument>, <argument pos:start="201:35" pos:end="201:41"><expr pos:start="201:35" pos:end="201:41"><name pos:start="201:35" pos:end="201:41">G_IO_IN</name></expr></argument>, <argument pos:start="201:44" pos:end="201:53"><expr pos:start="201:44" pos:end="201:53"><name pos:start="201:44" pos:end="201:53">do_command</name></expr></argument>, <argument pos:start="201:56" pos:end="201:59"><expr pos:start="201:56" pos:end="201:59"><name pos:start="201:56" pos:end="201:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="203:1" pos:end="203:13">#<cpp:directive pos:start="203:2" pos:end="203:6">ifdef</cpp:directive> <name pos:start="203:8" pos:end="203:13">_WIN32</name></cpp:ifdef>

    <expr_stmt pos:start="205:5" pos:end="208:0"><expr pos:start="205:5" pos:end="205:56"><name pos:start="205:5" pos:end="205:18">channel_socket</name> <operator pos:start="205:20" pos:end="205:20">=</operator> <call pos:start="205:22" pos:end="205:56"><name pos:start="205:22" pos:end="205:50">g_io_channel_win32_new_socket</name><argument_list pos:start="205:51" pos:end="205:56">(<argument pos:start="205:52" pos:end="205:55"><expr pos:start="205:52" pos:end="205:55"><name pos:start="205:52" pos:end="205:55">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="207:1" pos:end="207:5">#<cpp:directive pos:start="207:2" pos:end="207:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="209:5" pos:end="212:0"><expr pos:start="209:5" pos:end="209:48"><name pos:start="209:5" pos:end="209:18">channel_socket</name> <operator pos:start="209:20" pos:end="209:20">=</operator> <call pos:start="209:22" pos:end="209:48"><name pos:start="209:22" pos:end="209:42">g_io_channel_unix_new</name><argument_list pos:start="209:43" pos:end="209:48">(<argument pos:start="209:44" pos:end="209:47"><expr pos:start="209:44" pos:end="209:47"><name pos:start="209:44" pos:end="209:47">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="211:1" pos:end="211:6">#<cpp:directive pos:start="211:2" pos:end="211:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="213:5" pos:end="213:58"><expr pos:start="213:5" pos:end="213:57"><call pos:start="213:5" pos:end="213:57"><name pos:start="213:5" pos:end="213:29">g_io_channel_set_encoding</name><argument_list pos:start="213:30" pos:end="213:57">(<argument pos:start="213:31" pos:end="213:44"><expr pos:start="213:31" pos:end="213:44"><name pos:start="213:31" pos:end="213:44">channel_socket</name></expr></argument>, <argument pos:start="213:47" pos:end="213:50"><expr pos:start="213:47" pos:end="213:50"><name pos:start="213:47" pos:end="213:50">NULL</name></expr></argument>, <argument pos:start="213:53" pos:end="213:56"><expr pos:start="213:53" pos:end="213:56"><name pos:start="213:53" pos:end="213:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="215:5" pos:end="215:53">/* we buffer ourself for thread safety reasons */</comment>

    <expr_stmt pos:start="217:5" pos:end="217:53"><expr pos:start="217:5" pos:end="217:52"><call pos:start="217:5" pos:end="217:52"><name pos:start="217:5" pos:end="217:29">g_io_channel_set_buffered</name><argument_list pos:start="217:30" pos:end="217:52">(<argument pos:start="217:31" pos:end="217:44"><expr pos:start="217:31" pos:end="217:44"><name pos:start="217:31" pos:end="217:44">channel_socket</name></expr></argument>, <argument pos:start="217:47" pos:end="217:51"><expr pos:start="217:47" pos:end="217:51"><name pos:start="217:47" pos:end="217:51">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="221:5" pos:end="221:80">/* Send init message, Host responds (and then we send reader attachments) */</comment>

    <decl_stmt pos:start="223:5" pos:end="231:6"><decl pos:start="223:5" pos:end="231:5"><type pos:start="223:5" pos:end="223:14"><name pos:start="223:5" pos:end="223:14">VSCMsgInit</name></type> <name pos:start="223:16" pos:end="223:19">init</name> <init pos:start="223:21" pos:end="231:5">= <expr pos:start="223:23" pos:end="231:5"><block pos:start="223:23" pos:end="231:5">{

        <expr pos:start="225:9" pos:end="225:40"><operator pos:start="225:9" pos:end="225:9">.</operator><name pos:start="225:10" pos:end="225:16">version</name> <operator pos:start="225:18" pos:end="225:18">=</operator> <call pos:start="225:20" pos:end="225:40"><name pos:start="225:20" pos:end="225:24">htonl</name><argument_list pos:start="225:25" pos:end="225:40">(<argument pos:start="225:26" pos:end="225:39"><expr pos:start="225:26" pos:end="225:39"><name pos:start="225:26" pos:end="225:39">VSCARD_VERSION</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="227:9" pos:end="227:29"><operator pos:start="227:9" pos:end="227:9">.</operator><name pos:start="227:10" pos:end="227:14">magic</name> <operator pos:start="227:16" pos:end="227:16">=</operator> <name pos:start="227:18" pos:end="227:29">VSCARD_MAGIC</name></expr>,

        <expr pos:start="229:9" pos:end="229:27"><operator pos:start="229:9" pos:end="229:9">.</operator><name pos:start="229:10" pos:end="229:21">capabilities</name> <operator pos:start="229:23" pos:end="229:23">=</operator> <block pos:start="229:25" pos:end="229:27">{<expr pos:start="229:26" pos:end="229:26"><literal type="number" pos:start="229:26" pos:end="229:26">0</literal></expr>}</block></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:47"><expr pos:start="233:5" pos:end="233:46"><call pos:start="233:5" pos:end="233:46"><name pos:start="233:5" pos:end="233:12">send_msg</name><argument_list pos:start="233:13" pos:end="233:46">(<argument pos:start="233:14" pos:end="233:21"><expr pos:start="233:14" pos:end="233:21"><name pos:start="233:14" pos:end="233:21">VSC_Init</name></expr></argument>, <argument pos:start="233:24" pos:end="233:24"><expr pos:start="233:24" pos:end="233:24"><literal type="number" pos:start="233:24" pos:end="233:24">0</literal></expr></argument>, <argument pos:start="233:27" pos:end="233:31"><expr pos:start="233:27" pos:end="233:31"><operator pos:start="233:27" pos:end="233:27">&amp;</operator><name pos:start="233:28" pos:end="233:31">init</name></expr></argument>, <argument pos:start="233:34" pos:end="233:45"><expr pos:start="233:34" pos:end="233:45"><sizeof pos:start="233:34" pos:end="233:45">sizeof<argument_list pos:start="233:40" pos:end="233:45">(<argument pos:start="233:41" pos:end="233:44"><expr pos:start="233:41" pos:end="233:44"><name pos:start="233:41" pos:end="233:44">init</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="237:5" pos:end="237:26"><expr pos:start="237:5" pos:end="237:25"><call pos:start="237:5" pos:end="237:25"><name pos:start="237:5" pos:end="237:19">g_main_loop_run</name><argument_list pos:start="237:20" pos:end="237:25">(<argument pos:start="237:21" pos:end="237:24"><expr pos:start="237:21" pos:end="237:24"><name pos:start="237:21" pos:end="237:24">loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:28"><expr pos:start="239:5" pos:end="239:27"><call pos:start="239:5" pos:end="239:27"><name pos:start="239:5" pos:end="239:21">g_main_loop_unref</name><argument_list pos:start="239:22" pos:end="239:27">(<argument pos:start="239:23" pos:end="239:26"><expr pos:start="239:23" pos:end="239:26"><name pos:start="239:23" pos:end="239:26">loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="243:5" pos:end="243:38"><expr pos:start="243:5" pos:end="243:37"><call pos:start="243:5" pos:end="243:37"><name pos:start="243:5" pos:end="243:22">g_io_channel_unref</name><argument_list pos:start="243:23" pos:end="243:37">(<argument pos:start="243:24" pos:end="243:36"><expr pos:start="243:24" pos:end="243:36"><name pos:start="243:24" pos:end="243:36">channel_stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:39"><expr pos:start="245:5" pos:end="245:38"><call pos:start="245:5" pos:end="245:38"><name pos:start="245:5" pos:end="245:22">g_io_channel_unref</name><argument_list pos:start="245:23" pos:end="245:38">(<argument pos:start="245:24" pos:end="245:37"><expr pos:start="245:24" pos:end="245:37"><name pos:start="245:24" pos:end="245:37">channel_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:44"><expr pos:start="247:5" pos:end="247:43"><call pos:start="247:5" pos:end="247:43"><name pos:start="247:5" pos:end="247:21">g_byte_array_free</name><argument_list pos:start="247:22" pos:end="247:43">(<argument pos:start="247:23" pos:end="247:36"><expr pos:start="247:23" pos:end="247:36"><name pos:start="247:23" pos:end="247:36">socket_to_send</name></expr></argument>, <argument pos:start="247:39" pos:end="247:42"><expr pos:start="247:39" pos:end="247:42"><name pos:start="247:39" pos:end="247:42">TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="251:5" pos:end="251:22"><expr pos:start="251:5" pos:end="251:21"><call pos:start="251:5" pos:end="251:21"><name pos:start="251:5" pos:end="251:15">closesocket</name><argument_list pos:start="251:16" pos:end="251:21">(<argument pos:start="251:17" pos:end="251:20"><expr pos:start="251:17" pos:end="251:20"><name pos:start="251:17" pos:end="251:20">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="253:5" pos:end="253:13">return <expr pos:start="253:12" pos:end="253:12"><literal type="number" pos:start="253:12" pos:end="253:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
