<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14397.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">spapr_fixup_cpu_dt</name><parameter_list pos:start="1:30" pos:end="1:65">(<parameter pos:start="1:31" pos:end="1:39"><decl pos:start="1:31" pos:end="1:39"><type pos:start="1:31" pos:end="1:39"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">fdt</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:64"><decl pos:start="1:42" pos:end="1:64"><type pos:start="1:42" pos:end="1:64"><name pos:start="1:42" pos:end="1:57">sPAPREnvironment</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:64">spapr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:15">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:15">= <expr pos:start="5:15" pos:end="5:15"><literal type="number" pos:start="5:15" pos:end="5:15">0</literal></expr></init></decl>, <decl pos:start="5:18" pos:end="5:23"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:23">offset</name></decl>, <decl pos:start="5:26" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:26" pos:end="5:36">cpus_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:22"><name pos:start="9:10" pos:end="9:18">cpu_model</name><index pos:start="9:19" pos:end="9:22">[<expr pos:start="9:20" pos:end="9:21"><literal type="number" pos:start="9:20" pos:end="9:21">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">smt</name> <init pos:start="11:13" pos:end="11:34">= <expr pos:start="11:15" pos:end="11:34"><call pos:start="11:15" pos:end="11:34"><name pos:start="11:15" pos:end="11:32">kvmppc_smt_threads</name><argument_list pos:start="11:33" pos:end="11:34">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:67"><decl pos:start="13:5" pos:end="13:66"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:28"><name pos:start="13:14" pos:end="13:26">pft_size_prop</name><index pos:start="13:27" pos:end="13:28">[]</index></name> <init pos:start="13:30" pos:end="13:66">= <expr pos:start="13:32" pos:end="13:66"><block pos:start="13:32" pos:end="13:66">{<expr pos:start="13:33" pos:end="13:33"><literal type="number" pos:start="13:33" pos:end="13:33">0</literal></expr>, <macro pos:start="13:36" pos:end="13:65"><name pos:start="13:36" pos:end="13:46">cpu_to_be32</name><argument_list pos:start="13:47" pos:end="13:65">(<argument pos:start="13:48" pos:end="13:64">spapr-&gt;htab_shift</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>



    <macro pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:15">CPU_FOREACH</name><argument_list pos:start="17:16" pos:end="17:19">(<argument pos:start="17:17" pos:end="17:18">cs</argument>)</argument_list></macro> <block pos:start="17:21" pos:end="121:5">{<block_content pos:start="19:9" pos:end="119:9">

        <decl_stmt pos:start="19:9" pos:end="19:42"><decl pos:start="19:9" pos:end="19:41"><type pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:18">PowerPCCPU</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:23">cpu</name> <init pos:start="19:25" pos:end="19:41">= <expr pos:start="19:27" pos:end="19:41"><call pos:start="19:27" pos:end="19:41"><name pos:start="19:27" pos:end="19:37">POWERPC_CPU</name><argument_list pos:start="19:38" pos:end="19:41">(<argument pos:start="19:39" pos:end="19:40"><expr pos:start="19:39" pos:end="19:40"><name pos:start="19:39" pos:end="19:40">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:47"><decl pos:start="21:9" pos:end="21:46"><type pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:19">DeviceClass</name> <modifier pos:start="21:21" pos:end="21:21">*</modifier></type><name pos:start="21:22" pos:end="21:23">dc</name> <init pos:start="21:25" pos:end="21:46">= <expr pos:start="21:27" pos:end="21:46"><call pos:start="21:27" pos:end="21:46"><name pos:start="21:27" pos:end="21:42">DEVICE_GET_CLASS</name><argument_list pos:start="21:43" pos:end="21:46">(<argument pos:start="21:44" pos:end="21:45"><expr pos:start="21:44" pos:end="21:45"><name pos:start="21:44" pos:end="21:45">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:44"><decl pos:start="23:9" pos:end="23:43"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:17">index</name> <init pos:start="23:19" pos:end="23:43">= <expr pos:start="23:21" pos:end="23:43"><call pos:start="23:21" pos:end="23:43"><name pos:start="23:21" pos:end="23:38">ppc_get_vcpu_dt_id</name><argument_list pos:start="23:39" pos:end="23:43">(<argument pos:start="23:40" pos:end="23:42"><expr pos:start="23:40" pos:end="23:42"><name pos:start="23:40" pos:end="23:42">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="35:56"><decl pos:start="25:9" pos:end="35:55"><type pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:16">uint32_t</name></type> <name pos:start="25:18" pos:end="25:32"><name pos:start="25:18" pos:end="25:30">associativity</name><index pos:start="25:31" pos:end="25:32">[]</index></name> <init pos:start="25:34" pos:end="35:55">= <expr pos:start="25:36" pos:end="35:55"><block pos:start="25:36" pos:end="35:55">{<expr pos:start="25:37" pos:end="25:52"><call pos:start="25:37" pos:end="25:52"><name pos:start="25:37" pos:end="25:47">cpu_to_be32</name><argument_list pos:start="25:48" pos:end="25:52">(<argument pos:start="25:49" pos:end="25:51"><expr pos:start="25:49" pos:end="25:51"><literal type="number" pos:start="25:49" pos:end="25:51">0x5</literal></expr></argument>)</argument_list></call></expr>,

                                    <expr pos:start="27:37" pos:end="27:52"><call pos:start="27:37" pos:end="27:52"><name pos:start="27:37" pos:end="27:47">cpu_to_be32</name><argument_list pos:start="27:48" pos:end="27:52">(<argument pos:start="27:49" pos:end="27:51"><expr pos:start="27:49" pos:end="27:51"><literal type="number" pos:start="27:49" pos:end="27:51">0x0</literal></expr></argument>)</argument_list></call></expr>,

                                    <expr pos:start="29:37" pos:end="29:52"><call pos:start="29:37" pos:end="29:52"><name pos:start="29:37" pos:end="29:47">cpu_to_be32</name><argument_list pos:start="29:48" pos:end="29:52">(<argument pos:start="29:49" pos:end="29:51"><expr pos:start="29:49" pos:end="29:51"><literal type="number" pos:start="29:49" pos:end="29:51">0x0</literal></expr></argument>)</argument_list></call></expr>,

                                    <expr pos:start="31:37" pos:end="31:52"><call pos:start="31:37" pos:end="31:52"><name pos:start="31:37" pos:end="31:47">cpu_to_be32</name><argument_list pos:start="31:48" pos:end="31:52">(<argument pos:start="31:49" pos:end="31:51"><expr pos:start="31:49" pos:end="31:51"><literal type="number" pos:start="31:49" pos:end="31:51">0x0</literal></expr></argument>)</argument_list></call></expr>,

                                    <expr pos:start="33:37" pos:end="33:62"><call pos:start="33:37" pos:end="33:62"><name pos:start="33:37" pos:end="33:47">cpu_to_be32</name><argument_list pos:start="33:48" pos:end="33:62">(<argument pos:start="33:49" pos:end="33:61"><expr pos:start="33:49" pos:end="33:61"><name pos:start="33:49" pos:end="33:61"><name pos:start="33:49" pos:end="33:50">cs</name><operator pos:start="33:51" pos:end="33:52">-&gt;</operator><name pos:start="33:53" pos:end="33:61">numa_node</name></name></expr></argument>)</argument_list></call></expr>,

                                    <macro pos:start="35:37" pos:end="35:54"><name pos:start="35:37" pos:end="35:47">cpu_to_be32</name><argument_list pos:start="35:48" pos:end="35:54">(<argument pos:start="35:49" pos:end="35:53">index</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:31">(<expr pos:start="39:13" pos:end="39:30"><operator pos:start="39:13" pos:end="39:13">(</operator><name pos:start="39:14" pos:end="39:18">index</name> <operator pos:start="39:20" pos:end="39:20">%</operator> <name pos:start="39:22" pos:end="39:24">smt</name><operator pos:start="39:25" pos:end="39:25">)</operator> <operator pos:start="39:27" pos:end="39:28">!=</operator> <literal type="number" pos:start="39:30" pos:end="39:30">0</literal></expr>)</condition> <block pos:start="39:33" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:21">

            <continue pos:start="41:13" pos:end="41:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:61"><expr pos:start="47:9" pos:end="47:60"><call pos:start="47:9" pos:end="47:60"><name pos:start="47:9" pos:end="47:16">snprintf</name><argument_list pos:start="47:17" pos:end="47:60">(<argument pos:start="47:18" pos:end="47:26"><expr pos:start="47:18" pos:end="47:26"><name pos:start="47:18" pos:end="47:26">cpu_model</name></expr></argument>, <argument pos:start="47:29" pos:end="47:30"><expr pos:start="47:29" pos:end="47:30"><literal type="number" pos:start="47:29" pos:end="47:30">32</literal></expr></argument>, <argument pos:start="47:33" pos:end="47:39"><expr pos:start="47:33" pos:end="47:39"><literal type="string" pos:start="47:33" pos:end="47:39">"%s@%x"</literal></expr></argument>, <argument pos:start="47:42" pos:end="47:52"><expr pos:start="47:42" pos:end="47:52"><name pos:start="47:42" pos:end="47:52"><name pos:start="47:42" pos:end="47:43">dc</name><operator pos:start="47:44" pos:end="47:45">-&gt;</operator><name pos:start="47:46" pos:end="47:52">fw_name</name></name></expr></argument>, <argument pos:start="47:55" pos:end="47:59"><expr pos:start="47:55" pos:end="47:59"><name pos:start="47:55" pos:end="47:59">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:52"><expr pos:start="51:9" pos:end="51:51"><name pos:start="51:9" pos:end="51:19">cpus_offset</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <call pos:start="51:23" pos:end="51:51"><name pos:start="51:23" pos:end="51:37">fdt_path_offset</name><argument_list pos:start="51:38" pos:end="51:51">(<argument pos:start="51:39" pos:end="51:41"><expr pos:start="51:39" pos:end="51:41"><name pos:start="51:39" pos:end="51:41">fdt</name></expr></argument>, <argument pos:start="51:44" pos:end="51:50"><expr pos:start="51:44" pos:end="51:50"><literal type="string" pos:start="51:44" pos:end="51:50">"/cpus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="65:9"><if pos:start="53:9" pos:end="65:9">if <condition pos:start="53:12" pos:end="53:28">(<expr pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:23">cpus_offset</name> <operator pos:start="53:25" pos:end="53:25">&lt;</operator> <literal type="number" pos:start="53:27" pos:end="53:27">0</literal></expr>)</condition> <block pos:start="53:30" pos:end="65:9">{<block_content pos:start="55:13" pos:end="63:13">

            <expr_stmt pos:start="55:13" pos:end="57:50"><expr pos:start="55:13" pos:end="57:49"><name pos:start="55:13" pos:end="55:23">cpus_offset</name> <operator pos:start="55:25" pos:end="55:25">=</operator> <call pos:start="55:27" pos:end="57:49"><name pos:start="55:27" pos:end="55:41">fdt_add_subnode</name><argument_list pos:start="55:42" pos:end="57:49">(<argument pos:start="55:43" pos:end="55:45"><expr pos:start="55:43" pos:end="55:45"><name pos:start="55:43" pos:end="55:45">fdt</name></expr></argument>, <argument pos:start="55:48" pos:end="55:72"><expr pos:start="55:48" pos:end="55:72"><call pos:start="55:48" pos:end="55:72"><name pos:start="55:48" pos:end="55:62">fdt_path_offset</name><argument_list pos:start="55:63" pos:end="55:72">(<argument pos:start="55:64" pos:end="55:66"><expr pos:start="55:64" pos:end="55:66"><name pos:start="55:64" pos:end="55:66">fdt</name></expr></argument>, <argument pos:start="55:69" pos:end="55:71"><expr pos:start="55:69" pos:end="55:71"><literal type="string" pos:start="55:69" pos:end="55:71">"/"</literal></expr></argument>)</argument_list></call></expr></argument>,

                                          <argument pos:start="57:43" pos:end="57:48"><expr pos:start="57:43" pos:end="57:48"><literal type="string" pos:start="57:43" pos:end="57:48">"cpus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="63:13"><if pos:start="59:13" pos:end="63:13">if <condition pos:start="59:16" pos:end="59:32">(<expr pos:start="59:17" pos:end="59:31"><name pos:start="59:17" pos:end="59:27">cpus_offset</name> <operator pos:start="59:29" pos:end="59:29">&lt;</operator> <literal type="number" pos:start="59:31" pos:end="59:31">0</literal></expr>)</condition> <block pos:start="59:34" pos:end="63:13">{<block_content pos:start="61:17" pos:end="61:35">

                <return pos:start="61:17" pos:end="61:35">return <expr pos:start="61:24" pos:end="61:34"><name pos:start="61:24" pos:end="61:34">cpus_offset</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:65"><expr pos:start="67:9" pos:end="67:64"><name pos:start="67:9" pos:end="67:14">offset</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:64"><name pos:start="67:18" pos:end="67:35">fdt_subnode_offset</name><argument_list pos:start="67:36" pos:end="67:64">(<argument pos:start="67:37" pos:end="67:39"><expr pos:start="67:37" pos:end="67:39"><name pos:start="67:37" pos:end="67:39">fdt</name></expr></argument>, <argument pos:start="67:42" pos:end="67:52"><expr pos:start="67:42" pos:end="67:52"><name pos:start="67:42" pos:end="67:52">cpus_offset</name></expr></argument>, <argument pos:start="67:55" pos:end="67:63"><expr pos:start="67:55" pos:end="67:63"><name pos:start="67:55" pos:end="67:63">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="79:9"><if pos:start="69:9" pos:end="79:9">if <condition pos:start="69:12" pos:end="69:23">(<expr pos:start="69:13" pos:end="69:22"><name pos:start="69:13" pos:end="69:18">offset</name> <operator pos:start="69:20" pos:end="69:20">&lt;</operator> <literal type="number" pos:start="69:22" pos:end="69:22">0</literal></expr>)</condition> <block pos:start="69:25" pos:end="79:9">{<block_content pos:start="71:13" pos:end="77:13">

            <expr_stmt pos:start="71:13" pos:end="71:66"><expr pos:start="71:13" pos:end="71:65"><name pos:start="71:13" pos:end="71:18">offset</name> <operator pos:start="71:20" pos:end="71:20">=</operator> <call pos:start="71:22" pos:end="71:65"><name pos:start="71:22" pos:end="71:36">fdt_add_subnode</name><argument_list pos:start="71:37" pos:end="71:65">(<argument pos:start="71:38" pos:end="71:40"><expr pos:start="71:38" pos:end="71:40"><name pos:start="71:38" pos:end="71:40">fdt</name></expr></argument>, <argument pos:start="71:43" pos:end="71:53"><expr pos:start="71:43" pos:end="71:53"><name pos:start="71:43" pos:end="71:53">cpus_offset</name></expr></argument>, <argument pos:start="71:56" pos:end="71:64"><expr pos:start="71:56" pos:end="71:64"><name pos:start="71:56" pos:end="71:64">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="77:13"><if pos:start="73:13" pos:end="77:13">if <condition pos:start="73:16" pos:end="73:27">(<expr pos:start="73:17" pos:end="73:26"><name pos:start="73:17" pos:end="73:22">offset</name> <operator pos:start="73:24" pos:end="73:24">&lt;</operator> <literal type="number" pos:start="73:26" pos:end="73:26">0</literal></expr>)</condition> <block pos:start="73:29" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:30">

                <return pos:start="75:17" pos:end="75:30">return <expr pos:start="75:24" pos:end="75:29"><name pos:start="75:24" pos:end="75:29">offset</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="83:9" pos:end="95:9"><if pos:start="83:9" pos:end="95:9">if <condition pos:start="83:12" pos:end="83:30">(<expr pos:start="83:13" pos:end="83:29"><name pos:start="83:13" pos:end="83:25">nb_numa_nodes</name> <operator pos:start="83:27" pos:end="83:27">&gt;</operator> <literal type="number" pos:start="83:29" pos:end="83:29">1</literal></expr>)</condition> <block pos:start="83:32" pos:end="95:9">{<block_content pos:start="85:13" pos:end="93:13">

            <expr_stmt pos:start="85:13" pos:end="87:53"><expr pos:start="85:13" pos:end="87:52"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="87:52"><name pos:start="85:19" pos:end="85:29">fdt_setprop</name><argument_list pos:start="85:30" pos:end="87:52">(<argument pos:start="85:31" pos:end="85:33"><expr pos:start="85:31" pos:end="85:33"><name pos:start="85:31" pos:end="85:33">fdt</name></expr></argument>, <argument pos:start="85:36" pos:end="85:41"><expr pos:start="85:36" pos:end="85:41"><name pos:start="85:36" pos:end="85:41">offset</name></expr></argument>, <argument pos:start="85:44" pos:end="85:62"><expr pos:start="85:44" pos:end="85:62"><literal type="string" pos:start="85:44" pos:end="85:62">"ibm,associativity"</literal></expr></argument>, <argument pos:start="85:65" pos:end="85:77"><expr pos:start="85:65" pos:end="85:77"><name pos:start="85:65" pos:end="85:77">associativity</name></expr></argument>,

                              <argument pos:start="87:31" pos:end="87:51"><expr pos:start="87:31" pos:end="87:51"><sizeof pos:start="87:31" pos:end="87:51">sizeof<argument_list pos:start="87:37" pos:end="87:51">(<argument pos:start="87:38" pos:end="87:50"><expr pos:start="87:38" pos:end="87:50"><name pos:start="87:38" pos:end="87:50">associativity</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="93:13"><if pos:start="89:13" pos:end="93:13">if <condition pos:start="89:16" pos:end="89:24">(<expr pos:start="89:17" pos:end="89:23"><name pos:start="89:17" pos:end="89:19">ret</name> <operator pos:start="89:21" pos:end="89:21">&lt;</operator> <literal type="number" pos:start="89:23" pos:end="89:23">0</literal></expr>)</condition> <block pos:start="89:26" pos:end="93:13">{<block_content pos:start="91:17" pos:end="91:27">

                <return pos:start="91:17" pos:end="91:27">return <expr pos:start="91:24" pos:end="91:26"><name pos:start="91:24" pos:end="91:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="99:9" pos:end="101:64"><expr pos:start="99:9" pos:end="101:63"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <call pos:start="99:15" pos:end="101:63"><name pos:start="99:15" pos:end="99:25">fdt_setprop</name><argument_list pos:start="99:26" pos:end="101:63">(<argument pos:start="99:27" pos:end="99:29"><expr pos:start="99:27" pos:end="99:29"><name pos:start="99:27" pos:end="99:29">fdt</name></expr></argument>, <argument pos:start="99:32" pos:end="99:37"><expr pos:start="99:32" pos:end="99:37"><name pos:start="99:32" pos:end="99:37">offset</name></expr></argument>, <argument pos:start="99:40" pos:end="99:53"><expr pos:start="99:40" pos:end="99:53"><literal type="string" pos:start="99:40" pos:end="99:53">"ibm,pft-size"</literal></expr></argument>,

                          <argument pos:start="101:27" pos:end="101:39"><expr pos:start="101:27" pos:end="101:39"><name pos:start="101:27" pos:end="101:39">pft_size_prop</name></expr></argument>, <argument pos:start="101:42" pos:end="101:62"><expr pos:start="101:42" pos:end="101:62"><sizeof pos:start="101:42" pos:end="101:62">sizeof<argument_list pos:start="101:48" pos:end="101:62">(<argument pos:start="101:49" pos:end="101:61"><expr pos:start="101:49" pos:end="101:61"><name pos:start="101:49" pos:end="101:61">pft_size_prop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:20">(<expr pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:15">ret</name> <operator pos:start="103:17" pos:end="103:17">&lt;</operator> <literal type="number" pos:start="103:19" pos:end="103:19">0</literal></expr>)</condition> <block pos:start="103:22" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:23">

            <return pos:start="105:13" pos:end="105:23">return <expr pos:start="105:20" pos:end="105:22"><name pos:start="105:20" pos:end="105:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="111:9" pos:end="113:50"><expr pos:start="111:9" pos:end="113:49"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="113:49"><name pos:start="111:15" pos:end="111:36">spapr_fixup_cpu_smt_dt</name><argument_list pos:start="111:37" pos:end="113:49">(<argument pos:start="111:38" pos:end="111:40"><expr pos:start="111:38" pos:end="111:40"><name pos:start="111:38" pos:end="111:40">fdt</name></expr></argument>, <argument pos:start="111:43" pos:end="111:48"><expr pos:start="111:43" pos:end="111:48"><name pos:start="111:43" pos:end="111:48">offset</name></expr></argument>, <argument pos:start="111:51" pos:end="111:53"><expr pos:start="111:51" pos:end="111:53"><name pos:start="111:51" pos:end="111:53">cpu</name></expr></argument>,

                                     <argument pos:start="113:38" pos:end="113:48"><expr pos:start="113:38" pos:end="113:48"><name pos:start="113:38" pos:end="113:48">smp_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:20">(<expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">&lt;</operator> <literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr>)</condition> <block pos:start="115:22" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:23">

            <return pos:start="117:13" pos:end="117:23">return <expr pos:start="117:20" pos:end="117:22"><name pos:start="117:20" pos:end="117:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <return pos:start="123:5" pos:end="123:15">return <expr pos:start="123:12" pos:end="123:14"><name pos:start="123:12" pos:end="123:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
