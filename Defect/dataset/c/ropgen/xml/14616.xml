<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14616.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">bool</name></type> <name pos:start="1:6" pos:end="1:17">cpu_exec_all</name><parameter_list pos:start="1:18" pos:end="1:23">(<parameter pos:start="1:19" pos:end="1:22"><decl pos:start="1:19" pos:end="1:22"><type pos:start="1:19" pos:end="1:22"><name pos:start="1:19" pos:end="1:22">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:35">

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">r</name></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="9:49">/* Account partial waits to the vm_clock.  */</comment>

    <expr_stmt pos:start="11:5" pos:end="11:30"><expr pos:start="11:5" pos:end="11:29"><call pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:19">qemu_clock_warp</name><argument_list pos:start="11:20" pos:end="11:29">(<argument pos:start="11:21" pos:end="11:28"><expr pos:start="11:21" pos:end="11:28"><name pos:start="11:21" pos:end="11:28">vm_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:25">(<expr pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:16">next_cpu</name> <operator pos:start="15:18" pos:end="15:19">==</operator> <name pos:start="15:21" pos:end="15:24">NULL</name></expr>)</condition> <block pos:start="15:27" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:29">

        <expr_stmt pos:start="17:9" pos:end="17:29"><expr pos:start="17:9" pos:end="17:28"><name pos:start="17:9" pos:end="17:16">next_cpu</name> <operator pos:start="17:18" pos:end="17:18">=</operator> <name pos:start="17:20" pos:end="17:28">first_cpu</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="21:5" pos:end="71:5">for <control pos:start="21:9" pos:end="21:76">(<init pos:start="21:10" pos:end="21:10">;</init> <condition pos:start="21:12" pos:end="21:45"><expr pos:start="21:12" pos:end="21:44"><name pos:start="21:12" pos:end="21:19">next_cpu</name> <operator pos:start="21:21" pos:end="21:22">!=</operator> <name pos:start="21:24" pos:end="21:27">NULL</name> <operator pos:start="21:29" pos:end="21:30">&amp;&amp;</operator> <operator pos:start="21:32" pos:end="21:32">!</operator><name pos:start="21:33" pos:end="21:44">exit_request</name></expr>;</condition> <incr pos:start="21:47" pos:end="21:75"><expr pos:start="21:47" pos:end="21:75"><name pos:start="21:47" pos:end="21:54">next_cpu</name> <operator pos:start="21:56" pos:end="21:56">=</operator> <name pos:start="21:58" pos:end="21:75"><name pos:start="21:58" pos:end="21:65">next_cpu</name><operator pos:start="21:66" pos:end="21:67">-&gt;</operator><name pos:start="21:68" pos:end="21:75">next_cpu</name></name></expr></incr>)</control> <block pos:start="21:78" pos:end="71:5">{<block_content pos:start="23:9" pos:end="69:9">

        <decl_stmt pos:start="23:9" pos:end="23:33"><decl pos:start="23:9" pos:end="23:32"><type pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:16">CPUState</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:21">env</name> <init pos:start="23:23" pos:end="23:32">= <expr pos:start="23:25" pos:end="23:32"><name pos:start="23:25" pos:end="23:32">next_cpu</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="27:9" pos:end="34:0"><expr pos:start="27:9" pos:end="29:73"><call pos:start="27:9" pos:end="29:73"><name pos:start="27:9" pos:end="27:25">qemu_clock_enable</name><argument_list pos:start="27:26" pos:end="29:73">(<argument pos:start="27:27" pos:end="27:34"><expr pos:start="27:27" pos:end="27:34"><name pos:start="27:27" pos:end="27:34">vm_clock</name></expr></argument>,

                          <argument pos:start="29:27" pos:end="29:72"><expr pos:start="29:27" pos:end="29:72"><operator pos:start="29:27" pos:end="29:27">(</operator><name pos:start="29:28" pos:end="29:50"><name pos:start="29:28" pos:end="29:30">env</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:50">singlestep_enabled</name></name> <operator pos:start="29:52" pos:end="29:52">&amp;</operator> <name pos:start="29:54" pos:end="29:66">SSTEP_NOTIMER</name><operator pos:start="29:67" pos:end="29:67">)</operator> <operator pos:start="29:69" pos:end="29:70">==</operator> <literal type="number" pos:start="29:72" pos:end="29:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifndef pos:start="33:1" pos:end="33:23">#<cpp:directive pos:start="33:2" pos:end="33:7">ifndef</cpp:directive> <name pos:start="33:9" pos:end="33:23">CONFIG_IOTHREAD</name></cpp:ifndef>

        <if_stmt pos:start="35:9" pos:end="42:0"><if pos:start="35:9" pos:end="42:0">if <condition pos:start="35:12" pos:end="35:33">(<expr pos:start="35:13" pos:end="35:32"><call pos:start="35:13" pos:end="35:32"><name pos:start="35:13" pos:end="35:30">qemu_alarm_pending</name><argument_list pos:start="35:31" pos:end="35:32">()</argument_list></call></expr>)</condition> <block pos:start="35:35" pos:end="42:0">{<block_content pos:start="37:13" pos:end="37:18">

            <break pos:start="37:13" pos:end="37:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="43:9" pos:end="69:9"><if pos:start="43:9" pos:end="65:9">if <condition pos:start="43:12" pos:end="43:29">(<expr pos:start="43:13" pos:end="43:28"><call pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:23">cpu_can_run</name><argument_list pos:start="43:24" pos:end="43:28">(<argument pos:start="43:25" pos:end="43:27"><expr pos:start="43:25" pos:end="43:27"><name pos:start="43:25" pos:end="43:27">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:31" pos:end="65:9">{<block_content pos:start="45:13" pos:end="63:13">

            <if_stmt pos:start="45:13" pos:end="55:13"><if pos:start="45:13" pos:end="51:13">if <condition pos:start="45:16" pos:end="45:30">(<expr pos:start="45:17" pos:end="45:29"><call pos:start="45:17" pos:end="45:29"><name pos:start="45:17" pos:end="45:27">kvm_enabled</name><argument_list pos:start="45:28" pos:end="45:29">()</argument_list></call></expr>)</condition> <block pos:start="45:32" pos:end="51:13">{<block_content pos:start="47:17" pos:end="49:42">

                <expr_stmt pos:start="47:17" pos:end="47:38"><expr pos:start="47:17" pos:end="47:37"><name pos:start="47:17" pos:end="47:17">r</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <call pos:start="47:21" pos:end="47:37"><name pos:start="47:21" pos:end="47:32">kvm_cpu_exec</name><argument_list pos:start="47:33" pos:end="47:37">(<argument pos:start="47:34" pos:end="47:36"><expr pos:start="47:34" pos:end="47:36"><name pos:start="47:34" pos:end="47:36">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="49:17" pos:end="49:42"><expr pos:start="49:17" pos:end="49:41"><call pos:start="49:17" pos:end="49:41"><name pos:start="49:17" pos:end="49:36">qemu_kvm_eat_signals</name><argument_list pos:start="49:37" pos:end="49:41">(<argument pos:start="49:38" pos:end="49:40"><expr pos:start="49:38" pos:end="49:40"><name pos:start="49:38" pos:end="49:40">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="51:15" pos:end="55:13">else <block pos:start="51:20" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:38">

                <expr_stmt pos:start="53:17" pos:end="53:38"><expr pos:start="53:17" pos:end="53:37"><name pos:start="53:17" pos:end="53:17">r</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <call pos:start="53:21" pos:end="53:37"><name pos:start="53:21" pos:end="53:32">tcg_cpu_exec</name><argument_list pos:start="53:33" pos:end="53:37">(<argument pos:start="53:34" pos:end="53:36"><expr pos:start="53:34" pos:end="53:36"><name pos:start="53:34" pos:end="53:36">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="57:13" pos:end="63:13"><if pos:start="57:13" pos:end="63:13">if <condition pos:start="57:16" pos:end="57:32">(<expr pos:start="57:17" pos:end="57:31"><name pos:start="57:17" pos:end="57:17">r</name> <operator pos:start="57:19" pos:end="57:20">==</operator> <name pos:start="57:22" pos:end="57:31">EXCP_DEBUG</name></expr>)</condition> <block pos:start="57:34" pos:end="63:13">{<block_content pos:start="59:17" pos:end="61:22">

                <expr_stmt pos:start="59:17" pos:end="59:44"><expr pos:start="59:17" pos:end="59:43"><call pos:start="59:17" pos:end="59:43"><name pos:start="59:17" pos:end="59:38">cpu_handle_guest_debug</name><argument_list pos:start="59:39" pos:end="59:43">(<argument pos:start="59:40" pos:end="59:42"><expr pos:start="59:40" pos:end="59:42"><name pos:start="59:40" pos:end="59:42">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="61:17" pos:end="61:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="65:11" pos:end="69:9">else if <condition pos:start="65:19" pos:end="65:45">(<expr pos:start="65:20" pos:end="65:44"><name pos:start="65:20" pos:end="65:28"><name pos:start="65:20" pos:end="65:22">env</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:28">stop</name></name> <operator pos:start="65:30" pos:end="65:31">||</operator> <name pos:start="65:33" pos:end="65:44"><name pos:start="65:33" pos:end="65:35">env</name><operator pos:start="65:36" pos:end="65:37">-&gt;</operator><name pos:start="65:38" pos:end="65:44">stopped</name></name></expr>)</condition> <block pos:start="65:47" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:18">

            <break pos:start="67:13" pos:end="67:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="73:5" pos:end="73:21"><expr pos:start="73:5" pos:end="73:20"><name pos:start="73:5" pos:end="73:16">exit_request</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <literal type="number" pos:start="73:20" pos:end="73:20">0</literal></expr>;</expr_stmt>

    <return pos:start="75:5" pos:end="75:35">return <expr pos:start="75:12" pos:end="75:34"><operator pos:start="75:12" pos:end="75:12">!</operator><call pos:start="75:13" pos:end="75:34"><name pos:start="75:13" pos:end="75:32">all_cpu_threads_idle</name><argument_list pos:start="75:33" pos:end="75:34">()</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
