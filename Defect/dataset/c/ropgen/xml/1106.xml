<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1106.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:40">guest_phys_blocks_region_add</name><parameter_list pos:start="1:41" pos:end="3:70">(<parameter pos:start="1:42" pos:end="1:65"><decl pos:start="1:42" pos:end="1:65"><type pos:start="1:42" pos:end="1:65"><name pos:start="1:42" pos:end="1:55">MemoryListener</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:65">listener</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:69"><decl pos:start="3:42" pos:end="3:69"><type pos:start="3:42" pos:end="3:69"><name pos:start="3:42" pos:end="3:60">MemoryRegionSection</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:69">section</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="129:1">{<block_content pos:start="7:5" pos:end="128:0">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">GuestPhysListener</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:24">g</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:25">section_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">hwaddr</name></type> <name pos:start="11:12" pos:end="11:23">target_start</name></decl>, <decl pos:start="11:26" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:10"/><name pos:start="11:26" pos:end="11:35">target_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:22">host_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:18">GuestPhysBlock</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:31">predecessor</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:32">/* we only care about RAM */</comment>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="23:48">(<expr pos:start="21:9" pos:end="23:47"><operator pos:start="21:9" pos:end="21:9">!</operator><call pos:start="21:10" pos:end="21:42"><name pos:start="21:10" pos:end="21:29">memory_region_is_ram</name><argument_list pos:start="21:30" pos:end="21:42">(<argument pos:start="21:31" pos:end="21:41"><expr pos:start="21:31" pos:end="21:41"><name pos:start="21:31" pos:end="21:41"><name pos:start="21:31" pos:end="21:37">section</name><operator pos:start="21:38" pos:end="21:39">-&gt;</operator><name pos:start="21:40" pos:end="21:41">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="21:44" pos:end="21:45">||</operator>

        <call pos:start="23:9" pos:end="23:47"><name pos:start="23:9" pos:end="23:34">memory_region_is_skip_dump</name><argument_list pos:start="23:35" pos:end="23:47">(<argument pos:start="23:36" pos:end="23:46"><expr pos:start="23:36" pos:end="23:46"><name pos:start="23:36" pos:end="23:46"><name pos:start="23:36" pos:end="23:42">section</name><operator pos:start="23:43" pos:end="23:44">-&gt;</operator><name pos:start="23:45" pos:end="23:46">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:50" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:15">

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:71"><expr pos:start="31:5" pos:end="31:70"><name pos:start="31:5" pos:end="31:5">g</name>            <operator pos:start="31:18" pos:end="31:18">=</operator> <call pos:start="31:20" pos:end="31:70"><name pos:start="31:20" pos:end="31:31">container_of</name><argument_list pos:start="31:32" pos:end="31:70">(<argument pos:start="31:33" pos:end="31:40"><expr pos:start="31:33" pos:end="31:40"><name pos:start="31:33" pos:end="31:40">listener</name></expr></argument>, <argument pos:start="31:43" pos:end="31:59"><expr pos:start="31:43" pos:end="31:59"><name pos:start="31:43" pos:end="31:59">GuestPhysListener</name></expr></argument>, <argument pos:start="31:62" pos:end="31:69"><expr pos:start="31:62" pos:end="31:69"><name pos:start="31:62" pos:end="31:69">listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:47"><expr pos:start="33:5" pos:end="33:46"><name pos:start="33:5" pos:end="33:16">section_size</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:46"><name pos:start="33:20" pos:end="33:31">int128_get64</name><argument_list pos:start="33:32" pos:end="33:46">(<argument pos:start="33:33" pos:end="33:45"><expr pos:start="33:33" pos:end="33:45"><name pos:start="33:33" pos:end="33:45"><name pos:start="33:33" pos:end="33:39">section</name><operator pos:start="33:40" pos:end="33:41">-&gt;</operator><name pos:start="33:42" pos:end="33:45">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:56"><expr pos:start="35:5" pos:end="35:55"><name pos:start="35:5" pos:end="35:16">target_start</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <name pos:start="35:20" pos:end="35:55"><name pos:start="35:20" pos:end="35:26">section</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:55">offset_within_address_space</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:47"><expr pos:start="37:5" pos:end="37:46"><name pos:start="37:5" pos:end="37:14">target_end</name>   <operator pos:start="37:18" pos:end="37:18">=</operator> <name pos:start="37:20" pos:end="37:31">target_start</name> <operator pos:start="37:33" pos:end="37:33">+</operator> <name pos:start="37:35" pos:end="37:46">section_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="41:49"><expr pos:start="39:5" pos:end="41:48"><name pos:start="39:5" pos:end="39:13">host_addr</name>    <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:57"><name pos:start="39:20" pos:end="39:44">memory_region_get_ram_ptr</name><argument_list pos:start="39:45" pos:end="39:57">(<argument pos:start="39:46" pos:end="39:56"><expr pos:start="39:46" pos:end="39:56"><name pos:start="39:46" pos:end="39:56"><name pos:start="39:46" pos:end="39:52">section</name><operator pos:start="39:53" pos:end="39:54">-&gt;</operator><name pos:start="39:55" pos:end="39:56">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="39:59" pos:end="39:59">+</operator>

                   <name pos:start="41:20" pos:end="41:48"><name pos:start="41:20" pos:end="41:26">section</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:48">offset_within_region</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:24"><expr pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:15">predecessor</name>  <operator pos:start="43:18" pos:end="43:18">=</operator> <name pos:start="43:20" pos:end="43:23">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:57">/* find continuity in guest physical address space */</comment>

    <if_stmt pos:start="49:5" pos:end="77:5"><if pos:start="49:5" pos:end="77:5">if <condition pos:start="49:8" pos:end="49:38">(<expr pos:start="49:9" pos:end="49:37"><operator pos:start="49:9" pos:end="49:9">!</operator><call pos:start="49:10" pos:end="49:37"><name pos:start="49:10" pos:end="49:21">QTAILQ_EMPTY</name><argument_list pos:start="49:22" pos:end="49:37">(<argument pos:start="49:23" pos:end="49:36"><expr pos:start="49:23" pos:end="49:36"><operator pos:start="49:23" pos:end="49:23">&amp;</operator><name pos:start="49:24" pos:end="49:36"><name pos:start="49:24" pos:end="49:24">g</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:30">list</name><operator pos:start="49:31" pos:end="49:32">-&gt;</operator><name pos:start="49:33" pos:end="49:36">head</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:40" pos:end="77:5">{<block_content pos:start="51:9" pos:end="75:9">

        <decl_stmt pos:start="51:9" pos:end="51:32"><decl pos:start="51:9" pos:end="51:31"><type pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:14">hwaddr</name></type> <name pos:start="51:16" pos:end="51:31">predecessor_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:70"><expr pos:start="55:9" pos:end="55:69"><name pos:start="55:9" pos:end="55:19">predecessor</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <call pos:start="55:23" pos:end="55:69"><name pos:start="55:23" pos:end="55:33">QTAILQ_LAST</name><argument_list pos:start="55:34" pos:end="55:69">(<argument pos:start="55:35" pos:end="55:48"><expr pos:start="55:35" pos:end="55:48"><operator pos:start="55:35" pos:end="55:35">&amp;</operator><name pos:start="55:36" pos:end="55:48"><name pos:start="55:36" pos:end="55:36">g</name><operator pos:start="55:37" pos:end="55:38">-&gt;</operator><name pos:start="55:39" pos:end="55:42">list</name><operator pos:start="55:43" pos:end="55:44">-&gt;</operator><name pos:start="55:45" pos:end="55:48">head</name></name></expr></argument>, <argument pos:start="55:51" pos:end="55:68"><expr pos:start="55:51" pos:end="55:68"><name pos:start="55:51" pos:end="55:68">GuestPhysBlockHead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:79"><expr pos:start="57:9" pos:end="57:78"><name pos:start="57:9" pos:end="57:24">predecessor_size</name> <operator pos:start="57:26" pos:end="57:26">=</operator> <name pos:start="57:28" pos:end="57:50"><name pos:start="57:28" pos:end="57:38">predecessor</name><operator pos:start="57:39" pos:end="57:40">-&gt;</operator><name pos:start="57:41" pos:end="57:50">target_end</name></name> <operator pos:start="57:52" pos:end="57:52">-</operator> <name pos:start="57:54" pos:end="57:78"><name pos:start="57:54" pos:end="57:64">predecessor</name><operator pos:start="57:65" pos:end="57:66">-&gt;</operator><name pos:start="57:67" pos:end="57:78">target_start</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="61:9" pos:end="61:74">/* the memory API guarantees monotonically increasing traversal */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:58"><expr pos:start="63:9" pos:end="63:57"><call pos:start="63:9" pos:end="63:57"><name pos:start="63:9" pos:end="63:16">g_assert</name><argument_list pos:start="63:17" pos:end="63:57">(<argument pos:start="63:18" pos:end="63:56"><expr pos:start="63:18" pos:end="63:56"><name pos:start="63:18" pos:end="63:40"><name pos:start="63:18" pos:end="63:28">predecessor</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:40">target_end</name></name> <operator pos:start="63:42" pos:end="63:43">&lt;=</operator> <name pos:start="63:45" pos:end="63:56">target_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="67:9" pos:end="67:79">/* we want continuity in both guest-physical and host-virtual memory */</comment>

        <if_stmt pos:start="69:9" pos:end="75:9"><if pos:start="69:9" pos:end="75:9">if <condition pos:start="69:12" pos:end="71:67">(<expr pos:start="69:13" pos:end="71:66"><name pos:start="69:13" pos:end="69:35"><name pos:start="69:13" pos:end="69:23">predecessor</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:35">target_end</name></name> <operator pos:start="69:37" pos:end="69:37">&lt;</operator> <name pos:start="69:39" pos:end="69:50">target_start</name> <operator pos:start="69:52" pos:end="69:53">||</operator>

            <name pos:start="71:13" pos:end="71:34"><name pos:start="71:13" pos:end="71:23">predecessor</name><operator pos:start="71:24" pos:end="71:25">-&gt;</operator><name pos:start="71:26" pos:end="71:34">host_addr</name></name> <operator pos:start="71:36" pos:end="71:36">+</operator> <name pos:start="71:38" pos:end="71:53">predecessor_size</name> <operator pos:start="71:55" pos:end="71:56">!=</operator> <name pos:start="71:58" pos:end="71:66">host_addr</name></expr>)</condition> <block pos:start="71:69" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:31">

            <expr_stmt pos:start="73:13" pos:end="73:31"><expr pos:start="73:13" pos:end="73:30"><name pos:start="73:13" pos:end="73:23">predecessor</name> <operator pos:start="73:25" pos:end="73:25">=</operator> <name pos:start="73:27" pos:end="73:30">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="81:5" pos:end="120:0"><if pos:start="81:5" pos:end="105:5">if <condition pos:start="81:8" pos:end="81:28">(<expr pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:19">predecessor</name> <operator pos:start="81:21" pos:end="81:22">==</operator> <name pos:start="81:24" pos:end="81:27">NULL</name></expr>)</condition> <block pos:start="81:30" pos:end="105:5">{<block_content pos:start="85:9" pos:end="103:23">

        <comment type="block" pos:start="83:9" pos:end="83:66">/* isolated mapping, allocate it and add it to the list */</comment>

        <decl_stmt pos:start="85:9" pos:end="85:57"><decl pos:start="85:9" pos:end="85:56"><type pos:start="85:9" pos:end="85:24"><name pos:start="85:9" pos:end="85:22">GuestPhysBlock</name> <modifier pos:start="85:24" pos:end="85:24">*</modifier></type><name pos:start="85:25" pos:end="85:29">block</name> <init pos:start="85:31" pos:end="85:56">= <expr pos:start="85:33" pos:end="85:56"><call pos:start="85:33" pos:end="85:56"><name pos:start="85:33" pos:end="85:41">g_malloc0</name><argument_list pos:start="85:42" pos:end="85:56">(<argument pos:start="85:43" pos:end="85:55"><expr pos:start="85:43" pos:end="85:55"><sizeof pos:start="85:43" pos:end="85:48">sizeof <name/></sizeof>*<name pos:start="85:51" pos:end="85:55">block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:43"><expr pos:start="89:9" pos:end="89:42"><name pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:13">block</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:27">target_start</name></name> <operator pos:start="89:29" pos:end="89:29">=</operator> <name pos:start="89:31" pos:end="89:42">target_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:41"><expr pos:start="91:9" pos:end="91:40"><name pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:13">block</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:25">target_end</name></name>   <operator pos:start="91:29" pos:end="91:29">=</operator> <name pos:start="91:31" pos:end="91:40">target_end</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:40"><expr pos:start="93:9" pos:end="93:39"><name pos:start="93:9" pos:end="93:24"><name pos:start="93:9" pos:end="93:13">block</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:24">host_addr</name></name>    <operator pos:start="93:29" pos:end="93:29">=</operator> <name pos:start="93:31" pos:end="93:39">host_addr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:42"><expr pos:start="95:9" pos:end="95:41"><name pos:start="95:9" pos:end="95:17"><name pos:start="95:9" pos:end="95:13">block</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:17">mr</name></name>           <operator pos:start="95:29" pos:end="95:29">=</operator> <name pos:start="95:31" pos:end="95:41"><name pos:start="95:31" pos:end="95:37">section</name><operator pos:start="95:38" pos:end="95:39">-&gt;</operator><name pos:start="95:40" pos:end="95:41">mr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:39"><expr pos:start="97:9" pos:end="97:38"><call pos:start="97:9" pos:end="97:38"><name pos:start="97:9" pos:end="97:25">memory_region_ref</name><argument_list pos:start="97:26" pos:end="97:38">(<argument pos:start="97:27" pos:end="97:37"><expr pos:start="97:27" pos:end="97:37"><name pos:start="97:27" pos:end="97:37"><name pos:start="97:27" pos:end="97:33">section</name><operator pos:start="97:34" pos:end="97:35">-&gt;</operator><name pos:start="97:36" pos:end="97:37">mr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:56"><expr pos:start="101:9" pos:end="101:55"><call pos:start="101:9" pos:end="101:55"><name pos:start="101:9" pos:end="101:26">QTAILQ_INSERT_TAIL</name><argument_list pos:start="101:27" pos:end="101:55">(<argument pos:start="101:28" pos:end="101:41"><expr pos:start="101:28" pos:end="101:41"><operator pos:start="101:28" pos:end="101:28">&amp;</operator><name pos:start="101:29" pos:end="101:41"><name pos:start="101:29" pos:end="101:29">g</name><operator pos:start="101:30" pos:end="101:31">-&gt;</operator><name pos:start="101:32" pos:end="101:35">list</name><operator pos:start="101:36" pos:end="101:37">-&gt;</operator><name pos:start="101:38" pos:end="101:41">head</name></name></expr></argument>, <argument pos:start="101:44" pos:end="101:48"><expr pos:start="101:44" pos:end="101:48"><name pos:start="101:44" pos:end="101:48">block</name></expr></argument>, <argument pos:start="101:51" pos:end="101:54"><expr pos:start="101:51" pos:end="101:54"><name pos:start="101:51" pos:end="101:54">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:23"><expr pos:start="103:9" pos:end="103:22"><operator pos:start="103:9" pos:end="103:10">++</operator><name pos:start="103:11" pos:end="103:22"><name pos:start="103:11" pos:end="103:11">g</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:17">list</name><operator pos:start="103:18" pos:end="103:19">-&gt;</operator><name pos:start="103:20" pos:end="103:22">num</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="105:7" pos:end="120:0">else <block pos:start="105:12" pos:end="120:0">{<block_content pos:start="113:9" pos:end="113:45">

        <comment type="block" pos:start="107:9" pos:end="111:11">/* expand predecessor until @target_end; predecessor's start doesn't

         * change

         */</comment>

        <expr_stmt pos:start="113:9" pos:end="113:45"><expr pos:start="113:9" pos:end="113:44"><name pos:start="113:9" pos:end="113:31"><name pos:start="113:9" pos:end="113:19">predecessor</name><operator pos:start="113:20" pos:end="113:21">-&gt;</operator><name pos:start="113:22" pos:end="113:31">target_end</name></name> <operator pos:start="113:33" pos:end="113:33">=</operator> <name pos:start="113:35" pos:end="113:44">target_end</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<cpp:ifdef pos:start="119:1" pos:end="119:34">#<cpp:directive pos:start="119:2" pos:end="119:6">ifdef</cpp:directive> <name pos:start="119:8" pos:end="119:34">DEBUG_GUEST_PHYS_REGION_ADD</name></cpp:ifdef>

    <expr_stmt pos:start="121:5" pos:end="128:0"><expr pos:start="121:5" pos:end="125:71"><call pos:start="121:5" pos:end="125:71"><name pos:start="121:5" pos:end="121:11">fprintf</name><argument_list pos:start="121:12" pos:end="125:71">(<argument pos:start="121:13" pos:end="121:18"><expr pos:start="121:13" pos:end="121:18"><name pos:start="121:13" pos:end="121:18">stderr</name></expr></argument>, <argument pos:start="121:21" pos:end="123:47"><expr pos:start="121:21" pos:end="123:47"><literal type="string" pos:start="121:21" pos:end="121:39">"%s: target_start="</literal> <name pos:start="121:41" pos:end="121:54">TARGET_FMT_plx</name> <literal type="string" pos:start="121:56" pos:end="121:69">" target_end="</literal>

            <name pos:start="123:13" pos:end="123:26">TARGET_FMT_plx</name> <literal type="string" pos:start="123:28" pos:end="123:47">": %s (count: %u)\n"</literal></expr></argument>, <argument pos:start="123:50" pos:end="123:61"><expr pos:start="123:50" pos:end="123:61"><name pos:start="123:50" pos:end="123:61">__FUNCTION__</name></expr></argument>, <argument pos:start="123:64" pos:end="123:75"><expr pos:start="123:64" pos:end="123:75"><name pos:start="123:64" pos:end="123:75">target_start</name></expr></argument>,

            <argument pos:start="125:13" pos:end="125:22"><expr pos:start="125:13" pos:end="125:22"><name pos:start="125:13" pos:end="125:22">target_end</name></expr></argument>, <argument pos:start="125:25" pos:end="125:56"><expr pos:start="125:25" pos:end="125:56"><ternary pos:start="125:25" pos:end="125:56"><condition pos:start="125:25" pos:end="125:37"><expr pos:start="125:25" pos:end="125:35"><name pos:start="125:25" pos:end="125:35">predecessor</name></expr> ?</condition><then pos:start="125:39" pos:end="125:46"> <expr pos:start="125:39" pos:end="125:46"><literal type="string" pos:start="125:39" pos:end="125:46">"joined"</literal></expr> </then><else pos:start="125:48" pos:end="125:56">: <expr pos:start="125:50" pos:end="125:56"><literal type="string" pos:start="125:50" pos:end="125:56">"added"</literal></expr></else></ternary></expr></argument>, <argument pos:start="125:59" pos:end="125:70"><expr pos:start="125:59" pos:end="125:70"><name pos:start="125:59" pos:end="125:70"><name pos:start="125:59" pos:end="125:59">g</name><operator pos:start="125:60" pos:end="125:61">-&gt;</operator><name pos:start="125:62" pos:end="125:65">list</name><operator pos:start="125:66" pos:end="125:67">-&gt;</operator><name pos:start="125:68" pos:end="125:70">num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="127:1" pos:end="127:6">#<cpp:directive pos:start="127:2" pos:end="127:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
