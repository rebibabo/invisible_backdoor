<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27236.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">mpegvideo_probe</name><parameter_list pos:start="1:27" pos:end="1:42">(<parameter pos:start="1:28" pos:end="1:41"><decl pos:start="1:28" pos:end="1:41"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:38">AVProbeData</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:13">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:17">code</name><init pos:start="5:18" pos:end="5:21">= <expr pos:start="5:20" pos:end="5:21"><operator pos:start="5:20" pos:end="5:20">-</operator><literal type="number" pos:start="5:21" pos:end="5:21">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:72"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">pic</name><init pos:start="7:12" pos:end="7:13">=<expr pos:start="7:13" pos:end="7:13"><literal type="number" pos:start="7:13" pos:end="7:13">0</literal></expr></init></decl>, <decl pos:start="7:16" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:18">seq</name><init pos:start="7:19" pos:end="7:20">=<expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>, <decl pos:start="7:23" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:27">slice</name><init pos:start="7:28" pos:end="7:29">=<expr pos:start="7:29" pos:end="7:29"><literal type="number" pos:start="7:29" pos:end="7:29">0</literal></expr></init></decl>, <decl pos:start="7:32" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:32" pos:end="7:37">pspack</name><init pos:start="7:38" pos:end="7:39">=<expr pos:start="7:39" pos:end="7:39"><literal type="number" pos:start="7:39" pos:end="7:39">0</literal></expr></init></decl>, <decl pos:start="7:42" pos:end="7:47"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:42" pos:end="7:45">vpes</name><init pos:start="7:46" pos:end="7:47">=<expr pos:start="7:47" pos:end="7:47"><literal type="number" pos:start="7:47" pos:end="7:47">0</literal></expr></init></decl>, <decl pos:start="7:50" pos:end="7:55"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:50" pos:end="7:53">apes</name><init pos:start="7:54" pos:end="7:55">=<expr pos:start="7:55" pos:end="7:55"><literal type="number" pos:start="7:55" pos:end="7:55">0</literal></expr></init></decl>, <decl pos:start="7:58" pos:end="7:62"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:58" pos:end="7:60">res</name><init pos:start="7:61" pos:end="7:62">=<expr pos:start="7:62" pos:end="7:62"><literal type="number" pos:start="7:62" pos:end="7:62">0</literal></expr></init></decl>, <decl pos:start="7:65" pos:end="7:71"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:65" pos:end="7:69">sicle</name><init pos:start="7:70" pos:end="7:71">=<expr pos:start="7:71" pos:end="7:71"><literal type="number" pos:start="7:71" pos:end="7:71">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:17">last</name> <init pos:start="11:19" pos:end="11:21">= <expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">0</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="61:5">for<control pos:start="15:8" pos:end="15:32">(<init pos:start="15:9" pos:end="15:12"><expr pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:9">i</name><operator pos:start="15:10" pos:end="15:10">=</operator><literal type="number" pos:start="15:11" pos:end="15:11">0</literal></expr>;</init> <condition pos:start="15:14" pos:end="15:27"><expr pos:start="15:14" pos:end="15:26"><name pos:start="15:14" pos:end="15:14">i</name><operator pos:start="15:15" pos:end="15:15">&lt;</operator><name pos:start="15:16" pos:end="15:26"><name pos:start="15:16" pos:end="15:16">p</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:26">buf_size</name></name></expr>;</condition> <incr pos:start="15:29" pos:end="15:31"><expr pos:start="15:29" pos:end="15:31"><name pos:start="15:29" pos:end="15:29">i</name><operator pos:start="15:30" pos:end="15:31">++</operator></expr></incr>)</control><block pos:start="15:33" pos:end="61:5">{<block_content pos:start="17:9" pos:end="59:9">

        <expr_stmt pos:start="17:9" pos:end="17:37"><expr pos:start="17:9" pos:end="17:36"><name pos:start="17:9" pos:end="17:12">code</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <operator pos:start="17:16" pos:end="17:16">(</operator><name pos:start="17:17" pos:end="17:20">code</name><operator pos:start="17:21" pos:end="17:22">&lt;&lt;</operator><literal type="number" pos:start="17:23" pos:end="17:23">8</literal><operator pos:start="17:24" pos:end="17:24">)</operator> <operator pos:start="17:26" pos:end="17:26">+</operator> <name pos:start="17:28" pos:end="17:36"><name pos:start="17:28" pos:end="17:28">p</name><operator pos:start="17:29" pos:end="17:30">-&gt;</operator><name pos:start="17:31" pos:end="17:33">buf</name><index pos:start="17:34" pos:end="17:36">[<expr pos:start="17:35" pos:end="17:35"><name pos:start="17:35" pos:end="17:35">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="59:9"><if pos:start="19:9" pos:end="59:9">if <condition pos:start="19:12" pos:end="19:41">(<expr pos:start="19:13" pos:end="19:40"><operator pos:start="19:13" pos:end="19:13">(</operator><name pos:start="19:14" pos:end="19:17">code</name> <operator pos:start="19:19" pos:end="19:19">&amp;</operator> <literal type="number" pos:start="19:21" pos:end="19:30">0xffffff00</literal><operator pos:start="19:31" pos:end="19:31">)</operator> <operator pos:start="19:33" pos:end="19:34">==</operator> <literal type="number" pos:start="19:36" pos:end="19:40">0x100</literal></expr>)</condition> <block pos:start="19:43" pos:end="59:9">{<block_content pos:start="21:13" pos:end="57:24">

            <switch pos:start="21:13" pos:end="33:13">switch<condition pos:start="21:19" pos:end="21:24">(<expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">code</name></expr>)</condition><block pos:start="21:25" pos:end="33:13">{<block_content pos:start="23:13" pos:end="31:53">

            <case pos:start="23:13" pos:end="23:36">case     <expr pos:start="23:22" pos:end="23:35"><name pos:start="23:22" pos:end="23:35">SEQ_START_CODE</name></expr>:</case>   <expr_stmt pos:start="23:40" pos:end="23:45"><expr pos:start="23:40" pos:end="23:44"><name pos:start="23:40" pos:end="23:42">seq</name><operator pos:start="23:43" pos:end="23:44">++</operator></expr>;</expr_stmt> <break pos:start="23:47" pos:end="23:52">break;</break>

            <case pos:start="25:13" pos:end="25:36">case <expr pos:start="25:18" pos:end="25:35"><name pos:start="25:18" pos:end="25:35">PICTURE_START_CODE</name></expr>:</case>   <expr_stmt pos:start="25:40" pos:end="25:45"><expr pos:start="25:40" pos:end="25:44"><name pos:start="25:40" pos:end="25:42">pic</name><operator pos:start="25:43" pos:end="25:44">++</operator></expr>;</expr_stmt> <break pos:start="25:47" pos:end="25:52">break;</break>

            <case pos:start="27:13" pos:end="27:36">case    <expr pos:start="27:21" pos:end="27:35"><name pos:start="27:21" pos:end="27:35">PACK_START_CODE</name></expr>:</case> <expr_stmt pos:start="27:38" pos:end="27:46"><expr pos:start="27:38" pos:end="27:45"><name pos:start="27:38" pos:end="27:43">pspack</name><operator pos:start="27:44" pos:end="27:45">++</operator></expr>;</expr_stmt> <break pos:start="27:48" pos:end="27:53">break;</break>

            <case pos:start="29:13" pos:end="29:36">case              <expr pos:start="29:31" pos:end="29:35"><literal type="number" pos:start="29:31" pos:end="29:35">0x1b6</literal></expr>:</case>

                                        <expr_stmt pos:start="31:41" pos:end="31:46"><expr pos:start="31:41" pos:end="31:45"><name pos:start="31:41" pos:end="31:43">res</name><operator pos:start="31:44" pos:end="31:45">++</operator></expr>;</expr_stmt> <break pos:start="31:48" pos:end="31:53">break;</break>

            </block_content>}</block></switch>

            <if_stmt pos:start="35:13" pos:end="51:13"><if pos:start="35:13" pos:end="51:13">if <condition pos:start="35:16" pos:end="35:58">(<expr pos:start="35:17" pos:end="35:57"><name pos:start="35:17" pos:end="35:20">code</name> <operator pos:start="35:22" pos:end="35:23">&gt;=</operator> <name pos:start="35:25" pos:end="35:40">SLICE_START_CODE</name> <operator pos:start="35:42" pos:end="35:43">&amp;&amp;</operator> <name pos:start="35:45" pos:end="35:48">code</name> <operator pos:start="35:50" pos:end="35:51">&lt;=</operator> <literal type="number" pos:start="35:53" pos:end="35:57">0x1af</literal></expr>)</condition> <block pos:start="35:60" pos:end="51:13">{<block_content pos:start="37:17" pos:end="49:17">

                <if_stmt pos:start="37:17" pos:end="49:17"><if pos:start="37:17" pos:end="43:17">if <condition pos:start="37:20" pos:end="37:62">(<expr pos:start="37:21" pos:end="37:61"><name pos:start="37:21" pos:end="37:24">last</name> <operator pos:start="37:26" pos:end="37:27">&gt;=</operator> <name pos:start="37:29" pos:end="37:44">SLICE_START_CODE</name> <operator pos:start="37:46" pos:end="37:47">&amp;&amp;</operator> <name pos:start="37:49" pos:end="37:52">last</name> <operator pos:start="37:54" pos:end="37:55">&lt;=</operator> <literal type="number" pos:start="37:57" pos:end="37:61">0x1af</literal></expr>)</condition> <block pos:start="37:64" pos:end="43:17">{<block_content pos:start="39:21" pos:end="41:46">

                    <if_stmt pos:start="39:21" pos:end="41:46"><if pos:start="39:21" pos:end="39:46">if <condition pos:start="39:24" pos:end="39:37">(<expr pos:start="39:25" pos:end="39:36"><name pos:start="39:25" pos:end="39:28">code</name> <operator pos:start="39:30" pos:end="39:31">&gt;=</operator> <name pos:start="39:33" pos:end="39:36">last</name></expr>)</condition><block type="pseudo" pos:start="39:39" pos:end="39:46"><block_content pos:start="39:39" pos:end="39:46"> <expr_stmt pos:start="39:39" pos:end="39:46"><expr pos:start="39:39" pos:end="39:45"><name pos:start="39:39" pos:end="39:43">slice</name><operator pos:start="39:44" pos:end="39:45">++</operator></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="41:21" pos:end="41:46">else<block type="pseudo" pos:start="41:39" pos:end="41:46"><block_content pos:start="41:39" pos:end="41:46">              <expr_stmt pos:start="41:39" pos:end="41:46"><expr pos:start="41:39" pos:end="41:45"><name pos:start="41:39" pos:end="41:43">sicle</name><operator pos:start="41:44" pos:end="41:45">++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if><else pos:start="43:18" pos:end="49:17">else<block pos:start="43:22" pos:end="49:17">{<block_content pos:start="45:21" pos:end="47:58">

                    <if_stmt pos:start="45:21" pos:end="47:58"><if pos:start="45:21" pos:end="45:58">if <condition pos:start="45:24" pos:end="45:49">(<expr pos:start="45:25" pos:end="45:48"><name pos:start="45:25" pos:end="45:28">code</name> <operator pos:start="45:30" pos:end="45:31">==</operator> <name pos:start="45:33" pos:end="45:48">SLICE_START_CODE</name></expr>)</condition><block type="pseudo" pos:start="45:51" pos:end="45:58"><block_content pos:start="45:51" pos:end="45:58"> <expr_stmt pos:start="45:51" pos:end="45:58"><expr pos:start="45:51" pos:end="45:57"><name pos:start="45:51" pos:end="45:55">slice</name><operator pos:start="45:56" pos:end="45:57">++</operator></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="47:21" pos:end="47:58">else<block type="pseudo" pos:start="47:51" pos:end="47:58"><block_content pos:start="47:51" pos:end="47:58">                          <expr_stmt pos:start="47:51" pos:end="47:58"><expr pos:start="47:51" pos:end="47:57"><name pos:start="47:51" pos:end="47:55">sicle</name><operator pos:start="47:56" pos:end="47:57">++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="53:13" pos:end="55:57"><if pos:start="53:13" pos:end="53:57">if     <condition pos:start="53:20" pos:end="53:47">(<expr pos:start="53:21" pos:end="53:46"><operator pos:start="53:21" pos:end="53:21">(</operator><name pos:start="53:22" pos:end="53:25">code</name> <operator pos:start="53:27" pos:end="53:27">&amp;</operator> <literal type="number" pos:start="53:29" pos:end="53:33">0x1f0</literal><operator pos:start="53:34" pos:end="53:34">)</operator> <operator pos:start="53:36" pos:end="53:37">==</operator> <name pos:start="53:39" pos:end="53:46">VIDEO_ID</name></expr>)</condition><block type="pseudo" pos:start="53:51" pos:end="53:57"><block_content pos:start="53:51" pos:end="53:57">   <expr_stmt pos:start="53:51" pos:end="53:57"><expr pos:start="53:51" pos:end="53:56"><name pos:start="53:51" pos:end="53:54">vpes</name><operator pos:start="53:55" pos:end="53:56">++</operator></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="55:13" pos:end="55:57">else if<condition pos:start="55:20" pos:end="55:47">(<expr pos:start="55:21" pos:end="55:46"><operator pos:start="55:21" pos:end="55:21">(</operator><name pos:start="55:22" pos:end="55:25">code</name> <operator pos:start="55:27" pos:end="55:27">&amp;</operator> <literal type="number" pos:start="55:29" pos:end="55:33">0x1e0</literal><operator pos:start="55:34" pos:end="55:34">)</operator> <operator pos:start="55:36" pos:end="55:37">==</operator> <name pos:start="55:39" pos:end="55:46">AUDIO_ID</name></expr>)</condition><block type="pseudo" pos:start="55:51" pos:end="55:57"><block_content pos:start="55:51" pos:end="55:57">   <expr_stmt pos:start="55:51" pos:end="55:57"><expr pos:start="55:51" pos:end="55:56"><name pos:start="55:51" pos:end="55:54">apes</name><operator pos:start="55:55" pos:end="55:56">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:24"><expr pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:16">last</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:23">code</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if<condition pos:start="63:7" pos:end="63:92">(<expr pos:start="63:8" pos:end="63:91"><name pos:start="63:8" pos:end="63:10">seq</name> <operator pos:start="63:12" pos:end="63:13">&amp;&amp;</operator> <name pos:start="63:15" pos:end="63:17">seq</name><operator pos:start="63:18" pos:end="63:18">*</operator><literal type="number" pos:start="63:19" pos:end="63:19">9</literal><operator pos:start="63:20" pos:end="63:21">&lt;=</operator><name pos:start="63:22" pos:end="63:24">pic</name><operator pos:start="63:25" pos:end="63:25">*</operator><literal type="number" pos:start="63:26" pos:end="63:27">10</literal> <operator pos:start="63:29" pos:end="63:30">&amp;&amp;</operator> <name pos:start="63:32" pos:end="63:34">pic</name><operator pos:start="63:35" pos:end="63:35">*</operator><literal type="number" pos:start="63:36" pos:end="63:36">9</literal><operator pos:start="63:37" pos:end="63:38">&lt;=</operator><name pos:start="63:39" pos:end="63:43">slice</name><operator pos:start="63:44" pos:end="63:44">*</operator><literal type="number" pos:start="63:45" pos:end="63:46">10</literal> <operator pos:start="63:48" pos:end="63:49">&amp;&amp;</operator> <operator pos:start="63:51" pos:end="63:51">!</operator><name pos:start="63:52" pos:end="63:57">pspack</name> <operator pos:start="63:59" pos:end="63:60">&amp;&amp;</operator> <operator pos:start="63:62" pos:end="63:62">!</operator><name pos:start="63:63" pos:end="63:66">apes</name> <operator pos:start="63:68" pos:end="63:69">&amp;&amp;</operator> <operator pos:start="63:71" pos:end="63:71">!</operator><name pos:start="63:72" pos:end="63:74">res</name> <operator pos:start="63:76" pos:end="63:77">&amp;&amp;</operator> <name pos:start="63:79" pos:end="63:83">slice</name> <operator pos:start="63:85" pos:end="63:85">&gt;</operator> <name pos:start="63:87" pos:end="63:91">sicle</name></expr>)</condition> <block pos:start="63:94" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:90">

        <if_stmt pos:start="65:9" pos:end="67:90"><if pos:start="65:9" pos:end="65:52">if<condition pos:start="65:11" pos:end="65:16">(<expr pos:start="65:12" pos:end="65:15"><name pos:start="65:12" pos:end="65:15">vpes</name></expr>)</condition><block type="pseudo" pos:start="65:18" pos:end="65:52"><block_content pos:start="65:18" pos:end="65:52"> <return pos:start="65:18" pos:end="65:52">return <expr pos:start="65:25" pos:end="65:51"><name pos:start="65:25" pos:end="65:47">AVPROBE_SCORE_EXTENSION</name> <operator pos:start="65:49" pos:end="65:49">/</operator> <literal type="number" pos:start="65:51" pos:end="65:51">4</literal></expr>;</return></block_content></block></if>

        <else pos:start="67:9" pos:end="67:90">else<block type="pseudo" pos:start="67:18" pos:end="67:90"><block_content pos:start="67:18" pos:end="67:90">     <return pos:start="67:18" pos:end="67:90">return <expr pos:start="67:25" pos:end="67:89"><ternary pos:start="67:25" pos:end="67:89"><condition pos:start="67:25" pos:end="67:31"><expr pos:start="67:25" pos:end="67:29"><name pos:start="67:25" pos:end="67:27">pic</name><operator pos:start="67:28" pos:end="67:28">&gt;</operator><literal type="number" pos:start="67:29" pos:end="67:29">1</literal></expr> ?</condition><then pos:start="67:33" pos:end="67:59"> <expr pos:start="67:33" pos:end="67:59"><name pos:start="67:33" pos:end="67:55">AVPROBE_SCORE_EXTENSION</name> <operator pos:start="67:57" pos:end="67:57">+</operator> <literal type="number" pos:start="67:59" pos:end="67:59">1</literal></expr> </then><else pos:start="67:61" pos:end="67:89">: <expr pos:start="67:63" pos:end="67:89"><name pos:start="67:63" pos:end="67:85">AVPROBE_SCORE_EXTENSION</name> <operator pos:start="67:87" pos:end="67:87">/</operator> <literal type="number" pos:start="67:89" pos:end="67:89">2</literal></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt> <comment type="line" pos:start="67:92" pos:end="67:105">// +1 for .mpg</comment>

    </block_content>}</block></if></if_stmt>

    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><literal type="number" pos:start="71:12" pos:end="71:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
