<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16187.c" pos:tabs="8"><function pos:start="1:1" pos:end="855:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">wma_decode_block</name><parameter_list pos:start="1:28" pos:end="1:48">(<parameter pos:start="1:29" pos:end="1:47"><decl pos:start="1:29" pos:end="1:47"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:44">WMADecodeContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="855:1">{<block_content pos:start="5:5" pos:end="853:17">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">n</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">v</name></decl>, <decl pos:start="5:15" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:15">a</name></decl>, <decl pos:start="5:18" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:19">ch</name></decl>, <decl pos:start="5:22" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:25">code</name></decl>, <decl pos:start="5:28" pos:end="5:32"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:28" pos:end="5:32">bsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:20">coef_nb_bits</name></decl>, <decl pos:start="7:23" pos:end="7:32"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:32">total_gain</name></decl>, <decl pos:start="7:35" pos:end="7:49"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:35" pos:end="7:49">parse_exponents</name></decl>;</decl_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:58"><expr pos:start="9:5" pos:end="9:57"><call pos:start="9:5" pos:end="9:57"><name pos:start="9:5" pos:end="9:22">DECLARE_ALIGNED_16</name><argument_list pos:start="9:23" pos:end="9:57">(<argument pos:start="9:24" pos:end="9:28"><expr pos:start="9:24" pos:end="9:28"><name pos:start="9:24" pos:end="9:28">float</name></expr></argument>, <argument pos:start="9:31" pos:end="9:56"><expr pos:start="9:31" pos:end="9:56"><name pos:start="9:31" pos:end="9:56"><name pos:start="9:31" pos:end="9:36">window</name><index pos:start="9:37" pos:end="9:56">[<expr pos:start="9:38" pos:end="9:55"><name pos:start="9:38" pos:end="9:51">BLOCK_MAX_SIZE</name> <operator pos:start="9:53" pos:end="9:53">*</operator> <literal type="number" pos:start="9:55" pos:end="9:55">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:30"><name pos:start="11:9" pos:end="11:16">nb_coefs</name><index pos:start="11:17" pos:end="11:30">[<expr pos:start="11:18" pos:end="11:29"><name pos:start="11:18" pos:end="11:29">MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="18:0"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:9">float</name></type> <name pos:start="13:11" pos:end="13:19">mdct_norm</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="17:1" pos:end="17:12">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:12">TRACE</name></cpp:ifdef>

    <expr_stmt pos:start="19:5" pos:end="22:0"><expr pos:start="19:5" pos:end="19:73"><call pos:start="19:5" pos:end="19:73"><name pos:start="19:5" pos:end="19:11">tprintf</name><argument_list pos:start="19:12" pos:end="19:73">(<argument pos:start="19:13" pos:end="19:38"><expr pos:start="19:13" pos:end="19:38"><literal type="string" pos:start="19:13" pos:end="19:38">"***decode_block: %d:%d\n"</literal></expr></argument>, <argument pos:start="19:41" pos:end="19:58"><expr pos:start="19:41" pos:end="19:58"><name pos:start="19:41" pos:end="19:54"><name pos:start="19:41" pos:end="19:41">s</name><operator pos:start="19:42" pos:end="19:43">-&gt;</operator><name pos:start="19:44" pos:end="19:54">frame_count</name></name> <operator pos:start="19:56" pos:end="19:56">-</operator> <literal type="number" pos:start="19:58" pos:end="19:58">1</literal></expr></argument>, <argument pos:start="19:61" pos:end="19:72"><expr pos:start="19:61" pos:end="19:72"><name pos:start="19:61" pos:end="19:72"><name pos:start="19:61" pos:end="19:61">s</name><operator pos:start="19:62" pos:end="19:63">-&gt;</operator><name pos:start="19:64" pos:end="19:72">block_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="25:5" pos:end="25:38">/* compute current block length */</comment>

    <if_stmt pos:start="27:5" pos:end="81:5"><if pos:start="27:5" pos:end="71:5">if <condition pos:start="27:8" pos:end="27:34">(<expr pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:33">use_variable_block_len</name></name></expr>)</condition> <block pos:start="27:36" pos:end="71:5">{<block_content pos:start="29:9" pos:end="69:55">

        <expr_stmt pos:start="29:9" pos:end="29:47"><expr pos:start="29:9" pos:end="29:46"><name pos:start="29:9" pos:end="29:9">n</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <call pos:start="29:13" pos:end="29:42"><name pos:start="29:13" pos:end="29:19">av_log2</name><argument_list pos:start="29:20" pos:end="29:42">(<argument pos:start="29:21" pos:end="29:41"><expr pos:start="29:21" pos:end="29:41"><name pos:start="29:21" pos:end="29:37"><name pos:start="29:21" pos:end="29:21">s</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:37">nb_block_sizes</name></name> <operator pos:start="29:39" pos:end="29:39">-</operator> <literal type="number" pos:start="29:41" pos:end="29:41">1</literal></expr></argument>)</argument_list></call> <operator pos:start="29:44" pos:end="29:44">+</operator> <literal type="number" pos:start="29:46" pos:end="29:46">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="33:9" pos:end="61:9"><if pos:start="33:9" pos:end="53:9">if <condition pos:start="33:12" pos:end="33:35">(<expr pos:start="33:13" pos:end="33:34"><name pos:start="33:13" pos:end="33:34"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:34">reset_block_lengths</name></name></expr>)</condition> <block pos:start="33:37" pos:end="53:9">{<block_content pos:start="35:13" pos:end="51:54">

            <expr_stmt pos:start="35:13" pos:end="35:39"><expr pos:start="35:13" pos:end="35:38"><name pos:start="35:13" pos:end="35:34"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:34">reset_block_lengths</name></name> <operator pos:start="35:36" pos:end="35:36">=</operator> <literal type="number" pos:start="35:38" pos:end="35:38">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:36"><expr pos:start="37:13" pos:end="37:35"><name pos:start="37:13" pos:end="37:13">v</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:35"><name pos:start="37:17" pos:end="37:24">get_bits</name><argument_list pos:start="37:25" pos:end="37:35">(<argument pos:start="37:26" pos:end="37:31"><expr pos:start="37:26" pos:end="37:31"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:31"><name pos:start="37:27" pos:end="37:27">s</name><operator pos:start="37:28" pos:end="37:29">-&gt;</operator><name pos:start="37:30" pos:end="37:31">gb</name></name></expr></argument>, <argument pos:start="37:34" pos:end="37:34"><expr pos:start="37:34" pos:end="37:34"><name pos:start="37:34" pos:end="37:34">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="41:26"><if pos:start="39:13" pos:end="41:26">if <condition pos:start="39:16" pos:end="39:39">(<expr pos:start="39:17" pos:end="39:38"><name pos:start="39:17" pos:end="39:17">v</name> <operator pos:start="39:19" pos:end="39:20">&gt;=</operator> <name pos:start="39:22" pos:end="39:38"><name pos:start="39:22" pos:end="39:22">s</name><operator pos:start="39:23" pos:end="39:24">-&gt;</operator><name pos:start="39:25" pos:end="39:38">nb_block_sizes</name></name></expr>)</condition><block type="pseudo" pos:start="41:17" pos:end="41:26"><block_content pos:start="41:17" pos:end="41:26">

                <return pos:start="41:17" pos:end="41:26">return <expr pos:start="41:24" pos:end="41:25"><operator pos:start="41:24" pos:end="41:24">-</operator><literal type="number" pos:start="41:25" pos:end="41:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:59"><expr pos:start="43:13" pos:end="43:58"><name pos:start="43:13" pos:end="43:34"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:34">prev_block_len_bits</name></name> <operator pos:start="43:36" pos:end="43:36">=</operator> <name pos:start="43:38" pos:end="43:54"><name pos:start="43:38" pos:end="43:38">s</name><operator pos:start="43:39" pos:end="43:40">-&gt;</operator><name pos:start="43:41" pos:end="43:54">frame_len_bits</name></name> <operator pos:start="43:56" pos:end="43:56">-</operator> <name pos:start="43:58" pos:end="43:58">v</name></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:36"><expr pos:start="45:13" pos:end="45:35"><name pos:start="45:13" pos:end="45:13">v</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <call pos:start="45:17" pos:end="45:35"><name pos:start="45:17" pos:end="45:24">get_bits</name><argument_list pos:start="45:25" pos:end="45:35">(<argument pos:start="45:26" pos:end="45:31"><expr pos:start="45:26" pos:end="45:31"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:31"><name pos:start="45:27" pos:end="45:27">s</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:31">gb</name></name></expr></argument>, <argument pos:start="45:34" pos:end="45:34"><expr pos:start="45:34" pos:end="45:34"><name pos:start="45:34" pos:end="45:34">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="49:26"><if pos:start="47:13" pos:end="49:26">if <condition pos:start="47:16" pos:end="47:39">(<expr pos:start="47:17" pos:end="47:38"><name pos:start="47:17" pos:end="47:17">v</name> <operator pos:start="47:19" pos:end="47:20">&gt;=</operator> <name pos:start="47:22" pos:end="47:38"><name pos:start="47:22" pos:end="47:22">s</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:38">nb_block_sizes</name></name></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:26"><block_content pos:start="49:17" pos:end="49:26">

                <return pos:start="49:17" pos:end="49:26">return <expr pos:start="49:24" pos:end="49:25"><operator pos:start="49:24" pos:end="49:24">-</operator><literal type="number" pos:start="49:25" pos:end="49:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:54"><expr pos:start="51:13" pos:end="51:53"><name pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:13">s</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:29">block_len_bits</name></name> <operator pos:start="51:31" pos:end="51:31">=</operator> <name pos:start="51:33" pos:end="51:49"><name pos:start="51:33" pos:end="51:33">s</name><operator pos:start="51:34" pos:end="51:35">-&gt;</operator><name pos:start="51:36" pos:end="51:49">frame_len_bits</name></name> <operator pos:start="51:51" pos:end="51:51">-</operator> <name pos:start="51:53" pos:end="51:53">v</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="53:11" pos:end="61:9">else <block pos:start="53:16" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:55">

            <comment type="block" pos:start="55:13" pos:end="55:38">/* update block lengths */</comment>

            <expr_stmt pos:start="57:13" pos:end="57:55"><expr pos:start="57:13" pos:end="57:54"><name pos:start="57:13" pos:end="57:34"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:34">prev_block_len_bits</name></name> <operator pos:start="57:36" pos:end="57:36">=</operator> <name pos:start="57:38" pos:end="57:54"><name pos:start="57:38" pos:end="57:38">s</name><operator pos:start="57:39" pos:end="57:40">-&gt;</operator><name pos:start="57:41" pos:end="57:54">block_len_bits</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:55"><expr pos:start="59:13" pos:end="59:54"><name pos:start="59:13" pos:end="59:29"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:29">block_len_bits</name></name> <operator pos:start="59:31" pos:end="59:31">=</operator> <name pos:start="59:33" pos:end="59:54"><name pos:start="59:33" pos:end="59:33">s</name><operator pos:start="59:34" pos:end="59:35">-&gt;</operator><name pos:start="59:36" pos:end="59:54">next_block_len_bits</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:9">v</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:31"><name pos:start="63:13" pos:end="63:20">get_bits</name><argument_list pos:start="63:21" pos:end="63:31">(<argument pos:start="63:22" pos:end="63:27"><expr pos:start="63:22" pos:end="63:27"><operator pos:start="63:22" pos:end="63:22">&amp;</operator><name pos:start="63:23" pos:end="63:27"><name pos:start="63:23" pos:end="63:23">s</name><operator pos:start="63:24" pos:end="63:25">-&gt;</operator><name pos:start="63:26" pos:end="63:27">gb</name></name></expr></argument>, <argument pos:start="63:30" pos:end="63:30"><expr pos:start="63:30" pos:end="63:30"><name pos:start="63:30" pos:end="63:30">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="67:22"><if pos:start="65:9" pos:end="67:22">if <condition pos:start="65:12" pos:end="65:35">(<expr pos:start="65:13" pos:end="65:34"><name pos:start="65:13" pos:end="65:13">v</name> <operator pos:start="65:15" pos:end="65:16">&gt;=</operator> <name pos:start="65:18" pos:end="65:34"><name pos:start="65:18" pos:end="65:18">s</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:34">nb_block_sizes</name></name></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:22"><block_content pos:start="67:13" pos:end="67:22">

            <return pos:start="67:13" pos:end="67:22">return <expr pos:start="67:20" pos:end="67:21"><operator pos:start="67:20" pos:end="67:20">-</operator><literal type="number" pos:start="67:21" pos:end="67:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:55"><expr pos:start="69:9" pos:end="69:54"><name pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:30">next_block_len_bits</name></name> <operator pos:start="69:32" pos:end="69:32">=</operator> <name pos:start="69:34" pos:end="69:50"><name pos:start="69:34" pos:end="69:34">s</name><operator pos:start="69:35" pos:end="69:36">-&gt;</operator><name pos:start="69:37" pos:end="69:50">frame_len_bits</name></name> <operator pos:start="69:52" pos:end="69:52">-</operator> <name pos:start="69:54" pos:end="69:54">v</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="81:5">else <block pos:start="71:12" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:46">

        <comment type="block" pos:start="73:9" pos:end="73:29">/* fixed block len */</comment>

        <expr_stmt pos:start="75:9" pos:end="75:51"><expr pos:start="75:9" pos:end="75:50"><name pos:start="75:9" pos:end="75:30"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:30">next_block_len_bits</name></name> <operator pos:start="75:32" pos:end="75:32">=</operator> <name pos:start="75:34" pos:end="75:50"><name pos:start="75:34" pos:end="75:34">s</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:50">frame_len_bits</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:51"><expr pos:start="77:9" pos:end="77:50"><name pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:30">prev_block_len_bits</name></name> <operator pos:start="77:32" pos:end="77:32">=</operator> <name pos:start="77:34" pos:end="77:50"><name pos:start="77:34" pos:end="77:34">s</name><operator pos:start="77:35" pos:end="77:36">-&gt;</operator><name pos:start="77:37" pos:end="77:50">frame_len_bits</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:46"><expr pos:start="79:9" pos:end="79:45"><name pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:25">block_len_bits</name></name> <operator pos:start="79:27" pos:end="79:27">=</operator> <name pos:start="79:29" pos:end="79:45"><name pos:start="79:29" pos:end="79:29">s</name><operator pos:start="79:30" pos:end="79:31">-&gt;</operator><name pos:start="79:32" pos:end="79:45">frame_len_bits</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:73">/* now check if the block length is coherent with the frame length */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:42"><expr pos:start="87:5" pos:end="87:41"><name pos:start="87:5" pos:end="87:16"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:16">block_len</name></name> <operator pos:start="87:18" pos:end="87:18">=</operator> <literal type="number" pos:start="87:20" pos:end="87:20">1</literal> <operator pos:start="87:22" pos:end="87:23">&lt;&lt;</operator> <name pos:start="87:25" pos:end="87:41"><name pos:start="87:25" pos:end="87:25">s</name><operator pos:start="87:26" pos:end="87:27">-&gt;</operator><name pos:start="87:28" pos:end="87:41">block_len_bits</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="91:18"><if pos:start="89:5" pos:end="91:18">if <condition pos:start="89:8" pos:end="89:53">(<expr pos:start="89:9" pos:end="89:52"><operator pos:start="89:9" pos:end="89:9">(</operator><name pos:start="89:10" pos:end="89:21"><name pos:start="89:10" pos:end="89:10">s</name><operator pos:start="89:11" pos:end="89:12">-&gt;</operator><name pos:start="89:13" pos:end="89:21">block_pos</name></name> <operator pos:start="89:23" pos:end="89:23">+</operator> <name pos:start="89:25" pos:end="89:36"><name pos:start="89:25" pos:end="89:25">s</name><operator pos:start="89:26" pos:end="89:27">-&gt;</operator><name pos:start="89:28" pos:end="89:36">block_len</name></name><operator pos:start="89:37" pos:end="89:37">)</operator> <operator pos:start="89:39" pos:end="89:39">&gt;</operator> <name pos:start="89:41" pos:end="89:52"><name pos:start="89:41" pos:end="89:41">s</name><operator pos:start="89:42" pos:end="89:43">-&gt;</operator><name pos:start="89:44" pos:end="89:52">frame_len</name></name></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="91:18"><block_content pos:start="91:9" pos:end="91:18">

        <return pos:start="91:9" pos:end="91:18">return <expr pos:start="91:16" pos:end="91:17"><operator pos:start="91:16" pos:end="91:16">-</operator><literal type="number" pos:start="91:17" pos:end="91:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="99:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:28">(<expr pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:22">nb_channels</name></name> <operator pos:start="95:24" pos:end="95:25">==</operator> <literal type="number" pos:start="95:27" pos:end="95:27">2</literal></expr>)</condition> <block pos:start="95:30" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:43">

        <expr_stmt pos:start="97:9" pos:end="97:43"><expr pos:start="97:9" pos:end="97:42"><name pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:9">s</name><operator pos:start="97:10" pos:end="97:11">-&gt;</operator><name pos:start="97:12" pos:end="97:20">ms_stereo</name></name> <operator pos:start="97:22" pos:end="97:22">=</operator> <call pos:start="97:24" pos:end="97:42"><name pos:start="97:24" pos:end="97:31">get_bits</name><argument_list pos:start="97:32" pos:end="97:42">(<argument pos:start="97:33" pos:end="97:38"><expr pos:start="97:33" pos:end="97:38"><operator pos:start="97:33" pos:end="97:33">&amp;</operator><name pos:start="97:34" pos:end="97:38"><name pos:start="97:34" pos:end="97:34">s</name><operator pos:start="97:35" pos:end="97:36">-&gt;</operator><name pos:start="97:37" pos:end="97:38">gb</name></name></expr></argument>, <argument pos:start="97:41" pos:end="97:41"><expr pos:start="97:41" pos:end="97:41"><literal type="number" pos:start="97:41" pos:end="97:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:10"><expr pos:start="101:5" pos:end="101:9"><name pos:start="101:5" pos:end="101:5">v</name> <operator pos:start="101:7" pos:end="101:7">=</operator> <literal type="number" pos:start="101:9" pos:end="101:9">0</literal></expr>;</expr_stmt>

    <for pos:start="103:5" pos:end="111:5">for<control pos:start="103:8" pos:end="103:42">(<init pos:start="103:9" pos:end="103:15"><expr pos:start="103:9" pos:end="103:14"><name pos:start="103:9" pos:end="103:10">ch</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <literal type="number" pos:start="103:14" pos:end="103:14">0</literal></expr>;</init> <condition pos:start="103:17" pos:end="103:36"><expr pos:start="103:17" pos:end="103:35"><name pos:start="103:17" pos:end="103:18">ch</name> <operator pos:start="103:20" pos:end="103:20">&lt;</operator> <name pos:start="103:22" pos:end="103:35"><name pos:start="103:22" pos:end="103:22">s</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:35">nb_channels</name></name></expr>;</condition> <incr pos:start="103:38" pos:end="103:41"><expr pos:start="103:38" pos:end="103:41"><name pos:start="103:38" pos:end="103:39">ch</name><operator pos:start="103:40" pos:end="103:41">++</operator></expr></incr>)</control> <block pos:start="103:44" pos:end="111:5">{<block_content pos:start="105:9" pos:end="109:15">

        <expr_stmt pos:start="105:9" pos:end="105:32"><expr pos:start="105:9" pos:end="105:31"><name pos:start="105:9" pos:end="105:9">a</name> <operator pos:start="105:11" pos:end="105:11">=</operator> <call pos:start="105:13" pos:end="105:31"><name pos:start="105:13" pos:end="105:20">get_bits</name><argument_list pos:start="105:21" pos:end="105:31">(<argument pos:start="105:22" pos:end="105:27"><expr pos:start="105:22" pos:end="105:27"><operator pos:start="105:22" pos:end="105:22">&amp;</operator><name pos:start="105:23" pos:end="105:27"><name pos:start="105:23" pos:end="105:23">s</name><operator pos:start="105:24" pos:end="105:25">-&gt;</operator><name pos:start="105:26" pos:end="105:27">gb</name></name></expr></argument>, <argument pos:start="105:30" pos:end="105:30"><expr pos:start="105:30" pos:end="105:30"><literal type="number" pos:start="105:30" pos:end="105:30">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:33"><expr pos:start="107:9" pos:end="107:32"><name pos:start="107:9" pos:end="107:28"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:24">channel_coded</name><index pos:start="107:25" pos:end="107:28">[<expr pos:start="107:26" pos:end="107:27"><name pos:start="107:26" pos:end="107:27">ch</name></expr>]</index></name> <operator pos:start="107:30" pos:end="107:30">=</operator> <name pos:start="107:32" pos:end="107:32">a</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:15"><expr pos:start="109:9" pos:end="109:14"><name pos:start="109:9" pos:end="109:9">v</name> <operator pos:start="109:11" pos:end="109:12">|=</operator> <name pos:start="109:14" pos:end="109:14">a</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="113:5" pos:end="113:52">/* if no channel coded, no need to go further */</comment>

    <comment type="block" pos:start="115:5" pos:end="115:45">/* XXX: fix potential framing problems */</comment>

    <if_stmt pos:start="117:5" pos:end="119:18"><if pos:start="117:5" pos:end="119:18">if <condition pos:start="117:8" pos:end="117:11">(<expr pos:start="117:9" pos:end="117:10"><operator pos:start="117:9" pos:end="117:9">!</operator><name pos:start="117:10" pos:end="117:10">v</name></expr>)</condition><block type="pseudo" pos:start="119:9" pos:end="119:18"><block_content pos:start="119:9" pos:end="119:18">

        <goto pos:start="119:9" pos:end="119:18">goto <name pos:start="119:14" pos:end="119:17">next</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:50"><expr pos:start="123:5" pos:end="123:49"><name pos:start="123:5" pos:end="123:9">bsize</name> <operator pos:start="123:11" pos:end="123:11">=</operator> <name pos:start="123:13" pos:end="123:29"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:29">frame_len_bits</name></name> <operator pos:start="123:31" pos:end="123:31">-</operator> <name pos:start="123:33" pos:end="123:49"><name pos:start="123:33" pos:end="123:33">s</name><operator pos:start="123:34" pos:end="123:35">-&gt;</operator><name pos:start="123:36" pos:end="123:49">block_len_bits</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="127:5" pos:end="129:28">/* read total gain and extract corresponding number of bits for

       coef escape coding */</comment>

    <expr_stmt pos:start="131:5" pos:end="131:19"><expr pos:start="131:5" pos:end="131:18"><name pos:start="131:5" pos:end="131:14">total_gain</name> <operator pos:start="131:16" pos:end="131:16">=</operator> <literal type="number" pos:start="131:18" pos:end="131:18">1</literal></expr>;</expr_stmt>

    <for pos:start="133:5" pos:end="143:5">for<control pos:start="133:8" pos:end="133:11">(<init pos:start="133:9" pos:end="133:9">;</init><condition pos:start="133:10" pos:end="133:10">;</condition><incr/>)</control> <block pos:start="133:13" pos:end="143:5">{<block_content pos:start="135:9" pos:end="141:18">

        <expr_stmt pos:start="135:9" pos:end="135:32"><expr pos:start="135:9" pos:end="135:31"><name pos:start="135:9" pos:end="135:9">a</name> <operator pos:start="135:11" pos:end="135:11">=</operator> <call pos:start="135:13" pos:end="135:31"><name pos:start="135:13" pos:end="135:20">get_bits</name><argument_list pos:start="135:21" pos:end="135:31">(<argument pos:start="135:22" pos:end="135:27"><expr pos:start="135:22" pos:end="135:27"><operator pos:start="135:22" pos:end="135:22">&amp;</operator><name pos:start="135:23" pos:end="135:27"><name pos:start="135:23" pos:end="135:23">s</name><operator pos:start="135:24" pos:end="135:25">-&gt;</operator><name pos:start="135:26" pos:end="135:27">gb</name></name></expr></argument>, <argument pos:start="135:30" pos:end="135:30"><expr pos:start="135:30" pos:end="135:30"><literal type="number" pos:start="135:30" pos:end="135:30">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:24"><expr pos:start="137:9" pos:end="137:23"><name pos:start="137:9" pos:end="137:18">total_gain</name> <operator pos:start="137:20" pos:end="137:21">+=</operator> <name pos:start="137:23" pos:end="137:23">a</name></expr>;</expr_stmt>

        <if_stmt pos:start="139:9" pos:end="141:18"><if pos:start="139:9" pos:end="141:18">if <condition pos:start="139:12" pos:end="139:21">(<expr pos:start="139:13" pos:end="139:20"><name pos:start="139:13" pos:end="139:13">a</name> <operator pos:start="139:15" pos:end="139:16">!=</operator> <literal type="number" pos:start="139:18" pos:end="139:20">127</literal></expr>)</condition><block type="pseudo" pos:start="141:13" pos:end="141:18"><block_content pos:start="141:13" pos:end="141:18">

            <break pos:start="141:13" pos:end="141:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="147:5" pos:end="165:25"><if pos:start="147:5" pos:end="149:26">if <condition pos:start="147:8" pos:end="147:24">(<expr pos:start="147:9" pos:end="147:23"><name pos:start="147:9" pos:end="147:18">total_gain</name> <operator pos:start="147:20" pos:end="147:20">&lt;</operator> <literal type="number" pos:start="147:22" pos:end="147:23">15</literal></expr>)</condition><block type="pseudo" pos:start="149:9" pos:end="149:26"><block_content pos:start="149:9" pos:end="149:26">

        <expr_stmt pos:start="149:9" pos:end="149:26"><expr pos:start="149:9" pos:end="149:25"><name pos:start="149:9" pos:end="149:20">coef_nb_bits</name> <operator pos:start="149:22" pos:end="149:22">=</operator> <literal type="number" pos:start="149:24" pos:end="149:25">13</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="151:5" pos:end="153:26">else if <condition pos:start="151:13" pos:end="151:29">(<expr pos:start="151:14" pos:end="151:28"><name pos:start="151:14" pos:end="151:23">total_gain</name> <operator pos:start="151:25" pos:end="151:25">&lt;</operator> <literal type="number" pos:start="151:27" pos:end="151:28">32</literal></expr>)</condition><block type="pseudo" pos:start="153:9" pos:end="153:26"><block_content pos:start="153:9" pos:end="153:26">

        <expr_stmt pos:start="153:9" pos:end="153:26"><expr pos:start="153:9" pos:end="153:25"><name pos:start="153:9" pos:end="153:20">coef_nb_bits</name> <operator pos:start="153:22" pos:end="153:22">=</operator> <literal type="number" pos:start="153:24" pos:end="153:25">12</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="155:5" pos:end="157:26">else if <condition pos:start="155:13" pos:end="155:29">(<expr pos:start="155:14" pos:end="155:28"><name pos:start="155:14" pos:end="155:23">total_gain</name> <operator pos:start="155:25" pos:end="155:25">&lt;</operator> <literal type="number" pos:start="155:27" pos:end="155:28">40</literal></expr>)</condition><block type="pseudo" pos:start="157:9" pos:end="157:26"><block_content pos:start="157:9" pos:end="157:26">

        <expr_stmt pos:start="157:9" pos:end="157:26"><expr pos:start="157:9" pos:end="157:25"><name pos:start="157:9" pos:end="157:20">coef_nb_bits</name> <operator pos:start="157:22" pos:end="157:22">=</operator> <literal type="number" pos:start="157:24" pos:end="157:25">11</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="159:5" pos:end="161:26">else if <condition pos:start="159:13" pos:end="159:29">(<expr pos:start="159:14" pos:end="159:28"><name pos:start="159:14" pos:end="159:23">total_gain</name> <operator pos:start="159:25" pos:end="159:25">&lt;</operator> <literal type="number" pos:start="159:27" pos:end="159:28">45</literal></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:26"><block_content pos:start="161:9" pos:end="161:26">

        <expr_stmt pos:start="161:9" pos:end="161:26"><expr pos:start="161:9" pos:end="161:25"><name pos:start="161:9" pos:end="161:20">coef_nb_bits</name> <operator pos:start="161:22" pos:end="161:22">=</operator> <literal type="number" pos:start="161:24" pos:end="161:25">10</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="163:5" pos:end="165:25">else<block type="pseudo" pos:start="165:9" pos:end="165:25"><block_content pos:start="165:9" pos:end="165:25">

        <expr_stmt pos:start="165:9" pos:end="165:25"><expr pos:start="165:9" pos:end="165:24"><name pos:start="165:9" pos:end="165:20">coef_nb_bits</name> <operator pos:start="165:22" pos:end="165:22">=</operator> <literal type="number" pos:start="165:24" pos:end="165:24">9</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <comment type="block" pos:start="169:5" pos:end="169:40">/* compute number of coefficients */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:45"><expr pos:start="171:5" pos:end="171:44"><name pos:start="171:5" pos:end="171:5">n</name> <operator pos:start="171:7" pos:end="171:7">=</operator> <name pos:start="171:9" pos:end="171:27"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:20">coefs_end</name><index pos:start="171:21" pos:end="171:27">[<expr pos:start="171:22" pos:end="171:26"><name pos:start="171:22" pos:end="171:26">bsize</name></expr>]</index></name> <operator pos:start="171:29" pos:end="171:29">-</operator> <name pos:start="171:31" pos:end="171:44"><name pos:start="171:31" pos:end="171:31">s</name><operator pos:start="171:32" pos:end="171:33">-&gt;</operator><name pos:start="171:34" pos:end="171:44">coefs_start</name></name></expr>;</expr_stmt>

    <for pos:start="173:5" pos:end="175:25">for<control pos:start="173:8" pos:end="173:42">(<init pos:start="173:9" pos:end="173:15"><expr pos:start="173:9" pos:end="173:14"><name pos:start="173:9" pos:end="173:10">ch</name> <operator pos:start="173:12" pos:end="173:12">=</operator> <literal type="number" pos:start="173:14" pos:end="173:14">0</literal></expr>;</init> <condition pos:start="173:17" pos:end="173:36"><expr pos:start="173:17" pos:end="173:35"><name pos:start="173:17" pos:end="173:18">ch</name> <operator pos:start="173:20" pos:end="173:20">&lt;</operator> <name pos:start="173:22" pos:end="173:35"><name pos:start="173:22" pos:end="173:22">s</name><operator pos:start="173:23" pos:end="173:24">-&gt;</operator><name pos:start="173:25" pos:end="173:35">nb_channels</name></name></expr>;</condition> <incr pos:start="173:38" pos:end="173:41"><expr pos:start="173:38" pos:end="173:41"><name pos:start="173:38" pos:end="173:39">ch</name><operator pos:start="173:40" pos:end="173:41">++</operator></expr></incr>)</control><block type="pseudo" pos:start="175:9" pos:end="175:25"><block_content pos:start="175:9" pos:end="175:25">

        <expr_stmt pos:start="175:9" pos:end="175:25"><expr pos:start="175:9" pos:end="175:24"><name pos:start="175:9" pos:end="175:20"><name pos:start="175:9" pos:end="175:16">nb_coefs</name><index pos:start="175:17" pos:end="175:20">[<expr pos:start="175:18" pos:end="175:19"><name pos:start="175:18" pos:end="175:19">ch</name></expr>]</index></name> <operator pos:start="175:22" pos:end="175:22">=</operator> <name pos:start="175:24" pos:end="175:24">n</name></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="179:5" pos:end="179:24">/* complex coding */</comment>

    <if_stmt pos:start="181:5" pos:end="253:5"><if pos:start="181:5" pos:end="253:5">if <condition pos:start="181:8" pos:end="181:28">(<expr pos:start="181:9" pos:end="181:27"><name pos:start="181:9" pos:end="181:27"><name pos:start="181:9" pos:end="181:9">s</name><operator pos:start="181:10" pos:end="181:11">-&gt;</operator><name pos:start="181:12" pos:end="181:27">use_noise_coding</name></name></expr>)</condition> <block pos:start="181:30" pos:end="253:5">{<block_content pos:start="185:9" pos:end="251:9">



        <for pos:start="185:9" pos:end="209:9">for<control pos:start="185:12" pos:end="185:46">(<init pos:start="185:13" pos:end="185:19"><expr pos:start="185:13" pos:end="185:18"><name pos:start="185:13" pos:end="185:14">ch</name> <operator pos:start="185:16" pos:end="185:16">=</operator> <literal type="number" pos:start="185:18" pos:end="185:18">0</literal></expr>;</init> <condition pos:start="185:21" pos:end="185:40"><expr pos:start="185:21" pos:end="185:39"><name pos:start="185:21" pos:end="185:22">ch</name> <operator pos:start="185:24" pos:end="185:24">&lt;</operator> <name pos:start="185:26" pos:end="185:39"><name pos:start="185:26" pos:end="185:26">s</name><operator pos:start="185:27" pos:end="185:28">-&gt;</operator><name pos:start="185:29" pos:end="185:39">nb_channels</name></name></expr>;</condition> <incr pos:start="185:42" pos:end="185:45"><expr pos:start="185:42" pos:end="185:45"><name pos:start="185:42" pos:end="185:43">ch</name><operator pos:start="185:44" pos:end="185:45">++</operator></expr></incr>)</control> <block pos:start="185:48" pos:end="209:9">{<block_content pos:start="187:13" pos:end="207:13">

            <if_stmt pos:start="187:13" pos:end="207:13"><if pos:start="187:13" pos:end="207:13">if <condition pos:start="187:16" pos:end="187:37">(<expr pos:start="187:17" pos:end="187:36"><name pos:start="187:17" pos:end="187:36"><name pos:start="187:17" pos:end="187:17">s</name><operator pos:start="187:18" pos:end="187:19">-&gt;</operator><name pos:start="187:20" pos:end="187:32">channel_coded</name><index pos:start="187:33" pos:end="187:36">[<expr pos:start="187:34" pos:end="187:35"><name pos:start="187:34" pos:end="187:35">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="187:39" pos:end="207:13">{<block_content pos:start="189:17" pos:end="205:17">

                <decl_stmt pos:start="189:17" pos:end="189:28"><decl pos:start="189:17" pos:end="189:21"><type pos:start="189:17" pos:end="189:19"><name pos:start="189:17" pos:end="189:19">int</name></type> <name pos:start="189:21" pos:end="189:21">i</name></decl>, <decl pos:start="189:24" pos:end="189:24"><type ref="prev" pos:start="189:17" pos:end="189:19"/><name pos:start="189:24" pos:end="189:24">n</name></decl>, <decl pos:start="189:27" pos:end="189:27"><type ref="prev" pos:start="189:17" pos:end="189:19"/><name pos:start="189:27" pos:end="189:27">a</name></decl>;</decl_stmt>

                <expr_stmt pos:start="191:17" pos:end="191:50"><expr pos:start="191:17" pos:end="191:49"><name pos:start="191:17" pos:end="191:17">n</name> <operator pos:start="191:19" pos:end="191:19">=</operator> <name pos:start="191:21" pos:end="191:49"><name pos:start="191:21" pos:end="191:21">s</name><operator pos:start="191:22" pos:end="191:23">-&gt;</operator><name pos:start="191:24" pos:end="191:42">exponent_high_sizes</name><index pos:start="191:43" pos:end="191:49">[<expr pos:start="191:44" pos:end="191:48"><name pos:start="191:44" pos:end="191:48">bsize</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="193:17" pos:end="205:17">for<control pos:start="193:20" pos:end="193:32">(<init pos:start="193:21" pos:end="193:24"><expr pos:start="193:21" pos:end="193:23"><name pos:start="193:21" pos:end="193:21">i</name><operator pos:start="193:22" pos:end="193:22">=</operator><literal type="number" pos:start="193:23" pos:end="193:23">0</literal></expr>;</init><condition pos:start="193:25" pos:end="193:28"><expr pos:start="193:25" pos:end="193:27"><name pos:start="193:25" pos:end="193:25">i</name><operator pos:start="193:26" pos:end="193:26">&lt;</operator><name pos:start="193:27" pos:end="193:27">n</name></expr>;</condition><incr pos:start="193:29" pos:end="193:31"><expr pos:start="193:29" pos:end="193:31"><name pos:start="193:29" pos:end="193:29">i</name><operator pos:start="193:30" pos:end="193:31">++</operator></expr></incr>)</control> <block pos:start="193:34" pos:end="205:17">{<block_content pos:start="195:21" pos:end="203:73">

                    <expr_stmt pos:start="195:21" pos:end="195:44"><expr pos:start="195:21" pos:end="195:43"><name pos:start="195:21" pos:end="195:21">a</name> <operator pos:start="195:23" pos:end="195:23">=</operator> <call pos:start="195:25" pos:end="195:43"><name pos:start="195:25" pos:end="195:32">get_bits</name><argument_list pos:start="195:33" pos:end="195:43">(<argument pos:start="195:34" pos:end="195:39"><expr pos:start="195:34" pos:end="195:39"><operator pos:start="195:34" pos:end="195:34">&amp;</operator><name pos:start="195:35" pos:end="195:39"><name pos:start="195:35" pos:end="195:35">s</name><operator pos:start="195:36" pos:end="195:37">-&gt;</operator><name pos:start="195:38" pos:end="195:39">gb</name></name></expr></argument>, <argument pos:start="195:42" pos:end="195:42"><expr pos:start="195:42" pos:end="195:42"><literal type="number" pos:start="195:42" pos:end="195:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="197:21" pos:end="197:50"><expr pos:start="197:21" pos:end="197:49"><name pos:start="197:21" pos:end="197:45"><name pos:start="197:21" pos:end="197:21">s</name><operator pos:start="197:22" pos:end="197:23">-&gt;</operator><name pos:start="197:24" pos:end="197:38">high_band_coded</name><index pos:start="197:39" pos:end="197:42">[<expr pos:start="197:40" pos:end="197:41"><name pos:start="197:40" pos:end="197:41">ch</name></expr>]</index><index pos:start="197:43" pos:end="197:45">[<expr pos:start="197:44" pos:end="197:44"><name pos:start="197:44" pos:end="197:44">i</name></expr>]</index></name> <operator pos:start="197:47" pos:end="197:47">=</operator> <name pos:start="197:49" pos:end="197:49">a</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="199:21" pos:end="199:79">/* if noise coding, the coefficients are not transmitted */</comment>

                    <if_stmt pos:start="201:21" pos:end="203:73"><if pos:start="201:21" pos:end="203:73">if <condition pos:start="201:24" pos:end="201:26">(<expr pos:start="201:25" pos:end="201:25"><name pos:start="201:25" pos:end="201:25">a</name></expr>)</condition><block type="pseudo" pos:start="203:25" pos:end="203:73"><block_content pos:start="203:25" pos:end="203:73">

                        <expr_stmt pos:start="203:25" pos:end="203:73"><expr pos:start="203:25" pos:end="203:72"><name pos:start="203:25" pos:end="203:36"><name pos:start="203:25" pos:end="203:32">nb_coefs</name><index pos:start="203:33" pos:end="203:36">[<expr pos:start="203:34" pos:end="203:35"><name pos:start="203:34" pos:end="203:35">ch</name></expr>]</index></name> <operator pos:start="203:38" pos:end="203:39">-=</operator> <name pos:start="203:41" pos:end="203:72"><name pos:start="203:41" pos:end="203:41">s</name><operator pos:start="203:42" pos:end="203:43">-&gt;</operator><name pos:start="203:44" pos:end="203:62">exponent_high_bands</name><index pos:start="203:63" pos:end="203:69">[<expr pos:start="203:64" pos:end="203:68"><name pos:start="203:64" pos:end="203:68">bsize</name></expr>]</index><index pos:start="203:70" pos:end="203:72">[<expr pos:start="203:71" pos:end="203:71"><name pos:start="203:71" pos:end="203:71">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <for pos:start="211:9" pos:end="251:9">for<control pos:start="211:12" pos:end="211:46">(<init pos:start="211:13" pos:end="211:19"><expr pos:start="211:13" pos:end="211:18"><name pos:start="211:13" pos:end="211:14">ch</name> <operator pos:start="211:16" pos:end="211:16">=</operator> <literal type="number" pos:start="211:18" pos:end="211:18">0</literal></expr>;</init> <condition pos:start="211:21" pos:end="211:40"><expr pos:start="211:21" pos:end="211:39"><name pos:start="211:21" pos:end="211:22">ch</name> <operator pos:start="211:24" pos:end="211:24">&lt;</operator> <name pos:start="211:26" pos:end="211:39"><name pos:start="211:26" pos:end="211:26">s</name><operator pos:start="211:27" pos:end="211:28">-&gt;</operator><name pos:start="211:29" pos:end="211:39">nb_channels</name></name></expr>;</condition> <incr pos:start="211:42" pos:end="211:45"><expr pos:start="211:42" pos:end="211:45"><name pos:start="211:42" pos:end="211:43">ch</name><operator pos:start="211:44" pos:end="211:45">++</operator></expr></incr>)</control> <block pos:start="211:48" pos:end="251:9">{<block_content pos:start="213:13" pos:end="249:13">

            <if_stmt pos:start="213:13" pos:end="249:13"><if pos:start="213:13" pos:end="249:13">if <condition pos:start="213:16" pos:end="213:37">(<expr pos:start="213:17" pos:end="213:36"><name pos:start="213:17" pos:end="213:36"><name pos:start="213:17" pos:end="213:17">s</name><operator pos:start="213:18" pos:end="213:19">-&gt;</operator><name pos:start="213:20" pos:end="213:32">channel_coded</name><index pos:start="213:33" pos:end="213:36">[<expr pos:start="213:34" pos:end="213:35"><name pos:start="213:34" pos:end="213:35">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="213:39" pos:end="249:13">{<block_content pos:start="215:17" pos:end="247:17">

                <decl_stmt pos:start="215:17" pos:end="215:36"><decl pos:start="215:17" pos:end="215:21"><type pos:start="215:17" pos:end="215:19"><name pos:start="215:17" pos:end="215:19">int</name></type> <name pos:start="215:21" pos:end="215:21">i</name></decl>, <decl pos:start="215:24" pos:end="215:24"><type ref="prev" pos:start="215:17" pos:end="215:19"/><name pos:start="215:24" pos:end="215:24">n</name></decl>, <decl pos:start="215:27" pos:end="215:29"><type ref="prev" pos:start="215:17" pos:end="215:19"/><name pos:start="215:27" pos:end="215:29">val</name></decl>, <decl pos:start="215:32" pos:end="215:35"><type ref="prev" pos:start="215:17" pos:end="215:19"/><name pos:start="215:32" pos:end="215:35">code</name></decl>;</decl_stmt>



                <expr_stmt pos:start="219:17" pos:end="219:50"><expr pos:start="219:17" pos:end="219:49"><name pos:start="219:17" pos:end="219:17">n</name> <operator pos:start="219:19" pos:end="219:19">=</operator> <name pos:start="219:21" pos:end="219:49"><name pos:start="219:21" pos:end="219:21">s</name><operator pos:start="219:22" pos:end="219:23">-&gt;</operator><name pos:start="219:24" pos:end="219:42">exponent_high_sizes</name><index pos:start="219:43" pos:end="219:49">[<expr pos:start="219:44" pos:end="219:48"><name pos:start="219:44" pos:end="219:48">bsize</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:38"><expr pos:start="221:17" pos:end="221:37"><name pos:start="221:17" pos:end="221:19">val</name> <operator pos:start="221:21" pos:end="221:21">=</operator> <operator pos:start="221:23" pos:end="221:23">(</operator><name pos:start="221:24" pos:end="221:26">int</name><operator pos:start="221:27" pos:end="221:27">)</operator><literal type="number" pos:start="221:28" pos:end="221:37">0x80000000</literal></expr>;</expr_stmt>

                <for pos:start="223:17" pos:end="247:17">for<control pos:start="223:20" pos:end="223:32">(<init pos:start="223:21" pos:end="223:24"><expr pos:start="223:21" pos:end="223:23"><name pos:start="223:21" pos:end="223:21">i</name><operator pos:start="223:22" pos:end="223:22">=</operator><literal type="number" pos:start="223:23" pos:end="223:23">0</literal></expr>;</init><condition pos:start="223:25" pos:end="223:28"><expr pos:start="223:25" pos:end="223:27"><name pos:start="223:25" pos:end="223:25">i</name><operator pos:start="223:26" pos:end="223:26">&lt;</operator><name pos:start="223:27" pos:end="223:27">n</name></expr>;</condition><incr pos:start="223:29" pos:end="223:31"><expr pos:start="223:29" pos:end="223:31"><name pos:start="223:29" pos:end="223:29">i</name><operator pos:start="223:30" pos:end="223:31">++</operator></expr></incr>)</control> <block pos:start="223:34" pos:end="247:17">{<block_content pos:start="225:21" pos:end="245:21">

                    <if_stmt pos:start="225:21" pos:end="245:21"><if pos:start="225:21" pos:end="245:21">if <condition pos:start="225:24" pos:end="225:50">(<expr pos:start="225:25" pos:end="225:49"><name pos:start="225:25" pos:end="225:49"><name pos:start="225:25" pos:end="225:25">s</name><operator pos:start="225:26" pos:end="225:27">-&gt;</operator><name pos:start="225:28" pos:end="225:42">high_band_coded</name><index pos:start="225:43" pos:end="225:46">[<expr pos:start="225:44" pos:end="225:45"><name pos:start="225:44" pos:end="225:45">ch</name></expr>]</index><index pos:start="225:47" pos:end="225:49">[<expr pos:start="225:48" pos:end="225:48"><name pos:start="225:48" pos:end="225:48">i</name></expr>]</index></name></expr>)</condition> <block pos:start="225:52" pos:end="245:21">{<block_content pos:start="227:25" pos:end="243:57">

                        <if_stmt pos:start="227:25" pos:end="241:25"><if pos:start="227:25" pos:end="231:25">if <condition pos:start="227:28" pos:end="227:51">(<expr pos:start="227:29" pos:end="227:50"><name pos:start="227:29" pos:end="227:31">val</name> <operator pos:start="227:33" pos:end="227:34">==</operator> <operator pos:start="227:36" pos:end="227:36">(</operator><name pos:start="227:37" pos:end="227:39">int</name><operator pos:start="227:40" pos:end="227:40">)</operator><literal type="number" pos:start="227:41" pos:end="227:50">0x80000000</literal></expr>)</condition> <block pos:start="227:53" pos:end="231:25">{<block_content pos:start="229:29" pos:end="229:59">

                            <expr_stmt pos:start="229:29" pos:end="229:59"><expr pos:start="229:29" pos:end="229:58"><name pos:start="229:29" pos:end="229:31">val</name> <operator pos:start="229:33" pos:end="229:33">=</operator> <call pos:start="229:35" pos:end="229:53"><name pos:start="229:35" pos:end="229:42">get_bits</name><argument_list pos:start="229:43" pos:end="229:53">(<argument pos:start="229:44" pos:end="229:49"><expr pos:start="229:44" pos:end="229:49"><operator pos:start="229:44" pos:end="229:44">&amp;</operator><name pos:start="229:45" pos:end="229:49"><name pos:start="229:45" pos:end="229:45">s</name><operator pos:start="229:46" pos:end="229:47">-&gt;</operator><name pos:start="229:48" pos:end="229:49">gb</name></name></expr></argument>, <argument pos:start="229:52" pos:end="229:52"><expr pos:start="229:52" pos:end="229:52"><literal type="number" pos:start="229:52" pos:end="229:52">7</literal></expr></argument>)</argument_list></call> <operator pos:start="229:55" pos:end="229:55">-</operator> <literal type="number" pos:start="229:57" pos:end="229:58">19</literal></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="231:27" pos:end="241:25">else <block pos:start="231:32" pos:end="241:25">{<block_content pos:start="233:29" pos:end="239:45">

                            <expr_stmt pos:start="233:29" pos:end="233:96"><expr pos:start="233:29" pos:end="233:95"><name pos:start="233:29" pos:end="233:32">code</name> <operator pos:start="233:34" pos:end="233:34">=</operator> <call pos:start="233:36" pos:end="233:95"><name pos:start="233:36" pos:end="233:43">get_vlc2</name><argument_list pos:start="233:44" pos:end="233:95">(<argument pos:start="233:45" pos:end="233:50"><expr pos:start="233:45" pos:end="233:50"><operator pos:start="233:45" pos:end="233:45">&amp;</operator><name pos:start="233:46" pos:end="233:50"><name pos:start="233:46" pos:end="233:46">s</name><operator pos:start="233:47" pos:end="233:48">-&gt;</operator><name pos:start="233:49" pos:end="233:50">gb</name></name></expr></argument>, <argument pos:start="233:53" pos:end="233:70"><expr pos:start="233:53" pos:end="233:70"><name pos:start="233:53" pos:end="233:70"><name pos:start="233:53" pos:end="233:53">s</name><operator pos:start="233:54" pos:end="233:55">-&gt;</operator><name pos:start="233:56" pos:end="233:64">hgain_vlc</name><operator pos:start="233:65" pos:end="233:65">.</operator><name pos:start="233:66" pos:end="233:70">table</name></name></expr></argument>, <argument pos:start="233:73" pos:end="233:84"><expr pos:start="233:73" pos:end="233:84"><name pos:start="233:73" pos:end="233:84">HGAINVLCBITS</name></expr></argument>, <argument pos:start="233:87" pos:end="233:94"><expr pos:start="233:87" pos:end="233:94"><name pos:start="233:87" pos:end="233:94">HGAINMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="235:29" pos:end="237:42"><if pos:start="235:29" pos:end="237:42">if <condition pos:start="235:32" pos:end="235:41">(<expr pos:start="235:33" pos:end="235:40"><name pos:start="235:33" pos:end="235:36">code</name> <operator pos:start="235:38" pos:end="235:38">&lt;</operator> <literal type="number" pos:start="235:40" pos:end="235:40">0</literal></expr>)</condition><block type="pseudo" pos:start="237:33" pos:end="237:42"><block_content pos:start="237:33" pos:end="237:42">

                                <return pos:start="237:33" pos:end="237:42">return <expr pos:start="237:40" pos:end="237:41"><operator pos:start="237:40" pos:end="237:40">-</operator><literal type="number" pos:start="237:41" pos:end="237:41">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="239:29" pos:end="239:45"><expr pos:start="239:29" pos:end="239:44"><name pos:start="239:29" pos:end="239:31">val</name> <operator pos:start="239:33" pos:end="239:34">+=</operator> <name pos:start="239:36" pos:end="239:39">code</name> <operator pos:start="239:41" pos:end="239:41">-</operator> <literal type="number" pos:start="239:43" pos:end="239:44">18</literal></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="243:25" pos:end="243:57"><expr pos:start="243:25" pos:end="243:56"><name pos:start="243:25" pos:end="243:50"><name pos:start="243:25" pos:end="243:25">s</name><operator pos:start="243:26" pos:end="243:27">-&gt;</operator><name pos:start="243:28" pos:end="243:43">high_band_values</name><index pos:start="243:44" pos:end="243:47">[<expr pos:start="243:45" pos:end="243:46"><name pos:start="243:45" pos:end="243:46">ch</name></expr>]</index><index pos:start="243:48" pos:end="243:50">[<expr pos:start="243:49" pos:end="243:49"><name pos:start="243:49" pos:end="243:49">i</name></expr>]</index></name> <operator pos:start="243:52" pos:end="243:52">=</operator> <name pos:start="243:54" pos:end="243:56">val</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="257:5" pos:end="257:55">/* exposant can be interpolated in short blocks. */</comment>

    <expr_stmt pos:start="259:5" pos:end="259:24"><expr pos:start="259:5" pos:end="259:23"><name pos:start="259:5" pos:end="259:19">parse_exponents</name> <operator pos:start="259:21" pos:end="259:21">=</operator> <literal type="number" pos:start="259:23" pos:end="259:23">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="261:5" pos:end="265:5"><if pos:start="261:5" pos:end="265:5">if <condition pos:start="261:8" pos:end="261:47">(<expr pos:start="261:9" pos:end="261:46"><name pos:start="261:9" pos:end="261:25"><name pos:start="261:9" pos:end="261:9">s</name><operator pos:start="261:10" pos:end="261:11">-&gt;</operator><name pos:start="261:12" pos:end="261:25">block_len_bits</name></name> <operator pos:start="261:27" pos:end="261:28">!=</operator> <name pos:start="261:30" pos:end="261:46"><name pos:start="261:30" pos:end="261:30">s</name><operator pos:start="261:31" pos:end="261:32">-&gt;</operator><name pos:start="261:33" pos:end="261:46">frame_len_bits</name></name></expr>)</condition> <block pos:start="261:49" pos:end="265:5">{<block_content pos:start="263:9" pos:end="263:46">

        <expr_stmt pos:start="263:9" pos:end="263:46"><expr pos:start="263:9" pos:end="263:45"><name pos:start="263:9" pos:end="263:23">parse_exponents</name> <operator pos:start="263:25" pos:end="263:25">=</operator> <call pos:start="263:27" pos:end="263:45"><name pos:start="263:27" pos:end="263:34">get_bits</name><argument_list pos:start="263:35" pos:end="263:45">(<argument pos:start="263:36" pos:end="263:41"><expr pos:start="263:36" pos:end="263:41"><operator pos:start="263:36" pos:end="263:36">&amp;</operator><name pos:start="263:37" pos:end="263:41"><name pos:start="263:37" pos:end="263:37">s</name><operator pos:start="263:38" pos:end="263:39">-&gt;</operator><name pos:start="263:40" pos:end="263:41">gb</name></name></expr></argument>, <argument pos:start="263:44" pos:end="263:44"><expr pos:start="263:44" pos:end="263:44"><literal type="number" pos:start="263:44" pos:end="263:44">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="269:5" pos:end="305:5"><if pos:start="269:5" pos:end="291:5">if <condition pos:start="269:8" pos:end="269:24">(<expr pos:start="269:9" pos:end="269:23"><name pos:start="269:9" pos:end="269:23">parse_exponents</name></expr>)</condition> <block pos:start="269:26" pos:end="291:5">{<block_content pos:start="271:9" pos:end="289:9">

        <for pos:start="271:9" pos:end="289:9">for<control pos:start="271:12" pos:end="271:46">(<init pos:start="271:13" pos:end="271:19"><expr pos:start="271:13" pos:end="271:18"><name pos:start="271:13" pos:end="271:14">ch</name> <operator pos:start="271:16" pos:end="271:16">=</operator> <literal type="number" pos:start="271:18" pos:end="271:18">0</literal></expr>;</init> <condition pos:start="271:21" pos:end="271:40"><expr pos:start="271:21" pos:end="271:39"><name pos:start="271:21" pos:end="271:22">ch</name> <operator pos:start="271:24" pos:end="271:24">&lt;</operator> <name pos:start="271:26" pos:end="271:39"><name pos:start="271:26" pos:end="271:26">s</name><operator pos:start="271:27" pos:end="271:28">-&gt;</operator><name pos:start="271:29" pos:end="271:39">nb_channels</name></name></expr>;</condition> <incr pos:start="271:42" pos:end="271:45"><expr pos:start="271:42" pos:end="271:45"><name pos:start="271:42" pos:end="271:43">ch</name><operator pos:start="271:44" pos:end="271:45">++</operator></expr></incr>)</control> <block pos:start="271:48" pos:end="289:9">{<block_content pos:start="273:13" pos:end="287:13">

            <if_stmt pos:start="273:13" pos:end="287:13"><if pos:start="273:13" pos:end="287:13">if <condition pos:start="273:16" pos:end="273:37">(<expr pos:start="273:17" pos:end="273:36"><name pos:start="273:17" pos:end="273:36"><name pos:start="273:17" pos:end="273:17">s</name><operator pos:start="273:18" pos:end="273:19">-&gt;</operator><name pos:start="273:20" pos:end="273:32">channel_coded</name><index pos:start="273:33" pos:end="273:36">[<expr pos:start="273:34" pos:end="273:35"><name pos:start="273:34" pos:end="273:35">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="273:39" pos:end="287:13">{<block_content pos:start="275:17" pos:end="285:17">

                <if_stmt pos:start="275:17" pos:end="285:17"><if pos:start="275:17" pos:end="281:17">if <condition pos:start="275:20" pos:end="275:35">(<expr pos:start="275:21" pos:end="275:34"><name pos:start="275:21" pos:end="275:34"><name pos:start="275:21" pos:end="275:21">s</name><operator pos:start="275:22" pos:end="275:23">-&gt;</operator><name pos:start="275:24" pos:end="275:34">use_exp_vlc</name></name></expr>)</condition> <block pos:start="275:37" pos:end="281:17">{<block_content pos:start="277:21" pos:end="279:34">

                    <if_stmt pos:start="277:21" pos:end="279:34"><if pos:start="277:21" pos:end="279:34">if <condition pos:start="277:24" pos:end="277:50">(<expr pos:start="277:25" pos:end="277:49"><call pos:start="277:25" pos:end="277:45"><name pos:start="277:25" pos:end="277:38">decode_exp_vlc</name><argument_list pos:start="277:39" pos:end="277:45">(<argument pos:start="277:40" pos:end="277:40"><expr pos:start="277:40" pos:end="277:40"><name pos:start="277:40" pos:end="277:40">s</name></expr></argument>, <argument pos:start="277:43" pos:end="277:44"><expr pos:start="277:43" pos:end="277:44"><name pos:start="277:43" pos:end="277:44">ch</name></expr></argument>)</argument_list></call> <operator pos:start="277:47" pos:end="277:47">&lt;</operator> <literal type="number" pos:start="277:49" pos:end="277:49">0</literal></expr>)</condition><block type="pseudo" pos:start="279:25" pos:end="279:34"><block_content pos:start="279:25" pos:end="279:34">

                        <return pos:start="279:25" pos:end="279:34">return <expr pos:start="279:32" pos:end="279:33"><operator pos:start="279:32" pos:end="279:32">-</operator><literal type="number" pos:start="279:33" pos:end="279:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="281:19" pos:end="285:17">else <block pos:start="281:24" pos:end="285:17">{<block_content pos:start="283:21" pos:end="283:42">

                    <expr_stmt pos:start="283:21" pos:end="283:42"><expr pos:start="283:21" pos:end="283:41"><call pos:start="283:21" pos:end="283:41"><name pos:start="283:21" pos:end="283:34">decode_exp_lsp</name><argument_list pos:start="283:35" pos:end="283:41">(<argument pos:start="283:36" pos:end="283:36"><expr pos:start="283:36" pos:end="283:36"><name pos:start="283:36" pos:end="283:36">s</name></expr></argument>, <argument pos:start="283:39" pos:end="283:40"><expr pos:start="283:39" pos:end="283:40"><name pos:start="283:39" pos:end="283:40">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <else pos:start="291:7" pos:end="305:5">else <block pos:start="291:12" pos:end="305:5">{<block_content pos:start="293:9" pos:end="303:9">

        <for pos:start="293:9" pos:end="303:9">for<control pos:start="293:12" pos:end="293:46">(<init pos:start="293:13" pos:end="293:19"><expr pos:start="293:13" pos:end="293:18"><name pos:start="293:13" pos:end="293:14">ch</name> <operator pos:start="293:16" pos:end="293:16">=</operator> <literal type="number" pos:start="293:18" pos:end="293:18">0</literal></expr>;</init> <condition pos:start="293:21" pos:end="293:40"><expr pos:start="293:21" pos:end="293:39"><name pos:start="293:21" pos:end="293:22">ch</name> <operator pos:start="293:24" pos:end="293:24">&lt;</operator> <name pos:start="293:26" pos:end="293:39"><name pos:start="293:26" pos:end="293:26">s</name><operator pos:start="293:27" pos:end="293:28">-&gt;</operator><name pos:start="293:29" pos:end="293:39">nb_channels</name></name></expr>;</condition> <incr pos:start="293:42" pos:end="293:45"><expr pos:start="293:42" pos:end="293:45"><name pos:start="293:42" pos:end="293:43">ch</name><operator pos:start="293:44" pos:end="293:45">++</operator></expr></incr>)</control> <block pos:start="293:48" pos:end="303:9">{<block_content pos:start="295:13" pos:end="301:13">

            <if_stmt pos:start="295:13" pos:end="301:13"><if pos:start="295:13" pos:end="301:13">if <condition pos:start="295:16" pos:end="295:37">(<expr pos:start="295:17" pos:end="295:36"><name pos:start="295:17" pos:end="295:36"><name pos:start="295:17" pos:end="295:17">s</name><operator pos:start="295:18" pos:end="295:19">-&gt;</operator><name pos:start="295:20" pos:end="295:32">channel_coded</name><index pos:start="295:33" pos:end="295:36">[<expr pos:start="295:34" pos:end="295:35"><name pos:start="295:34" pos:end="295:35">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="295:39" pos:end="301:13">{<block_content pos:start="297:17" pos:end="299:48">

                <expr_stmt pos:start="297:17" pos:end="299:48"><expr pos:start="297:17" pos:end="299:47"><call pos:start="297:17" pos:end="299:47"><name pos:start="297:17" pos:end="297:33">interpolate_array</name><argument_list pos:start="297:34" pos:end="299:47">(<argument pos:start="297:35" pos:end="297:50"><expr pos:start="297:35" pos:end="297:50"><name pos:start="297:35" pos:end="297:50"><name pos:start="297:35" pos:end="297:35">s</name><operator pos:start="297:36" pos:end="297:37">-&gt;</operator><name pos:start="297:38" pos:end="297:46">exponents</name><index pos:start="297:47" pos:end="297:50">[<expr pos:start="297:48" pos:end="297:49"><name pos:start="297:48" pos:end="297:49">ch</name></expr>]</index></name></expr></argument>, <argument pos:start="297:53" pos:end="297:79"><expr pos:start="297:53" pos:end="297:79"><literal type="number" pos:start="297:53" pos:end="297:53">1</literal> <operator pos:start="297:55" pos:end="297:56">&lt;&lt;</operator> <name pos:start="297:58" pos:end="297:79"><name pos:start="297:58" pos:end="297:58">s</name><operator pos:start="297:59" pos:end="297:60">-&gt;</operator><name pos:start="297:61" pos:end="297:79">prev_block_len_bits</name></name></expr></argument>,

                                  <argument pos:start="299:35" pos:end="299:46"><expr pos:start="299:35" pos:end="299:46"><name pos:start="299:35" pos:end="299:46"><name pos:start="299:35" pos:end="299:35">s</name><operator pos:start="299:36" pos:end="299:37">-&gt;</operator><name pos:start="299:38" pos:end="299:46">block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="309:5" pos:end="309:57">/* parse spectral coefficients : just RLE encoding */</comment>

    <for pos:start="311:5" pos:end="417:5">for<control pos:start="311:8" pos:end="311:42">(<init pos:start="311:9" pos:end="311:15"><expr pos:start="311:9" pos:end="311:14"><name pos:start="311:9" pos:end="311:10">ch</name> <operator pos:start="311:12" pos:end="311:12">=</operator> <literal type="number" pos:start="311:14" pos:end="311:14">0</literal></expr>;</init> <condition pos:start="311:17" pos:end="311:36"><expr pos:start="311:17" pos:end="311:35"><name pos:start="311:17" pos:end="311:18">ch</name> <operator pos:start="311:20" pos:end="311:20">&lt;</operator> <name pos:start="311:22" pos:end="311:35"><name pos:start="311:22" pos:end="311:22">s</name><operator pos:start="311:23" pos:end="311:24">-&gt;</operator><name pos:start="311:25" pos:end="311:35">nb_channels</name></name></expr>;</condition> <incr pos:start="311:38" pos:end="311:41"><expr pos:start="311:38" pos:end="311:41"><name pos:start="311:38" pos:end="311:39">ch</name><operator pos:start="311:40" pos:end="311:41">++</operator></expr></incr>)</control> <block pos:start="311:44" pos:end="417:5">{<block_content pos:start="313:9" pos:end="415:9">

        <if_stmt pos:start="313:9" pos:end="409:9"><if pos:start="313:9" pos:end="409:9">if <condition pos:start="313:12" pos:end="313:33">(<expr pos:start="313:13" pos:end="313:32"><name pos:start="313:13" pos:end="313:32"><name pos:start="313:13" pos:end="313:13">s</name><operator pos:start="313:14" pos:end="313:15">-&gt;</operator><name pos:start="313:16" pos:end="313:28">channel_coded</name><index pos:start="313:29" pos:end="313:32">[<expr pos:start="313:30" pos:end="313:31"><name pos:start="313:30" pos:end="313:31">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="313:35" pos:end="409:9">{<block_content pos:start="315:13" pos:end="407:13">

            <decl_stmt pos:start="315:13" pos:end="315:26"><decl pos:start="315:13" pos:end="315:25"><type pos:start="315:13" pos:end="315:17"><name pos:start="315:13" pos:end="315:15">VLC</name> <modifier pos:start="315:17" pos:end="315:17">*</modifier></type><name pos:start="315:18" pos:end="315:25">coef_vlc</name></decl>;</decl_stmt>

            <decl_stmt pos:start="317:13" pos:end="317:41"><decl pos:start="317:13" pos:end="317:21"><type pos:start="317:13" pos:end="317:15"><name pos:start="317:13" pos:end="317:15">int</name></type> <name pos:start="317:17" pos:end="317:21">level</name></decl>, <decl pos:start="317:24" pos:end="317:26"><type ref="prev" pos:start="317:13" pos:end="317:15"/><name pos:start="317:24" pos:end="317:26">run</name></decl>, <decl pos:start="317:29" pos:end="317:32"><type ref="prev" pos:start="317:13" pos:end="317:15"/><name pos:start="317:29" pos:end="317:32">sign</name></decl>, <decl pos:start="317:35" pos:end="317:40"><type ref="prev" pos:start="317:13" pos:end="317:15"/><name pos:start="317:35" pos:end="317:40">tindex</name></decl>;</decl_stmt>

            <decl_stmt pos:start="319:13" pos:end="319:32"><decl pos:start="319:13" pos:end="319:24"><type pos:start="319:13" pos:end="319:21"><name pos:start="319:13" pos:end="319:19">int16_t</name> <modifier pos:start="319:21" pos:end="319:21">*</modifier></type><name pos:start="319:22" pos:end="319:24">ptr</name></decl>, <decl pos:start="319:27" pos:end="319:31"><type ref="prev" pos:start="319:13" pos:end="319:21"><modifier pos:start="319:27" pos:end="319:27">*</modifier></type><name pos:start="319:28" pos:end="319:31">eptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="321:13" pos:end="321:52"><decl pos:start="321:13" pos:end="321:39"><type pos:start="321:13" pos:end="321:28"><specifier pos:start="321:13" pos:end="321:17">const</specifier> <name pos:start="321:19" pos:end="321:26">uint16_t</name> <modifier pos:start="321:28" pos:end="321:28">*</modifier></type><name pos:start="321:29" pos:end="321:39">level_table</name></decl>, <decl pos:start="321:42" pos:end="321:51"><type ref="prev" pos:start="321:13" pos:end="321:28"><modifier pos:start="321:42" pos:end="321:42">*</modifier></type><name pos:start="321:43" pos:end="321:51">run_table</name></decl>;</decl_stmt>



            <comment type="block" pos:start="325:13" pos:end="327:56">/* special VLC tables are used for ms stereo because

               there is potentially less energy there */</comment>

            <expr_stmt pos:start="329:13" pos:end="329:47"><expr pos:start="329:13" pos:end="329:46"><name pos:start="329:13" pos:end="329:18">tindex</name> <operator pos:start="329:20" pos:end="329:20">=</operator> <operator pos:start="329:22" pos:end="329:22">(</operator><name pos:start="329:23" pos:end="329:24">ch</name> <operator pos:start="329:26" pos:end="329:27">==</operator> <literal type="number" pos:start="329:29" pos:end="329:29">1</literal> <operator pos:start="329:31" pos:end="329:32">&amp;&amp;</operator> <name pos:start="329:34" pos:end="329:45"><name pos:start="329:34" pos:end="329:34">s</name><operator pos:start="329:35" pos:end="329:36">-&gt;</operator><name pos:start="329:37" pos:end="329:45">ms_stereo</name></name><operator pos:start="329:46" pos:end="329:46">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:44"><expr pos:start="331:13" pos:end="331:43"><name pos:start="331:13" pos:end="331:20">coef_vlc</name> <operator pos:start="331:22" pos:end="331:22">=</operator> <operator pos:start="331:24" pos:end="331:24">&amp;</operator><name pos:start="331:25" pos:end="331:43"><name pos:start="331:25" pos:end="331:25">s</name><operator pos:start="331:26" pos:end="331:27">-&gt;</operator><name pos:start="331:28" pos:end="331:35">coef_vlc</name><index pos:start="331:36" pos:end="331:43">[<expr pos:start="331:37" pos:end="331:42"><name pos:start="331:37" pos:end="331:42">tindex</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:45"><expr pos:start="333:13" pos:end="333:44"><name pos:start="333:13" pos:end="333:21">run_table</name> <operator pos:start="333:23" pos:end="333:23">=</operator> <name pos:start="333:25" pos:end="333:44"><name pos:start="333:25" pos:end="333:25">s</name><operator pos:start="333:26" pos:end="333:27">-&gt;</operator><name pos:start="333:28" pos:end="333:36">run_table</name><index pos:start="333:37" pos:end="333:44">[<expr pos:start="333:38" pos:end="333:43"><name pos:start="333:38" pos:end="333:43">tindex</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="335:49"><expr pos:start="335:13" pos:end="335:48"><name pos:start="335:13" pos:end="335:23">level_table</name> <operator pos:start="335:25" pos:end="335:25">=</operator> <name pos:start="335:27" pos:end="335:48"><name pos:start="335:27" pos:end="335:27">s</name><operator pos:start="335:28" pos:end="335:29">-&gt;</operator><name pos:start="335:30" pos:end="335:40">level_table</name><index pos:start="335:41" pos:end="335:48">[<expr pos:start="335:42" pos:end="335:47"><name pos:start="335:42" pos:end="335:47">tindex</name></expr>]</index></name></expr>;</expr_stmt>

            <comment type="block" pos:start="337:13" pos:end="337:31">/* XXX: optimize */</comment>

            <expr_stmt pos:start="339:13" pos:end="339:36"><expr pos:start="339:13" pos:end="339:35"><name pos:start="339:13" pos:end="339:15">ptr</name> <operator pos:start="339:17" pos:end="339:17">=</operator> <operator pos:start="339:19" pos:end="339:19">&amp;</operator><name pos:start="339:20" pos:end="339:35"><name pos:start="339:20" pos:end="339:20">s</name><operator pos:start="339:21" pos:end="339:22">-&gt;</operator><name pos:start="339:23" pos:end="339:28">coefs1</name><index pos:start="339:29" pos:end="339:32">[<expr pos:start="339:30" pos:end="339:31"><name pos:start="339:30" pos:end="339:31">ch</name></expr>]</index><index pos:start="339:33" pos:end="339:35">[<expr pos:start="339:34" pos:end="339:34"><literal type="number" pos:start="339:34" pos:end="339:34">0</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="341:13" pos:end="341:38"><expr pos:start="341:13" pos:end="341:37"><name pos:start="341:13" pos:end="341:16">eptr</name> <operator pos:start="341:18" pos:end="341:18">=</operator> <name pos:start="341:20" pos:end="341:22">ptr</name> <operator pos:start="341:24" pos:end="341:24">+</operator> <name pos:start="341:26" pos:end="341:37"><name pos:start="341:26" pos:end="341:33">nb_coefs</name><index pos:start="341:34" pos:end="341:37">[<expr pos:start="341:35" pos:end="341:36"><name pos:start="341:35" pos:end="341:36">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:59"><expr pos:start="343:13" pos:end="343:58"><call pos:start="343:13" pos:end="343:58"><name pos:start="343:13" pos:end="343:18">memset</name><argument_list pos:start="343:19" pos:end="343:58">(<argument pos:start="343:20" pos:end="343:22"><expr pos:start="343:20" pos:end="343:22"><name pos:start="343:20" pos:end="343:22">ptr</name></expr></argument>, <argument pos:start="343:25" pos:end="343:25"><expr pos:start="343:25" pos:end="343:25"><literal type="number" pos:start="343:25" pos:end="343:25">0</literal></expr></argument>, <argument pos:start="343:28" pos:end="343:57"><expr pos:start="343:28" pos:end="343:57"><name pos:start="343:28" pos:end="343:39"><name pos:start="343:28" pos:end="343:28">s</name><operator pos:start="343:29" pos:end="343:30">-&gt;</operator><name pos:start="343:31" pos:end="343:39">block_len</name></name> <operator pos:start="343:41" pos:end="343:41">*</operator> <sizeof pos:start="343:43" pos:end="343:57">sizeof<argument_list pos:start="343:49" pos:end="343:57">(<argument pos:start="343:50" pos:end="343:56"><expr pos:start="343:50" pos:end="343:56"><name pos:start="343:50" pos:end="343:56">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="345:13" pos:end="407:13">for<control pos:start="345:16" pos:end="345:19">(<init pos:start="345:17" pos:end="345:17">;</init><condition pos:start="345:18" pos:end="345:18">;</condition><incr/>)</control> <block pos:start="345:21" pos:end="407:13">{<block_content pos:start="347:17" pos:end="405:26">

                <expr_stmt pos:start="347:17" pos:end="347:74"><expr pos:start="347:17" pos:end="347:73"><name pos:start="347:17" pos:end="347:20">code</name> <operator pos:start="347:22" pos:end="347:22">=</operator> <call pos:start="347:24" pos:end="347:73"><name pos:start="347:24" pos:end="347:31">get_vlc2</name><argument_list pos:start="347:32" pos:end="347:73">(<argument pos:start="347:33" pos:end="347:38"><expr pos:start="347:33" pos:end="347:38"><operator pos:start="347:33" pos:end="347:33">&amp;</operator><name pos:start="347:34" pos:end="347:38"><name pos:start="347:34" pos:end="347:34">s</name><operator pos:start="347:35" pos:end="347:36">-&gt;</operator><name pos:start="347:37" pos:end="347:38">gb</name></name></expr></argument>, <argument pos:start="347:41" pos:end="347:55"><expr pos:start="347:41" pos:end="347:55"><name pos:start="347:41" pos:end="347:55"><name pos:start="347:41" pos:end="347:48">coef_vlc</name><operator pos:start="347:49" pos:end="347:50">-&gt;</operator><name pos:start="347:51" pos:end="347:55">table</name></name></expr></argument>, <argument pos:start="347:58" pos:end="347:64"><expr pos:start="347:58" pos:end="347:64"><name pos:start="347:58" pos:end="347:64">VLCBITS</name></expr></argument>, <argument pos:start="347:67" pos:end="347:72"><expr pos:start="347:67" pos:end="347:72"><name pos:start="347:67" pos:end="347:72">VLCMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="349:17" pos:end="351:30"><if pos:start="349:17" pos:end="351:30">if <condition pos:start="349:20" pos:end="349:29">(<expr pos:start="349:21" pos:end="349:28"><name pos:start="349:21" pos:end="349:24">code</name> <operator pos:start="349:26" pos:end="349:26">&lt;</operator> <literal type="number" pos:start="349:28" pos:end="349:28">0</literal></expr>)</condition><block type="pseudo" pos:start="351:21" pos:end="351:30"><block_content pos:start="351:21" pos:end="351:30">

                    <return pos:start="351:21" pos:end="351:30">return <expr pos:start="351:28" pos:end="351:29"><operator pos:start="351:28" pos:end="351:28">-</operator><literal type="number" pos:start="351:29" pos:end="351:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="353:17" pos:end="379:17"><if pos:start="353:17" pos:end="359:17">if <condition pos:start="353:20" pos:end="353:30">(<expr pos:start="353:21" pos:end="353:29"><name pos:start="353:21" pos:end="353:24">code</name> <operator pos:start="353:26" pos:end="353:27">==</operator> <literal type="number" pos:start="353:29" pos:end="353:29">1</literal></expr>)</condition> <block pos:start="353:32" pos:end="359:17">{<block_content pos:start="357:21" pos:end="357:26">

                    <comment type="block" pos:start="355:21" pos:end="355:29">/* EOB */</comment>

                    <break pos:start="357:21" pos:end="357:26">break;</break>

                </block_content>}</block></if> <if type="elseif" pos:start="359:19" pos:end="371:17">else if <condition pos:start="359:27" pos:end="359:37">(<expr pos:start="359:28" pos:end="359:36"><name pos:start="359:28" pos:end="359:31">code</name> <operator pos:start="359:33" pos:end="359:34">==</operator> <literal type="number" pos:start="359:36" pos:end="359:36">0</literal></expr>)</condition> <block pos:start="359:39" pos:end="371:17">{<block_content pos:start="363:21" pos:end="369:62">

                    <comment type="block" pos:start="361:21" pos:end="361:32">/* escape */</comment>

                    <expr_stmt pos:start="363:21" pos:end="363:59"><expr pos:start="363:21" pos:end="363:58"><name pos:start="363:21" pos:end="363:25">level</name> <operator pos:start="363:27" pos:end="363:27">=</operator> <call pos:start="363:29" pos:end="363:58"><name pos:start="363:29" pos:end="363:36">get_bits</name><argument_list pos:start="363:37" pos:end="363:58">(<argument pos:start="363:38" pos:end="363:43"><expr pos:start="363:38" pos:end="363:43"><operator pos:start="363:38" pos:end="363:38">&amp;</operator><name pos:start="363:39" pos:end="363:43"><name pos:start="363:39" pos:end="363:39">s</name><operator pos:start="363:40" pos:end="363:41">-&gt;</operator><name pos:start="363:42" pos:end="363:43">gb</name></name></expr></argument>, <argument pos:start="363:46" pos:end="363:57"><expr pos:start="363:46" pos:end="363:57"><name pos:start="363:46" pos:end="363:57">coef_nb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="365:21" pos:end="367:56">/* NOTE: this is rather suboptimal. reading

                       block_len_bits would be better */</comment>

                    <expr_stmt pos:start="369:21" pos:end="369:62"><expr pos:start="369:21" pos:end="369:61"><name pos:start="369:21" pos:end="369:23">run</name> <operator pos:start="369:25" pos:end="369:25">=</operator> <call pos:start="369:27" pos:end="369:61"><name pos:start="369:27" pos:end="369:34">get_bits</name><argument_list pos:start="369:35" pos:end="369:61">(<argument pos:start="369:36" pos:end="369:41"><expr pos:start="369:36" pos:end="369:41"><operator pos:start="369:36" pos:end="369:36">&amp;</operator><name pos:start="369:37" pos:end="369:41"><name pos:start="369:37" pos:end="369:37">s</name><operator pos:start="369:38" pos:end="369:39">-&gt;</operator><name pos:start="369:40" pos:end="369:41">gb</name></name></expr></argument>, <argument pos:start="369:44" pos:end="369:60"><expr pos:start="369:44" pos:end="369:60"><name pos:start="369:44" pos:end="369:60"><name pos:start="369:44" pos:end="369:44">s</name><operator pos:start="369:45" pos:end="369:46">-&gt;</operator><name pos:start="369:47" pos:end="369:60">frame_len_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="371:19" pos:end="379:17">else <block pos:start="371:24" pos:end="379:17">{<block_content pos:start="375:21" pos:end="377:46">

                    <comment type="block" pos:start="373:21" pos:end="373:37">/* normal code */</comment>

                    <expr_stmt pos:start="375:21" pos:end="375:42"><expr pos:start="375:21" pos:end="375:41"><name pos:start="375:21" pos:end="375:23">run</name> <operator pos:start="375:25" pos:end="375:25">=</operator> <name pos:start="375:27" pos:end="375:41"><name pos:start="375:27" pos:end="375:35">run_table</name><index pos:start="375:36" pos:end="375:41">[<expr pos:start="375:37" pos:end="375:40"><name pos:start="375:37" pos:end="375:40">code</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="377:21" pos:end="377:46"><expr pos:start="377:21" pos:end="377:45"><name pos:start="377:21" pos:end="377:25">level</name> <operator pos:start="377:27" pos:end="377:27">=</operator> <name pos:start="377:29" pos:end="377:45"><name pos:start="377:29" pos:end="377:39">level_table</name><index pos:start="377:40" pos:end="377:45">[<expr pos:start="377:41" pos:end="377:44"><name pos:start="377:41" pos:end="377:44">code</name></expr>]</index></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:43"><expr pos:start="381:17" pos:end="381:42"><name pos:start="381:17" pos:end="381:20">sign</name> <operator pos:start="381:22" pos:end="381:22">=</operator> <call pos:start="381:24" pos:end="381:42"><name pos:start="381:24" pos:end="381:31">get_bits</name><argument_list pos:start="381:32" pos:end="381:42">(<argument pos:start="381:33" pos:end="381:38"><expr pos:start="381:33" pos:end="381:38"><operator pos:start="381:33" pos:end="381:33">&amp;</operator><name pos:start="381:34" pos:end="381:38"><name pos:start="381:34" pos:end="381:34">s</name><operator pos:start="381:35" pos:end="381:36">-&gt;</operator><name pos:start="381:37" pos:end="381:38">gb</name></name></expr></argument>, <argument pos:start="381:41" pos:end="381:41"><expr pos:start="381:41" pos:end="381:41"><literal type="number" pos:start="381:41" pos:end="381:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="383:17" pos:end="385:35"><if pos:start="383:17" pos:end="385:35">if <condition pos:start="383:20" pos:end="383:26">(<expr pos:start="383:21" pos:end="383:25"><operator pos:start="383:21" pos:end="383:21">!</operator><name pos:start="383:22" pos:end="383:25">sign</name></expr>)</condition><block type="pseudo" pos:start="385:21" pos:end="385:35"><block_content pos:start="385:21" pos:end="385:35">

                    <expr_stmt pos:start="385:21" pos:end="385:35"><expr pos:start="385:21" pos:end="385:34"><name pos:start="385:21" pos:end="385:25">level</name> <operator pos:start="385:27" pos:end="385:27">=</operator> <operator pos:start="385:29" pos:end="385:29">-</operator><name pos:start="385:30" pos:end="385:34">level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="387:17" pos:end="387:27"><expr pos:start="387:17" pos:end="387:26"><name pos:start="387:17" pos:end="387:19">ptr</name> <operator pos:start="387:21" pos:end="387:22">+=</operator> <name pos:start="387:24" pos:end="387:26">run</name></expr>;</expr_stmt>

                <if_stmt pos:start="389:17" pos:end="397:17"><if pos:start="389:17" pos:end="397:17">if <condition pos:start="389:20" pos:end="389:32">(<expr pos:start="389:21" pos:end="389:31"><name pos:start="389:21" pos:end="389:23">ptr</name> <operator pos:start="389:25" pos:end="389:26">&gt;=</operator> <name pos:start="389:28" pos:end="389:31">eptr</name></expr>)</condition>

                <block pos:start="391:17" pos:end="397:17">{<block_content pos:start="393:21" pos:end="395:26">

                    <expr_stmt pos:start="393:21" pos:end="393:87"><expr pos:start="393:21" pos:end="393:86"><call pos:start="393:21" pos:end="393:86"><name pos:start="393:21" pos:end="393:26">av_log</name><argument_list pos:start="393:27" pos:end="393:86">(<argument pos:start="393:28" pos:end="393:31"><expr pos:start="393:28" pos:end="393:31"><name pos:start="393:28" pos:end="393:31">NULL</name></expr></argument>, <argument pos:start="393:34" pos:end="393:45"><expr pos:start="393:34" pos:end="393:45"><name pos:start="393:34" pos:end="393:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="393:48" pos:end="393:85"><expr pos:start="393:48" pos:end="393:85"><literal type="string" pos:start="393:48" pos:end="393:85">"overflow in spectral RLE, ignoring\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="395:21" pos:end="395:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="399:17" pos:end="399:31"><expr pos:start="399:17" pos:end="399:30"><operator pos:start="399:17" pos:end="399:17">*</operator><name pos:start="399:18" pos:end="399:20">ptr</name><operator pos:start="399:21" pos:end="399:22">++</operator> <operator pos:start="399:24" pos:end="399:24">=</operator> <name pos:start="399:26" pos:end="399:30">level</name></expr>;</expr_stmt>

                <comment type="block" pos:start="401:17" pos:end="401:46">/* NOTE: EOB can be omitted */</comment>

                <if_stmt pos:start="403:17" pos:end="405:26"><if pos:start="403:17" pos:end="405:26">if <condition pos:start="403:20" pos:end="403:32">(<expr pos:start="403:21" pos:end="403:31"><name pos:start="403:21" pos:end="403:23">ptr</name> <operator pos:start="403:25" pos:end="403:26">&gt;=</operator> <name pos:start="403:28" pos:end="403:31">eptr</name></expr>)</condition><block type="pseudo" pos:start="405:21" pos:end="405:26"><block_content pos:start="405:21" pos:end="405:26">

                    <break pos:start="405:21" pos:end="405:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="411:9" pos:end="415:9"><if pos:start="411:9" pos:end="415:9">if <condition pos:start="411:12" pos:end="411:51">(<expr pos:start="411:13" pos:end="411:50"><name pos:start="411:13" pos:end="411:22"><name pos:start="411:13" pos:end="411:13">s</name><operator pos:start="411:14" pos:end="411:15">-&gt;</operator><name pos:start="411:16" pos:end="411:22">version</name></name> <operator pos:start="411:24" pos:end="411:25">==</operator> <literal type="number" pos:start="411:27" pos:end="411:27">1</literal> <operator pos:start="411:29" pos:end="411:30">&amp;&amp;</operator> <name pos:start="411:32" pos:end="411:45"><name pos:start="411:32" pos:end="411:32">s</name><operator pos:start="411:33" pos:end="411:34">-&gt;</operator><name pos:start="411:35" pos:end="411:45">nb_channels</name></name> <operator pos:start="411:47" pos:end="411:48">&gt;=</operator> <literal type="number" pos:start="411:50" pos:end="411:50">2</literal></expr>)</condition> <block pos:start="411:53" pos:end="415:9">{<block_content pos:start="413:13" pos:end="413:35">

            <expr_stmt pos:start="413:13" pos:end="413:35"><expr pos:start="413:13" pos:end="413:34"><call pos:start="413:13" pos:end="413:34"><name pos:start="413:13" pos:end="413:26">align_get_bits</name><argument_list pos:start="413:27" pos:end="413:34">(<argument pos:start="413:28" pos:end="413:33"><expr pos:start="413:28" pos:end="413:33"><operator pos:start="413:28" pos:end="413:28">&amp;</operator><name pos:start="413:29" pos:end="413:33"><name pos:start="413:29" pos:end="413:29">s</name><operator pos:start="413:30" pos:end="413:31">-&gt;</operator><name pos:start="413:32" pos:end="413:33">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="421:5" pos:end="421:19">/* normalize */</comment>

    <block pos:start="423:5" pos:end="435:5">{<block_content pos:start="425:9" pos:end="433:9">

        <decl_stmt pos:start="425:9" pos:end="425:34"><decl pos:start="425:9" pos:end="425:33"><type pos:start="425:9" pos:end="425:11"><name pos:start="425:9" pos:end="425:11">int</name></type> <name pos:start="425:13" pos:end="425:14">n4</name> <init pos:start="425:16" pos:end="425:33">= <expr pos:start="425:18" pos:end="425:33"><name pos:start="425:18" pos:end="425:29"><name pos:start="425:18" pos:end="425:18">s</name><operator pos:start="425:19" pos:end="425:20">-&gt;</operator><name pos:start="425:21" pos:end="425:29">block_len</name></name> <operator pos:start="425:31" pos:end="425:31">/</operator> <literal type="number" pos:start="425:33" pos:end="425:33">2</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="427:9" pos:end="427:36"><expr pos:start="427:9" pos:end="427:35"><name pos:start="427:9" pos:end="427:17">mdct_norm</name> <operator pos:start="427:19" pos:end="427:19">=</operator> <literal type="number" pos:start="427:21" pos:end="427:23">1.0</literal> <operator pos:start="427:25" pos:end="427:25">/</operator> <operator pos:start="427:27" pos:end="427:27">(</operator><name pos:start="427:28" pos:end="427:32">float</name><operator pos:start="427:33" pos:end="427:33">)</operator><name pos:start="427:34" pos:end="427:35">n4</name></expr>;</expr_stmt>

        <if_stmt pos:start="429:9" pos:end="433:9"><if pos:start="429:9" pos:end="433:9">if <condition pos:start="429:12" pos:end="429:28">(<expr pos:start="429:13" pos:end="429:27"><name pos:start="429:13" pos:end="429:22"><name pos:start="429:13" pos:end="429:13">s</name><operator pos:start="429:14" pos:end="429:15">-&gt;</operator><name pos:start="429:16" pos:end="429:22">version</name></name> <operator pos:start="429:24" pos:end="429:25">==</operator> <literal type="number" pos:start="429:27" pos:end="429:27">1</literal></expr>)</condition> <block pos:start="429:30" pos:end="433:9">{<block_content pos:start="431:13" pos:end="431:34">

            <expr_stmt pos:start="431:13" pos:end="431:34"><expr pos:start="431:13" pos:end="431:33"><name pos:start="431:13" pos:end="431:21">mdct_norm</name> <operator pos:start="431:23" pos:end="431:24">*=</operator> <call pos:start="431:26" pos:end="431:33"><name pos:start="431:26" pos:end="431:29">sqrt</name><argument_list pos:start="431:30" pos:end="431:33">(<argument pos:start="431:31" pos:end="431:32"><expr pos:start="431:31" pos:end="431:32"><name pos:start="431:31" pos:end="431:32">n4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="439:5" pos:end="439:47">/* finally compute the MDCT coefficients */</comment>

    <for pos:start="441:5" pos:end="636:0">for<control pos:start="441:8" pos:end="441:42">(<init pos:start="441:9" pos:end="441:15"><expr pos:start="441:9" pos:end="441:14"><name pos:start="441:9" pos:end="441:10">ch</name> <operator pos:start="441:12" pos:end="441:12">=</operator> <literal type="number" pos:start="441:14" pos:end="441:14">0</literal></expr>;</init> <condition pos:start="441:17" pos:end="441:36"><expr pos:start="441:17" pos:end="441:35"><name pos:start="441:17" pos:end="441:18">ch</name> <operator pos:start="441:20" pos:end="441:20">&lt;</operator> <name pos:start="441:22" pos:end="441:35"><name pos:start="441:22" pos:end="441:22">s</name><operator pos:start="441:23" pos:end="441:24">-&gt;</operator><name pos:start="441:25" pos:end="441:35">nb_channels</name></name></expr>;</condition> <incr pos:start="441:38" pos:end="441:41"><expr pos:start="441:38" pos:end="441:41"><name pos:start="441:38" pos:end="441:39">ch</name><operator pos:start="441:40" pos:end="441:41">++</operator></expr></incr>)</control> <block pos:start="441:44" pos:end="636:0">{<block_content pos:start="443:9" pos:end="629:9">

        <if_stmt pos:start="443:9" pos:end="629:9"><if pos:start="443:9" pos:end="629:9">if <condition pos:start="443:12" pos:end="443:33">(<expr pos:start="443:13" pos:end="443:32"><name pos:start="443:13" pos:end="443:32"><name pos:start="443:13" pos:end="443:13">s</name><operator pos:start="443:14" pos:end="443:15">-&gt;</operator><name pos:start="443:16" pos:end="443:28">channel_coded</name><index pos:start="443:29" pos:end="443:32">[<expr pos:start="443:30" pos:end="443:31"><name pos:start="443:30" pos:end="443:31">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="443:35" pos:end="629:9">{<block_content pos:start="445:13" pos:end="627:13">

            <decl_stmt pos:start="445:13" pos:end="445:28"><decl pos:start="445:13" pos:end="445:27"><type pos:start="445:13" pos:end="445:21"><name pos:start="445:13" pos:end="445:19">int16_t</name> <modifier pos:start="445:21" pos:end="445:21">*</modifier></type><name pos:start="445:22" pos:end="445:27">coefs1</name></decl>;</decl_stmt>

            <decl_stmt pos:start="447:13" pos:end="447:67"><decl pos:start="447:13" pos:end="447:24"><type pos:start="447:13" pos:end="447:19"><name pos:start="447:13" pos:end="447:17">float</name> <modifier pos:start="447:19" pos:end="447:19">*</modifier></type><name pos:start="447:20" pos:end="447:24">coefs</name></decl>, <decl pos:start="447:27" pos:end="447:36"><type ref="prev" pos:start="447:13" pos:end="447:19"><modifier pos:start="447:27" pos:end="447:27">*</modifier></type><name pos:start="447:28" pos:end="447:36">exponents</name></decl>, <decl pos:start="447:39" pos:end="447:42"><type ref="prev" pos:start="447:13" pos:end="447:19"/><name pos:start="447:39" pos:end="447:42">mult</name></decl>, <decl pos:start="447:45" pos:end="447:49"><type ref="prev" pos:start="447:13" pos:end="447:19"/><name pos:start="447:45" pos:end="447:49">mult1</name></decl>, <decl pos:start="447:52" pos:end="447:56"><type ref="prev" pos:start="447:13" pos:end="447:19"/><name pos:start="447:52" pos:end="447:56">noise</name></decl>, <decl pos:start="447:59" pos:end="447:66"><type ref="prev" pos:start="447:13" pos:end="447:19"><modifier pos:start="447:59" pos:end="447:59">*</modifier></type><name pos:start="447:60" pos:end="447:66">exp_ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="449:13" pos:end="449:44"><decl pos:start="449:13" pos:end="449:17"><type pos:start="449:13" pos:end="449:15"><name pos:start="449:13" pos:end="449:15">int</name></type> <name pos:start="449:17" pos:end="449:17">i</name></decl>, <decl pos:start="449:20" pos:end="449:20"><type ref="prev" pos:start="449:13" pos:end="449:15"/><name pos:start="449:20" pos:end="449:20">j</name></decl>, <decl pos:start="449:23" pos:end="449:23"><type ref="prev" pos:start="449:13" pos:end="449:15"/><name pos:start="449:23" pos:end="449:23">n</name></decl>, <decl pos:start="449:26" pos:end="449:27"><type ref="prev" pos:start="449:13" pos:end="449:15"/><name pos:start="449:26" pos:end="449:27">n1</name></decl>, <decl pos:start="449:30" pos:end="449:43"><type ref="prev" pos:start="449:13" pos:end="449:15"/><name pos:start="449:30" pos:end="449:43">last_high_band</name></decl>;</decl_stmt>

            <decl_stmt pos:start="451:13" pos:end="451:48"><decl pos:start="451:13" pos:end="451:47"><type pos:start="451:13" pos:end="451:17"><name pos:start="451:13" pos:end="451:17">float</name></type> <name pos:start="451:19" pos:end="451:47"><name pos:start="451:19" pos:end="451:27">exp_power</name><index pos:start="451:28" pos:end="451:47">[<expr pos:start="451:29" pos:end="451:46"><name pos:start="451:29" pos:end="451:46">HIGH_BAND_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>



            <expr_stmt pos:start="455:13" pos:end="455:35"><expr pos:start="455:13" pos:end="455:34"><name pos:start="455:13" pos:end="455:18">coefs1</name> <operator pos:start="455:20" pos:end="455:20">=</operator> <name pos:start="455:22" pos:end="455:34"><name pos:start="455:22" pos:end="455:22">s</name><operator pos:start="455:23" pos:end="455:24">-&gt;</operator><name pos:start="455:25" pos:end="455:30">coefs1</name><index pos:start="455:31" pos:end="455:34">[<expr pos:start="455:32" pos:end="455:33"><name pos:start="455:32" pos:end="455:33">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="457:13" pos:end="457:41"><expr pos:start="457:13" pos:end="457:40"><name pos:start="457:13" pos:end="457:21">exponents</name> <operator pos:start="457:23" pos:end="457:23">=</operator> <name pos:start="457:25" pos:end="457:40"><name pos:start="457:25" pos:end="457:25">s</name><operator pos:start="457:26" pos:end="457:27">-&gt;</operator><name pos:start="457:28" pos:end="457:36">exponents</name><index pos:start="457:37" pos:end="457:40">[<expr pos:start="457:38" pos:end="457:39"><name pos:start="457:38" pos:end="457:39">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="459:13" pos:end="459:68"><expr pos:start="459:13" pos:end="459:67"><name pos:start="459:13" pos:end="459:16">mult</name> <operator pos:start="459:18" pos:end="459:18">=</operator> <call pos:start="459:20" pos:end="459:45"><name pos:start="459:20" pos:end="459:22">pow</name><argument_list pos:start="459:23" pos:end="459:45">(<argument pos:start="459:24" pos:end="459:25"><expr pos:start="459:24" pos:end="459:25"><literal type="number" pos:start="459:24" pos:end="459:25">10</literal></expr></argument>, <argument pos:start="459:28" pos:end="459:44"><expr pos:start="459:28" pos:end="459:44"><name pos:start="459:28" pos:end="459:37">total_gain</name> <operator pos:start="459:39" pos:end="459:39">*</operator> <literal type="number" pos:start="459:41" pos:end="459:44">0.05</literal></expr></argument>)</argument_list></call> <operator pos:start="459:47" pos:end="459:47">/</operator> <name pos:start="459:49" pos:end="459:67"><name pos:start="459:49" pos:end="459:49">s</name><operator pos:start="459:50" pos:end="459:51">-&gt;</operator><name pos:start="459:52" pos:end="459:63">max_exponent</name><index pos:start="459:64" pos:end="459:67">[<expr pos:start="459:65" pos:end="459:66"><name pos:start="459:65" pos:end="459:66">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="461:13" pos:end="461:30"><expr pos:start="461:13" pos:end="461:29"><name pos:start="461:13" pos:end="461:16">mult</name> <operator pos:start="461:18" pos:end="461:19">*=</operator> <name pos:start="461:21" pos:end="461:29">mdct_norm</name></expr>;</expr_stmt>

            <expr_stmt pos:start="463:13" pos:end="463:33"><expr pos:start="463:13" pos:end="463:32"><name pos:start="463:13" pos:end="463:17">coefs</name> <operator pos:start="463:19" pos:end="463:19">=</operator> <name pos:start="463:21" pos:end="463:32"><name pos:start="463:21" pos:end="463:21">s</name><operator pos:start="463:22" pos:end="463:23">-&gt;</operator><name pos:start="463:24" pos:end="463:28">coefs</name><index pos:start="463:29" pos:end="463:32">[<expr pos:start="463:30" pos:end="463:31"><name pos:start="463:30" pos:end="463:31">ch</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="465:13" pos:end="627:13"><if pos:start="465:13" pos:end="605:13">if <condition pos:start="465:16" pos:end="465:36">(<expr pos:start="465:17" pos:end="465:35"><name pos:start="465:17" pos:end="465:35"><name pos:start="465:17" pos:end="465:17">s</name><operator pos:start="465:18" pos:end="465:19">-&gt;</operator><name pos:start="465:20" pos:end="465:35">use_noise_coding</name></name></expr>)</condition> <block pos:start="465:38" pos:end="605:13">{<block_content pos:start="467:17" pos:end="603:17">

                <expr_stmt pos:start="467:17" pos:end="467:29"><expr pos:start="467:17" pos:end="467:28"><name pos:start="467:17" pos:end="467:21">mult1</name> <operator pos:start="467:23" pos:end="467:23">=</operator> <name pos:start="467:25" pos:end="467:28">mult</name></expr>;</expr_stmt>

                <comment type="block" pos:start="469:17" pos:end="469:44">/* very low freqs : noise */</comment>

                <for pos:start="471:17" pos:end="477:17">for<control pos:start="471:20" pos:end="471:50">(<init pos:start="471:21" pos:end="471:26"><expr pos:start="471:21" pos:end="471:25"><name pos:start="471:21" pos:end="471:21">i</name> <operator pos:start="471:23" pos:end="471:23">=</operator> <literal type="number" pos:start="471:25" pos:end="471:25">0</literal></expr>;</init><condition pos:start="471:27" pos:end="471:45"><expr pos:start="471:27" pos:end="471:44"><name pos:start="471:27" pos:end="471:27">i</name> <operator pos:start="471:29" pos:end="471:29">&lt;</operator> <name pos:start="471:31" pos:end="471:44"><name pos:start="471:31" pos:end="471:31">s</name><operator pos:start="471:32" pos:end="471:33">-&gt;</operator><name pos:start="471:34" pos:end="471:44">coefs_start</name></name></expr>;</condition> <incr pos:start="471:47" pos:end="471:49"><expr pos:start="471:47" pos:end="471:49"><name pos:start="471:47" pos:end="471:47">i</name><operator pos:start="471:48" pos:end="471:49">++</operator></expr></incr>)</control> <block pos:start="471:52" pos:end="477:17">{<block_content pos:start="473:21" pos:end="475:81">

                    <expr_stmt pos:start="473:21" pos:end="473:87"><expr pos:start="473:21" pos:end="473:86"><operator pos:start="473:21" pos:end="473:21">*</operator><name pos:start="473:22" pos:end="473:26">coefs</name><operator pos:start="473:27" pos:end="473:28">++</operator> <operator pos:start="473:30" pos:end="473:30">=</operator> <name pos:start="473:32" pos:end="473:61"><name pos:start="473:32" pos:end="473:32">s</name><operator pos:start="473:33" pos:end="473:34">-&gt;</operator><name pos:start="473:35" pos:end="473:45">noise_table</name><index pos:start="473:46" pos:end="473:61">[<expr pos:start="473:47" pos:end="473:60"><name pos:start="473:47" pos:end="473:60"><name pos:start="473:47" pos:end="473:47">s</name><operator pos:start="473:48" pos:end="473:49">-&gt;</operator><name pos:start="473:50" pos:end="473:60">noise_index</name></name></expr>]</index></name> <operator pos:start="473:63" pos:end="473:63">*</operator> <operator pos:start="473:65" pos:end="473:65">(</operator><operator pos:start="473:66" pos:end="473:66">*</operator><name pos:start="473:67" pos:end="473:75">exponents</name><operator pos:start="473:76" pos:end="473:77">++</operator><operator pos:start="473:78" pos:end="473:78">)</operator> <operator pos:start="473:80" pos:end="473:80">*</operator> <name pos:start="473:82" pos:end="473:86">mult1</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="475:21" pos:end="475:81"><expr pos:start="475:21" pos:end="475:80"><name pos:start="475:21" pos:end="475:34"><name pos:start="475:21" pos:end="475:21">s</name><operator pos:start="475:22" pos:end="475:23">-&gt;</operator><name pos:start="475:24" pos:end="475:34">noise_index</name></name> <operator pos:start="475:36" pos:end="475:36">=</operator> <operator pos:start="475:38" pos:end="475:38">(</operator><name pos:start="475:39" pos:end="475:52"><name pos:start="475:39" pos:end="475:39">s</name><operator pos:start="475:40" pos:end="475:41">-&gt;</operator><name pos:start="475:42" pos:end="475:52">noise_index</name></name> <operator pos:start="475:54" pos:end="475:54">+</operator> <literal type="number" pos:start="475:56" pos:end="475:56">1</literal><operator pos:start="475:57" pos:end="475:57">)</operator> <operator pos:start="475:59" pos:end="475:59">&amp;</operator> <operator pos:start="475:61" pos:end="475:61">(</operator><name pos:start="475:62" pos:end="475:75">NOISE_TAB_SIZE</name> <operator pos:start="475:77" pos:end="475:77">-</operator> <literal type="number" pos:start="475:79" pos:end="475:79">1</literal><operator pos:start="475:80" pos:end="475:80">)</operator></expr>;</expr_stmt>

                </block_content>}</block></for>



                <expr_stmt pos:start="481:17" pos:end="481:51"><expr pos:start="481:17" pos:end="481:50"><name pos:start="481:17" pos:end="481:18">n1</name> <operator pos:start="481:20" pos:end="481:20">=</operator> <name pos:start="481:22" pos:end="481:50"><name pos:start="481:22" pos:end="481:22">s</name><operator pos:start="481:23" pos:end="481:24">-&gt;</operator><name pos:start="481:25" pos:end="481:43">exponent_high_sizes</name><index pos:start="481:44" pos:end="481:50">[<expr pos:start="481:45" pos:end="481:49"><name pos:start="481:45" pos:end="481:49">bsize</name></expr>]</index></name></expr>;</expr_stmt>



                <comment type="block" pos:start="485:17" pos:end="485:49">/* compute power of high bands */</comment>

                <expr_stmt pos:start="487:17" pos:end="491:35"><expr pos:start="487:17" pos:end="491:34"><name pos:start="487:17" pos:end="487:23">exp_ptr</name> <operator pos:start="487:25" pos:end="487:25">=</operator> <name pos:start="487:27" pos:end="487:35">exponents</name> <operator pos:start="487:37" pos:end="487:37">+</operator>

                    <name pos:start="489:21" pos:end="489:45"><name pos:start="489:21" pos:end="489:21">s</name><operator pos:start="489:22" pos:end="489:23">-&gt;</operator><name pos:start="489:24" pos:end="489:38">high_band_start</name><index pos:start="489:39" pos:end="489:45">[<expr pos:start="489:40" pos:end="489:44"><name pos:start="489:40" pos:end="489:44">bsize</name></expr>]</index></name> <operator pos:start="489:47" pos:end="489:47">-</operator>

                    <name pos:start="491:21" pos:end="491:34"><name pos:start="491:21" pos:end="491:21">s</name><operator pos:start="491:22" pos:end="491:23">-&gt;</operator><name pos:start="491:24" pos:end="491:34">coefs_start</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="493:17" pos:end="493:35"><expr pos:start="493:17" pos:end="493:34"><name pos:start="493:17" pos:end="493:30">last_high_band</name> <operator pos:start="493:32" pos:end="493:32">=</operator> <literal type="number" pos:start="493:34" pos:end="493:34">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="493:37" pos:end="493:55">/* avoid warning */</comment>

                <for pos:start="495:17" pos:end="525:17">for<control pos:start="495:20" pos:end="495:33">(<init pos:start="495:21" pos:end="495:24"><expr pos:start="495:21" pos:end="495:23"><name pos:start="495:21" pos:end="495:21">j</name><operator pos:start="495:22" pos:end="495:22">=</operator><literal type="number" pos:start="495:23" pos:end="495:23">0</literal></expr>;</init><condition pos:start="495:25" pos:end="495:29"><expr pos:start="495:25" pos:end="495:28"><name pos:start="495:25" pos:end="495:25">j</name><operator pos:start="495:26" pos:end="495:26">&lt;</operator><name pos:start="495:27" pos:end="495:28">n1</name></expr>;</condition><incr pos:start="495:30" pos:end="495:32"><expr pos:start="495:30" pos:end="495:32"><name pos:start="495:30" pos:end="495:30">j</name><operator pos:start="495:31" pos:end="495:32">++</operator></expr></incr>)</control> <block pos:start="495:35" pos:end="525:17">{<block_content pos:start="497:21" pos:end="523:33">

                    <expr_stmt pos:start="497:21" pos:end="499:68"><expr pos:start="497:21" pos:end="499:67"><name pos:start="497:21" pos:end="497:21">n</name> <operator pos:start="497:23" pos:end="497:23">=</operator> <name pos:start="497:25" pos:end="499:67"><name pos:start="497:25" pos:end="497:25">s</name><operator pos:start="497:26" pos:end="497:27">-&gt;</operator><name pos:start="497:28" pos:end="497:46">exponent_high_bands</name><index pos:start="497:47" pos:end="499:64">[<expr pos:start="497:48" pos:end="499:63"><name pos:start="497:48" pos:end="497:64"><name pos:start="497:48" pos:end="497:48">s</name><operator pos:start="497:49" pos:end="497:50">-&gt;</operator><name pos:start="497:51" pos:end="497:64">frame_len_bits</name></name> <operator pos:start="497:66" pos:end="497:66">-</operator>

                                              <name pos:start="499:47" pos:end="499:63"><name pos:start="499:47" pos:end="499:47">s</name><operator pos:start="499:48" pos:end="499:49">-&gt;</operator><name pos:start="499:50" pos:end="499:63">block_len_bits</name></name></expr>]</index><index pos:start="499:65" pos:end="499:67">[<expr pos:start="499:66" pos:end="499:66"><name pos:start="499:66" pos:end="499:66">j</name></expr>]</index></name></expr>;</expr_stmt>

                    <if_stmt pos:start="501:21" pos:end="521:21"><if pos:start="501:21" pos:end="521:21">if <condition pos:start="501:24" pos:end="501:50">(<expr pos:start="501:25" pos:end="501:49"><name pos:start="501:25" pos:end="501:49"><name pos:start="501:25" pos:end="501:25">s</name><operator pos:start="501:26" pos:end="501:27">-&gt;</operator><name pos:start="501:28" pos:end="501:42">high_band_coded</name><index pos:start="501:43" pos:end="501:46">[<expr pos:start="501:44" pos:end="501:45"><name pos:start="501:44" pos:end="501:45">ch</name></expr>]</index><index pos:start="501:47" pos:end="501:49">[<expr pos:start="501:48" pos:end="501:48"><name pos:start="501:48" pos:end="501:48">j</name></expr>]</index></name></expr>)</condition> <block pos:start="501:52" pos:end="521:21">{<block_content pos:start="503:25" pos:end="519:75">

                        <decl_stmt pos:start="503:25" pos:end="503:36"><decl pos:start="503:25" pos:end="503:32"><type pos:start="503:25" pos:end="503:29"><name pos:start="503:25" pos:end="503:29">float</name></type> <name pos:start="503:31" pos:end="503:32">e2</name></decl>, <decl pos:start="503:35" pos:end="503:35"><type ref="prev" pos:start="503:25" pos:end="503:29"/><name pos:start="503:35" pos:end="503:35">v</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="505:25" pos:end="505:31"><expr pos:start="505:25" pos:end="505:30"><name pos:start="505:25" pos:end="505:26">e2</name> <operator pos:start="505:28" pos:end="505:28">=</operator> <literal type="number" pos:start="505:30" pos:end="505:30">0</literal></expr>;</expr_stmt>

                        <for pos:start="507:25" pos:end="513:25">for<control pos:start="507:28" pos:end="507:45">(<init pos:start="507:29" pos:end="507:34"><expr pos:start="507:29" pos:end="507:33"><name pos:start="507:29" pos:end="507:29">i</name> <operator pos:start="507:31" pos:end="507:31">=</operator> <literal type="number" pos:start="507:33" pos:end="507:33">0</literal></expr>;</init><condition pos:start="507:35" pos:end="507:40"><expr pos:start="507:35" pos:end="507:39"><name pos:start="507:35" pos:end="507:35">i</name> <operator pos:start="507:37" pos:end="507:37">&lt;</operator> <name pos:start="507:39" pos:end="507:39">n</name></expr>;</condition> <incr pos:start="507:42" pos:end="507:44"><expr pos:start="507:42" pos:end="507:44"><name pos:start="507:42" pos:end="507:42">i</name><operator pos:start="507:43" pos:end="507:44">++</operator></expr></incr>)</control> <block pos:start="507:47" pos:end="513:25">{<block_content pos:start="509:29" pos:end="511:40">

                            <expr_stmt pos:start="509:29" pos:end="509:43"><expr pos:start="509:29" pos:end="509:42"><name pos:start="509:29" pos:end="509:29">v</name> <operator pos:start="509:31" pos:end="509:31">=</operator> <name pos:start="509:33" pos:end="509:42"><name pos:start="509:33" pos:end="509:39">exp_ptr</name><index pos:start="509:40" pos:end="509:42">[<expr pos:start="509:41" pos:end="509:41"><name pos:start="509:41" pos:end="509:41">i</name></expr>]</index></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="511:29" pos:end="511:40"><expr pos:start="511:29" pos:end="511:39"><name pos:start="511:29" pos:end="511:30">e2</name> <operator pos:start="511:32" pos:end="511:33">+=</operator> <name pos:start="511:35" pos:end="511:35">v</name> <operator pos:start="511:37" pos:end="511:37">*</operator> <name pos:start="511:39" pos:end="511:39">v</name></expr>;</expr_stmt>

                        </block_content>}</block></for>

                        <expr_stmt pos:start="515:25" pos:end="515:46"><expr pos:start="515:25" pos:end="515:45"><name pos:start="515:25" pos:end="515:36"><name pos:start="515:25" pos:end="515:33">exp_power</name><index pos:start="515:34" pos:end="515:36">[<expr pos:start="515:35" pos:end="515:35"><name pos:start="515:35" pos:end="515:35">j</name></expr>]</index></name> <operator pos:start="515:38" pos:end="515:38">=</operator> <name pos:start="515:40" pos:end="515:41">e2</name> <operator pos:start="515:43" pos:end="515:43">/</operator> <name pos:start="515:45" pos:end="515:45">n</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="517:25" pos:end="517:43"><expr pos:start="517:25" pos:end="517:42"><name pos:start="517:25" pos:end="517:38">last_high_band</name> <operator pos:start="517:40" pos:end="517:40">=</operator> <name pos:start="517:42" pos:end="517:42">j</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="519:25" pos:end="519:75"><expr pos:start="519:25" pos:end="519:74"><call pos:start="519:25" pos:end="519:74"><name pos:start="519:25" pos:end="519:31">tprintf</name><argument_list pos:start="519:32" pos:end="519:74">(<argument pos:start="519:33" pos:end="519:53"><expr pos:start="519:33" pos:end="519:53"><literal type="string" pos:start="519:33" pos:end="519:53">"%d: power=%f (%d)\n"</literal></expr></argument>, <argument pos:start="519:56" pos:end="519:56"><expr pos:start="519:56" pos:end="519:56"><name pos:start="519:56" pos:end="519:56">j</name></expr></argument>, <argument pos:start="519:59" pos:end="519:70"><expr pos:start="519:59" pos:end="519:70"><name pos:start="519:59" pos:end="519:70"><name pos:start="519:59" pos:end="519:67">exp_power</name><index pos:start="519:68" pos:end="519:70">[<expr pos:start="519:69" pos:end="519:69"><name pos:start="519:69" pos:end="519:69">j</name></expr>]</index></name></expr></argument>, <argument pos:start="519:73" pos:end="519:73"><expr pos:start="519:73" pos:end="519:73"><name pos:start="519:73" pos:end="519:73">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="523:21" pos:end="523:33"><expr pos:start="523:21" pos:end="523:32"><name pos:start="523:21" pos:end="523:27">exp_ptr</name> <operator pos:start="523:29" pos:end="523:30">+=</operator> <name pos:start="523:32" pos:end="523:32">n</name></expr>;</expr_stmt>

                </block_content>}</block></for>



                <comment type="block" pos:start="529:17" pos:end="529:47">/* main freqs and high freqs */</comment>

                <for pos:start="531:17" pos:end="587:17">for<control pos:start="531:20" pos:end="531:34">(<init pos:start="531:21" pos:end="531:25"><expr pos:start="531:21" pos:end="531:24"><name pos:start="531:21" pos:end="531:21">j</name><operator pos:start="531:22" pos:end="531:22">=</operator><operator pos:start="531:23" pos:end="531:23">-</operator><literal type="number" pos:start="531:24" pos:end="531:24">1</literal></expr>;</init><condition pos:start="531:26" pos:end="531:30"><expr pos:start="531:26" pos:end="531:29"><name pos:start="531:26" pos:end="531:26">j</name><operator pos:start="531:27" pos:end="531:27">&lt;</operator><name pos:start="531:28" pos:end="531:29">n1</name></expr>;</condition><incr pos:start="531:31" pos:end="531:33"><expr pos:start="531:31" pos:end="531:33"><name pos:start="531:31" pos:end="531:31">j</name><operator pos:start="531:32" pos:end="531:33">++</operator></expr></incr>)</control> <block pos:start="531:36" pos:end="587:17">{<block_content pos:start="533:21" pos:end="585:21">

                    <if_stmt pos:start="533:21" pos:end="545:21"><if pos:start="533:21" pos:end="539:21">if <condition pos:start="533:24" pos:end="533:30">(<expr pos:start="533:25" pos:end="533:29"><name pos:start="533:25" pos:end="533:25">j</name> <operator pos:start="533:27" pos:end="533:27">&lt;</operator> <literal type="number" pos:start="533:29" pos:end="533:29">0</literal></expr>)</condition> <block pos:start="533:32" pos:end="539:21">{<block_content pos:start="535:25" pos:end="537:43">

                        <expr_stmt pos:start="535:25" pos:end="537:43"><expr pos:start="535:25" pos:end="537:42"><name pos:start="535:25" pos:end="535:25">n</name> <operator pos:start="535:27" pos:end="535:27">=</operator> <name pos:start="535:29" pos:end="535:53"><name pos:start="535:29" pos:end="535:29">s</name><operator pos:start="535:30" pos:end="535:31">-&gt;</operator><name pos:start="535:32" pos:end="535:46">high_band_start</name><index pos:start="535:47" pos:end="535:53">[<expr pos:start="535:48" pos:end="535:52"><name pos:start="535:48" pos:end="535:52">bsize</name></expr>]</index></name> <operator pos:start="535:55" pos:end="535:55">-</operator>

                            <name pos:start="537:29" pos:end="537:42"><name pos:start="537:29" pos:end="537:29">s</name><operator pos:start="537:30" pos:end="537:31">-&gt;</operator><name pos:start="537:32" pos:end="537:42">coefs_start</name></name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="539:23" pos:end="545:21">else <block pos:start="539:28" pos:end="545:21">{<block_content pos:start="541:25" pos:end="543:72">

                        <expr_stmt pos:start="541:25" pos:end="543:72"><expr pos:start="541:25" pos:end="543:71"><name pos:start="541:25" pos:end="541:25">n</name> <operator pos:start="541:27" pos:end="541:27">=</operator> <name pos:start="541:29" pos:end="543:71"><name pos:start="541:29" pos:end="541:29">s</name><operator pos:start="541:30" pos:end="541:31">-&gt;</operator><name pos:start="541:32" pos:end="541:50">exponent_high_bands</name><index pos:start="541:51" pos:end="543:68">[<expr pos:start="541:52" pos:end="543:67"><name pos:start="541:52" pos:end="541:68"><name pos:start="541:52" pos:end="541:52">s</name><operator pos:start="541:53" pos:end="541:54">-&gt;</operator><name pos:start="541:55" pos:end="541:68">frame_len_bits</name></name> <operator pos:start="541:70" pos:end="541:70">-</operator>

                                                  <name pos:start="543:51" pos:end="543:67"><name pos:start="543:51" pos:end="543:51">s</name><operator pos:start="543:52" pos:end="543:53">-&gt;</operator><name pos:start="543:54" pos:end="543:67">block_len_bits</name></name></expr>]</index><index pos:start="543:69" pos:end="543:71">[<expr pos:start="543:70" pos:end="543:70"><name pos:start="543:70" pos:end="543:70">j</name></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <if_stmt pos:start="547:21" pos:end="585:21"><if pos:start="547:21" pos:end="571:21">if <condition pos:start="547:24" pos:end="547:60">(<expr pos:start="547:25" pos:end="547:59"><name pos:start="547:25" pos:end="547:25">j</name> <operator pos:start="547:27" pos:end="547:28">&gt;=</operator> <literal type="number" pos:start="547:30" pos:end="547:30">0</literal> <operator pos:start="547:32" pos:end="547:33">&amp;&amp;</operator> <name pos:start="547:35" pos:end="547:59"><name pos:start="547:35" pos:end="547:35">s</name><operator pos:start="547:36" pos:end="547:37">-&gt;</operator><name pos:start="547:38" pos:end="547:52">high_band_coded</name><index pos:start="547:53" pos:end="547:56">[<expr pos:start="547:54" pos:end="547:55"><name pos:start="547:54" pos:end="547:55">ch</name></expr>]</index><index pos:start="547:57" pos:end="547:59">[<expr pos:start="547:58" pos:end="547:58"><name pos:start="547:58" pos:end="547:58">j</name></expr>]</index></name></expr>)</condition> <block pos:start="547:62" pos:end="571:21">{<block_content pos:start="551:25" pos:end="569:25">

                        <comment type="block" pos:start="549:25" pos:end="549:60">/* use noise with specified power */</comment>

                        <expr_stmt pos:start="551:25" pos:end="551:79"><expr pos:start="551:25" pos:end="551:78"><name pos:start="551:25" pos:end="551:29">mult1</name> <operator pos:start="551:31" pos:end="551:31">=</operator> <call pos:start="551:33" pos:end="551:78"><name pos:start="551:33" pos:end="551:36">sqrt</name><argument_list pos:start="551:37" pos:end="551:78">(<argument pos:start="551:38" pos:end="551:77"><expr pos:start="551:38" pos:end="551:77"><name pos:start="551:38" pos:end="551:49"><name pos:start="551:38" pos:end="551:46">exp_power</name><index pos:start="551:47" pos:end="551:49">[<expr pos:start="551:48" pos:end="551:48"><name pos:start="551:48" pos:end="551:48">j</name></expr>]</index></name> <operator pos:start="551:51" pos:end="551:51">/</operator> <name pos:start="551:53" pos:end="551:77"><name pos:start="551:53" pos:end="551:61">exp_power</name><index pos:start="551:62" pos:end="551:77">[<expr pos:start="551:63" pos:end="551:76"><name pos:start="551:63" pos:end="551:76">last_high_band</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="block" pos:start="553:25" pos:end="553:46">/* XXX: use a table */</comment>

                        <expr_stmt pos:start="555:25" pos:end="555:83"><expr pos:start="555:25" pos:end="555:82"><name pos:start="555:25" pos:end="555:29">mult1</name> <operator pos:start="555:31" pos:end="555:31">=</operator> <name pos:start="555:33" pos:end="555:37">mult1</name> <operator pos:start="555:39" pos:end="555:39">*</operator> <call pos:start="555:41" pos:end="555:82"><name pos:start="555:41" pos:end="555:43">pow</name><argument_list pos:start="555:44" pos:end="555:82">(<argument pos:start="555:45" pos:end="555:46"><expr pos:start="555:45" pos:end="555:46"><literal type="number" pos:start="555:45" pos:end="555:46">10</literal></expr></argument>, <argument pos:start="555:49" pos:end="555:81"><expr pos:start="555:49" pos:end="555:81"><name pos:start="555:49" pos:end="555:74"><name pos:start="555:49" pos:end="555:49">s</name><operator pos:start="555:50" pos:end="555:51">-&gt;</operator><name pos:start="555:52" pos:end="555:67">high_band_values</name><index pos:start="555:68" pos:end="555:71">[<expr pos:start="555:69" pos:end="555:70"><name pos:start="555:69" pos:end="555:70">ch</name></expr>]</index><index pos:start="555:72" pos:end="555:74">[<expr pos:start="555:73" pos:end="555:73"><name pos:start="555:73" pos:end="555:73">j</name></expr>]</index></name> <operator pos:start="555:76" pos:end="555:76">*</operator> <literal type="number" pos:start="555:78" pos:end="555:81">0.05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="557:25" pos:end="557:78"><expr pos:start="557:25" pos:end="557:77"><name pos:start="557:25" pos:end="557:29">mult1</name> <operator pos:start="557:31" pos:end="557:31">=</operator> <name pos:start="557:33" pos:end="557:37">mult1</name> <operator pos:start="557:39" pos:end="557:39">/</operator> <operator pos:start="557:41" pos:end="557:41">(</operator><name pos:start="557:42" pos:end="557:60"><name pos:start="557:42" pos:end="557:42">s</name><operator pos:start="557:43" pos:end="557:44">-&gt;</operator><name pos:start="557:45" pos:end="557:56">max_exponent</name><index pos:start="557:57" pos:end="557:60">[<expr pos:start="557:58" pos:end="557:59"><name pos:start="557:58" pos:end="557:59">ch</name></expr>]</index></name> <operator pos:start="557:62" pos:end="557:62">*</operator> <name pos:start="557:64" pos:end="557:76"><name pos:start="557:64" pos:end="557:64">s</name><operator pos:start="557:65" pos:end="557:66">-&gt;</operator><name pos:start="557:67" pos:end="557:76">noise_mult</name></name><operator pos:start="557:77" pos:end="557:77">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="559:25" pos:end="559:43"><expr pos:start="559:25" pos:end="559:42"><name pos:start="559:25" pos:end="559:29">mult1</name> <operator pos:start="559:31" pos:end="559:32">*=</operator> <name pos:start="559:34" pos:end="559:42">mdct_norm</name></expr>;</expr_stmt>

                        <for pos:start="561:25" pos:end="569:25">for<control pos:start="561:28" pos:end="561:45">(<init pos:start="561:29" pos:end="561:34"><expr pos:start="561:29" pos:end="561:33"><name pos:start="561:29" pos:end="561:29">i</name> <operator pos:start="561:31" pos:end="561:31">=</operator> <literal type="number" pos:start="561:33" pos:end="561:33">0</literal></expr>;</init><condition pos:start="561:35" pos:end="561:40"><expr pos:start="561:35" pos:end="561:39"><name pos:start="561:35" pos:end="561:35">i</name> <operator pos:start="561:37" pos:end="561:37">&lt;</operator> <name pos:start="561:39" pos:end="561:39">n</name></expr>;</condition> <incr pos:start="561:42" pos:end="561:44"><expr pos:start="561:42" pos:end="561:44"><name pos:start="561:42" pos:end="561:42">i</name><operator pos:start="561:43" pos:end="561:44">++</operator></expr></incr>)</control> <block pos:start="561:47" pos:end="569:25">{<block_content pos:start="563:29" pos:end="567:70">

                            <expr_stmt pos:start="563:29" pos:end="563:67"><expr pos:start="563:29" pos:end="563:66"><name pos:start="563:29" pos:end="563:33">noise</name> <operator pos:start="563:35" pos:end="563:35">=</operator> <name pos:start="563:37" pos:end="563:66"><name pos:start="563:37" pos:end="563:37">s</name><operator pos:start="563:38" pos:end="563:39">-&gt;</operator><name pos:start="563:40" pos:end="563:50">noise_table</name><index pos:start="563:51" pos:end="563:66">[<expr pos:start="563:52" pos:end="563:65"><name pos:start="563:52" pos:end="563:65"><name pos:start="563:52" pos:end="563:52">s</name><operator pos:start="563:53" pos:end="563:54">-&gt;</operator><name pos:start="563:55" pos:end="563:65">noise_index</name></name></expr>]</index></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="565:29" pos:end="565:89"><expr pos:start="565:29" pos:end="565:88"><name pos:start="565:29" pos:end="565:42"><name pos:start="565:29" pos:end="565:29">s</name><operator pos:start="565:30" pos:end="565:31">-&gt;</operator><name pos:start="565:32" pos:end="565:42">noise_index</name></name> <operator pos:start="565:44" pos:end="565:44">=</operator> <operator pos:start="565:46" pos:end="565:46">(</operator><name pos:start="565:47" pos:end="565:60"><name pos:start="565:47" pos:end="565:47">s</name><operator pos:start="565:48" pos:end="565:49">-&gt;</operator><name pos:start="565:50" pos:end="565:60">noise_index</name></name> <operator pos:start="565:62" pos:end="565:62">+</operator> <literal type="number" pos:start="565:64" pos:end="565:64">1</literal><operator pos:start="565:65" pos:end="565:65">)</operator> <operator pos:start="565:67" pos:end="565:67">&amp;</operator> <operator pos:start="565:69" pos:end="565:69">(</operator><name pos:start="565:70" pos:end="565:83">NOISE_TAB_SIZE</name> <operator pos:start="565:85" pos:end="565:85">-</operator> <literal type="number" pos:start="565:87" pos:end="565:87">1</literal><operator pos:start="565:88" pos:end="565:88">)</operator></expr>;</expr_stmt>

                            <expr_stmt pos:start="567:29" pos:end="567:70"><expr pos:start="567:29" pos:end="567:69"><operator pos:start="567:29" pos:end="567:29">*</operator><name pos:start="567:30" pos:end="567:34">coefs</name><operator pos:start="567:35" pos:end="567:36">++</operator> <operator pos:start="567:38" pos:end="567:38">=</operator> <operator pos:start="567:40" pos:end="567:40">(</operator><operator pos:start="567:41" pos:end="567:41">*</operator><name pos:start="567:42" pos:end="567:50">exponents</name><operator pos:start="567:51" pos:end="567:52">++</operator><operator pos:start="567:53" pos:end="567:53">)</operator> <operator pos:start="567:55" pos:end="567:55">*</operator> <name pos:start="567:57" pos:end="567:61">noise</name> <operator pos:start="567:63" pos:end="567:63">*</operator> <name pos:start="567:65" pos:end="567:69">mult1</name></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if> <else pos:start="571:23" pos:end="585:21">else <block pos:start="571:28" pos:end="585:21">{<block_content pos:start="575:25" pos:end="583:25">

                        <comment type="block" pos:start="573:25" pos:end="573:56">/* coded values + small noise */</comment>

                        <for pos:start="575:25" pos:end="583:25">for<control pos:start="575:28" pos:end="575:45">(<init pos:start="575:29" pos:end="575:34"><expr pos:start="575:29" pos:end="575:33"><name pos:start="575:29" pos:end="575:29">i</name> <operator pos:start="575:31" pos:end="575:31">=</operator> <literal type="number" pos:start="575:33" pos:end="575:33">0</literal></expr>;</init><condition pos:start="575:35" pos:end="575:40"><expr pos:start="575:35" pos:end="575:39"><name pos:start="575:35" pos:end="575:35">i</name> <operator pos:start="575:37" pos:end="575:37">&lt;</operator> <name pos:start="575:39" pos:end="575:39">n</name></expr>;</condition> <incr pos:start="575:42" pos:end="575:44"><expr pos:start="575:42" pos:end="575:44"><name pos:start="575:42" pos:end="575:42">i</name><operator pos:start="575:43" pos:end="575:44">++</operator></expr></incr>)</control> <block pos:start="575:47" pos:end="583:25">{<block_content pos:start="577:29" pos:end="581:85">

                            <expr_stmt pos:start="577:29" pos:end="577:67"><expr pos:start="577:29" pos:end="577:66"><name pos:start="577:29" pos:end="577:33">noise</name> <operator pos:start="577:35" pos:end="577:35">=</operator> <name pos:start="577:37" pos:end="577:66"><name pos:start="577:37" pos:end="577:37">s</name><operator pos:start="577:38" pos:end="577:39">-&gt;</operator><name pos:start="577:40" pos:end="577:50">noise_table</name><index pos:start="577:51" pos:end="577:66">[<expr pos:start="577:52" pos:end="577:65"><name pos:start="577:52" pos:end="577:65"><name pos:start="577:52" pos:end="577:52">s</name><operator pos:start="577:53" pos:end="577:54">-&gt;</operator><name pos:start="577:55" pos:end="577:65">noise_index</name></name></expr>]</index></name></expr>;</expr_stmt>

                            <expr_stmt pos:start="579:29" pos:end="579:89"><expr pos:start="579:29" pos:end="579:88"><name pos:start="579:29" pos:end="579:42"><name pos:start="579:29" pos:end="579:29">s</name><operator pos:start="579:30" pos:end="579:31">-&gt;</operator><name pos:start="579:32" pos:end="579:42">noise_index</name></name> <operator pos:start="579:44" pos:end="579:44">=</operator> <operator pos:start="579:46" pos:end="579:46">(</operator><name pos:start="579:47" pos:end="579:60"><name pos:start="579:47" pos:end="579:47">s</name><operator pos:start="579:48" pos:end="579:49">-&gt;</operator><name pos:start="579:50" pos:end="579:60">noise_index</name></name> <operator pos:start="579:62" pos:end="579:62">+</operator> <literal type="number" pos:start="579:64" pos:end="579:64">1</literal><operator pos:start="579:65" pos:end="579:65">)</operator> <operator pos:start="579:67" pos:end="579:67">&amp;</operator> <operator pos:start="579:69" pos:end="579:69">(</operator><name pos:start="579:70" pos:end="579:83">NOISE_TAB_SIZE</name> <operator pos:start="579:85" pos:end="579:85">-</operator> <literal type="number" pos:start="579:87" pos:end="579:87">1</literal><operator pos:start="579:88" pos:end="579:88">)</operator></expr>;</expr_stmt>

                            <expr_stmt pos:start="581:29" pos:end="581:85"><expr pos:start="581:29" pos:end="581:84"><operator pos:start="581:29" pos:end="581:29">*</operator><name pos:start="581:30" pos:end="581:34">coefs</name><operator pos:start="581:35" pos:end="581:36">++</operator> <operator pos:start="581:38" pos:end="581:38">=</operator> <operator pos:start="581:40" pos:end="581:40">(</operator><operator pos:start="581:41" pos:end="581:41">(</operator><operator pos:start="581:42" pos:end="581:42">*</operator><name pos:start="581:43" pos:end="581:48">coefs1</name><operator pos:start="581:49" pos:end="581:50">++</operator><operator pos:start="581:51" pos:end="581:51">)</operator> <operator pos:start="581:53" pos:end="581:53">+</operator> <name pos:start="581:55" pos:end="581:59">noise</name><operator pos:start="581:60" pos:end="581:60">)</operator> <operator pos:start="581:62" pos:end="581:62">*</operator> <operator pos:start="581:64" pos:end="581:64">(</operator><operator pos:start="581:65" pos:end="581:65">*</operator><name pos:start="581:66" pos:end="581:74">exponents</name><operator pos:start="581:75" pos:end="581:76">++</operator><operator pos:start="581:77" pos:end="581:77">)</operator> <operator pos:start="581:79" pos:end="581:79">*</operator> <name pos:start="581:81" pos:end="581:84">mult</name></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for>



                <comment type="block" pos:start="591:17" pos:end="591:45">/* very high freqs : noise */</comment>

                <expr_stmt pos:start="593:17" pos:end="593:55"><expr pos:start="593:17" pos:end="593:54"><name pos:start="593:17" pos:end="593:17">n</name> <operator pos:start="593:19" pos:end="593:19">=</operator> <name pos:start="593:21" pos:end="593:32"><name pos:start="593:21" pos:end="593:21">s</name><operator pos:start="593:22" pos:end="593:23">-&gt;</operator><name pos:start="593:24" pos:end="593:32">block_len</name></name> <operator pos:start="593:34" pos:end="593:34">-</operator> <name pos:start="593:36" pos:end="593:54"><name pos:start="593:36" pos:end="593:36">s</name><operator pos:start="593:37" pos:end="593:38">-&gt;</operator><name pos:start="593:39" pos:end="593:47">coefs_end</name><index pos:start="593:48" pos:end="593:54">[<expr pos:start="593:49" pos:end="593:53"><name pos:start="593:49" pos:end="593:53">bsize</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="595:17" pos:end="595:45"><expr pos:start="595:17" pos:end="595:44"><name pos:start="595:17" pos:end="595:21">mult1</name> <operator pos:start="595:23" pos:end="595:23">=</operator> <name pos:start="595:25" pos:end="595:28">mult</name> <operator pos:start="595:30" pos:end="595:30">*</operator> <name pos:start="595:32" pos:end="595:44"><name pos:start="595:32" pos:end="595:40">exponents</name><index pos:start="595:41" pos:end="595:44">[<expr pos:start="595:42" pos:end="595:43"><operator pos:start="595:42" pos:end="595:42">-</operator><literal type="number" pos:start="595:43" pos:end="595:43">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="597:17" pos:end="603:17">for<control pos:start="597:20" pos:end="597:38">(<init pos:start="597:21" pos:end="597:26"><expr pos:start="597:21" pos:end="597:25"><name pos:start="597:21" pos:end="597:21">i</name> <operator pos:start="597:23" pos:end="597:23">=</operator> <literal type="number" pos:start="597:25" pos:end="597:25">0</literal></expr>;</init> <condition pos:start="597:28" pos:end="597:33"><expr pos:start="597:28" pos:end="597:32"><name pos:start="597:28" pos:end="597:28">i</name> <operator pos:start="597:30" pos:end="597:30">&lt;</operator> <name pos:start="597:32" pos:end="597:32">n</name></expr>;</condition> <incr pos:start="597:35" pos:end="597:37"><expr pos:start="597:35" pos:end="597:37"><name pos:start="597:35" pos:end="597:35">i</name><operator pos:start="597:36" pos:end="597:37">++</operator></expr></incr>)</control> <block pos:start="597:40" pos:end="603:17">{<block_content pos:start="599:21" pos:end="601:81">

                    <expr_stmt pos:start="599:21" pos:end="599:70"><expr pos:start="599:21" pos:end="599:69"><operator pos:start="599:21" pos:end="599:21">*</operator><name pos:start="599:22" pos:end="599:26">coefs</name><operator pos:start="599:27" pos:end="599:28">++</operator> <operator pos:start="599:30" pos:end="599:30">=</operator> <name pos:start="599:32" pos:end="599:61"><name pos:start="599:32" pos:end="599:32">s</name><operator pos:start="599:33" pos:end="599:34">-&gt;</operator><name pos:start="599:35" pos:end="599:45">noise_table</name><index pos:start="599:46" pos:end="599:61">[<expr pos:start="599:47" pos:end="599:60"><name pos:start="599:47" pos:end="599:60"><name pos:start="599:47" pos:end="599:47">s</name><operator pos:start="599:48" pos:end="599:49">-&gt;</operator><name pos:start="599:50" pos:end="599:60">noise_index</name></name></expr>]</index></name> <operator pos:start="599:63" pos:end="599:63">*</operator> <name pos:start="599:65" pos:end="599:69">mult1</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="601:21" pos:end="601:81"><expr pos:start="601:21" pos:end="601:80"><name pos:start="601:21" pos:end="601:34"><name pos:start="601:21" pos:end="601:21">s</name><operator pos:start="601:22" pos:end="601:23">-&gt;</operator><name pos:start="601:24" pos:end="601:34">noise_index</name></name> <operator pos:start="601:36" pos:end="601:36">=</operator> <operator pos:start="601:38" pos:end="601:38">(</operator><name pos:start="601:39" pos:end="601:52"><name pos:start="601:39" pos:end="601:39">s</name><operator pos:start="601:40" pos:end="601:41">-&gt;</operator><name pos:start="601:42" pos:end="601:52">noise_index</name></name> <operator pos:start="601:54" pos:end="601:54">+</operator> <literal type="number" pos:start="601:56" pos:end="601:56">1</literal><operator pos:start="601:57" pos:end="601:57">)</operator> <operator pos:start="601:59" pos:end="601:59">&amp;</operator> <operator pos:start="601:61" pos:end="601:61">(</operator><name pos:start="601:62" pos:end="601:75">NOISE_TAB_SIZE</name> <operator pos:start="601:77" pos:end="601:77">-</operator> <literal type="number" pos:start="601:79" pos:end="601:79">1</literal><operator pos:start="601:80" pos:end="601:80">)</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="605:15" pos:end="627:13">else <block pos:start="605:20" pos:end="627:13">{<block_content pos:start="609:17" pos:end="625:35">

                <comment type="block" pos:start="607:17" pos:end="607:40">/* XXX: optimize more */</comment>

                <for pos:start="609:17" pos:end="611:35">for<control pos:start="609:20" pos:end="609:50">(<init pos:start="609:21" pos:end="609:26"><expr pos:start="609:21" pos:end="609:25"><name pos:start="609:21" pos:end="609:21">i</name> <operator pos:start="609:23" pos:end="609:23">=</operator> <literal type="number" pos:start="609:25" pos:end="609:25">0</literal></expr>;</init><condition pos:start="609:27" pos:end="609:45"><expr pos:start="609:27" pos:end="609:44"><name pos:start="609:27" pos:end="609:27">i</name> <operator pos:start="609:29" pos:end="609:29">&lt;</operator> <name pos:start="609:31" pos:end="609:44"><name pos:start="609:31" pos:end="609:31">s</name><operator pos:start="609:32" pos:end="609:33">-&gt;</operator><name pos:start="609:34" pos:end="609:44">coefs_start</name></name></expr>;</condition> <incr pos:start="609:47" pos:end="609:49"><expr pos:start="609:47" pos:end="609:49"><name pos:start="609:47" pos:end="609:47">i</name><operator pos:start="609:48" pos:end="609:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="611:21" pos:end="611:35"><block_content pos:start="611:21" pos:end="611:35">

                    <expr_stmt pos:start="611:21" pos:end="611:35"><expr pos:start="611:21" pos:end="611:34"><operator pos:start="611:21" pos:end="611:21">*</operator><name pos:start="611:22" pos:end="611:26">coefs</name><operator pos:start="611:27" pos:end="611:28">++</operator> <operator pos:start="611:30" pos:end="611:30">=</operator> <literal type="number" pos:start="611:32" pos:end="611:34">0.0</literal></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="613:17" pos:end="613:33"><expr pos:start="613:17" pos:end="613:32"><name pos:start="613:17" pos:end="613:17">n</name> <operator pos:start="613:19" pos:end="613:19">=</operator> <name pos:start="613:21" pos:end="613:32"><name pos:start="613:21" pos:end="613:28">nb_coefs</name><index pos:start="613:29" pos:end="613:32">[<expr pos:start="613:30" pos:end="613:31"><name pos:start="613:30" pos:end="613:31">ch</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="615:17" pos:end="619:17">for<control pos:start="615:20" pos:end="615:37">(<init pos:start="615:21" pos:end="615:26"><expr pos:start="615:21" pos:end="615:25"><name pos:start="615:21" pos:end="615:21">i</name> <operator pos:start="615:23" pos:end="615:23">=</operator> <literal type="number" pos:start="615:25" pos:end="615:25">0</literal></expr>;</init><condition pos:start="615:27" pos:end="615:32"><expr pos:start="615:27" pos:end="615:31"><name pos:start="615:27" pos:end="615:27">i</name> <operator pos:start="615:29" pos:end="615:29">&lt;</operator> <name pos:start="615:31" pos:end="615:31">n</name></expr>;</condition> <incr pos:start="615:34" pos:end="615:36"><expr pos:start="615:34" pos:end="615:36"><name pos:start="615:34" pos:end="615:34">i</name><operator pos:start="615:35" pos:end="615:36">++</operator></expr></incr>)</control> <block pos:start="615:39" pos:end="619:17">{<block_content pos:start="617:21" pos:end="617:63">

                    <expr_stmt pos:start="617:21" pos:end="617:63"><expr pos:start="617:21" pos:end="617:62"><operator pos:start="617:21" pos:end="617:21">*</operator><name pos:start="617:22" pos:end="617:26">coefs</name><operator pos:start="617:27" pos:end="617:28">++</operator> <operator pos:start="617:30" pos:end="617:30">=</operator> <name pos:start="617:32" pos:end="617:40"><name pos:start="617:32" pos:end="617:37">coefs1</name><index pos:start="617:38" pos:end="617:40">[<expr pos:start="617:39" pos:end="617:39"><name pos:start="617:39" pos:end="617:39">i</name></expr>]</index></name> <operator pos:start="617:42" pos:end="617:42">*</operator> <name pos:start="617:44" pos:end="617:55"><name pos:start="617:44" pos:end="617:52">exponents</name><index pos:start="617:53" pos:end="617:55">[<expr pos:start="617:54" pos:end="617:54"><name pos:start="617:54" pos:end="617:54">i</name></expr>]</index></name> <operator pos:start="617:57" pos:end="617:57">*</operator> <name pos:start="617:59" pos:end="617:62">mult</name></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="621:17" pos:end="621:55"><expr pos:start="621:17" pos:end="621:54"><name pos:start="621:17" pos:end="621:17">n</name> <operator pos:start="621:19" pos:end="621:19">=</operator> <name pos:start="621:21" pos:end="621:32"><name pos:start="621:21" pos:end="621:21">s</name><operator pos:start="621:22" pos:end="621:23">-&gt;</operator><name pos:start="621:24" pos:end="621:32">block_len</name></name> <operator pos:start="621:34" pos:end="621:34">-</operator> <name pos:start="621:36" pos:end="621:54"><name pos:start="621:36" pos:end="621:36">s</name><operator pos:start="621:37" pos:end="621:38">-&gt;</operator><name pos:start="621:39" pos:end="621:47">coefs_end</name><index pos:start="621:48" pos:end="621:54">[<expr pos:start="621:49" pos:end="621:53"><name pos:start="621:49" pos:end="621:53">bsize</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="623:17" pos:end="625:35">for<control pos:start="623:20" pos:end="623:37">(<init pos:start="623:21" pos:end="623:26"><expr pos:start="623:21" pos:end="623:25"><name pos:start="623:21" pos:end="623:21">i</name> <operator pos:start="623:23" pos:end="623:23">=</operator> <literal type="number" pos:start="623:25" pos:end="623:25">0</literal></expr>;</init><condition pos:start="623:27" pos:end="623:32"><expr pos:start="623:27" pos:end="623:31"><name pos:start="623:27" pos:end="623:27">i</name> <operator pos:start="623:29" pos:end="623:29">&lt;</operator> <name pos:start="623:31" pos:end="623:31">n</name></expr>;</condition> <incr pos:start="623:34" pos:end="623:36"><expr pos:start="623:34" pos:end="623:36"><name pos:start="623:34" pos:end="623:34">i</name><operator pos:start="623:35" pos:end="623:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="625:21" pos:end="625:35"><block_content pos:start="625:21" pos:end="625:35">

                    <expr_stmt pos:start="625:21" pos:end="625:35"><expr pos:start="625:21" pos:end="625:34"><operator pos:start="625:21" pos:end="625:21">*</operator><name pos:start="625:22" pos:end="625:26">coefs</name><operator pos:start="625:27" pos:end="625:28">++</operator> <operator pos:start="625:30" pos:end="625:30">=</operator> <literal type="number" pos:start="625:32" pos:end="625:34">0.0</literal></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



<cpp:ifdef pos:start="635:1" pos:end="635:12">#<cpp:directive pos:start="635:2" pos:end="635:6">ifdef</cpp:directive> <name pos:start="635:8" pos:end="635:12">TRACE</name></cpp:ifdef>

    <for pos:start="637:5" pos:end="650:0">for<control pos:start="637:8" pos:end="637:42">(<init pos:start="637:9" pos:end="637:15"><expr pos:start="637:9" pos:end="637:14"><name pos:start="637:9" pos:end="637:10">ch</name> <operator pos:start="637:12" pos:end="637:12">=</operator> <literal type="number" pos:start="637:14" pos:end="637:14">0</literal></expr>;</init> <condition pos:start="637:17" pos:end="637:36"><expr pos:start="637:17" pos:end="637:35"><name pos:start="637:17" pos:end="637:18">ch</name> <operator pos:start="637:20" pos:end="637:20">&lt;</operator> <name pos:start="637:22" pos:end="637:35"><name pos:start="637:22" pos:end="637:22">s</name><operator pos:start="637:23" pos:end="637:24">-&gt;</operator><name pos:start="637:25" pos:end="637:35">nb_channels</name></name></expr>;</condition> <incr pos:start="637:38" pos:end="637:41"><expr pos:start="637:38" pos:end="637:41"><name pos:start="637:38" pos:end="637:39">ch</name><operator pos:start="637:40" pos:end="637:41">++</operator></expr></incr>)</control> <block pos:start="637:44" pos:end="650:0">{<block_content pos:start="639:9" pos:end="645:9">

        <if_stmt pos:start="639:9" pos:end="645:9"><if pos:start="639:9" pos:end="645:9">if <condition pos:start="639:12" pos:end="639:33">(<expr pos:start="639:13" pos:end="639:32"><name pos:start="639:13" pos:end="639:32"><name pos:start="639:13" pos:end="639:13">s</name><operator pos:start="639:14" pos:end="639:15">-&gt;</operator><name pos:start="639:16" pos:end="639:28">channel_coded</name><index pos:start="639:29" pos:end="639:32">[<expr pos:start="639:30" pos:end="639:31"><name pos:start="639:30" pos:end="639:31">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="639:35" pos:end="645:9">{<block_content pos:start="641:13" pos:end="643:64">

            <expr_stmt pos:start="641:13" pos:end="641:72"><expr pos:start="641:13" pos:end="641:71"><call pos:start="641:13" pos:end="641:71"><name pos:start="641:13" pos:end="641:23">dump_floats</name><argument_list pos:start="641:24" pos:end="641:71">(<argument pos:start="641:25" pos:end="641:35"><expr pos:start="641:25" pos:end="641:35"><literal type="string" pos:start="641:25" pos:end="641:35">"exponents"</literal></expr></argument>, <argument pos:start="641:38" pos:end="641:38"><expr pos:start="641:38" pos:end="641:38"><literal type="number" pos:start="641:38" pos:end="641:38">3</literal></expr></argument>, <argument pos:start="641:41" pos:end="641:56"><expr pos:start="641:41" pos:end="641:56"><name pos:start="641:41" pos:end="641:56"><name pos:start="641:41" pos:end="641:41">s</name><operator pos:start="641:42" pos:end="641:43">-&gt;</operator><name pos:start="641:44" pos:end="641:52">exponents</name><index pos:start="641:53" pos:end="641:56">[<expr pos:start="641:54" pos:end="641:55"><name pos:start="641:54" pos:end="641:55">ch</name></expr>]</index></name></expr></argument>, <argument pos:start="641:59" pos:end="641:70"><expr pos:start="641:59" pos:end="641:70"><name pos:start="641:59" pos:end="641:70"><name pos:start="641:59" pos:end="641:59">s</name><operator pos:start="641:60" pos:end="641:61">-&gt;</operator><name pos:start="641:62" pos:end="641:70">block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="643:13" pos:end="643:64"><expr pos:start="643:13" pos:end="643:63"><call pos:start="643:13" pos:end="643:63"><name pos:start="643:13" pos:end="643:23">dump_floats</name><argument_list pos:start="643:24" pos:end="643:63">(<argument pos:start="643:25" pos:end="643:31"><expr pos:start="643:25" pos:end="643:31"><literal type="string" pos:start="643:25" pos:end="643:31">"coefs"</literal></expr></argument>, <argument pos:start="643:34" pos:end="643:34"><expr pos:start="643:34" pos:end="643:34"><literal type="number" pos:start="643:34" pos:end="643:34">1</literal></expr></argument>, <argument pos:start="643:37" pos:end="643:48"><expr pos:start="643:37" pos:end="643:48"><name pos:start="643:37" pos:end="643:48"><name pos:start="643:37" pos:end="643:37">s</name><operator pos:start="643:38" pos:end="643:39">-&gt;</operator><name pos:start="643:40" pos:end="643:44">coefs</name><index pos:start="643:45" pos:end="643:48">[<expr pos:start="643:46" pos:end="643:47"><name pos:start="643:46" pos:end="643:47">ch</name></expr>]</index></name></expr></argument>, <argument pos:start="643:51" pos:end="643:62"><expr pos:start="643:51" pos:end="643:62"><name pos:start="643:51" pos:end="643:62"><name pos:start="643:51" pos:end="643:51">s</name><operator pos:start="643:52" pos:end="643:53">-&gt;</operator><name pos:start="643:54" pos:end="643:62">block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="649:1" pos:end="649:6">#<cpp:directive pos:start="649:2" pos:end="649:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="653:5" pos:end="691:5"><if pos:start="653:5" pos:end="691:5">if <condition pos:start="653:8" pos:end="653:44">(<expr pos:start="653:9" pos:end="653:43"><name pos:start="653:9" pos:end="653:20"><name pos:start="653:9" pos:end="653:9">s</name><operator pos:start="653:10" pos:end="653:11">-&gt;</operator><name pos:start="653:12" pos:end="653:20">ms_stereo</name></name> <operator pos:start="653:22" pos:end="653:23">&amp;&amp;</operator> <name pos:start="653:25" pos:end="653:43"><name pos:start="653:25" pos:end="653:25">s</name><operator pos:start="653:26" pos:end="653:27">-&gt;</operator><name pos:start="653:28" pos:end="653:40">channel_coded</name><index pos:start="653:41" pos:end="653:43">[<expr pos:start="653:42" pos:end="653:42"><literal type="number" pos:start="653:42" pos:end="653:42">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="653:46" pos:end="691:5">{<block_content pos:start="655:9" pos:end="689:9">

        <decl_stmt pos:start="655:9" pos:end="655:19"><decl pos:start="655:9" pos:end="655:15"><type pos:start="655:9" pos:end="655:13"><name pos:start="655:9" pos:end="655:13">float</name></type> <name pos:start="655:15" pos:end="655:15">a</name></decl>, <decl pos:start="655:18" pos:end="655:18"><type ref="prev" pos:start="655:9" pos:end="655:13"/><name pos:start="655:18" pos:end="655:18">b</name></decl>;</decl_stmt>

        <decl_stmt pos:start="657:9" pos:end="657:14"><decl pos:start="657:9" pos:end="657:13"><type pos:start="657:9" pos:end="657:11"><name pos:start="657:9" pos:end="657:11">int</name></type> <name pos:start="657:13" pos:end="657:13">i</name></decl>;</decl_stmt>



        <comment type="block" pos:start="661:9" pos:end="661:62">/* nominal case for ms stereo: we do it before mdct */</comment>

        <comment type="block" pos:start="663:9" pos:end="665:26">/* no need to optimize this case because it should almost

           never happen */</comment>

        <if_stmt pos:start="667:9" pos:end="675:9"><if pos:start="667:9" pos:end="675:9">if <condition pos:start="667:12" pos:end="667:33">(<expr pos:start="667:13" pos:end="667:32"><operator pos:start="667:13" pos:end="667:13">!</operator><name pos:start="667:14" pos:end="667:32"><name pos:start="667:14" pos:end="667:14">s</name><operator pos:start="667:15" pos:end="667:16">-&gt;</operator><name pos:start="667:17" pos:end="667:29">channel_coded</name><index pos:start="667:30" pos:end="667:32">[<expr pos:start="667:31" pos:end="667:31"><literal type="number" pos:start="667:31" pos:end="667:31">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="667:35" pos:end="675:9">{<block_content pos:start="669:13" pos:end="673:36">

            <expr_stmt pos:start="669:13" pos:end="669:54"><expr pos:start="669:13" pos:end="669:53"><call pos:start="669:13" pos:end="669:53"><name pos:start="669:13" pos:end="669:19">tprintf</name><argument_list pos:start="669:20" pos:end="669:53">(<argument pos:start="669:21" pos:end="669:52"><expr pos:start="669:21" pos:end="669:52"><literal type="string" pos:start="669:21" pos:end="669:52">"rare ms-stereo case happened\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="671:13" pos:end="671:65"><expr pos:start="671:13" pos:end="671:64"><call pos:start="671:13" pos:end="671:64"><name pos:start="671:13" pos:end="671:18">memset</name><argument_list pos:start="671:19" pos:end="671:64">(<argument pos:start="671:20" pos:end="671:30"><expr pos:start="671:20" pos:end="671:30"><name pos:start="671:20" pos:end="671:30"><name pos:start="671:20" pos:end="671:20">s</name><operator pos:start="671:21" pos:end="671:22">-&gt;</operator><name pos:start="671:23" pos:end="671:27">coefs</name><index pos:start="671:28" pos:end="671:30">[<expr pos:start="671:29" pos:end="671:29"><literal type="number" pos:start="671:29" pos:end="671:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="671:33" pos:end="671:33"><expr pos:start="671:33" pos:end="671:33"><literal type="number" pos:start="671:33" pos:end="671:33">0</literal></expr></argument>, <argument pos:start="671:36" pos:end="671:63"><expr pos:start="671:36" pos:end="671:63"><sizeof pos:start="671:36" pos:end="671:48">sizeof<argument_list pos:start="671:42" pos:end="671:48">(<argument pos:start="671:43" pos:end="671:47"><expr pos:start="671:43" pos:end="671:47"><name pos:start="671:43" pos:end="671:47">float</name></expr></argument>)</argument_list></sizeof> <operator pos:start="671:50" pos:end="671:50">*</operator> <name pos:start="671:52" pos:end="671:63"><name pos:start="671:52" pos:end="671:52">s</name><operator pos:start="671:53" pos:end="671:54">-&gt;</operator><name pos:start="671:55" pos:end="671:63">block_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="673:13" pos:end="673:36"><expr pos:start="673:13" pos:end="673:35"><name pos:start="673:13" pos:end="673:31"><name pos:start="673:13" pos:end="673:13">s</name><operator pos:start="673:14" pos:end="673:15">-&gt;</operator><name pos:start="673:16" pos:end="673:28">channel_coded</name><index pos:start="673:29" pos:end="673:31">[<expr pos:start="673:30" pos:end="673:30"><literal type="number" pos:start="673:30" pos:end="673:30">0</literal></expr>]</index></name> <operator pos:start="673:33" pos:end="673:33">=</operator> <literal type="number" pos:start="673:35" pos:end="673:35">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="679:9" pos:end="689:9">for<control pos:start="679:12" pos:end="679:41">(<init pos:start="679:13" pos:end="679:18"><expr pos:start="679:13" pos:end="679:17"><name pos:start="679:13" pos:end="679:13">i</name> <operator pos:start="679:15" pos:end="679:15">=</operator> <literal type="number" pos:start="679:17" pos:end="679:17">0</literal></expr>;</init> <condition pos:start="679:20" pos:end="679:36"><expr pos:start="679:20" pos:end="679:35"><name pos:start="679:20" pos:end="679:20">i</name> <operator pos:start="679:22" pos:end="679:22">&lt;</operator> <name pos:start="679:24" pos:end="679:35"><name pos:start="679:24" pos:end="679:24">s</name><operator pos:start="679:25" pos:end="679:26">-&gt;</operator><name pos:start="679:27" pos:end="679:35">block_len</name></name></expr>;</condition> <incr pos:start="679:38" pos:end="679:40"><expr pos:start="679:38" pos:end="679:40"><name pos:start="679:38" pos:end="679:38">i</name><operator pos:start="679:39" pos:end="679:40">++</operator></expr></incr>)</control> <block pos:start="679:43" pos:end="689:9">{<block_content pos:start="681:13" pos:end="687:35">

            <expr_stmt pos:start="681:13" pos:end="681:31"><expr pos:start="681:13" pos:end="681:30"><name pos:start="681:13" pos:end="681:13">a</name> <operator pos:start="681:15" pos:end="681:15">=</operator> <name pos:start="681:17" pos:end="681:30"><name pos:start="681:17" pos:end="681:17">s</name><operator pos:start="681:18" pos:end="681:19">-&gt;</operator><name pos:start="681:20" pos:end="681:24">coefs</name><index pos:start="681:25" pos:end="681:27">[<expr pos:start="681:26" pos:end="681:26"><literal type="number" pos:start="681:26" pos:end="681:26">0</literal></expr>]</index><index pos:start="681:28" pos:end="681:30">[<expr pos:start="681:29" pos:end="681:29"><name pos:start="681:29" pos:end="681:29">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="683:13" pos:end="683:31"><expr pos:start="683:13" pos:end="683:30"><name pos:start="683:13" pos:end="683:13">b</name> <operator pos:start="683:15" pos:end="683:15">=</operator> <name pos:start="683:17" pos:end="683:30"><name pos:start="683:17" pos:end="683:17">s</name><operator pos:start="683:18" pos:end="683:19">-&gt;</operator><name pos:start="683:20" pos:end="683:24">coefs</name><index pos:start="683:25" pos:end="683:27">[<expr pos:start="683:26" pos:end="683:26"><literal type="number" pos:start="683:26" pos:end="683:26">1</literal></expr>]</index><index pos:start="683:28" pos:end="683:30">[<expr pos:start="683:29" pos:end="683:29"><name pos:start="683:29" pos:end="683:29">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="685:13" pos:end="685:35"><expr pos:start="685:13" pos:end="685:34"><name pos:start="685:13" pos:end="685:26"><name pos:start="685:13" pos:end="685:13">s</name><operator pos:start="685:14" pos:end="685:15">-&gt;</operator><name pos:start="685:16" pos:end="685:20">coefs</name><index pos:start="685:21" pos:end="685:23">[<expr pos:start="685:22" pos:end="685:22"><literal type="number" pos:start="685:22" pos:end="685:22">0</literal></expr>]</index><index pos:start="685:24" pos:end="685:26">[<expr pos:start="685:25" pos:end="685:25"><name pos:start="685:25" pos:end="685:25">i</name></expr>]</index></name> <operator pos:start="685:28" pos:end="685:28">=</operator> <name pos:start="685:30" pos:end="685:30">a</name> <operator pos:start="685:32" pos:end="685:32">+</operator> <name pos:start="685:34" pos:end="685:34">b</name></expr>;</expr_stmt>

            <expr_stmt pos:start="687:13" pos:end="687:35"><expr pos:start="687:13" pos:end="687:34"><name pos:start="687:13" pos:end="687:26"><name pos:start="687:13" pos:end="687:13">s</name><operator pos:start="687:14" pos:end="687:15">-&gt;</operator><name pos:start="687:16" pos:end="687:20">coefs</name><index pos:start="687:21" pos:end="687:23">[<expr pos:start="687:22" pos:end="687:22"><literal type="number" pos:start="687:22" pos:end="687:22">1</literal></expr>]</index><index pos:start="687:24" pos:end="687:26">[<expr pos:start="687:25" pos:end="687:25"><name pos:start="687:25" pos:end="687:25">i</name></expr>]</index></name> <operator pos:start="687:28" pos:end="687:28">=</operator> <name pos:start="687:30" pos:end="687:30">a</name> <operator pos:start="687:32" pos:end="687:32">-</operator> <name pos:start="687:34" pos:end="687:34">b</name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="695:5" pos:end="697:66">/* build the window : we ensure that when the windows overlap

       their squared sum is always 1 (MDCT reconstruction rule) */</comment>

    <comment type="block" pos:start="699:5" pos:end="699:32">/* XXX: merge with output */</comment>

    <block pos:start="701:5" pos:end="779:5">{<block_content pos:start="703:9" pos:end="777:9">

        <decl_stmt pos:start="703:9" pos:end="703:60"><decl pos:start="703:9" pos:end="703:13"><type pos:start="703:9" pos:end="703:11"><name pos:start="703:9" pos:end="703:11">int</name></type> <name pos:start="703:13" pos:end="703:13">i</name></decl>, <decl pos:start="703:16" pos:end="703:29"><type ref="prev" pos:start="703:9" pos:end="703:11"/><name pos:start="703:16" pos:end="703:29">next_block_len</name></decl>, <decl pos:start="703:32" pos:end="703:40"><type ref="prev" pos:start="703:9" pos:end="703:11"/><name pos:start="703:32" pos:end="703:40">block_len</name></decl>, <decl pos:start="703:43" pos:end="703:56"><type ref="prev" pos:start="703:9" pos:end="703:11"/><name pos:start="703:43" pos:end="703:56">prev_block_len</name></decl>, <decl pos:start="703:59" pos:end="703:59"><type ref="prev" pos:start="703:9" pos:end="703:11"/><name pos:start="703:59" pos:end="703:59">n</name></decl>;</decl_stmt>

        <decl_stmt pos:start="705:9" pos:end="705:20"><decl pos:start="705:9" pos:end="705:19"><type pos:start="705:9" pos:end="705:15"><name pos:start="705:9" pos:end="705:13">float</name> <modifier pos:start="705:15" pos:end="705:15">*</modifier></type><name pos:start="705:16" pos:end="705:19">wptr</name></decl>;</decl_stmt>



        <expr_stmt pos:start="709:9" pos:end="709:33"><expr pos:start="709:9" pos:end="709:32"><name pos:start="709:9" pos:end="709:17">block_len</name> <operator pos:start="709:19" pos:end="709:19">=</operator> <name pos:start="709:21" pos:end="709:32"><name pos:start="709:21" pos:end="709:21">s</name><operator pos:start="709:22" pos:end="709:23">-&gt;</operator><name pos:start="709:24" pos:end="709:32">block_len</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="711:9" pos:end="711:53"><expr pos:start="711:9" pos:end="711:52"><name pos:start="711:9" pos:end="711:22">prev_block_len</name> <operator pos:start="711:24" pos:end="711:24">=</operator> <literal type="number" pos:start="711:26" pos:end="711:26">1</literal> <operator pos:start="711:28" pos:end="711:29">&lt;&lt;</operator> <name pos:start="711:31" pos:end="711:52"><name pos:start="711:31" pos:end="711:31">s</name><operator pos:start="711:32" pos:end="711:33">-&gt;</operator><name pos:start="711:34" pos:end="711:52">prev_block_len_bits</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="713:9" pos:end="713:53"><expr pos:start="713:9" pos:end="713:52"><name pos:start="713:9" pos:end="713:22">next_block_len</name> <operator pos:start="713:24" pos:end="713:24">=</operator> <literal type="number" pos:start="713:26" pos:end="713:26">1</literal> <operator pos:start="713:28" pos:end="713:29">&lt;&lt;</operator> <name pos:start="713:31" pos:end="713:52"><name pos:start="713:31" pos:end="713:31">s</name><operator pos:start="713:32" pos:end="713:33">-&gt;</operator><name pos:start="713:34" pos:end="713:52">next_block_len_bits</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="717:9" pos:end="717:24">/* right part */</comment>

        <expr_stmt pos:start="719:9" pos:end="719:34"><expr pos:start="719:9" pos:end="719:33"><name pos:start="719:9" pos:end="719:12">wptr</name> <operator pos:start="719:14" pos:end="719:14">=</operator> <name pos:start="719:16" pos:end="719:21">window</name> <operator pos:start="719:23" pos:end="719:23">+</operator> <name pos:start="719:25" pos:end="719:33">block_len</name></expr>;</expr_stmt>

        <if_stmt pos:start="721:9" pos:end="745:9"><if pos:start="721:9" pos:end="727:9">if <condition pos:start="721:12" pos:end="721:40">(<expr pos:start="721:13" pos:end="721:39"><name pos:start="721:13" pos:end="721:21">block_len</name> <operator pos:start="721:23" pos:end="721:24">&lt;=</operator> <name pos:start="721:26" pos:end="721:39">next_block_len</name></expr>)</condition> <block pos:start="721:42" pos:end="727:9">{<block_content pos:start="723:13" pos:end="725:47">

            <for pos:start="723:13" pos:end="725:47">for<control pos:start="723:16" pos:end="723:36">(<init pos:start="723:17" pos:end="723:20"><expr pos:start="723:17" pos:end="723:19"><name pos:start="723:17" pos:end="723:17">i</name><operator pos:start="723:18" pos:end="723:18">=</operator><literal type="number" pos:start="723:19" pos:end="723:19">0</literal></expr>;</init><condition pos:start="723:21" pos:end="723:32"><expr pos:start="723:21" pos:end="723:31"><name pos:start="723:21" pos:end="723:21">i</name><operator pos:start="723:22" pos:end="723:22">&lt;</operator><name pos:start="723:23" pos:end="723:31">block_len</name></expr>;</condition><incr pos:start="723:33" pos:end="723:35"><expr pos:start="723:33" pos:end="723:35"><name pos:start="723:33" pos:end="723:33">i</name><operator pos:start="723:34" pos:end="723:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="725:17" pos:end="725:47"><block_content pos:start="725:17" pos:end="725:47">

                <expr_stmt pos:start="725:17" pos:end="725:47"><expr pos:start="725:17" pos:end="725:46"><operator pos:start="725:17" pos:end="725:17">*</operator><name pos:start="725:18" pos:end="725:21">wptr</name><operator pos:start="725:22" pos:end="725:23">++</operator> <operator pos:start="725:25" pos:end="725:25">=</operator> <name pos:start="725:27" pos:end="725:46"><name pos:start="725:27" pos:end="725:27">s</name><operator pos:start="725:28" pos:end="725:29">-&gt;</operator><name pos:start="725:30" pos:end="725:36">windows</name><index pos:start="725:37" pos:end="725:43">[<expr pos:start="725:38" pos:end="725:42"><name pos:start="725:38" pos:end="725:42">bsize</name></expr>]</index><index pos:start="725:44" pos:end="725:46">[<expr pos:start="725:45" pos:end="725:45"><name pos:start="725:45" pos:end="725:45">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if> <else pos:start="727:11" pos:end="745:9">else <block pos:start="727:16" pos:end="745:9">{<block_content pos:start="731:13" pos:end="743:30">

            <comment type="block" pos:start="729:13" pos:end="729:25">/* overlap */</comment>

            <expr_stmt pos:start="731:13" pos:end="731:55"><expr pos:start="731:13" pos:end="731:54"><name pos:start="731:13" pos:end="731:13">n</name> <operator pos:start="731:15" pos:end="731:15">=</operator> <operator pos:start="731:17" pos:end="731:17">(</operator><name pos:start="731:18" pos:end="731:26">block_len</name> <operator pos:start="731:28" pos:end="731:28">/</operator> <literal type="number" pos:start="731:30" pos:end="731:30">2</literal><operator pos:start="731:31" pos:end="731:31">)</operator> <operator pos:start="731:33" pos:end="731:33">-</operator> <operator pos:start="731:35" pos:end="731:35">(</operator><name pos:start="731:36" pos:end="731:49">next_block_len</name> <operator pos:start="731:51" pos:end="731:51">/</operator> <literal type="number" pos:start="731:53" pos:end="731:53">2</literal><operator pos:start="731:54" pos:end="731:54">)</operator></expr>;</expr_stmt>

            <for pos:start="733:13" pos:end="735:30">for<control pos:start="733:16" pos:end="733:28">(<init pos:start="733:17" pos:end="733:20"><expr pos:start="733:17" pos:end="733:19"><name pos:start="733:17" pos:end="733:17">i</name><operator pos:start="733:18" pos:end="733:18">=</operator><literal type="number" pos:start="733:19" pos:end="733:19">0</literal></expr>;</init><condition pos:start="733:21" pos:end="733:24"><expr pos:start="733:21" pos:end="733:23"><name pos:start="733:21" pos:end="733:21">i</name><operator pos:start="733:22" pos:end="733:22">&lt;</operator><name pos:start="733:23" pos:end="733:23">n</name></expr>;</condition><incr pos:start="733:25" pos:end="733:27"><expr pos:start="733:25" pos:end="733:27"><name pos:start="733:25" pos:end="733:25">i</name><operator pos:start="733:26" pos:end="733:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="735:17" pos:end="735:30"><block_content pos:start="735:17" pos:end="735:30">

                <expr_stmt pos:start="735:17" pos:end="735:30"><expr pos:start="735:17" pos:end="735:29"><operator pos:start="735:17" pos:end="735:17">*</operator><name pos:start="735:18" pos:end="735:21">wptr</name><operator pos:start="735:22" pos:end="735:23">++</operator> <operator pos:start="735:25" pos:end="735:25">=</operator> <literal type="number" pos:start="735:27" pos:end="735:29">1.0</literal></expr>;</expr_stmt></block_content></block></for>

            <for pos:start="737:13" pos:end="739:84">for<control pos:start="737:16" pos:end="737:41">(<init pos:start="737:17" pos:end="737:20"><expr pos:start="737:17" pos:end="737:19"><name pos:start="737:17" pos:end="737:17">i</name><operator pos:start="737:18" pos:end="737:18">=</operator><literal type="number" pos:start="737:19" pos:end="737:19">0</literal></expr>;</init><condition pos:start="737:21" pos:end="737:37"><expr pos:start="737:21" pos:end="737:36"><name pos:start="737:21" pos:end="737:21">i</name><operator pos:start="737:22" pos:end="737:22">&lt;</operator><name pos:start="737:23" pos:end="737:36">next_block_len</name></expr>;</condition><incr pos:start="737:38" pos:end="737:40"><expr pos:start="737:38" pos:end="737:40"><name pos:start="737:38" pos:end="737:38">i</name><operator pos:start="737:39" pos:end="737:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="739:17" pos:end="739:84"><block_content pos:start="739:17" pos:end="739:84">

                <expr_stmt pos:start="739:17" pos:end="739:84"><expr pos:start="739:17" pos:end="739:83"><operator pos:start="739:17" pos:end="739:17">*</operator><name pos:start="739:18" pos:end="739:21">wptr</name><operator pos:start="739:22" pos:end="739:23">++</operator> <operator pos:start="739:25" pos:end="739:25">=</operator> <name pos:start="739:27" pos:end="739:83"><name pos:start="739:27" pos:end="739:27">s</name><operator pos:start="739:28" pos:end="739:29">-&gt;</operator><name pos:start="739:30" pos:end="739:36">windows</name><index pos:start="739:37" pos:end="739:80">[<expr pos:start="739:38" pos:end="739:79"><name pos:start="739:38" pos:end="739:54"><name pos:start="739:38" pos:end="739:38">s</name><operator pos:start="739:39" pos:end="739:40">-&gt;</operator><name pos:start="739:41" pos:end="739:54">frame_len_bits</name></name> <operator pos:start="739:56" pos:end="739:56">-</operator> <name pos:start="739:58" pos:end="739:79"><name pos:start="739:58" pos:end="739:58">s</name><operator pos:start="739:59" pos:end="739:60">-&gt;</operator><name pos:start="739:61" pos:end="739:79">next_block_len_bits</name></name></expr>]</index><index pos:start="739:81" pos:end="739:83">[<expr pos:start="739:82" pos:end="739:82"><name pos:start="739:82" pos:end="739:82">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <for pos:start="741:13" pos:end="743:30">for<control pos:start="741:16" pos:end="741:28">(<init pos:start="741:17" pos:end="741:20"><expr pos:start="741:17" pos:end="741:19"><name pos:start="741:17" pos:end="741:17">i</name><operator pos:start="741:18" pos:end="741:18">=</operator><literal type="number" pos:start="741:19" pos:end="741:19">0</literal></expr>;</init><condition pos:start="741:21" pos:end="741:24"><expr pos:start="741:21" pos:end="741:23"><name pos:start="741:21" pos:end="741:21">i</name><operator pos:start="741:22" pos:end="741:22">&lt;</operator><name pos:start="741:23" pos:end="741:23">n</name></expr>;</condition><incr pos:start="741:25" pos:end="741:27"><expr pos:start="741:25" pos:end="741:27"><name pos:start="741:25" pos:end="741:25">i</name><operator pos:start="741:26" pos:end="741:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="743:17" pos:end="743:30"><block_content pos:start="743:17" pos:end="743:30">

                <expr_stmt pos:start="743:17" pos:end="743:30"><expr pos:start="743:17" pos:end="743:29"><operator pos:start="743:17" pos:end="743:17">*</operator><name pos:start="743:18" pos:end="743:21">wptr</name><operator pos:start="743:22" pos:end="743:23">++</operator> <operator pos:start="743:25" pos:end="743:25">=</operator> <literal type="number" pos:start="743:27" pos:end="743:29">0.0</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="749:9" pos:end="749:23">/* left part */</comment>

        <expr_stmt pos:start="751:9" pos:end="751:34"><expr pos:start="751:9" pos:end="751:33"><name pos:start="751:9" pos:end="751:12">wptr</name> <operator pos:start="751:14" pos:end="751:14">=</operator> <name pos:start="751:16" pos:end="751:21">window</name> <operator pos:start="751:23" pos:end="751:23">+</operator> <name pos:start="751:25" pos:end="751:33">block_len</name></expr>;</expr_stmt>

        <if_stmt pos:start="753:9" pos:end="777:9"><if pos:start="753:9" pos:end="759:9">if <condition pos:start="753:12" pos:end="753:40">(<expr pos:start="753:13" pos:end="753:39"><name pos:start="753:13" pos:end="753:21">block_len</name> <operator pos:start="753:23" pos:end="753:24">&lt;=</operator> <name pos:start="753:26" pos:end="753:39">prev_block_len</name></expr>)</condition> <block pos:start="753:42" pos:end="759:9">{<block_content pos:start="755:13" pos:end="757:47">

            <for pos:start="755:13" pos:end="757:47">for<control pos:start="755:16" pos:end="755:36">(<init pos:start="755:17" pos:end="755:20"><expr pos:start="755:17" pos:end="755:19"><name pos:start="755:17" pos:end="755:17">i</name><operator pos:start="755:18" pos:end="755:18">=</operator><literal type="number" pos:start="755:19" pos:end="755:19">0</literal></expr>;</init><condition pos:start="755:21" pos:end="755:32"><expr pos:start="755:21" pos:end="755:31"><name pos:start="755:21" pos:end="755:21">i</name><operator pos:start="755:22" pos:end="755:22">&lt;</operator><name pos:start="755:23" pos:end="755:31">block_len</name></expr>;</condition><incr pos:start="755:33" pos:end="755:35"><expr pos:start="755:33" pos:end="755:35"><name pos:start="755:33" pos:end="755:33">i</name><operator pos:start="755:34" pos:end="755:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="757:17" pos:end="757:47"><block_content pos:start="757:17" pos:end="757:47">

                <expr_stmt pos:start="757:17" pos:end="757:47"><expr pos:start="757:17" pos:end="757:46"><operator pos:start="757:17" pos:end="757:17">*</operator><operator pos:start="757:18" pos:end="757:19">--</operator><name pos:start="757:20" pos:end="757:23">wptr</name> <operator pos:start="757:25" pos:end="757:25">=</operator> <name pos:start="757:27" pos:end="757:46"><name pos:start="757:27" pos:end="757:27">s</name><operator pos:start="757:28" pos:end="757:29">-&gt;</operator><name pos:start="757:30" pos:end="757:36">windows</name><index pos:start="757:37" pos:end="757:43">[<expr pos:start="757:38" pos:end="757:42"><name pos:start="757:38" pos:end="757:42">bsize</name></expr>]</index><index pos:start="757:44" pos:end="757:46">[<expr pos:start="757:45" pos:end="757:45"><name pos:start="757:45" pos:end="757:45">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if> <else pos:start="759:11" pos:end="777:9">else <block pos:start="759:16" pos:end="777:9">{<block_content pos:start="763:13" pos:end="775:30">

            <comment type="block" pos:start="761:13" pos:end="761:25">/* overlap */</comment>

            <expr_stmt pos:start="763:13" pos:end="763:55"><expr pos:start="763:13" pos:end="763:54"><name pos:start="763:13" pos:end="763:13">n</name> <operator pos:start="763:15" pos:end="763:15">=</operator> <operator pos:start="763:17" pos:end="763:17">(</operator><name pos:start="763:18" pos:end="763:26">block_len</name> <operator pos:start="763:28" pos:end="763:28">/</operator> <literal type="number" pos:start="763:30" pos:end="763:30">2</literal><operator pos:start="763:31" pos:end="763:31">)</operator> <operator pos:start="763:33" pos:end="763:33">-</operator> <operator pos:start="763:35" pos:end="763:35">(</operator><name pos:start="763:36" pos:end="763:49">prev_block_len</name> <operator pos:start="763:51" pos:end="763:51">/</operator> <literal type="number" pos:start="763:53" pos:end="763:53">2</literal><operator pos:start="763:54" pos:end="763:54">)</operator></expr>;</expr_stmt>

            <for pos:start="765:13" pos:end="767:30">for<control pos:start="765:16" pos:end="765:28">(<init pos:start="765:17" pos:end="765:20"><expr pos:start="765:17" pos:end="765:19"><name pos:start="765:17" pos:end="765:17">i</name><operator pos:start="765:18" pos:end="765:18">=</operator><literal type="number" pos:start="765:19" pos:end="765:19">0</literal></expr>;</init><condition pos:start="765:21" pos:end="765:24"><expr pos:start="765:21" pos:end="765:23"><name pos:start="765:21" pos:end="765:21">i</name><operator pos:start="765:22" pos:end="765:22">&lt;</operator><name pos:start="765:23" pos:end="765:23">n</name></expr>;</condition><incr pos:start="765:25" pos:end="765:27"><expr pos:start="765:25" pos:end="765:27"><name pos:start="765:25" pos:end="765:25">i</name><operator pos:start="765:26" pos:end="765:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="767:17" pos:end="767:30"><block_content pos:start="767:17" pos:end="767:30">

                <expr_stmt pos:start="767:17" pos:end="767:30"><expr pos:start="767:17" pos:end="767:29"><operator pos:start="767:17" pos:end="767:17">*</operator><operator pos:start="767:18" pos:end="767:19">--</operator><name pos:start="767:20" pos:end="767:23">wptr</name> <operator pos:start="767:25" pos:end="767:25">=</operator> <literal type="number" pos:start="767:27" pos:end="767:29">1.0</literal></expr>;</expr_stmt></block_content></block></for>

            <for pos:start="769:13" pos:end="771:84">for<control pos:start="769:16" pos:end="769:41">(<init pos:start="769:17" pos:end="769:20"><expr pos:start="769:17" pos:end="769:19"><name pos:start="769:17" pos:end="769:17">i</name><operator pos:start="769:18" pos:end="769:18">=</operator><literal type="number" pos:start="769:19" pos:end="769:19">0</literal></expr>;</init><condition pos:start="769:21" pos:end="769:37"><expr pos:start="769:21" pos:end="769:36"><name pos:start="769:21" pos:end="769:21">i</name><operator pos:start="769:22" pos:end="769:22">&lt;</operator><name pos:start="769:23" pos:end="769:36">prev_block_len</name></expr>;</condition><incr pos:start="769:38" pos:end="769:40"><expr pos:start="769:38" pos:end="769:40"><name pos:start="769:38" pos:end="769:38">i</name><operator pos:start="769:39" pos:end="769:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="771:17" pos:end="771:84"><block_content pos:start="771:17" pos:end="771:84">

                <expr_stmt pos:start="771:17" pos:end="771:84"><expr pos:start="771:17" pos:end="771:83"><operator pos:start="771:17" pos:end="771:17">*</operator><operator pos:start="771:18" pos:end="771:19">--</operator><name pos:start="771:20" pos:end="771:23">wptr</name> <operator pos:start="771:25" pos:end="771:25">=</operator> <name pos:start="771:27" pos:end="771:83"><name pos:start="771:27" pos:end="771:27">s</name><operator pos:start="771:28" pos:end="771:29">-&gt;</operator><name pos:start="771:30" pos:end="771:36">windows</name><index pos:start="771:37" pos:end="771:80">[<expr pos:start="771:38" pos:end="771:79"><name pos:start="771:38" pos:end="771:54"><name pos:start="771:38" pos:end="771:38">s</name><operator pos:start="771:39" pos:end="771:40">-&gt;</operator><name pos:start="771:41" pos:end="771:54">frame_len_bits</name></name> <operator pos:start="771:56" pos:end="771:56">-</operator> <name pos:start="771:58" pos:end="771:79"><name pos:start="771:58" pos:end="771:58">s</name><operator pos:start="771:59" pos:end="771:60">-&gt;</operator><name pos:start="771:61" pos:end="771:79">prev_block_len_bits</name></name></expr>]</index><index pos:start="771:81" pos:end="771:83">[<expr pos:start="771:82" pos:end="771:82"><name pos:start="771:82" pos:end="771:82">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <for pos:start="773:13" pos:end="775:30">for<control pos:start="773:16" pos:end="773:28">(<init pos:start="773:17" pos:end="773:20"><expr pos:start="773:17" pos:end="773:19"><name pos:start="773:17" pos:end="773:17">i</name><operator pos:start="773:18" pos:end="773:18">=</operator><literal type="number" pos:start="773:19" pos:end="773:19">0</literal></expr>;</init><condition pos:start="773:21" pos:end="773:24"><expr pos:start="773:21" pos:end="773:23"><name pos:start="773:21" pos:end="773:21">i</name><operator pos:start="773:22" pos:end="773:22">&lt;</operator><name pos:start="773:23" pos:end="773:23">n</name></expr>;</condition><incr pos:start="773:25" pos:end="773:27"><expr pos:start="773:25" pos:end="773:27"><name pos:start="773:25" pos:end="773:25">i</name><operator pos:start="773:26" pos:end="773:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="775:17" pos:end="775:30"><block_content pos:start="775:17" pos:end="775:30">

                <expr_stmt pos:start="775:17" pos:end="775:30"><expr pos:start="775:17" pos:end="775:29"><operator pos:start="775:17" pos:end="775:17">*</operator><operator pos:start="775:18" pos:end="775:19">--</operator><name pos:start="775:20" pos:end="775:23">wptr</name> <operator pos:start="775:25" pos:end="775:25">=</operator> <literal type="number" pos:start="775:27" pos:end="775:29">0.0</literal></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block>





    <for pos:start="785:5" pos:end="837:5">for<control pos:start="785:8" pos:end="785:42">(<init pos:start="785:9" pos:end="785:15"><expr pos:start="785:9" pos:end="785:14"><name pos:start="785:9" pos:end="785:10">ch</name> <operator pos:start="785:12" pos:end="785:12">=</operator> <literal type="number" pos:start="785:14" pos:end="785:14">0</literal></expr>;</init> <condition pos:start="785:17" pos:end="785:36"><expr pos:start="785:17" pos:end="785:35"><name pos:start="785:17" pos:end="785:18">ch</name> <operator pos:start="785:20" pos:end="785:20">&lt;</operator> <name pos:start="785:22" pos:end="785:35"><name pos:start="785:22" pos:end="785:22">s</name><operator pos:start="785:23" pos:end="785:24">-&gt;</operator><name pos:start="785:25" pos:end="785:35">nb_channels</name></name></expr>;</condition> <incr pos:start="785:38" pos:end="785:41"><expr pos:start="785:38" pos:end="785:41"><name pos:start="785:38" pos:end="785:39">ch</name><operator pos:start="785:40" pos:end="785:41">++</operator></expr></incr>)</control> <block pos:start="785:44" pos:end="837:5">{<block_content pos:start="787:9" pos:end="835:9">

        <if_stmt pos:start="787:9" pos:end="835:9"><if pos:start="787:9" pos:end="835:9">if <condition pos:start="787:12" pos:end="787:33">(<expr pos:start="787:13" pos:end="787:32"><name pos:start="787:13" pos:end="787:32"><name pos:start="787:13" pos:end="787:13">s</name><operator pos:start="787:14" pos:end="787:15">-&gt;</operator><name pos:start="787:16" pos:end="787:28">channel_coded</name><index pos:start="787:29" pos:end="787:32">[<expr pos:start="787:30" pos:end="787:31"><name pos:start="787:30" pos:end="787:31">ch</name></expr>]</index></name></expr>)</condition> <block pos:start="787:35" pos:end="835:9">{<block_content pos:start="789:13" pos:end="833:13">

            <expr_stmt pos:start="789:13" pos:end="789:70"><expr pos:start="789:13" pos:end="789:69"><call pos:start="789:13" pos:end="789:69"><name pos:start="789:13" pos:end="789:30">DECLARE_ALIGNED_16</name><argument_list pos:start="789:31" pos:end="789:69">(<argument pos:start="789:32" pos:end="789:40"><expr pos:start="789:32" pos:end="789:40"><name pos:start="789:32" pos:end="789:40">FFTSample</name></expr></argument>, <argument pos:start="789:43" pos:end="789:68"><expr pos:start="789:43" pos:end="789:68"><name pos:start="789:43" pos:end="789:68"><name pos:start="789:43" pos:end="789:48">output</name><index pos:start="789:49" pos:end="789:68">[<expr pos:start="789:50" pos:end="789:67"><name pos:start="789:50" pos:end="789:63">BLOCK_MAX_SIZE</name> <operator pos:start="789:65" pos:end="789:65">*</operator> <literal type="number" pos:start="789:67" pos:end="789:67">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt pos:start="791:13" pos:end="791:23"><decl pos:start="791:13" pos:end="791:22"><type pos:start="791:13" pos:end="791:19"><name pos:start="791:13" pos:end="791:17">float</name> <modifier pos:start="791:19" pos:end="791:19">*</modifier></type><name pos:start="791:20" pos:end="791:22">ptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="793:13" pos:end="793:29"><decl pos:start="793:13" pos:end="793:18"><type pos:start="793:13" pos:end="793:15"><name pos:start="793:13" pos:end="793:15">int</name></type> <name pos:start="793:17" pos:end="793:18">n4</name></decl>, <decl pos:start="793:21" pos:end="793:25"><type ref="prev" pos:start="793:13" pos:end="793:15"/><name pos:start="793:21" pos:end="793:25">index</name></decl>, <decl pos:start="793:28" pos:end="793:28"><type ref="prev" pos:start="793:13" pos:end="793:15"/><name pos:start="793:28" pos:end="793:28">n</name></decl>;</decl_stmt>



            <expr_stmt pos:start="797:13" pos:end="797:29"><expr pos:start="797:13" pos:end="797:28"><name pos:start="797:13" pos:end="797:13">n</name> <operator pos:start="797:15" pos:end="797:15">=</operator> <name pos:start="797:17" pos:end="797:28"><name pos:start="797:17" pos:end="797:17">s</name><operator pos:start="797:18" pos:end="797:19">-&gt;</operator><name pos:start="797:20" pos:end="797:28">block_len</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="799:13" pos:end="799:34"><expr pos:start="799:13" pos:end="799:33"><name pos:start="799:13" pos:end="799:14">n4</name> <operator pos:start="799:16" pos:end="799:16">=</operator> <name pos:start="799:18" pos:end="799:29"><name pos:start="799:18" pos:end="799:18">s</name><operator pos:start="799:19" pos:end="799:20">-&gt;</operator><name pos:start="799:21" pos:end="799:29">block_len</name></name> <operator pos:start="799:31" pos:end="799:31">/</operator> <literal type="number" pos:start="799:33" pos:end="799:33">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="801:13" pos:end="803:61"><expr pos:start="801:13" pos:end="803:60"><name pos:start="801:13" pos:end="801:30"><name pos:start="801:13" pos:end="801:13">s</name><operator pos:start="801:14" pos:end="801:15">-&gt;</operator><name pos:start="801:16" pos:end="801:23">mdct_ctx</name><index pos:start="801:24" pos:end="801:30">[<expr pos:start="801:25" pos:end="801:29"><name pos:start="801:25" pos:end="801:29">bsize</name></expr>]</index></name><operator pos:start="801:31" pos:end="801:31">.</operator><call pos:start="801:32" pos:end="803:60"><name pos:start="801:32" pos:end="801:45"><name pos:start="801:32" pos:end="801:34">fft</name><operator pos:start="801:35" pos:end="801:35">.</operator><name pos:start="801:36" pos:end="801:45">imdct_calc</name></name><argument_list pos:start="801:46" pos:end="803:60">(<argument pos:start="801:47" pos:end="801:65"><expr pos:start="801:47" pos:end="801:65"><operator pos:start="801:47" pos:end="801:47">&amp;</operator><name pos:start="801:48" pos:end="801:65"><name pos:start="801:48" pos:end="801:48">s</name><operator pos:start="801:49" pos:end="801:50">-&gt;</operator><name pos:start="801:51" pos:end="801:58">mdct_ctx</name><index pos:start="801:59" pos:end="801:65">[<expr pos:start="801:60" pos:end="801:64"><name pos:start="801:60" pos:end="801:64">bsize</name></expr>]</index></name></expr></argument>,

                          <argument pos:start="803:27" pos:end="803:32"><expr pos:start="803:27" pos:end="803:32"><name pos:start="803:27" pos:end="803:32">output</name></expr></argument>, <argument pos:start="803:35" pos:end="803:46"><expr pos:start="803:35" pos:end="803:46"><name pos:start="803:35" pos:end="803:46"><name pos:start="803:35" pos:end="803:35">s</name><operator pos:start="803:36" pos:end="803:37">-&gt;</operator><name pos:start="803:38" pos:end="803:42">coefs</name><index pos:start="803:43" pos:end="803:46">[<expr pos:start="803:44" pos:end="803:45"><name pos:start="803:44" pos:end="803:45">ch</name></expr>]</index></name></expr></argument>, <argument pos:start="803:49" pos:end="803:59"><expr pos:start="803:49" pos:end="803:59"><name pos:start="803:49" pos:end="803:59"><name pos:start="803:49" pos:end="803:49">s</name><operator pos:start="803:50" pos:end="803:51">-&gt;</operator><name pos:start="803:52" pos:end="803:59">mdct_tmp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="807:13" pos:end="809:52">/* XXX: optimize all that by build the window and

               multipying/adding at the same time */</comment>



            <comment type="block" pos:start="813:13" pos:end="813:61">/* multiply by the window and add in the frame */</comment>

            <expr_stmt pos:start="815:13" pos:end="815:59"><expr pos:start="815:13" pos:end="815:58"><name pos:start="815:13" pos:end="815:17">index</name> <operator pos:start="815:19" pos:end="815:19">=</operator> <operator pos:start="815:21" pos:end="815:21">(</operator><name pos:start="815:22" pos:end="815:33"><name pos:start="815:22" pos:end="815:22">s</name><operator pos:start="815:23" pos:end="815:24">-&gt;</operator><name pos:start="815:25" pos:end="815:33">frame_len</name></name> <operator pos:start="815:35" pos:end="815:35">/</operator> <literal type="number" pos:start="815:37" pos:end="815:37">2</literal><operator pos:start="815:38" pos:end="815:38">)</operator> <operator pos:start="815:40" pos:end="815:40">+</operator> <name pos:start="815:42" pos:end="815:53"><name pos:start="815:42" pos:end="815:42">s</name><operator pos:start="815:43" pos:end="815:44">-&gt;</operator><name pos:start="815:45" pos:end="815:53">block_pos</name></name> <operator pos:start="815:55" pos:end="815:55">-</operator> <name pos:start="815:57" pos:end="815:58">n4</name></expr>;</expr_stmt>

            <expr_stmt pos:start="817:13" pos:end="817:43"><expr pos:start="817:13" pos:end="817:42"><name pos:start="817:13" pos:end="817:15">ptr</name> <operator pos:start="817:17" pos:end="817:17">=</operator> <operator pos:start="817:19" pos:end="817:19">&amp;</operator><name pos:start="817:20" pos:end="817:42"><name pos:start="817:20" pos:end="817:20">s</name><operator pos:start="817:21" pos:end="817:22">-&gt;</operator><name pos:start="817:23" pos:end="817:31">frame_out</name><index pos:start="817:32" pos:end="817:35">[<expr pos:start="817:33" pos:end="817:34"><name pos:start="817:33" pos:end="817:34">ch</name></expr>]</index><index pos:start="817:36" pos:end="817:42">[<expr pos:start="817:37" pos:end="817:41"><name pos:start="817:37" pos:end="817:41">index</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="819:13" pos:end="819:70"><expr pos:start="819:13" pos:end="819:69"><call pos:start="819:13" pos:end="819:69"><name pos:start="819:13" pos:end="819:38"><name pos:start="819:13" pos:end="819:13">s</name><operator pos:start="819:14" pos:end="819:15">-&gt;</operator><name pos:start="819:16" pos:end="819:18">dsp</name><operator pos:start="819:19" pos:end="819:19">.</operator><name pos:start="819:20" pos:end="819:38">vector_fmul_add_add</name></name><argument_list pos:start="819:39" pos:end="819:69">(<argument pos:start="819:40" pos:end="819:42"><expr pos:start="819:40" pos:end="819:42"><name pos:start="819:40" pos:end="819:42">ptr</name></expr></argument>,<argument pos:start="819:44" pos:end="819:49"><expr pos:start="819:44" pos:end="819:49"><name pos:start="819:44" pos:end="819:49">window</name></expr></argument>,<argument pos:start="819:51" pos:end="819:56"><expr pos:start="819:51" pos:end="819:56"><name pos:start="819:51" pos:end="819:56">output</name></expr></argument>,<argument pos:start="819:58" pos:end="819:60"><expr pos:start="819:58" pos:end="819:60"><name pos:start="819:58" pos:end="819:60">ptr</name></expr></argument>,<argument pos:start="819:62" pos:end="819:62"><expr pos:start="819:62" pos:end="819:62"><literal type="number" pos:start="819:62" pos:end="819:62">0</literal></expr></argument>,<argument pos:start="819:64" pos:end="819:66"><expr pos:start="819:64" pos:end="819:66"><literal type="number" pos:start="819:64" pos:end="819:64">2</literal><operator pos:start="819:65" pos:end="819:65">*</operator><name pos:start="819:66" pos:end="819:66">n</name></expr></argument>,<argument pos:start="819:68" pos:end="819:68"><expr pos:start="819:68" pos:end="819:68"><literal type="number" pos:start="819:68" pos:end="819:68">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="823:13" pos:end="825:44">/* specific fast case for ms-stereo : add to second

               channel if it is not coded */</comment>

            <if_stmt pos:start="827:13" pos:end="833:13"><if pos:start="827:13" pos:end="833:13">if <condition pos:start="827:16" pos:end="827:53">(<expr pos:start="827:17" pos:end="827:52"><name pos:start="827:17" pos:end="827:28"><name pos:start="827:17" pos:end="827:17">s</name><operator pos:start="827:18" pos:end="827:19">-&gt;</operator><name pos:start="827:20" pos:end="827:28">ms_stereo</name></name> <operator pos:start="827:30" pos:end="827:31">&amp;&amp;</operator> <operator pos:start="827:33" pos:end="827:33">!</operator><name pos:start="827:34" pos:end="827:52"><name pos:start="827:34" pos:end="827:34">s</name><operator pos:start="827:35" pos:end="827:36">-&gt;</operator><name pos:start="827:37" pos:end="827:49">channel_coded</name><index pos:start="827:50" pos:end="827:52">[<expr pos:start="827:51" pos:end="827:51"><literal type="number" pos:start="827:51" pos:end="827:51">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="827:55" pos:end="833:13">{<block_content pos:start="829:17" pos:end="831:74">

                <expr_stmt pos:start="829:17" pos:end="829:46"><expr pos:start="829:17" pos:end="829:45"><name pos:start="829:17" pos:end="829:19">ptr</name> <operator pos:start="829:21" pos:end="829:21">=</operator> <operator pos:start="829:23" pos:end="829:23">&amp;</operator><name pos:start="829:24" pos:end="829:45"><name pos:start="829:24" pos:end="829:24">s</name><operator pos:start="829:25" pos:end="829:26">-&gt;</operator><name pos:start="829:27" pos:end="829:35">frame_out</name><index pos:start="829:36" pos:end="829:38">[<expr pos:start="829:37" pos:end="829:37"><literal type="number" pos:start="829:37" pos:end="829:37">1</literal></expr>]</index><index pos:start="829:39" pos:end="829:45">[<expr pos:start="829:40" pos:end="829:44"><name pos:start="829:40" pos:end="829:44">index</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="831:17" pos:end="831:74"><expr pos:start="831:17" pos:end="831:73"><call pos:start="831:17" pos:end="831:73"><name pos:start="831:17" pos:end="831:42"><name pos:start="831:17" pos:end="831:17">s</name><operator pos:start="831:18" pos:end="831:19">-&gt;</operator><name pos:start="831:20" pos:end="831:22">dsp</name><operator pos:start="831:23" pos:end="831:23">.</operator><name pos:start="831:24" pos:end="831:42">vector_fmul_add_add</name></name><argument_list pos:start="831:43" pos:end="831:73">(<argument pos:start="831:44" pos:end="831:46"><expr pos:start="831:44" pos:end="831:46"><name pos:start="831:44" pos:end="831:46">ptr</name></expr></argument>,<argument pos:start="831:48" pos:end="831:53"><expr pos:start="831:48" pos:end="831:53"><name pos:start="831:48" pos:end="831:53">window</name></expr></argument>,<argument pos:start="831:55" pos:end="831:60"><expr pos:start="831:55" pos:end="831:60"><name pos:start="831:55" pos:end="831:60">output</name></expr></argument>,<argument pos:start="831:62" pos:end="831:64"><expr pos:start="831:62" pos:end="831:64"><name pos:start="831:62" pos:end="831:64">ptr</name></expr></argument>,<argument pos:start="831:66" pos:end="831:66"><expr pos:start="831:66" pos:end="831:66"><literal type="number" pos:start="831:66" pos:end="831:66">0</literal></expr></argument>,<argument pos:start="831:68" pos:end="831:70"><expr pos:start="831:68" pos:end="831:70"><literal type="number" pos:start="831:68" pos:end="831:68">2</literal><operator pos:start="831:69" pos:end="831:69">*</operator><name pos:start="831:70" pos:end="831:70">n</name></expr></argument>,<argument pos:start="831:72" pos:end="831:72"><expr pos:start="831:72" pos:end="831:72"><literal type="number" pos:start="831:72" pos:end="831:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

 <label pos:start="839:2" pos:end="839:6"><name pos:start="839:2" pos:end="839:5">next</name>:</label>

    <comment type="block" pos:start="841:5" pos:end="841:29">/* update block number */</comment>

    <expr_stmt pos:start="843:5" pos:end="843:19"><expr pos:start="843:5" pos:end="843:18"><name pos:start="843:5" pos:end="843:16"><name pos:start="843:5" pos:end="843:5">s</name><operator pos:start="843:6" pos:end="843:7">-&gt;</operator><name pos:start="843:8" pos:end="843:16">block_num</name></name><operator pos:start="843:17" pos:end="843:18">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="845:5" pos:end="845:33"><expr pos:start="845:5" pos:end="845:32"><name pos:start="845:5" pos:end="845:16"><name pos:start="845:5" pos:end="845:5">s</name><operator pos:start="845:6" pos:end="845:7">-&gt;</operator><name pos:start="845:8" pos:end="845:16">block_pos</name></name> <operator pos:start="845:18" pos:end="845:19">+=</operator> <name pos:start="845:21" pos:end="845:32"><name pos:start="845:21" pos:end="845:21">s</name><operator pos:start="845:22" pos:end="845:23">-&gt;</operator><name pos:start="845:24" pos:end="845:32">block_len</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="847:5" pos:end="853:17"><if pos:start="847:5" pos:end="849:17">if <condition pos:start="847:8" pos:end="847:37">(<expr pos:start="847:9" pos:end="847:36"><name pos:start="847:9" pos:end="847:20"><name pos:start="847:9" pos:end="847:9">s</name><operator pos:start="847:10" pos:end="847:11">-&gt;</operator><name pos:start="847:12" pos:end="847:20">block_pos</name></name> <operator pos:start="847:22" pos:end="847:23">&gt;=</operator> <name pos:start="847:25" pos:end="847:36"><name pos:start="847:25" pos:end="847:25">s</name><operator pos:start="847:26" pos:end="847:27">-&gt;</operator><name pos:start="847:28" pos:end="847:36">frame_len</name></name></expr>)</condition><block type="pseudo" pos:start="849:9" pos:end="849:17"><block_content pos:start="849:9" pos:end="849:17">

        <return pos:start="849:9" pos:end="849:17">return <expr pos:start="849:16" pos:end="849:16"><literal type="number" pos:start="849:16" pos:end="849:16">1</literal></expr>;</return></block_content></block></if>

    <else pos:start="851:5" pos:end="853:17">else<block type="pseudo" pos:start="853:9" pos:end="853:17"><block_content pos:start="853:9" pos:end="853:17">

        <return pos:start="853:9" pos:end="853:17">return <expr pos:start="853:16" pos:end="853:16"><literal type="number" pos:start="853:16" pos:end="853:16">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
