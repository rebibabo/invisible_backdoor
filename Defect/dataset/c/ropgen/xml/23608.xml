<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23608.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:17">int</name></type> <name pos:start="1:19" pos:end="1:32">check_physical</name><parameter_list pos:start="1:33" pos:end="3:60">(<parameter pos:start="1:34" pos:end="1:49"><decl pos:start="1:34" pos:end="1:49"><type pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:44">CPUPPCState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">env</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:65"><decl pos:start="1:52" pos:end="1:65"><type pos:start="1:52" pos:end="1:65"><name pos:start="1:52" pos:end="1:60">mmu_ctx_t</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">ctx</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:51"><decl pos:start="3:34" pos:end="3:51"><type pos:start="3:34" pos:end="3:51"><name pos:start="3:34" pos:end="3:45">target_ulong</name></type> <name pos:start="3:47" pos:end="3:51">eaddr</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:59"><decl pos:start="3:54" pos:end="3:59"><type pos:start="3:54" pos:end="3:59"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:59">rw</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="129:1">{<block_content pos:start="7:5" pos:end="127:15">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">in_plb</name></decl>, <decl pos:start="7:17" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:19">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:23"><expr pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:7">ctx</name><operator pos:start="11:8" pos:end="11:9">-&gt;</operator><name pos:start="11:10" pos:end="11:14">raddr</name></name> <operator pos:start="11:16" pos:end="11:16">=</operator> <name pos:start="11:18" pos:end="11:22">eaddr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:38"><expr pos:start="13:5" pos:end="13:37"><name pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:7">ctx</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:13">prot</name></name> <operator pos:start="13:15" pos:end="13:15">=</operator> <name pos:start="13:17" pos:end="13:25">PAGE_READ</name> <operator pos:start="13:27" pos:end="13:27">|</operator> <name pos:start="13:29" pos:end="13:37">PAGE_EXEC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:12"><expr pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:7">ret</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <literal type="number" pos:start="15:11" pos:end="15:11">0</literal></expr>;</expr_stmt>

    <switch pos:start="17:5" pos:end="123:5">switch <condition pos:start="17:12" pos:end="17:27">(<expr pos:start="17:13" pos:end="17:26"><name pos:start="17:13" pos:end="17:26"><name pos:start="17:13" pos:end="17:15">env</name><operator pos:start="17:16" pos:end="17:17">-&gt;</operator><name pos:start="17:18" pos:end="17:26">mmu_model</name></name></expr>)</condition> <block pos:start="17:29" pos:end="123:5">{<block_content pos:start="19:5" pos:end="121:18">

    <case pos:start="19:5" pos:end="19:25">case <expr pos:start="19:10" pos:end="19:24"><name pos:start="19:10" pos:end="19:24">POWERPC_MMU_32B</name></expr>:</case>

    <case pos:start="21:5" pos:end="21:25">case <expr pos:start="21:10" pos:end="21:24"><name pos:start="21:10" pos:end="21:24">POWERPC_MMU_601</name></expr>:</case>

    <case pos:start="23:5" pos:end="23:30">case <expr pos:start="23:10" pos:end="23:29"><name pos:start="23:10" pos:end="23:29">POWERPC_MMU_SOFT_6xx</name></expr>:</case>

    <case pos:start="25:5" pos:end="25:31">case <expr pos:start="25:10" pos:end="25:30"><name pos:start="25:10" pos:end="25:30">POWERPC_MMU_SOFT_74xx</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:30">case <expr pos:start="27:10" pos:end="27:29"><name pos:start="27:10" pos:end="27:29">POWERPC_MMU_SOFT_4xx</name></expr>:</case>

    <case pos:start="29:5" pos:end="29:26">case <expr pos:start="29:10" pos:end="29:25"><name pos:start="29:10" pos:end="29:25">POWERPC_MMU_REAL</name></expr>:</case>

    <case pos:start="31:5" pos:end="31:27">case <expr pos:start="31:10" pos:end="31:26"><name pos:start="31:10" pos:end="31:26">POWERPC_MMU_BOOKE</name></expr>:</case>

        <expr_stmt pos:start="33:9" pos:end="33:32"><expr pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:17"><name pos:start="33:9" pos:end="33:11">ctx</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:17">prot</name></name> <operator pos:start="33:19" pos:end="33:20">|=</operator> <name pos:start="33:22" pos:end="33:31">PAGE_WRITE</name></expr>;</expr_stmt>

        <break pos:start="35:9" pos:end="38:0">break;</break>

<cpp:if pos:start="37:1" pos:end="37:25">#<cpp:directive pos:start="37:2" pos:end="37:3">if</cpp:directive> <expr pos:start="37:5" pos:end="37:25"><call pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:11">defined</name><argument_list pos:start="37:12" pos:end="37:25">(<argument pos:start="37:13" pos:end="37:24"><expr pos:start="37:13" pos:end="37:24"><name pos:start="37:13" pos:end="37:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="39:5" pos:end="39:25">case <expr pos:start="39:10" pos:end="39:24"><name pos:start="39:10" pos:end="39:24">POWERPC_MMU_64B</name></expr>:</case>

    <case pos:start="41:5" pos:end="41:26">case <expr pos:start="41:10" pos:end="41:25"><name pos:start="41:10" pos:end="41:25">POWERPC_MMU_2_06</name></expr>:</case>

    <case pos:start="43:5" pos:end="43:27">case <expr pos:start="43:10" pos:end="43:26"><name pos:start="43:10" pos:end="43:26">POWERPC_MMU_2_06d</name></expr>:</case>

        <comment type="block" pos:start="45:9" pos:end="45:43">/* Real address are 60 bits long */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:44"><expr pos:start="47:9" pos:end="47:43"><name pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:11">ctx</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:18">raddr</name></name> <operator pos:start="47:20" pos:end="47:21">&amp;=</operator> <literal type="number" pos:start="47:23" pos:end="47:43">0x0FFFFFFFFFFFFFFFULL</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:32"><expr pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:11">ctx</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:17">prot</name></name> <operator pos:start="49:19" pos:end="49:20">|=</operator> <name pos:start="49:22" pos:end="49:31">PAGE_WRITE</name></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="54:0">break;</break>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

    <case pos:start="55:5" pos:end="55:32">case <expr pos:start="55:10" pos:end="55:31"><name pos:start="55:10" pos:end="55:31">POWERPC_MMU_SOFT_4xx_Z</name></expr>:</case>

        <if_stmt pos:start="57:9" pos:end="99:9"><if pos:start="57:9" pos:end="99:9">if <condition pos:start="57:12" pos:end="57:34">(<expr pos:start="57:13" pos:end="57:33"><call pos:start="57:13" pos:end="57:33"><name pos:start="57:13" pos:end="57:20">unlikely</name><argument_list pos:start="57:21" pos:end="57:33">(<argument pos:start="57:22" pos:end="57:32"><expr pos:start="57:22" pos:end="57:32"><name pos:start="57:22" pos:end="57:27">msr_pe</name> <operator pos:start="57:29" pos:end="57:30">!=</operator> <literal type="number" pos:start="57:32" pos:end="57:32">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:36" pos:end="99:9">{<block_content pos:start="65:13" pos:end="97:13">

            <comment type="block" pos:start="59:13" pos:end="63:15">/* 403 family add some particular protections,

             * using PBL/PBU registers for accesses with no translation.

             */</comment>

            <expr_stmt pos:start="65:13" pos:end="77:68"><expr pos:start="65:13" pos:end="77:67"><name pos:start="65:13" pos:end="65:18">in_plb</name> <operator pos:start="65:20" pos:end="65:20">=</operator>

                <comment type="block" pos:start="67:17" pos:end="67:40">/* Check PLB validity */</comment>

                <ternary pos:start="69:17" pos:end="77:67"><condition pos:start="69:17" pos:end="77:61"><expr pos:start="69:17" pos:end="77:59"><operator pos:start="69:17" pos:end="69:17">(</operator><name pos:start="69:18" pos:end="69:27"><name pos:start="69:18" pos:end="69:20">env</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:24">pb</name><index pos:start="69:25" pos:end="69:27">[<expr pos:start="69:26" pos:end="69:26"><literal type="number" pos:start="69:26" pos:end="69:26">0</literal></expr>]</index></name> <operator pos:start="69:29" pos:end="69:29">&lt;</operator> <name pos:start="69:31" pos:end="69:40"><name pos:start="69:31" pos:end="69:33">env</name><operator pos:start="69:34" pos:end="69:35">-&gt;</operator><name pos:start="69:36" pos:end="69:37">pb</name><index pos:start="69:38" pos:end="69:40">[<expr pos:start="69:39" pos:end="69:39"><literal type="number" pos:start="69:39" pos:end="69:39">1</literal></expr>]</index></name> <operator pos:start="69:42" pos:end="69:43">&amp;&amp;</operator>

                 <comment type="block" pos:start="71:18" pos:end="71:46">/* and address in plb area */</comment>

                 <name pos:start="73:18" pos:end="73:22">eaddr</name> <operator pos:start="73:24" pos:end="73:25">&gt;=</operator> <name pos:start="73:27" pos:end="73:36"><name pos:start="73:27" pos:end="73:29">env</name><operator pos:start="73:30" pos:end="73:31">-&gt;</operator><name pos:start="73:32" pos:end="73:33">pb</name><index pos:start="73:34" pos:end="73:36">[<expr pos:start="73:35" pos:end="73:35"><literal type="number" pos:start="73:35" pos:end="73:35">0</literal></expr>]</index></name> <operator pos:start="73:38" pos:end="73:39">&amp;&amp;</operator> <name pos:start="73:41" pos:end="73:45">eaddr</name> <operator pos:start="73:47" pos:end="73:47">&lt;</operator> <name pos:start="73:49" pos:end="73:58"><name pos:start="73:49" pos:end="73:51">env</name><operator pos:start="73:52" pos:end="73:53">-&gt;</operator><name pos:start="73:54" pos:end="73:55">pb</name><index pos:start="73:56" pos:end="73:58">[<expr pos:start="73:57" pos:end="73:57"><literal type="number" pos:start="73:57" pos:end="73:57">1</literal></expr>]</index></name><operator pos:start="73:59" pos:end="73:59">)</operator> <operator pos:start="73:61" pos:end="73:62">||</operator>

                <operator pos:start="75:17" pos:end="75:17">(</operator><name pos:start="75:18" pos:end="75:27"><name pos:start="75:18" pos:end="75:20">env</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:24">pb</name><index pos:start="75:25" pos:end="75:27">[<expr pos:start="75:26" pos:end="75:26"><literal type="number" pos:start="75:26" pos:end="75:26">2</literal></expr>]</index></name> <operator pos:start="75:29" pos:end="75:29">&lt;</operator> <name pos:start="75:31" pos:end="75:40"><name pos:start="75:31" pos:end="75:33">env</name><operator pos:start="75:34" pos:end="75:35">-&gt;</operator><name pos:start="75:36" pos:end="75:37">pb</name><index pos:start="75:38" pos:end="75:40">[<expr pos:start="75:39" pos:end="75:39"><literal type="number" pos:start="75:39" pos:end="75:39">3</literal></expr>]</index></name> <operator pos:start="75:42" pos:end="75:43">&amp;&amp;</operator>

                 <name pos:start="77:18" pos:end="77:22">eaddr</name> <operator pos:start="77:24" pos:end="77:25">&gt;=</operator> <name pos:start="77:27" pos:end="77:36"><name pos:start="77:27" pos:end="77:29">env</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:33">pb</name><index pos:start="77:34" pos:end="77:36">[<expr pos:start="77:35" pos:end="77:35"><literal type="number" pos:start="77:35" pos:end="77:35">2</literal></expr>]</index></name> <operator pos:start="77:38" pos:end="77:39">&amp;&amp;</operator> <name pos:start="77:41" pos:end="77:45">eaddr</name> <operator pos:start="77:47" pos:end="77:47">&lt;</operator> <name pos:start="77:49" pos:end="77:58"><name pos:start="77:49" pos:end="77:51">env</name><operator pos:start="77:52" pos:end="77:53">-&gt;</operator><name pos:start="77:54" pos:end="77:55">pb</name><index pos:start="77:56" pos:end="77:58">[<expr pos:start="77:57" pos:end="77:57"><literal type="number" pos:start="77:57" pos:end="77:57">3</literal></expr>]</index></name><operator pos:start="77:59" pos:end="77:59">)</operator></expr> ?</condition><then pos:start="77:63" pos:end="77:63"> <expr pos:start="77:63" pos:end="77:63"><literal type="number" pos:start="77:63" pos:end="77:63">1</literal></expr> </then><else pos:start="77:65" pos:end="77:67">: <expr pos:start="77:67" pos:end="77:67"><literal type="number" pos:start="77:67" pos:end="77:67">0</literal></expr></else></ternary></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="97:13"><if pos:start="79:13" pos:end="91:13">if <condition pos:start="79:16" pos:end="79:32">(<expr pos:start="79:17" pos:end="79:31"><name pos:start="79:17" pos:end="79:22">in_plb</name> <operator pos:start="79:24" pos:end="79:24">^</operator> <name pos:start="79:26" pos:end="79:31">msr_px</name></expr>)</condition> <block pos:start="79:34" pos:end="91:13">{<block_content pos:start="83:17" pos:end="89:17">

                <comment type="block" pos:start="81:17" pos:end="81:46">/* Access in protected area */</comment>

                <if_stmt pos:start="83:17" pos:end="89:17"><if pos:start="83:17" pos:end="89:17">if <condition pos:start="83:20" pos:end="83:28">(<expr pos:start="83:21" pos:end="83:27"><name pos:start="83:21" pos:end="83:22">rw</name> <operator pos:start="83:24" pos:end="83:25">==</operator> <literal type="number" pos:start="83:27" pos:end="83:27">1</literal></expr>)</condition> <block pos:start="83:30" pos:end="89:17">{<block_content pos:start="87:21" pos:end="87:29">

                    <comment type="block" pos:start="85:21" pos:end="85:47">/* Access is not allowed */</comment>

                    <expr_stmt pos:start="87:21" pos:end="87:29"><expr pos:start="87:21" pos:end="87:28"><name pos:start="87:21" pos:end="87:23">ret</name> <operator pos:start="87:25" pos:end="87:25">=</operator> <operator pos:start="87:27" pos:end="87:27">-</operator><literal type="number" pos:start="87:28" pos:end="87:28">2</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="91:15" pos:end="97:13">else <block pos:start="91:20" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:40">

                <comment type="block" pos:start="93:17" pos:end="93:50">/* Read-write access is allowed */</comment>

                <expr_stmt pos:start="95:17" pos:end="95:40"><expr pos:start="95:17" pos:end="95:39"><name pos:start="95:17" pos:end="95:25"><name pos:start="95:17" pos:end="95:19">ctx</name><operator pos:start="95:20" pos:end="95:21">-&gt;</operator><name pos:start="95:22" pos:end="95:25">prot</name></name> <operator pos:start="95:27" pos:end="95:28">|=</operator> <name pos:start="95:30" pos:end="95:39">PAGE_WRITE</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:28">case <expr pos:start="103:10" pos:end="103:27"><name pos:start="103:10" pos:end="103:27">POWERPC_MMU_MPC8xx</name></expr>:</case>

        <comment type="block" pos:start="105:9" pos:end="105:23">/* XXX: TODO */</comment>

        <expr_stmt pos:start="107:9" pos:end="107:64"><expr pos:start="107:9" pos:end="107:63"><call pos:start="107:9" pos:end="107:63"><name pos:start="107:9" pos:end="107:17">cpu_abort</name><argument_list pos:start="107:18" pos:end="107:63">(<argument pos:start="107:19" pos:end="107:21"><expr pos:start="107:19" pos:end="107:21"><name pos:start="107:19" pos:end="107:21">env</name></expr></argument>, <argument pos:start="107:24" pos:end="107:62"><expr pos:start="107:24" pos:end="107:62"><literal type="string" pos:start="107:24" pos:end="107:62">"MPC8xx MMU model is not implemented\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    <case pos:start="111:5" pos:end="111:30">case <expr pos:start="111:10" pos:end="111:29"><name pos:start="111:10" pos:end="111:29">POWERPC_MMU_BOOKE206</name></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:75"><expr pos:start="113:9" pos:end="113:74"><call pos:start="113:9" pos:end="113:74"><name pos:start="113:9" pos:end="113:17">cpu_abort</name><argument_list pos:start="113:18" pos:end="113:74">(<argument pos:start="113:19" pos:end="113:21"><expr pos:start="113:19" pos:end="113:21"><name pos:start="113:19" pos:end="113:21">env</name></expr></argument>, <argument pos:start="113:24" pos:end="113:73"><expr pos:start="113:24" pos:end="113:73"><literal type="string" pos:start="113:24" pos:end="113:73">"BookE 2.06 MMU doesn't have physical real mode\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <default pos:start="117:5" pos:end="117:12">default:</default>

        <expr_stmt pos:start="119:9" pos:end="119:57"><expr pos:start="119:9" pos:end="119:56"><call pos:start="119:9" pos:end="119:56"><name pos:start="119:9" pos:end="119:17">cpu_abort</name><argument_list pos:start="119:18" pos:end="119:56">(<argument pos:start="119:19" pos:end="119:21"><expr pos:start="119:19" pos:end="119:21"><name pos:start="119:19" pos:end="119:21">env</name></expr></argument>, <argument pos:start="119:24" pos:end="119:55"><expr pos:start="119:24" pos:end="119:55"><literal type="string" pos:start="119:24" pos:end="119:55">"Unknown or invalid MMU model\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="121:9" pos:end="121:18">return <expr pos:start="121:16" pos:end="121:17"><operator pos:start="121:16" pos:end="121:16">-</operator><literal type="number" pos:start="121:17" pos:end="121:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <return pos:start="127:5" pos:end="127:15">return <expr pos:start="127:12" pos:end="127:14"><name pos:start="127:12" pos:end="127:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
