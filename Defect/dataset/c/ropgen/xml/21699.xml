<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21699.c" pos:tabs="8"><function pos:start="1:1" pos:end="196:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">pcx_encode_frame</name><parameter_list pos:start="1:28" pos:end="3:73">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:36">unsigned</name> <name pos:start="3:38" pos:end="3:41">char</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:46">buf</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:60"><decl pos:start="3:49" pos:end="3:60"><type pos:start="3:49" pos:end="3:60"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:60">buf_size</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:72"><decl pos:start="3:63" pos:end="3:72"><type pos:start="3:63" pos:end="3:72"><name pos:start="3:63" pos:end="3:66">void</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:72">data</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="196:1">{<block_content pos:start="7:5" pos:end="194:27">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">PCXContext</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:36">= <expr pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:25">avctx</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:11">AVFrame</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier><specifier pos:start="9:14" pos:end="9:18">const</specifier></type> <name pos:start="9:20" pos:end="9:23">pict</name> <init pos:start="9:25" pos:end="9:37">= <expr pos:start="9:27" pos:end="9:37"><operator pos:start="9:27" pos:end="9:27">&amp;</operator><name pos:start="9:28" pos:end="9:37"><name pos:start="9:28" pos:end="9:28">s</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:37">picture</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:28">buf_start</name> <init pos:start="11:30" pos:end="11:34">= <expr pos:start="11:32" pos:end="11:34"><name pos:start="11:32" pos:end="11:34">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:45"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">buf_end</name>   <init pos:start="13:30" pos:end="13:45">= <expr pos:start="13:32" pos:end="13:45"><name pos:start="13:32" pos:end="13:34">buf</name> <operator pos:start="13:36" pos:end="13:36">+</operator> <name pos:start="13:38" pos:end="13:45">buf_size</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:48"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">bpp</name></decl>, <decl pos:start="17:14" pos:end="17:20"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:14" pos:end="17:20">nplanes</name></decl>, <decl pos:start="17:23" pos:end="17:23"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:23" pos:end="17:23">i</name></decl>, <decl pos:start="17:26" pos:end="17:26"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:26" pos:end="17:26">y</name></decl>, <decl pos:start="17:29" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:29" pos:end="17:38">line_bytes</name></decl>, <decl pos:start="17:41" pos:end="17:47"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:41" pos:end="17:47">written</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:20"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:18">uint32_t</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:23">pal</name> <init pos:start="19:25" pos:end="19:30">= <expr pos:start="19:27" pos:end="19:30"><name pos:start="19:27" pos:end="19:30">NULL</name></expr></init></decl>;</decl_stmt>


    <decl_stmt pos:start="22:5" pos:end="22:23"><decl pos:start="22:5" pos:end="22:22"><type pos:start="22:5" pos:end="22:19"><specifier pos:start="22:5" pos:end="22:9">const</specifier> <name pos:start="22:11" pos:end="22:17">uint8_t</name> <modifier pos:start="22:19" pos:end="22:19">*</modifier></type><name pos:start="22:20" pos:end="22:22">src</name></decl>;</decl_stmt>



    <expr_stmt pos:start="26:5" pos:end="26:29"><expr pos:start="26:5" pos:end="26:28"><operator pos:start="26:5" pos:end="26:5">*</operator><name pos:start="26:6" pos:end="26:9">pict</name> <operator pos:start="26:11" pos:end="26:11">=</operator> <operator pos:start="26:13" pos:end="26:13">*</operator><operator pos:start="26:14" pos:end="26:14">(</operator><name pos:start="26:15" pos:end="26:21">AVFrame</name> <operator pos:start="26:23" pos:end="26:23">*</operator><operator pos:start="26:24" pos:end="26:24">)</operator><name pos:start="26:25" pos:end="26:28">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="28:5" pos:end="28:40"><expr pos:start="28:5" pos:end="28:39"><name pos:start="28:5" pos:end="28:19"><name pos:start="28:5" pos:end="28:8">pict</name><operator pos:start="28:9" pos:end="28:10">-&gt;</operator><name pos:start="28:11" pos:end="28:19">pict_type</name></name> <operator pos:start="28:21" pos:end="28:21">=</operator> <name pos:start="28:23" pos:end="28:39">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

    <expr_stmt pos:start="30:5" pos:end="30:24"><expr pos:start="30:5" pos:end="30:23"><name pos:start="30:5" pos:end="30:19"><name pos:start="30:5" pos:end="30:8">pict</name><operator pos:start="30:9" pos:end="30:10">-&gt;</operator><name pos:start="30:11" pos:end="30:19">key_frame</name></name> <operator pos:start="30:21" pos:end="30:21">=</operator> <literal type="number" pos:start="30:23" pos:end="30:23">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="34:5" pos:end="40:5"><if pos:start="34:5" pos:end="40:5">if <condition pos:start="34:8" pos:end="34:54">(<expr pos:start="34:9" pos:end="34:53"><name pos:start="34:9" pos:end="34:20"><name pos:start="34:9" pos:end="34:13">avctx</name><operator pos:start="34:14" pos:end="34:15">-&gt;</operator><name pos:start="34:16" pos:end="34:20">width</name></name> <operator pos:start="34:22" pos:end="34:22">&gt;</operator> <literal type="number" pos:start="34:24" pos:end="34:28">65535</literal> <operator pos:start="34:30" pos:end="34:31">||</operator> <name pos:start="34:33" pos:end="34:45"><name pos:start="34:33" pos:end="34:37">avctx</name><operator pos:start="34:38" pos:end="34:39">-&gt;</operator><name pos:start="34:40" pos:end="34:45">height</name></name> <operator pos:start="34:47" pos:end="34:47">&gt;</operator> <literal type="number" pos:start="34:49" pos:end="34:53">65535</literal></expr>)</condition> <block pos:start="34:56" pos:end="40:5">{<block_content pos:start="36:9" pos:end="38:18">

        <expr_stmt pos:start="36:9" pos:end="36:80"><expr pos:start="36:9" pos:end="36:79"><call pos:start="36:9" pos:end="36:79"><name pos:start="36:9" pos:end="36:14">av_log</name><argument_list pos:start="36:15" pos:end="36:79">(<argument pos:start="36:16" pos:end="36:20"><expr pos:start="36:16" pos:end="36:20"><name pos:start="36:16" pos:end="36:20">avctx</name></expr></argument>, <argument pos:start="36:23" pos:end="36:34"><expr pos:start="36:23" pos:end="36:34"><name pos:start="36:23" pos:end="36:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="36:37" pos:end="36:78"><expr pos:start="36:37" pos:end="36:78"><literal type="string" pos:start="36:37" pos:end="36:78">"image dimensions do not fit in 16 bits\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="38:9" pos:end="38:18">return <expr pos:start="38:16" pos:end="38:17"><operator pos:start="38:16" pos:end="38:16">-</operator><literal type="number" pos:start="38:17" pos:end="38:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="44:5" pos:end="100:5">switch <condition pos:start="44:12" pos:end="44:27">(<expr pos:start="44:13" pos:end="44:26"><name pos:start="44:13" pos:end="44:26"><name pos:start="44:13" pos:end="44:17">avctx</name><operator pos:start="44:18" pos:end="44:19">-&gt;</operator><name pos:start="44:20" pos:end="44:26">pix_fmt</name></name></expr>)</condition> <block pos:start="44:29" pos:end="100:5">{<block_content pos:start="46:5" pos:end="98:18">

    <case pos:start="46:5" pos:end="46:23">case <expr pos:start="46:10" pos:end="46:22"><name pos:start="46:10" pos:end="46:22">PIX_FMT_RGB24</name></expr>:</case>

        <expr_stmt pos:start="48:9" pos:end="48:16"><expr pos:start="48:9" pos:end="48:15"><name pos:start="48:9" pos:end="48:11">bpp</name> <operator pos:start="48:13" pos:end="48:13">=</operator> <literal type="number" pos:start="48:15" pos:end="48:15">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="50:9" pos:end="50:20"><expr pos:start="50:9" pos:end="50:19"><name pos:start="50:9" pos:end="50:15">nplanes</name> <operator pos:start="50:17" pos:end="50:17">=</operator> <literal type="number" pos:start="50:19" pos:end="50:19">3</literal></expr>;</expr_stmt>

        <break pos:start="52:9" pos:end="52:14">break;</break>

    <case pos:start="54:5" pos:end="54:22">case <expr pos:start="54:10" pos:end="54:21"><name pos:start="54:10" pos:end="54:21">PIX_FMT_RGB8</name></expr>:</case>

    <case pos:start="56:5" pos:end="56:22">case <expr pos:start="56:10" pos:end="56:21"><name pos:start="56:10" pos:end="56:21">PIX_FMT_BGR8</name></expr>:</case>

    <case pos:start="58:5" pos:end="58:27">case <expr pos:start="58:10" pos:end="58:26"><name pos:start="58:10" pos:end="58:26">PIX_FMT_RGB4_BYTE</name></expr>:</case>

    <case pos:start="60:5" pos:end="60:27">case <expr pos:start="60:10" pos:end="60:26"><name pos:start="60:10" pos:end="60:26">PIX_FMT_BGR4_BYTE</name></expr>:</case>

    <case pos:start="62:5" pos:end="62:23">case <expr pos:start="62:10" pos:end="62:22"><name pos:start="62:10" pos:end="62:22">PIX_FMT_GRAY8</name></expr>:</case>

        <expr_stmt pos:start="64:9" pos:end="64:16"><expr pos:start="64:9" pos:end="64:15"><name pos:start="64:9" pos:end="64:11">bpp</name> <operator pos:start="64:13" pos:end="64:13">=</operator> <literal type="number" pos:start="64:15" pos:end="64:15">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="66:9" pos:end="66:20"><expr pos:start="66:9" pos:end="66:19"><name pos:start="66:9" pos:end="66:15">nplanes</name> <operator pos:start="66:17" pos:end="66:17">=</operator> <literal type="number" pos:start="66:19" pos:end="66:19">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="68:9" pos:end="68:59"><expr pos:start="68:9" pos:end="68:58"><call pos:start="68:9" pos:end="68:58"><name pos:start="68:9" pos:end="68:30">ff_set_systematic_pal2</name><argument_list pos:start="68:31" pos:end="68:58">(<argument pos:start="68:32" pos:end="68:41"><expr pos:start="68:32" pos:end="68:41"><name pos:start="68:32" pos:end="68:41">palette256</name></expr></argument>, <argument pos:start="68:44" pos:end="68:57"><expr pos:start="68:44" pos:end="68:57"><name pos:start="68:44" pos:end="68:57"><name pos:start="68:44" pos:end="68:48">avctx</name><operator pos:start="68:49" pos:end="68:50">-&gt;</operator><name pos:start="68:51" pos:end="68:57">pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="70:9" pos:end="70:25"><expr pos:start="70:9" pos:end="70:24"><name pos:start="70:9" pos:end="70:11">pal</name> <operator pos:start="70:13" pos:end="70:13">=</operator> <name pos:start="70:15" pos:end="70:24">palette256</name></expr>;</expr_stmt>

        <break pos:start="72:9" pos:end="72:14">break;</break>

    <case pos:start="74:5" pos:end="74:22">case <expr pos:start="74:10" pos:end="74:21"><name pos:start="74:10" pos:end="74:21">PIX_FMT_PAL8</name></expr>:</case>

        <expr_stmt pos:start="76:9" pos:end="76:16"><expr pos:start="76:9" pos:end="76:15"><name pos:start="76:9" pos:end="76:11">bpp</name> <operator pos:start="76:13" pos:end="76:13">=</operator> <literal type="number" pos:start="76:15" pos:end="76:15">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="78:9" pos:end="78:20"><expr pos:start="78:9" pos:end="78:19"><name pos:start="78:9" pos:end="78:15">nplanes</name> <operator pos:start="78:17" pos:end="78:17">=</operator> <literal type="number" pos:start="78:19" pos:end="78:19">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="80:9" pos:end="80:40"><expr pos:start="80:9" pos:end="80:39"><name pos:start="80:9" pos:end="80:11">pal</name> <operator pos:start="80:13" pos:end="80:13">=</operator> <operator pos:start="80:15" pos:end="80:15">(</operator><name pos:start="80:16" pos:end="80:23">uint32_t</name> <operator pos:start="80:25" pos:end="80:25">*</operator><operator pos:start="80:26" pos:end="80:26">)</operator><name pos:start="80:27" pos:end="80:39"><name pos:start="80:27" pos:end="80:30">pict</name><operator pos:start="80:31" pos:end="80:32">-&gt;</operator><name pos:start="80:33" pos:end="80:36">data</name><index pos:start="80:37" pos:end="80:39">[<expr pos:start="80:38" pos:end="80:38"><literal type="number" pos:start="80:38" pos:end="80:38">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <break pos:start="82:9" pos:end="82:14">break;</break>

    <case pos:start="84:5" pos:end="84:27">case <expr pos:start="84:10" pos:end="84:26"><name pos:start="84:10" pos:end="84:26">PIX_FMT_MONOBLACK</name></expr>:</case>

        <expr_stmt pos:start="86:9" pos:end="86:16"><expr pos:start="86:9" pos:end="86:15"><name pos:start="86:9" pos:end="86:11">bpp</name> <operator pos:start="86:13" pos:end="86:13">=</operator> <literal type="number" pos:start="86:15" pos:end="86:15">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="88:9" pos:end="88:20"><expr pos:start="88:9" pos:end="88:19"><name pos:start="88:9" pos:end="88:15">nplanes</name> <operator pos:start="88:17" pos:end="88:17">=</operator> <literal type="number" pos:start="88:19" pos:end="88:19">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="90:9" pos:end="90:28"><expr pos:start="90:9" pos:end="90:27"><name pos:start="90:9" pos:end="90:11">pal</name> <operator pos:start="90:13" pos:end="90:13">=</operator> <name pos:start="90:15" pos:end="90:27">monoblack_pal</name></expr>;</expr_stmt>

        <break pos:start="92:9" pos:end="92:14">break;</break>

    <default pos:start="94:5" pos:end="94:12">default:</default>

        <expr_stmt pos:start="96:9" pos:end="96:60"><expr pos:start="96:9" pos:end="96:59"><call pos:start="96:9" pos:end="96:59"><name pos:start="96:9" pos:end="96:14">av_log</name><argument_list pos:start="96:15" pos:end="96:59">(<argument pos:start="96:16" pos:end="96:20"><expr pos:start="96:16" pos:end="96:20"><name pos:start="96:16" pos:end="96:20">avctx</name></expr></argument>, <argument pos:start="96:23" pos:end="96:34"><expr pos:start="96:23" pos:end="96:34"><name pos:start="96:23" pos:end="96:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="96:37" pos:end="96:58"><expr pos:start="96:37" pos:end="96:58"><literal type="string" pos:start="96:37" pos:end="96:58">"unsupported pixfmt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="98:9" pos:end="98:18">return <expr pos:start="98:16" pos:end="98:17"><operator pos:start="98:16" pos:end="98:16">-</operator><literal type="number" pos:start="98:17" pos:end="98:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="104:5" pos:end="104:47"><expr pos:start="104:5" pos:end="104:46"><name pos:start="104:5" pos:end="104:14">line_bytes</name> <operator pos:start="104:16" pos:end="104:16">=</operator> <operator pos:start="104:18" pos:end="104:18">(</operator><name pos:start="104:19" pos:end="104:30"><name pos:start="104:19" pos:end="104:23">avctx</name><operator pos:start="104:24" pos:end="104:25">-&gt;</operator><name pos:start="104:26" pos:end="104:30">width</name></name> <operator pos:start="104:32" pos:end="104:32">*</operator> <name pos:start="104:34" pos:end="104:36">bpp</name> <operator pos:start="104:38" pos:end="104:38">+</operator> <literal type="number" pos:start="104:40" pos:end="104:40">7</literal><operator pos:start="104:41" pos:end="104:41">)</operator> <operator pos:start="104:43" pos:end="104:44">&gt;&gt;</operator> <literal type="number" pos:start="104:46" pos:end="104:46">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="106:5" pos:end="106:39"><expr pos:start="106:5" pos:end="106:38"><name pos:start="106:5" pos:end="106:14">line_bytes</name> <operator pos:start="106:16" pos:end="106:16">=</operator> <operator pos:start="106:18" pos:end="106:18">(</operator><name pos:start="106:19" pos:end="106:28">line_bytes</name> <operator pos:start="106:30" pos:end="106:30">+</operator> <literal type="number" pos:start="106:32" pos:end="106:32">1</literal><operator pos:start="106:33" pos:end="106:33">)</operator> <operator pos:start="106:35" pos:end="106:35">&amp;</operator> <operator pos:start="106:37" pos:end="106:37">~</operator><literal type="number" pos:start="106:38" pos:end="106:38">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="110:5" pos:end="110:34"><expr pos:start="110:5" pos:end="110:33"><call pos:start="110:5" pos:end="110:33"><name pos:start="110:5" pos:end="110:23">bytestream_put_byte</name><argument_list pos:start="110:24" pos:end="110:33">(<argument pos:start="110:25" pos:end="110:28"><expr pos:start="110:25" pos:end="110:28"><operator pos:start="110:25" pos:end="110:25">&amp;</operator><name pos:start="110:26" pos:end="110:28">buf</name></expr></argument>, <argument pos:start="110:31" pos:end="110:32"><expr pos:start="110:31" pos:end="110:32"><literal type="number" pos:start="110:31" pos:end="110:32">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                  <comment type="line" pos:start="110:53" pos:end="110:67">// manufacturer</comment>

    <expr_stmt pos:start="112:5" pos:end="112:33"><expr pos:start="112:5" pos:end="112:32"><call pos:start="112:5" pos:end="112:32"><name pos:start="112:5" pos:end="112:23">bytestream_put_byte</name><argument_list pos:start="112:24" pos:end="112:32">(<argument pos:start="112:25" pos:end="112:28"><expr pos:start="112:25" pos:end="112:28"><operator pos:start="112:25" pos:end="112:25">&amp;</operator><name pos:start="112:26" pos:end="112:28">buf</name></expr></argument>, <argument pos:start="112:31" pos:end="112:31"><expr pos:start="112:31" pos:end="112:31"><literal type="number" pos:start="112:31" pos:end="112:31">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="line" pos:start="112:53" pos:end="112:62">// version</comment>

    <expr_stmt pos:start="114:5" pos:end="114:33"><expr pos:start="114:5" pos:end="114:32"><call pos:start="114:5" pos:end="114:32"><name pos:start="114:5" pos:end="114:23">bytestream_put_byte</name><argument_list pos:start="114:24" pos:end="114:32">(<argument pos:start="114:25" pos:end="114:28"><expr pos:start="114:25" pos:end="114:28"><operator pos:start="114:25" pos:end="114:25">&amp;</operator><name pos:start="114:26" pos:end="114:28">buf</name></expr></argument>, <argument pos:start="114:31" pos:end="114:31"><expr pos:start="114:31" pos:end="114:31"><literal type="number" pos:start="114:31" pos:end="114:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="line" pos:start="114:53" pos:end="114:63">// encoding</comment>

    <expr_stmt pos:start="116:5" pos:end="116:35"><expr pos:start="116:5" pos:end="116:34"><call pos:start="116:5" pos:end="116:34"><name pos:start="116:5" pos:end="116:23">bytestream_put_byte</name><argument_list pos:start="116:24" pos:end="116:34">(<argument pos:start="116:25" pos:end="116:28"><expr pos:start="116:25" pos:end="116:28"><operator pos:start="116:25" pos:end="116:25">&amp;</operator><name pos:start="116:26" pos:end="116:28">buf</name></expr></argument>, <argument pos:start="116:31" pos:end="116:33"><expr pos:start="116:31" pos:end="116:33"><name pos:start="116:31" pos:end="116:33">bpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <comment type="line" pos:start="116:53" pos:end="116:79">// bits per pixel per plane</comment>

    <expr_stmt pos:start="118:5" pos:end="118:33"><expr pos:start="118:5" pos:end="118:32"><call pos:start="118:5" pos:end="118:32"><name pos:start="118:5" pos:end="118:23">bytestream_put_le16</name><argument_list pos:start="118:24" pos:end="118:32">(<argument pos:start="118:25" pos:end="118:28"><expr pos:start="118:25" pos:end="118:28"><operator pos:start="118:25" pos:end="118:25">&amp;</operator><name pos:start="118:26" pos:end="118:28">buf</name></expr></argument>, <argument pos:start="118:31" pos:end="118:31"><expr pos:start="118:31" pos:end="118:31"><literal type="number" pos:start="118:31" pos:end="118:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="line" pos:start="118:53" pos:end="118:60">// x min</comment>

    <expr_stmt pos:start="120:5" pos:end="120:33"><expr pos:start="120:5" pos:end="120:32"><call pos:start="120:5" pos:end="120:32"><name pos:start="120:5" pos:end="120:23">bytestream_put_le16</name><argument_list pos:start="120:24" pos:end="120:32">(<argument pos:start="120:25" pos:end="120:28"><expr pos:start="120:25" pos:end="120:28"><operator pos:start="120:25" pos:end="120:25">&amp;</operator><name pos:start="120:26" pos:end="120:28">buf</name></expr></argument>, <argument pos:start="120:31" pos:end="120:31"><expr pos:start="120:31" pos:end="120:31"><literal type="number" pos:start="120:31" pos:end="120:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="line" pos:start="120:53" pos:end="120:60">// y min</comment>

    <expr_stmt pos:start="122:5" pos:end="122:48"><expr pos:start="122:5" pos:end="122:47"><call pos:start="122:5" pos:end="122:47"><name pos:start="122:5" pos:end="122:23">bytestream_put_le16</name><argument_list pos:start="122:24" pos:end="122:47">(<argument pos:start="122:25" pos:end="122:28"><expr pos:start="122:25" pos:end="122:28"><operator pos:start="122:25" pos:end="122:25">&amp;</operator><name pos:start="122:26" pos:end="122:28">buf</name></expr></argument>, <argument pos:start="122:31" pos:end="122:46"><expr pos:start="122:31" pos:end="122:46"><name pos:start="122:31" pos:end="122:42"><name pos:start="122:31" pos:end="122:35">avctx</name><operator pos:start="122:36" pos:end="122:37">-&gt;</operator><name pos:start="122:38" pos:end="122:42">width</name></name> <operator pos:start="122:44" pos:end="122:44">-</operator> <literal type="number" pos:start="122:46" pos:end="122:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line" pos:start="122:53" pos:end="122:60">// x max</comment>

    <expr_stmt pos:start="124:5" pos:end="124:49"><expr pos:start="124:5" pos:end="124:48"><call pos:start="124:5" pos:end="124:48"><name pos:start="124:5" pos:end="124:23">bytestream_put_le16</name><argument_list pos:start="124:24" pos:end="124:48">(<argument pos:start="124:25" pos:end="124:28"><expr pos:start="124:25" pos:end="124:28"><operator pos:start="124:25" pos:end="124:25">&amp;</operator><name pos:start="124:26" pos:end="124:28">buf</name></expr></argument>, <argument pos:start="124:31" pos:end="124:47"><expr pos:start="124:31" pos:end="124:47"><name pos:start="124:31" pos:end="124:43"><name pos:start="124:31" pos:end="124:35">avctx</name><operator pos:start="124:36" pos:end="124:37">-&gt;</operator><name pos:start="124:38" pos:end="124:43">height</name></name> <operator pos:start="124:45" pos:end="124:45">-</operator> <literal type="number" pos:start="124:47" pos:end="124:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line" pos:start="124:53" pos:end="124:60">// y max</comment>

    <expr_stmt pos:start="126:5" pos:end="126:33"><expr pos:start="126:5" pos:end="126:32"><call pos:start="126:5" pos:end="126:32"><name pos:start="126:5" pos:end="126:23">bytestream_put_le16</name><argument_list pos:start="126:24" pos:end="126:32">(<argument pos:start="126:25" pos:end="126:28"><expr pos:start="126:25" pos:end="126:28"><operator pos:start="126:25" pos:end="126:25">&amp;</operator><name pos:start="126:26" pos:end="126:28">buf</name></expr></argument>, <argument pos:start="126:31" pos:end="126:31"><expr pos:start="126:31" pos:end="126:31"><literal type="number" pos:start="126:31" pos:end="126:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="line" pos:start="126:53" pos:end="126:69">// horizontal DPI</comment>

    <expr_stmt pos:start="128:5" pos:end="128:33"><expr pos:start="128:5" pos:end="128:32"><call pos:start="128:5" pos:end="128:32"><name pos:start="128:5" pos:end="128:23">bytestream_put_le16</name><argument_list pos:start="128:24" pos:end="128:32">(<argument pos:start="128:25" pos:end="128:28"><expr pos:start="128:25" pos:end="128:28"><operator pos:start="128:25" pos:end="128:25">&amp;</operator><name pos:start="128:26" pos:end="128:28">buf</name></expr></argument>, <argument pos:start="128:31" pos:end="128:31"><expr pos:start="128:31" pos:end="128:31"><literal type="number" pos:start="128:31" pos:end="128:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="line" pos:start="128:53" pos:end="128:67">// vertical DPI</comment>

    <for pos:start="130:5" pos:end="132:52">for <control pos:start="130:9" pos:end="130:28">(<init pos:start="130:10" pos:end="130:15"><expr pos:start="130:10" pos:end="130:14"><name pos:start="130:10" pos:end="130:10">i</name> <operator pos:start="130:12" pos:end="130:12">=</operator> <literal type="number" pos:start="130:14" pos:end="130:14">0</literal></expr>;</init> <condition pos:start="130:17" pos:end="130:23"><expr pos:start="130:17" pos:end="130:22"><name pos:start="130:17" pos:end="130:17">i</name> <operator pos:start="130:19" pos:end="130:19">&lt;</operator> <literal type="number" pos:start="130:21" pos:end="130:22">16</literal></expr>;</condition> <incr pos:start="130:25" pos:end="130:27"><expr pos:start="130:25" pos:end="130:27"><name pos:start="130:25" pos:end="130:25">i</name><operator pos:start="130:26" pos:end="130:27">++</operator></expr></incr>)</control><block type="pseudo" pos:start="132:9" pos:end="132:52"><block_content pos:start="132:9" pos:end="132:52">

        <expr_stmt pos:start="132:9" pos:end="132:52"><expr pos:start="132:9" pos:end="132:51"><call pos:start="132:9" pos:end="132:51"><name pos:start="132:9" pos:end="132:27">bytestream_put_be24</name><argument_list pos:start="132:28" pos:end="132:51">(<argument pos:start="132:29" pos:end="132:32"><expr pos:start="132:29" pos:end="132:32"><operator pos:start="132:29" pos:end="132:29">&amp;</operator><name pos:start="132:30" pos:end="132:32">buf</name></expr></argument>, <argument pos:start="132:35" pos:end="132:50"><expr pos:start="132:35" pos:end="132:50"><ternary pos:start="132:35" pos:end="132:50"><condition pos:start="132:35" pos:end="132:39"><expr pos:start="132:35" pos:end="132:37"><name pos:start="132:35" pos:end="132:37">pal</name></expr> ?</condition><then pos:start="132:41" pos:end="132:46"> <expr pos:start="132:41" pos:end="132:46"><name pos:start="132:41" pos:end="132:46"><name pos:start="132:41" pos:end="132:43">pal</name><index pos:start="132:44" pos:end="132:46">[<expr pos:start="132:45" pos:end="132:45"><name pos:start="132:45" pos:end="132:45">i</name></expr>]</index></name></expr> </then><else pos:start="132:48" pos:end="132:50">: <expr pos:start="132:50" pos:end="132:50"><literal type="number" pos:start="132:50" pos:end="132:50">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for><comment type="line" pos:start="132:53" pos:end="132:81">// palette (&lt;= 16 color only)</comment>

    <expr_stmt pos:start="134:5" pos:end="134:33"><expr pos:start="134:5" pos:end="134:32"><call pos:start="134:5" pos:end="134:32"><name pos:start="134:5" pos:end="134:23">bytestream_put_byte</name><argument_list pos:start="134:24" pos:end="134:32">(<argument pos:start="134:25" pos:end="134:28"><expr pos:start="134:25" pos:end="134:28"><operator pos:start="134:25" pos:end="134:25">&amp;</operator><name pos:start="134:26" pos:end="134:28">buf</name></expr></argument>, <argument pos:start="134:31" pos:end="134:31"><expr pos:start="134:31" pos:end="134:31"><literal type="number" pos:start="134:31" pos:end="134:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                   <comment type="line" pos:start="134:53" pos:end="134:63">// reserved</comment>

    <expr_stmt pos:start="136:5" pos:end="136:39"><expr pos:start="136:5" pos:end="136:38"><call pos:start="136:5" pos:end="136:38"><name pos:start="136:5" pos:end="136:23">bytestream_put_byte</name><argument_list pos:start="136:24" pos:end="136:38">(<argument pos:start="136:25" pos:end="136:28"><expr pos:start="136:25" pos:end="136:28"><operator pos:start="136:25" pos:end="136:25">&amp;</operator><name pos:start="136:26" pos:end="136:28">buf</name></expr></argument>, <argument pos:start="136:31" pos:end="136:37"><expr pos:start="136:31" pos:end="136:37"><name pos:start="136:31" pos:end="136:37">nplanes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="line" pos:start="136:53" pos:end="136:71">// number of planes</comment>

    <expr_stmt pos:start="138:5" pos:end="138:42"><expr pos:start="138:5" pos:end="138:41"><call pos:start="138:5" pos:end="138:41"><name pos:start="138:5" pos:end="138:23">bytestream_put_le16</name><argument_list pos:start="138:24" pos:end="138:41">(<argument pos:start="138:25" pos:end="138:28"><expr pos:start="138:25" pos:end="138:28"><operator pos:start="138:25" pos:end="138:25">&amp;</operator><name pos:start="138:26" pos:end="138:28">buf</name></expr></argument>, <argument pos:start="138:31" pos:end="138:40"><expr pos:start="138:31" pos:end="138:40"><name pos:start="138:31" pos:end="138:40">line_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="line" pos:start="138:53" pos:end="138:83">// scanline plane size in bytes</comment>



    <while pos:start="142:5" pos:end="144:18">while <condition pos:start="142:11" pos:end="142:33">(<expr pos:start="142:12" pos:end="142:32"><name pos:start="142:12" pos:end="142:14">buf</name> <operator pos:start="142:16" pos:end="142:16">-</operator> <name pos:start="142:18" pos:end="142:26">buf_start</name> <operator pos:start="142:28" pos:end="142:28">&lt;</operator> <literal type="number" pos:start="142:30" pos:end="142:32">128</literal></expr>)</condition><block type="pseudo" pos:start="144:9" pos:end="144:18"><block_content pos:start="144:9" pos:end="144:18">

        <expr_stmt pos:start="144:9" pos:end="144:18"><expr pos:start="144:9" pos:end="144:17"><operator pos:start="144:9" pos:end="144:9">*</operator><name pos:start="144:10" pos:end="144:12">buf</name><operator pos:start="144:13" pos:end="144:14">++</operator><operator pos:start="144:15" pos:end="144:15">=</operator> <literal type="number" pos:start="144:17" pos:end="144:17">0</literal></expr>;</expr_stmt></block_content></block></while>



    <expr_stmt pos:start="148:5" pos:end="148:24"><expr pos:start="148:5" pos:end="148:23"><name pos:start="148:5" pos:end="148:7">src</name> <operator pos:start="148:9" pos:end="148:9">=</operator> <name pos:start="148:11" pos:end="148:23"><name pos:start="148:11" pos:end="148:14">pict</name><operator pos:start="148:15" pos:end="148:16">-&gt;</operator><name pos:start="148:17" pos:end="148:20">data</name><index pos:start="148:21" pos:end="148:23">[<expr pos:start="148:22" pos:end="148:22"><literal type="number" pos:start="148:22" pos:end="148:22">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <for pos:start="152:5" pos:end="168:5">for <control pos:start="152:9" pos:end="152:39">(<init pos:start="152:10" pos:end="152:15"><expr pos:start="152:10" pos:end="152:14"><name pos:start="152:10" pos:end="152:10">y</name> <operator pos:start="152:12" pos:end="152:12">=</operator> <literal type="number" pos:start="152:14" pos:end="152:14">0</literal></expr>;</init> <condition pos:start="152:17" pos:end="152:34"><expr pos:start="152:17" pos:end="152:33"><name pos:start="152:17" pos:end="152:17">y</name> <operator pos:start="152:19" pos:end="152:19">&lt;</operator> <name pos:start="152:21" pos:end="152:33"><name pos:start="152:21" pos:end="152:25">avctx</name><operator pos:start="152:26" pos:end="152:27">-&gt;</operator><name pos:start="152:28" pos:end="152:33">height</name></name></expr>;</condition> <incr pos:start="152:36" pos:end="152:38"><expr pos:start="152:36" pos:end="152:38"><name pos:start="152:36" pos:end="152:36">y</name><operator pos:start="152:37" pos:end="152:38">++</operator></expr></incr>)</control> <block pos:start="152:41" pos:end="168:5">{<block_content pos:start="154:9" pos:end="166:33">

        <if_stmt pos:start="154:9" pos:end="162:9"><if pos:start="154:9" pos:end="162:9">if <condition pos:start="154:12" pos:end="156:69">(<expr pos:start="154:13" pos:end="156:68"><operator pos:start="154:13" pos:end="154:13">(</operator><name pos:start="154:14" pos:end="154:20">written</name> <operator pos:start="154:22" pos:end="154:22">=</operator> <call pos:start="154:24" pos:end="156:63"><name pos:start="154:24" pos:end="154:37">pcx_rle_encode</name><argument_list pos:start="154:38" pos:end="156:63">(<argument pos:start="154:39" pos:end="154:41"><expr pos:start="154:39" pos:end="154:41"><name pos:start="154:39" pos:end="154:41">buf</name></expr></argument>, <argument pos:start="154:44" pos:end="154:56"><expr pos:start="154:44" pos:end="154:56"><name pos:start="154:44" pos:end="154:50">buf_end</name> <operator pos:start="154:52" pos:end="154:52">-</operator> <name pos:start="154:54" pos:end="154:56">buf</name></expr></argument>,

                                      <argument pos:start="156:39" pos:end="156:41"><expr pos:start="156:39" pos:end="156:41"><name pos:start="156:39" pos:end="156:41">src</name></expr></argument>, <argument pos:start="156:44" pos:end="156:53"><expr pos:start="156:44" pos:end="156:53"><name pos:start="156:44" pos:end="156:53">line_bytes</name></expr></argument>, <argument pos:start="156:56" pos:end="156:62"><expr pos:start="156:56" pos:end="156:62"><name pos:start="156:56" pos:end="156:62">nplanes</name></expr></argument>)</argument_list></call><operator pos:start="156:64" pos:end="156:64">)</operator> <operator pos:start="156:66" pos:end="156:66">&lt;</operator> <literal type="number" pos:start="156:68" pos:end="156:68">0</literal></expr>)</condition> <block pos:start="156:71" pos:end="162:9">{<block_content pos:start="158:13" pos:end="160:22">

            <expr_stmt pos:start="158:13" pos:end="158:62"><expr pos:start="158:13" pos:end="158:61"><call pos:start="158:13" pos:end="158:61"><name pos:start="158:13" pos:end="158:18">av_log</name><argument_list pos:start="158:19" pos:end="158:61">(<argument pos:start="158:20" pos:end="158:24"><expr pos:start="158:20" pos:end="158:24"><name pos:start="158:20" pos:end="158:24">avctx</name></expr></argument>, <argument pos:start="158:27" pos:end="158:38"><expr pos:start="158:27" pos:end="158:38"><name pos:start="158:27" pos:end="158:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="158:41" pos:end="158:60"><expr pos:start="158:41" pos:end="158:60"><literal type="string" pos:start="158:41" pos:end="158:60">"buffer too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="160:13" pos:end="160:22">return <expr pos:start="160:20" pos:end="160:21"><operator pos:start="160:20" pos:end="160:20">-</operator><literal type="number" pos:start="160:21" pos:end="160:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="164:9" pos:end="164:23"><expr pos:start="164:9" pos:end="164:22"><name pos:start="164:9" pos:end="164:11">buf</name> <operator pos:start="164:13" pos:end="164:14">+=</operator> <name pos:start="164:16" pos:end="164:22">written</name></expr>;</expr_stmt>

        <expr_stmt pos:start="166:9" pos:end="166:33"><expr pos:start="166:9" pos:end="166:32"><name pos:start="166:9" pos:end="166:11">src</name> <operator pos:start="166:13" pos:end="166:14">+=</operator> <name pos:start="166:16" pos:end="166:32"><name pos:start="166:16" pos:end="166:19">pict</name><operator pos:start="166:20" pos:end="166:21">-&gt;</operator><name pos:start="166:22" pos:end="166:29">linesize</name><index pos:start="166:30" pos:end="166:32">[<expr pos:start="166:31" pos:end="166:31"><literal type="number" pos:start="166:31" pos:end="166:31">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="172:5" pos:end="190:5"><if pos:start="172:5" pos:end="190:5">if <condition pos:start="172:8" pos:end="172:33">(<expr pos:start="172:9" pos:end="172:32"><name pos:start="172:9" pos:end="172:15">nplanes</name> <operator pos:start="172:17" pos:end="172:18">==</operator> <literal type="number" pos:start="172:20" pos:end="172:20">1</literal> <operator pos:start="172:22" pos:end="172:23">&amp;&amp;</operator> <name pos:start="172:25" pos:end="172:27">bpp</name> <operator pos:start="172:29" pos:end="172:30">==</operator> <literal type="number" pos:start="172:32" pos:end="172:32">8</literal></expr>)</condition> <block pos:start="172:35" pos:end="190:5">{<block_content pos:start="174:9" pos:end="188:9">

        <if_stmt pos:start="174:9" pos:end="180:9"><if pos:start="174:9" pos:end="180:9">if <condition pos:start="174:12" pos:end="174:32">(<expr pos:start="174:13" pos:end="174:31"><name pos:start="174:13" pos:end="174:19">buf_end</name> <operator pos:start="174:21" pos:end="174:21">-</operator> <name pos:start="174:23" pos:end="174:25">buf</name> <operator pos:start="174:27" pos:end="174:27">&lt;</operator> <literal type="number" pos:start="174:29" pos:end="174:31">257</literal></expr>)</condition> <block pos:start="174:34" pos:end="180:9">{<block_content pos:start="176:13" pos:end="178:22">

            <expr_stmt pos:start="176:13" pos:end="176:62"><expr pos:start="176:13" pos:end="176:61"><call pos:start="176:13" pos:end="176:61"><name pos:start="176:13" pos:end="176:18">av_log</name><argument_list pos:start="176:19" pos:end="176:61">(<argument pos:start="176:20" pos:end="176:24"><expr pos:start="176:20" pos:end="176:24"><name pos:start="176:20" pos:end="176:24">avctx</name></expr></argument>, <argument pos:start="176:27" pos:end="176:38"><expr pos:start="176:27" pos:end="176:38"><name pos:start="176:27" pos:end="176:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="176:41" pos:end="176:60"><expr pos:start="176:41" pos:end="176:60"><literal type="string" pos:start="176:41" pos:end="176:60">"buffer too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="178:13" pos:end="178:22">return <expr pos:start="178:20" pos:end="178:21"><operator pos:start="178:20" pos:end="178:20">-</operator><literal type="number" pos:start="178:21" pos:end="178:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="182:9" pos:end="182:38"><expr pos:start="182:9" pos:end="182:37"><call pos:start="182:9" pos:end="182:37"><name pos:start="182:9" pos:end="182:27">bytestream_put_byte</name><argument_list pos:start="182:28" pos:end="182:37">(<argument pos:start="182:29" pos:end="182:32"><expr pos:start="182:29" pos:end="182:32"><operator pos:start="182:29" pos:end="182:29">&amp;</operator><name pos:start="182:30" pos:end="182:32">buf</name></expr></argument>, <argument pos:start="182:35" pos:end="182:36"><expr pos:start="182:35" pos:end="182:36"><literal type="number" pos:start="182:35" pos:end="182:36">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="184:9" pos:end="188:9">for <control pos:start="184:13" pos:end="184:33">(<init pos:start="184:14" pos:end="184:19"><expr pos:start="184:14" pos:end="184:18"><name pos:start="184:14" pos:end="184:14">i</name> <operator pos:start="184:16" pos:end="184:16">=</operator> <literal type="number" pos:start="184:18" pos:end="184:18">0</literal></expr>;</init> <condition pos:start="184:21" pos:end="184:28"><expr pos:start="184:21" pos:end="184:27"><name pos:start="184:21" pos:end="184:21">i</name> <operator pos:start="184:23" pos:end="184:23">&lt;</operator> <literal type="number" pos:start="184:25" pos:end="184:27">256</literal></expr>;</condition> <incr pos:start="184:30" pos:end="184:32"><expr pos:start="184:30" pos:end="184:32"><name pos:start="184:30" pos:end="184:30">i</name><operator pos:start="184:31" pos:end="184:32">++</operator></expr></incr>)</control> <block pos:start="184:35" pos:end="188:9">{<block_content pos:start="186:13" pos:end="186:46">

            <expr_stmt pos:start="186:13" pos:end="186:46"><expr pos:start="186:13" pos:end="186:45"><call pos:start="186:13" pos:end="186:45"><name pos:start="186:13" pos:end="186:31">bytestream_put_be24</name><argument_list pos:start="186:32" pos:end="186:45">(<argument pos:start="186:33" pos:end="186:36"><expr pos:start="186:33" pos:end="186:36"><operator pos:start="186:33" pos:end="186:33">&amp;</operator><name pos:start="186:34" pos:end="186:36">buf</name></expr></argument>, <argument pos:start="186:39" pos:end="186:44"><expr pos:start="186:39" pos:end="186:44"><name pos:start="186:39" pos:end="186:44"><name pos:start="186:39" pos:end="186:41">pal</name><index pos:start="186:42" pos:end="186:44">[<expr pos:start="186:43" pos:end="186:43"><name pos:start="186:43" pos:end="186:43">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <return pos:start="194:5" pos:end="194:27">return <expr pos:start="194:12" pos:end="194:26"><name pos:start="194:12" pos:end="194:14">buf</name> <operator pos:start="194:16" pos:end="194:16">-</operator> <name pos:start="194:18" pos:end="194:26">buf_start</name></expr>;</return>

</block_content>}</block></function></unit>
