<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22228.c" pos:tabs="8"><function pos:start="1:1" pos:end="269:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">dump_init</name><parameter_list pos:start="1:21" pos:end="3:65">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:30">DumpState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">s</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:41"><decl pos:start="1:36" pos:end="1:41"><type pos:start="1:36" pos:end="1:41"><name pos:start="1:36" pos:end="1:38">int</name></type> <name pos:start="1:40" pos:end="1:41">fd</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:54"><decl pos:start="1:44" pos:end="1:54"><type pos:start="1:44" pos:end="1:54"><name pos:start="1:44" pos:end="1:47">bool</name></type> <name pos:start="1:49" pos:end="1:54">paging</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:71"><decl pos:start="1:57" pos:end="1:71"><type pos:start="1:57" pos:end="1:71"><name pos:start="1:57" pos:end="1:60">bool</name></type> <name pos:start="1:62" pos:end="1:71">has_filter</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:34"><decl pos:start="3:22" pos:end="3:34"><type pos:start="3:22" pos:end="3:34"><name pos:start="3:22" pos:end="3:28">int64_t</name></type> <name pos:start="3:30" pos:end="3:34">begin</name></decl></parameter>, <parameter pos:start="3:37" pos:end="3:50"><decl pos:start="3:37" pos:end="3:50"><type pos:start="3:37" pos:end="3:50"><name pos:start="3:37" pos:end="3:43">int64_t</name></type> <name pos:start="3:45" pos:end="3:50">length</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:64"><decl pos:start="3:53" pos:end="3:64"><type pos:start="3:53" pos:end="3:64"><name pos:start="3:53" pos:end="3:57">Error</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier><modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:64">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="269:1">{<block_content pos:start="7:5" pos:end="267:14">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">nr_cpus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">err</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="27:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:30">(<expr pos:start="17:9" pos:end="17:29"><call pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:27">runstate_is_running</name><argument_list pos:start="17:28" pos:end="17:29">()</argument_list></call></expr>)</condition> <block pos:start="17:32" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:25">

        <expr_stmt pos:start="19:9" pos:end="19:35"><expr pos:start="19:9" pos:end="19:34"><call pos:start="19:9" pos:end="19:34"><name pos:start="19:9" pos:end="19:15">vm_stop</name><argument_list pos:start="19:16" pos:end="19:34">(<argument pos:start="19:17" pos:end="19:33"><expr pos:start="19:17" pos:end="19:33"><name pos:start="19:17" pos:end="19:33">RUN_STATE_SAVE_VM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:25"><expr pos:start="21:9" pos:end="21:24"><name pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:17">resume</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <name pos:start="21:21" pos:end="21:24">true</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="23:7" pos:end="27:5">else <block pos:start="23:12" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:26">

        <expr_stmt pos:start="25:9" pos:end="25:26"><expr pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">resume</name></name> <operator pos:start="25:19" pos:end="25:19">=</operator> <name pos:start="25:21" pos:end="25:25">false</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="35:7">/* If we use KVM, we should synchronize the registers before we get dump

     * info or physmap info.

     */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><call pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:30">cpu_synchronize_all_states</name><argument_list pos:start="37:31" pos:end="37:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:16"><expr pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:11">nr_cpus</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>;</expr_stmt>

    <macro pos:start="41:5" pos:end="41:20"><name pos:start="41:5" pos:end="41:15">CPU_FOREACH</name><argument_list pos:start="41:16" pos:end="41:20">(<argument pos:start="41:17" pos:end="41:19">cpu</argument>)</argument_list></macro> <block pos:start="41:22" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:18">

        <expr_stmt pos:start="43:9" pos:end="43:18"><expr pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:15">nr_cpus</name><operator pos:start="43:16" pos:end="43:17">++</operator></expr>;</expr_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="49:5" pos:end="49:19"><expr pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:11"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:11">errp</name></name> <operator pos:start="49:13" pos:end="49:13">=</operator> <name pos:start="49:15" pos:end="49:18">errp</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:15"><expr pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:9"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:9">fd</name></name> <operator pos:start="51:11" pos:end="51:11">=</operator> <name pos:start="51:13" pos:end="51:14">fd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:31"><expr pos:start="53:5" pos:end="53:30"><name pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:5">s</name><operator pos:start="53:6" pos:end="53:7">-&gt;</operator><name pos:start="53:8" pos:end="53:17">has_filter</name></name> <operator pos:start="53:19" pos:end="53:19">=</operator> <name pos:start="53:21" pos:end="53:30">has_filter</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:21"><expr pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:12"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:12">begin</name></name> <operator pos:start="55:14" pos:end="55:14">=</operator> <name pos:start="55:16" pos:end="55:20">begin</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:23"><expr pos:start="57:5" pos:end="57:22"><name pos:start="57:5" pos:end="57:13"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:13">length</name></name> <operator pos:start="57:15" pos:end="57:15">=</operator> <name pos:start="57:17" pos:end="57:22">length</name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:50"><expr pos:start="61:5" pos:end="61:49"><call pos:start="61:5" pos:end="61:49"><name pos:start="61:5" pos:end="61:26">guest_phys_blocks_init</name><argument_list pos:start="61:27" pos:end="61:49">(<argument pos:start="61:28" pos:end="61:48"><expr pos:start="61:28" pos:end="61:48"><operator pos:start="61:28" pos:end="61:28">&amp;</operator><name pos:start="61:29" pos:end="61:48"><name pos:start="61:29" pos:end="61:29">s</name><operator pos:start="61:30" pos:end="61:31">-&gt;</operator><name pos:start="61:32" pos:end="61:48">guest_phys_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:52"><expr pos:start="63:5" pos:end="63:51"><call pos:start="63:5" pos:end="63:51"><name pos:start="63:5" pos:end="63:28">guest_phys_blocks_append</name><argument_list pos:start="63:29" pos:end="63:51">(<argument pos:start="63:30" pos:end="63:50"><expr pos:start="63:30" pos:end="63:50"><operator pos:start="63:30" pos:end="63:30">&amp;</operator><name pos:start="63:31" pos:end="63:50"><name pos:start="63:31" pos:end="63:31">s</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:50">guest_phys_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:34"><expr pos:start="67:5" pos:end="67:33"><name pos:start="67:5" pos:end="67:12"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:12">start</name></name> <operator pos:start="67:14" pos:end="67:14">=</operator> <call pos:start="67:16" pos:end="67:33"><name pos:start="67:16" pos:end="67:30">get_start_block</name><argument_list pos:start="67:31" pos:end="67:33">(<argument pos:start="67:32" pos:end="67:32"><expr pos:start="67:32" pos:end="67:32"><name pos:start="67:32" pos:end="67:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:23">(<expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:16">start</name></name> <operator pos:start="69:18" pos:end="69:19">==</operator> <operator pos:start="69:21" pos:end="69:21">-</operator><literal type="number" pos:start="69:22" pos:end="69:22">1</literal></expr>)</condition> <block pos:start="69:25" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:21">

        <expr_stmt pos:start="71:9" pos:end="71:57"><expr pos:start="71:9" pos:end="71:56"><call pos:start="71:9" pos:end="71:56"><name pos:start="71:9" pos:end="71:17">error_set</name><argument_list pos:start="71:18" pos:end="71:56">(<argument pos:start="71:19" pos:end="71:22"><expr pos:start="71:19" pos:end="71:22"><name pos:start="71:19" pos:end="71:22">errp</name></expr></argument>, <argument pos:start="71:25" pos:end="71:46"><expr pos:start="71:25" pos:end="71:46"><name pos:start="71:25" pos:end="71:46">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="71:49" pos:end="71:55"><expr pos:start="71:49" pos:end="71:55"><literal type="string" pos:start="71:49" pos:end="71:55">"begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:21">goto <name pos:start="73:14" pos:end="73:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="85:7">/* get dump info: endian, class and architecture.

     * If the target architecture is not supported, cpu_get_dump_info() will

     * return -1.

     */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:66"><expr pos:start="87:5" pos:end="87:65"><name pos:start="87:5" pos:end="87:7">ret</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <call pos:start="87:11" pos:end="87:65"><name pos:start="87:11" pos:end="87:27">cpu_get_dump_info</name><argument_list pos:start="87:28" pos:end="87:65">(<argument pos:start="87:29" pos:end="87:41"><expr pos:start="87:29" pos:end="87:41"><operator pos:start="87:29" pos:end="87:29">&amp;</operator><name pos:start="87:30" pos:end="87:41"><name pos:start="87:30" pos:end="87:30">s</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:41">dump_info</name></name></expr></argument>, <argument pos:start="87:44" pos:end="87:64"><expr pos:start="87:44" pos:end="87:64"><operator pos:start="87:44" pos:end="87:44">&amp;</operator><name pos:start="87:45" pos:end="87:64"><name pos:start="87:45" pos:end="87:45">s</name><operator pos:start="87:46" pos:end="87:47">-&gt;</operator><name pos:start="87:48" pos:end="87:64">guest_phys_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="95:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:16">(<expr pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:11">ret</name> <operator pos:start="89:13" pos:end="89:13">&lt;</operator> <literal type="number" pos:start="89:15" pos:end="89:15">0</literal></expr>)</condition> <block pos:start="89:18" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:21">

        <expr_stmt pos:start="91:9" pos:end="91:42"><expr pos:start="91:9" pos:end="91:41"><call pos:start="91:9" pos:end="91:41"><name pos:start="91:9" pos:end="91:17">error_set</name><argument_list pos:start="91:18" pos:end="91:41">(<argument pos:start="91:19" pos:end="91:22"><expr pos:start="91:19" pos:end="91:22"><name pos:start="91:19" pos:end="91:22">errp</name></expr></argument>, <argument pos:start="91:25" pos:end="91:40"><expr pos:start="91:25" pos:end="91:40"><name pos:start="91:25" pos:end="91:40">QERR_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="93:9" pos:end="93:21">goto <name pos:start="93:14" pos:end="93:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="101:70"><expr pos:start="99:5" pos:end="101:69"><name pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:16">note_size</name></name> <operator pos:start="99:18" pos:end="99:18">=</operator> <call pos:start="99:20" pos:end="101:69"><name pos:start="99:20" pos:end="99:36">cpu_get_note_size</name><argument_list pos:start="99:37" pos:end="101:69">(<argument pos:start="99:38" pos:end="99:57"><expr pos:start="99:38" pos:end="99:57"><name pos:start="99:38" pos:end="99:57"><name pos:start="99:38" pos:end="99:38">s</name><operator pos:start="99:39" pos:end="99:40">-&gt;</operator><name pos:start="99:41" pos:end="99:49">dump_info</name><operator pos:start="99:50" pos:end="99:50">.</operator><name pos:start="99:51" pos:end="99:57">d_class</name></name></expr></argument>,

                                     <argument pos:start="101:38" pos:end="101:59"><expr pos:start="101:38" pos:end="101:59"><name pos:start="101:38" pos:end="101:59"><name pos:start="101:38" pos:end="101:38">s</name><operator pos:start="101:39" pos:end="101:40">-&gt;</operator><name pos:start="101:41" pos:end="101:49">dump_info</name><operator pos:start="101:50" pos:end="101:50">.</operator><name pos:start="101:51" pos:end="101:59">d_machine</name></name></expr></argument>, <argument pos:start="101:62" pos:end="101:68"><expr pos:start="101:62" pos:end="101:68"><name pos:start="101:62" pos:end="101:68">nr_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="109:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="103:25">(<expr pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:20"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:20">note_size</name></name> <operator pos:start="103:22" pos:end="103:22">&lt;</operator> <literal type="number" pos:start="103:24" pos:end="103:24">0</literal></expr>)</condition> <block pos:start="103:27" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:21">

        <expr_stmt pos:start="105:9" pos:end="105:42"><expr pos:start="105:9" pos:end="105:41"><call pos:start="105:9" pos:end="105:41"><name pos:start="105:9" pos:end="105:17">error_set</name><argument_list pos:start="105:18" pos:end="105:41">(<argument pos:start="105:19" pos:end="105:22"><expr pos:start="105:19" pos:end="105:22"><name pos:start="105:19" pos:end="105:22">errp</name></expr></argument>, <argument pos:start="105:25" pos:end="105:40"><expr pos:start="105:25" pos:end="105:40"><name pos:start="105:25" pos:end="105:40">QERR_UNSUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="107:9" pos:end="107:21">goto <name pos:start="107:14" pos:end="107:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:28">/* get memory mapping */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:39"><expr pos:start="115:5" pos:end="115:38"><call pos:start="115:5" pos:end="115:38"><name pos:start="115:5" pos:end="115:28">memory_mapping_list_init</name><argument_list pos:start="115:29" pos:end="115:38">(<argument pos:start="115:30" pos:end="115:37"><expr pos:start="115:30" pos:end="115:37"><operator pos:start="115:30" pos:end="115:30">&amp;</operator><name pos:start="115:31" pos:end="115:37"><name pos:start="115:31" pos:end="115:31">s</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:37">list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="133:5"><if pos:start="117:5" pos:end="129:5">if <condition pos:start="117:8" pos:end="117:15">(<expr pos:start="117:9" pos:end="117:14"><name pos:start="117:9" pos:end="117:14">paging</name></expr>)</condition> <block pos:start="117:17" pos:end="129:5">{<block_content pos:start="119:9" pos:end="127:9">

        <expr_stmt pos:start="119:9" pos:end="119:77"><expr pos:start="119:9" pos:end="119:76"><call pos:start="119:9" pos:end="119:76"><name pos:start="119:9" pos:end="119:37">qemu_get_guest_memory_mapping</name><argument_list pos:start="119:38" pos:end="119:76">(<argument pos:start="119:39" pos:end="119:46"><expr pos:start="119:39" pos:end="119:46"><operator pos:start="119:39" pos:end="119:39">&amp;</operator><name pos:start="119:40" pos:end="119:46"><name pos:start="119:40" pos:end="119:40">s</name><operator pos:start="119:41" pos:end="119:42">-&gt;</operator><name pos:start="119:43" pos:end="119:46">list</name></name></expr></argument>, <argument pos:start="119:49" pos:end="119:69"><expr pos:start="119:49" pos:end="119:69"><operator pos:start="119:49" pos:end="119:49">&amp;</operator><name pos:start="119:50" pos:end="119:69"><name pos:start="119:50" pos:end="119:50">s</name><operator pos:start="119:51" pos:end="119:52">-&gt;</operator><name pos:start="119:53" pos:end="119:69">guest_phys_blocks</name></name></expr></argument>, <argument pos:start="119:72" pos:end="119:75"><expr pos:start="119:72" pos:end="119:75"><operator pos:start="119:72" pos:end="119:72">&amp;</operator><name pos:start="119:73" pos:end="119:75">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="127:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="121:24">(<expr pos:start="121:13" pos:end="121:23"><name pos:start="121:13" pos:end="121:15">err</name> <operator pos:start="121:17" pos:end="121:18">!=</operator> <name pos:start="121:20" pos:end="121:23">NULL</name></expr>)</condition> <block pos:start="121:26" pos:end="127:9">{<block_content pos:start="123:13" pos:end="125:25">

            <expr_stmt pos:start="123:13" pos:end="123:39"><expr pos:start="123:13" pos:end="123:38"><call pos:start="123:13" pos:end="123:38"><name pos:start="123:13" pos:end="123:27">error_propagate</name><argument_list pos:start="123:28" pos:end="123:38">(<argument pos:start="123:29" pos:end="123:32"><expr pos:start="123:29" pos:end="123:32"><name pos:start="123:29" pos:end="123:32">errp</name></expr></argument>, <argument pos:start="123:35" pos:end="123:37"><expr pos:start="123:35" pos:end="123:37"><name pos:start="123:35" pos:end="123:37">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="125:13" pos:end="125:25">goto <name pos:start="125:18" pos:end="125:24">cleanup</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="129:7" pos:end="133:5">else <block pos:start="129:12" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:78">

        <expr_stmt pos:start="131:9" pos:end="131:78"><expr pos:start="131:9" pos:end="131:77"><call pos:start="131:9" pos:end="131:77"><name pos:start="131:9" pos:end="131:44">qemu_get_guest_simple_memory_mapping</name><argument_list pos:start="131:45" pos:end="131:77">(<argument pos:start="131:46" pos:end="131:53"><expr pos:start="131:46" pos:end="131:53"><operator pos:start="131:46" pos:end="131:46">&amp;</operator><name pos:start="131:47" pos:end="131:53"><name pos:start="131:47" pos:end="131:47">s</name><operator pos:start="131:48" pos:end="131:49">-&gt;</operator><name pos:start="131:50" pos:end="131:53">list</name></name></expr></argument>, <argument pos:start="131:56" pos:end="131:76"><expr pos:start="131:56" pos:end="131:76"><operator pos:start="131:56" pos:end="131:56">&amp;</operator><name pos:start="131:57" pos:end="131:76"><name pos:start="131:57" pos:end="131:57">s</name><operator pos:start="131:58" pos:end="131:59">-&gt;</operator><name pos:start="131:60" pos:end="131:76">guest_phys_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:25"><expr pos:start="137:5" pos:end="137:24"><name pos:start="137:5" pos:end="137:14"><name pos:start="137:5" pos:end="137:5">s</name><operator pos:start="137:6" pos:end="137:7">-&gt;</operator><name pos:start="137:8" pos:end="137:14">nr_cpus</name></name> <operator pos:start="137:16" pos:end="137:16">=</operator> <name pos:start="137:18" pos:end="137:24">nr_cpus</name></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:36"><expr pos:start="139:5" pos:end="139:35"><name pos:start="139:5" pos:end="139:16"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:16">page_size</name></name> <operator pos:start="139:18" pos:end="139:18">=</operator> <name pos:start="139:20" pos:end="139:35">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:42"><expr pos:start="141:5" pos:end="141:41"><name pos:start="141:5" pos:end="141:17"><name pos:start="141:5" pos:end="141:5">s</name><operator pos:start="141:6" pos:end="141:7">-&gt;</operator><name pos:start="141:8" pos:end="141:17">page_shift</name></name> <operator pos:start="141:19" pos:end="141:19">=</operator> <call pos:start="141:21" pos:end="141:37"><name pos:start="141:21" pos:end="141:23">ffs</name><argument_list pos:start="141:24" pos:end="141:37">(<argument pos:start="141:25" pos:end="141:36"><expr pos:start="141:25" pos:end="141:36"><name pos:start="141:25" pos:end="141:36"><name pos:start="141:25" pos:end="141:25">s</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:36">page_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="141:39" pos:end="141:39">-</operator> <literal type="number" pos:start="141:41" pos:end="141:41">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:21"><expr pos:start="145:5" pos:end="145:20"><call pos:start="145:5" pos:end="145:20"><name pos:start="145:5" pos:end="145:17">get_max_mapnr</name><argument_list pos:start="145:18" pos:end="145:20">(<argument pos:start="145:19" pos:end="145:19"><expr pos:start="145:19" pos:end="145:19"><name pos:start="145:19" pos:end="145:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <decl_stmt pos:start="149:5" pos:end="149:17"><decl pos:start="149:5" pos:end="149:16"><type pos:start="149:5" pos:end="149:12"><name pos:start="149:5" pos:end="149:12">uint64_t</name></type> <name pos:start="149:14" pos:end="149:16">tmp</name></decl>;</decl_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:75"><expr pos:start="151:5" pos:end="151:74"><name pos:start="151:5" pos:end="151:7">tmp</name> <operator pos:start="151:9" pos:end="151:9">=</operator> <call pos:start="151:11" pos:end="151:74"><name pos:start="151:11" pos:end="151:22">DIV_ROUND_UP</name><argument_list pos:start="151:23" pos:end="151:74">(<argument pos:start="151:24" pos:end="151:59"><expr pos:start="151:24" pos:end="151:59"><call pos:start="151:24" pos:end="151:59"><name pos:start="151:24" pos:end="151:35">DIV_ROUND_UP</name><argument_list pos:start="151:36" pos:end="151:59">(<argument pos:start="151:37" pos:end="151:48"><expr pos:start="151:37" pos:end="151:48"><name pos:start="151:37" pos:end="151:48"><name pos:start="151:37" pos:end="151:37">s</name><operator pos:start="151:38" pos:end="151:39">-&gt;</operator><name pos:start="151:40" pos:end="151:48">max_mapnr</name></name></expr></argument>, <argument pos:start="151:51" pos:end="151:58"><expr pos:start="151:51" pos:end="151:58"><name pos:start="151:51" pos:end="151:58">CHAR_BIT</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="151:62" pos:end="151:73"><expr pos:start="151:62" pos:end="151:73"><name pos:start="151:62" pos:end="151:73"><name pos:start="151:62" pos:end="151:62">s</name><operator pos:start="151:63" pos:end="151:64">-&gt;</operator><name pos:start="151:65" pos:end="151:73">page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:44"><expr pos:start="153:5" pos:end="153:43"><name pos:start="153:5" pos:end="153:22"><name pos:start="153:5" pos:end="153:5">s</name><operator pos:start="153:6" pos:end="153:7">-&gt;</operator><name pos:start="153:8" pos:end="153:22">len_dump_bitmap</name></name> <operator pos:start="153:24" pos:end="153:24">=</operator> <name pos:start="153:26" pos:end="153:28">tmp</name> <operator pos:start="153:30" pos:end="153:30">*</operator> <name pos:start="153:32" pos:end="153:43"><name pos:start="153:32" pos:end="153:32">s</name><operator pos:start="153:33" pos:end="153:34">-&gt;</operator><name pos:start="153:35" pos:end="153:43">page_size</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="157:5" pos:end="161:5"><if pos:start="157:5" pos:end="161:5">if <condition pos:start="157:8" pos:end="157:22">(<expr pos:start="157:9" pos:end="157:21"><name pos:start="157:9" pos:end="157:21"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:21">has_filter</name></name></expr>)</condition> <block pos:start="157:24" pos:end="161:5">{<block_content pos:start="159:9" pos:end="159:61">

        <expr_stmt pos:start="159:9" pos:end="159:61"><expr pos:start="159:9" pos:end="159:60"><call pos:start="159:9" pos:end="159:60"><name pos:start="159:9" pos:end="159:29">memory_mapping_filter</name><argument_list pos:start="159:30" pos:end="159:60">(<argument pos:start="159:31" pos:end="159:38"><expr pos:start="159:31" pos:end="159:38"><operator pos:start="159:31" pos:end="159:31">&amp;</operator><name pos:start="159:32" pos:end="159:38"><name pos:start="159:32" pos:end="159:32">s</name><operator pos:start="159:33" pos:end="159:34">-&gt;</operator><name pos:start="159:35" pos:end="159:38">list</name></name></expr></argument>, <argument pos:start="159:41" pos:end="159:48"><expr pos:start="159:41" pos:end="159:48"><name pos:start="159:41" pos:end="159:48"><name pos:start="159:41" pos:end="159:41">s</name><operator pos:start="159:42" pos:end="159:43">-&gt;</operator><name pos:start="159:44" pos:end="159:48">begin</name></name></expr></argument>, <argument pos:start="159:51" pos:end="159:59"><expr pos:start="159:51" pos:end="159:59"><name pos:start="159:51" pos:end="159:59"><name pos:start="159:51" pos:end="159:51">s</name><operator pos:start="159:52" pos:end="159:53">-&gt;</operator><name pos:start="159:54" pos:end="159:59">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="165:5" pos:end="173:7">/*

     * calculate phdr_num

     *

     * the type of ehdr-&gt;e_phnum is uint16_t, so we should avoid overflow

     */</comment>

    <expr_stmt pos:start="175:5" pos:end="175:20"><expr pos:start="175:5" pos:end="175:19"><name pos:start="175:5" pos:end="175:15"><name pos:start="175:5" pos:end="175:5">s</name><operator pos:start="175:6" pos:end="175:7">-&gt;</operator><name pos:start="175:8" pos:end="175:15">phdr_num</name></name> <operator pos:start="175:17" pos:end="175:17">=</operator> <literal type="number" pos:start="175:19" pos:end="175:19">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="175:22" pos:end="175:34">/* PT_NOTE */</comment>

    <if_stmt pos:start="177:5" pos:end="205:5"><if pos:start="177:5" pos:end="183:5">if <condition pos:start="177:8" pos:end="177:37">(<expr pos:start="177:9" pos:end="177:36"><name pos:start="177:9" pos:end="177:19"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:15">list</name><operator pos:start="177:16" pos:end="177:16">.</operator><name pos:start="177:17" pos:end="177:19">num</name></name> <operator pos:start="177:21" pos:end="177:21">&lt;</operator> <name pos:start="177:23" pos:end="177:32">UINT16_MAX</name> <operator pos:start="177:34" pos:end="177:34">-</operator> <literal type="number" pos:start="177:36" pos:end="177:36">2</literal></expr>)</condition> <block pos:start="177:39" pos:end="183:5">{<block_content pos:start="179:9" pos:end="181:32">

        <expr_stmt pos:start="179:9" pos:end="179:35"><expr pos:start="179:9" pos:end="179:34"><name pos:start="179:9" pos:end="179:19"><name pos:start="179:9" pos:end="179:9">s</name><operator pos:start="179:10" pos:end="179:11">-&gt;</operator><name pos:start="179:12" pos:end="179:19">phdr_num</name></name> <operator pos:start="179:21" pos:end="179:22">+=</operator> <name pos:start="179:24" pos:end="179:34"><name pos:start="179:24" pos:end="179:24">s</name><operator pos:start="179:25" pos:end="179:26">-&gt;</operator><name pos:start="179:27" pos:end="179:30">list</name><operator pos:start="179:31" pos:end="179:31">.</operator><name pos:start="179:32" pos:end="179:34">num</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:32"><expr pos:start="181:9" pos:end="181:31"><name pos:start="181:9" pos:end="181:23"><name pos:start="181:9" pos:end="181:9">s</name><operator pos:start="181:10" pos:end="181:11">-&gt;</operator><name pos:start="181:12" pos:end="181:23">have_section</name></name> <operator pos:start="181:25" pos:end="181:25">=</operator> <name pos:start="181:27" pos:end="181:31">false</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="183:7" pos:end="205:5">else <block pos:start="183:12" pos:end="205:5">{<block_content pos:start="185:9" pos:end="203:9">

        <expr_stmt pos:start="185:9" pos:end="185:31"><expr pos:start="185:9" pos:end="185:30"><name pos:start="185:9" pos:end="185:23"><name pos:start="185:9" pos:end="185:9">s</name><operator pos:start="185:10" pos:end="185:11">-&gt;</operator><name pos:start="185:12" pos:end="185:23">have_section</name></name> <operator pos:start="185:25" pos:end="185:25">=</operator> <name pos:start="185:27" pos:end="185:30">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:30"><expr pos:start="187:9" pos:end="187:29"><name pos:start="187:9" pos:end="187:19"><name pos:start="187:9" pos:end="187:9">s</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:19">phdr_num</name></name> <operator pos:start="187:21" pos:end="187:21">=</operator> <name pos:start="187:23" pos:end="187:29">PN_XNUM</name></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:23"><expr pos:start="189:9" pos:end="189:22"><name pos:start="189:9" pos:end="189:18"><name pos:start="189:9" pos:end="189:9">s</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:18">sh_info</name></name> <operator pos:start="189:20" pos:end="189:20">=</operator> <literal type="number" pos:start="189:22" pos:end="189:22">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="189:25" pos:end="189:37">/* PT_NOTE */</comment>



        <comment type="block" pos:start="193:9" pos:end="193:80">/* the type of shdr-&gt;sh_info is uint32_t, so we should avoid overflow */</comment>

        <if_stmt pos:start="195:9" pos:end="203:9"><if pos:start="195:9" pos:end="199:9">if <condition pos:start="195:12" pos:end="195:42">(<expr pos:start="195:13" pos:end="195:41"><name pos:start="195:13" pos:end="195:23"><name pos:start="195:13" pos:end="195:13">s</name><operator pos:start="195:14" pos:end="195:15">-&gt;</operator><name pos:start="195:16" pos:end="195:19">list</name><operator pos:start="195:20" pos:end="195:20">.</operator><name pos:start="195:21" pos:end="195:23">num</name></name> <operator pos:start="195:25" pos:end="195:26">&lt;=</operator> <name pos:start="195:28" pos:end="195:37">UINT32_MAX</name> <operator pos:start="195:39" pos:end="195:39">-</operator> <literal type="number" pos:start="195:41" pos:end="195:41">1</literal></expr>)</condition> <block pos:start="195:44" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:38">

            <expr_stmt pos:start="197:13" pos:end="197:38"><expr pos:start="197:13" pos:end="197:37"><name pos:start="197:13" pos:end="197:22"><name pos:start="197:13" pos:end="197:13">s</name><operator pos:start="197:14" pos:end="197:15">-&gt;</operator><name pos:start="197:16" pos:end="197:22">sh_info</name></name> <operator pos:start="197:24" pos:end="197:25">+=</operator> <name pos:start="197:27" pos:end="197:37"><name pos:start="197:27" pos:end="197:27">s</name><operator pos:start="197:28" pos:end="197:29">-&gt;</operator><name pos:start="197:30" pos:end="197:33">list</name><operator pos:start="197:34" pos:end="197:34">.</operator><name pos:start="197:35" pos:end="197:37">num</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="199:11" pos:end="203:9">else <block pos:start="199:16" pos:end="203:9">{<block_content pos:start="201:13" pos:end="201:36">

            <expr_stmt pos:start="201:13" pos:end="201:36"><expr pos:start="201:13" pos:end="201:35"><name pos:start="201:13" pos:end="201:22"><name pos:start="201:13" pos:end="201:13">s</name><operator pos:start="201:14" pos:end="201:15">-&gt;</operator><name pos:start="201:16" pos:end="201:22">sh_info</name></name> <operator pos:start="201:24" pos:end="201:24">=</operator> <name pos:start="201:26" pos:end="201:35">UINT32_MAX</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="209:5" pos:end="245:5"><if pos:start="209:5" pos:end="227:5">if <condition pos:start="209:8" pos:end="209:43">(<expr pos:start="209:9" pos:end="209:42"><name pos:start="209:9" pos:end="209:28"><name pos:start="209:9" pos:end="209:9">s</name><operator pos:start="209:10" pos:end="209:11">-&gt;</operator><name pos:start="209:12" pos:end="209:20">dump_info</name><operator pos:start="209:21" pos:end="209:21">.</operator><name pos:start="209:22" pos:end="209:28">d_class</name></name> <operator pos:start="209:30" pos:end="209:31">==</operator> <name pos:start="209:33" pos:end="209:42">ELFCLASS64</name></expr>)</condition> <block pos:start="209:45" pos:end="227:5">{<block_content pos:start="211:9" pos:end="225:9">

        <if_stmt pos:start="211:9" pos:end="225:9"><if pos:start="211:9" pos:end="219:9">if <condition pos:start="211:12" pos:end="211:28">(<expr pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:13">s</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:27">have_section</name></name></expr>)</condition> <block pos:start="211:30" pos:end="219:9">{<block_content pos:start="213:13" pos:end="217:65">

            <expr_stmt pos:start="213:13" pos:end="217:65"><expr pos:start="213:13" pos:end="217:64"><name pos:start="213:13" pos:end="213:28"><name pos:start="213:13" pos:end="213:13">s</name><operator pos:start="213:14" pos:end="213:15">-&gt;</operator><name pos:start="213:16" pos:end="213:28">memory_offset</name></name> <operator pos:start="213:30" pos:end="213:30">=</operator> <sizeof pos:start="213:32" pos:end="213:49">sizeof<argument_list pos:start="213:38" pos:end="213:49">(<argument pos:start="213:39" pos:end="213:48"><expr pos:start="213:39" pos:end="213:48"><name pos:start="213:39" pos:end="213:48">Elf64_Ehdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="213:51" pos:end="213:51">+</operator>

                               <sizeof pos:start="215:32" pos:end="215:49">sizeof<argument_list pos:start="215:38" pos:end="215:49">(<argument pos:start="215:39" pos:end="215:48"><expr pos:start="215:39" pos:end="215:48"><name pos:start="215:39" pos:end="215:48">Elf64_Phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="215:51" pos:end="215:51">*</operator> <name pos:start="215:53" pos:end="215:62"><name pos:start="215:53" pos:end="215:53">s</name><operator pos:start="215:54" pos:end="215:55">-&gt;</operator><name pos:start="215:56" pos:end="215:62">sh_info</name></name> <operator pos:start="215:64" pos:end="215:64">+</operator>

                               <sizeof pos:start="217:32" pos:end="217:49">sizeof<argument_list pos:start="217:38" pos:end="217:49">(<argument pos:start="217:39" pos:end="217:48"><expr pos:start="217:39" pos:end="217:48"><name pos:start="217:39" pos:end="217:48">Elf64_Shdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="217:51" pos:end="217:51">+</operator> <name pos:start="217:53" pos:end="217:64"><name pos:start="217:53" pos:end="217:53">s</name><operator pos:start="217:54" pos:end="217:55">-&gt;</operator><name pos:start="217:56" pos:end="217:64">note_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="219:11" pos:end="225:9">else <block pos:start="219:16" pos:end="225:9">{<block_content pos:start="221:13" pos:end="223:79">

            <expr_stmt pos:start="221:13" pos:end="223:79"><expr pos:start="221:13" pos:end="223:78"><name pos:start="221:13" pos:end="221:28"><name pos:start="221:13" pos:end="221:13">s</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:28">memory_offset</name></name> <operator pos:start="221:30" pos:end="221:30">=</operator> <sizeof pos:start="221:32" pos:end="221:49">sizeof<argument_list pos:start="221:38" pos:end="221:49">(<argument pos:start="221:39" pos:end="221:48"><expr pos:start="221:39" pos:end="221:48"><name pos:start="221:39" pos:end="221:48">Elf64_Ehdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="221:51" pos:end="221:51">+</operator>

                               <sizeof pos:start="223:32" pos:end="223:49">sizeof<argument_list pos:start="223:38" pos:end="223:49">(<argument pos:start="223:39" pos:end="223:48"><expr pos:start="223:39" pos:end="223:48"><name pos:start="223:39" pos:end="223:48">Elf64_Phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="223:51" pos:end="223:51">*</operator> <name pos:start="223:53" pos:end="223:63"><name pos:start="223:53" pos:end="223:53">s</name><operator pos:start="223:54" pos:end="223:55">-&gt;</operator><name pos:start="223:56" pos:end="223:63">phdr_num</name></name> <operator pos:start="223:65" pos:end="223:65">+</operator> <name pos:start="223:67" pos:end="223:78"><name pos:start="223:67" pos:end="223:67">s</name><operator pos:start="223:68" pos:end="223:69">-&gt;</operator><name pos:start="223:70" pos:end="223:78">note_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="227:7" pos:end="245:5">else <block pos:start="227:12" pos:end="245:5">{<block_content pos:start="229:9" pos:end="243:9">

        <if_stmt pos:start="229:9" pos:end="243:9"><if pos:start="229:9" pos:end="237:9">if <condition pos:start="229:12" pos:end="229:28">(<expr pos:start="229:13" pos:end="229:27"><name pos:start="229:13" pos:end="229:27"><name pos:start="229:13" pos:end="229:13">s</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:27">have_section</name></name></expr>)</condition> <block pos:start="229:30" pos:end="237:9">{<block_content pos:start="231:13" pos:end="235:65">

            <expr_stmt pos:start="231:13" pos:end="235:65"><expr pos:start="231:13" pos:end="235:64"><name pos:start="231:13" pos:end="231:28"><name pos:start="231:13" pos:end="231:13">s</name><operator pos:start="231:14" pos:end="231:15">-&gt;</operator><name pos:start="231:16" pos:end="231:28">memory_offset</name></name> <operator pos:start="231:30" pos:end="231:30">=</operator> <sizeof pos:start="231:32" pos:end="231:49">sizeof<argument_list pos:start="231:38" pos:end="231:49">(<argument pos:start="231:39" pos:end="231:48"><expr pos:start="231:39" pos:end="231:48"><name pos:start="231:39" pos:end="231:48">Elf32_Ehdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="231:51" pos:end="231:51">+</operator>

                               <sizeof pos:start="233:32" pos:end="233:49">sizeof<argument_list pos:start="233:38" pos:end="233:49">(<argument pos:start="233:39" pos:end="233:48"><expr pos:start="233:39" pos:end="233:48"><name pos:start="233:39" pos:end="233:48">Elf32_Phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="233:51" pos:end="233:51">*</operator> <name pos:start="233:53" pos:end="233:62"><name pos:start="233:53" pos:end="233:53">s</name><operator pos:start="233:54" pos:end="233:55">-&gt;</operator><name pos:start="233:56" pos:end="233:62">sh_info</name></name> <operator pos:start="233:64" pos:end="233:64">+</operator>

                               <sizeof pos:start="235:32" pos:end="235:49">sizeof<argument_list pos:start="235:38" pos:end="235:49">(<argument pos:start="235:39" pos:end="235:48"><expr pos:start="235:39" pos:end="235:48"><name pos:start="235:39" pos:end="235:48">Elf32_Shdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="235:51" pos:end="235:51">+</operator> <name pos:start="235:53" pos:end="235:64"><name pos:start="235:53" pos:end="235:53">s</name><operator pos:start="235:54" pos:end="235:55">-&gt;</operator><name pos:start="235:56" pos:end="235:64">note_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="237:11" pos:end="243:9">else <block pos:start="237:16" pos:end="243:9">{<block_content pos:start="239:13" pos:end="241:79">

            <expr_stmt pos:start="239:13" pos:end="241:79"><expr pos:start="239:13" pos:end="241:78"><name pos:start="239:13" pos:end="239:28"><name pos:start="239:13" pos:end="239:13">s</name><operator pos:start="239:14" pos:end="239:15">-&gt;</operator><name pos:start="239:16" pos:end="239:28">memory_offset</name></name> <operator pos:start="239:30" pos:end="239:30">=</operator> <sizeof pos:start="239:32" pos:end="239:49">sizeof<argument_list pos:start="239:38" pos:end="239:49">(<argument pos:start="239:39" pos:end="239:48"><expr pos:start="239:39" pos:end="239:48"><name pos:start="239:39" pos:end="239:48">Elf32_Ehdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="239:51" pos:end="239:51">+</operator>

                               <sizeof pos:start="241:32" pos:end="241:49">sizeof<argument_list pos:start="241:38" pos:end="241:49">(<argument pos:start="241:39" pos:end="241:48"><expr pos:start="241:39" pos:end="241:48"><name pos:start="241:39" pos:end="241:48">Elf32_Phdr</name></expr></argument>)</argument_list></sizeof> <operator pos:start="241:51" pos:end="241:51">*</operator> <name pos:start="241:53" pos:end="241:63"><name pos:start="241:53" pos:end="241:53">s</name><operator pos:start="241:54" pos:end="241:55">-&gt;</operator><name pos:start="241:56" pos:end="241:63">phdr_num</name></name> <operator pos:start="241:65" pos:end="241:65">+</operator> <name pos:start="241:67" pos:end="241:78"><name pos:start="241:67" pos:end="241:67">s</name><operator pos:start="241:68" pos:end="241:69">-&gt;</operator><name pos:start="241:70" pos:end="241:78">note_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="249:5" pos:end="249:13">return <expr pos:start="249:12" pos:end="249:12"><literal type="number" pos:start="249:12" pos:end="249:12">0</literal></expr>;</return>



<label pos:start="253:1" pos:end="253:8"><name pos:start="253:1" pos:end="253:7">cleanup</name>:</label>

    <expr_stmt pos:start="255:5" pos:end="255:50"><expr pos:start="255:5" pos:end="255:49"><call pos:start="255:5" pos:end="255:49"><name pos:start="255:5" pos:end="255:26">guest_phys_blocks_free</name><argument_list pos:start="255:27" pos:end="255:49">(<argument pos:start="255:28" pos:end="255:48"><expr pos:start="255:28" pos:end="255:48"><operator pos:start="255:28" pos:end="255:28">&amp;</operator><name pos:start="255:29" pos:end="255:48"><name pos:start="255:29" pos:end="255:29">s</name><operator pos:start="255:30" pos:end="255:31">-&gt;</operator><name pos:start="255:32" pos:end="255:48">guest_phys_blocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="259:5" pos:end="263:5"><if pos:start="259:5" pos:end="263:5">if <condition pos:start="259:8" pos:end="259:18">(<expr pos:start="259:9" pos:end="259:17"><name pos:start="259:9" pos:end="259:17"><name pos:start="259:9" pos:end="259:9">s</name><operator pos:start="259:10" pos:end="259:11">-&gt;</operator><name pos:start="259:12" pos:end="259:17">resume</name></name></expr>)</condition> <block pos:start="259:20" pos:end="263:5">{<block_content pos:start="261:9" pos:end="261:19">

        <expr_stmt pos:start="261:9" pos:end="261:19"><expr pos:start="261:9" pos:end="261:18"><call pos:start="261:9" pos:end="261:18"><name pos:start="261:9" pos:end="261:16">vm_start</name><argument_list pos:start="261:17" pos:end="261:18">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="267:5" pos:end="267:14">return <expr pos:start="267:12" pos:end="267:13"><operator pos:start="267:12" pos:end="267:12">-</operator><literal type="number" pos:start="267:13" pos:end="267:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
