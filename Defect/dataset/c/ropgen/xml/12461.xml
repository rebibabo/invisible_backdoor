<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12461.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">av_write_frame</name><parameter_list pos:start="1:19" pos:end="3:28">(<parameter pos:start="1:20" pos:end="1:37"><decl pos:start="1:20" pos:end="1:37"><type pos:start="1:20" pos:end="1:37"><name pos:start="1:20" pos:end="1:34">AVFormatContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:55"><decl pos:start="1:40" pos:end="1:55"><type pos:start="1:40" pos:end="1:55"><name pos:start="1:40" pos:end="1:42">int</name></type> <name pos:start="1:44" pos:end="1:55">stream_index</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:75"><decl pos:start="1:58" pos:end="1:75"><type pos:start="1:58" pos:end="1:75"><specifier pos:start="1:58" pos:end="1:62">const</specifier> <name pos:start="1:64" pos:end="1:70">uint8_t</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:75">buf</name></decl></parameter>, 

                   <parameter pos:start="3:20" pos:end="3:27"><decl pos:start="3:20" pos:end="3:27"><type pos:start="3:20" pos:end="3:27"><name pos:start="3:20" pos:end="3:22">int</name></type> <name pos:start="3:24" pos:end="3:27">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="71:1">{<block_content pos:start="7:5" pos:end="69:15">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">AVStream</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:20">pts_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:23">frame_size</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:34"><expr pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:6">st</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <name pos:start="15:10" pos:end="15:33"><name pos:start="15:10" pos:end="15:10">s</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:19">streams</name><index pos:start="15:20" pos:end="15:33">[<expr pos:start="15:21" pos:end="15:32"><name pos:start="15:21" pos:end="15:32">stream_index</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:45"><expr pos:start="17:5" pos:end="17:44"><name pos:start="17:5" pos:end="17:12">pts_mask</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <operator pos:start="17:16" pos:end="17:16">(</operator><literal type="number" pos:start="17:17" pos:end="17:19">1LL</literal> <operator pos:start="17:21" pos:end="17:22">&lt;&lt;</operator> <name pos:start="17:24" pos:end="17:39"><name pos:start="17:24" pos:end="17:24">s</name><operator pos:start="17:25" pos:end="17:26">-&gt;</operator><name pos:start="17:27" pos:end="17:39">pts_wrap_bits</name></name><operator pos:start="17:40" pos:end="17:40">)</operator> <operator pos:start="17:42" pos:end="17:42">-</operator> <literal type="number" pos:start="17:44" pos:end="17:44">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="21:59"><expr pos:start="19:5" pos:end="21:58"><name pos:start="19:5" pos:end="19:7">ret</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="21:58"><name pos:start="19:11" pos:end="19:34"><name pos:start="19:11" pos:end="19:11">s</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:20">oformat</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:34">write_packet</name></name><argument_list pos:start="19:35" pos:end="21:58">(<argument pos:start="19:36" pos:end="19:36"><expr pos:start="19:36" pos:end="19:36"><name pos:start="19:36" pos:end="19:36">s</name></expr></argument>, <argument pos:start="19:39" pos:end="19:50"><expr pos:start="19:39" pos:end="19:50"><name pos:start="19:39" pos:end="19:50">stream_index</name></expr></argument>, <argument pos:start="19:53" pos:end="19:55"><expr pos:start="19:53" pos:end="19:55"><name pos:start="19:53" pos:end="19:55">buf</name></expr></argument>, <argument pos:start="19:58" pos:end="19:61"><expr pos:start="19:58" pos:end="19:61"><name pos:start="19:58" pos:end="19:61">size</name></expr></argument>, 

                                   <argument pos:start="21:36" pos:end="21:57"><expr pos:start="21:36" pos:end="21:57"><name pos:start="21:36" pos:end="21:46"><name pos:start="21:36" pos:end="21:37">st</name><operator pos:start="21:38" pos:end="21:39">-&gt;</operator><name pos:start="21:40" pos:end="21:42">pts</name><operator pos:start="21:43" pos:end="21:43">.</operator><name pos:start="21:44" pos:end="21:46">val</name></name> <operator pos:start="21:48" pos:end="21:48">&amp;</operator> <name pos:start="21:50" pos:end="21:57">pts_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="25:19"><if pos:start="23:5" pos:end="25:19">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">&lt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:19"><block_content pos:start="25:9" pos:end="25:19">

        <return pos:start="25:9" pos:end="25:19">return <expr pos:start="25:16" pos:end="25:18"><name pos:start="25:16" pos:end="25:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:20">/* update pts */</comment>

    <switch pos:start="31:5" pos:end="67:5">switch <condition pos:start="31:12" pos:end="31:33">(<expr pos:start="31:13" pos:end="31:32"><name pos:start="31:13" pos:end="31:32"><name pos:start="31:13" pos:end="31:14">st</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:21">codec</name><operator pos:start="31:22" pos:end="31:22">.</operator><name pos:start="31:23" pos:end="31:32">codec_type</name></name></expr>)</condition> <block pos:start="31:35" pos:end="67:5">{<block_content pos:start="33:5" pos:end="65:14">

    <case pos:start="33:5" pos:end="33:26">case <expr pos:start="33:10" pos:end="33:25"><name pos:start="33:10" pos:end="33:25">CODEC_TYPE_AUDIO</name></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:60"><expr pos:start="35:9" pos:end="35:59"><name pos:start="35:9" pos:end="35:18">frame_size</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <call pos:start="35:22" pos:end="35:59"><name pos:start="35:22" pos:end="35:41">get_audio_frame_size</name><argument_list pos:start="35:42" pos:end="35:59">(<argument pos:start="35:43" pos:end="35:52"><expr pos:start="35:43" pos:end="35:52"><operator pos:start="35:43" pos:end="35:43">&amp;</operator><name pos:start="35:44" pos:end="35:52"><name pos:start="35:44" pos:end="35:45">st</name><operator pos:start="35:46" pos:end="35:47">-&gt;</operator><name pos:start="35:48" pos:end="35:52">codec</name></name></expr></argument>, <argument pos:start="35:55" pos:end="35:58"><expr pos:start="35:55" pos:end="35:58"><name pos:start="35:55" pos:end="35:58">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="39:9" pos:end="41:83">/* note, we skip the initial 0-size packets as they are most likely equal to the encoder delay,

           but it would be better if we had the real timestamps from the encoder */</comment>

<comment type="line" pos:start="43:1" pos:end="43:84">//        av_log(s, AV_LOG_DEBUG, "%d %lld %lld\n", size, st-&gt;pts.num, st-&gt;pts.val);</comment>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:84">(<expr pos:start="45:13" pos:end="45:83"><name pos:start="45:13" pos:end="45:22">frame_size</name> <operator pos:start="45:24" pos:end="45:25">&gt;=</operator> <literal type="number" pos:start="45:27" pos:end="45:27">0</literal> <operator pos:start="45:29" pos:end="45:30">&amp;&amp;</operator> <operator pos:start="45:32" pos:end="45:32">(</operator><name pos:start="45:33" pos:end="45:36">size</name> <operator pos:start="45:38" pos:end="45:39">||</operator> <name pos:start="45:41" pos:end="45:51"><name pos:start="45:41" pos:end="45:42">st</name><operator pos:start="45:43" pos:end="45:44">-&gt;</operator><name pos:start="45:45" pos:end="45:47">pts</name><operator pos:start="45:48" pos:end="45:48">.</operator><name pos:start="45:49" pos:end="45:51">num</name></name><operator pos:start="45:52" pos:end="45:53">!=</operator><name pos:start="45:54" pos:end="45:64"><name pos:start="45:54" pos:end="45:55">st</name><operator pos:start="45:56" pos:end="45:57">-&gt;</operator><name pos:start="45:58" pos:end="45:60">pts</name><operator pos:start="45:61" pos:end="45:61">.</operator><name pos:start="45:62" pos:end="45:64">den</name></name><operator pos:start="45:65" pos:end="45:66">&gt;&gt;</operator><literal type="number" pos:start="45:67" pos:end="45:67">1</literal> <operator pos:start="45:69" pos:end="45:70">||</operator> <name pos:start="45:72" pos:end="45:82"><name pos:start="45:72" pos:end="45:73">st</name><operator pos:start="45:74" pos:end="45:75">-&gt;</operator><name pos:start="45:76" pos:end="45:78">pts</name><operator pos:start="45:79" pos:end="45:79">.</operator><name pos:start="45:80" pos:end="45:82">val</name></name><operator pos:start="45:83" pos:end="45:83">)</operator></expr>)</condition> <block pos:start="45:86" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:58">

            <expr_stmt pos:start="47:13" pos:end="49:58"><expr pos:start="47:13" pos:end="49:57"><call pos:start="47:13" pos:end="49:57"><name pos:start="47:13" pos:end="47:23">av_frac_add</name><argument_list pos:start="47:24" pos:end="49:57">(<argument pos:start="47:25" pos:end="47:32"><expr pos:start="47:25" pos:end="47:32"><operator pos:start="47:25" pos:end="47:25">&amp;</operator><name pos:start="47:26" pos:end="47:32"><name pos:start="47:26" pos:end="47:27">st</name><operator pos:start="47:28" pos:end="47:29">-&gt;</operator><name pos:start="47:30" pos:end="47:32">pts</name></name></expr></argument>, 

                        <argument pos:start="49:25" pos:end="49:56"><expr pos:start="49:25" pos:end="49:56"><operator pos:start="49:25" pos:end="49:25">(</operator><name pos:start="49:26" pos:end="49:32">int64_t</name><operator pos:start="49:33" pos:end="49:33">)</operator><name pos:start="49:34" pos:end="49:43"><name pos:start="49:34" pos:end="49:34">s</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:43">pts_den</name></name> <operator pos:start="49:45" pos:end="49:45">*</operator> <name pos:start="49:47" pos:end="49:56">frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="53:9" pos:end="53:14">break;</break>

    <case pos:start="55:5" pos:end="55:26">case <expr pos:start="55:10" pos:end="55:25"><name pos:start="55:10" pos:end="55:25">CODEC_TYPE_VIDEO</name></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="59:69"><expr pos:start="57:9" pos:end="59:68"><call pos:start="57:9" pos:end="59:68"><name pos:start="57:9" pos:end="57:19">av_frac_add</name><argument_list pos:start="57:20" pos:end="59:68">(<argument pos:start="57:21" pos:end="57:28"><expr pos:start="57:21" pos:end="57:28"><operator pos:start="57:21" pos:end="57:21">&amp;</operator><name pos:start="57:22" pos:end="57:28"><name pos:start="57:22" pos:end="57:23">st</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:28">pts</name></name></expr></argument>, 

                    <argument pos:start="59:21" pos:end="59:67"><expr pos:start="59:21" pos:end="59:67"><operator pos:start="59:21" pos:end="59:21">(</operator><name pos:start="59:22" pos:end="59:28">int64_t</name><operator pos:start="59:29" pos:end="59:29">)</operator><name pos:start="59:30" pos:end="59:39"><name pos:start="59:30" pos:end="59:30">s</name><operator pos:start="59:31" pos:end="59:32">-&gt;</operator><name pos:start="59:33" pos:end="59:39">pts_den</name></name> <operator pos:start="59:41" pos:end="59:41">*</operator> <name pos:start="59:43" pos:end="59:67"><name pos:start="59:43" pos:end="59:44">st</name><operator pos:start="59:45" pos:end="59:46">-&gt;</operator><name pos:start="59:47" pos:end="59:51">codec</name><operator pos:start="59:52" pos:end="59:52">.</operator><name pos:start="59:53" pos:end="59:67">frame_rate_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="61:9" pos:end="61:14">break;</break>

    <default pos:start="63:5" pos:end="63:12">default:</default>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="69:5" pos:end="69:15">return <expr pos:start="69:12" pos:end="69:14"><name pos:start="69:12" pos:end="69:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
