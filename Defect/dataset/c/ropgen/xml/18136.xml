<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18136.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:70"><name pos:start="1:1" pos:end="1:12">create_iovec</name><argument_list pos:start="1:13" pos:end="1:70">(<argument pos:start="1:14" pos:end="1:31">QEMUIOVector *qiov</argument>, <argument pos:start="1:34" pos:end="1:44">char **argv</argument>, <argument pos:start="1:47" pos:end="1:56">int nr_iov</argument>, <argument pos:start="1:59" pos:end="1:69">int pattern</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:15">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:10">size_t</name> <modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:17">sizes</name> <init pos:start="5:19" pos:end="5:50">= <expr pos:start="5:21" pos:end="5:50"><call pos:start="5:21" pos:end="5:50"><name pos:start="5:21" pos:end="5:26">calloc</name><argument_list pos:start="5:27" pos:end="5:50">(<argument pos:start="5:28" pos:end="5:33"><expr pos:start="5:28" pos:end="5:33"><name pos:start="5:28" pos:end="5:33">nr_iov</name></expr></argument>, <argument pos:start="5:36" pos:end="5:49"><expr pos:start="5:36" pos:end="5:49"><sizeof pos:start="5:36" pos:end="5:49">sizeof<argument_list pos:start="5:42" pos:end="5:49">(<argument pos:start="5:43" pos:end="5:48"><expr pos:start="5:43" pos:end="5:48"><name pos:start="5:43" pos:end="5:48">size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">size_t</name></type> <name pos:start="7:12" pos:end="7:16">count</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">void</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">buf</name> <init pos:start="9:15" pos:end="9:20">= <expr pos:start="9:17" pos:end="9:20"><name pos:start="9:17" pos:end="9:20">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:11">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="65:5">for <control pos:start="17:9" pos:end="17:32">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:27"><expr pos:start="17:17" pos:end="17:26"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <name pos:start="17:21" pos:end="17:26">nr_iov</name></expr>;</condition> <incr pos:start="17:29" pos:end="17:31"><expr pos:start="17:29" pos:end="17:31"><name pos:start="17:29" pos:end="17:29">i</name><operator pos:start="17:30" pos:end="17:31">++</operator></expr></incr>)</control> <block pos:start="17:34" pos:end="65:5">{<block_content pos:start="19:9" pos:end="63:21">

        <decl_stmt pos:start="19:9" pos:end="19:28"><decl pos:start="19:9" pos:end="19:27"><type pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:12">char</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:17">arg</name> <init pos:start="19:19" pos:end="19:27">= <expr pos:start="19:21" pos:end="19:27"><name pos:start="19:21" pos:end="19:27"><name pos:start="19:21" pos:end="19:24">argv</name><index pos:start="19:25" pos:end="19:27">[<expr pos:start="19:26" pos:end="19:26"><name pos:start="19:26" pos:end="19:26">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:20"><decl pos:start="21:9" pos:end="21:19"><type pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:15">int64_t</name></type> <name pos:start="21:17" pos:end="21:19">len</name></decl>;</decl_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:26"><expr pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:11">len</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:25"><name pos:start="25:15" pos:end="25:20">cvtnum</name><argument_list pos:start="25:21" pos:end="25:25">(<argument pos:start="25:22" pos:end="25:24"><expr pos:start="25:22" pos:end="25:24"><name pos:start="25:22" pos:end="25:24">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="33:9"><if pos:start="27:9" pos:end="33:9">if <condition pos:start="27:12" pos:end="27:20">(<expr pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:15">len</name> <operator pos:start="27:17" pos:end="27:17">&lt;</operator> <literal type="number" pos:start="27:19" pos:end="27:19">0</literal></expr>)</condition> <block pos:start="27:22" pos:end="33:9">{<block_content pos:start="29:13" pos:end="31:22">

            <expr_stmt pos:start="29:13" pos:end="29:63"><expr pos:start="29:13" pos:end="29:62"><call pos:start="29:13" pos:end="29:62"><name pos:start="29:13" pos:end="29:18">printf</name><argument_list pos:start="29:19" pos:end="29:62">(<argument pos:start="29:20" pos:end="29:56"><expr pos:start="29:20" pos:end="29:56"><literal type="string" pos:start="29:20" pos:end="29:56">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="29:59" pos:end="29:61"><expr pos:start="29:59" pos:end="29:61"><name pos:start="29:59" pos:end="29:61">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="31:13" pos:end="31:22">goto <name pos:start="31:18" pos:end="31:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="37:9" pos:end="37:58">/* should be SIZE_T_MAX, but that doesn't exist */</comment>

        <if_stmt pos:start="39:9" pos:end="45:9"><if pos:start="39:9" pos:end="45:9">if <condition pos:start="39:12" pos:end="39:26">(<expr pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:15">len</name> <operator pos:start="39:17" pos:end="39:17">&gt;</operator> <name pos:start="39:19" pos:end="39:25">INT_MAX</name></expr>)</condition> <block pos:start="39:28" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:22">

            <expr_stmt pos:start="41:13" pos:end="41:61"><expr pos:start="41:13" pos:end="41:60"><call pos:start="41:13" pos:end="41:60"><name pos:start="41:13" pos:end="41:18">printf</name><argument_list pos:start="41:19" pos:end="41:60">(<argument pos:start="41:20" pos:end="41:54"><expr pos:start="41:20" pos:end="41:54"><literal type="string" pos:start="41:20" pos:end="41:54">"too large length argument -- %s\n"</literal></expr></argument>, <argument pos:start="41:57" pos:end="41:59"><expr pos:start="41:57" pos:end="41:59"><name pos:start="41:57" pos:end="41:59">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="43:13" pos:end="43:22">goto <name pos:start="43:18" pos:end="43:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:24">(<expr pos:start="49:13" pos:end="49:23"><name pos:start="49:13" pos:end="49:15">len</name> <operator pos:start="49:17" pos:end="49:17">&amp;</operator> <literal type="number" pos:start="49:19" pos:end="49:23">0x1ff</literal></expr>)</condition> <block pos:start="49:26" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:22">

            <expr_stmt pos:start="51:13" pos:end="53:52"><expr pos:start="51:13" pos:end="53:51"><call pos:start="51:13" pos:end="53:51"><name pos:start="51:13" pos:end="51:18">printf</name><argument_list pos:start="51:19" pos:end="53:51">(<argument pos:start="51:20" pos:end="53:45"><expr pos:start="51:20" pos:end="53:45"><literal type="string" pos:start="51:20" pos:end="51:38">"length argument %"</literal> <name pos:start="51:40" pos:end="51:45">PRId64</name>

                   <literal type="string" pos:start="53:20" pos:end="53:45">" is not sector aligned\n"</literal></expr></argument>, <argument pos:start="53:48" pos:end="53:50"><expr pos:start="53:48" pos:end="53:50"><name pos:start="53:48" pos:end="53:50">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="55:13" pos:end="55:22">goto <name pos:start="55:18" pos:end="55:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:23"><expr pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:13">sizes</name><index pos:start="61:14" pos:end="61:16">[<expr pos:start="61:15" pos:end="61:15"><name pos:start="61:15" pos:end="61:15">i</name></expr>]</index></name> <operator pos:start="61:18" pos:end="61:18">=</operator> <name pos:start="61:20" pos:end="61:22">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:21"><expr pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:13">count</name> <operator pos:start="63:15" pos:end="63:16">+=</operator> <name pos:start="63:18" pos:end="63:20">len</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="69:5" pos:end="69:34"><expr pos:start="69:5" pos:end="69:33"><call pos:start="69:5" pos:end="69:33"><name pos:start="69:5" pos:end="69:19">qemu_iovec_init</name><argument_list pos:start="69:20" pos:end="69:33">(<argument pos:start="69:21" pos:end="69:24"><expr pos:start="69:21" pos:end="69:24"><name pos:start="69:21" pos:end="69:24">qiov</name></expr></argument>, <argument pos:start="69:27" pos:end="69:32"><expr pos:start="69:27" pos:end="69:32"><name pos:start="69:27" pos:end="69:32">nr_iov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:44"><expr pos:start="73:5" pos:end="73:43"><name pos:start="73:5" pos:end="73:7">buf</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <name pos:start="73:11" pos:end="73:11">p</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <call pos:start="73:15" pos:end="73:43"><name pos:start="73:15" pos:end="73:27">qemu_io_alloc</name><argument_list pos:start="73:28" pos:end="73:43">(<argument pos:start="73:29" pos:end="73:33"><expr pos:start="73:29" pos:end="73:33"><name pos:start="73:29" pos:end="73:33">count</name></expr></argument>, <argument pos:start="73:36" pos:end="73:42"><expr pos:start="73:36" pos:end="73:42"><name pos:start="73:36" pos:end="73:42">pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="77:5" pos:end="83:5">for <control pos:start="77:9" pos:end="77:32">(<init pos:start="77:10" pos:end="77:15"><expr pos:start="77:10" pos:end="77:14"><name pos:start="77:10" pos:end="77:10">i</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>;</init> <condition pos:start="77:17" pos:end="77:27"><expr pos:start="77:17" pos:end="77:26"><name pos:start="77:17" pos:end="77:17">i</name> <operator pos:start="77:19" pos:end="77:19">&lt;</operator> <name pos:start="77:21" pos:end="77:26">nr_iov</name></expr>;</condition> <incr pos:start="77:29" pos:end="77:31"><expr pos:start="77:29" pos:end="77:31"><name pos:start="77:29" pos:end="77:29">i</name><operator pos:start="77:30" pos:end="77:31">++</operator></expr></incr>)</control> <block pos:start="77:34" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:22">

        <expr_stmt pos:start="79:9" pos:end="79:42"><expr pos:start="79:9" pos:end="79:41"><call pos:start="79:9" pos:end="79:41"><name pos:start="79:9" pos:end="79:22">qemu_iovec_add</name><argument_list pos:start="79:23" pos:end="79:41">(<argument pos:start="79:24" pos:end="79:27"><expr pos:start="79:24" pos:end="79:27"><name pos:start="79:24" pos:end="79:27">qiov</name></expr></argument>, <argument pos:start="79:30" pos:end="79:30"><expr pos:start="79:30" pos:end="79:30"><name pos:start="79:30" pos:end="79:30">p</name></expr></argument>, <argument pos:start="79:33" pos:end="79:40"><expr pos:start="79:33" pos:end="79:40"><name pos:start="79:33" pos:end="79:40"><name pos:start="79:33" pos:end="79:37">sizes</name><index pos:start="79:38" pos:end="79:40">[<expr pos:start="79:39" pos:end="79:39"><name pos:start="79:39" pos:end="79:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:22"><expr pos:start="81:9" pos:end="81:21"><name pos:start="81:9" pos:end="81:9">p</name> <operator pos:start="81:11" pos:end="81:12">+=</operator> <name pos:start="81:14" pos:end="81:21"><name pos:start="81:14" pos:end="81:18">sizes</name><index pos:start="81:19" pos:end="81:21">[<expr pos:start="81:20" pos:end="81:20"><name pos:start="81:20" pos:end="81:20">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



<label pos:start="87:1" pos:end="87:5"><name pos:start="87:1" pos:end="87:4">fail</name>:</label>

    <expr_stmt pos:start="89:5" pos:end="89:16"><expr pos:start="89:5" pos:end="89:15"><call pos:start="89:5" pos:end="89:15"><name pos:start="89:5" pos:end="89:8">free</name><argument_list pos:start="89:9" pos:end="89:15">(<argument pos:start="89:10" pos:end="89:14"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:14">sizes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="91:5" pos:end="91:15">return <expr pos:start="91:12" pos:end="91:14"><name pos:start="91:12" pos:end="91:14">buf</name></expr>;</return>

</block_content>}</block>
</unit>
