<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6996.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:38">svq1_decode_block_non_intra</name><parameter_list pos:start="1:39" pos:end="3:49">(<parameter pos:start="1:40" pos:end="1:60"><decl pos:start="1:40" pos:end="1:60"><type pos:start="1:40" pos:end="1:60"><name pos:start="1:40" pos:end="1:52">GetBitContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:60">bitbuf</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:77"><decl pos:start="1:63" pos:end="1:77"><type pos:start="1:63" pos:end="1:77"><name pos:start="1:63" pos:end="1:69">uint8_t</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:77">pixels</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:48"><decl pos:start="3:40" pos:end="3:48"><type pos:start="3:40" pos:end="3:48"><name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:48">pitch</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="113:1">{<block_content pos:start="7:5" pos:end="111:13">

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:22">bit_cache</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:21"><name pos:start="9:14" pos:end="9:17">list</name><index pos:start="9:18" pos:end="9:21">[<expr pos:start="9:19" pos:end="9:20"><literal type="number" pos:start="9:19" pos:end="9:20">63</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint32_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:20"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:18">uint32_t</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:28">codebook</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:15">entries</name><index pos:start="15:16" pos:end="15:18">[<expr pos:start="15:17" pos:end="15:17"><literal type="number" pos:start="15:17" pos:end="15:17">6</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:12"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:12">j</name></decl>, <decl pos:start="17:15" pos:end="17:15"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:15" pos:end="17:15">m</name></decl>, <decl pos:start="17:18" pos:end="17:18"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:18" pos:end="17:18">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:12"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:12">mean</name></decl>, <decl pos:start="19:15" pos:end="19:20"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:15" pos:end="19:20">stages</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:35"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">x</name></decl>, <decl pos:start="21:12" pos:end="21:12"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:12">y</name></decl>, <decl pos:start="21:15" pos:end="21:19"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:15" pos:end="21:19">width</name></decl>, <decl pos:start="21:22" pos:end="21:27"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:22" pos:end="21:27">height</name></decl>, <decl pos:start="21:30" pos:end="21:34"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:30" pos:end="21:34">level</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">uint32_t</name></type> <name pos:start="23:14" pos:end="23:15">n1</name></decl>, <decl pos:start="23:18" pos:end="23:19"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:18" pos:end="23:19">n2</name></decl>, <decl pos:start="23:22" pos:end="23:23"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:22" pos:end="23:23">n3</name></decl>, <decl pos:start="23:26" pos:end="23:27"><type ref="prev" pos:start="23:5" pos:end="23:12"/><name pos:start="23:26" pos:end="23:27">n4</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:65">/* initialize list for breadth first processing of vectors */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:21"><expr pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:8">list</name><index pos:start="29:9" pos:end="29:11">[<expr pos:start="29:10" pos:end="29:10"><literal type="number" pos:start="29:10" pos:end="29:10">0</literal></expr>]</index></name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:20">pixels</name></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:36">/* recursively process vector */</comment>

    <for pos:start="35:5" pos:end="109:5">for <control pos:start="35:9" pos:end="35:52">(<init pos:start="35:10" pos:end="35:40"><expr pos:start="35:10" pos:end="35:14"><name pos:start="35:10" pos:end="35:10">i</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr><operator pos:start="35:15" pos:end="35:15">,</operator> <expr pos:start="35:17" pos:end="35:21"><name pos:start="35:17" pos:end="35:17">m</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <literal type="number" pos:start="35:21" pos:end="35:21">1</literal></expr><operator pos:start="35:22" pos:end="35:22">,</operator> <expr pos:start="35:24" pos:end="35:28"><name pos:start="35:24" pos:end="35:24">n</name> <operator pos:start="35:26" pos:end="35:26">=</operator> <literal type="number" pos:start="35:28" pos:end="35:28">1</literal></expr><operator pos:start="35:29" pos:end="35:29">,</operator> <expr pos:start="35:31" pos:end="35:39"><name pos:start="35:31" pos:end="35:35">level</name> <operator pos:start="35:37" pos:end="35:37">=</operator> <literal type="number" pos:start="35:39" pos:end="35:39">5</literal></expr>;</init> <condition pos:start="35:42" pos:end="35:47"><expr pos:start="35:42" pos:end="35:46"><name pos:start="35:42" pos:end="35:42">i</name> <operator pos:start="35:44" pos:end="35:44">&lt;</operator> <name pos:start="35:46" pos:end="35:46">n</name></expr>;</condition> <incr pos:start="35:49" pos:end="35:51"><expr pos:start="35:49" pos:end="35:51"><name pos:start="35:49" pos:end="35:49">i</name><operator pos:start="35:50" pos:end="35:51">++</operator></expr></incr>)</control> <block pos:start="35:54" pos:end="109:5">{<block_content pos:start="37:9" pos:end="107:9">

        <expr_stmt pos:start="37:9" pos:end="37:30"><expr pos:start="37:9" pos:end="37:29"><call pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:27">SVQ1_PROCESS_VECTOR</name><argument_list pos:start="37:28" pos:end="37:29">()</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="41:9" pos:end="41:49">/* destination address and vector size */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:37"><expr pos:start="43:9" pos:end="43:36"><name pos:start="43:9" pos:end="43:11">dst</name>    <operator pos:start="43:16" pos:end="43:16">=</operator> <operator pos:start="43:18" pos:end="43:18">(</operator><name pos:start="43:19" pos:end="43:26">uint32_t</name> <operator pos:start="43:28" pos:end="43:28">*</operator><operator pos:start="43:29" pos:end="43:29">)</operator><name pos:start="43:30" pos:end="43:36"><name pos:start="43:30" pos:end="43:33">list</name><index pos:start="43:34" pos:end="43:36">[<expr pos:start="43:35" pos:end="43:35"><name pos:start="43:35" pos:end="43:35">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:40"><expr pos:start="45:9" pos:end="45:39"><name pos:start="45:9" pos:end="45:13">width</name>  <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">1</literal> <operator pos:start="45:20" pos:end="45:21">&lt;&lt;</operator> <operator pos:start="45:23" pos:end="45:23">(</operator><operator pos:start="45:24" pos:end="45:24">(</operator><literal type="number" pos:start="45:25" pos:end="45:27">4</literal> <operator pos:start="45:27" pos:end="45:27">+</operator> <name pos:start="45:29" pos:end="45:33">level</name><operator pos:start="45:34" pos:end="45:34">)</operator> <operator pos:start="45:36" pos:end="45:36">/</operator> <literal type="number" pos:start="45:38" pos:end="45:38">2</literal><operator pos:start="45:39" pos:end="45:39">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:40"><expr pos:start="47:9" pos:end="47:39"><name pos:start="47:9" pos:end="47:14">height</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:18">1</literal> <operator pos:start="47:20" pos:end="47:21">&lt;&lt;</operator> <operator pos:start="47:23" pos:end="47:23">(</operator><operator pos:start="47:24" pos:end="47:24">(</operator><literal type="number" pos:start="47:25" pos:end="47:27">3</literal> <operator pos:start="47:27" pos:end="47:27">+</operator> <name pos:start="47:29" pos:end="47:33">level</name><operator pos:start="47:34" pos:end="47:34">)</operator> <operator pos:start="47:36" pos:end="47:36">/</operator> <literal type="number" pos:start="47:38" pos:end="47:38">2</literal><operator pos:start="47:39" pos:end="47:39">)</operator></expr>;</expr_stmt>



        <comment type="block" pos:start="51:9" pos:end="51:69">/* get number of stages (-1 skips vector, 0 for mean only) */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:80"><expr pos:start="53:9" pos:end="53:79"><name pos:start="53:9" pos:end="53:14">stages</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:75"><name pos:start="53:18" pos:end="53:25">get_vlc2</name><argument_list pos:start="53:26" pos:end="53:75">(<argument pos:start="53:27" pos:end="53:32"><expr pos:start="53:27" pos:end="53:32"><name pos:start="53:27" pos:end="53:32">bitbuf</name></expr></argument>, <argument pos:start="53:35" pos:end="53:68"><expr pos:start="53:35" pos:end="53:68"><name pos:start="53:35" pos:end="53:62"><name pos:start="53:35" pos:end="53:55">svq1_inter_multistage</name><index pos:start="53:56" pos:end="53:62">[<expr pos:start="53:57" pos:end="53:61"><name pos:start="53:57" pos:end="53:61">level</name></expr>]</index></name><operator pos:start="53:63" pos:end="53:63">.</operator><name pos:start="53:64" pos:end="53:68">table</name></expr></argument>, <argument pos:start="53:71" pos:end="53:71"><expr pos:start="53:71" pos:end="53:71"><literal type="number" pos:start="53:71" pos:end="53:71">3</literal></expr></argument>, <argument pos:start="53:74" pos:end="53:74"><expr pos:start="53:74" pos:end="53:74"><literal type="number" pos:start="53:74" pos:end="53:74">2</literal></expr></argument>)</argument_list></call> <operator pos:start="53:77" pos:end="53:77">-</operator> <literal type="number" pos:start="53:79" pos:end="53:79">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="57:9" pos:end="59:21"><if pos:start="57:9" pos:end="59:21">if <condition pos:start="57:12" pos:end="57:25">(<expr pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:18">stages</name> <operator pos:start="57:20" pos:end="57:21">==</operator> <operator pos:start="57:23" pos:end="57:23">-</operator><literal type="number" pos:start="57:24" pos:end="57:24">1</literal></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:21"><block_content pos:start="59:13" pos:end="59:21">

            <continue pos:start="59:13" pos:end="59:21">continue;</continue></block_content></block></if></if_stmt>           <comment type="block" pos:start="59:33" pos:end="59:49">/* skip vector */</comment>



        <if_stmt pos:start="63:9" pos:end="73:9"><if pos:start="63:9" pos:end="73:9">if <condition pos:start="63:12" pos:end="63:41">(<expr pos:start="63:13" pos:end="63:40"><operator pos:start="63:13" pos:end="63:13">(</operator><name pos:start="63:14" pos:end="63:19">stages</name> <operator pos:start="63:21" pos:end="63:21">&gt;</operator> <literal type="number" pos:start="63:23" pos:end="63:23">0</literal><operator pos:start="63:24" pos:end="63:24">)</operator> <operator pos:start="63:26" pos:end="63:27">&amp;&amp;</operator> <operator pos:start="63:29" pos:end="63:29">(</operator><name pos:start="63:30" pos:end="63:34">level</name> <operator pos:start="63:36" pos:end="63:37">&gt;=</operator> <literal type="number" pos:start="63:39" pos:end="63:39">4</literal><operator pos:start="63:40" pos:end="63:40">)</operator></expr>)</condition> <block pos:start="63:43" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:39">

            <expr_stmt pos:start="65:13" pos:end="69:35"><expr pos:start="65:13" pos:end="69:34"><call pos:start="65:13" pos:end="69:34"><name pos:start="65:13" pos:end="65:19">av_dlog</name><argument_list pos:start="65:20" pos:end="69:34">(<argument pos:start="65:21" pos:end="65:24"><expr pos:start="65:21" pos:end="65:24"><name pos:start="65:21" pos:end="65:24">NULL</name></expr></argument>,

                    <argument pos:start="67:21" pos:end="67:95"><expr pos:start="67:21" pos:end="67:95"><literal type="string" pos:start="67:21" pos:end="67:95">"Error (svq1_decode_block_non_intra): invalid vector: stages=%i level=%i\n"</literal></expr></argument>,

                    <argument pos:start="69:21" pos:end="69:26"><expr pos:start="69:21" pos:end="69:26"><name pos:start="69:21" pos:end="69:26">stages</name></expr></argument>, <argument pos:start="69:29" pos:end="69:33"><expr pos:start="69:29" pos:end="69:33"><name pos:start="69:29" pos:end="69:33">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:39">return <expr pos:start="71:20" pos:end="71:38"><name pos:start="71:20" pos:end="71:38">AVERROR_INVALIDDATA</name></expr>;</return>  <comment type="block" pos:start="71:42" pos:end="71:61">/* invalid vector */</comment>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:67"><expr pos:start="77:9" pos:end="77:66"><name pos:start="77:9" pos:end="77:12">mean</name> <operator pos:start="77:14" pos:end="77:14">=</operator> <call pos:start="77:16" pos:end="77:60"><name pos:start="77:16" pos:end="77:23">get_vlc2</name><argument_list pos:start="77:24" pos:end="77:60">(<argument pos:start="77:25" pos:end="77:30"><expr pos:start="77:25" pos:end="77:30"><name pos:start="77:25" pos:end="77:30">bitbuf</name></expr></argument>, <argument pos:start="77:33" pos:end="77:53"><expr pos:start="77:33" pos:end="77:53"><name pos:start="77:33" pos:end="77:53"><name pos:start="77:33" pos:end="77:47">svq1_inter_mean</name><operator pos:start="77:48" pos:end="77:48">.</operator><name pos:start="77:49" pos:end="77:53">table</name></name></expr></argument>, <argument pos:start="77:56" pos:end="77:56"><expr pos:start="77:56" pos:end="77:56"><literal type="number" pos:start="77:56" pos:end="77:56">9</literal></expr></argument>, <argument pos:start="77:59" pos:end="77:59"><expr pos:start="77:59" pos:end="77:59"><literal type="number" pos:start="77:59" pos:end="77:59">3</literal></expr></argument>)</argument_list></call> <operator pos:start="77:62" pos:end="77:62">-</operator> <literal type="number" pos:start="77:64" pos:end="77:66">256</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:60"><expr pos:start="81:9" pos:end="81:59"><call pos:start="81:9" pos:end="81:59"><name pos:start="81:9" pos:end="81:34">SVQ1_CALC_CODEBOOK_ENTRIES</name><argument_list pos:start="81:35" pos:end="81:59">(<argument pos:start="81:36" pos:end="81:58"><expr pos:start="81:36" pos:end="81:58"><name pos:start="81:36" pos:end="81:58">ff_svq1_inter_codebooks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="85:9" pos:end="107:9">for <control pos:start="85:13" pos:end="85:36">(<init pos:start="85:14" pos:end="85:19"><expr pos:start="85:14" pos:end="85:18"><name pos:start="85:14" pos:end="85:14">y</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <literal type="number" pos:start="85:18" pos:end="85:18">0</literal></expr>;</init> <condition pos:start="85:21" pos:end="85:31"><expr pos:start="85:21" pos:end="85:30"><name pos:start="85:21" pos:end="85:21">y</name> <operator pos:start="85:23" pos:end="85:23">&lt;</operator> <name pos:start="85:25" pos:end="85:30">height</name></expr>;</condition> <incr pos:start="85:33" pos:end="85:35"><expr pos:start="85:33" pos:end="85:35"><name pos:start="85:33" pos:end="85:33">y</name><operator pos:start="85:34" pos:end="85:35">++</operator></expr></incr>)</control> <block pos:start="85:38" pos:end="107:9">{<block_content pos:start="87:13" pos:end="105:29">

            <for pos:start="87:13" pos:end="103:13">for <control pos:start="87:17" pos:end="87:55">(<init pos:start="87:18" pos:end="87:23"><expr pos:start="87:18" pos:end="87:22"><name pos:start="87:18" pos:end="87:18">x</name> <operator pos:start="87:20" pos:end="87:20">=</operator> <literal type="number" pos:start="87:22" pos:end="87:22">0</literal></expr>;</init> <condition pos:start="87:25" pos:end="87:38"><expr pos:start="87:25" pos:end="87:37"><name pos:start="87:25" pos:end="87:25">x</name> <operator pos:start="87:27" pos:end="87:27">&lt;</operator> <name pos:start="87:29" pos:end="87:33">width</name> <operator pos:start="87:35" pos:end="87:35">/</operator> <literal type="number" pos:start="87:37" pos:end="87:37">4</literal></expr>;</condition> <incr pos:start="87:40" pos:end="87:54"><expr pos:start="87:40" pos:end="87:42"><name pos:start="87:40" pos:end="87:40">x</name><operator pos:start="87:41" pos:end="87:42">++</operator></expr><operator pos:start="87:43" pos:end="87:43">,</operator> <expr pos:start="87:45" pos:end="87:54"><name pos:start="87:45" pos:end="87:52">codebook</name><operator pos:start="87:53" pos:end="87:54">++</operator></expr></incr>)</control> <block pos:start="87:57" pos:end="103:13">{<block_content pos:start="89:17" pos:end="101:38">

                <expr_stmt pos:start="89:17" pos:end="89:28"><expr pos:start="89:17" pos:end="89:27"><name pos:start="89:17" pos:end="89:18">n3</name> <operator pos:start="89:20" pos:end="89:20">=</operator> <name pos:start="89:22" pos:end="89:27"><name pos:start="89:22" pos:end="89:24">dst</name><index pos:start="89:25" pos:end="89:27">[<expr pos:start="89:26" pos:end="89:26"><name pos:start="89:26" pos:end="89:26">x</name></expr>]</index></name></expr>;</expr_stmt>

                <comment type="block" pos:start="91:17" pos:end="91:46">/* add mean value to vector */</comment>

                <expr_stmt pos:start="93:17" pos:end="93:51"><expr pos:start="93:17" pos:end="93:50"><name pos:start="93:17" pos:end="93:18">n1</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <name pos:start="93:22" pos:end="93:23">n4</name> <operator pos:start="93:25" pos:end="93:25">+</operator> <operator pos:start="93:27" pos:end="93:27">(</operator><operator pos:start="93:28" pos:end="93:28">(</operator><name pos:start="93:29" pos:end="93:30">n3</name> <operator pos:start="93:32" pos:end="93:32">&amp;</operator> <literal type="number" pos:start="93:34" pos:end="93:43">0xFF00FF00</literal><operator pos:start="93:44" pos:end="93:44">)</operator> <operator pos:start="93:46" pos:end="93:47">&gt;&gt;</operator> <literal type="number" pos:start="93:49" pos:end="93:49">8</literal><operator pos:start="93:50" pos:end="93:50">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:45"><expr pos:start="95:17" pos:end="95:44"><name pos:start="95:17" pos:end="95:18">n2</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <name pos:start="95:22" pos:end="95:23">n4</name> <operator pos:start="95:25" pos:end="95:25">+</operator>  <operator pos:start="95:28" pos:end="95:28">(</operator><name pos:start="95:29" pos:end="95:30">n3</name> <operator pos:start="95:32" pos:end="95:32">&amp;</operator> <literal type="number" pos:start="95:34" pos:end="95:43">0x00FF00FF</literal><operator pos:start="95:44" pos:end="95:44">)</operator></expr>;</expr_stmt>

                <macro pos:start="97:17" pos:end="97:35"><name pos:start="97:17" pos:end="97:33">SVQ1_ADD_CODEBOOK</name><argument_list pos:start="97:34" pos:end="97:35">()</argument_list></macro>

                <comment type="block" pos:start="99:17" pos:end="99:34">/* store result */</comment>

                <expr_stmt pos:start="101:17" pos:end="101:38"><expr pos:start="101:17" pos:end="101:37"><name pos:start="101:17" pos:end="101:22"><name pos:start="101:17" pos:end="101:19">dst</name><index pos:start="101:20" pos:end="101:22">[<expr pos:start="101:21" pos:end="101:21"><name pos:start="101:21" pos:end="101:21">x</name></expr>]</index></name> <operator pos:start="101:24" pos:end="101:24">=</operator> <name pos:start="101:26" pos:end="101:27">n1</name> <operator pos:start="101:29" pos:end="101:30">&lt;&lt;</operator> <literal type="number" pos:start="101:32" pos:end="101:32">8</literal> <operator pos:start="101:34" pos:end="101:34">|</operator> <name pos:start="101:36" pos:end="101:37">n2</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="105:13" pos:end="105:29"><expr pos:start="105:13" pos:end="105:28"><name pos:start="105:13" pos:end="105:15">dst</name> <operator pos:start="105:17" pos:end="105:18">+=</operator> <name pos:start="105:20" pos:end="105:24">pitch</name> <operator pos:start="105:26" pos:end="105:26">/</operator> <literal type="number" pos:start="105:28" pos:end="105:28">4</literal></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <return pos:start="111:5" pos:end="111:13">return <expr pos:start="111:12" pos:end="111:12"><literal type="number" pos:start="111:12" pos:end="111:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
