<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16823.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">always_inline</name> <name pos:start="1:22" pos:end="1:25">void</name></type> <name pos:start="1:27" pos:end="1:34">gen_cmov</name> <parameter_list pos:start="1:36" pos:end="5:69">(<parameter pos:start="1:37" pos:end="1:52"><decl pos:start="1:37" pos:end="1:52"><type pos:start="1:37" pos:end="1:52"><name pos:start="1:37" pos:end="1:43">TCGCond</name></type> <name pos:start="1:45" pos:end="1:52">inv_cond</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:42"><decl pos:start="3:37" pos:end="3:42"><type pos:start="3:37" pos:end="3:42"><name pos:start="3:37" pos:end="3:39">int</name></type> <name pos:start="3:41" pos:end="3:42">ra</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:50"><decl pos:start="3:45" pos:end="3:50"><type pos:start="3:45" pos:end="3:50"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:50">rb</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:58"><decl pos:start="3:53" pos:end="3:58"><type pos:start="3:53" pos:end="3:58"><name pos:start="3:53" pos:end="3:55">int</name></type> <name pos:start="3:57" pos:end="3:58">rc</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:45"><decl pos:start="5:37" pos:end="5:45"><type pos:start="5:37" pos:end="5:45"><name pos:start="5:37" pos:end="5:39">int</name></type> <name pos:start="5:41" pos:end="5:45">islit</name></decl></parameter>, <parameter pos:start="5:48" pos:end="5:58"><decl pos:start="5:48" pos:end="5:58"><type pos:start="5:48" pos:end="5:58"><name pos:start="5:48" pos:end="5:54">uint8_t</name></type> <name pos:start="5:56" pos:end="5:58">lit</name></decl></parameter>, <parameter pos:start="5:61" pos:end="5:68"><decl pos:start="5:61" pos:end="5:68"><type pos:start="5:61" pos:end="5:68"><name pos:start="5:61" pos:end="5:63">int</name></type> <name pos:start="5:65" pos:end="5:68">mask</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="63:1">{<block_content pos:start="9:5" pos:end="61:22">

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">l1</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:15"><if pos:start="13:5" pos:end="15:15">if <condition pos:start="13:8" pos:end="13:27">(<expr pos:start="13:9" pos:end="13:26"><call pos:start="13:9" pos:end="13:26"><name pos:start="13:9" pos:end="13:16">unlikely</name><argument_list pos:start="13:17" pos:end="13:26">(<argument pos:start="13:18" pos:end="13:25"><expr pos:start="13:18" pos:end="13:25"><name pos:start="13:18" pos:end="13:19">rc</name> <operator pos:start="13:21" pos:end="13:22">==</operator> <literal type="number" pos:start="13:24" pos:end="13:25">31</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:15"><block_content pos:start="15:9" pos:end="15:15">

        <return pos:start="15:9" pos:end="15:15">return;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:25"><expr pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:6">l1</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <call pos:start="19:10" pos:end="19:24"><name pos:start="19:10" pos:end="19:22">gen_new_label</name><argument_list pos:start="19:23" pos:end="19:24">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="49:5"><if pos:start="23:5" pos:end="39:5">if <condition pos:start="23:8" pos:end="23:17">(<expr pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:10">ra</name> <operator pos:start="23:12" pos:end="23:13">!=</operator> <literal type="number" pos:start="23:15" pos:end="23:16">31</literal></expr>)</condition> <block pos:start="23:19" pos:end="39:5">{<block_content pos:start="25:9" pos:end="37:61">

        <if_stmt pos:start="25:9" pos:end="37:61"><if pos:start="25:9" pos:end="35:9">if <condition pos:start="25:12" pos:end="25:17">(<expr pos:start="25:13" pos:end="25:16"><name pos:start="25:13" pos:end="25:16">mask</name></expr>)</condition> <block pos:start="25:19" pos:end="35:9">{<block_content pos:start="27:13" pos:end="33:31">

            <decl_stmt pos:start="27:13" pos:end="27:50"><decl pos:start="27:13" pos:end="27:49"><type pos:start="27:13" pos:end="27:16"><name pos:start="27:13" pos:end="27:16">TCGv</name></type> <name pos:start="27:18" pos:end="27:20">tmp</name> <init pos:start="27:22" pos:end="27:49">= <expr pos:start="27:24" pos:end="27:49"><call pos:start="27:24" pos:end="27:49"><name pos:start="27:24" pos:end="27:35">tcg_temp_new</name><argument_list pos:start="27:36" pos:end="27:49">(<argument pos:start="27:37" pos:end="27:48"><expr pos:start="27:37" pos:end="27:48"><name pos:start="27:37" pos:end="27:48">TCG_TYPE_I64</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:49"><expr pos:start="29:13" pos:end="29:48"><call pos:start="29:13" pos:end="29:48"><name pos:start="29:13" pos:end="29:28">tcg_gen_andi_i64</name><argument_list pos:start="29:29" pos:end="29:48">(<argument pos:start="29:30" pos:end="29:32"><expr pos:start="29:30" pos:end="29:32"><name pos:start="29:30" pos:end="29:32">tmp</name></expr></argument>, <argument pos:start="29:35" pos:end="29:44"><expr pos:start="29:35" pos:end="29:44"><name pos:start="29:35" pos:end="29:44"><name pos:start="29:35" pos:end="29:40">cpu_ir</name><index pos:start="29:41" pos:end="29:44">[<expr pos:start="29:42" pos:end="29:43"><name pos:start="29:42" pos:end="29:43">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="29:47" pos:end="29:47"><expr pos:start="29:47" pos:end="29:47"><literal type="number" pos:start="29:47" pos:end="29:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:54"><expr pos:start="31:13" pos:end="31:53"><call pos:start="31:13" pos:end="31:53"><name pos:start="31:13" pos:end="31:31">tcg_gen_brcondi_i64</name><argument_list pos:start="31:32" pos:end="31:53">(<argument pos:start="31:33" pos:end="31:40"><expr pos:start="31:33" pos:end="31:40"><name pos:start="31:33" pos:end="31:40">inv_cond</name></expr></argument>, <argument pos:start="31:43" pos:end="31:45"><expr pos:start="31:43" pos:end="31:45"><name pos:start="31:43" pos:end="31:45">tmp</name></expr></argument>, <argument pos:start="31:48" pos:end="31:48"><expr pos:start="31:48" pos:end="31:48"><literal type="number" pos:start="31:48" pos:end="31:48">0</literal></expr></argument>, <argument pos:start="31:51" pos:end="31:52"><expr pos:start="31:51" pos:end="31:52"><name pos:start="31:51" pos:end="31:52">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:31"><expr pos:start="33:13" pos:end="33:30"><call pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:25">tcg_temp_free</name><argument_list pos:start="33:26" pos:end="33:30">(<argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="35:11" pos:end="37:61">else<block type="pseudo" pos:start="37:13" pos:end="37:61"><block_content pos:start="37:13" pos:end="37:61">

            <expr_stmt pos:start="37:13" pos:end="37:61"><expr pos:start="37:13" pos:end="37:60"><call pos:start="37:13" pos:end="37:60"><name pos:start="37:13" pos:end="37:31">tcg_gen_brcondi_i64</name><argument_list pos:start="37:32" pos:end="37:60">(<argument pos:start="37:33" pos:end="37:40"><expr pos:start="37:33" pos:end="37:40"><name pos:start="37:33" pos:end="37:40">inv_cond</name></expr></argument>, <argument pos:start="37:43" pos:end="37:52"><expr pos:start="37:43" pos:end="37:52"><name pos:start="37:43" pos:end="37:52"><name pos:start="37:43" pos:end="37:48">cpu_ir</name><index pos:start="37:49" pos:end="37:52">[<expr pos:start="37:50" pos:end="37:51"><name pos:start="37:50" pos:end="37:51">ra</name></expr>]</index></name></expr></argument>, <argument pos:start="37:55" pos:end="37:55"><expr pos:start="37:55" pos:end="37:55"><literal type="number" pos:start="37:55" pos:end="37:55">0</literal></expr></argument>, <argument pos:start="37:58" pos:end="37:59"><expr pos:start="37:58" pos:end="37:59"><name pos:start="37:58" pos:end="37:59">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="49:5">else <block pos:start="39:12" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:27">

        <comment type="block" pos:start="41:9" pos:end="41:62">/* Very uncommon case - Do not bother to optimize.  */</comment>

        <decl_stmt pos:start="43:9" pos:end="43:36"><decl pos:start="43:9" pos:end="43:35"><type pos:start="43:9" pos:end="43:12"><name pos:start="43:9" pos:end="43:12">TCGv</name></type> <name pos:start="43:14" pos:end="43:16">tmp</name> <init pos:start="43:18" pos:end="43:35">= <expr pos:start="43:20" pos:end="43:35"><call pos:start="43:20" pos:end="43:35"><name pos:start="43:20" pos:end="43:32">tcg_const_i64</name><argument_list pos:start="43:33" pos:end="43:35">(<argument pos:start="43:34" pos:end="43:34"><expr pos:start="43:34" pos:end="43:34"><literal type="number" pos:start="43:34" pos:end="43:34">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:50"><expr pos:start="45:9" pos:end="45:49"><call pos:start="45:9" pos:end="45:49"><name pos:start="45:9" pos:end="45:27">tcg_gen_brcondi_i64</name><argument_list pos:start="45:28" pos:end="45:49">(<argument pos:start="45:29" pos:end="45:36"><expr pos:start="45:29" pos:end="45:36"><name pos:start="45:29" pos:end="45:36">inv_cond</name></expr></argument>, <argument pos:start="45:39" pos:end="45:41"><expr pos:start="45:39" pos:end="45:41"><name pos:start="45:39" pos:end="45:41">tmp</name></expr></argument>, <argument pos:start="45:44" pos:end="45:44"><expr pos:start="45:44" pos:end="45:44"><literal type="number" pos:start="45:44" pos:end="45:44">0</literal></expr></argument>, <argument pos:start="45:47" pos:end="45:48"><expr pos:start="45:47" pos:end="45:48"><name pos:start="45:47" pos:end="45:48">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:27"><expr pos:start="47:9" pos:end="47:26"><call pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:21">tcg_temp_free</name><argument_list pos:start="47:22" pos:end="47:26">(<argument pos:start="47:23" pos:end="47:25"><expr pos:start="47:23" pos:end="47:25"><name pos:start="47:23" pos:end="47:25">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="53:5" pos:end="59:48"><if pos:start="53:5" pos:end="55:42">if <condition pos:start="53:8" pos:end="53:14">(<expr pos:start="53:9" pos:end="53:13"><name pos:start="53:9" pos:end="53:13">islit</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:42"><block_content pos:start="55:9" pos:end="55:42">

        <expr_stmt pos:start="55:9" pos:end="55:42"><expr pos:start="55:9" pos:end="55:41"><call pos:start="55:9" pos:end="55:41"><name pos:start="55:9" pos:end="55:24">tcg_gen_movi_i64</name><argument_list pos:start="55:25" pos:end="55:41">(<argument pos:start="55:26" pos:end="55:35"><expr pos:start="55:26" pos:end="55:35"><name pos:start="55:26" pos:end="55:35"><name pos:start="55:26" pos:end="55:31">cpu_ir</name><index pos:start="55:32" pos:end="55:35">[<expr pos:start="55:33" pos:end="55:34"><name pos:start="55:33" pos:end="55:34">rc</name></expr>]</index></name></expr></argument>, <argument pos:start="55:38" pos:end="55:40"><expr pos:start="55:38" pos:end="55:40"><name pos:start="55:38" pos:end="55:40">lit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="57:5" pos:end="59:48">else<block type="pseudo" pos:start="59:9" pos:end="59:48"><block_content pos:start="59:9" pos:end="59:48">

        <expr_stmt pos:start="59:9" pos:end="59:48"><expr pos:start="59:9" pos:end="59:47"><call pos:start="59:9" pos:end="59:47"><name pos:start="59:9" pos:end="59:23">tcg_gen_mov_i64</name><argument_list pos:start="59:24" pos:end="59:47">(<argument pos:start="59:25" pos:end="59:34"><expr pos:start="59:25" pos:end="59:34"><name pos:start="59:25" pos:end="59:34"><name pos:start="59:25" pos:end="59:30">cpu_ir</name><index pos:start="59:31" pos:end="59:34">[<expr pos:start="59:32" pos:end="59:33"><name pos:start="59:32" pos:end="59:33">rc</name></expr>]</index></name></expr></argument>, <argument pos:start="59:37" pos:end="59:46"><expr pos:start="59:37" pos:end="59:46"><name pos:start="59:37" pos:end="59:46"><name pos:start="59:37" pos:end="59:42">cpu_ir</name><index pos:start="59:43" pos:end="59:46">[<expr pos:start="59:44" pos:end="59:45"><name pos:start="59:44" pos:end="59:45">rb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:22"><expr pos:start="61:5" pos:end="61:21"><call pos:start="61:5" pos:end="61:21"><name pos:start="61:5" pos:end="61:17">gen_set_label</name><argument_list pos:start="61:18" pos:end="61:21">(<argument pos:start="61:19" pos:end="61:20"><expr pos:start="61:19" pos:end="61:20"><name pos:start="61:19" pos:end="61:20">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
