<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10976.c" pos:tabs="8"><function pos:start="1:1" pos:end="98:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">usb_xhci_post_load</name><parameter_list pos:start="1:30" pos:end="1:59">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">opaque</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:58">version_id</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="98:13">{<block_content pos:start="5:5" pos:end="98:13">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">XHCIState</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:19">xhci</name> <init pos:start="5:21" pos:end="5:28">= <expr pos:start="5:23" pos:end="5:28"><name pos:start="5:23" pos:end="5:28">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">PCIDevice</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:22">pci_dev</name> <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><call pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:35">PCI_DEVICE</name><argument_list pos:start="7:36" pos:end="7:41">(<argument pos:start="7:37" pos:end="7:40"><expr pos:start="7:37" pos:end="7:40"><name pos:start="7:37" pos:end="7:40">xhci</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">XHCISlot</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:18">slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">XHCIEPContext</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:24">epctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">dma_addr_t</name></type> <name pos:start="13:16" pos:end="13:21">dcbaap</name></decl>, <decl pos:start="13:24" pos:end="13:27"><type ref="prev" pos:start="13:5" pos:end="13:14"/><name pos:start="13:24" pos:end="13:27">pctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:24"><name pos:start="15:14" pos:end="15:21">slot_ctx</name><index pos:start="15:22" pos:end="15:24">[<expr pos:start="15:23" pos:end="15:23"><literal type="number" pos:start="15:23" pos:end="15:23">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:22"><name pos:start="17:14" pos:end="17:19">ep_ctx</name><index pos:start="17:20" pos:end="17:22">[<expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">5</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:14">slotid</name></decl>, <decl pos:start="19:17" pos:end="19:20"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:17" pos:end="19:20">epid</name></decl>, <decl pos:start="19:23" pos:end="19:27"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:23" pos:end="19:27">state</name></decl>, <decl pos:start="19:30" pos:end="19:33"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:30" pos:end="19:33">intr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:62"><expr pos:start="23:5" pos:end="23:61"><name pos:start="23:5" pos:end="23:10">dcbaap</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <call pos:start="23:14" pos:end="23:61"><name pos:start="23:14" pos:end="23:24">xhci_addr64</name><argument_list pos:start="23:25" pos:end="23:61">(<argument pos:start="23:26" pos:end="23:41"><expr pos:start="23:26" pos:end="23:41"><name pos:start="23:26" pos:end="23:41"><name pos:start="23:26" pos:end="23:29">xhci</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:41">dcbaap_low</name></name></expr></argument>, <argument pos:start="23:44" pos:end="23:60"><expr pos:start="23:44" pos:end="23:60"><name pos:start="23:44" pos:end="23:60"><name pos:start="23:44" pos:end="23:47">xhci</name><operator pos:start="23:48" pos:end="23:49">-&gt;</operator><name pos:start="23:50" pos:end="23:60">dcbaap_high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="27:5" pos:end="98:13">for <control pos:start="27:9" pos:end="27:56">(<init pos:start="27:10" pos:end="27:20"><expr pos:start="27:10" pos:end="27:19"><name pos:start="27:10" pos:end="27:15">slotid</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <literal type="number" pos:start="27:19" pos:end="27:19">1</literal></expr>;</init> <condition pos:start="27:22" pos:end="27:46"><expr pos:start="27:22" pos:end="27:45"><name pos:start="27:22" pos:end="27:27">slotid</name> <operator pos:start="27:29" pos:end="27:30">&lt;=</operator> <name pos:start="27:32" pos:end="27:45"><name pos:start="27:32" pos:end="27:35">xhci</name><operator pos:start="27:36" pos:end="27:37">-&gt;</operator><name pos:start="27:38" pos:end="27:45">numslots</name></name></expr>;</condition> <incr pos:start="27:48" pos:end="27:55"><expr pos:start="27:48" pos:end="27:55"><name pos:start="27:48" pos:end="27:53">slotid</name><operator pos:start="27:54" pos:end="27:55">++</operator></expr></incr>)</control> <block pos:start="27:58" pos:end="98:13">{<block_content pos:start="29:9" pos:end="98:13">

        <expr_stmt pos:start="29:9" pos:end="29:38"><expr pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:12">slot</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <operator pos:start="29:16" pos:end="29:16">&amp;</operator><name pos:start="29:17" pos:end="29:37"><name pos:start="29:17" pos:end="29:20">xhci</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:27">slots</name><index pos:start="29:28" pos:end="29:37">[<expr pos:start="29:29" pos:end="29:36"><name pos:start="29:29" pos:end="29:34">slotid</name><operator pos:start="29:35" pos:end="29:35">-</operator><literal type="number" pos:start="29:36" pos:end="29:36">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="98:13"><if pos:start="31:9" pos:end="98:13">if <condition pos:start="31:12" pos:end="31:29">(<expr pos:start="31:13" pos:end="31:28"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:28"><name pos:start="31:14" pos:end="31:17">slot</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:28">addressed</name></name></expr>)</condition> <block pos:start="31:31" pos:end="98:13">{<block_content pos:start="35:9" pos:end="98:13">



        <expr_stmt pos:start="35:9" pos:end="37:70"><expr pos:start="35:9" pos:end="37:69"><name pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:12">slot</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:17">ctx</name></name> <operator pos:start="35:19" pos:end="35:19">=</operator>

            <call pos:start="37:13" pos:end="37:69"><name pos:start="37:13" pos:end="37:23">xhci_mask64</name><argument_list pos:start="37:24" pos:end="37:69">(<argument pos:start="37:25" pos:end="37:68"><expr pos:start="37:25" pos:end="37:68"><call pos:start="37:25" pos:end="37:68"><name pos:start="37:25" pos:end="37:38">ldq_le_pci_dma</name><argument_list pos:start="37:39" pos:end="37:68">(<argument pos:start="37:40" pos:end="37:46"><expr pos:start="37:40" pos:end="37:46"><name pos:start="37:40" pos:end="37:46">pci_dev</name></expr></argument>, <argument pos:start="37:49" pos:end="37:67"><expr pos:start="37:49" pos:end="37:67"><name pos:start="37:49" pos:end="37:54">dcbaap</name> <operator pos:start="37:56" pos:end="37:56">+</operator> <literal type="number" pos:start="37:58" pos:end="37:58">8</literal> <operator pos:start="37:60" pos:end="37:60">*</operator> <name pos:start="37:62" pos:end="37:67">slotid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:72"><expr pos:start="39:9" pos:end="39:71"><call pos:start="39:9" pos:end="39:71"><name pos:start="39:9" pos:end="39:26">xhci_dma_read_u32s</name><argument_list pos:start="39:27" pos:end="39:71">(<argument pos:start="39:28" pos:end="39:31"><expr pos:start="39:28" pos:end="39:31"><name pos:start="39:28" pos:end="39:31">xhci</name></expr></argument>, <argument pos:start="39:34" pos:end="39:42"><expr pos:start="39:34" pos:end="39:42"><name pos:start="39:34" pos:end="39:42"><name pos:start="39:34" pos:end="39:37">slot</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:42">ctx</name></name></expr></argument>, <argument pos:start="39:45" pos:end="39:52"><expr pos:start="39:45" pos:end="39:52"><name pos:start="39:45" pos:end="39:52">slot_ctx</name></expr></argument>, <argument pos:start="39:55" pos:end="39:70"><expr pos:start="39:55" pos:end="39:70"><sizeof pos:start="39:55" pos:end="39:70">sizeof<argument_list pos:start="39:61" pos:end="39:70">(<argument pos:start="39:62" pos:end="39:69"><expr pos:start="39:62" pos:end="39:69"><name pos:start="39:62" pos:end="39:69">slot_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:56"><expr pos:start="41:9" pos:end="41:55"><name pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:12">slot</name><operator pos:start="41:13" pos:end="41:14">-&gt;</operator><name pos:start="41:15" pos:end="41:19">uport</name></name> <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="41:55"><name pos:start="41:23" pos:end="41:39">xhci_lookup_uport</name><argument_list pos:start="41:40" pos:end="41:55">(<argument pos:start="41:41" pos:end="41:44"><expr pos:start="41:41" pos:end="41:44"><name pos:start="41:41" pos:end="41:44">xhci</name></expr></argument>, <argument pos:start="41:47" pos:end="41:54"><expr pos:start="41:47" pos:end="41:54"><name pos:start="41:47" pos:end="41:54">slot_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>







        <expr_stmt pos:start="49:9" pos:end="49:48"><expr pos:start="49:9" pos:end="49:47"><call pos:start="49:9" pos:end="49:47"><name pos:start="49:9" pos:end="49:14">assert</name><argument_list pos:start="49:15" pos:end="49:47">(<argument pos:start="49:16" pos:end="49:46"><expr pos:start="49:16" pos:end="49:46"><name pos:start="49:16" pos:end="49:26"><name pos:start="49:16" pos:end="49:19">slot</name><operator pos:start="49:20" pos:end="49:21">-&gt;</operator><name pos:start="49:22" pos:end="49:26">uport</name></name> <operator pos:start="49:28" pos:end="49:29">&amp;&amp;</operator> <name pos:start="49:31" pos:end="49:46"><name pos:start="49:31" pos:end="49:34">slot</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:41">uport</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:46">dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="53:9" pos:end="98:13">for <control pos:start="53:13" pos:end="53:42">(<init pos:start="53:14" pos:end="53:22"><expr pos:start="53:14" pos:end="53:21"><name pos:start="53:14" pos:end="53:17">epid</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <literal type="number" pos:start="53:21" pos:end="53:21">1</literal></expr>;</init> <condition pos:start="53:24" pos:end="53:34"><expr pos:start="53:24" pos:end="53:33"><name pos:start="53:24" pos:end="53:27">epid</name> <operator pos:start="53:29" pos:end="53:30">&lt;=</operator> <literal type="number" pos:start="53:32" pos:end="53:33">31</literal></expr>;</condition> <incr pos:start="53:36" pos:end="53:41"><expr pos:start="53:36" pos:end="53:41"><name pos:start="53:36" pos:end="53:39">epid</name><operator pos:start="53:40" pos:end="53:41">++</operator></expr></incr>)</control> <block pos:start="53:44" pos:end="98:13">{<block_content pos:start="55:13" pos:end="98:13">

            <expr_stmt pos:start="55:13" pos:end="55:41"><expr pos:start="55:13" pos:end="55:40"><name pos:start="55:13" pos:end="55:16">pctx</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <name pos:start="55:20" pos:end="55:28"><name pos:start="55:20" pos:end="55:23">slot</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:28">ctx</name></name> <operator pos:start="55:30" pos:end="55:30">+</operator> <literal type="number" pos:start="55:32" pos:end="55:33">32</literal> <operator pos:start="55:35" pos:end="55:35">*</operator> <name pos:start="55:37" pos:end="55:40">epid</name></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:67"><expr pos:start="57:13" pos:end="57:66"><call pos:start="57:13" pos:end="57:66"><name pos:start="57:13" pos:end="57:30">xhci_dma_read_u32s</name><argument_list pos:start="57:31" pos:end="57:66">(<argument pos:start="57:32" pos:end="57:35"><expr pos:start="57:32" pos:end="57:35"><name pos:start="57:32" pos:end="57:35">xhci</name></expr></argument>, <argument pos:start="57:38" pos:end="57:41"><expr pos:start="57:38" pos:end="57:41"><name pos:start="57:38" pos:end="57:41">pctx</name></expr></argument>, <argument pos:start="57:44" pos:end="57:49"><expr pos:start="57:44" pos:end="57:49"><name pos:start="57:44" pos:end="57:49">ep_ctx</name></expr></argument>, <argument pos:start="57:52" pos:end="57:65"><expr pos:start="57:52" pos:end="57:65"><sizeof pos:start="57:52" pos:end="57:65">sizeof<argument_list pos:start="57:58" pos:end="57:65">(<argument pos:start="57:59" pos:end="57:64"><expr pos:start="57:59" pos:end="57:64"><name pos:start="57:59" pos:end="57:64">ep_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:46"><expr pos:start="59:13" pos:end="59:45"><name pos:start="59:13" pos:end="59:17">state</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:29"><name pos:start="59:21" pos:end="59:26">ep_ctx</name><index pos:start="59:27" pos:end="59:29">[<expr pos:start="59:28" pos:end="59:28"><literal type="number" pos:start="59:28" pos:end="59:28">0</literal></expr>]</index></name> <operator pos:start="59:31" pos:end="59:31">&amp;</operator> <name pos:start="59:33" pos:end="59:45">EP_STATE_MASK</name></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="98:13"><if pos:start="61:13" pos:end="98:13">if <condition pos:start="61:16" pos:end="61:37">(<expr pos:start="61:17" pos:end="61:36"><name pos:start="61:17" pos:end="61:21">state</name> <operator pos:start="61:23" pos:end="61:24">==</operator> <name pos:start="61:26" pos:end="61:36">EP_DISABLED</name></expr>)</condition> <block pos:start="61:39" pos:end="98:13">{<block_content pos:start="65:13" pos:end="98:13">



            <expr_stmt pos:start="65:13" pos:end="65:57"><expr pos:start="65:13" pos:end="65:56"><name pos:start="65:13" pos:end="65:17">epctx</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <call pos:start="65:21" pos:end="65:56"><name pos:start="65:21" pos:end="65:36">xhci_alloc_epctx</name><argument_list pos:start="65:37" pos:end="65:56">(<argument pos:start="65:38" pos:end="65:41"><expr pos:start="65:38" pos:end="65:41"><name pos:start="65:38" pos:end="65:41">xhci</name></expr></argument>, <argument pos:start="65:44" pos:end="65:49"><expr pos:start="65:44" pos:end="65:49"><name pos:start="65:44" pos:end="65:49">slotid</name></expr></argument>, <argument pos:start="65:52" pos:end="65:55"><expr pos:start="65:52" pos:end="65:55"><name pos:start="65:52" pos:end="65:55">epid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:38"><expr pos:start="67:13" pos:end="67:37"><name pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:16">slot</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:21">eps</name><index pos:start="67:22" pos:end="67:29">[<expr pos:start="67:23" pos:end="67:28"><name pos:start="67:23" pos:end="67:26">epid</name><operator pos:start="67:27" pos:end="67:27">-</operator><literal type="number" pos:start="67:28" pos:end="67:28">1</literal></expr>]</index></name> <operator pos:start="67:31" pos:end="67:31">=</operator> <name pos:start="67:33" pos:end="67:37">epctx</name></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:49"><expr pos:start="69:13" pos:end="69:48"><call pos:start="69:13" pos:end="69:48"><name pos:start="69:13" pos:end="69:27">xhci_init_epctx</name><argument_list pos:start="69:28" pos:end="69:48">(<argument pos:start="69:29" pos:end="69:33"><expr pos:start="69:29" pos:end="69:33"><name pos:start="69:29" pos:end="69:33">epctx</name></expr></argument>, <argument pos:start="69:36" pos:end="69:39"><expr pos:start="69:36" pos:end="69:39"><name pos:start="69:36" pos:end="69:39">pctx</name></expr></argument>, <argument pos:start="69:42" pos:end="69:47"><expr pos:start="69:42" pos:end="69:47"><name pos:start="69:42" pos:end="69:47">ep_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:33"><expr pos:start="71:13" pos:end="71:32"><name pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:17">epctx</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:24">state</name></name> <operator pos:start="71:26" pos:end="71:26">=</operator> <name pos:start="71:28" pos:end="71:32">state</name></expr>;</expr_stmt>

            <if_stmt pos:start="73:13" pos:end="98:13"><if pos:start="73:13" pos:end="98:13">if <condition pos:start="73:16" pos:end="73:36">(<expr pos:start="73:17" pos:end="73:35"><name pos:start="73:17" pos:end="73:21">state</name> <operator pos:start="73:23" pos:end="73:24">==</operator> <name pos:start="73:26" pos:end="73:35">EP_RUNNING</name></expr>)</condition> <block pos:start="73:38" pos:end="98:13">{<block_content pos:start="77:17" pos:end="98:13">

                <comment type="block" pos:start="75:17" pos:end="75:60">/* kick endpoint after vmload is finished */</comment>

                <expr_stmt pos:start="77:17" pos:end="77:84"><expr pos:start="77:17" pos:end="77:83"><call pos:start="77:17" pos:end="77:83"><name pos:start="77:17" pos:end="77:25">timer_mod</name><argument_list pos:start="77:26" pos:end="77:83">(<argument pos:start="77:27" pos:end="77:43"><expr pos:start="77:27" pos:end="77:43"><name pos:start="77:27" pos:end="77:43"><name pos:start="77:27" pos:end="77:31">epctx</name><operator pos:start="77:32" pos:end="77:33">-&gt;</operator><name pos:start="77:34" pos:end="77:43">kick_timer</name></name></expr></argument>, <argument pos:start="77:46" pos:end="77:82"><expr pos:start="77:46" pos:end="77:82"><call pos:start="77:46" pos:end="77:82"><name pos:start="77:46" pos:end="77:62">qemu_clock_get_ns</name><argument_list pos:start="77:63" pos:end="77:82">(<argument pos:start="77:64" pos:end="77:81"><expr pos:start="77:64" pos:end="77:81"><name pos:start="77:64" pos:end="77:81">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>






    <for pos:start="84:5" pos:end="98:13">for <control pos:start="84:9" pos:end="84:49">(<init pos:start="84:10" pos:end="84:18"><expr pos:start="84:10" pos:end="84:17"><name pos:start="84:10" pos:end="84:13">intr</name> <operator pos:start="84:15" pos:end="84:15">=</operator> <literal type="number" pos:start="84:17" pos:end="84:17">0</literal></expr>;</init> <condition pos:start="84:20" pos:end="84:41"><expr pos:start="84:20" pos:end="84:40"><name pos:start="84:20" pos:end="84:23">intr</name> <operator pos:start="84:25" pos:end="84:25">&lt;</operator> <name pos:start="84:27" pos:end="84:40"><name pos:start="84:27" pos:end="84:30">xhci</name><operator pos:start="84:31" pos:end="84:32">-&gt;</operator><name pos:start="84:33" pos:end="84:40">numintrs</name></name></expr>;</condition> <incr pos:start="84:43" pos:end="84:48"><expr pos:start="84:43" pos:end="84:48"><name pos:start="84:43" pos:end="84:46">intr</name><operator pos:start="84:47" pos:end="84:48">++</operator></expr></incr>)</control> <block pos:start="84:51" pos:end="98:13">{<block_content pos:start="86:9" pos:end="98:13">

        <if_stmt pos:start="86:9" pos:end="98:13"><if pos:start="86:9" pos:end="90:9">if <condition pos:start="86:12" pos:end="86:39">(<expr pos:start="86:13" pos:end="86:38"><name pos:start="86:13" pos:end="86:28"><name pos:start="86:13" pos:end="86:16">xhci</name><operator pos:start="86:17" pos:end="86:18">-&gt;</operator><name pos:start="86:19" pos:end="86:22">intr</name><index pos:start="86:23" pos:end="86:28">[<expr pos:start="86:24" pos:end="86:27"><name pos:start="86:24" pos:end="86:27">intr</name></expr>]</index></name><operator pos:start="86:29" pos:end="86:29">.</operator><name pos:start="86:30" pos:end="86:38">msix_used</name></expr>)</condition> <block pos:start="86:41" pos:end="90:9">{<block_content pos:start="88:13" pos:end="88:43">

            <expr_stmt pos:start="88:13" pos:end="88:43"><expr pos:start="88:13" pos:end="88:42"><call pos:start="88:13" pos:end="88:42"><name pos:start="88:13" pos:end="88:27">msix_vector_use</name><argument_list pos:start="88:28" pos:end="88:42">(<argument pos:start="88:29" pos:end="88:35"><expr pos:start="88:29" pos:end="88:35"><name pos:start="88:29" pos:end="88:35">pci_dev</name></expr></argument>, <argument pos:start="88:38" pos:end="88:41"><expr pos:start="88:38" pos:end="88:41"><name pos:start="88:38" pos:end="88:41">intr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="90:11" pos:end="98:13">else <block pos:start="90:16" pos:end="98:13">{<block_content pos:start="92:13" pos:end="98:13">

            <expr_stmt pos:start="92:13" pos:end="92:45"><expr pos:start="92:13" pos:end="92:44"><call pos:start="92:13" pos:end="92:44"><name pos:start="92:13" pos:end="92:29">msix_vector_unuse</name><argument_list pos:start="92:30" pos:end="92:44">(<argument pos:start="92:31" pos:end="92:37"><expr pos:start="92:31" pos:end="92:37"><name pos:start="92:31" pos:end="92:37">pci_dev</name></expr></argument>, <argument pos:start="92:40" pos:end="92:43"><expr pos:start="92:40" pos:end="92:43"><name pos:start="92:40" pos:end="92:43">intr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <return pos:start="98:5" pos:end="98:13">return <expr pos:start="98:12" pos:end="98:12"><literal type="number" pos:start="98:12" pos:end="98:12">0</literal></expr>;</return></block_content></block></else></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></function>
</unit>
