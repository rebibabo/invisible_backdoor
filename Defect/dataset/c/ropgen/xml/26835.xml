<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26835.c" pos:tabs="8"><function pos:start="1:1" pos:end="365:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">pfpu_decode_insn</name><parameter_list pos:start="1:28" pos:end="1:50">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:46">MilkymistPFPUState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="365:1">{<block_content pos:start="5:5" pos:end="363:13">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:15">pc</name> <init pos:start="5:17" pos:end="5:31">= <expr pos:start="5:19" pos:end="5:31"><name pos:start="5:19" pos:end="5:31"><name pos:start="5:19" pos:end="5:19">s</name><operator pos:start="5:20" pos:end="5:21">-&gt;</operator><name pos:start="5:22" pos:end="5:25">regs</name><index pos:start="5:26" pos:end="5:31">[<expr pos:start="5:27" pos:end="5:30"><name pos:start="5:27" pos:end="5:30">R_PC</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">insn</name> <init pos:start="7:19" pos:end="7:36">= <expr pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:21">s</name><operator pos:start="7:22" pos:end="7:23">-&gt;</operator><name pos:start="7:24" pos:end="7:32">microcode</name><index pos:start="7:33" pos:end="7:36">[<expr pos:start="7:34" pos:end="7:35"><name pos:start="7:34" pos:end="7:35">pc</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">reg_a</name> <init pos:start="9:20" pos:end="9:40">= <expr pos:start="9:22" pos:end="9:40"><operator pos:start="9:22" pos:end="9:22">(</operator><name pos:start="9:23" pos:end="9:26">insn</name> <operator pos:start="9:28" pos:end="9:29">&gt;&gt;</operator> <literal type="number" pos:start="9:31" pos:end="9:32">18</literal><operator pos:start="9:33" pos:end="9:33">)</operator> <operator pos:start="9:35" pos:end="9:35">&amp;</operator> <literal type="number" pos:start="9:37" pos:end="9:40">0x7f</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">reg_b</name> <init pos:start="11:20" pos:end="11:40">= <expr pos:start="11:22" pos:end="11:40"><operator pos:start="11:22" pos:end="11:22">(</operator><name pos:start="11:23" pos:end="11:26">insn</name> <operator pos:start="11:28" pos:end="11:29">&gt;&gt;</operator> <literal type="number" pos:start="11:31" pos:end="11:32">11</literal><operator pos:start="11:33" pos:end="11:33">)</operator> <operator pos:start="11:35" pos:end="11:35">&amp;</operator> <literal type="number" pos:start="11:37" pos:end="11:40">0x7f</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:15">op</name> <init pos:start="13:17" pos:end="13:35">= <expr pos:start="13:19" pos:end="13:35"><operator pos:start="13:19" pos:end="13:19">(</operator><name pos:start="13:20" pos:end="13:23">insn</name> <operator pos:start="13:25" pos:end="13:26">&gt;&gt;</operator> <literal type="number" pos:start="13:28" pos:end="13:28">7</literal><operator pos:start="13:29" pos:end="13:29">)</operator> <operator pos:start="13:31" pos:end="13:31">&amp;</operator> <literal type="number" pos:start="13:33" pos:end="13:35">0xf</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:33"><decl pos:start="15:5" pos:end="15:32"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:18">reg_d</name> <init pos:start="15:20" pos:end="15:32">= <expr pos:start="15:22" pos:end="15:32"><name pos:start="15:22" pos:end="15:25">insn</name> <operator pos:start="15:27" pos:end="15:27">&amp;</operator> <literal type="number" pos:start="15:29" pos:end="15:32">0x7f</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:14">r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:15">latency</name> <init pos:start="19:17" pos:end="19:19">= <expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr></init></decl>;</decl_stmt>



    <switch pos:start="23:5" pos:end="297:5">switch <condition pos:start="23:12" pos:end="23:15">(<expr pos:start="23:13" pos:end="23:14"><name pos:start="23:13" pos:end="23:14">op</name></expr>)</condition> <block pos:start="23:17" pos:end="297:5">{<block_content pos:start="25:5" pos:end="295:14">

    <case pos:start="25:5" pos:end="25:16">case <expr pos:start="25:10" pos:end="25:15"><name pos:start="25:10" pos:end="25:15">OP_NOP</name></expr>:</case>

        <break pos:start="27:9" pos:end="27:14">break;</break>

    <case pos:start="29:5" pos:end="29:17">case <expr pos:start="29:10" pos:end="29:16"><name pos:start="29:10" pos:end="29:16">OP_FADD</name></expr>:</case>

    <block pos:start="31:5" pos:end="45:5">{<block_content pos:start="33:9" pos:end="43:69">

        <decl_stmt pos:start="33:9" pos:end="33:61"><decl pos:start="33:9" pos:end="33:60"><type pos:start="33:9" pos:end="33:13"><name pos:start="33:9" pos:end="33:13">float</name></type> <name pos:start="33:15" pos:end="33:15">a</name> <init pos:start="33:17" pos:end="33:60">= <expr pos:start="33:19" pos:end="33:60"><call pos:start="33:19" pos:end="33:60"><name pos:start="33:19" pos:end="33:34">REINTERPRET_CAST</name><argument_list pos:start="33:35" pos:end="33:60">(<argument pos:start="33:36" pos:end="33:40"><expr pos:start="33:36" pos:end="33:40"><name pos:start="33:36" pos:end="33:40">float</name></expr></argument>, <argument pos:start="33:43" pos:end="33:59"><expr pos:start="33:43" pos:end="33:59"><name pos:start="33:43" pos:end="33:59"><name pos:start="33:43" pos:end="33:43">s</name><operator pos:start="33:44" pos:end="33:45">-&gt;</operator><name pos:start="33:46" pos:end="33:52">gp_regs</name><index pos:start="33:53" pos:end="33:59">[<expr pos:start="33:54" pos:end="33:58"><name pos:start="33:54" pos:end="33:58">reg_a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:61"><decl pos:start="35:9" pos:end="35:60"><type pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:13">float</name></type> <name pos:start="35:15" pos:end="35:15">b</name> <init pos:start="35:17" pos:end="35:60">= <expr pos:start="35:19" pos:end="35:60"><call pos:start="35:19" pos:end="35:60"><name pos:start="35:19" pos:end="35:34">REINTERPRET_CAST</name><argument_list pos:start="35:35" pos:end="35:60">(<argument pos:start="35:36" pos:end="35:40"><expr pos:start="35:36" pos:end="35:40"><name pos:start="35:36" pos:end="35:40">float</name></expr></argument>, <argument pos:start="35:43" pos:end="35:59"><expr pos:start="35:43" pos:end="35:59"><name pos:start="35:43" pos:end="35:59"><name pos:start="35:43" pos:end="35:43">s</name><operator pos:start="35:44" pos:end="35:45">-&gt;</operator><name pos:start="35:46" pos:end="35:52">gp_regs</name><index pos:start="35:53" pos:end="35:59">[<expr pos:start="35:54" pos:end="35:58"><name pos:start="35:54" pos:end="35:58">reg_b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:24"><decl pos:start="37:9" pos:end="37:23"><type pos:start="37:9" pos:end="37:13"><name pos:start="37:9" pos:end="37:13">float</name></type> <name pos:start="37:15" pos:end="37:15">t</name> <init pos:start="37:17" pos:end="37:23">= <expr pos:start="37:19" pos:end="37:23"><name pos:start="37:19" pos:end="37:19">a</name> <operator pos:start="37:21" pos:end="37:21">+</operator> <name pos:start="37:23" pos:end="37:23">b</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:42"><expr pos:start="39:9" pos:end="39:41"><name pos:start="39:9" pos:end="39:9">r</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <call pos:start="39:13" pos:end="39:41"><name pos:start="39:13" pos:end="39:28">REINTERPRET_CAST</name><argument_list pos:start="39:29" pos:end="39:41">(<argument pos:start="39:30" pos:end="39:37"><expr pos:start="39:30" pos:end="39:37"><name pos:start="39:30" pos:end="39:37">uint32_t</name></expr></argument>, <argument pos:start="39:40" pos:end="39:40"><expr pos:start="39:40" pos:end="39:40"><name pos:start="39:40" pos:end="39:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:31"><expr pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:15">latency</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:30">LATENCY_FADD</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:69"><expr pos:start="43:9" pos:end="43:68"><call pos:start="43:9" pos:end="43:68"><name pos:start="43:9" pos:end="43:14">D_EXEC</name><argument_list pos:start="43:15" pos:end="43:68">(<argument pos:start="43:16" pos:end="43:67"><expr pos:start="43:16" pos:end="43:67"><call pos:start="43:16" pos:end="43:67"><name pos:start="43:16" pos:end="43:23">qemu_log</name><argument_list pos:start="43:24" pos:end="43:67">(<argument pos:start="43:25" pos:end="43:54"><expr pos:start="43:25" pos:end="43:54"><literal type="string" pos:start="43:25" pos:end="43:54">"ADD a=%f b=%f t=%f, r=%08x\n"</literal></expr></argument>, <argument pos:start="43:57" pos:end="43:57"><expr pos:start="43:57" pos:end="43:57"><name pos:start="43:57" pos:end="43:57">a</name></expr></argument>, <argument pos:start="43:60" pos:end="43:60"><expr pos:start="43:60" pos:end="43:60"><name pos:start="43:60" pos:end="43:60">b</name></expr></argument>, <argument pos:start="43:63" pos:end="43:63"><expr pos:start="43:63" pos:end="43:63"><name pos:start="43:63" pos:end="43:63">t</name></expr></argument>, <argument pos:start="43:66" pos:end="43:66"><expr pos:start="43:66" pos:end="43:66"><name pos:start="43:66" pos:end="43:66">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="45:7" pos:end="45:12">break;</break>

    <case pos:start="47:5" pos:end="47:17">case <expr pos:start="47:10" pos:end="47:16"><name pos:start="47:10" pos:end="47:16">OP_FSUB</name></expr>:</case>

    <block pos:start="49:5" pos:end="63:5">{<block_content pos:start="51:9" pos:end="61:69">

        <decl_stmt pos:start="51:9" pos:end="51:61"><decl pos:start="51:9" pos:end="51:60"><type pos:start="51:9" pos:end="51:13"><name pos:start="51:9" pos:end="51:13">float</name></type> <name pos:start="51:15" pos:end="51:15">a</name> <init pos:start="51:17" pos:end="51:60">= <expr pos:start="51:19" pos:end="51:60"><call pos:start="51:19" pos:end="51:60"><name pos:start="51:19" pos:end="51:34">REINTERPRET_CAST</name><argument_list pos:start="51:35" pos:end="51:60">(<argument pos:start="51:36" pos:end="51:40"><expr pos:start="51:36" pos:end="51:40"><name pos:start="51:36" pos:end="51:40">float</name></expr></argument>, <argument pos:start="51:43" pos:end="51:59"><expr pos:start="51:43" pos:end="51:59"><name pos:start="51:43" pos:end="51:59"><name pos:start="51:43" pos:end="51:43">s</name><operator pos:start="51:44" pos:end="51:45">-&gt;</operator><name pos:start="51:46" pos:end="51:52">gp_regs</name><index pos:start="51:53" pos:end="51:59">[<expr pos:start="51:54" pos:end="51:58"><name pos:start="51:54" pos:end="51:58">reg_a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:61"><decl pos:start="53:9" pos:end="53:60"><type pos:start="53:9" pos:end="53:13"><name pos:start="53:9" pos:end="53:13">float</name></type> <name pos:start="53:15" pos:end="53:15">b</name> <init pos:start="53:17" pos:end="53:60">= <expr pos:start="53:19" pos:end="53:60"><call pos:start="53:19" pos:end="53:60"><name pos:start="53:19" pos:end="53:34">REINTERPRET_CAST</name><argument_list pos:start="53:35" pos:end="53:60">(<argument pos:start="53:36" pos:end="53:40"><expr pos:start="53:36" pos:end="53:40"><name pos:start="53:36" pos:end="53:40">float</name></expr></argument>, <argument pos:start="53:43" pos:end="53:59"><expr pos:start="53:43" pos:end="53:59"><name pos:start="53:43" pos:end="53:59"><name pos:start="53:43" pos:end="53:43">s</name><operator pos:start="53:44" pos:end="53:45">-&gt;</operator><name pos:start="53:46" pos:end="53:52">gp_regs</name><index pos:start="53:53" pos:end="53:59">[<expr pos:start="53:54" pos:end="53:58"><name pos:start="53:54" pos:end="53:58">reg_b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:24"><decl pos:start="55:9" pos:end="55:23"><type pos:start="55:9" pos:end="55:13"><name pos:start="55:9" pos:end="55:13">float</name></type> <name pos:start="55:15" pos:end="55:15">t</name> <init pos:start="55:17" pos:end="55:23">= <expr pos:start="55:19" pos:end="55:23"><name pos:start="55:19" pos:end="55:19">a</name> <operator pos:start="55:21" pos:end="55:21">-</operator> <name pos:start="55:23" pos:end="55:23">b</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:42"><expr pos:start="57:9" pos:end="57:41"><name pos:start="57:9" pos:end="57:9">r</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <call pos:start="57:13" pos:end="57:41"><name pos:start="57:13" pos:end="57:28">REINTERPRET_CAST</name><argument_list pos:start="57:29" pos:end="57:41">(<argument pos:start="57:30" pos:end="57:37"><expr pos:start="57:30" pos:end="57:37"><name pos:start="57:30" pos:end="57:37">uint32_t</name></expr></argument>, <argument pos:start="57:40" pos:end="57:40"><expr pos:start="57:40" pos:end="57:40"><name pos:start="57:40" pos:end="57:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:31"><expr pos:start="59:9" pos:end="59:30"><name pos:start="59:9" pos:end="59:15">latency</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <name pos:start="59:19" pos:end="59:30">LATENCY_FSUB</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:69"><expr pos:start="61:9" pos:end="61:68"><call pos:start="61:9" pos:end="61:68"><name pos:start="61:9" pos:end="61:14">D_EXEC</name><argument_list pos:start="61:15" pos:end="61:68">(<argument pos:start="61:16" pos:end="61:67"><expr pos:start="61:16" pos:end="61:67"><call pos:start="61:16" pos:end="61:67"><name pos:start="61:16" pos:end="61:23">qemu_log</name><argument_list pos:start="61:24" pos:end="61:67">(<argument pos:start="61:25" pos:end="61:54"><expr pos:start="61:25" pos:end="61:54"><literal type="string" pos:start="61:25" pos:end="61:54">"SUB a=%f b=%f t=%f, r=%08x\n"</literal></expr></argument>, <argument pos:start="61:57" pos:end="61:57"><expr pos:start="61:57" pos:end="61:57"><name pos:start="61:57" pos:end="61:57">a</name></expr></argument>, <argument pos:start="61:60" pos:end="61:60"><expr pos:start="61:60" pos:end="61:60"><name pos:start="61:60" pos:end="61:60">b</name></expr></argument>, <argument pos:start="61:63" pos:end="61:63"><expr pos:start="61:63" pos:end="61:63"><name pos:start="61:63" pos:end="61:63">t</name></expr></argument>, <argument pos:start="61:66" pos:end="61:66"><expr pos:start="61:66" pos:end="61:66"><name pos:start="61:66" pos:end="61:66">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="63:7" pos:end="63:12">break;</break>

    <case pos:start="65:5" pos:end="65:17">case <expr pos:start="65:10" pos:end="65:16"><name pos:start="65:10" pos:end="65:16">OP_FMUL</name></expr>:</case>

    <block pos:start="67:5" pos:end="81:5">{<block_content pos:start="69:9" pos:end="79:69">

        <decl_stmt pos:start="69:9" pos:end="69:61"><decl pos:start="69:9" pos:end="69:60"><type pos:start="69:9" pos:end="69:13"><name pos:start="69:9" pos:end="69:13">float</name></type> <name pos:start="69:15" pos:end="69:15">a</name> <init pos:start="69:17" pos:end="69:60">= <expr pos:start="69:19" pos:end="69:60"><call pos:start="69:19" pos:end="69:60"><name pos:start="69:19" pos:end="69:34">REINTERPRET_CAST</name><argument_list pos:start="69:35" pos:end="69:60">(<argument pos:start="69:36" pos:end="69:40"><expr pos:start="69:36" pos:end="69:40"><name pos:start="69:36" pos:end="69:40">float</name></expr></argument>, <argument pos:start="69:43" pos:end="69:59"><expr pos:start="69:43" pos:end="69:59"><name pos:start="69:43" pos:end="69:59"><name pos:start="69:43" pos:end="69:43">s</name><operator pos:start="69:44" pos:end="69:45">-&gt;</operator><name pos:start="69:46" pos:end="69:52">gp_regs</name><index pos:start="69:53" pos:end="69:59">[<expr pos:start="69:54" pos:end="69:58"><name pos:start="69:54" pos:end="69:58">reg_a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:61"><decl pos:start="71:9" pos:end="71:60"><type pos:start="71:9" pos:end="71:13"><name pos:start="71:9" pos:end="71:13">float</name></type> <name pos:start="71:15" pos:end="71:15">b</name> <init pos:start="71:17" pos:end="71:60">= <expr pos:start="71:19" pos:end="71:60"><call pos:start="71:19" pos:end="71:60"><name pos:start="71:19" pos:end="71:34">REINTERPRET_CAST</name><argument_list pos:start="71:35" pos:end="71:60">(<argument pos:start="71:36" pos:end="71:40"><expr pos:start="71:36" pos:end="71:40"><name pos:start="71:36" pos:end="71:40">float</name></expr></argument>, <argument pos:start="71:43" pos:end="71:59"><expr pos:start="71:43" pos:end="71:59"><name pos:start="71:43" pos:end="71:59"><name pos:start="71:43" pos:end="71:43">s</name><operator pos:start="71:44" pos:end="71:45">-&gt;</operator><name pos:start="71:46" pos:end="71:52">gp_regs</name><index pos:start="71:53" pos:end="71:59">[<expr pos:start="71:54" pos:end="71:58"><name pos:start="71:54" pos:end="71:58">reg_b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:24"><decl pos:start="73:9" pos:end="73:23"><type pos:start="73:9" pos:end="73:13"><name pos:start="73:9" pos:end="73:13">float</name></type> <name pos:start="73:15" pos:end="73:15">t</name> <init pos:start="73:17" pos:end="73:23">= <expr pos:start="73:19" pos:end="73:23"><name pos:start="73:19" pos:end="73:19">a</name> <operator pos:start="73:21" pos:end="73:21">*</operator> <name pos:start="73:23" pos:end="73:23">b</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:42"><expr pos:start="75:9" pos:end="75:41"><name pos:start="75:9" pos:end="75:9">r</name> <operator pos:start="75:11" pos:end="75:11">=</operator> <call pos:start="75:13" pos:end="75:41"><name pos:start="75:13" pos:end="75:28">REINTERPRET_CAST</name><argument_list pos:start="75:29" pos:end="75:41">(<argument pos:start="75:30" pos:end="75:37"><expr pos:start="75:30" pos:end="75:37"><name pos:start="75:30" pos:end="75:37">uint32_t</name></expr></argument>, <argument pos:start="75:40" pos:end="75:40"><expr pos:start="75:40" pos:end="75:40"><name pos:start="75:40" pos:end="75:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:31"><expr pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:15">latency</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:30">LATENCY_FMUL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:69"><expr pos:start="79:9" pos:end="79:68"><call pos:start="79:9" pos:end="79:68"><name pos:start="79:9" pos:end="79:14">D_EXEC</name><argument_list pos:start="79:15" pos:end="79:68">(<argument pos:start="79:16" pos:end="79:67"><expr pos:start="79:16" pos:end="79:67"><call pos:start="79:16" pos:end="79:67"><name pos:start="79:16" pos:end="79:23">qemu_log</name><argument_list pos:start="79:24" pos:end="79:67">(<argument pos:start="79:25" pos:end="79:54"><expr pos:start="79:25" pos:end="79:54"><literal type="string" pos:start="79:25" pos:end="79:54">"MUL a=%f b=%f t=%f, r=%08x\n"</literal></expr></argument>, <argument pos:start="79:57" pos:end="79:57"><expr pos:start="79:57" pos:end="79:57"><name pos:start="79:57" pos:end="79:57">a</name></expr></argument>, <argument pos:start="79:60" pos:end="79:60"><expr pos:start="79:60" pos:end="79:60"><name pos:start="79:60" pos:end="79:60">b</name></expr></argument>, <argument pos:start="79:63" pos:end="79:63"><expr pos:start="79:63" pos:end="79:63"><name pos:start="79:63" pos:end="79:63">t</name></expr></argument>, <argument pos:start="79:66" pos:end="79:66"><expr pos:start="79:66" pos:end="79:66"><name pos:start="79:66" pos:end="79:66">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="81:7" pos:end="81:12">break;</break>

    <case pos:start="83:5" pos:end="83:17">case <expr pos:start="83:10" pos:end="83:16"><name pos:start="83:10" pos:end="83:16">OP_FABS</name></expr>:</case>

    <block pos:start="85:5" pos:end="97:5">{<block_content pos:start="87:9" pos:end="95:61">

        <decl_stmt pos:start="87:9" pos:end="87:61"><decl pos:start="87:9" pos:end="87:60"><type pos:start="87:9" pos:end="87:13"><name pos:start="87:9" pos:end="87:13">float</name></type> <name pos:start="87:15" pos:end="87:15">a</name> <init pos:start="87:17" pos:end="87:60">= <expr pos:start="87:19" pos:end="87:60"><call pos:start="87:19" pos:end="87:60"><name pos:start="87:19" pos:end="87:34">REINTERPRET_CAST</name><argument_list pos:start="87:35" pos:end="87:60">(<argument pos:start="87:36" pos:end="87:40"><expr pos:start="87:36" pos:end="87:40"><name pos:start="87:36" pos:end="87:40">float</name></expr></argument>, <argument pos:start="87:43" pos:end="87:59"><expr pos:start="87:43" pos:end="87:59"><name pos:start="87:43" pos:end="87:59"><name pos:start="87:43" pos:end="87:43">s</name><operator pos:start="87:44" pos:end="87:45">-&gt;</operator><name pos:start="87:46" pos:end="87:52">gp_regs</name><index pos:start="87:53" pos:end="87:59">[<expr pos:start="87:54" pos:end="87:58"><name pos:start="87:54" pos:end="87:58">reg_a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="89:9" pos:end="89:27"><decl pos:start="89:9" pos:end="89:26"><type pos:start="89:9" pos:end="89:13"><name pos:start="89:9" pos:end="89:13">float</name></type> <name pos:start="89:15" pos:end="89:15">t</name> <init pos:start="89:17" pos:end="89:26">= <expr pos:start="89:19" pos:end="89:26"><call pos:start="89:19" pos:end="89:26"><name pos:start="89:19" pos:end="89:23">fabsf</name><argument_list pos:start="89:24" pos:end="89:26">(<argument pos:start="89:25" pos:end="89:25"><expr pos:start="89:25" pos:end="89:25"><name pos:start="89:25" pos:end="89:25">a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:42"><expr pos:start="91:9" pos:end="91:41"><name pos:start="91:9" pos:end="91:9">r</name> <operator pos:start="91:11" pos:end="91:11">=</operator> <call pos:start="91:13" pos:end="91:41"><name pos:start="91:13" pos:end="91:28">REINTERPRET_CAST</name><argument_list pos:start="91:29" pos:end="91:41">(<argument pos:start="91:30" pos:end="91:37"><expr pos:start="91:30" pos:end="91:37"><name pos:start="91:30" pos:end="91:37">uint32_t</name></expr></argument>, <argument pos:start="91:40" pos:end="91:40"><expr pos:start="91:40" pos:end="91:40"><name pos:start="91:40" pos:end="91:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:31"><expr pos:start="93:9" pos:end="93:30"><name pos:start="93:9" pos:end="93:15">latency</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <name pos:start="93:19" pos:end="93:30">LATENCY_FABS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:61"><expr pos:start="95:9" pos:end="95:60"><call pos:start="95:9" pos:end="95:60"><name pos:start="95:9" pos:end="95:14">D_EXEC</name><argument_list pos:start="95:15" pos:end="95:60">(<argument pos:start="95:16" pos:end="95:59"><expr pos:start="95:16" pos:end="95:59"><call pos:start="95:16" pos:end="95:59"><name pos:start="95:16" pos:end="95:23">qemu_log</name><argument_list pos:start="95:24" pos:end="95:59">(<argument pos:start="95:25" pos:end="95:49"><expr pos:start="95:25" pos:end="95:49"><literal type="string" pos:start="95:25" pos:end="95:49">"ABS a=%f t=%f, r=%08x\n"</literal></expr></argument>, <argument pos:start="95:52" pos:end="95:52"><expr pos:start="95:52" pos:end="95:52"><name pos:start="95:52" pos:end="95:52">a</name></expr></argument>, <argument pos:start="95:55" pos:end="95:55"><expr pos:start="95:55" pos:end="95:55"><name pos:start="95:55" pos:end="95:55">t</name></expr></argument>, <argument pos:start="95:58" pos:end="95:58"><expr pos:start="95:58" pos:end="95:58"><name pos:start="95:58" pos:end="95:58">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="97:7" pos:end="97:12">break;</break>

    <case pos:start="99:5" pos:end="99:16">case <expr pos:start="99:10" pos:end="99:15"><name pos:start="99:10" pos:end="99:15">OP_F2I</name></expr>:</case>

    <block pos:start="101:5" pos:end="113:5">{<block_content pos:start="103:9" pos:end="111:61">

        <decl_stmt pos:start="103:9" pos:end="103:61"><decl pos:start="103:9" pos:end="103:60"><type pos:start="103:9" pos:end="103:13"><name pos:start="103:9" pos:end="103:13">float</name></type> <name pos:start="103:15" pos:end="103:15">a</name> <init pos:start="103:17" pos:end="103:60">= <expr pos:start="103:19" pos:end="103:60"><call pos:start="103:19" pos:end="103:60"><name pos:start="103:19" pos:end="103:34">REINTERPRET_CAST</name><argument_list pos:start="103:35" pos:end="103:60">(<argument pos:start="103:36" pos:end="103:40"><expr pos:start="103:36" pos:end="103:40"><name pos:start="103:36" pos:end="103:40">float</name></expr></argument>, <argument pos:start="103:43" pos:end="103:59"><expr pos:start="103:43" pos:end="103:59"><name pos:start="103:43" pos:end="103:59"><name pos:start="103:43" pos:end="103:43">s</name><operator pos:start="103:44" pos:end="103:45">-&gt;</operator><name pos:start="103:46" pos:end="103:52">gp_regs</name><index pos:start="103:53" pos:end="103:59">[<expr pos:start="103:54" pos:end="103:58"><name pos:start="103:54" pos:end="103:58">reg_a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="105:9" pos:end="105:22"><decl pos:start="105:9" pos:end="105:21"><type pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:15">int32_t</name></type> <name pos:start="105:17" pos:end="105:17">t</name> <init pos:start="105:19" pos:end="105:21">= <expr pos:start="105:21" pos:end="105:21"><name pos:start="105:21" pos:end="105:21">a</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:42"><expr pos:start="107:9" pos:end="107:41"><name pos:start="107:9" pos:end="107:9">r</name> <operator pos:start="107:11" pos:end="107:11">=</operator> <call pos:start="107:13" pos:end="107:41"><name pos:start="107:13" pos:end="107:28">REINTERPRET_CAST</name><argument_list pos:start="107:29" pos:end="107:41">(<argument pos:start="107:30" pos:end="107:37"><expr pos:start="107:30" pos:end="107:37"><name pos:start="107:30" pos:end="107:37">uint32_t</name></expr></argument>, <argument pos:start="107:40" pos:end="107:40"><expr pos:start="107:40" pos:end="107:40"><name pos:start="107:40" pos:end="107:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:30"><expr pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:15">latency</name> <operator pos:start="109:17" pos:end="109:17">=</operator> <name pos:start="109:19" pos:end="109:29">LATENCY_F2I</name></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:61"><expr pos:start="111:9" pos:end="111:60"><call pos:start="111:9" pos:end="111:60"><name pos:start="111:9" pos:end="111:14">D_EXEC</name><argument_list pos:start="111:15" pos:end="111:60">(<argument pos:start="111:16" pos:end="111:59"><expr pos:start="111:16" pos:end="111:59"><call pos:start="111:16" pos:end="111:59"><name pos:start="111:16" pos:end="111:23">qemu_log</name><argument_list pos:start="111:24" pos:end="111:59">(<argument pos:start="111:25" pos:end="111:49"><expr pos:start="111:25" pos:end="111:49"><literal type="string" pos:start="111:25" pos:end="111:49">"F2I a=%f t=%d, r=%08x\n"</literal></expr></argument>, <argument pos:start="111:52" pos:end="111:52"><expr pos:start="111:52" pos:end="111:52"><name pos:start="111:52" pos:end="111:52">a</name></expr></argument>, <argument pos:start="111:55" pos:end="111:55"><expr pos:start="111:55" pos:end="111:55"><name pos:start="111:55" pos:end="111:55">t</name></expr></argument>, <argument pos:start="111:58" pos:end="111:58"><expr pos:start="111:58" pos:end="111:58"><name pos:start="111:58" pos:end="111:58">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="113:7" pos:end="113:12">break;</break>

    <case pos:start="115:5" pos:end="115:16">case <expr pos:start="115:10" pos:end="115:15"><name pos:start="115:10" pos:end="115:15">OP_I2F</name></expr>:</case>

    <block pos:start="117:5" pos:end="129:5">{<block_content pos:start="119:9" pos:end="127:63">

        <decl_stmt pos:start="119:9" pos:end="119:65"><decl pos:start="119:9" pos:end="119:64"><type pos:start="119:9" pos:end="119:15"><name pos:start="119:9" pos:end="119:15">int32_t</name></type> <name pos:start="119:17" pos:end="119:17">a</name> <init pos:start="119:19" pos:end="119:64">= <expr pos:start="119:21" pos:end="119:64"><call pos:start="119:21" pos:end="119:64"><name pos:start="119:21" pos:end="119:36">REINTERPRET_CAST</name><argument_list pos:start="119:37" pos:end="119:64">(<argument pos:start="119:38" pos:end="119:44"><expr pos:start="119:38" pos:end="119:44"><name pos:start="119:38" pos:end="119:44">int32_t</name></expr></argument>, <argument pos:start="119:47" pos:end="119:63"><expr pos:start="119:47" pos:end="119:63"><name pos:start="119:47" pos:end="119:63"><name pos:start="119:47" pos:end="119:47">s</name><operator pos:start="119:48" pos:end="119:49">-&gt;</operator><name pos:start="119:50" pos:end="119:56">gp_regs</name><index pos:start="119:57" pos:end="119:63">[<expr pos:start="119:58" pos:end="119:62"><name pos:start="119:58" pos:end="119:62">reg_a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="121:9" pos:end="121:20"><decl pos:start="121:9" pos:end="121:19"><type pos:start="121:9" pos:end="121:13"><name pos:start="121:9" pos:end="121:13">float</name></type> <name pos:start="121:15" pos:end="121:15">t</name> <init pos:start="121:17" pos:end="121:19">= <expr pos:start="121:19" pos:end="121:19"><name pos:start="121:19" pos:end="121:19">a</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:42"><expr pos:start="123:9" pos:end="123:41"><name pos:start="123:9" pos:end="123:9">r</name> <operator pos:start="123:11" pos:end="123:11">=</operator> <call pos:start="123:13" pos:end="123:41"><name pos:start="123:13" pos:end="123:28">REINTERPRET_CAST</name><argument_list pos:start="123:29" pos:end="123:41">(<argument pos:start="123:30" pos:end="123:37"><expr pos:start="123:30" pos:end="123:37"><name pos:start="123:30" pos:end="123:37">uint32_t</name></expr></argument>, <argument pos:start="123:40" pos:end="123:40"><expr pos:start="123:40" pos:end="123:40"><name pos:start="123:40" pos:end="123:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:30"><expr pos:start="125:9" pos:end="125:29"><name pos:start="125:9" pos:end="125:15">latency</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <name pos:start="125:19" pos:end="125:29">LATENCY_I2F</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:63"><expr pos:start="127:9" pos:end="127:62"><call pos:start="127:9" pos:end="127:62"><name pos:start="127:9" pos:end="127:14">D_EXEC</name><argument_list pos:start="127:15" pos:end="127:62">(<argument pos:start="127:16" pos:end="127:61"><expr pos:start="127:16" pos:end="127:61"><call pos:start="127:16" pos:end="127:61"><name pos:start="127:16" pos:end="127:23">qemu_log</name><argument_list pos:start="127:24" pos:end="127:61">(<argument pos:start="127:25" pos:end="127:51"><expr pos:start="127:25" pos:end="127:51"><literal type="string" pos:start="127:25" pos:end="127:51">"I2F a=%08x t=%f, r=%08x\n"</literal></expr></argument>, <argument pos:start="127:54" pos:end="127:54"><expr pos:start="127:54" pos:end="127:54"><name pos:start="127:54" pos:end="127:54">a</name></expr></argument>, <argument pos:start="127:57" pos:end="127:57"><expr pos:start="127:57" pos:end="127:57"><name pos:start="127:57" pos:end="127:57">t</name></expr></argument>, <argument pos:start="127:60" pos:end="127:60"><expr pos:start="127:60" pos:end="127:60"><name pos:start="127:60" pos:end="127:60">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="129:7" pos:end="129:12">break;</break>

    <case pos:start="131:5" pos:end="131:20">case <expr pos:start="131:10" pos:end="131:19"><name pos:start="131:10" pos:end="131:19">OP_VECTOUT</name></expr>:</case>

    <block pos:start="133:5" pos:end="155:5">{<block_content pos:start="135:9" pos:end="153:52">

        <decl_stmt pos:start="135:9" pos:end="135:52"><decl pos:start="135:9" pos:end="135:51"><type pos:start="135:9" pos:end="135:16"><name pos:start="135:9" pos:end="135:16">uint32_t</name></type> <name pos:start="135:18" pos:end="135:18">a</name> <init pos:start="135:20" pos:end="135:51">= <expr pos:start="135:22" pos:end="135:51"><call pos:start="135:22" pos:end="135:51"><name pos:start="135:22" pos:end="135:32">cpu_to_be32</name><argument_list pos:start="135:33" pos:end="135:51">(<argument pos:start="135:34" pos:end="135:50"><expr pos:start="135:34" pos:end="135:50"><name pos:start="135:34" pos:end="135:50"><name pos:start="135:34" pos:end="135:34">s</name><operator pos:start="135:35" pos:end="135:36">-&gt;</operator><name pos:start="135:37" pos:end="135:43">gp_regs</name><index pos:start="135:44" pos:end="135:50">[<expr pos:start="135:45" pos:end="135:49"><name pos:start="135:45" pos:end="135:49">reg_a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="137:9" pos:end="137:52"><decl pos:start="137:9" pos:end="137:51"><type pos:start="137:9" pos:end="137:16"><name pos:start="137:9" pos:end="137:16">uint32_t</name></type> <name pos:start="137:18" pos:end="137:18">b</name> <init pos:start="137:20" pos:end="137:51">= <expr pos:start="137:22" pos:end="137:51"><call pos:start="137:22" pos:end="137:51"><name pos:start="137:22" pos:end="137:32">cpu_to_be32</name><argument_list pos:start="137:33" pos:end="137:51">(<argument pos:start="137:34" pos:end="137:50"><expr pos:start="137:34" pos:end="137:50"><name pos:start="137:34" pos:end="137:50"><name pos:start="137:34" pos:end="137:34">s</name><operator pos:start="137:35" pos:end="137:36">-&gt;</operator><name pos:start="137:37" pos:end="137:43">gp_regs</name><index pos:start="137:44" pos:end="137:50">[<expr pos:start="137:45" pos:end="137:49"><name pos:start="137:45" pos:end="137:49">reg_b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="139:9" pos:end="143:58"><decl pos:start="139:9" pos:end="143:57"><type pos:start="139:9" pos:end="139:26"><name pos:start="139:9" pos:end="139:26">target_phys_addr_t</name></type> <name pos:start="139:28" pos:end="139:34">dma_ptr</name> <init pos:start="139:36" pos:end="143:57">=

            <expr pos:start="141:13" pos:end="143:57"><call pos:start="141:13" pos:end="143:57"><name pos:start="141:13" pos:end="141:27">get_dma_address</name><argument_list pos:start="141:28" pos:end="143:57">(<argument pos:start="141:29" pos:end="141:47"><expr pos:start="141:29" pos:end="141:47"><name pos:start="141:29" pos:end="141:47"><name pos:start="141:29" pos:end="141:29">s</name><operator pos:start="141:30" pos:end="141:31">-&gt;</operator><name pos:start="141:32" pos:end="141:35">regs</name><index pos:start="141:36" pos:end="141:47">[<expr pos:start="141:37" pos:end="141:46"><name pos:start="141:37" pos:end="141:46">R_MESHBASE</name></expr>]</index></name></expr></argument>,

                    <argument pos:start="143:21" pos:end="143:37"><expr pos:start="143:21" pos:end="143:37"><name pos:start="143:21" pos:end="143:37"><name pos:start="143:21" pos:end="143:21">s</name><operator pos:start="143:22" pos:end="143:23">-&gt;</operator><name pos:start="143:24" pos:end="143:30">gp_regs</name><index pos:start="143:31" pos:end="143:37">[<expr pos:start="143:32" pos:end="143:36"><name pos:start="143:32" pos:end="143:36">GPR_X</name></expr>]</index></name></expr></argument>, <argument pos:start="143:40" pos:end="143:56"><expr pos:start="143:40" pos:end="143:56"><name pos:start="143:40" pos:end="143:56"><name pos:start="143:40" pos:end="143:40">s</name><operator pos:start="143:41" pos:end="143:42">-&gt;</operator><name pos:start="143:43" pos:end="143:49">gp_regs</name><index pos:start="143:50" pos:end="143:56">[<expr pos:start="143:51" pos:end="143:55"><name pos:start="143:51" pos:end="143:55">GPR_Y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:61"><expr pos:start="145:9" pos:end="145:60"><call pos:start="145:9" pos:end="145:60"><name pos:start="145:9" pos:end="145:33">cpu_physical_memory_write</name><argument_list pos:start="145:34" pos:end="145:60">(<argument pos:start="145:35" pos:end="145:41"><expr pos:start="145:35" pos:end="145:41"><name pos:start="145:35" pos:end="145:41">dma_ptr</name></expr></argument>, <argument pos:start="145:44" pos:end="145:56"><expr pos:start="145:44" pos:end="145:56"><operator pos:start="145:44" pos:end="145:44">(</operator><name pos:start="145:45" pos:end="145:51">uint8_t</name> <operator pos:start="145:53" pos:end="145:53">*</operator><operator pos:start="145:54" pos:end="145:54">)</operator><operator pos:start="145:55" pos:end="145:55">&amp;</operator><name pos:start="145:56" pos:end="145:56">a</name></expr></argument>, <argument pos:start="145:59" pos:end="145:59"><expr pos:start="145:59" pos:end="145:59"><literal type="number" pos:start="145:59" pos:end="145:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:65"><expr pos:start="147:9" pos:end="147:64"><call pos:start="147:9" pos:end="147:64"><name pos:start="147:9" pos:end="147:33">cpu_physical_memory_write</name><argument_list pos:start="147:34" pos:end="147:64">(<argument pos:start="147:35" pos:end="147:45"><expr pos:start="147:35" pos:end="147:45"><name pos:start="147:35" pos:end="147:41">dma_ptr</name> <operator pos:start="147:43" pos:end="147:43">+</operator> <literal type="number" pos:start="147:45" pos:end="147:45">4</literal></expr></argument>, <argument pos:start="147:48" pos:end="147:60"><expr pos:start="147:48" pos:end="147:60"><operator pos:start="147:48" pos:end="147:48">(</operator><name pos:start="147:49" pos:end="147:55">uint8_t</name> <operator pos:start="147:57" pos:end="147:57">*</operator><operator pos:start="147:58" pos:end="147:58">)</operator><operator pos:start="147:59" pos:end="147:59">&amp;</operator><name pos:start="147:60" pos:end="147:60">b</name></expr></argument>, <argument pos:start="147:63" pos:end="147:63"><expr pos:start="147:63" pos:end="147:63"><literal type="number" pos:start="147:63" pos:end="147:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:41"><expr pos:start="149:9" pos:end="149:40"><name pos:start="149:9" pos:end="149:26"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:15">regs</name><index pos:start="149:16" pos:end="149:26">[<expr pos:start="149:17" pos:end="149:25"><name pos:start="149:17" pos:end="149:25">R_LASTDMA</name></expr>]</index></name> <operator pos:start="149:28" pos:end="149:28">=</operator> <name pos:start="149:30" pos:end="149:36">dma_ptr</name> <operator pos:start="149:38" pos:end="149:38">+</operator> <literal type="number" pos:start="149:40" pos:end="149:40">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:76"><expr pos:start="151:9" pos:end="151:75"><call pos:start="151:9" pos:end="151:75"><name pos:start="151:9" pos:end="151:14">D_EXEC</name><argument_list pos:start="151:15" pos:end="151:75">(<argument pos:start="151:16" pos:end="151:74"><expr pos:start="151:16" pos:end="151:74"><call pos:start="151:16" pos:end="151:74"><name pos:start="151:16" pos:end="151:23">qemu_log</name><argument_list pos:start="151:24" pos:end="151:74">(<argument pos:start="151:25" pos:end="151:58"><expr pos:start="151:25" pos:end="151:58"><literal type="string" pos:start="151:25" pos:end="151:58">"VECTOUT a=%08x b=%08x dma=%08x\n"</literal></expr></argument>, <argument pos:start="151:61" pos:end="151:61"><expr pos:start="151:61" pos:end="151:61"><name pos:start="151:61" pos:end="151:61">a</name></expr></argument>, <argument pos:start="151:64" pos:end="151:64"><expr pos:start="151:64" pos:end="151:64"><name pos:start="151:64" pos:end="151:64">b</name></expr></argument>, <argument pos:start="151:67" pos:end="151:73"><expr pos:start="151:67" pos:end="151:73"><name pos:start="151:67" pos:end="151:73">dma_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:52"><expr pos:start="153:9" pos:end="153:51"><call pos:start="153:9" pos:end="153:51"><name pos:start="153:9" pos:end="153:36">trace_milkymist_pfpu_vectout</name><argument_list pos:start="153:37" pos:end="153:51">(<argument pos:start="153:38" pos:end="153:38"><expr pos:start="153:38" pos:end="153:38"><name pos:start="153:38" pos:end="153:38">a</name></expr></argument>, <argument pos:start="153:41" pos:end="153:41"><expr pos:start="153:41" pos:end="153:41"><name pos:start="153:41" pos:end="153:41">b</name></expr></argument>, <argument pos:start="153:44" pos:end="153:50"><expr pos:start="153:44" pos:end="153:50"><name pos:start="153:44" pos:end="153:50">dma_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="155:7" pos:end="155:12">break;</break>

    <case pos:start="157:5" pos:end="157:16">case <expr pos:start="157:10" pos:end="157:15"><name pos:start="157:10" pos:end="157:15">OP_SIN</name></expr>:</case>

    <block pos:start="159:5" pos:end="171:5">{<block_content pos:start="161:9" pos:end="169:61">

        <decl_stmt pos:start="161:9" pos:end="161:65"><decl pos:start="161:9" pos:end="161:64"><type pos:start="161:9" pos:end="161:15"><name pos:start="161:9" pos:end="161:15">int32_t</name></type> <name pos:start="161:17" pos:end="161:17">a</name> <init pos:start="161:19" pos:end="161:64">= <expr pos:start="161:21" pos:end="161:64"><call pos:start="161:21" pos:end="161:64"><name pos:start="161:21" pos:end="161:36">REINTERPRET_CAST</name><argument_list pos:start="161:37" pos:end="161:64">(<argument pos:start="161:38" pos:end="161:44"><expr pos:start="161:38" pos:end="161:44"><name pos:start="161:38" pos:end="161:44">int32_t</name></expr></argument>, <argument pos:start="161:47" pos:end="161:63"><expr pos:start="161:47" pos:end="161:63"><name pos:start="161:47" pos:end="161:63"><name pos:start="161:47" pos:end="161:47">s</name><operator pos:start="161:48" pos:end="161:49">-&gt;</operator><name pos:start="161:50" pos:end="161:56">gp_regs</name><index pos:start="161:57" pos:end="161:63">[<expr pos:start="161:58" pos:end="161:62"><name pos:start="161:58" pos:end="161:62">reg_a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="163:9" pos:end="163:54"><decl pos:start="163:9" pos:end="163:53"><type pos:start="163:9" pos:end="163:13"><name pos:start="163:9" pos:end="163:13">float</name></type> <name pos:start="163:15" pos:end="163:15">t</name> <init pos:start="163:17" pos:end="163:53">= <expr pos:start="163:19" pos:end="163:53"><call pos:start="163:19" pos:end="163:53"><name pos:start="163:19" pos:end="163:22">sinf</name><argument_list pos:start="163:23" pos:end="163:53">(<argument pos:start="163:24" pos:end="163:52"><expr pos:start="163:24" pos:end="163:52"><name pos:start="163:24" pos:end="163:24">a</name> <operator pos:start="163:26" pos:end="163:26">*</operator> <operator pos:start="163:28" pos:end="163:28">(</operator><literal type="number" pos:start="163:29" pos:end="163:32">1.0f</literal> <operator pos:start="163:34" pos:end="163:34">/</operator> <operator pos:start="163:36" pos:end="163:36">(</operator><name pos:start="163:37" pos:end="163:40">M_PI</name> <operator pos:start="163:42" pos:end="163:42">*</operator> <literal type="number" pos:start="163:44" pos:end="163:50">4096.0f</literal><operator pos:start="163:51" pos:end="163:51">)</operator><operator pos:start="163:52" pos:end="163:52">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:42"><expr pos:start="165:9" pos:end="165:41"><name pos:start="165:9" pos:end="165:9">r</name> <operator pos:start="165:11" pos:end="165:11">=</operator> <call pos:start="165:13" pos:end="165:41"><name pos:start="165:13" pos:end="165:28">REINTERPRET_CAST</name><argument_list pos:start="165:29" pos:end="165:41">(<argument pos:start="165:30" pos:end="165:37"><expr pos:start="165:30" pos:end="165:37"><name pos:start="165:30" pos:end="165:37">uint32_t</name></expr></argument>, <argument pos:start="165:40" pos:end="165:40"><expr pos:start="165:40" pos:end="165:40"><name pos:start="165:40" pos:end="165:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:30"><expr pos:start="167:9" pos:end="167:29"><name pos:start="167:9" pos:end="167:15">latency</name> <operator pos:start="167:17" pos:end="167:17">=</operator> <name pos:start="167:19" pos:end="167:29">LATENCY_SIN</name></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:61"><expr pos:start="169:9" pos:end="169:60"><call pos:start="169:9" pos:end="169:60"><name pos:start="169:9" pos:end="169:14">D_EXEC</name><argument_list pos:start="169:15" pos:end="169:60">(<argument pos:start="169:16" pos:end="169:59"><expr pos:start="169:16" pos:end="169:59"><call pos:start="169:16" pos:end="169:59"><name pos:start="169:16" pos:end="169:23">qemu_log</name><argument_list pos:start="169:24" pos:end="169:59">(<argument pos:start="169:25" pos:end="169:49"><expr pos:start="169:25" pos:end="169:49"><literal type="string" pos:start="169:25" pos:end="169:49">"SIN a=%d t=%f, r=%08x\n"</literal></expr></argument>, <argument pos:start="169:52" pos:end="169:52"><expr pos:start="169:52" pos:end="169:52"><name pos:start="169:52" pos:end="169:52">a</name></expr></argument>, <argument pos:start="169:55" pos:end="169:55"><expr pos:start="169:55" pos:end="169:55"><name pos:start="169:55" pos:end="169:55">t</name></expr></argument>, <argument pos:start="169:58" pos:end="169:58"><expr pos:start="169:58" pos:end="169:58"><name pos:start="169:58" pos:end="169:58">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="171:7" pos:end="171:12">break;</break>

    <case pos:start="173:5" pos:end="173:16">case <expr pos:start="173:10" pos:end="173:15"><name pos:start="173:10" pos:end="173:15">OP_COS</name></expr>:</case>

    <block pos:start="175:5" pos:end="187:5">{<block_content pos:start="177:9" pos:end="185:61">

        <decl_stmt pos:start="177:9" pos:end="177:65"><decl pos:start="177:9" pos:end="177:64"><type pos:start="177:9" pos:end="177:15"><name pos:start="177:9" pos:end="177:15">int32_t</name></type> <name pos:start="177:17" pos:end="177:17">a</name> <init pos:start="177:19" pos:end="177:64">= <expr pos:start="177:21" pos:end="177:64"><call pos:start="177:21" pos:end="177:64"><name pos:start="177:21" pos:end="177:36">REINTERPRET_CAST</name><argument_list pos:start="177:37" pos:end="177:64">(<argument pos:start="177:38" pos:end="177:44"><expr pos:start="177:38" pos:end="177:44"><name pos:start="177:38" pos:end="177:44">int32_t</name></expr></argument>, <argument pos:start="177:47" pos:end="177:63"><expr pos:start="177:47" pos:end="177:63"><name pos:start="177:47" pos:end="177:63"><name pos:start="177:47" pos:end="177:47">s</name><operator pos:start="177:48" pos:end="177:49">-&gt;</operator><name pos:start="177:50" pos:end="177:56">gp_regs</name><index pos:start="177:57" pos:end="177:63">[<expr pos:start="177:58" pos:end="177:62"><name pos:start="177:58" pos:end="177:62">reg_a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="179:9" pos:end="179:54"><decl pos:start="179:9" pos:end="179:53"><type pos:start="179:9" pos:end="179:13"><name pos:start="179:9" pos:end="179:13">float</name></type> <name pos:start="179:15" pos:end="179:15">t</name> <init pos:start="179:17" pos:end="179:53">= <expr pos:start="179:19" pos:end="179:53"><call pos:start="179:19" pos:end="179:53"><name pos:start="179:19" pos:end="179:22">cosf</name><argument_list pos:start="179:23" pos:end="179:53">(<argument pos:start="179:24" pos:end="179:52"><expr pos:start="179:24" pos:end="179:52"><name pos:start="179:24" pos:end="179:24">a</name> <operator pos:start="179:26" pos:end="179:26">*</operator> <operator pos:start="179:28" pos:end="179:28">(</operator><literal type="number" pos:start="179:29" pos:end="179:32">1.0f</literal> <operator pos:start="179:34" pos:end="179:34">/</operator> <operator pos:start="179:36" pos:end="179:36">(</operator><name pos:start="179:37" pos:end="179:40">M_PI</name> <operator pos:start="179:42" pos:end="179:42">*</operator> <literal type="number" pos:start="179:44" pos:end="179:50">4096.0f</literal><operator pos:start="179:51" pos:end="179:51">)</operator><operator pos:start="179:52" pos:end="179:52">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:42"><expr pos:start="181:9" pos:end="181:41"><name pos:start="181:9" pos:end="181:9">r</name> <operator pos:start="181:11" pos:end="181:11">=</operator> <call pos:start="181:13" pos:end="181:41"><name pos:start="181:13" pos:end="181:28">REINTERPRET_CAST</name><argument_list pos:start="181:29" pos:end="181:41">(<argument pos:start="181:30" pos:end="181:37"><expr pos:start="181:30" pos:end="181:37"><name pos:start="181:30" pos:end="181:37">uint32_t</name></expr></argument>, <argument pos:start="181:40" pos:end="181:40"><expr pos:start="181:40" pos:end="181:40"><name pos:start="181:40" pos:end="181:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:30"><expr pos:start="183:9" pos:end="183:29"><name pos:start="183:9" pos:end="183:15">latency</name> <operator pos:start="183:17" pos:end="183:17">=</operator> <name pos:start="183:19" pos:end="183:29">LATENCY_COS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:61"><expr pos:start="185:9" pos:end="185:60"><call pos:start="185:9" pos:end="185:60"><name pos:start="185:9" pos:end="185:14">D_EXEC</name><argument_list pos:start="185:15" pos:end="185:60">(<argument pos:start="185:16" pos:end="185:59"><expr pos:start="185:16" pos:end="185:59"><call pos:start="185:16" pos:end="185:59"><name pos:start="185:16" pos:end="185:23">qemu_log</name><argument_list pos:start="185:24" pos:end="185:59">(<argument pos:start="185:25" pos:end="185:49"><expr pos:start="185:25" pos:end="185:49"><literal type="string" pos:start="185:25" pos:end="185:49">"COS a=%d t=%f, r=%08x\n"</literal></expr></argument>, <argument pos:start="185:52" pos:end="185:52"><expr pos:start="185:52" pos:end="185:52"><name pos:start="185:52" pos:end="185:52">a</name></expr></argument>, <argument pos:start="185:55" pos:end="185:55"><expr pos:start="185:55" pos:end="185:55"><name pos:start="185:55" pos:end="185:55">t</name></expr></argument>, <argument pos:start="185:58" pos:end="185:58"><expr pos:start="185:58" pos:end="185:58"><name pos:start="185:58" pos:end="185:58">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="187:7" pos:end="187:12">break;</break>

    <case pos:start="189:5" pos:end="189:18">case <expr pos:start="189:10" pos:end="189:17"><name pos:start="189:10" pos:end="189:17">OP_ABOVE</name></expr>:</case>

    <block pos:start="191:5" pos:end="205:5">{<block_content pos:start="193:9" pos:end="203:71">

        <decl_stmt pos:start="193:9" pos:end="193:61"><decl pos:start="193:9" pos:end="193:60"><type pos:start="193:9" pos:end="193:13"><name pos:start="193:9" pos:end="193:13">float</name></type> <name pos:start="193:15" pos:end="193:15">a</name> <init pos:start="193:17" pos:end="193:60">= <expr pos:start="193:19" pos:end="193:60"><call pos:start="193:19" pos:end="193:60"><name pos:start="193:19" pos:end="193:34">REINTERPRET_CAST</name><argument_list pos:start="193:35" pos:end="193:60">(<argument pos:start="193:36" pos:end="193:40"><expr pos:start="193:36" pos:end="193:40"><name pos:start="193:36" pos:end="193:40">float</name></expr></argument>, <argument pos:start="193:43" pos:end="193:59"><expr pos:start="193:43" pos:end="193:59"><name pos:start="193:43" pos:end="193:59"><name pos:start="193:43" pos:end="193:43">s</name><operator pos:start="193:44" pos:end="193:45">-&gt;</operator><name pos:start="193:46" pos:end="193:52">gp_regs</name><index pos:start="193:53" pos:end="193:59">[<expr pos:start="193:54" pos:end="193:58"><name pos:start="193:54" pos:end="193:58">reg_a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="195:9" pos:end="195:61"><decl pos:start="195:9" pos:end="195:60"><type pos:start="195:9" pos:end="195:13"><name pos:start="195:9" pos:end="195:13">float</name></type> <name pos:start="195:15" pos:end="195:15">b</name> <init pos:start="195:17" pos:end="195:60">= <expr pos:start="195:19" pos:end="195:60"><call pos:start="195:19" pos:end="195:60"><name pos:start="195:19" pos:end="195:34">REINTERPRET_CAST</name><argument_list pos:start="195:35" pos:end="195:60">(<argument pos:start="195:36" pos:end="195:40"><expr pos:start="195:36" pos:end="195:40"><name pos:start="195:36" pos:end="195:40">float</name></expr></argument>, <argument pos:start="195:43" pos:end="195:59"><expr pos:start="195:43" pos:end="195:59"><name pos:start="195:43" pos:end="195:59"><name pos:start="195:43" pos:end="195:43">s</name><operator pos:start="195:44" pos:end="195:45">-&gt;</operator><name pos:start="195:46" pos:end="195:52">gp_regs</name><index pos:start="195:53" pos:end="195:59">[<expr pos:start="195:54" pos:end="195:58"><name pos:start="195:54" pos:end="195:58">reg_b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="197:9" pos:end="197:40"><decl pos:start="197:9" pos:end="197:39"><type pos:start="197:9" pos:end="197:13"><name pos:start="197:9" pos:end="197:13">float</name></type> <name pos:start="197:15" pos:end="197:15">t</name> <init pos:start="197:17" pos:end="197:39">= <expr pos:start="197:19" pos:end="197:39"><ternary pos:start="197:19" pos:end="197:39"><condition pos:start="197:19" pos:end="197:27"><expr pos:start="197:19" pos:end="197:25"><operator pos:start="197:19" pos:end="197:19">(</operator><name pos:start="197:20" pos:end="197:20">a</name> <operator pos:start="197:22" pos:end="197:22">&gt;</operator> <name pos:start="197:24" pos:end="197:24">b</name><operator pos:start="197:25" pos:end="197:25">)</operator></expr> ?</condition><then pos:start="197:29" pos:end="197:32"> <expr pos:start="197:29" pos:end="197:32"><literal type="number" pos:start="197:29" pos:end="197:32">1.0f</literal></expr> </then><else pos:start="197:34" pos:end="197:39">: <expr pos:start="197:36" pos:end="197:39"><literal type="number" pos:start="197:36" pos:end="197:39">0.0f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:42"><expr pos:start="199:9" pos:end="199:41"><name pos:start="199:9" pos:end="199:9">r</name> <operator pos:start="199:11" pos:end="199:11">=</operator> <call pos:start="199:13" pos:end="199:41"><name pos:start="199:13" pos:end="199:28">REINTERPRET_CAST</name><argument_list pos:start="199:29" pos:end="199:41">(<argument pos:start="199:30" pos:end="199:37"><expr pos:start="199:30" pos:end="199:37"><name pos:start="199:30" pos:end="199:37">uint32_t</name></expr></argument>, <argument pos:start="199:40" pos:end="199:40"><expr pos:start="199:40" pos:end="199:40"><name pos:start="199:40" pos:end="199:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:32"><expr pos:start="201:9" pos:end="201:31"><name pos:start="201:9" pos:end="201:15">latency</name> <operator pos:start="201:17" pos:end="201:17">=</operator> <name pos:start="201:19" pos:end="201:31">LATENCY_ABOVE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:71"><expr pos:start="203:9" pos:end="203:70"><call pos:start="203:9" pos:end="203:70"><name pos:start="203:9" pos:end="203:14">D_EXEC</name><argument_list pos:start="203:15" pos:end="203:70">(<argument pos:start="203:16" pos:end="203:69"><expr pos:start="203:16" pos:end="203:69"><call pos:start="203:16" pos:end="203:69"><name pos:start="203:16" pos:end="203:23">qemu_log</name><argument_list pos:start="203:24" pos:end="203:69">(<argument pos:start="203:25" pos:end="203:56"><expr pos:start="203:25" pos:end="203:56"><literal type="string" pos:start="203:25" pos:end="203:56">"ABOVE a=%f b=%f t=%f, r=%08x\n"</literal></expr></argument>, <argument pos:start="203:59" pos:end="203:59"><expr pos:start="203:59" pos:end="203:59"><name pos:start="203:59" pos:end="203:59">a</name></expr></argument>, <argument pos:start="203:62" pos:end="203:62"><expr pos:start="203:62" pos:end="203:62"><name pos:start="203:62" pos:end="203:62">b</name></expr></argument>, <argument pos:start="203:65" pos:end="203:65"><expr pos:start="203:65" pos:end="203:65"><name pos:start="203:65" pos:end="203:65">t</name></expr></argument>, <argument pos:start="203:68" pos:end="203:68"><expr pos:start="203:68" pos:end="203:68"><name pos:start="203:68" pos:end="203:68">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="205:7" pos:end="205:12">break;</break>

    <case pos:start="207:5" pos:end="207:18">case <expr pos:start="207:10" pos:end="207:17"><name pos:start="207:10" pos:end="207:17">OP_EQUAL</name></expr>:</case>

    <block pos:start="209:5" pos:end="223:5">{<block_content pos:start="211:9" pos:end="221:71">

        <decl_stmt pos:start="211:9" pos:end="211:61"><decl pos:start="211:9" pos:end="211:60"><type pos:start="211:9" pos:end="211:13"><name pos:start="211:9" pos:end="211:13">float</name></type> <name pos:start="211:15" pos:end="211:15">a</name> <init pos:start="211:17" pos:end="211:60">= <expr pos:start="211:19" pos:end="211:60"><call pos:start="211:19" pos:end="211:60"><name pos:start="211:19" pos:end="211:34">REINTERPRET_CAST</name><argument_list pos:start="211:35" pos:end="211:60">(<argument pos:start="211:36" pos:end="211:40"><expr pos:start="211:36" pos:end="211:40"><name pos:start="211:36" pos:end="211:40">float</name></expr></argument>, <argument pos:start="211:43" pos:end="211:59"><expr pos:start="211:43" pos:end="211:59"><name pos:start="211:43" pos:end="211:59"><name pos:start="211:43" pos:end="211:43">s</name><operator pos:start="211:44" pos:end="211:45">-&gt;</operator><name pos:start="211:46" pos:end="211:52">gp_regs</name><index pos:start="211:53" pos:end="211:59">[<expr pos:start="211:54" pos:end="211:58"><name pos:start="211:54" pos:end="211:58">reg_a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="213:9" pos:end="213:61"><decl pos:start="213:9" pos:end="213:60"><type pos:start="213:9" pos:end="213:13"><name pos:start="213:9" pos:end="213:13">float</name></type> <name pos:start="213:15" pos:end="213:15">b</name> <init pos:start="213:17" pos:end="213:60">= <expr pos:start="213:19" pos:end="213:60"><call pos:start="213:19" pos:end="213:60"><name pos:start="213:19" pos:end="213:34">REINTERPRET_CAST</name><argument_list pos:start="213:35" pos:end="213:60">(<argument pos:start="213:36" pos:end="213:40"><expr pos:start="213:36" pos:end="213:40"><name pos:start="213:36" pos:end="213:40">float</name></expr></argument>, <argument pos:start="213:43" pos:end="213:59"><expr pos:start="213:43" pos:end="213:59"><name pos:start="213:43" pos:end="213:59"><name pos:start="213:43" pos:end="213:43">s</name><operator pos:start="213:44" pos:end="213:45">-&gt;</operator><name pos:start="213:46" pos:end="213:52">gp_regs</name><index pos:start="213:53" pos:end="213:59">[<expr pos:start="213:54" pos:end="213:58"><name pos:start="213:54" pos:end="213:58">reg_b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="215:9" pos:end="215:41"><decl pos:start="215:9" pos:end="215:40"><type pos:start="215:9" pos:end="215:13"><name pos:start="215:9" pos:end="215:13">float</name></type> <name pos:start="215:15" pos:end="215:15">t</name> <init pos:start="215:17" pos:end="215:40">= <expr pos:start="215:19" pos:end="215:40"><ternary pos:start="215:19" pos:end="215:40"><condition pos:start="215:19" pos:end="215:28"><expr pos:start="215:19" pos:end="215:26"><operator pos:start="215:19" pos:end="215:19">(</operator><name pos:start="215:20" pos:end="215:20">a</name> <operator pos:start="215:22" pos:end="215:23">==</operator> <name pos:start="215:25" pos:end="215:25">b</name><operator pos:start="215:26" pos:end="215:26">)</operator></expr> ?</condition><then pos:start="215:30" pos:end="215:33"> <expr pos:start="215:30" pos:end="215:33"><literal type="number" pos:start="215:30" pos:end="215:33">1.0f</literal></expr> </then><else pos:start="215:35" pos:end="215:40">: <expr pos:start="215:37" pos:end="215:40"><literal type="number" pos:start="215:37" pos:end="215:40">0.0f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:42"><expr pos:start="217:9" pos:end="217:41"><name pos:start="217:9" pos:end="217:9">r</name> <operator pos:start="217:11" pos:end="217:11">=</operator> <call pos:start="217:13" pos:end="217:41"><name pos:start="217:13" pos:end="217:28">REINTERPRET_CAST</name><argument_list pos:start="217:29" pos:end="217:41">(<argument pos:start="217:30" pos:end="217:37"><expr pos:start="217:30" pos:end="217:37"><name pos:start="217:30" pos:end="217:37">uint32_t</name></expr></argument>, <argument pos:start="217:40" pos:end="217:40"><expr pos:start="217:40" pos:end="217:40"><name pos:start="217:40" pos:end="217:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:32"><expr pos:start="219:9" pos:end="219:31"><name pos:start="219:9" pos:end="219:15">latency</name> <operator pos:start="219:17" pos:end="219:17">=</operator> <name pos:start="219:19" pos:end="219:31">LATENCY_EQUAL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:71"><expr pos:start="221:9" pos:end="221:70"><call pos:start="221:9" pos:end="221:70"><name pos:start="221:9" pos:end="221:14">D_EXEC</name><argument_list pos:start="221:15" pos:end="221:70">(<argument pos:start="221:16" pos:end="221:69"><expr pos:start="221:16" pos:end="221:69"><call pos:start="221:16" pos:end="221:69"><name pos:start="221:16" pos:end="221:23">qemu_log</name><argument_list pos:start="221:24" pos:end="221:69">(<argument pos:start="221:25" pos:end="221:56"><expr pos:start="221:25" pos:end="221:56"><literal type="string" pos:start="221:25" pos:end="221:56">"EQUAL a=%f b=%f t=%f, r=%08x\n"</literal></expr></argument>, <argument pos:start="221:59" pos:end="221:59"><expr pos:start="221:59" pos:end="221:59"><name pos:start="221:59" pos:end="221:59">a</name></expr></argument>, <argument pos:start="221:62" pos:end="221:62"><expr pos:start="221:62" pos:end="221:62"><name pos:start="221:62" pos:end="221:62">b</name></expr></argument>, <argument pos:start="221:65" pos:end="221:65"><expr pos:start="221:65" pos:end="221:65"><name pos:start="221:65" pos:end="221:65">t</name></expr></argument>, <argument pos:start="221:68" pos:end="221:68"><expr pos:start="221:68" pos:end="221:68"><name pos:start="221:68" pos:end="221:68">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="223:7" pos:end="223:12">break;</break>

    <case pos:start="225:5" pos:end="225:17">case <expr pos:start="225:10" pos:end="225:16"><name pos:start="225:10" pos:end="225:16">OP_COPY</name></expr>:</case>

    <block pos:start="227:5" pos:end="235:5">{<block_content pos:start="229:9" pos:end="233:33">

        <expr_stmt pos:start="229:9" pos:end="229:30"><expr pos:start="229:9" pos:end="229:29"><name pos:start="229:9" pos:end="229:9">r</name> <operator pos:start="229:11" pos:end="229:11">=</operator> <name pos:start="229:13" pos:end="229:29"><name pos:start="229:13" pos:end="229:13">s</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:22">gp_regs</name><index pos:start="229:23" pos:end="229:29">[<expr pos:start="229:24" pos:end="229:28"><name pos:start="229:24" pos:end="229:28">reg_a</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:31"><expr pos:start="231:9" pos:end="231:30"><name pos:start="231:9" pos:end="231:15">latency</name> <operator pos:start="231:17" pos:end="231:17">=</operator> <name pos:start="231:19" pos:end="231:30">LATENCY_COPY</name></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:33"><expr pos:start="233:9" pos:end="233:32"><call pos:start="233:9" pos:end="233:32"><name pos:start="233:9" pos:end="233:14">D_EXEC</name><argument_list pos:start="233:15" pos:end="233:32">(<argument pos:start="233:16" pos:end="233:31"><expr pos:start="233:16" pos:end="233:31"><call pos:start="233:16" pos:end="233:31"><name pos:start="233:16" pos:end="233:23">qemu_log</name><argument_list pos:start="233:24" pos:end="233:31">(<argument pos:start="233:25" pos:end="233:30"><expr pos:start="233:25" pos:end="233:30"><literal type="string" pos:start="233:25" pos:end="233:30">"COPY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="235:7" pos:end="235:12">break;</break>

    <case pos:start="237:5" pos:end="237:15">case <expr pos:start="237:10" pos:end="237:14"><name pos:start="237:10" pos:end="237:14">OP_IF</name></expr>:</case>

    <block pos:start="239:5" pos:end="255:5">{<block_content pos:start="241:9" pos:end="253:76">

        <decl_stmt pos:start="241:9" pos:end="241:61"><decl pos:start="241:9" pos:end="241:60"><type pos:start="241:9" pos:end="241:13"><name pos:start="241:9" pos:end="241:13">float</name></type> <name pos:start="241:15" pos:end="241:15">a</name> <init pos:start="241:17" pos:end="241:60">= <expr pos:start="241:19" pos:end="241:60"><call pos:start="241:19" pos:end="241:60"><name pos:start="241:19" pos:end="241:34">REINTERPRET_CAST</name><argument_list pos:start="241:35" pos:end="241:60">(<argument pos:start="241:36" pos:end="241:40"><expr pos:start="241:36" pos:end="241:40"><name pos:start="241:36" pos:end="241:40">float</name></expr></argument>, <argument pos:start="241:43" pos:end="241:59"><expr pos:start="241:43" pos:end="241:59"><name pos:start="241:43" pos:end="241:59"><name pos:start="241:43" pos:end="241:43">s</name><operator pos:start="241:44" pos:end="241:45">-&gt;</operator><name pos:start="241:46" pos:end="241:52">gp_regs</name><index pos:start="241:53" pos:end="241:59">[<expr pos:start="241:54" pos:end="241:58"><name pos:start="241:54" pos:end="241:58">reg_a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="243:9" pos:end="243:61"><decl pos:start="243:9" pos:end="243:60"><type pos:start="243:9" pos:end="243:13"><name pos:start="243:9" pos:end="243:13">float</name></type> <name pos:start="243:15" pos:end="243:15">b</name> <init pos:start="243:17" pos:end="243:60">= <expr pos:start="243:19" pos:end="243:60"><call pos:start="243:19" pos:end="243:60"><name pos:start="243:19" pos:end="243:34">REINTERPRET_CAST</name><argument_list pos:start="243:35" pos:end="243:60">(<argument pos:start="243:36" pos:end="243:40"><expr pos:start="243:36" pos:end="243:40"><name pos:start="243:36" pos:end="243:40">float</name></expr></argument>, <argument pos:start="243:43" pos:end="243:59"><expr pos:start="243:43" pos:end="243:59"><name pos:start="243:43" pos:end="243:59"><name pos:start="243:43" pos:end="243:43">s</name><operator pos:start="243:44" pos:end="243:45">-&gt;</operator><name pos:start="243:46" pos:end="243:52">gp_regs</name><index pos:start="243:53" pos:end="243:59">[<expr pos:start="243:54" pos:end="243:58"><name pos:start="243:54" pos:end="243:58">reg_b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="245:9" pos:end="245:43"><decl pos:start="245:9" pos:end="245:42"><type pos:start="245:9" pos:end="245:16"><name pos:start="245:9" pos:end="245:16">uint32_t</name></type> <name pos:start="245:18" pos:end="245:18">f</name> <init pos:start="245:20" pos:end="245:42">= <expr pos:start="245:22" pos:end="245:42"><name pos:start="245:22" pos:end="245:42"><name pos:start="245:22" pos:end="245:22">s</name><operator pos:start="245:23" pos:end="245:24">-&gt;</operator><name pos:start="245:25" pos:end="245:31">gp_regs</name><index pos:start="245:32" pos:end="245:42">[<expr pos:start="245:33" pos:end="245:41"><name pos:start="245:33" pos:end="245:41">GPR_FLAGS</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="247:9" pos:end="247:35"><decl pos:start="247:9" pos:end="247:34"><type pos:start="247:9" pos:end="247:13"><name pos:start="247:9" pos:end="247:13">float</name></type> <name pos:start="247:15" pos:end="247:15">t</name> <init pos:start="247:17" pos:end="247:34">= <expr pos:start="247:19" pos:end="247:34"><ternary pos:start="247:19" pos:end="247:34"><condition pos:start="247:19" pos:end="247:28"><expr pos:start="247:19" pos:end="247:26"><operator pos:start="247:19" pos:end="247:19">(</operator><name pos:start="247:20" pos:end="247:20">f</name> <operator pos:start="247:22" pos:end="247:23">!=</operator> <literal type="number" pos:start="247:25" pos:end="247:25">0</literal><operator pos:start="247:26" pos:end="247:26">)</operator></expr> ?</condition><then pos:start="247:30" pos:end="247:30"> <expr pos:start="247:30" pos:end="247:30"><name pos:start="247:30" pos:end="247:30">a</name></expr> </then><else pos:start="247:32" pos:end="247:34">: <expr pos:start="247:34" pos:end="247:34"><name pos:start="247:34" pos:end="247:34">b</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:42"><expr pos:start="249:9" pos:end="249:41"><name pos:start="249:9" pos:end="249:9">r</name> <operator pos:start="249:11" pos:end="249:11">=</operator> <call pos:start="249:13" pos:end="249:41"><name pos:start="249:13" pos:end="249:28">REINTERPRET_CAST</name><argument_list pos:start="249:29" pos:end="249:41">(<argument pos:start="249:30" pos:end="249:37"><expr pos:start="249:30" pos:end="249:37"><name pos:start="249:30" pos:end="249:37">uint32_t</name></expr></argument>, <argument pos:start="249:40" pos:end="249:40"><expr pos:start="249:40" pos:end="249:40"><name pos:start="249:40" pos:end="249:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:29"><expr pos:start="251:9" pos:end="251:28"><name pos:start="251:9" pos:end="251:15">latency</name> <operator pos:start="251:17" pos:end="251:17">=</operator> <name pos:start="251:19" pos:end="251:28">LATENCY_IF</name></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:76"><expr pos:start="253:9" pos:end="253:75"><call pos:start="253:9" pos:end="253:75"><name pos:start="253:9" pos:end="253:14">D_EXEC</name><argument_list pos:start="253:15" pos:end="253:75">(<argument pos:start="253:16" pos:end="253:74"><expr pos:start="253:16" pos:end="253:74"><call pos:start="253:16" pos:end="253:74"><name pos:start="253:16" pos:end="253:23">qemu_log</name><argument_list pos:start="253:24" pos:end="253:74">(<argument pos:start="253:25" pos:end="253:58"><expr pos:start="253:25" pos:end="253:58"><literal type="string" pos:start="253:25" pos:end="253:58">"IF f=%u a=%f b=%f t=%f, r=%08x\n"</literal></expr></argument>, <argument pos:start="253:61" pos:end="253:61"><expr pos:start="253:61" pos:end="253:61"><name pos:start="253:61" pos:end="253:61">f</name></expr></argument>, <argument pos:start="253:64" pos:end="253:64"><expr pos:start="253:64" pos:end="253:64"><name pos:start="253:64" pos:end="253:64">a</name></expr></argument>, <argument pos:start="253:67" pos:end="253:67"><expr pos:start="253:67" pos:end="253:67"><name pos:start="253:67" pos:end="253:67">b</name></expr></argument>, <argument pos:start="253:70" pos:end="253:70"><expr pos:start="253:70" pos:end="253:70"><name pos:start="253:70" pos:end="253:70">t</name></expr></argument>, <argument pos:start="253:73" pos:end="253:73"><expr pos:start="253:73" pos:end="253:73"><name pos:start="253:73" pos:end="253:73">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="255:7" pos:end="255:12">break;</break>

    <case pos:start="257:5" pos:end="257:18">case <expr pos:start="257:10" pos:end="257:17"><name pos:start="257:10" pos:end="257:17">OP_TSIGN</name></expr>:</case>

    <block pos:start="259:5" pos:end="273:5">{<block_content pos:start="261:9" pos:end="271:71">

        <decl_stmt pos:start="261:9" pos:end="261:61"><decl pos:start="261:9" pos:end="261:60"><type pos:start="261:9" pos:end="261:13"><name pos:start="261:9" pos:end="261:13">float</name></type> <name pos:start="261:15" pos:end="261:15">a</name> <init pos:start="261:17" pos:end="261:60">= <expr pos:start="261:19" pos:end="261:60"><call pos:start="261:19" pos:end="261:60"><name pos:start="261:19" pos:end="261:34">REINTERPRET_CAST</name><argument_list pos:start="261:35" pos:end="261:60">(<argument pos:start="261:36" pos:end="261:40"><expr pos:start="261:36" pos:end="261:40"><name pos:start="261:36" pos:end="261:40">float</name></expr></argument>, <argument pos:start="261:43" pos:end="261:59"><expr pos:start="261:43" pos:end="261:59"><name pos:start="261:43" pos:end="261:59"><name pos:start="261:43" pos:end="261:43">s</name><operator pos:start="261:44" pos:end="261:45">-&gt;</operator><name pos:start="261:46" pos:end="261:52">gp_regs</name><index pos:start="261:53" pos:end="261:59">[<expr pos:start="261:54" pos:end="261:58"><name pos:start="261:54" pos:end="261:58">reg_a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="263:9" pos:end="263:61"><decl pos:start="263:9" pos:end="263:60"><type pos:start="263:9" pos:end="263:13"><name pos:start="263:9" pos:end="263:13">float</name></type> <name pos:start="263:15" pos:end="263:15">b</name> <init pos:start="263:17" pos:end="263:60">= <expr pos:start="263:19" pos:end="263:60"><call pos:start="263:19" pos:end="263:60"><name pos:start="263:19" pos:end="263:34">REINTERPRET_CAST</name><argument_list pos:start="263:35" pos:end="263:60">(<argument pos:start="263:36" pos:end="263:40"><expr pos:start="263:36" pos:end="263:40"><name pos:start="263:36" pos:end="263:40">float</name></expr></argument>, <argument pos:start="263:43" pos:end="263:59"><expr pos:start="263:43" pos:end="263:59"><name pos:start="263:43" pos:end="263:59"><name pos:start="263:43" pos:end="263:43">s</name><operator pos:start="263:44" pos:end="263:45">-&gt;</operator><name pos:start="263:46" pos:end="263:52">gp_regs</name><index pos:start="263:53" pos:end="263:59">[<expr pos:start="263:54" pos:end="263:58"><name pos:start="263:54" pos:end="263:58">reg_b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="265:9" pos:end="265:35"><decl pos:start="265:9" pos:end="265:34"><type pos:start="265:9" pos:end="265:13"><name pos:start="265:9" pos:end="265:13">float</name></type> <name pos:start="265:15" pos:end="265:15">t</name> <init pos:start="265:17" pos:end="265:34">= <expr pos:start="265:19" pos:end="265:34"><ternary pos:start="265:19" pos:end="265:34"><condition pos:start="265:19" pos:end="265:27"><expr pos:start="265:19" pos:end="265:25"><operator pos:start="265:19" pos:end="265:19">(</operator><name pos:start="265:20" pos:end="265:20">b</name> <operator pos:start="265:22" pos:end="265:22">&lt;</operator> <literal type="number" pos:start="265:24" pos:end="265:24">0</literal><operator pos:start="265:25" pos:end="265:25">)</operator></expr> ?</condition><then pos:start="265:29" pos:end="265:30"> <expr pos:start="265:29" pos:end="265:30"><operator pos:start="265:29" pos:end="265:29">-</operator><name pos:start="265:30" pos:end="265:30">a</name></expr> </then><else pos:start="265:32" pos:end="265:34">: <expr pos:start="265:34" pos:end="265:34"><name pos:start="265:34" pos:end="265:34">a</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="267:9" pos:end="267:42"><expr pos:start="267:9" pos:end="267:41"><name pos:start="267:9" pos:end="267:9">r</name> <operator pos:start="267:11" pos:end="267:11">=</operator> <call pos:start="267:13" pos:end="267:41"><name pos:start="267:13" pos:end="267:28">REINTERPRET_CAST</name><argument_list pos:start="267:29" pos:end="267:41">(<argument pos:start="267:30" pos:end="267:37"><expr pos:start="267:30" pos:end="267:37"><name pos:start="267:30" pos:end="267:37">uint32_t</name></expr></argument>, <argument pos:start="267:40" pos:end="267:40"><expr pos:start="267:40" pos:end="267:40"><name pos:start="267:40" pos:end="267:40">t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:32"><expr pos:start="269:9" pos:end="269:31"><name pos:start="269:9" pos:end="269:15">latency</name> <operator pos:start="269:17" pos:end="269:17">=</operator> <name pos:start="269:19" pos:end="269:31">LATENCY_TSIGN</name></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:71"><expr pos:start="271:9" pos:end="271:70"><call pos:start="271:9" pos:end="271:70"><name pos:start="271:9" pos:end="271:14">D_EXEC</name><argument_list pos:start="271:15" pos:end="271:70">(<argument pos:start="271:16" pos:end="271:69"><expr pos:start="271:16" pos:end="271:69"><call pos:start="271:16" pos:end="271:69"><name pos:start="271:16" pos:end="271:23">qemu_log</name><argument_list pos:start="271:24" pos:end="271:69">(<argument pos:start="271:25" pos:end="271:56"><expr pos:start="271:25" pos:end="271:56"><literal type="string" pos:start="271:25" pos:end="271:56">"TSIGN a=%f b=%f t=%f, r=%08x\n"</literal></expr></argument>, <argument pos:start="271:59" pos:end="271:59"><expr pos:start="271:59" pos:end="271:59"><name pos:start="271:59" pos:end="271:59">a</name></expr></argument>, <argument pos:start="271:62" pos:end="271:62"><expr pos:start="271:62" pos:end="271:62"><name pos:start="271:62" pos:end="271:62">b</name></expr></argument>, <argument pos:start="271:65" pos:end="271:65"><expr pos:start="271:65" pos:end="271:65"><name pos:start="271:65" pos:end="271:65">t</name></expr></argument>, <argument pos:start="271:68" pos:end="271:68"><expr pos:start="271:68" pos:end="271:68"><name pos:start="271:68" pos:end="271:68">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="273:7" pos:end="273:12">break;</break>

    <case pos:start="275:5" pos:end="275:18">case <expr pos:start="275:10" pos:end="275:17"><name pos:start="275:10" pos:end="275:17">OP_QUAKE</name></expr>:</case>

    <block pos:start="277:5" pos:end="287:5">{<block_content pos:start="279:9" pos:end="285:54">

        <decl_stmt pos:start="279:9" pos:end="279:39"><decl pos:start="279:9" pos:end="279:38"><type pos:start="279:9" pos:end="279:16"><name pos:start="279:9" pos:end="279:16">uint32_t</name></type> <name pos:start="279:18" pos:end="279:18">a</name> <init pos:start="279:20" pos:end="279:38">= <expr pos:start="279:22" pos:end="279:38"><name pos:start="279:22" pos:end="279:38"><name pos:start="279:22" pos:end="279:22">s</name><operator pos:start="279:23" pos:end="279:24">-&gt;</operator><name pos:start="279:25" pos:end="279:31">gp_regs</name><index pos:start="279:32" pos:end="279:38">[<expr pos:start="279:33" pos:end="279:37"><name pos:start="279:33" pos:end="279:37">reg_a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:34"><expr pos:start="281:9" pos:end="281:33"><name pos:start="281:9" pos:end="281:9">r</name> <operator pos:start="281:11" pos:end="281:11">=</operator> <literal type="number" pos:start="281:13" pos:end="281:24">0x5f3759df</literal> <operator pos:start="281:24" pos:end="281:24">-</operator> <operator pos:start="281:26" pos:end="281:26">(</operator><name pos:start="281:27" pos:end="281:27">a</name> <operator pos:start="281:29" pos:end="281:30">&gt;&gt;</operator> <literal type="number" pos:start="281:32" pos:end="281:32">1</literal><operator pos:start="281:33" pos:end="281:33">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:32"><expr pos:start="283:9" pos:end="283:31"><name pos:start="283:9" pos:end="283:15">latency</name> <operator pos:start="283:17" pos:end="283:17">=</operator> <name pos:start="283:19" pos:end="283:31">LATENCY_QUAKE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:54"><expr pos:start="285:9" pos:end="285:53"><call pos:start="285:9" pos:end="285:53"><name pos:start="285:9" pos:end="285:14">D_EXEC</name><argument_list pos:start="285:15" pos:end="285:53">(<argument pos:start="285:16" pos:end="285:52"><expr pos:start="285:16" pos:end="285:52"><call pos:start="285:16" pos:end="285:52"><name pos:start="285:16" pos:end="285:23">qemu_log</name><argument_list pos:start="285:24" pos:end="285:52">(<argument pos:start="285:25" pos:end="285:45"><expr pos:start="285:25" pos:end="285:45"><literal type="string" pos:start="285:25" pos:end="285:45">"QUAKE a=%d r=%08x\n"</literal></expr></argument>, <argument pos:start="285:48" pos:end="285:48"><expr pos:start="285:48" pos:end="285:48"><name pos:start="285:48" pos:end="285:48">a</name></expr></argument>, <argument pos:start="285:51" pos:end="285:51"><expr pos:start="285:51" pos:end="285:51"><name pos:start="285:51" pos:end="285:51">r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> <break pos:start="287:7" pos:end="287:12">break;</break>



    <default pos:start="291:5" pos:end="291:12">default:</default>

        <expr_stmt pos:start="293:9" pos:end="293:64"><expr pos:start="293:9" pos:end="293:63"><call pos:start="293:9" pos:end="293:63"><name pos:start="293:9" pos:end="293:20">error_report</name><argument_list pos:start="293:21" pos:end="293:63">(<argument pos:start="293:22" pos:end="293:58"><expr pos:start="293:22" pos:end="293:58"><literal type="string" pos:start="293:22" pos:end="293:58">"milkymist_pfpu: unknown opcode %d\n"</literal></expr></argument>, <argument pos:start="293:61" pos:end="293:62"><expr pos:start="293:61" pos:end="293:62"><name pos:start="293:61" pos:end="293:62">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="295:9" pos:end="295:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="301:5" pos:end="317:5"><if pos:start="301:5" pos:end="309:5">if <condition pos:start="301:8" pos:end="301:15">(<expr pos:start="301:9" pos:end="301:14"><operator pos:start="301:9" pos:end="301:9">!</operator><name pos:start="301:10" pos:end="301:14">reg_d</name></expr>)</condition> <block pos:start="301:17" pos:end="309:5">{<block_content pos:start="303:9" pos:end="307:46">

        <expr_stmt pos:start="303:9" pos:end="307:46"><expr pos:start="303:9" pos:end="307:45"><call pos:start="303:9" pos:end="307:45"><name pos:start="303:9" pos:end="303:14">D_EXEC</name><argument_list pos:start="303:15" pos:end="307:45">(<argument pos:start="303:16" pos:end="307:44"><expr pos:start="303:16" pos:end="307:44"><call pos:start="303:16" pos:end="307:44"><name pos:start="303:16" pos:end="303:23">qemu_log</name><argument_list pos:start="303:24" pos:end="307:44">(<argument pos:start="303:25" pos:end="303:64"><expr pos:start="303:25" pos:end="303:64"><literal type="string" pos:start="303:25" pos:end="303:64">"%04d %8s R%03d, R%03d &lt;L=%d, E=%04d&gt;\n"</literal></expr></argument>,

                    <argument pos:start="305:21" pos:end="305:33"><expr pos:start="305:21" pos:end="305:33"><name pos:start="305:21" pos:end="305:33"><name pos:start="305:21" pos:end="305:21">s</name><operator pos:start="305:22" pos:end="305:23">-&gt;</operator><name pos:start="305:24" pos:end="305:27">regs</name><index pos:start="305:28" pos:end="305:33">[<expr pos:start="305:29" pos:end="305:32"><name pos:start="305:29" pos:end="305:32">R_PC</name></expr>]</index></name></expr></argument>, <argument pos:start="305:36" pos:end="305:52"><expr pos:start="305:36" pos:end="305:52"><name pos:start="305:36" pos:end="305:52"><name pos:start="305:36" pos:end="305:48">opcode_to_str</name><index pos:start="305:49" pos:end="305:52">[<expr pos:start="305:50" pos:end="305:51"><name pos:start="305:50" pos:end="305:51">op</name></expr>]</index></name></expr></argument>, <argument pos:start="305:55" pos:end="305:59"><expr pos:start="305:55" pos:end="305:59"><name pos:start="305:55" pos:end="305:59">reg_a</name></expr></argument>, <argument pos:start="305:62" pos:end="305:66"><expr pos:start="305:62" pos:end="305:66"><name pos:start="305:62" pos:end="305:66">reg_b</name></expr></argument>, <argument pos:start="305:69" pos:end="305:75"><expr pos:start="305:69" pos:end="305:75"><name pos:start="305:69" pos:end="305:75">latency</name></expr></argument>,

                    <argument pos:start="307:21" pos:end="307:43"><expr pos:start="307:21" pos:end="307:43"><name pos:start="307:21" pos:end="307:33"><name pos:start="307:21" pos:end="307:21">s</name><operator pos:start="307:22" pos:end="307:23">-&gt;</operator><name pos:start="307:24" pos:end="307:27">regs</name><index pos:start="307:28" pos:end="307:33">[<expr pos:start="307:29" pos:end="307:32"><name pos:start="307:29" pos:end="307:32">R_PC</name></expr>]</index></name> <operator pos:start="307:35" pos:end="307:35">+</operator> <name pos:start="307:37" pos:end="307:43">latency</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="309:7" pos:end="317:5">else <block pos:start="309:12" pos:end="317:5">{<block_content pos:start="311:9" pos:end="315:53">

        <expr_stmt pos:start="311:9" pos:end="315:53"><expr pos:start="311:9" pos:end="315:52"><call pos:start="311:9" pos:end="315:52"><name pos:start="311:9" pos:end="311:14">D_EXEC</name><argument_list pos:start="311:15" pos:end="315:52">(<argument pos:start="311:16" pos:end="315:51"><expr pos:start="311:16" pos:end="315:51"><call pos:start="311:16" pos:end="315:51"><name pos:start="311:16" pos:end="311:23">qemu_log</name><argument_list pos:start="311:24" pos:end="315:51">(<argument pos:start="311:25" pos:end="311:73"><expr pos:start="311:25" pos:end="311:73"><literal type="string" pos:start="311:25" pos:end="311:73">"%04d %8s R%03d, R%03d &lt;L=%d, E=%04d&gt; -&gt; R%03d\n"</literal></expr></argument>,

                    <argument pos:start="313:21" pos:end="313:33"><expr pos:start="313:21" pos:end="313:33"><name pos:start="313:21" pos:end="313:33"><name pos:start="313:21" pos:end="313:21">s</name><operator pos:start="313:22" pos:end="313:23">-&gt;</operator><name pos:start="313:24" pos:end="313:27">regs</name><index pos:start="313:28" pos:end="313:33">[<expr pos:start="313:29" pos:end="313:32"><name pos:start="313:29" pos:end="313:32">R_PC</name></expr>]</index></name></expr></argument>, <argument pos:start="313:36" pos:end="313:52"><expr pos:start="313:36" pos:end="313:52"><name pos:start="313:36" pos:end="313:52"><name pos:start="313:36" pos:end="313:48">opcode_to_str</name><index pos:start="313:49" pos:end="313:52">[<expr pos:start="313:50" pos:end="313:51"><name pos:start="313:50" pos:end="313:51">op</name></expr>]</index></name></expr></argument>, <argument pos:start="313:55" pos:end="313:59"><expr pos:start="313:55" pos:end="313:59"><name pos:start="313:55" pos:end="313:59">reg_a</name></expr></argument>, <argument pos:start="313:62" pos:end="313:66"><expr pos:start="313:62" pos:end="313:66"><name pos:start="313:62" pos:end="313:66">reg_b</name></expr></argument>, <argument pos:start="313:69" pos:end="313:75"><expr pos:start="313:69" pos:end="313:75"><name pos:start="313:69" pos:end="313:75">latency</name></expr></argument>,

                    <argument pos:start="315:21" pos:end="315:43"><expr pos:start="315:21" pos:end="315:43"><name pos:start="315:21" pos:end="315:33"><name pos:start="315:21" pos:end="315:21">s</name><operator pos:start="315:22" pos:end="315:23">-&gt;</operator><name pos:start="315:24" pos:end="315:27">regs</name><index pos:start="315:28" pos:end="315:33">[<expr pos:start="315:29" pos:end="315:32"><name pos:start="315:29" pos:end="315:32">R_PC</name></expr>]</index></name> <operator pos:start="315:35" pos:end="315:35">+</operator> <name pos:start="315:37" pos:end="315:43">latency</name></expr></argument>, <argument pos:start="315:46" pos:end="315:50"><expr pos:start="315:46" pos:end="315:50"><name pos:start="315:46" pos:end="315:50">reg_d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="321:5" pos:end="325:5"><if pos:start="321:5" pos:end="325:5">if <condition pos:start="321:8" pos:end="321:25">(<expr pos:start="321:9" pos:end="321:24"><name pos:start="321:9" pos:end="321:10">op</name> <operator pos:start="321:12" pos:end="321:13">==</operator> <name pos:start="321:15" pos:end="321:24">OP_VECTOUT</name></expr>)</condition> <block pos:start="321:27" pos:end="325:5">{<block_content pos:start="323:9" pos:end="323:17">

        <return pos:start="323:9" pos:end="323:17">return <expr pos:start="323:16" pos:end="323:16"><literal type="number" pos:start="323:16" pos:end="323:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="329:5" pos:end="329:37">/* store output for this cycle */</comment>

    <if_stmt pos:start="331:5" pos:end="339:5"><if pos:start="331:5" pos:end="339:5">if <condition pos:start="331:8" pos:end="331:14">(<expr pos:start="331:9" pos:end="331:13"><name pos:start="331:9" pos:end="331:13">reg_d</name></expr>)</condition> <block pos:start="331:16" pos:end="339:5">{<block_content pos:start="333:9" pos:end="337:32">

        <decl_stmt pos:start="333:9" pos:end="333:46"><decl pos:start="333:9" pos:end="333:45"><type pos:start="333:9" pos:end="333:16"><name pos:start="333:9" pos:end="333:16">uint32_t</name></type> <name pos:start="333:18" pos:end="333:20">val</name> <init pos:start="333:22" pos:end="333:45">= <expr pos:start="333:24" pos:end="333:45"><call pos:start="333:24" pos:end="333:45"><name pos:start="333:24" pos:end="333:42">output_queue_remove</name><argument_list pos:start="333:43" pos:end="333:45">(<argument pos:start="333:44" pos:end="333:44"><expr pos:start="333:44" pos:end="333:44"><name pos:start="333:44" pos:end="333:44">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:58"><expr pos:start="335:9" pos:end="335:57"><call pos:start="335:9" pos:end="335:57"><name pos:start="335:9" pos:end="335:14">D_EXEC</name><argument_list pos:start="335:15" pos:end="335:57">(<argument pos:start="335:16" pos:end="335:56"><expr pos:start="335:16" pos:end="335:56"><call pos:start="335:16" pos:end="335:56"><name pos:start="335:16" pos:end="335:23">qemu_log</name><argument_list pos:start="335:24" pos:end="335:56">(<argument pos:start="335:25" pos:end="335:43"><expr pos:start="335:25" pos:end="335:43"><literal type="string" pos:start="335:25" pos:end="335:43">"R%03d &lt;- 0x%08x\n"</literal></expr></argument>, <argument pos:start="335:46" pos:end="335:50"><expr pos:start="335:46" pos:end="335:50"><name pos:start="335:46" pos:end="335:50">reg_d</name></expr></argument>, <argument pos:start="335:53" pos:end="335:55"><expr pos:start="335:53" pos:end="335:55"><name pos:start="335:53" pos:end="335:55">val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:32"><expr pos:start="337:9" pos:end="337:31"><name pos:start="337:9" pos:end="337:25"><name pos:start="337:9" pos:end="337:9">s</name><operator pos:start="337:10" pos:end="337:11">-&gt;</operator><name pos:start="337:12" pos:end="337:18">gp_regs</name><index pos:start="337:19" pos:end="337:25">[<expr pos:start="337:20" pos:end="337:24"><name pos:start="337:20" pos:end="337:24">reg_d</name></expr>]</index></name> <operator pos:start="337:27" pos:end="337:27">=</operator> <name pos:start="337:29" pos:end="337:31">val</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="343:5" pos:end="343:28"><expr pos:start="343:5" pos:end="343:27"><call pos:start="343:5" pos:end="343:27"><name pos:start="343:5" pos:end="343:24">output_queue_advance</name><argument_list pos:start="343:25" pos:end="343:27">(<argument pos:start="343:26" pos:end="343:26"><expr pos:start="343:26" pos:end="343:26"><name pos:start="343:26" pos:end="343:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="347:5" pos:end="347:25">/* store op output */</comment>

    <if_stmt pos:start="349:5" pos:end="353:5"><if pos:start="349:5" pos:end="353:5">if <condition pos:start="349:8" pos:end="349:21">(<expr pos:start="349:9" pos:end="349:20"><name pos:start="349:9" pos:end="349:10">op</name> <operator pos:start="349:12" pos:end="349:13">!=</operator> <name pos:start="349:15" pos:end="349:20">OP_NOP</name></expr>)</condition> <block pos:start="349:23" pos:end="353:5">{<block_content pos:start="351:9" pos:end="351:45">

        <expr_stmt pos:start="351:9" pos:end="351:45"><expr pos:start="351:9" pos:end="351:44"><call pos:start="351:9" pos:end="351:44"><name pos:start="351:9" pos:end="351:27">output_queue_insert</name><argument_list pos:start="351:28" pos:end="351:44">(<argument pos:start="351:29" pos:end="351:29"><expr pos:start="351:29" pos:end="351:29"><name pos:start="351:29" pos:end="351:29">s</name></expr></argument>, <argument pos:start="351:32" pos:end="351:32"><expr pos:start="351:32" pos:end="351:32"><name pos:start="351:32" pos:end="351:32">r</name></expr></argument>, <argument pos:start="351:35" pos:end="351:43"><expr pos:start="351:35" pos:end="351:43"><name pos:start="351:35" pos:end="351:41">latency</name><operator pos:start="351:42" pos:end="351:42">-</operator><literal type="number" pos:start="351:43" pos:end="351:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="357:5" pos:end="357:20">/* advance PC */</comment>

    <expr_stmt pos:start="359:5" pos:end="359:20"><expr pos:start="359:5" pos:end="359:19"><name pos:start="359:5" pos:end="359:17"><name pos:start="359:5" pos:end="359:5">s</name><operator pos:start="359:6" pos:end="359:7">-&gt;</operator><name pos:start="359:8" pos:end="359:11">regs</name><index pos:start="359:12" pos:end="359:17">[<expr pos:start="359:13" pos:end="359:16"><name pos:start="359:13" pos:end="359:16">R_PC</name></expr>]</index></name><operator pos:start="359:18" pos:end="359:19">++</operator></expr>;</expr_stmt>



    <return pos:start="363:5" pos:end="363:13">return <expr pos:start="363:12" pos:end="363:12"><literal type="number" pos:start="363:12" pos:end="363:12">1</literal></expr>;</return>

</block_content>}</block></function><empty_stmt pos:start="365:2" pos:end="365:2">;</empty_stmt>
</unit>
