<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4045.c" pos:tabs="8"><function pos:start="1:1" pos:end="135:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">an5206_init</name><parameter_list pos:start="1:24" pos:end="1:46">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:38"><name pos:start="1:25" pos:end="1:36">MachineState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:45">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="135:1">{<block_content pos:start="5:5" pos:end="133:20">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">M68kCPU</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">CPUM68KState</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:22">elf_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">hwaddr</name></type> <name pos:start="19:12" pos:end="19:16">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:58"><decl pos:start="21:5" pos:end="21:57"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:35">address_space_mem</name> <init pos:start="21:37" pos:end="21:57">= <expr pos:start="21:39" pos:end="21:57"><call pos:start="21:39" pos:end="21:57"><name pos:start="21:39" pos:end="21:55">get_system_memory</name><argument_list pos:start="21:56" pos:end="21:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:47"><decl pos:start="23:5" pos:end="23:46"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:21">ram</name> <init pos:start="23:23" pos:end="23:46">= <expr pos:start="23:25" pos:end="23:46"><call pos:start="23:25" pos:end="23:46"><name pos:start="23:25" pos:end="23:29">g_new</name><argument_list pos:start="23:30" pos:end="23:46">(<argument pos:start="23:31" pos:end="23:42"><expr pos:start="23:31" pos:end="23:42"><name pos:start="23:31" pos:end="23:42">MemoryRegion</name></expr></argument>, <argument pos:start="23:45" pos:end="23:45"><expr pos:start="23:45" pos:end="23:45"><literal type="number" pos:start="23:45" pos:end="23:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:48"><decl pos:start="25:5" pos:end="25:47"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">MemoryRegion</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:22">sram</name> <init pos:start="25:24" pos:end="25:47">= <expr pos:start="25:26" pos:end="25:47"><call pos:start="25:26" pos:end="25:47"><name pos:start="25:26" pos:end="25:30">g_new</name><argument_list pos:start="25:31" pos:end="25:47">(<argument pos:start="25:32" pos:end="25:43"><expr pos:start="25:32" pos:end="25:43"><name pos:start="25:32" pos:end="25:43">MemoryRegion</name></expr></argument>, <argument pos:start="25:46" pos:end="25:46"><expr pos:start="25:46" pos:end="25:46"><literal type="number" pos:start="25:46" pos:end="25:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:19">(<expr pos:start="29:9" pos:end="29:18"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:18">cpu_model</name></expr>)</condition> <block pos:start="29:21" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:28">

        <expr_stmt pos:start="31:9" pos:end="31:28"><expr pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:17">cpu_model</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <literal type="string" pos:start="31:21" pos:end="31:27">"m5206"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:63"><expr pos:start="35:5" pos:end="35:62"><name pos:start="35:5" pos:end="35:7">cpu</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:62"><name pos:start="35:11" pos:end="35:18">M68K_CPU</name><argument_list pos:start="35:19" pos:end="35:62">(<argument pos:start="35:20" pos:end="35:61"><expr pos:start="35:20" pos:end="35:61"><call pos:start="35:20" pos:end="35:61"><name pos:start="35:20" pos:end="35:35">cpu_generic_init</name><argument_list pos:start="35:36" pos:end="35:61">(<argument pos:start="35:37" pos:end="35:49"><expr pos:start="35:37" pos:end="35:49"><name pos:start="35:37" pos:end="35:49">TYPE_M68K_CPU</name></expr></argument>, <argument pos:start="35:52" pos:end="35:60"><expr pos:start="35:52" pos:end="35:60"><name pos:start="35:52" pos:end="35:60">cpu_model</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:13">(<expr pos:start="37:9" pos:end="37:12"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:12">cpu</name></expr>)</condition> <block pos:start="37:15" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:16">

        <expr_stmt pos:start="39:9" pos:end="39:59"><expr pos:start="39:9" pos:end="39:58"><call pos:start="39:9" pos:end="39:58"><name pos:start="39:9" pos:end="39:20">error_report</name><argument_list pos:start="39:21" pos:end="39:58">(<argument pos:start="39:22" pos:end="39:57"><expr pos:start="39:22" pos:end="39:57"><literal type="string" pos:start="39:22" pos:end="39:57">"Unable to find m68k CPU definition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:16"><expr pos:start="41:9" pos:end="41:15"><call pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:12">exit</name><argument_list pos:start="41:13" pos:end="41:15">(<argument pos:start="41:14" pos:end="41:14"><expr pos:start="41:14" pos:end="41:14"><literal type="number" pos:start="41:14" pos:end="41:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:20"><expr pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:7">env</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <operator pos:start="45:11" pos:end="45:11">&amp;</operator><name pos:start="45:12" pos:end="45:19"><name pos:start="45:12" pos:end="45:14">cpu</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:19">env</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:36">/* Initialize CPU registers.  */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:17"><expr pos:start="51:5" pos:end="51:16"><name pos:start="51:5" pos:end="51:12"><name pos:start="51:5" pos:end="51:7">env</name><operator pos:start="51:8" pos:end="51:9">-&gt;</operator><name pos:start="51:10" pos:end="51:12">vbr</name></name> <operator pos:start="51:14" pos:end="51:14">=</operator> <literal type="number" pos:start="51:16" pos:end="51:16">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="53:5" pos:end="53:48">/* TODO: allow changing MBAR and RAMBAR.  */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:37"><expr pos:start="55:5" pos:end="55:36"><name pos:start="55:5" pos:end="55:13"><name pos:start="55:5" pos:end="55:7">env</name><operator pos:start="55:8" pos:end="55:9">-&gt;</operator><name pos:start="55:10" pos:end="55:13">mbar</name></name> <operator pos:start="55:15" pos:end="55:15">=</operator> <name pos:start="55:17" pos:end="55:32">AN5206_MBAR_ADDR</name> <operator pos:start="55:34" pos:end="55:34">|</operator> <literal type="number" pos:start="55:36" pos:end="55:36">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:42"><expr pos:start="57:5" pos:end="57:41"><name pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:7">env</name><operator pos:start="57:8" pos:end="57:9">-&gt;</operator><name pos:start="57:10" pos:end="57:16">rambar0</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:37">AN5206_RAMBAR_ADDR</name> <operator pos:start="57:39" pos:end="57:39">|</operator> <literal type="number" pos:start="57:41" pos:end="57:41">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:30">/* DRAM at address zero */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:76"><expr pos:start="63:5" pos:end="63:75"><call pos:start="63:5" pos:end="63:75"><name pos:start="63:5" pos:end="63:40">memory_region_allocate_system_memory</name><argument_list pos:start="63:41" pos:end="63:75">(<argument pos:start="63:42" pos:end="63:44"><expr pos:start="63:42" pos:end="63:44"><name pos:start="63:42" pos:end="63:44">ram</name></expr></argument>, <argument pos:start="63:47" pos:end="63:50"><expr pos:start="63:47" pos:end="63:50"><name pos:start="63:47" pos:end="63:50">NULL</name></expr></argument>, <argument pos:start="63:53" pos:end="63:64"><expr pos:start="63:53" pos:end="63:64"><literal type="string" pos:start="63:53" pos:end="63:64">"an5206.ram"</literal></expr></argument>, <argument pos:start="63:67" pos:end="63:74"><expr pos:start="63:67" pos:end="63:74"><name pos:start="63:67" pos:end="63:74">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:59"><expr pos:start="65:5" pos:end="65:58"><call pos:start="65:5" pos:end="65:58"><name pos:start="65:5" pos:end="65:31">memory_region_add_subregion</name><argument_list pos:start="65:32" pos:end="65:58">(<argument pos:start="65:33" pos:end="65:49"><expr pos:start="65:33" pos:end="65:49"><name pos:start="65:33" pos:end="65:49">address_space_mem</name></expr></argument>, <argument pos:start="65:52" pos:end="65:52"><expr pos:start="65:52" pos:end="65:52"><literal type="number" pos:start="65:52" pos:end="65:52">0</literal></expr></argument>, <argument pos:start="65:55" pos:end="65:57"><expr pos:start="65:55" pos:end="65:57"><name pos:start="65:55" pos:end="65:57">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:25">/* Internal SRAM.  */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:73"><expr pos:start="71:5" pos:end="71:72"><call pos:start="71:5" pos:end="71:72"><name pos:start="71:5" pos:end="71:26">memory_region_init_ram</name><argument_list pos:start="71:27" pos:end="71:72">(<argument pos:start="71:28" pos:end="71:31"><expr pos:start="71:28" pos:end="71:31"><name pos:start="71:28" pos:end="71:31">sram</name></expr></argument>, <argument pos:start="71:34" pos:end="71:37"><expr pos:start="71:34" pos:end="71:37"><name pos:start="71:34" pos:end="71:37">NULL</name></expr></argument>, <argument pos:start="71:40" pos:end="71:52"><expr pos:start="71:40" pos:end="71:52"><literal type="string" pos:start="71:40" pos:end="71:52">"an5206.sram"</literal></expr></argument>, <argument pos:start="71:55" pos:end="71:57"><expr pos:start="71:55" pos:end="71:57"><literal type="number" pos:start="71:55" pos:end="71:57">512</literal></expr></argument>, <argument pos:start="71:60" pos:end="71:71"><expr pos:start="71:60" pos:end="71:71"><operator pos:start="71:60" pos:end="71:60">&amp;</operator><name pos:start="71:61" pos:end="71:71">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:77"><expr pos:start="73:5" pos:end="73:76"><call pos:start="73:5" pos:end="73:76"><name pos:start="73:5" pos:end="73:31">memory_region_add_subregion</name><argument_list pos:start="73:32" pos:end="73:76">(<argument pos:start="73:33" pos:end="73:49"><expr pos:start="73:33" pos:end="73:49"><name pos:start="73:33" pos:end="73:49">address_space_mem</name></expr></argument>, <argument pos:start="73:52" pos:end="73:69"><expr pos:start="73:52" pos:end="73:69"><name pos:start="73:52" pos:end="73:69">AN5206_RAMBAR_ADDR</name></expr></argument>, <argument pos:start="73:72" pos:end="73:75"><expr pos:start="73:72" pos:end="73:75"><name pos:start="73:72" pos:end="73:75">sram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:59"><expr pos:start="77:5" pos:end="77:58"><call pos:start="77:5" pos:end="77:58"><name pos:start="77:5" pos:end="77:16">mcf5206_init</name><argument_list pos:start="77:17" pos:end="77:58">(<argument pos:start="77:18" pos:end="77:34"><expr pos:start="77:18" pos:end="77:34"><name pos:start="77:18" pos:end="77:34">address_space_mem</name></expr></argument>, <argument pos:start="77:37" pos:end="77:52"><expr pos:start="77:37" pos:end="77:52"><name pos:start="77:37" pos:end="77:52">AN5206_MBAR_ADDR</name></expr></argument>, <argument pos:start="77:55" pos:end="77:57"><expr pos:start="77:55" pos:end="77:57"><name pos:start="77:55" pos:end="77:57">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:23">/* Load kernel.  */</comment>

    <if_stmt pos:start="83:5" pos:end="95:5"><if pos:start="83:5" pos:end="95:5">if <condition pos:start="83:8" pos:end="83:25">(<expr pos:start="83:9" pos:end="83:24"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:24">kernel_filename</name></expr>)</condition> <block pos:start="83:27" pos:end="95:5">{<block_content pos:start="85:9" pos:end="93:16">

        <if_stmt pos:start="85:9" pos:end="89:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:28">(<expr pos:start="85:13" pos:end="85:27"><call pos:start="85:13" pos:end="85:27"><name pos:start="85:13" pos:end="85:25">qtest_enabled</name><argument_list pos:start="85:26" pos:end="85:27">()</argument_list></call></expr>)</condition> <block pos:start="85:30" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:19">

            <return pos:start="87:13" pos:end="87:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:60"><expr pos:start="91:9" pos:end="91:59"><call pos:start="91:9" pos:end="91:59"><name pos:start="91:9" pos:end="91:15">fprintf</name><argument_list pos:start="91:16" pos:end="91:59">(<argument pos:start="91:17" pos:end="91:22"><expr pos:start="91:17" pos:end="91:22"><name pos:start="91:17" pos:end="91:22">stderr</name></expr></argument>, <argument pos:start="91:25" pos:end="91:58"><expr pos:start="91:25" pos:end="91:58"><literal type="string" pos:start="91:25" pos:end="91:58">"Kernel image must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:16"><expr pos:start="93:9" pos:end="93:15"><call pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:12">exit</name><argument_list pos:start="93:13" pos:end="93:15">(<argument pos:start="93:14" pos:end="93:14"><expr pos:start="93:14" pos:end="93:14"><literal type="number" pos:start="93:14" pos:end="93:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="101:56"><expr pos:start="99:5" pos:end="101:55"><name pos:start="99:5" pos:end="99:15">kernel_size</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="101:55"><name pos:start="99:19" pos:end="99:26">load_elf</name><argument_list pos:start="99:27" pos:end="101:55">(<argument pos:start="99:28" pos:end="99:42"><expr pos:start="99:28" pos:end="99:42"><name pos:start="99:28" pos:end="99:42">kernel_filename</name></expr></argument>, <argument pos:start="99:45" pos:end="99:48"><expr pos:start="99:45" pos:end="99:48"><name pos:start="99:45" pos:end="99:48">NULL</name></expr></argument>, <argument pos:start="99:51" pos:end="99:54"><expr pos:start="99:51" pos:end="99:54"><name pos:start="99:51" pos:end="99:54">NULL</name></expr></argument>, <argument pos:start="99:57" pos:end="99:66"><expr pos:start="99:57" pos:end="99:66"><operator pos:start="99:57" pos:end="99:57">&amp;</operator><name pos:start="99:58" pos:end="99:66">elf_entry</name></expr></argument>,

                           <argument pos:start="101:28" pos:end="101:31"><expr pos:start="101:28" pos:end="101:31"><name pos:start="101:28" pos:end="101:31">NULL</name></expr></argument>, <argument pos:start="101:34" pos:end="101:37"><expr pos:start="101:34" pos:end="101:37"><name pos:start="101:34" pos:end="101:37">NULL</name></expr></argument>, <argument pos:start="101:40" pos:end="101:40"><expr pos:start="101:40" pos:end="101:40"><literal type="number" pos:start="101:40" pos:end="101:40">1</literal></expr></argument>, <argument pos:start="101:43" pos:end="101:48"><expr pos:start="101:43" pos:end="101:48"><name pos:start="101:43" pos:end="101:48">EM_68K</name></expr></argument>, <argument pos:start="101:51" pos:end="101:51"><expr pos:start="101:51" pos:end="101:51"><literal type="number" pos:start="101:51" pos:end="101:51">0</literal></expr></argument>, <argument pos:start="101:54" pos:end="101:54"><expr pos:start="101:54" pos:end="101:54"><literal type="number" pos:start="101:54" pos:end="101:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:22"><expr pos:start="103:5" pos:end="103:21"><name pos:start="103:5" pos:end="103:9">entry</name> <operator pos:start="103:11" pos:end="103:11">=</operator> <name pos:start="103:13" pos:end="103:21">elf_entry</name></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:24">(<expr pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:19">kernel_size</name> <operator pos:start="105:21" pos:end="105:21">&lt;</operator> <literal type="number" pos:start="105:23" pos:end="105:23">0</literal></expr>)</condition> <block pos:start="105:26" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:46">

        <expr_stmt pos:start="107:9" pos:end="109:46"><expr pos:start="107:9" pos:end="109:45"><name pos:start="107:9" pos:end="107:19">kernel_size</name> <operator pos:start="107:21" pos:end="107:21">=</operator> <call pos:start="107:23" pos:end="109:45"><name pos:start="107:23" pos:end="107:33">load_uimage</name><argument_list pos:start="107:34" pos:end="109:45">(<argument pos:start="107:35" pos:end="107:49"><expr pos:start="107:35" pos:end="107:49"><name pos:start="107:35" pos:end="107:49">kernel_filename</name></expr></argument>, <argument pos:start="107:52" pos:end="107:57"><expr pos:start="107:52" pos:end="107:57"><operator pos:start="107:52" pos:end="107:52">&amp;</operator><name pos:start="107:53" pos:end="107:57">entry</name></expr></argument>, <argument pos:start="107:60" pos:end="107:63"><expr pos:start="107:60" pos:end="107:63"><name pos:start="107:60" pos:end="107:63">NULL</name></expr></argument>, <argument pos:start="107:66" pos:end="107:69"><expr pos:start="107:66" pos:end="107:69"><name pos:start="107:66" pos:end="107:69">NULL</name></expr></argument>,

                                  <argument pos:start="109:35" pos:end="109:38"><expr pos:start="109:35" pos:end="109:38"><name pos:start="109:35" pos:end="109:38">NULL</name></expr></argument>, <argument pos:start="109:41" pos:end="109:44"><expr pos:start="109:41" pos:end="109:44"><name pos:start="109:41" pos:end="109:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="113:5" pos:end="121:5"><if pos:start="113:5" pos:end="121:5">if <condition pos:start="113:8" pos:end="113:24">(<expr pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:19">kernel_size</name> <operator pos:start="113:21" pos:end="113:21">&lt;</operator> <literal type="number" pos:start="113:23" pos:end="113:23">0</literal></expr>)</condition> <block pos:start="113:26" pos:end="121:5">{<block_content pos:start="115:9" pos:end="119:33">

        <expr_stmt pos:start="115:9" pos:end="117:71"><expr pos:start="115:9" pos:end="117:70"><name pos:start="115:9" pos:end="115:19">kernel_size</name> <operator pos:start="115:21" pos:end="115:21">=</operator> <call pos:start="115:23" pos:end="117:70"><name pos:start="115:23" pos:end="115:41">load_image_targphys</name><argument_list pos:start="115:42" pos:end="117:70">(<argument pos:start="115:43" pos:end="115:57"><expr pos:start="115:43" pos:end="115:57"><name pos:start="115:43" pos:end="115:57">kernel_filename</name></expr></argument>, <argument pos:start="115:60" pos:end="115:75"><expr pos:start="115:60" pos:end="115:75"><name pos:start="115:60" pos:end="115:75">KERNEL_LOAD_ADDR</name></expr></argument>,

                                          <argument pos:start="117:43" pos:end="117:69"><expr pos:start="117:43" pos:end="117:69"><name pos:start="117:43" pos:end="117:50">ram_size</name> <operator pos:start="117:52" pos:end="117:52">-</operator> <name pos:start="117:54" pos:end="117:69">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:33"><expr pos:start="119:9" pos:end="119:32"><name pos:start="119:9" pos:end="119:13">entry</name> <operator pos:start="119:15" pos:end="119:15">=</operator> <name pos:start="119:17" pos:end="119:32">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="123:5" pos:end="129:5"><if pos:start="123:5" pos:end="129:5">if <condition pos:start="123:8" pos:end="123:24">(<expr pos:start="123:9" pos:end="123:23"><name pos:start="123:9" pos:end="123:19">kernel_size</name> <operator pos:start="123:21" pos:end="123:21">&lt;</operator> <literal type="number" pos:start="123:23" pos:end="123:23">0</literal></expr>)</condition> <block pos:start="123:26" pos:end="129:5">{<block_content pos:start="125:9" pos:end="127:16">

        <expr_stmt pos:start="125:9" pos:end="125:79"><expr pos:start="125:9" pos:end="125:78"><call pos:start="125:9" pos:end="125:78"><name pos:start="125:9" pos:end="125:15">fprintf</name><argument_list pos:start="125:16" pos:end="125:78">(<argument pos:start="125:17" pos:end="125:22"><expr pos:start="125:17" pos:end="125:22"><name pos:start="125:17" pos:end="125:22">stderr</name></expr></argument>, <argument pos:start="125:25" pos:end="125:60"><expr pos:start="125:25" pos:end="125:60"><literal type="string" pos:start="125:25" pos:end="125:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="125:63" pos:end="125:77"><expr pos:start="125:63" pos:end="125:77"><name pos:start="125:63" pos:end="125:77">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:16"><expr pos:start="127:9" pos:end="127:15"><call pos:start="127:9" pos:end="127:15"><name pos:start="127:9" pos:end="127:12">exit</name><argument_list pos:start="127:13" pos:end="127:15">(<argument pos:start="127:14" pos:end="127:14"><expr pos:start="127:14" pos:end="127:14"><literal type="number" pos:start="127:14" pos:end="127:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:20"><expr pos:start="133:5" pos:end="133:19"><name pos:start="133:5" pos:end="133:11"><name pos:start="133:5" pos:end="133:7">env</name><operator pos:start="133:8" pos:end="133:9">-&gt;</operator><name pos:start="133:10" pos:end="133:11">pc</name></name> <operator pos:start="133:13" pos:end="133:13">=</operator> <name pos:start="133:15" pos:end="133:19">entry</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
