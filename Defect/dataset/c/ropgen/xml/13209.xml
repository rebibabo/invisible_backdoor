<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13209.c" pos:tabs="8"><function pos:start="1:1" pos:end="82:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">inc_refcounts</name><parameter_list pos:start="1:25" pos:end="9:54">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:41">BlockDriverState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">bs</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:45"><decl pos:start="3:26" pos:end="3:45"><type pos:start="3:26" pos:end="3:45"><name pos:start="3:26" pos:end="3:40">BdrvCheckResult</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:45">res</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:46"><decl pos:start="5:26" pos:end="5:46"><type pos:start="5:26" pos:end="5:46"><name pos:start="5:26" pos:end="5:29">void</name> <modifier pos:start="5:31" pos:end="5:31">*</modifier><modifier pos:start="5:32" pos:end="5:32">*</modifier></type><name pos:start="5:33" pos:end="5:46">refcount_table</name></decl></parameter>,

                         <parameter pos:start="7:26" pos:end="7:53"><decl pos:start="7:26" pos:end="7:53"><type pos:start="7:26" pos:end="7:53"><name pos:start="7:26" pos:end="7:32">int64_t</name> <modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:53">refcount_table_size</name></decl></parameter>,

                         <parameter pos:start="9:26" pos:end="9:39"><decl pos:start="9:26" pos:end="9:39"><type pos:start="9:26" pos:end="9:39"><name pos:start="9:26" pos:end="9:32">int64_t</name></type> <name pos:start="9:34" pos:end="9:39">offset</name></decl></parameter>, <parameter pos:start="9:42" pos:end="9:53"><decl pos:start="9:42" pos:end="9:53"><type pos:start="9:42" pos:end="9:53"><name pos:start="9:42" pos:end="9:48">int64_t</name></type> <name pos:start="9:50" pos:end="9:53">size</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="82:1">{<block_content pos:start="13:5" pos:end="80:13">

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">BDRVQcow2State</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:21">s</name> <init pos:start="13:23" pos:end="13:34">= <expr pos:start="13:25" pos:end="13:34"><name pos:start="13:25" pos:end="13:34"><name pos:start="13:25" pos:end="13:26">bs</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:54"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:18">start</name></decl>, <decl pos:start="15:21" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:21" pos:end="15:24">last</name></decl>, <decl pos:start="15:27" pos:end="15:40"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:27" pos:end="15:40">cluster_offset</name></decl>, <decl pos:start="15:43" pos:end="15:43"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:43" pos:end="15:43">k</name></decl>, <decl pos:start="15:46" pos:end="15:53"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:46" pos:end="15:53">refcount</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:18">(<expr pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:12">size</name> <operator pos:start="21:14" pos:end="21:15">&lt;=</operator> <literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr>)</condition> <block pos:start="21:20" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:17">

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:40"><expr pos:start="29:5" pos:end="29:39"><name pos:start="29:5" pos:end="29:9">start</name> <operator pos:start="29:11" pos:end="29:11">=</operator> <call pos:start="29:13" pos:end="29:39"><name pos:start="29:13" pos:end="29:28">start_of_cluster</name><argument_list pos:start="29:29" pos:end="29:39">(<argument pos:start="29:30" pos:end="29:30"><expr pos:start="29:30" pos:end="29:30"><name pos:start="29:30" pos:end="29:30">s</name></expr></argument>, <argument pos:start="29:33" pos:end="29:38"><expr pos:start="29:33" pos:end="29:38"><name pos:start="29:33" pos:end="29:38">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:50"><expr pos:start="31:5" pos:end="31:49"><name pos:start="31:5" pos:end="31:8">last</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:49"><name pos:start="31:12" pos:end="31:27">start_of_cluster</name><argument_list pos:start="31:28" pos:end="31:49">(<argument pos:start="31:29" pos:end="31:29"><expr pos:start="31:29" pos:end="31:29"><name pos:start="31:29" pos:end="31:29">s</name></expr></argument>, <argument pos:start="31:32" pos:end="31:48"><expr pos:start="31:32" pos:end="31:48"><name pos:start="31:32" pos:end="31:37">offset</name> <operator pos:start="31:39" pos:end="31:39">+</operator> <name pos:start="31:41" pos:end="31:44">size</name> <operator pos:start="31:46" pos:end="31:46">-</operator> <literal type="number" pos:start="31:48" pos:end="31:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="33:5" pos:end="76:5">for<control pos:start="33:8" pos:end="35:42">(<init pos:start="33:9" pos:end="33:31"><expr pos:start="33:9" pos:end="33:30"><name pos:start="33:9" pos:end="33:22">cluster_offset</name> <operator pos:start="33:24" pos:end="33:24">=</operator> <name pos:start="33:26" pos:end="33:30">start</name></expr>;</init> <condition pos:start="33:33" pos:end="33:55"><expr pos:start="33:33" pos:end="33:54"><name pos:start="33:33" pos:end="33:46">cluster_offset</name> <operator pos:start="33:48" pos:end="33:49">&lt;=</operator> <name pos:start="33:51" pos:end="33:54">last</name></expr>;</condition>

        <incr pos:start="35:9" pos:end="35:41"><expr pos:start="35:9" pos:end="35:41"><name pos:start="35:9" pos:end="35:22">cluster_offset</name> <operator pos:start="35:24" pos:end="35:25">+=</operator> <name pos:start="35:27" pos:end="35:41"><name pos:start="35:27" pos:end="35:27">s</name><operator pos:start="35:28" pos:end="35:29">-&gt;</operator><name pos:start="35:30" pos:end="35:41">cluster_size</name></name></expr></incr>)</control> <block pos:start="35:44" pos:end="76:5">{<block_content pos:start="37:9" pos:end="74:58">

        <expr_stmt pos:start="37:9" pos:end="37:46"><expr pos:start="37:9" pos:end="37:45"><name pos:start="37:9" pos:end="37:9">k</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <name pos:start="37:13" pos:end="37:26">cluster_offset</name> <operator pos:start="37:28" pos:end="37:29">&gt;&gt;</operator> <name pos:start="37:31" pos:end="37:45"><name pos:start="37:31" pos:end="37:31">s</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:45">cluster_bits</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="53:9"><if pos:start="39:9" pos:end="53:9">if <condition pos:start="39:12" pos:end="39:38">(<expr pos:start="39:13" pos:end="39:37"><name pos:start="39:13" pos:end="39:13">k</name> <operator pos:start="39:15" pos:end="39:16">&gt;=</operator> <operator pos:start="39:18" pos:end="39:18">*</operator><name pos:start="39:19" pos:end="39:37">refcount_table_size</name></expr>)</condition> <block pos:start="39:40" pos:end="53:9">{<block_content pos:start="41:13" pos:end="51:13">

            <expr_stmt pos:start="41:13" pos:end="43:69"><expr pos:start="41:13" pos:end="43:68"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="43:68"><name pos:start="41:19" pos:end="41:40">realloc_refcount_array</name><argument_list pos:start="41:41" pos:end="43:68">(<argument pos:start="41:42" pos:end="41:42"><expr pos:start="41:42" pos:end="41:42"><name pos:start="41:42" pos:end="41:42">s</name></expr></argument>, <argument pos:start="41:45" pos:end="41:58"><expr pos:start="41:45" pos:end="41:58"><name pos:start="41:45" pos:end="41:58">refcount_table</name></expr></argument>,

                                         <argument pos:start="43:42" pos:end="43:60"><expr pos:start="43:42" pos:end="43:60"><name pos:start="43:42" pos:end="43:60">refcount_table_size</name></expr></argument>, <argument pos:start="43:63" pos:end="43:67"><expr pos:start="43:63" pos:end="43:67"><name pos:start="43:63" pos:end="43:63">k</name> <operator pos:start="43:65" pos:end="43:65">+</operator> <literal type="number" pos:start="43:67" pos:end="43:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="51:13"><if pos:start="45:13" pos:end="51:13">if <condition pos:start="45:16" pos:end="45:24">(<expr pos:start="45:17" pos:end="45:23"><name pos:start="45:17" pos:end="45:19">ret</name> <operator pos:start="45:21" pos:end="45:21">&lt;</operator> <literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>)</condition> <block pos:start="45:26" pos:end="51:13">{<block_content pos:start="47:17" pos:end="49:27">

                <expr_stmt pos:start="47:17" pos:end="47:36"><expr pos:start="47:17" pos:end="47:35"><name pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:19">res</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:33">check_errors</name></name><operator pos:start="47:34" pos:end="47:35">++</operator></expr>;</expr_stmt>

                <return pos:start="49:17" pos:end="49:27">return <expr pos:start="49:24" pos:end="49:26"><name pos:start="49:24" pos:end="49:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:55"><expr pos:start="57:9" pos:end="57:54"><name pos:start="57:9" pos:end="57:16">refcount</name> <operator pos:start="57:18" pos:end="57:18">=</operator> <call pos:start="57:20" pos:end="57:54"><name pos:start="57:20" pos:end="57:34"><name pos:start="57:20" pos:end="57:20">s</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:34">get_refcount</name></name><argument_list pos:start="57:35" pos:end="57:54">(<argument pos:start="57:36" pos:end="57:50"><expr pos:start="57:36" pos:end="57:50"><operator pos:start="57:36" pos:end="57:36">*</operator><name pos:start="57:37" pos:end="57:50">refcount_table</name></expr></argument>, <argument pos:start="57:53" pos:end="57:53"><expr pos:start="57:53" pos:end="57:53"><name pos:start="57:53" pos:end="57:53">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="72:9"><if pos:start="59:9" pos:end="72:9">if <condition pos:start="59:12" pos:end="59:40">(<expr pos:start="59:13" pos:end="59:39"><name pos:start="59:13" pos:end="59:20">refcount</name> <operator pos:start="59:22" pos:end="59:23">==</operator> <name pos:start="59:25" pos:end="59:39"><name pos:start="59:25" pos:end="59:25">s</name><operator pos:start="59:26" pos:end="59:27">-&gt;</operator><name pos:start="59:28" pos:end="59:39">refcount_max</name></name></expr>)</condition> <block pos:start="59:42" pos:end="72:9">{<block_content pos:start="61:13" pos:end="70:21">

            <expr_stmt pos:start="61:13" pos:end="63:42"><expr pos:start="61:13" pos:end="63:41"><call pos:start="61:13" pos:end="63:41"><name pos:start="61:13" pos:end="61:19">fprintf</name><argument_list pos:start="61:20" pos:end="63:41">(<argument pos:start="61:21" pos:end="61:26"><expr pos:start="61:21" pos:end="61:26"><name pos:start="61:21" pos:end="61:26">stderr</name></expr></argument>, <argument pos:start="61:29" pos:end="63:24"><expr pos:start="61:29" pos:end="63:24"><literal type="string" pos:start="61:29" pos:end="61:64">"ERROR: overflow cluster offset=0x%"</literal> <name pos:start="61:66" pos:end="61:71">PRIx64</name>

                    <literal type="string" pos:start="63:21" pos:end="63:24">"\n"</literal></expr></argument>, <argument pos:start="63:27" pos:end="63:40"><expr pos:start="63:27" pos:end="63:40"><name pos:start="63:27" pos:end="63:40">cluster_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




            <expr_stmt pos:start="68:13" pos:end="68:31"><expr pos:start="68:13" pos:end="68:30"><name pos:start="68:13" pos:end="68:28"><name pos:start="68:13" pos:end="68:15">res</name><operator pos:start="68:16" pos:end="68:17">-&gt;</operator><name pos:start="68:18" pos:end="68:28">corruptions</name></name><operator pos:start="68:29" pos:end="68:30">++</operator></expr>;</expr_stmt>

            <continue pos:start="70:13" pos:end="70:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="74:9" pos:end="74:58"><expr pos:start="74:9" pos:end="74:57"><call pos:start="74:9" pos:end="74:57"><name pos:start="74:9" pos:end="74:23"><name pos:start="74:9" pos:end="74:9">s</name><operator pos:start="74:10" pos:end="74:11">-&gt;</operator><name pos:start="74:12" pos:end="74:23">set_refcount</name></name><argument_list pos:start="74:24" pos:end="74:57">(<argument pos:start="74:25" pos:end="74:39"><expr pos:start="74:25" pos:end="74:39"><operator pos:start="74:25" pos:end="74:25">*</operator><name pos:start="74:26" pos:end="74:39">refcount_table</name></expr></argument>, <argument pos:start="74:42" pos:end="74:42"><expr pos:start="74:42" pos:end="74:42"><name pos:start="74:42" pos:end="74:42">k</name></expr></argument>, <argument pos:start="74:45" pos:end="74:56"><expr pos:start="74:45" pos:end="74:56"><name pos:start="74:45" pos:end="74:52">refcount</name> <operator pos:start="74:54" pos:end="74:54">+</operator> <literal type="number" pos:start="74:56" pos:end="74:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="80:5" pos:end="80:13">return <expr pos:start="80:12" pos:end="80:12"><literal type="number" pos:start="80:12" pos:end="80:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
