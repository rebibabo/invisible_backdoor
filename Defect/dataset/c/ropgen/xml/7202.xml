<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7202.c" pos:tabs="8"><function pos:start="1:1" pos:end="809:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">net_client_init</name><parameter_list pos:start="1:20" pos:end="1:68">(<parameter pos:start="1:21" pos:end="1:32"><decl pos:start="1:21" pos:end="1:32"><type pos:start="1:21" pos:end="1:32"><name pos:start="1:21" pos:end="1:27">Monitor</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">mon</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><specifier pos:start="1:35" pos:end="1:39">const</specifier> <name pos:start="1:41" pos:end="1:44">char</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:52">device</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:67"><decl pos:start="1:55" pos:end="1:67"><type pos:start="1:55" pos:end="1:67"><specifier pos:start="1:55" pos:end="1:59">const</specifier> <name pos:start="1:61" pos:end="1:64">char</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:67">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="809:1">{<block_content pos:start="5:5" pos:end="807:15">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:18"><name pos:start="5:10" pos:end="5:12">buf</name><index pos:start="5:13" pos:end="5:18">[<expr pos:start="5:14" pos:end="5:17"><literal type="number" pos:start="5:14" pos:end="5:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">vlan_id</name></decl>, <decl pos:start="7:18" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:20">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">VLANState</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:19">vlan</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:14">name</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:16"><expr pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:11">vlan_id</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:53">(<expr pos:start="17:9" pos:end="17:52"><call pos:start="17:9" pos:end="17:52"><name pos:start="17:9" pos:end="17:23">get_param_value</name><argument_list pos:start="17:24" pos:end="17:52">(<argument pos:start="17:25" pos:end="17:27"><expr pos:start="17:25" pos:end="17:27"><name pos:start="17:25" pos:end="17:27">buf</name></expr></argument>, <argument pos:start="17:30" pos:end="17:40"><expr pos:start="17:30" pos:end="17:40"><sizeof pos:start="17:30" pos:end="17:40">sizeof<argument_list pos:start="17:36" pos:end="17:40">(<argument pos:start="17:37" pos:end="17:39"><expr pos:start="17:37" pos:end="17:39"><name pos:start="17:37" pos:end="17:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="17:43" pos:end="17:48"><expr pos:start="17:43" pos:end="17:48"><literal type="string" pos:start="17:43" pos:end="17:48">"vlan"</literal></expr></argument>, <argument pos:start="17:51" pos:end="17:51"><expr pos:start="17:51" pos:end="17:51"><name pos:start="17:51" pos:end="17:51">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:55" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:39">

        <expr_stmt pos:start="19:9" pos:end="19:39"><expr pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:15">vlan_id</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <call pos:start="19:19" pos:end="19:38"><name pos:start="19:19" pos:end="19:24">strtol</name><argument_list pos:start="19:25" pos:end="19:38">(<argument pos:start="19:26" pos:end="19:28"><expr pos:start="19:26" pos:end="19:28"><name pos:start="19:26" pos:end="19:28">buf</name></expr></argument>, <argument pos:start="19:31" pos:end="19:34"><expr pos:start="19:31" pos:end="19:34"><name pos:start="19:31" pos:end="19:34">NULL</name></expr></argument>, <argument pos:start="19:37" pos:end="19:37"><expr pos:start="19:37" pos:end="19:37"><literal type="number" pos:start="19:37" pos:end="19:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:38"><expr pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:8">vlan</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:37"><name pos:start="23:12" pos:end="23:25">qemu_find_vlan</name><argument_list pos:start="23:26" pos:end="23:37">(<argument pos:start="23:27" pos:end="23:33"><expr pos:start="23:27" pos:end="23:33"><name pos:start="23:27" pos:end="23:33">vlan_id</name></expr></argument>, <argument pos:start="23:36" pos:end="23:36"><expr pos:start="23:36" pos:end="23:36"><literal type="number" pos:start="23:36" pos:end="23:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:53">(<expr pos:start="27:9" pos:end="27:52"><call pos:start="27:9" pos:end="27:52"><name pos:start="27:9" pos:end="27:23">get_param_value</name><argument_list pos:start="27:24" pos:end="27:52">(<argument pos:start="27:25" pos:end="27:27"><expr pos:start="27:25" pos:end="27:27"><name pos:start="27:25" pos:end="27:27">buf</name></expr></argument>, <argument pos:start="27:30" pos:end="27:40"><expr pos:start="27:30" pos:end="27:40"><sizeof pos:start="27:30" pos:end="27:40">sizeof<argument_list pos:start="27:36" pos:end="27:40">(<argument pos:start="27:37" pos:end="27:39"><expr pos:start="27:37" pos:end="27:39"><name pos:start="27:37" pos:end="27:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="27:43" pos:end="27:48"><expr pos:start="27:43" pos:end="27:48"><literal type="string" pos:start="27:43" pos:end="27:48">"name"</literal></expr></argument>, <argument pos:start="27:51" pos:end="27:51"><expr pos:start="27:51" pos:end="27:51"><name pos:start="27:51" pos:end="27:51">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:55" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:32">

        <expr_stmt pos:start="29:9" pos:end="29:32"><expr pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:12">name</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <call pos:start="29:16" pos:end="29:31"><name pos:start="29:16" pos:end="29:26">qemu_strdup</name><argument_list pos:start="29:27" pos:end="29:31">(<argument pos:start="29:28" pos:end="29:30"><expr pos:start="29:28" pos:end="29:30"><name pos:start="29:28" pos:end="29:30">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="33:5" pos:end="795:5"><if pos:start="33:5" pos:end="167:5">if <condition pos:start="33:8" pos:end="33:31">(<expr pos:start="33:9" pos:end="33:30"><operator pos:start="33:9" pos:end="33:9">!</operator><call pos:start="33:10" pos:end="33:30"><name pos:start="33:10" pos:end="33:15">strcmp</name><argument_list pos:start="33:16" pos:end="33:30">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">device</name></expr></argument>, <argument pos:start="33:25" pos:end="33:29"><expr pos:start="33:25" pos:end="33:29"><literal type="string" pos:start="33:25" pos:end="33:29">"nic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:33" pos:end="167:5">{<block_content pos:start="35:9" pos:end="165:18">

        <decl_stmt pos:start="35:9" pos:end="39:10"><decl pos:start="35:9" pos:end="39:9"><type pos:start="35:9" pos:end="35:33"><specifier pos:start="35:9" pos:end="35:14">static</specifier> <specifier pos:start="35:16" pos:end="35:20">const</specifier> <name pos:start="35:22" pos:end="35:25">char</name> <modifier pos:start="35:27" pos:end="35:27">*</modifier> <specifier pos:start="35:29" pos:end="35:33">const</specifier></type> <name pos:start="35:35" pos:end="35:46"><name pos:start="35:35" pos:end="35:44">nic_params</name><index pos:start="35:45" pos:end="35:46">[]</index></name> <init pos:start="35:48" pos:end="39:9">= <expr pos:start="35:50" pos:end="39:9"><block pos:start="35:50" pos:end="39:9">{

            <expr pos:start="37:13" pos:end="37:18"><literal type="string" pos:start="37:13" pos:end="37:18">"vlan"</literal></expr>, <expr pos:start="37:21" pos:end="37:26"><literal type="string" pos:start="37:21" pos:end="37:26">"name"</literal></expr>, <expr pos:start="37:29" pos:end="37:37"><literal type="string" pos:start="37:29" pos:end="37:37">"macaddr"</literal></expr>, <expr pos:start="37:40" pos:end="37:46"><literal type="string" pos:start="37:40" pos:end="37:46">"model"</literal></expr>, <expr pos:start="37:49" pos:end="37:54"><literal type="string" pos:start="37:49" pos:end="37:54">"addr"</literal></expr>, <expr pos:start="37:57" pos:end="37:60"><literal type="string" pos:start="37:57" pos:end="37:60">"id"</literal></expr>, <expr pos:start="37:63" pos:end="37:71"><literal type="string" pos:start="37:63" pos:end="37:71">"vectors"</literal></expr>, <expr pos:start="37:74" pos:end="37:77"><name pos:start="37:74" pos:end="37:77">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:20"><decl pos:start="41:9" pos:end="41:19"><type pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:15">NICInfo</name> <modifier pos:start="41:17" pos:end="41:17">*</modifier></type><name pos:start="41:18" pos:end="41:19">nd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:25"><decl pos:start="43:9" pos:end="43:24"><type pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:15">uint8_t</name> <modifier pos:start="43:17" pos:end="43:17">*</modifier></type><name pos:start="43:18" pos:end="43:24">macaddr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:37"><decl pos:start="45:9" pos:end="45:36"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:15">idx</name> <init pos:start="45:17" pos:end="45:36">= <expr pos:start="45:19" pos:end="45:36"><call pos:start="45:19" pos:end="45:36"><name pos:start="45:19" pos:end="45:34">nic_get_free_idx</name><argument_list pos:start="45:35" pos:end="45:36">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:62">(<expr pos:start="49:13" pos:end="49:61"><call pos:start="49:13" pos:end="49:57"><name pos:start="49:13" pos:end="49:24">check_params</name><argument_list pos:start="49:25" pos:end="49:57">(<argument pos:start="49:26" pos:end="49:28"><expr pos:start="49:26" pos:end="49:28"><name pos:start="49:26" pos:end="49:28">buf</name></expr></argument>, <argument pos:start="49:31" pos:end="49:41"><expr pos:start="49:31" pos:end="49:41"><sizeof pos:start="49:31" pos:end="49:41">sizeof<argument_list pos:start="49:37" pos:end="49:41">(<argument pos:start="49:38" pos:end="49:40"><expr pos:start="49:38" pos:end="49:40"><name pos:start="49:38" pos:end="49:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="49:44" pos:end="49:53"><expr pos:start="49:44" pos:end="49:53"><name pos:start="49:44" pos:end="49:53">nic_params</name></expr></argument>, <argument pos:start="49:56" pos:end="49:56"><expr pos:start="49:56" pos:end="49:56"><name pos:start="49:56" pos:end="49:56">p</name></expr></argument>)</argument_list></call> <operator pos:start="49:59" pos:end="49:59">&lt;</operator> <literal type="number" pos:start="49:61" pos:end="49:61">0</literal></expr>)</condition> <block pos:start="49:64" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:21">

            <expr_stmt pos:start="51:13" pos:end="51:74"><expr pos:start="51:13" pos:end="51:73"><call pos:start="51:13" pos:end="51:73"><name pos:start="51:13" pos:end="51:24">config_error</name><argument_list pos:start="51:25" pos:end="51:73">(<argument pos:start="51:26" pos:end="51:28"><expr pos:start="51:26" pos:end="51:28"><name pos:start="51:26" pos:end="51:28">mon</name></expr></argument>, <argument pos:start="51:31" pos:end="51:64"><expr pos:start="51:31" pos:end="51:64"><literal type="string" pos:start="51:31" pos:end="51:64">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="51:67" pos:end="51:69"><expr pos:start="51:67" pos:end="51:69"><name pos:start="51:67" pos:end="51:69">buf</name></expr></argument>, <argument pos:start="51:72" pos:end="51:72"><expr pos:start="51:72" pos:end="51:72"><name pos:start="51:72" pos:end="51:72">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:21"><expr pos:start="53:13" pos:end="53:20"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <operator pos:start="53:19" pos:end="53:19">-</operator><literal type="number" pos:start="53:20" pos:end="53:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="55:13" pos:end="55:21">goto <name pos:start="55:18" pos:end="55:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="67:9">if <condition pos:start="59:12" pos:end="59:45">(<expr pos:start="59:13" pos:end="59:44"><name pos:start="59:13" pos:end="59:15">idx</name> <operator pos:start="59:17" pos:end="59:18">==</operator> <operator pos:start="59:20" pos:end="59:20">-</operator><literal type="number" pos:start="59:21" pos:end="59:21">1</literal> <operator pos:start="59:23" pos:end="59:24">||</operator> <name pos:start="59:26" pos:end="59:32">nb_nics</name> <operator pos:start="59:34" pos:end="59:35">&gt;=</operator> <name pos:start="59:37" pos:end="59:44">MAX_NICS</name></expr>)</condition> <block pos:start="59:47" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:21">

            <expr_stmt pos:start="61:13" pos:end="61:49"><expr pos:start="61:13" pos:end="61:48"><call pos:start="61:13" pos:end="61:48"><name pos:start="61:13" pos:end="61:24">config_error</name><argument_list pos:start="61:25" pos:end="61:48">(<argument pos:start="61:26" pos:end="61:28"><expr pos:start="61:26" pos:end="61:28"><name pos:start="61:26" pos:end="61:28">mon</name></expr></argument>, <argument pos:start="61:31" pos:end="61:47"><expr pos:start="61:31" pos:end="61:47"><literal type="string" pos:start="61:31" pos:end="61:47">"Too Many NICs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:21"><expr pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <operator pos:start="63:19" pos:end="63:19">-</operator><literal type="number" pos:start="63:20" pos:end="63:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="65:13" pos:end="65:21">goto <name pos:start="65:18" pos:end="65:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:28"><expr pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:10">nd</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <operator pos:start="69:14" pos:end="69:14">&amp;</operator><name pos:start="69:15" pos:end="69:27"><name pos:start="69:15" pos:end="69:22">nd_table</name><index pos:start="69:23" pos:end="69:27">[<expr pos:start="69:24" pos:end="69:26"><name pos:start="69:24" pos:end="69:26">idx</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:35"><expr pos:start="71:9" pos:end="71:34"><call pos:start="71:9" pos:end="71:34"><name pos:start="71:9" pos:end="71:14">memset</name><argument_list pos:start="71:15" pos:end="71:34">(<argument pos:start="71:16" pos:end="71:17"><expr pos:start="71:16" pos:end="71:17"><name pos:start="71:16" pos:end="71:17">nd</name></expr></argument>, <argument pos:start="71:20" pos:end="71:20"><expr pos:start="71:20" pos:end="71:20"><literal type="number" pos:start="71:20" pos:end="71:20">0</literal></expr></argument>, <argument pos:start="71:23" pos:end="71:33"><expr pos:start="71:23" pos:end="71:33"><sizeof pos:start="71:23" pos:end="71:33">sizeof<argument_list pos:start="71:29" pos:end="71:33">(<argument pos:start="71:30" pos:end="71:32"><expr pos:start="71:30" pos:end="71:32"><operator pos:start="71:30" pos:end="71:30">*</operator><name pos:start="71:31" pos:end="71:32">nd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:30"><expr pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:15">macaddr</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <name pos:start="73:19" pos:end="73:29"><name pos:start="73:19" pos:end="73:20">nd</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:29">macaddr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:26"><expr pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:15">macaddr</name><index pos:start="75:16" pos:end="75:18">[<expr pos:start="75:17" pos:end="75:17"><literal type="number" pos:start="75:17" pos:end="75:17">0</literal></expr>]</index></name> <operator pos:start="75:20" pos:end="75:20">=</operator> <literal type="number" pos:start="75:22" pos:end="75:25">0x52</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:26"><expr pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:15">macaddr</name><index pos:start="77:16" pos:end="77:18">[<expr pos:start="77:17" pos:end="77:17"><literal type="number" pos:start="77:17" pos:end="77:17">1</literal></expr>]</index></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <literal type="number" pos:start="77:22" pos:end="77:25">0x54</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:26"><expr pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:15">macaddr</name><index pos:start="79:16" pos:end="79:18">[<expr pos:start="79:17" pos:end="79:17"><literal type="number" pos:start="79:17" pos:end="79:17">2</literal></expr>]</index></name> <operator pos:start="79:20" pos:end="79:20">=</operator> <literal type="number" pos:start="79:22" pos:end="79:25">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:15">macaddr</name><index pos:start="81:16" pos:end="81:18">[<expr pos:start="81:17" pos:end="81:17"><literal type="number" pos:start="81:17" pos:end="81:17">3</literal></expr>]</index></name> <operator pos:start="81:20" pos:end="81:20">=</operator> <literal type="number" pos:start="81:22" pos:end="81:25">0x12</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:26"><expr pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:15">macaddr</name><index pos:start="83:16" pos:end="83:18">[<expr pos:start="83:17" pos:end="83:17"><literal type="number" pos:start="83:17" pos:end="83:17">4</literal></expr>]</index></name> <operator pos:start="83:20" pos:end="83:20">=</operator> <literal type="number" pos:start="83:22" pos:end="83:25">0x34</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:32"><expr pos:start="85:9" pos:end="85:31"><name pos:start="85:9" pos:end="85:18"><name pos:start="85:9" pos:end="85:15">macaddr</name><index pos:start="85:16" pos:end="85:18">[<expr pos:start="85:17" pos:end="85:17"><literal type="number" pos:start="85:17" pos:end="85:17">5</literal></expr>]</index></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <literal type="number" pos:start="85:22" pos:end="85:27">0x56</literal> <operator pos:start="85:27" pos:end="85:27">+</operator> <name pos:start="85:29" pos:end="85:31">idx</name></expr>;</expr_stmt>



        <if_stmt pos:start="89:9" pos:end="101:9"><if pos:start="89:9" pos:end="101:9">if <condition pos:start="89:12" pos:end="89:60">(<expr pos:start="89:13" pos:end="89:59"><call pos:start="89:13" pos:end="89:59"><name pos:start="89:13" pos:end="89:27">get_param_value</name><argument_list pos:start="89:28" pos:end="89:59">(<argument pos:start="89:29" pos:end="89:31"><expr pos:start="89:29" pos:end="89:31"><name pos:start="89:29" pos:end="89:31">buf</name></expr></argument>, <argument pos:start="89:34" pos:end="89:44"><expr pos:start="89:34" pos:end="89:44"><sizeof pos:start="89:34" pos:end="89:44">sizeof<argument_list pos:start="89:40" pos:end="89:44">(<argument pos:start="89:41" pos:end="89:43"><expr pos:start="89:41" pos:end="89:43"><name pos:start="89:41" pos:end="89:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="89:47" pos:end="89:55"><expr pos:start="89:47" pos:end="89:55"><literal type="string" pos:start="89:47" pos:end="89:55">"macaddr"</literal></expr></argument>, <argument pos:start="89:58" pos:end="89:58"><expr pos:start="89:58" pos:end="89:58"><name pos:start="89:58" pos:end="89:58">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:62" pos:end="101:9">{<block_content pos:start="91:13" pos:end="99:13">

            <if_stmt pos:start="91:13" pos:end="99:13"><if pos:start="91:13" pos:end="99:13">if <condition pos:start="91:16" pos:end="91:48">(<expr pos:start="91:17" pos:end="91:47"><call pos:start="91:17" pos:end="91:43"><name pos:start="91:17" pos:end="91:29">parse_macaddr</name><argument_list pos:start="91:30" pos:end="91:43">(<argument pos:start="91:31" pos:end="91:37"><expr pos:start="91:31" pos:end="91:37"><name pos:start="91:31" pos:end="91:37">macaddr</name></expr></argument>, <argument pos:start="91:40" pos:end="91:42"><expr pos:start="91:40" pos:end="91:42"><name pos:start="91:40" pos:end="91:42">buf</name></expr></argument>)</argument_list></call> <operator pos:start="91:45" pos:end="91:45">&lt;</operator> <literal type="number" pos:start="91:47" pos:end="91:47">0</literal></expr>)</condition> <block pos:start="91:50" pos:end="99:13">{<block_content pos:start="93:17" pos:end="97:25">

                <expr_stmt pos:start="93:17" pos:end="93:75"><expr pos:start="93:17" pos:end="93:74"><call pos:start="93:17" pos:end="93:74"><name pos:start="93:17" pos:end="93:28">config_error</name><argument_list pos:start="93:29" pos:end="93:74">(<argument pos:start="93:30" pos:end="93:32"><expr pos:start="93:30" pos:end="93:32"><name pos:start="93:30" pos:end="93:32">mon</name></expr></argument>, <argument pos:start="93:35" pos:end="93:73"><expr pos:start="93:35" pos:end="93:73"><literal type="string" pos:start="93:35" pos:end="93:73">"invalid syntax for ethernet address\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:25"><expr pos:start="95:17" pos:end="95:24"><name pos:start="95:17" pos:end="95:19">ret</name> <operator pos:start="95:21" pos:end="95:21">=</operator> <operator pos:start="95:23" pos:end="95:23">-</operator><literal type="number" pos:start="95:24" pos:end="95:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="97:17" pos:end="97:25">goto <name pos:start="97:22" pos:end="97:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:58">(<expr pos:start="103:13" pos:end="103:57"><call pos:start="103:13" pos:end="103:57"><name pos:start="103:13" pos:end="103:27">get_param_value</name><argument_list pos:start="103:28" pos:end="103:57">(<argument pos:start="103:29" pos:end="103:31"><expr pos:start="103:29" pos:end="103:31"><name pos:start="103:29" pos:end="103:31">buf</name></expr></argument>, <argument pos:start="103:34" pos:end="103:44"><expr pos:start="103:34" pos:end="103:44"><sizeof pos:start="103:34" pos:end="103:44">sizeof<argument_list pos:start="103:40" pos:end="103:44">(<argument pos:start="103:41" pos:end="103:43"><expr pos:start="103:41" pos:end="103:43"><name pos:start="103:41" pos:end="103:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="103:47" pos:end="103:53"><expr pos:start="103:47" pos:end="103:53"><literal type="string" pos:start="103:47" pos:end="103:53">"model"</literal></expr></argument>, <argument pos:start="103:56" pos:end="103:56"><expr pos:start="103:56" pos:end="103:56"><name pos:start="103:56" pos:end="103:56">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:60" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:41">

            <expr_stmt pos:start="105:13" pos:end="105:41"><expr pos:start="105:13" pos:end="105:40"><name pos:start="105:13" pos:end="105:21"><name pos:start="105:13" pos:end="105:14">nd</name><operator pos:start="105:15" pos:end="105:16">-&gt;</operator><name pos:start="105:17" pos:end="105:21">model</name></name> <operator pos:start="105:23" pos:end="105:23">=</operator> <call pos:start="105:25" pos:end="105:40"><name pos:start="105:25" pos:end="105:35">qemu_strdup</name><argument_list pos:start="105:36" pos:end="105:40">(<argument pos:start="105:37" pos:end="105:39"><expr pos:start="105:37" pos:end="105:39"><name pos:start="105:37" pos:end="105:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="109:9" pos:end="113:9"><if pos:start="109:9" pos:end="113:9">if <condition pos:start="109:12" pos:end="109:57">(<expr pos:start="109:13" pos:end="109:56"><call pos:start="109:13" pos:end="109:56"><name pos:start="109:13" pos:end="109:27">get_param_value</name><argument_list pos:start="109:28" pos:end="109:56">(<argument pos:start="109:29" pos:end="109:31"><expr pos:start="109:29" pos:end="109:31"><name pos:start="109:29" pos:end="109:31">buf</name></expr></argument>, <argument pos:start="109:34" pos:end="109:44"><expr pos:start="109:34" pos:end="109:44"><sizeof pos:start="109:34" pos:end="109:44">sizeof<argument_list pos:start="109:40" pos:end="109:44">(<argument pos:start="109:41" pos:end="109:43"><expr pos:start="109:41" pos:end="109:43"><name pos:start="109:41" pos:end="109:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="109:47" pos:end="109:52"><expr pos:start="109:47" pos:end="109:52"><literal type="string" pos:start="109:47" pos:end="109:52">"addr"</literal></expr></argument>, <argument pos:start="109:55" pos:end="109:55"><expr pos:start="109:55" pos:end="109:55"><name pos:start="109:55" pos:end="109:55">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:59" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:43">

            <expr_stmt pos:start="111:13" pos:end="111:43"><expr pos:start="111:13" pos:end="111:42"><name pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:14">nd</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:23">devaddr</name></name> <operator pos:start="111:25" pos:end="111:25">=</operator> <call pos:start="111:27" pos:end="111:42"><name pos:start="111:27" pos:end="111:37">qemu_strdup</name><argument_list pos:start="111:38" pos:end="111:42">(<argument pos:start="111:39" pos:end="111:41"><expr pos:start="111:39" pos:end="111:41"><name pos:start="111:39" pos:end="111:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:55">(<expr pos:start="115:13" pos:end="115:54"><call pos:start="115:13" pos:end="115:54"><name pos:start="115:13" pos:end="115:27">get_param_value</name><argument_list pos:start="115:28" pos:end="115:54">(<argument pos:start="115:29" pos:end="115:31"><expr pos:start="115:29" pos:end="115:31"><name pos:start="115:29" pos:end="115:31">buf</name></expr></argument>, <argument pos:start="115:34" pos:end="115:44"><expr pos:start="115:34" pos:end="115:44"><sizeof pos:start="115:34" pos:end="115:44">sizeof<argument_list pos:start="115:40" pos:end="115:44">(<argument pos:start="115:41" pos:end="115:43"><expr pos:start="115:41" pos:end="115:43"><name pos:start="115:41" pos:end="115:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="115:47" pos:end="115:50"><expr pos:start="115:47" pos:end="115:50"><literal type="string" pos:start="115:47" pos:end="115:50">"id"</literal></expr></argument>, <argument pos:start="115:53" pos:end="115:53"><expr pos:start="115:53" pos:end="115:53"><name pos:start="115:53" pos:end="115:53">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:57" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:38">

            <expr_stmt pos:start="117:13" pos:end="117:38"><expr pos:start="117:13" pos:end="117:37"><name pos:start="117:13" pos:end="117:18"><name pos:start="117:13" pos:end="117:14">nd</name><operator pos:start="117:15" pos:end="117:16">-&gt;</operator><name pos:start="117:17" pos:end="117:18">id</name></name> <operator pos:start="117:20" pos:end="117:20">=</operator> <call pos:start="117:22" pos:end="117:37"><name pos:start="117:22" pos:end="117:32">qemu_strdup</name><argument_list pos:start="117:33" pos:end="117:37">(<argument pos:start="117:34" pos:end="117:36"><expr pos:start="117:34" pos:end="117:36"><name pos:start="117:34" pos:end="117:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:48"><expr pos:start="121:9" pos:end="121:47"><name pos:start="121:9" pos:end="121:20"><name pos:start="121:9" pos:end="121:10">nd</name><operator pos:start="121:11" pos:end="121:12">-&gt;</operator><name pos:start="121:13" pos:end="121:20">nvectors</name></name> <operator pos:start="121:22" pos:end="121:22">=</operator> <name pos:start="121:24" pos:end="121:47">NIC_NVECTORS_UNSPECIFIED</name></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="151:9"><if pos:start="123:9" pos:end="151:9">if <condition pos:start="123:12" pos:end="123:60">(<expr pos:start="123:13" pos:end="123:59"><call pos:start="123:13" pos:end="123:59"><name pos:start="123:13" pos:end="123:27">get_param_value</name><argument_list pos:start="123:28" pos:end="123:59">(<argument pos:start="123:29" pos:end="123:31"><expr pos:start="123:29" pos:end="123:31"><name pos:start="123:29" pos:end="123:31">buf</name></expr></argument>, <argument pos:start="123:34" pos:end="123:44"><expr pos:start="123:34" pos:end="123:44"><sizeof pos:start="123:34" pos:end="123:44">sizeof<argument_list pos:start="123:40" pos:end="123:44">(<argument pos:start="123:41" pos:end="123:43"><expr pos:start="123:41" pos:end="123:43"><name pos:start="123:41" pos:end="123:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="123:47" pos:end="123:55"><expr pos:start="123:47" pos:end="123:55"><literal type="string" pos:start="123:47" pos:end="123:55">"vectors"</literal></expr></argument>, <argument pos:start="123:58" pos:end="123:58"><expr pos:start="123:58" pos:end="123:58"><name pos:start="123:58" pos:end="123:58">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:62" pos:end="151:9">{<block_content pos:start="125:13" pos:end="149:35">

            <decl_stmt pos:start="125:13" pos:end="125:25"><decl pos:start="125:13" pos:end="125:24"><type pos:start="125:13" pos:end="125:18"><name pos:start="125:13" pos:end="125:16">char</name> <modifier pos:start="125:18" pos:end="125:18">*</modifier></type><name pos:start="125:19" pos:end="125:24">endptr</name></decl>;</decl_stmt>

            <decl_stmt pos:start="127:13" pos:end="127:51"><decl pos:start="127:13" pos:end="127:50"><type pos:start="127:13" pos:end="127:16"><name pos:start="127:13" pos:end="127:16">long</name></type> <name pos:start="127:18" pos:end="127:24">vectors</name> <init pos:start="127:26" pos:end="127:50">= <expr pos:start="127:28" pos:end="127:50"><call pos:start="127:28" pos:end="127:50"><name pos:start="127:28" pos:end="127:33">strtol</name><argument_list pos:start="127:34" pos:end="127:50">(<argument pos:start="127:35" pos:end="127:37"><expr pos:start="127:35" pos:end="127:37"><name pos:start="127:35" pos:end="127:37">buf</name></expr></argument>, <argument pos:start="127:40" pos:end="127:46"><expr pos:start="127:40" pos:end="127:46"><operator pos:start="127:40" pos:end="127:40">&amp;</operator><name pos:start="127:41" pos:end="127:46">endptr</name></expr></argument>, <argument pos:start="127:49" pos:end="127:49"><expr pos:start="127:49" pos:end="127:49"><literal type="number" pos:start="127:49" pos:end="127:49">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="129:13" pos:end="137:13"><if pos:start="129:13" pos:end="137:13">if <condition pos:start="129:16" pos:end="129:24">(<expr pos:start="129:17" pos:end="129:23"><operator pos:start="129:17" pos:end="129:17">*</operator><name pos:start="129:18" pos:end="129:23">endptr</name></expr>)</condition> <block pos:start="129:26" pos:end="137:13">{<block_content pos:start="131:17" pos:end="135:25">

                <expr_stmt pos:start="131:17" pos:end="131:71"><expr pos:start="131:17" pos:end="131:70"><call pos:start="131:17" pos:end="131:70"><name pos:start="131:17" pos:end="131:28">config_error</name><argument_list pos:start="131:29" pos:end="131:70">(<argument pos:start="131:30" pos:end="131:32"><expr pos:start="131:30" pos:end="131:32"><name pos:start="131:30" pos:end="131:32">mon</name></expr></argument>, <argument pos:start="131:35" pos:end="131:69"><expr pos:start="131:35" pos:end="131:69"><literal type="string" pos:start="131:35" pos:end="131:69">"invalid syntax for # of vectors\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:25"><expr pos:start="133:17" pos:end="133:24"><name pos:start="133:17" pos:end="133:19">ret</name> <operator pos:start="133:21" pos:end="133:21">=</operator> <operator pos:start="133:23" pos:end="133:23">-</operator><literal type="number" pos:start="133:24" pos:end="133:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="135:17" pos:end="135:25">goto <name pos:start="135:22" pos:end="135:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="139:13" pos:end="147:13"><if pos:start="139:13" pos:end="147:13">if <condition pos:start="139:16" pos:end="139:51">(<expr pos:start="139:17" pos:end="139:50"><name pos:start="139:17" pos:end="139:40"><name pos:start="139:17" pos:end="139:23">vectors</name> <argument_list type="generic" pos:start="139:25" pos:end="139:40">&lt; <argument pos:start="139:27" pos:end="139:38"><expr pos:start="139:27" pos:end="139:38"><literal type="number" pos:start="139:27" pos:end="139:27">0</literal> <operator pos:start="139:29" pos:end="139:30">||</operator> <name pos:start="139:32" pos:end="139:38">vectors</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="139:42" pos:end="139:50">0x7ffffff</literal></expr>)</condition> <block pos:start="139:53" pos:end="147:13">{<block_content pos:start="141:17" pos:end="145:25">

                <expr_stmt pos:start="141:17" pos:end="141:60"><expr pos:start="141:17" pos:end="141:59"><call pos:start="141:17" pos:end="141:59"><name pos:start="141:17" pos:end="141:28">config_error</name><argument_list pos:start="141:29" pos:end="141:59">(<argument pos:start="141:30" pos:end="141:32"><expr pos:start="141:30" pos:end="141:32"><name pos:start="141:30" pos:end="141:32">mon</name></expr></argument>, <argument pos:start="141:35" pos:end="141:58"><expr pos:start="141:35" pos:end="141:58"><literal type="string" pos:start="141:35" pos:end="141:58">"invalid # of vectors\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="143:17" pos:end="143:25"><expr pos:start="143:17" pos:end="143:24"><name pos:start="143:17" pos:end="143:19">ret</name> <operator pos:start="143:21" pos:end="143:21">=</operator> <operator pos:start="143:23" pos:end="143:23">-</operator><literal type="number" pos:start="143:24" pos:end="143:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="145:17" pos:end="145:25">goto <name pos:start="145:22" pos:end="145:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:35"><expr pos:start="149:13" pos:end="149:34"><name pos:start="149:13" pos:end="149:24"><name pos:start="149:13" pos:end="149:14">nd</name><operator pos:start="149:15" pos:end="149:16">-&gt;</operator><name pos:start="149:17" pos:end="149:24">nvectors</name></name> <operator pos:start="149:26" pos:end="149:26">=</operator> <name pos:start="149:28" pos:end="149:34">vectors</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:24"><expr pos:start="153:9" pos:end="153:23"><name pos:start="153:9" pos:end="153:16"><name pos:start="153:9" pos:end="153:10">nd</name><operator pos:start="153:11" pos:end="153:12">-&gt;</operator><name pos:start="153:13" pos:end="153:16">vlan</name></name> <operator pos:start="153:18" pos:end="153:18">=</operator> <name pos:start="153:20" pos:end="153:23">vlan</name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:24"><expr pos:start="155:9" pos:end="155:23"><name pos:start="155:9" pos:end="155:16"><name pos:start="155:9" pos:end="155:10">nd</name><operator pos:start="155:11" pos:end="155:12">-&gt;</operator><name pos:start="155:13" pos:end="155:16">name</name></name> <operator pos:start="155:18" pos:end="155:18">=</operator> <name pos:start="155:20" pos:end="155:23">name</name></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:21"><expr pos:start="157:9" pos:end="157:20"><name pos:start="157:9" pos:end="157:16"><name pos:start="157:9" pos:end="157:10">nd</name><operator pos:start="157:11" pos:end="157:12">-&gt;</operator><name pos:start="157:13" pos:end="157:16">used</name></name> <operator pos:start="157:18" pos:end="157:18">=</operator> <literal type="number" pos:start="157:20" pos:end="157:20">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:20"><expr pos:start="159:9" pos:end="159:19"><name pos:start="159:9" pos:end="159:12">name</name> <operator pos:start="159:14" pos:end="159:14">=</operator> <name pos:start="159:16" pos:end="159:19">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:18"><expr pos:start="161:9" pos:end="161:17"><name pos:start="161:9" pos:end="161:15">nb_nics</name><operator pos:start="161:16" pos:end="161:17">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:30"><expr pos:start="163:9" pos:end="163:29"><name pos:start="163:9" pos:end="163:27"><name pos:start="163:9" pos:end="163:12">vlan</name><operator pos:start="163:13" pos:end="163:14">-&gt;</operator><name pos:start="163:15" pos:end="163:27">nb_guest_devs</name></name><operator pos:start="163:28" pos:end="163:29">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:18"><expr pos:start="165:9" pos:end="165:17"><name pos:start="165:9" pos:end="165:11">ret</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <name pos:start="165:15" pos:end="165:17">idx</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="167:7" pos:end="187:5">else

    if <condition pos:start="169:8" pos:end="169:32">(<expr pos:start="169:9" pos:end="169:31"><operator pos:start="169:9" pos:end="169:9">!</operator><call pos:start="169:10" pos:end="169:31"><name pos:start="169:10" pos:end="169:15">strcmp</name><argument_list pos:start="169:16" pos:end="169:31">(<argument pos:start="169:17" pos:end="169:22"><expr pos:start="169:17" pos:end="169:22"><name pos:start="169:17" pos:end="169:22">device</name></expr></argument>, <argument pos:start="169:25" pos:end="169:30"><expr pos:start="169:25" pos:end="169:30"><literal type="string" pos:start="169:25" pos:end="169:30">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="169:34" pos:end="187:5">{<block_content pos:start="171:9" pos:end="185:16">

        <if_stmt pos:start="171:9" pos:end="179:9"><if pos:start="171:9" pos:end="179:9">if <condition pos:start="171:12" pos:end="171:23">(<expr pos:start="171:13" pos:end="171:22"><operator pos:start="171:13" pos:end="171:13">*</operator><name pos:start="171:14" pos:end="171:14">p</name> <operator pos:start="171:16" pos:end="171:17">!=</operator> <literal type="char" pos:start="171:19" pos:end="171:22">'\0'</literal></expr>)</condition> <block pos:start="171:25" pos:end="179:9">{<block_content pos:start="173:13" pos:end="177:21">

            <expr_stmt pos:start="173:13" pos:end="173:62"><expr pos:start="173:13" pos:end="173:61"><call pos:start="173:13" pos:end="173:61"><name pos:start="173:13" pos:end="173:24">config_error</name><argument_list pos:start="173:25" pos:end="173:61">(<argument pos:start="173:26" pos:end="173:28"><expr pos:start="173:26" pos:end="173:28"><name pos:start="173:26" pos:end="173:28">mon</name></expr></argument>, <argument pos:start="173:31" pos:end="173:60"><expr pos:start="173:31" pos:end="173:60"><literal type="string" pos:start="173:31" pos:end="173:60">"'none' takes no parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:21"><expr pos:start="175:13" pos:end="175:20"><name pos:start="175:13" pos:end="175:15">ret</name> <operator pos:start="175:17" pos:end="175:17">=</operator> <operator pos:start="175:19" pos:end="175:19">-</operator><literal type="number" pos:start="175:20" pos:end="175:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="177:13" pos:end="177:21">goto <name pos:start="177:18" pos:end="177:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="181:9" pos:end="183:24">/* does nothing. It is needed to signal that no network cards

           are wanted */</comment>

        <expr_stmt pos:start="185:9" pos:end="185:16"><expr pos:start="185:9" pos:end="185:15"><name pos:start="185:9" pos:end="185:11">ret</name> <operator pos:start="185:13" pos:end="185:13">=</operator> <literal type="number" pos:start="185:15" pos:end="185:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="187:7" pos:end="399:5">else

<cpp:ifdef pos:start="189:1" pos:end="189:19">#<cpp:directive pos:start="189:2" pos:end="189:6">ifdef</cpp:directive> <name pos:start="189:8" pos:end="189:19">CONFIG_SLIRP</name></cpp:ifdef>

    if <condition pos:start="191:8" pos:end="191:32">(<expr pos:start="191:9" pos:end="191:31"><operator pos:start="191:9" pos:end="191:9">!</operator><call pos:start="191:10" pos:end="191:31"><name pos:start="191:10" pos:end="191:15">strcmp</name><argument_list pos:start="191:16" pos:end="191:31">(<argument pos:start="191:17" pos:end="191:22"><expr pos:start="191:17" pos:end="191:22"><name pos:start="191:17" pos:end="191:22">device</name></expr></argument>, <argument pos:start="191:25" pos:end="191:30"><expr pos:start="191:25" pos:end="191:30"><literal type="string" pos:start="191:25" pos:end="191:30">"user"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="191:34" pos:end="399:5">{<block_content pos:start="193:9" pos:end="397:27">

        <decl_stmt pos:start="193:9" pos:end="201:10"><decl pos:start="193:9" pos:end="201:9"><type pos:start="193:9" pos:end="193:33"><specifier pos:start="193:9" pos:end="193:14">static</specifier> <specifier pos:start="193:16" pos:end="193:20">const</specifier> <name pos:start="193:22" pos:end="193:25">char</name> <modifier pos:start="193:27" pos:end="193:27">*</modifier> <specifier pos:start="193:29" pos:end="193:33">const</specifier></type> <name pos:start="193:35" pos:end="193:48"><name pos:start="193:35" pos:end="193:46">slirp_params</name><index pos:start="193:47" pos:end="193:48">[]</index></name> <init pos:start="193:50" pos:end="201:9">= <expr pos:start="193:52" pos:end="201:9"><block pos:start="193:52" pos:end="201:9">{

            <expr pos:start="195:13" pos:end="195:18"><literal type="string" pos:start="195:13" pos:end="195:18">"vlan"</literal></expr>, <expr pos:start="195:21" pos:end="195:26"><literal type="string" pos:start="195:21" pos:end="195:26">"name"</literal></expr>, <expr pos:start="195:29" pos:end="195:38"><literal type="string" pos:start="195:29" pos:end="195:38">"hostname"</literal></expr>, <expr pos:start="195:41" pos:end="195:50"><literal type="string" pos:start="195:41" pos:end="195:50">"restrict"</literal></expr>, <expr pos:start="195:53" pos:end="195:56"><literal type="string" pos:start="195:53" pos:end="195:56">"ip"</literal></expr>, <expr pos:start="195:59" pos:end="195:63"><literal type="string" pos:start="195:59" pos:end="195:63">"net"</literal></expr>, <expr pos:start="195:66" pos:end="195:71"><literal type="string" pos:start="195:66" pos:end="195:71">"host"</literal></expr>,

            <expr pos:start="197:13" pos:end="197:18"><literal type="string" pos:start="197:13" pos:end="197:18">"tftp"</literal></expr>, <expr pos:start="197:21" pos:end="197:30"><literal type="string" pos:start="197:21" pos:end="197:30">"bootfile"</literal></expr>, <expr pos:start="197:33" pos:end="197:43"><literal type="string" pos:start="197:33" pos:end="197:43">"dhcpstart"</literal></expr>, <expr pos:start="197:46" pos:end="197:50"><literal type="string" pos:start="197:46" pos:end="197:50">"dns"</literal></expr>, <expr pos:start="197:53" pos:end="197:57"><literal type="string" pos:start="197:53" pos:end="197:57">"smb"</literal></expr>, <expr pos:start="197:60" pos:end="197:70"><literal type="string" pos:start="197:60" pos:end="197:70">"smbserver"</literal></expr>,

            <expr pos:start="199:13" pos:end="199:21"><literal type="string" pos:start="199:13" pos:end="199:21">"hostfwd"</literal></expr>, <expr pos:start="199:24" pos:end="199:33"><literal type="string" pos:start="199:24" pos:end="199:33">"guestfwd"</literal></expr>, <expr pos:start="199:36" pos:end="199:39"><name pos:start="199:36" pos:end="199:39">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="203:9" pos:end="203:40"><decl pos:start="203:9" pos:end="203:39"><type pos:start="203:9" pos:end="203:33"><name pos:start="203:9" pos:end="203:31"><name pos:start="203:9" pos:end="203:14">struct</name> <name pos:start="203:16" pos:end="203:31">slirp_config_str</name></name> <modifier pos:start="203:33" pos:end="203:33">*</modifier></type><name pos:start="203:34" pos:end="203:39">config</name></decl>;</decl_stmt>

        <decl_stmt pos:start="205:9" pos:end="205:27"><decl pos:start="205:9" pos:end="205:26"><type pos:start="205:9" pos:end="205:11"><name pos:start="205:9" pos:end="205:11">int</name></type> <name pos:start="205:13" pos:end="205:22">restricted</name> <init pos:start="205:24" pos:end="205:26">= <expr pos:start="205:26" pos:end="205:26"><literal type="number" pos:start="205:26" pos:end="205:26">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="207:9" pos:end="207:26"><decl pos:start="207:9" pos:end="207:25"><type pos:start="207:9" pos:end="207:14"><name pos:start="207:9" pos:end="207:12">char</name> <modifier pos:start="207:14" pos:end="207:14">*</modifier></type><name pos:start="207:15" pos:end="207:18">vnet</name> <init pos:start="207:20" pos:end="207:25">= <expr pos:start="207:22" pos:end="207:25"><name pos:start="207:22" pos:end="207:25">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="209:9" pos:end="209:27"><decl pos:start="209:9" pos:end="209:26"><type pos:start="209:9" pos:end="209:14"><name pos:start="209:9" pos:end="209:12">char</name> <modifier pos:start="209:14" pos:end="209:14">*</modifier></type><name pos:start="209:15" pos:end="209:19">vhost</name> <init pos:start="209:21" pos:end="209:26">= <expr pos:start="209:23" pos:end="209:26"><name pos:start="209:23" pos:end="209:26">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="211:9" pos:end="211:31"><decl pos:start="211:9" pos:end="211:30"><type pos:start="211:9" pos:end="211:14"><name pos:start="211:9" pos:end="211:12">char</name> <modifier pos:start="211:14" pos:end="211:14">*</modifier></type><name pos:start="211:15" pos:end="211:23">vhostname</name> <init pos:start="211:25" pos:end="211:30">= <expr pos:start="211:27" pos:end="211:30"><name pos:start="211:27" pos:end="211:30">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="213:9" pos:end="213:33"><decl pos:start="213:9" pos:end="213:32"><type pos:start="213:9" pos:end="213:14"><name pos:start="213:9" pos:end="213:12">char</name> <modifier pos:start="213:14" pos:end="213:14">*</modifier></type><name pos:start="213:15" pos:end="213:25">tftp_export</name> <init pos:start="213:27" pos:end="213:32">= <expr pos:start="213:29" pos:end="213:32"><name pos:start="213:29" pos:end="213:32">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="215:9" pos:end="215:30"><decl pos:start="215:9" pos:end="215:29"><type pos:start="215:9" pos:end="215:14"><name pos:start="215:9" pos:end="215:12">char</name> <modifier pos:start="215:14" pos:end="215:14">*</modifier></type><name pos:start="215:15" pos:end="215:22">bootfile</name> <init pos:start="215:24" pos:end="215:29">= <expr pos:start="215:26" pos:end="215:29"><name pos:start="215:26" pos:end="215:29">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="217:9" pos:end="217:33"><decl pos:start="217:9" pos:end="217:32"><type pos:start="217:9" pos:end="217:14"><name pos:start="217:9" pos:end="217:12">char</name> <modifier pos:start="217:14" pos:end="217:14">*</modifier></type><name pos:start="217:15" pos:end="217:25">vdhcp_start</name> <init pos:start="217:27" pos:end="217:32">= <expr pos:start="217:29" pos:end="217:32"><name pos:start="217:29" pos:end="217:32">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="219:9" pos:end="219:30"><decl pos:start="219:9" pos:end="219:29"><type pos:start="219:9" pos:end="219:14"><name pos:start="219:9" pos:end="219:12">char</name> <modifier pos:start="219:14" pos:end="219:14">*</modifier></type><name pos:start="219:15" pos:end="219:22">vnamesrv</name> <init pos:start="219:24" pos:end="219:29">= <expr pos:start="219:26" pos:end="219:29"><name pos:start="219:26" pos:end="219:29">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="221:9" pos:end="221:32"><decl pos:start="221:9" pos:end="221:31"><type pos:start="221:9" pos:end="221:14"><name pos:start="221:9" pos:end="221:12">char</name> <modifier pos:start="221:14" pos:end="221:14">*</modifier></type><name pos:start="221:15" pos:end="221:24">smb_export</name> <init pos:start="221:26" pos:end="221:31">= <expr pos:start="221:28" pos:end="221:31"><name pos:start="221:28" pos:end="221:31">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="223:9" pos:end="223:29"><decl pos:start="223:9" pos:end="223:28"><type pos:start="223:9" pos:end="223:14"><name pos:start="223:9" pos:end="223:12">char</name> <modifier pos:start="223:14" pos:end="223:14">*</modifier></type><name pos:start="223:15" pos:end="223:21">vsmbsrv</name> <init pos:start="223:23" pos:end="223:28">= <expr pos:start="223:25" pos:end="223:28"><name pos:start="223:25" pos:end="223:28">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="225:9" pos:end="225:22"><decl pos:start="225:9" pos:end="225:21"><type pos:start="225:9" pos:end="225:20"><specifier pos:start="225:9" pos:end="225:13">const</specifier> <name pos:start="225:15" pos:end="225:18">char</name> <modifier pos:start="225:20" pos:end="225:20">*</modifier></type><name pos:start="225:21" pos:end="225:21">q</name></decl>;</decl_stmt>



        <if_stmt pos:start="229:9" pos:end="237:9"><if pos:start="229:9" pos:end="237:9">if <condition pos:start="229:12" pos:end="229:64">(<expr pos:start="229:13" pos:end="229:63"><call pos:start="229:13" pos:end="229:59"><name pos:start="229:13" pos:end="229:24">check_params</name><argument_list pos:start="229:25" pos:end="229:59">(<argument pos:start="229:26" pos:end="229:28"><expr pos:start="229:26" pos:end="229:28"><name pos:start="229:26" pos:end="229:28">buf</name></expr></argument>, <argument pos:start="229:31" pos:end="229:41"><expr pos:start="229:31" pos:end="229:41"><sizeof pos:start="229:31" pos:end="229:41">sizeof<argument_list pos:start="229:37" pos:end="229:41">(<argument pos:start="229:38" pos:end="229:40"><expr pos:start="229:38" pos:end="229:40"><name pos:start="229:38" pos:end="229:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="229:44" pos:end="229:55"><expr pos:start="229:44" pos:end="229:55"><name pos:start="229:44" pos:end="229:55">slirp_params</name></expr></argument>, <argument pos:start="229:58" pos:end="229:58"><expr pos:start="229:58" pos:end="229:58"><name pos:start="229:58" pos:end="229:58">p</name></expr></argument>)</argument_list></call> <operator pos:start="229:61" pos:end="229:61">&lt;</operator> <literal type="number" pos:start="229:63" pos:end="229:63">0</literal></expr>)</condition> <block pos:start="229:66" pos:end="237:9">{<block_content pos:start="231:13" pos:end="235:21">

            <expr_stmt pos:start="231:13" pos:end="231:74"><expr pos:start="231:13" pos:end="231:73"><call pos:start="231:13" pos:end="231:73"><name pos:start="231:13" pos:end="231:24">config_error</name><argument_list pos:start="231:25" pos:end="231:73">(<argument pos:start="231:26" pos:end="231:28"><expr pos:start="231:26" pos:end="231:28"><name pos:start="231:26" pos:end="231:28">mon</name></expr></argument>, <argument pos:start="231:31" pos:end="231:64"><expr pos:start="231:31" pos:end="231:64"><literal type="string" pos:start="231:31" pos:end="231:64">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="231:67" pos:end="231:69"><expr pos:start="231:67" pos:end="231:69"><name pos:start="231:67" pos:end="231:69">buf</name></expr></argument>, <argument pos:start="231:72" pos:end="231:72"><expr pos:start="231:72" pos:end="231:72"><name pos:start="231:72" pos:end="231:72">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:21"><expr pos:start="233:13" pos:end="233:20"><name pos:start="233:13" pos:end="233:15">ret</name> <operator pos:start="233:17" pos:end="233:17">=</operator> <operator pos:start="233:19" pos:end="233:19">-</operator><literal type="number" pos:start="233:20" pos:end="233:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="235:13" pos:end="235:21">goto <name pos:start="235:18" pos:end="235:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="239:9" pos:end="251:9"><if pos:start="239:9" pos:end="251:9">if <condition pos:start="239:12" pos:end="239:55">(<expr pos:start="239:13" pos:end="239:54"><call pos:start="239:13" pos:end="239:54"><name pos:start="239:13" pos:end="239:27">get_param_value</name><argument_list pos:start="239:28" pos:end="239:54">(<argument pos:start="239:29" pos:end="239:31"><expr pos:start="239:29" pos:end="239:31"><name pos:start="239:29" pos:end="239:31">buf</name></expr></argument>, <argument pos:start="239:34" pos:end="239:44"><expr pos:start="239:34" pos:end="239:44"><sizeof pos:start="239:34" pos:end="239:44">sizeof<argument_list pos:start="239:40" pos:end="239:44">(<argument pos:start="239:41" pos:end="239:43"><expr pos:start="239:41" pos:end="239:43"><name pos:start="239:41" pos:end="239:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="239:47" pos:end="239:50"><expr pos:start="239:47" pos:end="239:50"><literal type="string" pos:start="239:47" pos:end="239:50">"ip"</literal></expr></argument>, <argument pos:start="239:53" pos:end="239:53"><expr pos:start="239:53" pos:end="239:53"><name pos:start="239:53" pos:end="239:53">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="239:57" pos:end="251:9">{<block_content pos:start="241:13" pos:end="249:46">

            <decl_stmt pos:start="241:13" pos:end="241:62"><decl pos:start="241:13" pos:end="241:61"><type pos:start="241:13" pos:end="241:15"><name pos:start="241:13" pos:end="241:15">int</name></type> <name pos:start="241:17" pos:end="241:27">vnet_buflen</name> <init pos:start="241:29" pos:end="241:61">= <expr pos:start="241:31" pos:end="241:61"><call pos:start="241:31" pos:end="241:41"><name pos:start="241:31" pos:end="241:36">strlen</name><argument_list pos:start="241:37" pos:end="241:41">(<argument pos:start="241:38" pos:end="241:40"><expr pos:start="241:38" pos:end="241:40"><name pos:start="241:38" pos:end="241:40">buf</name></expr></argument>)</argument_list></call> <operator pos:start="241:43" pos:end="241:43">+</operator> <call pos:start="241:45" pos:end="241:57"><name pos:start="241:45" pos:end="241:50">strlen</name><argument_list pos:start="241:51" pos:end="241:57">(<argument pos:start="241:52" pos:end="241:56"><expr pos:start="241:52" pos:end="241:56"><literal type="string" pos:start="241:52" pos:end="241:56">"/24"</literal></expr></argument>)</argument_list></call> <operator pos:start="241:59" pos:end="241:59">+</operator> <literal type="number" pos:start="241:61" pos:end="241:61">1</literal></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="243:13" pos:end="243:42">/* emulate legacy parameter */</comment>

            <expr_stmt pos:start="245:13" pos:end="245:44"><expr pos:start="245:13" pos:end="245:43"><name pos:start="245:13" pos:end="245:16">vnet</name> <operator pos:start="245:18" pos:end="245:18">=</operator> <call pos:start="245:20" pos:end="245:43"><name pos:start="245:20" pos:end="245:30">qemu_malloc</name><argument_list pos:start="245:31" pos:end="245:43">(<argument pos:start="245:32" pos:end="245:42"><expr pos:start="245:32" pos:end="245:42"><name pos:start="245:32" pos:end="245:42">vnet_buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:44"><expr pos:start="247:13" pos:end="247:43"><call pos:start="247:13" pos:end="247:43"><name pos:start="247:13" pos:end="247:19">pstrcpy</name><argument_list pos:start="247:20" pos:end="247:43">(<argument pos:start="247:21" pos:end="247:24"><expr pos:start="247:21" pos:end="247:24"><name pos:start="247:21" pos:end="247:24">vnet</name></expr></argument>, <argument pos:start="247:27" pos:end="247:37"><expr pos:start="247:27" pos:end="247:37"><name pos:start="247:27" pos:end="247:37">vnet_buflen</name></expr></argument>, <argument pos:start="247:40" pos:end="247:42"><expr pos:start="247:40" pos:end="247:42"><name pos:start="247:40" pos:end="247:42">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:46"><expr pos:start="249:13" pos:end="249:45"><call pos:start="249:13" pos:end="249:45"><name pos:start="249:13" pos:end="249:19">pstrcat</name><argument_list pos:start="249:20" pos:end="249:45">(<argument pos:start="249:21" pos:end="249:24"><expr pos:start="249:21" pos:end="249:24"><name pos:start="249:21" pos:end="249:24">vnet</name></expr></argument>, <argument pos:start="249:27" pos:end="249:37"><expr pos:start="249:27" pos:end="249:37"><name pos:start="249:27" pos:end="249:37">vnet_buflen</name></expr></argument>, <argument pos:start="249:40" pos:end="249:44"><expr pos:start="249:40" pos:end="249:44"><literal type="string" pos:start="249:40" pos:end="249:44">"/24"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="253:9" pos:end="257:9"><if pos:start="253:9" pos:end="257:9">if <condition pos:start="253:12" pos:end="253:56">(<expr pos:start="253:13" pos:end="253:55"><call pos:start="253:13" pos:end="253:55"><name pos:start="253:13" pos:end="253:27">get_param_value</name><argument_list pos:start="253:28" pos:end="253:55">(<argument pos:start="253:29" pos:end="253:31"><expr pos:start="253:29" pos:end="253:31"><name pos:start="253:29" pos:end="253:31">buf</name></expr></argument>, <argument pos:start="253:34" pos:end="253:44"><expr pos:start="253:34" pos:end="253:44"><sizeof pos:start="253:34" pos:end="253:44">sizeof<argument_list pos:start="253:40" pos:end="253:44">(<argument pos:start="253:41" pos:end="253:43"><expr pos:start="253:41" pos:end="253:43"><name pos:start="253:41" pos:end="253:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="253:47" pos:end="253:51"><expr pos:start="253:47" pos:end="253:51"><literal type="string" pos:start="253:47" pos:end="253:51">"net"</literal></expr></argument>, <argument pos:start="253:54" pos:end="253:54"><expr pos:start="253:54" pos:end="253:54"><name pos:start="253:54" pos:end="253:54">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="253:58" pos:end="257:9">{<block_content pos:start="255:13" pos:end="255:36">

            <expr_stmt pos:start="255:13" pos:end="255:36"><expr pos:start="255:13" pos:end="255:35"><name pos:start="255:13" pos:end="255:16">vnet</name> <operator pos:start="255:18" pos:end="255:18">=</operator> <call pos:start="255:20" pos:end="255:35"><name pos:start="255:20" pos:end="255:30">qemu_strdup</name><argument_list pos:start="255:31" pos:end="255:35">(<argument pos:start="255:32" pos:end="255:34"><expr pos:start="255:32" pos:end="255:34"><name pos:start="255:32" pos:end="255:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="259:9" pos:end="263:9"><if pos:start="259:9" pos:end="263:9">if <condition pos:start="259:12" pos:end="259:57">(<expr pos:start="259:13" pos:end="259:56"><call pos:start="259:13" pos:end="259:56"><name pos:start="259:13" pos:end="259:27">get_param_value</name><argument_list pos:start="259:28" pos:end="259:56">(<argument pos:start="259:29" pos:end="259:31"><expr pos:start="259:29" pos:end="259:31"><name pos:start="259:29" pos:end="259:31">buf</name></expr></argument>, <argument pos:start="259:34" pos:end="259:44"><expr pos:start="259:34" pos:end="259:44"><sizeof pos:start="259:34" pos:end="259:44">sizeof<argument_list pos:start="259:40" pos:end="259:44">(<argument pos:start="259:41" pos:end="259:43"><expr pos:start="259:41" pos:end="259:43"><name pos:start="259:41" pos:end="259:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="259:47" pos:end="259:52"><expr pos:start="259:47" pos:end="259:52"><literal type="string" pos:start="259:47" pos:end="259:52">"host"</literal></expr></argument>, <argument pos:start="259:55" pos:end="259:55"><expr pos:start="259:55" pos:end="259:55"><name pos:start="259:55" pos:end="259:55">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="259:59" pos:end="263:9">{<block_content pos:start="261:13" pos:end="261:37">

            <expr_stmt pos:start="261:13" pos:end="261:37"><expr pos:start="261:13" pos:end="261:36"><name pos:start="261:13" pos:end="261:17">vhost</name> <operator pos:start="261:19" pos:end="261:19">=</operator> <call pos:start="261:21" pos:end="261:36"><name pos:start="261:21" pos:end="261:31">qemu_strdup</name><argument_list pos:start="261:32" pos:end="261:36">(<argument pos:start="261:33" pos:end="261:35"><expr pos:start="261:33" pos:end="261:35"><name pos:start="261:33" pos:end="261:35">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="265:9" pos:end="269:9"><if pos:start="265:9" pos:end="269:9">if <condition pos:start="265:12" pos:end="265:61">(<expr pos:start="265:13" pos:end="265:60"><call pos:start="265:13" pos:end="265:60"><name pos:start="265:13" pos:end="265:27">get_param_value</name><argument_list pos:start="265:28" pos:end="265:60">(<argument pos:start="265:29" pos:end="265:31"><expr pos:start="265:29" pos:end="265:31"><name pos:start="265:29" pos:end="265:31">buf</name></expr></argument>, <argument pos:start="265:34" pos:end="265:44"><expr pos:start="265:34" pos:end="265:44"><sizeof pos:start="265:34" pos:end="265:44">sizeof<argument_list pos:start="265:40" pos:end="265:44">(<argument pos:start="265:41" pos:end="265:43"><expr pos:start="265:41" pos:end="265:43"><name pos:start="265:41" pos:end="265:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="265:47" pos:end="265:56"><expr pos:start="265:47" pos:end="265:56"><literal type="string" pos:start="265:47" pos:end="265:56">"hostname"</literal></expr></argument>, <argument pos:start="265:59" pos:end="265:59"><expr pos:start="265:59" pos:end="265:59"><name pos:start="265:59" pos:end="265:59">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="265:63" pos:end="269:9">{<block_content pos:start="267:13" pos:end="267:41">

            <expr_stmt pos:start="267:13" pos:end="267:41"><expr pos:start="267:13" pos:end="267:40"><name pos:start="267:13" pos:end="267:21">vhostname</name> <operator pos:start="267:23" pos:end="267:23">=</operator> <call pos:start="267:25" pos:end="267:40"><name pos:start="267:25" pos:end="267:35">qemu_strdup</name><argument_list pos:start="267:36" pos:end="267:40">(<argument pos:start="267:37" pos:end="267:39"><expr pos:start="267:37" pos:end="267:39"><name pos:start="267:37" pos:end="267:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="271:9" pos:end="275:9"><if pos:start="271:9" pos:end="275:9">if <condition pos:start="271:12" pos:end="271:61">(<expr pos:start="271:13" pos:end="271:60"><call pos:start="271:13" pos:end="271:60"><name pos:start="271:13" pos:end="271:27">get_param_value</name><argument_list pos:start="271:28" pos:end="271:60">(<argument pos:start="271:29" pos:end="271:31"><expr pos:start="271:29" pos:end="271:31"><name pos:start="271:29" pos:end="271:31">buf</name></expr></argument>, <argument pos:start="271:34" pos:end="271:44"><expr pos:start="271:34" pos:end="271:44"><sizeof pos:start="271:34" pos:end="271:44">sizeof<argument_list pos:start="271:40" pos:end="271:44">(<argument pos:start="271:41" pos:end="271:43"><expr pos:start="271:41" pos:end="271:43"><name pos:start="271:41" pos:end="271:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="271:47" pos:end="271:56"><expr pos:start="271:47" pos:end="271:56"><literal type="string" pos:start="271:47" pos:end="271:56">"restrict"</literal></expr></argument>, <argument pos:start="271:59" pos:end="271:59"><expr pos:start="271:59" pos:end="271:59"><name pos:start="271:59" pos:end="271:59">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="271:63" pos:end="275:9">{<block_content pos:start="273:13" pos:end="273:49">

            <expr_stmt pos:start="273:13" pos:end="273:49"><expr pos:start="273:13" pos:end="273:48"><name pos:start="273:13" pos:end="273:22">restricted</name> <operator pos:start="273:24" pos:end="273:24">=</operator> <ternary pos:start="273:26" pos:end="273:48"><condition pos:start="273:26" pos:end="273:42"><expr pos:start="273:26" pos:end="273:40"><operator pos:start="273:26" pos:end="273:26">(</operator><name pos:start="273:27" pos:end="273:32"><name pos:start="273:27" pos:end="273:29">buf</name><index pos:start="273:30" pos:end="273:32">[<expr pos:start="273:31" pos:end="273:31"><literal type="number" pos:start="273:31" pos:end="273:31">0</literal></expr>]</index></name> <operator pos:start="273:34" pos:end="273:35">==</operator> <literal type="char" pos:start="273:37" pos:end="273:39">'y'</literal><operator pos:start="273:40" pos:end="273:40">)</operator></expr> ?</condition><then pos:start="273:44" pos:end="273:44"> <expr pos:start="273:44" pos:end="273:44"><literal type="number" pos:start="273:44" pos:end="273:44">1</literal></expr> </then><else pos:start="273:46" pos:end="273:48">: <expr pos:start="273:48" pos:end="273:48"><literal type="number" pos:start="273:48" pos:end="273:48">0</literal></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="277:9" pos:end="281:9"><if pos:start="277:9" pos:end="281:9">if <condition pos:start="277:12" pos:end="277:62">(<expr pos:start="277:13" pos:end="277:61"><call pos:start="277:13" pos:end="277:61"><name pos:start="277:13" pos:end="277:27">get_param_value</name><argument_list pos:start="277:28" pos:end="277:61">(<argument pos:start="277:29" pos:end="277:31"><expr pos:start="277:29" pos:end="277:31"><name pos:start="277:29" pos:end="277:31">buf</name></expr></argument>, <argument pos:start="277:34" pos:end="277:44"><expr pos:start="277:34" pos:end="277:44"><sizeof pos:start="277:34" pos:end="277:44">sizeof<argument_list pos:start="277:40" pos:end="277:44">(<argument pos:start="277:41" pos:end="277:43"><expr pos:start="277:41" pos:end="277:43"><name pos:start="277:41" pos:end="277:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="277:47" pos:end="277:57"><expr pos:start="277:47" pos:end="277:57"><literal type="string" pos:start="277:47" pos:end="277:57">"dhcpstart"</literal></expr></argument>, <argument pos:start="277:60" pos:end="277:60"><expr pos:start="277:60" pos:end="277:60"><name pos:start="277:60" pos:end="277:60">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="277:64" pos:end="281:9">{<block_content pos:start="279:13" pos:end="279:43">

            <expr_stmt pos:start="279:13" pos:end="279:43"><expr pos:start="279:13" pos:end="279:42"><name pos:start="279:13" pos:end="279:23">vdhcp_start</name> <operator pos:start="279:25" pos:end="279:25">=</operator> <call pos:start="279:27" pos:end="279:42"><name pos:start="279:27" pos:end="279:37">qemu_strdup</name><argument_list pos:start="279:38" pos:end="279:42">(<argument pos:start="279:39" pos:end="279:41"><expr pos:start="279:39" pos:end="279:41"><name pos:start="279:39" pos:end="279:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="283:9" pos:end="287:9"><if pos:start="283:9" pos:end="287:9">if <condition pos:start="283:12" pos:end="283:56">(<expr pos:start="283:13" pos:end="283:55"><call pos:start="283:13" pos:end="283:55"><name pos:start="283:13" pos:end="283:27">get_param_value</name><argument_list pos:start="283:28" pos:end="283:55">(<argument pos:start="283:29" pos:end="283:31"><expr pos:start="283:29" pos:end="283:31"><name pos:start="283:29" pos:end="283:31">buf</name></expr></argument>, <argument pos:start="283:34" pos:end="283:44"><expr pos:start="283:34" pos:end="283:44"><sizeof pos:start="283:34" pos:end="283:44">sizeof<argument_list pos:start="283:40" pos:end="283:44">(<argument pos:start="283:41" pos:end="283:43"><expr pos:start="283:41" pos:end="283:43"><name pos:start="283:41" pos:end="283:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="283:47" pos:end="283:51"><expr pos:start="283:47" pos:end="283:51"><literal type="string" pos:start="283:47" pos:end="283:51">"dns"</literal></expr></argument>, <argument pos:start="283:54" pos:end="283:54"><expr pos:start="283:54" pos:end="283:54"><name pos:start="283:54" pos:end="283:54">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="283:58" pos:end="287:9">{<block_content pos:start="285:13" pos:end="285:40">

            <expr_stmt pos:start="285:13" pos:end="285:40"><expr pos:start="285:13" pos:end="285:39"><name pos:start="285:13" pos:end="285:20">vnamesrv</name> <operator pos:start="285:22" pos:end="285:22">=</operator> <call pos:start="285:24" pos:end="285:39"><name pos:start="285:24" pos:end="285:34">qemu_strdup</name><argument_list pos:start="285:35" pos:end="285:39">(<argument pos:start="285:36" pos:end="285:38"><expr pos:start="285:36" pos:end="285:38"><name pos:start="285:36" pos:end="285:38">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="289:9" pos:end="293:9"><if pos:start="289:9" pos:end="293:9">if <condition pos:start="289:12" pos:end="289:57">(<expr pos:start="289:13" pos:end="289:56"><call pos:start="289:13" pos:end="289:56"><name pos:start="289:13" pos:end="289:27">get_param_value</name><argument_list pos:start="289:28" pos:end="289:56">(<argument pos:start="289:29" pos:end="289:31"><expr pos:start="289:29" pos:end="289:31"><name pos:start="289:29" pos:end="289:31">buf</name></expr></argument>, <argument pos:start="289:34" pos:end="289:44"><expr pos:start="289:34" pos:end="289:44"><sizeof pos:start="289:34" pos:end="289:44">sizeof<argument_list pos:start="289:40" pos:end="289:44">(<argument pos:start="289:41" pos:end="289:43"><expr pos:start="289:41" pos:end="289:43"><name pos:start="289:41" pos:end="289:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="289:47" pos:end="289:52"><expr pos:start="289:47" pos:end="289:52"><literal type="string" pos:start="289:47" pos:end="289:52">"tftp"</literal></expr></argument>, <argument pos:start="289:55" pos:end="289:55"><expr pos:start="289:55" pos:end="289:55"><name pos:start="289:55" pos:end="289:55">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="289:59" pos:end="293:9">{<block_content pos:start="291:13" pos:end="291:43">

            <expr_stmt pos:start="291:13" pos:end="291:43"><expr pos:start="291:13" pos:end="291:42"><name pos:start="291:13" pos:end="291:23">tftp_export</name> <operator pos:start="291:25" pos:end="291:25">=</operator> <call pos:start="291:27" pos:end="291:42"><name pos:start="291:27" pos:end="291:37">qemu_strdup</name><argument_list pos:start="291:38" pos:end="291:42">(<argument pos:start="291:39" pos:end="291:41"><expr pos:start="291:39" pos:end="291:41"><name pos:start="291:39" pos:end="291:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="295:9" pos:end="299:9"><if pos:start="295:9" pos:end="299:9">if <condition pos:start="295:12" pos:end="295:61">(<expr pos:start="295:13" pos:end="295:60"><call pos:start="295:13" pos:end="295:60"><name pos:start="295:13" pos:end="295:27">get_param_value</name><argument_list pos:start="295:28" pos:end="295:60">(<argument pos:start="295:29" pos:end="295:31"><expr pos:start="295:29" pos:end="295:31"><name pos:start="295:29" pos:end="295:31">buf</name></expr></argument>, <argument pos:start="295:34" pos:end="295:44"><expr pos:start="295:34" pos:end="295:44"><sizeof pos:start="295:34" pos:end="295:44">sizeof<argument_list pos:start="295:40" pos:end="295:44">(<argument pos:start="295:41" pos:end="295:43"><expr pos:start="295:41" pos:end="295:43"><name pos:start="295:41" pos:end="295:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="295:47" pos:end="295:56"><expr pos:start="295:47" pos:end="295:56"><literal type="string" pos:start="295:47" pos:end="295:56">"bootfile"</literal></expr></argument>, <argument pos:start="295:59" pos:end="295:59"><expr pos:start="295:59" pos:end="295:59"><name pos:start="295:59" pos:end="295:59">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="295:63" pos:end="299:9">{<block_content pos:start="297:13" pos:end="297:40">

            <expr_stmt pos:start="297:13" pos:end="297:40"><expr pos:start="297:13" pos:end="297:39"><name pos:start="297:13" pos:end="297:20">bootfile</name> <operator pos:start="297:22" pos:end="297:22">=</operator> <call pos:start="297:24" pos:end="297:39"><name pos:start="297:24" pos:end="297:34">qemu_strdup</name><argument_list pos:start="297:35" pos:end="297:39">(<argument pos:start="297:36" pos:end="297:38"><expr pos:start="297:36" pos:end="297:38"><name pos:start="297:36" pos:end="297:38">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="301:9" pos:end="311:9"><if pos:start="301:9" pos:end="311:9">if <condition pos:start="301:12" pos:end="301:56">(<expr pos:start="301:13" pos:end="301:55"><call pos:start="301:13" pos:end="301:55"><name pos:start="301:13" pos:end="301:27">get_param_value</name><argument_list pos:start="301:28" pos:end="301:55">(<argument pos:start="301:29" pos:end="301:31"><expr pos:start="301:29" pos:end="301:31"><name pos:start="301:29" pos:end="301:31">buf</name></expr></argument>, <argument pos:start="301:34" pos:end="301:44"><expr pos:start="301:34" pos:end="301:44"><sizeof pos:start="301:34" pos:end="301:44">sizeof<argument_list pos:start="301:40" pos:end="301:44">(<argument pos:start="301:41" pos:end="301:43"><expr pos:start="301:41" pos:end="301:43"><name pos:start="301:41" pos:end="301:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="301:47" pos:end="301:51"><expr pos:start="301:47" pos:end="301:51"><literal type="string" pos:start="301:47" pos:end="301:51">"smb"</literal></expr></argument>, <argument pos:start="301:54" pos:end="301:54"><expr pos:start="301:54" pos:end="301:54"><name pos:start="301:54" pos:end="301:54">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="301:58" pos:end="311:9">{<block_content pos:start="303:13" pos:end="309:13">

            <expr_stmt pos:start="303:13" pos:end="303:42"><expr pos:start="303:13" pos:end="303:41"><name pos:start="303:13" pos:end="303:22">smb_export</name> <operator pos:start="303:24" pos:end="303:24">=</operator> <call pos:start="303:26" pos:end="303:41"><name pos:start="303:26" pos:end="303:36">qemu_strdup</name><argument_list pos:start="303:37" pos:end="303:41">(<argument pos:start="303:38" pos:end="303:40"><expr pos:start="303:38" pos:end="303:40"><name pos:start="303:38" pos:end="303:40">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="305:13" pos:end="309:13"><if pos:start="305:13" pos:end="309:13">if <condition pos:start="305:16" pos:end="305:66">(<expr pos:start="305:17" pos:end="305:65"><call pos:start="305:17" pos:end="305:65"><name pos:start="305:17" pos:end="305:31">get_param_value</name><argument_list pos:start="305:32" pos:end="305:65">(<argument pos:start="305:33" pos:end="305:35"><expr pos:start="305:33" pos:end="305:35"><name pos:start="305:33" pos:end="305:35">buf</name></expr></argument>, <argument pos:start="305:38" pos:end="305:48"><expr pos:start="305:38" pos:end="305:48"><sizeof pos:start="305:38" pos:end="305:48">sizeof<argument_list pos:start="305:44" pos:end="305:48">(<argument pos:start="305:45" pos:end="305:47"><expr pos:start="305:45" pos:end="305:47"><name pos:start="305:45" pos:end="305:47">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="305:51" pos:end="305:61"><expr pos:start="305:51" pos:end="305:61"><literal type="string" pos:start="305:51" pos:end="305:61">"smbserver"</literal></expr></argument>, <argument pos:start="305:64" pos:end="305:64"><expr pos:start="305:64" pos:end="305:64"><name pos:start="305:64" pos:end="305:64">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="305:68" pos:end="309:13">{<block_content pos:start="307:17" pos:end="307:43">

                <expr_stmt pos:start="307:17" pos:end="307:43"><expr pos:start="307:17" pos:end="307:42"><name pos:start="307:17" pos:end="307:23">vsmbsrv</name> <operator pos:start="307:25" pos:end="307:25">=</operator> <call pos:start="307:27" pos:end="307:42"><name pos:start="307:27" pos:end="307:37">qemu_strdup</name><argument_list pos:start="307:38" pos:end="307:42">(<argument pos:start="307:39" pos:end="307:41"><expr pos:start="307:39" pos:end="307:41"><name pos:start="307:39" pos:end="307:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="313:9" pos:end="313:14"><expr pos:start="313:9" pos:end="313:13"><name pos:start="313:9" pos:end="313:9">q</name> <operator pos:start="313:11" pos:end="313:11">=</operator> <name pos:start="313:13" pos:end="313:13">p</name></expr>;</expr_stmt>

        <while pos:start="315:9" pos:end="335:9">while <condition pos:start="315:15" pos:end="315:17">(<expr pos:start="315:16" pos:end="315:16"><literal type="number" pos:start="315:16" pos:end="315:16">1</literal></expr>)</condition> <block pos:start="315:19" pos:end="335:9">{<block_content pos:start="317:13" pos:end="333:26">

            <expr_stmt pos:start="317:13" pos:end="317:50"><expr pos:start="317:13" pos:end="317:49"><name pos:start="317:13" pos:end="317:18">config</name> <operator pos:start="317:20" pos:end="317:20">=</operator> <call pos:start="317:22" pos:end="317:49"><name pos:start="317:22" pos:end="317:32">qemu_malloc</name><argument_list pos:start="317:33" pos:end="317:49">(<argument pos:start="317:34" pos:end="317:48"><expr pos:start="317:34" pos:end="317:48"><sizeof pos:start="317:34" pos:end="317:48">sizeof<argument_list pos:start="317:40" pos:end="317:48">(<argument pos:start="317:41" pos:end="317:47"><expr pos:start="317:41" pos:end="317:47"><operator pos:start="317:41" pos:end="317:41">*</operator><name pos:start="317:42" pos:end="317:47">config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="319:13" pos:end="325:13"><if pos:start="319:13" pos:end="325:13">if <condition pos:start="319:16" pos:end="321:53">(<expr pos:start="319:17" pos:end="321:52"><operator pos:start="319:17" pos:end="319:17">!</operator><call pos:start="319:18" pos:end="321:52"><name pos:start="319:18" pos:end="319:37">get_next_param_value</name><argument_list pos:start="319:38" pos:end="321:52">(<argument pos:start="319:39" pos:end="319:49"><expr pos:start="319:39" pos:end="319:49"><name pos:start="319:39" pos:end="319:49"><name pos:start="319:39" pos:end="319:44">config</name><operator pos:start="319:45" pos:end="319:46">-&gt;</operator><name pos:start="319:47" pos:end="319:49">str</name></name></expr></argument>, <argument pos:start="319:52" pos:end="319:70"><expr pos:start="319:52" pos:end="319:70"><sizeof pos:start="319:52" pos:end="319:70">sizeof<argument_list pos:start="319:58" pos:end="319:70">(<argument pos:start="319:59" pos:end="319:69"><expr pos:start="319:59" pos:end="319:69"><name pos:start="319:59" pos:end="319:69"><name pos:start="319:59" pos:end="319:64">config</name><operator pos:start="319:65" pos:end="319:66">-&gt;</operator><name pos:start="319:67" pos:end="319:69">str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                      <argument pos:start="321:39" pos:end="321:47"><expr pos:start="321:39" pos:end="321:47"><literal type="string" pos:start="321:39" pos:end="321:47">"hostfwd"</literal></expr></argument>, <argument pos:start="321:50" pos:end="321:51"><expr pos:start="321:50" pos:end="321:51"><operator pos:start="321:50" pos:end="321:50">&amp;</operator><name pos:start="321:51" pos:end="321:51">q</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="321:55" pos:end="325:13">{<block_content pos:start="323:17" pos:end="323:22">

                <break pos:start="323:17" pos:end="323:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:46"><expr pos:start="327:13" pos:end="327:45"><name pos:start="327:13" pos:end="327:25"><name pos:start="327:13" pos:end="327:18">config</name><operator pos:start="327:19" pos:end="327:20">-&gt;</operator><name pos:start="327:21" pos:end="327:25">flags</name></name> <operator pos:start="327:27" pos:end="327:27">=</operator> <name pos:start="327:29" pos:end="327:45">SLIRP_CFG_HOSTFWD</name></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:41"><expr pos:start="329:13" pos:end="329:40"><name pos:start="329:13" pos:end="329:24"><name pos:start="329:13" pos:end="329:18">config</name><operator pos:start="329:19" pos:end="329:20">-&gt;</operator><name pos:start="329:21" pos:end="329:24">next</name></name> <operator pos:start="329:26" pos:end="329:26">=</operator> <name pos:start="329:28" pos:end="329:40">slirp_configs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:35"><expr pos:start="331:13" pos:end="331:34"><name pos:start="331:13" pos:end="331:25">slirp_configs</name> <operator pos:start="331:27" pos:end="331:27">=</operator> <name pos:start="331:29" pos:end="331:34">config</name></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:26"><expr pos:start="333:13" pos:end="333:25"><name pos:start="333:13" pos:end="333:18">config</name> <operator pos:start="333:20" pos:end="333:20">=</operator> <name pos:start="333:22" pos:end="333:25">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="337:9" pos:end="337:14"><expr pos:start="337:9" pos:end="337:13"><name pos:start="337:9" pos:end="337:9">q</name> <operator pos:start="337:11" pos:end="337:11">=</operator> <name pos:start="337:13" pos:end="337:13">p</name></expr>;</expr_stmt>

        <while pos:start="339:9" pos:end="359:9">while <condition pos:start="339:15" pos:end="339:17">(<expr pos:start="339:16" pos:end="339:16"><literal type="number" pos:start="339:16" pos:end="339:16">1</literal></expr>)</condition> <block pos:start="339:19" pos:end="359:9">{<block_content pos:start="341:13" pos:end="357:26">

            <expr_stmt pos:start="341:13" pos:end="341:50"><expr pos:start="341:13" pos:end="341:49"><name pos:start="341:13" pos:end="341:18">config</name> <operator pos:start="341:20" pos:end="341:20">=</operator> <call pos:start="341:22" pos:end="341:49"><name pos:start="341:22" pos:end="341:32">qemu_malloc</name><argument_list pos:start="341:33" pos:end="341:49">(<argument pos:start="341:34" pos:end="341:48"><expr pos:start="341:34" pos:end="341:48"><sizeof pos:start="341:34" pos:end="341:48">sizeof<argument_list pos:start="341:40" pos:end="341:48">(<argument pos:start="341:41" pos:end="341:47"><expr pos:start="341:41" pos:end="341:47"><operator pos:start="341:41" pos:end="341:41">*</operator><name pos:start="341:42" pos:end="341:47">config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="343:13" pos:end="349:13"><if pos:start="343:13" pos:end="349:13">if <condition pos:start="343:16" pos:end="345:54">(<expr pos:start="343:17" pos:end="345:53"><operator pos:start="343:17" pos:end="343:17">!</operator><call pos:start="343:18" pos:end="345:53"><name pos:start="343:18" pos:end="343:37">get_next_param_value</name><argument_list pos:start="343:38" pos:end="345:53">(<argument pos:start="343:39" pos:end="343:49"><expr pos:start="343:39" pos:end="343:49"><name pos:start="343:39" pos:end="343:49"><name pos:start="343:39" pos:end="343:44">config</name><operator pos:start="343:45" pos:end="343:46">-&gt;</operator><name pos:start="343:47" pos:end="343:49">str</name></name></expr></argument>, <argument pos:start="343:52" pos:end="343:70"><expr pos:start="343:52" pos:end="343:70"><sizeof pos:start="343:52" pos:end="343:70">sizeof<argument_list pos:start="343:58" pos:end="343:70">(<argument pos:start="343:59" pos:end="343:69"><expr pos:start="343:59" pos:end="343:69"><name pos:start="343:59" pos:end="343:69"><name pos:start="343:59" pos:end="343:64">config</name><operator pos:start="343:65" pos:end="343:66">-&gt;</operator><name pos:start="343:67" pos:end="343:69">str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                                      <argument pos:start="345:39" pos:end="345:48"><expr pos:start="345:39" pos:end="345:48"><literal type="string" pos:start="345:39" pos:end="345:48">"guestfwd"</literal></expr></argument>, <argument pos:start="345:51" pos:end="345:52"><expr pos:start="345:51" pos:end="345:52"><operator pos:start="345:51" pos:end="345:51">&amp;</operator><name pos:start="345:52" pos:end="345:52">q</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="345:56" pos:end="349:13">{<block_content pos:start="347:17" pos:end="347:22">

                <break pos:start="347:17" pos:end="347:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="351:13" pos:end="351:30"><expr pos:start="351:13" pos:end="351:29"><name pos:start="351:13" pos:end="351:25"><name pos:start="351:13" pos:end="351:18">config</name><operator pos:start="351:19" pos:end="351:20">-&gt;</operator><name pos:start="351:21" pos:end="351:25">flags</name></name> <operator pos:start="351:27" pos:end="351:27">=</operator> <literal type="number" pos:start="351:29" pos:end="351:29">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:41"><expr pos:start="353:13" pos:end="353:40"><name pos:start="353:13" pos:end="353:24"><name pos:start="353:13" pos:end="353:18">config</name><operator pos:start="353:19" pos:end="353:20">-&gt;</operator><name pos:start="353:21" pos:end="353:24">next</name></name> <operator pos:start="353:26" pos:end="353:26">=</operator> <name pos:start="353:28" pos:end="353:40">slirp_configs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:35"><expr pos:start="355:13" pos:end="355:34"><name pos:start="355:13" pos:end="355:25">slirp_configs</name> <operator pos:start="355:27" pos:end="355:27">=</operator> <name pos:start="355:29" pos:end="355:34">config</name></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="357:26"><expr pos:start="357:13" pos:end="357:25"><name pos:start="357:13" pos:end="357:18">config</name> <operator pos:start="357:20" pos:end="357:20">=</operator> <name pos:start="357:22" pos:end="357:25">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="361:9" pos:end="361:26"><expr pos:start="361:9" pos:end="361:25"><call pos:start="361:9" pos:end="361:25"><name pos:start="361:9" pos:end="361:17">qemu_free</name><argument_list pos:start="361:18" pos:end="361:25">(<argument pos:start="361:19" pos:end="361:24"><expr pos:start="361:19" pos:end="361:24"><name pos:start="361:19" pos:end="361:24">config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="363:9" pos:end="363:29"><expr pos:start="363:9" pos:end="363:28"><name pos:start="363:9" pos:end="363:26"><name pos:start="363:9" pos:end="363:12">vlan</name><operator pos:start="363:13" pos:end="363:14">-&gt;</operator><name pos:start="363:15" pos:end="363:26">nb_host_devs</name></name><operator pos:start="363:27" pos:end="363:28">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="365:9" pos:end="369:60"><expr pos:start="365:9" pos:end="369:59"><name pos:start="365:9" pos:end="365:11">ret</name> <operator pos:start="365:13" pos:end="365:13">=</operator> <call pos:start="365:15" pos:end="369:59"><name pos:start="365:15" pos:end="365:28">net_slirp_init</name><argument_list pos:start="365:29" pos:end="369:59">(<argument pos:start="365:30" pos:end="365:32"><expr pos:start="365:30" pos:end="365:32"><name pos:start="365:30" pos:end="365:32">mon</name></expr></argument>, <argument pos:start="365:35" pos:end="365:38"><expr pos:start="365:35" pos:end="365:38"><name pos:start="365:35" pos:end="365:38">vlan</name></expr></argument>, <argument pos:start="365:41" pos:end="365:46"><expr pos:start="365:41" pos:end="365:46"><name pos:start="365:41" pos:end="365:46">device</name></expr></argument>, <argument pos:start="365:49" pos:end="365:52"><expr pos:start="365:49" pos:end="365:52"><name pos:start="365:49" pos:end="365:52">name</name></expr></argument>, <argument pos:start="365:55" pos:end="365:64"><expr pos:start="365:55" pos:end="365:64"><name pos:start="365:55" pos:end="365:64">restricted</name></expr></argument>, <argument pos:start="365:67" pos:end="365:70"><expr pos:start="365:67" pos:end="365:70"><name pos:start="365:67" pos:end="365:70">vnet</name></expr></argument>, <argument pos:start="365:73" pos:end="365:77"><expr pos:start="365:73" pos:end="365:77"><name pos:start="365:73" pos:end="365:77">vhost</name></expr></argument>,

                             <argument pos:start="367:30" pos:end="367:38"><expr pos:start="367:30" pos:end="367:38"><name pos:start="367:30" pos:end="367:38">vhostname</name></expr></argument>, <argument pos:start="367:41" pos:end="367:51"><expr pos:start="367:41" pos:end="367:51"><name pos:start="367:41" pos:end="367:51">tftp_export</name></expr></argument>, <argument pos:start="367:54" pos:end="367:61"><expr pos:start="367:54" pos:end="367:61"><name pos:start="367:54" pos:end="367:61">bootfile</name></expr></argument>, <argument pos:start="367:64" pos:end="367:74"><expr pos:start="367:64" pos:end="367:74"><name pos:start="367:64" pos:end="367:74">vdhcp_start</name></expr></argument>,

                             <argument pos:start="369:30" pos:end="369:37"><expr pos:start="369:30" pos:end="369:37"><name pos:start="369:30" pos:end="369:37">vnamesrv</name></expr></argument>, <argument pos:start="369:40" pos:end="369:49"><expr pos:start="369:40" pos:end="369:49"><name pos:start="369:40" pos:end="369:49">smb_export</name></expr></argument>, <argument pos:start="369:52" pos:end="369:58"><expr pos:start="369:52" pos:end="369:58"><name pos:start="369:52" pos:end="369:58">vsmbsrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="371:9" pos:end="379:9">while <condition pos:start="371:15" pos:end="371:29">(<expr pos:start="371:16" pos:end="371:28"><name pos:start="371:16" pos:end="371:28">slirp_configs</name></expr>)</condition> <block pos:start="371:31" pos:end="379:9">{<block_content pos:start="373:13" pos:end="377:30">

            <expr_stmt pos:start="373:13" pos:end="373:35"><expr pos:start="373:13" pos:end="373:34"><name pos:start="373:13" pos:end="373:18">config</name> <operator pos:start="373:20" pos:end="373:20">=</operator> <name pos:start="373:22" pos:end="373:34">slirp_configs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="375:13" pos:end="375:41"><expr pos:start="375:13" pos:end="375:40"><name pos:start="375:13" pos:end="375:25">slirp_configs</name> <operator pos:start="375:27" pos:end="375:27">=</operator> <name pos:start="375:29" pos:end="375:40"><name pos:start="375:29" pos:end="375:34">config</name><operator pos:start="375:35" pos:end="375:36">-&gt;</operator><name pos:start="375:37" pos:end="375:40">next</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="377:13" pos:end="377:30"><expr pos:start="377:13" pos:end="377:29"><call pos:start="377:13" pos:end="377:29"><name pos:start="377:13" pos:end="377:21">qemu_free</name><argument_list pos:start="377:22" pos:end="377:29">(<argument pos:start="377:23" pos:end="377:28"><expr pos:start="377:23" pos:end="377:28"><name pos:start="377:23" pos:end="377:28">config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="381:9" pos:end="381:24"><expr pos:start="381:9" pos:end="381:23"><call pos:start="381:9" pos:end="381:23"><name pos:start="381:9" pos:end="381:17">qemu_free</name><argument_list pos:start="381:18" pos:end="381:23">(<argument pos:start="381:19" pos:end="381:22"><expr pos:start="381:19" pos:end="381:22"><name pos:start="381:19" pos:end="381:22">vnet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="383:25"><expr pos:start="383:9" pos:end="383:24"><call pos:start="383:9" pos:end="383:24"><name pos:start="383:9" pos:end="383:17">qemu_free</name><argument_list pos:start="383:18" pos:end="383:24">(<argument pos:start="383:19" pos:end="383:23"><expr pos:start="383:19" pos:end="383:23"><name pos:start="383:19" pos:end="383:23">vhost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="385:9" pos:end="385:29"><expr pos:start="385:9" pos:end="385:28"><call pos:start="385:9" pos:end="385:28"><name pos:start="385:9" pos:end="385:17">qemu_free</name><argument_list pos:start="385:18" pos:end="385:28">(<argument pos:start="385:19" pos:end="385:27"><expr pos:start="385:19" pos:end="385:27"><name pos:start="385:19" pos:end="385:27">vhostname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:31"><expr pos:start="387:9" pos:end="387:30"><call pos:start="387:9" pos:end="387:30"><name pos:start="387:9" pos:end="387:17">qemu_free</name><argument_list pos:start="387:18" pos:end="387:30">(<argument pos:start="387:19" pos:end="387:29"><expr pos:start="387:19" pos:end="387:29"><name pos:start="387:19" pos:end="387:29">tftp_export</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:28"><expr pos:start="389:9" pos:end="389:27"><call pos:start="389:9" pos:end="389:27"><name pos:start="389:9" pos:end="389:17">qemu_free</name><argument_list pos:start="389:18" pos:end="389:27">(<argument pos:start="389:19" pos:end="389:26"><expr pos:start="389:19" pos:end="389:26"><name pos:start="389:19" pos:end="389:26">bootfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="391:9" pos:end="391:31"><expr pos:start="391:9" pos:end="391:30"><call pos:start="391:9" pos:end="391:30"><name pos:start="391:9" pos:end="391:17">qemu_free</name><argument_list pos:start="391:18" pos:end="391:30">(<argument pos:start="391:19" pos:end="391:29"><expr pos:start="391:19" pos:end="391:29"><name pos:start="391:19" pos:end="391:29">vdhcp_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="393:9" pos:end="393:28"><expr pos:start="393:9" pos:end="393:27"><call pos:start="393:9" pos:end="393:27"><name pos:start="393:9" pos:end="393:17">qemu_free</name><argument_list pos:start="393:18" pos:end="393:27">(<argument pos:start="393:19" pos:end="393:26"><expr pos:start="393:19" pos:end="393:26"><name pos:start="393:19" pos:end="393:26">vnamesrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="395:9" pos:end="395:30"><expr pos:start="395:9" pos:end="395:29"><call pos:start="395:9" pos:end="395:29"><name pos:start="395:9" pos:end="395:17">qemu_free</name><argument_list pos:start="395:18" pos:end="395:29">(<argument pos:start="395:19" pos:end="395:28"><expr pos:start="395:19" pos:end="395:28"><name pos:start="395:19" pos:end="395:28">smb_export</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="397:9" pos:end="397:27"><expr pos:start="397:9" pos:end="397:26"><call pos:start="397:9" pos:end="397:26"><name pos:start="397:9" pos:end="397:17">qemu_free</name><argument_list pos:start="397:18" pos:end="397:26">(<argument pos:start="397:19" pos:end="397:25"><expr pos:start="397:19" pos:end="397:25"><name pos:start="397:19" pos:end="397:25">vsmbsrv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="399:7" pos:end="425:5">else if <condition pos:start="399:15" pos:end="399:42">(<expr pos:start="399:16" pos:end="399:41"><operator pos:start="399:16" pos:end="399:16">!</operator><call pos:start="399:17" pos:end="399:41"><name pos:start="399:17" pos:end="399:22">strcmp</name><argument_list pos:start="399:23" pos:end="399:41">(<argument pos:start="399:24" pos:end="399:29"><expr pos:start="399:24" pos:end="399:29"><name pos:start="399:24" pos:end="399:29">device</name></expr></argument>, <argument pos:start="399:32" pos:end="399:40"><expr pos:start="399:32" pos:end="399:40"><literal type="string" pos:start="399:32" pos:end="399:40">"channel"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="399:44" pos:end="425:5">{<block_content pos:start="401:9" pos:end="423:16">

        <if_stmt pos:start="401:9" pos:end="421:9"><if pos:start="401:9" pos:end="417:9">if <condition pos:start="401:12" pos:end="401:40">(<expr pos:start="401:13" pos:end="401:39"><call pos:start="401:13" pos:end="401:39"><name pos:start="401:13" pos:end="401:24">QTAILQ_EMPTY</name><argument_list pos:start="401:25" pos:end="401:39">(<argument pos:start="401:26" pos:end="401:38"><expr pos:start="401:26" pos:end="401:38"><operator pos:start="401:26" pos:end="401:26">&amp;</operator><name pos:start="401:27" pos:end="401:38">slirp_stacks</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="401:42" pos:end="417:9">{<block_content pos:start="403:13" pos:end="415:35">

            <decl_stmt pos:start="403:13" pos:end="403:44"><decl pos:start="403:13" pos:end="403:43"><type pos:start="403:13" pos:end="403:37"><name pos:start="403:13" pos:end="403:35"><name pos:start="403:13" pos:end="403:18">struct</name> <name pos:start="403:20" pos:end="403:35">slirp_config_str</name></name> <modifier pos:start="403:37" pos:end="403:37">*</modifier></type><name pos:start="403:38" pos:end="403:43">config</name></decl>;</decl_stmt>



            <expr_stmt pos:start="407:13" pos:end="407:50"><expr pos:start="407:13" pos:end="407:49"><name pos:start="407:13" pos:end="407:18">config</name> <operator pos:start="407:20" pos:end="407:20">=</operator> <call pos:start="407:22" pos:end="407:49"><name pos:start="407:22" pos:end="407:32">qemu_malloc</name><argument_list pos:start="407:33" pos:end="407:49">(<argument pos:start="407:34" pos:end="407:48"><expr pos:start="407:34" pos:end="407:48"><sizeof pos:start="407:34" pos:end="407:48">sizeof<argument_list pos:start="407:40" pos:end="407:48">(<argument pos:start="407:41" pos:end="407:47"><expr pos:start="407:41" pos:end="407:47"><operator pos:start="407:41" pos:end="407:41">*</operator><name pos:start="407:42" pos:end="407:47">config</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="409:13" pos:end="409:57"><expr pos:start="409:13" pos:end="409:56"><call pos:start="409:13" pos:end="409:56"><name pos:start="409:13" pos:end="409:19">pstrcpy</name><argument_list pos:start="409:20" pos:end="409:56">(<argument pos:start="409:21" pos:end="409:31"><expr pos:start="409:21" pos:end="409:31"><name pos:start="409:21" pos:end="409:31"><name pos:start="409:21" pos:end="409:26">config</name><operator pos:start="409:27" pos:end="409:28">-&gt;</operator><name pos:start="409:29" pos:end="409:31">str</name></name></expr></argument>, <argument pos:start="409:34" pos:end="409:52"><expr pos:start="409:34" pos:end="409:52"><sizeof pos:start="409:34" pos:end="409:52">sizeof<argument_list pos:start="409:40" pos:end="409:52">(<argument pos:start="409:41" pos:end="409:51"><expr pos:start="409:41" pos:end="409:51"><name pos:start="409:41" pos:end="409:51"><name pos:start="409:41" pos:end="409:46">config</name><operator pos:start="409:47" pos:end="409:48">-&gt;</operator><name pos:start="409:49" pos:end="409:51">str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="409:55" pos:end="409:55"><expr pos:start="409:55" pos:end="409:55"><name pos:start="409:55" pos:end="409:55">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="411:13" pos:end="411:45"><expr pos:start="411:13" pos:end="411:44"><name pos:start="411:13" pos:end="411:25"><name pos:start="411:13" pos:end="411:18">config</name><operator pos:start="411:19" pos:end="411:20">-&gt;</operator><name pos:start="411:21" pos:end="411:25">flags</name></name> <operator pos:start="411:27" pos:end="411:27">=</operator> <name pos:start="411:29" pos:end="411:44">SLIRP_CFG_LEGACY</name></expr>;</expr_stmt>

            <expr_stmt pos:start="413:13" pos:end="413:41"><expr pos:start="413:13" pos:end="413:40"><name pos:start="413:13" pos:end="413:24"><name pos:start="413:13" pos:end="413:18">config</name><operator pos:start="413:19" pos:end="413:20">-&gt;</operator><name pos:start="413:21" pos:end="413:24">next</name></name> <operator pos:start="413:26" pos:end="413:26">=</operator> <name pos:start="413:28" pos:end="413:40">slirp_configs</name></expr>;</expr_stmt>

            <expr_stmt pos:start="415:13" pos:end="415:35"><expr pos:start="415:13" pos:end="415:34"><name pos:start="415:13" pos:end="415:25">slirp_configs</name> <operator pos:start="415:27" pos:end="415:27">=</operator> <name pos:start="415:29" pos:end="415:34">config</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="417:11" pos:end="421:9">else <block pos:start="417:16" pos:end="421:9">{<block_content pos:start="419:13" pos:end="419:67">

            <expr_stmt pos:start="419:13" pos:end="419:67"><expr pos:start="419:13" pos:end="419:66"><call pos:start="419:13" pos:end="419:66"><name pos:start="419:13" pos:end="419:26">slirp_guestfwd</name><argument_list pos:start="419:27" pos:end="419:66">(<argument pos:start="419:28" pos:end="419:54"><expr pos:start="419:28" pos:end="419:54"><call pos:start="419:28" pos:end="419:54"><name pos:start="419:28" pos:end="419:39">QTAILQ_FIRST</name><argument_list pos:start="419:40" pos:end="419:54">(<argument pos:start="419:41" pos:end="419:53"><expr pos:start="419:41" pos:end="419:53"><operator pos:start="419:41" pos:end="419:41">&amp;</operator><name pos:start="419:42" pos:end="419:53">slirp_stacks</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="419:57" pos:end="419:59"><expr pos:start="419:57" pos:end="419:59"><name pos:start="419:57" pos:end="419:59">mon</name></expr></argument>, <argument pos:start="419:62" pos:end="419:62"><expr pos:start="419:62" pos:end="419:62"><name pos:start="419:62" pos:end="419:62">p</name></expr></argument>, <argument pos:start="419:65" pos:end="419:65"><expr pos:start="419:65" pos:end="419:65"><literal type="number" pos:start="419:65" pos:end="419:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="423:9" pos:end="423:16"><expr pos:start="423:9" pos:end="423:15"><name pos:start="423:9" pos:end="423:11">ret</name> <operator pos:start="423:13" pos:end="423:13">=</operator> <literal type="number" pos:start="423:15" pos:end="423:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="425:7" pos:end="467:5">else

<cpp:endif pos:start="427:1" pos:end="427:6">#<cpp:directive pos:start="427:2" pos:end="427:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="429:1" pos:end="429:13">#<cpp:directive pos:start="429:2" pos:end="429:6">ifdef</cpp:directive> <name pos:start="429:8" pos:end="429:13">_WIN32</name></cpp:ifdef>

    if <condition pos:start="431:8" pos:end="431:31">(<expr pos:start="431:9" pos:end="431:30"><operator pos:start="431:9" pos:end="431:9">!</operator><call pos:start="431:10" pos:end="431:30"><name pos:start="431:10" pos:end="431:15">strcmp</name><argument_list pos:start="431:16" pos:end="431:30">(<argument pos:start="431:17" pos:end="431:22"><expr pos:start="431:17" pos:end="431:22"><name pos:start="431:17" pos:end="431:22">device</name></expr></argument>, <argument pos:start="431:25" pos:end="431:29"><expr pos:start="431:25" pos:end="431:29"><literal type="string" pos:start="431:25" pos:end="431:29">"tap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="431:33" pos:end="467:5">{<block_content pos:start="433:9" pos:end="465:57">

        <decl_stmt pos:start="433:9" pos:end="437:10"><decl pos:start="433:9" pos:end="437:9"><type pos:start="433:9" pos:end="433:33"><specifier pos:start="433:9" pos:end="433:14">static</specifier> <specifier pos:start="433:16" pos:end="433:20">const</specifier> <name pos:start="433:22" pos:end="433:25">char</name> <modifier pos:start="433:27" pos:end="433:27">*</modifier> <specifier pos:start="433:29" pos:end="433:33">const</specifier></type> <name pos:start="433:35" pos:end="433:46"><name pos:start="433:35" pos:end="433:44">tap_params</name><index pos:start="433:45" pos:end="433:46">[]</index></name> <init pos:start="433:48" pos:end="437:9">= <expr pos:start="433:50" pos:end="437:9"><block pos:start="433:50" pos:end="437:9">{

            <expr pos:start="435:13" pos:end="435:18"><literal type="string" pos:start="435:13" pos:end="435:18">"vlan"</literal></expr>, <expr pos:start="435:21" pos:end="435:26"><literal type="string" pos:start="435:21" pos:end="435:26">"name"</literal></expr>, <expr pos:start="435:29" pos:end="435:36"><literal type="string" pos:start="435:29" pos:end="435:36">"ifname"</literal></expr>, <expr pos:start="435:39" pos:end="435:42"><name pos:start="435:39" pos:end="435:42">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="439:9" pos:end="439:24"><decl pos:start="439:9" pos:end="439:23"><type pos:start="439:9" pos:end="439:12"><name pos:start="439:9" pos:end="439:12">char</name></type> <name pos:start="439:14" pos:end="439:23"><name pos:start="439:14" pos:end="439:19">ifname</name><index pos:start="439:20" pos:end="439:23">[<expr pos:start="439:21" pos:end="439:22"><literal type="number" pos:start="439:21" pos:end="439:22">64</literal></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="443:9" pos:end="451:9"><if pos:start="443:9" pos:end="451:9">if <condition pos:start="443:12" pos:end="443:62">(<expr pos:start="443:13" pos:end="443:61"><call pos:start="443:13" pos:end="443:57"><name pos:start="443:13" pos:end="443:24">check_params</name><argument_list pos:start="443:25" pos:end="443:57">(<argument pos:start="443:26" pos:end="443:28"><expr pos:start="443:26" pos:end="443:28"><name pos:start="443:26" pos:end="443:28">buf</name></expr></argument>, <argument pos:start="443:31" pos:end="443:41"><expr pos:start="443:31" pos:end="443:41"><sizeof pos:start="443:31" pos:end="443:41">sizeof<argument_list pos:start="443:37" pos:end="443:41">(<argument pos:start="443:38" pos:end="443:40"><expr pos:start="443:38" pos:end="443:40"><name pos:start="443:38" pos:end="443:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="443:44" pos:end="443:53"><expr pos:start="443:44" pos:end="443:53"><name pos:start="443:44" pos:end="443:53">tap_params</name></expr></argument>, <argument pos:start="443:56" pos:end="443:56"><expr pos:start="443:56" pos:end="443:56"><name pos:start="443:56" pos:end="443:56">p</name></expr></argument>)</argument_list></call> <operator pos:start="443:59" pos:end="443:59">&lt;</operator> <literal type="number" pos:start="443:61" pos:end="443:61">0</literal></expr>)</condition> <block pos:start="443:64" pos:end="451:9">{<block_content pos:start="445:13" pos:end="449:21">

            <expr_stmt pos:start="445:13" pos:end="445:74"><expr pos:start="445:13" pos:end="445:73"><call pos:start="445:13" pos:end="445:73"><name pos:start="445:13" pos:end="445:24">config_error</name><argument_list pos:start="445:25" pos:end="445:73">(<argument pos:start="445:26" pos:end="445:28"><expr pos:start="445:26" pos:end="445:28"><name pos:start="445:26" pos:end="445:28">mon</name></expr></argument>, <argument pos:start="445:31" pos:end="445:64"><expr pos:start="445:31" pos:end="445:64"><literal type="string" pos:start="445:31" pos:end="445:64">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="445:67" pos:end="445:69"><expr pos:start="445:67" pos:end="445:69"><name pos:start="445:67" pos:end="445:69">buf</name></expr></argument>, <argument pos:start="445:72" pos:end="445:72"><expr pos:start="445:72" pos:end="445:72"><name pos:start="445:72" pos:end="445:72">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="447:13" pos:end="447:21"><expr pos:start="447:13" pos:end="447:20"><name pos:start="447:13" pos:end="447:15">ret</name> <operator pos:start="447:17" pos:end="447:17">=</operator> <operator pos:start="447:19" pos:end="447:19">-</operator><literal type="number" pos:start="447:20" pos:end="447:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="449:13" pos:end="449:21">goto <name pos:start="449:18" pos:end="449:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="453:9" pos:end="461:9"><if pos:start="453:9" pos:end="461:9">if <condition pos:start="453:12" pos:end="453:70">(<expr pos:start="453:13" pos:end="453:69"><call pos:start="453:13" pos:end="453:64"><name pos:start="453:13" pos:end="453:27">get_param_value</name><argument_list pos:start="453:28" pos:end="453:64">(<argument pos:start="453:29" pos:end="453:34"><expr pos:start="453:29" pos:end="453:34"><name pos:start="453:29" pos:end="453:34">ifname</name></expr></argument>, <argument pos:start="453:37" pos:end="453:50"><expr pos:start="453:37" pos:end="453:50"><sizeof pos:start="453:37" pos:end="453:50">sizeof<argument_list pos:start="453:43" pos:end="453:50">(<argument pos:start="453:44" pos:end="453:49"><expr pos:start="453:44" pos:end="453:49"><name pos:start="453:44" pos:end="453:49">ifname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="453:53" pos:end="453:60"><expr pos:start="453:53" pos:end="453:60"><literal type="string" pos:start="453:53" pos:end="453:60">"ifname"</literal></expr></argument>, <argument pos:start="453:63" pos:end="453:63"><expr pos:start="453:63" pos:end="453:63"><name pos:start="453:63" pos:end="453:63">p</name></expr></argument>)</argument_list></call> <operator pos:start="453:66" pos:end="453:67">&lt;=</operator> <literal type="number" pos:start="453:69" pos:end="453:69">0</literal></expr>)</condition> <block pos:start="453:72" pos:end="461:9">{<block_content pos:start="455:13" pos:end="459:21">

            <expr_stmt pos:start="455:13" pos:end="455:58"><expr pos:start="455:13" pos:end="455:57"><call pos:start="455:13" pos:end="455:57"><name pos:start="455:13" pos:end="455:24">config_error</name><argument_list pos:start="455:25" pos:end="455:57">(<argument pos:start="455:26" pos:end="455:28"><expr pos:start="455:26" pos:end="455:28"><name pos:start="455:26" pos:end="455:28">mon</name></expr></argument>, <argument pos:start="455:31" pos:end="455:56"><expr pos:start="455:31" pos:end="455:56"><literal type="string" pos:start="455:31" pos:end="455:56">"tap: no interface name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="457:13" pos:end="457:21"><expr pos:start="457:13" pos:end="457:20"><name pos:start="457:13" pos:end="457:15">ret</name> <operator pos:start="457:17" pos:end="457:17">=</operator> <operator pos:start="457:19" pos:end="457:19">-</operator><literal type="number" pos:start="457:20" pos:end="457:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="459:13" pos:end="459:21">goto <name pos:start="459:18" pos:end="459:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="463:9" pos:end="463:29"><expr pos:start="463:9" pos:end="463:28"><name pos:start="463:9" pos:end="463:26"><name pos:start="463:9" pos:end="463:12">vlan</name><operator pos:start="463:13" pos:end="463:14">-&gt;</operator><name pos:start="463:15" pos:end="463:26">nb_host_devs</name></name><operator pos:start="463:27" pos:end="463:28">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="465:9" pos:end="465:57"><expr pos:start="465:9" pos:end="465:56"><name pos:start="465:9" pos:end="465:11">ret</name> <operator pos:start="465:13" pos:end="465:13">=</operator> <call pos:start="465:15" pos:end="465:56"><name pos:start="465:15" pos:end="465:28">tap_win32_init</name><argument_list pos:start="465:29" pos:end="465:56">(<argument pos:start="465:30" pos:end="465:33"><expr pos:start="465:30" pos:end="465:33"><name pos:start="465:30" pos:end="465:33">vlan</name></expr></argument>, <argument pos:start="465:36" pos:end="465:41"><expr pos:start="465:36" pos:end="465:41"><name pos:start="465:36" pos:end="465:41">device</name></expr></argument>, <argument pos:start="465:44" pos:end="465:47"><expr pos:start="465:44" pos:end="465:47"><name pos:start="465:44" pos:end="465:47">name</name></expr></argument>, <argument pos:start="465:50" pos:end="465:55"><expr pos:start="465:50" pos:end="465:55"><name pos:start="465:50" pos:end="465:55">ifname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="467:7" pos:end="581:5">else

<cpp:elif pos:start="469:1" pos:end="469:20">#<cpp:directive pos:start="469:2" pos:end="469:5">elif</cpp:directive> <expr pos:start="469:7" pos:end="469:20"><call pos:start="469:7" pos:end="469:20"><name pos:start="469:7" pos:end="469:13">defined</name> <argument_list pos:start="469:15" pos:end="469:20">(<argument pos:start="469:16" pos:end="469:19"><expr pos:start="469:16" pos:end="469:19"><name pos:start="469:16" pos:end="469:19">_AIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:else pos:start="471:1" pos:end="471:5">#<cpp:directive pos:start="471:2" pos:end="471:5">else</cpp:directive></cpp:else>

    if <condition pos:start="473:8" pos:end="473:31">(<expr pos:start="473:9" pos:end="473:30"><operator pos:start="473:9" pos:end="473:9">!</operator><call pos:start="473:10" pos:end="473:30"><name pos:start="473:10" pos:end="473:15">strcmp</name><argument_list pos:start="473:16" pos:end="473:30">(<argument pos:start="473:17" pos:end="473:22"><expr pos:start="473:17" pos:end="473:22"><name pos:start="473:17" pos:end="473:22">device</name></expr></argument>, <argument pos:start="473:25" pos:end="473:29"><expr pos:start="473:25" pos:end="473:29"><literal type="string" pos:start="473:25" pos:end="473:29">"tap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="473:33" pos:end="581:5">{<block_content pos:start="475:9" pos:end="579:9">

        <decl_stmt pos:start="475:9" pos:end="475:36"><decl pos:start="475:9" pos:end="475:23"><type pos:start="475:9" pos:end="475:12"><name pos:start="475:9" pos:end="475:12">char</name></type> <name pos:start="475:14" pos:end="475:23"><name pos:start="475:14" pos:end="475:19">ifname</name><index pos:start="475:20" pos:end="475:23">[<expr pos:start="475:21" pos:end="475:22"><literal type="number" pos:start="475:21" pos:end="475:22">64</literal></expr>]</index></name></decl>, <decl pos:start="475:26" pos:end="475:35"><type ref="prev" pos:start="475:9" pos:end="475:12"/><name pos:start="475:26" pos:end="475:35"><name pos:start="475:26" pos:end="475:31">chkbuf</name><index pos:start="475:32" pos:end="475:35">[<expr pos:start="475:33" pos:end="475:34"><literal type="number" pos:start="475:33" pos:end="475:34">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="477:9" pos:end="477:51"><decl pos:start="477:9" pos:end="477:31"><type pos:start="477:9" pos:end="477:12"><name pos:start="477:9" pos:end="477:12">char</name></type> <name pos:start="477:14" pos:end="477:31"><name pos:start="477:14" pos:end="477:25">setup_script</name><index pos:start="477:26" pos:end="477:31">[<expr pos:start="477:27" pos:end="477:30"><literal type="number" pos:start="477:27" pos:end="477:30">1024</literal></expr>]</index></name></decl>, <decl pos:start="477:34" pos:end="477:50"><type ref="prev" pos:start="477:9" pos:end="477:12"/><name pos:start="477:34" pos:end="477:50"><name pos:start="477:34" pos:end="477:44">down_script</name><index pos:start="477:45" pos:end="477:50">[<expr pos:start="477:46" pos:end="477:49"><literal type="number" pos:start="477:46" pos:end="477:49">1024</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="479:9" pos:end="479:20"><decl pos:start="479:9" pos:end="479:19"><type pos:start="479:9" pos:end="479:18"><name pos:start="479:9" pos:end="479:16">TAPState</name> <modifier pos:start="479:18" pos:end="479:18">*</modifier></type><name pos:start="479:19" pos:end="479:19">s</name></decl>;</decl_stmt>

        <decl_stmt pos:start="481:9" pos:end="481:15"><decl pos:start="481:9" pos:end="481:14"><type pos:start="481:9" pos:end="481:11"><name pos:start="481:9" pos:end="481:11">int</name></type> <name pos:start="481:13" pos:end="481:14">fd</name></decl>;</decl_stmt>

        <expr_stmt pos:start="483:9" pos:end="483:29"><expr pos:start="483:9" pos:end="483:28"><name pos:start="483:9" pos:end="483:26"><name pos:start="483:9" pos:end="483:12">vlan</name><operator pos:start="483:13" pos:end="483:14">-&gt;</operator><name pos:start="483:15" pos:end="483:26">nb_host_devs</name></name><operator pos:start="483:27" pos:end="483:28">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="485:9" pos:end="559:9"><if pos:start="485:9" pos:end="521:9">if <condition pos:start="485:12" pos:end="485:59">(<expr pos:start="485:13" pos:end="485:58"><call pos:start="485:13" pos:end="485:54"><name pos:start="485:13" pos:end="485:27">get_param_value</name><argument_list pos:start="485:28" pos:end="485:54">(<argument pos:start="485:29" pos:end="485:31"><expr pos:start="485:29" pos:end="485:31"><name pos:start="485:29" pos:end="485:31">buf</name></expr></argument>, <argument pos:start="485:34" pos:end="485:44"><expr pos:start="485:34" pos:end="485:44"><sizeof pos:start="485:34" pos:end="485:44">sizeof<argument_list pos:start="485:40" pos:end="485:44">(<argument pos:start="485:41" pos:end="485:43"><expr pos:start="485:41" pos:end="485:43"><name pos:start="485:41" pos:end="485:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="485:47" pos:end="485:50"><expr pos:start="485:47" pos:end="485:50"><literal type="string" pos:start="485:47" pos:end="485:50">"fd"</literal></expr></argument>, <argument pos:start="485:53" pos:end="485:53"><expr pos:start="485:53" pos:end="485:53"><name pos:start="485:53" pos:end="485:53">p</name></expr></argument>)</argument_list></call> <operator pos:start="485:56" pos:end="485:56">&gt;</operator> <literal type="number" pos:start="485:58" pos:end="485:58">0</literal></expr>)</condition> <block pos:start="485:61" pos:end="521:9">{<block_content pos:start="487:13" pos:end="519:13">

            <decl_stmt pos:start="487:13" pos:end="491:14"><decl pos:start="487:13" pos:end="491:13"><type pos:start="487:13" pos:end="487:37"><specifier pos:start="487:13" pos:end="487:18">static</specifier> <specifier pos:start="487:20" pos:end="487:24">const</specifier> <name pos:start="487:26" pos:end="487:29">char</name> <modifier pos:start="487:31" pos:end="487:31">*</modifier> <specifier pos:start="487:33" pos:end="487:37">const</specifier></type> <name pos:start="487:39" pos:end="487:49"><name pos:start="487:39" pos:end="487:47">fd_params</name><index pos:start="487:48" pos:end="487:49">[]</index></name> <init pos:start="487:51" pos:end="491:13">= <expr pos:start="487:53" pos:end="491:13"><block pos:start="487:53" pos:end="491:13">{

                <expr pos:start="489:17" pos:end="489:22"><literal type="string" pos:start="489:17" pos:end="489:22">"vlan"</literal></expr>, <expr pos:start="489:25" pos:end="489:30"><literal type="string" pos:start="489:25" pos:end="489:30">"name"</literal></expr>, <expr pos:start="489:33" pos:end="489:36"><literal type="string" pos:start="489:33" pos:end="489:36">"fd"</literal></expr>, <expr pos:start="489:39" pos:end="489:46"><literal type="string" pos:start="489:39" pos:end="489:46">"sndbuf"</literal></expr>, <expr pos:start="489:49" pos:end="489:52"><name pos:start="489:49" pos:end="489:52">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="493:13" pos:end="493:21"><expr pos:start="493:13" pos:end="493:20"><name pos:start="493:13" pos:end="493:15">ret</name> <operator pos:start="493:17" pos:end="493:17">=</operator> <operator pos:start="493:19" pos:end="493:19">-</operator><literal type="number" pos:start="493:20" pos:end="493:20">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="495:13" pos:end="501:13"><if pos:start="495:13" pos:end="501:13">if <condition pos:start="495:16" pos:end="495:71">(<expr pos:start="495:17" pos:end="495:70"><call pos:start="495:17" pos:end="495:66"><name pos:start="495:17" pos:end="495:28">check_params</name><argument_list pos:start="495:29" pos:end="495:66">(<argument pos:start="495:30" pos:end="495:35"><expr pos:start="495:30" pos:end="495:35"><name pos:start="495:30" pos:end="495:35">chkbuf</name></expr></argument>, <argument pos:start="495:38" pos:end="495:51"><expr pos:start="495:38" pos:end="495:51"><sizeof pos:start="495:38" pos:end="495:51">sizeof<argument_list pos:start="495:44" pos:end="495:51">(<argument pos:start="495:45" pos:end="495:50"><expr pos:start="495:45" pos:end="495:50"><name pos:start="495:45" pos:end="495:50">chkbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="495:54" pos:end="495:62"><expr pos:start="495:54" pos:end="495:62"><name pos:start="495:54" pos:end="495:62">fd_params</name></expr></argument>, <argument pos:start="495:65" pos:end="495:65"><expr pos:start="495:65" pos:end="495:65"><name pos:start="495:65" pos:end="495:65">p</name></expr></argument>)</argument_list></call> <operator pos:start="495:68" pos:end="495:68">&lt;</operator> <literal type="number" pos:start="495:70" pos:end="495:70">0</literal></expr>)</condition> <block pos:start="495:73" pos:end="501:13">{<block_content pos:start="497:17" pos:end="499:25">

                <expr_stmt pos:start="497:17" pos:end="497:81"><expr pos:start="497:17" pos:end="497:80"><call pos:start="497:17" pos:end="497:80"><name pos:start="497:17" pos:end="497:28">config_error</name><argument_list pos:start="497:29" pos:end="497:80">(<argument pos:start="497:30" pos:end="497:32"><expr pos:start="497:30" pos:end="497:32"><name pos:start="497:30" pos:end="497:32">mon</name></expr></argument>, <argument pos:start="497:35" pos:end="497:68"><expr pos:start="497:35" pos:end="497:68"><literal type="string" pos:start="497:35" pos:end="497:68">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="497:71" pos:end="497:76"><expr pos:start="497:71" pos:end="497:76"><name pos:start="497:71" pos:end="497:76">chkbuf</name></expr></argument>, <argument pos:start="497:79" pos:end="497:79"><expr pos:start="497:79" pos:end="497:79"><name pos:start="497:79" pos:end="497:79">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="499:17" pos:end="499:25">goto <name pos:start="499:22" pos:end="499:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="503:13" pos:end="503:47"><expr pos:start="503:13" pos:end="503:46"><name pos:start="503:13" pos:end="503:14">fd</name> <operator pos:start="503:16" pos:end="503:16">=</operator> <call pos:start="503:18" pos:end="503:46"><name pos:start="503:18" pos:end="503:36">net_handle_fd_param</name><argument_list pos:start="503:37" pos:end="503:46">(<argument pos:start="503:38" pos:end="503:40"><expr pos:start="503:38" pos:end="503:40"><name pos:start="503:38" pos:end="503:40">mon</name></expr></argument>, <argument pos:start="503:43" pos:end="503:45"><expr pos:start="503:43" pos:end="503:45"><name pos:start="503:43" pos:end="503:45">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="505:13" pos:end="509:13"><if pos:start="505:13" pos:end="509:13">if <condition pos:start="505:16" pos:end="505:25">(<expr pos:start="505:17" pos:end="505:24"><name pos:start="505:17" pos:end="505:18">fd</name> <operator pos:start="505:20" pos:end="505:21">==</operator> <operator pos:start="505:23" pos:end="505:23">-</operator><literal type="number" pos:start="505:24" pos:end="505:24">1</literal></expr>)</condition> <block pos:start="505:27" pos:end="509:13">{<block_content pos:start="507:17" pos:end="507:25">

                <goto pos:start="507:17" pos:end="507:25">goto <name pos:start="507:22" pos:end="507:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="511:13" pos:end="511:43"><expr pos:start="511:13" pos:end="511:42"><call pos:start="511:13" pos:end="511:42"><name pos:start="511:13" pos:end="511:17">fcntl</name><argument_list pos:start="511:18" pos:end="511:42">(<argument pos:start="511:19" pos:end="511:20"><expr pos:start="511:19" pos:end="511:20"><name pos:start="511:19" pos:end="511:20">fd</name></expr></argument>, <argument pos:start="511:23" pos:end="511:29"><expr pos:start="511:23" pos:end="511:29"><name pos:start="511:23" pos:end="511:29">F_SETFL</name></expr></argument>, <argument pos:start="511:32" pos:end="511:41"><expr pos:start="511:32" pos:end="511:41"><name pos:start="511:32" pos:end="511:41">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="513:13" pos:end="513:56"><expr pos:start="513:13" pos:end="513:55"><name pos:start="513:13" pos:end="513:13">s</name> <operator pos:start="513:15" pos:end="513:15">=</operator> <call pos:start="513:17" pos:end="513:55"><name pos:start="513:17" pos:end="513:31">net_tap_fd_init</name><argument_list pos:start="513:32" pos:end="513:55">(<argument pos:start="513:33" pos:end="513:36"><expr pos:start="513:33" pos:end="513:36"><name pos:start="513:33" pos:end="513:36">vlan</name></expr></argument>, <argument pos:start="513:39" pos:end="513:44"><expr pos:start="513:39" pos:end="513:44"><name pos:start="513:39" pos:end="513:44">device</name></expr></argument>, <argument pos:start="513:47" pos:end="513:50"><expr pos:start="513:47" pos:end="513:50"><name pos:start="513:47" pos:end="513:50">name</name></expr></argument>, <argument pos:start="513:53" pos:end="513:54"><expr pos:start="513:53" pos:end="513:54"><name pos:start="513:53" pos:end="513:54">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="515:13" pos:end="519:13"><if pos:start="515:13" pos:end="519:13">if <condition pos:start="515:16" pos:end="515:19">(<expr pos:start="515:17" pos:end="515:18"><operator pos:start="515:17" pos:end="515:17">!</operator><name pos:start="515:18" pos:end="515:18">s</name></expr>)</condition> <block pos:start="515:21" pos:end="519:13">{<block_content pos:start="517:17" pos:end="517:26">

                <expr_stmt pos:start="517:17" pos:end="517:26"><expr pos:start="517:17" pos:end="517:25"><call pos:start="517:17" pos:end="517:25"><name pos:start="517:17" pos:end="517:21">close</name><argument_list pos:start="517:22" pos:end="517:25">(<argument pos:start="517:23" pos:end="517:24"><expr pos:start="517:23" pos:end="517:24"><name pos:start="517:23" pos:end="517:24">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="521:11" pos:end="559:9">else <block pos:start="521:16" pos:end="559:9">{<block_content pos:start="523:13" pos:end="557:84">

            <decl_stmt pos:start="523:13" pos:end="527:14"><decl pos:start="523:13" pos:end="527:13"><type pos:start="523:13" pos:end="523:37"><specifier pos:start="523:13" pos:end="523:18">static</specifier> <specifier pos:start="523:20" pos:end="523:24">const</specifier> <name pos:start="523:26" pos:end="523:29">char</name> <modifier pos:start="523:31" pos:end="523:31">*</modifier> <specifier pos:start="523:33" pos:end="523:37">const</specifier></type> <name pos:start="523:39" pos:end="523:50"><name pos:start="523:39" pos:end="523:48">tap_params</name><index pos:start="523:49" pos:end="523:50">[]</index></name> <init pos:start="523:52" pos:end="527:13">= <expr pos:start="523:54" pos:end="527:13"><block pos:start="523:54" pos:end="527:13">{

                <expr pos:start="525:17" pos:end="525:22"><literal type="string" pos:start="525:17" pos:end="525:22">"vlan"</literal></expr>, <expr pos:start="525:25" pos:end="525:30"><literal type="string" pos:start="525:25" pos:end="525:30">"name"</literal></expr>, <expr pos:start="525:33" pos:end="525:40"><literal type="string" pos:start="525:33" pos:end="525:40">"ifname"</literal></expr>, <expr pos:start="525:43" pos:end="525:50"><literal type="string" pos:start="525:43" pos:end="525:50">"script"</literal></expr>, <expr pos:start="525:53" pos:end="525:64"><literal type="string" pos:start="525:53" pos:end="525:64">"downscript"</literal></expr>, <expr pos:start="525:67" pos:end="525:74"><literal type="string" pos:start="525:67" pos:end="525:74">"sndbuf"</literal></expr>, <expr pos:start="525:77" pos:end="525:80"><name pos:start="525:77" pos:end="525:80">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="529:13" pos:end="537:13"><if pos:start="529:13" pos:end="537:13">if <condition pos:start="529:16" pos:end="529:72">(<expr pos:start="529:17" pos:end="529:71"><call pos:start="529:17" pos:end="529:67"><name pos:start="529:17" pos:end="529:28">check_params</name><argument_list pos:start="529:29" pos:end="529:67">(<argument pos:start="529:30" pos:end="529:35"><expr pos:start="529:30" pos:end="529:35"><name pos:start="529:30" pos:end="529:35">chkbuf</name></expr></argument>, <argument pos:start="529:38" pos:end="529:51"><expr pos:start="529:38" pos:end="529:51"><sizeof pos:start="529:38" pos:end="529:51">sizeof<argument_list pos:start="529:44" pos:end="529:51">(<argument pos:start="529:45" pos:end="529:50"><expr pos:start="529:45" pos:end="529:50"><name pos:start="529:45" pos:end="529:50">chkbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="529:54" pos:end="529:63"><expr pos:start="529:54" pos:end="529:63"><name pos:start="529:54" pos:end="529:63">tap_params</name></expr></argument>, <argument pos:start="529:66" pos:end="529:66"><expr pos:start="529:66" pos:end="529:66"><name pos:start="529:66" pos:end="529:66">p</name></expr></argument>)</argument_list></call> <operator pos:start="529:69" pos:end="529:69">&lt;</operator> <literal type="number" pos:start="529:71" pos:end="529:71">0</literal></expr>)</condition> <block pos:start="529:74" pos:end="537:13">{<block_content pos:start="531:17" pos:end="535:25">

                <expr_stmt pos:start="531:17" pos:end="531:81"><expr pos:start="531:17" pos:end="531:80"><call pos:start="531:17" pos:end="531:80"><name pos:start="531:17" pos:end="531:28">config_error</name><argument_list pos:start="531:29" pos:end="531:80">(<argument pos:start="531:30" pos:end="531:32"><expr pos:start="531:30" pos:end="531:32"><name pos:start="531:30" pos:end="531:32">mon</name></expr></argument>, <argument pos:start="531:35" pos:end="531:68"><expr pos:start="531:35" pos:end="531:68"><literal type="string" pos:start="531:35" pos:end="531:68">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="531:71" pos:end="531:76"><expr pos:start="531:71" pos:end="531:76"><name pos:start="531:71" pos:end="531:76">chkbuf</name></expr></argument>, <argument pos:start="531:79" pos:end="531:79"><expr pos:start="531:79" pos:end="531:79"><name pos:start="531:79" pos:end="531:79">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="533:17" pos:end="533:25"><expr pos:start="533:17" pos:end="533:24"><name pos:start="533:17" pos:end="533:19">ret</name> <operator pos:start="533:21" pos:end="533:21">=</operator> <operator pos:start="533:23" pos:end="533:23">-</operator><literal type="number" pos:start="533:24" pos:end="533:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="535:17" pos:end="535:25">goto <name pos:start="535:22" pos:end="535:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="539:13" pos:end="543:13"><if pos:start="539:13" pos:end="543:13">if <condition pos:start="539:16" pos:end="539:74">(<expr pos:start="539:17" pos:end="539:73"><call pos:start="539:17" pos:end="539:68"><name pos:start="539:17" pos:end="539:31">get_param_value</name><argument_list pos:start="539:32" pos:end="539:68">(<argument pos:start="539:33" pos:end="539:38"><expr pos:start="539:33" pos:end="539:38"><name pos:start="539:33" pos:end="539:38">ifname</name></expr></argument>, <argument pos:start="539:41" pos:end="539:54"><expr pos:start="539:41" pos:end="539:54"><sizeof pos:start="539:41" pos:end="539:54">sizeof<argument_list pos:start="539:47" pos:end="539:54">(<argument pos:start="539:48" pos:end="539:53"><expr pos:start="539:48" pos:end="539:53"><name pos:start="539:48" pos:end="539:53">ifname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="539:57" pos:end="539:64"><expr pos:start="539:57" pos:end="539:64"><literal type="string" pos:start="539:57" pos:end="539:64">"ifname"</literal></expr></argument>, <argument pos:start="539:67" pos:end="539:67"><expr pos:start="539:67" pos:end="539:67"><name pos:start="539:67" pos:end="539:67">p</name></expr></argument>)</argument_list></call> <operator pos:start="539:70" pos:end="539:71">&lt;=</operator> <literal type="number" pos:start="539:73" pos:end="539:73">0</literal></expr>)</condition> <block pos:start="539:76" pos:end="543:13">{<block_content pos:start="541:17" pos:end="541:33">

                <expr_stmt pos:start="541:17" pos:end="541:33"><expr pos:start="541:17" pos:end="541:32"><name pos:start="541:17" pos:end="541:25"><name pos:start="541:17" pos:end="541:22">ifname</name><index pos:start="541:23" pos:end="541:25">[<expr pos:start="541:24" pos:end="541:24"><literal type="number" pos:start="541:24" pos:end="541:24">0</literal></expr>]</index></name> <operator pos:start="541:27" pos:end="541:27">=</operator> <literal type="char" pos:start="541:29" pos:end="541:32">'\0'</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="545:13" pos:end="549:13"><if pos:start="545:13" pos:end="549:13">if <condition pos:start="545:16" pos:end="545:86">(<expr pos:start="545:17" pos:end="545:85"><call pos:start="545:17" pos:end="545:80"><name pos:start="545:17" pos:end="545:31">get_param_value</name><argument_list pos:start="545:32" pos:end="545:80">(<argument pos:start="545:33" pos:end="545:44"><expr pos:start="545:33" pos:end="545:44"><name pos:start="545:33" pos:end="545:44">setup_script</name></expr></argument>, <argument pos:start="545:47" pos:end="545:66"><expr pos:start="545:47" pos:end="545:66"><sizeof pos:start="545:47" pos:end="545:66">sizeof<argument_list pos:start="545:53" pos:end="545:66">(<argument pos:start="545:54" pos:end="545:65"><expr pos:start="545:54" pos:end="545:65"><name pos:start="545:54" pos:end="545:65">setup_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="545:69" pos:end="545:76"><expr pos:start="545:69" pos:end="545:76"><literal type="string" pos:start="545:69" pos:end="545:76">"script"</literal></expr></argument>, <argument pos:start="545:79" pos:end="545:79"><expr pos:start="545:79" pos:end="545:79"><name pos:start="545:79" pos:end="545:79">p</name></expr></argument>)</argument_list></call> <operator pos:start="545:82" pos:end="545:83">==</operator> <literal type="number" pos:start="545:85" pos:end="545:85">0</literal></expr>)</condition> <block pos:start="545:88" pos:end="549:13">{<block_content pos:start="547:17" pos:end="547:84">

                <expr_stmt pos:start="547:17" pos:end="547:84"><expr pos:start="547:17" pos:end="547:83"><call pos:start="547:17" pos:end="547:83"><name pos:start="547:17" pos:end="547:23">pstrcpy</name><argument_list pos:start="547:24" pos:end="547:83">(<argument pos:start="547:25" pos:end="547:36"><expr pos:start="547:25" pos:end="547:36"><name pos:start="547:25" pos:end="547:36">setup_script</name></expr></argument>, <argument pos:start="547:39" pos:end="547:58"><expr pos:start="547:39" pos:end="547:58"><sizeof pos:start="547:39" pos:end="547:58">sizeof<argument_list pos:start="547:45" pos:end="547:58">(<argument pos:start="547:46" pos:end="547:57"><expr pos:start="547:46" pos:end="547:57"><name pos:start="547:46" pos:end="547:57">setup_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="547:61" pos:end="547:82"><expr pos:start="547:61" pos:end="547:82"><name pos:start="547:61" pos:end="547:82">DEFAULT_NETWORK_SCRIPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="551:13" pos:end="555:13"><if pos:start="551:13" pos:end="555:13">if <condition pos:start="551:16" pos:end="551:88">(<expr pos:start="551:17" pos:end="551:87"><call pos:start="551:17" pos:end="551:82"><name pos:start="551:17" pos:end="551:31">get_param_value</name><argument_list pos:start="551:32" pos:end="551:82">(<argument pos:start="551:33" pos:end="551:43"><expr pos:start="551:33" pos:end="551:43"><name pos:start="551:33" pos:end="551:43">down_script</name></expr></argument>, <argument pos:start="551:46" pos:end="551:64"><expr pos:start="551:46" pos:end="551:64"><sizeof pos:start="551:46" pos:end="551:64">sizeof<argument_list pos:start="551:52" pos:end="551:64">(<argument pos:start="551:53" pos:end="551:63"><expr pos:start="551:53" pos:end="551:63"><name pos:start="551:53" pos:end="551:63">down_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="551:67" pos:end="551:78"><expr pos:start="551:67" pos:end="551:78"><literal type="string" pos:start="551:67" pos:end="551:78">"downscript"</literal></expr></argument>, <argument pos:start="551:81" pos:end="551:81"><expr pos:start="551:81" pos:end="551:81"><name pos:start="551:81" pos:end="551:81">p</name></expr></argument>)</argument_list></call> <operator pos:start="551:84" pos:end="551:85">==</operator> <literal type="number" pos:start="551:87" pos:end="551:87">0</literal></expr>)</condition> <block pos:start="551:90" pos:end="555:13">{<block_content pos:start="553:17" pos:end="553:87">

                <expr_stmt pos:start="553:17" pos:end="553:87"><expr pos:start="553:17" pos:end="553:86"><call pos:start="553:17" pos:end="553:86"><name pos:start="553:17" pos:end="553:23">pstrcpy</name><argument_list pos:start="553:24" pos:end="553:86">(<argument pos:start="553:25" pos:end="553:35"><expr pos:start="553:25" pos:end="553:35"><name pos:start="553:25" pos:end="553:35">down_script</name></expr></argument>, <argument pos:start="553:38" pos:end="553:56"><expr pos:start="553:38" pos:end="553:56"><sizeof pos:start="553:38" pos:end="553:56">sizeof<argument_list pos:start="553:44" pos:end="553:56">(<argument pos:start="553:45" pos:end="553:55"><expr pos:start="553:45" pos:end="553:55"><name pos:start="553:45" pos:end="553:55">down_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="553:59" pos:end="553:85"><expr pos:start="553:59" pos:end="553:85"><name pos:start="553:59" pos:end="553:85">DEFAULT_NETWORK_DOWN_SCRIPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="557:13" pos:end="557:84"><expr pos:start="557:13" pos:end="557:83"><name pos:start="557:13" pos:end="557:13">s</name> <operator pos:start="557:15" pos:end="557:15">=</operator> <call pos:start="557:17" pos:end="557:83"><name pos:start="557:17" pos:end="557:28">net_tap_init</name><argument_list pos:start="557:29" pos:end="557:83">(<argument pos:start="557:30" pos:end="557:33"><expr pos:start="557:30" pos:end="557:33"><name pos:start="557:30" pos:end="557:33">vlan</name></expr></argument>, <argument pos:start="557:36" pos:end="557:41"><expr pos:start="557:36" pos:end="557:41"><name pos:start="557:36" pos:end="557:41">device</name></expr></argument>, <argument pos:start="557:44" pos:end="557:47"><expr pos:start="557:44" pos:end="557:47"><name pos:start="557:44" pos:end="557:47">name</name></expr></argument>, <argument pos:start="557:50" pos:end="557:55"><expr pos:start="557:50" pos:end="557:55"><name pos:start="557:50" pos:end="557:55">ifname</name></expr></argument>, <argument pos:start="557:58" pos:end="557:69"><expr pos:start="557:58" pos:end="557:69"><name pos:start="557:58" pos:end="557:69">setup_script</name></expr></argument>, <argument pos:start="557:72" pos:end="557:82"><expr pos:start="557:72" pos:end="557:82"><name pos:start="557:72" pos:end="557:82">down_script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="561:9" pos:end="579:9"><if pos:start="561:9" pos:end="575:9">if <condition pos:start="561:12" pos:end="561:22">(<expr pos:start="561:13" pos:end="561:21"><name pos:start="561:13" pos:end="561:13">s</name> <operator pos:start="561:15" pos:end="561:16">!=</operator> <name pos:start="561:18" pos:end="561:21">NULL</name></expr>)</condition> <block pos:start="561:24" pos:end="575:9">{<block_content pos:start="563:13" pos:end="573:20">

            <decl_stmt pos:start="563:13" pos:end="563:42"><decl pos:start="563:13" pos:end="563:41"><type pos:start="563:13" pos:end="563:24"><specifier pos:start="563:13" pos:end="563:17">const</specifier> <name pos:start="563:19" pos:end="563:22">char</name> <modifier pos:start="563:24" pos:end="563:24">*</modifier></type><name pos:start="563:25" pos:end="563:34">sndbuf_str</name> <init pos:start="563:36" pos:end="563:41">= <expr pos:start="563:38" pos:end="563:41"><name pos:start="563:38" pos:end="563:41">NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="565:13" pos:end="569:13"><if pos:start="565:13" pos:end="569:13">if <condition pos:start="565:16" pos:end="565:63">(<expr pos:start="565:17" pos:end="565:62"><call pos:start="565:17" pos:end="565:62"><name pos:start="565:17" pos:end="565:31">get_param_value</name><argument_list pos:start="565:32" pos:end="565:62">(<argument pos:start="565:33" pos:end="565:35"><expr pos:start="565:33" pos:end="565:35"><name pos:start="565:33" pos:end="565:35">buf</name></expr></argument>, <argument pos:start="565:38" pos:end="565:48"><expr pos:start="565:38" pos:end="565:48"><sizeof pos:start="565:38" pos:end="565:48">sizeof<argument_list pos:start="565:44" pos:end="565:48">(<argument pos:start="565:45" pos:end="565:47"><expr pos:start="565:45" pos:end="565:47"><name pos:start="565:45" pos:end="565:47">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="565:51" pos:end="565:58"><expr pos:start="565:51" pos:end="565:58"><literal type="string" pos:start="565:51" pos:end="565:58">"sndbuf"</literal></expr></argument>, <argument pos:start="565:61" pos:end="565:61"><expr pos:start="565:61" pos:end="565:61"><name pos:start="565:61" pos:end="565:61">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="565:65" pos:end="569:13">{<block_content pos:start="567:17" pos:end="567:33">

                <expr_stmt pos:start="567:17" pos:end="567:33"><expr pos:start="567:17" pos:end="567:32"><name pos:start="567:17" pos:end="567:26">sndbuf_str</name> <operator pos:start="567:28" pos:end="567:28">=</operator> <name pos:start="567:30" pos:end="567:32">buf</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="571:13" pos:end="571:47"><expr pos:start="571:13" pos:end="571:46"><call pos:start="571:13" pos:end="571:46"><name pos:start="571:13" pos:end="571:26">tap_set_sndbuf</name><argument_list pos:start="571:27" pos:end="571:46">(<argument pos:start="571:28" pos:end="571:28"><expr pos:start="571:28" pos:end="571:28"><name pos:start="571:28" pos:end="571:28">s</name></expr></argument>, <argument pos:start="571:31" pos:end="571:40"><expr pos:start="571:31" pos:end="571:40"><name pos:start="571:31" pos:end="571:40">sndbuf_str</name></expr></argument>, <argument pos:start="571:43" pos:end="571:45"><expr pos:start="571:43" pos:end="571:45"><name pos:start="571:43" pos:end="571:45">mon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="573:13" pos:end="573:20"><expr pos:start="573:13" pos:end="573:19"><name pos:start="573:13" pos:end="573:15">ret</name> <operator pos:start="573:17" pos:end="573:17">=</operator> <literal type="number" pos:start="573:19" pos:end="573:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="575:11" pos:end="579:9">else <block pos:start="575:16" pos:end="579:9">{<block_content pos:start="577:13" pos:end="577:21">

            <expr_stmt pos:start="577:13" pos:end="577:21"><expr pos:start="577:13" pos:end="577:20"><name pos:start="577:13" pos:end="577:15">ret</name> <operator pos:start="577:17" pos:end="577:17">=</operator> <operator pos:start="577:19" pos:end="577:19">-</operator><literal type="number" pos:start="577:20" pos:end="577:20">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="581:7" pos:end="699:5">else

<cpp:endif pos:start="583:1" pos:end="583:6">#<cpp:directive pos:start="583:2" pos:end="583:6">endif</cpp:directive></cpp:endif>

    if <condition pos:start="585:8" pos:end="585:34">(<expr pos:start="585:9" pos:end="585:33"><operator pos:start="585:9" pos:end="585:9">!</operator><call pos:start="585:10" pos:end="585:33"><name pos:start="585:10" pos:end="585:15">strcmp</name><argument_list pos:start="585:16" pos:end="585:33">(<argument pos:start="585:17" pos:end="585:22"><expr pos:start="585:17" pos:end="585:22"><name pos:start="585:17" pos:end="585:22">device</name></expr></argument>, <argument pos:start="585:25" pos:end="585:32"><expr pos:start="585:25" pos:end="585:32"><literal type="string" pos:start="585:25" pos:end="585:32">"socket"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="585:36" pos:end="699:5">{<block_content pos:start="587:9" pos:end="697:29">

        <decl_stmt pos:start="587:9" pos:end="587:24"><decl pos:start="587:9" pos:end="587:23"><type pos:start="587:9" pos:end="587:12"><name pos:start="587:9" pos:end="587:12">char</name></type> <name pos:start="587:14" pos:end="587:23"><name pos:start="587:14" pos:end="587:19">chkbuf</name><index pos:start="587:20" pos:end="587:23">[<expr pos:start="587:21" pos:end="587:22"><literal type="number" pos:start="587:21" pos:end="587:22">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt pos:start="589:9" pos:end="695:9"><if pos:start="589:9" pos:end="627:9">if <condition pos:start="589:12" pos:end="589:59">(<expr pos:start="589:13" pos:end="589:58"><call pos:start="589:13" pos:end="589:54"><name pos:start="589:13" pos:end="589:27">get_param_value</name><argument_list pos:start="589:28" pos:end="589:54">(<argument pos:start="589:29" pos:end="589:31"><expr pos:start="589:29" pos:end="589:31"><name pos:start="589:29" pos:end="589:31">buf</name></expr></argument>, <argument pos:start="589:34" pos:end="589:44"><expr pos:start="589:34" pos:end="589:44"><sizeof pos:start="589:34" pos:end="589:44">sizeof<argument_list pos:start="589:40" pos:end="589:44">(<argument pos:start="589:41" pos:end="589:43"><expr pos:start="589:41" pos:end="589:43"><name pos:start="589:41" pos:end="589:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="589:47" pos:end="589:50"><expr pos:start="589:47" pos:end="589:50"><literal type="string" pos:start="589:47" pos:end="589:50">"fd"</literal></expr></argument>, <argument pos:start="589:53" pos:end="589:53"><expr pos:start="589:53" pos:end="589:53"><name pos:start="589:53" pos:end="589:53">p</name></expr></argument>)</argument_list></call> <operator pos:start="589:56" pos:end="589:56">&gt;</operator> <literal type="number" pos:start="589:58" pos:end="589:58">0</literal></expr>)</condition> <block pos:start="589:61" pos:end="627:9">{<block_content pos:start="591:13" pos:end="625:20">

            <decl_stmt pos:start="591:13" pos:end="595:14"><decl pos:start="591:13" pos:end="595:13"><type pos:start="591:13" pos:end="591:37"><specifier pos:start="591:13" pos:end="591:18">static</specifier> <specifier pos:start="591:20" pos:end="591:24">const</specifier> <name pos:start="591:26" pos:end="591:29">char</name> <modifier pos:start="591:31" pos:end="591:31">*</modifier> <specifier pos:start="591:33" pos:end="591:37">const</specifier></type> <name pos:start="591:39" pos:end="591:49"><name pos:start="591:39" pos:end="591:47">fd_params</name><index pos:start="591:48" pos:end="591:49">[]</index></name> <init pos:start="591:51" pos:end="595:13">= <expr pos:start="591:53" pos:end="595:13"><block pos:start="591:53" pos:end="595:13">{

                <expr pos:start="593:17" pos:end="593:22"><literal type="string" pos:start="593:17" pos:end="593:22">"vlan"</literal></expr>, <expr pos:start="593:25" pos:end="593:30"><literal type="string" pos:start="593:25" pos:end="593:30">"name"</literal></expr>, <expr pos:start="593:33" pos:end="593:36"><literal type="string" pos:start="593:33" pos:end="593:36">"fd"</literal></expr>, <expr pos:start="593:39" pos:end="593:42"><name pos:start="593:39" pos:end="593:42">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="597:13" pos:end="597:19"><decl pos:start="597:13" pos:end="597:18"><type pos:start="597:13" pos:end="597:15"><name pos:start="597:13" pos:end="597:15">int</name></type> <name pos:start="597:17" pos:end="597:18">fd</name></decl>;</decl_stmt>

            <expr_stmt pos:start="599:13" pos:end="599:21"><expr pos:start="599:13" pos:end="599:20"><name pos:start="599:13" pos:end="599:15">ret</name> <operator pos:start="599:17" pos:end="599:17">=</operator> <operator pos:start="599:19" pos:end="599:19">-</operator><literal type="number" pos:start="599:20" pos:end="599:20">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="601:13" pos:end="607:13"><if pos:start="601:13" pos:end="607:13">if <condition pos:start="601:16" pos:end="601:71">(<expr pos:start="601:17" pos:end="601:70"><call pos:start="601:17" pos:end="601:66"><name pos:start="601:17" pos:end="601:28">check_params</name><argument_list pos:start="601:29" pos:end="601:66">(<argument pos:start="601:30" pos:end="601:35"><expr pos:start="601:30" pos:end="601:35"><name pos:start="601:30" pos:end="601:35">chkbuf</name></expr></argument>, <argument pos:start="601:38" pos:end="601:51"><expr pos:start="601:38" pos:end="601:51"><sizeof pos:start="601:38" pos:end="601:51">sizeof<argument_list pos:start="601:44" pos:end="601:51">(<argument pos:start="601:45" pos:end="601:50"><expr pos:start="601:45" pos:end="601:50"><name pos:start="601:45" pos:end="601:50">chkbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="601:54" pos:end="601:62"><expr pos:start="601:54" pos:end="601:62"><name pos:start="601:54" pos:end="601:62">fd_params</name></expr></argument>, <argument pos:start="601:65" pos:end="601:65"><expr pos:start="601:65" pos:end="601:65"><name pos:start="601:65" pos:end="601:65">p</name></expr></argument>)</argument_list></call> <operator pos:start="601:68" pos:end="601:68">&lt;</operator> <literal type="number" pos:start="601:70" pos:end="601:70">0</literal></expr>)</condition> <block pos:start="601:73" pos:end="607:13">{<block_content pos:start="603:17" pos:end="605:25">

                <expr_stmt pos:start="603:17" pos:end="603:81"><expr pos:start="603:17" pos:end="603:80"><call pos:start="603:17" pos:end="603:80"><name pos:start="603:17" pos:end="603:28">config_error</name><argument_list pos:start="603:29" pos:end="603:80">(<argument pos:start="603:30" pos:end="603:32"><expr pos:start="603:30" pos:end="603:32"><name pos:start="603:30" pos:end="603:32">mon</name></expr></argument>, <argument pos:start="603:35" pos:end="603:68"><expr pos:start="603:35" pos:end="603:68"><literal type="string" pos:start="603:35" pos:end="603:68">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="603:71" pos:end="603:76"><expr pos:start="603:71" pos:end="603:76"><name pos:start="603:71" pos:end="603:76">chkbuf</name></expr></argument>, <argument pos:start="603:79" pos:end="603:79"><expr pos:start="603:79" pos:end="603:79"><name pos:start="603:79" pos:end="603:79">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="605:17" pos:end="605:25">goto <name pos:start="605:22" pos:end="605:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="609:13" pos:end="609:47"><expr pos:start="609:13" pos:end="609:46"><name pos:start="609:13" pos:end="609:14">fd</name> <operator pos:start="609:16" pos:end="609:16">=</operator> <call pos:start="609:18" pos:end="609:46"><name pos:start="609:18" pos:end="609:36">net_handle_fd_param</name><argument_list pos:start="609:37" pos:end="609:46">(<argument pos:start="609:38" pos:end="609:40"><expr pos:start="609:38" pos:end="609:40"><name pos:start="609:38" pos:end="609:40">mon</name></expr></argument>, <argument pos:start="609:43" pos:end="609:45"><expr pos:start="609:43" pos:end="609:45"><name pos:start="609:43" pos:end="609:45">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="611:13" pos:end="615:13"><if pos:start="611:13" pos:end="615:13">if <condition pos:start="611:16" pos:end="611:25">(<expr pos:start="611:17" pos:end="611:24"><name pos:start="611:17" pos:end="611:18">fd</name> <operator pos:start="611:20" pos:end="611:21">==</operator> <operator pos:start="611:23" pos:end="611:23">-</operator><literal type="number" pos:start="611:24" pos:end="611:24">1</literal></expr>)</condition> <block pos:start="611:27" pos:end="615:13">{<block_content pos:start="613:17" pos:end="613:25">

                <goto pos:start="613:17" pos:end="613:25">goto <name pos:start="613:22" pos:end="613:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="617:13" pos:end="623:13"><if pos:start="617:13" pos:end="623:13">if <condition pos:start="617:16" pos:end="617:63">(<expr pos:start="617:17" pos:end="617:62"><operator pos:start="617:17" pos:end="617:17">!</operator><call pos:start="617:18" pos:end="617:62"><name pos:start="617:18" pos:end="617:35">net_socket_fd_init</name><argument_list pos:start="617:36" pos:end="617:62">(<argument pos:start="617:37" pos:end="617:40"><expr pos:start="617:37" pos:end="617:40"><name pos:start="617:37" pos:end="617:40">vlan</name></expr></argument>, <argument pos:start="617:43" pos:end="617:48"><expr pos:start="617:43" pos:end="617:48"><name pos:start="617:43" pos:end="617:48">device</name></expr></argument>, <argument pos:start="617:51" pos:end="617:54"><expr pos:start="617:51" pos:end="617:54"><name pos:start="617:51" pos:end="617:54">name</name></expr></argument>, <argument pos:start="617:57" pos:end="617:58"><expr pos:start="617:57" pos:end="617:58"><name pos:start="617:57" pos:end="617:58">fd</name></expr></argument>, <argument pos:start="617:61" pos:end="617:61"><expr pos:start="617:61" pos:end="617:61"><literal type="number" pos:start="617:61" pos:end="617:61">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="617:65" pos:end="623:13">{<block_content pos:start="619:17" pos:end="621:25">

                <expr_stmt pos:start="619:17" pos:end="619:26"><expr pos:start="619:17" pos:end="619:25"><call pos:start="619:17" pos:end="619:25"><name pos:start="619:17" pos:end="619:21">close</name><argument_list pos:start="619:22" pos:end="619:25">(<argument pos:start="619:23" pos:end="619:24"><expr pos:start="619:23" pos:end="619:24"><name pos:start="619:23" pos:end="619:24">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="621:17" pos:end="621:25">goto <name pos:start="621:22" pos:end="621:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="625:13" pos:end="625:20"><expr pos:start="625:13" pos:end="625:19"><name pos:start="625:13" pos:end="625:15">ret</name> <operator pos:start="625:17" pos:end="625:17">=</operator> <literal type="number" pos:start="625:19" pos:end="625:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="627:11" pos:end="647:9">else if <condition pos:start="627:19" pos:end="627:70">(<expr pos:start="627:20" pos:end="627:69"><call pos:start="627:20" pos:end="627:65"><name pos:start="627:20" pos:end="627:34">get_param_value</name><argument_list pos:start="627:35" pos:end="627:65">(<argument pos:start="627:36" pos:end="627:38"><expr pos:start="627:36" pos:end="627:38"><name pos:start="627:36" pos:end="627:38">buf</name></expr></argument>, <argument pos:start="627:41" pos:end="627:51"><expr pos:start="627:41" pos:end="627:51"><sizeof pos:start="627:41" pos:end="627:51">sizeof<argument_list pos:start="627:47" pos:end="627:51">(<argument pos:start="627:48" pos:end="627:50"><expr pos:start="627:48" pos:end="627:50"><name pos:start="627:48" pos:end="627:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="627:54" pos:end="627:61"><expr pos:start="627:54" pos:end="627:61"><literal type="string" pos:start="627:54" pos:end="627:61">"listen"</literal></expr></argument>, <argument pos:start="627:64" pos:end="627:64"><expr pos:start="627:64" pos:end="627:64"><name pos:start="627:64" pos:end="627:64">p</name></expr></argument>)</argument_list></call> <operator pos:start="627:67" pos:end="627:67">&gt;</operator> <literal type="number" pos:start="627:69" pos:end="627:69">0</literal></expr>)</condition> <block pos:start="627:72" pos:end="647:9">{<block_content pos:start="629:13" pos:end="645:66">

            <decl_stmt pos:start="629:13" pos:end="633:14"><decl pos:start="629:13" pos:end="633:13"><type pos:start="629:13" pos:end="629:37"><specifier pos:start="629:13" pos:end="629:18">static</specifier> <specifier pos:start="629:20" pos:end="629:24">const</specifier> <name pos:start="629:26" pos:end="629:29">char</name> <modifier pos:start="629:31" pos:end="629:31">*</modifier> <specifier pos:start="629:33" pos:end="629:37">const</specifier></type> <name pos:start="629:39" pos:end="629:53"><name pos:start="629:39" pos:end="629:51">listen_params</name><index pos:start="629:52" pos:end="629:53">[]</index></name> <init pos:start="629:55" pos:end="633:13">= <expr pos:start="629:57" pos:end="633:13"><block pos:start="629:57" pos:end="633:13">{

                <expr pos:start="631:17" pos:end="631:22"><literal type="string" pos:start="631:17" pos:end="631:22">"vlan"</literal></expr>, <expr pos:start="631:25" pos:end="631:30"><literal type="string" pos:start="631:25" pos:end="631:30">"name"</literal></expr>, <expr pos:start="631:33" pos:end="631:40"><literal type="string" pos:start="631:33" pos:end="631:40">"listen"</literal></expr>, <expr pos:start="631:43" pos:end="631:46"><name pos:start="631:43" pos:end="631:46">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="635:13" pos:end="643:13"><if pos:start="635:13" pos:end="643:13">if <condition pos:start="635:16" pos:end="635:75">(<expr pos:start="635:17" pos:end="635:74"><call pos:start="635:17" pos:end="635:70"><name pos:start="635:17" pos:end="635:28">check_params</name><argument_list pos:start="635:29" pos:end="635:70">(<argument pos:start="635:30" pos:end="635:35"><expr pos:start="635:30" pos:end="635:35"><name pos:start="635:30" pos:end="635:35">chkbuf</name></expr></argument>, <argument pos:start="635:38" pos:end="635:51"><expr pos:start="635:38" pos:end="635:51"><sizeof pos:start="635:38" pos:end="635:51">sizeof<argument_list pos:start="635:44" pos:end="635:51">(<argument pos:start="635:45" pos:end="635:50"><expr pos:start="635:45" pos:end="635:50"><name pos:start="635:45" pos:end="635:50">chkbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="635:54" pos:end="635:66"><expr pos:start="635:54" pos:end="635:66"><name pos:start="635:54" pos:end="635:66">listen_params</name></expr></argument>, <argument pos:start="635:69" pos:end="635:69"><expr pos:start="635:69" pos:end="635:69"><name pos:start="635:69" pos:end="635:69">p</name></expr></argument>)</argument_list></call> <operator pos:start="635:72" pos:end="635:72">&lt;</operator> <literal type="number" pos:start="635:74" pos:end="635:74">0</literal></expr>)</condition> <block pos:start="635:77" pos:end="643:13">{<block_content pos:start="637:17" pos:end="641:25">

                <expr_stmt pos:start="637:17" pos:end="637:81"><expr pos:start="637:17" pos:end="637:80"><call pos:start="637:17" pos:end="637:80"><name pos:start="637:17" pos:end="637:28">config_error</name><argument_list pos:start="637:29" pos:end="637:80">(<argument pos:start="637:30" pos:end="637:32"><expr pos:start="637:30" pos:end="637:32"><name pos:start="637:30" pos:end="637:32">mon</name></expr></argument>, <argument pos:start="637:35" pos:end="637:68"><expr pos:start="637:35" pos:end="637:68"><literal type="string" pos:start="637:35" pos:end="637:68">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="637:71" pos:end="637:76"><expr pos:start="637:71" pos:end="637:76"><name pos:start="637:71" pos:end="637:76">chkbuf</name></expr></argument>, <argument pos:start="637:79" pos:end="637:79"><expr pos:start="637:79" pos:end="637:79"><name pos:start="637:79" pos:end="637:79">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="639:17" pos:end="639:25"><expr pos:start="639:17" pos:end="639:24"><name pos:start="639:17" pos:end="639:19">ret</name> <operator pos:start="639:21" pos:end="639:21">=</operator> <operator pos:start="639:23" pos:end="639:23">-</operator><literal type="number" pos:start="639:24" pos:end="639:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="641:17" pos:end="641:25">goto <name pos:start="641:22" pos:end="641:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="645:13" pos:end="645:66"><expr pos:start="645:13" pos:end="645:65"><name pos:start="645:13" pos:end="645:15">ret</name> <operator pos:start="645:17" pos:end="645:17">=</operator> <call pos:start="645:19" pos:end="645:65"><name pos:start="645:19" pos:end="645:40">net_socket_listen_init</name><argument_list pos:start="645:41" pos:end="645:65">(<argument pos:start="645:42" pos:end="645:45"><expr pos:start="645:42" pos:end="645:45"><name pos:start="645:42" pos:end="645:45">vlan</name></expr></argument>, <argument pos:start="645:48" pos:end="645:53"><expr pos:start="645:48" pos:end="645:53"><name pos:start="645:48" pos:end="645:53">device</name></expr></argument>, <argument pos:start="645:56" pos:end="645:59"><expr pos:start="645:56" pos:end="645:59"><name pos:start="645:56" pos:end="645:59">name</name></expr></argument>, <argument pos:start="645:62" pos:end="645:64"><expr pos:start="645:62" pos:end="645:64"><name pos:start="645:62" pos:end="645:64">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="647:11" pos:end="667:9">else if <condition pos:start="647:19" pos:end="647:71">(<expr pos:start="647:20" pos:end="647:70"><call pos:start="647:20" pos:end="647:66"><name pos:start="647:20" pos:end="647:34">get_param_value</name><argument_list pos:start="647:35" pos:end="647:66">(<argument pos:start="647:36" pos:end="647:38"><expr pos:start="647:36" pos:end="647:38"><name pos:start="647:36" pos:end="647:38">buf</name></expr></argument>, <argument pos:start="647:41" pos:end="647:51"><expr pos:start="647:41" pos:end="647:51"><sizeof pos:start="647:41" pos:end="647:51">sizeof<argument_list pos:start="647:47" pos:end="647:51">(<argument pos:start="647:48" pos:end="647:50"><expr pos:start="647:48" pos:end="647:50"><name pos:start="647:48" pos:end="647:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="647:54" pos:end="647:62"><expr pos:start="647:54" pos:end="647:62"><literal type="string" pos:start="647:54" pos:end="647:62">"connect"</literal></expr></argument>, <argument pos:start="647:65" pos:end="647:65"><expr pos:start="647:65" pos:end="647:65"><name pos:start="647:65" pos:end="647:65">p</name></expr></argument>)</argument_list></call> <operator pos:start="647:68" pos:end="647:68">&gt;</operator> <literal type="number" pos:start="647:70" pos:end="647:70">0</literal></expr>)</condition> <block pos:start="647:73" pos:end="667:9">{<block_content pos:start="649:13" pos:end="665:67">

            <decl_stmt pos:start="649:13" pos:end="653:14"><decl pos:start="649:13" pos:end="653:13"><type pos:start="649:13" pos:end="649:37"><specifier pos:start="649:13" pos:end="649:18">static</specifier> <specifier pos:start="649:20" pos:end="649:24">const</specifier> <name pos:start="649:26" pos:end="649:29">char</name> <modifier pos:start="649:31" pos:end="649:31">*</modifier> <specifier pos:start="649:33" pos:end="649:37">const</specifier></type> <name pos:start="649:39" pos:end="649:54"><name pos:start="649:39" pos:end="649:52">connect_params</name><index pos:start="649:53" pos:end="649:54">[]</index></name> <init pos:start="649:56" pos:end="653:13">= <expr pos:start="649:58" pos:end="653:13"><block pos:start="649:58" pos:end="653:13">{

                <expr pos:start="651:17" pos:end="651:22"><literal type="string" pos:start="651:17" pos:end="651:22">"vlan"</literal></expr>, <expr pos:start="651:25" pos:end="651:30"><literal type="string" pos:start="651:25" pos:end="651:30">"name"</literal></expr>, <expr pos:start="651:33" pos:end="651:41"><literal type="string" pos:start="651:33" pos:end="651:41">"connect"</literal></expr>, <expr pos:start="651:44" pos:end="651:47"><name pos:start="651:44" pos:end="651:47">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="655:13" pos:end="663:13"><if pos:start="655:13" pos:end="663:13">if <condition pos:start="655:16" pos:end="655:76">(<expr pos:start="655:17" pos:end="655:75"><call pos:start="655:17" pos:end="655:71"><name pos:start="655:17" pos:end="655:28">check_params</name><argument_list pos:start="655:29" pos:end="655:71">(<argument pos:start="655:30" pos:end="655:35"><expr pos:start="655:30" pos:end="655:35"><name pos:start="655:30" pos:end="655:35">chkbuf</name></expr></argument>, <argument pos:start="655:38" pos:end="655:51"><expr pos:start="655:38" pos:end="655:51"><sizeof pos:start="655:38" pos:end="655:51">sizeof<argument_list pos:start="655:44" pos:end="655:51">(<argument pos:start="655:45" pos:end="655:50"><expr pos:start="655:45" pos:end="655:50"><name pos:start="655:45" pos:end="655:50">chkbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="655:54" pos:end="655:67"><expr pos:start="655:54" pos:end="655:67"><name pos:start="655:54" pos:end="655:67">connect_params</name></expr></argument>, <argument pos:start="655:70" pos:end="655:70"><expr pos:start="655:70" pos:end="655:70"><name pos:start="655:70" pos:end="655:70">p</name></expr></argument>)</argument_list></call> <operator pos:start="655:73" pos:end="655:73">&lt;</operator> <literal type="number" pos:start="655:75" pos:end="655:75">0</literal></expr>)</condition> <block pos:start="655:78" pos:end="663:13">{<block_content pos:start="657:17" pos:end="661:25">

                <expr_stmt pos:start="657:17" pos:end="657:81"><expr pos:start="657:17" pos:end="657:80"><call pos:start="657:17" pos:end="657:80"><name pos:start="657:17" pos:end="657:28">config_error</name><argument_list pos:start="657:29" pos:end="657:80">(<argument pos:start="657:30" pos:end="657:32"><expr pos:start="657:30" pos:end="657:32"><name pos:start="657:30" pos:end="657:32">mon</name></expr></argument>, <argument pos:start="657:35" pos:end="657:68"><expr pos:start="657:35" pos:end="657:68"><literal type="string" pos:start="657:35" pos:end="657:68">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="657:71" pos:end="657:76"><expr pos:start="657:71" pos:end="657:76"><name pos:start="657:71" pos:end="657:76">chkbuf</name></expr></argument>, <argument pos:start="657:79" pos:end="657:79"><expr pos:start="657:79" pos:end="657:79"><name pos:start="657:79" pos:end="657:79">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="659:17" pos:end="659:25"><expr pos:start="659:17" pos:end="659:24"><name pos:start="659:17" pos:end="659:19">ret</name> <operator pos:start="659:21" pos:end="659:21">=</operator> <operator pos:start="659:23" pos:end="659:23">-</operator><literal type="number" pos:start="659:24" pos:end="659:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="661:17" pos:end="661:25">goto <name pos:start="661:22" pos:end="661:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="665:13" pos:end="665:67"><expr pos:start="665:13" pos:end="665:66"><name pos:start="665:13" pos:end="665:15">ret</name> <operator pos:start="665:17" pos:end="665:17">=</operator> <call pos:start="665:19" pos:end="665:66"><name pos:start="665:19" pos:end="665:41">net_socket_connect_init</name><argument_list pos:start="665:42" pos:end="665:66">(<argument pos:start="665:43" pos:end="665:46"><expr pos:start="665:43" pos:end="665:46"><name pos:start="665:43" pos:end="665:46">vlan</name></expr></argument>, <argument pos:start="665:49" pos:end="665:54"><expr pos:start="665:49" pos:end="665:54"><name pos:start="665:49" pos:end="665:54">device</name></expr></argument>, <argument pos:start="665:57" pos:end="665:60"><expr pos:start="665:57" pos:end="665:60"><name pos:start="665:57" pos:end="665:60">name</name></expr></argument>, <argument pos:start="665:63" pos:end="665:65"><expr pos:start="665:63" pos:end="665:65"><name pos:start="665:63" pos:end="665:65">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="667:11" pos:end="687:9">else if <condition pos:start="667:19" pos:end="667:69">(<expr pos:start="667:20" pos:end="667:68"><call pos:start="667:20" pos:end="667:64"><name pos:start="667:20" pos:end="667:34">get_param_value</name><argument_list pos:start="667:35" pos:end="667:64">(<argument pos:start="667:36" pos:end="667:38"><expr pos:start="667:36" pos:end="667:38"><name pos:start="667:36" pos:end="667:38">buf</name></expr></argument>, <argument pos:start="667:41" pos:end="667:51"><expr pos:start="667:41" pos:end="667:51"><sizeof pos:start="667:41" pos:end="667:51">sizeof<argument_list pos:start="667:47" pos:end="667:51">(<argument pos:start="667:48" pos:end="667:50"><expr pos:start="667:48" pos:end="667:50"><name pos:start="667:48" pos:end="667:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="667:54" pos:end="667:60"><expr pos:start="667:54" pos:end="667:60"><literal type="string" pos:start="667:54" pos:end="667:60">"mcast"</literal></expr></argument>, <argument pos:start="667:63" pos:end="667:63"><expr pos:start="667:63" pos:end="667:63"><name pos:start="667:63" pos:end="667:63">p</name></expr></argument>)</argument_list></call> <operator pos:start="667:66" pos:end="667:66">&gt;</operator> <literal type="number" pos:start="667:68" pos:end="667:68">0</literal></expr>)</condition> <block pos:start="667:71" pos:end="687:9">{<block_content pos:start="669:13" pos:end="685:65">

            <decl_stmt pos:start="669:13" pos:end="673:14"><decl pos:start="669:13" pos:end="673:13"><type pos:start="669:13" pos:end="669:37"><specifier pos:start="669:13" pos:end="669:18">static</specifier> <specifier pos:start="669:20" pos:end="669:24">const</specifier> <name pos:start="669:26" pos:end="669:29">char</name> <modifier pos:start="669:31" pos:end="669:31">*</modifier> <specifier pos:start="669:33" pos:end="669:37">const</specifier></type> <name pos:start="669:39" pos:end="669:52"><name pos:start="669:39" pos:end="669:50">mcast_params</name><index pos:start="669:51" pos:end="669:52">[]</index></name> <init pos:start="669:54" pos:end="673:13">= <expr pos:start="669:56" pos:end="673:13"><block pos:start="669:56" pos:end="673:13">{

                <expr pos:start="671:17" pos:end="671:22"><literal type="string" pos:start="671:17" pos:end="671:22">"vlan"</literal></expr>, <expr pos:start="671:25" pos:end="671:30"><literal type="string" pos:start="671:25" pos:end="671:30">"name"</literal></expr>, <expr pos:start="671:33" pos:end="671:39"><literal type="string" pos:start="671:33" pos:end="671:39">"mcast"</literal></expr>, <expr pos:start="671:42" pos:end="671:45"><name pos:start="671:42" pos:end="671:45">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="675:13" pos:end="683:13"><if pos:start="675:13" pos:end="683:13">if <condition pos:start="675:16" pos:end="675:74">(<expr pos:start="675:17" pos:end="675:73"><call pos:start="675:17" pos:end="675:69"><name pos:start="675:17" pos:end="675:28">check_params</name><argument_list pos:start="675:29" pos:end="675:69">(<argument pos:start="675:30" pos:end="675:35"><expr pos:start="675:30" pos:end="675:35"><name pos:start="675:30" pos:end="675:35">chkbuf</name></expr></argument>, <argument pos:start="675:38" pos:end="675:51"><expr pos:start="675:38" pos:end="675:51"><sizeof pos:start="675:38" pos:end="675:51">sizeof<argument_list pos:start="675:44" pos:end="675:51">(<argument pos:start="675:45" pos:end="675:50"><expr pos:start="675:45" pos:end="675:50"><name pos:start="675:45" pos:end="675:50">chkbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="675:54" pos:end="675:65"><expr pos:start="675:54" pos:end="675:65"><name pos:start="675:54" pos:end="675:65">mcast_params</name></expr></argument>, <argument pos:start="675:68" pos:end="675:68"><expr pos:start="675:68" pos:end="675:68"><name pos:start="675:68" pos:end="675:68">p</name></expr></argument>)</argument_list></call> <operator pos:start="675:71" pos:end="675:71">&lt;</operator> <literal type="number" pos:start="675:73" pos:end="675:73">0</literal></expr>)</condition> <block pos:start="675:76" pos:end="683:13">{<block_content pos:start="677:17" pos:end="681:25">

                <expr_stmt pos:start="677:17" pos:end="677:81"><expr pos:start="677:17" pos:end="677:80"><call pos:start="677:17" pos:end="677:80"><name pos:start="677:17" pos:end="677:28">config_error</name><argument_list pos:start="677:29" pos:end="677:80">(<argument pos:start="677:30" pos:end="677:32"><expr pos:start="677:30" pos:end="677:32"><name pos:start="677:30" pos:end="677:32">mon</name></expr></argument>, <argument pos:start="677:35" pos:end="677:68"><expr pos:start="677:35" pos:end="677:68"><literal type="string" pos:start="677:35" pos:end="677:68">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="677:71" pos:end="677:76"><expr pos:start="677:71" pos:end="677:76"><name pos:start="677:71" pos:end="677:76">chkbuf</name></expr></argument>, <argument pos:start="677:79" pos:end="677:79"><expr pos:start="677:79" pos:end="677:79"><name pos:start="677:79" pos:end="677:79">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="679:17" pos:end="679:25"><expr pos:start="679:17" pos:end="679:24"><name pos:start="679:17" pos:end="679:19">ret</name> <operator pos:start="679:21" pos:end="679:21">=</operator> <operator pos:start="679:23" pos:end="679:23">-</operator><literal type="number" pos:start="679:24" pos:end="679:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="681:17" pos:end="681:25">goto <name pos:start="681:22" pos:end="681:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="685:13" pos:end="685:65"><expr pos:start="685:13" pos:end="685:64"><name pos:start="685:13" pos:end="685:15">ret</name> <operator pos:start="685:17" pos:end="685:17">=</operator> <call pos:start="685:19" pos:end="685:64"><name pos:start="685:19" pos:end="685:39">net_socket_mcast_init</name><argument_list pos:start="685:40" pos:end="685:64">(<argument pos:start="685:41" pos:end="685:44"><expr pos:start="685:41" pos:end="685:44"><name pos:start="685:41" pos:end="685:44">vlan</name></expr></argument>, <argument pos:start="685:47" pos:end="685:52"><expr pos:start="685:47" pos:end="685:52"><name pos:start="685:47" pos:end="685:52">device</name></expr></argument>, <argument pos:start="685:55" pos:end="685:58"><expr pos:start="685:55" pos:end="685:58"><name pos:start="685:55" pos:end="685:58">name</name></expr></argument>, <argument pos:start="685:61" pos:end="685:63"><expr pos:start="685:61" pos:end="685:63"><name pos:start="685:61" pos:end="685:63">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="687:11" pos:end="695:9">else <block pos:start="687:16" pos:end="695:9">{<block_content pos:start="689:13" pos:end="693:21">

            <expr_stmt pos:start="689:13" pos:end="689:65"><expr pos:start="689:13" pos:end="689:64"><call pos:start="689:13" pos:end="689:64"><name pos:start="689:13" pos:end="689:24">config_error</name><argument_list pos:start="689:25" pos:end="689:64">(<argument pos:start="689:26" pos:end="689:28"><expr pos:start="689:26" pos:end="689:28"><name pos:start="689:26" pos:end="689:28">mon</name></expr></argument>, <argument pos:start="689:31" pos:end="689:60"><expr pos:start="689:31" pos:end="689:60"><literal type="string" pos:start="689:31" pos:end="689:60">"Unknown socket options: %s\n"</literal></expr></argument>, <argument pos:start="689:63" pos:end="689:63"><expr pos:start="689:63" pos:end="689:63"><name pos:start="689:63" pos:end="689:63">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="691:13" pos:end="691:21"><expr pos:start="691:13" pos:end="691:20"><name pos:start="691:13" pos:end="691:15">ret</name> <operator pos:start="691:17" pos:end="691:17">=</operator> <operator pos:start="691:19" pos:end="691:19">-</operator><literal type="number" pos:start="691:20" pos:end="691:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="693:13" pos:end="693:21">goto <name pos:start="693:18" pos:end="693:20">out</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="697:9" pos:end="697:29"><expr pos:start="697:9" pos:end="697:28"><name pos:start="697:9" pos:end="697:26"><name pos:start="697:9" pos:end="697:12">vlan</name><operator pos:start="697:13" pos:end="697:14">-&gt;</operator><name pos:start="697:15" pos:end="697:26">nb_host_devs</name></name><operator pos:start="697:27" pos:end="697:28">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="699:7" pos:end="763:5">else

<cpp:ifdef pos:start="701:1" pos:end="701:17">#<cpp:directive pos:start="701:2" pos:end="701:6">ifdef</cpp:directive> <name pos:start="701:8" pos:end="701:17">CONFIG_VDE</name></cpp:ifdef>

    if <condition pos:start="703:8" pos:end="703:31">(<expr pos:start="703:9" pos:end="703:30"><operator pos:start="703:9" pos:end="703:9">!</operator><call pos:start="703:10" pos:end="703:30"><name pos:start="703:10" pos:end="703:15">strcmp</name><argument_list pos:start="703:16" pos:end="703:30">(<argument pos:start="703:17" pos:end="703:22"><expr pos:start="703:17" pos:end="703:22"><name pos:start="703:17" pos:end="703:22">device</name></expr></argument>, <argument pos:start="703:25" pos:end="703:29"><expr pos:start="703:25" pos:end="703:29"><literal type="string" pos:start="703:25" pos:end="703:29">"vde"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="703:33" pos:end="763:5">{<block_content pos:start="705:9" pos:end="761:88">

        <decl_stmt pos:start="705:9" pos:end="709:10"><decl pos:start="705:9" pos:end="709:9"><type pos:start="705:9" pos:end="705:33"><specifier pos:start="705:9" pos:end="705:14">static</specifier> <specifier pos:start="705:16" pos:end="705:20">const</specifier> <name pos:start="705:22" pos:end="705:25">char</name> <modifier pos:start="705:27" pos:end="705:27">*</modifier> <specifier pos:start="705:29" pos:end="705:33">const</specifier></type> <name pos:start="705:35" pos:end="705:46"><name pos:start="705:35" pos:end="705:44">vde_params</name><index pos:start="705:45" pos:end="705:46">[]</index></name> <init pos:start="705:48" pos:end="709:9">= <expr pos:start="705:50" pos:end="709:9"><block pos:start="705:50" pos:end="709:9">{

            <expr pos:start="707:13" pos:end="707:18"><literal type="string" pos:start="707:13" pos:end="707:18">"vlan"</literal></expr>, <expr pos:start="707:21" pos:end="707:26"><literal type="string" pos:start="707:21" pos:end="707:26">"name"</literal></expr>, <expr pos:start="707:29" pos:end="707:34"><literal type="string" pos:start="707:29" pos:end="707:34">"sock"</literal></expr>, <expr pos:start="707:37" pos:end="707:42"><literal type="string" pos:start="707:37" pos:end="707:42">"port"</literal></expr>, <expr pos:start="707:45" pos:end="707:51"><literal type="string" pos:start="707:45" pos:end="707:51">"group"</literal></expr>, <expr pos:start="707:54" pos:end="707:59"><literal type="string" pos:start="707:54" pos:end="707:59">"mode"</literal></expr>, <expr pos:start="707:62" pos:end="707:65"><name pos:start="707:62" pos:end="707:65">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="711:9" pos:end="711:44"><decl pos:start="711:9" pos:end="711:27"><type pos:start="711:9" pos:end="711:12"><name pos:start="711:9" pos:end="711:12">char</name></type> <name pos:start="711:14" pos:end="711:27"><name pos:start="711:14" pos:end="711:21">vde_sock</name><index pos:start="711:22" pos:end="711:27">[<expr pos:start="711:23" pos:end="711:26"><literal type="number" pos:start="711:23" pos:end="711:26">1024</literal></expr>]</index></name></decl>, <decl pos:start="711:30" pos:end="711:43"><type ref="prev" pos:start="711:9" pos:end="711:12"/><name pos:start="711:30" pos:end="711:43"><name pos:start="711:30" pos:end="711:38">vde_group</name><index pos:start="711:39" pos:end="711:43">[<expr pos:start="711:40" pos:end="711:42"><literal type="number" pos:start="711:40" pos:end="711:42">512</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt pos:start="713:9" pos:end="713:31"><decl pos:start="713:9" pos:end="713:20"><type pos:start="713:9" pos:end="713:11"><name pos:start="713:9" pos:end="713:11">int</name></type> <name pos:start="713:13" pos:end="713:20">vde_port</name></decl>, <decl pos:start="713:23" pos:end="713:30"><type ref="prev" pos:start="713:9" pos:end="713:11"/><name pos:start="713:23" pos:end="713:30">vde_mode</name></decl>;</decl_stmt>



        <if_stmt pos:start="717:9" pos:end="725:9"><if pos:start="717:9" pos:end="725:9">if <condition pos:start="717:12" pos:end="717:62">(<expr pos:start="717:13" pos:end="717:61"><call pos:start="717:13" pos:end="717:57"><name pos:start="717:13" pos:end="717:24">check_params</name><argument_list pos:start="717:25" pos:end="717:57">(<argument pos:start="717:26" pos:end="717:28"><expr pos:start="717:26" pos:end="717:28"><name pos:start="717:26" pos:end="717:28">buf</name></expr></argument>, <argument pos:start="717:31" pos:end="717:41"><expr pos:start="717:31" pos:end="717:41"><sizeof pos:start="717:31" pos:end="717:41">sizeof<argument_list pos:start="717:37" pos:end="717:41">(<argument pos:start="717:38" pos:end="717:40"><expr pos:start="717:38" pos:end="717:40"><name pos:start="717:38" pos:end="717:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="717:44" pos:end="717:53"><expr pos:start="717:44" pos:end="717:53"><name pos:start="717:44" pos:end="717:53">vde_params</name></expr></argument>, <argument pos:start="717:56" pos:end="717:56"><expr pos:start="717:56" pos:end="717:56"><name pos:start="717:56" pos:end="717:56">p</name></expr></argument>)</argument_list></call> <operator pos:start="717:59" pos:end="717:59">&lt;</operator> <literal type="number" pos:start="717:61" pos:end="717:61">0</literal></expr>)</condition> <block pos:start="717:64" pos:end="725:9">{<block_content pos:start="719:13" pos:end="723:21">

            <expr_stmt pos:start="719:13" pos:end="719:74"><expr pos:start="719:13" pos:end="719:73"><call pos:start="719:13" pos:end="719:73"><name pos:start="719:13" pos:end="719:24">config_error</name><argument_list pos:start="719:25" pos:end="719:73">(<argument pos:start="719:26" pos:end="719:28"><expr pos:start="719:26" pos:end="719:28"><name pos:start="719:26" pos:end="719:28">mon</name></expr></argument>, <argument pos:start="719:31" pos:end="719:64"><expr pos:start="719:31" pos:end="719:64"><literal type="string" pos:start="719:31" pos:end="719:64">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="719:67" pos:end="719:69"><expr pos:start="719:67" pos:end="719:69"><name pos:start="719:67" pos:end="719:69">buf</name></expr></argument>, <argument pos:start="719:72" pos:end="719:72"><expr pos:start="719:72" pos:end="719:72"><name pos:start="719:72" pos:end="719:72">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="721:13" pos:end="721:21"><expr pos:start="721:13" pos:end="721:20"><name pos:start="721:13" pos:end="721:15">ret</name> <operator pos:start="721:17" pos:end="721:17">=</operator> <operator pos:start="721:19" pos:end="721:19">-</operator><literal type="number" pos:start="721:20" pos:end="721:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="723:13" pos:end="723:21">goto <name pos:start="723:18" pos:end="723:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="727:9" pos:end="727:29"><expr pos:start="727:9" pos:end="727:28"><name pos:start="727:9" pos:end="727:26"><name pos:start="727:9" pos:end="727:12">vlan</name><operator pos:start="727:13" pos:end="727:14">-&gt;</operator><name pos:start="727:15" pos:end="727:26">nb_host_devs</name></name><operator pos:start="727:27" pos:end="727:28">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="729:9" pos:end="733:9"><if pos:start="729:9" pos:end="733:9">if <condition pos:start="729:12" pos:end="729:72">(<expr pos:start="729:13" pos:end="729:71"><call pos:start="729:13" pos:end="729:66"><name pos:start="729:13" pos:end="729:27">get_param_value</name><argument_list pos:start="729:28" pos:end="729:66">(<argument pos:start="729:29" pos:end="729:36"><expr pos:start="729:29" pos:end="729:36"><name pos:start="729:29" pos:end="729:36">vde_sock</name></expr></argument>, <argument pos:start="729:39" pos:end="729:54"><expr pos:start="729:39" pos:end="729:54"><sizeof pos:start="729:39" pos:end="729:54">sizeof<argument_list pos:start="729:45" pos:end="729:54">(<argument pos:start="729:46" pos:end="729:53"><expr pos:start="729:46" pos:end="729:53"><name pos:start="729:46" pos:end="729:53">vde_sock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="729:57" pos:end="729:62"><expr pos:start="729:57" pos:end="729:62"><literal type="string" pos:start="729:57" pos:end="729:62">"sock"</literal></expr></argument>, <argument pos:start="729:65" pos:end="729:65"><expr pos:start="729:65" pos:end="729:65"><name pos:start="729:65" pos:end="729:65">p</name></expr></argument>)</argument_list></call> <operator pos:start="729:68" pos:end="729:69">&lt;=</operator> <literal type="number" pos:start="729:71" pos:end="729:71">0</literal></expr>)</condition> <block pos:start="729:74" pos:end="733:9">{<block_content pos:start="731:13" pos:end="731:31">

	    <expr_stmt pos:start="731:13" pos:end="731:31"><expr pos:start="731:13" pos:end="731:30"><name pos:start="731:13" pos:end="731:23"><name pos:start="731:13" pos:end="731:20">vde_sock</name><index pos:start="731:21" pos:end="731:23">[<expr pos:start="731:22" pos:end="731:22"><literal type="number" pos:start="731:22" pos:end="731:22">0</literal></expr>]</index></name> <operator pos:start="731:25" pos:end="731:25">=</operator> <literal type="char" pos:start="731:27" pos:end="731:30">'\0'</literal></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt pos:start="735:9" pos:end="743:9"><if pos:start="735:9" pos:end="739:9">if <condition pos:start="735:12" pos:end="735:61">(<expr pos:start="735:13" pos:end="735:60"><call pos:start="735:13" pos:end="735:56"><name pos:start="735:13" pos:end="735:27">get_param_value</name><argument_list pos:start="735:28" pos:end="735:56">(<argument pos:start="735:29" pos:end="735:31"><expr pos:start="735:29" pos:end="735:31"><name pos:start="735:29" pos:end="735:31">buf</name></expr></argument>, <argument pos:start="735:34" pos:end="735:44"><expr pos:start="735:34" pos:end="735:44"><sizeof pos:start="735:34" pos:end="735:44">sizeof<argument_list pos:start="735:40" pos:end="735:44">(<argument pos:start="735:41" pos:end="735:43"><expr pos:start="735:41" pos:end="735:43"><name pos:start="735:41" pos:end="735:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="735:47" pos:end="735:52"><expr pos:start="735:47" pos:end="735:52"><literal type="string" pos:start="735:47" pos:end="735:52">"port"</literal></expr></argument>, <argument pos:start="735:55" pos:end="735:55"><expr pos:start="735:55" pos:end="735:55"><name pos:start="735:55" pos:end="735:55">p</name></expr></argument>)</argument_list></call> <operator pos:start="735:58" pos:end="735:58">&gt;</operator> <literal type="number" pos:start="735:60" pos:end="735:60">0</literal></expr>)</condition> <block pos:start="735:63" pos:end="739:9">{<block_content pos:start="737:13" pos:end="737:45">

	    <expr_stmt pos:start="737:13" pos:end="737:45"><expr pos:start="737:13" pos:end="737:44"><name pos:start="737:13" pos:end="737:20">vde_port</name> <operator pos:start="737:22" pos:end="737:22">=</operator> <call pos:start="737:24" pos:end="737:44"><name pos:start="737:24" pos:end="737:29">strtol</name><argument_list pos:start="737:30" pos:end="737:44">(<argument pos:start="737:31" pos:end="737:33"><expr pos:start="737:31" pos:end="737:33"><name pos:start="737:31" pos:end="737:33">buf</name></expr></argument>, <argument pos:start="737:36" pos:end="737:39"><expr pos:start="737:36" pos:end="737:39"><name pos:start="737:36" pos:end="737:39">NULL</name></expr></argument>, <argument pos:start="737:42" pos:end="737:43"><expr pos:start="737:42" pos:end="737:43"><literal type="number" pos:start="737:42" pos:end="737:43">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="739:11" pos:end="743:9">else <block pos:start="739:16" pos:end="743:9">{<block_content pos:start="741:13" pos:end="741:25">

	    <expr_stmt pos:start="741:13" pos:end="741:25"><expr pos:start="741:13" pos:end="741:24"><name pos:start="741:13" pos:end="741:20">vde_port</name> <operator pos:start="741:22" pos:end="741:22">=</operator> <literal type="number" pos:start="741:24" pos:end="741:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

	<if_stmt pos:start="745:9" pos:end="749:9"><if pos:start="745:9" pos:end="749:9">if <condition pos:start="745:12" pos:end="745:75">(<expr pos:start="745:13" pos:end="745:74"><call pos:start="745:13" pos:end="745:69"><name pos:start="745:13" pos:end="745:27">get_param_value</name><argument_list pos:start="745:28" pos:end="745:69">(<argument pos:start="745:29" pos:end="745:37"><expr pos:start="745:29" pos:end="745:37"><name pos:start="745:29" pos:end="745:37">vde_group</name></expr></argument>, <argument pos:start="745:40" pos:end="745:56"><expr pos:start="745:40" pos:end="745:56"><sizeof pos:start="745:40" pos:end="745:56">sizeof<argument_list pos:start="745:46" pos:end="745:56">(<argument pos:start="745:47" pos:end="745:55"><expr pos:start="745:47" pos:end="745:55"><name pos:start="745:47" pos:end="745:55">vde_group</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="745:59" pos:end="745:65"><expr pos:start="745:59" pos:end="745:65"><literal type="string" pos:start="745:59" pos:end="745:65">"group"</literal></expr></argument>, <argument pos:start="745:68" pos:end="745:68"><expr pos:start="745:68" pos:end="745:68"><name pos:start="745:68" pos:end="745:68">p</name></expr></argument>)</argument_list></call> <operator pos:start="745:71" pos:end="745:72">&lt;=</operator> <literal type="number" pos:start="745:74" pos:end="745:74">0</literal></expr>)</condition> <block pos:start="745:77" pos:end="749:9">{<block_content pos:start="747:13" pos:end="747:32">

	    <expr_stmt pos:start="747:13" pos:end="747:32"><expr pos:start="747:13" pos:end="747:31"><name pos:start="747:13" pos:end="747:24"><name pos:start="747:13" pos:end="747:21">vde_group</name><index pos:start="747:22" pos:end="747:24">[<expr pos:start="747:23" pos:end="747:23"><literal type="number" pos:start="747:23" pos:end="747:23">0</literal></expr>]</index></name> <operator pos:start="747:26" pos:end="747:26">=</operator> <literal type="char" pos:start="747:28" pos:end="747:31">'\0'</literal></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt pos:start="751:9" pos:end="759:9"><if pos:start="751:9" pos:end="755:9">if <condition pos:start="751:12" pos:end="751:61">(<expr pos:start="751:13" pos:end="751:60"><call pos:start="751:13" pos:end="751:56"><name pos:start="751:13" pos:end="751:27">get_param_value</name><argument_list pos:start="751:28" pos:end="751:56">(<argument pos:start="751:29" pos:end="751:31"><expr pos:start="751:29" pos:end="751:31"><name pos:start="751:29" pos:end="751:31">buf</name></expr></argument>, <argument pos:start="751:34" pos:end="751:44"><expr pos:start="751:34" pos:end="751:44"><sizeof pos:start="751:34" pos:end="751:44">sizeof<argument_list pos:start="751:40" pos:end="751:44">(<argument pos:start="751:41" pos:end="751:43"><expr pos:start="751:41" pos:end="751:43"><name pos:start="751:41" pos:end="751:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="751:47" pos:end="751:52"><expr pos:start="751:47" pos:end="751:52"><literal type="string" pos:start="751:47" pos:end="751:52">"mode"</literal></expr></argument>, <argument pos:start="751:55" pos:end="751:55"><expr pos:start="751:55" pos:end="751:55"><name pos:start="751:55" pos:end="751:55">p</name></expr></argument>)</argument_list></call> <operator pos:start="751:58" pos:end="751:58">&gt;</operator> <literal type="number" pos:start="751:60" pos:end="751:60">0</literal></expr>)</condition> <block pos:start="751:63" pos:end="755:9">{<block_content pos:start="753:13" pos:end="753:44">

	    <expr_stmt pos:start="753:13" pos:end="753:44"><expr pos:start="753:13" pos:end="753:43"><name pos:start="753:13" pos:end="753:20">vde_mode</name> <operator pos:start="753:22" pos:end="753:22">=</operator> <call pos:start="753:24" pos:end="753:43"><name pos:start="753:24" pos:end="753:29">strtol</name><argument_list pos:start="753:30" pos:end="753:43">(<argument pos:start="753:31" pos:end="753:33"><expr pos:start="753:31" pos:end="753:33"><name pos:start="753:31" pos:end="753:33">buf</name></expr></argument>, <argument pos:start="753:36" pos:end="753:39"><expr pos:start="753:36" pos:end="753:39"><name pos:start="753:36" pos:end="753:39">NULL</name></expr></argument>, <argument pos:start="753:42" pos:end="753:42"><expr pos:start="753:42" pos:end="753:42"><literal type="number" pos:start="753:42" pos:end="753:42">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="755:11" pos:end="759:9">else <block pos:start="755:16" pos:end="759:9">{<block_content pos:start="757:13" pos:end="757:28">

	    <expr_stmt pos:start="757:13" pos:end="757:28"><expr pos:start="757:13" pos:end="757:27"><name pos:start="757:13" pos:end="757:20">vde_mode</name> <operator pos:start="757:22" pos:end="757:22">=</operator> <literal type="number" pos:start="757:24" pos:end="757:27">0700</literal></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

	<expr_stmt pos:start="761:9" pos:end="761:88"><expr pos:start="761:9" pos:end="761:87"><name pos:start="761:9" pos:end="761:11">ret</name> <operator pos:start="761:13" pos:end="761:13">=</operator> <call pos:start="761:15" pos:end="761:87"><name pos:start="761:15" pos:end="761:26">net_vde_init</name><argument_list pos:start="761:27" pos:end="761:87">(<argument pos:start="761:28" pos:end="761:31"><expr pos:start="761:28" pos:end="761:31"><name pos:start="761:28" pos:end="761:31">vlan</name></expr></argument>, <argument pos:start="761:34" pos:end="761:39"><expr pos:start="761:34" pos:end="761:39"><name pos:start="761:34" pos:end="761:39">device</name></expr></argument>, <argument pos:start="761:42" pos:end="761:45"><expr pos:start="761:42" pos:end="761:45"><name pos:start="761:42" pos:end="761:45">name</name></expr></argument>, <argument pos:start="761:48" pos:end="761:55"><expr pos:start="761:48" pos:end="761:55"><name pos:start="761:48" pos:end="761:55">vde_sock</name></expr></argument>, <argument pos:start="761:58" pos:end="761:65"><expr pos:start="761:58" pos:end="761:65"><name pos:start="761:58" pos:end="761:65">vde_port</name></expr></argument>, <argument pos:start="761:68" pos:end="761:76"><expr pos:start="761:68" pos:end="761:76"><name pos:start="761:68" pos:end="761:76">vde_group</name></expr></argument>, <argument pos:start="761:79" pos:end="761:86"><expr pos:start="761:79" pos:end="761:86"><name pos:start="761:79" pos:end="761:86">vde_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="763:7" pos:end="787:5">else

<cpp:endif pos:start="765:1" pos:end="765:6">#<cpp:directive pos:start="765:2" pos:end="765:6">endif</cpp:directive></cpp:endif>

    if <condition pos:start="767:8" pos:end="767:32">(<expr pos:start="767:9" pos:end="767:31"><operator pos:start="767:9" pos:end="767:9">!</operator><call pos:start="767:10" pos:end="767:31"><name pos:start="767:10" pos:end="767:15">strcmp</name><argument_list pos:start="767:16" pos:end="767:31">(<argument pos:start="767:17" pos:end="767:22"><expr pos:start="767:17" pos:end="767:22"><name pos:start="767:17" pos:end="767:22">device</name></expr></argument>, <argument pos:start="767:25" pos:end="767:30"><expr pos:start="767:25" pos:end="767:30"><literal type="string" pos:start="767:25" pos:end="767:30">"dump"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="767:34" pos:end="787:5">{<block_content pos:start="769:9" pos:end="785:63">

        <decl_stmt pos:start="769:9" pos:end="769:24"><decl pos:start="769:9" pos:end="769:23"><type pos:start="769:9" pos:end="769:11"><name pos:start="769:9" pos:end="769:11">int</name></type> <name pos:start="769:13" pos:end="769:15">len</name> <init pos:start="769:17" pos:end="769:23">= <expr pos:start="769:19" pos:end="769:23"><literal type="number" pos:start="769:19" pos:end="769:23">65536</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="773:9" pos:end="777:9"><if pos:start="773:9" pos:end="777:9">if <condition pos:start="773:12" pos:end="773:60">(<expr pos:start="773:13" pos:end="773:59"><call pos:start="773:13" pos:end="773:55"><name pos:start="773:13" pos:end="773:27">get_param_value</name><argument_list pos:start="773:28" pos:end="773:55">(<argument pos:start="773:29" pos:end="773:31"><expr pos:start="773:29" pos:end="773:31"><name pos:start="773:29" pos:end="773:31">buf</name></expr></argument>, <argument pos:start="773:34" pos:end="773:44"><expr pos:start="773:34" pos:end="773:44"><sizeof pos:start="773:34" pos:end="773:44">sizeof<argument_list pos:start="773:40" pos:end="773:44">(<argument pos:start="773:41" pos:end="773:43"><expr pos:start="773:41" pos:end="773:43"><name pos:start="773:41" pos:end="773:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="773:47" pos:end="773:51"><expr pos:start="773:47" pos:end="773:51"><literal type="string" pos:start="773:47" pos:end="773:51">"len"</literal></expr></argument>, <argument pos:start="773:54" pos:end="773:54"><expr pos:start="773:54" pos:end="773:54"><name pos:start="773:54" pos:end="773:54">p</name></expr></argument>)</argument_list></call> <operator pos:start="773:57" pos:end="773:57">&gt;</operator> <literal type="number" pos:start="773:59" pos:end="773:59">0</literal></expr>)</condition> <block pos:start="773:62" pos:end="777:9">{<block_content pos:start="775:13" pos:end="775:39">

            <expr_stmt pos:start="775:13" pos:end="775:39"><expr pos:start="775:13" pos:end="775:38"><name pos:start="775:13" pos:end="775:15">len</name> <operator pos:start="775:17" pos:end="775:17">=</operator> <call pos:start="775:19" pos:end="775:38"><name pos:start="775:19" pos:end="775:24">strtol</name><argument_list pos:start="775:25" pos:end="775:38">(<argument pos:start="775:26" pos:end="775:28"><expr pos:start="775:26" pos:end="775:28"><name pos:start="775:26" pos:end="775:28">buf</name></expr></argument>, <argument pos:start="775:31" pos:end="775:34"><expr pos:start="775:31" pos:end="775:34"><name pos:start="775:31" pos:end="775:34">NULL</name></expr></argument>, <argument pos:start="775:37" pos:end="775:37"><expr pos:start="775:37" pos:end="775:37"><literal type="number" pos:start="775:37" pos:end="775:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="779:9" pos:end="783:9"><if pos:start="779:9" pos:end="783:9">if <condition pos:start="779:12" pos:end="779:58">(<expr pos:start="779:13" pos:end="779:57"><operator pos:start="779:13" pos:end="779:13">!</operator><call pos:start="779:14" pos:end="779:57"><name pos:start="779:14" pos:end="779:28">get_param_value</name><argument_list pos:start="779:29" pos:end="779:57">(<argument pos:start="779:30" pos:end="779:32"><expr pos:start="779:30" pos:end="779:32"><name pos:start="779:30" pos:end="779:32">buf</name></expr></argument>, <argument pos:start="779:35" pos:end="779:45"><expr pos:start="779:35" pos:end="779:45"><sizeof pos:start="779:35" pos:end="779:45">sizeof<argument_list pos:start="779:41" pos:end="779:45">(<argument pos:start="779:42" pos:end="779:44"><expr pos:start="779:42" pos:end="779:44"><name pos:start="779:42" pos:end="779:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="779:48" pos:end="779:53"><expr pos:start="779:48" pos:end="779:53"><literal type="string" pos:start="779:48" pos:end="779:53">"file"</literal></expr></argument>, <argument pos:start="779:56" pos:end="779:56"><expr pos:start="779:56" pos:end="779:56"><name pos:start="779:56" pos:end="779:56">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="779:60" pos:end="783:9">{<block_content pos:start="781:13" pos:end="781:68">

            <expr_stmt pos:start="781:13" pos:end="781:68"><expr pos:start="781:13" pos:end="781:67"><call pos:start="781:13" pos:end="781:67"><name pos:start="781:13" pos:end="781:20">snprintf</name><argument_list pos:start="781:21" pos:end="781:67">(<argument pos:start="781:22" pos:end="781:24"><expr pos:start="781:22" pos:end="781:24"><name pos:start="781:22" pos:end="781:24">buf</name></expr></argument>, <argument pos:start="781:27" pos:end="781:37"><expr pos:start="781:27" pos:end="781:37"><sizeof pos:start="781:27" pos:end="781:37">sizeof<argument_list pos:start="781:33" pos:end="781:37">(<argument pos:start="781:34" pos:end="781:36"><expr pos:start="781:34" pos:end="781:36"><name pos:start="781:34" pos:end="781:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="781:40" pos:end="781:57"><expr pos:start="781:40" pos:end="781:57"><literal type="string" pos:start="781:40" pos:end="781:57">"qemu-vlan%d.pcap"</literal></expr></argument>, <argument pos:start="781:60" pos:end="781:66"><expr pos:start="781:60" pos:end="781:66"><name pos:start="781:60" pos:end="781:66">vlan_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="785:9" pos:end="785:63"><expr pos:start="785:9" pos:end="785:62"><name pos:start="785:9" pos:end="785:11">ret</name> <operator pos:start="785:13" pos:end="785:13">=</operator> <call pos:start="785:15" pos:end="785:62"><name pos:start="785:15" pos:end="785:27">net_dump_init</name><argument_list pos:start="785:28" pos:end="785:62">(<argument pos:start="785:29" pos:end="785:31"><expr pos:start="785:29" pos:end="785:31"><name pos:start="785:29" pos:end="785:31">mon</name></expr></argument>, <argument pos:start="785:34" pos:end="785:37"><expr pos:start="785:34" pos:end="785:37"><name pos:start="785:34" pos:end="785:37">vlan</name></expr></argument>, <argument pos:start="785:40" pos:end="785:45"><expr pos:start="785:40" pos:end="785:45"><name pos:start="785:40" pos:end="785:45">device</name></expr></argument>, <argument pos:start="785:48" pos:end="785:51"><expr pos:start="785:48" pos:end="785:51"><name pos:start="785:48" pos:end="785:51">name</name></expr></argument>, <argument pos:start="785:54" pos:end="785:56"><expr pos:start="785:54" pos:end="785:56"><name pos:start="785:54" pos:end="785:56">buf</name></expr></argument>, <argument pos:start="785:59" pos:end="785:61"><expr pos:start="785:59" pos:end="785:61"><name pos:start="785:59" pos:end="785:61">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="787:7" pos:end="795:5">else <block pos:start="787:12" pos:end="795:5">{<block_content pos:start="789:9" pos:end="793:17">

        <expr_stmt pos:start="789:9" pos:end="789:66"><expr pos:start="789:9" pos:end="789:65"><call pos:start="789:9" pos:end="789:65"><name pos:start="789:9" pos:end="789:20">config_error</name><argument_list pos:start="789:21" pos:end="789:65">(<argument pos:start="789:22" pos:end="789:24"><expr pos:start="789:22" pos:end="789:24"><name pos:start="789:22" pos:end="789:24">mon</name></expr></argument>, <argument pos:start="789:27" pos:end="789:56"><expr pos:start="789:27" pos:end="789:56"><literal type="string" pos:start="789:27" pos:end="789:56">"Unknown network device: %s\n"</literal></expr></argument>, <argument pos:start="789:59" pos:end="789:64"><expr pos:start="789:59" pos:end="789:64"><name pos:start="789:59" pos:end="789:64">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="791:9" pos:end="791:17"><expr pos:start="791:9" pos:end="791:16"><name pos:start="791:9" pos:end="791:11">ret</name> <operator pos:start="791:13" pos:end="791:13">=</operator> <operator pos:start="791:15" pos:end="791:15">-</operator><literal type="number" pos:start="791:16" pos:end="791:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="793:9" pos:end="793:17">goto <name pos:start="793:14" pos:end="793:16">out</name>;</goto>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="797:5" pos:end="801:5"><if pos:start="797:5" pos:end="801:5">if <condition pos:start="797:8" pos:end="797:16">(<expr pos:start="797:9" pos:end="797:15"><name pos:start="797:9" pos:end="797:11">ret</name> <operator pos:start="797:13" pos:end="797:13">&lt;</operator> <literal type="number" pos:start="797:15" pos:end="797:15">0</literal></expr>)</condition> <block pos:start="797:18" pos:end="801:5">{<block_content pos:start="799:9" pos:end="799:72">

        <expr_stmt pos:start="799:9" pos:end="799:72"><expr pos:start="799:9" pos:end="799:71"><call pos:start="799:9" pos:end="799:71"><name pos:start="799:9" pos:end="799:20">config_error</name><argument_list pos:start="799:21" pos:end="799:71">(<argument pos:start="799:22" pos:end="799:24"><expr pos:start="799:22" pos:end="799:24"><name pos:start="799:22" pos:end="799:24">mon</name></expr></argument>, <argument pos:start="799:27" pos:end="799:62"><expr pos:start="799:27" pos:end="799:62"><literal type="string" pos:start="799:27" pos:end="799:62">"Could not initialize device '%s'\n"</literal></expr></argument>, <argument pos:start="799:65" pos:end="799:70"><expr pos:start="799:65" pos:end="799:70"><name pos:start="799:65" pos:end="799:70">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="803:1" pos:end="803:4"><name pos:start="803:1" pos:end="803:3">out</name>:</label>

    <expr_stmt pos:start="805:5" pos:end="805:20"><expr pos:start="805:5" pos:end="805:19"><call pos:start="805:5" pos:end="805:19"><name pos:start="805:5" pos:end="805:13">qemu_free</name><argument_list pos:start="805:14" pos:end="805:19">(<argument pos:start="805:15" pos:end="805:18"><expr pos:start="805:15" pos:end="805:18"><name pos:start="805:15" pos:end="805:18">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="807:5" pos:end="807:15">return <expr pos:start="807:12" pos:end="807:14"><name pos:start="807:12" pos:end="807:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
