<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24563.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:6">double</name></type> <name pos:start="1:8" pos:end="1:26">parse_number_or_die</name><parameter_list pos:start="1:27" pos:end="1:101">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:46">context</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:58">char</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:66">numstr</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:76"><decl pos:start="1:69" pos:end="1:76"><type pos:start="1:69" pos:end="1:76"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:76">type</name></decl></parameter>, <parameter pos:start="1:79" pos:end="1:88"><decl pos:start="1:79" pos:end="1:88"><type pos:start="1:79" pos:end="1:88"><name pos:start="1:79" pos:end="1:84">double</name></type> <name pos:start="1:86" pos:end="1:88">min</name></decl></parameter>, <parameter pos:start="1:91" pos:end="1:100"><decl pos:start="1:91" pos:end="1:100"><type pos:start="1:91" pos:end="1:100"><name pos:start="1:91" pos:end="1:96">double</name></type> <name pos:start="1:98" pos:end="1:100">max</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="33:1">{<block_content pos:start="5:5" pos:end="31:12">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:14">tail</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:21">error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">double</name></type> <name pos:start="9:12" pos:end="9:12">d</name> <init pos:start="9:14" pos:end="9:39">= <expr pos:start="9:16" pos:end="9:39"><call pos:start="9:16" pos:end="9:39"><name pos:start="9:16" pos:end="9:24">av_strtod</name><argument_list pos:start="9:25" pos:end="9:39">(<argument pos:start="9:26" pos:end="9:31"><expr pos:start="9:26" pos:end="9:31"><name pos:start="9:26" pos:end="9:31">numstr</name></expr></argument>, <argument pos:start="9:34" pos:end="9:38"><expr pos:start="9:34" pos:end="9:38"><operator pos:start="9:34" pos:end="9:34">&amp;</operator><name pos:start="9:35" pos:end="9:38">tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="11:5" pos:end="27:17"><if pos:start="11:5" pos:end="13:56">if <condition pos:start="11:8" pos:end="11:14">(<expr pos:start="11:9" pos:end="11:13"><operator pos:start="11:9" pos:end="11:9">*</operator><name pos:start="11:10" pos:end="11:13">tail</name></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:56"><block_content pos:start="13:9" pos:end="13:56">

        <expr_stmt pos:start="13:9" pos:end="13:56"><expr pos:start="13:9" pos:end="13:55"><name pos:start="13:9" pos:end="13:13">error</name><operator pos:start="13:14" pos:end="13:14">=</operator> <literal type="string" pos:start="13:16" pos:end="13:55">"Expected number for %s but found: %s\n"</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="15:5" pos:end="17:71">else if <condition pos:start="15:13" pos:end="15:32">(<expr pos:start="15:14" pos:end="15:31"><name pos:start="15:14" pos:end="15:27"><name pos:start="15:14" pos:end="15:14">d</name> <argument_list type="generic" pos:start="15:16" pos:end="15:27">&lt; <argument pos:start="15:18" pos:end="15:25"><expr pos:start="15:18" pos:end="15:25"><name pos:start="15:18" pos:end="15:20">min</name> <operator pos:start="15:22" pos:end="15:23">||</operator> <name pos:start="15:25" pos:end="15:25">d</name></expr></argument> &gt;</argument_list></name> <name pos:start="15:29" pos:end="15:31">max</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:71"><block_content pos:start="17:9" pos:end="17:71">

        <expr_stmt pos:start="17:9" pos:end="17:71"><expr pos:start="17:9" pos:end="17:70"><name pos:start="17:9" pos:end="17:13">error</name><operator pos:start="17:14" pos:end="17:14">=</operator> <literal type="string" pos:start="17:16" pos:end="17:70">"The value for %s was %s which is not within %f - %f\n"</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="19:5" pos:end="21:54">else if<condition pos:start="19:12" pos:end="19:49">(<expr pos:start="19:13" pos:end="19:48"><name pos:start="19:13" pos:end="19:16">type</name> <operator pos:start="19:18" pos:end="19:19">==</operator> <name pos:start="19:21" pos:end="19:29">OPT_INT64</name> <operator pos:start="19:31" pos:end="19:32">&amp;&amp;</operator> <operator pos:start="19:34" pos:end="19:34">(</operator><name pos:start="19:35" pos:end="19:41">int64_t</name><operator pos:start="19:42" pos:end="19:42">)</operator><name pos:start="19:43" pos:end="19:43">d</name> <operator pos:start="19:45" pos:end="19:46">!=</operator> <name pos:start="19:48" pos:end="19:48">d</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:54"><block_content pos:start="21:9" pos:end="21:54">

        <expr_stmt pos:start="21:9" pos:end="21:54"><expr pos:start="21:9" pos:end="21:53"><name pos:start="21:9" pos:end="21:13">error</name><operator pos:start="21:14" pos:end="21:14">=</operator> <literal type="string" pos:start="21:16" pos:end="21:53">"Expected int64 for %s but found %s\n"</literal></expr>;</expr_stmt></block_content></block></if>



    <else pos:start="25:5" pos:end="27:17">else<block type="pseudo" pos:start="27:9" pos:end="27:17"><block_content pos:start="27:9" pos:end="27:17">

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><name pos:start="27:16" pos:end="27:16">d</name></expr>;</return></block_content></block></else></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:54"><expr pos:start="29:5" pos:end="29:53"><call pos:start="29:5" pos:end="29:53"><name pos:start="29:5" pos:end="29:11">fprintf</name><argument_list pos:start="29:12" pos:end="29:53">(<argument pos:start="29:13" pos:end="29:18"><expr pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:18">stderr</name></expr></argument>, <argument pos:start="29:21" pos:end="29:25"><expr pos:start="29:21" pos:end="29:25"><name pos:start="29:21" pos:end="29:25">error</name></expr></argument>, <argument pos:start="29:28" pos:end="29:34"><expr pos:start="29:28" pos:end="29:34"><name pos:start="29:28" pos:end="29:34">context</name></expr></argument>, <argument pos:start="29:37" pos:end="29:42"><expr pos:start="29:37" pos:end="29:42"><name pos:start="29:37" pos:end="29:42">numstr</name></expr></argument>, <argument pos:start="29:45" pos:end="29:47"><expr pos:start="29:45" pos:end="29:47"><name pos:start="29:45" pos:end="29:47">min</name></expr></argument>, <argument pos:start="29:50" pos:end="29:52"><expr pos:start="29:50" pos:end="29:52"><name pos:start="29:50" pos:end="29:52">max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:12"><expr pos:start="31:5" pos:end="31:11"><call pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:8">exit</name><argument_list pos:start="31:9" pos:end="31:11">(<argument pos:start="31:10" pos:end="31:10"><expr pos:start="31:10" pos:end="31:10"><literal type="number" pos:start="31:10" pos:end="31:10">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
