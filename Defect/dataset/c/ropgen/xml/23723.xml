<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23723.c" pos:tabs="8"><function pos:start="1:1" pos:end="268:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">s390_init</name><parameter_list pos:start="1:22" pos:end="11:44">(<parameter pos:start="1:23" pos:end="1:41"><decl pos:start="1:23" pos:end="1:41"><type pos:start="1:23" pos:end="1:41"><name pos:start="1:23" pos:end="1:32">ram_addr_t</name></type> <name pos:start="1:34" pos:end="1:41">ram_size</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:45"><decl pos:start="3:23" pos:end="3:45"><type pos:start="3:23" pos:end="3:45"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:32">char</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:45">boot_device</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:49"><decl pos:start="5:23" pos:end="5:49"><type pos:start="5:23" pos:end="5:49"><specifier pos:start="5:23" pos:end="5:27">const</specifier> <name pos:start="5:29" pos:end="5:32">char</name> <modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:49">kernel_filename</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:48"><decl pos:start="7:23" pos:end="7:48"><type pos:start="7:23" pos:end="7:48"><specifier pos:start="7:23" pos:end="7:27">const</specifier> <name pos:start="7:29" pos:end="7:32">char</name> <modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:48">kernel_cmdline</name></decl></parameter>,

                      <parameter pos:start="9:23" pos:end="9:49"><decl pos:start="9:23" pos:end="9:49"><type pos:start="9:23" pos:end="9:49"><specifier pos:start="9:23" pos:end="9:27">const</specifier> <name pos:start="9:29" pos:end="9:32">char</name> <modifier pos:start="9:34" pos:end="9:34">*</modifier></type><name pos:start="9:35" pos:end="9:49">initrd_filename</name></decl></parameter>,

                      <parameter pos:start="11:23" pos:end="11:43"><decl pos:start="11:23" pos:end="11:43"><type pos:start="11:23" pos:end="11:43"><specifier pos:start="11:23" pos:end="11:27">const</specifier> <name pos:start="11:29" pos:end="11:32">char</name> <modifier pos:start="11:34" pos:end="11:34">*</modifier></type><name pos:start="11:35" pos:end="11:43">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="268:1">{<block_content pos:start="15:5" pos:end="266:5">

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">CPUState</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">env</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:14">ram_addr_t</name></type> <name pos:start="17:16" pos:end="17:23">ram_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:14">ram_addr_t</name></type> <name pos:start="19:16" pos:end="19:26">kernel_size</name> <init pos:start="19:28" pos:end="19:30">= <expr pos:start="19:30" pos:end="19:30"><literal type="number" pos:start="19:30" pos:end="19:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:14">ram_addr_t</name></type> <name pos:start="21:16" pos:end="21:28">initrd_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:31"><decl pos:start="23:5" pos:end="23:30"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">ram_addr_t</name></type> <name pos:start="23:16" pos:end="23:26">initrd_size</name> <init pos:start="23:28" pos:end="23:30">= <expr pos:start="23:30" pos:end="23:30"><literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:41">/* XXX we only work on KVM for now */</comment>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:23">(<expr pos:start="33:9" pos:end="33:22"><operator pos:start="33:9" pos:end="33:9">!</operator><call pos:start="33:10" pos:end="33:22"><name pos:start="33:10" pos:end="33:20">kvm_enabled</name><argument_list pos:start="33:21" pos:end="33:22">()</argument_list></call></expr>)</condition> <block pos:start="33:25" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:16">

        <expr_stmt pos:start="35:9" pos:end="35:73"><expr pos:start="35:9" pos:end="35:72"><call pos:start="35:9" pos:end="35:72"><name pos:start="35:9" pos:end="35:15">fprintf</name><argument_list pos:start="35:16" pos:end="35:72">(<argument pos:start="35:17" pos:end="35:22"><expr pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:22">stderr</name></expr></argument>, <argument pos:start="35:25" pos:end="35:71"><expr pos:start="35:25" pos:end="35:71"><literal type="string" pos:start="35:25" pos:end="35:71">"The S390 target only works with KVM enabled\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:16"><expr pos:start="37:9" pos:end="37:15"><call pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:12">exit</name><argument_list pos:start="37:13" pos:end="37:15">(<argument pos:start="37:14" pos:end="37:14"><expr pos:start="37:14" pos:end="37:14"><literal type="number" pos:start="37:14" pos:end="37:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:19">/* get a BUS */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:47"><expr pos:start="45:5" pos:end="45:46"><name pos:start="45:5" pos:end="45:12">s390_bus</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:46"><name pos:start="45:16" pos:end="45:35">s390_virtio_bus_init</name><argument_list pos:start="45:36" pos:end="45:46">(<argument pos:start="45:37" pos:end="45:45"><expr pos:start="45:37" pos:end="45:45"><operator pos:start="45:37" pos:end="45:37">&amp;</operator><name pos:start="45:38" pos:end="45:45">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:58"><expr pos:start="51:5" pos:end="51:57"><name pos:start="51:5" pos:end="51:12">ram_addr</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <call pos:start="51:16" pos:end="51:57"><name pos:start="51:16" pos:end="51:29">qemu_ram_alloc</name><argument_list pos:start="51:30" pos:end="51:57">(<argument pos:start="51:31" pos:end="51:34"><expr pos:start="51:31" pos:end="51:34"><name pos:start="51:31" pos:end="51:34">NULL</name></expr></argument>, <argument pos:start="51:37" pos:end="51:46"><expr pos:start="51:37" pos:end="51:46"><literal type="string" pos:start="51:37" pos:end="51:46">"s390.ram"</literal></expr></argument>, <argument pos:start="51:49" pos:end="51:56"><expr pos:start="51:49" pos:end="51:56"><name pos:start="51:49" pos:end="51:56">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:56"><expr pos:start="53:5" pos:end="53:55"><call pos:start="53:5" pos:end="53:55"><name pos:start="53:5" pos:end="53:32">cpu_register_physical_memory</name><argument_list pos:start="53:33" pos:end="53:55">(<argument pos:start="53:34" pos:end="53:34"><expr pos:start="53:34" pos:end="53:34"><literal type="number" pos:start="53:34" pos:end="53:34">0</literal></expr></argument>, <argument pos:start="53:37" pos:end="53:44"><expr pos:start="53:37" pos:end="53:44"><name pos:start="53:37" pos:end="53:44">ram_size</name></expr></argument>, <argument pos:start="53:47" pos:end="53:54"><expr pos:start="53:47" pos:end="53:54"><name pos:start="53:47" pos:end="53:54">ram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:19">/* init CPUs */</comment>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:26">(<expr pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:17">cpu_model</name> <operator pos:start="59:19" pos:end="59:20">==</operator> <name pos:start="59:22" pos:end="59:25">NULL</name></expr>)</condition> <block pos:start="59:28" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:27">

        <expr_stmt pos:start="61:9" pos:end="61:27"><expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:17">cpu_model</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <literal type="string" pos:start="61:21" pos:end="61:26">"host"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:60"><expr pos:start="67:5" pos:end="67:59"><name pos:start="67:5" pos:end="67:14">ipi_states</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:59"><name pos:start="67:18" pos:end="67:28">qemu_malloc</name><argument_list pos:start="67:29" pos:end="67:59">(<argument pos:start="67:30" pos:end="67:58"><expr pos:start="67:30" pos:end="67:58"><sizeof pos:start="67:30" pos:end="67:47">sizeof<argument_list pos:start="67:36" pos:end="67:47">(<argument pos:start="67:37" pos:end="67:46"><expr pos:start="67:37" pos:end="67:46"><name pos:start="67:37" pos:end="67:44">CPUState</name> <operator pos:start="67:46" pos:end="67:46">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="67:49" pos:end="67:49">*</operator> <name pos:start="67:51" pos:end="67:58">smp_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="71:5" pos:end="91:5">for <control pos:start="71:9" pos:end="71:34">(<init pos:start="71:10" pos:end="71:15"><expr pos:start="71:10" pos:end="71:14"><name pos:start="71:10" pos:end="71:10">i</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <literal type="number" pos:start="71:14" pos:end="71:14">0</literal></expr>;</init> <condition pos:start="71:17" pos:end="71:29"><expr pos:start="71:17" pos:end="71:28"><name pos:start="71:17" pos:end="71:17">i</name> <operator pos:start="71:19" pos:end="71:19">&lt;</operator> <name pos:start="71:21" pos:end="71:28">smp_cpus</name></expr>;</condition> <incr pos:start="71:31" pos:end="71:33"><expr pos:start="71:31" pos:end="71:33"><name pos:start="71:31" pos:end="71:31">i</name><operator pos:start="71:32" pos:end="71:33">++</operator></expr></incr>)</control> <block pos:start="71:36" pos:end="91:5">{<block_content pos:start="73:9" pos:end="89:44">

        <decl_stmt pos:start="73:9" pos:end="73:26"><decl pos:start="73:9" pos:end="73:25"><type pos:start="73:9" pos:end="73:18"><name pos:start="73:9" pos:end="73:16">CPUState</name> <modifier pos:start="73:18" pos:end="73:18">*</modifier></type><name pos:start="73:19" pos:end="73:25">tmp_env</name></decl>;</decl_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:38"><expr pos:start="77:9" pos:end="77:37"><name pos:start="77:9" pos:end="77:15">tmp_env</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <call pos:start="77:19" pos:end="77:37"><name pos:start="77:19" pos:end="77:26">cpu_init</name><argument_list pos:start="77:27" pos:end="77:37">(<argument pos:start="77:28" pos:end="77:36"><expr pos:start="77:28" pos:end="77:36"><name pos:start="77:28" pos:end="77:36">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:17">(<expr pos:start="79:13" pos:end="79:16"><operator pos:start="79:13" pos:end="79:13">!</operator><name pos:start="79:14" pos:end="79:16">env</name></expr>)</condition> <block pos:start="79:19" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:26">

            <expr_stmt pos:start="81:13" pos:end="81:26"><expr pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:15">env</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:25">tmp_env</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:32"><expr pos:start="85:9" pos:end="85:31"><name pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:18">ipi_states</name><index pos:start="85:19" pos:end="85:21">[<expr pos:start="85:20" pos:end="85:20"><name pos:start="85:20" pos:end="85:20">i</name></expr>]</index></name> <operator pos:start="85:23" pos:end="85:23">=</operator> <name pos:start="85:25" pos:end="85:31">tmp_env</name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:28"><expr pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:23"><name pos:start="87:9" pos:end="87:15">tmp_env</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:23">halted</name></name> <operator pos:start="87:25" pos:end="87:25">=</operator> <literal type="number" pos:start="87:27" pos:end="87:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:44"><expr pos:start="89:9" pos:end="89:43"><name pos:start="89:9" pos:end="89:32"><name pos:start="89:9" pos:end="89:15">tmp_env</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:32">exception_index</name></name> <operator pos:start="89:34" pos:end="89:34">=</operator> <name pos:start="89:36" pos:end="89:43">EXCP_HLT</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="95:5" pos:end="95:20"><expr pos:start="95:5" pos:end="95:19"><name pos:start="95:5" pos:end="95:15"><name pos:start="95:5" pos:end="95:7">env</name><operator pos:start="95:8" pos:end="95:9">-&gt;</operator><name pos:start="95:10" pos:end="95:15">halted</name></name> <operator pos:start="95:17" pos:end="95:17">=</operator> <literal type="number" pos:start="95:19" pos:end="95:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:29"><expr pos:start="97:5" pos:end="97:28"><name pos:start="97:5" pos:end="97:24"><name pos:start="97:5" pos:end="97:7">env</name><operator pos:start="97:8" pos:end="97:9">-&gt;</operator><name pos:start="97:10" pos:end="97:24">exception_index</name></name> <operator pos:start="97:26" pos:end="97:26">=</operator> <literal type="number" pos:start="97:28" pos:end="97:28">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="101:5" pos:end="166:5"><if pos:start="101:5" pos:end="121:5">if <condition pos:start="101:8" pos:end="101:24">(<expr pos:start="101:9" pos:end="101:23"><name pos:start="101:9" pos:end="101:23">kernel_filename</name></expr>)</condition> <block pos:start="101:26" pos:end="121:5">{<block_content pos:start="103:9" pos:end="119:46">

        <expr_stmt pos:start="103:9" pos:end="103:71"><expr pos:start="103:9" pos:end="103:70"><name pos:start="103:9" pos:end="103:19">kernel_size</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <call pos:start="103:23" pos:end="103:70"><name pos:start="103:23" pos:end="103:32">load_image</name><argument_list pos:start="103:33" pos:end="103:70">(<argument pos:start="103:34" pos:end="103:48"><expr pos:start="103:34" pos:end="103:48"><name pos:start="103:34" pos:end="103:48">kernel_filename</name></expr></argument>, <argument pos:start="103:51" pos:end="103:69"><expr pos:start="103:51" pos:end="103:69"><call pos:start="103:51" pos:end="103:69"><name pos:start="103:51" pos:end="103:66">qemu_get_ram_ptr</name><argument_list pos:start="103:67" pos:end="103:69">(<argument pos:start="103:68" pos:end="103:68"><expr pos:start="103:68" pos:end="103:68"><literal type="number" pos:start="103:68" pos:end="103:68">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="107:9" pos:end="113:9"><if pos:start="107:9" pos:end="113:9">if <condition pos:start="107:12" pos:end="107:50">(<expr pos:start="107:13" pos:end="107:49"><call pos:start="107:13" pos:end="107:39"><name pos:start="107:13" pos:end="107:21">lduw_phys</name><argument_list pos:start="107:22" pos:end="107:39">(<argument pos:start="107:23" pos:end="107:38"><expr pos:start="107:23" pos:end="107:38"><name pos:start="107:23" pos:end="107:38">KERN_IMAGE_START</name></expr></argument>)</argument_list></call> <operator pos:start="107:41" pos:end="107:42">!=</operator> <literal type="number" pos:start="107:44" pos:end="107:49">0x0dd0</literal></expr>)</condition> <block pos:start="107:52" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:20">

            <expr_stmt pos:start="109:13" pos:end="109:75"><expr pos:start="109:13" pos:end="109:74"><call pos:start="109:13" pos:end="109:74"><name pos:start="109:13" pos:end="109:19">fprintf</name><argument_list pos:start="109:20" pos:end="109:74">(<argument pos:start="109:21" pos:end="109:26"><expr pos:start="109:21" pos:end="109:26"><name pos:start="109:21" pos:end="109:26">stderr</name></expr></argument>, <argument pos:start="109:29" pos:end="109:73"><expr pos:start="109:29" pos:end="109:73"><literal type="string" pos:start="109:29" pos:end="109:73">"Specified image is not an s390 boot image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:20"><expr pos:start="111:13" pos:end="111:19"><call pos:start="111:13" pos:end="111:19"><name pos:start="111:13" pos:end="111:16">exit</name><argument_list pos:start="111:17" pos:end="111:19">(<argument pos:start="111:18" pos:end="111:18"><expr pos:start="111:18" pos:end="111:18"><literal type="number" pos:start="111:18" pos:end="111:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="117:9" pos:end="117:41"><expr pos:start="117:9" pos:end="117:40"><name pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:11">env</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:16">psw</name><operator pos:start="117:17" pos:end="117:17">.</operator><name pos:start="117:18" pos:end="117:21">addr</name></name> <operator pos:start="117:23" pos:end="117:23">=</operator> <name pos:start="117:25" pos:end="117:40">KERN_IMAGE_START</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:46"><expr pos:start="119:9" pos:end="119:45"><name pos:start="119:9" pos:end="119:21"><name pos:start="119:9" pos:end="119:11">env</name><operator pos:start="119:12" pos:end="119:13">-&gt;</operator><name pos:start="119:14" pos:end="119:16">psw</name><operator pos:start="119:17" pos:end="119:17">.</operator><name pos:start="119:18" pos:end="119:21">mask</name></name> <operator pos:start="119:23" pos:end="119:23">=</operator> <literal type="number" pos:start="119:25" pos:end="119:45">0x0000000180000000ULL</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="121:7" pos:end="166:5">else <block pos:start="121:12" pos:end="166:5">{<block_content pos:start="123:9" pos:end="164:46">

        <decl_stmt pos:start="123:9" pos:end="123:33"><decl pos:start="123:9" pos:end="123:32"><type pos:start="123:9" pos:end="123:18"><name pos:start="123:9" pos:end="123:18">ram_addr_t</name></type> <name pos:start="123:20" pos:end="123:28">bios_size</name> <init pos:start="123:30" pos:end="123:32">= <expr pos:start="123:32" pos:end="123:32"><literal type="number" pos:start="123:32" pos:end="123:32">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="125:9" pos:end="125:28"><decl pos:start="125:9" pos:end="125:27"><type pos:start="125:9" pos:end="125:14"><name pos:start="125:9" pos:end="125:12">char</name> <modifier pos:start="125:14" pos:end="125:14">*</modifier></type><name pos:start="125:15" pos:end="125:27">bios_filename</name></decl>;</decl_stmt>



        <comment type="block" pos:start="129:9" pos:end="129:34">/* Load zipl bootloader */</comment>

        <if_stmt pos:start="131:9" pos:end="135:9"><if pos:start="131:9" pos:end="135:9">if <condition pos:start="131:12" pos:end="131:30">(<expr pos:start="131:13" pos:end="131:29"><name pos:start="131:13" pos:end="131:21">bios_name</name> <operator pos:start="131:23" pos:end="131:24">==</operator> <name pos:start="131:26" pos:end="131:29">NULL</name></expr>)</condition> <block pos:start="131:32" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:38">

            <expr_stmt pos:start="133:13" pos:end="133:38"><expr pos:start="133:13" pos:end="133:37"><name pos:start="133:13" pos:end="133:21">bios_name</name> <operator pos:start="133:23" pos:end="133:23">=</operator> <name pos:start="133:25" pos:end="133:37">ZIPL_FILENAME</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="139:9" pos:end="139:71"><expr pos:start="139:9" pos:end="139:70"><name pos:start="139:9" pos:end="139:21">bios_filename</name> <operator pos:start="139:23" pos:end="139:23">=</operator> <call pos:start="139:25" pos:end="139:70"><name pos:start="139:25" pos:end="139:38">qemu_find_file</name><argument_list pos:start="139:39" pos:end="139:70">(<argument pos:start="139:40" pos:end="139:58"><expr pos:start="139:40" pos:end="139:58"><name pos:start="139:40" pos:end="139:58">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="139:61" pos:end="139:69"><expr pos:start="139:61" pos:end="139:69"><name pos:start="139:61" pos:end="139:69">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:80"><expr pos:start="141:9" pos:end="141:79"><name pos:start="141:9" pos:end="141:17">bios_size</name> <operator pos:start="141:19" pos:end="141:19">=</operator> <call pos:start="141:21" pos:end="141:79"><name pos:start="141:21" pos:end="141:30">load_image</name><argument_list pos:start="141:31" pos:end="141:79">(<argument pos:start="141:32" pos:end="141:44"><expr pos:start="141:32" pos:end="141:44"><name pos:start="141:32" pos:end="141:44">bios_filename</name></expr></argument>, <argument pos:start="141:47" pos:end="141:78"><expr pos:start="141:47" pos:end="141:78"><call pos:start="141:47" pos:end="141:78"><name pos:start="141:47" pos:end="141:62">qemu_get_ram_ptr</name><argument_list pos:start="141:63" pos:end="141:78">(<argument pos:start="141:64" pos:end="141:77"><expr pos:start="141:64" pos:end="141:77"><name pos:start="141:64" pos:end="141:77">ZIPL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>




        <if_stmt pos:start="146:9" pos:end="150:9"><if pos:start="146:9" pos:end="150:9">if <condition pos:start="146:12" pos:end="146:32">(<expr pos:start="146:13" pos:end="146:31"><operator pos:start="146:13" pos:end="146:13">(</operator><name pos:start="146:14" pos:end="146:17">long</name><operator pos:start="146:18" pos:end="146:18">)</operator><name pos:start="146:19" pos:end="146:27">bios_size</name> <operator pos:start="146:29" pos:end="146:29">&lt;</operator> <literal type="number" pos:start="146:31" pos:end="146:31">0</literal></expr>)</condition> <block pos:start="146:34" pos:end="150:9">{<block_content pos:start="148:13" pos:end="148:68">

            <expr_stmt pos:start="148:13" pos:end="148:68"><expr pos:start="148:13" pos:end="148:67"><call pos:start="148:13" pos:end="148:67"><name pos:start="148:13" pos:end="148:20">hw_error</name><argument_list pos:start="148:21" pos:end="148:67">(<argument pos:start="148:22" pos:end="148:55"><expr pos:start="148:22" pos:end="148:55"><literal type="string" pos:start="148:22" pos:end="148:55">"could not load bootloader '%s'\n"</literal></expr></argument>, <argument pos:start="148:58" pos:end="148:66"><expr pos:start="148:58" pos:end="148:66"><name pos:start="148:58" pos:end="148:66">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="154:9" pos:end="158:9"><if pos:start="154:9" pos:end="158:9">if <condition pos:start="154:12" pos:end="154:29">(<expr pos:start="154:13" pos:end="154:28"><name pos:start="154:13" pos:end="154:21">bios_size</name> <operator pos:start="154:23" pos:end="154:23">&gt;</operator> <literal type="number" pos:start="154:25" pos:end="154:28">4096</literal></expr>)</condition> <block pos:start="154:31" pos:end="158:9">{<block_content pos:start="156:13" pos:end="156:52">

            <expr_stmt pos:start="156:13" pos:end="156:52"><expr pos:start="156:13" pos:end="156:51"><call pos:start="156:13" pos:end="156:51"><name pos:start="156:13" pos:end="156:20">hw_error</name><argument_list pos:start="156:21" pos:end="156:51">(<argument pos:start="156:22" pos:end="156:50"><expr pos:start="156:22" pos:end="156:50"><literal type="string" pos:start="156:22" pos:end="156:50">"stage1 bootloader is &gt; 4k\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="162:9" pos:end="162:35"><expr pos:start="162:9" pos:end="162:34"><name pos:start="162:9" pos:end="162:21"><name pos:start="162:9" pos:end="162:11">env</name><operator pos:start="162:12" pos:end="162:13">-&gt;</operator><name pos:start="162:14" pos:end="162:16">psw</name><operator pos:start="162:17" pos:end="162:17">.</operator><name pos:start="162:18" pos:end="162:21">addr</name></name> <operator pos:start="162:23" pos:end="162:23">=</operator> <name pos:start="162:25" pos:end="162:34">ZIPL_START</name></expr>;</expr_stmt>

        <expr_stmt pos:start="164:9" pos:end="164:46"><expr pos:start="164:9" pos:end="164:45"><name pos:start="164:9" pos:end="164:21"><name pos:start="164:9" pos:end="164:11">env</name><operator pos:start="164:12" pos:end="164:13">-&gt;</operator><name pos:start="164:14" pos:end="164:16">psw</name><operator pos:start="164:17" pos:end="164:17">.</operator><name pos:start="164:18" pos:end="164:21">mask</name></name> <operator pos:start="164:23" pos:end="164:23">=</operator> <literal type="number" pos:start="164:25" pos:end="164:45">0x0000000180000000ULL</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="170:5" pos:end="188:5"><if pos:start="170:5" pos:end="188:5">if <condition pos:start="170:8" pos:end="170:24">(<expr pos:start="170:9" pos:end="170:23"><name pos:start="170:9" pos:end="170:23">initrd_filename</name></expr>)</condition> <block pos:start="170:26" pos:end="188:5">{<block_content pos:start="172:9" pos:end="186:48">

        <expr_stmt pos:start="172:9" pos:end="172:37"><expr pos:start="172:9" pos:end="172:36"><name pos:start="172:9" pos:end="172:21">initrd_offset</name> <operator pos:start="172:23" pos:end="172:23">=</operator> <name pos:start="172:25" pos:end="172:36">INITRD_START</name></expr>;</expr_stmt>

        <while pos:start="174:9" pos:end="178:9">while <condition pos:start="174:15" pos:end="174:54">(<expr pos:start="174:16" pos:end="174:53"><name pos:start="174:16" pos:end="174:26">kernel_size</name> <operator pos:start="174:28" pos:end="174:28">+</operator> <literal type="number" pos:start="174:30" pos:end="174:37">0x100000</literal> <operator pos:start="174:39" pos:end="174:39">&gt;</operator> <name pos:start="174:41" pos:end="174:53">initrd_offset</name></expr>)</condition> <block pos:start="174:56" pos:end="178:9">{<block_content pos:start="176:13" pos:end="176:38">

            <expr_stmt pos:start="176:13" pos:end="176:38"><expr pos:start="176:13" pos:end="176:37"><name pos:start="176:13" pos:end="176:25">initrd_offset</name> <operator pos:start="176:27" pos:end="176:28">+=</operator> <literal type="number" pos:start="176:30" pos:end="176:37">0x100000</literal></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="180:9" pos:end="180:83"><expr pos:start="180:9" pos:end="180:82"><name pos:start="180:9" pos:end="180:19">initrd_size</name> <operator pos:start="180:21" pos:end="180:21">=</operator> <call pos:start="180:23" pos:end="180:82"><name pos:start="180:23" pos:end="180:32">load_image</name><argument_list pos:start="180:33" pos:end="180:82">(<argument pos:start="180:34" pos:end="180:48"><expr pos:start="180:34" pos:end="180:48"><name pos:start="180:34" pos:end="180:48">initrd_filename</name></expr></argument>, <argument pos:start="180:51" pos:end="180:81"><expr pos:start="180:51" pos:end="180:81"><call pos:start="180:51" pos:end="180:81"><name pos:start="180:51" pos:end="180:66">qemu_get_ram_ptr</name><argument_list pos:start="180:67" pos:end="180:81">(<argument pos:start="180:68" pos:end="180:80"><expr pos:start="180:68" pos:end="180:80"><name pos:start="180:68" pos:end="180:80">initrd_offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="184:9" pos:end="184:51"><expr pos:start="184:9" pos:end="184:50"><call pos:start="184:9" pos:end="184:50"><name pos:start="184:9" pos:end="184:16">stq_phys</name><argument_list pos:start="184:17" pos:end="184:50">(<argument pos:start="184:18" pos:end="184:34"><expr pos:start="184:18" pos:end="184:34"><name pos:start="184:18" pos:end="184:34">INITRD_PARM_START</name></expr></argument>, <argument pos:start="184:37" pos:end="184:49"><expr pos:start="184:37" pos:end="184:49"><name pos:start="184:37" pos:end="184:49">initrd_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="186:9" pos:end="186:48"><expr pos:start="186:9" pos:end="186:47"><call pos:start="186:9" pos:end="186:47"><name pos:start="186:9" pos:end="186:16">stq_phys</name><argument_list pos:start="186:17" pos:end="186:47">(<argument pos:start="186:18" pos:end="186:33"><expr pos:start="186:18" pos:end="186:33"><name pos:start="186:18" pos:end="186:33">INITRD_PARM_SIZE</name></expr></argument>, <argument pos:start="186:36" pos:end="186:46"><expr pos:start="186:36" pos:end="186:46"><name pos:start="186:36" pos:end="186:46">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="192:5" pos:end="198:5"><if pos:start="192:5" pos:end="198:5">if <condition pos:start="192:8" pos:end="192:23">(<expr pos:start="192:9" pos:end="192:22"><name pos:start="192:9" pos:end="192:22">kernel_cmdline</name></expr>)</condition> <block pos:start="192:25" pos:end="198:5">{<block_content pos:start="194:9" pos:end="196:58">

        <expr_stmt pos:start="194:9" pos:end="196:58"><expr pos:start="194:9" pos:end="196:57"><call pos:start="194:9" pos:end="196:57"><name pos:start="194:9" pos:end="194:30">cpu_physical_memory_rw</name><argument_list pos:start="194:31" pos:end="196:57">(<argument pos:start="194:32" pos:end="194:45"><expr pos:start="194:32" pos:end="194:45"><name pos:start="194:32" pos:end="194:45">KERN_PARM_AREA</name></expr></argument>, <argument pos:start="194:48" pos:end="194:72"><expr pos:start="194:48" pos:end="194:72"><operator pos:start="194:48" pos:end="194:48">(</operator><name pos:start="194:49" pos:end="194:55">uint8_t</name> <operator pos:start="194:57" pos:end="194:57">*</operator><operator pos:start="194:58" pos:end="194:58">)</operator><name pos:start="194:59" pos:end="194:72">kernel_cmdline</name></expr></argument>,

                               <argument pos:start="196:32" pos:end="196:53"><expr pos:start="196:32" pos:end="196:53"><call pos:start="196:32" pos:end="196:53"><name pos:start="196:32" pos:end="196:37">strlen</name><argument_list pos:start="196:38" pos:end="196:53">(<argument pos:start="196:39" pos:end="196:52"><expr pos:start="196:39" pos:end="196:52"><name pos:start="196:39" pos:end="196:52">kernel_cmdline</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="196:56" pos:end="196:56"><expr pos:start="196:56" pos:end="196:56"><literal type="number" pos:start="196:56" pos:end="196:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="202:5" pos:end="202:40">/* Create VirtIO network adapters */</comment>

    <for pos:start="204:5" pos:end="236:5">for<control pos:start="204:8" pos:end="204:32">(<init pos:start="204:9" pos:end="204:14"><expr pos:start="204:9" pos:end="204:13"><name pos:start="204:9" pos:end="204:9">i</name> <operator pos:start="204:11" pos:end="204:11">=</operator> <literal type="number" pos:start="204:13" pos:end="204:13">0</literal></expr>;</init> <condition pos:start="204:16" pos:end="204:27"><expr pos:start="204:16" pos:end="204:26"><name pos:start="204:16" pos:end="204:16">i</name> <operator pos:start="204:18" pos:end="204:18">&lt;</operator> <name pos:start="204:20" pos:end="204:26">nb_nics</name></expr>;</condition> <incr pos:start="204:29" pos:end="204:31"><expr pos:start="204:29" pos:end="204:31"><name pos:start="204:29" pos:end="204:29">i</name><operator pos:start="204:30" pos:end="204:31">++</operator></expr></incr>)</control> <block pos:start="204:34" pos:end="236:5">{<block_content pos:start="206:9" pos:end="234:30">

        <decl_stmt pos:start="206:9" pos:end="206:35"><decl pos:start="206:9" pos:end="206:34"><type pos:start="206:9" pos:end="206:17"><name pos:start="206:9" pos:end="206:15">NICInfo</name> <modifier pos:start="206:17" pos:end="206:17">*</modifier></type><name pos:start="206:18" pos:end="206:19">nd</name> <init pos:start="206:21" pos:end="206:34">= <expr pos:start="206:23" pos:end="206:34"><operator pos:start="206:23" pos:end="206:23">&amp;</operator><name pos:start="206:24" pos:end="206:34"><name pos:start="206:24" pos:end="206:31">nd_table</name><index pos:start="206:32" pos:end="206:34">[<expr pos:start="206:33" pos:end="206:33"><name pos:start="206:33" pos:end="206:33">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="208:9" pos:end="208:25"><decl pos:start="208:9" pos:end="208:24"><type pos:start="208:9" pos:end="208:21"><name pos:start="208:9" pos:end="208:19">DeviceState</name> <modifier pos:start="208:21" pos:end="208:21">*</modifier></type><name pos:start="208:22" pos:end="208:24">dev</name></decl>;</decl_stmt>



        <if_stmt pos:start="212:9" pos:end="216:9"><if pos:start="212:9" pos:end="216:9">if <condition pos:start="212:12" pos:end="212:23">(<expr pos:start="212:13" pos:end="212:22"><operator pos:start="212:13" pos:end="212:13">!</operator><name pos:start="212:14" pos:end="212:22"><name pos:start="212:14" pos:end="212:15">nd</name><operator pos:start="212:16" pos:end="212:17">-&gt;</operator><name pos:start="212:18" pos:end="212:22">model</name></name></expr>)</condition> <block pos:start="212:25" pos:end="216:9">{<block_content pos:start="214:13" pos:end="214:46">

            <expr_stmt pos:start="214:13" pos:end="214:46"><expr pos:start="214:13" pos:end="214:45"><name pos:start="214:13" pos:end="214:21"><name pos:start="214:13" pos:end="214:14">nd</name><operator pos:start="214:15" pos:end="214:16">-&gt;</operator><name pos:start="214:17" pos:end="214:21">model</name></name> <operator pos:start="214:23" pos:end="214:23">=</operator> <call pos:start="214:25" pos:end="214:45"><name pos:start="214:25" pos:end="214:35">qemu_strdup</name><argument_list pos:start="214:36" pos:end="214:45">(<argument pos:start="214:37" pos:end="214:44"><expr pos:start="214:37" pos:end="214:44"><literal type="string" pos:start="214:37" pos:end="214:44">"virtio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="220:9" pos:end="226:9"><if pos:start="220:9" pos:end="226:9">if <condition pos:start="220:12" pos:end="220:40">(<expr pos:start="220:13" pos:end="220:39"><call pos:start="220:13" pos:end="220:39"><name pos:start="220:13" pos:end="220:18">strcmp</name><argument_list pos:start="220:19" pos:end="220:39">(<argument pos:start="220:20" pos:end="220:28"><expr pos:start="220:20" pos:end="220:28"><name pos:start="220:20" pos:end="220:28"><name pos:start="220:20" pos:end="220:21">nd</name><operator pos:start="220:22" pos:end="220:23">-&gt;</operator><name pos:start="220:24" pos:end="220:28">model</name></name></expr></argument>, <argument pos:start="220:31" pos:end="220:38"><expr pos:start="220:31" pos:end="220:38"><literal type="string" pos:start="220:31" pos:end="220:38">"virtio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="220:42" pos:end="226:9">{<block_content pos:start="222:13" pos:end="224:20">

            <expr_stmt pos:start="222:13" pos:end="222:64"><expr pos:start="222:13" pos:end="222:63"><call pos:start="222:13" pos:end="222:63"><name pos:start="222:13" pos:end="222:19">fprintf</name><argument_list pos:start="222:20" pos:end="222:63">(<argument pos:start="222:21" pos:end="222:26"><expr pos:start="222:21" pos:end="222:26"><name pos:start="222:21" pos:end="222:26">stderr</name></expr></argument>, <argument pos:start="222:29" pos:end="222:62"><expr pos:start="222:29" pos:end="222:62"><literal type="string" pos:start="222:29" pos:end="222:62">"S390 only supports VirtIO nics\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="224:13" pos:end="224:20"><expr pos:start="224:13" pos:end="224:19"><call pos:start="224:13" pos:end="224:19"><name pos:start="224:13" pos:end="224:16">exit</name><argument_list pos:start="224:17" pos:end="224:19">(<argument pos:start="224:18" pos:end="224:18"><expr pos:start="224:18" pos:end="224:18"><literal type="number" pos:start="224:18" pos:end="224:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="230:9" pos:end="230:67"><expr pos:start="230:9" pos:end="230:66"><name pos:start="230:9" pos:end="230:11">dev</name> <operator pos:start="230:13" pos:end="230:13">=</operator> <call pos:start="230:15" pos:end="230:66"><name pos:start="230:15" pos:end="230:25">qdev_create</name><argument_list pos:start="230:26" pos:end="230:66">(<argument pos:start="230:27" pos:end="230:46"><expr pos:start="230:27" pos:end="230:46"><operator pos:start="230:27" pos:end="230:27">(</operator><name pos:start="230:28" pos:end="230:35">BusState</name> <operator pos:start="230:37" pos:end="230:37">*</operator><operator pos:start="230:38" pos:end="230:38">)</operator><name pos:start="230:39" pos:end="230:46">s390_bus</name></expr></argument>, <argument pos:start="230:49" pos:end="230:65"><expr pos:start="230:49" pos:end="230:65"><literal type="string" pos:start="230:49" pos:end="230:65">"virtio-net-s390"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="232:9" pos:end="232:41"><expr pos:start="232:9" pos:end="232:40"><call pos:start="232:9" pos:end="232:40"><name pos:start="232:9" pos:end="232:31">qdev_set_nic_properties</name><argument_list pos:start="232:32" pos:end="232:40">(<argument pos:start="232:33" pos:end="232:35"><expr pos:start="232:33" pos:end="232:35"><name pos:start="232:33" pos:end="232:35">dev</name></expr></argument>, <argument pos:start="232:38" pos:end="232:39"><expr pos:start="232:38" pos:end="232:39"><name pos:start="232:38" pos:end="232:39">nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="234:9" pos:end="234:30"><expr pos:start="234:9" pos:end="234:29"><call pos:start="234:9" pos:end="234:29"><name pos:start="234:9" pos:end="234:24">qdev_init_nofail</name><argument_list pos:start="234:25" pos:end="234:29">(<argument pos:start="234:26" pos:end="234:28"><expr pos:start="234:26" pos:end="234:28"><name pos:start="234:26" pos:end="234:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="240:5" pos:end="240:35">/* Create VirtIO disk drives */</comment>

    <for pos:start="242:5" pos:end="266:5">for<control pos:start="242:8" pos:end="242:37">(<init pos:start="242:9" pos:end="242:14"><expr pos:start="242:9" pos:end="242:13"><name pos:start="242:9" pos:end="242:9">i</name> <operator pos:start="242:11" pos:end="242:11">=</operator> <literal type="number" pos:start="242:13" pos:end="242:13">0</literal></expr>;</init> <condition pos:start="242:16" pos:end="242:32"><expr pos:start="242:16" pos:end="242:31"><name pos:start="242:16" pos:end="242:16">i</name> <operator pos:start="242:18" pos:end="242:18">&lt;</operator> <name pos:start="242:20" pos:end="242:31">MAX_BLK_DEVS</name></expr>;</condition> <incr pos:start="242:34" pos:end="242:36"><expr pos:start="242:34" pos:end="242:36"><name pos:start="242:34" pos:end="242:34">i</name><operator pos:start="242:35" pos:end="242:36">++</operator></expr></incr>)</control> <block pos:start="242:39" pos:end="266:5">{<block_content pos:start="244:9" pos:end="264:30">

        <decl_stmt pos:start="244:9" pos:end="244:25"><decl pos:start="244:9" pos:end="244:24"><type pos:start="244:9" pos:end="244:19"><name pos:start="244:9" pos:end="244:17">DriveInfo</name> <modifier pos:start="244:19" pos:end="244:19">*</modifier></type><name pos:start="244:20" pos:end="244:24">dinfo</name></decl>;</decl_stmt>

        <decl_stmt pos:start="246:9" pos:end="246:25"><decl pos:start="246:9" pos:end="246:24"><type pos:start="246:9" pos:end="246:21"><name pos:start="246:9" pos:end="246:19">DeviceState</name> <modifier pos:start="246:21" pos:end="246:21">*</modifier></type><name pos:start="246:22" pos:end="246:24">dev</name></decl>;</decl_stmt>



        <expr_stmt pos:start="250:9" pos:end="250:40"><expr pos:start="250:9" pos:end="250:39"><name pos:start="250:9" pos:end="250:13">dinfo</name> <operator pos:start="250:15" pos:end="250:15">=</operator> <call pos:start="250:17" pos:end="250:39"><name pos:start="250:17" pos:end="250:25">drive_get</name><argument_list pos:start="250:26" pos:end="250:39">(<argument pos:start="250:27" pos:end="250:32"><expr pos:start="250:27" pos:end="250:32"><name pos:start="250:27" pos:end="250:32">IF_IDE</name></expr></argument>, <argument pos:start="250:35" pos:end="250:35"><expr pos:start="250:35" pos:end="250:35"><literal type="number" pos:start="250:35" pos:end="250:35">0</literal></expr></argument>, <argument pos:start="250:38" pos:end="250:38"><expr pos:start="250:38" pos:end="250:38"><name pos:start="250:38" pos:end="250:38">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="252:9" pos:end="256:9"><if pos:start="252:9" pos:end="256:9">if <condition pos:start="252:12" pos:end="252:19">(<expr pos:start="252:13" pos:end="252:18"><operator pos:start="252:13" pos:end="252:13">!</operator><name pos:start="252:14" pos:end="252:18">dinfo</name></expr>)</condition> <block pos:start="252:21" pos:end="256:9">{<block_content pos:start="254:13" pos:end="254:21">

            <continue pos:start="254:13" pos:end="254:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="260:9" pos:end="260:67"><expr pos:start="260:9" pos:end="260:66"><name pos:start="260:9" pos:end="260:11">dev</name> <operator pos:start="260:13" pos:end="260:13">=</operator> <call pos:start="260:15" pos:end="260:66"><name pos:start="260:15" pos:end="260:25">qdev_create</name><argument_list pos:start="260:26" pos:end="260:66">(<argument pos:start="260:27" pos:end="260:46"><expr pos:start="260:27" pos:end="260:46"><operator pos:start="260:27" pos:end="260:27">(</operator><name pos:start="260:28" pos:end="260:35">BusState</name> <operator pos:start="260:37" pos:end="260:37">*</operator><operator pos:start="260:38" pos:end="260:38">)</operator><name pos:start="260:39" pos:end="260:46">s390_bus</name></expr></argument>, <argument pos:start="260:49" pos:end="260:65"><expr pos:start="260:49" pos:end="260:65"><literal type="string" pos:start="260:49" pos:end="260:65">"virtio-blk-s390"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="262:9" pos:end="262:62"><expr pos:start="262:9" pos:end="262:61"><call pos:start="262:9" pos:end="262:61"><name pos:start="262:9" pos:end="262:34">qdev_prop_set_drive_nofail</name><argument_list pos:start="262:35" pos:end="262:61">(<argument pos:start="262:36" pos:end="262:38"><expr pos:start="262:36" pos:end="262:38"><name pos:start="262:36" pos:end="262:38">dev</name></expr></argument>, <argument pos:start="262:41" pos:end="262:47"><expr pos:start="262:41" pos:end="262:47"><literal type="string" pos:start="262:41" pos:end="262:47">"drive"</literal></expr></argument>, <argument pos:start="262:50" pos:end="262:60"><expr pos:start="262:50" pos:end="262:60"><name pos:start="262:50" pos:end="262:60"><name pos:start="262:50" pos:end="262:54">dinfo</name><operator pos:start="262:55" pos:end="262:56">-&gt;</operator><name pos:start="262:57" pos:end="262:60">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="264:9" pos:end="264:30"><expr pos:start="264:9" pos:end="264:29"><call pos:start="264:9" pos:end="264:29"><name pos:start="264:9" pos:end="264:24">qdev_init_nofail</name><argument_list pos:start="264:25" pos:end="264:29">(<argument pos:start="264:26" pos:end="264:28"><expr pos:start="264:26" pos:end="264:28"><name pos:start="264:26" pos:end="264:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function></unit>
