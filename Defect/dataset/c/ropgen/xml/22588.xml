<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22588.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">target_ulong</name></type> <name pos:start="1:21" pos:end="1:38">helper_sdiv_common</name><parameter_list pos:start="1:39" pos:end="3:62">(<parameter pos:start="1:40" pos:end="1:57"><decl pos:start="1:40" pos:end="1:57"><type pos:start="1:40" pos:end="1:57"><name pos:start="1:40" pos:end="1:52">CPUSPARCState</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:57">env</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:71">target_ulong</name></type> <name pos:start="1:73" pos:end="1:73">a</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:53"><decl pos:start="3:40" pos:end="3:53"><type pos:start="3:40" pos:end="3:53"><name pos:start="3:40" pos:end="3:51">target_ulong</name></type> <name pos:start="3:53" pos:end="3:53">b</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:61"><decl pos:start="3:56" pos:end="3:61"><type pos:start="3:56" pos:end="3:61"><name pos:start="3:56" pos:end="3:58">int</name></type> <name pos:start="3:60" pos:end="3:61">cc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="57:1">{<block_content pos:start="7:5" pos:end="55:14">

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">SPARCCPU</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">cpu</name> <init pos:start="7:19" pos:end="7:42">= <expr pos:start="7:21" pos:end="7:42"><call pos:start="7:21" pos:end="7:42"><name pos:start="7:21" pos:end="7:37">sparc_env_get_cpu</name><argument_list pos:start="7:38" pos:end="7:42">(<argument pos:start="7:39" pos:end="7:41"><expr pos:start="7:39" pos:end="7:41"><name pos:start="7:39" pos:end="7:41">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">overflow</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:14">x0</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int32_t</name></type> <name pos:start="13:13" pos:end="13:14">x1</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:55"><expr pos:start="17:5" pos:end="17:54"><name pos:start="17:5" pos:end="17:6">x0</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <operator pos:start="17:10" pos:end="17:10">(</operator><name pos:start="17:11" pos:end="17:11">a</name> <operator pos:start="17:13" pos:end="17:13">&amp;</operator> <literal type="number" pos:start="17:15" pos:end="17:24">0xffffffff</literal><operator pos:start="17:25" pos:end="17:25">)</operator> <operator pos:start="17:27" pos:end="17:27">|</operator> <operator pos:start="17:29" pos:end="17:29">(</operator><operator pos:start="17:30" pos:end="17:30">(</operator><name pos:start="17:31" pos:end="17:37">int64_t</name><operator pos:start="17:38" pos:end="17:38">)</operator> <operator pos:start="17:40" pos:end="17:40">(</operator><name pos:start="17:41" pos:end="17:46"><name pos:start="17:41" pos:end="17:43">env</name><operator pos:start="17:44" pos:end="17:45">-&gt;</operator><name pos:start="17:46" pos:end="17:46">y</name></name><operator pos:start="17:47" pos:end="17:47">)</operator> <operator pos:start="17:49" pos:end="17:50">&lt;&lt;</operator> <literal type="number" pos:start="17:52" pos:end="17:53">32</literal><operator pos:start="17:54" pos:end="17:54">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:26"><expr pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:6">x1</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <operator pos:start="19:10" pos:end="19:10">(</operator><name pos:start="19:11" pos:end="19:11">b</name> <operator pos:start="19:13" pos:end="19:13">&amp;</operator> <literal type="number" pos:start="19:15" pos:end="19:24">0xffffffff</literal><operator pos:start="19:25" pos:end="19:25">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:16">(<expr pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:10">x1</name> <operator pos:start="23:12" pos:end="23:13">==</operator> <literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr>)</condition> <block pos:start="23:18" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:49">

        <expr_stmt pos:start="25:9" pos:end="25:45"><expr pos:start="25:9" pos:end="25:44"><call pos:start="25:9" pos:end="25:44"><name pos:start="25:9" pos:end="25:25">cpu_restore_state</name><argument_list pos:start="25:26" pos:end="25:44">(<argument pos:start="25:27" pos:end="25:34"><expr pos:start="25:27" pos:end="25:34"><call pos:start="25:27" pos:end="25:34"><name pos:start="25:27" pos:end="25:29">CPU</name><argument_list pos:start="25:30" pos:end="25:34">(<argument pos:start="25:31" pos:end="25:33"><expr pos:start="25:31" pos:end="25:33"><name pos:start="25:31" pos:end="25:33">cpu</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:37" pos:end="25:43"><expr pos:start="25:37" pos:end="25:43"><call pos:start="25:37" pos:end="25:43"><name pos:start="25:37" pos:end="25:41">GETPC</name><argument_list pos:start="25:42" pos:end="25:43">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:49"><expr pos:start="27:9" pos:end="27:48"><call pos:start="27:9" pos:end="27:48"><name pos:start="27:9" pos:end="27:30">helper_raise_exception</name><argument_list pos:start="27:31" pos:end="27:48">(<argument pos:start="27:32" pos:end="27:34"><expr pos:start="27:32" pos:end="27:34"><name pos:start="27:32" pos:end="27:34">env</name></expr></argument>, <argument pos:start="27:37" pos:end="27:47"><expr pos:start="27:37" pos:end="27:47"><name pos:start="27:37" pos:end="27:47">TT_DIV_ZERO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:17"><expr pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:6">x0</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <name pos:start="33:10" pos:end="33:11">x0</name> <operator pos:start="33:13" pos:end="33:13">/</operator> <name pos:start="33:15" pos:end="33:16">x1</name></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:27">(<expr pos:start="35:9" pos:end="35:26"><operator pos:start="35:9" pos:end="35:9">(</operator><name pos:start="35:10" pos:end="35:16">int32_t</name><operator pos:start="35:17" pos:end="35:17">)</operator> <name pos:start="35:19" pos:end="35:20">x0</name> <operator pos:start="35:22" pos:end="35:23">!=</operator> <name pos:start="35:25" pos:end="35:26">x0</name></expr>)</condition> <block pos:start="35:29" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:21">

        <expr_stmt pos:start="37:9" pos:end="37:46"><expr pos:start="37:9" pos:end="37:45"><name pos:start="37:9" pos:end="37:10">x0</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <ternary pos:start="37:14" pos:end="37:45"><condition pos:start="37:14" pos:end="37:21"><expr pos:start="37:14" pos:end="37:19"><name pos:start="37:14" pos:end="37:15">x0</name> <operator pos:start="37:17" pos:end="37:17">&lt;</operator> <literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr> ?</condition><then pos:start="37:23" pos:end="37:32"> <expr pos:start="37:23" pos:end="37:32"><literal type="number" pos:start="37:23" pos:end="37:32">0x80000000</literal></expr> </then><else pos:start="37:34" pos:end="37:45">: <expr pos:start="37:36" pos:end="37:45"><literal type="number" pos:start="37:36" pos:end="37:45">0x7fffffff</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:21"><expr pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:16">overflow</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <literal type="number" pos:start="39:20" pos:end="39:20">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="53:5"><if pos:start="45:5" pos:end="53:5">if <condition pos:start="45:8" pos:end="45:11">(<expr pos:start="45:9" pos:end="45:10"><name pos:start="45:9" pos:end="45:10">cc</name></expr>)</condition> <block pos:start="45:13" pos:end="53:5">{<block_content pos:start="47:9" pos:end="51:31">

        <expr_stmt pos:start="47:9" pos:end="47:25"><expr pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:11">env</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:19">cc_dst</name></name> <operator pos:start="47:21" pos:end="47:21">=</operator> <name pos:start="47:23" pos:end="47:24">x0</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:32"><expr pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:11">env</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:20">cc_src2</name></name> <operator pos:start="49:22" pos:end="49:22">=</operator> <name pos:start="49:24" pos:end="49:31">overflow</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:31"><expr pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:11">env</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:18">cc_op</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <name pos:start="51:22" pos:end="51:30">CC_OP_DIV</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="55:5" pos:end="55:14">return <expr pos:start="55:12" pos:end="55:13"><name pos:start="55:12" pos:end="55:13">x0</name></expr>;</return>

</block_content>}</block></function>
</unit>
