<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15208.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:44">host_memory_backend_set_prealloc</name><parameter_list pos:start="1:45" pos:end="3:58">(<parameter pos:start="1:46" pos:end="1:56"><decl pos:start="1:46" pos:end="1:56"><type pos:start="1:46" pos:end="1:56"><name pos:start="1:46" pos:end="1:51">Object</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">obj</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:68"><decl pos:start="1:59" pos:end="1:68"><type pos:start="1:59" pos:end="1:68"><name pos:start="1:59" pos:end="1:62">bool</name></type> <name pos:start="1:64" pos:end="1:68">value</name></decl></parameter>,

                                             <parameter pos:start="3:46" pos:end="3:57"><decl pos:start="3:46" pos:end="3:57"><type pos:start="3:46" pos:end="3:57"><name pos:start="3:46" pos:end="3:50">Error</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier><modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:57">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="63:1">{<block_content pos:start="7:5" pos:end="61:5">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:53"><decl pos:start="9:5" pos:end="9:52"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">HostMemoryBackend</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:30">backend</name> <init pos:start="9:32" pos:end="9:52">= <expr pos:start="9:34" pos:end="9:52"><call pos:start="9:34" pos:end="9:52"><name pos:start="9:34" pos:end="9:47">MEMORY_BACKEND</name><argument_list pos:start="9:48" pos:end="9:52">(<argument pos:start="9:49" pos:end="9:51"><expr pos:start="9:49" pos:end="9:51"><name pos:start="9:49" pos:end="9:51">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="25:5"><if pos:start="13:5" pos:end="25:5">if <condition pos:start="13:8" pos:end="13:32">(<expr pos:start="13:9" pos:end="13:31"><name pos:start="13:9" pos:end="13:31"><name pos:start="13:9" pos:end="13:15">backend</name><operator pos:start="13:16" pos:end="13:17">-&gt;</operator><name pos:start="13:18" pos:end="13:31">force_prealloc</name></name></expr>)</condition> <block pos:start="13:34" pos:end="25:5">{<block_content pos:start="15:9" pos:end="23:9">

        <if_stmt pos:start="15:9" pos:end="23:9"><if pos:start="15:9" pos:end="23:9">if <condition pos:start="15:12" pos:end="15:18">(<expr pos:start="15:13" pos:end="15:17"><name pos:start="15:13" pos:end="15:17">value</name></expr>)</condition> <block pos:start="15:20" pos:end="23:9">{<block_content pos:start="17:13" pos:end="21:19">

            <expr_stmt pos:start="17:13" pos:end="19:76"><expr pos:start="17:13" pos:end="19:75"><call pos:start="17:13" pos:end="19:75"><name pos:start="17:13" pos:end="17:22">error_setg</name><argument_list pos:start="17:23" pos:end="19:75">(<argument pos:start="17:24" pos:end="17:27"><expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">errp</name></expr></argument>,

                       <argument pos:start="19:24" pos:end="19:74"><expr pos:start="19:24" pos:end="19:74"><literal type="string" pos:start="19:24" pos:end="19:74">"remove -mem-prealloc to use the prealloc property"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="21:13" pos:end="21:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:42">(<expr pos:start="29:9" pos:end="29:41"><operator pos:start="29:9" pos:end="29:9">!</operator><call pos:start="29:10" pos:end="29:41"><name pos:start="29:10" pos:end="29:27">memory_region_size</name><argument_list pos:start="29:28" pos:end="29:41">(<argument pos:start="29:29" pos:end="29:40"><expr pos:start="29:29" pos:end="29:40"><operator pos:start="29:29" pos:end="29:29">&amp;</operator><name pos:start="29:30" pos:end="29:40"><name pos:start="29:30" pos:end="29:36">backend</name><operator pos:start="29:37" pos:end="29:38">-&gt;</operator><name pos:start="29:39" pos:end="29:40">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:44" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:15">

        <expr_stmt pos:start="31:9" pos:end="31:34"><expr pos:start="31:9" pos:end="31:33"><name pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:15">backend</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:25">prealloc</name></name> <operator pos:start="31:27" pos:end="31:27">=</operator> <name pos:start="31:29" pos:end="31:33">value</name></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="39:5" pos:end="61:5"><if pos:start="39:5" pos:end="61:5">if <condition pos:start="39:8" pos:end="39:36">(<expr pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:13">value</name> <operator pos:start="39:15" pos:end="39:16">&amp;&amp;</operator> <operator pos:start="39:18" pos:end="39:18">!</operator><name pos:start="39:19" pos:end="39:35"><name pos:start="39:19" pos:end="39:25">backend</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:35">prealloc</name></name></expr>)</condition> <block pos:start="39:38" pos:end="61:5">{<block_content pos:start="41:9" pos:end="59:33">

        <decl_stmt pos:start="41:9" pos:end="41:52"><decl pos:start="41:9" pos:end="41:51"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:14">fd</name> <init pos:start="41:16" pos:end="41:51">= <expr pos:start="41:18" pos:end="41:51"><call pos:start="41:18" pos:end="41:51"><name pos:start="41:18" pos:end="41:37">memory_region_get_fd</name><argument_list pos:start="41:38" pos:end="41:51">(<argument pos:start="41:39" pos:end="41:50"><expr pos:start="41:39" pos:end="41:50"><operator pos:start="41:39" pos:end="41:39">&amp;</operator><name pos:start="41:40" pos:end="41:50"><name pos:start="41:40" pos:end="41:46">backend</name><operator pos:start="41:47" pos:end="41:48">-&gt;</operator><name pos:start="41:49" pos:end="41:50">mr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:60"><decl pos:start="43:9" pos:end="43:59"><type pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:12">void</name> <modifier pos:start="43:14" pos:end="43:14">*</modifier></type><name pos:start="43:15" pos:end="43:17">ptr</name> <init pos:start="43:19" pos:end="43:59">= <expr pos:start="43:21" pos:end="43:59"><call pos:start="43:21" pos:end="43:59"><name pos:start="43:21" pos:end="43:45">memory_region_get_ram_ptr</name><argument_list pos:start="43:46" pos:end="43:59">(<argument pos:start="43:47" pos:end="43:58"><expr pos:start="43:47" pos:end="43:58"><operator pos:start="43:47" pos:end="43:47">&amp;</operator><name pos:start="43:48" pos:end="43:58"><name pos:start="43:48" pos:end="43:54">backend</name><operator pos:start="43:55" pos:end="43:56">-&gt;</operator><name pos:start="43:57" pos:end="43:58">mr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:55"><decl pos:start="45:9" pos:end="45:54"><type pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:16">uint64_t</name></type> <name pos:start="45:18" pos:end="45:19">sz</name> <init pos:start="45:21" pos:end="45:54">= <expr pos:start="45:23" pos:end="45:54"><call pos:start="45:23" pos:end="45:54"><name pos:start="45:23" pos:end="45:40">memory_region_size</name><argument_list pos:start="45:41" pos:end="45:54">(<argument pos:start="45:42" pos:end="45:53"><expr pos:start="45:42" pos:end="45:53"><operator pos:start="45:42" pos:end="45:42">&amp;</operator><name pos:start="45:43" pos:end="45:53"><name pos:start="45:43" pos:end="45:49">backend</name><operator pos:start="45:50" pos:end="45:51">-&gt;</operator><name pos:start="45:52" pos:end="45:53">mr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:49"><expr pos:start="49:9" pos:end="49:48"><call pos:start="49:9" pos:end="49:48"><name pos:start="49:9" pos:end="49:23">os_mem_prealloc</name><argument_list pos:start="49:24" pos:end="49:48">(<argument pos:start="49:25" pos:end="49:26"><expr pos:start="49:25" pos:end="49:26"><name pos:start="49:25" pos:end="49:26">fd</name></expr></argument>, <argument pos:start="49:29" pos:end="49:31"><expr pos:start="49:29" pos:end="49:31"><name pos:start="49:29" pos:end="49:31">ptr</name></expr></argument>, <argument pos:start="49:34" pos:end="49:35"><expr pos:start="49:34" pos:end="49:35"><name pos:start="49:34" pos:end="49:35">sz</name></expr></argument>, <argument pos:start="49:38" pos:end="49:47"><expr pos:start="49:38" pos:end="49:47"><operator pos:start="49:38" pos:end="49:38">&amp;</operator><name pos:start="49:39" pos:end="49:47">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:22">(<expr pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:21">local_err</name></expr>)</condition> <block pos:start="51:24" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:19">

            <expr_stmt pos:start="53:13" pos:end="53:45"><expr pos:start="53:13" pos:end="53:44"><call pos:start="53:13" pos:end="53:44"><name pos:start="53:13" pos:end="53:27">error_propagate</name><argument_list pos:start="53:28" pos:end="53:44">(<argument pos:start="53:29" pos:end="53:32"><expr pos:start="53:29" pos:end="53:32"><name pos:start="53:29" pos:end="53:32">errp</name></expr></argument>, <argument pos:start="53:35" pos:end="53:43"><expr pos:start="53:35" pos:end="53:43"><name pos:start="53:35" pos:end="53:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:15">backend</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:25">prealloc</name></name> <operator pos:start="59:27" pos:end="59:27">=</operator> <name pos:start="59:29" pos:end="59:32">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
