<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22929.c" pos:tabs="8"><function pos:start="1:1" pos:end="719:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_h263_decode_frame</name><parameter_list pos:start="1:25" pos:end="5:56">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>, 

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:41"><decl pos:start="5:30" pos:end="5:41"><type pos:start="5:30" pos:end="5:41"><name pos:start="5:30" pos:end="5:36">uint8_t</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:41">buf</name></decl></parameter>, <parameter pos:start="5:44" pos:end="5:55"><decl pos:start="5:44" pos:end="5:55"><type pos:start="5:44" pos:end="5:55"><name pos:start="5:44" pos:end="5:46">int</name></type> <name pos:start="5:48" pos:end="5:55">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="719:1">{<block_content pos:start="9:5" pos:end="717:43">

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">MpegEncContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">s</name> <init pos:start="9:23" pos:end="9:40">= <expr pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:29">avctx</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="18:0"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">pict</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">data</name></expr></init></decl>;</decl_stmt> 

    

<cpp:ifdef pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:23">PRINT_FRAME_TIME</name></cpp:ifdef>

<decl_stmt pos:start="19:1" pos:end="24:0"><decl pos:start="19:1" pos:end="19:22"><type pos:start="19:1" pos:end="19:8"><name pos:start="19:1" pos:end="19:8">uint64_t</name></type> <name pos:start="19:10" pos:end="19:13">time</name><init pos:start="19:14" pos:end="19:22">= <expr pos:start="19:16" pos:end="19:22"><call pos:start="19:16" pos:end="19:22"><name pos:start="19:16" pos:end="19:20">rdtsc</name><argument_list pos:start="19:21" pos:end="19:22">()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="23:1" pos:end="23:12">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="25:5" pos:end="25:69"><expr pos:start="25:5" pos:end="25:68"><call pos:start="25:5" pos:end="25:68"><name pos:start="25:5" pos:end="25:10">printf</name><argument_list pos:start="25:11" pos:end="25:68">(<argument pos:start="25:12" pos:end="25:36"><expr pos:start="25:12" pos:end="25:36"><literal type="string" pos:start="25:12" pos:end="25:36">"*****frame %d size=%d\n"</literal></expr></argument>, <argument pos:start="25:39" pos:end="25:57"><expr pos:start="25:39" pos:end="25:57"><name pos:start="25:39" pos:end="25:57"><name pos:start="25:39" pos:end="25:43">avctx</name><operator pos:start="25:44" pos:end="25:45">-&gt;</operator><name pos:start="25:46" pos:end="25:57">frame_number</name></name></expr></argument>, <argument pos:start="25:60" pos:end="25:67"><expr pos:start="25:60" pos:end="25:67"><name pos:start="25:60" pos:end="25:67">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="30:0"><expr pos:start="27:5" pos:end="27:65"><call pos:start="27:5" pos:end="27:65"><name pos:start="27:5" pos:end="27:10">printf</name><argument_list pos:start="27:11" pos:end="27:65">(<argument pos:start="27:12" pos:end="27:32"><expr pos:start="27:12" pos:end="27:32"><literal type="string" pos:start="27:12" pos:end="27:32">"bytes=%x %x %x %x\n"</literal></expr></argument>, <argument pos:start="27:35" pos:end="27:40"><expr pos:start="27:35" pos:end="27:40"><name pos:start="27:35" pos:end="27:40"><name pos:start="27:35" pos:end="27:37">buf</name><index pos:start="27:38" pos:end="27:40">[<expr pos:start="27:39" pos:end="27:39"><literal type="number" pos:start="27:39" pos:end="27:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="27:43" pos:end="27:48"><expr pos:start="27:43" pos:end="27:48"><name pos:start="27:43" pos:end="27:48"><name pos:start="27:43" pos:end="27:45">buf</name><index pos:start="27:46" pos:end="27:48">[<expr pos:start="27:47" pos:end="27:47"><literal type="number" pos:start="27:47" pos:end="27:47">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="27:51" pos:end="27:56"><expr pos:start="27:51" pos:end="27:56"><name pos:start="27:51" pos:end="27:56"><name pos:start="27:51" pos:end="27:53">buf</name><index pos:start="27:54" pos:end="27:56">[<expr pos:start="27:55" pos:end="27:55"><literal type="number" pos:start="27:55" pos:end="27:55">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="27:59" pos:end="27:64"><expr pos:start="27:59" pos:end="27:64"><name pos:start="27:59" pos:end="27:64"><name pos:start="27:59" pos:end="27:61">buf</name><index pos:start="27:62" pos:end="27:64">[<expr pos:start="27:63" pos:end="27:63"><literal type="number" pos:start="27:63" pos:end="27:63">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="31:5" pos:end="31:27"><expr pos:start="31:5" pos:end="31:26"><name pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:12">flags</name></name><operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:26"><name pos:start="31:15" pos:end="31:19">avctx</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:26">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:29"><expr pos:start="33:5" pos:end="33:28"><name pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:13">flags2</name></name><operator pos:start="33:14" pos:end="33:14">=</operator> <name pos:start="33:16" pos:end="33:28"><name pos:start="33:16" pos:end="33:20">avctx</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:28">flags2</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="37:5" pos:end="37:34">/* no supplementary picture */</comment>

    <if_stmt pos:start="39:5" pos:end="59:5"><if pos:start="39:5" pos:end="59:5">if <condition pos:start="39:8" pos:end="39:22">(<expr pos:start="39:9" pos:end="39:21"><name pos:start="39:9" pos:end="39:16">buf_size</name> <operator pos:start="39:18" pos:end="39:19">==</operator> <literal type="number" pos:start="39:21" pos:end="39:21">0</literal></expr>)</condition> <block pos:start="39:24" pos:end="59:5">{<block_content pos:start="43:9" pos:end="57:17">

        <comment type="block" pos:start="41:9" pos:end="41:43">/* special case for last picture */</comment>

        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="53:9">if <condition pos:start="43:12" pos:end="43:51">(<expr pos:start="43:13" pos:end="43:50"><name pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:24">low_delay</name></name><operator pos:start="43:25" pos:end="43:26">==</operator><literal type="number" pos:start="43:27" pos:end="43:27">0</literal> <operator pos:start="43:29" pos:end="43:30">&amp;&amp;</operator> <name pos:start="43:32" pos:end="43:50"><name pos:start="43:32" pos:end="43:32">s</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:50">next_picture_ptr</name></name></expr>)</condition> <block pos:start="43:53" pos:end="53:9">{<block_content pos:start="45:13" pos:end="51:41">

            <expr_stmt pos:start="45:13" pos:end="45:50"><expr pos:start="45:13" pos:end="45:49"><operator pos:start="45:13" pos:end="45:13">*</operator><name pos:start="45:14" pos:end="45:17">pict</name><operator pos:start="45:18" pos:end="45:18">=</operator> <operator pos:start="45:20" pos:end="45:20">*</operator><operator pos:start="45:21" pos:end="45:21">(</operator><name pos:start="45:22" pos:end="45:28">AVFrame</name><operator pos:start="45:29" pos:end="45:29">*</operator><operator pos:start="45:30" pos:end="45:30">)</operator><name pos:start="45:31" pos:end="45:49"><name pos:start="45:31" pos:end="45:31">s</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:49">next_picture_ptr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:38"><expr pos:start="47:13" pos:end="47:37"><name pos:start="47:13" pos:end="47:31"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:31">next_picture_ptr</name></name><operator pos:start="47:32" pos:end="47:32">=</operator> <name pos:start="47:34" pos:end="47:37">NULL</name></expr>;</expr_stmt>



            <expr_stmt pos:start="51:13" pos:end="51:41"><expr pos:start="51:13" pos:end="51:40"><operator pos:start="51:13" pos:end="51:13">*</operator><name pos:start="51:14" pos:end="51:22">data_size</name> <operator pos:start="51:24" pos:end="51:24">=</operator> <sizeof pos:start="51:26" pos:end="51:40">sizeof<argument_list pos:start="51:32" pos:end="51:40">(<argument pos:start="51:33" pos:end="51:39"><expr pos:start="51:33" pos:end="51:39"><name pos:start="51:33" pos:end="51:39">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="57:9" pos:end="57:17">return <expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="91:5"><if pos:start="63:5" pos:end="91:5">if<condition pos:start="63:7" pos:end="63:37">(<expr pos:start="63:8" pos:end="63:36"><name pos:start="63:8" pos:end="63:15"><name pos:start="63:8" pos:end="63:8">s</name><operator pos:start="63:9" pos:end="63:10">-&gt;</operator><name pos:start="63:11" pos:end="63:15">flags</name></name><operator pos:start="63:16" pos:end="63:16">&amp;</operator><name pos:start="63:17" pos:end="63:36">CODEC_FLAG_TRUNCATED</name></expr>)</condition><block pos:start="63:38" pos:end="91:5">{<block_content pos:start="65:9" pos:end="89:28">

        <decl_stmt pos:start="65:9" pos:end="65:17"><decl pos:start="65:9" pos:end="65:16"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:16">next</name></decl>;</decl_stmt>

        

        <if_stmt pos:start="69:9" pos:end="83:9"><if pos:start="69:9" pos:end="73:9">if<condition pos:start="69:11" pos:end="69:39">(<expr pos:start="69:12" pos:end="69:38"><name pos:start="69:12" pos:end="69:22"><name pos:start="69:12" pos:end="69:12">s</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:22">codec_id</name></name><operator pos:start="69:23" pos:end="69:24">==</operator><name pos:start="69:25" pos:end="69:38">CODEC_ID_MPEG4</name></expr>)</condition><block pos:start="69:40" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:76">

            <expr_stmt pos:start="71:13" pos:end="71:76"><expr pos:start="71:13" pos:end="71:75"><name pos:start="71:13" pos:end="71:16">next</name><operator pos:start="71:17" pos:end="71:17">=</operator> <call pos:start="71:19" pos:end="71:75"><name pos:start="71:19" pos:end="71:41">ff_mpeg4_find_frame_end</name><argument_list pos:start="71:42" pos:end="71:75">(<argument pos:start="71:43" pos:end="71:59"><expr pos:start="71:43" pos:end="71:59"><operator pos:start="71:43" pos:end="71:43">&amp;</operator><name pos:start="71:44" pos:end="71:59"><name pos:start="71:44" pos:end="71:44">s</name><operator pos:start="71:45" pos:end="71:46">-&gt;</operator><name pos:start="71:47" pos:end="71:59">parse_context</name></name></expr></argument>, <argument pos:start="71:62" pos:end="71:64"><expr pos:start="71:62" pos:end="71:64"><name pos:start="71:62" pos:end="71:64">buf</name></expr></argument>, <argument pos:start="71:67" pos:end="71:74"><expr pos:start="71:67" pos:end="71:74"><name pos:start="71:67" pos:end="71:74">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="73:10" pos:end="77:9">else if<condition pos:start="73:17" pos:end="73:44">(<expr pos:start="73:18" pos:end="73:43"><name pos:start="73:18" pos:end="73:28"><name pos:start="73:18" pos:end="73:18">s</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:28">codec_id</name></name><operator pos:start="73:29" pos:end="73:30">==</operator><name pos:start="73:31" pos:end="73:43">CODEC_ID_H263</name></expr>)</condition><block pos:start="73:45" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:72">

            <expr_stmt pos:start="75:13" pos:end="75:72"><expr pos:start="75:13" pos:end="75:71"><name pos:start="75:13" pos:end="75:16">next</name><operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:71"><name pos:start="75:19" pos:end="75:37">h263_find_frame_end</name><argument_list pos:start="75:38" pos:end="75:71">(<argument pos:start="75:39" pos:end="75:55"><expr pos:start="75:39" pos:end="75:55"><operator pos:start="75:39" pos:end="75:39">&amp;</operator><name pos:start="75:40" pos:end="75:55"><name pos:start="75:40" pos:end="75:40">s</name><operator pos:start="75:41" pos:end="75:42">-&gt;</operator><name pos:start="75:43" pos:end="75:55">parse_context</name></name></expr></argument>, <argument pos:start="75:58" pos:end="75:60"><expr pos:start="75:58" pos:end="75:60"><name pos:start="75:58" pos:end="75:60">buf</name></expr></argument>, <argument pos:start="75:63" pos:end="75:70"><expr pos:start="75:63" pos:end="75:70"><name pos:start="75:63" pos:end="75:70">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="77:10" pos:end="83:9">else<block pos:start="77:14" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:22">

            <expr_stmt pos:start="79:13" pos:end="79:95"><expr pos:start="79:13" pos:end="79:94"><call pos:start="79:13" pos:end="79:94"><name pos:start="79:13" pos:end="79:18">av_log</name><argument_list pos:start="79:19" pos:end="79:94">(<argument pos:start="79:20" pos:end="79:27"><expr pos:start="79:20" pos:end="79:27"><name pos:start="79:20" pos:end="79:27"><name pos:start="79:20" pos:end="79:20">s</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:27">avctx</name></name></expr></argument>, <argument pos:start="79:30" pos:end="79:41"><expr pos:start="79:30" pos:end="79:41"><name pos:start="79:30" pos:end="79:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:44" pos:end="79:93"><expr pos:start="79:44" pos:end="79:93"><literal type="string" pos:start="79:44" pos:end="79:93">"this codec doesnt support truncated bitstreams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="81:13" pos:end="81:22">return <expr pos:start="81:20" pos:end="81:21"><operator pos:start="81:20" pos:end="81:20">-</operator><literal type="number" pos:start="81:21" pos:end="81:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

        

        <if_stmt pos:start="87:9" pos:end="89:28"><if pos:start="87:9" pos:end="89:28">if<condition pos:start="87:11" pos:end="87:76">( <expr pos:start="87:13" pos:end="87:74"><call pos:start="87:13" pos:end="87:70"><name pos:start="87:13" pos:end="87:28">ff_combine_frame</name><argument_list pos:start="87:29" pos:end="87:70">(<argument pos:start="87:30" pos:end="87:46"><expr pos:start="87:30" pos:end="87:46"><operator pos:start="87:30" pos:end="87:30">&amp;</operator><name pos:start="87:31" pos:end="87:46"><name pos:start="87:31" pos:end="87:31">s</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:46">parse_context</name></name></expr></argument>, <argument pos:start="87:49" pos:end="87:52"><expr pos:start="87:49" pos:end="87:52"><name pos:start="87:49" pos:end="87:52">next</name></expr></argument>, <argument pos:start="87:55" pos:end="87:58"><expr pos:start="87:55" pos:end="87:58"><operator pos:start="87:55" pos:end="87:55">&amp;</operator><name pos:start="87:56" pos:end="87:58">buf</name></expr></argument>, <argument pos:start="87:61" pos:end="87:69"><expr pos:start="87:61" pos:end="87:69"><operator pos:start="87:61" pos:end="87:61">&amp;</operator><name pos:start="87:62" pos:end="87:69">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="87:72" pos:end="87:72">&lt;</operator> <literal type="number" pos:start="87:74" pos:end="87:74">0</literal></expr> )</condition><block type="pseudo" pos:start="89:13" pos:end="89:28"><block_content pos:start="89:13" pos:end="89:28">

            <return pos:start="89:13" pos:end="89:28">return <expr pos:start="89:20" pos:end="89:27"><name pos:start="89:20" pos:end="89:27">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    

<label pos:start="97:1" pos:end="97:6"><name pos:start="97:1" pos:end="97:5">retry</name>:</label>

    

    <if_stmt pos:start="101:5" pos:end="107:47"><if pos:start="101:5" pos:end="105:5">if<condition pos:start="101:7" pos:end="101:67">(<expr pos:start="101:8" pos:end="101:66"><name pos:start="101:8" pos:end="101:31"><name pos:start="101:8" pos:end="101:8">s</name><operator pos:start="101:9" pos:end="101:10">-&gt;</operator><name pos:start="101:11" pos:end="101:31">bitstream_buffer_size</name></name> <operator pos:start="101:33" pos:end="101:34">&amp;&amp;</operator> <operator pos:start="101:36" pos:end="101:36">(</operator><name pos:start="101:37" pos:end="101:50"><name pos:start="101:37" pos:end="101:37">s</name><operator pos:start="101:38" pos:end="101:39">-&gt;</operator><name pos:start="101:40" pos:end="101:50">divx_packed</name></name> <operator pos:start="101:52" pos:end="101:53">||</operator> <name pos:start="101:55" pos:end="101:62">buf_size</name><operator pos:start="101:63" pos:end="101:63">&lt;</operator><literal type="number" pos:start="101:64" pos:end="101:65">20</literal><operator pos:start="101:66" pos:end="101:66">)</operator></expr>)</condition><block pos:start="101:68" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:79"> <comment type="line" pos:start="101:70" pos:end="101:100">//divx 5.01+/xvid frame reorder</comment>

        <expr_stmt pos:start="103:9" pos:end="103:79"><expr pos:start="103:9" pos:end="103:78"><call pos:start="103:9" pos:end="103:78"><name pos:start="103:9" pos:end="103:21">init_get_bits</name><argument_list pos:start="103:22" pos:end="103:78">(<argument pos:start="103:23" pos:end="103:28"><expr pos:start="103:23" pos:end="103:28"><operator pos:start="103:23" pos:end="103:23">&amp;</operator><name pos:start="103:24" pos:end="103:28"><name pos:start="103:24" pos:end="103:24">s</name><operator pos:start="103:25" pos:end="103:26">-&gt;</operator><name pos:start="103:27" pos:end="103:28">gb</name></name></expr></argument>, <argument pos:start="103:31" pos:end="103:49"><expr pos:start="103:31" pos:end="103:49"><name pos:start="103:31" pos:end="103:49"><name pos:start="103:31" pos:end="103:31">s</name><operator pos:start="103:32" pos:end="103:33">-&gt;</operator><name pos:start="103:34" pos:end="103:49">bitstream_buffer</name></name></expr></argument>, <argument pos:start="103:52" pos:end="103:77"><expr pos:start="103:52" pos:end="103:77"><name pos:start="103:52" pos:end="103:75"><name pos:start="103:52" pos:end="103:52">s</name><operator pos:start="103:53" pos:end="103:54">-&gt;</operator><name pos:start="103:55" pos:end="103:75">bitstream_buffer_size</name></name><operator pos:start="103:76" pos:end="103:76">*</operator><literal type="number" pos:start="103:77" pos:end="103:77">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="105:6" pos:end="107:47">else<block type="pseudo" pos:start="107:9" pos:end="107:47"><block_content pos:start="107:9" pos:end="107:47">

        <expr_stmt pos:start="107:9" pos:end="107:47"><expr pos:start="107:9" pos:end="107:46"><call pos:start="107:9" pos:end="107:46"><name pos:start="107:9" pos:end="107:21">init_get_bits</name><argument_list pos:start="107:22" pos:end="107:46">(<argument pos:start="107:23" pos:end="107:28"><expr pos:start="107:23" pos:end="107:28"><operator pos:start="107:23" pos:end="107:23">&amp;</operator><name pos:start="107:24" pos:end="107:28"><name pos:start="107:24" pos:end="107:24">s</name><operator pos:start="107:25" pos:end="107:26">-&gt;</operator><name pos:start="107:27" pos:end="107:28">gb</name></name></expr></argument>, <argument pos:start="107:31" pos:end="107:33"><expr pos:start="107:31" pos:end="107:33"><name pos:start="107:31" pos:end="107:33">buf</name></expr></argument>, <argument pos:start="107:36" pos:end="107:45"><expr pos:start="107:36" pos:end="107:45"><name pos:start="107:36" pos:end="107:43">buf_size</name><operator pos:start="107:44" pos:end="107:44">*</operator><literal type="number" pos:start="107:45" pos:end="107:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:31"><expr pos:start="109:5" pos:end="109:30"><name pos:start="109:5" pos:end="109:28"><name pos:start="109:5" pos:end="109:5">s</name><operator pos:start="109:6" pos:end="109:7">-&gt;</operator><name pos:start="109:8" pos:end="109:28">bitstream_buffer_size</name></name><operator pos:start="109:29" pos:end="109:29">=</operator><literal type="number" pos:start="109:30" pos:end="109:30">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:32">(<expr pos:start="113:9" pos:end="113:31"><operator pos:start="113:9" pos:end="113:9">!</operator><name pos:start="113:10" pos:end="113:31"><name pos:start="113:10" pos:end="113:10">s</name><operator pos:start="113:11" pos:end="113:12">-&gt;</operator><name pos:start="113:13" pos:end="113:31">context_initialized</name></name></expr>)</condition> <block pos:start="113:34" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:22">

        <if_stmt pos:start="115:9" pos:end="117:22"><if pos:start="115:9" pos:end="117:22">if <condition pos:start="115:12" pos:end="115:35">(<expr pos:start="115:13" pos:end="115:34"><call pos:start="115:13" pos:end="115:30"><name pos:start="115:13" pos:end="115:27">MPV_common_init</name><argument_list pos:start="115:28" pos:end="115:30">(<argument pos:start="115:29" pos:end="115:29"><expr pos:start="115:29" pos:end="115:29"><name pos:start="115:29" pos:end="115:29">s</name></expr></argument>)</argument_list></call> <operator pos:start="115:32" pos:end="115:32">&lt;</operator> <literal type="number" pos:start="115:34" pos:end="115:34">0</literal></expr>)</condition><block type="pseudo" pos:start="117:13" pos:end="117:22"><block_content pos:start="117:13" pos:end="117:22"> <comment type="line" pos:start="115:37" pos:end="115:93">//we need the idct permutaton for reading a custom matrix</comment>

            <return pos:start="117:13" pos:end="117:22">return <expr pos:start="117:20" pos:end="117:21"><operator pos:start="117:20" pos:end="117:20">-</operator><literal type="number" pos:start="117:21" pos:end="117:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    

    <comment type="line" pos:start="123:5" pos:end="123:108">//we need to set current_picture_ptr before reading the header, otherwise we cant store anyting im there</comment>

    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if<condition pos:start="125:7" pos:end="125:71">(<expr pos:start="125:8" pos:end="125:70"><name pos:start="125:8" pos:end="125:29"><name pos:start="125:8" pos:end="125:8">s</name><operator pos:start="125:9" pos:end="125:10">-&gt;</operator><name pos:start="125:11" pos:end="125:29">current_picture_ptr</name></name><operator pos:start="125:30" pos:end="125:31">==</operator><name pos:start="125:32" pos:end="125:35">NULL</name> <operator pos:start="125:37" pos:end="125:38">||</operator> <name pos:start="125:40" pos:end="125:70"><name pos:start="125:40" pos:end="125:40">s</name><operator pos:start="125:41" pos:end="125:42">-&gt;</operator><name pos:start="125:43" pos:end="125:61">current_picture_ptr</name><operator pos:start="125:62" pos:end="125:63">-&gt;</operator><name pos:start="125:64" pos:end="125:67">data</name><index pos:start="125:68" pos:end="125:70">[<expr pos:start="125:69" pos:end="125:69"><literal type="number" pos:start="125:69" pos:end="125:69">0</literal></expr>]</index></name></expr>)</condition><block pos:start="125:72" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:47">

        <decl_stmt pos:start="127:9" pos:end="127:44"><decl pos:start="127:9" pos:end="127:43"><type pos:start="127:9" pos:end="127:11"><name pos:start="127:9" pos:end="127:11">int</name></type> <name pos:start="127:13" pos:end="127:13">i</name><init pos:start="127:14" pos:end="127:43">= <expr pos:start="127:16" pos:end="127:43"><call pos:start="127:16" pos:end="127:43"><name pos:start="127:16" pos:end="127:37">ff_find_unused_picture</name><argument_list pos:start="127:38" pos:end="127:43">(<argument pos:start="127:39" pos:end="127:39"><expr pos:start="127:39" pos:end="127:39"><name pos:start="127:39" pos:end="127:39">s</name></expr></argument>, <argument pos:start="127:42" pos:end="127:42"><expr pos:start="127:42" pos:end="127:42"><literal type="number" pos:start="127:42" pos:end="127:42">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:47"><expr pos:start="129:9" pos:end="129:46"><name pos:start="129:9" pos:end="129:30"><name pos:start="129:9" pos:end="129:9">s</name><operator pos:start="129:10" pos:end="129:11">-&gt;</operator><name pos:start="129:12" pos:end="129:30">current_picture_ptr</name></name><operator pos:start="129:31" pos:end="129:31">=</operator> <operator pos:start="129:33" pos:end="129:33">&amp;</operator><name pos:start="129:34" pos:end="129:46"><name pos:start="129:34" pos:end="129:34">s</name><operator pos:start="129:35" pos:end="129:36">-&gt;</operator><name pos:start="129:37" pos:end="129:43">picture</name><index pos:start="129:44" pos:end="129:46">[<expr pos:start="129:45" pos:end="129:45"><name pos:start="129:45" pos:end="129:45">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

      

    <comment type="block" pos:start="135:5" pos:end="135:22">/* let's go :-) */</comment>

    <if_stmt pos:start="137:5" pos:end="179:5"><if pos:start="137:5" pos:end="141:5">if <condition pos:start="137:8" pos:end="137:30">(<expr pos:start="137:9" pos:end="137:29"><name pos:start="137:9" pos:end="137:26"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:26">msmpeg4_version</name></name><operator pos:start="137:27" pos:end="137:28">==</operator><literal type="number" pos:start="137:29" pos:end="137:29">5</literal></expr>)</condition> <block pos:start="137:32" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:46">

        <expr_stmt pos:start="139:9" pos:end="139:46"><expr pos:start="139:9" pos:end="139:45"><name pos:start="139:9" pos:end="139:11">ret</name><operator pos:start="139:12" pos:end="139:12">=</operator> <call pos:start="139:14" pos:end="139:45"><name pos:start="139:14" pos:end="139:42">ff_wmv2_decode_picture_header</name><argument_list pos:start="139:43" pos:end="139:45">(<argument pos:start="139:44" pos:end="139:44"><expr pos:start="139:44" pos:end="139:44"><name pos:start="139:44" pos:end="139:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="141:7" pos:end="145:5">else if <condition pos:start="141:15" pos:end="141:34">(<expr pos:start="141:16" pos:end="141:33"><name pos:start="141:16" pos:end="141:33"><name pos:start="141:16" pos:end="141:16">s</name><operator pos:start="141:17" pos:end="141:18">-&gt;</operator><name pos:start="141:19" pos:end="141:33">msmpeg4_version</name></name></expr>)</condition> <block pos:start="141:36" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:47">

        <expr_stmt pos:start="143:9" pos:end="143:47"><expr pos:start="143:9" pos:end="143:46"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <call pos:start="143:15" pos:end="143:46"><name pos:start="143:15" pos:end="143:43">msmpeg4_decode_picture_header</name><argument_list pos:start="143:44" pos:end="143:46">(<argument pos:start="143:45" pos:end="143:45"><expr pos:start="143:45" pos:end="143:45"><name pos:start="143:45" pos:end="143:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="145:7" pos:end="167:5">else if <condition pos:start="145:15" pos:end="145:28">(<expr pos:start="145:16" pos:end="145:27"><name pos:start="145:16" pos:end="145:27"><name pos:start="145:16" pos:end="145:16">s</name><operator pos:start="145:17" pos:end="145:18">-&gt;</operator><name pos:start="145:19" pos:end="145:27">h263_pred</name></name></expr>)</condition> <block pos:start="145:30" pos:end="167:5">{<block_content pos:start="147:9" pos:end="165:27">

        <if_stmt pos:start="147:9" pos:end="157:9"><if pos:start="147:9" pos:end="157:9">if<condition pos:start="147:11" pos:end="147:60">(<expr pos:start="147:12" pos:end="147:59"><name pos:start="147:12" pos:end="147:35"><name pos:start="147:12" pos:end="147:12">s</name><operator pos:start="147:13" pos:end="147:14">-&gt;</operator><name pos:start="147:15" pos:end="147:19">avctx</name><operator pos:start="147:20" pos:end="147:21">-&gt;</operator><name pos:start="147:22" pos:end="147:35">extradata_size</name></name> <operator pos:start="147:37" pos:end="147:38">&amp;&amp;</operator> <name pos:start="147:40" pos:end="147:56"><name pos:start="147:40" pos:end="147:40">s</name><operator pos:start="147:41" pos:end="147:42">-&gt;</operator><name pos:start="147:43" pos:end="147:56">picture_number</name></name><operator pos:start="147:57" pos:end="147:58">==</operator><literal type="number" pos:start="147:59" pos:end="147:59">0</literal></expr>)</condition><block pos:start="147:61" pos:end="157:9">{<block_content pos:start="149:13" pos:end="155:57">

            <decl_stmt pos:start="149:13" pos:end="149:29"><decl pos:start="149:13" pos:end="149:28"><type pos:start="149:13" pos:end="149:25"><name pos:start="149:13" pos:end="149:25">GetBitContext</name></type> <name pos:start="149:27" pos:end="149:28">gb</name></decl>;</decl_stmt>

            

            <expr_stmt pos:start="153:13" pos:end="153:80"><expr pos:start="153:13" pos:end="153:79"><call pos:start="153:13" pos:end="153:79"><name pos:start="153:13" pos:end="153:25">init_get_bits</name><argument_list pos:start="153:26" pos:end="153:79">(<argument pos:start="153:27" pos:end="153:29"><expr pos:start="153:27" pos:end="153:29"><operator pos:start="153:27" pos:end="153:27">&amp;</operator><name pos:start="153:28" pos:end="153:29">gb</name></expr></argument>, <argument pos:start="153:32" pos:end="153:50"><expr pos:start="153:32" pos:end="153:50"><name pos:start="153:32" pos:end="153:50"><name pos:start="153:32" pos:end="153:32">s</name><operator pos:start="153:33" pos:end="153:34">-&gt;</operator><name pos:start="153:35" pos:end="153:39">avctx</name><operator pos:start="153:40" pos:end="153:41">-&gt;</operator><name pos:start="153:42" pos:end="153:50">extradata</name></name></expr></argument>, <argument pos:start="153:53" pos:end="153:78"><expr pos:start="153:53" pos:end="153:78"><name pos:start="153:53" pos:end="153:76"><name pos:start="153:53" pos:end="153:53">s</name><operator pos:start="153:54" pos:end="153:55">-&gt;</operator><name pos:start="153:56" pos:end="153:60">avctx</name><operator pos:start="153:61" pos:end="153:62">-&gt;</operator><name pos:start="153:63" pos:end="153:76">extradata_size</name></name><operator pos:start="153:77" pos:end="153:77">*</operator><literal type="number" pos:start="153:78" pos:end="153:78">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:57"><expr pos:start="155:13" pos:end="155:56"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <call pos:start="155:19" pos:end="155:56"><name pos:start="155:19" pos:end="155:48">ff_mpeg4_decode_picture_header</name><argument_list pos:start="155:49" pos:end="155:56">(<argument pos:start="155:50" pos:end="155:50"><expr pos:start="155:50" pos:end="155:50"><name pos:start="155:50" pos:end="155:50">s</name></expr></argument>, <argument pos:start="155:53" pos:end="155:55"><expr pos:start="155:53" pos:end="155:55"><operator pos:start="155:53" pos:end="155:53">&amp;</operator><name pos:start="155:54" pos:end="155:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:56"><expr pos:start="159:9" pos:end="159:55"><name pos:start="159:9" pos:end="159:11">ret</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <call pos:start="159:15" pos:end="159:55"><name pos:start="159:15" pos:end="159:44">ff_mpeg4_decode_picture_header</name><argument_list pos:start="159:45" pos:end="159:55">(<argument pos:start="159:46" pos:end="159:46"><expr pos:start="159:46" pos:end="159:46"><name pos:start="159:46" pos:end="159:46">s</name></expr></argument>, <argument pos:start="159:49" pos:end="159:54"><expr pos:start="159:49" pos:end="159:54"><operator pos:start="159:49" pos:end="159:49">&amp;</operator><name pos:start="159:50" pos:end="159:54"><name pos:start="159:50" pos:end="159:50">s</name><operator pos:start="159:51" pos:end="159:52">-&gt;</operator><name pos:start="159:53" pos:end="159:54">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="163:9" pos:end="165:27"><if pos:start="163:9" pos:end="165:27">if<condition pos:start="163:11" pos:end="163:42">(<expr pos:start="163:12" pos:end="163:41"><name pos:start="163:12" pos:end="163:19"><name pos:start="163:12" pos:end="163:12">s</name><operator pos:start="163:13" pos:end="163:14">-&gt;</operator><name pos:start="163:15" pos:end="163:19">flags</name></name><operator pos:start="163:20" pos:end="163:20">&amp;</operator> <name pos:start="163:22" pos:end="163:41">CODEC_FLAG_LOW_DELAY</name></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:27"><block_content pos:start="165:13" pos:end="165:27">

            <expr_stmt pos:start="165:13" pos:end="165:27"><expr pos:start="165:13" pos:end="165:26"><name pos:start="165:13" pos:end="165:24"><name pos:start="165:13" pos:end="165:13">s</name><operator pos:start="165:14" pos:end="165:15">-&gt;</operator><name pos:start="165:16" pos:end="165:24">low_delay</name></name><operator pos:start="165:25" pos:end="165:25">=</operator><literal type="number" pos:start="165:26" pos:end="165:26">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="167:7" pos:end="171:5">else if <condition pos:start="167:15" pos:end="167:45">(<expr pos:start="167:16" pos:end="167:44"><name pos:start="167:16" pos:end="167:26"><name pos:start="167:16" pos:end="167:16">s</name><operator pos:start="167:17" pos:end="167:18">-&gt;</operator><name pos:start="167:19" pos:end="167:26">codec_id</name></name> <operator pos:start="167:28" pos:end="167:29">==</operator> <name pos:start="167:31" pos:end="167:44">CODEC_ID_H263I</name></expr>)</condition> <block pos:start="167:47" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:50">

        <expr_stmt pos:start="169:9" pos:end="169:50"><expr pos:start="169:9" pos:end="169:49"><name pos:start="169:9" pos:end="169:11">ret</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <call pos:start="169:15" pos:end="169:49"><name pos:start="169:15" pos:end="169:46">intel_h263_decode_picture_header</name><argument_list pos:start="169:47" pos:end="169:49">(<argument pos:start="169:48" pos:end="169:48"><expr pos:start="169:48" pos:end="169:48"><name pos:start="169:48" pos:end="169:48">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="171:7" pos:end="175:5">else if <condition pos:start="171:15" pos:end="171:27">(<expr pos:start="171:16" pos:end="171:26"><name pos:start="171:16" pos:end="171:26"><name pos:start="171:16" pos:end="171:16">s</name><operator pos:start="171:17" pos:end="171:18">-&gt;</operator><name pos:start="171:19" pos:end="171:26">h263_flv</name></name></expr>)</condition> <block pos:start="171:29" pos:end="175:5">{<block_content pos:start="173:9" pos:end="173:48">

        <expr_stmt pos:start="173:9" pos:end="173:48"><expr pos:start="173:9" pos:end="173:47"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <call pos:start="173:15" pos:end="173:47"><name pos:start="173:15" pos:end="173:44">flv_h263_decode_picture_header</name><argument_list pos:start="173:45" pos:end="173:47">(<argument pos:start="173:46" pos:end="173:46"><expr pos:start="173:46" pos:end="173:46"><name pos:start="173:46" pos:end="173:46">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="175:7" pos:end="179:5">else <block pos:start="175:12" pos:end="179:5">{<block_content pos:start="177:9" pos:end="177:44">

        <expr_stmt pos:start="177:9" pos:end="177:44"><expr pos:start="177:9" pos:end="177:43"><name pos:start="177:9" pos:end="177:11">ret</name> <operator pos:start="177:13" pos:end="177:13">=</operator> <call pos:start="177:15" pos:end="177:43"><name pos:start="177:15" pos:end="177:40">h263_decode_picture_header</name><argument_list pos:start="177:41" pos:end="177:43">(<argument pos:start="177:42" pos:end="177:42"><expr pos:start="177:42" pos:end="177:42"><name pos:start="177:42" pos:end="177:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    

    <if_stmt pos:start="183:5" pos:end="183:65"><if pos:start="183:5" pos:end="183:65">if<condition pos:start="183:7" pos:end="183:25">(<expr pos:start="183:8" pos:end="183:24"><name pos:start="183:8" pos:end="183:10">ret</name><operator pos:start="183:11" pos:end="183:12">==</operator><name pos:start="183:13" pos:end="183:24">FRAME_SKIPED</name></expr>)</condition><block type="pseudo" pos:start="183:27" pos:end="183:65"><block_content pos:start="183:27" pos:end="183:65"> <return pos:start="183:27" pos:end="183:65">return <expr pos:start="183:34" pos:end="183:64"><call pos:start="183:34" pos:end="183:64"><name pos:start="183:34" pos:end="183:51">get_consumed_bytes</name><argument_list pos:start="183:52" pos:end="183:64">(<argument pos:start="183:53" pos:end="183:53"><expr pos:start="183:53" pos:end="183:53"><name pos:start="183:53" pos:end="183:53">s</name></expr></argument>, <argument pos:start="183:56" pos:end="183:63"><expr pos:start="183:56" pos:end="183:63"><name pos:start="183:56" pos:end="183:63">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="187:5" pos:end="187:41">/* skip if the header was thrashed */</comment>

    <if_stmt pos:start="189:5" pos:end="195:5"><if pos:start="189:5" pos:end="195:5">if <condition pos:start="189:8" pos:end="189:16">(<expr pos:start="189:9" pos:end="189:15"><name pos:start="189:9" pos:end="189:11">ret</name> <operator pos:start="189:13" pos:end="189:13">&lt;</operator> <literal type="number" pos:start="189:15" pos:end="189:15">0</literal></expr>)</condition><block pos:start="189:17" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:18">

        <expr_stmt pos:start="191:9" pos:end="191:59"><expr pos:start="191:9" pos:end="191:58"><call pos:start="191:9" pos:end="191:58"><name pos:start="191:9" pos:end="191:14">av_log</name><argument_list pos:start="191:15" pos:end="191:58">(<argument pos:start="191:16" pos:end="191:23"><expr pos:start="191:16" pos:end="191:23"><name pos:start="191:16" pos:end="191:23"><name pos:start="191:16" pos:end="191:16">s</name><operator pos:start="191:17" pos:end="191:18">-&gt;</operator><name pos:start="191:19" pos:end="191:23">avctx</name></name></expr></argument>, <argument pos:start="191:26" pos:end="191:37"><expr pos:start="191:26" pos:end="191:37"><name pos:start="191:26" pos:end="191:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="191:40" pos:end="191:57"><expr pos:start="191:40" pos:end="191:57"><literal type="string" pos:start="191:40" pos:end="191:57">"header damaged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="193:9" pos:end="193:18">return <expr pos:start="193:16" pos:end="193:17"><operator pos:start="193:16" pos:end="193:16">-</operator><literal type="number" pos:start="193:17" pos:end="193:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    

    <expr_stmt pos:start="199:5" pos:end="199:39"><expr pos:start="199:5" pos:end="199:38"><name pos:start="199:5" pos:end="199:23"><name pos:start="199:5" pos:end="199:9">avctx</name><operator pos:start="199:10" pos:end="199:11">-&gt;</operator><name pos:start="199:12" pos:end="199:23">has_b_frames</name></name><operator pos:start="199:24" pos:end="199:24">=</operator> <operator pos:start="199:26" pos:end="199:26">!</operator><name pos:start="199:27" pos:end="199:38"><name pos:start="199:27" pos:end="199:27">s</name><operator pos:start="199:28" pos:end="199:29">-&gt;</operator><name pos:start="199:30" pos:end="199:38">low_delay</name></name></expr>;</expr_stmt>

    

    <if_stmt pos:start="203:5" pos:end="221:5"><if pos:start="203:5" pos:end="221:5">if<condition pos:start="203:7" pos:end="203:66">(<expr pos:start="203:8" pos:end="203:65"><name pos:start="203:8" pos:end="203:20"><name pos:start="203:8" pos:end="203:8">s</name><operator pos:start="203:9" pos:end="203:10">-&gt;</operator><name pos:start="203:11" pos:end="203:20">xvid_build</name></name><operator pos:start="203:21" pos:end="203:22">==</operator><literal type="number" pos:start="203:23" pos:end="203:23">0</literal> <operator pos:start="203:25" pos:end="203:26">&amp;&amp;</operator> <name pos:start="203:28" pos:end="203:42"><name pos:start="203:28" pos:end="203:28">s</name><operator pos:start="203:29" pos:end="203:30">-&gt;</operator><name pos:start="203:31" pos:end="203:42">divx_version</name></name><operator pos:start="203:43" pos:end="203:44">==</operator><literal type="number" pos:start="203:45" pos:end="203:45">0</literal> <operator pos:start="203:47" pos:end="203:48">&amp;&amp;</operator> <name pos:start="203:50" pos:end="203:62"><name pos:start="203:50" pos:end="203:50">s</name><operator pos:start="203:51" pos:end="203:52">-&gt;</operator><name pos:start="203:53" pos:end="203:62">lavc_build</name></name><operator pos:start="203:63" pos:end="203:64">==</operator><literal type="number" pos:start="203:65" pos:end="203:65">0</literal></expr>)</condition><block pos:start="203:67" pos:end="221:5">{<block_content pos:start="205:9" pos:end="220:0">

        <if_stmt pos:start="205:9" pos:end="220:0"><if pos:start="205:9" pos:end="220:0">if<condition pos:start="205:11" pos:end="207:104">(<expr pos:start="205:12" pos:end="207:103"><name pos:start="205:12" pos:end="205:37"><name pos:start="205:12" pos:end="205:12">s</name><operator pos:start="205:13" pos:end="205:14">-&gt;</operator><name pos:start="205:15" pos:end="205:19">avctx</name><operator pos:start="205:20" pos:end="205:21">-&gt;</operator><name pos:start="205:22" pos:end="205:37">stream_codec_tag</name></name> <operator pos:start="205:39" pos:end="205:40">==</operator> <call pos:start="205:42" pos:end="205:62"><name pos:start="205:42" pos:end="205:54">ff_get_fourcc</name><argument_list pos:start="205:55" pos:end="205:62">(<argument pos:start="205:56" pos:end="205:61"><expr pos:start="205:56" pos:end="205:61"><literal type="string" pos:start="205:56" pos:end="205:61">"XVID"</literal></expr></argument>)</argument_list></call> <operator pos:start="205:64" pos:end="205:65">||</operator> 

           <name pos:start="207:12" pos:end="207:30"><name pos:start="207:12" pos:end="207:12">s</name><operator pos:start="207:13" pos:end="207:14">-&gt;</operator><name pos:start="207:15" pos:end="207:19">avctx</name><operator pos:start="207:20" pos:end="207:21">-&gt;</operator><name pos:start="207:22" pos:end="207:30">codec_tag</name></name> <operator pos:start="207:32" pos:end="207:33">==</operator> <call pos:start="207:35" pos:end="207:55"><name pos:start="207:35" pos:end="207:47">ff_get_fourcc</name><argument_list pos:start="207:48" pos:end="207:55">(<argument pos:start="207:49" pos:end="207:54"><expr pos:start="207:49" pos:end="207:54"><literal type="string" pos:start="207:49" pos:end="207:54">"XVID"</literal></expr></argument>)</argument_list></call> <operator pos:start="207:57" pos:end="207:58">||</operator> <name pos:start="207:60" pos:end="207:78"><name pos:start="207:60" pos:end="207:60">s</name><operator pos:start="207:61" pos:end="207:62">-&gt;</operator><name pos:start="207:63" pos:end="207:67">avctx</name><operator pos:start="207:68" pos:end="207:69">-&gt;</operator><name pos:start="207:70" pos:end="207:78">codec_tag</name></name> <operator pos:start="207:80" pos:end="207:81">==</operator> <call pos:start="207:83" pos:end="207:103"><name pos:start="207:83" pos:end="207:95">ff_get_fourcc</name><argument_list pos:start="207:96" pos:end="207:103">(<argument pos:start="207:97" pos:end="207:102"><expr pos:start="207:97" pos:end="207:102"><literal type="string" pos:start="207:97" pos:end="207:102">"XVIX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="209:13" pos:end="220:0"><block_content pos:start="209:13" pos:end="220:0">

            <expr_stmt pos:start="209:13" pos:end="220:0"><expr pos:start="209:13" pos:end="209:29"><name pos:start="209:13" pos:end="209:25"><name pos:start="209:13" pos:end="209:13">s</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:25">xvid_build</name></name><operator pos:start="209:26" pos:end="209:26">=</operator> <operator pos:start="209:28" pos:end="209:28">-</operator><literal type="number" pos:start="209:29" pos:end="209:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="211:1" pos:end="211:5">#<cpp:directive pos:start="211:2" pos:end="211:3">if</cpp:directive> <expr pos:start="211:5" pos:end="211:5"><literal type="number" pos:start="211:5" pos:end="211:5">0</literal></expr></cpp:if>

        if(s-&gt;avctx-&gt;codec_tag == ff_get_fourcc("DIVX") &amp;&amp; s-&gt;vo_type==0 &amp;&amp; s-&gt;vol_control_parameters==1

           &amp;&amp; s-&gt;padding_bug_score &gt; 0 &amp;&amp; s-&gt;low_delay) <comment type="line" pos:start="215:57" pos:end="215:85">// XVID with modified fourcc </comment>

            s-&gt;xvid_build= -1;

<cpp:endif pos:start="219:1" pos:end="219:6">#<cpp:directive pos:start="219:2" pos:end="219:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="225:5" pos:end="231:5"><if pos:start="225:5" pos:end="231:5">if<condition pos:start="225:7" pos:end="225:66">(<expr pos:start="225:8" pos:end="225:65"><name pos:start="225:8" pos:end="225:20"><name pos:start="225:8" pos:end="225:8">s</name><operator pos:start="225:9" pos:end="225:10">-&gt;</operator><name pos:start="225:11" pos:end="225:20">xvid_build</name></name><operator pos:start="225:21" pos:end="225:22">==</operator><literal type="number" pos:start="225:23" pos:end="225:23">0</literal> <operator pos:start="225:25" pos:end="225:26">&amp;&amp;</operator> <name pos:start="225:28" pos:end="225:42"><name pos:start="225:28" pos:end="225:28">s</name><operator pos:start="225:29" pos:end="225:30">-&gt;</operator><name pos:start="225:31" pos:end="225:42">divx_version</name></name><operator pos:start="225:43" pos:end="225:44">==</operator><literal type="number" pos:start="225:45" pos:end="225:45">0</literal> <operator pos:start="225:47" pos:end="225:48">&amp;&amp;</operator> <name pos:start="225:50" pos:end="225:62"><name pos:start="225:50" pos:end="225:50">s</name><operator pos:start="225:51" pos:end="225:52">-&gt;</operator><name pos:start="225:53" pos:end="225:62">lavc_build</name></name><operator pos:start="225:63" pos:end="225:64">==</operator><literal type="number" pos:start="225:65" pos:end="225:65">0</literal></expr>)</condition><block pos:start="225:67" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:33">

        <if_stmt pos:start="227:9" pos:end="229:33"><if pos:start="227:9" pos:end="229:33">if<condition pos:start="227:11" pos:end="227:105">(<expr pos:start="227:12" pos:end="227:104"><name pos:start="227:12" pos:end="227:30"><name pos:start="227:12" pos:end="227:12">s</name><operator pos:start="227:13" pos:end="227:14">-&gt;</operator><name pos:start="227:15" pos:end="227:19">avctx</name><operator pos:start="227:20" pos:end="227:21">-&gt;</operator><name pos:start="227:22" pos:end="227:30">codec_tag</name></name> <operator pos:start="227:32" pos:end="227:33">==</operator> <call pos:start="227:35" pos:end="227:55"><name pos:start="227:35" pos:end="227:47">ff_get_fourcc</name><argument_list pos:start="227:48" pos:end="227:55">(<argument pos:start="227:49" pos:end="227:54"><expr pos:start="227:49" pos:end="227:54"><literal type="string" pos:start="227:49" pos:end="227:54">"DIVX"</literal></expr></argument>)</argument_list></call> <operator pos:start="227:57" pos:end="227:58">&amp;&amp;</operator> <name pos:start="227:60" pos:end="227:69"><name pos:start="227:60" pos:end="227:60">s</name><operator pos:start="227:61" pos:end="227:62">-&gt;</operator><name pos:start="227:63" pos:end="227:69">vo_type</name></name><operator pos:start="227:70" pos:end="227:71">==</operator><literal type="number" pos:start="227:72" pos:end="227:72">0</literal> <operator pos:start="227:74" pos:end="227:75">&amp;&amp;</operator> <name pos:start="227:77" pos:end="227:101"><name pos:start="227:77" pos:end="227:77">s</name><operator pos:start="227:78" pos:end="227:79">-&gt;</operator><name pos:start="227:80" pos:end="227:101">vol_control_parameters</name></name><operator pos:start="227:102" pos:end="227:103">==</operator><literal type="number" pos:start="227:104" pos:end="227:104">0</literal></expr>)</condition><block type="pseudo" pos:start="229:13" pos:end="229:33"><block_content pos:start="229:13" pos:end="229:33">

            <expr_stmt pos:start="229:13" pos:end="229:33"><expr pos:start="229:13" pos:end="229:32"><name pos:start="229:13" pos:end="229:27"><name pos:start="229:13" pos:end="229:13">s</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:27">divx_version</name></name><operator pos:start="229:28" pos:end="229:28">=</operator> <literal type="number" pos:start="229:30" pos:end="229:32">400</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="229:35" pos:end="229:42">//divx 4</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="235:5" pos:end="389:5"><if pos:start="235:5" pos:end="389:5">if<condition pos:start="235:7" pos:end="235:44">(<expr pos:start="235:8" pos:end="235:43"><name pos:start="235:8" pos:end="235:25"><name pos:start="235:8" pos:end="235:8">s</name><operator pos:start="235:9" pos:end="235:10">-&gt;</operator><name pos:start="235:11" pos:end="235:25">workaround_bugs</name></name><operator pos:start="235:26" pos:end="235:26">&amp;</operator><name pos:start="235:27" pos:end="235:43">FF_BUG_AUTODETECT</name></expr>)</condition><block pos:start="235:45" pos:end="389:5">{<block_content pos:start="237:9" pos:end="388:0">

        <expr_stmt pos:start="237:9" pos:end="237:49"><expr pos:start="237:9" pos:end="237:48"><name pos:start="237:9" pos:end="237:26"><name pos:start="237:9" pos:end="237:9">s</name><operator pos:start="237:10" pos:end="237:11">-&gt;</operator><name pos:start="237:12" pos:end="237:26">workaround_bugs</name></name> <operator pos:start="237:28" pos:end="237:29">&amp;=</operator> <operator pos:start="237:31" pos:end="237:31">~</operator><name pos:start="237:32" pos:end="237:48">FF_BUG_NO_PADDING</name></expr>;</expr_stmt>

        

        <if_stmt pos:start="241:9" pos:end="243:53"><if pos:start="241:9" pos:end="243:53">if<condition pos:start="241:11" pos:end="241:104">(<expr pos:start="241:12" pos:end="241:103"><name pos:start="241:12" pos:end="241:31"><name pos:start="241:12" pos:end="241:12">s</name><operator pos:start="241:13" pos:end="241:14">-&gt;</operator><name pos:start="241:15" pos:end="241:31">padding_bug_score</name></name> <operator pos:start="241:33" pos:end="241:33">&gt;</operator> <operator pos:start="241:35" pos:end="241:35">-</operator><literal type="number" pos:start="241:36" pos:end="241:36">2</literal> <operator pos:start="241:38" pos:end="241:39">&amp;&amp;</operator> <operator pos:start="241:41" pos:end="241:41">!</operator><name pos:start="241:42" pos:end="241:61"><name pos:start="241:42" pos:end="241:42">s</name><operator pos:start="241:43" pos:end="241:44">-&gt;</operator><name pos:start="241:45" pos:end="241:61">data_partitioning</name></name> <operator pos:start="241:63" pos:end="241:64">&amp;&amp;</operator> <operator pos:start="241:66" pos:end="241:66">(</operator><name pos:start="241:67" pos:end="241:81"><name pos:start="241:67" pos:end="241:67">s</name><operator pos:start="241:68" pos:end="241:69">-&gt;</operator><name pos:start="241:70" pos:end="241:81">divx_version</name></name> <operator pos:start="241:83" pos:end="241:84">||</operator> <operator pos:start="241:86" pos:end="241:86">!</operator><name pos:start="241:87" pos:end="241:102"><name pos:start="241:87" pos:end="241:87">s</name><operator pos:start="241:88" pos:end="241:89">-&gt;</operator><name pos:start="241:90" pos:end="241:102">resync_marker</name></name><operator pos:start="241:103" pos:end="241:103">)</operator></expr>)</condition><block type="pseudo" pos:start="243:13" pos:end="243:53"><block_content pos:start="243:13" pos:end="243:53">

            <expr_stmt pos:start="243:13" pos:end="243:53"><expr pos:start="243:13" pos:end="243:52"><name pos:start="243:13" pos:end="243:30"><name pos:start="243:13" pos:end="243:13">s</name><operator pos:start="243:14" pos:end="243:15">-&gt;</operator><name pos:start="243:16" pos:end="243:30">workaround_bugs</name></name> <operator pos:start="243:32" pos:end="243:33">|=</operator>  <name pos:start="243:36" pos:end="243:52">FF_BUG_NO_PADDING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="247:9" pos:end="249:51"><if pos:start="247:9" pos:end="249:51">if<condition pos:start="247:11" pos:end="247:56">(<expr pos:start="247:12" pos:end="247:55"><name pos:start="247:12" pos:end="247:30"><name pos:start="247:12" pos:end="247:12">s</name><operator pos:start="247:13" pos:end="247:14">-&gt;</operator><name pos:start="247:15" pos:end="247:19">avctx</name><operator pos:start="247:20" pos:end="247:21">-&gt;</operator><name pos:start="247:22" pos:end="247:30">codec_tag</name></name> <operator pos:start="247:32" pos:end="247:33">==</operator> <call pos:start="247:35" pos:end="247:55"><name pos:start="247:35" pos:end="247:47">ff_get_fourcc</name><argument_list pos:start="247:48" pos:end="247:55">(<argument pos:start="247:49" pos:end="247:54"><expr pos:start="247:49" pos:end="247:54"><literal type="string" pos:start="247:49" pos:end="247:54">"XVIX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="249:13" pos:end="249:51"><block_content pos:start="249:13" pos:end="249:51"> 

            <expr_stmt pos:start="249:13" pos:end="249:51"><expr pos:start="249:13" pos:end="249:50"><name pos:start="249:13" pos:end="249:30"><name pos:start="249:13" pos:end="249:13">s</name><operator pos:start="249:14" pos:end="249:15">-&gt;</operator><name pos:start="249:16" pos:end="249:30">workaround_bugs</name></name><operator pos:start="249:31" pos:end="249:32">|=</operator> <name pos:start="249:34" pos:end="249:50">FF_BUG_XVID_ILACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="253:9" pos:end="257:9"><if pos:start="253:9" pos:end="257:9">if<condition pos:start="253:11" pos:end="253:56">(<expr pos:start="253:12" pos:end="253:55"><name pos:start="253:12" pos:end="253:30"><name pos:start="253:12" pos:end="253:12">s</name><operator pos:start="253:13" pos:end="253:14">-&gt;</operator><name pos:start="253:15" pos:end="253:19">avctx</name><operator pos:start="253:20" pos:end="253:21">-&gt;</operator><name pos:start="253:22" pos:end="253:30">codec_tag</name></name> <operator pos:start="253:32" pos:end="253:33">==</operator> <call pos:start="253:35" pos:end="253:55"><name pos:start="253:35" pos:end="253:47">ff_get_fourcc</name><argument_list pos:start="253:48" pos:end="253:55">(<argument pos:start="253:49" pos:end="253:54"><expr pos:start="253:49" pos:end="253:54"><literal type="string" pos:start="253:49" pos:end="253:54">"UMP4"</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="253:57" pos:end="257:9">{<block_content pos:start="255:13" pos:end="255:45">

            <expr_stmt pos:start="255:13" pos:end="255:45"><expr pos:start="255:13" pos:end="255:44"><name pos:start="255:13" pos:end="255:30"><name pos:start="255:13" pos:end="255:13">s</name><operator pos:start="255:14" pos:end="255:15">-&gt;</operator><name pos:start="255:16" pos:end="255:30">workaround_bugs</name></name><operator pos:start="255:31" pos:end="255:32">|=</operator> <name pos:start="255:34" pos:end="255:44">FF_BUG_UMP4</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="261:9" pos:end="265:9"><if pos:start="261:9" pos:end="265:9">if<condition pos:start="261:11" pos:end="261:32">(<expr pos:start="261:12" pos:end="261:31"><name pos:start="261:12" pos:end="261:26"><name pos:start="261:12" pos:end="261:12">s</name><operator pos:start="261:13" pos:end="261:14">-&gt;</operator><name pos:start="261:15" pos:end="261:26">divx_version</name></name><operator pos:start="261:27" pos:end="261:28">&gt;=</operator><literal type="number" pos:start="261:29" pos:end="261:31">500</literal></expr>)</condition><block pos:start="261:33" pos:end="265:9">{<block_content pos:start="263:13" pos:end="263:52">

            <expr_stmt pos:start="263:13" pos:end="263:52"><expr pos:start="263:13" pos:end="263:51"><name pos:start="263:13" pos:end="263:30"><name pos:start="263:13" pos:end="263:13">s</name><operator pos:start="263:14" pos:end="263:15">-&gt;</operator><name pos:start="263:16" pos:end="263:30">workaround_bugs</name></name><operator pos:start="263:31" pos:end="263:32">|=</operator> <name pos:start="263:34" pos:end="263:51">FF_BUG_QPEL_CHROMA</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="269:9" pos:end="273:9"><if pos:start="269:9" pos:end="273:9">if<condition pos:start="269:11" pos:end="269:31">(<expr pos:start="269:12" pos:end="269:30"><name pos:start="269:12" pos:end="269:26"><name pos:start="269:12" pos:end="269:12">s</name><operator pos:start="269:13" pos:end="269:14">-&gt;</operator><name pos:start="269:15" pos:end="269:26">divx_version</name></name><operator pos:start="269:27" pos:end="269:27">&gt;</operator><literal type="number" pos:start="269:28" pos:end="269:30">502</literal></expr>)</condition><block pos:start="269:32" pos:end="273:9">{<block_content pos:start="271:13" pos:end="271:53">

            <expr_stmt pos:start="271:13" pos:end="271:53"><expr pos:start="271:13" pos:end="271:52"><name pos:start="271:13" pos:end="271:30"><name pos:start="271:13" pos:end="271:13">s</name><operator pos:start="271:14" pos:end="271:15">-&gt;</operator><name pos:start="271:16" pos:end="271:30">workaround_bugs</name></name><operator pos:start="271:31" pos:end="271:32">|=</operator> <name pos:start="271:34" pos:end="271:52">FF_BUG_QPEL_CHROMA2</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="277:9" pos:end="279:49"><if pos:start="277:9" pos:end="279:49">if<condition pos:start="277:11" pos:end="277:45">(<expr pos:start="277:12" pos:end="277:44"><name pos:start="277:12" pos:end="277:24"><name pos:start="277:12" pos:end="277:12">s</name><operator pos:start="277:13" pos:end="277:14">-&gt;</operator><name pos:start="277:15" pos:end="277:24">xvid_build</name></name> <operator pos:start="277:26" pos:end="277:27">&amp;&amp;</operator> <name pos:start="277:29" pos:end="277:41"><name pos:start="277:29" pos:end="277:29">s</name><operator pos:start="277:30" pos:end="277:31">-&gt;</operator><name pos:start="277:32" pos:end="277:41">xvid_build</name></name><operator pos:start="277:42" pos:end="277:43">&lt;=</operator><literal type="number" pos:start="277:44" pos:end="277:44">3</literal></expr>)</condition><block type="pseudo" pos:start="279:13" pos:end="279:49"><block_content pos:start="279:13" pos:end="279:49">

            <expr_stmt pos:start="279:13" pos:end="279:49"><expr pos:start="279:13" pos:end="279:48"><name pos:start="279:13" pos:end="279:32"><name pos:start="279:13" pos:end="279:13">s</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:32">padding_bug_score</name></name><operator pos:start="279:33" pos:end="279:33">=</operator> <literal type="number" pos:start="279:35" pos:end="279:37">256</literal><operator pos:start="279:38" pos:end="279:38">*</operator><literal type="number" pos:start="279:39" pos:end="279:41">256</literal><operator pos:start="279:42" pos:end="279:42">*</operator><literal type="number" pos:start="279:43" pos:end="279:45">256</literal><operator pos:start="279:46" pos:end="279:46">*</operator><literal type="number" pos:start="279:47" pos:end="279:48">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        

        <if_stmt pos:start="283:9" pos:end="285:52"><if pos:start="283:9" pos:end="285:52">if<condition pos:start="283:11" pos:end="283:45">(<expr pos:start="283:12" pos:end="283:44"><name pos:start="283:12" pos:end="283:24"><name pos:start="283:12" pos:end="283:12">s</name><operator pos:start="283:13" pos:end="283:14">-&gt;</operator><name pos:start="283:15" pos:end="283:24">xvid_build</name></name> <operator pos:start="283:26" pos:end="283:27">&amp;&amp;</operator> <name pos:start="283:29" pos:end="283:41"><name pos:start="283:29" pos:end="283:29">s</name><operator pos:start="283:30" pos:end="283:31">-&gt;</operator><name pos:start="283:32" pos:end="283:41">xvid_build</name></name><operator pos:start="283:42" pos:end="283:43">&lt;=</operator><literal type="number" pos:start="283:44" pos:end="283:44">1</literal></expr>)</condition><block type="pseudo" pos:start="285:13" pos:end="285:52"><block_content pos:start="285:13" pos:end="285:52">

            <expr_stmt pos:start="285:13" pos:end="285:52"><expr pos:start="285:13" pos:end="285:51"><name pos:start="285:13" pos:end="285:30"><name pos:start="285:13" pos:end="285:13">s</name><operator pos:start="285:14" pos:end="285:15">-&gt;</operator><name pos:start="285:16" pos:end="285:30">workaround_bugs</name></name><operator pos:start="285:31" pos:end="285:32">|=</operator> <name pos:start="285:34" pos:end="285:51">FF_BUG_QPEL_CHROMA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="289:9" pos:end="291:45"><if pos:start="289:9" pos:end="291:45">if<condition pos:start="289:11" pos:end="289:46">(<expr pos:start="289:12" pos:end="289:45"><name pos:start="289:12" pos:end="289:24"><name pos:start="289:12" pos:end="289:12">s</name><operator pos:start="289:13" pos:end="289:14">-&gt;</operator><name pos:start="289:15" pos:end="289:24">xvid_build</name></name> <operator pos:start="289:26" pos:end="289:27">&amp;&amp;</operator> <name pos:start="289:29" pos:end="289:41"><name pos:start="289:29" pos:end="289:29">s</name><operator pos:start="289:30" pos:end="289:31">-&gt;</operator><name pos:start="289:32" pos:end="289:41">xvid_build</name></name><operator pos:start="289:42" pos:end="289:43">&lt;=</operator><literal type="number" pos:start="289:44" pos:end="289:45">12</literal></expr>)</condition><block type="pseudo" pos:start="291:13" pos:end="291:45"><block_content pos:start="291:13" pos:end="291:45">

            <expr_stmt pos:start="291:13" pos:end="291:45"><expr pos:start="291:13" pos:end="291:44"><name pos:start="291:13" pos:end="291:30"><name pos:start="291:13" pos:end="291:13">s</name><operator pos:start="291:14" pos:end="291:15">-&gt;</operator><name pos:start="291:16" pos:end="291:30">workaround_bugs</name></name><operator pos:start="291:31" pos:end="291:32">|=</operator> <name pos:start="291:34" pos:end="291:44">FF_BUG_EDGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="295:9" pos:end="308:0"><if pos:start="295:9" pos:end="308:0">if<condition pos:start="295:11" pos:end="295:46">(<expr pos:start="295:12" pos:end="295:45"><name pos:start="295:12" pos:end="295:24"><name pos:start="295:12" pos:end="295:12">s</name><operator pos:start="295:13" pos:end="295:14">-&gt;</operator><name pos:start="295:15" pos:end="295:24">xvid_build</name></name> <operator pos:start="295:26" pos:end="295:27">&amp;&amp;</operator> <name pos:start="295:29" pos:end="295:41"><name pos:start="295:29" pos:end="295:29">s</name><operator pos:start="295:30" pos:end="295:31">-&gt;</operator><name pos:start="295:32" pos:end="295:41">xvid_build</name></name><operator pos:start="295:42" pos:end="295:43">&lt;=</operator><literal type="number" pos:start="295:44" pos:end="295:45">32</literal></expr>)</condition><block type="pseudo" pos:start="297:13" pos:end="308:0"><block_content pos:start="297:13" pos:end="308:0">

            <expr_stmt pos:start="297:13" pos:end="308:0"><expr pos:start="297:13" pos:end="297:47"><name pos:start="297:13" pos:end="297:30"><name pos:start="297:13" pos:end="297:13">s</name><operator pos:start="297:14" pos:end="297:15">-&gt;</operator><name pos:start="297:16" pos:end="297:30">workaround_bugs</name></name><operator pos:start="297:31" pos:end="297:32">|=</operator> <name pos:start="297:34" pos:end="297:47">FF_BUG_DC_CLIP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:define pos:start="301:1" pos:end="307:50">#<cpp:directive pos:start="301:2" pos:end="301:7">define</cpp:directive> <cpp:macro pos:start="301:9" pos:end="301:41"><name pos:start="301:9" pos:end="301:21">SET_QPEL_FUNC</name><parameter_list pos:start="301:22" pos:end="301:41">(<parameter pos:start="301:23" pos:end="301:30"><type pos:start="301:23" pos:end="301:30"><name pos:start="301:23" pos:end="301:30">postfix1</name></type></parameter>, <parameter pos:start="301:33" pos:end="301:40"><type pos:start="301:33" pos:end="301:40"><name pos:start="301:33" pos:end="301:40">postfix2</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="303:5" pos:end="307:50">s-&gt;dsp.put_ ## postfix1 = ff_put_ ## postfix2;\

    s-&gt;dsp.put_no_rnd_ ## postfix1 = ff_put_no_rnd_ ## postfix2;\

    s-&gt;dsp.avg_ ## postfix1 = ff_avg_ ## postfix2;</cpp:value></cpp:define>



        <if_stmt pos:start="311:9" pos:end="313:49"><if pos:start="311:9" pos:end="313:49">if<condition pos:start="311:11" pos:end="311:47">(<expr pos:start="311:12" pos:end="311:46"><name pos:start="311:12" pos:end="311:24"><name pos:start="311:12" pos:end="311:12">s</name><operator pos:start="311:13" pos:end="311:14">-&gt;</operator><name pos:start="311:15" pos:end="311:24">lavc_build</name></name> <operator pos:start="311:26" pos:end="311:27">&amp;&amp;</operator> <name pos:start="311:29" pos:end="311:41"><name pos:start="311:29" pos:end="311:29">s</name><operator pos:start="311:30" pos:end="311:31">-&gt;</operator><name pos:start="311:32" pos:end="311:41">lavc_build</name></name><operator pos:start="311:42" pos:end="311:42">&lt;</operator><literal type="number" pos:start="311:43" pos:end="311:46">4653</literal></expr>)</condition><block type="pseudo" pos:start="313:13" pos:end="313:49"><block_content pos:start="313:13" pos:end="313:49">

            <expr_stmt pos:start="313:13" pos:end="313:49"><expr pos:start="313:13" pos:end="313:48"><name pos:start="313:13" pos:end="313:30"><name pos:start="313:13" pos:end="313:13">s</name><operator pos:start="313:14" pos:end="313:15">-&gt;</operator><name pos:start="313:16" pos:end="313:30">workaround_bugs</name></name><operator pos:start="313:31" pos:end="313:32">|=</operator> <name pos:start="313:34" pos:end="313:48">FF_BUG_STD_QPEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        

        <if_stmt pos:start="317:9" pos:end="319:57"><if pos:start="317:9" pos:end="319:57">if<condition pos:start="317:11" pos:end="317:47">(<expr pos:start="317:12" pos:end="317:46"><name pos:start="317:12" pos:end="317:24"><name pos:start="317:12" pos:end="317:12">s</name><operator pos:start="317:13" pos:end="317:14">-&gt;</operator><name pos:start="317:15" pos:end="317:24">lavc_build</name></name> <operator pos:start="317:26" pos:end="317:27">&amp;&amp;</operator> <name pos:start="317:29" pos:end="317:41"><name pos:start="317:29" pos:end="317:29">s</name><operator pos:start="317:30" pos:end="317:31">-&gt;</operator><name pos:start="317:32" pos:end="317:41">lavc_build</name></name><operator pos:start="317:42" pos:end="317:42">&lt;</operator><literal type="number" pos:start="317:43" pos:end="317:46">4655</literal></expr>)</condition><block type="pseudo" pos:start="319:13" pos:end="319:57"><block_content pos:start="319:13" pos:end="319:57">

            <expr_stmt pos:start="319:13" pos:end="319:57"><expr pos:start="319:13" pos:end="319:56"><name pos:start="319:13" pos:end="319:30"><name pos:start="319:13" pos:end="319:13">s</name><operator pos:start="319:14" pos:end="319:15">-&gt;</operator><name pos:start="319:16" pos:end="319:30">workaround_bugs</name></name><operator pos:start="319:31" pos:end="319:32">|=</operator> <name pos:start="319:34" pos:end="319:56">FF_BUG_DIRECT_BLOCKSIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="323:9" pos:end="327:9"><if pos:start="323:9" pos:end="327:9">if<condition pos:start="323:11" pos:end="323:47">(<expr pos:start="323:12" pos:end="323:46"><name pos:start="323:12" pos:end="323:24"><name pos:start="323:12" pos:end="323:12">s</name><operator pos:start="323:13" pos:end="323:14">-&gt;</operator><name pos:start="323:15" pos:end="323:24">lavc_build</name></name> <operator pos:start="323:26" pos:end="323:27">&amp;&amp;</operator> <name pos:start="323:29" pos:end="323:41"><name pos:start="323:29" pos:end="323:29">s</name><operator pos:start="323:30" pos:end="323:31">-&gt;</operator><name pos:start="323:32" pos:end="323:41">lavc_build</name></name><operator pos:start="323:42" pos:end="323:42">&lt;</operator><literal type="number" pos:start="323:43" pos:end="323:46">4670</literal></expr>)</condition><block pos:start="323:48" pos:end="327:9">{<block_content pos:start="325:13" pos:end="325:45">

            <expr_stmt pos:start="325:13" pos:end="325:45"><expr pos:start="325:13" pos:end="325:44"><name pos:start="325:13" pos:end="325:30"><name pos:start="325:13" pos:end="325:13">s</name><operator pos:start="325:14" pos:end="325:15">-&gt;</operator><name pos:start="325:16" pos:end="325:30">workaround_bugs</name></name><operator pos:start="325:31" pos:end="325:32">|=</operator> <name pos:start="325:34" pos:end="325:44">FF_BUG_EDGE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        

        <if_stmt pos:start="331:9" pos:end="333:48"><if pos:start="331:9" pos:end="333:48">if<condition pos:start="331:11" pos:end="331:48">(<expr pos:start="331:12" pos:end="331:47"><name pos:start="331:12" pos:end="331:24"><name pos:start="331:12" pos:end="331:12">s</name><operator pos:start="331:13" pos:end="331:14">-&gt;</operator><name pos:start="331:15" pos:end="331:24">lavc_build</name></name> <operator pos:start="331:26" pos:end="331:27">&amp;&amp;</operator> <name pos:start="331:29" pos:end="331:41"><name pos:start="331:29" pos:end="331:29">s</name><operator pos:start="331:30" pos:end="331:31">-&gt;</operator><name pos:start="331:32" pos:end="331:41">lavc_build</name></name><operator pos:start="331:42" pos:end="331:43">&lt;=</operator><literal type="number" pos:start="331:44" pos:end="331:47">4712</literal></expr>)</condition><block type="pseudo" pos:start="333:13" pos:end="333:48"><block_content pos:start="333:13" pos:end="333:48">

            <expr_stmt pos:start="333:13" pos:end="333:48"><expr pos:start="333:13" pos:end="333:47"><name pos:start="333:13" pos:end="333:30"><name pos:start="333:13" pos:end="333:13">s</name><operator pos:start="333:14" pos:end="333:15">-&gt;</operator><name pos:start="333:16" pos:end="333:30">workaround_bugs</name></name><operator pos:start="333:31" pos:end="333:32">|=</operator> <name pos:start="333:34" pos:end="333:47">FF_BUG_DC_CLIP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="337:9" pos:end="339:57"><if pos:start="337:9" pos:end="339:57">if<condition pos:start="337:11" pos:end="337:27">(<expr pos:start="337:12" pos:end="337:26"><name pos:start="337:12" pos:end="337:26"><name pos:start="337:12" pos:end="337:12">s</name><operator pos:start="337:13" pos:end="337:14">-&gt;</operator><name pos:start="337:15" pos:end="337:26">divx_version</name></name></expr>)</condition><block type="pseudo" pos:start="339:13" pos:end="339:57"><block_content pos:start="339:13" pos:end="339:57">

            <expr_stmt pos:start="339:13" pos:end="339:57"><expr pos:start="339:13" pos:end="339:56"><name pos:start="339:13" pos:end="339:30"><name pos:start="339:13" pos:end="339:13">s</name><operator pos:start="339:14" pos:end="339:15">-&gt;</operator><name pos:start="339:16" pos:end="339:30">workaround_bugs</name></name><operator pos:start="339:31" pos:end="339:32">|=</operator> <name pos:start="339:34" pos:end="339:56">FF_BUG_DIRECT_BLOCKSIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="line" pos:start="341:1" pos:end="341:58">//printf("padding_bug_score: %d\n", s-&gt;padding_bug_score);</comment>

        <if_stmt pos:start="343:9" pos:end="345:49"><if pos:start="343:9" pos:end="345:49">if<condition pos:start="343:11" pos:end="343:59">(<expr pos:start="343:12" pos:end="343:58"><name pos:start="343:12" pos:end="343:26"><name pos:start="343:12" pos:end="343:12">s</name><operator pos:start="343:13" pos:end="343:14">-&gt;</operator><name pos:start="343:15" pos:end="343:26">divx_version</name></name><operator pos:start="343:27" pos:end="343:28">==</operator><literal type="number" pos:start="343:29" pos:end="343:31">501</literal> <operator pos:start="343:33" pos:end="343:34">&amp;&amp;</operator> <name pos:start="343:36" pos:end="343:48"><name pos:start="343:36" pos:end="343:36">s</name><operator pos:start="343:37" pos:end="343:38">-&gt;</operator><name pos:start="343:39" pos:end="343:48">divx_build</name></name><operator pos:start="343:49" pos:end="343:50">==</operator><literal type="number" pos:start="343:51" pos:end="343:58">20020416</literal></expr>)</condition><block type="pseudo" pos:start="345:13" pos:end="345:49"><block_content pos:start="345:13" pos:end="345:49">

            <expr_stmt pos:start="345:13" pos:end="345:49"><expr pos:start="345:13" pos:end="345:48"><name pos:start="345:13" pos:end="345:32"><name pos:start="345:13" pos:end="345:13">s</name><operator pos:start="345:14" pos:end="345:15">-&gt;</operator><name pos:start="345:16" pos:end="345:32">padding_bug_score</name></name><operator pos:start="345:33" pos:end="345:33">=</operator> <literal type="number" pos:start="345:35" pos:end="345:37">256</literal><operator pos:start="345:38" pos:end="345:38">*</operator><literal type="number" pos:start="345:39" pos:end="345:41">256</literal><operator pos:start="345:42" pos:end="345:42">*</operator><literal type="number" pos:start="345:43" pos:end="345:45">256</literal><operator pos:start="345:46" pos:end="345:46">*</operator><literal type="number" pos:start="345:47" pos:end="345:48">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="349:9" pos:end="353:9"><if pos:start="349:9" pos:end="353:9">if<condition pos:start="349:11" pos:end="349:50">(<expr pos:start="349:12" pos:end="349:49"><name pos:start="349:12" pos:end="349:26"><name pos:start="349:12" pos:end="349:12">s</name><operator pos:start="349:13" pos:end="349:14">-&gt;</operator><name pos:start="349:15" pos:end="349:26">divx_version</name></name> <operator pos:start="349:28" pos:end="349:29">&amp;&amp;</operator> <name pos:start="349:31" pos:end="349:45"><name pos:start="349:31" pos:end="349:31">s</name><operator pos:start="349:32" pos:end="349:33">-&gt;</operator><name pos:start="349:34" pos:end="349:45">divx_version</name></name><operator pos:start="349:46" pos:end="349:46">&lt;</operator><literal type="number" pos:start="349:47" pos:end="349:49">500</literal></expr>)</condition><block pos:start="349:51" pos:end="353:9">{<block_content pos:start="351:13" pos:end="351:45">

            <expr_stmt pos:start="351:13" pos:end="351:45"><expr pos:start="351:13" pos:end="351:44"><name pos:start="351:13" pos:end="351:30"><name pos:start="351:13" pos:end="351:13">s</name><operator pos:start="351:14" pos:end="351:15">-&gt;</operator><name pos:start="351:16" pos:end="351:30">workaround_bugs</name></name><operator pos:start="351:31" pos:end="351:32">|=</operator> <name pos:start="351:34" pos:end="351:44">FF_BUG_EDGE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        

        <if_stmt pos:start="357:9" pos:end="388:0"><if pos:start="357:9" pos:end="388:0">if<condition pos:start="357:11" pos:end="357:27">(<expr pos:start="357:12" pos:end="357:26"><name pos:start="357:12" pos:end="357:26"><name pos:start="357:12" pos:end="357:12">s</name><operator pos:start="357:13" pos:end="357:14">-&gt;</operator><name pos:start="357:15" pos:end="357:26">divx_version</name></name></expr>)</condition><block type="pseudo" pos:start="359:13" pos:end="388:0"><block_content pos:start="359:13" pos:end="388:0">

            <expr_stmt pos:start="359:13" pos:end="388:0"><expr pos:start="359:13" pos:end="359:51"><name pos:start="359:13" pos:end="359:30"><name pos:start="359:13" pos:end="359:13">s</name><operator pos:start="359:14" pos:end="359:15">-&gt;</operator><name pos:start="359:16" pos:end="359:30">workaround_bugs</name></name><operator pos:start="359:31" pos:end="359:32">|=</operator> <name pos:start="359:34" pos:end="359:51">FF_BUG_HPEL_CHROMA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="361:1" pos:end="361:5">#<cpp:directive pos:start="361:2" pos:end="361:3">if</cpp:directive> <expr pos:start="361:5" pos:end="361:5"><literal type="number" pos:start="361:5" pos:end="361:5">0</literal></expr></cpp:if>

        if(s-&gt;divx_version==500)

            s-&gt;padding_bug_score= 256*256*256*64;



        <comment type="block" pos:start="369:9" pos:end="373:11">/* very ugly XVID padding bug detection FIXME/XXX solve this differently

         * lets hope this at least works

         */</comment>

        if(   s-&gt;resync_marker==0 &amp;&amp; s-&gt;data_partitioning==0 &amp;&amp; s-&gt;divx_version==0

           &amp;&amp; s-&gt;codec_id==CODEC_ID_MPEG4 &amp;&amp; s-&gt;vo_type==0)

            s-&gt;workaround_bugs|= FF_BUG_NO_PADDING;

        

        if(s-&gt;lavc_build &amp;&amp; s-&gt;lavc_build&lt;4609) <comment type="line" pos:start="383:49" pos:end="383:111">//FIXME not sure about the version num but a 4609 file seems ok</comment>

            s-&gt;workaround_bugs|= FF_BUG_NO_PADDING;

<cpp:endif pos:start="387:1" pos:end="387:6">#<cpp:directive pos:start="387:2" pos:end="387:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    

    <if_stmt pos:start="393:5" pos:end="421:5"><if pos:start="393:5" pos:end="421:5">if<condition pos:start="393:7" pos:end="393:43">(<expr pos:start="393:8" pos:end="393:42"><name pos:start="393:8" pos:end="393:25"><name pos:start="393:8" pos:end="393:8">s</name><operator pos:start="393:9" pos:end="393:10">-&gt;</operator><name pos:start="393:11" pos:end="393:25">workaround_bugs</name></name><operator pos:start="393:26" pos:end="393:26">&amp;</operator> <name pos:start="393:28" pos:end="393:42">FF_BUG_STD_QPEL</name></expr>)</condition><block pos:start="393:44" pos:end="421:5">{<block_content pos:start="395:9" pos:end="419:63">

        <macro pos:start="395:9" pos:end="395:64"><name pos:start="395:9" pos:end="395:21">SET_QPEL_FUNC</name><argument_list pos:start="395:22" pos:end="395:64">(<argument pos:start="395:23" pos:end="395:44">qpel_pixels_tab[<literal type="number" pos:start="395:39" pos:end="395:39">0</literal>][ <literal type="number" pos:start="395:43" pos:end="395:43">5</literal>]</argument>, <argument pos:start="395:47" pos:end="395:63">qpel16_mc11_old_c</argument>)</argument_list></macro>

        <macro pos:start="397:9" pos:end="397:64"><name pos:start="397:9" pos:end="397:21">SET_QPEL_FUNC</name><argument_list pos:start="397:22" pos:end="397:64">(<argument pos:start="397:23" pos:end="397:44">qpel_pixels_tab[<literal type="number" pos:start="397:39" pos:end="397:39">0</literal>][ <literal type="number" pos:start="397:43" pos:end="397:43">7</literal>]</argument>, <argument pos:start="397:47" pos:end="397:63">qpel16_mc31_old_c</argument>)</argument_list></macro>

        <macro pos:start="399:9" pos:end="399:64"><name pos:start="399:9" pos:end="399:21">SET_QPEL_FUNC</name><argument_list pos:start="399:22" pos:end="399:64">(<argument pos:start="399:23" pos:end="399:44">qpel_pixels_tab[<literal type="number" pos:start="399:39" pos:end="399:39">0</literal>][ <literal type="number" pos:start="399:43" pos:end="399:43">9</literal>]</argument>, <argument pos:start="399:47" pos:end="399:63">qpel16_mc12_old_c</argument>)</argument_list></macro>

        <macro pos:start="401:9" pos:end="401:64"><name pos:start="401:9" pos:end="401:21">SET_QPEL_FUNC</name><argument_list pos:start="401:22" pos:end="401:64">(<argument pos:start="401:23" pos:end="401:44">qpel_pixels_tab[<literal type="number" pos:start="401:39" pos:end="401:39">0</literal>][<literal type="number" pos:start="401:42" pos:end="401:43">11</literal>]</argument>, <argument pos:start="401:47" pos:end="401:63">qpel16_mc32_old_c</argument>)</argument_list></macro>

        <macro pos:start="403:9" pos:end="403:64"><name pos:start="403:9" pos:end="403:21">SET_QPEL_FUNC</name><argument_list pos:start="403:22" pos:end="403:64">(<argument pos:start="403:23" pos:end="403:44">qpel_pixels_tab[<literal type="number" pos:start="403:39" pos:end="403:39">0</literal>][<literal type="number" pos:start="403:42" pos:end="403:43">13</literal>]</argument>, <argument pos:start="403:47" pos:end="403:63">qpel16_mc13_old_c</argument>)</argument_list></macro>

        <macro pos:start="405:9" pos:end="405:64"><name pos:start="405:9" pos:end="405:21">SET_QPEL_FUNC</name><argument_list pos:start="405:22" pos:end="405:64">(<argument pos:start="405:23" pos:end="405:44">qpel_pixels_tab[<literal type="number" pos:start="405:39" pos:end="405:39">0</literal>][<literal type="number" pos:start="405:42" pos:end="405:43">15</literal>]</argument>, <argument pos:start="405:47" pos:end="405:63">qpel16_mc33_old_c</argument>)</argument_list></macro>



        <macro pos:start="409:9" pos:end="409:63"><name pos:start="409:9" pos:end="409:21">SET_QPEL_FUNC</name><argument_list pos:start="409:22" pos:end="409:63">(<argument pos:start="409:23" pos:end="409:44">qpel_pixels_tab[<literal type="number" pos:start="409:39" pos:end="409:39">1</literal>][ <literal type="number" pos:start="409:43" pos:end="409:43">5</literal>]</argument>, <argument pos:start="409:47" pos:end="409:62">qpel8_mc11_old_c</argument>)</argument_list></macro>

        <macro pos:start="411:9" pos:end="411:63"><name pos:start="411:9" pos:end="411:21">SET_QPEL_FUNC</name><argument_list pos:start="411:22" pos:end="411:63">(<argument pos:start="411:23" pos:end="411:44">qpel_pixels_tab[<literal type="number" pos:start="411:39" pos:end="411:39">1</literal>][ <literal type="number" pos:start="411:43" pos:end="411:43">7</literal>]</argument>, <argument pos:start="411:47" pos:end="411:62">qpel8_mc31_old_c</argument>)</argument_list></macro>

        <macro pos:start="413:9" pos:end="413:63"><name pos:start="413:9" pos:end="413:21">SET_QPEL_FUNC</name><argument_list pos:start="413:22" pos:end="413:63">(<argument pos:start="413:23" pos:end="413:44">qpel_pixels_tab[<literal type="number" pos:start="413:39" pos:end="413:39">1</literal>][ <literal type="number" pos:start="413:43" pos:end="413:43">9</literal>]</argument>, <argument pos:start="413:47" pos:end="413:62">qpel8_mc12_old_c</argument>)</argument_list></macro>

        <macro pos:start="415:9" pos:end="415:63"><name pos:start="415:9" pos:end="415:21">SET_QPEL_FUNC</name><argument_list pos:start="415:22" pos:end="415:63">(<argument pos:start="415:23" pos:end="415:44">qpel_pixels_tab[<literal type="number" pos:start="415:39" pos:end="415:39">1</literal>][<literal type="number" pos:start="415:42" pos:end="415:43">11</literal>]</argument>, <argument pos:start="415:47" pos:end="415:62">qpel8_mc32_old_c</argument>)</argument_list></macro>

        <macro pos:start="417:9" pos:end="417:63"><name pos:start="417:9" pos:end="417:21">SET_QPEL_FUNC</name><argument_list pos:start="417:22" pos:end="417:63">(<argument pos:start="417:23" pos:end="417:44">qpel_pixels_tab[<literal type="number" pos:start="417:39" pos:end="417:39">1</literal>][<literal type="number" pos:start="417:42" pos:end="417:43">13</literal>]</argument>, <argument pos:start="417:47" pos:end="417:62">qpel8_mc13_old_c</argument>)</argument_list></macro>

        <macro pos:start="419:9" pos:end="419:63"><name pos:start="419:9" pos:end="419:21">SET_QPEL_FUNC</name><argument_list pos:start="419:22" pos:end="419:63">(<argument pos:start="419:23" pos:end="419:44">qpel_pixels_tab[<literal type="number" pos:start="419:39" pos:end="419:39">1</literal>][<literal type="number" pos:start="419:42" pos:end="419:43">15</literal>]</argument>, <argument pos:start="419:47" pos:end="419:62">qpel8_mc33_old_c</argument>)</argument_list></macro>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="425:5" pos:end="448:0"><if pos:start="425:5" pos:end="448:0">if<condition pos:start="425:7" pos:end="425:36">(<expr pos:start="425:8" pos:end="425:35"><name pos:start="425:8" pos:end="425:19"><name pos:start="425:8" pos:end="425:12">avctx</name><operator pos:start="425:13" pos:end="425:14">-&gt;</operator><name pos:start="425:15" pos:end="425:19">debug</name></name> <operator pos:start="425:21" pos:end="425:21">&amp;</operator> <name pos:start="425:23" pos:end="425:35">FF_DEBUG_BUGS</name></expr>)</condition><block type="pseudo" pos:start="427:9" pos:end="448:0"><block_content pos:start="427:9" pos:end="448:0">

        <expr_stmt pos:start="427:9" pos:end="448:0"><expr pos:start="427:9" pos:end="431:41"><call pos:start="427:9" pos:end="431:41"><name pos:start="427:9" pos:end="427:14">av_log</name><argument_list pos:start="427:15" pos:end="431:41">(<argument pos:start="427:16" pos:end="427:23"><expr pos:start="427:16" pos:end="427:23"><name pos:start="427:16" pos:end="427:23"><name pos:start="427:16" pos:end="427:16">s</name><operator pos:start="427:17" pos:end="427:18">-&gt;</operator><name pos:start="427:19" pos:end="427:23">avctx</name></name></expr></argument>, <argument pos:start="427:26" pos:end="427:37"><expr pos:start="427:26" pos:end="427:37"><name pos:start="427:26" pos:end="427:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="427:40" pos:end="427:112"><expr pos:start="427:40" pos:end="427:112"><literal type="string" pos:start="427:40" pos:end="427:112">"bugs: %X lavc_build:%d xvid_build:%d divx_version:%d divx_build:%d %s\n"</literal></expr></argument>, 

               <argument pos:start="429:16" pos:end="429:33"><expr pos:start="429:16" pos:end="429:33"><name pos:start="429:16" pos:end="429:33"><name pos:start="429:16" pos:end="429:16">s</name><operator pos:start="429:17" pos:end="429:18">-&gt;</operator><name pos:start="429:19" pos:end="429:33">workaround_bugs</name></name></expr></argument>, <argument pos:start="429:36" pos:end="429:48"><expr pos:start="429:36" pos:end="429:48"><name pos:start="429:36" pos:end="429:48"><name pos:start="429:36" pos:end="429:36">s</name><operator pos:start="429:37" pos:end="429:38">-&gt;</operator><name pos:start="429:39" pos:end="429:48">lavc_build</name></name></expr></argument>, <argument pos:start="429:51" pos:end="429:63"><expr pos:start="429:51" pos:end="429:63"><name pos:start="429:51" pos:end="429:63"><name pos:start="429:51" pos:end="429:51">s</name><operator pos:start="429:52" pos:end="429:53">-&gt;</operator><name pos:start="429:54" pos:end="429:63">xvid_build</name></name></expr></argument>, <argument pos:start="429:66" pos:end="429:80"><expr pos:start="429:66" pos:end="429:80"><name pos:start="429:66" pos:end="429:80"><name pos:start="429:66" pos:end="429:66">s</name><operator pos:start="429:67" pos:end="429:68">-&gt;</operator><name pos:start="429:69" pos:end="429:80">divx_version</name></name></expr></argument>, <argument pos:start="429:83" pos:end="429:95"><expr pos:start="429:83" pos:end="429:95"><name pos:start="429:83" pos:end="429:95"><name pos:start="429:83" pos:end="429:83">s</name><operator pos:start="429:84" pos:end="429:85">-&gt;</operator><name pos:start="429:86" pos:end="429:95">divx_build</name></name></expr></argument>,

               <argument pos:start="431:16" pos:end="431:40"><expr pos:start="431:16" pos:end="431:40"><ternary pos:start="431:16" pos:end="431:40"><condition pos:start="431:16" pos:end="431:31"><expr pos:start="431:16" pos:end="431:29"><name pos:start="431:16" pos:end="431:29"><name pos:start="431:16" pos:end="431:16">s</name><operator pos:start="431:17" pos:end="431:18">-&gt;</operator><name pos:start="431:19" pos:end="431:29">divx_packed</name></name></expr> ?</condition><then pos:start="431:33" pos:end="431:35"> <expr pos:start="431:33" pos:end="431:35"><literal type="string" pos:start="431:33" pos:end="431:35">"p"</literal></expr> </then><else pos:start="431:37" pos:end="431:40">: <expr pos:start="431:39" pos:end="431:40"><literal type="string" pos:start="431:39" pos:end="431:40">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    

<cpp:if pos:start="435:1" pos:end="435:5">#<cpp:directive pos:start="435:2" pos:end="435:3">if</cpp:directive> <expr pos:start="435:5" pos:end="435:5"><literal type="number" pos:start="435:5" pos:end="435:5">0</literal></expr></cpp:if> <comment type="line" pos:start="435:7" pos:end="435:46">// dump bits per frame / qp / complexity</comment>

{

    static FILE *f=NULL;

    if(!f) f=fopen("rate_qp_cplx.txt", "w");

    fprintf(f, "%d %d %f\n", buf_size, s-&gt;qscale, buf_size*(double)s-&gt;qscale);

}

<cpp:endif pos:start="447:1" pos:end="447:6">#<cpp:directive pos:start="447:2" pos:end="447:6">endif</cpp:directive></cpp:endif>

       

        <comment type="block" pos:start="451:9" pos:end="451:72">/* After H263 &amp; mpeg4 header decode we have the height, width,*/</comment>

        <comment type="block" pos:start="453:9" pos:end="453:71">/* and other parameters. So then we could init the picture   */</comment>

        <comment type="block" pos:start="455:9" pos:end="455:71">/* FIXME: By the way H263 decoder is evolving it should have */</comment>

        <comment type="block" pos:start="457:9" pos:end="457:71">/* an H263EncContext                                         */</comment>

    

    <if_stmt pos:start="461:5" pos:end="473:5"><if pos:start="461:5" pos:end="473:5">if <condition pos:start="461:8" pos:end="461:66">(   <expr pos:start="461:12" pos:end="461:65"><name pos:start="461:12" pos:end="461:19"><name pos:start="461:12" pos:end="461:12">s</name><operator pos:start="461:13" pos:end="461:14">-&gt;</operator><name pos:start="461:15" pos:end="461:19">width</name></name> <operator pos:start="461:21" pos:end="461:22">!=</operator> <name pos:start="461:24" pos:end="461:35"><name pos:start="461:24" pos:end="461:28">avctx</name><operator pos:start="461:29" pos:end="461:30">-&gt;</operator><name pos:start="461:31" pos:end="461:35">width</name></name> <operator pos:start="461:37" pos:end="461:38">||</operator> <name pos:start="461:40" pos:end="461:48"><name pos:start="461:40" pos:end="461:40">s</name><operator pos:start="461:41" pos:end="461:42">-&gt;</operator><name pos:start="461:43" pos:end="461:48">height</name></name> <operator pos:start="461:50" pos:end="461:51">!=</operator> <name pos:start="461:53" pos:end="461:65"><name pos:start="461:53" pos:end="461:57">avctx</name><operator pos:start="461:58" pos:end="461:59">-&gt;</operator><name pos:start="461:60" pos:end="461:65">height</name></name></expr>)</condition> <block pos:start="461:68" pos:end="473:5">{<block_content pos:start="465:9" pos:end="471:29">

        <comment type="block" pos:start="463:9" pos:end="463:54">/* H.263 could change picture size any time */</comment>

        <decl_stmt pos:start="465:9" pos:end="465:42"><decl pos:start="465:9" pos:end="465:41"><type pos:start="465:9" pos:end="465:20"><name pos:start="465:9" pos:end="465:20">ParseContext</name></type> <name pos:start="465:22" pos:end="465:23">pc</name><init pos:start="465:24" pos:end="465:41">= <expr pos:start="465:26" pos:end="465:41"><name pos:start="465:26" pos:end="465:41"><name pos:start="465:26" pos:end="465:26">s</name><operator pos:start="465:27" pos:end="465:28">-&gt;</operator><name pos:start="465:29" pos:end="465:41">parse_context</name></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="465:44" pos:end="465:86">//FIXME move these demuxng hack to avformat</comment>

        <expr_stmt pos:start="467:9" pos:end="467:34"><expr pos:start="467:9" pos:end="467:33"><name pos:start="467:9" pos:end="467:31"><name pos:start="467:9" pos:end="467:9">s</name><operator pos:start="467:10" pos:end="467:11">-&gt;</operator><name pos:start="467:12" pos:end="467:24">parse_context</name><operator pos:start="467:25" pos:end="467:25">.</operator><name pos:start="467:26" pos:end="467:31">buffer</name></name><operator pos:start="467:32" pos:end="467:32">=</operator><literal type="number" pos:start="467:33" pos:end="467:33">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="469:9" pos:end="469:26"><expr pos:start="469:9" pos:end="469:25"><call pos:start="469:9" pos:end="469:25"><name pos:start="469:9" pos:end="469:22">MPV_common_end</name><argument_list pos:start="469:23" pos:end="469:25">(<argument pos:start="469:24" pos:end="469:24"><expr pos:start="469:24" pos:end="469:24"><name pos:start="469:24" pos:end="469:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="471:9" pos:end="471:29"><expr pos:start="471:9" pos:end="471:28"><name pos:start="471:9" pos:end="471:24"><name pos:start="471:9" pos:end="471:9">s</name><operator pos:start="471:10" pos:end="471:11">-&gt;</operator><name pos:start="471:12" pos:end="471:24">parse_context</name></name><operator pos:start="471:25" pos:end="471:25">=</operator> <name pos:start="471:27" pos:end="471:28">pc</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="475:5" pos:end="485:5"><if pos:start="475:5" pos:end="485:5">if <condition pos:start="475:8" pos:end="475:32">(<expr pos:start="475:9" pos:end="475:31"><operator pos:start="475:9" pos:end="475:9">!</operator><name pos:start="475:10" pos:end="475:31"><name pos:start="475:10" pos:end="475:10">s</name><operator pos:start="475:11" pos:end="475:12">-&gt;</operator><name pos:start="475:13" pos:end="475:31">context_initialized</name></name></expr>)</condition> <block pos:start="475:34" pos:end="485:5">{<block_content pos:start="477:9" pos:end="483:19">

        <expr_stmt pos:start="477:9" pos:end="477:32"><expr pos:start="477:9" pos:end="477:31"><name pos:start="477:9" pos:end="477:20"><name pos:start="477:9" pos:end="477:13">avctx</name><operator pos:start="477:14" pos:end="477:15">-&gt;</operator><name pos:start="477:16" pos:end="477:20">width</name></name> <operator pos:start="477:22" pos:end="477:22">=</operator> <name pos:start="477:24" pos:end="477:31"><name pos:start="477:24" pos:end="477:24">s</name><operator pos:start="477:25" pos:end="477:26">-&gt;</operator><name pos:start="477:27" pos:end="477:31">width</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="479:9" pos:end="479:34"><expr pos:start="479:9" pos:end="479:33"><name pos:start="479:9" pos:end="479:21"><name pos:start="479:9" pos:end="479:13">avctx</name><operator pos:start="479:14" pos:end="479:15">-&gt;</operator><name pos:start="479:16" pos:end="479:21">height</name></name> <operator pos:start="479:23" pos:end="479:23">=</operator> <name pos:start="479:25" pos:end="479:33"><name pos:start="479:25" pos:end="479:25">s</name><operator pos:start="479:26" pos:end="479:27">-&gt;</operator><name pos:start="479:28" pos:end="479:33">height</name></name></expr>;</expr_stmt>



        <goto pos:start="483:9" pos:end="483:19">goto <name pos:start="483:14" pos:end="483:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="489:5" pos:end="491:49"><if pos:start="489:5" pos:end="491:49">if<condition pos:start="489:7" pos:end="489:67">(<expr pos:start="489:8" pos:end="489:66"><operator pos:start="489:8" pos:end="489:8">(</operator><name pos:start="489:9" pos:end="489:19"><name pos:start="489:9" pos:end="489:9">s</name><operator pos:start="489:10" pos:end="489:11">-&gt;</operator><name pos:start="489:12" pos:end="489:19">codec_id</name></name><operator pos:start="489:20" pos:end="489:21">==</operator><name pos:start="489:22" pos:end="489:34">CODEC_ID_H263</name> <operator pos:start="489:36" pos:end="489:37">||</operator> <name pos:start="489:39" pos:end="489:49"><name pos:start="489:39" pos:end="489:39">s</name><operator pos:start="489:40" pos:end="489:41">-&gt;</operator><name pos:start="489:42" pos:end="489:49">codec_id</name></name><operator pos:start="489:50" pos:end="489:51">==</operator><name pos:start="489:52" pos:end="489:65">CODEC_ID_H263P</name><operator pos:start="489:66" pos:end="489:66">)</operator></expr>)</condition><block type="pseudo" pos:start="491:9" pos:end="491:49"><block_content pos:start="491:9" pos:end="491:49">

        <expr_stmt pos:start="491:9" pos:end="491:49"><expr pos:start="491:9" pos:end="491:48"><name pos:start="491:9" pos:end="491:20"><name pos:start="491:9" pos:end="491:9">s</name><operator pos:start="491:10" pos:end="491:11">-&gt;</operator><name pos:start="491:12" pos:end="491:20">gob_index</name></name> <operator pos:start="491:22" pos:end="491:22">=</operator> <call pos:start="491:24" pos:end="491:48"><name pos:start="491:24" pos:end="491:45">ff_h263_get_gob_height</name><argument_list pos:start="491:46" pos:end="491:48">(<argument pos:start="491:47" pos:end="491:47"><expr pos:start="491:47" pos:end="491:47"><name pos:start="491:47" pos:end="491:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    

    <comment type="line" pos:start="495:5" pos:end="495:22">// for hurry_up==5</comment>

    <expr_stmt pos:start="497:5" pos:end="497:47"><expr pos:start="497:5" pos:end="497:46"><name pos:start="497:5" pos:end="497:32"><name pos:start="497:5" pos:end="497:5">s</name><operator pos:start="497:6" pos:end="497:7">-&gt;</operator><name pos:start="497:8" pos:end="497:22">current_picture</name><operator pos:start="497:23" pos:end="497:23">.</operator><name pos:start="497:24" pos:end="497:32">pict_type</name></name><operator pos:start="497:33" pos:end="497:33">=</operator> <name pos:start="497:35" pos:end="497:46"><name pos:start="497:35" pos:end="497:35">s</name><operator pos:start="497:36" pos:end="497:37">-&gt;</operator><name pos:start="497:38" pos:end="497:46">pict_type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="499:5" pos:end="499:57"><expr pos:start="499:5" pos:end="499:56"><name pos:start="499:5" pos:end="499:32"><name pos:start="499:5" pos:end="499:5">s</name><operator pos:start="499:6" pos:end="499:7">-&gt;</operator><name pos:start="499:8" pos:end="499:22">current_picture</name><operator pos:start="499:23" pos:end="499:23">.</operator><name pos:start="499:24" pos:end="499:32">key_frame</name></name><operator pos:start="499:33" pos:end="499:33">=</operator> <name pos:start="499:35" pos:end="499:46"><name pos:start="499:35" pos:end="499:35">s</name><operator pos:start="499:36" pos:end="499:37">-&gt;</operator><name pos:start="499:38" pos:end="499:46">pict_type</name></name> <operator pos:start="499:48" pos:end="499:49">==</operator> <name pos:start="499:51" pos:end="499:56">I_TYPE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="503:5" pos:end="503:56">/* skip b frames if we dont have reference frames */</comment>

    <if_stmt pos:start="505:5" pos:end="505:97"><if pos:start="505:5" pos:end="505:97">if<condition pos:start="505:7" pos:end="505:57">(<expr pos:start="505:8" pos:end="505:56"><name pos:start="505:8" pos:end="505:26"><name pos:start="505:8" pos:end="505:8">s</name><operator pos:start="505:9" pos:end="505:10">-&gt;</operator><name pos:start="505:11" pos:end="505:26">last_picture_ptr</name></name><operator pos:start="505:27" pos:end="505:28">==</operator><name pos:start="505:29" pos:end="505:32">NULL</name> <operator pos:start="505:34" pos:end="505:35">&amp;&amp;</operator> <name pos:start="505:37" pos:end="505:48"><name pos:start="505:37" pos:end="505:37">s</name><operator pos:start="505:38" pos:end="505:39">-&gt;</operator><name pos:start="505:40" pos:end="505:48">pict_type</name></name><operator pos:start="505:49" pos:end="505:50">==</operator><name pos:start="505:51" pos:end="505:56">B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="505:59" pos:end="505:97"><block_content pos:start="505:59" pos:end="505:97"> <return pos:start="505:59" pos:end="505:97">return <expr pos:start="505:66" pos:end="505:96"><call pos:start="505:66" pos:end="505:96"><name pos:start="505:66" pos:end="505:83">get_consumed_bytes</name><argument_list pos:start="505:84" pos:end="505:96">(<argument pos:start="505:85" pos:end="505:85"><expr pos:start="505:85" pos:end="505:85"><name pos:start="505:85" pos:end="505:85">s</name></expr></argument>, <argument pos:start="505:88" pos:end="505:95"><expr pos:start="505:88" pos:end="505:95"><name pos:start="505:88" pos:end="505:95">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="507:5" pos:end="507:44">/* skip b frames if we are in a hurry */</comment>

    <if_stmt pos:start="509:5" pos:end="509:87"><if pos:start="509:5" pos:end="509:87">if<condition pos:start="509:7" pos:end="509:47">(<expr pos:start="509:8" pos:end="509:46"><name pos:start="509:8" pos:end="509:22"><name pos:start="509:8" pos:end="509:12">avctx</name><operator pos:start="509:13" pos:end="509:14">-&gt;</operator><name pos:start="509:15" pos:end="509:22">hurry_up</name></name> <operator pos:start="509:24" pos:end="509:25">&amp;&amp;</operator> <name pos:start="509:27" pos:end="509:38"><name pos:start="509:27" pos:end="509:27">s</name><operator pos:start="509:28" pos:end="509:29">-&gt;</operator><name pos:start="509:30" pos:end="509:38">pict_type</name></name><operator pos:start="509:39" pos:end="509:40">==</operator><name pos:start="509:41" pos:end="509:46">B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="509:49" pos:end="509:87"><block_content pos:start="509:49" pos:end="509:87"> <return pos:start="509:49" pos:end="509:87">return <expr pos:start="509:56" pos:end="509:86"><call pos:start="509:56" pos:end="509:86"><name pos:start="509:56" pos:end="509:73">get_consumed_bytes</name><argument_list pos:start="509:74" pos:end="509:86">(<argument pos:start="509:75" pos:end="509:75"><expr pos:start="509:75" pos:end="509:75"><name pos:start="509:75" pos:end="509:75">s</name></expr></argument>, <argument pos:start="509:78" pos:end="509:85"><expr pos:start="509:78" pos:end="509:85"><name pos:start="509:78" pos:end="509:85">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="511:5" pos:end="511:49">/* skip everything if we are in a hurry&gt;=5 */</comment>

    <if_stmt pos:start="513:5" pos:end="513:66"><if pos:start="513:5" pos:end="513:66">if<condition pos:start="513:7" pos:end="513:26">(<expr pos:start="513:8" pos:end="513:25"><name pos:start="513:8" pos:end="513:22"><name pos:start="513:8" pos:end="513:12">avctx</name><operator pos:start="513:13" pos:end="513:14">-&gt;</operator><name pos:start="513:15" pos:end="513:22">hurry_up</name></name><operator pos:start="513:23" pos:end="513:24">&gt;=</operator><literal type="number" pos:start="513:25" pos:end="513:25">5</literal></expr>)</condition><block type="pseudo" pos:start="513:28" pos:end="513:66"><block_content pos:start="513:28" pos:end="513:66"> <return pos:start="513:28" pos:end="513:66">return <expr pos:start="513:35" pos:end="513:65"><call pos:start="513:35" pos:end="513:65"><name pos:start="513:35" pos:end="513:52">get_consumed_bytes</name><argument_list pos:start="513:53" pos:end="513:65">(<argument pos:start="513:54" pos:end="513:54"><expr pos:start="513:54" pos:end="513:54"><name pos:start="513:54" pos:end="513:54">s</name></expr></argument>, <argument pos:start="513:57" pos:end="513:64"><expr pos:start="513:57" pos:end="513:64"><name pos:start="513:57" pos:end="513:64">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    

    <if_stmt pos:start="517:5" pos:end="527:5"><if pos:start="517:5" pos:end="527:5">if<condition pos:start="517:7" pos:end="517:31">(<expr pos:start="517:8" pos:end="517:30"><name pos:start="517:8" pos:end="517:30"><name pos:start="517:8" pos:end="517:8">s</name><operator pos:start="517:9" pos:end="517:10">-&gt;</operator><name pos:start="517:11" pos:end="517:30">next_p_frame_damaged</name></name></expr>)</condition><block pos:start="517:32" pos:end="527:5">{<block_content pos:start="519:9" pos:end="525:38">

        <if_stmt pos:start="519:9" pos:end="525:38"><if pos:start="519:9" pos:end="521:51">if<condition pos:start="519:11" pos:end="519:32">(<expr pos:start="519:12" pos:end="519:31"><name pos:start="519:12" pos:end="519:23"><name pos:start="519:12" pos:end="519:12">s</name><operator pos:start="519:13" pos:end="519:14">-&gt;</operator><name pos:start="519:15" pos:end="519:23">pict_type</name></name><operator pos:start="519:24" pos:end="519:25">==</operator><name pos:start="519:26" pos:end="519:31">B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="521:13" pos:end="521:51"><block_content pos:start="521:13" pos:end="521:51">

            <return pos:start="521:13" pos:end="521:51">return <expr pos:start="521:20" pos:end="521:50"><call pos:start="521:20" pos:end="521:50"><name pos:start="521:20" pos:end="521:37">get_consumed_bytes</name><argument_list pos:start="521:38" pos:end="521:50">(<argument pos:start="521:39" pos:end="521:39"><expr pos:start="521:39" pos:end="521:39"><name pos:start="521:39" pos:end="521:39">s</name></expr></argument>, <argument pos:start="521:42" pos:end="521:49"><expr pos:start="521:42" pos:end="521:49"><name pos:start="521:42" pos:end="521:49">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

        <else pos:start="523:9" pos:end="525:38">else<block type="pseudo" pos:start="525:13" pos:end="525:38"><block_content pos:start="525:13" pos:end="525:38">

            <expr_stmt pos:start="525:13" pos:end="525:38"><expr pos:start="525:13" pos:end="525:37"><name pos:start="525:13" pos:end="525:35"><name pos:start="525:13" pos:end="525:13">s</name><operator pos:start="525:14" pos:end="525:15">-&gt;</operator><name pos:start="525:16" pos:end="525:35">next_p_frame_damaged</name></name><operator pos:start="525:36" pos:end="525:36">=</operator><literal type="number" pos:start="525:37" pos:end="525:37">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="531:5" pos:end="538:0"><if pos:start="531:5" pos:end="538:0">if<condition pos:start="531:7" pos:end="531:37">(<expr pos:start="531:8" pos:end="531:36"><call pos:start="531:8" pos:end="531:32"><name pos:start="531:8" pos:end="531:22">MPV_frame_start</name><argument_list pos:start="531:23" pos:end="531:32">(<argument pos:start="531:24" pos:end="531:24"><expr pos:start="531:24" pos:end="531:24"><name pos:start="531:24" pos:end="531:24">s</name></expr></argument>, <argument pos:start="531:27" pos:end="531:31"><expr pos:start="531:27" pos:end="531:31"><name pos:start="531:27" pos:end="531:31">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="531:34" pos:end="531:34">&lt;</operator> <literal type="number" pos:start="531:36" pos:end="531:36">0</literal></expr>)</condition><block type="pseudo" pos:start="533:9" pos:end="538:0"><block_content pos:start="533:9" pos:end="538:0">

        <return pos:start="533:9" pos:end="538:0">return <expr pos:start="533:16" pos:end="533:17"><operator pos:start="533:16" pos:end="533:16">-</operator><literal type="number" pos:start="533:17" pos:end="533:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



<cpp:ifdef pos:start="537:1" pos:end="537:12">#<cpp:directive pos:start="537:2" pos:end="537:6">ifdef</cpp:directive> <name pos:start="537:8" pos:end="537:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="539:5" pos:end="542:0"><expr pos:start="539:5" pos:end="539:36"><call pos:start="539:5" pos:end="539:36"><name pos:start="539:5" pos:end="539:10">printf</name><argument_list pos:start="539:11" pos:end="539:36">(<argument pos:start="539:12" pos:end="539:24"><expr pos:start="539:12" pos:end="539:24"><literal type="string" pos:start="539:12" pos:end="539:24">"qscale=%d\n"</literal></expr></argument>, <argument pos:start="539:27" pos:end="539:35"><expr pos:start="539:27" pos:end="539:35"><name pos:start="539:27" pos:end="539:35"><name pos:start="539:27" pos:end="539:27">s</name><operator pos:start="539:28" pos:end="539:29">-&gt;</operator><name pos:start="539:30" pos:end="539:35">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="541:1" pos:end="541:6">#<cpp:directive pos:start="541:2" pos:end="541:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="545:5" pos:end="545:25"><expr pos:start="545:5" pos:end="545:24"><call pos:start="545:5" pos:end="545:24"><name pos:start="545:5" pos:end="545:21">ff_er_frame_start</name><argument_list pos:start="545:22" pos:end="545:24">(<argument pos:start="545:23" pos:end="545:23"><expr pos:start="545:23" pos:end="545:23"><name pos:start="545:23" pos:end="545:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <comment type="line" pos:start="549:5" pos:end="549:111">//the second part of the wmv2 header contains the MB skip bits which are stored in current_picture-&gt;mb_type</comment>

    <comment type="line" pos:start="551:5" pos:end="551:51">//which isnt available before MPV_frame_start()</comment>

    <if_stmt pos:start="553:5" pos:end="559:5"><if pos:start="553:5" pos:end="559:5">if <condition pos:start="553:8" pos:end="553:30">(<expr pos:start="553:9" pos:end="553:29"><name pos:start="553:9" pos:end="553:26"><name pos:start="553:9" pos:end="553:9">s</name><operator pos:start="553:10" pos:end="553:11">-&gt;</operator><name pos:start="553:12" pos:end="553:26">msmpeg4_version</name></name><operator pos:start="553:27" pos:end="553:28">==</operator><literal type="number" pos:start="553:29" pos:end="553:29">5</literal></expr>)</condition><block pos:start="553:31" pos:end="559:5">{<block_content pos:start="555:9" pos:end="557:22">

        <if_stmt pos:start="555:9" pos:end="557:22"><if pos:start="555:9" pos:end="557:22">if<condition pos:start="555:11" pos:end="555:58">(<expr pos:start="555:12" pos:end="555:57"><call pos:start="555:12" pos:end="555:53"><name pos:start="555:12" pos:end="555:50">ff_wmv2_decode_secondary_picture_header</name><argument_list pos:start="555:51" pos:end="555:53">(<argument pos:start="555:52" pos:end="555:52"><expr pos:start="555:52" pos:end="555:52"><name pos:start="555:52" pos:end="555:52">s</name></expr></argument>)</argument_list></call> <operator pos:start="555:55" pos:end="555:55">&lt;</operator> <literal type="number" pos:start="555:57" pos:end="555:57">0</literal></expr>)</condition><block type="pseudo" pos:start="557:13" pos:end="557:22"><block_content pos:start="557:13" pos:end="557:22">

            <return pos:start="557:13" pos:end="557:22">return <expr pos:start="557:20" pos:end="557:21"><operator pos:start="557:20" pos:end="557:20">-</operator><literal type="number" pos:start="557:21" pos:end="557:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="563:5" pos:end="563:32">/* decode each macroblock */</comment>

    <expr_stmt pos:start="565:5" pos:end="565:14"><expr pos:start="565:5" pos:end="565:13"><name pos:start="565:5" pos:end="565:11"><name pos:start="565:5" pos:end="565:5">s</name><operator pos:start="565:6" pos:end="565:7">-&gt;</operator><name pos:start="565:8" pos:end="565:11">mb_x</name></name><operator pos:start="565:12" pos:end="565:12">=</operator><literal type="number" pos:start="565:13" pos:end="565:13">0</literal></expr>;</expr_stmt> 

    <expr_stmt pos:start="567:5" pos:end="567:14"><expr pos:start="567:5" pos:end="567:13"><name pos:start="567:5" pos:end="567:11"><name pos:start="567:5" pos:end="567:5">s</name><operator pos:start="567:6" pos:end="567:7">-&gt;</operator><name pos:start="567:8" pos:end="567:11">mb_y</name></name><operator pos:start="567:12" pos:end="567:12">=</operator><literal type="number" pos:start="567:13" pos:end="567:13">0</literal></expr>;</expr_stmt>

    

    <expr_stmt pos:start="571:5" pos:end="571:20"><expr pos:start="571:5" pos:end="571:19"><call pos:start="571:5" pos:end="571:19"><name pos:start="571:5" pos:end="571:16">decode_slice</name><argument_list pos:start="571:17" pos:end="571:19">(<argument pos:start="571:18" pos:end="571:18"><expr pos:start="571:18" pos:end="571:18"><name pos:start="571:18" pos:end="571:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="573:5" pos:end="599:5">while<condition pos:start="573:10" pos:end="573:31">(<expr pos:start="573:11" pos:end="573:30"><name pos:start="573:11" pos:end="573:17"><name pos:start="573:11" pos:end="573:11">s</name><operator pos:start="573:12" pos:end="573:13">-&gt;</operator><name pos:start="573:14" pos:end="573:17">mb_y</name></name><operator pos:start="573:18" pos:end="573:18">&lt;</operator><name pos:start="573:19" pos:end="573:30"><name pos:start="573:19" pos:end="573:19">s</name><operator pos:start="573:20" pos:end="573:21">-&gt;</operator><name pos:start="573:22" pos:end="573:30">mb_height</name></name></expr>)</condition><block pos:start="573:32" pos:end="599:5">{<block_content pos:start="575:9" pos:end="597:24">

        <if_stmt pos:start="575:9" pos:end="587:9"><if pos:start="575:9" pos:end="581:9">if<condition pos:start="575:11" pos:end="575:30">(<expr pos:start="575:12" pos:end="575:29"><name pos:start="575:12" pos:end="575:29"><name pos:start="575:12" pos:end="575:12">s</name><operator pos:start="575:13" pos:end="575:14">-&gt;</operator><name pos:start="575:15" pos:end="575:29">msmpeg4_version</name></name></expr>)</condition><block pos:start="575:31" pos:end="581:9">{<block_content pos:start="577:13" pos:end="579:22">

            <if_stmt pos:start="577:13" pos:end="579:22"><if pos:start="577:13" pos:end="579:22">if<condition pos:start="577:15" pos:end="577:105">(<expr pos:start="577:16" pos:end="577:104"><name pos:start="577:16" pos:end="577:22"><name pos:start="577:16" pos:end="577:16">s</name><operator pos:start="577:17" pos:end="577:18">-&gt;</operator><name pos:start="577:19" pos:end="577:22">mb_x</name></name><operator pos:start="577:23" pos:end="577:24">!=</operator><literal type="number" pos:start="577:25" pos:end="577:25">0</literal> <operator pos:start="577:27" pos:end="577:28">||</operator> <operator pos:start="577:30" pos:end="577:30">(</operator><name pos:start="577:31" pos:end="577:37"><name pos:start="577:31" pos:end="577:31">s</name><operator pos:start="577:32" pos:end="577:33">-&gt;</operator><name pos:start="577:34" pos:end="577:37">mb_y</name></name><operator pos:start="577:38" pos:end="577:38">%</operator><name pos:start="577:39" pos:end="577:53"><name pos:start="577:39" pos:end="577:39">s</name><operator pos:start="577:40" pos:end="577:41">-&gt;</operator><name pos:start="577:42" pos:end="577:53">slice_height</name></name><operator pos:start="577:54" pos:end="577:54">)</operator><operator pos:start="577:55" pos:end="577:56">!=</operator><literal type="number" pos:start="577:57" pos:end="577:57">0</literal> <operator pos:start="577:59" pos:end="577:60">||</operator> <call pos:start="577:62" pos:end="577:83"><name pos:start="577:62" pos:end="577:75">get_bits_count</name><argument_list pos:start="577:76" pos:end="577:83">(<argument pos:start="577:77" pos:end="577:82"><expr pos:start="577:77" pos:end="577:82"><operator pos:start="577:77" pos:end="577:77">&amp;</operator><name pos:start="577:78" pos:end="577:82"><name pos:start="577:78" pos:end="577:78">s</name><operator pos:start="577:79" pos:end="577:80">-&gt;</operator><name pos:start="577:81" pos:end="577:82">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="577:85" pos:end="577:85">&gt;</operator> <name pos:start="577:87" pos:end="577:104"><name pos:start="577:87" pos:end="577:87">s</name><operator pos:start="577:88" pos:end="577:89">-&gt;</operator><name pos:start="577:90" pos:end="577:91">gb</name><operator pos:start="577:92" pos:end="577:92">.</operator><name pos:start="577:93" pos:end="577:104">size_in_bits</name></name></expr>)</condition><block type="pseudo" pos:start="579:17" pos:end="579:22"><block_content pos:start="579:17" pos:end="579:22">

                <break pos:start="579:17" pos:end="579:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></if><else pos:start="581:10" pos:end="587:9">else<block pos:start="581:14" pos:end="587:9">{<block_content pos:start="583:13" pos:end="585:22">

            <if_stmt pos:start="583:13" pos:end="585:22"><if pos:start="583:13" pos:end="585:22">if<condition pos:start="583:15" pos:end="583:35">(<expr pos:start="583:16" pos:end="583:34"><call pos:start="583:16" pos:end="583:32"><name pos:start="583:16" pos:end="583:29">ff_h263_resync</name><argument_list pos:start="583:30" pos:end="583:32">(<argument pos:start="583:31" pos:end="583:31"><expr pos:start="583:31" pos:end="583:31"><name pos:start="583:31" pos:end="583:31">s</name></expr></argument>)</argument_list></call><operator pos:start="583:33" pos:end="583:33">&lt;</operator><literal type="number" pos:start="583:34" pos:end="583:34">0</literal></expr>)</condition><block type="pseudo" pos:start="585:17" pos:end="585:22"><block_content pos:start="585:17" pos:end="585:22">

                <break pos:start="585:17" pos:end="585:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        

        <if_stmt pos:start="591:9" pos:end="593:38"><if pos:start="591:9" pos:end="593:38">if<condition pos:start="591:11" pos:end="591:48">(<expr pos:start="591:12" pos:end="591:47"><name pos:start="591:12" pos:end="591:29"><name pos:start="591:12" pos:end="591:12">s</name><operator pos:start="591:13" pos:end="591:14">-&gt;</operator><name pos:start="591:15" pos:end="591:29">msmpeg4_version</name></name><operator pos:start="591:30" pos:end="591:30">&lt;</operator><literal type="number" pos:start="591:31" pos:end="591:31">4</literal> <operator pos:start="591:33" pos:end="591:34">&amp;&amp;</operator> <name pos:start="591:36" pos:end="591:47"><name pos:start="591:36" pos:end="591:36">s</name><operator pos:start="591:37" pos:end="591:38">-&gt;</operator><name pos:start="591:39" pos:end="591:47">h263_pred</name></name></expr>)</condition><block type="pseudo" pos:start="593:13" pos:end="593:38"><block_content pos:start="593:13" pos:end="593:38">

            <expr_stmt pos:start="593:13" pos:end="593:38"><expr pos:start="593:13" pos:end="593:37"><call pos:start="593:13" pos:end="593:37"><name pos:start="593:13" pos:end="593:34">ff_mpeg4_clean_buffers</name><argument_list pos:start="593:35" pos:end="593:37">(<argument pos:start="593:36" pos:end="593:36"><expr pos:start="593:36" pos:end="593:36"><name pos:start="593:36" pos:end="593:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="597:9" pos:end="597:24"><expr pos:start="597:9" pos:end="597:23"><call pos:start="597:9" pos:end="597:23"><name pos:start="597:9" pos:end="597:20">decode_slice</name><argument_list pos:start="597:21" pos:end="597:23">(<argument pos:start="597:22" pos:end="597:22"><expr pos:start="597:22" pos:end="597:22"><name pos:start="597:22" pos:end="597:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="603:5" pos:end="609:9"><if pos:start="603:5" pos:end="609:9">if <condition pos:start="603:8" pos:end="603:72">(<expr pos:start="603:9" pos:end="603:71"><name pos:start="603:9" pos:end="603:23"><name pos:start="603:9" pos:end="603:9">s</name><operator pos:start="603:10" pos:end="603:11">-&gt;</operator><name pos:start="603:12" pos:end="603:23">h263_msmpeg4</name></name> <operator pos:start="603:25" pos:end="603:26">&amp;&amp;</operator> <name pos:start="603:28" pos:end="603:45"><name pos:start="603:28" pos:end="603:28">s</name><operator pos:start="603:29" pos:end="603:30">-&gt;</operator><name pos:start="603:31" pos:end="603:45">msmpeg4_version</name></name><operator pos:start="603:46" pos:end="603:46">&lt;</operator><literal type="number" pos:start="603:47" pos:end="603:47">4</literal> <operator pos:start="603:49" pos:end="603:50">&amp;&amp;</operator> <name pos:start="603:52" pos:end="603:63"><name pos:start="603:52" pos:end="603:52">s</name><operator pos:start="603:53" pos:end="603:54">-&gt;</operator><name pos:start="603:55" pos:end="603:63">pict_type</name></name><operator pos:start="603:64" pos:end="603:65">==</operator><name pos:start="603:66" pos:end="603:71">I_TYPE</name></expr>)</condition><block type="pseudo" pos:start="605:9" pos:end="609:9"><block_content pos:start="605:9" pos:end="609:9">

        <if_stmt pos:start="605:9" pos:end="609:9"><if pos:start="605:9" pos:end="609:9">if<condition pos:start="605:11" pos:end="605:54">(<expr pos:start="605:12" pos:end="605:53"><call pos:start="605:12" pos:end="605:49"><name pos:start="605:12" pos:end="605:36">msmpeg4_decode_ext_header</name><argument_list pos:start="605:37" pos:end="605:49">(<argument pos:start="605:38" pos:end="605:38"><expr pos:start="605:38" pos:end="605:38"><name pos:start="605:38" pos:end="605:38">s</name></expr></argument>, <argument pos:start="605:41" pos:end="605:48"><expr pos:start="605:41" pos:end="605:48"><name pos:start="605:41" pos:end="605:48">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="605:51" pos:end="605:51">&lt;</operator> <literal type="number" pos:start="605:53" pos:end="605:53">0</literal></expr>)</condition><block pos:start="605:55" pos:end="609:9">{<block_content pos:start="607:13" pos:end="607:75">

            <expr_stmt pos:start="607:13" pos:end="607:75"><expr pos:start="607:13" pos:end="607:74"><name pos:start="607:13" pos:end="607:46"><name pos:start="607:13" pos:end="607:13">s</name><operator pos:start="607:14" pos:end="607:15">-&gt;</operator><name pos:start="607:16" pos:end="607:33">error_status_table</name><index pos:start="607:34" pos:end="607:46">[<expr pos:start="607:35" pos:end="607:45"><name pos:start="607:35" pos:end="607:43"><name pos:start="607:35" pos:end="607:35">s</name><operator pos:start="607:36" pos:end="607:37">-&gt;</operator><name pos:start="607:38" pos:end="607:43">mb_num</name></name><operator pos:start="607:44" pos:end="607:44">-</operator><literal type="number" pos:start="607:45" pos:end="607:45">1</literal></expr>]</index></name><operator pos:start="607:47" pos:end="607:47">=</operator> <name pos:start="607:49" pos:end="607:56">AC_ERROR</name><operator pos:start="607:57" pos:end="607:57">|</operator><name pos:start="607:58" pos:end="607:65">DC_ERROR</name><operator pos:start="607:66" pos:end="607:66">|</operator><name pos:start="607:67" pos:end="607:74">MV_ERROR</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

    

    <comment type="block" pos:start="613:5" pos:end="613:43">/* divx 5.01+ bistream reorder stuff */</comment>

    <if_stmt pos:start="615:5" pos:end="661:5"><if pos:start="615:5" pos:end="661:5">if<condition pos:start="615:7" pos:end="615:84">(<expr pos:start="615:8" pos:end="615:83"><name pos:start="615:8" pos:end="615:18"><name pos:start="615:8" pos:end="615:8">s</name><operator pos:start="615:9" pos:end="615:10">-&gt;</operator><name pos:start="615:11" pos:end="615:18">codec_id</name></name><operator pos:start="615:19" pos:end="615:20">==</operator><name pos:start="615:21" pos:end="615:34">CODEC_ID_MPEG4</name> <operator pos:start="615:36" pos:end="615:37">&amp;&amp;</operator> <name pos:start="615:39" pos:end="615:62"><name pos:start="615:39" pos:end="615:39">s</name><operator pos:start="615:40" pos:end="615:41">-&gt;</operator><name pos:start="615:42" pos:end="615:62">bitstream_buffer_size</name></name><operator pos:start="615:63" pos:end="615:64">==</operator><literal type="number" pos:start="615:65" pos:end="615:65">0</literal> <operator pos:start="615:67" pos:end="615:68">&amp;&amp;</operator> <name pos:start="615:70" pos:end="615:83"><name pos:start="615:70" pos:end="615:70">s</name><operator pos:start="615:71" pos:end="615:72">-&gt;</operator><name pos:start="615:73" pos:end="615:83">divx_packed</name></name></expr>)</condition><block pos:start="615:85" pos:end="661:5">{<block_content pos:start="617:9" pos:end="659:9">

        <decl_stmt pos:start="617:9" pos:end="617:51"><decl pos:start="617:9" pos:end="617:50"><type pos:start="617:9" pos:end="617:11"><name pos:start="617:9" pos:end="617:11">int</name></type> <name pos:start="617:13" pos:end="617:23">current_pos</name><init pos:start="617:24" pos:end="617:50">= <expr pos:start="617:26" pos:end="617:50"><call pos:start="617:26" pos:end="617:47"><name pos:start="617:26" pos:end="617:39">get_bits_count</name><argument_list pos:start="617:40" pos:end="617:47">(<argument pos:start="617:41" pos:end="617:46"><expr pos:start="617:41" pos:end="617:46"><operator pos:start="617:41" pos:end="617:41">&amp;</operator><name pos:start="617:42" pos:end="617:46"><name pos:start="617:42" pos:end="617:42">s</name><operator pos:start="617:43" pos:end="617:44">-&gt;</operator><name pos:start="617:45" pos:end="617:46">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="617:48" pos:end="617:49">&gt;&gt;</operator><literal type="number" pos:start="617:50" pos:end="617:50">3</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="619:9" pos:end="619:30"><decl pos:start="619:9" pos:end="619:29"><type pos:start="619:9" pos:end="619:11"><name pos:start="619:9" pos:end="619:11">int</name></type> <name pos:start="619:13" pos:end="619:27">startcode_found</name><init pos:start="619:28" pos:end="619:29">=<expr pos:start="619:29" pos:end="619:29"><literal type="number" pos:start="619:29" pos:end="619:29">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="623:9" pos:end="641:9"><if pos:start="623:9" pos:end="641:9">if<condition pos:start="623:11" pos:end="625:61">(   <expr pos:start="623:15" pos:end="625:60"><name pos:start="623:15" pos:end="623:22">buf_size</name> <operator pos:start="623:24" pos:end="623:24">-</operator> <name pos:start="623:26" pos:end="623:36">current_pos</name> <operator pos:start="623:38" pos:end="623:38">&gt;</operator> <literal type="number" pos:start="623:40" pos:end="623:40">5</literal> 

           <operator pos:start="625:12" pos:end="625:13">&amp;&amp;</operator> <name pos:start="625:15" pos:end="625:22">buf_size</name> <operator pos:start="625:24" pos:end="625:24">-</operator> <name pos:start="625:26" pos:end="625:36">current_pos</name> <operator pos:start="625:38" pos:end="625:38">&lt;</operator> <name pos:start="625:40" pos:end="625:60">BITSTREAM_BUFFER_SIZE</name></expr>)</condition><block pos:start="625:62" pos:end="641:9">{<block_content pos:start="627:13" pos:end="639:13">

            <decl_stmt pos:start="627:13" pos:end="627:18"><decl pos:start="627:13" pos:end="627:17"><type pos:start="627:13" pos:end="627:15"><name pos:start="627:13" pos:end="627:15">int</name></type> <name pos:start="627:17" pos:end="627:17">i</name></decl>;</decl_stmt>

            <for pos:start="629:13" pos:end="639:13">for<control pos:start="629:16" pos:end="629:49">(<init pos:start="629:17" pos:end="629:30"><expr pos:start="629:17" pos:end="629:29"><name pos:start="629:17" pos:end="629:17">i</name><operator pos:start="629:18" pos:end="629:18">=</operator><name pos:start="629:19" pos:end="629:29">current_pos</name></expr>;</init> <condition pos:start="629:32" pos:end="629:44"><expr pos:start="629:32" pos:end="629:43"><name pos:start="629:32" pos:end="629:32">i</name><operator pos:start="629:33" pos:end="629:33">&lt;</operator><name pos:start="629:34" pos:end="629:41">buf_size</name><operator pos:start="629:42" pos:end="629:42">-</operator><literal type="number" pos:start="629:43" pos:end="629:43">3</literal></expr>;</condition> <incr pos:start="629:46" pos:end="629:48"><expr pos:start="629:46" pos:end="629:48"><name pos:start="629:46" pos:end="629:46">i</name><operator pos:start="629:47" pos:end="629:48">++</operator></expr></incr>)</control><block pos:start="629:50" pos:end="639:13">{<block_content pos:start="631:17" pos:end="637:17">

                <if_stmt pos:start="631:17" pos:end="637:17"><if pos:start="631:17" pos:end="637:17">if<condition pos:start="631:19" pos:end="631:77">(<expr pos:start="631:20" pos:end="631:76"><name pos:start="631:20" pos:end="631:25"><name pos:start="631:20" pos:end="631:22">buf</name><index pos:start="631:23" pos:end="631:25">[<expr pos:start="631:24" pos:end="631:24"><name pos:start="631:24" pos:end="631:24">i</name></expr>]</index></name><operator pos:start="631:26" pos:end="631:27">==</operator><literal type="number" pos:start="631:28" pos:end="631:28">0</literal> <operator pos:start="631:30" pos:end="631:31">&amp;&amp;</operator> <name pos:start="631:33" pos:end="631:40"><name pos:start="631:33" pos:end="631:35">buf</name><index pos:start="631:36" pos:end="631:40">[<expr pos:start="631:37" pos:end="631:39"><name pos:start="631:37" pos:end="631:37">i</name><operator pos:start="631:38" pos:end="631:38">+</operator><literal type="number" pos:start="631:39" pos:end="631:39">1</literal></expr>]</index></name><operator pos:start="631:41" pos:end="631:42">==</operator><literal type="number" pos:start="631:43" pos:end="631:43">0</literal> <operator pos:start="631:45" pos:end="631:46">&amp;&amp;</operator> <name pos:start="631:48" pos:end="631:55"><name pos:start="631:48" pos:end="631:50">buf</name><index pos:start="631:51" pos:end="631:55">[<expr pos:start="631:52" pos:end="631:54"><name pos:start="631:52" pos:end="631:52">i</name><operator pos:start="631:53" pos:end="631:53">+</operator><literal type="number" pos:start="631:54" pos:end="631:54">2</literal></expr>]</index></name><operator pos:start="631:56" pos:end="631:57">==</operator><literal type="number" pos:start="631:58" pos:end="631:58">1</literal> <operator pos:start="631:60" pos:end="631:61">&amp;&amp;</operator> <name pos:start="631:63" pos:end="631:70"><name pos:start="631:63" pos:end="631:65">buf</name><index pos:start="631:66" pos:end="631:70">[<expr pos:start="631:67" pos:end="631:69"><name pos:start="631:67" pos:end="631:67">i</name><operator pos:start="631:68" pos:end="631:68">+</operator><literal type="number" pos:start="631:69" pos:end="631:69">3</literal></expr>]</index></name><operator pos:start="631:71" pos:end="631:72">==</operator><literal type="number" pos:start="631:73" pos:end="631:76">0xB6</literal></expr>)</condition><block pos:start="631:78" pos:end="637:17">{<block_content pos:start="633:21" pos:end="635:26">

                    <expr_stmt pos:start="633:21" pos:end="633:38"><expr pos:start="633:21" pos:end="633:37"><name pos:start="633:21" pos:end="633:35">startcode_found</name><operator pos:start="633:36" pos:end="633:36">=</operator><literal type="number" pos:start="633:37" pos:end="633:37">1</literal></expr>;</expr_stmt>

                    <break pos:start="635:21" pos:end="635:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="643:9" pos:end="649:9"><if pos:start="643:9" pos:end="649:9">if<condition pos:start="643:11" pos:end="643:62">(<expr pos:start="643:12" pos:end="643:61"><name pos:start="643:12" pos:end="643:23"><name pos:start="643:12" pos:end="643:12">s</name><operator pos:start="643:13" pos:end="643:14">-&gt;</operator><name pos:start="643:15" pos:end="643:16">gb</name><operator pos:start="643:17" pos:end="643:17">.</operator><name pos:start="643:18" pos:end="643:23">buffer</name></name> <operator pos:start="643:25" pos:end="643:26">==</operator> <name pos:start="643:28" pos:end="643:46"><name pos:start="643:28" pos:end="643:28">s</name><operator pos:start="643:29" pos:end="643:30">-&gt;</operator><name pos:start="643:31" pos:end="643:46">bitstream_buffer</name></name> <operator pos:start="643:48" pos:end="643:49">&amp;&amp;</operator> <name pos:start="643:51" pos:end="643:58">buf_size</name><operator pos:start="643:59" pos:end="643:59">&gt;</operator><literal type="number" pos:start="643:60" pos:end="643:61">20</literal></expr>)</condition><block pos:start="643:63" pos:end="649:9">{<block_content pos:start="645:13" pos:end="647:26"> <comment type="line" pos:start="643:65" pos:end="643:76">//xvid style</comment>

            <expr_stmt pos:start="645:13" pos:end="645:30"><expr pos:start="645:13" pos:end="645:29"><name pos:start="645:13" pos:end="645:27">startcode_found</name><operator pos:start="645:28" pos:end="645:28">=</operator><literal type="number" pos:start="645:29" pos:end="645:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="647:13" pos:end="647:26"><expr pos:start="647:13" pos:end="647:25"><name pos:start="647:13" pos:end="647:23">current_pos</name><operator pos:start="647:24" pos:end="647:24">=</operator><literal type="number" pos:start="647:25" pos:end="647:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="653:9" pos:end="659:9"><if pos:start="653:9" pos:end="659:9">if<condition pos:start="653:11" pos:end="653:27">(<expr pos:start="653:12" pos:end="653:26"><name pos:start="653:12" pos:end="653:26">startcode_found</name></expr>)</condition><block pos:start="653:28" pos:end="659:9">{<block_content pos:start="655:13" pos:end="657:61">

            <expr_stmt pos:start="655:13" pos:end="655:83"><expr pos:start="655:13" pos:end="655:82"><call pos:start="655:13" pos:end="655:82"><name pos:start="655:13" pos:end="655:18">memcpy</name><argument_list pos:start="655:19" pos:end="655:82">(<argument pos:start="655:20" pos:end="655:38"><expr pos:start="655:20" pos:end="655:38"><name pos:start="655:20" pos:end="655:38"><name pos:start="655:20" pos:end="655:20">s</name><operator pos:start="655:21" pos:end="655:22">-&gt;</operator><name pos:start="655:23" pos:end="655:38">bitstream_buffer</name></name></expr></argument>, <argument pos:start="655:41" pos:end="655:57"><expr pos:start="655:41" pos:end="655:57"><name pos:start="655:41" pos:end="655:43">buf</name> <operator pos:start="655:45" pos:end="655:45">+</operator> <name pos:start="655:47" pos:end="655:57">current_pos</name></expr></argument>, <argument pos:start="655:60" pos:end="655:81"><expr pos:start="655:60" pos:end="655:81"><name pos:start="655:60" pos:end="655:67">buf_size</name> <operator pos:start="655:69" pos:end="655:69">-</operator> <name pos:start="655:71" pos:end="655:81">current_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="657:13" pos:end="657:61"><expr pos:start="657:13" pos:end="657:60"><name pos:start="657:13" pos:end="657:36"><name pos:start="657:13" pos:end="657:13">s</name><operator pos:start="657:14" pos:end="657:15">-&gt;</operator><name pos:start="657:16" pos:end="657:36">bitstream_buffer_size</name></name><operator pos:start="657:37" pos:end="657:37">=</operator> <name pos:start="657:39" pos:end="657:46">buf_size</name> <operator pos:start="657:48" pos:end="657:48">-</operator> <name pos:start="657:50" pos:end="657:60">current_pos</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="665:5" pos:end="665:23"><expr pos:start="665:5" pos:end="665:22"><call pos:start="665:5" pos:end="665:22"><name pos:start="665:5" pos:end="665:19">ff_er_frame_end</name><argument_list pos:start="665:20" pos:end="665:22">(<argument pos:start="665:21" pos:end="665:21"><expr pos:start="665:21" pos:end="665:21"><name pos:start="665:21" pos:end="665:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="669:5" pos:end="669:21"><expr pos:start="669:5" pos:end="669:20"><call pos:start="669:5" pos:end="669:20"><name pos:start="669:5" pos:end="669:17">MPV_frame_end</name><argument_list pos:start="669:18" pos:end="669:20">(<argument pos:start="669:19" pos:end="669:19"><expr pos:start="669:19" pos:end="669:19"><name pos:start="669:19" pos:end="669:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt pos:start="673:1" pos:end="673:74"><expr pos:start="673:1" pos:end="673:73"><call pos:start="673:1" pos:end="673:73"><name pos:start="673:1" pos:end="673:6">assert</name><argument_list pos:start="673:7" pos:end="673:73">(<argument pos:start="673:8" pos:end="673:72"><expr pos:start="673:8" pos:end="673:72"><name pos:start="673:8" pos:end="673:35"><name pos:start="673:8" pos:end="673:8">s</name><operator pos:start="673:9" pos:end="673:10">-&gt;</operator><name pos:start="673:11" pos:end="673:25">current_picture</name><operator pos:start="673:26" pos:end="673:26">.</operator><name pos:start="673:27" pos:end="673:35">pict_type</name></name> <operator pos:start="673:37" pos:end="673:38">==</operator> <name pos:start="673:40" pos:end="673:72"><name pos:start="673:40" pos:end="673:40">s</name><operator pos:start="673:41" pos:end="673:42">-&gt;</operator><name pos:start="673:43" pos:end="673:61">current_picture_ptr</name><operator pos:start="673:62" pos:end="673:63">-&gt;</operator><name pos:start="673:64" pos:end="673:72">pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt pos:start="675:1" pos:end="675:53"><expr pos:start="675:1" pos:end="675:52"><call pos:start="675:1" pos:end="675:52"><name pos:start="675:1" pos:end="675:6">assert</name><argument_list pos:start="675:7" pos:end="675:52">(<argument pos:start="675:8" pos:end="675:51"><expr pos:start="675:8" pos:end="675:51"><name pos:start="675:8" pos:end="675:35"><name pos:start="675:8" pos:end="675:8">s</name><operator pos:start="675:9" pos:end="675:10">-&gt;</operator><name pos:start="675:11" pos:end="675:25">current_picture</name><operator pos:start="675:26" pos:end="675:26">.</operator><name pos:start="675:27" pos:end="675:35">pict_type</name></name> <operator pos:start="675:37" pos:end="675:38">==</operator> <name pos:start="675:40" pos:end="675:51"><name pos:start="675:40" pos:end="675:40">s</name><operator pos:start="675:41" pos:end="675:42">-&gt;</operator><name pos:start="675:43" pos:end="675:51">pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="677:5" pos:end="691:5"><if pos:start="677:5" pos:end="683:5">if<condition pos:start="677:7" pos:end="677:44">(<expr pos:start="677:8" pos:end="677:43"><name pos:start="677:8" pos:end="677:19"><name pos:start="677:8" pos:end="677:8">s</name><operator pos:start="677:9" pos:end="677:10">-&gt;</operator><name pos:start="677:11" pos:end="677:19">pict_type</name></name><operator pos:start="677:20" pos:end="677:21">==</operator><name pos:start="677:22" pos:end="677:27">B_TYPE</name> <operator pos:start="677:29" pos:end="677:30">||</operator> <name pos:start="677:32" pos:end="677:43"><name pos:start="677:32" pos:end="677:32">s</name><operator pos:start="677:33" pos:end="677:34">-&gt;</operator><name pos:start="677:35" pos:end="677:43">low_delay</name></name></expr>)</condition><block pos:start="677:45" pos:end="683:5">{<block_content pos:start="679:9" pos:end="681:37">

        <expr_stmt pos:start="679:9" pos:end="679:46"><expr pos:start="679:9" pos:end="679:45"><operator pos:start="679:9" pos:end="679:9">*</operator><name pos:start="679:10" pos:end="679:13">pict</name><operator pos:start="679:14" pos:end="679:14">=</operator> <operator pos:start="679:16" pos:end="679:16">*</operator><operator pos:start="679:17" pos:end="679:17">(</operator><name pos:start="679:18" pos:end="679:24">AVFrame</name><operator pos:start="679:25" pos:end="679:25">*</operator><operator pos:start="679:26" pos:end="679:26">)</operator><operator pos:start="679:27" pos:end="679:27">&amp;</operator><name pos:start="679:28" pos:end="679:45"><name pos:start="679:28" pos:end="679:28">s</name><operator pos:start="679:29" pos:end="679:30">-&gt;</operator><name pos:start="679:31" pos:end="679:45">current_picture</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="681:9" pos:end="681:37"><expr pos:start="681:9" pos:end="681:36"><call pos:start="681:9" pos:end="681:36"><name pos:start="681:9" pos:end="681:27">ff_print_debug_info</name><argument_list pos:start="681:28" pos:end="681:36">(<argument pos:start="681:29" pos:end="681:29"><expr pos:start="681:29" pos:end="681:29"><name pos:start="681:29" pos:end="681:29">s</name></expr></argument>, <argument pos:start="681:32" pos:end="681:35"><expr pos:start="681:32" pos:end="681:35"><name pos:start="681:32" pos:end="681:35">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="683:7" pos:end="691:5">else <block pos:start="683:12" pos:end="691:5">{<block_content pos:start="685:9" pos:end="689:41">

        <expr_stmt pos:start="685:9" pos:end="685:43"><expr pos:start="685:9" pos:end="685:42"><operator pos:start="685:9" pos:end="685:9">*</operator><name pos:start="685:10" pos:end="685:13">pict</name><operator pos:start="685:14" pos:end="685:14">=</operator> <operator pos:start="685:16" pos:end="685:16">*</operator><operator pos:start="685:17" pos:end="685:17">(</operator><name pos:start="685:18" pos:end="685:24">AVFrame</name><operator pos:start="685:25" pos:end="685:25">*</operator><operator pos:start="685:26" pos:end="685:26">)</operator><operator pos:start="685:27" pos:end="685:27">&amp;</operator><name pos:start="685:28" pos:end="685:42"><name pos:start="685:28" pos:end="685:28">s</name><operator pos:start="685:29" pos:end="685:30">-&gt;</operator><name pos:start="685:31" pos:end="685:42">last_picture</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="687:9" pos:end="689:41"><if pos:start="687:9" pos:end="689:41">if<condition pos:start="687:11" pos:end="687:16">(<expr pos:start="687:12" pos:end="687:15"><name pos:start="687:12" pos:end="687:15">pict</name></expr>)</condition><block type="pseudo" pos:start="689:13" pos:end="689:41"><block_content pos:start="689:13" pos:end="689:41">

            <expr_stmt pos:start="689:13" pos:end="689:41"><expr pos:start="689:13" pos:end="689:40"><call pos:start="689:13" pos:end="689:40"><name pos:start="689:13" pos:end="689:31">ff_print_debug_info</name><argument_list pos:start="689:32" pos:end="689:40">(<argument pos:start="689:33" pos:end="689:33"><expr pos:start="689:33" pos:end="689:33"><name pos:start="689:33" pos:end="689:33">s</name></expr></argument>, <argument pos:start="689:36" pos:end="689:39"><expr pos:start="689:36" pos:end="689:39"><name pos:start="689:36" pos:end="689:39">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="695:5" pos:end="695:58">/* Return the Picture timestamp as the frame number */</comment>

    <comment type="block" pos:start="697:5" pos:end="697:58">/* we substract 1 because it is added on utils.c    */</comment>

    <expr_stmt pos:start="699:5" pos:end="699:48"><expr pos:start="699:5" pos:end="699:47"><name pos:start="699:5" pos:end="699:23"><name pos:start="699:5" pos:end="699:9">avctx</name><operator pos:start="699:10" pos:end="699:11">-&gt;</operator><name pos:start="699:12" pos:end="699:23">frame_number</name></name> <operator pos:start="699:25" pos:end="699:25">=</operator> <name pos:start="699:27" pos:end="699:43"><name pos:start="699:27" pos:end="699:27">s</name><operator pos:start="699:28" pos:end="699:29">-&gt;</operator><name pos:start="699:30" pos:end="699:43">picture_number</name></name> <operator pos:start="699:45" pos:end="699:45">-</operator> <literal type="number" pos:start="699:47" pos:end="699:47">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="703:5" pos:end="703:48">/* dont output the last pic after seeking */</comment>

    <if_stmt pos:start="705:5" pos:end="710:0"><if pos:start="705:5" pos:end="710:0">if<condition pos:start="705:7" pos:end="705:43">(<expr pos:start="705:8" pos:end="705:42"><name pos:start="705:8" pos:end="705:26"><name pos:start="705:8" pos:end="705:8">s</name><operator pos:start="705:9" pos:end="705:10">-&gt;</operator><name pos:start="705:11" pos:end="705:26">last_picture_ptr</name></name> <operator pos:start="705:28" pos:end="705:29">||</operator> <name pos:start="705:31" pos:end="705:42"><name pos:start="705:31" pos:end="705:31">s</name><operator pos:start="705:32" pos:end="705:33">-&gt;</operator><name pos:start="705:34" pos:end="705:42">low_delay</name></name></expr>)</condition><block type="pseudo" pos:start="707:9" pos:end="710:0"><block_content pos:start="707:9" pos:end="710:0">

        <expr_stmt pos:start="707:9" pos:end="710:0"><expr pos:start="707:9" pos:end="707:36"><operator pos:start="707:9" pos:end="707:9">*</operator><name pos:start="707:10" pos:end="707:18">data_size</name> <operator pos:start="707:20" pos:end="707:20">=</operator> <sizeof pos:start="707:22" pos:end="707:36">sizeof<argument_list pos:start="707:28" pos:end="707:36">(<argument pos:start="707:29" pos:end="707:35"><expr pos:start="707:29" pos:end="707:35"><name pos:start="707:29" pos:end="707:35">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="709:1" pos:end="709:23">#<cpp:directive pos:start="709:2" pos:end="709:6">ifdef</cpp:directive> <name pos:start="709:8" pos:end="709:23">PRINT_FRAME_TIME</name></cpp:ifdef>

<expr_stmt pos:start="711:1" pos:end="714:0"><expr pos:start="711:1" pos:end="711:29"><call pos:start="711:1" pos:end="711:29"><name pos:start="711:1" pos:end="711:6">printf</name><argument_list pos:start="711:7" pos:end="711:29">(<argument pos:start="711:8" pos:end="711:14"><expr pos:start="711:8" pos:end="711:14"><literal type="string" pos:start="711:8" pos:end="711:14">"%Ld\n"</literal></expr></argument>, <argument pos:start="711:17" pos:end="711:28"><expr pos:start="711:17" pos:end="711:28"><call pos:start="711:17" pos:end="711:23"><name pos:start="711:17" pos:end="711:21">rdtsc</name><argument_list pos:start="711:22" pos:end="711:23">()</argument_list></call><operator pos:start="711:24" pos:end="711:24">-</operator><name pos:start="711:25" pos:end="711:28">time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="713:1" pos:end="713:6">#<cpp:directive pos:start="713:2" pos:end="713:6">endif</cpp:directive></cpp:endif>



    <return pos:start="717:5" pos:end="717:43">return <expr pos:start="717:12" pos:end="717:42"><call pos:start="717:12" pos:end="717:42"><name pos:start="717:12" pos:end="717:29">get_consumed_bytes</name><argument_list pos:start="717:30" pos:end="717:42">(<argument pos:start="717:31" pos:end="717:31"><expr pos:start="717:31" pos:end="717:31"><name pos:start="717:31" pos:end="717:31">s</name></expr></argument>, <argument pos:start="717:34" pos:end="717:41"><expr pos:start="717:34" pos:end="717:41"><name pos:start="717:34" pos:end="717:41">buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
