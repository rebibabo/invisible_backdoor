<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26890.c" pos:tabs="8"><function pos:start="1:1" pos:end="493:2"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">ppc_core99_init</name> <parameter_list pos:start="1:29" pos:end="13:51">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:32">int</name></type> <name pos:start="1:34" pos:end="1:41">ram_size</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:59"><decl pos:start="1:44" pos:end="1:59"><type pos:start="1:44" pos:end="1:59"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:59">vga_ram_size</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:52"><decl pos:start="3:30" pos:end="3:52"><type pos:start="3:30" pos:end="3:52"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:39">char</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:52">boot_device</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:70"><decl pos:start="3:55" pos:end="3:70"><type pos:start="3:55" pos:end="3:70"><name pos:start="3:55" pos:end="3:66">DisplayState</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:70">ds</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:53"><decl pos:start="5:30" pos:end="5:53"><type pos:start="5:30" pos:end="5:53"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:39">char</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier><modifier pos:start="5:42" pos:end="5:42">*</modifier></type><name pos:start="5:43" pos:end="5:53">fd_filename</name></decl></parameter>, <parameter pos:start="5:56" pos:end="5:67"><decl pos:start="5:56" pos:end="5:67"><type pos:start="5:56" pos:end="5:67"><name pos:start="5:56" pos:end="5:58">int</name></type> <name pos:start="5:60" pos:end="5:67">snapshot</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:56"><decl pos:start="7:30" pos:end="7:56"><type pos:start="7:30" pos:end="7:56"><specifier pos:start="7:30" pos:end="7:34">const</specifier> <name pos:start="7:36" pos:end="7:39">char</name> <modifier pos:start="7:41" pos:end="7:41">*</modifier></type><name pos:start="7:42" pos:end="7:56">kernel_filename</name></decl></parameter>,

                             <parameter pos:start="9:30" pos:end="9:55"><decl pos:start="9:30" pos:end="9:55"><type pos:start="9:30" pos:end="9:55"><specifier pos:start="9:30" pos:end="9:34">const</specifier> <name pos:start="9:36" pos:end="9:39">char</name> <modifier pos:start="9:41" pos:end="9:41">*</modifier></type><name pos:start="9:42" pos:end="9:55">kernel_cmdline</name></decl></parameter>,

                             <parameter pos:start="11:30" pos:end="11:56"><decl pos:start="11:30" pos:end="11:56"><type pos:start="11:30" pos:end="11:56"><specifier pos:start="11:30" pos:end="11:34">const</specifier> <name pos:start="11:36" pos:end="11:39">char</name> <modifier pos:start="11:41" pos:end="11:41">*</modifier></type><name pos:start="11:42" pos:end="11:56">initrd_filename</name></decl></parameter>,

                             <parameter pos:start="13:30" pos:end="13:50"><decl pos:start="13:30" pos:end="13:50"><type pos:start="13:30" pos:end="13:50"><specifier pos:start="13:30" pos:end="13:34">const</specifier> <name pos:start="13:36" pos:end="13:39">char</name> <modifier pos:start="13:41" pos:end="13:41">*</modifier></type><name pos:start="13:42" pos:end="13:50">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="493:2">{<block_content pos:start="17:5" pos:end="491:64">

    <decl_stmt pos:start="17:5" pos:end="17:42"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">CPUState</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:17">env</name> <init pos:start="17:19" pos:end="17:24">= <expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">NULL</name></expr></init></decl>, <decl pos:start="17:27" pos:end="17:41"><type ref="prev" pos:start="17:5" pos:end="17:14"><modifier pos:start="17:27" pos:end="17:27">*</modifier></type><name pos:start="17:28" pos:end="17:41"><name pos:start="17:28" pos:end="17:31">envs</name><index pos:start="17:32" pos:end="17:41">[<expr pos:start="17:33" pos:end="17:40"><name pos:start="17:33" pos:end="17:40">MAX_CPUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">char</name></type> <name pos:start="19:10" pos:end="19:18"><name pos:start="19:10" pos:end="19:12">buf</name><index pos:start="19:13" pos:end="19:18">[<expr pos:start="19:14" pos:end="19:17"><literal type="number" pos:start="19:14" pos:end="19:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:17">pic</name></decl>, <decl pos:start="21:20" pos:end="21:33"><type ref="prev" pos:start="21:5" pos:end="21:14"><modifier pos:start="21:20" pos:end="21:20">*</modifier><modifier pos:start="21:21" pos:end="21:21">*</modifier></type><name pos:start="21:22" pos:end="21:33">openpic_irqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:19">unin_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">linux_boot</name></decl>, <decl pos:start="25:21" pos:end="25:21"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:21" pos:end="25:21">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:47"><decl pos:start="27:5" pos:end="27:29"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:12">unsigned</name> <name pos:start="27:14" pos:end="27:17">long</name></type> <name pos:start="27:19" pos:end="27:29">bios_offset</name></decl>, <decl pos:start="27:32" pos:end="27:46"><type ref="prev" pos:start="27:5" pos:end="27:17"/><name pos:start="27:32" pos:end="27:46">vga_bios_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:64"><decl pos:start="29:5" pos:end="29:24"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">uint32_t</name></type> <name pos:start="29:14" pos:end="29:24">kernel_base</name></decl>, <decl pos:start="29:27" pos:end="29:37"><type ref="prev" pos:start="29:5" pos:end="29:12"/><name pos:start="29:27" pos:end="29:37">kernel_size</name></decl>, <decl pos:start="29:40" pos:end="29:50"><type ref="prev" pos:start="29:5" pos:end="29:12"/><name pos:start="29:40" pos:end="29:50">initrd_base</name></decl>, <decl pos:start="29:53" pos:end="29:63"><type ref="prev" pos:start="29:5" pos:end="29:12"/><name pos:start="29:53" pos:end="29:63">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:20"><decl pos:start="31:5" pos:end="31:19"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:10">PCIBus</name> <modifier pos:start="31:12" pos:end="31:12">*</modifier></type><name pos:start="31:13" pos:end="31:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="42:0"><decl pos:start="33:5" pos:end="33:17"><type pos:start="33:5" pos:end="33:11"><name pos:start="33:5" pos:end="33:11">nvram_t</name></type> <name pos:start="33:13" pos:end="33:17">nvram</name></decl>;</decl_stmt>

<cpp:if pos:start="35:1" pos:end="35:5">#<cpp:directive pos:start="35:2" pos:end="35:3">if</cpp:directive> <expr pos:start="35:5" pos:end="35:5"><literal type="number" pos:start="35:5" pos:end="35:5">0</literal></expr></cpp:if>

    MacIONVRAMState *nvr;

    int nvram_mem_index;

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="43:5" pos:end="43:21"><decl pos:start="43:5" pos:end="43:20"><type pos:start="43:5" pos:end="43:14"><name pos:start="43:5" pos:end="43:12">m48t59_t</name> <modifier pos:start="43:14" pos:end="43:14">*</modifier></type><name pos:start="43:15" pos:end="43:20">m48t59</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:33"><decl pos:start="45:5" pos:end="45:21"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:21">vga_bios_size</name></decl>, <decl pos:start="45:24" pos:end="45:32"><type ref="prev" pos:start="45:5" pos:end="45:7"/><name pos:start="45:24" pos:end="45:32">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:24"><decl pos:start="47:5" pos:end="47:23"><type pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:12">qemu_irq</name> <modifier pos:start="47:14" pos:end="47:14">*</modifier></type><name pos:start="47:15" pos:end="47:23">dummy_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:55"><decl pos:start="49:5" pos:end="49:21"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:21">pic_mem_index</name></decl>, <decl pos:start="49:24" pos:end="49:38"><type ref="prev" pos:start="49:5" pos:end="49:7"/><name pos:start="49:24" pos:end="49:38">dbdma_mem_index</name></decl>, <decl pos:start="49:41" pos:end="49:54"><type ref="prev" pos:start="49:5" pos:end="49:7"/><name pos:start="49:41" pos:end="49:54">cuda_mem_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:25"><decl pos:start="51:5" pos:end="51:24"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:21">ide_mem_index</name><index pos:start="51:22" pos:end="51:24">[<expr pos:start="51:23" pos:end="51:23"><literal type="number" pos:start="51:23" pos:end="51:23">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:41"><decl pos:start="53:5" pos:end="53:40"><type pos:start="53:5" pos:end="53:7"><name pos:start="53:5" pos:end="53:7">int</name></type> <name pos:start="53:9" pos:end="53:23">ppc_boot_device</name> <init pos:start="53:25" pos:end="53:40">= <expr pos:start="53:27" pos:end="53:40"><name pos:start="53:27" pos:end="53:40"><name pos:start="53:27" pos:end="53:37">boot_device</name><index pos:start="53:38" pos:end="53:40">[<expr pos:start="53:39" pos:end="53:39"><literal type="number" pos:start="53:39" pos:end="53:39">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:43"><expr pos:start="57:5" pos:end="57:42"><name pos:start="57:5" pos:end="57:14">linux_boot</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:33">kernel_filename</name> <operator pos:start="57:35" pos:end="57:36">!=</operator> <name pos:start="57:38" pos:end="57:41">NULL</name><operator pos:start="57:42" pos:end="57:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:19">/* init CPUs */</comment>

    <if_stmt pos:start="63:5" pos:end="65:30"><if pos:start="63:5" pos:end="65:30">if <condition pos:start="63:8" pos:end="63:26">(<expr pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:17">cpu_model</name> <operator pos:start="63:19" pos:end="63:20">==</operator> <name pos:start="63:22" pos:end="63:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:30"><block_content pos:start="65:9" pos:end="65:30">

        <expr_stmt pos:start="65:9" pos:end="65:30"><expr pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:17">cpu_model</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <literal type="string" pos:start="65:21" pos:end="65:29">"default"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="67:5" pos:end="95:5">for <control pos:start="67:9" pos:end="67:34">(<init pos:start="67:10" pos:end="67:15"><expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:10">i</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <literal type="number" pos:start="67:14" pos:end="67:14">0</literal></expr>;</init> <condition pos:start="67:17" pos:end="67:29"><expr pos:start="67:17" pos:end="67:28"><name pos:start="67:17" pos:end="67:17">i</name> <operator pos:start="67:19" pos:end="67:19">&lt;</operator> <name pos:start="67:21" pos:end="67:28">smp_cpus</name></expr>;</condition> <incr pos:start="67:31" pos:end="67:33"><expr pos:start="67:31" pos:end="67:33"><name pos:start="67:31" pos:end="67:31">i</name><operator pos:start="67:32" pos:end="67:33">++</operator></expr></incr>)</control> <block pos:start="67:36" pos:end="95:5">{<block_content pos:start="69:9" pos:end="93:22">

        <expr_stmt pos:start="69:9" pos:end="69:34"><expr pos:start="69:9" pos:end="69:33"><name pos:start="69:9" pos:end="69:11">env</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:33"><name pos:start="69:15" pos:end="69:22">cpu_init</name><argument_list pos:start="69:23" pos:end="69:33">(<argument pos:start="69:24" pos:end="69:32"><expr pos:start="69:24" pos:end="69:32"><name pos:start="69:24" pos:end="69:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:17">(<expr pos:start="71:13" pos:end="71:16"><operator pos:start="71:13" pos:end="71:13">!</operator><name pos:start="71:14" pos:end="71:16">env</name></expr>)</condition> <block pos:start="71:19" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:20">

            <expr_stmt pos:start="73:13" pos:end="73:71"><expr pos:start="73:13" pos:end="73:70"><call pos:start="73:13" pos:end="73:70"><name pos:start="73:13" pos:end="73:19">fprintf</name><argument_list pos:start="73:20" pos:end="73:70">(<argument pos:start="73:21" pos:end="73:26"><expr pos:start="73:21" pos:end="73:26"><name pos:start="73:21" pos:end="73:26">stderr</name></expr></argument>, <argument pos:start="73:29" pos:end="73:69"><expr pos:start="73:29" pos:end="73:69"><literal type="string" pos:start="73:29" pos:end="73:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:20"><expr pos:start="75:13" pos:end="75:19"><call pos:start="75:13" pos:end="75:19"><name pos:start="75:13" pos:end="75:16">exit</name><argument_list pos:start="75:17" pos:end="75:19">(<argument pos:start="75:18" pos:end="75:18"><expr pos:start="75:18" pos:end="75:18"><literal type="number" pos:start="75:18" pos:end="75:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="79:9" pos:end="79:48">/* Set time-base frequency to 100 Mhz */</comment>

        <expr_stmt pos:start="81:9" pos:end="88:0"><expr pos:start="81:9" pos:end="81:53"><call pos:start="81:9" pos:end="81:53"><name pos:start="81:9" pos:end="81:23">cpu_ppc_tb_init</name><argument_list pos:start="81:24" pos:end="81:53">(<argument pos:start="81:25" pos:end="81:27"><expr pos:start="81:25" pos:end="81:27"><name pos:start="81:25" pos:end="81:27">env</name></expr></argument>, <argument pos:start="81:30" pos:end="81:52"><expr pos:start="81:30" pos:end="81:52"><literal type="number" pos:start="81:30" pos:end="81:34">100UL</literal> <operator pos:start="81:36" pos:end="81:36">*</operator> <literal type="number" pos:start="81:38" pos:end="81:43">1000UL</literal> <operator pos:start="81:45" pos:end="81:45">*</operator> <literal type="number" pos:start="81:47" pos:end="81:52">1000UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="83:1" pos:end="83:5">#<cpp:directive pos:start="83:2" pos:end="83:3">if</cpp:directive> <expr pos:start="83:5" pos:end="83:5"><literal type="number" pos:start="83:5" pos:end="83:5">0</literal></expr></cpp:if>

        env-&gt;osi_call = vga_osi_call;

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="89:9" pos:end="89:49"><expr pos:start="89:9" pos:end="89:48"><call pos:start="89:9" pos:end="89:48"><name pos:start="89:9" pos:end="89:27">qemu_register_reset</name><argument_list pos:start="89:28" pos:end="89:48">(<argument pos:start="89:29" pos:end="89:42"><expr pos:start="89:29" pos:end="89:42"><operator pos:start="89:29" pos:end="89:29">&amp;</operator><name pos:start="89:30" pos:end="89:42">cpu_ppc_reset</name></expr></argument>, <argument pos:start="89:45" pos:end="89:47"><expr pos:start="89:45" pos:end="89:47"><name pos:start="89:45" pos:end="89:47">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:62"><expr pos:start="91:9" pos:end="91:61"><call pos:start="91:9" pos:end="91:61"><name pos:start="91:9" pos:end="91:23">register_savevm</name><argument_list pos:start="91:24" pos:end="91:61">(<argument pos:start="91:25" pos:end="91:29"><expr pos:start="91:25" pos:end="91:29"><literal type="string" pos:start="91:25" pos:end="91:29">"cpu"</literal></expr></argument>, <argument pos:start="91:32" pos:end="91:32"><expr pos:start="91:32" pos:end="91:32"><literal type="number" pos:start="91:32" pos:end="91:32">0</literal></expr></argument>, <argument pos:start="91:35" pos:end="91:35"><expr pos:start="91:35" pos:end="91:35"><literal type="number" pos:start="91:35" pos:end="91:35">3</literal></expr></argument>, <argument pos:start="91:38" pos:end="91:45"><expr pos:start="91:38" pos:end="91:45"><name pos:start="91:38" pos:end="91:45">cpu_save</name></expr></argument>, <argument pos:start="91:48" pos:end="91:55"><expr pos:start="91:48" pos:end="91:55"><name pos:start="91:48" pos:end="91:55">cpu_load</name></expr></argument>, <argument pos:start="91:58" pos:end="91:60"><expr pos:start="91:58" pos:end="91:60"><name pos:start="91:58" pos:end="91:60">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:22"><expr pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:12">envs</name><index pos:start="93:13" pos:end="93:15">[<expr pos:start="93:14" pos:end="93:14"><name pos:start="93:14" pos:end="93:14">i</name></expr>]</index></name> <operator pos:start="93:17" pos:end="93:17">=</operator> <name pos:start="93:19" pos:end="93:21">env</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="97:5" pos:end="109:5"><if pos:start="97:5" pos:end="109:5">if <condition pos:start="97:8" pos:end="97:30">(<expr pos:start="97:9" pos:end="97:29"><name pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:11">env</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:16">nip</name></name> <operator pos:start="97:18" pos:end="97:18">&lt;</operator> <literal type="number" pos:start="97:20" pos:end="97:29">0xFFF80000</literal></expr>)</condition> <block pos:start="97:32" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:68">

        <comment type="block" pos:start="99:9" pos:end="105:11">/* Special test for PowerPC 601:

         * the boot vector is at 0xFFF00100, then we need a 1MB BIOS.

         * But the NVRAM is located at 0xFFF04000...

         */</comment>

        <expr_stmt pos:start="107:9" pos:end="107:68"><expr pos:start="107:9" pos:end="107:67"><call pos:start="107:9" pos:end="107:67"><name pos:start="107:9" pos:end="107:17">cpu_abort</name><argument_list pos:start="107:18" pos:end="107:67">(<argument pos:start="107:19" pos:end="107:21"><expr pos:start="107:19" pos:end="107:21"><name pos:start="107:19" pos:end="107:21">env</name></expr></argument>, <argument pos:start="107:24" pos:end="107:66"><expr pos:start="107:24" pos:end="107:66"><literal type="string" pos:start="107:24" pos:end="107:66">"Mac99 hardware can not handle 1 MB BIOS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:58"><expr pos:start="115:5" pos:end="115:57"><call pos:start="115:5" pos:end="115:57"><name pos:start="115:5" pos:end="115:32">cpu_register_physical_memory</name><argument_list pos:start="115:33" pos:end="115:57">(<argument pos:start="115:34" pos:end="115:34"><expr pos:start="115:34" pos:end="115:34"><literal type="number" pos:start="115:34" pos:end="115:34">0</literal></expr></argument>, <argument pos:start="115:37" pos:end="115:44"><expr pos:start="115:37" pos:end="115:44"><name pos:start="115:37" pos:end="115:44">ram_size</name></expr></argument>, <argument pos:start="115:47" pos:end="115:56"><expr pos:start="115:47" pos:end="115:56"><name pos:start="115:47" pos:end="115:56">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="119:5" pos:end="119:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:42"><expr pos:start="121:5" pos:end="121:41"><name pos:start="121:5" pos:end="121:15">bios_offset</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <name pos:start="121:19" pos:end="121:26">ram_size</name> <operator pos:start="121:28" pos:end="121:28">+</operator> <name pos:start="121:30" pos:end="121:41">vga_ram_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="125:34"><if pos:start="123:5" pos:end="125:34">if <condition pos:start="123:8" pos:end="123:26">(<expr pos:start="123:9" pos:end="123:25"><name pos:start="123:9" pos:end="123:17">bios_name</name> <operator pos:start="123:19" pos:end="123:20">==</operator> <name pos:start="123:22" pos:end="123:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="125:9" pos:end="125:34"><block_content pos:start="125:9" pos:end="125:34">

        <expr_stmt pos:start="125:9" pos:end="125:34"><expr pos:start="125:9" pos:end="125:33"><name pos:start="125:9" pos:end="125:17">bios_name</name> <operator pos:start="125:19" pos:end="125:19">=</operator> <name pos:start="125:21" pos:end="125:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:61"><expr pos:start="127:5" pos:end="127:60"><call pos:start="127:5" pos:end="127:60"><name pos:start="127:5" pos:end="127:12">snprintf</name><argument_list pos:start="127:13" pos:end="127:60">(<argument pos:start="127:14" pos:end="127:16"><expr pos:start="127:14" pos:end="127:16"><name pos:start="127:14" pos:end="127:16">buf</name></expr></argument>, <argument pos:start="127:19" pos:end="127:29"><expr pos:start="127:19" pos:end="127:29"><sizeof pos:start="127:19" pos:end="127:29">sizeof<argument_list pos:start="127:25" pos:end="127:29">(<argument pos:start="127:26" pos:end="127:28"><expr pos:start="127:26" pos:end="127:28"><name pos:start="127:26" pos:end="127:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="127:32" pos:end="127:38"><expr pos:start="127:32" pos:end="127:38"><literal type="string" pos:start="127:32" pos:end="127:38">"%s/%s"</literal></expr></argument>, <argument pos:start="127:41" pos:end="127:48"><expr pos:start="127:41" pos:end="127:48"><name pos:start="127:41" pos:end="127:48">bios_dir</name></expr></argument>, <argument pos:start="127:51" pos:end="127:59"><expr pos:start="127:51" pos:end="127:59"><name pos:start="127:51" pos:end="127:59">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:61"><expr pos:start="129:5" pos:end="129:60"><name pos:start="129:5" pos:end="129:13">bios_size</name> <operator pos:start="129:15" pos:end="129:15">=</operator> <call pos:start="129:17" pos:end="129:60"><name pos:start="129:17" pos:end="129:26">load_image</name><argument_list pos:start="129:27" pos:end="129:60">(<argument pos:start="129:28" pos:end="129:30"><expr pos:start="129:28" pos:end="129:30"><name pos:start="129:28" pos:end="129:30">buf</name></expr></argument>, <argument pos:start="129:33" pos:end="129:59"><expr pos:start="129:33" pos:end="129:59"><name pos:start="129:33" pos:end="129:45">phys_ram_base</name> <operator pos:start="129:47" pos:end="129:47">+</operator> <name pos:start="129:49" pos:end="129:59">bios_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="137:5"><if pos:start="131:5" pos:end="137:5">if <condition pos:start="131:8" pos:end="131:47">(<expr pos:start="131:9" pos:end="131:46"><name pos:start="131:9" pos:end="131:36"><name pos:start="131:9" pos:end="131:17">bios_size</name> <argument_list type="generic" pos:start="131:19" pos:end="131:36">&lt; <argument pos:start="131:21" pos:end="131:34"><expr pos:start="131:21" pos:end="131:34"><literal type="number" pos:start="131:21" pos:end="131:21">0</literal> <operator pos:start="131:23" pos:end="131:24">||</operator> <name pos:start="131:26" pos:end="131:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="131:38" pos:end="131:46">BIOS_SIZE</name></expr>)</condition> <block pos:start="131:49" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:16">

        <expr_stmt pos:start="133:9" pos:end="133:72"><expr pos:start="133:9" pos:end="133:71"><call pos:start="133:9" pos:end="133:71"><name pos:start="133:9" pos:end="133:17">cpu_abort</name><argument_list pos:start="133:18" pos:end="133:71">(<argument pos:start="133:19" pos:end="133:21"><expr pos:start="133:19" pos:end="133:21"><name pos:start="133:19" pos:end="133:21">env</name></expr></argument>, <argument pos:start="133:24" pos:end="133:65"><expr pos:start="133:24" pos:end="133:65"><literal type="string" pos:start="133:24" pos:end="133:65">"qemu: could not load PowerPC bios '%s'\n"</literal></expr></argument>, <argument pos:start="133:68" pos:end="133:70"><expr pos:start="133:68" pos:end="133:70"><name pos:start="133:68" pos:end="133:70">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:16"><expr pos:start="135:9" pos:end="135:15"><call pos:start="135:9" pos:end="135:15"><name pos:start="135:9" pos:end="135:12">exit</name><argument_list pos:start="135:13" pos:end="135:15">(<argument pos:start="135:14" pos:end="135:14"><expr pos:start="135:14" pos:end="135:14"><literal type="number" pos:start="135:14" pos:end="135:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:45"><expr pos:start="139:5" pos:end="139:44"><name pos:start="139:5" pos:end="139:13">bios_size</name> <operator pos:start="139:15" pos:end="139:15">=</operator> <operator pos:start="139:17" pos:end="139:17">(</operator><name pos:start="139:18" pos:end="139:26">bios_size</name> <operator pos:start="139:28" pos:end="139:28">+</operator> <literal type="number" pos:start="139:30" pos:end="139:34">0xfff</literal><operator pos:start="139:35" pos:end="139:35">)</operator> <operator pos:start="139:37" pos:end="139:37">&amp;</operator> <operator pos:start="139:39" pos:end="139:39">~</operator><literal type="number" pos:start="139:40" pos:end="139:44">0xfff</literal></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="147:5"><if pos:start="141:5" pos:end="147:5">if <condition pos:start="141:8" pos:end="141:31">(<expr pos:start="141:9" pos:end="141:30"><name pos:start="141:9" pos:end="141:17">bios_size</name> <operator pos:start="141:19" pos:end="141:19">&gt;</operator> <literal type="number" pos:start="141:21" pos:end="141:30">0x00080000</literal></expr>)</condition> <block pos:start="141:33" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:68">

        <comment type="block" pos:start="143:9" pos:end="143:78">/* As the NVRAM is located at 0xFFF04000, we cannot use 1 MB BIOSes */</comment>

        <expr_stmt pos:start="145:9" pos:end="145:68"><expr pos:start="145:9" pos:end="145:67"><call pos:start="145:9" pos:end="145:67"><name pos:start="145:9" pos:end="145:17">cpu_abort</name><argument_list pos:start="145:18" pos:end="145:67">(<argument pos:start="145:19" pos:end="145:21"><expr pos:start="145:19" pos:end="145:21"><name pos:start="145:19" pos:end="145:21">env</name></expr></argument>, <argument pos:start="145:24" pos:end="145:66"><expr pos:start="145:24" pos:end="145:66"><literal type="string" pos:start="145:24" pos:end="145:66">"Mac99 hardware can not handle 1 MB BIOS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="149:5" pos:end="151:70"><expr pos:start="149:5" pos:end="151:69"><call pos:start="149:5" pos:end="151:69"><name pos:start="149:5" pos:end="149:32">cpu_register_physical_memory</name><argument_list pos:start="149:33" pos:end="151:69">(<argument pos:start="149:34" pos:end="149:55"><expr pos:start="149:34" pos:end="149:55"><operator pos:start="149:34" pos:end="149:34">(</operator><name pos:start="149:35" pos:end="149:42">uint32_t</name><operator pos:start="149:43" pos:end="149:43">)</operator><operator pos:start="149:44" pos:end="149:44">(</operator><operator pos:start="149:45" pos:end="149:45">-</operator><name pos:start="149:46" pos:end="149:54">bios_size</name><operator pos:start="149:55" pos:end="149:55">)</operator></expr></argument>,

                                 <argument pos:start="151:34" pos:end="151:42"><expr pos:start="151:34" pos:end="151:42"><name pos:start="151:34" pos:end="151:42">bios_size</name></expr></argument>, <argument pos:start="151:45" pos:end="151:68"><expr pos:start="151:45" pos:end="151:68"><name pos:start="151:45" pos:end="151:55">bios_offset</name> <operator pos:start="151:57" pos:end="151:57">|</operator> <name pos:start="151:59" pos:end="151:68">IO_MEM_ROM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="155:5" pos:end="155:36">/* allocate and load VGA BIOS */</comment>

    <expr_stmt pos:start="157:5" pos:end="157:46"><expr pos:start="157:5" pos:end="157:45"><name pos:start="157:5" pos:end="157:19">vga_bios_offset</name> <operator pos:start="157:21" pos:end="157:21">=</operator> <name pos:start="157:23" pos:end="157:33">bios_offset</name> <operator pos:start="157:35" pos:end="157:35">+</operator> <name pos:start="157:37" pos:end="157:45">bios_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:68"><expr pos:start="159:5" pos:end="159:67"><call pos:start="159:5" pos:end="159:67"><name pos:start="159:5" pos:end="159:12">snprintf</name><argument_list pos:start="159:13" pos:end="159:67">(<argument pos:start="159:14" pos:end="159:16"><expr pos:start="159:14" pos:end="159:16"><name pos:start="159:14" pos:end="159:16">buf</name></expr></argument>, <argument pos:start="159:19" pos:end="159:29"><expr pos:start="159:19" pos:end="159:29"><sizeof pos:start="159:19" pos:end="159:29">sizeof<argument_list pos:start="159:25" pos:end="159:29">(<argument pos:start="159:26" pos:end="159:28"><expr pos:start="159:26" pos:end="159:28"><name pos:start="159:26" pos:end="159:28">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="159:32" pos:end="159:38"><expr pos:start="159:32" pos:end="159:38"><literal type="string" pos:start="159:32" pos:end="159:38">"%s/%s"</literal></expr></argument>, <argument pos:start="159:41" pos:end="159:48"><expr pos:start="159:41" pos:end="159:48"><name pos:start="159:41" pos:end="159:48">bios_dir</name></expr></argument>, <argument pos:start="159:51" pos:end="159:66"><expr pos:start="159:51" pos:end="159:66"><name pos:start="159:51" pos:end="159:66">VGABIOS_FILENAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:73"><expr pos:start="161:5" pos:end="161:72"><name pos:start="161:5" pos:end="161:17">vga_bios_size</name> <operator pos:start="161:19" pos:end="161:19">=</operator> <call pos:start="161:21" pos:end="161:72"><name pos:start="161:21" pos:end="161:30">load_image</name><argument_list pos:start="161:31" pos:end="161:72">(<argument pos:start="161:32" pos:end="161:34"><expr pos:start="161:32" pos:end="161:34"><name pos:start="161:32" pos:end="161:34">buf</name></expr></argument>, <argument pos:start="161:37" pos:end="161:71"><expr pos:start="161:37" pos:end="161:71"><name pos:start="161:37" pos:end="161:49">phys_ram_base</name> <operator pos:start="161:51" pos:end="161:51">+</operator> <name pos:start="161:53" pos:end="161:67">vga_bios_offset</name> <operator pos:start="161:69" pos:end="161:69">+</operator> <literal type="number" pos:start="161:71" pos:end="161:71">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="191:5"><if pos:start="163:5" pos:end="171:5">if <condition pos:start="163:8" pos:end="163:26">(<expr pos:start="163:9" pos:end="163:25"><name pos:start="163:9" pos:end="163:21">vga_bios_size</name> <operator pos:start="163:23" pos:end="163:23">&lt;</operator> <literal type="number" pos:start="163:25" pos:end="163:25">0</literal></expr>)</condition> <block pos:start="163:28" pos:end="171:5">{<block_content pos:start="167:9" pos:end="169:26">

        <comment type="block" pos:start="165:9" pos:end="165:54">/* if no bios is present, we can still work */</comment>

        <expr_stmt pos:start="167:9" pos:end="167:78"><expr pos:start="167:9" pos:end="167:77"><call pos:start="167:9" pos:end="167:77"><name pos:start="167:9" pos:end="167:15">fprintf</name><argument_list pos:start="167:16" pos:end="167:77">(<argument pos:start="167:17" pos:end="167:22"><expr pos:start="167:17" pos:end="167:22"><name pos:start="167:17" pos:end="167:22">stderr</name></expr></argument>, <argument pos:start="167:25" pos:end="167:71"><expr pos:start="167:25" pos:end="167:71"><literal type="string" pos:start="167:25" pos:end="167:71">"qemu: warning: could not load VGA bios '%s'\n"</literal></expr></argument>, <argument pos:start="167:74" pos:end="167:76"><expr pos:start="167:74" pos:end="167:76"><name pos:start="167:74" pos:end="167:76">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:26"><expr pos:start="169:9" pos:end="169:25"><name pos:start="169:9" pos:end="169:21">vga_bios_size</name> <operator pos:start="169:23" pos:end="169:23">=</operator> <literal type="number" pos:start="169:25" pos:end="169:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="171:7" pos:end="191:5">else <block pos:start="171:12" pos:end="191:5">{<block_content pos:start="177:9" pos:end="189:27">

        <comment type="block" pos:start="173:9" pos:end="175:22">/* set a specific header (XXX: find real Apple format for NDRV

           drivers) */</comment>

        <expr_stmt pos:start="177:9" pos:end="177:45"><expr pos:start="177:9" pos:end="177:44"><name pos:start="177:9" pos:end="177:38"><name pos:start="177:9" pos:end="177:21">phys_ram_base</name><index pos:start="177:22" pos:end="177:38">[<expr pos:start="177:23" pos:end="177:37"><name pos:start="177:23" pos:end="177:37">vga_bios_offset</name></expr>]</index></name> <operator pos:start="177:40" pos:end="177:40">=</operator> <literal type="char" pos:start="177:42" pos:end="177:44">'N'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:49"><expr pos:start="179:9" pos:end="179:48"><name pos:start="179:9" pos:end="179:42"><name pos:start="179:9" pos:end="179:21">phys_ram_base</name><index pos:start="179:22" pos:end="179:42">[<expr pos:start="179:23" pos:end="179:41"><name pos:start="179:23" pos:end="179:37">vga_bios_offset</name> <operator pos:start="179:39" pos:end="179:39">+</operator> <literal type="number" pos:start="179:41" pos:end="179:41">1</literal></expr>]</index></name> <operator pos:start="179:44" pos:end="179:44">=</operator> <literal type="char" pos:start="179:46" pos:end="179:48">'D'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:49"><expr pos:start="181:9" pos:end="181:48"><name pos:start="181:9" pos:end="181:42"><name pos:start="181:9" pos:end="181:21">phys_ram_base</name><index pos:start="181:22" pos:end="181:42">[<expr pos:start="181:23" pos:end="181:41"><name pos:start="181:23" pos:end="181:37">vga_bios_offset</name> <operator pos:start="181:39" pos:end="181:39">+</operator> <literal type="number" pos:start="181:41" pos:end="181:41">2</literal></expr>]</index></name> <operator pos:start="181:44" pos:end="181:44">=</operator> <literal type="char" pos:start="181:46" pos:end="181:48">'R'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:49"><expr pos:start="183:9" pos:end="183:48"><name pos:start="183:9" pos:end="183:42"><name pos:start="183:9" pos:end="183:21">phys_ram_base</name><index pos:start="183:22" pos:end="183:42">[<expr pos:start="183:23" pos:end="183:41"><name pos:start="183:23" pos:end="183:37">vga_bios_offset</name> <operator pos:start="183:39" pos:end="183:39">+</operator> <literal type="number" pos:start="183:41" pos:end="183:41">3</literal></expr>]</index></name> <operator pos:start="183:44" pos:end="183:44">=</operator> <literal type="char" pos:start="183:46" pos:end="183:48">'V'</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="187:36"><expr pos:start="185:9" pos:end="187:35"><call pos:start="185:9" pos:end="187:35"><name pos:start="185:9" pos:end="185:20">cpu_to_be32w</name><argument_list pos:start="185:21" pos:end="187:35">(<argument pos:start="185:22" pos:end="185:70"><expr pos:start="185:22" pos:end="185:70"><operator pos:start="185:22" pos:end="185:22">(</operator><name pos:start="185:23" pos:end="185:30">uint32_t</name> <operator pos:start="185:32" pos:end="185:32">*</operator><operator pos:start="185:33" pos:end="185:33">)</operator><operator pos:start="185:34" pos:end="185:34">(</operator><name pos:start="185:35" pos:end="185:47">phys_ram_base</name> <operator pos:start="185:49" pos:end="185:49">+</operator> <name pos:start="185:51" pos:end="185:65">vga_bios_offset</name> <operator pos:start="185:67" pos:end="185:67">+</operator> <literal type="number" pos:start="185:69" pos:end="185:69">4</literal><operator pos:start="185:70" pos:end="185:70">)</operator></expr></argument>,

                     <argument pos:start="187:22" pos:end="187:34"><expr pos:start="187:22" pos:end="187:34"><name pos:start="187:22" pos:end="187:34">vga_bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:27"><expr pos:start="189:9" pos:end="189:26"><name pos:start="189:9" pos:end="189:21">vga_bios_size</name> <operator pos:start="189:23" pos:end="189:24">+=</operator> <literal type="number" pos:start="189:26" pos:end="189:26">8</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:53"><expr pos:start="193:5" pos:end="193:52"><name pos:start="193:5" pos:end="193:17">vga_bios_size</name> <operator pos:start="193:19" pos:end="193:19">=</operator> <operator pos:start="193:21" pos:end="193:21">(</operator><name pos:start="193:22" pos:end="193:34">vga_bios_size</name> <operator pos:start="193:36" pos:end="193:36">+</operator> <literal type="number" pos:start="193:38" pos:end="193:42">0xfff</literal><operator pos:start="193:43" pos:end="193:43">)</operator> <operator pos:start="193:45" pos:end="193:45">&amp;</operator> <operator pos:start="193:47" pos:end="193:47">~</operator><literal type="number" pos:start="193:48" pos:end="193:52">0xfff</literal></expr>;</expr_stmt>



    <if_stmt pos:start="197:5" pos:end="255:5"><if pos:start="197:5" pos:end="245:5">if <condition pos:start="197:8" pos:end="197:19">(<expr pos:start="197:9" pos:end="197:18"><name pos:start="197:9" pos:end="197:18">linux_boot</name></expr>)</condition> <block pos:start="197:21" pos:end="245:5">{<block_content pos:start="199:9" pos:end="243:30">

        <expr_stmt pos:start="199:9" pos:end="199:39"><expr pos:start="199:9" pos:end="199:38"><name pos:start="199:9" pos:end="199:19">kernel_base</name> <operator pos:start="199:21" pos:end="199:21">=</operator> <name pos:start="199:23" pos:end="199:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <comment type="block" pos:start="201:9" pos:end="201:40">/* now we can load the kernel */</comment>

        <expr_stmt pos:start="203:9" pos:end="203:79"><expr pos:start="203:9" pos:end="203:78"><name pos:start="203:9" pos:end="203:19">kernel_size</name> <operator pos:start="203:21" pos:end="203:21">=</operator> <call pos:start="203:23" pos:end="203:78"><name pos:start="203:23" pos:end="203:32">load_image</name><argument_list pos:start="203:33" pos:end="203:78">(<argument pos:start="203:34" pos:end="203:48"><expr pos:start="203:34" pos:end="203:48"><name pos:start="203:34" pos:end="203:48">kernel_filename</name></expr></argument>, <argument pos:start="203:51" pos:end="203:77"><expr pos:start="203:51" pos:end="203:77"><name pos:start="203:51" pos:end="203:63">phys_ram_base</name> <operator pos:start="203:65" pos:end="203:65">+</operator> <name pos:start="203:67" pos:end="203:77">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="205:9" pos:end="213:9"><if pos:start="205:9" pos:end="213:9">if <condition pos:start="205:12" pos:end="205:28">(<expr pos:start="205:13" pos:end="205:27"><name pos:start="205:13" pos:end="205:23">kernel_size</name> <operator pos:start="205:25" pos:end="205:25">&lt;</operator> <literal type="number" pos:start="205:27" pos:end="205:27">0</literal></expr>)</condition> <block pos:start="205:30" pos:end="213:9">{<block_content pos:start="207:13" pos:end="211:20">

            <expr_stmt pos:start="207:13" pos:end="209:39"><expr pos:start="207:13" pos:end="209:38"><call pos:start="207:13" pos:end="209:38"><name pos:start="207:13" pos:end="207:21">cpu_abort</name><argument_list pos:start="207:22" pos:end="209:38">(<argument pos:start="207:23" pos:end="207:25"><expr pos:start="207:23" pos:end="207:25"><name pos:start="207:23" pos:end="207:25">env</name></expr></argument>, <argument pos:start="207:28" pos:end="207:63"><expr pos:start="207:28" pos:end="207:63"><literal type="string" pos:start="207:28" pos:end="207:63">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                      <argument pos:start="209:23" pos:end="209:37"><expr pos:start="209:23" pos:end="209:37"><name pos:start="209:23" pos:end="209:37">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:20"><expr pos:start="211:13" pos:end="211:19"><call pos:start="211:13" pos:end="211:19"><name pos:start="211:13" pos:end="211:16">exit</name><argument_list pos:start="211:17" pos:end="211:19">(<argument pos:start="211:18" pos:end="211:18"><expr pos:start="211:18" pos:end="211:18"><literal type="number" pos:start="211:18" pos:end="211:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="215:9" pos:end="215:25">/* load initrd */</comment>

        <if_stmt pos:start="217:9" pos:end="241:9"><if pos:start="217:9" pos:end="235:9">if <condition pos:start="217:12" pos:end="217:28">(<expr pos:start="217:13" pos:end="217:27"><name pos:start="217:13" pos:end="217:27">initrd_filename</name></expr>)</condition> <block pos:start="217:30" pos:end="235:9">{<block_content pos:start="219:13" pos:end="233:13">

            <expr_stmt pos:start="219:13" pos:end="219:43"><expr pos:start="219:13" pos:end="219:42"><name pos:start="219:13" pos:end="219:23">initrd_base</name> <operator pos:start="219:25" pos:end="219:25">=</operator> <name pos:start="219:27" pos:end="219:42">INITRD_LOAD_ADDR</name></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="223:66"><expr pos:start="221:13" pos:end="223:65"><name pos:start="221:13" pos:end="221:23">initrd_size</name> <operator pos:start="221:25" pos:end="221:25">=</operator> <call pos:start="221:27" pos:end="223:65"><name pos:start="221:27" pos:end="221:36">load_image</name><argument_list pos:start="221:37" pos:end="223:65">(<argument pos:start="221:38" pos:end="221:52"><expr pos:start="221:38" pos:end="221:52"><name pos:start="221:38" pos:end="221:52">initrd_filename</name></expr></argument>,

                                     <argument pos:start="223:38" pos:end="223:64"><expr pos:start="223:38" pos:end="223:64"><name pos:start="223:38" pos:end="223:50">phys_ram_base</name> <operator pos:start="223:52" pos:end="223:52">+</operator> <name pos:start="223:54" pos:end="223:64">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="225:13" pos:end="233:13"><if pos:start="225:13" pos:end="233:13">if <condition pos:start="225:16" pos:end="225:32">(<expr pos:start="225:17" pos:end="225:31"><name pos:start="225:17" pos:end="225:27">initrd_size</name> <operator pos:start="225:29" pos:end="225:29">&lt;</operator> <literal type="number" pos:start="225:31" pos:end="225:31">0</literal></expr>)</condition> <block pos:start="225:34" pos:end="233:13">{<block_content pos:start="227:17" pos:end="231:24">

                <expr_stmt pos:start="227:17" pos:end="229:43"><expr pos:start="227:17" pos:end="229:42"><call pos:start="227:17" pos:end="229:42"><name pos:start="227:17" pos:end="227:25">cpu_abort</name><argument_list pos:start="227:26" pos:end="229:42">(<argument pos:start="227:27" pos:end="227:29"><expr pos:start="227:27" pos:end="227:29"><name pos:start="227:27" pos:end="227:29">env</name></expr></argument>, <argument pos:start="227:32" pos:end="227:77"><expr pos:start="227:32" pos:end="227:77"><literal type="string" pos:start="227:32" pos:end="227:77">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                          <argument pos:start="229:27" pos:end="229:41"><expr pos:start="229:27" pos:end="229:41"><name pos:start="229:27" pos:end="229:41">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:24"><expr pos:start="231:17" pos:end="231:23"><call pos:start="231:17" pos:end="231:23"><name pos:start="231:17" pos:end="231:20">exit</name><argument_list pos:start="231:21" pos:end="231:23">(<argument pos:start="231:22" pos:end="231:22"><expr pos:start="231:22" pos:end="231:22"><literal type="number" pos:start="231:22" pos:end="231:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="235:11" pos:end="241:9">else <block pos:start="235:16" pos:end="241:9">{<block_content pos:start="237:13" pos:end="239:28">

            <expr_stmt pos:start="237:13" pos:end="237:28"><expr pos:start="237:13" pos:end="237:27"><name pos:start="237:13" pos:end="237:23">initrd_base</name> <operator pos:start="237:25" pos:end="237:25">=</operator> <literal type="number" pos:start="237:27" pos:end="237:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:28"><expr pos:start="239:13" pos:end="239:27"><name pos:start="239:13" pos:end="239:23">initrd_size</name> <operator pos:start="239:25" pos:end="239:25">=</operator> <literal type="number" pos:start="239:27" pos:end="239:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:30"><expr pos:start="243:9" pos:end="243:29"><name pos:start="243:9" pos:end="243:23">ppc_boot_device</name> <operator pos:start="243:25" pos:end="243:25">=</operator> <literal type="char" pos:start="243:27" pos:end="243:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="245:7" pos:end="255:5">else <block pos:start="245:12" pos:end="255:5">{<block_content pos:start="247:9" pos:end="253:24">

        <expr_stmt pos:start="247:9" pos:end="247:24"><expr pos:start="247:9" pos:end="247:23"><name pos:start="247:9" pos:end="247:19">kernel_base</name> <operator pos:start="247:21" pos:end="247:21">=</operator> <literal type="number" pos:start="247:23" pos:end="247:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:24"><expr pos:start="249:9" pos:end="249:23"><name pos:start="249:9" pos:end="249:19">kernel_size</name> <operator pos:start="249:21" pos:end="249:21">=</operator> <literal type="number" pos:start="249:23" pos:end="249:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:24"><expr pos:start="251:9" pos:end="251:23"><name pos:start="251:9" pos:end="251:19">initrd_base</name> <operator pos:start="251:21" pos:end="251:21">=</operator> <literal type="number" pos:start="251:23" pos:end="251:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:24"><expr pos:start="253:9" pos:end="253:23"><name pos:start="253:9" pos:end="253:19">initrd_size</name> <operator pos:start="253:21" pos:end="253:21">=</operator> <literal type="number" pos:start="253:23" pos:end="253:23">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="259:5" pos:end="259:30"><expr pos:start="259:5" pos:end="259:29"><name pos:start="259:5" pos:end="259:16">isa_mem_base</name> <operator pos:start="259:18" pos:end="259:18">=</operator> <literal type="number" pos:start="259:20" pos:end="259:29">0x80000000</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="263:5" pos:end="263:39">/* Register 8 MB of ISA IO space */</comment>

    <expr_stmt pos:start="265:5" pos:end="265:42"><expr pos:start="265:5" pos:end="265:41"><call pos:start="265:5" pos:end="265:41"><name pos:start="265:5" pos:end="265:17">isa_mmio_init</name><argument_list pos:start="265:18" pos:end="265:41">(<argument pos:start="265:19" pos:end="265:28"><expr pos:start="265:19" pos:end="265:28"><literal type="number" pos:start="265:19" pos:end="265:28">0xf2000000</literal></expr></argument>, <argument pos:start="265:31" pos:end="265:40"><expr pos:start="265:31" pos:end="265:40"><literal type="number" pos:start="265:31" pos:end="265:40">0x00800000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="269:5" pos:end="269:19">/* UniN init */</comment>

    <expr_stmt pos:start="271:5" pos:end="271:73"><expr pos:start="271:5" pos:end="271:72"><name pos:start="271:5" pos:end="271:15">unin_memory</name> <operator pos:start="271:17" pos:end="271:17">=</operator> <call pos:start="271:19" pos:end="271:72"><name pos:start="271:19" pos:end="271:40">cpu_register_io_memory</name><argument_list pos:start="271:41" pos:end="271:72">(<argument pos:start="271:42" pos:end="271:42"><expr pos:start="271:42" pos:end="271:42"><literal type="number" pos:start="271:42" pos:end="271:42">0</literal></expr></argument>, <argument pos:start="271:45" pos:end="271:53"><expr pos:start="271:45" pos:end="271:53"><name pos:start="271:45" pos:end="271:53">unin_read</name></expr></argument>, <argument pos:start="271:56" pos:end="271:65"><expr pos:start="271:56" pos:end="271:65"><name pos:start="271:56" pos:end="271:65">unin_write</name></expr></argument>, <argument pos:start="271:68" pos:end="271:71"><expr pos:start="271:68" pos:end="271:71"><name pos:start="271:68" pos:end="271:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:70"><expr pos:start="273:5" pos:end="273:69"><call pos:start="273:5" pos:end="273:69"><name pos:start="273:5" pos:end="273:32">cpu_register_physical_memory</name><argument_list pos:start="273:33" pos:end="273:69">(<argument pos:start="273:34" pos:end="273:43"><expr pos:start="273:34" pos:end="273:43"><literal type="number" pos:start="273:34" pos:end="273:43">0xf8000000</literal></expr></argument>, <argument pos:start="273:46" pos:end="273:55"><expr pos:start="273:46" pos:end="273:55"><literal type="number" pos:start="273:46" pos:end="273:55">0x00001000</literal></expr></argument>, <argument pos:start="273:58" pos:end="273:68"><expr pos:start="273:58" pos:end="273:68"><name pos:start="273:58" pos:end="273:68">unin_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="277:5" pos:end="277:63"><expr pos:start="277:5" pos:end="277:62"><name pos:start="277:5" pos:end="277:16">openpic_irqs</name> <operator pos:start="277:18" pos:end="277:18">=</operator> <call pos:start="277:20" pos:end="277:62"><name pos:start="277:20" pos:end="277:31">qemu_mallocz</name><argument_list pos:start="277:32" pos:end="277:62">(<argument pos:start="277:33" pos:end="277:61"><expr pos:start="277:33" pos:end="277:61"><name pos:start="277:33" pos:end="277:40">smp_cpus</name> <operator pos:start="277:42" pos:end="277:42">*</operator> <sizeof pos:start="277:44" pos:end="277:61">sizeof<argument_list pos:start="277:50" pos:end="277:61">(<argument pos:start="277:51" pos:end="277:60"><expr pos:start="277:51" pos:end="277:60"><name pos:start="277:51" pos:end="277:58">qemu_irq</name> <operator pos:start="277:60" pos:end="277:60">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="281:70"><expr pos:start="279:5" pos:end="281:69"><name pos:start="279:5" pos:end="279:19"><name pos:start="279:5" pos:end="279:16">openpic_irqs</name><index pos:start="279:17" pos:end="279:19">[<expr pos:start="279:18" pos:end="279:18"><literal type="number" pos:start="279:18" pos:end="279:18">0</literal></expr>]</index></name> <operator pos:start="279:21" pos:end="279:21">=</operator>

        <call pos:start="281:9" pos:end="281:69"><name pos:start="281:9" pos:end="281:20">qemu_mallocz</name><argument_list pos:start="281:21" pos:end="281:69">(<argument pos:start="281:22" pos:end="281:68"><expr pos:start="281:22" pos:end="281:68"><name pos:start="281:22" pos:end="281:29">smp_cpus</name> <operator pos:start="281:31" pos:end="281:31">*</operator> <sizeof pos:start="281:33" pos:end="281:48">sizeof<argument_list pos:start="281:39" pos:end="281:48">(<argument pos:start="281:40" pos:end="281:47"><expr pos:start="281:40" pos:end="281:47"><name pos:start="281:40" pos:end="281:47">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="281:50" pos:end="281:50">*</operator> <name pos:start="281:52" pos:end="281:68">OPENPIC_OUTPUT_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="283:5" pos:end="361:5">for <control pos:start="283:9" pos:end="283:34">(<init pos:start="283:10" pos:end="283:15"><expr pos:start="283:10" pos:end="283:14"><name pos:start="283:10" pos:end="283:10">i</name> <operator pos:start="283:12" pos:end="283:12">=</operator> <literal type="number" pos:start="283:14" pos:end="283:14">0</literal></expr>;</init> <condition pos:start="283:17" pos:end="283:29"><expr pos:start="283:17" pos:end="283:28"><name pos:start="283:17" pos:end="283:17">i</name> <operator pos:start="283:19" pos:end="283:19">&lt;</operator> <name pos:start="283:21" pos:end="283:28">smp_cpus</name></expr>;</condition> <incr pos:start="283:31" pos:end="283:33"><expr pos:start="283:31" pos:end="283:33"><name pos:start="283:31" pos:end="283:31">i</name><operator pos:start="283:32" pos:end="283:33">++</operator></expr></incr>)</control> <block pos:start="283:36" pos:end="361:5">{<block_content pos:start="291:9" pos:end="359:9">

        <comment type="block" pos:start="285:9" pos:end="289:11">/* Mac99 IRQ connection between OpenPIC outputs pins

         * and PowerPC input pins

         */</comment>

        <switch pos:start="291:9" pos:end="359:9">switch <condition pos:start="291:16" pos:end="291:31">(<expr pos:start="291:17" pos:end="291:30"><call pos:start="291:17" pos:end="291:30"><name pos:start="291:17" pos:end="291:25">PPC_INPUT</name><argument_list pos:start="291:26" pos:end="291:30">(<argument pos:start="291:27" pos:end="291:29"><expr pos:start="291:27" pos:end="291:29"><name pos:start="291:27" pos:end="291:29">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="291:33" pos:end="359:9">{<block_content pos:start="293:9" pos:end="357:20">

        <case pos:start="293:9" pos:end="293:33">case <expr pos:start="293:14" pos:end="293:32"><name pos:start="293:14" pos:end="293:32">PPC_FLAGS_INPUT_6xx</name></expr>:</case>

            <expr_stmt pos:start="295:13" pos:end="295:72"><expr pos:start="295:13" pos:end="295:71"><name pos:start="295:13" pos:end="295:27"><name pos:start="295:13" pos:end="295:24">openpic_irqs</name><index pos:start="295:25" pos:end="295:27">[<expr pos:start="295:26" pos:end="295:26"><name pos:start="295:26" pos:end="295:26">i</name></expr>]</index></name> <operator pos:start="295:29" pos:end="295:29">=</operator> <name pos:start="295:31" pos:end="295:45"><name pos:start="295:31" pos:end="295:42">openpic_irqs</name><index pos:start="295:43" pos:end="295:45">[<expr pos:start="295:44" pos:end="295:44"><literal type="number" pos:start="295:44" pos:end="295:44">0</literal></expr>]</index></name> <operator pos:start="295:47" pos:end="295:47">+</operator> <operator pos:start="295:49" pos:end="295:49">(</operator><name pos:start="295:50" pos:end="295:50">i</name> <operator pos:start="295:52" pos:end="295:52">*</operator> <name pos:start="295:54" pos:end="295:70">OPENPIC_OUTPUT_NB</name><operator pos:start="295:71" pos:end="295:71">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="299:64"><expr pos:start="297:13" pos:end="299:63"><name pos:start="297:13" pos:end="297:47"><name pos:start="297:13" pos:end="297:24">openpic_irqs</name><index pos:start="297:25" pos:end="297:27">[<expr pos:start="297:26" pos:end="297:26"><name pos:start="297:26" pos:end="297:26">i</name></expr>]</index><index pos:start="297:28" pos:end="297:47">[<expr pos:start="297:29" pos:end="297:46"><name pos:start="297:29" pos:end="297:46">OPENPIC_OUTPUT_INT</name></expr>]</index></name> <operator pos:start="297:49" pos:end="297:49">=</operator>

                <operator pos:start="299:17" pos:end="299:17">(</operator><operator pos:start="299:18" pos:end="299:18">(</operator><name pos:start="299:19" pos:end="299:26">qemu_irq</name> <operator pos:start="299:28" pos:end="299:28">*</operator><operator pos:start="299:29" pos:end="299:29">)</operator><name pos:start="299:30" pos:end="299:44"><name pos:start="299:30" pos:end="299:32">env</name><operator pos:start="299:33" pos:end="299:34">-&gt;</operator><name pos:start="299:35" pos:end="299:44">irq_inputs</name></name><operator pos:start="299:45" pos:end="299:45">)</operator><index pos:start="299:46" pos:end="299:63">[<expr pos:start="299:47" pos:end="299:62"><name pos:start="299:47" pos:end="299:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="303:64"><expr pos:start="301:13" pos:end="303:63"><name pos:start="301:13" pos:end="301:48"><name pos:start="301:13" pos:end="301:24">openpic_irqs</name><index pos:start="301:25" pos:end="301:27">[<expr pos:start="301:26" pos:end="301:26"><name pos:start="301:26" pos:end="301:26">i</name></expr>]</index><index pos:start="301:28" pos:end="301:48">[<expr pos:start="301:29" pos:end="301:47"><name pos:start="301:29" pos:end="301:47">OPENPIC_OUTPUT_CINT</name></expr>]</index></name> <operator pos:start="301:50" pos:end="301:50">=</operator>

                <operator pos:start="303:17" pos:end="303:17">(</operator><operator pos:start="303:18" pos:end="303:18">(</operator><name pos:start="303:19" pos:end="303:26">qemu_irq</name> <operator pos:start="303:28" pos:end="303:28">*</operator><operator pos:start="303:29" pos:end="303:29">)</operator><name pos:start="303:30" pos:end="303:44"><name pos:start="303:30" pos:end="303:32">env</name><operator pos:start="303:33" pos:end="303:34">-&gt;</operator><name pos:start="303:35" pos:end="303:44">irq_inputs</name></name><operator pos:start="303:45" pos:end="303:45">)</operator><index pos:start="303:46" pos:end="303:63">[<expr pos:start="303:47" pos:end="303:62"><name pos:start="303:47" pos:end="303:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="307:64"><expr pos:start="305:13" pos:end="307:63"><name pos:start="305:13" pos:end="305:47"><name pos:start="305:13" pos:end="305:24">openpic_irqs</name><index pos:start="305:25" pos:end="305:27">[<expr pos:start="305:26" pos:end="305:26"><name pos:start="305:26" pos:end="305:26">i</name></expr>]</index><index pos:start="305:28" pos:end="305:47">[<expr pos:start="305:29" pos:end="305:46"><name pos:start="305:29" pos:end="305:46">OPENPIC_OUTPUT_MCK</name></expr>]</index></name> <operator pos:start="305:49" pos:end="305:49">=</operator>

                <operator pos:start="307:17" pos:end="307:17">(</operator><operator pos:start="307:18" pos:end="307:18">(</operator><name pos:start="307:19" pos:end="307:26">qemu_irq</name> <operator pos:start="307:28" pos:end="307:28">*</operator><operator pos:start="307:29" pos:end="307:29">)</operator><name pos:start="307:30" pos:end="307:44"><name pos:start="307:30" pos:end="307:32">env</name><operator pos:start="307:33" pos:end="307:34">-&gt;</operator><name pos:start="307:35" pos:end="307:44">irq_inputs</name></name><operator pos:start="307:45" pos:end="307:45">)</operator><index pos:start="307:46" pos:end="307:63">[<expr pos:start="307:47" pos:end="307:62"><name pos:start="307:47" pos:end="307:62">PPC6xx_INPUT_MCP</name></expr>]</index></expr>;</expr_stmt>

            <comment type="block" pos:start="309:13" pos:end="309:33">/* Not connected ? */</comment>

            <expr_stmt pos:start="311:13" pos:end="311:57"><expr pos:start="311:13" pos:end="311:56"><name pos:start="311:13" pos:end="311:49"><name pos:start="311:13" pos:end="311:24">openpic_irqs</name><index pos:start="311:25" pos:end="311:27">[<expr pos:start="311:26" pos:end="311:26"><name pos:start="311:26" pos:end="311:26">i</name></expr>]</index><index pos:start="311:28" pos:end="311:49">[<expr pos:start="311:29" pos:end="311:48"><name pos:start="311:29" pos:end="311:48">OPENPIC_OUTPUT_DEBUG</name></expr>]</index></name> <operator pos:start="311:51" pos:end="311:51">=</operator> <name pos:start="311:53" pos:end="311:56">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="313:13" pos:end="313:28">/* Check this */</comment>

            <expr_stmt pos:start="315:13" pos:end="317:67"><expr pos:start="315:13" pos:end="317:66"><name pos:start="315:13" pos:end="315:49"><name pos:start="315:13" pos:end="315:24">openpic_irqs</name><index pos:start="315:25" pos:end="315:27">[<expr pos:start="315:26" pos:end="315:26"><name pos:start="315:26" pos:end="315:26">i</name></expr>]</index><index pos:start="315:28" pos:end="315:49">[<expr pos:start="315:29" pos:end="315:48"><name pos:start="315:29" pos:end="315:48">OPENPIC_OUTPUT_RESET</name></expr>]</index></name> <operator pos:start="315:51" pos:end="315:51">=</operator>

                <operator pos:start="317:17" pos:end="317:17">(</operator><operator pos:start="317:18" pos:end="317:18">(</operator><name pos:start="317:19" pos:end="317:26">qemu_irq</name> <operator pos:start="317:28" pos:end="317:28">*</operator><operator pos:start="317:29" pos:end="317:29">)</operator><name pos:start="317:30" pos:end="317:44"><name pos:start="317:30" pos:end="317:32">env</name><operator pos:start="317:33" pos:end="317:34">-&gt;</operator><name pos:start="317:35" pos:end="317:44">irq_inputs</name></name><operator pos:start="317:45" pos:end="317:45">)</operator><index pos:start="317:46" pos:end="317:66">[<expr pos:start="317:47" pos:end="317:65"><name pos:start="317:47" pos:end="317:65">PPC6xx_INPUT_HRESET</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="319:13" pos:end="322:0">break;</break>

<cpp:if pos:start="321:1" pos:end="321:25">#<cpp:directive pos:start="321:2" pos:end="321:3">if</cpp:directive> <expr pos:start="321:5" pos:end="321:25"><call pos:start="321:5" pos:end="321:25"><name pos:start="321:5" pos:end="321:11">defined</name><argument_list pos:start="321:12" pos:end="321:25">(<argument pos:start="321:13" pos:end="321:24"><expr pos:start="321:13" pos:end="321:24"><name pos:start="321:13" pos:end="321:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="323:9" pos:end="323:33">case <expr pos:start="323:14" pos:end="323:32"><name pos:start="323:14" pos:end="323:32">PPC_FLAGS_INPUT_970</name></expr>:</case>

            <expr_stmt pos:start="325:13" pos:end="325:72"><expr pos:start="325:13" pos:end="325:71"><name pos:start="325:13" pos:end="325:27"><name pos:start="325:13" pos:end="325:24">openpic_irqs</name><index pos:start="325:25" pos:end="325:27">[<expr pos:start="325:26" pos:end="325:26"><name pos:start="325:26" pos:end="325:26">i</name></expr>]</index></name> <operator pos:start="325:29" pos:end="325:29">=</operator> <name pos:start="325:31" pos:end="325:45"><name pos:start="325:31" pos:end="325:42">openpic_irqs</name><index pos:start="325:43" pos:end="325:45">[<expr pos:start="325:44" pos:end="325:44"><literal type="number" pos:start="325:44" pos:end="325:44">0</literal></expr>]</index></name> <operator pos:start="325:47" pos:end="325:47">+</operator> <operator pos:start="325:49" pos:end="325:49">(</operator><name pos:start="325:50" pos:end="325:50">i</name> <operator pos:start="325:52" pos:end="325:52">*</operator> <name pos:start="325:54" pos:end="325:70">OPENPIC_OUTPUT_NB</name><operator pos:start="325:71" pos:end="325:71">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="327:13" pos:end="329:64"><expr pos:start="327:13" pos:end="329:63"><name pos:start="327:13" pos:end="327:47"><name pos:start="327:13" pos:end="327:24">openpic_irqs</name><index pos:start="327:25" pos:end="327:27">[<expr pos:start="327:26" pos:end="327:26"><name pos:start="327:26" pos:end="327:26">i</name></expr>]</index><index pos:start="327:28" pos:end="327:47">[<expr pos:start="327:29" pos:end="327:46"><name pos:start="327:29" pos:end="327:46">OPENPIC_OUTPUT_INT</name></expr>]</index></name> <operator pos:start="327:49" pos:end="327:49">=</operator>

                <operator pos:start="329:17" pos:end="329:17">(</operator><operator pos:start="329:18" pos:end="329:18">(</operator><name pos:start="329:19" pos:end="329:26">qemu_irq</name> <operator pos:start="329:28" pos:end="329:28">*</operator><operator pos:start="329:29" pos:end="329:29">)</operator><name pos:start="329:30" pos:end="329:44"><name pos:start="329:30" pos:end="329:32">env</name><operator pos:start="329:33" pos:end="329:34">-&gt;</operator><name pos:start="329:35" pos:end="329:44">irq_inputs</name></name><operator pos:start="329:45" pos:end="329:45">)</operator><index pos:start="329:46" pos:end="329:63">[<expr pos:start="329:47" pos:end="329:62"><name pos:start="329:47" pos:end="329:62">PPC970_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="333:64"><expr pos:start="331:13" pos:end="333:63"><name pos:start="331:13" pos:end="331:48"><name pos:start="331:13" pos:end="331:24">openpic_irqs</name><index pos:start="331:25" pos:end="331:27">[<expr pos:start="331:26" pos:end="331:26"><name pos:start="331:26" pos:end="331:26">i</name></expr>]</index><index pos:start="331:28" pos:end="331:48">[<expr pos:start="331:29" pos:end="331:47"><name pos:start="331:29" pos:end="331:47">OPENPIC_OUTPUT_CINT</name></expr>]</index></name> <operator pos:start="331:50" pos:end="331:50">=</operator>

                <operator pos:start="333:17" pos:end="333:17">(</operator><operator pos:start="333:18" pos:end="333:18">(</operator><name pos:start="333:19" pos:end="333:26">qemu_irq</name> <operator pos:start="333:28" pos:end="333:28">*</operator><operator pos:start="333:29" pos:end="333:29">)</operator><name pos:start="333:30" pos:end="333:44"><name pos:start="333:30" pos:end="333:32">env</name><operator pos:start="333:33" pos:end="333:34">-&gt;</operator><name pos:start="333:35" pos:end="333:44">irq_inputs</name></name><operator pos:start="333:45" pos:end="333:45">)</operator><index pos:start="333:46" pos:end="333:63">[<expr pos:start="333:47" pos:end="333:62"><name pos:start="333:47" pos:end="333:62">PPC970_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="335:13" pos:end="337:64"><expr pos:start="335:13" pos:end="337:63"><name pos:start="335:13" pos:end="335:47"><name pos:start="335:13" pos:end="335:24">openpic_irqs</name><index pos:start="335:25" pos:end="335:27">[<expr pos:start="335:26" pos:end="335:26"><name pos:start="335:26" pos:end="335:26">i</name></expr>]</index><index pos:start="335:28" pos:end="335:47">[<expr pos:start="335:29" pos:end="335:46"><name pos:start="335:29" pos:end="335:46">OPENPIC_OUTPUT_MCK</name></expr>]</index></name> <operator pos:start="335:49" pos:end="335:49">=</operator>

                <operator pos:start="337:17" pos:end="337:17">(</operator><operator pos:start="337:18" pos:end="337:18">(</operator><name pos:start="337:19" pos:end="337:26">qemu_irq</name> <operator pos:start="337:28" pos:end="337:28">*</operator><operator pos:start="337:29" pos:end="337:29">)</operator><name pos:start="337:30" pos:end="337:44"><name pos:start="337:30" pos:end="337:32">env</name><operator pos:start="337:33" pos:end="337:34">-&gt;</operator><name pos:start="337:35" pos:end="337:44">irq_inputs</name></name><operator pos:start="337:45" pos:end="337:45">)</operator><index pos:start="337:46" pos:end="337:63">[<expr pos:start="337:47" pos:end="337:62"><name pos:start="337:47" pos:end="337:62">PPC970_INPUT_MCP</name></expr>]</index></expr>;</expr_stmt>

            <comment type="block" pos:start="339:13" pos:end="339:33">/* Not connected ? */</comment>

            <expr_stmt pos:start="341:13" pos:end="341:57"><expr pos:start="341:13" pos:end="341:56"><name pos:start="341:13" pos:end="341:49"><name pos:start="341:13" pos:end="341:24">openpic_irqs</name><index pos:start="341:25" pos:end="341:27">[<expr pos:start="341:26" pos:end="341:26"><name pos:start="341:26" pos:end="341:26">i</name></expr>]</index><index pos:start="341:28" pos:end="341:49">[<expr pos:start="341:29" pos:end="341:48"><name pos:start="341:29" pos:end="341:48">OPENPIC_OUTPUT_DEBUG</name></expr>]</index></name> <operator pos:start="341:51" pos:end="341:51">=</operator> <name pos:start="341:53" pos:end="341:56">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="343:13" pos:end="343:28">/* Check this */</comment>

            <expr_stmt pos:start="345:13" pos:end="347:67"><expr pos:start="345:13" pos:end="347:66"><name pos:start="345:13" pos:end="345:49"><name pos:start="345:13" pos:end="345:24">openpic_irqs</name><index pos:start="345:25" pos:end="345:27">[<expr pos:start="345:26" pos:end="345:26"><name pos:start="345:26" pos:end="345:26">i</name></expr>]</index><index pos:start="345:28" pos:end="345:49">[<expr pos:start="345:29" pos:end="345:48"><name pos:start="345:29" pos:end="345:48">OPENPIC_OUTPUT_RESET</name></expr>]</index></name> <operator pos:start="345:51" pos:end="345:51">=</operator>

                <operator pos:start="347:17" pos:end="347:17">(</operator><operator pos:start="347:18" pos:end="347:18">(</operator><name pos:start="347:19" pos:end="347:26">qemu_irq</name> <operator pos:start="347:28" pos:end="347:28">*</operator><operator pos:start="347:29" pos:end="347:29">)</operator><name pos:start="347:30" pos:end="347:44"><name pos:start="347:30" pos:end="347:32">env</name><operator pos:start="347:33" pos:end="347:34">-&gt;</operator><name pos:start="347:35" pos:end="347:44">irq_inputs</name></name><operator pos:start="347:45" pos:end="347:45">)</operator><index pos:start="347:46" pos:end="347:66">[<expr pos:start="347:47" pos:end="347:65"><name pos:start="347:47" pos:end="347:65">PPC970_INPUT_HRESET</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="349:13" pos:end="352:0">break;</break>

<cpp:endif pos:start="351:1" pos:end="351:6">#<cpp:directive pos:start="351:2" pos:end="351:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="351:8" pos:end="351:34">/* defined(TARGET_PPC64) */</comment>

        <default pos:start="353:9" pos:end="353:16">default:</default>

            <expr_stmt pos:start="355:13" pos:end="355:73"><expr pos:start="355:13" pos:end="355:72"><call pos:start="355:13" pos:end="355:72"><name pos:start="355:13" pos:end="355:21">cpu_abort</name><argument_list pos:start="355:22" pos:end="355:72">(<argument pos:start="355:23" pos:end="355:25"><expr pos:start="355:23" pos:end="355:25"><name pos:start="355:23" pos:end="355:25">env</name></expr></argument>, <argument pos:start="355:28" pos:end="355:71"><expr pos:start="355:28" pos:end="355:71"><literal type="string" pos:start="355:28" pos:end="355:71">"Bus model not supported on mac99 machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="357:20"><expr pos:start="357:13" pos:end="357:19"><call pos:start="357:13" pos:end="357:19"><name pos:start="357:13" pos:end="357:16">exit</name><argument_list pos:start="357:17" pos:end="357:19">(<argument pos:start="357:18" pos:end="357:18"><expr pos:start="357:18" pos:end="357:18"><literal type="number" pos:start="357:18" pos:end="357:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <expr_stmt pos:start="363:5" pos:end="363:75"><expr pos:start="363:5" pos:end="363:74"><name pos:start="363:5" pos:end="363:7">pic</name> <operator pos:start="363:9" pos:end="363:9">=</operator> <call pos:start="363:11" pos:end="363:74"><name pos:start="363:11" pos:end="363:22">openpic_init</name><argument_list pos:start="363:23" pos:end="363:74">(<argument pos:start="363:24" pos:end="363:27"><expr pos:start="363:24" pos:end="363:27"><name pos:start="363:24" pos:end="363:27">NULL</name></expr></argument>, <argument pos:start="363:30" pos:end="363:43"><expr pos:start="363:30" pos:end="363:43"><operator pos:start="363:30" pos:end="363:30">&amp;</operator><name pos:start="363:31" pos:end="363:43">pic_mem_index</name></expr></argument>, <argument pos:start="363:46" pos:end="363:53"><expr pos:start="363:46" pos:end="363:53"><name pos:start="363:46" pos:end="363:53">smp_cpus</name></expr></argument>, <argument pos:start="363:56" pos:end="363:67"><expr pos:start="363:56" pos:end="363:67"><name pos:start="363:56" pos:end="363:67">openpic_irqs</name></expr></argument>, <argument pos:start="363:70" pos:end="363:73"><expr pos:start="363:70" pos:end="363:73"><name pos:start="363:70" pos:end="363:73">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="365:5" pos:end="365:33"><expr pos:start="365:5" pos:end="365:32"><name pos:start="365:5" pos:end="365:11">pci_bus</name> <operator pos:start="365:13" pos:end="365:13">=</operator> <call pos:start="365:15" pos:end="365:32"><name pos:start="365:15" pos:end="365:27">pci_pmac_init</name><argument_list pos:start="365:28" pos:end="365:32">(<argument pos:start="365:29" pos:end="365:31"><expr pos:start="365:29" pos:end="365:31"><name pos:start="365:29" pos:end="365:31">pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="367:5" pos:end="367:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="369:5" pos:end="373:49"><expr pos:start="369:5" pos:end="373:48"><call pos:start="369:5" pos:end="373:48"><name pos:start="369:5" pos:end="369:16">pci_vga_init</name><argument_list pos:start="369:17" pos:end="373:48">(<argument pos:start="369:18" pos:end="369:24"><expr pos:start="369:18" pos:end="369:24"><name pos:start="369:18" pos:end="369:24">pci_bus</name></expr></argument>, <argument pos:start="369:27" pos:end="369:28"><expr pos:start="369:27" pos:end="369:28"><name pos:start="369:27" pos:end="369:28">ds</name></expr></argument>, <argument pos:start="369:31" pos:end="369:54"><expr pos:start="369:31" pos:end="369:54"><name pos:start="369:31" pos:end="369:43">phys_ram_base</name> <operator pos:start="369:45" pos:end="369:45">+</operator> <name pos:start="369:47" pos:end="369:54">ram_size</name></expr></argument>,

                 <argument pos:start="371:18" pos:end="371:25"><expr pos:start="371:18" pos:end="371:25"><name pos:start="371:18" pos:end="371:25">ram_size</name></expr></argument>, <argument pos:start="371:28" pos:end="371:39"><expr pos:start="371:28" pos:end="371:39"><name pos:start="371:28" pos:end="371:39">vga_ram_size</name></expr></argument>,

                 <argument pos:start="373:18" pos:end="373:32"><expr pos:start="373:18" pos:end="373:32"><name pos:start="373:18" pos:end="373:32">vga_bios_offset</name></expr></argument>, <argument pos:start="373:35" pos:end="373:47"><expr pos:start="373:35" pos:end="373:47"><name pos:start="373:35" pos:end="373:47">vga_bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <comment type="block" pos:start="377:5" pos:end="377:28">/* XXX: suppress that */</comment>

    <expr_stmt pos:start="379:5" pos:end="379:33"><expr pos:start="379:5" pos:end="379:32"><name pos:start="379:5" pos:end="379:13">dummy_irq</name> <operator pos:start="379:15" pos:end="379:15">=</operator> <call pos:start="379:17" pos:end="379:32"><name pos:start="379:17" pos:end="379:26">i8259_init</name><argument_list pos:start="379:27" pos:end="379:32">(<argument pos:start="379:28" pos:end="379:31"><expr pos:start="379:28" pos:end="379:31"><name pos:start="379:28" pos:end="379:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="383:5" pos:end="383:34">/* XXX: use Mac Serial port */</comment>

    <expr_stmt pos:start="385:5" pos:end="385:52"><expr pos:start="385:5" pos:end="385:51"><call pos:start="385:5" pos:end="385:51"><name pos:start="385:5" pos:end="385:15">serial_init</name><argument_list pos:start="385:16" pos:end="385:51">(<argument pos:start="385:17" pos:end="385:21"><expr pos:start="385:17" pos:end="385:21"><literal type="number" pos:start="385:17" pos:end="385:21">0x3f8</literal></expr></argument>, <argument pos:start="385:24" pos:end="385:35"><expr pos:start="385:24" pos:end="385:35"><name pos:start="385:24" pos:end="385:35"><name pos:start="385:24" pos:end="385:32">dummy_irq</name><index pos:start="385:33" pos:end="385:35">[<expr pos:start="385:34" pos:end="385:34"><literal type="number" pos:start="385:34" pos:end="385:34">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="385:38" pos:end="385:50"><expr pos:start="385:38" pos:end="385:50"><name pos:start="385:38" pos:end="385:50"><name pos:start="385:38" pos:end="385:47">serial_hds</name><index pos:start="385:48" pos:end="385:50">[<expr pos:start="385:49" pos:end="385:49"><literal type="number" pos:start="385:49" pos:end="385:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="387:5" pos:end="398:0">for<control pos:start="387:8" pos:end="387:32">(<init pos:start="387:9" pos:end="387:14"><expr pos:start="387:9" pos:end="387:13"><name pos:start="387:9" pos:end="387:9">i</name> <operator pos:start="387:11" pos:end="387:11">=</operator> <literal type="number" pos:start="387:13" pos:end="387:13">0</literal></expr>;</init> <condition pos:start="387:16" pos:end="387:27"><expr pos:start="387:16" pos:end="387:26"><name pos:start="387:16" pos:end="387:16">i</name> <operator pos:start="387:18" pos:end="387:18">&lt;</operator> <name pos:start="387:20" pos:end="387:26">nb_nics</name></expr>;</condition> <incr pos:start="387:29" pos:end="387:31"><expr pos:start="387:29" pos:end="387:31"><name pos:start="387:29" pos:end="387:29">i</name><operator pos:start="387:30" pos:end="387:31">++</operator></expr></incr>)</control> <block pos:start="387:34" pos:end="398:0">{<block_content pos:start="389:9" pos:end="393:48">

        <if_stmt pos:start="389:9" pos:end="391:43"><if pos:start="389:9" pos:end="391:43">if <condition pos:start="389:12" pos:end="389:31">(<expr pos:start="389:13" pos:end="389:30"><operator pos:start="389:13" pos:end="389:13">!</operator><name pos:start="389:14" pos:end="389:24"><name pos:start="389:14" pos:end="389:21">nd_table</name><index pos:start="389:22" pos:end="389:24">[<expr pos:start="389:23" pos:end="389:23"><name pos:start="389:23" pos:end="389:23">i</name></expr>]</index></name><operator pos:start="389:25" pos:end="389:25">.</operator><name pos:start="389:26" pos:end="389:30">model</name></expr>)</condition><block type="pseudo" pos:start="391:13" pos:end="391:43"><block_content pos:start="391:13" pos:end="391:43">

            <expr_stmt pos:start="391:13" pos:end="391:43"><expr pos:start="391:13" pos:end="391:42"><name pos:start="391:13" pos:end="391:23"><name pos:start="391:13" pos:end="391:20">nd_table</name><index pos:start="391:21" pos:end="391:23">[<expr pos:start="391:22" pos:end="391:22"><name pos:start="391:22" pos:end="391:22">i</name></expr>]</index></name><operator pos:start="391:24" pos:end="391:24">.</operator><name pos:start="391:25" pos:end="391:29">model</name> <operator pos:start="391:31" pos:end="391:31">=</operator> <literal type="string" pos:start="391:33" pos:end="391:42">"ne2k_pci"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="393:9" pos:end="393:48"><expr pos:start="393:9" pos:end="393:47"><call pos:start="393:9" pos:end="393:47"><name pos:start="393:9" pos:end="393:20">pci_nic_init</name><argument_list pos:start="393:21" pos:end="393:47">(<argument pos:start="393:22" pos:end="393:28"><expr pos:start="393:22" pos:end="393:28"><name pos:start="393:22" pos:end="393:28">pci_bus</name></expr></argument>, <argument pos:start="393:31" pos:end="393:42"><expr pos:start="393:31" pos:end="393:42"><operator pos:start="393:31" pos:end="393:31">&amp;</operator><name pos:start="393:32" pos:end="393:42"><name pos:start="393:32" pos:end="393:39">nd_table</name><index pos:start="393:40" pos:end="393:42">[<expr pos:start="393:41" pos:end="393:41"><name pos:start="393:41" pos:end="393:41">i</name></expr>]</index></name></expr></argument>, <argument pos:start="393:45" pos:end="393:46"><expr pos:start="393:45" pos:end="393:46"><operator pos:start="393:45" pos:end="393:45">-</operator><literal type="number" pos:start="393:46" pos:end="393:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:if pos:start="397:1" pos:end="397:5">#<cpp:directive pos:start="397:2" pos:end="397:3">if</cpp:directive> <expr pos:start="397:5" pos:end="397:5"><literal type="number" pos:start="397:5" pos:end="397:5">1</literal></expr></cpp:if>

    <expr_stmt pos:start="399:5" pos:end="399:62"><expr pos:start="399:5" pos:end="399:61"><name pos:start="399:5" pos:end="399:20"><name pos:start="399:5" pos:end="399:17">ide_mem_index</name><index pos:start="399:18" pos:end="399:20">[<expr pos:start="399:19" pos:end="399:19"><literal type="number" pos:start="399:19" pos:end="399:19">0</literal></expr>]</index></name> <operator pos:start="399:22" pos:end="399:22">=</operator> <call pos:start="399:24" pos:end="399:61"><name pos:start="399:24" pos:end="399:36">pmac_ide_init</name><argument_list pos:start="399:37" pos:end="399:61">(<argument pos:start="399:38" pos:end="399:49"><expr pos:start="399:38" pos:end="399:49"><operator pos:start="399:38" pos:end="399:38">&amp;</operator><name pos:start="399:39" pos:end="399:49"><name pos:start="399:39" pos:end="399:46">bs_table</name><index pos:start="399:47" pos:end="399:49">[<expr pos:start="399:48" pos:end="399:48"><literal type="number" pos:start="399:48" pos:end="399:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="399:52" pos:end="399:60"><expr pos:start="399:52" pos:end="399:60"><name pos:start="399:52" pos:end="399:60"><name pos:start="399:52" pos:end="399:54">pic</name><index pos:start="399:55" pos:end="399:60">[<expr pos:start="399:56" pos:end="399:59"><literal type="number" pos:start="399:56" pos:end="399:59">0x13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="401:5" pos:end="404:0"><expr pos:start="401:5" pos:end="401:61"><name pos:start="401:5" pos:end="401:20"><name pos:start="401:5" pos:end="401:17">ide_mem_index</name><index pos:start="401:18" pos:end="401:20">[<expr pos:start="401:19" pos:end="401:19"><literal type="number" pos:start="401:19" pos:end="401:19">1</literal></expr>]</index></name> <operator pos:start="401:22" pos:end="401:22">=</operator> <call pos:start="401:24" pos:end="401:61"><name pos:start="401:24" pos:end="401:36">pmac_ide_init</name><argument_list pos:start="401:37" pos:end="401:61">(<argument pos:start="401:38" pos:end="401:49"><expr pos:start="401:38" pos:end="401:49"><operator pos:start="401:38" pos:end="401:38">&amp;</operator><name pos:start="401:39" pos:end="401:49"><name pos:start="401:39" pos:end="401:46">bs_table</name><index pos:start="401:47" pos:end="401:49">[<expr pos:start="401:48" pos:end="401:48"><literal type="number" pos:start="401:48" pos:end="401:48">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="401:52" pos:end="401:60"><expr pos:start="401:52" pos:end="401:60"><name pos:start="401:52" pos:end="401:60"><name pos:start="401:52" pos:end="401:54">pic</name><index pos:start="401:55" pos:end="401:60">[<expr pos:start="401:56" pos:end="401:59"><literal type="number" pos:start="401:56" pos:end="401:59">0x14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="403:1" pos:end="403:5">#<cpp:directive pos:start="403:2" pos:end="403:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="405:5" pos:end="408:0"><expr pos:start="405:5" pos:end="405:49"><call pos:start="405:5" pos:end="405:49"><name pos:start="405:5" pos:end="405:23">pci_cmd646_ide_init</name><argument_list pos:start="405:24" pos:end="405:49">(<argument pos:start="405:25" pos:end="405:31"><expr pos:start="405:25" pos:end="405:31"><name pos:start="405:25" pos:end="405:31">pci_bus</name></expr></argument>, <argument pos:start="405:34" pos:end="405:45"><expr pos:start="405:34" pos:end="405:45"><operator pos:start="405:34" pos:end="405:34">&amp;</operator><name pos:start="405:35" pos:end="405:45"><name pos:start="405:35" pos:end="405:42">bs_table</name><index pos:start="405:43" pos:end="405:45">[<expr pos:start="405:44" pos:end="405:44"><literal type="number" pos:start="405:44" pos:end="405:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="405:48" pos:end="405:48"><expr pos:start="405:48" pos:end="405:48"><literal type="number" pos:start="405:48" pos:end="405:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="407:1" pos:end="407:6">#<cpp:directive pos:start="407:2" pos:end="407:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="409:5" pos:end="409:34">/* cuda also initialize ADB */</comment>

    <expr_stmt pos:start="411:5" pos:end="411:42"><expr pos:start="411:5" pos:end="411:41"><call pos:start="411:5" pos:end="411:41"><name pos:start="411:5" pos:end="411:13">cuda_init</name><argument_list pos:start="411:14" pos:end="411:41">(<argument pos:start="411:15" pos:end="411:29"><expr pos:start="411:15" pos:end="411:29"><operator pos:start="411:15" pos:end="411:15">&amp;</operator><name pos:start="411:16" pos:end="411:29">cuda_mem_index</name></expr></argument>, <argument pos:start="411:32" pos:end="411:40"><expr pos:start="411:32" pos:end="411:40"><name pos:start="411:32" pos:end="411:40"><name pos:start="411:32" pos:end="411:34">pic</name><index pos:start="411:35" pos:end="411:40">[<expr pos:start="411:36" pos:end="411:39"><literal type="number" pos:start="411:36" pos:end="411:39">0x19</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

    <expr_stmt pos:start="415:5" pos:end="415:27"><expr pos:start="415:5" pos:end="415:26"><call pos:start="415:5" pos:end="415:26"><name pos:start="415:5" pos:end="415:16">adb_kbd_init</name><argument_list pos:start="415:17" pos:end="415:26">(<argument pos:start="415:18" pos:end="415:25"><expr pos:start="415:18" pos:end="415:25"><operator pos:start="415:18" pos:end="415:18">&amp;</operator><name pos:start="415:19" pos:end="415:25">adb_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="417:5" pos:end="417:29"><expr pos:start="417:5" pos:end="417:28"><call pos:start="417:5" pos:end="417:28"><name pos:start="417:5" pos:end="417:18">adb_mouse_init</name><argument_list pos:start="417:19" pos:end="417:28">(<argument pos:start="417:20" pos:end="417:27"><expr pos:start="417:20" pos:end="417:27"><operator pos:start="417:20" pos:end="417:20">&amp;</operator><name pos:start="417:21" pos:end="417:27">adb_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="421:5" pos:end="421:33"><expr pos:start="421:5" pos:end="421:32"><call pos:start="421:5" pos:end="421:32"><name pos:start="421:5" pos:end="421:14">dbdma_init</name><argument_list pos:start="421:15" pos:end="421:32">(<argument pos:start="421:16" pos:end="421:31"><expr pos:start="421:16" pos:end="421:31"><operator pos:start="421:16" pos:end="421:16">&amp;</operator><name pos:start="421:17" pos:end="421:31">dbdma_mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="425:5" pos:end="427:55"><expr pos:start="425:5" pos:end="427:54"><call pos:start="425:5" pos:end="427:54"><name pos:start="425:5" pos:end="425:14">macio_init</name><argument_list pos:start="425:15" pos:end="427:54">(<argument pos:start="425:16" pos:end="425:22"><expr pos:start="425:16" pos:end="425:22"><name pos:start="425:16" pos:end="425:22">pci_bus</name></expr></argument>, <argument pos:start="425:25" pos:end="425:30"><expr pos:start="425:25" pos:end="425:30"><literal type="number" pos:start="425:25" pos:end="425:30">0x0022</literal></expr></argument>, <argument pos:start="425:33" pos:end="425:33"><expr pos:start="425:33" pos:end="425:33"><literal type="number" pos:start="425:33" pos:end="425:33">0</literal></expr></argument>, <argument pos:start="425:36" pos:end="425:48"><expr pos:start="425:36" pos:end="425:48"><name pos:start="425:36" pos:end="425:48">pic_mem_index</name></expr></argument>, <argument pos:start="425:51" pos:end="425:65"><expr pos:start="425:51" pos:end="425:65"><name pos:start="425:51" pos:end="425:65">dbdma_mem_index</name></expr></argument>,

               <argument pos:start="427:16" pos:end="427:29"><expr pos:start="427:16" pos:end="427:29"><name pos:start="427:16" pos:end="427:29">cuda_mem_index</name></expr></argument>, <argument pos:start="427:32" pos:end="427:35"><expr pos:start="427:32" pos:end="427:35"><name pos:start="427:32" pos:end="427:35">NULL</name></expr></argument>, <argument pos:start="427:38" pos:end="427:38"><expr pos:start="427:38" pos:end="427:38"><literal type="number" pos:start="427:38" pos:end="427:38">2</literal></expr></argument>, <argument pos:start="427:41" pos:end="427:53"><expr pos:start="427:41" pos:end="427:53"><name pos:start="427:41" pos:end="427:53">ide_mem_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="431:5" pos:end="435:5"><if pos:start="431:5" pos:end="435:5">if <condition pos:start="431:8" pos:end="431:20">(<expr pos:start="431:9" pos:end="431:19"><name pos:start="431:9" pos:end="431:19">usb_enabled</name></expr>)</condition> <block pos:start="431:22" pos:end="435:5">{<block_content pos:start="433:9" pos:end="433:42">

        <expr_stmt pos:start="433:9" pos:end="433:42"><expr pos:start="433:9" pos:end="433:41"><call pos:start="433:9" pos:end="433:41"><name pos:start="433:9" pos:end="433:25">usb_ohci_init_pci</name><argument_list pos:start="433:26" pos:end="433:41">(<argument pos:start="433:27" pos:end="433:33"><expr pos:start="433:27" pos:end="433:33"><name pos:start="433:27" pos:end="433:33">pci_bus</name></expr></argument>, <argument pos:start="433:36" pos:end="433:36"><expr pos:start="433:36" pos:end="433:36"><literal type="number" pos:start="433:36" pos:end="433:36">3</literal></expr></argument>, <argument pos:start="433:39" pos:end="433:40"><expr pos:start="433:39" pos:end="433:40"><operator pos:start="433:39" pos:end="433:39">-</operator><literal type="number" pos:start="433:40" pos:end="433:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="439:5" pos:end="460:0"><if pos:start="439:5" pos:end="460:0">if <condition pos:start="439:8" pos:end="439:73">(<expr pos:start="439:9" pos:end="439:72"><name pos:start="439:9" pos:end="439:21">graphic_depth</name> <operator pos:start="439:23" pos:end="439:24">!=</operator> <literal type="number" pos:start="439:26" pos:end="439:27">15</literal> <operator pos:start="439:29" pos:end="439:30">&amp;&amp;</operator> <name pos:start="439:32" pos:end="439:44">graphic_depth</name> <operator pos:start="439:46" pos:end="439:47">!=</operator> <literal type="number" pos:start="439:49" pos:end="439:50">32</literal> <operator pos:start="439:52" pos:end="439:53">&amp;&amp;</operator> <name pos:start="439:55" pos:end="439:67">graphic_depth</name> <operator pos:start="439:69" pos:end="439:70">!=</operator> <literal type="number" pos:start="439:72" pos:end="439:72">8</literal></expr>)</condition><block type="pseudo" pos:start="441:9" pos:end="460:0"><block_content pos:start="441:9" pos:end="460:0">

        <expr_stmt pos:start="441:9" pos:end="460:0"><expr pos:start="441:9" pos:end="441:26"><name pos:start="441:9" pos:end="441:21">graphic_depth</name> <operator pos:start="441:23" pos:end="441:23">=</operator> <literal type="number" pos:start="441:25" pos:end="441:26">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="443:1" pos:end="443:5">#<cpp:directive pos:start="443:2" pos:end="443:3">if</cpp:directive> <expr pos:start="443:5" pos:end="443:5"><literal type="number" pos:start="443:5" pos:end="443:5">0</literal></expr></cpp:if> <comment type="block" pos:start="443:7" pos:end="443:67">/* XXX: this is ugly but needed for now, or OHW won't boot */</comment>

    <comment type="block" pos:start="445:5" pos:end="445:63">/* The NewWorld NVRAM is not located in the MacIO device */</comment>

    nvr = macio_nvram_init(&amp;nvram_mem_index, 0x2000);

    pmac_format_nvram_partition(nvr, 0x2000);

    macio_nvram_map(nvr, 0xFFF04000);

    nvram.opaque = nvr;

    nvram.read_fn = &amp;macio_nvram_read;

    nvram.write_fn = &amp;macio_nvram_write;

<cpp:else pos:start="459:1" pos:end="459:5">#<cpp:directive pos:start="459:2" pos:end="459:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="461:5" pos:end="461:75"><expr pos:start="461:5" pos:end="461:74"><name pos:start="461:5" pos:end="461:10">m48t59</name> <operator pos:start="461:12" pos:end="461:12">=</operator> <call pos:start="461:14" pos:end="461:74"><name pos:start="461:14" pos:end="461:24">m48t59_init</name><argument_list pos:start="461:25" pos:end="461:74">(<argument pos:start="461:26" pos:end="461:37"><expr pos:start="461:26" pos:end="461:37"><name pos:start="461:26" pos:end="461:37"><name pos:start="461:26" pos:end="461:34">dummy_irq</name><index pos:start="461:35" pos:end="461:37">[<expr pos:start="461:36" pos:end="461:36"><literal type="number" pos:start="461:36" pos:end="461:36">8</literal></expr>]</index></name></expr></argument>, <argument pos:start="461:40" pos:end="461:49"><expr pos:start="461:40" pos:end="461:49"><literal type="number" pos:start="461:40" pos:end="461:49">0xFFF04000</literal></expr></argument>, <argument pos:start="461:52" pos:end="461:57"><expr pos:start="461:52" pos:end="461:57"><literal type="number" pos:start="461:52" pos:end="461:57">0x0074</literal></expr></argument>, <argument pos:start="461:60" pos:end="461:69"><expr pos:start="461:60" pos:end="461:69"><name pos:start="461:60" pos:end="461:69">NVRAM_SIZE</name></expr></argument>, <argument pos:start="461:72" pos:end="461:73"><expr pos:start="461:72" pos:end="461:73"><literal type="number" pos:start="461:72" pos:end="461:73">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="463:5" pos:end="463:26"><expr pos:start="463:5" pos:end="463:25"><name pos:start="463:5" pos:end="463:16"><name pos:start="463:5" pos:end="463:9">nvram</name><operator pos:start="463:10" pos:end="463:10">.</operator><name pos:start="463:11" pos:end="463:16">opaque</name></name> <operator pos:start="463:18" pos:end="463:18">=</operator> <name pos:start="463:20" pos:end="463:25">m48t59</name></expr>;</expr_stmt>

    <expr_stmt pos:start="465:5" pos:end="465:33"><expr pos:start="465:5" pos:end="465:32"><name pos:start="465:5" pos:end="465:17"><name pos:start="465:5" pos:end="465:9">nvram</name><operator pos:start="465:10" pos:end="465:10">.</operator><name pos:start="465:11" pos:end="465:17">read_fn</name></name> <operator pos:start="465:19" pos:end="465:19">=</operator> <operator pos:start="465:21" pos:end="465:21">&amp;</operator><name pos:start="465:22" pos:end="465:32">m48t59_read</name></expr>;</expr_stmt>

    <expr_stmt pos:start="467:5" pos:end="470:0"><expr pos:start="467:5" pos:end="467:34"><name pos:start="467:5" pos:end="467:18"><name pos:start="467:5" pos:end="467:9">nvram</name><operator pos:start="467:10" pos:end="467:10">.</operator><name pos:start="467:11" pos:end="467:18">write_fn</name></name> <operator pos:start="467:20" pos:end="467:20">=</operator> <operator pos:start="467:22" pos:end="467:22">&amp;</operator><name pos:start="467:23" pos:end="467:34">m48t59_write</name></expr>;</expr_stmt>

<cpp:endif pos:start="469:1" pos:end="469:6">#<cpp:directive pos:start="469:2" pos:end="469:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="471:5" pos:end="483:71"><expr pos:start="471:5" pos:end="483:70"><call pos:start="471:5" pos:end="483:70"><name pos:start="471:5" pos:end="471:24">PPC_NVRAM_set_params</name><argument_list pos:start="471:25" pos:end="483:70">(<argument pos:start="471:26" pos:end="471:31"><expr pos:start="471:26" pos:end="471:31"><operator pos:start="471:26" pos:end="471:26">&amp;</operator><name pos:start="471:27" pos:end="471:31">nvram</name></expr></argument>, <argument pos:start="471:34" pos:end="471:43"><expr pos:start="471:34" pos:end="471:43"><name pos:start="471:34" pos:end="471:43">NVRAM_SIZE</name></expr></argument>, <argument pos:start="471:46" pos:end="471:52"><expr pos:start="471:46" pos:end="471:52"><literal type="string" pos:start="471:46" pos:end="471:52">"MAC99"</literal></expr></argument>, <argument pos:start="471:55" pos:end="471:62"><expr pos:start="471:55" pos:end="471:62"><name pos:start="471:55" pos:end="471:62">ram_size</name></expr></argument>,

                         <argument pos:start="473:26" pos:end="473:40"><expr pos:start="473:26" pos:end="473:40"><name pos:start="473:26" pos:end="473:40">ppc_boot_device</name></expr></argument>, <argument pos:start="473:43" pos:end="473:53"><expr pos:start="473:43" pos:end="473:53"><name pos:start="473:43" pos:end="473:53">kernel_base</name></expr></argument>, <argument pos:start="473:56" pos:end="473:66"><expr pos:start="473:56" pos:end="473:66"><name pos:start="473:56" pos:end="473:66">kernel_size</name></expr></argument>,

                         <argument pos:start="475:26" pos:end="475:39"><expr pos:start="475:26" pos:end="475:39"><name pos:start="475:26" pos:end="475:39">kernel_cmdline</name></expr></argument>,

                         <argument pos:start="477:26" pos:end="477:36"><expr pos:start="477:26" pos:end="477:36"><name pos:start="477:26" pos:end="477:36">initrd_base</name></expr></argument>, <argument pos:start="477:39" pos:end="477:49"><expr pos:start="477:39" pos:end="477:49"><name pos:start="477:39" pos:end="477:49">initrd_size</name></expr></argument>,

                         <comment type="block" pos:start="479:26" pos:end="479:72">/* XXX: need an option to load a NVRAM image */</comment>

                         <argument pos:start="481:26" pos:end="481:26"><expr pos:start="481:26" pos:end="481:26"><literal type="number" pos:start="481:26" pos:end="481:26">0</literal></expr></argument>,

                         <argument pos:start="483:26" pos:end="483:38"><expr pos:start="483:26" pos:end="483:38"><name pos:start="483:26" pos:end="483:38">graphic_width</name></expr></argument>, <argument pos:start="483:41" pos:end="483:54"><expr pos:start="483:41" pos:end="483:54"><name pos:start="483:41" pos:end="483:54">graphic_height</name></expr></argument>, <argument pos:start="483:57" pos:end="483:69"><expr pos:start="483:57" pos:end="483:69"><name pos:start="483:57" pos:end="483:69">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="485:5" pos:end="485:42">/* No PCI init: the BIOS will do it */</comment>



    <comment type="block" pos:start="489:5" pos:end="489:63">/* Special port to get debug messages from Open-Firmware */</comment>

    <expr_stmt pos:start="491:5" pos:end="491:64"><expr pos:start="491:5" pos:end="491:63"><call pos:start="491:5" pos:end="491:63"><name pos:start="491:5" pos:end="491:25">register_ioport_write</name><argument_list pos:start="491:26" pos:end="491:63">(<argument pos:start="491:27" pos:end="491:32"><expr pos:start="491:27" pos:end="491:32"><literal type="number" pos:start="491:27" pos:end="491:32">0x0F00</literal></expr></argument>, <argument pos:start="491:35" pos:end="491:35"><expr pos:start="491:35" pos:end="491:35"><literal type="number" pos:start="491:35" pos:end="491:35">4</literal></expr></argument>, <argument pos:start="491:38" pos:end="491:38"><expr pos:start="491:38" pos:end="491:38"><literal type="number" pos:start="491:38" pos:end="491:38">1</literal></expr></argument>, <argument pos:start="491:41" pos:end="491:56"><expr pos:start="491:41" pos:end="491:56"><operator pos:start="491:41" pos:end="491:41">&amp;</operator><name pos:start="491:42" pos:end="491:56">PPC_debug_write</name></expr></argument>, <argument pos:start="491:59" pos:end="491:62"><expr pos:start="491:59" pos:end="491:62"><name pos:start="491:59" pos:end="491:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 </block_content>}</block></function>
</unit>
