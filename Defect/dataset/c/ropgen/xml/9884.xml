<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9884.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">io_write</name><parameter_list pos:start="1:21" pos:end="1:65">(<parameter pos:start="1:22" pos:end="1:36"><decl pos:start="1:22" pos:end="1:36"><type pos:start="1:22" pos:end="1:36"><name pos:start="1:22" pos:end="1:32">IPackDevice</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:36">ip</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:45">uint8_t</name></type> <name pos:start="1:47" pos:end="1:50">addr</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:60">uint16_t</name></type> <name pos:start="1:62" pos:end="1:64">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="143:1">{<block_content pos:start="5:5" pos:end="141:5">

    <decl_stmt pos:start="5:5" pos:end="5:36"><decl pos:start="5:5" pos:end="5:35"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">IPOctalState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">dev</name> <init pos:start="5:23" pos:end="5:35">= <expr pos:start="5:25" pos:end="5:35"><call pos:start="5:25" pos:end="5:35"><name pos:start="5:25" pos:end="5:31">IPOCTAL</name><argument_list pos:start="5:32" pos:end="5:35">(<argument pos:start="5:33" pos:end="5:34"><expr pos:start="5:33" pos:end="5:34"><name pos:start="5:33" pos:end="5:34">ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">unsigned</name></type> <name pos:start="7:14" pos:end="7:16">reg</name> <init pos:start="7:18" pos:end="7:29">= <expr pos:start="7:20" pos:end="7:29"><name pos:start="7:20" pos:end="7:22">val</name> <operator pos:start="7:24" pos:end="7:24">&amp;</operator> <literal type="number" pos:start="7:26" pos:end="7:29">0xFF</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="9:5" pos:end="13:29">/* addr[7:6]: block   (A-D)

       addr[7:5]: channel (a-h)

       addr[5:0]: register */</comment>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:30"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">unsigned</name></type> <name pos:start="15:14" pos:end="15:18">block</name> <init pos:start="15:20" pos:end="15:30">= <expr pos:start="15:22" pos:end="15:30"><name pos:start="15:22" pos:end="15:25">addr</name> <operator pos:start="15:27" pos:end="15:28">&gt;&gt;</operator> <literal type="number" pos:start="15:30" pos:end="15:30">5</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">unsigned</name></type> <name pos:start="17:14" pos:end="17:20">channel</name> <init pos:start="17:22" pos:end="17:32">= <expr pos:start="17:24" pos:end="17:32"><name pos:start="17:24" pos:end="17:27">addr</name> <operator pos:start="17:29" pos:end="17:30">&gt;&gt;</operator> <literal type="number" pos:start="17:32" pos:end="17:32">4</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:65">/* Big endian, accessed using 8-bit bytes at odd locations */</comment>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:39"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">unsigned</name></type> <name pos:start="21:14" pos:end="21:19">offset</name> <init pos:start="21:21" pos:end="21:39">= <expr pos:start="21:23" pos:end="21:39"><operator pos:start="21:23" pos:end="21:23">(</operator><name pos:start="21:24" pos:end="21:27">addr</name> <operator pos:start="21:29" pos:end="21:29">&amp;</operator> <literal type="number" pos:start="21:31" pos:end="21:34">0x1F</literal><operator pos:start="21:35" pos:end="21:35">)</operator> <operator pos:start="21:37" pos:end="21:37">^</operator> <literal type="number" pos:start="21:39" pos:end="21:39">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:43"><decl pos:start="23:5" pos:end="23:42"><type pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:18">SCC2698Channel</name> <modifier pos:start="23:20" pos:end="23:20">*</modifier></type><name pos:start="23:21" pos:end="23:22">ch</name> <init pos:start="23:24" pos:end="23:42">= <expr pos:start="23:26" pos:end="23:42"><operator pos:start="23:26" pos:end="23:26">&amp;</operator><name pos:start="23:27" pos:end="23:42"><name pos:start="23:27" pos:end="23:29">dev</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:33">ch</name><index pos:start="23:34" pos:end="23:42">[<expr pos:start="23:35" pos:end="23:41"><name pos:start="23:35" pos:end="23:41">channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:41"><decl pos:start="25:5" pos:end="25:40"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">SCC2698Block</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:21">blk</name> <init pos:start="25:23" pos:end="25:40">= <expr pos:start="25:25" pos:end="25:40"><operator pos:start="25:25" pos:end="25:25">&amp;</operator><name pos:start="25:26" pos:end="25:40"><name pos:start="25:26" pos:end="25:28">dev</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:33">blk</name><index pos:start="25:34" pos:end="25:40">[<expr pos:start="25:35" pos:end="25:39"><name pos:start="25:35" pos:end="25:39">block</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:31"><decl pos:start="27:5" pos:end="27:30"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">uint8_t</name></type> <name pos:start="27:13" pos:end="27:19">old_isr</name> <init pos:start="27:21" pos:end="27:30">= <expr pos:start="27:23" pos:end="27:30"><name pos:start="27:23" pos:end="27:30"><name pos:start="27:23" pos:end="27:25">blk</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:30">isr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:31"><decl pos:start="29:5" pos:end="29:30"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:11">uint8_t</name></type> <name pos:start="29:13" pos:end="29:19">old_imr</name> <init pos:start="29:21" pos:end="29:30">= <expr pos:start="29:23" pos:end="29:30"><name pos:start="29:23" pos:end="29:30"><name pos:start="29:23" pos:end="29:25">blk</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:30">imr</name></name></expr></init></decl>;</decl_stmt>



    <switch pos:start="33:5" pos:end="133:5">switch <condition pos:start="33:12" pos:end="33:19">(<expr pos:start="33:13" pos:end="33:18"><name pos:start="33:13" pos:end="33:18">offset</name></expr>)</condition> <block pos:start="33:21" pos:end="133:5">{<block_content pos:start="37:5" pos:end="131:79">



    <case pos:start="37:5" pos:end="37:17">case <expr pos:start="37:10" pos:end="37:16"><name pos:start="37:10" pos:end="37:16">REG_MRa</name></expr>:</case>

    <case pos:start="39:5" pos:end="39:17">case <expr pos:start="39:10" pos:end="39:16"><name pos:start="39:10" pos:end="39:16">REG_MRb</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:33"><expr pos:start="41:9" pos:end="41:32"><name pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:10">ch</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:14">mr</name><index pos:start="41:15" pos:end="41:26">[<expr pos:start="41:16" pos:end="41:25"><name pos:start="41:16" pos:end="41:25"><name pos:start="41:16" pos:end="41:17">ch</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:25">mr_idx</name></name></expr>]</index></name> <operator pos:start="41:28" pos:end="41:28">=</operator> <name pos:start="41:30" pos:end="41:32">reg</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:75"><expr pos:start="43:9" pos:end="43:74"><call pos:start="43:9" pos:end="43:74"><name pos:start="43:9" pos:end="43:15">DPRINTF</name><argument_list pos:start="43:16" pos:end="43:74">(<argument pos:start="43:17" pos:end="43:37"><expr pos:start="43:17" pos:end="43:37"><literal type="string" pos:start="43:17" pos:end="43:37">"Write MR%u%c 0x%x\n"</literal></expr></argument>, <argument pos:start="43:40" pos:end="43:53"><expr pos:start="43:40" pos:end="43:53"><name pos:start="43:40" pos:end="43:49"><name pos:start="43:40" pos:end="43:41">ch</name><operator pos:start="43:42" pos:end="43:43">-&gt;</operator><name pos:start="43:44" pos:end="43:49">mr_idx</name></name> <operator pos:start="43:51" pos:end="43:51">+</operator> <literal type="number" pos:start="43:53" pos:end="43:53">1</literal></expr></argument>, <argument pos:start="43:56" pos:end="43:68"><expr pos:start="43:56" pos:end="43:68"><name pos:start="43:56" pos:end="43:62">channel</name> <operator pos:start="43:64" pos:end="43:64">+</operator> <literal type="char" pos:start="43:66" pos:end="43:68">'a'</literal></expr></argument>, <argument pos:start="43:71" pos:end="43:73"><expr pos:start="43:71" pos:end="43:73"><name pos:start="43:71" pos:end="43:73">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:23"><expr pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:10">ch</name><operator pos:start="45:11" pos:end="45:12">-&gt;</operator><name pos:start="45:13" pos:end="45:18">mr_idx</name></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <literal type="number" pos:start="45:22" pos:end="45:22">1</literal></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>



    <comment type="block" pos:start="51:5" pos:end="51:25">/* Not implemented */</comment>

    <case pos:start="53:5" pos:end="53:18">case <expr pos:start="53:10" pos:end="53:17"><name pos:start="53:10" pos:end="53:17">REG_CSRa</name></expr>:</case>

    <case pos:start="55:5" pos:end="55:18">case <expr pos:start="55:10" pos:end="55:17"><name pos:start="55:10" pos:end="55:17">REG_CSRb</name></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="57:59"><expr pos:start="57:9" pos:end="57:58"><call pos:start="57:9" pos:end="57:58"><name pos:start="57:9" pos:end="57:15">DPRINTF</name><argument_list pos:start="57:16" pos:end="57:58">(<argument pos:start="57:17" pos:end="57:37"><expr pos:start="57:17" pos:end="57:37"><literal type="string" pos:start="57:17" pos:end="57:37">"Write CSR%c: 0x%x\n"</literal></expr></argument>, <argument pos:start="57:40" pos:end="57:52"><expr pos:start="57:40" pos:end="57:52"><name pos:start="57:40" pos:end="57:46">channel</name> <operator pos:start="57:48" pos:end="57:48">+</operator> <literal type="char" pos:start="57:50" pos:end="57:52">'a'</literal></expr></argument>, <argument pos:start="57:55" pos:end="57:57"><expr pos:start="57:55" pos:end="57:57"><name pos:start="57:55" pos:end="57:57">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>



    <case pos:start="63:5" pos:end="63:17">case <expr pos:start="63:10" pos:end="63:16"><name pos:start="63:10" pos:end="63:16">REG_CRa</name></expr>:</case>

    <case pos:start="65:5" pos:end="65:17">case <expr pos:start="65:10" pos:end="65:16"><name pos:start="65:10" pos:end="65:16">REG_CRb</name></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:36"><expr pos:start="67:9" pos:end="67:35"><call pos:start="67:9" pos:end="67:35"><name pos:start="67:9" pos:end="67:16">write_cr</name><argument_list pos:start="67:17" pos:end="67:35">(<argument pos:start="67:18" pos:end="67:20"><expr pos:start="67:18" pos:end="67:20"><name pos:start="67:18" pos:end="67:20">dev</name></expr></argument>, <argument pos:start="67:23" pos:end="67:29"><expr pos:start="67:23" pos:end="67:29"><name pos:start="67:23" pos:end="67:29">channel</name></expr></argument>, <argument pos:start="67:32" pos:end="67:34"><expr pos:start="67:32" pos:end="67:34"><name pos:start="67:32" pos:end="67:34">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>



    <case pos:start="73:5" pos:end="73:18">case <expr pos:start="73:10" pos:end="73:17"><name pos:start="73:10" pos:end="73:17">REG_THRa</name></expr>:</case>

    <case pos:start="75:5" pos:end="75:18">case <expr pos:start="75:10" pos:end="75:17"><name pos:start="75:10" pos:end="75:17">REG_THRb</name></expr>:</case>

        <if_stmt pos:start="77:9" pos:end="93:9"><if pos:start="77:9" pos:end="89:9">if <condition pos:start="77:12" pos:end="77:30">(<expr pos:start="77:13" pos:end="77:29"><name pos:start="77:13" pos:end="77:18"><name pos:start="77:13" pos:end="77:14">ch</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:18">sr</name></name> <operator pos:start="77:20" pos:end="77:20">&amp;</operator> <name pos:start="77:22" pos:end="77:29">SR_TXRDY</name></expr>)</condition> <block pos:start="77:32" pos:end="89:9">{<block_content pos:start="79:13" pos:end="87:13">

            <expr_stmt pos:start="79:13" pos:end="79:64"><expr pos:start="79:13" pos:end="79:63"><call pos:start="79:13" pos:end="79:63"><name pos:start="79:13" pos:end="79:19">DPRINTF</name><argument_list pos:start="79:20" pos:end="79:63">(<argument pos:start="79:21" pos:end="79:42"><expr pos:start="79:21" pos:end="79:42"><literal type="string" pos:start="79:21" pos:end="79:42">"Write THR%c (0x%x)\n"</literal></expr></argument>, <argument pos:start="79:45" pos:end="79:57"><expr pos:start="79:45" pos:end="79:57"><name pos:start="79:45" pos:end="79:51">channel</name> <operator pos:start="79:53" pos:end="79:53">+</operator> <literal type="char" pos:start="79:55" pos:end="79:57">'a'</literal></expr></argument>, <argument pos:start="79:60" pos:end="79:62"><expr pos:start="79:60" pos:end="79:62"><name pos:start="79:60" pos:end="79:62">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="81:13" pos:end="87:13"><if pos:start="81:13" pos:end="87:13">if <condition pos:start="81:16" pos:end="81:24">(<expr pos:start="81:17" pos:end="81:23"><name pos:start="81:17" pos:end="81:23"><name pos:start="81:17" pos:end="81:18">ch</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:23">dev</name></name></expr>)</condition> <block pos:start="81:26" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:52">

                <decl_stmt pos:start="83:17" pos:end="83:34"><decl pos:start="83:17" pos:end="83:33"><type pos:start="83:17" pos:end="83:23"><name pos:start="83:17" pos:end="83:23">uint8_t</name></type> <name pos:start="83:25" pos:end="83:27">thr</name> <init pos:start="83:29" pos:end="83:33">= <expr pos:start="83:31" pos:end="83:33"><name pos:start="83:31" pos:end="83:33">reg</name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:52"><expr pos:start="85:17" pos:end="85:51"><call pos:start="85:17" pos:end="85:51"><name pos:start="85:17" pos:end="85:33">qemu_chr_fe_write</name><argument_list pos:start="85:34" pos:end="85:51">(<argument pos:start="85:35" pos:end="85:41"><expr pos:start="85:35" pos:end="85:41"><name pos:start="85:35" pos:end="85:41"><name pos:start="85:35" pos:end="85:36">ch</name><operator pos:start="85:37" pos:end="85:38">-&gt;</operator><name pos:start="85:39" pos:end="85:41">dev</name></name></expr></argument>, <argument pos:start="85:44" pos:end="85:47"><expr pos:start="85:44" pos:end="85:47"><operator pos:start="85:44" pos:end="85:44">&amp;</operator><name pos:start="85:45" pos:end="85:47">thr</name></expr></argument>, <argument pos:start="85:50" pos:end="85:50"><expr pos:start="85:50" pos:end="85:50"><literal type="number" pos:start="85:50" pos:end="85:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="89:11" pos:end="93:9">else <block pos:start="89:16" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:77">

            <expr_stmt pos:start="91:13" pos:end="91:77"><expr pos:start="91:13" pos:end="91:76"><call pos:start="91:13" pos:end="91:76"><name pos:start="91:13" pos:end="91:19">DPRINTF</name><argument_list pos:start="91:20" pos:end="91:76">(<argument pos:start="91:21" pos:end="91:55"><expr pos:start="91:21" pos:end="91:55"><literal type="string" pos:start="91:21" pos:end="91:55">"Write THR%c (0x%x), Tx disabled\n"</literal></expr></argument>, <argument pos:start="91:58" pos:end="91:70"><expr pos:start="91:58" pos:end="91:70"><name pos:start="91:58" pos:end="91:64">channel</name> <operator pos:start="91:66" pos:end="91:66">+</operator> <literal type="char" pos:start="91:68" pos:end="91:70">'a'</literal></expr></argument>, <argument pos:start="91:73" pos:end="91:75"><expr pos:start="91:73" pos:end="91:75"><name pos:start="91:73" pos:end="91:75">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="95:9" pos:end="95:14">break;</break>



    <comment type="block" pos:start="99:5" pos:end="99:25">/* Not implemented */</comment>

    <case pos:start="101:5" pos:end="101:17">case <expr pos:start="101:10" pos:end="101:16"><name pos:start="101:10" pos:end="101:16">REG_ACR</name></expr>:</case>

        <expr_stmt pos:start="103:9" pos:end="103:56"><expr pos:start="103:9" pos:end="103:55"><call pos:start="103:9" pos:end="103:55"><name pos:start="103:9" pos:end="103:15">DPRINTF</name><argument_list pos:start="103:16" pos:end="103:55">(<argument pos:start="103:17" pos:end="103:36"><expr pos:start="103:17" pos:end="103:36"><literal type="string" pos:start="103:17" pos:end="103:36">"Write ACR%c 0x%x\n"</literal></expr></argument>, <argument pos:start="103:39" pos:end="103:49"><expr pos:start="103:39" pos:end="103:49"><name pos:start="103:39" pos:end="103:43">block</name> <operator pos:start="103:45" pos:end="103:45">+</operator> <literal type="char" pos:start="103:47" pos:end="103:49">'A'</literal></expr></argument>, <argument pos:start="103:52" pos:end="103:54"><expr pos:start="103:52" pos:end="103:54"><name pos:start="103:52" pos:end="103:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="105:9" pos:end="105:14">break;</break>



    <case pos:start="109:5" pos:end="109:17">case <expr pos:start="109:10" pos:end="109:16"><name pos:start="109:10" pos:end="109:16">REG_IMR</name></expr>:</case>

        <expr_stmt pos:start="111:9" pos:end="111:56"><expr pos:start="111:9" pos:end="111:55"><call pos:start="111:9" pos:end="111:55"><name pos:start="111:9" pos:end="111:15">DPRINTF</name><argument_list pos:start="111:16" pos:end="111:55">(<argument pos:start="111:17" pos:end="111:36"><expr pos:start="111:17" pos:end="111:36"><literal type="string" pos:start="111:17" pos:end="111:36">"Write IMR%c 0x%x\n"</literal></expr></argument>, <argument pos:start="111:39" pos:end="111:49"><expr pos:start="111:39" pos:end="111:49"><name pos:start="111:39" pos:end="111:43">block</name> <operator pos:start="111:45" pos:end="111:45">+</operator> <literal type="char" pos:start="111:47" pos:end="111:49">'A'</literal></expr></argument>, <argument pos:start="111:52" pos:end="111:54"><expr pos:start="111:52" pos:end="111:54"><name pos:start="111:52" pos:end="111:54">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:23"><expr pos:start="113:9" pos:end="113:22"><name pos:start="113:9" pos:end="113:16"><name pos:start="113:9" pos:end="113:11">blk</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:16">imr</name></name> <operator pos:start="113:18" pos:end="113:18">=</operator> <name pos:start="113:20" pos:end="113:22">reg</name></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>



    <comment type="block" pos:start="119:5" pos:end="119:25">/* Not implemented */</comment>

    <case pos:start="121:5" pos:end="121:18">case <expr pos:start="121:10" pos:end="121:17"><name pos:start="121:10" pos:end="121:17">REG_OPCR</name></expr>:</case>

        <expr_stmt pos:start="123:9" pos:end="123:57"><expr pos:start="123:9" pos:end="123:56"><call pos:start="123:9" pos:end="123:56"><name pos:start="123:9" pos:end="123:15">DPRINTF</name><argument_list pos:start="123:16" pos:end="123:56">(<argument pos:start="123:17" pos:end="123:37"><expr pos:start="123:17" pos:end="123:37"><literal type="string" pos:start="123:17" pos:end="123:37">"Write OPCR%c 0x%x\n"</literal></expr></argument>, <argument pos:start="123:40" pos:end="123:50"><expr pos:start="123:40" pos:end="123:50"><name pos:start="123:40" pos:end="123:44">block</name> <operator pos:start="123:46" pos:end="123:46">+</operator> <literal type="char" pos:start="123:48" pos:end="123:50">'A'</literal></expr></argument>, <argument pos:start="123:53" pos:end="123:55"><expr pos:start="123:53" pos:end="123:55"><name pos:start="123:53" pos:end="123:55">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="125:9" pos:end="125:14">break;</break>



    <default pos:start="129:5" pos:end="129:12">default:</default>

        <expr_stmt pos:start="131:9" pos:end="131:79"><expr pos:start="131:9" pos:end="131:78"><call pos:start="131:9" pos:end="131:78"><name pos:start="131:9" pos:end="131:15">DPRINTF</name><argument_list pos:start="131:16" pos:end="131:78">(<argument pos:start="131:17" pos:end="131:64"><expr pos:start="131:17" pos:end="131:64"><literal type="string" pos:start="131:17" pos:end="131:64">"Write unknown/unsupported register 0x%02x %u\n"</literal></expr></argument>, <argument pos:start="131:67" pos:end="131:72"><expr pos:start="131:67" pos:end="131:72"><name pos:start="131:67" pos:end="131:72">offset</name></expr></argument>, <argument pos:start="131:75" pos:end="131:77"><expr pos:start="131:75" pos:end="131:77"><name pos:start="131:75" pos:end="131:77">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <if_stmt pos:start="137:5" pos:end="141:5"><if pos:start="137:5" pos:end="141:5">if <condition pos:start="137:8" pos:end="137:51">(<expr pos:start="137:9" pos:end="137:50"><name pos:start="137:9" pos:end="137:15">old_isr</name> <operator pos:start="137:17" pos:end="137:18">!=</operator> <name pos:start="137:20" pos:end="137:27"><name pos:start="137:20" pos:end="137:22">blk</name><operator pos:start="137:23" pos:end="137:24">-&gt;</operator><name pos:start="137:25" pos:end="137:27">isr</name></name> <operator pos:start="137:29" pos:end="137:30">||</operator> <name pos:start="137:32" pos:end="137:38">old_imr</name> <operator pos:start="137:40" pos:end="137:41">!=</operator> <name pos:start="137:43" pos:end="137:50"><name pos:start="137:43" pos:end="137:45">blk</name><operator pos:start="137:46" pos:end="137:47">-&gt;</operator><name pos:start="137:48" pos:end="137:50">imr</name></name></expr>)</condition> <block pos:start="137:53" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:31">

        <expr_stmt pos:start="139:9" pos:end="139:31"><expr pos:start="139:9" pos:end="139:30"><call pos:start="139:9" pos:end="139:30"><name pos:start="139:9" pos:end="139:18">update_irq</name><argument_list pos:start="139:19" pos:end="139:30">(<argument pos:start="139:20" pos:end="139:22"><expr pos:start="139:20" pos:end="139:22"><name pos:start="139:20" pos:end="139:22">dev</name></expr></argument>, <argument pos:start="139:25" pos:end="139:29"><expr pos:start="139:25" pos:end="139:29"><name pos:start="139:25" pos:end="139:29">block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
