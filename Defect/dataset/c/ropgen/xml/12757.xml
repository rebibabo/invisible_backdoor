<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12757.c" pos:tabs="8"><function pos:start="1:1" pos:end="307:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">xhci_kick_ep</name><parameter_list pos:start="1:25" pos:end="3:66">(<parameter pos:start="1:26" pos:end="1:40"><decl pos:start="1:26" pos:end="1:40"><type pos:start="1:26" pos:end="1:40"><name pos:start="1:26" pos:end="1:34">XHCIState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:40">xhci</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:61"><decl pos:start="1:43" pos:end="1:61"><type pos:start="1:43" pos:end="1:61"><name pos:start="1:43" pos:end="1:50">unsigned</name> <name pos:start="1:52" pos:end="1:54">int</name></type> <name pos:start="1:56" pos:end="1:61">slotid</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:42"><decl pos:start="3:26" pos:end="3:42"><type pos:start="3:26" pos:end="3:42"><name pos:start="3:26" pos:end="3:33">unsigned</name> <name pos:start="3:35" pos:end="3:37">int</name></type> <name pos:start="3:39" pos:end="3:42">epid</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:65"><decl pos:start="3:45" pos:end="3:65"><type pos:start="3:45" pos:end="3:65"><name pos:start="3:45" pos:end="3:52">unsigned</name> <name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:65">streamid</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="307:1">{<block_content pos:start="7:5" pos:end="305:5">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">XHCIStreamContext</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">stctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">XHCIEPContext</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:24">epctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">XHCIRing</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:18">ring</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">USBEndpoint</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:19">ep</name> <init pos:start="13:21" pos:end="13:26">= <expr pos:start="13:23" pos:end="13:26"><name pos:start="13:23" pos:end="13:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:20">mfindex</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:14">length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:51"><expr pos:start="23:5" pos:end="23:50"><call pos:start="23:5" pos:end="23:50"><name pos:start="23:5" pos:end="23:26">trace_usb_xhci_ep_kick</name><argument_list pos:start="23:27" pos:end="23:50">(<argument pos:start="23:28" pos:end="23:33"><expr pos:start="23:28" pos:end="23:33"><name pos:start="23:28" pos:end="23:33">slotid</name></expr></argument>, <argument pos:start="23:36" pos:end="23:39"><expr pos:start="23:36" pos:end="23:39"><name pos:start="23:36" pos:end="23:39">epid</name></expr></argument>, <argument pos:start="23:42" pos:end="23:49"><expr pos:start="23:42" pos:end="23:49"><name pos:start="23:42" pos:end="23:49">streamid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:52"><expr pos:start="25:5" pos:end="25:51"><call pos:start="25:5" pos:end="25:51"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:51">(<argument pos:start="25:12" pos:end="25:50"><expr pos:start="25:12" pos:end="25:50"><name pos:start="25:12" pos:end="25:17">slotid</name> <operator pos:start="25:19" pos:end="25:20">&gt;=</operator> <literal type="number" pos:start="25:22" pos:end="25:22">1</literal> <operator pos:start="25:24" pos:end="25:25">&amp;&amp;</operator> <name pos:start="25:27" pos:end="25:32">slotid</name> <operator pos:start="25:34" pos:end="25:35">&lt;=</operator> <name pos:start="25:37" pos:end="25:50"><name pos:start="25:37" pos:end="25:40">xhci</name><operator pos:start="25:41" pos:end="25:42">-&gt;</operator><name pos:start="25:43" pos:end="25:50">numslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:36"><expr pos:start="27:5" pos:end="27:35"><call pos:start="27:5" pos:end="27:35"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:35">(<argument pos:start="27:12" pos:end="27:34"><expr pos:start="27:12" pos:end="27:34"><name pos:start="27:12" pos:end="27:15">epid</name> <operator pos:start="27:17" pos:end="27:18">&gt;=</operator> <literal type="number" pos:start="27:20" pos:end="27:20">1</literal> <operator pos:start="27:22" pos:end="27:23">&amp;&amp;</operator> <name pos:start="27:25" pos:end="27:28">epid</name> <operator pos:start="27:30" pos:end="27:31">&lt;=</operator> <literal type="number" pos:start="27:33" pos:end="27:34">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:39">(<expr pos:start="31:9" pos:end="31:38"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:30"><name pos:start="31:10" pos:end="31:13">xhci</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:20">slots</name><index pos:start="31:21" pos:end="31:30">[<expr pos:start="31:22" pos:end="31:29"><name pos:start="31:22" pos:end="31:27">slotid</name><operator pos:start="31:28" pos:end="31:28">-</operator><literal type="number" pos:start="31:29" pos:end="31:29">1</literal></expr>]</index></name><operator pos:start="31:31" pos:end="31:31">.</operator><name pos:start="31:32" pos:end="31:38">enabled</name></expr>)</condition> <block pos:start="31:41" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:69"><expr pos:start="33:9" pos:end="33:68"><call pos:start="33:9" pos:end="33:68"><name pos:start="33:9" pos:end="33:15">DPRINTF</name><argument_list pos:start="33:16" pos:end="33:68">(<argument pos:start="33:17" pos:end="33:59"><expr pos:start="33:17" pos:end="33:59"><literal type="string" pos:start="33:17" pos:end="33:59">"xhci: xhci_kick_ep for disabled slot %d\n"</literal></expr></argument>, <argument pos:start="33:62" pos:end="33:67"><expr pos:start="33:62" pos:end="33:67"><name pos:start="33:62" pos:end="33:67">slotid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:46"><expr pos:start="39:5" pos:end="39:45"><name pos:start="39:5" pos:end="39:9">epctx</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <name pos:start="39:13" pos:end="39:33"><name pos:start="39:13" pos:end="39:16">xhci</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:23">slots</name><index pos:start="39:24" pos:end="39:33">[<expr pos:start="39:25" pos:end="39:32"><name pos:start="39:25" pos:end="39:30">slotid</name><operator pos:start="39:31" pos:end="39:31">-</operator><literal type="number" pos:start="39:32" pos:end="39:32">1</literal></expr>]</index></name><operator pos:start="39:34" pos:end="39:34">.</operator><name pos:start="39:35" pos:end="39:45"><name pos:start="39:35" pos:end="39:37">eps</name><index pos:start="39:38" pos:end="39:45">[<expr pos:start="39:39" pos:end="39:44"><name pos:start="39:39" pos:end="39:42">epid</name><operator pos:start="39:43" pos:end="39:43">-</operator><literal type="number" pos:start="39:44" pos:end="39:44">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:15">(<expr pos:start="41:9" pos:end="41:14"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:14">epctx</name></expr>)</condition> <block pos:start="41:17" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:15">

        <expr_stmt pos:start="43:9" pos:end="45:30"><expr pos:start="43:9" pos:end="45:29"><call pos:start="43:9" pos:end="45:29"><name pos:start="43:9" pos:end="43:15">DPRINTF</name><argument_list pos:start="43:16" pos:end="45:29">(<argument pos:start="43:17" pos:end="43:66"><expr pos:start="43:17" pos:end="43:66"><literal type="string" pos:start="43:17" pos:end="43:66">"xhci: xhci_kick_ep for disabled endpoint %d,%d\n"</literal></expr></argument>,

                <argument pos:start="45:17" pos:end="45:20"><expr pos:start="45:17" pos:end="45:20"><name pos:start="45:17" pos:end="45:20">epid</name></expr></argument>, <argument pos:start="45:23" pos:end="45:28"><expr pos:start="45:23" pos:end="45:28"><name pos:start="45:23" pos:end="45:28">slotid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="53:5" pos:end="55:71">/* If the device has been detached, but the guest has not noticed this

       yet the 2 above checks will succeed, but we must NOT continue */</comment>

    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="61:54">(<expr pos:start="57:9" pos:end="61:53"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:32"><name pos:start="57:10" pos:end="57:13">xhci</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:20">slots</name><index pos:start="57:21" pos:end="57:32">[<expr pos:start="57:22" pos:end="57:31"><name pos:start="57:22" pos:end="57:27">slotid</name> <operator pos:start="57:29" pos:end="57:29">-</operator> <literal type="number" pos:start="57:31" pos:end="57:31">1</literal></expr>]</index></name><operator pos:start="57:33" pos:end="57:33">.</operator><name pos:start="57:34" pos:end="57:38">uport</name> <operator pos:start="57:40" pos:end="57:41">||</operator>

        <operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:32"><name pos:start="59:10" pos:end="59:13">xhci</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:20">slots</name><index pos:start="59:21" pos:end="59:32">[<expr pos:start="59:22" pos:end="59:31"><name pos:start="59:22" pos:end="59:27">slotid</name> <operator pos:start="59:29" pos:end="59:29">-</operator> <literal type="number" pos:start="59:31" pos:end="59:31">1</literal></expr>]</index></name><operator pos:start="59:33" pos:end="59:33">.</operator><name pos:start="59:34" pos:end="59:43"><name pos:start="59:34" pos:end="59:38">uport</name><operator pos:start="59:39" pos:end="59:40">-&gt;</operator><name pos:start="59:41" pos:end="59:43">dev</name></name> <operator pos:start="59:45" pos:end="59:46">||</operator>

        <operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:32"><name pos:start="61:10" pos:end="61:13">xhci</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:20">slots</name><index pos:start="61:21" pos:end="61:32">[<expr pos:start="61:22" pos:end="61:31"><name pos:start="61:22" pos:end="61:27">slotid</name> <operator pos:start="61:29" pos:end="61:29">-</operator> <literal type="number" pos:start="61:31" pos:end="61:31">1</literal></expr>]</index></name><operator pos:start="61:33" pos:end="61:33">.</operator><name pos:start="61:34" pos:end="61:53"><name pos:start="61:34" pos:end="61:38">uport</name><operator pos:start="61:39" pos:end="61:40">-&gt;</operator><name pos:start="61:41" pos:end="61:43">dev</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:53">attached</name></name></expr>)</condition> <block pos:start="61:56" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:15">

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="69:5" pos:end="141:5"><if pos:start="69:5" pos:end="141:5">if <condition pos:start="69:8" pos:end="69:21">(<expr pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:13">epctx</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:20">retry</name></name></expr>)</condition> <block pos:start="69:23" pos:end="141:5">{<block_content pos:start="71:9" pos:end="139:28">

        <decl_stmt pos:start="71:9" pos:end="71:42"><decl pos:start="71:9" pos:end="71:41"><type pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:20">XHCITransfer</name> <modifier pos:start="71:22" pos:end="71:22">*</modifier></type><name pos:start="71:23" pos:end="71:26">xfer</name> <init pos:start="71:28" pos:end="71:41">= <expr pos:start="71:30" pos:end="71:41"><name pos:start="71:30" pos:end="71:41"><name pos:start="71:30" pos:end="71:34">epctx</name><operator pos:start="71:35" pos:end="71:36">-&gt;</operator><name pos:start="71:37" pos:end="71:41">retry</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:40"><expr pos:start="75:9" pos:end="75:39"><call pos:start="75:9" pos:end="75:39"><name pos:start="75:9" pos:end="75:33">trace_usb_xhci_xfer_retry</name><argument_list pos:start="75:34" pos:end="75:39">(<argument pos:start="75:35" pos:end="75:38"><expr pos:start="75:35" pos:end="75:38"><name pos:start="75:35" pos:end="75:38">xfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:36"><expr pos:start="77:9" pos:end="77:35"><call pos:start="77:9" pos:end="77:35"><name pos:start="77:9" pos:end="77:14">assert</name><argument_list pos:start="77:15" pos:end="77:35">(<argument pos:start="77:16" pos:end="77:34"><expr pos:start="77:16" pos:end="77:34"><name pos:start="77:16" pos:end="77:34"><name pos:start="77:16" pos:end="77:19">xfer</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:34">running_retry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="97:9"><if pos:start="79:9" pos:end="97:9">if <condition pos:start="79:12" pos:end="79:29">(<expr pos:start="79:13" pos:end="79:28"><name pos:start="79:13" pos:end="79:28"><name pos:start="79:13" pos:end="79:16">xfer</name><operator pos:start="79:17" pos:end="79:18">-&gt;</operator><name pos:start="79:19" pos:end="79:28">timed_xfer</name></name></expr>)</condition> <block pos:start="79:31" pos:end="97:9">{<block_content pos:start="83:13" pos:end="95:36">

            <comment type="block" pos:start="81:13" pos:end="81:44">/* time to kick the transfer? */</comment>

            <expr_stmt pos:start="83:13" pos:end="83:45"><expr pos:start="83:13" pos:end="83:44"><name pos:start="83:13" pos:end="83:19">mfindex</name> <operator pos:start="83:21" pos:end="83:21">=</operator> <call pos:start="83:23" pos:end="83:44"><name pos:start="83:23" pos:end="83:38">xhci_mfindex_get</name><argument_list pos:start="83:39" pos:end="83:44">(<argument pos:start="83:40" pos:end="83:43"><expr pos:start="83:40" pos:end="83:43"><name pos:start="83:40" pos:end="83:43">xhci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:65"><expr pos:start="85:13" pos:end="85:64"><call pos:start="85:13" pos:end="85:64"><name pos:start="85:13" pos:end="85:36">xhci_check_intr_iso_kick</name><argument_list pos:start="85:37" pos:end="85:64">(<argument pos:start="85:38" pos:end="85:41"><expr pos:start="85:38" pos:end="85:41"><name pos:start="85:38" pos:end="85:41">xhci</name></expr></argument>, <argument pos:start="85:44" pos:end="85:47"><expr pos:start="85:44" pos:end="85:47"><name pos:start="85:44" pos:end="85:47">xfer</name></expr></argument>, <argument pos:start="85:50" pos:end="85:54"><expr pos:start="85:50" pos:end="85:54"><name pos:start="85:50" pos:end="85:54">epctx</name></expr></argument>, <argument pos:start="85:57" pos:end="85:63"><expr pos:start="85:57" pos:end="85:63"><name pos:start="85:57" pos:end="85:63">mfindex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="91:13"><if pos:start="87:13" pos:end="91:13">if <condition pos:start="87:16" pos:end="87:36">(<expr pos:start="87:17" pos:end="87:35"><name pos:start="87:17" pos:end="87:35"><name pos:start="87:17" pos:end="87:20">xfer</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:35">running_retry</name></name></expr>)</condition> <block pos:start="87:38" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:23">

                <return pos:start="89:17" pos:end="89:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:33"><expr pos:start="93:13" pos:end="93:32"><name pos:start="93:13" pos:end="93:28"><name pos:start="93:13" pos:end="93:16">xfer</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:28">timed_xfer</name></name> <operator pos:start="93:30" pos:end="93:30">=</operator> <literal type="number" pos:start="93:32" pos:end="93:32">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:36"><expr pos:start="95:13" pos:end="95:35"><name pos:start="95:13" pos:end="95:31"><name pos:start="95:13" pos:end="95:16">xfer</name><operator pos:start="95:17" pos:end="95:18">-&gt;</operator><name pos:start="95:19" pos:end="95:31">running_retry</name></name> <operator pos:start="95:33" pos:end="95:33">=</operator> <literal type="number" pos:start="95:35" pos:end="95:35">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="99:9" pos:end="135:9"><if pos:start="99:9" pos:end="115:9">if <condition pos:start="99:12" pos:end="99:27">(<expr pos:start="99:13" pos:end="99:26"><name pos:start="99:13" pos:end="99:26"><name pos:start="99:13" pos:end="99:16">xfer</name><operator pos:start="99:17" pos:end="99:18">-&gt;</operator><name pos:start="99:19" pos:end="99:26">iso_xfer</name></name></expr>)</condition> <block pos:start="99:29" pos:end="115:9">{<block_content pos:start="103:13" pos:end="113:39">

            <comment type="block" pos:start="101:13" pos:end="101:36">/* retry iso transfer */</comment>

            <if_stmt pos:start="103:13" pos:end="107:13"><if pos:start="103:13" pos:end="107:13">if <condition pos:start="103:16" pos:end="103:44">(<expr pos:start="103:17" pos:end="103:43"><call pos:start="103:17" pos:end="103:39"><name pos:start="103:17" pos:end="103:33">xhci_setup_packet</name><argument_list pos:start="103:34" pos:end="103:39">(<argument pos:start="103:35" pos:end="103:38"><expr pos:start="103:35" pos:end="103:38"><name pos:start="103:35" pos:end="103:38">xfer</name></expr></argument>)</argument_list></call> <operator pos:start="103:41" pos:end="103:41">&lt;</operator> <literal type="number" pos:start="103:43" pos:end="103:43">0</literal></expr>)</condition> <block pos:start="103:46" pos:end="107:13">{<block_content pos:start="105:17" pos:end="105:23">

                <return pos:start="105:17" pos:end="105:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:67"><expr pos:start="109:13" pos:end="109:66"><call pos:start="109:13" pos:end="109:66"><name pos:start="109:13" pos:end="109:29">usb_handle_packet</name><argument_list pos:start="109:30" pos:end="109:66">(<argument pos:start="109:31" pos:end="109:50"><expr pos:start="109:31" pos:end="109:50"><name pos:start="109:31" pos:end="109:50"><name pos:start="109:31" pos:end="109:34">xfer</name><operator pos:start="109:35" pos:end="109:36">-&gt;</operator><name pos:start="109:37" pos:end="109:42">packet</name><operator pos:start="109:43" pos:end="109:43">.</operator><name pos:start="109:44" pos:end="109:45">ep</name><operator pos:start="109:46" pos:end="109:47">-&gt;</operator><name pos:start="109:48" pos:end="109:50">dev</name></name></expr></argument>, <argument pos:start="109:53" pos:end="109:65"><expr pos:start="109:53" pos:end="109:65"><operator pos:start="109:53" pos:end="109:53">&amp;</operator><name pos:start="109:54" pos:end="109:65"><name pos:start="109:54" pos:end="109:57">xfer</name><operator pos:start="109:58" pos:end="109:59">-&gt;</operator><name pos:start="109:60" pos:end="109:65">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:55"><expr pos:start="111:13" pos:end="111:54"><call pos:start="111:13" pos:end="111:54"><name pos:start="111:13" pos:end="111:18">assert</name><argument_list pos:start="111:19" pos:end="111:54">(<argument pos:start="111:20" pos:end="111:53"><expr pos:start="111:20" pos:end="111:53"><name pos:start="111:20" pos:end="111:38"><name pos:start="111:20" pos:end="111:23">xfer</name><operator pos:start="111:24" pos:end="111:25">-&gt;</operator><name pos:start="111:26" pos:end="111:31">packet</name><operator pos:start="111:32" pos:end="111:32">.</operator><name pos:start="111:33" pos:end="111:38">status</name></name> <operator pos:start="111:40" pos:end="111:41">!=</operator> <name pos:start="111:43" pos:end="111:53">USB_RET_NAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:39"><expr pos:start="113:13" pos:end="113:38"><call pos:start="113:13" pos:end="113:38"><name pos:start="113:13" pos:end="113:32">xhci_complete_packet</name><argument_list pos:start="113:33" pos:end="113:38">(<argument pos:start="113:34" pos:end="113:37"><expr pos:start="113:34" pos:end="113:37"><name pos:start="113:34" pos:end="113:37">xfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="115:11" pos:end="135:9">else <block pos:start="115:16" pos:end="135:9">{<block_content pos:start="119:13" pos:end="133:39">

            <comment type="block" pos:start="117:13" pos:end="117:39">/* retry nak'ed transfer */</comment>

            <if_stmt pos:start="119:13" pos:end="123:13"><if pos:start="119:13" pos:end="123:13">if <condition pos:start="119:16" pos:end="119:44">(<expr pos:start="119:17" pos:end="119:43"><call pos:start="119:17" pos:end="119:39"><name pos:start="119:17" pos:end="119:33">xhci_setup_packet</name><argument_list pos:start="119:34" pos:end="119:39">(<argument pos:start="119:35" pos:end="119:38"><expr pos:start="119:35" pos:end="119:38"><name pos:start="119:35" pos:end="119:38">xfer</name></expr></argument>)</argument_list></call> <operator pos:start="119:41" pos:end="119:41">&lt;</operator> <literal type="number" pos:start="119:43" pos:end="119:43">0</literal></expr>)</condition> <block pos:start="119:46" pos:end="123:13">{<block_content pos:start="121:17" pos:end="121:23">

                <return pos:start="121:17" pos:end="121:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:67"><expr pos:start="125:13" pos:end="125:66"><call pos:start="125:13" pos:end="125:66"><name pos:start="125:13" pos:end="125:29">usb_handle_packet</name><argument_list pos:start="125:30" pos:end="125:66">(<argument pos:start="125:31" pos:end="125:50"><expr pos:start="125:31" pos:end="125:50"><name pos:start="125:31" pos:end="125:50"><name pos:start="125:31" pos:end="125:34">xfer</name><operator pos:start="125:35" pos:end="125:36">-&gt;</operator><name pos:start="125:37" pos:end="125:42">packet</name><operator pos:start="125:43" pos:end="125:43">.</operator><name pos:start="125:44" pos:end="125:45">ep</name><operator pos:start="125:46" pos:end="125:47">-&gt;</operator><name pos:start="125:48" pos:end="125:50">dev</name></name></expr></argument>, <argument pos:start="125:53" pos:end="125:65"><expr pos:start="125:53" pos:end="125:65"><operator pos:start="125:53" pos:end="125:53">&amp;</operator><name pos:start="125:54" pos:end="125:65"><name pos:start="125:54" pos:end="125:57">xfer</name><operator pos:start="125:58" pos:end="125:59">-&gt;</operator><name pos:start="125:60" pos:end="125:65">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="127:13" pos:end="131:13"><if pos:start="127:13" pos:end="131:13">if <condition pos:start="127:16" pos:end="127:51">(<expr pos:start="127:17" pos:end="127:50"><name pos:start="127:17" pos:end="127:35"><name pos:start="127:17" pos:end="127:20">xfer</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:28">packet</name><operator pos:start="127:29" pos:end="127:29">.</operator><name pos:start="127:30" pos:end="127:35">status</name></name> <operator pos:start="127:37" pos:end="127:38">==</operator> <name pos:start="127:40" pos:end="127:50">USB_RET_NAK</name></expr>)</condition> <block pos:start="127:53" pos:end="131:13">{<block_content pos:start="129:17" pos:end="129:23">

                <return pos:start="129:17" pos:end="129:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:39"><expr pos:start="133:13" pos:end="133:38"><call pos:start="133:13" pos:end="133:38"><name pos:start="133:13" pos:end="133:32">xhci_complete_packet</name><argument_list pos:start="133:33" pos:end="133:38">(<argument pos:start="133:34" pos:end="133:37"><expr pos:start="133:34" pos:end="133:37"><name pos:start="133:34" pos:end="133:37">xfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:37"><expr pos:start="137:9" pos:end="137:36"><call pos:start="137:9" pos:end="137:36"><name pos:start="137:9" pos:end="137:14">assert</name><argument_list pos:start="137:15" pos:end="137:36">(<argument pos:start="137:16" pos:end="137:35"><expr pos:start="137:16" pos:end="137:35"><operator pos:start="137:16" pos:end="137:16">!</operator><name pos:start="137:17" pos:end="137:35"><name pos:start="137:17" pos:end="137:20">xfer</name><operator pos:start="137:21" pos:end="137:22">-&gt;</operator><name pos:start="137:23" pos:end="137:35">running_retry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:28"><expr pos:start="139:9" pos:end="139:27"><name pos:start="139:9" pos:end="139:20"><name pos:start="139:9" pos:end="139:13">epctx</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:20">retry</name></name> <operator pos:start="139:22" pos:end="139:22">=</operator> <name pos:start="139:24" pos:end="139:27">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="145:5" pos:end="151:5"><if pos:start="145:5" pos:end="151:5">if <condition pos:start="145:8" pos:end="145:34">(<expr pos:start="145:9" pos:end="145:33"><name pos:start="145:9" pos:end="145:20"><name pos:start="145:9" pos:end="145:13">epctx</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:20">state</name></name> <operator pos:start="145:22" pos:end="145:23">==</operator> <name pos:start="145:25" pos:end="145:33">EP_HALTED</name></expr>)</condition> <block pos:start="145:36" pos:end="151:5">{<block_content pos:start="147:9" pos:end="149:15">

        <expr_stmt pos:start="147:9" pos:end="147:59"><expr pos:start="147:9" pos:end="147:58"><call pos:start="147:9" pos:end="147:58"><name pos:start="147:9" pos:end="147:15">DPRINTF</name><argument_list pos:start="147:16" pos:end="147:58">(<argument pos:start="147:17" pos:end="147:57"><expr pos:start="147:17" pos:end="147:57"><literal type="string" pos:start="147:17" pos:end="147:57">"xhci: ep halted, not running schedule\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="149:9" pos:end="149:15">return;</return>

    </block_content>}</block></if></if_stmt>





    <if_stmt pos:start="157:5" pos:end="181:5"><if pos:start="157:5" pos:end="173:5">if <condition pos:start="157:8" pos:end="157:27">(<expr pos:start="157:9" pos:end="157:26"><name pos:start="157:9" pos:end="157:26"><name pos:start="157:9" pos:end="157:13">epctx</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:26">nr_pstreams</name></name></expr>)</condition> <block pos:start="157:29" pos:end="173:5">{<block_content pos:start="159:9" pos:end="171:58">

        <decl_stmt pos:start="159:9" pos:end="159:21"><decl pos:start="159:9" pos:end="159:20"><type pos:start="159:9" pos:end="159:16"><name pos:start="159:9" pos:end="159:16">uint32_t</name></type> <name pos:start="159:18" pos:end="159:20">err</name></decl>;</decl_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:56"><expr pos:start="161:9" pos:end="161:55"><name pos:start="161:9" pos:end="161:13">stctx</name> <operator pos:start="161:15" pos:end="161:15">=</operator> <call pos:start="161:17" pos:end="161:55"><name pos:start="161:17" pos:end="161:32">xhci_find_stream</name><argument_list pos:start="161:33" pos:end="161:55">(<argument pos:start="161:34" pos:end="161:38"><expr pos:start="161:34" pos:end="161:38"><name pos:start="161:34" pos:end="161:38">epctx</name></expr></argument>, <argument pos:start="161:41" pos:end="161:48"><expr pos:start="161:41" pos:end="161:48"><name pos:start="161:41" pos:end="161:48">streamid</name></expr></argument>, <argument pos:start="161:51" pos:end="161:54"><expr pos:start="161:51" pos:end="161:54"><operator pos:start="161:51" pos:end="161:51">&amp;</operator><name pos:start="161:52" pos:end="161:54">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="163:9" pos:end="167:9"><if pos:start="163:9" pos:end="167:9">if <condition pos:start="163:12" pos:end="163:26">(<expr pos:start="163:13" pos:end="163:25"><name pos:start="163:13" pos:end="163:17">stctx</name> <operator pos:start="163:19" pos:end="163:20">==</operator> <name pos:start="163:22" pos:end="163:25">NULL</name></expr>)</condition> <block pos:start="163:28" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:19">

            <return pos:start="165:13" pos:end="165:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:28"><expr pos:start="169:9" pos:end="169:27"><name pos:start="169:9" pos:end="169:12">ring</name> <operator pos:start="169:14" pos:end="169:14">=</operator> <operator pos:start="169:16" pos:end="169:16">&amp;</operator><name pos:start="169:17" pos:end="169:27"><name pos:start="169:17" pos:end="169:21">stctx</name><operator pos:start="169:22" pos:end="169:23">-&gt;</operator><name pos:start="169:24" pos:end="169:27">ring</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:58"><expr pos:start="171:9" pos:end="171:57"><call pos:start="171:9" pos:end="171:57"><name pos:start="171:9" pos:end="171:25">xhci_set_ep_state</name><argument_list pos:start="171:26" pos:end="171:57">(<argument pos:start="171:27" pos:end="171:30"><expr pos:start="171:27" pos:end="171:30"><name pos:start="171:27" pos:end="171:30">xhci</name></expr></argument>, <argument pos:start="171:33" pos:end="171:37"><expr pos:start="171:33" pos:end="171:37"><name pos:start="171:33" pos:end="171:37">epctx</name></expr></argument>, <argument pos:start="171:40" pos:end="171:44"><expr pos:start="171:40" pos:end="171:44"><name pos:start="171:40" pos:end="171:44">stctx</name></expr></argument>, <argument pos:start="171:47" pos:end="171:56"><expr pos:start="171:47" pos:end="171:56"><name pos:start="171:47" pos:end="171:56">EP_RUNNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="173:7" pos:end="181:5">else <block pos:start="173:12" pos:end="181:5">{<block_content pos:start="175:9" pos:end="179:57">

        <expr_stmt pos:start="175:9" pos:end="175:28"><expr pos:start="175:9" pos:end="175:27"><name pos:start="175:9" pos:end="175:12">ring</name> <operator pos:start="175:14" pos:end="175:14">=</operator> <operator pos:start="175:16" pos:end="175:16">&amp;</operator><name pos:start="175:17" pos:end="175:27"><name pos:start="175:17" pos:end="175:21">epctx</name><operator pos:start="175:22" pos:end="175:23">-&gt;</operator><name pos:start="175:24" pos:end="175:27">ring</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:21"><expr pos:start="177:9" pos:end="177:20"><name pos:start="177:9" pos:end="177:16">streamid</name> <operator pos:start="177:18" pos:end="177:18">=</operator> <literal type="number" pos:start="177:20" pos:end="177:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:57"><expr pos:start="179:9" pos:end="179:56"><call pos:start="179:9" pos:end="179:56"><name pos:start="179:9" pos:end="179:25">xhci_set_ep_state</name><argument_list pos:start="179:26" pos:end="179:56">(<argument pos:start="179:27" pos:end="179:30"><expr pos:start="179:27" pos:end="179:30"><name pos:start="179:27" pos:end="179:30">xhci</name></expr></argument>, <argument pos:start="179:33" pos:end="179:37"><expr pos:start="179:33" pos:end="179:37"><name pos:start="179:33" pos:end="179:37">epctx</name></expr></argument>, <argument pos:start="179:40" pos:end="179:43"><expr pos:start="179:40" pos:end="179:43"><name pos:start="179:40" pos:end="179:43">NULL</name></expr></argument>, <argument pos:start="179:46" pos:end="179:55"><expr pos:start="179:46" pos:end="179:55"><name pos:start="179:46" pos:end="179:55">EP_RUNNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:31"><expr pos:start="183:5" pos:end="183:30"><call pos:start="183:5" pos:end="183:30"><name pos:start="183:5" pos:end="183:10">assert</name><argument_list pos:start="183:11" pos:end="183:30">(<argument pos:start="183:12" pos:end="183:29"><expr pos:start="183:12" pos:end="183:29"><name pos:start="183:12" pos:end="183:24"><name pos:start="183:12" pos:end="183:15">ring</name><operator pos:start="183:16" pos:end="183:17">-&gt;</operator><name pos:start="183:18" pos:end="183:24">dequeue</name></name> <operator pos:start="183:26" pos:end="183:27">!=</operator> <literal type="number" pos:start="183:29" pos:end="183:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="187:5" pos:end="295:5">while <condition pos:start="187:11" pos:end="187:13">(<expr pos:start="187:12" pos:end="187:12"><literal type="number" pos:start="187:12" pos:end="187:12">1</literal></expr>)</condition> <block pos:start="187:15" pos:end="295:5">{<block_content pos:start="189:9" pos:end="293:9">

        <decl_stmt pos:start="189:9" pos:end="189:65"><decl pos:start="189:9" pos:end="189:64"><type pos:start="189:9" pos:end="189:22"><name pos:start="189:9" pos:end="189:20">XHCITransfer</name> <modifier pos:start="189:22" pos:end="189:22">*</modifier></type><name pos:start="189:23" pos:end="189:26">xfer</name> <init pos:start="189:28" pos:end="189:64">= <expr pos:start="189:30" pos:end="189:64"><operator pos:start="189:30" pos:end="189:30">&amp;</operator><name pos:start="189:31" pos:end="189:64"><name pos:start="189:31" pos:end="189:35">epctx</name><operator pos:start="189:36" pos:end="189:37">-&gt;</operator><name pos:start="189:38" pos:end="189:46">transfers</name><index pos:start="189:47" pos:end="189:64">[<expr pos:start="189:48" pos:end="189:63"><name pos:start="189:48" pos:end="189:63"><name pos:start="189:48" pos:end="189:52">epctx</name><operator pos:start="189:53" pos:end="189:54">-&gt;</operator><name pos:start="189:55" pos:end="189:63">next_xfer</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="191:9" pos:end="195:9"><if pos:start="191:9" pos:end="195:9">if <condition pos:start="191:12" pos:end="191:55">(<expr pos:start="191:13" pos:end="191:54"><name pos:start="191:13" pos:end="191:31"><name pos:start="191:13" pos:end="191:16">xfer</name><operator pos:start="191:17" pos:end="191:18">-&gt;</operator><name pos:start="191:19" pos:end="191:31">running_async</name></name> <operator pos:start="191:33" pos:end="191:34">||</operator> <name pos:start="191:36" pos:end="191:54"><name pos:start="191:36" pos:end="191:39">xfer</name><operator pos:start="191:40" pos:end="191:41">-&gt;</operator><name pos:start="191:42" pos:end="191:54">running_retry</name></name></expr>)</condition> <block pos:start="191:57" pos:end="195:9">{<block_content pos:start="193:13" pos:end="193:18">

            <break pos:start="193:13" pos:end="193:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:52"><expr pos:start="197:9" pos:end="197:51"><name pos:start="197:9" pos:end="197:14">length</name> <operator pos:start="197:16" pos:end="197:16">=</operator> <call pos:start="197:18" pos:end="197:51"><name pos:start="197:18" pos:end="197:39">xhci_ring_chain_length</name><argument_list pos:start="197:40" pos:end="197:51">(<argument pos:start="197:41" pos:end="197:44"><expr pos:start="197:41" pos:end="197:44"><name pos:start="197:41" pos:end="197:44">xhci</name></expr></argument>, <argument pos:start="197:47" pos:end="197:50"><expr pos:start="197:47" pos:end="197:50"><name pos:start="197:47" pos:end="197:50">ring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="199:9" pos:end="207:9"><if pos:start="199:9" pos:end="203:9">if <condition pos:start="199:12" pos:end="199:23">(<expr pos:start="199:13" pos:end="199:22"><name pos:start="199:13" pos:end="199:18">length</name> <operator pos:start="199:20" pos:end="199:20">&lt;</operator> <literal type="number" pos:start="199:22" pos:end="199:22">0</literal></expr>)</condition> <block pos:start="199:25" pos:end="203:9">{<block_content pos:start="201:13" pos:end="201:18">

            <break pos:start="201:13" pos:end="201:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="203:11" pos:end="207:9">else if <condition pos:start="203:19" pos:end="203:31">(<expr pos:start="203:20" pos:end="203:30"><name pos:start="203:20" pos:end="203:25">length</name> <operator pos:start="203:27" pos:end="203:28">==</operator> <literal type="number" pos:start="203:30" pos:end="203:30">0</literal></expr>)</condition> <block pos:start="203:33" pos:end="207:9">{<block_content pos:start="205:13" pos:end="205:18">

            <break pos:start="205:13" pos:end="205:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="209:9" pos:end="219:9"><if pos:start="209:9" pos:end="219:9">if <condition pos:start="209:12" pos:end="209:53">(<expr pos:start="209:13" pos:end="209:52"><name pos:start="209:13" pos:end="209:22"><name pos:start="209:13" pos:end="209:16">xfer</name><operator pos:start="209:17" pos:end="209:18">-&gt;</operator><name pos:start="209:19" pos:end="209:22">trbs</name></name> <operator pos:start="209:24" pos:end="209:25">&amp;&amp;</operator> <name pos:start="209:27" pos:end="209:43"><name pos:start="209:27" pos:end="209:30">xfer</name><operator pos:start="209:31" pos:end="209:32">-&gt;</operator><name pos:start="209:33" pos:end="209:43">trb_alloced</name></name> <operator pos:start="209:45" pos:end="209:45">&lt;</operator> <name pos:start="209:47" pos:end="209:52">length</name></expr>)</condition> <block pos:start="209:55" pos:end="219:9">{<block_content pos:start="211:13" pos:end="217:30">

            <expr_stmt pos:start="211:13" pos:end="211:32"><expr pos:start="211:13" pos:end="211:31"><name pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:16">xfer</name><operator pos:start="211:17" pos:end="211:18">-&gt;</operator><name pos:start="211:19" pos:end="211:27">trb_count</name></name> <operator pos:start="211:29" pos:end="211:29">=</operator> <literal type="number" pos:start="211:31" pos:end="211:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:34"><expr pos:start="213:13" pos:end="213:33"><name pos:start="213:13" pos:end="213:29"><name pos:start="213:13" pos:end="213:16">xfer</name><operator pos:start="213:17" pos:end="213:18">-&gt;</operator><name pos:start="213:19" pos:end="213:29">trb_alloced</name></name> <operator pos:start="213:31" pos:end="213:31">=</operator> <literal type="number" pos:start="213:33" pos:end="213:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:31"><expr pos:start="215:13" pos:end="215:30"><call pos:start="215:13" pos:end="215:30"><name pos:start="215:13" pos:end="215:18">g_free</name><argument_list pos:start="215:19" pos:end="215:30">(<argument pos:start="215:20" pos:end="215:29"><expr pos:start="215:20" pos:end="215:29"><name pos:start="215:20" pos:end="215:29"><name pos:start="215:20" pos:end="215:23">xfer</name><operator pos:start="215:24" pos:end="215:25">-&gt;</operator><name pos:start="215:26" pos:end="215:29">trbs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:30"><expr pos:start="217:13" pos:end="217:29"><name pos:start="217:13" pos:end="217:22"><name pos:start="217:13" pos:end="217:16">xfer</name><operator pos:start="217:17" pos:end="217:18">-&gt;</operator><name pos:start="217:19" pos:end="217:22">trbs</name></name> <operator pos:start="217:24" pos:end="217:24">=</operator> <name pos:start="217:26" pos:end="217:29">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="221:9" pos:end="227:9"><if pos:start="221:9" pos:end="227:9">if <condition pos:start="221:12" pos:end="221:24">(<expr pos:start="221:13" pos:end="221:23"><operator pos:start="221:13" pos:end="221:13">!</operator><name pos:start="221:14" pos:end="221:23"><name pos:start="221:14" pos:end="221:17">xfer</name><operator pos:start="221:18" pos:end="221:19">-&gt;</operator><name pos:start="221:20" pos:end="221:23">trbs</name></name></expr>)</condition> <block pos:start="221:26" pos:end="227:9">{<block_content pos:start="223:13" pos:end="225:39">

            <expr_stmt pos:start="223:13" pos:end="223:48"><expr pos:start="223:13" pos:end="223:47"><name pos:start="223:13" pos:end="223:22"><name pos:start="223:13" pos:end="223:16">xfer</name><operator pos:start="223:17" pos:end="223:18">-&gt;</operator><name pos:start="223:19" pos:end="223:22">trbs</name></name> <operator pos:start="223:24" pos:end="223:24">=</operator> <call pos:start="223:26" pos:end="223:47"><name pos:start="223:26" pos:end="223:30">g_new</name><argument_list pos:start="223:31" pos:end="223:47">(<argument pos:start="223:32" pos:end="223:38"><expr pos:start="223:32" pos:end="223:38"><name pos:start="223:32" pos:end="223:38">XHCITRB</name></expr></argument>, <argument pos:start="223:41" pos:end="223:46"><expr pos:start="223:41" pos:end="223:46"><name pos:start="223:41" pos:end="223:46">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:39"><expr pos:start="225:13" pos:end="225:38"><name pos:start="225:13" pos:end="225:29"><name pos:start="225:13" pos:end="225:16">xfer</name><operator pos:start="225:17" pos:end="225:18">-&gt;</operator><name pos:start="225:19" pos:end="225:29">trb_alloced</name></name> <operator pos:start="225:31" pos:end="225:31">=</operator> <name pos:start="225:33" pos:end="225:38">length</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:33"><expr pos:start="229:9" pos:end="229:32"><name pos:start="229:9" pos:end="229:23"><name pos:start="229:9" pos:end="229:12">xfer</name><operator pos:start="229:13" pos:end="229:14">-&gt;</operator><name pos:start="229:15" pos:end="229:23">trb_count</name></name> <operator pos:start="229:25" pos:end="229:25">=</operator> <name pos:start="229:27" pos:end="229:32">length</name></expr>;</expr_stmt>



        <for pos:start="233:9" pos:end="241:9">for <control pos:start="233:13" pos:end="233:36">(<init pos:start="233:14" pos:end="233:19"><expr pos:start="233:14" pos:end="233:18"><name pos:start="233:14" pos:end="233:14">i</name> <operator pos:start="233:16" pos:end="233:16">=</operator> <literal type="number" pos:start="233:18" pos:end="233:18">0</literal></expr>;</init> <condition pos:start="233:21" pos:end="233:31"><expr pos:start="233:21" pos:end="233:30"><name pos:start="233:21" pos:end="233:21">i</name> <operator pos:start="233:23" pos:end="233:23">&lt;</operator> <name pos:start="233:25" pos:end="233:30">length</name></expr>;</condition> <incr pos:start="233:33" pos:end="233:35"><expr pos:start="233:33" pos:end="233:35"><name pos:start="233:33" pos:end="233:33">i</name><operator pos:start="233:34" pos:end="233:35">++</operator></expr></incr>)</control> <block pos:start="233:38" pos:end="241:9">{<block_content pos:start="235:13" pos:end="239:25">

            <decl_stmt pos:start="235:13" pos:end="235:25"><decl pos:start="235:13" pos:end="235:24"><type pos:start="235:13" pos:end="235:19"><name pos:start="235:13" pos:end="235:19">TRBType</name></type> <name pos:start="235:21" pos:end="235:24">type</name></decl>;</decl_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:69"><expr pos:start="237:13" pos:end="237:68"><name pos:start="237:13" pos:end="237:16">type</name> <operator pos:start="237:18" pos:end="237:18">=</operator> <call pos:start="237:20" pos:end="237:68"><name pos:start="237:20" pos:end="237:34">xhci_ring_fetch</name><argument_list pos:start="237:35" pos:end="237:68">(<argument pos:start="237:36" pos:end="237:39"><expr pos:start="237:36" pos:end="237:39"><name pos:start="237:36" pos:end="237:39">xhci</name></expr></argument>, <argument pos:start="237:42" pos:end="237:45"><expr pos:start="237:42" pos:end="237:45"><name pos:start="237:42" pos:end="237:45">ring</name></expr></argument>, <argument pos:start="237:48" pos:end="237:61"><expr pos:start="237:48" pos:end="237:61"><operator pos:start="237:48" pos:end="237:48">&amp;</operator><name pos:start="237:49" pos:end="237:61"><name pos:start="237:49" pos:end="237:52">xfer</name><operator pos:start="237:53" pos:end="237:54">-&gt;</operator><name pos:start="237:55" pos:end="237:58">trbs</name><index pos:start="237:59" pos:end="237:61">[<expr pos:start="237:60" pos:end="237:60"><name pos:start="237:60" pos:end="237:60">i</name></expr>]</index></name></expr></argument>, <argument pos:start="237:64" pos:end="237:67"><expr pos:start="237:64" pos:end="237:67"><name pos:start="237:64" pos:end="237:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:25"><expr pos:start="239:13" pos:end="239:24"><call pos:start="239:13" pos:end="239:24"><name pos:start="239:13" pos:end="239:18">assert</name><argument_list pos:start="239:19" pos:end="239:24">(<argument pos:start="239:20" pos:end="239:23"><expr pos:start="239:20" pos:end="239:23"><name pos:start="239:20" pos:end="239:23">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="243:9" pos:end="243:34"><expr pos:start="243:9" pos:end="243:33"><name pos:start="243:9" pos:end="243:22"><name pos:start="243:9" pos:end="243:12">xfer</name><operator pos:start="243:13" pos:end="243:14">-&gt;</operator><name pos:start="243:15" pos:end="243:22">streamid</name></name> <operator pos:start="243:24" pos:end="243:24">=</operator> <name pos:start="243:26" pos:end="243:33">streamid</name></expr>;</expr_stmt>



        <if_stmt pos:start="247:9" pos:end="275:9"><if pos:start="247:9" pos:end="259:9">if <condition pos:start="247:12" pos:end="247:22">(<expr pos:start="247:13" pos:end="247:21"><name pos:start="247:13" pos:end="247:16">epid</name> <operator pos:start="247:18" pos:end="247:19">==</operator> <literal type="number" pos:start="247:21" pos:end="247:21">1</literal></expr>)</condition> <block pos:start="247:24" pos:end="259:9">{<block_content pos:start="249:13" pos:end="257:13">

            <if_stmt pos:start="249:13" pos:end="257:13"><if pos:start="249:13" pos:end="253:13">if <condition pos:start="249:16" pos:end="249:56">(<expr pos:start="249:17" pos:end="249:55"><call pos:start="249:17" pos:end="249:50"><name pos:start="249:17" pos:end="249:38">xhci_fire_ctl_transfer</name><argument_list pos:start="249:39" pos:end="249:50">(<argument pos:start="249:40" pos:end="249:43"><expr pos:start="249:40" pos:end="249:43"><name pos:start="249:40" pos:end="249:43">xhci</name></expr></argument>, <argument pos:start="249:46" pos:end="249:49"><expr pos:start="249:46" pos:end="249:49"><name pos:start="249:46" pos:end="249:49">xfer</name></expr></argument>)</argument_list></call> <operator pos:start="249:52" pos:end="249:53">&gt;=</operator> <literal type="number" pos:start="249:55" pos:end="249:55">0</literal></expr>)</condition> <block pos:start="249:58" pos:end="253:13">{<block_content pos:start="251:17" pos:end="251:69">

                <expr_stmt pos:start="251:17" pos:end="251:69"><expr pos:start="251:17" pos:end="251:68"><name pos:start="251:17" pos:end="251:32"><name pos:start="251:17" pos:end="251:21">epctx</name><operator pos:start="251:22" pos:end="251:23">-&gt;</operator><name pos:start="251:24" pos:end="251:32">next_xfer</name></name> <operator pos:start="251:34" pos:end="251:34">=</operator> <operator pos:start="251:36" pos:end="251:36">(</operator><name pos:start="251:37" pos:end="251:52"><name pos:start="251:37" pos:end="251:41">epctx</name><operator pos:start="251:42" pos:end="251:43">-&gt;</operator><name pos:start="251:44" pos:end="251:52">next_xfer</name></name> <operator pos:start="251:54" pos:end="251:54">+</operator> <literal type="number" pos:start="251:56" pos:end="251:56">1</literal><operator pos:start="251:57" pos:end="251:57">)</operator> <operator pos:start="251:59" pos:end="251:59">%</operator> <name pos:start="251:61" pos:end="251:68">TD_QUEUE</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="253:15" pos:end="257:13">else <block pos:start="253:20" pos:end="257:13">{<block_content pos:start="255:17" pos:end="255:61">

                <expr_stmt pos:start="255:17" pos:end="255:61"><expr pos:start="255:17" pos:end="255:60"><call pos:start="255:17" pos:end="255:60"><name pos:start="255:17" pos:end="255:23">DPRINTF</name><argument_list pos:start="255:24" pos:end="255:60">(<argument pos:start="255:25" pos:end="255:59"><expr pos:start="255:25" pos:end="255:59"><literal type="string" pos:start="255:25" pos:end="255:59">"xhci: error firing CTL transfer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="259:11" pos:end="275:9">else <block pos:start="259:16" pos:end="275:9">{<block_content pos:start="261:13" pos:end="273:13">

            <if_stmt pos:start="261:13" pos:end="273:13"><if pos:start="261:13" pos:end="265:13">if <condition pos:start="261:16" pos:end="261:59">(<expr pos:start="261:17" pos:end="261:58"><call pos:start="261:17" pos:end="261:53"><name pos:start="261:17" pos:end="261:34">xhci_fire_transfer</name><argument_list pos:start="261:35" pos:end="261:53">(<argument pos:start="261:36" pos:end="261:39"><expr pos:start="261:36" pos:end="261:39"><name pos:start="261:36" pos:end="261:39">xhci</name></expr></argument>, <argument pos:start="261:42" pos:end="261:45"><expr pos:start="261:42" pos:end="261:45"><name pos:start="261:42" pos:end="261:45">xfer</name></expr></argument>, <argument pos:start="261:48" pos:end="261:52"><expr pos:start="261:48" pos:end="261:52"><name pos:start="261:48" pos:end="261:52">epctx</name></expr></argument>)</argument_list></call> <operator pos:start="261:55" pos:end="261:56">&gt;=</operator> <literal type="number" pos:start="261:58" pos:end="261:58">0</literal></expr>)</condition> <block pos:start="261:61" pos:end="265:13">{<block_content pos:start="263:17" pos:end="263:69">

                <expr_stmt pos:start="263:17" pos:end="263:69"><expr pos:start="263:17" pos:end="263:68"><name pos:start="263:17" pos:end="263:32"><name pos:start="263:17" pos:end="263:21">epctx</name><operator pos:start="263:22" pos:end="263:23">-&gt;</operator><name pos:start="263:24" pos:end="263:32">next_xfer</name></name> <operator pos:start="263:34" pos:end="263:34">=</operator> <operator pos:start="263:36" pos:end="263:36">(</operator><name pos:start="263:37" pos:end="263:52"><name pos:start="263:37" pos:end="263:41">epctx</name><operator pos:start="263:42" pos:end="263:43">-&gt;</operator><name pos:start="263:44" pos:end="263:52">next_xfer</name></name> <operator pos:start="263:54" pos:end="263:54">+</operator> <literal type="number" pos:start="263:56" pos:end="263:56">1</literal><operator pos:start="263:57" pos:end="263:57">)</operator> <operator pos:start="263:59" pos:end="263:59">%</operator> <name pos:start="263:61" pos:end="263:68">TD_QUEUE</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="265:15" pos:end="273:13">else <block pos:start="265:20" pos:end="273:13">{<block_content pos:start="267:17" pos:end="271:17">

                <if_stmt pos:start="267:17" pos:end="271:17"><if pos:start="267:17" pos:end="271:17">if <condition pos:start="267:20" pos:end="267:38">(<expr pos:start="267:21" pos:end="267:37"><operator pos:start="267:21" pos:end="267:21">!</operator><name pos:start="267:22" pos:end="267:37"><name pos:start="267:22" pos:end="267:25">xfer</name><operator pos:start="267:26" pos:end="267:27">-&gt;</operator><name pos:start="267:28" pos:end="267:37">timed_xfer</name></name></expr>)</condition> <block pos:start="267:40" pos:end="271:17">{<block_content pos:start="269:21" pos:end="269:66">

                    <expr_stmt pos:start="269:21" pos:end="269:66"><expr pos:start="269:21" pos:end="269:65"><call pos:start="269:21" pos:end="269:65"><name pos:start="269:21" pos:end="269:27">DPRINTF</name><argument_list pos:start="269:28" pos:end="269:65">(<argument pos:start="269:29" pos:end="269:64"><expr pos:start="269:29" pos:end="269:64"><literal type="string" pos:start="269:29" pos:end="269:64">"xhci: error firing data transfer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="279:9" pos:end="283:9"><if pos:start="279:9" pos:end="283:9">if <condition pos:start="279:12" pos:end="279:38">(<expr pos:start="279:13" pos:end="279:37"><name pos:start="279:13" pos:end="279:24"><name pos:start="279:13" pos:end="279:17">epctx</name><operator pos:start="279:18" pos:end="279:19">-&gt;</operator><name pos:start="279:20" pos:end="279:24">state</name></name> <operator pos:start="279:26" pos:end="279:27">==</operator> <name pos:start="279:29" pos:end="279:37">EP_HALTED</name></expr>)</condition> <block pos:start="279:40" pos:end="283:9">{<block_content pos:start="281:13" pos:end="281:18">

            <break pos:start="281:13" pos:end="281:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="285:9" pos:end="293:9"><if pos:start="285:9" pos:end="293:9">if <condition pos:start="285:12" pos:end="285:32">(<expr pos:start="285:13" pos:end="285:31"><name pos:start="285:13" pos:end="285:31"><name pos:start="285:13" pos:end="285:16">xfer</name><operator pos:start="285:17" pos:end="285:18">-&gt;</operator><name pos:start="285:19" pos:end="285:31">running_retry</name></name></expr>)</condition> <block pos:start="285:34" pos:end="293:9">{<block_content pos:start="287:13" pos:end="291:18">

            <expr_stmt pos:start="287:13" pos:end="287:62"><expr pos:start="287:13" pos:end="287:61"><call pos:start="287:13" pos:end="287:61"><name pos:start="287:13" pos:end="287:19">DPRINTF</name><argument_list pos:start="287:20" pos:end="287:61">(<argument pos:start="287:21" pos:end="287:60"><expr pos:start="287:21" pos:end="287:60"><literal type="string" pos:start="287:21" pos:end="287:60">"xhci: xfer nacked, stopping schedule\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:32"><expr pos:start="289:13" pos:end="289:31"><name pos:start="289:13" pos:end="289:24"><name pos:start="289:13" pos:end="289:17">epctx</name><operator pos:start="289:18" pos:end="289:19">-&gt;</operator><name pos:start="289:20" pos:end="289:24">retry</name></name> <operator pos:start="289:26" pos:end="289:26">=</operator> <name pos:start="289:28" pos:end="289:31">xfer</name></expr>;</expr_stmt>

            <break pos:start="291:13" pos:end="291:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="299:5" pos:end="299:48"><expr pos:start="299:5" pos:end="299:47"><name pos:start="299:5" pos:end="299:6">ep</name> <operator pos:start="299:8" pos:end="299:8">=</operator> <call pos:start="299:10" pos:end="299:47"><name pos:start="299:10" pos:end="299:27">xhci_epid_to_usbep</name><argument_list pos:start="299:28" pos:end="299:47">(<argument pos:start="299:29" pos:end="299:32"><expr pos:start="299:29" pos:end="299:32"><name pos:start="299:29" pos:end="299:32">xhci</name></expr></argument>, <argument pos:start="299:35" pos:end="299:40"><expr pos:start="299:35" pos:end="299:40"><name pos:start="299:35" pos:end="299:40">slotid</name></expr></argument>, <argument pos:start="299:43" pos:end="299:46"><expr pos:start="299:43" pos:end="299:46"><name pos:start="299:43" pos:end="299:46">epid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="301:5" pos:end="305:5"><if pos:start="301:5" pos:end="305:5">if <condition pos:start="301:8" pos:end="301:11">(<expr pos:start="301:9" pos:end="301:10"><name pos:start="301:9" pos:end="301:10">ep</name></expr>)</condition> <block pos:start="301:13" pos:end="305:5">{<block_content pos:start="303:9" pos:end="303:47">

        <expr_stmt pos:start="303:9" pos:end="303:47"><expr pos:start="303:9" pos:end="303:46"><call pos:start="303:9" pos:end="303:46"><name pos:start="303:9" pos:end="303:33">usb_device_flush_ep_queue</name><argument_list pos:start="303:34" pos:end="303:46">(<argument pos:start="303:35" pos:end="303:41"><expr pos:start="303:35" pos:end="303:41"><name pos:start="303:35" pos:end="303:41"><name pos:start="303:35" pos:end="303:36">ep</name><operator pos:start="303:37" pos:end="303:38">-&gt;</operator><name pos:start="303:39" pos:end="303:41">dev</name></name></expr></argument>, <argument pos:start="303:44" pos:end="303:45"><expr pos:start="303:44" pos:end="303:45"><name pos:start="303:44" pos:end="303:45">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
