<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25251.c" pos:tabs="8"><function pos:start="1:1" pos:end="31:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">hmp_info_memdev</name><parameter_list pos:start="1:21" pos:end="1:54">(<parameter pos:start="1:22" pos:end="1:33"><decl pos:start="1:22" pos:end="1:33"><type pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:28">Monitor</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:33">mon</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:53"><decl pos:start="1:36" pos:end="1:53"><type pos:start="1:36" pos:end="1:53"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:46">QDict</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">qdict</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="31:1">{<block_content pos:start="3:5" pos:end="30:30">
    <decl_stmt pos:start="3:5" pos:end="3:22"><decl pos:start="3:5" pos:end="3:21"><type pos:start="3:5" pos:end="3:11"><name pos:start="3:5" pos:end="3:9">Error</name> <modifier pos:start="3:11" pos:end="3:11">*</modifier></type><name pos:start="3:12" pos:end="3:14">err</name> <init pos:start="3:16" pos:end="3:21">= <expr pos:start="3:18" pos:end="3:21"><name pos:start="3:18" pos:end="3:21">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:53"><decl pos:start="4:5" pos:end="4:52"><type pos:start="4:5" pos:end="4:16"><name pos:start="4:5" pos:end="4:14">MemdevList</name> <modifier pos:start="4:16" pos:end="4:16">*</modifier></type><name pos:start="4:17" pos:end="4:27">memdev_list</name> <init pos:start="4:29" pos:end="4:52">= <expr pos:start="4:31" pos:end="4:52"><call pos:start="4:31" pos:end="4:52"><name pos:start="4:31" pos:end="4:46">qmp_query_memdev</name><argument_list pos:start="4:47" pos:end="4:52">(<argument pos:start="4:48" pos:end="4:51"><expr pos:start="4:48" pos:end="4:51"><operator pos:start="4:48" pos:end="4:48">&amp;</operator><name pos:start="4:49" pos:end="4:51">err</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">MemdevList</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">m</name> <init pos:start="5:19" pos:end="5:31">= <expr pos:start="5:21" pos:end="5:31"><name pos:start="5:21" pos:end="5:31">memdev_list</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:28"><decl pos:start="6:5" pos:end="6:27"><type pos:start="6:5" pos:end="6:25"><name pos:start="6:5" pos:end="6:23">StringOutputVisitor</name> <modifier pos:start="6:25" pos:end="6:25">*</modifier></type><name pos:start="6:26" pos:end="6:27">ov</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:14"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:13">str</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:14"><decl pos:start="8:5" pos:end="8:13"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:9">i</name> <init pos:start="8:11" pos:end="8:13">= <expr pos:start="8:13" pos:end="8:13"><literal type="number" pos:start="8:13" pos:end="8:13">0</literal></expr></init></decl>;</decl_stmt>
    <while pos:start="9:5" pos:end="29:5">while <condition pos:start="9:11" pos:end="9:13">(<expr pos:start="9:12" pos:end="9:12"><name pos:start="9:12" pos:end="9:12">m</name></expr>)</condition> <block pos:start="9:15" pos:end="29:5">{<block_content pos:start="10:9" pos:end="28:12">
        <expr_stmt pos:start="10:9" pos:end="10:46"><expr pos:start="10:9" pos:end="10:45"><name pos:start="10:9" pos:end="10:10">ov</name> <operator pos:start="10:12" pos:end="10:12">=</operator> <call pos:start="10:14" pos:end="10:45"><name pos:start="10:14" pos:end="10:38">string_output_visitor_new</name><argument_list pos:start="10:39" pos:end="10:45">(<argument pos:start="10:40" pos:end="10:44"><expr pos:start="10:40" pos:end="10:44"><name pos:start="10:40" pos:end="10:44">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="11:9" pos:end="12:65"><expr pos:start="11:9" pos:end="12:64"><call pos:start="11:9" pos:end="12:64"><name pos:start="11:9" pos:end="11:29">visit_type_uint16List</name><argument_list pos:start="11:30" pos:end="12:64">(<argument pos:start="11:31" pos:end="11:59"><expr pos:start="11:31" pos:end="11:59"><call pos:start="11:31" pos:end="11:59"><name pos:start="11:31" pos:end="11:55">string_output_get_visitor</name><argument_list pos:start="11:56" pos:end="11:59">(<argument pos:start="11:57" pos:end="11:58"><expr pos:start="11:57" pos:end="11:58"><name pos:start="11:57" pos:end="11:58">ov</name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument pos:start="12:31" pos:end="12:51"><expr pos:start="12:31" pos:end="12:51"><operator pos:start="12:31" pos:end="12:31">&amp;</operator><name pos:start="12:32" pos:end="12:51"><name pos:start="12:32" pos:end="12:32">m</name><operator pos:start="12:33" pos:end="12:34">-&gt;</operator><name pos:start="12:35" pos:end="12:39">value</name><operator pos:start="12:40" pos:end="12:41">-&gt;</operator><name pos:start="12:42" pos:end="12:51">host_nodes</name></name></expr></argument>, <argument pos:start="12:54" pos:end="12:57"><expr pos:start="12:54" pos:end="12:57"><name pos:start="12:54" pos:end="12:57">NULL</name></expr></argument>, <argument pos:start="12:60" pos:end="12:63"><expr pos:start="12:60" pos:end="12:63"><name pos:start="12:60" pos:end="12:63">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="13:9" pos:end="13:55"><expr pos:start="13:9" pos:end="13:54"><call pos:start="13:9" pos:end="13:54"><name pos:start="13:9" pos:end="13:22">monitor_printf</name><argument_list pos:start="13:23" pos:end="13:54">(<argument pos:start="13:24" pos:end="13:26"><expr pos:start="13:24" pos:end="13:26"><name pos:start="13:24" pos:end="13:26">mon</name></expr></argument>, <argument pos:start="13:29" pos:end="13:50"><expr pos:start="13:29" pos:end="13:50"><literal type="string" pos:start="13:29" pos:end="13:50">"memory backend: %d\n"</literal></expr></argument>, <argument pos:start="13:53" pos:end="13:53"><expr pos:start="13:53" pos:end="13:53"><name pos:start="13:53" pos:end="13:53">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="14:9" pos:end="14:70"><expr pos:start="14:9" pos:end="14:69"><call pos:start="14:9" pos:end="14:69"><name pos:start="14:9" pos:end="14:22">monitor_printf</name><argument_list pos:start="14:23" pos:end="14:69">(<argument pos:start="14:24" pos:end="14:26"><expr pos:start="14:24" pos:end="14:26"><name pos:start="14:24" pos:end="14:26">mon</name></expr></argument>, <argument pos:start="14:29" pos:end="14:52"><expr pos:start="14:29" pos:end="14:52"><literal type="string" pos:start="14:29" pos:end="14:40">"  size:  %"</literal> <name pos:start="14:42" pos:end="14:47">PRId64</name> <literal type="string" pos:start="14:49" pos:end="14:52">"\n"</literal></expr></argument>, <argument pos:start="14:55" pos:end="14:68"><expr pos:start="14:55" pos:end="14:68"><name pos:start="14:55" pos:end="14:68"><name pos:start="14:55" pos:end="14:55">m</name><operator pos:start="14:56" pos:end="14:57">-&gt;</operator><name pos:start="14:58" pos:end="14:62">value</name><operator pos:start="14:63" pos:end="14:64">-&gt;</operator><name pos:start="14:65" pos:end="14:68">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="15:9" pos:end="16:59"><expr pos:start="15:9" pos:end="16:58"><call pos:start="15:9" pos:end="16:58"><name pos:start="15:9" pos:end="15:22">monitor_printf</name><argument_list pos:start="15:23" pos:end="16:58">(<argument pos:start="15:24" pos:end="15:26"><expr pos:start="15:24" pos:end="15:26"><name pos:start="15:24" pos:end="15:26">mon</name></expr></argument>, <argument pos:start="15:29" pos:end="15:43"><expr pos:start="15:29" pos:end="15:43"><literal type="string" pos:start="15:29" pos:end="15:43">"  merge: %s\n"</literal></expr></argument>,
                       <argument pos:start="16:24" pos:end="16:57"><expr pos:start="16:24" pos:end="16:57"><ternary pos:start="16:24" pos:end="16:57"><condition pos:start="16:24" pos:end="16:40"><expr pos:start="16:24" pos:end="16:38"><name pos:start="16:24" pos:end="16:38"><name pos:start="16:24" pos:end="16:24">m</name><operator pos:start="16:25" pos:end="16:26">-&gt;</operator><name pos:start="16:27" pos:end="16:31">value</name><operator pos:start="16:32" pos:end="16:33">-&gt;</operator><name pos:start="16:34" pos:end="16:38">merge</name></name></expr> ?</condition><then pos:start="16:42" pos:end="16:47"> <expr pos:start="16:42" pos:end="16:47"><literal type="string" pos:start="16:42" pos:end="16:47">"true"</literal></expr> </then><else pos:start="16:49" pos:end="16:57">: <expr pos:start="16:51" pos:end="16:57"><literal type="string" pos:start="16:51" pos:end="16:57">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="17:9" pos:end="18:58"><expr pos:start="17:9" pos:end="18:57"><call pos:start="17:9" pos:end="18:57"><name pos:start="17:9" pos:end="17:22">monitor_printf</name><argument_list pos:start="17:23" pos:end="18:57">(<argument pos:start="17:24" pos:end="17:26"><expr pos:start="17:24" pos:end="17:26"><name pos:start="17:24" pos:end="17:26">mon</name></expr></argument>, <argument pos:start="17:29" pos:end="17:42"><expr pos:start="17:29" pos:end="17:42"><literal type="string" pos:start="17:29" pos:end="17:42">"  dump: %s\n"</literal></expr></argument>,
                       <argument pos:start="18:24" pos:end="18:56"><expr pos:start="18:24" pos:end="18:56"><ternary pos:start="18:24" pos:end="18:56"><condition pos:start="18:24" pos:end="18:39"><expr pos:start="18:24" pos:end="18:37"><name pos:start="18:24" pos:end="18:37"><name pos:start="18:24" pos:end="18:24">m</name><operator pos:start="18:25" pos:end="18:26">-&gt;</operator><name pos:start="18:27" pos:end="18:31">value</name><operator pos:start="18:32" pos:end="18:33">-&gt;</operator><name pos:start="18:34" pos:end="18:37">dump</name></name></expr> ?</condition><then pos:start="18:41" pos:end="18:46"> <expr pos:start="18:41" pos:end="18:46"><literal type="string" pos:start="18:41" pos:end="18:46">"true"</literal></expr> </then><else pos:start="18:48" pos:end="18:56">: <expr pos:start="18:50" pos:end="18:56"><literal type="string" pos:start="18:50" pos:end="18:56">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="19:9" pos:end="20:62"><expr pos:start="19:9" pos:end="20:61"><call pos:start="19:9" pos:end="20:61"><name pos:start="19:9" pos:end="19:22">monitor_printf</name><argument_list pos:start="19:23" pos:end="20:61">(<argument pos:start="19:24" pos:end="19:26"><expr pos:start="19:24" pos:end="19:26"><name pos:start="19:24" pos:end="19:26">mon</name></expr></argument>, <argument pos:start="19:29" pos:end="19:46"><expr pos:start="19:29" pos:end="19:46"><literal type="string" pos:start="19:29" pos:end="19:46">"  prealloc: %s\n"</literal></expr></argument>,
                       <argument pos:start="20:24" pos:end="20:60"><expr pos:start="20:24" pos:end="20:60"><ternary pos:start="20:24" pos:end="20:60"><condition pos:start="20:24" pos:end="20:43"><expr pos:start="20:24" pos:end="20:41"><name pos:start="20:24" pos:end="20:41"><name pos:start="20:24" pos:end="20:24">m</name><operator pos:start="20:25" pos:end="20:26">-&gt;</operator><name pos:start="20:27" pos:end="20:31">value</name><operator pos:start="20:32" pos:end="20:33">-&gt;</operator><name pos:start="20:34" pos:end="20:41">prealloc</name></name></expr> ?</condition><then pos:start="20:45" pos:end="20:50"> <expr pos:start="20:45" pos:end="20:50"><literal type="string" pos:start="20:45" pos:end="20:50">"true"</literal></expr> </then><else pos:start="20:52" pos:end="20:60">: <expr pos:start="20:54" pos:end="20:60"><literal type="string" pos:start="20:54" pos:end="20:60">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="21:9" pos:end="22:63"><expr pos:start="21:9" pos:end="22:62"><call pos:start="21:9" pos:end="22:62"><name pos:start="21:9" pos:end="21:22">monitor_printf</name><argument_list pos:start="21:23" pos:end="22:62">(<argument pos:start="21:24" pos:end="21:26"><expr pos:start="21:24" pos:end="21:26"><name pos:start="21:24" pos:end="21:26">mon</name></expr></argument>, <argument pos:start="21:29" pos:end="21:44"><expr pos:start="21:29" pos:end="21:44"><literal type="string" pos:start="21:29" pos:end="21:44">"  policy: %s\n"</literal></expr></argument>,
                       <argument pos:start="22:24" pos:end="22:61"><expr pos:start="22:24" pos:end="22:61"><name pos:start="22:24" pos:end="22:61"><name pos:start="22:24" pos:end="22:43">HostMemPolicy_lookup</name><index pos:start="22:44" pos:end="22:61">[<expr pos:start="22:45" pos:end="22:60"><name pos:start="22:45" pos:end="22:60"><name pos:start="22:45" pos:end="22:45">m</name><operator pos:start="22:46" pos:end="22:47">-&gt;</operator><name pos:start="22:48" pos:end="22:52">value</name><operator pos:start="22:53" pos:end="22:54">-&gt;</operator><name pos:start="22:55" pos:end="22:60">policy</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="23:9" pos:end="23:43"><expr pos:start="23:9" pos:end="23:42"><name pos:start="23:9" pos:end="23:11">str</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:42"><name pos:start="23:15" pos:end="23:38">string_output_get_string</name><argument_list pos:start="23:39" pos:end="23:42">(<argument pos:start="23:40" pos:end="23:41"><expr pos:start="23:40" pos:end="23:41"><name pos:start="23:40" pos:end="23:41">ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="24:9" pos:end="24:55"><expr pos:start="24:9" pos:end="24:54"><call pos:start="24:9" pos:end="24:54"><name pos:start="24:9" pos:end="24:22">monitor_printf</name><argument_list pos:start="24:23" pos:end="24:54">(<argument pos:start="24:24" pos:end="24:26"><expr pos:start="24:24" pos:end="24:26"><name pos:start="24:24" pos:end="24:26">mon</name></expr></argument>, <argument pos:start="24:29" pos:end="24:48"><expr pos:start="24:29" pos:end="24:48"><literal type="string" pos:start="24:29" pos:end="24:48">"  host nodes: %s\n"</literal></expr></argument>, <argument pos:start="24:51" pos:end="24:53"><expr pos:start="24:51" pos:end="24:53"><name pos:start="24:51" pos:end="24:53">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="25:9" pos:end="25:20"><expr pos:start="25:9" pos:end="25:19"><call pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:14">g_free</name><argument_list pos:start="25:15" pos:end="25:19">(<argument pos:start="25:16" pos:end="25:18"><expr pos:start="25:16" pos:end="25:18"><name pos:start="25:16" pos:end="25:18">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:42"><expr pos:start="26:9" pos:end="26:41"><call pos:start="26:9" pos:end="26:41"><name pos:start="26:9" pos:end="26:37">string_output_visitor_cleanup</name><argument_list pos:start="26:38" pos:end="26:41">(<argument pos:start="26:39" pos:end="26:40"><expr pos:start="26:39" pos:end="26:40"><name pos:start="26:39" pos:end="26:40">ov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="27:9" pos:end="27:20"><expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:9">m</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:19"><name pos:start="27:13" pos:end="27:13">m</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:19">next</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="28:9" pos:end="28:12"><expr pos:start="28:9" pos:end="28:11"><name pos:start="28:9" pos:end="28:9">i</name><operator pos:start="28:10" pos:end="28:11">++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt pos:start="30:5" pos:end="30:30"><expr pos:start="30:5" pos:end="30:29"><call pos:start="30:5" pos:end="30:29"><name pos:start="30:5" pos:end="30:18">monitor_printf</name><argument_list pos:start="30:19" pos:end="30:29">(<argument pos:start="30:20" pos:end="30:22"><expr pos:start="30:20" pos:end="30:22"><name pos:start="30:20" pos:end="30:22">mon</name></expr></argument>, <argument pos:start="30:25" pos:end="30:28"><expr pos:start="30:25" pos:end="30:28"><literal type="string" pos:start="30:25" pos:end="30:28">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
