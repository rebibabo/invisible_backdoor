<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16079.c" pos:tabs="8"><function pos:start="1:1" pos:end="597:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">net_client_init</name><parameter_list pos:start="1:20" pos:end="1:68">(<parameter pos:start="1:21" pos:end="1:32"><decl pos:start="1:21" pos:end="1:32"><type pos:start="1:21" pos:end="1:32"><name pos:start="1:21" pos:end="1:27">Monitor</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">mon</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:52"><decl pos:start="1:35" pos:end="1:52"><type pos:start="1:35" pos:end="1:52"><specifier pos:start="1:35" pos:end="1:39">const</specifier> <name pos:start="1:41" pos:end="1:44">char</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:52">device</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:67"><decl pos:start="1:55" pos:end="1:67"><type pos:start="1:55" pos:end="1:67"><specifier pos:start="1:55" pos:end="1:59">const</specifier> <name pos:start="1:61" pos:end="1:64">char</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:67">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="597:1">{<block_content pos:start="5:5" pos:end="595:15">

    <decl_stmt pos:start="5:5" pos:end="9:6"><decl pos:start="5:5" pos:end="9:5"><type pos:start="5:5" pos:end="5:29"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:21">char</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier> <specifier pos:start="5:25" pos:end="5:29">const</specifier></type> <name pos:start="5:31" pos:end="5:41"><name pos:start="5:31" pos:end="5:39">fd_params</name><index pos:start="5:40" pos:end="5:41">[]</index></name> <init pos:start="5:43" pos:end="9:5">= <expr pos:start="5:45" pos:end="9:5"><block pos:start="5:45" pos:end="9:5">{

        <expr pos:start="7:9" pos:end="7:14"><literal type="string" pos:start="7:9" pos:end="7:14">"vlan"</literal></expr>, <expr pos:start="7:17" pos:end="7:22"><literal type="string" pos:start="7:17" pos:end="7:22">"name"</literal></expr>, <expr pos:start="7:25" pos:end="7:28"><literal type="string" pos:start="7:25" pos:end="7:28">"fd"</literal></expr>, <expr pos:start="7:31" pos:end="7:34"><name pos:start="7:31" pos:end="7:34">NULL</name></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:18"><name pos:start="11:10" pos:end="11:12">buf</name><index pos:start="11:13" pos:end="11:18">[<expr pos:start="11:14" pos:end="11:17"><literal type="number" pos:start="11:14" pos:end="11:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">vlan_id</name></decl>, <decl pos:start="13:18" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:20">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">VLANState</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:19">vlan</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:14">name</name> <init pos:start="17:16" pos:end="17:21">= <expr pos:start="17:18" pos:end="17:21"><name pos:start="17:18" pos:end="17:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:16"><expr pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:11">vlan_id</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:53">(<expr pos:start="23:9" pos:end="23:52"><call pos:start="23:9" pos:end="23:52"><name pos:start="23:9" pos:end="23:23">get_param_value</name><argument_list pos:start="23:24" pos:end="23:52">(<argument pos:start="23:25" pos:end="23:27"><expr pos:start="23:25" pos:end="23:27"><name pos:start="23:25" pos:end="23:27">buf</name></expr></argument>, <argument pos:start="23:30" pos:end="23:40"><expr pos:start="23:30" pos:end="23:40"><sizeof pos:start="23:30" pos:end="23:40">sizeof<argument_list pos:start="23:36" pos:end="23:40">(<argument pos:start="23:37" pos:end="23:39"><expr pos:start="23:37" pos:end="23:39"><name pos:start="23:37" pos:end="23:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="23:43" pos:end="23:48"><expr pos:start="23:43" pos:end="23:48"><literal type="string" pos:start="23:43" pos:end="23:48">"vlan"</literal></expr></argument>, <argument pos:start="23:51" pos:end="23:51"><expr pos:start="23:51" pos:end="23:51"><name pos:start="23:51" pos:end="23:51">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:55" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:39">

        <expr_stmt pos:start="25:9" pos:end="25:39"><expr pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:15">vlan_id</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:38"><name pos:start="25:19" pos:end="25:24">strtol</name><argument_list pos:start="25:25" pos:end="25:38">(<argument pos:start="25:26" pos:end="25:28"><expr pos:start="25:26" pos:end="25:28"><name pos:start="25:26" pos:end="25:28">buf</name></expr></argument>, <argument pos:start="25:31" pos:end="25:34"><expr pos:start="25:31" pos:end="25:34"><name pos:start="25:31" pos:end="25:34">NULL</name></expr></argument>, <argument pos:start="25:37" pos:end="25:37"><expr pos:start="25:37" pos:end="25:37"><literal type="number" pos:start="25:37" pos:end="25:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:8">vlan</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:34"><name pos:start="29:12" pos:end="29:25">qemu_find_vlan</name><argument_list pos:start="29:26" pos:end="29:34">(<argument pos:start="29:27" pos:end="29:33"><expr pos:start="29:27" pos:end="29:33"><name pos:start="29:27" pos:end="29:33">vlan_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:53">(<expr pos:start="33:9" pos:end="33:52"><call pos:start="33:9" pos:end="33:52"><name pos:start="33:9" pos:end="33:23">get_param_value</name><argument_list pos:start="33:24" pos:end="33:52">(<argument pos:start="33:25" pos:end="33:27"><expr pos:start="33:25" pos:end="33:27"><name pos:start="33:25" pos:end="33:27">buf</name></expr></argument>, <argument pos:start="33:30" pos:end="33:40"><expr pos:start="33:30" pos:end="33:40"><sizeof pos:start="33:30" pos:end="33:40">sizeof<argument_list pos:start="33:36" pos:end="33:40">(<argument pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><name pos:start="33:37" pos:end="33:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="33:43" pos:end="33:48"><expr pos:start="33:43" pos:end="33:48"><literal type="string" pos:start="33:43" pos:end="33:48">"name"</literal></expr></argument>, <argument pos:start="33:51" pos:end="33:51"><expr pos:start="33:51" pos:end="33:51"><name pos:start="33:51" pos:end="33:51">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:55" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:32">

        <expr_stmt pos:start="35:9" pos:end="35:32"><expr pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:12">name</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:31"><name pos:start="35:16" pos:end="35:26">qemu_strdup</name><argument_list pos:start="35:27" pos:end="35:31">(<argument pos:start="35:28" pos:end="35:30"><expr pos:start="35:28" pos:end="35:30"><name pos:start="35:28" pos:end="35:30">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="583:5"><if pos:start="39:5" pos:end="133:5">if <condition pos:start="39:8" pos:end="39:31">(<expr pos:start="39:9" pos:end="39:30"><operator pos:start="39:9" pos:end="39:9">!</operator><call pos:start="39:10" pos:end="39:30"><name pos:start="39:10" pos:end="39:15">strcmp</name><argument_list pos:start="39:16" pos:end="39:30">(<argument pos:start="39:17" pos:end="39:22"><expr pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:22">device</name></expr></argument>, <argument pos:start="39:25" pos:end="39:29"><expr pos:start="39:25" pos:end="39:29"><literal type="string" pos:start="39:25" pos:end="39:29">"nic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:33" pos:end="133:5">{<block_content pos:start="41:9" pos:end="131:18">

        <decl_stmt pos:start="41:9" pos:end="45:10"><decl pos:start="41:9" pos:end="45:9"><type pos:start="41:9" pos:end="41:33"><specifier pos:start="41:9" pos:end="41:14">static</specifier> <specifier pos:start="41:16" pos:end="41:20">const</specifier> <name pos:start="41:22" pos:end="41:25">char</name> <modifier pos:start="41:27" pos:end="41:27">*</modifier> <specifier pos:start="41:29" pos:end="41:33">const</specifier></type> <name pos:start="41:35" pos:end="41:46"><name pos:start="41:35" pos:end="41:44">nic_params</name><index pos:start="41:45" pos:end="41:46">[]</index></name> <init pos:start="41:48" pos:end="45:9">= <expr pos:start="41:50" pos:end="45:9"><block pos:start="41:50" pos:end="45:9">{

            <expr pos:start="43:13" pos:end="43:18"><literal type="string" pos:start="43:13" pos:end="43:18">"vlan"</literal></expr>, <expr pos:start="43:21" pos:end="43:26"><literal type="string" pos:start="43:21" pos:end="43:26">"name"</literal></expr>, <expr pos:start="43:29" pos:end="43:37"><literal type="string" pos:start="43:29" pos:end="43:37">"macaddr"</literal></expr>, <expr pos:start="43:40" pos:end="43:46"><literal type="string" pos:start="43:40" pos:end="43:46">"model"</literal></expr>, <expr pos:start="43:49" pos:end="43:54"><literal type="string" pos:start="43:49" pos:end="43:54">"addr"</literal></expr>, <expr pos:start="43:57" pos:end="43:60"><name pos:start="43:57" pos:end="43:60">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:20"><decl pos:start="47:9" pos:end="47:19"><type pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:15">NICInfo</name> <modifier pos:start="47:17" pos:end="47:17">*</modifier></type><name pos:start="47:18" pos:end="47:19">nd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:25"><decl pos:start="49:9" pos:end="49:24"><type pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:15">uint8_t</name> <modifier pos:start="49:17" pos:end="49:17">*</modifier></type><name pos:start="49:18" pos:end="49:24">macaddr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:37"><decl pos:start="51:9" pos:end="51:36"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:15">idx</name> <init pos:start="51:17" pos:end="51:36">= <expr pos:start="51:19" pos:end="51:36"><call pos:start="51:19" pos:end="51:36"><name pos:start="51:19" pos:end="51:34">nic_get_free_idx</name><argument_list pos:start="51:35" pos:end="51:36">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="55:9" pos:end="63:9"><if pos:start="55:9" pos:end="63:9">if <condition pos:start="55:12" pos:end="55:62">(<expr pos:start="55:13" pos:end="55:61"><call pos:start="55:13" pos:end="55:57"><name pos:start="55:13" pos:end="55:24">check_params</name><argument_list pos:start="55:25" pos:end="55:57">(<argument pos:start="55:26" pos:end="55:28"><expr pos:start="55:26" pos:end="55:28"><name pos:start="55:26" pos:end="55:28">buf</name></expr></argument>, <argument pos:start="55:31" pos:end="55:41"><expr pos:start="55:31" pos:end="55:41"><sizeof pos:start="55:31" pos:end="55:41">sizeof<argument_list pos:start="55:37" pos:end="55:41">(<argument pos:start="55:38" pos:end="55:40"><expr pos:start="55:38" pos:end="55:40"><name pos:start="55:38" pos:end="55:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="55:44" pos:end="55:53"><expr pos:start="55:44" pos:end="55:53"><name pos:start="55:44" pos:end="55:53">nic_params</name></expr></argument>, <argument pos:start="55:56" pos:end="55:56"><expr pos:start="55:56" pos:end="55:56"><name pos:start="55:56" pos:end="55:56">p</name></expr></argument>)</argument_list></call> <operator pos:start="55:59" pos:end="55:59">&lt;</operator> <literal type="number" pos:start="55:61" pos:end="55:61">0</literal></expr>)</condition> <block pos:start="55:64" pos:end="63:9">{<block_content pos:start="57:13" pos:end="61:21">

            <expr_stmt pos:start="57:13" pos:end="57:74"><expr pos:start="57:13" pos:end="57:73"><call pos:start="57:13" pos:end="57:73"><name pos:start="57:13" pos:end="57:24">config_error</name><argument_list pos:start="57:25" pos:end="57:73">(<argument pos:start="57:26" pos:end="57:28"><expr pos:start="57:26" pos:end="57:28"><name pos:start="57:26" pos:end="57:28">mon</name></expr></argument>, <argument pos:start="57:31" pos:end="57:64"><expr pos:start="57:31" pos:end="57:64"><literal type="string" pos:start="57:31" pos:end="57:64">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="57:67" pos:end="57:69"><expr pos:start="57:67" pos:end="57:69"><name pos:start="57:67" pos:end="57:69">buf</name></expr></argument>, <argument pos:start="57:72" pos:end="57:72"><expr pos:start="57:72" pos:end="57:72"><name pos:start="57:72" pos:end="57:72">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:21"><expr pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:15">ret</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <operator pos:start="59:19" pos:end="59:19">-</operator><literal type="number" pos:start="59:20" pos:end="59:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="61:13" pos:end="61:21">goto <name pos:start="61:18" pos:end="61:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="65:9" pos:end="73:9"><if pos:start="65:9" pos:end="73:9">if <condition pos:start="65:12" pos:end="65:45">(<expr pos:start="65:13" pos:end="65:44"><name pos:start="65:13" pos:end="65:15">idx</name> <operator pos:start="65:17" pos:end="65:18">==</operator> <operator pos:start="65:20" pos:end="65:20">-</operator><literal type="number" pos:start="65:21" pos:end="65:21">1</literal> <operator pos:start="65:23" pos:end="65:24">||</operator> <name pos:start="65:26" pos:end="65:32">nb_nics</name> <operator pos:start="65:34" pos:end="65:35">&gt;=</operator> <name pos:start="65:37" pos:end="65:44">MAX_NICS</name></expr>)</condition> <block pos:start="65:47" pos:end="73:9">{<block_content pos:start="67:13" pos:end="71:21">

            <expr_stmt pos:start="67:13" pos:end="67:49"><expr pos:start="67:13" pos:end="67:48"><call pos:start="67:13" pos:end="67:48"><name pos:start="67:13" pos:end="67:24">config_error</name><argument_list pos:start="67:25" pos:end="67:48">(<argument pos:start="67:26" pos:end="67:28"><expr pos:start="67:26" pos:end="67:28"><name pos:start="67:26" pos:end="67:28">mon</name></expr></argument>, <argument pos:start="67:31" pos:end="67:47"><expr pos:start="67:31" pos:end="67:47"><literal type="string" pos:start="67:31" pos:end="67:47">"Too Many NICs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:21"><expr pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:15">ret</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <operator pos:start="69:19" pos:end="69:19">-</operator><literal type="number" pos:start="69:20" pos:end="69:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="71:13" pos:end="71:21">goto <name pos:start="71:18" pos:end="71:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:28"><expr pos:start="75:9" pos:end="75:27"><name pos:start="75:9" pos:end="75:10">nd</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <operator pos:start="75:14" pos:end="75:14">&amp;</operator><name pos:start="75:15" pos:end="75:27"><name pos:start="75:15" pos:end="75:22">nd_table</name><index pos:start="75:23" pos:end="75:27">[<expr pos:start="75:24" pos:end="75:26"><name pos:start="75:24" pos:end="75:26">idx</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:30"><expr pos:start="77:9" pos:end="77:29"><name pos:start="77:9" pos:end="77:15">macaddr</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:29"><name pos:start="77:19" pos:end="77:20">nd</name><operator pos:start="77:21" pos:end="77:22">-&gt;</operator><name pos:start="77:23" pos:end="77:29">macaddr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:26"><expr pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:15">macaddr</name><index pos:start="79:16" pos:end="79:18">[<expr pos:start="79:17" pos:end="79:17"><literal type="number" pos:start="79:17" pos:end="79:17">0</literal></expr>]</index></name> <operator pos:start="79:20" pos:end="79:20">=</operator> <literal type="number" pos:start="79:22" pos:end="79:25">0x52</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:15">macaddr</name><index pos:start="81:16" pos:end="81:18">[<expr pos:start="81:17" pos:end="81:17"><literal type="number" pos:start="81:17" pos:end="81:17">1</literal></expr>]</index></name> <operator pos:start="81:20" pos:end="81:20">=</operator> <literal type="number" pos:start="81:22" pos:end="81:25">0x54</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:26"><expr pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:15">macaddr</name><index pos:start="83:16" pos:end="83:18">[<expr pos:start="83:17" pos:end="83:17"><literal type="number" pos:start="83:17" pos:end="83:17">2</literal></expr>]</index></name> <operator pos:start="83:20" pos:end="83:20">=</operator> <literal type="number" pos:start="83:22" pos:end="83:25">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:26"><expr pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:18"><name pos:start="85:9" pos:end="85:15">macaddr</name><index pos:start="85:16" pos:end="85:18">[<expr pos:start="85:17" pos:end="85:17"><literal type="number" pos:start="85:17" pos:end="85:17">3</literal></expr>]</index></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <literal type="number" pos:start="85:22" pos:end="85:25">0x12</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:26"><expr pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:15">macaddr</name><index pos:start="87:16" pos:end="87:18">[<expr pos:start="87:17" pos:end="87:17"><literal type="number" pos:start="87:17" pos:end="87:17">4</literal></expr>]</index></name> <operator pos:start="87:20" pos:end="87:20">=</operator> <literal type="number" pos:start="87:22" pos:end="87:25">0x34</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:32"><expr pos:start="89:9" pos:end="89:31"><name pos:start="89:9" pos:end="89:18"><name pos:start="89:9" pos:end="89:15">macaddr</name><index pos:start="89:16" pos:end="89:18">[<expr pos:start="89:17" pos:end="89:17"><literal type="number" pos:start="89:17" pos:end="89:17">5</literal></expr>]</index></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <literal type="number" pos:start="89:22" pos:end="89:27">0x56</literal> <operator pos:start="89:27" pos:end="89:27">+</operator> <name pos:start="89:29" pos:end="89:31">idx</name></expr>;</expr_stmt>



        <if_stmt pos:start="93:9" pos:end="105:9"><if pos:start="93:9" pos:end="105:9">if <condition pos:start="93:12" pos:end="93:60">(<expr pos:start="93:13" pos:end="93:59"><call pos:start="93:13" pos:end="93:59"><name pos:start="93:13" pos:end="93:27">get_param_value</name><argument_list pos:start="93:28" pos:end="93:59">(<argument pos:start="93:29" pos:end="93:31"><expr pos:start="93:29" pos:end="93:31"><name pos:start="93:29" pos:end="93:31">buf</name></expr></argument>, <argument pos:start="93:34" pos:end="93:44"><expr pos:start="93:34" pos:end="93:44"><sizeof pos:start="93:34" pos:end="93:44">sizeof<argument_list pos:start="93:40" pos:end="93:44">(<argument pos:start="93:41" pos:end="93:43"><expr pos:start="93:41" pos:end="93:43"><name pos:start="93:41" pos:end="93:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="93:47" pos:end="93:55"><expr pos:start="93:47" pos:end="93:55"><literal type="string" pos:start="93:47" pos:end="93:55">"macaddr"</literal></expr></argument>, <argument pos:start="93:58" pos:end="93:58"><expr pos:start="93:58" pos:end="93:58"><name pos:start="93:58" pos:end="93:58">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:62" pos:end="105:9">{<block_content pos:start="95:13" pos:end="103:13">

            <if_stmt pos:start="95:13" pos:end="103:13"><if pos:start="95:13" pos:end="103:13">if <condition pos:start="95:16" pos:end="95:48">(<expr pos:start="95:17" pos:end="95:47"><call pos:start="95:17" pos:end="95:43"><name pos:start="95:17" pos:end="95:29">parse_macaddr</name><argument_list pos:start="95:30" pos:end="95:43">(<argument pos:start="95:31" pos:end="95:37"><expr pos:start="95:31" pos:end="95:37"><name pos:start="95:31" pos:end="95:37">macaddr</name></expr></argument>, <argument pos:start="95:40" pos:end="95:42"><expr pos:start="95:40" pos:end="95:42"><name pos:start="95:40" pos:end="95:42">buf</name></expr></argument>)</argument_list></call> <operator pos:start="95:45" pos:end="95:45">&lt;</operator> <literal type="number" pos:start="95:47" pos:end="95:47">0</literal></expr>)</condition> <block pos:start="95:50" pos:end="103:13">{<block_content pos:start="97:17" pos:end="101:25">

                <expr_stmt pos:start="97:17" pos:end="97:75"><expr pos:start="97:17" pos:end="97:74"><call pos:start="97:17" pos:end="97:74"><name pos:start="97:17" pos:end="97:28">config_error</name><argument_list pos:start="97:29" pos:end="97:74">(<argument pos:start="97:30" pos:end="97:32"><expr pos:start="97:30" pos:end="97:32"><name pos:start="97:30" pos:end="97:32">mon</name></expr></argument>, <argument pos:start="97:35" pos:end="97:73"><expr pos:start="97:35" pos:end="97:73"><literal type="string" pos:start="97:35" pos:end="97:73">"invalid syntax for ethernet address\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:25"><expr pos:start="99:17" pos:end="99:24"><name pos:start="99:17" pos:end="99:19">ret</name> <operator pos:start="99:21" pos:end="99:21">=</operator> <operator pos:start="99:23" pos:end="99:23">-</operator><literal type="number" pos:start="99:24" pos:end="99:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="101:17" pos:end="101:25">goto <name pos:start="101:22" pos:end="101:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="107:9" pos:end="111:9"><if pos:start="107:9" pos:end="111:9">if <condition pos:start="107:12" pos:end="107:58">(<expr pos:start="107:13" pos:end="107:57"><call pos:start="107:13" pos:end="107:57"><name pos:start="107:13" pos:end="107:27">get_param_value</name><argument_list pos:start="107:28" pos:end="107:57">(<argument pos:start="107:29" pos:end="107:31"><expr pos:start="107:29" pos:end="107:31"><name pos:start="107:29" pos:end="107:31">buf</name></expr></argument>, <argument pos:start="107:34" pos:end="107:44"><expr pos:start="107:34" pos:end="107:44"><sizeof pos:start="107:34" pos:end="107:44">sizeof<argument_list pos:start="107:40" pos:end="107:44">(<argument pos:start="107:41" pos:end="107:43"><expr pos:start="107:41" pos:end="107:43"><name pos:start="107:41" pos:end="107:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="107:47" pos:end="107:53"><expr pos:start="107:47" pos:end="107:53"><literal type="string" pos:start="107:47" pos:end="107:53">"model"</literal></expr></argument>, <argument pos:start="107:56" pos:end="107:56"><expr pos:start="107:56" pos:end="107:56"><name pos:start="107:56" pos:end="107:56">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:60" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:36">

            <expr_stmt pos:start="109:13" pos:end="109:36"><expr pos:start="109:13" pos:end="109:35"><name pos:start="109:13" pos:end="109:21"><name pos:start="109:13" pos:end="109:14">nd</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:21">model</name></name> <operator pos:start="109:23" pos:end="109:23">=</operator> <call pos:start="109:25" pos:end="109:35"><name pos:start="109:25" pos:end="109:30">strdup</name><argument_list pos:start="109:31" pos:end="109:35">(<argument pos:start="109:32" pos:end="109:34"><expr pos:start="109:32" pos:end="109:34"><name pos:start="109:32" pos:end="109:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="113:9" pos:end="117:9"><if pos:start="113:9" pos:end="117:9">if <condition pos:start="113:12" pos:end="113:57">(<expr pos:start="113:13" pos:end="113:56"><call pos:start="113:13" pos:end="113:56"><name pos:start="113:13" pos:end="113:27">get_param_value</name><argument_list pos:start="113:28" pos:end="113:56">(<argument pos:start="113:29" pos:end="113:31"><expr pos:start="113:29" pos:end="113:31"><name pos:start="113:29" pos:end="113:31">buf</name></expr></argument>, <argument pos:start="113:34" pos:end="113:44"><expr pos:start="113:34" pos:end="113:44"><sizeof pos:start="113:34" pos:end="113:44">sizeof<argument_list pos:start="113:40" pos:end="113:44">(<argument pos:start="113:41" pos:end="113:43"><expr pos:start="113:41" pos:end="113:43"><name pos:start="113:41" pos:end="113:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="113:47" pos:end="113:52"><expr pos:start="113:47" pos:end="113:52"><literal type="string" pos:start="113:47" pos:end="113:52">"addr"</literal></expr></argument>, <argument pos:start="113:55" pos:end="113:55"><expr pos:start="113:55" pos:end="113:55"><name pos:start="113:55" pos:end="113:55">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:59" pos:end="117:9">{<block_content pos:start="115:13" pos:end="115:38">

            <expr_stmt pos:start="115:13" pos:end="115:38"><expr pos:start="115:13" pos:end="115:37"><name pos:start="115:13" pos:end="115:23"><name pos:start="115:13" pos:end="115:14">nd</name><operator pos:start="115:15" pos:end="115:16">-&gt;</operator><name pos:start="115:17" pos:end="115:23">devaddr</name></name> <operator pos:start="115:25" pos:end="115:25">=</operator> <call pos:start="115:27" pos:end="115:37"><name pos:start="115:27" pos:end="115:32">strdup</name><argument_list pos:start="115:33" pos:end="115:37">(<argument pos:start="115:34" pos:end="115:36"><expr pos:start="115:34" pos:end="115:36"><name pos:start="115:34" pos:end="115:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:24"><expr pos:start="119:9" pos:end="119:23"><name pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:10">nd</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:16">vlan</name></name> <operator pos:start="119:18" pos:end="119:18">=</operator> <name pos:start="119:20" pos:end="119:23">vlan</name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:24"><expr pos:start="121:9" pos:end="121:23"><name pos:start="121:9" pos:end="121:16"><name pos:start="121:9" pos:end="121:10">nd</name><operator pos:start="121:11" pos:end="121:12">-&gt;</operator><name pos:start="121:13" pos:end="121:16">name</name></name> <operator pos:start="121:18" pos:end="121:18">=</operator> <name pos:start="121:20" pos:end="121:23">name</name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:21"><expr pos:start="123:9" pos:end="123:20"><name pos:start="123:9" pos:end="123:16"><name pos:start="123:9" pos:end="123:10">nd</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:16">used</name></name> <operator pos:start="123:18" pos:end="123:18">=</operator> <literal type="number" pos:start="123:20" pos:end="123:20">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:20"><expr pos:start="125:9" pos:end="125:19"><name pos:start="125:9" pos:end="125:12">name</name> <operator pos:start="125:14" pos:end="125:14">=</operator> <name pos:start="125:16" pos:end="125:19">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:18"><expr pos:start="127:9" pos:end="127:17"><name pos:start="127:9" pos:end="127:15">nb_nics</name><operator pos:start="127:16" pos:end="127:17">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:30"><expr pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:27"><name pos:start="129:9" pos:end="129:12">vlan</name><operator pos:start="129:13" pos:end="129:14">-&gt;</operator><name pos:start="129:15" pos:end="129:27">nb_guest_devs</name></name><operator pos:start="129:28" pos:end="129:29">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:18"><expr pos:start="131:9" pos:end="131:17"><name pos:start="131:9" pos:end="131:11">ret</name> <operator pos:start="131:13" pos:end="131:13">=</operator> <name pos:start="131:15" pos:end="131:17">idx</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="133:7" pos:end="153:5">else

    if <condition pos:start="135:8" pos:end="135:32">(<expr pos:start="135:9" pos:end="135:31"><operator pos:start="135:9" pos:end="135:9">!</operator><call pos:start="135:10" pos:end="135:31"><name pos:start="135:10" pos:end="135:15">strcmp</name><argument_list pos:start="135:16" pos:end="135:31">(<argument pos:start="135:17" pos:end="135:22"><expr pos:start="135:17" pos:end="135:22"><name pos:start="135:17" pos:end="135:22">device</name></expr></argument>, <argument pos:start="135:25" pos:end="135:30"><expr pos:start="135:25" pos:end="135:30"><literal type="string" pos:start="135:25" pos:end="135:30">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:34" pos:end="153:5">{<block_content pos:start="137:9" pos:end="151:16">

        <if_stmt pos:start="137:9" pos:end="145:9"><if pos:start="137:9" pos:end="145:9">if <condition pos:start="137:12" pos:end="137:23">(<expr pos:start="137:13" pos:end="137:22"><operator pos:start="137:13" pos:end="137:13">*</operator><name pos:start="137:14" pos:end="137:14">p</name> <operator pos:start="137:16" pos:end="137:17">!=</operator> <literal type="char" pos:start="137:19" pos:end="137:22">'\0'</literal></expr>)</condition> <block pos:start="137:25" pos:end="145:9">{<block_content pos:start="139:13" pos:end="143:21">

            <expr_stmt pos:start="139:13" pos:end="139:62"><expr pos:start="139:13" pos:end="139:61"><call pos:start="139:13" pos:end="139:61"><name pos:start="139:13" pos:end="139:24">config_error</name><argument_list pos:start="139:25" pos:end="139:61">(<argument pos:start="139:26" pos:end="139:28"><expr pos:start="139:26" pos:end="139:28"><name pos:start="139:26" pos:end="139:28">mon</name></expr></argument>, <argument pos:start="139:31" pos:end="139:60"><expr pos:start="139:31" pos:end="139:60"><literal type="string" pos:start="139:31" pos:end="139:60">"'none' takes no parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:21"><expr pos:start="141:13" pos:end="141:20"><name pos:start="141:13" pos:end="141:15">ret</name> <operator pos:start="141:17" pos:end="141:17">=</operator> <operator pos:start="141:19" pos:end="141:19">-</operator><literal type="number" pos:start="141:20" pos:end="141:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="143:13" pos:end="143:21">goto <name pos:start="143:18" pos:end="143:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="147:9" pos:end="149:24">/* does nothing. It is needed to signal that no network cards

           are wanted */</comment>

        <expr_stmt pos:start="151:9" pos:end="151:16"><expr pos:start="151:9" pos:end="151:15"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:13">=</operator> <literal type="number" pos:start="151:15" pos:end="151:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="153:7" pos:end="205:5">else

<cpp:ifdef pos:start="155:1" pos:end="155:19">#<cpp:directive pos:start="155:2" pos:end="155:6">ifdef</cpp:directive> <name pos:start="155:8" pos:end="155:19">CONFIG_SLIRP</name></cpp:ifdef>

    if <condition pos:start="157:8" pos:end="157:32">(<expr pos:start="157:9" pos:end="157:31"><operator pos:start="157:9" pos:end="157:9">!</operator><call pos:start="157:10" pos:end="157:31"><name pos:start="157:10" pos:end="157:15">strcmp</name><argument_list pos:start="157:16" pos:end="157:31">(<argument pos:start="157:17" pos:end="157:22"><expr pos:start="157:17" pos:end="157:22"><name pos:start="157:17" pos:end="157:22">device</name></expr></argument>, <argument pos:start="157:25" pos:end="157:30"><expr pos:start="157:25" pos:end="157:30"><literal type="string" pos:start="157:25" pos:end="157:30">"user"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="157:34" pos:end="205:5">{<block_content pos:start="159:9" pos:end="203:22">

        <decl_stmt pos:start="159:9" pos:end="163:10"><decl pos:start="159:9" pos:end="163:9"><type pos:start="159:9" pos:end="159:33"><specifier pos:start="159:9" pos:end="159:14">static</specifier> <specifier pos:start="159:16" pos:end="159:20">const</specifier> <name pos:start="159:22" pos:end="159:25">char</name> <modifier pos:start="159:27" pos:end="159:27">*</modifier> <specifier pos:start="159:29" pos:end="159:33">const</specifier></type> <name pos:start="159:35" pos:end="159:48"><name pos:start="159:35" pos:end="159:46">slirp_params</name><index pos:start="159:47" pos:end="159:48">[]</index></name> <init pos:start="159:50" pos:end="163:9">= <expr pos:start="159:52" pos:end="163:9"><block pos:start="159:52" pos:end="163:9">{

            <expr pos:start="161:13" pos:end="161:18"><literal type="string" pos:start="161:13" pos:end="161:18">"vlan"</literal></expr>, <expr pos:start="161:21" pos:end="161:26"><literal type="string" pos:start="161:21" pos:end="161:26">"name"</literal></expr>, <expr pos:start="161:29" pos:end="161:38"><literal type="string" pos:start="161:29" pos:end="161:38">"hostname"</literal></expr>, <expr pos:start="161:41" pos:end="161:50"><literal type="string" pos:start="161:41" pos:end="161:50">"restrict"</literal></expr>, <expr pos:start="161:53" pos:end="161:56"><literal type="string" pos:start="161:53" pos:end="161:56">"ip"</literal></expr>, <expr pos:start="161:59" pos:end="161:62"><name pos:start="161:59" pos:end="161:62">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="165:9" pos:end="165:27"><decl pos:start="165:9" pos:end="165:26"><type pos:start="165:9" pos:end="165:11"><name pos:start="165:9" pos:end="165:11">int</name></type> <name pos:start="165:13" pos:end="165:22">restricted</name> <init pos:start="165:24" pos:end="165:26">= <expr pos:start="165:26" pos:end="165:26"><literal type="number" pos:start="165:26" pos:end="165:26">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="167:9" pos:end="167:24"><decl pos:start="167:9" pos:end="167:23"><type pos:start="167:9" pos:end="167:14"><name pos:start="167:9" pos:end="167:12">char</name> <modifier pos:start="167:14" pos:end="167:14">*</modifier></type><name pos:start="167:15" pos:end="167:16">ip</name> <init pos:start="167:18" pos:end="167:23">= <expr pos:start="167:20" pos:end="167:23"><name pos:start="167:20" pos:end="167:23">NULL</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="171:9" pos:end="179:9"><if pos:start="171:9" pos:end="179:9">if <condition pos:start="171:12" pos:end="171:64">(<expr pos:start="171:13" pos:end="171:63"><call pos:start="171:13" pos:end="171:59"><name pos:start="171:13" pos:end="171:24">check_params</name><argument_list pos:start="171:25" pos:end="171:59">(<argument pos:start="171:26" pos:end="171:28"><expr pos:start="171:26" pos:end="171:28"><name pos:start="171:26" pos:end="171:28">buf</name></expr></argument>, <argument pos:start="171:31" pos:end="171:41"><expr pos:start="171:31" pos:end="171:41"><sizeof pos:start="171:31" pos:end="171:41">sizeof<argument_list pos:start="171:37" pos:end="171:41">(<argument pos:start="171:38" pos:end="171:40"><expr pos:start="171:38" pos:end="171:40"><name pos:start="171:38" pos:end="171:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="171:44" pos:end="171:55"><expr pos:start="171:44" pos:end="171:55"><name pos:start="171:44" pos:end="171:55">slirp_params</name></expr></argument>, <argument pos:start="171:58" pos:end="171:58"><expr pos:start="171:58" pos:end="171:58"><name pos:start="171:58" pos:end="171:58">p</name></expr></argument>)</argument_list></call> <operator pos:start="171:61" pos:end="171:61">&lt;</operator> <literal type="number" pos:start="171:63" pos:end="171:63">0</literal></expr>)</condition> <block pos:start="171:66" pos:end="179:9">{<block_content pos:start="173:13" pos:end="177:21">

            <expr_stmt pos:start="173:13" pos:end="173:74"><expr pos:start="173:13" pos:end="173:73"><call pos:start="173:13" pos:end="173:73"><name pos:start="173:13" pos:end="173:24">config_error</name><argument_list pos:start="173:25" pos:end="173:73">(<argument pos:start="173:26" pos:end="173:28"><expr pos:start="173:26" pos:end="173:28"><name pos:start="173:26" pos:end="173:28">mon</name></expr></argument>, <argument pos:start="173:31" pos:end="173:64"><expr pos:start="173:31" pos:end="173:64"><literal type="string" pos:start="173:31" pos:end="173:64">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="173:67" pos:end="173:69"><expr pos:start="173:67" pos:end="173:69"><name pos:start="173:67" pos:end="173:69">buf</name></expr></argument>, <argument pos:start="173:72" pos:end="173:72"><expr pos:start="173:72" pos:end="173:72"><name pos:start="173:72" pos:end="173:72">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:21"><expr pos:start="175:13" pos:end="175:20"><name pos:start="175:13" pos:end="175:15">ret</name> <operator pos:start="175:17" pos:end="175:17">=</operator> <operator pos:start="175:19" pos:end="175:19">-</operator><literal type="number" pos:start="175:20" pos:end="175:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="177:13" pos:end="177:21">goto <name pos:start="177:18" pos:end="177:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="181:9" pos:end="185:9"><if pos:start="181:9" pos:end="185:9">if <condition pos:start="181:12" pos:end="181:61">(<expr pos:start="181:13" pos:end="181:60"><call pos:start="181:13" pos:end="181:60"><name pos:start="181:13" pos:end="181:27">get_param_value</name><argument_list pos:start="181:28" pos:end="181:60">(<argument pos:start="181:29" pos:end="181:31"><expr pos:start="181:29" pos:end="181:31"><name pos:start="181:29" pos:end="181:31">buf</name></expr></argument>, <argument pos:start="181:34" pos:end="181:44"><expr pos:start="181:34" pos:end="181:44"><sizeof pos:start="181:34" pos:end="181:44">sizeof<argument_list pos:start="181:40" pos:end="181:44">(<argument pos:start="181:41" pos:end="181:43"><expr pos:start="181:41" pos:end="181:43"><name pos:start="181:41" pos:end="181:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="181:47" pos:end="181:56"><expr pos:start="181:47" pos:end="181:56"><literal type="string" pos:start="181:47" pos:end="181:56">"hostname"</literal></expr></argument>, <argument pos:start="181:59" pos:end="181:59"><expr pos:start="181:59" pos:end="181:59"><name pos:start="181:59" pos:end="181:59">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="181:63" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:65">

            <expr_stmt pos:start="183:13" pos:end="183:65"><expr pos:start="183:13" pos:end="183:64"><call pos:start="183:13" pos:end="183:64"><name pos:start="183:13" pos:end="183:19">pstrcpy</name><argument_list pos:start="183:20" pos:end="183:64">(<argument pos:start="183:21" pos:end="183:34"><expr pos:start="183:21" pos:end="183:34"><name pos:start="183:21" pos:end="183:34">slirp_hostname</name></expr></argument>, <argument pos:start="183:37" pos:end="183:58"><expr pos:start="183:37" pos:end="183:58"><sizeof pos:start="183:37" pos:end="183:58">sizeof<argument_list pos:start="183:43" pos:end="183:58">(<argument pos:start="183:44" pos:end="183:57"><expr pos:start="183:44" pos:end="183:57"><name pos:start="183:44" pos:end="183:57">slirp_hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="183:61" pos:end="183:63"><expr pos:start="183:61" pos:end="183:63"><name pos:start="183:61" pos:end="183:63">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="187:9" pos:end="191:9"><if pos:start="187:9" pos:end="191:9">if <condition pos:start="187:12" pos:end="187:61">(<expr pos:start="187:13" pos:end="187:60"><call pos:start="187:13" pos:end="187:60"><name pos:start="187:13" pos:end="187:27">get_param_value</name><argument_list pos:start="187:28" pos:end="187:60">(<argument pos:start="187:29" pos:end="187:31"><expr pos:start="187:29" pos:end="187:31"><name pos:start="187:29" pos:end="187:31">buf</name></expr></argument>, <argument pos:start="187:34" pos:end="187:44"><expr pos:start="187:34" pos:end="187:44"><sizeof pos:start="187:34" pos:end="187:44">sizeof<argument_list pos:start="187:40" pos:end="187:44">(<argument pos:start="187:41" pos:end="187:43"><expr pos:start="187:41" pos:end="187:43"><name pos:start="187:41" pos:end="187:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="187:47" pos:end="187:56"><expr pos:start="187:47" pos:end="187:56"><literal type="string" pos:start="187:47" pos:end="187:56">"restrict"</literal></expr></argument>, <argument pos:start="187:59" pos:end="187:59"><expr pos:start="187:59" pos:end="187:59"><name pos:start="187:59" pos:end="187:59">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="187:63" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:49">

            <expr_stmt pos:start="189:13" pos:end="189:49"><expr pos:start="189:13" pos:end="189:48"><name pos:start="189:13" pos:end="189:22">restricted</name> <operator pos:start="189:24" pos:end="189:24">=</operator> <ternary pos:start="189:26" pos:end="189:48"><condition pos:start="189:26" pos:end="189:42"><expr pos:start="189:26" pos:end="189:40"><operator pos:start="189:26" pos:end="189:26">(</operator><name pos:start="189:27" pos:end="189:32"><name pos:start="189:27" pos:end="189:29">buf</name><index pos:start="189:30" pos:end="189:32">[<expr pos:start="189:31" pos:end="189:31"><literal type="number" pos:start="189:31" pos:end="189:31">0</literal></expr>]</index></name> <operator pos:start="189:34" pos:end="189:35">==</operator> <literal type="char" pos:start="189:37" pos:end="189:39">'y'</literal><operator pos:start="189:40" pos:end="189:40">)</operator></expr> ?</condition><then pos:start="189:44" pos:end="189:44"> <expr pos:start="189:44" pos:end="189:44"><literal type="number" pos:start="189:44" pos:end="189:44">1</literal></expr> </then><else pos:start="189:46" pos:end="189:48">: <expr pos:start="189:48" pos:end="189:48"><literal type="number" pos:start="189:48" pos:end="189:48">0</literal></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="193:9" pos:end="197:9"><if pos:start="193:9" pos:end="197:9">if <condition pos:start="193:12" pos:end="193:55">(<expr pos:start="193:13" pos:end="193:54"><call pos:start="193:13" pos:end="193:54"><name pos:start="193:13" pos:end="193:27">get_param_value</name><argument_list pos:start="193:28" pos:end="193:54">(<argument pos:start="193:29" pos:end="193:31"><expr pos:start="193:29" pos:end="193:31"><name pos:start="193:29" pos:end="193:31">buf</name></expr></argument>, <argument pos:start="193:34" pos:end="193:44"><expr pos:start="193:34" pos:end="193:44"><sizeof pos:start="193:34" pos:end="193:44">sizeof<argument_list pos:start="193:40" pos:end="193:44">(<argument pos:start="193:41" pos:end="193:43"><expr pos:start="193:41" pos:end="193:43"><name pos:start="193:41" pos:end="193:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="193:47" pos:end="193:50"><expr pos:start="193:47" pos:end="193:50"><literal type="string" pos:start="193:47" pos:end="193:50">"ip"</literal></expr></argument>, <argument pos:start="193:53" pos:end="193:53"><expr pos:start="193:53" pos:end="193:53"><name pos:start="193:53" pos:end="193:53">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="193:57" pos:end="197:9">{<block_content pos:start="195:13" pos:end="195:34">

            <expr_stmt pos:start="195:13" pos:end="195:34"><expr pos:start="195:13" pos:end="195:33"><name pos:start="195:13" pos:end="195:14">ip</name> <operator pos:start="195:16" pos:end="195:16">=</operator> <call pos:start="195:18" pos:end="195:33"><name pos:start="195:18" pos:end="195:28">qemu_strdup</name><argument_list pos:start="195:29" pos:end="195:33">(<argument pos:start="195:30" pos:end="195:32"><expr pos:start="195:30" pos:end="195:32"><name pos:start="195:30" pos:end="195:32">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:29"><expr pos:start="199:9" pos:end="199:28"><name pos:start="199:9" pos:end="199:26"><name pos:start="199:9" pos:end="199:12">vlan</name><operator pos:start="199:13" pos:end="199:14">-&gt;</operator><name pos:start="199:15" pos:end="199:26">nb_host_devs</name></name><operator pos:start="199:27" pos:end="199:28">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:65"><expr pos:start="201:9" pos:end="201:64"><name pos:start="201:9" pos:end="201:11">ret</name> <operator pos:start="201:13" pos:end="201:13">=</operator> <call pos:start="201:15" pos:end="201:64"><name pos:start="201:15" pos:end="201:28">net_slirp_init</name><argument_list pos:start="201:29" pos:end="201:64">(<argument pos:start="201:30" pos:end="201:33"><expr pos:start="201:30" pos:end="201:33"><name pos:start="201:30" pos:end="201:33">vlan</name></expr></argument>, <argument pos:start="201:36" pos:end="201:41"><expr pos:start="201:36" pos:end="201:41"><name pos:start="201:36" pos:end="201:41">device</name></expr></argument>, <argument pos:start="201:44" pos:end="201:47"><expr pos:start="201:44" pos:end="201:47"><name pos:start="201:44" pos:end="201:47">name</name></expr></argument>, <argument pos:start="201:50" pos:end="201:59"><expr pos:start="201:50" pos:end="201:59"><name pos:start="201:50" pos:end="201:59">restricted</name></expr></argument>, <argument pos:start="201:62" pos:end="201:63"><expr pos:start="201:62" pos:end="201:63"><name pos:start="201:62" pos:end="201:63">ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:22"><expr pos:start="203:9" pos:end="203:21"><call pos:start="203:9" pos:end="203:21"><name pos:start="203:9" pos:end="203:17">qemu_free</name><argument_list pos:start="203:18" pos:end="203:21">(<argument pos:start="203:19" pos:end="203:20"><expr pos:start="203:19" pos:end="203:20"><name pos:start="203:19" pos:end="203:20">ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="205:7" pos:end="257:5">else if <condition pos:start="205:15" pos:end="205:42">(<expr pos:start="205:16" pos:end="205:41"><operator pos:start="205:16" pos:end="205:16">!</operator><call pos:start="205:17" pos:end="205:41"><name pos:start="205:17" pos:end="205:22">strcmp</name><argument_list pos:start="205:23" pos:end="205:41">(<argument pos:start="205:24" pos:end="205:29"><expr pos:start="205:24" pos:end="205:29"><name pos:start="205:24" pos:end="205:29">device</name></expr></argument>, <argument pos:start="205:32" pos:end="205:40"><expr pos:start="205:32" pos:end="205:40"><literal type="string" pos:start="205:32" pos:end="205:40">"channel"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="205:44" pos:end="257:5">{<block_content pos:start="207:9" pos:end="255:16">

        <decl_stmt pos:start="207:9" pos:end="207:18"><decl pos:start="207:9" pos:end="207:17"><type pos:start="207:9" pos:end="207:12"><name pos:start="207:9" pos:end="207:12">long</name></type> <name pos:start="207:14" pos:end="207:17">port</name></decl>;</decl_stmt>

        <decl_stmt pos:start="209:9" pos:end="209:32"><decl pos:start="209:9" pos:end="209:21"><type pos:start="209:9" pos:end="209:12"><name pos:start="209:9" pos:end="209:12">char</name></type> <name pos:start="209:14" pos:end="209:21"><name pos:start="209:14" pos:end="209:17">name</name><index pos:start="209:18" pos:end="209:21">[<expr pos:start="209:19" pos:end="209:20"><literal type="number" pos:start="209:19" pos:end="209:20">20</literal></expr>]</index></name></decl>, <decl pos:start="209:24" pos:end="209:31"><type ref="prev" pos:start="209:9" pos:end="209:12"><modifier pos:start="209:24" pos:end="209:24">*</modifier></type><name pos:start="209:25" pos:end="209:31">devname</name></decl>;</decl_stmt>

        <decl_stmt pos:start="211:9" pos:end="211:30"><decl pos:start="211:9" pos:end="211:29"><type pos:start="211:9" pos:end="211:26"><name pos:start="211:9" pos:end="211:24"><name pos:start="211:9" pos:end="211:14">struct</name> <name pos:start="211:16" pos:end="211:24">VMChannel</name></name> <modifier pos:start="211:26" pos:end="211:26">*</modifier></type><name pos:start="211:27" pos:end="211:29">vmc</name></decl>;</decl_stmt>



        <expr_stmt pos:start="215:9" pos:end="215:39"><expr pos:start="215:9" pos:end="215:38"><name pos:start="215:9" pos:end="215:12">port</name> <operator pos:start="215:14" pos:end="215:14">=</operator> <call pos:start="215:16" pos:end="215:38"><name pos:start="215:16" pos:end="215:21">strtol</name><argument_list pos:start="215:22" pos:end="215:38">(<argument pos:start="215:23" pos:end="215:23"><expr pos:start="215:23" pos:end="215:23"><name pos:start="215:23" pos:end="215:23">p</name></expr></argument>, <argument pos:start="215:26" pos:end="215:33"><expr pos:start="215:26" pos:end="215:33"><operator pos:start="215:26" pos:end="215:26">&amp;</operator><name pos:start="215:27" pos:end="215:33">devname</name></expr></argument>, <argument pos:start="215:36" pos:end="215:37"><expr pos:start="215:36" pos:end="215:37"><literal type="number" pos:start="215:36" pos:end="215:37">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:18"><expr pos:start="217:9" pos:end="217:17"><name pos:start="217:9" pos:end="217:15">devname</name><operator pos:start="217:16" pos:end="217:17">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="219:9" pos:end="227:9"><if pos:start="219:9" pos:end="227:9">if <condition pos:start="219:12" pos:end="219:37">(<expr pos:start="219:13" pos:end="219:36"><name pos:start="219:13" pos:end="219:30"><name pos:start="219:13" pos:end="219:16">port</name> <argument_list type="generic" pos:start="219:18" pos:end="219:30">&lt; <argument pos:start="219:20" pos:end="219:28"><expr pos:start="219:20" pos:end="219:28"><literal type="number" pos:start="219:20" pos:end="219:20">1</literal> <operator pos:start="219:22" pos:end="219:23">||</operator> <name pos:start="219:25" pos:end="219:28">port</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="219:32" pos:end="219:36">65535</literal></expr>)</condition> <block pos:start="219:39" pos:end="227:9">{<block_content pos:start="221:13" pos:end="225:21">

            <expr_stmt pos:start="221:13" pos:end="221:63"><expr pos:start="221:13" pos:end="221:62"><call pos:start="221:13" pos:end="221:62"><name pos:start="221:13" pos:end="221:24">config_error</name><argument_list pos:start="221:25" pos:end="221:62">(<argument pos:start="221:26" pos:end="221:28"><expr pos:start="221:26" pos:end="221:28"><name pos:start="221:26" pos:end="221:28">mon</name></expr></argument>, <argument pos:start="221:31" pos:end="221:61"><expr pos:start="221:31" pos:end="221:61"><literal type="string" pos:start="221:31" pos:end="221:61">"vmchannel wrong port number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:21"><expr pos:start="223:13" pos:end="223:20"><name pos:start="223:13" pos:end="223:15">ret</name> <operator pos:start="223:17" pos:end="223:17">=</operator> <operator pos:start="223:19" pos:end="223:19">-</operator><literal type="number" pos:start="223:20" pos:end="223:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="225:13" pos:end="225:21">goto <name pos:start="225:18" pos:end="225:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:47"><expr pos:start="229:9" pos:end="229:46"><name pos:start="229:9" pos:end="229:11">vmc</name> <operator pos:start="229:13" pos:end="229:13">=</operator> <call pos:start="229:15" pos:end="229:46"><name pos:start="229:15" pos:end="229:20">malloc</name><argument_list pos:start="229:21" pos:end="229:46">(<argument pos:start="229:22" pos:end="229:45"><expr pos:start="229:22" pos:end="229:45"><sizeof pos:start="229:22" pos:end="229:45">sizeof<argument_list pos:start="229:28" pos:end="229:45">(<argument pos:start="229:29" pos:end="229:44"><expr pos:start="229:29" pos:end="229:44">struct <name pos:start="229:36" pos:end="229:44">VMChannel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:49"><expr pos:start="231:9" pos:end="231:48"><call pos:start="231:9" pos:end="231:48"><name pos:start="231:9" pos:end="231:16">snprintf</name><argument_list pos:start="231:17" pos:end="231:48">(<argument pos:start="231:18" pos:end="231:21"><expr pos:start="231:18" pos:end="231:21"><name pos:start="231:18" pos:end="231:21">name</name></expr></argument>, <argument pos:start="231:24" pos:end="231:25"><expr pos:start="231:24" pos:end="231:25"><literal type="number" pos:start="231:24" pos:end="231:25">20</literal></expr></argument>, <argument pos:start="231:28" pos:end="231:41"><expr pos:start="231:28" pos:end="231:41"><literal type="string" pos:start="231:28" pos:end="231:41">"vmchannel%ld"</literal></expr></argument>, <argument pos:start="231:44" pos:end="231:47"><expr pos:start="231:44" pos:end="231:47"><name pos:start="231:44" pos:end="231:47">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:53"><expr pos:start="233:9" pos:end="233:52"><name pos:start="233:9" pos:end="233:15"><name pos:start="233:9" pos:end="233:11">vmc</name><operator pos:start="233:12" pos:end="233:13">-&gt;</operator><name pos:start="233:14" pos:end="233:15">hd</name></name> <operator pos:start="233:17" pos:end="233:17">=</operator> <call pos:start="233:19" pos:end="233:52"><name pos:start="233:19" pos:end="233:31">qemu_chr_open</name><argument_list pos:start="233:32" pos:end="233:52">(<argument pos:start="233:33" pos:end="233:36"><expr pos:start="233:33" pos:end="233:36"><name pos:start="233:33" pos:end="233:36">name</name></expr></argument>, <argument pos:start="233:39" pos:end="233:45"><expr pos:start="233:39" pos:end="233:45"><name pos:start="233:39" pos:end="233:45">devname</name></expr></argument>, <argument pos:start="233:48" pos:end="233:51"><expr pos:start="233:48" pos:end="233:51"><name pos:start="233:48" pos:end="233:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="235:9" pos:end="245:9"><if pos:start="235:9" pos:end="245:9">if <condition pos:start="235:12" pos:end="235:21">(<expr pos:start="235:13" pos:end="235:20"><operator pos:start="235:13" pos:end="235:13">!</operator><name pos:start="235:14" pos:end="235:20"><name pos:start="235:14" pos:end="235:16">vmc</name><operator pos:start="235:17" pos:end="235:18">-&gt;</operator><name pos:start="235:19" pos:end="235:20">hd</name></name></expr>)</condition> <block pos:start="235:23" pos:end="245:9">{<block_content pos:start="237:13" pos:end="243:21">

            <expr_stmt pos:start="237:13" pos:end="239:34"><expr pos:start="237:13" pos:end="239:33"><call pos:start="237:13" pos:end="239:33"><name pos:start="237:13" pos:end="237:24">config_error</name><argument_list pos:start="237:25" pos:end="239:33">(<argument pos:start="237:26" pos:end="237:28"><expr pos:start="237:26" pos:end="237:28"><name pos:start="237:26" pos:end="237:28">mon</name></expr></argument>, <argument pos:start="237:31" pos:end="237:70"><expr pos:start="237:31" pos:end="237:70"><literal type="string" pos:start="237:31" pos:end="237:70">"could not open vmchannel device '%s'\n"</literal></expr></argument>,

                         <argument pos:start="239:26" pos:end="239:32"><expr pos:start="239:26" pos:end="239:32"><name pos:start="239:26" pos:end="239:32">devname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:21"><expr pos:start="241:13" pos:end="241:20"><name pos:start="241:13" pos:end="241:15">ret</name> <operator pos:start="241:17" pos:end="241:17">=</operator> <operator pos:start="241:19" pos:end="241:19">-</operator><literal type="number" pos:start="241:20" pos:end="241:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="243:13" pos:end="243:21">goto <name pos:start="243:18" pos:end="243:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:25"><expr pos:start="247:9" pos:end="247:24"><name pos:start="247:9" pos:end="247:17"><name pos:start="247:9" pos:end="247:11">vmc</name><operator pos:start="247:12" pos:end="247:13">-&gt;</operator><name pos:start="247:14" pos:end="247:17">port</name></name> <operator pos:start="247:19" pos:end="247:19">=</operator> <name pos:start="247:21" pos:end="247:24">port</name></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:44"><expr pos:start="249:9" pos:end="249:43"><call pos:start="249:9" pos:end="249:43"><name pos:start="249:9" pos:end="249:22">slirp_add_exec</name><argument_list pos:start="249:23" pos:end="249:43">(<argument pos:start="249:24" pos:end="249:24"><expr pos:start="249:24" pos:end="249:24"><literal type="number" pos:start="249:24" pos:end="249:24">3</literal></expr></argument>, <argument pos:start="249:27" pos:end="249:33"><expr pos:start="249:27" pos:end="249:33"><name pos:start="249:27" pos:end="249:33"><name pos:start="249:27" pos:end="249:29">vmc</name><operator pos:start="249:30" pos:end="249:31">-&gt;</operator><name pos:start="249:32" pos:end="249:33">hd</name></name></expr></argument>, <argument pos:start="249:36" pos:end="249:36"><expr pos:start="249:36" pos:end="249:36"><literal type="number" pos:start="249:36" pos:end="249:36">4</literal></expr></argument>, <argument pos:start="249:39" pos:end="249:42"><expr pos:start="249:39" pos:end="249:42"><name pos:start="249:39" pos:end="249:42">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="253:27"><expr pos:start="251:9" pos:end="253:26"><call pos:start="251:9" pos:end="253:26"><name pos:start="251:9" pos:end="251:29">qemu_chr_add_handlers</name><argument_list pos:start="251:30" pos:end="253:26">(<argument pos:start="251:31" pos:end="251:37"><expr pos:start="251:31" pos:end="251:37"><name pos:start="251:31" pos:end="251:37"><name pos:start="251:31" pos:end="251:33">vmc</name><operator pos:start="251:34" pos:end="251:35">-&gt;</operator><name pos:start="251:36" pos:end="251:37">hd</name></name></expr></argument>, <argument pos:start="251:40" pos:end="251:57"><expr pos:start="251:40" pos:end="251:57"><name pos:start="251:40" pos:end="251:57">vmchannel_can_read</name></expr></argument>, <argument pos:start="251:60" pos:end="251:73"><expr pos:start="251:60" pos:end="251:73"><name pos:start="251:60" pos:end="251:73">vmchannel_read</name></expr></argument>,

                <argument pos:start="253:17" pos:end="253:20"><expr pos:start="253:17" pos:end="253:20"><name pos:start="253:17" pos:end="253:20">NULL</name></expr></argument>, <argument pos:start="253:23" pos:end="253:25"><expr pos:start="253:23" pos:end="253:25"><name pos:start="253:23" pos:end="253:25">vmc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:16"><expr pos:start="255:9" pos:end="255:15"><name pos:start="255:9" pos:end="255:11">ret</name> <operator pos:start="255:13" pos:end="255:13">=</operator> <literal type="number" pos:start="255:15" pos:end="255:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="257:7" pos:end="299:5">else

<cpp:endif pos:start="259:1" pos:end="259:6">#<cpp:directive pos:start="259:2" pos:end="259:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="261:1" pos:end="261:13">#<cpp:directive pos:start="261:2" pos:end="261:6">ifdef</cpp:directive> <name pos:start="261:8" pos:end="261:13">_WIN32</name></cpp:ifdef>

    if <condition pos:start="263:8" pos:end="263:31">(<expr pos:start="263:9" pos:end="263:30"><operator pos:start="263:9" pos:end="263:9">!</operator><call pos:start="263:10" pos:end="263:30"><name pos:start="263:10" pos:end="263:15">strcmp</name><argument_list pos:start="263:16" pos:end="263:30">(<argument pos:start="263:17" pos:end="263:22"><expr pos:start="263:17" pos:end="263:22"><name pos:start="263:17" pos:end="263:22">device</name></expr></argument>, <argument pos:start="263:25" pos:end="263:29"><expr pos:start="263:25" pos:end="263:29"><literal type="string" pos:start="263:25" pos:end="263:29">"tap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="263:33" pos:end="299:5">{<block_content pos:start="265:9" pos:end="297:57">

        <decl_stmt pos:start="265:9" pos:end="269:10"><decl pos:start="265:9" pos:end="269:9"><type pos:start="265:9" pos:end="265:33"><specifier pos:start="265:9" pos:end="265:14">static</specifier> <specifier pos:start="265:16" pos:end="265:20">const</specifier> <name pos:start="265:22" pos:end="265:25">char</name> <modifier pos:start="265:27" pos:end="265:27">*</modifier> <specifier pos:start="265:29" pos:end="265:33">const</specifier></type> <name pos:start="265:35" pos:end="265:46"><name pos:start="265:35" pos:end="265:44">tap_params</name><index pos:start="265:45" pos:end="265:46">[]</index></name> <init pos:start="265:48" pos:end="269:9">= <expr pos:start="265:50" pos:end="269:9"><block pos:start="265:50" pos:end="269:9">{

            <expr pos:start="267:13" pos:end="267:18"><literal type="string" pos:start="267:13" pos:end="267:18">"vlan"</literal></expr>, <expr pos:start="267:21" pos:end="267:26"><literal type="string" pos:start="267:21" pos:end="267:26">"name"</literal></expr>, <expr pos:start="267:29" pos:end="267:36"><literal type="string" pos:start="267:29" pos:end="267:36">"ifname"</literal></expr>, <expr pos:start="267:39" pos:end="267:42"><name pos:start="267:39" pos:end="267:42">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="271:9" pos:end="271:24"><decl pos:start="271:9" pos:end="271:23"><type pos:start="271:9" pos:end="271:12"><name pos:start="271:9" pos:end="271:12">char</name></type> <name pos:start="271:14" pos:end="271:23"><name pos:start="271:14" pos:end="271:19">ifname</name><index pos:start="271:20" pos:end="271:23">[<expr pos:start="271:21" pos:end="271:22"><literal type="number" pos:start="271:21" pos:end="271:22">64</literal></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="275:9" pos:end="283:9"><if pos:start="275:9" pos:end="283:9">if <condition pos:start="275:12" pos:end="275:62">(<expr pos:start="275:13" pos:end="275:61"><call pos:start="275:13" pos:end="275:57"><name pos:start="275:13" pos:end="275:24">check_params</name><argument_list pos:start="275:25" pos:end="275:57">(<argument pos:start="275:26" pos:end="275:28"><expr pos:start="275:26" pos:end="275:28"><name pos:start="275:26" pos:end="275:28">buf</name></expr></argument>, <argument pos:start="275:31" pos:end="275:41"><expr pos:start="275:31" pos:end="275:41"><sizeof pos:start="275:31" pos:end="275:41">sizeof<argument_list pos:start="275:37" pos:end="275:41">(<argument pos:start="275:38" pos:end="275:40"><expr pos:start="275:38" pos:end="275:40"><name pos:start="275:38" pos:end="275:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="275:44" pos:end="275:53"><expr pos:start="275:44" pos:end="275:53"><name pos:start="275:44" pos:end="275:53">tap_params</name></expr></argument>, <argument pos:start="275:56" pos:end="275:56"><expr pos:start="275:56" pos:end="275:56"><name pos:start="275:56" pos:end="275:56">p</name></expr></argument>)</argument_list></call> <operator pos:start="275:59" pos:end="275:59">&lt;</operator> <literal type="number" pos:start="275:61" pos:end="275:61">0</literal></expr>)</condition> <block pos:start="275:64" pos:end="283:9">{<block_content pos:start="277:13" pos:end="281:21">

            <expr_stmt pos:start="277:13" pos:end="277:74"><expr pos:start="277:13" pos:end="277:73"><call pos:start="277:13" pos:end="277:73"><name pos:start="277:13" pos:end="277:24">config_error</name><argument_list pos:start="277:25" pos:end="277:73">(<argument pos:start="277:26" pos:end="277:28"><expr pos:start="277:26" pos:end="277:28"><name pos:start="277:26" pos:end="277:28">mon</name></expr></argument>, <argument pos:start="277:31" pos:end="277:64"><expr pos:start="277:31" pos:end="277:64"><literal type="string" pos:start="277:31" pos:end="277:64">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="277:67" pos:end="277:69"><expr pos:start="277:67" pos:end="277:69"><name pos:start="277:67" pos:end="277:69">buf</name></expr></argument>, <argument pos:start="277:72" pos:end="277:72"><expr pos:start="277:72" pos:end="277:72"><name pos:start="277:72" pos:end="277:72">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="279:21"><expr pos:start="279:13" pos:end="279:20"><name pos:start="279:13" pos:end="279:15">ret</name> <operator pos:start="279:17" pos:end="279:17">=</operator> <operator pos:start="279:19" pos:end="279:19">-</operator><literal type="number" pos:start="279:20" pos:end="279:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="281:13" pos:end="281:21">goto <name pos:start="281:18" pos:end="281:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="285:9" pos:end="293:9"><if pos:start="285:9" pos:end="293:9">if <condition pos:start="285:12" pos:end="285:70">(<expr pos:start="285:13" pos:end="285:69"><call pos:start="285:13" pos:end="285:64"><name pos:start="285:13" pos:end="285:27">get_param_value</name><argument_list pos:start="285:28" pos:end="285:64">(<argument pos:start="285:29" pos:end="285:34"><expr pos:start="285:29" pos:end="285:34"><name pos:start="285:29" pos:end="285:34">ifname</name></expr></argument>, <argument pos:start="285:37" pos:end="285:50"><expr pos:start="285:37" pos:end="285:50"><sizeof pos:start="285:37" pos:end="285:50">sizeof<argument_list pos:start="285:43" pos:end="285:50">(<argument pos:start="285:44" pos:end="285:49"><expr pos:start="285:44" pos:end="285:49"><name pos:start="285:44" pos:end="285:49">ifname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="285:53" pos:end="285:60"><expr pos:start="285:53" pos:end="285:60"><literal type="string" pos:start="285:53" pos:end="285:60">"ifname"</literal></expr></argument>, <argument pos:start="285:63" pos:end="285:63"><expr pos:start="285:63" pos:end="285:63"><name pos:start="285:63" pos:end="285:63">p</name></expr></argument>)</argument_list></call> <operator pos:start="285:66" pos:end="285:67">&lt;=</operator> <literal type="number" pos:start="285:69" pos:end="285:69">0</literal></expr>)</condition> <block pos:start="285:72" pos:end="293:9">{<block_content pos:start="287:13" pos:end="291:21">

            <expr_stmt pos:start="287:13" pos:end="287:58"><expr pos:start="287:13" pos:end="287:57"><call pos:start="287:13" pos:end="287:57"><name pos:start="287:13" pos:end="287:24">config_error</name><argument_list pos:start="287:25" pos:end="287:57">(<argument pos:start="287:26" pos:end="287:28"><expr pos:start="287:26" pos:end="287:28"><name pos:start="287:26" pos:end="287:28">mon</name></expr></argument>, <argument pos:start="287:31" pos:end="287:56"><expr pos:start="287:31" pos:end="287:56"><literal type="string" pos:start="287:31" pos:end="287:56">"tap: no interface name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="289:13" pos:end="289:21"><expr pos:start="289:13" pos:end="289:20"><name pos:start="289:13" pos:end="289:15">ret</name> <operator pos:start="289:17" pos:end="289:17">=</operator> <operator pos:start="289:19" pos:end="289:19">-</operator><literal type="number" pos:start="289:20" pos:end="289:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="291:13" pos:end="291:21">goto <name pos:start="291:18" pos:end="291:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="295:9" pos:end="295:29"><expr pos:start="295:9" pos:end="295:28"><name pos:start="295:9" pos:end="295:26"><name pos:start="295:9" pos:end="295:12">vlan</name><operator pos:start="295:13" pos:end="295:14">-&gt;</operator><name pos:start="295:15" pos:end="295:26">nb_host_devs</name></name><operator pos:start="295:27" pos:end="295:28">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="297:9" pos:end="297:57"><expr pos:start="297:9" pos:end="297:56"><name pos:start="297:9" pos:end="297:11">ret</name> <operator pos:start="297:13" pos:end="297:13">=</operator> <call pos:start="297:15" pos:end="297:56"><name pos:start="297:15" pos:end="297:28">tap_win32_init</name><argument_list pos:start="297:29" pos:end="297:56">(<argument pos:start="297:30" pos:end="297:33"><expr pos:start="297:30" pos:end="297:33"><name pos:start="297:30" pos:end="297:33">vlan</name></expr></argument>, <argument pos:start="297:36" pos:end="297:41"><expr pos:start="297:36" pos:end="297:41"><name pos:start="297:36" pos:end="297:41">device</name></expr></argument>, <argument pos:start="297:44" pos:end="297:47"><expr pos:start="297:44" pos:end="297:47"><name pos:start="297:44" pos:end="297:47">name</name></expr></argument>, <argument pos:start="297:50" pos:end="297:55"><expr pos:start="297:50" pos:end="297:55"><name pos:start="297:50" pos:end="297:55">ifname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="299:7" pos:end="385:5">else

<cpp:elif pos:start="301:1" pos:end="301:20">#<cpp:directive pos:start="301:2" pos:end="301:5">elif</cpp:directive> <expr pos:start="301:7" pos:end="301:20"><call pos:start="301:7" pos:end="301:20"><name pos:start="301:7" pos:end="301:13">defined</name> <argument_list pos:start="301:15" pos:end="301:20">(<argument pos:start="301:16" pos:end="301:19"><expr pos:start="301:16" pos:end="301:19"><name pos:start="301:16" pos:end="301:19">_AIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:else pos:start="303:1" pos:end="303:5">#<cpp:directive pos:start="303:2" pos:end="303:5">else</cpp:directive></cpp:else>

    if <condition pos:start="305:8" pos:end="305:31">(<expr pos:start="305:9" pos:end="305:30"><operator pos:start="305:9" pos:end="305:9">!</operator><call pos:start="305:10" pos:end="305:30"><name pos:start="305:10" pos:end="305:15">strcmp</name><argument_list pos:start="305:16" pos:end="305:30">(<argument pos:start="305:17" pos:end="305:22"><expr pos:start="305:17" pos:end="305:22"><name pos:start="305:17" pos:end="305:22">device</name></expr></argument>, <argument pos:start="305:25" pos:end="305:29"><expr pos:start="305:25" pos:end="305:29"><literal type="string" pos:start="305:25" pos:end="305:29">"tap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="305:33" pos:end="385:5">{<block_content pos:start="307:9" pos:end="383:9">

        <decl_stmt pos:start="307:9" pos:end="307:36"><decl pos:start="307:9" pos:end="307:23"><type pos:start="307:9" pos:end="307:12"><name pos:start="307:9" pos:end="307:12">char</name></type> <name pos:start="307:14" pos:end="307:23"><name pos:start="307:14" pos:end="307:19">ifname</name><index pos:start="307:20" pos:end="307:23">[<expr pos:start="307:21" pos:end="307:22"><literal type="number" pos:start="307:21" pos:end="307:22">64</literal></expr>]</index></name></decl>, <decl pos:start="307:26" pos:end="307:35"><type ref="prev" pos:start="307:9" pos:end="307:12"/><name pos:start="307:26" pos:end="307:35"><name pos:start="307:26" pos:end="307:31">chkbuf</name><index pos:start="307:32" pos:end="307:35">[<expr pos:start="307:33" pos:end="307:34"><literal type="number" pos:start="307:33" pos:end="307:34">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="309:9" pos:end="309:51"><decl pos:start="309:9" pos:end="309:31"><type pos:start="309:9" pos:end="309:12"><name pos:start="309:9" pos:end="309:12">char</name></type> <name pos:start="309:14" pos:end="309:31"><name pos:start="309:14" pos:end="309:25">setup_script</name><index pos:start="309:26" pos:end="309:31">[<expr pos:start="309:27" pos:end="309:30"><literal type="number" pos:start="309:27" pos:end="309:30">1024</literal></expr>]</index></name></decl>, <decl pos:start="309:34" pos:end="309:50"><type ref="prev" pos:start="309:9" pos:end="309:12"/><name pos:start="309:34" pos:end="309:50"><name pos:start="309:34" pos:end="309:44">down_script</name><index pos:start="309:45" pos:end="309:50">[<expr pos:start="309:46" pos:end="309:49"><literal type="number" pos:start="309:46" pos:end="309:49">1024</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="311:9" pos:end="311:20"><decl pos:start="311:9" pos:end="311:19"><type pos:start="311:9" pos:end="311:18"><name pos:start="311:9" pos:end="311:16">TAPState</name> <modifier pos:start="311:18" pos:end="311:18">*</modifier></type><name pos:start="311:19" pos:end="311:19">s</name></decl>;</decl_stmt>

        <decl_stmt pos:start="313:9" pos:end="313:15"><decl pos:start="313:9" pos:end="313:14"><type pos:start="313:9" pos:end="313:11"><name pos:start="313:9" pos:end="313:11">int</name></type> <name pos:start="313:13" pos:end="313:14">fd</name></decl>;</decl_stmt>

        <expr_stmt pos:start="315:9" pos:end="315:29"><expr pos:start="315:9" pos:end="315:28"><name pos:start="315:9" pos:end="315:26"><name pos:start="315:9" pos:end="315:12">vlan</name><operator pos:start="315:13" pos:end="315:14">-&gt;</operator><name pos:start="315:15" pos:end="315:26">nb_host_devs</name></name><operator pos:start="315:27" pos:end="315:28">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="317:9" pos:end="373:9"><if pos:start="317:9" pos:end="335:9">if <condition pos:start="317:12" pos:end="317:59">(<expr pos:start="317:13" pos:end="317:58"><call pos:start="317:13" pos:end="317:54"><name pos:start="317:13" pos:end="317:27">get_param_value</name><argument_list pos:start="317:28" pos:end="317:54">(<argument pos:start="317:29" pos:end="317:31"><expr pos:start="317:29" pos:end="317:31"><name pos:start="317:29" pos:end="317:31">buf</name></expr></argument>, <argument pos:start="317:34" pos:end="317:44"><expr pos:start="317:34" pos:end="317:44"><sizeof pos:start="317:34" pos:end="317:44">sizeof<argument_list pos:start="317:40" pos:end="317:44">(<argument pos:start="317:41" pos:end="317:43"><expr pos:start="317:41" pos:end="317:43"><name pos:start="317:41" pos:end="317:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="317:47" pos:end="317:50"><expr pos:start="317:47" pos:end="317:50"><literal type="string" pos:start="317:47" pos:end="317:50">"fd"</literal></expr></argument>, <argument pos:start="317:53" pos:end="317:53"><expr pos:start="317:53" pos:end="317:53"><name pos:start="317:53" pos:end="317:53">p</name></expr></argument>)</argument_list></call> <operator pos:start="317:56" pos:end="317:56">&gt;</operator> <literal type="number" pos:start="317:58" pos:end="317:58">0</literal></expr>)</condition> <block pos:start="317:61" pos:end="335:9">{<block_content pos:start="319:13" pos:end="333:56">

            <if_stmt pos:start="319:13" pos:end="327:13"><if pos:start="319:13" pos:end="327:13">if <condition pos:start="319:16" pos:end="319:71">(<expr pos:start="319:17" pos:end="319:70"><call pos:start="319:17" pos:end="319:66"><name pos:start="319:17" pos:end="319:28">check_params</name><argument_list pos:start="319:29" pos:end="319:66">(<argument pos:start="319:30" pos:end="319:35"><expr pos:start="319:30" pos:end="319:35"><name pos:start="319:30" pos:end="319:35">chkbuf</name></expr></argument>, <argument pos:start="319:38" pos:end="319:51"><expr pos:start="319:38" pos:end="319:51"><sizeof pos:start="319:38" pos:end="319:51">sizeof<argument_list pos:start="319:44" pos:end="319:51">(<argument pos:start="319:45" pos:end="319:50"><expr pos:start="319:45" pos:end="319:50"><name pos:start="319:45" pos:end="319:50">chkbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="319:54" pos:end="319:62"><expr pos:start="319:54" pos:end="319:62"><name pos:start="319:54" pos:end="319:62">fd_params</name></expr></argument>, <argument pos:start="319:65" pos:end="319:65"><expr pos:start="319:65" pos:end="319:65"><name pos:start="319:65" pos:end="319:65">p</name></expr></argument>)</argument_list></call> <operator pos:start="319:68" pos:end="319:68">&lt;</operator> <literal type="number" pos:start="319:70" pos:end="319:70">0</literal></expr>)</condition> <block pos:start="319:73" pos:end="327:13">{<block_content pos:start="321:17" pos:end="325:25">

                <expr_stmt pos:start="321:17" pos:end="321:81"><expr pos:start="321:17" pos:end="321:80"><call pos:start="321:17" pos:end="321:80"><name pos:start="321:17" pos:end="321:28">config_error</name><argument_list pos:start="321:29" pos:end="321:80">(<argument pos:start="321:30" pos:end="321:32"><expr pos:start="321:30" pos:end="321:32"><name pos:start="321:30" pos:end="321:32">mon</name></expr></argument>, <argument pos:start="321:35" pos:end="321:68"><expr pos:start="321:35" pos:end="321:68"><literal type="string" pos:start="321:35" pos:end="321:68">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="321:71" pos:end="321:76"><expr pos:start="321:71" pos:end="321:76"><name pos:start="321:71" pos:end="321:76">chkbuf</name></expr></argument>, <argument pos:start="321:79" pos:end="321:79"><expr pos:start="321:79" pos:end="321:79"><name pos:start="321:79" pos:end="321:79">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="323:17" pos:end="323:25"><expr pos:start="323:17" pos:end="323:24"><name pos:start="323:17" pos:end="323:19">ret</name> <operator pos:start="323:21" pos:end="323:21">=</operator> <operator pos:start="323:23" pos:end="323:23">-</operator><literal type="number" pos:start="323:24" pos:end="323:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="325:17" pos:end="325:25">goto <name pos:start="325:22" pos:end="325:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:38"><expr pos:start="329:13" pos:end="329:37"><name pos:start="329:13" pos:end="329:14">fd</name> <operator pos:start="329:16" pos:end="329:16">=</operator> <call pos:start="329:18" pos:end="329:37"><name pos:start="329:18" pos:end="329:23">strtol</name><argument_list pos:start="329:24" pos:end="329:37">(<argument pos:start="329:25" pos:end="329:27"><expr pos:start="329:25" pos:end="329:27"><name pos:start="329:25" pos:end="329:27">buf</name></expr></argument>, <argument pos:start="329:30" pos:end="329:33"><expr pos:start="329:30" pos:end="329:33"><name pos:start="329:30" pos:end="329:33">NULL</name></expr></argument>, <argument pos:start="329:36" pos:end="329:36"><expr pos:start="329:36" pos:end="329:36"><literal type="number" pos:start="329:36" pos:end="329:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:43"><expr pos:start="331:13" pos:end="331:42"><call pos:start="331:13" pos:end="331:42"><name pos:start="331:13" pos:end="331:17">fcntl</name><argument_list pos:start="331:18" pos:end="331:42">(<argument pos:start="331:19" pos:end="331:20"><expr pos:start="331:19" pos:end="331:20"><name pos:start="331:19" pos:end="331:20">fd</name></expr></argument>, <argument pos:start="331:23" pos:end="331:29"><expr pos:start="331:23" pos:end="331:29"><name pos:start="331:23" pos:end="331:29">F_SETFL</name></expr></argument>, <argument pos:start="331:32" pos:end="331:41"><expr pos:start="331:32" pos:end="331:41"><name pos:start="331:32" pos:end="331:41">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="333:13" pos:end="333:56"><expr pos:start="333:13" pos:end="333:55"><name pos:start="333:13" pos:end="333:13">s</name> <operator pos:start="333:15" pos:end="333:15">=</operator> <call pos:start="333:17" pos:end="333:55"><name pos:start="333:17" pos:end="333:31">net_tap_fd_init</name><argument_list pos:start="333:32" pos:end="333:55">(<argument pos:start="333:33" pos:end="333:36"><expr pos:start="333:33" pos:end="333:36"><name pos:start="333:33" pos:end="333:36">vlan</name></expr></argument>, <argument pos:start="333:39" pos:end="333:44"><expr pos:start="333:39" pos:end="333:44"><name pos:start="333:39" pos:end="333:44">device</name></expr></argument>, <argument pos:start="333:47" pos:end="333:50"><expr pos:start="333:47" pos:end="333:50"><name pos:start="333:47" pos:end="333:50">name</name></expr></argument>, <argument pos:start="333:53" pos:end="333:54"><expr pos:start="333:53" pos:end="333:54"><name pos:start="333:53" pos:end="333:54">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="335:11" pos:end="373:9">else <block pos:start="335:16" pos:end="373:9">{<block_content pos:start="337:13" pos:end="371:84">

            <decl_stmt pos:start="337:13" pos:end="341:14"><decl pos:start="337:13" pos:end="341:13"><type pos:start="337:13" pos:end="337:37"><specifier pos:start="337:13" pos:end="337:18">static</specifier> <specifier pos:start="337:20" pos:end="337:24">const</specifier> <name pos:start="337:26" pos:end="337:29">char</name> <modifier pos:start="337:31" pos:end="337:31">*</modifier> <specifier pos:start="337:33" pos:end="337:37">const</specifier></type> <name pos:start="337:39" pos:end="337:50"><name pos:start="337:39" pos:end="337:48">tap_params</name><index pos:start="337:49" pos:end="337:50">[]</index></name> <init pos:start="337:52" pos:end="341:13">= <expr pos:start="337:54" pos:end="341:13"><block pos:start="337:54" pos:end="341:13">{

                <expr pos:start="339:17" pos:end="339:22"><literal type="string" pos:start="339:17" pos:end="339:22">"vlan"</literal></expr>, <expr pos:start="339:25" pos:end="339:30"><literal type="string" pos:start="339:25" pos:end="339:30">"name"</literal></expr>, <expr pos:start="339:33" pos:end="339:40"><literal type="string" pos:start="339:33" pos:end="339:40">"ifname"</literal></expr>, <expr pos:start="339:43" pos:end="339:50"><literal type="string" pos:start="339:43" pos:end="339:50">"script"</literal></expr>, <expr pos:start="339:53" pos:end="339:64"><literal type="string" pos:start="339:53" pos:end="339:64">"downscript"</literal></expr>, <expr pos:start="339:67" pos:end="339:70"><name pos:start="339:67" pos:end="339:70">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="343:13" pos:end="351:13"><if pos:start="343:13" pos:end="351:13">if <condition pos:start="343:16" pos:end="343:72">(<expr pos:start="343:17" pos:end="343:71"><call pos:start="343:17" pos:end="343:67"><name pos:start="343:17" pos:end="343:28">check_params</name><argument_list pos:start="343:29" pos:end="343:67">(<argument pos:start="343:30" pos:end="343:35"><expr pos:start="343:30" pos:end="343:35"><name pos:start="343:30" pos:end="343:35">chkbuf</name></expr></argument>, <argument pos:start="343:38" pos:end="343:51"><expr pos:start="343:38" pos:end="343:51"><sizeof pos:start="343:38" pos:end="343:51">sizeof<argument_list pos:start="343:44" pos:end="343:51">(<argument pos:start="343:45" pos:end="343:50"><expr pos:start="343:45" pos:end="343:50"><name pos:start="343:45" pos:end="343:50">chkbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="343:54" pos:end="343:63"><expr pos:start="343:54" pos:end="343:63"><name pos:start="343:54" pos:end="343:63">tap_params</name></expr></argument>, <argument pos:start="343:66" pos:end="343:66"><expr pos:start="343:66" pos:end="343:66"><name pos:start="343:66" pos:end="343:66">p</name></expr></argument>)</argument_list></call> <operator pos:start="343:69" pos:end="343:69">&lt;</operator> <literal type="number" pos:start="343:71" pos:end="343:71">0</literal></expr>)</condition> <block pos:start="343:74" pos:end="351:13">{<block_content pos:start="345:17" pos:end="349:25">

                <expr_stmt pos:start="345:17" pos:end="345:81"><expr pos:start="345:17" pos:end="345:80"><call pos:start="345:17" pos:end="345:80"><name pos:start="345:17" pos:end="345:28">config_error</name><argument_list pos:start="345:29" pos:end="345:80">(<argument pos:start="345:30" pos:end="345:32"><expr pos:start="345:30" pos:end="345:32"><name pos:start="345:30" pos:end="345:32">mon</name></expr></argument>, <argument pos:start="345:35" pos:end="345:68"><expr pos:start="345:35" pos:end="345:68"><literal type="string" pos:start="345:35" pos:end="345:68">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="345:71" pos:end="345:76"><expr pos:start="345:71" pos:end="345:76"><name pos:start="345:71" pos:end="345:76">chkbuf</name></expr></argument>, <argument pos:start="345:79" pos:end="345:79"><expr pos:start="345:79" pos:end="345:79"><name pos:start="345:79" pos:end="345:79">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="347:17" pos:end="347:25"><expr pos:start="347:17" pos:end="347:24"><name pos:start="347:17" pos:end="347:19">ret</name> <operator pos:start="347:21" pos:end="347:21">=</operator> <operator pos:start="347:23" pos:end="347:23">-</operator><literal type="number" pos:start="347:24" pos:end="347:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="349:17" pos:end="349:25">goto <name pos:start="349:22" pos:end="349:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="353:13" pos:end="357:13"><if pos:start="353:13" pos:end="357:13">if <condition pos:start="353:16" pos:end="353:74">(<expr pos:start="353:17" pos:end="353:73"><call pos:start="353:17" pos:end="353:68"><name pos:start="353:17" pos:end="353:31">get_param_value</name><argument_list pos:start="353:32" pos:end="353:68">(<argument pos:start="353:33" pos:end="353:38"><expr pos:start="353:33" pos:end="353:38"><name pos:start="353:33" pos:end="353:38">ifname</name></expr></argument>, <argument pos:start="353:41" pos:end="353:54"><expr pos:start="353:41" pos:end="353:54"><sizeof pos:start="353:41" pos:end="353:54">sizeof<argument_list pos:start="353:47" pos:end="353:54">(<argument pos:start="353:48" pos:end="353:53"><expr pos:start="353:48" pos:end="353:53"><name pos:start="353:48" pos:end="353:53">ifname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="353:57" pos:end="353:64"><expr pos:start="353:57" pos:end="353:64"><literal type="string" pos:start="353:57" pos:end="353:64">"ifname"</literal></expr></argument>, <argument pos:start="353:67" pos:end="353:67"><expr pos:start="353:67" pos:end="353:67"><name pos:start="353:67" pos:end="353:67">p</name></expr></argument>)</argument_list></call> <operator pos:start="353:70" pos:end="353:71">&lt;=</operator> <literal type="number" pos:start="353:73" pos:end="353:73">0</literal></expr>)</condition> <block pos:start="353:76" pos:end="357:13">{<block_content pos:start="355:17" pos:end="355:33">

                <expr_stmt pos:start="355:17" pos:end="355:33"><expr pos:start="355:17" pos:end="355:32"><name pos:start="355:17" pos:end="355:25"><name pos:start="355:17" pos:end="355:22">ifname</name><index pos:start="355:23" pos:end="355:25">[<expr pos:start="355:24" pos:end="355:24"><literal type="number" pos:start="355:24" pos:end="355:24">0</literal></expr>]</index></name> <operator pos:start="355:27" pos:end="355:27">=</operator> <literal type="char" pos:start="355:29" pos:end="355:32">'\0'</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="359:13" pos:end="363:13"><if pos:start="359:13" pos:end="363:13">if <condition pos:start="359:16" pos:end="359:86">(<expr pos:start="359:17" pos:end="359:85"><call pos:start="359:17" pos:end="359:80"><name pos:start="359:17" pos:end="359:31">get_param_value</name><argument_list pos:start="359:32" pos:end="359:80">(<argument pos:start="359:33" pos:end="359:44"><expr pos:start="359:33" pos:end="359:44"><name pos:start="359:33" pos:end="359:44">setup_script</name></expr></argument>, <argument pos:start="359:47" pos:end="359:66"><expr pos:start="359:47" pos:end="359:66"><sizeof pos:start="359:47" pos:end="359:66">sizeof<argument_list pos:start="359:53" pos:end="359:66">(<argument pos:start="359:54" pos:end="359:65"><expr pos:start="359:54" pos:end="359:65"><name pos:start="359:54" pos:end="359:65">setup_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="359:69" pos:end="359:76"><expr pos:start="359:69" pos:end="359:76"><literal type="string" pos:start="359:69" pos:end="359:76">"script"</literal></expr></argument>, <argument pos:start="359:79" pos:end="359:79"><expr pos:start="359:79" pos:end="359:79"><name pos:start="359:79" pos:end="359:79">p</name></expr></argument>)</argument_list></call> <operator pos:start="359:82" pos:end="359:83">==</operator> <literal type="number" pos:start="359:85" pos:end="359:85">0</literal></expr>)</condition> <block pos:start="359:88" pos:end="363:13">{<block_content pos:start="361:17" pos:end="361:84">

                <expr_stmt pos:start="361:17" pos:end="361:84"><expr pos:start="361:17" pos:end="361:83"><call pos:start="361:17" pos:end="361:83"><name pos:start="361:17" pos:end="361:23">pstrcpy</name><argument_list pos:start="361:24" pos:end="361:83">(<argument pos:start="361:25" pos:end="361:36"><expr pos:start="361:25" pos:end="361:36"><name pos:start="361:25" pos:end="361:36">setup_script</name></expr></argument>, <argument pos:start="361:39" pos:end="361:58"><expr pos:start="361:39" pos:end="361:58"><sizeof pos:start="361:39" pos:end="361:58">sizeof<argument_list pos:start="361:45" pos:end="361:58">(<argument pos:start="361:46" pos:end="361:57"><expr pos:start="361:46" pos:end="361:57"><name pos:start="361:46" pos:end="361:57">setup_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="361:61" pos:end="361:82"><expr pos:start="361:61" pos:end="361:82"><name pos:start="361:61" pos:end="361:82">DEFAULT_NETWORK_SCRIPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="365:13" pos:end="369:13"><if pos:start="365:13" pos:end="369:13">if <condition pos:start="365:16" pos:end="365:88">(<expr pos:start="365:17" pos:end="365:87"><call pos:start="365:17" pos:end="365:82"><name pos:start="365:17" pos:end="365:31">get_param_value</name><argument_list pos:start="365:32" pos:end="365:82">(<argument pos:start="365:33" pos:end="365:43"><expr pos:start="365:33" pos:end="365:43"><name pos:start="365:33" pos:end="365:43">down_script</name></expr></argument>, <argument pos:start="365:46" pos:end="365:64"><expr pos:start="365:46" pos:end="365:64"><sizeof pos:start="365:46" pos:end="365:64">sizeof<argument_list pos:start="365:52" pos:end="365:64">(<argument pos:start="365:53" pos:end="365:63"><expr pos:start="365:53" pos:end="365:63"><name pos:start="365:53" pos:end="365:63">down_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="365:67" pos:end="365:78"><expr pos:start="365:67" pos:end="365:78"><literal type="string" pos:start="365:67" pos:end="365:78">"downscript"</literal></expr></argument>, <argument pos:start="365:81" pos:end="365:81"><expr pos:start="365:81" pos:end="365:81"><name pos:start="365:81" pos:end="365:81">p</name></expr></argument>)</argument_list></call> <operator pos:start="365:84" pos:end="365:85">==</operator> <literal type="number" pos:start="365:87" pos:end="365:87">0</literal></expr>)</condition> <block pos:start="365:90" pos:end="369:13">{<block_content pos:start="367:17" pos:end="367:87">

                <expr_stmt pos:start="367:17" pos:end="367:87"><expr pos:start="367:17" pos:end="367:86"><call pos:start="367:17" pos:end="367:86"><name pos:start="367:17" pos:end="367:23">pstrcpy</name><argument_list pos:start="367:24" pos:end="367:86">(<argument pos:start="367:25" pos:end="367:35"><expr pos:start="367:25" pos:end="367:35"><name pos:start="367:25" pos:end="367:35">down_script</name></expr></argument>, <argument pos:start="367:38" pos:end="367:56"><expr pos:start="367:38" pos:end="367:56"><sizeof pos:start="367:38" pos:end="367:56">sizeof<argument_list pos:start="367:44" pos:end="367:56">(<argument pos:start="367:45" pos:end="367:55"><expr pos:start="367:45" pos:end="367:55"><name pos:start="367:45" pos:end="367:55">down_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="367:59" pos:end="367:85"><expr pos:start="367:59" pos:end="367:85"><name pos:start="367:59" pos:end="367:85">DEFAULT_NETWORK_DOWN_SCRIPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="371:13" pos:end="371:84"><expr pos:start="371:13" pos:end="371:83"><name pos:start="371:13" pos:end="371:13">s</name> <operator pos:start="371:15" pos:end="371:15">=</operator> <call pos:start="371:17" pos:end="371:83"><name pos:start="371:17" pos:end="371:28">net_tap_init</name><argument_list pos:start="371:29" pos:end="371:83">(<argument pos:start="371:30" pos:end="371:33"><expr pos:start="371:30" pos:end="371:33"><name pos:start="371:30" pos:end="371:33">vlan</name></expr></argument>, <argument pos:start="371:36" pos:end="371:41"><expr pos:start="371:36" pos:end="371:41"><name pos:start="371:36" pos:end="371:41">device</name></expr></argument>, <argument pos:start="371:44" pos:end="371:47"><expr pos:start="371:44" pos:end="371:47"><name pos:start="371:44" pos:end="371:47">name</name></expr></argument>, <argument pos:start="371:50" pos:end="371:55"><expr pos:start="371:50" pos:end="371:55"><name pos:start="371:50" pos:end="371:55">ifname</name></expr></argument>, <argument pos:start="371:58" pos:end="371:69"><expr pos:start="371:58" pos:end="371:69"><name pos:start="371:58" pos:end="371:69">setup_script</name></expr></argument>, <argument pos:start="371:72" pos:end="371:82"><expr pos:start="371:72" pos:end="371:82"><name pos:start="371:72" pos:end="371:82">down_script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="375:9" pos:end="383:9"><if pos:start="375:9" pos:end="379:9">if <condition pos:start="375:12" pos:end="375:22">(<expr pos:start="375:13" pos:end="375:21"><name pos:start="375:13" pos:end="375:13">s</name> <operator pos:start="375:15" pos:end="375:16">!=</operator> <name pos:start="375:18" pos:end="375:21">NULL</name></expr>)</condition> <block pos:start="375:24" pos:end="379:9">{<block_content pos:start="377:13" pos:end="377:20">

            <expr_stmt pos:start="377:13" pos:end="377:20"><expr pos:start="377:13" pos:end="377:19"><name pos:start="377:13" pos:end="377:15">ret</name> <operator pos:start="377:17" pos:end="377:17">=</operator> <literal type="number" pos:start="377:19" pos:end="377:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="379:11" pos:end="383:9">else <block pos:start="379:16" pos:end="383:9">{<block_content pos:start="381:13" pos:end="381:21">

            <expr_stmt pos:start="381:13" pos:end="381:21"><expr pos:start="381:13" pos:end="381:20"><name pos:start="381:13" pos:end="381:15">ret</name> <operator pos:start="381:17" pos:end="381:17">=</operator> <operator pos:start="381:19" pos:end="381:19">-</operator><literal type="number" pos:start="381:20" pos:end="381:20">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="385:7" pos:end="487:5">else

<cpp:endif pos:start="387:1" pos:end="387:6">#<cpp:directive pos:start="387:2" pos:end="387:6">endif</cpp:directive></cpp:endif>

    if <condition pos:start="389:8" pos:end="389:34">(<expr pos:start="389:9" pos:end="389:33"><operator pos:start="389:9" pos:end="389:9">!</operator><call pos:start="389:10" pos:end="389:33"><name pos:start="389:10" pos:end="389:15">strcmp</name><argument_list pos:start="389:16" pos:end="389:33">(<argument pos:start="389:17" pos:end="389:22"><expr pos:start="389:17" pos:end="389:22"><name pos:start="389:17" pos:end="389:22">device</name></expr></argument>, <argument pos:start="389:25" pos:end="389:32"><expr pos:start="389:25" pos:end="389:32"><literal type="string" pos:start="389:25" pos:end="389:32">"socket"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="389:36" pos:end="487:5">{<block_content pos:start="391:9" pos:end="485:29">

        <decl_stmt pos:start="391:9" pos:end="391:24"><decl pos:start="391:9" pos:end="391:23"><type pos:start="391:9" pos:end="391:12"><name pos:start="391:9" pos:end="391:12">char</name></type> <name pos:start="391:14" pos:end="391:23"><name pos:start="391:14" pos:end="391:19">chkbuf</name><index pos:start="391:20" pos:end="391:23">[<expr pos:start="391:21" pos:end="391:22"><literal type="number" pos:start="391:21" pos:end="391:22">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt pos:start="393:9" pos:end="483:9"><if pos:start="393:9" pos:end="415:9">if <condition pos:start="393:12" pos:end="393:59">(<expr pos:start="393:13" pos:end="393:58"><call pos:start="393:13" pos:end="393:54"><name pos:start="393:13" pos:end="393:27">get_param_value</name><argument_list pos:start="393:28" pos:end="393:54">(<argument pos:start="393:29" pos:end="393:31"><expr pos:start="393:29" pos:end="393:31"><name pos:start="393:29" pos:end="393:31">buf</name></expr></argument>, <argument pos:start="393:34" pos:end="393:44"><expr pos:start="393:34" pos:end="393:44"><sizeof pos:start="393:34" pos:end="393:44">sizeof<argument_list pos:start="393:40" pos:end="393:44">(<argument pos:start="393:41" pos:end="393:43"><expr pos:start="393:41" pos:end="393:43"><name pos:start="393:41" pos:end="393:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="393:47" pos:end="393:50"><expr pos:start="393:47" pos:end="393:50"><literal type="string" pos:start="393:47" pos:end="393:50">"fd"</literal></expr></argument>, <argument pos:start="393:53" pos:end="393:53"><expr pos:start="393:53" pos:end="393:53"><name pos:start="393:53" pos:end="393:53">p</name></expr></argument>)</argument_list></call> <operator pos:start="393:56" pos:end="393:56">&gt;</operator> <literal type="number" pos:start="393:58" pos:end="393:58">0</literal></expr>)</condition> <block pos:start="393:61" pos:end="415:9">{<block_content pos:start="395:13" pos:end="413:24">

            <decl_stmt pos:start="395:13" pos:end="395:19"><decl pos:start="395:13" pos:end="395:18"><type pos:start="395:13" pos:end="395:15"><name pos:start="395:13" pos:end="395:15">int</name></type> <name pos:start="395:17" pos:end="395:18">fd</name></decl>;</decl_stmt>

            <if_stmt pos:start="397:13" pos:end="405:13"><if pos:start="397:13" pos:end="405:13">if <condition pos:start="397:16" pos:end="397:71">(<expr pos:start="397:17" pos:end="397:70"><call pos:start="397:17" pos:end="397:66"><name pos:start="397:17" pos:end="397:28">check_params</name><argument_list pos:start="397:29" pos:end="397:66">(<argument pos:start="397:30" pos:end="397:35"><expr pos:start="397:30" pos:end="397:35"><name pos:start="397:30" pos:end="397:35">chkbuf</name></expr></argument>, <argument pos:start="397:38" pos:end="397:51"><expr pos:start="397:38" pos:end="397:51"><sizeof pos:start="397:38" pos:end="397:51">sizeof<argument_list pos:start="397:44" pos:end="397:51">(<argument pos:start="397:45" pos:end="397:50"><expr pos:start="397:45" pos:end="397:50"><name pos:start="397:45" pos:end="397:50">chkbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="397:54" pos:end="397:62"><expr pos:start="397:54" pos:end="397:62"><name pos:start="397:54" pos:end="397:62">fd_params</name></expr></argument>, <argument pos:start="397:65" pos:end="397:65"><expr pos:start="397:65" pos:end="397:65"><name pos:start="397:65" pos:end="397:65">p</name></expr></argument>)</argument_list></call> <operator pos:start="397:68" pos:end="397:68">&lt;</operator> <literal type="number" pos:start="397:70" pos:end="397:70">0</literal></expr>)</condition> <block pos:start="397:73" pos:end="405:13">{<block_content pos:start="399:17" pos:end="403:25">

                <expr_stmt pos:start="399:17" pos:end="399:81"><expr pos:start="399:17" pos:end="399:80"><call pos:start="399:17" pos:end="399:80"><name pos:start="399:17" pos:end="399:28">config_error</name><argument_list pos:start="399:29" pos:end="399:80">(<argument pos:start="399:30" pos:end="399:32"><expr pos:start="399:30" pos:end="399:32"><name pos:start="399:30" pos:end="399:32">mon</name></expr></argument>, <argument pos:start="399:35" pos:end="399:68"><expr pos:start="399:35" pos:end="399:68"><literal type="string" pos:start="399:35" pos:end="399:68">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="399:71" pos:end="399:76"><expr pos:start="399:71" pos:end="399:76"><name pos:start="399:71" pos:end="399:76">chkbuf</name></expr></argument>, <argument pos:start="399:79" pos:end="399:79"><expr pos:start="399:79" pos:end="399:79"><name pos:start="399:79" pos:end="399:79">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="401:17" pos:end="401:25"><expr pos:start="401:17" pos:end="401:24"><name pos:start="401:17" pos:end="401:19">ret</name> <operator pos:start="401:21" pos:end="401:21">=</operator> <operator pos:start="401:23" pos:end="401:23">-</operator><literal type="number" pos:start="401:24" pos:end="401:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="403:17" pos:end="403:25">goto <name pos:start="403:22" pos:end="403:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="407:13" pos:end="407:38"><expr pos:start="407:13" pos:end="407:37"><name pos:start="407:13" pos:end="407:14">fd</name> <operator pos:start="407:16" pos:end="407:16">=</operator> <call pos:start="407:18" pos:end="407:37"><name pos:start="407:18" pos:end="407:23">strtol</name><argument_list pos:start="407:24" pos:end="407:37">(<argument pos:start="407:25" pos:end="407:27"><expr pos:start="407:25" pos:end="407:27"><name pos:start="407:25" pos:end="407:27">buf</name></expr></argument>, <argument pos:start="407:30" pos:end="407:33"><expr pos:start="407:30" pos:end="407:33"><name pos:start="407:30" pos:end="407:33">NULL</name></expr></argument>, <argument pos:start="407:36" pos:end="407:36"><expr pos:start="407:36" pos:end="407:36"><literal type="number" pos:start="407:36" pos:end="407:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="409:13" pos:end="409:21"><expr pos:start="409:13" pos:end="409:20"><name pos:start="409:13" pos:end="409:15">ret</name> <operator pos:start="409:17" pos:end="409:17">=</operator> <operator pos:start="409:19" pos:end="409:19">-</operator><literal type="number" pos:start="409:20" pos:end="409:20">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="411:13" pos:end="413:24"><if pos:start="411:13" pos:end="413:24">if <condition pos:start="411:16" pos:end="411:62">(<expr pos:start="411:17" pos:end="411:61"><call pos:start="411:17" pos:end="411:61"><name pos:start="411:17" pos:end="411:34">net_socket_fd_init</name><argument_list pos:start="411:35" pos:end="411:61">(<argument pos:start="411:36" pos:end="411:39"><expr pos:start="411:36" pos:end="411:39"><name pos:start="411:36" pos:end="411:39">vlan</name></expr></argument>, <argument pos:start="411:42" pos:end="411:47"><expr pos:start="411:42" pos:end="411:47"><name pos:start="411:42" pos:end="411:47">device</name></expr></argument>, <argument pos:start="411:50" pos:end="411:53"><expr pos:start="411:50" pos:end="411:53"><name pos:start="411:50" pos:end="411:53">name</name></expr></argument>, <argument pos:start="411:56" pos:end="411:57"><expr pos:start="411:56" pos:end="411:57"><name pos:start="411:56" pos:end="411:57">fd</name></expr></argument>, <argument pos:start="411:60" pos:end="411:60"><expr pos:start="411:60" pos:end="411:60"><literal type="number" pos:start="411:60" pos:end="411:60">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="413:17" pos:end="413:24"><block_content pos:start="413:17" pos:end="413:24">

                <expr_stmt pos:start="413:17" pos:end="413:24"><expr pos:start="413:17" pos:end="413:23"><name pos:start="413:17" pos:end="413:19">ret</name> <operator pos:start="413:21" pos:end="413:21">=</operator> <literal type="number" pos:start="413:23" pos:end="413:23">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="415:11" pos:end="435:9">else if <condition pos:start="415:19" pos:end="415:70">(<expr pos:start="415:20" pos:end="415:69"><call pos:start="415:20" pos:end="415:65"><name pos:start="415:20" pos:end="415:34">get_param_value</name><argument_list pos:start="415:35" pos:end="415:65">(<argument pos:start="415:36" pos:end="415:38"><expr pos:start="415:36" pos:end="415:38"><name pos:start="415:36" pos:end="415:38">buf</name></expr></argument>, <argument pos:start="415:41" pos:end="415:51"><expr pos:start="415:41" pos:end="415:51"><sizeof pos:start="415:41" pos:end="415:51">sizeof<argument_list pos:start="415:47" pos:end="415:51">(<argument pos:start="415:48" pos:end="415:50"><expr pos:start="415:48" pos:end="415:50"><name pos:start="415:48" pos:end="415:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="415:54" pos:end="415:61"><expr pos:start="415:54" pos:end="415:61"><literal type="string" pos:start="415:54" pos:end="415:61">"listen"</literal></expr></argument>, <argument pos:start="415:64" pos:end="415:64"><expr pos:start="415:64" pos:end="415:64"><name pos:start="415:64" pos:end="415:64">p</name></expr></argument>)</argument_list></call> <operator pos:start="415:67" pos:end="415:67">&gt;</operator> <literal type="number" pos:start="415:69" pos:end="415:69">0</literal></expr>)</condition> <block pos:start="415:72" pos:end="435:9">{<block_content pos:start="417:13" pos:end="433:66">

            <decl_stmt pos:start="417:13" pos:end="421:14"><decl pos:start="417:13" pos:end="421:13"><type pos:start="417:13" pos:end="417:37"><specifier pos:start="417:13" pos:end="417:18">static</specifier> <specifier pos:start="417:20" pos:end="417:24">const</specifier> <name pos:start="417:26" pos:end="417:29">char</name> <modifier pos:start="417:31" pos:end="417:31">*</modifier> <specifier pos:start="417:33" pos:end="417:37">const</specifier></type> <name pos:start="417:39" pos:end="417:53"><name pos:start="417:39" pos:end="417:51">listen_params</name><index pos:start="417:52" pos:end="417:53">[]</index></name> <init pos:start="417:55" pos:end="421:13">= <expr pos:start="417:57" pos:end="421:13"><block pos:start="417:57" pos:end="421:13">{

                <expr pos:start="419:17" pos:end="419:22"><literal type="string" pos:start="419:17" pos:end="419:22">"vlan"</literal></expr>, <expr pos:start="419:25" pos:end="419:30"><literal type="string" pos:start="419:25" pos:end="419:30">"name"</literal></expr>, <expr pos:start="419:33" pos:end="419:40"><literal type="string" pos:start="419:33" pos:end="419:40">"listen"</literal></expr>, <expr pos:start="419:43" pos:end="419:46"><name pos:start="419:43" pos:end="419:46">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="423:13" pos:end="431:13"><if pos:start="423:13" pos:end="431:13">if <condition pos:start="423:16" pos:end="423:75">(<expr pos:start="423:17" pos:end="423:74"><call pos:start="423:17" pos:end="423:70"><name pos:start="423:17" pos:end="423:28">check_params</name><argument_list pos:start="423:29" pos:end="423:70">(<argument pos:start="423:30" pos:end="423:35"><expr pos:start="423:30" pos:end="423:35"><name pos:start="423:30" pos:end="423:35">chkbuf</name></expr></argument>, <argument pos:start="423:38" pos:end="423:51"><expr pos:start="423:38" pos:end="423:51"><sizeof pos:start="423:38" pos:end="423:51">sizeof<argument_list pos:start="423:44" pos:end="423:51">(<argument pos:start="423:45" pos:end="423:50"><expr pos:start="423:45" pos:end="423:50"><name pos:start="423:45" pos:end="423:50">chkbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="423:54" pos:end="423:66"><expr pos:start="423:54" pos:end="423:66"><name pos:start="423:54" pos:end="423:66">listen_params</name></expr></argument>, <argument pos:start="423:69" pos:end="423:69"><expr pos:start="423:69" pos:end="423:69"><name pos:start="423:69" pos:end="423:69">p</name></expr></argument>)</argument_list></call> <operator pos:start="423:72" pos:end="423:72">&lt;</operator> <literal type="number" pos:start="423:74" pos:end="423:74">0</literal></expr>)</condition> <block pos:start="423:77" pos:end="431:13">{<block_content pos:start="425:17" pos:end="429:25">

                <expr_stmt pos:start="425:17" pos:end="425:81"><expr pos:start="425:17" pos:end="425:80"><call pos:start="425:17" pos:end="425:80"><name pos:start="425:17" pos:end="425:28">config_error</name><argument_list pos:start="425:29" pos:end="425:80">(<argument pos:start="425:30" pos:end="425:32"><expr pos:start="425:30" pos:end="425:32"><name pos:start="425:30" pos:end="425:32">mon</name></expr></argument>, <argument pos:start="425:35" pos:end="425:68"><expr pos:start="425:35" pos:end="425:68"><literal type="string" pos:start="425:35" pos:end="425:68">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="425:71" pos:end="425:76"><expr pos:start="425:71" pos:end="425:76"><name pos:start="425:71" pos:end="425:76">chkbuf</name></expr></argument>, <argument pos:start="425:79" pos:end="425:79"><expr pos:start="425:79" pos:end="425:79"><name pos:start="425:79" pos:end="425:79">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="427:17" pos:end="427:25"><expr pos:start="427:17" pos:end="427:24"><name pos:start="427:17" pos:end="427:19">ret</name> <operator pos:start="427:21" pos:end="427:21">=</operator> <operator pos:start="427:23" pos:end="427:23">-</operator><literal type="number" pos:start="427:24" pos:end="427:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="429:17" pos:end="429:25">goto <name pos:start="429:22" pos:end="429:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="433:13" pos:end="433:66"><expr pos:start="433:13" pos:end="433:65"><name pos:start="433:13" pos:end="433:15">ret</name> <operator pos:start="433:17" pos:end="433:17">=</operator> <call pos:start="433:19" pos:end="433:65"><name pos:start="433:19" pos:end="433:40">net_socket_listen_init</name><argument_list pos:start="433:41" pos:end="433:65">(<argument pos:start="433:42" pos:end="433:45"><expr pos:start="433:42" pos:end="433:45"><name pos:start="433:42" pos:end="433:45">vlan</name></expr></argument>, <argument pos:start="433:48" pos:end="433:53"><expr pos:start="433:48" pos:end="433:53"><name pos:start="433:48" pos:end="433:53">device</name></expr></argument>, <argument pos:start="433:56" pos:end="433:59"><expr pos:start="433:56" pos:end="433:59"><name pos:start="433:56" pos:end="433:59">name</name></expr></argument>, <argument pos:start="433:62" pos:end="433:64"><expr pos:start="433:62" pos:end="433:64"><name pos:start="433:62" pos:end="433:64">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="435:11" pos:end="455:9">else if <condition pos:start="435:19" pos:end="435:71">(<expr pos:start="435:20" pos:end="435:70"><call pos:start="435:20" pos:end="435:66"><name pos:start="435:20" pos:end="435:34">get_param_value</name><argument_list pos:start="435:35" pos:end="435:66">(<argument pos:start="435:36" pos:end="435:38"><expr pos:start="435:36" pos:end="435:38"><name pos:start="435:36" pos:end="435:38">buf</name></expr></argument>, <argument pos:start="435:41" pos:end="435:51"><expr pos:start="435:41" pos:end="435:51"><sizeof pos:start="435:41" pos:end="435:51">sizeof<argument_list pos:start="435:47" pos:end="435:51">(<argument pos:start="435:48" pos:end="435:50"><expr pos:start="435:48" pos:end="435:50"><name pos:start="435:48" pos:end="435:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="435:54" pos:end="435:62"><expr pos:start="435:54" pos:end="435:62"><literal type="string" pos:start="435:54" pos:end="435:62">"connect"</literal></expr></argument>, <argument pos:start="435:65" pos:end="435:65"><expr pos:start="435:65" pos:end="435:65"><name pos:start="435:65" pos:end="435:65">p</name></expr></argument>)</argument_list></call> <operator pos:start="435:68" pos:end="435:68">&gt;</operator> <literal type="number" pos:start="435:70" pos:end="435:70">0</literal></expr>)</condition> <block pos:start="435:73" pos:end="455:9">{<block_content pos:start="437:13" pos:end="453:67">

            <decl_stmt pos:start="437:13" pos:end="441:14"><decl pos:start="437:13" pos:end="441:13"><type pos:start="437:13" pos:end="437:37"><specifier pos:start="437:13" pos:end="437:18">static</specifier> <specifier pos:start="437:20" pos:end="437:24">const</specifier> <name pos:start="437:26" pos:end="437:29">char</name> <modifier pos:start="437:31" pos:end="437:31">*</modifier> <specifier pos:start="437:33" pos:end="437:37">const</specifier></type> <name pos:start="437:39" pos:end="437:54"><name pos:start="437:39" pos:end="437:52">connect_params</name><index pos:start="437:53" pos:end="437:54">[]</index></name> <init pos:start="437:56" pos:end="441:13">= <expr pos:start="437:58" pos:end="441:13"><block pos:start="437:58" pos:end="441:13">{

                <expr pos:start="439:17" pos:end="439:22"><literal type="string" pos:start="439:17" pos:end="439:22">"vlan"</literal></expr>, <expr pos:start="439:25" pos:end="439:30"><literal type="string" pos:start="439:25" pos:end="439:30">"name"</literal></expr>, <expr pos:start="439:33" pos:end="439:41"><literal type="string" pos:start="439:33" pos:end="439:41">"connect"</literal></expr>, <expr pos:start="439:44" pos:end="439:47"><name pos:start="439:44" pos:end="439:47">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="443:13" pos:end="451:13"><if pos:start="443:13" pos:end="451:13">if <condition pos:start="443:16" pos:end="443:76">(<expr pos:start="443:17" pos:end="443:75"><call pos:start="443:17" pos:end="443:71"><name pos:start="443:17" pos:end="443:28">check_params</name><argument_list pos:start="443:29" pos:end="443:71">(<argument pos:start="443:30" pos:end="443:35"><expr pos:start="443:30" pos:end="443:35"><name pos:start="443:30" pos:end="443:35">chkbuf</name></expr></argument>, <argument pos:start="443:38" pos:end="443:51"><expr pos:start="443:38" pos:end="443:51"><sizeof pos:start="443:38" pos:end="443:51">sizeof<argument_list pos:start="443:44" pos:end="443:51">(<argument pos:start="443:45" pos:end="443:50"><expr pos:start="443:45" pos:end="443:50"><name pos:start="443:45" pos:end="443:50">chkbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="443:54" pos:end="443:67"><expr pos:start="443:54" pos:end="443:67"><name pos:start="443:54" pos:end="443:67">connect_params</name></expr></argument>, <argument pos:start="443:70" pos:end="443:70"><expr pos:start="443:70" pos:end="443:70"><name pos:start="443:70" pos:end="443:70">p</name></expr></argument>)</argument_list></call> <operator pos:start="443:73" pos:end="443:73">&lt;</operator> <literal type="number" pos:start="443:75" pos:end="443:75">0</literal></expr>)</condition> <block pos:start="443:78" pos:end="451:13">{<block_content pos:start="445:17" pos:end="449:25">

                <expr_stmt pos:start="445:17" pos:end="445:81"><expr pos:start="445:17" pos:end="445:80"><call pos:start="445:17" pos:end="445:80"><name pos:start="445:17" pos:end="445:28">config_error</name><argument_list pos:start="445:29" pos:end="445:80">(<argument pos:start="445:30" pos:end="445:32"><expr pos:start="445:30" pos:end="445:32"><name pos:start="445:30" pos:end="445:32">mon</name></expr></argument>, <argument pos:start="445:35" pos:end="445:68"><expr pos:start="445:35" pos:end="445:68"><literal type="string" pos:start="445:35" pos:end="445:68">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="445:71" pos:end="445:76"><expr pos:start="445:71" pos:end="445:76"><name pos:start="445:71" pos:end="445:76">chkbuf</name></expr></argument>, <argument pos:start="445:79" pos:end="445:79"><expr pos:start="445:79" pos:end="445:79"><name pos:start="445:79" pos:end="445:79">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="447:17" pos:end="447:25"><expr pos:start="447:17" pos:end="447:24"><name pos:start="447:17" pos:end="447:19">ret</name> <operator pos:start="447:21" pos:end="447:21">=</operator> <operator pos:start="447:23" pos:end="447:23">-</operator><literal type="number" pos:start="447:24" pos:end="447:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="449:17" pos:end="449:25">goto <name pos:start="449:22" pos:end="449:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="453:13" pos:end="453:67"><expr pos:start="453:13" pos:end="453:66"><name pos:start="453:13" pos:end="453:15">ret</name> <operator pos:start="453:17" pos:end="453:17">=</operator> <call pos:start="453:19" pos:end="453:66"><name pos:start="453:19" pos:end="453:41">net_socket_connect_init</name><argument_list pos:start="453:42" pos:end="453:66">(<argument pos:start="453:43" pos:end="453:46"><expr pos:start="453:43" pos:end="453:46"><name pos:start="453:43" pos:end="453:46">vlan</name></expr></argument>, <argument pos:start="453:49" pos:end="453:54"><expr pos:start="453:49" pos:end="453:54"><name pos:start="453:49" pos:end="453:54">device</name></expr></argument>, <argument pos:start="453:57" pos:end="453:60"><expr pos:start="453:57" pos:end="453:60"><name pos:start="453:57" pos:end="453:60">name</name></expr></argument>, <argument pos:start="453:63" pos:end="453:65"><expr pos:start="453:63" pos:end="453:65"><name pos:start="453:63" pos:end="453:65">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="455:11" pos:end="475:9">else if <condition pos:start="455:19" pos:end="455:69">(<expr pos:start="455:20" pos:end="455:68"><call pos:start="455:20" pos:end="455:64"><name pos:start="455:20" pos:end="455:34">get_param_value</name><argument_list pos:start="455:35" pos:end="455:64">(<argument pos:start="455:36" pos:end="455:38"><expr pos:start="455:36" pos:end="455:38"><name pos:start="455:36" pos:end="455:38">buf</name></expr></argument>, <argument pos:start="455:41" pos:end="455:51"><expr pos:start="455:41" pos:end="455:51"><sizeof pos:start="455:41" pos:end="455:51">sizeof<argument_list pos:start="455:47" pos:end="455:51">(<argument pos:start="455:48" pos:end="455:50"><expr pos:start="455:48" pos:end="455:50"><name pos:start="455:48" pos:end="455:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="455:54" pos:end="455:60"><expr pos:start="455:54" pos:end="455:60"><literal type="string" pos:start="455:54" pos:end="455:60">"mcast"</literal></expr></argument>, <argument pos:start="455:63" pos:end="455:63"><expr pos:start="455:63" pos:end="455:63"><name pos:start="455:63" pos:end="455:63">p</name></expr></argument>)</argument_list></call> <operator pos:start="455:66" pos:end="455:66">&gt;</operator> <literal type="number" pos:start="455:68" pos:end="455:68">0</literal></expr>)</condition> <block pos:start="455:71" pos:end="475:9">{<block_content pos:start="457:13" pos:end="473:65">

            <decl_stmt pos:start="457:13" pos:end="461:14"><decl pos:start="457:13" pos:end="461:13"><type pos:start="457:13" pos:end="457:37"><specifier pos:start="457:13" pos:end="457:18">static</specifier> <specifier pos:start="457:20" pos:end="457:24">const</specifier> <name pos:start="457:26" pos:end="457:29">char</name> <modifier pos:start="457:31" pos:end="457:31">*</modifier> <specifier pos:start="457:33" pos:end="457:37">const</specifier></type> <name pos:start="457:39" pos:end="457:52"><name pos:start="457:39" pos:end="457:50">mcast_params</name><index pos:start="457:51" pos:end="457:52">[]</index></name> <init pos:start="457:54" pos:end="461:13">= <expr pos:start="457:56" pos:end="461:13"><block pos:start="457:56" pos:end="461:13">{

                <expr pos:start="459:17" pos:end="459:22"><literal type="string" pos:start="459:17" pos:end="459:22">"vlan"</literal></expr>, <expr pos:start="459:25" pos:end="459:30"><literal type="string" pos:start="459:25" pos:end="459:30">"name"</literal></expr>, <expr pos:start="459:33" pos:end="459:39"><literal type="string" pos:start="459:33" pos:end="459:39">"mcast"</literal></expr>, <expr pos:start="459:42" pos:end="459:45"><name pos:start="459:42" pos:end="459:45">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="463:13" pos:end="471:13"><if pos:start="463:13" pos:end="471:13">if <condition pos:start="463:16" pos:end="463:74">(<expr pos:start="463:17" pos:end="463:73"><call pos:start="463:17" pos:end="463:69"><name pos:start="463:17" pos:end="463:28">check_params</name><argument_list pos:start="463:29" pos:end="463:69">(<argument pos:start="463:30" pos:end="463:35"><expr pos:start="463:30" pos:end="463:35"><name pos:start="463:30" pos:end="463:35">chkbuf</name></expr></argument>, <argument pos:start="463:38" pos:end="463:51"><expr pos:start="463:38" pos:end="463:51"><sizeof pos:start="463:38" pos:end="463:51">sizeof<argument_list pos:start="463:44" pos:end="463:51">(<argument pos:start="463:45" pos:end="463:50"><expr pos:start="463:45" pos:end="463:50"><name pos:start="463:45" pos:end="463:50">chkbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="463:54" pos:end="463:65"><expr pos:start="463:54" pos:end="463:65"><name pos:start="463:54" pos:end="463:65">mcast_params</name></expr></argument>, <argument pos:start="463:68" pos:end="463:68"><expr pos:start="463:68" pos:end="463:68"><name pos:start="463:68" pos:end="463:68">p</name></expr></argument>)</argument_list></call> <operator pos:start="463:71" pos:end="463:71">&lt;</operator> <literal type="number" pos:start="463:73" pos:end="463:73">0</literal></expr>)</condition> <block pos:start="463:76" pos:end="471:13">{<block_content pos:start="465:17" pos:end="469:25">

                <expr_stmt pos:start="465:17" pos:end="465:81"><expr pos:start="465:17" pos:end="465:80"><call pos:start="465:17" pos:end="465:80"><name pos:start="465:17" pos:end="465:28">config_error</name><argument_list pos:start="465:29" pos:end="465:80">(<argument pos:start="465:30" pos:end="465:32"><expr pos:start="465:30" pos:end="465:32"><name pos:start="465:30" pos:end="465:32">mon</name></expr></argument>, <argument pos:start="465:35" pos:end="465:68"><expr pos:start="465:35" pos:end="465:68"><literal type="string" pos:start="465:35" pos:end="465:68">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="465:71" pos:end="465:76"><expr pos:start="465:71" pos:end="465:76"><name pos:start="465:71" pos:end="465:76">chkbuf</name></expr></argument>, <argument pos:start="465:79" pos:end="465:79"><expr pos:start="465:79" pos:end="465:79"><name pos:start="465:79" pos:end="465:79">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="467:17" pos:end="467:25"><expr pos:start="467:17" pos:end="467:24"><name pos:start="467:17" pos:end="467:19">ret</name> <operator pos:start="467:21" pos:end="467:21">=</operator> <operator pos:start="467:23" pos:end="467:23">-</operator><literal type="number" pos:start="467:24" pos:end="467:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="469:17" pos:end="469:25">goto <name pos:start="469:22" pos:end="469:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="473:13" pos:end="473:65"><expr pos:start="473:13" pos:end="473:64"><name pos:start="473:13" pos:end="473:15">ret</name> <operator pos:start="473:17" pos:end="473:17">=</operator> <call pos:start="473:19" pos:end="473:64"><name pos:start="473:19" pos:end="473:39">net_socket_mcast_init</name><argument_list pos:start="473:40" pos:end="473:64">(<argument pos:start="473:41" pos:end="473:44"><expr pos:start="473:41" pos:end="473:44"><name pos:start="473:41" pos:end="473:44">vlan</name></expr></argument>, <argument pos:start="473:47" pos:end="473:52"><expr pos:start="473:47" pos:end="473:52"><name pos:start="473:47" pos:end="473:52">device</name></expr></argument>, <argument pos:start="473:55" pos:end="473:58"><expr pos:start="473:55" pos:end="473:58"><name pos:start="473:55" pos:end="473:58">name</name></expr></argument>, <argument pos:start="473:61" pos:end="473:63"><expr pos:start="473:61" pos:end="473:63"><name pos:start="473:61" pos:end="473:63">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="475:11" pos:end="483:9">else <block pos:start="475:16" pos:end="483:9">{<block_content pos:start="477:13" pos:end="481:21">

            <expr_stmt pos:start="477:13" pos:end="477:65"><expr pos:start="477:13" pos:end="477:64"><call pos:start="477:13" pos:end="477:64"><name pos:start="477:13" pos:end="477:24">config_error</name><argument_list pos:start="477:25" pos:end="477:64">(<argument pos:start="477:26" pos:end="477:28"><expr pos:start="477:26" pos:end="477:28"><name pos:start="477:26" pos:end="477:28">mon</name></expr></argument>, <argument pos:start="477:31" pos:end="477:60"><expr pos:start="477:31" pos:end="477:60"><literal type="string" pos:start="477:31" pos:end="477:60">"Unknown socket options: %s\n"</literal></expr></argument>, <argument pos:start="477:63" pos:end="477:63"><expr pos:start="477:63" pos:end="477:63"><name pos:start="477:63" pos:end="477:63">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="479:13" pos:end="479:21"><expr pos:start="479:13" pos:end="479:20"><name pos:start="479:13" pos:end="479:15">ret</name> <operator pos:start="479:17" pos:end="479:17">=</operator> <operator pos:start="479:19" pos:end="479:19">-</operator><literal type="number" pos:start="479:20" pos:end="479:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="481:13" pos:end="481:21">goto <name pos:start="481:18" pos:end="481:20">out</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="485:9" pos:end="485:29"><expr pos:start="485:9" pos:end="485:28"><name pos:start="485:9" pos:end="485:26"><name pos:start="485:9" pos:end="485:12">vlan</name><operator pos:start="485:13" pos:end="485:14">-&gt;</operator><name pos:start="485:15" pos:end="485:26">nb_host_devs</name></name><operator pos:start="485:27" pos:end="485:28">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="487:7" pos:end="551:5">else

<cpp:ifdef pos:start="489:1" pos:end="489:17">#<cpp:directive pos:start="489:2" pos:end="489:6">ifdef</cpp:directive> <name pos:start="489:8" pos:end="489:17">CONFIG_VDE</name></cpp:ifdef>

    if <condition pos:start="491:8" pos:end="491:31">(<expr pos:start="491:9" pos:end="491:30"><operator pos:start="491:9" pos:end="491:9">!</operator><call pos:start="491:10" pos:end="491:30"><name pos:start="491:10" pos:end="491:15">strcmp</name><argument_list pos:start="491:16" pos:end="491:30">(<argument pos:start="491:17" pos:end="491:22"><expr pos:start="491:17" pos:end="491:22"><name pos:start="491:17" pos:end="491:22">device</name></expr></argument>, <argument pos:start="491:25" pos:end="491:29"><expr pos:start="491:25" pos:end="491:29"><literal type="string" pos:start="491:25" pos:end="491:29">"vde"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="491:33" pos:end="551:5">{<block_content pos:start="493:9" pos:end="549:88">

        <decl_stmt pos:start="493:9" pos:end="497:10"><decl pos:start="493:9" pos:end="497:9"><type pos:start="493:9" pos:end="493:33"><specifier pos:start="493:9" pos:end="493:14">static</specifier> <specifier pos:start="493:16" pos:end="493:20">const</specifier> <name pos:start="493:22" pos:end="493:25">char</name> <modifier pos:start="493:27" pos:end="493:27">*</modifier> <specifier pos:start="493:29" pos:end="493:33">const</specifier></type> <name pos:start="493:35" pos:end="493:46"><name pos:start="493:35" pos:end="493:44">vde_params</name><index pos:start="493:45" pos:end="493:46">[]</index></name> <init pos:start="493:48" pos:end="497:9">= <expr pos:start="493:50" pos:end="497:9"><block pos:start="493:50" pos:end="497:9">{

            <expr pos:start="495:13" pos:end="495:18"><literal type="string" pos:start="495:13" pos:end="495:18">"vlan"</literal></expr>, <expr pos:start="495:21" pos:end="495:26"><literal type="string" pos:start="495:21" pos:end="495:26">"name"</literal></expr>, <expr pos:start="495:29" pos:end="495:34"><literal type="string" pos:start="495:29" pos:end="495:34">"sock"</literal></expr>, <expr pos:start="495:37" pos:end="495:42"><literal type="string" pos:start="495:37" pos:end="495:42">"port"</literal></expr>, <expr pos:start="495:45" pos:end="495:51"><literal type="string" pos:start="495:45" pos:end="495:51">"group"</literal></expr>, <expr pos:start="495:54" pos:end="495:59"><literal type="string" pos:start="495:54" pos:end="495:59">"mode"</literal></expr>, <expr pos:start="495:62" pos:end="495:65"><name pos:start="495:62" pos:end="495:65">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="499:9" pos:end="499:44"><decl pos:start="499:9" pos:end="499:27"><type pos:start="499:9" pos:end="499:12"><name pos:start="499:9" pos:end="499:12">char</name></type> <name pos:start="499:14" pos:end="499:27"><name pos:start="499:14" pos:end="499:21">vde_sock</name><index pos:start="499:22" pos:end="499:27">[<expr pos:start="499:23" pos:end="499:26"><literal type="number" pos:start="499:23" pos:end="499:26">1024</literal></expr>]</index></name></decl>, <decl pos:start="499:30" pos:end="499:43"><type ref="prev" pos:start="499:9" pos:end="499:12"/><name pos:start="499:30" pos:end="499:43"><name pos:start="499:30" pos:end="499:38">vde_group</name><index pos:start="499:39" pos:end="499:43">[<expr pos:start="499:40" pos:end="499:42"><literal type="number" pos:start="499:40" pos:end="499:42">512</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt pos:start="501:9" pos:end="501:31"><decl pos:start="501:9" pos:end="501:20"><type pos:start="501:9" pos:end="501:11"><name pos:start="501:9" pos:end="501:11">int</name></type> <name pos:start="501:13" pos:end="501:20">vde_port</name></decl>, <decl pos:start="501:23" pos:end="501:30"><type ref="prev" pos:start="501:9" pos:end="501:11"/><name pos:start="501:23" pos:end="501:30">vde_mode</name></decl>;</decl_stmt>



        <if_stmt pos:start="505:9" pos:end="513:9"><if pos:start="505:9" pos:end="513:9">if <condition pos:start="505:12" pos:end="505:62">(<expr pos:start="505:13" pos:end="505:61"><call pos:start="505:13" pos:end="505:57"><name pos:start="505:13" pos:end="505:24">check_params</name><argument_list pos:start="505:25" pos:end="505:57">(<argument pos:start="505:26" pos:end="505:28"><expr pos:start="505:26" pos:end="505:28"><name pos:start="505:26" pos:end="505:28">buf</name></expr></argument>, <argument pos:start="505:31" pos:end="505:41"><expr pos:start="505:31" pos:end="505:41"><sizeof pos:start="505:31" pos:end="505:41">sizeof<argument_list pos:start="505:37" pos:end="505:41">(<argument pos:start="505:38" pos:end="505:40"><expr pos:start="505:38" pos:end="505:40"><name pos:start="505:38" pos:end="505:40">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="505:44" pos:end="505:53"><expr pos:start="505:44" pos:end="505:53"><name pos:start="505:44" pos:end="505:53">vde_params</name></expr></argument>, <argument pos:start="505:56" pos:end="505:56"><expr pos:start="505:56" pos:end="505:56"><name pos:start="505:56" pos:end="505:56">p</name></expr></argument>)</argument_list></call> <operator pos:start="505:59" pos:end="505:59">&lt;</operator> <literal type="number" pos:start="505:61" pos:end="505:61">0</literal></expr>)</condition> <block pos:start="505:64" pos:end="513:9">{<block_content pos:start="507:13" pos:end="511:21">

            <expr_stmt pos:start="507:13" pos:end="507:74"><expr pos:start="507:13" pos:end="507:73"><call pos:start="507:13" pos:end="507:73"><name pos:start="507:13" pos:end="507:24">config_error</name><argument_list pos:start="507:25" pos:end="507:73">(<argument pos:start="507:26" pos:end="507:28"><expr pos:start="507:26" pos:end="507:28"><name pos:start="507:26" pos:end="507:28">mon</name></expr></argument>, <argument pos:start="507:31" pos:end="507:64"><expr pos:start="507:31" pos:end="507:64"><literal type="string" pos:start="507:31" pos:end="507:64">"invalid parameter '%s' in '%s'\n"</literal></expr></argument>, <argument pos:start="507:67" pos:end="507:69"><expr pos:start="507:67" pos:end="507:69"><name pos:start="507:67" pos:end="507:69">buf</name></expr></argument>, <argument pos:start="507:72" pos:end="507:72"><expr pos:start="507:72" pos:end="507:72"><name pos:start="507:72" pos:end="507:72">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="509:13" pos:end="509:21"><expr pos:start="509:13" pos:end="509:20"><name pos:start="509:13" pos:end="509:15">ret</name> <operator pos:start="509:17" pos:end="509:17">=</operator> <operator pos:start="509:19" pos:end="509:19">-</operator><literal type="number" pos:start="509:20" pos:end="509:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="511:13" pos:end="511:21">goto <name pos:start="511:18" pos:end="511:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="515:9" pos:end="515:29"><expr pos:start="515:9" pos:end="515:28"><name pos:start="515:9" pos:end="515:26"><name pos:start="515:9" pos:end="515:12">vlan</name><operator pos:start="515:13" pos:end="515:14">-&gt;</operator><name pos:start="515:15" pos:end="515:26">nb_host_devs</name></name><operator pos:start="515:27" pos:end="515:28">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="517:9" pos:end="521:9"><if pos:start="517:9" pos:end="521:9">if <condition pos:start="517:12" pos:end="517:72">(<expr pos:start="517:13" pos:end="517:71"><call pos:start="517:13" pos:end="517:66"><name pos:start="517:13" pos:end="517:27">get_param_value</name><argument_list pos:start="517:28" pos:end="517:66">(<argument pos:start="517:29" pos:end="517:36"><expr pos:start="517:29" pos:end="517:36"><name pos:start="517:29" pos:end="517:36">vde_sock</name></expr></argument>, <argument pos:start="517:39" pos:end="517:54"><expr pos:start="517:39" pos:end="517:54"><sizeof pos:start="517:39" pos:end="517:54">sizeof<argument_list pos:start="517:45" pos:end="517:54">(<argument pos:start="517:46" pos:end="517:53"><expr pos:start="517:46" pos:end="517:53"><name pos:start="517:46" pos:end="517:53">vde_sock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="517:57" pos:end="517:62"><expr pos:start="517:57" pos:end="517:62"><literal type="string" pos:start="517:57" pos:end="517:62">"sock"</literal></expr></argument>, <argument pos:start="517:65" pos:end="517:65"><expr pos:start="517:65" pos:end="517:65"><name pos:start="517:65" pos:end="517:65">p</name></expr></argument>)</argument_list></call> <operator pos:start="517:68" pos:end="517:69">&lt;=</operator> <literal type="number" pos:start="517:71" pos:end="517:71">0</literal></expr>)</condition> <block pos:start="517:74" pos:end="521:9">{<block_content pos:start="519:13" pos:end="519:31">

	    <expr_stmt pos:start="519:13" pos:end="519:31"><expr pos:start="519:13" pos:end="519:30"><name pos:start="519:13" pos:end="519:23"><name pos:start="519:13" pos:end="519:20">vde_sock</name><index pos:start="519:21" pos:end="519:23">[<expr pos:start="519:22" pos:end="519:22"><literal type="number" pos:start="519:22" pos:end="519:22">0</literal></expr>]</index></name> <operator pos:start="519:25" pos:end="519:25">=</operator> <literal type="char" pos:start="519:27" pos:end="519:30">'\0'</literal></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt pos:start="523:9" pos:end="531:9"><if pos:start="523:9" pos:end="527:9">if <condition pos:start="523:12" pos:end="523:61">(<expr pos:start="523:13" pos:end="523:60"><call pos:start="523:13" pos:end="523:56"><name pos:start="523:13" pos:end="523:27">get_param_value</name><argument_list pos:start="523:28" pos:end="523:56">(<argument pos:start="523:29" pos:end="523:31"><expr pos:start="523:29" pos:end="523:31"><name pos:start="523:29" pos:end="523:31">buf</name></expr></argument>, <argument pos:start="523:34" pos:end="523:44"><expr pos:start="523:34" pos:end="523:44"><sizeof pos:start="523:34" pos:end="523:44">sizeof<argument_list pos:start="523:40" pos:end="523:44">(<argument pos:start="523:41" pos:end="523:43"><expr pos:start="523:41" pos:end="523:43"><name pos:start="523:41" pos:end="523:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="523:47" pos:end="523:52"><expr pos:start="523:47" pos:end="523:52"><literal type="string" pos:start="523:47" pos:end="523:52">"port"</literal></expr></argument>, <argument pos:start="523:55" pos:end="523:55"><expr pos:start="523:55" pos:end="523:55"><name pos:start="523:55" pos:end="523:55">p</name></expr></argument>)</argument_list></call> <operator pos:start="523:58" pos:end="523:58">&gt;</operator> <literal type="number" pos:start="523:60" pos:end="523:60">0</literal></expr>)</condition> <block pos:start="523:63" pos:end="527:9">{<block_content pos:start="525:13" pos:end="525:45">

	    <expr_stmt pos:start="525:13" pos:end="525:45"><expr pos:start="525:13" pos:end="525:44"><name pos:start="525:13" pos:end="525:20">vde_port</name> <operator pos:start="525:22" pos:end="525:22">=</operator> <call pos:start="525:24" pos:end="525:44"><name pos:start="525:24" pos:end="525:29">strtol</name><argument_list pos:start="525:30" pos:end="525:44">(<argument pos:start="525:31" pos:end="525:33"><expr pos:start="525:31" pos:end="525:33"><name pos:start="525:31" pos:end="525:33">buf</name></expr></argument>, <argument pos:start="525:36" pos:end="525:39"><expr pos:start="525:36" pos:end="525:39"><name pos:start="525:36" pos:end="525:39">NULL</name></expr></argument>, <argument pos:start="525:42" pos:end="525:43"><expr pos:start="525:42" pos:end="525:43"><literal type="number" pos:start="525:42" pos:end="525:43">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="527:11" pos:end="531:9">else <block pos:start="527:16" pos:end="531:9">{<block_content pos:start="529:13" pos:end="529:25">

	    <expr_stmt pos:start="529:13" pos:end="529:25"><expr pos:start="529:13" pos:end="529:24"><name pos:start="529:13" pos:end="529:20">vde_port</name> <operator pos:start="529:22" pos:end="529:22">=</operator> <literal type="number" pos:start="529:24" pos:end="529:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

	<if_stmt pos:start="533:9" pos:end="537:9"><if pos:start="533:9" pos:end="537:9">if <condition pos:start="533:12" pos:end="533:75">(<expr pos:start="533:13" pos:end="533:74"><call pos:start="533:13" pos:end="533:69"><name pos:start="533:13" pos:end="533:27">get_param_value</name><argument_list pos:start="533:28" pos:end="533:69">(<argument pos:start="533:29" pos:end="533:37"><expr pos:start="533:29" pos:end="533:37"><name pos:start="533:29" pos:end="533:37">vde_group</name></expr></argument>, <argument pos:start="533:40" pos:end="533:56"><expr pos:start="533:40" pos:end="533:56"><sizeof pos:start="533:40" pos:end="533:56">sizeof<argument_list pos:start="533:46" pos:end="533:56">(<argument pos:start="533:47" pos:end="533:55"><expr pos:start="533:47" pos:end="533:55"><name pos:start="533:47" pos:end="533:55">vde_group</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="533:59" pos:end="533:65"><expr pos:start="533:59" pos:end="533:65"><literal type="string" pos:start="533:59" pos:end="533:65">"group"</literal></expr></argument>, <argument pos:start="533:68" pos:end="533:68"><expr pos:start="533:68" pos:end="533:68"><name pos:start="533:68" pos:end="533:68">p</name></expr></argument>)</argument_list></call> <operator pos:start="533:71" pos:end="533:72">&lt;=</operator> <literal type="number" pos:start="533:74" pos:end="533:74">0</literal></expr>)</condition> <block pos:start="533:77" pos:end="537:9">{<block_content pos:start="535:13" pos:end="535:32">

	    <expr_stmt pos:start="535:13" pos:end="535:32"><expr pos:start="535:13" pos:end="535:31"><name pos:start="535:13" pos:end="535:24"><name pos:start="535:13" pos:end="535:21">vde_group</name><index pos:start="535:22" pos:end="535:24">[<expr pos:start="535:23" pos:end="535:23"><literal type="number" pos:start="535:23" pos:end="535:23">0</literal></expr>]</index></name> <operator pos:start="535:26" pos:end="535:26">=</operator> <literal type="char" pos:start="535:28" pos:end="535:31">'\0'</literal></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt pos:start="539:9" pos:end="547:9"><if pos:start="539:9" pos:end="543:9">if <condition pos:start="539:12" pos:end="539:61">(<expr pos:start="539:13" pos:end="539:60"><call pos:start="539:13" pos:end="539:56"><name pos:start="539:13" pos:end="539:27">get_param_value</name><argument_list pos:start="539:28" pos:end="539:56">(<argument pos:start="539:29" pos:end="539:31"><expr pos:start="539:29" pos:end="539:31"><name pos:start="539:29" pos:end="539:31">buf</name></expr></argument>, <argument pos:start="539:34" pos:end="539:44"><expr pos:start="539:34" pos:end="539:44"><sizeof pos:start="539:34" pos:end="539:44">sizeof<argument_list pos:start="539:40" pos:end="539:44">(<argument pos:start="539:41" pos:end="539:43"><expr pos:start="539:41" pos:end="539:43"><name pos:start="539:41" pos:end="539:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="539:47" pos:end="539:52"><expr pos:start="539:47" pos:end="539:52"><literal type="string" pos:start="539:47" pos:end="539:52">"mode"</literal></expr></argument>, <argument pos:start="539:55" pos:end="539:55"><expr pos:start="539:55" pos:end="539:55"><name pos:start="539:55" pos:end="539:55">p</name></expr></argument>)</argument_list></call> <operator pos:start="539:58" pos:end="539:58">&gt;</operator> <literal type="number" pos:start="539:60" pos:end="539:60">0</literal></expr>)</condition> <block pos:start="539:63" pos:end="543:9">{<block_content pos:start="541:13" pos:end="541:44">

	    <expr_stmt pos:start="541:13" pos:end="541:44"><expr pos:start="541:13" pos:end="541:43"><name pos:start="541:13" pos:end="541:20">vde_mode</name> <operator pos:start="541:22" pos:end="541:22">=</operator> <call pos:start="541:24" pos:end="541:43"><name pos:start="541:24" pos:end="541:29">strtol</name><argument_list pos:start="541:30" pos:end="541:43">(<argument pos:start="541:31" pos:end="541:33"><expr pos:start="541:31" pos:end="541:33"><name pos:start="541:31" pos:end="541:33">buf</name></expr></argument>, <argument pos:start="541:36" pos:end="541:39"><expr pos:start="541:36" pos:end="541:39"><name pos:start="541:36" pos:end="541:39">NULL</name></expr></argument>, <argument pos:start="541:42" pos:end="541:42"><expr pos:start="541:42" pos:end="541:42"><literal type="number" pos:start="541:42" pos:end="541:42">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="543:11" pos:end="547:9">else <block pos:start="543:16" pos:end="547:9">{<block_content pos:start="545:13" pos:end="545:28">

	    <expr_stmt pos:start="545:13" pos:end="545:28"><expr pos:start="545:13" pos:end="545:27"><name pos:start="545:13" pos:end="545:20">vde_mode</name> <operator pos:start="545:22" pos:end="545:22">=</operator> <literal type="number" pos:start="545:24" pos:end="545:27">0700</literal></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

	<expr_stmt pos:start="549:9" pos:end="549:88"><expr pos:start="549:9" pos:end="549:87"><name pos:start="549:9" pos:end="549:11">ret</name> <operator pos:start="549:13" pos:end="549:13">=</operator> <call pos:start="549:15" pos:end="549:87"><name pos:start="549:15" pos:end="549:26">net_vde_init</name><argument_list pos:start="549:27" pos:end="549:87">(<argument pos:start="549:28" pos:end="549:31"><expr pos:start="549:28" pos:end="549:31"><name pos:start="549:28" pos:end="549:31">vlan</name></expr></argument>, <argument pos:start="549:34" pos:end="549:39"><expr pos:start="549:34" pos:end="549:39"><name pos:start="549:34" pos:end="549:39">device</name></expr></argument>, <argument pos:start="549:42" pos:end="549:45"><expr pos:start="549:42" pos:end="549:45"><name pos:start="549:42" pos:end="549:45">name</name></expr></argument>, <argument pos:start="549:48" pos:end="549:55"><expr pos:start="549:48" pos:end="549:55"><name pos:start="549:48" pos:end="549:55">vde_sock</name></expr></argument>, <argument pos:start="549:58" pos:end="549:65"><expr pos:start="549:58" pos:end="549:65"><name pos:start="549:58" pos:end="549:65">vde_port</name></expr></argument>, <argument pos:start="549:68" pos:end="549:76"><expr pos:start="549:68" pos:end="549:76"><name pos:start="549:68" pos:end="549:76">vde_group</name></expr></argument>, <argument pos:start="549:79" pos:end="549:86"><expr pos:start="549:79" pos:end="549:86"><name pos:start="549:79" pos:end="549:86">vde_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="551:7" pos:end="575:5">else

<cpp:endif pos:start="553:1" pos:end="553:6">#<cpp:directive pos:start="553:2" pos:end="553:6">endif</cpp:directive></cpp:endif>

    if <condition pos:start="555:8" pos:end="555:32">(<expr pos:start="555:9" pos:end="555:31"><operator pos:start="555:9" pos:end="555:9">!</operator><call pos:start="555:10" pos:end="555:31"><name pos:start="555:10" pos:end="555:15">strcmp</name><argument_list pos:start="555:16" pos:end="555:31">(<argument pos:start="555:17" pos:end="555:22"><expr pos:start="555:17" pos:end="555:22"><name pos:start="555:17" pos:end="555:22">device</name></expr></argument>, <argument pos:start="555:25" pos:end="555:30"><expr pos:start="555:25" pos:end="555:30"><literal type="string" pos:start="555:25" pos:end="555:30">"dump"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="555:34" pos:end="575:5">{<block_content pos:start="557:9" pos:end="573:63">

        <decl_stmt pos:start="557:9" pos:end="557:24"><decl pos:start="557:9" pos:end="557:23"><type pos:start="557:9" pos:end="557:11"><name pos:start="557:9" pos:end="557:11">int</name></type> <name pos:start="557:13" pos:end="557:15">len</name> <init pos:start="557:17" pos:end="557:23">= <expr pos:start="557:19" pos:end="557:23"><literal type="number" pos:start="557:19" pos:end="557:23">65536</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="561:9" pos:end="565:9"><if pos:start="561:9" pos:end="565:9">if <condition pos:start="561:12" pos:end="561:60">(<expr pos:start="561:13" pos:end="561:59"><call pos:start="561:13" pos:end="561:55"><name pos:start="561:13" pos:end="561:27">get_param_value</name><argument_list pos:start="561:28" pos:end="561:55">(<argument pos:start="561:29" pos:end="561:31"><expr pos:start="561:29" pos:end="561:31"><name pos:start="561:29" pos:end="561:31">buf</name></expr></argument>, <argument pos:start="561:34" pos:end="561:44"><expr pos:start="561:34" pos:end="561:44"><sizeof pos:start="561:34" pos:end="561:44">sizeof<argument_list pos:start="561:40" pos:end="561:44">(<argument pos:start="561:41" pos:end="561:43"><expr pos:start="561:41" pos:end="561:43"><name pos:start="561:41" pos:end="561:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="561:47" pos:end="561:51"><expr pos:start="561:47" pos:end="561:51"><literal type="string" pos:start="561:47" pos:end="561:51">"len"</literal></expr></argument>, <argument pos:start="561:54" pos:end="561:54"><expr pos:start="561:54" pos:end="561:54"><name pos:start="561:54" pos:end="561:54">p</name></expr></argument>)</argument_list></call> <operator pos:start="561:57" pos:end="561:57">&gt;</operator> <literal type="number" pos:start="561:59" pos:end="561:59">0</literal></expr>)</condition> <block pos:start="561:62" pos:end="565:9">{<block_content pos:start="563:13" pos:end="563:39">

            <expr_stmt pos:start="563:13" pos:end="563:39"><expr pos:start="563:13" pos:end="563:38"><name pos:start="563:13" pos:end="563:15">len</name> <operator pos:start="563:17" pos:end="563:17">=</operator> <call pos:start="563:19" pos:end="563:38"><name pos:start="563:19" pos:end="563:24">strtol</name><argument_list pos:start="563:25" pos:end="563:38">(<argument pos:start="563:26" pos:end="563:28"><expr pos:start="563:26" pos:end="563:28"><name pos:start="563:26" pos:end="563:28">buf</name></expr></argument>, <argument pos:start="563:31" pos:end="563:34"><expr pos:start="563:31" pos:end="563:34"><name pos:start="563:31" pos:end="563:34">NULL</name></expr></argument>, <argument pos:start="563:37" pos:end="563:37"><expr pos:start="563:37" pos:end="563:37"><literal type="number" pos:start="563:37" pos:end="563:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="567:9" pos:end="571:9"><if pos:start="567:9" pos:end="571:9">if <condition pos:start="567:12" pos:end="567:58">(<expr pos:start="567:13" pos:end="567:57"><operator pos:start="567:13" pos:end="567:13">!</operator><call pos:start="567:14" pos:end="567:57"><name pos:start="567:14" pos:end="567:28">get_param_value</name><argument_list pos:start="567:29" pos:end="567:57">(<argument pos:start="567:30" pos:end="567:32"><expr pos:start="567:30" pos:end="567:32"><name pos:start="567:30" pos:end="567:32">buf</name></expr></argument>, <argument pos:start="567:35" pos:end="567:45"><expr pos:start="567:35" pos:end="567:45"><sizeof pos:start="567:35" pos:end="567:45">sizeof<argument_list pos:start="567:41" pos:end="567:45">(<argument pos:start="567:42" pos:end="567:44"><expr pos:start="567:42" pos:end="567:44"><name pos:start="567:42" pos:end="567:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="567:48" pos:end="567:53"><expr pos:start="567:48" pos:end="567:53"><literal type="string" pos:start="567:48" pos:end="567:53">"file"</literal></expr></argument>, <argument pos:start="567:56" pos:end="567:56"><expr pos:start="567:56" pos:end="567:56"><name pos:start="567:56" pos:end="567:56">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="567:60" pos:end="571:9">{<block_content pos:start="569:13" pos:end="569:68">

            <expr_stmt pos:start="569:13" pos:end="569:68"><expr pos:start="569:13" pos:end="569:67"><call pos:start="569:13" pos:end="569:67"><name pos:start="569:13" pos:end="569:20">snprintf</name><argument_list pos:start="569:21" pos:end="569:67">(<argument pos:start="569:22" pos:end="569:24"><expr pos:start="569:22" pos:end="569:24"><name pos:start="569:22" pos:end="569:24">buf</name></expr></argument>, <argument pos:start="569:27" pos:end="569:37"><expr pos:start="569:27" pos:end="569:37"><sizeof pos:start="569:27" pos:end="569:37">sizeof<argument_list pos:start="569:33" pos:end="569:37">(<argument pos:start="569:34" pos:end="569:36"><expr pos:start="569:34" pos:end="569:36"><name pos:start="569:34" pos:end="569:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="569:40" pos:end="569:57"><expr pos:start="569:40" pos:end="569:57"><literal type="string" pos:start="569:40" pos:end="569:57">"qemu-vlan%d.pcap"</literal></expr></argument>, <argument pos:start="569:60" pos:end="569:66"><expr pos:start="569:60" pos:end="569:66"><name pos:start="569:60" pos:end="569:66">vlan_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="573:9" pos:end="573:63"><expr pos:start="573:9" pos:end="573:62"><name pos:start="573:9" pos:end="573:11">ret</name> <operator pos:start="573:13" pos:end="573:13">=</operator> <call pos:start="573:15" pos:end="573:62"><name pos:start="573:15" pos:end="573:27">net_dump_init</name><argument_list pos:start="573:28" pos:end="573:62">(<argument pos:start="573:29" pos:end="573:31"><expr pos:start="573:29" pos:end="573:31"><name pos:start="573:29" pos:end="573:31">mon</name></expr></argument>, <argument pos:start="573:34" pos:end="573:37"><expr pos:start="573:34" pos:end="573:37"><name pos:start="573:34" pos:end="573:37">vlan</name></expr></argument>, <argument pos:start="573:40" pos:end="573:45"><expr pos:start="573:40" pos:end="573:45"><name pos:start="573:40" pos:end="573:45">device</name></expr></argument>, <argument pos:start="573:48" pos:end="573:51"><expr pos:start="573:48" pos:end="573:51"><name pos:start="573:48" pos:end="573:51">name</name></expr></argument>, <argument pos:start="573:54" pos:end="573:56"><expr pos:start="573:54" pos:end="573:56"><name pos:start="573:54" pos:end="573:56">buf</name></expr></argument>, <argument pos:start="573:59" pos:end="573:61"><expr pos:start="573:59" pos:end="573:61"><name pos:start="573:59" pos:end="573:61">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="575:7" pos:end="583:5">else <block pos:start="575:12" pos:end="583:5">{<block_content pos:start="577:9" pos:end="581:17">

        <expr_stmt pos:start="577:9" pos:end="577:66"><expr pos:start="577:9" pos:end="577:65"><call pos:start="577:9" pos:end="577:65"><name pos:start="577:9" pos:end="577:20">config_error</name><argument_list pos:start="577:21" pos:end="577:65">(<argument pos:start="577:22" pos:end="577:24"><expr pos:start="577:22" pos:end="577:24"><name pos:start="577:22" pos:end="577:24">mon</name></expr></argument>, <argument pos:start="577:27" pos:end="577:56"><expr pos:start="577:27" pos:end="577:56"><literal type="string" pos:start="577:27" pos:end="577:56">"Unknown network device: %s\n"</literal></expr></argument>, <argument pos:start="577:59" pos:end="577:64"><expr pos:start="577:59" pos:end="577:64"><name pos:start="577:59" pos:end="577:64">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="579:9" pos:end="579:17"><expr pos:start="579:9" pos:end="579:16"><name pos:start="579:9" pos:end="579:11">ret</name> <operator pos:start="579:13" pos:end="579:13">=</operator> <operator pos:start="579:15" pos:end="579:15">-</operator><literal type="number" pos:start="579:16" pos:end="579:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="581:9" pos:end="581:17">goto <name pos:start="581:14" pos:end="581:16">out</name>;</goto>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="585:5" pos:end="589:5"><if pos:start="585:5" pos:end="589:5">if <condition pos:start="585:8" pos:end="585:16">(<expr pos:start="585:9" pos:end="585:15"><name pos:start="585:9" pos:end="585:11">ret</name> <operator pos:start="585:13" pos:end="585:13">&lt;</operator> <literal type="number" pos:start="585:15" pos:end="585:15">0</literal></expr>)</condition> <block pos:start="585:18" pos:end="589:5">{<block_content pos:start="587:9" pos:end="587:72">

        <expr_stmt pos:start="587:9" pos:end="587:72"><expr pos:start="587:9" pos:end="587:71"><call pos:start="587:9" pos:end="587:71"><name pos:start="587:9" pos:end="587:20">config_error</name><argument_list pos:start="587:21" pos:end="587:71">(<argument pos:start="587:22" pos:end="587:24"><expr pos:start="587:22" pos:end="587:24"><name pos:start="587:22" pos:end="587:24">mon</name></expr></argument>, <argument pos:start="587:27" pos:end="587:62"><expr pos:start="587:27" pos:end="587:62"><literal type="string" pos:start="587:27" pos:end="587:62">"Could not initialize device '%s'\n"</literal></expr></argument>, <argument pos:start="587:65" pos:end="587:70"><expr pos:start="587:65" pos:end="587:70"><name pos:start="587:65" pos:end="587:70">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="591:1" pos:end="591:4"><name pos:start="591:1" pos:end="591:3">out</name>:</label>

    <expr_stmt pos:start="593:5" pos:end="593:20"><expr pos:start="593:5" pos:end="593:19"><call pos:start="593:5" pos:end="593:19"><name pos:start="593:5" pos:end="593:13">qemu_free</name><argument_list pos:start="593:14" pos:end="593:19">(<argument pos:start="593:15" pos:end="593:18"><expr pos:start="593:15" pos:end="593:18"><name pos:start="593:15" pos:end="593:18">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="595:5" pos:end="595:15">return <expr pos:start="595:12" pos:end="595:14"><name pos:start="595:12" pos:end="595:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
