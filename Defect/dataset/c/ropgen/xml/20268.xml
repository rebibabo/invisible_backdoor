<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20268.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">bdrv_write_em</name><parameter_list pos:start="1:25" pos:end="3:60">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:41">BlockDriverState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">bs</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:65"><decl pos:start="1:48" pos:end="1:65"><type pos:start="1:48" pos:end="1:65"><name pos:start="1:48" pos:end="1:54">int64_t</name></type> <name pos:start="1:56" pos:end="1:65">sector_num</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:43"><decl pos:start="3:26" pos:end="3:43"><type pos:start="3:26" pos:end="3:43"><specifier pos:start="3:26" pos:end="3:30">const</specifier> <name pos:start="3:32" pos:end="3:38">uint8_t</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:43">buf</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:59"><decl pos:start="3:46" pos:end="3:59"><type pos:start="3:46" pos:end="3:59"><name pos:start="3:46" pos:end="3:48">int</name></type> <name pos:start="3:50" pos:end="3:59">nb_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="39:1">{<block_content pos:start="7:5" pos:end="37:21">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">async_ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverAIOCB</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:25">acb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:25"><expr pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:13">async_ret</name> <operator pos:start="13:15" pos:end="13:15">=</operator> <name pos:start="13:17" pos:end="13:24">NOT_DONE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:23">qemu_aio_wait_start</name><argument_list pos:start="15:24" pos:end="15:25">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="19:52"><expr pos:start="17:5" pos:end="19:51"><name pos:start="17:5" pos:end="17:7">acb</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="19:51"><name pos:start="17:11" pos:end="17:24">bdrv_aio_write</name><argument_list pos:start="17:25" pos:end="19:51">(<argument pos:start="17:26" pos:end="17:27"><expr pos:start="17:26" pos:end="17:27"><name pos:start="17:26" pos:end="17:27">bs</name></expr></argument>, <argument pos:start="17:30" pos:end="17:39"><expr pos:start="17:30" pos:end="17:39"><name pos:start="17:30" pos:end="17:39">sector_num</name></expr></argument>, <argument pos:start="17:42" pos:end="17:44"><expr pos:start="17:42" pos:end="17:44"><name pos:start="17:42" pos:end="17:44">buf</name></expr></argument>, <argument pos:start="17:47" pos:end="17:56"><expr pos:start="17:47" pos:end="17:56"><name pos:start="17:47" pos:end="17:56">nb_sectors</name></expr></argument>,

                         <argument pos:start="19:26" pos:end="19:38"><expr pos:start="19:26" pos:end="19:38"><name pos:start="19:26" pos:end="19:38">bdrv_rw_em_cb</name></expr></argument>, <argument pos:start="19:41" pos:end="19:50"><expr pos:start="19:41" pos:end="19:50"><operator pos:start="19:41" pos:end="19:41">&amp;</operator><name pos:start="19:42" pos:end="19:50">async_ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:20">(<expr pos:start="21:9" pos:end="21:19"><name pos:start="21:9" pos:end="21:11">acb</name> <operator pos:start="21:13" pos:end="21:14">==</operator> <name pos:start="21:16" pos:end="21:19">NULL</name></expr>)</condition> <block pos:start="21:22" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <expr_stmt pos:start="23:9" pos:end="23:28"><expr pos:start="23:9" pos:end="23:27"><call pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:25">qemu_aio_wait_end</name><argument_list pos:start="23:26" pos:end="23:27">()</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <while pos:start="29:5" pos:end="33:5">while <condition pos:start="29:11" pos:end="29:33">(<expr pos:start="29:12" pos:end="29:32"><name pos:start="29:12" pos:end="29:20">async_ret</name> <operator pos:start="29:22" pos:end="29:23">==</operator> <name pos:start="29:25" pos:end="29:32">NOT_DONE</name></expr>)</condition> <block pos:start="29:35" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:24">

        <expr_stmt pos:start="31:9" pos:end="31:24"><expr pos:start="31:9" pos:end="31:23"><call pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:21">qemu_aio_wait</name><argument_list pos:start="31:22" pos:end="31:23">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><call pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:21">qemu_aio_wait_end</name><argument_list pos:start="35:22" pos:end="35:23">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="37:5" pos:end="37:21">return <expr pos:start="37:12" pos:end="37:20"><name pos:start="37:12" pos:end="37:20">async_ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
