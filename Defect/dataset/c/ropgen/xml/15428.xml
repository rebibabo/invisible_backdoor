<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15428.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">vapic_write</name><parameter_list pos:start="1:24" pos:end="3:42">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:36"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">opaque</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:61"><decl pos:start="1:39" pos:end="1:61"><type pos:start="1:39" pos:end="1:61"><name pos:start="1:39" pos:end="1:56">target_phys_addr_t</name></type> <name pos:start="1:58" pos:end="1:61">addr</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:76"><decl pos:start="1:64" pos:end="1:76"><type pos:start="1:64" pos:end="1:76"><name pos:start="1:64" pos:end="1:71">uint64_t</name></type> <name pos:start="1:73" pos:end="1:76">data</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:41"><decl pos:start="3:25" pos:end="3:41"><type pos:start="3:25" pos:end="3:41"><name pos:start="3:25" pos:end="3:32">unsigned</name> <name pos:start="3:34" pos:end="3:36">int</name></type> <name pos:start="3:38" pos:end="3:41">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:5">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">CPUX86State</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">env</name> <init pos:start="7:22" pos:end="7:37">= <expr pos:start="7:24" pos:end="7:37"><name pos:start="7:24" pos:end="7:37">cpu_single_env</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22">target_phys_addr_t</name></type> <name pos:start="9:24" pos:end="9:32">rom_paddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">VAPICROMState</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">s</name> <init pos:start="11:22" pos:end="11:29">= <expr pos:start="11:24" pos:end="11:29"><name pos:start="11:24" pos:end="11:29">opaque</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:31"><expr pos:start="15:5" pos:end="15:30"><call pos:start="15:5" pos:end="15:30"><name pos:start="15:5" pos:end="15:25">cpu_synchronize_state</name><argument_list pos:start="15:26" pos:end="15:30">(<argument pos:start="15:27" pos:end="15:29"><expr pos:start="15:27" pos:end="15:29"><name pos:start="15:27" pos:end="15:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="39:7">/*

     * The VAPIC supports two PIO-based hypercalls, both via port 0x7E.

     *  o 16-bit write access:

     *    Reports the option ROM initialization to the hypervisor. Written

     *    value is the offset of the state structure in the ROM.

     *  o 8-bit write access:

     *    Reactivates the VAPIC after a guest hibernation, i.e. after the

     *    option ROM content has been re-initialized by a guest power cycle.

     *  o 32-bit write access:

     *    Poll for pending IRQs, considering the current VAPIC state.

     */</comment>

    <switch pos:start="41:5" pos:end="129:5">switch <condition pos:start="41:12" pos:end="41:17">(<expr pos:start="41:13" pos:end="41:16"><name pos:start="41:13" pos:end="41:16">size</name></expr>)</condition> <block pos:start="41:19" pos:end="129:5">{<block_content pos:start="43:5" pos:end="127:14">

    <case pos:start="43:5" pos:end="43:11">case <expr pos:start="43:10" pos:end="43:10"><literal type="number" pos:start="43:10" pos:end="43:10">2</literal></expr>:</case>

        <if_stmt pos:start="45:9" pos:end="55:9"><if pos:start="45:9" pos:end="55:9">if <condition pos:start="45:12" pos:end="45:39">(<expr pos:start="45:13" pos:end="45:38"><name pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:20">state</name></name> <operator pos:start="45:22" pos:end="45:23">==</operator> <name pos:start="45:25" pos:end="45:38">VAPIC_INACTIVE</name></expr>)</condition> <block pos:start="45:41" pos:end="55:9">{<block_content pos:start="47:13" pos:end="53:37">

            <expr_stmt pos:start="47:13" pos:end="47:75"><expr pos:start="47:13" pos:end="47:74"><name pos:start="47:13" pos:end="47:21">rom_paddr</name> <operator pos:start="47:23" pos:end="47:23">=</operator> <operator pos:start="47:25" pos:end="47:25">(</operator><name pos:start="47:26" pos:end="47:40"><name pos:start="47:26" pos:end="47:28">env</name><operator pos:start="47:29" pos:end="47:30">-&gt;</operator><name pos:start="47:31" pos:end="47:34">segs</name><index pos:start="47:35" pos:end="47:40">[<expr pos:start="47:36" pos:end="47:39"><name pos:start="47:36" pos:end="47:39">R_CS</name></expr>]</index></name><operator pos:start="47:41" pos:end="47:41">.</operator><name pos:start="47:42" pos:end="47:45">base</name> <operator pos:start="47:47" pos:end="47:47">+</operator> <name pos:start="47:49" pos:end="47:56"><name pos:start="47:49" pos:end="47:51">env</name><operator pos:start="47:52" pos:end="47:53">-&gt;</operator><name pos:start="47:54" pos:end="47:56">eip</name></name><operator pos:start="47:57" pos:end="47:57">)</operator> <operator pos:start="47:59" pos:end="47:59">&amp;</operator> <name pos:start="47:61" pos:end="47:74">ROM_BLOCK_MASK</name></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:50"><expr pos:start="49:13" pos:end="49:49"><name pos:start="49:13" pos:end="49:30"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:30">rom_state_paddr</name></name> <operator pos:start="49:32" pos:end="49:32">=</operator> <name pos:start="49:34" pos:end="49:42">rom_paddr</name> <operator pos:start="49:44" pos:end="49:44">+</operator> <name pos:start="49:46" pos:end="49:49">data</name></expr>;</expr_stmt>



            <expr_stmt pos:start="53:13" pos:end="53:37"><expr pos:start="53:13" pos:end="53:36"><name pos:start="53:13" pos:end="53:20"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:20">state</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:36">VAPIC_STANDBY</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:33">(<expr pos:start="57:13" pos:end="57:32"><call pos:start="57:13" pos:end="57:28"><name pos:start="57:13" pos:end="57:25">vapic_prepare</name><argument_list pos:start="57:26" pos:end="57:28">(<argument pos:start="57:27" pos:end="57:27"><expr pos:start="57:27" pos:end="57:27"><name pos:start="57:27" pos:end="57:27">s</name></expr></argument>)</argument_list></call> <operator pos:start="57:30" pos:end="57:30">&lt;</operator> <literal type="number" pos:start="57:32" pos:end="57:32">0</literal></expr>)</condition> <block pos:start="57:35" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:18">

            <expr_stmt pos:start="59:13" pos:end="59:38"><expr pos:start="59:13" pos:end="59:37"><name pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:20">state</name></name> <operator pos:start="59:22" pos:end="59:22">=</operator> <name pos:start="59:24" pos:end="59:37">VAPIC_INACTIVE</name></expr>;</expr_stmt>

            <break pos:start="61:13" pos:end="61:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:11">case <expr pos:start="67:10" pos:end="67:10"><literal type="number" pos:start="67:10" pos:end="67:10">1</literal></expr>:</case>

        <if_stmt pos:start="69:9" pos:end="91:9"><if pos:start="69:9" pos:end="91:9">if <condition pos:start="69:12" pos:end="69:26">(<expr pos:start="69:13" pos:end="69:25"><call pos:start="69:13" pos:end="69:25"><name pos:start="69:13" pos:end="69:23">kvm_enabled</name><argument_list pos:start="69:24" pos:end="69:25">()</argument_list></call></expr>)</condition> <block pos:start="69:28" pos:end="91:9">{<block_content pos:start="83:13" pos:end="89:31">

            <comment type="block" pos:start="71:13" pos:end="81:15">/*

             * Disable triggering instruction in ROM by writing a NOP.

             *

             * We cannot do this in TCG mode as the reported IP is not

             * accurate.

             */</comment>

            <expr_stmt pos:start="83:13" pos:end="83:30"><expr pos:start="83:13" pos:end="83:29"><call pos:start="83:13" pos:end="83:29"><name pos:start="83:13" pos:end="83:27">pause_all_vcpus</name><argument_list pos:start="83:28" pos:end="83:29">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:48"><expr pos:start="85:13" pos:end="85:47"><call pos:start="85:13" pos:end="85:47"><name pos:start="85:13" pos:end="85:22">patch_byte</name><argument_list pos:start="85:23" pos:end="85:47">(<argument pos:start="85:24" pos:end="85:26"><expr pos:start="85:24" pos:end="85:26"><name pos:start="85:24" pos:end="85:26">env</name></expr></argument>, <argument pos:start="85:29" pos:end="85:40"><expr pos:start="85:29" pos:end="85:40"><name pos:start="85:29" pos:end="85:36"><name pos:start="85:29" pos:end="85:31">env</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:36">eip</name></name> <operator pos:start="85:38" pos:end="85:38">-</operator> <literal type="number" pos:start="85:40" pos:end="85:40">2</literal></expr></argument>, <argument pos:start="85:43" pos:end="85:46"><expr pos:start="85:43" pos:end="85:46"><literal type="number" pos:start="85:43" pos:end="85:46">0x66</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:48"><expr pos:start="87:13" pos:end="87:47"><call pos:start="87:13" pos:end="87:47"><name pos:start="87:13" pos:end="87:22">patch_byte</name><argument_list pos:start="87:23" pos:end="87:47">(<argument pos:start="87:24" pos:end="87:26"><expr pos:start="87:24" pos:end="87:26"><name pos:start="87:24" pos:end="87:26">env</name></expr></argument>, <argument pos:start="87:29" pos:end="87:40"><expr pos:start="87:29" pos:end="87:40"><name pos:start="87:29" pos:end="87:36"><name pos:start="87:29" pos:end="87:31">env</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:36">eip</name></name> <operator pos:start="87:38" pos:end="87:38">-</operator> <literal type="number" pos:start="87:40" pos:end="87:40">1</literal></expr></argument>, <argument pos:start="87:43" pos:end="87:46"><expr pos:start="87:43" pos:end="87:46"><literal type="number" pos:start="87:43" pos:end="87:46">0x90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:31"><expr pos:start="89:13" pos:end="89:30"><call pos:start="89:13" pos:end="89:30"><name pos:start="89:13" pos:end="89:28">resume_all_vcpus</name><argument_list pos:start="89:29" pos:end="89:30">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:37">(<expr pos:start="95:13" pos:end="95:36"><name pos:start="95:13" pos:end="95:20"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:20">state</name></name> <operator pos:start="95:22" pos:end="95:23">==</operator> <name pos:start="95:25" pos:end="95:36">VAPIC_ACTIVE</name></expr>)</condition> <block pos:start="95:39" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:18">

            <break pos:start="97:13" pos:end="97:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="101:9" pos:end="105:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:53">(<expr pos:start="101:13" pos:end="101:52"><call pos:start="101:13" pos:end="101:48"><name pos:start="101:13" pos:end="101:30">update_rom_mapping</name><argument_list pos:start="101:31" pos:end="101:48">(<argument pos:start="101:32" pos:end="101:32"><expr pos:start="101:32" pos:end="101:32"><name pos:start="101:32" pos:end="101:32">s</name></expr></argument>, <argument pos:start="101:35" pos:end="101:37"><expr pos:start="101:35" pos:end="101:37"><name pos:start="101:35" pos:end="101:37">env</name></expr></argument>, <argument pos:start="101:40" pos:end="101:47"><expr pos:start="101:40" pos:end="101:47"><name pos:start="101:40" pos:end="101:47"><name pos:start="101:40" pos:end="101:42">env</name><operator pos:start="101:43" pos:end="101:44">-&gt;</operator><name pos:start="101:45" pos:end="101:47">eip</name></name></expr></argument>)</argument_list></call> <operator pos:start="101:50" pos:end="101:50">&lt;</operator> <literal type="number" pos:start="101:52" pos:end="101:52">0</literal></expr>)</condition> <block pos:start="101:55" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:18">

            <break pos:start="103:13" pos:end="103:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="107:9" pos:end="111:9"><if pos:start="107:9" pos:end="111:9">if <condition pos:start="107:12" pos:end="107:43">(<expr pos:start="107:13" pos:end="107:42"><call pos:start="107:13" pos:end="107:38"><name pos:start="107:13" pos:end="107:30">find_real_tpr_addr</name><argument_list pos:start="107:31" pos:end="107:38">(<argument pos:start="107:32" pos:end="107:32"><expr pos:start="107:32" pos:end="107:32"><name pos:start="107:32" pos:end="107:32">s</name></expr></argument>, <argument pos:start="107:35" pos:end="107:37"><expr pos:start="107:35" pos:end="107:37"><name pos:start="107:35" pos:end="107:37">env</name></expr></argument>)</argument_list></call> <operator pos:start="107:40" pos:end="107:40">&lt;</operator> <literal type="number" pos:start="107:42" pos:end="107:42">0</literal></expr>)</condition> <block pos:start="107:45" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:18">

            <break pos:start="109:13" pos:end="109:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:29"><expr pos:start="113:9" pos:end="113:28"><call pos:start="113:9" pos:end="113:28"><name pos:start="113:9" pos:end="113:20">vapic_enable</name><argument_list pos:start="113:21" pos:end="113:28">(<argument pos:start="113:22" pos:end="113:22"><expr pos:start="113:22" pos:end="113:22"><name pos:start="113:22" pos:end="113:22">s</name></expr></argument>, <argument pos:start="113:25" pos:end="113:27"><expr pos:start="113:25" pos:end="113:27"><name pos:start="113:25" pos:end="113:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <default pos:start="117:5" pos:end="117:12">default:</default>

    <case pos:start="119:5" pos:end="119:11">case <expr pos:start="119:10" pos:end="119:10"><literal type="number" pos:start="119:10" pos:end="119:10">4</literal></expr>:</case>

        <if_stmt pos:start="121:9" pos:end="125:9"><if pos:start="121:9" pos:end="125:9">if <condition pos:start="121:12" pos:end="121:37">(<expr pos:start="121:13" pos:end="121:36"><operator pos:start="121:13" pos:end="121:13">!</operator><call pos:start="121:14" pos:end="121:36"><name pos:start="121:14" pos:end="121:34">kvm_irqchip_in_kernel</name><argument_list pos:start="121:35" pos:end="121:36">()</argument_list></call></expr>)</condition> <block pos:start="121:39" pos:end="125:9">{<block_content pos:start="123:13" pos:end="123:43">

            <expr_stmt pos:start="123:13" pos:end="123:43"><expr pos:start="123:13" pos:end="123:42"><call pos:start="123:13" pos:end="123:42"><name pos:start="123:13" pos:end="123:25">apic_poll_irq</name><argument_list pos:start="123:26" pos:end="123:42">(<argument pos:start="123:27" pos:end="123:41"><expr pos:start="123:27" pos:end="123:41"><name pos:start="123:27" pos:end="123:41"><name pos:start="123:27" pos:end="123:29">env</name><operator pos:start="123:30" pos:end="123:31">-&gt;</operator><name pos:start="123:32" pos:end="123:41">apic_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="127:9" pos:end="127:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
