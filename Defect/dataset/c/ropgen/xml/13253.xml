<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13253.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">ivi_decode_coded_blocks</name><parameter_list pos:start="1:35" pos:end="9:57">(<parameter pos:start="1:36" pos:end="1:52"><decl pos:start="1:36" pos:end="1:52"><type pos:start="1:36" pos:end="1:52"><name pos:start="1:36" pos:end="1:48">GetBitContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:52">gb</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:71"><decl pos:start="1:55" pos:end="1:71"><type pos:start="1:55" pos:end="1:71"><name pos:start="1:55" pos:end="1:65">IVIBandDesc</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:71">band</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:49"><decl pos:start="3:36" pos:end="3:49"><type pos:start="3:36" pos:end="3:49"><name pos:start="3:36" pos:end="3:46">ivi_mc_func</name></type> <name pos:start="3:48" pos:end="3:49">mc</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:59"><decl pos:start="3:52" pos:end="3:59"><type pos:start="3:52" pos:end="3:59"><name pos:start="3:52" pos:end="3:54">int</name></type> <name pos:start="3:56" pos:end="3:59">mv_x</name></decl></parameter>, <parameter pos:start="3:62" pos:end="3:69"><decl pos:start="3:62" pos:end="3:69"><type pos:start="3:62" pos:end="3:69"><name pos:start="3:62" pos:end="3:64">int</name></type> <name pos:start="3:66" pos:end="3:69">mv_y</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:47"><decl pos:start="5:36" pos:end="5:47"><type pos:start="5:36" pos:end="5:47"><name pos:start="5:36" pos:end="5:38">int</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:47">prev_dc</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:61"><decl pos:start="5:50" pos:end="5:61"><type pos:start="5:50" pos:end="5:61"><name pos:start="5:50" pos:end="5:52">int</name></type> <name pos:start="5:54" pos:end="5:61">is_intra</name></decl></parameter>, <parameter pos:start="5:64" pos:end="5:74"><decl pos:start="5:64" pos:end="5:74"><type pos:start="5:64" pos:end="5:74"><name pos:start="5:64" pos:end="5:66">int</name></type> <name pos:start="5:68" pos:end="5:74">mc_type</name></decl></parameter>,

                                   <parameter pos:start="7:36" pos:end="7:49"><decl pos:start="7:36" pos:end="7:49"><type pos:start="7:36" pos:end="7:49"><name pos:start="7:36" pos:end="7:43">uint32_t</name></type> <name pos:start="7:45" pos:end="7:49">quant</name></decl></parameter>, <parameter pos:start="7:52" pos:end="7:59"><decl pos:start="7:52" pos:end="7:59"><type pos:start="7:52" pos:end="7:59"><name pos:start="7:52" pos:end="7:54">int</name></type> <name pos:start="7:56" pos:end="7:59">offs</name></decl></parameter>,

                                   <parameter pos:start="9:36" pos:end="9:56"><decl pos:start="9:36" pos:end="9:56"><type pos:start="9:36" pos:end="9:56"><name pos:start="9:36" pos:end="9:49">AVCodecContext</name> <modifier pos:start="9:51" pos:end="9:51">*</modifier></type><name pos:start="9:52" pos:end="9:56">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="183:1">{<block_content pos:start="13:5" pos:end="181:13">

    <decl_stmt pos:start="13:5" pos:end="13:79"><decl pos:start="13:5" pos:end="13:78"><type pos:start="13:5" pos:end="13:20"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:18">uint16_t</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:28">base_tab</name>  <init pos:start="13:31" pos:end="13:78">= <expr pos:start="13:33" pos:end="13:78"><ternary pos:start="13:33" pos:end="13:78"><condition pos:start="13:33" pos:end="13:42"><expr pos:start="13:33" pos:end="13:40"><name pos:start="13:33" pos:end="13:40">is_intra</name></expr> ?</condition><then pos:start="13:44" pos:end="13:59"> <expr pos:start="13:44" pos:end="13:59"><name pos:start="13:44" pos:end="13:59"><name pos:start="13:44" pos:end="13:47">band</name><operator pos:start="13:48" pos:end="13:49">-&gt;</operator><name pos:start="13:50" pos:end="13:59">intra_base</name></name></expr> </then><else pos:start="13:61" pos:end="13:78">: <expr pos:start="13:63" pos:end="13:78"><name pos:start="13:63" pos:end="13:78"><name pos:start="13:63" pos:end="13:66">band</name><operator pos:start="13:67" pos:end="13:68">-&gt;</operator><name pos:start="13:69" pos:end="13:78">inter_base</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:35"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">RVMapDesc</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:20">rvmap</name> <init pos:start="15:22" pos:end="15:35">= <expr pos:start="15:24" pos:end="15:35"><name pos:start="15:24" pos:end="15:35"><name pos:start="15:24" pos:end="15:27">band</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:35">rv_map</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">uint8_t</name></type> <name pos:start="17:13" pos:end="17:24"><name pos:start="17:13" pos:end="17:21">col_flags</name><index pos:start="17:22" pos:end="17:24">[<expr pos:start="17:23" pos:end="17:23"><literal type="number" pos:start="17:23" pos:end="17:23">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int32_t</name></type> <name pos:start="19:13" pos:end="19:21"><name pos:start="19:13" pos:end="19:17">trvec</name><index pos:start="19:18" pos:end="19:21">[<expr pos:start="19:19" pos:end="19:20"><literal type="number" pos:start="19:19" pos:end="19:20">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:16">sym</name> <init pos:start="21:18" pos:end="21:20">= <expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">0</literal></expr></init></decl>, <decl pos:start="21:23" pos:end="21:24"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:23" pos:end="21:24">lo</name></decl>, <decl pos:start="21:27" pos:end="21:28"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:27" pos:end="21:28">hi</name></decl>, <decl pos:start="21:31" pos:end="21:31"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:31" pos:end="21:31">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:11"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">pos</name></decl>, <decl pos:start="23:14" pos:end="23:16"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:14" pos:end="23:16">run</name></decl>, <decl pos:start="23:19" pos:end="23:21"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:19" pos:end="23:21">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:36"><decl pos:start="25:5" pos:end="25:35"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:16">blk_size</name>   <init pos:start="25:20" pos:end="25:35">= <expr pos:start="25:22" pos:end="25:35"><name pos:start="25:22" pos:end="25:35"><name pos:start="25:22" pos:end="25:25">band</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:35">blk_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:41"><decl pos:start="27:5" pos:end="27:40"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">num_coeffs</name> <init pos:start="27:20" pos:end="27:40">= <expr pos:start="27:22" pos:end="27:40"><name pos:start="27:22" pos:end="27:29">blk_size</name> <operator pos:start="27:31" pos:end="27:31">*</operator> <name pos:start="27:33" pos:end="27:40">blk_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:34"><decl pos:start="29:5" pos:end="29:33"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:16">col_mask</name>   <init pos:start="29:20" pos:end="29:33">= <expr pos:start="29:22" pos:end="29:33"><name pos:start="29:22" pos:end="29:29">blk_size</name> <operator pos:start="29:31" pos:end="29:31">-</operator> <literal type="number" pos:start="29:33" pos:end="29:33">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:24"><decl pos:start="31:5" pos:end="31:23"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:16">scan_pos</name>   <init pos:start="31:20" pos:end="31:23">= <expr pos:start="31:22" pos:end="31:23"><operator pos:start="31:22" pos:end="31:22">-</operator><literal type="number" pos:start="31:23" pos:end="31:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="35:42"><decl pos:start="33:5" pos:end="35:41"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:16">min_size</name>   <init pos:start="33:20" pos:end="35:41">= <expr pos:start="33:22" pos:end="35:41"><name pos:start="33:22" pos:end="33:32"><name pos:start="33:22" pos:end="33:25">band</name><operator pos:start="33:26" pos:end="33:27">-&gt;</operator><name pos:start="33:28" pos:end="33:32">pitch</name></name> <operator pos:start="33:34" pos:end="33:34">*</operator> <operator pos:start="33:36" pos:end="33:36">(</operator><name pos:start="33:37" pos:end="33:56"><name pos:start="33:37" pos:end="33:40">band</name><operator pos:start="33:41" pos:end="33:42">-&gt;</operator><name pos:start="33:43" pos:end="33:56">transform_size</name></name> <operator pos:start="33:58" pos:end="33:58">-</operator> <literal type="number" pos:start="33:60" pos:end="33:60">1</literal><operator pos:start="33:61" pos:end="33:61">)</operator> <operator pos:start="33:63" pos:end="33:63">+</operator>

                     <name pos:start="35:22" pos:end="35:41"><name pos:start="35:22" pos:end="35:25">band</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:41">transform_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:56"><decl pos:start="37:5" pos:end="37:55"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:16">buf_size</name>   <init pos:start="37:20" pos:end="37:55">= <expr pos:start="37:22" pos:end="37:55"><name pos:start="37:22" pos:end="37:32"><name pos:start="37:22" pos:end="37:25">band</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:32">pitch</name></name> <operator pos:start="37:34" pos:end="37:34">*</operator> <name pos:start="37:36" pos:end="37:48"><name pos:start="37:36" pos:end="37:39">band</name><operator pos:start="37:40" pos:end="37:41">-&gt;</operator><name pos:start="37:42" pos:end="37:48">aheight</name></name> <operator pos:start="37:50" pos:end="37:50">-</operator> <name pos:start="37:52" pos:end="37:55">offs</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="41:5" pos:end="43:35"><if pos:start="41:5" pos:end="43:35">if <condition pos:start="41:8" pos:end="41:28">(<expr pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:16">min_size</name> <operator pos:start="41:18" pos:end="41:18">&gt;</operator> <name pos:start="41:20" pos:end="41:27">buf_size</name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:35"><block_content pos:start="43:9" pos:end="43:35">

        <return pos:start="43:9" pos:end="43:35">return <expr pos:start="43:16" pos:end="43:34"><name pos:start="43:16" pos:end="43:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:20">(<expr pos:start="47:9" pos:end="47:19"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:19"><name pos:start="47:10" pos:end="47:13">band</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:19">scan</name></name></expr>)</condition> <block pos:start="47:22" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:35">

        <expr_stmt pos:start="49:9" pos:end="49:66"><expr pos:start="49:9" pos:end="49:65"><call pos:start="49:9" pos:end="49:65"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:65">(<argument pos:start="49:16" pos:end="49:20"><expr pos:start="49:16" pos:end="49:20"><name pos:start="49:16" pos:end="49:20">avctx</name></expr></argument>, <argument pos:start="49:23" pos:end="49:34"><expr pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:37" pos:end="49:64"><expr pos:start="49:37" pos:end="49:64"><literal type="string" pos:start="49:37" pos:end="49:64">"Scan pattern is not set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:35">return <expr pos:start="51:16" pos:end="51:34"><name pos:start="51:16" pos:end="51:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:31">/* zero transform vector */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:52"><expr pos:start="59:5" pos:end="59:51"><call pos:start="59:5" pos:end="59:51"><name pos:start="59:5" pos:end="59:10">memset</name><argument_list pos:start="59:11" pos:end="59:51">(<argument pos:start="59:12" pos:end="59:16"><expr pos:start="59:12" pos:end="59:16"><name pos:start="59:12" pos:end="59:16">trvec</name></expr></argument>, <argument pos:start="59:19" pos:end="59:19"><expr pos:start="59:19" pos:end="59:19"><literal type="number" pos:start="59:19" pos:end="59:19">0</literal></expr></argument>, <argument pos:start="59:22" pos:end="59:50"><expr pos:start="59:22" pos:end="59:50"><name pos:start="59:22" pos:end="59:31">num_coeffs</name> <operator pos:start="59:33" pos:end="59:33">*</operator> <sizeof pos:start="59:35" pos:end="59:50">sizeof<argument_list pos:start="59:41" pos:end="59:50">(<argument pos:start="59:42" pos:end="59:49"><expr pos:start="59:42" pos:end="59:49"><name pos:start="59:42" pos:end="59:49"><name pos:start="59:42" pos:end="59:46">trvec</name><index pos:start="59:47" pos:end="59:49">[<expr pos:start="59:48" pos:end="59:48"><literal type="number" pos:start="59:48" pos:end="59:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="61:5" pos:end="61:27">/* zero column flags */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:44"><expr pos:start="63:5" pos:end="63:43"><call pos:start="63:5" pos:end="63:43"><name pos:start="63:5" pos:end="63:10">memset</name><argument_list pos:start="63:11" pos:end="63:43">(<argument pos:start="63:12" pos:end="63:20"><expr pos:start="63:12" pos:end="63:20"><name pos:start="63:12" pos:end="63:20">col_flags</name></expr></argument>, <argument pos:start="63:23" pos:end="63:23"><expr pos:start="63:23" pos:end="63:23"><literal type="number" pos:start="63:23" pos:end="63:23">0</literal></expr></argument>, <argument pos:start="63:26" pos:end="63:42"><expr pos:start="63:26" pos:end="63:42"><sizeof pos:start="63:26" pos:end="63:42">sizeof<argument_list pos:start="63:32" pos:end="63:42">(<argument pos:start="63:33" pos:end="63:41"><expr pos:start="63:33" pos:end="63:41"><name pos:start="63:33" pos:end="63:41">col_flags</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="65:5" pos:end="139:5">while <condition pos:start="65:11" pos:end="65:34">(<expr pos:start="65:12" pos:end="65:33"><name pos:start="65:12" pos:end="65:19">scan_pos</name> <operator pos:start="65:21" pos:end="65:22">&lt;=</operator> <name pos:start="65:24" pos:end="65:33">num_coeffs</name></expr>)</condition> <block pos:start="65:36" pos:end="139:5">{<block_content pos:start="67:9" pos:end="137:43">

        <expr_stmt pos:start="67:9" pos:end="69:40"><expr pos:start="67:9" pos:end="69:39"><name pos:start="67:9" pos:end="67:11">sym</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="69:39"><name pos:start="67:15" pos:end="67:22">get_vlc2</name><argument_list pos:start="67:23" pos:end="69:39">(<argument pos:start="67:24" pos:end="67:25"><expr pos:start="67:24" pos:end="67:25"><name pos:start="67:24" pos:end="67:25">gb</name></expr></argument>, <argument pos:start="67:28" pos:end="67:51"><expr pos:start="67:28" pos:end="67:51"><name pos:start="67:28" pos:end="67:51"><name pos:start="67:28" pos:end="67:31">band</name><operator pos:start="67:32" pos:end="67:33">-&gt;</operator><name pos:start="67:34" pos:end="67:40">blk_vlc</name><operator pos:start="67:41" pos:end="67:41">.</operator><name pos:start="67:42" pos:end="67:44">tab</name><operator pos:start="67:45" pos:end="67:46">-&gt;</operator><name pos:start="67:47" pos:end="67:51">table</name></name></expr></argument>,

                       <argument pos:start="69:24" pos:end="69:35"><expr pos:start="69:24" pos:end="69:35"><name pos:start="69:24" pos:end="69:35">IVI_VLC_BITS</name></expr></argument>, <argument pos:start="69:38" pos:end="69:38"><expr pos:start="69:38" pos:end="69:38"><literal type="number" pos:start="69:38" pos:end="69:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="73:18"><if pos:start="71:9" pos:end="73:18">if <condition pos:start="71:12" pos:end="71:34">(<expr pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:15">sym</name> <operator pos:start="71:17" pos:end="71:18">==</operator> <name pos:start="71:20" pos:end="71:33"><name pos:start="71:20" pos:end="71:24">rvmap</name><operator pos:start="71:25" pos:end="71:26">-&gt;</operator><name pos:start="71:27" pos:end="71:33">eob_sym</name></name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:18"><block_content pos:start="73:13" pos:end="73:18">

            <break pos:start="73:13" pos:end="73:18">break;</break></block_content></block></if></if_stmt> <comment type="block" pos:start="73:20" pos:end="73:37">/* End of block */</comment>



        <comment type="block" pos:start="77:9" pos:end="77:65">/* Escape - run/val explicitly coded using 3 vlc codes */</comment>

        <if_stmt pos:start="79:9" pos:end="105:9"><if pos:start="79:9" pos:end="91:9">if <condition pos:start="79:12" pos:end="79:34">(<expr pos:start="79:13" pos:end="79:33"><name pos:start="79:13" pos:end="79:15">sym</name> <operator pos:start="79:17" pos:end="79:18">==</operator> <name pos:start="79:20" pos:end="79:33"><name pos:start="79:20" pos:end="79:24">rvmap</name><operator pos:start="79:25" pos:end="79:26">-&gt;</operator><name pos:start="79:27" pos:end="79:33">esc_sym</name></name></expr>)</condition> <block pos:start="79:36" pos:end="91:9">{<block_content pos:start="81:13" pos:end="89:47">

            <expr_stmt pos:start="81:13" pos:end="81:78"><expr pos:start="81:13" pos:end="81:77"><name pos:start="81:13" pos:end="81:15">run</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <call pos:start="81:19" pos:end="81:73"><name pos:start="81:19" pos:end="81:26">get_vlc2</name><argument_list pos:start="81:27" pos:end="81:73">(<argument pos:start="81:28" pos:end="81:29"><expr pos:start="81:28" pos:end="81:29"><name pos:start="81:28" pos:end="81:29">gb</name></expr></argument>, <argument pos:start="81:32" pos:end="81:55"><expr pos:start="81:32" pos:end="81:55"><name pos:start="81:32" pos:end="81:55"><name pos:start="81:32" pos:end="81:35">band</name><operator pos:start="81:36" pos:end="81:37">-&gt;</operator><name pos:start="81:38" pos:end="81:44">blk_vlc</name><operator pos:start="81:45" pos:end="81:45">.</operator><name pos:start="81:46" pos:end="81:48">tab</name><operator pos:start="81:49" pos:end="81:50">-&gt;</operator><name pos:start="81:51" pos:end="81:55">table</name></name></expr></argument>, <argument pos:start="81:58" pos:end="81:69"><expr pos:start="81:58" pos:end="81:69"><name pos:start="81:58" pos:end="81:69">IVI_VLC_BITS</name></expr></argument>, <argument pos:start="81:72" pos:end="81:72"><expr pos:start="81:72" pos:end="81:72"><literal type="number" pos:start="81:72" pos:end="81:72">1</literal></expr></argument>)</argument_list></call> <operator pos:start="81:75" pos:end="81:75">+</operator> <literal type="number" pos:start="81:77" pos:end="81:77">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:74"><expr pos:start="83:13" pos:end="83:73"><name pos:start="83:13" pos:end="83:14">lo</name>  <operator pos:start="83:17" pos:end="83:17">=</operator> <call pos:start="83:19" pos:end="83:73"><name pos:start="83:19" pos:end="83:26">get_vlc2</name><argument_list pos:start="83:27" pos:end="83:73">(<argument pos:start="83:28" pos:end="83:29"><expr pos:start="83:28" pos:end="83:29"><name pos:start="83:28" pos:end="83:29">gb</name></expr></argument>, <argument pos:start="83:32" pos:end="83:55"><expr pos:start="83:32" pos:end="83:55"><name pos:start="83:32" pos:end="83:55"><name pos:start="83:32" pos:end="83:35">band</name><operator pos:start="83:36" pos:end="83:37">-&gt;</operator><name pos:start="83:38" pos:end="83:44">blk_vlc</name><operator pos:start="83:45" pos:end="83:45">.</operator><name pos:start="83:46" pos:end="83:48">tab</name><operator pos:start="83:49" pos:end="83:50">-&gt;</operator><name pos:start="83:51" pos:end="83:55">table</name></name></expr></argument>, <argument pos:start="83:58" pos:end="83:69"><expr pos:start="83:58" pos:end="83:69"><name pos:start="83:58" pos:end="83:69">IVI_VLC_BITS</name></expr></argument>, <argument pos:start="83:72" pos:end="83:72"><expr pos:start="83:72" pos:end="83:72"><literal type="number" pos:start="83:72" pos:end="83:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:74"><expr pos:start="85:13" pos:end="85:73"><name pos:start="85:13" pos:end="85:14">hi</name>  <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="85:73"><name pos:start="85:19" pos:end="85:26">get_vlc2</name><argument_list pos:start="85:27" pos:end="85:73">(<argument pos:start="85:28" pos:end="85:29"><expr pos:start="85:28" pos:end="85:29"><name pos:start="85:28" pos:end="85:29">gb</name></expr></argument>, <argument pos:start="85:32" pos:end="85:55"><expr pos:start="85:32" pos:end="85:55"><name pos:start="85:32" pos:end="85:55"><name pos:start="85:32" pos:end="85:35">band</name><operator pos:start="85:36" pos:end="85:37">-&gt;</operator><name pos:start="85:38" pos:end="85:44">blk_vlc</name><operator pos:start="85:45" pos:end="85:45">.</operator><name pos:start="85:46" pos:end="85:48">tab</name><operator pos:start="85:49" pos:end="85:50">-&gt;</operator><name pos:start="85:51" pos:end="85:55">table</name></name></expr></argument>, <argument pos:start="85:58" pos:end="85:69"><expr pos:start="85:58" pos:end="85:69"><name pos:start="85:58" pos:end="85:69">IVI_VLC_BITS</name></expr></argument>, <argument pos:start="85:72" pos:end="85:72"><expr pos:start="85:72" pos:end="85:72"><literal type="number" pos:start="85:72" pos:end="85:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="87:13" pos:end="87:56">/* merge them and convert into signed val */</comment>

            <expr_stmt pos:start="89:13" pos:end="89:47"><expr pos:start="89:13" pos:end="89:46"><name pos:start="89:13" pos:end="89:15">val</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="89:46"><name pos:start="89:19" pos:end="89:30">IVI_TOSIGNED</name><argument_list pos:start="89:31" pos:end="89:46">(<argument pos:start="89:32" pos:end="89:45"><expr pos:start="89:32" pos:end="89:45"><operator pos:start="89:32" pos:end="89:32">(</operator><name pos:start="89:33" pos:end="89:34">hi</name> <operator pos:start="89:36" pos:end="89:37">&lt;&lt;</operator> <literal type="number" pos:start="89:39" pos:end="89:39">6</literal><operator pos:start="89:40" pos:end="89:40">)</operator> <operator pos:start="89:42" pos:end="89:42">|</operator> <name pos:start="89:44" pos:end="89:45">lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="91:11" pos:end="105:9">else <block pos:start="91:16" pos:end="105:9">{<block_content pos:start="93:13" pos:end="103:37">

            <if_stmt pos:start="93:13" pos:end="99:13"><if pos:start="93:13" pos:end="99:13">if <condition pos:start="93:16" pos:end="93:28">(<expr pos:start="93:17" pos:end="93:27"><name pos:start="93:17" pos:end="93:19">sym</name> <operator pos:start="93:21" pos:end="93:22">&gt;=</operator> <literal type="number" pos:start="93:24" pos:end="93:27">256U</literal></expr>)</condition> <block pos:start="93:30" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:43">

                <expr_stmt pos:start="95:17" pos:end="95:83"><expr pos:start="95:17" pos:end="95:82"><call pos:start="95:17" pos:end="95:82"><name pos:start="95:17" pos:end="95:22">av_log</name><argument_list pos:start="95:23" pos:end="95:82">(<argument pos:start="95:24" pos:end="95:28"><expr pos:start="95:24" pos:end="95:28"><name pos:start="95:24" pos:end="95:28">avctx</name></expr></argument>, <argument pos:start="95:31" pos:end="95:42"><expr pos:start="95:31" pos:end="95:42"><name pos:start="95:31" pos:end="95:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:45" pos:end="95:76"><expr pos:start="95:45" pos:end="95:76"><literal type="string" pos:start="95:45" pos:end="95:76">"Invalid sym encountered: %d.\n"</literal></expr></argument>, <argument pos:start="95:79" pos:end="95:81"><expr pos:start="95:79" pos:end="95:81"><name pos:start="95:79" pos:end="95:81">sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="97:17" pos:end="97:43">return <expr pos:start="97:24" pos:end="97:42"><name pos:start="97:24" pos:end="97:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:37"><expr pos:start="101:13" pos:end="101:36"><name pos:start="101:13" pos:end="101:15">run</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <name pos:start="101:19" pos:end="101:36"><name pos:start="101:19" pos:end="101:23">rvmap</name><operator pos:start="101:24" pos:end="101:25">-&gt;</operator><name pos:start="101:26" pos:end="101:31">runtab</name><index pos:start="101:32" pos:end="101:36">[<expr pos:start="101:33" pos:end="101:35"><name pos:start="101:33" pos:end="101:35">sym</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:37"><expr pos:start="103:13" pos:end="103:36"><name pos:start="103:13" pos:end="103:15">val</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <name pos:start="103:19" pos:end="103:36"><name pos:start="103:19" pos:end="103:23">rvmap</name><operator pos:start="103:24" pos:end="103:25">-&gt;</operator><name pos:start="103:26" pos:end="103:31">valtab</name><index pos:start="103:32" pos:end="103:36">[<expr pos:start="103:33" pos:end="103:35"><name pos:start="103:33" pos:end="103:35">sym</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="109:9" pos:end="109:38">/* de-zigzag and dequantize */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:24"><expr pos:start="111:9" pos:end="111:23"><name pos:start="111:9" pos:end="111:16">scan_pos</name> <operator pos:start="111:18" pos:end="111:19">+=</operator> <name pos:start="111:21" pos:end="111:23">run</name></expr>;</expr_stmt>

        <if_stmt pos:start="113:9" pos:end="115:18"><if pos:start="113:9" pos:end="115:18">if <condition pos:start="113:12" pos:end="113:51">(<expr pos:start="113:13" pos:end="113:50"><name pos:start="113:13" pos:end="113:20">scan_pos</name> <operator pos:start="113:22" pos:end="113:23">&gt;=</operator> <name pos:start="113:25" pos:end="113:34">num_coeffs</name> <operator pos:start="113:36" pos:end="113:37">||</operator> <name pos:start="113:39" pos:end="113:46">scan_pos</name> <operator pos:start="113:48" pos:end="113:48">&lt;</operator> <literal type="number" pos:start="113:50" pos:end="113:50">0</literal></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:18"><block_content pos:start="115:13" pos:end="115:18">

            <break pos:start="115:13" pos:end="115:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:35"><expr pos:start="117:9" pos:end="117:34"><name pos:start="117:9" pos:end="117:11">pos</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <name pos:start="117:15" pos:end="117:34"><name pos:start="117:15" pos:end="117:18">band</name><operator pos:start="117:19" pos:end="117:20">-&gt;</operator><name pos:start="117:21" pos:end="117:24">scan</name><index pos:start="117:25" pos:end="117:34">[<expr pos:start="117:26" pos:end="117:33"><name pos:start="117:26" pos:end="117:33">scan_pos</name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="121:9" pos:end="123:53"><if pos:start="121:9" pos:end="123:53">if <condition pos:start="121:12" pos:end="121:17">(<expr pos:start="121:13" pos:end="121:16"><operator pos:start="121:13" pos:end="121:13">!</operator><name pos:start="121:14" pos:end="121:16">val</name></expr>)</condition><block type="pseudo" pos:start="123:13" pos:end="123:53"><block_content pos:start="123:13" pos:end="123:53">

            <expr_stmt pos:start="123:13" pos:end="123:53"><expr pos:start="123:13" pos:end="123:52"><call pos:start="123:13" pos:end="123:52"><name pos:start="123:13" pos:end="123:19">av_dlog</name><argument_list pos:start="123:20" pos:end="123:52">(<argument pos:start="123:21" pos:end="123:25"><expr pos:start="123:21" pos:end="123:25"><name pos:start="123:21" pos:end="123:25">avctx</name></expr></argument>, <argument pos:start="123:28" pos:end="123:51"><expr pos:start="123:28" pos:end="123:51"><literal type="string" pos:start="123:28" pos:end="123:51">"Val = 0 encountered!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:41"><expr pos:start="127:9" pos:end="127:40"><name pos:start="127:9" pos:end="127:9">q</name> <operator pos:start="127:11" pos:end="127:11">=</operator> <operator pos:start="127:13" pos:end="127:13">(</operator><name pos:start="127:14" pos:end="127:26"><name pos:start="127:14" pos:end="127:21">base_tab</name><index pos:start="127:22" pos:end="127:26">[<expr pos:start="127:23" pos:end="127:25"><name pos:start="127:23" pos:end="127:25">pos</name></expr>]</index></name> <operator pos:start="127:28" pos:end="127:28">*</operator> <name pos:start="127:30" pos:end="127:34">quant</name><operator pos:start="127:35" pos:end="127:35">)</operator> <operator pos:start="127:37" pos:end="127:38">&gt;&gt;</operator> <literal type="number" pos:start="127:40" pos:end="127:40">9</literal></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="131:63"><if pos:start="129:9" pos:end="131:63">if <condition pos:start="129:12" pos:end="129:18">(<expr pos:start="129:13" pos:end="129:17"><name pos:start="129:13" pos:end="129:13">q</name> <operator pos:start="129:15" pos:end="129:15">&gt;</operator> <literal type="number" pos:start="129:17" pos:end="129:17">1</literal></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:63"><block_content pos:start="131:13" pos:end="131:63">

            <expr_stmt pos:start="131:13" pos:end="131:63"><expr pos:start="131:13" pos:end="131:62"><name pos:start="131:13" pos:end="131:15">val</name> <operator pos:start="131:17" pos:end="131:17">=</operator> <name pos:start="131:19" pos:end="131:21">val</name> <operator pos:start="131:23" pos:end="131:23">*</operator> <name pos:start="131:25" pos:end="131:25">q</name> <operator pos:start="131:27" pos:end="131:27">+</operator> <call pos:start="131:29" pos:end="131:39"><name pos:start="131:29" pos:end="131:34">FFSIGN</name><argument_list pos:start="131:35" pos:end="131:39">(<argument pos:start="131:36" pos:end="131:38"><expr pos:start="131:36" pos:end="131:38"><name pos:start="131:36" pos:end="131:38">val</name></expr></argument>)</argument_list></call> <operator pos:start="131:41" pos:end="131:41">*</operator> <operator pos:start="131:43" pos:end="131:43">(</operator><operator pos:start="131:44" pos:end="131:44">(</operator><operator pos:start="131:45" pos:end="131:45">(</operator><name pos:start="131:46" pos:end="131:46">q</name> <operator pos:start="131:48" pos:end="131:48">^</operator> <literal type="number" pos:start="131:50" pos:end="131:50">1</literal><operator pos:start="131:51" pos:end="131:51">)</operator> <operator pos:start="131:53" pos:end="131:53">-</operator> <literal type="number" pos:start="131:55" pos:end="131:55">1</literal><operator pos:start="131:56" pos:end="131:56">)</operator> <operator pos:start="131:58" pos:end="131:59">&gt;&gt;</operator> <literal type="number" pos:start="131:61" pos:end="131:61">1</literal><operator pos:start="131:62" pos:end="131:62">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:25"><expr pos:start="133:9" pos:end="133:24"><name pos:start="133:9" pos:end="133:18"><name pos:start="133:9" pos:end="133:13">trvec</name><index pos:start="133:14" pos:end="133:18">[<expr pos:start="133:15" pos:end="133:17"><name pos:start="133:15" pos:end="133:17">pos</name></expr>]</index></name> <operator pos:start="133:20" pos:end="133:20">=</operator> <name pos:start="133:22" pos:end="133:24">val</name></expr>;</expr_stmt>

        <comment type="block" pos:start="135:9" pos:end="135:54">/* track columns containing non-zero coeffs */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:43"><expr pos:start="137:9" pos:end="137:42"><name pos:start="137:9" pos:end="137:33"><name pos:start="137:9" pos:end="137:17">col_flags</name><index pos:start="137:18" pos:end="137:33">[<expr pos:start="137:19" pos:end="137:32"><name pos:start="137:19" pos:end="137:21">pos</name> <operator pos:start="137:23" pos:end="137:23">&amp;</operator> <name pos:start="137:25" pos:end="137:32">col_mask</name></expr>]</index></name> <operator pos:start="137:35" pos:end="137:36">|=</operator> <operator pos:start="137:38" pos:end="137:38">!</operator><operator pos:start="137:39" pos:end="137:39">!</operator><name pos:start="137:40" pos:end="137:42">val</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="143:5" pos:end="145:35"><if pos:start="143:5" pos:end="145:35">if <condition pos:start="143:8" pos:end="143:72">(<expr pos:start="143:9" pos:end="143:71"><name pos:start="143:9" pos:end="143:16">scan_pos</name> <operator pos:start="143:18" pos:end="143:18">&lt;</operator> <literal type="number" pos:start="143:20" pos:end="143:20">0</literal> <operator pos:start="143:22" pos:end="143:23">||</operator> <name pos:start="143:25" pos:end="143:32">scan_pos</name> <operator pos:start="143:34" pos:end="143:35">&gt;=</operator> <name pos:start="143:37" pos:end="143:46">num_coeffs</name> <operator pos:start="143:48" pos:end="143:49">&amp;&amp;</operator> <name pos:start="143:51" pos:end="143:53">sym</name> <operator pos:start="143:55" pos:end="143:56">!=</operator> <name pos:start="143:58" pos:end="143:71"><name pos:start="143:58" pos:end="143:62">rvmap</name><operator pos:start="143:63" pos:end="143:64">-&gt;</operator><name pos:start="143:65" pos:end="143:71">eob_sym</name></name></expr>)</condition><block type="pseudo" pos:start="145:9" pos:end="145:35"><block_content pos:start="145:9" pos:end="145:35">

        <return pos:start="145:9" pos:end="145:35">return <expr pos:start="145:16" pos:end="145:34"><name pos:start="145:16" pos:end="145:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt> <comment type="block" pos:start="145:37" pos:end="145:60">/* corrupt block data */</comment>



    <comment type="block" pos:start="149:5" pos:end="149:54">/* undoing DC coeff prediction for intra-blocks */</comment>

    <if_stmt pos:start="151:5" pos:end="159:5"><if pos:start="151:5" pos:end="159:5">if <condition pos:start="151:8" pos:end="151:38">(<expr pos:start="151:9" pos:end="151:37"><name pos:start="151:9" pos:end="151:16">is_intra</name> <operator pos:start="151:18" pos:end="151:19">&amp;&amp;</operator> <name pos:start="151:21" pos:end="151:37"><name pos:start="151:21" pos:end="151:24">band</name><operator pos:start="151:25" pos:end="151:26">-&gt;</operator><name pos:start="151:27" pos:end="151:37">is_2d_trans</name></name></expr>)</condition> <block pos:start="151:40" pos:end="159:5">{<block_content pos:start="153:9" pos:end="157:35">

        <expr_stmt pos:start="153:9" pos:end="153:33"><expr pos:start="153:9" pos:end="153:32"><operator pos:start="153:9" pos:end="153:9">*</operator><name pos:start="153:10" pos:end="153:16">prev_dc</name>     <operator pos:start="153:22" pos:end="153:23">+=</operator> <name pos:start="153:25" pos:end="153:32"><name pos:start="153:25" pos:end="153:29">trvec</name><index pos:start="153:30" pos:end="153:32">[<expr pos:start="153:31" pos:end="153:31"><literal type="number" pos:start="153:31" pos:end="153:31">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:33"><expr pos:start="155:9" pos:end="155:32"><name pos:start="155:9" pos:end="155:16"><name pos:start="155:9" pos:end="155:13">trvec</name><index pos:start="155:14" pos:end="155:16">[<expr pos:start="155:15" pos:end="155:15"><literal type="number" pos:start="155:15" pos:end="155:15">0</literal></expr>]</index></name>      <operator pos:start="155:23" pos:end="155:23">=</operator> <operator pos:start="155:25" pos:end="155:25">*</operator><name pos:start="155:26" pos:end="155:32">prev_dc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:35"><expr pos:start="157:9" pos:end="157:34"><name pos:start="157:9" pos:end="157:20"><name pos:start="157:9" pos:end="157:17">col_flags</name><index pos:start="157:18" pos:end="157:20">[<expr pos:start="157:19" pos:end="157:19"><literal type="number" pos:start="157:19" pos:end="157:19">0</literal></expr>]</index></name> <operator pos:start="157:22" pos:end="157:23">|=</operator> <operator pos:start="157:25" pos:end="157:25">!</operator><operator pos:start="157:26" pos:end="157:26">!</operator><operator pos:start="157:27" pos:end="157:27">*</operator><name pos:start="157:28" pos:end="157:34">prev_dc</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:33">/* apply inverse transform */</comment>

    <expr_stmt pos:start="165:5" pos:end="167:48"><expr pos:start="165:5" pos:end="167:47"><call pos:start="165:5" pos:end="167:47"><name pos:start="165:5" pos:end="165:23"><name pos:start="165:5" pos:end="165:8">band</name><operator pos:start="165:9" pos:end="165:10">-&gt;</operator><name pos:start="165:11" pos:end="165:23">inv_transform</name></name><argument_list pos:start="165:24" pos:end="167:47">(<argument pos:start="165:25" pos:end="165:29"><expr pos:start="165:25" pos:end="165:29"><name pos:start="165:25" pos:end="165:29">trvec</name></expr></argument>, <argument pos:start="165:32" pos:end="165:47"><expr pos:start="165:32" pos:end="165:47"><name pos:start="165:32" pos:end="165:40"><name pos:start="165:32" pos:end="165:35">band</name><operator pos:start="165:36" pos:end="165:37">-&gt;</operator><name pos:start="165:38" pos:end="165:40">buf</name></name> <operator pos:start="165:42" pos:end="165:42">+</operator> <name pos:start="165:44" pos:end="165:47">offs</name></expr></argument>,

                        <argument pos:start="167:25" pos:end="167:35"><expr pos:start="167:25" pos:end="167:35"><name pos:start="167:25" pos:end="167:35"><name pos:start="167:25" pos:end="167:28">band</name><operator pos:start="167:29" pos:end="167:30">-&gt;</operator><name pos:start="167:31" pos:end="167:35">pitch</name></name></expr></argument>, <argument pos:start="167:38" pos:end="167:46"><expr pos:start="167:38" pos:end="167:46"><name pos:start="167:38" pos:end="167:46">col_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="171:5" pos:end="171:35">/* apply motion compensation */</comment>

    <if_stmt pos:start="173:5" pos:end="177:44"><if pos:start="173:5" pos:end="177:44">if <condition pos:start="173:8" pos:end="173:18">(<expr pos:start="173:9" pos:end="173:17"><operator pos:start="173:9" pos:end="173:9">!</operator><name pos:start="173:10" pos:end="173:17">is_intra</name></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="177:44"><block_content pos:start="175:9" pos:end="177:44">

        <return pos:start="175:9" pos:end="177:44">return <expr pos:start="175:16" pos:end="177:43"><call pos:start="175:16" pos:end="177:43"><name pos:start="175:16" pos:end="175:21">ivi_mc</name><argument_list pos:start="175:22" pos:end="177:43">(<argument pos:start="175:23" pos:end="175:24"><expr pos:start="175:23" pos:end="175:24"><name pos:start="175:23" pos:end="175:24">mc</name></expr></argument>, <argument pos:start="175:27" pos:end="175:35"><expr pos:start="175:27" pos:end="175:35"><name pos:start="175:27" pos:end="175:35"><name pos:start="175:27" pos:end="175:30">band</name><operator pos:start="175:31" pos:end="175:32">-&gt;</operator><name pos:start="175:33" pos:end="175:35">buf</name></name></expr></argument>, <argument pos:start="175:38" pos:end="175:50"><expr pos:start="175:38" pos:end="175:50"><name pos:start="175:38" pos:end="175:50"><name pos:start="175:38" pos:end="175:41">band</name><operator pos:start="175:42" pos:end="175:43">-&gt;</operator><name pos:start="175:44" pos:end="175:50">ref_buf</name></name></expr></argument>, <argument pos:start="175:53" pos:end="175:56"><expr pos:start="175:53" pos:end="175:56"><name pos:start="175:53" pos:end="175:56">offs</name></expr></argument>, <argument pos:start="175:59" pos:end="175:62"><expr pos:start="175:59" pos:end="175:62"><name pos:start="175:59" pos:end="175:62">mv_x</name></expr></argument>, <argument pos:start="175:65" pos:end="175:68"><expr pos:start="175:65" pos:end="175:68"><name pos:start="175:65" pos:end="175:68">mv_y</name></expr></argument>,

                      <argument pos:start="177:23" pos:end="177:33"><expr pos:start="177:23" pos:end="177:33"><name pos:start="177:23" pos:end="177:33"><name pos:start="177:23" pos:end="177:26">band</name><operator pos:start="177:27" pos:end="177:28">-&gt;</operator><name pos:start="177:29" pos:end="177:33">pitch</name></name></expr></argument>, <argument pos:start="177:36" pos:end="177:42"><expr pos:start="177:36" pos:end="177:42"><name pos:start="177:36" pos:end="177:42">mc_type</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="181:5" pos:end="181:13">return <expr pos:start="181:12" pos:end="181:12"><literal type="number" pos:start="181:12" pos:end="181:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
