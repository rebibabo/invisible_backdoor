<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25147.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">oggvorbis_encode_frame</name><parameter_list pos:start="1:34" pos:end="3:76">(<parameter pos:start="1:35" pos:end="1:55"><decl pos:start="1:35" pos:end="1:55"><type pos:start="1:35" pos:end="1:55"><name pos:start="1:35" pos:end="1:48">AVCodecContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">avctx</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:72"><decl pos:start="1:58" pos:end="1:72"><type pos:start="1:58" pos:end="1:72"><name pos:start="1:58" pos:end="1:65">AVPacket</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:72">avpkt</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:54"><decl pos:start="3:35" pos:end="3:54"><type pos:start="3:35" pos:end="3:54"><specifier pos:start="3:35" pos:end="3:39">const</specifier> <name pos:start="3:41" pos:end="3:47">AVFrame</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:54">frame</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:75"><decl pos:start="3:57" pos:end="3:75"><type pos:start="3:57" pos:end="3:75"><name pos:start="3:57" pos:end="3:59">int</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:75">got_packet_ptr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="179:1">{<block_content pos:start="7:5" pos:end="177:13">

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">OggVorbisEncContext</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:26">s</name> <init pos:start="7:28" pos:end="7:45">= <expr pos:start="7:30" pos:end="7:45"><name pos:start="7:30" pos:end="7:45"><name pos:start="7:30" pos:end="7:34">avctx</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:45">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:14">ogg_packet</name></type> <name pos:start="9:16" pos:end="9:17">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>, <decl pos:start="11:14" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:21">duration</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:35">/* send samples to libvorbis */</comment>

    <if_stmt pos:start="17:5" pos:end="67:5"><if pos:start="17:5" pos:end="53:5">if <condition pos:start="17:8" pos:end="17:14">(<expr pos:start="17:9" pos:end="17:13"><name pos:start="17:9" pos:end="17:13">frame</name></expr>)</condition> <block pos:start="17:16" pos:end="53:5">{<block_content pos:start="19:9" pos:end="51:23">

        <decl_stmt pos:start="19:9" pos:end="19:46"><decl pos:start="19:9" pos:end="19:45"><type pos:start="19:9" pos:end="19:17"><specifier pos:start="19:9" pos:end="19:13">const</specifier> <name pos:start="19:15" pos:end="19:17">int</name></type> <name pos:start="19:19" pos:end="19:25">samples</name> <init pos:start="19:27" pos:end="19:45">= <expr pos:start="19:29" pos:end="19:45"><name pos:start="19:29" pos:end="19:45"><name pos:start="19:29" pos:end="19:33">frame</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:45">nb_samples</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:23"><decl pos:start="21:9" pos:end="21:22"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:13">float</name> <modifier pos:start="21:15" pos:end="21:15">*</modifier><modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:22">buffer</name></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:41"><decl pos:start="23:9" pos:end="23:13"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:13">c</name></decl>, <decl pos:start="23:16" pos:end="23:40"><type ref="prev" pos:start="23:9" pos:end="23:11"/><name pos:start="23:16" pos:end="23:23">channels</name> <init pos:start="23:25" pos:end="23:40">= <expr pos:start="23:27" pos:end="23:40"><name pos:start="23:27" pos:end="23:40"><name pos:start="23:27" pos:end="23:27">s</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:31">vi</name><operator pos:start="23:32" pos:end="23:32">.</operator><name pos:start="23:33" pos:end="23:40">channels</name></name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="27:9" pos:end="27:57"><expr pos:start="27:9" pos:end="27:56"><name pos:start="27:9" pos:end="27:14">buffer</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <call pos:start="27:18" pos:end="27:56"><name pos:start="27:18" pos:end="27:39">vorbis_analysis_buffer</name><argument_list pos:start="27:40" pos:end="27:56">(<argument pos:start="27:41" pos:end="27:46"><expr pos:start="27:41" pos:end="27:46"><operator pos:start="27:41" pos:end="27:41">&amp;</operator><name pos:start="27:42" pos:end="27:46"><name pos:start="27:42" pos:end="27:42">s</name><operator pos:start="27:43" pos:end="27:44">-&gt;</operator><name pos:start="27:45" pos:end="27:46">vd</name></name></expr></argument>, <argument pos:start="27:49" pos:end="27:55"><expr pos:start="27:49" pos:end="27:55"><name pos:start="27:49" pos:end="27:55">samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="29:9" pos:end="39:9">for <control pos:start="29:13" pos:end="29:38">(<init pos:start="29:14" pos:end="29:19"><expr pos:start="29:14" pos:end="29:18"><name pos:start="29:14" pos:end="29:14">c</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</init> <condition pos:start="29:21" pos:end="29:33"><expr pos:start="29:21" pos:end="29:32"><name pos:start="29:21" pos:end="29:21">c</name> <operator pos:start="29:23" pos:end="29:23">&lt;</operator> <name pos:start="29:25" pos:end="29:32">channels</name></expr>;</condition> <incr pos:start="29:35" pos:end="29:37"><expr pos:start="29:35" pos:end="29:37"><name pos:start="29:35" pos:end="29:35">c</name><operator pos:start="29:36" pos:end="29:37">++</operator></expr></incr>)</control> <block pos:start="29:40" pos:end="39:9">{<block_content pos:start="31:13" pos:end="37:49">

            <decl_stmt pos:start="31:13" pos:end="33:80"><decl pos:start="31:13" pos:end="33:79"><type pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:15">int</name></type> <name pos:start="31:17" pos:end="31:18">co</name> <init pos:start="31:20" pos:end="33:79">= <expr pos:start="31:22" pos:end="33:79"><ternary pos:start="31:22" pos:end="33:79"><condition pos:start="31:22" pos:end="31:37"><expr pos:start="31:22" pos:end="31:35"><operator pos:start="31:22" pos:end="31:22">(</operator><name pos:start="31:23" pos:end="31:30">channels</name> <operator pos:start="31:32" pos:end="31:32">&gt;</operator> <literal type="number" pos:start="31:34" pos:end="31:34">8</literal><operator pos:start="31:35" pos:end="31:35">)</operator></expr> ?</condition><then pos:start="31:39" pos:end="31:39"> <expr pos:start="31:39" pos:end="31:39"><name pos:start="31:39" pos:end="31:39">c</name></expr> </then><else pos:start="31:41" pos:end="33:79">:

                     <expr pos:start="33:22" pos:end="33:79"><name pos:start="33:22" pos:end="33:79"><name pos:start="33:22" pos:end="33:62">ff_vorbis_encoding_channel_layout_offsets</name><index pos:start="33:63" pos:end="33:76">[<expr pos:start="33:64" pos:end="33:75"><name pos:start="33:64" pos:end="33:71">channels</name> <operator pos:start="33:73" pos:end="33:73">-</operator> <literal type="number" pos:start="33:75" pos:end="33:75">1</literal></expr>]</index><index pos:start="33:77" pos:end="33:79">[<expr pos:start="33:78" pos:end="33:78"><name pos:start="33:78" pos:end="33:78">c</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="35:13" pos:end="37:49"><expr pos:start="35:13" pos:end="37:48"><call pos:start="35:13" pos:end="37:48"><name pos:start="35:13" pos:end="35:18">memcpy</name><argument_list pos:start="35:19" pos:end="37:48">(<argument pos:start="35:20" pos:end="35:28"><expr pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:25">buffer</name><index pos:start="35:26" pos:end="35:28">[<expr pos:start="35:27" pos:end="35:27"><name pos:start="35:27" pos:end="35:27">c</name></expr>]</index></name></expr></argument>, <argument pos:start="35:31" pos:end="35:54"><expr pos:start="35:31" pos:end="35:54"><name pos:start="35:31" pos:end="35:54"><name pos:start="35:31" pos:end="35:35">frame</name><operator pos:start="35:36" pos:end="35:37">-&gt;</operator><name pos:start="35:38" pos:end="35:50">extended_data</name><index pos:start="35:51" pos:end="35:54">[<expr pos:start="35:52" pos:end="35:53"><name pos:start="35:52" pos:end="35:53">co</name></expr>]</index></name></expr></argument>,

                   <argument pos:start="37:20" pos:end="37:47"><expr pos:start="37:20" pos:end="37:47"><name pos:start="37:20" pos:end="37:26">samples</name> <operator pos:start="37:28" pos:end="37:28">*</operator> <sizeof pos:start="37:30" pos:end="37:47">sizeof<argument_list pos:start="37:36" pos:end="37:47">(<argument pos:start="37:37" pos:end="37:46"><expr pos:start="37:37" pos:end="37:46"><operator pos:start="37:37" pos:end="37:37">*</operator><name pos:start="37:38" pos:end="37:46"><name pos:start="37:38" pos:end="37:43">buffer</name><index pos:start="37:44" pos:end="37:46">[<expr pos:start="37:45" pos:end="37:45"><name pos:start="37:45" pos:end="37:45">c</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:63">(<expr pos:start="41:13" pos:end="41:62"><operator pos:start="41:13" pos:end="41:13">(</operator><name pos:start="41:14" pos:end="41:16">ret</name> <operator pos:start="41:18" pos:end="41:18">=</operator> <call pos:start="41:20" pos:end="41:57"><name pos:start="41:20" pos:end="41:40">vorbis_analysis_wrote</name><argument_list pos:start="41:41" pos:end="41:57">(<argument pos:start="41:42" pos:end="41:47"><expr pos:start="41:42" pos:end="41:47"><operator pos:start="41:42" pos:end="41:42">&amp;</operator><name pos:start="41:43" pos:end="41:47"><name pos:start="41:43" pos:end="41:43">s</name><operator pos:start="41:44" pos:end="41:45">-&gt;</operator><name pos:start="41:46" pos:end="41:47">vd</name></name></expr></argument>, <argument pos:start="41:50" pos:end="41:56"><expr pos:start="41:50" pos:end="41:56"><name pos:start="41:50" pos:end="41:56">samples</name></expr></argument>)</argument_list></call><operator pos:start="41:58" pos:end="41:58">)</operator> <operator pos:start="41:60" pos:end="41:60">&lt;</operator> <literal type="number" pos:start="41:62" pos:end="41:62">0</literal></expr>)</condition> <block pos:start="41:65" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:48">

            <expr_stmt pos:start="43:13" pos:end="43:78"><expr pos:start="43:13" pos:end="43:77"><call pos:start="43:13" pos:end="43:77"><name pos:start="43:13" pos:end="43:18">av_log</name><argument_list pos:start="43:19" pos:end="43:77">(<argument pos:start="43:20" pos:end="43:24"><expr pos:start="43:20" pos:end="43:24"><name pos:start="43:20" pos:end="43:24">avctx</name></expr></argument>, <argument pos:start="43:27" pos:end="43:38"><expr pos:start="43:27" pos:end="43:38"><name pos:start="43:27" pos:end="43:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:41" pos:end="43:76"><expr pos:start="43:41" pos:end="43:76"><literal type="string" pos:start="43:41" pos:end="43:76">"error in vorbis_analysis_wrote()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:48">return <expr pos:start="45:20" pos:end="45:47"><call pos:start="45:20" pos:end="45:47"><name pos:start="45:20" pos:end="45:42">vorbis_error_to_averror</name><argument_list pos:start="45:43" pos:end="45:47">(<argument pos:start="45:44" pos:end="45:46"><expr pos:start="45:44" pos:end="45:46"><name pos:start="45:44" pos:end="45:46">ret</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="49:9" pos:end="51:23"><if pos:start="49:9" pos:end="51:23">if <condition pos:start="49:12" pos:end="49:56">(<expr pos:start="49:13" pos:end="49:55"><operator pos:start="49:13" pos:end="49:13">(</operator><name pos:start="49:14" pos:end="49:16">ret</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <call pos:start="49:20" pos:end="49:50"><name pos:start="49:20" pos:end="49:34">ff_af_queue_add</name><argument_list pos:start="49:35" pos:end="49:50">(<argument pos:start="49:36" pos:end="49:42"><expr pos:start="49:36" pos:end="49:42"><operator pos:start="49:36" pos:end="49:36">&amp;</operator><name pos:start="49:37" pos:end="49:42"><name pos:start="49:37" pos:end="49:37">s</name><operator pos:start="49:38" pos:end="49:39">-&gt;</operator><name pos:start="49:40" pos:end="49:42">afq</name></name></expr></argument>, <argument pos:start="49:45" pos:end="49:49"><expr pos:start="49:45" pos:end="49:49"><name pos:start="49:45" pos:end="49:49">frame</name></expr></argument>)</argument_list></call><operator pos:start="49:51" pos:end="49:51">)</operator> <operator pos:start="49:53" pos:end="49:53">&lt;</operator> <literal type="number" pos:start="49:55" pos:end="49:55">0</literal></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:23"><block_content pos:start="51:13" pos:end="51:23">

            <return pos:start="51:13" pos:end="51:23">return <expr pos:start="51:20" pos:end="51:22"><name pos:start="51:20" pos:end="51:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="67:5">else <block pos:start="53:12" pos:end="67:5">{<block_content pos:start="55:9" pos:end="65:19">

        <if_stmt pos:start="55:9" pos:end="63:13"><if pos:start="55:9" pos:end="63:13">if <condition pos:start="55:12" pos:end="55:20">(<expr pos:start="55:13" pos:end="55:19"><operator pos:start="55:13" pos:end="55:13">!</operator><name pos:start="55:14" pos:end="55:19"><name pos:start="55:14" pos:end="55:14">s</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:19">eof</name></name></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="63:13"><block_content pos:start="57:13" pos:end="63:13">

            <if_stmt pos:start="57:13" pos:end="63:13"><if pos:start="57:13" pos:end="63:13">if <condition pos:start="57:16" pos:end="57:61">(<expr pos:start="57:17" pos:end="57:60"><operator pos:start="57:17" pos:end="57:17">(</operator><name pos:start="57:18" pos:end="57:20">ret</name> <operator pos:start="57:22" pos:end="57:22">=</operator> <call pos:start="57:24" pos:end="57:55"><name pos:start="57:24" pos:end="57:44">vorbis_analysis_wrote</name><argument_list pos:start="57:45" pos:end="57:55">(<argument pos:start="57:46" pos:end="57:51"><expr pos:start="57:46" pos:end="57:51"><operator pos:start="57:46" pos:end="57:46">&amp;</operator><name pos:start="57:47" pos:end="57:51"><name pos:start="57:47" pos:end="57:47">s</name><operator pos:start="57:48" pos:end="57:49">-&gt;</operator><name pos:start="57:50" pos:end="57:51">vd</name></name></expr></argument>, <argument pos:start="57:54" pos:end="57:54"><expr pos:start="57:54" pos:end="57:54"><literal type="number" pos:start="57:54" pos:end="57:54">0</literal></expr></argument>)</argument_list></call><operator pos:start="57:56" pos:end="57:56">)</operator> <operator pos:start="57:58" pos:end="57:58">&lt;</operator> <literal type="number" pos:start="57:60" pos:end="57:60">0</literal></expr>)</condition> <block pos:start="57:63" pos:end="63:13">{<block_content pos:start="59:17" pos:end="61:52">

                <expr_stmt pos:start="59:17" pos:end="59:82"><expr pos:start="59:17" pos:end="59:81"><call pos:start="59:17" pos:end="59:81"><name pos:start="59:17" pos:end="59:22">av_log</name><argument_list pos:start="59:23" pos:end="59:81">(<argument pos:start="59:24" pos:end="59:28"><expr pos:start="59:24" pos:end="59:28"><name pos:start="59:24" pos:end="59:28">avctx</name></expr></argument>, <argument pos:start="59:31" pos:end="59:42"><expr pos:start="59:31" pos:end="59:42"><name pos:start="59:31" pos:end="59:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:45" pos:end="59:80"><expr pos:start="59:45" pos:end="59:80"><literal type="string" pos:start="59:45" pos:end="59:80">"error in vorbis_analysis_wrote()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="61:17" pos:end="61:52">return <expr pos:start="61:24" pos:end="61:51"><call pos:start="61:24" pos:end="61:51"><name pos:start="61:24" pos:end="61:46">vorbis_error_to_averror</name><argument_list pos:start="61:47" pos:end="61:51">(<argument pos:start="61:48" pos:end="61:50"><expr pos:start="61:48" pos:end="61:50"><name pos:start="61:48" pos:end="61:50">ret</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:19"><expr pos:start="65:9" pos:end="65:18"><name pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:14">eof</name></name> <operator pos:start="65:16" pos:end="65:16">=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:51">/* retrieve available packets from libvorbis */</comment>

    <while pos:start="73:5" pos:end="111:5">while <condition pos:start="73:11" pos:end="73:65">(<expr pos:start="73:12" pos:end="73:64"><operator pos:start="73:12" pos:end="73:12">(</operator><name pos:start="73:13" pos:end="73:15">ret</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:58"><name pos:start="73:19" pos:end="73:42">vorbis_analysis_blockout</name><argument_list pos:start="73:43" pos:end="73:58">(<argument pos:start="73:44" pos:end="73:49"><expr pos:start="73:44" pos:end="73:49"><operator pos:start="73:44" pos:end="73:44">&amp;</operator><name pos:start="73:45" pos:end="73:49"><name pos:start="73:45" pos:end="73:45">s</name><operator pos:start="73:46" pos:end="73:47">-&gt;</operator><name pos:start="73:48" pos:end="73:49">vd</name></name></expr></argument>, <argument pos:start="73:52" pos:end="73:57"><expr pos:start="73:52" pos:end="73:57"><operator pos:start="73:52" pos:end="73:52">&amp;</operator><name pos:start="73:53" pos:end="73:57"><name pos:start="73:53" pos:end="73:53">s</name><operator pos:start="73:54" pos:end="73:55">-&gt;</operator><name pos:start="73:56" pos:end="73:57">vb</name></name></expr></argument>)</argument_list></call><operator pos:start="73:59" pos:end="73:59">)</operator> <operator pos:start="73:61" pos:end="73:62">==</operator> <literal type="number" pos:start="73:64" pos:end="73:64">1</literal></expr>)</condition> <block pos:start="73:67" pos:end="111:5">{<block_content pos:start="75:9" pos:end="109:9">

        <if_stmt pos:start="75:9" pos:end="77:18"><if pos:start="75:9" pos:end="77:18">if <condition pos:start="75:12" pos:end="75:54">(<expr pos:start="75:13" pos:end="75:53"><operator pos:start="75:13" pos:end="75:13">(</operator><name pos:start="75:14" pos:end="75:16">ret</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:48"><name pos:start="75:20" pos:end="75:34">vorbis_analysis</name><argument_list pos:start="75:35" pos:end="75:48">(<argument pos:start="75:36" pos:end="75:41"><expr pos:start="75:36" pos:end="75:41"><operator pos:start="75:36" pos:end="75:36">&amp;</operator><name pos:start="75:37" pos:end="75:41"><name pos:start="75:37" pos:end="75:37">s</name><operator pos:start="75:38" pos:end="75:39">-&gt;</operator><name pos:start="75:40" pos:end="75:41">vb</name></name></expr></argument>, <argument pos:start="75:44" pos:end="75:47"><expr pos:start="75:44" pos:end="75:47"><name pos:start="75:44" pos:end="75:47">NULL</name></expr></argument>)</argument_list></call><operator pos:start="75:49" pos:end="75:49">)</operator> <operator pos:start="75:51" pos:end="75:51">&lt;</operator> <literal type="number" pos:start="75:53" pos:end="75:53">0</literal></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:18"><block_content pos:start="77:13" pos:end="77:18">

            <break pos:start="77:13" pos:end="77:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="79:9" pos:end="81:18"><if pos:start="79:9" pos:end="81:18">if <condition pos:start="79:12" pos:end="79:56">(<expr pos:start="79:13" pos:end="79:55"><operator pos:start="79:13" pos:end="79:13">(</operator><name pos:start="79:14" pos:end="79:16">ret</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <call pos:start="79:20" pos:end="79:50"><name pos:start="79:20" pos:end="79:42">vorbis_bitrate_addblock</name><argument_list pos:start="79:43" pos:end="79:50">(<argument pos:start="79:44" pos:end="79:49"><expr pos:start="79:44" pos:end="79:49"><operator pos:start="79:44" pos:end="79:44">&amp;</operator><name pos:start="79:45" pos:end="79:49"><name pos:start="79:45" pos:end="79:45">s</name><operator pos:start="79:46" pos:end="79:47">-&gt;</operator><name pos:start="79:48" pos:end="79:49">vb</name></name></expr></argument>)</argument_list></call><operator pos:start="79:51" pos:end="79:51">)</operator> <operator pos:start="79:53" pos:end="79:53">&lt;</operator> <literal type="number" pos:start="79:55" pos:end="79:55">0</literal></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:18"><block_content pos:start="81:13" pos:end="81:18">

            <break pos:start="81:13" pos:end="81:18">break;</break></block_content></block></if></if_stmt>



        <comment type="block" pos:start="85:9" pos:end="85:67">/* add any available packets to the output packet buffer */</comment>

        <while pos:start="87:9" pos:end="101:9">while <condition pos:start="87:15" pos:end="87:68">(<expr pos:start="87:16" pos:end="87:67"><operator pos:start="87:16" pos:end="87:16">(</operator><name pos:start="87:17" pos:end="87:19">ret</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <call pos:start="87:23" pos:end="87:61"><name pos:start="87:23" pos:end="87:48">vorbis_bitrate_flushpacket</name><argument_list pos:start="87:49" pos:end="87:61">(<argument pos:start="87:50" pos:end="87:55"><expr pos:start="87:50" pos:end="87:55"><operator pos:start="87:50" pos:end="87:50">&amp;</operator><name pos:start="87:51" pos:end="87:55"><name pos:start="87:51" pos:end="87:51">s</name><operator pos:start="87:52" pos:end="87:53">-&gt;</operator><name pos:start="87:54" pos:end="87:55">vd</name></name></expr></argument>, <argument pos:start="87:58" pos:end="87:60"><expr pos:start="87:58" pos:end="87:60"><operator pos:start="87:58" pos:end="87:58">&amp;</operator><name pos:start="87:59" pos:end="87:60">op</name></expr></argument>)</argument_list></call><operator pos:start="87:62" pos:end="87:62">)</operator> <operator pos:start="87:64" pos:end="87:65">==</operator> <literal type="number" pos:start="87:67" pos:end="87:67">1</literal></expr>)</condition> <block pos:start="87:70" pos:end="101:9">{<block_content pos:start="89:13" pos:end="99:74">

            <if_stmt pos:start="89:13" pos:end="95:13"><if pos:start="89:13" pos:end="95:13">if <condition pos:start="89:16" pos:end="89:75">(<expr pos:start="89:17" pos:end="89:74"><call pos:start="89:17" pos:end="89:42"><name pos:start="89:17" pos:end="89:29">av_fifo_space</name><argument_list pos:start="89:30" pos:end="89:42">(<argument pos:start="89:31" pos:end="89:41"><expr pos:start="89:31" pos:end="89:41"><name pos:start="89:31" pos:end="89:41"><name pos:start="89:31" pos:end="89:31">s</name><operator pos:start="89:32" pos:end="89:33">-&gt;</operator><name pos:start="89:34" pos:end="89:41">pkt_fifo</name></name></expr></argument>)</argument_list></call> <operator pos:start="89:44" pos:end="89:44">&lt;</operator> <sizeof pos:start="89:46" pos:end="89:63">sizeof<argument_list pos:start="89:52" pos:end="89:63">(<argument pos:start="89:53" pos:end="89:62"><expr pos:start="89:53" pos:end="89:62"><name pos:start="89:53" pos:end="89:62">ogg_packet</name></expr></argument>)</argument_list></sizeof> <operator pos:start="89:65" pos:end="89:65">+</operator> <name pos:start="89:67" pos:end="89:74"><name pos:start="89:67" pos:end="89:68">op</name><operator pos:start="89:69" pos:end="89:69">.</operator><name pos:start="89:70" pos:end="89:74">bytes</name></name></expr>)</condition> <block pos:start="89:77" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:35">

                <expr_stmt pos:start="91:17" pos:end="91:76"><expr pos:start="91:17" pos:end="91:75"><call pos:start="91:17" pos:end="91:75"><name pos:start="91:17" pos:end="91:22">av_log</name><argument_list pos:start="91:23" pos:end="91:75">(<argument pos:start="91:24" pos:end="91:28"><expr pos:start="91:24" pos:end="91:28"><name pos:start="91:24" pos:end="91:28">avctx</name></expr></argument>, <argument pos:start="91:31" pos:end="91:42"><expr pos:start="91:31" pos:end="91:42"><name pos:start="91:31" pos:end="91:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:45" pos:end="91:74"><expr pos:start="91:45" pos:end="91:74"><literal type="string" pos:start="91:45" pos:end="91:74">"packet buffer is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="93:17" pos:end="93:35">return <expr pos:start="93:24" pos:end="93:34"><name pos:start="93:24" pos:end="93:34">AVERROR_BUG</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:78"><expr pos:start="97:13" pos:end="97:77"><call pos:start="97:13" pos:end="97:77"><name pos:start="97:13" pos:end="97:33">av_fifo_generic_write</name><argument_list pos:start="97:34" pos:end="97:77">(<argument pos:start="97:35" pos:end="97:45"><expr pos:start="97:35" pos:end="97:45"><name pos:start="97:35" pos:end="97:45"><name pos:start="97:35" pos:end="97:35">s</name><operator pos:start="97:36" pos:end="97:37">-&gt;</operator><name pos:start="97:38" pos:end="97:45">pkt_fifo</name></name></expr></argument>, <argument pos:start="97:48" pos:end="97:50"><expr pos:start="97:48" pos:end="97:50"><operator pos:start="97:48" pos:end="97:48">&amp;</operator><name pos:start="97:49" pos:end="97:50">op</name></expr></argument>, <argument pos:start="97:53" pos:end="97:70"><expr pos:start="97:53" pos:end="97:70"><sizeof pos:start="97:53" pos:end="97:70">sizeof<argument_list pos:start="97:59" pos:end="97:70">(<argument pos:start="97:60" pos:end="97:69"><expr pos:start="97:60" pos:end="97:69"><name pos:start="97:60" pos:end="97:69">ogg_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="97:73" pos:end="97:76"><expr pos:start="97:73" pos:end="97:76"><name pos:start="97:73" pos:end="97:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:74"><expr pos:start="99:13" pos:end="99:73"><call pos:start="99:13" pos:end="99:73"><name pos:start="99:13" pos:end="99:33">av_fifo_generic_write</name><argument_list pos:start="99:34" pos:end="99:73">(<argument pos:start="99:35" pos:end="99:45"><expr pos:start="99:35" pos:end="99:45"><name pos:start="99:35" pos:end="99:45"><name pos:start="99:35" pos:end="99:35">s</name><operator pos:start="99:36" pos:end="99:37">-&gt;</operator><name pos:start="99:38" pos:end="99:45">pkt_fifo</name></name></expr></argument>, <argument pos:start="99:48" pos:end="99:56"><expr pos:start="99:48" pos:end="99:56"><name pos:start="99:48" pos:end="99:56"><name pos:start="99:48" pos:end="99:49">op</name><operator pos:start="99:50" pos:end="99:50">.</operator><name pos:start="99:51" pos:end="99:56">packet</name></name></expr></argument>, <argument pos:start="99:59" pos:end="99:66"><expr pos:start="99:59" pos:end="99:66"><name pos:start="99:59" pos:end="99:66"><name pos:start="99:59" pos:end="99:60">op</name><operator pos:start="99:61" pos:end="99:61">.</operator><name pos:start="99:62" pos:end="99:66">bytes</name></name></expr></argument>, <argument pos:start="99:69" pos:end="99:72"><expr pos:start="99:69" pos:end="99:72"><name pos:start="99:69" pos:end="99:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <if_stmt pos:start="103:9" pos:end="109:9"><if pos:start="103:9" pos:end="109:9">if <condition pos:start="103:12" pos:end="103:20">(<expr pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:15">ret</name> <operator pos:start="103:17" pos:end="103:17">&lt;</operator> <literal type="number" pos:start="103:19" pos:end="103:19">0</literal></expr>)</condition> <block pos:start="103:22" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:18">

            <expr_stmt pos:start="105:13" pos:end="105:77"><expr pos:start="105:13" pos:end="105:76"><call pos:start="105:13" pos:end="105:76"><name pos:start="105:13" pos:end="105:18">av_log</name><argument_list pos:start="105:19" pos:end="105:76">(<argument pos:start="105:20" pos:end="105:24"><expr pos:start="105:20" pos:end="105:24"><name pos:start="105:20" pos:end="105:24">avctx</name></expr></argument>, <argument pos:start="105:27" pos:end="105:38"><expr pos:start="105:27" pos:end="105:38"><name pos:start="105:27" pos:end="105:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="105:41" pos:end="105:75"><expr pos:start="105:41" pos:end="105:75"><literal type="string" pos:start="105:41" pos:end="105:75">"error getting available packets\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:16">(<expr pos:start="113:9" pos:end="113:15"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">&lt;</operator> <literal type="number" pos:start="113:15" pos:end="113:15">0</literal></expr>)</condition> <block pos:start="113:18" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:44">

        <expr_stmt pos:start="115:9" pos:end="115:73"><expr pos:start="115:9" pos:end="115:72"><call pos:start="115:9" pos:end="115:72"><name pos:start="115:9" pos:end="115:14">av_log</name><argument_list pos:start="115:15" pos:end="115:72">(<argument pos:start="115:16" pos:end="115:20"><expr pos:start="115:16" pos:end="115:20"><name pos:start="115:16" pos:end="115:20">avctx</name></expr></argument>, <argument pos:start="115:23" pos:end="115:34"><expr pos:start="115:23" pos:end="115:34"><name pos:start="115:23" pos:end="115:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:37" pos:end="115:71"><expr pos:start="115:37" pos:end="115:71"><literal type="string" pos:start="115:37" pos:end="115:71">"error getting available packets\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:44">return <expr pos:start="117:16" pos:end="117:43"><call pos:start="117:16" pos:end="117:43"><name pos:start="117:16" pos:end="117:38">vorbis_error_to_averror</name><argument_list pos:start="117:39" pos:end="117:43">(<argument pos:start="117:40" pos:end="117:42"><expr pos:start="117:40" pos:end="117:42"><name pos:start="117:40" pos:end="117:42">ret</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:37">/* check for available packets */</comment>

    <if_stmt pos:start="125:5" pos:end="127:17"><if pos:start="125:5" pos:end="127:17">if <condition pos:start="125:8" pos:end="125:55">(<expr pos:start="125:9" pos:end="125:54"><call pos:start="125:9" pos:end="125:33"><name pos:start="125:9" pos:end="125:20">av_fifo_size</name><argument_list pos:start="125:21" pos:end="125:33">(<argument pos:start="125:22" pos:end="125:32"><expr pos:start="125:22" pos:end="125:32"><name pos:start="125:22" pos:end="125:32"><name pos:start="125:22" pos:end="125:22">s</name><operator pos:start="125:23" pos:end="125:24">-&gt;</operator><name pos:start="125:25" pos:end="125:32">pkt_fifo</name></name></expr></argument>)</argument_list></call> <operator pos:start="125:35" pos:end="125:35">&lt;</operator> <sizeof pos:start="125:37" pos:end="125:54">sizeof<argument_list pos:start="125:43" pos:end="125:54">(<argument pos:start="125:44" pos:end="125:53"><expr pos:start="125:44" pos:end="125:53"><name pos:start="125:44" pos:end="125:53">ogg_packet</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="127:9" pos:end="127:17"><block_content pos:start="127:9" pos:end="127:17">

        <return pos:start="127:9" pos:end="127:17">return <expr pos:start="127:16" pos:end="127:16"><literal type="number" pos:start="127:16" pos:end="127:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:69"><expr pos:start="131:5" pos:end="131:68"><call pos:start="131:5" pos:end="131:68"><name pos:start="131:5" pos:end="131:24">av_fifo_generic_read</name><argument_list pos:start="131:25" pos:end="131:68">(<argument pos:start="131:26" pos:end="131:36"><expr pos:start="131:26" pos:end="131:36"><name pos:start="131:26" pos:end="131:36"><name pos:start="131:26" pos:end="131:26">s</name><operator pos:start="131:27" pos:end="131:28">-&gt;</operator><name pos:start="131:29" pos:end="131:36">pkt_fifo</name></name></expr></argument>, <argument pos:start="131:39" pos:end="131:41"><expr pos:start="131:39" pos:end="131:41"><operator pos:start="131:39" pos:end="131:39">&amp;</operator><name pos:start="131:40" pos:end="131:41">op</name></expr></argument>, <argument pos:start="131:44" pos:end="131:61"><expr pos:start="131:44" pos:end="131:61"><sizeof pos:start="131:44" pos:end="131:61">sizeof<argument_list pos:start="131:50" pos:end="131:61">(<argument pos:start="131:51" pos:end="131:60"><expr pos:start="131:51" pos:end="131:60"><name pos:start="131:51" pos:end="131:60">ogg_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="131:64" pos:end="131:67"><expr pos:start="131:64" pos:end="131:67"><name pos:start="131:64" pos:end="131:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="135:5" pos:end="137:19"><if pos:start="135:5" pos:end="137:19">if <condition pos:start="135:8" pos:end="135:57">(<expr pos:start="135:9" pos:end="135:56"><operator pos:start="135:9" pos:end="135:9">(</operator><name pos:start="135:10" pos:end="135:12">ret</name> <operator pos:start="135:14" pos:end="135:14">=</operator> <call pos:start="135:16" pos:end="135:55"><name pos:start="135:16" pos:end="135:31">ff_alloc_packet2</name><argument_list pos:start="135:32" pos:end="135:55">(<argument pos:start="135:33" pos:end="135:37"><expr pos:start="135:33" pos:end="135:37"><name pos:start="135:33" pos:end="135:37">avctx</name></expr></argument>, <argument pos:start="135:40" pos:end="135:44"><expr pos:start="135:40" pos:end="135:44"><name pos:start="135:40" pos:end="135:44">avpkt</name></expr></argument>, <argument pos:start="135:47" pos:end="135:54"><expr pos:start="135:47" pos:end="135:54"><name pos:start="135:47" pos:end="135:54"><name pos:start="135:47" pos:end="135:48">op</name><operator pos:start="135:49" pos:end="135:49">.</operator><name pos:start="135:50" pos:end="135:54">bytes</name></name></expr></argument>)</argument_list></call><operator pos:start="135:56" pos:end="135:56">)</operator></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:19"><block_content pos:start="137:9" pos:end="137:19">

        <return pos:start="137:9" pos:end="137:19">return <expr pos:start="137:16" pos:end="137:18"><name pos:start="137:16" pos:end="137:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:67"><expr pos:start="139:5" pos:end="139:66"><call pos:start="139:5" pos:end="139:66"><name pos:start="139:5" pos:end="139:24">av_fifo_generic_read</name><argument_list pos:start="139:25" pos:end="139:66">(<argument pos:start="139:26" pos:end="139:36"><expr pos:start="139:26" pos:end="139:36"><name pos:start="139:26" pos:end="139:36"><name pos:start="139:26" pos:end="139:26">s</name><operator pos:start="139:27" pos:end="139:28">-&gt;</operator><name pos:start="139:29" pos:end="139:36">pkt_fifo</name></name></expr></argument>, <argument pos:start="139:39" pos:end="139:49"><expr pos:start="139:39" pos:end="139:49"><name pos:start="139:39" pos:end="139:49"><name pos:start="139:39" pos:end="139:43">avpkt</name><operator pos:start="139:44" pos:end="139:45">-&gt;</operator><name pos:start="139:46" pos:end="139:49">data</name></name></expr></argument>, <argument pos:start="139:52" pos:end="139:59"><expr pos:start="139:52" pos:end="139:59"><name pos:start="139:52" pos:end="139:59"><name pos:start="139:52" pos:end="139:53">op</name><operator pos:start="139:54" pos:end="139:54">.</operator><name pos:start="139:55" pos:end="139:59">bytes</name></name></expr></argument>, <argument pos:start="139:62" pos:end="139:65"><expr pos:start="139:62" pos:end="139:65"><name pos:start="139:62" pos:end="139:65">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:63"><expr pos:start="143:5" pos:end="143:62"><name pos:start="143:5" pos:end="143:14"><name pos:start="143:5" pos:end="143:9">avpkt</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:14">pts</name></name> <operator pos:start="143:16" pos:end="143:16">=</operator> <call pos:start="143:18" pos:end="143:62"><name pos:start="143:18" pos:end="143:40">ff_samples_to_time_base</name><argument_list pos:start="143:41" pos:end="143:62">(<argument pos:start="143:42" pos:end="143:46"><expr pos:start="143:42" pos:end="143:46"><name pos:start="143:42" pos:end="143:46">avctx</name></expr></argument>, <argument pos:start="143:49" pos:end="143:61"><expr pos:start="143:49" pos:end="143:61"><name pos:start="143:49" pos:end="143:61"><name pos:start="143:49" pos:end="143:50">op</name><operator pos:start="143:51" pos:end="143:51">.</operator><name pos:start="143:52" pos:end="143:61">granulepos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:75"><expr pos:start="147:5" pos:end="147:74"><name pos:start="147:5" pos:end="147:12">duration</name> <operator pos:start="147:14" pos:end="147:14">=</operator> <call pos:start="147:16" pos:end="147:74"><name pos:start="147:16" pos:end="147:40">avpriv_vorbis_parse_frame</name><argument_list pos:start="147:41" pos:end="147:74">(<argument pos:start="147:42" pos:end="147:47"><expr pos:start="147:42" pos:end="147:47"><operator pos:start="147:42" pos:end="147:42">&amp;</operator><name pos:start="147:43" pos:end="147:47"><name pos:start="147:43" pos:end="147:43">s</name><operator pos:start="147:44" pos:end="147:45">-&gt;</operator><name pos:start="147:46" pos:end="147:47">vp</name></name></expr></argument>, <argument pos:start="147:50" pos:end="147:60"><expr pos:start="147:50" pos:end="147:60"><name pos:start="147:50" pos:end="147:60"><name pos:start="147:50" pos:end="147:54">avpkt</name><operator pos:start="147:55" pos:end="147:56">-&gt;</operator><name pos:start="147:57" pos:end="147:60">data</name></name></expr></argument>, <argument pos:start="147:63" pos:end="147:73"><expr pos:start="147:63" pos:end="147:73"><name pos:start="147:63" pos:end="147:73"><name pos:start="147:63" pos:end="147:67">avpkt</name><operator pos:start="147:68" pos:end="147:69">-&gt;</operator><name pos:start="147:70" pos:end="147:73">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="171:5"><if pos:start="149:5" pos:end="171:5">if <condition pos:start="149:8" pos:end="149:21">(<expr pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:16">duration</name> <operator pos:start="149:18" pos:end="149:18">&gt;</operator> <literal type="number" pos:start="149:20" pos:end="149:20">0</literal></expr>)</condition> <block pos:start="149:23" pos:end="171:5">{<block_content pos:start="155:9" pos:end="169:77">

        <comment type="block" pos:start="151:9" pos:end="153:72">/* we do not know encoder delay until we get the first packet from

         * libvorbis, so we have to update the AudioFrameQueue counts */</comment>

        <if_stmt pos:start="155:9" pos:end="167:9"><if pos:start="155:9" pos:end="167:9">if <condition pos:start="155:12" pos:end="155:43">(<expr pos:start="155:13" pos:end="155:42"><operator pos:start="155:13" pos:end="155:13">!</operator><name pos:start="155:14" pos:end="155:25"><name pos:start="155:14" pos:end="155:18">avctx</name><operator pos:start="155:19" pos:end="155:20">-&gt;</operator><name pos:start="155:21" pos:end="155:25">delay</name></name> <operator pos:start="155:27" pos:end="155:28">&amp;&amp;</operator> <name pos:start="155:30" pos:end="155:42"><name pos:start="155:30" pos:end="155:30">s</name><operator pos:start="155:31" pos:end="155:32">-&gt;</operator><name pos:start="155:33" pos:end="155:35">afq</name><operator pos:start="155:36" pos:end="155:36">.</operator><name pos:start="155:37" pos:end="155:42">frames</name></name></expr>)</condition> <block pos:start="155:45" pos:end="167:9">{<block_content pos:start="157:13" pos:end="165:49">

            <expr_stmt pos:start="157:13" pos:end="157:49"><expr pos:start="157:13" pos:end="157:48"><name pos:start="157:13" pos:end="157:24"><name pos:start="157:13" pos:end="157:17">avctx</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:24">delay</name></name>              <operator pos:start="157:39" pos:end="157:39">=</operator> <name pos:start="157:41" pos:end="157:48">duration</name></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:48"><expr pos:start="159:13" pos:end="159:47"><call pos:start="159:13" pos:end="159:47"><name pos:start="159:13" pos:end="159:22">av_assert0</name><argument_list pos:start="159:23" pos:end="159:47">(<argument pos:start="159:24" pos:end="159:46"><expr pos:start="159:24" pos:end="159:46"><operator pos:start="159:24" pos:end="159:24">!</operator><name pos:start="159:25" pos:end="159:46"><name pos:start="159:25" pos:end="159:25">s</name><operator pos:start="159:26" pos:end="159:27">-&gt;</operator><name pos:start="159:28" pos:end="159:30">afq</name><operator pos:start="159:31" pos:end="159:31">.</operator><name pos:start="159:32" pos:end="159:46">remaining_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:49"><expr pos:start="161:13" pos:end="161:48"><name pos:start="161:13" pos:end="161:35"><name pos:start="161:13" pos:end="161:13">s</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:18">afq</name><operator pos:start="161:19" pos:end="161:19">.</operator><name pos:start="161:20" pos:end="161:25">frames</name><operator pos:start="161:26" pos:end="161:27">-&gt;</operator><name pos:start="161:28" pos:end="161:35">duration</name></name>  <operator pos:start="161:38" pos:end="161:39">+=</operator> <name pos:start="161:41" pos:end="161:48">duration</name></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:49"><expr pos:start="163:13" pos:end="163:48"><name pos:start="163:13" pos:end="163:30"><name pos:start="163:13" pos:end="163:13">s</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:18">afq</name><operator pos:start="163:19" pos:end="163:19">.</operator><name pos:start="163:20" pos:end="163:25">frames</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:30">pts</name></name>       <operator pos:start="163:38" pos:end="163:39">-=</operator> <name pos:start="163:41" pos:end="163:48">duration</name></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:49"><expr pos:start="165:13" pos:end="165:48"><name pos:start="165:13" pos:end="165:36"><name pos:start="165:13" pos:end="165:13">s</name><operator pos:start="165:14" pos:end="165:15">-&gt;</operator><name pos:start="165:16" pos:end="165:18">afq</name><operator pos:start="165:19" pos:end="165:19">.</operator><name pos:start="165:20" pos:end="165:36">remaining_samples</name></name> <operator pos:start="165:38" pos:end="165:39">+=</operator> <name pos:start="165:41" pos:end="165:48">duration</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:77"><expr pos:start="169:9" pos:end="169:76"><call pos:start="169:9" pos:end="169:76"><name pos:start="169:9" pos:end="169:26">ff_af_queue_remove</name><argument_list pos:start="169:27" pos:end="169:76">(<argument pos:start="169:28" pos:end="169:34"><expr pos:start="169:28" pos:end="169:34"><operator pos:start="169:28" pos:end="169:28">&amp;</operator><name pos:start="169:29" pos:end="169:34"><name pos:start="169:29" pos:end="169:29">s</name><operator pos:start="169:30" pos:end="169:31">-&gt;</operator><name pos:start="169:32" pos:end="169:34">afq</name></name></expr></argument>, <argument pos:start="169:37" pos:end="169:44"><expr pos:start="169:37" pos:end="169:44"><name pos:start="169:37" pos:end="169:44">duration</name></expr></argument>, <argument pos:start="169:47" pos:end="169:57"><expr pos:start="169:47" pos:end="169:57"><operator pos:start="169:47" pos:end="169:47">&amp;</operator><name pos:start="169:48" pos:end="169:57"><name pos:start="169:48" pos:end="169:52">avpkt</name><operator pos:start="169:53" pos:end="169:54">-&gt;</operator><name pos:start="169:55" pos:end="169:57">pts</name></name></expr></argument>, <argument pos:start="169:60" pos:end="169:75"><expr pos:start="169:60" pos:end="169:75"><operator pos:start="169:60" pos:end="169:60">&amp;</operator><name pos:start="169:61" pos:end="169:75"><name pos:start="169:61" pos:end="169:65">avpkt</name><operator pos:start="169:66" pos:end="169:67">-&gt;</operator><name pos:start="169:68" pos:end="169:75">duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:24"><expr pos:start="175:5" pos:end="175:23"><operator pos:start="175:5" pos:end="175:5">*</operator><name pos:start="175:6" pos:end="175:19">got_packet_ptr</name> <operator pos:start="175:21" pos:end="175:21">=</operator> <literal type="number" pos:start="175:23" pos:end="175:23">1</literal></expr>;</expr_stmt>

    <return pos:start="177:5" pos:end="177:13">return <expr pos:start="177:12" pos:end="177:12"><literal type="number" pos:start="177:12" pos:end="177:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
