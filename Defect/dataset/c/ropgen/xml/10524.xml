<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10524.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">syscall_init</name><parameter_list pos:start="1:18" pos:end="1:23">(<parameter pos:start="1:19" pos:end="1:22"><decl pos:start="1:19" pos:end="1:22"><type pos:start="1:19" pos:end="1:22"><name pos:start="1:19" pos:end="1:22">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:5">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">IOCTLEntry</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:18">ie</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">argtype</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:27">arg_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="24:0"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



<cpp:define pos:start="15:1" pos:end="15:101">#<cpp:directive pos:start="15:2" pos:end="15:7">define</cpp:directive> <cpp:macro pos:start="15:9" pos:end="15:29"><name pos:start="15:9" pos:end="15:14">STRUCT</name><parameter_list pos:start="15:15" pos:end="15:29">(<parameter pos:start="15:16" pos:end="15:19"><type pos:start="15:16" pos:end="15:19"><name pos:start="15:16" pos:end="15:19">name</name></type></parameter>, <parameter pos:start="15:22" pos:end="15:28"><type pos:start="15:22" pos:end="15:28"><name pos:start="15:22" pos:end="15:25">list</name><modifier pos:start="15:26" pos:end="15:28">...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="15:31" pos:end="15:101">thunk_register_struct(STRUCT_ ## name, #name, struct_ ## name ## _def);</cpp:value></cpp:define>

<cpp:define pos:start="17:1" pos:end="17:108">#<cpp:directive pos:start="17:2" pos:end="17:7">define</cpp:directive> <cpp:macro pos:start="17:9" pos:end="17:28"><name pos:start="17:9" pos:end="17:22">STRUCT_SPECIAL</name><parameter_list pos:start="17:23" pos:end="17:28">(<parameter pos:start="17:24" pos:end="17:27"><type pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="17:30" pos:end="17:108">thunk_register_struct_direct(STRUCT_ ## name, #name, &amp;struct_ ## name ## _def);</cpp:value></cpp:define>

<cpp:include pos:start="19:1" pos:end="19:26">#<cpp:directive pos:start="19:2" pos:end="19:8">include</cpp:directive> <cpp:file pos:start="19:10" pos:end="19:26">"syscall_types.h"</cpp:file></cpp:include>

<cpp:undef pos:start="21:1" pos:end="21:13">#<cpp:directive pos:start="21:2" pos:end="21:6">undef</cpp:directive> <name pos:start="21:8" pos:end="21:13">STRUCT</name></cpp:undef>

<cpp:undef pos:start="23:1" pos:end="23:21">#<cpp:directive pos:start="23:2" pos:end="23:6">undef</cpp:directive> <name pos:start="23:8" pos:end="23:21">STRUCT_SPECIAL</name></cpp:undef>



    <comment type="block" pos:start="27:5" pos:end="29:60">/* we patch the ioctl size if necessary. We rely on the fact that

       no ioctl has all the bits at '1' in the size field */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:6">ie</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <name pos:start="31:10" pos:end="31:22">ioctl_entries</name></expr>;</expr_stmt>

    <while pos:start="33:5" pos:end="91:5">while <condition pos:start="33:11" pos:end="33:31">(<expr pos:start="33:12" pos:end="33:30"><name pos:start="33:12" pos:end="33:25"><name pos:start="33:12" pos:end="33:13">ie</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:25">target_cmd</name></name> <operator pos:start="33:27" pos:end="33:28">!=</operator> <literal type="number" pos:start="33:30" pos:end="33:30">0</literal></expr>)</condition> <block pos:start="33:33" pos:end="91:5">{<block_content pos:start="35:9" pos:end="89:13">

        <if_stmt pos:start="35:9" pos:end="61:9"><if pos:start="35:9" pos:end="61:9">if <condition pos:start="35:12" pos:end="37:32">(<expr pos:start="35:13" pos:end="37:31"><operator pos:start="35:13" pos:end="35:13">(</operator><operator pos:start="35:14" pos:end="35:14">(</operator><name pos:start="35:15" pos:end="35:28"><name pos:start="35:15" pos:end="35:16">ie</name><operator pos:start="35:17" pos:end="35:18">-&gt;</operator><name pos:start="35:19" pos:end="35:28">target_cmd</name></name> <operator pos:start="35:30" pos:end="35:31">&gt;&gt;</operator> <name pos:start="35:33" pos:end="35:52">TARGET_IOC_SIZESHIFT</name><operator pos:start="35:53" pos:end="35:53">)</operator> <operator pos:start="35:55" pos:end="35:55">&amp;</operator> <name pos:start="35:57" pos:end="35:75">TARGET_IOC_SIZEMASK</name><operator pos:start="35:76" pos:end="35:76">)</operator> <operator pos:start="35:78" pos:end="35:79">==</operator>

            <name pos:start="37:13" pos:end="37:31">TARGET_IOC_SIZEMASK</name></expr>)</condition> <block pos:start="37:34" pos:end="61:9">{<block_content pos:start="39:13" pos:end="59:47">

            <expr_stmt pos:start="39:13" pos:end="39:36"><expr pos:start="39:13" pos:end="39:35"><name pos:start="39:13" pos:end="39:20">arg_type</name> <operator pos:start="39:22" pos:end="39:22">=</operator> <name pos:start="39:24" pos:end="39:35"><name pos:start="39:24" pos:end="39:25">ie</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:35">arg_type</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="49:13"><if pos:start="41:13" pos:end="49:13">if <condition pos:start="41:16" pos:end="41:40">(<expr pos:start="41:17" pos:end="41:39"><name pos:start="41:17" pos:end="41:27"><name pos:start="41:17" pos:end="41:24">arg_type</name><index pos:start="41:25" pos:end="41:27">[<expr pos:start="41:26" pos:end="41:26"><literal type="number" pos:start="41:26" pos:end="41:26">0</literal></expr>]</index></name> <operator pos:start="41:29" pos:end="41:30">!=</operator> <name pos:start="41:32" pos:end="41:39">TYPE_PTR</name></expr>)</condition> <block pos:start="41:42" pos:end="49:13">{<block_content pos:start="43:17" pos:end="47:24">

                <expr_stmt pos:start="43:17" pos:end="45:40"><expr pos:start="43:17" pos:end="45:39"><call pos:start="43:17" pos:end="45:39"><name pos:start="43:17" pos:end="43:23">fprintf</name><argument_list pos:start="43:24" pos:end="45:39">(<argument pos:start="43:25" pos:end="43:30"><expr pos:start="43:25" pos:end="43:30"><name pos:start="43:25" pos:end="43:30">stderr</name></expr></argument>, <argument pos:start="43:33" pos:end="43:68"><expr pos:start="43:33" pos:end="43:68"><literal type="string" pos:start="43:33" pos:end="43:68">"cannot patch size for ioctl 0x%x\n"</literal></expr></argument>,

                        <argument pos:start="45:25" pos:end="45:38"><expr pos:start="45:25" pos:end="45:38"><name pos:start="45:25" pos:end="45:38"><name pos:start="45:25" pos:end="45:26">ie</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:38">target_cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:24"><expr pos:start="47:17" pos:end="47:23"><call pos:start="47:17" pos:end="47:23"><name pos:start="47:17" pos:end="47:20">exit</name><argument_list pos:start="47:21" pos:end="47:23">(<argument pos:start="47:22" pos:end="47:22"><expr pos:start="47:22" pos:end="47:22"><literal type="number" pos:start="47:22" pos:end="47:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:23"><expr pos:start="51:13" pos:end="51:22"><name pos:start="51:13" pos:end="51:20">arg_type</name><operator pos:start="51:21" pos:end="51:22">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:48"><expr pos:start="53:13" pos:end="53:47"><name pos:start="53:13" pos:end="53:16">size</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <call pos:start="53:20" pos:end="53:47"><name pos:start="53:20" pos:end="53:34">thunk_type_size</name><argument_list pos:start="53:35" pos:end="53:47">(<argument pos:start="53:36" pos:end="53:43"><expr pos:start="53:36" pos:end="53:43"><name pos:start="53:36" pos:end="53:43">arg_type</name></expr></argument>, <argument pos:start="53:46" pos:end="53:46"><expr pos:start="53:46" pos:end="53:46"><literal type="number" pos:start="53:46" pos:end="53:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="59:47"><expr pos:start="55:13" pos:end="59:46"><name pos:start="55:13" pos:end="55:26"><name pos:start="55:13" pos:end="55:14">ie</name><operator pos:start="55:15" pos:end="55:16">-&gt;</operator><name pos:start="55:17" pos:end="55:26">target_cmd</name></name> <operator pos:start="55:28" pos:end="55:28">=</operator> <operator pos:start="55:30" pos:end="55:30">(</operator><name pos:start="55:31" pos:end="55:44"><name pos:start="55:31" pos:end="55:32">ie</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:44">target_cmd</name></name> <operator pos:start="55:46" pos:end="55:46">&amp;</operator>

                              <operator pos:start="57:31" pos:end="57:31">~</operator><operator pos:start="57:32" pos:end="57:32">(</operator><name pos:start="57:33" pos:end="57:51">TARGET_IOC_SIZEMASK</name> <operator pos:start="57:53" pos:end="57:54">&lt;&lt;</operator> <name pos:start="57:56" pos:end="57:75">TARGET_IOC_SIZESHIFT</name><operator pos:start="57:76" pos:end="57:76">)</operator><operator pos:start="57:77" pos:end="57:77">)</operator> <operator pos:start="57:79" pos:end="57:79">|</operator>

                <operator pos:start="59:17" pos:end="59:17">(</operator><name pos:start="59:18" pos:end="59:21">size</name> <operator pos:start="59:23" pos:end="59:24">&lt;&lt;</operator> <name pos:start="59:26" pos:end="59:45">TARGET_IOC_SIZESHIFT</name><operator pos:start="59:46" pos:end="59:46">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="65:9" pos:end="67:43">/* Build target_to_host_errno_table[] table from

         * host_to_target_errno_table[]. */</comment>

        <for pos:start="69:9" pos:end="78:0">for <control pos:start="69:13" pos:end="69:44">(<init pos:start="69:14" pos:end="69:17"><expr pos:start="69:14" pos:end="69:16"><name pos:start="69:14" pos:end="69:14">i</name><operator pos:start="69:15" pos:end="69:15">=</operator><literal type="number" pos:start="69:16" pos:end="69:16">0</literal></expr>;</init> <condition pos:start="69:19" pos:end="69:39"><expr pos:start="69:19" pos:end="69:38"><name pos:start="69:19" pos:end="69:19">i</name> <operator pos:start="69:21" pos:end="69:21">&lt;</operator> <name pos:start="69:23" pos:end="69:38">ERRNO_TABLE_SIZE</name></expr>;</condition> <incr pos:start="69:41" pos:end="69:43"><expr pos:start="69:41" pos:end="69:43"><name pos:start="69:41" pos:end="69:41">i</name><operator pos:start="69:42" pos:end="69:43">++</operator></expr></incr>)</control><block type="pseudo" pos:start="71:17" pos:end="78:0"><block_content pos:start="71:17" pos:end="78:0">

                <expr_stmt pos:start="71:17" pos:end="78:0"><expr pos:start="71:17" pos:end="71:77"><name pos:start="71:17" pos:end="71:73"><name pos:start="71:17" pos:end="71:42">target_to_host_errno_table</name><index pos:start="71:43" pos:end="71:73">[<expr pos:start="71:44" pos:end="71:72"><name pos:start="71:44" pos:end="71:72"><name pos:start="71:44" pos:end="71:69">host_to_target_errno_table</name><index pos:start="71:70" pos:end="71:72">[<expr pos:start="71:71" pos:end="71:71"><name pos:start="71:71" pos:end="71:71">i</name></expr>]</index></name></expr>]</index></name> <operator pos:start="71:75" pos:end="71:75">=</operator> <name pos:start="71:77" pos:end="71:77">i</name></expr>;</expr_stmt></block_content></block></for>



        <comment type="block" pos:start="75:9" pos:end="75:54">/* automatic consistency check if same arch */</comment>

<cpp:if pos:start="77:1" pos:end="77:70">#<cpp:directive pos:start="77:2" pos:end="77:3">if</cpp:directive> <expr pos:start="77:5" pos:end="77:70"><call pos:start="77:5" pos:end="77:21"><name pos:start="77:5" pos:end="77:11">defined</name><argument_list pos:start="77:12" pos:end="77:21">(<argument pos:start="77:13" pos:end="77:20"><expr pos:start="77:13" pos:end="77:20"><name pos:start="77:13" pos:end="77:20">__i386__</name></expr></argument>)</argument_list></call> <operator pos:start="77:23" pos:end="77:24">&amp;&amp;</operator> <call pos:start="77:26" pos:end="77:45"><name pos:start="77:26" pos:end="77:32">defined</name><argument_list pos:start="77:33" pos:end="77:45">(<argument pos:start="77:34" pos:end="77:44"><expr pos:start="77:34" pos:end="77:44"><name pos:start="77:34" pos:end="77:44">TARGET_I386</name></expr></argument>)</argument_list></call> <operator pos:start="77:47" pos:end="77:48">&amp;&amp;</operator> <call pos:start="77:50" pos:end="77:70"><name pos:start="77:50" pos:end="77:56">defined</name><argument_list pos:start="77:57" pos:end="77:70">(<argument pos:start="77:58" pos:end="77:69"><expr pos:start="77:58" pos:end="77:69"><name pos:start="77:58" pos:end="77:69">TARGET_ABI32</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="79:9" pos:end="88:0"><if pos:start="79:9" pos:end="88:0">if <condition pos:start="79:12" pos:end="79:43">(<expr pos:start="79:13" pos:end="79:42"><name pos:start="79:13" pos:end="79:26"><name pos:start="79:13" pos:end="79:14">ie</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:26">target_cmd</name></name> <operator pos:start="79:28" pos:end="79:29">!=</operator> <name pos:start="79:31" pos:end="79:42"><name pos:start="79:31" pos:end="79:32">ie</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:42">host_cmd</name></name></expr>)</condition> <block pos:start="79:45" pos:end="88:0">{<block_content pos:start="81:13" pos:end="83:50">

            <expr_stmt pos:start="81:13" pos:end="83:50"><expr pos:start="81:13" pos:end="83:49"><call pos:start="81:13" pos:end="83:49"><name pos:start="81:13" pos:end="81:19">fprintf</name><argument_list pos:start="81:20" pos:end="83:49">(<argument pos:start="81:21" pos:end="81:26"><expr pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:26">stderr</name></expr></argument>, <argument pos:start="81:29" pos:end="81:67"><expr pos:start="81:29" pos:end="81:67"><literal type="string" pos:start="81:29" pos:end="81:67">"ERROR: ioctl: target=0x%x host=0x%x\n"</literal></expr></argument>,

                    <argument pos:start="83:21" pos:end="83:34"><expr pos:start="83:21" pos:end="83:34"><name pos:start="83:21" pos:end="83:34"><name pos:start="83:21" pos:end="83:22">ie</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:34">target_cmd</name></name></expr></argument>, <argument pos:start="83:37" pos:end="83:48"><expr pos:start="83:37" pos:end="83:48"><name pos:start="83:37" pos:end="83:48"><name pos:start="83:37" pos:end="83:38">ie</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:48">host_cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="87:1" pos:end="87:6">#<cpp:directive pos:start="87:2" pos:end="87:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="89:9" pos:end="89:13"><expr pos:start="89:9" pos:end="89:12"><name pos:start="89:9" pos:end="89:10">ie</name><operator pos:start="89:11" pos:end="89:12">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
