<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12537.c" pos:tabs="8"><function pos:start="1:1" pos:end="291:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">l2cap_command</name><parameter_list pos:start="1:26" pos:end="3:47">(<parameter pos:start="1:27" pos:end="1:56"><decl pos:start="1:27" pos:end="1:56"><type pos:start="1:27" pos:end="1:56"><name pos:start="1:27" pos:end="1:49"><name pos:start="1:27" pos:end="1:32">struct</name> <name pos:start="1:34" pos:end="1:49">l2cap_instance_s</name></name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:56">l2cap</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:66"><decl pos:start="1:59" pos:end="1:66"><type pos:start="1:59" pos:end="1:66"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:66">code</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:74"><decl pos:start="1:69" pos:end="1:74"><type pos:start="1:69" pos:end="1:74"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:74">id</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:37"><decl pos:start="3:17" pos:end="3:37"><type pos:start="3:17" pos:end="3:37"><specifier pos:start="3:17" pos:end="3:21">const</specifier> <name pos:start="3:23" pos:end="3:29">uint8_t</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:37">params</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:46"><decl pos:start="3:40" pos:end="3:46"><type pos:start="3:40" pos:end="3:46"><name pos:start="3:40" pos:end="3:42">int</name></type> <name pos:start="3:44" pos:end="3:46">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="291:1">{<block_content pos:start="7:5" pos:end="289:5">

    <decl_stmt pos:start="7:5" pos:end="26:0"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">err</name></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:5">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:5"><literal type="number" pos:start="11:5" pos:end="11:5">0</literal></expr></cpp:if>

    <comment type="block" pos:start="13:5" pos:end="13:58">/* TODO: do the IDs really have to be in sequence?  */</comment>

    if (!id || (id != l2cap-&gt;last_id &amp;&amp; id != l2cap-&gt;next_id)) {

        fprintf(stderr, "%s: out of sequence command packet ignored.\n",

                        __func__);

        return;

    }

<cpp:else pos:start="25:1" pos:end="25:5">#<cpp:directive pos:start="25:2" pos:end="25:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="27:5" pos:end="30:0"><expr pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:9">l2cap</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:18">next_id</name></name> <operator pos:start="27:20" pos:end="27:20">=</operator> <name pos:start="27:22" pos:end="27:23">id</name></expr>;</expr_stmt>

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="31:5" pos:end="43:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:29">(<expr pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:10">id</name> <operator pos:start="31:12" pos:end="31:13">==</operator> <name pos:start="31:15" pos:end="31:28"><name pos:start="31:15" pos:end="31:19">l2cap</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:28">next_id</name></name></expr>)</condition> <block pos:start="31:31" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:72">

        <expr_stmt pos:start="33:9" pos:end="33:40"><expr pos:start="33:9" pos:end="33:39"><name pos:start="33:9" pos:end="33:22"><name pos:start="33:9" pos:end="33:13">l2cap</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:22">last_id</name></name> <operator pos:start="33:24" pos:end="33:24">=</operator> <name pos:start="33:26" pos:end="33:39"><name pos:start="33:26" pos:end="33:30">l2cap</name><operator pos:start="33:31" pos:end="33:32">-&gt;</operator><name pos:start="33:33" pos:end="33:39">next_id</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:72"><expr pos:start="35:9" pos:end="35:71"><name pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:13">l2cap</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:22">next_id</name></name> <operator pos:start="35:24" pos:end="35:24">=</operator> <ternary pos:start="35:26" pos:end="35:71"><condition pos:start="35:26" pos:end="35:48"><expr pos:start="35:26" pos:end="35:46"><name pos:start="35:26" pos:end="35:39"><name pos:start="35:26" pos:end="35:30">l2cap</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:39">next_id</name></name> <operator pos:start="35:41" pos:end="35:42">==</operator> <literal type="number" pos:start="35:44" pos:end="35:46">255</literal></expr> ?</condition><then pos:start="35:50" pos:end="35:50"> <expr pos:start="35:50" pos:end="35:50"><literal type="number" pos:start="35:50" pos:end="35:50">1</literal></expr> </then><else pos:start="35:52" pos:end="35:71">: <expr pos:start="35:54" pos:end="35:71"><name pos:start="35:54" pos:end="35:67"><name pos:start="35:54" pos:end="35:58">l2cap</name><operator pos:start="35:59" pos:end="35:60">-&gt;</operator><name pos:start="35:61" pos:end="35:67">next_id</name></name> <operator pos:start="35:69" pos:end="35:69">+</operator> <literal type="number" pos:start="35:71" pos:end="35:71">1</literal></expr></else></ternary></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="37:7" pos:end="43:5">else <block pos:start="37:12" pos:end="43:5">{<block_content>

        <comment type="block" pos:start="39:9" pos:end="41:41">/* TODO: Need to re-send the same response, without re-executing

         * the corresponding command!  */</comment>

    </block_content>}</block></else></if_stmt>



    <switch pos:start="47:5" pos:end="289:5">switch <condition pos:start="47:12" pos:end="47:17">(<expr pos:start="47:13" pos:end="47:16"><name pos:start="47:13" pos:end="47:16">code</name></expr>)</condition> <block pos:start="47:19" pos:end="289:5">{<block_content pos:start="49:5" pos:end="287:14">

    <case pos:start="49:5" pos:end="49:27">case <expr pos:start="49:10" pos:end="49:26"><name pos:start="49:10" pos:end="49:26">L2CAP_COMMAND_REJ</name></expr>:</case>

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if <condition pos:start="51:12" pos:end="51:55">(<expr pos:start="51:13" pos:end="51:54"><call pos:start="51:13" pos:end="51:54"><name pos:start="51:13" pos:end="51:20">unlikely</name><argument_list pos:start="51:21" pos:end="51:54">(<argument pos:start="51:22" pos:end="51:53"><expr pos:start="51:22" pos:end="51:53"><name pos:start="51:22" pos:end="51:24">len</name> <operator pos:start="51:26" pos:end="51:27">!=</operator> <literal type="number" pos:start="51:29" pos:end="51:29">2</literal> <operator pos:start="51:31" pos:end="51:32">&amp;&amp;</operator> <name pos:start="51:34" pos:end="51:36">len</name> <operator pos:start="51:38" pos:end="51:39">!=</operator> <literal type="number" pos:start="51:41" pos:end="51:41">4</literal> <operator pos:start="51:43" pos:end="51:44">&amp;&amp;</operator> <name pos:start="51:46" pos:end="51:48">len</name> <operator pos:start="51:50" pos:end="51:51">!=</operator> <literal type="number" pos:start="51:53" pos:end="51:53">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:57" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:24">

            <expr_stmt pos:start="53:13" pos:end="53:47"><expr pos:start="53:13" pos:end="53:46"><name pos:start="53:13" pos:end="53:15">err</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <name pos:start="53:19" pos:end="53:46">L2CAP_REJ_CMD_NOT_UNDERSTOOD</name></expr>;</expr_stmt>

            <goto pos:start="55:13" pos:end="55:24">goto <name pos:start="55:18" pos:end="55:23">reject</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="61:9" pos:end="61:75">/* We never issue commands other than Command Reject currently.  */</comment>

        <expr_stmt pos:start="63:9" pos:end="67:73"><expr pos:start="63:9" pos:end="67:72"><call pos:start="63:9" pos:end="67:72"><name pos:start="63:9" pos:end="63:15">fprintf</name><argument_list pos:start="63:16" pos:end="67:72">(<argument pos:start="63:17" pos:end="63:22"><expr pos:start="63:17" pos:end="63:22"><name pos:start="63:17" pos:end="63:22">stderr</name></expr></argument>, <argument pos:start="63:25" pos:end="65:45"><expr pos:start="63:25" pos:end="65:45"><literal type="string" pos:start="63:25" pos:end="63:64">"%s: stray Command Reject (%02x, %04x) "</literal>

                        <literal type="string" pos:start="65:25" pos:end="65:45">"packet, ignoring.\n"</literal></expr></argument>, <argument pos:start="65:48" pos:end="65:55"><expr pos:start="65:48" pos:end="65:55"><name pos:start="65:48" pos:end="65:55">__func__</name></expr></argument>, <argument pos:start="65:58" pos:end="65:59"><expr pos:start="65:58" pos:end="65:59"><name pos:start="65:58" pos:end="65:59">id</name></expr></argument>,

                        <argument pos:start="67:25" pos:end="67:71"><expr pos:start="67:25" pos:end="67:71"><call pos:start="67:25" pos:end="67:71"><name pos:start="67:25" pos:end="67:35">le16_to_cpu</name><argument_list pos:start="67:36" pos:end="67:71">(<argument pos:start="67:37" pos:end="67:70"><expr pos:start="67:37" pos:end="67:70"><operator pos:start="67:37" pos:end="67:37">(</operator><operator pos:start="67:38" pos:end="67:38">(</operator><name pos:start="67:39" pos:end="67:51">l2cap_cmd_rej</name> <operator pos:start="67:53" pos:end="67:53">*</operator><operator pos:start="67:54" pos:end="67:54">)</operator> <name pos:start="67:56" pos:end="67:61">params</name><operator pos:start="67:62" pos:end="67:62">)</operator><operator pos:start="67:63" pos:end="67:64">-&gt;</operator><name pos:start="67:65" pos:end="67:70">reason</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>



    <case pos:start="73:5" pos:end="73:24">case <expr pos:start="73:10" pos:end="73:23"><name pos:start="73:10" pos:end="73:23">L2CAP_CONN_REQ</name></expr>:</case>

        <if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:49">(<expr pos:start="75:13" pos:end="75:48"><call pos:start="75:13" pos:end="75:48"><name pos:start="75:13" pos:end="75:20">unlikely</name><argument_list pos:start="75:21" pos:end="75:48">(<argument pos:start="75:22" pos:end="75:47"><expr pos:start="75:22" pos:end="75:47"><name pos:start="75:22" pos:end="75:24">len</name> <operator pos:start="75:26" pos:end="75:27">!=</operator> <name pos:start="75:29" pos:end="75:47">L2CAP_CONN_REQ_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:51" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:24">

            <expr_stmt pos:start="77:13" pos:end="77:47"><expr pos:start="77:13" pos:end="77:46"><name pos:start="77:13" pos:end="77:15">err</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:46">L2CAP_REJ_CMD_NOT_UNDERSTOOD</name></expr>;</expr_stmt>

            <goto pos:start="79:13" pos:end="79:24">goto <name pos:start="79:18" pos:end="79:23">reject</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="85:9" pos:end="89:72"><expr pos:start="85:9" pos:end="89:71"><call pos:start="85:9" pos:end="89:71"><name pos:start="85:9" pos:end="85:34">l2cap_channel_open_req_msg</name><argument_list pos:start="85:35" pos:end="89:71">(<argument pos:start="85:36" pos:end="85:40"><expr pos:start="85:36" pos:end="85:40"><name pos:start="85:36" pos:end="85:40">l2cap</name></expr></argument>,

                        <argument pos:start="87:25" pos:end="87:69"><expr pos:start="87:25" pos:end="87:69"><call pos:start="87:25" pos:end="87:69"><name pos:start="87:25" pos:end="87:35">le16_to_cpu</name><argument_list pos:start="87:36" pos:end="87:69">(<argument pos:start="87:37" pos:end="87:68"><expr pos:start="87:37" pos:end="87:68"><operator pos:start="87:37" pos:end="87:37">(</operator><operator pos:start="87:38" pos:end="87:38">(</operator><name pos:start="87:39" pos:end="87:52">l2cap_conn_req</name> <operator pos:start="87:54" pos:end="87:54">*</operator><operator pos:start="87:55" pos:end="87:55">)</operator> <name pos:start="87:57" pos:end="87:62">params</name><operator pos:start="87:63" pos:end="87:63">)</operator><operator pos:start="87:64" pos:end="87:65">-&gt;</operator><name pos:start="87:66" pos:end="87:68">psm</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="89:25" pos:end="89:70"><expr pos:start="89:25" pos:end="89:70"><call pos:start="89:25" pos:end="89:70"><name pos:start="89:25" pos:end="89:35">le16_to_cpu</name><argument_list pos:start="89:36" pos:end="89:70">(<argument pos:start="89:37" pos:end="89:69"><expr pos:start="89:37" pos:end="89:69"><operator pos:start="89:37" pos:end="89:37">(</operator><operator pos:start="89:38" pos:end="89:38">(</operator><name pos:start="89:39" pos:end="89:52">l2cap_conn_req</name> <operator pos:start="89:54" pos:end="89:54">*</operator><operator pos:start="89:55" pos:end="89:55">)</operator> <name pos:start="89:57" pos:end="89:62">params</name><operator pos:start="89:63" pos:end="89:63">)</operator><operator pos:start="89:64" pos:end="89:65">-&gt;</operator><name pos:start="89:66" pos:end="89:69">scid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>



    <case pos:start="95:5" pos:end="95:24">case <expr pos:start="95:10" pos:end="95:23"><name pos:start="95:10" pos:end="95:23">L2CAP_CONN_RSP</name></expr>:</case>

        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:49">(<expr pos:start="97:13" pos:end="97:48"><call pos:start="97:13" pos:end="97:48"><name pos:start="97:13" pos:end="97:20">unlikely</name><argument_list pos:start="97:21" pos:end="97:48">(<argument pos:start="97:22" pos:end="97:47"><expr pos:start="97:22" pos:end="97:47"><name pos:start="97:22" pos:end="97:24">len</name> <operator pos:start="97:26" pos:end="97:27">!=</operator> <name pos:start="97:29" pos:end="97:47">L2CAP_CONN_RSP_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:51" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:24">

            <expr_stmt pos:start="99:13" pos:end="99:47"><expr pos:start="99:13" pos:end="99:46"><name pos:start="99:13" pos:end="99:15">err</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <name pos:start="99:19" pos:end="99:46">L2CAP_REJ_CMD_NOT_UNDERSTOOD</name></expr>;</expr_stmt>

            <goto pos:start="101:13" pos:end="101:24">goto <name pos:start="101:18" pos:end="101:23">reject</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="107:9" pos:end="107:65">/* We never issue Connection Requests currently. TODO  */</comment>

        <expr_stmt pos:start="109:9" pos:end="111:61"><expr pos:start="109:9" pos:end="111:60"><call pos:start="109:9" pos:end="111:60"><name pos:start="109:9" pos:end="109:15">fprintf</name><argument_list pos:start="109:16" pos:end="111:60">(<argument pos:start="109:17" pos:end="109:22"><expr pos:start="109:17" pos:end="109:22"><name pos:start="109:17" pos:end="109:22">stderr</name></expr></argument>, <argument pos:start="109:25" pos:end="111:45"><expr pos:start="109:25" pos:end="111:45"><literal type="string" pos:start="109:25" pos:end="109:68">"%s: unexpected Connection Response (%02x) "</literal>

                        <literal type="string" pos:start="111:25" pos:end="111:45">"packet, ignoring.\n"</literal></expr></argument>, <argument pos:start="111:48" pos:end="111:55"><expr pos:start="111:48" pos:end="111:55"><name pos:start="111:48" pos:end="111:55">__func__</name></expr></argument>, <argument pos:start="111:58" pos:end="111:59"><expr pos:start="111:58" pos:end="111:59"><name pos:start="111:58" pos:end="111:59">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="113:9" pos:end="113:14">break;</break>



    <case pos:start="117:5" pos:end="117:24">case <expr pos:start="117:10" pos:end="117:23"><name pos:start="117:10" pos:end="117:23">L2CAP_CONF_REQ</name></expr>:</case>

        <if_stmt pos:start="119:9" pos:end="125:9"><if pos:start="119:9" pos:end="125:9">if <condition pos:start="119:12" pos:end="119:51">(<expr pos:start="119:13" pos:end="119:50"><call pos:start="119:13" pos:end="119:50"><name pos:start="119:13" pos:end="119:20">unlikely</name><argument_list pos:start="119:21" pos:end="119:50">(<argument pos:start="119:22" pos:end="119:49"><expr pos:start="119:22" pos:end="119:49"><name pos:start="119:22" pos:end="119:24">len</name> <operator pos:start="119:26" pos:end="119:26">&lt;</operator> <call pos:start="119:28" pos:end="119:49"><name pos:start="119:28" pos:end="119:46">L2CAP_CONF_REQ_SIZE</name><argument_list pos:start="119:47" pos:end="119:49">(<argument pos:start="119:48" pos:end="119:48"><expr pos:start="119:48" pos:end="119:48"><literal type="number" pos:start="119:48" pos:end="119:48">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:53" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:24">

            <expr_stmt pos:start="121:13" pos:end="121:47"><expr pos:start="121:13" pos:end="121:46"><name pos:start="121:13" pos:end="121:15">err</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <name pos:start="121:19" pos:end="121:46">L2CAP_REJ_CMD_NOT_UNDERSTOOD</name></expr>;</expr_stmt>

            <goto pos:start="123:13" pos:end="123:24">goto <name pos:start="123:18" pos:end="123:23">reject</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="129:9" pos:end="137:54"><expr pos:start="129:9" pos:end="137:53"><call pos:start="129:9" pos:end="137:53"><name pos:start="129:9" pos:end="129:36">l2cap_channel_config_req_msg</name><argument_list pos:start="129:37" pos:end="137:53">(<argument pos:start="129:38" pos:end="129:42"><expr pos:start="129:38" pos:end="129:42"><name pos:start="129:38" pos:end="129:42">l2cap</name></expr></argument>,

                        <argument pos:start="131:25" pos:end="131:75"><expr pos:start="131:25" pos:end="131:75"><call pos:start="131:25" pos:end="131:71"><name pos:start="131:25" pos:end="131:35">le16_to_cpu</name><argument_list pos:start="131:36" pos:end="131:71">(<argument pos:start="131:37" pos:end="131:70"><expr pos:start="131:37" pos:end="131:70"><operator pos:start="131:37" pos:end="131:37">(</operator><operator pos:start="131:38" pos:end="131:38">(</operator><name pos:start="131:39" pos:end="131:52">l2cap_conf_req</name> <operator pos:start="131:54" pos:end="131:54">*</operator><operator pos:start="131:55" pos:end="131:55">)</operator> <name pos:start="131:57" pos:end="131:62">params</name><operator pos:start="131:63" pos:end="131:63">)</operator><operator pos:start="131:64" pos:end="131:65">-&gt;</operator><name pos:start="131:66" pos:end="131:70">flags</name></expr></argument>)</argument_list></call> <operator pos:start="131:73" pos:end="131:73">&amp;</operator> <literal type="number" pos:start="131:75" pos:end="131:75">1</literal></expr></argument>,

                        <argument pos:start="133:25" pos:end="133:70"><expr pos:start="133:25" pos:end="133:70"><call pos:start="133:25" pos:end="133:70"><name pos:start="133:25" pos:end="133:35">le16_to_cpu</name><argument_list pos:start="133:36" pos:end="133:70">(<argument pos:start="133:37" pos:end="133:69"><expr pos:start="133:37" pos:end="133:69"><operator pos:start="133:37" pos:end="133:37">(</operator><operator pos:start="133:38" pos:end="133:38">(</operator><name pos:start="133:39" pos:end="133:52">l2cap_conf_req</name> <operator pos:start="133:54" pos:end="133:54">*</operator><operator pos:start="133:55" pos:end="133:55">)</operator> <name pos:start="133:57" pos:end="133:62">params</name><operator pos:start="133:63" pos:end="133:63">)</operator><operator pos:start="133:64" pos:end="133:65">-&gt;</operator><name pos:start="133:66" pos:end="133:69">dcid</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="135:25" pos:end="135:57"><expr pos:start="135:25" pos:end="135:57"><operator pos:start="135:25" pos:end="135:25">(</operator><operator pos:start="135:26" pos:end="135:26">(</operator><name pos:start="135:27" pos:end="135:40">l2cap_conf_req</name> <operator pos:start="135:42" pos:end="135:42">*</operator><operator pos:start="135:43" pos:end="135:43">)</operator> <name pos:start="135:45" pos:end="135:50">params</name><operator pos:start="135:51" pos:end="135:51">)</operator><operator pos:start="135:52" pos:end="135:53">-&gt;</operator><name pos:start="135:54" pos:end="135:57">data</name></expr></argument>,

                        <argument pos:start="137:25" pos:end="137:52"><expr pos:start="137:25" pos:end="137:52"><name pos:start="137:25" pos:end="137:27">len</name> <operator pos:start="137:29" pos:end="137:29">-</operator> <call pos:start="137:31" pos:end="137:52"><name pos:start="137:31" pos:end="137:49">L2CAP_CONF_REQ_SIZE</name><argument_list pos:start="137:50" pos:end="137:52">(<argument pos:start="137:51" pos:end="137:51"><expr pos:start="137:51" pos:end="137:51"><literal type="number" pos:start="137:51" pos:end="137:51">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="139:9" pos:end="139:14">break;</break>



    <case pos:start="143:5" pos:end="143:24">case <expr pos:start="143:10" pos:end="143:23"><name pos:start="143:10" pos:end="143:23">L2CAP_CONF_RSP</name></expr>:</case>

        <if_stmt pos:start="145:9" pos:end="151:9"><if pos:start="145:9" pos:end="151:9">if <condition pos:start="145:12" pos:end="145:51">(<expr pos:start="145:13" pos:end="145:50"><call pos:start="145:13" pos:end="145:50"><name pos:start="145:13" pos:end="145:20">unlikely</name><argument_list pos:start="145:21" pos:end="145:50">(<argument pos:start="145:22" pos:end="145:49"><expr pos:start="145:22" pos:end="145:49"><name pos:start="145:22" pos:end="145:24">len</name> <operator pos:start="145:26" pos:end="145:26">&lt;</operator> <call pos:start="145:28" pos:end="145:49"><name pos:start="145:28" pos:end="145:46">L2CAP_CONF_RSP_SIZE</name><argument_list pos:start="145:47" pos:end="145:49">(<argument pos:start="145:48" pos:end="145:48"><expr pos:start="145:48" pos:end="145:48"><literal type="number" pos:start="145:48" pos:end="145:48">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="145:53" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:24">

            <expr_stmt pos:start="147:13" pos:end="147:47"><expr pos:start="147:13" pos:end="147:46"><name pos:start="147:13" pos:end="147:15">err</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <name pos:start="147:19" pos:end="147:46">L2CAP_REJ_CMD_NOT_UNDERSTOOD</name></expr>;</expr_stmt>

            <goto pos:start="149:13" pos:end="149:24">goto <name pos:start="149:18" pos:end="149:23">reject</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="155:9" pos:end="169:65"><if pos:start="155:9" pos:end="169:65">if <condition pos:start="155:12" pos:end="165:54">(<expr pos:start="155:13" pos:end="165:53"><call pos:start="155:13" pos:end="165:53"><name pos:start="155:13" pos:end="155:40">l2cap_channel_config_rsp_msg</name><argument_list pos:start="155:41" pos:end="165:53">(<argument pos:start="155:42" pos:end="155:46"><expr pos:start="155:42" pos:end="155:46"><name pos:start="155:42" pos:end="155:46">l2cap</name></expr></argument>,

                        <argument pos:start="157:25" pos:end="157:72"><expr pos:start="157:25" pos:end="157:72"><call pos:start="157:25" pos:end="157:72"><name pos:start="157:25" pos:end="157:35">le16_to_cpu</name><argument_list pos:start="157:36" pos:end="157:72">(<argument pos:start="157:37" pos:end="157:71"><expr pos:start="157:37" pos:end="157:71"><operator pos:start="157:37" pos:end="157:37">(</operator><operator pos:start="157:38" pos:end="157:38">(</operator><name pos:start="157:39" pos:end="157:52">l2cap_conf_rsp</name> <operator pos:start="157:54" pos:end="157:54">*</operator><operator pos:start="157:55" pos:end="157:55">)</operator> <name pos:start="157:57" pos:end="157:62">params</name><operator pos:start="157:63" pos:end="157:63">)</operator><operator pos:start="157:64" pos:end="157:65">-&gt;</operator><name pos:start="157:66" pos:end="157:71">result</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="159:25" pos:end="159:75"><expr pos:start="159:25" pos:end="159:75"><call pos:start="159:25" pos:end="159:71"><name pos:start="159:25" pos:end="159:35">le16_to_cpu</name><argument_list pos:start="159:36" pos:end="159:71">(<argument pos:start="159:37" pos:end="159:70"><expr pos:start="159:37" pos:end="159:70"><operator pos:start="159:37" pos:end="159:37">(</operator><operator pos:start="159:38" pos:end="159:38">(</operator><name pos:start="159:39" pos:end="159:52">l2cap_conf_rsp</name> <operator pos:start="159:54" pos:end="159:54">*</operator><operator pos:start="159:55" pos:end="159:55">)</operator> <name pos:start="159:57" pos:end="159:62">params</name><operator pos:start="159:63" pos:end="159:63">)</operator><operator pos:start="159:64" pos:end="159:65">-&gt;</operator><name pos:start="159:66" pos:end="159:70">flags</name></expr></argument>)</argument_list></call> <operator pos:start="159:73" pos:end="159:73">&amp;</operator> <literal type="number" pos:start="159:75" pos:end="159:75">1</literal></expr></argument>,

                        <argument pos:start="161:25" pos:end="161:70"><expr pos:start="161:25" pos:end="161:70"><call pos:start="161:25" pos:end="161:70"><name pos:start="161:25" pos:end="161:35">le16_to_cpu</name><argument_list pos:start="161:36" pos:end="161:70">(<argument pos:start="161:37" pos:end="161:69"><expr pos:start="161:37" pos:end="161:69"><operator pos:start="161:37" pos:end="161:37">(</operator><operator pos:start="161:38" pos:end="161:38">(</operator><name pos:start="161:39" pos:end="161:52">l2cap_conf_rsp</name> <operator pos:start="161:54" pos:end="161:54">*</operator><operator pos:start="161:55" pos:end="161:55">)</operator> <name pos:start="161:57" pos:end="161:62">params</name><operator pos:start="161:63" pos:end="161:63">)</operator><operator pos:start="161:64" pos:end="161:65">-&gt;</operator><name pos:start="161:66" pos:end="161:69">scid</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="163:25" pos:end="163:57"><expr pos:start="163:25" pos:end="163:57"><operator pos:start="163:25" pos:end="163:25">(</operator><operator pos:start="163:26" pos:end="163:26">(</operator><name pos:start="163:27" pos:end="163:40">l2cap_conf_rsp</name> <operator pos:start="163:42" pos:end="163:42">*</operator><operator pos:start="163:43" pos:end="163:43">)</operator> <name pos:start="163:45" pos:end="163:50">params</name><operator pos:start="163:51" pos:end="163:51">)</operator><operator pos:start="163:52" pos:end="163:53">-&gt;</operator><name pos:start="163:54" pos:end="163:57">data</name></expr></argument>,

                        <argument pos:start="165:25" pos:end="165:52"><expr pos:start="165:25" pos:end="165:52"><name pos:start="165:25" pos:end="165:27">len</name> <operator pos:start="165:29" pos:end="165:29">-</operator> <call pos:start="165:31" pos:end="165:52"><name pos:start="165:31" pos:end="165:49">L2CAP_CONF_RSP_SIZE</name><argument_list pos:start="165:50" pos:end="165:52">(<argument pos:start="165:51" pos:end="165:51"><expr pos:start="165:51" pos:end="165:51"><literal type="number" pos:start="165:51" pos:end="165:51">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="167:13" pos:end="169:65"><block_content pos:start="167:13" pos:end="169:65">

            <expr_stmt pos:start="167:13" pos:end="169:65"><expr pos:start="167:13" pos:end="169:64"><call pos:start="167:13" pos:end="169:64"><name pos:start="167:13" pos:end="167:19">fprintf</name><argument_list pos:start="167:20" pos:end="169:64">(<argument pos:start="167:21" pos:end="167:26"><expr pos:start="167:21" pos:end="167:26"><name pos:start="167:21" pos:end="167:26">stderr</name></expr></argument>, <argument pos:start="167:29" pos:end="169:49"><expr pos:start="167:29" pos:end="169:49"><literal type="string" pos:start="167:29" pos:end="167:71">"%s: unexpected Configure Response (%02x) "</literal>

                            <literal type="string" pos:start="169:29" pos:end="169:49">"packet, ignoring.\n"</literal></expr></argument>, <argument pos:start="169:52" pos:end="169:59"><expr pos:start="169:52" pos:end="169:59"><name pos:start="169:52" pos:end="169:59">__func__</name></expr></argument>, <argument pos:start="169:62" pos:end="169:63"><expr pos:start="169:62" pos:end="169:63"><name pos:start="169:62" pos:end="169:63">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="171:9" pos:end="171:14">break;</break>



    <case pos:start="175:5" pos:end="175:27">case <expr pos:start="175:10" pos:end="175:26"><name pos:start="175:10" pos:end="175:26">L2CAP_DISCONN_REQ</name></expr>:</case>

        <if_stmt pos:start="177:9" pos:end="183:9"><if pos:start="177:9" pos:end="183:9">if <condition pos:start="177:12" pos:end="177:52">(<expr pos:start="177:13" pos:end="177:51"><call pos:start="177:13" pos:end="177:51"><name pos:start="177:13" pos:end="177:20">unlikely</name><argument_list pos:start="177:21" pos:end="177:51">(<argument pos:start="177:22" pos:end="177:50"><expr pos:start="177:22" pos:end="177:50"><name pos:start="177:22" pos:end="177:24">len</name> <operator pos:start="177:26" pos:end="177:27">!=</operator> <name pos:start="177:29" pos:end="177:50">L2CAP_DISCONN_REQ_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="177:54" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:24">

            <expr_stmt pos:start="179:13" pos:end="179:47"><expr pos:start="179:13" pos:end="179:46"><name pos:start="179:13" pos:end="179:15">err</name> <operator pos:start="179:17" pos:end="179:17">=</operator> <name pos:start="179:19" pos:end="179:46">L2CAP_REJ_CMD_NOT_UNDERSTOOD</name></expr>;</expr_stmt>

            <goto pos:start="181:13" pos:end="181:24">goto <name pos:start="181:18" pos:end="181:23">reject</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="187:9" pos:end="191:75"><expr pos:start="187:9" pos:end="191:74"><call pos:start="187:9" pos:end="191:74"><name pos:start="187:9" pos:end="187:27">l2cap_channel_close</name><argument_list pos:start="187:28" pos:end="191:74">(<argument pos:start="187:29" pos:end="187:33"><expr pos:start="187:29" pos:end="187:33"><name pos:start="187:29" pos:end="187:33">l2cap</name></expr></argument>,

                        <argument pos:start="189:25" pos:end="189:73"><expr pos:start="189:25" pos:end="189:73"><call pos:start="189:25" pos:end="189:73"><name pos:start="189:25" pos:end="189:35">le16_to_cpu</name><argument_list pos:start="189:36" pos:end="189:73">(<argument pos:start="189:37" pos:end="189:72"><expr pos:start="189:37" pos:end="189:72"><operator pos:start="189:37" pos:end="189:37">(</operator><operator pos:start="189:38" pos:end="189:38">(</operator><name pos:start="189:39" pos:end="189:55">l2cap_disconn_req</name> <operator pos:start="189:57" pos:end="189:57">*</operator><operator pos:start="189:58" pos:end="189:58">)</operator> <name pos:start="189:60" pos:end="189:65">params</name><operator pos:start="189:66" pos:end="189:66">)</operator><operator pos:start="189:67" pos:end="189:68">-&gt;</operator><name pos:start="189:69" pos:end="189:72">dcid</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="191:25" pos:end="191:73"><expr pos:start="191:25" pos:end="191:73"><call pos:start="191:25" pos:end="191:73"><name pos:start="191:25" pos:end="191:35">le16_to_cpu</name><argument_list pos:start="191:36" pos:end="191:73">(<argument pos:start="191:37" pos:end="191:72"><expr pos:start="191:37" pos:end="191:72"><operator pos:start="191:37" pos:end="191:37">(</operator><operator pos:start="191:38" pos:end="191:38">(</operator><name pos:start="191:39" pos:end="191:55">l2cap_disconn_req</name> <operator pos:start="191:57" pos:end="191:57">*</operator><operator pos:start="191:58" pos:end="191:58">)</operator> <name pos:start="191:60" pos:end="191:65">params</name><operator pos:start="191:66" pos:end="191:66">)</operator><operator pos:start="191:67" pos:end="191:68">-&gt;</operator><name pos:start="191:69" pos:end="191:72">scid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="193:9" pos:end="193:14">break;</break>



    <case pos:start="197:5" pos:end="197:27">case <expr pos:start="197:10" pos:end="197:26"><name pos:start="197:10" pos:end="197:26">L2CAP_DISCONN_RSP</name></expr>:</case>

        <if_stmt pos:start="199:9" pos:end="205:9"><if pos:start="199:9" pos:end="205:9">if <condition pos:start="199:12" pos:end="199:52">(<expr pos:start="199:13" pos:end="199:51"><call pos:start="199:13" pos:end="199:51"><name pos:start="199:13" pos:end="199:20">unlikely</name><argument_list pos:start="199:21" pos:end="199:51">(<argument pos:start="199:22" pos:end="199:50"><expr pos:start="199:22" pos:end="199:50"><name pos:start="199:22" pos:end="199:24">len</name> <operator pos:start="199:26" pos:end="199:27">!=</operator> <name pos:start="199:29" pos:end="199:50">L2CAP_DISCONN_RSP_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:54" pos:end="205:9">{<block_content pos:start="201:13" pos:end="203:24">

            <expr_stmt pos:start="201:13" pos:end="201:47"><expr pos:start="201:13" pos:end="201:46"><name pos:start="201:13" pos:end="201:15">err</name> <operator pos:start="201:17" pos:end="201:17">=</operator> <name pos:start="201:19" pos:end="201:46">L2CAP_REJ_CMD_NOT_UNDERSTOOD</name></expr>;</expr_stmt>

            <goto pos:start="203:13" pos:end="203:24">goto <name pos:start="203:18" pos:end="203:23">reject</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="209:9" pos:end="209:68">/* We never issue Disconnection Requests currently. TODO  */</comment>

        <expr_stmt pos:start="211:9" pos:end="213:61"><expr pos:start="211:9" pos:end="213:60"><call pos:start="211:9" pos:end="213:60"><name pos:start="211:9" pos:end="211:15">fprintf</name><argument_list pos:start="211:16" pos:end="213:60">(<argument pos:start="211:17" pos:end="211:22"><expr pos:start="211:17" pos:end="211:22"><name pos:start="211:17" pos:end="211:22">stderr</name></expr></argument>, <argument pos:start="211:25" pos:end="213:45"><expr pos:start="211:25" pos:end="213:45"><literal type="string" pos:start="211:25" pos:end="211:71">"%s: unexpected Disconnection Response (%02x) "</literal>

                        <literal type="string" pos:start="213:25" pos:end="213:45">"packet, ignoring.\n"</literal></expr></argument>, <argument pos:start="213:48" pos:end="213:55"><expr pos:start="213:48" pos:end="213:55"><name pos:start="213:48" pos:end="213:55">__func__</name></expr></argument>, <argument pos:start="213:58" pos:end="213:59"><expr pos:start="213:58" pos:end="213:59"><name pos:start="213:58" pos:end="213:59">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="215:9" pos:end="215:14">break;</break>



    <case pos:start="219:5" pos:end="219:24">case <expr pos:start="219:10" pos:end="219:23"><name pos:start="219:10" pos:end="219:23">L2CAP_ECHO_REQ</name></expr>:</case>

        <expr_stmt pos:start="221:9" pos:end="221:48"><expr pos:start="221:9" pos:end="221:47"><call pos:start="221:9" pos:end="221:47"><name pos:start="221:9" pos:end="221:27">l2cap_echo_response</name><argument_list pos:start="221:28" pos:end="221:47">(<argument pos:start="221:29" pos:end="221:33"><expr pos:start="221:29" pos:end="221:33"><name pos:start="221:29" pos:end="221:33">l2cap</name></expr></argument>, <argument pos:start="221:36" pos:end="221:41"><expr pos:start="221:36" pos:end="221:41"><name pos:start="221:36" pos:end="221:41">params</name></expr></argument>, <argument pos:start="221:44" pos:end="221:46"><expr pos:start="221:44" pos:end="221:46"><name pos:start="221:44" pos:end="221:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="223:9" pos:end="223:14">break;</break>



    <case pos:start="227:5" pos:end="227:24">case <expr pos:start="227:10" pos:end="227:23"><name pos:start="227:10" pos:end="227:23">L2CAP_ECHO_RSP</name></expr>:</case>

        <comment type="block" pos:start="229:9" pos:end="229:59">/* We never issue Echo Requests currently. TODO  */</comment>

        <expr_stmt pos:start="231:9" pos:end="233:61"><expr pos:start="231:9" pos:end="233:60"><call pos:start="231:9" pos:end="233:60"><name pos:start="231:9" pos:end="231:15">fprintf</name><argument_list pos:start="231:16" pos:end="233:60">(<argument pos:start="231:17" pos:end="231:22"><expr pos:start="231:17" pos:end="231:22"><name pos:start="231:17" pos:end="231:22">stderr</name></expr></argument>, <argument pos:start="231:25" pos:end="233:45"><expr pos:start="231:25" pos:end="233:45"><literal type="string" pos:start="231:25" pos:end="231:62">"%s: unexpected Echo Response (%02x) "</literal>

                        <literal type="string" pos:start="233:25" pos:end="233:45">"packet, ignoring.\n"</literal></expr></argument>, <argument pos:start="233:48" pos:end="233:55"><expr pos:start="233:48" pos:end="233:55"><name pos:start="233:48" pos:end="233:55">__func__</name></expr></argument>, <argument pos:start="233:58" pos:end="233:59"><expr pos:start="233:58" pos:end="233:59"><name pos:start="233:58" pos:end="233:59">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="235:9" pos:end="235:14">break;</break>



    <case pos:start="239:5" pos:end="239:24">case <expr pos:start="239:10" pos:end="239:23"><name pos:start="239:10" pos:end="239:23">L2CAP_INFO_REQ</name></expr>:</case>

        <if_stmt pos:start="241:9" pos:end="247:9"><if pos:start="241:9" pos:end="247:9">if <condition pos:start="241:12" pos:end="241:49">(<expr pos:start="241:13" pos:end="241:48"><call pos:start="241:13" pos:end="241:48"><name pos:start="241:13" pos:end="241:20">unlikely</name><argument_list pos:start="241:21" pos:end="241:48">(<argument pos:start="241:22" pos:end="241:47"><expr pos:start="241:22" pos:end="241:47"><name pos:start="241:22" pos:end="241:24">len</name> <operator pos:start="241:26" pos:end="241:27">!=</operator> <name pos:start="241:29" pos:end="241:47">L2CAP_INFO_REQ_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="241:51" pos:end="247:9">{<block_content pos:start="243:13" pos:end="245:24">

            <expr_stmt pos:start="243:13" pos:end="243:47"><expr pos:start="243:13" pos:end="243:46"><name pos:start="243:13" pos:end="243:15">err</name> <operator pos:start="243:17" pos:end="243:17">=</operator> <name pos:start="243:19" pos:end="243:46">L2CAP_REJ_CMD_NOT_UNDERSTOOD</name></expr>;</expr_stmt>

            <goto pos:start="245:13" pos:end="245:24">goto <name pos:start="245:18" pos:end="245:23">reject</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="251:9" pos:end="251:74"><expr pos:start="251:9" pos:end="251:73"><call pos:start="251:9" pos:end="251:73"><name pos:start="251:9" pos:end="251:18">l2cap_info</name><argument_list pos:start="251:19" pos:end="251:73">(<argument pos:start="251:20" pos:end="251:24"><expr pos:start="251:20" pos:end="251:24"><name pos:start="251:20" pos:end="251:24">l2cap</name></expr></argument>, <argument pos:start="251:27" pos:end="251:72"><expr pos:start="251:27" pos:end="251:72"><call pos:start="251:27" pos:end="251:72"><name pos:start="251:27" pos:end="251:37">le16_to_cpu</name><argument_list pos:start="251:38" pos:end="251:72">(<argument pos:start="251:39" pos:end="251:71"><expr pos:start="251:39" pos:end="251:71"><operator pos:start="251:39" pos:end="251:39">(</operator><operator pos:start="251:40" pos:end="251:40">(</operator><name pos:start="251:41" pos:end="251:54">l2cap_info_req</name> <operator pos:start="251:56" pos:end="251:56">*</operator><operator pos:start="251:57" pos:end="251:57">)</operator> <name pos:start="251:59" pos:end="251:64">params</name><operator pos:start="251:65" pos:end="251:65">)</operator><operator pos:start="251:66" pos:end="251:67">-&gt;</operator><name pos:start="251:68" pos:end="251:71">type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="253:9" pos:end="253:14">break;</break>



    <case pos:start="257:5" pos:end="257:24">case <expr pos:start="257:10" pos:end="257:23"><name pos:start="257:10" pos:end="257:23">L2CAP_INFO_RSP</name></expr>:</case>

        <if_stmt pos:start="259:9" pos:end="265:9"><if pos:start="259:9" pos:end="265:9">if <condition pos:start="259:12" pos:end="259:49">(<expr pos:start="259:13" pos:end="259:48"><call pos:start="259:13" pos:end="259:48"><name pos:start="259:13" pos:end="259:20">unlikely</name><argument_list pos:start="259:21" pos:end="259:48">(<argument pos:start="259:22" pos:end="259:47"><expr pos:start="259:22" pos:end="259:47"><name pos:start="259:22" pos:end="259:24">len</name> <operator pos:start="259:26" pos:end="259:27">!=</operator> <name pos:start="259:29" pos:end="259:47">L2CAP_INFO_RSP_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="259:51" pos:end="265:9">{<block_content pos:start="261:13" pos:end="263:24">

            <expr_stmt pos:start="261:13" pos:end="261:47"><expr pos:start="261:13" pos:end="261:46"><name pos:start="261:13" pos:end="261:15">err</name> <operator pos:start="261:17" pos:end="261:17">=</operator> <name pos:start="261:19" pos:end="261:46">L2CAP_REJ_CMD_NOT_UNDERSTOOD</name></expr>;</expr_stmt>

            <goto pos:start="263:13" pos:end="263:24">goto <name pos:start="263:18" pos:end="263:23">reject</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="269:9" pos:end="269:66">/* We never issue Information Requests currently. TODO  */</comment>

        <expr_stmt pos:start="271:9" pos:end="273:61"><expr pos:start="271:9" pos:end="273:60"><call pos:start="271:9" pos:end="273:60"><name pos:start="271:9" pos:end="271:15">fprintf</name><argument_list pos:start="271:16" pos:end="273:60">(<argument pos:start="271:17" pos:end="271:22"><expr pos:start="271:17" pos:end="271:22"><name pos:start="271:17" pos:end="271:22">stderr</name></expr></argument>, <argument pos:start="271:25" pos:end="273:45"><expr pos:start="271:25" pos:end="273:45"><literal type="string" pos:start="271:25" pos:end="271:69">"%s: unexpected Information Response (%02x) "</literal>

                        <literal type="string" pos:start="273:25" pos:end="273:45">"packet, ignoring.\n"</literal></expr></argument>, <argument pos:start="273:48" pos:end="273:55"><expr pos:start="273:48" pos:end="273:55"><name pos:start="273:48" pos:end="273:55">__func__</name></expr></argument>, <argument pos:start="273:58" pos:end="273:59"><expr pos:start="273:58" pos:end="273:59"><name pos:start="273:58" pos:end="273:59">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="275:9" pos:end="275:14">break;</break>



    <default pos:start="279:5" pos:end="279:12">default:</default>

        <expr_stmt pos:start="281:9" pos:end="281:43"><expr pos:start="281:9" pos:end="281:42"><name pos:start="281:9" pos:end="281:11">err</name> <operator pos:start="281:13" pos:end="281:13">=</operator> <name pos:start="281:15" pos:end="281:42">L2CAP_REJ_CMD_NOT_UNDERSTOOD</name></expr>;</expr_stmt>

    <label pos:start="283:5" pos:end="283:11"><name pos:start="283:5" pos:end="283:10">reject</name>:</label>

        <expr_stmt pos:start="285:9" pos:end="285:51"><expr pos:start="285:9" pos:end="285:50"><call pos:start="285:9" pos:end="285:50"><name pos:start="285:9" pos:end="285:28">l2cap_command_reject</name><argument_list pos:start="285:29" pos:end="285:50">(<argument pos:start="285:30" pos:end="285:34"><expr pos:start="285:30" pos:end="285:34"><name pos:start="285:30" pos:end="285:34">l2cap</name></expr></argument>, <argument pos:start="285:37" pos:end="285:38"><expr pos:start="285:37" pos:end="285:38"><name pos:start="285:37" pos:end="285:38">id</name></expr></argument>, <argument pos:start="285:41" pos:end="285:43"><expr pos:start="285:41" pos:end="285:43"><name pos:start="285:41" pos:end="285:43">err</name></expr></argument>, <argument pos:start="285:46" pos:end="285:46"><expr pos:start="285:46" pos:end="285:46"><literal type="number" pos:start="285:46" pos:end="285:46">0</literal></expr></argument>, <argument pos:start="285:49" pos:end="285:49"><expr pos:start="285:49" pos:end="285:49"><literal type="number" pos:start="285:49" pos:end="285:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="287:9" pos:end="287:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
