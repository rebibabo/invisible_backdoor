<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4215.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">init_blk_migration_it</name><parameter_list pos:start="1:34" pos:end="1:69">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">opaque</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:68"><decl pos:start="1:49" pos:end="1:68"><type pos:start="1:49" pos:end="1:68"><name pos:start="1:49" pos:end="1:64">BlockDriverState</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:5">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">Monitor</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">mon</name> <init pos:start="5:18" pos:end="5:25">= <expr pos:start="5:20" pos:end="5:25"><name pos:start="5:20" pos:end="5:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BlkMigDevState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:24">bmds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:19">sectors</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="69:5"><if pos:start="13:5" pos:end="69:5">if <condition pos:start="13:8" pos:end="13:31">(<expr pos:start="13:9" pos:end="13:30"><operator pos:start="13:9" pos:end="13:9">!</operator><call pos:start="13:10" pos:end="13:30"><name pos:start="13:10" pos:end="13:26">bdrv_is_read_only</name><argument_list pos:start="13:27" pos:end="13:30">(<argument pos:start="13:28" pos:end="13:29"><expr pos:start="13:28" pos:end="13:29"><name pos:start="13:28" pos:end="13:29">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:33" pos:end="69:5">{<block_content pos:start="15:9" pos:end="67:70">

        <expr_stmt pos:start="15:9" pos:end="15:57"><expr pos:start="15:9" pos:end="15:56"><name pos:start="15:9" pos:end="15:15">sectors</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <call pos:start="15:19" pos:end="15:36"><name pos:start="15:19" pos:end="15:32">bdrv_getlength</name><argument_list pos:start="15:33" pos:end="15:36">(<argument pos:start="15:34" pos:end="15:35"><expr pos:start="15:34" pos:end="15:35"><name pos:start="15:34" pos:end="15:35">bs</name></expr></argument>)</argument_list></call> <operator pos:start="15:38" pos:end="15:39">&gt;&gt;</operator> <name pos:start="15:41" pos:end="15:56">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

        <if_stmt pos:start="17:9" pos:end="21:9"><if pos:start="17:9" pos:end="21:9">if <condition pos:start="17:12" pos:end="17:25">(<expr pos:start="17:13" pos:end="17:24"><name pos:start="17:13" pos:end="17:19">sectors</name> <operator pos:start="17:21" pos:end="17:22">&lt;=</operator> <literal type="number" pos:start="17:24" pos:end="17:24">0</literal></expr>)</condition> <block pos:start="17:27" pos:end="21:9">{<block_content pos:start="19:13" pos:end="19:19">

            <return pos:start="19:13" pos:end="19:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:49"><expr pos:start="25:9" pos:end="25:48"><name pos:start="25:9" pos:end="25:12">bmds</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:48"><name pos:start="25:16" pos:end="25:24">g_malloc0</name><argument_list pos:start="25:25" pos:end="25:48">(<argument pos:start="25:26" pos:end="25:47"><expr pos:start="25:26" pos:end="25:47"><sizeof pos:start="25:26" pos:end="25:47">sizeof<argument_list pos:start="25:32" pos:end="25:47">(<argument pos:start="25:33" pos:end="25:46"><expr pos:start="25:33" pos:end="25:46"><name pos:start="25:33" pos:end="25:46">BlkMigDevState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:22"><expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:12">bmds</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:16">bs</name></name> <operator pos:start="27:18" pos:end="27:18">=</operator> <name pos:start="27:20" pos:end="27:21">bs</name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:33"><expr pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:12">bmds</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:28">bulk_completed</name></name> <operator pos:start="29:30" pos:end="29:30">=</operator> <literal type="number" pos:start="29:32" pos:end="29:32">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:38"><expr pos:start="31:9" pos:end="31:37"><name pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:12">bmds</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:27">total_sectors</name></name> <operator pos:start="31:29" pos:end="31:29">=</operator> <name pos:start="31:31" pos:end="31:37">sectors</name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:36"><expr pos:start="33:9" pos:end="33:35"><name pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:12">bmds</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:31">completed_sectors</name></name> <operator pos:start="33:33" pos:end="33:33">=</operator> <literal type="number" pos:start="33:35" pos:end="33:35">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:56"><expr pos:start="35:9" pos:end="35:55"><name pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:12">bmds</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:25">shared_base</name></name> <operator pos:start="35:27" pos:end="35:27">=</operator> <name pos:start="35:29" pos:end="35:55"><name pos:start="35:29" pos:end="35:43">block_mig_state</name><operator pos:start="35:44" pos:end="35:44">.</operator><name pos:start="35:45" pos:end="35:55">shared_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:31"><expr pos:start="37:9" pos:end="37:30"><call pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:24">alloc_aio_bitmap</name><argument_list pos:start="37:25" pos:end="37:30">(<argument pos:start="37:26" pos:end="37:29"><expr pos:start="37:26" pos:end="37:29"><name pos:start="37:26" pos:end="37:29">bmds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:49"><expr pos:start="39:9" pos:end="39:48"><call pos:start="39:9" pos:end="39:48"><name pos:start="39:9" pos:end="39:21">drive_get_ref</name><argument_list pos:start="39:22" pos:end="39:48">(<argument pos:start="39:23" pos:end="39:47"><expr pos:start="39:23" pos:end="39:47"><call pos:start="39:23" pos:end="39:47"><name pos:start="39:23" pos:end="39:43">drive_get_by_blockdev</name><argument_list pos:start="39:44" pos:end="39:47">(<argument pos:start="39:45" pos:end="39:46"><expr pos:start="39:45" pos:end="39:46"><name pos:start="39:45" pos:end="39:46">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:31"><expr pos:start="41:9" pos:end="41:30"><call pos:start="41:9" pos:end="41:30"><name pos:start="41:9" pos:end="41:23">bdrv_set_in_use</name><argument_list pos:start="41:24" pos:end="41:30">(<argument pos:start="41:25" pos:end="41:26"><expr pos:start="41:25" pos:end="41:26"><name pos:start="41:25" pos:end="41:26">bs</name></expr></argument>, <argument pos:start="41:29" pos:end="41:29"><expr pos:start="41:29" pos:end="41:29"><literal type="number" pos:start="41:29" pos:end="41:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:52"><expr pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:40"><name pos:start="45:9" pos:end="45:23">block_mig_state</name><operator pos:start="45:24" pos:end="45:24">.</operator><name pos:start="45:25" pos:end="45:40">total_sector_sum</name></name> <operator pos:start="45:42" pos:end="45:43">+=</operator> <name pos:start="45:45" pos:end="45:51">sectors</name></expr>;</expr_stmt>



        <if_stmt pos:start="49:9" pos:end="63:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:30">(<expr pos:start="49:13" pos:end="49:29"><name pos:start="49:13" pos:end="49:29"><name pos:start="49:13" pos:end="49:16">bmds</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:29">shared_base</name></name></expr>)</condition> <block pos:start="49:32" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:44">

            <expr_stmt pos:start="51:13" pos:end="55:44"><expr pos:start="51:13" pos:end="55:43"><call pos:start="51:13" pos:end="55:43"><name pos:start="51:13" pos:end="51:26">monitor_printf</name><argument_list pos:start="51:27" pos:end="55:43">(<argument pos:start="51:28" pos:end="51:30"><expr pos:start="51:28" pos:end="51:30"><name pos:start="51:28" pos:end="51:30">mon</name></expr></argument>, <argument pos:start="51:33" pos:end="53:41"><expr pos:start="51:33" pos:end="53:41"><literal type="string" pos:start="51:33" pos:end="51:74">"Start migration for %s with shared base "</literal>

                                <literal type="string" pos:start="53:33" pos:end="53:41">"image\n"</literal></expr></argument>,

                           <argument pos:start="55:28" pos:end="55:42"><expr pos:start="55:28" pos:end="55:42"><name pos:start="55:28" pos:end="55:42"><name pos:start="55:28" pos:end="55:29">bs</name><operator pos:start="55:30" pos:end="55:31">-&gt;</operator><name pos:start="55:32" pos:end="55:42">device_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="57:11" pos:end="63:9">else <block pos:start="57:16" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:44">

            <expr_stmt pos:start="59:13" pos:end="61:44"><expr pos:start="59:13" pos:end="61:43"><call pos:start="59:13" pos:end="61:43"><name pos:start="59:13" pos:end="59:26">monitor_printf</name><argument_list pos:start="59:27" pos:end="61:43">(<argument pos:start="59:28" pos:end="59:30"><expr pos:start="59:28" pos:end="59:30"><name pos:start="59:28" pos:end="59:30">mon</name></expr></argument>, <argument pos:start="59:33" pos:end="59:63"><expr pos:start="59:33" pos:end="59:63"><literal type="string" pos:start="59:33" pos:end="59:63">"Start full migration for %s\n"</literal></expr></argument>,

                           <argument pos:start="61:28" pos:end="61:42"><expr pos:start="61:28" pos:end="61:42"><name pos:start="61:28" pos:end="61:42"><name pos:start="61:28" pos:end="61:29">bs</name><operator pos:start="61:30" pos:end="61:31">-&gt;</operator><name pos:start="61:32" pos:end="61:42">device_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="67:9" pos:end="67:70"><expr pos:start="67:9" pos:end="67:69"><call pos:start="67:9" pos:end="67:69"><name pos:start="67:9" pos:end="67:28">QSIMPLEQ_INSERT_TAIL</name><argument_list pos:start="67:29" pos:end="67:69">(<argument pos:start="67:30" pos:end="67:55"><expr pos:start="67:30" pos:end="67:55"><operator pos:start="67:30" pos:end="67:30">&amp;</operator><name pos:start="67:31" pos:end="67:55"><name pos:start="67:31" pos:end="67:45">block_mig_state</name><operator pos:start="67:46" pos:end="67:46">.</operator><name pos:start="67:47" pos:end="67:55">bmds_list</name></name></expr></argument>, <argument pos:start="67:58" pos:end="67:61"><expr pos:start="67:58" pos:end="67:61"><name pos:start="67:58" pos:end="67:61">bmds</name></expr></argument>, <argument pos:start="67:64" pos:end="67:68"><expr pos:start="67:64" pos:end="67:68"><name pos:start="67:64" pos:end="67:68">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
