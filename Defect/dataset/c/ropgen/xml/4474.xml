<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4474.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">usb_net_handle_datain</name><parameter_list pos:start="1:33" pos:end="1:62">(<parameter pos:start="1:34" pos:end="1:47"><decl pos:start="1:34" pos:end="1:47"><type pos:start="1:34" pos:end="1:47"><name pos:start="1:34" pos:end="1:44">USBNetState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:61"><decl pos:start="1:50" pos:end="1:61"><type pos:start="1:50" pos:end="1:61"><name pos:start="1:50" pos:end="1:58">USBPacket</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:15">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name> <init pos:start="5:13" pos:end="5:25">= <expr pos:start="5:15" pos:end="5:25"><name pos:start="5:15" pos:end="5:25">USB_RET_NAK</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="17:5"><if pos:start="9:5" pos:end="17:5">if <condition pos:start="9:8" pos:end="9:30">(<expr pos:start="9:9" pos:end="9:29"><name pos:start="9:9" pos:end="9:17"><name pos:start="9:9" pos:end="9:9">s</name><operator pos:start="9:10" pos:end="9:11">-&gt;</operator><name pos:start="9:12" pos:end="9:17">in_ptr</name></name> <operator pos:start="9:19" pos:end="9:19">&gt;</operator> <name pos:start="9:21" pos:end="9:29"><name pos:start="9:21" pos:end="9:21">s</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:29">in_len</name></name></expr>)</condition> <block pos:start="9:32" pos:end="17:5">{<block_content pos:start="11:9" pos:end="15:19">

        <expr_stmt pos:start="11:9" pos:end="11:34"><expr pos:start="11:9" pos:end="11:33"><name pos:start="11:9" pos:end="11:17"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:17">in_ptr</name></name> <operator pos:start="11:19" pos:end="11:19">=</operator> <name pos:start="11:21" pos:end="11:29"><name pos:start="11:21" pos:end="11:21">s</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:29">in_len</name></name> <operator pos:start="11:31" pos:end="11:31">=</operator> <literal type="number" pos:start="11:33" pos:end="11:33">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="13:9" pos:end="13:26"><expr pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:11">ret</name> <operator pos:start="13:13" pos:end="13:13">=</operator> <name pos:start="13:15" pos:end="13:25">USB_RET_NAK</name></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:19">return <expr pos:start="15:16" pos:end="15:18"><name pos:start="15:16" pos:end="15:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:19">(<expr pos:start="19:9" pos:end="19:18"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:18"><name pos:start="19:10" pos:end="19:10">s</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:18">in_len</name></name></expr>)</condition> <block pos:start="19:21" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:19">

        <expr_stmt pos:start="21:9" pos:end="21:26"><expr pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:25">USB_RET_NAK</name></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:19">return <expr pos:start="23:16" pos:end="23:18"><name pos:start="23:16" pos:end="23:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:32"><expr pos:start="27:5" pos:end="27:31"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <name pos:start="27:11" pos:end="27:19"><name pos:start="27:11" pos:end="27:11">s</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:19">in_len</name></name> <operator pos:start="27:21" pos:end="27:21">-</operator> <name pos:start="27:23" pos:end="27:31"><name pos:start="27:23" pos:end="27:23">s</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:31">in_ptr</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="31:21"><if pos:start="29:5" pos:end="31:21">if <condition pos:start="29:8" pos:end="29:21">(<expr pos:start="29:9" pos:end="29:20"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&gt;</operator> <name pos:start="29:15" pos:end="29:20"><name pos:start="29:15" pos:end="29:15">p</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:20">len</name></name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:21"><block_content pos:start="31:9" pos:end="31:21">

        <expr_stmt pos:start="31:9" pos:end="31:21"><expr pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <name pos:start="31:15" pos:end="31:20"><name pos:start="31:15" pos:end="31:15">p</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:20">len</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:48"><expr pos:start="33:5" pos:end="33:47"><call pos:start="33:5" pos:end="33:47"><name pos:start="33:5" pos:end="33:10">memcpy</name><argument_list pos:start="33:11" pos:end="33:47">(<argument pos:start="33:12" pos:end="33:18"><expr pos:start="33:12" pos:end="33:18"><name pos:start="33:12" pos:end="33:18"><name pos:start="33:12" pos:end="33:12">p</name><operator pos:start="33:13" pos:end="33:14">-&gt;</operator><name pos:start="33:15" pos:end="33:18">data</name></name></expr></argument>, <argument pos:start="33:21" pos:end="33:41"><expr pos:start="33:21" pos:end="33:41"><operator pos:start="33:21" pos:end="33:21">&amp;</operator><name pos:start="33:22" pos:end="33:41"><name pos:start="33:22" pos:end="33:22">s</name><operator pos:start="33:23" pos:end="33:24">-&gt;</operator><name pos:start="33:25" pos:end="33:30">in_buf</name><index pos:start="33:31" pos:end="33:41">[<expr pos:start="33:32" pos:end="33:40"><name pos:start="33:32" pos:end="33:40"><name pos:start="33:32" pos:end="33:32">s</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:40">in_ptr</name></name></expr>]</index></name></expr></argument>, <argument pos:start="33:44" pos:end="33:46"><expr pos:start="33:44" pos:end="33:46"><name pos:start="33:44" pos:end="33:46">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:21"><expr pos:start="35:5" pos:end="35:20"><name pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:13">in_ptr</name></name> <operator pos:start="35:15" pos:end="35:16">+=</operator> <name pos:start="35:18" pos:end="35:20">ret</name></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="50:0"><if pos:start="37:5" pos:end="50:0">if <condition pos:start="37:8" pos:end="39:68">(<expr pos:start="37:9" pos:end="39:67"><name pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:17">in_ptr</name></name> <operator pos:start="37:19" pos:end="37:20">&gt;=</operator> <name pos:start="37:22" pos:end="37:30"><name pos:start="37:22" pos:end="37:22">s</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:30">in_len</name></name> <operator pos:start="37:32" pos:end="37:33">&amp;&amp;</operator>

                    <operator pos:start="39:21" pos:end="39:21">(</operator><call pos:start="39:22" pos:end="39:32"><name pos:start="39:22" pos:end="39:29">is_rndis</name><argument_list pos:start="39:30" pos:end="39:32">(<argument pos:start="39:31" pos:end="39:31"><expr pos:start="39:31" pos:end="39:31"><name pos:start="39:31" pos:end="39:31">s</name></expr></argument>)</argument_list></call> <operator pos:start="39:34" pos:end="39:35">||</operator> <operator pos:start="39:37" pos:end="39:37">(</operator><name pos:start="39:38" pos:end="39:46"><name pos:start="39:38" pos:end="39:38">s</name><operator pos:start="39:39" pos:end="39:40">-&gt;</operator><name pos:start="39:41" pos:end="39:46">in_len</name></name> <operator pos:start="39:48" pos:end="39:48">&amp;</operator> <operator pos:start="39:50" pos:end="39:50">(</operator><literal type="number" pos:start="39:51" pos:end="39:54">64</literal> <operator pos:start="39:54" pos:end="39:54">-</operator> <literal type="number" pos:start="39:56" pos:end="39:56">1</literal><operator pos:start="39:57" pos:end="39:57">)</operator><operator pos:start="39:58" pos:end="39:58">)</operator> <operator pos:start="39:60" pos:end="39:61">||</operator> <operator pos:start="39:63" pos:end="39:63">!</operator><name pos:start="39:64" pos:end="39:66">ret</name><operator pos:start="39:67" pos:end="39:67">)</operator></expr>)</condition> <block pos:start="39:70" pos:end="50:0">{<block_content pos:start="43:9" pos:end="43:34">

        <comment type="block" pos:start="41:9" pos:end="41:39">/* no short packet necessary */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:34"><expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:17">in_ptr</name></name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:29"><name pos:start="43:21" pos:end="43:21">s</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:29">in_len</name></name> <operator pos:start="43:31" pos:end="43:31">=</operator> <literal type="number" pos:start="43:33" pos:end="43:33">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="49:1" pos:end="49:20">#<cpp:directive pos:start="49:2" pos:end="49:6">ifdef</cpp:directive> <name pos:start="49:8" pos:end="49:20">TRAFFIC_DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="51:5" pos:end="51:69"><expr pos:start="51:5" pos:end="51:68"><call pos:start="51:5" pos:end="51:68"><name pos:start="51:5" pos:end="51:11">fprintf</name><argument_list pos:start="51:12" pos:end="51:68">(<argument pos:start="51:13" pos:end="51:18"><expr pos:start="51:13" pos:end="51:18"><name pos:start="51:13" pos:end="51:18">stderr</name></expr></argument>, <argument pos:start="51:21" pos:end="51:54"><expr pos:start="51:21" pos:end="51:54"><literal type="string" pos:start="51:21" pos:end="51:54">"usbnet: data in len %u return %d"</literal></expr></argument>, <argument pos:start="51:57" pos:end="51:62"><expr pos:start="51:57" pos:end="51:62"><name pos:start="51:57" pos:end="51:62"><name pos:start="51:57" pos:end="51:57">p</name><operator pos:start="51:58" pos:end="51:59">-&gt;</operator><name pos:start="51:60" pos:end="51:62">len</name></name></expr></argument>, <argument pos:start="51:65" pos:end="51:67"><expr pos:start="51:65" pos:end="51:67"><name pos:start="51:65" pos:end="51:67">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="53:5" pos:end="74:0">{<block_content pos:start="55:9" pos:end="69:32">

        <decl_stmt pos:start="55:9" pos:end="55:14"><decl pos:start="55:9" pos:end="55:13"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:13">i</name></decl>;</decl_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:29"><expr pos:start="57:9" pos:end="57:28"><call pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:15">fprintf</name><argument_list pos:start="57:16" pos:end="57:28">(<argument pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">stderr</name></expr></argument>, <argument pos:start="57:25" pos:end="57:27"><expr pos:start="57:25" pos:end="57:27"><literal type="string" pos:start="57:25" pos:end="57:27">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="59:9" pos:end="67:9">for <control pos:start="59:13" pos:end="59:33">(<init pos:start="59:14" pos:end="59:19"><expr pos:start="59:14" pos:end="59:18"><name pos:start="59:14" pos:end="59:14">i</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <literal type="number" pos:start="59:18" pos:end="59:18">0</literal></expr>;</init> <condition pos:start="59:21" pos:end="59:28"><expr pos:start="59:21" pos:end="59:27"><name pos:start="59:21" pos:end="59:21">i</name> <operator pos:start="59:23" pos:end="59:23">&lt;</operator> <name pos:start="59:25" pos:end="59:27">ret</name></expr>;</condition> <incr pos:start="59:30" pos:end="59:32"><expr pos:start="59:30" pos:end="59:32"><name pos:start="59:30" pos:end="59:30">i</name><operator pos:start="59:31" pos:end="59:32">++</operator></expr></incr>)</control> <block pos:start="59:35" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:49">

            <if_stmt pos:start="61:13" pos:end="63:46"><if pos:start="61:13" pos:end="63:46">if <condition pos:start="61:16" pos:end="61:26">(<expr pos:start="61:17" pos:end="61:25"><operator pos:start="61:17" pos:end="61:17">!</operator><operator pos:start="61:18" pos:end="61:18">(</operator><name pos:start="61:19" pos:end="61:19">i</name> <operator pos:start="61:21" pos:end="61:21">&amp;</operator> <literal type="number" pos:start="61:23" pos:end="61:24">15</literal><operator pos:start="61:25" pos:end="61:25">)</operator></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:46"><block_content pos:start="63:17" pos:end="63:46">

                <expr_stmt pos:start="63:17" pos:end="63:46"><expr pos:start="63:17" pos:end="63:45"><call pos:start="63:17" pos:end="63:45"><name pos:start="63:17" pos:end="63:23">fprintf</name><argument_list pos:start="63:24" pos:end="63:45">(<argument pos:start="63:25" pos:end="63:30"><expr pos:start="63:25" pos:end="63:30"><name pos:start="63:25" pos:end="63:30">stderr</name></expr></argument>, <argument pos:start="63:33" pos:end="63:41"><expr pos:start="63:33" pos:end="63:41"><literal type="string" pos:start="63:33" pos:end="63:41">"\n%04x:"</literal></expr></argument>, <argument pos:start="63:44" pos:end="63:44"><expr pos:start="63:44" pos:end="63:44"><name pos:start="63:44" pos:end="63:44">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:49"><expr pos:start="65:13" pos:end="65:48"><call pos:start="65:13" pos:end="65:48"><name pos:start="65:13" pos:end="65:19">fprintf</name><argument_list pos:start="65:20" pos:end="65:48">(<argument pos:start="65:21" pos:end="65:26"><expr pos:start="65:21" pos:end="65:26"><name pos:start="65:21" pos:end="65:26">stderr</name></expr></argument>, <argument pos:start="65:29" pos:end="65:35"><expr pos:start="65:29" pos:end="65:35"><literal type="string" pos:start="65:29" pos:end="65:35">" %02x"</literal></expr></argument>, <argument pos:start="65:38" pos:end="65:47"><expr pos:start="65:38" pos:end="65:47"><name pos:start="65:38" pos:end="65:47"><name pos:start="65:38" pos:end="65:38">p</name><operator pos:start="65:39" pos:end="65:40">-&gt;</operator><name pos:start="65:41" pos:end="65:44">data</name><index pos:start="65:45" pos:end="65:47">[<expr pos:start="65:46" pos:end="65:46"><name pos:start="65:46" pos:end="65:46">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="69:9" pos:end="69:32"><expr pos:start="69:9" pos:end="69:31"><call pos:start="69:9" pos:end="69:31"><name pos:start="69:9" pos:end="69:15">fprintf</name><argument_list pos:start="69:16" pos:end="69:31">(<argument pos:start="69:17" pos:end="69:22"><expr pos:start="69:17" pos:end="69:22"><name pos:start="69:17" pos:end="69:22">stderr</name></expr></argument>, <argument pos:start="69:25" pos:end="69:30"><expr pos:start="69:25" pos:end="69:30"><literal type="string" pos:start="69:25" pos:end="69:30">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="73:1" pos:end="73:6">#<cpp:directive pos:start="73:2" pos:end="73:6">endif</cpp:directive></cpp:endif>



    <return pos:start="77:5" pos:end="77:15">return <expr pos:start="77:12" pos:end="77:14"><name pos:start="77:12" pos:end="77:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
