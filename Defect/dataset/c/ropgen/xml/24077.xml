<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24077.c" pos:tabs="8"><function pos:start="1:1" pos:end="207:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">mjpeg_decode_scan</name><parameter_list pos:start="1:29" pos:end="3:81">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:47">MJpegDecodeContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:69"><decl pos:start="1:53" pos:end="1:69"><type pos:start="1:53" pos:end="1:69"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:69">nb_components</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:77"><decl pos:start="1:72" pos:end="1:77"><type pos:start="1:72" pos:end="1:77"><name pos:start="1:72" pos:end="1:74">int</name></type> <name pos:start="1:76" pos:end="1:77">Ah</name></decl></parameter>, <parameter pos:start="1:80" pos:end="1:85"><decl pos:start="1:80" pos:end="1:85"><type pos:start="1:80" pos:end="1:85"><name pos:start="1:80" pos:end="1:82">int</name></type> <name pos:start="1:84" pos:end="1:85">Al</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:54"><decl pos:start="3:30" pos:end="3:54"><type pos:start="3:30" pos:end="3:54"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:42">uint8_t</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:54">mb_bitmask</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:80"><decl pos:start="3:57" pos:end="3:80"><type pos:start="3:57" pos:end="3:80"><specifier pos:start="3:57" pos:end="3:61">const</specifier> <name pos:start="3:63" pos:end="3:69">AVFrame</name> <modifier pos:start="3:71" pos:end="3:71">*</modifier></type><name pos:start="3:72" pos:end="3:80">reference</name></decl></parameter>)</parameter_list><block pos:start="3:82" pos:end="207:1">{<block_content pos:start="5:5" pos:end="205:13">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:15">mb_x</name></decl>, <decl pos:start="5:18" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:21">mb_y</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:11">uint8_t</name><modifier pos:start="7:12" pos:end="7:12">*</modifier></type> <name pos:start="7:14" pos:end="7:33"><name pos:start="7:14" pos:end="7:17">data</name><index pos:start="7:18" pos:end="7:33">[<expr pos:start="7:19" pos:end="7:32"><name pos:start="7:19" pos:end="7:32">MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:50"><decl pos:start="9:5" pos:end="9:49"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:49"><name pos:start="9:20" pos:end="9:33">reference_data</name><index pos:start="9:34" pos:end="9:49">[<expr pos:start="9:35" pos:end="9:48"><name pos:start="9:35" pos:end="9:48">MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:32"><name pos:start="11:9" pos:end="11:16">linesize</name><index pos:start="11:17" pos:end="11:32">[<expr pos:start="11:18" pos:end="11:31"><name pos:start="11:18" pos:end="11:31">MAX_COMPONENTS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">GetBitContext</name></type> <name pos:start="13:19" pos:end="13:31">mb_bitmask_gb</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:19">(<expr pos:start="17:9" pos:end="17:18"><name pos:start="17:9" pos:end="17:18">mb_bitmask</name></expr>)</condition> <block pos:start="17:21" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:76">

        <expr_stmt pos:start="19:9" pos:end="19:76"><expr pos:start="19:9" pos:end="19:75"><call pos:start="19:9" pos:end="19:75"><name pos:start="19:9" pos:end="19:21">init_get_bits</name><argument_list pos:start="19:22" pos:end="19:75">(<argument pos:start="19:23" pos:end="19:36"><expr pos:start="19:23" pos:end="19:36"><operator pos:start="19:23" pos:end="19:23">&amp;</operator><name pos:start="19:24" pos:end="19:36">mb_bitmask_gb</name></expr></argument>, <argument pos:start="19:39" pos:end="19:48"><expr pos:start="19:39" pos:end="19:48"><name pos:start="19:39" pos:end="19:48">mb_bitmask</name></expr></argument>, <argument pos:start="19:51" pos:end="19:74"><expr pos:start="19:51" pos:end="19:74"><name pos:start="19:51" pos:end="19:61"><name pos:start="19:51" pos:end="19:51">s</name><operator pos:start="19:52" pos:end="19:53">-&gt;</operator><name pos:start="19:54" pos:end="19:61">mb_width</name></name><operator pos:start="19:62" pos:end="19:62">*</operator><name pos:start="19:63" pos:end="19:74"><name pos:start="19:63" pos:end="19:63">s</name><operator pos:start="19:64" pos:end="19:65">-&gt;</operator><name pos:start="19:66" pos:end="19:74">mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if<condition pos:start="25:7" pos:end="25:59">(<expr pos:start="25:8" pos:end="25:58"><name pos:start="25:8" pos:end="25:17"><name pos:start="25:8" pos:end="25:8">s</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:17">flipped</name></name> <operator pos:start="25:19" pos:end="25:20">&amp;&amp;</operator> <name pos:start="25:22" pos:end="25:36"><name pos:start="25:22" pos:end="25:22">s</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:29">avctx</name><operator pos:start="25:30" pos:end="25:31">-&gt;</operator><name pos:start="25:32" pos:end="25:36">flags</name></name> <operator pos:start="25:38" pos:end="25:38">&amp;</operator> <name pos:start="25:40" pos:end="25:58">CODEC_FLAG_EMU_EDGE</name></expr>)</condition> <block pos:start="25:61" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:23">

        <expr_stmt pos:start="27:9" pos:end="27:93"><expr pos:start="27:9" pos:end="27:92"><call pos:start="27:9" pos:end="27:92"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:92">(<argument pos:start="27:16" pos:end="27:23"><expr pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:16">s</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:23">avctx</name></name></expr></argument>, <argument pos:start="27:26" pos:end="27:37"><expr pos:start="27:26" pos:end="27:37"><name pos:start="27:26" pos:end="27:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:40" pos:end="27:91"><expr pos:start="27:40" pos:end="27:91"><literal type="string" pos:start="27:40" pos:end="27:91">"Can not flip image with CODEC_FLAG_EMU_EDGE set!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:23"><expr pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:18">flipped</name></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <literal type="number" pos:start="29:22" pos:end="29:22">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <for pos:start="33:5" pos:end="59:5">for<control pos:start="33:8" pos:end="33:36">(<init pos:start="33:9" pos:end="33:12"><expr pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:9">i</name><operator pos:start="33:10" pos:end="33:10">=</operator><literal type="number" pos:start="33:11" pos:end="33:11">0</literal></expr>;</init> <condition pos:start="33:14" pos:end="33:31"><expr pos:start="33:14" pos:end="33:30"><name pos:start="33:14" pos:end="33:14">i</name> <operator pos:start="33:16" pos:end="33:16">&lt;</operator> <name pos:start="33:18" pos:end="33:30">nb_components</name></expr>;</condition> <incr pos:start="33:33" pos:end="33:35"><expr pos:start="33:33" pos:end="33:35"><name pos:start="33:33" pos:end="33:33">i</name><operator pos:start="33:34" pos:end="33:35">++</operator></expr></incr>)</control> <block pos:start="33:38" pos:end="59:5">{<block_content pos:start="35:9" pos:end="57:9">

        <decl_stmt pos:start="35:9" pos:end="35:33"><decl pos:start="35:9" pos:end="35:32"><type pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:11">int</name></type> <name pos:start="35:13" pos:end="35:13">c</name> <init pos:start="35:15" pos:end="35:32">= <expr pos:start="35:17" pos:end="35:32"><name pos:start="35:17" pos:end="35:32"><name pos:start="35:17" pos:end="35:17">s</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:29">comp_index</name><index pos:start="35:30" pos:end="35:32">[<expr pos:start="35:31" pos:end="35:31"><name pos:start="35:31" pos:end="35:31">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:42"><expr pos:start="37:9" pos:end="37:41"><name pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:12">data</name><index pos:start="37:13" pos:end="37:15">[<expr pos:start="37:14" pos:end="37:14"><name pos:start="37:14" pos:end="37:14">c</name></expr>]</index></name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:41"><name pos:start="37:19" pos:end="37:19">s</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:32">picture_ptr</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:38">data</name><index pos:start="37:39" pos:end="37:41">[<expr pos:start="37:40" pos:end="37:40"><name pos:start="37:40" pos:end="37:40">c</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:66"><expr pos:start="39:9" pos:end="39:65"><name pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:22">reference_data</name><index pos:start="39:23" pos:end="39:25">[<expr pos:start="39:24" pos:end="39:24"><name pos:start="39:24" pos:end="39:24">c</name></expr>]</index></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <ternary pos:start="39:29" pos:end="39:65"><condition pos:start="39:29" pos:end="39:39"><expr pos:start="39:29" pos:end="39:37"><name pos:start="39:29" pos:end="39:37">reference</name></expr> ?</condition><then pos:start="39:41" pos:end="39:58"> <expr pos:start="39:41" pos:end="39:58"><name pos:start="39:41" pos:end="39:58"><name pos:start="39:41" pos:end="39:49">reference</name><operator pos:start="39:50" pos:end="39:51">-&gt;</operator><name pos:start="39:52" pos:end="39:55">data</name><index pos:start="39:56" pos:end="39:58">[<expr pos:start="39:57" pos:end="39:57"><name pos:start="39:57" pos:end="39:57">c</name></expr>]</index></name></expr> </then><else pos:start="39:60" pos:end="39:65">: <expr pos:start="39:62" pos:end="39:65"><name pos:start="39:62" pos:end="39:65">NULL</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:35"><expr pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:16">linesize</name><index pos:start="41:17" pos:end="41:19">[<expr pos:start="41:18" pos:end="41:18"><name pos:start="41:18" pos:end="41:18">c</name></expr>]</index></name><operator pos:start="41:20" pos:end="41:20">=</operator><name pos:start="41:21" pos:end="41:34"><name pos:start="41:21" pos:end="41:21">s</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:31">linesize</name><index pos:start="41:32" pos:end="41:34">[<expr pos:start="41:33" pos:end="41:33"><name pos:start="41:33" pos:end="41:33">c</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:34"><expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:9">s</name><operator pos:start="43:10" pos:end="43:11">-&gt;</operator><name pos:start="43:12" pos:end="43:25">coefs_finished</name><index pos:start="43:26" pos:end="43:28">[<expr pos:start="43:27" pos:end="43:27"><name pos:start="43:27" pos:end="43:27">c</name></expr>]</index></name> <operator pos:start="43:30" pos:end="43:31">|=</operator> <literal type="number" pos:start="43:33" pos:end="43:33">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="57:9"><if pos:start="45:9" pos:end="57:9">if<condition pos:start="45:11" pos:end="45:22">(<expr pos:start="45:12" pos:end="45:21"><name pos:start="45:12" pos:end="45:21"><name pos:start="45:12" pos:end="45:12">s</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:21">flipped</name></name></expr>)</condition> <block pos:start="45:24" pos:end="57:9">{<block_content pos:start="49:13" pos:end="55:30">

            <comment type="line" pos:start="47:13" pos:end="47:66">//picture should be flipped upside-down for this codec</comment>

            <decl_stmt pos:start="49:13" pos:end="49:110"><decl pos:start="49:13" pos:end="49:109"><type pos:start="49:13" pos:end="49:15"><name pos:start="49:13" pos:end="49:15">int</name></type> <name pos:start="49:17" pos:end="49:22">offset</name> <init pos:start="49:24" pos:end="49:109">= <expr pos:start="49:26" pos:end="49:109"><operator pos:start="49:26" pos:end="49:26">(</operator><name pos:start="49:27" pos:end="49:37"><name pos:start="49:27" pos:end="49:34">linesize</name><index pos:start="49:35" pos:end="49:37">[<expr pos:start="49:36" pos:end="49:36"><name pos:start="49:36" pos:end="49:36">c</name></expr>]</index></name> <operator pos:start="49:39" pos:end="49:39">*</operator> <operator pos:start="49:41" pos:end="49:41">(</operator><name pos:start="49:42" pos:end="49:55"><name pos:start="49:42" pos:end="49:42">s</name><operator pos:start="49:43" pos:end="49:44">-&gt;</operator><name pos:start="49:45" pos:end="49:52">v_scount</name><index pos:start="49:53" pos:end="49:55">[<expr pos:start="49:54" pos:end="49:54"><name pos:start="49:54" pos:end="49:54">i</name></expr>]</index></name> <operator pos:start="49:57" pos:end="49:57">*</operator> <operator pos:start="49:59" pos:end="49:59">(</operator><literal type="number" pos:start="49:60" pos:end="49:60">8</literal> <operator pos:start="49:62" pos:end="49:62">*</operator> <name pos:start="49:64" pos:end="49:75"><name pos:start="49:64" pos:end="49:64">s</name><operator pos:start="49:65" pos:end="49:66">-&gt;</operator><name pos:start="49:67" pos:end="49:75">mb_height</name></name> <operator pos:start="49:77" pos:end="49:77">-</operator><operator pos:start="49:78" pos:end="49:78">(</operator><operator pos:start="49:79" pos:end="49:79">(</operator><name pos:start="49:80" pos:end="49:88"><name pos:start="49:80" pos:end="49:80">s</name><operator pos:start="49:81" pos:end="49:82">-&gt;</operator><name pos:start="49:83" pos:end="49:88">height</name></name><operator pos:start="49:89" pos:end="49:89">/</operator><name pos:start="49:90" pos:end="49:97"><name pos:start="49:90" pos:end="49:90">s</name><operator pos:start="49:91" pos:end="49:92">-&gt;</operator><name pos:start="49:93" pos:end="49:97">v_max</name></name><operator pos:start="49:98" pos:end="49:98">)</operator><operator pos:start="49:99" pos:end="49:99">&amp;</operator><literal type="number" pos:start="49:100" pos:end="49:100">7</literal><operator pos:start="49:101" pos:end="49:101">)</operator><operator pos:start="49:102" pos:end="49:102">)</operator> <operator pos:start="49:104" pos:end="49:104">-</operator> <literal type="number" pos:start="49:106" pos:end="49:106">1</literal> <operator pos:start="49:108" pos:end="49:108">)</operator><operator pos:start="49:109" pos:end="49:109">)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:30"><expr pos:start="51:13" pos:end="51:29"><name pos:start="51:13" pos:end="51:19"><name pos:start="51:13" pos:end="51:16">data</name><index pos:start="51:17" pos:end="51:19">[<expr pos:start="51:18" pos:end="51:18"><name pos:start="51:18" pos:end="51:18">c</name></expr>]</index></name> <operator pos:start="51:21" pos:end="51:22">+=</operator> <name pos:start="51:24" pos:end="51:29">offset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:40"><expr pos:start="53:13" pos:end="53:39"><name pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:26">reference_data</name><index pos:start="53:27" pos:end="53:29">[<expr pos:start="53:28" pos:end="53:28"><name pos:start="53:28" pos:end="53:28">c</name></expr>]</index></name> <operator pos:start="53:31" pos:end="53:32">+=</operator> <name pos:start="53:34" pos:end="53:39">offset</name></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:30"><expr pos:start="55:13" pos:end="55:29"><name pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:20">linesize</name><index pos:start="55:21" pos:end="55:23">[<expr pos:start="55:22" pos:end="55:22"><name pos:start="55:22" pos:end="55:22">c</name></expr>]</index></name> <operator pos:start="55:25" pos:end="55:26">*=</operator> <operator pos:start="55:28" pos:end="55:28">-</operator><literal type="number" pos:start="55:29" pos:end="55:29">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <for pos:start="63:5" pos:end="203:5">for<control pos:start="63:8" pos:end="63:46">(<init pos:start="63:9" pos:end="63:17"><expr pos:start="63:9" pos:end="63:16"><name pos:start="63:9" pos:end="63:12">mb_y</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <literal type="number" pos:start="63:16" pos:end="63:16">0</literal></expr>;</init> <condition pos:start="63:19" pos:end="63:38"><expr pos:start="63:19" pos:end="63:37"><name pos:start="63:19" pos:end="63:22">mb_y</name> <operator pos:start="63:24" pos:end="63:24">&lt;</operator> <name pos:start="63:26" pos:end="63:37"><name pos:start="63:26" pos:end="63:26">s</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:37">mb_height</name></name></expr>;</condition> <incr pos:start="63:40" pos:end="63:45"><expr pos:start="63:40" pos:end="63:45"><name pos:start="63:40" pos:end="63:43">mb_y</name><operator pos:start="63:44" pos:end="63:45">++</operator></expr></incr>)</control> <block pos:start="63:48" pos:end="203:5">{<block_content pos:start="65:9" pos:end="201:9">

        <for pos:start="65:9" pos:end="201:9">for<control pos:start="65:12" pos:end="65:49">(<init pos:start="65:13" pos:end="65:21"><expr pos:start="65:13" pos:end="65:20"><name pos:start="65:13" pos:end="65:16">mb_x</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <literal type="number" pos:start="65:20" pos:end="65:20">0</literal></expr>;</init> <condition pos:start="65:23" pos:end="65:41"><expr pos:start="65:23" pos:end="65:40"><name pos:start="65:23" pos:end="65:26">mb_x</name> <operator pos:start="65:28" pos:end="65:28">&lt;</operator> <name pos:start="65:30" pos:end="65:40"><name pos:start="65:30" pos:end="65:30">s</name><operator pos:start="65:31" pos:end="65:32">-&gt;</operator><name pos:start="65:33" pos:end="65:40">mb_width</name></name></expr>;</condition> <incr pos:start="65:43" pos:end="65:48"><expr pos:start="65:43" pos:end="65:48"><name pos:start="65:43" pos:end="65:46">mb_x</name><operator pos:start="65:47" pos:end="65:48">++</operator></expr></incr>)</control> <block pos:start="65:51" pos:end="201:9">{<block_content pos:start="67:13" pos:end="199:13">

            <decl_stmt pos:start="67:13" pos:end="67:73"><decl pos:start="67:13" pos:end="67:72"><type pos:start="67:13" pos:end="67:21"><specifier pos:start="67:13" pos:end="67:17">const</specifier> <name pos:start="67:19" pos:end="67:21">int</name></type> <name pos:start="67:23" pos:end="67:29">copy_mb</name> <init pos:start="67:31" pos:end="67:72">= <expr pos:start="67:33" pos:end="67:72"><name pos:start="67:33" pos:end="67:42">mb_bitmask</name> <operator pos:start="67:44" pos:end="67:45">&amp;&amp;</operator> <operator pos:start="67:47" pos:end="67:47">!</operator><call pos:start="67:48" pos:end="67:72"><name pos:start="67:48" pos:end="67:56">get_bits1</name><argument_list pos:start="67:57" pos:end="67:72">(<argument pos:start="67:58" pos:end="67:71"><expr pos:start="67:58" pos:end="67:71"><operator pos:start="67:58" pos:end="67:58">&amp;</operator><name pos:start="67:59" pos:end="67:71">mb_bitmask_gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="71:13" pos:end="73:55"><if pos:start="71:13" pos:end="73:55">if <condition pos:start="71:16" pos:end="71:57">(<expr pos:start="71:17" pos:end="71:56"><name pos:start="71:17" pos:end="71:35"><name pos:start="71:17" pos:end="71:17">s</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:35">restart_interval</name></name> <operator pos:start="71:37" pos:end="71:38">&amp;&amp;</operator> <operator pos:start="71:40" pos:end="71:40">!</operator><name pos:start="71:41" pos:end="71:56"><name pos:start="71:41" pos:end="71:41">s</name><operator pos:start="71:42" pos:end="71:43">-&gt;</operator><name pos:start="71:44" pos:end="71:56">restart_count</name></name></expr>)</condition><block type="pseudo" pos:start="73:17" pos:end="73:55"><block_content pos:start="73:17" pos:end="73:55">

                <expr_stmt pos:start="73:17" pos:end="73:55"><expr pos:start="73:17" pos:end="73:54"><name pos:start="73:17" pos:end="73:32"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:32">restart_count</name></name> <operator pos:start="73:34" pos:end="73:34">=</operator> <name pos:start="73:36" pos:end="73:54"><name pos:start="73:36" pos:end="73:36">s</name><operator pos:start="73:37" pos:end="73:38">-&gt;</operator><name pos:start="73:39" pos:end="73:54">restart_interval</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="77:13" pos:end="83:13"><if pos:start="77:13" pos:end="83:13">if<condition pos:start="77:15" pos:end="77:57">(<expr pos:start="77:16" pos:end="77:56"><call pos:start="77:16" pos:end="77:37"><name pos:start="77:16" pos:end="77:29">get_bits_count</name><argument_list pos:start="77:30" pos:end="77:37">(<argument pos:start="77:31" pos:end="77:36"><expr pos:start="77:31" pos:end="77:36"><operator pos:start="77:31" pos:end="77:31">&amp;</operator><name pos:start="77:32" pos:end="77:36"><name pos:start="77:32" pos:end="77:32">s</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:36">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="77:38" pos:end="77:38">&gt;</operator><name pos:start="77:39" pos:end="77:56"><name pos:start="77:39" pos:end="77:39">s</name><operator pos:start="77:40" pos:end="77:41">-&gt;</operator><name pos:start="77:42" pos:end="77:43">gb</name><operator pos:start="77:44" pos:end="77:44">.</operator><name pos:start="77:45" pos:end="77:56">size_in_bits</name></name></expr>)</condition><block pos:start="77:58" pos:end="83:13">{<block_content pos:start="79:17" pos:end="81:26">

                <expr_stmt pos:start="79:17" pos:end="79:109"><expr pos:start="79:17" pos:end="79:108"><call pos:start="79:17" pos:end="79:108"><name pos:start="79:17" pos:end="79:22">av_log</name><argument_list pos:start="79:23" pos:end="79:108">(<argument pos:start="79:24" pos:end="79:31"><expr pos:start="79:24" pos:end="79:31"><name pos:start="79:24" pos:end="79:31"><name pos:start="79:24" pos:end="79:24">s</name><operator pos:start="79:25" pos:end="79:26">-&gt;</operator><name pos:start="79:27" pos:end="79:31">avctx</name></name></expr></argument>, <argument pos:start="79:34" pos:end="79:45"><expr pos:start="79:34" pos:end="79:45"><name pos:start="79:34" pos:end="79:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:48" pos:end="79:62"><expr pos:start="79:48" pos:end="79:62"><literal type="string" pos:start="79:48" pos:end="79:62">"overread %d\n"</literal></expr></argument>, <argument pos:start="79:65" pos:end="79:107"><expr pos:start="79:65" pos:end="79:107"><call pos:start="79:65" pos:end="79:86"><name pos:start="79:65" pos:end="79:78">get_bits_count</name><argument_list pos:start="79:79" pos:end="79:86">(<argument pos:start="79:80" pos:end="79:85"><expr pos:start="79:80" pos:end="79:85"><operator pos:start="79:80" pos:end="79:80">&amp;</operator><name pos:start="79:81" pos:end="79:85"><name pos:start="79:81" pos:end="79:81">s</name><operator pos:start="79:82" pos:end="79:83">-&gt;</operator><name pos:start="79:84" pos:end="79:85">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="79:88" pos:end="79:88">-</operator> <name pos:start="79:90" pos:end="79:107"><name pos:start="79:90" pos:end="79:90">s</name><operator pos:start="79:91" pos:end="79:92">-&gt;</operator><name pos:start="79:93" pos:end="79:94">gb</name><operator pos:start="79:95" pos:end="79:95">.</operator><name pos:start="79:96" pos:end="79:107">size_in_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="81:17" pos:end="81:26">return <expr pos:start="81:24" pos:end="81:25"><operator pos:start="81:24" pos:end="81:24">-</operator><literal type="number" pos:start="81:25" pos:end="81:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <for pos:start="85:13" pos:end="179:13">for<control pos:start="85:16" pos:end="85:40">(<init pos:start="85:17" pos:end="85:20"><expr pos:start="85:17" pos:end="85:19"><name pos:start="85:17" pos:end="85:17">i</name><operator pos:start="85:18" pos:end="85:18">=</operator><literal type="number" pos:start="85:19" pos:end="85:19">0</literal></expr>;</init><condition pos:start="85:21" pos:end="85:36"><expr pos:start="85:21" pos:end="85:35"><name pos:start="85:21" pos:end="85:21">i</name><operator pos:start="85:22" pos:end="85:22">&lt;</operator><name pos:start="85:23" pos:end="85:35">nb_components</name></expr>;</condition><incr pos:start="85:37" pos:end="85:39"><expr pos:start="85:37" pos:end="85:39"><name pos:start="85:37" pos:end="85:37">i</name><operator pos:start="85:38" pos:end="85:39">++</operator></expr></incr>)</control> <block pos:start="85:42" pos:end="179:13">{<block_content pos:start="87:17" pos:end="177:17">

                <decl_stmt pos:start="87:17" pos:end="87:29"><decl pos:start="87:17" pos:end="87:28"><type pos:start="87:17" pos:end="87:25"><name pos:start="87:17" pos:end="87:23">uint8_t</name> <modifier pos:start="87:25" pos:end="87:25">*</modifier></type><name pos:start="87:26" pos:end="87:28">ptr</name></decl>;</decl_stmt>

                <decl_stmt pos:start="89:17" pos:end="89:40"><decl pos:start="89:17" pos:end="89:21"><type pos:start="89:17" pos:end="89:19"><name pos:start="89:17" pos:end="89:19">int</name></type> <name pos:start="89:21" pos:end="89:21">n</name></decl>, <decl pos:start="89:24" pos:end="89:24"><type ref="prev" pos:start="89:17" pos:end="89:19"/><name pos:start="89:24" pos:end="89:24">h</name></decl>, <decl pos:start="89:27" pos:end="89:27"><type ref="prev" pos:start="89:17" pos:end="89:19"/><name pos:start="89:27" pos:end="89:27">v</name></decl>, <decl pos:start="89:30" pos:end="89:30"><type ref="prev" pos:start="89:17" pos:end="89:19"/><name pos:start="89:30" pos:end="89:30">x</name></decl>, <decl pos:start="89:33" pos:end="89:33"><type ref="prev" pos:start="89:17" pos:end="89:19"/><name pos:start="89:33" pos:end="89:33">y</name></decl>, <decl pos:start="89:36" pos:end="89:36"><type ref="prev" pos:start="89:17" pos:end="89:19"/><name pos:start="89:36" pos:end="89:36">c</name></decl>, <decl pos:start="89:39" pos:end="89:39"><type ref="prev" pos:start="89:17" pos:end="89:19"/><name pos:start="89:39" pos:end="89:39">j</name></decl>;</decl_stmt>

                <decl_stmt pos:start="91:17" pos:end="91:33"><decl pos:start="91:17" pos:end="91:32"><type pos:start="91:17" pos:end="91:19"><name pos:start="91:17" pos:end="91:19">int</name></type> <name pos:start="91:21" pos:end="91:32">block_offset</name></decl>;</decl_stmt>

                <expr_stmt pos:start="93:17" pos:end="93:36"><expr pos:start="93:17" pos:end="93:35"><name pos:start="93:17" pos:end="93:17">n</name> <operator pos:start="93:19" pos:end="93:19">=</operator> <name pos:start="93:21" pos:end="93:35"><name pos:start="93:21" pos:end="93:21">s</name><operator pos:start="93:22" pos:end="93:23">-&gt;</operator><name pos:start="93:24" pos:end="93:32">nb_blocks</name><index pos:start="93:33" pos:end="93:35">[<expr pos:start="93:34" pos:end="93:34"><name pos:start="93:34" pos:end="93:34">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:37"><expr pos:start="95:17" pos:end="95:36"><name pos:start="95:17" pos:end="95:17">c</name> <operator pos:start="95:19" pos:end="95:19">=</operator> <name pos:start="95:21" pos:end="95:36"><name pos:start="95:21" pos:end="95:21">s</name><operator pos:start="95:22" pos:end="95:23">-&gt;</operator><name pos:start="95:24" pos:end="95:33">comp_index</name><index pos:start="95:34" pos:end="95:36">[<expr pos:start="95:35" pos:end="95:35"><name pos:start="95:35" pos:end="95:35">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:35"><expr pos:start="97:17" pos:end="97:34"><name pos:start="97:17" pos:end="97:17">h</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <name pos:start="97:21" pos:end="97:34"><name pos:start="97:21" pos:end="97:21">s</name><operator pos:start="97:22" pos:end="97:23">-&gt;</operator><name pos:start="97:24" pos:end="97:31">h_scount</name><index pos:start="97:32" pos:end="97:34">[<expr pos:start="97:33" pos:end="97:33"><name pos:start="97:33" pos:end="97:33">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:35"><expr pos:start="99:17" pos:end="99:34"><name pos:start="99:17" pos:end="99:17">v</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <name pos:start="99:21" pos:end="99:34"><name pos:start="99:21" pos:end="99:21">s</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:31">v_scount</name><index pos:start="99:32" pos:end="99:34">[<expr pos:start="99:33" pos:end="99:33"><name pos:start="99:33" pos:end="99:33">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:22"><expr pos:start="101:17" pos:end="101:21"><name pos:start="101:17" pos:end="101:17">x</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <literal type="number" pos:start="101:21" pos:end="101:21">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:22"><expr pos:start="103:17" pos:end="103:21"><name pos:start="103:17" pos:end="103:17">y</name> <operator pos:start="103:19" pos:end="103:19">=</operator> <literal type="number" pos:start="103:21" pos:end="103:21">0</literal></expr>;</expr_stmt>

                <for pos:start="105:17" pos:end="177:17">for<control pos:start="105:20" pos:end="105:32">(<init pos:start="105:21" pos:end="105:24"><expr pos:start="105:21" pos:end="105:23"><name pos:start="105:21" pos:end="105:21">j</name><operator pos:start="105:22" pos:end="105:22">=</operator><literal type="number" pos:start="105:23" pos:end="105:23">0</literal></expr>;</init><condition pos:start="105:25" pos:end="105:28"><expr pos:start="105:25" pos:end="105:27"><name pos:start="105:25" pos:end="105:25">j</name><operator pos:start="105:26" pos:end="105:26">&lt;</operator><name pos:start="105:27" pos:end="105:27">n</name></expr>;</condition><incr pos:start="105:29" pos:end="105:31"><expr pos:start="105:29" pos:end="105:31"><name pos:start="105:29" pos:end="105:29">j</name><operator pos:start="105:30" pos:end="105:31">++</operator></expr></incr>)</control> <block pos:start="105:34" pos:end="177:17">{<block_content pos:start="107:21" pos:end="175:21">

                    <expr_stmt pos:start="107:21" pos:end="109:78"><expr pos:start="107:21" pos:end="109:77"><name pos:start="107:21" pos:end="107:32">block_offset</name> <operator pos:start="107:34" pos:end="107:34">=</operator> <operator pos:start="107:36" pos:end="107:36">(</operator><operator pos:start="107:37" pos:end="107:37">(</operator><operator pos:start="107:38" pos:end="107:38">(</operator><name pos:start="107:39" pos:end="107:49"><name pos:start="107:39" pos:end="107:46">linesize</name><index pos:start="107:47" pos:end="107:49">[<expr pos:start="107:48" pos:end="107:48"><name pos:start="107:48" pos:end="107:48">c</name></expr>]</index></name> <operator pos:start="107:51" pos:end="107:51">*</operator> <operator pos:start="107:53" pos:end="107:53">(</operator><name pos:start="107:54" pos:end="107:54">v</name> <operator pos:start="107:56" pos:end="107:56">*</operator> <name pos:start="107:58" pos:end="107:61">mb_y</name> <operator pos:start="107:63" pos:end="107:63">+</operator> <name pos:start="107:65" pos:end="107:65">y</name><operator pos:start="107:66" pos:end="107:66">)</operator> <operator pos:start="107:68" pos:end="107:68">*</operator> <literal type="number" pos:start="107:70" pos:end="107:70">8</literal><operator pos:start="107:71" pos:end="107:71">)</operator> <operator pos:start="107:73" pos:end="107:73">+</operator>

                                     <operator pos:start="109:38" pos:end="109:38">(</operator><name pos:start="109:39" pos:end="109:39">h</name> <operator pos:start="109:41" pos:end="109:41">*</operator> <name pos:start="109:43" pos:end="109:46">mb_x</name> <operator pos:start="109:48" pos:end="109:48">+</operator> <name pos:start="109:50" pos:end="109:50">x</name><operator pos:start="109:51" pos:end="109:51">)</operator> <operator pos:start="109:53" pos:end="109:53">*</operator> <literal type="number" pos:start="109:55" pos:end="109:55">8</literal><operator pos:start="109:56" pos:end="109:56">)</operator> <operator pos:start="109:58" pos:end="109:59">&gt;&gt;</operator> <name pos:start="109:61" pos:end="109:76"><name pos:start="109:61" pos:end="109:61">s</name><operator pos:start="109:62" pos:end="109:63">-&gt;</operator><name pos:start="109:64" pos:end="109:68">avctx</name><operator pos:start="109:69" pos:end="109:70">-&gt;</operator><name pos:start="109:71" pos:end="109:76">lowres</name></name><operator pos:start="109:77" pos:end="109:77">)</operator></expr>;</expr_stmt>



                    <if_stmt pos:start="113:21" pos:end="115:57"><if pos:start="113:21" pos:end="115:57">if<condition pos:start="113:23" pos:end="113:56">(<expr pos:start="113:24" pos:end="113:55"><name pos:start="113:24" pos:end="113:36"><name pos:start="113:24" pos:end="113:24">s</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:36">interlaced</name></name> <operator pos:start="113:38" pos:end="113:39">&amp;&amp;</operator> <name pos:start="113:41" pos:end="113:55"><name pos:start="113:41" pos:end="113:41">s</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:55">bottom_field</name></name></expr>)</condition><block type="pseudo" pos:start="115:25" pos:end="115:57"><block_content pos:start="115:25" pos:end="115:57">

                        <expr_stmt pos:start="115:25" pos:end="115:57"><expr pos:start="115:25" pos:end="115:56"><name pos:start="115:25" pos:end="115:36">block_offset</name> <operator pos:start="115:38" pos:end="115:39">+=</operator> <name pos:start="115:41" pos:end="115:51"><name pos:start="115:41" pos:end="115:48">linesize</name><index pos:start="115:49" pos:end="115:51">[<expr pos:start="115:50" pos:end="115:50"><name pos:start="115:50" pos:end="115:50">c</name></expr>]</index></name> <operator pos:start="115:53" pos:end="115:54">&gt;&gt;</operator> <literal type="number" pos:start="115:56" pos:end="115:56">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="117:21" pos:end="117:49"><expr pos:start="117:21" pos:end="117:48"><name pos:start="117:21" pos:end="117:23">ptr</name> <operator pos:start="117:25" pos:end="117:25">=</operator> <name pos:start="117:27" pos:end="117:33"><name pos:start="117:27" pos:end="117:30">data</name><index pos:start="117:31" pos:end="117:33">[<expr pos:start="117:32" pos:end="117:32"><name pos:start="117:32" pos:end="117:32">c</name></expr>]</index></name> <operator pos:start="117:35" pos:end="117:35">+</operator> <name pos:start="117:37" pos:end="117:48">block_offset</name></expr>;</expr_stmt>

                    <if_stmt pos:start="119:21" pos:end="163:21"><if pos:start="119:21" pos:end="145:21">if<condition pos:start="119:23" pos:end="119:39">(<expr pos:start="119:24" pos:end="119:38"><operator pos:start="119:24" pos:end="119:24">!</operator><name pos:start="119:25" pos:end="119:38"><name pos:start="119:25" pos:end="119:25">s</name><operator pos:start="119:26" pos:end="119:27">-&gt;</operator><name pos:start="119:28" pos:end="119:38">progressive</name></name></expr>)</condition> <block pos:start="119:41" pos:end="145:21">{<block_content pos:start="121:25" pos:end="143:25">

                        <if_stmt pos:start="121:25" pos:end="143:25"><if pos:start="121:25" pos:end="125:25">if <condition pos:start="121:28" pos:end="121:36">(<expr pos:start="121:29" pos:end="121:35"><name pos:start="121:29" pos:end="121:35">copy_mb</name></expr>)</condition> <block pos:start="121:38" pos:end="125:25">{<block_content pos:start="123:29" pos:end="123:115">

                            <expr_stmt pos:start="123:29" pos:end="123:115"><expr pos:start="123:29" pos:end="123:114"><call pos:start="123:29" pos:end="123:114"><name pos:start="123:29" pos:end="123:44">mjpeg_copy_block</name><argument_list pos:start="123:45" pos:end="123:114">(<argument pos:start="123:46" pos:end="123:48"><expr pos:start="123:46" pos:end="123:48"><name pos:start="123:46" pos:end="123:48">ptr</name></expr></argument>, <argument pos:start="123:51" pos:end="123:82"><expr pos:start="123:51" pos:end="123:82"><name pos:start="123:51" pos:end="123:67"><name pos:start="123:51" pos:end="123:64">reference_data</name><index pos:start="123:65" pos:end="123:67">[<expr pos:start="123:66" pos:end="123:66"><name pos:start="123:66" pos:end="123:66">c</name></expr>]</index></name> <operator pos:start="123:69" pos:end="123:69">+</operator> <name pos:start="123:71" pos:end="123:82">block_offset</name></expr></argument>, <argument pos:start="123:85" pos:end="123:95"><expr pos:start="123:85" pos:end="123:95"><name pos:start="123:85" pos:end="123:95"><name pos:start="123:85" pos:end="123:92">linesize</name><index pos:start="123:93" pos:end="123:95">[<expr pos:start="123:94" pos:end="123:94"><name pos:start="123:94" pos:end="123:94">c</name></expr>]</index></name></expr></argument>, <argument pos:start="123:98" pos:end="123:113"><expr pos:start="123:98" pos:end="123:113"><name pos:start="123:98" pos:end="123:113"><name pos:start="123:98" pos:end="123:98">s</name><operator pos:start="123:99" pos:end="123:100">-&gt;</operator><name pos:start="123:101" pos:end="123:105">avctx</name><operator pos:start="123:106" pos:end="123:107">-&gt;</operator><name pos:start="123:108" pos:end="123:113">lowres</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="125:27" pos:end="143:25">else <block pos:start="125:32" pos:end="143:25">{<block_content pos:start="127:25" pos:end="141:68">

                        <expr_stmt pos:start="127:25" pos:end="127:53"><expr pos:start="127:25" pos:end="127:52"><call pos:start="127:25" pos:end="127:52"><name pos:start="127:25" pos:end="127:42"><name pos:start="127:25" pos:end="127:25">s</name><operator pos:start="127:26" pos:end="127:27">-&gt;</operator><name pos:start="127:28" pos:end="127:30">dsp</name><operator pos:start="127:31" pos:end="127:31">.</operator><name pos:start="127:32" pos:end="127:42">clear_block</name></name><argument_list pos:start="127:43" pos:end="127:52">(<argument pos:start="127:44" pos:end="127:51"><expr pos:start="127:44" pos:end="127:51"><name pos:start="127:44" pos:end="127:51"><name pos:start="127:44" pos:end="127:44">s</name><operator pos:start="127:45" pos:end="127:46">-&gt;</operator><name pos:start="127:47" pos:end="127:51">block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="129:25" pos:end="139:25"><if pos:start="129:25" pos:end="139:25">if<condition pos:start="129:27" pos:end="133:81">(<expr pos:start="129:28" pos:end="133:80"><call pos:start="129:28" pos:end="133:76"><name pos:start="129:28" pos:end="129:39">decode_block</name><argument_list pos:start="129:40" pos:end="133:76">(<argument pos:start="129:41" pos:end="129:41"><expr pos:start="129:41" pos:end="129:41"><name pos:start="129:41" pos:end="129:41">s</name></expr></argument>, <argument pos:start="129:44" pos:end="129:51"><expr pos:start="129:44" pos:end="129:51"><name pos:start="129:44" pos:end="129:51"><name pos:start="129:44" pos:end="129:44">s</name><operator pos:start="129:45" pos:end="129:46">-&gt;</operator><name pos:start="129:47" pos:end="129:51">block</name></name></expr></argument>, <argument pos:start="129:54" pos:end="129:54"><expr pos:start="129:54" pos:end="129:54"><name pos:start="129:54" pos:end="129:54">i</name></expr></argument>,

                                     <argument pos:start="131:38" pos:end="131:51"><expr pos:start="131:38" pos:end="131:51"><name pos:start="131:38" pos:end="131:51"><name pos:start="131:38" pos:end="131:38">s</name><operator pos:start="131:39" pos:end="131:40">-&gt;</operator><name pos:start="131:41" pos:end="131:48">dc_index</name><index pos:start="131:49" pos:end="131:51">[<expr pos:start="131:50" pos:end="131:50"><name pos:start="131:50" pos:end="131:50">i</name></expr>]</index></name></expr></argument>, <argument pos:start="131:54" pos:end="131:67"><expr pos:start="131:54" pos:end="131:67"><name pos:start="131:54" pos:end="131:67"><name pos:start="131:54" pos:end="131:54">s</name><operator pos:start="131:55" pos:end="131:56">-&gt;</operator><name pos:start="131:57" pos:end="131:64">ac_index</name><index pos:start="131:65" pos:end="131:67">[<expr pos:start="131:66" pos:end="131:66"><name pos:start="131:66" pos:end="131:66">i</name></expr>]</index></name></expr></argument>,

                                     <argument pos:start="133:38" pos:end="133:75"><expr pos:start="133:38" pos:end="133:75"><name pos:start="133:38" pos:end="133:75"><name pos:start="133:38" pos:end="133:38">s</name><operator pos:start="133:39" pos:end="133:40">-&gt;</operator><name pos:start="133:41" pos:end="133:54">quant_matrixes</name><index pos:start="133:55" pos:end="133:75">[ <expr pos:start="133:57" pos:end="133:73"><name pos:start="133:57" pos:end="133:73"><name pos:start="133:57" pos:end="133:57">s</name><operator pos:start="133:58" pos:end="133:59">-&gt;</operator><name pos:start="133:60" pos:end="133:70">quant_index</name><index pos:start="133:71" pos:end="133:73">[<expr pos:start="133:72" pos:end="133:72"><name pos:start="133:72" pos:end="133:72">c</name></expr>]</index></name></expr> ]</index></name></expr></argument>)</argument_list></call> <operator pos:start="133:78" pos:end="133:78">&lt;</operator> <literal type="number" pos:start="133:80" pos:end="133:80">0</literal></expr>)</condition> <block pos:start="133:83" pos:end="139:25">{<block_content pos:start="135:29" pos:end="137:38">

                            <expr_stmt pos:start="135:29" pos:end="135:92"><expr pos:start="135:29" pos:end="135:91"><call pos:start="135:29" pos:end="135:91"><name pos:start="135:29" pos:end="135:34">av_log</name><argument_list pos:start="135:35" pos:end="135:91">(<argument pos:start="135:36" pos:end="135:43"><expr pos:start="135:36" pos:end="135:43"><name pos:start="135:36" pos:end="135:43"><name pos:start="135:36" pos:end="135:36">s</name><operator pos:start="135:37" pos:end="135:38">-&gt;</operator><name pos:start="135:39" pos:end="135:43">avctx</name></name></expr></argument>, <argument pos:start="135:46" pos:end="135:57"><expr pos:start="135:46" pos:end="135:57"><name pos:start="135:46" pos:end="135:57">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="135:60" pos:end="135:78"><expr pos:start="135:60" pos:end="135:78"><literal type="string" pos:start="135:60" pos:end="135:78">"error y=%d x=%d\n"</literal></expr></argument>, <argument pos:start="135:81" pos:end="135:84"><expr pos:start="135:81" pos:end="135:84"><name pos:start="135:81" pos:end="135:84">mb_y</name></expr></argument>, <argument pos:start="135:87" pos:end="135:90"><expr pos:start="135:87" pos:end="135:90"><name pos:start="135:87" pos:end="135:90">mb_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="137:29" pos:end="137:38">return <expr pos:start="137:36" pos:end="137:37"><operator pos:start="137:36" pos:end="137:36">-</operator><literal type="number" pos:start="137:37" pos:end="137:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="141:25" pos:end="141:68"><expr pos:start="141:25" pos:end="141:67"><call pos:start="141:25" pos:end="141:67"><name pos:start="141:25" pos:end="141:39"><name pos:start="141:25" pos:end="141:25">s</name><operator pos:start="141:26" pos:end="141:27">-&gt;</operator><name pos:start="141:28" pos:end="141:30">dsp</name><operator pos:start="141:31" pos:end="141:31">.</operator><name pos:start="141:32" pos:end="141:39">idct_put</name></name><argument_list pos:start="141:40" pos:end="141:67">(<argument pos:start="141:41" pos:end="141:43"><expr pos:start="141:41" pos:end="141:43"><name pos:start="141:41" pos:end="141:43">ptr</name></expr></argument>, <argument pos:start="141:46" pos:end="141:56"><expr pos:start="141:46" pos:end="141:56"><name pos:start="141:46" pos:end="141:56"><name pos:start="141:46" pos:end="141:53">linesize</name><index pos:start="141:54" pos:end="141:56">[<expr pos:start="141:55" pos:end="141:55"><name pos:start="141:55" pos:end="141:55">c</name></expr>]</index></name></expr></argument>, <argument pos:start="141:59" pos:end="141:66"><expr pos:start="141:59" pos:end="141:66"><name pos:start="141:59" pos:end="141:66"><name pos:start="141:59" pos:end="141:59">s</name><operator pos:start="141:60" pos:end="141:61">-&gt;</operator><name pos:start="141:62" pos:end="141:66">block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="145:23" pos:end="163:21">else <block pos:start="145:28" pos:end="163:21">{<block_content pos:start="147:25" pos:end="161:25">

                        <decl_stmt pos:start="147:25" pos:end="147:93"><decl pos:start="147:25" pos:end="147:92"><type pos:start="147:25" pos:end="147:27"><name pos:start="147:25" pos:end="147:27">int</name></type> <name pos:start="147:29" pos:end="147:37">block_idx</name> <init pos:start="147:39" pos:end="147:92">= <expr pos:start="147:41" pos:end="147:92"><name pos:start="147:41" pos:end="147:58"><name pos:start="147:41" pos:end="147:41">s</name><operator pos:start="147:42" pos:end="147:43">-&gt;</operator><name pos:start="147:44" pos:end="147:55">block_stride</name><index pos:start="147:56" pos:end="147:58">[<expr pos:start="147:57" pos:end="147:57"><name pos:start="147:57" pos:end="147:57">c</name></expr>]</index></name> <operator pos:start="147:60" pos:end="147:60">*</operator> <operator pos:start="147:62" pos:end="147:62">(</operator><name pos:start="147:63" pos:end="147:63">v</name> <operator pos:start="147:65" pos:end="147:65">*</operator> <name pos:start="147:67" pos:end="147:70">mb_y</name> <operator pos:start="147:72" pos:end="147:72">+</operator> <name pos:start="147:74" pos:end="147:74">y</name><operator pos:start="147:75" pos:end="147:75">)</operator> <operator pos:start="147:77" pos:end="147:77">+</operator> <operator pos:start="147:79" pos:end="147:79">(</operator><name pos:start="147:80" pos:end="147:80">h</name> <operator pos:start="147:82" pos:end="147:82">*</operator> <name pos:start="147:84" pos:end="147:87">mb_x</name> <operator pos:start="147:89" pos:end="147:89">+</operator> <name pos:start="147:91" pos:end="147:91">x</name><operator pos:start="147:92" pos:end="147:92">)</operator></expr></init></decl>;</decl_stmt>

                        <decl_stmt pos:start="149:25" pos:end="149:65"><decl pos:start="149:25" pos:end="149:64"><type pos:start="149:25" pos:end="149:33"><name pos:start="149:25" pos:end="149:31">DCTELEM</name> <modifier pos:start="149:33" pos:end="149:33">*</modifier></type><name pos:start="149:34" pos:end="149:38">block</name> <init pos:start="149:40" pos:end="149:64">= <expr pos:start="149:42" pos:end="149:64"><name pos:start="149:42" pos:end="149:64"><name pos:start="149:42" pos:end="149:42">s</name><operator pos:start="149:43" pos:end="149:44">-&gt;</operator><name pos:start="149:45" pos:end="149:50">blocks</name><index pos:start="149:51" pos:end="149:53">[<expr pos:start="149:52" pos:end="149:52"><name pos:start="149:52" pos:end="149:52">c</name></expr>]</index><index pos:start="149:54" pos:end="149:64">[<expr pos:start="149:55" pos:end="149:63"><name pos:start="149:55" pos:end="149:63">block_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="151:25" pos:end="161:25"><if pos:start="151:25" pos:end="153:108">if<condition pos:start="151:27" pos:end="151:30">(<expr pos:start="151:28" pos:end="151:29"><name pos:start="151:28" pos:end="151:29">Ah</name></expr>)</condition><block type="pseudo" pos:start="153:29" pos:end="153:108"><block_content pos:start="153:29" pos:end="153:108">

                            <expr_stmt pos:start="153:29" pos:end="153:108"><expr pos:start="153:29" pos:end="153:107"><name pos:start="153:29" pos:end="153:36"><name pos:start="153:29" pos:end="153:33">block</name><index pos:start="153:34" pos:end="153:36">[<expr pos:start="153:35" pos:end="153:35"><literal type="number" pos:start="153:35" pos:end="153:35">0</literal></expr>]</index></name> <operator pos:start="153:38" pos:end="153:39">+=</operator> <call pos:start="153:41" pos:end="153:57"><name pos:start="153:41" pos:end="153:49">get_bits1</name><argument_list pos:start="153:50" pos:end="153:57">(<argument pos:start="153:51" pos:end="153:56"><expr pos:start="153:51" pos:end="153:56"><operator pos:start="153:51" pos:end="153:51">&amp;</operator><name pos:start="153:52" pos:end="153:56"><name pos:start="153:52" pos:end="153:52">s</name><operator pos:start="153:53" pos:end="153:54">-&gt;</operator><name pos:start="153:55" pos:end="153:56">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="153:59" pos:end="153:59">*</operator> <name pos:start="153:61" pos:end="153:101"><name pos:start="153:61" pos:end="153:61">s</name><operator pos:start="153:62" pos:end="153:63">-&gt;</operator><name pos:start="153:64" pos:end="153:77">quant_matrixes</name><index pos:start="153:78" pos:end="153:98">[ <expr pos:start="153:80" pos:end="153:96"><name pos:start="153:80" pos:end="153:96"><name pos:start="153:80" pos:end="153:80">s</name><operator pos:start="153:81" pos:end="153:82">-&gt;</operator><name pos:start="153:83" pos:end="153:93">quant_index</name><index pos:start="153:94" pos:end="153:96">[<expr pos:start="153:95" pos:end="153:95"><name pos:start="153:95" pos:end="153:95">c</name></expr>]</index></name></expr> ]</index><index pos:start="153:99" pos:end="153:101">[<expr pos:start="153:100" pos:end="153:100"><literal type="number" pos:start="153:100" pos:end="153:100">0</literal></expr>]</index></name> <operator pos:start="153:103" pos:end="153:104">&lt;&lt;</operator> <name pos:start="153:106" pos:end="153:107">Al</name></expr>;</expr_stmt></block_content></block></if>

                        <if type="elseif" pos:start="155:25" pos:end="161:25">else if<condition pos:start="155:32" pos:end="155:131">(<expr pos:start="155:33" pos:end="155:130"><call pos:start="155:33" pos:end="155:126"><name pos:start="155:33" pos:end="155:53">decode_dc_progressive</name><argument_list pos:start="155:54" pos:end="155:126">(<argument pos:start="155:55" pos:end="155:55"><expr pos:start="155:55" pos:end="155:55"><name pos:start="155:55" pos:end="155:55">s</name></expr></argument>, <argument pos:start="155:58" pos:end="155:62"><expr pos:start="155:58" pos:end="155:62"><name pos:start="155:58" pos:end="155:62">block</name></expr></argument>, <argument pos:start="155:65" pos:end="155:65"><expr pos:start="155:65" pos:end="155:65"><name pos:start="155:65" pos:end="155:65">i</name></expr></argument>, <argument pos:start="155:68" pos:end="155:81"><expr pos:start="155:68" pos:end="155:81"><name pos:start="155:68" pos:end="155:81"><name pos:start="155:68" pos:end="155:68">s</name><operator pos:start="155:69" pos:end="155:70">-&gt;</operator><name pos:start="155:71" pos:end="155:78">dc_index</name><index pos:start="155:79" pos:end="155:81">[<expr pos:start="155:80" pos:end="155:80"><name pos:start="155:80" pos:end="155:80">i</name></expr>]</index></name></expr></argument>, <argument pos:start="155:84" pos:end="155:121"><expr pos:start="155:84" pos:end="155:121"><name pos:start="155:84" pos:end="155:121"><name pos:start="155:84" pos:end="155:84">s</name><operator pos:start="155:85" pos:end="155:86">-&gt;</operator><name pos:start="155:87" pos:end="155:100">quant_matrixes</name><index pos:start="155:101" pos:end="155:121">[ <expr pos:start="155:103" pos:end="155:119"><name pos:start="155:103" pos:end="155:119"><name pos:start="155:103" pos:end="155:103">s</name><operator pos:start="155:104" pos:end="155:105">-&gt;</operator><name pos:start="155:106" pos:end="155:116">quant_index</name><index pos:start="155:117" pos:end="155:119">[<expr pos:start="155:118" pos:end="155:118"><name pos:start="155:118" pos:end="155:118">c</name></expr>]</index></name></expr> ]</index></name></expr></argument>, <argument pos:start="155:124" pos:end="155:125"><expr pos:start="155:124" pos:end="155:125"><name pos:start="155:124" pos:end="155:125">Al</name></expr></argument>)</argument_list></call> <operator pos:start="155:128" pos:end="155:128">&lt;</operator> <literal type="number" pos:start="155:130" pos:end="155:130">0</literal></expr>)</condition> <block pos:start="155:133" pos:end="161:25">{<block_content pos:start="157:29" pos:end="159:38">

                            <expr_stmt pos:start="157:29" pos:end="157:92"><expr pos:start="157:29" pos:end="157:91"><call pos:start="157:29" pos:end="157:91"><name pos:start="157:29" pos:end="157:34">av_log</name><argument_list pos:start="157:35" pos:end="157:91">(<argument pos:start="157:36" pos:end="157:43"><expr pos:start="157:36" pos:end="157:43"><name pos:start="157:36" pos:end="157:43"><name pos:start="157:36" pos:end="157:36">s</name><operator pos:start="157:37" pos:end="157:38">-&gt;</operator><name pos:start="157:39" pos:end="157:43">avctx</name></name></expr></argument>, <argument pos:start="157:46" pos:end="157:57"><expr pos:start="157:46" pos:end="157:57"><name pos:start="157:46" pos:end="157:57">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="157:60" pos:end="157:78"><expr pos:start="157:60" pos:end="157:78"><literal type="string" pos:start="157:60" pos:end="157:78">"error y=%d x=%d\n"</literal></expr></argument>, <argument pos:start="157:81" pos:end="157:84"><expr pos:start="157:81" pos:end="157:84"><name pos:start="157:81" pos:end="157:84">mb_y</name></expr></argument>, <argument pos:start="157:87" pos:end="157:90"><expr pos:start="157:87" pos:end="157:90"><name pos:start="157:87" pos:end="157:90">mb_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="159:29" pos:end="159:38">return <expr pos:start="159:36" pos:end="159:37"><operator pos:start="159:36" pos:end="159:36">-</operator><literal type="number" pos:start="159:37" pos:end="159:37">1</literal></expr>;</return>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

<comment type="line" pos:start="165:1" pos:end="165:90">//                    av_log(s-&gt;avctx, AV_LOG_DEBUG, "mb: %d %d processed\n", mb_y, mb_x);</comment>

<comment type="line" pos:start="167:1" pos:end="167:137">//av_log(NULL, AV_LOG_DEBUG, "%d %d %d %d %d %d %d %d \n", mb_x, mb_y, x, y, c, s-&gt;bottom_field, (v * mb_y + y) * 8, (h * mb_x + x) * 8);</comment>

                    <if_stmt pos:start="169:21" pos:end="175:21"><if pos:start="169:21" pos:end="175:21">if <condition pos:start="169:24" pos:end="169:33">(<expr pos:start="169:25" pos:end="169:32"><operator pos:start="169:25" pos:end="169:26">++</operator><name pos:start="169:27" pos:end="169:27">x</name> <operator pos:start="169:29" pos:end="169:30">==</operator> <name pos:start="169:32" pos:end="169:32">h</name></expr>)</condition> <block pos:start="169:35" pos:end="175:21">{<block_content pos:start="171:25" pos:end="173:28">

                        <expr_stmt pos:start="171:25" pos:end="171:30"><expr pos:start="171:25" pos:end="171:29"><name pos:start="171:25" pos:end="171:25">x</name> <operator pos:start="171:27" pos:end="171:27">=</operator> <literal type="number" pos:start="171:29" pos:end="171:29">0</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="173:25" pos:end="173:28"><expr pos:start="173:25" pos:end="173:27"><name pos:start="173:25" pos:end="173:25">y</name><operator pos:start="173:26" pos:end="173:27">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>



            <if_stmt pos:start="183:13" pos:end="199:13"><if pos:start="183:13" pos:end="199:13">if <condition pos:start="183:16" pos:end="183:68">(<expr pos:start="183:17" pos:end="183:67"><name pos:start="183:17" pos:end="183:35"><name pos:start="183:17" pos:end="183:17">s</name><operator pos:start="183:18" pos:end="183:19">-&gt;</operator><name pos:start="183:20" pos:end="183:35">restart_interval</name></name> <operator pos:start="183:37" pos:end="183:38">&amp;&amp;</operator> <call pos:start="183:40" pos:end="183:59"><name pos:start="183:40" pos:end="183:48">show_bits</name><argument_list pos:start="183:49" pos:end="183:59">(<argument pos:start="183:50" pos:end="183:55"><expr pos:start="183:50" pos:end="183:55"><operator pos:start="183:50" pos:end="183:50">&amp;</operator><name pos:start="183:51" pos:end="183:55"><name pos:start="183:51" pos:end="183:51">s</name><operator pos:start="183:52" pos:end="183:53">-&gt;</operator><name pos:start="183:54" pos:end="183:55">gb</name></name></expr></argument>, <argument pos:start="183:58" pos:end="183:58"><expr pos:start="183:58" pos:end="183:58"><literal type="number" pos:start="183:58" pos:end="183:58">8</literal></expr></argument>)</argument_list></call> <operator pos:start="183:61" pos:end="183:62">==</operator> <literal type="number" pos:start="183:64" pos:end="183:67">0xFF</literal></expr>)</condition><block pos:start="183:69" pos:end="199:13">{<block_content pos:start="185:17" pos:end="197:41"> <comment type="block" pos:start="183:71" pos:end="183:85">/* skip RSTn */</comment>

                <expr_stmt pos:start="185:17" pos:end="185:35"><expr pos:start="185:17" pos:end="185:34"><operator pos:start="185:17" pos:end="185:18">--</operator><name pos:start="185:19" pos:end="185:34"><name pos:start="185:19" pos:end="185:19">s</name><operator pos:start="185:20" pos:end="185:21">-&gt;</operator><name pos:start="185:22" pos:end="185:34">restart_count</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="187:17" pos:end="187:39"><expr pos:start="187:17" pos:end="187:38"><call pos:start="187:17" pos:end="187:38"><name pos:start="187:17" pos:end="187:30">align_get_bits</name><argument_list pos:start="187:31" pos:end="187:38">(<argument pos:start="187:32" pos:end="187:37"><expr pos:start="187:32" pos:end="187:37"><operator pos:start="187:32" pos:end="187:32">&amp;</operator><name pos:start="187:33" pos:end="187:37"><name pos:start="187:33" pos:end="187:33">s</name><operator pos:start="187:34" pos:end="187:35">-&gt;</operator><name pos:start="187:36" pos:end="187:37">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <while pos:start="189:17" pos:end="191:41">while<condition pos:start="189:22" pos:end="189:51">(<expr pos:start="189:23" pos:end="189:50"><call pos:start="189:23" pos:end="189:42"><name pos:start="189:23" pos:end="189:31">show_bits</name><argument_list pos:start="189:32" pos:end="189:42">(<argument pos:start="189:33" pos:end="189:38"><expr pos:start="189:33" pos:end="189:38"><operator pos:start="189:33" pos:end="189:33">&amp;</operator><name pos:start="189:34" pos:end="189:38"><name pos:start="189:34" pos:end="189:34">s</name><operator pos:start="189:35" pos:end="189:36">-&gt;</operator><name pos:start="189:37" pos:end="189:38">gb</name></name></expr></argument>, <argument pos:start="189:41" pos:end="189:41"><expr pos:start="189:41" pos:end="189:41"><literal type="number" pos:start="189:41" pos:end="189:41">8</literal></expr></argument>)</argument_list></call> <operator pos:start="189:44" pos:end="189:45">==</operator> <literal type="number" pos:start="189:47" pos:end="189:50">0xFF</literal></expr>)</condition><block type="pseudo" pos:start="191:21" pos:end="191:41"><block_content pos:start="191:21" pos:end="191:41">

                    <expr_stmt pos:start="191:21" pos:end="191:41"><expr pos:start="191:21" pos:end="191:40"><call pos:start="191:21" pos:end="191:40"><name pos:start="191:21" pos:end="191:29">skip_bits</name><argument_list pos:start="191:30" pos:end="191:40">(<argument pos:start="191:31" pos:end="191:36"><expr pos:start="191:31" pos:end="191:36"><operator pos:start="191:31" pos:end="191:31">&amp;</operator><name pos:start="191:32" pos:end="191:36"><name pos:start="191:32" pos:end="191:32">s</name><operator pos:start="191:33" pos:end="191:34">-&gt;</operator><name pos:start="191:35" pos:end="191:36">gb</name></name></expr></argument>, <argument pos:start="191:39" pos:end="191:39"><expr pos:start="191:39" pos:end="191:39"><literal type="number" pos:start="191:39" pos:end="191:39">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

                <expr_stmt pos:start="193:17" pos:end="193:37"><expr pos:start="193:17" pos:end="193:36"><call pos:start="193:17" pos:end="193:36"><name pos:start="193:17" pos:end="193:25">skip_bits</name><argument_list pos:start="193:26" pos:end="193:36">(<argument pos:start="193:27" pos:end="193:32"><expr pos:start="193:27" pos:end="193:32"><operator pos:start="193:27" pos:end="193:27">&amp;</operator><name pos:start="193:28" pos:end="193:32"><name pos:start="193:28" pos:end="193:28">s</name><operator pos:start="193:29" pos:end="193:30">-&gt;</operator><name pos:start="193:31" pos:end="193:32">gb</name></name></expr></argument>, <argument pos:start="193:35" pos:end="193:35"><expr pos:start="193:35" pos:end="193:35"><literal type="number" pos:start="193:35" pos:end="193:35">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="195:17" pos:end="197:41">for <control pos:start="195:21" pos:end="195:47">(<init pos:start="195:22" pos:end="195:25"><expr pos:start="195:22" pos:end="195:24"><name pos:start="195:22" pos:end="195:22">i</name><operator pos:start="195:23" pos:end="195:23">=</operator><literal type="number" pos:start="195:24" pos:end="195:24">0</literal></expr>;</init> <condition pos:start="195:27" pos:end="195:42"><expr pos:start="195:27" pos:end="195:41"><name pos:start="195:27" pos:end="195:27">i</name><operator pos:start="195:28" pos:end="195:28">&lt;</operator><name pos:start="195:29" pos:end="195:41">nb_components</name></expr>;</condition> <incr pos:start="195:44" pos:end="195:46"><expr pos:start="195:44" pos:end="195:46"><name pos:start="195:44" pos:end="195:44">i</name><operator pos:start="195:45" pos:end="195:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="197:21" pos:end="197:41"><block_content pos:start="197:21" pos:end="197:41"> <comment type="block" pos:start="195:49" pos:end="195:62">/* reset dc */</comment>

                    <expr_stmt pos:start="197:21" pos:end="197:41"><expr pos:start="197:21" pos:end="197:40"><name pos:start="197:21" pos:end="197:33"><name pos:start="197:21" pos:end="197:21">s</name><operator pos:start="197:22" pos:end="197:23">-&gt;</operator><name pos:start="197:24" pos:end="197:30">last_dc</name><index pos:start="197:31" pos:end="197:33">[<expr pos:start="197:32" pos:end="197:32"><name pos:start="197:32" pos:end="197:32">i</name></expr>]</index></name> <operator pos:start="197:35" pos:end="197:35">=</operator> <literal type="number" pos:start="197:37" pos:end="197:40">1024</literal></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <return pos:start="205:5" pos:end="205:13">return <expr pos:start="205:12" pos:end="205:12"><literal type="number" pos:start="205:12" pos:end="205:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
