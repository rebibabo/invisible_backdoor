<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10704.c" pos:tabs="8"><function pos:start="1:1" pos:end="25:1"><type pos:start="1:1" pos:end="1:18"><name pos:start="1:1" pos:end="1:16">BlockDriverState</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:32">bdrv_find_node</name><parameter_list pos:start="1:33" pos:end="1:55">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:45"><specifier pos:start="1:34" pos:end="1:38">const</specifier> <name pos:start="1:40" pos:end="1:43">char</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:54">node_name</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="25:1">{<block_content pos:start="5:5" pos:end="23:16">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:22"><expr pos:start="9:5" pos:end="9:21"><call pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:10">assert</name><argument_list pos:start="9:11" pos:end="9:21">(<argument pos:start="9:12" pos:end="9:20"><expr pos:start="9:12" pos:end="9:20"><name pos:start="9:12" pos:end="9:20">node_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="13:5" pos:end="13:53"><name pos:start="13:5" pos:end="13:18">QTAILQ_FOREACH</name><argument_list pos:start="13:19" pos:end="13:53">(<argument pos:start="13:20" pos:end="13:21">bs</argument>, <argument pos:start="13:24" pos:end="13:41">&amp;graph_bdrv_states</argument>, <argument pos:start="13:44" pos:end="13:52">node_list</argument>)</argument_list></macro> <block pos:start="13:55" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:9">

        <if_stmt pos:start="15:9" pos:end="19:9"><if pos:start="15:9" pos:end="19:9">if <condition pos:start="15:12" pos:end="15:46">(<expr pos:start="15:13" pos:end="15:45"><operator pos:start="15:13" pos:end="15:13">!</operator><call pos:start="15:14" pos:end="15:45"><name pos:start="15:14" pos:end="15:19">strcmp</name><argument_list pos:start="15:20" pos:end="15:45">(<argument pos:start="15:21" pos:end="15:29"><expr pos:start="15:21" pos:end="15:29"><name pos:start="15:21" pos:end="15:29">node_name</name></expr></argument>, <argument pos:start="15:32" pos:end="15:44"><expr pos:start="15:32" pos:end="15:44"><name pos:start="15:32" pos:end="15:44"><name pos:start="15:32" pos:end="15:33">bs</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:44">node_name</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:48" pos:end="19:9">{<block_content pos:start="17:13" pos:end="17:22">

            <return pos:start="17:13" pos:end="17:22">return <expr pos:start="17:20" pos:end="17:21"><name pos:start="17:20" pos:end="17:21">bs</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <return pos:start="23:5" pos:end="23:16">return <expr pos:start="23:12" pos:end="23:15"><name pos:start="23:12" pos:end="23:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
