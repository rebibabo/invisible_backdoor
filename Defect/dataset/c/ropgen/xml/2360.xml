<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2360.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:17">ExitStatus</name></type> <name pos:start="1:19" pos:end="1:26">gen_mtpr</name><parameter_list pos:start="1:27" pos:end="1:65">(<parameter pos:start="1:28" pos:end="1:44"><decl pos:start="1:28" pos:end="1:44"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:39">DisasContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">ctx</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:53"><decl pos:start="1:47" pos:end="1:53"><type pos:start="1:47" pos:end="1:53"><name pos:start="1:47" pos:end="1:50">TCGv</name></type> <name pos:start="1:52" pos:end="1:53">vb</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:64"><decl pos:start="1:56" pos:end="1:64"><type pos:start="1:56" pos:end="1:64"><name pos:start="1:56" pos:end="1:58">int</name></type> <name pos:start="1:60" pos:end="1:64">regno</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="141:1">{<block_content pos:start="5:5" pos:end="139:19">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">TCGv</name></type> <name pos:start="5:10" pos:end="5:12">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">data</name></decl>;</decl_stmt>



    <switch pos:start="11:5" pos:end="135:5">switch <condition pos:start="11:12" pos:end="11:18">(<expr pos:start="11:13" pos:end="11:17"><name pos:start="11:13" pos:end="11:17">regno</name></expr>)</condition> <block pos:start="11:20" pos:end="135:5">{<block_content pos:start="13:5" pos:end="133:14">

    <case pos:start="13:5" pos:end="13:13">case <expr pos:start="13:10" pos:end="13:12"><literal type="number" pos:start="13:10" pos:end="13:12">255</literal></expr>:</case>

        <comment type="block" pos:start="15:9" pos:end="15:18">/* TBIA */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:33"><expr pos:start="17:9" pos:end="17:32"><call pos:start="17:9" pos:end="17:32"><name pos:start="17:9" pos:end="17:23">gen_helper_tbia</name><argument_list pos:start="17:24" pos:end="17:32">(<argument pos:start="17:25" pos:end="17:31"><expr pos:start="17:25" pos:end="17:31"><name pos:start="17:25" pos:end="17:31">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>



    <case pos:start="23:5" pos:end="23:13">case <expr pos:start="23:10" pos:end="23:12"><literal type="number" pos:start="23:10" pos:end="23:12">254</literal></expr>:</case>

        <comment type="block" pos:start="25:9" pos:end="25:18">/* TBIS */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:37"><expr pos:start="27:9" pos:end="27:36"><call pos:start="27:9" pos:end="27:36"><name pos:start="27:9" pos:end="27:23">gen_helper_tbis</name><argument_list pos:start="27:24" pos:end="27:36">(<argument pos:start="27:25" pos:end="27:31"><expr pos:start="27:25" pos:end="27:31"><name pos:start="27:25" pos:end="27:31">cpu_env</name></expr></argument>, <argument pos:start="27:34" pos:end="27:35"><expr pos:start="27:34" pos:end="27:35"><name pos:start="27:34" pos:end="27:35">vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>



    <case pos:start="33:5" pos:end="33:13">case <expr pos:start="33:10" pos:end="33:12"><literal type="number" pos:start="33:10" pos:end="33:12">253</literal></expr>:</case>

        <comment type="block" pos:start="35:9" pos:end="35:18">/* WAIT */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:31"><expr pos:start="37:9" pos:end="37:30"><name pos:start="37:9" pos:end="37:11">tmp</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:30"><name pos:start="37:15" pos:end="37:27">tcg_const_i64</name><argument_list pos:start="37:28" pos:end="37:30">(<argument pos:start="37:29" pos:end="37:29"><expr pos:start="37:29" pos:end="37:29"><literal type="number" pos:start="37:29" pos:end="37:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="41:67"><expr pos:start="39:9" pos:end="41:66"><call pos:start="39:9" pos:end="41:66"><name pos:start="39:9" pos:end="39:24">tcg_gen_st32_i64</name><argument_list pos:start="39:25" pos:end="41:66">(<argument pos:start="39:26" pos:end="39:28"><expr pos:start="39:26" pos:end="39:28"><name pos:start="39:26" pos:end="39:28">tmp</name></expr></argument>, <argument pos:start="39:31" pos:end="39:37"><expr pos:start="39:31" pos:end="39:37"><name pos:start="39:31" pos:end="39:37">cpu_env</name></expr></argument>, <argument pos:start="39:40" pos:end="41:65"><expr pos:start="39:40" pos:end="41:65"><operator pos:start="39:40" pos:end="39:40">-</operator><call pos:start="39:41" pos:end="39:63"><name pos:start="39:41" pos:end="39:48">offsetof</name><argument_list pos:start="39:49" pos:end="39:63">(<argument pos:start="39:50" pos:end="39:57"><expr pos:start="39:50" pos:end="39:57"><name pos:start="39:50" pos:end="39:57">AlphaCPU</name></expr></argument>, <argument pos:start="39:60" pos:end="39:62"><expr pos:start="39:60" pos:end="39:62"><name pos:start="39:60" pos:end="39:62">env</name></expr></argument>)</argument_list></call> <operator pos:start="39:65" pos:end="39:65">+</operator>

                                       <call pos:start="41:40" pos:end="41:65"><name pos:start="41:40" pos:end="41:47">offsetof</name><argument_list pos:start="41:48" pos:end="41:65">(<argument pos:start="41:49" pos:end="41:56"><expr pos:start="41:49" pos:end="41:56"><name pos:start="41:49" pos:end="41:56">CPUState</name></expr></argument>, <argument pos:start="41:59" pos:end="41:64"><expr pos:start="41:59" pos:end="41:64"><name pos:start="41:59" pos:end="41:64">halted</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:45">return <expr pos:start="43:16" pos:end="43:44"><call pos:start="43:16" pos:end="43:44"><name pos:start="43:16" pos:end="43:23">gen_excp</name><argument_list pos:start="43:24" pos:end="43:44">(<argument pos:start="43:25" pos:end="43:27"><expr pos:start="43:25" pos:end="43:27"><name pos:start="43:25" pos:end="43:27">ctx</name></expr></argument>, <argument pos:start="43:30" pos:end="43:40"><expr pos:start="43:30" pos:end="43:40"><name pos:start="43:30" pos:end="43:40">EXCP_HALTED</name></expr></argument>, <argument pos:start="43:43" pos:end="43:43"><expr pos:start="43:43" pos:end="43:43"><literal type="number" pos:start="43:43" pos:end="43:43">0</literal></expr></argument>)</argument_list></call></expr>;</return>



    <case pos:start="47:5" pos:end="47:13">case <expr pos:start="47:10" pos:end="47:12"><literal type="number" pos:start="47:10" pos:end="47:12">252</literal></expr>:</case>

        <comment type="block" pos:start="49:9" pos:end="49:18">/* HALT */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:28"><expr pos:start="51:9" pos:end="51:27"><call pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:23">gen_helper_halt</name><argument_list pos:start="51:24" pos:end="51:27">(<argument pos:start="51:25" pos:end="51:26"><expr pos:start="51:25" pos:end="51:26"><name pos:start="51:25" pos:end="51:26">vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:29">return <expr pos:start="53:16" pos:end="53:28"><name pos:start="53:16" pos:end="53:28">EXIT_PC_STALE</name></expr>;</return>



    <case pos:start="57:5" pos:end="57:13">case <expr pos:start="57:10" pos:end="57:12"><literal type="number" pos:start="57:10" pos:end="57:12">251</literal></expr>:</case>

        <comment type="block" pos:start="59:9" pos:end="59:19">/* ALARM */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:42"><expr pos:start="61:9" pos:end="61:41"><call pos:start="61:9" pos:end="61:41"><name pos:start="61:9" pos:end="61:28">gen_helper_set_alarm</name><argument_list pos:start="61:29" pos:end="61:41">(<argument pos:start="61:30" pos:end="61:36"><expr pos:start="61:30" pos:end="61:36"><name pos:start="61:30" pos:end="61:36">cpu_env</name></expr></argument>, <argument pos:start="61:39" pos:end="61:40"><expr pos:start="61:39" pos:end="61:40"><name pos:start="61:39" pos:end="61:40">vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>



    <case pos:start="67:5" pos:end="67:11">case <expr pos:start="67:10" pos:end="67:10"><literal type="number" pos:start="67:10" pos:end="67:10">7</literal></expr>:</case>

        <comment type="block" pos:start="69:9" pos:end="69:19">/* PALBR */</comment>

        <expr_stmt pos:start="71:9" pos:end="71:68"><expr pos:start="71:9" pos:end="71:67"><call pos:start="71:9" pos:end="71:67"><name pos:start="71:9" pos:end="71:22">tcg_gen_st_i64</name><argument_list pos:start="71:23" pos:end="71:67">(<argument pos:start="71:24" pos:end="71:25"><expr pos:start="71:24" pos:end="71:25"><name pos:start="71:24" pos:end="71:25">vb</name></expr></argument>, <argument pos:start="71:28" pos:end="71:34"><expr pos:start="71:28" pos:end="71:34"><name pos:start="71:28" pos:end="71:34">cpu_env</name></expr></argument>, <argument pos:start="71:37" pos:end="71:66"><expr pos:start="71:37" pos:end="71:66"><call pos:start="71:37" pos:end="71:66"><name pos:start="71:37" pos:end="71:44">offsetof</name><argument_list pos:start="71:45" pos:end="71:66">(<argument pos:start="71:46" pos:end="71:58"><expr pos:start="71:46" pos:end="71:58"><name pos:start="71:46" pos:end="71:58">CPUAlphaState</name></expr></argument>, <argument pos:start="71:61" pos:end="71:65"><expr pos:start="71:61" pos:end="71:65"><name pos:start="71:61" pos:end="71:65">palbr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="73:9" pos:end="77:67">/* Changing the PAL base register implies un-chaining all of the TBs

           that ended with a CALL_PAL.  Since the base register usually only

           changes during boot, flushing everything works well.  */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:37"><expr pos:start="79:9" pos:end="79:36"><call pos:start="79:9" pos:end="79:36"><name pos:start="79:9" pos:end="79:27">gen_helper_tb_flush</name><argument_list pos:start="79:28" pos:end="79:36">(<argument pos:start="79:29" pos:end="79:35"><expr pos:start="79:29" pos:end="79:35"><name pos:start="79:29" pos:end="79:35">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:29">return <expr pos:start="81:16" pos:end="81:28"><name pos:start="81:16" pos:end="81:28">EXIT_PC_STALE</name></expr>;</return>



    <case pos:start="85:5" pos:end="85:19">case <expr pos:start="85:10" pos:end="85:18"><literal type="number" pos:start="85:10" pos:end="85:11">32</literal> <operator pos:start="85:13" pos:end="85:15">...</operator> <literal type="number" pos:start="85:17" pos:end="85:18">39</literal></expr>:</case>

        <comment type="block" pos:start="87:9" pos:end="87:60">/* Accessing the "non-shadow" general registers.  */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:50"><expr pos:start="89:9" pos:end="89:49"><name pos:start="89:9" pos:end="89:13">regno</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <ternary pos:start="89:17" pos:end="89:49"><condition pos:start="89:17" pos:end="89:29"><expr pos:start="89:17" pos:end="89:27"><name pos:start="89:17" pos:end="89:21">regno</name> <operator pos:start="89:23" pos:end="89:24">==</operator> <literal type="number" pos:start="89:26" pos:end="89:27">39</literal></expr> ?</condition><then pos:start="89:31" pos:end="89:32"> <expr pos:start="89:31" pos:end="89:32"><literal type="number" pos:start="89:31" pos:end="89:32">25</literal></expr> </then><else pos:start="89:34" pos:end="89:49">: <expr pos:start="89:36" pos:end="89:49"><name pos:start="89:36" pos:end="89:40">regno</name> <operator pos:start="89:42" pos:end="89:42">-</operator> <literal type="number" pos:start="89:44" pos:end="89:47">32</literal> <operator pos:start="89:47" pos:end="89:47">+</operator> <literal type="number" pos:start="89:49" pos:end="89:49">8</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:47"><expr pos:start="91:9" pos:end="91:46"><call pos:start="91:9" pos:end="91:46"><name pos:start="91:9" pos:end="91:23">tcg_gen_mov_i64</name><argument_list pos:start="91:24" pos:end="91:46">(<argument pos:start="91:25" pos:end="91:41"><expr pos:start="91:25" pos:end="91:41"><name pos:start="91:25" pos:end="91:41"><name pos:start="91:25" pos:end="91:34">cpu_std_ir</name><index pos:start="91:35" pos:end="91:41">[<expr pos:start="91:36" pos:end="91:40"><name pos:start="91:36" pos:end="91:40">regno</name></expr>]</index></name></expr></argument>, <argument pos:start="91:44" pos:end="91:45"><expr pos:start="91:44" pos:end="91:45"><name pos:start="91:44" pos:end="91:45">vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>



    <case pos:start="97:5" pos:end="97:11">case <expr pos:start="97:10" pos:end="97:10"><literal type="number" pos:start="97:10" pos:end="97:10">0</literal></expr>:</case> <comment type="block" pos:start="97:13" pos:end="97:20">/* PS */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:44"><expr pos:start="99:9" pos:end="99:43"><call pos:start="99:9" pos:end="99:43"><name pos:start="99:9" pos:end="99:20">st_flag_byte</name><argument_list pos:start="99:21" pos:end="99:43">(<argument pos:start="99:22" pos:end="99:23"><expr pos:start="99:22" pos:end="99:23"><name pos:start="99:22" pos:end="99:23">vb</name></expr></argument>, <argument pos:start="99:26" pos:end="99:42"><expr pos:start="99:26" pos:end="99:42"><name pos:start="99:26" pos:end="99:42">ENV_FLAG_PS_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:11">case <expr pos:start="103:10" pos:end="103:10"><literal type="number" pos:start="103:10" pos:end="103:10">1</literal></expr>:</case> <comment type="block" pos:start="103:13" pos:end="103:21">/* FEN */</comment>

        <expr_stmt pos:start="105:9" pos:end="105:45"><expr pos:start="105:9" pos:end="105:44"><call pos:start="105:9" pos:end="105:44"><name pos:start="105:9" pos:end="105:20">st_flag_byte</name><argument_list pos:start="105:21" pos:end="105:44">(<argument pos:start="105:22" pos:end="105:23"><expr pos:start="105:22" pos:end="105:23"><name pos:start="105:22" pos:end="105:23">vb</name></expr></argument>, <argument pos:start="105:26" pos:end="105:43"><expr pos:start="105:26" pos:end="105:43"><name pos:start="105:26" pos:end="105:43">ENV_FLAG_FEN_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="107:9" pos:end="107:14">break;</break>



    <default pos:start="111:5" pos:end="111:12">default:</default>

        <comment type="block" pos:start="113:9" pos:end="115:43">/* The basic registers are data only, and unknown registers

           are read-zero, write-ignore.  */</comment>

        <expr_stmt pos:start="117:9" pos:end="117:34"><expr pos:start="117:9" pos:end="117:33"><name pos:start="117:9" pos:end="117:12">data</name> <operator pos:start="117:14" pos:end="117:14">=</operator> <call pos:start="117:16" pos:end="117:33"><name pos:start="117:16" pos:end="117:26">cpu_pr_data</name><argument_list pos:start="117:27" pos:end="117:33">(<argument pos:start="117:28" pos:end="117:32"><expr pos:start="117:28" pos:end="117:32"><name pos:start="117:28" pos:end="117:32">regno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="119:9" pos:end="131:9"><if pos:start="119:9" pos:end="131:9">if <condition pos:start="119:12" pos:end="119:22">(<expr pos:start="119:13" pos:end="119:21"><name pos:start="119:13" pos:end="119:16">data</name> <operator pos:start="119:18" pos:end="119:19">!=</operator> <literal type="number" pos:start="119:21" pos:end="119:21">0</literal></expr>)</condition> <block pos:start="119:24" pos:end="131:9">{<block_content pos:start="121:13" pos:end="129:13">

            <if_stmt pos:start="121:13" pos:end="129:13"><if pos:start="121:13" pos:end="125:13">if <condition pos:start="121:16" pos:end="121:31">(<expr pos:start="121:17" pos:end="121:30"><name pos:start="121:17" pos:end="121:20">data</name> <operator pos:start="121:22" pos:end="121:22">&amp;</operator> <name pos:start="121:24" pos:end="121:30">PR_LONG</name></expr>)</condition> <block pos:start="121:33" pos:end="125:13">{<block_content pos:start="123:17" pos:end="123:63">

                <expr_stmt pos:start="123:17" pos:end="123:63"><expr pos:start="123:17" pos:end="123:62"><call pos:start="123:17" pos:end="123:62"><name pos:start="123:17" pos:end="123:32">tcg_gen_st32_i64</name><argument_list pos:start="123:33" pos:end="123:62">(<argument pos:start="123:34" pos:end="123:35"><expr pos:start="123:34" pos:end="123:35"><name pos:start="123:34" pos:end="123:35">vb</name></expr></argument>, <argument pos:start="123:38" pos:end="123:44"><expr pos:start="123:38" pos:end="123:44"><name pos:start="123:38" pos:end="123:44">cpu_env</name></expr></argument>, <argument pos:start="123:47" pos:end="123:61"><expr pos:start="123:47" pos:end="123:61"><name pos:start="123:47" pos:end="123:50">data</name> <operator pos:start="123:52" pos:end="123:52">&amp;</operator> <operator pos:start="123:54" pos:end="123:54">~</operator><name pos:start="123:55" pos:end="123:61">PR_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="125:15" pos:end="129:13">else <block pos:start="125:20" pos:end="129:13">{<block_content pos:start="127:17" pos:end="127:50">

                <expr_stmt pos:start="127:17" pos:end="127:50"><expr pos:start="127:17" pos:end="127:49"><call pos:start="127:17" pos:end="127:49"><name pos:start="127:17" pos:end="127:30">tcg_gen_st_i64</name><argument_list pos:start="127:31" pos:end="127:49">(<argument pos:start="127:32" pos:end="127:33"><expr pos:start="127:32" pos:end="127:33"><name pos:start="127:32" pos:end="127:33">vb</name></expr></argument>, <argument pos:start="127:36" pos:end="127:42"><expr pos:start="127:36" pos:end="127:42"><name pos:start="127:36" pos:end="127:42">cpu_env</name></expr></argument>, <argument pos:start="127:45" pos:end="127:48"><expr pos:start="127:45" pos:end="127:48"><name pos:start="127:45" pos:end="127:48">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    </block_content>}</block></switch>



    <return pos:start="139:5" pos:end="139:19">return <expr pos:start="139:12" pos:end="139:18"><name pos:start="139:12" pos:end="139:18">NO_EXIT</name></expr>;</return>

</block_content>}</block></function>
</unit>
