<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14075.c" pos:tabs="8"><function pos:start="1:1" pos:end="229:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:8">main</name><parameter_list pos:start="1:9" pos:end="1:32">(<parameter pos:start="1:10" pos:end="1:17"><decl pos:start="1:10" pos:end="1:17"><type pos:start="1:10" pos:end="1:17"><name pos:start="1:10" pos:end="1:12">int</name></type> <name pos:start="1:14" pos:end="1:17">argc</name></decl></parameter>, <parameter pos:start="1:20" pos:end="1:31"><decl pos:start="1:20" pos:end="1:31"><type pos:start="1:20" pos:end="1:29"><name pos:start="1:20" pos:end="1:23">char</name> <modifier pos:start="1:25" pos:end="1:25">*</modifier></type><name pos:start="1:26" pos:end="1:31"><name pos:start="1:26" pos:end="1:29">argv</name><index pos:start="1:30" pos:end="1:31">[]</index></name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="229:1">{<block_content pos:start="5:5" pos:end="227:13">

    <decl_stmt pos:start="5:5" pos:end="5:57"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:13">fd_in</name></decl>, <decl pos:start="5:16" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:16" pos:end="5:21">fd_out</name></decl>, <decl pos:start="5:24" pos:end="5:31"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:24" pos:end="5:31">comp_len</name></decl>, <decl pos:start="5:34" pos:end="5:43"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:34" pos:end="5:43">uncomp_len</name></decl>, <decl pos:start="5:46" pos:end="5:46"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:46" pos:end="5:46">i</name></decl>, <decl pos:start="5:49" pos:end="5:56"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:49" pos:end="5:56">last_out</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:21"><name pos:start="7:10" pos:end="7:15">buf_in</name><index pos:start="7:16" pos:end="7:21">[<expr pos:start="7:17" pos:end="7:20"><literal type="number" pos:start="7:17" pos:end="7:20">1024</literal></expr>]</index></name></decl>, <decl pos:start="7:24" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:24" pos:end="7:37"><name pos:start="7:24" pos:end="7:30">buf_out</name><index pos:start="7:31" pos:end="7:37">[<expr pos:start="7:32" pos:end="7:36"><literal type="number" pos:start="7:32" pos:end="7:36">65536</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">z_stream</name></type> <name pos:start="9:14" pos:end="9:20">zstream</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:15">stat</name></name></type> <name pos:start="11:17" pos:end="11:23">statbuf</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:17">(<expr pos:start="15:9" pos:end="15:16"><name pos:start="15:9" pos:end="15:12">argc</name> <operator pos:start="15:14" pos:end="15:14">&lt;</operator> <literal type="number" pos:start="15:16" pos:end="15:16">3</literal></expr>)</condition> <block pos:start="15:19" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:17">

        <expr_stmt pos:start="17:9" pos:end="17:66"><expr pos:start="17:9" pos:end="17:65"><call pos:start="17:9" pos:end="17:65"><name pos:start="17:9" pos:end="17:14">printf</name><argument_list pos:start="17:15" pos:end="17:65">(<argument pos:start="17:16" pos:end="17:55"><expr pos:start="17:16" pos:end="17:55"><literal type="string" pos:start="17:16" pos:end="17:55">"Usage: %s &lt;infile.swf&gt; &lt;outfile.swf&gt;\n"</literal></expr></argument>, <argument pos:start="17:58" pos:end="17:64"><expr pos:start="17:58" pos:end="17:64"><name pos:start="17:58" pos:end="17:64"><name pos:start="17:58" pos:end="17:61">argv</name><index pos:start="17:62" pos:end="17:64">[<expr pos:start="17:63" pos:end="17:63"><literal type="number" pos:start="17:63" pos:end="17:63">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:17">return <expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:36"><expr pos:start="25:5" pos:end="25:35"><name pos:start="25:5" pos:end="25:9">fd_in</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <call pos:start="25:13" pos:end="25:35"><name pos:start="25:13" pos:end="25:16">open</name><argument_list pos:start="25:17" pos:end="25:35">(<argument pos:start="25:18" pos:end="25:24"><expr pos:start="25:18" pos:end="25:24"><name pos:start="25:18" pos:end="25:24"><name pos:start="25:18" pos:end="25:21">argv</name><index pos:start="25:22" pos:end="25:24">[<expr pos:start="25:23" pos:end="25:23"><literal type="number" pos:start="25:23" pos:end="25:23">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="25:27" pos:end="25:34"><expr pos:start="25:27" pos:end="25:34"><name pos:start="25:27" pos:end="25:34">O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:18">(<expr pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:13">fd_in</name> <operator pos:start="27:15" pos:end="27:15">&lt;</operator> <literal type="number" pos:start="27:17" pos:end="27:17">0</literal></expr>)</condition> <block pos:start="27:20" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:17">

        <expr_stmt pos:start="29:9" pos:end="29:43"><expr pos:start="29:9" pos:end="29:42"><call pos:start="29:9" pos:end="29:42"><name pos:start="29:9" pos:end="29:14">perror</name><argument_list pos:start="29:15" pos:end="29:42">(<argument pos:start="29:16" pos:end="29:41"><expr pos:start="29:16" pos:end="29:41"><literal type="string" pos:start="29:16" pos:end="29:41">"Error opening input file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:54"><expr pos:start="37:5" pos:end="37:53"><name pos:start="37:5" pos:end="37:10">fd_out</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:53"><name pos:start="37:14" pos:end="37:17">open</name><argument_list pos:start="37:18" pos:end="37:53">(<argument pos:start="37:19" pos:end="37:25"><expr pos:start="37:19" pos:end="37:25"><name pos:start="37:19" pos:end="37:25"><name pos:start="37:19" pos:end="37:22">argv</name><index pos:start="37:23" pos:end="37:25">[<expr pos:start="37:24" pos:end="37:24"><literal type="number" pos:start="37:24" pos:end="37:24">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="37:28" pos:end="37:45"><expr pos:start="37:28" pos:end="37:45"><name pos:start="37:28" pos:end="37:35">O_WRONLY</name> <operator pos:start="37:37" pos:end="37:37">|</operator> <name pos:start="37:39" pos:end="37:45">O_CREAT</name></expr></argument>, <argument pos:start="37:48" pos:end="37:52"><expr pos:start="37:48" pos:end="37:52"><literal type="number" pos:start="37:48" pos:end="37:52">00644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:19">(<expr pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:14">fd_out</name> <operator pos:start="39:16" pos:end="39:16">&lt;</operator> <literal type="number" pos:start="39:18" pos:end="39:18">0</literal></expr>)</condition> <block pos:start="39:21" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:17">

        <expr_stmt pos:start="41:9" pos:end="41:44"><expr pos:start="41:9" pos:end="41:43"><call pos:start="41:9" pos:end="41:43"><name pos:start="41:9" pos:end="41:14">perror</name><argument_list pos:start="41:15" pos:end="41:43">(<argument pos:start="41:16" pos:end="41:42"><expr pos:start="41:16" pos:end="41:42"><literal type="string" pos:start="41:16" pos:end="41:42">"Error opening output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:21"><expr pos:start="43:9" pos:end="43:20"><call pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:13">close</name><argument_list pos:start="43:14" pos:end="43:20">(<argument pos:start="43:15" pos:end="43:19"><expr pos:start="43:15" pos:end="43:19"><name pos:start="43:15" pos:end="43:19">fd_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:17">return <expr pos:start="45:16" pos:end="45:16"><literal type="number" pos:start="45:16" pos:end="45:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="61:5"><if pos:start="51:5" pos:end="61:5">if <condition pos:start="51:8" pos:end="51:37">(<expr pos:start="51:9" pos:end="51:36"><call pos:start="51:9" pos:end="51:31"><name pos:start="51:9" pos:end="51:12">read</name><argument_list pos:start="51:13" pos:end="51:31">(<argument pos:start="51:14" pos:end="51:18"><expr pos:start="51:14" pos:end="51:18"><name pos:start="51:14" pos:end="51:18">fd_in</name></expr></argument>, <argument pos:start="51:21" pos:end="51:27"><expr pos:start="51:21" pos:end="51:27"><operator pos:start="51:21" pos:end="51:21">&amp;</operator><name pos:start="51:22" pos:end="51:27">buf_in</name></expr></argument>, <argument pos:start="51:30" pos:end="51:30"><expr pos:start="51:30" pos:end="51:30"><literal type="number" pos:start="51:30" pos:end="51:30">8</literal></expr></argument>)</argument_list></call> <operator pos:start="51:33" pos:end="51:34">!=</operator> <literal type="number" pos:start="51:36" pos:end="51:36">8</literal></expr>)</condition> <block pos:start="51:39" pos:end="61:5">{<block_content pos:start="53:9" pos:end="59:17">

        <expr_stmt pos:start="53:9" pos:end="53:33"><expr pos:start="53:9" pos:end="53:32"><call pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:14">printf</name><argument_list pos:start="53:15" pos:end="53:32">(<argument pos:start="53:16" pos:end="53:31"><expr pos:start="53:16" pos:end="53:31"><literal type="string" pos:start="53:16" pos:end="53:31">"Header error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:21"><expr pos:start="55:9" pos:end="55:20"><call pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:13">close</name><argument_list pos:start="55:14" pos:end="55:20">(<argument pos:start="55:15" pos:end="55:19"><expr pos:start="55:15" pos:end="55:19"><name pos:start="55:15" pos:end="55:19">fd_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:22"><expr pos:start="57:9" pos:end="57:21"><call pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:13">close</name><argument_list pos:start="57:14" pos:end="57:21">(<argument pos:start="57:15" pos:end="57:20"><expr pos:start="57:15" pos:end="57:20"><name pos:start="57:15" pos:end="57:20">fd_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:17">return <expr pos:start="59:16" pos:end="59:16"><literal type="number" pos:start="59:16" pos:end="59:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:65">(<expr pos:start="65:9" pos:end="65:64"><name pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:14">buf_in</name><index pos:start="65:15" pos:end="65:17">[<expr pos:start="65:16" pos:end="65:16"><literal type="number" pos:start="65:16" pos:end="65:16">0</literal></expr>]</index></name> <operator pos:start="65:19" pos:end="65:20">!=</operator> <literal type="char" pos:start="65:22" pos:end="65:24">'C'</literal> <operator pos:start="65:26" pos:end="65:27">||</operator> <name pos:start="65:29" pos:end="65:37"><name pos:start="65:29" pos:end="65:34">buf_in</name><index pos:start="65:35" pos:end="65:37">[<expr pos:start="65:36" pos:end="65:36"><literal type="number" pos:start="65:36" pos:end="65:36">1</literal></expr>]</index></name> <operator pos:start="65:39" pos:end="65:40">!=</operator> <literal type="char" pos:start="65:42" pos:end="65:44">'W'</literal> <operator pos:start="65:46" pos:end="65:47">||</operator> <name pos:start="65:49" pos:end="65:57"><name pos:start="65:49" pos:end="65:54">buf_in</name><index pos:start="65:55" pos:end="65:57">[<expr pos:start="65:56" pos:end="65:56"><literal type="number" pos:start="65:56" pos:end="65:56">2</literal></expr>]</index></name> <operator pos:start="65:59" pos:end="65:60">!=</operator> <literal type="char" pos:start="65:62" pos:end="65:64">'S'</literal></expr>)</condition> <block pos:start="65:67" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:17">

        <expr_stmt pos:start="67:9" pos:end="67:48"><expr pos:start="67:9" pos:end="67:47"><call pos:start="67:9" pos:end="67:47"><name pos:start="67:9" pos:end="67:14">printf</name><argument_list pos:start="67:15" pos:end="67:47">(<argument pos:start="67:16" pos:end="67:46"><expr pos:start="67:16" pos:end="67:46"><literal type="string" pos:start="67:16" pos:end="67:46">"Not a compressed flash file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:17">return <expr pos:start="69:16" pos:end="69:16"><literal type="number" pos:start="69:16" pos:end="69:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:27"><expr pos:start="75:5" pos:end="75:26"><call pos:start="75:5" pos:end="75:26"><name pos:start="75:5" pos:end="75:9">fstat</name><argument_list pos:start="75:10" pos:end="75:26">(<argument pos:start="75:11" pos:end="75:15"><expr pos:start="75:11" pos:end="75:15"><name pos:start="75:11" pos:end="75:15">fd_in</name></expr></argument>, <argument pos:start="75:18" pos:end="75:25"><expr pos:start="75:18" pos:end="75:25"><operator pos:start="75:18" pos:end="75:18">&amp;</operator><name pos:start="75:19" pos:end="75:25">statbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:33"><expr pos:start="77:5" pos:end="77:32"><name pos:start="77:5" pos:end="77:12">comp_len</name>   <operator pos:start="77:16" pos:end="77:16">=</operator> <name pos:start="77:18" pos:end="77:32"><name pos:start="77:18" pos:end="77:24">statbuf</name><operator pos:start="77:25" pos:end="77:25">.</operator><name pos:start="77:26" pos:end="77:32">st_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:86"><expr pos:start="79:5" pos:end="79:85"><name pos:start="79:5" pos:end="79:14">uncomp_len</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <name pos:start="79:18" pos:end="79:26"><name pos:start="79:18" pos:end="79:23">buf_in</name><index pos:start="79:24" pos:end="79:26">[<expr pos:start="79:25" pos:end="79:25"><literal type="number" pos:start="79:25" pos:end="79:25">4</literal></expr>]</index></name> <operator pos:start="79:28" pos:end="79:28">|</operator> <operator pos:start="79:30" pos:end="79:30">(</operator><name pos:start="79:31" pos:end="79:39"><name pos:start="79:31" pos:end="79:36">buf_in</name><index pos:start="79:37" pos:end="79:39">[<expr pos:start="79:38" pos:end="79:38"><literal type="number" pos:start="79:38" pos:end="79:38">5</literal></expr>]</index></name> <operator pos:start="79:41" pos:end="79:42">&lt;&lt;</operator> <literal type="number" pos:start="79:44" pos:end="79:44">8</literal><operator pos:start="79:45" pos:end="79:45">)</operator> <operator pos:start="79:47" pos:end="79:47">|</operator> <operator pos:start="79:49" pos:end="79:49">(</operator><name pos:start="79:50" pos:end="79:58"><name pos:start="79:50" pos:end="79:55">buf_in</name><index pos:start="79:56" pos:end="79:58">[<expr pos:start="79:57" pos:end="79:57"><literal type="number" pos:start="79:57" pos:end="79:57">6</literal></expr>]</index></name> <operator pos:start="79:60" pos:end="79:61">&lt;&lt;</operator> <literal type="number" pos:start="79:63" pos:end="79:64">16</literal><operator pos:start="79:65" pos:end="79:65">)</operator> <operator pos:start="79:67" pos:end="79:67">|</operator> <operator pos:start="79:69" pos:end="79:69">(</operator><name pos:start="79:70" pos:end="79:78"><name pos:start="79:70" pos:end="79:75">buf_in</name><index pos:start="79:76" pos:end="79:78">[<expr pos:start="79:77" pos:end="79:77"><literal type="number" pos:start="79:77" pos:end="79:77">7</literal></expr>]</index></name> <operator pos:start="79:80" pos:end="79:81">&lt;&lt;</operator> <literal type="number" pos:start="79:83" pos:end="79:84">24</literal><operator pos:start="79:85" pos:end="79:85">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="85:41"><expr pos:start="83:5" pos:end="85:40"><call pos:start="83:5" pos:end="85:40"><name pos:start="83:5" pos:end="83:10">printf</name><argument_list pos:start="83:11" pos:end="85:40">(<argument pos:start="83:12" pos:end="83:56"><expr pos:start="83:12" pos:end="83:56"><literal type="string" pos:start="83:12" pos:end="83:56">"Compressed size: %d Uncompressed size: %d\n"</literal></expr></argument>,

           <argument pos:start="85:12" pos:end="85:23"><expr pos:start="85:12" pos:end="85:23"><name pos:start="85:12" pos:end="85:19">comp_len</name> <operator pos:start="85:21" pos:end="85:21">-</operator> <literal type="number" pos:start="85:23" pos:end="85:23">4</literal></expr></argument>, <argument pos:start="85:26" pos:end="85:39"><expr pos:start="85:26" pos:end="85:39"><name pos:start="85:26" pos:end="85:35">uncomp_len</name> <operator pos:start="85:37" pos:end="85:37">-</operator> <literal type="number" pos:start="85:39" pos:end="85:39">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="89:5" pos:end="89:32">// write out modified header</comment>

    <expr_stmt pos:start="91:5" pos:end="91:20"><expr pos:start="91:5" pos:end="91:19"><name pos:start="91:5" pos:end="91:13"><name pos:start="91:5" pos:end="91:10">buf_in</name><index pos:start="91:11" pos:end="91:13">[<expr pos:start="91:12" pos:end="91:12"><literal type="number" pos:start="91:12" pos:end="91:12">0</literal></expr>]</index></name> <operator pos:start="91:15" pos:end="91:15">=</operator> <literal type="char" pos:start="91:17" pos:end="91:19">'F'</literal></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:38">(<expr pos:start="93:9" pos:end="93:37"><call pos:start="93:9" pos:end="93:33"><name pos:start="93:9" pos:end="93:13">write</name><argument_list pos:start="93:14" pos:end="93:33">(<argument pos:start="93:15" pos:end="93:20"><expr pos:start="93:15" pos:end="93:20"><name pos:start="93:15" pos:end="93:20">fd_out</name></expr></argument>, <argument pos:start="93:23" pos:end="93:29"><expr pos:start="93:23" pos:end="93:29"><operator pos:start="93:23" pos:end="93:23">&amp;</operator><name pos:start="93:24" pos:end="93:29">buf_in</name></expr></argument>, <argument pos:start="93:32" pos:end="93:32"><expr pos:start="93:32" pos:end="93:32"><literal type="number" pos:start="93:32" pos:end="93:32">8</literal></expr></argument>)</argument_list></call> <operator pos:start="93:35" pos:end="93:35">&lt;</operator> <literal type="number" pos:start="93:37" pos:end="93:37">8</literal></expr>)</condition> <block pos:start="93:40" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:17">

        <expr_stmt pos:start="95:9" pos:end="95:44"><expr pos:start="95:9" pos:end="95:43"><call pos:start="95:9" pos:end="95:43"><name pos:start="95:9" pos:end="95:14">perror</name><argument_list pos:start="95:15" pos:end="95:43">(<argument pos:start="95:16" pos:end="95:42"><expr pos:start="95:16" pos:end="95:42"><literal type="string" pos:start="95:16" pos:end="95:42">"Error writing output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:17">return <expr pos:start="97:16" pos:end="97:16"><literal type="number" pos:start="97:16" pos:end="97:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:26"><expr pos:start="103:5" pos:end="103:25"><name pos:start="103:5" pos:end="103:18"><name pos:start="103:5" pos:end="103:11">zstream</name><operator pos:start="103:12" pos:end="103:12">.</operator><name pos:start="103:13" pos:end="103:18">zalloc</name></name> <operator pos:start="103:20" pos:end="103:20">=</operator> <name pos:start="103:22" pos:end="103:25">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:26"><expr pos:start="105:5" pos:end="105:25"><name pos:start="105:5" pos:end="105:17"><name pos:start="105:5" pos:end="105:11">zstream</name><operator pos:start="105:12" pos:end="105:12">.</operator><name pos:start="105:13" pos:end="105:17">zfree</name></name>  <operator pos:start="105:20" pos:end="105:20">=</operator> <name pos:start="105:22" pos:end="105:25">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:26"><expr pos:start="107:5" pos:end="107:25"><name pos:start="107:5" pos:end="107:18"><name pos:start="107:5" pos:end="107:11">zstream</name><operator pos:start="107:12" pos:end="107:12">.</operator><name pos:start="107:13" pos:end="107:18">opaque</name></name> <operator pos:start="107:20" pos:end="107:20">=</operator> <name pos:start="107:22" pos:end="107:25">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:38">(<expr pos:start="109:9" pos:end="109:37"><call pos:start="109:9" pos:end="109:29"><name pos:start="109:9" pos:end="109:19">inflateInit</name><argument_list pos:start="109:20" pos:end="109:29">(<argument pos:start="109:21" pos:end="109:28"><expr pos:start="109:21" pos:end="109:28"><operator pos:start="109:21" pos:end="109:21">&amp;</operator><name pos:start="109:22" pos:end="109:28">zstream</name></expr></argument>)</argument_list></call> <operator pos:start="109:31" pos:end="109:32">!=</operator> <name pos:start="109:34" pos:end="109:37">Z_OK</name></expr>)</condition> <block pos:start="109:40" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:17">

        <expr_stmt pos:start="111:9" pos:end="111:48"><expr pos:start="111:9" pos:end="111:47"><call pos:start="111:9" pos:end="111:47"><name pos:start="111:9" pos:end="111:15">fprintf</name><argument_list pos:start="111:16" pos:end="111:47">(<argument pos:start="111:17" pos:end="111:22"><expr pos:start="111:17" pos:end="111:22"><name pos:start="111:17" pos:end="111:22">stderr</name></expr></argument>, <argument pos:start="111:25" pos:end="111:46"><expr pos:start="111:25" pos:end="111:46"><literal type="string" pos:start="111:25" pos:end="111:46">"inflateInit failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:17">return <expr pos:start="113:16" pos:end="113:16"><literal type="number" pos:start="113:16" pos:end="113:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="119:5" pos:end="185:5">for <control pos:start="119:9" pos:end="119:34">(<init pos:start="119:10" pos:end="119:15"><expr pos:start="119:10" pos:end="119:14"><name pos:start="119:10" pos:end="119:10">i</name> <operator pos:start="119:12" pos:end="119:12">=</operator> <literal type="number" pos:start="119:14" pos:end="119:14">0</literal></expr>;</init> <condition pos:start="119:17" pos:end="119:33"><expr pos:start="119:17" pos:end="119:32"><name pos:start="119:17" pos:end="119:17">i</name> <operator pos:start="119:19" pos:end="119:19">&lt;</operator> <name pos:start="119:21" pos:end="119:28">comp_len</name> <operator pos:start="119:30" pos:end="119:30">-</operator> <literal type="number" pos:start="119:32" pos:end="119:32">8</literal></expr>;</condition><incr/>)</control> <block pos:start="119:36" pos:end="185:5">{<block_content pos:start="121:9" pos:end="183:18">

        <decl_stmt pos:start="121:9" pos:end="121:50"><decl pos:start="121:9" pos:end="121:15"><type pos:start="121:9" pos:end="121:11"><name pos:start="121:9" pos:end="121:11">int</name></type> <name pos:start="121:13" pos:end="121:15">ret</name></decl>, <decl pos:start="121:18" pos:end="121:49"><type ref="prev" pos:start="121:9" pos:end="121:11"/><name pos:start="121:18" pos:end="121:20">len</name> <init pos:start="121:22" pos:end="121:49">= <expr pos:start="121:24" pos:end="121:49"><call pos:start="121:24" pos:end="121:49"><name pos:start="121:24" pos:end="121:27">read</name><argument_list pos:start="121:28" pos:end="121:49">(<argument pos:start="121:29" pos:end="121:33"><expr pos:start="121:29" pos:end="121:33"><name pos:start="121:29" pos:end="121:33">fd_in</name></expr></argument>, <argument pos:start="121:36" pos:end="121:42"><expr pos:start="121:36" pos:end="121:42"><operator pos:start="121:36" pos:end="121:36">&amp;</operator><name pos:start="121:37" pos:end="121:42">buf_in</name></expr></argument>, <argument pos:start="121:45" pos:end="121:48"><expr pos:start="121:45" pos:end="121:48"><literal type="number" pos:start="121:45" pos:end="121:48">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="125:9" pos:end="125:42"><expr pos:start="125:9" pos:end="125:41"><call pos:start="125:9" pos:end="125:41"><name pos:start="125:9" pos:end="125:17">dbgprintf</name><argument_list pos:start="125:18" pos:end="125:41">(<argument pos:start="125:19" pos:end="125:35"><expr pos:start="125:19" pos:end="125:35"><literal type="string" pos:start="125:19" pos:end="125:35">"read %d bytes\n"</literal></expr></argument>, <argument pos:start="125:38" pos:end="125:40"><expr pos:start="125:38" pos:end="125:40"><name pos:start="125:38" pos:end="125:40">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="129:9" pos:end="129:37"><expr pos:start="129:9" pos:end="129:36"><name pos:start="129:9" pos:end="129:16">last_out</name> <operator pos:start="129:18" pos:end="129:18">=</operator> <name pos:start="129:20" pos:end="129:36"><name pos:start="129:20" pos:end="129:26">zstream</name><operator pos:start="129:27" pos:end="129:27">.</operator><name pos:start="129:28" pos:end="129:36">total_out</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="133:9" pos:end="133:39"><expr pos:start="133:9" pos:end="133:38"><name pos:start="133:9" pos:end="133:23"><name pos:start="133:9" pos:end="133:15">zstream</name><operator pos:start="133:16" pos:end="133:16">.</operator><name pos:start="133:17" pos:end="133:23">next_in</name></name>   <operator pos:start="133:27" pos:end="133:27">=</operator> <operator pos:start="133:29" pos:end="133:29">&amp;</operator><name pos:start="133:30" pos:end="133:38"><name pos:start="133:30" pos:end="133:35">buf_in</name><index pos:start="133:36" pos:end="133:38">[<expr pos:start="133:37" pos:end="133:37"><literal type="number" pos:start="133:37" pos:end="133:37">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:32"><expr pos:start="135:9" pos:end="135:31"><name pos:start="135:9" pos:end="135:24"><name pos:start="135:9" pos:end="135:15">zstream</name><operator pos:start="135:16" pos:end="135:16">.</operator><name pos:start="135:17" pos:end="135:24">avail_in</name></name>  <operator pos:start="135:27" pos:end="135:27">=</operator> <name pos:start="135:29" pos:end="135:31">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:40"><expr pos:start="137:9" pos:end="137:39"><name pos:start="137:9" pos:end="137:24"><name pos:start="137:9" pos:end="137:15">zstream</name><operator pos:start="137:16" pos:end="137:16">.</operator><name pos:start="137:17" pos:end="137:24">next_out</name></name>  <operator pos:start="137:27" pos:end="137:27">=</operator> <operator pos:start="137:29" pos:end="137:29">&amp;</operator><name pos:start="137:30" pos:end="137:39"><name pos:start="137:30" pos:end="137:36">buf_out</name><index pos:start="137:37" pos:end="137:39">[<expr pos:start="137:38" pos:end="137:38"><literal type="number" pos:start="137:38" pos:end="137:38">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:34"><expr pos:start="139:9" pos:end="139:33"><name pos:start="139:9" pos:end="139:25"><name pos:start="139:9" pos:end="139:15">zstream</name><operator pos:start="139:16" pos:end="139:16">.</operator><name pos:start="139:17" pos:end="139:25">avail_out</name></name> <operator pos:start="139:27" pos:end="139:27">=</operator> <literal type="number" pos:start="139:29" pos:end="139:33">65536</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="143:9" pos:end="143:46"><expr pos:start="143:9" pos:end="143:45"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <call pos:start="143:15" pos:end="143:45"><name pos:start="143:15" pos:end="143:21">inflate</name><argument_list pos:start="143:22" pos:end="143:45">(<argument pos:start="143:23" pos:end="143:30"><expr pos:start="143:23" pos:end="143:30"><operator pos:start="143:23" pos:end="143:23">&amp;</operator><name pos:start="143:24" pos:end="143:30">zstream</name></expr></argument>, <argument pos:start="143:33" pos:end="143:44"><expr pos:start="143:33" pos:end="143:44"><name pos:start="143:33" pos:end="143:44">Z_SYNC_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="145:9" pos:end="153:9"><if pos:start="145:9" pos:end="153:9">if <condition pos:start="145:12" pos:end="145:47">(<expr pos:start="145:13" pos:end="145:46"><name pos:start="145:13" pos:end="145:15">ret</name> <operator pos:start="145:17" pos:end="145:18">!=</operator> <name pos:start="145:20" pos:end="145:31">Z_STREAM_END</name> <operator pos:start="145:33" pos:end="145:34">&amp;&amp;</operator> <name pos:start="145:36" pos:end="145:38">ret</name> <operator pos:start="145:40" pos:end="145:41">!=</operator> <name pos:start="145:43" pos:end="145:46">Z_OK</name></expr>)</condition> <block pos:start="145:49" pos:end="153:9">{<block_content pos:start="147:13" pos:end="151:21">

            <expr_stmt pos:start="147:13" pos:end="147:59"><expr pos:start="147:13" pos:end="147:58"><call pos:start="147:13" pos:end="147:58"><name pos:start="147:13" pos:end="147:18">printf</name><argument_list pos:start="147:19" pos:end="147:58">(<argument pos:start="147:20" pos:end="147:52"><expr pos:start="147:20" pos:end="147:52"><literal type="string" pos:start="147:20" pos:end="147:52">"Error while decompressing: %d\n"</literal></expr></argument>, <argument pos:start="147:55" pos:end="147:57"><expr pos:start="147:55" pos:end="147:57"><name pos:start="147:55" pos:end="147:57">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:33"><expr pos:start="149:13" pos:end="149:32"><call pos:start="149:13" pos:end="149:32"><name pos:start="149:13" pos:end="149:22">inflateEnd</name><argument_list pos:start="149:23" pos:end="149:32">(<argument pos:start="149:24" pos:end="149:31"><expr pos:start="149:24" pos:end="149:31"><operator pos:start="149:24" pos:end="149:24">&amp;</operator><name pos:start="149:25" pos:end="149:31">zstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="151:13" pos:end="151:21">return <expr pos:start="151:20" pos:end="151:20"><literal type="number" pos:start="151:20" pos:end="151:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="157:9" pos:end="161:67"><expr pos:start="157:9" pos:end="161:66"><call pos:start="157:9" pos:end="161:66"><name pos:start="157:9" pos:end="157:17">dbgprintf</name><argument_list pos:start="157:18" pos:end="161:66">(<argument pos:start="157:19" pos:end="157:72"><expr pos:start="157:19" pos:end="157:72"><literal type="string" pos:start="157:19" pos:end="157:72">"a_in: %d t_in: %lu a_out: %d t_out: %lu -- %lu out\n"</literal></expr></argument>,

                  <argument pos:start="159:19" pos:end="159:34"><expr pos:start="159:19" pos:end="159:34"><name pos:start="159:19" pos:end="159:34"><name pos:start="159:19" pos:end="159:25">zstream</name><operator pos:start="159:26" pos:end="159:26">.</operator><name pos:start="159:27" pos:end="159:34">avail_in</name></name></expr></argument>, <argument pos:start="159:37" pos:end="159:52"><expr pos:start="159:37" pos:end="159:52"><name pos:start="159:37" pos:end="159:52"><name pos:start="159:37" pos:end="159:43">zstream</name><operator pos:start="159:44" pos:end="159:44">.</operator><name pos:start="159:45" pos:end="159:52">total_in</name></name></expr></argument>, <argument pos:start="159:55" pos:end="159:71"><expr pos:start="159:55" pos:end="159:71"><name pos:start="159:55" pos:end="159:71"><name pos:start="159:55" pos:end="159:61">zstream</name><operator pos:start="159:62" pos:end="159:62">.</operator><name pos:start="159:63" pos:end="159:71">avail_out</name></name></expr></argument>,

                  <argument pos:start="161:19" pos:end="161:35"><expr pos:start="161:19" pos:end="161:35"><name pos:start="161:19" pos:end="161:35"><name pos:start="161:19" pos:end="161:25">zstream</name><operator pos:start="161:26" pos:end="161:26">.</operator><name pos:start="161:27" pos:end="161:35">total_out</name></name></expr></argument>, <argument pos:start="161:38" pos:end="161:65"><expr pos:start="161:38" pos:end="161:65"><name pos:start="161:38" pos:end="161:54"><name pos:start="161:38" pos:end="161:44">zstream</name><operator pos:start="161:45" pos:end="161:45">.</operator><name pos:start="161:46" pos:end="161:54">total_out</name></name> <operator pos:start="161:56" pos:end="161:56">-</operator> <name pos:start="161:58" pos:end="161:65">last_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="165:9" pos:end="173:9"><if pos:start="165:9" pos:end="173:9">if <condition pos:start="165:12" pos:end="167:41">(<expr pos:start="165:13" pos:end="167:40"><call pos:start="165:13" pos:end="165:65"><name pos:start="165:13" pos:end="165:17">write</name><argument_list pos:start="165:18" pos:end="165:65">(<argument pos:start="165:19" pos:end="165:24"><expr pos:start="165:19" pos:end="165:24"><name pos:start="165:19" pos:end="165:24">fd_out</name></expr></argument>, <argument pos:start="165:27" pos:end="165:34"><expr pos:start="165:27" pos:end="165:34"><operator pos:start="165:27" pos:end="165:27">&amp;</operator><name pos:start="165:28" pos:end="165:34">buf_out</name></expr></argument>, <argument pos:start="165:37" pos:end="165:64"><expr pos:start="165:37" pos:end="165:64"><name pos:start="165:37" pos:end="165:53"><name pos:start="165:37" pos:end="165:43">zstream</name><operator pos:start="165:44" pos:end="165:44">.</operator><name pos:start="165:45" pos:end="165:53">total_out</name></name> <operator pos:start="165:55" pos:end="165:55">-</operator> <name pos:start="165:57" pos:end="165:64">last_out</name></expr></argument>)</argument_list></call> <operator pos:start="165:67" pos:end="165:67">&lt;</operator>

            <name pos:start="167:13" pos:end="167:29"><name pos:start="167:13" pos:end="167:19">zstream</name><operator pos:start="167:20" pos:end="167:20">.</operator><name pos:start="167:21" pos:end="167:29">total_out</name></name> <operator pos:start="167:31" pos:end="167:31">-</operator> <name pos:start="167:33" pos:end="167:40">last_out</name></expr>)</condition> <block pos:start="167:43" pos:end="173:9">{<block_content pos:start="169:13" pos:end="171:21">

            <expr_stmt pos:start="169:13" pos:end="169:48"><expr pos:start="169:13" pos:end="169:47"><call pos:start="169:13" pos:end="169:47"><name pos:start="169:13" pos:end="169:18">perror</name><argument_list pos:start="169:19" pos:end="169:47">(<argument pos:start="169:20" pos:end="169:46"><expr pos:start="169:20" pos:end="169:46"><literal type="string" pos:start="169:20" pos:end="169:46">"Error writing output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="171:13" pos:end="171:21">return <expr pos:start="171:20" pos:end="171:20"><literal type="number" pos:start="171:20" pos:end="171:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="177:9" pos:end="177:17"><expr pos:start="177:9" pos:end="177:16"><name pos:start="177:9" pos:end="177:9">i</name> <operator pos:start="177:11" pos:end="177:12">+=</operator> <name pos:start="177:14" pos:end="177:16">len</name></expr>;</expr_stmt>



        <if_stmt pos:start="181:9" pos:end="183:18"><if pos:start="181:9" pos:end="183:18">if <condition pos:start="181:12" pos:end="181:54">(<expr pos:start="181:13" pos:end="181:53"><name pos:start="181:13" pos:end="181:15">ret</name> <operator pos:start="181:17" pos:end="181:18">==</operator> <name pos:start="181:20" pos:end="181:31">Z_STREAM_END</name> <operator pos:start="181:33" pos:end="181:34">||</operator> <name pos:start="181:36" pos:end="181:38">ret</name> <operator pos:start="181:40" pos:end="181:41">==</operator> <name pos:start="181:43" pos:end="181:53">Z_BUF_ERROR</name></expr>)</condition><block type="pseudo" pos:start="183:13" pos:end="183:18"><block_content pos:start="183:13" pos:end="183:18">

            <break pos:start="183:13" pos:end="183:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="189:5" pos:end="217:5"><if pos:start="189:5" pos:end="217:5">if <condition pos:start="189:8" pos:end="189:44">(<expr pos:start="189:9" pos:end="189:43"><name pos:start="189:9" pos:end="189:25"><name pos:start="189:9" pos:end="189:15">zstream</name><operator pos:start="189:16" pos:end="189:16">.</operator><name pos:start="189:17" pos:end="189:25">total_out</name></name> <operator pos:start="189:27" pos:end="189:28">!=</operator> <name pos:start="189:30" pos:end="189:39">uncomp_len</name> <operator pos:start="189:41" pos:end="189:41">-</operator> <literal type="number" pos:start="189:43" pos:end="189:43">8</literal></expr>)</condition> <block pos:start="189:46" pos:end="217:5">{<block_content pos:start="191:9" pos:end="215:9">

        <expr_stmt pos:start="191:9" pos:end="193:50"><expr pos:start="191:9" pos:end="193:49"><call pos:start="191:9" pos:end="193:49"><name pos:start="191:9" pos:end="191:14">printf</name><argument_list pos:start="191:15" pos:end="193:49">(<argument pos:start="191:16" pos:end="191:64"><expr pos:start="191:16" pos:end="191:64"><literal type="string" pos:start="191:16" pos:end="191:64">"Size mismatch (%lu != %d), updating header...\n"</literal></expr></argument>,

               <argument pos:start="193:16" pos:end="193:32"><expr pos:start="193:16" pos:end="193:32"><name pos:start="193:16" pos:end="193:32"><name pos:start="193:16" pos:end="193:22">zstream</name><operator pos:start="193:23" pos:end="193:23">.</operator><name pos:start="193:24" pos:end="193:32">total_out</name></name></expr></argument>, <argument pos:start="193:35" pos:end="193:48"><expr pos:start="193:35" pos:end="193:48"><name pos:start="193:35" pos:end="193:44">uncomp_len</name> <operator pos:start="193:46" pos:end="193:46">-</operator> <literal type="number" pos:start="193:48" pos:end="193:48">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="197:9" pos:end="197:59"><expr pos:start="197:9" pos:end="197:58"><name pos:start="197:9" pos:end="197:17"><name pos:start="197:9" pos:end="197:14">buf_in</name><index pos:start="197:15" pos:end="197:17">[<expr pos:start="197:16" pos:end="197:16"><literal type="number" pos:start="197:16" pos:end="197:16">0</literal></expr>]</index></name> <operator pos:start="197:19" pos:end="197:19">=</operator>  <operator pos:start="197:22" pos:end="197:22">(</operator><name pos:start="197:23" pos:end="197:39"><name pos:start="197:23" pos:end="197:29">zstream</name><operator pos:start="197:30" pos:end="197:30">.</operator><name pos:start="197:31" pos:end="197:39">total_out</name></name> <operator pos:start="197:41" pos:end="197:41">+</operator> <literal type="number" pos:start="197:43" pos:end="197:43">8</literal><operator pos:start="197:44" pos:end="197:44">)</operator>        <operator pos:start="197:53" pos:end="197:53">&amp;</operator> <literal type="number" pos:start="197:55" pos:end="197:58">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:59"><expr pos:start="199:9" pos:end="199:58"><name pos:start="199:9" pos:end="199:17"><name pos:start="199:9" pos:end="199:14">buf_in</name><index pos:start="199:15" pos:end="199:17">[<expr pos:start="199:16" pos:end="199:16"><literal type="number" pos:start="199:16" pos:end="199:16">1</literal></expr>]</index></name> <operator pos:start="199:19" pos:end="199:19">=</operator> <operator pos:start="199:21" pos:end="199:21">(</operator><operator pos:start="199:22" pos:end="199:22">(</operator><name pos:start="199:23" pos:end="199:39"><name pos:start="199:23" pos:end="199:29">zstream</name><operator pos:start="199:30" pos:end="199:30">.</operator><name pos:start="199:31" pos:end="199:39">total_out</name></name> <operator pos:start="199:41" pos:end="199:41">+</operator> <literal type="number" pos:start="199:43" pos:end="199:43">8</literal><operator pos:start="199:44" pos:end="199:44">)</operator> <operator pos:start="199:46" pos:end="199:47">&gt;&gt;</operator>  <literal type="number" pos:start="199:50" pos:end="199:50">8</literal><operator pos:start="199:51" pos:end="199:51">)</operator> <operator pos:start="199:53" pos:end="199:53">&amp;</operator> <literal type="number" pos:start="199:55" pos:end="199:58">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="201:9" pos:end="201:59"><expr pos:start="201:9" pos:end="201:58"><name pos:start="201:9" pos:end="201:17"><name pos:start="201:9" pos:end="201:14">buf_in</name><index pos:start="201:15" pos:end="201:17">[<expr pos:start="201:16" pos:end="201:16"><literal type="number" pos:start="201:16" pos:end="201:16">2</literal></expr>]</index></name> <operator pos:start="201:19" pos:end="201:19">=</operator> <operator pos:start="201:21" pos:end="201:21">(</operator><operator pos:start="201:22" pos:end="201:22">(</operator><name pos:start="201:23" pos:end="201:39"><name pos:start="201:23" pos:end="201:29">zstream</name><operator pos:start="201:30" pos:end="201:30">.</operator><name pos:start="201:31" pos:end="201:39">total_out</name></name> <operator pos:start="201:41" pos:end="201:41">+</operator> <literal type="number" pos:start="201:43" pos:end="201:43">8</literal><operator pos:start="201:44" pos:end="201:44">)</operator> <operator pos:start="201:46" pos:end="201:47">&gt;&gt;</operator> <literal type="number" pos:start="201:49" pos:end="201:50">16</literal><operator pos:start="201:51" pos:end="201:51">)</operator> <operator pos:start="201:53" pos:end="201:53">&amp;</operator> <literal type="number" pos:start="201:55" pos:end="201:58">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:59"><expr pos:start="203:9" pos:end="203:58"><name pos:start="203:9" pos:end="203:17"><name pos:start="203:9" pos:end="203:14">buf_in</name><index pos:start="203:15" pos:end="203:17">[<expr pos:start="203:16" pos:end="203:16"><literal type="number" pos:start="203:16" pos:end="203:16">3</literal></expr>]</index></name> <operator pos:start="203:19" pos:end="203:19">=</operator> <operator pos:start="203:21" pos:end="203:21">(</operator><operator pos:start="203:22" pos:end="203:22">(</operator><name pos:start="203:23" pos:end="203:39"><name pos:start="203:23" pos:end="203:29">zstream</name><operator pos:start="203:30" pos:end="203:30">.</operator><name pos:start="203:31" pos:end="203:39">total_out</name></name> <operator pos:start="203:41" pos:end="203:41">+</operator> <literal type="number" pos:start="203:43" pos:end="203:43">8</literal><operator pos:start="203:44" pos:end="203:44">)</operator> <operator pos:start="203:46" pos:end="203:47">&gt;&gt;</operator> <literal type="number" pos:start="203:49" pos:end="203:50">24</literal><operator pos:start="203:51" pos:end="203:51">)</operator> <operator pos:start="203:53" pos:end="203:53">&amp;</operator> <literal type="number" pos:start="203:55" pos:end="203:58">0xff</literal></expr>;</expr_stmt>



        <if_stmt pos:start="207:9" pos:end="215:9"><if pos:start="207:9" pos:end="215:9">if <condition pos:start="207:12" pos:end="209:45">(   <expr pos:start="207:16" pos:end="209:44"><call pos:start="207:16" pos:end="207:41"><name pos:start="207:16" pos:end="207:20">lseek</name><argument_list pos:start="207:21" pos:end="207:41">(<argument pos:start="207:22" pos:end="207:27"><expr pos:start="207:22" pos:end="207:27"><name pos:start="207:22" pos:end="207:27">fd_out</name></expr></argument>, <argument pos:start="207:30" pos:end="207:30"><expr pos:start="207:30" pos:end="207:30"><literal type="number" pos:start="207:30" pos:end="207:30">4</literal></expr></argument>, <argument pos:start="207:33" pos:end="207:40"><expr pos:start="207:33" pos:end="207:40"><name pos:start="207:33" pos:end="207:40">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="207:43" pos:end="207:43">&lt;</operator> <literal type="number" pos:start="207:45" pos:end="207:45">0</literal>

            <operator pos:start="209:13" pos:end="209:14">||</operator> <call pos:start="209:16" pos:end="209:40"><name pos:start="209:16" pos:end="209:20">write</name><argument_list pos:start="209:21" pos:end="209:40">(<argument pos:start="209:22" pos:end="209:27"><expr pos:start="209:22" pos:end="209:27"><name pos:start="209:22" pos:end="209:27">fd_out</name></expr></argument>, <argument pos:start="209:30" pos:end="209:36"><expr pos:start="209:30" pos:end="209:36"><operator pos:start="209:30" pos:end="209:30">&amp;</operator><name pos:start="209:31" pos:end="209:36">buf_in</name></expr></argument>, <argument pos:start="209:39" pos:end="209:39"><expr pos:start="209:39" pos:end="209:39"><literal type="number" pos:start="209:39" pos:end="209:39">4</literal></expr></argument>)</argument_list></call> <operator pos:start="209:42" pos:end="209:42">&lt;</operator> <literal type="number" pos:start="209:44" pos:end="209:44">4</literal></expr>)</condition> <block pos:start="209:47" pos:end="215:9">{<block_content pos:start="211:13" pos:end="213:21">

            <expr_stmt pos:start="211:13" pos:end="211:48"><expr pos:start="211:13" pos:end="211:47"><call pos:start="211:13" pos:end="211:47"><name pos:start="211:13" pos:end="211:18">perror</name><argument_list pos:start="211:19" pos:end="211:47">(<argument pos:start="211:20" pos:end="211:46"><expr pos:start="211:20" pos:end="211:46"><literal type="string" pos:start="211:20" pos:end="211:46">"Error writing output file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="213:13" pos:end="213:21">return <expr pos:start="213:20" pos:end="213:20"><literal type="number" pos:start="213:20" pos:end="213:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="221:5" pos:end="221:25"><expr pos:start="221:5" pos:end="221:24"><call pos:start="221:5" pos:end="221:24"><name pos:start="221:5" pos:end="221:14">inflateEnd</name><argument_list pos:start="221:15" pos:end="221:24">(<argument pos:start="221:16" pos:end="221:23"><expr pos:start="221:16" pos:end="221:23"><operator pos:start="221:16" pos:end="221:16">&amp;</operator><name pos:start="221:17" pos:end="221:23">zstream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:17"><expr pos:start="223:5" pos:end="223:16"><call pos:start="223:5" pos:end="223:16"><name pos:start="223:5" pos:end="223:9">close</name><argument_list pos:start="223:10" pos:end="223:16">(<argument pos:start="223:11" pos:end="223:15"><expr pos:start="223:11" pos:end="223:15"><name pos:start="223:11" pos:end="223:15">fd_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:18"><expr pos:start="225:5" pos:end="225:17"><call pos:start="225:5" pos:end="225:17"><name pos:start="225:5" pos:end="225:9">close</name><argument_list pos:start="225:10" pos:end="225:17">(<argument pos:start="225:11" pos:end="225:16"><expr pos:start="225:11" pos:end="225:16"><name pos:start="225:11" pos:end="225:16">fd_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="227:5" pos:end="227:13">return <expr pos:start="227:12" pos:end="227:12"><literal type="number" pos:start="227:12" pos:end="227:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
