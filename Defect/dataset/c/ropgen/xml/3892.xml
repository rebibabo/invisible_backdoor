<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3892.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">spapr_finalize_fdt</name><parameter_list pos:start="1:31" pos:end="7:60">(<parameter pos:start="1:32" pos:end="1:54"><decl pos:start="1:32" pos:end="1:54"><type pos:start="1:32" pos:end="1:54"><name pos:start="1:32" pos:end="1:47">sPAPREnvironment</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">spapr</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:58"><decl pos:start="3:32" pos:end="3:58"><type pos:start="3:32" pos:end="3:58"><name pos:start="3:32" pos:end="3:49">target_phys_addr_t</name></type> <name pos:start="3:51" pos:end="3:58">fdt_addr</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:59"><decl pos:start="5:32" pos:end="5:59"><type pos:start="5:32" pos:end="5:59"><name pos:start="5:32" pos:end="5:49">target_phys_addr_t</name></type> <name pos:start="5:51" pos:end="5:59">rtas_addr</name></decl></parameter>,

                               <parameter pos:start="7:32" pos:end="7:59"><decl pos:start="7:32" pos:end="7:59"><type pos:start="7:32" pos:end="7:59"><name pos:start="7:32" pos:end="7:49">target_phys_addr_t</name></type> <name pos:start="7:51" pos:end="7:59">rtas_size</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="117:1">{<block_content pos:start="11:5" pos:end="115:16">

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:13">fdt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">sPAPRPHBState</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:22">phb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:33"><expr pos:start="19:5" pos:end="19:32"><name pos:start="19:5" pos:end="19:7">fdt</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:32"><name pos:start="19:11" pos:end="19:18">g_malloc</name><argument_list pos:start="19:19" pos:end="19:32">(<argument pos:start="19:20" pos:end="19:31"><expr pos:start="19:20" pos:end="19:31"><name pos:start="19:20" pos:end="19:31">FDT_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:72">/* open out the base tree into a temp buffer for the final tweaks */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:62"><expr pos:start="25:5" pos:end="25:61"><call pos:start="25:5" pos:end="25:61"><name pos:start="25:5" pos:end="25:8">_FDT</name><argument_list pos:start="25:9" pos:end="25:61">(<argument pos:start="25:10" pos:end="25:60"><expr pos:start="25:10" pos:end="25:60"><operator pos:start="25:10" pos:end="25:10">(</operator><call pos:start="25:11" pos:end="25:59"><name pos:start="25:11" pos:end="25:23">fdt_open_into</name><argument_list pos:start="25:24" pos:end="25:59">(<argument pos:start="25:25" pos:end="25:39"><expr pos:start="25:25" pos:end="25:39"><name pos:start="25:25" pos:end="25:39"><name pos:start="25:25" pos:end="25:29">spapr</name><operator pos:start="25:30" pos:end="25:31">-&gt;</operator><name pos:start="25:32" pos:end="25:39">fdt_skel</name></name></expr></argument>, <argument pos:start="25:42" pos:end="25:44"><expr pos:start="25:42" pos:end="25:44"><name pos:start="25:42" pos:end="25:44">fdt</name></expr></argument>, <argument pos:start="25:47" pos:end="25:58"><expr pos:start="25:47" pos:end="25:58"><name pos:start="25:47" pos:end="25:58">FDT_MAX_SIZE</name></expr></argument>)</argument_list></call><operator pos:start="25:60" pos:end="25:60">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:54"><expr pos:start="29:5" pos:end="29:53"><name pos:start="29:5" pos:end="29:7">ret</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:53"><name pos:start="29:11" pos:end="29:32">spapr_populate_vdevice</name><argument_list pos:start="29:33" pos:end="29:53">(<argument pos:start="29:34" pos:end="29:47"><expr pos:start="29:34" pos:end="29:47"><name pos:start="29:34" pos:end="29:47"><name pos:start="29:34" pos:end="29:38">spapr</name><operator pos:start="29:39" pos:end="29:40">-&gt;</operator><name pos:start="29:41" pos:end="29:47">vio_bus</name></name></expr></argument>, <argument pos:start="29:50" pos:end="29:52"><expr pos:start="29:50" pos:end="29:52"><name pos:start="29:50" pos:end="29:52">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">&lt;</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>)</condition> <block pos:start="31:18" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:16">

        <expr_stmt pos:start="33:9" pos:end="33:63"><expr pos:start="33:9" pos:end="33:62"><call pos:start="33:9" pos:end="33:62"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="33:62">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:61"><expr pos:start="33:25" pos:end="33:61"><literal type="string" pos:start="33:25" pos:end="33:61">"couldn't setup vio devices in fdt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:16"><expr pos:start="35:9" pos:end="35:15"><call pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:12">exit</name><argument_list pos:start="35:13" pos:end="35:15">(<argument pos:start="35:14" pos:end="35:14"><expr pos:start="35:14" pos:end="35:14"><literal type="number" pos:start="35:14" pos:end="35:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="41:5" pos:end="41:42"><name pos:start="41:5" pos:end="41:17">QLIST_FOREACH</name><argument_list pos:start="41:18" pos:end="41:42">(<argument pos:start="41:19" pos:end="41:21">phb</argument>, <argument pos:start="41:24" pos:end="41:35">&amp;spapr-&gt;phbs</argument>, <argument pos:start="41:38" pos:end="41:41">list</argument>)</argument_list></macro> <block pos:start="41:44" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:60">

        <expr_stmt pos:start="43:9" pos:end="43:60"><expr pos:start="43:9" pos:end="43:59"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:59"><name pos:start="43:15" pos:end="43:35">spapr_populate_pci_dt</name><argument_list pos:start="43:36" pos:end="43:59">(<argument pos:start="43:37" pos:end="43:39"><expr pos:start="43:37" pos:end="43:39"><name pos:start="43:37" pos:end="43:39">phb</name></expr></argument>, <argument pos:start="43:42" pos:end="43:53"><expr pos:start="43:42" pos:end="43:53"><name pos:start="43:42" pos:end="43:53">PHANDLE_XICP</name></expr></argument>, <argument pos:start="43:56" pos:end="43:58"><expr pos:start="43:56" pos:end="43:58"><name pos:start="43:56" pos:end="43:58">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:16">(<expr pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">&lt;</operator> <literal type="number" pos:start="49:15" pos:end="49:15">0</literal></expr>)</condition> <block pos:start="49:18" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:16">

        <expr_stmt pos:start="51:9" pos:end="51:63"><expr pos:start="51:9" pos:end="51:62"><call pos:start="51:9" pos:end="51:62"><name pos:start="51:9" pos:end="51:15">fprintf</name><argument_list pos:start="51:16" pos:end="51:62">(<argument pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:22">stderr</name></expr></argument>, <argument pos:start="51:25" pos:end="51:61"><expr pos:start="51:25" pos:end="51:61"><literal type="string" pos:start="51:25" pos:end="51:61">"couldn't setup PCI devices in fdt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:16"><expr pos:start="53:9" pos:end="53:15"><call pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:12">exit</name><argument_list pos:start="53:13" pos:end="53:15">(<argument pos:start="53:14" pos:end="53:14"><expr pos:start="53:14" pos:end="53:14"><literal type="number" pos:start="53:14" pos:end="53:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:14">/* RTAS */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:66"><expr pos:start="61:5" pos:end="61:65"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:65"><name pos:start="61:11" pos:end="61:38">spapr_rtas_device_tree_setup</name><argument_list pos:start="61:39" pos:end="61:65">(<argument pos:start="61:40" pos:end="61:42"><expr pos:start="61:40" pos:end="61:42"><name pos:start="61:40" pos:end="61:42">fdt</name></expr></argument>, <argument pos:start="61:45" pos:end="61:53"><expr pos:start="61:45" pos:end="61:53"><name pos:start="61:45" pos:end="61:53">rtas_addr</name></expr></argument>, <argument pos:start="61:56" pos:end="61:64"><expr pos:start="61:56" pos:end="61:64"><name pos:start="61:56" pos:end="61:64">rtas_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">&lt;</operator> <literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>)</condition> <block pos:start="63:18" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:73">

        <expr_stmt pos:start="65:9" pos:end="65:73"><expr pos:start="65:9" pos:end="65:72"><call pos:start="65:9" pos:end="65:72"><name pos:start="65:9" pos:end="65:15">fprintf</name><argument_list pos:start="65:16" pos:end="65:72">(<argument pos:start="65:17" pos:end="65:22"><expr pos:start="65:17" pos:end="65:22"><name pos:start="65:17" pos:end="65:22">stderr</name></expr></argument>, <argument pos:start="65:25" pos:end="65:71"><expr pos:start="65:25" pos:end="65:71"><literal type="string" pos:start="65:25" pos:end="65:71">"Couldn't set up RTAS device tree properties\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:46">/* Advertise NUMA via ibm,associativity */</comment>

    <if_stmt pos:start="73:5" pos:end="83:5"><if pos:start="73:5" pos:end="83:5">if <condition pos:start="73:8" pos:end="73:26">(<expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:21">nb_numa_nodes</name> <operator pos:start="73:23" pos:end="73:23">&gt;</operator> <literal type="number" pos:start="73:25" pos:end="73:25">1</literal></expr>)</condition> <block pos:start="73:28" pos:end="83:5">{<block_content pos:start="75:9" pos:end="81:9">

        <expr_stmt pos:start="75:9" pos:end="75:50"><expr pos:start="75:9" pos:end="75:49"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:49"><name pos:start="75:15" pos:end="75:37">spapr_set_associativity</name><argument_list pos:start="75:38" pos:end="75:49">(<argument pos:start="75:39" pos:end="75:41"><expr pos:start="75:39" pos:end="75:41"><name pos:start="75:39" pos:end="75:41">fdt</name></expr></argument>, <argument pos:start="75:44" pos:end="75:48"><expr pos:start="75:44" pos:end="75:48"><name pos:start="75:44" pos:end="75:48">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:20">(<expr pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:15">ret</name> <operator pos:start="77:17" pos:end="77:17">&lt;</operator> <literal type="number" pos:start="77:19" pos:end="77:19">0</literal></expr>)</condition> <block pos:start="77:22" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:77">

            <expr_stmt pos:start="79:13" pos:end="79:77"><expr pos:start="79:13" pos:end="79:76"><call pos:start="79:13" pos:end="79:76"><name pos:start="79:13" pos:end="79:19">fprintf</name><argument_list pos:start="79:20" pos:end="79:76">(<argument pos:start="79:21" pos:end="79:26"><expr pos:start="79:21" pos:end="79:26"><name pos:start="79:21" pos:end="79:26">stderr</name></expr></argument>, <argument pos:start="79:29" pos:end="79:75"><expr pos:start="79:29" pos:end="79:75"><literal type="string" pos:start="79:29" pos:end="79:75">"Couldn't set up NUMA device tree properties\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="87:5" pos:end="91:5"><if pos:start="87:5" pos:end="91:5">if <condition pos:start="87:8" pos:end="87:29">(<expr pos:start="87:9" pos:end="87:28"><operator pos:start="87:9" pos:end="87:9">!</operator><name pos:start="87:10" pos:end="87:28"><name pos:start="87:10" pos:end="87:14">spapr</name><operator pos:start="87:15" pos:end="87:16">-&gt;</operator><name pos:start="87:17" pos:end="87:28">has_graphics</name></name></expr>)</condition> <block pos:start="87:31" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:58">

        <expr_stmt pos:start="89:9" pos:end="89:58"><expr pos:start="89:9" pos:end="89:57"><call pos:start="89:9" pos:end="89:57"><name pos:start="89:9" pos:end="89:36">spapr_populate_chosen_stdout</name><argument_list pos:start="89:37" pos:end="89:57">(<argument pos:start="89:38" pos:end="89:40"><expr pos:start="89:38" pos:end="89:40"><name pos:start="89:38" pos:end="89:40">fdt</name></expr></argument>, <argument pos:start="89:43" pos:end="89:56"><expr pos:start="89:43" pos:end="89:56"><name pos:start="89:43" pos:end="89:56"><name pos:start="89:43" pos:end="89:47">spapr</name><operator pos:start="89:48" pos:end="89:49">-&gt;</operator><name pos:start="89:50" pos:end="89:56">vio_bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:26"><expr pos:start="95:5" pos:end="95:25"><call pos:start="95:5" pos:end="95:25"><name pos:start="95:5" pos:end="95:8">_FDT</name><argument_list pos:start="95:9" pos:end="95:25">(<argument pos:start="95:10" pos:end="95:24"><expr pos:start="95:10" pos:end="95:24"><operator pos:start="95:10" pos:end="95:10">(</operator><call pos:start="95:11" pos:end="95:23"><name pos:start="95:11" pos:end="95:18">fdt_pack</name><argument_list pos:start="95:19" pos:end="95:23">(<argument pos:start="95:20" pos:end="95:22"><expr pos:start="95:20" pos:end="95:22"><name pos:start="95:20" pos:end="95:22">fdt</name></expr></argument>)</argument_list></call><operator pos:start="95:24" pos:end="95:24">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="99:5" pos:end="107:5"><if pos:start="99:5" pos:end="107:5">if <condition pos:start="99:8" pos:end="99:42">(<expr pos:start="99:9" pos:end="99:41"><call pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:21">fdt_totalsize</name><argument_list pos:start="99:22" pos:end="99:26">(<argument pos:start="99:23" pos:end="99:25"><expr pos:start="99:23" pos:end="99:25"><name pos:start="99:23" pos:end="99:25">fdt</name></expr></argument>)</argument_list></call> <operator pos:start="99:28" pos:end="99:28">&gt;</operator> <name pos:start="99:30" pos:end="99:41">FDT_MAX_SIZE</name></expr>)</condition> <block pos:start="99:44" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:16">

        <expr_stmt pos:start="101:9" pos:end="103:51"><expr pos:start="101:9" pos:end="103:50"><call pos:start="101:9" pos:end="103:50"><name pos:start="101:9" pos:end="101:16">hw_error</name><argument_list pos:start="101:17" pos:end="103:50">(<argument pos:start="101:18" pos:end="101:59"><expr pos:start="101:18" pos:end="101:59"><literal type="string" pos:start="101:18" pos:end="101:59">"FDT too big ! 0x%x bytes (max is 0x%x)\n"</literal></expr></argument>,

                 <argument pos:start="103:18" pos:end="103:35"><expr pos:start="103:18" pos:end="103:35"><call pos:start="103:18" pos:end="103:35"><name pos:start="103:18" pos:end="103:30">fdt_totalsize</name><argument_list pos:start="103:31" pos:end="103:35">(<argument pos:start="103:32" pos:end="103:34"><expr pos:start="103:32" pos:end="103:34"><name pos:start="103:32" pos:end="103:34">fdt</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="103:38" pos:end="103:49"><expr pos:start="103:38" pos:end="103:49"><name pos:start="103:38" pos:end="103:49">FDT_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:16"><expr pos:start="105:9" pos:end="105:15"><call pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:12">exit</name><argument_list pos:start="105:13" pos:end="105:15">(<argument pos:start="105:14" pos:end="105:14"><expr pos:start="105:14" pos:end="105:14"><literal type="number" pos:start="105:14" pos:end="105:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:65"><expr pos:start="111:5" pos:end="111:64"><call pos:start="111:5" pos:end="111:64"><name pos:start="111:5" pos:end="111:29">cpu_physical_memory_write</name><argument_list pos:start="111:30" pos:end="111:64">(<argument pos:start="111:31" pos:end="111:38"><expr pos:start="111:31" pos:end="111:38"><name pos:start="111:31" pos:end="111:38">fdt_addr</name></expr></argument>, <argument pos:start="111:41" pos:end="111:43"><expr pos:start="111:41" pos:end="111:43"><name pos:start="111:41" pos:end="111:43">fdt</name></expr></argument>, <argument pos:start="111:46" pos:end="111:63"><expr pos:start="111:46" pos:end="111:63"><call pos:start="111:46" pos:end="111:63"><name pos:start="111:46" pos:end="111:58">fdt_totalsize</name><argument_list pos:start="111:59" pos:end="111:63">(<argument pos:start="111:60" pos:end="111:62"><expr pos:start="111:60" pos:end="111:62"><name pos:start="111:60" pos:end="111:62">fdt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:16"><expr pos:start="115:5" pos:end="115:15"><call pos:start="115:5" pos:end="115:15"><name pos:start="115:5" pos:end="115:10">g_free</name><argument_list pos:start="115:11" pos:end="115:15">(<argument pos:start="115:12" pos:end="115:14"><expr pos:start="115:12" pos:end="115:14"><name pos:start="115:12" pos:end="115:14">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
