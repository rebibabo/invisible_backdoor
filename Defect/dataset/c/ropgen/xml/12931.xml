<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12931.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">asf_read_payload</name><parameter_list pos:start="1:28" pos:end="1:62">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:61"><decl pos:start="1:49" pos:end="1:61"><type pos:start="1:49" pos:end="1:61"><name pos:start="1:49" pos:end="1:56">AVPacket</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:61">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">ASFContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">asf</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">AVIOContext</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">pb</name> <init pos:start="7:21" pos:end="7:27">= <expr pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:27"><name pos:start="7:23" pos:end="7:23">s</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">ASFPacket</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:22">asf_pkt</name> <init pos:start="11:24" pos:end="11:29">= <expr pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:29">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="127:5"><if pos:start="15:5" pos:end="99:5">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:22"><name pos:start="15:10" pos:end="15:12">asf</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:22">sub_left</name></name></expr>)</condition> <block pos:start="15:25" pos:end="99:5">{<block_content pos:start="17:9" pos:end="97:9">

        <decl_stmt pos:start="17:9" pos:end="17:36"><decl pos:start="17:9" pos:end="17:24"><type pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:16">uint32_t</name></type> <name pos:start="17:18" pos:end="17:24">off_len</name></decl>, <decl pos:start="17:27" pos:end="17:35"><type ref="prev" pos:start="17:9" pos:end="17:16"/><name pos:start="17:27" pos:end="17:35">media_len</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:27"><decl pos:start="19:9" pos:end="19:26"><type pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:15">uint8_t</name></type> <name pos:start="19:17" pos:end="19:26">stream_num</name></decl>;</decl_stmt>



        <expr_stmt pos:start="23:9" pos:end="23:33"><expr pos:start="23:9" pos:end="23:32"><name pos:start="23:9" pos:end="23:18">stream_num</name> <operator pos:start="23:20" pos:end="23:20">=</operator> <call pos:start="23:22" pos:end="23:32"><name pos:start="23:22" pos:end="23:28">avio_r8</name><argument_list pos:start="23:29" pos:end="23:32">(<argument pos:start="23:30" pos:end="23:31"><expr pos:start="23:30" pos:end="23:31"><name pos:start="23:30" pos:end="23:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:56"><expr pos:start="25:9" pos:end="25:55"><name pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:11">asf</name><operator pos:start="25:12" pos:end="25:13">-&gt;</operator><name pos:start="25:14" pos:end="25:25">stream_index</name></name> <operator pos:start="25:27" pos:end="25:27">=</operator> <name pos:start="25:29" pos:end="25:38">stream_num</name> <operator pos:start="25:40" pos:end="25:40">&amp;</operator> <name pos:start="25:42" pos:end="25:55">ASF_STREAM_NUM</name></expr>;</expr_stmt>

        <for pos:start="27:9" pos:end="39:9">for <control pos:start="27:13" pos:end="27:45">(<init pos:start="27:14" pos:end="27:19"><expr pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:14">i</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>;</init> <condition pos:start="27:21" pos:end="27:40"><expr pos:start="27:21" pos:end="27:39"><name pos:start="27:21" pos:end="27:21">i</name> <operator pos:start="27:23" pos:end="27:23">&lt;</operator> <name pos:start="27:25" pos:end="27:39"><name pos:start="27:25" pos:end="27:27">asf</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:39">nb_streams</name></name></expr>;</condition> <incr pos:start="27:42" pos:end="27:44"><expr pos:start="27:42" pos:end="27:44"><name pos:start="27:42" pos:end="27:42">i</name><operator pos:start="27:43" pos:end="27:44">++</operator></expr></incr>)</control> <block pos:start="27:47" pos:end="39:9">{<block_content pos:start="29:13" pos:end="37:13">

            <if_stmt pos:start="29:13" pos:end="37:13"><if pos:start="29:13" pos:end="37:13">if <condition pos:start="29:16" pos:end="29:66">(<expr pos:start="29:17" pos:end="29:65"><name pos:start="29:17" pos:end="29:33"><name pos:start="29:17" pos:end="29:19">asf</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:33">stream_index</name></name> <operator pos:start="29:35" pos:end="29:36">==</operator> <name pos:start="29:38" pos:end="29:51"><name pos:start="29:38" pos:end="29:40">asf</name><operator pos:start="29:41" pos:end="29:42">-&gt;</operator><name pos:start="29:43" pos:end="29:48">asf_st</name><index pos:start="29:49" pos:end="29:51">[<expr pos:start="29:50" pos:end="29:50"><name pos:start="29:50" pos:end="29:50">i</name></expr>]</index></name><operator pos:start="29:52" pos:end="29:53">-&gt;</operator><name pos:start="29:54" pos:end="29:65">stream_index</name></expr>)</condition> <block pos:start="29:68" pos:end="37:13">{<block_content pos:start="31:17" pos:end="35:22">

                <expr_stmt pos:start="31:17" pos:end="31:61"><expr pos:start="31:17" pos:end="31:60"><name pos:start="31:17" pos:end="31:23">asf_pkt</name>               <operator pos:start="31:39" pos:end="31:39">=</operator> <operator pos:start="31:41" pos:end="31:41">&amp;</operator><name pos:start="31:42" pos:end="31:55"><name pos:start="31:42" pos:end="31:44">asf</name><operator pos:start="31:45" pos:end="31:46">-&gt;</operator><name pos:start="31:47" pos:end="31:52">asf_st</name><index pos:start="31:53" pos:end="31:55">[<expr pos:start="31:54" pos:end="31:54"><name pos:start="31:54" pos:end="31:54">i</name></expr>]</index></name><operator pos:start="31:56" pos:end="31:57">-&gt;</operator><name pos:start="31:58" pos:end="31:60">pkt</name></expr>;</expr_stmt>

                <expr_stmt pos:start="33:17" pos:end="33:62"><expr pos:start="33:17" pos:end="33:61"><name pos:start="33:17" pos:end="33:37"><name pos:start="33:17" pos:end="33:23">asf_pkt</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:37">stream_index</name></name> <operator pos:start="33:39" pos:end="33:39">=</operator> <name pos:start="33:41" pos:end="33:54"><name pos:start="33:41" pos:end="33:43">asf</name><operator pos:start="33:44" pos:end="33:45">-&gt;</operator><name pos:start="33:46" pos:end="33:51">asf_st</name><index pos:start="33:52" pos:end="33:54">[<expr pos:start="33:53" pos:end="33:53"><name pos:start="33:53" pos:end="33:53">i</name></expr>]</index></name><operator pos:start="33:55" pos:end="33:56">-&gt;</operator><name pos:start="33:57" pos:end="33:61">index</name></expr>;</expr_stmt>

                <break pos:start="35:17" pos:end="35:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="41:9" pos:end="43:39"><if pos:start="41:9" pos:end="43:39">if <condition pos:start="41:12" pos:end="41:21">(<expr pos:start="41:13" pos:end="41:20"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:20">asf_pkt</name></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:39"><block_content pos:start="43:13" pos:end="43:39">

            <return pos:start="43:13" pos:end="43:39">return <expr pos:start="43:20" pos:end="43:38"><name pos:start="43:20" pos:end="43:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="47:46"><if pos:start="45:9" pos:end="47:46">if <condition pos:start="45:12" pos:end="45:28">(<expr pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:22">stream_num</name> <operator pos:start="45:24" pos:end="45:25">&gt;&gt;</operator> <literal type="number" pos:start="45:27" pos:end="45:27">7</literal></expr>)</condition><block type="pseudo" pos:start="47:13" pos:end="47:46"><block_content pos:start="47:13" pos:end="47:46">

            <expr_stmt pos:start="47:13" pos:end="47:46"><expr pos:start="47:13" pos:end="47:45"><name pos:start="47:13" pos:end="47:26"><name pos:start="47:13" pos:end="47:19">asf_pkt</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:26">flags</name></name> <operator pos:start="47:28" pos:end="47:29">|=</operator> <name pos:start="47:31" pos:end="47:45">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="51:75"><expr pos:start="49:9" pos:end="51:74"><call pos:start="49:9" pos:end="51:74"><name pos:start="49:9" pos:end="49:16">READ_LEN</name><argument_list pos:start="49:17" pos:end="51:74">(<argument pos:start="49:18" pos:end="49:84"><expr pos:start="49:18" pos:end="49:84"><name pos:start="49:18" pos:end="49:32"><name pos:start="49:18" pos:end="49:20">asf</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:32">prop_flags</name></name> <operator pos:start="49:34" pos:end="49:34">&amp;</operator> <name pos:start="49:36" pos:end="49:84">ASF_PL_MASK_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_SIZE</name></expr></argument>,

                 <argument pos:start="51:18" pos:end="51:62"><expr pos:start="51:18" pos:end="51:62"><name pos:start="51:18" pos:end="51:62">ASF_PL_FLAG_MEDIA_OBJECT_NUMBER_LENGTH_FIELD_</name></expr></argument>, <argument pos:start="51:65" pos:end="51:73"><expr pos:start="51:65" pos:end="51:73"><name pos:start="51:65" pos:end="51:73">media_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="55:78"><expr pos:start="53:9" pos:end="55:77"><call pos:start="53:9" pos:end="55:77"><name pos:start="53:9" pos:end="53:16">READ_LEN</name><argument_list pos:start="53:17" pos:end="55:77">(<argument pos:start="53:18" pos:end="53:89"><expr pos:start="53:18" pos:end="53:89"><name pos:start="53:18" pos:end="53:32"><name pos:start="53:18" pos:end="53:20">asf</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:32">prop_flags</name></name> <operator pos:start="53:34" pos:end="53:34">&amp;</operator> <name pos:start="53:36" pos:end="53:89">ASF_PL_MASK_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_SIZE</name></expr></argument>,

                 <argument pos:start="55:18" pos:end="55:67"><expr pos:start="55:18" pos:end="55:67"><name pos:start="55:18" pos:end="55:67">ASF_PL_FLAG_OFFSET_INTO_MEDIA_OBJECT_LENGTH_FIELD_</name></expr></argument>, <argument pos:start="55:70" pos:end="55:76"><expr pos:start="55:70" pos:end="55:76"><name pos:start="55:70" pos:end="55:76">off_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="59:79"><expr pos:start="57:9" pos:end="59:78"><call pos:start="57:9" pos:end="59:78"><name pos:start="57:9" pos:end="57:16">READ_LEN</name><argument_list pos:start="57:17" pos:end="59:78">(<argument pos:start="57:18" pos:end="57:80"><expr pos:start="57:18" pos:end="57:80"><name pos:start="57:18" pos:end="57:32"><name pos:start="57:18" pos:end="57:20">asf</name><operator pos:start="57:21" pos:end="57:22">-&gt;</operator><name pos:start="57:23" pos:end="57:32">prop_flags</name></name> <operator pos:start="57:34" pos:end="57:34">&amp;</operator> <name pos:start="57:36" pos:end="57:80">ASF_PL_MASK_REPLICATED_DATA_LENGTH_FIELD_SIZE</name></expr></argument>,

                 <argument pos:start="59:18" pos:end="59:58"><expr pos:start="59:18" pos:end="59:58"><name pos:start="59:18" pos:end="59:58">ASF_PL_FLAG_REPLICATED_DATA_LENGTH_FIELD_</name></expr></argument>, <argument pos:start="59:61" pos:end="59:77"><expr pos:start="59:61" pos:end="59:77"><name pos:start="59:61" pos:end="59:77"><name pos:start="59:61" pos:end="59:63">asf</name><operator pos:start="59:64" pos:end="59:65">-&gt;</operator><name pos:start="59:66" pos:end="59:77">rep_data_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:68">(<expr pos:start="61:13" pos:end="61:67"><name pos:start="61:13" pos:end="61:30"><name pos:start="61:13" pos:end="61:19">asf_pkt</name><operator pos:start="61:20" pos:end="61:21">-&gt;</operator><name pos:start="61:22" pos:end="61:30">size_left</name></name> <operator pos:start="61:32" pos:end="61:33">&amp;&amp;</operator> <operator pos:start="61:35" pos:end="61:35">(</operator><name pos:start="61:36" pos:end="61:53"><name pos:start="61:36" pos:end="61:42">asf_pkt</name><operator pos:start="61:43" pos:end="61:44">-&gt;</operator><name pos:start="61:45" pos:end="61:53">frame_num</name></name> <operator pos:start="61:55" pos:end="61:56">!=</operator> <name pos:start="61:58" pos:end="61:66">media_len</name><operator pos:start="61:67" pos:end="61:67">)</operator></expr>)</condition> <block pos:start="61:70" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:34">

            <expr_stmt pos:start="63:13" pos:end="63:76"><expr pos:start="63:13" pos:end="63:75"><call pos:start="63:13" pos:end="63:75"><name pos:start="63:13" pos:end="63:18">av_log</name><argument_list pos:start="63:19" pos:end="63:75">(<argument pos:start="63:20" pos:end="63:20"><expr pos:start="63:20" pos:end="63:20"><name pos:start="63:20" pos:end="63:20">s</name></expr></argument>, <argument pos:start="63:23" pos:end="63:36"><expr pos:start="63:23" pos:end="63:36"><name pos:start="63:23" pos:end="63:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="63:39" pos:end="63:74"><expr pos:start="63:39" pos:end="63:74"><literal type="string" pos:start="63:39" pos:end="63:74">"Unfinished frame will be ignored\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:34"><expr pos:start="65:13" pos:end="65:33"><call pos:start="65:13" pos:end="65:33"><name pos:start="65:13" pos:end="65:24">reset_packet</name><argument_list pos:start="65:25" pos:end="65:33">(<argument pos:start="65:26" pos:end="65:32"><expr pos:start="65:26" pos:end="65:32"><name pos:start="65:26" pos:end="65:32">asf_pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:39"><expr pos:start="69:9" pos:end="69:38"><name pos:start="69:9" pos:end="69:26"><name pos:start="69:9" pos:end="69:15">asf_pkt</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:26">frame_num</name></name> <operator pos:start="69:28" pos:end="69:28">=</operator> <name pos:start="69:30" pos:end="69:38">media_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:31"><expr pos:start="71:9" pos:end="71:30"><name pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:11">asf</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:20">sub_dts</name></name> <operator pos:start="71:22" pos:end="71:22">=</operator> <name pos:start="71:24" pos:end="71:30">off_len</name></expr>;</expr_stmt>

        <if_stmt pos:start="73:9" pos:end="97:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:30">(<expr pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:15">asf</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:29">nb_mult_left</name></name></expr>)</condition> <block pos:start="73:32" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:27">

            <if_stmt pos:start="75:13" pos:end="77:27"><if pos:start="75:13" pos:end="77:27">if <condition pos:start="75:16" pos:end="75:71">(<expr pos:start="75:17" pos:end="75:70"><operator pos:start="75:17" pos:end="75:17">(</operator><name pos:start="75:18" pos:end="75:20">ret</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <call pos:start="75:24" pos:end="75:65"><name pos:start="75:24" pos:end="75:48">asf_read_multiple_payload</name><argument_list pos:start="75:49" pos:end="75:65">(<argument pos:start="75:50" pos:end="75:50"><expr pos:start="75:50" pos:end="75:50"><name pos:start="75:50" pos:end="75:50">s</name></expr></argument>, <argument pos:start="75:53" pos:end="75:55"><expr pos:start="75:53" pos:end="75:55"><name pos:start="75:53" pos:end="75:55">pkt</name></expr></argument>, <argument pos:start="75:58" pos:end="75:64"><expr pos:start="75:58" pos:end="75:64"><name pos:start="75:58" pos:end="75:64">asf_pkt</name></expr></argument>)</argument_list></call><operator pos:start="75:66" pos:end="75:66">)</operator> <operator pos:start="75:68" pos:end="75:68">&lt;</operator> <literal type="number" pos:start="75:70" pos:end="75:70">0</literal></expr>)</condition><block type="pseudo" pos:start="77:17" pos:end="77:27"><block_content pos:start="77:17" pos:end="77:27">

                <return pos:start="77:17" pos:end="77:27">return <expr pos:start="77:24" pos:end="77:26"><name pos:start="77:24" pos:end="77:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="79:11" pos:end="91:9">else if <condition pos:start="79:19" pos:end="79:42">(<expr pos:start="79:20" pos:end="79:41"><name pos:start="79:20" pos:end="79:36"><name pos:start="79:20" pos:end="79:22">asf</name><operator pos:start="79:23" pos:end="79:24">-&gt;</operator><name pos:start="79:25" pos:end="79:36">rep_data_len</name></name> <operator pos:start="79:38" pos:end="79:39">==</operator> <literal type="number" pos:start="79:41" pos:end="79:41">1</literal></expr>)</condition> <block pos:start="79:44" pos:end="91:9">{<block_content pos:start="81:13" pos:end="89:27">

            <expr_stmt pos:start="81:13" pos:end="81:30"><expr pos:start="81:13" pos:end="81:29"><name pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:15">asf</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:25">sub_left</name></name> <operator pos:start="81:27" pos:end="81:27">=</operator> <literal type="number" pos:start="81:29" pos:end="81:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:40"><expr pos:start="83:13" pos:end="83:39"><name pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:15">asf</name><operator pos:start="83:16" pos:end="83:17">-&gt;</operator><name pos:start="83:18" pos:end="83:22">state</name></name>    <operator pos:start="83:27" pos:end="83:27">=</operator> <name pos:start="83:29" pos:end="83:39">READ_SINGLE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:43"><expr pos:start="85:13" pos:end="85:42"><name pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:15">pkt</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:22">flags</name></name>    <operator pos:start="85:27" pos:end="85:27">=</operator> <name pos:start="85:29" pos:end="85:42"><name pos:start="85:29" pos:end="85:35">asf_pkt</name><operator pos:start="85:36" pos:end="85:37">-&gt;</operator><name pos:start="85:38" pos:end="85:42">flags</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="89:27"><if pos:start="87:13" pos:end="89:27">if <condition pos:start="87:16" pos:end="87:59">(<expr pos:start="87:17" pos:end="87:58"><operator pos:start="87:17" pos:end="87:17">(</operator><name pos:start="87:18" pos:end="87:20">ret</name> <operator pos:start="87:22" pos:end="87:22">=</operator> <call pos:start="87:24" pos:end="87:53"><name pos:start="87:24" pos:end="87:42">asf_read_subpayload</name><argument_list pos:start="87:43" pos:end="87:53">(<argument pos:start="87:44" pos:end="87:44"><expr pos:start="87:44" pos:end="87:44"><name pos:start="87:44" pos:end="87:44">s</name></expr></argument>, <argument pos:start="87:47" pos:end="87:49"><expr pos:start="87:47" pos:end="87:49"><name pos:start="87:47" pos:end="87:49">pkt</name></expr></argument>, <argument pos:start="87:52" pos:end="87:52"><expr pos:start="87:52" pos:end="87:52"><literal type="number" pos:start="87:52" pos:end="87:52">1</literal></expr></argument>)</argument_list></call><operator pos:start="87:54" pos:end="87:54">)</operator> <operator pos:start="87:56" pos:end="87:56">&lt;</operator> <literal type="number" pos:start="87:58" pos:end="87:58">0</literal></expr>)</condition><block type="pseudo" pos:start="89:17" pos:end="89:27"><block_content pos:start="89:17" pos:end="89:27">

                <return pos:start="89:17" pos:end="89:27">return <expr pos:start="89:24" pos:end="89:26"><name pos:start="89:24" pos:end="89:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="91:11" pos:end="97:9">else <block pos:start="91:16" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:27">

            <if_stmt pos:start="93:13" pos:end="95:27"><if pos:start="93:13" pos:end="95:27">if <condition pos:start="93:16" pos:end="93:69">(<expr pos:start="93:17" pos:end="93:68"><operator pos:start="93:17" pos:end="93:17">(</operator><name pos:start="93:18" pos:end="93:20">ret</name> <operator pos:start="93:22" pos:end="93:22">=</operator> <call pos:start="93:24" pos:end="93:63"><name pos:start="93:24" pos:end="93:46">asf_read_single_payload</name><argument_list pos:start="93:47" pos:end="93:63">(<argument pos:start="93:48" pos:end="93:48"><expr pos:start="93:48" pos:end="93:48"><name pos:start="93:48" pos:end="93:48">s</name></expr></argument>, <argument pos:start="93:51" pos:end="93:53"><expr pos:start="93:51" pos:end="93:53"><name pos:start="93:51" pos:end="93:53">pkt</name></expr></argument>, <argument pos:start="93:56" pos:end="93:62"><expr pos:start="93:56" pos:end="93:62"><name pos:start="93:56" pos:end="93:62">asf_pkt</name></expr></argument>)</argument_list></call><operator pos:start="93:64" pos:end="93:64">)</operator> <operator pos:start="93:66" pos:end="93:66">&lt;</operator> <literal type="number" pos:start="93:68" pos:end="93:68">0</literal></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:27"><block_content pos:start="95:17" pos:end="95:27">

                <return pos:start="95:17" pos:end="95:27">return <expr pos:start="95:24" pos:end="95:26"><name pos:start="95:24" pos:end="95:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="99:7" pos:end="127:5">else <block pos:start="99:12" pos:end="127:5">{<block_content pos:start="101:9" pos:end="125:23">

        <for pos:start="101:9" pos:end="111:9">for <control pos:start="101:13" pos:end="101:46">(<init pos:start="101:14" pos:end="101:19"><expr pos:start="101:14" pos:end="101:18"><name pos:start="101:14" pos:end="101:14">i</name> <operator pos:start="101:16" pos:end="101:16">=</operator> <literal type="number" pos:start="101:18" pos:end="101:18">0</literal></expr>;</init> <condition pos:start="101:21" pos:end="101:41"><expr pos:start="101:21" pos:end="101:40"><name pos:start="101:21" pos:end="101:21">i</name> <operator pos:start="101:23" pos:end="101:24">&lt;=</operator> <name pos:start="101:26" pos:end="101:40"><name pos:start="101:26" pos:end="101:28">asf</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:40">nb_streams</name></name></expr>;</condition> <incr pos:start="101:43" pos:end="101:45"><expr pos:start="101:43" pos:end="101:45"><name pos:start="101:43" pos:end="101:43">i</name><operator pos:start="101:44" pos:end="101:45">++</operator></expr></incr>)</control> <block pos:start="101:48" pos:end="111:9">{<block_content pos:start="103:13" pos:end="109:13">

            <if_stmt pos:start="103:13" pos:end="109:13"><if pos:start="103:13" pos:end="109:13">if <condition pos:start="103:16" pos:end="103:66">(<expr pos:start="103:17" pos:end="103:65"><name pos:start="103:17" pos:end="103:33"><name pos:start="103:17" pos:end="103:19">asf</name><operator pos:start="103:20" pos:end="103:21">-&gt;</operator><name pos:start="103:22" pos:end="103:33">stream_index</name></name> <operator pos:start="103:35" pos:end="103:36">==</operator> <name pos:start="103:38" pos:end="103:51"><name pos:start="103:38" pos:end="103:40">asf</name><operator pos:start="103:41" pos:end="103:42">-&gt;</operator><name pos:start="103:43" pos:end="103:48">asf_st</name><index pos:start="103:49" pos:end="103:51">[<expr pos:start="103:50" pos:end="103:50"><name pos:start="103:50" pos:end="103:50">i</name></expr>]</index></name><operator pos:start="103:52" pos:end="103:53">-&gt;</operator><name pos:start="103:54" pos:end="103:65">stream_index</name></expr>)</condition> <block pos:start="103:68" pos:end="109:13">{<block_content pos:start="105:17" pos:end="107:22">

                <expr_stmt pos:start="105:17" pos:end="105:47"><expr pos:start="105:17" pos:end="105:46"><name pos:start="105:17" pos:end="105:23">asf_pkt</name> <operator pos:start="105:25" pos:end="105:25">=</operator> <operator pos:start="105:27" pos:end="105:27">&amp;</operator><name pos:start="105:28" pos:end="105:41"><name pos:start="105:28" pos:end="105:30">asf</name><operator pos:start="105:31" pos:end="105:32">-&gt;</operator><name pos:start="105:33" pos:end="105:38">asf_st</name><index pos:start="105:39" pos:end="105:41">[<expr pos:start="105:40" pos:end="105:40"><name pos:start="105:40" pos:end="105:40">i</name></expr>]</index></name><operator pos:start="105:42" pos:end="105:43">-&gt;</operator><name pos:start="105:44" pos:end="105:46">pkt</name></expr>;</expr_stmt>

                <break pos:start="107:17" pos:end="107:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="113:9" pos:end="115:39"><if pos:start="113:9" pos:end="115:39">if <condition pos:start="113:12" pos:end="113:21">(<expr pos:start="113:13" pos:end="113:20"><operator pos:start="113:13" pos:end="113:13">!</operator><name pos:start="113:14" pos:end="113:20">asf_pkt</name></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:39"><block_content pos:start="115:13" pos:end="115:39">

            <return pos:start="115:13" pos:end="115:39">return <expr pos:start="115:20" pos:end="115:38"><name pos:start="115:20" pos:end="115:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:44"><expr pos:start="117:9" pos:end="117:43"><name pos:start="117:9" pos:end="117:18"><name pos:start="117:9" pos:end="117:11">pkt</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:18">flags</name></name>         <operator pos:start="117:28" pos:end="117:28">=</operator> <name pos:start="117:30" pos:end="117:43"><name pos:start="117:30" pos:end="117:36">asf_pkt</name><operator pos:start="117:37" pos:end="117:38">-&gt;</operator><name pos:start="117:39" pos:end="117:43">flags</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:42"><expr pos:start="119:9" pos:end="119:41"><name pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:11">pkt</name><operator pos:start="119:12" pos:end="119:13">-&gt;</operator><name pos:start="119:14" pos:end="119:16">dts</name></name>           <operator pos:start="119:28" pos:end="119:28">=</operator> <name pos:start="119:30" pos:end="119:41"><name pos:start="119:30" pos:end="119:36">asf_pkt</name><operator pos:start="119:37" pos:end="119:38">-&gt;</operator><name pos:start="119:39" pos:end="119:41">dts</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:51"><expr pos:start="121:9" pos:end="121:50"><name pos:start="121:9" pos:end="121:25"><name pos:start="121:9" pos:end="121:11">pkt</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:25">stream_index</name></name>  <operator pos:start="121:28" pos:end="121:28">=</operator> <name pos:start="121:30" pos:end="121:43"><name pos:start="121:30" pos:end="121:32">asf</name><operator pos:start="121:33" pos:end="121:34">-&gt;</operator><name pos:start="121:35" pos:end="121:40">asf_st</name><index pos:start="121:41" pos:end="121:43">[<expr pos:start="121:42" pos:end="121:42"><name pos:start="121:42" pos:end="121:42">i</name></expr>]</index></name><operator pos:start="121:44" pos:end="121:45">-&gt;</operator><name pos:start="121:46" pos:end="121:50">index</name></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="125:23"><if pos:start="123:9" pos:end="125:23">if <condition pos:start="123:12" pos:end="123:55">(<expr pos:start="123:13" pos:end="123:54"><operator pos:start="123:13" pos:end="123:13">(</operator><name pos:start="123:14" pos:end="123:16">ret</name> <operator pos:start="123:18" pos:end="123:18">=</operator> <call pos:start="123:20" pos:end="123:49"><name pos:start="123:20" pos:end="123:38">asf_read_subpayload</name><argument_list pos:start="123:39" pos:end="123:49">(<argument pos:start="123:40" pos:end="123:40"><expr pos:start="123:40" pos:end="123:40"><name pos:start="123:40" pos:end="123:40">s</name></expr></argument>, <argument pos:start="123:43" pos:end="123:45"><expr pos:start="123:43" pos:end="123:45"><name pos:start="123:43" pos:end="123:45">pkt</name></expr></argument>, <argument pos:start="123:48" pos:end="123:48"><expr pos:start="123:48" pos:end="123:48"><literal type="number" pos:start="123:48" pos:end="123:48">0</literal></expr></argument>)</argument_list></call><operator pos:start="123:50" pos:end="123:50">)</operator> <operator pos:start="123:52" pos:end="123:52">&lt;</operator> <literal type="number" pos:start="123:54" pos:end="123:54">0</literal></expr>)</condition><block type="pseudo" pos:start="125:13" pos:end="125:23"><block_content pos:start="125:13" pos:end="125:23"> <comment type="line" pos:start="123:57" pos:end="123:93">// read subpayload without its header</comment>

            <return pos:start="125:13" pos:end="125:23">return <expr pos:start="125:20" pos:end="125:22"><name pos:start="125:20" pos:end="125:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="131:5" pos:end="131:13">return <expr pos:start="131:12" pos:end="131:12"><literal type="number" pos:start="131:12" pos:end="131:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
