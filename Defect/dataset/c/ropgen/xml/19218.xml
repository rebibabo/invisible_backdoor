<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19218.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">net_socket_listen_init</name><parameter_list pos:start="1:34" pos:end="7:55">(<parameter pos:start="1:35" pos:end="1:49"><decl pos:start="1:35" pos:end="1:49"><type pos:start="1:35" pos:end="1:49"><name pos:start="1:35" pos:end="1:43">VLANState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">vlan</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:51"><decl pos:start="3:35" pos:end="3:51"><type pos:start="3:35" pos:end="3:51"><specifier pos:start="3:35" pos:end="3:39">const</specifier> <name pos:start="3:41" pos:end="3:44">char</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:51">model</name></decl></parameter>,

                                  <parameter pos:start="5:35" pos:end="5:50"><decl pos:start="5:35" pos:end="5:50"><type pos:start="5:35" pos:end="5:50"><specifier pos:start="5:35" pos:end="5:39">const</specifier> <name pos:start="5:41" pos:end="5:44">char</name> <modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:50">name</name></decl></parameter>,

                                  <parameter pos:start="7:35" pos:end="7:54"><decl pos:start="7:35" pos:end="7:54"><type pos:start="7:35" pos:end="7:54"><specifier pos:start="7:35" pos:end="7:39">const</specifier> <name pos:start="7:41" pos:end="7:44">char</name> <modifier pos:start="7:46" pos:end="7:46">*</modifier></type><name pos:start="7:47" pos:end="7:54">host_str</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="91:1">{<block_content pos:start="11:5" pos:end="89:13">

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:26"><name pos:start="11:5" pos:end="11:24">NetSocketListenState</name> <modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:27">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:10"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">fd</name></decl>, <decl pos:start="13:13" pos:end="13:15"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:13" pos:end="13:15">val</name></decl>, <decl pos:start="13:18" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:20">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:22">sockaddr_in</name></name></type> <name pos:start="15:24" pos:end="15:28">saddr</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="21:18"><if pos:start="19:5" pos:end="21:18">if <condition pos:start="19:8" pos:end="19:46">(<expr pos:start="19:9" pos:end="19:45"><call pos:start="19:9" pos:end="19:41"><name pos:start="19:9" pos:end="19:23">parse_host_port</name><argument_list pos:start="19:24" pos:end="19:41">(<argument pos:start="19:25" pos:end="19:30"><expr pos:start="19:25" pos:end="19:30"><operator pos:start="19:25" pos:end="19:25">&amp;</operator><name pos:start="19:26" pos:end="19:30">saddr</name></expr></argument>, <argument pos:start="19:33" pos:end="19:40"><expr pos:start="19:33" pos:end="19:40"><name pos:start="19:33" pos:end="19:40">host_str</name></expr></argument>)</argument_list></call> <operator pos:start="19:43" pos:end="19:43">&lt;</operator> <literal type="number" pos:start="19:45" pos:end="19:45">0</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:18"><block_content pos:start="21:9" pos:end="21:18">

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:48"><expr pos:start="25:5" pos:end="25:47"><name pos:start="25:5" pos:end="25:5">s</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <call pos:start="25:9" pos:end="25:47"><name pos:start="25:9" pos:end="25:17">g_malloc0</name><argument_list pos:start="25:18" pos:end="25:47">(<argument pos:start="25:19" pos:end="25:46"><expr pos:start="25:19" pos:end="25:46"><sizeof pos:start="25:19" pos:end="25:46">sizeof<argument_list pos:start="25:25" pos:end="25:46">(<argument pos:start="25:26" pos:end="25:45"><expr pos:start="25:26" pos:end="25:45"><name pos:start="25:26" pos:end="25:45">NetSocketListenState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:46"><expr pos:start="29:5" pos:end="29:45"><name pos:start="29:5" pos:end="29:6">fd</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <call pos:start="29:10" pos:end="29:45"><name pos:start="29:10" pos:end="29:20">qemu_socket</name><argument_list pos:start="29:21" pos:end="29:45">(<argument pos:start="29:22" pos:end="29:28"><expr pos:start="29:22" pos:end="29:28"><name pos:start="29:22" pos:end="29:28">PF_INET</name></expr></argument>, <argument pos:start="29:31" pos:end="29:41"><expr pos:start="29:31" pos:end="29:41"><name pos:start="29:31" pos:end="29:41">SOCK_STREAM</name></expr></argument>, <argument pos:start="29:44" pos:end="29:44"><expr pos:start="29:44" pos:end="29:44"><literal type="number" pos:start="29:44" pos:end="29:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:15">(<expr pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:10">fd</name> <operator pos:start="31:12" pos:end="31:12">&lt;</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>)</condition> <block pos:start="31:17" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:18">

        <expr_stmt pos:start="33:9" pos:end="33:25"><expr pos:start="33:9" pos:end="33:24"><call pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:14">perror</name><argument_list pos:start="33:15" pos:end="33:24">(<argument pos:start="33:16" pos:end="33:23"><expr pos:start="33:16" pos:end="33:23"><literal type="string" pos:start="33:16" pos:end="33:23">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:18"><expr pos:start="35:9" pos:end="35:17"><call pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:14">g_free</name><argument_list pos:start="35:15" pos:end="35:17">(<argument pos:start="35:16" pos:end="35:16"><expr pos:start="35:16" pos:end="35:16"><name pos:start="35:16" pos:end="35:16">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:18">return <expr pos:start="37:16" pos:end="37:17"><operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:28"><expr pos:start="41:5" pos:end="41:27"><call pos:start="41:5" pos:end="41:27"><name pos:start="41:5" pos:end="41:23">socket_set_nonblock</name><argument_list pos:start="41:24" pos:end="41:27">(<argument pos:start="41:25" pos:end="41:26"><expr pos:start="41:25" pos:end="41:26"><name pos:start="41:25" pos:end="41:26">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:26">/* allow fast reuse */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:12"><expr pos:start="47:5" pos:end="47:11"><name pos:start="47:5" pos:end="47:7">val</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <literal type="number" pos:start="47:11" pos:end="47:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:78"><expr pos:start="49:5" pos:end="49:77"><call pos:start="49:5" pos:end="49:77"><name pos:start="49:5" pos:end="49:14">setsockopt</name><argument_list pos:start="49:15" pos:end="49:77">(<argument pos:start="49:16" pos:end="49:17"><expr pos:start="49:16" pos:end="49:17"><name pos:start="49:16" pos:end="49:17">fd</name></expr></argument>, <argument pos:start="49:20" pos:end="49:29"><expr pos:start="49:20" pos:end="49:29"><name pos:start="49:20" pos:end="49:29">SOL_SOCKET</name></expr></argument>, <argument pos:start="49:32" pos:end="49:43"><expr pos:start="49:32" pos:end="49:43"><name pos:start="49:32" pos:end="49:43">SO_REUSEADDR</name></expr></argument>, <argument pos:start="49:46" pos:end="49:63"><expr pos:start="49:46" pos:end="49:63"><operator pos:start="49:46" pos:end="49:46">(</operator><specifier pos:start="49:47" pos:end="49:51">const</specifier> <name pos:start="49:53" pos:end="49:56">char</name> <operator pos:start="49:58" pos:end="49:58">*</operator><operator pos:start="49:59" pos:end="49:59">)</operator><operator pos:start="49:60" pos:end="49:60">&amp;</operator><name pos:start="49:61" pos:end="49:63">val</name></expr></argument>, <argument pos:start="49:66" pos:end="49:76"><expr pos:start="49:66" pos:end="49:76"><sizeof pos:start="49:66" pos:end="49:76">sizeof<argument_list pos:start="49:72" pos:end="49:76">(<argument pos:start="49:73" pos:end="49:75"><expr pos:start="49:73" pos:end="49:75"><name pos:start="49:73" pos:end="49:75">val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:61"><expr pos:start="53:5" pos:end="53:60"><name pos:start="53:5" pos:end="53:7">ret</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:60"><name pos:start="53:11" pos:end="53:14">bind</name><argument_list pos:start="53:15" pos:end="53:60">(<argument pos:start="53:16" pos:end="53:17"><expr pos:start="53:16" pos:end="53:17"><name pos:start="53:16" pos:end="53:17">fd</name></expr></argument>, <argument pos:start="53:20" pos:end="53:44"><expr pos:start="53:20" pos:end="53:44"><operator pos:start="53:20" pos:end="53:20">(</operator>struct <name pos:start="53:28" pos:end="53:35">sockaddr</name> <operator pos:start="53:37" pos:end="53:37">*</operator><operator pos:start="53:38" pos:end="53:38">)</operator><operator pos:start="53:39" pos:end="53:39">&amp;</operator><name pos:start="53:40" pos:end="53:44">saddr</name></expr></argument>, <argument pos:start="53:47" pos:end="53:59"><expr pos:start="53:47" pos:end="53:59"><sizeof pos:start="53:47" pos:end="53:59">sizeof<argument_list pos:start="53:53" pos:end="53:59">(<argument pos:start="53:54" pos:end="53:58"><expr pos:start="53:54" pos:end="53:58"><name pos:start="53:54" pos:end="53:58">saddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="64:5"><if pos:start="55:5" pos:end="64:5">if <condition pos:start="55:8" pos:end="55:16">(<expr pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">&lt;</operator> <literal type="number" pos:start="55:15" pos:end="55:15">0</literal></expr>)</condition> <block pos:start="55:18" pos:end="64:5">{<block_content pos:start="57:9" pos:end="62:18">

        <expr_stmt pos:start="57:9" pos:end="57:23"><expr pos:start="57:9" pos:end="57:22"><call pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:14">perror</name><argument_list pos:start="57:15" pos:end="57:22">(<argument pos:start="57:16" pos:end="57:21"><expr pos:start="57:16" pos:end="57:21"><literal type="string" pos:start="57:16" pos:end="57:21">"bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:18"><expr pos:start="59:9" pos:end="59:17"><call pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:14">g_free</name><argument_list pos:start="59:15" pos:end="59:17">(<argument pos:start="59:16" pos:end="59:16"><expr pos:start="59:16" pos:end="59:16"><name pos:start="59:16" pos:end="59:16">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <return pos:start="62:9" pos:end="62:18">return <expr pos:start="62:16" pos:end="62:17"><operator pos:start="62:16" pos:end="62:16">-</operator><literal type="number" pos:start="62:17" pos:end="62:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="66:5" pos:end="66:24"><expr pos:start="66:5" pos:end="66:23"><name pos:start="66:5" pos:end="66:7">ret</name> <operator pos:start="66:9" pos:end="66:9">=</operator> <call pos:start="66:11" pos:end="66:23"><name pos:start="66:11" pos:end="66:16">listen</name><argument_list pos:start="66:17" pos:end="66:23">(<argument pos:start="66:18" pos:end="66:19"><expr pos:start="66:18" pos:end="66:19"><name pos:start="66:18" pos:end="66:19">fd</name></expr></argument>, <argument pos:start="66:22" pos:end="66:22"><expr pos:start="66:22" pos:end="66:22"><literal type="number" pos:start="66:22" pos:end="66:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="68:5" pos:end="77:5"><if pos:start="68:5" pos:end="77:5">if <condition pos:start="68:8" pos:end="68:16">(<expr pos:start="68:9" pos:end="68:15"><name pos:start="68:9" pos:end="68:11">ret</name> <operator pos:start="68:13" pos:end="68:13">&lt;</operator> <literal type="number" pos:start="68:15" pos:end="68:15">0</literal></expr>)</condition> <block pos:start="68:18" pos:end="77:5">{<block_content pos:start="70:9" pos:end="75:18">

        <expr_stmt pos:start="70:9" pos:end="70:25"><expr pos:start="70:9" pos:end="70:24"><call pos:start="70:9" pos:end="70:24"><name pos:start="70:9" pos:end="70:14">perror</name><argument_list pos:start="70:15" pos:end="70:24">(<argument pos:start="70:16" pos:end="70:23"><expr pos:start="70:16" pos:end="70:23"><literal type="string" pos:start="70:16" pos:end="70:23">"listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="72:9" pos:end="72:18"><expr pos:start="72:9" pos:end="72:17"><call pos:start="72:9" pos:end="72:17"><name pos:start="72:9" pos:end="72:14">g_free</name><argument_list pos:start="72:15" pos:end="72:17">(<argument pos:start="72:16" pos:end="72:16"><expr pos:start="72:16" pos:end="72:16"><name pos:start="72:16" pos:end="72:16">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <return pos:start="75:9" pos:end="75:18">return <expr pos:start="75:16" pos:end="75:17"><operator pos:start="75:16" pos:end="75:16">-</operator><literal type="number" pos:start="75:17" pos:end="75:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:19"><expr pos:start="79:5" pos:end="79:18"><name pos:start="79:5" pos:end="79:11"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:11">vlan</name></name> <operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:18">vlan</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:31"><expr pos:start="81:5" pos:end="81:30"><name pos:start="81:5" pos:end="81:12"><name pos:start="81:5" pos:end="81:5">s</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:12">model</name></name> <operator pos:start="81:14" pos:end="81:14">=</operator> <call pos:start="81:16" pos:end="81:30"><name pos:start="81:16" pos:end="81:23">g_strdup</name><argument_list pos:start="81:24" pos:end="81:30">(<argument pos:start="81:25" pos:end="81:29"><expr pos:start="81:25" pos:end="81:29"><name pos:start="81:25" pos:end="81:29">model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:43"><expr pos:start="83:5" pos:end="83:42"><name pos:start="83:5" pos:end="83:11"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:11">name</name></name> <operator pos:start="83:13" pos:end="83:13">=</operator> <ternary pos:start="83:15" pos:end="83:42"><condition pos:start="83:15" pos:end="83:20"><expr pos:start="83:15" pos:end="83:18"><name pos:start="83:15" pos:end="83:18">name</name></expr> ?</condition><then pos:start="83:22" pos:end="83:35"> <expr pos:start="83:22" pos:end="83:35"><call pos:start="83:22" pos:end="83:35"><name pos:start="83:22" pos:end="83:29">g_strdup</name><argument_list pos:start="83:30" pos:end="83:35">(<argument pos:start="83:31" pos:end="83:34"><expr pos:start="83:31" pos:end="83:34"><name pos:start="83:31" pos:end="83:34">name</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="83:37" pos:end="83:42">: <expr pos:start="83:39" pos:end="83:42"><name pos:start="83:39" pos:end="83:42">NULL</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:15"><expr pos:start="85:5" pos:end="85:14"><name pos:start="85:5" pos:end="85:9"><name pos:start="85:5" pos:end="85:5">s</name><operator pos:start="85:6" pos:end="85:7">-&gt;</operator><name pos:start="85:8" pos:end="85:9">fd</name></name> <operator pos:start="85:11" pos:end="85:11">=</operator> <name pos:start="85:13" pos:end="85:14">fd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:56"><expr pos:start="87:5" pos:end="87:55"><call pos:start="87:5" pos:end="87:55"><name pos:start="87:5" pos:end="87:23">qemu_set_fd_handler</name><argument_list pos:start="87:24" pos:end="87:55">(<argument pos:start="87:25" pos:end="87:26"><expr pos:start="87:25" pos:end="87:26"><name pos:start="87:25" pos:end="87:26">fd</name></expr></argument>, <argument pos:start="87:29" pos:end="87:45"><expr pos:start="87:29" pos:end="87:45"><name pos:start="87:29" pos:end="87:45">net_socket_accept</name></expr></argument>, <argument pos:start="87:48" pos:end="87:51"><expr pos:start="87:48" pos:end="87:51"><name pos:start="87:48" pos:end="87:51">NULL</name></expr></argument>, <argument pos:start="87:54" pos:end="87:54"><expr pos:start="87:54" pos:end="87:54"><name pos:start="87:54" pos:end="87:54">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
