<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5485.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:27">file_ram_alloc</name><parameter_list pos:start="1:28" pos:end="7:41">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:36">RAMBlock</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:43">block</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:45"><decl pos:start="3:29" pos:end="3:45"><type pos:start="3:29" pos:end="3:45"><name pos:start="3:29" pos:end="3:38">ram_addr_t</name></type> <name pos:start="3:40" pos:end="3:45">memory</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:44"><decl pos:start="5:29" pos:end="5:44"><type pos:start="5:29" pos:end="5:44"><specifier pos:start="5:29" pos:end="5:33">const</specifier> <name pos:start="5:35" pos:end="5:38">char</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:44">path</name></decl></parameter>,

                            <parameter pos:start="7:29" pos:end="7:40"><decl pos:start="7:29" pos:end="7:40"><type pos:start="7:29" pos:end="7:40"><name pos:start="7:29" pos:end="7:33">Error</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier><modifier pos:start="7:36" pos:end="7:36">*</modifier></type><name pos:start="7:37" pos:end="7:40">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="167:1">{<block_content pos:start="11:5" pos:end="165:16">

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:24">sanitized_name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:11">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:15"><decl pos:start="17:5" pos:end="17:14"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:14">area</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:11"><decl pos:start="19:5" pos:end="19:10"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:10">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:22">hpagesize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">Error</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:20">local_err</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:50"><expr pos:start="27:5" pos:end="27:49"><name pos:start="27:5" pos:end="27:13">hpagesize</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:49"><name pos:start="27:17" pos:end="27:31">gethugepagesize</name><argument_list pos:start="27:32" pos:end="27:49">(<argument pos:start="27:33" pos:end="27:36"><expr pos:start="27:33" pos:end="27:36"><name pos:start="27:33" pos:end="27:36">path</name></expr></argument>, <argument pos:start="27:39" pos:end="27:48"><expr pos:start="27:39" pos:end="27:48"><operator pos:start="27:39" pos:end="27:39">&amp;</operator><name pos:start="27:40" pos:end="27:48">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:18">(<expr pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:17">local_err</name></expr>)</condition> <block pos:start="29:20" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:19">

        <expr_stmt pos:start="31:9" pos:end="31:41"><expr pos:start="31:9" pos:end="31:40"><call pos:start="31:9" pos:end="31:40"><name pos:start="31:9" pos:end="31:23">error_propagate</name><argument_list pos:start="31:24" pos:end="31:40">(<argument pos:start="31:25" pos:end="31:28"><expr pos:start="31:25" pos:end="31:28"><name pos:start="31:25" pos:end="31:28">errp</name></expr></argument>, <argument pos:start="31:31" pos:end="31:39"><expr pos:start="31:31" pos:end="31:39"><name pos:start="31:31" pos:end="31:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="33:9" pos:end="33:19">goto <name pos:start="33:14" pos:end="33:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:20"><name pos:start="37:5" pos:end="37:9">block</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:13">mr</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:20">align</name></name> <operator pos:start="37:22" pos:end="37:22">=</operator> <name pos:start="37:24" pos:end="37:32">hpagesize</name></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="51:5"><if pos:start="41:5" pos:end="51:5">if <condition pos:start="41:8" pos:end="41:27">(<expr pos:start="41:9" pos:end="41:26"><name pos:start="41:9" pos:end="41:14">memory</name> <operator pos:start="41:16" pos:end="41:16">&lt;</operator> <name pos:start="41:18" pos:end="41:26">hpagesize</name></expr>)</condition> <block pos:start="41:29" pos:end="51:5">{<block_content pos:start="43:9" pos:end="49:19">

        <expr_stmt pos:start="43:9" pos:end="47:38"><expr pos:start="43:9" pos:end="47:37"><call pos:start="43:9" pos:end="47:37"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="47:37">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>, <argument pos:start="43:26" pos:end="45:61"><expr pos:start="43:26" pos:end="45:61"><literal type="string" pos:start="43:26" pos:end="43:41">"memory size 0x"</literal> <name pos:start="43:43" pos:end="43:54">RAM_ADDR_FMT</name> <literal type="string" pos:start="43:56" pos:end="43:75">" must be equal to "</literal>

                   <literal type="string" pos:start="45:20" pos:end="45:54">"or larger than huge page size 0x%"</literal> <name pos:start="45:56" pos:end="45:61">PRIx64</name></expr></argument>,

                   <argument pos:start="47:20" pos:end="47:25"><expr pos:start="47:20" pos:end="47:25"><name pos:start="47:20" pos:end="47:25">memory</name></expr></argument>, <argument pos:start="47:28" pos:end="47:36"><expr pos:start="47:28" pos:end="47:36"><name pos:start="47:28" pos:end="47:36">hpagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:19">goto <name pos:start="49:14" pos:end="49:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:45">(<expr pos:start="55:9" pos:end="55:44"><call pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:19">kvm_enabled</name><argument_list pos:start="55:20" pos:end="55:21">()</argument_list></call> <operator pos:start="55:23" pos:end="55:24">&amp;&amp;</operator> <operator pos:start="55:26" pos:end="55:26">!</operator><call pos:start="55:27" pos:end="55:44"><name pos:start="55:27" pos:end="55:42">kvm_has_sync_mmu</name><argument_list pos:start="55:43" pos:end="55:44">()</argument_list></call></expr>)</condition> <block pos:start="55:47" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:19">

        <expr_stmt pos:start="57:9" pos:end="59:74"><expr pos:start="57:9" pos:end="59:73"><call pos:start="57:9" pos:end="59:73"><name pos:start="57:9" pos:end="57:18">error_setg</name><argument_list pos:start="57:19" pos:end="59:73">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">errp</name></expr></argument>,

                   <argument pos:start="59:20" pos:end="59:72"><expr pos:start="59:20" pos:end="59:72"><literal type="string" pos:start="59:20" pos:end="59:72">"host lacks kvm mmu notifiers, -mem-path unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="61:9" pos:end="61:19">goto <name pos:start="61:14" pos:end="61:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:71">/* Make name safe to use with mkstemp by replacing '/' with '_'. */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:61"><expr pos:start="69:5" pos:end="69:60"><name pos:start="69:5" pos:end="69:18">sanitized_name</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <call pos:start="69:22" pos:end="69:60"><name pos:start="69:22" pos:end="69:29">g_strdup</name><argument_list pos:start="69:30" pos:end="69:60">(<argument pos:start="69:31" pos:end="69:59"><expr pos:start="69:31" pos:end="69:59"><call pos:start="69:31" pos:end="69:59"><name pos:start="69:31" pos:end="69:48">memory_region_name</name><argument_list pos:start="69:49" pos:end="69:59">(<argument pos:start="69:50" pos:end="69:58"><expr pos:start="69:50" pos:end="69:58"><name pos:start="69:50" pos:end="69:58"><name pos:start="69:50" pos:end="69:54">block</name><operator pos:start="69:55" pos:end="69:56">-&gt;</operator><name pos:start="69:57" pos:end="69:58">mr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="71:5" pos:end="77:5">for <control pos:start="71:9" pos:end="71:45">(<init pos:start="71:10" pos:end="71:28"><expr pos:start="71:10" pos:end="71:27"><name pos:start="71:10" pos:end="71:10">c</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <name pos:start="71:14" pos:end="71:27">sanitized_name</name></expr>;</init> <condition pos:start="71:30" pos:end="71:40"><expr pos:start="71:30" pos:end="71:39"><operator pos:start="71:30" pos:end="71:30">*</operator><name pos:start="71:31" pos:end="71:31">c</name> <operator pos:start="71:33" pos:end="71:34">!=</operator> <literal type="char" pos:start="71:36" pos:end="71:39">'\0'</literal></expr>;</condition> <incr pos:start="71:42" pos:end="71:44"><expr pos:start="71:42" pos:end="71:44"><name pos:start="71:42" pos:end="71:42">c</name><operator pos:start="71:43" pos:end="71:44">++</operator></expr></incr>)</control> <block pos:start="71:47" pos:end="77:5">{<block_content pos:start="73:9" pos:end="75:21">

        <if_stmt pos:start="73:9" pos:end="75:21"><if pos:start="73:9" pos:end="75:21">if <condition pos:start="73:12" pos:end="73:22">(<expr pos:start="73:13" pos:end="73:21"><operator pos:start="73:13" pos:end="73:13">*</operator><name pos:start="73:14" pos:end="73:14">c</name> <operator pos:start="73:16" pos:end="73:17">==</operator> <literal type="char" pos:start="73:19" pos:end="73:21">'/'</literal></expr>)</condition><block type="pseudo" pos:start="75:13" pos:end="75:21"><block_content pos:start="75:13" pos:end="75:21">

            <expr_stmt pos:start="75:13" pos:end="75:21"><expr pos:start="75:13" pos:end="75:20"><operator pos:start="75:13" pos:end="75:13">*</operator><name pos:start="75:14" pos:end="75:14">c</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <literal type="char" pos:start="75:18" pos:end="75:20">'_'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="81:5" pos:end="83:47"><expr pos:start="81:5" pos:end="83:46"><name pos:start="81:5" pos:end="81:12">filename</name> <operator pos:start="81:14" pos:end="81:14">=</operator> <call pos:start="81:16" pos:end="83:46"><name pos:start="81:16" pos:end="81:30">g_strdup_printf</name><argument_list pos:start="81:31" pos:end="83:46">(<argument pos:start="81:32" pos:end="81:59"><expr pos:start="81:32" pos:end="81:59"><literal type="string" pos:start="81:32" pos:end="81:59">"%s/qemu_back_mem.%s.XXXXXX"</literal></expr></argument>, <argument pos:start="81:62" pos:end="81:65"><expr pos:start="81:62" pos:end="81:65"><name pos:start="81:62" pos:end="81:65">path</name></expr></argument>,

                               <argument pos:start="83:32" pos:end="83:45"><expr pos:start="83:32" pos:end="83:45"><name pos:start="83:32" pos:end="83:45">sanitized_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:27"><expr pos:start="85:5" pos:end="85:26"><call pos:start="85:5" pos:end="85:26"><name pos:start="85:5" pos:end="85:10">g_free</name><argument_list pos:start="85:11" pos:end="85:26">(<argument pos:start="85:12" pos:end="85:25"><expr pos:start="85:12" pos:end="85:25"><name pos:start="85:12" pos:end="85:25">sanitized_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:27"><expr pos:start="89:5" pos:end="89:26"><name pos:start="89:5" pos:end="89:6">fd</name> <operator pos:start="89:8" pos:end="89:8">=</operator> <call pos:start="89:10" pos:end="89:26"><name pos:start="89:10" pos:end="89:16">mkstemp</name><argument_list pos:start="89:17" pos:end="89:26">(<argument pos:start="89:18" pos:end="89:25"><expr pos:start="89:18" pos:end="89:25"><name pos:start="89:18" pos:end="89:25">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="101:5"><if pos:start="91:5" pos:end="101:5">if <condition pos:start="91:8" pos:end="91:15">(<expr pos:start="91:9" pos:end="91:14"><name pos:start="91:9" pos:end="91:10">fd</name> <operator pos:start="91:12" pos:end="91:12">&lt;</operator> <literal type="number" pos:start="91:14" pos:end="91:14">0</literal></expr>)</condition> <block pos:start="91:17" pos:end="101:5">{<block_content pos:start="93:9" pos:end="99:19">

        <expr_stmt pos:start="93:9" pos:end="95:73"><expr pos:start="93:9" pos:end="95:72"><call pos:start="93:9" pos:end="95:72"><name pos:start="93:9" pos:end="93:24">error_setg_errno</name><argument_list pos:start="93:25" pos:end="95:72">(<argument pos:start="93:26" pos:end="93:29"><expr pos:start="93:26" pos:end="93:29"><name pos:start="93:26" pos:end="93:29">errp</name></expr></argument>, <argument pos:start="93:32" pos:end="93:36"><expr pos:start="93:32" pos:end="93:36"><name pos:start="93:32" pos:end="93:36">errno</name></expr></argument>,

                         <argument pos:start="95:26" pos:end="95:71"><expr pos:start="95:26" pos:end="95:71"><literal type="string" pos:start="95:26" pos:end="95:71">"unable to create backing store for hugepages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:25"><expr pos:start="97:9" pos:end="97:24"><call pos:start="97:9" pos:end="97:24"><name pos:start="97:9" pos:end="97:14">g_free</name><argument_list pos:start="97:15" pos:end="97:24">(<argument pos:start="97:16" pos:end="97:23"><expr pos:start="97:16" pos:end="97:23"><name pos:start="97:16" pos:end="97:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="99:9" pos:end="99:19">goto <name pos:start="99:14" pos:end="99:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:21"><expr pos:start="103:5" pos:end="103:20"><call pos:start="103:5" pos:end="103:20"><name pos:start="103:5" pos:end="103:10">unlink</name><argument_list pos:start="103:11" pos:end="103:20">(<argument pos:start="103:12" pos:end="103:19"><expr pos:start="103:12" pos:end="103:19"><name pos:start="103:12" pos:end="103:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:21"><expr pos:start="105:5" pos:end="105:20"><call pos:start="105:5" pos:end="105:20"><name pos:start="105:5" pos:end="105:10">g_free</name><argument_list pos:start="105:11" pos:end="105:20">(<argument pos:start="105:12" pos:end="105:19"><expr pos:start="105:12" pos:end="105:19"><name pos:start="105:12" pos:end="105:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:41"><expr pos:start="109:5" pos:end="109:40"><name pos:start="109:5" pos:end="109:10">memory</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <call pos:start="109:14" pos:end="109:40"><name pos:start="109:14" pos:end="109:21">ROUND_UP</name><argument_list pos:start="109:22" pos:end="109:40">(<argument pos:start="109:23" pos:end="109:28"><expr pos:start="109:23" pos:end="109:28"><name pos:start="109:23" pos:end="109:28">memory</name></expr></argument>, <argument pos:start="109:31" pos:end="109:39"><expr pos:start="109:31" pos:end="109:39"><name pos:start="109:31" pos:end="109:39">hpagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="123:7">/*

     * ftruncate is not supported by hugetlbfs in older

     * hosts, so don't bother bailing out on errors.

     * If anything goes wrong with it under other filesystems,

     * mmap will fail.

     */</comment>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:30">(<expr pos:start="125:9" pos:end="125:29"><call pos:start="125:9" pos:end="125:29"><name pos:start="125:9" pos:end="125:17">ftruncate</name><argument_list pos:start="125:18" pos:end="125:29">(<argument pos:start="125:19" pos:end="125:20"><expr pos:start="125:19" pos:end="125:20"><name pos:start="125:19" pos:end="125:20">fd</name></expr></argument>, <argument pos:start="125:23" pos:end="125:28"><expr pos:start="125:23" pos:end="125:28"><name pos:start="125:23" pos:end="125:28">memory</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="125:32" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:28">

        <expr_stmt pos:start="127:9" pos:end="127:28"><expr pos:start="127:9" pos:end="127:27"><call pos:start="127:9" pos:end="127:27"><name pos:start="127:9" pos:end="127:14">perror</name><argument_list pos:start="127:15" pos:end="127:27">(<argument pos:start="127:16" pos:end="127:26"><expr pos:start="127:16" pos:end="127:26"><literal type="string" pos:start="127:16" pos:end="127:26">"ftruncate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:75"><expr pos:start="133:5" pos:end="133:74"><name pos:start="133:5" pos:end="133:8">area</name> <operator pos:start="133:10" pos:end="133:10">=</operator> <call pos:start="133:12" pos:end="133:74"><name pos:start="133:12" pos:end="133:24">qemu_ram_mmap</name><argument_list pos:start="133:25" pos:end="133:74">(<argument pos:start="133:26" pos:end="133:27"><expr pos:start="133:26" pos:end="133:27"><name pos:start="133:26" pos:end="133:27">fd</name></expr></argument>, <argument pos:start="133:30" pos:end="133:35"><expr pos:start="133:30" pos:end="133:35"><name pos:start="133:30" pos:end="133:35">memory</name></expr></argument>, <argument pos:start="133:38" pos:end="133:46"><expr pos:start="133:38" pos:end="133:46"><name pos:start="133:38" pos:end="133:46">hpagesize</name></expr></argument>, <argument pos:start="133:49" pos:end="133:73"><expr pos:start="133:49" pos:end="133:73"><name pos:start="133:49" pos:end="133:60"><name pos:start="133:49" pos:end="133:53">block</name><operator pos:start="133:54" pos:end="133:55">-&gt;</operator><name pos:start="133:56" pos:end="133:60">flags</name></name> <operator pos:start="133:62" pos:end="133:62">&amp;</operator> <name pos:start="133:64" pos:end="133:73">RAM_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="135:5" pos:end="145:5"><if pos:start="135:5" pos:end="145:5">if <condition pos:start="135:8" pos:end="135:27">(<expr pos:start="135:9" pos:end="135:26"><name pos:start="135:9" pos:end="135:12">area</name> <operator pos:start="135:14" pos:end="135:15">==</operator> <name pos:start="135:17" pos:end="135:26">MAP_FAILED</name></expr>)</condition> <block pos:start="135:29" pos:end="145:5">{<block_content pos:start="137:9" pos:end="143:19">

        <expr_stmt pos:start="137:9" pos:end="139:70"><expr pos:start="137:9" pos:end="139:69"><call pos:start="137:9" pos:end="139:69"><name pos:start="137:9" pos:end="137:24">error_setg_errno</name><argument_list pos:start="137:25" pos:end="139:69">(<argument pos:start="137:26" pos:end="137:29"><expr pos:start="137:26" pos:end="137:29"><name pos:start="137:26" pos:end="137:29">errp</name></expr></argument>, <argument pos:start="137:32" pos:end="137:36"><expr pos:start="137:32" pos:end="137:36"><name pos:start="137:32" pos:end="137:36">errno</name></expr></argument>,

                         <argument pos:start="139:26" pos:end="139:68"><expr pos:start="139:26" pos:end="139:68"><literal type="string" pos:start="139:26" pos:end="139:68">"unable to map backing store for hugepages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:18"><expr pos:start="141:9" pos:end="141:17"><call pos:start="141:9" pos:end="141:17"><name pos:start="141:9" pos:end="141:13">close</name><argument_list pos:start="141:14" pos:end="141:17">(<argument pos:start="141:15" pos:end="141:16"><expr pos:start="141:15" pos:end="141:16"><name pos:start="141:15" pos:end="141:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="143:9" pos:end="143:19">goto <name pos:start="143:14" pos:end="143:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="153:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:21">(<expr pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:20">mem_prealloc</name></expr>)</condition> <block pos:start="149:23" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:42">

        <expr_stmt pos:start="151:9" pos:end="151:42"><expr pos:start="151:9" pos:end="151:41"><call pos:start="151:9" pos:end="151:41"><name pos:start="151:9" pos:end="151:23">os_mem_prealloc</name><argument_list pos:start="151:24" pos:end="151:41">(<argument pos:start="151:25" pos:end="151:26"><expr pos:start="151:25" pos:end="151:26"><name pos:start="151:25" pos:end="151:26">fd</name></expr></argument>, <argument pos:start="151:29" pos:end="151:32"><expr pos:start="151:29" pos:end="151:32"><name pos:start="151:29" pos:end="151:32">area</name></expr></argument>, <argument pos:start="151:35" pos:end="151:40"><expr pos:start="151:35" pos:end="151:40"><name pos:start="151:35" pos:end="151:40">memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:19"><expr pos:start="157:5" pos:end="157:18"><name pos:start="157:5" pos:end="157:13"><name pos:start="157:5" pos:end="157:9">block</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:13">fd</name></name> <operator pos:start="157:15" pos:end="157:15">=</operator> <name pos:start="157:17" pos:end="157:18">fd</name></expr>;</expr_stmt>

    <return pos:start="159:5" pos:end="159:16">return <expr pos:start="159:12" pos:end="159:15"><name pos:start="159:12" pos:end="159:15">area</name></expr>;</return>



<label pos:start="163:1" pos:end="163:6"><name pos:start="163:1" pos:end="163:5">error</name>:</label>

    <return pos:start="165:5" pos:end="165:16">return <expr pos:start="165:12" pos:end="165:15"><name pos:start="165:12" pos:end="165:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
