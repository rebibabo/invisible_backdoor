<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19733.c" pos:tabs="8"><function pos:start="1:1" pos:end="3165:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">disas_neon_data_insn</name><parameter_list pos:start="1:32" pos:end="1:79">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:40">CPUState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type> <name pos:start="1:44" pos:end="1:46">env</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:63"><decl pos:start="1:49" pos:end="1:63"><type pos:start="1:49" pos:end="1:63"><name pos:start="1:49" pos:end="1:60">DisasContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:63">s</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:78"><decl pos:start="1:66" pos:end="1:78"><type pos:start="1:66" pos:end="1:78"><name pos:start="1:66" pos:end="1:73">uint32_t</name></type> <name pos:start="1:75" pos:end="1:78">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="3165:1">{<block_content pos:start="5:5" pos:end="3163:13">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">op</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rd</name></decl>, <decl pos:start="9:13" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:13" pos:end="9:14">rn</name></decl>, <decl pos:start="9:17" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:18">rm</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">pass</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:16">pairwise</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">u</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint32_t</name></type> <name pos:start="25:14" pos:end="25:16">imm</name></decl>, <decl pos:start="25:19" pos:end="25:22"><type ref="prev" pos:start="25:5" pos:end="25:12"/><name pos:start="25:19" pos:end="25:22">mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:37"><decl pos:start="27:5" pos:end="27:12"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">TCGv</name></type> <name pos:start="27:10" pos:end="27:12">tmp</name></decl>, <decl pos:start="27:15" pos:end="27:18"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:15" pos:end="27:18">tmp2</name></decl>, <decl pos:start="27:21" pos:end="27:24"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:21" pos:end="27:24">tmp3</name></decl>, <decl pos:start="27:27" pos:end="27:30"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:27" pos:end="27:30">tmp4</name></decl>, <decl pos:start="27:33" pos:end="27:36"><type ref="prev" pos:start="27:5" pos:end="27:8"/><name pos:start="27:33" pos:end="27:36">tmp5</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">TCGv_i64</name></type> <name pos:start="29:14" pos:end="29:18">tmp64</name></decl>;</decl_stmt>



    <if_stmt pos:start="33:5" pos:end="35:15"><if pos:start="33:5" pos:end="35:15">if <condition pos:start="33:8" pos:end="33:24">(<expr pos:start="33:9" pos:end="33:23"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:23"><name pos:start="33:10" pos:end="33:10">s</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:23">vfp_enabled</name></name></expr>)</condition><block type="pseudo" pos:start="35:7" pos:end="35:15"><block_content pos:start="35:7" pos:end="35:15">

      <return pos:start="35:7" pos:end="35:15">return <expr pos:start="35:14" pos:end="35:14"><literal type="number" pos:start="35:14" pos:end="35:14">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:5">q</name> <operator pos:start="37:7" pos:end="37:7">=</operator> <operator pos:start="37:9" pos:end="37:9">(</operator><name pos:start="37:10" pos:end="37:13">insn</name> <operator pos:start="37:15" pos:end="37:15">&amp;</operator> <operator pos:start="37:17" pos:end="37:17">(</operator><literal type="number" pos:start="37:18" pos:end="37:18">1</literal> <operator pos:start="37:20" pos:end="37:21">&lt;&lt;</operator> <literal type="number" pos:start="37:23" pos:end="37:23">6</literal><operator pos:start="37:24" pos:end="37:24">)</operator><operator pos:start="37:25" pos:end="37:25">)</operator> <operator pos:start="37:27" pos:end="37:28">!=</operator> <literal type="number" pos:start="37:30" pos:end="37:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:25"><expr pos:start="39:5" pos:end="39:24"><name pos:start="39:5" pos:end="39:5">u</name> <operator pos:start="39:7" pos:end="39:7">=</operator> <operator pos:start="39:9" pos:end="39:9">(</operator><name pos:start="39:10" pos:end="39:13">insn</name> <operator pos:start="39:15" pos:end="39:16">&gt;&gt;</operator> <literal type="number" pos:start="39:18" pos:end="39:19">24</literal><operator pos:start="39:20" pos:end="39:20">)</operator> <operator pos:start="39:22" pos:end="39:22">&amp;</operator> <literal type="number" pos:start="39:24" pos:end="39:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><call pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:14">VFP_DREG_D</name><argument_list pos:start="41:15" pos:end="41:24">(<argument pos:start="41:16" pos:end="41:17"><expr pos:start="41:16" pos:end="41:17"><name pos:start="41:16" pos:end="41:17">rd</name></expr></argument>, <argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:25"><expr pos:start="43:5" pos:end="43:24"><call pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:14">VFP_DREG_N</name><argument_list pos:start="43:15" pos:end="43:24">(<argument pos:start="43:16" pos:end="43:17"><expr pos:start="43:16" pos:end="43:17"><name pos:start="43:16" pos:end="43:17">rn</name></expr></argument>, <argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:25"><expr pos:start="45:5" pos:end="45:24"><call pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:14">VFP_DREG_M</name><argument_list pos:start="45:15" pos:end="45:24">(<argument pos:start="45:16" pos:end="45:17"><expr pos:start="45:16" pos:end="45:17"><name pos:start="45:16" pos:end="45:17">rm</name></expr></argument>, <argument pos:start="45:20" pos:end="45:23"><expr pos:start="45:20" pos:end="45:23"><name pos:start="45:20" pos:end="45:23">insn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:28"><expr pos:start="47:5" pos:end="47:27"><name pos:start="47:5" pos:end="47:8">size</name> <operator pos:start="47:10" pos:end="47:10">=</operator> <operator pos:start="47:12" pos:end="47:12">(</operator><name pos:start="47:13" pos:end="47:16">insn</name> <operator pos:start="47:18" pos:end="47:19">&gt;&gt;</operator> <literal type="number" pos:start="47:21" pos:end="47:22">20</literal><operator pos:start="47:23" pos:end="47:23">)</operator> <operator pos:start="47:25" pos:end="47:25">&amp;</operator> <literal type="number" pos:start="47:27" pos:end="47:27">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="3161:5"><if pos:start="49:5" pos:end="795:5">if <condition pos:start="49:8" pos:end="49:32">(<expr pos:start="49:9" pos:end="49:31"><operator pos:start="49:9" pos:end="49:9">(</operator><name pos:start="49:10" pos:end="49:13">insn</name> <operator pos:start="49:15" pos:end="49:15">&amp;</operator> <operator pos:start="49:17" pos:end="49:17">(</operator><literal type="number" pos:start="49:18" pos:end="49:18">1</literal> <operator pos:start="49:20" pos:end="49:21">&lt;&lt;</operator> <literal type="number" pos:start="49:23" pos:end="49:24">23</literal><operator pos:start="49:25" pos:end="49:25">)</operator><operator pos:start="49:26" pos:end="49:26">)</operator> <operator pos:start="49:28" pos:end="49:29">==</operator> <literal type="number" pos:start="49:31" pos:end="49:31">0</literal></expr>)</condition> <block pos:start="49:34" pos:end="795:5">{<block_content pos:start="53:9" pos:end="791:9">

        <comment type="block" pos:start="51:9" pos:end="51:42">/* Three register same length.  */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:54"><expr pos:start="53:9" pos:end="53:53"><name pos:start="53:9" pos:end="53:10">op</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <operator pos:start="53:14" pos:end="53:14">(</operator><operator pos:start="53:15" pos:end="53:15">(</operator><name pos:start="53:16" pos:end="53:19">insn</name> <operator pos:start="53:21" pos:end="53:22">&gt;&gt;</operator> <literal type="number" pos:start="53:24" pos:end="53:24">7</literal><operator pos:start="53:25" pos:end="53:25">)</operator> <operator pos:start="53:27" pos:end="53:27">&amp;</operator> <literal type="number" pos:start="53:29" pos:end="53:32">0x1e</literal><operator pos:start="53:33" pos:end="53:33">)</operator> <operator pos:start="53:35" pos:end="53:35">|</operator> <operator pos:start="53:37" pos:end="53:37">(</operator><operator pos:start="53:38" pos:end="53:38">(</operator><name pos:start="53:39" pos:end="53:42">insn</name> <operator pos:start="53:44" pos:end="53:45">&gt;&gt;</operator> <literal type="number" pos:start="53:47" pos:end="53:47">4</literal><operator pos:start="53:48" pos:end="53:48">)</operator> <operator pos:start="53:50" pos:end="53:50">&amp;</operator> <literal type="number" pos:start="53:52" pos:end="53:52">1</literal><operator pos:start="53:53" pos:end="53:53">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="187:9"><if pos:start="55:9" pos:end="187:9">if <condition pos:start="55:12" pos:end="57:64">(<expr pos:start="55:13" pos:end="57:63"><name pos:start="55:13" pos:end="55:16">size</name> <operator pos:start="55:18" pos:end="55:19">==</operator> <literal type="number" pos:start="55:21" pos:end="55:21">3</literal> <operator pos:start="55:23" pos:end="55:24">&amp;&amp;</operator> <operator pos:start="55:26" pos:end="55:26">(</operator><name pos:start="55:27" pos:end="55:28">op</name> <operator pos:start="55:30" pos:end="55:31">==</operator> <literal type="number" pos:start="55:33" pos:end="55:33">1</literal> <operator pos:start="55:35" pos:end="55:36">||</operator> <name pos:start="55:38" pos:end="55:39">op</name> <operator pos:start="55:41" pos:end="55:42">==</operator> <literal type="number" pos:start="55:44" pos:end="55:44">5</literal> <operator pos:start="55:46" pos:end="55:47">||</operator> <name pos:start="55:49" pos:end="55:50">op</name> <operator pos:start="55:52" pos:end="55:53">==</operator> <literal type="number" pos:start="55:55" pos:end="55:55">8</literal> <operator pos:start="55:57" pos:end="55:58">||</operator> <name pos:start="55:60" pos:end="55:61">op</name> <operator pos:start="55:63" pos:end="55:64">==</operator> <literal type="number" pos:start="55:66" pos:end="55:66">9</literal>

                          <operator pos:start="57:27" pos:end="57:28">||</operator> <name pos:start="57:30" pos:end="57:31">op</name> <operator pos:start="57:33" pos:end="57:34">==</operator> <literal type="number" pos:start="57:36" pos:end="57:37">10</literal> <operator pos:start="57:39" pos:end="57:40">||</operator> <name pos:start="57:42" pos:end="57:43">op</name>  <operator pos:start="57:46" pos:end="57:47">==</operator> <literal type="number" pos:start="57:49" pos:end="57:50">11</literal> <operator pos:start="57:52" pos:end="57:53">||</operator> <name pos:start="57:55" pos:end="57:56">op</name> <operator pos:start="57:58" pos:end="57:59">==</operator> <literal type="number" pos:start="57:61" pos:end="57:62">16</literal><operator pos:start="57:63" pos:end="57:63">)</operator></expr>)</condition> <block pos:start="57:66" pos:end="187:9">{<block_content pos:start="61:13" pos:end="185:21">

            <comment type="block" pos:start="59:13" pos:end="59:47">/* 64-bit element instructions.  */</comment>

            <for pos:start="61:13" pos:end="183:13">for <control pos:start="61:17" pos:end="61:54">(<init pos:start="61:18" pos:end="61:26"><expr pos:start="61:18" pos:end="61:25"><name pos:start="61:18" pos:end="61:21">pass</name> <operator pos:start="61:23" pos:end="61:23">=</operator> <literal type="number" pos:start="61:25" pos:end="61:25">0</literal></expr>;</init> <condition pos:start="61:28" pos:end="61:46"><expr pos:start="61:28" pos:end="61:45"><name pos:start="61:28" pos:end="61:31">pass</name> <operator pos:start="61:33" pos:end="61:33">&lt;</operator> <operator pos:start="61:35" pos:end="61:35">(</operator><ternary pos:start="61:36" pos:end="61:44"><condition pos:start="61:36" pos:end="61:38"><expr pos:start="61:36" pos:end="61:36"><name pos:start="61:36" pos:end="61:36">q</name></expr> ?</condition><then pos:start="61:40" pos:end="61:40"> <expr pos:start="61:40" pos:end="61:40"><literal type="number" pos:start="61:40" pos:end="61:40">2</literal></expr> </then><else pos:start="61:42" pos:end="61:44">: <expr pos:start="61:44" pos:end="61:44"><literal type="number" pos:start="61:44" pos:end="61:44">1</literal></expr></else></ternary><operator pos:start="61:45" pos:end="61:45">)</operator></expr>;</condition> <incr pos:start="61:48" pos:end="61:53"><expr pos:start="61:48" pos:end="61:53"><name pos:start="61:48" pos:end="61:51">pass</name><operator pos:start="61:52" pos:end="61:53">++</operator></expr></incr>)</control> <block pos:start="61:56" pos:end="183:13">{<block_content pos:start="63:17" pos:end="181:52">

                <expr_stmt pos:start="63:17" pos:end="63:51"><expr pos:start="63:17" pos:end="63:50"><call pos:start="63:17" pos:end="63:50"><name pos:start="63:17" pos:end="63:31">neon_load_reg64</name><argument_list pos:start="63:32" pos:end="63:50">(<argument pos:start="63:33" pos:end="63:38"><expr pos:start="63:33" pos:end="63:38"><name pos:start="63:33" pos:end="63:38">cpu_V0</name></expr></argument>, <argument pos:start="63:41" pos:end="63:49"><expr pos:start="63:41" pos:end="63:49"><name pos:start="63:41" pos:end="63:42">rn</name> <operator pos:start="63:44" pos:end="63:44">+</operator> <name pos:start="63:46" pos:end="63:49">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:51"><expr pos:start="65:17" pos:end="65:50"><call pos:start="65:17" pos:end="65:50"><name pos:start="65:17" pos:end="65:31">neon_load_reg64</name><argument_list pos:start="65:32" pos:end="65:50">(<argument pos:start="65:33" pos:end="65:38"><expr pos:start="65:33" pos:end="65:38"><name pos:start="65:33" pos:end="65:38">cpu_V1</name></expr></argument>, <argument pos:start="65:41" pos:end="65:49"><expr pos:start="65:41" pos:end="65:49"><name pos:start="65:41" pos:end="65:42">rm</name> <operator pos:start="65:44" pos:end="65:44">+</operator> <name pos:start="65:46" pos:end="65:49">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="67:17" pos:end="179:17">switch <condition pos:start="67:24" pos:end="67:27">(<expr pos:start="67:25" pos:end="67:26"><name pos:start="67:25" pos:end="67:26">op</name></expr>)</condition> <block pos:start="67:29" pos:end="179:17">{<block_content pos:start="69:17" pos:end="177:28">

                <case pos:start="69:17" pos:end="69:23">case <expr pos:start="69:22" pos:end="69:22"><literal type="number" pos:start="69:22" pos:end="69:22">1</literal></expr>:</case> <comment type="block" pos:start="69:25" pos:end="69:35">/* VQADD */</comment>

                    <if_stmt pos:start="71:21" pos:end="79:21"><if pos:start="71:21" pos:end="75:21">if <condition pos:start="71:24" pos:end="71:26">(<expr pos:start="71:25" pos:end="71:25"><name pos:start="71:25" pos:end="71:25">u</name></expr>)</condition> <block pos:start="71:28" pos:end="75:21">{<block_content pos:start="73:25" pos:end="73:67">

                        <expr_stmt pos:start="73:25" pos:end="73:67"><expr pos:start="73:25" pos:end="73:66"><call pos:start="73:25" pos:end="73:66"><name pos:start="73:25" pos:end="73:56">gen_helper_neon_add_saturate_u64</name><argument_list pos:start="73:57" pos:end="73:66">(<argument pos:start="73:58" pos:end="73:65"><expr pos:start="73:58" pos:end="73:65"><name pos:start="73:58" pos:end="73:65">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="75:23" pos:end="79:21">else <block pos:start="75:28" pos:end="79:21">{<block_content pos:start="77:25" pos:end="77:67">

                        <expr_stmt pos:start="77:25" pos:end="77:67"><expr pos:start="77:25" pos:end="77:66"><call pos:start="77:25" pos:end="77:66"><name pos:start="77:25" pos:end="77:56">gen_helper_neon_add_saturate_s64</name><argument_list pos:start="77:57" pos:end="77:66">(<argument pos:start="77:58" pos:end="77:65"><expr pos:start="77:58" pos:end="77:65"><name pos:start="77:58" pos:end="77:65">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="81:21" pos:end="81:26">break;</break>

                <case pos:start="83:17" pos:end="83:23">case <expr pos:start="83:22" pos:end="83:22"><literal type="number" pos:start="83:22" pos:end="83:22">5</literal></expr>:</case> <comment type="block" pos:start="83:25" pos:end="83:35">/* VQSUB */</comment>

                    <if_stmt pos:start="85:21" pos:end="93:21"><if pos:start="85:21" pos:end="89:21">if <condition pos:start="85:24" pos:end="85:26">(<expr pos:start="85:25" pos:end="85:25"><name pos:start="85:25" pos:end="85:25">u</name></expr>)</condition> <block pos:start="85:28" pos:end="89:21">{<block_content pos:start="87:25" pos:end="87:67">

                        <expr_stmt pos:start="87:25" pos:end="87:67"><expr pos:start="87:25" pos:end="87:66"><call pos:start="87:25" pos:end="87:66"><name pos:start="87:25" pos:end="87:56">gen_helper_neon_sub_saturate_u64</name><argument_list pos:start="87:57" pos:end="87:66">(<argument pos:start="87:58" pos:end="87:65"><expr pos:start="87:58" pos:end="87:65"><name pos:start="87:58" pos:end="87:65">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="89:23" pos:end="93:21">else <block pos:start="89:28" pos:end="93:21">{<block_content pos:start="91:25" pos:end="91:67">

                        <expr_stmt pos:start="91:25" pos:end="91:67"><expr pos:start="91:25" pos:end="91:66"><call pos:start="91:25" pos:end="91:66"><name pos:start="91:25" pos:end="91:56">gen_helper_neon_sub_saturate_s64</name><argument_list pos:start="91:57" pos:end="91:66">(<argument pos:start="91:58" pos:end="91:65"><expr pos:start="91:58" pos:end="91:65"><name pos:start="91:58" pos:end="91:65">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="95:21" pos:end="95:26">break;</break>

                <case pos:start="97:17" pos:end="97:23">case <expr pos:start="97:22" pos:end="97:22"><literal type="number" pos:start="97:22" pos:end="97:22">8</literal></expr>:</case> <comment type="block" pos:start="97:25" pos:end="97:34">/* VSHL */</comment>

                    <if_stmt pos:start="99:21" pos:end="107:21"><if pos:start="99:21" pos:end="103:21">if <condition pos:start="99:24" pos:end="99:26">(<expr pos:start="99:25" pos:end="99:25"><name pos:start="99:25" pos:end="99:25">u</name></expr>)</condition> <block pos:start="99:28" pos:end="103:21">{<block_content pos:start="101:25" pos:end="101:72">

                        <expr_stmt pos:start="101:25" pos:end="101:72"><expr pos:start="101:25" pos:end="101:71"><call pos:start="101:25" pos:end="101:71"><name pos:start="101:25" pos:end="101:47">gen_helper_neon_shl_u64</name><argument_list pos:start="101:48" pos:end="101:71">(<argument pos:start="101:49" pos:end="101:54"><expr pos:start="101:49" pos:end="101:54"><name pos:start="101:49" pos:end="101:54">cpu_V0</name></expr></argument>, <argument pos:start="101:57" pos:end="101:62"><expr pos:start="101:57" pos:end="101:62"><name pos:start="101:57" pos:end="101:62">cpu_V1</name></expr></argument>, <argument pos:start="101:65" pos:end="101:70"><expr pos:start="101:65" pos:end="101:70"><name pos:start="101:65" pos:end="101:70">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="103:23" pos:end="107:21">else <block pos:start="103:28" pos:end="107:21">{<block_content pos:start="105:25" pos:end="105:72">

                        <expr_stmt pos:start="105:25" pos:end="105:72"><expr pos:start="105:25" pos:end="105:71"><call pos:start="105:25" pos:end="105:71"><name pos:start="105:25" pos:end="105:47">gen_helper_neon_shl_s64</name><argument_list pos:start="105:48" pos:end="105:71">(<argument pos:start="105:49" pos:end="105:54"><expr pos:start="105:49" pos:end="105:54"><name pos:start="105:49" pos:end="105:54">cpu_V0</name></expr></argument>, <argument pos:start="105:57" pos:end="105:62"><expr pos:start="105:57" pos:end="105:62"><name pos:start="105:57" pos:end="105:62">cpu_V1</name></expr></argument>, <argument pos:start="105:65" pos:end="105:70"><expr pos:start="105:65" pos:end="105:70"><name pos:start="105:65" pos:end="105:70">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="109:21" pos:end="109:26">break;</break>

                <case pos:start="111:17" pos:end="111:23">case <expr pos:start="111:22" pos:end="111:22"><literal type="number" pos:start="111:22" pos:end="111:22">9</literal></expr>:</case> <comment type="block" pos:start="111:25" pos:end="111:35">/* VQSHL */</comment>

                    <if_stmt pos:start="113:21" pos:end="125:21"><if pos:start="113:21" pos:end="119:21">if <condition pos:start="113:24" pos:end="113:26">(<expr pos:start="113:25" pos:end="113:25"><name pos:start="113:25" pos:end="113:25">u</name></expr>)</condition> <block pos:start="113:28" pos:end="119:21">{<block_content pos:start="115:25" pos:end="117:65">

                        <expr_stmt pos:start="115:25" pos:end="117:65"><expr pos:start="115:25" pos:end="117:64"><call pos:start="115:25" pos:end="117:64"><name pos:start="115:25" pos:end="115:48">gen_helper_neon_qshl_u64</name><argument_list pos:start="115:49" pos:end="117:64">(<argument pos:start="115:50" pos:end="115:55"><expr pos:start="115:50" pos:end="115:55"><name pos:start="115:50" pos:end="115:55">cpu_V0</name></expr></argument>, <argument pos:start="115:58" pos:end="115:64"><expr pos:start="115:58" pos:end="115:64"><name pos:start="115:58" pos:end="115:64">cpu_env</name></expr></argument>,

                                                 <argument pos:start="117:50" pos:end="117:55"><expr pos:start="117:50" pos:end="117:55"><name pos:start="117:50" pos:end="117:55">cpu_V1</name></expr></argument>, <argument pos:start="117:58" pos:end="117:63"><expr pos:start="117:58" pos:end="117:63"><name pos:start="117:58" pos:end="117:63">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="119:23" pos:end="125:21">else <block pos:start="119:28" pos:end="125:21">{<block_content pos:start="121:25" pos:end="123:65">

                        <expr_stmt pos:start="121:25" pos:end="123:65"><expr pos:start="121:25" pos:end="123:64"><call pos:start="121:25" pos:end="123:64"><name pos:start="121:25" pos:end="121:48">gen_helper_neon_qshl_s64</name><argument_list pos:start="121:49" pos:end="123:64">(<argument pos:start="121:50" pos:end="121:55"><expr pos:start="121:50" pos:end="121:55"><name pos:start="121:50" pos:end="121:55">cpu_V0</name></expr></argument>, <argument pos:start="121:58" pos:end="121:64"><expr pos:start="121:58" pos:end="121:64"><name pos:start="121:58" pos:end="121:64">cpu_env</name></expr></argument>,

                                                 <argument pos:start="123:50" pos:end="123:55"><expr pos:start="123:50" pos:end="123:55"><name pos:start="123:50" pos:end="123:55">cpu_V1</name></expr></argument>, <argument pos:start="123:58" pos:end="123:63"><expr pos:start="123:58" pos:end="123:63"><name pos:start="123:58" pos:end="123:63">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="127:21" pos:end="127:26">break;</break>

                <case pos:start="129:17" pos:end="129:24">case <expr pos:start="129:22" pos:end="129:23"><literal type="number" pos:start="129:22" pos:end="129:23">10</literal></expr>:</case> <comment type="block" pos:start="129:26" pos:end="129:36">/* VRSHL */</comment>

                    <if_stmt pos:start="131:21" pos:end="139:21"><if pos:start="131:21" pos:end="135:21">if <condition pos:start="131:24" pos:end="131:26">(<expr pos:start="131:25" pos:end="131:25"><name pos:start="131:25" pos:end="131:25">u</name></expr>)</condition> <block pos:start="131:28" pos:end="135:21">{<block_content pos:start="133:25" pos:end="133:73">

                        <expr_stmt pos:start="133:25" pos:end="133:73"><expr pos:start="133:25" pos:end="133:72"><call pos:start="133:25" pos:end="133:72"><name pos:start="133:25" pos:end="133:48">gen_helper_neon_rshl_u64</name><argument_list pos:start="133:49" pos:end="133:72">(<argument pos:start="133:50" pos:end="133:55"><expr pos:start="133:50" pos:end="133:55"><name pos:start="133:50" pos:end="133:55">cpu_V0</name></expr></argument>, <argument pos:start="133:58" pos:end="133:63"><expr pos:start="133:58" pos:end="133:63"><name pos:start="133:58" pos:end="133:63">cpu_V1</name></expr></argument>, <argument pos:start="133:66" pos:end="133:71"><expr pos:start="133:66" pos:end="133:71"><name pos:start="133:66" pos:end="133:71">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="135:23" pos:end="139:21">else <block pos:start="135:28" pos:end="139:21">{<block_content pos:start="137:25" pos:end="137:73">

                        <expr_stmt pos:start="137:25" pos:end="137:73"><expr pos:start="137:25" pos:end="137:72"><call pos:start="137:25" pos:end="137:72"><name pos:start="137:25" pos:end="137:48">gen_helper_neon_rshl_s64</name><argument_list pos:start="137:49" pos:end="137:72">(<argument pos:start="137:50" pos:end="137:55"><expr pos:start="137:50" pos:end="137:55"><name pos:start="137:50" pos:end="137:55">cpu_V0</name></expr></argument>, <argument pos:start="137:58" pos:end="137:63"><expr pos:start="137:58" pos:end="137:63"><name pos:start="137:58" pos:end="137:63">cpu_V1</name></expr></argument>, <argument pos:start="137:66" pos:end="137:71"><expr pos:start="137:66" pos:end="137:71"><name pos:start="137:66" pos:end="137:71">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="141:21" pos:end="141:26">break;</break>

                <case pos:start="143:17" pos:end="143:24">case <expr pos:start="143:22" pos:end="143:23"><literal type="number" pos:start="143:22" pos:end="143:23">11</literal></expr>:</case> <comment type="block" pos:start="143:26" pos:end="143:37">/* VQRSHL */</comment>

                    <if_stmt pos:start="145:21" pos:end="157:21"><if pos:start="145:21" pos:end="151:21">if <condition pos:start="145:24" pos:end="145:26">(<expr pos:start="145:25" pos:end="145:25"><name pos:start="145:25" pos:end="145:25">u</name></expr>)</condition> <block pos:start="145:28" pos:end="151:21">{<block_content pos:start="147:25" pos:end="149:66">

                        <expr_stmt pos:start="147:25" pos:end="149:66"><expr pos:start="147:25" pos:end="149:65"><call pos:start="147:25" pos:end="149:65"><name pos:start="147:25" pos:end="147:49">gen_helper_neon_qrshl_u64</name><argument_list pos:start="147:50" pos:end="149:65">(<argument pos:start="147:51" pos:end="147:56"><expr pos:start="147:51" pos:end="147:56"><name pos:start="147:51" pos:end="147:56">cpu_V0</name></expr></argument>, <argument pos:start="147:59" pos:end="147:65"><expr pos:start="147:59" pos:end="147:65"><name pos:start="147:59" pos:end="147:65">cpu_env</name></expr></argument>,

                                                  <argument pos:start="149:51" pos:end="149:56"><expr pos:start="149:51" pos:end="149:56"><name pos:start="149:51" pos:end="149:56">cpu_V1</name></expr></argument>, <argument pos:start="149:59" pos:end="149:64"><expr pos:start="149:59" pos:end="149:64"><name pos:start="149:59" pos:end="149:64">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="151:23" pos:end="157:21">else <block pos:start="151:28" pos:end="157:21">{<block_content pos:start="153:25" pos:end="155:66">

                        <expr_stmt pos:start="153:25" pos:end="155:66"><expr pos:start="153:25" pos:end="155:65"><call pos:start="153:25" pos:end="155:65"><name pos:start="153:25" pos:end="153:49">gen_helper_neon_qrshl_s64</name><argument_list pos:start="153:50" pos:end="155:65">(<argument pos:start="153:51" pos:end="153:56"><expr pos:start="153:51" pos:end="153:56"><name pos:start="153:51" pos:end="153:56">cpu_V0</name></expr></argument>, <argument pos:start="153:59" pos:end="153:65"><expr pos:start="153:59" pos:end="153:65"><name pos:start="153:59" pos:end="153:65">cpu_env</name></expr></argument>,

                                                  <argument pos:start="155:51" pos:end="155:56"><expr pos:start="155:51" pos:end="155:56"><name pos:start="155:51" pos:end="155:56">cpu_V1</name></expr></argument>, <argument pos:start="155:59" pos:end="155:64"><expr pos:start="155:59" pos:end="155:64"><name pos:start="155:59" pos:end="155:64">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="159:21" pos:end="159:26">break;</break>

                <case pos:start="161:17" pos:end="161:24">case <expr pos:start="161:22" pos:end="161:23"><literal type="number" pos:start="161:22" pos:end="161:23">16</literal></expr>:</case>

                    <if_stmt pos:start="163:21" pos:end="171:21"><if pos:start="163:21" pos:end="167:21">if <condition pos:start="163:24" pos:end="163:26">(<expr pos:start="163:25" pos:end="163:25"><name pos:start="163:25" pos:end="163:25">u</name></expr>)</condition> <block pos:start="163:28" pos:end="167:21">{<block_content pos:start="165:25" pos:end="165:50">

                        <expr_stmt pos:start="165:25" pos:end="165:50"><expr pos:start="165:25" pos:end="165:49"><call pos:start="165:25" pos:end="165:49"><name pos:start="165:25" pos:end="165:39">tcg_gen_sub_i64</name><argument_list pos:start="165:40" pos:end="165:49">(<argument pos:start="165:41" pos:end="165:48"><expr pos:start="165:41" pos:end="165:48"><name pos:start="165:41" pos:end="165:48">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="167:23" pos:end="171:21">else <block pos:start="167:28" pos:end="171:21">{<block_content pos:start="169:25" pos:end="169:50">

                        <expr_stmt pos:start="169:25" pos:end="169:50"><expr pos:start="169:25" pos:end="169:49"><call pos:start="169:25" pos:end="169:49"><name pos:start="169:25" pos:end="169:39">tcg_gen_add_i64</name><argument_list pos:start="169:40" pos:end="169:49">(<argument pos:start="169:41" pos:end="169:48"><expr pos:start="169:41" pos:end="169:48"><name pos:start="169:41" pos:end="169:48">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="173:21" pos:end="173:26">break;</break>

                <default pos:start="175:17" pos:end="175:24">default:</default>

                    <expr_stmt pos:start="177:21" pos:end="177:28"><expr pos:start="177:21" pos:end="177:27"><call pos:start="177:21" pos:end="177:27"><name pos:start="177:21" pos:end="177:25">abort</name><argument_list pos:start="177:26" pos:end="177:27">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>

                <expr_stmt pos:start="181:17" pos:end="181:52"><expr pos:start="181:17" pos:end="181:51"><call pos:start="181:17" pos:end="181:51"><name pos:start="181:17" pos:end="181:32">neon_store_reg64</name><argument_list pos:start="181:33" pos:end="181:51">(<argument pos:start="181:34" pos:end="181:39"><expr pos:start="181:34" pos:end="181:39"><name pos:start="181:34" pos:end="181:39">cpu_V0</name></expr></argument>, <argument pos:start="181:42" pos:end="181:50"><expr pos:start="181:42" pos:end="181:50"><name pos:start="181:42" pos:end="181:43">rd</name> <operator pos:start="181:45" pos:end="181:45">+</operator> <name pos:start="181:47" pos:end="181:50">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <return pos:start="185:13" pos:end="185:21">return <expr pos:start="185:20" pos:end="185:20"><literal type="number" pos:start="185:20" pos:end="185:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="189:9" pos:end="245:9">switch <condition pos:start="189:16" pos:end="189:19">(<expr pos:start="189:17" pos:end="189:18"><name pos:start="189:17" pos:end="189:18">op</name></expr>)</condition> <block pos:start="189:21" pos:end="245:9">{<block_content pos:start="191:9" pos:end="243:18">

        <case pos:start="191:9" pos:end="191:15">case <expr pos:start="191:14" pos:end="191:14"><literal type="number" pos:start="191:14" pos:end="191:14">8</literal></expr>:</case> <comment type="block" pos:start="191:17" pos:end="191:26">/* VSHL */</comment>

        <case pos:start="193:9" pos:end="193:15">case <expr pos:start="193:14" pos:end="193:14"><literal type="number" pos:start="193:14" pos:end="193:14">9</literal></expr>:</case> <comment type="block" pos:start="193:17" pos:end="193:27">/* VQSHL */</comment>

        <case pos:start="195:9" pos:end="195:16">case <expr pos:start="195:14" pos:end="195:15"><literal type="number" pos:start="195:14" pos:end="195:15">10</literal></expr>:</case> <comment type="block" pos:start="195:18" pos:end="195:28">/* VRSHL */</comment>

        <case pos:start="197:9" pos:end="197:16">case <expr pos:start="197:14" pos:end="197:15"><literal type="number" pos:start="197:14" pos:end="197:15">11</literal></expr>:</case> <comment type="block" pos:start="197:18" pos:end="197:29">/* VQRSHL */</comment>

            <block pos:start="199:13" pos:end="213:13">{<block_content pos:start="201:17" pos:end="211:29">

                <decl_stmt pos:start="201:17" pos:end="201:25"><decl pos:start="201:17" pos:end="201:24"><type pos:start="201:17" pos:end="201:19"><name pos:start="201:17" pos:end="201:19">int</name></type> <name pos:start="201:21" pos:end="201:24">rtmp</name></decl>;</decl_stmt>

                <comment type="block" pos:start="203:17" pos:end="203:63">/* Shift instruction operands are reversed.  */</comment>

                <expr_stmt pos:start="205:17" pos:end="205:26"><expr pos:start="205:17" pos:end="205:25"><name pos:start="205:17" pos:end="205:20">rtmp</name> <operator pos:start="205:22" pos:end="205:22">=</operator> <name pos:start="205:24" pos:end="205:25">rn</name></expr>;</expr_stmt>

                <expr_stmt pos:start="207:17" pos:end="207:24"><expr pos:start="207:17" pos:end="207:23"><name pos:start="207:17" pos:end="207:18">rn</name> <operator pos:start="207:20" pos:end="207:20">=</operator> <name pos:start="207:22" pos:end="207:23">rm</name></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:26"><expr pos:start="209:17" pos:end="209:25"><name pos:start="209:17" pos:end="209:18">rm</name> <operator pos:start="209:20" pos:end="209:20">=</operator> <name pos:start="209:22" pos:end="209:25">rtmp</name></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:29"><expr pos:start="211:17" pos:end="211:28"><name pos:start="211:17" pos:end="211:24">pairwise</name> <operator pos:start="211:26" pos:end="211:26">=</operator> <literal type="number" pos:start="211:28" pos:end="211:28">0</literal></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="215:13" pos:end="215:18">break;</break>

        <case pos:start="217:9" pos:end="217:16">case <expr pos:start="217:14" pos:end="217:15"><literal type="number" pos:start="217:14" pos:end="217:15">20</literal></expr>:</case> <comment type="block" pos:start="217:18" pos:end="217:28">/* VPMAX */</comment>

        <case pos:start="219:9" pos:end="219:16">case <expr pos:start="219:14" pos:end="219:15"><literal type="number" pos:start="219:14" pos:end="219:15">21</literal></expr>:</case> <comment type="block" pos:start="219:18" pos:end="219:28">/* VPMIN */</comment>

        <case pos:start="221:9" pos:end="221:16">case <expr pos:start="221:14" pos:end="221:15"><literal type="number" pos:start="221:14" pos:end="221:15">23</literal></expr>:</case> <comment type="block" pos:start="221:18" pos:end="221:28">/* VPADD */</comment>

            <expr_stmt pos:start="223:13" pos:end="223:25"><expr pos:start="223:13" pos:end="223:24"><name pos:start="223:13" pos:end="223:20">pairwise</name> <operator pos:start="223:22" pos:end="223:22">=</operator> <literal type="number" pos:start="223:24" pos:end="223:24">1</literal></expr>;</expr_stmt>

            <break pos:start="225:13" pos:end="225:18">break;</break>

        <case pos:start="227:9" pos:end="227:16">case <expr pos:start="227:14" pos:end="227:15"><literal type="number" pos:start="227:14" pos:end="227:15">26</literal></expr>:</case> <comment type="block" pos:start="227:18" pos:end="227:36">/* VPADD (float) */</comment>

            <expr_stmt pos:start="229:13" pos:end="229:39"><expr pos:start="229:13" pos:end="229:38"><name pos:start="229:13" pos:end="229:20">pairwise</name> <operator pos:start="229:22" pos:end="229:22">=</operator> <operator pos:start="229:24" pos:end="229:24">(</operator><name pos:start="229:25" pos:end="229:25">u</name> <operator pos:start="229:27" pos:end="229:28">&amp;&amp;</operator> <name pos:start="229:30" pos:end="229:33">size</name> <operator pos:start="229:35" pos:end="229:35">&lt;</operator> <literal type="number" pos:start="229:37" pos:end="229:37">2</literal><operator pos:start="229:38" pos:end="229:38">)</operator></expr>;</expr_stmt>

            <break pos:start="231:13" pos:end="231:18">break;</break>

        <case pos:start="233:9" pos:end="233:16">case <expr pos:start="233:14" pos:end="233:15"><literal type="number" pos:start="233:14" pos:end="233:15">30</literal></expr>:</case> <comment type="block" pos:start="233:18" pos:end="233:42">/* VPMIN/VPMAX (float) */</comment>

            <expr_stmt pos:start="235:13" pos:end="235:25"><expr pos:start="235:13" pos:end="235:24"><name pos:start="235:13" pos:end="235:20">pairwise</name> <operator pos:start="235:22" pos:end="235:22">=</operator> <name pos:start="235:24" pos:end="235:24">u</name></expr>;</expr_stmt>

            <break pos:start="237:13" pos:end="237:18">break;</break>

        <default pos:start="239:9" pos:end="239:16">default:</default>

            <expr_stmt pos:start="241:13" pos:end="241:25"><expr pos:start="241:13" pos:end="241:24"><name pos:start="241:13" pos:end="241:20">pairwise</name> <operator pos:start="241:22" pos:end="241:22">=</operator> <literal type="number" pos:start="241:24" pos:end="241:24">0</literal></expr>;</expr_stmt>

            <break pos:start="243:13" pos:end="243:18">break;</break>

        </block_content>}</block></switch>



        <for pos:start="249:9" pos:end="779:9">for <control pos:start="249:13" pos:end="249:50">(<init pos:start="249:14" pos:end="249:22"><expr pos:start="249:14" pos:end="249:21"><name pos:start="249:14" pos:end="249:17">pass</name> <operator pos:start="249:19" pos:end="249:19">=</operator> <literal type="number" pos:start="249:21" pos:end="249:21">0</literal></expr>;</init> <condition pos:start="249:24" pos:end="249:42"><expr pos:start="249:24" pos:end="249:41"><name pos:start="249:24" pos:end="249:27">pass</name> <operator pos:start="249:29" pos:end="249:29">&lt;</operator> <operator pos:start="249:31" pos:end="249:31">(</operator><ternary pos:start="249:32" pos:end="249:40"><condition pos:start="249:32" pos:end="249:34"><expr pos:start="249:32" pos:end="249:32"><name pos:start="249:32" pos:end="249:32">q</name></expr> ?</condition><then pos:start="249:36" pos:end="249:36"> <expr pos:start="249:36" pos:end="249:36"><literal type="number" pos:start="249:36" pos:end="249:36">4</literal></expr> </then><else pos:start="249:38" pos:end="249:40">: <expr pos:start="249:40" pos:end="249:40"><literal type="number" pos:start="249:40" pos:end="249:40">2</literal></expr></else></ternary><operator pos:start="249:41" pos:end="249:41">)</operator></expr>;</condition> <incr pos:start="249:44" pos:end="249:49"><expr pos:start="249:44" pos:end="249:49"><name pos:start="249:44" pos:end="249:47">pass</name><operator pos:start="249:48" pos:end="249:49">++</operator></expr></incr>)</control> <block pos:start="249:52" pos:end="779:9">{<block_content pos:start="253:9" pos:end="775:9">



        <if_stmt pos:start="253:9" pos:end="287:9"><if pos:start="253:9" pos:end="279:9">if <condition pos:start="253:12" pos:end="253:21">(<expr pos:start="253:13" pos:end="253:20"><name pos:start="253:13" pos:end="253:20">pairwise</name></expr>)</condition> <block pos:start="253:23" pos:end="279:9">{<block_content pos:start="257:13" pos:end="277:13">

            <comment type="block" pos:start="255:13" pos:end="255:28">/* Pairwise.  */</comment>

            <if_stmt pos:start="257:13" pos:end="263:22"><if pos:start="257:13" pos:end="259:35">if <condition pos:start="257:16" pos:end="257:18">(<expr pos:start="257:17" pos:end="257:17"><name pos:start="257:17" pos:end="257:17">q</name></expr>)</condition><block type="pseudo" pos:start="259:17" pos:end="259:35"><block_content pos:start="259:17" pos:end="259:35">

                <expr_stmt pos:start="259:17" pos:end="259:35"><expr pos:start="259:17" pos:end="259:34"><name pos:start="259:17" pos:end="259:17">n</name> <operator pos:start="259:19" pos:end="259:19">=</operator> <operator pos:start="259:21" pos:end="259:21">(</operator><name pos:start="259:22" pos:end="259:25">pass</name> <operator pos:start="259:27" pos:end="259:27">&amp;</operator> <literal type="number" pos:start="259:29" pos:end="259:29">1</literal><operator pos:start="259:30" pos:end="259:30">)</operator> <operator pos:start="259:32" pos:end="259:32">*</operator> <literal type="number" pos:start="259:34" pos:end="259:34">2</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="261:13" pos:end="263:22">else<block type="pseudo" pos:start="263:17" pos:end="263:22"><block_content pos:start="263:17" pos:end="263:22">

                <expr_stmt pos:start="263:17" pos:end="263:22"><expr pos:start="263:17" pos:end="263:21"><name pos:start="263:17" pos:end="263:17">n</name> <operator pos:start="263:19" pos:end="263:19">=</operator> <literal type="number" pos:start="263:21" pos:end="263:21">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="265:13" pos:end="277:13"><if pos:start="265:13" pos:end="271:13">if <condition pos:start="265:16" pos:end="265:29">(<expr pos:start="265:17" pos:end="265:28"><name pos:start="265:17" pos:end="265:20">pass</name> <operator pos:start="265:22" pos:end="265:22">&lt;</operator> <name pos:start="265:24" pos:end="265:24">q</name> <operator pos:start="265:26" pos:end="265:26">+</operator> <literal type="number" pos:start="265:28" pos:end="265:28">1</literal></expr>)</condition> <block pos:start="265:31" pos:end="271:13">{<block_content pos:start="267:17" pos:end="269:48">

                <expr_stmt pos:start="267:17" pos:end="267:43"><expr pos:start="267:17" pos:end="267:42"><name pos:start="267:17" pos:end="267:19">tmp</name> <operator pos:start="267:21" pos:end="267:21">=</operator> <call pos:start="267:23" pos:end="267:42"><name pos:start="267:23" pos:end="267:35">neon_load_reg</name><argument_list pos:start="267:36" pos:end="267:42">(<argument pos:start="267:37" pos:end="267:38"><expr pos:start="267:37" pos:end="267:38"><name pos:start="267:37" pos:end="267:38">rn</name></expr></argument>, <argument pos:start="267:41" pos:end="267:41"><expr pos:start="267:41" pos:end="267:41"><name pos:start="267:41" pos:end="267:41">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:48"><expr pos:start="269:17" pos:end="269:47"><name pos:start="269:17" pos:end="269:20">tmp2</name> <operator pos:start="269:22" pos:end="269:22">=</operator> <call pos:start="269:24" pos:end="269:47"><name pos:start="269:24" pos:end="269:36">neon_load_reg</name><argument_list pos:start="269:37" pos:end="269:47">(<argument pos:start="269:38" pos:end="269:39"><expr pos:start="269:38" pos:end="269:39"><name pos:start="269:38" pos:end="269:39">rn</name></expr></argument>, <argument pos:start="269:42" pos:end="269:46"><expr pos:start="269:42" pos:end="269:46"><name pos:start="269:42" pos:end="269:42">n</name> <operator pos:start="269:44" pos:end="269:44">+</operator> <literal type="number" pos:start="269:46" pos:end="269:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="271:15" pos:end="277:13">else <block pos:start="271:20" pos:end="277:13">{<block_content pos:start="273:17" pos:end="275:48">

                <expr_stmt pos:start="273:17" pos:end="273:43"><expr pos:start="273:17" pos:end="273:42"><name pos:start="273:17" pos:end="273:19">tmp</name> <operator pos:start="273:21" pos:end="273:21">=</operator> <call pos:start="273:23" pos:end="273:42"><name pos:start="273:23" pos:end="273:35">neon_load_reg</name><argument_list pos:start="273:36" pos:end="273:42">(<argument pos:start="273:37" pos:end="273:38"><expr pos:start="273:37" pos:end="273:38"><name pos:start="273:37" pos:end="273:38">rm</name></expr></argument>, <argument pos:start="273:41" pos:end="273:41"><expr pos:start="273:41" pos:end="273:41"><name pos:start="273:41" pos:end="273:41">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="275:17" pos:end="275:48"><expr pos:start="275:17" pos:end="275:47"><name pos:start="275:17" pos:end="275:20">tmp2</name> <operator pos:start="275:22" pos:end="275:22">=</operator> <call pos:start="275:24" pos:end="275:47"><name pos:start="275:24" pos:end="275:36">neon_load_reg</name><argument_list pos:start="275:37" pos:end="275:47">(<argument pos:start="275:38" pos:end="275:39"><expr pos:start="275:38" pos:end="275:39"><name pos:start="275:38" pos:end="275:39">rm</name></expr></argument>, <argument pos:start="275:42" pos:end="275:46"><expr pos:start="275:42" pos:end="275:46"><name pos:start="275:42" pos:end="275:42">n</name> <operator pos:start="275:44" pos:end="275:44">+</operator> <literal type="number" pos:start="275:46" pos:end="275:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="279:11" pos:end="287:9">else <block pos:start="279:16" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:43">

            <comment type="block" pos:start="281:13" pos:end="281:31">/* Elementwise.  */</comment>

            <expr_stmt pos:start="283:13" pos:end="283:42"><expr pos:start="283:13" pos:end="283:41"><name pos:start="283:13" pos:end="283:15">tmp</name> <operator pos:start="283:17" pos:end="283:17">=</operator> <call pos:start="283:19" pos:end="283:41"><name pos:start="283:19" pos:end="283:31">neon_load_reg</name><argument_list pos:start="283:32" pos:end="283:41">(<argument pos:start="283:33" pos:end="283:34"><expr pos:start="283:33" pos:end="283:34"><name pos:start="283:33" pos:end="283:34">rn</name></expr></argument>, <argument pos:start="283:37" pos:end="283:40"><expr pos:start="283:37" pos:end="283:40"><name pos:start="283:37" pos:end="283:40">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:43"><expr pos:start="285:13" pos:end="285:42"><name pos:start="285:13" pos:end="285:16">tmp2</name> <operator pos:start="285:18" pos:end="285:18">=</operator> <call pos:start="285:20" pos:end="285:42"><name pos:start="285:20" pos:end="285:32">neon_load_reg</name><argument_list pos:start="285:33" pos:end="285:42">(<argument pos:start="285:34" pos:end="285:35"><expr pos:start="285:34" pos:end="285:35"><name pos:start="285:34" pos:end="285:35">rm</name></expr></argument>, <argument pos:start="285:38" pos:end="285:41"><expr pos:start="285:38" pos:end="285:41"><name pos:start="285:38" pos:end="285:41">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <switch pos:start="289:9" pos:end="755:9">switch <condition pos:start="289:16" pos:end="289:19">(<expr pos:start="289:17" pos:end="289:18"><name pos:start="289:17" pos:end="289:18">op</name></expr>)</condition> <block pos:start="289:21" pos:end="755:9">{<block_content pos:start="291:9" pos:end="753:20">

        <case pos:start="291:9" pos:end="291:15">case <expr pos:start="291:14" pos:end="291:14"><literal type="number" pos:start="291:14" pos:end="291:14">0</literal></expr>:</case> <comment type="block" pos:start="291:17" pos:end="291:27">/* VHADD */</comment>

            <expr_stmt pos:start="293:13" pos:end="293:38"><expr pos:start="293:13" pos:end="293:37"><call pos:start="293:13" pos:end="293:37"><name pos:start="293:13" pos:end="293:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="293:32" pos:end="293:37">(<argument pos:start="293:33" pos:end="293:36"><expr pos:start="293:33" pos:end="293:36"><name pos:start="293:33" pos:end="293:36">hadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="295:13" pos:end="295:18">break;</break>

        <case pos:start="297:9" pos:end="297:15">case <expr pos:start="297:14" pos:end="297:14"><literal type="number" pos:start="297:14" pos:end="297:14">1</literal></expr>:</case> <comment type="block" pos:start="297:17" pos:end="297:27">/* VQADD */</comment>

            <expr_stmt pos:start="299:13" pos:end="299:42"><expr pos:start="299:13" pos:end="299:41"><call pos:start="299:13" pos:end="299:41"><name pos:start="299:13" pos:end="299:35">GEN_NEON_INTEGER_OP_ENV</name><argument_list pos:start="299:36" pos:end="299:41">(<argument pos:start="299:37" pos:end="299:40"><expr pos:start="299:37" pos:end="299:40"><name pos:start="299:37" pos:end="299:40">qadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="301:13" pos:end="301:18">break;</break>

        <case pos:start="303:9" pos:end="303:15">case <expr pos:start="303:14" pos:end="303:14"><literal type="number" pos:start="303:14" pos:end="303:14">2</literal></expr>:</case> <comment type="block" pos:start="303:17" pos:end="303:28">/* VRHADD */</comment>

            <expr_stmt pos:start="305:13" pos:end="305:39"><expr pos:start="305:13" pos:end="305:38"><call pos:start="305:13" pos:end="305:38"><name pos:start="305:13" pos:end="305:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="305:32" pos:end="305:38">(<argument pos:start="305:33" pos:end="305:37"><expr pos:start="305:33" pos:end="305:37"><name pos:start="305:33" pos:end="305:37">rhadd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="307:13" pos:end="307:18">break;</break>

        <case pos:start="309:9" pos:end="309:15">case <expr pos:start="309:14" pos:end="309:14"><literal type="number" pos:start="309:14" pos:end="309:14">3</literal></expr>:</case> <comment type="block" pos:start="309:17" pos:end="309:33">/* Logic ops.  */</comment>

            <switch pos:start="311:13" pos:end="373:13">switch <condition pos:start="311:20" pos:end="311:36">(<expr pos:start="311:21" pos:end="311:35"><operator pos:start="311:21" pos:end="311:21">(</operator><name pos:start="311:22" pos:end="311:22">u</name> <operator pos:start="311:24" pos:end="311:25">&lt;&lt;</operator> <literal type="number" pos:start="311:27" pos:end="311:27">2</literal><operator pos:start="311:28" pos:end="311:28">)</operator> <operator pos:start="311:30" pos:end="311:30">|</operator> <name pos:start="311:32" pos:end="311:35">size</name></expr>)</condition> <block pos:start="311:38" pos:end="373:13">{<block_content pos:start="313:13" pos:end="371:22">

            <case pos:start="313:13" pos:end="313:19">case <expr pos:start="313:18" pos:end="313:18"><literal type="number" pos:start="313:18" pos:end="313:18">0</literal></expr>:</case> <comment type="block" pos:start="313:21" pos:end="313:30">/* VAND */</comment>

                <expr_stmt pos:start="315:17" pos:end="315:48"><expr pos:start="315:17" pos:end="315:47"><call pos:start="315:17" pos:end="315:47"><name pos:start="315:17" pos:end="315:31">tcg_gen_and_i32</name><argument_list pos:start="315:32" pos:end="315:47">(<argument pos:start="315:33" pos:end="315:35"><expr pos:start="315:33" pos:end="315:35"><name pos:start="315:33" pos:end="315:35">tmp</name></expr></argument>, <argument pos:start="315:38" pos:end="315:40"><expr pos:start="315:38" pos:end="315:40"><name pos:start="315:38" pos:end="315:40">tmp</name></expr></argument>, <argument pos:start="315:43" pos:end="315:46"><expr pos:start="315:43" pos:end="315:46"><name pos:start="315:43" pos:end="315:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="317:17" pos:end="317:22">break;</break>

            <case pos:start="319:13" pos:end="319:19">case <expr pos:start="319:18" pos:end="319:18"><literal type="number" pos:start="319:18" pos:end="319:18">1</literal></expr>:</case> <comment type="block" pos:start="319:21" pos:end="319:29">/* BIC */</comment>

                <expr_stmt pos:start="321:17" pos:end="321:49"><expr pos:start="321:17" pos:end="321:48"><call pos:start="321:17" pos:end="321:48"><name pos:start="321:17" pos:end="321:32">tcg_gen_andc_i32</name><argument_list pos:start="321:33" pos:end="321:48">(<argument pos:start="321:34" pos:end="321:36"><expr pos:start="321:34" pos:end="321:36"><name pos:start="321:34" pos:end="321:36">tmp</name></expr></argument>, <argument pos:start="321:39" pos:end="321:41"><expr pos:start="321:39" pos:end="321:41"><name pos:start="321:39" pos:end="321:41">tmp</name></expr></argument>, <argument pos:start="321:44" pos:end="321:47"><expr pos:start="321:44" pos:end="321:47"><name pos:start="321:44" pos:end="321:47">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="323:17" pos:end="323:22">break;</break>

            <case pos:start="325:13" pos:end="325:19">case <expr pos:start="325:18" pos:end="325:18"><literal type="number" pos:start="325:18" pos:end="325:18">2</literal></expr>:</case> <comment type="block" pos:start="325:21" pos:end="325:30">/* VORR */</comment>

                <expr_stmt pos:start="327:17" pos:end="327:47"><expr pos:start="327:17" pos:end="327:46"><call pos:start="327:17" pos:end="327:46"><name pos:start="327:17" pos:end="327:30">tcg_gen_or_i32</name><argument_list pos:start="327:31" pos:end="327:46">(<argument pos:start="327:32" pos:end="327:34"><expr pos:start="327:32" pos:end="327:34"><name pos:start="327:32" pos:end="327:34">tmp</name></expr></argument>, <argument pos:start="327:37" pos:end="327:39"><expr pos:start="327:37" pos:end="327:39"><name pos:start="327:37" pos:end="327:39">tmp</name></expr></argument>, <argument pos:start="327:42" pos:end="327:45"><expr pos:start="327:42" pos:end="327:45"><name pos:start="327:42" pos:end="327:45">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="329:17" pos:end="329:22">break;</break>

            <case pos:start="331:13" pos:end="331:19">case <expr pos:start="331:18" pos:end="331:18"><literal type="number" pos:start="331:18" pos:end="331:18">3</literal></expr>:</case> <comment type="block" pos:start="331:21" pos:end="331:30">/* VORN */</comment>

                <expr_stmt pos:start="333:17" pos:end="333:48"><expr pos:start="333:17" pos:end="333:47"><call pos:start="333:17" pos:end="333:47"><name pos:start="333:17" pos:end="333:31">tcg_gen_orc_i32</name><argument_list pos:start="333:32" pos:end="333:47">(<argument pos:start="333:33" pos:end="333:35"><expr pos:start="333:33" pos:end="333:35"><name pos:start="333:33" pos:end="333:35">tmp</name></expr></argument>, <argument pos:start="333:38" pos:end="333:40"><expr pos:start="333:38" pos:end="333:40"><name pos:start="333:38" pos:end="333:40">tmp</name></expr></argument>, <argument pos:start="333:43" pos:end="333:46"><expr pos:start="333:43" pos:end="333:46"><name pos:start="333:43" pos:end="333:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="335:17" pos:end="335:22">break;</break>

            <case pos:start="337:13" pos:end="337:19">case <expr pos:start="337:18" pos:end="337:18"><literal type="number" pos:start="337:18" pos:end="337:18">4</literal></expr>:</case> <comment type="block" pos:start="337:21" pos:end="337:30">/* VEOR */</comment>

                <expr_stmt pos:start="339:17" pos:end="339:48"><expr pos:start="339:17" pos:end="339:47"><call pos:start="339:17" pos:end="339:47"><name pos:start="339:17" pos:end="339:31">tcg_gen_xor_i32</name><argument_list pos:start="339:32" pos:end="339:47">(<argument pos:start="339:33" pos:end="339:35"><expr pos:start="339:33" pos:end="339:35"><name pos:start="339:33" pos:end="339:35">tmp</name></expr></argument>, <argument pos:start="339:38" pos:end="339:40"><expr pos:start="339:38" pos:end="339:40"><name pos:start="339:38" pos:end="339:40">tmp</name></expr></argument>, <argument pos:start="339:43" pos:end="339:46"><expr pos:start="339:43" pos:end="339:46"><name pos:start="339:43" pos:end="339:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="341:17" pos:end="341:22">break;</break>

            <case pos:start="343:13" pos:end="343:19">case <expr pos:start="343:18" pos:end="343:18"><literal type="number" pos:start="343:18" pos:end="343:18">5</literal></expr>:</case> <comment type="block" pos:start="343:21" pos:end="343:30">/* VBSL */</comment>

                <expr_stmt pos:start="345:17" pos:end="345:47"><expr pos:start="345:17" pos:end="345:46"><name pos:start="345:17" pos:end="345:20">tmp3</name> <operator pos:start="345:22" pos:end="345:22">=</operator> <call pos:start="345:24" pos:end="345:46"><name pos:start="345:24" pos:end="345:36">neon_load_reg</name><argument_list pos:start="345:37" pos:end="345:46">(<argument pos:start="345:38" pos:end="345:39"><expr pos:start="345:38" pos:end="345:39"><name pos:start="345:38" pos:end="345:39">rd</name></expr></argument>, <argument pos:start="345:42" pos:end="345:45"><expr pos:start="345:42" pos:end="345:45"><name pos:start="345:42" pos:end="345:45">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="347:17" pos:end="347:51"><expr pos:start="347:17" pos:end="347:50"><call pos:start="347:17" pos:end="347:50"><name pos:start="347:17" pos:end="347:28">gen_neon_bsl</name><argument_list pos:start="347:29" pos:end="347:50">(<argument pos:start="347:30" pos:end="347:32"><expr pos:start="347:30" pos:end="347:32"><name pos:start="347:30" pos:end="347:32">tmp</name></expr></argument>, <argument pos:start="347:35" pos:end="347:37"><expr pos:start="347:35" pos:end="347:37"><name pos:start="347:35" pos:end="347:37">tmp</name></expr></argument>, <argument pos:start="347:40" pos:end="347:43"><expr pos:start="347:40" pos:end="347:43"><name pos:start="347:40" pos:end="347:43">tmp2</name></expr></argument>, <argument pos:start="347:46" pos:end="347:49"><expr pos:start="347:46" pos:end="347:49"><name pos:start="347:46" pos:end="347:49">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="349:17" pos:end="349:31"><expr pos:start="349:17" pos:end="349:30"><call pos:start="349:17" pos:end="349:30"><name pos:start="349:17" pos:end="349:24">dead_tmp</name><argument_list pos:start="349:25" pos:end="349:30">(<argument pos:start="349:26" pos:end="349:29"><expr pos:start="349:26" pos:end="349:29"><name pos:start="349:26" pos:end="349:29">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="351:17" pos:end="351:22">break;</break>

            <case pos:start="353:13" pos:end="353:19">case <expr pos:start="353:18" pos:end="353:18"><literal type="number" pos:start="353:18" pos:end="353:18">6</literal></expr>:</case> <comment type="block" pos:start="353:21" pos:end="353:30">/* VBIT */</comment>

                <expr_stmt pos:start="355:17" pos:end="355:47"><expr pos:start="355:17" pos:end="355:46"><name pos:start="355:17" pos:end="355:20">tmp3</name> <operator pos:start="355:22" pos:end="355:22">=</operator> <call pos:start="355:24" pos:end="355:46"><name pos:start="355:24" pos:end="355:36">neon_load_reg</name><argument_list pos:start="355:37" pos:end="355:46">(<argument pos:start="355:38" pos:end="355:39"><expr pos:start="355:38" pos:end="355:39"><name pos:start="355:38" pos:end="355:39">rd</name></expr></argument>, <argument pos:start="355:42" pos:end="355:45"><expr pos:start="355:42" pos:end="355:45"><name pos:start="355:42" pos:end="355:45">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="357:17" pos:end="357:51"><expr pos:start="357:17" pos:end="357:50"><call pos:start="357:17" pos:end="357:50"><name pos:start="357:17" pos:end="357:28">gen_neon_bsl</name><argument_list pos:start="357:29" pos:end="357:50">(<argument pos:start="357:30" pos:end="357:32"><expr pos:start="357:30" pos:end="357:32"><name pos:start="357:30" pos:end="357:32">tmp</name></expr></argument>, <argument pos:start="357:35" pos:end="357:37"><expr pos:start="357:35" pos:end="357:37"><name pos:start="357:35" pos:end="357:37">tmp</name></expr></argument>, <argument pos:start="357:40" pos:end="357:43"><expr pos:start="357:40" pos:end="357:43"><name pos:start="357:40" pos:end="357:43">tmp3</name></expr></argument>, <argument pos:start="357:46" pos:end="357:49"><expr pos:start="357:46" pos:end="357:49"><name pos:start="357:46" pos:end="357:49">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="359:17" pos:end="359:31"><expr pos:start="359:17" pos:end="359:30"><call pos:start="359:17" pos:end="359:30"><name pos:start="359:17" pos:end="359:24">dead_tmp</name><argument_list pos:start="359:25" pos:end="359:30">(<argument pos:start="359:26" pos:end="359:29"><expr pos:start="359:26" pos:end="359:29"><name pos:start="359:26" pos:end="359:29">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="361:17" pos:end="361:22">break;</break>

            <case pos:start="363:13" pos:end="363:19">case <expr pos:start="363:18" pos:end="363:18"><literal type="number" pos:start="363:18" pos:end="363:18">7</literal></expr>:</case> <comment type="block" pos:start="363:21" pos:end="363:30">/* VBIF */</comment>

                <expr_stmt pos:start="365:17" pos:end="365:47"><expr pos:start="365:17" pos:end="365:46"><name pos:start="365:17" pos:end="365:20">tmp3</name> <operator pos:start="365:22" pos:end="365:22">=</operator> <call pos:start="365:24" pos:end="365:46"><name pos:start="365:24" pos:end="365:36">neon_load_reg</name><argument_list pos:start="365:37" pos:end="365:46">(<argument pos:start="365:38" pos:end="365:39"><expr pos:start="365:38" pos:end="365:39"><name pos:start="365:38" pos:end="365:39">rd</name></expr></argument>, <argument pos:start="365:42" pos:end="365:45"><expr pos:start="365:42" pos:end="365:45"><name pos:start="365:42" pos:end="365:45">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="367:17" pos:end="367:51"><expr pos:start="367:17" pos:end="367:50"><call pos:start="367:17" pos:end="367:50"><name pos:start="367:17" pos:end="367:28">gen_neon_bsl</name><argument_list pos:start="367:29" pos:end="367:50">(<argument pos:start="367:30" pos:end="367:32"><expr pos:start="367:30" pos:end="367:32"><name pos:start="367:30" pos:end="367:32">tmp</name></expr></argument>, <argument pos:start="367:35" pos:end="367:38"><expr pos:start="367:35" pos:end="367:38"><name pos:start="367:35" pos:end="367:38">tmp3</name></expr></argument>, <argument pos:start="367:41" pos:end="367:43"><expr pos:start="367:41" pos:end="367:43"><name pos:start="367:41" pos:end="367:43">tmp</name></expr></argument>, <argument pos:start="367:46" pos:end="367:49"><expr pos:start="367:46" pos:end="367:49"><name pos:start="367:46" pos:end="367:49">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="369:17" pos:end="369:31"><expr pos:start="369:17" pos:end="369:30"><call pos:start="369:17" pos:end="369:30"><name pos:start="369:17" pos:end="369:24">dead_tmp</name><argument_list pos:start="369:25" pos:end="369:30">(<argument pos:start="369:26" pos:end="369:29"><expr pos:start="369:26" pos:end="369:29"><name pos:start="369:26" pos:end="369:29">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="371:17" pos:end="371:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="375:13" pos:end="375:18">break;</break>

        <case pos:start="377:9" pos:end="377:15">case <expr pos:start="377:14" pos:end="377:14"><literal type="number" pos:start="377:14" pos:end="377:14">4</literal></expr>:</case> <comment type="block" pos:start="377:17" pos:end="377:27">/* VHSUB */</comment>

            <expr_stmt pos:start="379:13" pos:end="379:38"><expr pos:start="379:13" pos:end="379:37"><call pos:start="379:13" pos:end="379:37"><name pos:start="379:13" pos:end="379:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="379:32" pos:end="379:37">(<argument pos:start="379:33" pos:end="379:36"><expr pos:start="379:33" pos:end="379:36"><name pos:start="379:33" pos:end="379:36">hsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="381:13" pos:end="381:18">break;</break>

        <case pos:start="383:9" pos:end="383:15">case <expr pos:start="383:14" pos:end="383:14"><literal type="number" pos:start="383:14" pos:end="383:14">5</literal></expr>:</case> <comment type="block" pos:start="383:17" pos:end="383:27">/* VQSUB */</comment>

            <expr_stmt pos:start="385:13" pos:end="385:42"><expr pos:start="385:13" pos:end="385:41"><call pos:start="385:13" pos:end="385:41"><name pos:start="385:13" pos:end="385:35">GEN_NEON_INTEGER_OP_ENV</name><argument_list pos:start="385:36" pos:end="385:41">(<argument pos:start="385:37" pos:end="385:40"><expr pos:start="385:37" pos:end="385:40"><name pos:start="385:37" pos:end="385:40">qsub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="387:13" pos:end="387:18">break;</break>

        <case pos:start="389:9" pos:end="389:15">case <expr pos:start="389:14" pos:end="389:14"><literal type="number" pos:start="389:14" pos:end="389:14">6</literal></expr>:</case> <comment type="block" pos:start="389:17" pos:end="389:26">/* VCGT */</comment>

            <expr_stmt pos:start="391:13" pos:end="391:37"><expr pos:start="391:13" pos:end="391:36"><call pos:start="391:13" pos:end="391:36"><name pos:start="391:13" pos:end="391:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="391:32" pos:end="391:36">(<argument pos:start="391:33" pos:end="391:35"><expr pos:start="391:33" pos:end="391:35"><name pos:start="391:33" pos:end="391:35">cgt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="393:13" pos:end="393:18">break;</break>

        <case pos:start="395:9" pos:end="395:15">case <expr pos:start="395:14" pos:end="395:14"><literal type="number" pos:start="395:14" pos:end="395:14">7</literal></expr>:</case> <comment type="block" pos:start="395:17" pos:end="395:26">/* VCGE */</comment>

            <expr_stmt pos:start="397:13" pos:end="397:37"><expr pos:start="397:13" pos:end="397:36"><call pos:start="397:13" pos:end="397:36"><name pos:start="397:13" pos:end="397:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="397:32" pos:end="397:36">(<argument pos:start="397:33" pos:end="397:35"><expr pos:start="397:33" pos:end="397:35"><name pos:start="397:33" pos:end="397:35">cge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="399:13" pos:end="399:18">break;</break>

        <case pos:start="401:9" pos:end="401:15">case <expr pos:start="401:14" pos:end="401:14"><literal type="number" pos:start="401:14" pos:end="401:14">8</literal></expr>:</case> <comment type="block" pos:start="401:17" pos:end="401:26">/* VSHL */</comment>

            <expr_stmt pos:start="403:13" pos:end="403:37"><expr pos:start="403:13" pos:end="403:36"><call pos:start="403:13" pos:end="403:36"><name pos:start="403:13" pos:end="403:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="403:32" pos:end="403:36">(<argument pos:start="403:33" pos:end="403:35"><expr pos:start="403:33" pos:end="403:35"><name pos:start="403:33" pos:end="403:35">shl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="405:13" pos:end="405:18">break;</break>

        <case pos:start="407:9" pos:end="407:15">case <expr pos:start="407:14" pos:end="407:14"><literal type="number" pos:start="407:14" pos:end="407:14">9</literal></expr>:</case> <comment type="block" pos:start="407:17" pos:end="407:27">/* VQSHL */</comment>

            <expr_stmt pos:start="409:13" pos:end="409:42"><expr pos:start="409:13" pos:end="409:41"><call pos:start="409:13" pos:end="409:41"><name pos:start="409:13" pos:end="409:35">GEN_NEON_INTEGER_OP_ENV</name><argument_list pos:start="409:36" pos:end="409:41">(<argument pos:start="409:37" pos:end="409:40"><expr pos:start="409:37" pos:end="409:40"><name pos:start="409:37" pos:end="409:40">qshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="411:13" pos:end="411:18">break;</break>

        <case pos:start="413:9" pos:end="413:16">case <expr pos:start="413:14" pos:end="413:15"><literal type="number" pos:start="413:14" pos:end="413:15">10</literal></expr>:</case> <comment type="block" pos:start="413:18" pos:end="413:28">/* VRSHL */</comment>

            <expr_stmt pos:start="415:13" pos:end="415:38"><expr pos:start="415:13" pos:end="415:37"><call pos:start="415:13" pos:end="415:37"><name pos:start="415:13" pos:end="415:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="415:32" pos:end="415:37">(<argument pos:start="415:33" pos:end="415:36"><expr pos:start="415:33" pos:end="415:36"><name pos:start="415:33" pos:end="415:36">rshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="417:13" pos:end="417:18">break;</break>

        <case pos:start="419:9" pos:end="419:16">case <expr pos:start="419:14" pos:end="419:15"><literal type="number" pos:start="419:14" pos:end="419:15">11</literal></expr>:</case> <comment type="block" pos:start="419:18" pos:end="419:29">/* VQRSHL */</comment>

            <expr_stmt pos:start="421:13" pos:end="421:43"><expr pos:start="421:13" pos:end="421:42"><call pos:start="421:13" pos:end="421:42"><name pos:start="421:13" pos:end="421:35">GEN_NEON_INTEGER_OP_ENV</name><argument_list pos:start="421:36" pos:end="421:42">(<argument pos:start="421:37" pos:end="421:41"><expr pos:start="421:37" pos:end="421:41"><name pos:start="421:37" pos:end="421:41">qrshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="423:13" pos:end="423:18">break;</break>

        <case pos:start="425:9" pos:end="425:16">case <expr pos:start="425:14" pos:end="425:15"><literal type="number" pos:start="425:14" pos:end="425:15">12</literal></expr>:</case> <comment type="block" pos:start="425:18" pos:end="425:27">/* VMAX */</comment>

            <expr_stmt pos:start="427:13" pos:end="427:37"><expr pos:start="427:13" pos:end="427:36"><call pos:start="427:13" pos:end="427:36"><name pos:start="427:13" pos:end="427:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="427:32" pos:end="427:36">(<argument pos:start="427:33" pos:end="427:35"><expr pos:start="427:33" pos:end="427:35"><name pos:start="427:33" pos:end="427:35">max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="429:13" pos:end="429:18">break;</break>

        <case pos:start="431:9" pos:end="431:16">case <expr pos:start="431:14" pos:end="431:15"><literal type="number" pos:start="431:14" pos:end="431:15">13</literal></expr>:</case> <comment type="block" pos:start="431:18" pos:end="431:27">/* VMIN */</comment>

            <expr_stmt pos:start="433:13" pos:end="433:37"><expr pos:start="433:13" pos:end="433:36"><call pos:start="433:13" pos:end="433:36"><name pos:start="433:13" pos:end="433:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="433:32" pos:end="433:36">(<argument pos:start="433:33" pos:end="433:35"><expr pos:start="433:33" pos:end="433:35"><name pos:start="433:33" pos:end="433:35">min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="435:13" pos:end="435:18">break;</break>

        <case pos:start="437:9" pos:end="437:16">case <expr pos:start="437:14" pos:end="437:15"><literal type="number" pos:start="437:14" pos:end="437:15">14</literal></expr>:</case> <comment type="block" pos:start="437:18" pos:end="437:27">/* VABD */</comment>

            <expr_stmt pos:start="439:13" pos:end="439:37"><expr pos:start="439:13" pos:end="439:36"><call pos:start="439:13" pos:end="439:36"><name pos:start="439:13" pos:end="439:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="439:32" pos:end="439:36">(<argument pos:start="439:33" pos:end="439:35"><expr pos:start="439:33" pos:end="439:35"><name pos:start="439:33" pos:end="439:35">abd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="441:13" pos:end="441:18">break;</break>

        <case pos:start="443:9" pos:end="443:16">case <expr pos:start="443:14" pos:end="443:15"><literal type="number" pos:start="443:14" pos:end="443:15">15</literal></expr>:</case> <comment type="block" pos:start="443:18" pos:end="443:27">/* VABA */</comment>

            <expr_stmt pos:start="445:13" pos:end="445:37"><expr pos:start="445:13" pos:end="445:36"><call pos:start="445:13" pos:end="445:36"><name pos:start="445:13" pos:end="445:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="445:32" pos:end="445:36">(<argument pos:start="445:33" pos:end="445:35"><expr pos:start="445:33" pos:end="445:35"><name pos:start="445:33" pos:end="445:35">abd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="447:13" pos:end="447:27"><expr pos:start="447:13" pos:end="447:26"><call pos:start="447:13" pos:end="447:26"><name pos:start="447:13" pos:end="447:20">dead_tmp</name><argument_list pos:start="447:21" pos:end="447:26">(<argument pos:start="447:22" pos:end="447:25"><expr pos:start="447:22" pos:end="447:25"><name pos:start="447:22" pos:end="447:25">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="449:13" pos:end="449:43"><expr pos:start="449:13" pos:end="449:42"><name pos:start="449:13" pos:end="449:16">tmp2</name> <operator pos:start="449:18" pos:end="449:18">=</operator> <call pos:start="449:20" pos:end="449:42"><name pos:start="449:20" pos:end="449:32">neon_load_reg</name><argument_list pos:start="449:33" pos:end="449:42">(<argument pos:start="449:34" pos:end="449:35"><expr pos:start="449:34" pos:end="449:35"><name pos:start="449:34" pos:end="449:35">rd</name></expr></argument>, <argument pos:start="449:38" pos:end="449:41"><expr pos:start="449:38" pos:end="449:41"><name pos:start="449:38" pos:end="449:41">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="451:13" pos:end="451:42"><expr pos:start="451:13" pos:end="451:41"><call pos:start="451:13" pos:end="451:41"><name pos:start="451:13" pos:end="451:24">gen_neon_add</name><argument_list pos:start="451:25" pos:end="451:41">(<argument pos:start="451:26" pos:end="451:29"><expr pos:start="451:26" pos:end="451:29"><name pos:start="451:26" pos:end="451:29">size</name></expr></argument>, <argument pos:start="451:32" pos:end="451:34"><expr pos:start="451:32" pos:end="451:34"><name pos:start="451:32" pos:end="451:34">tmp</name></expr></argument>, <argument pos:start="451:37" pos:end="451:40"><expr pos:start="451:37" pos:end="451:40"><name pos:start="451:37" pos:end="451:40">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="453:13" pos:end="453:18">break;</break>

        <case pos:start="455:9" pos:end="455:16">case <expr pos:start="455:14" pos:end="455:15"><literal type="number" pos:start="455:14" pos:end="455:15">16</literal></expr>:</case>

            <if_stmt pos:start="457:13" pos:end="477:13"><if pos:start="457:13" pos:end="463:13">if <condition pos:start="457:16" pos:end="457:19">(<expr pos:start="457:17" pos:end="457:18"><operator pos:start="457:17" pos:end="457:17">!</operator><name pos:start="457:18" pos:end="457:18">u</name></expr>)</condition> <block pos:start="457:21" pos:end="463:13">{<block_content pos:start="459:17" pos:end="461:29"> <comment type="block" pos:start="457:23" pos:end="457:32">/* VADD */</comment>

                <if_stmt pos:start="459:17" pos:end="461:29"><if pos:start="459:17" pos:end="461:29">if <condition pos:start="459:20" pos:end="459:50">(<expr pos:start="459:21" pos:end="459:49"><call pos:start="459:21" pos:end="459:49"><name pos:start="459:21" pos:end="459:32">gen_neon_add</name><argument_list pos:start="459:33" pos:end="459:49">(<argument pos:start="459:34" pos:end="459:37"><expr pos:start="459:34" pos:end="459:37"><name pos:start="459:34" pos:end="459:37">size</name></expr></argument>, <argument pos:start="459:40" pos:end="459:42"><expr pos:start="459:40" pos:end="459:42"><name pos:start="459:40" pos:end="459:42">tmp</name></expr></argument>, <argument pos:start="459:45" pos:end="459:48"><expr pos:start="459:45" pos:end="459:48"><name pos:start="459:45" pos:end="459:48">tmp2</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="461:21" pos:end="461:29"><block_content pos:start="461:21" pos:end="461:29">

                    <return pos:start="461:21" pos:end="461:29">return <expr pos:start="461:28" pos:end="461:28"><literal type="number" pos:start="461:28" pos:end="461:28">1</literal></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="463:15" pos:end="477:13">else <block pos:start="463:20" pos:end="477:13">{<block_content pos:start="465:17" pos:end="475:17"> <comment type="block" pos:start="463:22" pos:end="463:31">/* VSUB */</comment>

                <switch pos:start="465:17" pos:end="475:17">switch <condition pos:start="465:24" pos:end="465:29">(<expr pos:start="465:25" pos:end="465:28"><name pos:start="465:25" pos:end="465:28">size</name></expr>)</condition> <block pos:start="465:31" pos:end="475:17">{<block_content pos:start="467:17" pos:end="473:34">

                <case pos:start="467:17" pos:end="467:23">case <expr pos:start="467:22" pos:end="467:22"><literal type="number" pos:start="467:22" pos:end="467:22">0</literal></expr>:</case> <expr_stmt pos:start="467:25" pos:end="467:63"><expr pos:start="467:25" pos:end="467:62"><call pos:start="467:25" pos:end="467:62"><name pos:start="467:25" pos:end="467:46">gen_helper_neon_sub_u8</name><argument_list pos:start="467:47" pos:end="467:62">(<argument pos:start="467:48" pos:end="467:50"><expr pos:start="467:48" pos:end="467:50"><name pos:start="467:48" pos:end="467:50">tmp</name></expr></argument>, <argument pos:start="467:53" pos:end="467:55"><expr pos:start="467:53" pos:end="467:55"><name pos:start="467:53" pos:end="467:55">tmp</name></expr></argument>, <argument pos:start="467:58" pos:end="467:61"><expr pos:start="467:58" pos:end="467:61"><name pos:start="467:58" pos:end="467:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="467:65" pos:end="467:70">break;</break>

                <case pos:start="469:17" pos:end="469:23">case <expr pos:start="469:22" pos:end="469:22"><literal type="number" pos:start="469:22" pos:end="469:22">1</literal></expr>:</case> <expr_stmt pos:start="469:25" pos:end="469:64"><expr pos:start="469:25" pos:end="469:63"><call pos:start="469:25" pos:end="469:63"><name pos:start="469:25" pos:end="469:47">gen_helper_neon_sub_u16</name><argument_list pos:start="469:48" pos:end="469:63">(<argument pos:start="469:49" pos:end="469:51"><expr pos:start="469:49" pos:end="469:51"><name pos:start="469:49" pos:end="469:51">tmp</name></expr></argument>, <argument pos:start="469:54" pos:end="469:56"><expr pos:start="469:54" pos:end="469:56"><name pos:start="469:54" pos:end="469:56">tmp</name></expr></argument>, <argument pos:start="469:59" pos:end="469:62"><expr pos:start="469:59" pos:end="469:62"><name pos:start="469:59" pos:end="469:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="469:66" pos:end="469:71">break;</break>

                <case pos:start="471:17" pos:end="471:23">case <expr pos:start="471:22" pos:end="471:22"><literal type="number" pos:start="471:22" pos:end="471:22">2</literal></expr>:</case> <expr_stmt pos:start="471:25" pos:end="471:56"><expr pos:start="471:25" pos:end="471:55"><call pos:start="471:25" pos:end="471:55"><name pos:start="471:25" pos:end="471:39">tcg_gen_sub_i32</name><argument_list pos:start="471:40" pos:end="471:55">(<argument pos:start="471:41" pos:end="471:43"><expr pos:start="471:41" pos:end="471:43"><name pos:start="471:41" pos:end="471:43">tmp</name></expr></argument>, <argument pos:start="471:46" pos:end="471:48"><expr pos:start="471:46" pos:end="471:48"><name pos:start="471:46" pos:end="471:48">tmp</name></expr></argument>, <argument pos:start="471:51" pos:end="471:54"><expr pos:start="471:51" pos:end="471:54"><name pos:start="471:51" pos:end="471:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="471:58" pos:end="471:63">break;</break>

                <default pos:start="473:17" pos:end="473:24">default:</default> <return pos:start="473:26" pos:end="473:34">return <expr pos:start="473:33" pos:end="473:33"><literal type="number" pos:start="473:33" pos:end="473:33">1</literal></expr>;</return>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="479:13" pos:end="479:18">break;</break>

        <case pos:start="481:9" pos:end="481:16">case <expr pos:start="481:14" pos:end="481:15"><literal type="number" pos:start="481:14" pos:end="481:15">17</literal></expr>:</case>

            <if_stmt pos:start="483:13" pos:end="511:13"><if pos:start="483:13" pos:end="497:13">if <condition pos:start="483:16" pos:end="483:19">(<expr pos:start="483:17" pos:end="483:18"><operator pos:start="483:17" pos:end="483:17">!</operator><name pos:start="483:18" pos:end="483:18">u</name></expr>)</condition> <block pos:start="483:21" pos:end="497:13">{<block_content pos:start="485:17" pos:end="495:17"> <comment type="block" pos:start="483:23" pos:end="483:32">/* VTST */</comment>

                <switch pos:start="485:17" pos:end="495:17">switch <condition pos:start="485:24" pos:end="485:29">(<expr pos:start="485:25" pos:end="485:28"><name pos:start="485:25" pos:end="485:28">size</name></expr>)</condition> <block pos:start="485:31" pos:end="495:17">{<block_content pos:start="487:17" pos:end="493:34">

                <case pos:start="487:17" pos:end="487:23">case <expr pos:start="487:22" pos:end="487:22"><literal type="number" pos:start="487:22" pos:end="487:22">0</literal></expr>:</case> <expr_stmt pos:start="487:25" pos:end="487:63"><expr pos:start="487:25" pos:end="487:62"><call pos:start="487:25" pos:end="487:62"><name pos:start="487:25" pos:end="487:46">gen_helper_neon_tst_u8</name><argument_list pos:start="487:47" pos:end="487:62">(<argument pos:start="487:48" pos:end="487:50"><expr pos:start="487:48" pos:end="487:50"><name pos:start="487:48" pos:end="487:50">tmp</name></expr></argument>, <argument pos:start="487:53" pos:end="487:55"><expr pos:start="487:53" pos:end="487:55"><name pos:start="487:53" pos:end="487:55">tmp</name></expr></argument>, <argument pos:start="487:58" pos:end="487:61"><expr pos:start="487:58" pos:end="487:61"><name pos:start="487:58" pos:end="487:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="487:65" pos:end="487:70">break;</break>

                <case pos:start="489:17" pos:end="489:23">case <expr pos:start="489:22" pos:end="489:22"><literal type="number" pos:start="489:22" pos:end="489:22">1</literal></expr>:</case> <expr_stmt pos:start="489:25" pos:end="489:64"><expr pos:start="489:25" pos:end="489:63"><call pos:start="489:25" pos:end="489:63"><name pos:start="489:25" pos:end="489:47">gen_helper_neon_tst_u16</name><argument_list pos:start="489:48" pos:end="489:63">(<argument pos:start="489:49" pos:end="489:51"><expr pos:start="489:49" pos:end="489:51"><name pos:start="489:49" pos:end="489:51">tmp</name></expr></argument>, <argument pos:start="489:54" pos:end="489:56"><expr pos:start="489:54" pos:end="489:56"><name pos:start="489:54" pos:end="489:56">tmp</name></expr></argument>, <argument pos:start="489:59" pos:end="489:62"><expr pos:start="489:59" pos:end="489:62"><name pos:start="489:59" pos:end="489:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="489:66" pos:end="489:71">break;</break>

                <case pos:start="491:17" pos:end="491:23">case <expr pos:start="491:22" pos:end="491:22"><literal type="number" pos:start="491:22" pos:end="491:22">2</literal></expr>:</case> <expr_stmt pos:start="491:25" pos:end="491:64"><expr pos:start="491:25" pos:end="491:63"><call pos:start="491:25" pos:end="491:63"><name pos:start="491:25" pos:end="491:47">gen_helper_neon_tst_u32</name><argument_list pos:start="491:48" pos:end="491:63">(<argument pos:start="491:49" pos:end="491:51"><expr pos:start="491:49" pos:end="491:51"><name pos:start="491:49" pos:end="491:51">tmp</name></expr></argument>, <argument pos:start="491:54" pos:end="491:56"><expr pos:start="491:54" pos:end="491:56"><name pos:start="491:54" pos:end="491:56">tmp</name></expr></argument>, <argument pos:start="491:59" pos:end="491:62"><expr pos:start="491:59" pos:end="491:62"><name pos:start="491:59" pos:end="491:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="491:66" pos:end="491:71">break;</break>

                <default pos:start="493:17" pos:end="493:24">default:</default> <return pos:start="493:26" pos:end="493:34">return <expr pos:start="493:33" pos:end="493:33"><literal type="number" pos:start="493:33" pos:end="493:33">1</literal></expr>;</return>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="497:15" pos:end="511:13">else <block pos:start="497:20" pos:end="511:13">{<block_content pos:start="499:17" pos:end="509:17"> <comment type="block" pos:start="497:22" pos:end="497:31">/* VCEQ */</comment>

                <switch pos:start="499:17" pos:end="509:17">switch <condition pos:start="499:24" pos:end="499:29">(<expr pos:start="499:25" pos:end="499:28"><name pos:start="499:25" pos:end="499:28">size</name></expr>)</condition> <block pos:start="499:31" pos:end="509:17">{<block_content pos:start="501:17" pos:end="507:34">

                <case pos:start="501:17" pos:end="501:23">case <expr pos:start="501:22" pos:end="501:22"><literal type="number" pos:start="501:22" pos:end="501:22">0</literal></expr>:</case> <expr_stmt pos:start="501:25" pos:end="501:63"><expr pos:start="501:25" pos:end="501:62"><call pos:start="501:25" pos:end="501:62"><name pos:start="501:25" pos:end="501:46">gen_helper_neon_ceq_u8</name><argument_list pos:start="501:47" pos:end="501:62">(<argument pos:start="501:48" pos:end="501:50"><expr pos:start="501:48" pos:end="501:50"><name pos:start="501:48" pos:end="501:50">tmp</name></expr></argument>, <argument pos:start="501:53" pos:end="501:55"><expr pos:start="501:53" pos:end="501:55"><name pos:start="501:53" pos:end="501:55">tmp</name></expr></argument>, <argument pos:start="501:58" pos:end="501:61"><expr pos:start="501:58" pos:end="501:61"><name pos:start="501:58" pos:end="501:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="501:65" pos:end="501:70">break;</break>

                <case pos:start="503:17" pos:end="503:23">case <expr pos:start="503:22" pos:end="503:22"><literal type="number" pos:start="503:22" pos:end="503:22">1</literal></expr>:</case> <expr_stmt pos:start="503:25" pos:end="503:64"><expr pos:start="503:25" pos:end="503:63"><call pos:start="503:25" pos:end="503:63"><name pos:start="503:25" pos:end="503:47">gen_helper_neon_ceq_u16</name><argument_list pos:start="503:48" pos:end="503:63">(<argument pos:start="503:49" pos:end="503:51"><expr pos:start="503:49" pos:end="503:51"><name pos:start="503:49" pos:end="503:51">tmp</name></expr></argument>, <argument pos:start="503:54" pos:end="503:56"><expr pos:start="503:54" pos:end="503:56"><name pos:start="503:54" pos:end="503:56">tmp</name></expr></argument>, <argument pos:start="503:59" pos:end="503:62"><expr pos:start="503:59" pos:end="503:62"><name pos:start="503:59" pos:end="503:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="503:66" pos:end="503:71">break;</break>

                <case pos:start="505:17" pos:end="505:23">case <expr pos:start="505:22" pos:end="505:22"><literal type="number" pos:start="505:22" pos:end="505:22">2</literal></expr>:</case> <expr_stmt pos:start="505:25" pos:end="505:64"><expr pos:start="505:25" pos:end="505:63"><call pos:start="505:25" pos:end="505:63"><name pos:start="505:25" pos:end="505:47">gen_helper_neon_ceq_u32</name><argument_list pos:start="505:48" pos:end="505:63">(<argument pos:start="505:49" pos:end="505:51"><expr pos:start="505:49" pos:end="505:51"><name pos:start="505:49" pos:end="505:51">tmp</name></expr></argument>, <argument pos:start="505:54" pos:end="505:56"><expr pos:start="505:54" pos:end="505:56"><name pos:start="505:54" pos:end="505:56">tmp</name></expr></argument>, <argument pos:start="505:59" pos:end="505:62"><expr pos:start="505:59" pos:end="505:62"><name pos:start="505:59" pos:end="505:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="505:66" pos:end="505:71">break;</break>

                <default pos:start="507:17" pos:end="507:24">default:</default> <return pos:start="507:26" pos:end="507:34">return <expr pos:start="507:33" pos:end="507:33"><literal type="number" pos:start="507:33" pos:end="507:33">1</literal></expr>;</return>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="513:13" pos:end="513:18">break;</break>

        <case pos:start="515:9" pos:end="515:16">case <expr pos:start="515:14" pos:end="515:15"><literal type="number" pos:start="515:14" pos:end="515:15">18</literal></expr>:</case> <comment type="block" pos:start="515:18" pos:end="515:33">/* Multiply.  */</comment>

            <switch pos:start="517:13" pos:end="527:13">switch <condition pos:start="517:20" pos:end="517:25">(<expr pos:start="517:21" pos:end="517:24"><name pos:start="517:21" pos:end="517:24">size</name></expr>)</condition> <block pos:start="517:27" pos:end="527:13">{<block_content pos:start="519:13" pos:end="525:30">

            <case pos:start="519:13" pos:end="519:19">case <expr pos:start="519:18" pos:end="519:18"><literal type="number" pos:start="519:18" pos:end="519:18">0</literal></expr>:</case> <expr_stmt pos:start="519:21" pos:end="519:59"><expr pos:start="519:21" pos:end="519:58"><call pos:start="519:21" pos:end="519:58"><name pos:start="519:21" pos:end="519:42">gen_helper_neon_mul_u8</name><argument_list pos:start="519:43" pos:end="519:58">(<argument pos:start="519:44" pos:end="519:46"><expr pos:start="519:44" pos:end="519:46"><name pos:start="519:44" pos:end="519:46">tmp</name></expr></argument>, <argument pos:start="519:49" pos:end="519:51"><expr pos:start="519:49" pos:end="519:51"><name pos:start="519:49" pos:end="519:51">tmp</name></expr></argument>, <argument pos:start="519:54" pos:end="519:57"><expr pos:start="519:54" pos:end="519:57"><name pos:start="519:54" pos:end="519:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="519:61" pos:end="519:66">break;</break>

            <case pos:start="521:13" pos:end="521:19">case <expr pos:start="521:18" pos:end="521:18"><literal type="number" pos:start="521:18" pos:end="521:18">1</literal></expr>:</case> <expr_stmt pos:start="521:21" pos:end="521:60"><expr pos:start="521:21" pos:end="521:59"><call pos:start="521:21" pos:end="521:59"><name pos:start="521:21" pos:end="521:43">gen_helper_neon_mul_u16</name><argument_list pos:start="521:44" pos:end="521:59">(<argument pos:start="521:45" pos:end="521:47"><expr pos:start="521:45" pos:end="521:47"><name pos:start="521:45" pos:end="521:47">tmp</name></expr></argument>, <argument pos:start="521:50" pos:end="521:52"><expr pos:start="521:50" pos:end="521:52"><name pos:start="521:50" pos:end="521:52">tmp</name></expr></argument>, <argument pos:start="521:55" pos:end="521:58"><expr pos:start="521:55" pos:end="521:58"><name pos:start="521:55" pos:end="521:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="521:62" pos:end="521:67">break;</break>

            <case pos:start="523:13" pos:end="523:19">case <expr pos:start="523:18" pos:end="523:18"><literal type="number" pos:start="523:18" pos:end="523:18">2</literal></expr>:</case> <expr_stmt pos:start="523:21" pos:end="523:52"><expr pos:start="523:21" pos:end="523:51"><call pos:start="523:21" pos:end="523:51"><name pos:start="523:21" pos:end="523:35">tcg_gen_mul_i32</name><argument_list pos:start="523:36" pos:end="523:51">(<argument pos:start="523:37" pos:end="523:39"><expr pos:start="523:37" pos:end="523:39"><name pos:start="523:37" pos:end="523:39">tmp</name></expr></argument>, <argument pos:start="523:42" pos:end="523:44"><expr pos:start="523:42" pos:end="523:44"><name pos:start="523:42" pos:end="523:44">tmp</name></expr></argument>, <argument pos:start="523:47" pos:end="523:50"><expr pos:start="523:47" pos:end="523:50"><name pos:start="523:47" pos:end="523:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="523:54" pos:end="523:59">break;</break>

            <default pos:start="525:13" pos:end="525:20">default:</default> <return pos:start="525:22" pos:end="525:30">return <expr pos:start="525:29" pos:end="525:29"><literal type="number" pos:start="525:29" pos:end="525:29">1</literal></expr>;</return>

            </block_content>}</block></switch>

            <expr_stmt pos:start="529:13" pos:end="529:27"><expr pos:start="529:13" pos:end="529:26"><call pos:start="529:13" pos:end="529:26"><name pos:start="529:13" pos:end="529:20">dead_tmp</name><argument_list pos:start="529:21" pos:end="529:26">(<argument pos:start="529:22" pos:end="529:25"><expr pos:start="529:22" pos:end="529:25"><name pos:start="529:22" pos:end="529:25">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="531:13" pos:end="531:43"><expr pos:start="531:13" pos:end="531:42"><name pos:start="531:13" pos:end="531:16">tmp2</name> <operator pos:start="531:18" pos:end="531:18">=</operator> <call pos:start="531:20" pos:end="531:42"><name pos:start="531:20" pos:end="531:32">neon_load_reg</name><argument_list pos:start="531:33" pos:end="531:42">(<argument pos:start="531:34" pos:end="531:35"><expr pos:start="531:34" pos:end="531:35"><name pos:start="531:34" pos:end="531:35">rd</name></expr></argument>, <argument pos:start="531:38" pos:end="531:41"><expr pos:start="531:38" pos:end="531:41"><name pos:start="531:38" pos:end="531:41">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="533:13" pos:end="541:13"><if pos:start="533:13" pos:end="537:13">if <condition pos:start="533:16" pos:end="533:18">(<expr pos:start="533:17" pos:end="533:17"><name pos:start="533:17" pos:end="533:17">u</name></expr>)</condition> <block pos:start="533:20" pos:end="537:13">{<block_content pos:start="535:17" pos:end="535:46"> <comment type="block" pos:start="533:22" pos:end="533:31">/* VMLS */</comment>

                <expr_stmt pos:start="535:17" pos:end="535:46"><expr pos:start="535:17" pos:end="535:45"><call pos:start="535:17" pos:end="535:45"><name pos:start="535:17" pos:end="535:28">gen_neon_rsb</name><argument_list pos:start="535:29" pos:end="535:45">(<argument pos:start="535:30" pos:end="535:33"><expr pos:start="535:30" pos:end="535:33"><name pos:start="535:30" pos:end="535:33">size</name></expr></argument>, <argument pos:start="535:36" pos:end="535:38"><expr pos:start="535:36" pos:end="535:38"><name pos:start="535:36" pos:end="535:38">tmp</name></expr></argument>, <argument pos:start="535:41" pos:end="535:44"><expr pos:start="535:41" pos:end="535:44"><name pos:start="535:41" pos:end="535:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="537:15" pos:end="541:13">else <block pos:start="537:20" pos:end="541:13">{<block_content pos:start="539:17" pos:end="539:46"> <comment type="block" pos:start="537:22" pos:end="537:31">/* VMLA */</comment>

                <expr_stmt pos:start="539:17" pos:end="539:46"><expr pos:start="539:17" pos:end="539:45"><call pos:start="539:17" pos:end="539:45"><name pos:start="539:17" pos:end="539:28">gen_neon_add</name><argument_list pos:start="539:29" pos:end="539:45">(<argument pos:start="539:30" pos:end="539:33"><expr pos:start="539:30" pos:end="539:33"><name pos:start="539:30" pos:end="539:33">size</name></expr></argument>, <argument pos:start="539:36" pos:end="539:38"><expr pos:start="539:36" pos:end="539:38"><name pos:start="539:36" pos:end="539:38">tmp</name></expr></argument>, <argument pos:start="539:41" pos:end="539:44"><expr pos:start="539:41" pos:end="539:44"><name pos:start="539:41" pos:end="539:44">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="543:13" pos:end="543:18">break;</break>

        <case pos:start="545:9" pos:end="545:16">case <expr pos:start="545:14" pos:end="545:15"><literal type="number" pos:start="545:14" pos:end="545:15">19</literal></expr>:</case> <comment type="block" pos:start="545:18" pos:end="545:27">/* VMUL */</comment>

            <if_stmt pos:start="547:13" pos:end="565:13"><if pos:start="547:13" pos:end="551:13">if <condition pos:start="547:16" pos:end="547:18">(<expr pos:start="547:17" pos:end="547:17"><name pos:start="547:17" pos:end="547:17">u</name></expr>)</condition> <block pos:start="547:20" pos:end="551:13">{<block_content pos:start="549:17" pos:end="549:55"> <comment type="block" pos:start="547:22" pos:end="547:37">/* polynomial */</comment>

                <expr_stmt pos:start="549:17" pos:end="549:55"><expr pos:start="549:17" pos:end="549:54"><call pos:start="549:17" pos:end="549:54"><name pos:start="549:17" pos:end="549:38">gen_helper_neon_mul_p8</name><argument_list pos:start="549:39" pos:end="549:54">(<argument pos:start="549:40" pos:end="549:42"><expr pos:start="549:40" pos:end="549:42"><name pos:start="549:40" pos:end="549:42">tmp</name></expr></argument>, <argument pos:start="549:45" pos:end="549:47"><expr pos:start="549:45" pos:end="549:47"><name pos:start="549:45" pos:end="549:47">tmp</name></expr></argument>, <argument pos:start="549:50" pos:end="549:53"><expr pos:start="549:50" pos:end="549:53"><name pos:start="549:50" pos:end="549:53">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="551:15" pos:end="565:13">else <block pos:start="551:20" pos:end="565:13">{<block_content pos:start="553:17" pos:end="563:17"> <comment type="block" pos:start="551:22" pos:end="551:34">/* Integer */</comment>

                <switch pos:start="553:17" pos:end="563:17">switch <condition pos:start="553:24" pos:end="553:29">(<expr pos:start="553:25" pos:end="553:28"><name pos:start="553:25" pos:end="553:28">size</name></expr>)</condition> <block pos:start="553:31" pos:end="563:17">{<block_content pos:start="555:17" pos:end="561:34">

                <case pos:start="555:17" pos:end="555:23">case <expr pos:start="555:22" pos:end="555:22"><literal type="number" pos:start="555:22" pos:end="555:22">0</literal></expr>:</case> <expr_stmt pos:start="555:25" pos:end="555:63"><expr pos:start="555:25" pos:end="555:62"><call pos:start="555:25" pos:end="555:62"><name pos:start="555:25" pos:end="555:46">gen_helper_neon_mul_u8</name><argument_list pos:start="555:47" pos:end="555:62">(<argument pos:start="555:48" pos:end="555:50"><expr pos:start="555:48" pos:end="555:50"><name pos:start="555:48" pos:end="555:50">tmp</name></expr></argument>, <argument pos:start="555:53" pos:end="555:55"><expr pos:start="555:53" pos:end="555:55"><name pos:start="555:53" pos:end="555:55">tmp</name></expr></argument>, <argument pos:start="555:58" pos:end="555:61"><expr pos:start="555:58" pos:end="555:61"><name pos:start="555:58" pos:end="555:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="555:65" pos:end="555:70">break;</break>

                <case pos:start="557:17" pos:end="557:23">case <expr pos:start="557:22" pos:end="557:22"><literal type="number" pos:start="557:22" pos:end="557:22">1</literal></expr>:</case> <expr_stmt pos:start="557:25" pos:end="557:64"><expr pos:start="557:25" pos:end="557:63"><call pos:start="557:25" pos:end="557:63"><name pos:start="557:25" pos:end="557:47">gen_helper_neon_mul_u16</name><argument_list pos:start="557:48" pos:end="557:63">(<argument pos:start="557:49" pos:end="557:51"><expr pos:start="557:49" pos:end="557:51"><name pos:start="557:49" pos:end="557:51">tmp</name></expr></argument>, <argument pos:start="557:54" pos:end="557:56"><expr pos:start="557:54" pos:end="557:56"><name pos:start="557:54" pos:end="557:56">tmp</name></expr></argument>, <argument pos:start="557:59" pos:end="557:62"><expr pos:start="557:59" pos:end="557:62"><name pos:start="557:59" pos:end="557:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="557:66" pos:end="557:71">break;</break>

                <case pos:start="559:17" pos:end="559:23">case <expr pos:start="559:22" pos:end="559:22"><literal type="number" pos:start="559:22" pos:end="559:22">2</literal></expr>:</case> <expr_stmt pos:start="559:25" pos:end="559:56"><expr pos:start="559:25" pos:end="559:55"><call pos:start="559:25" pos:end="559:55"><name pos:start="559:25" pos:end="559:39">tcg_gen_mul_i32</name><argument_list pos:start="559:40" pos:end="559:55">(<argument pos:start="559:41" pos:end="559:43"><expr pos:start="559:41" pos:end="559:43"><name pos:start="559:41" pos:end="559:43">tmp</name></expr></argument>, <argument pos:start="559:46" pos:end="559:48"><expr pos:start="559:46" pos:end="559:48"><name pos:start="559:46" pos:end="559:48">tmp</name></expr></argument>, <argument pos:start="559:51" pos:end="559:54"><expr pos:start="559:51" pos:end="559:54"><name pos:start="559:51" pos:end="559:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="559:58" pos:end="559:63">break;</break>

                <default pos:start="561:17" pos:end="561:24">default:</default> <return pos:start="561:26" pos:end="561:34">return <expr pos:start="561:33" pos:end="561:33"><literal type="number" pos:start="561:33" pos:end="561:33">1</literal></expr>;</return>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="567:13" pos:end="567:18">break;</break>

        <case pos:start="569:9" pos:end="569:16">case <expr pos:start="569:14" pos:end="569:15"><literal type="number" pos:start="569:14" pos:end="569:15">20</literal></expr>:</case> <comment type="block" pos:start="569:18" pos:end="569:28">/* VPMAX */</comment>

            <expr_stmt pos:start="571:13" pos:end="571:38"><expr pos:start="571:13" pos:end="571:37"><call pos:start="571:13" pos:end="571:37"><name pos:start="571:13" pos:end="571:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="571:32" pos:end="571:37">(<argument pos:start="571:33" pos:end="571:36"><expr pos:start="571:33" pos:end="571:36"><name pos:start="571:33" pos:end="571:36">pmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="573:13" pos:end="573:18">break;</break>

        <case pos:start="575:9" pos:end="575:16">case <expr pos:start="575:14" pos:end="575:15"><literal type="number" pos:start="575:14" pos:end="575:15">21</literal></expr>:</case> <comment type="block" pos:start="575:18" pos:end="575:28">/* VPMIN */</comment>

            <expr_stmt pos:start="577:13" pos:end="577:38"><expr pos:start="577:13" pos:end="577:37"><call pos:start="577:13" pos:end="577:37"><name pos:start="577:13" pos:end="577:31">GEN_NEON_INTEGER_OP</name><argument_list pos:start="577:32" pos:end="577:37">(<argument pos:start="577:33" pos:end="577:36"><expr pos:start="577:33" pos:end="577:36"><name pos:start="577:33" pos:end="577:36">pmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="579:13" pos:end="579:18">break;</break>

        <case pos:start="581:9" pos:end="581:16">case <expr pos:start="581:14" pos:end="581:15"><literal type="number" pos:start="581:14" pos:end="581:15">22</literal></expr>:</case> <comment type="block" pos:start="581:18" pos:end="581:38">/* Hultiply high.  */</comment>

            <if_stmt pos:start="583:13" pos:end="607:13"><if pos:start="583:13" pos:end="595:13">if <condition pos:start="583:16" pos:end="583:19">(<expr pos:start="583:17" pos:end="583:18"><operator pos:start="583:17" pos:end="583:17">!</operator><name pos:start="583:18" pos:end="583:18">u</name></expr>)</condition> <block pos:start="583:21" pos:end="595:13">{<block_content pos:start="585:17" pos:end="593:17"> <comment type="block" pos:start="583:23" pos:end="583:35">/* VQDMULH */</comment>

                <switch pos:start="585:17" pos:end="593:17">switch <condition pos:start="585:24" pos:end="585:29">(<expr pos:start="585:25" pos:end="585:28"><name pos:start="585:25" pos:end="585:28">size</name></expr>)</condition> <block pos:start="585:31" pos:end="593:17">{<block_content pos:start="587:17" pos:end="591:34">

                <case pos:start="587:17" pos:end="587:23">case <expr pos:start="587:22" pos:end="587:22"><literal type="number" pos:start="587:22" pos:end="587:22">1</literal></expr>:</case> <expr_stmt pos:start="587:25" pos:end="587:76"><expr pos:start="587:25" pos:end="587:75"><call pos:start="587:25" pos:end="587:75"><name pos:start="587:25" pos:end="587:50">gen_helper_neon_qdmulh_s16</name><argument_list pos:start="587:51" pos:end="587:75">(<argument pos:start="587:52" pos:end="587:54"><expr pos:start="587:52" pos:end="587:54"><name pos:start="587:52" pos:end="587:54">tmp</name></expr></argument>, <argument pos:start="587:57" pos:end="587:63"><expr pos:start="587:57" pos:end="587:63"><name pos:start="587:57" pos:end="587:63">cpu_env</name></expr></argument>, <argument pos:start="587:66" pos:end="587:68"><expr pos:start="587:66" pos:end="587:68"><name pos:start="587:66" pos:end="587:68">tmp</name></expr></argument>, <argument pos:start="587:71" pos:end="587:74"><expr pos:start="587:71" pos:end="587:74"><name pos:start="587:71" pos:end="587:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="587:78" pos:end="587:83">break;</break>

                <case pos:start="589:17" pos:end="589:23">case <expr pos:start="589:22" pos:end="589:22"><literal type="number" pos:start="589:22" pos:end="589:22">2</literal></expr>:</case> <expr_stmt pos:start="589:25" pos:end="589:76"><expr pos:start="589:25" pos:end="589:75"><call pos:start="589:25" pos:end="589:75"><name pos:start="589:25" pos:end="589:50">gen_helper_neon_qdmulh_s32</name><argument_list pos:start="589:51" pos:end="589:75">(<argument pos:start="589:52" pos:end="589:54"><expr pos:start="589:52" pos:end="589:54"><name pos:start="589:52" pos:end="589:54">tmp</name></expr></argument>, <argument pos:start="589:57" pos:end="589:63"><expr pos:start="589:57" pos:end="589:63"><name pos:start="589:57" pos:end="589:63">cpu_env</name></expr></argument>, <argument pos:start="589:66" pos:end="589:68"><expr pos:start="589:66" pos:end="589:68"><name pos:start="589:66" pos:end="589:68">tmp</name></expr></argument>, <argument pos:start="589:71" pos:end="589:74"><expr pos:start="589:71" pos:end="589:74"><name pos:start="589:71" pos:end="589:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="589:78" pos:end="589:83">break;</break>

                <default pos:start="591:17" pos:end="591:24">default:</default> <return pos:start="591:26" pos:end="591:34">return <expr pos:start="591:33" pos:end="591:33"><literal type="number" pos:start="591:33" pos:end="591:33">1</literal></expr>;</return>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="595:15" pos:end="607:13">else <block pos:start="595:20" pos:end="607:13">{<block_content pos:start="597:17" pos:end="605:17"> <comment type="block" pos:start="595:22" pos:end="595:35">/* VQRDHMUL */</comment>

                <switch pos:start="597:17" pos:end="605:17">switch <condition pos:start="597:24" pos:end="597:29">(<expr pos:start="597:25" pos:end="597:28"><name pos:start="597:25" pos:end="597:28">size</name></expr>)</condition> <block pos:start="597:31" pos:end="605:17">{<block_content pos:start="599:17" pos:end="603:34">

                <case pos:start="599:17" pos:end="599:23">case <expr pos:start="599:22" pos:end="599:22"><literal type="number" pos:start="599:22" pos:end="599:22">1</literal></expr>:</case> <expr_stmt pos:start="599:25" pos:end="599:77"><expr pos:start="599:25" pos:end="599:76"><call pos:start="599:25" pos:end="599:76"><name pos:start="599:25" pos:end="599:51">gen_helper_neon_qrdmulh_s16</name><argument_list pos:start="599:52" pos:end="599:76">(<argument pos:start="599:53" pos:end="599:55"><expr pos:start="599:53" pos:end="599:55"><name pos:start="599:53" pos:end="599:55">tmp</name></expr></argument>, <argument pos:start="599:58" pos:end="599:64"><expr pos:start="599:58" pos:end="599:64"><name pos:start="599:58" pos:end="599:64">cpu_env</name></expr></argument>, <argument pos:start="599:67" pos:end="599:69"><expr pos:start="599:67" pos:end="599:69"><name pos:start="599:67" pos:end="599:69">tmp</name></expr></argument>, <argument pos:start="599:72" pos:end="599:75"><expr pos:start="599:72" pos:end="599:75"><name pos:start="599:72" pos:end="599:75">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="599:79" pos:end="599:84">break;</break>

                <case pos:start="601:17" pos:end="601:23">case <expr pos:start="601:22" pos:end="601:22"><literal type="number" pos:start="601:22" pos:end="601:22">2</literal></expr>:</case> <expr_stmt pos:start="601:25" pos:end="601:77"><expr pos:start="601:25" pos:end="601:76"><call pos:start="601:25" pos:end="601:76"><name pos:start="601:25" pos:end="601:51">gen_helper_neon_qrdmulh_s32</name><argument_list pos:start="601:52" pos:end="601:76">(<argument pos:start="601:53" pos:end="601:55"><expr pos:start="601:53" pos:end="601:55"><name pos:start="601:53" pos:end="601:55">tmp</name></expr></argument>, <argument pos:start="601:58" pos:end="601:64"><expr pos:start="601:58" pos:end="601:64"><name pos:start="601:58" pos:end="601:64">cpu_env</name></expr></argument>, <argument pos:start="601:67" pos:end="601:69"><expr pos:start="601:67" pos:end="601:69"><name pos:start="601:67" pos:end="601:69">tmp</name></expr></argument>, <argument pos:start="601:72" pos:end="601:75"><expr pos:start="601:72" pos:end="601:75"><name pos:start="601:72" pos:end="601:75">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="601:79" pos:end="601:84">break;</break>

                <default pos:start="603:17" pos:end="603:24">default:</default> <return pos:start="603:26" pos:end="603:34">return <expr pos:start="603:33" pos:end="603:33"><literal type="number" pos:start="603:33" pos:end="603:33">1</literal></expr>;</return>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

            <break pos:start="609:13" pos:end="609:18">break;</break>

        <case pos:start="611:9" pos:end="611:16">case <expr pos:start="611:14" pos:end="611:15"><literal type="number" pos:start="611:14" pos:end="611:15">23</literal></expr>:</case> <comment type="block" pos:start="611:18" pos:end="611:28">/* VPADD */</comment>

            <if_stmt pos:start="613:13" pos:end="615:25"><if pos:start="613:13" pos:end="615:25">if <condition pos:start="613:16" pos:end="613:18">(<expr pos:start="613:17" pos:end="613:17"><name pos:start="613:17" pos:end="613:17">u</name></expr>)</condition><block type="pseudo" pos:start="615:17" pos:end="615:25"><block_content pos:start="615:17" pos:end="615:25">

                <return pos:start="615:17" pos:end="615:25">return <expr pos:start="615:24" pos:end="615:24"><literal type="number" pos:start="615:24" pos:end="615:24">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <switch pos:start="617:13" pos:end="627:13">switch <condition pos:start="617:20" pos:end="617:25">(<expr pos:start="617:21" pos:end="617:24"><name pos:start="617:21" pos:end="617:24">size</name></expr>)</condition> <block pos:start="617:27" pos:end="627:13">{<block_content pos:start="619:13" pos:end="625:30">

            <case pos:start="619:13" pos:end="619:19">case <expr pos:start="619:18" pos:end="619:18"><literal type="number" pos:start="619:18" pos:end="619:18">0</literal></expr>:</case> <expr_stmt pos:start="619:21" pos:end="619:60"><expr pos:start="619:21" pos:end="619:59"><call pos:start="619:21" pos:end="619:59"><name pos:start="619:21" pos:end="619:43">gen_helper_neon_padd_u8</name><argument_list pos:start="619:44" pos:end="619:59">(<argument pos:start="619:45" pos:end="619:47"><expr pos:start="619:45" pos:end="619:47"><name pos:start="619:45" pos:end="619:47">tmp</name></expr></argument>, <argument pos:start="619:50" pos:end="619:52"><expr pos:start="619:50" pos:end="619:52"><name pos:start="619:50" pos:end="619:52">tmp</name></expr></argument>, <argument pos:start="619:55" pos:end="619:58"><expr pos:start="619:55" pos:end="619:58"><name pos:start="619:55" pos:end="619:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="619:62" pos:end="619:67">break;</break>

            <case pos:start="621:13" pos:end="621:19">case <expr pos:start="621:18" pos:end="621:18"><literal type="number" pos:start="621:18" pos:end="621:18">1</literal></expr>:</case> <expr_stmt pos:start="621:21" pos:end="621:61"><expr pos:start="621:21" pos:end="621:60"><call pos:start="621:21" pos:end="621:60"><name pos:start="621:21" pos:end="621:44">gen_helper_neon_padd_u16</name><argument_list pos:start="621:45" pos:end="621:60">(<argument pos:start="621:46" pos:end="621:48"><expr pos:start="621:46" pos:end="621:48"><name pos:start="621:46" pos:end="621:48">tmp</name></expr></argument>, <argument pos:start="621:51" pos:end="621:53"><expr pos:start="621:51" pos:end="621:53"><name pos:start="621:51" pos:end="621:53">tmp</name></expr></argument>, <argument pos:start="621:56" pos:end="621:59"><expr pos:start="621:56" pos:end="621:59"><name pos:start="621:56" pos:end="621:59">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="621:63" pos:end="621:68">break;</break>

            <case pos:start="623:13" pos:end="623:19">case <expr pos:start="623:18" pos:end="623:18"><literal type="number" pos:start="623:18" pos:end="623:18">2</literal></expr>:</case> <expr_stmt pos:start="623:21" pos:end="623:52"><expr pos:start="623:21" pos:end="623:51"><call pos:start="623:21" pos:end="623:51"><name pos:start="623:21" pos:end="623:35">tcg_gen_add_i32</name><argument_list pos:start="623:36" pos:end="623:51">(<argument pos:start="623:37" pos:end="623:39"><expr pos:start="623:37" pos:end="623:39"><name pos:start="623:37" pos:end="623:39">tmp</name></expr></argument>, <argument pos:start="623:42" pos:end="623:44"><expr pos:start="623:42" pos:end="623:44"><name pos:start="623:42" pos:end="623:44">tmp</name></expr></argument>, <argument pos:start="623:47" pos:end="623:50"><expr pos:start="623:47" pos:end="623:50"><name pos:start="623:47" pos:end="623:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="623:54" pos:end="623:59">break;</break>

            <default pos:start="625:13" pos:end="625:20">default:</default> <return pos:start="625:22" pos:end="625:30">return <expr pos:start="625:29" pos:end="625:29"><literal type="number" pos:start="625:29" pos:end="625:29">1</literal></expr>;</return>

            </block_content>}</block></switch>

            <break pos:start="629:13" pos:end="629:18">break;</break>

        <case pos:start="631:9" pos:end="631:16">case <expr pos:start="631:14" pos:end="631:15"><literal type="number" pos:start="631:14" pos:end="631:15">26</literal></expr>:</case> <comment type="block" pos:start="631:18" pos:end="631:50">/* Floating point arithnetic.  */</comment>

            <switch pos:start="633:13" pos:end="663:13">switch <condition pos:start="633:20" pos:end="633:36">(<expr pos:start="633:21" pos:end="633:35"><operator pos:start="633:21" pos:end="633:21">(</operator><name pos:start="633:22" pos:end="633:22">u</name> <operator pos:start="633:24" pos:end="633:25">&lt;&lt;</operator> <literal type="number" pos:start="633:27" pos:end="633:27">2</literal><operator pos:start="633:28" pos:end="633:28">)</operator> <operator pos:start="633:30" pos:end="633:30">|</operator> <name pos:start="633:32" pos:end="633:35">size</name></expr>)</condition> <block pos:start="633:38" pos:end="663:13">{<block_content pos:start="635:13" pos:end="661:25">

            <case pos:start="635:13" pos:end="635:19">case <expr pos:start="635:18" pos:end="635:18"><literal type="number" pos:start="635:18" pos:end="635:18">0</literal></expr>:</case> <comment type="block" pos:start="635:21" pos:end="635:30">/* VADD */</comment>

                <expr_stmt pos:start="637:17" pos:end="637:56"><expr pos:start="637:17" pos:end="637:55"><call pos:start="637:17" pos:end="637:55"><name pos:start="637:17" pos:end="637:39">gen_helper_neon_add_f32</name><argument_list pos:start="637:40" pos:end="637:55">(<argument pos:start="637:41" pos:end="637:43"><expr pos:start="637:41" pos:end="637:43"><name pos:start="637:41" pos:end="637:43">tmp</name></expr></argument>, <argument pos:start="637:46" pos:end="637:48"><expr pos:start="637:46" pos:end="637:48"><name pos:start="637:46" pos:end="637:48">tmp</name></expr></argument>, <argument pos:start="637:51" pos:end="637:54"><expr pos:start="637:51" pos:end="637:54"><name pos:start="637:51" pos:end="637:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="639:17" pos:end="639:22">break;</break>

            <case pos:start="641:13" pos:end="641:19">case <expr pos:start="641:18" pos:end="641:18"><literal type="number" pos:start="641:18" pos:end="641:18">2</literal></expr>:</case> <comment type="block" pos:start="641:21" pos:end="641:30">/* VSUB */</comment>

                <expr_stmt pos:start="643:17" pos:end="643:56"><expr pos:start="643:17" pos:end="643:55"><call pos:start="643:17" pos:end="643:55"><name pos:start="643:17" pos:end="643:39">gen_helper_neon_sub_f32</name><argument_list pos:start="643:40" pos:end="643:55">(<argument pos:start="643:41" pos:end="643:43"><expr pos:start="643:41" pos:end="643:43"><name pos:start="643:41" pos:end="643:43">tmp</name></expr></argument>, <argument pos:start="643:46" pos:end="643:48"><expr pos:start="643:46" pos:end="643:48"><name pos:start="643:46" pos:end="643:48">tmp</name></expr></argument>, <argument pos:start="643:51" pos:end="643:54"><expr pos:start="643:51" pos:end="643:54"><name pos:start="643:51" pos:end="643:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="645:17" pos:end="645:22">break;</break>

            <case pos:start="647:13" pos:end="647:19">case <expr pos:start="647:18" pos:end="647:18"><literal type="number" pos:start="647:18" pos:end="647:18">4</literal></expr>:</case> <comment type="block" pos:start="647:21" pos:end="647:31">/* VPADD */</comment>

                <expr_stmt pos:start="649:17" pos:end="649:56"><expr pos:start="649:17" pos:end="649:55"><call pos:start="649:17" pos:end="649:55"><name pos:start="649:17" pos:end="649:39">gen_helper_neon_add_f32</name><argument_list pos:start="649:40" pos:end="649:55">(<argument pos:start="649:41" pos:end="649:43"><expr pos:start="649:41" pos:end="649:43"><name pos:start="649:41" pos:end="649:43">tmp</name></expr></argument>, <argument pos:start="649:46" pos:end="649:48"><expr pos:start="649:46" pos:end="649:48"><name pos:start="649:46" pos:end="649:48">tmp</name></expr></argument>, <argument pos:start="649:51" pos:end="649:54"><expr pos:start="649:51" pos:end="649:54"><name pos:start="649:51" pos:end="649:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="651:17" pos:end="651:22">break;</break>

            <case pos:start="653:13" pos:end="653:19">case <expr pos:start="653:18" pos:end="653:18"><literal type="number" pos:start="653:18" pos:end="653:18">6</literal></expr>:</case> <comment type="block" pos:start="653:21" pos:end="653:30">/* VABD */</comment>

                <expr_stmt pos:start="655:17" pos:end="655:56"><expr pos:start="655:17" pos:end="655:55"><call pos:start="655:17" pos:end="655:55"><name pos:start="655:17" pos:end="655:39">gen_helper_neon_abd_f32</name><argument_list pos:start="655:40" pos:end="655:55">(<argument pos:start="655:41" pos:end="655:43"><expr pos:start="655:41" pos:end="655:43"><name pos:start="655:41" pos:end="655:43">tmp</name></expr></argument>, <argument pos:start="655:46" pos:end="655:48"><expr pos:start="655:46" pos:end="655:48"><name pos:start="655:46" pos:end="655:48">tmp</name></expr></argument>, <argument pos:start="655:51" pos:end="655:54"><expr pos:start="655:51" pos:end="655:54"><name pos:start="655:51" pos:end="655:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="657:17" pos:end="657:22">break;</break>

            <default pos:start="659:13" pos:end="659:20">default:</default>

                <return pos:start="661:17" pos:end="661:25">return <expr pos:start="661:24" pos:end="661:24"><literal type="number" pos:start="661:24" pos:end="661:24">1</literal></expr>;</return>

            </block_content>}</block></switch>

            <break pos:start="665:13" pos:end="665:18">break;</break>

        <case pos:start="667:9" pos:end="667:16">case <expr pos:start="667:14" pos:end="667:15"><literal type="number" pos:start="667:14" pos:end="667:15">27</literal></expr>:</case> <comment type="block" pos:start="667:18" pos:end="667:39">/* Float multiply.  */</comment>

            <expr_stmt pos:start="669:13" pos:end="669:52"><expr pos:start="669:13" pos:end="669:51"><call pos:start="669:13" pos:end="669:51"><name pos:start="669:13" pos:end="669:35">gen_helper_neon_mul_f32</name><argument_list pos:start="669:36" pos:end="669:51">(<argument pos:start="669:37" pos:end="669:39"><expr pos:start="669:37" pos:end="669:39"><name pos:start="669:37" pos:end="669:39">tmp</name></expr></argument>, <argument pos:start="669:42" pos:end="669:44"><expr pos:start="669:42" pos:end="669:44"><name pos:start="669:42" pos:end="669:44">tmp</name></expr></argument>, <argument pos:start="669:47" pos:end="669:50"><expr pos:start="669:47" pos:end="669:50"><name pos:start="669:47" pos:end="669:50">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="671:13" pos:end="687:13"><if pos:start="671:13" pos:end="687:13">if <condition pos:start="671:16" pos:end="671:19">(<expr pos:start="671:17" pos:end="671:18"><operator pos:start="671:17" pos:end="671:17">!</operator><name pos:start="671:18" pos:end="671:18">u</name></expr>)</condition> <block pos:start="671:21" pos:end="687:13">{<block_content pos:start="673:17" pos:end="685:17">

                <expr_stmt pos:start="673:17" pos:end="673:31"><expr pos:start="673:17" pos:end="673:30"><call pos:start="673:17" pos:end="673:30"><name pos:start="673:17" pos:end="673:24">dead_tmp</name><argument_list pos:start="673:25" pos:end="673:30">(<argument pos:start="673:26" pos:end="673:29"><expr pos:start="673:26" pos:end="673:29"><name pos:start="673:26" pos:end="673:29">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="675:17" pos:end="675:47"><expr pos:start="675:17" pos:end="675:46"><name pos:start="675:17" pos:end="675:20">tmp2</name> <operator pos:start="675:22" pos:end="675:22">=</operator> <call pos:start="675:24" pos:end="675:46"><name pos:start="675:24" pos:end="675:36">neon_load_reg</name><argument_list pos:start="675:37" pos:end="675:46">(<argument pos:start="675:38" pos:end="675:39"><expr pos:start="675:38" pos:end="675:39"><name pos:start="675:38" pos:end="675:39">rd</name></expr></argument>, <argument pos:start="675:42" pos:end="675:45"><expr pos:start="675:42" pos:end="675:45"><name pos:start="675:42" pos:end="675:45">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="677:17" pos:end="685:17"><if pos:start="677:17" pos:end="681:17">if <condition pos:start="677:20" pos:end="677:30">(<expr pos:start="677:21" pos:end="677:29"><name pos:start="677:21" pos:end="677:24">size</name> <operator pos:start="677:26" pos:end="677:27">==</operator> <literal type="number" pos:start="677:29" pos:end="677:29">0</literal></expr>)</condition> <block pos:start="677:32" pos:end="681:17">{<block_content pos:start="679:21" pos:end="679:60">

                    <expr_stmt pos:start="679:21" pos:end="679:60"><expr pos:start="679:21" pos:end="679:59"><call pos:start="679:21" pos:end="679:59"><name pos:start="679:21" pos:end="679:43">gen_helper_neon_add_f32</name><argument_list pos:start="679:44" pos:end="679:59">(<argument pos:start="679:45" pos:end="679:47"><expr pos:start="679:45" pos:end="679:47"><name pos:start="679:45" pos:end="679:47">tmp</name></expr></argument>, <argument pos:start="679:50" pos:end="679:52"><expr pos:start="679:50" pos:end="679:52"><name pos:start="679:50" pos:end="679:52">tmp</name></expr></argument>, <argument pos:start="679:55" pos:end="679:58"><expr pos:start="679:55" pos:end="679:58"><name pos:start="679:55" pos:end="679:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="681:19" pos:end="685:17">else <block pos:start="681:24" pos:end="685:17">{<block_content pos:start="683:21" pos:end="683:60">

                    <expr_stmt pos:start="683:21" pos:end="683:60"><expr pos:start="683:21" pos:end="683:59"><call pos:start="683:21" pos:end="683:59"><name pos:start="683:21" pos:end="683:43">gen_helper_neon_sub_f32</name><argument_list pos:start="683:44" pos:end="683:59">(<argument pos:start="683:45" pos:end="683:47"><expr pos:start="683:45" pos:end="683:47"><name pos:start="683:45" pos:end="683:47">tmp</name></expr></argument>, <argument pos:start="683:50" pos:end="683:53"><expr pos:start="683:50" pos:end="683:53"><name pos:start="683:50" pos:end="683:53">tmp2</name></expr></argument>, <argument pos:start="683:56" pos:end="683:58"><expr pos:start="683:56" pos:end="683:58"><name pos:start="683:56" pos:end="683:58">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="689:13" pos:end="689:18">break;</break>

        <case pos:start="691:9" pos:end="691:16">case <expr pos:start="691:14" pos:end="691:15"><literal type="number" pos:start="691:14" pos:end="691:15">28</literal></expr>:</case> <comment type="block" pos:start="691:18" pos:end="691:38">/* Float compare.  */</comment>

            <if_stmt pos:start="693:13" pos:end="707:13"><if pos:start="693:13" pos:end="697:13">if <condition pos:start="693:16" pos:end="693:19">(<expr pos:start="693:17" pos:end="693:18"><operator pos:start="693:17" pos:end="693:17">!</operator><name pos:start="693:18" pos:end="693:18">u</name></expr>)</condition> <block pos:start="693:21" pos:end="697:13">{<block_content pos:start="695:17" pos:end="695:56">

                <expr_stmt pos:start="695:17" pos:end="695:56"><expr pos:start="695:17" pos:end="695:55"><call pos:start="695:17" pos:end="695:55"><name pos:start="695:17" pos:end="695:39">gen_helper_neon_ceq_f32</name><argument_list pos:start="695:40" pos:end="695:55">(<argument pos:start="695:41" pos:end="695:43"><expr pos:start="695:41" pos:end="695:43"><name pos:start="695:41" pos:end="695:43">tmp</name></expr></argument>, <argument pos:start="695:46" pos:end="695:48"><expr pos:start="695:46" pos:end="695:48"><name pos:start="695:46" pos:end="695:48">tmp</name></expr></argument>, <argument pos:start="695:51" pos:end="695:54"><expr pos:start="695:51" pos:end="695:54"><name pos:start="695:51" pos:end="695:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="697:15" pos:end="707:13">else <block pos:start="697:20" pos:end="707:13">{<block_content pos:start="699:17" pos:end="705:60">

                <if_stmt pos:start="699:17" pos:end="705:60"><if pos:start="699:17" pos:end="701:60">if <condition pos:start="699:20" pos:end="699:30">(<expr pos:start="699:21" pos:end="699:29"><name pos:start="699:21" pos:end="699:24">size</name> <operator pos:start="699:26" pos:end="699:27">==</operator> <literal type="number" pos:start="699:29" pos:end="699:29">0</literal></expr>)</condition><block type="pseudo" pos:start="701:21" pos:end="701:60"><block_content pos:start="701:21" pos:end="701:60">

                    <expr_stmt pos:start="701:21" pos:end="701:60"><expr pos:start="701:21" pos:end="701:59"><call pos:start="701:21" pos:end="701:59"><name pos:start="701:21" pos:end="701:43">gen_helper_neon_cge_f32</name><argument_list pos:start="701:44" pos:end="701:59">(<argument pos:start="701:45" pos:end="701:47"><expr pos:start="701:45" pos:end="701:47"><name pos:start="701:45" pos:end="701:47">tmp</name></expr></argument>, <argument pos:start="701:50" pos:end="701:52"><expr pos:start="701:50" pos:end="701:52"><name pos:start="701:50" pos:end="701:52">tmp</name></expr></argument>, <argument pos:start="701:55" pos:end="701:58"><expr pos:start="701:55" pos:end="701:58"><name pos:start="701:55" pos:end="701:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="703:17" pos:end="705:60">else<block type="pseudo" pos:start="705:21" pos:end="705:60"><block_content pos:start="705:21" pos:end="705:60">

                    <expr_stmt pos:start="705:21" pos:end="705:60"><expr pos:start="705:21" pos:end="705:59"><call pos:start="705:21" pos:end="705:59"><name pos:start="705:21" pos:end="705:43">gen_helper_neon_cgt_f32</name><argument_list pos:start="705:44" pos:end="705:59">(<argument pos:start="705:45" pos:end="705:47"><expr pos:start="705:45" pos:end="705:47"><name pos:start="705:45" pos:end="705:47">tmp</name></expr></argument>, <argument pos:start="705:50" pos:end="705:52"><expr pos:start="705:50" pos:end="705:52"><name pos:start="705:50" pos:end="705:52">tmp</name></expr></argument>, <argument pos:start="705:55" pos:end="705:58"><expr pos:start="705:55" pos:end="705:58"><name pos:start="705:55" pos:end="705:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="709:13" pos:end="709:18">break;</break>

        <case pos:start="711:9" pos:end="711:16">case <expr pos:start="711:14" pos:end="711:15"><literal type="number" pos:start="711:14" pos:end="711:15">29</literal></expr>:</case> <comment type="block" pos:start="711:18" pos:end="711:47">/* Float compare absolute.  */</comment>

            <if_stmt pos:start="713:13" pos:end="715:25"><if pos:start="713:13" pos:end="715:25">if <condition pos:start="713:16" pos:end="713:19">(<expr pos:start="713:17" pos:end="713:18"><operator pos:start="713:17" pos:end="713:17">!</operator><name pos:start="713:18" pos:end="713:18">u</name></expr>)</condition><block type="pseudo" pos:start="715:17" pos:end="715:25"><block_content pos:start="715:17" pos:end="715:25">

                <return pos:start="715:17" pos:end="715:25">return <expr pos:start="715:24" pos:end="715:24"><literal type="number" pos:start="715:24" pos:end="715:24">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="717:13" pos:end="723:57"><if pos:start="717:13" pos:end="719:57">if <condition pos:start="717:16" pos:end="717:26">(<expr pos:start="717:17" pos:end="717:25"><name pos:start="717:17" pos:end="717:20">size</name> <operator pos:start="717:22" pos:end="717:23">==</operator> <literal type="number" pos:start="717:25" pos:end="717:25">0</literal></expr>)</condition><block type="pseudo" pos:start="719:17" pos:end="719:57"><block_content pos:start="719:17" pos:end="719:57">

                <expr_stmt pos:start="719:17" pos:end="719:57"><expr pos:start="719:17" pos:end="719:56"><call pos:start="719:17" pos:end="719:56"><name pos:start="719:17" pos:end="719:40">gen_helper_neon_acge_f32</name><argument_list pos:start="719:41" pos:end="719:56">(<argument pos:start="719:42" pos:end="719:44"><expr pos:start="719:42" pos:end="719:44"><name pos:start="719:42" pos:end="719:44">tmp</name></expr></argument>, <argument pos:start="719:47" pos:end="719:49"><expr pos:start="719:47" pos:end="719:49"><name pos:start="719:47" pos:end="719:49">tmp</name></expr></argument>, <argument pos:start="719:52" pos:end="719:55"><expr pos:start="719:52" pos:end="719:55"><name pos:start="719:52" pos:end="719:55">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="721:13" pos:end="723:57">else<block type="pseudo" pos:start="723:17" pos:end="723:57"><block_content pos:start="723:17" pos:end="723:57">

                <expr_stmt pos:start="723:17" pos:end="723:57"><expr pos:start="723:17" pos:end="723:56"><call pos:start="723:17" pos:end="723:56"><name pos:start="723:17" pos:end="723:40">gen_helper_neon_acgt_f32</name><argument_list pos:start="723:41" pos:end="723:56">(<argument pos:start="723:42" pos:end="723:44"><expr pos:start="723:42" pos:end="723:44"><name pos:start="723:42" pos:end="723:44">tmp</name></expr></argument>, <argument pos:start="723:47" pos:end="723:49"><expr pos:start="723:47" pos:end="723:49"><name pos:start="723:47" pos:end="723:49">tmp</name></expr></argument>, <argument pos:start="723:52" pos:end="723:55"><expr pos:start="723:52" pos:end="723:55"><name pos:start="723:52" pos:end="723:55">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="725:13" pos:end="725:18">break;</break>

        <case pos:start="727:9" pos:end="727:16">case <expr pos:start="727:14" pos:end="727:15"><literal type="number" pos:start="727:14" pos:end="727:15">30</literal></expr>:</case> <comment type="block" pos:start="727:18" pos:end="727:38">/* Float min/max.  */</comment>

            <if_stmt pos:start="729:13" pos:end="735:56"><if pos:start="729:13" pos:end="731:56">if <condition pos:start="729:16" pos:end="729:26">(<expr pos:start="729:17" pos:end="729:25"><name pos:start="729:17" pos:end="729:20">size</name> <operator pos:start="729:22" pos:end="729:23">==</operator> <literal type="number" pos:start="729:25" pos:end="729:25">0</literal></expr>)</condition><block type="pseudo" pos:start="731:17" pos:end="731:56"><block_content pos:start="731:17" pos:end="731:56">

                <expr_stmt pos:start="731:17" pos:end="731:56"><expr pos:start="731:17" pos:end="731:55"><call pos:start="731:17" pos:end="731:55"><name pos:start="731:17" pos:end="731:39">gen_helper_neon_max_f32</name><argument_list pos:start="731:40" pos:end="731:55">(<argument pos:start="731:41" pos:end="731:43"><expr pos:start="731:41" pos:end="731:43"><name pos:start="731:41" pos:end="731:43">tmp</name></expr></argument>, <argument pos:start="731:46" pos:end="731:48"><expr pos:start="731:46" pos:end="731:48"><name pos:start="731:46" pos:end="731:48">tmp</name></expr></argument>, <argument pos:start="731:51" pos:end="731:54"><expr pos:start="731:51" pos:end="731:54"><name pos:start="731:51" pos:end="731:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="733:13" pos:end="735:56">else<block type="pseudo" pos:start="735:17" pos:end="735:56"><block_content pos:start="735:17" pos:end="735:56">

                <expr_stmt pos:start="735:17" pos:end="735:56"><expr pos:start="735:17" pos:end="735:55"><call pos:start="735:17" pos:end="735:55"><name pos:start="735:17" pos:end="735:39">gen_helper_neon_min_f32</name><argument_list pos:start="735:40" pos:end="735:55">(<argument pos:start="735:41" pos:end="735:43"><expr pos:start="735:41" pos:end="735:43"><name pos:start="735:41" pos:end="735:43">tmp</name></expr></argument>, <argument pos:start="735:46" pos:end="735:48"><expr pos:start="735:46" pos:end="735:48"><name pos:start="735:46" pos:end="735:48">tmp</name></expr></argument>, <argument pos:start="735:51" pos:end="735:54"><expr pos:start="735:51" pos:end="735:54"><name pos:start="735:51" pos:end="735:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="737:13" pos:end="737:18">break;</break>

        <case pos:start="739:9" pos:end="739:16">case <expr pos:start="739:14" pos:end="739:15"><literal type="number" pos:start="739:14" pos:end="739:15">31</literal></expr>:</case>

            <if_stmt pos:start="741:13" pos:end="747:63"><if pos:start="741:13" pos:end="743:62">if <condition pos:start="741:16" pos:end="741:26">(<expr pos:start="741:17" pos:end="741:25"><name pos:start="741:17" pos:end="741:20">size</name> <operator pos:start="741:22" pos:end="741:23">==</operator> <literal type="number" pos:start="741:25" pos:end="741:25">0</literal></expr>)</condition><block type="pseudo" pos:start="743:17" pos:end="743:62"><block_content pos:start="743:17" pos:end="743:62">

                <expr_stmt pos:start="743:17" pos:end="743:62"><expr pos:start="743:17" pos:end="743:61"><call pos:start="743:17" pos:end="743:61"><name pos:start="743:17" pos:end="743:36">gen_helper_recps_f32</name><argument_list pos:start="743:37" pos:end="743:61">(<argument pos:start="743:38" pos:end="743:40"><expr pos:start="743:38" pos:end="743:40"><name pos:start="743:38" pos:end="743:40">tmp</name></expr></argument>, <argument pos:start="743:43" pos:end="743:45"><expr pos:start="743:43" pos:end="743:45"><name pos:start="743:43" pos:end="743:45">tmp</name></expr></argument>, <argument pos:start="743:48" pos:end="743:51"><expr pos:start="743:48" pos:end="743:51"><name pos:start="743:48" pos:end="743:51">tmp2</name></expr></argument>, <argument pos:start="743:54" pos:end="743:60"><expr pos:start="743:54" pos:end="743:60"><name pos:start="743:54" pos:end="743:60">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="745:13" pos:end="747:63">else<block type="pseudo" pos:start="747:17" pos:end="747:63"><block_content pos:start="747:17" pos:end="747:63">

                <expr_stmt pos:start="747:17" pos:end="747:63"><expr pos:start="747:17" pos:end="747:62"><call pos:start="747:17" pos:end="747:62"><name pos:start="747:17" pos:end="747:37">gen_helper_rsqrts_f32</name><argument_list pos:start="747:38" pos:end="747:62">(<argument pos:start="747:39" pos:end="747:41"><expr pos:start="747:39" pos:end="747:41"><name pos:start="747:39" pos:end="747:41">tmp</name></expr></argument>, <argument pos:start="747:44" pos:end="747:46"><expr pos:start="747:44" pos:end="747:46"><name pos:start="747:44" pos:end="747:46">tmp</name></expr></argument>, <argument pos:start="747:49" pos:end="747:52"><expr pos:start="747:49" pos:end="747:52"><name pos:start="747:49" pos:end="747:52">tmp2</name></expr></argument>, <argument pos:start="747:55" pos:end="747:61"><expr pos:start="747:55" pos:end="747:61"><name pos:start="747:55" pos:end="747:61">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="749:13" pos:end="749:18">break;</break>

        <default pos:start="751:9" pos:end="751:16">default:</default>

            <expr_stmt pos:start="753:13" pos:end="753:20"><expr pos:start="753:13" pos:end="753:19"><call pos:start="753:13" pos:end="753:19"><name pos:start="753:13" pos:end="753:17">abort</name><argument_list pos:start="753:18" pos:end="753:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <expr_stmt pos:start="757:9" pos:end="757:23"><expr pos:start="757:9" pos:end="757:22"><call pos:start="757:9" pos:end="757:22"><name pos:start="757:9" pos:end="757:16">dead_tmp</name><argument_list pos:start="757:17" pos:end="757:22">(<argument pos:start="757:18" pos:end="757:21"><expr pos:start="757:18" pos:end="757:21"><name pos:start="757:18" pos:end="757:21">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="761:9" pos:end="765:77">/* Save the result.  For elementwise operations we can put it

           straight into the destination register.  For pairwise operations

           we have to be careful to avoid clobbering the source operands.  */</comment>

        <if_stmt pos:start="767:9" pos:end="775:9"><if pos:start="767:9" pos:end="771:9">if <condition pos:start="767:12" pos:end="767:33">(<expr pos:start="767:13" pos:end="767:32"><name pos:start="767:13" pos:end="767:20">pairwise</name> <operator pos:start="767:22" pos:end="767:23">&amp;&amp;</operator> <name pos:start="767:25" pos:end="767:26">rd</name> <operator pos:start="767:28" pos:end="767:29">==</operator> <name pos:start="767:31" pos:end="767:32">rm</name></expr>)</condition> <block pos:start="767:35" pos:end="771:9">{<block_content pos:start="769:13" pos:end="769:42">

            <expr_stmt pos:start="769:13" pos:end="769:42"><expr pos:start="769:13" pos:end="769:41"><call pos:start="769:13" pos:end="769:41"><name pos:start="769:13" pos:end="769:30">neon_store_scratch</name><argument_list pos:start="769:31" pos:end="769:41">(<argument pos:start="769:32" pos:end="769:35"><expr pos:start="769:32" pos:end="769:35"><name pos:start="769:32" pos:end="769:35">pass</name></expr></argument>, <argument pos:start="769:38" pos:end="769:40"><expr pos:start="769:38" pos:end="769:40"><name pos:start="769:38" pos:end="769:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="771:11" pos:end="775:9">else <block pos:start="771:16" pos:end="775:9">{<block_content pos:start="773:13" pos:end="773:42">

            <expr_stmt pos:start="773:13" pos:end="773:42"><expr pos:start="773:13" pos:end="773:41"><call pos:start="773:13" pos:end="773:41"><name pos:start="773:13" pos:end="773:26">neon_store_reg</name><argument_list pos:start="773:27" pos:end="773:41">(<argument pos:start="773:28" pos:end="773:29"><expr pos:start="773:28" pos:end="773:29"><name pos:start="773:28" pos:end="773:29">rd</name></expr></argument>, <argument pos:start="773:32" pos:end="773:35"><expr pos:start="773:32" pos:end="773:35"><name pos:start="773:32" pos:end="773:35">pass</name></expr></argument>, <argument pos:start="773:38" pos:end="773:40"><expr pos:start="773:38" pos:end="773:40"><name pos:start="773:38" pos:end="773:40">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        </block_content>}</block></for> <comment type="block" pos:start="779:11" pos:end="779:24">/* for pass */</comment>

        <if_stmt pos:start="781:9" pos:end="791:9"><if pos:start="781:9" pos:end="791:9">if <condition pos:start="781:12" pos:end="781:33">(<expr pos:start="781:13" pos:end="781:32"><name pos:start="781:13" pos:end="781:20">pairwise</name> <operator pos:start="781:22" pos:end="781:23">&amp;&amp;</operator> <name pos:start="781:25" pos:end="781:26">rd</name> <operator pos:start="781:28" pos:end="781:29">==</operator> <name pos:start="781:31" pos:end="781:32">rm</name></expr>)</condition> <block pos:start="781:35" pos:end="791:9">{<block_content pos:start="783:13" pos:end="789:13">

            <for pos:start="783:13" pos:end="789:13">for <control pos:start="783:17" pos:end="783:54">(<init pos:start="783:18" pos:end="783:26"><expr pos:start="783:18" pos:end="783:25"><name pos:start="783:18" pos:end="783:21">pass</name> <operator pos:start="783:23" pos:end="783:23">=</operator> <literal type="number" pos:start="783:25" pos:end="783:25">0</literal></expr>;</init> <condition pos:start="783:28" pos:end="783:46"><expr pos:start="783:28" pos:end="783:45"><name pos:start="783:28" pos:end="783:31">pass</name> <operator pos:start="783:33" pos:end="783:33">&lt;</operator> <operator pos:start="783:35" pos:end="783:35">(</operator><ternary pos:start="783:36" pos:end="783:44"><condition pos:start="783:36" pos:end="783:38"><expr pos:start="783:36" pos:end="783:36"><name pos:start="783:36" pos:end="783:36">q</name></expr> ?</condition><then pos:start="783:40" pos:end="783:40"> <expr pos:start="783:40" pos:end="783:40"><literal type="number" pos:start="783:40" pos:end="783:40">4</literal></expr> </then><else pos:start="783:42" pos:end="783:44">: <expr pos:start="783:44" pos:end="783:44"><literal type="number" pos:start="783:44" pos:end="783:44">2</literal></expr></else></ternary><operator pos:start="783:45" pos:end="783:45">)</operator></expr>;</condition> <incr pos:start="783:48" pos:end="783:53"><expr pos:start="783:48" pos:end="783:53"><name pos:start="783:48" pos:end="783:51">pass</name><operator pos:start="783:52" pos:end="783:53">++</operator></expr></incr>)</control> <block pos:start="783:56" pos:end="789:13">{<block_content pos:start="785:17" pos:end="787:46">

                <expr_stmt pos:start="785:17" pos:end="785:46"><expr pos:start="785:17" pos:end="785:45"><name pos:start="785:17" pos:end="785:19">tmp</name> <operator pos:start="785:21" pos:end="785:21">=</operator> <call pos:start="785:23" pos:end="785:45"><name pos:start="785:23" pos:end="785:39">neon_load_scratch</name><argument_list pos:start="785:40" pos:end="785:45">(<argument pos:start="785:41" pos:end="785:44"><expr pos:start="785:41" pos:end="785:44"><name pos:start="785:41" pos:end="785:44">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="787:17" pos:end="787:46"><expr pos:start="787:17" pos:end="787:45"><call pos:start="787:17" pos:end="787:45"><name pos:start="787:17" pos:end="787:30">neon_store_reg</name><argument_list pos:start="787:31" pos:end="787:45">(<argument pos:start="787:32" pos:end="787:33"><expr pos:start="787:32" pos:end="787:33"><name pos:start="787:32" pos:end="787:33">rd</name></expr></argument>, <argument pos:start="787:36" pos:end="787:39"><expr pos:start="787:36" pos:end="787:39"><name pos:start="787:36" pos:end="787:39">pass</name></expr></argument>, <argument pos:start="787:42" pos:end="787:44"><expr pos:start="787:42" pos:end="787:44"><name pos:start="787:42" pos:end="787:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="793:9" pos:end="793:54">/* End of 3 register same size operations.  */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="795:7" pos:end="1573:5">else if <condition pos:start="795:15" pos:end="795:31">(<expr pos:start="795:16" pos:end="795:30"><name pos:start="795:16" pos:end="795:19">insn</name> <operator pos:start="795:21" pos:end="795:21">&amp;</operator> <operator pos:start="795:23" pos:end="795:23">(</operator><literal type="number" pos:start="795:24" pos:end="795:24">1</literal> <operator pos:start="795:26" pos:end="795:27">&lt;&lt;</operator> <literal type="number" pos:start="795:29" pos:end="795:29">4</literal><operator pos:start="795:30" pos:end="795:30">)</operator></expr>)</condition> <block pos:start="795:33" pos:end="1573:5">{<block_content pos:start="797:9" pos:end="1571:9">

        <if_stmt pos:start="797:9" pos:end="1571:9"><if pos:start="797:9" pos:end="1427:9">if <condition pos:start="797:12" pos:end="797:37">(<expr pos:start="797:13" pos:end="797:36"><operator pos:start="797:13" pos:end="797:13">(</operator><name pos:start="797:14" pos:end="797:17">insn</name> <operator pos:start="797:19" pos:end="797:19">&amp;</operator> <literal type="number" pos:start="797:21" pos:end="797:30">0x00380080</literal><operator pos:start="797:31" pos:end="797:31">)</operator> <operator pos:start="797:33" pos:end="797:34">!=</operator> <literal type="number" pos:start="797:36" pos:end="797:36">0</literal></expr>)</condition> <block pos:start="797:39" pos:end="1427:9">{<block_content pos:start="801:13" pos:end="1425:13">

            <comment type="block" pos:start="799:13" pos:end="799:43">/* Two registers and shift.  */</comment>

            <expr_stmt pos:start="801:13" pos:end="801:35"><expr pos:start="801:13" pos:end="801:34"><name pos:start="801:13" pos:end="801:14">op</name> <operator pos:start="801:16" pos:end="801:16">=</operator> <operator pos:start="801:18" pos:end="801:18">(</operator><name pos:start="801:19" pos:end="801:22">insn</name> <operator pos:start="801:24" pos:end="801:25">&gt;&gt;</operator> <literal type="number" pos:start="801:27" pos:end="801:27">8</literal><operator pos:start="801:28" pos:end="801:28">)</operator> <operator pos:start="801:30" pos:end="801:30">&amp;</operator> <literal type="number" pos:start="801:32" pos:end="801:34">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="803:13" pos:end="817:13"><if pos:start="803:13" pos:end="809:13">if <condition pos:start="803:16" pos:end="803:32">(<expr pos:start="803:17" pos:end="803:31"><name pos:start="803:17" pos:end="803:20">insn</name> <operator pos:start="803:22" pos:end="803:22">&amp;</operator> <operator pos:start="803:24" pos:end="803:24">(</operator><literal type="number" pos:start="803:25" pos:end="803:25">1</literal> <operator pos:start="803:27" pos:end="803:28">&lt;&lt;</operator> <literal type="number" pos:start="803:30" pos:end="803:30">7</literal><operator pos:start="803:31" pos:end="803:31">)</operator></expr>)</condition> <block pos:start="803:34" pos:end="809:13">{<block_content pos:start="807:17" pos:end="807:25">

                <comment type="block" pos:start="805:17" pos:end="805:37">/* 64-bit shift.   */</comment>

                <expr_stmt pos:start="807:17" pos:end="807:25"><expr pos:start="807:17" pos:end="807:24"><name pos:start="807:17" pos:end="807:20">size</name> <operator pos:start="807:22" pos:end="807:22">=</operator> <literal type="number" pos:start="807:24" pos:end="807:24">3</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="809:15" pos:end="817:13">else <block pos:start="809:20" pos:end="817:13">{<block_content pos:start="811:17" pos:end="815:27">

                <expr_stmt pos:start="811:17" pos:end="811:25"><expr pos:start="811:17" pos:end="811:24"><name pos:start="811:17" pos:end="811:20">size</name> <operator pos:start="811:22" pos:end="811:22">=</operator> <literal type="number" pos:start="811:24" pos:end="811:24">2</literal></expr>;</expr_stmt>

                <while pos:start="813:17" pos:end="815:27">while <condition pos:start="813:23" pos:end="813:56">(<expr pos:start="813:24" pos:end="813:55"><operator pos:start="813:24" pos:end="813:24">(</operator><name pos:start="813:25" pos:end="813:28">insn</name> <operator pos:start="813:30" pos:end="813:30">&amp;</operator> <operator pos:start="813:32" pos:end="813:32">(</operator><literal type="number" pos:start="813:33" pos:end="813:33">1</literal> <operator pos:start="813:35" pos:end="813:36">&lt;&lt;</operator> <operator pos:start="813:38" pos:end="813:38">(</operator><name pos:start="813:39" pos:end="813:42">size</name> <operator pos:start="813:44" pos:end="813:44">+</operator> <literal type="number" pos:start="813:46" pos:end="813:47">19</literal><operator pos:start="813:48" pos:end="813:48">)</operator><operator pos:start="813:49" pos:end="813:49">)</operator><operator pos:start="813:50" pos:end="813:50">)</operator> <operator pos:start="813:52" pos:end="813:53">==</operator> <literal type="number" pos:start="813:55" pos:end="813:55">0</literal></expr>)</condition><block type="pseudo" pos:start="815:21" pos:end="815:27"><block_content pos:start="815:21" pos:end="815:27">

                    <expr_stmt pos:start="815:21" pos:end="815:27"><expr pos:start="815:21" pos:end="815:26"><name pos:start="815:21" pos:end="815:24">size</name><operator pos:start="815:25" pos:end="815:26">--</operator></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="819:13" pos:end="819:59"><expr pos:start="819:13" pos:end="819:58"><name pos:start="819:13" pos:end="819:17">shift</name> <operator pos:start="819:19" pos:end="819:19">=</operator> <operator pos:start="819:21" pos:end="819:21">(</operator><name pos:start="819:22" pos:end="819:25">insn</name> <operator pos:start="819:27" pos:end="819:28">&gt;&gt;</operator> <literal type="number" pos:start="819:30" pos:end="819:31">16</literal><operator pos:start="819:32" pos:end="819:32">)</operator> <operator pos:start="819:34" pos:end="819:34">&amp;</operator> <operator pos:start="819:36" pos:end="819:36">(</operator><operator pos:start="819:37" pos:end="819:37">(</operator><literal type="number" pos:start="819:38" pos:end="819:38">1</literal> <operator pos:start="819:40" pos:end="819:41">&lt;&lt;</operator> <operator pos:start="819:43" pos:end="819:43">(</operator><literal type="number" pos:start="819:44" pos:end="819:46">3</literal> <operator pos:start="819:46" pos:end="819:46">+</operator> <name pos:start="819:48" pos:end="819:51">size</name><operator pos:start="819:52" pos:end="819:52">)</operator><operator pos:start="819:53" pos:end="819:53">)</operator> <operator pos:start="819:55" pos:end="819:55">-</operator> <literal type="number" pos:start="819:57" pos:end="819:57">1</literal><operator pos:start="819:58" pos:end="819:58">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="821:13" pos:end="823:68">/* To avoid excessive dumplication of ops we implement shift

               by immediate using the variable shift operations.  */</comment>

            <if_stmt pos:start="825:13" pos:end="1425:13"><if pos:start="825:13" pos:end="1191:13">if <condition pos:start="825:16" pos:end="825:23">(<expr pos:start="825:17" pos:end="825:22"><name pos:start="825:17" pos:end="825:18">op</name> <operator pos:start="825:20" pos:end="825:20">&lt;</operator> <literal type="number" pos:start="825:22" pos:end="825:22">8</literal></expr>)</condition> <block pos:start="825:25" pos:end="1191:13">{<block_content pos:start="835:17" pos:end="1189:17">

                <comment type="block" pos:start="827:17" pos:end="829:75">/* Shift by immediate:

                   VSHR, VSRA, VRSHR, VRSRA, VSRI, VSHL, VQSHL, VQSHLU.  */</comment>

                <comment type="block" pos:start="831:17" pos:end="833:44">/* Right shifts are encoded as N - shift, where N is the

                   element size in bits.  */</comment>

                <if_stmt pos:start="835:17" pos:end="837:54"><if pos:start="835:17" pos:end="837:54">if <condition pos:start="835:20" pos:end="835:28">(<expr pos:start="835:21" pos:end="835:27"><name pos:start="835:21" pos:end="835:22">op</name> <operator pos:start="835:24" pos:end="835:25">&lt;=</operator> <literal type="number" pos:start="835:27" pos:end="835:27">4</literal></expr>)</condition><block type="pseudo" pos:start="837:21" pos:end="837:54"><block_content pos:start="837:21" pos:end="837:54">

                    <expr_stmt pos:start="837:21" pos:end="837:54"><expr pos:start="837:21" pos:end="837:53"><name pos:start="837:21" pos:end="837:25">shift</name> <operator pos:start="837:27" pos:end="837:27">=</operator> <name pos:start="837:29" pos:end="837:33">shift</name> <operator pos:start="837:35" pos:end="837:35">-</operator> <operator pos:start="837:37" pos:end="837:37">(</operator><literal type="number" pos:start="837:38" pos:end="837:38">1</literal> <operator pos:start="837:40" pos:end="837:41">&lt;&lt;</operator> <operator pos:start="837:43" pos:end="837:43">(</operator><name pos:start="837:44" pos:end="837:47">size</name> <operator pos:start="837:49" pos:end="837:49">+</operator> <literal type="number" pos:start="837:51" pos:end="837:51">3</literal><operator pos:start="837:52" pos:end="837:52">)</operator><operator pos:start="837:53" pos:end="837:53">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="839:17" pos:end="847:17"><if pos:start="839:17" pos:end="843:17">if <condition pos:start="839:20" pos:end="839:30">(<expr pos:start="839:21" pos:end="839:29"><name pos:start="839:21" pos:end="839:24">size</name> <operator pos:start="839:26" pos:end="839:27">==</operator> <literal type="number" pos:start="839:29" pos:end="839:29">3</literal></expr>)</condition> <block pos:start="839:32" pos:end="843:17">{<block_content pos:start="841:21" pos:end="841:34">

                    <expr_stmt pos:start="841:21" pos:end="841:34"><expr pos:start="841:21" pos:end="841:33"><name pos:start="841:21" pos:end="841:25">count</name> <operator pos:start="841:27" pos:end="841:27">=</operator> <name pos:start="841:29" pos:end="841:29">q</name> <operator pos:start="841:31" pos:end="841:31">+</operator> <literal type="number" pos:start="841:33" pos:end="841:33">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="843:19" pos:end="847:17">else <block pos:start="843:24" pos:end="847:17">{<block_content pos:start="845:21" pos:end="845:37">

                    <expr_stmt pos:start="845:21" pos:end="845:37"><expr pos:start="845:21" pos:end="845:36"><name pos:start="845:21" pos:end="845:25">count</name> <operator pos:start="845:27" pos:end="845:27">=</operator> <ternary pos:start="845:29" pos:end="845:36"><condition pos:start="845:29" pos:end="845:31"><expr pos:start="845:29" pos:end="845:29"><name pos:start="845:29" pos:end="845:29">q</name></expr> ?</condition><then pos:start="845:33" pos:end="845:33"> <expr pos:start="845:33" pos:end="845:33"><literal type="number" pos:start="845:33" pos:end="845:33">4</literal></expr></then><else pos:start="845:34" pos:end="845:36">: <expr pos:start="845:36" pos:end="845:36"><literal type="number" pos:start="845:36" pos:end="845:36">2</literal></expr></else></ternary></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <switch pos:start="849:17" pos:end="881:17">switch <condition pos:start="849:24" pos:end="849:29">(<expr pos:start="849:25" pos:end="849:28"><name pos:start="849:25" pos:end="849:28">size</name></expr>)</condition> <block pos:start="849:31" pos:end="881:17">{<block_content pos:start="851:17" pos:end="879:28">

                <case pos:start="851:17" pos:end="851:23">case <expr pos:start="851:22" pos:end="851:22"><literal type="number" pos:start="851:22" pos:end="851:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="853:21" pos:end="853:42"><expr pos:start="853:21" pos:end="853:41"><name pos:start="853:21" pos:end="853:23">imm</name> <operator pos:start="853:25" pos:end="853:25">=</operator> <operator pos:start="853:27" pos:end="853:27">(</operator><name pos:start="853:28" pos:end="853:34">uint8_t</name><operator pos:start="853:35" pos:end="853:35">)</operator> <name pos:start="853:37" pos:end="853:41">shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="855:21" pos:end="855:36"><expr pos:start="855:21" pos:end="855:35"><name pos:start="855:21" pos:end="855:23">imm</name> <operator pos:start="855:25" pos:end="855:26">|=</operator> <name pos:start="855:28" pos:end="855:30">imm</name> <operator pos:start="855:32" pos:end="855:33">&lt;&lt;</operator> <literal type="number" pos:start="855:35" pos:end="855:35">8</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="857:21" pos:end="857:37"><expr pos:start="857:21" pos:end="857:36"><name pos:start="857:21" pos:end="857:23">imm</name> <operator pos:start="857:25" pos:end="857:26">|=</operator> <name pos:start="857:28" pos:end="857:30">imm</name> <operator pos:start="857:32" pos:end="857:33">&lt;&lt;</operator> <literal type="number" pos:start="857:35" pos:end="857:36">16</literal></expr>;</expr_stmt>

                    <break pos:start="859:21" pos:end="859:26">break;</break>

                <case pos:start="861:17" pos:end="861:23">case <expr pos:start="861:22" pos:end="861:22"><literal type="number" pos:start="861:22" pos:end="861:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="863:21" pos:end="863:43"><expr pos:start="863:21" pos:end="863:42"><name pos:start="863:21" pos:end="863:23">imm</name> <operator pos:start="863:25" pos:end="863:25">=</operator> <operator pos:start="863:27" pos:end="863:27">(</operator><name pos:start="863:28" pos:end="863:35">uint16_t</name><operator pos:start="863:36" pos:end="863:36">)</operator> <name pos:start="863:38" pos:end="863:42">shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="865:21" pos:end="865:37"><expr pos:start="865:21" pos:end="865:36"><name pos:start="865:21" pos:end="865:23">imm</name> <operator pos:start="865:25" pos:end="865:26">|=</operator> <name pos:start="865:28" pos:end="865:30">imm</name> <operator pos:start="865:32" pos:end="865:33">&lt;&lt;</operator> <literal type="number" pos:start="865:35" pos:end="865:36">16</literal></expr>;</expr_stmt>

                    <break pos:start="867:21" pos:end="867:26">break;</break>

                <case pos:start="869:17" pos:end="869:23">case <expr pos:start="869:22" pos:end="869:22"><literal type="number" pos:start="869:22" pos:end="869:22">2</literal></expr>:</case>

                <case pos:start="871:17" pos:end="871:23">case <expr pos:start="871:22" pos:end="871:22"><literal type="number" pos:start="871:22" pos:end="871:22">3</literal></expr>:</case>

                    <expr_stmt pos:start="873:21" pos:end="873:32"><expr pos:start="873:21" pos:end="873:31"><name pos:start="873:21" pos:end="873:23">imm</name> <operator pos:start="873:25" pos:end="873:25">=</operator> <name pos:start="873:27" pos:end="873:31">shift</name></expr>;</expr_stmt>

                    <break pos:start="875:21" pos:end="875:26">break;</break>

                <default pos:start="877:17" pos:end="877:24">default:</default>

                    <expr_stmt pos:start="879:21" pos:end="879:28"><expr pos:start="879:21" pos:end="879:27"><call pos:start="879:21" pos:end="879:27"><name pos:start="879:21" pos:end="879:25">abort</name><argument_list pos:start="879:26" pos:end="879:27">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>



                <for pos:start="885:17" pos:end="1189:17">for <control pos:start="885:21" pos:end="885:52">(<init pos:start="885:22" pos:end="885:30"><expr pos:start="885:22" pos:end="885:29"><name pos:start="885:22" pos:end="885:25">pass</name> <operator pos:start="885:27" pos:end="885:27">=</operator> <literal type="number" pos:start="885:29" pos:end="885:29">0</literal></expr>;</init> <condition pos:start="885:32" pos:end="885:44"><expr pos:start="885:32" pos:end="885:43"><name pos:start="885:32" pos:end="885:35">pass</name> <operator pos:start="885:37" pos:end="885:37">&lt;</operator> <name pos:start="885:39" pos:end="885:43">count</name></expr>;</condition> <incr pos:start="885:46" pos:end="885:51"><expr pos:start="885:46" pos:end="885:51"><name pos:start="885:46" pos:end="885:49">pass</name><operator pos:start="885:50" pos:end="885:51">++</operator></expr></incr>)</control> <block pos:start="885:54" pos:end="1189:17">{<block_content pos:start="887:21" pos:end="1187:21">

                    <if_stmt pos:start="887:21" pos:end="1187:21"><if pos:start="887:21" pos:end="993:21">if <condition pos:start="887:24" pos:end="887:34">(<expr pos:start="887:25" pos:end="887:33"><name pos:start="887:25" pos:end="887:28">size</name> <operator pos:start="887:30" pos:end="887:31">==</operator> <literal type="number" pos:start="887:33" pos:end="887:33">3</literal></expr>)</condition> <block pos:start="887:36" pos:end="993:21">{<block_content pos:start="889:25" pos:end="991:60">

                        <expr_stmt pos:start="889:25" pos:end="889:59"><expr pos:start="889:25" pos:end="889:58"><call pos:start="889:25" pos:end="889:58"><name pos:start="889:25" pos:end="889:39">neon_load_reg64</name><argument_list pos:start="889:40" pos:end="889:58">(<argument pos:start="889:41" pos:end="889:46"><expr pos:start="889:41" pos:end="889:46"><name pos:start="889:41" pos:end="889:46">cpu_V0</name></expr></argument>, <argument pos:start="889:49" pos:end="889:57"><expr pos:start="889:49" pos:end="889:57"><name pos:start="889:49" pos:end="889:50">rm</name> <operator pos:start="889:52" pos:end="889:52">+</operator> <name pos:start="889:54" pos:end="889:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="891:25" pos:end="891:54"><expr pos:start="891:25" pos:end="891:53"><call pos:start="891:25" pos:end="891:53"><name pos:start="891:25" pos:end="891:40">tcg_gen_movi_i64</name><argument_list pos:start="891:41" pos:end="891:53">(<argument pos:start="891:42" pos:end="891:47"><expr pos:start="891:42" pos:end="891:47"><name pos:start="891:42" pos:end="891:47">cpu_V1</name></expr></argument>, <argument pos:start="891:50" pos:end="891:52"><expr pos:start="891:50" pos:end="891:52"><name pos:start="891:50" pos:end="891:52">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="893:25" pos:end="973:25">switch <condition pos:start="893:32" pos:end="893:35">(<expr pos:start="893:33" pos:end="893:34"><name pos:start="893:33" pos:end="893:34">op</name></expr>)</condition> <block pos:start="893:37" pos:end="973:25">{<block_content pos:start="895:25" pos:end="971:34">

                        <case pos:start="895:25" pos:end="895:31">case <expr pos:start="895:30" pos:end="895:30"><literal type="number" pos:start="895:30" pos:end="895:30">0</literal></expr>:</case>  <comment type="block" pos:start="895:34" pos:end="895:43">/* VSHR */</comment>

                        <case pos:start="897:25" pos:end="897:31">case <expr pos:start="897:30" pos:end="897:30"><literal type="number" pos:start="897:30" pos:end="897:30">1</literal></expr>:</case>  <comment type="block" pos:start="897:34" pos:end="897:43">/* VSRA */</comment>

                            <if_stmt pos:start="899:29" pos:end="905:80"><if pos:start="899:29" pos:end="901:80">if <condition pos:start="899:32" pos:end="899:34">(<expr pos:start="899:33" pos:end="899:33"><name pos:start="899:33" pos:end="899:33">u</name></expr>)</condition><block type="pseudo" pos:start="901:33" pos:end="901:80"><block_content pos:start="901:33" pos:end="901:80">

                                <expr_stmt pos:start="901:33" pos:end="901:80"><expr pos:start="901:33" pos:end="901:79"><call pos:start="901:33" pos:end="901:79"><name pos:start="901:33" pos:end="901:55">gen_helper_neon_shl_u64</name><argument_list pos:start="901:56" pos:end="901:79">(<argument pos:start="901:57" pos:end="901:62"><expr pos:start="901:57" pos:end="901:62"><name pos:start="901:57" pos:end="901:62">cpu_V0</name></expr></argument>, <argument pos:start="901:65" pos:end="901:70"><expr pos:start="901:65" pos:end="901:70"><name pos:start="901:65" pos:end="901:70">cpu_V0</name></expr></argument>, <argument pos:start="901:73" pos:end="901:78"><expr pos:start="901:73" pos:end="901:78"><name pos:start="901:73" pos:end="901:78">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="903:29" pos:end="905:80">else<block type="pseudo" pos:start="905:33" pos:end="905:80"><block_content pos:start="905:33" pos:end="905:80">

                                <expr_stmt pos:start="905:33" pos:end="905:80"><expr pos:start="905:33" pos:end="905:79"><call pos:start="905:33" pos:end="905:79"><name pos:start="905:33" pos:end="905:55">gen_helper_neon_shl_s64</name><argument_list pos:start="905:56" pos:end="905:79">(<argument pos:start="905:57" pos:end="905:62"><expr pos:start="905:57" pos:end="905:62"><name pos:start="905:57" pos:end="905:62">cpu_V0</name></expr></argument>, <argument pos:start="905:65" pos:end="905:70"><expr pos:start="905:65" pos:end="905:70"><name pos:start="905:65" pos:end="905:70">cpu_V0</name></expr></argument>, <argument pos:start="905:73" pos:end="905:78"><expr pos:start="905:73" pos:end="905:78"><name pos:start="905:73" pos:end="905:78">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <break pos:start="907:29" pos:end="907:34">break;</break>

                        <case pos:start="909:25" pos:end="909:31">case <expr pos:start="909:30" pos:end="909:30"><literal type="number" pos:start="909:30" pos:end="909:30">2</literal></expr>:</case> <comment type="block" pos:start="909:33" pos:end="909:43">/* VRSHR */</comment>

                        <case pos:start="911:25" pos:end="911:31">case <expr pos:start="911:30" pos:end="911:30"><literal type="number" pos:start="911:30" pos:end="911:30">3</literal></expr>:</case> <comment type="block" pos:start="911:33" pos:end="911:43">/* VRSRA */</comment>

                            <if_stmt pos:start="913:29" pos:end="919:81"><if pos:start="913:29" pos:end="915:81">if <condition pos:start="913:32" pos:end="913:34">(<expr pos:start="913:33" pos:end="913:33"><name pos:start="913:33" pos:end="913:33">u</name></expr>)</condition><block type="pseudo" pos:start="915:33" pos:end="915:81"><block_content pos:start="915:33" pos:end="915:81">

                                <expr_stmt pos:start="915:33" pos:end="915:81"><expr pos:start="915:33" pos:end="915:80"><call pos:start="915:33" pos:end="915:80"><name pos:start="915:33" pos:end="915:56">gen_helper_neon_rshl_u64</name><argument_list pos:start="915:57" pos:end="915:80">(<argument pos:start="915:58" pos:end="915:63"><expr pos:start="915:58" pos:end="915:63"><name pos:start="915:58" pos:end="915:63">cpu_V0</name></expr></argument>, <argument pos:start="915:66" pos:end="915:71"><expr pos:start="915:66" pos:end="915:71"><name pos:start="915:66" pos:end="915:71">cpu_V0</name></expr></argument>, <argument pos:start="915:74" pos:end="915:79"><expr pos:start="915:74" pos:end="915:79"><name pos:start="915:74" pos:end="915:79">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                            <else pos:start="917:29" pos:end="919:81">else<block type="pseudo" pos:start="919:33" pos:end="919:81"><block_content pos:start="919:33" pos:end="919:81">

                                <expr_stmt pos:start="919:33" pos:end="919:81"><expr pos:start="919:33" pos:end="919:80"><call pos:start="919:33" pos:end="919:80"><name pos:start="919:33" pos:end="919:56">gen_helper_neon_rshl_s64</name><argument_list pos:start="919:57" pos:end="919:80">(<argument pos:start="919:58" pos:end="919:63"><expr pos:start="919:58" pos:end="919:63"><name pos:start="919:58" pos:end="919:63">cpu_V0</name></expr></argument>, <argument pos:start="919:66" pos:end="919:71"><expr pos:start="919:66" pos:end="919:71"><name pos:start="919:66" pos:end="919:71">cpu_V0</name></expr></argument>, <argument pos:start="919:74" pos:end="919:79"><expr pos:start="919:74" pos:end="919:79"><name pos:start="919:74" pos:end="919:79">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <break pos:start="921:29" pos:end="921:34">break;</break>

                        <case pos:start="923:25" pos:end="923:31">case <expr pos:start="923:30" pos:end="923:30"><literal type="number" pos:start="923:30" pos:end="923:30">4</literal></expr>:</case> <comment type="block" pos:start="923:33" pos:end="923:42">/* VSRI */</comment>

                            <if_stmt pos:start="925:29" pos:end="927:41"><if pos:start="925:29" pos:end="927:41">if <condition pos:start="925:32" pos:end="925:35">(<expr pos:start="925:33" pos:end="925:34"><operator pos:start="925:33" pos:end="925:33">!</operator><name pos:start="925:34" pos:end="925:34">u</name></expr>)</condition><block type="pseudo" pos:start="927:33" pos:end="927:41"><block_content pos:start="927:33" pos:end="927:41">

                                <return pos:start="927:33" pos:end="927:41">return <expr pos:start="927:40" pos:end="927:40"><literal type="number" pos:start="927:40" pos:end="927:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="929:29" pos:end="929:76"><expr pos:start="929:29" pos:end="929:75"><call pos:start="929:29" pos:end="929:75"><name pos:start="929:29" pos:end="929:51">gen_helper_neon_shl_u64</name><argument_list pos:start="929:52" pos:end="929:75">(<argument pos:start="929:53" pos:end="929:58"><expr pos:start="929:53" pos:end="929:58"><name pos:start="929:53" pos:end="929:58">cpu_V0</name></expr></argument>, <argument pos:start="929:61" pos:end="929:66"><expr pos:start="929:61" pos:end="929:66"><name pos:start="929:61" pos:end="929:66">cpu_V0</name></expr></argument>, <argument pos:start="929:69" pos:end="929:74"><expr pos:start="929:69" pos:end="929:74"><name pos:start="929:69" pos:end="929:74">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="931:29" pos:end="931:34">break;</break>

                        <case pos:start="933:25" pos:end="933:31">case <expr pos:start="933:30" pos:end="933:30"><literal type="number" pos:start="933:30" pos:end="933:30">5</literal></expr>:</case> <comment type="block" pos:start="933:33" pos:end="933:48">/* VSHL, VSLI */</comment>

                            <expr_stmt pos:start="935:29" pos:end="935:76"><expr pos:start="935:29" pos:end="935:75"><call pos:start="935:29" pos:end="935:75"><name pos:start="935:29" pos:end="935:51">gen_helper_neon_shl_u64</name><argument_list pos:start="935:52" pos:end="935:75">(<argument pos:start="935:53" pos:end="935:58"><expr pos:start="935:53" pos:end="935:58"><name pos:start="935:53" pos:end="935:58">cpu_V0</name></expr></argument>, <argument pos:start="935:61" pos:end="935:66"><expr pos:start="935:61" pos:end="935:66"><name pos:start="935:61" pos:end="935:66">cpu_V0</name></expr></argument>, <argument pos:start="935:69" pos:end="935:74"><expr pos:start="935:69" pos:end="935:74"><name pos:start="935:69" pos:end="935:74">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="937:29" pos:end="937:34">break;</break>

                        <case pos:start="939:25" pos:end="939:31">case <expr pos:start="939:30" pos:end="939:30"><literal type="number" pos:start="939:30" pos:end="939:30">6</literal></expr>:</case> <comment type="block" pos:start="939:33" pos:end="939:44">/* VQSHLU */</comment>

                            <if_stmt pos:start="941:29" pos:end="951:29"><if pos:start="941:29" pos:end="947:29">if <condition pos:start="941:32" pos:end="941:34">(<expr pos:start="941:33" pos:end="941:33"><name pos:start="941:33" pos:end="941:33">u</name></expr>)</condition> <block pos:start="941:36" pos:end="947:29">{<block_content pos:start="943:33" pos:end="945:74">

                                <expr_stmt pos:start="943:33" pos:end="945:74"><expr pos:start="943:33" pos:end="945:73"><call pos:start="943:33" pos:end="945:73"><name pos:start="943:33" pos:end="943:57">gen_helper_neon_qshlu_s64</name><argument_list pos:start="943:58" pos:end="945:73">(<argument pos:start="943:59" pos:end="943:64"><expr pos:start="943:59" pos:end="943:64"><name pos:start="943:59" pos:end="943:64">cpu_V0</name></expr></argument>, <argument pos:start="943:67" pos:end="943:73"><expr pos:start="943:67" pos:end="943:73"><name pos:start="943:67" pos:end="943:73">cpu_env</name></expr></argument>,

                                                          <argument pos:start="945:59" pos:end="945:64"><expr pos:start="945:59" pos:end="945:64"><name pos:start="945:59" pos:end="945:64">cpu_V0</name></expr></argument>, <argument pos:start="945:67" pos:end="945:72"><expr pos:start="945:67" pos:end="945:72"><name pos:start="945:67" pos:end="945:72">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="947:31" pos:end="951:29">else <block pos:start="947:36" pos:end="951:29">{<block_content pos:start="949:33" pos:end="949:41">

                                <return pos:start="949:33" pos:end="949:41">return <expr pos:start="949:40" pos:end="949:40"><literal type="number" pos:start="949:40" pos:end="949:40">1</literal></expr>;</return>

                            </block_content>}</block></else></if_stmt>

                            <break pos:start="953:29" pos:end="953:34">break;</break>

                        <case pos:start="955:25" pos:end="955:31">case <expr pos:start="955:30" pos:end="955:30"><literal type="number" pos:start="955:30" pos:end="955:30">7</literal></expr>:</case> <comment type="block" pos:start="955:33" pos:end="955:43">/* VQSHL */</comment>

                            <if_stmt pos:start="957:29" pos:end="969:29"><if pos:start="957:29" pos:end="963:29">if <condition pos:start="957:32" pos:end="957:34">(<expr pos:start="957:33" pos:end="957:33"><name pos:start="957:33" pos:end="957:33">u</name></expr>)</condition> <block pos:start="957:36" pos:end="963:29">{<block_content pos:start="959:33" pos:end="961:73">

                                <expr_stmt pos:start="959:33" pos:end="961:73"><expr pos:start="959:33" pos:end="961:72"><call pos:start="959:33" pos:end="961:72"><name pos:start="959:33" pos:end="959:56">gen_helper_neon_qshl_u64</name><argument_list pos:start="959:57" pos:end="961:72">(<argument pos:start="959:58" pos:end="959:63"><expr pos:start="959:58" pos:end="959:63"><name pos:start="959:58" pos:end="959:63">cpu_V0</name></expr></argument>, <argument pos:start="959:66" pos:end="959:72"><expr pos:start="959:66" pos:end="959:72"><name pos:start="959:66" pos:end="959:72">cpu_env</name></expr></argument>,

                                                         <argument pos:start="961:58" pos:end="961:63"><expr pos:start="961:58" pos:end="961:63"><name pos:start="961:58" pos:end="961:63">cpu_V0</name></expr></argument>, <argument pos:start="961:66" pos:end="961:71"><expr pos:start="961:66" pos:end="961:71"><name pos:start="961:66" pos:end="961:71">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="963:31" pos:end="969:29">else <block pos:start="963:36" pos:end="969:29">{<block_content pos:start="965:33" pos:end="967:73">

                                <expr_stmt pos:start="965:33" pos:end="967:73"><expr pos:start="965:33" pos:end="967:72"><call pos:start="965:33" pos:end="967:72"><name pos:start="965:33" pos:end="965:56">gen_helper_neon_qshl_s64</name><argument_list pos:start="965:57" pos:end="967:72">(<argument pos:start="965:58" pos:end="965:63"><expr pos:start="965:58" pos:end="965:63"><name pos:start="965:58" pos:end="965:63">cpu_V0</name></expr></argument>, <argument pos:start="965:66" pos:end="965:72"><expr pos:start="965:66" pos:end="965:72"><name pos:start="965:66" pos:end="965:72">cpu_env</name></expr></argument>,

                                                         <argument pos:start="967:58" pos:end="967:63"><expr pos:start="967:58" pos:end="967:63"><name pos:start="967:58" pos:end="967:63">cpu_V0</name></expr></argument>, <argument pos:start="967:66" pos:end="967:71"><expr pos:start="967:66" pos:end="967:71"><name pos:start="967:66" pos:end="967:71">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                            <break pos:start="971:29" pos:end="971:34">break;</break>

                        </block_content>}</block></switch>

                        <if_stmt pos:start="975:25" pos:end="989:25"><if pos:start="975:25" pos:end="983:25">if <condition pos:start="975:28" pos:end="975:47">(<expr pos:start="975:29" pos:end="975:46"><name pos:start="975:29" pos:end="975:30">op</name> <operator pos:start="975:32" pos:end="975:33">==</operator> <literal type="number" pos:start="975:35" pos:end="975:35">1</literal> <operator pos:start="975:37" pos:end="975:38">||</operator> <name pos:start="975:40" pos:end="975:41">op</name> <operator pos:start="975:43" pos:end="975:44">==</operator> <literal type="number" pos:start="975:46" pos:end="975:46">3</literal></expr>)</condition> <block pos:start="975:49" pos:end="983:25">{<block_content pos:start="979:29" pos:end="981:68">

                            <comment type="block" pos:start="977:29" pos:end="977:46">/* Accumulate.  */</comment>

                            <expr_stmt pos:start="979:29" pos:end="979:63"><expr pos:start="979:29" pos:end="979:62"><call pos:start="979:29" pos:end="979:62"><name pos:start="979:29" pos:end="979:43">neon_load_reg64</name><argument_list pos:start="979:44" pos:end="979:62">(<argument pos:start="979:45" pos:end="979:50"><expr pos:start="979:45" pos:end="979:50"><name pos:start="979:45" pos:end="979:50">cpu_V1</name></expr></argument>, <argument pos:start="979:53" pos:end="979:61"><expr pos:start="979:53" pos:end="979:61"><name pos:start="979:53" pos:end="979:54">rd</name> <operator pos:start="979:56" pos:end="979:56">+</operator> <name pos:start="979:58" pos:end="979:61">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="981:29" pos:end="981:68"><expr pos:start="981:29" pos:end="981:67"><call pos:start="981:29" pos:end="981:67"><name pos:start="981:29" pos:end="981:43">tcg_gen_add_i64</name><argument_list pos:start="981:44" pos:end="981:67">(<argument pos:start="981:45" pos:end="981:50"><expr pos:start="981:45" pos:end="981:50"><name pos:start="981:45" pos:end="981:50">cpu_V0</name></expr></argument>, <argument pos:start="981:53" pos:end="981:58"><expr pos:start="981:53" pos:end="981:58"><name pos:start="981:53" pos:end="981:58">cpu_V0</name></expr></argument>, <argument pos:start="981:61" pos:end="981:66"><expr pos:start="981:61" pos:end="981:66"><name pos:start="981:61" pos:end="981:66">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="983:27" pos:end="989:25">else if <condition pos:start="983:35" pos:end="983:61">(<expr pos:start="983:36" pos:end="983:60"><name pos:start="983:36" pos:end="983:37">op</name> <operator pos:start="983:39" pos:end="983:40">==</operator> <literal type="number" pos:start="983:42" pos:end="983:42">4</literal> <operator pos:start="983:44" pos:end="983:45">||</operator> <operator pos:start="983:47" pos:end="983:47">(</operator><name pos:start="983:48" pos:end="983:49">op</name> <operator pos:start="983:51" pos:end="983:52">==</operator> <literal type="number" pos:start="983:54" pos:end="983:54">5</literal> <operator pos:start="983:56" pos:end="983:57">&amp;&amp;</operator> <name pos:start="983:59" pos:end="983:59">u</name><operator pos:start="983:60" pos:end="983:60">)</operator></expr>)</condition> <block pos:start="983:63" pos:end="989:25">{<block_content pos:start="987:29" pos:end="987:73">

                            <comment type="block" pos:start="985:29" pos:end="985:40">/* Insert */</comment>

                            <expr_stmt pos:start="987:29" pos:end="987:73"><expr pos:start="987:29" pos:end="987:72"><call pos:start="987:29" pos:end="987:72"><name pos:start="987:29" pos:end="987:37">cpu_abort</name><argument_list pos:start="987:38" pos:end="987:72">(<argument pos:start="987:39" pos:end="987:41"><expr pos:start="987:39" pos:end="987:41"><name pos:start="987:39" pos:end="987:41">env</name></expr></argument>, <argument pos:start="987:44" pos:end="987:71"><expr pos:start="987:44" pos:end="987:71"><literal type="string" pos:start="987:44" pos:end="987:71">"VS[LR]I.64 not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="991:25" pos:end="991:60"><expr pos:start="991:25" pos:end="991:59"><call pos:start="991:25" pos:end="991:59"><name pos:start="991:25" pos:end="991:40">neon_store_reg64</name><argument_list pos:start="991:41" pos:end="991:59">(<argument pos:start="991:42" pos:end="991:47"><expr pos:start="991:42" pos:end="991:47"><name pos:start="991:42" pos:end="991:47">cpu_V0</name></expr></argument>, <argument pos:start="991:50" pos:end="991:58"><expr pos:start="991:50" pos:end="991:58"><name pos:start="991:50" pos:end="991:51">rd</name> <operator pos:start="991:53" pos:end="991:53">+</operator> <name pos:start="991:55" pos:end="991:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="993:23" pos:end="1187:21">else <block pos:start="993:28" pos:end="1187:21">{<block_content pos:start="997:25" pos:end="1185:54"> <comment type="block" pos:start="993:30" pos:end="993:43">/* size &lt; 3 */</comment>

                        <comment type="block" pos:start="995:25" pos:end="995:53">/* Operands in T0 and T1.  */</comment>

                        <expr_stmt pos:start="997:25" pos:end="997:54"><expr pos:start="997:25" pos:end="997:53"><name pos:start="997:25" pos:end="997:27">tmp</name> <operator pos:start="997:29" pos:end="997:29">=</operator> <call pos:start="997:31" pos:end="997:53"><name pos:start="997:31" pos:end="997:43">neon_load_reg</name><argument_list pos:start="997:44" pos:end="997:53">(<argument pos:start="997:45" pos:end="997:46"><expr pos:start="997:45" pos:end="997:46"><name pos:start="997:45" pos:end="997:46">rm</name></expr></argument>, <argument pos:start="997:49" pos:end="997:52"><expr pos:start="997:49" pos:end="997:52"><name pos:start="997:49" pos:end="997:52">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="999:25" pos:end="999:41"><expr pos:start="999:25" pos:end="999:40"><name pos:start="999:25" pos:end="999:28">tmp2</name> <operator pos:start="999:30" pos:end="999:30">=</operator> <call pos:start="999:32" pos:end="999:40"><name pos:start="999:32" pos:end="999:38">new_tmp</name><argument_list pos:start="999:39" pos:end="999:40">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1001:25" pos:end="1001:52"><expr pos:start="1001:25" pos:end="1001:51"><call pos:start="1001:25" pos:end="1001:51"><name pos:start="1001:25" pos:end="1001:40">tcg_gen_movi_i32</name><argument_list pos:start="1001:41" pos:end="1001:51">(<argument pos:start="1001:42" pos:end="1001:45"><expr pos:start="1001:42" pos:end="1001:45"><name pos:start="1001:42" pos:end="1001:45">tmp2</name></expr></argument>, <argument pos:start="1001:48" pos:end="1001:50"><expr pos:start="1001:48" pos:end="1001:50"><name pos:start="1001:48" pos:end="1001:50">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="1003:25" pos:end="1095:25">switch <condition pos:start="1003:32" pos:end="1003:35">(<expr pos:start="1003:33" pos:end="1003:34"><name pos:start="1003:33" pos:end="1003:34">op</name></expr>)</condition> <block pos:start="1003:37" pos:end="1095:25">{<block_content pos:start="1005:25" pos:end="1093:34">

                        <case pos:start="1005:25" pos:end="1005:31">case <expr pos:start="1005:30" pos:end="1005:30"><literal type="number" pos:start="1005:30" pos:end="1005:30">0</literal></expr>:</case>  <comment type="block" pos:start="1005:34" pos:end="1005:43">/* VSHR */</comment>

                        <case pos:start="1007:25" pos:end="1007:31">case <expr pos:start="1007:30" pos:end="1007:30"><literal type="number" pos:start="1007:30" pos:end="1007:30">1</literal></expr>:</case>  <comment type="block" pos:start="1007:34" pos:end="1007:43">/* VSRA */</comment>

                            <expr_stmt pos:start="1009:29" pos:end="1009:53"><expr pos:start="1009:29" pos:end="1009:52"><call pos:start="1009:29" pos:end="1009:52"><name pos:start="1009:29" pos:end="1009:47">GEN_NEON_INTEGER_OP</name><argument_list pos:start="1009:48" pos:end="1009:52">(<argument pos:start="1009:49" pos:end="1009:51"><expr pos:start="1009:49" pos:end="1009:51"><name pos:start="1009:49" pos:end="1009:51">shl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1011:29" pos:end="1011:34">break;</break>

                        <case pos:start="1013:25" pos:end="1013:31">case <expr pos:start="1013:30" pos:end="1013:30"><literal type="number" pos:start="1013:30" pos:end="1013:30">2</literal></expr>:</case> <comment type="block" pos:start="1013:33" pos:end="1013:43">/* VRSHR */</comment>

                        <case pos:start="1015:25" pos:end="1015:31">case <expr pos:start="1015:30" pos:end="1015:30"><literal type="number" pos:start="1015:30" pos:end="1015:30">3</literal></expr>:</case> <comment type="block" pos:start="1015:33" pos:end="1015:43">/* VRSRA */</comment>

                            <expr_stmt pos:start="1017:29" pos:end="1017:54"><expr pos:start="1017:29" pos:end="1017:53"><call pos:start="1017:29" pos:end="1017:53"><name pos:start="1017:29" pos:end="1017:47">GEN_NEON_INTEGER_OP</name><argument_list pos:start="1017:48" pos:end="1017:53">(<argument pos:start="1017:49" pos:end="1017:52"><expr pos:start="1017:49" pos:end="1017:52"><name pos:start="1017:49" pos:end="1017:52">rshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1019:29" pos:end="1019:34">break;</break>

                        <case pos:start="1021:25" pos:end="1021:31">case <expr pos:start="1021:30" pos:end="1021:30"><literal type="number" pos:start="1021:30" pos:end="1021:30">4</literal></expr>:</case> <comment type="block" pos:start="1021:33" pos:end="1021:42">/* VSRI */</comment>

                            <if_stmt pos:start="1023:29" pos:end="1025:41"><if pos:start="1023:29" pos:end="1025:41">if <condition pos:start="1023:32" pos:end="1023:35">(<expr pos:start="1023:33" pos:end="1023:34"><operator pos:start="1023:33" pos:end="1023:33">!</operator><name pos:start="1023:34" pos:end="1023:34">u</name></expr>)</condition><block type="pseudo" pos:start="1025:33" pos:end="1025:41"><block_content pos:start="1025:33" pos:end="1025:41">

                                <return pos:start="1025:33" pos:end="1025:41">return <expr pos:start="1025:40" pos:end="1025:40"><literal type="number" pos:start="1025:40" pos:end="1025:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="1027:29" pos:end="1027:53"><expr pos:start="1027:29" pos:end="1027:52"><call pos:start="1027:29" pos:end="1027:52"><name pos:start="1027:29" pos:end="1027:47">GEN_NEON_INTEGER_OP</name><argument_list pos:start="1027:48" pos:end="1027:52">(<argument pos:start="1027:49" pos:end="1027:51"><expr pos:start="1027:49" pos:end="1027:51"><name pos:start="1027:49" pos:end="1027:51">shl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1029:29" pos:end="1029:34">break;</break>

                        <case pos:start="1031:25" pos:end="1031:31">case <expr pos:start="1031:30" pos:end="1031:30"><literal type="number" pos:start="1031:30" pos:end="1031:30">5</literal></expr>:</case> <comment type="block" pos:start="1031:33" pos:end="1031:48">/* VSHL, VSLI */</comment>

                            <switch pos:start="1033:29" pos:end="1043:29">switch <condition pos:start="1033:36" pos:end="1033:41">(<expr pos:start="1033:37" pos:end="1033:40"><name pos:start="1033:37" pos:end="1033:40">size</name></expr>)</condition> <block pos:start="1033:43" pos:end="1043:29">{<block_content pos:start="1035:29" pos:end="1041:46">

                            <case pos:start="1035:29" pos:end="1035:35">case <expr pos:start="1035:34" pos:end="1035:34"><literal type="number" pos:start="1035:34" pos:end="1035:34">0</literal></expr>:</case> <expr_stmt pos:start="1035:37" pos:end="1035:75"><expr pos:start="1035:37" pos:end="1035:74"><call pos:start="1035:37" pos:end="1035:74"><name pos:start="1035:37" pos:end="1035:58">gen_helper_neon_shl_u8</name><argument_list pos:start="1035:59" pos:end="1035:74">(<argument pos:start="1035:60" pos:end="1035:62"><expr pos:start="1035:60" pos:end="1035:62"><name pos:start="1035:60" pos:end="1035:62">tmp</name></expr></argument>, <argument pos:start="1035:65" pos:end="1035:67"><expr pos:start="1035:65" pos:end="1035:67"><name pos:start="1035:65" pos:end="1035:67">tmp</name></expr></argument>, <argument pos:start="1035:70" pos:end="1035:73"><expr pos:start="1035:70" pos:end="1035:73"><name pos:start="1035:70" pos:end="1035:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1035:77" pos:end="1035:82">break;</break>

                            <case pos:start="1037:29" pos:end="1037:35">case <expr pos:start="1037:34" pos:end="1037:34"><literal type="number" pos:start="1037:34" pos:end="1037:34">1</literal></expr>:</case> <expr_stmt pos:start="1037:37" pos:end="1037:76"><expr pos:start="1037:37" pos:end="1037:75"><call pos:start="1037:37" pos:end="1037:75"><name pos:start="1037:37" pos:end="1037:59">gen_helper_neon_shl_u16</name><argument_list pos:start="1037:60" pos:end="1037:75">(<argument pos:start="1037:61" pos:end="1037:63"><expr pos:start="1037:61" pos:end="1037:63"><name pos:start="1037:61" pos:end="1037:63">tmp</name></expr></argument>, <argument pos:start="1037:66" pos:end="1037:68"><expr pos:start="1037:66" pos:end="1037:68"><name pos:start="1037:66" pos:end="1037:68">tmp</name></expr></argument>, <argument pos:start="1037:71" pos:end="1037:74"><expr pos:start="1037:71" pos:end="1037:74"><name pos:start="1037:71" pos:end="1037:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1037:78" pos:end="1037:83">break;</break>

                            <case pos:start="1039:29" pos:end="1039:35">case <expr pos:start="1039:34" pos:end="1039:34"><literal type="number" pos:start="1039:34" pos:end="1039:34">2</literal></expr>:</case> <expr_stmt pos:start="1039:37" pos:end="1039:76"><expr pos:start="1039:37" pos:end="1039:75"><call pos:start="1039:37" pos:end="1039:75"><name pos:start="1039:37" pos:end="1039:59">gen_helper_neon_shl_u32</name><argument_list pos:start="1039:60" pos:end="1039:75">(<argument pos:start="1039:61" pos:end="1039:63"><expr pos:start="1039:61" pos:end="1039:63"><name pos:start="1039:61" pos:end="1039:63">tmp</name></expr></argument>, <argument pos:start="1039:66" pos:end="1039:68"><expr pos:start="1039:66" pos:end="1039:68"><name pos:start="1039:66" pos:end="1039:68">tmp</name></expr></argument>, <argument pos:start="1039:71" pos:end="1039:74"><expr pos:start="1039:71" pos:end="1039:74"><name pos:start="1039:71" pos:end="1039:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="1039:78" pos:end="1039:83">break;</break>

                            <default pos:start="1041:29" pos:end="1041:36">default:</default> <return pos:start="1041:38" pos:end="1041:46">return <expr pos:start="1041:45" pos:end="1041:45"><literal type="number" pos:start="1041:45" pos:end="1041:45">1</literal></expr>;</return>

                            </block_content>}</block></switch>

                            <break pos:start="1045:29" pos:end="1045:34">break;</break>

                        <case pos:start="1047:25" pos:end="1047:31">case <expr pos:start="1047:30" pos:end="1047:30"><literal type="number" pos:start="1047:30" pos:end="1047:30">6</literal></expr>:</case> <comment type="block" pos:start="1047:33" pos:end="1047:44">/* VQSHLU */</comment>

                            <if_stmt pos:start="1049:29" pos:end="1053:29"><if pos:start="1049:29" pos:end="1053:29">if <condition pos:start="1049:32" pos:end="1049:35">(<expr pos:start="1049:33" pos:end="1049:34"><operator pos:start="1049:33" pos:end="1049:33">!</operator><name pos:start="1049:34" pos:end="1049:34">u</name></expr>)</condition> <block pos:start="1049:37" pos:end="1053:29">{<block_content pos:start="1051:33" pos:end="1051:41">

                                <return pos:start="1051:33" pos:end="1051:41">return <expr pos:start="1051:40" pos:end="1051:40"><literal type="number" pos:start="1051:40" pos:end="1051:40">1</literal></expr>;</return>

                            </block_content>}</block></if></if_stmt>

                            <switch pos:start="1055:29" pos:end="1085:29">switch <condition pos:start="1055:36" pos:end="1055:41">(<expr pos:start="1055:37" pos:end="1055:40"><name pos:start="1055:37" pos:end="1055:40">size</name></expr>)</condition> <block pos:start="1055:43" pos:end="1085:29">{<block_content pos:start="1057:29" pos:end="1083:41">

                            <case pos:start="1057:29" pos:end="1057:35">case <expr pos:start="1057:34" pos:end="1057:34"><literal type="number" pos:start="1057:34" pos:end="1057:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="1059:33" pos:end="1061:68"><expr pos:start="1059:33" pos:end="1061:67"><call pos:start="1059:33" pos:end="1061:67"><name pos:start="1059:33" pos:end="1059:56">gen_helper_neon_qshlu_s8</name><argument_list pos:start="1059:57" pos:end="1061:67">(<argument pos:start="1059:58" pos:end="1059:60"><expr pos:start="1059:58" pos:end="1059:60"><name pos:start="1059:58" pos:end="1059:60">tmp</name></expr></argument>, <argument pos:start="1059:63" pos:end="1059:69"><expr pos:start="1059:63" pos:end="1059:69"><name pos:start="1059:63" pos:end="1059:69">cpu_env</name></expr></argument>,

                                                         <argument pos:start="1061:58" pos:end="1061:60"><expr pos:start="1061:58" pos:end="1061:60"><name pos:start="1061:58" pos:end="1061:60">tmp</name></expr></argument>, <argument pos:start="1061:63" pos:end="1061:66"><expr pos:start="1061:63" pos:end="1061:66"><name pos:start="1061:63" pos:end="1061:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1063:33" pos:end="1063:38">break;</break>

                            <case pos:start="1065:29" pos:end="1065:35">case <expr pos:start="1065:34" pos:end="1065:34"><literal type="number" pos:start="1065:34" pos:end="1065:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="1067:33" pos:end="1069:69"><expr pos:start="1067:33" pos:end="1069:68"><call pos:start="1067:33" pos:end="1069:68"><name pos:start="1067:33" pos:end="1067:57">gen_helper_neon_qshlu_s16</name><argument_list pos:start="1067:58" pos:end="1069:68">(<argument pos:start="1067:59" pos:end="1067:61"><expr pos:start="1067:59" pos:end="1067:61"><name pos:start="1067:59" pos:end="1067:61">tmp</name></expr></argument>, <argument pos:start="1067:64" pos:end="1067:70"><expr pos:start="1067:64" pos:end="1067:70"><name pos:start="1067:64" pos:end="1067:70">cpu_env</name></expr></argument>,

                                                          <argument pos:start="1069:59" pos:end="1069:61"><expr pos:start="1069:59" pos:end="1069:61"><name pos:start="1069:59" pos:end="1069:61">tmp</name></expr></argument>, <argument pos:start="1069:64" pos:end="1069:67"><expr pos:start="1069:64" pos:end="1069:67"><name pos:start="1069:64" pos:end="1069:67">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1071:33" pos:end="1071:38">break;</break>

                            <case pos:start="1073:29" pos:end="1073:35">case <expr pos:start="1073:34" pos:end="1073:34"><literal type="number" pos:start="1073:34" pos:end="1073:34">2</literal></expr>:</case>

                                <expr_stmt pos:start="1075:33" pos:end="1077:69"><expr pos:start="1075:33" pos:end="1077:68"><call pos:start="1075:33" pos:end="1077:68"><name pos:start="1075:33" pos:end="1075:57">gen_helper_neon_qshlu_s32</name><argument_list pos:start="1075:58" pos:end="1077:68">(<argument pos:start="1075:59" pos:end="1075:61"><expr pos:start="1075:59" pos:end="1075:61"><name pos:start="1075:59" pos:end="1075:61">tmp</name></expr></argument>, <argument pos:start="1075:64" pos:end="1075:70"><expr pos:start="1075:64" pos:end="1075:70"><name pos:start="1075:64" pos:end="1075:70">cpu_env</name></expr></argument>,

                                                          <argument pos:start="1077:59" pos:end="1077:61"><expr pos:start="1077:59" pos:end="1077:61"><name pos:start="1077:59" pos:end="1077:61">tmp</name></expr></argument>, <argument pos:start="1077:64" pos:end="1077:67"><expr pos:start="1077:64" pos:end="1077:67"><name pos:start="1077:64" pos:end="1077:67">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1079:33" pos:end="1079:38">break;</break>

                            <default pos:start="1081:29" pos:end="1081:36">default:</default>

                                <return pos:start="1083:33" pos:end="1083:41">return <expr pos:start="1083:40" pos:end="1083:40"><literal type="number" pos:start="1083:40" pos:end="1083:40">1</literal></expr>;</return>

                            </block_content>}</block></switch>

                            <break pos:start="1087:29" pos:end="1087:34">break;</break>

                        <case pos:start="1089:25" pos:end="1089:31">case <expr pos:start="1089:30" pos:end="1089:30"><literal type="number" pos:start="1089:30" pos:end="1089:30">7</literal></expr>:</case> <comment type="block" pos:start="1089:33" pos:end="1089:43">/* VQSHL */</comment>

                            <expr_stmt pos:start="1091:29" pos:end="1091:58"><expr pos:start="1091:29" pos:end="1091:57"><call pos:start="1091:29" pos:end="1091:57"><name pos:start="1091:29" pos:end="1091:51">GEN_NEON_INTEGER_OP_ENV</name><argument_list pos:start="1091:52" pos:end="1091:57">(<argument pos:start="1091:53" pos:end="1091:56"><expr pos:start="1091:53" pos:end="1091:56"><name pos:start="1091:53" pos:end="1091:56">qshl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1093:29" pos:end="1093:34">break;</break>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="1097:25" pos:end="1097:39"><expr pos:start="1097:25" pos:end="1097:38"><call pos:start="1097:25" pos:end="1097:38"><name pos:start="1097:25" pos:end="1097:32">dead_tmp</name><argument_list pos:start="1097:33" pos:end="1097:38">(<argument pos:start="1097:34" pos:end="1097:37"><expr pos:start="1097:34" pos:end="1097:37"><name pos:start="1097:34" pos:end="1097:37">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <if_stmt pos:start="1101:25" pos:end="1183:25"><if pos:start="1101:25" pos:end="1111:25">if <condition pos:start="1101:28" pos:end="1101:47">(<expr pos:start="1101:29" pos:end="1101:46"><name pos:start="1101:29" pos:end="1101:30">op</name> <operator pos:start="1101:32" pos:end="1101:33">==</operator> <literal type="number" pos:start="1101:35" pos:end="1101:35">1</literal> <operator pos:start="1101:37" pos:end="1101:38">||</operator> <name pos:start="1101:40" pos:end="1101:41">op</name> <operator pos:start="1101:43" pos:end="1101:44">==</operator> <literal type="number" pos:start="1101:46" pos:end="1101:46">3</literal></expr>)</condition> <block pos:start="1101:49" pos:end="1111:25">{<block_content pos:start="1105:29" pos:end="1109:43">

                            <comment type="block" pos:start="1103:29" pos:end="1103:46">/* Accumulate.  */</comment>

                            <expr_stmt pos:start="1105:29" pos:end="1105:59"><expr pos:start="1105:29" pos:end="1105:58"><name pos:start="1105:29" pos:end="1105:32">tmp2</name> <operator pos:start="1105:34" pos:end="1105:34">=</operator> <call pos:start="1105:36" pos:end="1105:58"><name pos:start="1105:36" pos:end="1105:48">neon_load_reg</name><argument_list pos:start="1105:49" pos:end="1105:58">(<argument pos:start="1105:50" pos:end="1105:51"><expr pos:start="1105:50" pos:end="1105:51"><name pos:start="1105:50" pos:end="1105:51">rd</name></expr></argument>, <argument pos:start="1105:54" pos:end="1105:57"><expr pos:start="1105:54" pos:end="1105:57"><name pos:start="1105:54" pos:end="1105:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1107:29" pos:end="1107:58"><expr pos:start="1107:29" pos:end="1107:57"><call pos:start="1107:29" pos:end="1107:57"><name pos:start="1107:29" pos:end="1107:40">gen_neon_add</name><argument_list pos:start="1107:41" pos:end="1107:57">(<argument pos:start="1107:42" pos:end="1107:45"><expr pos:start="1107:42" pos:end="1107:45"><name pos:start="1107:42" pos:end="1107:45">size</name></expr></argument>, <argument pos:start="1107:48" pos:end="1107:50"><expr pos:start="1107:48" pos:end="1107:50"><name pos:start="1107:48" pos:end="1107:50">tmp</name></expr></argument>, <argument pos:start="1107:53" pos:end="1107:56"><expr pos:start="1107:53" pos:end="1107:56"><name pos:start="1107:53" pos:end="1107:56">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1109:29" pos:end="1109:43"><expr pos:start="1109:29" pos:end="1109:42"><call pos:start="1109:29" pos:end="1109:42"><name pos:start="1109:29" pos:end="1109:36">dead_tmp</name><argument_list pos:start="1109:37" pos:end="1109:42">(<argument pos:start="1109:38" pos:end="1109:41"><expr pos:start="1109:38" pos:end="1109:41"><name pos:start="1109:38" pos:end="1109:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="1111:27" pos:end="1183:25">else if <condition pos:start="1111:35" pos:end="1111:61">(<expr pos:start="1111:36" pos:end="1111:60"><name pos:start="1111:36" pos:end="1111:37">op</name> <operator pos:start="1111:39" pos:end="1111:40">==</operator> <literal type="number" pos:start="1111:42" pos:end="1111:42">4</literal> <operator pos:start="1111:44" pos:end="1111:45">||</operator> <operator pos:start="1111:47" pos:end="1111:47">(</operator><name pos:start="1111:48" pos:end="1111:49">op</name> <operator pos:start="1111:51" pos:end="1111:52">==</operator> <literal type="number" pos:start="1111:54" pos:end="1111:54">5</literal> <operator pos:start="1111:56" pos:end="1111:57">&amp;&amp;</operator> <name pos:start="1111:59" pos:end="1111:59">u</name><operator pos:start="1111:60" pos:end="1111:60">)</operator></expr>)</condition> <block pos:start="1111:63" pos:end="1183:25">{<block_content pos:start="1115:29" pos:end="1181:43">

                            <comment type="block" pos:start="1113:29" pos:end="1113:40">/* Insert */</comment>

                            <switch pos:start="1115:29" pos:end="1171:29">switch <condition pos:start="1115:36" pos:end="1115:41">(<expr pos:start="1115:37" pos:end="1115:40"><name pos:start="1115:37" pos:end="1115:40">size</name></expr>)</condition> <block pos:start="1115:43" pos:end="1171:29">{<block_content pos:start="1117:29" pos:end="1169:40">

                            <case pos:start="1117:29" pos:end="1117:35">case <expr pos:start="1117:34" pos:end="1117:34"><literal type="number" pos:start="1117:34" pos:end="1117:34">0</literal></expr>:</case>

                                <if_stmt pos:start="1119:33" pos:end="1125:68"><if pos:start="1119:33" pos:end="1121:58">if <condition pos:start="1119:36" pos:end="1119:44">(<expr pos:start="1119:37" pos:end="1119:43"><name pos:start="1119:37" pos:end="1119:38">op</name> <operator pos:start="1119:40" pos:end="1119:41">==</operator> <literal type="number" pos:start="1119:43" pos:end="1119:43">4</literal></expr>)</condition><block type="pseudo" pos:start="1121:37" pos:end="1121:58"><block_content pos:start="1121:37" pos:end="1121:58">

                                    <expr_stmt pos:start="1121:37" pos:end="1121:58"><expr pos:start="1121:37" pos:end="1121:57"><name pos:start="1121:37" pos:end="1121:40">mask</name> <operator pos:start="1121:42" pos:end="1121:42">=</operator> <literal type="number" pos:start="1121:44" pos:end="1121:47">0xff</literal> <operator pos:start="1121:49" pos:end="1121:50">&gt;&gt;</operator> <operator pos:start="1121:52" pos:end="1121:52">-</operator><name pos:start="1121:53" pos:end="1121:57">shift</name></expr>;</expr_stmt></block_content></block></if>

                                <else pos:start="1123:33" pos:end="1125:68">else<block type="pseudo" pos:start="1125:37" pos:end="1125:68"><block_content pos:start="1125:37" pos:end="1125:68">

                                    <expr_stmt pos:start="1125:37" pos:end="1125:68"><expr pos:start="1125:37" pos:end="1125:67"><name pos:start="1125:37" pos:end="1125:40">mask</name> <operator pos:start="1125:42" pos:end="1125:42">=</operator> <operator pos:start="1125:44" pos:end="1125:44">(</operator><name pos:start="1125:45" pos:end="1125:51">uint8_t</name><operator pos:start="1125:52" pos:end="1125:52">)</operator><operator pos:start="1125:53" pos:end="1125:53">(</operator><literal type="number" pos:start="1125:54" pos:end="1125:57">0xff</literal> <operator pos:start="1125:59" pos:end="1125:60">&lt;&lt;</operator> <name pos:start="1125:62" pos:end="1125:66">shift</name><operator pos:start="1125:67" pos:end="1125:67">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                                <expr_stmt pos:start="1127:33" pos:end="1127:50"><expr pos:start="1127:33" pos:end="1127:49"><name pos:start="1127:33" pos:end="1127:36">mask</name> <operator pos:start="1127:38" pos:end="1127:39">|=</operator> <name pos:start="1127:41" pos:end="1127:44">mask</name> <operator pos:start="1127:46" pos:end="1127:47">&lt;&lt;</operator> <literal type="number" pos:start="1127:49" pos:end="1127:49">8</literal></expr>;</expr_stmt>

                                <expr_stmt pos:start="1129:33" pos:end="1129:51"><expr pos:start="1129:33" pos:end="1129:50"><name pos:start="1129:33" pos:end="1129:36">mask</name> <operator pos:start="1129:38" pos:end="1129:39">|=</operator> <name pos:start="1129:41" pos:end="1129:44">mask</name> <operator pos:start="1129:46" pos:end="1129:47">&lt;&lt;</operator> <literal type="number" pos:start="1129:49" pos:end="1129:50">16</literal></expr>;</expr_stmt>

                                <break pos:start="1131:33" pos:end="1131:38">break;</break>

                            <case pos:start="1133:29" pos:end="1133:35">case <expr pos:start="1133:34" pos:end="1133:34"><literal type="number" pos:start="1133:34" pos:end="1133:34">1</literal></expr>:</case>

                                <if_stmt pos:start="1135:33" pos:end="1141:71"><if pos:start="1135:33" pos:end="1137:60">if <condition pos:start="1135:36" pos:end="1135:44">(<expr pos:start="1135:37" pos:end="1135:43"><name pos:start="1135:37" pos:end="1135:38">op</name> <operator pos:start="1135:40" pos:end="1135:41">==</operator> <literal type="number" pos:start="1135:43" pos:end="1135:43">4</literal></expr>)</condition><block type="pseudo" pos:start="1137:37" pos:end="1137:60"><block_content pos:start="1137:37" pos:end="1137:60">

                                    <expr_stmt pos:start="1137:37" pos:end="1137:60"><expr pos:start="1137:37" pos:end="1137:59"><name pos:start="1137:37" pos:end="1137:40">mask</name> <operator pos:start="1137:42" pos:end="1137:42">=</operator> <literal type="number" pos:start="1137:44" pos:end="1137:49">0xffff</literal> <operator pos:start="1137:51" pos:end="1137:52">&gt;&gt;</operator> <operator pos:start="1137:54" pos:end="1137:54">-</operator><name pos:start="1137:55" pos:end="1137:59">shift</name></expr>;</expr_stmt></block_content></block></if>

                                <else pos:start="1139:33" pos:end="1141:71">else<block type="pseudo" pos:start="1141:37" pos:end="1141:71"><block_content pos:start="1141:37" pos:end="1141:71">

                                    <expr_stmt pos:start="1141:37" pos:end="1141:71"><expr pos:start="1141:37" pos:end="1141:70"><name pos:start="1141:37" pos:end="1141:40">mask</name> <operator pos:start="1141:42" pos:end="1141:42">=</operator> <operator pos:start="1141:44" pos:end="1141:44">(</operator><name pos:start="1141:45" pos:end="1141:52">uint16_t</name><operator pos:start="1141:53" pos:end="1141:53">)</operator><operator pos:start="1141:54" pos:end="1141:54">(</operator><literal type="number" pos:start="1141:55" pos:end="1141:60">0xffff</literal> <operator pos:start="1141:62" pos:end="1141:63">&lt;&lt;</operator> <name pos:start="1141:65" pos:end="1141:69">shift</name><operator pos:start="1141:70" pos:end="1141:70">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                                <expr_stmt pos:start="1143:33" pos:end="1143:51"><expr pos:start="1143:33" pos:end="1143:50"><name pos:start="1143:33" pos:end="1143:36">mask</name> <operator pos:start="1143:38" pos:end="1143:39">|=</operator> <name pos:start="1143:41" pos:end="1143:44">mask</name> <operator pos:start="1143:46" pos:end="1143:47">&lt;&lt;</operator> <literal type="number" pos:start="1143:49" pos:end="1143:50">16</literal></expr>;</expr_stmt>

                                <break pos:start="1145:33" pos:end="1145:38">break;</break>

                            <case pos:start="1147:29" pos:end="1147:35">case <expr pos:start="1147:34" pos:end="1147:34"><literal type="number" pos:start="1147:34" pos:end="1147:34">2</literal></expr>:</case>

                                <if_stmt pos:start="1149:33" pos:end="1163:33"><if pos:start="1149:33" pos:end="1153:33">if <condition pos:start="1149:36" pos:end="1149:62">(<expr pos:start="1149:37" pos:end="1149:61"><name pos:start="1149:37" pos:end="1149:58"><name pos:start="1149:37" pos:end="1149:41">shift</name> <argument_list type="generic" pos:start="1149:43" pos:end="1149:58">&lt; <argument pos:start="1149:45" pos:end="1149:56"><expr pos:start="1149:45" pos:end="1149:56"><operator pos:start="1149:45" pos:end="1149:45">-</operator><literal type="number" pos:start="1149:46" pos:end="1149:47">31</literal> <operator pos:start="1149:49" pos:end="1149:50">||</operator> <name pos:start="1149:52" pos:end="1149:56">shift</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="1149:60" pos:end="1149:61">31</literal></expr>)</condition> <block pos:start="1149:64" pos:end="1153:33">{<block_content pos:start="1151:37" pos:end="1151:45">

                                    <expr_stmt pos:start="1151:37" pos:end="1151:45"><expr pos:start="1151:37" pos:end="1151:44"><name pos:start="1151:37" pos:end="1151:40">mask</name> <operator pos:start="1151:42" pos:end="1151:42">=</operator> <literal type="number" pos:start="1151:44" pos:end="1151:44">0</literal></expr>;</expr_stmt>

                                </block_content>}</block></if> <else pos:start="1153:35" pos:end="1163:33">else <block pos:start="1153:40" pos:end="1163:33">{<block_content pos:start="1155:37" pos:end="1161:68">

                                    <if_stmt pos:start="1155:37" pos:end="1161:68"><if pos:start="1155:37" pos:end="1157:69">if <condition pos:start="1155:40" pos:end="1155:48">(<expr pos:start="1155:41" pos:end="1155:47"><name pos:start="1155:41" pos:end="1155:42">op</name> <operator pos:start="1155:44" pos:end="1155:45">==</operator> <literal type="number" pos:start="1155:47" pos:end="1155:47">4</literal></expr>)</condition><block type="pseudo" pos:start="1157:41" pos:end="1157:69"><block_content pos:start="1157:41" pos:end="1157:69">

                                        <expr_stmt pos:start="1157:41" pos:end="1157:69"><expr pos:start="1157:41" pos:end="1157:68"><name pos:start="1157:41" pos:end="1157:44">mask</name> <operator pos:start="1157:46" pos:end="1157:46">=</operator> <literal type="number" pos:start="1157:48" pos:end="1157:58">0xffffffffu</literal> <operator pos:start="1157:60" pos:end="1157:61">&gt;&gt;</operator> <operator pos:start="1157:63" pos:end="1157:63">-</operator><name pos:start="1157:64" pos:end="1157:68">shift</name></expr>;</expr_stmt></block_content></block></if>

                                    <else pos:start="1159:37" pos:end="1161:68">else<block type="pseudo" pos:start="1161:41" pos:end="1161:68"><block_content pos:start="1161:41" pos:end="1161:68">

                                        <expr_stmt pos:start="1161:41" pos:end="1161:68"><expr pos:start="1161:41" pos:end="1161:67"><name pos:start="1161:41" pos:end="1161:44">mask</name> <operator pos:start="1161:46" pos:end="1161:46">=</operator> <literal type="number" pos:start="1161:48" pos:end="1161:58">0xffffffffu</literal> <operator pos:start="1161:60" pos:end="1161:61">&lt;&lt;</operator> <name pos:start="1161:63" pos:end="1161:67">shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                                </block_content>}</block></else></if_stmt>

                                <break pos:start="1165:33" pos:end="1165:38">break;</break>

                            <default pos:start="1167:29" pos:end="1167:36">default:</default>

                                <expr_stmt pos:start="1169:33" pos:end="1169:40"><expr pos:start="1169:33" pos:end="1169:39"><call pos:start="1169:33" pos:end="1169:39"><name pos:start="1169:33" pos:end="1169:37">abort</name><argument_list pos:start="1169:38" pos:end="1169:39">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="1173:29" pos:end="1173:59"><expr pos:start="1173:29" pos:end="1173:58"><name pos:start="1173:29" pos:end="1173:32">tmp2</name> <operator pos:start="1173:34" pos:end="1173:34">=</operator> <call pos:start="1173:36" pos:end="1173:58"><name pos:start="1173:36" pos:end="1173:48">neon_load_reg</name><argument_list pos:start="1173:49" pos:end="1173:58">(<argument pos:start="1173:50" pos:end="1173:51"><expr pos:start="1173:50" pos:end="1173:51"><name pos:start="1173:50" pos:end="1173:51">rd</name></expr></argument>, <argument pos:start="1173:54" pos:end="1173:57"><expr pos:start="1173:54" pos:end="1173:57"><name pos:start="1173:54" pos:end="1173:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1175:29" pos:end="1175:61"><expr pos:start="1175:29" pos:end="1175:60"><call pos:start="1175:29" pos:end="1175:60"><name pos:start="1175:29" pos:end="1175:44">tcg_gen_andi_i32</name><argument_list pos:start="1175:45" pos:end="1175:60">(<argument pos:start="1175:46" pos:end="1175:48"><expr pos:start="1175:46" pos:end="1175:48"><name pos:start="1175:46" pos:end="1175:48">tmp</name></expr></argument>, <argument pos:start="1175:51" pos:end="1175:53"><expr pos:start="1175:51" pos:end="1175:53"><name pos:start="1175:51" pos:end="1175:53">tmp</name></expr></argument>, <argument pos:start="1175:56" pos:end="1175:59"><expr pos:start="1175:56" pos:end="1175:59"><name pos:start="1175:56" pos:end="1175:59">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1177:29" pos:end="1177:64"><expr pos:start="1177:29" pos:end="1177:63"><call pos:start="1177:29" pos:end="1177:63"><name pos:start="1177:29" pos:end="1177:44">tcg_gen_andi_i32</name><argument_list pos:start="1177:45" pos:end="1177:63">(<argument pos:start="1177:46" pos:end="1177:49"><expr pos:start="1177:46" pos:end="1177:49"><name pos:start="1177:46" pos:end="1177:49">tmp2</name></expr></argument>, <argument pos:start="1177:52" pos:end="1177:55"><expr pos:start="1177:52" pos:end="1177:55"><name pos:start="1177:52" pos:end="1177:55">tmp2</name></expr></argument>, <argument pos:start="1177:58" pos:end="1177:62"><expr pos:start="1177:58" pos:end="1177:62"><operator pos:start="1177:58" pos:end="1177:58">~</operator><name pos:start="1177:59" pos:end="1177:62">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1179:29" pos:end="1179:59"><expr pos:start="1179:29" pos:end="1179:58"><call pos:start="1179:29" pos:end="1179:58"><name pos:start="1179:29" pos:end="1179:42">tcg_gen_or_i32</name><argument_list pos:start="1179:43" pos:end="1179:58">(<argument pos:start="1179:44" pos:end="1179:46"><expr pos:start="1179:44" pos:end="1179:46"><name pos:start="1179:44" pos:end="1179:46">tmp</name></expr></argument>, <argument pos:start="1179:49" pos:end="1179:51"><expr pos:start="1179:49" pos:end="1179:51"><name pos:start="1179:49" pos:end="1179:51">tmp</name></expr></argument>, <argument pos:start="1179:54" pos:end="1179:57"><expr pos:start="1179:54" pos:end="1179:57"><name pos:start="1179:54" pos:end="1179:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1181:29" pos:end="1181:43"><expr pos:start="1181:29" pos:end="1181:42"><call pos:start="1181:29" pos:end="1181:42"><name pos:start="1181:29" pos:end="1181:36">dead_tmp</name><argument_list pos:start="1181:37" pos:end="1181:42">(<argument pos:start="1181:38" pos:end="1181:41"><expr pos:start="1181:38" pos:end="1181:41"><name pos:start="1181:38" pos:end="1181:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="1185:25" pos:end="1185:54"><expr pos:start="1185:25" pos:end="1185:53"><call pos:start="1185:25" pos:end="1185:53"><name pos:start="1185:25" pos:end="1185:38">neon_store_reg</name><argument_list pos:start="1185:39" pos:end="1185:53">(<argument pos:start="1185:40" pos:end="1185:41"><expr pos:start="1185:40" pos:end="1185:41"><name pos:start="1185:40" pos:end="1185:41">rd</name></expr></argument>, <argument pos:start="1185:44" pos:end="1185:47"><expr pos:start="1185:44" pos:end="1185:47"><name pos:start="1185:44" pos:end="1185:47">pass</name></expr></argument>, <argument pos:start="1185:50" pos:end="1185:52"><expr pos:start="1185:50" pos:end="1185:52"><name pos:start="1185:50" pos:end="1185:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for> <comment type="block" pos:start="1189:19" pos:end="1189:32">/* for pass */</comment>

            </block_content>}</block></if> <if type="elseif" pos:start="1191:15" pos:end="1319:13">else if <condition pos:start="1191:23" pos:end="1191:31">(<expr pos:start="1191:24" pos:end="1191:30"><name pos:start="1191:24" pos:end="1191:25">op</name> <operator pos:start="1191:27" pos:end="1191:27">&lt;</operator> <literal type="number" pos:start="1191:29" pos:end="1191:30">10</literal></expr>)</condition> <block pos:start="1191:33" pos:end="1319:13">{<block_content pos:start="1197:17" pos:end="1317:17">

                <comment type="block" pos:start="1193:17" pos:end="1195:54">/* Shift by immediate and narrow:

                   VSHRN, VRSHRN, VQSHRN, VQRSHRN.  */</comment>

                <expr_stmt pos:start="1197:17" pos:end="1197:50"><expr pos:start="1197:17" pos:end="1197:49"><name pos:start="1197:17" pos:end="1197:21">shift</name> <operator pos:start="1197:23" pos:end="1197:23">=</operator> <name pos:start="1197:25" pos:end="1197:29">shift</name> <operator pos:start="1197:31" pos:end="1197:31">-</operator> <operator pos:start="1197:33" pos:end="1197:33">(</operator><literal type="number" pos:start="1197:34" pos:end="1197:34">1</literal> <operator pos:start="1197:36" pos:end="1197:37">&lt;&lt;</operator> <operator pos:start="1197:39" pos:end="1197:39">(</operator><name pos:start="1197:40" pos:end="1197:43">size</name> <operator pos:start="1197:45" pos:end="1197:45">+</operator> <literal type="number" pos:start="1197:47" pos:end="1197:47">3</literal><operator pos:start="1197:48" pos:end="1197:48">)</operator><operator pos:start="1197:49" pos:end="1197:49">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1199:17" pos:end="1199:23"><expr pos:start="1199:17" pos:end="1199:22"><name pos:start="1199:17" pos:end="1199:20">size</name><operator pos:start="1199:21" pos:end="1199:22">++</operator></expr>;</expr_stmt>

                <switch pos:start="1201:17" pos:end="1237:17">switch <condition pos:start="1201:24" pos:end="1201:29">(<expr pos:start="1201:25" pos:end="1201:28"><name pos:start="1201:25" pos:end="1201:28">size</name></expr>)</condition> <block pos:start="1201:31" pos:end="1237:17">{<block_content pos:start="1203:17" pos:end="1235:28">

                <case pos:start="1203:17" pos:end="1203:23">case <expr pos:start="1203:22" pos:end="1203:22"><literal type="number" pos:start="1203:22" pos:end="1203:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="1205:21" pos:end="1205:42"><expr pos:start="1205:21" pos:end="1205:41"><name pos:start="1205:21" pos:end="1205:23">imm</name> <operator pos:start="1205:25" pos:end="1205:25">=</operator> <operator pos:start="1205:27" pos:end="1205:27">(</operator><name pos:start="1205:28" pos:end="1205:35">uint16_t</name><operator pos:start="1205:36" pos:end="1205:36">)</operator><name pos:start="1205:37" pos:end="1205:41">shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1207:21" pos:end="1207:37"><expr pos:start="1207:21" pos:end="1207:36"><name pos:start="1207:21" pos:end="1207:23">imm</name> <operator pos:start="1207:25" pos:end="1207:26">|=</operator> <name pos:start="1207:28" pos:end="1207:30">imm</name> <operator pos:start="1207:32" pos:end="1207:33">&lt;&lt;</operator> <literal type="number" pos:start="1207:35" pos:end="1207:36">16</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1209:21" pos:end="1209:46"><expr pos:start="1209:21" pos:end="1209:45"><name pos:start="1209:21" pos:end="1209:24">tmp2</name> <operator pos:start="1209:26" pos:end="1209:26">=</operator> <call pos:start="1209:28" pos:end="1209:45"><name pos:start="1209:28" pos:end="1209:40">tcg_const_i32</name><argument_list pos:start="1209:41" pos:end="1209:45">(<argument pos:start="1209:42" pos:end="1209:44"><expr pos:start="1209:42" pos:end="1209:44"><name pos:start="1209:42" pos:end="1209:44">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1211:21" pos:end="1211:43"><expr pos:start="1211:21" pos:end="1211:42"><call pos:start="1211:21" pos:end="1211:42"><name pos:start="1211:21" pos:end="1211:35">TCGV_UNUSED_I64</name><argument_list pos:start="1211:36" pos:end="1211:42">(<argument pos:start="1211:37" pos:end="1211:41"><expr pos:start="1211:37" pos:end="1211:41"><name pos:start="1211:37" pos:end="1211:41">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1213:21" pos:end="1213:26">break;</break>

                <case pos:start="1215:17" pos:end="1215:23">case <expr pos:start="1215:22" pos:end="1215:22"><literal type="number" pos:start="1215:22" pos:end="1215:22">2</literal></expr>:</case>

                    <expr_stmt pos:start="1217:21" pos:end="1217:42"><expr pos:start="1217:21" pos:end="1217:41"><name pos:start="1217:21" pos:end="1217:23">imm</name> <operator pos:start="1217:25" pos:end="1217:25">=</operator> <operator pos:start="1217:27" pos:end="1217:27">(</operator><name pos:start="1217:28" pos:end="1217:35">uint32_t</name><operator pos:start="1217:36" pos:end="1217:36">)</operator><name pos:start="1217:37" pos:end="1217:41">shift</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1219:21" pos:end="1219:46"><expr pos:start="1219:21" pos:end="1219:45"><name pos:start="1219:21" pos:end="1219:24">tmp2</name> <operator pos:start="1219:26" pos:end="1219:26">=</operator> <call pos:start="1219:28" pos:end="1219:45"><name pos:start="1219:28" pos:end="1219:40">tcg_const_i32</name><argument_list pos:start="1219:41" pos:end="1219:45">(<argument pos:start="1219:42" pos:end="1219:44"><expr pos:start="1219:42" pos:end="1219:44"><name pos:start="1219:42" pos:end="1219:44">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1221:21" pos:end="1221:43"><expr pos:start="1221:21" pos:end="1221:42"><call pos:start="1221:21" pos:end="1221:42"><name pos:start="1221:21" pos:end="1221:35">TCGV_UNUSED_I64</name><argument_list pos:start="1221:36" pos:end="1221:42">(<argument pos:start="1221:37" pos:end="1221:41"><expr pos:start="1221:37" pos:end="1221:41"><name pos:start="1221:37" pos:end="1221:41">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1223:21" pos:end="1223:26">break;</break>

                <case pos:start="1225:17" pos:end="1225:23">case <expr pos:start="1225:22" pos:end="1225:22"><literal type="number" pos:start="1225:22" pos:end="1225:22">3</literal></expr>:</case>

                    <expr_stmt pos:start="1227:21" pos:end="1227:49"><expr pos:start="1227:21" pos:end="1227:48"><name pos:start="1227:21" pos:end="1227:25">tmp64</name> <operator pos:start="1227:27" pos:end="1227:27">=</operator> <call pos:start="1227:29" pos:end="1227:48"><name pos:start="1227:29" pos:end="1227:41">tcg_const_i64</name><argument_list pos:start="1227:42" pos:end="1227:48">(<argument pos:start="1227:43" pos:end="1227:47"><expr pos:start="1227:43" pos:end="1227:47"><name pos:start="1227:43" pos:end="1227:47">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1229:21" pos:end="1229:38"><expr pos:start="1229:21" pos:end="1229:37"><call pos:start="1229:21" pos:end="1229:37"><name pos:start="1229:21" pos:end="1229:31">TCGV_UNUSED</name><argument_list pos:start="1229:32" pos:end="1229:37">(<argument pos:start="1229:33" pos:end="1229:36"><expr pos:start="1229:33" pos:end="1229:36"><name pos:start="1229:33" pos:end="1229:36">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1231:21" pos:end="1231:26">break;</break>

                <default pos:start="1233:17" pos:end="1233:24">default:</default>

                    <expr_stmt pos:start="1235:21" pos:end="1235:28"><expr pos:start="1235:21" pos:end="1235:27"><call pos:start="1235:21" pos:end="1235:27"><name pos:start="1235:21" pos:end="1235:25">abort</name><argument_list pos:start="1235:26" pos:end="1235:27">()</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></switch>



                <for pos:start="1241:17" pos:end="1307:17">for <control pos:start="1241:21" pos:end="1241:48">(<init pos:start="1241:22" pos:end="1241:30"><expr pos:start="1241:22" pos:end="1241:29"><name pos:start="1241:22" pos:end="1241:25">pass</name> <operator pos:start="1241:27" pos:end="1241:27">=</operator> <literal type="number" pos:start="1241:29" pos:end="1241:29">0</literal></expr>;</init> <condition pos:start="1241:32" pos:end="1241:40"><expr pos:start="1241:32" pos:end="1241:39"><name pos:start="1241:32" pos:end="1241:35">pass</name> <operator pos:start="1241:37" pos:end="1241:37">&lt;</operator> <literal type="number" pos:start="1241:39" pos:end="1241:39">2</literal></expr>;</condition> <incr pos:start="1241:42" pos:end="1241:47"><expr pos:start="1241:42" pos:end="1241:47"><name pos:start="1241:42" pos:end="1241:45">pass</name><operator pos:start="1241:46" pos:end="1241:47">++</operator></expr></incr>)</control> <block pos:start="1241:50" pos:end="1307:17">{<block_content pos:start="1243:21" pos:end="1305:50">

                    <if_stmt pos:start="1243:21" pos:end="1285:21"><if pos:start="1243:21" pos:end="1269:21">if <condition pos:start="1243:24" pos:end="1243:34">(<expr pos:start="1243:25" pos:end="1243:33"><name pos:start="1243:25" pos:end="1243:28">size</name> <operator pos:start="1243:30" pos:end="1243:31">==</operator> <literal type="number" pos:start="1243:33" pos:end="1243:33">3</literal></expr>)</condition> <block pos:start="1243:36" pos:end="1269:21">{<block_content pos:start="1245:25" pos:end="1267:25">

                        <expr_stmt pos:start="1245:25" pos:end="1245:59"><expr pos:start="1245:25" pos:end="1245:58"><call pos:start="1245:25" pos:end="1245:58"><name pos:start="1245:25" pos:end="1245:39">neon_load_reg64</name><argument_list pos:start="1245:40" pos:end="1245:58">(<argument pos:start="1245:41" pos:end="1245:46"><expr pos:start="1245:41" pos:end="1245:46"><name pos:start="1245:41" pos:end="1245:46">cpu_V0</name></expr></argument>, <argument pos:start="1245:49" pos:end="1245:57"><expr pos:start="1245:49" pos:end="1245:57"><name pos:start="1245:49" pos:end="1245:50">rm</name> <operator pos:start="1245:52" pos:end="1245:52">+</operator> <name pos:start="1245:54" pos:end="1245:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1247:25" pos:end="1267:25"><if pos:start="1247:25" pos:end="1257:25">if <condition pos:start="1247:28" pos:end="1247:30">(<expr pos:start="1247:29" pos:end="1247:29"><name pos:start="1247:29" pos:end="1247:29">q</name></expr>)</condition> <block pos:start="1247:32" pos:end="1257:25">{<block_content pos:start="1249:27" pos:end="1255:76">

                          <if_stmt pos:start="1249:27" pos:end="1255:76"><if pos:start="1249:27" pos:end="1251:76">if <condition pos:start="1249:30" pos:end="1249:32">(<expr pos:start="1249:31" pos:end="1249:31"><name pos:start="1249:31" pos:end="1249:31">u</name></expr>)</condition><block type="pseudo" pos:start="1251:29" pos:end="1251:76"><block_content pos:start="1251:29" pos:end="1251:76">

                            <expr_stmt pos:start="1251:29" pos:end="1251:76"><expr pos:start="1251:29" pos:end="1251:75"><call pos:start="1251:29" pos:end="1251:75"><name pos:start="1251:29" pos:end="1251:52">gen_helper_neon_rshl_u64</name><argument_list pos:start="1251:53" pos:end="1251:75">(<argument pos:start="1251:54" pos:end="1251:59"><expr pos:start="1251:54" pos:end="1251:59"><name pos:start="1251:54" pos:end="1251:59">cpu_V0</name></expr></argument>, <argument pos:start="1251:62" pos:end="1251:67"><expr pos:start="1251:62" pos:end="1251:67"><name pos:start="1251:62" pos:end="1251:67">cpu_V0</name></expr></argument>, <argument pos:start="1251:70" pos:end="1251:74"><expr pos:start="1251:70" pos:end="1251:74"><name pos:start="1251:70" pos:end="1251:74">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                          <else pos:start="1253:27" pos:end="1255:76">else<block type="pseudo" pos:start="1255:29" pos:end="1255:76"><block_content pos:start="1255:29" pos:end="1255:76">

                            <expr_stmt pos:start="1255:29" pos:end="1255:76"><expr pos:start="1255:29" pos:end="1255:75"><call pos:start="1255:29" pos:end="1255:75"><name pos:start="1255:29" pos:end="1255:52">gen_helper_neon_rshl_s64</name><argument_list pos:start="1255:53" pos:end="1255:75">(<argument pos:start="1255:54" pos:end="1255:59"><expr pos:start="1255:54" pos:end="1255:59"><name pos:start="1255:54" pos:end="1255:59">cpu_V0</name></expr></argument>, <argument pos:start="1255:62" pos:end="1255:67"><expr pos:start="1255:62" pos:end="1255:67"><name pos:start="1255:62" pos:end="1255:67">cpu_V0</name></expr></argument>, <argument pos:start="1255:70" pos:end="1255:74"><expr pos:start="1255:70" pos:end="1255:74"><name pos:start="1255:70" pos:end="1255:74">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="1257:27" pos:end="1267:25">else <block pos:start="1257:32" pos:end="1267:25">{<block_content pos:start="1259:27" pos:end="1265:75">

                          <if_stmt pos:start="1259:27" pos:end="1265:75"><if pos:start="1259:27" pos:end="1261:75">if <condition pos:start="1259:30" pos:end="1259:32">(<expr pos:start="1259:31" pos:end="1259:31"><name pos:start="1259:31" pos:end="1259:31">u</name></expr>)</condition><block type="pseudo" pos:start="1261:29" pos:end="1261:75"><block_content pos:start="1261:29" pos:end="1261:75">

                            <expr_stmt pos:start="1261:29" pos:end="1261:75"><expr pos:start="1261:29" pos:end="1261:74"><call pos:start="1261:29" pos:end="1261:74"><name pos:start="1261:29" pos:end="1261:51">gen_helper_neon_shl_u64</name><argument_list pos:start="1261:52" pos:end="1261:74">(<argument pos:start="1261:53" pos:end="1261:58"><expr pos:start="1261:53" pos:end="1261:58"><name pos:start="1261:53" pos:end="1261:58">cpu_V0</name></expr></argument>, <argument pos:start="1261:61" pos:end="1261:66"><expr pos:start="1261:61" pos:end="1261:66"><name pos:start="1261:61" pos:end="1261:66">cpu_V0</name></expr></argument>, <argument pos:start="1261:69" pos:end="1261:73"><expr pos:start="1261:69" pos:end="1261:73"><name pos:start="1261:69" pos:end="1261:73">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                          <else pos:start="1263:27" pos:end="1265:75">else<block type="pseudo" pos:start="1265:29" pos:end="1265:75"><block_content pos:start="1265:29" pos:end="1265:75">

                            <expr_stmt pos:start="1265:29" pos:end="1265:75"><expr pos:start="1265:29" pos:end="1265:74"><call pos:start="1265:29" pos:end="1265:74"><name pos:start="1265:29" pos:end="1265:51">gen_helper_neon_shl_s64</name><argument_list pos:start="1265:52" pos:end="1265:74">(<argument pos:start="1265:53" pos:end="1265:58"><expr pos:start="1265:53" pos:end="1265:58"><name pos:start="1265:53" pos:end="1265:58">cpu_V0</name></expr></argument>, <argument pos:start="1265:61" pos:end="1265:66"><expr pos:start="1265:61" pos:end="1265:66"><name pos:start="1265:61" pos:end="1265:66">cpu_V0</name></expr></argument>, <argument pos:start="1265:69" pos:end="1265:73"><expr pos:start="1265:69" pos:end="1265:73"><name pos:start="1265:69" pos:end="1265:73">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="1269:23" pos:end="1285:21">else <block pos:start="1269:28" pos:end="1285:21">{<block_content pos:start="1271:25" pos:end="1283:39">

                        <expr_stmt pos:start="1271:25" pos:end="1271:58"><expr pos:start="1271:25" pos:end="1271:57"><name pos:start="1271:25" pos:end="1271:27">tmp</name> <operator pos:start="1271:29" pos:end="1271:29">=</operator> <call pos:start="1271:31" pos:end="1271:57"><name pos:start="1271:31" pos:end="1271:43">neon_load_reg</name><argument_list pos:start="1271:44" pos:end="1271:57">(<argument pos:start="1271:45" pos:end="1271:53"><expr pos:start="1271:45" pos:end="1271:53"><name pos:start="1271:45" pos:end="1271:46">rm</name> <operator pos:start="1271:48" pos:end="1271:48">+</operator> <name pos:start="1271:50" pos:end="1271:53">pass</name></expr></argument>, <argument pos:start="1271:56" pos:end="1271:56"><expr pos:start="1271:56" pos:end="1271:56"><literal type="number" pos:start="1271:56" pos:end="1271:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1273:25" pos:end="1273:69"><expr pos:start="1273:25" pos:end="1273:68"><call pos:start="1273:25" pos:end="1273:68"><name pos:start="1273:25" pos:end="1273:45">gen_neon_shift_narrow</name><argument_list pos:start="1273:46" pos:end="1273:68">(<argument pos:start="1273:47" pos:end="1273:50"><expr pos:start="1273:47" pos:end="1273:50"><name pos:start="1273:47" pos:end="1273:50">size</name></expr></argument>, <argument pos:start="1273:53" pos:end="1273:55"><expr pos:start="1273:53" pos:end="1273:55"><name pos:start="1273:53" pos:end="1273:55">tmp</name></expr></argument>, <argument pos:start="1273:58" pos:end="1273:61"><expr pos:start="1273:58" pos:end="1273:61"><name pos:start="1273:58" pos:end="1273:61">tmp2</name></expr></argument>, <argument pos:start="1273:64" pos:end="1273:64"><expr pos:start="1273:64" pos:end="1273:64"><name pos:start="1273:64" pos:end="1273:64">q</name></expr></argument>, <argument pos:start="1273:67" pos:end="1273:67"><expr pos:start="1273:67" pos:end="1273:67"><name pos:start="1273:67" pos:end="1273:67">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1275:25" pos:end="1275:59"><expr pos:start="1275:25" pos:end="1275:58"><name pos:start="1275:25" pos:end="1275:28">tmp3</name> <operator pos:start="1275:30" pos:end="1275:30">=</operator> <call pos:start="1275:32" pos:end="1275:58"><name pos:start="1275:32" pos:end="1275:44">neon_load_reg</name><argument_list pos:start="1275:45" pos:end="1275:58">(<argument pos:start="1275:46" pos:end="1275:54"><expr pos:start="1275:46" pos:end="1275:54"><name pos:start="1275:46" pos:end="1275:47">rm</name> <operator pos:start="1275:49" pos:end="1275:49">+</operator> <name pos:start="1275:51" pos:end="1275:54">pass</name></expr></argument>, <argument pos:start="1275:57" pos:end="1275:57"><expr pos:start="1275:57" pos:end="1275:57"><literal type="number" pos:start="1275:57" pos:end="1275:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1277:25" pos:end="1277:70"><expr pos:start="1277:25" pos:end="1277:69"><call pos:start="1277:25" pos:end="1277:69"><name pos:start="1277:25" pos:end="1277:45">gen_neon_shift_narrow</name><argument_list pos:start="1277:46" pos:end="1277:69">(<argument pos:start="1277:47" pos:end="1277:50"><expr pos:start="1277:47" pos:end="1277:50"><name pos:start="1277:47" pos:end="1277:50">size</name></expr></argument>, <argument pos:start="1277:53" pos:end="1277:56"><expr pos:start="1277:53" pos:end="1277:56"><name pos:start="1277:53" pos:end="1277:56">tmp3</name></expr></argument>, <argument pos:start="1277:59" pos:end="1277:62"><expr pos:start="1277:59" pos:end="1277:62"><name pos:start="1277:59" pos:end="1277:62">tmp2</name></expr></argument>, <argument pos:start="1277:65" pos:end="1277:65"><expr pos:start="1277:65" pos:end="1277:65"><name pos:start="1277:65" pos:end="1277:65">q</name></expr></argument>, <argument pos:start="1277:68" pos:end="1277:68"><expr pos:start="1277:68" pos:end="1277:68"><name pos:start="1277:68" pos:end="1277:68">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1279:25" pos:end="1279:66"><expr pos:start="1279:25" pos:end="1279:65"><call pos:start="1279:25" pos:end="1279:65"><name pos:start="1279:25" pos:end="1279:46">tcg_gen_concat_i32_i64</name><argument_list pos:start="1279:47" pos:end="1279:65">(<argument pos:start="1279:48" pos:end="1279:53"><expr pos:start="1279:48" pos:end="1279:53"><name pos:start="1279:48" pos:end="1279:53">cpu_V0</name></expr></argument>, <argument pos:start="1279:56" pos:end="1279:58"><expr pos:start="1279:56" pos:end="1279:58"><name pos:start="1279:56" pos:end="1279:58">tmp</name></expr></argument>, <argument pos:start="1279:61" pos:end="1279:64"><expr pos:start="1279:61" pos:end="1279:64"><name pos:start="1279:61" pos:end="1279:64">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1281:25" pos:end="1281:38"><expr pos:start="1281:25" pos:end="1281:37"><call pos:start="1281:25" pos:end="1281:37"><name pos:start="1281:25" pos:end="1281:32">dead_tmp</name><argument_list pos:start="1281:33" pos:end="1281:37">(<argument pos:start="1281:34" pos:end="1281:36"><expr pos:start="1281:34" pos:end="1281:36"><name pos:start="1281:34" pos:end="1281:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1283:25" pos:end="1283:39"><expr pos:start="1283:25" pos:end="1283:38"><call pos:start="1283:25" pos:end="1283:38"><name pos:start="1283:25" pos:end="1283:32">dead_tmp</name><argument_list pos:start="1283:33" pos:end="1283:38">(<argument pos:start="1283:34" pos:end="1283:37"><expr pos:start="1283:34" pos:end="1283:37"><name pos:start="1283:34" pos:end="1283:37">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1287:21" pos:end="1287:36"><expr pos:start="1287:21" pos:end="1287:35"><name pos:start="1287:21" pos:end="1287:23">tmp</name> <operator pos:start="1287:25" pos:end="1287:25">=</operator> <call pos:start="1287:27" pos:end="1287:35"><name pos:start="1287:27" pos:end="1287:33">new_tmp</name><argument_list pos:start="1287:34" pos:end="1287:35">()</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1289:21" pos:end="1303:21"><if pos:start="1289:21" pos:end="1293:21">if <condition pos:start="1289:24" pos:end="1289:38">(<expr pos:start="1289:25" pos:end="1289:37"><name pos:start="1289:25" pos:end="1289:26">op</name> <operator pos:start="1289:28" pos:end="1289:29">==</operator> <literal type="number" pos:start="1289:31" pos:end="1289:31">8</literal> <operator pos:start="1289:33" pos:end="1289:34">&amp;&amp;</operator> <operator pos:start="1289:36" pos:end="1289:36">!</operator><name pos:start="1289:37" pos:end="1289:37">u</name></expr>)</condition> <block pos:start="1289:40" pos:end="1293:21">{<block_content pos:start="1291:25" pos:end="1291:63">

                        <expr_stmt pos:start="1291:25" pos:end="1291:63"><expr pos:start="1291:25" pos:end="1291:62"><call pos:start="1291:25" pos:end="1291:62"><name pos:start="1291:25" pos:end="1291:39">gen_neon_narrow</name><argument_list pos:start="1291:40" pos:end="1291:62">(<argument pos:start="1291:41" pos:end="1291:48"><expr pos:start="1291:41" pos:end="1291:48"><name pos:start="1291:41" pos:end="1291:44">size</name> <operator pos:start="1291:46" pos:end="1291:46">-</operator> <literal type="number" pos:start="1291:48" pos:end="1291:48">1</literal></expr></argument>, <argument pos:start="1291:51" pos:end="1291:53"><expr pos:start="1291:51" pos:end="1291:53"><name pos:start="1291:51" pos:end="1291:53">tmp</name></expr></argument>, <argument pos:start="1291:56" pos:end="1291:61"><expr pos:start="1291:56" pos:end="1291:61"><name pos:start="1291:56" pos:end="1291:61">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1293:23" pos:end="1303:21">else <block pos:start="1293:28" pos:end="1303:21">{<block_content pos:start="1295:25" pos:end="1301:72">

                        <if_stmt pos:start="1295:25" pos:end="1301:72"><if pos:start="1295:25" pos:end="1297:72">if <condition pos:start="1295:28" pos:end="1295:36">(<expr pos:start="1295:29" pos:end="1295:35"><name pos:start="1295:29" pos:end="1295:30">op</name> <operator pos:start="1295:32" pos:end="1295:33">==</operator> <literal type="number" pos:start="1295:35" pos:end="1295:35">8</literal></expr>)</condition><block type="pseudo" pos:start="1297:29" pos:end="1297:72"><block_content pos:start="1297:29" pos:end="1297:72">

                            <expr_stmt pos:start="1297:29" pos:end="1297:72"><expr pos:start="1297:29" pos:end="1297:71"><call pos:start="1297:29" pos:end="1297:71"><name pos:start="1297:29" pos:end="1297:48">gen_neon_narrow_sats</name><argument_list pos:start="1297:49" pos:end="1297:71">(<argument pos:start="1297:50" pos:end="1297:57"><expr pos:start="1297:50" pos:end="1297:57"><name pos:start="1297:50" pos:end="1297:53">size</name> <operator pos:start="1297:55" pos:end="1297:55">-</operator> <literal type="number" pos:start="1297:57" pos:end="1297:57">1</literal></expr></argument>, <argument pos:start="1297:60" pos:end="1297:62"><expr pos:start="1297:60" pos:end="1297:62"><name pos:start="1297:60" pos:end="1297:62">tmp</name></expr></argument>, <argument pos:start="1297:65" pos:end="1297:70"><expr pos:start="1297:65" pos:end="1297:70"><name pos:start="1297:65" pos:end="1297:70">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="1299:25" pos:end="1301:72">else<block type="pseudo" pos:start="1301:29" pos:end="1301:72"><block_content pos:start="1301:29" pos:end="1301:72">

                            <expr_stmt pos:start="1301:29" pos:end="1301:72"><expr pos:start="1301:29" pos:end="1301:71"><call pos:start="1301:29" pos:end="1301:71"><name pos:start="1301:29" pos:end="1301:48">gen_neon_narrow_satu</name><argument_list pos:start="1301:49" pos:end="1301:71">(<argument pos:start="1301:50" pos:end="1301:57"><expr pos:start="1301:50" pos:end="1301:57"><name pos:start="1301:50" pos:end="1301:53">size</name> <operator pos:start="1301:55" pos:end="1301:55">-</operator> <literal type="number" pos:start="1301:57" pos:end="1301:57">1</literal></expr></argument>, <argument pos:start="1301:60" pos:end="1301:62"><expr pos:start="1301:60" pos:end="1301:62"><name pos:start="1301:60" pos:end="1301:62">tmp</name></expr></argument>, <argument pos:start="1301:65" pos:end="1301:70"><expr pos:start="1301:65" pos:end="1301:70"><name pos:start="1301:65" pos:end="1301:70">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1305:21" pos:end="1305:50"><expr pos:start="1305:21" pos:end="1305:49"><call pos:start="1305:21" pos:end="1305:49"><name pos:start="1305:21" pos:end="1305:34">neon_store_reg</name><argument_list pos:start="1305:35" pos:end="1305:49">(<argument pos:start="1305:36" pos:end="1305:37"><expr pos:start="1305:36" pos:end="1305:37"><name pos:start="1305:36" pos:end="1305:37">rd</name></expr></argument>, <argument pos:start="1305:40" pos:end="1305:43"><expr pos:start="1305:40" pos:end="1305:43"><name pos:start="1305:40" pos:end="1305:43">pass</name></expr></argument>, <argument pos:start="1305:46" pos:end="1305:48"><expr pos:start="1305:46" pos:end="1305:48"><name pos:start="1305:46" pos:end="1305:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for> <comment type="block" pos:start="1307:19" pos:end="1307:32">/* for pass */</comment>

                <if_stmt pos:start="1309:17" pos:end="1317:17"><if pos:start="1309:17" pos:end="1313:17">if <condition pos:start="1309:20" pos:end="1309:30">(<expr pos:start="1309:21" pos:end="1309:29"><name pos:start="1309:21" pos:end="1309:24">size</name> <operator pos:start="1309:26" pos:end="1309:27">==</operator> <literal type="number" pos:start="1309:29" pos:end="1309:29">3</literal></expr>)</condition> <block pos:start="1309:32" pos:end="1313:17">{<block_content pos:start="1311:21" pos:end="1311:45">

                    <expr_stmt pos:start="1311:21" pos:end="1311:45"><expr pos:start="1311:21" pos:end="1311:44"><call pos:start="1311:21" pos:end="1311:44"><name pos:start="1311:21" pos:end="1311:37">tcg_temp_free_i64</name><argument_list pos:start="1311:38" pos:end="1311:44">(<argument pos:start="1311:39" pos:end="1311:43"><expr pos:start="1311:39" pos:end="1311:43"><name pos:start="1311:39" pos:end="1311:43">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1313:19" pos:end="1317:17">else <block pos:start="1313:24" pos:end="1317:17">{<block_content pos:start="1315:21" pos:end="1315:44">

                    <expr_stmt pos:start="1315:21" pos:end="1315:44"><expr pos:start="1315:21" pos:end="1315:43"><call pos:start="1315:21" pos:end="1315:43"><name pos:start="1315:21" pos:end="1315:37">tcg_temp_free_i32</name><argument_list pos:start="1315:38" pos:end="1315:43">(<argument pos:start="1315:39" pos:end="1315:42"><expr pos:start="1315:39" pos:end="1315:42"><name pos:start="1315:39" pos:end="1315:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1319:15" pos:end="1379:13">else if <condition pos:start="1319:23" pos:end="1319:32">(<expr pos:start="1319:24" pos:end="1319:31"><name pos:start="1319:24" pos:end="1319:25">op</name> <operator pos:start="1319:27" pos:end="1319:28">==</operator> <literal type="number" pos:start="1319:30" pos:end="1319:31">10</literal></expr>)</condition> <block pos:start="1319:34" pos:end="1379:13">{<block_content pos:start="1323:17" pos:end="1377:17">

                <comment type="block" pos:start="1321:17" pos:end="1321:27">/* VSHLL */</comment>

                <if_stmt pos:start="1323:17" pos:end="1325:29"><if pos:start="1323:17" pos:end="1325:29">if <condition pos:start="1323:20" pos:end="1323:35">(<expr pos:start="1323:21" pos:end="1323:34"><name pos:start="1323:21" pos:end="1323:21">q</name> <operator pos:start="1323:23" pos:end="1323:24">||</operator> <name pos:start="1323:26" pos:end="1323:29">size</name> <operator pos:start="1323:31" pos:end="1323:32">==</operator> <literal type="number" pos:start="1323:34" pos:end="1323:34">3</literal></expr>)</condition><block type="pseudo" pos:start="1325:21" pos:end="1325:29"><block_content pos:start="1325:21" pos:end="1325:29">

                    <return pos:start="1325:21" pos:end="1325:29">return <expr pos:start="1325:28" pos:end="1325:28"><literal type="number" pos:start="1325:28" pos:end="1325:28">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1327:17" pos:end="1327:43"><expr pos:start="1327:17" pos:end="1327:42"><name pos:start="1327:17" pos:end="1327:19">tmp</name> <operator pos:start="1327:21" pos:end="1327:21">=</operator> <call pos:start="1327:23" pos:end="1327:42"><name pos:start="1327:23" pos:end="1327:35">neon_load_reg</name><argument_list pos:start="1327:36" pos:end="1327:42">(<argument pos:start="1327:37" pos:end="1327:38"><expr pos:start="1327:37" pos:end="1327:38"><name pos:start="1327:37" pos:end="1327:38">rm</name></expr></argument>, <argument pos:start="1327:41" pos:end="1327:41"><expr pos:start="1327:41" pos:end="1327:41"><literal type="number" pos:start="1327:41" pos:end="1327:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1329:17" pos:end="1329:44"><expr pos:start="1329:17" pos:end="1329:43"><name pos:start="1329:17" pos:end="1329:20">tmp2</name> <operator pos:start="1329:22" pos:end="1329:22">=</operator> <call pos:start="1329:24" pos:end="1329:43"><name pos:start="1329:24" pos:end="1329:36">neon_load_reg</name><argument_list pos:start="1329:37" pos:end="1329:43">(<argument pos:start="1329:38" pos:end="1329:39"><expr pos:start="1329:38" pos:end="1329:39"><name pos:start="1329:38" pos:end="1329:39">rm</name></expr></argument>, <argument pos:start="1329:42" pos:end="1329:42"><expr pos:start="1329:42" pos:end="1329:42"><literal type="number" pos:start="1329:42" pos:end="1329:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="1331:17" pos:end="1377:17">for <control pos:start="1331:21" pos:end="1331:48">(<init pos:start="1331:22" pos:end="1331:30"><expr pos:start="1331:22" pos:end="1331:29"><name pos:start="1331:22" pos:end="1331:25">pass</name> <operator pos:start="1331:27" pos:end="1331:27">=</operator> <literal type="number" pos:start="1331:29" pos:end="1331:29">0</literal></expr>;</init> <condition pos:start="1331:32" pos:end="1331:40"><expr pos:start="1331:32" pos:end="1331:39"><name pos:start="1331:32" pos:end="1331:35">pass</name> <operator pos:start="1331:37" pos:end="1331:37">&lt;</operator> <literal type="number" pos:start="1331:39" pos:end="1331:39">2</literal></expr>;</condition> <incr pos:start="1331:42" pos:end="1331:47"><expr pos:start="1331:42" pos:end="1331:47"><name pos:start="1331:42" pos:end="1331:45">pass</name><operator pos:start="1331:46" pos:end="1331:47">++</operator></expr></incr>)</control> <block pos:start="1331:50" pos:end="1377:17">{<block_content pos:start="1333:21" pos:end="1375:56">

                    <if_stmt pos:start="1333:21" pos:end="1335:35"><if pos:start="1333:21" pos:end="1335:35">if <condition pos:start="1333:24" pos:end="1333:34">(<expr pos:start="1333:25" pos:end="1333:33"><name pos:start="1333:25" pos:end="1333:28">pass</name> <operator pos:start="1333:30" pos:end="1333:31">==</operator> <literal type="number" pos:start="1333:33" pos:end="1333:33">1</literal></expr>)</condition><block type="pseudo" pos:start="1335:25" pos:end="1335:35"><block_content pos:start="1335:25" pos:end="1335:35">

                        <expr_stmt pos:start="1335:25" pos:end="1335:35"><expr pos:start="1335:25" pos:end="1335:34"><name pos:start="1335:25" pos:end="1335:27">tmp</name> <operator pos:start="1335:29" pos:end="1335:29">=</operator> <name pos:start="1335:31" pos:end="1335:34">tmp2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="1339:21" pos:end="1339:57"><expr pos:start="1339:21" pos:end="1339:56"><call pos:start="1339:21" pos:end="1339:56"><name pos:start="1339:21" pos:end="1339:34">gen_neon_widen</name><argument_list pos:start="1339:35" pos:end="1339:56">(<argument pos:start="1339:36" pos:end="1339:41"><expr pos:start="1339:36" pos:end="1339:41"><name pos:start="1339:36" pos:end="1339:41">cpu_V0</name></expr></argument>, <argument pos:start="1339:44" pos:end="1339:46"><expr pos:start="1339:44" pos:end="1339:46"><name pos:start="1339:44" pos:end="1339:46">tmp</name></expr></argument>, <argument pos:start="1339:49" pos:end="1339:52"><expr pos:start="1339:49" pos:end="1339:52"><name pos:start="1339:49" pos:end="1339:52">size</name></expr></argument>, <argument pos:start="1339:55" pos:end="1339:55"><expr pos:start="1339:55" pos:end="1339:55"><name pos:start="1339:55" pos:end="1339:55">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="1343:21" pos:end="1373:21"><if pos:start="1343:21" pos:end="1373:21">if <condition pos:start="1343:24" pos:end="1343:35">(<expr pos:start="1343:25" pos:end="1343:34"><name pos:start="1343:25" pos:end="1343:29">shift</name> <operator pos:start="1343:31" pos:end="1343:32">!=</operator> <literal type="number" pos:start="1343:34" pos:end="1343:34">0</literal></expr>)</condition> <block pos:start="1343:37" pos:end="1373:21">{<block_content pos:start="1349:25" pos:end="1371:25">

                        <comment type="block" pos:start="1345:25" pos:end="1347:77">/* The shift is less than the width of the source

                           type, so we can just shift the whole register.  */</comment>

                        <expr_stmt pos:start="1349:25" pos:end="1349:64"><expr pos:start="1349:25" pos:end="1349:63"><call pos:start="1349:25" pos:end="1349:63"><name pos:start="1349:25" pos:end="1349:40">tcg_gen_shli_i64</name><argument_list pos:start="1349:41" pos:end="1349:63">(<argument pos:start="1349:42" pos:end="1349:47"><expr pos:start="1349:42" pos:end="1349:47"><name pos:start="1349:42" pos:end="1349:47">cpu_V0</name></expr></argument>, <argument pos:start="1349:50" pos:end="1349:55"><expr pos:start="1349:50" pos:end="1349:55"><name pos:start="1349:50" pos:end="1349:55">cpu_V0</name></expr></argument>, <argument pos:start="1349:58" pos:end="1349:62"><expr pos:start="1349:58" pos:end="1349:62"><name pos:start="1349:58" pos:end="1349:62">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1351:25" pos:end="1371:25"><if pos:start="1351:25" pos:end="1371:25">if <condition pos:start="1351:28" pos:end="1351:43">(<expr pos:start="1351:29" pos:end="1351:42"><name pos:start="1351:29" pos:end="1351:32">size</name> <operator pos:start="1351:34" pos:end="1351:34">&lt;</operator> <literal type="number" pos:start="1351:36" pos:end="1351:36">2</literal> <operator pos:start="1351:38" pos:end="1351:39">||</operator> <operator pos:start="1351:41" pos:end="1351:41">!</operator><name pos:start="1351:42" pos:end="1351:42">u</name></expr>)</condition> <block pos:start="1351:45" pos:end="1371:25">{<block_content pos:start="1353:29" pos:end="1369:68">

                            <decl_stmt pos:start="1353:29" pos:end="1353:43"><decl pos:start="1353:29" pos:end="1353:42"><type pos:start="1353:29" pos:end="1353:36"><name pos:start="1353:29" pos:end="1353:36">uint64_t</name></type> <name pos:start="1353:38" pos:end="1353:42">imm64</name></decl>;</decl_stmt>

                            <if_stmt pos:start="1355:29" pos:end="1365:29"><if pos:start="1355:29" pos:end="1361:29">if <condition pos:start="1355:32" pos:end="1355:42">(<expr pos:start="1355:33" pos:end="1355:41"><name pos:start="1355:33" pos:end="1355:36">size</name> <operator pos:start="1355:38" pos:end="1355:39">==</operator> <literal type="number" pos:start="1355:41" pos:end="1355:41">0</literal></expr>)</condition> <block pos:start="1355:44" pos:end="1361:29">{<block_content pos:start="1357:33" pos:end="1359:49">

                                <expr_stmt pos:start="1357:33" pos:end="1357:61"><expr pos:start="1357:33" pos:end="1357:60"><name pos:start="1357:33" pos:end="1357:35">imm</name> <operator pos:start="1357:37" pos:end="1357:37">=</operator> <operator pos:start="1357:39" pos:end="1357:39">(</operator><literal type="number" pos:start="1357:40" pos:end="1357:44">0xffu</literal> <operator pos:start="1357:46" pos:end="1357:47">&gt;&gt;</operator> <operator pos:start="1357:49" pos:end="1357:49">(</operator><literal type="number" pos:start="1357:50" pos:end="1357:52">8</literal> <operator pos:start="1357:52" pos:end="1357:52">-</operator> <name pos:start="1357:54" pos:end="1357:58">shift</name><operator pos:start="1357:59" pos:end="1357:59">)</operator><operator pos:start="1357:60" pos:end="1357:60">)</operator></expr>;</expr_stmt>

                                <expr_stmt pos:start="1359:33" pos:end="1359:49"><expr pos:start="1359:33" pos:end="1359:48"><name pos:start="1359:33" pos:end="1359:35">imm</name> <operator pos:start="1359:37" pos:end="1359:38">|=</operator> <name pos:start="1359:40" pos:end="1359:42">imm</name> <operator pos:start="1359:44" pos:end="1359:45">&lt;&lt;</operator> <literal type="number" pos:start="1359:47" pos:end="1359:48">16</literal></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1361:31" pos:end="1365:29">else <block pos:start="1361:36" pos:end="1365:29">{<block_content pos:start="1363:33" pos:end="1363:61">

                                <expr_stmt pos:start="1363:33" pos:end="1363:61"><expr pos:start="1363:33" pos:end="1363:60"><name pos:start="1363:33" pos:end="1363:35">imm</name> <operator pos:start="1363:37" pos:end="1363:37">=</operator> <literal type="number" pos:start="1363:39" pos:end="1363:44">0xffff</literal> <operator pos:start="1363:46" pos:end="1363:47">&gt;&gt;</operator> <operator pos:start="1363:49" pos:end="1363:49">(</operator><literal type="number" pos:start="1363:50" pos:end="1363:53">16</literal> <operator pos:start="1363:53" pos:end="1363:53">-</operator> <name pos:start="1363:55" pos:end="1363:59">shift</name><operator pos:start="1363:60" pos:end="1363:60">)</operator></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                            <expr_stmt pos:start="1367:29" pos:end="1367:66"><expr pos:start="1367:29" pos:end="1367:65"><name pos:start="1367:29" pos:end="1367:33">imm64</name> <operator pos:start="1367:35" pos:end="1367:35">=</operator> <name pos:start="1367:37" pos:end="1367:39">imm</name> <operator pos:start="1367:41" pos:end="1367:41">|</operator> <operator pos:start="1367:43" pos:end="1367:43">(</operator><operator pos:start="1367:44" pos:end="1367:44">(</operator><operator pos:start="1367:45" pos:end="1367:45">(</operator><name pos:start="1367:46" pos:end="1367:53">uint64_t</name><operator pos:start="1367:54" pos:end="1367:54">)</operator><name pos:start="1367:55" pos:end="1367:57">imm</name><operator pos:start="1367:58" pos:end="1367:58">)</operator> <operator pos:start="1367:60" pos:end="1367:61">&lt;&lt;</operator> <literal type="number" pos:start="1367:63" pos:end="1367:64">32</literal><operator pos:start="1367:65" pos:end="1367:65">)</operator></expr>;</expr_stmt>

                            <expr_stmt pos:start="1369:29" pos:end="1369:68"><expr pos:start="1369:29" pos:end="1369:67"><call pos:start="1369:29" pos:end="1369:67"><name pos:start="1369:29" pos:end="1369:44">tcg_gen_andi_i64</name><argument_list pos:start="1369:45" pos:end="1369:67">(<argument pos:start="1369:46" pos:end="1369:51"><expr pos:start="1369:46" pos:end="1369:51"><name pos:start="1369:46" pos:end="1369:51">cpu_V0</name></expr></argument>, <argument pos:start="1369:54" pos:end="1369:59"><expr pos:start="1369:54" pos:end="1369:59"><name pos:start="1369:54" pos:end="1369:59">cpu_V0</name></expr></argument>, <argument pos:start="1369:62" pos:end="1369:66"><expr pos:start="1369:62" pos:end="1369:66"><name pos:start="1369:62" pos:end="1369:66">imm64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="1375:21" pos:end="1375:56"><expr pos:start="1375:21" pos:end="1375:55"><call pos:start="1375:21" pos:end="1375:55"><name pos:start="1375:21" pos:end="1375:36">neon_store_reg64</name><argument_list pos:start="1375:37" pos:end="1375:55">(<argument pos:start="1375:38" pos:end="1375:43"><expr pos:start="1375:38" pos:end="1375:43"><name pos:start="1375:38" pos:end="1375:43">cpu_V0</name></expr></argument>, <argument pos:start="1375:46" pos:end="1375:54"><expr pos:start="1375:46" pos:end="1375:54"><name pos:start="1375:46" pos:end="1375:47">rd</name> <operator pos:start="1375:49" pos:end="1375:49">+</operator> <name pos:start="1375:51" pos:end="1375:54">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <if type="elseif" pos:start="1379:15" pos:end="1421:13">else if <condition pos:start="1379:23" pos:end="1379:32">(<expr pos:start="1379:24" pos:end="1379:31"><name pos:start="1379:24" pos:end="1379:25">op</name> <operator pos:start="1379:27" pos:end="1379:28">&gt;=</operator> <literal type="number" pos:start="1379:30" pos:end="1379:31">14</literal></expr>)</condition> <block pos:start="1379:34" pos:end="1421:13">{<block_content pos:start="1389:17" pos:end="1419:17">

                <comment type="block" pos:start="1381:17" pos:end="1381:40">/* VCVT fixed-point.  */</comment>

                <comment type="block" pos:start="1383:17" pos:end="1387:19">/* We have already masked out the must-be-1 top bit of imm6,

                 * hence this 32-shift where the ARM ARM has 64-imm6.

                 */</comment>

                <expr_stmt pos:start="1389:17" pos:end="1389:35"><expr pos:start="1389:17" pos:end="1389:34"><name pos:start="1389:17" pos:end="1389:21">shift</name> <operator pos:start="1389:23" pos:end="1389:23">=</operator> <literal type="number" pos:start="1389:25" pos:end="1389:28">32</literal> <operator pos:start="1389:28" pos:end="1389:28">-</operator> <name pos:start="1389:30" pos:end="1389:34">shift</name></expr>;</expr_stmt>

                <for pos:start="1391:17" pos:end="1419:17">for <control pos:start="1391:21" pos:end="1391:58">(<init pos:start="1391:22" pos:end="1391:30"><expr pos:start="1391:22" pos:end="1391:29"><name pos:start="1391:22" pos:end="1391:25">pass</name> <operator pos:start="1391:27" pos:end="1391:27">=</operator> <literal type="number" pos:start="1391:29" pos:end="1391:29">0</literal></expr>;</init> <condition pos:start="1391:32" pos:end="1391:50"><expr pos:start="1391:32" pos:end="1391:49"><name pos:start="1391:32" pos:end="1391:35">pass</name> <operator pos:start="1391:37" pos:end="1391:37">&lt;</operator> <operator pos:start="1391:39" pos:end="1391:39">(</operator><ternary pos:start="1391:40" pos:end="1391:48"><condition pos:start="1391:40" pos:end="1391:42"><expr pos:start="1391:40" pos:end="1391:40"><name pos:start="1391:40" pos:end="1391:40">q</name></expr> ?</condition><then pos:start="1391:44" pos:end="1391:44"> <expr pos:start="1391:44" pos:end="1391:44"><literal type="number" pos:start="1391:44" pos:end="1391:44">4</literal></expr> </then><else pos:start="1391:46" pos:end="1391:48">: <expr pos:start="1391:48" pos:end="1391:48"><literal type="number" pos:start="1391:48" pos:end="1391:48">2</literal></expr></else></ternary><operator pos:start="1391:49" pos:end="1391:49">)</operator></expr>;</condition> <incr pos:start="1391:52" pos:end="1391:57"><expr pos:start="1391:52" pos:end="1391:57"><name pos:start="1391:52" pos:end="1391:55">pass</name><operator pos:start="1391:56" pos:end="1391:57">++</operator></expr></incr>)</control> <block pos:start="1391:60" pos:end="1419:17">{<block_content pos:start="1393:21" pos:end="1417:80">

                    <expr_stmt pos:start="1393:21" pos:end="1393:80"><expr pos:start="1393:21" pos:end="1393:79"><call pos:start="1393:21" pos:end="1393:79"><name pos:start="1393:21" pos:end="1393:34">tcg_gen_ld_f32</name><argument_list pos:start="1393:35" pos:end="1393:79">(<argument pos:start="1393:36" pos:end="1393:42"><expr pos:start="1393:36" pos:end="1393:42"><name pos:start="1393:36" pos:end="1393:42">cpu_F0s</name></expr></argument>, <argument pos:start="1393:45" pos:end="1393:51"><expr pos:start="1393:45" pos:end="1393:51"><name pos:start="1393:45" pos:end="1393:51">cpu_env</name></expr></argument>, <argument pos:start="1393:54" pos:end="1393:78"><expr pos:start="1393:54" pos:end="1393:78"><call pos:start="1393:54" pos:end="1393:78"><name pos:start="1393:54" pos:end="1393:68">neon_reg_offset</name><argument_list pos:start="1393:69" pos:end="1393:78">(<argument pos:start="1393:70" pos:end="1393:71"><expr pos:start="1393:70" pos:end="1393:71"><name pos:start="1393:70" pos:end="1393:71">rm</name></expr></argument>, <argument pos:start="1393:74" pos:end="1393:77"><expr pos:start="1393:74" pos:end="1393:77"><name pos:start="1393:74" pos:end="1393:77">pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1395:21" pos:end="1415:21"><if pos:start="1395:21" pos:end="1405:21">if <condition pos:start="1395:24" pos:end="1395:34">(<expr pos:start="1395:25" pos:end="1395:33"><operator pos:start="1395:25" pos:end="1395:25">!</operator><operator pos:start="1395:26" pos:end="1395:26">(</operator><name pos:start="1395:27" pos:end="1395:28">op</name> <operator pos:start="1395:30" pos:end="1395:30">&amp;</operator> <literal type="number" pos:start="1395:32" pos:end="1395:32">1</literal><operator pos:start="1395:33" pos:end="1395:33">)</operator></expr>)</condition> <block pos:start="1395:36" pos:end="1405:21">{<block_content pos:start="1397:25" pos:end="1403:51">

                        <if_stmt pos:start="1397:25" pos:end="1403:51"><if pos:start="1397:25" pos:end="1399:51">if <condition pos:start="1397:28" pos:end="1397:30">(<expr pos:start="1397:29" pos:end="1397:29"><name pos:start="1397:29" pos:end="1397:29">u</name></expr>)</condition><block type="pseudo" pos:start="1399:29" pos:end="1399:51"><block_content pos:start="1399:29" pos:end="1399:51">

                            <expr_stmt pos:start="1399:29" pos:end="1399:51"><expr pos:start="1399:29" pos:end="1399:50"><call pos:start="1399:29" pos:end="1399:50"><name pos:start="1399:29" pos:end="1399:40">gen_vfp_ulto</name><argument_list pos:start="1399:41" pos:end="1399:50">(<argument pos:start="1399:42" pos:end="1399:42"><expr pos:start="1399:42" pos:end="1399:42"><literal type="number" pos:start="1399:42" pos:end="1399:42">0</literal></expr></argument>, <argument pos:start="1399:45" pos:end="1399:49"><expr pos:start="1399:45" pos:end="1399:49"><name pos:start="1399:45" pos:end="1399:49">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="1401:25" pos:end="1403:51">else<block type="pseudo" pos:start="1403:29" pos:end="1403:51"><block_content pos:start="1403:29" pos:end="1403:51">

                            <expr_stmt pos:start="1403:29" pos:end="1403:51"><expr pos:start="1403:29" pos:end="1403:50"><call pos:start="1403:29" pos:end="1403:50"><name pos:start="1403:29" pos:end="1403:40">gen_vfp_slto</name><argument_list pos:start="1403:41" pos:end="1403:50">(<argument pos:start="1403:42" pos:end="1403:42"><expr pos:start="1403:42" pos:end="1403:42"><literal type="number" pos:start="1403:42" pos:end="1403:42">0</literal></expr></argument>, <argument pos:start="1403:45" pos:end="1403:49"><expr pos:start="1403:45" pos:end="1403:49"><name pos:start="1403:45" pos:end="1403:49">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="1405:23" pos:end="1415:21">else <block pos:start="1405:28" pos:end="1415:21">{<block_content pos:start="1407:25" pos:end="1413:51">

                        <if_stmt pos:start="1407:25" pos:end="1413:51"><if pos:start="1407:25" pos:end="1409:51">if <condition pos:start="1407:28" pos:end="1407:30">(<expr pos:start="1407:29" pos:end="1407:29"><name pos:start="1407:29" pos:end="1407:29">u</name></expr>)</condition><block type="pseudo" pos:start="1409:29" pos:end="1409:51"><block_content pos:start="1409:29" pos:end="1409:51">

                            <expr_stmt pos:start="1409:29" pos:end="1409:51"><expr pos:start="1409:29" pos:end="1409:50"><call pos:start="1409:29" pos:end="1409:50"><name pos:start="1409:29" pos:end="1409:40">gen_vfp_toul</name><argument_list pos:start="1409:41" pos:end="1409:50">(<argument pos:start="1409:42" pos:end="1409:42"><expr pos:start="1409:42" pos:end="1409:42"><literal type="number" pos:start="1409:42" pos:end="1409:42">0</literal></expr></argument>, <argument pos:start="1409:45" pos:end="1409:49"><expr pos:start="1409:45" pos:end="1409:49"><name pos:start="1409:45" pos:end="1409:49">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="1411:25" pos:end="1413:51">else<block type="pseudo" pos:start="1413:29" pos:end="1413:51"><block_content pos:start="1413:29" pos:end="1413:51">

                            <expr_stmt pos:start="1413:29" pos:end="1413:51"><expr pos:start="1413:29" pos:end="1413:50"><call pos:start="1413:29" pos:end="1413:50"><name pos:start="1413:29" pos:end="1413:40">gen_vfp_tosl</name><argument_list pos:start="1413:41" pos:end="1413:50">(<argument pos:start="1413:42" pos:end="1413:42"><expr pos:start="1413:42" pos:end="1413:42"><literal type="number" pos:start="1413:42" pos:end="1413:42">0</literal></expr></argument>, <argument pos:start="1413:45" pos:end="1413:49"><expr pos:start="1413:45" pos:end="1413:49"><name pos:start="1413:45" pos:end="1413:49">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="1417:21" pos:end="1417:80"><expr pos:start="1417:21" pos:end="1417:79"><call pos:start="1417:21" pos:end="1417:79"><name pos:start="1417:21" pos:end="1417:34">tcg_gen_st_f32</name><argument_list pos:start="1417:35" pos:end="1417:79">(<argument pos:start="1417:36" pos:end="1417:42"><expr pos:start="1417:36" pos:end="1417:42"><name pos:start="1417:36" pos:end="1417:42">cpu_F0s</name></expr></argument>, <argument pos:start="1417:45" pos:end="1417:51"><expr pos:start="1417:45" pos:end="1417:51"><name pos:start="1417:45" pos:end="1417:51">cpu_env</name></expr></argument>, <argument pos:start="1417:54" pos:end="1417:78"><expr pos:start="1417:54" pos:end="1417:78"><call pos:start="1417:54" pos:end="1417:78"><name pos:start="1417:54" pos:end="1417:68">neon_reg_offset</name><argument_list pos:start="1417:69" pos:end="1417:78">(<argument pos:start="1417:70" pos:end="1417:71"><expr pos:start="1417:70" pos:end="1417:71"><name pos:start="1417:70" pos:end="1417:71">rd</name></expr></argument>, <argument pos:start="1417:74" pos:end="1417:77"><expr pos:start="1417:74" pos:end="1417:77"><name pos:start="1417:74" pos:end="1417:77">pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="1421:15" pos:end="1425:13">else <block pos:start="1421:20" pos:end="1425:13">{<block_content pos:start="1423:17" pos:end="1423:25">

                <return pos:start="1423:17" pos:end="1423:25">return <expr pos:start="1423:24" pos:end="1423:24"><literal type="number" pos:start="1423:24" pos:end="1423:24">1</literal></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="1427:11" pos:end="1571:9">else <block pos:start="1427:16" pos:end="1571:9">{<block_content pos:start="1429:13" pos:end="1569:13"> <comment type="block" pos:start="1427:18" pos:end="1427:47">/* (insn &amp; 0x00380080) == 0 */</comment>

            <decl_stmt pos:start="1429:13" pos:end="1429:23"><decl pos:start="1429:13" pos:end="1429:22"><type pos:start="1429:13" pos:end="1429:15"><name pos:start="1429:13" pos:end="1429:15">int</name></type> <name pos:start="1429:17" pos:end="1429:22">invert</name></decl>;</decl_stmt>



            <expr_stmt pos:start="1433:13" pos:end="1433:35"><expr pos:start="1433:13" pos:end="1433:34"><name pos:start="1433:13" pos:end="1433:14">op</name> <operator pos:start="1433:16" pos:end="1433:16">=</operator> <operator pos:start="1433:18" pos:end="1433:18">(</operator><name pos:start="1433:19" pos:end="1433:22">insn</name> <operator pos:start="1433:24" pos:end="1433:25">&gt;&gt;</operator> <literal type="number" pos:start="1433:27" pos:end="1433:27">8</literal><operator pos:start="1433:28" pos:end="1433:28">)</operator> <operator pos:start="1433:30" pos:end="1433:30">&amp;</operator> <literal type="number" pos:start="1433:32" pos:end="1433:34">0xf</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="1435:13" pos:end="1435:46">/* One register and immediate.  */</comment>

            <expr_stmt pos:start="1437:13" pos:end="1437:66"><expr pos:start="1437:13" pos:end="1437:65"><name pos:start="1437:13" pos:end="1437:15">imm</name> <operator pos:start="1437:17" pos:end="1437:17">=</operator> <operator pos:start="1437:19" pos:end="1437:19">(</operator><name pos:start="1437:20" pos:end="1437:20">u</name> <operator pos:start="1437:22" pos:end="1437:23">&lt;&lt;</operator> <literal type="number" pos:start="1437:25" pos:end="1437:25">7</literal><operator pos:start="1437:26" pos:end="1437:26">)</operator> <operator pos:start="1437:28" pos:end="1437:28">|</operator> <operator pos:start="1437:30" pos:end="1437:30">(</operator><operator pos:start="1437:31" pos:end="1437:31">(</operator><name pos:start="1437:32" pos:end="1437:35">insn</name> <operator pos:start="1437:37" pos:end="1437:38">&gt;&gt;</operator> <literal type="number" pos:start="1437:40" pos:end="1437:41">12</literal><operator pos:start="1437:42" pos:end="1437:42">)</operator> <operator pos:start="1437:44" pos:end="1437:44">&amp;</operator> <literal type="number" pos:start="1437:46" pos:end="1437:49">0x70</literal><operator pos:start="1437:50" pos:end="1437:50">)</operator> <operator pos:start="1437:52" pos:end="1437:52">|</operator> <operator pos:start="1437:54" pos:end="1437:54">(</operator><name pos:start="1437:55" pos:end="1437:58">insn</name> <operator pos:start="1437:60" pos:end="1437:60">&amp;</operator> <literal type="number" pos:start="1437:62" pos:end="1437:64">0xf</literal><operator pos:start="1437:65" pos:end="1437:65">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1439:13" pos:end="1439:44"><expr pos:start="1439:13" pos:end="1439:43"><name pos:start="1439:13" pos:end="1439:18">invert</name> <operator pos:start="1439:20" pos:end="1439:20">=</operator> <operator pos:start="1439:22" pos:end="1439:22">(</operator><name pos:start="1439:23" pos:end="1439:26">insn</name> <operator pos:start="1439:28" pos:end="1439:28">&amp;</operator> <operator pos:start="1439:30" pos:end="1439:30">(</operator><literal type="number" pos:start="1439:31" pos:end="1439:31">1</literal> <operator pos:start="1439:33" pos:end="1439:34">&lt;&lt;</operator> <literal type="number" pos:start="1439:36" pos:end="1439:36">5</literal><operator pos:start="1439:37" pos:end="1439:37">)</operator><operator pos:start="1439:38" pos:end="1439:38">)</operator> <operator pos:start="1439:40" pos:end="1439:41">!=</operator> <literal type="number" pos:start="1439:43" pos:end="1439:43">0</literal></expr>;</expr_stmt>

            <switch pos:start="1441:13" pos:end="1509:13">switch <condition pos:start="1441:20" pos:end="1441:23">(<expr pos:start="1441:21" pos:end="1441:22"><name pos:start="1441:21" pos:end="1441:22">op</name></expr>)</condition> <block pos:start="1441:25" pos:end="1509:13">{<block_content pos:start="1443:13" pos:end="1507:22">

            <case pos:start="1443:13" pos:end="1443:19">case <expr pos:start="1443:18" pos:end="1443:18"><literal type="number" pos:start="1443:18" pos:end="1443:18">0</literal></expr>:</case> <case pos:start="1443:21" pos:end="1443:27">case <expr pos:start="1443:26" pos:end="1443:26"><literal type="number" pos:start="1443:26" pos:end="1443:26">1</literal></expr>:</case>

                <comment type="block" pos:start="1445:17" pos:end="1445:27">/* no-op */</comment>

                <break pos:start="1447:17" pos:end="1447:22">break;</break>

            <case pos:start="1449:13" pos:end="1449:19">case <expr pos:start="1449:18" pos:end="1449:18"><literal type="number" pos:start="1449:18" pos:end="1449:18">2</literal></expr>:</case> <case pos:start="1449:21" pos:end="1449:27">case <expr pos:start="1449:26" pos:end="1449:26"><literal type="number" pos:start="1449:26" pos:end="1449:26">3</literal></expr>:</case>

                <expr_stmt pos:start="1451:17" pos:end="1451:26"><expr pos:start="1451:17" pos:end="1451:25"><name pos:start="1451:17" pos:end="1451:19">imm</name> <operator pos:start="1451:21" pos:end="1451:23">&lt;&lt;=</operator> <literal type="number" pos:start="1451:25" pos:end="1451:25">8</literal></expr>;</expr_stmt>

                <break pos:start="1453:17" pos:end="1453:22">break;</break>

            <case pos:start="1455:13" pos:end="1455:19">case <expr pos:start="1455:18" pos:end="1455:18"><literal type="number" pos:start="1455:18" pos:end="1455:18">4</literal></expr>:</case> <case pos:start="1455:21" pos:end="1455:27">case <expr pos:start="1455:26" pos:end="1455:26"><literal type="number" pos:start="1455:26" pos:end="1455:26">5</literal></expr>:</case>

                <expr_stmt pos:start="1457:17" pos:end="1457:27"><expr pos:start="1457:17" pos:end="1457:26"><name pos:start="1457:17" pos:end="1457:19">imm</name> <operator pos:start="1457:21" pos:end="1457:23">&lt;&lt;=</operator> <literal type="number" pos:start="1457:25" pos:end="1457:26">16</literal></expr>;</expr_stmt>

                <break pos:start="1459:17" pos:end="1459:22">break;</break>

            <case pos:start="1461:13" pos:end="1461:19">case <expr pos:start="1461:18" pos:end="1461:18"><literal type="number" pos:start="1461:18" pos:end="1461:18">6</literal></expr>:</case> <case pos:start="1461:21" pos:end="1461:27">case <expr pos:start="1461:26" pos:end="1461:26"><literal type="number" pos:start="1461:26" pos:end="1461:26">7</literal></expr>:</case>

                <expr_stmt pos:start="1463:17" pos:end="1463:27"><expr pos:start="1463:17" pos:end="1463:26"><name pos:start="1463:17" pos:end="1463:19">imm</name> <operator pos:start="1463:21" pos:end="1463:23">&lt;&lt;=</operator> <literal type="number" pos:start="1463:25" pos:end="1463:26">24</literal></expr>;</expr_stmt>

                <break pos:start="1465:17" pos:end="1465:22">break;</break>

            <case pos:start="1467:13" pos:end="1467:19">case <expr pos:start="1467:18" pos:end="1467:18"><literal type="number" pos:start="1467:18" pos:end="1467:18">8</literal></expr>:</case> <case pos:start="1467:21" pos:end="1467:27">case <expr pos:start="1467:26" pos:end="1467:26"><literal type="number" pos:start="1467:26" pos:end="1467:26">9</literal></expr>:</case>

                <expr_stmt pos:start="1469:17" pos:end="1469:33"><expr pos:start="1469:17" pos:end="1469:32"><name pos:start="1469:17" pos:end="1469:19">imm</name> <operator pos:start="1469:21" pos:end="1469:22">|=</operator> <name pos:start="1469:24" pos:end="1469:26">imm</name> <operator pos:start="1469:28" pos:end="1469:29">&lt;&lt;</operator> <literal type="number" pos:start="1469:31" pos:end="1469:32">16</literal></expr>;</expr_stmt>

                <break pos:start="1471:17" pos:end="1471:22">break;</break>

            <case pos:start="1473:13" pos:end="1473:20">case <expr pos:start="1473:18" pos:end="1473:19"><literal type="number" pos:start="1473:18" pos:end="1473:19">10</literal></expr>:</case> <case pos:start="1473:22" pos:end="1473:29">case <expr pos:start="1473:27" pos:end="1473:28"><literal type="number" pos:start="1473:27" pos:end="1473:28">11</literal></expr>:</case>

                <expr_stmt pos:start="1475:17" pos:end="1475:47"><expr pos:start="1475:17" pos:end="1475:46"><name pos:start="1475:17" pos:end="1475:19">imm</name> <operator pos:start="1475:21" pos:end="1475:21">=</operator> <operator pos:start="1475:23" pos:end="1475:23">(</operator><name pos:start="1475:24" pos:end="1475:26">imm</name> <operator pos:start="1475:28" pos:end="1475:29">&lt;&lt;</operator> <literal type="number" pos:start="1475:31" pos:end="1475:31">8</literal><operator pos:start="1475:32" pos:end="1475:32">)</operator> <operator pos:start="1475:34" pos:end="1475:34">|</operator> <operator pos:start="1475:36" pos:end="1475:36">(</operator><name pos:start="1475:37" pos:end="1475:39">imm</name> <operator pos:start="1475:41" pos:end="1475:42">&lt;&lt;</operator> <literal type="number" pos:start="1475:44" pos:end="1475:45">24</literal><operator pos:start="1475:46" pos:end="1475:46">)</operator></expr>;</expr_stmt>

                <break pos:start="1477:17" pos:end="1477:22">break;</break>

            <case pos:start="1479:13" pos:end="1479:20">case <expr pos:start="1479:18" pos:end="1479:19"><literal type="number" pos:start="1479:18" pos:end="1479:19">12</literal></expr>:</case>

                <expr_stmt pos:start="1481:17" pos:end="1481:40"><expr pos:start="1481:17" pos:end="1481:39"><name pos:start="1481:17" pos:end="1481:19">imm</name> <operator pos:start="1481:21" pos:end="1481:21">=</operator> <operator pos:start="1481:23" pos:end="1481:23">(</operator><name pos:start="1481:24" pos:end="1481:26">imm</name> <operator pos:start="1481:28" pos:end="1481:29">&lt;&lt;</operator> <literal type="number" pos:start="1481:31" pos:end="1481:31">8</literal><operator pos:start="1481:32" pos:end="1481:32">)</operator> <operator pos:start="1481:34" pos:end="1481:34">|</operator> <literal type="number" pos:start="1481:36" pos:end="1481:39">0xff</literal></expr>;</expr_stmt>

                <break pos:start="1483:17" pos:end="1483:22">break;</break>

            <case pos:start="1485:13" pos:end="1485:20">case <expr pos:start="1485:18" pos:end="1485:19"><literal type="number" pos:start="1485:18" pos:end="1485:19">13</literal></expr>:</case>

                <expr_stmt pos:start="1487:17" pos:end="1487:43"><expr pos:start="1487:17" pos:end="1487:42"><name pos:start="1487:17" pos:end="1487:19">imm</name> <operator pos:start="1487:21" pos:end="1487:21">=</operator> <operator pos:start="1487:23" pos:end="1487:23">(</operator><name pos:start="1487:24" pos:end="1487:26">imm</name> <operator pos:start="1487:28" pos:end="1487:29">&lt;&lt;</operator> <literal type="number" pos:start="1487:31" pos:end="1487:32">16</literal><operator pos:start="1487:33" pos:end="1487:33">)</operator> <operator pos:start="1487:35" pos:end="1487:35">|</operator> <literal type="number" pos:start="1487:37" pos:end="1487:42">0xffff</literal></expr>;</expr_stmt>

                <break pos:start="1489:17" pos:end="1489:22">break;</break>

            <case pos:start="1491:13" pos:end="1491:20">case <expr pos:start="1491:18" pos:end="1491:19"><literal type="number" pos:start="1491:18" pos:end="1491:19">14</literal></expr>:</case>

                <expr_stmt pos:start="1493:17" pos:end="1493:62"><expr pos:start="1493:17" pos:end="1493:61"><name pos:start="1493:17" pos:end="1493:19">imm</name> <operator pos:start="1493:21" pos:end="1493:22">|=</operator> <operator pos:start="1493:24" pos:end="1493:24">(</operator><name pos:start="1493:25" pos:end="1493:27">imm</name> <operator pos:start="1493:29" pos:end="1493:30">&lt;&lt;</operator> <literal type="number" pos:start="1493:32" pos:end="1493:32">8</literal><operator pos:start="1493:33" pos:end="1493:33">)</operator> <operator pos:start="1493:35" pos:end="1493:35">|</operator> <operator pos:start="1493:37" pos:end="1493:37">(</operator><name pos:start="1493:38" pos:end="1493:40">imm</name> <operator pos:start="1493:42" pos:end="1493:43">&lt;&lt;</operator> <literal type="number" pos:start="1493:45" pos:end="1493:46">16</literal><operator pos:start="1493:47" pos:end="1493:47">)</operator> <operator pos:start="1493:49" pos:end="1493:49">|</operator> <operator pos:start="1493:51" pos:end="1493:51">(</operator><name pos:start="1493:52" pos:end="1493:54">imm</name> <operator pos:start="1493:56" pos:end="1493:57">&lt;&lt;</operator> <literal type="number" pos:start="1493:59" pos:end="1493:60">24</literal><operator pos:start="1493:61" pos:end="1493:61">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="1495:17" pos:end="1497:31"><if pos:start="1495:17" pos:end="1497:31">if <condition pos:start="1495:20" pos:end="1495:27">(<expr pos:start="1495:21" pos:end="1495:26"><name pos:start="1495:21" pos:end="1495:26">invert</name></expr>)</condition><block type="pseudo" pos:start="1497:21" pos:end="1497:31"><block_content pos:start="1497:21" pos:end="1497:31">

                    <expr_stmt pos:start="1497:21" pos:end="1497:31"><expr pos:start="1497:21" pos:end="1497:30"><name pos:start="1497:21" pos:end="1497:23">imm</name> <operator pos:start="1497:25" pos:end="1497:25">=</operator> <operator pos:start="1497:27" pos:end="1497:27">~</operator><name pos:start="1497:28" pos:end="1497:30">imm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <break pos:start="1499:17" pos:end="1499:22">break;</break>

            <case pos:start="1501:13" pos:end="1501:20">case <expr pos:start="1501:18" pos:end="1501:19"><literal type="number" pos:start="1501:18" pos:end="1501:19">15</literal></expr>:</case>

                <expr_stmt pos:start="1503:17" pos:end="1505:66"><expr pos:start="1503:17" pos:end="1505:65"><name pos:start="1503:17" pos:end="1503:19">imm</name> <operator pos:start="1503:21" pos:end="1503:21">=</operator> <operator pos:start="1503:23" pos:end="1503:23">(</operator><operator pos:start="1503:24" pos:end="1503:24">(</operator><name pos:start="1503:25" pos:end="1503:27">imm</name> <operator pos:start="1503:29" pos:end="1503:29">&amp;</operator> <literal type="number" pos:start="1503:31" pos:end="1503:34">0x80</literal><operator pos:start="1503:35" pos:end="1503:35">)</operator> <operator pos:start="1503:37" pos:end="1503:38">&lt;&lt;</operator> <literal type="number" pos:start="1503:40" pos:end="1503:41">24</literal><operator pos:start="1503:42" pos:end="1503:42">)</operator> <operator pos:start="1503:44" pos:end="1503:44">|</operator> <operator pos:start="1503:46" pos:end="1503:46">(</operator><operator pos:start="1503:47" pos:end="1503:47">(</operator><name pos:start="1503:48" pos:end="1503:50">imm</name> <operator pos:start="1503:52" pos:end="1503:52">&amp;</operator> <literal type="number" pos:start="1503:54" pos:end="1503:57">0x3f</literal><operator pos:start="1503:58" pos:end="1503:58">)</operator> <operator pos:start="1503:60" pos:end="1503:61">&lt;&lt;</operator> <literal type="number" pos:start="1503:63" pos:end="1503:64">19</literal><operator pos:start="1503:65" pos:end="1503:65">)</operator>

                      <operator pos:start="1505:23" pos:end="1505:23">|</operator> <operator pos:start="1505:25" pos:end="1505:25">(</operator><ternary pos:start="1505:26" pos:end="1505:64"><condition pos:start="1505:26" pos:end="1505:39"><expr pos:start="1505:26" pos:end="1505:37"><operator pos:start="1505:26" pos:end="1505:26">(</operator><name pos:start="1505:27" pos:end="1505:29">imm</name> <operator pos:start="1505:31" pos:end="1505:31">&amp;</operator> <literal type="number" pos:start="1505:33" pos:end="1505:36">0x40</literal><operator pos:start="1505:37" pos:end="1505:37">)</operator></expr> ?</condition><then pos:start="1505:41" pos:end="1505:52"> <expr pos:start="1505:41" pos:end="1505:52"><operator pos:start="1505:41" pos:end="1505:41">(</operator><literal type="number" pos:start="1505:42" pos:end="1505:45">0x1f</literal> <operator pos:start="1505:47" pos:end="1505:48">&lt;&lt;</operator> <literal type="number" pos:start="1505:50" pos:end="1505:51">25</literal><operator pos:start="1505:52" pos:end="1505:52">)</operator></expr> </then><else pos:start="1505:54" pos:end="1505:64">: <expr pos:start="1505:56" pos:end="1505:64"><operator pos:start="1505:56" pos:end="1505:56">(</operator><literal type="number" pos:start="1505:57" pos:end="1505:57">1</literal> <operator pos:start="1505:59" pos:end="1505:60">&lt;&lt;</operator> <literal type="number" pos:start="1505:62" pos:end="1505:63">30</literal><operator pos:start="1505:64" pos:end="1505:64">)</operator></expr></else></ternary><operator pos:start="1505:65" pos:end="1505:65">)</operator></expr>;</expr_stmt>

                <break pos:start="1507:17" pos:end="1507:22">break;</break>

            </block_content>}</block></switch>

            <if_stmt pos:start="1511:13" pos:end="1513:27"><if pos:start="1511:13" pos:end="1513:27">if <condition pos:start="1511:16" pos:end="1511:23">(<expr pos:start="1511:17" pos:end="1511:22"><name pos:start="1511:17" pos:end="1511:22">invert</name></expr>)</condition><block type="pseudo" pos:start="1513:17" pos:end="1513:27"><block_content pos:start="1513:17" pos:end="1513:27">

                <expr_stmt pos:start="1513:17" pos:end="1513:27"><expr pos:start="1513:17" pos:end="1513:26"><name pos:start="1513:17" pos:end="1513:19">imm</name> <operator pos:start="1513:21" pos:end="1513:21">=</operator> <operator pos:start="1513:23" pos:end="1513:23">~</operator><name pos:start="1513:24" pos:end="1513:26">imm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <for pos:start="1517:13" pos:end="1569:13">for <control pos:start="1517:17" pos:end="1517:54">(<init pos:start="1517:18" pos:end="1517:26"><expr pos:start="1517:18" pos:end="1517:25"><name pos:start="1517:18" pos:end="1517:21">pass</name> <operator pos:start="1517:23" pos:end="1517:23">=</operator> <literal type="number" pos:start="1517:25" pos:end="1517:25">0</literal></expr>;</init> <condition pos:start="1517:28" pos:end="1517:46"><expr pos:start="1517:28" pos:end="1517:45"><name pos:start="1517:28" pos:end="1517:31">pass</name> <operator pos:start="1517:33" pos:end="1517:33">&lt;</operator> <operator pos:start="1517:35" pos:end="1517:35">(</operator><ternary pos:start="1517:36" pos:end="1517:44"><condition pos:start="1517:36" pos:end="1517:38"><expr pos:start="1517:36" pos:end="1517:36"><name pos:start="1517:36" pos:end="1517:36">q</name></expr> ?</condition><then pos:start="1517:40" pos:end="1517:40"> <expr pos:start="1517:40" pos:end="1517:40"><literal type="number" pos:start="1517:40" pos:end="1517:40">4</literal></expr> </then><else pos:start="1517:42" pos:end="1517:44">: <expr pos:start="1517:44" pos:end="1517:44"><literal type="number" pos:start="1517:44" pos:end="1517:44">2</literal></expr></else></ternary><operator pos:start="1517:45" pos:end="1517:45">)</operator></expr>;</condition> <incr pos:start="1517:48" pos:end="1517:53"><expr pos:start="1517:48" pos:end="1517:53"><name pos:start="1517:48" pos:end="1517:51">pass</name><operator pos:start="1517:52" pos:end="1517:53">++</operator></expr></incr>)</control> <block pos:start="1517:56" pos:end="1569:13">{<block_content pos:start="1519:17" pos:end="1567:46">

                <if_stmt pos:start="1519:17" pos:end="1565:17"><if pos:start="1519:17" pos:end="1537:17">if <condition pos:start="1519:20" pos:end="1519:38">(<expr pos:start="1519:21" pos:end="1519:37"><name pos:start="1519:21" pos:end="1519:22">op</name> <operator pos:start="1519:24" pos:end="1519:24">&amp;</operator> <literal type="number" pos:start="1519:26" pos:end="1519:26">1</literal> <operator pos:start="1519:28" pos:end="1519:29">&amp;&amp;</operator> <name pos:start="1519:31" pos:end="1519:32">op</name> <operator pos:start="1519:34" pos:end="1519:34">&lt;</operator> <literal type="number" pos:start="1519:36" pos:end="1519:37">12</literal></expr>)</condition> <block pos:start="1519:40" pos:end="1537:17">{<block_content pos:start="1521:21" pos:end="1535:21">

                    <expr_stmt pos:start="1521:21" pos:end="1521:50"><expr pos:start="1521:21" pos:end="1521:49"><name pos:start="1521:21" pos:end="1521:23">tmp</name> <operator pos:start="1521:25" pos:end="1521:25">=</operator> <call pos:start="1521:27" pos:end="1521:49"><name pos:start="1521:27" pos:end="1521:39">neon_load_reg</name><argument_list pos:start="1521:40" pos:end="1521:49">(<argument pos:start="1521:41" pos:end="1521:42"><expr pos:start="1521:41" pos:end="1521:42"><name pos:start="1521:41" pos:end="1521:42">rd</name></expr></argument>, <argument pos:start="1521:45" pos:end="1521:48"><expr pos:start="1521:45" pos:end="1521:48"><name pos:start="1521:45" pos:end="1521:48">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1523:21" pos:end="1535:21"><if pos:start="1523:21" pos:end="1531:21">if <condition pos:start="1523:24" pos:end="1523:31">(<expr pos:start="1523:25" pos:end="1523:30"><name pos:start="1523:25" pos:end="1523:30">invert</name></expr>)</condition> <block pos:start="1523:33" pos:end="1531:21">{<block_content pos:start="1529:25" pos:end="1529:56">

                        <comment type="block" pos:start="1525:25" pos:end="1527:47">/* The immediate value has already been inverted, so

                           BIC becomes AND.  */</comment>

                        <expr_stmt pos:start="1529:25" pos:end="1529:56"><expr pos:start="1529:25" pos:end="1529:55"><call pos:start="1529:25" pos:end="1529:55"><name pos:start="1529:25" pos:end="1529:40">tcg_gen_andi_i32</name><argument_list pos:start="1529:41" pos:end="1529:55">(<argument pos:start="1529:42" pos:end="1529:44"><expr pos:start="1529:42" pos:end="1529:44"><name pos:start="1529:42" pos:end="1529:44">tmp</name></expr></argument>, <argument pos:start="1529:47" pos:end="1529:49"><expr pos:start="1529:47" pos:end="1529:49"><name pos:start="1529:47" pos:end="1529:49">tmp</name></expr></argument>, <argument pos:start="1529:52" pos:end="1529:54"><expr pos:start="1529:52" pos:end="1529:54"><name pos:start="1529:52" pos:end="1529:54">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1531:23" pos:end="1535:21">else <block pos:start="1531:28" pos:end="1535:21">{<block_content pos:start="1533:25" pos:end="1533:55">

                        <expr_stmt pos:start="1533:25" pos:end="1533:55"><expr pos:start="1533:25" pos:end="1533:54"><call pos:start="1533:25" pos:end="1533:54"><name pos:start="1533:25" pos:end="1533:39">tcg_gen_ori_i32</name><argument_list pos:start="1533:40" pos:end="1533:54">(<argument pos:start="1533:41" pos:end="1533:43"><expr pos:start="1533:41" pos:end="1533:43"><name pos:start="1533:41" pos:end="1533:43">tmp</name></expr></argument>, <argument pos:start="1533:46" pos:end="1533:48"><expr pos:start="1533:46" pos:end="1533:48"><name pos:start="1533:46" pos:end="1533:48">tmp</name></expr></argument>, <argument pos:start="1533:51" pos:end="1533:53"><expr pos:start="1533:51" pos:end="1533:53"><name pos:start="1533:51" pos:end="1533:53">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1537:19" pos:end="1565:17">else <block pos:start="1537:24" pos:end="1565:17">{<block_content pos:start="1541:21" pos:end="1563:21">

                    <comment type="block" pos:start="1539:21" pos:end="1539:38">/* VMOV, VMVN.  */</comment>

                    <expr_stmt pos:start="1541:21" pos:end="1541:36"><expr pos:start="1541:21" pos:end="1541:35"><name pos:start="1541:21" pos:end="1541:23">tmp</name> <operator pos:start="1541:25" pos:end="1541:25">=</operator> <call pos:start="1541:27" pos:end="1541:35"><name pos:start="1541:27" pos:end="1541:33">new_tmp</name><argument_list pos:start="1541:34" pos:end="1541:35">()</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="1543:21" pos:end="1563:21"><if pos:start="1543:21" pos:end="1559:21">if <condition pos:start="1543:24" pos:end="1543:43">(<expr pos:start="1543:25" pos:end="1543:42"><name pos:start="1543:25" pos:end="1543:26">op</name> <operator pos:start="1543:28" pos:end="1543:29">==</operator> <literal type="number" pos:start="1543:31" pos:end="1543:32">14</literal> <operator pos:start="1543:34" pos:end="1543:35">&amp;&amp;</operator> <name pos:start="1543:37" pos:end="1543:42">invert</name></expr>)</condition> <block pos:start="1543:45" pos:end="1559:21">{<block_content pos:start="1545:25" pos:end="1557:51">

                        <decl_stmt pos:start="1545:25" pos:end="1545:37"><decl pos:start="1545:25" pos:end="1545:36"><type pos:start="1545:25" pos:end="1545:32"><name pos:start="1545:25" pos:end="1545:32">uint32_t</name></type> <name pos:start="1545:34" pos:end="1545:36">val</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="1547:25" pos:end="1547:32"><expr pos:start="1547:25" pos:end="1547:31"><name pos:start="1547:25" pos:end="1547:27">val</name> <operator pos:start="1547:29" pos:end="1547:29">=</operator> <literal type="number" pos:start="1547:31" pos:end="1547:31">0</literal></expr>;</expr_stmt>

                        <for pos:start="1549:25" pos:end="1555:25">for <control pos:start="1549:29" pos:end="1549:47">(<init pos:start="1549:30" pos:end="1549:35"><expr pos:start="1549:30" pos:end="1549:34"><name pos:start="1549:30" pos:end="1549:30">n</name> <operator pos:start="1549:32" pos:end="1549:32">=</operator> <literal type="number" pos:start="1549:34" pos:end="1549:34">0</literal></expr>;</init> <condition pos:start="1549:37" pos:end="1549:42"><expr pos:start="1549:37" pos:end="1549:41"><name pos:start="1549:37" pos:end="1549:37">n</name> <operator pos:start="1549:39" pos:end="1549:39">&lt;</operator> <literal type="number" pos:start="1549:41" pos:end="1549:41">4</literal></expr>;</condition> <incr pos:start="1549:44" pos:end="1549:46"><expr pos:start="1549:44" pos:end="1549:46"><name pos:start="1549:44" pos:end="1549:44">n</name><operator pos:start="1549:45" pos:end="1549:46">++</operator></expr></incr>)</control> <block pos:start="1549:49" pos:end="1555:25">{<block_content pos:start="1551:29" pos:end="1553:55">

                            <if_stmt pos:start="1551:29" pos:end="1553:55"><if pos:start="1551:29" pos:end="1553:55">if <condition pos:start="1551:32" pos:end="1551:66">(<expr pos:start="1551:33" pos:end="1551:65"><name pos:start="1551:33" pos:end="1551:35">imm</name> <operator pos:start="1551:37" pos:end="1551:37">&amp;</operator> <operator pos:start="1551:39" pos:end="1551:39">(</operator><literal type="number" pos:start="1551:40" pos:end="1551:40">1</literal> <operator pos:start="1551:42" pos:end="1551:43">&lt;&lt;</operator> <operator pos:start="1551:45" pos:end="1551:45">(</operator><name pos:start="1551:46" pos:end="1551:46">n</name> <operator pos:start="1551:48" pos:end="1551:48">+</operator> <operator pos:start="1551:50" pos:end="1551:50">(</operator><name pos:start="1551:51" pos:end="1551:54">pass</name> <operator pos:start="1551:56" pos:end="1551:56">&amp;</operator> <literal type="number" pos:start="1551:58" pos:end="1551:58">1</literal><operator pos:start="1551:59" pos:end="1551:59">)</operator> <operator pos:start="1551:61" pos:end="1551:61">*</operator> <literal type="number" pos:start="1551:63" pos:end="1551:63">4</literal><operator pos:start="1551:64" pos:end="1551:64">)</operator><operator pos:start="1551:65" pos:end="1551:65">)</operator></expr>)</condition><block type="pseudo" pos:start="1553:33" pos:end="1553:55"><block_content pos:start="1553:33" pos:end="1553:55">

                                <expr_stmt pos:start="1553:33" pos:end="1553:55"><expr pos:start="1553:33" pos:end="1553:54"><name pos:start="1553:33" pos:end="1553:35">val</name> <operator pos:start="1553:37" pos:end="1553:38">|=</operator> <literal type="number" pos:start="1553:40" pos:end="1553:43">0xff</literal> <operator pos:start="1553:45" pos:end="1553:46">&lt;&lt;</operator> <operator pos:start="1553:48" pos:end="1553:48">(</operator><name pos:start="1553:49" pos:end="1553:49">n</name> <operator pos:start="1553:51" pos:end="1553:51">*</operator> <literal type="number" pos:start="1553:53" pos:end="1553:53">8</literal><operator pos:start="1553:54" pos:end="1553:54">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        </block_content>}</block></for>

                        <expr_stmt pos:start="1557:25" pos:end="1557:51"><expr pos:start="1557:25" pos:end="1557:50"><call pos:start="1557:25" pos:end="1557:50"><name pos:start="1557:25" pos:end="1557:40">tcg_gen_movi_i32</name><argument_list pos:start="1557:41" pos:end="1557:50">(<argument pos:start="1557:42" pos:end="1557:44"><expr pos:start="1557:42" pos:end="1557:44"><name pos:start="1557:42" pos:end="1557:44">tmp</name></expr></argument>, <argument pos:start="1557:47" pos:end="1557:49"><expr pos:start="1557:47" pos:end="1557:49"><name pos:start="1557:47" pos:end="1557:49">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1559:23" pos:end="1563:21">else <block pos:start="1559:28" pos:end="1563:21">{<block_content pos:start="1561:25" pos:end="1561:51">

                        <expr_stmt pos:start="1561:25" pos:end="1561:51"><expr pos:start="1561:25" pos:end="1561:50"><call pos:start="1561:25" pos:end="1561:50"><name pos:start="1561:25" pos:end="1561:40">tcg_gen_movi_i32</name><argument_list pos:start="1561:41" pos:end="1561:50">(<argument pos:start="1561:42" pos:end="1561:44"><expr pos:start="1561:42" pos:end="1561:44"><name pos:start="1561:42" pos:end="1561:44">tmp</name></expr></argument>, <argument pos:start="1561:47" pos:end="1561:49"><expr pos:start="1561:47" pos:end="1561:49"><name pos:start="1561:47" pos:end="1561:49">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1567:17" pos:end="1567:46"><expr pos:start="1567:17" pos:end="1567:45"><call pos:start="1567:17" pos:end="1567:45"><name pos:start="1567:17" pos:end="1567:30">neon_store_reg</name><argument_list pos:start="1567:31" pos:end="1567:45">(<argument pos:start="1567:32" pos:end="1567:33"><expr pos:start="1567:32" pos:end="1567:33"><name pos:start="1567:32" pos:end="1567:33">rd</name></expr></argument>, <argument pos:start="1567:36" pos:end="1567:39"><expr pos:start="1567:36" pos:end="1567:39"><name pos:start="1567:36" pos:end="1567:39">pass</name></expr></argument>, <argument pos:start="1567:42" pos:end="1567:44"><expr pos:start="1567:42" pos:end="1567:44"><name pos:start="1567:42" pos:end="1567:44">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="1573:7" pos:end="3161:5">else <block pos:start="1573:12" pos:end="3161:5">{<block_content pos:start="1575:9" pos:end="3159:9"> <comment type="block" pos:start="1573:14" pos:end="1573:52">/* (insn &amp; 0x00800010 == 0x00800000) */</comment>

        <if_stmt pos:start="1575:9" pos:end="3159:9"><if pos:start="1575:9" pos:end="2179:9">if <condition pos:start="1575:12" pos:end="1575:22">(<expr pos:start="1575:13" pos:end="1575:21"><name pos:start="1575:13" pos:end="1575:16">size</name> <operator pos:start="1575:18" pos:end="1575:19">!=</operator> <literal type="number" pos:start="1575:21" pos:end="1575:21">3</literal></expr>)</condition> <block pos:start="1575:24" pos:end="2179:9">{<block_content pos:start="1577:13" pos:end="2177:13">

            <expr_stmt pos:start="1577:13" pos:end="1577:35"><expr pos:start="1577:13" pos:end="1577:34"><name pos:start="1577:13" pos:end="1577:14">op</name> <operator pos:start="1577:16" pos:end="1577:16">=</operator> <operator pos:start="1577:18" pos:end="1577:18">(</operator><name pos:start="1577:19" pos:end="1577:22">insn</name> <operator pos:start="1577:24" pos:end="1577:25">&gt;&gt;</operator> <literal type="number" pos:start="1577:27" pos:end="1577:27">8</literal><operator pos:start="1577:28" pos:end="1577:28">)</operator> <operator pos:start="1577:30" pos:end="1577:30">&amp;</operator> <literal type="number" pos:start="1577:32" pos:end="1577:34">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1579:13" pos:end="2177:13"><if pos:start="1579:13" pos:end="1941:13">if <condition pos:start="1579:16" pos:end="1579:39">(<expr pos:start="1579:17" pos:end="1579:38"><operator pos:start="1579:17" pos:end="1579:17">(</operator><name pos:start="1579:18" pos:end="1579:21">insn</name> <operator pos:start="1579:23" pos:end="1579:23">&amp;</operator> <operator pos:start="1579:25" pos:end="1579:25">(</operator><literal type="number" pos:start="1579:26" pos:end="1579:26">1</literal> <operator pos:start="1579:28" pos:end="1579:29">&lt;&lt;</operator> <literal type="number" pos:start="1579:31" pos:end="1579:31">6</literal><operator pos:start="1579:32" pos:end="1579:32">)</operator><operator pos:start="1579:33" pos:end="1579:33">)</operator> <operator pos:start="1579:35" pos:end="1579:36">==</operator> <literal type="number" pos:start="1579:38" pos:end="1579:38">0</literal></expr>)</condition> <block pos:start="1579:41" pos:end="1941:13">{<block_content pos:start="1583:17" pos:end="1939:17">

                <comment type="block" pos:start="1581:17" pos:end="1581:60">/* Three registers of different lengths.  */</comment>

                <decl_stmt pos:start="1583:17" pos:end="1583:30"><decl pos:start="1583:17" pos:end="1583:29"><type pos:start="1583:17" pos:end="1583:19"><name pos:start="1583:17" pos:end="1583:19">int</name></type> <name pos:start="1583:21" pos:end="1583:29">src1_wide</name></decl>;</decl_stmt>

                <decl_stmt pos:start="1585:17" pos:end="1585:30"><decl pos:start="1585:17" pos:end="1585:29"><type pos:start="1585:17" pos:end="1585:19"><name pos:start="1585:17" pos:end="1585:19">int</name></type> <name pos:start="1585:21" pos:end="1585:29">src2_wide</name></decl>;</decl_stmt>

                <decl_stmt pos:start="1587:17" pos:end="1587:29"><decl pos:start="1587:17" pos:end="1587:28"><type pos:start="1587:17" pos:end="1587:19"><name pos:start="1587:17" pos:end="1587:19">int</name></type> <name pos:start="1587:21" pos:end="1587:28">prewiden</name></decl>;</decl_stmt>

                <comment type="block" pos:start="1589:17" pos:end="1589:52">/* prewiden, src1_wide, src2_wide */</comment>

                <decl_stmt pos:start="1591:17" pos:end="1623:18"><decl pos:start="1591:17" pos:end="1623:17"><type pos:start="1591:17" pos:end="1591:32"><specifier pos:start="1591:17" pos:end="1591:22">static</specifier> <specifier pos:start="1591:24" pos:end="1591:28">const</specifier> <name pos:start="1591:30" pos:end="1591:32">int</name></type> <name pos:start="1591:34" pos:end="1591:54"><name pos:start="1591:34" pos:end="1591:47">neon_3reg_wide</name><index pos:start="1591:48" pos:end="1591:51">[<expr pos:start="1591:49" pos:end="1591:50"><literal type="number" pos:start="1591:49" pos:end="1591:50">16</literal></expr>]</index><index pos:start="1591:52" pos:end="1591:54">[<expr pos:start="1591:53" pos:end="1591:53"><literal type="number" pos:start="1591:53" pos:end="1591:53">3</literal></expr>]</index></name> <init pos:start="1591:56" pos:end="1623:17">= <expr pos:start="1591:58" pos:end="1623:17"><block pos:start="1591:58" pos:end="1623:17">{

                    <expr pos:start="1593:21" pos:end="1593:29"><block pos:start="1593:21" pos:end="1593:29">{<expr pos:start="1593:22" pos:end="1593:22"><literal type="number" pos:start="1593:22" pos:end="1593:22">1</literal></expr>, <expr pos:start="1593:25" pos:end="1593:25"><literal type="number" pos:start="1593:25" pos:end="1593:25">0</literal></expr>, <expr pos:start="1593:28" pos:end="1593:28"><literal type="number" pos:start="1593:28" pos:end="1593:28">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1593:32" pos:end="1593:42">/* VADDL */</comment>

                    <expr pos:start="1595:21" pos:end="1595:29"><block pos:start="1595:21" pos:end="1595:29">{<expr pos:start="1595:22" pos:end="1595:22"><literal type="number" pos:start="1595:22" pos:end="1595:22">1</literal></expr>, <expr pos:start="1595:25" pos:end="1595:25"><literal type="number" pos:start="1595:25" pos:end="1595:25">1</literal></expr>, <expr pos:start="1595:28" pos:end="1595:28"><literal type="number" pos:start="1595:28" pos:end="1595:28">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1595:32" pos:end="1595:42">/* VADDW */</comment>

                    <expr pos:start="1597:21" pos:end="1597:29"><block pos:start="1597:21" pos:end="1597:29">{<expr pos:start="1597:22" pos:end="1597:22"><literal type="number" pos:start="1597:22" pos:end="1597:22">1</literal></expr>, <expr pos:start="1597:25" pos:end="1597:25"><literal type="number" pos:start="1597:25" pos:end="1597:25">0</literal></expr>, <expr pos:start="1597:28" pos:end="1597:28"><literal type="number" pos:start="1597:28" pos:end="1597:28">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1597:32" pos:end="1597:42">/* VSUBL */</comment>

                    <expr pos:start="1599:21" pos:end="1599:29"><block pos:start="1599:21" pos:end="1599:29">{<expr pos:start="1599:22" pos:end="1599:22"><literal type="number" pos:start="1599:22" pos:end="1599:22">1</literal></expr>, <expr pos:start="1599:25" pos:end="1599:25"><literal type="number" pos:start="1599:25" pos:end="1599:25">1</literal></expr>, <expr pos:start="1599:28" pos:end="1599:28"><literal type="number" pos:start="1599:28" pos:end="1599:28">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1599:32" pos:end="1599:42">/* VSUBW */</comment>

                    <expr pos:start="1601:21" pos:end="1601:29"><block pos:start="1601:21" pos:end="1601:29">{<expr pos:start="1601:22" pos:end="1601:22"><literal type="number" pos:start="1601:22" pos:end="1601:22">0</literal></expr>, <expr pos:start="1601:25" pos:end="1601:25"><literal type="number" pos:start="1601:25" pos:end="1601:25">1</literal></expr>, <expr pos:start="1601:28" pos:end="1601:28"><literal type="number" pos:start="1601:28" pos:end="1601:28">1</literal></expr>}</block></expr>, <comment type="block" pos:start="1601:32" pos:end="1601:43">/* VADDHN */</comment>

                    <expr pos:start="1603:21" pos:end="1603:29"><block pos:start="1603:21" pos:end="1603:29">{<expr pos:start="1603:22" pos:end="1603:22"><literal type="number" pos:start="1603:22" pos:end="1603:22">0</literal></expr>, <expr pos:start="1603:25" pos:end="1603:25"><literal type="number" pos:start="1603:25" pos:end="1603:25">0</literal></expr>, <expr pos:start="1603:28" pos:end="1603:28"><literal type="number" pos:start="1603:28" pos:end="1603:28">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1603:32" pos:end="1603:42">/* VABAL */</comment>

                    <expr pos:start="1605:21" pos:end="1605:29"><block pos:start="1605:21" pos:end="1605:29">{<expr pos:start="1605:22" pos:end="1605:22"><literal type="number" pos:start="1605:22" pos:end="1605:22">0</literal></expr>, <expr pos:start="1605:25" pos:end="1605:25"><literal type="number" pos:start="1605:25" pos:end="1605:25">1</literal></expr>, <expr pos:start="1605:28" pos:end="1605:28"><literal type="number" pos:start="1605:28" pos:end="1605:28">1</literal></expr>}</block></expr>, <comment type="block" pos:start="1605:32" pos:end="1605:43">/* VSUBHN */</comment>

                    <expr pos:start="1607:21" pos:end="1607:29"><block pos:start="1607:21" pos:end="1607:29">{<expr pos:start="1607:22" pos:end="1607:22"><literal type="number" pos:start="1607:22" pos:end="1607:22">0</literal></expr>, <expr pos:start="1607:25" pos:end="1607:25"><literal type="number" pos:start="1607:25" pos:end="1607:25">0</literal></expr>, <expr pos:start="1607:28" pos:end="1607:28"><literal type="number" pos:start="1607:28" pos:end="1607:28">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1607:32" pos:end="1607:42">/* VABDL */</comment>

                    <expr pos:start="1609:21" pos:end="1609:29"><block pos:start="1609:21" pos:end="1609:29">{<expr pos:start="1609:22" pos:end="1609:22"><literal type="number" pos:start="1609:22" pos:end="1609:22">0</literal></expr>, <expr pos:start="1609:25" pos:end="1609:25"><literal type="number" pos:start="1609:25" pos:end="1609:25">0</literal></expr>, <expr pos:start="1609:28" pos:end="1609:28"><literal type="number" pos:start="1609:28" pos:end="1609:28">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1609:32" pos:end="1609:42">/* VMLAL */</comment>

                    <expr pos:start="1611:21" pos:end="1611:29"><block pos:start="1611:21" pos:end="1611:29">{<expr pos:start="1611:22" pos:end="1611:22"><literal type="number" pos:start="1611:22" pos:end="1611:22">0</literal></expr>, <expr pos:start="1611:25" pos:end="1611:25"><literal type="number" pos:start="1611:25" pos:end="1611:25">0</literal></expr>, <expr pos:start="1611:28" pos:end="1611:28"><literal type="number" pos:start="1611:28" pos:end="1611:28">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1611:32" pos:end="1611:44">/* VQDMLAL */</comment>

                    <expr pos:start="1613:21" pos:end="1613:29"><block pos:start="1613:21" pos:end="1613:29">{<expr pos:start="1613:22" pos:end="1613:22"><literal type="number" pos:start="1613:22" pos:end="1613:22">0</literal></expr>, <expr pos:start="1613:25" pos:end="1613:25"><literal type="number" pos:start="1613:25" pos:end="1613:25">0</literal></expr>, <expr pos:start="1613:28" pos:end="1613:28"><literal type="number" pos:start="1613:28" pos:end="1613:28">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1613:32" pos:end="1613:42">/* VMLSL */</comment>

                    <expr pos:start="1615:21" pos:end="1615:29"><block pos:start="1615:21" pos:end="1615:29">{<expr pos:start="1615:22" pos:end="1615:22"><literal type="number" pos:start="1615:22" pos:end="1615:22">0</literal></expr>, <expr pos:start="1615:25" pos:end="1615:25"><literal type="number" pos:start="1615:25" pos:end="1615:25">0</literal></expr>, <expr pos:start="1615:28" pos:end="1615:28"><literal type="number" pos:start="1615:28" pos:end="1615:28">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1615:32" pos:end="1615:44">/* VQDMLSL */</comment>

                    <expr pos:start="1617:21" pos:end="1617:29"><block pos:start="1617:21" pos:end="1617:29">{<expr pos:start="1617:22" pos:end="1617:22"><literal type="number" pos:start="1617:22" pos:end="1617:22">0</literal></expr>, <expr pos:start="1617:25" pos:end="1617:25"><literal type="number" pos:start="1617:25" pos:end="1617:25">0</literal></expr>, <expr pos:start="1617:28" pos:end="1617:28"><literal type="number" pos:start="1617:28" pos:end="1617:28">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1617:32" pos:end="1617:50">/* Integer VMULL */</comment>

                    <expr pos:start="1619:21" pos:end="1619:29"><block pos:start="1619:21" pos:end="1619:29">{<expr pos:start="1619:22" pos:end="1619:22"><literal type="number" pos:start="1619:22" pos:end="1619:22">0</literal></expr>, <expr pos:start="1619:25" pos:end="1619:25"><literal type="number" pos:start="1619:25" pos:end="1619:25">0</literal></expr>, <expr pos:start="1619:28" pos:end="1619:28"><literal type="number" pos:start="1619:28" pos:end="1619:28">0</literal></expr>}</block></expr>, <comment type="block" pos:start="1619:32" pos:end="1619:44">/* VQDMULL */</comment>

                    <expr pos:start="1621:21" pos:end="1621:29"><block pos:start="1621:21" pos:end="1621:29">{<expr pos:start="1621:22" pos:end="1621:22"><literal type="number" pos:start="1621:22" pos:end="1621:22">0</literal></expr>, <expr pos:start="1621:25" pos:end="1621:25"><literal type="number" pos:start="1621:25" pos:end="1621:25">0</literal></expr>, <expr pos:start="1621:28" pos:end="1621:28"><literal type="number" pos:start="1621:28" pos:end="1621:28">0</literal></expr>}</block></expr>  <comment type="block" pos:start="1621:32" pos:end="1621:53">/* Polynomial VMULL */</comment>

                }</block></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="1627:17" pos:end="1627:49"><expr pos:start="1627:17" pos:end="1627:48"><name pos:start="1627:17" pos:end="1627:24">prewiden</name> <operator pos:start="1627:26" pos:end="1627:26">=</operator> <name pos:start="1627:28" pos:end="1627:48"><name pos:start="1627:28" pos:end="1627:41">neon_3reg_wide</name><index pos:start="1627:42" pos:end="1627:45">[<expr pos:start="1627:43" pos:end="1627:44"><name pos:start="1627:43" pos:end="1627:44">op</name></expr>]</index><index pos:start="1627:46" pos:end="1627:48">[<expr pos:start="1627:47" pos:end="1627:47"><literal type="number" pos:start="1627:47" pos:end="1627:47">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1629:17" pos:end="1629:50"><expr pos:start="1629:17" pos:end="1629:49"><name pos:start="1629:17" pos:end="1629:25">src1_wide</name> <operator pos:start="1629:27" pos:end="1629:27">=</operator> <name pos:start="1629:29" pos:end="1629:49"><name pos:start="1629:29" pos:end="1629:42">neon_3reg_wide</name><index pos:start="1629:43" pos:end="1629:46">[<expr pos:start="1629:44" pos:end="1629:45"><name pos:start="1629:44" pos:end="1629:45">op</name></expr>]</index><index pos:start="1629:47" pos:end="1629:49">[<expr pos:start="1629:48" pos:end="1629:48"><literal type="number" pos:start="1629:48" pos:end="1629:48">1</literal></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1631:17" pos:end="1631:50"><expr pos:start="1631:17" pos:end="1631:49"><name pos:start="1631:17" pos:end="1631:25">src2_wide</name> <operator pos:start="1631:27" pos:end="1631:27">=</operator> <name pos:start="1631:29" pos:end="1631:49"><name pos:start="1631:29" pos:end="1631:42">neon_3reg_wide</name><index pos:start="1631:43" pos:end="1631:46">[<expr pos:start="1631:44" pos:end="1631:45"><name pos:start="1631:44" pos:end="1631:45">op</name></expr>]</index><index pos:start="1631:47" pos:end="1631:49">[<expr pos:start="1631:48" pos:end="1631:48"><literal type="number" pos:start="1631:48" pos:end="1631:48">2</literal></expr>]</index></name></expr>;</expr_stmt>



                <if_stmt pos:start="1635:17" pos:end="1637:29"><if pos:start="1635:17" pos:end="1637:29">if <condition pos:start="1635:20" pos:end="1635:67">(<expr pos:start="1635:21" pos:end="1635:66"><name pos:start="1635:21" pos:end="1635:24">size</name> <operator pos:start="1635:26" pos:end="1635:27">==</operator> <literal type="number" pos:start="1635:29" pos:end="1635:29">0</literal> <operator pos:start="1635:31" pos:end="1635:32">&amp;&amp;</operator> <operator pos:start="1635:34" pos:end="1635:34">(</operator><name pos:start="1635:35" pos:end="1635:36">op</name> <operator pos:start="1635:38" pos:end="1635:39">==</operator> <literal type="number" pos:start="1635:41" pos:end="1635:41">9</literal> <operator pos:start="1635:43" pos:end="1635:44">||</operator> <name pos:start="1635:46" pos:end="1635:47">op</name> <operator pos:start="1635:49" pos:end="1635:50">==</operator> <literal type="number" pos:start="1635:52" pos:end="1635:53">11</literal> <operator pos:start="1635:55" pos:end="1635:56">||</operator> <name pos:start="1635:58" pos:end="1635:59">op</name> <operator pos:start="1635:61" pos:end="1635:62">==</operator> <literal type="number" pos:start="1635:64" pos:end="1635:65">13</literal><operator pos:start="1635:66" pos:end="1635:66">)</operator></expr>)</condition><block type="pseudo" pos:start="1637:21" pos:end="1637:29"><block_content pos:start="1637:21" pos:end="1637:29">

                    <return pos:start="1637:21" pos:end="1637:29">return <expr pos:start="1637:28" pos:end="1637:28"><literal type="number" pos:start="1637:28" pos:end="1637:28">1</literal></expr>;</return></block_content></block></if></if_stmt>



                <comment type="block" pos:start="1641:17" pos:end="1645:56">/* Avoid overlapping operands.  Wide source operands are

                   always aligned so will never overlap with wide

                   destinations in problematic ways.  */</comment>

                <if_stmt pos:start="1647:17" pos:end="1659:17"><if pos:start="1647:17" pos:end="1653:17">if <condition pos:start="1647:20" pos:end="1647:43">(<expr pos:start="1647:21" pos:end="1647:42"><name pos:start="1647:21" pos:end="1647:22">rd</name> <operator pos:start="1647:24" pos:end="1647:25">==</operator> <name pos:start="1647:27" pos:end="1647:28">rm</name> <operator pos:start="1647:30" pos:end="1647:31">&amp;&amp;</operator> <operator pos:start="1647:33" pos:end="1647:33">!</operator><name pos:start="1647:34" pos:end="1647:42">src2_wide</name></expr>)</condition> <block pos:start="1647:45" pos:end="1653:17">{<block_content pos:start="1649:21" pos:end="1651:47">

                    <expr_stmt pos:start="1649:21" pos:end="1649:47"><expr pos:start="1649:21" pos:end="1649:46"><name pos:start="1649:21" pos:end="1649:23">tmp</name> <operator pos:start="1649:25" pos:end="1649:25">=</operator> <call pos:start="1649:27" pos:end="1649:46"><name pos:start="1649:27" pos:end="1649:39">neon_load_reg</name><argument_list pos:start="1649:40" pos:end="1649:46">(<argument pos:start="1649:41" pos:end="1649:42"><expr pos:start="1649:41" pos:end="1649:42"><name pos:start="1649:41" pos:end="1649:42">rm</name></expr></argument>, <argument pos:start="1649:45" pos:end="1649:45"><expr pos:start="1649:45" pos:end="1649:45"><literal type="number" pos:start="1649:45" pos:end="1649:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1651:21" pos:end="1651:47"><expr pos:start="1651:21" pos:end="1651:46"><call pos:start="1651:21" pos:end="1651:46"><name pos:start="1651:21" pos:end="1651:38">neon_store_scratch</name><argument_list pos:start="1651:39" pos:end="1651:46">(<argument pos:start="1651:40" pos:end="1651:40"><expr pos:start="1651:40" pos:end="1651:40"><literal type="number" pos:start="1651:40" pos:end="1651:40">2</literal></expr></argument>, <argument pos:start="1651:43" pos:end="1651:45"><expr pos:start="1651:43" pos:end="1651:45"><name pos:start="1651:43" pos:end="1651:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="1653:19" pos:end="1659:17">else if <condition pos:start="1653:27" pos:end="1653:50">(<expr pos:start="1653:28" pos:end="1653:49"><name pos:start="1653:28" pos:end="1653:29">rd</name> <operator pos:start="1653:31" pos:end="1653:32">==</operator> <name pos:start="1653:34" pos:end="1653:35">rn</name> <operator pos:start="1653:37" pos:end="1653:38">&amp;&amp;</operator> <operator pos:start="1653:40" pos:end="1653:40">!</operator><name pos:start="1653:41" pos:end="1653:49">src1_wide</name></expr>)</condition> <block pos:start="1653:52" pos:end="1659:17">{<block_content pos:start="1655:21" pos:end="1657:47">

                    <expr_stmt pos:start="1655:21" pos:end="1655:47"><expr pos:start="1655:21" pos:end="1655:46"><name pos:start="1655:21" pos:end="1655:23">tmp</name> <operator pos:start="1655:25" pos:end="1655:25">=</operator> <call pos:start="1655:27" pos:end="1655:46"><name pos:start="1655:27" pos:end="1655:39">neon_load_reg</name><argument_list pos:start="1655:40" pos:end="1655:46">(<argument pos:start="1655:41" pos:end="1655:42"><expr pos:start="1655:41" pos:end="1655:42"><name pos:start="1655:41" pos:end="1655:42">rn</name></expr></argument>, <argument pos:start="1655:45" pos:end="1655:45"><expr pos:start="1655:45" pos:end="1655:45"><literal type="number" pos:start="1655:45" pos:end="1655:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1657:21" pos:end="1657:47"><expr pos:start="1657:21" pos:end="1657:46"><call pos:start="1657:21" pos:end="1657:46"><name pos:start="1657:21" pos:end="1657:38">neon_store_scratch</name><argument_list pos:start="1657:39" pos:end="1657:46">(<argument pos:start="1657:40" pos:end="1657:40"><expr pos:start="1657:40" pos:end="1657:40"><literal type="number" pos:start="1657:40" pos:end="1657:40">2</literal></expr></argument>, <argument pos:start="1657:43" pos:end="1657:45"><expr pos:start="1657:43" pos:end="1657:45"><name pos:start="1657:43" pos:end="1657:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1661:17" pos:end="1661:34"><expr pos:start="1661:17" pos:end="1661:33"><call pos:start="1661:17" pos:end="1661:33"><name pos:start="1661:17" pos:end="1661:27">TCGV_UNUSED</name><argument_list pos:start="1661:28" pos:end="1661:33">(<argument pos:start="1661:29" pos:end="1661:32"><expr pos:start="1661:29" pos:end="1661:32"><name pos:start="1661:29" pos:end="1661:32">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="1663:17" pos:end="1939:17">for <control pos:start="1663:21" pos:end="1663:48">(<init pos:start="1663:22" pos:end="1663:30"><expr pos:start="1663:22" pos:end="1663:29"><name pos:start="1663:22" pos:end="1663:25">pass</name> <operator pos:start="1663:27" pos:end="1663:27">=</operator> <literal type="number" pos:start="1663:29" pos:end="1663:29">0</literal></expr>;</init> <condition pos:start="1663:32" pos:end="1663:40"><expr pos:start="1663:32" pos:end="1663:39"><name pos:start="1663:32" pos:end="1663:35">pass</name> <operator pos:start="1663:37" pos:end="1663:37">&lt;</operator> <literal type="number" pos:start="1663:39" pos:end="1663:39">2</literal></expr>;</condition> <incr pos:start="1663:42" pos:end="1663:47"><expr pos:start="1663:42" pos:end="1663:47"><name pos:start="1663:42" pos:end="1663:45">pass</name><operator pos:start="1663:46" pos:end="1663:47">++</operator></expr></incr>)</control> <block pos:start="1663:50" pos:end="1939:17">{<block_content pos:start="1665:21" pos:end="1937:21">

                    <if_stmt pos:start="1665:21" pos:end="1689:21"><if pos:start="1665:21" pos:end="1671:21">if <condition pos:start="1665:24" pos:end="1665:34">(<expr pos:start="1665:25" pos:end="1665:33"><name pos:start="1665:25" pos:end="1665:33">src1_wide</name></expr>)</condition> <block pos:start="1665:36" pos:end="1671:21">{<block_content pos:start="1667:25" pos:end="1669:41">

                        <expr_stmt pos:start="1667:25" pos:end="1667:59"><expr pos:start="1667:25" pos:end="1667:58"><call pos:start="1667:25" pos:end="1667:58"><name pos:start="1667:25" pos:end="1667:39">neon_load_reg64</name><argument_list pos:start="1667:40" pos:end="1667:58">(<argument pos:start="1667:41" pos:end="1667:46"><expr pos:start="1667:41" pos:end="1667:46"><name pos:start="1667:41" pos:end="1667:46">cpu_V0</name></expr></argument>, <argument pos:start="1667:49" pos:end="1667:57"><expr pos:start="1667:49" pos:end="1667:57"><name pos:start="1667:49" pos:end="1667:50">rn</name> <operator pos:start="1667:52" pos:end="1667:52">+</operator> <name pos:start="1667:54" pos:end="1667:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1669:25" pos:end="1669:41"><expr pos:start="1669:25" pos:end="1669:40"><call pos:start="1669:25" pos:end="1669:40"><name pos:start="1669:25" pos:end="1669:35">TCGV_UNUSED</name><argument_list pos:start="1669:36" pos:end="1669:40">(<argument pos:start="1669:37" pos:end="1669:39"><expr pos:start="1669:37" pos:end="1669:39"><name pos:start="1669:37" pos:end="1669:39">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1671:23" pos:end="1689:21">else <block pos:start="1671:28" pos:end="1689:21">{<block_content pos:start="1673:25" pos:end="1687:25">

                        <if_stmt pos:start="1673:25" pos:end="1681:25"><if pos:start="1673:25" pos:end="1677:25">if <condition pos:start="1673:28" pos:end="1673:50">(<expr pos:start="1673:29" pos:end="1673:49"><name pos:start="1673:29" pos:end="1673:32">pass</name> <operator pos:start="1673:34" pos:end="1673:35">==</operator> <literal type="number" pos:start="1673:37" pos:end="1673:37">1</literal> <operator pos:start="1673:39" pos:end="1673:40">&amp;&amp;</operator> <name pos:start="1673:42" pos:end="1673:43">rd</name> <operator pos:start="1673:45" pos:end="1673:46">==</operator> <name pos:start="1673:48" pos:end="1673:49">rn</name></expr>)</condition> <block pos:start="1673:52" pos:end="1677:25">{<block_content pos:start="1675:29" pos:end="1675:55">

                            <expr_stmt pos:start="1675:29" pos:end="1675:55"><expr pos:start="1675:29" pos:end="1675:54"><name pos:start="1675:29" pos:end="1675:31">tmp</name> <operator pos:start="1675:33" pos:end="1675:33">=</operator> <call pos:start="1675:35" pos:end="1675:54"><name pos:start="1675:35" pos:end="1675:51">neon_load_scratch</name><argument_list pos:start="1675:52" pos:end="1675:54">(<argument pos:start="1675:53" pos:end="1675:53"><expr pos:start="1675:53" pos:end="1675:53"><literal type="number" pos:start="1675:53" pos:end="1675:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1677:27" pos:end="1681:25">else <block pos:start="1677:32" pos:end="1681:25">{<block_content pos:start="1679:29" pos:end="1679:58">

                            <expr_stmt pos:start="1679:29" pos:end="1679:58"><expr pos:start="1679:29" pos:end="1679:57"><name pos:start="1679:29" pos:end="1679:31">tmp</name> <operator pos:start="1679:33" pos:end="1679:33">=</operator> <call pos:start="1679:35" pos:end="1679:57"><name pos:start="1679:35" pos:end="1679:47">neon_load_reg</name><argument_list pos:start="1679:48" pos:end="1679:57">(<argument pos:start="1679:49" pos:end="1679:50"><expr pos:start="1679:49" pos:end="1679:50"><name pos:start="1679:49" pos:end="1679:50">rn</name></expr></argument>, <argument pos:start="1679:53" pos:end="1679:56"><expr pos:start="1679:53" pos:end="1679:56"><name pos:start="1679:53" pos:end="1679:56">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <if_stmt pos:start="1683:25" pos:end="1687:25"><if pos:start="1683:25" pos:end="1687:25">if <condition pos:start="1683:28" pos:end="1683:37">(<expr pos:start="1683:29" pos:end="1683:36"><name pos:start="1683:29" pos:end="1683:36">prewiden</name></expr>)</condition> <block pos:start="1683:39" pos:end="1687:25">{<block_content pos:start="1685:29" pos:end="1685:65">

                            <expr_stmt pos:start="1685:29" pos:end="1685:65"><expr pos:start="1685:29" pos:end="1685:64"><call pos:start="1685:29" pos:end="1685:64"><name pos:start="1685:29" pos:end="1685:42">gen_neon_widen</name><argument_list pos:start="1685:43" pos:end="1685:64">(<argument pos:start="1685:44" pos:end="1685:49"><expr pos:start="1685:44" pos:end="1685:49"><name pos:start="1685:44" pos:end="1685:49">cpu_V0</name></expr></argument>, <argument pos:start="1685:52" pos:end="1685:54"><expr pos:start="1685:52" pos:end="1685:54"><name pos:start="1685:52" pos:end="1685:54">tmp</name></expr></argument>, <argument pos:start="1685:57" pos:end="1685:60"><expr pos:start="1685:57" pos:end="1685:60"><name pos:start="1685:57" pos:end="1685:60">size</name></expr></argument>, <argument pos:start="1685:63" pos:end="1685:63"><expr pos:start="1685:63" pos:end="1685:63"><name pos:start="1685:63" pos:end="1685:63">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <if_stmt pos:start="1691:21" pos:end="1715:21"><if pos:start="1691:21" pos:end="1697:21">if <condition pos:start="1691:24" pos:end="1691:34">(<expr pos:start="1691:25" pos:end="1691:33"><name pos:start="1691:25" pos:end="1691:33">src2_wide</name></expr>)</condition> <block pos:start="1691:36" pos:end="1697:21">{<block_content pos:start="1693:25" pos:end="1695:42">

                        <expr_stmt pos:start="1693:25" pos:end="1693:59"><expr pos:start="1693:25" pos:end="1693:58"><call pos:start="1693:25" pos:end="1693:58"><name pos:start="1693:25" pos:end="1693:39">neon_load_reg64</name><argument_list pos:start="1693:40" pos:end="1693:58">(<argument pos:start="1693:41" pos:end="1693:46"><expr pos:start="1693:41" pos:end="1693:46"><name pos:start="1693:41" pos:end="1693:46">cpu_V1</name></expr></argument>, <argument pos:start="1693:49" pos:end="1693:57"><expr pos:start="1693:49" pos:end="1693:57"><name pos:start="1693:49" pos:end="1693:50">rm</name> <operator pos:start="1693:52" pos:end="1693:52">+</operator> <name pos:start="1693:54" pos:end="1693:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1695:25" pos:end="1695:42"><expr pos:start="1695:25" pos:end="1695:41"><call pos:start="1695:25" pos:end="1695:41"><name pos:start="1695:25" pos:end="1695:35">TCGV_UNUSED</name><argument_list pos:start="1695:36" pos:end="1695:41">(<argument pos:start="1695:37" pos:end="1695:40"><expr pos:start="1695:37" pos:end="1695:40"><name pos:start="1695:37" pos:end="1695:40">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1697:23" pos:end="1715:21">else <block pos:start="1697:28" pos:end="1715:21">{<block_content pos:start="1699:25" pos:end="1713:25">

                        <if_stmt pos:start="1699:25" pos:end="1707:25"><if pos:start="1699:25" pos:end="1703:25">if <condition pos:start="1699:28" pos:end="1699:50">(<expr pos:start="1699:29" pos:end="1699:49"><name pos:start="1699:29" pos:end="1699:32">pass</name> <operator pos:start="1699:34" pos:end="1699:35">==</operator> <literal type="number" pos:start="1699:37" pos:end="1699:37">1</literal> <operator pos:start="1699:39" pos:end="1699:40">&amp;&amp;</operator> <name pos:start="1699:42" pos:end="1699:43">rd</name> <operator pos:start="1699:45" pos:end="1699:46">==</operator> <name pos:start="1699:48" pos:end="1699:49">rm</name></expr>)</condition> <block pos:start="1699:52" pos:end="1703:25">{<block_content pos:start="1701:29" pos:end="1701:56">

                            <expr_stmt pos:start="1701:29" pos:end="1701:56"><expr pos:start="1701:29" pos:end="1701:55"><name pos:start="1701:29" pos:end="1701:32">tmp2</name> <operator pos:start="1701:34" pos:end="1701:34">=</operator> <call pos:start="1701:36" pos:end="1701:55"><name pos:start="1701:36" pos:end="1701:52">neon_load_scratch</name><argument_list pos:start="1701:53" pos:end="1701:55">(<argument pos:start="1701:54" pos:end="1701:54"><expr pos:start="1701:54" pos:end="1701:54"><literal type="number" pos:start="1701:54" pos:end="1701:54">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1703:27" pos:end="1707:25">else <block pos:start="1703:32" pos:end="1707:25">{<block_content pos:start="1705:29" pos:end="1705:59">

                            <expr_stmt pos:start="1705:29" pos:end="1705:59"><expr pos:start="1705:29" pos:end="1705:58"><name pos:start="1705:29" pos:end="1705:32">tmp2</name> <operator pos:start="1705:34" pos:end="1705:34">=</operator> <call pos:start="1705:36" pos:end="1705:58"><name pos:start="1705:36" pos:end="1705:48">neon_load_reg</name><argument_list pos:start="1705:49" pos:end="1705:58">(<argument pos:start="1705:50" pos:end="1705:51"><expr pos:start="1705:50" pos:end="1705:51"><name pos:start="1705:50" pos:end="1705:51">rm</name></expr></argument>, <argument pos:start="1705:54" pos:end="1705:57"><expr pos:start="1705:54" pos:end="1705:57"><name pos:start="1705:54" pos:end="1705:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <if_stmt pos:start="1709:25" pos:end="1713:25"><if pos:start="1709:25" pos:end="1713:25">if <condition pos:start="1709:28" pos:end="1709:37">(<expr pos:start="1709:29" pos:end="1709:36"><name pos:start="1709:29" pos:end="1709:36">prewiden</name></expr>)</condition> <block pos:start="1709:39" pos:end="1713:25">{<block_content pos:start="1711:29" pos:end="1711:66">

                            <expr_stmt pos:start="1711:29" pos:end="1711:66"><expr pos:start="1711:29" pos:end="1711:65"><call pos:start="1711:29" pos:end="1711:65"><name pos:start="1711:29" pos:end="1711:42">gen_neon_widen</name><argument_list pos:start="1711:43" pos:end="1711:65">(<argument pos:start="1711:44" pos:end="1711:49"><expr pos:start="1711:44" pos:end="1711:49"><name pos:start="1711:44" pos:end="1711:49">cpu_V1</name></expr></argument>, <argument pos:start="1711:52" pos:end="1711:55"><expr pos:start="1711:52" pos:end="1711:55"><name pos:start="1711:52" pos:end="1711:55">tmp2</name></expr></argument>, <argument pos:start="1711:58" pos:end="1711:61"><expr pos:start="1711:58" pos:end="1711:61"><name pos:start="1711:58" pos:end="1711:61">size</name></expr></argument>, <argument pos:start="1711:64" pos:end="1711:64"><expr pos:start="1711:64" pos:end="1711:64"><name pos:start="1711:64" pos:end="1711:64">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <switch pos:start="1717:21" pos:end="1799:21">switch <condition pos:start="1717:28" pos:end="1717:31">(<expr pos:start="1717:29" pos:end="1717:30"><name pos:start="1717:29" pos:end="1717:30">op</name></expr>)</condition> <block pos:start="1717:33" pos:end="1799:21">{<block_content pos:start="1719:21" pos:end="1797:33">

                    <case pos:start="1719:21" pos:end="1719:27">case <expr pos:start="1719:26" pos:end="1719:26"><literal type="number" pos:start="1719:26" pos:end="1719:26">0</literal></expr>:</case> <case pos:start="1719:29" pos:end="1719:35">case <expr pos:start="1719:34" pos:end="1719:34"><literal type="number" pos:start="1719:34" pos:end="1719:34">1</literal></expr>:</case> <case pos:start="1719:37" pos:end="1719:43">case <expr pos:start="1719:42" pos:end="1719:42"><literal type="number" pos:start="1719:42" pos:end="1719:42">4</literal></expr>:</case> <comment type="block" pos:start="1719:45" pos:end="1719:79">/* VADDL, VADDW, VADDHN, VRADDHN */</comment>

                        <expr_stmt pos:start="1721:25" pos:end="1721:44"><expr pos:start="1721:25" pos:end="1721:43"><call pos:start="1721:25" pos:end="1721:43"><name pos:start="1721:25" pos:end="1721:37">gen_neon_addl</name><argument_list pos:start="1721:38" pos:end="1721:43">(<argument pos:start="1721:39" pos:end="1721:42"><expr pos:start="1721:39" pos:end="1721:42"><name pos:start="1721:39" pos:end="1721:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1723:25" pos:end="1723:30">break;</break>

                    <case pos:start="1725:21" pos:end="1725:27">case <expr pos:start="1725:26" pos:end="1725:26"><literal type="number" pos:start="1725:26" pos:end="1725:26">2</literal></expr>:</case> <case pos:start="1725:29" pos:end="1725:35">case <expr pos:start="1725:34" pos:end="1725:34"><literal type="number" pos:start="1725:34" pos:end="1725:34">3</literal></expr>:</case> <case pos:start="1725:37" pos:end="1725:43">case <expr pos:start="1725:42" pos:end="1725:42"><literal type="number" pos:start="1725:42" pos:end="1725:42">6</literal></expr>:</case> <comment type="block" pos:start="1725:45" pos:end="1725:79">/* VSUBL, VSUBW, VSUBHN, VRSUBHN */</comment>

                        <expr_stmt pos:start="1727:25" pos:end="1727:44"><expr pos:start="1727:25" pos:end="1727:43"><call pos:start="1727:25" pos:end="1727:43"><name pos:start="1727:25" pos:end="1727:37">gen_neon_subl</name><argument_list pos:start="1727:38" pos:end="1727:43">(<argument pos:start="1727:39" pos:end="1727:42"><expr pos:start="1727:39" pos:end="1727:42"><name pos:start="1727:39" pos:end="1727:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1729:25" pos:end="1729:30">break;</break>

                    <case pos:start="1731:21" pos:end="1731:27">case <expr pos:start="1731:26" pos:end="1731:26"><literal type="number" pos:start="1731:26" pos:end="1731:26">5</literal></expr>:</case> <case pos:start="1731:29" pos:end="1731:35">case <expr pos:start="1731:34" pos:end="1731:34"><literal type="number" pos:start="1731:34" pos:end="1731:34">7</literal></expr>:</case> <comment type="block" pos:start="1731:37" pos:end="1731:54">/* VABAL, VABDL */</comment>

                        <switch pos:start="1733:25" pos:end="1773:25">switch <condition pos:start="1733:32" pos:end="1733:48">(<expr pos:start="1733:33" pos:end="1733:47"><operator pos:start="1733:33" pos:end="1733:33">(</operator><name pos:start="1733:34" pos:end="1733:37">size</name> <operator pos:start="1733:39" pos:end="1733:40">&lt;&lt;</operator> <literal type="number" pos:start="1733:42" pos:end="1733:42">1</literal><operator pos:start="1733:43" pos:end="1733:43">)</operator> <operator pos:start="1733:45" pos:end="1733:45">|</operator> <name pos:start="1733:47" pos:end="1733:47">u</name></expr>)</condition> <block pos:start="1733:50" pos:end="1773:25">{<block_content pos:start="1735:25" pos:end="1771:41">

                        <case pos:start="1735:25" pos:end="1735:31">case <expr pos:start="1735:30" pos:end="1735:30"><literal type="number" pos:start="1735:30" pos:end="1735:30">0</literal></expr>:</case>

                            <expr_stmt pos:start="1737:29" pos:end="1737:72"><expr pos:start="1737:29" pos:end="1737:71"><call pos:start="1737:29" pos:end="1737:71"><name pos:start="1737:29" pos:end="1737:52">gen_helper_neon_abdl_s16</name><argument_list pos:start="1737:53" pos:end="1737:71">(<argument pos:start="1737:54" pos:end="1737:59"><expr pos:start="1737:54" pos:end="1737:59"><name pos:start="1737:54" pos:end="1737:59">cpu_V0</name></expr></argument>, <argument pos:start="1737:62" pos:end="1737:64"><expr pos:start="1737:62" pos:end="1737:64"><name pos:start="1737:62" pos:end="1737:64">tmp</name></expr></argument>, <argument pos:start="1737:67" pos:end="1737:70"><expr pos:start="1737:67" pos:end="1737:70"><name pos:start="1737:67" pos:end="1737:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1739:29" pos:end="1739:34">break;</break>

                        <case pos:start="1741:25" pos:end="1741:31">case <expr pos:start="1741:30" pos:end="1741:30"><literal type="number" pos:start="1741:30" pos:end="1741:30">1</literal></expr>:</case>

                            <expr_stmt pos:start="1743:29" pos:end="1743:72"><expr pos:start="1743:29" pos:end="1743:71"><call pos:start="1743:29" pos:end="1743:71"><name pos:start="1743:29" pos:end="1743:52">gen_helper_neon_abdl_u16</name><argument_list pos:start="1743:53" pos:end="1743:71">(<argument pos:start="1743:54" pos:end="1743:59"><expr pos:start="1743:54" pos:end="1743:59"><name pos:start="1743:54" pos:end="1743:59">cpu_V0</name></expr></argument>, <argument pos:start="1743:62" pos:end="1743:64"><expr pos:start="1743:62" pos:end="1743:64"><name pos:start="1743:62" pos:end="1743:64">tmp</name></expr></argument>, <argument pos:start="1743:67" pos:end="1743:70"><expr pos:start="1743:67" pos:end="1743:70"><name pos:start="1743:67" pos:end="1743:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1745:29" pos:end="1745:34">break;</break>

                        <case pos:start="1747:25" pos:end="1747:31">case <expr pos:start="1747:30" pos:end="1747:30"><literal type="number" pos:start="1747:30" pos:end="1747:30">2</literal></expr>:</case>

                            <expr_stmt pos:start="1749:29" pos:end="1749:72"><expr pos:start="1749:29" pos:end="1749:71"><call pos:start="1749:29" pos:end="1749:71"><name pos:start="1749:29" pos:end="1749:52">gen_helper_neon_abdl_s32</name><argument_list pos:start="1749:53" pos:end="1749:71">(<argument pos:start="1749:54" pos:end="1749:59"><expr pos:start="1749:54" pos:end="1749:59"><name pos:start="1749:54" pos:end="1749:59">cpu_V0</name></expr></argument>, <argument pos:start="1749:62" pos:end="1749:64"><expr pos:start="1749:62" pos:end="1749:64"><name pos:start="1749:62" pos:end="1749:64">tmp</name></expr></argument>, <argument pos:start="1749:67" pos:end="1749:70"><expr pos:start="1749:67" pos:end="1749:70"><name pos:start="1749:67" pos:end="1749:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1751:29" pos:end="1751:34">break;</break>

                        <case pos:start="1753:25" pos:end="1753:31">case <expr pos:start="1753:30" pos:end="1753:30"><literal type="number" pos:start="1753:30" pos:end="1753:30">3</literal></expr>:</case>

                            <expr_stmt pos:start="1755:29" pos:end="1755:72"><expr pos:start="1755:29" pos:end="1755:71"><call pos:start="1755:29" pos:end="1755:71"><name pos:start="1755:29" pos:end="1755:52">gen_helper_neon_abdl_u32</name><argument_list pos:start="1755:53" pos:end="1755:71">(<argument pos:start="1755:54" pos:end="1755:59"><expr pos:start="1755:54" pos:end="1755:59"><name pos:start="1755:54" pos:end="1755:59">cpu_V0</name></expr></argument>, <argument pos:start="1755:62" pos:end="1755:64"><expr pos:start="1755:62" pos:end="1755:64"><name pos:start="1755:62" pos:end="1755:64">tmp</name></expr></argument>, <argument pos:start="1755:67" pos:end="1755:70"><expr pos:start="1755:67" pos:end="1755:70"><name pos:start="1755:67" pos:end="1755:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1757:29" pos:end="1757:34">break;</break>

                        <case pos:start="1759:25" pos:end="1759:31">case <expr pos:start="1759:30" pos:end="1759:30"><literal type="number" pos:start="1759:30" pos:end="1759:30">4</literal></expr>:</case>

                            <expr_stmt pos:start="1761:29" pos:end="1761:72"><expr pos:start="1761:29" pos:end="1761:71"><call pos:start="1761:29" pos:end="1761:71"><name pos:start="1761:29" pos:end="1761:52">gen_helper_neon_abdl_s64</name><argument_list pos:start="1761:53" pos:end="1761:71">(<argument pos:start="1761:54" pos:end="1761:59"><expr pos:start="1761:54" pos:end="1761:59"><name pos:start="1761:54" pos:end="1761:59">cpu_V0</name></expr></argument>, <argument pos:start="1761:62" pos:end="1761:64"><expr pos:start="1761:62" pos:end="1761:64"><name pos:start="1761:62" pos:end="1761:64">tmp</name></expr></argument>, <argument pos:start="1761:67" pos:end="1761:70"><expr pos:start="1761:67" pos:end="1761:70"><name pos:start="1761:67" pos:end="1761:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1763:29" pos:end="1763:34">break;</break>

                        <case pos:start="1765:25" pos:end="1765:31">case <expr pos:start="1765:30" pos:end="1765:30"><literal type="number" pos:start="1765:30" pos:end="1765:30">5</literal></expr>:</case>

                            <expr_stmt pos:start="1767:29" pos:end="1767:72"><expr pos:start="1767:29" pos:end="1767:71"><call pos:start="1767:29" pos:end="1767:71"><name pos:start="1767:29" pos:end="1767:52">gen_helper_neon_abdl_u64</name><argument_list pos:start="1767:53" pos:end="1767:71">(<argument pos:start="1767:54" pos:end="1767:59"><expr pos:start="1767:54" pos:end="1767:59"><name pos:start="1767:54" pos:end="1767:59">cpu_V0</name></expr></argument>, <argument pos:start="1767:62" pos:end="1767:64"><expr pos:start="1767:62" pos:end="1767:64"><name pos:start="1767:62" pos:end="1767:64">tmp</name></expr></argument>, <argument pos:start="1767:67" pos:end="1767:70"><expr pos:start="1767:67" pos:end="1767:70"><name pos:start="1767:67" pos:end="1767:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1769:29" pos:end="1769:34">break;</break>

                        <default pos:start="1771:25" pos:end="1771:32">default:</default> <expr_stmt pos:start="1771:34" pos:end="1771:41"><expr pos:start="1771:34" pos:end="1771:40"><call pos:start="1771:34" pos:end="1771:40"><name pos:start="1771:34" pos:end="1771:38">abort</name><argument_list pos:start="1771:39" pos:end="1771:40">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="1775:25" pos:end="1775:39"><expr pos:start="1775:25" pos:end="1775:38"><call pos:start="1775:25" pos:end="1775:38"><name pos:start="1775:25" pos:end="1775:32">dead_tmp</name><argument_list pos:start="1775:33" pos:end="1775:38">(<argument pos:start="1775:34" pos:end="1775:37"><expr pos:start="1775:34" pos:end="1775:37"><name pos:start="1775:34" pos:end="1775:37">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1777:25" pos:end="1777:38"><expr pos:start="1777:25" pos:end="1777:37"><call pos:start="1777:25" pos:end="1777:37"><name pos:start="1777:25" pos:end="1777:32">dead_tmp</name><argument_list pos:start="1777:33" pos:end="1777:37">(<argument pos:start="1777:34" pos:end="1777:36"><expr pos:start="1777:34" pos:end="1777:36"><name pos:start="1777:34" pos:end="1777:36">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1779:25" pos:end="1779:30">break;</break>

                    <case pos:start="1781:21" pos:end="1781:27">case <expr pos:start="1781:26" pos:end="1781:26"><literal type="number" pos:start="1781:26" pos:end="1781:26">8</literal></expr>:</case> <case pos:start="1781:29" pos:end="1781:35">case <expr pos:start="1781:34" pos:end="1781:34"><literal type="number" pos:start="1781:34" pos:end="1781:34">9</literal></expr>:</case> <case pos:start="1781:37" pos:end="1781:44">case <expr pos:start="1781:42" pos:end="1781:43"><literal type="number" pos:start="1781:42" pos:end="1781:43">10</literal></expr>:</case> <case pos:start="1781:46" pos:end="1781:53">case <expr pos:start="1781:51" pos:end="1781:52"><literal type="number" pos:start="1781:51" pos:end="1781:52">11</literal></expr>:</case> <case pos:start="1781:55" pos:end="1781:62">case <expr pos:start="1781:60" pos:end="1781:61"><literal type="number" pos:start="1781:60" pos:end="1781:61">12</literal></expr>:</case> <case pos:start="1781:64" pos:end="1781:71">case <expr pos:start="1781:69" pos:end="1781:70"><literal type="number" pos:start="1781:69" pos:end="1781:70">13</literal></expr>:</case>

                        <comment type="block" pos:start="1783:25" pos:end="1783:76">/* VMLAL, VQDMLAL, VMLSL, VQDMLSL, VMULL, VQDMULL */</comment>

                        <expr_stmt pos:start="1785:25" pos:end="1785:66"><expr pos:start="1785:25" pos:end="1785:65"><call pos:start="1785:25" pos:end="1785:65"><name pos:start="1785:25" pos:end="1785:37">gen_neon_mull</name><argument_list pos:start="1785:38" pos:end="1785:65">(<argument pos:start="1785:39" pos:end="1785:44"><expr pos:start="1785:39" pos:end="1785:44"><name pos:start="1785:39" pos:end="1785:44">cpu_V0</name></expr></argument>, <argument pos:start="1785:47" pos:end="1785:49"><expr pos:start="1785:47" pos:end="1785:49"><name pos:start="1785:47" pos:end="1785:49">tmp</name></expr></argument>, <argument pos:start="1785:52" pos:end="1785:55"><expr pos:start="1785:52" pos:end="1785:55"><name pos:start="1785:52" pos:end="1785:55">tmp2</name></expr></argument>, <argument pos:start="1785:58" pos:end="1785:61"><expr pos:start="1785:58" pos:end="1785:61"><name pos:start="1785:58" pos:end="1785:61">size</name></expr></argument>, <argument pos:start="1785:64" pos:end="1785:64"><expr pos:start="1785:64" pos:end="1785:64"><name pos:start="1785:64" pos:end="1785:64">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1787:25" pos:end="1787:30">break;</break>

                    <case pos:start="1789:21" pos:end="1789:28">case <expr pos:start="1789:26" pos:end="1789:27"><literal type="number" pos:start="1789:26" pos:end="1789:27">14</literal></expr>:</case> <comment type="block" pos:start="1789:30" pos:end="1789:51">/* Polynomial VMULL */</comment>

                        <expr_stmt pos:start="1791:25" pos:end="1791:75"><expr pos:start="1791:25" pos:end="1791:74"><call pos:start="1791:25" pos:end="1791:74"><name pos:start="1791:25" pos:end="1791:33">cpu_abort</name><argument_list pos:start="1791:34" pos:end="1791:74">(<argument pos:start="1791:35" pos:end="1791:37"><expr pos:start="1791:35" pos:end="1791:37"><name pos:start="1791:35" pos:end="1791:37">env</name></expr></argument>, <argument pos:start="1791:40" pos:end="1791:73"><expr pos:start="1791:40" pos:end="1791:73"><literal type="string" pos:start="1791:40" pos:end="1791:73">"Polynomial VMULL not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <default pos:start="1795:21" pos:end="1795:28">default:</default> <comment type="block" pos:start="1795:30" pos:end="1795:51">/* 15 is RESERVED.  */</comment>

                        <return pos:start="1797:25" pos:end="1797:33">return <expr pos:start="1797:32" pos:end="1797:32"><literal type="number" pos:start="1797:32" pos:end="1797:32">1</literal></expr>;</return>

                    </block_content>}</block></switch>

                    <if_stmt pos:start="1801:21" pos:end="1937:21"><if pos:start="1801:21" pos:end="1853:21">if <condition pos:start="1801:24" pos:end="1801:69">(<expr pos:start="1801:25" pos:end="1801:68"><name pos:start="1801:25" pos:end="1801:26">op</name> <operator pos:start="1801:28" pos:end="1801:29">==</operator> <literal type="number" pos:start="1801:31" pos:end="1801:31">5</literal> <operator pos:start="1801:33" pos:end="1801:34">||</operator> <name pos:start="1801:36" pos:end="1801:37">op</name> <operator pos:start="1801:39" pos:end="1801:40">==</operator> <literal type="number" pos:start="1801:42" pos:end="1801:43">13</literal> <operator pos:start="1801:45" pos:end="1801:46">||</operator> <operator pos:start="1801:48" pos:end="1801:48">(</operator><name pos:start="1801:49" pos:end="1801:50">op</name> <operator pos:start="1801:52" pos:end="1801:53">&gt;=</operator> <literal type="number" pos:start="1801:55" pos:end="1801:55">8</literal> <operator pos:start="1801:57" pos:end="1801:58">&amp;&amp;</operator> <name pos:start="1801:60" pos:end="1801:61">op</name> <operator pos:start="1801:63" pos:end="1801:64">&lt;=</operator> <literal type="number" pos:start="1801:66" pos:end="1801:67">11</literal><operator pos:start="1801:68" pos:end="1801:68">)</operator></expr>)</condition> <block pos:start="1801:71" pos:end="1853:21">{<block_content pos:start="1805:25" pos:end="1851:60">

                        <comment type="block" pos:start="1803:25" pos:end="1803:42">/* Accumulate.  */</comment>

                        <if_stmt pos:start="1805:25" pos:end="1809:25"><if pos:start="1805:25" pos:end="1809:25">if <condition pos:start="1805:28" pos:end="1805:49">(<expr pos:start="1805:29" pos:end="1805:48"><name pos:start="1805:29" pos:end="1805:30">op</name> <operator pos:start="1805:32" pos:end="1805:33">==</operator> <literal type="number" pos:start="1805:35" pos:end="1805:36">10</literal> <operator pos:start="1805:38" pos:end="1805:39">||</operator> <name pos:start="1805:41" pos:end="1805:42">op</name> <operator pos:start="1805:44" pos:end="1805:45">==</operator> <literal type="number" pos:start="1805:47" pos:end="1805:48">11</literal></expr>)</condition> <block pos:start="1805:51" pos:end="1809:25">{<block_content pos:start="1807:29" pos:end="1807:56">

                            <expr_stmt pos:start="1807:29" pos:end="1807:56"><expr pos:start="1807:29" pos:end="1807:55"><call pos:start="1807:29" pos:end="1807:55"><name pos:start="1807:29" pos:end="1807:41">gen_neon_negl</name><argument_list pos:start="1807:42" pos:end="1807:55">(<argument pos:start="1807:43" pos:end="1807:48"><expr pos:start="1807:43" pos:end="1807:48"><name pos:start="1807:43" pos:end="1807:48">cpu_V0</name></expr></argument>, <argument pos:start="1807:51" pos:end="1807:54"><expr pos:start="1807:51" pos:end="1807:54"><name pos:start="1807:51" pos:end="1807:54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>



                        <if_stmt pos:start="1813:25" pos:end="1817:25"><if pos:start="1813:25" pos:end="1817:25">if <condition pos:start="1813:28" pos:end="1813:37">(<expr pos:start="1813:29" pos:end="1813:36"><name pos:start="1813:29" pos:end="1813:30">op</name> <operator pos:start="1813:32" pos:end="1813:33">!=</operator> <literal type="number" pos:start="1813:35" pos:end="1813:36">13</literal></expr>)</condition> <block pos:start="1813:39" pos:end="1817:25">{<block_content pos:start="1815:29" pos:end="1815:63">

                            <expr_stmt pos:start="1815:29" pos:end="1815:63"><expr pos:start="1815:29" pos:end="1815:62"><call pos:start="1815:29" pos:end="1815:62"><name pos:start="1815:29" pos:end="1815:43">neon_load_reg64</name><argument_list pos:start="1815:44" pos:end="1815:62">(<argument pos:start="1815:45" pos:end="1815:50"><expr pos:start="1815:45" pos:end="1815:50"><name pos:start="1815:45" pos:end="1815:50">cpu_V1</name></expr></argument>, <argument pos:start="1815:53" pos:end="1815:61"><expr pos:start="1815:53" pos:end="1815:61"><name pos:start="1815:53" pos:end="1815:54">rd</name> <operator pos:start="1815:56" pos:end="1815:56">+</operator> <name pos:start="1815:58" pos:end="1815:61">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>



                        <switch pos:start="1821:25" pos:end="1849:25">switch <condition pos:start="1821:32" pos:end="1821:35">(<expr pos:start="1821:33" pos:end="1821:34"><name pos:start="1821:33" pos:end="1821:34">op</name></expr>)</condition> <block pos:start="1821:37" pos:end="1849:25">{<block_content pos:start="1823:25" pos:end="1847:36">

                        <case pos:start="1823:25" pos:end="1823:31">case <expr pos:start="1823:30" pos:end="1823:30"><literal type="number" pos:start="1823:30" pos:end="1823:30">5</literal></expr>:</case> <case pos:start="1823:33" pos:end="1823:39">case <expr pos:start="1823:38" pos:end="1823:38"><literal type="number" pos:start="1823:38" pos:end="1823:38">8</literal></expr>:</case> <case pos:start="1823:41" pos:end="1823:48">case <expr pos:start="1823:46" pos:end="1823:47"><literal type="number" pos:start="1823:46" pos:end="1823:47">10</literal></expr>:</case> <comment type="block" pos:start="1823:50" pos:end="1823:74">/* VABAL, VMLAL, VMLSL */</comment>

                            <expr_stmt pos:start="1825:29" pos:end="1825:48"><expr pos:start="1825:29" pos:end="1825:47"><call pos:start="1825:29" pos:end="1825:47"><name pos:start="1825:29" pos:end="1825:41">gen_neon_addl</name><argument_list pos:start="1825:42" pos:end="1825:47">(<argument pos:start="1825:43" pos:end="1825:46"><expr pos:start="1825:43" pos:end="1825:46"><name pos:start="1825:43" pos:end="1825:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1827:29" pos:end="1827:34">break;</break>

                        <case pos:start="1829:25" pos:end="1829:31">case <expr pos:start="1829:30" pos:end="1829:30"><literal type="number" pos:start="1829:30" pos:end="1829:30">9</literal></expr>:</case> <case pos:start="1829:33" pos:end="1829:40">case <expr pos:start="1829:38" pos:end="1829:39"><literal type="number" pos:start="1829:38" pos:end="1829:39">11</literal></expr>:</case> <comment type="block" pos:start="1829:42" pos:end="1829:63">/* VQDMLAL, VQDMLSL */</comment>

                            <expr_stmt pos:start="1831:29" pos:end="1831:73"><expr pos:start="1831:29" pos:end="1831:72"><call pos:start="1831:29" pos:end="1831:72"><name pos:start="1831:29" pos:end="1831:50">gen_neon_addl_saturate</name><argument_list pos:start="1831:51" pos:end="1831:72">(<argument pos:start="1831:52" pos:end="1831:57"><expr pos:start="1831:52" pos:end="1831:57"><name pos:start="1831:52" pos:end="1831:57">cpu_V0</name></expr></argument>, <argument pos:start="1831:60" pos:end="1831:65"><expr pos:start="1831:60" pos:end="1831:65"><name pos:start="1831:60" pos:end="1831:65">cpu_V0</name></expr></argument>, <argument pos:start="1831:68" pos:end="1831:71"><expr pos:start="1831:68" pos:end="1831:71"><name pos:start="1831:68" pos:end="1831:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1833:29" pos:end="1833:73"><expr pos:start="1833:29" pos:end="1833:72"><call pos:start="1833:29" pos:end="1833:72"><name pos:start="1833:29" pos:end="1833:50">gen_neon_addl_saturate</name><argument_list pos:start="1833:51" pos:end="1833:72">(<argument pos:start="1833:52" pos:end="1833:57"><expr pos:start="1833:52" pos:end="1833:57"><name pos:start="1833:52" pos:end="1833:57">cpu_V0</name></expr></argument>, <argument pos:start="1833:60" pos:end="1833:65"><expr pos:start="1833:60" pos:end="1833:65"><name pos:start="1833:60" pos:end="1833:65">cpu_V1</name></expr></argument>, <argument pos:start="1833:68" pos:end="1833:71"><expr pos:start="1833:68" pos:end="1833:71"><name pos:start="1833:68" pos:end="1833:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1835:29" pos:end="1835:34">break;</break>

                            <comment type="block" pos:start="1837:29" pos:end="1837:48">/* Fall through.  */</comment>

                        <case pos:start="1839:25" pos:end="1839:32">case <expr pos:start="1839:30" pos:end="1839:31"><literal type="number" pos:start="1839:30" pos:end="1839:31">13</literal></expr>:</case> <comment type="block" pos:start="1839:34" pos:end="1839:46">/* VQDMULL */</comment>

                            <expr_stmt pos:start="1841:29" pos:end="1841:73"><expr pos:start="1841:29" pos:end="1841:72"><call pos:start="1841:29" pos:end="1841:72"><name pos:start="1841:29" pos:end="1841:50">gen_neon_addl_saturate</name><argument_list pos:start="1841:51" pos:end="1841:72">(<argument pos:start="1841:52" pos:end="1841:57"><expr pos:start="1841:52" pos:end="1841:57"><name pos:start="1841:52" pos:end="1841:57">cpu_V0</name></expr></argument>, <argument pos:start="1841:60" pos:end="1841:65"><expr pos:start="1841:60" pos:end="1841:65"><name pos:start="1841:60" pos:end="1841:65">cpu_V0</name></expr></argument>, <argument pos:start="1841:68" pos:end="1841:71"><expr pos:start="1841:68" pos:end="1841:71"><name pos:start="1841:68" pos:end="1841:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="1843:29" pos:end="1843:34">break;</break>

                        <default pos:start="1845:25" pos:end="1845:32">default:</default>

                            <expr_stmt pos:start="1847:29" pos:end="1847:36"><expr pos:start="1847:29" pos:end="1847:35"><call pos:start="1847:29" pos:end="1847:35"><name pos:start="1847:29" pos:end="1847:33">abort</name><argument_list pos:start="1847:34" pos:end="1847:35">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="1851:25" pos:end="1851:60"><expr pos:start="1851:25" pos:end="1851:59"><call pos:start="1851:25" pos:end="1851:59"><name pos:start="1851:25" pos:end="1851:40">neon_store_reg64</name><argument_list pos:start="1851:41" pos:end="1851:59">(<argument pos:start="1851:42" pos:end="1851:47"><expr pos:start="1851:42" pos:end="1851:47"><name pos:start="1851:42" pos:end="1851:47">cpu_V0</name></expr></argument>, <argument pos:start="1851:50" pos:end="1851:58"><expr pos:start="1851:50" pos:end="1851:58"><name pos:start="1851:50" pos:end="1851:51">rd</name> <operator pos:start="1851:53" pos:end="1851:53">+</operator> <name pos:start="1851:55" pos:end="1851:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="1853:23" pos:end="1931:21">else if <condition pos:start="1853:31" pos:end="1853:50">(<expr pos:start="1853:32" pos:end="1853:49"><name pos:start="1853:32" pos:end="1853:33">op</name> <operator pos:start="1853:35" pos:end="1853:36">==</operator> <literal type="number" pos:start="1853:38" pos:end="1853:38">4</literal> <operator pos:start="1853:40" pos:end="1853:41">||</operator> <name pos:start="1853:43" pos:end="1853:44">op</name> <operator pos:start="1853:46" pos:end="1853:47">==</operator> <literal type="number" pos:start="1853:49" pos:end="1853:49">6</literal></expr>)</condition> <block pos:start="1853:52" pos:end="1931:21">{<block_content pos:start="1857:25" pos:end="1929:25">

                        <comment type="block" pos:start="1855:25" pos:end="1855:51">/* Narrowing operation.  */</comment>

                        <expr_stmt pos:start="1857:25" pos:end="1857:40"><expr pos:start="1857:25" pos:end="1857:39"><name pos:start="1857:25" pos:end="1857:27">tmp</name> <operator pos:start="1857:29" pos:end="1857:29">=</operator> <call pos:start="1857:31" pos:end="1857:39"><name pos:start="1857:31" pos:end="1857:37">new_tmp</name><argument_list pos:start="1857:38" pos:end="1857:39">()</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1859:25" pos:end="1917:25"><if pos:start="1859:25" pos:end="1887:25">if <condition pos:start="1859:28" pos:end="1859:31">(<expr pos:start="1859:29" pos:end="1859:30"><operator pos:start="1859:29" pos:end="1859:29">!</operator><name pos:start="1859:30" pos:end="1859:30">u</name></expr>)</condition> <block pos:start="1859:33" pos:end="1887:25">{<block_content pos:start="1861:29" pos:end="1885:29">

                            <switch pos:start="1861:29" pos:end="1885:29">switch <condition pos:start="1861:36" pos:end="1861:41">(<expr pos:start="1861:37" pos:end="1861:40"><name pos:start="1861:37" pos:end="1861:40">size</name></expr>)</condition> <block pos:start="1861:43" pos:end="1885:29">{<block_content pos:start="1863:29" pos:end="1883:45">

                            <case pos:start="1863:29" pos:end="1863:35">case <expr pos:start="1863:34" pos:end="1863:34"><literal type="number" pos:start="1863:34" pos:end="1863:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="1865:33" pos:end="1865:76"><expr pos:start="1865:33" pos:end="1865:75"><call pos:start="1865:33" pos:end="1865:75"><name pos:start="1865:33" pos:end="1865:62">gen_helper_neon_narrow_high_u8</name><argument_list pos:start="1865:63" pos:end="1865:75">(<argument pos:start="1865:64" pos:end="1865:66"><expr pos:start="1865:64" pos:end="1865:66"><name pos:start="1865:64" pos:end="1865:66">tmp</name></expr></argument>, <argument pos:start="1865:69" pos:end="1865:74"><expr pos:start="1865:69" pos:end="1865:74"><name pos:start="1865:69" pos:end="1865:74">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1867:33" pos:end="1867:38">break;</break>

                            <case pos:start="1869:29" pos:end="1869:35">case <expr pos:start="1869:34" pos:end="1869:34"><literal type="number" pos:start="1869:34" pos:end="1869:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="1871:33" pos:end="1871:77"><expr pos:start="1871:33" pos:end="1871:76"><call pos:start="1871:33" pos:end="1871:76"><name pos:start="1871:33" pos:end="1871:63">gen_helper_neon_narrow_high_u16</name><argument_list pos:start="1871:64" pos:end="1871:76">(<argument pos:start="1871:65" pos:end="1871:67"><expr pos:start="1871:65" pos:end="1871:67"><name pos:start="1871:65" pos:end="1871:67">tmp</name></expr></argument>, <argument pos:start="1871:70" pos:end="1871:75"><expr pos:start="1871:70" pos:end="1871:75"><name pos:start="1871:70" pos:end="1871:75">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1873:33" pos:end="1873:38">break;</break>

                            <case pos:start="1875:29" pos:end="1875:35">case <expr pos:start="1875:34" pos:end="1875:34"><literal type="number" pos:start="1875:34" pos:end="1875:34">2</literal></expr>:</case>

                                <expr_stmt pos:start="1877:33" pos:end="1877:69"><expr pos:start="1877:33" pos:end="1877:68"><call pos:start="1877:33" pos:end="1877:68"><name pos:start="1877:33" pos:end="1877:48">tcg_gen_shri_i64</name><argument_list pos:start="1877:49" pos:end="1877:68">(<argument pos:start="1877:50" pos:end="1877:55"><expr pos:start="1877:50" pos:end="1877:55"><name pos:start="1877:50" pos:end="1877:55">cpu_V0</name></expr></argument>, <argument pos:start="1877:58" pos:end="1877:63"><expr pos:start="1877:58" pos:end="1877:63"><name pos:start="1877:58" pos:end="1877:63">cpu_V0</name></expr></argument>, <argument pos:start="1877:66" pos:end="1877:67"><expr pos:start="1877:66" pos:end="1877:67"><literal type="number" pos:start="1877:66" pos:end="1877:67">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="1879:33" pos:end="1879:67"><expr pos:start="1879:33" pos:end="1879:66"><call pos:start="1879:33" pos:end="1879:66"><name pos:start="1879:33" pos:end="1879:53">tcg_gen_trunc_i64_i32</name><argument_list pos:start="1879:54" pos:end="1879:66">(<argument pos:start="1879:55" pos:end="1879:57"><expr pos:start="1879:55" pos:end="1879:57"><name pos:start="1879:55" pos:end="1879:57">tmp</name></expr></argument>, <argument pos:start="1879:60" pos:end="1879:65"><expr pos:start="1879:60" pos:end="1879:65"><name pos:start="1879:60" pos:end="1879:65">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1881:33" pos:end="1881:38">break;</break>

                            <default pos:start="1883:29" pos:end="1883:36">default:</default> <expr_stmt pos:start="1883:38" pos:end="1883:45"><expr pos:start="1883:38" pos:end="1883:44"><call pos:start="1883:38" pos:end="1883:44"><name pos:start="1883:38" pos:end="1883:42">abort</name><argument_list pos:start="1883:43" pos:end="1883:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                        </block_content>}</block></if> <else pos:start="1887:27" pos:end="1917:25">else <block pos:start="1887:32" pos:end="1917:25">{<block_content pos:start="1889:29" pos:end="1915:29">

                            <switch pos:start="1889:29" pos:end="1915:29">switch <condition pos:start="1889:36" pos:end="1889:41">(<expr pos:start="1889:37" pos:end="1889:40"><name pos:start="1889:37" pos:end="1889:40">size</name></expr>)</condition> <block pos:start="1889:43" pos:end="1915:29">{<block_content pos:start="1891:29" pos:end="1913:45">

                            <case pos:start="1891:29" pos:end="1891:35">case <expr pos:start="1891:34" pos:end="1891:34"><literal type="number" pos:start="1891:34" pos:end="1891:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="1893:33" pos:end="1893:82"><expr pos:start="1893:33" pos:end="1893:81"><call pos:start="1893:33" pos:end="1893:81"><name pos:start="1893:33" pos:end="1893:68">gen_helper_neon_narrow_round_high_u8</name><argument_list pos:start="1893:69" pos:end="1893:81">(<argument pos:start="1893:70" pos:end="1893:72"><expr pos:start="1893:70" pos:end="1893:72"><name pos:start="1893:70" pos:end="1893:72">tmp</name></expr></argument>, <argument pos:start="1893:75" pos:end="1893:80"><expr pos:start="1893:75" pos:end="1893:80"><name pos:start="1893:75" pos:end="1893:80">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1895:33" pos:end="1895:38">break;</break>

                            <case pos:start="1897:29" pos:end="1897:35">case <expr pos:start="1897:34" pos:end="1897:34"><literal type="number" pos:start="1897:34" pos:end="1897:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="1899:33" pos:end="1899:83"><expr pos:start="1899:33" pos:end="1899:82"><call pos:start="1899:33" pos:end="1899:82"><name pos:start="1899:33" pos:end="1899:69">gen_helper_neon_narrow_round_high_u16</name><argument_list pos:start="1899:70" pos:end="1899:82">(<argument pos:start="1899:71" pos:end="1899:73"><expr pos:start="1899:71" pos:end="1899:73"><name pos:start="1899:71" pos:end="1899:73">tmp</name></expr></argument>, <argument pos:start="1899:76" pos:end="1899:81"><expr pos:start="1899:76" pos:end="1899:81"><name pos:start="1899:76" pos:end="1899:81">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1901:33" pos:end="1901:38">break;</break>

                            <case pos:start="1903:29" pos:end="1903:35">case <expr pos:start="1903:34" pos:end="1903:34"><literal type="number" pos:start="1903:34" pos:end="1903:34">2</literal></expr>:</case>

                                <expr_stmt pos:start="1905:33" pos:end="1905:75"><expr pos:start="1905:33" pos:end="1905:74"><call pos:start="1905:33" pos:end="1905:74"><name pos:start="1905:33" pos:end="1905:48">tcg_gen_addi_i64</name><argument_list pos:start="1905:49" pos:end="1905:74">(<argument pos:start="1905:50" pos:end="1905:55"><expr pos:start="1905:50" pos:end="1905:55"><name pos:start="1905:50" pos:end="1905:55">cpu_V0</name></expr></argument>, <argument pos:start="1905:58" pos:end="1905:63"><expr pos:start="1905:58" pos:end="1905:63"><name pos:start="1905:58" pos:end="1905:63">cpu_V0</name></expr></argument>, <argument pos:start="1905:66" pos:end="1905:73"><expr pos:start="1905:66" pos:end="1905:73"><literal type="number" pos:start="1905:66" pos:end="1905:67">1u</literal> <operator pos:start="1905:69" pos:end="1905:70">&lt;&lt;</operator> <literal type="number" pos:start="1905:72" pos:end="1905:73">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="1907:33" pos:end="1907:69"><expr pos:start="1907:33" pos:end="1907:68"><call pos:start="1907:33" pos:end="1907:68"><name pos:start="1907:33" pos:end="1907:48">tcg_gen_shri_i64</name><argument_list pos:start="1907:49" pos:end="1907:68">(<argument pos:start="1907:50" pos:end="1907:55"><expr pos:start="1907:50" pos:end="1907:55"><name pos:start="1907:50" pos:end="1907:55">cpu_V0</name></expr></argument>, <argument pos:start="1907:58" pos:end="1907:63"><expr pos:start="1907:58" pos:end="1907:63"><name pos:start="1907:58" pos:end="1907:63">cpu_V0</name></expr></argument>, <argument pos:start="1907:66" pos:end="1907:67"><expr pos:start="1907:66" pos:end="1907:67"><literal type="number" pos:start="1907:66" pos:end="1907:67">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <expr_stmt pos:start="1909:33" pos:end="1909:67"><expr pos:start="1909:33" pos:end="1909:66"><call pos:start="1909:33" pos:end="1909:66"><name pos:start="1909:33" pos:end="1909:53">tcg_gen_trunc_i64_i32</name><argument_list pos:start="1909:54" pos:end="1909:66">(<argument pos:start="1909:55" pos:end="1909:57"><expr pos:start="1909:55" pos:end="1909:57"><name pos:start="1909:55" pos:end="1909:57">tmp</name></expr></argument>, <argument pos:start="1909:60" pos:end="1909:65"><expr pos:start="1909:60" pos:end="1909:65"><name pos:start="1909:60" pos:end="1909:65">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="1911:33" pos:end="1911:38">break;</break>

                            <default pos:start="1913:29" pos:end="1913:36">default:</default> <expr_stmt pos:start="1913:38" pos:end="1913:45"><expr pos:start="1913:38" pos:end="1913:44"><call pos:start="1913:38" pos:end="1913:44"><name pos:start="1913:38" pos:end="1913:42">abort</name><argument_list pos:start="1913:43" pos:end="1913:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                        </block_content>}</block></else></if_stmt>

                        <if_stmt pos:start="1919:25" pos:end="1929:25"><if pos:start="1919:25" pos:end="1923:25">if <condition pos:start="1919:28" pos:end="1919:38">(<expr pos:start="1919:29" pos:end="1919:37"><name pos:start="1919:29" pos:end="1919:32">pass</name> <operator pos:start="1919:34" pos:end="1919:35">==</operator> <literal type="number" pos:start="1919:37" pos:end="1919:37">0</literal></expr>)</condition> <block pos:start="1919:40" pos:end="1923:25">{<block_content pos:start="1921:29" pos:end="1921:39">

                            <expr_stmt pos:start="1921:29" pos:end="1921:39"><expr pos:start="1921:29" pos:end="1921:38"><name pos:start="1921:29" pos:end="1921:32">tmp3</name> <operator pos:start="1921:34" pos:end="1921:34">=</operator> <name pos:start="1921:36" pos:end="1921:38">tmp</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="1923:27" pos:end="1929:25">else <block pos:start="1923:32" pos:end="1929:25">{<block_content pos:start="1925:29" pos:end="1927:55">

                            <expr_stmt pos:start="1925:29" pos:end="1925:56"><expr pos:start="1925:29" pos:end="1925:55"><call pos:start="1925:29" pos:end="1925:55"><name pos:start="1925:29" pos:end="1925:42">neon_store_reg</name><argument_list pos:start="1925:43" pos:end="1925:55">(<argument pos:start="1925:44" pos:end="1925:45"><expr pos:start="1925:44" pos:end="1925:45"><name pos:start="1925:44" pos:end="1925:45">rd</name></expr></argument>, <argument pos:start="1925:48" pos:end="1925:48"><expr pos:start="1925:48" pos:end="1925:48"><literal type="number" pos:start="1925:48" pos:end="1925:48">0</literal></expr></argument>, <argument pos:start="1925:51" pos:end="1925:54"><expr pos:start="1925:51" pos:end="1925:54"><name pos:start="1925:51" pos:end="1925:54">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="1927:29" pos:end="1927:55"><expr pos:start="1927:29" pos:end="1927:54"><call pos:start="1927:29" pos:end="1927:54"><name pos:start="1927:29" pos:end="1927:42">neon_store_reg</name><argument_list pos:start="1927:43" pos:end="1927:54">(<argument pos:start="1927:44" pos:end="1927:45"><expr pos:start="1927:44" pos:end="1927:45"><name pos:start="1927:44" pos:end="1927:45">rd</name></expr></argument>, <argument pos:start="1927:48" pos:end="1927:48"><expr pos:start="1927:48" pos:end="1927:48"><literal type="number" pos:start="1927:48" pos:end="1927:48">1</literal></expr></argument>, <argument pos:start="1927:51" pos:end="1927:53"><expr pos:start="1927:51" pos:end="1927:53"><name pos:start="1927:51" pos:end="1927:53">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="1931:23" pos:end="1937:21">else <block pos:start="1931:28" pos:end="1937:21">{<block_content pos:start="1935:25" pos:end="1935:60">

                        <comment type="block" pos:start="1933:25" pos:end="1933:53">/* Write back the result.  */</comment>

                        <expr_stmt pos:start="1935:25" pos:end="1935:60"><expr pos:start="1935:25" pos:end="1935:59"><call pos:start="1935:25" pos:end="1935:59"><name pos:start="1935:25" pos:end="1935:40">neon_store_reg64</name><argument_list pos:start="1935:41" pos:end="1935:59">(<argument pos:start="1935:42" pos:end="1935:47"><expr pos:start="1935:42" pos:end="1935:47"><name pos:start="1935:42" pos:end="1935:47">cpu_V0</name></expr></argument>, <argument pos:start="1935:50" pos:end="1935:58"><expr pos:start="1935:50" pos:end="1935:58"><name pos:start="1935:50" pos:end="1935:51">rd</name> <operator pos:start="1935:53" pos:end="1935:53">+</operator> <name pos:start="1935:55" pos:end="1935:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="1941:15" pos:end="2177:13">else <block pos:start="1941:20" pos:end="2177:13">{<block_content pos:start="1945:17" pos:end="2175:17">

                <comment type="block" pos:start="1943:17" pos:end="1943:50">/* Two registers and a scalar.  */</comment>

                <switch pos:start="1945:17" pos:end="2175:17">switch <condition pos:start="1945:24" pos:end="1945:27">(<expr pos:start="1945:25" pos:end="1945:26"><name pos:start="1945:25" pos:end="1945:26">op</name></expr>)</condition> <block pos:start="1945:29" pos:end="2175:17">{<block_content pos:start="1947:17" pos:end="2173:29">

                <case pos:start="1947:17" pos:end="1947:23">case <expr pos:start="1947:22" pos:end="1947:22"><literal type="number" pos:start="1947:22" pos:end="1947:22">0</literal></expr>:</case> <comment type="block" pos:start="1947:25" pos:end="1947:49">/* Integer VMLA scalar */</comment>

                <case pos:start="1949:17" pos:end="1949:23">case <expr pos:start="1949:22" pos:end="1949:22"><literal type="number" pos:start="1949:22" pos:end="1949:22">1</literal></expr>:</case> <comment type="block" pos:start="1949:25" pos:end="1949:47">/* Float VMLA scalar */</comment>

                <case pos:start="1951:17" pos:end="1951:23">case <expr pos:start="1951:22" pos:end="1951:22"><literal type="number" pos:start="1951:22" pos:end="1951:22">4</literal></expr>:</case> <comment type="block" pos:start="1951:25" pos:end="1951:49">/* Integer VMLS scalar */</comment>

                <case pos:start="1953:17" pos:end="1953:23">case <expr pos:start="1953:22" pos:end="1953:22"><literal type="number" pos:start="1953:22" pos:end="1953:22">5</literal></expr>:</case> <comment type="block" pos:start="1953:25" pos:end="1953:56">/* Floating point VMLS scalar */</comment>

                <case pos:start="1955:17" pos:end="1955:23">case <expr pos:start="1955:22" pos:end="1955:22"><literal type="number" pos:start="1955:22" pos:end="1955:22">8</literal></expr>:</case> <comment type="block" pos:start="1955:25" pos:end="1955:49">/* Integer VMUL scalar */</comment>

                <case pos:start="1957:17" pos:end="1957:23">case <expr pos:start="1957:22" pos:end="1957:22"><literal type="number" pos:start="1957:22" pos:end="1957:22">9</literal></expr>:</case> <comment type="block" pos:start="1957:25" pos:end="1957:56">/* Floating point VMUL scalar */</comment>

                <case pos:start="1959:17" pos:end="1959:24">case <expr pos:start="1959:22" pos:end="1959:23"><literal type="number" pos:start="1959:22" pos:end="1959:23">12</literal></expr>:</case> <comment type="block" pos:start="1959:26" pos:end="1959:45">/* VQDMULH scalar */</comment>

                <case pos:start="1961:17" pos:end="1961:24">case <expr pos:start="1961:22" pos:end="1961:23"><literal type="number" pos:start="1961:22" pos:end="1961:23">13</literal></expr>:</case> <comment type="block" pos:start="1961:26" pos:end="1961:46">/* VQRDMULH scalar */</comment>

                    <expr_stmt pos:start="1963:21" pos:end="1963:52"><expr pos:start="1963:21" pos:end="1963:51"><name pos:start="1963:21" pos:end="1963:23">tmp</name> <operator pos:start="1963:25" pos:end="1963:25">=</operator> <call pos:start="1963:27" pos:end="1963:51"><name pos:start="1963:27" pos:end="1963:41">neon_get_scalar</name><argument_list pos:start="1963:42" pos:end="1963:51">(<argument pos:start="1963:43" pos:end="1963:46"><expr pos:start="1963:43" pos:end="1963:46"><name pos:start="1963:43" pos:end="1963:46">size</name></expr></argument>, <argument pos:start="1963:49" pos:end="1963:50"><expr pos:start="1963:49" pos:end="1963:50"><name pos:start="1963:49" pos:end="1963:50">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1965:21" pos:end="1965:47"><expr pos:start="1965:21" pos:end="1965:46"><call pos:start="1965:21" pos:end="1965:46"><name pos:start="1965:21" pos:end="1965:38">neon_store_scratch</name><argument_list pos:start="1965:39" pos:end="1965:46">(<argument pos:start="1965:40" pos:end="1965:40"><expr pos:start="1965:40" pos:end="1965:40"><literal type="number" pos:start="1965:40" pos:end="1965:40">0</literal></expr></argument>, <argument pos:start="1965:43" pos:end="1965:45"><expr pos:start="1965:43" pos:end="1965:45"><name pos:start="1965:43" pos:end="1965:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="1967:21" pos:end="2063:21">for <control pos:start="1967:25" pos:end="1967:62">(<init pos:start="1967:26" pos:end="1967:34"><expr pos:start="1967:26" pos:end="1967:33"><name pos:start="1967:26" pos:end="1967:29">pass</name> <operator pos:start="1967:31" pos:end="1967:31">=</operator> <literal type="number" pos:start="1967:33" pos:end="1967:33">0</literal></expr>;</init> <condition pos:start="1967:36" pos:end="1967:54"><expr pos:start="1967:36" pos:end="1967:53"><name pos:start="1967:36" pos:end="1967:39">pass</name> <operator pos:start="1967:41" pos:end="1967:41">&lt;</operator> <operator pos:start="1967:43" pos:end="1967:43">(</operator><ternary pos:start="1967:44" pos:end="1967:52"><condition pos:start="1967:44" pos:end="1967:46"><expr pos:start="1967:44" pos:end="1967:44"><name pos:start="1967:44" pos:end="1967:44">u</name></expr> ?</condition><then pos:start="1967:48" pos:end="1967:48"> <expr pos:start="1967:48" pos:end="1967:48"><literal type="number" pos:start="1967:48" pos:end="1967:48">4</literal></expr> </then><else pos:start="1967:50" pos:end="1967:52">: <expr pos:start="1967:52" pos:end="1967:52"><literal type="number" pos:start="1967:52" pos:end="1967:52">2</literal></expr></else></ternary><operator pos:start="1967:53" pos:end="1967:53">)</operator></expr>;</condition> <incr pos:start="1967:56" pos:end="1967:61"><expr pos:start="1967:56" pos:end="1967:61"><name pos:start="1967:56" pos:end="1967:59">pass</name><operator pos:start="1967:60" pos:end="1967:61">++</operator></expr></incr>)</control> <block pos:start="1967:64" pos:end="2063:21">{<block_content pos:start="1969:25" pos:end="2061:54">

                        <expr_stmt pos:start="1969:25" pos:end="1969:51"><expr pos:start="1969:25" pos:end="1969:50"><name pos:start="1969:25" pos:end="1969:27">tmp</name> <operator pos:start="1969:29" pos:end="1969:29">=</operator> <call pos:start="1969:31" pos:end="1969:50"><name pos:start="1969:31" pos:end="1969:47">neon_load_scratch</name><argument_list pos:start="1969:48" pos:end="1969:50">(<argument pos:start="1969:49" pos:end="1969:49"><expr pos:start="1969:49" pos:end="1969:49"><literal type="number" pos:start="1969:49" pos:end="1969:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1971:25" pos:end="1971:55"><expr pos:start="1971:25" pos:end="1971:54"><name pos:start="1971:25" pos:end="1971:28">tmp2</name> <operator pos:start="1971:30" pos:end="1971:30">=</operator> <call pos:start="1971:32" pos:end="1971:54"><name pos:start="1971:32" pos:end="1971:44">neon_load_reg</name><argument_list pos:start="1971:45" pos:end="1971:54">(<argument pos:start="1971:46" pos:end="1971:47"><expr pos:start="1971:46" pos:end="1971:47"><name pos:start="1971:46" pos:end="1971:47">rn</name></expr></argument>, <argument pos:start="1971:50" pos:end="1971:53"><expr pos:start="1971:50" pos:end="1971:53"><name pos:start="1971:50" pos:end="1971:53">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="1973:25" pos:end="2015:25"><if pos:start="1973:25" pos:end="1985:25">if <condition pos:start="1973:28" pos:end="1973:37">(<expr pos:start="1973:29" pos:end="1973:36"><name pos:start="1973:29" pos:end="1973:30">op</name> <operator pos:start="1973:32" pos:end="1973:33">==</operator> <literal type="number" pos:start="1973:35" pos:end="1973:36">12</literal></expr>)</condition> <block pos:start="1973:39" pos:end="1985:25">{<block_content pos:start="1975:29" pos:end="1983:29">

                            <if_stmt pos:start="1975:29" pos:end="1983:29"><if pos:start="1975:29" pos:end="1979:29">if <condition pos:start="1975:32" pos:end="1975:42">(<expr pos:start="1975:33" pos:end="1975:41"><name pos:start="1975:33" pos:end="1975:36">size</name> <operator pos:start="1975:38" pos:end="1975:39">==</operator> <literal type="number" pos:start="1975:41" pos:end="1975:41">1</literal></expr>)</condition> <block pos:start="1975:44" pos:end="1979:29">{<block_content pos:start="1977:33" pos:end="1977:84">

                                <expr_stmt pos:start="1977:33" pos:end="1977:84"><expr pos:start="1977:33" pos:end="1977:83"><call pos:start="1977:33" pos:end="1977:83"><name pos:start="1977:33" pos:end="1977:58">gen_helper_neon_qdmulh_s16</name><argument_list pos:start="1977:59" pos:end="1977:83">(<argument pos:start="1977:60" pos:end="1977:62"><expr pos:start="1977:60" pos:end="1977:62"><name pos:start="1977:60" pos:end="1977:62">tmp</name></expr></argument>, <argument pos:start="1977:65" pos:end="1977:71"><expr pos:start="1977:65" pos:end="1977:71"><name pos:start="1977:65" pos:end="1977:71">cpu_env</name></expr></argument>, <argument pos:start="1977:74" pos:end="1977:76"><expr pos:start="1977:74" pos:end="1977:76"><name pos:start="1977:74" pos:end="1977:76">tmp</name></expr></argument>, <argument pos:start="1977:79" pos:end="1977:82"><expr pos:start="1977:79" pos:end="1977:82"><name pos:start="1977:79" pos:end="1977:82">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1979:31" pos:end="1983:29">else <block pos:start="1979:36" pos:end="1983:29">{<block_content pos:start="1981:33" pos:end="1981:84">

                                <expr_stmt pos:start="1981:33" pos:end="1981:84"><expr pos:start="1981:33" pos:end="1981:83"><call pos:start="1981:33" pos:end="1981:83"><name pos:start="1981:33" pos:end="1981:58">gen_helper_neon_qdmulh_s32</name><argument_list pos:start="1981:59" pos:end="1981:83">(<argument pos:start="1981:60" pos:end="1981:62"><expr pos:start="1981:60" pos:end="1981:62"><name pos:start="1981:60" pos:end="1981:62">tmp</name></expr></argument>, <argument pos:start="1981:65" pos:end="1981:71"><expr pos:start="1981:65" pos:end="1981:71"><name pos:start="1981:65" pos:end="1981:71">cpu_env</name></expr></argument>, <argument pos:start="1981:74" pos:end="1981:76"><expr pos:start="1981:74" pos:end="1981:76"><name pos:start="1981:74" pos:end="1981:76">tmp</name></expr></argument>, <argument pos:start="1981:79" pos:end="1981:82"><expr pos:start="1981:79" pos:end="1981:82"><name pos:start="1981:79" pos:end="1981:82">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="1985:27" pos:end="1997:25">else if <condition pos:start="1985:35" pos:end="1985:44">(<expr pos:start="1985:36" pos:end="1985:43"><name pos:start="1985:36" pos:end="1985:37">op</name> <operator pos:start="1985:39" pos:end="1985:40">==</operator> <literal type="number" pos:start="1985:42" pos:end="1985:43">13</literal></expr>)</condition> <block pos:start="1985:46" pos:end="1997:25">{<block_content pos:start="1987:29" pos:end="1995:29">

                            <if_stmt pos:start="1987:29" pos:end="1995:29"><if pos:start="1987:29" pos:end="1991:29">if <condition pos:start="1987:32" pos:end="1987:42">(<expr pos:start="1987:33" pos:end="1987:41"><name pos:start="1987:33" pos:end="1987:36">size</name> <operator pos:start="1987:38" pos:end="1987:39">==</operator> <literal type="number" pos:start="1987:41" pos:end="1987:41">1</literal></expr>)</condition> <block pos:start="1987:44" pos:end="1991:29">{<block_content pos:start="1989:33" pos:end="1989:85">

                                <expr_stmt pos:start="1989:33" pos:end="1989:85"><expr pos:start="1989:33" pos:end="1989:84"><call pos:start="1989:33" pos:end="1989:84"><name pos:start="1989:33" pos:end="1989:59">gen_helper_neon_qrdmulh_s16</name><argument_list pos:start="1989:60" pos:end="1989:84">(<argument pos:start="1989:61" pos:end="1989:63"><expr pos:start="1989:61" pos:end="1989:63"><name pos:start="1989:61" pos:end="1989:63">tmp</name></expr></argument>, <argument pos:start="1989:66" pos:end="1989:72"><expr pos:start="1989:66" pos:end="1989:72"><name pos:start="1989:66" pos:end="1989:72">cpu_env</name></expr></argument>, <argument pos:start="1989:75" pos:end="1989:77"><expr pos:start="1989:75" pos:end="1989:77"><name pos:start="1989:75" pos:end="1989:77">tmp</name></expr></argument>, <argument pos:start="1989:80" pos:end="1989:83"><expr pos:start="1989:80" pos:end="1989:83"><name pos:start="1989:80" pos:end="1989:83">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></if> <else pos:start="1991:31" pos:end="1995:29">else <block pos:start="1991:36" pos:end="1995:29">{<block_content pos:start="1993:33" pos:end="1993:85">

                                <expr_stmt pos:start="1993:33" pos:end="1993:85"><expr pos:start="1993:33" pos:end="1993:84"><call pos:start="1993:33" pos:end="1993:84"><name pos:start="1993:33" pos:end="1993:59">gen_helper_neon_qrdmulh_s32</name><argument_list pos:start="1993:60" pos:end="1993:84">(<argument pos:start="1993:61" pos:end="1993:63"><expr pos:start="1993:61" pos:end="1993:63"><name pos:start="1993:61" pos:end="1993:63">tmp</name></expr></argument>, <argument pos:start="1993:66" pos:end="1993:72"><expr pos:start="1993:66" pos:end="1993:72"><name pos:start="1993:66" pos:end="1993:72">cpu_env</name></expr></argument>, <argument pos:start="1993:75" pos:end="1993:77"><expr pos:start="1993:75" pos:end="1993:77"><name pos:start="1993:75" pos:end="1993:77">tmp</name></expr></argument>, <argument pos:start="1993:80" pos:end="1993:83"><expr pos:start="1993:80" pos:end="1993:83"><name pos:start="1993:80" pos:end="1993:83">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="1997:27" pos:end="2001:25">else if <condition pos:start="1997:35" pos:end="1997:42">(<expr pos:start="1997:36" pos:end="1997:41"><name pos:start="1997:36" pos:end="1997:37">op</name> <operator pos:start="1997:39" pos:end="1997:39">&amp;</operator> <literal type="number" pos:start="1997:41" pos:end="1997:41">1</literal></expr>)</condition> <block pos:start="1997:44" pos:end="2001:25">{<block_content pos:start="1999:29" pos:end="1999:68">

                            <expr_stmt pos:start="1999:29" pos:end="1999:68"><expr pos:start="1999:29" pos:end="1999:67"><call pos:start="1999:29" pos:end="1999:67"><name pos:start="1999:29" pos:end="1999:51">gen_helper_neon_mul_f32</name><argument_list pos:start="1999:52" pos:end="1999:67">(<argument pos:start="1999:53" pos:end="1999:55"><expr pos:start="1999:53" pos:end="1999:55"><name pos:start="1999:53" pos:end="1999:55">tmp</name></expr></argument>, <argument pos:start="1999:58" pos:end="1999:60"><expr pos:start="1999:58" pos:end="1999:60"><name pos:start="1999:58" pos:end="1999:60">tmp</name></expr></argument>, <argument pos:start="1999:63" pos:end="1999:66"><expr pos:start="1999:63" pos:end="1999:66"><name pos:start="1999:63" pos:end="1999:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2001:27" pos:end="2015:25">else <block pos:start="2001:32" pos:end="2015:25">{<block_content pos:start="2003:29" pos:end="2013:29">

                            <switch pos:start="2003:29" pos:end="2013:29">switch <condition pos:start="2003:36" pos:end="2003:41">(<expr pos:start="2003:37" pos:end="2003:40"><name pos:start="2003:37" pos:end="2003:40">size</name></expr>)</condition> <block pos:start="2003:43" pos:end="2013:29">{<block_content pos:start="2005:29" pos:end="2011:46">

                            <case pos:start="2005:29" pos:end="2005:35">case <expr pos:start="2005:34" pos:end="2005:34"><literal type="number" pos:start="2005:34" pos:end="2005:34">0</literal></expr>:</case> <expr_stmt pos:start="2005:37" pos:end="2005:75"><expr pos:start="2005:37" pos:end="2005:74"><call pos:start="2005:37" pos:end="2005:74"><name pos:start="2005:37" pos:end="2005:58">gen_helper_neon_mul_u8</name><argument_list pos:start="2005:59" pos:end="2005:74">(<argument pos:start="2005:60" pos:end="2005:62"><expr pos:start="2005:60" pos:end="2005:62"><name pos:start="2005:60" pos:end="2005:62">tmp</name></expr></argument>, <argument pos:start="2005:65" pos:end="2005:67"><expr pos:start="2005:65" pos:end="2005:67"><name pos:start="2005:65" pos:end="2005:67">tmp</name></expr></argument>, <argument pos:start="2005:70" pos:end="2005:73"><expr pos:start="2005:70" pos:end="2005:73"><name pos:start="2005:70" pos:end="2005:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2005:77" pos:end="2005:82">break;</break>

                            <case pos:start="2007:29" pos:end="2007:35">case <expr pos:start="2007:34" pos:end="2007:34"><literal type="number" pos:start="2007:34" pos:end="2007:34">1</literal></expr>:</case> <expr_stmt pos:start="2007:37" pos:end="2007:76"><expr pos:start="2007:37" pos:end="2007:75"><call pos:start="2007:37" pos:end="2007:75"><name pos:start="2007:37" pos:end="2007:59">gen_helper_neon_mul_u16</name><argument_list pos:start="2007:60" pos:end="2007:75">(<argument pos:start="2007:61" pos:end="2007:63"><expr pos:start="2007:61" pos:end="2007:63"><name pos:start="2007:61" pos:end="2007:63">tmp</name></expr></argument>, <argument pos:start="2007:66" pos:end="2007:68"><expr pos:start="2007:66" pos:end="2007:68"><name pos:start="2007:66" pos:end="2007:68">tmp</name></expr></argument>, <argument pos:start="2007:71" pos:end="2007:74"><expr pos:start="2007:71" pos:end="2007:74"><name pos:start="2007:71" pos:end="2007:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2007:78" pos:end="2007:83">break;</break>

                            <case pos:start="2009:29" pos:end="2009:35">case <expr pos:start="2009:34" pos:end="2009:34"><literal type="number" pos:start="2009:34" pos:end="2009:34">2</literal></expr>:</case> <expr_stmt pos:start="2009:37" pos:end="2009:68"><expr pos:start="2009:37" pos:end="2009:67"><call pos:start="2009:37" pos:end="2009:67"><name pos:start="2009:37" pos:end="2009:51">tcg_gen_mul_i32</name><argument_list pos:start="2009:52" pos:end="2009:67">(<argument pos:start="2009:53" pos:end="2009:55"><expr pos:start="2009:53" pos:end="2009:55"><name pos:start="2009:53" pos:end="2009:55">tmp</name></expr></argument>, <argument pos:start="2009:58" pos:end="2009:60"><expr pos:start="2009:58" pos:end="2009:60"><name pos:start="2009:58" pos:end="2009:60">tmp</name></expr></argument>, <argument pos:start="2009:63" pos:end="2009:66"><expr pos:start="2009:63" pos:end="2009:66"><name pos:start="2009:63" pos:end="2009:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2009:70" pos:end="2009:75">break;</break>

                            <default pos:start="2011:29" pos:end="2011:36">default:</default> <return pos:start="2011:38" pos:end="2011:46">return <expr pos:start="2011:45" pos:end="2011:45"><literal type="number" pos:start="2011:45" pos:end="2011:45">1</literal></expr>;</return>

                            </block_content>}</block></switch>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2017:25" pos:end="2017:39"><expr pos:start="2017:25" pos:end="2017:38"><call pos:start="2017:25" pos:end="2017:38"><name pos:start="2017:25" pos:end="2017:32">dead_tmp</name><argument_list pos:start="2017:33" pos:end="2017:38">(<argument pos:start="2017:34" pos:end="2017:37"><expr pos:start="2017:34" pos:end="2017:37"><name pos:start="2017:34" pos:end="2017:37">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2019:25" pos:end="2059:25"><if pos:start="2019:25" pos:end="2059:25">if <condition pos:start="2019:28" pos:end="2019:35">(<expr pos:start="2019:29" pos:end="2019:34"><name pos:start="2019:29" pos:end="2019:30">op</name> <operator pos:start="2019:32" pos:end="2019:32">&lt;</operator> <literal type="number" pos:start="2019:34" pos:end="2019:34">8</literal></expr>)</condition> <block pos:start="2019:37" pos:end="2059:25">{<block_content pos:start="2023:29" pos:end="2057:43">

                            <comment type="block" pos:start="2021:29" pos:end="2021:46">/* Accumulate.  */</comment>

                            <expr_stmt pos:start="2023:29" pos:end="2023:59"><expr pos:start="2023:29" pos:end="2023:58"><name pos:start="2023:29" pos:end="2023:32">tmp2</name> <operator pos:start="2023:34" pos:end="2023:34">=</operator> <call pos:start="2023:36" pos:end="2023:58"><name pos:start="2023:36" pos:end="2023:48">neon_load_reg</name><argument_list pos:start="2023:49" pos:end="2023:58">(<argument pos:start="2023:50" pos:end="2023:51"><expr pos:start="2023:50" pos:end="2023:51"><name pos:start="2023:50" pos:end="2023:51">rd</name></expr></argument>, <argument pos:start="2023:54" pos:end="2023:57"><expr pos:start="2023:54" pos:end="2023:57"><name pos:start="2023:54" pos:end="2023:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="2025:29" pos:end="2055:29">switch <condition pos:start="2025:36" pos:end="2025:39">(<expr pos:start="2025:37" pos:end="2025:38"><name pos:start="2025:37" pos:end="2025:38">op</name></expr>)</condition> <block pos:start="2025:41" pos:end="2055:29">{<block_content pos:start="2027:29" pos:end="2053:40">

                            <case pos:start="2027:29" pos:end="2027:35">case <expr pos:start="2027:34" pos:end="2027:34"><literal type="number" pos:start="2027:34" pos:end="2027:34">0</literal></expr>:</case>

                                <expr_stmt pos:start="2029:33" pos:end="2029:62"><expr pos:start="2029:33" pos:end="2029:61"><call pos:start="2029:33" pos:end="2029:61"><name pos:start="2029:33" pos:end="2029:44">gen_neon_add</name><argument_list pos:start="2029:45" pos:end="2029:61">(<argument pos:start="2029:46" pos:end="2029:49"><expr pos:start="2029:46" pos:end="2029:49"><name pos:start="2029:46" pos:end="2029:49">size</name></expr></argument>, <argument pos:start="2029:52" pos:end="2029:54"><expr pos:start="2029:52" pos:end="2029:54"><name pos:start="2029:52" pos:end="2029:54">tmp</name></expr></argument>, <argument pos:start="2029:57" pos:end="2029:60"><expr pos:start="2029:57" pos:end="2029:60"><name pos:start="2029:57" pos:end="2029:60">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2031:33" pos:end="2031:38">break;</break>

                            <case pos:start="2033:29" pos:end="2033:35">case <expr pos:start="2033:34" pos:end="2033:34"><literal type="number" pos:start="2033:34" pos:end="2033:34">1</literal></expr>:</case>

                                <expr_stmt pos:start="2035:33" pos:end="2035:72"><expr pos:start="2035:33" pos:end="2035:71"><call pos:start="2035:33" pos:end="2035:71"><name pos:start="2035:33" pos:end="2035:55">gen_helper_neon_add_f32</name><argument_list pos:start="2035:56" pos:end="2035:71">(<argument pos:start="2035:57" pos:end="2035:59"><expr pos:start="2035:57" pos:end="2035:59"><name pos:start="2035:57" pos:end="2035:59">tmp</name></expr></argument>, <argument pos:start="2035:62" pos:end="2035:64"><expr pos:start="2035:62" pos:end="2035:64"><name pos:start="2035:62" pos:end="2035:64">tmp</name></expr></argument>, <argument pos:start="2035:67" pos:end="2035:70"><expr pos:start="2035:67" pos:end="2035:70"><name pos:start="2035:67" pos:end="2035:70">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2037:33" pos:end="2037:38">break;</break>

                            <case pos:start="2039:29" pos:end="2039:35">case <expr pos:start="2039:34" pos:end="2039:34"><literal type="number" pos:start="2039:34" pos:end="2039:34">4</literal></expr>:</case>

                                <expr_stmt pos:start="2041:33" pos:end="2041:62"><expr pos:start="2041:33" pos:end="2041:61"><call pos:start="2041:33" pos:end="2041:61"><name pos:start="2041:33" pos:end="2041:44">gen_neon_rsb</name><argument_list pos:start="2041:45" pos:end="2041:61">(<argument pos:start="2041:46" pos:end="2041:49"><expr pos:start="2041:46" pos:end="2041:49"><name pos:start="2041:46" pos:end="2041:49">size</name></expr></argument>, <argument pos:start="2041:52" pos:end="2041:54"><expr pos:start="2041:52" pos:end="2041:54"><name pos:start="2041:52" pos:end="2041:54">tmp</name></expr></argument>, <argument pos:start="2041:57" pos:end="2041:60"><expr pos:start="2041:57" pos:end="2041:60"><name pos:start="2041:57" pos:end="2041:60">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2043:33" pos:end="2043:38">break;</break>

                            <case pos:start="2045:29" pos:end="2045:35">case <expr pos:start="2045:34" pos:end="2045:34"><literal type="number" pos:start="2045:34" pos:end="2045:34">5</literal></expr>:</case>

                                <expr_stmt pos:start="2047:33" pos:end="2047:72"><expr pos:start="2047:33" pos:end="2047:71"><call pos:start="2047:33" pos:end="2047:71"><name pos:start="2047:33" pos:end="2047:55">gen_helper_neon_sub_f32</name><argument_list pos:start="2047:56" pos:end="2047:71">(<argument pos:start="2047:57" pos:end="2047:59"><expr pos:start="2047:57" pos:end="2047:59"><name pos:start="2047:57" pos:end="2047:59">tmp</name></expr></argument>, <argument pos:start="2047:62" pos:end="2047:65"><expr pos:start="2047:62" pos:end="2047:65"><name pos:start="2047:62" pos:end="2047:65">tmp2</name></expr></argument>, <argument pos:start="2047:68" pos:end="2047:70"><expr pos:start="2047:68" pos:end="2047:70"><name pos:start="2047:68" pos:end="2047:70">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <break pos:start="2049:33" pos:end="2049:38">break;</break>

                            <default pos:start="2051:29" pos:end="2051:36">default:</default>

                                <expr_stmt pos:start="2053:33" pos:end="2053:40"><expr pos:start="2053:33" pos:end="2053:39"><call pos:start="2053:33" pos:end="2053:39"><name pos:start="2053:33" pos:end="2053:37">abort</name><argument_list pos:start="2053:38" pos:end="2053:39">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="2057:29" pos:end="2057:43"><expr pos:start="2057:29" pos:end="2057:42"><call pos:start="2057:29" pos:end="2057:42"><name pos:start="2057:29" pos:end="2057:36">dead_tmp</name><argument_list pos:start="2057:37" pos:end="2057:42">(<argument pos:start="2057:38" pos:end="2057:41"><expr pos:start="2057:38" pos:end="2057:41"><name pos:start="2057:38" pos:end="2057:41">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="2061:25" pos:end="2061:54"><expr pos:start="2061:25" pos:end="2061:53"><call pos:start="2061:25" pos:end="2061:53"><name pos:start="2061:25" pos:end="2061:38">neon_store_reg</name><argument_list pos:start="2061:39" pos:end="2061:53">(<argument pos:start="2061:40" pos:end="2061:41"><expr pos:start="2061:40" pos:end="2061:41"><name pos:start="2061:40" pos:end="2061:41">rd</name></expr></argument>, <argument pos:start="2061:44" pos:end="2061:47"><expr pos:start="2061:44" pos:end="2061:47"><name pos:start="2061:44" pos:end="2061:47">pass</name></expr></argument>, <argument pos:start="2061:50" pos:end="2061:52"><expr pos:start="2061:50" pos:end="2061:52"><name pos:start="2061:50" pos:end="2061:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2065:21" pos:end="2065:26">break;</break>

                <case pos:start="2067:17" pos:end="2067:23">case <expr pos:start="2067:22" pos:end="2067:22"><literal type="number" pos:start="2067:22" pos:end="2067:22">2</literal></expr>:</case> <comment type="block" pos:start="2067:25" pos:end="2067:41">/* VMLAL sclar */</comment>

                <case pos:start="2069:17" pos:end="2069:23">case <expr pos:start="2069:22" pos:end="2069:22"><literal type="number" pos:start="2069:22" pos:end="2069:22">3</literal></expr>:</case> <comment type="block" pos:start="2069:25" pos:end="2069:44">/* VQDMLAL scalar */</comment>

                <case pos:start="2071:17" pos:end="2071:23">case <expr pos:start="2071:22" pos:end="2071:22"><literal type="number" pos:start="2071:22" pos:end="2071:22">6</literal></expr>:</case> <comment type="block" pos:start="2071:25" pos:end="2071:42">/* VMLSL scalar */</comment>

                <case pos:start="2073:17" pos:end="2073:23">case <expr pos:start="2073:22" pos:end="2073:22"><literal type="number" pos:start="2073:22" pos:end="2073:22">7</literal></expr>:</case> <comment type="block" pos:start="2073:25" pos:end="2073:44">/* VQDMLSL scalar */</comment>

                <case pos:start="2075:17" pos:end="2075:24">case <expr pos:start="2075:22" pos:end="2075:23"><literal type="number" pos:start="2075:22" pos:end="2075:23">10</literal></expr>:</case> <comment type="block" pos:start="2075:26" pos:end="2075:43">/* VMULL scalar */</comment>

                <case pos:start="2077:17" pos:end="2077:24">case <expr pos:start="2077:22" pos:end="2077:23"><literal type="number" pos:start="2077:22" pos:end="2077:23">11</literal></expr>:</case> <comment type="block" pos:start="2077:26" pos:end="2077:45">/* VQDMULL scalar */</comment>

                    <if_stmt pos:start="2079:21" pos:end="2081:33"><if pos:start="2079:21" pos:end="2081:33">if <condition pos:start="2079:24" pos:end="2079:70">(<expr pos:start="2079:25" pos:end="2079:69"><name pos:start="2079:25" pos:end="2079:28">size</name> <operator pos:start="2079:30" pos:end="2079:31">==</operator> <literal type="number" pos:start="2079:33" pos:end="2079:33">0</literal> <operator pos:start="2079:35" pos:end="2079:36">&amp;&amp;</operator> <operator pos:start="2079:38" pos:end="2079:38">(</operator><name pos:start="2079:39" pos:end="2079:40">op</name> <operator pos:start="2079:42" pos:end="2079:43">==</operator> <literal type="number" pos:start="2079:45" pos:end="2079:45">3</literal> <operator pos:start="2079:47" pos:end="2079:48">||</operator> <name pos:start="2079:50" pos:end="2079:51">op</name> <operator pos:start="2079:53" pos:end="2079:54">==</operator> <literal type="number" pos:start="2079:56" pos:end="2079:56">7</literal> <operator pos:start="2079:58" pos:end="2079:59">||</operator> <name pos:start="2079:61" pos:end="2079:62">op</name> <operator pos:start="2079:64" pos:end="2079:65">==</operator> <literal type="number" pos:start="2079:67" pos:end="2079:68">11</literal><operator pos:start="2079:69" pos:end="2079:69">)</operator></expr>)</condition><block type="pseudo" pos:start="2081:25" pos:end="2081:33"><block_content pos:start="2081:25" pos:end="2081:33">

                        <return pos:start="2081:25" pos:end="2081:33">return <expr pos:start="2081:32" pos:end="2081:32"><literal type="number" pos:start="2081:32" pos:end="2081:32">1</literal></expr>;</return></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="2085:21" pos:end="2085:53"><expr pos:start="2085:21" pos:end="2085:52"><name pos:start="2085:21" pos:end="2085:24">tmp2</name> <operator pos:start="2085:26" pos:end="2085:26">=</operator> <call pos:start="2085:28" pos:end="2085:52"><name pos:start="2085:28" pos:end="2085:42">neon_get_scalar</name><argument_list pos:start="2085:43" pos:end="2085:52">(<argument pos:start="2085:44" pos:end="2085:47"><expr pos:start="2085:44" pos:end="2085:47"><name pos:start="2085:44" pos:end="2085:47">size</name></expr></argument>, <argument pos:start="2085:50" pos:end="2085:51"><expr pos:start="2085:50" pos:end="2085:51"><name pos:start="2085:50" pos:end="2085:51">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="2087:21" pos:end="2089:52">/* We need a copy of tmp2 because gen_neon_mull

                     * deletes it during pass 0.  */</comment>

                    <expr_stmt pos:start="2091:21" pos:end="2091:37"><expr pos:start="2091:21" pos:end="2091:36"><name pos:start="2091:21" pos:end="2091:24">tmp4</name> <operator pos:start="2091:26" pos:end="2091:26">=</operator> <call pos:start="2091:28" pos:end="2091:36"><name pos:start="2091:28" pos:end="2091:34">new_tmp</name><argument_list pos:start="2091:35" pos:end="2091:36">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2093:21" pos:end="2093:48"><expr pos:start="2093:21" pos:end="2093:47"><call pos:start="2093:21" pos:end="2093:47"><name pos:start="2093:21" pos:end="2093:35">tcg_gen_mov_i32</name><argument_list pos:start="2093:36" pos:end="2093:47">(<argument pos:start="2093:37" pos:end="2093:40"><expr pos:start="2093:37" pos:end="2093:40"><name pos:start="2093:37" pos:end="2093:40">tmp4</name></expr></argument>, <argument pos:start="2093:43" pos:end="2093:46"><expr pos:start="2093:43" pos:end="2093:46"><name pos:start="2093:43" pos:end="2093:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2095:21" pos:end="2095:48"><expr pos:start="2095:21" pos:end="2095:47"><name pos:start="2095:21" pos:end="2095:24">tmp3</name> <operator pos:start="2095:26" pos:end="2095:26">=</operator> <call pos:start="2095:28" pos:end="2095:47"><name pos:start="2095:28" pos:end="2095:40">neon_load_reg</name><argument_list pos:start="2095:41" pos:end="2095:47">(<argument pos:start="2095:42" pos:end="2095:43"><expr pos:start="2095:42" pos:end="2095:43"><name pos:start="2095:42" pos:end="2095:43">rn</name></expr></argument>, <argument pos:start="2095:46" pos:end="2095:46"><expr pos:start="2095:46" pos:end="2095:46"><literal type="number" pos:start="2095:46" pos:end="2095:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <for pos:start="2099:21" pos:end="2163:21">for <control pos:start="2099:25" pos:end="2099:52">(<init pos:start="2099:26" pos:end="2099:34"><expr pos:start="2099:26" pos:end="2099:33"><name pos:start="2099:26" pos:end="2099:29">pass</name> <operator pos:start="2099:31" pos:end="2099:31">=</operator> <literal type="number" pos:start="2099:33" pos:end="2099:33">0</literal></expr>;</init> <condition pos:start="2099:36" pos:end="2099:44"><expr pos:start="2099:36" pos:end="2099:43"><name pos:start="2099:36" pos:end="2099:39">pass</name> <operator pos:start="2099:41" pos:end="2099:41">&lt;</operator> <literal type="number" pos:start="2099:43" pos:end="2099:43">2</literal></expr>;</condition> <incr pos:start="2099:46" pos:end="2099:51"><expr pos:start="2099:46" pos:end="2099:51"><name pos:start="2099:46" pos:end="2099:49">pass</name><operator pos:start="2099:50" pos:end="2099:51">++</operator></expr></incr>)</control> <block pos:start="2099:54" pos:end="2163:21">{<block_content pos:start="2101:25" pos:end="2161:60">

                        <if_stmt pos:start="2101:25" pos:end="2111:25"><if pos:start="2101:25" pos:end="2105:25">if <condition pos:start="2101:28" pos:end="2101:38">(<expr pos:start="2101:29" pos:end="2101:37"><name pos:start="2101:29" pos:end="2101:32">pass</name> <operator pos:start="2101:34" pos:end="2101:35">==</operator> <literal type="number" pos:start="2101:37" pos:end="2101:37">0</literal></expr>)</condition> <block pos:start="2101:40" pos:end="2105:25">{<block_content pos:start="2103:29" pos:end="2103:55">

                            <expr_stmt pos:start="2103:29" pos:end="2103:55"><expr pos:start="2103:29" pos:end="2103:54"><name pos:start="2103:29" pos:end="2103:31">tmp</name> <operator pos:start="2103:33" pos:end="2103:33">=</operator> <call pos:start="2103:35" pos:end="2103:54"><name pos:start="2103:35" pos:end="2103:47">neon_load_reg</name><argument_list pos:start="2103:48" pos:end="2103:54">(<argument pos:start="2103:49" pos:end="2103:50"><expr pos:start="2103:49" pos:end="2103:50"><name pos:start="2103:49" pos:end="2103:50">rn</name></expr></argument>, <argument pos:start="2103:53" pos:end="2103:53"><expr pos:start="2103:53" pos:end="2103:53"><literal type="number" pos:start="2103:53" pos:end="2103:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2105:27" pos:end="2111:25">else <block pos:start="2105:32" pos:end="2111:25">{<block_content pos:start="2107:29" pos:end="2109:40">

                            <expr_stmt pos:start="2107:29" pos:end="2107:39"><expr pos:start="2107:29" pos:end="2107:38"><name pos:start="2107:29" pos:end="2107:31">tmp</name> <operator pos:start="2107:33" pos:end="2107:33">=</operator> <name pos:start="2107:35" pos:end="2107:38">tmp3</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="2109:29" pos:end="2109:40"><expr pos:start="2109:29" pos:end="2109:39"><name pos:start="2109:29" pos:end="2109:32">tmp2</name> <operator pos:start="2109:34" pos:end="2109:34">=</operator> <name pos:start="2109:36" pos:end="2109:39">tmp4</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <expr_stmt pos:start="2113:25" pos:end="2113:66"><expr pos:start="2113:25" pos:end="2113:65"><call pos:start="2113:25" pos:end="2113:65"><name pos:start="2113:25" pos:end="2113:37">gen_neon_mull</name><argument_list pos:start="2113:38" pos:end="2113:65">(<argument pos:start="2113:39" pos:end="2113:44"><expr pos:start="2113:39" pos:end="2113:44"><name pos:start="2113:39" pos:end="2113:44">cpu_V0</name></expr></argument>, <argument pos:start="2113:47" pos:end="2113:49"><expr pos:start="2113:47" pos:end="2113:49"><name pos:start="2113:47" pos:end="2113:49">tmp</name></expr></argument>, <argument pos:start="2113:52" pos:end="2113:55"><expr pos:start="2113:52" pos:end="2113:55"><name pos:start="2113:52" pos:end="2113:55">tmp2</name></expr></argument>, <argument pos:start="2113:58" pos:end="2113:61"><expr pos:start="2113:58" pos:end="2113:61"><name pos:start="2113:58" pos:end="2113:61">size</name></expr></argument>, <argument pos:start="2113:64" pos:end="2113:64"><expr pos:start="2113:64" pos:end="2113:64"><name pos:start="2113:64" pos:end="2113:64">u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2115:25" pos:end="2119:25"><if pos:start="2115:25" pos:end="2119:25">if <condition pos:start="2115:28" pos:end="2115:47">(<expr pos:start="2115:29" pos:end="2115:46"><name pos:start="2115:29" pos:end="2115:30">op</name> <operator pos:start="2115:32" pos:end="2115:33">==</operator> <literal type="number" pos:start="2115:35" pos:end="2115:35">6</literal> <operator pos:start="2115:37" pos:end="2115:38">||</operator> <name pos:start="2115:40" pos:end="2115:41">op</name> <operator pos:start="2115:43" pos:end="2115:44">==</operator> <literal type="number" pos:start="2115:46" pos:end="2115:46">7</literal></expr>)</condition> <block pos:start="2115:49" pos:end="2119:25">{<block_content pos:start="2117:29" pos:end="2117:56">

                            <expr_stmt pos:start="2117:29" pos:end="2117:56"><expr pos:start="2117:29" pos:end="2117:55"><call pos:start="2117:29" pos:end="2117:55"><name pos:start="2117:29" pos:end="2117:41">gen_neon_negl</name><argument_list pos:start="2117:42" pos:end="2117:55">(<argument pos:start="2117:43" pos:end="2117:48"><expr pos:start="2117:43" pos:end="2117:48"><name pos:start="2117:43" pos:end="2117:48">cpu_V0</name></expr></argument>, <argument pos:start="2117:51" pos:end="2117:54"><expr pos:start="2117:51" pos:end="2117:54"><name pos:start="2117:51" pos:end="2117:54">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <if_stmt pos:start="2121:25" pos:end="2125:25"><if pos:start="2121:25" pos:end="2125:25">if <condition pos:start="2121:28" pos:end="2121:37">(<expr pos:start="2121:29" pos:end="2121:36"><name pos:start="2121:29" pos:end="2121:30">op</name> <operator pos:start="2121:32" pos:end="2121:33">!=</operator> <literal type="number" pos:start="2121:35" pos:end="2121:36">11</literal></expr>)</condition> <block pos:start="2121:39" pos:end="2125:25">{<block_content pos:start="2123:29" pos:end="2123:63">

                            <expr_stmt pos:start="2123:29" pos:end="2123:63"><expr pos:start="2123:29" pos:end="2123:62"><call pos:start="2123:29" pos:end="2123:62"><name pos:start="2123:29" pos:end="2123:43">neon_load_reg64</name><argument_list pos:start="2123:44" pos:end="2123:62">(<argument pos:start="2123:45" pos:end="2123:50"><expr pos:start="2123:45" pos:end="2123:50"><name pos:start="2123:45" pos:end="2123:50">cpu_V1</name></expr></argument>, <argument pos:start="2123:53" pos:end="2123:61"><expr pos:start="2123:53" pos:end="2123:61"><name pos:start="2123:53" pos:end="2123:54">rd</name> <operator pos:start="2123:56" pos:end="2123:56">+</operator> <name pos:start="2123:58" pos:end="2123:61">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <switch pos:start="2127:25" pos:end="2159:25">switch <condition pos:start="2127:32" pos:end="2127:35">(<expr pos:start="2127:33" pos:end="2127:34"><name pos:start="2127:33" pos:end="2127:34">op</name></expr>)</condition> <block pos:start="2127:37" pos:end="2159:25">{<block_content pos:start="2129:25" pos:end="2157:36">

                        <case pos:start="2129:25" pos:end="2129:31">case <expr pos:start="2129:30" pos:end="2129:30"><literal type="number" pos:start="2129:30" pos:end="2129:30">2</literal></expr>:</case> <case pos:start="2129:33" pos:end="2129:39">case <expr pos:start="2129:38" pos:end="2129:38"><literal type="number" pos:start="2129:38" pos:end="2129:38">6</literal></expr>:</case>

                            <expr_stmt pos:start="2131:29" pos:end="2131:48"><expr pos:start="2131:29" pos:end="2131:47"><call pos:start="2131:29" pos:end="2131:47"><name pos:start="2131:29" pos:end="2131:41">gen_neon_addl</name><argument_list pos:start="2131:42" pos:end="2131:47">(<argument pos:start="2131:43" pos:end="2131:46"><expr pos:start="2131:43" pos:end="2131:46"><name pos:start="2131:43" pos:end="2131:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2133:29" pos:end="2133:34">break;</break>

                        <case pos:start="2135:25" pos:end="2135:31">case <expr pos:start="2135:30" pos:end="2135:30"><literal type="number" pos:start="2135:30" pos:end="2135:30">3</literal></expr>:</case> <case pos:start="2135:33" pos:end="2135:39">case <expr pos:start="2135:38" pos:end="2135:38"><literal type="number" pos:start="2135:38" pos:end="2135:38">7</literal></expr>:</case>

                            <expr_stmt pos:start="2137:29" pos:end="2137:73"><expr pos:start="2137:29" pos:end="2137:72"><call pos:start="2137:29" pos:end="2137:72"><name pos:start="2137:29" pos:end="2137:50">gen_neon_addl_saturate</name><argument_list pos:start="2137:51" pos:end="2137:72">(<argument pos:start="2137:52" pos:end="2137:57"><expr pos:start="2137:52" pos:end="2137:57"><name pos:start="2137:52" pos:end="2137:57">cpu_V0</name></expr></argument>, <argument pos:start="2137:60" pos:end="2137:65"><expr pos:start="2137:60" pos:end="2137:65"><name pos:start="2137:60" pos:end="2137:65">cpu_V0</name></expr></argument>, <argument pos:start="2137:68" pos:end="2137:71"><expr pos:start="2137:68" pos:end="2137:71"><name pos:start="2137:68" pos:end="2137:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2139:29" pos:end="2139:73"><expr pos:start="2139:29" pos:end="2139:72"><call pos:start="2139:29" pos:end="2139:72"><name pos:start="2139:29" pos:end="2139:50">gen_neon_addl_saturate</name><argument_list pos:start="2139:51" pos:end="2139:72">(<argument pos:start="2139:52" pos:end="2139:57"><expr pos:start="2139:52" pos:end="2139:57"><name pos:start="2139:52" pos:end="2139:57">cpu_V0</name></expr></argument>, <argument pos:start="2139:60" pos:end="2139:65"><expr pos:start="2139:60" pos:end="2139:65"><name pos:start="2139:60" pos:end="2139:65">cpu_V1</name></expr></argument>, <argument pos:start="2139:68" pos:end="2139:71"><expr pos:start="2139:68" pos:end="2139:71"><name pos:start="2139:68" pos:end="2139:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2141:29" pos:end="2141:34">break;</break>

                        <case pos:start="2143:25" pos:end="2143:32">case <expr pos:start="2143:30" pos:end="2143:31"><literal type="number" pos:start="2143:30" pos:end="2143:31">10</literal></expr>:</case>

                            <comment type="block" pos:start="2145:29" pos:end="2145:39">/* no-op */</comment>

                            <break pos:start="2147:29" pos:end="2147:34">break;</break>

                        <case pos:start="2149:25" pos:end="2149:32">case <expr pos:start="2149:30" pos:end="2149:31"><literal type="number" pos:start="2149:30" pos:end="2149:31">11</literal></expr>:</case>

                            <expr_stmt pos:start="2151:29" pos:end="2151:73"><expr pos:start="2151:29" pos:end="2151:72"><call pos:start="2151:29" pos:end="2151:72"><name pos:start="2151:29" pos:end="2151:50">gen_neon_addl_saturate</name><argument_list pos:start="2151:51" pos:end="2151:72">(<argument pos:start="2151:52" pos:end="2151:57"><expr pos:start="2151:52" pos:end="2151:57"><name pos:start="2151:52" pos:end="2151:57">cpu_V0</name></expr></argument>, <argument pos:start="2151:60" pos:end="2151:65"><expr pos:start="2151:60" pos:end="2151:65"><name pos:start="2151:60" pos:end="2151:65">cpu_V0</name></expr></argument>, <argument pos:start="2151:68" pos:end="2151:71"><expr pos:start="2151:68" pos:end="2151:71"><name pos:start="2151:68" pos:end="2151:71">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2153:29" pos:end="2153:34">break;</break>

                        <default pos:start="2155:25" pos:end="2155:32">default:</default>

                            <expr_stmt pos:start="2157:29" pos:end="2157:36"><expr pos:start="2157:29" pos:end="2157:35"><call pos:start="2157:29" pos:end="2157:35"><name pos:start="2157:29" pos:end="2157:33">abort</name><argument_list pos:start="2157:34" pos:end="2157:35">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="2161:25" pos:end="2161:60"><expr pos:start="2161:25" pos:end="2161:59"><call pos:start="2161:25" pos:end="2161:59"><name pos:start="2161:25" pos:end="2161:40">neon_store_reg64</name><argument_list pos:start="2161:41" pos:end="2161:59">(<argument pos:start="2161:42" pos:end="2161:47"><expr pos:start="2161:42" pos:end="2161:47"><name pos:start="2161:42" pos:end="2161:47">cpu_V0</name></expr></argument>, <argument pos:start="2161:50" pos:end="2161:58"><expr pos:start="2161:50" pos:end="2161:58"><name pos:start="2161:50" pos:end="2161:51">rd</name> <operator pos:start="2161:53" pos:end="2161:53">+</operator> <name pos:start="2161:55" pos:end="2161:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>





                    <break pos:start="2169:21" pos:end="2169:26">break;</break>

                <default pos:start="2171:17" pos:end="2171:24">default:</default> <comment type="block" pos:start="2171:26" pos:end="2171:53">/* 14 and 15 are RESERVED */</comment>

                    <return pos:start="2173:21" pos:end="2173:29">return <expr pos:start="2173:28" pos:end="2173:28"><literal type="number" pos:start="2173:28" pos:end="2173:28">1</literal></expr>;</return>

                </block_content>}</block></switch>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="2179:11" pos:end="3159:9">else <block pos:start="2179:16" pos:end="3159:9">{<block_content pos:start="2181:13" pos:end="3157:13"> <comment type="block" pos:start="2179:18" pos:end="2179:32">/* size == 3 */</comment>

            <if_stmt pos:start="2181:13" pos:end="3157:13"><if pos:start="2181:13" pos:end="2283:13">if <condition pos:start="2181:16" pos:end="2181:19">(<expr pos:start="2181:17" pos:end="2181:18"><operator pos:start="2181:17" pos:end="2181:17">!</operator><name pos:start="2181:18" pos:end="2181:18">u</name></expr>)</condition> <block pos:start="2181:21" pos:end="2283:13">{<block_content pos:start="2185:17" pos:end="2281:17">

                <comment type="block" pos:start="2183:17" pos:end="2183:31">/* Extract.  */</comment>

                <expr_stmt pos:start="2185:17" pos:end="2185:40"><expr pos:start="2185:17" pos:end="2185:39"><name pos:start="2185:17" pos:end="2185:19">imm</name> <operator pos:start="2185:21" pos:end="2185:21">=</operator> <operator pos:start="2185:23" pos:end="2185:23">(</operator><name pos:start="2185:24" pos:end="2185:27">insn</name> <operator pos:start="2185:29" pos:end="2185:30">&gt;&gt;</operator> <literal type="number" pos:start="2185:32" pos:end="2185:32">8</literal><operator pos:start="2185:33" pos:end="2185:33">)</operator> <operator pos:start="2185:35" pos:end="2185:35">&amp;</operator> <literal type="number" pos:start="2185:37" pos:end="2185:39">0xf</literal></expr>;</expr_stmt>



                <if_stmt pos:start="2189:17" pos:end="2191:29"><if pos:start="2189:17" pos:end="2191:29">if <condition pos:start="2189:20" pos:end="2189:34">(<expr pos:start="2189:21" pos:end="2189:33"><name pos:start="2189:21" pos:end="2189:23">imm</name> <operator pos:start="2189:25" pos:end="2189:25">&gt;</operator> <literal type="number" pos:start="2189:27" pos:end="2189:27">7</literal> <operator pos:start="2189:29" pos:end="2189:30">&amp;&amp;</operator> <operator pos:start="2189:32" pos:end="2189:32">!</operator><name pos:start="2189:33" pos:end="2189:33">q</name></expr>)</condition><block type="pseudo" pos:start="2191:21" pos:end="2191:29"><block_content pos:start="2191:21" pos:end="2191:29">

                    <return pos:start="2191:21" pos:end="2191:29">return <expr pos:start="2191:28" pos:end="2191:28"><literal type="number" pos:start="2191:28" pos:end="2191:28">1</literal></expr>;</return></block_content></block></if></if_stmt>



                <if_stmt pos:start="2195:17" pos:end="2273:17"><if pos:start="2195:17" pos:end="2205:17">if <condition pos:start="2195:20" pos:end="2195:29">(<expr pos:start="2195:21" pos:end="2195:28"><name pos:start="2195:21" pos:end="2195:23">imm</name> <operator pos:start="2195:25" pos:end="2195:26">==</operator> <literal type="number" pos:start="2195:28" pos:end="2195:28">0</literal></expr>)</condition> <block pos:start="2195:31" pos:end="2205:17">{<block_content pos:start="2197:21" pos:end="2203:21">

                    <expr_stmt pos:start="2197:21" pos:end="2197:48"><expr pos:start="2197:21" pos:end="2197:47"><call pos:start="2197:21" pos:end="2197:47"><name pos:start="2197:21" pos:end="2197:35">neon_load_reg64</name><argument_list pos:start="2197:36" pos:end="2197:47">(<argument pos:start="2197:37" pos:end="2197:42"><expr pos:start="2197:37" pos:end="2197:42"><name pos:start="2197:37" pos:end="2197:42">cpu_V0</name></expr></argument>, <argument pos:start="2197:45" pos:end="2197:46"><expr pos:start="2197:45" pos:end="2197:46"><name pos:start="2197:45" pos:end="2197:46">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2199:21" pos:end="2203:21"><if pos:start="2199:21" pos:end="2203:21">if <condition pos:start="2199:24" pos:end="2199:26">(<expr pos:start="2199:25" pos:end="2199:25"><name pos:start="2199:25" pos:end="2199:25">q</name></expr>)</condition> <block pos:start="2199:28" pos:end="2203:21">{<block_content pos:start="2201:25" pos:end="2201:56">

                        <expr_stmt pos:start="2201:25" pos:end="2201:56"><expr pos:start="2201:25" pos:end="2201:55"><call pos:start="2201:25" pos:end="2201:55"><name pos:start="2201:25" pos:end="2201:39">neon_load_reg64</name><argument_list pos:start="2201:40" pos:end="2201:55">(<argument pos:start="2201:41" pos:end="2201:46"><expr pos:start="2201:41" pos:end="2201:46"><name pos:start="2201:41" pos:end="2201:46">cpu_V1</name></expr></argument>, <argument pos:start="2201:49" pos:end="2201:54"><expr pos:start="2201:49" pos:end="2201:54"><name pos:start="2201:49" pos:end="2201:50">rn</name> <operator pos:start="2201:52" pos:end="2201:52">+</operator> <literal type="number" pos:start="2201:54" pos:end="2201:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="2205:19" pos:end="2215:17">else if <condition pos:start="2205:27" pos:end="2205:36">(<expr pos:start="2205:28" pos:end="2205:35"><name pos:start="2205:28" pos:end="2205:30">imm</name> <operator pos:start="2205:32" pos:end="2205:33">==</operator> <literal type="number" pos:start="2205:35" pos:end="2205:35">8</literal></expr>)</condition> <block pos:start="2205:38" pos:end="2215:17">{<block_content pos:start="2207:21" pos:end="2213:21">

                    <expr_stmt pos:start="2207:21" pos:end="2207:52"><expr pos:start="2207:21" pos:end="2207:51"><call pos:start="2207:21" pos:end="2207:51"><name pos:start="2207:21" pos:end="2207:35">neon_load_reg64</name><argument_list pos:start="2207:36" pos:end="2207:51">(<argument pos:start="2207:37" pos:end="2207:42"><expr pos:start="2207:37" pos:end="2207:42"><name pos:start="2207:37" pos:end="2207:42">cpu_V0</name></expr></argument>, <argument pos:start="2207:45" pos:end="2207:50"><expr pos:start="2207:45" pos:end="2207:50"><name pos:start="2207:45" pos:end="2207:46">rn</name> <operator pos:start="2207:48" pos:end="2207:48">+</operator> <literal type="number" pos:start="2207:50" pos:end="2207:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2209:21" pos:end="2213:21"><if pos:start="2209:21" pos:end="2213:21">if <condition pos:start="2209:24" pos:end="2209:26">(<expr pos:start="2209:25" pos:end="2209:25"><name pos:start="2209:25" pos:end="2209:25">q</name></expr>)</condition> <block pos:start="2209:28" pos:end="2213:21">{<block_content pos:start="2211:25" pos:end="2211:52">

                        <expr_stmt pos:start="2211:25" pos:end="2211:52"><expr pos:start="2211:25" pos:end="2211:51"><call pos:start="2211:25" pos:end="2211:51"><name pos:start="2211:25" pos:end="2211:39">neon_load_reg64</name><argument_list pos:start="2211:40" pos:end="2211:51">(<argument pos:start="2211:41" pos:end="2211:46"><expr pos:start="2211:41" pos:end="2211:46"><name pos:start="2211:41" pos:end="2211:46">cpu_V1</name></expr></argument>, <argument pos:start="2211:49" pos:end="2211:50"><expr pos:start="2211:49" pos:end="2211:50"><name pos:start="2211:49" pos:end="2211:50">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="2215:19" pos:end="2259:17">else if <condition pos:start="2215:27" pos:end="2215:29">(<expr pos:start="2215:28" pos:end="2215:28"><name pos:start="2215:28" pos:end="2215:28">q</name></expr>)</condition> <block pos:start="2215:31" pos:end="2259:17">{<block_content pos:start="2217:21" pos:end="2257:45">

                    <expr_stmt pos:start="2217:21" pos:end="2217:47"><expr pos:start="2217:21" pos:end="2217:46"><name pos:start="2217:21" pos:end="2217:25">tmp64</name> <operator pos:start="2217:27" pos:end="2217:27">=</operator> <call pos:start="2217:29" pos:end="2217:46"><name pos:start="2217:29" pos:end="2217:44">tcg_temp_new_i64</name><argument_list pos:start="2217:45" pos:end="2217:46">()</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2219:21" pos:end="2231:21"><if pos:start="2219:21" pos:end="2225:21">if <condition pos:start="2219:24" pos:end="2219:32">(<expr pos:start="2219:25" pos:end="2219:31"><name pos:start="2219:25" pos:end="2219:27">imm</name> <operator pos:start="2219:29" pos:end="2219:29">&lt;</operator> <literal type="number" pos:start="2219:31" pos:end="2219:31">8</literal></expr>)</condition> <block pos:start="2219:34" pos:end="2225:21">{<block_content pos:start="2221:25" pos:end="2223:55">

                        <expr_stmt pos:start="2221:25" pos:end="2221:52"><expr pos:start="2221:25" pos:end="2221:51"><call pos:start="2221:25" pos:end="2221:51"><name pos:start="2221:25" pos:end="2221:39">neon_load_reg64</name><argument_list pos:start="2221:40" pos:end="2221:51">(<argument pos:start="2221:41" pos:end="2221:46"><expr pos:start="2221:41" pos:end="2221:46"><name pos:start="2221:41" pos:end="2221:46">cpu_V0</name></expr></argument>, <argument pos:start="2221:49" pos:end="2221:50"><expr pos:start="2221:49" pos:end="2221:50"><name pos:start="2221:49" pos:end="2221:50">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2223:25" pos:end="2223:55"><expr pos:start="2223:25" pos:end="2223:54"><call pos:start="2223:25" pos:end="2223:54"><name pos:start="2223:25" pos:end="2223:39">neon_load_reg64</name><argument_list pos:start="2223:40" pos:end="2223:54">(<argument pos:start="2223:41" pos:end="2223:45"><expr pos:start="2223:41" pos:end="2223:45"><name pos:start="2223:41" pos:end="2223:45">tmp64</name></expr></argument>, <argument pos:start="2223:48" pos:end="2223:53"><expr pos:start="2223:48" pos:end="2223:53"><name pos:start="2223:48" pos:end="2223:49">rn</name> <operator pos:start="2223:51" pos:end="2223:51">+</operator> <literal type="number" pos:start="2223:53" pos:end="2223:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2225:23" pos:end="2231:21">else <block pos:start="2225:28" pos:end="2231:21">{<block_content pos:start="2227:25" pos:end="2229:51">

                        <expr_stmt pos:start="2227:25" pos:end="2227:56"><expr pos:start="2227:25" pos:end="2227:55"><call pos:start="2227:25" pos:end="2227:55"><name pos:start="2227:25" pos:end="2227:39">neon_load_reg64</name><argument_list pos:start="2227:40" pos:end="2227:55">(<argument pos:start="2227:41" pos:end="2227:46"><expr pos:start="2227:41" pos:end="2227:46"><name pos:start="2227:41" pos:end="2227:46">cpu_V0</name></expr></argument>, <argument pos:start="2227:49" pos:end="2227:54"><expr pos:start="2227:49" pos:end="2227:54"><name pos:start="2227:49" pos:end="2227:50">rn</name> <operator pos:start="2227:52" pos:end="2227:52">+</operator> <literal type="number" pos:start="2227:54" pos:end="2227:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2229:25" pos:end="2229:51"><expr pos:start="2229:25" pos:end="2229:50"><call pos:start="2229:25" pos:end="2229:50"><name pos:start="2229:25" pos:end="2229:39">neon_load_reg64</name><argument_list pos:start="2229:40" pos:end="2229:50">(<argument pos:start="2229:41" pos:end="2229:45"><expr pos:start="2229:41" pos:end="2229:45"><name pos:start="2229:41" pos:end="2229:45">tmp64</name></expr></argument>, <argument pos:start="2229:48" pos:end="2229:49"><expr pos:start="2229:48" pos:end="2229:49"><name pos:start="2229:48" pos:end="2229:49">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="2233:21" pos:end="2233:68"><expr pos:start="2233:21" pos:end="2233:67"><call pos:start="2233:21" pos:end="2233:67"><name pos:start="2233:21" pos:end="2233:36">tcg_gen_shri_i64</name><argument_list pos:start="2233:37" pos:end="2233:67">(<argument pos:start="2233:38" pos:end="2233:43"><expr pos:start="2233:38" pos:end="2233:43"><name pos:start="2233:38" pos:end="2233:43">cpu_V0</name></expr></argument>, <argument pos:start="2233:46" pos:end="2233:51"><expr pos:start="2233:46" pos:end="2233:51"><name pos:start="2233:46" pos:end="2233:51">cpu_V0</name></expr></argument>, <argument pos:start="2233:54" pos:end="2233:66"><expr pos:start="2233:54" pos:end="2233:66"><operator pos:start="2233:54" pos:end="2233:54">(</operator><name pos:start="2233:55" pos:end="2233:57">imm</name> <operator pos:start="2233:59" pos:end="2233:59">&amp;</operator> <literal type="number" pos:start="2233:61" pos:end="2233:61">7</literal><operator pos:start="2233:62" pos:end="2233:62">)</operator> <operator pos:start="2233:64" pos:end="2233:64">*</operator> <literal type="number" pos:start="2233:66" pos:end="2233:66">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2235:21" pos:end="2235:74"><expr pos:start="2235:21" pos:end="2235:73"><call pos:start="2235:21" pos:end="2235:73"><name pos:start="2235:21" pos:end="2235:36">tcg_gen_shli_i64</name><argument_list pos:start="2235:37" pos:end="2235:73">(<argument pos:start="2235:38" pos:end="2235:43"><expr pos:start="2235:38" pos:end="2235:43"><name pos:start="2235:38" pos:end="2235:43">cpu_V1</name></expr></argument>, <argument pos:start="2235:46" pos:end="2235:50"><expr pos:start="2235:46" pos:end="2235:50"><name pos:start="2235:46" pos:end="2235:50">tmp64</name></expr></argument>, <argument pos:start="2235:53" pos:end="2235:72"><expr pos:start="2235:53" pos:end="2235:72"><literal type="number" pos:start="2235:53" pos:end="2235:56">64</literal> <operator pos:start="2235:56" pos:end="2235:56">-</operator> <operator pos:start="2235:58" pos:end="2235:58">(</operator><operator pos:start="2235:59" pos:end="2235:59">(</operator><name pos:start="2235:60" pos:end="2235:62">imm</name> <operator pos:start="2235:64" pos:end="2235:64">&amp;</operator> <literal type="number" pos:start="2235:66" pos:end="2235:66">7</literal><operator pos:start="2235:67" pos:end="2235:67">)</operator> <operator pos:start="2235:69" pos:end="2235:69">*</operator> <literal type="number" pos:start="2235:71" pos:end="2235:71">8</literal><operator pos:start="2235:72" pos:end="2235:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2237:21" pos:end="2237:59"><expr pos:start="2237:21" pos:end="2237:58"><call pos:start="2237:21" pos:end="2237:58"><name pos:start="2237:21" pos:end="2237:34">tcg_gen_or_i64</name><argument_list pos:start="2237:35" pos:end="2237:58">(<argument pos:start="2237:36" pos:end="2237:41"><expr pos:start="2237:36" pos:end="2237:41"><name pos:start="2237:36" pos:end="2237:41">cpu_V0</name></expr></argument>, <argument pos:start="2237:44" pos:end="2237:49"><expr pos:start="2237:44" pos:end="2237:49"><name pos:start="2237:44" pos:end="2237:49">cpu_V0</name></expr></argument>, <argument pos:start="2237:52" pos:end="2237:57"><expr pos:start="2237:52" pos:end="2237:57"><name pos:start="2237:52" pos:end="2237:57">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2239:21" pos:end="2249:21"><if pos:start="2239:21" pos:end="2243:21">if <condition pos:start="2239:24" pos:end="2239:32">(<expr pos:start="2239:25" pos:end="2239:31"><name pos:start="2239:25" pos:end="2239:27">imm</name> <operator pos:start="2239:29" pos:end="2239:29">&lt;</operator> <literal type="number" pos:start="2239:31" pos:end="2239:31">8</literal></expr>)</condition> <block pos:start="2239:34" pos:end="2243:21">{<block_content pos:start="2241:25" pos:end="2241:52">

                        <expr_stmt pos:start="2241:25" pos:end="2241:52"><expr pos:start="2241:25" pos:end="2241:51"><call pos:start="2241:25" pos:end="2241:51"><name pos:start="2241:25" pos:end="2241:39">neon_load_reg64</name><argument_list pos:start="2241:40" pos:end="2241:51">(<argument pos:start="2241:41" pos:end="2241:46"><expr pos:start="2241:41" pos:end="2241:46"><name pos:start="2241:41" pos:end="2241:46">cpu_V1</name></expr></argument>, <argument pos:start="2241:49" pos:end="2241:50"><expr pos:start="2241:49" pos:end="2241:50"><name pos:start="2241:49" pos:end="2241:50">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="2243:23" pos:end="2249:21">else <block pos:start="2243:28" pos:end="2249:21">{<block_content pos:start="2245:25" pos:end="2247:33">

                        <expr_stmt pos:start="2245:25" pos:end="2245:56"><expr pos:start="2245:25" pos:end="2245:55"><call pos:start="2245:25" pos:end="2245:55"><name pos:start="2245:25" pos:end="2245:39">neon_load_reg64</name><argument_list pos:start="2245:40" pos:end="2245:55">(<argument pos:start="2245:41" pos:end="2245:46"><expr pos:start="2245:41" pos:end="2245:46"><name pos:start="2245:41" pos:end="2245:46">cpu_V1</name></expr></argument>, <argument pos:start="2245:49" pos:end="2245:54"><expr pos:start="2245:49" pos:end="2245:54"><name pos:start="2245:49" pos:end="2245:50">rm</name> <operator pos:start="2245:52" pos:end="2245:52">+</operator> <literal type="number" pos:start="2245:54" pos:end="2245:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2247:25" pos:end="2247:33"><expr pos:start="2247:25" pos:end="2247:32"><name pos:start="2247:25" pos:end="2247:27">imm</name> <operator pos:start="2247:29" pos:end="2247:30">-=</operator> <literal type="number" pos:start="2247:32" pos:end="2247:32">8</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="2251:21" pos:end="2251:69"><expr pos:start="2251:21" pos:end="2251:68"><call pos:start="2251:21" pos:end="2251:68"><name pos:start="2251:21" pos:end="2251:36">tcg_gen_shli_i64</name><argument_list pos:start="2251:37" pos:end="2251:68">(<argument pos:start="2251:38" pos:end="2251:43"><expr pos:start="2251:38" pos:end="2251:43"><name pos:start="2251:38" pos:end="2251:43">cpu_V1</name></expr></argument>, <argument pos:start="2251:46" pos:end="2251:51"><expr pos:start="2251:46" pos:end="2251:51"><name pos:start="2251:46" pos:end="2251:51">cpu_V1</name></expr></argument>, <argument pos:start="2251:54" pos:end="2251:67"><expr pos:start="2251:54" pos:end="2251:67"><literal type="number" pos:start="2251:54" pos:end="2251:57">64</literal> <operator pos:start="2251:57" pos:end="2251:57">-</operator> <operator pos:start="2251:59" pos:end="2251:59">(</operator><name pos:start="2251:60" pos:end="2251:62">imm</name> <operator pos:start="2251:64" pos:end="2251:64">*</operator> <literal type="number" pos:start="2251:66" pos:end="2251:66">8</literal><operator pos:start="2251:67" pos:end="2251:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2253:21" pos:end="2253:60"><expr pos:start="2253:21" pos:end="2253:59"><call pos:start="2253:21" pos:end="2253:59"><name pos:start="2253:21" pos:end="2253:36">tcg_gen_shri_i64</name><argument_list pos:start="2253:37" pos:end="2253:59">(<argument pos:start="2253:38" pos:end="2253:42"><expr pos:start="2253:38" pos:end="2253:42"><name pos:start="2253:38" pos:end="2253:42">tmp64</name></expr></argument>, <argument pos:start="2253:45" pos:end="2253:49"><expr pos:start="2253:45" pos:end="2253:49"><name pos:start="2253:45" pos:end="2253:49">tmp64</name></expr></argument>, <argument pos:start="2253:52" pos:end="2253:58"><expr pos:start="2253:52" pos:end="2253:58"><name pos:start="2253:52" pos:end="2253:54">imm</name> <operator pos:start="2253:56" pos:end="2253:56">*</operator> <literal type="number" pos:start="2253:58" pos:end="2253:58">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2255:21" pos:end="2255:58"><expr pos:start="2255:21" pos:end="2255:57"><call pos:start="2255:21" pos:end="2255:57"><name pos:start="2255:21" pos:end="2255:34">tcg_gen_or_i64</name><argument_list pos:start="2255:35" pos:end="2255:57">(<argument pos:start="2255:36" pos:end="2255:41"><expr pos:start="2255:36" pos:end="2255:41"><name pos:start="2255:36" pos:end="2255:41">cpu_V1</name></expr></argument>, <argument pos:start="2255:44" pos:end="2255:49"><expr pos:start="2255:44" pos:end="2255:49"><name pos:start="2255:44" pos:end="2255:49">cpu_V1</name></expr></argument>, <argument pos:start="2255:52" pos:end="2255:56"><expr pos:start="2255:52" pos:end="2255:56"><name pos:start="2255:52" pos:end="2255:56">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2257:21" pos:end="2257:45"><expr pos:start="2257:21" pos:end="2257:44"><call pos:start="2257:21" pos:end="2257:44"><name pos:start="2257:21" pos:end="2257:37">tcg_temp_free_i64</name><argument_list pos:start="2257:38" pos:end="2257:44">(<argument pos:start="2257:39" pos:end="2257:43"><expr pos:start="2257:39" pos:end="2257:43"><name pos:start="2257:39" pos:end="2257:43">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="2259:19" pos:end="2273:17">else <block pos:start="2259:24" pos:end="2273:17">{<block_content pos:start="2263:21" pos:end="2271:59">

                    <comment type="block" pos:start="2261:21" pos:end="2261:32">/* BUGFIX */</comment>

                    <expr_stmt pos:start="2263:21" pos:end="2263:48"><expr pos:start="2263:21" pos:end="2263:47"><call pos:start="2263:21" pos:end="2263:47"><name pos:start="2263:21" pos:end="2263:35">neon_load_reg64</name><argument_list pos:start="2263:36" pos:end="2263:47">(<argument pos:start="2263:37" pos:end="2263:42"><expr pos:start="2263:37" pos:end="2263:42"><name pos:start="2263:37" pos:end="2263:42">cpu_V0</name></expr></argument>, <argument pos:start="2263:45" pos:end="2263:46"><expr pos:start="2263:45" pos:end="2263:46"><name pos:start="2263:45" pos:end="2263:46">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2265:21" pos:end="2265:62"><expr pos:start="2265:21" pos:end="2265:61"><call pos:start="2265:21" pos:end="2265:61"><name pos:start="2265:21" pos:end="2265:36">tcg_gen_shri_i64</name><argument_list pos:start="2265:37" pos:end="2265:61">(<argument pos:start="2265:38" pos:end="2265:43"><expr pos:start="2265:38" pos:end="2265:43"><name pos:start="2265:38" pos:end="2265:43">cpu_V0</name></expr></argument>, <argument pos:start="2265:46" pos:end="2265:51"><expr pos:start="2265:46" pos:end="2265:51"><name pos:start="2265:46" pos:end="2265:51">cpu_V0</name></expr></argument>, <argument pos:start="2265:54" pos:end="2265:60"><expr pos:start="2265:54" pos:end="2265:60"><name pos:start="2265:54" pos:end="2265:56">imm</name> <operator pos:start="2265:58" pos:end="2265:58">*</operator> <literal type="number" pos:start="2265:60" pos:end="2265:60">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2267:21" pos:end="2267:48"><expr pos:start="2267:21" pos:end="2267:47"><call pos:start="2267:21" pos:end="2267:47"><name pos:start="2267:21" pos:end="2267:35">neon_load_reg64</name><argument_list pos:start="2267:36" pos:end="2267:47">(<argument pos:start="2267:37" pos:end="2267:42"><expr pos:start="2267:37" pos:end="2267:42"><name pos:start="2267:37" pos:end="2267:42">cpu_V1</name></expr></argument>, <argument pos:start="2267:45" pos:end="2267:46"><expr pos:start="2267:45" pos:end="2267:46"><name pos:start="2267:45" pos:end="2267:46">rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2269:21" pos:end="2269:69"><expr pos:start="2269:21" pos:end="2269:68"><call pos:start="2269:21" pos:end="2269:68"><name pos:start="2269:21" pos:end="2269:36">tcg_gen_shli_i64</name><argument_list pos:start="2269:37" pos:end="2269:68">(<argument pos:start="2269:38" pos:end="2269:43"><expr pos:start="2269:38" pos:end="2269:43"><name pos:start="2269:38" pos:end="2269:43">cpu_V1</name></expr></argument>, <argument pos:start="2269:46" pos:end="2269:51"><expr pos:start="2269:46" pos:end="2269:51"><name pos:start="2269:46" pos:end="2269:51">cpu_V1</name></expr></argument>, <argument pos:start="2269:54" pos:end="2269:67"><expr pos:start="2269:54" pos:end="2269:67"><literal type="number" pos:start="2269:54" pos:end="2269:57">64</literal> <operator pos:start="2269:57" pos:end="2269:57">-</operator> <operator pos:start="2269:59" pos:end="2269:59">(</operator><name pos:start="2269:60" pos:end="2269:62">imm</name> <operator pos:start="2269:64" pos:end="2269:64">*</operator> <literal type="number" pos:start="2269:66" pos:end="2269:66">8</literal><operator pos:start="2269:67" pos:end="2269:67">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2271:21" pos:end="2271:59"><expr pos:start="2271:21" pos:end="2271:58"><call pos:start="2271:21" pos:end="2271:58"><name pos:start="2271:21" pos:end="2271:34">tcg_gen_or_i64</name><argument_list pos:start="2271:35" pos:end="2271:58">(<argument pos:start="2271:36" pos:end="2271:41"><expr pos:start="2271:36" pos:end="2271:41"><name pos:start="2271:36" pos:end="2271:41">cpu_V0</name></expr></argument>, <argument pos:start="2271:44" pos:end="2271:49"><expr pos:start="2271:44" pos:end="2271:49"><name pos:start="2271:44" pos:end="2271:49">cpu_V0</name></expr></argument>, <argument pos:start="2271:52" pos:end="2271:57"><expr pos:start="2271:52" pos:end="2271:57"><name pos:start="2271:52" pos:end="2271:57">cpu_V1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="2275:17" pos:end="2275:45"><expr pos:start="2275:17" pos:end="2275:44"><call pos:start="2275:17" pos:end="2275:44"><name pos:start="2275:17" pos:end="2275:32">neon_store_reg64</name><argument_list pos:start="2275:33" pos:end="2275:44">(<argument pos:start="2275:34" pos:end="2275:39"><expr pos:start="2275:34" pos:end="2275:39"><name pos:start="2275:34" pos:end="2275:39">cpu_V0</name></expr></argument>, <argument pos:start="2275:42" pos:end="2275:43"><expr pos:start="2275:42" pos:end="2275:43"><name pos:start="2275:42" pos:end="2275:43">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="2277:17" pos:end="2281:17"><if pos:start="2277:17" pos:end="2281:17">if <condition pos:start="2277:20" pos:end="2277:22">(<expr pos:start="2277:21" pos:end="2277:21"><name pos:start="2277:21" pos:end="2277:21">q</name></expr>)</condition> <block pos:start="2277:24" pos:end="2281:17">{<block_content pos:start="2279:21" pos:end="2279:53">

                    <expr_stmt pos:start="2279:21" pos:end="2279:53"><expr pos:start="2279:21" pos:end="2279:52"><call pos:start="2279:21" pos:end="2279:52"><name pos:start="2279:21" pos:end="2279:36">neon_store_reg64</name><argument_list pos:start="2279:37" pos:end="2279:52">(<argument pos:start="2279:38" pos:end="2279:43"><expr pos:start="2279:38" pos:end="2279:43"><name pos:start="2279:38" pos:end="2279:43">cpu_V1</name></expr></argument>, <argument pos:start="2279:46" pos:end="2279:51"><expr pos:start="2279:46" pos:end="2279:51"><name pos:start="2279:46" pos:end="2279:47">rd</name> <operator pos:start="2279:49" pos:end="2279:49">+</operator> <literal type="number" pos:start="2279:51" pos:end="2279:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="2283:15" pos:end="3057:13">else if <condition pos:start="2283:23" pos:end="2283:47">(<expr pos:start="2283:24" pos:end="2283:46"><operator pos:start="2283:24" pos:end="2283:24">(</operator><name pos:start="2283:25" pos:end="2283:28">insn</name> <operator pos:start="2283:30" pos:end="2283:30">&amp;</operator> <operator pos:start="2283:32" pos:end="2283:32">(</operator><literal type="number" pos:start="2283:33" pos:end="2283:33">1</literal> <operator pos:start="2283:35" pos:end="2283:36">&lt;&lt;</operator> <literal type="number" pos:start="2283:38" pos:end="2283:39">11</literal><operator pos:start="2283:40" pos:end="2283:40">)</operator><operator pos:start="2283:41" pos:end="2283:41">)</operator> <operator pos:start="2283:43" pos:end="2283:44">==</operator> <literal type="number" pos:start="2283:46" pos:end="2283:46">0</literal></expr>)</condition> <block pos:start="2283:49" pos:end="3057:13">{<block_content pos:start="2287:17" pos:end="3055:17">

                <comment type="block" pos:start="2285:17" pos:end="2285:41">/* Two register misc.  */</comment>

                <expr_stmt pos:start="2287:17" pos:end="2287:65"><expr pos:start="2287:17" pos:end="2287:64"><name pos:start="2287:17" pos:end="2287:18">op</name> <operator pos:start="2287:20" pos:end="2287:20">=</operator> <operator pos:start="2287:22" pos:end="2287:22">(</operator><operator pos:start="2287:23" pos:end="2287:23">(</operator><name pos:start="2287:24" pos:end="2287:27">insn</name> <operator pos:start="2287:29" pos:end="2287:30">&gt;&gt;</operator> <literal type="number" pos:start="2287:32" pos:end="2287:33">12</literal><operator pos:start="2287:34" pos:end="2287:34">)</operator> <operator pos:start="2287:36" pos:end="2287:36">&amp;</operator> <literal type="number" pos:start="2287:38" pos:end="2287:41">0x30</literal><operator pos:start="2287:42" pos:end="2287:42">)</operator> <operator pos:start="2287:44" pos:end="2287:44">|</operator> <operator pos:start="2287:46" pos:end="2287:46">(</operator><operator pos:start="2287:47" pos:end="2287:47">(</operator><name pos:start="2287:48" pos:end="2287:51">insn</name> <operator pos:start="2287:53" pos:end="2287:54">&gt;&gt;</operator> <literal type="number" pos:start="2287:56" pos:end="2287:56">7</literal><operator pos:start="2287:57" pos:end="2287:57">)</operator> <operator pos:start="2287:59" pos:end="2287:59">&amp;</operator> <literal type="number" pos:start="2287:61" pos:end="2287:63">0xf</literal><operator pos:start="2287:64" pos:end="2287:64">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="2289:17" pos:end="2289:40"><expr pos:start="2289:17" pos:end="2289:39"><name pos:start="2289:17" pos:end="2289:20">size</name> <operator pos:start="2289:22" pos:end="2289:22">=</operator> <operator pos:start="2289:24" pos:end="2289:24">(</operator><name pos:start="2289:25" pos:end="2289:28">insn</name> <operator pos:start="2289:30" pos:end="2289:31">&gt;&gt;</operator> <literal type="number" pos:start="2289:33" pos:end="2289:34">18</literal><operator pos:start="2289:35" pos:end="2289:35">)</operator> <operator pos:start="2289:37" pos:end="2289:37">&amp;</operator> <literal type="number" pos:start="2289:39" pos:end="2289:39">3</literal></expr>;</expr_stmt>

                <switch pos:start="2291:17" pos:end="3055:17">switch <condition pos:start="2291:24" pos:end="2291:27">(<expr pos:start="2291:25" pos:end="2291:26"><name pos:start="2291:25" pos:end="2291:26">op</name></expr>)</condition> <block pos:start="2291:29" pos:end="3055:17">{<block_content pos:start="2293:17" pos:end="3053:26">

                <case pos:start="2293:17" pos:end="2293:23">case <expr pos:start="2293:22" pos:end="2293:22"><literal type="number" pos:start="2293:22" pos:end="2293:22">0</literal></expr>:</case> <comment type="block" pos:start="2293:25" pos:end="2293:36">/* VREV64 */</comment>

                    <if_stmt pos:start="2295:21" pos:end="2297:33"><if pos:start="2295:21" pos:end="2297:33">if <condition pos:start="2295:24" pos:end="2295:34">(<expr pos:start="2295:25" pos:end="2295:33"><name pos:start="2295:25" pos:end="2295:28">size</name> <operator pos:start="2295:30" pos:end="2295:31">==</operator> <literal type="number" pos:start="2295:33" pos:end="2295:33">3</literal></expr>)</condition><block type="pseudo" pos:start="2297:25" pos:end="2297:33"><block_content pos:start="2297:25" pos:end="2297:33">

                        <return pos:start="2297:25" pos:end="2297:33">return <expr pos:start="2297:32" pos:end="2297:32"><literal type="number" pos:start="2297:32" pos:end="2297:32">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <for pos:start="2299:21" pos:end="2339:21">for <control pos:start="2299:25" pos:end="2299:62">(<init pos:start="2299:26" pos:end="2299:34"><expr pos:start="2299:26" pos:end="2299:33"><name pos:start="2299:26" pos:end="2299:29">pass</name> <operator pos:start="2299:31" pos:end="2299:31">=</operator> <literal type="number" pos:start="2299:33" pos:end="2299:33">0</literal></expr>;</init> <condition pos:start="2299:36" pos:end="2299:54"><expr pos:start="2299:36" pos:end="2299:53"><name pos:start="2299:36" pos:end="2299:39">pass</name> <operator pos:start="2299:41" pos:end="2299:41">&lt;</operator> <operator pos:start="2299:43" pos:end="2299:43">(</operator><ternary pos:start="2299:44" pos:end="2299:52"><condition pos:start="2299:44" pos:end="2299:46"><expr pos:start="2299:44" pos:end="2299:44"><name pos:start="2299:44" pos:end="2299:44">q</name></expr> ?</condition><then pos:start="2299:48" pos:end="2299:48"> <expr pos:start="2299:48" pos:end="2299:48"><literal type="number" pos:start="2299:48" pos:end="2299:48">2</literal></expr> </then><else pos:start="2299:50" pos:end="2299:52">: <expr pos:start="2299:52" pos:end="2299:52"><literal type="number" pos:start="2299:52" pos:end="2299:52">1</literal></expr></else></ternary><operator pos:start="2299:53" pos:end="2299:53">)</operator></expr>;</condition> <incr pos:start="2299:56" pos:end="2299:61"><expr pos:start="2299:56" pos:end="2299:61"><name pos:start="2299:56" pos:end="2299:59">pass</name><operator pos:start="2299:60" pos:end="2299:61">++</operator></expr></incr>)</control> <block pos:start="2299:64" pos:end="2339:21">{<block_content pos:start="2301:25" pos:end="2337:25">

                        <expr_stmt pos:start="2301:25" pos:end="2301:58"><expr pos:start="2301:25" pos:end="2301:57"><name pos:start="2301:25" pos:end="2301:27">tmp</name> <operator pos:start="2301:29" pos:end="2301:29">=</operator> <call pos:start="2301:31" pos:end="2301:57"><name pos:start="2301:31" pos:end="2301:43">neon_load_reg</name><argument_list pos:start="2301:44" pos:end="2301:57">(<argument pos:start="2301:45" pos:end="2301:46"><expr pos:start="2301:45" pos:end="2301:46"><name pos:start="2301:45" pos:end="2301:46">rm</name></expr></argument>, <argument pos:start="2301:49" pos:end="2301:56"><expr pos:start="2301:49" pos:end="2301:56"><name pos:start="2301:49" pos:end="2301:52">pass</name> <operator pos:start="2301:54" pos:end="2301:54">*</operator> <literal type="number" pos:start="2301:56" pos:end="2301:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2303:25" pos:end="2303:63"><expr pos:start="2303:25" pos:end="2303:62"><name pos:start="2303:25" pos:end="2303:28">tmp2</name> <operator pos:start="2303:30" pos:end="2303:30">=</operator> <call pos:start="2303:32" pos:end="2303:62"><name pos:start="2303:32" pos:end="2303:44">neon_load_reg</name><argument_list pos:start="2303:45" pos:end="2303:62">(<argument pos:start="2303:46" pos:end="2303:47"><expr pos:start="2303:46" pos:end="2303:47"><name pos:start="2303:46" pos:end="2303:47">rm</name></expr></argument>, <argument pos:start="2303:50" pos:end="2303:61"><expr pos:start="2303:50" pos:end="2303:61"><name pos:start="2303:50" pos:end="2303:53">pass</name> <operator pos:start="2303:55" pos:end="2303:55">*</operator> <literal type="number" pos:start="2303:57" pos:end="2303:59">2</literal> <operator pos:start="2303:59" pos:end="2303:59">+</operator> <literal type="number" pos:start="2303:61" pos:end="2303:61">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="2305:25" pos:end="2315:25">switch <condition pos:start="2305:32" pos:end="2305:37">(<expr pos:start="2305:33" pos:end="2305:36"><name pos:start="2305:33" pos:end="2305:36">size</name></expr>)</condition> <block pos:start="2305:39" pos:end="2315:25">{<block_content pos:start="2307:25" pos:end="2313:41">

                        <case pos:start="2307:25" pos:end="2307:31">case <expr pos:start="2307:30" pos:end="2307:30"><literal type="number" pos:start="2307:30" pos:end="2307:30">0</literal></expr>:</case> <expr_stmt pos:start="2307:33" pos:end="2307:62"><expr pos:start="2307:33" pos:end="2307:61"><call pos:start="2307:33" pos:end="2307:61"><name pos:start="2307:33" pos:end="2307:51">tcg_gen_bswap32_i32</name><argument_list pos:start="2307:52" pos:end="2307:61">(<argument pos:start="2307:53" pos:end="2307:55"><expr pos:start="2307:53" pos:end="2307:55"><name pos:start="2307:53" pos:end="2307:55">tmp</name></expr></argument>, <argument pos:start="2307:58" pos:end="2307:60"><expr pos:start="2307:58" pos:end="2307:60"><name pos:start="2307:58" pos:end="2307:60">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2307:64" pos:end="2307:69">break;</break>

                        <case pos:start="2309:25" pos:end="2309:31">case <expr pos:start="2309:30" pos:end="2309:30"><literal type="number" pos:start="2309:30" pos:end="2309:30">1</literal></expr>:</case> <expr_stmt pos:start="2309:33" pos:end="2309:51"><expr pos:start="2309:33" pos:end="2309:50"><call pos:start="2309:33" pos:end="2309:50"><name pos:start="2309:33" pos:end="2309:45">gen_swap_half</name><argument_list pos:start="2309:46" pos:end="2309:50">(<argument pos:start="2309:47" pos:end="2309:49"><expr pos:start="2309:47" pos:end="2309:49"><name pos:start="2309:47" pos:end="2309:49">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2309:53" pos:end="2309:58">break;</break>

                        <case pos:start="2311:25" pos:end="2311:31">case <expr pos:start="2311:30" pos:end="2311:30"><literal type="number" pos:start="2311:30" pos:end="2311:30">2</literal></expr>:</case> <comment type="block" pos:start="2311:33" pos:end="2311:43">/* no-op */</comment> <break pos:start="2311:45" pos:end="2311:50">break;</break>

                        <default pos:start="2313:25" pos:end="2313:32">default:</default> <expr_stmt pos:start="2313:34" pos:end="2313:41"><expr pos:start="2313:34" pos:end="2313:40"><call pos:start="2313:34" pos:end="2313:40"><name pos:start="2313:34" pos:end="2313:38">abort</name><argument_list pos:start="2313:39" pos:end="2313:40">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="2317:25" pos:end="2317:62"><expr pos:start="2317:25" pos:end="2317:61"><call pos:start="2317:25" pos:end="2317:61"><name pos:start="2317:25" pos:end="2317:38">neon_store_reg</name><argument_list pos:start="2317:39" pos:end="2317:61">(<argument pos:start="2317:40" pos:end="2317:41"><expr pos:start="2317:40" pos:end="2317:41"><name pos:start="2317:40" pos:end="2317:41">rd</name></expr></argument>, <argument pos:start="2317:44" pos:end="2317:55"><expr pos:start="2317:44" pos:end="2317:55"><name pos:start="2317:44" pos:end="2317:47">pass</name> <operator pos:start="2317:49" pos:end="2317:49">*</operator> <literal type="number" pos:start="2317:51" pos:end="2317:53">2</literal> <operator pos:start="2317:53" pos:end="2317:53">+</operator> <literal type="number" pos:start="2317:55" pos:end="2317:55">1</literal></expr></argument>, <argument pos:start="2317:58" pos:end="2317:60"><expr pos:start="2317:58" pos:end="2317:60"><name pos:start="2317:58" pos:end="2317:60">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2319:25" pos:end="2337:25"><if pos:start="2319:25" pos:end="2323:25">if <condition pos:start="2319:28" pos:end="2319:38">(<expr pos:start="2319:29" pos:end="2319:37"><name pos:start="2319:29" pos:end="2319:32">size</name> <operator pos:start="2319:34" pos:end="2319:35">==</operator> <literal type="number" pos:start="2319:37" pos:end="2319:37">2</literal></expr>)</condition> <block pos:start="2319:40" pos:end="2323:25">{<block_content pos:start="2321:29" pos:end="2321:63">

                            <expr_stmt pos:start="2321:29" pos:end="2321:63"><expr pos:start="2321:29" pos:end="2321:62"><call pos:start="2321:29" pos:end="2321:62"><name pos:start="2321:29" pos:end="2321:42">neon_store_reg</name><argument_list pos:start="2321:43" pos:end="2321:62">(<argument pos:start="2321:44" pos:end="2321:45"><expr pos:start="2321:44" pos:end="2321:45"><name pos:start="2321:44" pos:end="2321:45">rd</name></expr></argument>, <argument pos:start="2321:48" pos:end="2321:55"><expr pos:start="2321:48" pos:end="2321:55"><name pos:start="2321:48" pos:end="2321:51">pass</name> <operator pos:start="2321:53" pos:end="2321:53">*</operator> <literal type="number" pos:start="2321:55" pos:end="2321:55">2</literal></expr></argument>, <argument pos:start="2321:58" pos:end="2321:61"><expr pos:start="2321:58" pos:end="2321:61"><name pos:start="2321:58" pos:end="2321:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2323:27" pos:end="2337:25">else <block pos:start="2323:32" pos:end="2337:25">{<block_content pos:start="2325:29" pos:end="2335:63">

                            <switch pos:start="2325:29" pos:end="2333:29">switch <condition pos:start="2325:36" pos:end="2325:41">(<expr pos:start="2325:37" pos:end="2325:40"><name pos:start="2325:37" pos:end="2325:40">size</name></expr>)</condition> <block pos:start="2325:43" pos:end="2333:29">{<block_content pos:start="2327:29" pos:end="2331:45">

                            <case pos:start="2327:29" pos:end="2327:35">case <expr pos:start="2327:34" pos:end="2327:34"><literal type="number" pos:start="2327:34" pos:end="2327:34">0</literal></expr>:</case> <expr_stmt pos:start="2327:37" pos:end="2327:68"><expr pos:start="2327:37" pos:end="2327:67"><call pos:start="2327:37" pos:end="2327:67"><name pos:start="2327:37" pos:end="2327:55">tcg_gen_bswap32_i32</name><argument_list pos:start="2327:56" pos:end="2327:67">(<argument pos:start="2327:57" pos:end="2327:60"><expr pos:start="2327:57" pos:end="2327:60"><name pos:start="2327:57" pos:end="2327:60">tmp2</name></expr></argument>, <argument pos:start="2327:63" pos:end="2327:66"><expr pos:start="2327:63" pos:end="2327:66"><name pos:start="2327:63" pos:end="2327:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2327:70" pos:end="2327:75">break;</break>

                            <case pos:start="2329:29" pos:end="2329:35">case <expr pos:start="2329:34" pos:end="2329:34"><literal type="number" pos:start="2329:34" pos:end="2329:34">1</literal></expr>:</case> <expr_stmt pos:start="2329:37" pos:end="2329:56"><expr pos:start="2329:37" pos:end="2329:55"><call pos:start="2329:37" pos:end="2329:55"><name pos:start="2329:37" pos:end="2329:49">gen_swap_half</name><argument_list pos:start="2329:50" pos:end="2329:55">(<argument pos:start="2329:51" pos:end="2329:54"><expr pos:start="2329:51" pos:end="2329:54"><name pos:start="2329:51" pos:end="2329:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2329:58" pos:end="2329:63">break;</break>

                            <default pos:start="2331:29" pos:end="2331:36">default:</default> <expr_stmt pos:start="2331:38" pos:end="2331:45"><expr pos:start="2331:38" pos:end="2331:44"><call pos:start="2331:38" pos:end="2331:44"><name pos:start="2331:38" pos:end="2331:42">abort</name><argument_list pos:start="2331:43" pos:end="2331:44">()</argument_list></call></expr>;</expr_stmt>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="2335:29" pos:end="2335:63"><expr pos:start="2335:29" pos:end="2335:62"><call pos:start="2335:29" pos:end="2335:62"><name pos:start="2335:29" pos:end="2335:42">neon_store_reg</name><argument_list pos:start="2335:43" pos:end="2335:62">(<argument pos:start="2335:44" pos:end="2335:45"><expr pos:start="2335:44" pos:end="2335:45"><name pos:start="2335:44" pos:end="2335:45">rd</name></expr></argument>, <argument pos:start="2335:48" pos:end="2335:55"><expr pos:start="2335:48" pos:end="2335:55"><name pos:start="2335:48" pos:end="2335:51">pass</name> <operator pos:start="2335:53" pos:end="2335:53">*</operator> <literal type="number" pos:start="2335:55" pos:end="2335:55">2</literal></expr></argument>, <argument pos:start="2335:58" pos:end="2335:61"><expr pos:start="2335:58" pos:end="2335:61"><name pos:start="2335:58" pos:end="2335:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2341:21" pos:end="2341:26">break;</break>

                <case pos:start="2343:17" pos:end="2343:23">case <expr pos:start="2343:22" pos:end="2343:22"><literal type="number" pos:start="2343:22" pos:end="2343:22">4</literal></expr>:</case> <case pos:start="2343:25" pos:end="2343:31">case <expr pos:start="2343:30" pos:end="2343:30"><literal type="number" pos:start="2343:30" pos:end="2343:30">5</literal></expr>:</case> <comment type="block" pos:start="2343:33" pos:end="2343:44">/* VPADDL */</comment>

                <case pos:start="2345:17" pos:end="2345:24">case <expr pos:start="2345:22" pos:end="2345:23"><literal type="number" pos:start="2345:22" pos:end="2345:23">12</literal></expr>:</case> <case pos:start="2345:26" pos:end="2345:33">case <expr pos:start="2345:31" pos:end="2345:32"><literal type="number" pos:start="2345:31" pos:end="2345:32">13</literal></expr>:</case> <comment type="block" pos:start="2345:35" pos:end="2345:46">/* VPADAL */</comment>

                    <if_stmt pos:start="2347:21" pos:end="2349:33"><if pos:start="2347:21" pos:end="2349:33">if <condition pos:start="2347:24" pos:end="2347:34">(<expr pos:start="2347:25" pos:end="2347:33"><name pos:start="2347:25" pos:end="2347:28">size</name> <operator pos:start="2347:30" pos:end="2347:31">==</operator> <literal type="number" pos:start="2347:33" pos:end="2347:33">3</literal></expr>)</condition><block type="pseudo" pos:start="2349:25" pos:end="2349:33"><block_content pos:start="2349:25" pos:end="2349:33">

                        <return pos:start="2349:25" pos:end="2349:33">return <expr pos:start="2349:32" pos:end="2349:32"><literal type="number" pos:start="2349:32" pos:end="2349:32">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <for pos:start="2351:21" pos:end="2385:21">for <control pos:start="2351:25" pos:end="2351:56">(<init pos:start="2351:26" pos:end="2351:34"><expr pos:start="2351:26" pos:end="2351:33"><name pos:start="2351:26" pos:end="2351:29">pass</name> <operator pos:start="2351:31" pos:end="2351:31">=</operator> <literal type="number" pos:start="2351:33" pos:end="2351:33">0</literal></expr>;</init> <condition pos:start="2351:36" pos:end="2351:48"><expr pos:start="2351:36" pos:end="2351:47"><name pos:start="2351:36" pos:end="2351:39">pass</name> <operator pos:start="2351:41" pos:end="2351:41">&lt;</operator> <name pos:start="2351:43" pos:end="2351:43">q</name> <operator pos:start="2351:45" pos:end="2351:45">+</operator> <literal type="number" pos:start="2351:47" pos:end="2351:47">1</literal></expr>;</condition> <incr pos:start="2351:50" pos:end="2351:55"><expr pos:start="2351:50" pos:end="2351:55"><name pos:start="2351:50" pos:end="2351:53">pass</name><operator pos:start="2351:54" pos:end="2351:55">++</operator></expr></incr>)</control> <block pos:start="2351:58" pos:end="2385:21">{<block_content pos:start="2353:25" pos:end="2383:60">

                        <expr_stmt pos:start="2353:25" pos:end="2353:58"><expr pos:start="2353:25" pos:end="2353:57"><name pos:start="2353:25" pos:end="2353:27">tmp</name> <operator pos:start="2353:29" pos:end="2353:29">=</operator> <call pos:start="2353:31" pos:end="2353:57"><name pos:start="2353:31" pos:end="2353:43">neon_load_reg</name><argument_list pos:start="2353:44" pos:end="2353:57">(<argument pos:start="2353:45" pos:end="2353:46"><expr pos:start="2353:45" pos:end="2353:46"><name pos:start="2353:45" pos:end="2353:46">rm</name></expr></argument>, <argument pos:start="2353:49" pos:end="2353:56"><expr pos:start="2353:49" pos:end="2353:56"><name pos:start="2353:49" pos:end="2353:52">pass</name> <operator pos:start="2353:54" pos:end="2353:54">*</operator> <literal type="number" pos:start="2353:56" pos:end="2353:56">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2355:25" pos:end="2355:66"><expr pos:start="2355:25" pos:end="2355:65"><call pos:start="2355:25" pos:end="2355:65"><name pos:start="2355:25" pos:end="2355:38">gen_neon_widen</name><argument_list pos:start="2355:39" pos:end="2355:65">(<argument pos:start="2355:40" pos:end="2355:45"><expr pos:start="2355:40" pos:end="2355:45"><name pos:start="2355:40" pos:end="2355:45">cpu_V0</name></expr></argument>, <argument pos:start="2355:48" pos:end="2355:50"><expr pos:start="2355:48" pos:end="2355:50"><name pos:start="2355:48" pos:end="2355:50">tmp</name></expr></argument>, <argument pos:start="2355:53" pos:end="2355:56"><expr pos:start="2355:53" pos:end="2355:56"><name pos:start="2355:53" pos:end="2355:56">size</name></expr></argument>, <argument pos:start="2355:59" pos:end="2355:64"><expr pos:start="2355:59" pos:end="2355:64"><name pos:start="2355:59" pos:end="2355:60">op</name> <operator pos:start="2355:62" pos:end="2355:62">&amp;</operator> <literal type="number" pos:start="2355:64" pos:end="2355:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2357:25" pos:end="2357:62"><expr pos:start="2357:25" pos:end="2357:61"><name pos:start="2357:25" pos:end="2357:27">tmp</name> <operator pos:start="2357:29" pos:end="2357:29">=</operator> <call pos:start="2357:31" pos:end="2357:61"><name pos:start="2357:31" pos:end="2357:43">neon_load_reg</name><argument_list pos:start="2357:44" pos:end="2357:61">(<argument pos:start="2357:45" pos:end="2357:46"><expr pos:start="2357:45" pos:end="2357:46"><name pos:start="2357:45" pos:end="2357:46">rm</name></expr></argument>, <argument pos:start="2357:49" pos:end="2357:60"><expr pos:start="2357:49" pos:end="2357:60"><name pos:start="2357:49" pos:end="2357:52">pass</name> <operator pos:start="2357:54" pos:end="2357:54">*</operator> <literal type="number" pos:start="2357:56" pos:end="2357:58">2</literal> <operator pos:start="2357:58" pos:end="2357:58">+</operator> <literal type="number" pos:start="2357:60" pos:end="2357:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2359:25" pos:end="2359:66"><expr pos:start="2359:25" pos:end="2359:65"><call pos:start="2359:25" pos:end="2359:65"><name pos:start="2359:25" pos:end="2359:38">gen_neon_widen</name><argument_list pos:start="2359:39" pos:end="2359:65">(<argument pos:start="2359:40" pos:end="2359:45"><expr pos:start="2359:40" pos:end="2359:45"><name pos:start="2359:40" pos:end="2359:45">cpu_V1</name></expr></argument>, <argument pos:start="2359:48" pos:end="2359:50"><expr pos:start="2359:48" pos:end="2359:50"><name pos:start="2359:48" pos:end="2359:50">tmp</name></expr></argument>, <argument pos:start="2359:53" pos:end="2359:56"><expr pos:start="2359:53" pos:end="2359:56"><name pos:start="2359:53" pos:end="2359:56">size</name></expr></argument>, <argument pos:start="2359:59" pos:end="2359:64"><expr pos:start="2359:59" pos:end="2359:64"><name pos:start="2359:59" pos:end="2359:60">op</name> <operator pos:start="2359:62" pos:end="2359:62">&amp;</operator> <literal type="number" pos:start="2359:64" pos:end="2359:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="2361:25" pos:end="2371:25">switch <condition pos:start="2361:32" pos:end="2361:37">(<expr pos:start="2361:33" pos:end="2361:36"><name pos:start="2361:33" pos:end="2361:36">size</name></expr>)</condition> <block pos:start="2361:39" pos:end="2371:25">{<block_content pos:start="2363:25" pos:end="2369:41">

                        <case pos:start="2363:25" pos:end="2363:31">case <expr pos:start="2363:30" pos:end="2363:30"><literal type="number" pos:start="2363:30" pos:end="2363:30">0</literal></expr>:</case> <expr_stmt pos:start="2363:33" pos:end="2363:68"><expr pos:start="2363:33" pos:end="2363:67"><call pos:start="2363:33" pos:end="2363:67"><name pos:start="2363:33" pos:end="2363:57">gen_helper_neon_paddl_u16</name><argument_list pos:start="2363:58" pos:end="2363:67">(<argument pos:start="2363:59" pos:end="2363:66"><expr pos:start="2363:59" pos:end="2363:66"><name pos:start="2363:59" pos:end="2363:66">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2363:70" pos:end="2363:75">break;</break>

                        <case pos:start="2365:25" pos:end="2365:31">case <expr pos:start="2365:30" pos:end="2365:30"><literal type="number" pos:start="2365:30" pos:end="2365:30">1</literal></expr>:</case> <expr_stmt pos:start="2365:33" pos:end="2365:68"><expr pos:start="2365:33" pos:end="2365:67"><call pos:start="2365:33" pos:end="2365:67"><name pos:start="2365:33" pos:end="2365:57">gen_helper_neon_paddl_u32</name><argument_list pos:start="2365:58" pos:end="2365:67">(<argument pos:start="2365:59" pos:end="2365:66"><expr pos:start="2365:59" pos:end="2365:66"><name pos:start="2365:59" pos:end="2365:66">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2365:70" pos:end="2365:75">break;</break>

                        <case pos:start="2367:25" pos:end="2367:31">case <expr pos:start="2367:30" pos:end="2367:30"><literal type="number" pos:start="2367:30" pos:end="2367:30">2</literal></expr>:</case> <expr_stmt pos:start="2367:33" pos:end="2367:58"><expr pos:start="2367:33" pos:end="2367:57"><call pos:start="2367:33" pos:end="2367:57"><name pos:start="2367:33" pos:end="2367:47">tcg_gen_add_i64</name><argument_list pos:start="2367:48" pos:end="2367:57">(<argument pos:start="2367:49" pos:end="2367:56"><expr pos:start="2367:49" pos:end="2367:56"><name pos:start="2367:49" pos:end="2367:56">CPU_V001</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2367:60" pos:end="2367:65">break;</break>

                        <default pos:start="2369:25" pos:end="2369:32">default:</default> <expr_stmt pos:start="2369:34" pos:end="2369:41"><expr pos:start="2369:34" pos:end="2369:40"><call pos:start="2369:34" pos:end="2369:40"><name pos:start="2369:34" pos:end="2369:38">abort</name><argument_list pos:start="2369:39" pos:end="2369:40">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <if_stmt pos:start="2373:25" pos:end="2381:25"><if pos:start="2373:25" pos:end="2381:25">if <condition pos:start="2373:28" pos:end="2373:37">(<expr pos:start="2373:29" pos:end="2373:36"><name pos:start="2373:29" pos:end="2373:30">op</name> <operator pos:start="2373:32" pos:end="2373:33">&gt;=</operator> <literal type="number" pos:start="2373:35" pos:end="2373:36">12</literal></expr>)</condition> <block pos:start="2373:39" pos:end="2381:25">{<block_content pos:start="2377:29" pos:end="2379:48">

                            <comment type="block" pos:start="2375:29" pos:end="2375:46">/* Accumulate.  */</comment>

                            <expr_stmt pos:start="2377:29" pos:end="2377:63"><expr pos:start="2377:29" pos:end="2377:62"><call pos:start="2377:29" pos:end="2377:62"><name pos:start="2377:29" pos:end="2377:43">neon_load_reg64</name><argument_list pos:start="2377:44" pos:end="2377:62">(<argument pos:start="2377:45" pos:end="2377:50"><expr pos:start="2377:45" pos:end="2377:50"><name pos:start="2377:45" pos:end="2377:50">cpu_V1</name></expr></argument>, <argument pos:start="2377:53" pos:end="2377:61"><expr pos:start="2377:53" pos:end="2377:61"><name pos:start="2377:53" pos:end="2377:54">rd</name> <operator pos:start="2377:56" pos:end="2377:56">+</operator> <name pos:start="2377:58" pos:end="2377:61">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2379:29" pos:end="2379:48"><expr pos:start="2379:29" pos:end="2379:47"><call pos:start="2379:29" pos:end="2379:47"><name pos:start="2379:29" pos:end="2379:41">gen_neon_addl</name><argument_list pos:start="2379:42" pos:end="2379:47">(<argument pos:start="2379:43" pos:end="2379:46"><expr pos:start="2379:43" pos:end="2379:46"><name pos:start="2379:43" pos:end="2379:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="2383:25" pos:end="2383:60"><expr pos:start="2383:25" pos:end="2383:59"><call pos:start="2383:25" pos:end="2383:59"><name pos:start="2383:25" pos:end="2383:40">neon_store_reg64</name><argument_list pos:start="2383:41" pos:end="2383:59">(<argument pos:start="2383:42" pos:end="2383:47"><expr pos:start="2383:42" pos:end="2383:47"><name pos:start="2383:42" pos:end="2383:47">cpu_V0</name></expr></argument>, <argument pos:start="2383:50" pos:end="2383:58"><expr pos:start="2383:50" pos:end="2383:58"><name pos:start="2383:50" pos:end="2383:51">rd</name> <operator pos:start="2383:53" pos:end="2383:53">+</operator> <name pos:start="2383:55" pos:end="2383:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2387:21" pos:end="2387:26">break;</break>

                <case pos:start="2389:17" pos:end="2389:24">case <expr pos:start="2389:22" pos:end="2389:23"><literal type="number" pos:start="2389:22" pos:end="2389:23">33</literal></expr>:</case> <comment type="block" pos:start="2389:26" pos:end="2389:35">/* VTRN */</comment>

                    <if_stmt pos:start="2391:21" pos:end="2409:21"><if pos:start="2391:21" pos:end="2405:21">if <condition pos:start="2391:24" pos:end="2391:34">(<expr pos:start="2391:25" pos:end="2391:33"><name pos:start="2391:25" pos:end="2391:28">size</name> <operator pos:start="2391:30" pos:end="2391:31">==</operator> <literal type="number" pos:start="2391:33" pos:end="2391:33">2</literal></expr>)</condition> <block pos:start="2391:36" pos:end="2405:21">{<block_content pos:start="2393:25" pos:end="2403:25">

                        <for pos:start="2393:25" pos:end="2403:25">for <control pos:start="2393:29" pos:end="2393:60">(<init pos:start="2393:30" pos:end="2393:35"><expr pos:start="2393:30" pos:end="2393:34"><name pos:start="2393:30" pos:end="2393:30">n</name> <operator pos:start="2393:32" pos:end="2393:32">=</operator> <literal type="number" pos:start="2393:34" pos:end="2393:34">0</literal></expr>;</init> <condition pos:start="2393:37" pos:end="2393:52"><expr pos:start="2393:37" pos:end="2393:51"><name pos:start="2393:37" pos:end="2393:37">n</name> <operator pos:start="2393:39" pos:end="2393:39">&lt;</operator> <operator pos:start="2393:41" pos:end="2393:41">(</operator><ternary pos:start="2393:42" pos:end="2393:50"><condition pos:start="2393:42" pos:end="2393:44"><expr pos:start="2393:42" pos:end="2393:42"><name pos:start="2393:42" pos:end="2393:42">q</name></expr> ?</condition><then pos:start="2393:46" pos:end="2393:46"> <expr pos:start="2393:46" pos:end="2393:46"><literal type="number" pos:start="2393:46" pos:end="2393:46">4</literal></expr> </then><else pos:start="2393:48" pos:end="2393:50">: <expr pos:start="2393:50" pos:end="2393:50"><literal type="number" pos:start="2393:50" pos:end="2393:50">2</literal></expr></else></ternary><operator pos:start="2393:51" pos:end="2393:51">)</operator></expr>;</condition> <incr pos:start="2393:54" pos:end="2393:59"><expr pos:start="2393:54" pos:end="2393:59"><name pos:start="2393:54" pos:end="2393:54">n</name> <operator pos:start="2393:56" pos:end="2393:57">+=</operator> <literal type="number" pos:start="2393:59" pos:end="2393:59">2</literal></expr></incr>)</control> <block pos:start="2393:62" pos:end="2403:25">{<block_content pos:start="2395:29" pos:end="2401:59">

                            <expr_stmt pos:start="2395:29" pos:end="2395:55"><expr pos:start="2395:29" pos:end="2395:54"><name pos:start="2395:29" pos:end="2395:31">tmp</name> <operator pos:start="2395:33" pos:end="2395:33">=</operator> <call pos:start="2395:35" pos:end="2395:54"><name pos:start="2395:35" pos:end="2395:47">neon_load_reg</name><argument_list pos:start="2395:48" pos:end="2395:54">(<argument pos:start="2395:49" pos:end="2395:50"><expr pos:start="2395:49" pos:end="2395:50"><name pos:start="2395:49" pos:end="2395:50">rm</name></expr></argument>, <argument pos:start="2395:53" pos:end="2395:53"><expr pos:start="2395:53" pos:end="2395:53"><name pos:start="2395:53" pos:end="2395:53">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2397:29" pos:end="2397:60"><expr pos:start="2397:29" pos:end="2397:59"><name pos:start="2397:29" pos:end="2397:32">tmp2</name> <operator pos:start="2397:34" pos:end="2397:34">=</operator> <call pos:start="2397:36" pos:end="2397:59"><name pos:start="2397:36" pos:end="2397:48">neon_load_reg</name><argument_list pos:start="2397:49" pos:end="2397:59">(<argument pos:start="2397:50" pos:end="2397:51"><expr pos:start="2397:50" pos:end="2397:51"><name pos:start="2397:50" pos:end="2397:51">rd</name></expr></argument>, <argument pos:start="2397:54" pos:end="2397:58"><expr pos:start="2397:54" pos:end="2397:58"><name pos:start="2397:54" pos:end="2397:54">n</name> <operator pos:start="2397:56" pos:end="2397:56">+</operator> <literal type="number" pos:start="2397:58" pos:end="2397:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2399:29" pos:end="2399:56"><expr pos:start="2399:29" pos:end="2399:55"><call pos:start="2399:29" pos:end="2399:55"><name pos:start="2399:29" pos:end="2399:42">neon_store_reg</name><argument_list pos:start="2399:43" pos:end="2399:55">(<argument pos:start="2399:44" pos:end="2399:45"><expr pos:start="2399:44" pos:end="2399:45"><name pos:start="2399:44" pos:end="2399:45">rm</name></expr></argument>, <argument pos:start="2399:48" pos:end="2399:48"><expr pos:start="2399:48" pos:end="2399:48"><name pos:start="2399:48" pos:end="2399:48">n</name></expr></argument>, <argument pos:start="2399:51" pos:end="2399:54"><expr pos:start="2399:51" pos:end="2399:54"><name pos:start="2399:51" pos:end="2399:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2401:29" pos:end="2401:59"><expr pos:start="2401:29" pos:end="2401:58"><call pos:start="2401:29" pos:end="2401:58"><name pos:start="2401:29" pos:end="2401:42">neon_store_reg</name><argument_list pos:start="2401:43" pos:end="2401:58">(<argument pos:start="2401:44" pos:end="2401:45"><expr pos:start="2401:44" pos:end="2401:45"><name pos:start="2401:44" pos:end="2401:45">rd</name></expr></argument>, <argument pos:start="2401:48" pos:end="2401:52"><expr pos:start="2401:48" pos:end="2401:52"><name pos:start="2401:48" pos:end="2401:48">n</name> <operator pos:start="2401:50" pos:end="2401:50">+</operator> <literal type="number" pos:start="2401:52" pos:end="2401:52">1</literal></expr></argument>, <argument pos:start="2401:55" pos:end="2401:57"><expr pos:start="2401:55" pos:end="2401:57"><name pos:start="2401:55" pos:end="2401:57">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if> <else pos:start="2405:23" pos:end="2409:21">else <block pos:start="2405:28" pos:end="2409:21">{<block_content pos:start="2407:25" pos:end="2407:41">

                        <goto pos:start="2407:25" pos:end="2407:41">goto <name pos:start="2407:30" pos:end="2407:40">elementwise</name>;</goto>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2411:21" pos:end="2411:26">break;</break>

                <case pos:start="2413:17" pos:end="2413:24">case <expr pos:start="2413:22" pos:end="2413:23"><literal type="number" pos:start="2413:22" pos:end="2413:23">34</literal></expr>:</case> <comment type="block" pos:start="2413:26" pos:end="2413:35">/* VUZP */</comment>

                    <comment type="block" pos:start="2415:21" pos:end="2421:23">/* Reg  Before       After

                       Rd   A3 A2 A1 A0  B2 B0 A2 A0

                       Rm   B3 B2 B1 B0  B3 B1 A3 A1

                     */</comment>

                    <if_stmt pos:start="2423:21" pos:end="2425:33"><if pos:start="2423:21" pos:end="2425:33">if <condition pos:start="2423:24" pos:end="2423:34">(<expr pos:start="2423:25" pos:end="2423:33"><name pos:start="2423:25" pos:end="2423:28">size</name> <operator pos:start="2423:30" pos:end="2423:31">==</operator> <literal type="number" pos:start="2423:33" pos:end="2423:33">3</literal></expr>)</condition><block type="pseudo" pos:start="2425:25" pos:end="2425:33"><block_content pos:start="2425:25" pos:end="2425:33">

                        <return pos:start="2425:25" pos:end="2425:33">return <expr pos:start="2425:32" pos:end="2425:32"><literal type="number" pos:start="2425:32" pos:end="2425:32">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="2427:21" pos:end="2427:51"><expr pos:start="2427:21" pos:end="2427:50"><call pos:start="2427:21" pos:end="2427:50"><name pos:start="2427:21" pos:end="2427:34">gen_neon_unzip</name><argument_list pos:start="2427:35" pos:end="2427:50">(<argument pos:start="2427:36" pos:end="2427:37"><expr pos:start="2427:36" pos:end="2427:37"><name pos:start="2427:36" pos:end="2427:37">rd</name></expr></argument>, <argument pos:start="2427:40" pos:end="2427:40"><expr pos:start="2427:40" pos:end="2427:40"><name pos:start="2427:40" pos:end="2427:40">q</name></expr></argument>, <argument pos:start="2427:43" pos:end="2427:43"><expr pos:start="2427:43" pos:end="2427:43"><literal type="number" pos:start="2427:43" pos:end="2427:43">0</literal></expr></argument>, <argument pos:start="2427:46" pos:end="2427:49"><expr pos:start="2427:46" pos:end="2427:49"><name pos:start="2427:46" pos:end="2427:49">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2429:21" pos:end="2429:51"><expr pos:start="2429:21" pos:end="2429:50"><call pos:start="2429:21" pos:end="2429:50"><name pos:start="2429:21" pos:end="2429:34">gen_neon_unzip</name><argument_list pos:start="2429:35" pos:end="2429:50">(<argument pos:start="2429:36" pos:end="2429:37"><expr pos:start="2429:36" pos:end="2429:37"><name pos:start="2429:36" pos:end="2429:37">rm</name></expr></argument>, <argument pos:start="2429:40" pos:end="2429:40"><expr pos:start="2429:40" pos:end="2429:40"><name pos:start="2429:40" pos:end="2429:40">q</name></expr></argument>, <argument pos:start="2429:43" pos:end="2429:43"><expr pos:start="2429:43" pos:end="2429:43"><literal type="number" pos:start="2429:43" pos:end="2429:43">4</literal></expr></argument>, <argument pos:start="2429:46" pos:end="2429:49"><expr pos:start="2429:46" pos:end="2429:49"><name pos:start="2429:46" pos:end="2429:49">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="2431:21" pos:end="2463:21"><if pos:start="2431:21" pos:end="2447:21">if <condition pos:start="2431:24" pos:end="2431:26">(<expr pos:start="2431:25" pos:end="2431:25"><name pos:start="2431:25" pos:end="2431:25">q</name></expr>)</condition> <block pos:start="2431:28" pos:end="2447:21">{<block_content pos:start="2433:25" pos:end="2445:25">

                        <decl_stmt pos:start="2433:25" pos:end="2435:53"><decl pos:start="2433:25" pos:end="2435:52"><type pos:start="2433:25" pos:end="2433:34"><specifier pos:start="2433:25" pos:end="2433:30">static</specifier> <name pos:start="2433:32" pos:end="2433:34">int</name></type> <name pos:start="2433:36" pos:end="2433:51"><name pos:start="2433:36" pos:end="2433:48">unzip_order_q</name><index pos:start="2433:49" pos:end="2433:51">[<expr pos:start="2433:50" pos:end="2433:50"><literal type="number" pos:start="2433:50" pos:end="2433:50">8</literal></expr>]</index></name> <init pos:start="2433:53" pos:end="2435:52">=

                            <expr pos:start="2435:29" pos:end="2435:52"><block pos:start="2435:29" pos:end="2435:52">{<expr pos:start="2435:30" pos:end="2435:30"><literal type="number" pos:start="2435:30" pos:end="2435:30">0</literal></expr>, <expr pos:start="2435:33" pos:end="2435:33"><literal type="number" pos:start="2435:33" pos:end="2435:33">2</literal></expr>, <expr pos:start="2435:36" pos:end="2435:36"><literal type="number" pos:start="2435:36" pos:end="2435:36">4</literal></expr>, <expr pos:start="2435:39" pos:end="2435:39"><literal type="number" pos:start="2435:39" pos:end="2435:39">6</literal></expr>, <expr pos:start="2435:42" pos:end="2435:42"><literal type="number" pos:start="2435:42" pos:end="2435:42">1</literal></expr>, <expr pos:start="2435:45" pos:end="2435:45"><literal type="number" pos:start="2435:45" pos:end="2435:45">3</literal></expr>, <expr pos:start="2435:48" pos:end="2435:48"><literal type="number" pos:start="2435:48" pos:end="2435:48">5</literal></expr>, <expr pos:start="2435:51" pos:end="2435:51"><literal type="number" pos:start="2435:51" pos:end="2435:51">7</literal></expr>}</block></expr></init></decl>;</decl_stmt>

                        <for pos:start="2437:25" pos:end="2445:25">for <control pos:start="2437:29" pos:end="2437:47">(<init pos:start="2437:30" pos:end="2437:35"><expr pos:start="2437:30" pos:end="2437:34"><name pos:start="2437:30" pos:end="2437:30">n</name> <operator pos:start="2437:32" pos:end="2437:32">=</operator> <literal type="number" pos:start="2437:34" pos:end="2437:34">0</literal></expr>;</init> <condition pos:start="2437:37" pos:end="2437:42"><expr pos:start="2437:37" pos:end="2437:41"><name pos:start="2437:37" pos:end="2437:37">n</name> <operator pos:start="2437:39" pos:end="2437:39">&lt;</operator> <literal type="number" pos:start="2437:41" pos:end="2437:41">8</literal></expr>;</condition> <incr pos:start="2437:44" pos:end="2437:46"><expr pos:start="2437:44" pos:end="2437:46"><name pos:start="2437:44" pos:end="2437:44">n</name><operator pos:start="2437:45" pos:end="2437:46">++</operator></expr></incr>)</control> <block pos:start="2437:49" pos:end="2445:25">{<block_content pos:start="2439:29" pos:end="2443:60">

                            <decl_stmt pos:start="2439:29" pos:end="2439:56"><decl pos:start="2439:29" pos:end="2439:55"><type pos:start="2439:29" pos:end="2439:31"><name pos:start="2439:29" pos:end="2439:31">int</name></type> <name pos:start="2439:33" pos:end="2439:35">reg</name> <init pos:start="2439:37" pos:end="2439:55">= <expr pos:start="2439:39" pos:end="2439:55"><ternary pos:start="2439:39" pos:end="2439:55"><condition pos:start="2439:39" pos:end="2439:47"><expr pos:start="2439:39" pos:end="2439:45"><operator pos:start="2439:39" pos:end="2439:39">(</operator><name pos:start="2439:40" pos:end="2439:40">n</name> <operator pos:start="2439:42" pos:end="2439:42">&lt;</operator> <literal type="number" pos:start="2439:44" pos:end="2439:44">4</literal><operator pos:start="2439:45" pos:end="2439:45">)</operator></expr> ?</condition><then pos:start="2439:49" pos:end="2439:50"> <expr pos:start="2439:49" pos:end="2439:50"><name pos:start="2439:49" pos:end="2439:50">rd</name></expr> </then><else pos:start="2439:52" pos:end="2439:55">: <expr pos:start="2439:54" pos:end="2439:55"><name pos:start="2439:54" pos:end="2439:55">rm</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="2441:29" pos:end="2441:70"><expr pos:start="2441:29" pos:end="2441:69"><name pos:start="2441:29" pos:end="2441:31">tmp</name> <operator pos:start="2441:33" pos:end="2441:33">=</operator> <call pos:start="2441:35" pos:end="2441:69"><name pos:start="2441:35" pos:end="2441:51">neon_load_scratch</name><argument_list pos:start="2441:52" pos:end="2441:69">(<argument pos:start="2441:53" pos:end="2441:68"><expr pos:start="2441:53" pos:end="2441:68"><name pos:start="2441:53" pos:end="2441:68"><name pos:start="2441:53" pos:end="2441:65">unzip_order_q</name><index pos:start="2441:66" pos:end="2441:68">[<expr pos:start="2441:67" pos:end="2441:67"><name pos:start="2441:67" pos:end="2441:67">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2443:29" pos:end="2443:60"><expr pos:start="2443:29" pos:end="2443:59"><call pos:start="2443:29" pos:end="2443:59"><name pos:start="2443:29" pos:end="2443:42">neon_store_reg</name><argument_list pos:start="2443:43" pos:end="2443:59">(<argument pos:start="2443:44" pos:end="2443:46"><expr pos:start="2443:44" pos:end="2443:46"><name pos:start="2443:44" pos:end="2443:46">reg</name></expr></argument>, <argument pos:start="2443:49" pos:end="2443:53"><expr pos:start="2443:49" pos:end="2443:53"><name pos:start="2443:49" pos:end="2443:49">n</name> <operator pos:start="2443:51" pos:end="2443:51">%</operator> <literal type="number" pos:start="2443:53" pos:end="2443:53">4</literal></expr></argument>, <argument pos:start="2443:56" pos:end="2443:58"><expr pos:start="2443:56" pos:end="2443:58"><name pos:start="2443:56" pos:end="2443:58">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></if> <else pos:start="2447:23" pos:end="2463:21">else <block pos:start="2447:28" pos:end="2463:21">{<block_content pos:start="2449:25" pos:end="2461:25">

                        <decl_stmt pos:start="2449:25" pos:end="2451:41"><decl pos:start="2449:25" pos:end="2451:40"><type pos:start="2449:25" pos:end="2449:34"><specifier pos:start="2449:25" pos:end="2449:30">static</specifier> <name pos:start="2449:32" pos:end="2449:34">int</name></type> <name pos:start="2449:36" pos:end="2449:49"><name pos:start="2449:36" pos:end="2449:46">unzip_order</name><index pos:start="2449:47" pos:end="2449:49">[<expr pos:start="2449:48" pos:end="2449:48"><literal type="number" pos:start="2449:48" pos:end="2449:48">4</literal></expr>]</index></name> <init pos:start="2449:51" pos:end="2451:40">=

                            <expr pos:start="2451:29" pos:end="2451:40"><block pos:start="2451:29" pos:end="2451:40">{<expr pos:start="2451:30" pos:end="2451:30"><literal type="number" pos:start="2451:30" pos:end="2451:30">0</literal></expr>, <expr pos:start="2451:33" pos:end="2451:33"><literal type="number" pos:start="2451:33" pos:end="2451:33">4</literal></expr>, <expr pos:start="2451:36" pos:end="2451:36"><literal type="number" pos:start="2451:36" pos:end="2451:36">1</literal></expr>, <expr pos:start="2451:39" pos:end="2451:39"><literal type="number" pos:start="2451:39" pos:end="2451:39">5</literal></expr>}</block></expr></init></decl>;</decl_stmt>

                        <for pos:start="2453:25" pos:end="2461:25">for <control pos:start="2453:29" pos:end="2453:47">(<init pos:start="2453:30" pos:end="2453:35"><expr pos:start="2453:30" pos:end="2453:34"><name pos:start="2453:30" pos:end="2453:30">n</name> <operator pos:start="2453:32" pos:end="2453:32">=</operator> <literal type="number" pos:start="2453:34" pos:end="2453:34">0</literal></expr>;</init> <condition pos:start="2453:37" pos:end="2453:42"><expr pos:start="2453:37" pos:end="2453:41"><name pos:start="2453:37" pos:end="2453:37">n</name> <operator pos:start="2453:39" pos:end="2453:39">&lt;</operator> <literal type="number" pos:start="2453:41" pos:end="2453:41">4</literal></expr>;</condition> <incr pos:start="2453:44" pos:end="2453:46"><expr pos:start="2453:44" pos:end="2453:46"><name pos:start="2453:44" pos:end="2453:44">n</name><operator pos:start="2453:45" pos:end="2453:46">++</operator></expr></incr>)</control> <block pos:start="2453:49" pos:end="2461:25">{<block_content pos:start="2455:29" pos:end="2459:60">

                            <decl_stmt pos:start="2455:29" pos:end="2455:56"><decl pos:start="2455:29" pos:end="2455:55"><type pos:start="2455:29" pos:end="2455:31"><name pos:start="2455:29" pos:end="2455:31">int</name></type> <name pos:start="2455:33" pos:end="2455:35">reg</name> <init pos:start="2455:37" pos:end="2455:55">= <expr pos:start="2455:39" pos:end="2455:55"><ternary pos:start="2455:39" pos:end="2455:55"><condition pos:start="2455:39" pos:end="2455:47"><expr pos:start="2455:39" pos:end="2455:45"><operator pos:start="2455:39" pos:end="2455:39">(</operator><name pos:start="2455:40" pos:end="2455:40">n</name> <operator pos:start="2455:42" pos:end="2455:42">&lt;</operator> <literal type="number" pos:start="2455:44" pos:end="2455:44">2</literal><operator pos:start="2455:45" pos:end="2455:45">)</operator></expr> ?</condition><then pos:start="2455:49" pos:end="2455:50"> <expr pos:start="2455:49" pos:end="2455:50"><name pos:start="2455:49" pos:end="2455:50">rd</name></expr> </then><else pos:start="2455:52" pos:end="2455:55">: <expr pos:start="2455:54" pos:end="2455:55"><name pos:start="2455:54" pos:end="2455:55">rm</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="2457:29" pos:end="2457:68"><expr pos:start="2457:29" pos:end="2457:67"><name pos:start="2457:29" pos:end="2457:31">tmp</name> <operator pos:start="2457:33" pos:end="2457:33">=</operator> <call pos:start="2457:35" pos:end="2457:67"><name pos:start="2457:35" pos:end="2457:51">neon_load_scratch</name><argument_list pos:start="2457:52" pos:end="2457:67">(<argument pos:start="2457:53" pos:end="2457:66"><expr pos:start="2457:53" pos:end="2457:66"><name pos:start="2457:53" pos:end="2457:66"><name pos:start="2457:53" pos:end="2457:63">unzip_order</name><index pos:start="2457:64" pos:end="2457:66">[<expr pos:start="2457:65" pos:end="2457:65"><name pos:start="2457:65" pos:end="2457:65">n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2459:29" pos:end="2459:60"><expr pos:start="2459:29" pos:end="2459:59"><call pos:start="2459:29" pos:end="2459:59"><name pos:start="2459:29" pos:end="2459:42">neon_store_reg</name><argument_list pos:start="2459:43" pos:end="2459:59">(<argument pos:start="2459:44" pos:end="2459:46"><expr pos:start="2459:44" pos:end="2459:46"><name pos:start="2459:44" pos:end="2459:46">reg</name></expr></argument>, <argument pos:start="2459:49" pos:end="2459:53"><expr pos:start="2459:49" pos:end="2459:53"><name pos:start="2459:49" pos:end="2459:49">n</name> <operator pos:start="2459:51" pos:end="2459:51">%</operator> <literal type="number" pos:start="2459:53" pos:end="2459:53">2</literal></expr></argument>, <argument pos:start="2459:56" pos:end="2459:58"><expr pos:start="2459:56" pos:end="2459:58"><name pos:start="2459:56" pos:end="2459:58">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></for>

                    </block_content>}</block></else></if_stmt>

                    <break pos:start="2465:21" pos:end="2465:26">break;</break>

                <case pos:start="2467:17" pos:end="2467:24">case <expr pos:start="2467:22" pos:end="2467:23"><literal type="number" pos:start="2467:22" pos:end="2467:23">35</literal></expr>:</case> <comment type="block" pos:start="2467:26" pos:end="2467:35">/* VZIP */</comment>

                    <comment type="block" pos:start="2469:21" pos:end="2475:23">/* Reg  Before       After

                       Rd   A3 A2 A1 A0  B1 A1 B0 A0

                       Rm   B3 B2 B1 B0  B3 A3 B2 A2

                     */</comment>

                    <if_stmt pos:start="2477:21" pos:end="2479:33"><if pos:start="2477:21" pos:end="2479:33">if <condition pos:start="2477:24" pos:end="2477:34">(<expr pos:start="2477:25" pos:end="2477:33"><name pos:start="2477:25" pos:end="2477:28">size</name> <operator pos:start="2477:30" pos:end="2477:31">==</operator> <literal type="number" pos:start="2477:33" pos:end="2477:33">3</literal></expr>)</condition><block type="pseudo" pos:start="2479:25" pos:end="2479:33"><block_content pos:start="2479:25" pos:end="2479:33">

                        <return pos:start="2479:25" pos:end="2479:33">return <expr pos:start="2479:32" pos:end="2479:32"><literal type="number" pos:start="2479:32" pos:end="2479:32">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="2481:21" pos:end="2481:40"><expr pos:start="2481:21" pos:end="2481:39"><name pos:start="2481:21" pos:end="2481:25">count</name> <operator pos:start="2481:27" pos:end="2481:27">=</operator> <operator pos:start="2481:29" pos:end="2481:29">(</operator><ternary pos:start="2481:30" pos:end="2481:38"><condition pos:start="2481:30" pos:end="2481:32"><expr pos:start="2481:30" pos:end="2481:30"><name pos:start="2481:30" pos:end="2481:30">q</name></expr> ?</condition><then pos:start="2481:34" pos:end="2481:34"> <expr pos:start="2481:34" pos:end="2481:34"><literal type="number" pos:start="2481:34" pos:end="2481:34">4</literal></expr> </then><else pos:start="2481:36" pos:end="2481:38">: <expr pos:start="2481:38" pos:end="2481:38"><literal type="number" pos:start="2481:38" pos:end="2481:38">2</literal></expr></else></ternary><operator pos:start="2481:39" pos:end="2481:39">)</operator></expr>;</expr_stmt>

                    <for pos:start="2483:21" pos:end="2505:21">for <control pos:start="2483:25" pos:end="2483:47">(<init pos:start="2483:26" pos:end="2483:31"><expr pos:start="2483:26" pos:end="2483:30"><name pos:start="2483:26" pos:end="2483:26">n</name> <operator pos:start="2483:28" pos:end="2483:28">=</operator> <literal type="number" pos:start="2483:30" pos:end="2483:30">0</literal></expr>;</init> <condition pos:start="2483:33" pos:end="2483:42"><expr pos:start="2483:33" pos:end="2483:41"><name pos:start="2483:33" pos:end="2483:33">n</name> <operator pos:start="2483:35" pos:end="2483:35">&lt;</operator> <name pos:start="2483:37" pos:end="2483:41">count</name></expr>;</condition> <incr pos:start="2483:44" pos:end="2483:46"><expr pos:start="2483:44" pos:end="2483:46"><name pos:start="2483:44" pos:end="2483:44">n</name><operator pos:start="2483:45" pos:end="2483:46">++</operator></expr></incr>)</control> <block pos:start="2483:49" pos:end="2505:21">{<block_content pos:start="2485:25" pos:end="2503:60">

                        <expr_stmt pos:start="2485:25" pos:end="2485:51"><expr pos:start="2485:25" pos:end="2485:50"><name pos:start="2485:25" pos:end="2485:27">tmp</name> <operator pos:start="2485:29" pos:end="2485:29">=</operator> <call pos:start="2485:31" pos:end="2485:50"><name pos:start="2485:31" pos:end="2485:43">neon_load_reg</name><argument_list pos:start="2485:44" pos:end="2485:50">(<argument pos:start="2485:45" pos:end="2485:46"><expr pos:start="2485:45" pos:end="2485:46"><name pos:start="2485:45" pos:end="2485:46">rd</name></expr></argument>, <argument pos:start="2485:49" pos:end="2485:49"><expr pos:start="2485:49" pos:end="2485:49"><name pos:start="2485:49" pos:end="2485:49">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2487:25" pos:end="2487:52"><expr pos:start="2487:25" pos:end="2487:51"><name pos:start="2487:25" pos:end="2487:28">tmp2</name> <operator pos:start="2487:30" pos:end="2487:30">=</operator> <call pos:start="2487:32" pos:end="2487:51"><name pos:start="2487:32" pos:end="2487:44">neon_load_reg</name><argument_list pos:start="2487:45" pos:end="2487:51">(<argument pos:start="2487:46" pos:end="2487:47"><expr pos:start="2487:46" pos:end="2487:47"><name pos:start="2487:46" pos:end="2487:47">rd</name></expr></argument>, <argument pos:start="2487:50" pos:end="2487:50"><expr pos:start="2487:50" pos:end="2487:50"><name pos:start="2487:50" pos:end="2487:50">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <switch pos:start="2489:25" pos:end="2499:25">switch <condition pos:start="2489:32" pos:end="2489:37">(<expr pos:start="2489:33" pos:end="2489:36"><name pos:start="2489:33" pos:end="2489:36">size</name></expr>)</condition> <block pos:start="2489:39" pos:end="2499:25">{<block_content pos:start="2491:25" pos:end="2497:41">

                        <case pos:start="2491:25" pos:end="2491:31">case <expr pos:start="2491:30" pos:end="2491:30"><literal type="number" pos:start="2491:30" pos:end="2491:30">0</literal></expr>:</case> <expr_stmt pos:start="2491:33" pos:end="2491:59"><expr pos:start="2491:33" pos:end="2491:58"><call pos:start="2491:33" pos:end="2491:58"><name pos:start="2491:33" pos:end="2491:47">gen_neon_zip_u8</name><argument_list pos:start="2491:48" pos:end="2491:58">(<argument pos:start="2491:49" pos:end="2491:51"><expr pos:start="2491:49" pos:end="2491:51"><name pos:start="2491:49" pos:end="2491:51">tmp</name></expr></argument>, <argument pos:start="2491:54" pos:end="2491:57"><expr pos:start="2491:54" pos:end="2491:57"><name pos:start="2491:54" pos:end="2491:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2491:61" pos:end="2491:66">break;</break>

                        <case pos:start="2493:25" pos:end="2493:31">case <expr pos:start="2493:30" pos:end="2493:30"><literal type="number" pos:start="2493:30" pos:end="2493:30">1</literal></expr>:</case> <expr_stmt pos:start="2493:33" pos:end="2493:60"><expr pos:start="2493:33" pos:end="2493:59"><call pos:start="2493:33" pos:end="2493:59"><name pos:start="2493:33" pos:end="2493:48">gen_neon_zip_u16</name><argument_list pos:start="2493:49" pos:end="2493:59">(<argument pos:start="2493:50" pos:end="2493:52"><expr pos:start="2493:50" pos:end="2493:52"><name pos:start="2493:50" pos:end="2493:52">tmp</name></expr></argument>, <argument pos:start="2493:55" pos:end="2493:58"><expr pos:start="2493:55" pos:end="2493:58"><name pos:start="2493:55" pos:end="2493:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2493:62" pos:end="2493:67">break;</break>

                        <case pos:start="2495:25" pos:end="2495:31">case <expr pos:start="2495:30" pos:end="2495:30"><literal type="number" pos:start="2495:30" pos:end="2495:30">2</literal></expr>:</case> <comment type="block" pos:start="2495:33" pos:end="2495:43">/* no-op */</comment><empty_stmt pos:start="2495:44" pos:end="2495:44">;</empty_stmt> <break pos:start="2495:46" pos:end="2495:51">break;</break>

                        <default pos:start="2497:25" pos:end="2497:32">default:</default> <expr_stmt pos:start="2497:34" pos:end="2497:41"><expr pos:start="2497:34" pos:end="2497:40"><call pos:start="2497:34" pos:end="2497:40"><name pos:start="2497:34" pos:end="2497:38">abort</name><argument_list pos:start="2497:39" pos:end="2497:40">()</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></switch>

                        <expr_stmt pos:start="2501:25" pos:end="2501:55"><expr pos:start="2501:25" pos:end="2501:54"><call pos:start="2501:25" pos:end="2501:54"><name pos:start="2501:25" pos:end="2501:42">neon_store_scratch</name><argument_list pos:start="2501:43" pos:end="2501:54">(<argument pos:start="2501:44" pos:end="2501:48"><expr pos:start="2501:44" pos:end="2501:48"><name pos:start="2501:44" pos:end="2501:44">n</name> <operator pos:start="2501:46" pos:end="2501:46">*</operator> <literal type="number" pos:start="2501:48" pos:end="2501:48">2</literal></expr></argument>, <argument pos:start="2501:51" pos:end="2501:53"><expr pos:start="2501:51" pos:end="2501:53"><name pos:start="2501:51" pos:end="2501:53">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2503:25" pos:end="2503:60"><expr pos:start="2503:25" pos:end="2503:59"><call pos:start="2503:25" pos:end="2503:59"><name pos:start="2503:25" pos:end="2503:42">neon_store_scratch</name><argument_list pos:start="2503:43" pos:end="2503:59">(<argument pos:start="2503:44" pos:end="2503:52"><expr pos:start="2503:44" pos:end="2503:52"><name pos:start="2503:44" pos:end="2503:44">n</name> <operator pos:start="2503:46" pos:end="2503:46">*</operator> <literal type="number" pos:start="2503:48" pos:end="2503:50">2</literal> <operator pos:start="2503:50" pos:end="2503:50">+</operator> <literal type="number" pos:start="2503:52" pos:end="2503:52">1</literal></expr></argument>, <argument pos:start="2503:55" pos:end="2503:58"><expr pos:start="2503:55" pos:end="2503:58"><name pos:start="2503:55" pos:end="2503:58">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <for pos:start="2507:21" pos:end="2515:21">for <control pos:start="2507:25" pos:end="2507:51">(<init pos:start="2507:26" pos:end="2507:31"><expr pos:start="2507:26" pos:end="2507:30"><name pos:start="2507:26" pos:end="2507:26">n</name> <operator pos:start="2507:28" pos:end="2507:28">=</operator> <literal type="number" pos:start="2507:30" pos:end="2507:30">0</literal></expr>;</init> <condition pos:start="2507:33" pos:end="2507:46"><expr pos:start="2507:33" pos:end="2507:45"><name pos:start="2507:33" pos:end="2507:33">n</name> <operator pos:start="2507:35" pos:end="2507:35">&lt;</operator> <name pos:start="2507:37" pos:end="2507:41">count</name> <operator pos:start="2507:43" pos:end="2507:43">*</operator> <literal type="number" pos:start="2507:45" pos:end="2507:45">2</literal></expr>;</condition> <incr pos:start="2507:48" pos:end="2507:50"><expr pos:start="2507:48" pos:end="2507:50"><name pos:start="2507:48" pos:end="2507:48">n</name><operator pos:start="2507:49" pos:end="2507:50">++</operator></expr></incr>)</control> <block pos:start="2507:53" pos:end="2515:21">{<block_content pos:start="2509:25" pos:end="2513:60">

                        <decl_stmt pos:start="2509:25" pos:end="2509:56"><decl pos:start="2509:25" pos:end="2509:55"><type pos:start="2509:25" pos:end="2509:27"><name pos:start="2509:25" pos:end="2509:27">int</name></type> <name pos:start="2509:29" pos:end="2509:31">reg</name> <init pos:start="2509:33" pos:end="2509:55">= <expr pos:start="2509:35" pos:end="2509:55"><ternary pos:start="2509:35" pos:end="2509:55"><condition pos:start="2509:35" pos:end="2509:47"><expr pos:start="2509:35" pos:end="2509:45"><operator pos:start="2509:35" pos:end="2509:35">(</operator><name pos:start="2509:36" pos:end="2509:36">n</name> <operator pos:start="2509:38" pos:end="2509:38">&lt;</operator> <name pos:start="2509:40" pos:end="2509:44">count</name><operator pos:start="2509:45" pos:end="2509:45">)</operator></expr> ?</condition><then pos:start="2509:49" pos:end="2509:50"> <expr pos:start="2509:49" pos:end="2509:50"><name pos:start="2509:49" pos:end="2509:50">rd</name></expr> </then><else pos:start="2509:52" pos:end="2509:55">: <expr pos:start="2509:54" pos:end="2509:55"><name pos:start="2509:54" pos:end="2509:55">rm</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="2511:25" pos:end="2511:51"><expr pos:start="2511:25" pos:end="2511:50"><name pos:start="2511:25" pos:end="2511:27">tmp</name> <operator pos:start="2511:29" pos:end="2511:29">=</operator> <call pos:start="2511:31" pos:end="2511:50"><name pos:start="2511:31" pos:end="2511:47">neon_load_scratch</name><argument_list pos:start="2511:48" pos:end="2511:50">(<argument pos:start="2511:49" pos:end="2511:49"><expr pos:start="2511:49" pos:end="2511:49"><name pos:start="2511:49" pos:end="2511:49">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2513:25" pos:end="2513:60"><expr pos:start="2513:25" pos:end="2513:59"><call pos:start="2513:25" pos:end="2513:59"><name pos:start="2513:25" pos:end="2513:38">neon_store_reg</name><argument_list pos:start="2513:39" pos:end="2513:59">(<argument pos:start="2513:40" pos:end="2513:42"><expr pos:start="2513:40" pos:end="2513:42"><name pos:start="2513:40" pos:end="2513:42">reg</name></expr></argument>, <argument pos:start="2513:45" pos:end="2513:53"><expr pos:start="2513:45" pos:end="2513:53"><name pos:start="2513:45" pos:end="2513:45">n</name> <operator pos:start="2513:47" pos:end="2513:47">%</operator> <name pos:start="2513:49" pos:end="2513:53">count</name></expr></argument>, <argument pos:start="2513:56" pos:end="2513:58"><expr pos:start="2513:56" pos:end="2513:58"><name pos:start="2513:56" pos:end="2513:58">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2517:21" pos:end="2517:26">break;</break>

                <case pos:start="2519:17" pos:end="2519:24">case <expr pos:start="2519:22" pos:end="2519:23"><literal type="number" pos:start="2519:22" pos:end="2519:23">36</literal></expr>:</case> <case pos:start="2519:26" pos:end="2519:33">case <expr pos:start="2519:31" pos:end="2519:32"><literal type="number" pos:start="2519:31" pos:end="2519:32">37</literal></expr>:</case> <comment type="block" pos:start="2519:35" pos:end="2519:62">/* VMOVN, VQMOVUN, VQMOVN */</comment>

                    <if_stmt pos:start="2521:21" pos:end="2523:33"><if pos:start="2521:21" pos:end="2523:33">if <condition pos:start="2521:24" pos:end="2521:34">(<expr pos:start="2521:25" pos:end="2521:33"><name pos:start="2521:25" pos:end="2521:28">size</name> <operator pos:start="2521:30" pos:end="2521:31">==</operator> <literal type="number" pos:start="2521:33" pos:end="2521:33">3</literal></expr>)</condition><block type="pseudo" pos:start="2523:25" pos:end="2523:33"><block_content pos:start="2523:25" pos:end="2523:33">

                        <return pos:start="2523:25" pos:end="2523:33">return <expr pos:start="2523:32" pos:end="2523:32"><literal type="number" pos:start="2523:32" pos:end="2523:32">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="2525:21" pos:end="2525:38"><expr pos:start="2525:21" pos:end="2525:37"><call pos:start="2525:21" pos:end="2525:37"><name pos:start="2525:21" pos:end="2525:31">TCGV_UNUSED</name><argument_list pos:start="2525:32" pos:end="2525:37">(<argument pos:start="2525:33" pos:end="2525:36"><expr pos:start="2525:33" pos:end="2525:36"><name pos:start="2525:33" pos:end="2525:36">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="2527:21" pos:end="2559:21">for <control pos:start="2527:25" pos:end="2527:52">(<init pos:start="2527:26" pos:end="2527:34"><expr pos:start="2527:26" pos:end="2527:33"><name pos:start="2527:26" pos:end="2527:29">pass</name> <operator pos:start="2527:31" pos:end="2527:31">=</operator> <literal type="number" pos:start="2527:33" pos:end="2527:33">0</literal></expr>;</init> <condition pos:start="2527:36" pos:end="2527:44"><expr pos:start="2527:36" pos:end="2527:43"><name pos:start="2527:36" pos:end="2527:39">pass</name> <operator pos:start="2527:41" pos:end="2527:41">&lt;</operator> <literal type="number" pos:start="2527:43" pos:end="2527:43">2</literal></expr>;</condition> <incr pos:start="2527:46" pos:end="2527:51"><expr pos:start="2527:46" pos:end="2527:51"><name pos:start="2527:46" pos:end="2527:49">pass</name><operator pos:start="2527:50" pos:end="2527:51">++</operator></expr></incr>)</control> <block pos:start="2527:54" pos:end="2559:21">{<block_content pos:start="2529:25" pos:end="2557:25">

                        <expr_stmt pos:start="2529:25" pos:end="2529:59"><expr pos:start="2529:25" pos:end="2529:58"><call pos:start="2529:25" pos:end="2529:58"><name pos:start="2529:25" pos:end="2529:39">neon_load_reg64</name><argument_list pos:start="2529:40" pos:end="2529:58">(<argument pos:start="2529:41" pos:end="2529:46"><expr pos:start="2529:41" pos:end="2529:46"><name pos:start="2529:41" pos:end="2529:46">cpu_V0</name></expr></argument>, <argument pos:start="2529:49" pos:end="2529:57"><expr pos:start="2529:49" pos:end="2529:57"><name pos:start="2529:49" pos:end="2529:50">rm</name> <operator pos:start="2529:52" pos:end="2529:52">+</operator> <name pos:start="2529:54" pos:end="2529:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2531:25" pos:end="2531:40"><expr pos:start="2531:25" pos:end="2531:39"><name pos:start="2531:25" pos:end="2531:27">tmp</name> <operator pos:start="2531:29" pos:end="2531:29">=</operator> <call pos:start="2531:31" pos:end="2531:39"><name pos:start="2531:31" pos:end="2531:37">new_tmp</name><argument_list pos:start="2531:38" pos:end="2531:39">()</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="2533:25" pos:end="2545:25"><if pos:start="2533:25" pos:end="2537:25">if <condition pos:start="2533:28" pos:end="2533:47">(<expr pos:start="2533:29" pos:end="2533:46"><name pos:start="2533:29" pos:end="2533:30">op</name> <operator pos:start="2533:32" pos:end="2533:33">==</operator> <literal type="number" pos:start="2533:35" pos:end="2533:36">36</literal> <operator pos:start="2533:38" pos:end="2533:39">&amp;&amp;</operator> <name pos:start="2533:41" pos:end="2533:41">q</name> <operator pos:start="2533:43" pos:end="2533:44">==</operator> <literal type="number" pos:start="2533:46" pos:end="2533:46">0</literal></expr>)</condition> <block pos:start="2533:49" pos:end="2537:25">{<block_content pos:start="2535:29" pos:end="2535:63">

                            <expr_stmt pos:start="2535:29" pos:end="2535:63"><expr pos:start="2535:29" pos:end="2535:62"><call pos:start="2535:29" pos:end="2535:62"><name pos:start="2535:29" pos:end="2535:43">gen_neon_narrow</name><argument_list pos:start="2535:44" pos:end="2535:62">(<argument pos:start="2535:45" pos:end="2535:48"><expr pos:start="2535:45" pos:end="2535:48"><name pos:start="2535:45" pos:end="2535:48">size</name></expr></argument>, <argument pos:start="2535:51" pos:end="2535:53"><expr pos:start="2535:51" pos:end="2535:53"><name pos:start="2535:51" pos:end="2535:53">tmp</name></expr></argument>, <argument pos:start="2535:56" pos:end="2535:61"><expr pos:start="2535:56" pos:end="2535:61"><name pos:start="2535:56" pos:end="2535:61">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <if type="elseif" pos:start="2537:27" pos:end="2541:25">else if <condition pos:start="2537:35" pos:end="2537:37">(<expr pos:start="2537:36" pos:end="2537:36"><name pos:start="2537:36" pos:end="2537:36">q</name></expr>)</condition> <block pos:start="2537:39" pos:end="2541:25">{<block_content pos:start="2539:29" pos:end="2539:68">

                            <expr_stmt pos:start="2539:29" pos:end="2539:68"><expr pos:start="2539:29" pos:end="2539:67"><call pos:start="2539:29" pos:end="2539:67"><name pos:start="2539:29" pos:end="2539:48">gen_neon_narrow_satu</name><argument_list pos:start="2539:49" pos:end="2539:67">(<argument pos:start="2539:50" pos:end="2539:53"><expr pos:start="2539:50" pos:end="2539:53"><name pos:start="2539:50" pos:end="2539:53">size</name></expr></argument>, <argument pos:start="2539:56" pos:end="2539:58"><expr pos:start="2539:56" pos:end="2539:58"><name pos:start="2539:56" pos:end="2539:58">tmp</name></expr></argument>, <argument pos:start="2539:61" pos:end="2539:66"><expr pos:start="2539:61" pos:end="2539:66"><name pos:start="2539:61" pos:end="2539:66">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2541:27" pos:end="2545:25">else <block pos:start="2541:32" pos:end="2545:25">{<block_content pos:start="2543:29" pos:end="2543:68">

                            <expr_stmt pos:start="2543:29" pos:end="2543:68"><expr pos:start="2543:29" pos:end="2543:67"><call pos:start="2543:29" pos:end="2543:67"><name pos:start="2543:29" pos:end="2543:48">gen_neon_narrow_sats</name><argument_list pos:start="2543:49" pos:end="2543:67">(<argument pos:start="2543:50" pos:end="2543:53"><expr pos:start="2543:50" pos:end="2543:53"><name pos:start="2543:50" pos:end="2543:53">size</name></expr></argument>, <argument pos:start="2543:56" pos:end="2543:58"><expr pos:start="2543:56" pos:end="2543:58"><name pos:start="2543:56" pos:end="2543:58">tmp</name></expr></argument>, <argument pos:start="2543:61" pos:end="2543:66"><expr pos:start="2543:61" pos:end="2543:66"><name pos:start="2543:61" pos:end="2543:66">cpu_V0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <if_stmt pos:start="2547:25" pos:end="2557:25"><if pos:start="2547:25" pos:end="2551:25">if <condition pos:start="2547:28" pos:end="2547:38">(<expr pos:start="2547:29" pos:end="2547:37"><name pos:start="2547:29" pos:end="2547:32">pass</name> <operator pos:start="2547:34" pos:end="2547:35">==</operator> <literal type="number" pos:start="2547:37" pos:end="2547:37">0</literal></expr>)</condition> <block pos:start="2547:40" pos:end="2551:25">{<block_content pos:start="2549:29" pos:end="2549:39">

                            <expr_stmt pos:start="2549:29" pos:end="2549:39"><expr pos:start="2549:29" pos:end="2549:38"><name pos:start="2549:29" pos:end="2549:32">tmp2</name> <operator pos:start="2549:34" pos:end="2549:34">=</operator> <name pos:start="2549:36" pos:end="2549:38">tmp</name></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2551:27" pos:end="2557:25">else <block pos:start="2551:32" pos:end="2557:25">{<block_content pos:start="2553:29" pos:end="2555:55">

                            <expr_stmt pos:start="2553:29" pos:end="2553:56"><expr pos:start="2553:29" pos:end="2553:55"><call pos:start="2553:29" pos:end="2553:55"><name pos:start="2553:29" pos:end="2553:42">neon_store_reg</name><argument_list pos:start="2553:43" pos:end="2553:55">(<argument pos:start="2553:44" pos:end="2553:45"><expr pos:start="2553:44" pos:end="2553:45"><name pos:start="2553:44" pos:end="2553:45">rd</name></expr></argument>, <argument pos:start="2553:48" pos:end="2553:48"><expr pos:start="2553:48" pos:end="2553:48"><literal type="number" pos:start="2553:48" pos:end="2553:48">0</literal></expr></argument>, <argument pos:start="2553:51" pos:end="2553:54"><expr pos:start="2553:51" pos:end="2553:54"><name pos:start="2553:51" pos:end="2553:54">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2555:29" pos:end="2555:55"><expr pos:start="2555:29" pos:end="2555:54"><call pos:start="2555:29" pos:end="2555:54"><name pos:start="2555:29" pos:end="2555:42">neon_store_reg</name><argument_list pos:start="2555:43" pos:end="2555:54">(<argument pos:start="2555:44" pos:end="2555:45"><expr pos:start="2555:44" pos:end="2555:45"><name pos:start="2555:44" pos:end="2555:45">rd</name></expr></argument>, <argument pos:start="2555:48" pos:end="2555:48"><expr pos:start="2555:48" pos:end="2555:48"><literal type="number" pos:start="2555:48" pos:end="2555:48">1</literal></expr></argument>, <argument pos:start="2555:51" pos:end="2555:53"><expr pos:start="2555:51" pos:end="2555:53"><name pos:start="2555:51" pos:end="2555:53">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2561:21" pos:end="2561:26">break;</break>

                <case pos:start="2563:17" pos:end="2563:24">case <expr pos:start="2563:22" pos:end="2563:23"><literal type="number" pos:start="2563:22" pos:end="2563:23">38</literal></expr>:</case> <comment type="block" pos:start="2563:26" pos:end="2563:36">/* VSHLL */</comment>

                    <if_stmt pos:start="2565:21" pos:end="2567:33"><if pos:start="2565:21" pos:end="2567:33">if <condition pos:start="2565:24" pos:end="2565:39">(<expr pos:start="2565:25" pos:end="2565:38"><name pos:start="2565:25" pos:end="2565:25">q</name> <operator pos:start="2565:27" pos:end="2565:28">||</operator> <name pos:start="2565:30" pos:end="2565:33">size</name> <operator pos:start="2565:35" pos:end="2565:36">==</operator> <literal type="number" pos:start="2565:38" pos:end="2565:38">3</literal></expr>)</condition><block type="pseudo" pos:start="2567:25" pos:end="2567:33"><block_content pos:start="2567:25" pos:end="2567:33">

                        <return pos:start="2567:25" pos:end="2567:33">return <expr pos:start="2567:32" pos:end="2567:32"><literal type="number" pos:start="2567:32" pos:end="2567:32">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="2569:21" pos:end="2569:47"><expr pos:start="2569:21" pos:end="2569:46"><name pos:start="2569:21" pos:end="2569:23">tmp</name> <operator pos:start="2569:25" pos:end="2569:25">=</operator> <call pos:start="2569:27" pos:end="2569:46"><name pos:start="2569:27" pos:end="2569:39">neon_load_reg</name><argument_list pos:start="2569:40" pos:end="2569:46">(<argument pos:start="2569:41" pos:end="2569:42"><expr pos:start="2569:41" pos:end="2569:42"><name pos:start="2569:41" pos:end="2569:42">rm</name></expr></argument>, <argument pos:start="2569:45" pos:end="2569:45"><expr pos:start="2569:45" pos:end="2569:45"><literal type="number" pos:start="2569:45" pos:end="2569:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2571:21" pos:end="2571:48"><expr pos:start="2571:21" pos:end="2571:47"><name pos:start="2571:21" pos:end="2571:24">tmp2</name> <operator pos:start="2571:26" pos:end="2571:26">=</operator> <call pos:start="2571:28" pos:end="2571:47"><name pos:start="2571:28" pos:end="2571:40">neon_load_reg</name><argument_list pos:start="2571:41" pos:end="2571:47">(<argument pos:start="2571:42" pos:end="2571:43"><expr pos:start="2571:42" pos:end="2571:43"><name pos:start="2571:42" pos:end="2571:43">rm</name></expr></argument>, <argument pos:start="2571:46" pos:end="2571:46"><expr pos:start="2571:46" pos:end="2571:46"><literal type="number" pos:start="2571:46" pos:end="2571:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="2573:21" pos:end="2585:21">for <control pos:start="2573:25" pos:end="2573:52">(<init pos:start="2573:26" pos:end="2573:34"><expr pos:start="2573:26" pos:end="2573:33"><name pos:start="2573:26" pos:end="2573:29">pass</name> <operator pos:start="2573:31" pos:end="2573:31">=</operator> <literal type="number" pos:start="2573:33" pos:end="2573:33">0</literal></expr>;</init> <condition pos:start="2573:36" pos:end="2573:44"><expr pos:start="2573:36" pos:end="2573:43"><name pos:start="2573:36" pos:end="2573:39">pass</name> <operator pos:start="2573:41" pos:end="2573:41">&lt;</operator> <literal type="number" pos:start="2573:43" pos:end="2573:43">2</literal></expr>;</condition> <incr pos:start="2573:46" pos:end="2573:51"><expr pos:start="2573:46" pos:end="2573:51"><name pos:start="2573:46" pos:end="2573:49">pass</name><operator pos:start="2573:50" pos:end="2573:51">++</operator></expr></incr>)</control> <block pos:start="2573:54" pos:end="2585:21">{<block_content pos:start="2575:25" pos:end="2583:60">

                        <if_stmt pos:start="2575:25" pos:end="2577:39"><if pos:start="2575:25" pos:end="2577:39">if <condition pos:start="2575:28" pos:end="2575:38">(<expr pos:start="2575:29" pos:end="2575:37"><name pos:start="2575:29" pos:end="2575:32">pass</name> <operator pos:start="2575:34" pos:end="2575:35">==</operator> <literal type="number" pos:start="2575:37" pos:end="2575:37">1</literal></expr>)</condition><block type="pseudo" pos:start="2577:29" pos:end="2577:39"><block_content pos:start="2577:29" pos:end="2577:39">

                            <expr_stmt pos:start="2577:29" pos:end="2577:39"><expr pos:start="2577:29" pos:end="2577:38"><name pos:start="2577:29" pos:end="2577:31">tmp</name> <operator pos:start="2577:33" pos:end="2577:33">=</operator> <name pos:start="2577:35" pos:end="2577:38">tmp2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="2579:25" pos:end="2579:61"><expr pos:start="2579:25" pos:end="2579:60"><call pos:start="2579:25" pos:end="2579:60"><name pos:start="2579:25" pos:end="2579:38">gen_neon_widen</name><argument_list pos:start="2579:39" pos:end="2579:60">(<argument pos:start="2579:40" pos:end="2579:45"><expr pos:start="2579:40" pos:end="2579:45"><name pos:start="2579:40" pos:end="2579:45">cpu_V0</name></expr></argument>, <argument pos:start="2579:48" pos:end="2579:50"><expr pos:start="2579:48" pos:end="2579:50"><name pos:start="2579:48" pos:end="2579:50">tmp</name></expr></argument>, <argument pos:start="2579:53" pos:end="2579:56"><expr pos:start="2579:53" pos:end="2579:56"><name pos:start="2579:53" pos:end="2579:56">size</name></expr></argument>, <argument pos:start="2579:59" pos:end="2579:59"><expr pos:start="2579:59" pos:end="2579:59"><literal type="number" pos:start="2579:59" pos:end="2579:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2581:25" pos:end="2581:68"><expr pos:start="2581:25" pos:end="2581:67"><call pos:start="2581:25" pos:end="2581:67"><name pos:start="2581:25" pos:end="2581:40">tcg_gen_shli_i64</name><argument_list pos:start="2581:41" pos:end="2581:67">(<argument pos:start="2581:42" pos:end="2581:47"><expr pos:start="2581:42" pos:end="2581:47"><name pos:start="2581:42" pos:end="2581:47">cpu_V0</name></expr></argument>, <argument pos:start="2581:50" pos:end="2581:55"><expr pos:start="2581:50" pos:end="2581:55"><name pos:start="2581:50" pos:end="2581:55">cpu_V0</name></expr></argument>, <argument pos:start="2581:58" pos:end="2581:66"><expr pos:start="2581:58" pos:end="2581:66"><literal type="number" pos:start="2581:58" pos:end="2581:58">8</literal> <operator pos:start="2581:60" pos:end="2581:61">&lt;&lt;</operator> <name pos:start="2581:63" pos:end="2581:66">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2583:25" pos:end="2583:60"><expr pos:start="2583:25" pos:end="2583:59"><call pos:start="2583:25" pos:end="2583:59"><name pos:start="2583:25" pos:end="2583:40">neon_store_reg64</name><argument_list pos:start="2583:41" pos:end="2583:59">(<argument pos:start="2583:42" pos:end="2583:47"><expr pos:start="2583:42" pos:end="2583:47"><name pos:start="2583:42" pos:end="2583:47">cpu_V0</name></expr></argument>, <argument pos:start="2583:50" pos:end="2583:58"><expr pos:start="2583:50" pos:end="2583:58"><name pos:start="2583:50" pos:end="2583:51">rd</name> <operator pos:start="2583:53" pos:end="2583:53">+</operator> <name pos:start="2583:55" pos:end="2583:58">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <break pos:start="2587:21" pos:end="2587:26">break;</break>

                <case pos:start="2589:17" pos:end="2589:24">case <expr pos:start="2589:22" pos:end="2589:23"><literal type="number" pos:start="2589:22" pos:end="2589:23">44</literal></expr>:</case> <comment type="block" pos:start="2589:26" pos:end="2589:43">/* VCVT.F16.F32 */</comment>

                    <if_stmt pos:start="2591:21" pos:end="2593:31"><if pos:start="2591:21" pos:end="2593:31">if <condition pos:start="2591:24" pos:end="2591:64">(<expr pos:start="2591:25" pos:end="2591:63"><operator pos:start="2591:25" pos:end="2591:25">!</operator><call pos:start="2591:26" pos:end="2591:63"><name pos:start="2591:26" pos:end="2591:36">arm_feature</name><argument_list pos:start="2591:37" pos:end="2591:63">(<argument pos:start="2591:38" pos:end="2591:40"><expr pos:start="2591:38" pos:end="2591:40"><name pos:start="2591:38" pos:end="2591:40">env</name></expr></argument>, <argument pos:start="2591:43" pos:end="2591:62"><expr pos:start="2591:43" pos:end="2591:62"><name pos:start="2591:43" pos:end="2591:62">ARM_FEATURE_VFP_FP16</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2593:23" pos:end="2593:31"><block_content pos:start="2593:23" pos:end="2593:31">

                      <return pos:start="2593:23" pos:end="2593:31">return <expr pos:start="2593:30" pos:end="2593:30"><literal type="number" pos:start="2593:30" pos:end="2593:30">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="2595:21" pos:end="2595:36"><expr pos:start="2595:21" pos:end="2595:35"><name pos:start="2595:21" pos:end="2595:23">tmp</name> <operator pos:start="2595:25" pos:end="2595:25">=</operator> <call pos:start="2595:27" pos:end="2595:35"><name pos:start="2595:27" pos:end="2595:33">new_tmp</name><argument_list pos:start="2595:34" pos:end="2595:35">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2597:21" pos:end="2597:37"><expr pos:start="2597:21" pos:end="2597:36"><name pos:start="2597:21" pos:end="2597:24">tmp2</name> <operator pos:start="2597:26" pos:end="2597:26">=</operator> <call pos:start="2597:28" pos:end="2597:36"><name pos:start="2597:28" pos:end="2597:34">new_tmp</name><argument_list pos:start="2597:35" pos:end="2597:36">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2599:21" pos:end="2599:77"><expr pos:start="2599:21" pos:end="2599:76"><call pos:start="2599:21" pos:end="2599:76"><name pos:start="2599:21" pos:end="2599:34">tcg_gen_ld_f32</name><argument_list pos:start="2599:35" pos:end="2599:76">(<argument pos:start="2599:36" pos:end="2599:42"><expr pos:start="2599:36" pos:end="2599:42"><name pos:start="2599:36" pos:end="2599:42">cpu_F0s</name></expr></argument>, <argument pos:start="2599:45" pos:end="2599:51"><expr pos:start="2599:45" pos:end="2599:51"><name pos:start="2599:45" pos:end="2599:51">cpu_env</name></expr></argument>, <argument pos:start="2599:54" pos:end="2599:75"><expr pos:start="2599:54" pos:end="2599:75"><call pos:start="2599:54" pos:end="2599:75"><name pos:start="2599:54" pos:end="2599:68">neon_reg_offset</name><argument_list pos:start="2599:69" pos:end="2599:75">(<argument pos:start="2599:70" pos:end="2599:71"><expr pos:start="2599:70" pos:end="2599:71"><name pos:start="2599:70" pos:end="2599:71">rm</name></expr></argument>, <argument pos:start="2599:74" pos:end="2599:74"><expr pos:start="2599:74" pos:end="2599:74"><literal type="number" pos:start="2599:74" pos:end="2599:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2601:21" pos:end="2601:74"><expr pos:start="2601:21" pos:end="2601:73"><call pos:start="2601:21" pos:end="2601:73"><name pos:start="2601:21" pos:end="2601:50">gen_helper_vfp_fcvt_f32_to_f16</name><argument_list pos:start="2601:51" pos:end="2601:73">(<argument pos:start="2601:52" pos:end="2601:54"><expr pos:start="2601:52" pos:end="2601:54"><name pos:start="2601:52" pos:end="2601:54">tmp</name></expr></argument>, <argument pos:start="2601:57" pos:end="2601:63"><expr pos:start="2601:57" pos:end="2601:63"><name pos:start="2601:57" pos:end="2601:63">cpu_F0s</name></expr></argument>, <argument pos:start="2601:66" pos:end="2601:72"><expr pos:start="2601:66" pos:end="2601:72"><name pos:start="2601:66" pos:end="2601:72">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2603:21" pos:end="2603:77"><expr pos:start="2603:21" pos:end="2603:76"><call pos:start="2603:21" pos:end="2603:76"><name pos:start="2603:21" pos:end="2603:34">tcg_gen_ld_f32</name><argument_list pos:start="2603:35" pos:end="2603:76">(<argument pos:start="2603:36" pos:end="2603:42"><expr pos:start="2603:36" pos:end="2603:42"><name pos:start="2603:36" pos:end="2603:42">cpu_F0s</name></expr></argument>, <argument pos:start="2603:45" pos:end="2603:51"><expr pos:start="2603:45" pos:end="2603:51"><name pos:start="2603:45" pos:end="2603:51">cpu_env</name></expr></argument>, <argument pos:start="2603:54" pos:end="2603:75"><expr pos:start="2603:54" pos:end="2603:75"><call pos:start="2603:54" pos:end="2603:75"><name pos:start="2603:54" pos:end="2603:68">neon_reg_offset</name><argument_list pos:start="2603:69" pos:end="2603:75">(<argument pos:start="2603:70" pos:end="2603:71"><expr pos:start="2603:70" pos:end="2603:71"><name pos:start="2603:70" pos:end="2603:71">rm</name></expr></argument>, <argument pos:start="2603:74" pos:end="2603:74"><expr pos:start="2603:74" pos:end="2603:74"><literal type="number" pos:start="2603:74" pos:end="2603:74">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2605:21" pos:end="2605:75"><expr pos:start="2605:21" pos:end="2605:74"><call pos:start="2605:21" pos:end="2605:74"><name pos:start="2605:21" pos:end="2605:50">gen_helper_vfp_fcvt_f32_to_f16</name><argument_list pos:start="2605:51" pos:end="2605:74">(<argument pos:start="2605:52" pos:end="2605:55"><expr pos:start="2605:52" pos:end="2605:55"><name pos:start="2605:52" pos:end="2605:55">tmp2</name></expr></argument>, <argument pos:start="2605:58" pos:end="2605:64"><expr pos:start="2605:58" pos:end="2605:64"><name pos:start="2605:58" pos:end="2605:64">cpu_F0s</name></expr></argument>, <argument pos:start="2605:67" pos:end="2605:73"><expr pos:start="2605:67" pos:end="2605:73"><name pos:start="2605:67" pos:end="2605:73">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2607:21" pos:end="2607:53"><expr pos:start="2607:21" pos:end="2607:52"><call pos:start="2607:21" pos:end="2607:52"><name pos:start="2607:21" pos:end="2607:36">tcg_gen_shli_i32</name><argument_list pos:start="2607:37" pos:end="2607:52">(<argument pos:start="2607:38" pos:end="2607:41"><expr pos:start="2607:38" pos:end="2607:41"><name pos:start="2607:38" pos:end="2607:41">tmp2</name></expr></argument>, <argument pos:start="2607:44" pos:end="2607:47"><expr pos:start="2607:44" pos:end="2607:47"><name pos:start="2607:44" pos:end="2607:47">tmp2</name></expr></argument>, <argument pos:start="2607:50" pos:end="2607:51"><expr pos:start="2607:50" pos:end="2607:51"><literal type="number" pos:start="2607:50" pos:end="2607:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2609:21" pos:end="2609:52"><expr pos:start="2609:21" pos:end="2609:51"><call pos:start="2609:21" pos:end="2609:51"><name pos:start="2609:21" pos:end="2609:34">tcg_gen_or_i32</name><argument_list pos:start="2609:35" pos:end="2609:51">(<argument pos:start="2609:36" pos:end="2609:39"><expr pos:start="2609:36" pos:end="2609:39"><name pos:start="2609:36" pos:end="2609:39">tmp2</name></expr></argument>, <argument pos:start="2609:42" pos:end="2609:45"><expr pos:start="2609:42" pos:end="2609:45"><name pos:start="2609:42" pos:end="2609:45">tmp2</name></expr></argument>, <argument pos:start="2609:48" pos:end="2609:50"><expr pos:start="2609:48" pos:end="2609:50"><name pos:start="2609:48" pos:end="2609:50">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2611:21" pos:end="2611:77"><expr pos:start="2611:21" pos:end="2611:76"><call pos:start="2611:21" pos:end="2611:76"><name pos:start="2611:21" pos:end="2611:34">tcg_gen_ld_f32</name><argument_list pos:start="2611:35" pos:end="2611:76">(<argument pos:start="2611:36" pos:end="2611:42"><expr pos:start="2611:36" pos:end="2611:42"><name pos:start="2611:36" pos:end="2611:42">cpu_F0s</name></expr></argument>, <argument pos:start="2611:45" pos:end="2611:51"><expr pos:start="2611:45" pos:end="2611:51"><name pos:start="2611:45" pos:end="2611:51">cpu_env</name></expr></argument>, <argument pos:start="2611:54" pos:end="2611:75"><expr pos:start="2611:54" pos:end="2611:75"><call pos:start="2611:54" pos:end="2611:75"><name pos:start="2611:54" pos:end="2611:68">neon_reg_offset</name><argument_list pos:start="2611:69" pos:end="2611:75">(<argument pos:start="2611:70" pos:end="2611:71"><expr pos:start="2611:70" pos:end="2611:71"><name pos:start="2611:70" pos:end="2611:71">rm</name></expr></argument>, <argument pos:start="2611:74" pos:end="2611:74"><expr pos:start="2611:74" pos:end="2611:74"><literal type="number" pos:start="2611:74" pos:end="2611:74">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2613:21" pos:end="2613:74"><expr pos:start="2613:21" pos:end="2613:73"><call pos:start="2613:21" pos:end="2613:73"><name pos:start="2613:21" pos:end="2613:50">gen_helper_vfp_fcvt_f32_to_f16</name><argument_list pos:start="2613:51" pos:end="2613:73">(<argument pos:start="2613:52" pos:end="2613:54"><expr pos:start="2613:52" pos:end="2613:54"><name pos:start="2613:52" pos:end="2613:54">tmp</name></expr></argument>, <argument pos:start="2613:57" pos:end="2613:63"><expr pos:start="2613:57" pos:end="2613:63"><name pos:start="2613:57" pos:end="2613:63">cpu_F0s</name></expr></argument>, <argument pos:start="2613:66" pos:end="2613:72"><expr pos:start="2613:66" pos:end="2613:72"><name pos:start="2613:66" pos:end="2613:72">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2615:21" pos:end="2615:77"><expr pos:start="2615:21" pos:end="2615:76"><call pos:start="2615:21" pos:end="2615:76"><name pos:start="2615:21" pos:end="2615:34">tcg_gen_ld_f32</name><argument_list pos:start="2615:35" pos:end="2615:76">(<argument pos:start="2615:36" pos:end="2615:42"><expr pos:start="2615:36" pos:end="2615:42"><name pos:start="2615:36" pos:end="2615:42">cpu_F0s</name></expr></argument>, <argument pos:start="2615:45" pos:end="2615:51"><expr pos:start="2615:45" pos:end="2615:51"><name pos:start="2615:45" pos:end="2615:51">cpu_env</name></expr></argument>, <argument pos:start="2615:54" pos:end="2615:75"><expr pos:start="2615:54" pos:end="2615:75"><call pos:start="2615:54" pos:end="2615:75"><name pos:start="2615:54" pos:end="2615:68">neon_reg_offset</name><argument_list pos:start="2615:69" pos:end="2615:75">(<argument pos:start="2615:70" pos:end="2615:71"><expr pos:start="2615:70" pos:end="2615:71"><name pos:start="2615:70" pos:end="2615:71">rm</name></expr></argument>, <argument pos:start="2615:74" pos:end="2615:74"><expr pos:start="2615:74" pos:end="2615:74"><literal type="number" pos:start="2615:74" pos:end="2615:74">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2617:21" pos:end="2617:48"><expr pos:start="2617:21" pos:end="2617:47"><call pos:start="2617:21" pos:end="2617:47"><name pos:start="2617:21" pos:end="2617:34">neon_store_reg</name><argument_list pos:start="2617:35" pos:end="2617:47">(<argument pos:start="2617:36" pos:end="2617:37"><expr pos:start="2617:36" pos:end="2617:37"><name pos:start="2617:36" pos:end="2617:37">rd</name></expr></argument>, <argument pos:start="2617:40" pos:end="2617:40"><expr pos:start="2617:40" pos:end="2617:40"><literal type="number" pos:start="2617:40" pos:end="2617:40">0</literal></expr></argument>, <argument pos:start="2617:43" pos:end="2617:46"><expr pos:start="2617:43" pos:end="2617:46"><name pos:start="2617:43" pos:end="2617:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2619:21" pos:end="2619:37"><expr pos:start="2619:21" pos:end="2619:36"><name pos:start="2619:21" pos:end="2619:24">tmp2</name> <operator pos:start="2619:26" pos:end="2619:26">=</operator> <call pos:start="2619:28" pos:end="2619:36"><name pos:start="2619:28" pos:end="2619:34">new_tmp</name><argument_list pos:start="2619:35" pos:end="2619:36">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2621:21" pos:end="2621:75"><expr pos:start="2621:21" pos:end="2621:74"><call pos:start="2621:21" pos:end="2621:74"><name pos:start="2621:21" pos:end="2621:50">gen_helper_vfp_fcvt_f32_to_f16</name><argument_list pos:start="2621:51" pos:end="2621:74">(<argument pos:start="2621:52" pos:end="2621:55"><expr pos:start="2621:52" pos:end="2621:55"><name pos:start="2621:52" pos:end="2621:55">tmp2</name></expr></argument>, <argument pos:start="2621:58" pos:end="2621:64"><expr pos:start="2621:58" pos:end="2621:64"><name pos:start="2621:58" pos:end="2621:64">cpu_F0s</name></expr></argument>, <argument pos:start="2621:67" pos:end="2621:73"><expr pos:start="2621:67" pos:end="2621:73"><name pos:start="2621:67" pos:end="2621:73">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2623:21" pos:end="2623:53"><expr pos:start="2623:21" pos:end="2623:52"><call pos:start="2623:21" pos:end="2623:52"><name pos:start="2623:21" pos:end="2623:36">tcg_gen_shli_i32</name><argument_list pos:start="2623:37" pos:end="2623:52">(<argument pos:start="2623:38" pos:end="2623:41"><expr pos:start="2623:38" pos:end="2623:41"><name pos:start="2623:38" pos:end="2623:41">tmp2</name></expr></argument>, <argument pos:start="2623:44" pos:end="2623:47"><expr pos:start="2623:44" pos:end="2623:47"><name pos:start="2623:44" pos:end="2623:47">tmp2</name></expr></argument>, <argument pos:start="2623:50" pos:end="2623:51"><expr pos:start="2623:50" pos:end="2623:51"><literal type="number" pos:start="2623:50" pos:end="2623:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2625:21" pos:end="2625:52"><expr pos:start="2625:21" pos:end="2625:51"><call pos:start="2625:21" pos:end="2625:51"><name pos:start="2625:21" pos:end="2625:34">tcg_gen_or_i32</name><argument_list pos:start="2625:35" pos:end="2625:51">(<argument pos:start="2625:36" pos:end="2625:39"><expr pos:start="2625:36" pos:end="2625:39"><name pos:start="2625:36" pos:end="2625:39">tmp2</name></expr></argument>, <argument pos:start="2625:42" pos:end="2625:45"><expr pos:start="2625:42" pos:end="2625:45"><name pos:start="2625:42" pos:end="2625:45">tmp2</name></expr></argument>, <argument pos:start="2625:48" pos:end="2625:50"><expr pos:start="2625:48" pos:end="2625:50"><name pos:start="2625:48" pos:end="2625:50">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2627:21" pos:end="2627:48"><expr pos:start="2627:21" pos:end="2627:47"><call pos:start="2627:21" pos:end="2627:47"><name pos:start="2627:21" pos:end="2627:34">neon_store_reg</name><argument_list pos:start="2627:35" pos:end="2627:47">(<argument pos:start="2627:36" pos:end="2627:37"><expr pos:start="2627:36" pos:end="2627:37"><name pos:start="2627:36" pos:end="2627:37">rd</name></expr></argument>, <argument pos:start="2627:40" pos:end="2627:40"><expr pos:start="2627:40" pos:end="2627:40"><literal type="number" pos:start="2627:40" pos:end="2627:40">1</literal></expr></argument>, <argument pos:start="2627:43" pos:end="2627:46"><expr pos:start="2627:43" pos:end="2627:46"><name pos:start="2627:43" pos:end="2627:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2629:21" pos:end="2629:34"><expr pos:start="2629:21" pos:end="2629:33"><call pos:start="2629:21" pos:end="2629:33"><name pos:start="2629:21" pos:end="2629:28">dead_tmp</name><argument_list pos:start="2629:29" pos:end="2629:33">(<argument pos:start="2629:30" pos:end="2629:32"><expr pos:start="2629:30" pos:end="2629:32"><name pos:start="2629:30" pos:end="2629:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2631:21" pos:end="2631:26">break;</break>

                <case pos:start="2633:17" pos:end="2633:24">case <expr pos:start="2633:22" pos:end="2633:23"><literal type="number" pos:start="2633:22" pos:end="2633:23">46</literal></expr>:</case> <comment type="block" pos:start="2633:26" pos:end="2633:43">/* VCVT.F32.F16 */</comment>

                    <if_stmt pos:start="2635:21" pos:end="2637:31"><if pos:start="2635:21" pos:end="2637:31">if <condition pos:start="2635:24" pos:end="2635:64">(<expr pos:start="2635:25" pos:end="2635:63"><operator pos:start="2635:25" pos:end="2635:25">!</operator><call pos:start="2635:26" pos:end="2635:63"><name pos:start="2635:26" pos:end="2635:36">arm_feature</name><argument_list pos:start="2635:37" pos:end="2635:63">(<argument pos:start="2635:38" pos:end="2635:40"><expr pos:start="2635:38" pos:end="2635:40"><name pos:start="2635:38" pos:end="2635:40">env</name></expr></argument>, <argument pos:start="2635:43" pos:end="2635:62"><expr pos:start="2635:43" pos:end="2635:62"><name pos:start="2635:43" pos:end="2635:62">ARM_FEATURE_VFP_FP16</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="2637:23" pos:end="2637:31"><block_content pos:start="2637:23" pos:end="2637:31">

                      <return pos:start="2637:23" pos:end="2637:31">return <expr pos:start="2637:30" pos:end="2637:30"><literal type="number" pos:start="2637:30" pos:end="2637:30">1</literal></expr>;</return></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="2639:21" pos:end="2639:37"><expr pos:start="2639:21" pos:end="2639:36"><name pos:start="2639:21" pos:end="2639:24">tmp3</name> <operator pos:start="2639:26" pos:end="2639:26">=</operator> <call pos:start="2639:28" pos:end="2639:36"><name pos:start="2639:28" pos:end="2639:34">new_tmp</name><argument_list pos:start="2639:35" pos:end="2639:36">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2641:21" pos:end="2641:47"><expr pos:start="2641:21" pos:end="2641:46"><name pos:start="2641:21" pos:end="2641:23">tmp</name> <operator pos:start="2641:25" pos:end="2641:25">=</operator> <call pos:start="2641:27" pos:end="2641:46"><name pos:start="2641:27" pos:end="2641:39">neon_load_reg</name><argument_list pos:start="2641:40" pos:end="2641:46">(<argument pos:start="2641:41" pos:end="2641:42"><expr pos:start="2641:41" pos:end="2641:42"><name pos:start="2641:41" pos:end="2641:42">rm</name></expr></argument>, <argument pos:start="2641:45" pos:end="2641:45"><expr pos:start="2641:45" pos:end="2641:45"><literal type="number" pos:start="2641:45" pos:end="2641:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2643:21" pos:end="2643:48"><expr pos:start="2643:21" pos:end="2643:47"><name pos:start="2643:21" pos:end="2643:24">tmp2</name> <operator pos:start="2643:26" pos:end="2643:26">=</operator> <call pos:start="2643:28" pos:end="2643:47"><name pos:start="2643:28" pos:end="2643:40">neon_load_reg</name><argument_list pos:start="2643:41" pos:end="2643:47">(<argument pos:start="2643:42" pos:end="2643:43"><expr pos:start="2643:42" pos:end="2643:43"><name pos:start="2643:42" pos:end="2643:43">rm</name></expr></argument>, <argument pos:start="2643:46" pos:end="2643:46"><expr pos:start="2643:46" pos:end="2643:46"><literal type="number" pos:start="2643:46" pos:end="2643:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2645:21" pos:end="2645:50"><expr pos:start="2645:21" pos:end="2645:49"><call pos:start="2645:21" pos:end="2645:49"><name pos:start="2645:21" pos:end="2645:38">tcg_gen_ext16u_i32</name><argument_list pos:start="2645:39" pos:end="2645:49">(<argument pos:start="2645:40" pos:end="2645:43"><expr pos:start="2645:40" pos:end="2645:43"><name pos:start="2645:40" pos:end="2645:43">tmp3</name></expr></argument>, <argument pos:start="2645:46" pos:end="2645:48"><expr pos:start="2645:46" pos:end="2645:48"><name pos:start="2645:46" pos:end="2645:48">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2647:21" pos:end="2647:75"><expr pos:start="2647:21" pos:end="2647:74"><call pos:start="2647:21" pos:end="2647:74"><name pos:start="2647:21" pos:end="2647:50">gen_helper_vfp_fcvt_f16_to_f32</name><argument_list pos:start="2647:51" pos:end="2647:74">(<argument pos:start="2647:52" pos:end="2647:58"><expr pos:start="2647:52" pos:end="2647:58"><name pos:start="2647:52" pos:end="2647:58">cpu_F0s</name></expr></argument>, <argument pos:start="2647:61" pos:end="2647:64"><expr pos:start="2647:61" pos:end="2647:64"><name pos:start="2647:61" pos:end="2647:64">tmp3</name></expr></argument>, <argument pos:start="2647:67" pos:end="2647:73"><expr pos:start="2647:67" pos:end="2647:73"><name pos:start="2647:67" pos:end="2647:73">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2649:21" pos:end="2649:77"><expr pos:start="2649:21" pos:end="2649:76"><call pos:start="2649:21" pos:end="2649:76"><name pos:start="2649:21" pos:end="2649:34">tcg_gen_st_f32</name><argument_list pos:start="2649:35" pos:end="2649:76">(<argument pos:start="2649:36" pos:end="2649:42"><expr pos:start="2649:36" pos:end="2649:42"><name pos:start="2649:36" pos:end="2649:42">cpu_F0s</name></expr></argument>, <argument pos:start="2649:45" pos:end="2649:51"><expr pos:start="2649:45" pos:end="2649:51"><name pos:start="2649:45" pos:end="2649:51">cpu_env</name></expr></argument>, <argument pos:start="2649:54" pos:end="2649:75"><expr pos:start="2649:54" pos:end="2649:75"><call pos:start="2649:54" pos:end="2649:75"><name pos:start="2649:54" pos:end="2649:68">neon_reg_offset</name><argument_list pos:start="2649:69" pos:end="2649:75">(<argument pos:start="2649:70" pos:end="2649:71"><expr pos:start="2649:70" pos:end="2649:71"><name pos:start="2649:70" pos:end="2649:71">rd</name></expr></argument>, <argument pos:start="2649:74" pos:end="2649:74"><expr pos:start="2649:74" pos:end="2649:74"><literal type="number" pos:start="2649:74" pos:end="2649:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2651:21" pos:end="2651:52"><expr pos:start="2651:21" pos:end="2651:51"><call pos:start="2651:21" pos:end="2651:51"><name pos:start="2651:21" pos:end="2651:36">tcg_gen_shri_i32</name><argument_list pos:start="2651:37" pos:end="2651:51">(<argument pos:start="2651:38" pos:end="2651:41"><expr pos:start="2651:38" pos:end="2651:41"><name pos:start="2651:38" pos:end="2651:41">tmp3</name></expr></argument>, <argument pos:start="2651:44" pos:end="2651:46"><expr pos:start="2651:44" pos:end="2651:46"><name pos:start="2651:44" pos:end="2651:46">tmp</name></expr></argument>, <argument pos:start="2651:49" pos:end="2651:50"><expr pos:start="2651:49" pos:end="2651:50"><literal type="number" pos:start="2651:49" pos:end="2651:50">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2653:21" pos:end="2653:75"><expr pos:start="2653:21" pos:end="2653:74"><call pos:start="2653:21" pos:end="2653:74"><name pos:start="2653:21" pos:end="2653:50">gen_helper_vfp_fcvt_f16_to_f32</name><argument_list pos:start="2653:51" pos:end="2653:74">(<argument pos:start="2653:52" pos:end="2653:58"><expr pos:start="2653:52" pos:end="2653:58"><name pos:start="2653:52" pos:end="2653:58">cpu_F0s</name></expr></argument>, <argument pos:start="2653:61" pos:end="2653:64"><expr pos:start="2653:61" pos:end="2653:64"><name pos:start="2653:61" pos:end="2653:64">tmp3</name></expr></argument>, <argument pos:start="2653:67" pos:end="2653:73"><expr pos:start="2653:67" pos:end="2653:73"><name pos:start="2653:67" pos:end="2653:73">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2655:21" pos:end="2655:77"><expr pos:start="2655:21" pos:end="2655:76"><call pos:start="2655:21" pos:end="2655:76"><name pos:start="2655:21" pos:end="2655:34">tcg_gen_st_f32</name><argument_list pos:start="2655:35" pos:end="2655:76">(<argument pos:start="2655:36" pos:end="2655:42"><expr pos:start="2655:36" pos:end="2655:42"><name pos:start="2655:36" pos:end="2655:42">cpu_F0s</name></expr></argument>, <argument pos:start="2655:45" pos:end="2655:51"><expr pos:start="2655:45" pos:end="2655:51"><name pos:start="2655:45" pos:end="2655:51">cpu_env</name></expr></argument>, <argument pos:start="2655:54" pos:end="2655:75"><expr pos:start="2655:54" pos:end="2655:75"><call pos:start="2655:54" pos:end="2655:75"><name pos:start="2655:54" pos:end="2655:68">neon_reg_offset</name><argument_list pos:start="2655:69" pos:end="2655:75">(<argument pos:start="2655:70" pos:end="2655:71"><expr pos:start="2655:70" pos:end="2655:71"><name pos:start="2655:70" pos:end="2655:71">rd</name></expr></argument>, <argument pos:start="2655:74" pos:end="2655:74"><expr pos:start="2655:74" pos:end="2655:74"><literal type="number" pos:start="2655:74" pos:end="2655:74">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2657:21" pos:end="2657:34"><expr pos:start="2657:21" pos:end="2657:33"><call pos:start="2657:21" pos:end="2657:33"><name pos:start="2657:21" pos:end="2657:28">dead_tmp</name><argument_list pos:start="2657:29" pos:end="2657:33">(<argument pos:start="2657:30" pos:end="2657:32"><expr pos:start="2657:30" pos:end="2657:32"><name pos:start="2657:30" pos:end="2657:32">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2659:21" pos:end="2659:51"><expr pos:start="2659:21" pos:end="2659:50"><call pos:start="2659:21" pos:end="2659:50"><name pos:start="2659:21" pos:end="2659:38">tcg_gen_ext16u_i32</name><argument_list pos:start="2659:39" pos:end="2659:50">(<argument pos:start="2659:40" pos:end="2659:43"><expr pos:start="2659:40" pos:end="2659:43"><name pos:start="2659:40" pos:end="2659:43">tmp3</name></expr></argument>, <argument pos:start="2659:46" pos:end="2659:49"><expr pos:start="2659:46" pos:end="2659:49"><name pos:start="2659:46" pos:end="2659:49">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2661:21" pos:end="2661:75"><expr pos:start="2661:21" pos:end="2661:74"><call pos:start="2661:21" pos:end="2661:74"><name pos:start="2661:21" pos:end="2661:50">gen_helper_vfp_fcvt_f16_to_f32</name><argument_list pos:start="2661:51" pos:end="2661:74">(<argument pos:start="2661:52" pos:end="2661:58"><expr pos:start="2661:52" pos:end="2661:58"><name pos:start="2661:52" pos:end="2661:58">cpu_F0s</name></expr></argument>, <argument pos:start="2661:61" pos:end="2661:64"><expr pos:start="2661:61" pos:end="2661:64"><name pos:start="2661:61" pos:end="2661:64">tmp3</name></expr></argument>, <argument pos:start="2661:67" pos:end="2661:73"><expr pos:start="2661:67" pos:end="2661:73"><name pos:start="2661:67" pos:end="2661:73">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2663:21" pos:end="2663:77"><expr pos:start="2663:21" pos:end="2663:76"><call pos:start="2663:21" pos:end="2663:76"><name pos:start="2663:21" pos:end="2663:34">tcg_gen_st_f32</name><argument_list pos:start="2663:35" pos:end="2663:76">(<argument pos:start="2663:36" pos:end="2663:42"><expr pos:start="2663:36" pos:end="2663:42"><name pos:start="2663:36" pos:end="2663:42">cpu_F0s</name></expr></argument>, <argument pos:start="2663:45" pos:end="2663:51"><expr pos:start="2663:45" pos:end="2663:51"><name pos:start="2663:45" pos:end="2663:51">cpu_env</name></expr></argument>, <argument pos:start="2663:54" pos:end="2663:75"><expr pos:start="2663:54" pos:end="2663:75"><call pos:start="2663:54" pos:end="2663:75"><name pos:start="2663:54" pos:end="2663:68">neon_reg_offset</name><argument_list pos:start="2663:69" pos:end="2663:75">(<argument pos:start="2663:70" pos:end="2663:71"><expr pos:start="2663:70" pos:end="2663:71"><name pos:start="2663:70" pos:end="2663:71">rd</name></expr></argument>, <argument pos:start="2663:74" pos:end="2663:74"><expr pos:start="2663:74" pos:end="2663:74"><literal type="number" pos:start="2663:74" pos:end="2663:74">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2665:21" pos:end="2665:53"><expr pos:start="2665:21" pos:end="2665:52"><call pos:start="2665:21" pos:end="2665:52"><name pos:start="2665:21" pos:end="2665:36">tcg_gen_shri_i32</name><argument_list pos:start="2665:37" pos:end="2665:52">(<argument pos:start="2665:38" pos:end="2665:41"><expr pos:start="2665:38" pos:end="2665:41"><name pos:start="2665:38" pos:end="2665:41">tmp3</name></expr></argument>, <argument pos:start="2665:44" pos:end="2665:47"><expr pos:start="2665:44" pos:end="2665:47"><name pos:start="2665:44" pos:end="2665:47">tmp2</name></expr></argument>, <argument pos:start="2665:50" pos:end="2665:51"><expr pos:start="2665:50" pos:end="2665:51"><literal type="number" pos:start="2665:50" pos:end="2665:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2667:21" pos:end="2667:75"><expr pos:start="2667:21" pos:end="2667:74"><call pos:start="2667:21" pos:end="2667:74"><name pos:start="2667:21" pos:end="2667:50">gen_helper_vfp_fcvt_f16_to_f32</name><argument_list pos:start="2667:51" pos:end="2667:74">(<argument pos:start="2667:52" pos:end="2667:58"><expr pos:start="2667:52" pos:end="2667:58"><name pos:start="2667:52" pos:end="2667:58">cpu_F0s</name></expr></argument>, <argument pos:start="2667:61" pos:end="2667:64"><expr pos:start="2667:61" pos:end="2667:64"><name pos:start="2667:61" pos:end="2667:64">tmp3</name></expr></argument>, <argument pos:start="2667:67" pos:end="2667:73"><expr pos:start="2667:67" pos:end="2667:73"><name pos:start="2667:67" pos:end="2667:73">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2669:21" pos:end="2669:77"><expr pos:start="2669:21" pos:end="2669:76"><call pos:start="2669:21" pos:end="2669:76"><name pos:start="2669:21" pos:end="2669:34">tcg_gen_st_f32</name><argument_list pos:start="2669:35" pos:end="2669:76">(<argument pos:start="2669:36" pos:end="2669:42"><expr pos:start="2669:36" pos:end="2669:42"><name pos:start="2669:36" pos:end="2669:42">cpu_F0s</name></expr></argument>, <argument pos:start="2669:45" pos:end="2669:51"><expr pos:start="2669:45" pos:end="2669:51"><name pos:start="2669:45" pos:end="2669:51">cpu_env</name></expr></argument>, <argument pos:start="2669:54" pos:end="2669:75"><expr pos:start="2669:54" pos:end="2669:75"><call pos:start="2669:54" pos:end="2669:75"><name pos:start="2669:54" pos:end="2669:68">neon_reg_offset</name><argument_list pos:start="2669:69" pos:end="2669:75">(<argument pos:start="2669:70" pos:end="2669:71"><expr pos:start="2669:70" pos:end="2669:71"><name pos:start="2669:70" pos:end="2669:71">rd</name></expr></argument>, <argument pos:start="2669:74" pos:end="2669:74"><expr pos:start="2669:74" pos:end="2669:74"><literal type="number" pos:start="2669:74" pos:end="2669:74">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2671:21" pos:end="2671:35"><expr pos:start="2671:21" pos:end="2671:34"><call pos:start="2671:21" pos:end="2671:34"><name pos:start="2671:21" pos:end="2671:28">dead_tmp</name><argument_list pos:start="2671:29" pos:end="2671:34">(<argument pos:start="2671:30" pos:end="2671:33"><expr pos:start="2671:30" pos:end="2671:33"><name pos:start="2671:30" pos:end="2671:33">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2673:21" pos:end="2673:35"><expr pos:start="2673:21" pos:end="2673:34"><call pos:start="2673:21" pos:end="2673:34"><name pos:start="2673:21" pos:end="2673:28">dead_tmp</name><argument_list pos:start="2673:29" pos:end="2673:34">(<argument pos:start="2673:30" pos:end="2673:33"><expr pos:start="2673:30" pos:end="2673:33"><name pos:start="2673:30" pos:end="2673:33">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2675:21" pos:end="2675:26">break;</break>

                <default pos:start="2677:17" pos:end="2677:24">default:</default>

                <label pos:start="2679:17" pos:end="2679:28"><name pos:start="2679:17" pos:end="2679:27">elementwise</name>:</label>

                    <for pos:start="2681:21" pos:end="3051:21">for <control pos:start="2681:25" pos:end="2681:62">(<init pos:start="2681:26" pos:end="2681:34"><expr pos:start="2681:26" pos:end="2681:33"><name pos:start="2681:26" pos:end="2681:29">pass</name> <operator pos:start="2681:31" pos:end="2681:31">=</operator> <literal type="number" pos:start="2681:33" pos:end="2681:33">0</literal></expr>;</init> <condition pos:start="2681:36" pos:end="2681:54"><expr pos:start="2681:36" pos:end="2681:53"><name pos:start="2681:36" pos:end="2681:39">pass</name> <operator pos:start="2681:41" pos:end="2681:41">&lt;</operator> <operator pos:start="2681:43" pos:end="2681:43">(</operator><ternary pos:start="2681:44" pos:end="2681:52"><condition pos:start="2681:44" pos:end="2681:46"><expr pos:start="2681:44" pos:end="2681:44"><name pos:start="2681:44" pos:end="2681:44">q</name></expr> ?</condition><then pos:start="2681:48" pos:end="2681:48"> <expr pos:start="2681:48" pos:end="2681:48"><literal type="number" pos:start="2681:48" pos:end="2681:48">4</literal></expr> </then><else pos:start="2681:50" pos:end="2681:52">: <expr pos:start="2681:52" pos:end="2681:52"><literal type="number" pos:start="2681:52" pos:end="2681:52">2</literal></expr></else></ternary><operator pos:start="2681:53" pos:end="2681:53">)</operator></expr>;</condition> <incr pos:start="2681:56" pos:end="2681:61"><expr pos:start="2681:56" pos:end="2681:61"><name pos:start="2681:56" pos:end="2681:59">pass</name><operator pos:start="2681:60" pos:end="2681:61">++</operator></expr></incr>)</control> <block pos:start="2681:64" pos:end="3051:21">{<block_content pos:start="2683:25" pos:end="3049:25">

                        <if_stmt pos:start="2683:25" pos:end="2695:25"><if pos:start="2683:25" pos:end="2691:25">if <condition pos:start="2683:28" pos:end="2683:61">(<expr pos:start="2683:29" pos:end="2683:60"><name pos:start="2683:29" pos:end="2683:30">op</name> <operator pos:start="2683:32" pos:end="2683:33">==</operator> <literal type="number" pos:start="2683:35" pos:end="2683:36">30</literal> <operator pos:start="2683:38" pos:end="2683:39">||</operator> <name pos:start="2683:41" pos:end="2683:42">op</name> <operator pos:start="2683:44" pos:end="2683:45">==</operator> <literal type="number" pos:start="2683:47" pos:end="2683:48">31</literal> <operator pos:start="2683:50" pos:end="2683:51">||</operator> <name pos:start="2683:53" pos:end="2683:54">op</name> <operator pos:start="2683:56" pos:end="2683:57">&gt;=</operator> <literal type="number" pos:start="2683:59" pos:end="2683:60">58</literal></expr>)</condition> <block pos:start="2683:63" pos:end="2691:25">{<block_content pos:start="2685:29" pos:end="2689:45">

                            <expr_stmt pos:start="2685:29" pos:end="2687:70"><expr pos:start="2685:29" pos:end="2687:69"><call pos:start="2685:29" pos:end="2687:69"><name pos:start="2685:29" pos:end="2685:42">tcg_gen_ld_f32</name><argument_list pos:start="2685:43" pos:end="2687:69">(<argument pos:start="2685:44" pos:end="2685:50"><expr pos:start="2685:44" pos:end="2685:50"><name pos:start="2685:44" pos:end="2685:50">cpu_F0s</name></expr></argument>, <argument pos:start="2685:53" pos:end="2685:59"><expr pos:start="2685:53" pos:end="2685:59"><name pos:start="2685:53" pos:end="2685:59">cpu_env</name></expr></argument>,

                                           <argument pos:start="2687:44" pos:end="2687:68"><expr pos:start="2687:44" pos:end="2687:68"><call pos:start="2687:44" pos:end="2687:68"><name pos:start="2687:44" pos:end="2687:58">neon_reg_offset</name><argument_list pos:start="2687:59" pos:end="2687:68">(<argument pos:start="2687:60" pos:end="2687:61"><expr pos:start="2687:60" pos:end="2687:61"><name pos:start="2687:60" pos:end="2687:61">rm</name></expr></argument>, <argument pos:start="2687:64" pos:end="2687:67"><expr pos:start="2687:64" pos:end="2687:67"><name pos:start="2687:64" pos:end="2687:67">pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2689:29" pos:end="2689:45"><expr pos:start="2689:29" pos:end="2689:44"><call pos:start="2689:29" pos:end="2689:44"><name pos:start="2689:29" pos:end="2689:39">TCGV_UNUSED</name><argument_list pos:start="2689:40" pos:end="2689:44">(<argument pos:start="2689:41" pos:end="2689:43"><expr pos:start="2689:41" pos:end="2689:43"><name pos:start="2689:41" pos:end="2689:43">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="2691:27" pos:end="2695:25">else <block pos:start="2691:32" pos:end="2695:25">{<block_content pos:start="2693:29" pos:end="2693:58">

                            <expr_stmt pos:start="2693:29" pos:end="2693:58"><expr pos:start="2693:29" pos:end="2693:57"><name pos:start="2693:29" pos:end="2693:31">tmp</name> <operator pos:start="2693:33" pos:end="2693:33">=</operator> <call pos:start="2693:35" pos:end="2693:57"><name pos:start="2693:35" pos:end="2693:47">neon_load_reg</name><argument_list pos:start="2693:48" pos:end="2693:57">(<argument pos:start="2693:49" pos:end="2693:50"><expr pos:start="2693:49" pos:end="2693:50"><name pos:start="2693:49" pos:end="2693:50">rm</name></expr></argument>, <argument pos:start="2693:53" pos:end="2693:56"><expr pos:start="2693:53" pos:end="2693:56"><name pos:start="2693:53" pos:end="2693:56">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                        <switch pos:start="2697:25" pos:end="3037:25">switch <condition pos:start="2697:32" pos:end="2697:35">(<expr pos:start="2697:33" pos:end="2697:34"><name pos:start="2697:33" pos:end="2697:34">op</name></expr>)</condition> <block pos:start="2697:37" pos:end="3037:25">{<block_content pos:start="2699:25" pos:end="3035:37">

                        <case pos:start="2699:25" pos:end="2699:31">case <expr pos:start="2699:30" pos:end="2699:30"><literal type="number" pos:start="2699:30" pos:end="2699:30">1</literal></expr>:</case> <comment type="block" pos:start="2699:33" pos:end="2699:44">/* VREV32 */</comment>

                            <switch pos:start="2701:29" pos:end="2709:29">switch <condition pos:start="2701:36" pos:end="2701:41">(<expr pos:start="2701:37" pos:end="2701:40"><name pos:start="2701:37" pos:end="2701:40">size</name></expr>)</condition> <block pos:start="2701:43" pos:end="2709:29">{<block_content pos:start="2703:29" pos:end="2707:46">

                            <case pos:start="2703:29" pos:end="2703:35">case <expr pos:start="2703:34" pos:end="2703:34"><literal type="number" pos:start="2703:34" pos:end="2703:34">0</literal></expr>:</case> <expr_stmt pos:start="2703:37" pos:end="2703:66"><expr pos:start="2703:37" pos:end="2703:65"><call pos:start="2703:37" pos:end="2703:65"><name pos:start="2703:37" pos:end="2703:55">tcg_gen_bswap32_i32</name><argument_list pos:start="2703:56" pos:end="2703:65">(<argument pos:start="2703:57" pos:end="2703:59"><expr pos:start="2703:57" pos:end="2703:59"><name pos:start="2703:57" pos:end="2703:59">tmp</name></expr></argument>, <argument pos:start="2703:62" pos:end="2703:64"><expr pos:start="2703:62" pos:end="2703:64"><name pos:start="2703:62" pos:end="2703:64">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2703:68" pos:end="2703:73">break;</break>

                            <case pos:start="2705:29" pos:end="2705:35">case <expr pos:start="2705:34" pos:end="2705:34"><literal type="number" pos:start="2705:34" pos:end="2705:34">1</literal></expr>:</case> <expr_stmt pos:start="2705:37" pos:end="2705:55"><expr pos:start="2705:37" pos:end="2705:54"><call pos:start="2705:37" pos:end="2705:54"><name pos:start="2705:37" pos:end="2705:49">gen_swap_half</name><argument_list pos:start="2705:50" pos:end="2705:54">(<argument pos:start="2705:51" pos:end="2705:53"><expr pos:start="2705:51" pos:end="2705:53"><name pos:start="2705:51" pos:end="2705:53">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2705:57" pos:end="2705:62">break;</break>

                            <default pos:start="2707:29" pos:end="2707:36">default:</default> <return pos:start="2707:38" pos:end="2707:46">return <expr pos:start="2707:45" pos:end="2707:45"><literal type="number" pos:start="2707:45" pos:end="2707:45">1</literal></expr>;</return>

                            </block_content>}</block></switch>

                            <break pos:start="2711:29" pos:end="2711:34">break;</break>

                        <case pos:start="2713:25" pos:end="2713:31">case <expr pos:start="2713:30" pos:end="2713:30"><literal type="number" pos:start="2713:30" pos:end="2713:30">2</literal></expr>:</case> <comment type="block" pos:start="2713:33" pos:end="2713:44">/* VREV16 */</comment>

                            <if_stmt pos:start="2715:29" pos:end="2717:41"><if pos:start="2715:29" pos:end="2717:41">if <condition pos:start="2715:32" pos:end="2715:42">(<expr pos:start="2715:33" pos:end="2715:41"><name pos:start="2715:33" pos:end="2715:36">size</name> <operator pos:start="2715:38" pos:end="2715:39">!=</operator> <literal type="number" pos:start="2715:41" pos:end="2715:41">0</literal></expr>)</condition><block type="pseudo" pos:start="2717:33" pos:end="2717:41"><block_content pos:start="2717:33" pos:end="2717:41">

                                <return pos:start="2717:33" pos:end="2717:41">return <expr pos:start="2717:40" pos:end="2717:40"><literal type="number" pos:start="2717:40" pos:end="2717:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="2719:29" pos:end="2719:43"><expr pos:start="2719:29" pos:end="2719:42"><call pos:start="2719:29" pos:end="2719:42"><name pos:start="2719:29" pos:end="2719:37">gen_rev16</name><argument_list pos:start="2719:38" pos:end="2719:42">(<argument pos:start="2719:39" pos:end="2719:41"><expr pos:start="2719:39" pos:end="2719:41"><name pos:start="2719:39" pos:end="2719:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2721:29" pos:end="2721:34">break;</break>

                        <case pos:start="2723:25" pos:end="2723:31">case <expr pos:start="2723:30" pos:end="2723:30"><literal type="number" pos:start="2723:30" pos:end="2723:30">8</literal></expr>:</case> <comment type="block" pos:start="2723:33" pos:end="2723:41">/* CLS */</comment>

                            <switch pos:start="2725:29" pos:end="2735:29">switch <condition pos:start="2725:36" pos:end="2725:41">(<expr pos:start="2725:37" pos:end="2725:40"><name pos:start="2725:37" pos:end="2725:40">size</name></expr>)</condition> <block pos:start="2725:43" pos:end="2735:29">{<block_content pos:start="2727:29" pos:end="2733:46">

                            <case pos:start="2727:29" pos:end="2727:35">case <expr pos:start="2727:34" pos:end="2727:34"><literal type="number" pos:start="2727:34" pos:end="2727:34">0</literal></expr>:</case> <expr_stmt pos:start="2727:37" pos:end="2727:69"><expr pos:start="2727:37" pos:end="2727:68"><call pos:start="2727:37" pos:end="2727:68"><name pos:start="2727:37" pos:end="2727:58">gen_helper_neon_cls_s8</name><argument_list pos:start="2727:59" pos:end="2727:68">(<argument pos:start="2727:60" pos:end="2727:62"><expr pos:start="2727:60" pos:end="2727:62"><name pos:start="2727:60" pos:end="2727:62">tmp</name></expr></argument>, <argument pos:start="2727:65" pos:end="2727:67"><expr pos:start="2727:65" pos:end="2727:67"><name pos:start="2727:65" pos:end="2727:67">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2727:71" pos:end="2727:76">break;</break>

                            <case pos:start="2729:29" pos:end="2729:35">case <expr pos:start="2729:34" pos:end="2729:34"><literal type="number" pos:start="2729:34" pos:end="2729:34">1</literal></expr>:</case> <expr_stmt pos:start="2729:37" pos:end="2729:70"><expr pos:start="2729:37" pos:end="2729:69"><call pos:start="2729:37" pos:end="2729:69"><name pos:start="2729:37" pos:end="2729:59">gen_helper_neon_cls_s16</name><argument_list pos:start="2729:60" pos:end="2729:69">(<argument pos:start="2729:61" pos:end="2729:63"><expr pos:start="2729:61" pos:end="2729:63"><name pos:start="2729:61" pos:end="2729:63">tmp</name></expr></argument>, <argument pos:start="2729:66" pos:end="2729:68"><expr pos:start="2729:66" pos:end="2729:68"><name pos:start="2729:66" pos:end="2729:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2729:72" pos:end="2729:77">break;</break>

                            <case pos:start="2731:29" pos:end="2731:35">case <expr pos:start="2731:34" pos:end="2731:34"><literal type="number" pos:start="2731:34" pos:end="2731:34">2</literal></expr>:</case> <expr_stmt pos:start="2731:37" pos:end="2731:70"><expr pos:start="2731:37" pos:end="2731:69"><call pos:start="2731:37" pos:end="2731:69"><name pos:start="2731:37" pos:end="2731:59">gen_helper_neon_cls_s32</name><argument_list pos:start="2731:60" pos:end="2731:69">(<argument pos:start="2731:61" pos:end="2731:63"><expr pos:start="2731:61" pos:end="2731:63"><name pos:start="2731:61" pos:end="2731:63">tmp</name></expr></argument>, <argument pos:start="2731:66" pos:end="2731:68"><expr pos:start="2731:66" pos:end="2731:68"><name pos:start="2731:66" pos:end="2731:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2731:72" pos:end="2731:77">break;</break>

                            <default pos:start="2733:29" pos:end="2733:36">default:</default> <return pos:start="2733:38" pos:end="2733:46">return <expr pos:start="2733:45" pos:end="2733:45"><literal type="number" pos:start="2733:45" pos:end="2733:45">1</literal></expr>;</return>

                            </block_content>}</block></switch>

                            <break pos:start="2737:29" pos:end="2737:34">break;</break>

                        <case pos:start="2739:25" pos:end="2739:31">case <expr pos:start="2739:30" pos:end="2739:30"><literal type="number" pos:start="2739:30" pos:end="2739:30">9</literal></expr>:</case> <comment type="block" pos:start="2739:33" pos:end="2739:41">/* CLZ */</comment>

                            <switch pos:start="2741:29" pos:end="2751:29">switch <condition pos:start="2741:36" pos:end="2741:41">(<expr pos:start="2741:37" pos:end="2741:40"><name pos:start="2741:37" pos:end="2741:40">size</name></expr>)</condition> <block pos:start="2741:43" pos:end="2751:29">{<block_content pos:start="2743:29" pos:end="2749:46">

                            <case pos:start="2743:29" pos:end="2743:35">case <expr pos:start="2743:34" pos:end="2743:34"><literal type="number" pos:start="2743:34" pos:end="2743:34">0</literal></expr>:</case> <expr_stmt pos:start="2743:37" pos:end="2743:69"><expr pos:start="2743:37" pos:end="2743:68"><call pos:start="2743:37" pos:end="2743:68"><name pos:start="2743:37" pos:end="2743:58">gen_helper_neon_clz_u8</name><argument_list pos:start="2743:59" pos:end="2743:68">(<argument pos:start="2743:60" pos:end="2743:62"><expr pos:start="2743:60" pos:end="2743:62"><name pos:start="2743:60" pos:end="2743:62">tmp</name></expr></argument>, <argument pos:start="2743:65" pos:end="2743:67"><expr pos:start="2743:65" pos:end="2743:67"><name pos:start="2743:65" pos:end="2743:67">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2743:71" pos:end="2743:76">break;</break>

                            <case pos:start="2745:29" pos:end="2745:35">case <expr pos:start="2745:34" pos:end="2745:34"><literal type="number" pos:start="2745:34" pos:end="2745:34">1</literal></expr>:</case> <expr_stmt pos:start="2745:37" pos:end="2745:70"><expr pos:start="2745:37" pos:end="2745:69"><call pos:start="2745:37" pos:end="2745:69"><name pos:start="2745:37" pos:end="2745:59">gen_helper_neon_clz_u16</name><argument_list pos:start="2745:60" pos:end="2745:69">(<argument pos:start="2745:61" pos:end="2745:63"><expr pos:start="2745:61" pos:end="2745:63"><name pos:start="2745:61" pos:end="2745:63">tmp</name></expr></argument>, <argument pos:start="2745:66" pos:end="2745:68"><expr pos:start="2745:66" pos:end="2745:68"><name pos:start="2745:66" pos:end="2745:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2745:72" pos:end="2745:77">break;</break>

                            <case pos:start="2747:29" pos:end="2747:35">case <expr pos:start="2747:34" pos:end="2747:34"><literal type="number" pos:start="2747:34" pos:end="2747:34">2</literal></expr>:</case> <expr_stmt pos:start="2747:37" pos:end="2747:61"><expr pos:start="2747:37" pos:end="2747:60"><call pos:start="2747:37" pos:end="2747:60"><name pos:start="2747:37" pos:end="2747:50">gen_helper_clz</name><argument_list pos:start="2747:51" pos:end="2747:60">(<argument pos:start="2747:52" pos:end="2747:54"><expr pos:start="2747:52" pos:end="2747:54"><name pos:start="2747:52" pos:end="2747:54">tmp</name></expr></argument>, <argument pos:start="2747:57" pos:end="2747:59"><expr pos:start="2747:57" pos:end="2747:59"><name pos:start="2747:57" pos:end="2747:59">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2747:63" pos:end="2747:68">break;</break>

                            <default pos:start="2749:29" pos:end="2749:36">default:</default> <return pos:start="2749:38" pos:end="2749:46">return <expr pos:start="2749:45" pos:end="2749:45"><literal type="number" pos:start="2749:45" pos:end="2749:45">1</literal></expr>;</return>

                            </block_content>}</block></switch>

                            <break pos:start="2753:29" pos:end="2753:34">break;</break>

                        <case pos:start="2755:25" pos:end="2755:32">case <expr pos:start="2755:30" pos:end="2755:31"><literal type="number" pos:start="2755:30" pos:end="2755:31">10</literal></expr>:</case> <comment type="block" pos:start="2755:34" pos:end="2755:42">/* CNT */</comment>

                            <if_stmt pos:start="2757:29" pos:end="2759:41"><if pos:start="2757:29" pos:end="2759:41">if <condition pos:start="2757:32" pos:end="2757:42">(<expr pos:start="2757:33" pos:end="2757:41"><name pos:start="2757:33" pos:end="2757:36">size</name> <operator pos:start="2757:38" pos:end="2757:39">!=</operator> <literal type="number" pos:start="2757:41" pos:end="2757:41">0</literal></expr>)</condition><block type="pseudo" pos:start="2759:33" pos:end="2759:41"><block_content pos:start="2759:33" pos:end="2759:41">

                                <return pos:start="2759:33" pos:end="2759:41">return <expr pos:start="2759:40" pos:end="2759:40"><literal type="number" pos:start="2759:40" pos:end="2759:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="2761:29" pos:end="2761:61"><expr pos:start="2761:29" pos:end="2761:60"><call pos:start="2761:29" pos:end="2761:60"><name pos:start="2761:29" pos:end="2761:50">gen_helper_neon_cnt_u8</name><argument_list pos:start="2761:51" pos:end="2761:60">(<argument pos:start="2761:52" pos:end="2761:54"><expr pos:start="2761:52" pos:end="2761:54"><name pos:start="2761:52" pos:end="2761:54">tmp</name></expr></argument>, <argument pos:start="2761:57" pos:end="2761:59"><expr pos:start="2761:57" pos:end="2761:59"><name pos:start="2761:57" pos:end="2761:59">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2763:29" pos:end="2763:34">break;</break>

                        <case pos:start="2765:25" pos:end="2765:32">case <expr pos:start="2765:30" pos:end="2765:31"><literal type="number" pos:start="2765:30" pos:end="2765:31">11</literal></expr>:</case> <comment type="block" pos:start="2765:34" pos:end="2765:43">/* VNOT */</comment>

                            <if_stmt pos:start="2767:29" pos:end="2769:41"><if pos:start="2767:29" pos:end="2769:41">if <condition pos:start="2767:32" pos:end="2767:42">(<expr pos:start="2767:33" pos:end="2767:41"><name pos:start="2767:33" pos:end="2767:36">size</name> <operator pos:start="2767:38" pos:end="2767:39">!=</operator> <literal type="number" pos:start="2767:41" pos:end="2767:41">0</literal></expr>)</condition><block type="pseudo" pos:start="2769:33" pos:end="2769:41"><block_content pos:start="2769:33" pos:end="2769:41">

                                <return pos:start="2769:33" pos:end="2769:41">return <expr pos:start="2769:40" pos:end="2769:40"><literal type="number" pos:start="2769:40" pos:end="2769:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="2771:29" pos:end="2771:54"><expr pos:start="2771:29" pos:end="2771:53"><call pos:start="2771:29" pos:end="2771:53"><name pos:start="2771:29" pos:end="2771:43">tcg_gen_not_i32</name><argument_list pos:start="2771:44" pos:end="2771:53">(<argument pos:start="2771:45" pos:end="2771:47"><expr pos:start="2771:45" pos:end="2771:47"><name pos:start="2771:45" pos:end="2771:47">tmp</name></expr></argument>, <argument pos:start="2771:50" pos:end="2771:52"><expr pos:start="2771:50" pos:end="2771:52"><name pos:start="2771:50" pos:end="2771:52">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2773:29" pos:end="2773:34">break;</break>

                        <case pos:start="2775:25" pos:end="2775:32">case <expr pos:start="2775:30" pos:end="2775:31"><literal type="number" pos:start="2775:30" pos:end="2775:31">14</literal></expr>:</case> <comment type="block" pos:start="2775:34" pos:end="2775:44">/* VQABS */</comment>

                            <switch pos:start="2777:29" pos:end="2787:29">switch <condition pos:start="2777:36" pos:end="2777:41">(<expr pos:start="2777:37" pos:end="2777:40"><name pos:start="2777:37" pos:end="2777:40">size</name></expr>)</condition> <block pos:start="2777:43" pos:end="2787:29">{<block_content pos:start="2779:29" pos:end="2785:46">

                            <case pos:start="2779:29" pos:end="2779:35">case <expr pos:start="2779:34" pos:end="2779:34"><literal type="number" pos:start="2779:34" pos:end="2779:34">0</literal></expr>:</case> <expr_stmt pos:start="2779:37" pos:end="2779:79"><expr pos:start="2779:37" pos:end="2779:78"><call pos:start="2779:37" pos:end="2779:78"><name pos:start="2779:37" pos:end="2779:59">gen_helper_neon_qabs_s8</name><argument_list pos:start="2779:60" pos:end="2779:78">(<argument pos:start="2779:61" pos:end="2779:63"><expr pos:start="2779:61" pos:end="2779:63"><name pos:start="2779:61" pos:end="2779:63">tmp</name></expr></argument>, <argument pos:start="2779:66" pos:end="2779:72"><expr pos:start="2779:66" pos:end="2779:72"><name pos:start="2779:66" pos:end="2779:72">cpu_env</name></expr></argument>, <argument pos:start="2779:75" pos:end="2779:77"><expr pos:start="2779:75" pos:end="2779:77"><name pos:start="2779:75" pos:end="2779:77">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2779:81" pos:end="2779:86">break;</break>

                            <case pos:start="2781:29" pos:end="2781:35">case <expr pos:start="2781:34" pos:end="2781:34"><literal type="number" pos:start="2781:34" pos:end="2781:34">1</literal></expr>:</case> <expr_stmt pos:start="2781:37" pos:end="2781:80"><expr pos:start="2781:37" pos:end="2781:79"><call pos:start="2781:37" pos:end="2781:79"><name pos:start="2781:37" pos:end="2781:60">gen_helper_neon_qabs_s16</name><argument_list pos:start="2781:61" pos:end="2781:79">(<argument pos:start="2781:62" pos:end="2781:64"><expr pos:start="2781:62" pos:end="2781:64"><name pos:start="2781:62" pos:end="2781:64">tmp</name></expr></argument>, <argument pos:start="2781:67" pos:end="2781:73"><expr pos:start="2781:67" pos:end="2781:73"><name pos:start="2781:67" pos:end="2781:73">cpu_env</name></expr></argument>, <argument pos:start="2781:76" pos:end="2781:78"><expr pos:start="2781:76" pos:end="2781:78"><name pos:start="2781:76" pos:end="2781:78">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2781:82" pos:end="2781:87">break;</break>

                            <case pos:start="2783:29" pos:end="2783:35">case <expr pos:start="2783:34" pos:end="2783:34"><literal type="number" pos:start="2783:34" pos:end="2783:34">2</literal></expr>:</case> <expr_stmt pos:start="2783:37" pos:end="2783:80"><expr pos:start="2783:37" pos:end="2783:79"><call pos:start="2783:37" pos:end="2783:79"><name pos:start="2783:37" pos:end="2783:60">gen_helper_neon_qabs_s32</name><argument_list pos:start="2783:61" pos:end="2783:79">(<argument pos:start="2783:62" pos:end="2783:64"><expr pos:start="2783:62" pos:end="2783:64"><name pos:start="2783:62" pos:end="2783:64">tmp</name></expr></argument>, <argument pos:start="2783:67" pos:end="2783:73"><expr pos:start="2783:67" pos:end="2783:73"><name pos:start="2783:67" pos:end="2783:73">cpu_env</name></expr></argument>, <argument pos:start="2783:76" pos:end="2783:78"><expr pos:start="2783:76" pos:end="2783:78"><name pos:start="2783:76" pos:end="2783:78">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2783:82" pos:end="2783:87">break;</break>

                            <default pos:start="2785:29" pos:end="2785:36">default:</default> <return pos:start="2785:38" pos:end="2785:46">return <expr pos:start="2785:45" pos:end="2785:45"><literal type="number" pos:start="2785:45" pos:end="2785:45">1</literal></expr>;</return>

                            </block_content>}</block></switch>

                            <break pos:start="2789:29" pos:end="2789:34">break;</break>

                        <case pos:start="2791:25" pos:end="2791:32">case <expr pos:start="2791:30" pos:end="2791:31"><literal type="number" pos:start="2791:30" pos:end="2791:31">15</literal></expr>:</case> <comment type="block" pos:start="2791:34" pos:end="2791:44">/* VQNEG */</comment>

                            <switch pos:start="2793:29" pos:end="2803:29">switch <condition pos:start="2793:36" pos:end="2793:41">(<expr pos:start="2793:37" pos:end="2793:40"><name pos:start="2793:37" pos:end="2793:40">size</name></expr>)</condition> <block pos:start="2793:43" pos:end="2803:29">{<block_content pos:start="2795:29" pos:end="2801:46">

                            <case pos:start="2795:29" pos:end="2795:35">case <expr pos:start="2795:34" pos:end="2795:34"><literal type="number" pos:start="2795:34" pos:end="2795:34">0</literal></expr>:</case> <expr_stmt pos:start="2795:37" pos:end="2795:79"><expr pos:start="2795:37" pos:end="2795:78"><call pos:start="2795:37" pos:end="2795:78"><name pos:start="2795:37" pos:end="2795:59">gen_helper_neon_qneg_s8</name><argument_list pos:start="2795:60" pos:end="2795:78">(<argument pos:start="2795:61" pos:end="2795:63"><expr pos:start="2795:61" pos:end="2795:63"><name pos:start="2795:61" pos:end="2795:63">tmp</name></expr></argument>, <argument pos:start="2795:66" pos:end="2795:72"><expr pos:start="2795:66" pos:end="2795:72"><name pos:start="2795:66" pos:end="2795:72">cpu_env</name></expr></argument>, <argument pos:start="2795:75" pos:end="2795:77"><expr pos:start="2795:75" pos:end="2795:77"><name pos:start="2795:75" pos:end="2795:77">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2795:81" pos:end="2795:86">break;</break>

                            <case pos:start="2797:29" pos:end="2797:35">case <expr pos:start="2797:34" pos:end="2797:34"><literal type="number" pos:start="2797:34" pos:end="2797:34">1</literal></expr>:</case> <expr_stmt pos:start="2797:37" pos:end="2797:80"><expr pos:start="2797:37" pos:end="2797:79"><call pos:start="2797:37" pos:end="2797:79"><name pos:start="2797:37" pos:end="2797:60">gen_helper_neon_qneg_s16</name><argument_list pos:start="2797:61" pos:end="2797:79">(<argument pos:start="2797:62" pos:end="2797:64"><expr pos:start="2797:62" pos:end="2797:64"><name pos:start="2797:62" pos:end="2797:64">tmp</name></expr></argument>, <argument pos:start="2797:67" pos:end="2797:73"><expr pos:start="2797:67" pos:end="2797:73"><name pos:start="2797:67" pos:end="2797:73">cpu_env</name></expr></argument>, <argument pos:start="2797:76" pos:end="2797:78"><expr pos:start="2797:76" pos:end="2797:78"><name pos:start="2797:76" pos:end="2797:78">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2797:82" pos:end="2797:87">break;</break>

                            <case pos:start="2799:29" pos:end="2799:35">case <expr pos:start="2799:34" pos:end="2799:34"><literal type="number" pos:start="2799:34" pos:end="2799:34">2</literal></expr>:</case> <expr_stmt pos:start="2799:37" pos:end="2799:80"><expr pos:start="2799:37" pos:end="2799:79"><call pos:start="2799:37" pos:end="2799:79"><name pos:start="2799:37" pos:end="2799:60">gen_helper_neon_qneg_s32</name><argument_list pos:start="2799:61" pos:end="2799:79">(<argument pos:start="2799:62" pos:end="2799:64"><expr pos:start="2799:62" pos:end="2799:64"><name pos:start="2799:62" pos:end="2799:64">tmp</name></expr></argument>, <argument pos:start="2799:67" pos:end="2799:73"><expr pos:start="2799:67" pos:end="2799:73"><name pos:start="2799:67" pos:end="2799:73">cpu_env</name></expr></argument>, <argument pos:start="2799:76" pos:end="2799:78"><expr pos:start="2799:76" pos:end="2799:78"><name pos:start="2799:76" pos:end="2799:78">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2799:82" pos:end="2799:87">break;</break>

                            <default pos:start="2801:29" pos:end="2801:36">default:</default> <return pos:start="2801:38" pos:end="2801:46">return <expr pos:start="2801:45" pos:end="2801:45"><literal type="number" pos:start="2801:45" pos:end="2801:45">1</literal></expr>;</return>

                            </block_content>}</block></switch>

                            <break pos:start="2805:29" pos:end="2805:34">break;</break>

                        <case pos:start="2807:25" pos:end="2807:32">case <expr pos:start="2807:30" pos:end="2807:31"><literal type="number" pos:start="2807:30" pos:end="2807:31">16</literal></expr>:</case> <case pos:start="2807:34" pos:end="2807:41">case <expr pos:start="2807:39" pos:end="2807:40"><literal type="number" pos:start="2807:39" pos:end="2807:40">19</literal></expr>:</case> <comment type="block" pos:start="2807:43" pos:end="2807:64">/* VCGT #0, VCLE #0 */</comment>

                            <expr_stmt pos:start="2809:29" pos:end="2809:52"><expr pos:start="2809:29" pos:end="2809:51"><name pos:start="2809:29" pos:end="2809:32">tmp2</name> <operator pos:start="2809:34" pos:end="2809:34">=</operator> <call pos:start="2809:36" pos:end="2809:51"><name pos:start="2809:36" pos:end="2809:48">tcg_const_i32</name><argument_list pos:start="2809:49" pos:end="2809:51">(<argument pos:start="2809:50" pos:end="2809:50"><expr pos:start="2809:50" pos:end="2809:50"><literal type="number" pos:start="2809:50" pos:end="2809:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="2811:29" pos:end="2821:29">switch<condition pos:start="2811:35" pos:end="2811:40">(<expr pos:start="2811:36" pos:end="2811:39"><name pos:start="2811:36" pos:end="2811:39">size</name></expr>)</condition> <block pos:start="2811:42" pos:end="2821:29">{<block_content pos:start="2813:29" pos:end="2819:46">

                            <case pos:start="2813:29" pos:end="2813:35">case <expr pos:start="2813:34" pos:end="2813:34"><literal type="number" pos:start="2813:34" pos:end="2813:34">0</literal></expr>:</case> <expr_stmt pos:start="2813:37" pos:end="2813:75"><expr pos:start="2813:37" pos:end="2813:74"><call pos:start="2813:37" pos:end="2813:74"><name pos:start="2813:37" pos:end="2813:58">gen_helper_neon_cgt_s8</name><argument_list pos:start="2813:59" pos:end="2813:74">(<argument pos:start="2813:60" pos:end="2813:62"><expr pos:start="2813:60" pos:end="2813:62"><name pos:start="2813:60" pos:end="2813:62">tmp</name></expr></argument>, <argument pos:start="2813:65" pos:end="2813:67"><expr pos:start="2813:65" pos:end="2813:67"><name pos:start="2813:65" pos:end="2813:67">tmp</name></expr></argument>, <argument pos:start="2813:70" pos:end="2813:73"><expr pos:start="2813:70" pos:end="2813:73"><name pos:start="2813:70" pos:end="2813:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2813:77" pos:end="2813:82">break;</break>

                            <case pos:start="2815:29" pos:end="2815:35">case <expr pos:start="2815:34" pos:end="2815:34"><literal type="number" pos:start="2815:34" pos:end="2815:34">1</literal></expr>:</case> <expr_stmt pos:start="2815:37" pos:end="2815:76"><expr pos:start="2815:37" pos:end="2815:75"><call pos:start="2815:37" pos:end="2815:75"><name pos:start="2815:37" pos:end="2815:59">gen_helper_neon_cgt_s16</name><argument_list pos:start="2815:60" pos:end="2815:75">(<argument pos:start="2815:61" pos:end="2815:63"><expr pos:start="2815:61" pos:end="2815:63"><name pos:start="2815:61" pos:end="2815:63">tmp</name></expr></argument>, <argument pos:start="2815:66" pos:end="2815:68"><expr pos:start="2815:66" pos:end="2815:68"><name pos:start="2815:66" pos:end="2815:68">tmp</name></expr></argument>, <argument pos:start="2815:71" pos:end="2815:74"><expr pos:start="2815:71" pos:end="2815:74"><name pos:start="2815:71" pos:end="2815:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2815:78" pos:end="2815:83">break;</break>

                            <case pos:start="2817:29" pos:end="2817:35">case <expr pos:start="2817:34" pos:end="2817:34"><literal type="number" pos:start="2817:34" pos:end="2817:34">2</literal></expr>:</case> <expr_stmt pos:start="2817:37" pos:end="2817:76"><expr pos:start="2817:37" pos:end="2817:75"><call pos:start="2817:37" pos:end="2817:75"><name pos:start="2817:37" pos:end="2817:59">gen_helper_neon_cgt_s32</name><argument_list pos:start="2817:60" pos:end="2817:75">(<argument pos:start="2817:61" pos:end="2817:63"><expr pos:start="2817:61" pos:end="2817:63"><name pos:start="2817:61" pos:end="2817:63">tmp</name></expr></argument>, <argument pos:start="2817:66" pos:end="2817:68"><expr pos:start="2817:66" pos:end="2817:68"><name pos:start="2817:66" pos:end="2817:68">tmp</name></expr></argument>, <argument pos:start="2817:71" pos:end="2817:74"><expr pos:start="2817:71" pos:end="2817:74"><name pos:start="2817:71" pos:end="2817:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2817:78" pos:end="2817:83">break;</break>

                            <default pos:start="2819:29" pos:end="2819:36">default:</default> <return pos:start="2819:38" pos:end="2819:46">return <expr pos:start="2819:45" pos:end="2819:45"><literal type="number" pos:start="2819:45" pos:end="2819:45">1</literal></expr>;</return>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="2823:29" pos:end="2823:48"><expr pos:start="2823:29" pos:end="2823:47"><call pos:start="2823:29" pos:end="2823:47"><name pos:start="2823:29" pos:end="2823:41">tcg_temp_free</name><argument_list pos:start="2823:42" pos:end="2823:47">(<argument pos:start="2823:43" pos:end="2823:46"><expr pos:start="2823:43" pos:end="2823:46"><name pos:start="2823:43" pos:end="2823:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2825:29" pos:end="2827:58"><if pos:start="2825:29" pos:end="2827:58">if <condition pos:start="2825:32" pos:end="2825:41">(<expr pos:start="2825:33" pos:end="2825:40"><name pos:start="2825:33" pos:end="2825:34">op</name> <operator pos:start="2825:36" pos:end="2825:37">==</operator> <literal type="number" pos:start="2825:39" pos:end="2825:40">19</literal></expr>)</condition><block type="pseudo" pos:start="2827:33" pos:end="2827:58"><block_content pos:start="2827:33" pos:end="2827:58">

                                <expr_stmt pos:start="2827:33" pos:end="2827:58"><expr pos:start="2827:33" pos:end="2827:57"><call pos:start="2827:33" pos:end="2827:57"><name pos:start="2827:33" pos:end="2827:47">tcg_gen_not_i32</name><argument_list pos:start="2827:48" pos:end="2827:57">(<argument pos:start="2827:49" pos:end="2827:51"><expr pos:start="2827:49" pos:end="2827:51"><name pos:start="2827:49" pos:end="2827:51">tmp</name></expr></argument>, <argument pos:start="2827:54" pos:end="2827:56"><expr pos:start="2827:54" pos:end="2827:56"><name pos:start="2827:54" pos:end="2827:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <break pos:start="2829:29" pos:end="2829:34">break;</break>

                        <case pos:start="2831:25" pos:end="2831:32">case <expr pos:start="2831:30" pos:end="2831:31"><literal type="number" pos:start="2831:30" pos:end="2831:31">17</literal></expr>:</case> <case pos:start="2831:34" pos:end="2831:41">case <expr pos:start="2831:39" pos:end="2831:40"><literal type="number" pos:start="2831:39" pos:end="2831:40">20</literal></expr>:</case> <comment type="block" pos:start="2831:43" pos:end="2831:64">/* VCGE #0, VCLT #0 */</comment>

                            <expr_stmt pos:start="2833:29" pos:end="2833:52"><expr pos:start="2833:29" pos:end="2833:51"><name pos:start="2833:29" pos:end="2833:32">tmp2</name> <operator pos:start="2833:34" pos:end="2833:34">=</operator> <call pos:start="2833:36" pos:end="2833:51"><name pos:start="2833:36" pos:end="2833:48">tcg_const_i32</name><argument_list pos:start="2833:49" pos:end="2833:51">(<argument pos:start="2833:50" pos:end="2833:50"><expr pos:start="2833:50" pos:end="2833:50"><literal type="number" pos:start="2833:50" pos:end="2833:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="2835:29" pos:end="2845:29">switch<condition pos:start="2835:35" pos:end="2835:40">(<expr pos:start="2835:36" pos:end="2835:39"><name pos:start="2835:36" pos:end="2835:39">size</name></expr>)</condition> <block pos:start="2835:42" pos:end="2845:29">{<block_content pos:start="2837:29" pos:end="2843:46">

                            <case pos:start="2837:29" pos:end="2837:35">case <expr pos:start="2837:34" pos:end="2837:34"><literal type="number" pos:start="2837:34" pos:end="2837:34">0</literal></expr>:</case> <expr_stmt pos:start="2837:37" pos:end="2837:75"><expr pos:start="2837:37" pos:end="2837:74"><call pos:start="2837:37" pos:end="2837:74"><name pos:start="2837:37" pos:end="2837:58">gen_helper_neon_cge_s8</name><argument_list pos:start="2837:59" pos:end="2837:74">(<argument pos:start="2837:60" pos:end="2837:62"><expr pos:start="2837:60" pos:end="2837:62"><name pos:start="2837:60" pos:end="2837:62">tmp</name></expr></argument>, <argument pos:start="2837:65" pos:end="2837:67"><expr pos:start="2837:65" pos:end="2837:67"><name pos:start="2837:65" pos:end="2837:67">tmp</name></expr></argument>, <argument pos:start="2837:70" pos:end="2837:73"><expr pos:start="2837:70" pos:end="2837:73"><name pos:start="2837:70" pos:end="2837:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2837:77" pos:end="2837:82">break;</break>

                            <case pos:start="2839:29" pos:end="2839:35">case <expr pos:start="2839:34" pos:end="2839:34"><literal type="number" pos:start="2839:34" pos:end="2839:34">1</literal></expr>:</case> <expr_stmt pos:start="2839:37" pos:end="2839:76"><expr pos:start="2839:37" pos:end="2839:75"><call pos:start="2839:37" pos:end="2839:75"><name pos:start="2839:37" pos:end="2839:59">gen_helper_neon_cge_s16</name><argument_list pos:start="2839:60" pos:end="2839:75">(<argument pos:start="2839:61" pos:end="2839:63"><expr pos:start="2839:61" pos:end="2839:63"><name pos:start="2839:61" pos:end="2839:63">tmp</name></expr></argument>, <argument pos:start="2839:66" pos:end="2839:68"><expr pos:start="2839:66" pos:end="2839:68"><name pos:start="2839:66" pos:end="2839:68">tmp</name></expr></argument>, <argument pos:start="2839:71" pos:end="2839:74"><expr pos:start="2839:71" pos:end="2839:74"><name pos:start="2839:71" pos:end="2839:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2839:78" pos:end="2839:83">break;</break>

                            <case pos:start="2841:29" pos:end="2841:35">case <expr pos:start="2841:34" pos:end="2841:34"><literal type="number" pos:start="2841:34" pos:end="2841:34">2</literal></expr>:</case> <expr_stmt pos:start="2841:37" pos:end="2841:76"><expr pos:start="2841:37" pos:end="2841:75"><call pos:start="2841:37" pos:end="2841:75"><name pos:start="2841:37" pos:end="2841:59">gen_helper_neon_cge_s32</name><argument_list pos:start="2841:60" pos:end="2841:75">(<argument pos:start="2841:61" pos:end="2841:63"><expr pos:start="2841:61" pos:end="2841:63"><name pos:start="2841:61" pos:end="2841:63">tmp</name></expr></argument>, <argument pos:start="2841:66" pos:end="2841:68"><expr pos:start="2841:66" pos:end="2841:68"><name pos:start="2841:66" pos:end="2841:68">tmp</name></expr></argument>, <argument pos:start="2841:71" pos:end="2841:74"><expr pos:start="2841:71" pos:end="2841:74"><name pos:start="2841:71" pos:end="2841:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2841:78" pos:end="2841:83">break;</break>

                            <default pos:start="2843:29" pos:end="2843:36">default:</default> <return pos:start="2843:38" pos:end="2843:46">return <expr pos:start="2843:45" pos:end="2843:45"><literal type="number" pos:start="2843:45" pos:end="2843:45">1</literal></expr>;</return>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="2847:29" pos:end="2847:48"><expr pos:start="2847:29" pos:end="2847:47"><call pos:start="2847:29" pos:end="2847:47"><name pos:start="2847:29" pos:end="2847:41">tcg_temp_free</name><argument_list pos:start="2847:42" pos:end="2847:47">(<argument pos:start="2847:43" pos:end="2847:46"><expr pos:start="2847:43" pos:end="2847:46"><name pos:start="2847:43" pos:end="2847:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2849:29" pos:end="2851:58"><if pos:start="2849:29" pos:end="2851:58">if <condition pos:start="2849:32" pos:end="2849:41">(<expr pos:start="2849:33" pos:end="2849:40"><name pos:start="2849:33" pos:end="2849:34">op</name> <operator pos:start="2849:36" pos:end="2849:37">==</operator> <literal type="number" pos:start="2849:39" pos:end="2849:40">20</literal></expr>)</condition><block type="pseudo" pos:start="2851:33" pos:end="2851:58"><block_content pos:start="2851:33" pos:end="2851:58">

                                <expr_stmt pos:start="2851:33" pos:end="2851:58"><expr pos:start="2851:33" pos:end="2851:57"><call pos:start="2851:33" pos:end="2851:57"><name pos:start="2851:33" pos:end="2851:47">tcg_gen_not_i32</name><argument_list pos:start="2851:48" pos:end="2851:57">(<argument pos:start="2851:49" pos:end="2851:51"><expr pos:start="2851:49" pos:end="2851:51"><name pos:start="2851:49" pos:end="2851:51">tmp</name></expr></argument>, <argument pos:start="2851:54" pos:end="2851:56"><expr pos:start="2851:54" pos:end="2851:56"><name pos:start="2851:54" pos:end="2851:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <break pos:start="2853:29" pos:end="2853:34">break;</break>

                        <case pos:start="2855:25" pos:end="2855:32">case <expr pos:start="2855:30" pos:end="2855:31"><literal type="number" pos:start="2855:30" pos:end="2855:31">18</literal></expr>:</case> <comment type="block" pos:start="2855:34" pos:end="2855:46">/* VCEQ #0 */</comment>

                            <expr_stmt pos:start="2857:29" pos:end="2857:52"><expr pos:start="2857:29" pos:end="2857:51"><name pos:start="2857:29" pos:end="2857:32">tmp2</name> <operator pos:start="2857:34" pos:end="2857:34">=</operator> <call pos:start="2857:36" pos:end="2857:51"><name pos:start="2857:36" pos:end="2857:48">tcg_const_i32</name><argument_list pos:start="2857:49" pos:end="2857:51">(<argument pos:start="2857:50" pos:end="2857:50"><expr pos:start="2857:50" pos:end="2857:50"><literal type="number" pos:start="2857:50" pos:end="2857:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="2859:29" pos:end="2869:29">switch<condition pos:start="2859:35" pos:end="2859:40">(<expr pos:start="2859:36" pos:end="2859:39"><name pos:start="2859:36" pos:end="2859:39">size</name></expr>)</condition> <block pos:start="2859:42" pos:end="2869:29">{<block_content pos:start="2861:29" pos:end="2867:46">

                            <case pos:start="2861:29" pos:end="2861:35">case <expr pos:start="2861:34" pos:end="2861:34"><literal type="number" pos:start="2861:34" pos:end="2861:34">0</literal></expr>:</case> <expr_stmt pos:start="2861:37" pos:end="2861:75"><expr pos:start="2861:37" pos:end="2861:74"><call pos:start="2861:37" pos:end="2861:74"><name pos:start="2861:37" pos:end="2861:58">gen_helper_neon_ceq_u8</name><argument_list pos:start="2861:59" pos:end="2861:74">(<argument pos:start="2861:60" pos:end="2861:62"><expr pos:start="2861:60" pos:end="2861:62"><name pos:start="2861:60" pos:end="2861:62">tmp</name></expr></argument>, <argument pos:start="2861:65" pos:end="2861:67"><expr pos:start="2861:65" pos:end="2861:67"><name pos:start="2861:65" pos:end="2861:67">tmp</name></expr></argument>, <argument pos:start="2861:70" pos:end="2861:73"><expr pos:start="2861:70" pos:end="2861:73"><name pos:start="2861:70" pos:end="2861:73">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2861:77" pos:end="2861:82">break;</break>

                            <case pos:start="2863:29" pos:end="2863:35">case <expr pos:start="2863:34" pos:end="2863:34"><literal type="number" pos:start="2863:34" pos:end="2863:34">1</literal></expr>:</case> <expr_stmt pos:start="2863:37" pos:end="2863:76"><expr pos:start="2863:37" pos:end="2863:75"><call pos:start="2863:37" pos:end="2863:75"><name pos:start="2863:37" pos:end="2863:59">gen_helper_neon_ceq_u16</name><argument_list pos:start="2863:60" pos:end="2863:75">(<argument pos:start="2863:61" pos:end="2863:63"><expr pos:start="2863:61" pos:end="2863:63"><name pos:start="2863:61" pos:end="2863:63">tmp</name></expr></argument>, <argument pos:start="2863:66" pos:end="2863:68"><expr pos:start="2863:66" pos:end="2863:68"><name pos:start="2863:66" pos:end="2863:68">tmp</name></expr></argument>, <argument pos:start="2863:71" pos:end="2863:74"><expr pos:start="2863:71" pos:end="2863:74"><name pos:start="2863:71" pos:end="2863:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2863:78" pos:end="2863:83">break;</break>

                            <case pos:start="2865:29" pos:end="2865:35">case <expr pos:start="2865:34" pos:end="2865:34"><literal type="number" pos:start="2865:34" pos:end="2865:34">2</literal></expr>:</case> <expr_stmt pos:start="2865:37" pos:end="2865:76"><expr pos:start="2865:37" pos:end="2865:75"><call pos:start="2865:37" pos:end="2865:75"><name pos:start="2865:37" pos:end="2865:59">gen_helper_neon_ceq_u32</name><argument_list pos:start="2865:60" pos:end="2865:75">(<argument pos:start="2865:61" pos:end="2865:63"><expr pos:start="2865:61" pos:end="2865:63"><name pos:start="2865:61" pos:end="2865:63">tmp</name></expr></argument>, <argument pos:start="2865:66" pos:end="2865:68"><expr pos:start="2865:66" pos:end="2865:68"><name pos:start="2865:66" pos:end="2865:68">tmp</name></expr></argument>, <argument pos:start="2865:71" pos:end="2865:74"><expr pos:start="2865:71" pos:end="2865:74"><name pos:start="2865:71" pos:end="2865:74">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2865:78" pos:end="2865:83">break;</break>

                            <default pos:start="2867:29" pos:end="2867:36">default:</default> <return pos:start="2867:38" pos:end="2867:46">return <expr pos:start="2867:45" pos:end="2867:45"><literal type="number" pos:start="2867:45" pos:end="2867:45">1</literal></expr>;</return>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="2871:29" pos:end="2871:48"><expr pos:start="2871:29" pos:end="2871:47"><call pos:start="2871:29" pos:end="2871:47"><name pos:start="2871:29" pos:end="2871:41">tcg_temp_free</name><argument_list pos:start="2871:42" pos:end="2871:47">(<argument pos:start="2871:43" pos:end="2871:46"><expr pos:start="2871:43" pos:end="2871:46"><name pos:start="2871:43" pos:end="2871:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2873:29" pos:end="2873:34">break;</break>

                        <case pos:start="2875:25" pos:end="2875:32">case <expr pos:start="2875:30" pos:end="2875:31"><literal type="number" pos:start="2875:30" pos:end="2875:31">22</literal></expr>:</case> <comment type="block" pos:start="2875:34" pos:end="2875:43">/* VABS */</comment>

                            <switch pos:start="2877:29" pos:end="2887:29">switch<condition pos:start="2877:35" pos:end="2877:40">(<expr pos:start="2877:36" pos:end="2877:39"><name pos:start="2877:36" pos:end="2877:39">size</name></expr>)</condition> <block pos:start="2877:42" pos:end="2887:29">{<block_content pos:start="2879:29" pos:end="2885:46">

                            <case pos:start="2879:29" pos:end="2879:35">case <expr pos:start="2879:34" pos:end="2879:34"><literal type="number" pos:start="2879:34" pos:end="2879:34">0</literal></expr>:</case> <expr_stmt pos:start="2879:37" pos:end="2879:69"><expr pos:start="2879:37" pos:end="2879:68"><call pos:start="2879:37" pos:end="2879:68"><name pos:start="2879:37" pos:end="2879:58">gen_helper_neon_abs_s8</name><argument_list pos:start="2879:59" pos:end="2879:68">(<argument pos:start="2879:60" pos:end="2879:62"><expr pos:start="2879:60" pos:end="2879:62"><name pos:start="2879:60" pos:end="2879:62">tmp</name></expr></argument>, <argument pos:start="2879:65" pos:end="2879:67"><expr pos:start="2879:65" pos:end="2879:67"><name pos:start="2879:65" pos:end="2879:67">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2879:71" pos:end="2879:76">break;</break>

                            <case pos:start="2881:29" pos:end="2881:35">case <expr pos:start="2881:34" pos:end="2881:34"><literal type="number" pos:start="2881:34" pos:end="2881:34">1</literal></expr>:</case> <expr_stmt pos:start="2881:37" pos:end="2881:70"><expr pos:start="2881:37" pos:end="2881:69"><call pos:start="2881:37" pos:end="2881:69"><name pos:start="2881:37" pos:end="2881:59">gen_helper_neon_abs_s16</name><argument_list pos:start="2881:60" pos:end="2881:69">(<argument pos:start="2881:61" pos:end="2881:63"><expr pos:start="2881:61" pos:end="2881:63"><name pos:start="2881:61" pos:end="2881:63">tmp</name></expr></argument>, <argument pos:start="2881:66" pos:end="2881:68"><expr pos:start="2881:66" pos:end="2881:68"><name pos:start="2881:66" pos:end="2881:68">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2881:72" pos:end="2881:77">break;</break>

                            <case pos:start="2883:29" pos:end="2883:35">case <expr pos:start="2883:34" pos:end="2883:34"><literal type="number" pos:start="2883:34" pos:end="2883:34">2</literal></expr>:</case> <expr_stmt pos:start="2883:37" pos:end="2883:62"><expr pos:start="2883:37" pos:end="2883:61"><call pos:start="2883:37" pos:end="2883:61"><name pos:start="2883:37" pos:end="2883:51">tcg_gen_abs_i32</name><argument_list pos:start="2883:52" pos:end="2883:61">(<argument pos:start="2883:53" pos:end="2883:55"><expr pos:start="2883:53" pos:end="2883:55"><name pos:start="2883:53" pos:end="2883:55">tmp</name></expr></argument>, <argument pos:start="2883:58" pos:end="2883:60"><expr pos:start="2883:58" pos:end="2883:60"><name pos:start="2883:58" pos:end="2883:60">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2883:64" pos:end="2883:69">break;</break>

                            <default pos:start="2885:29" pos:end="2885:36">default:</default> <return pos:start="2885:38" pos:end="2885:46">return <expr pos:start="2885:45" pos:end="2885:45"><literal type="number" pos:start="2885:45" pos:end="2885:45">1</literal></expr>;</return>

                            </block_content>}</block></switch>

                            <break pos:start="2889:29" pos:end="2889:34">break;</break>

                        <case pos:start="2891:25" pos:end="2891:32">case <expr pos:start="2891:30" pos:end="2891:31"><literal type="number" pos:start="2891:30" pos:end="2891:31">23</literal></expr>:</case> <comment type="block" pos:start="2891:34" pos:end="2891:43">/* VNEG */</comment>

                            <if_stmt pos:start="2893:29" pos:end="2895:41"><if pos:start="2893:29" pos:end="2895:41">if <condition pos:start="2893:32" pos:end="2893:42">(<expr pos:start="2893:33" pos:end="2893:41"><name pos:start="2893:33" pos:end="2893:36">size</name> <operator pos:start="2893:38" pos:end="2893:39">==</operator> <literal type="number" pos:start="2893:41" pos:end="2893:41">3</literal></expr>)</condition><block type="pseudo" pos:start="2895:33" pos:end="2895:41"><block_content pos:start="2895:33" pos:end="2895:41">

                                <return pos:start="2895:33" pos:end="2895:41">return <expr pos:start="2895:40" pos:end="2895:40"><literal type="number" pos:start="2895:40" pos:end="2895:40">1</literal></expr>;</return></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="2897:29" pos:end="2897:52"><expr pos:start="2897:29" pos:end="2897:51"><name pos:start="2897:29" pos:end="2897:32">tmp2</name> <operator pos:start="2897:34" pos:end="2897:34">=</operator> <call pos:start="2897:36" pos:end="2897:51"><name pos:start="2897:36" pos:end="2897:48">tcg_const_i32</name><argument_list pos:start="2897:49" pos:end="2897:51">(<argument pos:start="2897:50" pos:end="2897:50"><expr pos:start="2897:50" pos:end="2897:50"><literal type="number" pos:start="2897:50" pos:end="2897:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2899:29" pos:end="2899:58"><expr pos:start="2899:29" pos:end="2899:57"><call pos:start="2899:29" pos:end="2899:57"><name pos:start="2899:29" pos:end="2899:40">gen_neon_rsb</name><argument_list pos:start="2899:41" pos:end="2899:57">(<argument pos:start="2899:42" pos:end="2899:45"><expr pos:start="2899:42" pos:end="2899:45"><name pos:start="2899:42" pos:end="2899:45">size</name></expr></argument>, <argument pos:start="2899:48" pos:end="2899:50"><expr pos:start="2899:48" pos:end="2899:50"><name pos:start="2899:48" pos:end="2899:50">tmp</name></expr></argument>, <argument pos:start="2899:53" pos:end="2899:56"><expr pos:start="2899:53" pos:end="2899:56"><name pos:start="2899:53" pos:end="2899:56">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2901:29" pos:end="2901:48"><expr pos:start="2901:29" pos:end="2901:47"><call pos:start="2901:29" pos:end="2901:47"><name pos:start="2901:29" pos:end="2901:41">tcg_temp_free</name><argument_list pos:start="2901:42" pos:end="2901:47">(<argument pos:start="2901:43" pos:end="2901:46"><expr pos:start="2901:43" pos:end="2901:46"><name pos:start="2901:43" pos:end="2901:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2903:29" pos:end="2903:34">break;</break>

                        <case pos:start="2905:25" pos:end="2905:32">case <expr pos:start="2905:30" pos:end="2905:31"><literal type="number" pos:start="2905:30" pos:end="2905:31">24</literal></expr>:</case> <case pos:start="2905:34" pos:end="2905:41">case <expr pos:start="2905:39" pos:end="2905:40"><literal type="number" pos:start="2905:39" pos:end="2905:40">27</literal></expr>:</case> <comment type="block" pos:start="2905:43" pos:end="2905:76">/* Float VCGT #0, Float VCLE #0 */</comment>

                            <expr_stmt pos:start="2907:29" pos:end="2907:52"><expr pos:start="2907:29" pos:end="2907:51"><name pos:start="2907:29" pos:end="2907:32">tmp2</name> <operator pos:start="2907:34" pos:end="2907:34">=</operator> <call pos:start="2907:36" pos:end="2907:51"><name pos:start="2907:36" pos:end="2907:48">tcg_const_i32</name><argument_list pos:start="2907:49" pos:end="2907:51">(<argument pos:start="2907:50" pos:end="2907:50"><expr pos:start="2907:50" pos:end="2907:50"><literal type="number" pos:start="2907:50" pos:end="2907:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2909:29" pos:end="2909:68"><expr pos:start="2909:29" pos:end="2909:67"><call pos:start="2909:29" pos:end="2909:67"><name pos:start="2909:29" pos:end="2909:51">gen_helper_neon_cgt_f32</name><argument_list pos:start="2909:52" pos:end="2909:67">(<argument pos:start="2909:53" pos:end="2909:55"><expr pos:start="2909:53" pos:end="2909:55"><name pos:start="2909:53" pos:end="2909:55">tmp</name></expr></argument>, <argument pos:start="2909:58" pos:end="2909:60"><expr pos:start="2909:58" pos:end="2909:60"><name pos:start="2909:58" pos:end="2909:60">tmp</name></expr></argument>, <argument pos:start="2909:63" pos:end="2909:66"><expr pos:start="2909:63" pos:end="2909:66"><name pos:start="2909:63" pos:end="2909:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2911:29" pos:end="2911:48"><expr pos:start="2911:29" pos:end="2911:47"><call pos:start="2911:29" pos:end="2911:47"><name pos:start="2911:29" pos:end="2911:41">tcg_temp_free</name><argument_list pos:start="2911:42" pos:end="2911:47">(<argument pos:start="2911:43" pos:end="2911:46"><expr pos:start="2911:43" pos:end="2911:46"><name pos:start="2911:43" pos:end="2911:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2913:29" pos:end="2915:58"><if pos:start="2913:29" pos:end="2915:58">if <condition pos:start="2913:32" pos:end="2913:41">(<expr pos:start="2913:33" pos:end="2913:40"><name pos:start="2913:33" pos:end="2913:34">op</name> <operator pos:start="2913:36" pos:end="2913:37">==</operator> <literal type="number" pos:start="2913:39" pos:end="2913:40">27</literal></expr>)</condition><block type="pseudo" pos:start="2915:33" pos:end="2915:58"><block_content pos:start="2915:33" pos:end="2915:58">

                                <expr_stmt pos:start="2915:33" pos:end="2915:58"><expr pos:start="2915:33" pos:end="2915:57"><call pos:start="2915:33" pos:end="2915:57"><name pos:start="2915:33" pos:end="2915:47">tcg_gen_not_i32</name><argument_list pos:start="2915:48" pos:end="2915:57">(<argument pos:start="2915:49" pos:end="2915:51"><expr pos:start="2915:49" pos:end="2915:51"><name pos:start="2915:49" pos:end="2915:51">tmp</name></expr></argument>, <argument pos:start="2915:54" pos:end="2915:56"><expr pos:start="2915:54" pos:end="2915:56"><name pos:start="2915:54" pos:end="2915:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <break pos:start="2917:29" pos:end="2917:34">break;</break>

                        <case pos:start="2919:25" pos:end="2919:32">case <expr pos:start="2919:30" pos:end="2919:31"><literal type="number" pos:start="2919:30" pos:end="2919:31">25</literal></expr>:</case> <case pos:start="2919:34" pos:end="2919:41">case <expr pos:start="2919:39" pos:end="2919:40"><literal type="number" pos:start="2919:39" pos:end="2919:40">28</literal></expr>:</case> <comment type="block" pos:start="2919:43" pos:end="2919:76">/* Float VCGE #0, Float VCLT #0 */</comment>

                            <expr_stmt pos:start="2921:29" pos:end="2921:52"><expr pos:start="2921:29" pos:end="2921:51"><name pos:start="2921:29" pos:end="2921:32">tmp2</name> <operator pos:start="2921:34" pos:end="2921:34">=</operator> <call pos:start="2921:36" pos:end="2921:51"><name pos:start="2921:36" pos:end="2921:48">tcg_const_i32</name><argument_list pos:start="2921:49" pos:end="2921:51">(<argument pos:start="2921:50" pos:end="2921:50"><expr pos:start="2921:50" pos:end="2921:50"><literal type="number" pos:start="2921:50" pos:end="2921:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2923:29" pos:end="2923:68"><expr pos:start="2923:29" pos:end="2923:67"><call pos:start="2923:29" pos:end="2923:67"><name pos:start="2923:29" pos:end="2923:51">gen_helper_neon_cge_f32</name><argument_list pos:start="2923:52" pos:end="2923:67">(<argument pos:start="2923:53" pos:end="2923:55"><expr pos:start="2923:53" pos:end="2923:55"><name pos:start="2923:53" pos:end="2923:55">tmp</name></expr></argument>, <argument pos:start="2923:58" pos:end="2923:60"><expr pos:start="2923:58" pos:end="2923:60"><name pos:start="2923:58" pos:end="2923:60">tmp</name></expr></argument>, <argument pos:start="2923:63" pos:end="2923:66"><expr pos:start="2923:63" pos:end="2923:66"><name pos:start="2923:63" pos:end="2923:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2925:29" pos:end="2925:48"><expr pos:start="2925:29" pos:end="2925:47"><call pos:start="2925:29" pos:end="2925:47"><name pos:start="2925:29" pos:end="2925:41">tcg_temp_free</name><argument_list pos:start="2925:42" pos:end="2925:47">(<argument pos:start="2925:43" pos:end="2925:46"><expr pos:start="2925:43" pos:end="2925:46"><name pos:start="2925:43" pos:end="2925:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="2927:29" pos:end="2929:58"><if pos:start="2927:29" pos:end="2929:58">if <condition pos:start="2927:32" pos:end="2927:41">(<expr pos:start="2927:33" pos:end="2927:40"><name pos:start="2927:33" pos:end="2927:34">op</name> <operator pos:start="2927:36" pos:end="2927:37">==</operator> <literal type="number" pos:start="2927:39" pos:end="2927:40">28</literal></expr>)</condition><block type="pseudo" pos:start="2929:33" pos:end="2929:58"><block_content pos:start="2929:33" pos:end="2929:58">

                                <expr_stmt pos:start="2929:33" pos:end="2929:58"><expr pos:start="2929:33" pos:end="2929:57"><call pos:start="2929:33" pos:end="2929:57"><name pos:start="2929:33" pos:end="2929:47">tcg_gen_not_i32</name><argument_list pos:start="2929:48" pos:end="2929:57">(<argument pos:start="2929:49" pos:end="2929:51"><expr pos:start="2929:49" pos:end="2929:51"><name pos:start="2929:49" pos:end="2929:51">tmp</name></expr></argument>, <argument pos:start="2929:54" pos:end="2929:56"><expr pos:start="2929:54" pos:end="2929:56"><name pos:start="2929:54" pos:end="2929:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <break pos:start="2931:29" pos:end="2931:34">break;</break>

                        <case pos:start="2933:25" pos:end="2933:32">case <expr pos:start="2933:30" pos:end="2933:31"><literal type="number" pos:start="2933:30" pos:end="2933:31">26</literal></expr>:</case> <comment type="block" pos:start="2933:34" pos:end="2933:52">/* Float VCEQ #0 */</comment>

                            <expr_stmt pos:start="2935:29" pos:end="2935:52"><expr pos:start="2935:29" pos:end="2935:51"><name pos:start="2935:29" pos:end="2935:32">tmp2</name> <operator pos:start="2935:34" pos:end="2935:34">=</operator> <call pos:start="2935:36" pos:end="2935:51"><name pos:start="2935:36" pos:end="2935:48">tcg_const_i32</name><argument_list pos:start="2935:49" pos:end="2935:51">(<argument pos:start="2935:50" pos:end="2935:50"><expr pos:start="2935:50" pos:end="2935:50"><literal type="number" pos:start="2935:50" pos:end="2935:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2937:29" pos:end="2937:68"><expr pos:start="2937:29" pos:end="2937:67"><call pos:start="2937:29" pos:end="2937:67"><name pos:start="2937:29" pos:end="2937:51">gen_helper_neon_ceq_f32</name><argument_list pos:start="2937:52" pos:end="2937:67">(<argument pos:start="2937:53" pos:end="2937:55"><expr pos:start="2937:53" pos:end="2937:55"><name pos:start="2937:53" pos:end="2937:55">tmp</name></expr></argument>, <argument pos:start="2937:58" pos:end="2937:60"><expr pos:start="2937:58" pos:end="2937:60"><name pos:start="2937:58" pos:end="2937:60">tmp</name></expr></argument>, <argument pos:start="2937:63" pos:end="2937:66"><expr pos:start="2937:63" pos:end="2937:66"><name pos:start="2937:63" pos:end="2937:66">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2939:29" pos:end="2939:48"><expr pos:start="2939:29" pos:end="2939:47"><call pos:start="2939:29" pos:end="2939:47"><name pos:start="2939:29" pos:end="2939:41">tcg_temp_free</name><argument_list pos:start="2939:42" pos:end="2939:47">(<argument pos:start="2939:43" pos:end="2939:46"><expr pos:start="2939:43" pos:end="2939:46"><name pos:start="2939:43" pos:end="2939:46">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2941:29" pos:end="2941:34">break;</break>

                        <case pos:start="2943:25" pos:end="2943:32">case <expr pos:start="2943:30" pos:end="2943:31"><literal type="number" pos:start="2943:30" pos:end="2943:31">30</literal></expr>:</case> <comment type="block" pos:start="2943:34" pos:end="2943:49">/* Float VABS */</comment>

                            <expr_stmt pos:start="2945:29" pos:end="2945:43"><expr pos:start="2945:29" pos:end="2945:42"><call pos:start="2945:29" pos:end="2945:42"><name pos:start="2945:29" pos:end="2945:39">gen_vfp_abs</name><argument_list pos:start="2945:40" pos:end="2945:42">(<argument pos:start="2945:41" pos:end="2945:41"><expr pos:start="2945:41" pos:end="2945:41"><literal type="number" pos:start="2945:41" pos:end="2945:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2947:29" pos:end="2947:34">break;</break>

                        <case pos:start="2949:25" pos:end="2949:32">case <expr pos:start="2949:30" pos:end="2949:31"><literal type="number" pos:start="2949:30" pos:end="2949:31">31</literal></expr>:</case> <comment type="block" pos:start="2949:34" pos:end="2949:49">/* Float VNEG */</comment>

                            <expr_stmt pos:start="2951:29" pos:end="2951:43"><expr pos:start="2951:29" pos:end="2951:42"><call pos:start="2951:29" pos:end="2951:42"><name pos:start="2951:29" pos:end="2951:39">gen_vfp_neg</name><argument_list pos:start="2951:40" pos:end="2951:42">(<argument pos:start="2951:41" pos:end="2951:41"><expr pos:start="2951:41" pos:end="2951:41"><literal type="number" pos:start="2951:41" pos:end="2951:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2953:29" pos:end="2953:34">break;</break>

                        <case pos:start="2955:25" pos:end="2955:32">case <expr pos:start="2955:30" pos:end="2955:31"><literal type="number" pos:start="2955:30" pos:end="2955:31">32</literal></expr>:</case> <comment type="block" pos:start="2955:34" pos:end="2955:43">/* VSWP */</comment>

                            <expr_stmt pos:start="2957:29" pos:end="2957:59"><expr pos:start="2957:29" pos:end="2957:58"><name pos:start="2957:29" pos:end="2957:32">tmp2</name> <operator pos:start="2957:34" pos:end="2957:34">=</operator> <call pos:start="2957:36" pos:end="2957:58"><name pos:start="2957:36" pos:end="2957:48">neon_load_reg</name><argument_list pos:start="2957:49" pos:end="2957:58">(<argument pos:start="2957:50" pos:end="2957:51"><expr pos:start="2957:50" pos:end="2957:51"><name pos:start="2957:50" pos:end="2957:51">rd</name></expr></argument>, <argument pos:start="2957:54" pos:end="2957:57"><expr pos:start="2957:54" pos:end="2957:57"><name pos:start="2957:54" pos:end="2957:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="2959:29" pos:end="2959:59"><expr pos:start="2959:29" pos:end="2959:58"><call pos:start="2959:29" pos:end="2959:58"><name pos:start="2959:29" pos:end="2959:42">neon_store_reg</name><argument_list pos:start="2959:43" pos:end="2959:58">(<argument pos:start="2959:44" pos:end="2959:45"><expr pos:start="2959:44" pos:end="2959:45"><name pos:start="2959:44" pos:end="2959:45">rm</name></expr></argument>, <argument pos:start="2959:48" pos:end="2959:51"><expr pos:start="2959:48" pos:end="2959:51"><name pos:start="2959:48" pos:end="2959:51">pass</name></expr></argument>, <argument pos:start="2959:54" pos:end="2959:57"><expr pos:start="2959:54" pos:end="2959:57"><name pos:start="2959:54" pos:end="2959:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2961:29" pos:end="2961:34">break;</break>

                        <case pos:start="2963:25" pos:end="2963:32">case <expr pos:start="2963:30" pos:end="2963:31"><literal type="number" pos:start="2963:30" pos:end="2963:31">33</literal></expr>:</case> <comment type="block" pos:start="2963:34" pos:end="2963:43">/* VTRN */</comment>

                            <expr_stmt pos:start="2965:29" pos:end="2965:59"><expr pos:start="2965:29" pos:end="2965:58"><name pos:start="2965:29" pos:end="2965:32">tmp2</name> <operator pos:start="2965:34" pos:end="2965:34">=</operator> <call pos:start="2965:36" pos:end="2965:58"><name pos:start="2965:36" pos:end="2965:48">neon_load_reg</name><argument_list pos:start="2965:49" pos:end="2965:58">(<argument pos:start="2965:50" pos:end="2965:51"><expr pos:start="2965:50" pos:end="2965:51"><name pos:start="2965:50" pos:end="2965:51">rd</name></expr></argument>, <argument pos:start="2965:54" pos:end="2965:57"><expr pos:start="2965:54" pos:end="2965:57"><name pos:start="2965:54" pos:end="2965:57">pass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <switch pos:start="2967:29" pos:end="2977:29">switch <condition pos:start="2967:36" pos:end="2967:41">(<expr pos:start="2967:37" pos:end="2967:40"><name pos:start="2967:37" pos:end="2967:40">size</name></expr>)</condition> <block pos:start="2967:43" pos:end="2977:29">{<block_content pos:start="2969:29" pos:end="2975:46">

                            <case pos:start="2969:29" pos:end="2969:35">case <expr pos:start="2969:34" pos:end="2969:34"><literal type="number" pos:start="2969:34" pos:end="2969:34">0</literal></expr>:</case> <expr_stmt pos:start="2969:37" pos:end="2969:63"><expr pos:start="2969:37" pos:end="2969:62"><call pos:start="2969:37" pos:end="2969:62"><name pos:start="2969:37" pos:end="2969:51">gen_neon_trn_u8</name><argument_list pos:start="2969:52" pos:end="2969:62">(<argument pos:start="2969:53" pos:end="2969:55"><expr pos:start="2969:53" pos:end="2969:55"><name pos:start="2969:53" pos:end="2969:55">tmp</name></expr></argument>, <argument pos:start="2969:58" pos:end="2969:61"><expr pos:start="2969:58" pos:end="2969:61"><name pos:start="2969:58" pos:end="2969:61">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2969:65" pos:end="2969:70">break;</break>

                            <case pos:start="2971:29" pos:end="2971:35">case <expr pos:start="2971:34" pos:end="2971:34"><literal type="number" pos:start="2971:34" pos:end="2971:34">1</literal></expr>:</case> <expr_stmt pos:start="2971:37" pos:end="2971:64"><expr pos:start="2971:37" pos:end="2971:63"><call pos:start="2971:37" pos:end="2971:63"><name pos:start="2971:37" pos:end="2971:52">gen_neon_trn_u16</name><argument_list pos:start="2971:53" pos:end="2971:63">(<argument pos:start="2971:54" pos:end="2971:56"><expr pos:start="2971:54" pos:end="2971:56"><name pos:start="2971:54" pos:end="2971:56">tmp</name></expr></argument>, <argument pos:start="2971:59" pos:end="2971:62"><expr pos:start="2971:59" pos:end="2971:62"><name pos:start="2971:59" pos:end="2971:62">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break pos:start="2971:66" pos:end="2971:71">break;</break>

                            <case pos:start="2973:29" pos:end="2973:35">case <expr pos:start="2973:34" pos:end="2973:34"><literal type="number" pos:start="2973:34" pos:end="2973:34">2</literal></expr>:</case> <expr_stmt pos:start="2973:37" pos:end="2973:44"><expr pos:start="2973:37" pos:end="2973:43"><call pos:start="2973:37" pos:end="2973:43"><name pos:start="2973:37" pos:end="2973:41">abort</name><argument_list pos:start="2973:42" pos:end="2973:43">()</argument_list></call></expr>;</expr_stmt>

                            <default pos:start="2975:29" pos:end="2975:36">default:</default> <return pos:start="2975:38" pos:end="2975:46">return <expr pos:start="2975:45" pos:end="2975:45"><literal type="number" pos:start="2975:45" pos:end="2975:45">1</literal></expr>;</return>

                            </block_content>}</block></switch>

                            <expr_stmt pos:start="2979:29" pos:end="2979:59"><expr pos:start="2979:29" pos:end="2979:58"><call pos:start="2979:29" pos:end="2979:58"><name pos:start="2979:29" pos:end="2979:42">neon_store_reg</name><argument_list pos:start="2979:43" pos:end="2979:58">(<argument pos:start="2979:44" pos:end="2979:45"><expr pos:start="2979:44" pos:end="2979:45"><name pos:start="2979:44" pos:end="2979:45">rm</name></expr></argument>, <argument pos:start="2979:48" pos:end="2979:51"><expr pos:start="2979:48" pos:end="2979:51"><name pos:start="2979:48" pos:end="2979:51">pass</name></expr></argument>, <argument pos:start="2979:54" pos:end="2979:57"><expr pos:start="2979:54" pos:end="2979:57"><name pos:start="2979:54" pos:end="2979:57">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2981:29" pos:end="2981:34">break;</break>

                        <case pos:start="2983:25" pos:end="2983:32">case <expr pos:start="2983:30" pos:end="2983:31"><literal type="number" pos:start="2983:30" pos:end="2983:31">56</literal></expr>:</case> <comment type="block" pos:start="2983:34" pos:end="2983:53">/* Integer VRECPE */</comment>

                            <expr_stmt pos:start="2985:29" pos:end="2985:68"><expr pos:start="2985:29" pos:end="2985:67"><call pos:start="2985:29" pos:end="2985:67"><name pos:start="2985:29" pos:end="2985:48">gen_helper_recpe_u32</name><argument_list pos:start="2985:49" pos:end="2985:67">(<argument pos:start="2985:50" pos:end="2985:52"><expr pos:start="2985:50" pos:end="2985:52"><name pos:start="2985:50" pos:end="2985:52">tmp</name></expr></argument>, <argument pos:start="2985:55" pos:end="2985:57"><expr pos:start="2985:55" pos:end="2985:57"><name pos:start="2985:55" pos:end="2985:57">tmp</name></expr></argument>, <argument pos:start="2985:60" pos:end="2985:66"><expr pos:start="2985:60" pos:end="2985:66"><name pos:start="2985:60" pos:end="2985:66">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2987:29" pos:end="2987:34">break;</break>

                        <case pos:start="2989:25" pos:end="2989:32">case <expr pos:start="2989:30" pos:end="2989:31"><literal type="number" pos:start="2989:30" pos:end="2989:31">57</literal></expr>:</case> <comment type="block" pos:start="2989:34" pos:end="2989:54">/* Integer VRSQRTE */</comment>

                            <expr_stmt pos:start="2991:29" pos:end="2991:69"><expr pos:start="2991:29" pos:end="2991:68"><call pos:start="2991:29" pos:end="2991:68"><name pos:start="2991:29" pos:end="2991:49">gen_helper_rsqrte_u32</name><argument_list pos:start="2991:50" pos:end="2991:68">(<argument pos:start="2991:51" pos:end="2991:53"><expr pos:start="2991:51" pos:end="2991:53"><name pos:start="2991:51" pos:end="2991:53">tmp</name></expr></argument>, <argument pos:start="2991:56" pos:end="2991:58"><expr pos:start="2991:56" pos:end="2991:58"><name pos:start="2991:56" pos:end="2991:58">tmp</name></expr></argument>, <argument pos:start="2991:61" pos:end="2991:67"><expr pos:start="2991:61" pos:end="2991:67"><name pos:start="2991:61" pos:end="2991:67">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2993:29" pos:end="2993:34">break;</break>

                        <case pos:start="2995:25" pos:end="2995:32">case <expr pos:start="2995:30" pos:end="2995:31"><literal type="number" pos:start="2995:30" pos:end="2995:31">58</literal></expr>:</case> <comment type="block" pos:start="2995:34" pos:end="2995:51">/* Float VRECPE */</comment>

                            <expr_stmt pos:start="2997:29" pos:end="2997:76"><expr pos:start="2997:29" pos:end="2997:75"><call pos:start="2997:29" pos:end="2997:75"><name pos:start="2997:29" pos:end="2997:48">gen_helper_recpe_f32</name><argument_list pos:start="2997:49" pos:end="2997:75">(<argument pos:start="2997:50" pos:end="2997:56"><expr pos:start="2997:50" pos:end="2997:56"><name pos:start="2997:50" pos:end="2997:56">cpu_F0s</name></expr></argument>, <argument pos:start="2997:59" pos:end="2997:65"><expr pos:start="2997:59" pos:end="2997:65"><name pos:start="2997:59" pos:end="2997:65">cpu_F0s</name></expr></argument>, <argument pos:start="2997:68" pos:end="2997:74"><expr pos:start="2997:68" pos:end="2997:74"><name pos:start="2997:68" pos:end="2997:74">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="2999:29" pos:end="2999:34">break;</break>

                        <case pos:start="3001:25" pos:end="3001:32">case <expr pos:start="3001:30" pos:end="3001:31"><literal type="number" pos:start="3001:30" pos:end="3001:31">59</literal></expr>:</case> <comment type="block" pos:start="3001:34" pos:end="3001:52">/* Float VRSQRTE */</comment>

                            <expr_stmt pos:start="3003:29" pos:end="3003:77"><expr pos:start="3003:29" pos:end="3003:76"><call pos:start="3003:29" pos:end="3003:76"><name pos:start="3003:29" pos:end="3003:49">gen_helper_rsqrte_f32</name><argument_list pos:start="3003:50" pos:end="3003:76">(<argument pos:start="3003:51" pos:end="3003:57"><expr pos:start="3003:51" pos:end="3003:57"><name pos:start="3003:51" pos:end="3003:57">cpu_F0s</name></expr></argument>, <argument pos:start="3003:60" pos:end="3003:66"><expr pos:start="3003:60" pos:end="3003:66"><name pos:start="3003:60" pos:end="3003:66">cpu_F0s</name></expr></argument>, <argument pos:start="3003:69" pos:end="3003:75"><expr pos:start="3003:69" pos:end="3003:75"><name pos:start="3003:69" pos:end="3003:75">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3005:29" pos:end="3005:34">break;</break>

                        <case pos:start="3007:25" pos:end="3007:32">case <expr pos:start="3007:30" pos:end="3007:31"><literal type="number" pos:start="3007:30" pos:end="3007:31">60</literal></expr>:</case> <comment type="block" pos:start="3007:34" pos:end="3007:51">/* VCVT.F32.S32 */</comment>

                            <expr_stmt pos:start="3009:29" pos:end="3009:44"><expr pos:start="3009:29" pos:end="3009:43"><call pos:start="3009:29" pos:end="3009:43"><name pos:start="3009:29" pos:end="3009:40">gen_vfp_sito</name><argument_list pos:start="3009:41" pos:end="3009:43">(<argument pos:start="3009:42" pos:end="3009:42"><expr pos:start="3009:42" pos:end="3009:42"><literal type="number" pos:start="3009:42" pos:end="3009:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3011:29" pos:end="3011:34">break;</break>

                        <case pos:start="3013:25" pos:end="3013:32">case <expr pos:start="3013:30" pos:end="3013:31"><literal type="number" pos:start="3013:30" pos:end="3013:31">61</literal></expr>:</case> <comment type="block" pos:start="3013:34" pos:end="3013:51">/* VCVT.F32.U32 */</comment>

                            <expr_stmt pos:start="3015:29" pos:end="3015:44"><expr pos:start="3015:29" pos:end="3015:43"><call pos:start="3015:29" pos:end="3015:43"><name pos:start="3015:29" pos:end="3015:40">gen_vfp_uito</name><argument_list pos:start="3015:41" pos:end="3015:43">(<argument pos:start="3015:42" pos:end="3015:42"><expr pos:start="3015:42" pos:end="3015:42"><literal type="number" pos:start="3015:42" pos:end="3015:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3017:29" pos:end="3017:34">break;</break>

                        <case pos:start="3019:25" pos:end="3019:32">case <expr pos:start="3019:30" pos:end="3019:31"><literal type="number" pos:start="3019:30" pos:end="3019:31">62</literal></expr>:</case> <comment type="block" pos:start="3019:34" pos:end="3019:51">/* VCVT.S32.F32 */</comment>

                            <expr_stmt pos:start="3021:29" pos:end="3021:45"><expr pos:start="3021:29" pos:end="3021:44"><call pos:start="3021:29" pos:end="3021:44"><name pos:start="3021:29" pos:end="3021:41">gen_vfp_tosiz</name><argument_list pos:start="3021:42" pos:end="3021:44">(<argument pos:start="3021:43" pos:end="3021:43"><expr pos:start="3021:43" pos:end="3021:43"><literal type="number" pos:start="3021:43" pos:end="3021:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3023:29" pos:end="3023:34">break;</break>

                        <case pos:start="3025:25" pos:end="3025:32">case <expr pos:start="3025:30" pos:end="3025:31"><literal type="number" pos:start="3025:30" pos:end="3025:31">63</literal></expr>:</case> <comment type="block" pos:start="3025:34" pos:end="3025:51">/* VCVT.U32.F32 */</comment>

                            <expr_stmt pos:start="3027:29" pos:end="3027:45"><expr pos:start="3027:29" pos:end="3027:44"><call pos:start="3027:29" pos:end="3027:44"><name pos:start="3027:29" pos:end="3027:41">gen_vfp_touiz</name><argument_list pos:start="3027:42" pos:end="3027:44">(<argument pos:start="3027:43" pos:end="3027:43"><expr pos:start="3027:43" pos:end="3027:43"><literal type="number" pos:start="3027:43" pos:end="3027:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="3029:29" pos:end="3029:34">break;</break>

                        <default pos:start="3031:25" pos:end="3031:32">default:</default>

                            <comment type="block" pos:start="3033:29" pos:end="3033:57">/* Reserved: 21, 29, 39-56 */</comment>

                            <return pos:start="3035:29" pos:end="3035:37">return <expr pos:start="3035:36" pos:end="3035:36"><literal type="number" pos:start="3035:36" pos:end="3035:36">1</literal></expr>;</return>

                        </block_content>}</block></switch>

                        <if_stmt pos:start="3039:25" pos:end="3049:25"><if pos:start="3039:25" pos:end="3045:25">if <condition pos:start="3039:28" pos:end="3039:61">(<expr pos:start="3039:29" pos:end="3039:60"><name pos:start="3039:29" pos:end="3039:30">op</name> <operator pos:start="3039:32" pos:end="3039:33">==</operator> <literal type="number" pos:start="3039:35" pos:end="3039:36">30</literal> <operator pos:start="3039:38" pos:end="3039:39">||</operator> <name pos:start="3039:41" pos:end="3039:42">op</name> <operator pos:start="3039:44" pos:end="3039:45">==</operator> <literal type="number" pos:start="3039:47" pos:end="3039:48">31</literal> <operator pos:start="3039:50" pos:end="3039:51">||</operator> <name pos:start="3039:53" pos:end="3039:54">op</name> <operator pos:start="3039:56" pos:end="3039:57">&gt;=</operator> <literal type="number" pos:start="3039:59" pos:end="3039:60">58</literal></expr>)</condition> <block pos:start="3039:63" pos:end="3045:25">{<block_content pos:start="3041:29" pos:end="3043:70">

                            <expr_stmt pos:start="3041:29" pos:end="3043:70"><expr pos:start="3041:29" pos:end="3043:69"><call pos:start="3041:29" pos:end="3043:69"><name pos:start="3041:29" pos:end="3041:42">tcg_gen_st_f32</name><argument_list pos:start="3041:43" pos:end="3043:69">(<argument pos:start="3041:44" pos:end="3041:50"><expr pos:start="3041:44" pos:end="3041:50"><name pos:start="3041:44" pos:end="3041:50">cpu_F0s</name></expr></argument>, <argument pos:start="3041:53" pos:end="3041:59"><expr pos:start="3041:53" pos:end="3041:59"><name pos:start="3041:53" pos:end="3041:59">cpu_env</name></expr></argument>,

                                           <argument pos:start="3043:44" pos:end="3043:68"><expr pos:start="3043:44" pos:end="3043:68"><call pos:start="3043:44" pos:end="3043:68"><name pos:start="3043:44" pos:end="3043:58">neon_reg_offset</name><argument_list pos:start="3043:59" pos:end="3043:68">(<argument pos:start="3043:60" pos:end="3043:61"><expr pos:start="3043:60" pos:end="3043:61"><name pos:start="3043:60" pos:end="3043:61">rd</name></expr></argument>, <argument pos:start="3043:64" pos:end="3043:67"><expr pos:start="3043:64" pos:end="3043:67"><name pos:start="3043:64" pos:end="3043:67">pass</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="3045:27" pos:end="3049:25">else <block pos:start="3045:32" pos:end="3049:25">{<block_content pos:start="3047:29" pos:end="3047:58">

                            <expr_stmt pos:start="3047:29" pos:end="3047:58"><expr pos:start="3047:29" pos:end="3047:57"><call pos:start="3047:29" pos:end="3047:57"><name pos:start="3047:29" pos:end="3047:42">neon_store_reg</name><argument_list pos:start="3047:43" pos:end="3047:57">(<argument pos:start="3047:44" pos:end="3047:45"><expr pos:start="3047:44" pos:end="3047:45"><name pos:start="3047:44" pos:end="3047:45">rd</name></expr></argument>, <argument pos:start="3047:48" pos:end="3047:51"><expr pos:start="3047:48" pos:end="3047:51"><name pos:start="3047:48" pos:end="3047:51">pass</name></expr></argument>, <argument pos:start="3047:54" pos:end="3047:56"><expr pos:start="3047:54" pos:end="3047:56"><name pos:start="3047:54" pos:end="3047:56">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>

                    <break pos:start="3053:21" pos:end="3053:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <if type="elseif" pos:start="3057:15" pos:end="3111:13">else if <condition pos:start="3057:23" pos:end="3057:47">(<expr pos:start="3057:24" pos:end="3057:46"><operator pos:start="3057:24" pos:end="3057:24">(</operator><name pos:start="3057:25" pos:end="3057:28">insn</name> <operator pos:start="3057:30" pos:end="3057:30">&amp;</operator> <operator pos:start="3057:32" pos:end="3057:32">(</operator><literal type="number" pos:start="3057:33" pos:end="3057:33">1</literal> <operator pos:start="3057:35" pos:end="3057:36">&lt;&lt;</operator> <literal type="number" pos:start="3057:38" pos:end="3057:39">10</literal><operator pos:start="3057:40" pos:end="3057:40">)</operator><operator pos:start="3057:41" pos:end="3057:41">)</operator> <operator pos:start="3057:43" pos:end="3057:44">==</operator> <literal type="number" pos:start="3057:46" pos:end="3057:46">0</literal></expr>)</condition> <block pos:start="3057:49" pos:end="3111:13">{<block_content pos:start="3061:17" pos:end="3109:30">

                <comment type="block" pos:start="3059:17" pos:end="3059:34">/* VTBL, VTBX.  */</comment>

                <expr_stmt pos:start="3061:17" pos:end="3061:45"><expr pos:start="3061:17" pos:end="3061:44"><name pos:start="3061:17" pos:end="3061:17">n</name> <operator pos:start="3061:19" pos:end="3061:19">=</operator> <operator pos:start="3061:21" pos:end="3061:21">(</operator><operator pos:start="3061:22" pos:end="3061:22">(</operator><name pos:start="3061:23" pos:end="3061:26">insn</name> <operator pos:start="3061:28" pos:end="3061:29">&gt;&gt;</operator> <literal type="number" pos:start="3061:31" pos:end="3061:31">5</literal><operator pos:start="3061:32" pos:end="3061:32">)</operator> <operator pos:start="3061:34" pos:end="3061:34">&amp;</operator> <literal type="number" pos:start="3061:36" pos:end="3061:39">0x18</literal><operator pos:start="3061:40" pos:end="3061:40">)</operator> <operator pos:start="3061:42" pos:end="3061:42">+</operator> <literal type="number" pos:start="3061:44" pos:end="3061:44">8</literal></expr>;</expr_stmt>

                <if_stmt pos:start="3063:17" pos:end="3073:17"><if pos:start="3063:17" pos:end="3067:17">if <condition pos:start="3063:20" pos:end="3063:36">(<expr pos:start="3063:21" pos:end="3063:35"><name pos:start="3063:21" pos:end="3063:24">insn</name> <operator pos:start="3063:26" pos:end="3063:26">&amp;</operator> <operator pos:start="3063:28" pos:end="3063:28">(</operator><literal type="number" pos:start="3063:29" pos:end="3063:29">1</literal> <operator pos:start="3063:31" pos:end="3063:32">&lt;&lt;</operator> <literal type="number" pos:start="3063:34" pos:end="3063:34">6</literal><operator pos:start="3063:35" pos:end="3063:35">)</operator></expr>)</condition> <block pos:start="3063:38" pos:end="3067:17">{<block_content pos:start="3065:21" pos:end="3065:47">

                    <expr_stmt pos:start="3065:21" pos:end="3065:47"><expr pos:start="3065:21" pos:end="3065:46"><name pos:start="3065:21" pos:end="3065:23">tmp</name> <operator pos:start="3065:25" pos:end="3065:25">=</operator> <call pos:start="3065:27" pos:end="3065:46"><name pos:start="3065:27" pos:end="3065:39">neon_load_reg</name><argument_list pos:start="3065:40" pos:end="3065:46">(<argument pos:start="3065:41" pos:end="3065:42"><expr pos:start="3065:41" pos:end="3065:42"><name pos:start="3065:41" pos:end="3065:42">rd</name></expr></argument>, <argument pos:start="3065:45" pos:end="3065:45"><expr pos:start="3065:45" pos:end="3065:45"><literal type="number" pos:start="3065:45" pos:end="3065:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="3067:19" pos:end="3073:17">else <block pos:start="3067:24" pos:end="3073:17">{<block_content pos:start="3069:21" pos:end="3071:45">

                    <expr_stmt pos:start="3069:21" pos:end="3069:36"><expr pos:start="3069:21" pos:end="3069:35"><name pos:start="3069:21" pos:end="3069:23">tmp</name> <operator pos:start="3069:25" pos:end="3069:25">=</operator> <call pos:start="3069:27" pos:end="3069:35"><name pos:start="3069:27" pos:end="3069:33">new_tmp</name><argument_list pos:start="3069:34" pos:end="3069:35">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3071:21" pos:end="3071:45"><expr pos:start="3071:21" pos:end="3071:44"><call pos:start="3071:21" pos:end="3071:44"><name pos:start="3071:21" pos:end="3071:36">tcg_gen_movi_i32</name><argument_list pos:start="3071:37" pos:end="3071:44">(<argument pos:start="3071:38" pos:end="3071:40"><expr pos:start="3071:38" pos:end="3071:40"><name pos:start="3071:38" pos:end="3071:40">tmp</name></expr></argument>, <argument pos:start="3071:43" pos:end="3071:43"><expr pos:start="3071:43" pos:end="3071:43"><literal type="number" pos:start="3071:43" pos:end="3071:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="3075:17" pos:end="3075:44"><expr pos:start="3075:17" pos:end="3075:43"><name pos:start="3075:17" pos:end="3075:20">tmp2</name> <operator pos:start="3075:22" pos:end="3075:22">=</operator> <call pos:start="3075:24" pos:end="3075:43"><name pos:start="3075:24" pos:end="3075:36">neon_load_reg</name><argument_list pos:start="3075:37" pos:end="3075:43">(<argument pos:start="3075:38" pos:end="3075:39"><expr pos:start="3075:38" pos:end="3075:39"><name pos:start="3075:38" pos:end="3075:39">rm</name></expr></argument>, <argument pos:start="3075:42" pos:end="3075:42"><expr pos:start="3075:42" pos:end="3075:42"><literal type="number" pos:start="3075:42" pos:end="3075:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3077:17" pos:end="3077:41"><expr pos:start="3077:17" pos:end="3077:40"><name pos:start="3077:17" pos:end="3077:20">tmp4</name> <operator pos:start="3077:22" pos:end="3077:22">=</operator> <call pos:start="3077:24" pos:end="3077:40"><name pos:start="3077:24" pos:end="3077:36">tcg_const_i32</name><argument_list pos:start="3077:37" pos:end="3077:40">(<argument pos:start="3077:38" pos:end="3077:39"><expr pos:start="3077:38" pos:end="3077:39"><name pos:start="3077:38" pos:end="3077:39">rn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3079:17" pos:end="3079:40"><expr pos:start="3079:17" pos:end="3079:39"><name pos:start="3079:17" pos:end="3079:20">tmp5</name> <operator pos:start="3079:22" pos:end="3079:22">=</operator> <call pos:start="3079:24" pos:end="3079:39"><name pos:start="3079:24" pos:end="3079:36">tcg_const_i32</name><argument_list pos:start="3079:37" pos:end="3079:39">(<argument pos:start="3079:38" pos:end="3079:38"><expr pos:start="3079:38" pos:end="3079:38"><name pos:start="3079:38" pos:end="3079:38">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3081:17" pos:end="3081:65"><expr pos:start="3081:17" pos:end="3081:64"><call pos:start="3081:17" pos:end="3081:64"><name pos:start="3081:17" pos:end="3081:35">gen_helper_neon_tbl</name><argument_list pos:start="3081:36" pos:end="3081:64">(<argument pos:start="3081:37" pos:end="3081:40"><expr pos:start="3081:37" pos:end="3081:40"><name pos:start="3081:37" pos:end="3081:40">tmp2</name></expr></argument>, <argument pos:start="3081:43" pos:end="3081:46"><expr pos:start="3081:43" pos:end="3081:46"><name pos:start="3081:43" pos:end="3081:46">tmp2</name></expr></argument>, <argument pos:start="3081:49" pos:end="3081:51"><expr pos:start="3081:49" pos:end="3081:51"><name pos:start="3081:49" pos:end="3081:51">tmp</name></expr></argument>, <argument pos:start="3081:54" pos:end="3081:57"><expr pos:start="3081:54" pos:end="3081:57"><name pos:start="3081:54" pos:end="3081:57">tmp4</name></expr></argument>, <argument pos:start="3081:60" pos:end="3081:63"><expr pos:start="3081:60" pos:end="3081:63"><name pos:start="3081:60" pos:end="3081:63">tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3083:17" pos:end="3083:30"><expr pos:start="3083:17" pos:end="3083:29"><call pos:start="3083:17" pos:end="3083:29"><name pos:start="3083:17" pos:end="3083:24">dead_tmp</name><argument_list pos:start="3083:25" pos:end="3083:29">(<argument pos:start="3083:26" pos:end="3083:28"><expr pos:start="3083:26" pos:end="3083:28"><name pos:start="3083:26" pos:end="3083:28">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="3085:17" pos:end="3095:17"><if pos:start="3085:17" pos:end="3089:17">if <condition pos:start="3085:20" pos:end="3085:36">(<expr pos:start="3085:21" pos:end="3085:35"><name pos:start="3085:21" pos:end="3085:24">insn</name> <operator pos:start="3085:26" pos:end="3085:26">&amp;</operator> <operator pos:start="3085:28" pos:end="3085:28">(</operator><literal type="number" pos:start="3085:29" pos:end="3085:29">1</literal> <operator pos:start="3085:31" pos:end="3085:32">&lt;&lt;</operator> <literal type="number" pos:start="3085:34" pos:end="3085:34">6</literal><operator pos:start="3085:35" pos:end="3085:35">)</operator></expr>)</condition> <block pos:start="3085:38" pos:end="3089:17">{<block_content pos:start="3087:21" pos:end="3087:47">

                    <expr_stmt pos:start="3087:21" pos:end="3087:47"><expr pos:start="3087:21" pos:end="3087:46"><name pos:start="3087:21" pos:end="3087:23">tmp</name> <operator pos:start="3087:25" pos:end="3087:25">=</operator> <call pos:start="3087:27" pos:end="3087:46"><name pos:start="3087:27" pos:end="3087:39">neon_load_reg</name><argument_list pos:start="3087:40" pos:end="3087:46">(<argument pos:start="3087:41" pos:end="3087:42"><expr pos:start="3087:41" pos:end="3087:42"><name pos:start="3087:41" pos:end="3087:42">rd</name></expr></argument>, <argument pos:start="3087:45" pos:end="3087:45"><expr pos:start="3087:45" pos:end="3087:45"><literal type="number" pos:start="3087:45" pos:end="3087:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="3089:19" pos:end="3095:17">else <block pos:start="3089:24" pos:end="3095:17">{<block_content pos:start="3091:21" pos:end="3093:45">

                    <expr_stmt pos:start="3091:21" pos:end="3091:36"><expr pos:start="3091:21" pos:end="3091:35"><name pos:start="3091:21" pos:end="3091:23">tmp</name> <operator pos:start="3091:25" pos:end="3091:25">=</operator> <call pos:start="3091:27" pos:end="3091:35"><name pos:start="3091:27" pos:end="3091:33">new_tmp</name><argument_list pos:start="3091:34" pos:end="3091:35">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3093:21" pos:end="3093:45"><expr pos:start="3093:21" pos:end="3093:44"><call pos:start="3093:21" pos:end="3093:44"><name pos:start="3093:21" pos:end="3093:36">tcg_gen_movi_i32</name><argument_list pos:start="3093:37" pos:end="3093:44">(<argument pos:start="3093:38" pos:end="3093:40"><expr pos:start="3093:38" pos:end="3093:40"><name pos:start="3093:38" pos:end="3093:40">tmp</name></expr></argument>, <argument pos:start="3093:43" pos:end="3093:43"><expr pos:start="3093:43" pos:end="3093:43"><literal type="number" pos:start="3093:43" pos:end="3093:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="3097:17" pos:end="3097:44"><expr pos:start="3097:17" pos:end="3097:43"><name pos:start="3097:17" pos:end="3097:20">tmp3</name> <operator pos:start="3097:22" pos:end="3097:22">=</operator> <call pos:start="3097:24" pos:end="3097:43"><name pos:start="3097:24" pos:end="3097:36">neon_load_reg</name><argument_list pos:start="3097:37" pos:end="3097:43">(<argument pos:start="3097:38" pos:end="3097:39"><expr pos:start="3097:38" pos:end="3097:39"><name pos:start="3097:38" pos:end="3097:39">rm</name></expr></argument>, <argument pos:start="3097:42" pos:end="3097:42"><expr pos:start="3097:42" pos:end="3097:42"><literal type="number" pos:start="3097:42" pos:end="3097:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3099:17" pos:end="3099:65"><expr pos:start="3099:17" pos:end="3099:64"><call pos:start="3099:17" pos:end="3099:64"><name pos:start="3099:17" pos:end="3099:35">gen_helper_neon_tbl</name><argument_list pos:start="3099:36" pos:end="3099:64">(<argument pos:start="3099:37" pos:end="3099:40"><expr pos:start="3099:37" pos:end="3099:40"><name pos:start="3099:37" pos:end="3099:40">tmp3</name></expr></argument>, <argument pos:start="3099:43" pos:end="3099:46"><expr pos:start="3099:43" pos:end="3099:46"><name pos:start="3099:43" pos:end="3099:46">tmp3</name></expr></argument>, <argument pos:start="3099:49" pos:end="3099:51"><expr pos:start="3099:49" pos:end="3099:51"><name pos:start="3099:49" pos:end="3099:51">tmp</name></expr></argument>, <argument pos:start="3099:54" pos:end="3099:57"><expr pos:start="3099:54" pos:end="3099:57"><name pos:start="3099:54" pos:end="3099:57">tmp4</name></expr></argument>, <argument pos:start="3099:60" pos:end="3099:63"><expr pos:start="3099:60" pos:end="3099:63"><name pos:start="3099:60" pos:end="3099:63">tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3101:17" pos:end="3101:40"><expr pos:start="3101:17" pos:end="3101:39"><call pos:start="3101:17" pos:end="3101:39"><name pos:start="3101:17" pos:end="3101:33">tcg_temp_free_i32</name><argument_list pos:start="3101:34" pos:end="3101:39">(<argument pos:start="3101:35" pos:end="3101:38"><expr pos:start="3101:35" pos:end="3101:38"><name pos:start="3101:35" pos:end="3101:38">tmp5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3103:17" pos:end="3103:40"><expr pos:start="3103:17" pos:end="3103:39"><call pos:start="3103:17" pos:end="3103:39"><name pos:start="3103:17" pos:end="3103:33">tcg_temp_free_i32</name><argument_list pos:start="3103:34" pos:end="3103:39">(<argument pos:start="3103:35" pos:end="3103:38"><expr pos:start="3103:35" pos:end="3103:38"><name pos:start="3103:35" pos:end="3103:38">tmp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3105:17" pos:end="3105:44"><expr pos:start="3105:17" pos:end="3105:43"><call pos:start="3105:17" pos:end="3105:43"><name pos:start="3105:17" pos:end="3105:30">neon_store_reg</name><argument_list pos:start="3105:31" pos:end="3105:43">(<argument pos:start="3105:32" pos:end="3105:33"><expr pos:start="3105:32" pos:end="3105:33"><name pos:start="3105:32" pos:end="3105:33">rd</name></expr></argument>, <argument pos:start="3105:36" pos:end="3105:36"><expr pos:start="3105:36" pos:end="3105:36"><literal type="number" pos:start="3105:36" pos:end="3105:36">0</literal></expr></argument>, <argument pos:start="3105:39" pos:end="3105:42"><expr pos:start="3105:39" pos:end="3105:42"><name pos:start="3105:39" pos:end="3105:42">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3107:17" pos:end="3107:44"><expr pos:start="3107:17" pos:end="3107:43"><call pos:start="3107:17" pos:end="3107:43"><name pos:start="3107:17" pos:end="3107:30">neon_store_reg</name><argument_list pos:start="3107:31" pos:end="3107:43">(<argument pos:start="3107:32" pos:end="3107:33"><expr pos:start="3107:32" pos:end="3107:33"><name pos:start="3107:32" pos:end="3107:33">rd</name></expr></argument>, <argument pos:start="3107:36" pos:end="3107:36"><expr pos:start="3107:36" pos:end="3107:36"><literal type="number" pos:start="3107:36" pos:end="3107:36">1</literal></expr></argument>, <argument pos:start="3107:39" pos:end="3107:42"><expr pos:start="3107:39" pos:end="3107:42"><name pos:start="3107:39" pos:end="3107:42">tmp3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="3109:17" pos:end="3109:30"><expr pos:start="3109:17" pos:end="3109:29"><call pos:start="3109:17" pos:end="3109:29"><name pos:start="3109:17" pos:end="3109:24">dead_tmp</name><argument_list pos:start="3109:25" pos:end="3109:29">(<argument pos:start="3109:26" pos:end="3109:28"><expr pos:start="3109:26" pos:end="3109:28"><name pos:start="3109:26" pos:end="3109:28">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="3111:15" pos:end="3153:13">else if <condition pos:start="3111:23" pos:end="3111:43">(<expr pos:start="3111:24" pos:end="3111:42"><operator pos:start="3111:24" pos:end="3111:24">(</operator><name pos:start="3111:25" pos:end="3111:28">insn</name> <operator pos:start="3111:30" pos:end="3111:30">&amp;</operator> <literal type="number" pos:start="3111:32" pos:end="3111:36">0x380</literal><operator pos:start="3111:37" pos:end="3111:37">)</operator> <operator pos:start="3111:39" pos:end="3111:40">==</operator> <literal type="number" pos:start="3111:42" pos:end="3111:42">0</literal></expr>)</condition> <block pos:start="3111:45" pos:end="3153:13">{<block_content pos:start="3115:17" pos:end="3151:30">

                <comment type="block" pos:start="3113:17" pos:end="3113:26">/* VDUP */</comment>

                <if_stmt pos:start="3115:17" pos:end="3123:17"><if pos:start="3115:17" pos:end="3119:17">if <condition pos:start="3115:20" pos:end="3115:37">(<expr pos:start="3115:21" pos:end="3115:36"><name pos:start="3115:21" pos:end="3115:24">insn</name> <operator pos:start="3115:26" pos:end="3115:26">&amp;</operator> <operator pos:start="3115:28" pos:end="3115:28">(</operator><literal type="number" pos:start="3115:29" pos:end="3115:29">1</literal> <operator pos:start="3115:31" pos:end="3115:32">&lt;&lt;</operator> <literal type="number" pos:start="3115:34" pos:end="3115:35">19</literal><operator pos:start="3115:36" pos:end="3115:36">)</operator></expr>)</condition> <block pos:start="3115:39" pos:end="3119:17">{<block_content pos:start="3117:21" pos:end="3117:47">

                    <expr_stmt pos:start="3117:21" pos:end="3117:47"><expr pos:start="3117:21" pos:end="3117:46"><name pos:start="3117:21" pos:end="3117:23">tmp</name> <operator pos:start="3117:25" pos:end="3117:25">=</operator> <call pos:start="3117:27" pos:end="3117:46"><name pos:start="3117:27" pos:end="3117:39">neon_load_reg</name><argument_list pos:start="3117:40" pos:end="3117:46">(<argument pos:start="3117:41" pos:end="3117:42"><expr pos:start="3117:41" pos:end="3117:42"><name pos:start="3117:41" pos:end="3117:42">rm</name></expr></argument>, <argument pos:start="3117:45" pos:end="3117:45"><expr pos:start="3117:45" pos:end="3117:45"><literal type="number" pos:start="3117:45" pos:end="3117:45">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="3119:19" pos:end="3123:17">else <block pos:start="3119:24" pos:end="3123:17">{<block_content pos:start="3121:21" pos:end="3121:47">

                    <expr_stmt pos:start="3121:21" pos:end="3121:47"><expr pos:start="3121:21" pos:end="3121:46"><name pos:start="3121:21" pos:end="3121:23">tmp</name> <operator pos:start="3121:25" pos:end="3121:25">=</operator> <call pos:start="3121:27" pos:end="3121:46"><name pos:start="3121:27" pos:end="3121:39">neon_load_reg</name><argument_list pos:start="3121:40" pos:end="3121:46">(<argument pos:start="3121:41" pos:end="3121:42"><expr pos:start="3121:41" pos:end="3121:42"><name pos:start="3121:41" pos:end="3121:42">rm</name></expr></argument>, <argument pos:start="3121:45" pos:end="3121:45"><expr pos:start="3121:45" pos:end="3121:45"><literal type="number" pos:start="3121:45" pos:end="3121:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="3125:17" pos:end="3139:17"><if pos:start="3125:17" pos:end="3129:17">if <condition pos:start="3125:20" pos:end="3125:37">(<expr pos:start="3125:21" pos:end="3125:36"><name pos:start="3125:21" pos:end="3125:24">insn</name> <operator pos:start="3125:26" pos:end="3125:26">&amp;</operator> <operator pos:start="3125:28" pos:end="3125:28">(</operator><literal type="number" pos:start="3125:29" pos:end="3125:29">1</literal> <operator pos:start="3125:31" pos:end="3125:32">&lt;&lt;</operator> <literal type="number" pos:start="3125:34" pos:end="3125:35">16</literal><operator pos:start="3125:36" pos:end="3125:36">)</operator></expr>)</condition> <block pos:start="3125:39" pos:end="3129:17">{<block_content pos:start="3127:21" pos:end="3127:65">

                    <expr_stmt pos:start="3127:21" pos:end="3127:65"><expr pos:start="3127:21" pos:end="3127:64"><call pos:start="3127:21" pos:end="3127:64"><name pos:start="3127:21" pos:end="3127:35">gen_neon_dup_u8</name><argument_list pos:start="3127:36" pos:end="3127:64">(<argument pos:start="3127:37" pos:end="3127:39"><expr pos:start="3127:37" pos:end="3127:39"><name pos:start="3127:37" pos:end="3127:39">tmp</name></expr></argument>, <argument pos:start="3127:42" pos:end="3127:63"><expr pos:start="3127:42" pos:end="3127:63"><operator pos:start="3127:42" pos:end="3127:42">(</operator><operator pos:start="3127:43" pos:end="3127:43">(</operator><name pos:start="3127:44" pos:end="3127:47">insn</name> <operator pos:start="3127:49" pos:end="3127:50">&gt;&gt;</operator> <literal type="number" pos:start="3127:52" pos:end="3127:53">17</literal><operator pos:start="3127:54" pos:end="3127:54">)</operator> <operator pos:start="3127:56" pos:end="3127:56">&amp;</operator> <literal type="number" pos:start="3127:58" pos:end="3127:58">3</literal><operator pos:start="3127:59" pos:end="3127:59">)</operator> <operator pos:start="3127:61" pos:end="3127:61">*</operator> <literal type="number" pos:start="3127:63" pos:end="3127:63">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <if type="elseif" pos:start="3129:19" pos:end="3139:17">else if <condition pos:start="3129:27" pos:end="3129:44">(<expr pos:start="3129:28" pos:end="3129:43"><name pos:start="3129:28" pos:end="3129:31">insn</name> <operator pos:start="3129:33" pos:end="3129:33">&amp;</operator> <operator pos:start="3129:35" pos:end="3129:35">(</operator><literal type="number" pos:start="3129:36" pos:end="3129:36">1</literal> <operator pos:start="3129:38" pos:end="3129:39">&lt;&lt;</operator> <literal type="number" pos:start="3129:41" pos:end="3129:42">17</literal><operator pos:start="3129:43" pos:end="3129:43">)</operator></expr>)</condition> <block pos:start="3129:46" pos:end="3139:17">{<block_content pos:start="3131:21" pos:end="3137:48">

                    <if_stmt pos:start="3131:21" pos:end="3137:48"><if pos:start="3131:21" pos:end="3133:49">if <condition pos:start="3131:24" pos:end="3131:41">(<expr pos:start="3131:25" pos:end="3131:40"><operator pos:start="3131:25" pos:end="3131:25">(</operator><name pos:start="3131:26" pos:end="3131:29">insn</name> <operator pos:start="3131:31" pos:end="3131:32">&gt;&gt;</operator> <literal type="number" pos:start="3131:34" pos:end="3131:35">18</literal><operator pos:start="3131:36" pos:end="3131:36">)</operator> <operator pos:start="3131:38" pos:end="3131:38">&amp;</operator> <literal type="number" pos:start="3131:40" pos:end="3131:40">1</literal></expr>)</condition><block type="pseudo" pos:start="3133:25" pos:end="3133:49"><block_content pos:start="3133:25" pos:end="3133:49">

                        <expr_stmt pos:start="3133:25" pos:end="3133:49"><expr pos:start="3133:25" pos:end="3133:48"><call pos:start="3133:25" pos:end="3133:48"><name pos:start="3133:25" pos:end="3133:43">gen_neon_dup_high16</name><argument_list pos:start="3133:44" pos:end="3133:48">(<argument pos:start="3133:45" pos:end="3133:47"><expr pos:start="3133:45" pos:end="3133:47"><name pos:start="3133:45" pos:end="3133:47">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                    <else pos:start="3135:21" pos:end="3137:48">else<block type="pseudo" pos:start="3137:25" pos:end="3137:48"><block_content pos:start="3137:25" pos:end="3137:48">

                        <expr_stmt pos:start="3137:25" pos:end="3137:48"><expr pos:start="3137:25" pos:end="3137:47"><call pos:start="3137:25" pos:end="3137:47"><name pos:start="3137:25" pos:end="3137:42">gen_neon_dup_low16</name><argument_list pos:start="3137:43" pos:end="3137:47">(<argument pos:start="3137:44" pos:end="3137:46"><expr pos:start="3137:44" pos:end="3137:46"><name pos:start="3137:44" pos:end="3137:46">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if></if_stmt>

                <for pos:start="3141:17" pos:end="3149:17">for <control pos:start="3141:21" pos:end="3141:58">(<init pos:start="3141:22" pos:end="3141:30"><expr pos:start="3141:22" pos:end="3141:29"><name pos:start="3141:22" pos:end="3141:25">pass</name> <operator pos:start="3141:27" pos:end="3141:27">=</operator> <literal type="number" pos:start="3141:29" pos:end="3141:29">0</literal></expr>;</init> <condition pos:start="3141:32" pos:end="3141:50"><expr pos:start="3141:32" pos:end="3141:49"><name pos:start="3141:32" pos:end="3141:35">pass</name> <operator pos:start="3141:37" pos:end="3141:37">&lt;</operator> <operator pos:start="3141:39" pos:end="3141:39">(</operator><ternary pos:start="3141:40" pos:end="3141:48"><condition pos:start="3141:40" pos:end="3141:42"><expr pos:start="3141:40" pos:end="3141:40"><name pos:start="3141:40" pos:end="3141:40">q</name></expr> ?</condition><then pos:start="3141:44" pos:end="3141:44"> <expr pos:start="3141:44" pos:end="3141:44"><literal type="number" pos:start="3141:44" pos:end="3141:44">4</literal></expr> </then><else pos:start="3141:46" pos:end="3141:48">: <expr pos:start="3141:48" pos:end="3141:48"><literal type="number" pos:start="3141:48" pos:end="3141:48">2</literal></expr></else></ternary><operator pos:start="3141:49" pos:end="3141:49">)</operator></expr>;</condition> <incr pos:start="3141:52" pos:end="3141:57"><expr pos:start="3141:52" pos:end="3141:57"><name pos:start="3141:52" pos:end="3141:55">pass</name><operator pos:start="3141:56" pos:end="3141:57">++</operator></expr></incr>)</control> <block pos:start="3141:60" pos:end="3149:17">{<block_content pos:start="3143:21" pos:end="3147:51">

                    <expr_stmt pos:start="3143:21" pos:end="3143:37"><expr pos:start="3143:21" pos:end="3143:36"><name pos:start="3143:21" pos:end="3143:24">tmp2</name> <operator pos:start="3143:26" pos:end="3143:26">=</operator> <call pos:start="3143:28" pos:end="3143:36"><name pos:start="3143:28" pos:end="3143:34">new_tmp</name><argument_list pos:start="3143:35" pos:end="3143:36">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3145:21" pos:end="3145:47"><expr pos:start="3145:21" pos:end="3145:46"><call pos:start="3145:21" pos:end="3145:46"><name pos:start="3145:21" pos:end="3145:35">tcg_gen_mov_i32</name><argument_list pos:start="3145:36" pos:end="3145:46">(<argument pos:start="3145:37" pos:end="3145:40"><expr pos:start="3145:37" pos:end="3145:40"><name pos:start="3145:37" pos:end="3145:40">tmp2</name></expr></argument>, <argument pos:start="3145:43" pos:end="3145:45"><expr pos:start="3145:43" pos:end="3145:45"><name pos:start="3145:43" pos:end="3145:45">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="3147:21" pos:end="3147:51"><expr pos:start="3147:21" pos:end="3147:50"><call pos:start="3147:21" pos:end="3147:50"><name pos:start="3147:21" pos:end="3147:34">neon_store_reg</name><argument_list pos:start="3147:35" pos:end="3147:50">(<argument pos:start="3147:36" pos:end="3147:37"><expr pos:start="3147:36" pos:end="3147:37"><name pos:start="3147:36" pos:end="3147:37">rd</name></expr></argument>, <argument pos:start="3147:40" pos:end="3147:43"><expr pos:start="3147:40" pos:end="3147:43"><name pos:start="3147:40" pos:end="3147:43">pass</name></expr></argument>, <argument pos:start="3147:46" pos:end="3147:49"><expr pos:start="3147:46" pos:end="3147:49"><name pos:start="3147:46" pos:end="3147:49">tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="3151:17" pos:end="3151:30"><expr pos:start="3151:17" pos:end="3151:29"><call pos:start="3151:17" pos:end="3151:29"><name pos:start="3151:17" pos:end="3151:24">dead_tmp</name><argument_list pos:start="3151:25" pos:end="3151:29">(<argument pos:start="3151:26" pos:end="3151:28"><expr pos:start="3151:26" pos:end="3151:28"><name pos:start="3151:26" pos:end="3151:28">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="3153:15" pos:end="3157:13">else <block pos:start="3153:20" pos:end="3157:13">{<block_content pos:start="3155:17" pos:end="3155:25">

                <return pos:start="3155:17" pos:end="3155:25">return <expr pos:start="3155:24" pos:end="3155:24"><literal type="number" pos:start="3155:24" pos:end="3155:24">1</literal></expr>;</return>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="3163:5" pos:end="3163:13">return <expr pos:start="3163:12" pos:end="3163:12"><literal type="number" pos:start="3163:12" pos:end="3163:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
