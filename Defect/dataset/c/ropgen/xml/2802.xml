<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2802.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:35">rgb15to32</name>)<parameter_list pos:start="1:37" pos:end="1:85">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">src</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">uint8_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">dst</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:84"><decl pos:start="1:72" pos:end="1:84"><type pos:start="1:72" pos:end="1:84"><name pos:start="1:72" pos:end="1:75">long</name></type> <name pos:start="1:77" pos:end="1:84">src_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:5">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:20"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:18">uint16_t</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">end</name></decl>;</decl_stmt>

<cpp:if pos:start="7:1" pos:end="7:24">#<cpp:directive pos:start="7:2" pos:end="7:3">if</cpp:directive> <expr pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:24">COMPILE_TEMPLATE_MMX</name></expr></cpp:if>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:20"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:18">uint16_t</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:26">mm_end</name></decl>;</decl_stmt>

<cpp:endif pos:start="11:1" pos:end="11:6">#<cpp:directive pos:start="11:2" pos:end="11:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:14">d</name> <init pos:start="13:16" pos:end="13:20">= <expr pos:start="13:18" pos:end="13:20"><name pos:start="13:18" pos:end="13:20">dst</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:46"><decl pos:start="15:5" pos:end="15:45"><type pos:start="15:5" pos:end="15:20"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:18">uint16_t</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:21">s</name> <init pos:start="15:23" pos:end="15:45">= <expr pos:start="15:25" pos:end="15:45"><operator pos:start="15:25" pos:end="15:25">(</operator><specifier pos:start="15:26" pos:end="15:30">const</specifier> <name pos:start="15:32" pos:end="15:39">uint16_t</name> <operator pos:start="15:41" pos:end="15:41">*</operator><operator pos:start="15:42" pos:end="15:42">)</operator><name pos:start="15:43" pos:end="15:45">src</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="17:5" pos:end="20:0"><expr pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:7">end</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <name pos:start="17:11" pos:end="17:11">s</name> <operator pos:start="17:13" pos:end="17:13">+</operator> <name pos:start="17:15" pos:end="17:22">src_size</name><operator pos:start="17:23" pos:end="17:23">/</operator><literal type="number" pos:start="17:24" pos:end="17:24">2</literal></expr>;</expr_stmt>

<cpp:if pos:start="19:1" pos:end="19:24">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:24">COMPILE_TEMPLATE_MMX</name></expr></cpp:if>

    <asm pos:start="21:5" pos:end="21:57">__asm__ <specifier pos:start="21:13" pos:end="21:20">volatile</specifier>(PREFETCH"    %0"::"m"(*s):"memory");</asm>

    <asm pos:start="23:5" pos:end="23:63">__asm__ <specifier pos:start="23:13" pos:end="23:20">volatile</specifier>("pxor    %%mm7,%%mm7    \n\t":::"memory");</asm>

    <asm pos:start="25:5" pos:end="25:63">__asm__ <specifier pos:start="25:13" pos:end="25:20">volatile</specifier>("pcmpeqd %%mm6,%%mm6    \n\t":::"memory");</asm>

    <expr_stmt pos:start="27:5" pos:end="27:21"><expr pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:10">mm_end</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <name pos:start="27:14" pos:end="27:16">end</name> <operator pos:start="27:18" pos:end="27:18">-</operator> <literal type="number" pos:start="27:20" pos:end="27:20">3</literal></expr>;</expr_stmt>

    <while pos:start="29:5" pos:end="65:5">while <condition pos:start="29:11" pos:end="29:22">(<expr pos:start="29:12" pos:end="29:21"><name pos:start="29:12" pos:end="29:12">s</name> <operator pos:start="29:14" pos:end="29:14">&lt;</operator> <name pos:start="29:16" pos:end="29:21">mm_end</name></expr>)</condition> <block pos:start="29:24" pos:end="65:5">{<block_content pos:start="31:9" pos:end="63:15">

        <asm pos:start="31:9" pos:end="59:23">__asm__ <specifier pos:start="31:17" pos:end="31:24">volatile</specifier>(

            PREFETCH"    32%1           \n\t"

            "movq          %1, %%mm0    \n\t"

            "movq          %1, %%mm1    \n\t"

            "movq          %1, %%mm2    \n\t"

            "pand          %2, %%mm0    \n\t"

            "pand          %3, %%mm1    \n\t"

            "pand          %4, %%mm2    \n\t"

            "psllq         $3, %%mm0    \n\t"

            "psrlq         $2, %%mm1    \n\t"

            "psrlq         $7, %%mm2    \n\t"

            PACK_RGB32

            :"=m"(*d)

            :"m"(*s),"m"(mask15b),"m"(mask15g),"m"(mask15r)

            :"memory");</asm>

        <expr_stmt pos:start="61:9" pos:end="61:16"><expr pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:9">d</name> <operator pos:start="61:11" pos:end="61:12">+=</operator> <literal type="number" pos:start="61:14" pos:end="61:15">16</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:15"><expr pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:9">s</name> <operator pos:start="63:11" pos:end="63:12">+=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">4</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <asm pos:start="67:5" pos:end="67:40">__asm__ <specifier pos:start="67:13" pos:end="67:20">volatile</specifier>(SFENCE:::"memory");</asm>

    <asm pos:start="69:5" pos:end="72:0">__asm__ <specifier pos:start="69:13" pos:end="69:20">volatile</specifier>(EMMS:::"memory");</asm>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

    <while pos:start="73:5" pos:end="101:5">while <condition pos:start="73:11" pos:end="73:19">(<expr pos:start="73:12" pos:end="73:18"><name pos:start="73:12" pos:end="73:12">s</name> <operator pos:start="73:14" pos:end="73:14">&lt;</operator> <name pos:start="73:16" pos:end="73:18">end</name></expr>)</condition> <block pos:start="73:21" pos:end="101:5">{<block_content pos:start="75:9" pos:end="100:0">

        <decl_stmt pos:start="75:9" pos:end="75:30"><decl pos:start="75:9" pos:end="75:29"><type pos:start="75:9" pos:end="75:25"><specifier pos:start="75:9" pos:end="75:16">register</specifier> <name pos:start="75:18" pos:end="75:25">uint16_t</name></type> <name pos:start="75:27" pos:end="75:29">bgr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="77:9" pos:end="80:0"><expr pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:11">bgr</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <operator pos:start="77:15" pos:end="77:15">*</operator><name pos:start="77:16" pos:end="77:16">s</name><operator pos:start="77:17" pos:end="77:18">++</operator></expr>;</expr_stmt>

<cpp:if pos:start="79:1" pos:end="79:18">#<cpp:directive pos:start="79:2" pos:end="79:3">if</cpp:directive> <expr pos:start="79:5" pos:end="79:18"><name pos:start="79:5" pos:end="79:18">HAVE_BIGENDIAN</name></expr></cpp:if>

        <expr_stmt pos:start="81:9" pos:end="81:19"><expr pos:start="81:9" pos:end="81:18"><operator pos:start="81:9" pos:end="81:9">*</operator><name pos:start="81:10" pos:end="81:10">d</name><operator pos:start="81:11" pos:end="81:12">++</operator> <operator pos:start="81:14" pos:end="81:14">=</operator> <literal type="number" pos:start="81:16" pos:end="81:18">255</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:31"><expr pos:start="83:9" pos:end="83:30"><operator pos:start="83:9" pos:end="83:9">*</operator><name pos:start="83:10" pos:end="83:10">d</name><operator pos:start="83:11" pos:end="83:12">++</operator> <operator pos:start="83:14" pos:end="83:14">=</operator> <operator pos:start="83:16" pos:end="83:16">(</operator><name pos:start="83:17" pos:end="83:19">bgr</name><operator pos:start="83:20" pos:end="83:20">&amp;</operator><literal type="number" pos:start="83:21" pos:end="83:26">0x7C00</literal><operator pos:start="83:27" pos:end="83:27">)</operator><operator pos:start="83:28" pos:end="83:29">&gt;&gt;</operator><literal type="number" pos:start="83:30" pos:end="83:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:30"><expr pos:start="85:9" pos:end="85:29"><operator pos:start="85:9" pos:end="85:9">*</operator><name pos:start="85:10" pos:end="85:10">d</name><operator pos:start="85:11" pos:end="85:12">++</operator> <operator pos:start="85:14" pos:end="85:14">=</operator> <operator pos:start="85:16" pos:end="85:16">(</operator><name pos:start="85:17" pos:end="85:19">bgr</name><operator pos:start="85:20" pos:end="85:20">&amp;</operator><literal type="number" pos:start="85:21" pos:end="85:25">0x3E0</literal><operator pos:start="85:26" pos:end="85:26">)</operator><operator pos:start="85:27" pos:end="85:28">&gt;&gt;</operator><literal type="number" pos:start="85:29" pos:end="85:29">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="90:0"><expr pos:start="87:9" pos:end="87:28"><operator pos:start="87:9" pos:end="87:9">*</operator><name pos:start="87:10" pos:end="87:10">d</name><operator pos:start="87:11" pos:end="87:12">++</operator> <operator pos:start="87:14" pos:end="87:14">=</operator> <operator pos:start="87:16" pos:end="87:16">(</operator><name pos:start="87:17" pos:end="87:19">bgr</name><operator pos:start="87:20" pos:end="87:20">&amp;</operator><literal type="number" pos:start="87:21" pos:end="87:24">0x1F</literal><operator pos:start="87:25" pos:end="87:25">)</operator><operator pos:start="87:26" pos:end="87:27">&lt;&lt;</operator><literal type="number" pos:start="87:28" pos:end="87:28">3</literal></expr>;</expr_stmt>

<cpp:else pos:start="89:1" pos:end="89:5">#<cpp:directive pos:start="89:2" pos:end="89:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="91:9" pos:end="91:29"><expr pos:start="91:9" pos:end="91:28"><operator pos:start="91:9" pos:end="91:9">*</operator><name pos:start="91:10" pos:end="91:10">d</name><operator pos:start="91:11" pos:end="91:12">++</operator> <operator pos:start="91:14" pos:end="91:14">=</operator> <operator pos:start="91:16" pos:end="91:16">(</operator><name pos:start="91:17" pos:end="91:19">bgr</name><operator pos:start="91:20" pos:end="91:20">&amp;</operator><literal type="number" pos:start="91:21" pos:end="91:24">0x1F</literal><operator pos:start="91:25" pos:end="91:25">)</operator><operator pos:start="91:26" pos:end="91:27">&lt;&lt;</operator><literal type="number" pos:start="91:28" pos:end="91:28">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:30"><expr pos:start="93:9" pos:end="93:29"><operator pos:start="93:9" pos:end="93:9">*</operator><name pos:start="93:10" pos:end="93:10">d</name><operator pos:start="93:11" pos:end="93:12">++</operator> <operator pos:start="93:14" pos:end="93:14">=</operator> <operator pos:start="93:16" pos:end="93:16">(</operator><name pos:start="93:17" pos:end="93:19">bgr</name><operator pos:start="93:20" pos:end="93:20">&amp;</operator><literal type="number" pos:start="93:21" pos:end="93:25">0x3E0</literal><operator pos:start="93:26" pos:end="93:26">)</operator><operator pos:start="93:27" pos:end="93:28">&gt;&gt;</operator><literal type="number" pos:start="93:29" pos:end="93:29">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:31"><expr pos:start="95:9" pos:end="95:30"><operator pos:start="95:9" pos:end="95:9">*</operator><name pos:start="95:10" pos:end="95:10">d</name><operator pos:start="95:11" pos:end="95:12">++</operator> <operator pos:start="95:14" pos:end="95:14">=</operator> <operator pos:start="95:16" pos:end="95:16">(</operator><name pos:start="95:17" pos:end="95:19">bgr</name><operator pos:start="95:20" pos:end="95:20">&amp;</operator><literal type="number" pos:start="95:21" pos:end="95:26">0x7C00</literal><operator pos:start="95:27" pos:end="95:27">)</operator><operator pos:start="95:28" pos:end="95:29">&gt;&gt;</operator><literal type="number" pos:start="95:30" pos:end="95:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="100:0"><expr pos:start="97:9" pos:end="97:18"><operator pos:start="97:9" pos:end="97:9">*</operator><name pos:start="97:10" pos:end="97:10">d</name><operator pos:start="97:11" pos:end="97:12">++</operator> <operator pos:start="97:14" pos:end="97:14">=</operator> <literal type="number" pos:start="97:16" pos:end="97:18">255</literal></expr>;</expr_stmt>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
