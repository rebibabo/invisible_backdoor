<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2689.c" pos:tabs="8"><function pos:start="1:1" pos:end="94:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint64_t</name></type> <name pos:start="1:10" pos:end="1:29">helper_msub64_q_ssov</name><parameter_list pos:start="1:30" pos:end="3:54">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:45">CPUTriCoreState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">env</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:63"><decl pos:start="1:53" pos:end="1:63"><type pos:start="1:53" pos:end="1:63"><name pos:start="1:53" pos:end="1:60">uint64_t</name></type> <name pos:start="1:62" pos:end="1:63">r1</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:76"><decl pos:start="1:66" pos:end="1:76"><type pos:start="1:66" pos:end="1:76"><name pos:start="1:66" pos:end="1:73">uint32_t</name></type> <name pos:start="1:75" pos:end="1:76">r2</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:41"><decl pos:start="3:31" pos:end="3:41"><type pos:start="3:31" pos:end="3:41"><name pos:start="3:31" pos:end="3:38">uint32_t</name></type> <name pos:start="3:40" pos:end="3:41">r3</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:53"><decl pos:start="3:44" pos:end="3:53"><type pos:start="3:44" pos:end="3:53"><name pos:start="3:44" pos:end="3:51">uint32_t</name></type> <name pos:start="3:53" pos:end="3:53">n</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="94:1">{<block_content pos:start="7:5" pos:end="92:28">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:14">t1</name> <init pos:start="7:16" pos:end="7:28">= <expr pos:start="7:18" pos:end="7:28"><operator pos:start="7:18" pos:end="7:18">(</operator><name pos:start="7:19" pos:end="7:25">int64_t</name><operator pos:start="7:26" pos:end="7:26">)</operator><name pos:start="7:27" pos:end="7:28">r1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:14">t2</name> <init pos:start="9:16" pos:end="9:38">= <expr pos:start="9:18" pos:end="9:38"><call pos:start="9:18" pos:end="9:38"><name pos:start="9:18" pos:end="9:27">sextract64</name><argument_list pos:start="9:28" pos:end="9:38">(<argument pos:start="9:29" pos:end="9:30"><expr pos:start="9:29" pos:end="9:30"><name pos:start="9:29" pos:end="9:30">r2</name></expr></argument>, <argument pos:start="9:33" pos:end="9:33"><expr pos:start="9:33" pos:end="9:33"><literal type="number" pos:start="9:33" pos:end="9:33">0</literal></expr></argument>, <argument pos:start="9:36" pos:end="9:37"><expr pos:start="9:36" pos:end="9:37"><literal type="number" pos:start="9:36" pos:end="9:37">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:14">t3</name> <init pos:start="11:16" pos:end="11:38">= <expr pos:start="11:18" pos:end="11:38"><call pos:start="11:18" pos:end="11:38"><name pos:start="11:18" pos:end="11:27">sextract64</name><argument_list pos:start="11:28" pos:end="11:38">(<argument pos:start="11:29" pos:end="11:30"><expr pos:start="11:29" pos:end="11:30"><name pos:start="11:29" pos:end="11:30">r3</name></expr></argument>, <argument pos:start="11:33" pos:end="11:33"><expr pos:start="11:33" pos:end="11:33"><literal type="number" pos:start="11:33" pos:end="11:33">0</literal></expr></argument>, <argument pos:start="11:36" pos:end="11:37"><expr pos:start="11:36" pos:end="11:37"><literal type="number" pos:start="11:36" pos:end="11:37">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:18">result</name></decl>, <decl pos:start="13:21" pos:end="13:23"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:21" pos:end="13:23">mul</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:15">ovf</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:25"><expr pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:7">mul</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <operator pos:start="19:11" pos:end="19:11">(</operator><name pos:start="19:12" pos:end="19:13">t2</name> <operator pos:start="19:15" pos:end="19:15">*</operator> <name pos:start="19:17" pos:end="19:18">t3</name><operator pos:start="19:19" pos:end="19:19">)</operator> <operator pos:start="19:21" pos:end="19:22">&lt;&lt;</operator> <name pos:start="19:24" pos:end="19:24">n</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:10">result</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:15">t1</name> <operator pos:start="21:17" pos:end="21:17">-</operator> <name pos:start="21:19" pos:end="21:21">mul</name></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:51"><expr pos:start="25:5" pos:end="25:50"><name pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:7">env</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:19">PSW_USB_AV</name></name> <operator pos:start="25:21" pos:end="25:21">=</operator> <operator pos:start="25:23" pos:end="25:23">(</operator><name pos:start="25:24" pos:end="25:29">result</name> <operator pos:start="25:31" pos:end="25:31">^</operator> <name pos:start="25:33" pos:end="25:38">result</name> <operator pos:start="25:40" pos:end="25:40">*</operator> <literal type="number" pos:start="25:42" pos:end="25:43">2u</literal><operator pos:start="25:44" pos:end="25:44">)</operator> <operator pos:start="25:46" pos:end="25:47">&gt;&gt;</operator> <literal type="number" pos:start="25:49" pos:end="25:50">32</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:40"><expr pos:start="27:5" pos:end="27:39"><name pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:7">env</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:20">PSW_USB_SAV</name></name> <operator pos:start="27:22" pos:end="27:23">|=</operator> <name pos:start="27:25" pos:end="27:39"><name pos:start="27:25" pos:end="27:27">env</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:39">PSW_USB_AV</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:37"><expr pos:start="31:5" pos:end="31:36"><name pos:start="31:5" pos:end="31:7">ovf</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <operator pos:start="31:11" pos:end="31:11">(</operator><name pos:start="31:12" pos:end="31:17">result</name> <operator pos:start="31:19" pos:end="31:19">^</operator> <name pos:start="31:21" pos:end="31:22">t1</name><operator pos:start="31:23" pos:end="31:23">)</operator> <operator pos:start="31:25" pos:end="31:25">&amp;</operator> <operator pos:start="31:27" pos:end="31:27">(</operator><name pos:start="31:28" pos:end="31:29">t1</name> <operator pos:start="31:31" pos:end="31:31">^</operator> <name pos:start="31:33" pos:end="31:35">mul</name><operator pos:start="31:36" pos:end="31:36">)</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="33:5" pos:end="37:44">/* we do the saturation by hand, since we produce an overflow on the host

       if the mul before was (0x80000000 * 0x80000000) &lt;&lt; 1). If this is the

       case, we flip the saturated value. */</comment>

    <if_stmt pos:start="39:5" pos:end="88:5"><if pos:start="39:5" pos:end="88:5">if <condition pos:start="39:8" pos:end="39:36">(<expr pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:11">mul</name> <operator pos:start="39:13" pos:end="39:14">==</operator> <literal type="number" pos:start="39:16" pos:end="39:35">0x8000000000000000LL</literal></expr>)</condition> <block pos:start="39:38" pos:end="88:5">{<block_content pos:start="41:9" pos:end="86:9">

        <if_stmt pos:start="41:9" pos:end="62:9"><if pos:start="41:9" pos:end="62:9">if <condition pos:start="41:12" pos:end="41:21">(<expr pos:start="41:13" pos:end="41:20"><name pos:start="41:13" pos:end="41:15">ovf</name> <operator pos:start="41:17" pos:end="41:18">&gt;=</operator> <literal type="number" pos:start="41:20" pos:end="41:20">0</literal></expr>)</condition> <block pos:start="41:23" pos:end="62:9">{<block_content pos:start="43:13" pos:end="58:13">

            <expr_stmt pos:start="43:13" pos:end="43:39"><expr pos:start="43:13" pos:end="43:38"><name pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:15">env</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:26">PSW_USB_V</name></name> <operator pos:start="43:28" pos:end="43:28">=</operator> <operator pos:start="43:30" pos:end="43:30">(</operator><literal type="number" pos:start="43:31" pos:end="43:31">1</literal> <operator pos:start="43:33" pos:end="43:34">&lt;&lt;</operator> <literal type="number" pos:start="43:36" pos:end="43:37">31</literal><operator pos:start="43:38" pos:end="43:38">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:40"><expr pos:start="45:13" pos:end="45:39"><name pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:15">env</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:27">PSW_USB_SV</name></name> <operator pos:start="45:29" pos:end="45:29">=</operator> <operator pos:start="45:31" pos:end="45:31">(</operator><literal type="number" pos:start="45:32" pos:end="45:32">1</literal> <operator pos:start="45:34" pos:end="45:35">&lt;&lt;</operator> <literal type="number" pos:start="45:37" pos:end="45:38">31</literal><operator pos:start="45:39" pos:end="45:39">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="47:13" pos:end="47:35">/* ext_ret &gt; MAX_INT */</comment>

            <if_stmt pos:start="49:13" pos:end="58:13"><if pos:start="49:13" pos:end="58:13">if <condition pos:start="49:16" pos:end="49:25">(<expr pos:start="49:17" pos:end="49:24"><name pos:start="49:17" pos:end="49:19">mul</name> <operator pos:start="49:21" pos:end="49:22">&gt;=</operator> <literal type="number" pos:start="49:24" pos:end="49:24">0</literal></expr>)</condition> <block pos:start="49:27" pos:end="58:13">{<block_content pos:start="51:17" pos:end="56:34">

                <expr_stmt pos:start="51:17" pos:end="51:35"><expr pos:start="51:17" pos:end="51:34"><name pos:start="51:17" pos:end="51:22">result</name> <operator pos:start="51:24" pos:end="51:24">=</operator> <name pos:start="51:26" pos:end="51:34">INT64_MAX</name></expr>;</expr_stmt>

            <comment type="block" pos:start="53:13" pos:end="53:35">/* ext_ret &lt; MIN_INT */</comment>


               <expr_stmt pos:start="56:16" pos:end="56:34"><expr pos:start="56:16" pos:end="56:33"><name pos:start="56:16" pos:end="56:21">result</name> <operator pos:start="56:23" pos:end="56:23">=</operator> <name pos:start="56:25" pos:end="56:33">INT64_MIN</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



        </block_content>}</block></if></if_stmt>


        <if_stmt pos:start="65:9" pos:end="86:9"><if pos:start="65:9" pos:end="86:9">if <condition pos:start="65:12" pos:end="65:20">(<expr pos:start="65:13" pos:end="65:19"><name pos:start="65:13" pos:end="65:15">ovf</name> <operator pos:start="65:17" pos:end="65:17">&lt;</operator> <literal type="number" pos:start="65:19" pos:end="65:19">0</literal></expr>)</condition> <block pos:start="65:22" pos:end="86:9">{<block_content pos:start="67:13" pos:end="82:13">

            <expr_stmt pos:start="67:13" pos:end="67:39"><expr pos:start="67:13" pos:end="67:38"><name pos:start="67:13" pos:end="67:26"><name pos:start="67:13" pos:end="67:15">env</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:26">PSW_USB_V</name></name> <operator pos:start="67:28" pos:end="67:28">=</operator> <operator pos:start="67:30" pos:end="67:30">(</operator><literal type="number" pos:start="67:31" pos:end="67:31">1</literal> <operator pos:start="67:33" pos:end="67:34">&lt;&lt;</operator> <literal type="number" pos:start="67:36" pos:end="67:37">31</literal><operator pos:start="67:38" pos:end="67:38">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:40"><expr pos:start="69:13" pos:end="69:39"><name pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:15">env</name><operator pos:start="69:16" pos:end="69:17">-&gt;</operator><name pos:start="69:18" pos:end="69:27">PSW_USB_SV</name></name> <operator pos:start="69:29" pos:end="69:29">=</operator> <operator pos:start="69:31" pos:end="69:31">(</operator><literal type="number" pos:start="69:32" pos:end="69:32">1</literal> <operator pos:start="69:34" pos:end="69:35">&lt;&lt;</operator> <literal type="number" pos:start="69:37" pos:end="69:38">31</literal><operator pos:start="69:39" pos:end="69:39">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="71:13" pos:end="71:35">/* ext_ret &gt; MAX_INT */</comment>

            <if_stmt pos:start="73:13" pos:end="82:13"><if pos:start="73:13" pos:end="82:13">if <condition pos:start="73:16" pos:end="73:24">(<expr pos:start="73:17" pos:end="73:23"><name pos:start="73:17" pos:end="73:19">mul</name> <operator pos:start="73:21" pos:end="73:21">&lt;</operator> <literal type="number" pos:start="73:23" pos:end="73:23">0</literal></expr>)</condition> <block pos:start="73:26" pos:end="82:13">{<block_content pos:start="75:17" pos:end="80:34">

                <expr_stmt pos:start="75:17" pos:end="75:35"><expr pos:start="75:17" pos:end="75:34"><name pos:start="75:17" pos:end="75:22">result</name> <operator pos:start="75:24" pos:end="75:24">=</operator> <name pos:start="75:26" pos:end="75:34">INT64_MAX</name></expr>;</expr_stmt>

            <comment type="block" pos:start="77:13" pos:end="77:35">/* ext_ret &lt; MIN_INT */</comment>


               <expr_stmt pos:start="80:16" pos:end="80:34"><expr pos:start="80:16" pos:end="80:33"><name pos:start="80:16" pos:end="80:21">result</name> <operator pos:start="80:23" pos:end="80:23">=</operator> <name pos:start="80:25" pos:end="80:33">INT64_MIN</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="92:5" pos:end="92:28">return <expr pos:start="92:12" pos:end="92:27"><operator pos:start="92:12" pos:end="92:12">(</operator><name pos:start="92:13" pos:end="92:20">uint64_t</name><operator pos:start="92:21" pos:end="92:21">)</operator><name pos:start="92:22" pos:end="92:27">result</name></expr>;</return>

</block_content>}</block></function></unit>
