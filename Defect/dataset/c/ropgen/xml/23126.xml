<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23126.c" pos:tabs="8"><function pos:start="1:1" pos:end="80:15"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:48">bdrv_co_do_pwrite_zeroes</name><parameter_list pos:start="1:49" pos:end="2:54">(<parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:65">BlockDriverState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">bs</name></decl></parameter>,
    <parameter pos:start="2:5" pos:end="2:18"><decl pos:start="2:5" pos:end="2:18"><type pos:start="2:5" pos:end="2:18"><name pos:start="2:5" pos:end="2:11">int64_t</name></type> <name pos:start="2:13" pos:end="2:18">offset</name></decl></parameter>, <parameter pos:start="2:21" pos:end="2:29"><decl pos:start="2:21" pos:end="2:29"><type pos:start="2:21" pos:end="2:29"><name pos:start="2:21" pos:end="2:23">int</name></type> <name pos:start="2:25" pos:end="2:29">bytes</name></decl></parameter>, <parameter pos:start="2:32" pos:end="2:53"><decl pos:start="2:32" pos:end="2:53"><type pos:start="2:32" pos:end="2:53"><name pos:start="2:32" pos:end="2:47">BdrvRequestFlags</name></type> <name pos:start="2:49" pos:end="2:53">flags</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="80:15">{<block_content pos:start="4:5" pos:end="80:15">
    <decl_stmt pos:start="4:5" pos:end="4:31"><decl pos:start="4:5" pos:end="4:30"><type pos:start="4:5" pos:end="4:17"><name pos:start="4:5" pos:end="4:15">BlockDriver</name> <modifier pos:start="4:17" pos:end="4:17">*</modifier></type><name pos:start="4:18" pos:end="4:20">drv</name> <init pos:start="4:22" pos:end="4:30">= <expr pos:start="4:24" pos:end="4:30"><name pos:start="4:24" pos:end="4:30"><name pos:start="4:24" pos:end="4:25">bs</name><operator pos:start="4:26" pos:end="4:27">-&gt;</operator><name pos:start="4:28" pos:end="4:30">drv</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16">QEMUIOVector</name></type> <name pos:start="5:18" pos:end="5:21">qiov</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:27"><decl pos:start="6:5" pos:end="6:26"><type pos:start="6:5" pos:end="6:16"><name pos:start="6:5" pos:end="6:16"><name pos:start="6:5" pos:end="6:10">struct</name> <name pos:start="6:12" pos:end="6:16">iovec</name></name></type> <name pos:start="6:18" pos:end="6:20">iov</name> <init pos:start="6:22" pos:end="6:26">= <expr pos:start="6:24" pos:end="6:26"><block pos:start="6:24" pos:end="6:26">{<expr pos:start="6:25" pos:end="6:25"><literal type="number" pos:start="6:25" pos:end="6:25">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:28"><decl pos:start="8:5" pos:end="8:27"><type pos:start="8:5" pos:end="8:8"><name pos:start="8:5" pos:end="8:8">bool</name></type> <name pos:start="8:10" pos:end="8:19">need_flush</name> <init pos:start="8:21" pos:end="8:27">= <expr pos:start="8:23" pos:end="8:27"><name pos:start="8:23" pos:end="8:27">false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">head</name> <init pos:start="9:14" pos:end="9:16">= <expr pos:start="9:16" pos:end="9:16"><literal type="number" pos:start="9:16" pos:end="9:16">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:17"><decl pos:start="10:5" pos:end="10:16"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:12">tail</name> <init pos:start="10:14" pos:end="10:16">= <expr pos:start="10:16" pos:end="10:16"><literal type="number" pos:start="10:16" pos:end="10:16">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:75"><decl pos:start="11:5" pos:end="11:74"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:24">max_write_zeroes</name> <init pos:start="11:26" pos:end="11:74">= <expr pos:start="11:28" pos:end="11:74"><call pos:start="11:28" pos:end="11:74"><name pos:start="11:28" pos:end="11:39">MIN_NON_ZERO</name><argument_list pos:start="11:40" pos:end="11:74">(<argument pos:start="11:41" pos:end="11:64"><expr pos:start="11:41" pos:end="11:64"><name pos:start="11:41" pos:end="11:64"><name pos:start="11:41" pos:end="11:42">bs</name><operator pos:start="11:43" pos:end="11:44">-&gt;</operator><name pos:start="11:45" pos:end="11:46">bl</name><operator pos:start="11:47" pos:end="11:47">.</operator><name pos:start="11:48" pos:end="11:64">max_pwrite_zeroes</name></name></expr></argument>, <argument pos:start="11:67" pos:end="11:73"><expr pos:start="11:67" pos:end="11:73"><name pos:start="11:67" pos:end="11:73">INT_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="13:50"><decl pos:start="12:5" pos:end="13:49"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:17">alignment</name> <init pos:start="12:19" pos:end="13:49">= <expr pos:start="12:21" pos:end="13:49"><call pos:start="12:21" pos:end="13:49"><name pos:start="12:21" pos:end="12:23">MAX</name><argument_list pos:start="12:24" pos:end="13:49">(<argument pos:start="12:25" pos:end="12:54"><expr pos:start="12:25" pos:end="12:54"><name pos:start="12:25" pos:end="12:54"><name pos:start="12:25" pos:end="12:26">bs</name><operator pos:start="12:27" pos:end="12:28">-&gt;</operator><name pos:start="12:29" pos:end="12:30">bl</name><operator pos:start="12:31" pos:end="12:31">.</operator><name pos:start="12:32" pos:end="12:54">pwrite_zeroes_alignment</name></name></expr></argument>,
                        <argument pos:start="13:25" pos:end="13:48"><expr pos:start="13:25" pos:end="13:48"><name pos:start="13:25" pos:end="13:48"><name pos:start="13:25" pos:end="13:26">bs</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:30">bl</name><operator pos:start="13:31" pos:end="13:31">.</operator><name pos:start="13:32" pos:end="13:48">request_alignment</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:76"><decl pos:start="14:5" pos:end="14:75"><type pos:start="14:5" pos:end="14:7"><name pos:start="14:5" pos:end="14:7">int</name></type> <name pos:start="14:9" pos:end="14:20">max_transfer</name> <init pos:start="14:22" pos:end="14:75">= <expr pos:start="14:24" pos:end="14:75"><call pos:start="14:24" pos:end="14:75"><name pos:start="14:24" pos:end="14:35">MIN_NON_ZERO</name><argument_list pos:start="14:36" pos:end="14:75">(<argument pos:start="14:37" pos:end="14:55"><expr pos:start="14:37" pos:end="14:55"><name pos:start="14:37" pos:end="14:55"><name pos:start="14:37" pos:end="14:38">bs</name><operator pos:start="14:39" pos:end="14:40">-&gt;</operator><name pos:start="14:41" pos:end="14:42">bl</name><operator pos:start="14:43" pos:end="14:43">.</operator><name pos:start="14:44" pos:end="14:55">max_transfer</name></name></expr></argument>, <argument pos:start="14:58" pos:end="14:74"><expr pos:start="14:58" pos:end="14:74"><name pos:start="14:58" pos:end="14:74">MAX_BOUNCE_BUFFER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:54"><expr pos:start="15:5" pos:end="15:53"><call pos:start="15:5" pos:end="15:53"><name pos:start="15:5" pos:end="15:10">assert</name><argument_list pos:start="15:11" pos:end="15:53">(<argument pos:start="15:12" pos:end="15:52"><expr pos:start="15:12" pos:end="15:52"><name pos:start="15:12" pos:end="15:20">alignment</name> <operator pos:start="15:22" pos:end="15:22">%</operator> <name pos:start="15:24" pos:end="15:47"><name pos:start="15:24" pos:end="15:25">bs</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:29">bl</name><operator pos:start="15:30" pos:end="15:30">.</operator><name pos:start="15:31" pos:end="15:47">request_alignment</name></name> <operator pos:start="15:49" pos:end="15:50">==</operator> <literal type="number" pos:start="15:52" pos:end="15:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:30"><expr pos:start="16:5" pos:end="16:29"><name pos:start="16:5" pos:end="16:8">head</name> <operator pos:start="16:10" pos:end="16:10">=</operator> <name pos:start="16:12" pos:end="16:17">offset</name> <operator pos:start="16:19" pos:end="16:19">%</operator> <name pos:start="16:21" pos:end="16:29">alignment</name></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:40"><expr pos:start="17:5" pos:end="17:39"><name pos:start="17:5" pos:end="17:8">tail</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <operator pos:start="17:12" pos:end="17:12">(</operator><name pos:start="17:13" pos:end="17:18">offset</name> <operator pos:start="17:20" pos:end="17:20">+</operator> <name pos:start="17:22" pos:end="17:26">bytes</name><operator pos:start="17:27" pos:end="17:27">)</operator> <operator pos:start="17:29" pos:end="17:29">%</operator> <name pos:start="17:31" pos:end="17:39">alignment</name></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:68"><expr pos:start="18:5" pos:end="18:67"><name pos:start="18:5" pos:end="18:20">max_write_zeroes</name> <operator pos:start="18:22" pos:end="18:22">=</operator> <call pos:start="18:24" pos:end="18:67"><name pos:start="18:24" pos:end="18:38">QEMU_ALIGN_DOWN</name><argument_list pos:start="18:39" pos:end="18:67">(<argument pos:start="18:40" pos:end="18:55"><expr pos:start="18:40" pos:end="18:55"><name pos:start="18:40" pos:end="18:55">max_write_zeroes</name></expr></argument>, <argument pos:start="18:58" pos:end="18:66"><expr pos:start="18:58" pos:end="18:66"><name pos:start="18:58" pos:end="18:66">alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:57"><expr pos:start="19:5" pos:end="19:56"><call pos:start="19:5" pos:end="19:56"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:56">(<argument pos:start="19:12" pos:end="19:55"><expr pos:start="19:12" pos:end="19:55"><name pos:start="19:12" pos:end="19:27">max_write_zeroes</name> <operator pos:start="19:29" pos:end="19:30">&gt;=</operator> <name pos:start="19:32" pos:end="19:55"><name pos:start="19:32" pos:end="19:33">bs</name><operator pos:start="19:34" pos:end="19:35">-&gt;</operator><name pos:start="19:36" pos:end="19:37">bl</name><operator pos:start="19:38" pos:end="19:38">.</operator><name pos:start="19:39" pos:end="19:55">request_alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while pos:start="20:5" pos:end="80:15">while <condition pos:start="20:11" pos:end="20:29">(<expr pos:start="20:12" pos:end="20:28"><name pos:start="20:12" pos:end="20:16">bytes</name> <operator pos:start="20:18" pos:end="20:18">&gt;</operator> <literal type="number" pos:start="20:20" pos:end="20:20">0</literal> <operator pos:start="20:22" pos:end="20:23">&amp;&amp;</operator> <operator pos:start="20:25" pos:end="20:25">!</operator><name pos:start="20:26" pos:end="20:28">ret</name></expr>)</condition> <block pos:start="20:31" pos:end="80:15">{<block_content pos:start="21:9" pos:end="80:15">
        <decl_stmt pos:start="21:9" pos:end="21:24"><decl pos:start="21:9" pos:end="21:23"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:15">num</name> <init pos:start="21:17" pos:end="21:23">= <expr pos:start="21:19" pos:end="21:23"><name pos:start="21:19" pos:end="21:23">bytes</name></expr></init></decl>;</decl_stmt>
        <comment type="block" pos:start="22:9" pos:end="25:11">/* Align request.  Block drivers can expect the "bulk" of the request
         * to be aligned, and that unaligned requests do not cross cluster
         * boundaries.
         */</comment>
        <if_stmt pos:start="26:9" pos:end="80:15"><if pos:start="26:9" pos:end="33:9">if <condition pos:start="26:12" pos:end="26:17">(<expr pos:start="26:13" pos:end="26:16"><name pos:start="26:13" pos:end="26:16">head</name></expr>)</condition> <block pos:start="26:19" pos:end="33:9">{<block_content pos:start="30:13" pos:end="32:43">
            <comment type="block" pos:start="27:13" pos:end="29:56">/* Make a small request up to the first aligned sector. For
             * convenience, limit this request to max_transfer even if
             * we don't need to fall back to writes.  */</comment>
            <expr_stmt pos:start="30:13" pos:end="30:66"><expr pos:start="30:13" pos:end="30:65"><name pos:start="30:13" pos:end="30:15">num</name> <operator pos:start="30:17" pos:end="30:17">=</operator> <call pos:start="30:19" pos:end="30:65"><name pos:start="30:19" pos:end="30:21">MIN</name><argument_list pos:start="30:22" pos:end="30:65">(<argument pos:start="30:23" pos:end="30:46"><expr pos:start="30:23" pos:end="30:46"><call pos:start="30:23" pos:end="30:46"><name pos:start="30:23" pos:end="30:25">MIN</name><argument_list pos:start="30:26" pos:end="30:46">(<argument pos:start="30:27" pos:end="30:31"><expr pos:start="30:27" pos:end="30:31"><name pos:start="30:27" pos:end="30:31">bytes</name></expr></argument>, <argument pos:start="30:34" pos:end="30:45"><expr pos:start="30:34" pos:end="30:45"><name pos:start="30:34" pos:end="30:45">max_transfer</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="30:49" pos:end="30:64"><expr pos:start="30:49" pos:end="30:64"><name pos:start="30:49" pos:end="30:57">alignment</name> <operator pos:start="30:59" pos:end="30:59">-</operator> <name pos:start="30:61" pos:end="30:64">head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="31:13" pos:end="31:44"><expr pos:start="31:13" pos:end="31:43"><name pos:start="31:13" pos:end="31:16">head</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <operator pos:start="31:20" pos:end="31:20">(</operator><name pos:start="31:21" pos:end="31:24">head</name> <operator pos:start="31:26" pos:end="31:26">+</operator> <name pos:start="31:28" pos:end="31:30">num</name><operator pos:start="31:31" pos:end="31:31">)</operator> <operator pos:start="31:33" pos:end="31:33">%</operator> <name pos:start="31:35" pos:end="31:43">alignment</name></expr>;</expr_stmt>
            <expr_stmt pos:start="32:13" pos:end="32:43"><expr pos:start="32:13" pos:end="32:42"><call pos:start="32:13" pos:end="32:42"><name pos:start="32:13" pos:end="32:18">assert</name><argument_list pos:start="32:19" pos:end="32:42">(<argument pos:start="32:20" pos:end="32:41"><expr pos:start="32:20" pos:end="32:41"><name pos:start="32:20" pos:end="32:22">num</name> <operator pos:start="32:24" pos:end="32:24">&lt;</operator> <name pos:start="32:26" pos:end="32:41">max_write_zeroes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="33:11" pos:end="80:15">else if <condition pos:start="33:19" pos:end="33:43">(<expr pos:start="33:20" pos:end="33:42"><name pos:start="33:20" pos:end="33:23">tail</name> <operator pos:start="33:25" pos:end="33:26">&amp;&amp;</operator> <name pos:start="33:28" pos:end="33:30">num</name> <operator pos:start="33:32" pos:end="33:32">&gt;</operator> <name pos:start="33:34" pos:end="33:42">alignment</name></expr>)</condition> <block pos:start="33:45" pos:end="80:15">{<block_content pos:start="35:13" pos:end="80:15">
            <comment type="block" pos:start="34:13" pos:end="34:66">/* Shorten the request to the last aligned sector.  */</comment>
            <expr_stmt pos:start="35:13" pos:end="35:24"><expr pos:start="35:13" pos:end="35:23"><name pos:start="35:13" pos:end="35:15">num</name> <operator pos:start="35:17" pos:end="35:18">-=</operator> <name pos:start="35:20" pos:end="35:23">tail</name></expr>;</expr_stmt>
        <comment type="block" pos:start="36:9" pos:end="36:32">/* limit request size */</comment>
        <if_stmt pos:start="37:9" pos:end="80:15"><if pos:start="37:9" pos:end="80:15">if <condition pos:start="37:12" pos:end="37:35">(<expr pos:start="37:13" pos:end="37:34"><name pos:start="37:13" pos:end="37:15">num</name> <operator pos:start="37:17" pos:end="37:17">&gt;</operator> <name pos:start="37:19" pos:end="37:34">max_write_zeroes</name></expr>)</condition> <block pos:start="37:37" pos:end="80:15">{<block_content pos:start="38:13" pos:end="80:15">
            <expr_stmt pos:start="38:13" pos:end="38:35"><expr pos:start="38:13" pos:end="38:34"><name pos:start="38:13" pos:end="38:15">num</name> <operator pos:start="38:17" pos:end="38:17">=</operator> <name pos:start="38:19" pos:end="38:34">max_write_zeroes</name></expr>;</expr_stmt>
        <expr_stmt pos:start="39:9" pos:end="39:23"><expr pos:start="39:9" pos:end="39:22"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <operator pos:start="39:15" pos:end="39:15">-</operator><name pos:start="39:16" pos:end="39:22">ENOTSUP</name></expr>;</expr_stmt>
        <comment type="block" pos:start="40:9" pos:end="40:60">/* First try the efficient write zeroes operation */</comment>
        <if_stmt pos:start="41:9" pos:end="80:15"><if pos:start="41:9" pos:end="80:15">if <condition pos:start="41:12" pos:end="41:39">(<expr pos:start="41:13" pos:end="41:38"><name pos:start="41:13" pos:end="41:38"><name pos:start="41:13" pos:end="41:15">drv</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:38">bdrv_co_pwrite_zeroes</name></name></expr>)</condition> <block pos:start="41:41" pos:end="80:15">{<block_content pos:start="42:13" pos:end="80:15">
            <expr_stmt pos:start="42:13" pos:end="43:79"><expr pos:start="42:13" pos:end="43:78"><name pos:start="42:13" pos:end="42:15">ret</name> <operator pos:start="42:17" pos:end="42:17">=</operator> <call pos:start="42:19" pos:end="43:78"><name pos:start="42:19" pos:end="42:44"><name pos:start="42:19" pos:end="42:21">drv</name><operator pos:start="42:22" pos:end="42:23">-&gt;</operator><name pos:start="42:24" pos:end="42:44">bdrv_co_pwrite_zeroes</name></name><argument_list pos:start="42:45" pos:end="43:78">(<argument pos:start="42:46" pos:end="42:47"><expr pos:start="42:46" pos:end="42:47"><name pos:start="42:46" pos:end="42:47">bs</name></expr></argument>, <argument pos:start="42:50" pos:end="42:55"><expr pos:start="42:50" pos:end="42:55"><name pos:start="42:50" pos:end="42:55">offset</name></expr></argument>, <argument pos:start="42:58" pos:end="42:60"><expr pos:start="42:58" pos:end="42:60"><name pos:start="42:58" pos:end="42:60">num</name></expr></argument>,
                                             <argument pos:start="43:46" pos:end="43:77"><expr pos:start="43:46" pos:end="43:77"><name pos:start="43:46" pos:end="43:50">flags</name> <operator pos:start="43:52" pos:end="43:52">&amp;</operator> <name pos:start="43:54" pos:end="43:77"><name pos:start="43:54" pos:end="43:55">bs</name><operator pos:start="43:56" pos:end="43:57">-&gt;</operator><name pos:start="43:58" pos:end="43:77">supported_zero_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="44:13" pos:end="80:15"><if pos:start="44:13" pos:end="47:9">if <condition pos:start="44:16" pos:end="45:59">(<expr pos:start="44:17" pos:end="45:58"><name pos:start="44:17" pos:end="44:19">ret</name> <operator pos:start="44:21" pos:end="44:22">!=</operator> <operator pos:start="44:24" pos:end="44:24">-</operator><name pos:start="44:25" pos:end="44:31">ENOTSUP</name> <operator pos:start="44:33" pos:end="44:34">&amp;&amp;</operator> <operator pos:start="44:36" pos:end="44:36">(</operator><name pos:start="44:37" pos:end="44:41">flags</name> <operator pos:start="44:43" pos:end="44:43">&amp;</operator> <name pos:start="44:45" pos:end="44:56">BDRV_REQ_FUA</name><operator pos:start="44:57" pos:end="44:57">)</operator> <operator pos:start="44:59" pos:end="44:60">&amp;&amp;</operator>
                <operator pos:start="45:17" pos:end="45:17">!</operator><operator pos:start="45:18" pos:end="45:18">(</operator><name pos:start="45:19" pos:end="45:42"><name pos:start="45:19" pos:end="45:20">bs</name><operator pos:start="45:21" pos:end="45:22">-&gt;</operator><name pos:start="45:23" pos:end="45:42">supported_zero_flags</name></name> <operator pos:start="45:44" pos:end="45:44">&amp;</operator> <name pos:start="45:46" pos:end="45:57">BDRV_REQ_FUA</name><operator pos:start="45:58" pos:end="45:58">)</operator></expr>)</condition> <block pos:start="45:61" pos:end="47:9">{<block_content pos:start="46:17" pos:end="46:34">
                <expr_stmt pos:start="46:17" pos:end="46:34"><expr pos:start="46:17" pos:end="46:33"><name pos:start="46:17" pos:end="46:26">need_flush</name> <operator pos:start="46:28" pos:end="46:28">=</operator> <name pos:start="46:30" pos:end="46:33">true</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="47:11" pos:end="80:15">else <block pos:start="47:16" pos:end="80:15">{<block_content pos:start="48:13" pos:end="80:15">
            <expr_stmt pos:start="48:13" pos:end="48:46"><expr pos:start="48:13" pos:end="48:45"><call pos:start="48:13" pos:end="48:45"><name pos:start="48:13" pos:end="48:18">assert</name><argument_list pos:start="48:19" pos:end="48:45">(<argument pos:start="48:20" pos:end="48:44"><expr pos:start="48:20" pos:end="48:44"><operator pos:start="48:20" pos:end="48:20">!</operator><name pos:start="48:21" pos:end="48:44"><name pos:start="48:21" pos:end="48:22">bs</name><operator pos:start="48:23" pos:end="48:24">-&gt;</operator><name pos:start="48:25" pos:end="48:44">supported_zero_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="49:9" pos:end="80:15"><if pos:start="49:9" pos:end="80:15">if <condition pos:start="49:12" pos:end="49:28">(<expr pos:start="49:13" pos:end="49:27"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:18">==</operator> <operator pos:start="49:20" pos:end="49:20">-</operator><name pos:start="49:21" pos:end="49:27">ENOTSUP</name></expr>)</condition> <block pos:start="49:30" pos:end="80:15">{<block_content pos:start="51:13" pos:end="80:15">
            <comment type="block" pos:start="50:13" pos:end="50:75">/* Fall back to bounce buffer if write zeroes is unsupported */</comment>
            <decl_stmt pos:start="51:13" pos:end="51:72"><decl pos:start="51:13" pos:end="51:71"><type pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:28">BdrvRequestFlags</name></type> <name pos:start="51:30" pos:end="51:40">write_flags</name> <init pos:start="51:42" pos:end="51:71">= <expr pos:start="51:44" pos:end="51:71"><name pos:start="51:44" pos:end="51:48">flags</name> <operator pos:start="51:50" pos:end="51:50">&amp;</operator> <operator pos:start="51:52" pos:end="51:52">~</operator><name pos:start="51:53" pos:end="51:71">BDRV_REQ_ZERO_WRITE</name></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="52:13" pos:end="80:15"><if pos:start="52:13" pos:end="80:15">if <condition pos:start="52:16" pos:end="53:60">(<expr pos:start="52:17" pos:end="53:59"><operator pos:start="52:17" pos:end="52:17">(</operator><name pos:start="52:18" pos:end="52:22">flags</name> <operator pos:start="52:24" pos:end="52:24">&amp;</operator> <name pos:start="52:26" pos:end="52:37">BDRV_REQ_FUA</name><operator pos:start="52:38" pos:end="52:38">)</operator> <operator pos:start="52:40" pos:end="52:41">&amp;&amp;</operator>
                <operator pos:start="53:17" pos:end="53:17">!</operator><operator pos:start="53:18" pos:end="53:18">(</operator><name pos:start="53:19" pos:end="53:43"><name pos:start="53:19" pos:end="53:20">bs</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:43">supported_write_flags</name></name> <operator pos:start="53:45" pos:end="53:45">&amp;</operator> <name pos:start="53:47" pos:end="53:58">BDRV_REQ_FUA</name><operator pos:start="53:59" pos:end="53:59">)</operator></expr>)</condition> <block pos:start="53:62" pos:end="80:15">{<block_content pos:start="56:17" pos:end="80:15">
                <comment type="block" pos:start="54:17" pos:end="55:66">/* No need for bdrv_driver_pwrite() to do a fallback
                 * flush on each chunk; use just one at the end */</comment>
                <expr_stmt pos:start="56:17" pos:end="56:45"><expr pos:start="56:17" pos:end="56:44"><name pos:start="56:17" pos:end="56:27">write_flags</name> <operator pos:start="56:29" pos:end="56:30">&amp;=</operator> <operator pos:start="56:32" pos:end="56:32">~</operator><name pos:start="56:33" pos:end="56:44">BDRV_REQ_FUA</name></expr>;</expr_stmt>
                <expr_stmt pos:start="57:17" pos:end="57:34"><expr pos:start="57:17" pos:end="57:33"><name pos:start="57:17" pos:end="57:26">need_flush</name> <operator pos:start="57:28" pos:end="57:28">=</operator> <name pos:start="57:30" pos:end="57:33">true</name></expr>;</expr_stmt>
            <expr_stmt pos:start="58:13" pos:end="58:41"><expr pos:start="58:13" pos:end="58:40"><name pos:start="58:13" pos:end="58:15">num</name> <operator pos:start="58:17" pos:end="58:17">=</operator> <call pos:start="58:19" pos:end="58:40"><name pos:start="58:19" pos:end="58:21">MIN</name><argument_list pos:start="58:22" pos:end="58:40">(<argument pos:start="58:23" pos:end="58:25"><expr pos:start="58:23" pos:end="58:25"><name pos:start="58:23" pos:end="58:25">num</name></expr></argument>, <argument pos:start="58:28" pos:end="58:39"><expr pos:start="58:28" pos:end="58:39"><name pos:start="58:28" pos:end="58:39">max_transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="59:13" pos:end="59:30"><expr pos:start="59:13" pos:end="59:29"><name pos:start="59:13" pos:end="59:23"><name pos:start="59:13" pos:end="59:15">iov</name><operator pos:start="59:16" pos:end="59:16">.</operator><name pos:start="59:17" pos:end="59:23">iov_len</name></name> <operator pos:start="59:25" pos:end="59:25">=</operator> <name pos:start="59:27" pos:end="59:29">num</name></expr>;</expr_stmt>
            <if_stmt pos:start="60:13" pos:end="80:15"><if pos:start="60:13" pos:end="80:15">if <condition pos:start="60:16" pos:end="60:37">(<expr pos:start="60:17" pos:end="60:36"><name pos:start="60:17" pos:end="60:28"><name pos:start="60:17" pos:end="60:19">iov</name><operator pos:start="60:20" pos:end="60:20">.</operator><name pos:start="60:21" pos:end="60:28">iov_base</name></name> <operator pos:start="60:30" pos:end="60:31">==</operator> <name pos:start="60:33" pos:end="60:36">NULL</name></expr>)</condition> <block pos:start="60:39" pos:end="80:15">{<block_content pos:start="61:17" pos:end="80:15">
                <expr_stmt pos:start="61:17" pos:end="61:60"><expr pos:start="61:17" pos:end="61:59"><name pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:19">iov</name><operator pos:start="61:20" pos:end="61:20">.</operator><name pos:start="61:21" pos:end="61:28">iov_base</name></name> <operator pos:start="61:30" pos:end="61:30">=</operator> <call pos:start="61:32" pos:end="61:59"><name pos:start="61:32" pos:end="61:50">qemu_try_blockalign</name><argument_list pos:start="61:51" pos:end="61:59">(<argument pos:start="61:52" pos:end="61:53"><expr pos:start="61:52" pos:end="61:53"><name pos:start="61:52" pos:end="61:53">bs</name></expr></argument>, <argument pos:start="61:56" pos:end="61:58"><expr pos:start="61:56" pos:end="61:58"><name pos:start="61:56" pos:end="61:58">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="62:17" pos:end="80:15"><if pos:start="62:17" pos:end="80:15">if <condition pos:start="62:20" pos:end="62:41">(<expr pos:start="62:21" pos:end="62:40"><name pos:start="62:21" pos:end="62:32"><name pos:start="62:21" pos:end="62:23">iov</name><operator pos:start="62:24" pos:end="62:24">.</operator><name pos:start="62:25" pos:end="62:32">iov_base</name></name> <operator pos:start="62:34" pos:end="62:35">==</operator> <name pos:start="62:37" pos:end="62:40">NULL</name></expr>)</condition> <block pos:start="62:43" pos:end="80:15">{<block_content pos:start="63:21" pos:end="80:15">
                    <expr_stmt pos:start="63:21" pos:end="63:34"><expr pos:start="63:21" pos:end="63:33"><name pos:start="63:21" pos:end="63:23">ret</name> <operator pos:start="63:25" pos:end="63:25">=</operator> <operator pos:start="63:27" pos:end="63:27">-</operator><name pos:start="63:28" pos:end="63:33">ENOMEM</name></expr>;</expr_stmt>
                    <goto pos:start="64:21" pos:end="64:30">goto <name pos:start="64:26" pos:end="64:29">fail</name>;</goto>
                <expr_stmt pos:start="65:17" pos:end="65:45"><expr pos:start="65:17" pos:end="65:44"><call pos:start="65:17" pos:end="65:44"><name pos:start="65:17" pos:end="65:22">memset</name><argument_list pos:start="65:23" pos:end="65:44">(<argument pos:start="65:24" pos:end="65:35"><expr pos:start="65:24" pos:end="65:35"><name pos:start="65:24" pos:end="65:35"><name pos:start="65:24" pos:end="65:26">iov</name><operator pos:start="65:27" pos:end="65:27">.</operator><name pos:start="65:28" pos:end="65:35">iov_base</name></name></expr></argument>, <argument pos:start="65:38" pos:end="65:38"><expr pos:start="65:38" pos:end="65:38"><literal type="number" pos:start="65:38" pos:end="65:38">0</literal></expr></argument>, <argument pos:start="65:41" pos:end="65:43"><expr pos:start="65:41" pos:end="65:43"><name pos:start="65:41" pos:end="65:43">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="66:13" pos:end="66:53"><expr pos:start="66:13" pos:end="66:52"><call pos:start="66:13" pos:end="66:52"><name pos:start="66:13" pos:end="66:36">qemu_iovec_init_external</name><argument_list pos:start="66:37" pos:end="66:52">(<argument pos:start="66:38" pos:end="66:42"><expr pos:start="66:38" pos:end="66:42"><operator pos:start="66:38" pos:end="66:38">&amp;</operator><name pos:start="66:39" pos:end="66:42">qiov</name></expr></argument>, <argument pos:start="66:45" pos:end="66:48"><expr pos:start="66:45" pos:end="66:48"><operator pos:start="66:45" pos:end="66:45">&amp;</operator><name pos:start="66:46" pos:end="66:48">iov</name></expr></argument>, <argument pos:start="66:51" pos:end="66:51"><expr pos:start="66:51" pos:end="66:51"><literal type="number" pos:start="66:51" pos:end="66:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="67:13" pos:end="67:75"><expr pos:start="67:13" pos:end="67:74"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:74"><name pos:start="67:19" pos:end="67:37">bdrv_driver_pwritev</name><argument_list pos:start="67:38" pos:end="67:74">(<argument pos:start="67:39" pos:end="67:40"><expr pos:start="67:39" pos:end="67:40"><name pos:start="67:39" pos:end="67:40">bs</name></expr></argument>, <argument pos:start="67:43" pos:end="67:48"><expr pos:start="67:43" pos:end="67:48"><name pos:start="67:43" pos:end="67:48">offset</name></expr></argument>, <argument pos:start="67:51" pos:end="67:53"><expr pos:start="67:51" pos:end="67:53"><name pos:start="67:51" pos:end="67:53">num</name></expr></argument>, <argument pos:start="67:56" pos:end="67:60"><expr pos:start="67:56" pos:end="67:60"><operator pos:start="67:56" pos:end="67:56">&amp;</operator><name pos:start="67:57" pos:end="67:60">qiov</name></expr></argument>, <argument pos:start="67:63" pos:end="67:73"><expr pos:start="67:63" pos:end="67:73"><name pos:start="67:63" pos:end="67:73">write_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block" pos:start="68:13" pos:end="70:15">/* Keep bounce buffer around if it is big enough for all
             * all future requests.
             */</comment>
            <if_stmt pos:start="71:13" pos:end="80:15"><if pos:start="71:13" pos:end="80:15">if <condition pos:start="71:16" pos:end="71:35">(<expr pos:start="71:17" pos:end="71:34"><name pos:start="71:17" pos:end="71:19">num</name> <operator pos:start="71:21" pos:end="71:21">&lt;</operator> <name pos:start="71:23" pos:end="71:34">max_transfer</name></expr>)</condition> <block pos:start="71:37" pos:end="80:15">{<block_content pos:start="72:17" pos:end="80:15">
                <expr_stmt pos:start="72:17" pos:end="72:41"><expr pos:start="72:17" pos:end="72:40"><call pos:start="72:17" pos:end="72:40"><name pos:start="72:17" pos:end="72:26">qemu_vfree</name><argument_list pos:start="72:27" pos:end="72:40">(<argument pos:start="72:28" pos:end="72:39"><expr pos:start="72:28" pos:end="72:39"><name pos:start="72:28" pos:end="72:39"><name pos:start="72:28" pos:end="72:30">iov</name><operator pos:start="72:31" pos:end="72:31">.</operator><name pos:start="72:32" pos:end="72:39">iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="73:17" pos:end="73:36"><expr pos:start="73:17" pos:end="73:35"><name pos:start="73:17" pos:end="73:28"><name pos:start="73:17" pos:end="73:19">iov</name><operator pos:start="73:20" pos:end="73:20">.</operator><name pos:start="73:21" pos:end="73:28">iov_base</name></name> <operator pos:start="73:30" pos:end="73:30">=</operator> <name pos:start="73:32" pos:end="73:35">NULL</name></expr>;</expr_stmt>
        <expr_stmt pos:start="74:9" pos:end="74:22"><expr pos:start="74:9" pos:end="74:21"><name pos:start="74:9" pos:end="74:14">offset</name> <operator pos:start="74:16" pos:end="74:17">+=</operator> <name pos:start="74:19" pos:end="74:21">num</name></expr>;</expr_stmt>
        <expr_stmt pos:start="75:9" pos:end="75:21"><expr pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:13">bytes</name> <operator pos:start="75:15" pos:end="75:16">-=</operator> <name pos:start="75:18" pos:end="75:20">num</name></expr>;</expr_stmt>
<label pos:start="76:1" pos:end="76:5"><name pos:start="76:1" pos:end="76:4">fail</name>:</label>
    <if_stmt pos:start="77:5" pos:end="80:15"><if pos:start="77:5" pos:end="80:15">if <condition pos:start="77:8" pos:end="77:31">(<expr pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:14">==</operator> <literal type="number" pos:start="77:16" pos:end="77:16">0</literal> <operator pos:start="77:18" pos:end="77:19">&amp;&amp;</operator> <name pos:start="77:21" pos:end="77:30">need_flush</name></expr>)</condition> <block pos:start="77:33" pos:end="80:15">{<block_content pos:start="78:9" pos:end="80:15">
        <expr_stmt pos:start="78:9" pos:end="78:32"><expr pos:start="78:9" pos:end="78:31"><name pos:start="78:9" pos:end="78:11">ret</name> <operator pos:start="78:13" pos:end="78:13">=</operator> <call pos:start="78:15" pos:end="78:31"><name pos:start="78:15" pos:end="78:27">bdrv_co_flush</name><argument_list pos:start="78:28" pos:end="78:31">(<argument pos:start="78:29" pos:end="78:30"><expr pos:start="78:29" pos:end="78:30"><name pos:start="78:29" pos:end="78:30">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="79:5" pos:end="79:29"><expr pos:start="79:5" pos:end="79:28"><call pos:start="79:5" pos:end="79:28"><name pos:start="79:5" pos:end="79:14">qemu_vfree</name><argument_list pos:start="79:15" pos:end="79:28">(<argument pos:start="79:16" pos:end="79:27"><expr pos:start="79:16" pos:end="79:27"><name pos:start="79:16" pos:end="79:27"><name pos:start="79:16" pos:end="79:18">iov</name><operator pos:start="79:19" pos:end="79:19">.</operator><name pos:start="79:20" pos:end="79:27">iov_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return pos:start="80:5" pos:end="80:15">return <expr pos:start="80:12" pos:end="80:14"><name pos:start="80:12" pos:end="80:14">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></function></unit>
