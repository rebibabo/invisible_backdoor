<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7468.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">device_open</name><parameter_list pos:start="1:23" pos:end="1:68">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:43"><name pos:start="1:24" pos:end="1:38">AVFormatContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">ctx</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:67"><decl pos:start="1:46" pos:end="1:67"><type pos:start="1:46" pos:end="1:67"><name pos:start="1:46" pos:end="1:53">uint32_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:67">capabilities</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:14">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:26">v4l2_capability</name></name></type> <name pos:start="5:28" pos:end="5:30">cap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:11"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">res</name></decl>, <decl pos:start="9:14" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:16">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">flags</name> <init pos:start="11:15" pos:end="11:22">= <expr pos:start="11:17" pos:end="11:22"><name pos:start="11:17" pos:end="11:22">O_RDWR</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:41">(<expr pos:start="15:9" pos:end="15:40"><name pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:11">ctx</name><operator pos:start="15:12" pos:end="15:13">-&gt;</operator><name pos:start="15:14" pos:end="15:18">flags</name></name> <operator pos:start="15:20" pos:end="15:20">&amp;</operator> <name pos:start="15:22" pos:end="15:40">AVFMT_FLAG_NONBLOCK</name></expr>)</condition> <block pos:start="15:43" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:28">

        <expr_stmt pos:start="17:9" pos:end="17:28"><expr pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:13">flags</name> <operator pos:start="17:15" pos:end="17:16">|=</operator> <name pos:start="17:18" pos:end="17:27">O_NONBLOCK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:39"><expr pos:start="23:5" pos:end="23:38"><name pos:start="23:5" pos:end="23:6">fd</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <call pos:start="23:10" pos:end="23:38"><name pos:start="23:10" pos:end="23:13">open</name><argument_list pos:start="23:14" pos:end="23:38">(<argument pos:start="23:15" pos:end="23:27"><expr pos:start="23:15" pos:end="23:27"><name pos:start="23:15" pos:end="23:27"><name pos:start="23:15" pos:end="23:17">ctx</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:27">filename</name></name></expr></argument>, <argument pos:start="23:30" pos:end="23:34"><expr pos:start="23:30" pos:end="23:34"><name pos:start="23:30" pos:end="23:34">flags</name></expr></argument>, <argument pos:start="23:37" pos:end="23:37"><expr pos:start="23:37" pos:end="23:37"><literal type="number" pos:start="23:37" pos:end="23:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="25:15">(<expr pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:10">fd</name> <operator pos:start="25:12" pos:end="25:12">&lt;</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>)</condition> <block pos:start="25:17" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:30">

        <expr_stmt pos:start="27:9" pos:end="29:47"><expr pos:start="27:9" pos:end="29:46"><call pos:start="27:9" pos:end="29:46"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="29:46">(<argument pos:start="27:16" pos:end="27:18"><expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">ctx</name></expr></argument>, <argument pos:start="27:21" pos:end="27:32"><expr pos:start="27:21" pos:end="27:32"><name pos:start="27:21" pos:end="27:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:35" pos:end="27:70"><expr pos:start="27:35" pos:end="27:70"><literal type="string" pos:start="27:35" pos:end="27:70">"Cannot open video device %s : %s\n"</literal></expr></argument>,

               <argument pos:start="29:16" pos:end="29:28"><expr pos:start="29:16" pos:end="29:28"><name pos:start="29:16" pos:end="29:28"><name pos:start="29:16" pos:end="29:18">ctx</name><operator pos:start="29:19" pos:end="29:20">-&gt;</operator><name pos:start="29:21" pos:end="29:28">filename</name></name></expr></argument>, <argument pos:start="29:31" pos:end="29:45"><expr pos:start="29:31" pos:end="29:45"><call pos:start="29:31" pos:end="29:45"><name pos:start="29:31" pos:end="29:38">strerror</name><argument_list pos:start="29:39" pos:end="29:45">(<argument pos:start="29:40" pos:end="29:44"><expr pos:start="29:40" pos:end="29:44"><name pos:start="29:40" pos:end="29:44">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="33:9" pos:end="33:30">return <expr pos:start="33:16" pos:end="33:29"><call pos:start="33:16" pos:end="33:29"><name pos:start="33:16" pos:end="33:22">AVERROR</name><argument_list pos:start="33:23" pos:end="33:29">(<argument pos:start="33:24" pos:end="33:28"><expr pos:start="33:24" pos:end="33:28"><name pos:start="33:24" pos:end="33:28">errno</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:43"><expr pos:start="39:5" pos:end="39:42"><name pos:start="39:5" pos:end="39:7">res</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:42"><name pos:start="39:11" pos:end="39:15">ioctl</name><argument_list pos:start="39:16" pos:end="39:42">(<argument pos:start="39:17" pos:end="39:18"><expr pos:start="39:17" pos:end="39:18"><name pos:start="39:17" pos:end="39:18">fd</name></expr></argument>, <argument pos:start="39:21" pos:end="39:35"><expr pos:start="39:21" pos:end="39:35"><name pos:start="39:21" pos:end="39:35">VIDIOC_QUERYCAP</name></expr></argument>, <argument pos:start="39:38" pos:end="39:41"><expr pos:start="39:38" pos:end="39:41"><operator pos:start="39:38" pos:end="39:38">&amp;</operator><name pos:start="39:39" pos:end="39:41">cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="41:5" pos:end="41:57">// ENOIOCTLCMD definition only availble on __KERNEL__</comment>

    <if_stmt pos:start="43:5" pos:end="57:5"><if pos:start="43:5" pos:end="57:5">if <condition pos:start="43:8" pos:end="43:42">(<expr pos:start="43:9" pos:end="43:41"><name pos:start="43:9" pos:end="43:11">res</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal> <operator pos:start="43:17" pos:end="43:18">&amp;&amp;</operator> <operator pos:start="43:20" pos:end="43:20">(</operator><operator pos:start="43:21" pos:end="43:21">(</operator><name pos:start="43:22" pos:end="43:24">err</name> <operator pos:start="43:26" pos:end="43:26">=</operator> <name pos:start="43:28" pos:end="43:32">errno</name><operator pos:start="43:33" pos:end="43:33">)</operator> <operator pos:start="43:35" pos:end="43:36">==</operator> <literal type="number" pos:start="43:38" pos:end="43:40">515</literal><operator pos:start="43:41" pos:end="43:41">)</operator></expr>)</condition> <block pos:start="43:44" pos:end="57:5">{<block_content pos:start="45:9" pos:end="55:28">

        <expr_stmt pos:start="45:9" pos:end="49:40"><expr pos:start="45:9" pos:end="49:39"><call pos:start="45:9" pos:end="49:39"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="49:39">(<argument pos:start="45:16" pos:end="45:18"><expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">ctx</name></expr></argument>, <argument pos:start="45:21" pos:end="45:32"><expr pos:start="45:21" pos:end="45:32"><name pos:start="45:21" pos:end="45:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="47:16" pos:end="49:38"><expr pos:start="47:16" pos:end="49:38"><literal type="string" pos:start="47:16" pos:end="47:67">"QUERYCAP not implemented, probably V4L device but "</literal>

               <literal type="string" pos:start="49:16" pos:end="49:38">"not supporting V4L2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:18"><expr pos:start="51:9" pos:end="51:17"><call pos:start="51:9" pos:end="51:17"><name pos:start="51:9" pos:end="51:13">close</name><argument_list pos:start="51:14" pos:end="51:17">(<argument pos:start="51:15" pos:end="51:16"><expr pos:start="51:15" pos:end="51:16"><name pos:start="51:15" pos:end="51:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="55:9" pos:end="55:28">return <expr pos:start="55:16" pos:end="55:27"><call pos:start="55:16" pos:end="55:27"><name pos:start="55:16" pos:end="55:22">AVERROR</name><argument_list pos:start="55:23" pos:end="55:27">(<argument pos:start="55:24" pos:end="55:26"><expr pos:start="55:24" pos:end="55:26"><literal type="number" pos:start="55:24" pos:end="55:26">515</literal></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="73:5"><if pos:start="61:5" pos:end="73:5">if <condition pos:start="61:8" pos:end="61:16">(<expr pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:11">res</name> <operator pos:start="61:13" pos:end="61:13">&lt;</operator> <literal type="number" pos:start="61:15" pos:end="61:15">0</literal></expr>)</condition> <block pos:start="61:18" pos:end="73:5">{<block_content pos:start="63:9" pos:end="71:28">

        <expr_stmt pos:start="63:9" pos:end="65:34"><expr pos:start="63:9" pos:end="65:33"><call pos:start="63:9" pos:end="65:33"><name pos:start="63:9" pos:end="63:14">av_log</name><argument_list pos:start="63:15" pos:end="65:33">(<argument pos:start="63:16" pos:end="63:18"><expr pos:start="63:16" pos:end="63:18"><name pos:start="63:16" pos:end="63:18">ctx</name></expr></argument>, <argument pos:start="63:21" pos:end="63:32"><expr pos:start="63:21" pos:end="63:32"><name pos:start="63:21" pos:end="63:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:35" pos:end="63:64"><expr pos:start="63:35" pos:end="63:64"><literal type="string" pos:start="63:35" pos:end="63:64">"ioctl(VIDIOC_QUERYCAP): %s\n"</literal></expr></argument>,

                 <argument pos:start="65:18" pos:end="65:32"><expr pos:start="65:18" pos:end="65:32"><call pos:start="65:18" pos:end="65:32"><name pos:start="65:18" pos:end="65:25">strerror</name><argument_list pos:start="65:26" pos:end="65:32">(<argument pos:start="65:27" pos:end="65:31"><expr pos:start="65:27" pos:end="65:31"><name pos:start="65:27" pos:end="65:31">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:18"><expr pos:start="67:9" pos:end="67:17"><call pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:13">close</name><argument_list pos:start="67:14" pos:end="67:17">(<argument pos:start="67:15" pos:end="67:16"><expr pos:start="67:15" pos:end="67:16"><name pos:start="67:15" pos:end="67:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="71:9" pos:end="71:28">return <expr pos:start="71:16" pos:end="71:27"><call pos:start="71:16" pos:end="71:27"><name pos:start="71:16" pos:end="71:22">AVERROR</name><argument_list pos:start="71:23" pos:end="71:27">(<argument pos:start="71:24" pos:end="71:26"><expr pos:start="71:24" pos:end="71:26"><name pos:start="71:24" pos:end="71:26">err</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="87:5"><if pos:start="77:5" pos:end="87:5">if <condition pos:start="77:8" pos:end="77:57">(<expr pos:start="77:9" pos:end="77:56"><operator pos:start="77:9" pos:end="77:9">(</operator><name pos:start="77:10" pos:end="77:25"><name pos:start="77:10" pos:end="77:12">cap</name><operator pos:start="77:13" pos:end="77:13">.</operator><name pos:start="77:14" pos:end="77:25">capabilities</name></name> <operator pos:start="77:27" pos:end="77:27">&amp;</operator> <name pos:start="77:29" pos:end="77:50">V4L2_CAP_VIDEO_CAPTURE</name><operator pos:start="77:51" pos:end="77:51">)</operator> <operator pos:start="77:53" pos:end="77:54">==</operator> <literal type="number" pos:start="77:56" pos:end="77:56">0</literal></expr>)</condition> <block pos:start="77:59" pos:end="87:5">{<block_content pos:start="79:9" pos:end="85:31">

        <expr_stmt pos:start="79:9" pos:end="79:66"><expr pos:start="79:9" pos:end="79:65"><call pos:start="79:9" pos:end="79:65"><name pos:start="79:9" pos:end="79:14">av_log</name><argument_list pos:start="79:15" pos:end="79:65">(<argument pos:start="79:16" pos:end="79:18"><expr pos:start="79:16" pos:end="79:18"><name pos:start="79:16" pos:end="79:18">ctx</name></expr></argument>, <argument pos:start="79:21" pos:end="79:32"><expr pos:start="79:21" pos:end="79:32"><name pos:start="79:21" pos:end="79:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="79:35" pos:end="79:64"><expr pos:start="79:35" pos:end="79:64"><literal type="string" pos:start="79:35" pos:end="79:64">"Not a video capture device\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:18"><expr pos:start="81:9" pos:end="81:17"><call pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:13">close</name><argument_list pos:start="81:14" pos:end="81:17">(<argument pos:start="81:15" pos:end="81:16"><expr pos:start="81:15" pos:end="81:16"><name pos:start="81:15" pos:end="81:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="85:9" pos:end="85:31">return <expr pos:start="85:16" pos:end="85:30"><call pos:start="85:16" pos:end="85:30"><name pos:start="85:16" pos:end="85:22">AVERROR</name><argument_list pos:start="85:23" pos:end="85:30">(<argument pos:start="85:24" pos:end="85:29"><expr pos:start="85:24" pos:end="85:29"><name pos:start="85:24" pos:end="85:29">ENODEV</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:37"><expr pos:start="91:5" pos:end="91:36"><operator pos:start="91:5" pos:end="91:5">*</operator><name pos:start="91:6" pos:end="91:17">capabilities</name> <operator pos:start="91:19" pos:end="91:19">=</operator> <name pos:start="91:21" pos:end="91:36"><name pos:start="91:21" pos:end="91:23">cap</name><operator pos:start="91:24" pos:end="91:24">.</operator><name pos:start="91:25" pos:end="91:36">capabilities</name></name></expr>;</expr_stmt>



    <return pos:start="95:5" pos:end="95:14">return <expr pos:start="95:12" pos:end="95:13"><name pos:start="95:12" pos:end="95:13">fd</name></expr>;</return>

</block_content>}</block></function>
</unit>
