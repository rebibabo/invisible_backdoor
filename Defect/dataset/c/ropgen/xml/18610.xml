<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18610.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:41">loadvm_postcopy_handle_run_bh</name><parameter_list pos:start="1:42" pos:end="1:55">(<parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:48"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:54">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:17">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:20">local_err</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">HandleRunBhData</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:25">data</name> <init pos:start="7:27" pos:end="7:34">= <expr pos:start="7:29" pos:end="7:34"><name pos:start="7:29" pos:end="7:34">opaque</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="15:7">/* TODO we should move all of this lot into postcopy_ram.c or a shared code

     * in migration.c

     */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:36"><expr pos:start="17:5" pos:end="17:35"><call pos:start="17:5" pos:end="17:35"><name pos:start="17:5" pos:end="17:33">cpu_synchronize_all_post_init</name><argument_list pos:start="17:34" pos:end="17:35">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:25"><expr pos:start="21:5" pos:end="21:24"><call pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:22">qemu_announce_self</name><argument_list pos:start="21:23" pos:end="21:24">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="27:65">/* Make sure all file formats flush their mutable metadata.

     * If we get an error here, just don't restart the VM yet. */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:42"><expr pos:start="29:5" pos:end="29:41"><call pos:start="29:5" pos:end="29:41"><name pos:start="29:5" pos:end="29:29">bdrv_invalidate_cache_all</name><argument_list pos:start="29:30" pos:end="29:41">(<argument pos:start="29:31" pos:end="29:40"><expr pos:start="29:31" pos:end="29:40"><operator pos:start="29:31" pos:end="29:31">&amp;</operator><name pos:start="29:32" pos:end="29:40">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:19">(<expr pos:start="31:9" pos:end="31:18"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:18">local_err</name></expr>)</condition> <block pos:start="31:21" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:47">

        <expr_stmt pos:start="33:9" pos:end="33:47"><expr pos:start="33:9" pos:end="33:46"><call pos:start="33:9" pos:end="33:46"><name pos:start="33:9" pos:end="33:34">blk_resume_after_migration</name><argument_list pos:start="33:35" pos:end="33:46">(<argument pos:start="33:36" pos:end="33:45"><expr pos:start="33:36" pos:end="33:45"><operator pos:start="33:36" pos:end="33:36">&amp;</operator><name pos:start="33:37" pos:end="33:45">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:18">(<expr pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:17">local_err</name></expr>)</condition> <block pos:start="37:20" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:26">

        <expr_stmt pos:start="39:9" pos:end="39:36"><expr pos:start="39:9" pos:end="39:35"><call pos:start="39:9" pos:end="39:35"><name pos:start="39:9" pos:end="39:24">error_report_err</name><argument_list pos:start="39:25" pos:end="39:35">(<argument pos:start="39:26" pos:end="39:34"><expr pos:start="39:26" pos:end="39:34"><name pos:start="39:26" pos:end="39:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:25"><expr pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:17">local_err</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:24">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:26"><expr pos:start="43:9" pos:end="43:25"><name pos:start="43:9" pos:end="43:17">autostart</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:25">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:48"><expr pos:start="49:5" pos:end="49:47"><call pos:start="49:5" pos:end="49:47"><name pos:start="49:5" pos:end="49:45">trace_loadvm_postcopy_handle_run_cpu_sync</name><argument_list pos:start="49:46" pos:end="49:47">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:36"><expr pos:start="51:5" pos:end="51:35"><call pos:start="51:5" pos:end="51:35"><name pos:start="51:5" pos:end="51:33">cpu_synchronize_all_post_init</name><argument_list pos:start="51:34" pos:end="51:35">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:47"><expr pos:start="55:5" pos:end="55:46"><call pos:start="55:5" pos:end="55:46"><name pos:start="55:5" pos:end="55:44">trace_loadvm_postcopy_handle_run_vmstart</name><argument_list pos:start="55:45" pos:end="55:46">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="59:5" pos:end="71:5"><if pos:start="59:5" pos:end="65:5">if <condition pos:start="59:8" pos:end="59:18">(<expr pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:17">autostart</name></expr>)</condition> <block pos:start="59:20" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:19">

        <comment type="block" pos:start="61:9" pos:end="61:51">/* Hold onto your hats, starting the CPU */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:19"><expr pos:start="63:9" pos:end="63:18"><call pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:16">vm_start</name><argument_list pos:start="63:17" pos:end="63:18">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="71:5">else <block pos:start="65:12" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:39">

        <comment type="block" pos:start="67:9" pos:end="67:77">/* leave it paused and let management decide when to start the CPU */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:39"><expr pos:start="69:9" pos:end="69:38"><call pos:start="69:9" pos:end="69:38"><name pos:start="69:9" pos:end="69:20">runstate_set</name><argument_list pos:start="69:21" pos:end="69:38">(<argument pos:start="69:22" pos:end="69:37"><expr pos:start="69:22" pos:end="69:37"><name pos:start="69:22" pos:end="69:37">RUN_STATE_PAUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:29"><expr pos:start="75:5" pos:end="75:28"><call pos:start="75:5" pos:end="75:28"><name pos:start="75:5" pos:end="75:18">qemu_bh_delete</name><argument_list pos:start="75:19" pos:end="75:28">(<argument pos:start="75:20" pos:end="75:27"><expr pos:start="75:20" pos:end="75:27"><name pos:start="75:20" pos:end="75:27"><name pos:start="75:20" pos:end="75:23">data</name><operator pos:start="75:24" pos:end="75:25">-&gt;</operator><name pos:start="75:26" pos:end="75:27">bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:17"><expr pos:start="77:5" pos:end="77:16"><call pos:start="77:5" pos:end="77:16"><name pos:start="77:5" pos:end="77:10">g_free</name><argument_list pos:start="77:11" pos:end="77:16">(<argument pos:start="77:12" pos:end="77:15"><expr pos:start="77:12" pos:end="77:15"><name pos:start="77:12" pos:end="77:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
