<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6735.c" pos:tabs="8"><function pos:start="1:1" pos:end="417:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">xwma_read_header</name><parameter_list pos:start="1:28" pos:end="1:47">(<parameter pos:start="1:29" pos:end="1:46"><decl pos:start="1:29" pos:end="1:46"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:43">AVFormatContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="417:1">{<block_content pos:start="5:5" pos:end="415:15">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:16">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:28">dpds_table_size</name> <init pos:start="9:30" pos:end="9:32">= <expr pos:start="9:32" pos:end="9:32"><literal type="number" pos:start="9:32" pos:end="9:32">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint32_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:24">dpds_table</name> <init pos:start="11:26" pos:end="11:31">= <expr pos:start="11:28" pos:end="11:31"><name pos:start="11:28" pos:end="11:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:20">tag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">AVIOContext</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:19">pb</name> <init pos:start="15:21" pos:end="15:27">= <expr pos:start="15:23" pos:end="15:27"><name pos:start="15:23" pos:end="15:27"><name pos:start="15:23" pos:end="15:23">s</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">AVStream</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:37"><decl pos:start="19:5" pos:end="19:36"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">XWMAContext</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:21">xwma</name> <init pos:start="19:23" pos:end="19:36">= <expr pos:start="19:25" pos:end="19:36"><name pos:start="19:25" pos:end="19:36"><name pos:start="19:25" pos:end="19:25">s</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="25:5" pos:end="29:7">/* The following code is mostly copied from wav.c, with some

     * minor alterations.

     */</comment>



    <comment type="block" pos:start="33:5" pos:end="33:27">/* check RIFF header */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:7">tag</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:23"><name pos:start="35:11" pos:end="35:19">avio_rl32</name><argument_list pos:start="35:20" pos:end="35:23">(<argument pos:start="35:21" pos:end="35:22"><expr pos:start="35:21" pos:end="35:22"><name pos:start="35:21" pos:end="35:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="39:18"><if pos:start="37:5" pos:end="39:18">if <condition pos:start="37:8" pos:end="37:41">(<expr pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:11">tag</name> <operator pos:start="37:13" pos:end="37:14">!=</operator> <call pos:start="37:16" pos:end="37:40"><name pos:start="37:16" pos:end="37:20">MKTAG</name><argument_list pos:start="37:21" pos:end="37:40">(<argument pos:start="37:22" pos:end="37:24"><expr pos:start="37:22" pos:end="37:24"><literal type="char" pos:start="37:22" pos:end="37:24">'R'</literal></expr></argument>, <argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><literal type="char" pos:start="37:27" pos:end="37:29">'I'</literal></expr></argument>, <argument pos:start="37:32" pos:end="37:34"><expr pos:start="37:32" pos:end="37:34"><literal type="char" pos:start="37:32" pos:end="37:34">'F'</literal></expr></argument>, <argument pos:start="37:37" pos:end="37:39"><expr pos:start="37:37" pos:end="37:39"><literal type="char" pos:start="37:37" pos:end="37:39">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:18"><block_content pos:start="39:9" pos:end="39:18">

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:18"><expr pos:start="41:5" pos:end="41:17"><call pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:13">avio_rl32</name><argument_list pos:start="41:14" pos:end="41:17">(<argument pos:start="41:15" pos:end="41:16"><expr pos:start="41:15" pos:end="41:16"><name pos:start="41:15" pos:end="41:16">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="41:20" pos:end="41:34">/* file size */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:24"><expr pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:7">tag</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:23"><name pos:start="43:11" pos:end="43:19">avio_rl32</name><argument_list pos:start="43:20" pos:end="43:23">(<argument pos:start="43:21" pos:end="43:22"><expr pos:start="43:21" pos:end="43:22"><name pos:start="43:21" pos:end="43:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="47:18"><if pos:start="45:5" pos:end="47:18">if <condition pos:start="45:8" pos:end="45:41">(<expr pos:start="45:9" pos:end="45:40"><name pos:start="45:9" pos:end="45:11">tag</name> <operator pos:start="45:13" pos:end="45:14">!=</operator> <call pos:start="45:16" pos:end="45:40"><name pos:start="45:16" pos:end="45:20">MKTAG</name><argument_list pos:start="45:21" pos:end="45:40">(<argument pos:start="45:22" pos:end="45:24"><expr pos:start="45:22" pos:end="45:24"><literal type="char" pos:start="45:22" pos:end="45:24">'X'</literal></expr></argument>, <argument pos:start="45:27" pos:end="45:29"><expr pos:start="45:27" pos:end="45:29"><literal type="char" pos:start="45:27" pos:end="45:29">'W'</literal></expr></argument>, <argument pos:start="45:32" pos:end="45:34"><expr pos:start="45:32" pos:end="45:34"><literal type="char" pos:start="45:32" pos:end="45:34">'M'</literal></expr></argument>, <argument pos:start="45:37" pos:end="45:39"><expr pos:start="45:37" pos:end="45:39"><literal type="char" pos:start="45:37" pos:end="45:39">'A'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:18"><block_content pos:start="47:9" pos:end="47:18">

        <return pos:start="47:9" pos:end="47:18">return <expr pos:start="47:16" pos:end="47:17"><operator pos:start="47:16" pos:end="47:16">-</operator><literal type="number" pos:start="47:17" pos:end="47:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:26">/* parse fmt header */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:24"><expr pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:7">tag</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:23"><name pos:start="53:11" pos:end="53:19">avio_rl32</name><argument_list pos:start="53:20" pos:end="53:23">(<argument pos:start="53:21" pos:end="53:22"><expr pos:start="53:21" pos:end="53:22"><name pos:start="53:21" pos:end="53:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="57:18"><if pos:start="55:5" pos:end="57:18">if <condition pos:start="55:8" pos:end="55:41">(<expr pos:start="55:9" pos:end="55:40"><name pos:start="55:9" pos:end="55:11">tag</name> <operator pos:start="55:13" pos:end="55:14">!=</operator> <call pos:start="55:16" pos:end="55:40"><name pos:start="55:16" pos:end="55:20">MKTAG</name><argument_list pos:start="55:21" pos:end="55:40">(<argument pos:start="55:22" pos:end="55:24"><expr pos:start="55:22" pos:end="55:24"><literal type="char" pos:start="55:22" pos:end="55:24">'f'</literal></expr></argument>, <argument pos:start="55:27" pos:end="55:29"><expr pos:start="55:27" pos:end="55:29"><literal type="char" pos:start="55:27" pos:end="55:29">'m'</literal></expr></argument>, <argument pos:start="55:32" pos:end="55:34"><expr pos:start="55:32" pos:end="55:34"><literal type="char" pos:start="55:32" pos:end="55:34">'t'</literal></expr></argument>, <argument pos:start="55:37" pos:end="55:39"><expr pos:start="55:37" pos:end="55:39"><literal type="char" pos:start="55:37" pos:end="55:39">' '</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="57:9" pos:end="57:18"><block_content pos:start="57:9" pos:end="57:18">

        <return pos:start="57:9" pos:end="57:18">return <expr pos:start="57:16" pos:end="57:17"><operator pos:start="57:16" pos:end="57:16">-</operator><literal type="number" pos:start="57:17" pos:end="57:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:25"><expr pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:8">size</name> <operator pos:start="59:10" pos:end="59:10">=</operator> <call pos:start="59:12" pos:end="59:24"><name pos:start="59:12" pos:end="59:20">avio_rl32</name><argument_list pos:start="59:21" pos:end="59:24">(<argument pos:start="59:22" pos:end="59:23"><expr pos:start="59:22" pos:end="59:23"><name pos:start="59:22" pos:end="59:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:38"><expr pos:start="61:5" pos:end="61:37"><name pos:start="61:5" pos:end="61:6">st</name> <operator pos:start="61:8" pos:end="61:8">=</operator> <call pos:start="61:10" pos:end="61:37"><name pos:start="61:10" pos:end="61:28">avformat_new_stream</name><argument_list pos:start="61:29" pos:end="61:37">(<argument pos:start="61:30" pos:end="61:30"><expr pos:start="61:30" pos:end="61:30"><name pos:start="61:30" pos:end="61:30">s</name></expr></argument>, <argument pos:start="61:33" pos:end="61:36"><expr pos:start="61:33" pos:end="61:36"><name pos:start="61:33" pos:end="61:36">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="65:31"><if pos:start="63:5" pos:end="65:31">if <condition pos:start="63:8" pos:end="63:12">(<expr pos:start="63:9" pos:end="63:11"><operator pos:start="63:9" pos:end="63:9">!</operator><name pos:start="63:10" pos:end="63:11">st</name></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:31"><block_content pos:start="65:9" pos:end="65:31">

        <return pos:start="65:9" pos:end="65:31">return <expr pos:start="65:16" pos:end="65:30"><call pos:start="65:16" pos:end="65:30"><name pos:start="65:16" pos:end="65:22">AVERROR</name><argument_list pos:start="65:23" pos:end="65:30">(<argument pos:start="65:24" pos:end="65:29"><expr pos:start="65:24" pos:end="65:29"><name pos:start="65:24" pos:end="65:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:52"><expr pos:start="69:5" pos:end="69:51"><name pos:start="69:5" pos:end="69:7">ret</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <call pos:start="69:11" pos:end="69:51"><name pos:start="69:11" pos:end="69:27">ff_get_wav_header</name><argument_list pos:start="69:28" pos:end="69:51">(<argument pos:start="69:29" pos:end="69:30"><expr pos:start="69:29" pos:end="69:30"><name pos:start="69:29" pos:end="69:30">pb</name></expr></argument>, <argument pos:start="69:33" pos:end="69:41"><expr pos:start="69:33" pos:end="69:41"><name pos:start="69:33" pos:end="69:41"><name pos:start="69:33" pos:end="69:34">st</name><operator pos:start="69:35" pos:end="69:36">-&gt;</operator><name pos:start="69:37" pos:end="69:41">codec</name></name></expr></argument>, <argument pos:start="69:44" pos:end="69:47"><expr pos:start="69:44" pos:end="69:47"><name pos:start="69:44" pos:end="69:47">size</name></expr></argument>, <argument pos:start="69:50" pos:end="69:50"><expr pos:start="69:50" pos:end="69:50"><literal type="number" pos:start="69:50" pos:end="69:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="71:5" pos:end="73:19"><if pos:start="71:5" pos:end="73:19">if <condition pos:start="71:8" pos:end="71:16">(<expr pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">&lt;</operator> <literal type="number" pos:start="71:15" pos:end="71:15">0</literal></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:19"><block_content pos:start="73:9" pos:end="73:19">

        <return pos:start="73:9" pos:end="73:19">return <expr pos:start="73:16" pos:end="73:18"><name pos:start="73:16" pos:end="73:18">ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:43"><expr pos:start="75:5" pos:end="75:42"><name pos:start="75:5" pos:end="75:20"><name pos:start="75:5" pos:end="75:6">st</name><operator pos:start="75:7" pos:end="75:8">-&gt;</operator><name pos:start="75:9" pos:end="75:20">need_parsing</name></name> <operator pos:start="75:22" pos:end="75:22">=</operator> <name pos:start="75:24" pos:end="75:42">AVSTREAM_PARSE_NONE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="87:7">/* All xWMA files I have seen contained WMAv2 data. If there are files

     * using WMA Pro or some other codec, then we need to figure out the right

     * extradata for that. Thus, ask the user for feedback, but try to go on

     * anyway.

     */</comment>

    <if_stmt pos:start="89:5" pos:end="143:5"><if pos:start="89:5" pos:end="95:5">if <condition pos:start="89:8" pos:end="89:49">(<expr pos:start="89:9" pos:end="89:48"><name pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:10">st</name><operator pos:start="89:11" pos:end="89:12">-&gt;</operator><name pos:start="89:13" pos:end="89:17">codec</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:27">codec_id</name></name> <operator pos:start="89:29" pos:end="89:30">!=</operator> <name pos:start="89:32" pos:end="89:48">AV_CODEC_ID_WMAV2</name></expr>)</condition> <block pos:start="89:51" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:73">

        <expr_stmt pos:start="91:9" pos:end="93:73"><expr pos:start="91:9" pos:end="93:72"><call pos:start="91:9" pos:end="93:72"><name pos:start="91:9" pos:end="91:29">avpriv_request_sample</name><argument_list pos:start="91:30" pos:end="93:72">(<argument pos:start="91:31" pos:end="91:31"><expr pos:start="91:31" pos:end="91:31"><name pos:start="91:31" pos:end="91:31">s</name></expr></argument>, <argument pos:start="91:34" pos:end="91:71"><expr pos:start="91:34" pos:end="91:71"><literal type="string" pos:start="91:34" pos:end="91:71">"Unexpected codec (tag 0x04%x; id %d)"</literal></expr></argument>,

                              <argument pos:start="93:31" pos:end="93:50"><expr pos:start="93:31" pos:end="93:50"><name pos:start="93:31" pos:end="93:50"><name pos:start="93:31" pos:end="93:32">st</name><operator pos:start="93:33" pos:end="93:34">-&gt;</operator><name pos:start="93:35" pos:end="93:39">codec</name><operator pos:start="93:40" pos:end="93:41">-&gt;</operator><name pos:start="93:42" pos:end="93:50">codec_tag</name></name></expr></argument>, <argument pos:start="93:53" pos:end="93:71"><expr pos:start="93:53" pos:end="93:71"><name pos:start="93:53" pos:end="93:71"><name pos:start="93:53" pos:end="93:54">st</name><operator pos:start="93:55" pos:end="93:56">-&gt;</operator><name pos:start="93:57" pos:end="93:61">codec</name><operator pos:start="93:62" pos:end="93:63">-&gt;</operator><name pos:start="93:64" pos:end="93:71">codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="95:7" pos:end="143:5">else <block pos:start="95:12" pos:end="143:5">{<block_content pos:start="111:9" pos:end="141:9">

        <comment type="block" pos:start="97:9" pos:end="109:11">/* In all xWMA files I have seen, there is no extradata. But the WMA

         * codecs require extradata, so we provide our own fake extradata.

         *

         * First, check that there really was no extradata in the header. If

         * there was, then try to use it, after asking the user to provide a

         * sample of this unusual file.

         */</comment>

        <if_stmt pos:start="111:9" pos:end="141:9"><if pos:start="111:9" pos:end="125:9">if <condition pos:start="111:12" pos:end="111:43">(<expr pos:start="111:13" pos:end="111:42"><name pos:start="111:13" pos:end="111:37"><name pos:start="111:13" pos:end="111:14">st</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:21">codec</name><operator pos:start="111:22" pos:end="111:23">-&gt;</operator><name pos:start="111:24" pos:end="111:37">extradata_size</name></name> <operator pos:start="111:39" pos:end="111:40">!=</operator> <literal type="number" pos:start="111:42" pos:end="111:42">0</literal></expr>)</condition> <block pos:start="111:45" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:61">

            <comment type="block" pos:start="113:13" pos:end="119:15">/* Surprise, surprise: We *did* get some extradata. No idea

             * if it will work, but just go on and try it, after asking

             * the user for a sample.

             */</comment>

            <expr_stmt pos:start="121:13" pos:end="123:61"><expr pos:start="121:13" pos:end="123:60"><call pos:start="121:13" pos:end="123:60"><name pos:start="121:13" pos:end="121:33">avpriv_request_sample</name><argument_list pos:start="121:34" pos:end="123:60">(<argument pos:start="121:35" pos:end="121:35"><expr pos:start="121:35" pos:end="121:35"><name pos:start="121:35" pos:end="121:35">s</name></expr></argument>, <argument pos:start="121:38" pos:end="121:70"><expr pos:start="121:38" pos:end="121:70"><literal type="string" pos:start="121:38" pos:end="121:70">"Unexpected extradata (%d bytes)"</literal></expr></argument>,

                                  <argument pos:start="123:35" pos:end="123:59"><expr pos:start="123:35" pos:end="123:59"><name pos:start="123:35" pos:end="123:59"><name pos:start="123:35" pos:end="123:36">st</name><operator pos:start="123:37" pos:end="123:38">-&gt;</operator><name pos:start="123:39" pos:end="123:43">codec</name><operator pos:start="123:44" pos:end="123:45">-&gt;</operator><name pos:start="123:46" pos:end="123:59">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="125:11" pos:end="141:9">else <block pos:start="125:16" pos:end="141:9">{<block_content pos:start="127:13" pos:end="139:41">

            <expr_stmt pos:start="127:13" pos:end="127:42"><expr pos:start="127:13" pos:end="127:41"><name pos:start="127:13" pos:end="127:37"><name pos:start="127:13" pos:end="127:14">st</name><operator pos:start="127:15" pos:end="127:16">-&gt;</operator><name pos:start="127:17" pos:end="127:21">codec</name><operator pos:start="127:22" pos:end="127:23">-&gt;</operator><name pos:start="127:24" pos:end="127:37">extradata_size</name></name> <operator pos:start="127:39" pos:end="127:39">=</operator> <literal type="number" pos:start="127:41" pos:end="127:41">6</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:85"><expr pos:start="129:13" pos:end="129:84"><name pos:start="129:13" pos:end="129:32"><name pos:start="129:13" pos:end="129:14">st</name><operator pos:start="129:15" pos:end="129:16">-&gt;</operator><name pos:start="129:17" pos:end="129:21">codec</name><operator pos:start="129:22" pos:end="129:23">-&gt;</operator><name pos:start="129:24" pos:end="129:32">extradata</name></name>      <operator pos:start="129:39" pos:end="129:39">=</operator> <call pos:start="129:41" pos:end="129:84"><name pos:start="129:41" pos:end="129:50">av_mallocz</name><argument_list pos:start="129:51" pos:end="129:84">(<argument pos:start="129:52" pos:end="129:83"><expr pos:start="129:52" pos:end="129:83"><literal type="number" pos:start="129:52" pos:end="129:54">6</literal> <operator pos:start="129:54" pos:end="129:54">+</operator> <name pos:start="129:56" pos:end="129:83">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="131:13" pos:end="133:39"><if pos:start="131:13" pos:end="133:39">if <condition pos:start="131:16" pos:end="131:38">(<expr pos:start="131:17" pos:end="131:37"><operator pos:start="131:17" pos:end="131:17">!</operator><name pos:start="131:18" pos:end="131:37"><name pos:start="131:18" pos:end="131:19">st</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:26">codec</name><operator pos:start="131:27" pos:end="131:28">-&gt;</operator><name pos:start="131:29" pos:end="131:37">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="133:17" pos:end="133:39"><block_content pos:start="133:17" pos:end="133:39">

                <return pos:start="133:17" pos:end="133:39">return <expr pos:start="133:24" pos:end="133:38"><call pos:start="133:24" pos:end="133:38"><name pos:start="133:24" pos:end="133:30">AVERROR</name><argument_list pos:start="133:31" pos:end="133:38">(<argument pos:start="133:32" pos:end="133:37"><expr pos:start="133:32" pos:end="133:37"><name pos:start="133:32" pos:end="133:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



            <comment type="block" pos:start="137:13" pos:end="137:72">/* setup extradata with our experimentally obtained value */</comment>

            <expr_stmt pos:start="139:13" pos:end="139:41"><expr pos:start="139:13" pos:end="139:40"><name pos:start="139:13" pos:end="139:35"><name pos:start="139:13" pos:end="139:14">st</name><operator pos:start="139:15" pos:end="139:16">-&gt;</operator><name pos:start="139:17" pos:end="139:21">codec</name><operator pos:start="139:22" pos:end="139:23">-&gt;</operator><name pos:start="139:24" pos:end="139:32">extradata</name><index pos:start="139:33" pos:end="139:35">[<expr pos:start="139:34" pos:end="139:34"><literal type="number" pos:start="139:34" pos:end="139:34">4</literal></expr>]</index></name> <operator pos:start="139:37" pos:end="139:37">=</operator> <literal type="number" pos:start="139:39" pos:end="139:40">31</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="147:5" pos:end="155:5"><if pos:start="147:5" pos:end="155:5">if <condition pos:start="147:8" pos:end="147:29">(<expr pos:start="147:9" pos:end="147:28"><operator pos:start="147:9" pos:end="147:9">!</operator><name pos:start="147:10" pos:end="147:28"><name pos:start="147:10" pos:end="147:11">st</name><operator pos:start="147:12" pos:end="147:13">-&gt;</operator><name pos:start="147:14" pos:end="147:18">codec</name><operator pos:start="147:19" pos:end="147:20">-&gt;</operator><name pos:start="147:21" pos:end="147:28">channels</name></name></expr>)</condition> <block pos:start="147:31" pos:end="155:5">{<block_content pos:start="149:9" pos:end="153:35">

        <expr_stmt pos:start="149:9" pos:end="151:36"><expr pos:start="149:9" pos:end="151:35"><call pos:start="149:9" pos:end="151:35"><name pos:start="149:9" pos:end="149:14">av_log</name><argument_list pos:start="149:15" pos:end="151:35">(<argument pos:start="149:16" pos:end="149:16"><expr pos:start="149:16" pos:end="149:16"><name pos:start="149:16" pos:end="149:16">s</name></expr></argument>, <argument pos:start="149:19" pos:end="149:32"><expr pos:start="149:19" pos:end="149:32"><name pos:start="149:19" pos:end="149:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="149:35" pos:end="149:63"><expr pos:start="149:35" pos:end="149:63"><literal type="string" pos:start="149:35" pos:end="149:63">"Invalid channel count: %d\n"</literal></expr></argument>,

               <argument pos:start="151:16" pos:end="151:34"><expr pos:start="151:16" pos:end="151:34"><name pos:start="151:16" pos:end="151:34"><name pos:start="151:16" pos:end="151:17">st</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:24">codec</name><operator pos:start="151:25" pos:end="151:26">-&gt;</operator><name pos:start="151:27" pos:end="151:34">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="153:9" pos:end="153:35">return <expr pos:start="153:16" pos:end="153:34"><name pos:start="153:16" pos:end="153:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="157:5" pos:end="165:5"><if pos:start="157:5" pos:end="165:5">if <condition pos:start="157:8" pos:end="157:42">(<expr pos:start="157:9" pos:end="157:41"><operator pos:start="157:9" pos:end="157:9">!</operator><name pos:start="157:10" pos:end="157:41"><name pos:start="157:10" pos:end="157:11">st</name><operator pos:start="157:12" pos:end="157:13">-&gt;</operator><name pos:start="157:14" pos:end="157:18">codec</name><operator pos:start="157:19" pos:end="157:20">-&gt;</operator><name pos:start="157:21" pos:end="157:41">bits_per_coded_sample</name></name></expr>)</condition> <block pos:start="157:44" pos:end="165:5">{<block_content pos:start="159:9" pos:end="163:35">

        <expr_stmt pos:start="159:9" pos:end="161:49"><expr pos:start="159:9" pos:end="161:48"><call pos:start="159:9" pos:end="161:48"><name pos:start="159:9" pos:end="159:14">av_log</name><argument_list pos:start="159:15" pos:end="161:48">(<argument pos:start="159:16" pos:end="159:16"><expr pos:start="159:16" pos:end="159:16"><name pos:start="159:16" pos:end="159:16">s</name></expr></argument>, <argument pos:start="159:19" pos:end="159:32"><expr pos:start="159:19" pos:end="159:32"><name pos:start="159:19" pos:end="159:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="159:35" pos:end="159:71"><expr pos:start="159:35" pos:end="159:71"><literal type="string" pos:start="159:35" pos:end="159:71">"Invalid bits_per_coded_sample: %d\n"</literal></expr></argument>,

               <argument pos:start="161:16" pos:end="161:47"><expr pos:start="161:16" pos:end="161:47"><name pos:start="161:16" pos:end="161:47"><name pos:start="161:16" pos:end="161:17">st</name><operator pos:start="161:18" pos:end="161:19">-&gt;</operator><name pos:start="161:20" pos:end="161:24">codec</name><operator pos:start="161:25" pos:end="161:26">-&gt;</operator><name pos:start="161:27" pos:end="161:47">bits_per_coded_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="163:9" pos:end="163:35">return <expr pos:start="163:16" pos:end="163:34"><name pos:start="163:16" pos:end="163:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="169:5" pos:end="169:29">/* set the sample rate */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:59"><expr pos:start="171:5" pos:end="171:58"><call pos:start="171:5" pos:end="171:58"><name pos:start="171:5" pos:end="171:23">avpriv_set_pts_info</name><argument_list pos:start="171:24" pos:end="171:58">(<argument pos:start="171:25" pos:end="171:26"><expr pos:start="171:25" pos:end="171:26"><name pos:start="171:25" pos:end="171:26">st</name></expr></argument>, <argument pos:start="171:29" pos:end="171:30"><expr pos:start="171:29" pos:end="171:30"><literal type="number" pos:start="171:29" pos:end="171:30">64</literal></expr></argument>, <argument pos:start="171:33" pos:end="171:33"><expr pos:start="171:33" pos:end="171:33"><literal type="number" pos:start="171:33" pos:end="171:33">1</literal></expr></argument>, <argument pos:start="171:36" pos:end="171:57"><expr pos:start="171:36" pos:end="171:57"><name pos:start="171:36" pos:end="171:57"><name pos:start="171:36" pos:end="171:37">st</name><operator pos:start="171:38" pos:end="171:39">-&gt;</operator><name pos:start="171:40" pos:end="171:44">codec</name><operator pos:start="171:45" pos:end="171:46">-&gt;</operator><name pos:start="171:47" pos:end="171:57">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:41">/* parse the remaining RIFF chunks */</comment>

    <for pos:start="177:5" pos:end="287:5">for <control pos:start="177:9" pos:end="177:12">(<init pos:start="177:10" pos:end="177:10">;</init><condition pos:start="177:11" pos:end="177:11">;</condition><incr/>)</control> <block pos:start="177:14" pos:end="287:5">{<block_content pos:start="179:9" pos:end="285:28">

        <if_stmt pos:start="179:9" pos:end="185:9"><if pos:start="179:9" pos:end="185:9">if <condition pos:start="179:12" pos:end="179:28">(<expr pos:start="179:13" pos:end="179:27"><name pos:start="179:13" pos:end="179:27"><name pos:start="179:13" pos:end="179:14">pb</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:27">eof_reached</name></name></expr>)</condition> <block pos:start="179:30" pos:end="185:9">{<block_content pos:start="181:13" pos:end="183:22">

            <expr_stmt pos:start="181:13" pos:end="181:30"><expr pos:start="181:13" pos:end="181:29"><name pos:start="181:13" pos:end="181:15">ret</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <name pos:start="181:19" pos:end="181:29">AVERROR_EOF</name></expr>;</expr_stmt>

            <goto pos:start="183:13" pos:end="183:22">goto <name pos:start="183:18" pos:end="183:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="187:9" pos:end="187:33">/* read next chunk tag */</comment>

        <expr_stmt pos:start="189:9" pos:end="189:28"><expr pos:start="189:9" pos:end="189:27"><name pos:start="189:9" pos:end="189:11">tag</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <call pos:start="189:15" pos:end="189:27"><name pos:start="189:15" pos:end="189:23">avio_rl32</name><argument_list pos:start="189:24" pos:end="189:27">(<argument pos:start="189:25" pos:end="189:26"><expr pos:start="189:25" pos:end="189:26"><name pos:start="189:25" pos:end="189:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:29"><expr pos:start="191:9" pos:end="191:28"><name pos:start="191:9" pos:end="191:12">size</name> <operator pos:start="191:14" pos:end="191:14">=</operator> <call pos:start="191:16" pos:end="191:28"><name pos:start="191:16" pos:end="191:24">avio_rl32</name><argument_list pos:start="191:25" pos:end="191:28">(<argument pos:start="191:26" pos:end="191:27"><expr pos:start="191:26" pos:end="191:27"><name pos:start="191:26" pos:end="191:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="193:9" pos:end="283:9"><if pos:start="193:9" pos:end="199:9">if <condition pos:start="193:12" pos:end="193:45">(<expr pos:start="193:13" pos:end="193:44"><name pos:start="193:13" pos:end="193:15">tag</name> <operator pos:start="193:17" pos:end="193:18">==</operator> <call pos:start="193:20" pos:end="193:44"><name pos:start="193:20" pos:end="193:24">MKTAG</name><argument_list pos:start="193:25" pos:end="193:44">(<argument pos:start="193:26" pos:end="193:28"><expr pos:start="193:26" pos:end="193:28"><literal type="char" pos:start="193:26" pos:end="193:28">'d'</literal></expr></argument>, <argument pos:start="193:31" pos:end="193:33"><expr pos:start="193:31" pos:end="193:33"><literal type="char" pos:start="193:31" pos:end="193:33">'a'</literal></expr></argument>, <argument pos:start="193:36" pos:end="193:38"><expr pos:start="193:36" pos:end="193:38"><literal type="char" pos:start="193:36" pos:end="193:38">'t'</literal></expr></argument>, <argument pos:start="193:41" pos:end="193:43"><expr pos:start="193:41" pos:end="193:43"><literal type="char" pos:start="193:41" pos:end="193:43">'a'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="193:47" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:18">

            <comment type="block" pos:start="195:13" pos:end="195:59">/* We assume that the data chunk comes last. */</comment>

            <break pos:start="197:13" pos:end="197:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="199:11" pos:end="283:9">else if <condition pos:start="199:19" pos:end="199:49">(<expr pos:start="199:20" pos:end="199:48"><name pos:start="199:20" pos:end="199:22">tag</name> <operator pos:start="199:24" pos:end="199:25">==</operator> <call pos:start="199:27" pos:end="199:48"><name pos:start="199:27" pos:end="199:31">MKTAG</name><argument_list pos:start="199:32" pos:end="199:48">(<argument pos:start="199:33" pos:end="199:35"><expr pos:start="199:33" pos:end="199:35"><literal type="char" pos:start="199:33" pos:end="199:35">'d'</literal></expr></argument>,<argument pos:start="199:37" pos:end="199:39"><expr pos:start="199:37" pos:end="199:39"><literal type="char" pos:start="199:37" pos:end="199:39">'p'</literal></expr></argument>,<argument pos:start="199:41" pos:end="199:43"><expr pos:start="199:41" pos:end="199:43"><literal type="char" pos:start="199:41" pos:end="199:43">'d'</literal></expr></argument>,<argument pos:start="199:45" pos:end="199:47"><expr pos:start="199:45" pos:end="199:47"><literal type="char" pos:start="199:45" pos:end="199:47">'s'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="199:51" pos:end="283:9">{<block_content pos:start="223:13" pos:end="281:13">

            <comment type="block" pos:start="201:13" pos:end="217:15">/* Quoting the MSDN xWMA docs on the dpds chunk: "Contains the

             * decoded packet cumulative data size array, each element is the

             * number of bytes accumulated after the corresponding xWMA packet

             * is decoded in order."

             *

             * Each packet has size equal to st-&gt;codec-&gt;block_align, which in

             * all cases I saw so far was always 2230. Thus, we can use the

             * dpds data to compute a seeking index.

             */</comment>



            <comment type="block" pos:start="221:13" pos:end="221:65">/* Error out if there is more than one dpds chunk. */</comment>

            <if_stmt pos:start="223:13" pos:end="231:13"><if pos:start="223:13" pos:end="231:13">if <condition pos:start="223:16" pos:end="223:27">(<expr pos:start="223:17" pos:end="223:26"><name pos:start="223:17" pos:end="223:26">dpds_table</name></expr>)</condition> <block pos:start="223:29" pos:end="231:13">{<block_content pos:start="225:17" pos:end="229:26">

                <expr_stmt pos:start="225:17" pos:end="225:69"><expr pos:start="225:17" pos:end="225:68"><call pos:start="225:17" pos:end="225:68"><name pos:start="225:17" pos:end="225:22">av_log</name><argument_list pos:start="225:23" pos:end="225:68">(<argument pos:start="225:24" pos:end="225:24"><expr pos:start="225:24" pos:end="225:24"><name pos:start="225:24" pos:end="225:24">s</name></expr></argument>, <argument pos:start="225:27" pos:end="225:38"><expr pos:start="225:27" pos:end="225:38"><name pos:start="225:27" pos:end="225:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="225:41" pos:end="225:67"><expr pos:start="225:41" pos:end="225:67"><literal type="string" pos:start="225:41" pos:end="225:67">"two dpds chunks present\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="227:17" pos:end="227:42"><expr pos:start="227:17" pos:end="227:41"><name pos:start="227:17" pos:end="227:19">ret</name> <operator pos:start="227:21" pos:end="227:21">=</operator> <name pos:start="227:23" pos:end="227:41">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

                <goto pos:start="229:17" pos:end="229:26">goto <name pos:start="229:22" pos:end="229:25">fail</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="235:13" pos:end="235:66">/* Compute the number of entries in the dpds chunk. */</comment>

            <if_stmt pos:start="237:13" pos:end="243:13"><if pos:start="237:13" pos:end="243:13">if <condition pos:start="237:16" pos:end="237:25">(<expr pos:start="237:17" pos:end="237:24"><name pos:start="237:17" pos:end="237:20">size</name> <operator pos:start="237:22" pos:end="237:22">&amp;</operator> <literal type="number" pos:start="237:24" pos:end="237:24">3</literal></expr>)</condition> <block pos:start="237:27" pos:end="243:13">{<block_content pos:start="239:17" pos:end="241:79">  <comment type="block" pos:start="237:30" pos:end="237:67">/* Size should be divisible by four */</comment>

                <expr_stmt pos:start="239:17" pos:end="241:79"><expr pos:start="239:17" pos:end="241:78"><call pos:start="239:17" pos:end="241:78"><name pos:start="239:17" pos:end="239:22">av_log</name><argument_list pos:start="239:23" pos:end="241:78">(<argument pos:start="239:24" pos:end="239:24"><expr pos:start="239:24" pos:end="239:24"><name pos:start="239:24" pos:end="239:24">s</name></expr></argument>, <argument pos:start="239:27" pos:end="239:40"><expr pos:start="239:27" pos:end="239:40"><name pos:start="239:27" pos:end="239:40">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="241:24" pos:end="241:71"><expr pos:start="241:24" pos:end="241:71"><literal type="string" pos:start="241:24" pos:end="241:42">"dpds chunk size %"</literal><name pos:start="241:43" pos:end="241:48">PRId64</name><literal type="string" pos:start="241:49" pos:end="241:71">" not divisible by 4\n"</literal></expr></argument>, <argument pos:start="241:74" pos:end="241:77"><expr pos:start="241:74" pos:end="241:77"><name pos:start="241:74" pos:end="241:77">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:39"><expr pos:start="245:13" pos:end="245:38"><name pos:start="245:13" pos:end="245:27">dpds_table_size</name> <operator pos:start="245:29" pos:end="245:29">=</operator> <name pos:start="245:31" pos:end="245:34">size</name> <operator pos:start="245:36" pos:end="245:36">/</operator> <literal type="number" pos:start="245:38" pos:end="245:38">4</literal></expr>;</expr_stmt>

            <if_stmt pos:start="247:13" pos:end="255:13"><if pos:start="247:13" pos:end="255:13">if <condition pos:start="247:16" pos:end="247:71">(<expr pos:start="247:17" pos:end="247:70"><name pos:start="247:17" pos:end="247:31">dpds_table_size</name> <operator pos:start="247:33" pos:end="247:34">==</operator> <literal type="number" pos:start="247:36" pos:end="247:36">0</literal> <operator pos:start="247:38" pos:end="247:39">||</operator> <name pos:start="247:41" pos:end="247:55">dpds_table_size</name> <operator pos:start="247:57" pos:end="247:58">&gt;=</operator> <name pos:start="247:60" pos:end="247:66">INT_MAX</name> <operator pos:start="247:68" pos:end="247:68">/</operator> <literal type="number" pos:start="247:70" pos:end="247:70">4</literal></expr>)</condition> <block pos:start="247:73" pos:end="255:13">{<block_content pos:start="249:17" pos:end="253:43">

                <expr_stmt pos:start="249:17" pos:end="251:68"><expr pos:start="249:17" pos:end="251:67"><call pos:start="249:17" pos:end="251:67"><name pos:start="249:17" pos:end="249:22">av_log</name><argument_list pos:start="249:23" pos:end="251:67">(<argument pos:start="249:24" pos:end="249:24"><expr pos:start="249:24" pos:end="249:24"><name pos:start="249:24" pos:end="249:24">s</name></expr></argument>, <argument pos:start="249:27" pos:end="249:38"><expr pos:start="249:27" pos:end="249:38"><name pos:start="249:27" pos:end="249:38">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="251:24" pos:end="251:60"><expr pos:start="251:24" pos:end="251:60"><literal type="string" pos:start="251:24" pos:end="251:42">"dpds chunk size %"</literal><name pos:start="251:43" pos:end="251:48">PRId64</name><literal type="string" pos:start="251:49" pos:end="251:60">" invalid\n"</literal></expr></argument>, <argument pos:start="251:63" pos:end="251:66"><expr pos:start="251:63" pos:end="251:66"><name pos:start="251:63" pos:end="251:66">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="253:17" pos:end="253:43">return <expr pos:start="253:24" pos:end="253:42"><name pos:start="253:24" pos:end="253:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="259:13" pos:end="263:15">/* Allocate some temporary storage to keep the dpds data around.

             * for processing later on.

             */</comment>

            <expr_stmt pos:start="265:13" pos:end="265:71"><expr pos:start="265:13" pos:end="265:70"><name pos:start="265:13" pos:end="265:22">dpds_table</name> <operator pos:start="265:24" pos:end="265:24">=</operator> <call pos:start="265:26" pos:end="265:70"><name pos:start="265:26" pos:end="265:34">av_malloc</name><argument_list pos:start="265:35" pos:end="265:70">(<argument pos:start="265:36" pos:end="265:69"><expr pos:start="265:36" pos:end="265:69"><name pos:start="265:36" pos:end="265:50">dpds_table_size</name> <operator pos:start="265:52" pos:end="265:52">*</operator> <sizeof pos:start="265:54" pos:end="265:69">sizeof<argument_list pos:start="265:60" pos:end="265:69">(<argument pos:start="265:61" pos:end="265:68"><expr pos:start="265:61" pos:end="265:68"><name pos:start="265:61" pos:end="265:68">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="267:13" pos:end="271:13"><if pos:start="267:13" pos:end="271:13">if <condition pos:start="267:16" pos:end="267:28">(<expr pos:start="267:17" pos:end="267:27"><operator pos:start="267:17" pos:end="267:17">!</operator><name pos:start="267:18" pos:end="267:27">dpds_table</name></expr>)</condition> <block pos:start="267:30" pos:end="271:13">{<block_content pos:start="269:17" pos:end="269:39">

                <return pos:start="269:17" pos:end="269:39">return <expr pos:start="269:24" pos:end="269:38"><call pos:start="269:24" pos:end="269:38"><name pos:start="269:24" pos:end="269:30">AVERROR</name><argument_list pos:start="269:31" pos:end="269:38">(<argument pos:start="269:32" pos:end="269:37"><expr pos:start="269:32" pos:end="269:37"><name pos:start="269:32" pos:end="269:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <for pos:start="275:13" pos:end="281:13">for <control pos:start="275:17" pos:end="275:49">(<init pos:start="275:18" pos:end="275:23"><expr pos:start="275:18" pos:end="275:22"><name pos:start="275:18" pos:end="275:18">i</name> <operator pos:start="275:20" pos:end="275:20">=</operator> <literal type="number" pos:start="275:22" pos:end="275:22">0</literal></expr>;</init> <condition pos:start="275:25" pos:end="275:44"><expr pos:start="275:25" pos:end="275:43"><name pos:start="275:25" pos:end="275:25">i</name> <operator pos:start="275:27" pos:end="275:27">&lt;</operator> <name pos:start="275:29" pos:end="275:43">dpds_table_size</name></expr>;</condition> <incr pos:start="275:46" pos:end="275:48"><expr pos:start="275:46" pos:end="275:48"><operator pos:start="275:46" pos:end="275:47">++</operator><name pos:start="275:48" pos:end="275:48">i</name></expr></incr>)</control> <block pos:start="275:51" pos:end="281:13">{<block_content pos:start="277:17" pos:end="279:26">

                <expr_stmt pos:start="277:17" pos:end="277:46"><expr pos:start="277:17" pos:end="277:45"><name pos:start="277:17" pos:end="277:29"><name pos:start="277:17" pos:end="277:26">dpds_table</name><index pos:start="277:27" pos:end="277:29">[<expr pos:start="277:28" pos:end="277:28"><name pos:start="277:28" pos:end="277:28">i</name></expr>]</index></name> <operator pos:start="277:31" pos:end="277:31">=</operator> <call pos:start="277:33" pos:end="277:45"><name pos:start="277:33" pos:end="277:41">avio_rl32</name><argument_list pos:start="277:42" pos:end="277:45">(<argument pos:start="277:43" pos:end="277:44"><expr pos:start="277:43" pos:end="277:44"><name pos:start="277:43" pos:end="277:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="279:17" pos:end="279:26"><expr pos:start="279:17" pos:end="279:25"><name pos:start="279:17" pos:end="279:20">size</name> <operator pos:start="279:22" pos:end="279:23">-=</operator> <literal type="number" pos:start="279:25" pos:end="279:25">4</literal></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:28"><expr pos:start="285:9" pos:end="285:27"><call pos:start="285:9" pos:end="285:27"><name pos:start="285:9" pos:end="285:17">avio_skip</name><argument_list pos:start="285:18" pos:end="285:27">(<argument pos:start="285:19" pos:end="285:20"><expr pos:start="285:19" pos:end="285:20"><name pos:start="285:19" pos:end="285:20">pb</name></expr></argument>, <argument pos:start="285:23" pos:end="285:26"><expr pos:start="285:23" pos:end="285:26"><name pos:start="285:23" pos:end="285:26">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="291:5" pos:end="291:39">/* Determine overall data length */</comment>

    <if_stmt pos:start="293:5" pos:end="299:5"><if pos:start="293:5" pos:end="299:5">if <condition pos:start="293:8" pos:end="293:17">(<expr pos:start="293:9" pos:end="293:16"><name pos:start="293:9" pos:end="293:12">size</name> <operator pos:start="293:14" pos:end="293:14">&lt;</operator> <literal type="number" pos:start="293:16" pos:end="293:16">0</literal></expr>)</condition> <block pos:start="293:19" pos:end="299:5">{<block_content pos:start="295:9" pos:end="297:18">

        <expr_stmt pos:start="295:9" pos:end="295:34"><expr pos:start="295:9" pos:end="295:33"><name pos:start="295:9" pos:end="295:11">ret</name> <operator pos:start="295:13" pos:end="295:13">=</operator> <name pos:start="295:15" pos:end="295:33">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

        <goto pos:start="297:9" pos:end="297:18">goto <name pos:start="297:14" pos:end="297:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="301:5" pos:end="307:46"><if pos:start="301:5" pos:end="305:5">if <condition pos:start="301:8" pos:end="301:14">(<expr pos:start="301:9" pos:end="301:13"><operator pos:start="301:9" pos:end="301:9">!</operator><name pos:start="301:10" pos:end="301:13">size</name></expr>)</condition> <block pos:start="301:16" pos:end="305:5">{<block_content pos:start="303:9" pos:end="303:35">

        <expr_stmt pos:start="303:9" pos:end="303:35"><expr pos:start="303:9" pos:end="303:34"><name pos:start="303:9" pos:end="303:22"><name pos:start="303:9" pos:end="303:12">xwma</name><operator pos:start="303:13" pos:end="303:14">-&gt;</operator><name pos:start="303:15" pos:end="303:22">data_end</name></name> <operator pos:start="303:24" pos:end="303:24">=</operator> <name pos:start="303:26" pos:end="303:34">INT64_MAX</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="305:7" pos:end="307:46">else<block type="pseudo" pos:start="307:9" pos:end="307:46"><block_content pos:start="307:9" pos:end="307:46">

        <expr_stmt pos:start="307:9" pos:end="307:46"><expr pos:start="307:9" pos:end="307:45"><name pos:start="307:9" pos:end="307:22"><name pos:start="307:9" pos:end="307:12">xwma</name><operator pos:start="307:13" pos:end="307:14">-&gt;</operator><name pos:start="307:15" pos:end="307:22">data_end</name></name> <operator pos:start="307:24" pos:end="307:24">=</operator> <call pos:start="307:26" pos:end="307:38"><name pos:start="307:26" pos:end="307:34">avio_tell</name><argument_list pos:start="307:35" pos:end="307:38">(<argument pos:start="307:36" pos:end="307:37"><expr pos:start="307:36" pos:end="307:37"><name pos:start="307:36" pos:end="307:37">pb</name></expr></argument>)</argument_list></call> <operator pos:start="307:40" pos:end="307:40">+</operator> <name pos:start="307:42" pos:end="307:45">size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>





    <if_stmt pos:start="313:5" pos:end="405:5"><if pos:start="313:5" pos:end="393:5">if <condition pos:start="313:8" pos:end="313:38">(<expr pos:start="313:9" pos:end="313:37"><name pos:start="313:9" pos:end="313:18">dpds_table</name> <operator pos:start="313:20" pos:end="313:21">&amp;&amp;</operator> <name pos:start="313:23" pos:end="313:37">dpds_table_size</name></expr>)</condition> <block pos:start="313:40" pos:end="393:5">{<block_content pos:start="315:9" pos:end="391:9">

        <decl_stmt pos:start="315:9" pos:end="315:24"><decl pos:start="315:9" pos:end="315:23"><type pos:start="315:9" pos:end="315:15"><name pos:start="315:9" pos:end="315:15">int64_t</name></type> <name pos:start="315:17" pos:end="315:23">cur_pos</name></decl>;</decl_stmt>

        <decl_stmt pos:start="317:9" pos:end="319:80"><decl pos:start="317:9" pos:end="319:79"><type pos:start="317:9" pos:end="317:22"><specifier pos:start="317:9" pos:end="317:13">const</specifier> <name pos:start="317:15" pos:end="317:22">uint32_t</name></type> <name pos:start="317:24" pos:end="317:39">bytes_per_sample</name>

                <init pos:start="319:17" pos:end="319:79">= <expr pos:start="319:19" pos:end="319:79"><operator pos:start="319:19" pos:end="319:19">(</operator><name pos:start="319:20" pos:end="319:38"><name pos:start="319:20" pos:end="319:21">st</name><operator pos:start="319:22" pos:end="319:23">-&gt;</operator><name pos:start="319:24" pos:end="319:28">codec</name><operator pos:start="319:29" pos:end="319:30">-&gt;</operator><name pos:start="319:31" pos:end="319:38">channels</name></name> <operator pos:start="319:40" pos:end="319:40">*</operator> <name pos:start="319:42" pos:end="319:73"><name pos:start="319:42" pos:end="319:43">st</name><operator pos:start="319:44" pos:end="319:45">-&gt;</operator><name pos:start="319:46" pos:end="319:50">codec</name><operator pos:start="319:51" pos:end="319:52">-&gt;</operator><name pos:start="319:53" pos:end="319:73">bits_per_coded_sample</name></name><operator pos:start="319:74" pos:end="319:74">)</operator> <operator pos:start="319:76" pos:end="319:77">&gt;&gt;</operator> <literal type="number" pos:start="319:79" pos:end="319:79">3</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="323:9" pos:end="323:74">/* Estimate the duration from the total number of output bytes. */</comment>

        <decl_stmt pos:start="325:9" pos:end="325:77"><decl pos:start="325:9" pos:end="325:76"><type pos:start="325:9" pos:end="325:22"><specifier pos:start="325:9" pos:end="325:13">const</specifier> <name pos:start="325:15" pos:end="325:22">uint64_t</name></type> <name pos:start="325:24" pos:end="325:42">total_decoded_bytes</name> <init pos:start="325:44" pos:end="325:76">= <expr pos:start="325:46" pos:end="325:76"><name pos:start="325:46" pos:end="325:76"><name pos:start="325:46" pos:end="325:55">dpds_table</name><index pos:start="325:56" pos:end="325:76">[<expr pos:start="325:57" pos:end="325:75"><name pos:start="325:57" pos:end="325:71">dpds_table_size</name> <operator pos:start="325:73" pos:end="325:73">-</operator> <literal type="number" pos:start="325:75" pos:end="325:75">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="329:9" pos:end="341:9"><if pos:start="329:9" pos:end="341:9">if <condition pos:start="329:12" pos:end="329:30">(<expr pos:start="329:13" pos:end="329:29"><operator pos:start="329:13" pos:end="329:13">!</operator><name pos:start="329:14" pos:end="329:29">bytes_per_sample</name></expr>)</condition> <block pos:start="329:32" pos:end="341:9">{<block_content pos:start="331:13" pos:end="339:22">

            <expr_stmt pos:start="331:13" pos:end="335:74"><expr pos:start="331:13" pos:end="335:73"><call pos:start="331:13" pos:end="335:73"><name pos:start="331:13" pos:end="331:18">av_log</name><argument_list pos:start="331:19" pos:end="335:73">(<argument pos:start="331:20" pos:end="331:20"><expr pos:start="331:20" pos:end="331:20"><name pos:start="331:20" pos:end="331:20">s</name></expr></argument>, <argument pos:start="331:23" pos:end="331:34"><expr pos:start="331:23" pos:end="331:34"><name pos:start="331:23" pos:end="331:34">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="333:20" pos:end="333:71"><expr pos:start="333:20" pos:end="333:71"><literal type="string" pos:start="333:20" pos:end="333:71">"Invalid bits_per_coded_sample %d for %d channels\n"</literal></expr></argument>,

                   <argument pos:start="335:20" pos:end="335:51"><expr pos:start="335:20" pos:end="335:51"><name pos:start="335:20" pos:end="335:51"><name pos:start="335:20" pos:end="335:21">st</name><operator pos:start="335:22" pos:end="335:23">-&gt;</operator><name pos:start="335:24" pos:end="335:28">codec</name><operator pos:start="335:29" pos:end="335:30">-&gt;</operator><name pos:start="335:31" pos:end="335:51">bits_per_coded_sample</name></name></expr></argument>, <argument pos:start="335:54" pos:end="335:72"><expr pos:start="335:54" pos:end="335:72"><name pos:start="335:54" pos:end="335:72"><name pos:start="335:54" pos:end="335:55">st</name><operator pos:start="335:56" pos:end="335:57">-&gt;</operator><name pos:start="335:58" pos:end="335:62">codec</name><operator pos:start="335:63" pos:end="335:64">-&gt;</operator><name pos:start="335:65" pos:end="335:72">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="337:13" pos:end="337:38"><expr pos:start="337:13" pos:end="337:37"><name pos:start="337:13" pos:end="337:15">ret</name> <operator pos:start="337:17" pos:end="337:17">=</operator> <name pos:start="337:19" pos:end="337:37">AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

            <goto pos:start="339:13" pos:end="339:22">goto <name pos:start="339:18" pos:end="339:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="345:9" pos:end="345:62"><expr pos:start="345:9" pos:end="345:61"><name pos:start="345:9" pos:end="345:20"><name pos:start="345:9" pos:end="345:10">st</name><operator pos:start="345:11" pos:end="345:12">-&gt;</operator><name pos:start="345:13" pos:end="345:20">duration</name></name> <operator pos:start="345:22" pos:end="345:22">=</operator> <name pos:start="345:24" pos:end="345:42">total_decoded_bytes</name> <operator pos:start="345:44" pos:end="345:44">/</operator> <name pos:start="345:46" pos:end="345:61">bytes_per_sample</name></expr>;</expr_stmt>



        <comment type="block" pos:start="349:9" pos:end="365:11">/* Use the dpds data to build a seek table.  We can only do this after

         * we know the offset to the data chunk, as we need that to determine

         * the actual offset to each input block.

         * Note: If we allowed ourselves to assume that the data chunk always

         * follows immediately after the dpds block, we could of course guess

         * the data block's start offset already while reading the dpds chunk.

         * I decided against that, just in case other chunks ever are

         * discovered.

         */</comment>

        <expr_stmt pos:start="367:9" pos:end="367:32"><expr pos:start="367:9" pos:end="367:31"><name pos:start="367:9" pos:end="367:15">cur_pos</name> <operator pos:start="367:17" pos:end="367:17">=</operator> <call pos:start="367:19" pos:end="367:31"><name pos:start="367:19" pos:end="367:27">avio_tell</name><argument_list pos:start="367:28" pos:end="367:31">(<argument pos:start="367:29" pos:end="367:30"><expr pos:start="367:29" pos:end="367:30"><name pos:start="367:29" pos:end="367:30">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="369:9" pos:end="391:9">for <control pos:start="369:13" pos:end="369:45">(<init pos:start="369:14" pos:end="369:19"><expr pos:start="369:14" pos:end="369:18"><name pos:start="369:14" pos:end="369:14">i</name> <operator pos:start="369:16" pos:end="369:16">=</operator> <literal type="number" pos:start="369:18" pos:end="369:18">0</literal></expr>;</init> <condition pos:start="369:21" pos:end="369:40"><expr pos:start="369:21" pos:end="369:39"><name pos:start="369:21" pos:end="369:21">i</name> <operator pos:start="369:23" pos:end="369:23">&lt;</operator> <name pos:start="369:25" pos:end="369:39">dpds_table_size</name></expr>;</condition> <incr pos:start="369:42" pos:end="369:44"><expr pos:start="369:42" pos:end="369:44"><operator pos:start="369:42" pos:end="369:43">++</operator><name pos:start="369:44" pos:end="369:44">i</name></expr></incr>)</control> <block pos:start="369:47" pos:end="391:9">{<block_content pos:start="379:13" pos:end="389:49">

            <comment type="block" pos:start="371:13" pos:end="377:15">/* From the number of output bytes that would accumulate in the

             * output buffer after decoding the first (i+1) packets, we compute

             * an offset / timestamp pair.

             */</comment>

            <expr_stmt pos:start="379:13" pos:end="389:49"><expr pos:start="379:13" pos:end="389:48"><call pos:start="379:13" pos:end="389:48"><name pos:start="379:13" pos:end="379:30">av_add_index_entry</name><argument_list pos:start="379:31" pos:end="389:48">(<argument pos:start="379:32" pos:end="379:33"><expr pos:start="379:32" pos:end="379:33"><name pos:start="379:32" pos:end="379:33">st</name></expr></argument>,

                               <argument pos:start="381:32" pos:end="381:71"><expr pos:start="381:32" pos:end="381:71"><name pos:start="381:32" pos:end="381:38">cur_pos</name> <operator pos:start="381:40" pos:end="381:40">+</operator> <operator pos:start="381:42" pos:end="381:42">(</operator><name pos:start="381:43" pos:end="381:43">i</name><operator pos:start="381:44" pos:end="381:44">+</operator><literal type="number" pos:start="381:45" pos:end="381:45">1</literal><operator pos:start="381:46" pos:end="381:46">)</operator> <operator pos:start="381:48" pos:end="381:48">*</operator> <name pos:start="381:50" pos:end="381:71"><name pos:start="381:50" pos:end="381:51">st</name><operator pos:start="381:52" pos:end="381:53">-&gt;</operator><name pos:start="381:54" pos:end="381:58">codec</name><operator pos:start="381:59" pos:end="381:60">-&gt;</operator><name pos:start="381:61" pos:end="381:71">block_align</name></name></expr></argument>, <comment type="block" pos:start="381:74" pos:end="381:82">/* pos */</comment>

                               <argument pos:start="383:32" pos:end="383:63"><expr pos:start="383:32" pos:end="383:63"><name pos:start="383:32" pos:end="383:44"><name pos:start="383:32" pos:end="383:41">dpds_table</name><index pos:start="383:42" pos:end="383:44">[<expr pos:start="383:43" pos:end="383:43"><name pos:start="383:43" pos:end="383:43">i</name></expr>]</index></name> <operator pos:start="383:46" pos:end="383:46">/</operator> <name pos:start="383:48" pos:end="383:63">bytes_per_sample</name></expr></argument>,         <comment type="block" pos:start="383:74" pos:end="383:88">/* timestamp */</comment>

                               <argument pos:start="385:32" pos:end="385:53"><expr pos:start="385:32" pos:end="385:53"><name pos:start="385:32" pos:end="385:53"><name pos:start="385:32" pos:end="385:33">st</name><operator pos:start="385:34" pos:end="385:35">-&gt;</operator><name pos:start="385:36" pos:end="385:40">codec</name><operator pos:start="385:41" pos:end="385:42">-&gt;</operator><name pos:start="385:43" pos:end="385:53">block_align</name></name></expr></argument>,                   <comment type="block" pos:start="385:74" pos:end="385:83">/* size */</comment>

                               <argument pos:start="387:32" pos:end="387:32"><expr pos:start="387:32" pos:end="387:32"><literal type="number" pos:start="387:32" pos:end="387:32">0</literal></expr></argument>,                                        <comment type="block" pos:start="387:74" pos:end="387:87">/* duration */</comment>

                               <argument pos:start="389:32" pos:end="389:47"><expr pos:start="389:32" pos:end="389:47"><name pos:start="389:32" pos:end="389:47">AVINDEX_KEYFRAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="393:7" pos:end="405:5">else if <condition pos:start="393:15" pos:end="393:35">(<expr pos:start="393:16" pos:end="393:34"><name pos:start="393:16" pos:end="393:34"><name pos:start="393:16" pos:end="393:17">st</name><operator pos:start="393:18" pos:end="393:19">-&gt;</operator><name pos:start="393:20" pos:end="393:24">codec</name><operator pos:start="393:25" pos:end="393:26">-&gt;</operator><name pos:start="393:27" pos:end="393:34">bit_rate</name></name></expr>)</condition> <block pos:start="393:37" pos:end="405:5">{<block_content pos:start="403:9" pos:end="403:80">

        <comment type="block" pos:start="395:9" pos:end="401:11">/* No dpds chunk was present (or only an empty one), so estimate

         * the total duration using the average bits per sample and the

         * total data length.

         */</comment>

        <expr_stmt pos:start="403:9" pos:end="403:80"><expr pos:start="403:9" pos:end="403:79"><name pos:start="403:9" pos:end="403:20"><name pos:start="403:9" pos:end="403:10">st</name><operator pos:start="403:11" pos:end="403:12">-&gt;</operator><name pos:start="403:13" pos:end="403:20">duration</name></name> <operator pos:start="403:22" pos:end="403:22">=</operator> <operator pos:start="403:24" pos:end="403:24">(</operator><name pos:start="403:25" pos:end="403:28">size</name><operator pos:start="403:29" pos:end="403:30">&lt;&lt;</operator><literal type="number" pos:start="403:31" pos:end="403:31">3</literal><operator pos:start="403:32" pos:end="403:32">)</operator> <operator pos:start="403:34" pos:end="403:34">*</operator> <name pos:start="403:36" pos:end="403:57"><name pos:start="403:36" pos:end="403:37">st</name><operator pos:start="403:38" pos:end="403:39">-&gt;</operator><name pos:start="403:40" pos:end="403:44">codec</name><operator pos:start="403:45" pos:end="403:46">-&gt;</operator><name pos:start="403:47" pos:end="403:57">sample_rate</name></name> <operator pos:start="403:59" pos:end="403:59">/</operator> <name pos:start="403:61" pos:end="403:79"><name pos:start="403:61" pos:end="403:62">st</name><operator pos:start="403:63" pos:end="403:64">-&gt;</operator><name pos:start="403:65" pos:end="403:69">codec</name><operator pos:start="403:70" pos:end="403:71">-&gt;</operator><name pos:start="403:72" pos:end="403:79">bit_rate</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="409:1" pos:end="409:5"><name pos:start="409:1" pos:end="409:4">fail</name>:</label>

    <expr_stmt pos:start="411:5" pos:end="411:24"><expr pos:start="411:5" pos:end="411:23"><call pos:start="411:5" pos:end="411:23"><name pos:start="411:5" pos:end="411:11">av_free</name><argument_list pos:start="411:12" pos:end="411:23">(<argument pos:start="411:13" pos:end="411:22"><expr pos:start="411:13" pos:end="411:22"><name pos:start="411:13" pos:end="411:22">dpds_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="415:5" pos:end="415:15">return <expr pos:start="415:12" pos:end="415:14"><name pos:start="415:12" pos:end="415:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
