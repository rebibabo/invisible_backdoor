<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14184.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:24">ff_build_rac_states</name><parameter_list pos:start="1:25" pos:end="1:62">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">RangeCoder</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:50"><decl pos:start="1:41" pos:end="1:50"><type pos:start="1:41" pos:end="1:50"><name pos:start="1:41" pos:end="1:43">int</name></type> <name pos:start="1:45" pos:end="1:50">factor</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:61"><decl pos:start="1:53" pos:end="1:61"><type pos:start="1:53" pos:end="1:61"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:61">max_p</name></decl></parameter>)</parameter_list><block pos:start="1:63" pos:end="121:1">{<block_content pos:start="3:5" pos:end="120:0">

    <decl_stmt pos:start="3:5" pos:end="3:31"><decl pos:start="3:5" pos:end="3:30"><type pos:start="3:5" pos:end="3:17"><specifier pos:start="3:5" pos:end="3:9">const</specifier> <name pos:start="3:11" pos:end="3:17">int64_t</name></type> <name pos:start="3:19" pos:end="3:21">one</name><init pos:start="3:22" pos:end="3:30">= <expr pos:start="3:24" pos:end="3:30"><literal type="number" pos:start="3:24" pos:end="3:26">1LL</literal><operator pos:start="3:27" pos:end="3:28">&lt;&lt;</operator><literal type="number" pos:start="3:29" pos:end="3:30">32</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:14"><decl pos:start="5:5" pos:end="5:13"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:13">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">last_p8</name></decl>, <decl pos:start="7:18" pos:end="7:19"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:19">p8</name></decl>, <decl pos:start="7:22" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:22" pos:end="7:22">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:52"><expr pos:start="11:5" pos:end="11:51"><call pos:start="11:5" pos:end="11:51"><name pos:start="11:5" pos:end="11:10">memset</name><argument_list pos:start="11:11" pos:end="11:51">(<argument pos:start="11:12" pos:end="11:24"><expr pos:start="11:12" pos:end="11:24"><name pos:start="11:12" pos:end="11:24"><name pos:start="11:12" pos:end="11:12">c</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:24">zero_state</name></name></expr></argument>, <argument pos:start="11:27" pos:end="11:27"><expr pos:start="11:27" pos:end="11:27"><literal type="number" pos:start="11:27" pos:end="11:27">0</literal></expr></argument>, <argument pos:start="11:30" pos:end="11:50"><expr pos:start="11:30" pos:end="11:50"><sizeof pos:start="11:30" pos:end="11:50">sizeof<argument_list pos:start="11:36" pos:end="11:50">(<argument pos:start="11:37" pos:end="11:49"><expr pos:start="11:37" pos:end="11:49"><name pos:start="11:37" pos:end="11:49"><name pos:start="11:37" pos:end="11:37">c</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:49">zero_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="60:0"><expr pos:start="13:5" pos:end="13:51"><call pos:start="13:5" pos:end="13:51"><name pos:start="13:5" pos:end="13:10">memset</name><argument_list pos:start="13:11" pos:end="13:51">(<argument pos:start="13:12" pos:end="13:24"><expr pos:start="13:12" pos:end="13:24"><name pos:start="13:12" pos:end="13:24"><name pos:start="13:12" pos:end="13:12">c</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator> <name pos:start="13:16" pos:end="13:24">one_state</name></name></expr></argument>, <argument pos:start="13:27" pos:end="13:27"><expr pos:start="13:27" pos:end="13:27"><literal type="number" pos:start="13:27" pos:end="13:27">0</literal></expr></argument>, <argument pos:start="13:30" pos:end="13:50"><expr pos:start="13:30" pos:end="13:50"><sizeof pos:start="13:30" pos:end="13:50">sizeof<argument_list pos:start="13:36" pos:end="13:50">(<argument pos:start="13:37" pos:end="13:49"><expr pos:start="13:37" pos:end="13:49"><name pos:start="13:37" pos:end="13:49"><name pos:start="13:37" pos:end="13:37">c</name><operator pos:start="13:38" pos:end="13:39">-&gt;</operator> <name pos:start="13:41" pos:end="13:49">one_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="17:1" pos:end="17:5">#<cpp:directive pos:start="17:2" pos:end="17:3">if</cpp:directive> <expr pos:start="17:5" pos:end="17:5"><literal type="number" pos:start="17:5" pos:end="17:5">0</literal></expr></cpp:if>

    for(i=1; i&lt;256; i++){

        if(c-&gt;one_state[i])

            continue;



        p= (i*one + 128) &gt;&gt; 8;

        last_p8= i;

        for(;;){

            p+= ((one-p)*factor + one/2) &gt;&gt; 32;

            p8= (256*p + one/2) &gt;&gt; 32; <comment type="line" pos:start="35:40" pos:end="35:66">//FIXME try without the one</comment>

            if(p8 &lt;= last_p8) p8= last_p8+1;

            if(p8 &gt; max_p) p8= max_p;

            if(p8 &lt; last_p8)

                break;

            c-&gt;one_state[last_p8]=     p8;

            if(p8 == last_p8)

                break;

            last_p8= p8;

        }

    }

<cpp:endif pos:start="57:1" pos:end="57:6">#<cpp:directive pos:start="57:2" pos:end="57:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="59:1" pos:end="59:5">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:5"><literal type="number" pos:start="59:5" pos:end="59:5">1</literal></expr></cpp:if>

    <expr_stmt pos:start="61:5" pos:end="61:15"><expr pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:11">last_p8</name><operator pos:start="61:12" pos:end="61:12">=</operator> <literal type="number" pos:start="61:14" pos:end="61:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:13"><expr pos:start="63:5" pos:end="63:12"><name pos:start="63:5" pos:end="63:5">p</name><operator pos:start="63:6" pos:end="63:6">=</operator> <name pos:start="63:8" pos:end="63:10">one</name><operator pos:start="63:11" pos:end="63:11">/</operator><literal type="number" pos:start="63:12" pos:end="63:12">2</literal></expr>;</expr_stmt>

    <for pos:start="65:5" pos:end="84:0">for<control pos:start="65:8" pos:end="65:24">(<init pos:start="65:9" pos:end="65:12"><expr pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:9">i</name><operator pos:start="65:10" pos:end="65:10">=</operator><literal type="number" pos:start="65:11" pos:end="65:11">0</literal></expr>;</init> <condition pos:start="65:14" pos:end="65:19"><expr pos:start="65:14" pos:end="65:18"><name pos:start="65:14" pos:end="65:14">i</name><operator pos:start="65:15" pos:end="65:15">&lt;</operator><literal type="number" pos:start="65:16" pos:end="65:18">128</literal></expr>;</condition> <incr pos:start="65:21" pos:end="65:23"><expr pos:start="65:21" pos:end="65:23"><name pos:start="65:21" pos:end="65:21">i</name><operator pos:start="65:22" pos:end="65:23">++</operator></expr></incr>)</control><block pos:start="65:25" pos:end="84:0">{<block_content pos:start="67:9" pos:end="79:20">

        <expr_stmt pos:start="67:9" pos:end="67:34"><expr pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:10">p8</name><operator pos:start="67:11" pos:end="67:11">=</operator> <operator pos:start="67:13" pos:end="67:13">(</operator><literal type="number" pos:start="67:14" pos:end="67:16">256</literal><operator pos:start="67:17" pos:end="67:17">*</operator><name pos:start="67:18" pos:end="67:18">p</name> <operator pos:start="67:20" pos:end="67:20">+</operator> <name pos:start="67:22" pos:end="67:24">one</name><operator pos:start="67:25" pos:end="67:25">/</operator><literal type="number" pos:start="67:26" pos:end="67:26">2</literal><operator pos:start="67:27" pos:end="67:27">)</operator> <operator pos:start="67:29" pos:end="67:30">&gt;&gt;</operator> <literal type="number" pos:start="67:32" pos:end="67:33">32</literal></expr>;</expr_stmt> <comment type="line" pos:start="67:36" pos:end="67:62">//FIXME try without the one</comment>

        <if_stmt pos:start="69:9" pos:end="69:40"><if pos:start="69:9" pos:end="69:40">if<condition pos:start="69:11" pos:end="69:25">(<expr pos:start="69:12" pos:end="69:24"><name pos:start="69:12" pos:end="69:13">p8</name> <operator pos:start="69:15" pos:end="69:16">&lt;=</operator> <name pos:start="69:18" pos:end="69:24">last_p8</name></expr>)</condition><block type="pseudo" pos:start="69:27" pos:end="69:40"><block_content pos:start="69:27" pos:end="69:40"> <expr_stmt pos:start="69:27" pos:end="69:40"><expr pos:start="69:27" pos:end="69:39"><name pos:start="69:27" pos:end="69:28">p8</name><operator pos:start="69:29" pos:end="69:29">=</operator> <name pos:start="69:31" pos:end="69:37">last_p8</name><operator pos:start="69:38" pos:end="69:38">+</operator><literal type="number" pos:start="69:39" pos:end="69:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="71:9" pos:end="73:38"><if pos:start="71:9" pos:end="73:38">if<condition pos:start="71:11" pos:end="71:47">(<expr pos:start="71:12" pos:end="71:46"><name pos:start="71:12" pos:end="71:18">last_p8</name> <operator pos:start="71:20" pos:end="71:21">&amp;&amp;</operator> <name pos:start="71:23" pos:end="71:29">last_p8</name><operator pos:start="71:30" pos:end="71:30">&lt;</operator><literal type="number" pos:start="71:31" pos:end="71:33">256</literal> <operator pos:start="71:35" pos:end="71:36">&amp;&amp;</operator> <name pos:start="71:38" pos:end="71:39">p8</name><operator pos:start="71:40" pos:end="71:41">&lt;=</operator><name pos:start="71:42" pos:end="71:46">max_p</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:38"><block_content pos:start="73:13" pos:end="73:38">

            <expr_stmt pos:start="73:13" pos:end="73:38"><expr pos:start="73:13" pos:end="73:37"><name pos:start="73:13" pos:end="73:33"><name pos:start="73:13" pos:end="73:13">c</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:24">one_state</name><index pos:start="73:25" pos:end="73:33">[<expr pos:start="73:26" pos:end="73:32"><name pos:start="73:26" pos:end="73:32">last_p8</name></expr>]</index></name><operator pos:start="73:34" pos:end="73:34">=</operator> <name pos:start="73:36" pos:end="73:37">p8</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:43"><expr pos:start="77:9" pos:end="77:42"><name pos:start="77:9" pos:end="77:9">p</name><operator pos:start="77:10" pos:end="77:11">+=</operator> <operator pos:start="77:13" pos:end="77:13">(</operator><operator pos:start="77:14" pos:end="77:14">(</operator><name pos:start="77:15" pos:end="77:17">one</name><operator pos:start="77:18" pos:end="77:18">-</operator><name pos:start="77:19" pos:end="77:19">p</name><operator pos:start="77:20" pos:end="77:20">)</operator><operator pos:start="77:21" pos:end="77:21">*</operator><name pos:start="77:22" pos:end="77:27">factor</name> <operator pos:start="77:29" pos:end="77:29">+</operator> <name pos:start="77:31" pos:end="77:33">one</name><operator pos:start="77:34" pos:end="77:34">/</operator><literal type="number" pos:start="77:35" pos:end="77:35">2</literal><operator pos:start="77:36" pos:end="77:36">)</operator> <operator pos:start="77:38" pos:end="77:39">&gt;&gt;</operator> <literal type="number" pos:start="77:41" pos:end="77:42">32</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:20"><expr pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:15">last_p8</name><operator pos:start="79:16" pos:end="79:16">=</operator> <name pos:start="79:18" pos:end="79:19">p8</name></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="83:1" pos:end="83:6">#<cpp:directive pos:start="83:2" pos:end="83:6">endif</cpp:directive></cpp:endif>

    <for pos:start="85:5" pos:end="105:5">for<control pos:start="85:8" pos:end="85:35">(<init pos:start="85:9" pos:end="85:20"><expr pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:9">i</name><operator pos:start="85:10" pos:end="85:10">=</operator><literal type="number" pos:start="85:11" pos:end="85:14">256</literal><operator pos:start="85:14" pos:end="85:14">-</operator><name pos:start="85:15" pos:end="85:19">max_p</name></expr>;</init> <condition pos:start="85:22" pos:end="85:30"><expr pos:start="85:22" pos:end="85:29"><name pos:start="85:22" pos:end="85:22">i</name><operator pos:start="85:23" pos:end="85:24">&lt;=</operator><name pos:start="85:25" pos:end="85:29">max_p</name></expr>;</condition> <incr pos:start="85:32" pos:end="85:34"><expr pos:start="85:32" pos:end="85:34"><name pos:start="85:32" pos:end="85:32">i</name><operator pos:start="85:33" pos:end="85:34">++</operator></expr></incr>)</control><block pos:start="85:36" pos:end="105:5">{<block_content pos:start="87:9" pos:end="103:36">

        <if_stmt pos:start="87:9" pos:end="89:21"><if pos:start="87:9" pos:end="89:21">if<condition pos:start="87:11" pos:end="87:27">(<expr pos:start="87:12" pos:end="87:26"><name pos:start="87:12" pos:end="87:26"><name pos:start="87:12" pos:end="87:12">c</name><operator pos:start="87:13" pos:end="87:14">-&gt;</operator><name pos:start="87:15" pos:end="87:23">one_state</name><index pos:start="87:24" pos:end="87:26">[<expr pos:start="87:25" pos:end="87:25"><name pos:start="87:25" pos:end="87:25">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:21"><block_content pos:start="89:13" pos:end="89:21">

            <continue pos:start="89:13" pos:end="89:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:30"><expr pos:start="93:9" pos:end="93:29"><name pos:start="93:9" pos:end="93:9">p</name><operator pos:start="93:10" pos:end="93:10">=</operator> <operator pos:start="93:12" pos:end="93:12">(</operator><name pos:start="93:13" pos:end="93:13">i</name><operator pos:start="93:14" pos:end="93:14">*</operator><name pos:start="93:15" pos:end="93:17">one</name> <operator pos:start="93:19" pos:end="93:19">+</operator> <literal type="number" pos:start="93:21" pos:end="93:23">128</literal><operator pos:start="93:24" pos:end="93:24">)</operator> <operator pos:start="93:26" pos:end="93:27">&gt;&gt;</operator> <literal type="number" pos:start="93:29" pos:end="93:29">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:43"><expr pos:start="95:9" pos:end="95:42"><name pos:start="95:9" pos:end="95:9">p</name><operator pos:start="95:10" pos:end="95:11">+=</operator> <operator pos:start="95:13" pos:end="95:13">(</operator><operator pos:start="95:14" pos:end="95:14">(</operator><name pos:start="95:15" pos:end="95:17">one</name><operator pos:start="95:18" pos:end="95:18">-</operator><name pos:start="95:19" pos:end="95:19">p</name><operator pos:start="95:20" pos:end="95:20">)</operator><operator pos:start="95:21" pos:end="95:21">*</operator><name pos:start="95:22" pos:end="95:27">factor</name> <operator pos:start="95:29" pos:end="95:29">+</operator> <name pos:start="95:31" pos:end="95:33">one</name><operator pos:start="95:34" pos:end="95:34">/</operator><literal type="number" pos:start="95:35" pos:end="95:35">2</literal><operator pos:start="95:36" pos:end="95:36">)</operator> <operator pos:start="95:38" pos:end="95:39">&gt;&gt;</operator> <literal type="number" pos:start="95:41" pos:end="95:42">32</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:34"><expr pos:start="97:9" pos:end="97:33"><name pos:start="97:9" pos:end="97:10">p8</name><operator pos:start="97:11" pos:end="97:11">=</operator> <operator pos:start="97:13" pos:end="97:13">(</operator><literal type="number" pos:start="97:14" pos:end="97:16">256</literal><operator pos:start="97:17" pos:end="97:17">*</operator><name pos:start="97:18" pos:end="97:18">p</name> <operator pos:start="97:20" pos:end="97:20">+</operator> <name pos:start="97:22" pos:end="97:24">one</name><operator pos:start="97:25" pos:end="97:25">/</operator><literal type="number" pos:start="97:26" pos:end="97:26">2</literal><operator pos:start="97:27" pos:end="97:27">)</operator> <operator pos:start="97:29" pos:end="97:30">&gt;&gt;</operator> <literal type="number" pos:start="97:32" pos:end="97:33">32</literal></expr>;</expr_stmt> <comment type="line" pos:start="97:36" pos:end="97:62">//FIXME try without the one</comment>

        <if_stmt pos:start="99:9" pos:end="99:28"><if pos:start="99:9" pos:end="99:28">if<condition pos:start="99:11" pos:end="99:19">(<expr pos:start="99:12" pos:end="99:18"><name pos:start="99:12" pos:end="99:13">p8</name> <operator pos:start="99:15" pos:end="99:16">&lt;=</operator> <name pos:start="99:18" pos:end="99:18">i</name></expr>)</condition><block type="pseudo" pos:start="99:21" pos:end="99:28"><block_content pos:start="99:21" pos:end="99:28"> <expr_stmt pos:start="99:21" pos:end="99:28"><expr pos:start="99:21" pos:end="99:27"><name pos:start="99:21" pos:end="99:22">p8</name><operator pos:start="99:23" pos:end="99:23">=</operator> <name pos:start="99:25" pos:end="99:25">i</name><operator pos:start="99:26" pos:end="99:26">+</operator><literal type="number" pos:start="99:27" pos:end="99:27">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="101:9" pos:end="101:33"><if pos:start="101:9" pos:end="101:33">if<condition pos:start="101:11" pos:end="101:22">(<expr pos:start="101:12" pos:end="101:21"><name pos:start="101:12" pos:end="101:13">p8</name> <operator pos:start="101:15" pos:end="101:15">&gt;</operator> <name pos:start="101:17" pos:end="101:21">max_p</name></expr>)</condition><block type="pseudo" pos:start="101:24" pos:end="101:33"><block_content pos:start="101:24" pos:end="101:33"> <expr_stmt pos:start="101:24" pos:end="101:33"><expr pos:start="101:24" pos:end="101:32"><name pos:start="101:24" pos:end="101:25">p8</name><operator pos:start="101:26" pos:end="101:26">=</operator> <name pos:start="101:28" pos:end="101:32">max_p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:36"><expr pos:start="103:9" pos:end="103:35"><name pos:start="103:9" pos:end="103:27"><name pos:start="103:9" pos:end="103:9">c</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:20">one_state</name><index pos:start="103:21" pos:end="103:27">[    <expr pos:start="103:26" pos:end="103:26"><name pos:start="103:26" pos:end="103:26">i</name></expr>]</index></name><operator pos:start="103:28" pos:end="103:28">=</operator>     <name pos:start="103:34" pos:end="103:35">p8</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="109:5" pos:end="120:0">for<control pos:start="109:8" pos:end="109:24">(<init pos:start="109:9" pos:end="109:12"><expr pos:start="109:9" pos:end="109:11"><name pos:start="109:9" pos:end="109:9">i</name><operator pos:start="109:10" pos:end="109:10">=</operator><literal type="number" pos:start="109:11" pos:end="109:11">0</literal></expr>;</init> <condition pos:start="109:14" pos:end="109:19"><expr pos:start="109:14" pos:end="109:18"><name pos:start="109:14" pos:end="109:14">i</name><operator pos:start="109:15" pos:end="109:15">&lt;</operator><literal type="number" pos:start="109:16" pos:end="109:18">256</literal></expr>;</condition> <incr pos:start="109:21" pos:end="109:23"><expr pos:start="109:21" pos:end="109:23"><name pos:start="109:21" pos:end="109:21">i</name><operator pos:start="109:22" pos:end="109:23">++</operator></expr></incr>)</control><block type="pseudo" pos:start="111:9" pos:end="120:0"><block_content pos:start="111:9" pos:end="120:0">

        <expr_stmt pos:start="111:9" pos:end="120:0"><expr pos:start="111:9" pos:end="111:49"><name pos:start="111:9" pos:end="111:24"><name pos:start="111:9" pos:end="111:9">c</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:21">zero_state</name><index pos:start="111:22" pos:end="111:24">[<expr pos:start="111:23" pos:end="111:23"><name pos:start="111:23" pos:end="111:23">i</name></expr>]</index></name><operator pos:start="111:25" pos:end="111:25">=</operator> <literal type="number" pos:start="111:27" pos:end="111:30">256</literal><operator pos:start="111:30" pos:end="111:30">-</operator><name pos:start="111:31" pos:end="111:49"><name pos:start="111:31" pos:end="111:31">c</name><operator pos:start="111:32" pos:end="111:33">-&gt;</operator><name pos:start="111:34" pos:end="111:42">one_state</name><index pos:start="111:43" pos:end="111:49">[<expr pos:start="111:44" pos:end="111:48"><literal type="number" pos:start="111:44" pos:end="111:47">256</literal><operator pos:start="111:47" pos:end="111:47">-</operator><name pos:start="111:48" pos:end="111:48">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<cpp:if pos:start="113:1" pos:end="113:5">#<cpp:directive pos:start="113:2" pos:end="113:3">if</cpp:directive> <expr pos:start="113:5" pos:end="113:5"><literal type="number" pos:start="113:5" pos:end="113:5">0</literal></expr></cpp:if>

    for(i=0; i&lt;256; i++)

        av_log(NULL, AV_LOG_DEBUG, "%3d %3d\n", i, c-&gt;one_state[i]);

<cpp:endif pos:start="119:1" pos:end="119:6">#<cpp:directive pos:start="119:2" pos:end="119:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
