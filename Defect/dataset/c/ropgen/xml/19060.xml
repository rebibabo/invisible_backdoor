<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19060.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">net_client_init</name><parameter_list pos:start="1:20" pos:end="1:64">(<parameter pos:start="1:21" pos:end="1:34"><decl pos:start="1:21" pos:end="1:34"><type pos:start="1:21" pos:end="1:34"><name pos:start="1:21" pos:end="1:28">QemuOpts</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:34">opts</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:49"><decl pos:start="1:37" pos:end="1:49"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:39">int</name></type> <name pos:start="1:41" pos:end="1:49">is_netdev</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:56">Error</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier><modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="169:1">{<block_content pos:start="5:5" pos:end="167:14">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:20">name</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:38"><expr pos:start="13:5" pos:end="13:37"><name pos:start="13:5" pos:end="13:8">type</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <call pos:start="13:12" pos:end="13:37"><name pos:start="13:12" pos:end="13:23">qemu_opt_get</name><argument_list pos:start="13:24" pos:end="13:37">(<argument pos:start="13:25" pos:end="13:28"><expr pos:start="13:25" pos:end="13:28"><name pos:start="13:25" pos:end="13:28">opts</name></expr></argument>, <argument pos:start="13:31" pos:end="13:36"><expr pos:start="13:31" pos:end="13:36"><literal type="string" pos:start="13:31" pos:end="13:36">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:14">(<expr pos:start="15:9" pos:end="15:13"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:13">type</name></expr>)</condition> <block pos:start="15:16" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:56"><expr pos:start="17:9" pos:end="17:55"><call pos:start="17:9" pos:end="17:55"><name pos:start="17:9" pos:end="17:17">error_set</name><argument_list pos:start="17:18" pos:end="17:55">(<argument pos:start="17:19" pos:end="17:22"><expr pos:start="17:19" pos:end="17:22"><name pos:start="17:19" pos:end="17:22">errp</name></expr></argument>, <argument pos:start="17:25" pos:end="17:46"><expr pos:start="17:25" pos:end="17:46"><name pos:start="17:25" pos:end="17:46">QERR_MISSING_PARAMETER</name></expr></argument>, <argument pos:start="17:49" pos:end="17:54"><expr pos:start="17:49" pos:end="17:54"><literal type="string" pos:start="17:49" pos:end="17:54">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="83:5"><if pos:start="25:5" pos:end="83:5">if <condition pos:start="25:8" pos:end="25:18">(<expr pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:17">is_netdev</name></expr>)</condition> <block pos:start="25:20" pos:end="83:5">{<block_content pos:start="27:9" pos:end="81:9">

        <if_stmt pos:start="27:9" pos:end="55:9"><if pos:start="27:9" pos:end="55:9">if <condition pos:start="27:12" pos:end="47:40">(<expr pos:start="27:13" pos:end="47:39"><call pos:start="27:13" pos:end="27:31"><name pos:start="27:13" pos:end="27:18">strcmp</name><argument_list pos:start="27:19" pos:end="27:31">(<argument pos:start="27:20" pos:end="27:23"><expr pos:start="27:20" pos:end="27:23"><name pos:start="27:20" pos:end="27:23">type</name></expr></argument>, <argument pos:start="27:26" pos:end="27:30"><expr pos:start="27:26" pos:end="27:30"><literal type="string" pos:start="27:26" pos:end="27:30">"tap"</literal></expr></argument>)</argument_list></call> <operator pos:start="27:33" pos:end="27:34">!=</operator> <literal type="number" pos:start="27:36" pos:end="27:36">0</literal> <operator pos:start="27:38" pos:end="30:0">&amp;&amp;</operator>

<cpp:ifdef pos:start="29:1" pos:end="29:24">#<cpp:directive pos:start="29:2" pos:end="29:6">ifdef</cpp:directive> <name pos:start="29:8" pos:end="29:24">CONFIG_NET_BRIDGE</name></cpp:ifdef>

            <call pos:start="31:13" pos:end="31:34"><name pos:start="31:13" pos:end="31:18">strcmp</name><argument_list pos:start="31:19" pos:end="31:34">(<argument pos:start="31:20" pos:end="31:23"><expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">type</name></expr></argument>, <argument pos:start="31:26" pos:end="31:33"><expr pos:start="31:26" pos:end="31:33"><literal type="string" pos:start="31:26" pos:end="31:33">"bridge"</literal></expr></argument>)</argument_list></call> <operator pos:start="31:36" pos:end="31:37">!=</operator> <literal type="number" pos:start="31:39" pos:end="31:39">0</literal> <operator pos:start="31:41" pos:end="36:0">&amp;&amp;</operator>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="35:1" pos:end="35:19">#<cpp:directive pos:start="35:2" pos:end="35:6">ifdef</cpp:directive> <name pos:start="35:8" pos:end="35:19">CONFIG_SLIRP</name></cpp:ifdef>

            <call pos:start="37:13" pos:end="37:32"><name pos:start="37:13" pos:end="37:18">strcmp</name><argument_list pos:start="37:19" pos:end="37:32">(<argument pos:start="37:20" pos:end="37:23"><expr pos:start="37:20" pos:end="37:23"><name pos:start="37:20" pos:end="37:23">type</name></expr></argument>, <argument pos:start="37:26" pos:end="37:31"><expr pos:start="37:26" pos:end="37:31"><literal type="string" pos:start="37:26" pos:end="37:31">"user"</literal></expr></argument>)</argument_list></call> <operator pos:start="37:34" pos:end="37:35">!=</operator> <literal type="number" pos:start="37:37" pos:end="37:37">0</literal> <operator pos:start="37:39" pos:end="42:0">&amp;&amp;</operator>

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="41:1" pos:end="41:17">#<cpp:directive pos:start="41:2" pos:end="41:6">ifdef</cpp:directive> <name pos:start="41:8" pos:end="41:17">CONFIG_VDE</name></cpp:ifdef>

            <call pos:start="43:13" pos:end="43:31"><name pos:start="43:13" pos:end="43:18">strcmp</name><argument_list pos:start="43:19" pos:end="43:31">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">type</name></expr></argument>, <argument pos:start="43:26" pos:end="43:30"><expr pos:start="43:26" pos:end="43:30"><literal type="string" pos:start="43:26" pos:end="43:30">"vde"</literal></expr></argument>)</argument_list></call> <operator pos:start="43:33" pos:end="43:34">!=</operator> <literal type="number" pos:start="43:36" pos:end="43:36">0</literal> <operator pos:start="43:38" pos:end="46:0">&amp;&amp;</operator>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

            <call pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:18">strcmp</name><argument_list pos:start="47:19" pos:end="47:34">(<argument pos:start="47:20" pos:end="47:23"><expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">type</name></expr></argument>, <argument pos:start="47:26" pos:end="47:33"><expr pos:start="47:26" pos:end="47:33"><literal type="string" pos:start="47:26" pos:end="47:33">"socket"</literal></expr></argument>)</argument_list></call> <operator pos:start="47:36" pos:end="47:37">!=</operator> <literal type="number" pos:start="47:39" pos:end="47:39">0</literal></expr>)</condition> <block pos:start="47:42" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:22">

            <expr_stmt pos:start="49:13" pos:end="51:47"><expr pos:start="49:13" pos:end="51:46"><call pos:start="49:13" pos:end="51:46"><name pos:start="49:13" pos:end="49:21">error_set</name><argument_list pos:start="49:22" pos:end="51:46">(<argument pos:start="49:23" pos:end="49:26"><expr pos:start="49:23" pos:end="49:26"><name pos:start="49:23" pos:end="49:26">errp</name></expr></argument>, <argument pos:start="49:29" pos:end="49:56"><expr pos:start="49:29" pos:end="49:56"><name pos:start="49:29" pos:end="49:56">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="49:59" pos:end="49:64"><expr pos:start="49:59" pos:end="49:64"><literal type="string" pos:start="49:59" pos:end="49:64">"type"</literal></expr></argument>,

                      <argument pos:start="51:23" pos:end="51:45"><expr pos:start="51:23" pos:end="51:45"><literal type="string" pos:start="51:23" pos:end="51:45">"a netdev backend type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:22">return <expr pos:start="53:20" pos:end="53:21"><operator pos:start="53:20" pos:end="53:20">-</operator><literal type="number" pos:start="53:21" pos:end="53:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="59:9" pos:end="65:9"><if pos:start="59:9" pos:end="65:9">if <condition pos:start="59:12" pos:end="59:39">(<expr pos:start="59:13" pos:end="59:38"><call pos:start="59:13" pos:end="59:38"><name pos:start="59:13" pos:end="59:24">qemu_opt_get</name><argument_list pos:start="59:25" pos:end="59:38">(<argument pos:start="59:26" pos:end="59:29"><expr pos:start="59:26" pos:end="59:29"><name pos:start="59:26" pos:end="59:29">opts</name></expr></argument>, <argument pos:start="59:32" pos:end="59:37"><expr pos:start="59:32" pos:end="59:37"><literal type="string" pos:start="59:32" pos:end="59:37">"vlan"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:41" pos:end="65:9">{<block_content pos:start="61:13" pos:end="63:22">

            <expr_stmt pos:start="61:13" pos:end="61:60"><expr pos:start="61:13" pos:end="61:59"><call pos:start="61:13" pos:end="61:59"><name pos:start="61:13" pos:end="61:21">error_set</name><argument_list pos:start="61:22" pos:end="61:59">(<argument pos:start="61:23" pos:end="61:26"><expr pos:start="61:23" pos:end="61:26"><name pos:start="61:23" pos:end="61:26">errp</name></expr></argument>, <argument pos:start="61:29" pos:end="61:50"><expr pos:start="61:29" pos:end="61:50"><name pos:start="61:29" pos:end="61:50">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="61:53" pos:end="61:58"><expr pos:start="61:53" pos:end="61:58"><literal type="string" pos:start="61:53" pos:end="61:58">"vlan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="63:13" pos:end="63:22">return <expr pos:start="63:20" pos:end="63:21"><operator pos:start="63:20" pos:end="63:20">-</operator><literal type="number" pos:start="63:21" pos:end="63:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:39">(<expr pos:start="67:13" pos:end="67:38"><call pos:start="67:13" pos:end="67:38"><name pos:start="67:13" pos:end="67:24">qemu_opt_get</name><argument_list pos:start="67:25" pos:end="67:38">(<argument pos:start="67:26" pos:end="67:29"><expr pos:start="67:26" pos:end="67:29"><name pos:start="67:26" pos:end="67:29">opts</name></expr></argument>, <argument pos:start="67:32" pos:end="67:37"><expr pos:start="67:32" pos:end="67:37"><literal type="string" pos:start="67:32" pos:end="67:37">"name"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:41" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:22">

            <expr_stmt pos:start="69:13" pos:end="69:60"><expr pos:start="69:13" pos:end="69:59"><call pos:start="69:13" pos:end="69:59"><name pos:start="69:13" pos:end="69:21">error_set</name><argument_list pos:start="69:22" pos:end="69:59">(<argument pos:start="69:23" pos:end="69:26"><expr pos:start="69:23" pos:end="69:26"><name pos:start="69:23" pos:end="69:26">errp</name></expr></argument>, <argument pos:start="69:29" pos:end="69:50"><expr pos:start="69:29" pos:end="69:50"><name pos:start="69:29" pos:end="69:50">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="69:53" pos:end="69:58"><expr pos:start="69:53" pos:end="69:58"><literal type="string" pos:start="69:53" pos:end="69:58">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:22">return <expr pos:start="71:20" pos:end="71:21"><operator pos:start="71:20" pos:end="71:20">-</operator><literal type="number" pos:start="71:21" pos:end="71:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:32">(<expr pos:start="75:13" pos:end="75:31"><operator pos:start="75:13" pos:end="75:13">!</operator><call pos:start="75:14" pos:end="75:31"><name pos:start="75:14" pos:end="75:25">qemu_opts_id</name><argument_list pos:start="75:26" pos:end="75:31">(<argument pos:start="75:27" pos:end="75:30"><expr pos:start="75:27" pos:end="75:30"><name pos:start="75:27" pos:end="75:30">opts</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:34" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:22">

            <expr_stmt pos:start="77:13" pos:end="77:58"><expr pos:start="77:13" pos:end="77:57"><call pos:start="77:13" pos:end="77:57"><name pos:start="77:13" pos:end="77:21">error_set</name><argument_list pos:start="77:22" pos:end="77:57">(<argument pos:start="77:23" pos:end="77:26"><expr pos:start="77:23" pos:end="77:26"><name pos:start="77:23" pos:end="77:26">errp</name></expr></argument>, <argument pos:start="77:29" pos:end="77:50"><expr pos:start="77:29" pos:end="77:50"><name pos:start="77:29" pos:end="77:50">QERR_MISSING_PARAMETER</name></expr></argument>, <argument pos:start="77:53" pos:end="77:56"><expr pos:start="77:53" pos:end="77:56"><literal type="string" pos:start="77:53" pos:end="77:56">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:22">return <expr pos:start="79:20" pos:end="79:21"><operator pos:start="79:20" pos:end="79:20">-</operator><literal type="number" pos:start="79:21" pos:end="79:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:30"><expr pos:start="87:5" pos:end="87:29"><name pos:start="87:5" pos:end="87:8">name</name> <operator pos:start="87:10" pos:end="87:10">=</operator> <call pos:start="87:12" pos:end="87:29"><name pos:start="87:12" pos:end="87:23">qemu_opts_id</name><argument_list pos:start="87:24" pos:end="87:29">(<argument pos:start="87:25" pos:end="87:28"><expr pos:start="87:25" pos:end="87:28"><name pos:start="87:25" pos:end="87:28">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:14">(<expr pos:start="89:9" pos:end="89:13"><operator pos:start="89:9" pos:end="89:9">!</operator><name pos:start="89:10" pos:end="89:13">name</name></expr>)</condition> <block pos:start="89:16" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:42">

        <expr_stmt pos:start="91:9" pos:end="91:42"><expr pos:start="91:9" pos:end="91:41"><name pos:start="91:9" pos:end="91:12">name</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:41"><name pos:start="91:16" pos:end="91:27">qemu_opt_get</name><argument_list pos:start="91:28" pos:end="91:41">(<argument pos:start="91:29" pos:end="91:32"><expr pos:start="91:29" pos:end="91:32"><name pos:start="91:29" pos:end="91:32">opts</name></expr></argument>, <argument pos:start="91:35" pos:end="91:40"><expr pos:start="91:35" pos:end="91:40"><literal type="string" pos:start="91:35" pos:end="91:40">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="97:5" pos:end="159:5">for <control pos:start="97:9" pos:end="97:53">(<init pos:start="97:10" pos:end="97:15"><expr pos:start="97:10" pos:end="97:14"><name pos:start="97:10" pos:end="97:10">i</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <literal type="number" pos:start="97:14" pos:end="97:14">0</literal></expr>;</init> <condition pos:start="97:17" pos:end="97:48"><expr pos:start="97:17" pos:end="97:47"><name pos:start="97:17" pos:end="97:17">i</name> <operator pos:start="97:19" pos:end="97:19">&lt;</operator> <name pos:start="97:21" pos:end="97:47">NET_CLIENT_OPTIONS_KIND_MAX</name></expr>;</condition> <incr pos:start="97:50" pos:end="97:52"><expr pos:start="97:50" pos:end="97:52"><name pos:start="97:50" pos:end="97:50">i</name><operator pos:start="97:51" pos:end="97:52">++</operator></expr></incr>)</control> <block pos:start="97:55" pos:end="159:5">{<block_content pos:start="99:9" pos:end="157:9">

        <if_stmt pos:start="99:9" pos:end="157:9"><if pos:start="99:9" pos:end="157:9">if <condition pos:start="99:12" pos:end="101:52">(<expr pos:start="99:13" pos:end="101:51"><name pos:start="99:13" pos:end="99:31"><name pos:start="99:13" pos:end="99:28">net_client_types</name><index pos:start="99:29" pos:end="99:31">[<expr pos:start="99:30" pos:end="99:30"><name pos:start="99:30" pos:end="99:30">i</name></expr>]</index></name><operator pos:start="99:32" pos:end="99:32">.</operator><name pos:start="99:33" pos:end="99:36">type</name> <operator pos:start="99:38" pos:end="99:39">!=</operator> <name pos:start="99:41" pos:end="99:44">NULL</name> <operator pos:start="99:46" pos:end="99:47">&amp;&amp;</operator>

            <operator pos:start="101:13" pos:end="101:13">!</operator><call pos:start="101:14" pos:end="101:51"><name pos:start="101:14" pos:end="101:19">strcmp</name><argument_list pos:start="101:20" pos:end="101:51">(<argument pos:start="101:21" pos:end="101:44"><expr pos:start="101:21" pos:end="101:44"><name pos:start="101:21" pos:end="101:39"><name pos:start="101:21" pos:end="101:36">net_client_types</name><index pos:start="101:37" pos:end="101:39">[<expr pos:start="101:38" pos:end="101:38"><name pos:start="101:38" pos:end="101:38">i</name></expr>]</index></name><operator pos:start="101:40" pos:end="101:40">.</operator><name pos:start="101:41" pos:end="101:44">type</name></expr></argument>, <argument pos:start="101:47" pos:end="101:50"><expr pos:start="101:47" pos:end="101:50"><name pos:start="101:47" pos:end="101:50">type</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:54" pos:end="157:9">{<block_content pos:start="103:13" pos:end="155:23">

            <decl_stmt pos:start="103:13" pos:end="103:36"><decl pos:start="103:13" pos:end="103:35"><type pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:17">Error</name> <modifier pos:start="103:19" pos:end="103:19">*</modifier></type><name pos:start="103:20" pos:end="103:28">local_err</name> <init pos:start="103:30" pos:end="103:35">= <expr pos:start="103:32" pos:end="103:35"><name pos:start="103:32" pos:end="103:35">NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="105:13" pos:end="105:35"><decl pos:start="105:13" pos:end="105:34"><type pos:start="105:13" pos:end="105:23"><name pos:start="105:13" pos:end="105:21">VLANState</name> <modifier pos:start="105:23" pos:end="105:23">*</modifier></type><name pos:start="105:24" pos:end="105:27">vlan</name> <init pos:start="105:29" pos:end="105:34">= <expr pos:start="105:31" pos:end="105:34"><name pos:start="105:31" pos:end="105:34">NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="107:13" pos:end="107:20"><decl pos:start="107:13" pos:end="107:19"><type pos:start="107:13" pos:end="107:15"><name pos:start="107:13" pos:end="107:15">int</name></type> <name pos:start="107:17" pos:end="107:19">ret</name></decl>;</decl_stmt>



            <expr_stmt pos:start="111:13" pos:end="111:79"><expr pos:start="111:13" pos:end="111:78"><call pos:start="111:13" pos:end="111:78"><name pos:start="111:13" pos:end="111:30">qemu_opts_validate</name><argument_list pos:start="111:31" pos:end="111:78">(<argument pos:start="111:32" pos:end="111:35"><expr pos:start="111:32" pos:end="111:35"><name pos:start="111:32" pos:end="111:35">opts</name></expr></argument>, <argument pos:start="111:38" pos:end="111:65"><expr pos:start="111:38" pos:end="111:65"><operator pos:start="111:38" pos:end="111:38">&amp;</operator><name pos:start="111:39" pos:end="111:57"><name pos:start="111:39" pos:end="111:54">net_client_types</name><index pos:start="111:55" pos:end="111:57">[<expr pos:start="111:56" pos:end="111:56"><name pos:start="111:56" pos:end="111:56">i</name></expr>]</index></name><operator pos:start="111:58" pos:end="111:58">.</operator><name pos:start="111:59" pos:end="111:65"><name pos:start="111:59" pos:end="111:62">desc</name><index pos:start="111:63" pos:end="111:65">[<expr pos:start="111:64" pos:end="111:64"><literal type="number" pos:start="111:64" pos:end="111:64">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="111:68" pos:end="111:77"><expr pos:start="111:68" pos:end="111:77"><operator pos:start="111:68" pos:end="111:68">&amp;</operator><name pos:start="111:69" pos:end="111:77">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if <condition pos:start="113:16" pos:end="113:41">(<expr pos:start="113:17" pos:end="113:40"><call pos:start="113:17" pos:end="113:40"><name pos:start="113:17" pos:end="113:28">error_is_set</name><argument_list pos:start="113:29" pos:end="113:40">(<argument pos:start="113:30" pos:end="113:39"><expr pos:start="113:30" pos:end="113:39"><operator pos:start="113:30" pos:end="113:30">&amp;</operator><name pos:start="113:31" pos:end="113:39">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:43" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:26">

                <expr_stmt pos:start="115:17" pos:end="115:49"><expr pos:start="115:17" pos:end="115:48"><call pos:start="115:17" pos:end="115:48"><name pos:start="115:17" pos:end="115:31">error_propagate</name><argument_list pos:start="115:32" pos:end="115:48">(<argument pos:start="115:33" pos:end="115:36"><expr pos:start="115:33" pos:end="115:36"><name pos:start="115:33" pos:end="115:36">errp</name></expr></argument>, <argument pos:start="115:39" pos:end="115:47"><expr pos:start="115:39" pos:end="115:47"><name pos:start="115:39" pos:end="115:47">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="117:17" pos:end="117:26">return <expr pos:start="117:24" pos:end="117:25"><operator pos:start="117:24" pos:end="117:24">-</operator><literal type="number" pos:start="117:25" pos:end="117:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="123:13" pos:end="125:36">/* Do not add to a vlan if it's a -netdev or a nic with a

             * netdev= parameter. */</comment>

            <if_stmt pos:start="127:13" pos:end="133:13"><if pos:start="127:13" pos:end="133:13">if <condition pos:start="127:16" pos:end="129:78">(<expr pos:start="127:17" pos:end="129:77"><operator pos:start="127:17" pos:end="127:17">!</operator><operator pos:start="127:18" pos:end="127:18">(</operator><name pos:start="127:19" pos:end="127:27">is_netdev</name> <operator pos:start="127:29" pos:end="127:30">||</operator>

                  <operator pos:start="129:19" pos:end="129:19">(</operator><call pos:start="129:20" pos:end="129:38"><name pos:start="129:20" pos:end="129:25">strcmp</name><argument_list pos:start="129:26" pos:end="129:38">(<argument pos:start="129:27" pos:end="129:30"><expr pos:start="129:27" pos:end="129:30"><name pos:start="129:27" pos:end="129:30">type</name></expr></argument>, <argument pos:start="129:33" pos:end="129:37"><expr pos:start="129:33" pos:end="129:37"><literal type="string" pos:start="129:33" pos:end="129:37">"nic"</literal></expr></argument>)</argument_list></call> <operator pos:start="129:40" pos:end="129:41">==</operator> <literal type="number" pos:start="129:43" pos:end="129:43">0</literal> <operator pos:start="129:45" pos:end="129:46">&amp;&amp;</operator> <call pos:start="129:48" pos:end="129:75"><name pos:start="129:48" pos:end="129:59">qemu_opt_get</name><argument_list pos:start="129:60" pos:end="129:75">(<argument pos:start="129:61" pos:end="129:64"><expr pos:start="129:61" pos:end="129:64"><name pos:start="129:61" pos:end="129:64">opts</name></expr></argument>, <argument pos:start="129:67" pos:end="129:74"><expr pos:start="129:67" pos:end="129:74"><literal type="string" pos:start="129:67" pos:end="129:74">"netdev"</literal></expr></argument>)</argument_list></call><operator pos:start="129:76" pos:end="129:76">)</operator><operator pos:start="129:77" pos:end="129:77">)</operator></expr>)</condition> <block pos:start="129:80" pos:end="133:13">{<block_content pos:start="131:17" pos:end="131:79">

                <expr_stmt pos:start="131:17" pos:end="131:79"><expr pos:start="131:17" pos:end="131:78"><name pos:start="131:17" pos:end="131:20">vlan</name> <operator pos:start="131:22" pos:end="131:22">=</operator> <call pos:start="131:24" pos:end="131:78"><name pos:start="131:24" pos:end="131:37">qemu_find_vlan</name><argument_list pos:start="131:38" pos:end="131:78">(<argument pos:start="131:39" pos:end="131:74"><expr pos:start="131:39" pos:end="131:74"><call pos:start="131:39" pos:end="131:74"><name pos:start="131:39" pos:end="131:57">qemu_opt_get_number</name><argument_list pos:start="131:58" pos:end="131:74">(<argument pos:start="131:59" pos:end="131:62"><expr pos:start="131:59" pos:end="131:62"><name pos:start="131:59" pos:end="131:62">opts</name></expr></argument>, <argument pos:start="131:65" pos:end="131:70"><expr pos:start="131:65" pos:end="131:70"><literal type="string" pos:start="131:65" pos:end="131:70">"vlan"</literal></expr></argument>, <argument pos:start="131:73" pos:end="131:73"><expr pos:start="131:73" pos:end="131:73"><literal type="number" pos:start="131:73" pos:end="131:73">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="131:77" pos:end="131:77"><expr pos:start="131:77" pos:end="131:77"><literal type="number" pos:start="131:77" pos:end="131:77">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="137:13" pos:end="137:20"><expr pos:start="137:13" pos:end="137:19"><name pos:start="137:13" pos:end="137:15">ret</name> <operator pos:start="137:17" pos:end="137:17">=</operator> <literal type="number" pos:start="137:19" pos:end="137:19">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="139:13" pos:end="153:13"><if pos:start="139:13" pos:end="153:13">if <condition pos:start="139:16" pos:end="139:41">(<expr pos:start="139:17" pos:end="139:40"><name pos:start="139:17" pos:end="139:35"><name pos:start="139:17" pos:end="139:32">net_client_types</name><index pos:start="139:33" pos:end="139:35">[<expr pos:start="139:34" pos:end="139:34"><name pos:start="139:34" pos:end="139:34">i</name></expr>]</index></name><operator pos:start="139:36" pos:end="139:36">.</operator><name pos:start="139:37" pos:end="139:40">init</name></expr>)</condition> <block pos:start="139:43" pos:end="153:13">{<block_content pos:start="141:17" pos:end="151:17">

                <expr_stmt pos:start="141:17" pos:end="141:65"><expr pos:start="141:17" pos:end="141:64"><name pos:start="141:17" pos:end="141:19">ret</name> <operator pos:start="141:21" pos:end="141:21">=</operator> <name pos:start="141:23" pos:end="141:41"><name pos:start="141:23" pos:end="141:38">net_client_types</name><index pos:start="141:39" pos:end="141:41">[<expr pos:start="141:40" pos:end="141:40"><name pos:start="141:40" pos:end="141:40">i</name></expr>]</index></name><operator pos:start="141:42" pos:end="141:42">.</operator><call pos:start="141:43" pos:end="141:64"><name pos:start="141:43" pos:end="141:46">init</name><argument_list pos:start="141:47" pos:end="141:64">(<argument pos:start="141:48" pos:end="141:51"><expr pos:start="141:48" pos:end="141:51"><name pos:start="141:48" pos:end="141:51">opts</name></expr></argument>, <argument pos:start="141:54" pos:end="141:57"><expr pos:start="141:54" pos:end="141:57"><name pos:start="141:54" pos:end="141:57">name</name></expr></argument>, <argument pos:start="141:60" pos:end="141:63"><expr pos:start="141:60" pos:end="141:63"><name pos:start="141:60" pos:end="141:63">vlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="143:17" pos:end="151:17"><if pos:start="143:17" pos:end="151:17">if <condition pos:start="143:20" pos:end="143:28">(<expr pos:start="143:21" pos:end="143:27"><name pos:start="143:21" pos:end="143:23">ret</name> <operator pos:start="143:25" pos:end="143:25">&lt;</operator> <literal type="number" pos:start="143:27" pos:end="143:27">0</literal></expr>)</condition> <block pos:start="143:30" pos:end="151:17">{<block_content pos:start="147:21" pos:end="149:30">

                    <comment type="block" pos:start="145:21" pos:end="145:71">/* TODO push error reporting into init() methods */</comment>

                    <expr_stmt pos:start="147:21" pos:end="147:67"><expr pos:start="147:21" pos:end="147:66"><call pos:start="147:21" pos:end="147:66"><name pos:start="147:21" pos:end="147:29">error_set</name><argument_list pos:start="147:30" pos:end="147:66">(<argument pos:start="147:31" pos:end="147:34"><expr pos:start="147:31" pos:end="147:34"><name pos:start="147:31" pos:end="147:34">errp</name></expr></argument>, <argument pos:start="147:37" pos:end="147:59"><expr pos:start="147:37" pos:end="147:59"><name pos:start="147:37" pos:end="147:59">QERR_DEVICE_INIT_FAILED</name></expr></argument>, <argument pos:start="147:62" pos:end="147:65"><expr pos:start="147:62" pos:end="147:65"><name pos:start="147:62" pos:end="147:65">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="149:21" pos:end="149:30">return <expr pos:start="149:28" pos:end="149:29"><operator pos:start="149:28" pos:end="149:28">-</operator><literal type="number" pos:start="149:29" pos:end="149:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <return pos:start="155:13" pos:end="155:23">return <expr pos:start="155:20" pos:end="155:22"><name pos:start="155:20" pos:end="155:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="163:5" pos:end="165:39"><expr pos:start="163:5" pos:end="165:38"><call pos:start="163:5" pos:end="165:38"><name pos:start="163:5" pos:end="163:13">error_set</name><argument_list pos:start="163:14" pos:end="165:38">(<argument pos:start="163:15" pos:end="163:18"><expr pos:start="163:15" pos:end="163:18"><name pos:start="163:15" pos:end="163:18">errp</name></expr></argument>, <argument pos:start="163:21" pos:end="163:48"><expr pos:start="163:21" pos:end="163:48"><name pos:start="163:21" pos:end="163:48">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="163:51" pos:end="163:56"><expr pos:start="163:51" pos:end="163:56"><literal type="string" pos:start="163:51" pos:end="163:56">"type"</literal></expr></argument>,

              <argument pos:start="165:15" pos:end="165:37"><expr pos:start="165:15" pos:end="165:37"><literal type="string" pos:start="165:15" pos:end="165:37">"a network client type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="167:5" pos:end="167:14">return <expr pos:start="167:12" pos:end="167:13"><operator pos:start="167:12" pos:end="167:12">-</operator><literal type="number" pos:start="167:13" pos:end="167:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
