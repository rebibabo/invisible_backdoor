<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17660.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:4">void</name> <name pos:start="1:6" pos:end="1:11">HELPER</name></type>(<name pos:start="1:13" pos:end="1:16">ipte</name>)<parameter_list pos:start="1:18" pos:end="3:30">(<parameter pos:start="1:19" pos:end="1:36"><decl pos:start="1:19" pos:end="1:36"><type pos:start="1:19" pos:end="1:36"><name pos:start="1:19" pos:end="1:31">CPUS390XState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">env</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:50"><decl pos:start="1:39" pos:end="1:50"><type pos:start="1:39" pos:end="1:50"><name pos:start="1:39" pos:end="1:46">uint64_t</name></type> <name pos:start="1:48" pos:end="1:50">pto</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:66"><decl pos:start="1:53" pos:end="1:66"><type pos:start="1:53" pos:end="1:66"><name pos:start="1:53" pos:end="1:60">uint64_t</name></type> <name pos:start="1:62" pos:end="1:66">vaddr</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:29"><decl pos:start="3:19" pos:end="3:29"><type pos:start="3:19" pos:end="3:29"><name pos:start="3:19" pos:end="3:26">uint32_t</name></type> <name pos:start="3:28" pos:end="3:29">m4</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="61:1">{<block_content pos:start="7:5" pos:end="59:5">

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cs</name> <init pos:start="7:18" pos:end="7:45">= <expr pos:start="7:20" pos:end="7:45"><call pos:start="7:20" pos:end="7:45"><name pos:start="7:20" pos:end="7:22">CPU</name><argument_list pos:start="7:23" pos:end="7:45">(<argument pos:start="7:24" pos:end="7:44"><expr pos:start="7:24" pos:end="7:44"><call pos:start="7:24" pos:end="7:44"><name pos:start="7:24" pos:end="7:39">s390_env_get_cpu</name><argument_list pos:start="7:40" pos:end="7:44">(<argument pos:start="7:41" pos:end="7:43"><expr pos:start="7:41" pos:end="7:43"><name pos:start="7:41" pos:end="7:43">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:17">page</name> <init pos:start="9:19" pos:end="9:44">= <expr pos:start="9:21" pos:end="9:44"><name pos:start="9:21" pos:end="9:25">vaddr</name> <operator pos:start="9:27" pos:end="9:27">&amp;</operator> <name pos:start="9:29" pos:end="9:44">TARGET_PAGE_MASK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:21">pte_addr</name></decl>, <decl pos:start="11:24" pos:end="11:26"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:24" pos:end="11:26">pte</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:46">/* Compute the page table entry address */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:45"><expr pos:start="17:5" pos:end="17:44"><name pos:start="17:5" pos:end="17:12">pte_addr</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <operator pos:start="17:16" pos:end="17:16">(</operator><name pos:start="17:17" pos:end="17:19">pto</name> <operator pos:start="17:21" pos:end="17:21">&amp;</operator> <name pos:start="17:23" pos:end="17:43">_SEGMENT_ENTRY_ORIGIN</name><operator pos:start="17:44" pos:end="17:44">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:40"><expr pos:start="19:5" pos:end="19:39"><name pos:start="19:5" pos:end="19:12">pte_addr</name> <operator pos:start="19:14" pos:end="19:15">+=</operator> <operator pos:start="19:17" pos:end="19:17">(</operator><name pos:start="19:18" pos:end="19:22">vaddr</name> <operator pos:start="19:24" pos:end="19:24">&amp;</operator> <name pos:start="19:26" pos:end="19:33">VADDR_PX</name><operator pos:start="19:34" pos:end="19:34">)</operator> <operator pos:start="19:36" pos:end="19:37">&gt;&gt;</operator> <literal type="number" pos:start="19:39" pos:end="19:39">9</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:46">/* Mark the page table entry as invalid */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:37"><expr pos:start="25:5" pos:end="25:36"><name pos:start="25:5" pos:end="25:7">pte</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:36"><name pos:start="25:11" pos:end="25:18">ldq_phys</name><argument_list pos:start="25:19" pos:end="25:36">(<argument pos:start="25:20" pos:end="25:25"><expr pos:start="25:20" pos:end="25:25"><name pos:start="25:20" pos:end="25:25"><name pos:start="25:20" pos:end="25:21">cs</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:25">as</name></name></expr></argument>, <argument pos:start="25:28" pos:end="25:35"><expr pos:start="25:28" pos:end="25:35"><name pos:start="25:28" pos:end="25:35">pte_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:25"><expr pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:7">pte</name> <operator pos:start="27:9" pos:end="27:10">|=</operator> <name pos:start="27:12" pos:end="27:24">_PAGE_INVALID</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:36"><expr pos:start="29:5" pos:end="29:35"><call pos:start="29:5" pos:end="29:35"><name pos:start="29:5" pos:end="29:12">stq_phys</name><argument_list pos:start="29:13" pos:end="29:35">(<argument pos:start="29:14" pos:end="29:19"><expr pos:start="29:14" pos:end="29:19"><name pos:start="29:14" pos:end="29:19"><name pos:start="29:14" pos:end="29:15">cs</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:19">as</name></name></expr></argument>, <argument pos:start="29:22" pos:end="29:29"><expr pos:start="29:22" pos:end="29:29"><name pos:start="29:22" pos:end="29:29">pte_addr</name></expr></argument>, <argument pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><name pos:start="29:32" pos:end="29:34">pte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="35:45">/* XXX we exploit the fact that Linux passes the exact virtual

       address here - it's not obliged to! */</comment>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:15">(<expr pos:start="37:9" pos:end="37:14"><name pos:start="37:9" pos:end="37:10">m4</name> <operator pos:start="37:12" pos:end="37:12">&amp;</operator> <literal type="number" pos:start="37:14" pos:end="37:14">1</literal></expr>)</condition> <block pos:start="37:17" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:33">

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><call pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:22">tlb_flush_page</name><argument_list pos:start="39:23" pos:end="39:32">(<argument pos:start="39:24" pos:end="39:25"><expr pos:start="39:24" pos:end="39:25"><name pos:start="39:24" pos:end="39:25">cs</name></expr></argument>, <argument pos:start="39:28" pos:end="39:31"><expr pos:start="39:28" pos:end="39:31"><name pos:start="39:28" pos:end="39:31">page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="45:5">else <block pos:start="41:12" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:49">

        <expr_stmt pos:start="43:9" pos:end="43:49"><expr pos:start="43:9" pos:end="43:48"><call pos:start="43:9" pos:end="43:48"><name pos:start="43:9" pos:end="43:38">tlb_flush_page_all_cpus_synced</name><argument_list pos:start="43:39" pos:end="43:48">(<argument pos:start="43:40" pos:end="43:41"><expr pos:start="43:40" pos:end="43:41"><name pos:start="43:40" pos:end="43:41">cs</name></expr></argument>, <argument pos:start="43:44" pos:end="43:47"><expr pos:start="43:44" pos:end="43:47"><name pos:start="43:44" pos:end="43:47">page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:25">/* XXX 31-bit hack */</comment>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:15">(<expr pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:10">m4</name> <operator pos:start="51:12" pos:end="51:12">&amp;</operator> <literal type="number" pos:start="51:14" pos:end="51:14">1</literal></expr>)</condition> <block pos:start="51:17" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:46">

        <expr_stmt pos:start="53:9" pos:end="53:46"><expr pos:start="53:9" pos:end="53:45"><call pos:start="53:9" pos:end="53:45"><name pos:start="53:9" pos:end="53:22">tlb_flush_page</name><argument_list pos:start="53:23" pos:end="53:45">(<argument pos:start="53:24" pos:end="53:25"><expr pos:start="53:24" pos:end="53:25"><name pos:start="53:24" pos:end="53:25">cs</name></expr></argument>, <argument pos:start="53:28" pos:end="53:44"><expr pos:start="53:28" pos:end="53:44"><name pos:start="53:28" pos:end="53:31">page</name> <operator pos:start="53:33" pos:end="53:33">^</operator> <literal type="number" pos:start="53:35" pos:end="53:44">0x80000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="59:5">else <block pos:start="55:12" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:62">

        <expr_stmt pos:start="57:9" pos:end="57:62"><expr pos:start="57:9" pos:end="57:61"><call pos:start="57:9" pos:end="57:61"><name pos:start="57:9" pos:end="57:38">tlb_flush_page_all_cpus_synced</name><argument_list pos:start="57:39" pos:end="57:61">(<argument pos:start="57:40" pos:end="57:41"><expr pos:start="57:40" pos:end="57:41"><name pos:start="57:40" pos:end="57:41">cs</name></expr></argument>, <argument pos:start="57:44" pos:end="57:60"><expr pos:start="57:44" pos:end="57:60"><name pos:start="57:44" pos:end="57:47">page</name> <operator pos:start="57:49" pos:end="57:49">^</operator> <literal type="number" pos:start="57:51" pos:end="57:60">0x80000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
