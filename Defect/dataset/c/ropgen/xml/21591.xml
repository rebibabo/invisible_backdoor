<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21591.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:23">clone_func</name><parameter_list pos:start="1:24" pos:end="1:34">(<parameter pos:start="1:25" pos:end="1:33"><decl pos:start="1:25" pos:end="1:33"><type pos:start="1:25" pos:end="1:30"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:33">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:16">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">new_thread_info</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:25">info</name> <init pos:start="5:27" pos:end="5:31">= <expr pos:start="5:29" pos:end="5:31"><name pos:start="5:29" pos:end="5:31">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">CPUArchState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:17">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">TaskState</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:17">ts</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:26"><expr pos:start="15:5" pos:end="15:25"><call pos:start="15:5" pos:end="15:25"><name pos:start="15:5" pos:end="15:23">rcu_register_thread</name><argument_list pos:start="15:24" pos:end="15:25">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:20"><expr pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:7">env</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <name pos:start="17:11" pos:end="17:19"><name pos:start="17:11" pos:end="17:14">info</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:19">env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:27"><expr pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:7">cpu</name> <operator pos:start="19:9" pos:end="19:9">=</operator> <call pos:start="19:11" pos:end="19:26"><name pos:start="19:11" pos:end="19:21">ENV_GET_CPU</name><argument_list pos:start="19:22" pos:end="19:26">(<argument pos:start="19:23" pos:end="19:25"><expr pos:start="19:23" pos:end="19:25"><name pos:start="19:23" pos:end="19:25">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:21"><expr pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:14">thread_cpu</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:20">cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:34"><expr pos:start="23:5" pos:end="23:33"><name pos:start="23:5" pos:end="23:6">ts</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <operator pos:start="23:10" pos:end="23:10">(</operator><name pos:start="23:11" pos:end="23:19">TaskState</name> <operator pos:start="23:21" pos:end="23:21">*</operator><operator pos:start="23:22" pos:end="23:22">)</operator><name pos:start="23:23" pos:end="23:33"><name pos:start="23:23" pos:end="23:25">cpu</name><operator pos:start="23:26" pos:end="23:27">-&gt;</operator><name pos:start="23:28" pos:end="23:33">opaque</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:25"><expr pos:start="25:5" pos:end="25:24"><name pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:8">info</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:13">tid</name></name> <operator pos:start="25:15" pos:end="25:15">=</operator> <call pos:start="25:17" pos:end="25:24"><name pos:start="25:17" pos:end="25:22">gettid</name><argument_list pos:start="25:23" pos:end="25:24">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:30"><expr pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:7">cpu</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:17">host_tid</name></name> <operator pos:start="27:19" pos:end="27:19">=</operator> <name pos:start="27:21" pos:end="27:29"><name pos:start="27:21" pos:end="27:24">info</name><operator pos:start="27:25" pos:end="27:26">-&gt;</operator><name pos:start="27:27" pos:end="27:29">tid</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:20"><expr pos:start="29:5" pos:end="29:19"><call pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:15">task_settid</name><argument_list pos:start="29:16" pos:end="29:19">(<argument pos:start="29:17" pos:end="29:18"><expr pos:start="29:17" pos:end="29:18"><name pos:start="29:17" pos:end="29:18">ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:52"><if pos:start="31:5" pos:end="33:52">if <condition pos:start="31:8" pos:end="31:27">(<expr pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:12">info</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:26">child_tidptr</name></name></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:52"><block_content pos:start="33:9" pos:end="33:52">

        <expr_stmt pos:start="33:9" pos:end="33:52"><expr pos:start="33:9" pos:end="33:51"><call pos:start="33:9" pos:end="33:51"><name pos:start="33:9" pos:end="33:20">put_user_u32</name><argument_list pos:start="33:21" pos:end="33:51">(<argument pos:start="33:22" pos:end="33:30"><expr pos:start="33:22" pos:end="33:30"><name pos:start="33:22" pos:end="33:30"><name pos:start="33:22" pos:end="33:25">info</name><operator pos:start="33:26" pos:end="33:27">-&gt;</operator><name pos:start="33:28" pos:end="33:30">tid</name></name></expr></argument>, <argument pos:start="33:33" pos:end="33:50"><expr pos:start="33:33" pos:end="33:50"><name pos:start="33:33" pos:end="33:50"><name pos:start="33:33" pos:end="33:36">info</name><operator pos:start="33:37" pos:end="33:38">-&gt;</operator><name pos:start="33:39" pos:end="33:50">child_tidptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="35:5" pos:end="37:53"><if pos:start="35:5" pos:end="37:53">if <condition pos:start="35:8" pos:end="35:28">(<expr pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:12">info</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:27">parent_tidptr</name></name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:53"><block_content pos:start="37:9" pos:end="37:53">

        <expr_stmt pos:start="37:9" pos:end="37:53"><expr pos:start="37:9" pos:end="37:52"><call pos:start="37:9" pos:end="37:52"><name pos:start="37:9" pos:end="37:20">put_user_u32</name><argument_list pos:start="37:21" pos:end="37:52">(<argument pos:start="37:22" pos:end="37:30"><expr pos:start="37:22" pos:end="37:30"><name pos:start="37:22" pos:end="37:30"><name pos:start="37:22" pos:end="37:25">info</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:30">tid</name></name></expr></argument>, <argument pos:start="37:33" pos:end="37:51"><expr pos:start="37:33" pos:end="37:51"><name pos:start="37:33" pos:end="37:51"><name pos:start="37:33" pos:end="37:36">info</name><operator pos:start="37:37" pos:end="37:38">-&gt;</operator><name pos:start="37:39" pos:end="37:51">parent_tidptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="39:5" pos:end="39:26">/* Enable signals.  */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:51"><expr pos:start="41:5" pos:end="41:50"><call pos:start="41:5" pos:end="41:50"><name pos:start="41:5" pos:end="41:15">sigprocmask</name><argument_list pos:start="41:16" pos:end="41:50">(<argument pos:start="41:17" pos:end="41:27"><expr pos:start="41:17" pos:end="41:27"><name pos:start="41:17" pos:end="41:27">SIG_SETMASK</name></expr></argument>, <argument pos:start="41:30" pos:end="41:43"><expr pos:start="41:30" pos:end="41:43"><operator pos:start="41:30" pos:end="41:30">&amp;</operator><name pos:start="41:31" pos:end="41:43"><name pos:start="41:31" pos:end="41:34">info</name><operator pos:start="41:35" pos:end="41:36">-&gt;</operator><name pos:start="41:37" pos:end="41:43">sigmask</name></name></expr></argument>, <argument pos:start="41:46" pos:end="41:49"><expr pos:start="41:46" pos:end="41:49"><name pos:start="41:46" pos:end="41:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="43:5" pos:end="43:49">/* Signal to the parent that we're ready.  */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:37"><expr pos:start="45:5" pos:end="45:36"><call pos:start="45:5" pos:end="45:36"><name pos:start="45:5" pos:end="45:22">pthread_mutex_lock</name><argument_list pos:start="45:23" pos:end="45:36">(<argument pos:start="45:24" pos:end="45:35"><expr pos:start="45:24" pos:end="45:35"><operator pos:start="45:24" pos:end="45:24">&amp;</operator><name pos:start="45:25" pos:end="45:35"><name pos:start="45:25" pos:end="45:28">info</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:35">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:40"><expr pos:start="47:5" pos:end="47:39"><call pos:start="47:5" pos:end="47:39"><name pos:start="47:5" pos:end="47:26">pthread_cond_broadcast</name><argument_list pos:start="47:27" pos:end="47:39">(<argument pos:start="47:28" pos:end="47:38"><expr pos:start="47:28" pos:end="47:38"><operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:38"><name pos:start="47:29" pos:end="47:32">info</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:38">cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:39"><expr pos:start="49:5" pos:end="49:38"><call pos:start="49:5" pos:end="49:38"><name pos:start="49:5" pos:end="49:24">pthread_mutex_unlock</name><argument_list pos:start="49:25" pos:end="49:38">(<argument pos:start="49:26" pos:end="49:37"><expr pos:start="49:26" pos:end="49:37"><operator pos:start="49:26" pos:end="49:26">&amp;</operator><name pos:start="49:27" pos:end="49:37"><name pos:start="49:27" pos:end="49:30">info</name><operator pos:start="49:31" pos:end="49:32">-&gt;</operator><name pos:start="49:33" pos:end="49:37">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="51:5" pos:end="51:72">/* Wait until the parent has finshed initializing the tls state.  */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:36"><expr pos:start="53:5" pos:end="53:35"><call pos:start="53:5" pos:end="53:35"><name pos:start="53:5" pos:end="53:22">pthread_mutex_lock</name><argument_list pos:start="53:23" pos:end="53:35">(<argument pos:start="53:24" pos:end="53:34"><expr pos:start="53:24" pos:end="53:34"><operator pos:start="53:24" pos:end="53:24">&amp;</operator><name pos:start="53:25" pos:end="53:34">clone_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:38"><expr pos:start="55:5" pos:end="55:37"><call pos:start="55:5" pos:end="55:37"><name pos:start="55:5" pos:end="55:24">pthread_mutex_unlock</name><argument_list pos:start="55:25" pos:end="55:37">(<argument pos:start="55:26" pos:end="55:36"><expr pos:start="55:26" pos:end="55:36"><operator pos:start="55:26" pos:end="55:26">&amp;</operator><name pos:start="55:27" pos:end="55:36">clone_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:18"><expr pos:start="57:5" pos:end="57:17"><call pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:12">cpu_loop</name><argument_list pos:start="57:13" pos:end="57:17">(<argument pos:start="57:14" pos:end="57:16"><expr pos:start="57:14" pos:end="57:16"><name pos:start="57:14" pos:end="57:16">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="59:5" pos:end="59:21">/* never exits */</comment>

    <return pos:start="61:5" pos:end="61:16">return <expr pos:start="61:12" pos:end="61:15"><name pos:start="61:12" pos:end="61:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
