<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22743.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">print_type_size</name><parameter_list pos:start="1:28" pos:end="3:41">(<parameter pos:start="1:29" pos:end="1:38"><decl pos:start="1:29" pos:end="1:38"><type pos:start="1:29" pos:end="1:38"><name pos:start="1:29" pos:end="1:35">Visitor</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">v</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:56"><decl pos:start="1:41" pos:end="1:56"><type pos:start="1:41" pos:end="1:56"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:56">name</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:71"><decl pos:start="1:59" pos:end="1:71"><type pos:start="1:59" pos:end="1:71"><name pos:start="1:59" pos:end="1:66">uint64_t</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:71">obj</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:40"><decl pos:start="3:29" pos:end="3:40"><type pos:start="3:29" pos:end="3:40"><name pos:start="3:29" pos:end="3:33">Error</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier><modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:32">

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">StringOutputVisitor</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:28">sov</name> <init pos:start="7:30" pos:end="7:40">= <expr pos:start="7:32" pos:end="7:40"><call pos:start="7:32" pos:end="7:40"><name pos:start="7:32" pos:end="7:37">to_sov</name><argument_list pos:start="7:38" pos:end="7:40">(<argument pos:start="7:39" pos:end="7:39"><expr pos:start="7:39" pos:end="7:39"><name pos:start="7:39" pos:end="7:39">v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:73"><decl pos:start="9:5" pos:end="9:72"><type pos:start="9:5" pos:end="9:21"><specifier pos:start="9:5" pos:end="9:10">static</specifier> <specifier pos:start="9:12" pos:end="9:16">const</specifier> <name pos:start="9:18" pos:end="9:21">char</name></type> <name pos:start="9:23" pos:end="9:32"><name pos:start="9:23" pos:end="9:30">suffixes</name><index pos:start="9:31" pos:end="9:32">[]</index></name> <init pos:start="9:34" pos:end="9:72">= <expr pos:start="9:36" pos:end="9:72"><block pos:start="9:36" pos:end="9:72">{ <expr pos:start="9:38" pos:end="9:40"><literal type="char" pos:start="9:38" pos:end="9:40">'B'</literal></expr>, <expr pos:start="9:43" pos:end="9:45"><literal type="char" pos:start="9:43" pos:end="9:45">'K'</literal></expr>, <expr pos:start="9:48" pos:end="9:50"><literal type="char" pos:start="9:48" pos:end="9:50">'M'</literal></expr>, <expr pos:start="9:53" pos:end="9:55"><literal type="char" pos:start="9:53" pos:end="9:55">'G'</literal></expr>, <expr pos:start="9:58" pos:end="9:60"><literal type="char" pos:start="9:58" pos:end="9:60">'T'</literal></expr>, <expr pos:start="9:63" pos:end="9:65"><literal type="char" pos:start="9:63" pos:end="9:65">'P'</literal></expr>, <expr pos:start="9:68" pos:end="9:70"><literal type="char" pos:start="9:68" pos:end="9:70">'E'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:16">div</name></decl>, <decl pos:start="11:19" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:19" pos:end="11:21">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:13">out</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:19"><name pos:start="19:10" pos:end="19:12">sov</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:19">human</name></name></expr>)</condition> <block pos:start="19:22" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:15">

        <expr_stmt pos:start="21:9" pos:end="21:47"><expr pos:start="21:9" pos:end="21:46"><name pos:start="21:9" pos:end="21:11">out</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:46"><name pos:start="21:15" pos:end="21:29">g_strdup_printf</name><argument_list pos:start="21:30" pos:end="21:46">(<argument pos:start="21:31" pos:end="21:39"><expr pos:start="21:31" pos:end="21:39"><literal type="string" pos:start="21:31" pos:end="21:33">"%"</literal><name pos:start="21:34" pos:end="21:39">PRIu64</name></expr></argument>, <argument pos:start="21:42" pos:end="21:45"><expr pos:start="21:42" pos:end="21:45"><operator pos:start="21:42" pos:end="21:42">*</operator><name pos:start="21:43" pos:end="21:45">obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:36"><expr pos:start="23:9" pos:end="23:35"><call pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:25">string_output_set</name><argument_list pos:start="23:26" pos:end="23:35">(<argument pos:start="23:27" pos:end="23:29"><expr pos:start="23:27" pos:end="23:29"><name pos:start="23:27" pos:end="23:29">sov</name></expr></argument>, <argument pos:start="23:32" pos:end="23:34"><expr pos:start="23:32" pos:end="23:34"><name pos:start="23:32" pos:end="23:34">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:15"><expr pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:7">val</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <operator pos:start="31:11" pos:end="31:11">*</operator><name pos:start="31:12" pos:end="31:14">obj</name></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="41:7">/* The exponent (returned in i) minus one gives us

     * floor(log2(val * 1024 / 1000).  The correction makes us

     * switch to the higher power when the integer part is &gt;= 1000.

     */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:39"><expr pos:start="43:5" pos:end="43:38"><call pos:start="43:5" pos:end="43:38"><name pos:start="43:5" pos:end="43:9">frexp</name><argument_list pos:start="43:10" pos:end="43:38">(<argument pos:start="43:11" pos:end="43:33"><expr pos:start="43:11" pos:end="43:33"><name pos:start="43:11" pos:end="43:13">val</name> <operator pos:start="43:15" pos:end="43:15">/</operator> <operator pos:start="43:17" pos:end="43:17">(</operator><literal type="number" pos:start="43:18" pos:end="43:23">1000.0</literal> <operator pos:start="43:25" pos:end="43:25">/</operator> <literal type="number" pos:start="43:27" pos:end="43:32">1024.0</literal><operator pos:start="43:33" pos:end="43:33">)</operator></expr></argument>, <argument pos:start="43:36" pos:end="43:37"><expr pos:start="43:36" pos:end="43:37"><operator pos:start="43:36" pos:end="43:36">&amp;</operator><name pos:start="43:37" pos:end="43:37">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:21"><expr pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:5">i</name> <operator pos:start="45:7" pos:end="45:7">=</operator> <operator pos:start="45:9" pos:end="45:9">(</operator><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">-</operator> <literal type="number" pos:start="45:14" pos:end="45:14">1</literal><operator pos:start="45:15" pos:end="45:15">)</operator> <operator pos:start="45:17" pos:end="45:17">/</operator> <literal type="number" pos:start="45:19" pos:end="45:20">10</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:37"><expr pos:start="47:5" pos:end="47:36"><call pos:start="47:5" pos:end="47:36"><name pos:start="47:5" pos:end="47:10">assert</name><argument_list pos:start="47:11" pos:end="47:36">(<argument pos:start="47:12" pos:end="47:35"><expr pos:start="47:12" pos:end="47:35"><name pos:start="47:12" pos:end="47:12">i</name> <operator pos:start="47:14" pos:end="47:14">&lt;</operator> <call pos:start="47:16" pos:end="47:35"><name pos:start="47:16" pos:end="47:25">ARRAY_SIZE</name><argument_list pos:start="47:26" pos:end="47:35">(<argument pos:start="47:27" pos:end="47:34"><expr pos:start="47:27" pos:end="47:34"><name pos:start="47:27" pos:end="47:34">suffixes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:27"><expr pos:start="49:5" pos:end="49:26"><name pos:start="49:5" pos:end="49:7">div</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <literal type="number" pos:start="49:11" pos:end="49:14">1ULL</literal> <operator pos:start="49:16" pos:end="49:17">&lt;&lt;</operator> <operator pos:start="49:19" pos:end="49:19">(</operator><name pos:start="49:20" pos:end="49:20">i</name> <operator pos:start="49:22" pos:end="49:22">*</operator> <literal type="number" pos:start="49:24" pos:end="49:25">10</literal><operator pos:start="49:26" pos:end="49:26">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="55:71"><expr pos:start="53:5" pos:end="55:70"><name pos:start="53:5" pos:end="53:7">out</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="55:70"><name pos:start="53:11" pos:end="53:25">g_strdup_printf</name><argument_list pos:start="53:26" pos:end="55:70">(<argument pos:start="53:27" pos:end="53:50"><expr pos:start="53:27" pos:end="53:50"><literal type="string" pos:start="53:27" pos:end="53:29">"%"</literal><name pos:start="53:30" pos:end="53:35">PRIu64</name><literal type="string" pos:start="53:36" pos:end="53:50">" (%0.3g %c%s)"</literal></expr></argument>, <argument pos:start="53:53" pos:end="53:55"><expr pos:start="53:53" pos:end="53:55"><name pos:start="53:53" pos:end="53:55">val</name></expr></argument>,

                          <argument pos:start="55:27" pos:end="55:41"><expr pos:start="55:27" pos:end="55:41"><operator pos:start="55:27" pos:end="55:27">(</operator><name pos:start="55:28" pos:end="55:33">double</name><operator pos:start="55:34" pos:end="55:34">)</operator><name pos:start="55:35" pos:end="55:37">val</name><operator pos:start="55:38" pos:end="55:38">/</operator><name pos:start="55:39" pos:end="55:41">div</name></expr></argument>, <argument pos:start="55:44" pos:end="55:54"><expr pos:start="55:44" pos:end="55:54"><name pos:start="55:44" pos:end="55:54"><name pos:start="55:44" pos:end="55:51">suffixes</name><index pos:start="55:52" pos:end="55:54">[<expr pos:start="55:53" pos:end="55:53"><name pos:start="55:53" pos:end="55:53">i</name></expr>]</index></name></expr></argument>, <argument pos:start="55:57" pos:end="55:69"><expr pos:start="55:57" pos:end="55:69"><ternary pos:start="55:57" pos:end="55:69"><condition pos:start="55:57" pos:end="55:59"><expr pos:start="55:57" pos:end="55:57"><name pos:start="55:57" pos:end="55:57">i</name></expr> ?</condition><then pos:start="55:61" pos:end="55:64"> <expr pos:start="55:61" pos:end="55:64"><literal type="string" pos:start="55:61" pos:end="55:64">"iB"</literal></expr> </then><else pos:start="55:66" pos:end="55:69">: <expr pos:start="55:68" pos:end="55:69"><literal type="string" pos:start="55:68" pos:end="55:69">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:32"><expr pos:start="57:5" pos:end="57:31"><call pos:start="57:5" pos:end="57:31"><name pos:start="57:5" pos:end="57:21">string_output_set</name><argument_list pos:start="57:22" pos:end="57:31">(<argument pos:start="57:23" pos:end="57:25"><expr pos:start="57:23" pos:end="57:25"><name pos:start="57:23" pos:end="57:25">sov</name></expr></argument>, <argument pos:start="57:28" pos:end="57:30"><expr pos:start="57:28" pos:end="57:30"><name pos:start="57:28" pos:end="57:30">out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
