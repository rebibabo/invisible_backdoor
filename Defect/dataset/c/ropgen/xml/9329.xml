<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9329.c" pos:tabs="8"><function pos:start="1:1" pos:end="249:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">vmdk_create_extent</name><parameter_list pos:start="1:30" pos:end="5:43">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><specifier pos:start="1:31" pos:end="1:35">const</specifier> <name pos:start="1:37" pos:end="1:40">char</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:50">filename</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:68"><decl pos:start="1:53" pos:end="1:68"><type pos:start="1:53" pos:end="1:68"><name pos:start="1:53" pos:end="1:59">int64_t</name></type> <name pos:start="1:61" pos:end="1:68">filesize</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:39"><decl pos:start="3:31" pos:end="3:39"><type pos:start="3:31" pos:end="3:39"><name pos:start="3:31" pos:end="3:34">bool</name></type> <name pos:start="3:36" pos:end="3:39">flat</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:54"><decl pos:start="3:42" pos:end="3:54"><type pos:start="3:42" pos:end="3:54"><name pos:start="3:42" pos:end="3:45">bool</name></type> <name pos:start="3:47" pos:end="3:54">compress</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:73"><decl pos:start="3:57" pos:end="3:73"><type pos:start="3:57" pos:end="3:73"><name pos:start="3:57" pos:end="3:60">bool</name></type> <name pos:start="3:62" pos:end="3:73">zeroed_grain</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:42"><decl pos:start="5:31" pos:end="5:42"><type pos:start="5:31" pos:end="5:42"><name pos:start="5:31" pos:end="5:35">Error</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier><modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:42">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="249:1">{<block_content pos:start="9:5" pos:end="247:15">

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:14">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">bs</name> <init pos:start="11:26" pos:end="11:31">= <expr pos:start="11:28" pos:end="11:31"><name pos:start="11:28" pos:end="11:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15">VMDK4Header</name></type> <name pos:start="13:17" pos:end="13:22">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:63"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:16">tmp</name></decl>, <decl pos:start="17:19" pos:end="17:23"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:19" pos:end="17:23">magic</name></decl>, <decl pos:start="17:26" pos:end="17:31"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:26" pos:end="17:31">grains</name></decl>, <decl pos:start="17:34" pos:end="17:43"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:34" pos:end="17:43">gd_sectors</name></decl>, <decl pos:start="17:46" pos:end="17:52"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:46" pos:end="17:52">gt_size</name></decl>, <decl pos:start="17:55" pos:end="17:62"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:55" pos:end="17:62">gt_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:12">uint32_t</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:20">gd_buf</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:19">gd_buf_size</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:55"><expr pos:start="25:5" pos:end="25:54"><name pos:start="25:5" pos:end="25:7">ret</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:54"><name pos:start="25:11" pos:end="25:26">bdrv_create_file</name><argument_list pos:start="25:27" pos:end="25:54">(<argument pos:start="25:28" pos:end="25:35"><expr pos:start="25:28" pos:end="25:35"><name pos:start="25:28" pos:end="25:35">filename</name></expr></argument>, <argument pos:start="25:38" pos:end="25:41"><expr pos:start="25:38" pos:end="25:41"><name pos:start="25:38" pos:end="25:41">NULL</name></expr></argument>, <argument pos:start="25:44" pos:end="25:53"><expr pos:start="25:44" pos:end="25:53"><operator pos:start="25:44" pos:end="25:44">&amp;</operator><name pos:start="25:45" pos:end="25:53">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">&lt;</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>)</condition> <block pos:start="27:18" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:41"><expr pos:start="29:9" pos:end="29:40"><call pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:23">error_propagate</name><argument_list pos:start="29:24" pos:end="29:40">(<argument pos:start="29:25" pos:end="29:28"><expr pos:start="29:25" pos:end="29:28"><name pos:start="29:25" pos:end="29:28">errp</name></expr></argument>, <argument pos:start="29:31" pos:end="29:39"><expr pos:start="29:31" pos:end="29:39"><name pos:start="29:31" pos:end="29:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="31:9" pos:end="31:18">goto <name pos:start="31:14" pos:end="31:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:77"><expr pos:start="37:5" pos:end="37:76"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:76"><name pos:start="37:11" pos:end="37:24">bdrv_file_open</name><argument_list pos:start="37:25" pos:end="37:76">(<argument pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><operator pos:start="37:26" pos:end="37:26">&amp;</operator><name pos:start="37:27" pos:end="37:28">bs</name></expr></argument>, <argument pos:start="37:31" pos:end="37:38"><expr pos:start="37:31" pos:end="37:38"><name pos:start="37:31" pos:end="37:38">filename</name></expr></argument>, <argument pos:start="37:41" pos:end="37:44"><expr pos:start="37:41" pos:end="37:44"><name pos:start="37:41" pos:end="37:44">NULL</name></expr></argument>, <argument pos:start="37:47" pos:end="37:50"><expr pos:start="37:47" pos:end="37:50"><name pos:start="37:47" pos:end="37:50">NULL</name></expr></argument>, <argument pos:start="37:53" pos:end="37:63"><expr pos:start="37:53" pos:end="37:63"><name pos:start="37:53" pos:end="37:63">BDRV_O_RDWR</name></expr></argument>, <argument pos:start="37:66" pos:end="37:75"><expr pos:start="37:66" pos:end="37:75"><operator pos:start="37:66" pos:end="37:66">&amp;</operator><name pos:start="37:67" pos:end="37:75">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">&lt;</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>)</condition> <block pos:start="39:18" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:41"><expr pos:start="41:9" pos:end="41:40"><call pos:start="41:9" pos:end="41:40"><name pos:start="41:9" pos:end="41:23">error_propagate</name><argument_list pos:start="41:24" pos:end="41:40">(<argument pos:start="41:25" pos:end="41:28"><expr pos:start="41:25" pos:end="41:28"><name pos:start="41:25" pos:end="41:28">errp</name></expr></argument>, <argument pos:start="41:31" pos:end="41:39"><expr pos:start="41:31" pos:end="41:39"><name pos:start="41:31" pos:end="41:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="43:9" pos:end="43:18">goto <name pos:start="43:14" pos:end="43:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="61:5"><if pos:start="49:5" pos:end="61:5">if <condition pos:start="49:8" pos:end="49:13">(<expr pos:start="49:9" pos:end="49:12"><name pos:start="49:9" pos:end="49:12">flat</name></expr>)</condition> <block pos:start="49:15" pos:end="61:5">{<block_content pos:start="51:9" pos:end="59:18">

        <expr_stmt pos:start="51:9" pos:end="51:42"><expr pos:start="51:9" pos:end="51:41"><name pos:start="51:9" pos:end="51:11">ret</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="51:41"><name pos:start="51:15" pos:end="51:27">bdrv_truncate</name><argument_list pos:start="51:28" pos:end="51:41">(<argument pos:start="51:29" pos:end="51:30"><expr pos:start="51:29" pos:end="51:30"><name pos:start="51:29" pos:end="51:30">bs</name></expr></argument>, <argument pos:start="51:33" pos:end="51:40"><expr pos:start="51:33" pos:end="51:40"><name pos:start="51:33" pos:end="51:40">filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:20">(<expr pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:17">&lt;</operator> <literal type="number" pos:start="53:19" pos:end="53:19">0</literal></expr>)</condition> <block pos:start="53:22" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:56">

            <expr_stmt pos:start="55:13" pos:end="55:56"><expr pos:start="55:13" pos:end="55:55"><call pos:start="55:13" pos:end="55:55"><name pos:start="55:13" pos:end="55:22">error_setg</name><argument_list pos:start="55:23" pos:end="55:55">(<argument pos:start="55:24" pos:end="55:27"><expr pos:start="55:24" pos:end="55:27"><name pos:start="55:24" pos:end="55:27">errp</name></expr></argument>, <argument pos:start="55:30" pos:end="55:54"><expr pos:start="55:30" pos:end="55:54"><literal type="string" pos:start="55:30" pos:end="55:54">"Could not truncate file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="59:9" pos:end="59:18">goto <name pos:start="59:14" pos:end="59:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:37"><expr pos:start="63:5" pos:end="63:36"><name pos:start="63:5" pos:end="63:9">magic</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <call pos:start="63:13" pos:end="63:36"><name pos:start="63:13" pos:end="63:23">cpu_to_be32</name><argument_list pos:start="63:24" pos:end="63:36">(<argument pos:start="63:25" pos:end="63:35"><expr pos:start="63:25" pos:end="63:35"><name pos:start="63:25" pos:end="63:35">VMDK4_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:39"><expr pos:start="65:5" pos:end="65:38"><call pos:start="65:5" pos:end="65:38"><name pos:start="65:5" pos:end="65:10">memset</name><argument_list pos:start="65:11" pos:end="65:38">(<argument pos:start="65:12" pos:end="65:18"><expr pos:start="65:12" pos:end="65:18"><operator pos:start="65:12" pos:end="65:12">&amp;</operator><name pos:start="65:13" pos:end="65:18">header</name></expr></argument>, <argument pos:start="65:21" pos:end="65:21"><expr pos:start="65:21" pos:end="65:21"><literal type="number" pos:start="65:21" pos:end="65:21">0</literal></expr></argument>, <argument pos:start="65:24" pos:end="65:37"><expr pos:start="65:24" pos:end="65:37"><sizeof pos:start="65:24" pos:end="65:37">sizeof<argument_list pos:start="65:30" pos:end="65:37">(<argument pos:start="65:31" pos:end="65:36"><expr pos:start="65:31" pos:end="65:36"><name pos:start="65:31" pos:end="65:36">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:42"><expr pos:start="67:5" pos:end="67:41"><name pos:start="67:5" pos:end="67:18"><name pos:start="67:5" pos:end="67:10">header</name><operator pos:start="67:11" pos:end="67:11">.</operator><name pos:start="67:12" pos:end="67:18">version</name></name> <operator pos:start="67:20" pos:end="67:20">=</operator> <ternary pos:start="67:22" pos:end="67:41"><condition pos:start="67:22" pos:end="67:35"><expr pos:start="67:22" pos:end="67:33"><name pos:start="67:22" pos:end="67:33">zeroed_grain</name></expr> ?</condition><then pos:start="67:37" pos:end="67:37"> <expr pos:start="67:37" pos:end="67:37"><literal type="number" pos:start="67:37" pos:end="67:37">2</literal></expr> </then><else pos:start="67:39" pos:end="67:41">: <expr pos:start="67:41" pos:end="67:41"><literal type="number" pos:start="67:41" pos:end="67:41">1</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="73:64"><expr pos:start="69:5" pos:end="73:63"><name pos:start="69:5" pos:end="69:16"><name pos:start="69:5" pos:end="69:10">header</name><operator pos:start="69:11" pos:end="69:11">.</operator><name pos:start="69:12" pos:end="69:16">flags</name></name> <operator pos:start="69:18" pos:end="69:18">=</operator> <name pos:start="69:20" pos:end="69:33">VMDK4_FLAG_RGD</name> <operator pos:start="69:35" pos:end="69:35">|</operator> <name pos:start="69:37" pos:end="69:56">VMDK4_FLAG_NL_DETECT</name>

                   <operator pos:start="71:20" pos:end="71:20">|</operator> <operator pos:start="71:22" pos:end="71:22">(</operator><ternary pos:start="71:23" pos:end="71:76"><condition pos:start="71:23" pos:end="71:32"><expr pos:start="71:23" pos:end="71:30"><name pos:start="71:23" pos:end="71:30">compress</name></expr> ?</condition><then pos:start="71:34" pos:end="71:72"> <expr pos:start="71:34" pos:end="71:72"><name pos:start="71:34" pos:end="71:52">VMDK4_FLAG_COMPRESS</name> <operator pos:start="71:54" pos:end="71:54">|</operator> <name pos:start="71:56" pos:end="71:72">VMDK4_FLAG_MARKER</name></expr> </then><else pos:start="71:74" pos:end="71:76">: <expr pos:start="71:76" pos:end="71:76"><literal type="number" pos:start="71:76" pos:end="71:76">0</literal></expr></else></ternary><operator pos:start="71:77" pos:end="71:77">)</operator>

                   <operator pos:start="73:20" pos:end="73:20">|</operator> <operator pos:start="73:22" pos:end="73:22">(</operator><ternary pos:start="73:23" pos:end="73:62"><condition pos:start="73:23" pos:end="73:36"><expr pos:start="73:23" pos:end="73:34"><name pos:start="73:23" pos:end="73:34">zeroed_grain</name></expr> ?</condition><then pos:start="73:38" pos:end="73:58"> <expr pos:start="73:38" pos:end="73:58"><name pos:start="73:38" pos:end="73:58">VMDK4_FLAG_ZERO_GRAIN</name></expr> </then><else pos:start="73:60" pos:end="73:62">: <expr pos:start="73:62" pos:end="73:62"><literal type="number" pos:start="73:62" pos:end="73:62">0</literal></expr></else></ternary><operator pos:start="73:63" pos:end="73:63">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:72"><expr pos:start="75:5" pos:end="75:71"><name pos:start="75:5" pos:end="75:28"><name pos:start="75:5" pos:end="75:10">header</name><operator pos:start="75:11" pos:end="75:11">.</operator><name pos:start="75:12" pos:end="75:28">compressAlgorithm</name></name> <operator pos:start="75:30" pos:end="75:30">=</operator> <ternary pos:start="75:32" pos:end="75:71"><condition pos:start="75:32" pos:end="75:41"><expr pos:start="75:32" pos:end="75:39"><name pos:start="75:32" pos:end="75:39">compress</name></expr> ?</condition><then pos:start="75:43" pos:end="75:67"> <expr pos:start="75:43" pos:end="75:67"><name pos:start="75:43" pos:end="75:67">VMDK4_COMPRESSION_DEFLATE</name></expr> </then><else pos:start="75:69" pos:end="75:71">: <expr pos:start="75:71" pos:end="75:71"><literal type="number" pos:start="75:71" pos:end="75:71">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:50"><expr pos:start="77:5" pos:end="77:49"><name pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:10">header</name><operator pos:start="77:11" pos:end="77:11">.</operator><name pos:start="77:12" pos:end="77:19">capacity</name></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <name pos:start="77:23" pos:end="77:30">filesize</name> <operator pos:start="77:32" pos:end="77:32">/</operator> <name pos:start="77:34" pos:end="77:49">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:29"><expr pos:start="79:5" pos:end="79:28"><name pos:start="79:5" pos:end="79:22"><name pos:start="79:5" pos:end="79:10">header</name><operator pos:start="79:11" pos:end="79:11">.</operator><name pos:start="79:12" pos:end="79:22">granularity</name></name> <operator pos:start="79:24" pos:end="79:24">=</operator> <literal type="number" pos:start="79:26" pos:end="79:28">128</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:46"><expr pos:start="81:5" pos:end="81:45"><name pos:start="81:5" pos:end="81:26"><name pos:start="81:5" pos:end="81:10">header</name><operator pos:start="81:11" pos:end="81:11">.</operator><name pos:start="81:12" pos:end="81:26">num_gtes_per_gt</name></name> <operator pos:start="81:28" pos:end="81:28">=</operator> <name pos:start="81:30" pos:end="81:45">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:75"><expr pos:start="85:5" pos:end="85:74"><name pos:start="85:5" pos:end="85:10">grains</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <call pos:start="85:14" pos:end="85:74"><name pos:start="85:14" pos:end="85:25">DIV_ROUND_UP</name><argument_list pos:start="85:26" pos:end="85:74">(<argument pos:start="85:27" pos:end="85:53"><expr pos:start="85:27" pos:end="85:53"><name pos:start="85:27" pos:end="85:34">filesize</name> <operator pos:start="85:36" pos:end="85:36">/</operator> <name pos:start="85:38" pos:end="85:53">BDRV_SECTOR_SIZE</name></expr></argument>, <argument pos:start="85:56" pos:end="85:73"><expr pos:start="85:56" pos:end="85:73"><name pos:start="85:56" pos:end="85:73"><name pos:start="85:56" pos:end="85:61">header</name><operator pos:start="85:62" pos:end="85:62">.</operator><name pos:start="85:63" pos:end="85:73">granularity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="89:45"><expr pos:start="87:5" pos:end="89:44"><name pos:start="87:5" pos:end="87:11">gt_size</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <call pos:start="87:15" pos:end="89:44"><name pos:start="87:15" pos:end="87:26">DIV_ROUND_UP</name><argument_list pos:start="87:27" pos:end="89:44">(<argument pos:start="87:28" pos:end="87:68"><expr pos:start="87:28" pos:end="87:68"><name pos:start="87:28" pos:end="87:49"><name pos:start="87:28" pos:end="87:33">header</name><operator pos:start="87:34" pos:end="87:34">.</operator><name pos:start="87:35" pos:end="87:49">num_gtes_per_gt</name></name> <operator pos:start="87:51" pos:end="87:51">*</operator> <sizeof pos:start="87:53" pos:end="87:68">sizeof<argument_list pos:start="87:59" pos:end="87:68">(<argument pos:start="87:60" pos:end="87:67"><expr pos:start="87:60" pos:end="87:67"><name pos:start="87:60" pos:end="87:67">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                           <argument pos:start="89:28" pos:end="89:43"><expr pos:start="89:28" pos:end="89:43"><name pos:start="89:28" pos:end="89:43">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:60"><expr pos:start="91:5" pos:end="91:59"><name pos:start="91:5" pos:end="91:12">gt_count</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:59"><name pos:start="91:16" pos:end="91:27">DIV_ROUND_UP</name><argument_list pos:start="91:28" pos:end="91:59">(<argument pos:start="91:29" pos:end="91:34"><expr pos:start="91:29" pos:end="91:34"><name pos:start="91:29" pos:end="91:34">grains</name></expr></argument>, <argument pos:start="91:37" pos:end="91:58"><expr pos:start="91:37" pos:end="91:58"><name pos:start="91:37" pos:end="91:58"><name pos:start="91:37" pos:end="91:42">header</name><operator pos:start="91:43" pos:end="91:43">.</operator><name pos:start="91:44" pos:end="91:58">num_gtes_per_gt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:77"><expr pos:start="93:5" pos:end="93:76"><name pos:start="93:5" pos:end="93:14">gd_sectors</name> <operator pos:start="93:16" pos:end="93:16">=</operator> <call pos:start="93:18" pos:end="93:76"><name pos:start="93:18" pos:end="93:29">DIV_ROUND_UP</name><argument_list pos:start="93:30" pos:end="93:76">(<argument pos:start="93:31" pos:end="93:57"><expr pos:start="93:31" pos:end="93:57"><name pos:start="93:31" pos:end="93:38">gt_count</name> <operator pos:start="93:40" pos:end="93:40">*</operator> <sizeof pos:start="93:42" pos:end="93:57">sizeof<argument_list pos:start="93:48" pos:end="93:57">(<argument pos:start="93:49" pos:end="93:56"><expr pos:start="93:49" pos:end="93:56"><name pos:start="93:49" pos:end="93:56">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="93:60" pos:end="93:75"><expr pos:start="93:60" pos:end="93:75"><name pos:start="93:60" pos:end="93:75">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:27"><expr pos:start="97:5" pos:end="97:26"><name pos:start="97:5" pos:end="97:22"><name pos:start="97:5" pos:end="97:10">header</name><operator pos:start="97:11" pos:end="97:11">.</operator><name pos:start="97:12" pos:end="97:22">desc_offset</name></name> <operator pos:start="97:24" pos:end="97:24">=</operator> <literal type="number" pos:start="97:26" pos:end="97:26">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:26"><expr pos:start="99:5" pos:end="99:25"><name pos:start="99:5" pos:end="99:20"><name pos:start="99:5" pos:end="99:10">header</name><operator pos:start="99:11" pos:end="99:11">.</operator><name pos:start="99:12" pos:end="99:20">desc_size</name></name> <operator pos:start="99:22" pos:end="99:22">=</operator> <literal type="number" pos:start="99:24" pos:end="99:25">20</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:62"><expr pos:start="101:5" pos:end="101:61"><name pos:start="101:5" pos:end="101:21"><name pos:start="101:5" pos:end="101:10">header</name><operator pos:start="101:11" pos:end="101:11">.</operator><name pos:start="101:12" pos:end="101:21">rgd_offset</name></name> <operator pos:start="101:23" pos:end="101:23">=</operator> <name pos:start="101:25" pos:end="101:42"><name pos:start="101:25" pos:end="101:30">header</name><operator pos:start="101:31" pos:end="101:31">.</operator><name pos:start="101:32" pos:end="101:42">desc_offset</name></name> <operator pos:start="101:44" pos:end="101:44">+</operator> <name pos:start="101:46" pos:end="101:61"><name pos:start="101:46" pos:end="101:51">header</name><operator pos:start="101:52" pos:end="101:52">.</operator><name pos:start="101:53" pos:end="101:61">desc_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:77"><expr pos:start="103:5" pos:end="103:76"><name pos:start="103:5" pos:end="103:20"><name pos:start="103:5" pos:end="103:10">header</name><operator pos:start="103:11" pos:end="103:11">.</operator><name pos:start="103:12" pos:end="103:20">gd_offset</name></name> <operator pos:start="103:22" pos:end="103:22">=</operator> <name pos:start="103:24" pos:end="103:40"><name pos:start="103:24" pos:end="103:29">header</name><operator pos:start="103:30" pos:end="103:30">.</operator><name pos:start="103:31" pos:end="103:40">rgd_offset</name></name> <operator pos:start="103:42" pos:end="103:42">+</operator> <name pos:start="103:44" pos:end="103:53">gd_sectors</name> <operator pos:start="103:55" pos:end="103:55">+</operator> <operator pos:start="103:57" pos:end="103:57">(</operator><name pos:start="103:58" pos:end="103:64">gt_size</name> <operator pos:start="103:66" pos:end="103:66">*</operator> <name pos:start="103:68" pos:end="103:75">gt_count</name><operator pos:start="103:76" pos:end="103:76">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="109:37"><expr pos:start="105:5" pos:end="109:36"><name pos:start="105:5" pos:end="105:23"><name pos:start="105:5" pos:end="105:10">header</name><operator pos:start="105:11" pos:end="105:11">.</operator><name pos:start="105:12" pos:end="105:23">grain_offset</name></name> <operator pos:start="105:25" pos:end="105:25">=</operator>

        <call pos:start="107:9" pos:end="109:36"><name pos:start="107:9" pos:end="107:16">ROUND_UP</name><argument_list pos:start="107:17" pos:end="109:36">(<argument pos:start="107:18" pos:end="107:69"><expr pos:start="107:18" pos:end="107:69"><name pos:start="107:18" pos:end="107:33"><name pos:start="107:18" pos:end="107:23">header</name><operator pos:start="107:24" pos:end="107:24">.</operator><name pos:start="107:25" pos:end="107:33">gd_offset</name></name> <operator pos:start="107:35" pos:end="107:35">+</operator> <name pos:start="107:37" pos:end="107:46">gd_sectors</name> <operator pos:start="107:48" pos:end="107:48">+</operator> <operator pos:start="107:50" pos:end="107:50">(</operator><name pos:start="107:51" pos:end="107:57">gt_size</name> <operator pos:start="107:59" pos:end="107:59">*</operator> <name pos:start="107:61" pos:end="107:68">gt_count</name><operator pos:start="107:69" pos:end="107:69">)</operator></expr></argument>,

                 <argument pos:start="109:18" pos:end="109:35"><expr pos:start="109:18" pos:end="109:35"><name pos:start="109:18" pos:end="109:35"><name pos:start="109:18" pos:end="109:23">header</name><operator pos:start="109:24" pos:end="109:24">.</operator><name pos:start="109:25" pos:end="109:35">granularity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="111:5" pos:end="111:47">/* swap endianness for all header fields */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:49"><expr pos:start="113:5" pos:end="113:48"><name pos:start="113:5" pos:end="113:18"><name pos:start="113:5" pos:end="113:10">header</name><operator pos:start="113:11" pos:end="113:11">.</operator><name pos:start="113:12" pos:end="113:18">version</name></name> <operator pos:start="113:20" pos:end="113:20">=</operator> <call pos:start="113:22" pos:end="113:48"><name pos:start="113:22" pos:end="113:32">cpu_to_le32</name><argument_list pos:start="113:33" pos:end="113:48">(<argument pos:start="113:34" pos:end="113:47"><expr pos:start="113:34" pos:end="113:47"><name pos:start="113:34" pos:end="113:47"><name pos:start="113:34" pos:end="113:39">header</name><operator pos:start="113:40" pos:end="113:40">.</operator><name pos:start="113:41" pos:end="113:47">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:45"><expr pos:start="115:5" pos:end="115:44"><name pos:start="115:5" pos:end="115:16"><name pos:start="115:5" pos:end="115:10">header</name><operator pos:start="115:11" pos:end="115:11">.</operator><name pos:start="115:12" pos:end="115:16">flags</name></name> <operator pos:start="115:18" pos:end="115:18">=</operator> <call pos:start="115:20" pos:end="115:44"><name pos:start="115:20" pos:end="115:30">cpu_to_le32</name><argument_list pos:start="115:31" pos:end="115:44">(<argument pos:start="115:32" pos:end="115:43"><expr pos:start="115:32" pos:end="115:43"><name pos:start="115:32" pos:end="115:43"><name pos:start="115:32" pos:end="115:37">header</name><operator pos:start="115:38" pos:end="115:38">.</operator><name pos:start="115:39" pos:end="115:43">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:51"><expr pos:start="117:5" pos:end="117:50"><name pos:start="117:5" pos:end="117:19"><name pos:start="117:5" pos:end="117:10">header</name><operator pos:start="117:11" pos:end="117:11">.</operator><name pos:start="117:12" pos:end="117:19">capacity</name></name> <operator pos:start="117:21" pos:end="117:21">=</operator> <call pos:start="117:23" pos:end="117:50"><name pos:start="117:23" pos:end="117:33">cpu_to_le64</name><argument_list pos:start="117:34" pos:end="117:50">(<argument pos:start="117:35" pos:end="117:49"><expr pos:start="117:35" pos:end="117:49"><name pos:start="117:35" pos:end="117:49"><name pos:start="117:35" pos:end="117:40">header</name><operator pos:start="117:41" pos:end="117:41">.</operator><name pos:start="117:42" pos:end="117:49">capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:57"><expr pos:start="119:5" pos:end="119:56"><name pos:start="119:5" pos:end="119:22"><name pos:start="119:5" pos:end="119:10">header</name><operator pos:start="119:11" pos:end="119:11">.</operator><name pos:start="119:12" pos:end="119:22">granularity</name></name> <operator pos:start="119:24" pos:end="119:24">=</operator> <call pos:start="119:26" pos:end="119:56"><name pos:start="119:26" pos:end="119:36">cpu_to_le64</name><argument_list pos:start="119:37" pos:end="119:56">(<argument pos:start="119:38" pos:end="119:55"><expr pos:start="119:38" pos:end="119:55"><name pos:start="119:38" pos:end="119:55"><name pos:start="119:38" pos:end="119:43">header</name><operator pos:start="119:44" pos:end="119:44">.</operator><name pos:start="119:45" pos:end="119:55">granularity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:65"><expr pos:start="121:5" pos:end="121:64"><name pos:start="121:5" pos:end="121:26"><name pos:start="121:5" pos:end="121:10">header</name><operator pos:start="121:11" pos:end="121:11">.</operator><name pos:start="121:12" pos:end="121:26">num_gtes_per_gt</name></name> <operator pos:start="121:28" pos:end="121:28">=</operator> <call pos:start="121:30" pos:end="121:64"><name pos:start="121:30" pos:end="121:40">cpu_to_le32</name><argument_list pos:start="121:41" pos:end="121:64">(<argument pos:start="121:42" pos:end="121:63"><expr pos:start="121:42" pos:end="121:63"><name pos:start="121:42" pos:end="121:63"><name pos:start="121:42" pos:end="121:47">header</name><operator pos:start="121:48" pos:end="121:48">.</operator><name pos:start="121:49" pos:end="121:63">num_gtes_per_gt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:57"><expr pos:start="123:5" pos:end="123:56"><name pos:start="123:5" pos:end="123:22"><name pos:start="123:5" pos:end="123:10">header</name><operator pos:start="123:11" pos:end="123:11">.</operator><name pos:start="123:12" pos:end="123:22">desc_offset</name></name> <operator pos:start="123:24" pos:end="123:24">=</operator> <call pos:start="123:26" pos:end="123:56"><name pos:start="123:26" pos:end="123:36">cpu_to_le64</name><argument_list pos:start="123:37" pos:end="123:56">(<argument pos:start="123:38" pos:end="123:55"><expr pos:start="123:38" pos:end="123:55"><name pos:start="123:38" pos:end="123:55"><name pos:start="123:38" pos:end="123:43">header</name><operator pos:start="123:44" pos:end="123:44">.</operator><name pos:start="123:45" pos:end="123:55">desc_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:53"><expr pos:start="125:5" pos:end="125:52"><name pos:start="125:5" pos:end="125:20"><name pos:start="125:5" pos:end="125:10">header</name><operator pos:start="125:11" pos:end="125:11">.</operator><name pos:start="125:12" pos:end="125:20">desc_size</name></name> <operator pos:start="125:22" pos:end="125:22">=</operator> <call pos:start="125:24" pos:end="125:52"><name pos:start="125:24" pos:end="125:34">cpu_to_le64</name><argument_list pos:start="125:35" pos:end="125:52">(<argument pos:start="125:36" pos:end="125:51"><expr pos:start="125:36" pos:end="125:51"><name pos:start="125:36" pos:end="125:51"><name pos:start="125:36" pos:end="125:41">header</name><operator pos:start="125:42" pos:end="125:42">.</operator><name pos:start="125:43" pos:end="125:51">desc_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:55"><expr pos:start="127:5" pos:end="127:54"><name pos:start="127:5" pos:end="127:21"><name pos:start="127:5" pos:end="127:10">header</name><operator pos:start="127:11" pos:end="127:11">.</operator><name pos:start="127:12" pos:end="127:21">rgd_offset</name></name> <operator pos:start="127:23" pos:end="127:23">=</operator> <call pos:start="127:25" pos:end="127:54"><name pos:start="127:25" pos:end="127:35">cpu_to_le64</name><argument_list pos:start="127:36" pos:end="127:54">(<argument pos:start="127:37" pos:end="127:53"><expr pos:start="127:37" pos:end="127:53"><name pos:start="127:37" pos:end="127:53"><name pos:start="127:37" pos:end="127:42">header</name><operator pos:start="127:43" pos:end="127:43">.</operator><name pos:start="127:44" pos:end="127:53">rgd_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:53"><expr pos:start="129:5" pos:end="129:52"><name pos:start="129:5" pos:end="129:20"><name pos:start="129:5" pos:end="129:10">header</name><operator pos:start="129:11" pos:end="129:11">.</operator><name pos:start="129:12" pos:end="129:20">gd_offset</name></name> <operator pos:start="129:22" pos:end="129:22">=</operator> <call pos:start="129:24" pos:end="129:52"><name pos:start="129:24" pos:end="129:34">cpu_to_le64</name><argument_list pos:start="129:35" pos:end="129:52">(<argument pos:start="129:36" pos:end="129:51"><expr pos:start="129:36" pos:end="129:51"><name pos:start="129:36" pos:end="129:51"><name pos:start="129:36" pos:end="129:41">header</name><operator pos:start="129:42" pos:end="129:42">.</operator><name pos:start="129:43" pos:end="129:51">gd_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:59"><expr pos:start="131:5" pos:end="131:58"><name pos:start="131:5" pos:end="131:23"><name pos:start="131:5" pos:end="131:10">header</name><operator pos:start="131:11" pos:end="131:11">.</operator><name pos:start="131:12" pos:end="131:23">grain_offset</name></name> <operator pos:start="131:25" pos:end="131:25">=</operator> <call pos:start="131:27" pos:end="131:58"><name pos:start="131:27" pos:end="131:37">cpu_to_le64</name><argument_list pos:start="131:38" pos:end="131:58">(<argument pos:start="131:39" pos:end="131:57"><expr pos:start="131:39" pos:end="131:57"><name pos:start="131:39" pos:end="131:57"><name pos:start="131:39" pos:end="131:44">header</name><operator pos:start="131:45" pos:end="131:45">.</operator><name pos:start="131:46" pos:end="131:57">grain_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:69"><expr pos:start="133:5" pos:end="133:68"><name pos:start="133:5" pos:end="133:28"><name pos:start="133:5" pos:end="133:10">header</name><operator pos:start="133:11" pos:end="133:11">.</operator><name pos:start="133:12" pos:end="133:28">compressAlgorithm</name></name> <operator pos:start="133:30" pos:end="133:30">=</operator> <call pos:start="133:32" pos:end="133:68"><name pos:start="133:32" pos:end="133:42">cpu_to_le16</name><argument_list pos:start="133:43" pos:end="133:68">(<argument pos:start="133:44" pos:end="133:67"><expr pos:start="133:44" pos:end="133:67"><name pos:start="133:44" pos:end="133:67"><name pos:start="133:44" pos:end="133:49">header</name><operator pos:start="133:50" pos:end="133:50">.</operator><name pos:start="133:51" pos:end="133:67">compressAlgorithm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:32"><expr pos:start="137:5" pos:end="137:31"><name pos:start="137:5" pos:end="137:25"><name pos:start="137:5" pos:end="137:10">header</name><operator pos:start="137:11" pos:end="137:11">.</operator><name pos:start="137:12" pos:end="137:22">check_bytes</name><index pos:start="137:23" pos:end="137:25">[<expr pos:start="137:24" pos:end="137:24"><literal type="number" pos:start="137:24" pos:end="137:24">0</literal></expr>]</index></name> <operator pos:start="137:27" pos:end="137:27">=</operator> <literal type="number" pos:start="137:29" pos:end="137:31">0xa</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:33"><expr pos:start="139:5" pos:end="139:32"><name pos:start="139:5" pos:end="139:25"><name pos:start="139:5" pos:end="139:10">header</name><operator pos:start="139:11" pos:end="139:11">.</operator><name pos:start="139:12" pos:end="139:22">check_bytes</name><index pos:start="139:23" pos:end="139:25">[<expr pos:start="139:24" pos:end="139:24"><literal type="number" pos:start="139:24" pos:end="139:24">1</literal></expr>]</index></name> <operator pos:start="139:27" pos:end="139:27">=</operator> <literal type="number" pos:start="139:29" pos:end="139:32">0x20</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:32"><expr pos:start="141:5" pos:end="141:31"><name pos:start="141:5" pos:end="141:25"><name pos:start="141:5" pos:end="141:10">header</name><operator pos:start="141:11" pos:end="141:11">.</operator><name pos:start="141:12" pos:end="141:22">check_bytes</name><index pos:start="141:23" pos:end="141:25">[<expr pos:start="141:24" pos:end="141:24"><literal type="number" pos:start="141:24" pos:end="141:24">2</literal></expr>]</index></name> <operator pos:start="141:27" pos:end="141:27">=</operator> <literal type="number" pos:start="141:29" pos:end="141:31">0xd</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:32"><expr pos:start="143:5" pos:end="143:31"><name pos:start="143:5" pos:end="143:25"><name pos:start="143:5" pos:end="143:10">header</name><operator pos:start="143:11" pos:end="143:11">.</operator><name pos:start="143:12" pos:end="143:22">check_bytes</name><index pos:start="143:23" pos:end="143:25">[<expr pos:start="143:24" pos:end="143:24"><literal type="number" pos:start="143:24" pos:end="143:24">3</literal></expr>]</index></name> <operator pos:start="143:27" pos:end="143:27">=</operator> <literal type="number" pos:start="143:29" pos:end="143:31">0xa</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="147:5" pos:end="147:28">/* write all the data */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:52"><expr pos:start="149:5" pos:end="149:51"><name pos:start="149:5" pos:end="149:7">ret</name> <operator pos:start="149:9" pos:end="149:9">=</operator> <call pos:start="149:11" pos:end="149:51"><name pos:start="149:11" pos:end="149:21">bdrv_pwrite</name><argument_list pos:start="149:22" pos:end="149:51">(<argument pos:start="149:23" pos:end="149:24"><expr pos:start="149:23" pos:end="149:24"><name pos:start="149:23" pos:end="149:24">bs</name></expr></argument>, <argument pos:start="149:27" pos:end="149:27"><expr pos:start="149:27" pos:end="149:27"><literal type="number" pos:start="149:27" pos:end="149:27">0</literal></expr></argument>, <argument pos:start="149:30" pos:end="149:35"><expr pos:start="149:30" pos:end="149:35"><operator pos:start="149:30" pos:end="149:30">&amp;</operator><name pos:start="149:31" pos:end="149:35">magic</name></expr></argument>, <argument pos:start="149:38" pos:end="149:50"><expr pos:start="149:38" pos:end="149:50"><sizeof pos:start="149:38" pos:end="149:50">sizeof<argument_list pos:start="149:44" pos:end="149:50">(<argument pos:start="149:45" pos:end="149:49"><expr pos:start="149:45" pos:end="149:49"><name pos:start="149:45" pos:end="149:49">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="157:5"><if pos:start="151:5" pos:end="157:5">if <condition pos:start="151:8" pos:end="151:16">(<expr pos:start="151:9" pos:end="151:15"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:13">&lt;</operator> <literal type="number" pos:start="151:15" pos:end="151:15">0</literal></expr>)</condition> <block pos:start="151:18" pos:end="157:5">{<block_content pos:start="153:9" pos:end="155:18">

        <expr_stmt pos:start="153:9" pos:end="153:39"><expr pos:start="153:9" pos:end="153:38"><call pos:start="153:9" pos:end="153:38"><name pos:start="153:9" pos:end="153:17">error_set</name><argument_list pos:start="153:18" pos:end="153:38">(<argument pos:start="153:19" pos:end="153:22"><expr pos:start="153:19" pos:end="153:22"><name pos:start="153:19" pos:end="153:22">errp</name></expr></argument>, <argument pos:start="153:25" pos:end="153:37"><expr pos:start="153:25" pos:end="153:37"><name pos:start="153:25" pos:end="153:37">QERR_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="155:9" pos:end="155:18">goto <name pos:start="155:14" pos:end="155:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:66"><expr pos:start="159:5" pos:end="159:65"><name pos:start="159:5" pos:end="159:7">ret</name> <operator pos:start="159:9" pos:end="159:9">=</operator> <call pos:start="159:11" pos:end="159:65"><name pos:start="159:11" pos:end="159:21">bdrv_pwrite</name><argument_list pos:start="159:22" pos:end="159:65">(<argument pos:start="159:23" pos:end="159:24"><expr pos:start="159:23" pos:end="159:24"><name pos:start="159:23" pos:end="159:24">bs</name></expr></argument>, <argument pos:start="159:27" pos:end="159:39"><expr pos:start="159:27" pos:end="159:39"><sizeof pos:start="159:27" pos:end="159:39">sizeof<argument_list pos:start="159:33" pos:end="159:39">(<argument pos:start="159:34" pos:end="159:38"><expr pos:start="159:34" pos:end="159:38"><name pos:start="159:34" pos:end="159:38">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="159:42" pos:end="159:48"><expr pos:start="159:42" pos:end="159:48"><operator pos:start="159:42" pos:end="159:42">&amp;</operator><name pos:start="159:43" pos:end="159:48">header</name></expr></argument>, <argument pos:start="159:51" pos:end="159:64"><expr pos:start="159:51" pos:end="159:64"><sizeof pos:start="159:51" pos:end="159:64">sizeof<argument_list pos:start="159:57" pos:end="159:64">(<argument pos:start="159:58" pos:end="159:63"><expr pos:start="159:58" pos:end="159:63"><name pos:start="159:58" pos:end="159:63">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="161:5" pos:end="167:5"><if pos:start="161:5" pos:end="167:5">if <condition pos:start="161:8" pos:end="161:16">(<expr pos:start="161:9" pos:end="161:15"><name pos:start="161:9" pos:end="161:11">ret</name> <operator pos:start="161:13" pos:end="161:13">&lt;</operator> <literal type="number" pos:start="161:15" pos:end="161:15">0</literal></expr>)</condition> <block pos:start="161:18" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:18">

        <expr_stmt pos:start="163:9" pos:end="163:39"><expr pos:start="163:9" pos:end="163:38"><call pos:start="163:9" pos:end="163:38"><name pos:start="163:9" pos:end="163:17">error_set</name><argument_list pos:start="163:18" pos:end="163:38">(<argument pos:start="163:19" pos:end="163:22"><expr pos:start="163:19" pos:end="163:22"><name pos:start="163:19" pos:end="163:22">errp</name></expr></argument>, <argument pos:start="163:25" pos:end="163:37"><expr pos:start="163:25" pos:end="163:37"><name pos:start="163:25" pos:end="163:37">QERR_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="165:9" pos:end="165:18">goto <name pos:start="165:14" pos:end="165:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="171:5" pos:end="171:67"><expr pos:start="171:5" pos:end="171:66"><name pos:start="171:5" pos:end="171:7">ret</name> <operator pos:start="171:9" pos:end="171:9">=</operator> <call pos:start="171:11" pos:end="171:66"><name pos:start="171:11" pos:end="171:23">bdrv_truncate</name><argument_list pos:start="171:24" pos:end="171:66">(<argument pos:start="171:25" pos:end="171:26"><expr pos:start="171:25" pos:end="171:26"><name pos:start="171:25" pos:end="171:26">bs</name></expr></argument>, <argument pos:start="171:29" pos:end="171:65"><expr pos:start="171:29" pos:end="171:65"><call pos:start="171:29" pos:end="171:60"><name pos:start="171:29" pos:end="171:39">le64_to_cpu</name><argument_list pos:start="171:40" pos:end="171:60">(<argument pos:start="171:41" pos:end="171:59"><expr pos:start="171:41" pos:end="171:59"><name pos:start="171:41" pos:end="171:59"><name pos:start="171:41" pos:end="171:46">header</name><operator pos:start="171:47" pos:end="171:47">.</operator><name pos:start="171:48" pos:end="171:59">grain_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="171:62" pos:end="171:63">&lt;&lt;</operator> <literal type="number" pos:start="171:65" pos:end="171:65">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="173:5" pos:end="179:5"><if pos:start="173:5" pos:end="179:5">if <condition pos:start="173:8" pos:end="173:16">(<expr pos:start="173:9" pos:end="173:15"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">&lt;</operator> <literal type="number" pos:start="173:15" pos:end="173:15">0</literal></expr>)</condition> <block pos:start="173:18" pos:end="179:5">{<block_content pos:start="175:9" pos:end="177:18">

        <expr_stmt pos:start="175:9" pos:end="175:52"><expr pos:start="175:9" pos:end="175:51"><call pos:start="175:9" pos:end="175:51"><name pos:start="175:9" pos:end="175:18">error_setg</name><argument_list pos:start="175:19" pos:end="175:51">(<argument pos:start="175:20" pos:end="175:23"><expr pos:start="175:20" pos:end="175:23"><name pos:start="175:20" pos:end="175:23">errp</name></expr></argument>, <argument pos:start="175:26" pos:end="175:50"><expr pos:start="175:26" pos:end="175:50"><literal type="string" pos:start="175:26" pos:end="175:50">"Could not truncate file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="177:9" pos:end="177:18">goto <name pos:start="177:14" pos:end="177:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="183:5" pos:end="183:31">/* write grain directory */</comment>

    <expr_stmt pos:start="185:5" pos:end="185:48"><expr pos:start="185:5" pos:end="185:47"><name pos:start="185:5" pos:end="185:15">gd_buf_size</name> <operator pos:start="185:17" pos:end="185:17">=</operator> <name pos:start="185:19" pos:end="185:28">gd_sectors</name> <operator pos:start="185:30" pos:end="185:30">*</operator> <name pos:start="185:32" pos:end="185:47">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:36"><expr pos:start="187:5" pos:end="187:35"><name pos:start="187:5" pos:end="187:10">gd_buf</name> <operator pos:start="187:12" pos:end="187:12">=</operator> <call pos:start="187:14" pos:end="187:35"><name pos:start="187:14" pos:end="187:22">g_malloc0</name><argument_list pos:start="187:23" pos:end="187:35">(<argument pos:start="187:24" pos:end="187:34"><expr pos:start="187:24" pos:end="187:34"><name pos:start="187:24" pos:end="187:34">gd_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="189:5" pos:end="195:5">for <control pos:start="189:9" pos:end="191:43">(<init pos:start="189:10" pos:end="189:66"><expr pos:start="189:10" pos:end="189:14"><name pos:start="189:10" pos:end="189:10">i</name> <operator pos:start="189:12" pos:end="189:12">=</operator> <literal type="number" pos:start="189:14" pos:end="189:14">0</literal></expr><operator pos:start="189:15" pos:end="189:15">,</operator> <expr pos:start="189:17" pos:end="189:65"><name pos:start="189:17" pos:end="189:19">tmp</name> <operator pos:start="189:21" pos:end="189:21">=</operator> <call pos:start="189:23" pos:end="189:52"><name pos:start="189:23" pos:end="189:33">le64_to_cpu</name><argument_list pos:start="189:34" pos:end="189:52">(<argument pos:start="189:35" pos:end="189:51"><expr pos:start="189:35" pos:end="189:51"><name pos:start="189:35" pos:end="189:51"><name pos:start="189:35" pos:end="189:40">header</name><operator pos:start="189:41" pos:end="189:41">.</operator><name pos:start="189:42" pos:end="189:51">rgd_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="189:54" pos:end="189:54">+</operator> <name pos:start="189:56" pos:end="189:65">gd_sectors</name></expr>;</init>

         <condition pos:start="191:10" pos:end="191:22"><expr pos:start="191:10" pos:end="191:21"><name pos:start="191:10" pos:end="191:10">i</name> <operator pos:start="191:12" pos:end="191:12">&lt;</operator> <name pos:start="191:14" pos:end="191:21">gt_count</name></expr>;</condition> <incr pos:start="191:24" pos:end="191:42"><expr pos:start="191:24" pos:end="191:26"><name pos:start="191:24" pos:end="191:24">i</name><operator pos:start="191:25" pos:end="191:26">++</operator></expr><operator pos:start="191:27" pos:end="191:27">,</operator> <expr pos:start="191:29" pos:end="191:42"><name pos:start="191:29" pos:end="191:31">tmp</name> <operator pos:start="191:33" pos:end="191:34">+=</operator> <name pos:start="191:36" pos:end="191:42">gt_size</name></expr></incr>)</control> <block pos:start="191:45" pos:end="195:5">{<block_content pos:start="193:9" pos:end="193:37">

        <expr_stmt pos:start="193:9" pos:end="193:37"><expr pos:start="193:9" pos:end="193:36"><name pos:start="193:9" pos:end="193:17"><name pos:start="193:9" pos:end="193:14">gd_buf</name><index pos:start="193:15" pos:end="193:17">[<expr pos:start="193:16" pos:end="193:16"><name pos:start="193:16" pos:end="193:16">i</name></expr>]</index></name> <operator pos:start="193:19" pos:end="193:19">=</operator> <call pos:start="193:21" pos:end="193:36"><name pos:start="193:21" pos:end="193:31">cpu_to_le32</name><argument_list pos:start="193:32" pos:end="193:36">(<argument pos:start="193:33" pos:end="193:35"><expr pos:start="193:33" pos:end="193:35"><name pos:start="193:33" pos:end="193:35">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="197:5" pos:end="199:43"><expr pos:start="197:5" pos:end="199:42"><name pos:start="197:5" pos:end="197:7">ret</name> <operator pos:start="197:9" pos:end="197:9">=</operator> <call pos:start="197:11" pos:end="199:42"><name pos:start="197:11" pos:end="197:21">bdrv_pwrite</name><argument_list pos:start="197:22" pos:end="199:42">(<argument pos:start="197:23" pos:end="197:24"><expr pos:start="197:23" pos:end="197:24"><name pos:start="197:23" pos:end="197:24">bs</name></expr></argument>, <argument pos:start="197:27" pos:end="197:75"><expr pos:start="197:27" pos:end="197:75"><call pos:start="197:27" pos:end="197:56"><name pos:start="197:27" pos:end="197:37">le64_to_cpu</name><argument_list pos:start="197:38" pos:end="197:56">(<argument pos:start="197:39" pos:end="197:55"><expr pos:start="197:39" pos:end="197:55"><name pos:start="197:39" pos:end="197:55"><name pos:start="197:39" pos:end="197:44">header</name><operator pos:start="197:45" pos:end="197:45">.</operator><name pos:start="197:46" pos:end="197:55">rgd_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="197:58" pos:end="197:58">*</operator> <name pos:start="197:60" pos:end="197:75">BDRV_SECTOR_SIZE</name></expr></argument>,

                      <argument pos:start="199:23" pos:end="199:28"><expr pos:start="199:23" pos:end="199:28"><name pos:start="199:23" pos:end="199:28">gd_buf</name></expr></argument>, <argument pos:start="199:31" pos:end="199:41"><expr pos:start="199:31" pos:end="199:41"><name pos:start="199:31" pos:end="199:41">gd_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="201:5" pos:end="207:5"><if pos:start="201:5" pos:end="207:5">if <condition pos:start="201:8" pos:end="201:16">(<expr pos:start="201:9" pos:end="201:15"><name pos:start="201:9" pos:end="201:11">ret</name> <operator pos:start="201:13" pos:end="201:13">&lt;</operator> <literal type="number" pos:start="201:15" pos:end="201:15">0</literal></expr>)</condition> <block pos:start="201:18" pos:end="207:5">{<block_content pos:start="203:9" pos:end="205:18">

        <expr_stmt pos:start="203:9" pos:end="203:39"><expr pos:start="203:9" pos:end="203:38"><call pos:start="203:9" pos:end="203:38"><name pos:start="203:9" pos:end="203:17">error_set</name><argument_list pos:start="203:18" pos:end="203:38">(<argument pos:start="203:19" pos:end="203:22"><expr pos:start="203:19" pos:end="203:22"><name pos:start="203:19" pos:end="203:22">errp</name></expr></argument>, <argument pos:start="203:25" pos:end="203:37"><expr pos:start="203:25" pos:end="203:37"><name pos:start="203:25" pos:end="203:37">QERR_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="205:9" pos:end="205:18">goto <name pos:start="205:14" pos:end="205:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="211:5" pos:end="211:38">/* write backup grain directory */</comment>

    <for pos:start="213:5" pos:end="219:5">for <control pos:start="213:9" pos:end="215:43">(<init pos:start="213:10" pos:end="213:65"><expr pos:start="213:10" pos:end="213:14"><name pos:start="213:10" pos:end="213:10">i</name> <operator pos:start="213:12" pos:end="213:12">=</operator> <literal type="number" pos:start="213:14" pos:end="213:14">0</literal></expr><operator pos:start="213:15" pos:end="213:15">,</operator> <expr pos:start="213:17" pos:end="213:64"><name pos:start="213:17" pos:end="213:19">tmp</name> <operator pos:start="213:21" pos:end="213:21">=</operator> <call pos:start="213:23" pos:end="213:51"><name pos:start="213:23" pos:end="213:33">le64_to_cpu</name><argument_list pos:start="213:34" pos:end="213:51">(<argument pos:start="213:35" pos:end="213:50"><expr pos:start="213:35" pos:end="213:50"><name pos:start="213:35" pos:end="213:50"><name pos:start="213:35" pos:end="213:40">header</name><operator pos:start="213:41" pos:end="213:41">.</operator><name pos:start="213:42" pos:end="213:50">gd_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="213:53" pos:end="213:53">+</operator> <name pos:start="213:55" pos:end="213:64">gd_sectors</name></expr>;</init>

         <condition pos:start="215:10" pos:end="215:22"><expr pos:start="215:10" pos:end="215:21"><name pos:start="215:10" pos:end="215:10">i</name> <operator pos:start="215:12" pos:end="215:12">&lt;</operator> <name pos:start="215:14" pos:end="215:21">gt_count</name></expr>;</condition> <incr pos:start="215:24" pos:end="215:42"><expr pos:start="215:24" pos:end="215:26"><name pos:start="215:24" pos:end="215:24">i</name><operator pos:start="215:25" pos:end="215:26">++</operator></expr><operator pos:start="215:27" pos:end="215:27">,</operator> <expr pos:start="215:29" pos:end="215:42"><name pos:start="215:29" pos:end="215:31">tmp</name> <operator pos:start="215:33" pos:end="215:34">+=</operator> <name pos:start="215:36" pos:end="215:42">gt_size</name></expr></incr>)</control> <block pos:start="215:45" pos:end="219:5">{<block_content pos:start="217:9" pos:end="217:37">

        <expr_stmt pos:start="217:9" pos:end="217:37"><expr pos:start="217:9" pos:end="217:36"><name pos:start="217:9" pos:end="217:17"><name pos:start="217:9" pos:end="217:14">gd_buf</name><index pos:start="217:15" pos:end="217:17">[<expr pos:start="217:16" pos:end="217:16"><name pos:start="217:16" pos:end="217:16">i</name></expr>]</index></name> <operator pos:start="217:19" pos:end="217:19">=</operator> <call pos:start="217:21" pos:end="217:36"><name pos:start="217:21" pos:end="217:31">cpu_to_le32</name><argument_list pos:start="217:32" pos:end="217:36">(<argument pos:start="217:33" pos:end="217:35"><expr pos:start="217:33" pos:end="217:35"><name pos:start="217:33" pos:end="217:35">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="221:5" pos:end="223:43"><expr pos:start="221:5" pos:end="223:42"><name pos:start="221:5" pos:end="221:7">ret</name> <operator pos:start="221:9" pos:end="221:9">=</operator> <call pos:start="221:11" pos:end="223:42"><name pos:start="221:11" pos:end="221:21">bdrv_pwrite</name><argument_list pos:start="221:22" pos:end="223:42">(<argument pos:start="221:23" pos:end="221:24"><expr pos:start="221:23" pos:end="221:24"><name pos:start="221:23" pos:end="221:24">bs</name></expr></argument>, <argument pos:start="221:27" pos:end="221:74"><expr pos:start="221:27" pos:end="221:74"><call pos:start="221:27" pos:end="221:55"><name pos:start="221:27" pos:end="221:37">le64_to_cpu</name><argument_list pos:start="221:38" pos:end="221:55">(<argument pos:start="221:39" pos:end="221:54"><expr pos:start="221:39" pos:end="221:54"><name pos:start="221:39" pos:end="221:54"><name pos:start="221:39" pos:end="221:44">header</name><operator pos:start="221:45" pos:end="221:45">.</operator><name pos:start="221:46" pos:end="221:54">gd_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="221:57" pos:end="221:57">*</operator> <name pos:start="221:59" pos:end="221:74">BDRV_SECTOR_SIZE</name></expr></argument>,

                      <argument pos:start="223:23" pos:end="223:28"><expr pos:start="223:23" pos:end="223:28"><name pos:start="223:23" pos:end="223:28">gd_buf</name></expr></argument>, <argument pos:start="223:31" pos:end="223:41"><expr pos:start="223:31" pos:end="223:41"><name pos:start="223:31" pos:end="223:41">gd_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="225:5" pos:end="231:5"><if pos:start="225:5" pos:end="231:5">if <condition pos:start="225:8" pos:end="225:16">(<expr pos:start="225:9" pos:end="225:15"><name pos:start="225:9" pos:end="225:11">ret</name> <operator pos:start="225:13" pos:end="225:13">&lt;</operator> <literal type="number" pos:start="225:15" pos:end="225:15">0</literal></expr>)</condition> <block pos:start="225:18" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:18">

        <expr_stmt pos:start="227:9" pos:end="227:39"><expr pos:start="227:9" pos:end="227:38"><call pos:start="227:9" pos:end="227:38"><name pos:start="227:9" pos:end="227:17">error_set</name><argument_list pos:start="227:18" pos:end="227:38">(<argument pos:start="227:19" pos:end="227:22"><expr pos:start="227:19" pos:end="227:22"><name pos:start="227:19" pos:end="227:22">errp</name></expr></argument>, <argument pos:start="227:25" pos:end="227:37"><expr pos:start="227:25" pos:end="227:37"><name pos:start="227:25" pos:end="227:37">QERR_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="229:9" pos:end="229:18">goto <name pos:start="229:14" pos:end="229:17">exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:12"><expr pos:start="235:5" pos:end="235:11"><name pos:start="235:5" pos:end="235:7">ret</name> <operator pos:start="235:9" pos:end="235:9">=</operator> <literal type="number" pos:start="235:11" pos:end="235:11">0</literal></expr>;</expr_stmt>

<label pos:start="237:1" pos:end="237:5"><name pos:start="237:1" pos:end="237:4">exit</name>:</label>

    <if_stmt pos:start="239:5" pos:end="243:5"><if pos:start="239:5" pos:end="243:5">if <condition pos:start="239:8" pos:end="239:11">(<expr pos:start="239:9" pos:end="239:10"><name pos:start="239:9" pos:end="239:10">bs</name></expr>)</condition> <block pos:start="239:13" pos:end="243:5">{<block_content pos:start="241:9" pos:end="241:23">

        <expr_stmt pos:start="241:9" pos:end="241:23"><expr pos:start="241:9" pos:end="241:22"><call pos:start="241:9" pos:end="241:22"><name pos:start="241:9" pos:end="241:18">bdrv_unref</name><argument_list pos:start="241:19" pos:end="241:22">(<argument pos:start="241:20" pos:end="241:21"><expr pos:start="241:20" pos:end="241:21"><name pos:start="241:20" pos:end="241:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:19"><expr pos:start="245:5" pos:end="245:18"><call pos:start="245:5" pos:end="245:18"><name pos:start="245:5" pos:end="245:10">g_free</name><argument_list pos:start="245:11" pos:end="245:18">(<argument pos:start="245:12" pos:end="245:17"><expr pos:start="245:12" pos:end="245:17"><name pos:start="245:12" pos:end="245:17">gd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="247:5" pos:end="247:15">return <expr pos:start="247:12" pos:end="247:14"><name pos:start="247:12" pos:end="247:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
