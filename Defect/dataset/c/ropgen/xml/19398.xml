<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19398.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">char</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:32">qemu_rbd_array_opts</name><parameter_list pos:start="1:33" pos:end="3:46">(<parameter pos:start="1:34" pos:end="1:47"><decl pos:start="1:34" pos:end="1:47"><type pos:start="1:34" pos:end="1:47"><name pos:start="1:34" pos:end="1:38">QDict</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:47">options</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:67"><decl pos:start="1:50" pos:end="1:67"><type pos:start="1:50" pos:end="1:67"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:59">char</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:67">prefix</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:77"><decl pos:start="1:70" pos:end="1:77"><type pos:start="1:70" pos:end="1:77"><name pos:start="1:70" pos:end="1:72">int</name></type> <name pos:start="1:74" pos:end="1:77">type</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:45"><decl pos:start="3:34" pos:end="3:45"><type pos:start="3:34" pos:end="3:45"><name pos:start="3:34" pos:end="3:38">Error</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier><modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:45">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="165:1">{<block_content pos:start="7:5" pos:end="163:21">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">num_entries</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">QemuOpts</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:18">opts</name> <init pos:start="9:20" pos:end="9:25">= <expr pos:start="9:22" pos:end="9:25"><name pos:start="9:22" pos:end="9:25">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">QDict</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:22">sub_options</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:20">host</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:20">port</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:14"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:13">str</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">char</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:19">rados_str</name> <init pos:start="19:21" pos:end="19:26">= <expr pos:start="19:23" pos:end="19:26"><name pos:start="19:23" pos:end="19:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Error</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:20">local_err</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:33"><expr pos:start="27:5" pos:end="27:32"><call pos:start="27:5" pos:end="27:32"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:32">(<argument pos:start="27:12" pos:end="27:31"><expr pos:start="27:12" pos:end="27:31"><name pos:start="27:12" pos:end="27:15">type</name> <operator pos:start="27:17" pos:end="27:18">==</operator> <name pos:start="27:20" pos:end="27:31">RBD_MON_HOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:55"><expr pos:start="31:5" pos:end="31:54"><name pos:start="31:5" pos:end="31:15">num_entries</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:54"><name pos:start="31:19" pos:end="31:37">qdict_array_entries</name><argument_list pos:start="31:38" pos:end="31:54">(<argument pos:start="31:39" pos:end="31:45"><expr pos:start="31:39" pos:end="31:45"><name pos:start="31:39" pos:end="31:45">options</name></expr></argument>, <argument pos:start="31:48" pos:end="31:53"><expr pos:start="31:48" pos:end="31:53"><name pos:start="31:48" pos:end="31:53">prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:24">(<expr pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:19">num_entries</name> <operator pos:start="35:21" pos:end="35:21">&lt;</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>)</condition> <block pos:start="35:26" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:20">

        <expr_stmt pos:start="37:9" pos:end="37:59"><expr pos:start="37:9" pos:end="37:58"><call pos:start="37:9" pos:end="37:58"><name pos:start="37:9" pos:end="37:18">error_setg</name><argument_list pos:start="37:19" pos:end="37:58">(<argument pos:start="37:20" pos:end="37:23"><expr pos:start="37:20" pos:end="37:23"><name pos:start="37:20" pos:end="37:23">errp</name></expr></argument>, <argument pos:start="37:26" pos:end="37:57"><expr pos:start="37:26" pos:end="37:57"><literal type="string" pos:start="37:26" pos:end="37:57">"Parse error on RBD QDict array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:20">return <expr pos:start="39:16" pos:end="39:19"><name pos:start="39:16" pos:end="39:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="45:5" pos:end="155:5">for <control pos:start="45:9" pos:end="45:37">(<init pos:start="45:10" pos:end="45:15"><expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:32"><expr pos:start="45:17" pos:end="45:31"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <name pos:start="45:21" pos:end="45:31">num_entries</name></expr>;</condition> <incr pos:start="45:34" pos:end="45:36"><expr pos:start="45:34" pos:end="45:36"><name pos:start="45:34" pos:end="45:34">i</name><operator pos:start="45:35" pos:end="45:36">++</operator></expr></incr>)</control> <block pos:start="45:39" pos:end="155:5">{<block_content pos:start="47:9" pos:end="153:20">

        <decl_stmt pos:start="47:9" pos:end="47:28"><decl pos:start="47:9" pos:end="47:27"><type pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:12">char</name> <modifier pos:start="47:14" pos:end="47:14">*</modifier></type><name pos:start="47:15" pos:end="47:20">strbuf</name> <init pos:start="47:22" pos:end="47:27">= <expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:26"><decl pos:start="49:9" pos:end="49:25"><type pos:start="49:9" pos:end="49:20"><specifier pos:start="49:9" pos:end="49:13">const</specifier> <name pos:start="49:15" pos:end="49:18">char</name> <modifier pos:start="49:20" pos:end="49:20">*</modifier></type><name pos:start="49:21" pos:end="49:25">value</name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:28"><decl pos:start="51:9" pos:end="51:27"><type pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:12">char</name> <modifier pos:start="51:14" pos:end="51:14">*</modifier></type><name pos:start="51:15" pos:end="51:27">rados_str_tmp</name></decl>;</decl_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:50"><expr pos:start="55:9" pos:end="55:49"><name pos:start="55:9" pos:end="55:11">str</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:49"><name pos:start="55:15" pos:end="55:29">g_strdup_printf</name><argument_list pos:start="55:30" pos:end="55:49">(<argument pos:start="55:31" pos:end="55:37"><expr pos:start="55:31" pos:end="55:37"><literal type="string" pos:start="55:31" pos:end="55:37">"%s%d."</literal></expr></argument>, <argument pos:start="55:40" pos:end="55:45"><expr pos:start="55:40" pos:end="55:45"><name pos:start="55:40" pos:end="55:45">prefix</name></expr></argument>, <argument pos:start="55:48" pos:end="55:48"><expr pos:start="55:48" pos:end="55:48"><name pos:start="55:48" pos:end="55:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:59"><expr pos:start="57:9" pos:end="57:58"><call pos:start="57:9" pos:end="57:58"><name pos:start="57:9" pos:end="57:30">qdict_extract_subqdict</name><argument_list pos:start="57:31" pos:end="57:58">(<argument pos:start="57:32" pos:end="57:38"><expr pos:start="57:32" pos:end="57:38"><name pos:start="57:32" pos:end="57:38">options</name></expr></argument>, <argument pos:start="57:41" pos:end="57:52"><expr pos:start="57:41" pos:end="57:52"><operator pos:start="57:41" pos:end="57:41">&amp;</operator><name pos:start="57:42" pos:end="57:52">sub_options</name></expr></argument>, <argument pos:start="57:55" pos:end="57:57"><expr pos:start="57:55" pos:end="57:57"><name pos:start="57:55" pos:end="57:57">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:20"><expr pos:start="59:9" pos:end="59:19"><call pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:14">g_free</name><argument_list pos:start="59:15" pos:end="59:19">(<argument pos:start="59:16" pos:end="59:18"><expr pos:start="59:16" pos:end="59:18"><name pos:start="59:16" pos:end="59:18">str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="63:9" pos:end="63:70"><expr pos:start="63:9" pos:end="63:69"><name pos:start="63:9" pos:end="63:12">opts</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:69"><name pos:start="63:16" pos:end="63:31">qemu_opts_create</name><argument_list pos:start="63:32" pos:end="63:69">(<argument pos:start="63:33" pos:end="63:45"><expr pos:start="63:33" pos:end="63:45"><operator pos:start="63:33" pos:end="63:33">&amp;</operator><name pos:start="63:34" pos:end="63:45">runtime_opts</name></expr></argument>, <argument pos:start="63:48" pos:end="63:51"><expr pos:start="63:48" pos:end="63:51"><name pos:start="63:48" pos:end="63:51">NULL</name></expr></argument>, <argument pos:start="63:54" pos:end="63:54"><expr pos:start="63:54" pos:end="63:54"><literal type="number" pos:start="63:54" pos:end="63:54">0</literal></expr></argument>, <argument pos:start="63:57" pos:end="63:68"><expr pos:start="63:57" pos:end="63:68"><operator pos:start="63:57" pos:end="63:57">&amp;</operator><name pos:start="63:58" pos:end="63:68">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:62"><expr pos:start="65:9" pos:end="65:61"><call pos:start="65:9" pos:end="65:61"><name pos:start="65:9" pos:end="65:30">qemu_opts_absorb_qdict</name><argument_list pos:start="65:31" pos:end="65:61">(<argument pos:start="65:32" pos:end="65:35"><expr pos:start="65:32" pos:end="65:35"><name pos:start="65:32" pos:end="65:35">opts</name></expr></argument>, <argument pos:start="65:38" pos:end="65:48"><expr pos:start="65:38" pos:end="65:48"><name pos:start="65:38" pos:end="65:48">sub_options</name></expr></argument>, <argument pos:start="65:51" pos:end="65:60"><expr pos:start="65:51" pos:end="65:60"><operator pos:start="65:51" pos:end="65:51">&amp;</operator><name pos:start="65:52" pos:end="65:60">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:29"><expr pos:start="67:9" pos:end="67:28"><call pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:15">QDECREF</name><argument_list pos:start="67:16" pos:end="67:28">(<argument pos:start="67:17" pos:end="67:27"><expr pos:start="67:17" pos:end="67:27"><name pos:start="67:17" pos:end="67:27">sub_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="79:9"><if pos:start="69:9" pos:end="79:9">if <condition pos:start="69:12" pos:end="69:22">(<expr pos:start="69:13" pos:end="69:21"><name pos:start="69:13" pos:end="69:21">local_err</name></expr>)</condition> <block pos:start="69:24" pos:end="79:9">{<block_content pos:start="71:13" pos:end="77:22">

            <expr_stmt pos:start="71:13" pos:end="71:45"><expr pos:start="71:13" pos:end="71:44"><call pos:start="71:13" pos:end="71:44"><name pos:start="71:13" pos:end="71:27">error_propagate</name><argument_list pos:start="71:28" pos:end="71:44">(<argument pos:start="71:29" pos:end="71:32"><expr pos:start="71:29" pos:end="71:32"><name pos:start="71:29" pos:end="71:32">errp</name></expr></argument>, <argument pos:start="71:35" pos:end="71:43"><expr pos:start="71:35" pos:end="71:43"><name pos:start="71:35" pos:end="71:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:30"><expr pos:start="73:13" pos:end="73:29"><call pos:start="73:13" pos:end="73:29"><name pos:start="73:13" pos:end="73:18">g_free</name><argument_list pos:start="73:19" pos:end="73:29">(<argument pos:start="73:20" pos:end="73:28"><expr pos:start="73:20" pos:end="73:28"><name pos:start="73:20" pos:end="73:28">rados_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:29"><expr pos:start="75:13" pos:end="75:28"><name pos:start="75:13" pos:end="75:21">rados_str</name> <operator pos:start="75:23" pos:end="75:23">=</operator> <name pos:start="75:25" pos:end="75:28">NULL</name></expr>;</expr_stmt>

            <goto pos:start="77:13" pos:end="77:22">goto <name pos:start="77:18" pos:end="77:21">exit</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="83:9" pos:end="121:9"><if pos:start="83:9" pos:end="117:9">if <condition pos:start="83:12" pos:end="83:33">(<expr pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:16">type</name> <operator pos:start="83:18" pos:end="83:19">==</operator> <name pos:start="83:21" pos:end="83:32">RBD_MON_HOST</name></expr>)</condition> <block pos:start="83:35" pos:end="117:9">{<block_content pos:start="85:13" pos:end="115:13">

            <expr_stmt pos:start="85:13" pos:end="85:46"><expr pos:start="85:13" pos:end="85:45"><name pos:start="85:13" pos:end="85:16">host</name> <operator pos:start="85:18" pos:end="85:18">=</operator> <call pos:start="85:20" pos:end="85:45"><name pos:start="85:20" pos:end="85:31">qemu_opt_get</name><argument_list pos:start="85:32" pos:end="85:45">(<argument pos:start="85:33" pos:end="85:36"><expr pos:start="85:33" pos:end="85:36"><name pos:start="85:33" pos:end="85:36">opts</name></expr></argument>, <argument pos:start="85:39" pos:end="85:44"><expr pos:start="85:39" pos:end="85:44"><literal type="string" pos:start="85:39" pos:end="85:44">"host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:46"><expr pos:start="87:13" pos:end="87:45"><name pos:start="87:13" pos:end="87:16">port</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <call pos:start="87:20" pos:end="87:45"><name pos:start="87:20" pos:end="87:31">qemu_opt_get</name><argument_list pos:start="87:32" pos:end="87:45">(<argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">opts</name></expr></argument>, <argument pos:start="87:39" pos:end="87:44"><expr pos:start="87:39" pos:end="87:44"><literal type="string" pos:start="87:39" pos:end="87:44">"port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="91:13" pos:end="91:25"><expr pos:start="91:13" pos:end="91:24"><name pos:start="91:13" pos:end="91:17">value</name> <operator pos:start="91:19" pos:end="91:19">=</operator> <name pos:start="91:21" pos:end="91:24">host</name></expr>;</expr_stmt>

            <if_stmt pos:start="93:13" pos:end="115:13"><if pos:start="93:13" pos:end="109:13">if <condition pos:start="93:16" pos:end="93:21">(<expr pos:start="93:17" pos:end="93:20"><name pos:start="93:17" pos:end="93:20">port</name></expr>)</condition> <block pos:start="93:23" pos:end="109:13">{<block_content pos:start="97:17" pos:end="107:31">

                <comment type="block" pos:start="95:17" pos:end="95:36">/* check for ipv6 */</comment>

                <if_stmt pos:start="97:17" pos:end="105:17"><if pos:start="97:17" pos:end="101:17">if <condition pos:start="97:20" pos:end="97:38">(<expr pos:start="97:21" pos:end="97:37"><call pos:start="97:21" pos:end="97:37"><name pos:start="97:21" pos:end="97:26">strchr</name><argument_list pos:start="97:27" pos:end="97:37">(<argument pos:start="97:28" pos:end="97:31"><expr pos:start="97:28" pos:end="97:31"><name pos:start="97:28" pos:end="97:31">host</name></expr></argument>, <argument pos:start="97:34" pos:end="97:36"><expr pos:start="97:34" pos:end="97:36"><literal type="char" pos:start="97:34" pos:end="97:36">':'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:40" pos:end="101:17">{<block_content pos:start="99:21" pos:end="99:68">

                    <expr_stmt pos:start="99:21" pos:end="99:68"><expr pos:start="99:21" pos:end="99:67"><name pos:start="99:21" pos:end="99:26">strbuf</name> <operator pos:start="99:28" pos:end="99:28">=</operator> <call pos:start="99:30" pos:end="99:67"><name pos:start="99:30" pos:end="99:44">g_strdup_printf</name><argument_list pos:start="99:45" pos:end="99:67">(<argument pos:start="99:46" pos:end="99:54"><expr pos:start="99:46" pos:end="99:54"><literal type="string" pos:start="99:46" pos:end="99:54">"[%s]:%s"</literal></expr></argument>, <argument pos:start="99:57" pos:end="99:60"><expr pos:start="99:57" pos:end="99:60"><name pos:start="99:57" pos:end="99:60">host</name></expr></argument>, <argument pos:start="99:63" pos:end="99:66"><expr pos:start="99:63" pos:end="99:66"><name pos:start="99:63" pos:end="99:66">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="101:19" pos:end="105:17">else <block pos:start="101:24" pos:end="105:17">{<block_content pos:start="103:21" pos:end="103:66">

                    <expr_stmt pos:start="103:21" pos:end="103:66"><expr pos:start="103:21" pos:end="103:65"><name pos:start="103:21" pos:end="103:26">strbuf</name> <operator pos:start="103:28" pos:end="103:28">=</operator> <call pos:start="103:30" pos:end="103:65"><name pos:start="103:30" pos:end="103:44">g_strdup_printf</name><argument_list pos:start="103:45" pos:end="103:65">(<argument pos:start="103:46" pos:end="103:52"><expr pos:start="103:46" pos:end="103:52"><literal type="string" pos:start="103:46" pos:end="103:52">"%s:%s"</literal></expr></argument>, <argument pos:start="103:55" pos:end="103:58"><expr pos:start="103:55" pos:end="103:58"><name pos:start="103:55" pos:end="103:58">host</name></expr></argument>, <argument pos:start="103:61" pos:end="103:64"><expr pos:start="103:61" pos:end="103:64"><name pos:start="103:61" pos:end="103:64">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:31"><expr pos:start="107:17" pos:end="107:30"><name pos:start="107:17" pos:end="107:21">value</name> <operator pos:start="107:23" pos:end="107:23">=</operator> <name pos:start="107:25" pos:end="107:30">strbuf</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="109:15" pos:end="115:13">else if <condition pos:start="109:23" pos:end="109:41">(<expr pos:start="109:24" pos:end="109:40"><call pos:start="109:24" pos:end="109:40"><name pos:start="109:24" pos:end="109:29">strchr</name><argument_list pos:start="109:30" pos:end="109:40">(<argument pos:start="109:31" pos:end="109:34"><expr pos:start="109:31" pos:end="109:34"><name pos:start="109:31" pos:end="109:34">host</name></expr></argument>, <argument pos:start="109:37" pos:end="109:39"><expr pos:start="109:37" pos:end="109:39"><literal type="char" pos:start="109:37" pos:end="109:39">':'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:43" pos:end="115:13">{<block_content pos:start="111:17" pos:end="113:31">

                <expr_stmt pos:start="111:17" pos:end="111:55"><expr pos:start="111:17" pos:end="111:54"><name pos:start="111:17" pos:end="111:22">strbuf</name> <operator pos:start="111:24" pos:end="111:24">=</operator> <call pos:start="111:26" pos:end="111:54"><name pos:start="111:26" pos:end="111:40">g_strdup_printf</name><argument_list pos:start="111:41" pos:end="111:54">(<argument pos:start="111:42" pos:end="111:47"><expr pos:start="111:42" pos:end="111:47"><literal type="string" pos:start="111:42" pos:end="111:47">"[%s]"</literal></expr></argument>, <argument pos:start="111:50" pos:end="111:53"><expr pos:start="111:50" pos:end="111:53"><name pos:start="111:50" pos:end="111:53">host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:31"><expr pos:start="113:17" pos:end="113:30"><name pos:start="113:17" pos:end="113:21">value</name> <operator pos:start="113:23" pos:end="113:23">=</operator> <name pos:start="113:25" pos:end="113:30">strbuf</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="117:11" pos:end="121:9">else <block pos:start="117:16" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:20">

            <expr_stmt pos:start="119:13" pos:end="119:20"><expr pos:start="119:13" pos:end="119:19"><call pos:start="119:13" pos:end="119:19"><name pos:start="119:13" pos:end="119:17">abort</name><argument_list pos:start="119:18" pos:end="119:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="125:9" pos:end="127:57">/* each iteration in the for loop will build upon the string, and if

         * rados_str is NULL then it is our first pass */</comment>

        <if_stmt pos:start="129:9" pos:end="145:9"><if pos:start="129:9" pos:end="141:9">if <condition pos:start="129:12" pos:end="129:22">(<expr pos:start="129:13" pos:end="129:21"><name pos:start="129:13" pos:end="129:21">rados_str</name></expr>)</condition> <block pos:start="129:24" pos:end="141:9">{<block_content pos:start="135:13" pos:end="139:34">

            <comment type="block" pos:start="131:13" pos:end="133:26">/* separate options with ';', as that  is what rados_conf_set()

             * requires */</comment>

            <expr_stmt pos:start="135:13" pos:end="135:38"><expr pos:start="135:13" pos:end="135:37"><name pos:start="135:13" pos:end="135:25">rados_str_tmp</name> <operator pos:start="135:27" pos:end="135:27">=</operator> <name pos:start="135:29" pos:end="135:37">rados_str</name></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:71"><expr pos:start="137:13" pos:end="137:70"><name pos:start="137:13" pos:end="137:21">rados_str</name> <operator pos:start="137:23" pos:end="137:23">=</operator> <call pos:start="137:25" pos:end="137:70"><name pos:start="137:25" pos:end="137:39">g_strdup_printf</name><argument_list pos:start="137:40" pos:end="137:70">(<argument pos:start="137:41" pos:end="137:47"><expr pos:start="137:41" pos:end="137:47"><literal type="string" pos:start="137:41" pos:end="137:47">"%s;%s"</literal></expr></argument>, <argument pos:start="137:50" pos:end="137:62"><expr pos:start="137:50" pos:end="137:62"><name pos:start="137:50" pos:end="137:62">rados_str_tmp</name></expr></argument>, <argument pos:start="137:65" pos:end="137:69"><expr pos:start="137:65" pos:end="137:69"><name pos:start="137:65" pos:end="137:69">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:34"><expr pos:start="139:13" pos:end="139:33"><call pos:start="139:13" pos:end="139:33"><name pos:start="139:13" pos:end="139:18">g_free</name><argument_list pos:start="139:19" pos:end="139:33">(<argument pos:start="139:20" pos:end="139:32"><expr pos:start="139:20" pos:end="139:32"><name pos:start="139:20" pos:end="139:32">rados_str_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="141:11" pos:end="145:9">else <block pos:start="141:16" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:40">

            <expr_stmt pos:start="143:13" pos:end="143:40"><expr pos:start="143:13" pos:end="143:39"><name pos:start="143:13" pos:end="143:21">rados_str</name> <operator pos:start="143:23" pos:end="143:23">=</operator> <call pos:start="143:25" pos:end="143:39"><name pos:start="143:25" pos:end="143:32">g_strdup</name><argument_list pos:start="143:33" pos:end="143:39">(<argument pos:start="143:34" pos:end="143:38"><expr pos:start="143:34" pos:end="143:38"><name pos:start="143:34" pos:end="143:38">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:23"><expr pos:start="149:9" pos:end="149:22"><call pos:start="149:9" pos:end="149:22"><name pos:start="149:9" pos:end="149:14">g_free</name><argument_list pos:start="149:15" pos:end="149:22">(<argument pos:start="149:16" pos:end="149:21"><expr pos:start="149:16" pos:end="149:21"><name pos:start="149:16" pos:end="149:21">strbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:28"><expr pos:start="151:9" pos:end="151:27"><call pos:start="151:9" pos:end="151:27"><name pos:start="151:9" pos:end="151:21">qemu_opts_del</name><argument_list pos:start="151:22" pos:end="151:27">(<argument pos:start="151:23" pos:end="151:26"><expr pos:start="151:23" pos:end="151:26"><name pos:start="151:23" pos:end="151:26">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:20"><expr pos:start="153:9" pos:end="153:19"><name pos:start="153:9" pos:end="153:12">opts</name> <operator pos:start="153:14" pos:end="153:14">=</operator> <name pos:start="153:16" pos:end="153:19">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></for>



<label pos:start="159:1" pos:end="159:5"><name pos:start="159:1" pos:end="159:4">exit</name>:</label>

    <expr_stmt pos:start="161:5" pos:end="161:24"><expr pos:start="161:5" pos:end="161:23"><call pos:start="161:5" pos:end="161:23"><name pos:start="161:5" pos:end="161:17">qemu_opts_del</name><argument_list pos:start="161:18" pos:end="161:23">(<argument pos:start="161:19" pos:end="161:22"><expr pos:start="161:19" pos:end="161:22"><name pos:start="161:19" pos:end="161:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="163:5" pos:end="163:21">return <expr pos:start="163:12" pos:end="163:20"><name pos:start="163:12" pos:end="163:20">rados_str</name></expr>;</return>

</block_content>}</block></function>
</unit>
