<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5792.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">hdcd_integrate</name><parameter_list pos:start="1:26" pos:end="1:122">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><name pos:start="1:27" pos:end="1:37">HDCDContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">ctx</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:63"><decl pos:start="1:45" pos:end="1:63"><type pos:start="1:45" pos:end="1:63"><name pos:start="1:45" pos:end="1:56">hdcd_state_t</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:63">state</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:74"><decl pos:start="1:66" pos:end="1:74"><type pos:start="1:66" pos:end="1:74"><name pos:start="1:66" pos:end="1:68">int</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:74">flag</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:98"><decl pos:start="1:77" pos:end="1:98"><type pos:start="1:77" pos:end="1:98"><specifier pos:start="1:77" pos:end="1:81">const</specifier> <name pos:start="1:83" pos:end="1:89">int32_t</name> <modifier pos:start="1:91" pos:end="1:91">*</modifier></type><name pos:start="1:92" pos:end="1:98">samples</name></decl></parameter>, <parameter pos:start="1:101" pos:end="1:109"><decl pos:start="1:101" pos:end="1:109"><type pos:start="1:101" pos:end="1:109"><name pos:start="1:101" pos:end="1:103">int</name></type> <name pos:start="1:105" pos:end="1:109">count</name></decl></parameter>, <parameter pos:start="1:112" pos:end="1:121"><decl pos:start="1:112" pos:end="1:121"><type pos:start="1:112" pos:end="1:121"><name pos:start="1:112" pos:end="1:114">int</name></type> <name pos:start="1:116" pos:end="1:121">stride</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="137:1">{<block_content pos:start="5:5" pos:end="135:18">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:17">bits</name> <init pos:start="5:19" pos:end="5:21">= <expr pos:start="5:21" pos:end="5:21"><literal type="number" pos:start="5:21" pos:end="5:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">result</name> <init pos:start="7:16" pos:end="7:47">= <expr pos:start="7:18" pos:end="7:47"><call pos:start="7:18" pos:end="7:47"><name pos:start="7:18" pos:end="7:22">FFMIN</name><argument_list pos:start="7:23" pos:end="7:47">(<argument pos:start="7:24" pos:end="7:39"><expr pos:start="7:24" pos:end="7:39"><name pos:start="7:24" pos:end="7:39"><name pos:start="7:24" pos:end="7:28">state</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:39">readahead</name></name></expr></argument>, <argument pos:start="7:42" pos:end="7:46"><expr pos:start="7:42" pos:end="7:46"><name pos:start="7:42" pos:end="7:46">count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:14"><expr pos:start="11:5" pos:end="11:13"><operator pos:start="11:5" pos:end="11:5">*</operator><name pos:start="11:6" pos:end="11:9">flag</name> <operator pos:start="11:11" pos:end="11:11">=</operator> <literal type="number" pos:start="11:13" pos:end="11:13">0</literal></expr>;</expr_stmt>



    <for pos:start="15:5" pos:end="21:5">for <control pos:start="15:9" pos:end="15:37">(<init pos:start="15:10" pos:end="15:24"><expr pos:start="15:10" pos:end="15:23"><name pos:start="15:10" pos:end="15:10">i</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <name pos:start="15:14" pos:end="15:19">result</name> <operator pos:start="15:21" pos:end="15:21">-</operator> <literal type="number" pos:start="15:23" pos:end="15:23">1</literal></expr>;</init> <condition pos:start="15:26" pos:end="15:32"><expr pos:start="15:26" pos:end="15:31"><name pos:start="15:26" pos:end="15:26">i</name> <operator pos:start="15:28" pos:end="15:29">&gt;=</operator> <literal type="number" pos:start="15:31" pos:end="15:31">0</literal></expr>;</condition> <incr pos:start="15:34" pos:end="15:36"><expr pos:start="15:34" pos:end="15:36"><name pos:start="15:34" pos:end="15:34">i</name><operator pos:start="15:35" pos:end="15:36">--</operator></expr></incr>)</control> <block pos:start="15:39" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:26">

        <expr_stmt pos:start="17:9" pos:end="17:36"><expr pos:start="17:9" pos:end="17:35"><name pos:start="17:9" pos:end="17:12">bits</name> <operator pos:start="17:14" pos:end="17:15">|=</operator> <operator pos:start="17:17" pos:end="17:17">(</operator><operator pos:start="17:18" pos:end="17:18">*</operator><name pos:start="17:19" pos:end="17:25">samples</name> <operator pos:start="17:27" pos:end="17:27">&amp;</operator> <literal type="number" pos:start="17:29" pos:end="17:29">1</literal><operator pos:start="17:30" pos:end="17:30">)</operator> <operator pos:start="17:32" pos:end="17:33">&lt;&lt;</operator> <name pos:start="17:35" pos:end="17:35">i</name></expr>;</expr_stmt> <comment type="block" pos:start="17:38" pos:end="17:76">/* might be better as a conditional? */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:26"><expr pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:15">samples</name> <operator pos:start="19:17" pos:end="19:18">+=</operator> <name pos:start="19:20" pos:end="19:25">stride</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="25:5" pos:end="25:53"><expr pos:start="25:5" pos:end="25:52"><name pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:9">state</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">window</name></name> <operator pos:start="25:19" pos:end="25:19">=</operator> <operator pos:start="25:21" pos:end="25:21">(</operator><name pos:start="25:22" pos:end="25:34"><name pos:start="25:22" pos:end="25:26">state</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:34">window</name></name> <operator pos:start="25:36" pos:end="25:37">&lt;&lt;</operator> <name pos:start="25:39" pos:end="25:44">result</name><operator pos:start="25:45" pos:end="25:45">)</operator> <operator pos:start="25:47" pos:end="25:47">|</operator> <name pos:start="25:49" pos:end="25:52">bits</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:9">state</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:20">readahead</name></name> <operator pos:start="27:22" pos:end="27:23">-=</operator> <name pos:start="27:25" pos:end="27:30">result</name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="31:22"><if pos:start="29:5" pos:end="31:22">if <condition pos:start="29:8" pos:end="29:29">(<expr pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:13">state</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:24">readahead</name></name> <operator pos:start="29:26" pos:end="29:26">&gt;</operator> <literal type="number" pos:start="29:28" pos:end="29:28">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:22"><block_content pos:start="31:9" pos:end="31:22">

        <return pos:start="31:9" pos:end="31:22">return <expr pos:start="31:16" pos:end="31:21"><name pos:start="31:16" pos:end="31:21">result</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:70"><expr pos:start="35:5" pos:end="35:69"><name pos:start="35:5" pos:end="35:8">bits</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <operator pos:start="35:12" pos:end="35:12">(</operator><name pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:17">state</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:25">window</name></name> <operator pos:start="35:27" pos:end="35:27">^</operator> <name pos:start="35:29" pos:end="35:41"><name pos:start="35:29" pos:end="35:33">state</name><operator pos:start="35:34" pos:end="35:35">-&gt;</operator><name pos:start="35:36" pos:end="35:41">window</name></name> <operator pos:start="35:43" pos:end="35:44">&gt;&gt;</operator> <literal type="number" pos:start="35:46" pos:end="35:46">5</literal> <operator pos:start="35:48" pos:end="35:48">^</operator> <name pos:start="35:50" pos:end="35:62"><name pos:start="35:50" pos:end="35:54">state</name><operator pos:start="35:55" pos:end="35:56">-&gt;</operator><name pos:start="35:57" pos:end="35:62">window</name></name> <operator pos:start="35:64" pos:end="35:65">&gt;&gt;</operator> <literal type="number" pos:start="35:67" pos:end="35:68">23</literal><operator pos:start="35:69" pos:end="35:69">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="113:5"><if pos:start="39:5" pos:end="113:5">if <condition pos:start="39:8" pos:end="39:19">(<expr pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:13">state</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:18">arg</name></name></expr>)</condition> <block pos:start="39:21" pos:end="113:5">{<block_content pos:start="41:9" pos:end="111:23">

        <if_stmt pos:start="41:9" pos:end="107:9"><if pos:start="41:9" pos:end="69:9">if <condition pos:start="41:12" pos:end="41:46">(<expr pos:start="41:13" pos:end="41:45"><operator pos:start="41:13" pos:end="41:13">(</operator><name pos:start="41:14" pos:end="41:17">bits</name> <operator pos:start="41:19" pos:end="41:19">&amp;</operator> <literal type="number" pos:start="41:21" pos:end="41:30">0x0fa00500</literal><operator pos:start="41:31" pos:end="41:31">)</operator> <operator pos:start="41:33" pos:end="41:34">==</operator> <literal type="number" pos:start="41:36" pos:end="41:45">0x0fa00500</literal></expr>)</condition> <block pos:start="41:48" pos:end="69:9">{<block_content pos:start="45:13" pos:end="67:13">

            <comment type="block" pos:start="43:13" pos:end="43:31">/* A: 8-bit code */</comment>

            <if_stmt pos:start="45:13" pos:end="67:13"><if pos:start="45:13" pos:end="57:13">if <condition pos:start="45:16" pos:end="45:35">(<expr pos:start="45:17" pos:end="45:34"><operator pos:start="45:17" pos:end="45:17">(</operator><name pos:start="45:18" pos:end="45:21">bits</name> <operator pos:start="45:23" pos:end="45:23">&amp;</operator> <literal type="number" pos:start="45:25" pos:end="45:28">0xc8</literal><operator pos:start="45:29" pos:end="45:29">)</operator> <operator pos:start="45:31" pos:end="45:32">==</operator> <literal type="number" pos:start="45:34" pos:end="45:34">0</literal></expr>)</condition> <block pos:start="45:37" pos:end="57:13">{<block_content pos:start="51:17" pos:end="55:39">

                <comment type="block" pos:start="47:17" pos:end="49:70">/*                   [..pt gggg]

                 * 0x0fa005[..] -&gt; 0b[00.. 0...], gain part doubled */</comment>

                <expr_stmt pos:start="51:17" pos:end="51:59"><expr pos:start="51:17" pos:end="51:58"><name pos:start="51:17" pos:end="51:30"><name pos:start="51:17" pos:end="51:21">state</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:30">control</name></name> <operator pos:start="51:32" pos:end="51:32">=</operator> <operator pos:start="51:34" pos:end="51:34">(</operator><name pos:start="51:35" pos:end="51:38">bits</name> <operator pos:start="51:40" pos:end="51:40">&amp;</operator> <literal type="number" pos:start="51:42" pos:end="51:44">255</literal><operator pos:start="51:45" pos:end="51:45">)</operator> <operator pos:start="51:47" pos:end="51:47">+</operator> <operator pos:start="51:49" pos:end="51:49">(</operator><name pos:start="51:50" pos:end="51:53">bits</name> <operator pos:start="51:55" pos:end="51:55">&amp;</operator> <literal type="number" pos:start="51:57" pos:end="51:57">7</literal><operator pos:start="51:58" pos:end="51:58">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:26"><expr pos:start="53:17" pos:end="53:25"><operator pos:start="53:17" pos:end="53:17">*</operator><name pos:start="53:18" pos:end="53:21">flag</name> <operator pos:start="53:23" pos:end="53:23">=</operator> <literal type="number" pos:start="53:25" pos:end="53:25">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:39"><expr pos:start="55:17" pos:end="55:38"><name pos:start="55:17" pos:end="55:36"><name pos:start="55:17" pos:end="55:21">state</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:36">code_counterA</name></name><operator pos:start="55:37" pos:end="55:38">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="57:15" pos:end="67:13">else <block pos:start="57:20" pos:end="67:13">{<block_content pos:start="61:17" pos:end="65:102">

                <comment type="block" pos:start="59:17" pos:end="59:54">/* one of bits 3, 6, or 7 was not 0 */</comment>

                <expr_stmt pos:start="61:17" pos:end="61:46"><expr pos:start="61:17" pos:end="61:45"><name pos:start="61:17" pos:end="61:43"><name pos:start="61:17" pos:end="61:21">state</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:43">code_counterA_almost</name></name><operator pos:start="61:44" pos:end="61:45">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="65:102"><expr pos:start="63:17" pos:end="65:101"><call pos:start="63:17" pos:end="65:101"><name pos:start="63:17" pos:end="63:22">av_log</name><argument_list pos:start="63:23" pos:end="65:101">(<argument pos:start="63:24" pos:end="63:32"><expr pos:start="63:24" pos:end="63:32"><name pos:start="63:24" pos:end="63:32"><name pos:start="63:24" pos:end="63:26">ctx</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:32">fctx</name></name></expr></argument>, <argument pos:start="63:35" pos:end="63:48"><expr pos:start="63:35" pos:end="63:48"><name pos:start="63:35" pos:end="63:48">AV_LOG_VERBOSE</name></expr></argument>,

                    <argument pos:start="65:21" pos:end="65:68"><expr pos:start="65:21" pos:end="65:68"><literal type="string" pos:start="65:21" pos:end="65:68">"hdcd error: Control A almost: 0x%02x near %d\n"</literal></expr></argument>, <argument pos:start="65:71" pos:end="65:81"><expr pos:start="65:71" pos:end="65:81"><name pos:start="65:71" pos:end="65:74">bits</name> <operator pos:start="65:76" pos:end="65:76">&amp;</operator> <literal type="number" pos:start="65:78" pos:end="65:81">0xff</literal></expr></argument>, <argument pos:start="65:84" pos:end="65:100"><expr pos:start="65:84" pos:end="65:100"><name pos:start="65:84" pos:end="65:100"><name pos:start="65:84" pos:end="65:86">ctx</name><operator pos:start="65:87" pos:end="65:88">-&gt;</operator><name pos:start="65:89" pos:end="65:100">sample_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="69:11" pos:end="97:9">else if <condition pos:start="69:19" pos:end="69:53">(<expr pos:start="69:20" pos:end="69:52"><operator pos:start="69:20" pos:end="69:20">(</operator><name pos:start="69:21" pos:end="69:24">bits</name> <operator pos:start="69:26" pos:end="69:26">&amp;</operator> <literal type="number" pos:start="69:28" pos:end="69:37">0xa0060000</literal><operator pos:start="69:38" pos:end="69:38">)</operator> <operator pos:start="69:40" pos:end="69:41">==</operator> <literal type="number" pos:start="69:43" pos:end="69:52">0xa0060000</literal></expr>)</condition> <block pos:start="69:55" pos:end="97:9">{<block_content pos:start="73:13" pos:end="95:13">

            <comment type="block" pos:start="71:13" pos:end="71:48">/* B: 8-bit code, 8-bit XOR check */</comment>

            <if_stmt pos:start="73:13" pos:end="95:13"><if pos:start="73:13" pos:end="85:13">if <condition pos:start="73:16" pos:end="73:73">(<expr pos:start="73:17" pos:end="73:72"><operator pos:start="73:17" pos:end="73:17">(</operator><operator pos:start="73:18" pos:end="73:18">(</operator><name pos:start="73:19" pos:end="73:22">bits</name> <operator pos:start="73:24" pos:end="73:24">^</operator> <operator pos:start="73:26" pos:end="73:26">(</operator><operator pos:start="73:27" pos:end="73:27">~</operator><name pos:start="73:28" pos:end="73:31">bits</name> <operator pos:start="73:33" pos:end="73:34">&gt;&gt;</operator> <literal type="number" pos:start="73:36" pos:end="73:36">8</literal> <operator pos:start="73:38" pos:end="73:38">&amp;</operator> <literal type="number" pos:start="73:40" pos:end="73:42">255</literal><operator pos:start="73:43" pos:end="73:43">)</operator><operator pos:start="73:44" pos:end="73:44">)</operator> <operator pos:start="73:46" pos:end="73:46">&amp;</operator> <literal type="number" pos:start="73:48" pos:end="73:57">0xffff00ff</literal><operator pos:start="73:58" pos:end="73:58">)</operator> <operator pos:start="73:60" pos:end="73:61">==</operator> <literal type="number" pos:start="73:63" pos:end="73:72">0xa0060000</literal></expr>)</condition> <block pos:start="73:75" pos:end="85:13">{<block_content pos:start="79:17" pos:end="83:39">

                <comment type="block" pos:start="75:17" pos:end="77:64">/*          check:   [..pt gggg ~(..pt gggg)]

                 * 0xa006[....] -&gt; 0b[.... ....   .... .... ] */</comment>

                <expr_stmt pos:start="79:17" pos:end="79:49"><expr pos:start="79:17" pos:end="79:48"><name pos:start="79:17" pos:end="79:30"><name pos:start="79:17" pos:end="79:21">state</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:30">control</name></name> <operator pos:start="79:32" pos:end="79:32">=</operator> <name pos:start="79:34" pos:end="79:37">bits</name> <operator pos:start="79:39" pos:end="79:40">&gt;&gt;</operator> <literal type="number" pos:start="79:42" pos:end="79:42">8</literal> <operator pos:start="79:44" pos:end="79:44">&amp;</operator> <literal type="number" pos:start="79:46" pos:end="79:48">255</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="81:17" pos:end="81:26"><expr pos:start="81:17" pos:end="81:25"><operator pos:start="81:17" pos:end="81:17">*</operator><name pos:start="81:18" pos:end="81:21">flag</name> <operator pos:start="81:23" pos:end="81:23">=</operator> <literal type="number" pos:start="81:25" pos:end="81:25">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="83:17" pos:end="83:39"><expr pos:start="83:17" pos:end="83:38"><name pos:start="83:17" pos:end="83:36"><name pos:start="83:17" pos:end="83:21">state</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:36">code_counterB</name></name><operator pos:start="83:37" pos:end="83:38">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="85:15" pos:end="95:13">else <block pos:start="85:20" pos:end="95:13">{<block_content pos:start="89:17" pos:end="93:168">

                <comment type="block" pos:start="87:17" pos:end="87:38">/* XOR check failed */</comment>

                <expr_stmt pos:start="89:17" pos:end="89:50"><expr pos:start="89:17" pos:end="89:49"><name pos:start="89:17" pos:end="89:47"><name pos:start="89:17" pos:end="89:21">state</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:47">code_counterB_checkfails</name></name><operator pos:start="89:48" pos:end="89:49">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="93:168"><expr pos:start="91:17" pos:end="93:167"><call pos:start="91:17" pos:end="93:167"><name pos:start="91:17" pos:end="91:22">av_log</name><argument_list pos:start="91:23" pos:end="93:167">(<argument pos:start="91:24" pos:end="91:32"><expr pos:start="91:24" pos:end="91:32"><name pos:start="91:24" pos:end="91:32"><name pos:start="91:24" pos:end="91:26">ctx</name><operator pos:start="91:27" pos:end="91:28">-&gt;</operator><name pos:start="91:29" pos:end="91:32">fctx</name></name></expr></argument>, <argument pos:start="91:35" pos:end="91:48"><expr pos:start="91:35" pos:end="91:48"><name pos:start="91:35" pos:end="91:48">AV_LOG_VERBOSE</name></expr></argument>,

                       <argument pos:start="93:24" pos:end="93:96"><expr pos:start="93:24" pos:end="93:96"><literal type="string" pos:start="93:24" pos:end="93:96">"hdcd error: Control B check failed: 0x%04x (0x%02x vs 0x%02x) near %d\n"</literal></expr></argument>, <argument pos:start="93:99" pos:end="93:111"><expr pos:start="93:99" pos:end="93:111"><name pos:start="93:99" pos:end="93:102">bits</name> <operator pos:start="93:104" pos:end="93:104">&amp;</operator> <literal type="number" pos:start="93:106" pos:end="93:111">0xffff</literal></expr></argument>, <argument pos:start="93:114" pos:end="93:133"><expr pos:start="93:114" pos:end="93:133"><operator pos:start="93:114" pos:end="93:114">(</operator><name pos:start="93:115" pos:end="93:118">bits</name> <operator pos:start="93:120" pos:end="93:120">&amp;</operator> <literal type="number" pos:start="93:122" pos:end="93:127">0xff00</literal><operator pos:start="93:128" pos:end="93:128">)</operator> <operator pos:start="93:130" pos:end="93:131">&gt;&gt;</operator> <literal type="number" pos:start="93:133" pos:end="93:133">8</literal></expr></argument>, <argument pos:start="93:136" pos:end="93:147"><expr pos:start="93:136" pos:end="93:147"><operator pos:start="93:136" pos:end="93:136">~</operator><name pos:start="93:137" pos:end="93:140">bits</name> <operator pos:start="93:142" pos:end="93:142">&amp;</operator> <literal type="number" pos:start="93:144" pos:end="93:147">0xff</literal></expr></argument>, <argument pos:start="93:150" pos:end="93:166"><expr pos:start="93:150" pos:end="93:166"><name pos:start="93:150" pos:end="93:166"><name pos:start="93:150" pos:end="93:152">ctx</name><operator pos:start="93:153" pos:end="93:154">-&gt;</operator><name pos:start="93:155" pos:end="93:166">sample_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="97:11" pos:end="107:9">else <block pos:start="97:16" pos:end="107:9">{<block_content pos:start="101:13" pos:end="105:92">

            <comment type="block" pos:start="99:13" pos:end="99:63">/* told to look for a code, but didn't match one */</comment>

            <expr_stmt pos:start="101:13" pos:end="101:45"><expr pos:start="101:13" pos:end="101:44"><name pos:start="101:13" pos:end="101:42"><name pos:start="101:13" pos:end="101:17">state</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:42">code_counterC_unmatched</name></name><operator pos:start="101:43" pos:end="101:44">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="105:92"><expr pos:start="103:13" pos:end="105:91"><call pos:start="103:13" pos:end="105:91"><name pos:start="103:13" pos:end="103:18">av_log</name><argument_list pos:start="103:19" pos:end="105:91">(<argument pos:start="103:20" pos:end="103:28"><expr pos:start="103:20" pos:end="103:28"><name pos:start="103:20" pos:end="103:28"><name pos:start="103:20" pos:end="103:22">ctx</name><operator pos:start="103:23" pos:end="103:24">-&gt;</operator><name pos:start="103:25" pos:end="103:28">fctx</name></name></expr></argument>, <argument pos:start="103:31" pos:end="103:44"><expr pos:start="103:31" pos:end="103:44"><name pos:start="103:31" pos:end="103:44">AV_LOG_VERBOSE</name></expr></argument>,

                   <argument pos:start="105:20" pos:end="105:65"><expr pos:start="105:20" pos:end="105:65"><literal type="string" pos:start="105:20" pos:end="105:65">"hdcd error: Unmatched code: 0x%08x near %d\n"</literal></expr></argument>, <argument pos:start="105:68" pos:end="105:71"><expr pos:start="105:68" pos:end="105:71"><name pos:start="105:68" pos:end="105:71">bits</name></expr></argument>, <argument pos:start="105:74" pos:end="105:90"><expr pos:start="105:74" pos:end="105:90"><name pos:start="105:74" pos:end="105:90"><name pos:start="105:74" pos:end="105:76">ctx</name><operator pos:start="105:77" pos:end="105:78">-&gt;</operator><name pos:start="105:79" pos:end="105:90">sample_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="109:9" pos:end="109:43"><if pos:start="109:9" pos:end="109:43">if <condition pos:start="109:12" pos:end="109:18">(<expr pos:start="109:13" pos:end="109:17"><operator pos:start="109:13" pos:end="109:13">*</operator><name pos:start="109:14" pos:end="109:17">flag</name></expr>)</condition><block type="pseudo" pos:start="109:20" pos:end="109:43"><block_content pos:start="109:20" pos:end="109:43"> <expr_stmt pos:start="109:20" pos:end="109:43"><expr pos:start="109:20" pos:end="109:42"><call pos:start="109:20" pos:end="109:42"><name pos:start="109:20" pos:end="109:35">hdcd_update_info</name><argument_list pos:start="109:36" pos:end="109:42">(<argument pos:start="109:37" pos:end="109:41"><expr pos:start="109:37" pos:end="109:41"><name pos:start="109:37" pos:end="109:41">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:23"><expr pos:start="111:9" pos:end="111:22"><name pos:start="111:9" pos:end="111:18"><name pos:start="111:9" pos:end="111:13">state</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:18">arg</name></name> <operator pos:start="111:20" pos:end="111:20">=</operator> <literal type="number" pos:start="111:22" pos:end="111:22">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="115:5" pos:end="133:5"><if pos:start="115:5" pos:end="123:5">if <condition pos:start="115:8" pos:end="115:49">(<expr pos:start="115:9" pos:end="115:48"><name pos:start="115:9" pos:end="115:12">bits</name> <operator pos:start="115:14" pos:end="115:15">==</operator> <literal type="number" pos:start="115:17" pos:end="115:26">0x7e0fa005</literal> <operator pos:start="115:28" pos:end="115:29">||</operator> <name pos:start="115:31" pos:end="115:34">bits</name> <operator pos:start="115:36" pos:end="115:37">==</operator> <literal type="number" pos:start="115:39" pos:end="115:48">0x7e0fa006</literal></expr>)</condition> <block pos:start="115:51" pos:end="123:5">{<block_content pos:start="117:9" pos:end="121:31">

        <expr_stmt pos:start="117:9" pos:end="117:42"><expr pos:start="117:9" pos:end="117:41"><name pos:start="117:9" pos:end="117:24"><name pos:start="117:9" pos:end="117:13">state</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:24">readahead</name></name> <operator pos:start="117:26" pos:end="117:26">=</operator> <operator pos:start="117:28" pos:end="117:28">(</operator><name pos:start="117:29" pos:end="117:32">bits</name> <operator pos:start="117:34" pos:end="117:34">&amp;</operator> <literal type="number" pos:start="117:36" pos:end="117:36">3</literal><operator pos:start="117:37" pos:end="117:37">)</operator> <operator pos:start="117:39" pos:end="117:39">*</operator> <literal type="number" pos:start="117:41" pos:end="117:41">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:23"><expr pos:start="119:9" pos:end="119:22"><name pos:start="119:9" pos:end="119:18"><name pos:start="119:9" pos:end="119:13">state</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:18">arg</name></name> <operator pos:start="119:20" pos:end="119:20">=</operator> <literal type="number" pos:start="119:22" pos:end="119:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:31"><expr pos:start="121:9" pos:end="121:30"><name pos:start="121:9" pos:end="121:28"><name pos:start="121:9" pos:end="121:13">state</name><operator pos:start="121:14" pos:end="121:15">-&gt;</operator><name pos:start="121:16" pos:end="121:28">code_counterC</name></name><operator pos:start="121:29" pos:end="121:30">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="123:7" pos:end="133:5">else <block pos:start="123:12" pos:end="133:5">{<block_content pos:start="125:9" pos:end="131:34">

        <if_stmt pos:start="125:9" pos:end="131:34"><if pos:start="125:9" pos:end="127:57">if <condition pos:start="125:12" pos:end="125:17">(<expr pos:start="125:13" pos:end="125:16"><name pos:start="125:13" pos:end="125:16">bits</name></expr>)</condition><block type="pseudo" pos:start="127:13" pos:end="127:57"><block_content pos:start="127:13" pos:end="127:57">

            <expr_stmt pos:start="127:13" pos:end="127:57"><expr pos:start="127:13" pos:end="127:56"><name pos:start="127:13" pos:end="127:28"><name pos:start="127:13" pos:end="127:17">state</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:28">readahead</name></name> <operator pos:start="127:30" pos:end="127:30">=</operator> <name pos:start="127:32" pos:end="127:56"><name pos:start="127:32" pos:end="127:43">readaheadtab</name><index pos:start="127:44" pos:end="127:56">[<expr pos:start="127:45" pos:end="127:55"><name pos:start="127:45" pos:end="127:48">bits</name> <operator pos:start="127:50" pos:end="127:50">&amp;</operator> <literal type="number" pos:start="127:52" pos:end="127:55">0xff</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="129:9" pos:end="131:34">else<block type="pseudo" pos:start="131:13" pos:end="131:34"><block_content pos:start="131:13" pos:end="131:34">

            <expr_stmt pos:start="131:13" pos:end="131:34"><expr pos:start="131:13" pos:end="131:33"><name pos:start="131:13" pos:end="131:28"><name pos:start="131:13" pos:end="131:17">state</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:28">readahead</name></name> <operator pos:start="131:30" pos:end="131:30">=</operator> <literal type="number" pos:start="131:32" pos:end="131:33">31</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block" pos:start="131:36" pos:end="131:62">/* ffwd over digisilence */</comment>

    </block_content>}</block></else></if_stmt>

    <return pos:start="135:5" pos:end="135:18">return <expr pos:start="135:12" pos:end="135:17"><name pos:start="135:12" pos:end="135:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
