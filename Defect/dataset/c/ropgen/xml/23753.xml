<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23753.c" pos:tabs="8"><function pos:start="1:1" pos:end="475:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">mips_malta_init</name> <parameter_list pos:start="1:22" pos:end="7:73">(<parameter pos:start="1:23" pos:end="1:41"><decl pos:start="1:23" pos:end="1:41"><type pos:start="1:23" pos:end="1:41"><name pos:start="1:23" pos:end="1:32">ram_addr_t</name></type> <name pos:start="1:34" pos:end="1:41">ram_size</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:45"><decl pos:start="3:23" pos:end="3:45"><type pos:start="3:23" pos:end="3:45"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:32">char</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:45">boot_device</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:49"><decl pos:start="5:23" pos:end="5:49"><type pos:start="5:23" pos:end="5:49"><specifier pos:start="5:23" pos:end="5:27">const</specifier> <name pos:start="5:29" pos:end="5:32">char</name> <modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:49">kernel_filename</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:77"><decl pos:start="5:52" pos:end="5:77"><type pos:start="5:52" pos:end="5:77"><specifier pos:start="5:52" pos:end="5:56">const</specifier> <name pos:start="5:58" pos:end="5:61">char</name> <modifier pos:start="5:63" pos:end="5:63">*</modifier></type><name pos:start="5:64" pos:end="5:77">kernel_cmdline</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:49"><decl pos:start="7:23" pos:end="7:49"><type pos:start="7:23" pos:end="7:49"><specifier pos:start="7:23" pos:end="7:27">const</specifier> <name pos:start="7:29" pos:end="7:32">char</name> <modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:49">initrd_filename</name></decl></parameter>, <parameter pos:start="7:52" pos:end="7:72"><decl pos:start="7:52" pos:end="7:72"><type pos:start="7:52" pos:end="7:72"><specifier pos:start="7:52" pos:end="7:56">const</specifier> <name pos:start="7:58" pos:end="7:61">char</name> <modifier pos:start="7:63" pos:end="7:63">*</modifier></type><name pos:start="7:64" pos:end="7:72">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="475:1">{<block_content pos:start="11:5" pos:end="473:5">

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">char</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">pflash_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:16">fl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:54"><decl pos:start="15:5" pos:end="15:53"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:31">system_memory</name> <init pos:start="15:33" pos:end="15:53">= <expr pos:start="15:35" pos:end="15:53"><call pos:start="15:35" pos:end="15:53"><name pos:start="15:35" pos:end="15:51">get_system_memory</name><argument_list pos:start="15:52" pos:end="15:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:21">ram</name> <init pos:start="17:23" pos:end="17:46">= <expr pos:start="17:25" pos:end="17:46"><call pos:start="17:25" pos:end="17:46"><name pos:start="17:25" pos:end="17:29">g_new</name><argument_list pos:start="17:30" pos:end="17:46">(<argument pos:start="17:31" pos:end="17:42"><expr pos:start="17:31" pos:end="17:42"><name pos:start="17:31" pos:end="17:42">MemoryRegion</name></expr></argument>, <argument pos:start="17:45" pos:end="17:45"><expr pos:start="17:45" pos:end="17:45"><literal type="number" pos:start="17:45" pos:end="17:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:61"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:22">bios</name></decl>, <decl pos:start="19:25" pos:end="19:60"><type ref="prev" pos:start="19:5" pos:end="19:18"><modifier pos:start="19:25" pos:end="19:25">*</modifier></type><name pos:start="19:26" pos:end="19:35">bios_alias</name> <init pos:start="19:37" pos:end="19:60">= <expr pos:start="19:39" pos:end="19:60"><call pos:start="19:39" pos:end="19:60"><name pos:start="19:39" pos:end="19:43">g_new</name><argument_list pos:start="19:44" pos:end="19:60">(<argument pos:start="19:45" pos:end="19:56"><expr pos:start="19:45" pos:end="19:56"><name pos:start="19:45" pos:end="19:56">MemoryRegion</name></expr></argument>, <argument pos:start="19:59" pos:end="19:59"><expr pos:start="19:59" pos:end="19:59"><literal type="number" pos:start="19:59" pos:end="19:59">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:15">target_long</name></type> <name pos:start="21:17" pos:end="21:25">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:25"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:24">kernel_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:20"><decl pos:start="25:5" pos:end="25:19"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:10">PCIBus</name> <modifier pos:start="25:12" pos:end="25:12">*</modifier></type><name pos:start="25:13" pos:end="25:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:10">ISABus</name> <modifier pos:start="27:12" pos:end="27:12">*</modifier></type><name pos:start="27:13" pos:end="27:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:18"><decl pos:start="29:5" pos:end="29:17"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">CPUState</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:22"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:12">qemu_irq</name> <modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:21">isa_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:27"><decl pos:start="33:5" pos:end="33:26"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">qemu_irq</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:26">cpu_exit_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:20"><decl pos:start="35:5" pos:end="35:19"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:19">piix4_devfn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:19"><decl pos:start="37:5" pos:end="37:18"><type pos:start="37:5" pos:end="37:13"><name pos:start="37:5" pos:end="37:11">i2c_bus</name> <modifier pos:start="37:13" pos:end="37:13">*</modifier></type><name pos:start="37:14" pos:end="37:18">smbus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:10"><decl pos:start="39:5" pos:end="39:9"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:21"><decl pos:start="41:5" pos:end="41:20"><type pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:13">DriveInfo</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:46"><decl pos:start="43:5" pos:end="43:45"><type pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:13">DriveInfo</name> <modifier pos:start="43:15" pos:end="43:15">*</modifier></type><name pos:start="43:16" pos:end="43:45"><name pos:start="43:16" pos:end="43:17">hd</name><index pos:start="43:18" pos:end="43:45">[<expr pos:start="43:19" pos:end="43:44"><name pos:start="43:19" pos:end="43:29">MAX_IDE_BUS</name> <operator pos:start="43:31" pos:end="43:31">*</operator> <name pos:start="43:33" pos:end="43:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:26"><decl pos:start="45:5" pos:end="45:25"><type pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:13">DriveInfo</name> <modifier pos:start="45:15" pos:end="45:15">*</modifier></type><name pos:start="45:16" pos:end="45:25"><name pos:start="45:16" pos:end="45:17">fd</name><index pos:start="45:18" pos:end="45:25">[<expr pos:start="45:19" pos:end="45:24"><name pos:start="45:19" pos:end="45:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:19"><decl pos:start="47:5" pos:end="47:18"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:14">fl_idx</name> <init pos:start="47:16" pos:end="47:18">= <expr pos:start="47:18" pos:end="47:18"><literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:23"><decl pos:start="49:5" pos:end="49:22"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:18">fl_sectors</name> <init pos:start="49:20" pos:end="49:22">= <expr pos:start="49:22" pos:end="49:22"><literal type="number" pos:start="49:22" pos:end="49:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:11"><decl pos:start="51:5" pos:end="51:10"><type pos:start="51:5" pos:end="51:7"><name pos:start="51:5" pos:end="51:7">int</name></type> <name pos:start="51:9" pos:end="51:10">be</name></decl>;</decl_stmt>



    <decl_stmt pos:start="55:5" pos:end="55:55"><decl pos:start="55:5" pos:end="55:54"><type pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:15">DeviceState</name> <modifier pos:start="55:17" pos:end="55:17">*</modifier></type><name pos:start="55:18" pos:end="55:20">dev</name> <init pos:start="55:22" pos:end="55:54">= <expr pos:start="55:24" pos:end="55:54"><call pos:start="55:24" pos:end="55:54"><name pos:start="55:24" pos:end="55:34">qdev_create</name><argument_list pos:start="55:35" pos:end="55:54">(<argument pos:start="55:36" pos:end="55:39"><expr pos:start="55:36" pos:end="55:39"><name pos:start="55:36" pos:end="55:39">NULL</name></expr></argument>, <argument pos:start="55:42" pos:end="55:53"><expr pos:start="55:42" pos:end="55:53"><literal type="string" pos:start="55:42" pos:end="55:53">"mips-malta"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:60"><decl pos:start="57:5" pos:end="57:59"><type pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:14">MaltaState</name> <modifier pos:start="57:16" pos:end="57:16">*</modifier></type><name pos:start="57:17" pos:end="57:17">s</name> <init pos:start="57:19" pos:end="57:59">= <expr pos:start="57:21" pos:end="57:59"><call pos:start="57:21" pos:end="57:59"><name pos:start="57:21" pos:end="57:29">DO_UPCAST</name><argument_list pos:start="57:30" pos:end="57:59">(<argument pos:start="57:31" pos:end="57:40"><expr pos:start="57:31" pos:end="57:40"><name pos:start="57:31" pos:end="57:40">MaltaState</name></expr></argument>, <argument pos:start="57:43" pos:end="57:53"><expr pos:start="57:43" pos:end="57:53"><name pos:start="57:43" pos:end="57:53"><name pos:start="57:43" pos:end="57:48">busdev</name><operator pos:start="57:49" pos:end="57:49">.</operator><name pos:start="57:50" pos:end="57:53">qdev</name></name></expr></argument>, <argument pos:start="57:56" pos:end="57:58"><expr pos:start="57:56" pos:end="57:58"><name pos:start="57:56" pos:end="57:58">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:26"><expr pos:start="61:5" pos:end="61:25"><call pos:start="61:5" pos:end="61:25"><name pos:start="61:5" pos:end="61:20">qdev_init_nofail</name><argument_list pos:start="61:21" pos:end="61:25">(<argument pos:start="61:22" pos:end="61:24"><expr pos:start="61:22" pos:end="61:24"><name pos:start="61:22" pos:end="61:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:74">/* Make sure the first 3 serial ports are associated with a device. */</comment>

    <for pos:start="67:5" pos:end="79:5">for<control pos:start="67:8" pos:end="67:26">(<init pos:start="67:9" pos:end="67:14"><expr pos:start="67:9" pos:end="67:13"><name pos:start="67:9" pos:end="67:9">i</name> <operator pos:start="67:11" pos:end="67:11">=</operator> <literal type="number" pos:start="67:13" pos:end="67:13">0</literal></expr>;</init> <condition pos:start="67:16" pos:end="67:21"><expr pos:start="67:16" pos:end="67:20"><name pos:start="67:16" pos:end="67:16">i</name> <operator pos:start="67:18" pos:end="67:18">&lt;</operator> <literal type="number" pos:start="67:20" pos:end="67:20">3</literal></expr>;</condition> <incr pos:start="67:23" pos:end="67:25"><expr pos:start="67:23" pos:end="67:25"><name pos:start="67:23" pos:end="67:23">i</name><operator pos:start="67:24" pos:end="67:25">++</operator></expr></incr>)</control> <block pos:start="67:28" pos:end="79:5">{<block_content pos:start="69:9" pos:end="77:9">

        <if_stmt pos:start="69:9" pos:end="77:9"><if pos:start="69:9" pos:end="77:9">if <condition pos:start="69:12" pos:end="69:27">(<expr pos:start="69:13" pos:end="69:26"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:26"><name pos:start="69:14" pos:end="69:23">serial_hds</name><index pos:start="69:24" pos:end="69:26">[<expr pos:start="69:25" pos:end="69:25"><name pos:start="69:25" pos:end="69:25">i</name></expr>]</index></name></expr>)</condition> <block pos:start="69:29" pos:end="77:9">{<block_content pos:start="71:13" pos:end="75:62">

            <decl_stmt pos:start="71:13" pos:end="71:27"><decl pos:start="71:13" pos:end="71:26"><type pos:start="71:13" pos:end="71:16"><name pos:start="71:13" pos:end="71:16">char</name></type> <name pos:start="71:18" pos:end="71:26"><name pos:start="71:18" pos:end="71:22">label</name><index pos:start="71:23" pos:end="71:26">[<expr pos:start="71:24" pos:end="71:25"><literal type="number" pos:start="71:24" pos:end="71:25">32</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:58"><expr pos:start="73:13" pos:end="73:57"><call pos:start="73:13" pos:end="73:57"><name pos:start="73:13" pos:end="73:20">snprintf</name><argument_list pos:start="73:21" pos:end="73:57">(<argument pos:start="73:22" pos:end="73:26"><expr pos:start="73:22" pos:end="73:26"><name pos:start="73:22" pos:end="73:26">label</name></expr></argument>, <argument pos:start="73:29" pos:end="73:41"><expr pos:start="73:29" pos:end="73:41"><sizeof pos:start="73:29" pos:end="73:41">sizeof<argument_list pos:start="73:35" pos:end="73:41">(<argument pos:start="73:36" pos:end="73:40"><expr pos:start="73:36" pos:end="73:40"><name pos:start="73:36" pos:end="73:40">label</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="73:44" pos:end="73:53"><expr pos:start="73:44" pos:end="73:53"><literal type="string" pos:start="73:44" pos:end="73:53">"serial%d"</literal></expr></argument>, <argument pos:start="73:56" pos:end="73:56"><expr pos:start="73:56" pos:end="73:56"><name pos:start="73:56" pos:end="73:56">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:62"><expr pos:start="75:13" pos:end="75:61"><name pos:start="75:13" pos:end="75:25"><name pos:start="75:13" pos:end="75:22">serial_hds</name><index pos:start="75:23" pos:end="75:25">[<expr pos:start="75:24" pos:end="75:24"><name pos:start="75:24" pos:end="75:24">i</name></expr>]</index></name> <operator pos:start="75:27" pos:end="75:27">=</operator> <call pos:start="75:29" pos:end="75:61"><name pos:start="75:29" pos:end="75:40">qemu_chr_new</name><argument_list pos:start="75:41" pos:end="75:61">(<argument pos:start="75:42" pos:end="75:46"><expr pos:start="75:42" pos:end="75:46"><name pos:start="75:42" pos:end="75:46">label</name></expr></argument>, <argument pos:start="75:49" pos:end="75:54"><expr pos:start="75:49" pos:end="75:54"><literal type="string" pos:start="75:49" pos:end="75:54">"null"</literal></expr></argument>, <argument pos:start="75:57" pos:end="75:60"><expr pos:start="75:57" pos:end="75:60"><name pos:start="75:57" pos:end="75:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="83:5" pos:end="83:19">/* init CPUs */</comment>

    <if_stmt pos:start="85:5" pos:end="97:5"><if pos:start="85:5" pos:end="97:5">if <condition pos:start="85:8" pos:end="85:26">(<expr pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:17">cpu_model</name> <operator pos:start="85:19" pos:end="85:20">==</operator> <name pos:start="85:22" pos:end="85:25">NULL</name></expr>)</condition> <block pos:start="85:28" pos:end="97:5">{<block_content pos:start="89:9" pos:end="96:0">

<cpp:ifdef pos:start="87:1" pos:end="87:20">#<cpp:directive pos:start="87:2" pos:end="87:6">ifdef</cpp:directive> <name pos:start="87:8" pos:end="87:20">TARGET_MIPS64</name></cpp:ifdef>

        <expr_stmt pos:start="89:9" pos:end="92:0"><expr pos:start="89:9" pos:end="89:26"><name pos:start="89:9" pos:end="89:17">cpu_model</name> <operator pos:start="89:19" pos:end="89:19">=</operator> <literal type="string" pos:start="89:21" pos:end="89:26">"20Kc"</literal></expr>;</expr_stmt>

<cpp:else pos:start="91:1" pos:end="91:5">#<cpp:directive pos:start="91:2" pos:end="91:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="93:9" pos:end="96:0"><expr pos:start="93:9" pos:end="93:26"><name pos:start="93:9" pos:end="93:17">cpu_model</name> <operator pos:start="93:19" pos:end="93:19">=</operator> <literal type="string" pos:start="93:21" pos:end="93:26">"24Kf"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <for pos:start="101:5" pos:end="121:5">for <control pos:start="101:9" pos:end="101:34">(<init pos:start="101:10" pos:end="101:15"><expr pos:start="101:10" pos:end="101:14"><name pos:start="101:10" pos:end="101:10">i</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <literal type="number" pos:start="101:14" pos:end="101:14">0</literal></expr>;</init> <condition pos:start="101:17" pos:end="101:29"><expr pos:start="101:17" pos:end="101:28"><name pos:start="101:17" pos:end="101:17">i</name> <operator pos:start="101:19" pos:end="101:19">&lt;</operator> <name pos:start="101:21" pos:end="101:28">smp_cpus</name></expr>;</condition> <incr pos:start="101:31" pos:end="101:33"><expr pos:start="101:31" pos:end="101:33"><name pos:start="101:31" pos:end="101:31">i</name><operator pos:start="101:32" pos:end="101:33">++</operator></expr></incr>)</control> <block pos:start="101:36" pos:end="121:5">{<block_content pos:start="103:9" pos:end="119:49">

        <expr_stmt pos:start="103:9" pos:end="103:34"><expr pos:start="103:9" pos:end="103:33"><name pos:start="103:9" pos:end="103:11">env</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:33"><name pos:start="103:15" pos:end="103:22">cpu_init</name><argument_list pos:start="103:23" pos:end="103:33">(<argument pos:start="103:24" pos:end="103:32"><expr pos:start="103:24" pos:end="103:32"><name pos:start="103:24" pos:end="103:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:17">(<expr pos:start="105:13" pos:end="105:16"><operator pos:start="105:13" pos:end="105:13">!</operator><name pos:start="105:14" pos:end="105:16">env</name></expr>)</condition> <block pos:start="105:19" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:20">

            <expr_stmt pos:start="107:13" pos:end="107:63"><expr pos:start="107:13" pos:end="107:62"><call pos:start="107:13" pos:end="107:62"><name pos:start="107:13" pos:end="107:19">fprintf</name><argument_list pos:start="107:20" pos:end="107:62">(<argument pos:start="107:21" pos:end="107:26"><expr pos:start="107:21" pos:end="107:26"><name pos:start="107:21" pos:end="107:26">stderr</name></expr></argument>, <argument pos:start="107:29" pos:end="107:61"><expr pos:start="107:29" pos:end="107:61"><literal type="string" pos:start="107:29" pos:end="107:61">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:20"><expr pos:start="109:13" pos:end="109:19"><call pos:start="109:13" pos:end="109:19"><name pos:start="109:13" pos:end="109:16">exit</name><argument_list pos:start="109:17" pos:end="109:19">(<argument pos:start="109:18" pos:end="109:18"><expr pos:start="109:18" pos:end="109:18"><literal type="number" pos:start="109:18" pos:end="109:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="113:9" pos:end="113:35">/* Init internal devices */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:35"><expr pos:start="115:9" pos:end="115:34"><call pos:start="115:9" pos:end="115:34"><name pos:start="115:9" pos:end="115:29">cpu_mips_irq_init_cpu</name><argument_list pos:start="115:30" pos:end="115:34">(<argument pos:start="115:31" pos:end="115:33"><expr pos:start="115:31" pos:end="115:33"><name pos:start="115:31" pos:end="115:33">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:33"><expr pos:start="117:9" pos:end="117:32"><call pos:start="117:9" pos:end="117:32"><name pos:start="117:9" pos:end="117:27">cpu_mips_clock_init</name><argument_list pos:start="117:28" pos:end="117:32">(<argument pos:start="117:29" pos:end="117:31"><expr pos:start="117:29" pos:end="117:31"><name pos:start="117:29" pos:end="117:31">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:49"><expr pos:start="119:9" pos:end="119:48"><call pos:start="119:9" pos:end="119:48"><name pos:start="119:9" pos:end="119:27">qemu_register_reset</name><argument_list pos:start="119:28" pos:end="119:48">(<argument pos:start="119:29" pos:end="119:42"><expr pos:start="119:29" pos:end="119:42"><name pos:start="119:29" pos:end="119:42">main_cpu_reset</name></expr></argument>, <argument pos:start="119:45" pos:end="119:47"><expr pos:start="119:45" pos:end="119:47"><name pos:start="119:45" pos:end="119:47">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="123:5" pos:end="123:20"><expr pos:start="123:5" pos:end="123:19"><name pos:start="123:5" pos:end="123:7">env</name> <operator pos:start="123:9" pos:end="123:9">=</operator> <name pos:start="123:11" pos:end="123:19">first_cpu</name></expr>;</expr_stmt>



    <comment type="block" pos:start="127:5" pos:end="127:22">/* allocate RAM */</comment>

    <if_stmt pos:start="129:5" pos:end="139:5"><if pos:start="129:5" pos:end="139:5">if <condition pos:start="129:8" pos:end="129:31">(<expr pos:start="129:9" pos:end="129:30"><name pos:start="129:9" pos:end="129:16">ram_size</name> <operator pos:start="129:18" pos:end="129:18">&gt;</operator> <operator pos:start="129:20" pos:end="129:20">(</operator><literal type="number" pos:start="129:21" pos:end="129:23">256</literal> <operator pos:start="129:25" pos:end="129:26">&lt;&lt;</operator> <literal type="number" pos:start="129:28" pos:end="129:29">20</literal><operator pos:start="129:30" pos:end="129:30">)</operator></expr>)</condition> <block pos:start="129:33" pos:end="139:5">{<block_content pos:start="131:9" pos:end="137:16">

        <expr_stmt pos:start="131:9" pos:end="135:54"><expr pos:start="131:9" pos:end="135:53"><call pos:start="131:9" pos:end="135:53"><name pos:start="131:9" pos:end="131:15">fprintf</name><argument_list pos:start="131:16" pos:end="135:53">(<argument pos:start="131:17" pos:end="131:22"><expr pos:start="131:17" pos:end="131:22"><name pos:start="131:17" pos:end="131:22">stderr</name></expr></argument>,

                <argument pos:start="133:17" pos:end="133:81"><expr pos:start="133:17" pos:end="133:81"><literal type="string" pos:start="133:17" pos:end="133:81">"qemu: Too much memory for this machine: %d MB, maximum 256 MB\n"</literal></expr></argument>,

                <argument pos:start="135:17" pos:end="135:52"><expr pos:start="135:17" pos:end="135:52"><operator pos:start="135:17" pos:end="135:17">(</operator><operator pos:start="135:18" pos:end="135:18">(</operator><name pos:start="135:19" pos:end="135:26">unsigned</name> <name pos:start="135:28" pos:end="135:30">int</name><operator pos:start="135:31" pos:end="135:31">)</operator><name pos:start="135:32" pos:end="135:39">ram_size</name> <operator pos:start="135:41" pos:end="135:41">/</operator> <operator pos:start="135:43" pos:end="135:43">(</operator><literal type="number" pos:start="135:44" pos:end="135:44">1</literal> <operator pos:start="135:46" pos:end="135:47">&lt;&lt;</operator> <literal type="number" pos:start="135:49" pos:end="135:50">20</literal><operator pos:start="135:51" pos:end="135:51">)</operator><operator pos:start="135:52" pos:end="135:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:16"><expr pos:start="137:9" pos:end="137:15"><call pos:start="137:9" pos:end="137:15"><name pos:start="137:9" pos:end="137:12">exit</name><argument_list pos:start="137:13" pos:end="137:15">(<argument pos:start="137:14" pos:end="137:14"><expr pos:start="137:14" pos:end="137:14"><literal type="number" pos:start="137:14" pos:end="137:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:60"><expr pos:start="141:5" pos:end="141:59"><call pos:start="141:5" pos:end="141:59"><name pos:start="141:5" pos:end="141:26">memory_region_init_ram</name><argument_list pos:start="141:27" pos:end="141:59">(<argument pos:start="141:28" pos:end="141:30"><expr pos:start="141:28" pos:end="141:30"><name pos:start="141:28" pos:end="141:30">ram</name></expr></argument>, <argument pos:start="141:33" pos:end="141:48"><expr pos:start="141:33" pos:end="141:48"><literal type="string" pos:start="141:33" pos:end="141:48">"mips_malta.ram"</literal></expr></argument>, <argument pos:start="141:51" pos:end="141:58"><expr pos:start="141:51" pos:end="141:58"><name pos:start="141:51" pos:end="141:58">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:37"><expr pos:start="143:5" pos:end="143:36"><call pos:start="143:5" pos:end="143:36"><name pos:start="143:5" pos:end="143:31">vmstate_register_ram_global</name><argument_list pos:start="143:32" pos:end="143:36">(<argument pos:start="143:33" pos:end="143:35"><expr pos:start="143:33" pos:end="143:35"><name pos:start="143:33" pos:end="143:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="150:0"><expr pos:start="145:5" pos:end="145:54"><call pos:start="145:5" pos:end="145:54"><name pos:start="145:5" pos:end="145:31">memory_region_add_subregion</name><argument_list pos:start="145:32" pos:end="145:54">(<argument pos:start="145:33" pos:end="145:45"><expr pos:start="145:33" pos:end="145:45"><name pos:start="145:33" pos:end="145:45">system_memory</name></expr></argument>, <argument pos:start="145:48" pos:end="145:48"><expr pos:start="145:48" pos:end="145:48"><literal type="number" pos:start="145:48" pos:end="145:48">0</literal></expr></argument>, <argument pos:start="145:51" pos:end="145:53"><expr pos:start="145:51" pos:end="145:53"><name pos:start="145:51" pos:end="145:53">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="149:1" pos:end="149:29">#<cpp:directive pos:start="149:2" pos:end="149:6">ifdef</cpp:directive> <name pos:start="149:8" pos:end="149:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="151:5" pos:end="154:0"><expr pos:start="151:5" pos:end="151:10"><name pos:start="151:5" pos:end="151:6">be</name> <operator pos:start="151:8" pos:end="151:8">=</operator> <literal type="number" pos:start="151:10" pos:end="151:10">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="153:1" pos:end="153:5">#<cpp:directive pos:start="153:2" pos:end="153:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="155:5" pos:end="158:0"><expr pos:start="155:5" pos:end="155:10"><name pos:start="155:5" pos:end="155:6">be</name> <operator pos:start="155:8" pos:end="155:8">=</operator> <literal type="number" pos:start="155:10" pos:end="155:10">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="157:1" pos:end="157:6">#<cpp:directive pos:start="157:2" pos:end="157:6">endif</cpp:directive></cpp:endif>

    <comment type="block" pos:start="159:5" pos:end="159:14">/* FPGA */</comment>

    <expr_stmt pos:start="161:5" pos:end="161:77"><expr pos:start="161:5" pos:end="161:76"><call pos:start="161:5" pos:end="161:76"><name pos:start="161:5" pos:end="161:19">malta_fpga_init</name><argument_list pos:start="161:20" pos:end="161:76">(<argument pos:start="161:21" pos:end="161:33"><expr pos:start="161:21" pos:end="161:33"><name pos:start="161:21" pos:end="161:33">system_memory</name></expr></argument>, <argument pos:start="161:36" pos:end="161:47"><expr pos:start="161:36" pos:end="161:47"><literal type="number" pos:start="161:36" pos:end="161:47">0x1f000000LL</literal></expr></argument>, <argument pos:start="161:50" pos:end="161:60"><expr pos:start="161:50" pos:end="161:60"><name pos:start="161:50" pos:end="161:60"><name pos:start="161:50" pos:end="161:52">env</name><operator pos:start="161:53" pos:end="161:54">-&gt;</operator><name pos:start="161:55" pos:end="161:57">irq</name><index pos:start="161:58" pos:end="161:60">[<expr pos:start="161:59" pos:end="161:59"><literal type="number" pos:start="161:59" pos:end="161:59">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="161:63" pos:end="161:75"><expr pos:start="161:63" pos:end="161:75"><name pos:start="161:63" pos:end="161:75"><name pos:start="161:63" pos:end="161:72">serial_hds</name><index pos:start="161:73" pos:end="161:75">[<expr pos:start="161:74" pos:end="161:74"><literal type="number" pos:start="161:74" pos:end="161:74">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="165:5" pos:end="165:78">/* Load firmware in flash / BIOS unless we boot directly into a kernel. */</comment>

    <if_stmt pos:start="167:5" pos:end="327:5"><if pos:start="167:5" pos:end="199:5">if <condition pos:start="167:8" pos:end="167:24">(<expr pos:start="167:9" pos:end="167:23"><name pos:start="167:9" pos:end="167:23">kernel_filename</name></expr>)</condition> <block pos:start="167:26" pos:end="199:5">{<block_content pos:start="171:9" pos:end="197:77">

        <comment type="block" pos:start="169:9" pos:end="169:61">/* Write a small bootloader to the flash location. */</comment>

        <expr_stmt pos:start="171:9" pos:end="171:38"><expr pos:start="171:9" pos:end="171:37"><name pos:start="171:9" pos:end="171:12">bios</name> <operator pos:start="171:14" pos:end="171:14">=</operator> <call pos:start="171:16" pos:end="171:37"><name pos:start="171:16" pos:end="171:20">g_new</name><argument_list pos:start="171:21" pos:end="171:37">(<argument pos:start="171:22" pos:end="171:33"><expr pos:start="171:22" pos:end="171:33"><name pos:start="171:22" pos:end="171:33">MemoryRegion</name></expr></argument>, <argument pos:start="171:36" pos:end="171:36"><expr pos:start="171:36" pos:end="171:36"><literal type="number" pos:start="171:36" pos:end="171:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:67"><expr pos:start="173:9" pos:end="173:66"><call pos:start="173:9" pos:end="173:66"><name pos:start="173:9" pos:end="173:30">memory_region_init_ram</name><argument_list pos:start="173:31" pos:end="173:66">(<argument pos:start="173:32" pos:end="173:35"><expr pos:start="173:32" pos:end="173:35"><name pos:start="173:32" pos:end="173:35">bios</name></expr></argument>, <argument pos:start="173:38" pos:end="173:54"><expr pos:start="173:38" pos:end="173:54"><literal type="string" pos:start="173:38" pos:end="173:54">"mips_malta.bios"</literal></expr></argument>, <argument pos:start="173:57" pos:end="173:65"><expr pos:start="173:57" pos:end="173:65"><name pos:start="173:57" pos:end="173:65">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:42"><expr pos:start="175:9" pos:end="175:41"><call pos:start="175:9" pos:end="175:41"><name pos:start="175:9" pos:end="175:35">vmstate_register_ram_global</name><argument_list pos:start="175:36" pos:end="175:41">(<argument pos:start="175:37" pos:end="175:40"><expr pos:start="175:37" pos:end="175:40"><name pos:start="175:37" pos:end="175:40">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:47"><expr pos:start="177:9" pos:end="177:46"><call pos:start="177:9" pos:end="177:46"><name pos:start="177:9" pos:end="177:34">memory_region_set_readonly</name><argument_list pos:start="177:35" pos:end="177:46">(<argument pos:start="177:36" pos:end="177:39"><expr pos:start="177:36" pos:end="177:39"><name pos:start="177:36" pos:end="177:39">bios</name></expr></argument>, <argument pos:start="177:42" pos:end="177:45"><expr pos:start="177:42" pos:end="177:45"><name pos:start="177:42" pos:end="177:45">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:77"><expr pos:start="179:9" pos:end="179:76"><call pos:start="179:9" pos:end="179:76"><name pos:start="179:9" pos:end="179:32">memory_region_init_alias</name><argument_list pos:start="179:33" pos:end="179:76">(<argument pos:start="179:34" pos:end="179:43"><expr pos:start="179:34" pos:end="179:43"><name pos:start="179:34" pos:end="179:43">bios_alias</name></expr></argument>, <argument pos:start="179:46" pos:end="179:55"><expr pos:start="179:46" pos:end="179:55"><literal type="string" pos:start="179:46" pos:end="179:55">"bios.1fc"</literal></expr></argument>, <argument pos:start="179:58" pos:end="179:61"><expr pos:start="179:58" pos:end="179:61"><name pos:start="179:58" pos:end="179:61">bios</name></expr></argument>, <argument pos:start="179:64" pos:end="179:64"><expr pos:start="179:64" pos:end="179:64"><literal type="number" pos:start="179:64" pos:end="179:64">0</literal></expr></argument>, <argument pos:start="179:67" pos:end="179:75"><expr pos:start="179:67" pos:end="179:75"><name pos:start="179:67" pos:end="179:75">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="181:9" pos:end="181:75">/* Map the bios at two physical locations, as on the real board. */</comment>

        <expr_stmt pos:start="183:9" pos:end="183:71"><expr pos:start="183:9" pos:end="183:70"><call pos:start="183:9" pos:end="183:70"><name pos:start="183:9" pos:end="183:35">memory_region_add_subregion</name><argument_list pos:start="183:36" pos:end="183:70">(<argument pos:start="183:37" pos:end="183:49"><expr pos:start="183:37" pos:end="183:49"><name pos:start="183:37" pos:end="183:49">system_memory</name></expr></argument>, <argument pos:start="183:52" pos:end="183:63"><expr pos:start="183:52" pos:end="183:63"><literal type="number" pos:start="183:52" pos:end="183:63">0x1e000000LL</literal></expr></argument>, <argument pos:start="183:66" pos:end="183:69"><expr pos:start="183:66" pos:end="183:69"><name pos:start="183:66" pos:end="183:69">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:77"><expr pos:start="185:9" pos:end="185:76"><call pos:start="185:9" pos:end="185:76"><name pos:start="185:9" pos:end="185:35">memory_region_add_subregion</name><argument_list pos:start="185:36" pos:end="185:76">(<argument pos:start="185:37" pos:end="185:49"><expr pos:start="185:37" pos:end="185:49"><name pos:start="185:37" pos:end="185:49">system_memory</name></expr></argument>, <argument pos:start="185:52" pos:end="185:63"><expr pos:start="185:52" pos:end="185:63"><literal type="number" pos:start="185:52" pos:end="185:63">0x1fc00000LL</literal></expr></argument>, <argument pos:start="185:66" pos:end="185:75"><expr pos:start="185:66" pos:end="185:75"><name pos:start="185:66" pos:end="185:75">bios_alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:41"><expr pos:start="187:9" pos:end="187:40"><name pos:start="187:9" pos:end="187:29"><name pos:start="187:9" pos:end="187:20">loaderparams</name><operator pos:start="187:21" pos:end="187:21">.</operator><name pos:start="187:22" pos:end="187:29">ram_size</name></name> <operator pos:start="187:31" pos:end="187:31">=</operator> <name pos:start="187:33" pos:end="187:40">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:55"><expr pos:start="189:9" pos:end="189:54"><name pos:start="189:9" pos:end="189:36"><name pos:start="189:9" pos:end="189:20">loaderparams</name><operator pos:start="189:21" pos:end="189:21">.</operator><name pos:start="189:22" pos:end="189:36">kernel_filename</name></name> <operator pos:start="189:38" pos:end="189:38">=</operator> <name pos:start="189:40" pos:end="189:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="191:53"><expr pos:start="191:9" pos:end="191:52"><name pos:start="191:9" pos:end="191:35"><name pos:start="191:9" pos:end="191:20">loaderparams</name><operator pos:start="191:21" pos:end="191:21">.</operator><name pos:start="191:22" pos:end="191:35">kernel_cmdline</name></name> <operator pos:start="191:37" pos:end="191:37">=</operator> <name pos:start="191:39" pos:end="191:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:55"><expr pos:start="193:9" pos:end="193:54"><name pos:start="193:9" pos:end="193:36"><name pos:start="193:9" pos:end="193:20">loaderparams</name><operator pos:start="193:21" pos:end="193:21">.</operator><name pos:start="193:22" pos:end="193:36">initrd_filename</name></name> <operator pos:start="193:38" pos:end="193:38">=</operator> <name pos:start="193:40" pos:end="193:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:37"><expr pos:start="195:9" pos:end="195:36"><name pos:start="195:9" pos:end="195:20">kernel_entry</name> <operator pos:start="195:22" pos:end="195:22">=</operator> <call pos:start="195:24" pos:end="195:36"><name pos:start="195:24" pos:end="195:34">load_kernel</name><argument_list pos:start="195:35" pos:end="195:36">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:77"><expr pos:start="197:9" pos:end="197:76"><call pos:start="197:9" pos:end="197:76"><name pos:start="197:9" pos:end="197:24">write_bootloader</name><argument_list pos:start="197:25" pos:end="197:76">(<argument pos:start="197:26" pos:end="197:28"><expr pos:start="197:26" pos:end="197:28"><name pos:start="197:26" pos:end="197:28">env</name></expr></argument>, <argument pos:start="197:31" pos:end="197:61"><expr pos:start="197:31" pos:end="197:61"><call pos:start="197:31" pos:end="197:61"><name pos:start="197:31" pos:end="197:55">memory_region_get_ram_ptr</name><argument_list pos:start="197:56" pos:end="197:61">(<argument pos:start="197:57" pos:end="197:60"><expr pos:start="197:57" pos:end="197:60"><name pos:start="197:57" pos:end="197:60">bios</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="197:64" pos:end="197:75"><expr pos:start="197:64" pos:end="197:75"><name pos:start="197:64" pos:end="197:75">kernel_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="199:7" pos:end="327:5">else <block pos:start="199:12" pos:end="327:5">{<block_content pos:start="201:9" pos:end="326:0">

        <expr_stmt pos:start="201:9" pos:end="201:48"><expr pos:start="201:9" pos:end="201:47"><name pos:start="201:9" pos:end="201:13">dinfo</name> <operator pos:start="201:15" pos:end="201:15">=</operator> <call pos:start="201:17" pos:end="201:47"><name pos:start="201:17" pos:end="201:25">drive_get</name><argument_list pos:start="201:26" pos:end="201:47">(<argument pos:start="201:27" pos:end="201:35"><expr pos:start="201:27" pos:end="201:35"><name pos:start="201:27" pos:end="201:35">IF_PFLASH</name></expr></argument>, <argument pos:start="201:38" pos:end="201:38"><expr pos:start="201:38" pos:end="201:38"><literal type="number" pos:start="201:38" pos:end="201:38">0</literal></expr></argument>, <argument pos:start="201:41" pos:end="201:46"><expr pos:start="201:41" pos:end="201:46"><name pos:start="201:41" pos:end="201:46">fl_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="203:9" pos:end="308:0"><if pos:start="203:9" pos:end="245:9">if <condition pos:start="203:12" pos:end="203:18">(<expr pos:start="203:13" pos:end="203:17"><name pos:start="203:13" pos:end="203:17">dinfo</name></expr>)</condition> <block pos:start="203:20" pos:end="245:9">{<block_content pos:start="207:13" pos:end="243:20">

            <comment type="block" pos:start="205:13" pos:end="205:43">/* Load firmware from flash. */</comment>

            <expr_stmt pos:start="207:13" pos:end="207:33"><expr pos:start="207:13" pos:end="207:32"><name pos:start="207:13" pos:end="207:21">bios_size</name> <operator pos:start="207:23" pos:end="207:23">=</operator> <literal type="number" pos:start="207:25" pos:end="207:32">0x400000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="212:0"><expr pos:start="209:13" pos:end="209:40"><name pos:start="209:13" pos:end="209:22">fl_sectors</name> <operator pos:start="209:24" pos:end="209:24">=</operator> <name pos:start="209:26" pos:end="209:34">bios_size</name> <operator pos:start="209:36" pos:end="209:37">&gt;&gt;</operator> <literal type="number" pos:start="209:39" pos:end="209:40">16</literal></expr>;</expr_stmt>

<cpp:ifdef pos:start="211:1" pos:end="211:23">#<cpp:directive pos:start="211:2" pos:end="211:6">ifdef</cpp:directive> <name pos:start="211:8" pos:end="211:23">DEBUG_BOARD_INIT</name></cpp:ifdef>

            <expr_stmt pos:start="213:13" pos:end="222:0"><expr pos:start="213:13" pos:end="219:65"><call pos:start="213:13" pos:end="219:65"><name pos:start="213:13" pos:end="213:18">printf</name><argument_list pos:start="213:19" pos:end="219:65">(<argument pos:start="213:20" pos:end="215:42"><expr pos:start="213:20" pos:end="215:42"><literal type="string" pos:start="213:20" pos:end="213:53">"Register parallel flash %d size "</literal> <name pos:start="213:55" pos:end="213:67">TARGET_FMT_lx</name> <literal type="string" pos:start="213:69" pos:end="213:74">" at "</literal>

                   <literal type="string" pos:start="215:20" pos:end="215:42">"addr %08llx '%s' %x\n"</literal></expr></argument>,

                   <argument pos:start="217:20" pos:end="217:25"><expr pos:start="217:20" pos:end="217:25"><name pos:start="217:20" pos:end="217:25">fl_idx</name></expr></argument>, <argument pos:start="217:28" pos:end="217:36"><expr pos:start="217:28" pos:end="217:36"><name pos:start="217:28" pos:end="217:36">bios_size</name></expr></argument>, <argument pos:start="217:39" pos:end="217:50"><expr pos:start="217:39" pos:end="217:50"><literal type="number" pos:start="217:39" pos:end="217:50">0x1e000000LL</literal></expr></argument>,

                   <argument pos:start="219:20" pos:end="219:52"><expr pos:start="219:20" pos:end="219:52"><call pos:start="219:20" pos:end="219:52"><name pos:start="219:20" pos:end="219:39">bdrv_get_device_name</name><argument_list pos:start="219:40" pos:end="219:52">(<argument pos:start="219:41" pos:end="219:51"><expr pos:start="219:41" pos:end="219:51"><name pos:start="219:41" pos:end="219:51"><name pos:start="219:41" pos:end="219:45">dinfo</name><operator pos:start="219:46" pos:end="219:47">-&gt;</operator><name pos:start="219:48" pos:end="219:51">bdrv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="219:55" pos:end="219:64"><expr pos:start="219:55" pos:end="219:64"><name pos:start="219:55" pos:end="219:64">fl_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="221:1" pos:end="221:6">#<cpp:directive pos:start="221:2" pos:end="221:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="223:13" pos:end="229:78"><expr pos:start="223:13" pos:end="229:77"><name pos:start="223:13" pos:end="223:14">fl</name> <operator pos:start="223:16" pos:end="223:16">=</operator> <call pos:start="223:18" pos:end="229:77"><name pos:start="223:18" pos:end="223:38">pflash_cfi01_register</name><argument_list pos:start="223:39" pos:end="229:77">(<argument pos:start="223:40" pos:end="223:51"><expr pos:start="223:40" pos:end="223:51"><literal type="number" pos:start="223:40" pos:end="223:51">0x1e000000LL</literal></expr></argument>,

                                       <argument pos:start="225:40" pos:end="225:43"><expr pos:start="225:40" pos:end="225:43"><name pos:start="225:40" pos:end="225:43">NULL</name></expr></argument>, <argument pos:start="225:46" pos:end="225:62"><expr pos:start="225:46" pos:end="225:62"><literal type="string" pos:start="225:46" pos:end="225:62">"mips_malta.bios"</literal></expr></argument>, <argument pos:start="225:65" pos:end="225:73"><expr pos:start="225:65" pos:end="225:73"><name pos:start="225:65" pos:end="225:73">BIOS_SIZE</name></expr></argument>,

                                       <argument pos:start="227:40" pos:end="227:50"><expr pos:start="227:40" pos:end="227:50"><name pos:start="227:40" pos:end="227:50"><name pos:start="227:40" pos:end="227:44">dinfo</name><operator pos:start="227:45" pos:end="227:46">-&gt;</operator><name pos:start="227:47" pos:end="227:50">bdrv</name></name></expr></argument>, <argument pos:start="227:53" pos:end="227:57"><expr pos:start="227:53" pos:end="227:57"><literal type="number" pos:start="227:53" pos:end="227:57">65536</literal></expr></argument>, <argument pos:start="227:60" pos:end="227:69"><expr pos:start="227:60" pos:end="227:69"><name pos:start="227:60" pos:end="227:69">fl_sectors</name></expr></argument>,

                                       <argument pos:start="229:40" pos:end="229:40"><expr pos:start="229:40" pos:end="229:40"><literal type="number" pos:start="229:40" pos:end="229:40">4</literal></expr></argument>, <argument pos:start="229:43" pos:end="229:48"><expr pos:start="229:43" pos:end="229:48"><literal type="number" pos:start="229:43" pos:end="229:48">0x0000</literal></expr></argument>, <argument pos:start="229:51" pos:end="229:56"><expr pos:start="229:51" pos:end="229:56"><literal type="number" pos:start="229:51" pos:end="229:56">0x0000</literal></expr></argument>, <argument pos:start="229:59" pos:end="229:64"><expr pos:start="229:59" pos:end="229:64"><literal type="number" pos:start="229:59" pos:end="229:64">0x0000</literal></expr></argument>, <argument pos:start="229:67" pos:end="229:72"><expr pos:start="229:67" pos:end="229:72"><literal type="number" pos:start="229:67" pos:end="229:72">0x0000</literal></expr></argument>, <argument pos:start="229:75" pos:end="229:76"><expr pos:start="229:75" pos:end="229:76"><name pos:start="229:75" pos:end="229:76">be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:47"><expr pos:start="231:13" pos:end="231:46"><name pos:start="231:13" pos:end="231:16">bios</name> <operator pos:start="231:18" pos:end="231:18">=</operator> <call pos:start="231:20" pos:end="231:46"><name pos:start="231:20" pos:end="231:42">pflash_cfi01_get_memory</name><argument_list pos:start="231:43" pos:end="231:46">(<argument pos:start="231:44" pos:end="231:45"><expr pos:start="231:44" pos:end="231:45"><name pos:start="231:44" pos:end="231:45">fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="233:13" pos:end="233:79">/* Map the bios at two physical locations, as on the real board. */</comment>

            <expr_stmt pos:start="235:13" pos:end="237:57"><expr pos:start="235:13" pos:end="237:56"><call pos:start="235:13" pos:end="237:56"><name pos:start="235:13" pos:end="235:36">memory_region_init_alias</name><argument_list pos:start="235:37" pos:end="237:56">(<argument pos:start="235:38" pos:end="235:47"><expr pos:start="235:38" pos:end="235:47"><name pos:start="235:38" pos:end="235:47">bios_alias</name></expr></argument>, <argument pos:start="235:50" pos:end="235:59"><expr pos:start="235:50" pos:end="235:59"><literal type="string" pos:start="235:50" pos:end="235:59">"bios.1fc"</literal></expr></argument>,

                                     <argument pos:start="237:38" pos:end="237:41"><expr pos:start="237:38" pos:end="237:41"><name pos:start="237:38" pos:end="237:41">bios</name></expr></argument>, <argument pos:start="237:44" pos:end="237:44"><expr pos:start="237:44" pos:end="237:44"><literal type="number" pos:start="237:44" pos:end="237:44">0</literal></expr></argument>, <argument pos:start="237:47" pos:end="237:55"><expr pos:start="237:47" pos:end="237:55"><name pos:start="237:47" pos:end="237:55">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="241:52"><expr pos:start="239:13" pos:end="241:51"><call pos:start="239:13" pos:end="241:51"><name pos:start="239:13" pos:end="239:39">memory_region_add_subregion</name><argument_list pos:start="239:40" pos:end="241:51">(<argument pos:start="239:41" pos:end="239:53"><expr pos:start="239:41" pos:end="239:53"><name pos:start="239:41" pos:end="239:53">system_memory</name></expr></argument>, <argument pos:start="239:56" pos:end="239:67"><expr pos:start="239:56" pos:end="239:67"><literal type="number" pos:start="239:56" pos:end="239:67">0x1fc00000LL</literal></expr></argument>,

                                        <argument pos:start="241:41" pos:end="241:50"><expr pos:start="241:41" pos:end="241:50"><name pos:start="241:41" pos:end="241:50">bios_alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <expr_stmt pos:start="243:12" pos:end="243:20"><expr pos:start="243:12" pos:end="243:19"><name pos:start="243:12" pos:end="243:17">fl_idx</name><operator pos:start="243:18" pos:end="243:19">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="245:11" pos:end="308:0">else <block pos:start="245:16" pos:end="308:0">{<block_content pos:start="247:13" pos:end="299:13">

            <expr_stmt pos:start="247:13" pos:end="247:42"><expr pos:start="247:13" pos:end="247:41"><name pos:start="247:13" pos:end="247:16">bios</name> <operator pos:start="247:18" pos:end="247:18">=</operator> <call pos:start="247:20" pos:end="247:41"><name pos:start="247:20" pos:end="247:24">g_new</name><argument_list pos:start="247:25" pos:end="247:41">(<argument pos:start="247:26" pos:end="247:37"><expr pos:start="247:26" pos:end="247:37"><name pos:start="247:26" pos:end="247:37">MemoryRegion</name></expr></argument>, <argument pos:start="247:40" pos:end="247:40"><expr pos:start="247:40" pos:end="247:40"><literal type="number" pos:start="247:40" pos:end="247:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:71"><expr pos:start="249:13" pos:end="249:70"><call pos:start="249:13" pos:end="249:70"><name pos:start="249:13" pos:end="249:34">memory_region_init_ram</name><argument_list pos:start="249:35" pos:end="249:70">(<argument pos:start="249:36" pos:end="249:39"><expr pos:start="249:36" pos:end="249:39"><name pos:start="249:36" pos:end="249:39">bios</name></expr></argument>, <argument pos:start="249:42" pos:end="249:58"><expr pos:start="249:42" pos:end="249:58"><literal type="string" pos:start="249:42" pos:end="249:58">"mips_malta.bios"</literal></expr></argument>, <argument pos:start="249:61" pos:end="249:69"><expr pos:start="249:61" pos:end="249:69"><name pos:start="249:61" pos:end="249:69">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:46"><expr pos:start="251:13" pos:end="251:45"><call pos:start="251:13" pos:end="251:45"><name pos:start="251:13" pos:end="251:39">vmstate_register_ram_global</name><argument_list pos:start="251:40" pos:end="251:45">(<argument pos:start="251:41" pos:end="251:44"><expr pos:start="251:41" pos:end="251:44"><name pos:start="251:41" pos:end="251:44">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:51"><expr pos:start="253:13" pos:end="253:50"><call pos:start="253:13" pos:end="253:50"><name pos:start="253:13" pos:end="253:38">memory_region_set_readonly</name><argument_list pos:start="253:39" pos:end="253:50">(<argument pos:start="253:40" pos:end="253:43"><expr pos:start="253:40" pos:end="253:43"><name pos:start="253:40" pos:end="253:43">bios</name></expr></argument>, <argument pos:start="253:46" pos:end="253:49"><expr pos:start="253:46" pos:end="253:49"><name pos:start="253:46" pos:end="253:49">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="257:57"><expr pos:start="255:13" pos:end="257:56"><call pos:start="255:13" pos:end="257:56"><name pos:start="255:13" pos:end="255:36">memory_region_init_alias</name><argument_list pos:start="255:37" pos:end="257:56">(<argument pos:start="255:38" pos:end="255:47"><expr pos:start="255:38" pos:end="255:47"><name pos:start="255:38" pos:end="255:47">bios_alias</name></expr></argument>, <argument pos:start="255:50" pos:end="255:59"><expr pos:start="255:50" pos:end="255:59"><literal type="string" pos:start="255:50" pos:end="255:59">"bios.1fc"</literal></expr></argument>,

                                     <argument pos:start="257:38" pos:end="257:41"><expr pos:start="257:38" pos:end="257:41"><name pos:start="257:38" pos:end="257:41">bios</name></expr></argument>, <argument pos:start="257:44" pos:end="257:44"><expr pos:start="257:44" pos:end="257:44"><literal type="number" pos:start="257:44" pos:end="257:44">0</literal></expr></argument>, <argument pos:start="257:47" pos:end="257:55"><expr pos:start="257:47" pos:end="257:55"><name pos:start="257:47" pos:end="257:55">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="259:13" pos:end="259:79">/* Map the bios at two physical locations, as on the real board. */</comment>

            <expr_stmt pos:start="261:13" pos:end="261:75"><expr pos:start="261:13" pos:end="261:74"><call pos:start="261:13" pos:end="261:74"><name pos:start="261:13" pos:end="261:39">memory_region_add_subregion</name><argument_list pos:start="261:40" pos:end="261:74">(<argument pos:start="261:41" pos:end="261:53"><expr pos:start="261:41" pos:end="261:53"><name pos:start="261:41" pos:end="261:53">system_memory</name></expr></argument>, <argument pos:start="261:56" pos:end="261:67"><expr pos:start="261:56" pos:end="261:67"><literal type="number" pos:start="261:56" pos:end="261:67">0x1e000000LL</literal></expr></argument>, <argument pos:start="261:70" pos:end="261:73"><expr pos:start="261:70" pos:end="261:73"><name pos:start="261:70" pos:end="261:73">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="265:52"><expr pos:start="263:13" pos:end="265:51"><call pos:start="263:13" pos:end="265:51"><name pos:start="263:13" pos:end="263:39">memory_region_add_subregion</name><argument_list pos:start="263:40" pos:end="265:51">(<argument pos:start="263:41" pos:end="263:53"><expr pos:start="263:41" pos:end="263:53"><name pos:start="263:41" pos:end="263:53">system_memory</name></expr></argument>, <argument pos:start="263:56" pos:end="263:67"><expr pos:start="263:56" pos:end="263:67"><literal type="number" pos:start="263:56" pos:end="263:67">0x1fc00000LL</literal></expr></argument>,

                                        <argument pos:start="265:41" pos:end="265:50"><expr pos:start="265:41" pos:end="265:50"><name pos:start="265:41" pos:end="265:50">bios_alias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="267:13" pos:end="267:36">/* Load a BIOS image. */</comment>

            <if_stmt pos:start="269:13" pos:end="271:42"><if pos:start="269:13" pos:end="271:42">if <condition pos:start="269:16" pos:end="269:34">(<expr pos:start="269:17" pos:end="269:33"><name pos:start="269:17" pos:end="269:25">bios_name</name> <operator pos:start="269:27" pos:end="269:28">==</operator> <name pos:start="269:30" pos:end="269:33">NULL</name></expr>)</condition><block type="pseudo" pos:start="271:17" pos:end="271:42"><block_content pos:start="271:17" pos:end="271:42">

                <expr_stmt pos:start="271:17" pos:end="271:42"><expr pos:start="271:17" pos:end="271:41"><name pos:start="271:17" pos:end="271:25">bios_name</name> <operator pos:start="271:27" pos:end="271:27">=</operator> <name pos:start="271:29" pos:end="271:41">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:70"><expr pos:start="273:13" pos:end="273:69"><name pos:start="273:13" pos:end="273:20">filename</name> <operator pos:start="273:22" pos:end="273:22">=</operator> <call pos:start="273:24" pos:end="273:69"><name pos:start="273:24" pos:end="273:37">qemu_find_file</name><argument_list pos:start="273:38" pos:end="273:69">(<argument pos:start="273:39" pos:end="273:57"><expr pos:start="273:39" pos:end="273:57"><name pos:start="273:39" pos:end="273:57">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="273:60" pos:end="273:68"><expr pos:start="273:60" pos:end="273:68"><name pos:start="273:60" pos:end="273:68">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="275:13" pos:end="287:13"><if pos:start="275:13" pos:end="283:13">if <condition pos:start="275:16" pos:end="275:25">(<expr pos:start="275:17" pos:end="275:24"><name pos:start="275:17" pos:end="275:24">filename</name></expr>)</condition> <block pos:start="275:27" pos:end="283:13">{<block_content pos:start="277:17" pos:end="281:33">

                <expr_stmt pos:start="277:17" pos:end="279:59"><expr pos:start="277:17" pos:end="279:58"><name pos:start="277:17" pos:end="277:25">bios_size</name> <operator pos:start="277:27" pos:end="277:27">=</operator> <call pos:start="277:29" pos:end="279:58"><name pos:start="277:29" pos:end="277:47">load_image_targphys</name><argument_list pos:start="277:48" pos:end="279:58">(<argument pos:start="277:49" pos:end="277:56"><expr pos:start="277:49" pos:end="277:56"><name pos:start="277:49" pos:end="277:56">filename</name></expr></argument>, <argument pos:start="277:59" pos:end="277:70"><expr pos:start="277:59" pos:end="277:70"><literal type="number" pos:start="277:59" pos:end="277:70">0x1fc00000LL</literal></expr></argument>,

                                                <argument pos:start="279:49" pos:end="279:57"><expr pos:start="279:49" pos:end="279:57"><name pos:start="279:49" pos:end="279:57">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="281:17" pos:end="281:33"><expr pos:start="281:17" pos:end="281:32"><call pos:start="281:17" pos:end="281:32"><name pos:start="281:17" pos:end="281:22">g_free</name><argument_list pos:start="281:23" pos:end="281:32">(<argument pos:start="281:24" pos:end="281:31"><expr pos:start="281:24" pos:end="281:31"><name pos:start="281:24" pos:end="281:31">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="283:15" pos:end="287:13">else <block pos:start="283:20" pos:end="287:13">{<block_content pos:start="285:17" pos:end="285:31">

                <expr_stmt pos:start="285:17" pos:end="285:31"><expr pos:start="285:17" pos:end="285:30"><name pos:start="285:17" pos:end="285:25">bios_size</name> <operator pos:start="285:27" pos:end="285:27">=</operator> <operator pos:start="285:29" pos:end="285:29">-</operator><literal type="number" pos:start="285:30" pos:end="285:30">1</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="289:13" pos:end="299:13"><if pos:start="289:13" pos:end="299:13">if <condition pos:start="289:16" pos:end="289:77">(<expr pos:start="289:17" pos:end="289:76"><operator pos:start="289:17" pos:end="289:17">(</operator><name pos:start="289:18" pos:end="289:45"><name pos:start="289:18" pos:end="289:26">bios_size</name> <argument_list type="generic" pos:start="289:28" pos:end="289:45">&lt; <argument pos:start="289:30" pos:end="289:43"><expr pos:start="289:30" pos:end="289:43"><literal type="number" pos:start="289:30" pos:end="289:30">0</literal> <operator pos:start="289:32" pos:end="289:33">||</operator> <name pos:start="289:35" pos:end="289:43">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="289:47" pos:end="289:55">BIOS_SIZE</name><operator pos:start="289:56" pos:end="289:56">)</operator> <operator pos:start="289:58" pos:end="289:59">&amp;&amp;</operator> <operator pos:start="289:61" pos:end="289:61">!</operator><name pos:start="289:62" pos:end="289:76">kernel_filename</name></expr>)</condition> <block pos:start="289:79" pos:end="299:13">{<block_content pos:start="291:17" pos:end="297:24">

                <expr_stmt pos:start="291:17" pos:end="295:35"><expr pos:start="291:17" pos:end="295:34"><call pos:start="291:17" pos:end="295:34"><name pos:start="291:17" pos:end="291:23">fprintf</name><argument_list pos:start="291:24" pos:end="295:34">(<argument pos:start="291:25" pos:end="291:30"><expr pos:start="291:25" pos:end="291:30"><name pos:start="291:25" pos:end="291:30">stderr</name></expr></argument>,

                        <argument pos:start="293:25" pos:end="293:102"><expr pos:start="293:25" pos:end="293:102"><literal type="string" pos:start="293:25" pos:end="293:102">"qemu: Could not load MIPS bios '%s', and no -kernel argument was specified\n"</literal></expr></argument>,

                        <argument pos:start="295:25" pos:end="295:33"><expr pos:start="295:25" pos:end="295:33"><name pos:start="295:25" pos:end="295:33">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="297:17" pos:end="297:24"><expr pos:start="297:17" pos:end="297:23"><call pos:start="297:17" pos:end="297:23"><name pos:start="297:17" pos:end="297:20">exit</name><argument_list pos:start="297:21" pos:end="297:23">(<argument pos:start="297:22" pos:end="297:22"><expr pos:start="297:22" pos:end="297:22"><literal type="number" pos:start="297:22" pos:end="297:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="303:9" pos:end="305:59">/* In little endian mode the 32bit words in the bios are swapped,

           a neat trick which allows bi-endian firmware. */</comment>

<cpp:ifndef pos:start="307:1" pos:end="307:30">#<cpp:directive pos:start="307:2" pos:end="307:7">ifndef</cpp:directive> <name pos:start="307:9" pos:end="307:30">TARGET_WORDS_BIGENDIAN</name></cpp:ifndef>

        <block pos:start="309:9" pos:end="326:0">{<block_content pos:start="311:13" pos:end="321:13">

            <decl_stmt pos:start="311:13" pos:end="311:61"><decl pos:start="311:13" pos:end="311:60"><type pos:start="311:13" pos:end="311:22"><name pos:start="311:13" pos:end="311:20">uint32_t</name> <modifier pos:start="311:22" pos:end="311:22">*</modifier></type><name pos:start="311:23" pos:end="311:26">addr</name> <init pos:start="311:28" pos:end="311:60">= <expr pos:start="311:30" pos:end="311:60"><call pos:start="311:30" pos:end="311:60"><name pos:start="311:30" pos:end="311:54">memory_region_get_ram_ptr</name><argument_list pos:start="311:55" pos:end="311:60">(<argument pos:start="311:56" pos:end="311:59"><expr pos:start="311:56" pos:end="311:59"><name pos:start="311:56" pos:end="311:59">bios</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="313:13" pos:end="313:45"><decl pos:start="313:13" pos:end="313:44"><type pos:start="313:13" pos:end="313:22"><name pos:start="313:13" pos:end="313:20">uint32_t</name> <modifier pos:start="313:22" pos:end="313:22">*</modifier></type><name pos:start="313:23" pos:end="313:25">end</name> <init pos:start="313:27" pos:end="313:44">= <expr pos:start="313:29" pos:end="313:44"><name pos:start="313:29" pos:end="313:32">addr</name> <operator pos:start="313:34" pos:end="313:34">+</operator> <name pos:start="313:36" pos:end="313:44">bios_size</name></expr></init></decl>;</decl_stmt>

            <while pos:start="315:13" pos:end="321:13">while <condition pos:start="315:19" pos:end="315:30">(<expr pos:start="315:20" pos:end="315:29"><name pos:start="315:20" pos:end="315:23">addr</name> <operator pos:start="315:25" pos:end="315:25">&lt;</operator> <name pos:start="315:27" pos:end="315:29">end</name></expr>)</condition> <block pos:start="315:32" pos:end="321:13">{<block_content pos:start="317:17" pos:end="319:23">

                <expr_stmt pos:start="317:17" pos:end="317:31"><expr pos:start="317:17" pos:end="317:30"><call pos:start="317:17" pos:end="317:30"><name pos:start="317:17" pos:end="317:24">bswap32s</name><argument_list pos:start="317:25" pos:end="317:30">(<argument pos:start="317:26" pos:end="317:29"><expr pos:start="317:26" pos:end="317:29"><name pos:start="317:26" pos:end="317:29">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="319:17" pos:end="319:23"><expr pos:start="319:17" pos:end="319:22"><name pos:start="319:17" pos:end="319:20">addr</name><operator pos:start="319:21" pos:end="319:22">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

        </block_content>}</block>

<cpp:endif pos:start="325:1" pos:end="325:6">#<cpp:directive pos:start="325:2" pos:end="325:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="331:5" pos:end="335:30">/* Board ID = 0x420 (Malta Board with CoreLV)

       XXX: theoretically 0x1e000010 should map to flash and 0x1fc00010 should

       map to the board ID. */</comment>

    <expr_stmt pos:start="337:5" pos:end="337:62"><expr pos:start="337:5" pos:end="337:61"><call pos:start="337:5" pos:end="337:61"><name pos:start="337:5" pos:end="337:9">stl_p</name><argument_list pos:start="337:10" pos:end="337:61">(<argument pos:start="337:11" pos:end="337:48"><expr pos:start="337:11" pos:end="337:48"><call pos:start="337:11" pos:end="337:41"><name pos:start="337:11" pos:end="337:35">memory_region_get_ram_ptr</name><argument_list pos:start="337:36" pos:end="337:41">(<argument pos:start="337:37" pos:end="337:40"><expr pos:start="337:37" pos:end="337:40"><name pos:start="337:37" pos:end="337:40">bios</name></expr></argument>)</argument_list></call> <operator pos:start="337:43" pos:end="337:43">+</operator> <literal type="number" pos:start="337:45" pos:end="337:48">0x10</literal></expr></argument>, <argument pos:start="337:51" pos:end="337:60"><expr pos:start="337:51" pos:end="337:60"><literal type="number" pos:start="337:51" pos:end="337:60">0x00000420</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="341:5" pos:end="341:31">/* Init internal devices */</comment>

    <expr_stmt pos:start="343:5" pos:end="343:31"><expr pos:start="343:5" pos:end="343:30"><call pos:start="343:5" pos:end="343:30"><name pos:start="343:5" pos:end="343:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="343:26" pos:end="343:30">(<argument pos:start="343:27" pos:end="343:29"><expr pos:start="343:27" pos:end="343:29"><name pos:start="343:27" pos:end="343:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:29"><expr pos:start="345:5" pos:end="345:28"><call pos:start="345:5" pos:end="345:28"><name pos:start="345:5" pos:end="345:23">cpu_mips_clock_init</name><argument_list pos:start="345:24" pos:end="345:28">(<argument pos:start="345:25" pos:end="345:27"><expr pos:start="345:25" pos:end="345:27"><name pos:start="345:25" pos:end="345:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="349:5" pos:end="361:7">/*

     * We have a circular dependency problem: pci_bus depends on isa_irq,

     * isa_irq is provided by i8259, i8259 depends on ISA, ISA depends

     * on piix4, and piix4 depends on pci_bus.  To stop the cycle we have

     * qemu_irq_proxy() adds an extra bit of indirection, allowing us

     * to resolve the isa_irq -&gt; i8259 dependency after i8259 is initialized.

     */</comment>

    <expr_stmt pos:start="363:5" pos:end="363:44"><expr pos:start="363:5" pos:end="363:43"><name pos:start="363:5" pos:end="363:11">isa_irq</name> <operator pos:start="363:13" pos:end="363:13">=</operator> <call pos:start="363:15" pos:end="363:43"><name pos:start="363:15" pos:end="363:28">qemu_irq_proxy</name><argument_list pos:start="363:29" pos:end="363:43">(<argument pos:start="363:30" pos:end="363:38"><expr pos:start="363:30" pos:end="363:38"><operator pos:start="363:30" pos:end="363:30">&amp;</operator><name pos:start="363:31" pos:end="363:38"><name pos:start="363:31" pos:end="363:31">s</name><operator pos:start="363:32" pos:end="363:33">-&gt;</operator><name pos:start="363:34" pos:end="363:38">i8259</name></name></expr></argument>, <argument pos:start="363:41" pos:end="363:42"><expr pos:start="363:41" pos:end="363:42"><literal type="number" pos:start="363:41" pos:end="363:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="367:5" pos:end="367:21">/* Northbridge */</comment>

    <expr_stmt pos:start="369:5" pos:end="369:40"><expr pos:start="369:5" pos:end="369:39"><name pos:start="369:5" pos:end="369:11">pci_bus</name> <operator pos:start="369:13" pos:end="369:13">=</operator> <call pos:start="369:15" pos:end="369:39"><name pos:start="369:15" pos:end="369:30">gt64120_register</name><argument_list pos:start="369:31" pos:end="369:39">(<argument pos:start="369:32" pos:end="369:38"><expr pos:start="369:32" pos:end="369:38"><name pos:start="369:32" pos:end="369:38">isa_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="373:5" pos:end="373:21">/* Southbridge */</comment>

    <expr_stmt pos:start="375:5" pos:end="375:35"><expr pos:start="375:5" pos:end="375:34"><call pos:start="375:5" pos:end="375:34"><name pos:start="375:5" pos:end="375:17">ide_drive_get</name><argument_list pos:start="375:18" pos:end="375:34">(<argument pos:start="375:19" pos:end="375:20"><expr pos:start="375:19" pos:end="375:20"><name pos:start="375:19" pos:end="375:20">hd</name></expr></argument>, <argument pos:start="375:23" pos:end="375:33"><expr pos:start="375:23" pos:end="375:33"><name pos:start="375:23" pos:end="375:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="379:5" pos:end="379:52"><expr pos:start="379:5" pos:end="379:51"><name pos:start="379:5" pos:end="379:15">piix4_devfn</name> <operator pos:start="379:17" pos:end="379:17">=</operator> <call pos:start="379:19" pos:end="379:51"><name pos:start="379:19" pos:end="379:28">piix4_init</name><argument_list pos:start="379:29" pos:end="379:51">(<argument pos:start="379:30" pos:end="379:36"><expr pos:start="379:30" pos:end="379:36"><name pos:start="379:30" pos:end="379:36">pci_bus</name></expr></argument>, <argument pos:start="379:39" pos:end="379:46"><expr pos:start="379:39" pos:end="379:46"><operator pos:start="379:39" pos:end="379:39">&amp;</operator><name pos:start="379:40" pos:end="379:46">isa_bus</name></expr></argument>, <argument pos:start="379:49" pos:end="379:50"><expr pos:start="379:49" pos:end="379:50"><literal type="number" pos:start="379:49" pos:end="379:50">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="383:5" pos:end="383:30">/* Interrupt controller */</comment>

    <comment type="block" pos:start="385:5" pos:end="385:71">/* The 8259 is attached to the MIPS CPU INT0 pin, ie interrupt 2 */</comment>

    <expr_stmt pos:start="387:5" pos:end="387:48"><expr pos:start="387:5" pos:end="387:47"><name pos:start="387:5" pos:end="387:12"><name pos:start="387:5" pos:end="387:5">s</name><operator pos:start="387:6" pos:end="387:7">-&gt;</operator><name pos:start="387:8" pos:end="387:12">i8259</name></name> <operator pos:start="387:14" pos:end="387:14">=</operator> <call pos:start="387:16" pos:end="387:47"><name pos:start="387:16" pos:end="387:25">i8259_init</name><argument_list pos:start="387:26" pos:end="387:47">(<argument pos:start="387:27" pos:end="387:33"><expr pos:start="387:27" pos:end="387:33"><name pos:start="387:27" pos:end="387:33">isa_bus</name></expr></argument>, <argument pos:start="387:36" pos:end="387:46"><expr pos:start="387:36" pos:end="387:46"><name pos:start="387:36" pos:end="387:46"><name pos:start="387:36" pos:end="387:38">env</name><operator pos:start="387:39" pos:end="387:40">-&gt;</operator><name pos:start="387:41" pos:end="387:43">irq</name><index pos:start="387:44" pos:end="387:46">[<expr pos:start="387:45" pos:end="387:45"><literal type="number" pos:start="387:45" pos:end="387:45">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="391:5" pos:end="391:36"><expr pos:start="391:5" pos:end="391:35"><call pos:start="391:5" pos:end="391:35"><name pos:start="391:5" pos:end="391:16">isa_bus_irqs</name><argument_list pos:start="391:17" pos:end="391:35">(<argument pos:start="391:18" pos:end="391:24"><expr pos:start="391:18" pos:end="391:24"><name pos:start="391:18" pos:end="391:24">isa_bus</name></expr></argument>, <argument pos:start="391:27" pos:end="391:34"><expr pos:start="391:27" pos:end="391:34"><name pos:start="391:27" pos:end="391:34"><name pos:start="391:27" pos:end="391:27">s</name><operator pos:start="391:28" pos:end="391:29">-&gt;</operator><name pos:start="391:30" pos:end="391:34">i8259</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="393:5" pos:end="393:53"><expr pos:start="393:5" pos:end="393:52"><call pos:start="393:5" pos:end="393:52"><name pos:start="393:5" pos:end="393:22">pci_piix4_ide_init</name><argument_list pos:start="393:23" pos:end="393:52">(<argument pos:start="393:24" pos:end="393:30"><expr pos:start="393:24" pos:end="393:30"><name pos:start="393:24" pos:end="393:30">pci_bus</name></expr></argument>, <argument pos:start="393:33" pos:end="393:34"><expr pos:start="393:33" pos:end="393:34"><name pos:start="393:33" pos:end="393:34">hd</name></expr></argument>, <argument pos:start="393:37" pos:end="393:51"><expr pos:start="393:37" pos:end="393:51"><name pos:start="393:37" pos:end="393:47">piix4_devfn</name> <operator pos:start="393:49" pos:end="393:49">+</operator> <literal type="number" pos:start="393:51" pos:end="393:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="395:5" pos:end="395:50"><expr pos:start="395:5" pos:end="395:49"><call pos:start="395:5" pos:end="395:49"><name pos:start="395:5" pos:end="395:23">usb_uhci_piix4_init</name><argument_list pos:start="395:24" pos:end="395:49">(<argument pos:start="395:25" pos:end="395:31"><expr pos:start="395:25" pos:end="395:31"><name pos:start="395:25" pos:end="395:31">pci_bus</name></expr></argument>, <argument pos:start="395:34" pos:end="395:48"><expr pos:start="395:34" pos:end="395:48"><name pos:start="395:34" pos:end="395:44">piix4_devfn</name> <operator pos:start="395:46" pos:end="395:46">+</operator> <literal type="number" pos:start="395:48" pos:end="395:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="397:5" pos:end="399:63"><expr pos:start="397:5" pos:end="399:62"><name pos:start="397:5" pos:end="397:9">smbus</name> <operator pos:start="397:11" pos:end="397:11">=</operator> <call pos:start="397:13" pos:end="399:62"><name pos:start="397:13" pos:end="397:25">piix4_pm_init</name><argument_list pos:start="397:26" pos:end="399:62">(<argument pos:start="397:27" pos:end="397:33"><expr pos:start="397:27" pos:end="397:33"><name pos:start="397:27" pos:end="397:33">pci_bus</name></expr></argument>, <argument pos:start="397:36" pos:end="397:50"><expr pos:start="397:36" pos:end="397:50"><name pos:start="397:36" pos:end="397:46">piix4_devfn</name> <operator pos:start="397:48" pos:end="397:48">+</operator> <literal type="number" pos:start="397:50" pos:end="397:50">3</literal></expr></argument>, <argument pos:start="397:53" pos:end="397:58"><expr pos:start="397:53" pos:end="397:58"><literal type="number" pos:start="397:53" pos:end="397:58">0x1100</literal></expr></argument>,

                          <argument pos:start="399:27" pos:end="399:46"><expr pos:start="399:27" pos:end="399:46"><call pos:start="399:27" pos:end="399:46"><name pos:start="399:27" pos:end="399:37">isa_get_irq</name><argument_list pos:start="399:38" pos:end="399:46">(<argument pos:start="399:39" pos:end="399:42"><expr pos:start="399:39" pos:end="399:42"><name pos:start="399:39" pos:end="399:42">NULL</name></expr></argument>, <argument pos:start="399:45" pos:end="399:45"><expr pos:start="399:45" pos:end="399:45"><literal type="number" pos:start="399:45" pos:end="399:45">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="399:49" pos:end="399:52"><expr pos:start="399:49" pos:end="399:52"><name pos:start="399:49" pos:end="399:52">NULL</name></expr></argument>, <argument pos:start="399:55" pos:end="399:58"><expr pos:start="399:55" pos:end="399:58"><name pos:start="399:55" pos:end="399:58">NULL</name></expr></argument>, <argument pos:start="399:61" pos:end="399:61"><expr pos:start="399:61" pos:end="399:61"><literal type="number" pos:start="399:61" pos:end="399:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="401:5" pos:end="401:42">/* TODO: Populate SPD eeprom data.  */</comment>

    <expr_stmt pos:start="403:5" pos:end="403:41"><expr pos:start="403:5" pos:end="403:40"><call pos:start="403:5" pos:end="403:40"><name pos:start="403:5" pos:end="403:21">smbus_eeprom_init</name><argument_list pos:start="403:22" pos:end="403:40">(<argument pos:start="403:23" pos:end="403:27"><expr pos:start="403:23" pos:end="403:27"><name pos:start="403:23" pos:end="403:27">smbus</name></expr></argument>, <argument pos:start="403:30" pos:end="403:30"><expr pos:start="403:30" pos:end="403:30"><literal type="number" pos:start="403:30" pos:end="403:30">8</literal></expr></argument>, <argument pos:start="403:33" pos:end="403:36"><expr pos:start="403:33" pos:end="403:36"><name pos:start="403:33" pos:end="403:36">NULL</name></expr></argument>, <argument pos:start="403:39" pos:end="403:39"><expr pos:start="403:39" pos:end="403:39"><literal type="number" pos:start="403:39" pos:end="403:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="405:5" pos:end="405:37"><expr pos:start="405:5" pos:end="405:36"><name pos:start="405:5" pos:end="405:7">pit</name> <operator pos:start="405:9" pos:end="405:9">=</operator> <call pos:start="405:11" pos:end="405:36"><name pos:start="405:11" pos:end="405:18">pit_init</name><argument_list pos:start="405:19" pos:end="405:36">(<argument pos:start="405:20" pos:end="405:26"><expr pos:start="405:20" pos:end="405:26"><name pos:start="405:20" pos:end="405:26">isa_bus</name></expr></argument>, <argument pos:start="405:29" pos:end="405:32"><expr pos:start="405:29" pos:end="405:32"><literal type="number" pos:start="405:29" pos:end="405:32">0x40</literal></expr></argument>, <argument pos:start="405:35" pos:end="405:35"><expr pos:start="405:35" pos:end="405:35"><literal type="number" pos:start="405:35" pos:end="405:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="407:5" pos:end="407:65"><expr pos:start="407:5" pos:end="407:64"><name pos:start="407:5" pos:end="407:16">cpu_exit_irq</name> <operator pos:start="407:18" pos:end="407:18">=</operator> <call pos:start="407:20" pos:end="407:64"><name pos:start="407:20" pos:end="407:37">qemu_allocate_irqs</name><argument_list pos:start="407:38" pos:end="407:64">(<argument pos:start="407:39" pos:end="407:54"><expr pos:start="407:39" pos:end="407:54"><name pos:start="407:39" pos:end="407:54">cpu_request_exit</name></expr></argument>, <argument pos:start="407:57" pos:end="407:60"><expr pos:start="407:57" pos:end="407:60"><name pos:start="407:57" pos:end="407:60">NULL</name></expr></argument>, <argument pos:start="407:63" pos:end="407:63"><expr pos:start="407:63" pos:end="407:63"><literal type="number" pos:start="407:63" pos:end="407:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="409:5" pos:end="409:30"><expr pos:start="409:5" pos:end="409:29"><call pos:start="409:5" pos:end="409:29"><name pos:start="409:5" pos:end="409:12">DMA_init</name><argument_list pos:start="409:13" pos:end="409:29">(<argument pos:start="409:14" pos:end="409:14"><expr pos:start="409:14" pos:end="409:14"><literal type="number" pos:start="409:14" pos:end="409:14">0</literal></expr></argument>, <argument pos:start="409:17" pos:end="409:28"><expr pos:start="409:17" pos:end="409:28"><name pos:start="409:17" pos:end="409:28">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="413:5" pos:end="413:19">/* Super I/O */</comment>

    <expr_stmt pos:start="415:5" pos:end="415:40"><expr pos:start="415:5" pos:end="415:39"><call pos:start="415:5" pos:end="415:39"><name pos:start="415:5" pos:end="415:21">isa_create_simple</name><argument_list pos:start="415:22" pos:end="415:39">(<argument pos:start="415:23" pos:end="415:29"><expr pos:start="415:23" pos:end="415:29"><name pos:start="415:23" pos:end="415:29">isa_bus</name></expr></argument>, <argument pos:start="415:32" pos:end="415:38"><expr pos:start="415:32" pos:end="415:38"><literal type="string" pos:start="415:32" pos:end="415:38">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="419:5" pos:end="419:34"><expr pos:start="419:5" pos:end="419:33"><call pos:start="419:5" pos:end="419:33"><name pos:start="419:5" pos:end="419:12">rtc_init</name><argument_list pos:start="419:13" pos:end="419:33">(<argument pos:start="419:14" pos:end="419:20"><expr pos:start="419:14" pos:end="419:20"><name pos:start="419:14" pos:end="419:20">isa_bus</name></expr></argument>, <argument pos:start="419:23" pos:end="419:26"><expr pos:start="419:23" pos:end="419:26"><literal type="number" pos:start="419:23" pos:end="419:26">2000</literal></expr></argument>, <argument pos:start="419:29" pos:end="419:32"><expr pos:start="419:29" pos:end="419:32"><name pos:start="419:29" pos:end="419:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="421:5" pos:end="421:47"><expr pos:start="421:5" pos:end="421:46"><call pos:start="421:5" pos:end="421:46"><name pos:start="421:5" pos:end="421:19">serial_isa_init</name><argument_list pos:start="421:20" pos:end="421:46">(<argument pos:start="421:21" pos:end="421:27"><expr pos:start="421:21" pos:end="421:27"><name pos:start="421:21" pos:end="421:27">isa_bus</name></expr></argument>, <argument pos:start="421:30" pos:end="421:30"><expr pos:start="421:30" pos:end="421:30"><literal type="number" pos:start="421:30" pos:end="421:30">0</literal></expr></argument>, <argument pos:start="421:33" pos:end="421:45"><expr pos:start="421:33" pos:end="421:45"><name pos:start="421:33" pos:end="421:45"><name pos:start="421:33" pos:end="421:42">serial_hds</name><index pos:start="421:43" pos:end="421:45">[<expr pos:start="421:44" pos:end="421:44"><literal type="number" pos:start="421:44" pos:end="421:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:47"><expr pos:start="423:5" pos:end="423:46"><call pos:start="423:5" pos:end="423:46"><name pos:start="423:5" pos:end="423:19">serial_isa_init</name><argument_list pos:start="423:20" pos:end="423:46">(<argument pos:start="423:21" pos:end="423:27"><expr pos:start="423:21" pos:end="423:27"><name pos:start="423:21" pos:end="423:27">isa_bus</name></expr></argument>, <argument pos:start="423:30" pos:end="423:30"><expr pos:start="423:30" pos:end="423:30"><literal type="number" pos:start="423:30" pos:end="423:30">1</literal></expr></argument>, <argument pos:start="423:33" pos:end="423:45"><expr pos:start="423:33" pos:end="423:45"><name pos:start="423:33" pos:end="423:45"><name pos:start="423:33" pos:end="423:42">serial_hds</name><index pos:start="423:43" pos:end="423:45">[<expr pos:start="423:44" pos:end="423:44"><literal type="number" pos:start="423:44" pos:end="423:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="425:5" pos:end="427:51"><if pos:start="425:5" pos:end="427:51">if <condition pos:start="425:8" pos:end="425:24">(<expr pos:start="425:9" pos:end="425:23"><name pos:start="425:9" pos:end="425:23"><name pos:start="425:9" pos:end="425:20">parallel_hds</name><index pos:start="425:21" pos:end="425:23">[<expr pos:start="425:22" pos:end="425:22"><literal type="number" pos:start="425:22" pos:end="425:22">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="427:9" pos:end="427:51"><block_content pos:start="427:9" pos:end="427:51">

        <expr_stmt pos:start="427:9" pos:end="427:51"><expr pos:start="427:9" pos:end="427:50"><call pos:start="427:9" pos:end="427:50"><name pos:start="427:9" pos:end="427:21">parallel_init</name><argument_list pos:start="427:22" pos:end="427:50">(<argument pos:start="427:23" pos:end="427:29"><expr pos:start="427:23" pos:end="427:29"><name pos:start="427:23" pos:end="427:29">isa_bus</name></expr></argument>, <argument pos:start="427:32" pos:end="427:32"><expr pos:start="427:32" pos:end="427:32"><literal type="number" pos:start="427:32" pos:end="427:32">0</literal></expr></argument>, <argument pos:start="427:35" pos:end="427:49"><expr pos:start="427:35" pos:end="427:49"><name pos:start="427:35" pos:end="427:49"><name pos:start="427:35" pos:end="427:46">parallel_hds</name><index pos:start="427:47" pos:end="427:49">[<expr pos:start="427:48" pos:end="427:48"><literal type="number" pos:start="427:48" pos:end="427:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="429:5" pos:end="433:5">for<control pos:start="429:8" pos:end="429:31">(<init pos:start="429:9" pos:end="429:14"><expr pos:start="429:9" pos:end="429:13"><name pos:start="429:9" pos:end="429:9">i</name> <operator pos:start="429:11" pos:end="429:11">=</operator> <literal type="number" pos:start="429:13" pos:end="429:13">0</literal></expr>;</init> <condition pos:start="429:16" pos:end="429:26"><expr pos:start="429:16" pos:end="429:25"><name pos:start="429:16" pos:end="429:16">i</name> <operator pos:start="429:18" pos:end="429:18">&lt;</operator> <name pos:start="429:20" pos:end="429:25">MAX_FD</name></expr>;</condition> <incr pos:start="429:28" pos:end="429:30"><expr pos:start="429:28" pos:end="429:30"><name pos:start="429:28" pos:end="429:28">i</name><operator pos:start="429:29" pos:end="429:30">++</operator></expr></incr>)</control> <block pos:start="429:33" pos:end="433:5">{<block_content pos:start="431:9" pos:end="431:43">

        <expr_stmt pos:start="431:9" pos:end="431:43"><expr pos:start="431:9" pos:end="431:42"><name pos:start="431:9" pos:end="431:13"><name pos:start="431:9" pos:end="431:10">fd</name><index pos:start="431:11" pos:end="431:13">[<expr pos:start="431:12" pos:end="431:12"><name pos:start="431:12" pos:end="431:12">i</name></expr>]</index></name> <operator pos:start="431:15" pos:end="431:15">=</operator> <call pos:start="431:17" pos:end="431:42"><name pos:start="431:17" pos:end="431:25">drive_get</name><argument_list pos:start="431:26" pos:end="431:42">(<argument pos:start="431:27" pos:end="431:35"><expr pos:start="431:27" pos:end="431:35"><name pos:start="431:27" pos:end="431:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="431:38" pos:end="431:38"><expr pos:start="431:38" pos:end="431:38"><literal type="number" pos:start="431:38" pos:end="431:38">0</literal></expr></argument>, <argument pos:start="431:41" pos:end="431:41"><expr pos:start="431:41" pos:end="431:41"><name pos:start="431:41" pos:end="431:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="435:5" pos:end="435:33"><expr pos:start="435:5" pos:end="435:32"><call pos:start="435:5" pos:end="435:32"><name pos:start="435:5" pos:end="435:19">fdctrl_init_isa</name><argument_list pos:start="435:20" pos:end="435:32">(<argument pos:start="435:21" pos:end="435:27"><expr pos:start="435:21" pos:end="435:27"><name pos:start="435:21" pos:end="435:27">isa_bus</name></expr></argument>, <argument pos:start="435:30" pos:end="435:31"><expr pos:start="435:30" pos:end="435:31"><name pos:start="435:30" pos:end="435:31">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="439:5" pos:end="439:20">/* Sound card */</comment>

    <expr_stmt pos:start="441:5" pos:end="441:33"><expr pos:start="441:5" pos:end="441:32"><call pos:start="441:5" pos:end="441:32"><name pos:start="441:5" pos:end="441:14">audio_init</name><argument_list pos:start="441:15" pos:end="441:32">(<argument pos:start="441:16" pos:end="441:22"><expr pos:start="441:16" pos:end="441:22"><name pos:start="441:16" pos:end="441:22">isa_bus</name></expr></argument>, <argument pos:start="441:25" pos:end="441:31"><expr pos:start="441:25" pos:end="441:31"><name pos:start="441:25" pos:end="441:31">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="445:5" pos:end="445:22">/* Network card */</comment>

    <expr_stmt pos:start="447:5" pos:end="447:19"><expr pos:start="447:5" pos:end="447:18"><call pos:start="447:5" pos:end="447:18"><name pos:start="447:5" pos:end="447:16">network_init</name><argument_list pos:start="447:17" pos:end="447:18">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="451:5" pos:end="451:33">/* Optional PCI video card */</comment>

    <if_stmt pos:start="453:5" pos:end="473:5"><if pos:start="453:5" pos:end="457:5">if <condition pos:start="453:8" pos:end="453:27">(<expr pos:start="453:9" pos:end="453:26"><name pos:start="453:9" pos:end="453:26">cirrus_vga_enabled</name></expr>)</condition> <block pos:start="453:29" pos:end="457:5">{<block_content pos:start="455:9" pos:end="455:37">

        <expr_stmt pos:start="455:9" pos:end="455:37"><expr pos:start="455:9" pos:end="455:36"><call pos:start="455:9" pos:end="455:36"><name pos:start="455:9" pos:end="455:27">pci_cirrus_vga_init</name><argument_list pos:start="455:28" pos:end="455:36">(<argument pos:start="455:29" pos:end="455:35"><expr pos:start="455:29" pos:end="455:35"><name pos:start="455:29" pos:end="455:35">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="457:7" pos:end="469:5">else if <condition pos:start="457:15" pos:end="457:30">(<expr pos:start="457:16" pos:end="457:29"><name pos:start="457:16" pos:end="457:29">vmsvga_enabled</name></expr>)</condition> <block pos:start="457:32" pos:end="469:5">{<block_content pos:start="459:9" pos:end="467:9">

        <if_stmt pos:start="459:9" pos:end="467:9"><if pos:start="459:9" pos:end="467:9">if <condition pos:start="459:12" pos:end="459:38">(<expr pos:start="459:13" pos:end="459:37"><operator pos:start="459:13" pos:end="459:13">!</operator><call pos:start="459:14" pos:end="459:37"><name pos:start="459:14" pos:end="459:28">pci_vmsvga_init</name><argument_list pos:start="459:29" pos:end="459:37">(<argument pos:start="459:30" pos:end="459:36"><expr pos:start="459:30" pos:end="459:36"><name pos:start="459:30" pos:end="459:36">pci_bus</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="459:40" pos:end="467:9">{<block_content pos:start="461:13" pos:end="465:34">

            <expr_stmt pos:start="461:13" pos:end="463:53"><expr pos:start="461:13" pos:end="463:52"><call pos:start="461:13" pos:end="463:52"><name pos:start="461:13" pos:end="461:19">fprintf</name><argument_list pos:start="461:20" pos:end="463:52">(<argument pos:start="461:21" pos:end="461:26"><expr pos:start="461:21" pos:end="461:26"><name pos:start="461:21" pos:end="461:26">stderr</name></expr></argument>, <argument pos:start="461:29" pos:end="463:51"><expr pos:start="461:29" pos:end="463:51"><literal type="string" pos:start="461:29" pos:end="461:64">"Warning: vmware_vga not available,"</literal>

                    <literal type="string" pos:start="463:21" pos:end="463:51">" using standard VGA instead\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="465:13" pos:end="465:34"><expr pos:start="465:13" pos:end="465:33"><call pos:start="465:13" pos:end="465:33"><name pos:start="465:13" pos:end="465:24">pci_vga_init</name><argument_list pos:start="465:25" pos:end="465:33">(<argument pos:start="465:26" pos:end="465:32"><expr pos:start="465:26" pos:end="465:32"><name pos:start="465:26" pos:end="465:32">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="469:7" pos:end="473:5">else if <condition pos:start="469:15" pos:end="469:31">(<expr pos:start="469:16" pos:end="469:30"><name pos:start="469:16" pos:end="469:30">std_vga_enabled</name></expr>)</condition> <block pos:start="469:33" pos:end="473:5">{<block_content pos:start="471:9" pos:end="471:30">

        <expr_stmt pos:start="471:9" pos:end="471:30"><expr pos:start="471:9" pos:end="471:29"><call pos:start="471:9" pos:end="471:29"><name pos:start="471:9" pos:end="471:20">pci_vga_init</name><argument_list pos:start="471:21" pos:end="471:29">(<argument pos:start="471:22" pos:end="471:28"><expr pos:start="471:22" pos:end="471:28"><name pos:start="471:22" pos:end="471:28">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
