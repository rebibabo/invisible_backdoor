<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18212.c" pos:tabs="8"><function pos:start="1:1" pos:end="297:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">qemu_loadvm_state</name><parameter_list pos:start="1:22" pos:end="1:34">(<parameter pos:start="1:23" pos:end="1:33"><decl pos:start="1:23" pos:end="1:33"><type pos:start="1:23" pos:end="1:32"><name pos:start="1:23" pos:end="1:30">QEMUFile</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">f</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="297:1">{<block_content pos:start="5:5" pos:end="295:15">

    <macro pos:start="5:5" pos:end="5:32"><name pos:start="5:5" pos:end="5:14">QLIST_HEAD</name><argument_list pos:start="5:15" pos:end="5:32">(<argument/>, <argument pos:start="5:18" pos:end="5:31">LoadStateEntry</argument>)</argument_list></macro> <expr_stmt pos:start="5:34" pos:end="7:48"><expr pos:start="5:34" pos:end="7:47"><name pos:start="5:34" pos:end="5:48">loadvm_handlers</name> <operator pos:start="5:50" pos:end="5:50">=</operator>

        <call pos:start="7:9" pos:end="7:47"><name pos:start="7:9" pos:end="7:30">QLIST_HEAD_INITIALIZER</name><argument_list pos:start="7:31" pos:end="7:47">(<argument pos:start="7:32" pos:end="7:46"><expr pos:start="7:32" pos:end="7:46"><name pos:start="7:32" pos:end="7:46">loadvm_handlers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">LoadStateEntry</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:22">le</name></decl>, <decl pos:start="9:25" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:20"><modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:31">new_le</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:24">section_type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:18">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:33"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:28">file_error_after_eof</name> <init pos:start="19:30" pos:end="19:33">= <expr pos:start="19:32" pos:end="19:33"><operator pos:start="19:32" pos:end="19:32">-</operator><literal type="number" pos:start="19:33" pos:end="19:33">1</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:46">(<expr pos:start="23:9" pos:end="23:45"><call pos:start="23:9" pos:end="23:45"><name pos:start="23:9" pos:end="23:33">qemu_savevm_state_blocked</name><argument_list pos:start="23:34" pos:end="23:45">(<argument pos:start="23:35" pos:end="23:44"><expr pos:start="23:35" pos:end="23:44"><operator pos:start="23:35" pos:end="23:35">&amp;</operator><name pos:start="23:36" pos:end="23:44">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:48" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:23">

        <expr_stmt pos:start="25:9" pos:end="25:36"><expr pos:start="25:9" pos:end="25:35"><call pos:start="25:9" pos:end="25:35"><name pos:start="25:9" pos:end="25:24">error_report_err</name><argument_list pos:start="25:25" pos:end="25:35">(<argument pos:start="25:26" pos:end="25:34"><expr pos:start="25:26" pos:end="25:34"><name pos:start="25:26" pos:end="25:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:23">return <expr pos:start="27:16" pos:end="27:22"><operator pos:start="27:16" pos:end="27:16">-</operator><name pos:start="27:17" pos:end="27:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:25"><expr pos:start="33:5" pos:end="33:24"><name pos:start="33:5" pos:end="33:5">v</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <call pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:21">qemu_get_be32</name><argument_list pos:start="33:22" pos:end="33:24">(<argument pos:start="33:23" pos:end="33:23"><expr pos:start="33:23" pos:end="33:23"><name pos:start="33:23" pos:end="33:23">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:32">(<expr pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:9">v</name> <operator pos:start="35:11" pos:end="35:12">!=</operator> <name pos:start="35:14" pos:end="35:31">QEMU_VM_FILE_MAGIC</name></expr>)</condition> <block pos:start="35:34" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:23">

        <expr_stmt pos:start="37:9" pos:end="37:47"><expr pos:start="37:9" pos:end="37:46"><call pos:start="37:9" pos:end="37:46"><name pos:start="37:9" pos:end="37:20">error_report</name><argument_list pos:start="37:21" pos:end="37:46">(<argument pos:start="37:22" pos:end="37:45"><expr pos:start="37:22" pos:end="37:45"><literal type="string" pos:start="37:22" pos:end="37:45">"Not a migration stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:23">return <expr pos:start="39:16" pos:end="39:22"><operator pos:start="39:16" pos:end="39:16">-</operator><name pos:start="39:17" pos:end="39:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:25"><expr pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:5">v</name> <operator pos:start="45:7" pos:end="45:7">=</operator> <call pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:21">qemu_get_be32</name><argument_list pos:start="45:22" pos:end="45:24">(<argument pos:start="45:23" pos:end="45:23"><expr pos:start="45:23" pos:end="45:23"><name pos:start="45:23" pos:end="45:23">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:41">(<expr pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:9">v</name> <operator pos:start="47:11" pos:end="47:12">==</operator> <name pos:start="47:14" pos:end="47:40">QEMU_VM_FILE_VERSION_COMPAT</name></expr>)</condition> <block pos:start="47:43" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:24">

        <expr_stmt pos:start="49:9" pos:end="49:76"><expr pos:start="49:9" pos:end="49:75"><call pos:start="49:9" pos:end="49:75"><name pos:start="49:9" pos:end="49:20">error_report</name><argument_list pos:start="49:21" pos:end="49:75">(<argument pos:start="49:22" pos:end="49:74"><expr pos:start="49:22" pos:end="49:74"><literal type="string" pos:start="49:22" pos:end="49:74">"SaveVM v2 format is obsolete and don't work anymore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:24">return <expr pos:start="51:16" pos:end="51:23"><operator pos:start="51:16" pos:end="51:16">-</operator><name pos:start="51:17" pos:end="51:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:34">(<expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:9">v</name> <operator pos:start="55:11" pos:end="55:12">!=</operator> <name pos:start="55:14" pos:end="55:33">QEMU_VM_FILE_VERSION</name></expr>)</condition> <block pos:start="55:36" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:24">

        <expr_stmt pos:start="57:9" pos:end="57:61"><expr pos:start="57:9" pos:end="57:60"><call pos:start="57:9" pos:end="57:60"><name pos:start="57:9" pos:end="57:20">error_report</name><argument_list pos:start="57:21" pos:end="57:60">(<argument pos:start="57:22" pos:end="57:59"><expr pos:start="57:22" pos:end="57:59"><literal type="string" pos:start="57:22" pos:end="57:59">"Unsupported migration stream version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:24">return <expr pos:start="59:16" pos:end="59:23"><operator pos:start="59:16" pos:end="59:16">-</operator><name pos:start="59:17" pos:end="59:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="65:5" pos:end="225:5">while <condition pos:start="65:11" pos:end="65:60">(<expr pos:start="65:12" pos:end="65:59"><operator pos:start="65:12" pos:end="65:12">(</operator><name pos:start="65:13" pos:end="65:24">section_type</name> <operator pos:start="65:26" pos:end="65:26">=</operator> <call pos:start="65:28" pos:end="65:43"><name pos:start="65:28" pos:end="65:40">qemu_get_byte</name><argument_list pos:start="65:41" pos:end="65:43">(<argument pos:start="65:42" pos:end="65:42"><expr pos:start="65:42" pos:end="65:42"><name pos:start="65:42" pos:end="65:42">f</name></expr></argument>)</argument_list></call><operator pos:start="65:44" pos:end="65:44">)</operator> <operator pos:start="65:46" pos:end="65:47">!=</operator> <name pos:start="65:49" pos:end="65:59">QEMU_VM_EOF</name></expr>)</condition> <block pos:start="65:62" pos:end="225:5">{<block_content pos:start="67:9" pos:end="223:9">

        <decl_stmt pos:start="67:9" pos:end="67:53"><decl pos:start="67:9" pos:end="67:28"><type pos:start="67:9" pos:end="67:16"><name pos:start="67:9" pos:end="67:16">uint32_t</name></type> <name pos:start="67:18" pos:end="67:28">instance_id</name></decl>, <decl pos:start="67:31" pos:end="67:40"><type ref="prev" pos:start="67:9" pos:end="67:16"/><name pos:start="67:31" pos:end="67:40">version_id</name></decl>, <decl pos:start="67:43" pos:end="67:52"><type ref="prev" pos:start="67:9" pos:end="67:16"/><name pos:start="67:43" pos:end="67:52">section_id</name></decl>;</decl_stmt>

        <decl_stmt pos:start="69:9" pos:end="69:27"><decl pos:start="69:9" pos:end="69:26"><type pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:22">SaveStateEntry</name> <modifier pos:start="69:24" pos:end="69:24">*</modifier></type><name pos:start="69:25" pos:end="69:26">se</name></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:24"><decl pos:start="71:9" pos:end="71:23"><type pos:start="71:9" pos:end="71:12"><name pos:start="71:9" pos:end="71:12">char</name></type> <name pos:start="71:14" pos:end="71:23"><name pos:start="71:14" pos:end="71:18">idstr</name><index pos:start="71:19" pos:end="71:23">[<expr pos:start="71:20" pos:end="71:22"><literal type="number" pos:start="71:20" pos:end="71:22">257</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:16"><decl pos:start="73:9" pos:end="73:15"><type pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:11">int</name></type> <name pos:start="73:13" pos:end="73:15">len</name></decl>;</decl_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:54"><expr pos:start="77:9" pos:end="77:53"><call pos:start="77:9" pos:end="77:53"><name pos:start="77:9" pos:end="77:39">trace_qemu_loadvm_state_section</name><argument_list pos:start="77:40" pos:end="77:53">(<argument pos:start="77:41" pos:end="77:52"><expr pos:start="77:41" pos:end="77:52"><name pos:start="77:41" pos:end="77:52">section_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="79:9" pos:end="223:9">switch <condition pos:start="79:16" pos:end="79:29">(<expr pos:start="79:17" pos:end="79:28"><name pos:start="79:17" pos:end="79:28">section_type</name></expr>)</condition> <block pos:start="79:31" pos:end="223:9">{<block_content pos:start="81:9" pos:end="221:21">

        <case pos:start="81:9" pos:end="81:35">case <expr pos:start="81:14" pos:end="81:34"><name pos:start="81:14" pos:end="81:34">QEMU_VM_SECTION_START</name></expr>:</case>

        <case pos:start="83:9" pos:end="83:34">case <expr pos:start="83:14" pos:end="83:33"><name pos:start="83:14" pos:end="83:33">QEMU_VM_SECTION_FULL</name></expr>:</case>

            <comment type="block" pos:start="85:13" pos:end="85:36">/* Read section start */</comment>

            <expr_stmt pos:start="87:13" pos:end="87:42"><expr pos:start="87:13" pos:end="87:41"><name pos:start="87:13" pos:end="87:22">section_id</name> <operator pos:start="87:24" pos:end="87:24">=</operator> <call pos:start="87:26" pos:end="87:41"><name pos:start="87:26" pos:end="87:38">qemu_get_be32</name><argument_list pos:start="87:39" pos:end="87:41">(<argument pos:start="87:40" pos:end="87:40"><expr pos:start="87:40" pos:end="87:40"><name pos:start="87:40" pos:end="87:40">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:35"><expr pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:15">len</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="89:34"><name pos:start="89:19" pos:end="89:31">qemu_get_byte</name><argument_list pos:start="89:32" pos:end="89:34">(<argument pos:start="89:33" pos:end="89:33"><expr pos:start="89:33" pos:end="89:33"><name pos:start="89:33" pos:end="89:33">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:54"><expr pos:start="91:13" pos:end="91:53"><call pos:start="91:13" pos:end="91:53"><name pos:start="91:13" pos:end="91:27">qemu_get_buffer</name><argument_list pos:start="91:28" pos:end="91:53">(<argument pos:start="91:29" pos:end="91:29"><expr pos:start="91:29" pos:end="91:29"><name pos:start="91:29" pos:end="91:29">f</name></expr></argument>, <argument pos:start="91:32" pos:end="91:47"><expr pos:start="91:32" pos:end="91:47"><operator pos:start="91:32" pos:end="91:32">(</operator><name pos:start="91:33" pos:end="91:39">uint8_t</name> <operator pos:start="91:41" pos:end="91:41">*</operator><operator pos:start="91:42" pos:end="91:42">)</operator><name pos:start="91:43" pos:end="91:47">idstr</name></expr></argument>, <argument pos:start="91:50" pos:end="91:52"><expr pos:start="91:50" pos:end="91:52"><name pos:start="91:50" pos:end="91:52">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:27"><expr pos:start="93:13" pos:end="93:26"><name pos:start="93:13" pos:end="93:22"><name pos:start="93:13" pos:end="93:17">idstr</name><index pos:start="93:18" pos:end="93:22">[<expr pos:start="93:19" pos:end="93:21"><name pos:start="93:19" pos:end="93:21">len</name></expr>]</index></name> <operator pos:start="93:24" pos:end="93:24">=</operator> <literal type="number" pos:start="93:26" pos:end="93:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:43"><expr pos:start="95:13" pos:end="95:42"><name pos:start="95:13" pos:end="95:23">instance_id</name> <operator pos:start="95:25" pos:end="95:25">=</operator> <call pos:start="95:27" pos:end="95:42"><name pos:start="95:27" pos:end="95:39">qemu_get_be32</name><argument_list pos:start="95:40" pos:end="95:42">(<argument pos:start="95:41" pos:end="95:41"><expr pos:start="95:41" pos:end="95:41"><name pos:start="95:41" pos:end="95:41">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:42"><expr pos:start="97:13" pos:end="97:41"><name pos:start="97:13" pos:end="97:22">version_id</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <call pos:start="97:26" pos:end="97:41"><name pos:start="97:26" pos:end="97:38">qemu_get_be32</name><argument_list pos:start="97:39" pos:end="97:41">(<argument pos:start="97:40" pos:end="97:40"><expr pos:start="97:40" pos:end="97:40"><name pos:start="97:40" pos:end="97:40">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="101:13" pos:end="103:79"><expr pos:start="101:13" pos:end="103:78"><call pos:start="101:13" pos:end="103:78"><name pos:start="101:13" pos:end="101:53">trace_qemu_loadvm_state_section_startfull</name><argument_list pos:start="101:54" pos:end="103:78">(<argument pos:start="101:55" pos:end="101:64"><expr pos:start="101:55" pos:end="101:64"><name pos:start="101:55" pos:end="101:64">section_id</name></expr></argument>, <argument pos:start="101:67" pos:end="101:71"><expr pos:start="101:67" pos:end="101:71"><name pos:start="101:67" pos:end="101:71">idstr</name></expr></argument>,

                                                      <argument pos:start="103:55" pos:end="103:65"><expr pos:start="103:55" pos:end="103:65"><name pos:start="103:55" pos:end="103:65">instance_id</name></expr></argument>, <argument pos:start="103:68" pos:end="103:77"><expr pos:start="103:68" pos:end="103:77"><name pos:start="103:68" pos:end="103:77">version_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="105:13" pos:end="105:37">/* Find savevm section */</comment>

            <expr_stmt pos:start="107:13" pos:end="107:45"><expr pos:start="107:13" pos:end="107:44"><name pos:start="107:13" pos:end="107:14">se</name> <operator pos:start="107:16" pos:end="107:16">=</operator> <call pos:start="107:18" pos:end="107:44"><name pos:start="107:18" pos:end="107:24">find_se</name><argument_list pos:start="107:25" pos:end="107:44">(<argument pos:start="107:26" pos:end="107:30"><expr pos:start="107:26" pos:end="107:30"><name pos:start="107:26" pos:end="107:30">idstr</name></expr></argument>, <argument pos:start="107:33" pos:end="107:43"><expr pos:start="107:33" pos:end="107:43"><name pos:start="107:33" pos:end="107:43">instance_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="109:13" pos:end="119:13"><if pos:start="109:13" pos:end="119:13">if <condition pos:start="109:16" pos:end="109:27">(<expr pos:start="109:17" pos:end="109:26"><name pos:start="109:17" pos:end="109:18">se</name> <operator pos:start="109:20" pos:end="109:21">==</operator> <name pos:start="109:23" pos:end="109:26">NULL</name></expr>)</condition> <block pos:start="109:29" pos:end="119:13">{<block_content pos:start="111:17" pos:end="117:25">

                <expr_stmt pos:start="111:17" pos:end="113:49"><expr pos:start="111:17" pos:end="113:48"><call pos:start="111:17" pos:end="113:48"><name pos:start="111:17" pos:end="111:28">error_report</name><argument_list pos:start="111:29" pos:end="113:48">(<argument pos:start="111:30" pos:end="111:73"><expr pos:start="111:30" pos:end="111:73"><literal type="string" pos:start="111:30" pos:end="111:73">"Unknown savevm section or instance '%s' %d"</literal></expr></argument>,

                             <argument pos:start="113:30" pos:end="113:34"><expr pos:start="113:30" pos:end="113:34"><name pos:start="113:30" pos:end="113:34">idstr</name></expr></argument>, <argument pos:start="113:37" pos:end="113:47"><expr pos:start="113:37" pos:end="113:47"><name pos:start="113:37" pos:end="113:47">instance_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="115:17" pos:end="115:30"><expr pos:start="115:17" pos:end="115:29"><name pos:start="115:17" pos:end="115:19">ret</name> <operator pos:start="115:21" pos:end="115:21">=</operator> <operator pos:start="115:23" pos:end="115:23">-</operator><name pos:start="115:24" pos:end="115:29">EINVAL</name></expr>;</expr_stmt>

                <goto pos:start="117:17" pos:end="117:25">goto <name pos:start="117:22" pos:end="117:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="123:13" pos:end="123:34">/* Validate version */</comment>

            <if_stmt pos:start="125:13" pos:end="135:13"><if pos:start="125:13" pos:end="135:13">if <condition pos:start="125:16" pos:end="125:44">(<expr pos:start="125:17" pos:end="125:43"><name pos:start="125:17" pos:end="125:26">version_id</name> <operator pos:start="125:28" pos:end="125:28">&gt;</operator> <name pos:start="125:30" pos:end="125:43"><name pos:start="125:30" pos:end="125:31">se</name><operator pos:start="125:32" pos:end="125:33">-&gt;</operator><name pos:start="125:34" pos:end="125:43">version_id</name></name></expr>)</condition> <block pos:start="125:46" pos:end="135:13">{<block_content pos:start="127:17" pos:end="133:25">

                <expr_stmt pos:start="127:17" pos:end="129:64"><expr pos:start="127:17" pos:end="129:63"><call pos:start="127:17" pos:end="129:63"><name pos:start="127:17" pos:end="127:28">error_report</name><argument_list pos:start="127:29" pos:end="129:63">(<argument pos:start="127:30" pos:end="127:74"><expr pos:start="127:30" pos:end="127:74"><literal type="string" pos:start="127:30" pos:end="127:74">"savevm: unsupported version %d for '%s' v%d"</literal></expr></argument>,

                             <argument pos:start="129:30" pos:end="129:39"><expr pos:start="129:30" pos:end="129:39"><name pos:start="129:30" pos:end="129:39">version_id</name></expr></argument>, <argument pos:start="129:42" pos:end="129:46"><expr pos:start="129:42" pos:end="129:46"><name pos:start="129:42" pos:end="129:46">idstr</name></expr></argument>, <argument pos:start="129:49" pos:end="129:62"><expr pos:start="129:49" pos:end="129:62"><name pos:start="129:49" pos:end="129:62"><name pos:start="129:49" pos:end="129:50">se</name><operator pos:start="129:51" pos:end="129:52">-&gt;</operator><name pos:start="129:53" pos:end="129:62">version_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:30"><expr pos:start="131:17" pos:end="131:29"><name pos:start="131:17" pos:end="131:19">ret</name> <operator pos:start="131:21" pos:end="131:21">=</operator> <operator pos:start="131:23" pos:end="131:23">-</operator><name pos:start="131:24" pos:end="131:29">EINVAL</name></expr>;</expr_stmt>

                <goto pos:start="133:17" pos:end="133:25">goto <name pos:start="133:22" pos:end="133:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="139:13" pos:end="139:27">/* Add entry */</comment>

            <expr_stmt pos:start="141:13" pos:end="141:40"><expr pos:start="141:13" pos:end="141:39"><name pos:start="141:13" pos:end="141:14">le</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <call pos:start="141:18" pos:end="141:39"><name pos:start="141:18" pos:end="141:26">g_malloc0</name><argument_list pos:start="141:27" pos:end="141:39">(<argument pos:start="141:28" pos:end="141:38"><expr pos:start="141:28" pos:end="141:38"><sizeof pos:start="141:28" pos:end="141:38">sizeof<argument_list pos:start="141:34" pos:end="141:38">(<argument pos:start="141:35" pos:end="141:37"><expr pos:start="141:35" pos:end="141:37"><operator pos:start="141:35" pos:end="141:35">*</operator><name pos:start="141:36" pos:end="141:37">le</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="145:13" pos:end="145:24"><expr pos:start="145:13" pos:end="145:23"><name pos:start="145:13" pos:end="145:18"><name pos:start="145:13" pos:end="145:14">le</name><operator pos:start="145:15" pos:end="145:16">-&gt;</operator><name pos:start="145:17" pos:end="145:18">se</name></name> <operator pos:start="145:20" pos:end="145:20">=</operator> <name pos:start="145:22" pos:end="145:23">se</name></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:40"><expr pos:start="147:13" pos:end="147:39"><name pos:start="147:13" pos:end="147:26"><name pos:start="147:13" pos:end="147:14">le</name><operator pos:start="147:15" pos:end="147:16">-&gt;</operator><name pos:start="147:17" pos:end="147:26">section_id</name></name> <operator pos:start="147:28" pos:end="147:28">=</operator> <name pos:start="147:30" pos:end="147:39">section_id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:40"><expr pos:start="149:13" pos:end="149:39"><name pos:start="149:13" pos:end="149:26"><name pos:start="149:13" pos:end="149:14">le</name><operator pos:start="149:15" pos:end="149:16">-&gt;</operator><name pos:start="149:17" pos:end="149:26">version_id</name></name> <operator pos:start="149:28" pos:end="149:28">=</operator> <name pos:start="149:30" pos:end="149:39">version_id</name></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:59"><expr pos:start="151:13" pos:end="151:58"><call pos:start="151:13" pos:end="151:58"><name pos:start="151:13" pos:end="151:29">QLIST_INSERT_HEAD</name><argument_list pos:start="151:30" pos:end="151:58">(<argument pos:start="151:31" pos:end="151:46"><expr pos:start="151:31" pos:end="151:46"><operator pos:start="151:31" pos:end="151:31">&amp;</operator><name pos:start="151:32" pos:end="151:46">loadvm_handlers</name></expr></argument>, <argument pos:start="151:49" pos:end="151:50"><expr pos:start="151:49" pos:end="151:50"><name pos:start="151:49" pos:end="151:50">le</name></expr></argument>, <argument pos:start="151:53" pos:end="151:57"><expr pos:start="151:53" pos:end="151:57"><name pos:start="151:53" pos:end="151:57">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="155:13" pos:end="155:58"><expr pos:start="155:13" pos:end="155:57"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <call pos:start="155:19" pos:end="155:57"><name pos:start="155:19" pos:end="155:30">vmstate_load</name><argument_list pos:start="155:31" pos:end="155:57">(<argument pos:start="155:32" pos:end="155:32"><expr pos:start="155:32" pos:end="155:32"><name pos:start="155:32" pos:end="155:32">f</name></expr></argument>, <argument pos:start="155:35" pos:end="155:40"><expr pos:start="155:35" pos:end="155:40"><name pos:start="155:35" pos:end="155:40"><name pos:start="155:35" pos:end="155:36">le</name><operator pos:start="155:37" pos:end="155:38">-&gt;</operator><name pos:start="155:39" pos:end="155:40">se</name></name></expr></argument>, <argument pos:start="155:43" pos:end="155:56"><expr pos:start="155:43" pos:end="155:56"><name pos:start="155:43" pos:end="155:56"><name pos:start="155:43" pos:end="155:44">le</name><operator pos:start="155:45" pos:end="155:46">-&gt;</operator><name pos:start="155:47" pos:end="155:56">version_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="157:13" pos:end="165:13"><if pos:start="157:13" pos:end="165:13">if <condition pos:start="157:16" pos:end="157:24">(<expr pos:start="157:17" pos:end="157:23"><name pos:start="157:17" pos:end="157:19">ret</name> <operator pos:start="157:21" pos:end="157:21">&lt;</operator> <literal type="number" pos:start="157:23" pos:end="157:23">0</literal></expr>)</condition> <block pos:start="157:26" pos:end="165:13">{<block_content pos:start="159:17" pos:end="163:25">

                <expr_stmt pos:start="159:17" pos:end="161:65"><expr pos:start="159:17" pos:end="161:64"><call pos:start="159:17" pos:end="161:64"><name pos:start="159:17" pos:end="159:28">error_report</name><argument_list pos:start="159:29" pos:end="161:64">(<argument pos:start="159:30" pos:end="161:43"><expr pos:start="159:30" pos:end="161:43"><literal type="string" pos:start="159:30" pos:end="159:77">"error while loading state for instance 0x%x of"</literal>

                             <literal type="string" pos:start="161:30" pos:end="161:43">" device '%s'"</literal></expr></argument>, <argument pos:start="161:46" pos:end="161:56"><expr pos:start="161:46" pos:end="161:56"><name pos:start="161:46" pos:end="161:56">instance_id</name></expr></argument>, <argument pos:start="161:59" pos:end="161:63"><expr pos:start="161:59" pos:end="161:63"><name pos:start="161:59" pos:end="161:63">idstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="163:17" pos:end="163:25">goto <name pos:start="163:22" pos:end="163:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="167:13" pos:end="167:18">break;</break>

        <case pos:start="169:9" pos:end="169:34">case <expr pos:start="169:14" pos:end="169:33"><name pos:start="169:14" pos:end="169:33">QEMU_VM_SECTION_PART</name></expr>:</case>

        <case pos:start="171:9" pos:end="171:33">case <expr pos:start="171:14" pos:end="171:32"><name pos:start="171:14" pos:end="171:32">QEMU_VM_SECTION_END</name></expr>:</case>

            <expr_stmt pos:start="173:13" pos:end="173:42"><expr pos:start="173:13" pos:end="173:41"><name pos:start="173:13" pos:end="173:22">section_id</name> <operator pos:start="173:24" pos:end="173:24">=</operator> <call pos:start="173:26" pos:end="173:41"><name pos:start="173:26" pos:end="173:38">qemu_get_be32</name><argument_list pos:start="173:39" pos:end="173:41">(<argument pos:start="173:40" pos:end="173:40"><expr pos:start="173:40" pos:end="173:40"><name pos:start="173:40" pos:end="173:40">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="177:13" pos:end="177:64"><expr pos:start="177:13" pos:end="177:63"><call pos:start="177:13" pos:end="177:63"><name pos:start="177:13" pos:end="177:51">trace_qemu_loadvm_state_section_partend</name><argument_list pos:start="177:52" pos:end="177:63">(<argument pos:start="177:53" pos:end="177:62"><expr pos:start="177:53" pos:end="177:62"><name pos:start="177:53" pos:end="177:62">section_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro pos:start="179:13" pos:end="179:54"><name pos:start="179:13" pos:end="179:25">QLIST_FOREACH</name><argument_list pos:start="179:26" pos:end="179:54">(<argument pos:start="179:27" pos:end="179:28">le</argument>, <argument pos:start="179:31" pos:end="179:46">&amp;loadvm_handlers</argument>, <argument pos:start="179:49" pos:end="179:53">entry</argument>)</argument_list></macro> <block pos:start="179:56" pos:end="187:13">{<block_content pos:start="181:17" pos:end="185:17">

                <if_stmt pos:start="181:17" pos:end="185:17"><if pos:start="181:17" pos:end="185:17">if <condition pos:start="181:20" pos:end="181:49">(<expr pos:start="181:21" pos:end="181:48"><name pos:start="181:21" pos:end="181:34"><name pos:start="181:21" pos:end="181:22">le</name><operator pos:start="181:23" pos:end="181:24">-&gt;</operator><name pos:start="181:25" pos:end="181:34">section_id</name></name> <operator pos:start="181:36" pos:end="181:37">==</operator> <name pos:start="181:39" pos:end="181:48">section_id</name></expr>)</condition> <block pos:start="181:51" pos:end="185:17">{<block_content pos:start="183:21" pos:end="183:26">

                    <break pos:start="183:21" pos:end="183:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

            <if_stmt pos:start="189:13" pos:end="197:13"><if pos:start="189:13" pos:end="197:13">if <condition pos:start="189:16" pos:end="189:27">(<expr pos:start="189:17" pos:end="189:26"><name pos:start="189:17" pos:end="189:18">le</name> <operator pos:start="189:20" pos:end="189:21">==</operator> <name pos:start="189:23" pos:end="189:26">NULL</name></expr>)</condition> <block pos:start="189:29" pos:end="197:13">{<block_content pos:start="191:17" pos:end="195:25">

                <expr_stmt pos:start="191:17" pos:end="191:70"><expr pos:start="191:17" pos:end="191:69"><call pos:start="191:17" pos:end="191:69"><name pos:start="191:17" pos:end="191:28">error_report</name><argument_list pos:start="191:29" pos:end="191:69">(<argument pos:start="191:30" pos:end="191:56"><expr pos:start="191:30" pos:end="191:56"><literal type="string" pos:start="191:30" pos:end="191:56">"Unknown savevm section %d"</literal></expr></argument>, <argument pos:start="191:59" pos:end="191:68"><expr pos:start="191:59" pos:end="191:68"><name pos:start="191:59" pos:end="191:68">section_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:30"><expr pos:start="193:17" pos:end="193:29"><name pos:start="193:17" pos:end="193:19">ret</name> <operator pos:start="193:21" pos:end="193:21">=</operator> <operator pos:start="193:23" pos:end="193:23">-</operator><name pos:start="193:24" pos:end="193:29">EINVAL</name></expr>;</expr_stmt>

                <goto pos:start="195:17" pos:end="195:25">goto <name pos:start="195:22" pos:end="195:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="201:13" pos:end="201:58"><expr pos:start="201:13" pos:end="201:57"><name pos:start="201:13" pos:end="201:15">ret</name> <operator pos:start="201:17" pos:end="201:17">=</operator> <call pos:start="201:19" pos:end="201:57"><name pos:start="201:19" pos:end="201:30">vmstate_load</name><argument_list pos:start="201:31" pos:end="201:57">(<argument pos:start="201:32" pos:end="201:32"><expr pos:start="201:32" pos:end="201:32"><name pos:start="201:32" pos:end="201:32">f</name></expr></argument>, <argument pos:start="201:35" pos:end="201:40"><expr pos:start="201:35" pos:end="201:40"><name pos:start="201:35" pos:end="201:40"><name pos:start="201:35" pos:end="201:36">le</name><operator pos:start="201:37" pos:end="201:38">-&gt;</operator><name pos:start="201:39" pos:end="201:40">se</name></name></expr></argument>, <argument pos:start="201:43" pos:end="201:56"><expr pos:start="201:43" pos:end="201:56"><name pos:start="201:43" pos:end="201:56"><name pos:start="201:43" pos:end="201:44">le</name><operator pos:start="201:45" pos:end="201:46">-&gt;</operator><name pos:start="201:47" pos:end="201:56">version_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="203:13" pos:end="211:13"><if pos:start="203:13" pos:end="211:13">if <condition pos:start="203:16" pos:end="203:24">(<expr pos:start="203:17" pos:end="203:23"><name pos:start="203:17" pos:end="203:19">ret</name> <operator pos:start="203:21" pos:end="203:21">&lt;</operator> <literal type="number" pos:start="203:23" pos:end="203:23">0</literal></expr>)</condition> <block pos:start="203:26" pos:end="211:13">{<block_content pos:start="205:17" pos:end="209:25">

                <expr_stmt pos:start="205:17" pos:end="207:56"><expr pos:start="205:17" pos:end="207:55"><call pos:start="205:17" pos:end="207:55"><name pos:start="205:17" pos:end="205:28">error_report</name><argument_list pos:start="205:29" pos:end="207:55">(<argument pos:start="205:30" pos:end="205:74"><expr pos:start="205:30" pos:end="205:74"><literal type="string" pos:start="205:30" pos:end="205:74">"error while loading state section id %d(%s)"</literal></expr></argument>,

                             <argument pos:start="207:30" pos:end="207:39"><expr pos:start="207:30" pos:end="207:39"><name pos:start="207:30" pos:end="207:39">section_id</name></expr></argument>, <argument pos:start="207:42" pos:end="207:54"><expr pos:start="207:42" pos:end="207:54"><name pos:start="207:42" pos:end="207:54"><name pos:start="207:42" pos:end="207:43">le</name><operator pos:start="207:44" pos:end="207:45">-&gt;</operator><name pos:start="207:46" pos:end="207:47">se</name><operator pos:start="207:48" pos:end="207:49">-&gt;</operator><name pos:start="207:50" pos:end="207:54">idstr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="209:17" pos:end="209:25">goto <name pos:start="209:22" pos:end="209:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <break pos:start="213:13" pos:end="213:18">break;</break>

        <default pos:start="215:9" pos:end="215:16">default:</default>

            <expr_stmt pos:start="217:13" pos:end="217:73"><expr pos:start="217:13" pos:end="217:72"><call pos:start="217:13" pos:end="217:72"><name pos:start="217:13" pos:end="217:24">error_report</name><argument_list pos:start="217:25" pos:end="217:72">(<argument pos:start="217:26" pos:end="217:57"><expr pos:start="217:26" pos:end="217:57"><literal type="string" pos:start="217:26" pos:end="217:57">"Unknown savevm section type %d"</literal></expr></argument>, <argument pos:start="217:60" pos:end="217:71"><expr pos:start="217:60" pos:end="217:71"><name pos:start="217:60" pos:end="217:71">section_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:26"><expr pos:start="219:13" pos:end="219:25"><name pos:start="219:13" pos:end="219:15">ret</name> <operator pos:start="219:17" pos:end="219:17">=</operator> <operator pos:start="219:19" pos:end="219:19">-</operator><name pos:start="219:20" pos:end="219:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="221:13" pos:end="221:21">goto <name pos:start="221:18" pos:end="221:20">out</name>;</goto>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <expr_stmt pos:start="229:5" pos:end="229:50"><expr pos:start="229:5" pos:end="229:49"><name pos:start="229:5" pos:end="229:24">file_error_after_eof</name> <operator pos:start="229:26" pos:end="229:26">=</operator> <call pos:start="229:28" pos:end="229:49"><name pos:start="229:28" pos:end="229:46">qemu_file_get_error</name><argument_list pos:start="229:47" pos:end="229:49">(<argument pos:start="229:48" pos:end="229:48"><expr pos:start="229:48" pos:end="229:48"><name pos:start="229:48" pos:end="229:48">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="233:5" pos:end="239:7">/*

     * Try to read in the VMDESC section as well, so that dumping tools that

     * intercept our migration stream have the chance to see it.

     */</comment>

    <if_stmt pos:start="241:5" pos:end="261:5"><if pos:start="241:5" pos:end="261:5">if <condition pos:start="241:8" pos:end="241:50">(<expr pos:start="241:9" pos:end="241:49"><call pos:start="241:9" pos:end="241:24"><name pos:start="241:9" pos:end="241:21">qemu_get_byte</name><argument_list pos:start="241:22" pos:end="241:24">(<argument pos:start="241:23" pos:end="241:23"><expr pos:start="241:23" pos:end="241:23"><name pos:start="241:23" pos:end="241:23">f</name></expr></argument>)</argument_list></call> <operator pos:start="241:26" pos:end="241:27">==</operator> <name pos:start="241:29" pos:end="241:49">QEMU_VM_VMDESCRIPTION</name></expr>)</condition> <block pos:start="241:52" pos:end="261:5">{<block_content pos:start="243:9" pos:end="259:20">

        <decl_stmt pos:start="243:9" pos:end="243:41"><decl pos:start="243:9" pos:end="243:40"><type pos:start="243:9" pos:end="243:16"><name pos:start="243:9" pos:end="243:16">uint32_t</name></type> <name pos:start="243:18" pos:end="243:21">size</name> <init pos:start="243:23" pos:end="243:40">= <expr pos:start="243:25" pos:end="243:40"><call pos:start="243:25" pos:end="243:40"><name pos:start="243:25" pos:end="243:37">qemu_get_be32</name><argument_list pos:start="243:38" pos:end="243:40">(<argument pos:start="243:39" pos:end="243:39"><expr pos:start="243:39" pos:end="243:39"><name pos:start="243:39" pos:end="243:39">f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="245:9" pos:end="245:40"><decl pos:start="245:9" pos:end="245:39"><type pos:start="245:9" pos:end="245:17"><name pos:start="245:9" pos:end="245:15">uint8_t</name> <modifier pos:start="245:17" pos:end="245:17">*</modifier></type><name pos:start="245:18" pos:end="245:20">buf</name> <init pos:start="245:22" pos:end="245:39">= <expr pos:start="245:24" pos:end="245:39"><call pos:start="245:24" pos:end="245:39"><name pos:start="245:24" pos:end="245:31">g_malloc</name><argument_list pos:start="245:32" pos:end="245:39">(<argument pos:start="245:33" pos:end="245:38"><expr pos:start="245:33" pos:end="245:38"><literal type="number" pos:start="245:33" pos:end="245:38">0x1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <while pos:start="249:9" pos:end="257:9">while <condition pos:start="249:15" pos:end="249:24">(<expr pos:start="249:16" pos:end="249:23"><name pos:start="249:16" pos:end="249:19">size</name> <operator pos:start="249:21" pos:end="249:21">&gt;</operator> <literal type="number" pos:start="249:23" pos:end="249:23">0</literal></expr>)</condition> <block pos:start="249:26" pos:end="257:9">{<block_content pos:start="251:13" pos:end="255:31">

            <decl_stmt pos:start="251:13" pos:end="251:52"><decl pos:start="251:13" pos:end="251:51"><type pos:start="251:13" pos:end="251:20"><name pos:start="251:13" pos:end="251:20">uint32_t</name></type> <name pos:start="251:22" pos:end="251:31">read_chunk</name> <init pos:start="251:33" pos:end="251:51">= <expr pos:start="251:35" pos:end="251:51"><call pos:start="251:35" pos:end="251:51"><name pos:start="251:35" pos:end="251:37">MIN</name><argument_list pos:start="251:38" pos:end="251:51">(<argument pos:start="251:39" pos:end="251:42"><expr pos:start="251:39" pos:end="251:42"><name pos:start="251:39" pos:end="251:42">size</name></expr></argument>, <argument pos:start="251:45" pos:end="251:50"><expr pos:start="251:45" pos:end="251:50"><literal type="number" pos:start="251:45" pos:end="251:50">0x1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:48"><expr pos:start="253:13" pos:end="253:47"><call pos:start="253:13" pos:end="253:47"><name pos:start="253:13" pos:end="253:27">qemu_get_buffer</name><argument_list pos:start="253:28" pos:end="253:47">(<argument pos:start="253:29" pos:end="253:29"><expr pos:start="253:29" pos:end="253:29"><name pos:start="253:29" pos:end="253:29">f</name></expr></argument>, <argument pos:start="253:32" pos:end="253:34"><expr pos:start="253:32" pos:end="253:34"><name pos:start="253:32" pos:end="253:34">buf</name></expr></argument>, <argument pos:start="253:37" pos:end="253:46"><expr pos:start="253:37" pos:end="253:46"><name pos:start="253:37" pos:end="253:46">read_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:31"><expr pos:start="255:13" pos:end="255:30"><name pos:start="255:13" pos:end="255:16">size</name> <operator pos:start="255:18" pos:end="255:19">-=</operator> <name pos:start="255:21" pos:end="255:30">read_chunk</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="259:9" pos:end="259:20"><expr pos:start="259:9" pos:end="259:19"><call pos:start="259:9" pos:end="259:19"><name pos:start="259:9" pos:end="259:14">g_free</name><argument_list pos:start="259:15" pos:end="259:19">(<argument pos:start="259:16" pos:end="259:18"><expr pos:start="259:16" pos:end="259:18"><name pos:start="259:16" pos:end="259:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="265:5" pos:end="265:36"><expr pos:start="265:5" pos:end="265:35"><call pos:start="265:5" pos:end="265:35"><name pos:start="265:5" pos:end="265:33">cpu_synchronize_all_post_init</name><argument_list pos:start="265:34" pos:end="265:35">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="269:5" pos:end="269:12"><expr pos:start="269:5" pos:end="269:11"><name pos:start="269:5" pos:end="269:7">ret</name> <operator pos:start="269:9" pos:end="269:9">=</operator> <literal type="number" pos:start="269:11" pos:end="269:11">0</literal></expr>;</expr_stmt>



<label pos:start="273:1" pos:end="273:4"><name pos:start="273:1" pos:end="273:3">out</name>:</label>

    <macro pos:start="275:5" pos:end="275:59"><name pos:start="275:5" pos:end="275:22">QLIST_FOREACH_SAFE</name><argument_list pos:start="275:23" pos:end="275:59">(<argument pos:start="275:24" pos:end="275:25">le</argument>, <argument pos:start="275:28" pos:end="275:43">&amp;loadvm_handlers</argument>, <argument pos:start="275:46" pos:end="275:50">entry</argument>, <argument pos:start="275:53" pos:end="275:58">new_le</argument>)</argument_list></macro> <block pos:start="275:61" pos:end="281:5">{<block_content pos:start="277:9" pos:end="279:19">

        <expr_stmt pos:start="277:9" pos:end="277:32"><expr pos:start="277:9" pos:end="277:31"><call pos:start="277:9" pos:end="277:31"><name pos:start="277:9" pos:end="277:20">QLIST_REMOVE</name><argument_list pos:start="277:21" pos:end="277:31">(<argument pos:start="277:22" pos:end="277:23"><expr pos:start="277:22" pos:end="277:23"><name pos:start="277:22" pos:end="277:23">le</name></expr></argument>, <argument pos:start="277:26" pos:end="277:30"><expr pos:start="277:26" pos:end="277:30"><name pos:start="277:26" pos:end="277:30">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:19"><expr pos:start="279:9" pos:end="279:18"><call pos:start="279:9" pos:end="279:18"><name pos:start="279:9" pos:end="279:14">g_free</name><argument_list pos:start="279:15" pos:end="279:18">(<argument pos:start="279:16" pos:end="279:17"><expr pos:start="279:16" pos:end="279:17"><name pos:start="279:16" pos:end="279:17">le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>



    <if_stmt pos:start="285:5" pos:end="291:5"><if pos:start="285:5" pos:end="291:5">if <condition pos:start="285:8" pos:end="285:17">(<expr pos:start="285:9" pos:end="285:16"><name pos:start="285:9" pos:end="285:11">ret</name> <operator pos:start="285:13" pos:end="285:14">==</operator> <literal type="number" pos:start="285:16" pos:end="285:16">0</literal></expr>)</condition> <block pos:start="285:19" pos:end="291:5">{<block_content pos:start="289:9" pos:end="289:35">

        <comment type="block" pos:start="287:9" pos:end="287:73">/* We may not have a VMDESC section, so ignore relative errors */</comment>

        <expr_stmt pos:start="289:9" pos:end="289:35"><expr pos:start="289:9" pos:end="289:34"><name pos:start="289:9" pos:end="289:11">ret</name> <operator pos:start="289:13" pos:end="289:13">=</operator> <name pos:start="289:15" pos:end="289:34">file_error_after_eof</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="295:5" pos:end="295:15">return <expr pos:start="295:12" pos:end="295:14"><name pos:start="295:12" pos:end="295:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
