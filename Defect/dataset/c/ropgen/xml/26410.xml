<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26410.c" pos:tabs="8"><function pos:start="1:1" pos:end="147:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:30">qemu_rdma_poll</name><parameter_list pos:start="1:31" pos:end="1:70">(<parameter pos:start="1:32" pos:end="1:48"><decl pos:start="1:32" pos:end="1:48"><type pos:start="1:32" pos:end="1:48"><name pos:start="1:32" pos:end="1:42">RDMAContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:48">rdma</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:69"><decl pos:start="1:51" pos:end="1:69"><type pos:start="1:51" pos:end="1:69"><name pos:start="1:51" pos:end="1:58">uint64_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:69">wr_id_out</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="147:1">{<block_content pos:start="5:5" pos:end="145:14">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:17">ibv_wc</name></name></type> <name pos:start="7:19" pos:end="7:20">wc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:18">wr_id</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:40"><expr pos:start="13:5" pos:end="13:39"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:39"><name pos:start="13:11" pos:end="13:21">ibv_poll_cq</name><argument_list pos:start="13:22" pos:end="13:39">(<argument pos:start="13:23" pos:end="13:30"><expr pos:start="13:23" pos:end="13:30"><name pos:start="13:23" pos:end="13:30"><name pos:start="13:23" pos:end="13:26">rdma</name><operator pos:start="13:27" pos:end="13:28">-&gt;</operator><name pos:start="13:29" pos:end="13:30">cq</name></name></expr></argument>, <argument pos:start="13:33" pos:end="13:33"><expr pos:start="13:33" pos:end="13:33"><literal type="number" pos:start="13:33" pos:end="13:33">1</literal></expr></argument>, <argument pos:start="13:36" pos:end="13:38"><expr pos:start="13:36" pos:end="13:38"><operator pos:start="13:36" pos:end="13:36">&amp;</operator><name pos:start="13:37" pos:end="13:38">wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:13">(<expr pos:start="17:9" pos:end="17:12"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:12">ret</name></expr>)</condition> <block pos:start="17:15" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:17">

        <expr_stmt pos:start="19:9" pos:end="19:36"><expr pos:start="19:9" pos:end="19:35"><operator pos:start="19:9" pos:end="19:9">*</operator><name pos:start="19:10" pos:end="19:18">wr_id_out</name> <operator pos:start="19:20" pos:end="19:20">=</operator> <name pos:start="19:22" pos:end="19:35">RDMA_WRID_NONE</name></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">&lt;</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>)</condition> <block pos:start="27:18" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:19">

        <expr_stmt pos:start="29:9" pos:end="29:57"><expr pos:start="29:9" pos:end="29:56"><call pos:start="29:9" pos:end="29:56"><name pos:start="29:9" pos:end="29:15">fprintf</name><argument_list pos:start="29:16" pos:end="29:56">(<argument pos:start="29:17" pos:end="29:22"><expr pos:start="29:17" pos:end="29:22"><name pos:start="29:17" pos:end="29:22">stderr</name></expr></argument>, <argument pos:start="29:25" pos:end="29:50"><expr pos:start="29:25" pos:end="29:50"><literal type="string" pos:start="29:25" pos:end="29:50">"ibv_poll_cq return %d!\n"</literal></expr></argument>, <argument pos:start="29:53" pos:end="29:55"><expr pos:start="29:53" pos:end="29:55"><name pos:start="29:53" pos:end="29:55">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:19">return <expr pos:start="31:16" pos:end="31:18"><name pos:start="31:16" pos:end="31:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:43"><expr pos:start="37:5" pos:end="37:42"><name pos:start="37:5" pos:end="37:9">wr_id</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <name pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:14">wc</name><operator pos:start="37:15" pos:end="37:15">.</operator><name pos:start="37:16" pos:end="37:20">wr_id</name></name> <operator pos:start="37:22" pos:end="37:22">&amp;</operator> <name pos:start="37:24" pos:end="37:42">RDMA_WRID_TYPE_MASK</name></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="53:5"><if pos:start="41:5" pos:end="53:5">if <condition pos:start="41:8" pos:end="41:36">(<expr pos:start="41:9" pos:end="41:35"><name pos:start="41:9" pos:end="41:17"><name pos:start="41:9" pos:end="41:10">wc</name><operator pos:start="41:11" pos:end="41:11">.</operator><name pos:start="41:12" pos:end="41:17">status</name></name> <operator pos:start="41:19" pos:end="41:20">!=</operator> <name pos:start="41:22" pos:end="41:35">IBV_WC_SUCCESS</name></expr>)</condition> <block pos:start="41:38" pos:end="53:5">{<block_content pos:start="43:9" pos:end="51:18">

        <expr_stmt pos:start="43:9" pos:end="45:65"><expr pos:start="43:9" pos:end="45:64"><call pos:start="43:9" pos:end="45:64"><name pos:start="43:9" pos:end="43:15">fprintf</name><argument_list pos:start="43:16" pos:end="45:64">(<argument pos:start="43:17" pos:end="43:22"><expr pos:start="43:17" pos:end="43:22"><name pos:start="43:17" pos:end="43:22">stderr</name></expr></argument>, <argument pos:start="43:25" pos:end="43:56"><expr pos:start="43:25" pos:end="43:56"><literal type="string" pos:start="43:25" pos:end="43:56">"ibv_poll_cq wc.status=%d %s!\n"</literal></expr></argument>,

                        <argument pos:start="45:25" pos:end="45:33"><expr pos:start="45:25" pos:end="45:33"><name pos:start="45:25" pos:end="45:33"><name pos:start="45:25" pos:end="45:26">wc</name><operator pos:start="45:27" pos:end="45:27">.</operator><name pos:start="45:28" pos:end="45:33">status</name></name></expr></argument>, <argument pos:start="45:36" pos:end="45:63"><expr pos:start="45:36" pos:end="45:63"><call pos:start="45:36" pos:end="45:63"><name pos:start="45:36" pos:end="45:52">ibv_wc_status_str</name><argument_list pos:start="45:53" pos:end="45:63">(<argument pos:start="45:54" pos:end="45:62"><expr pos:start="45:54" pos:end="45:62"><name pos:start="45:54" pos:end="45:62"><name pos:start="45:54" pos:end="45:55">wc</name><operator pos:start="45:56" pos:end="45:56">.</operator><name pos:start="45:57" pos:end="45:62">status</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:68"><expr pos:start="47:9" pos:end="47:67"><call pos:start="47:9" pos:end="47:67"><name pos:start="47:9" pos:end="47:15">fprintf</name><argument_list pos:start="47:16" pos:end="47:67">(<argument pos:start="47:17" pos:end="47:22"><expr pos:start="47:17" pos:end="47:22"><name pos:start="47:17" pos:end="47:22">stderr</name></expr></argument>, <argument pos:start="47:25" pos:end="47:48"><expr pos:start="47:25" pos:end="47:48"><literal type="string" pos:start="47:25" pos:end="47:48">"ibv_poll_cq wrid=%s!\n"</literal></expr></argument>, <argument pos:start="47:51" pos:end="47:66"><expr pos:start="47:51" pos:end="47:66"><name pos:start="47:51" pos:end="47:66"><name pos:start="47:51" pos:end="47:59">wrid_desc</name><index pos:start="47:60" pos:end="47:66">[<expr pos:start="47:61" pos:end="47:65"><name pos:start="47:61" pos:end="47:65">wr_id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="69:5"><if pos:start="57:5" pos:end="69:5">if <condition pos:start="57:8" pos:end="59:42">(<expr pos:start="57:9" pos:end="59:41"><name pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:12">rdma</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:36">control_ready_expected</name></name> <operator pos:start="57:38" pos:end="57:39">&amp;&amp;</operator>

        <operator pos:start="59:9" pos:end="59:9">(</operator><name pos:start="59:10" pos:end="59:14">wr_id</name> <operator pos:start="59:16" pos:end="59:17">&gt;=</operator> <name pos:start="59:19" pos:end="59:40">RDMA_WRID_RECV_CONTROL</name><operator pos:start="59:41" pos:end="59:41">)</operator></expr>)</condition> <block pos:start="59:44" pos:end="69:5">{<block_content pos:start="61:9" pos:end="67:41">

        <expr_stmt pos:start="61:9" pos:end="65:72"><expr pos:start="61:9" pos:end="65:71"><call pos:start="61:9" pos:end="65:71"><name pos:start="61:9" pos:end="61:17">DDDPRINTF</name><argument_list pos:start="61:18" pos:end="65:71">(<argument pos:start="61:19" pos:end="63:30"><expr pos:start="61:19" pos:end="63:30"><literal type="string" pos:start="61:19" pos:end="61:36">"completion %s #%"</literal> <name pos:start="61:38" pos:end="61:43">PRId64</name> <literal type="string" pos:start="61:45" pos:end="61:58">" received (%"</literal> <name pos:start="61:60" pos:end="61:65">PRId64</name> <literal type="string" pos:start="61:67" pos:end="61:69">")"</literal>

                  <literal type="string" pos:start="63:19" pos:end="63:30">" left %d\n"</literal></expr></argument>, <argument pos:start="63:33" pos:end="63:65"><expr pos:start="63:33" pos:end="63:65"><name pos:start="63:33" pos:end="63:65"><name pos:start="63:33" pos:end="63:41">wrid_desc</name><index pos:start="63:42" pos:end="63:65">[<expr pos:start="63:43" pos:end="63:64"><name pos:start="63:43" pos:end="63:64">RDMA_WRID_RECV_CONTROL</name></expr>]</index></name></expr></argument>,

                  <argument pos:start="65:19" pos:end="65:48"><expr pos:start="65:19" pos:end="65:48"><name pos:start="65:19" pos:end="65:23">wr_id</name> <operator pos:start="65:25" pos:end="65:25">-</operator> <name pos:start="65:27" pos:end="65:48">RDMA_WRID_RECV_CONTROL</name></expr></argument>, <argument pos:start="65:51" pos:end="65:55"><expr pos:start="65:51" pos:end="65:55"><name pos:start="65:51" pos:end="65:55">wr_id</name></expr></argument>, <argument pos:start="65:58" pos:end="65:70"><expr pos:start="65:58" pos:end="65:70"><name pos:start="65:58" pos:end="65:70"><name pos:start="65:58" pos:end="65:61">rdma</name><operator pos:start="65:62" pos:end="65:63">-&gt;</operator><name pos:start="65:64" pos:end="65:70">nb_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:41"><expr pos:start="67:9" pos:end="67:40"><name pos:start="67:9" pos:end="67:36"><name pos:start="67:9" pos:end="67:12">rdma</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:36">control_ready_expected</name></name> <operator pos:start="67:38" pos:end="67:38">=</operator> <literal type="number" pos:start="67:40" pos:end="67:40">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="137:5"><if pos:start="73:5" pos:end="131:5">if <condition pos:start="73:8" pos:end="73:38">(<expr pos:start="73:9" pos:end="73:37"><name pos:start="73:9" pos:end="73:13">wr_id</name> <operator pos:start="73:15" pos:end="73:16">==</operator> <name pos:start="73:18" pos:end="73:37">RDMA_WRID_RDMA_WRITE</name></expr>)</condition> <block pos:start="73:40" pos:end="131:5">{<block_content pos:start="75:9" pos:end="129:9">

        <decl_stmt pos:start="75:9" pos:end="77:71"><decl pos:start="75:9" pos:end="77:70"><type pos:start="75:9" pos:end="75:16"><name pos:start="75:9" pos:end="75:16">uint64_t</name></type> <name pos:start="75:18" pos:end="75:22">chunk</name> <init pos:start="75:24" pos:end="77:70">=

            <expr pos:start="77:13" pos:end="77:70"><operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:21"><name pos:start="77:14" pos:end="77:15">wc</name><operator pos:start="77:16" pos:end="77:16">.</operator><name pos:start="77:17" pos:end="77:21">wr_id</name></name> <operator pos:start="77:23" pos:end="77:23">&amp;</operator> <name pos:start="77:25" pos:end="77:44">RDMA_WRID_CHUNK_MASK</name><operator pos:start="77:45" pos:end="77:45">)</operator> <operator pos:start="77:47" pos:end="77:48">&gt;&gt;</operator> <name pos:start="77:50" pos:end="77:70">RDMA_WRID_CHUNK_SHIFT</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="79:9" pos:end="81:71"><decl pos:start="79:9" pos:end="81:70"><type pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:16">uint64_t</name></type> <name pos:start="79:18" pos:end="79:22">index</name> <init pos:start="79:24" pos:end="81:70">=

            <expr pos:start="81:13" pos:end="81:70"><operator pos:start="81:13" pos:end="81:13">(</operator><name pos:start="81:14" pos:end="81:21"><name pos:start="81:14" pos:end="81:15">wc</name><operator pos:start="81:16" pos:end="81:16">.</operator><name pos:start="81:17" pos:end="81:21">wr_id</name></name> <operator pos:start="81:23" pos:end="81:23">&amp;</operator> <name pos:start="81:25" pos:end="81:44">RDMA_WRID_BLOCK_MASK</name><operator pos:start="81:45" pos:end="81:45">)</operator> <operator pos:start="81:47" pos:end="81:48">&gt;&gt;</operator> <name pos:start="81:50" pos:end="81:70">RDMA_WRID_BLOCK_SHIFT</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="83:9" pos:end="83:71"><decl pos:start="83:9" pos:end="83:70"><type pos:start="83:9" pos:end="83:24"><name pos:start="83:9" pos:end="83:22">RDMALocalBlock</name> <modifier pos:start="83:24" pos:end="83:24">*</modifier></type><name pos:start="83:25" pos:end="83:29">block</name> <init pos:start="83:31" pos:end="83:70">= <expr pos:start="83:33" pos:end="83:70"><operator pos:start="83:33" pos:end="83:33">&amp;</operator><operator pos:start="83:34" pos:end="83:34">(</operator><name pos:start="83:35" pos:end="83:69"><name pos:start="83:35" pos:end="83:38">rdma</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:56">local_ram_blocks</name><operator pos:start="83:57" pos:end="83:57">.</operator><name pos:start="83:58" pos:end="83:62">block</name><index pos:start="83:63" pos:end="83:69">[<expr pos:start="83:64" pos:end="83:68"><name pos:start="83:64" pos:end="83:68">index</name></expr>]</index></name><operator pos:start="83:70" pos:end="83:70">)</operator></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="87:9" pos:end="93:74"><expr pos:start="87:9" pos:end="93:73"><call pos:start="87:9" pos:end="93:73"><name pos:start="87:9" pos:end="87:17">DDDPRINTF</name><argument_list pos:start="87:18" pos:end="93:73">(<argument pos:start="87:19" pos:end="89:64"><expr pos:start="87:19" pos:end="89:64"><literal type="string" pos:start="87:19" pos:end="87:37">"completions %s (%"</literal> <name pos:start="87:39" pos:end="87:44">PRId64</name> <literal type="string" pos:start="87:46" pos:end="87:58">") left %d, "</literal>

                 <literal type="string" pos:start="89:18" pos:end="89:26">"block %"</literal> <name pos:start="89:28" pos:end="89:33">PRIu64</name> <literal type="string" pos:start="89:35" pos:end="89:46">", chunk: %"</literal> <name pos:start="89:48" pos:end="89:53">PRIu64</name> <literal type="string" pos:start="89:55" pos:end="89:64">" %p %p\n"</literal></expr></argument>,

                 <argument pos:start="91:18" pos:end="91:34"><expr pos:start="91:18" pos:end="91:34"><call pos:start="91:18" pos:end="91:34"><name pos:start="91:18" pos:end="91:27">print_wrid</name><argument_list pos:start="91:28" pos:end="91:34">(<argument pos:start="91:29" pos:end="91:33"><expr pos:start="91:29" pos:end="91:33"><name pos:start="91:29" pos:end="91:33">wr_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="91:37" pos:end="91:41"><expr pos:start="91:37" pos:end="91:41"><name pos:start="91:37" pos:end="91:41">wr_id</name></expr></argument>, <argument pos:start="91:44" pos:end="91:56"><expr pos:start="91:44" pos:end="91:56"><name pos:start="91:44" pos:end="91:56"><name pos:start="91:44" pos:end="91:47">rdma</name><operator pos:start="91:48" pos:end="91:49">-&gt;</operator><name pos:start="91:50" pos:end="91:56">nb_sent</name></name></expr></argument>, <argument pos:start="91:59" pos:end="91:63"><expr pos:start="91:59" pos:end="91:63"><name pos:start="91:59" pos:end="91:63">index</name></expr></argument>, <argument pos:start="91:66" pos:end="91:70"><expr pos:start="91:66" pos:end="91:70"><name pos:start="91:66" pos:end="91:70">chunk</name></expr></argument>,

                 <argument pos:start="93:18" pos:end="93:39"><expr pos:start="93:18" pos:end="93:39"><name pos:start="93:18" pos:end="93:39"><name pos:start="93:18" pos:end="93:22">block</name><operator pos:start="93:23" pos:end="93:24">-&gt;</operator><name pos:start="93:25" pos:end="93:39">local_host_addr</name></name></expr></argument>, <argument pos:start="93:42" pos:end="93:72"><expr pos:start="93:42" pos:end="93:72"><operator pos:start="93:42" pos:end="93:42">(</operator><name pos:start="93:43" pos:end="93:46">void</name> <operator pos:start="93:48" pos:end="93:48">*</operator><operator pos:start="93:49" pos:end="93:49">)</operator><name pos:start="93:50" pos:end="93:72"><name pos:start="93:50" pos:end="93:54">block</name><operator pos:start="93:55" pos:end="93:56">-&gt;</operator><name pos:start="93:57" pos:end="93:72">remote_host_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="97:9" pos:end="97:48"><expr pos:start="97:9" pos:end="97:47"><call pos:start="97:9" pos:end="97:47"><name pos:start="97:9" pos:end="97:17">clear_bit</name><argument_list pos:start="97:18" pos:end="97:47">(<argument pos:start="97:19" pos:end="97:23"><expr pos:start="97:19" pos:end="97:23"><name pos:start="97:19" pos:end="97:23">chunk</name></expr></argument>, <argument pos:start="97:26" pos:end="97:46"><expr pos:start="97:26" pos:end="97:46"><name pos:start="97:26" pos:end="97:46"><name pos:start="97:26" pos:end="97:30">block</name><operator pos:start="97:31" pos:end="97:32">-&gt;</operator><name pos:start="97:33" pos:end="97:46">transit_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="101:9" pos:end="105:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:30">(<expr pos:start="101:13" pos:end="101:29"><name pos:start="101:13" pos:end="101:25"><name pos:start="101:13" pos:end="101:16">rdma</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:25">nb_sent</name></name> <operator pos:start="101:27" pos:end="101:27">&gt;</operator> <literal type="number" pos:start="101:29" pos:end="101:29">0</literal></expr>)</condition> <block pos:start="101:32" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:28">

            <expr_stmt pos:start="103:13" pos:end="103:28"><expr pos:start="103:13" pos:end="103:27"><name pos:start="103:13" pos:end="103:25"><name pos:start="103:13" pos:end="103:16">rdma</name><operator pos:start="103:17" pos:end="103:18">-&gt;</operator><name pos:start="103:19" pos:end="103:25">nb_sent</name></name><operator pos:start="103:26" pos:end="103:27">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="109:9" pos:end="129:9"><if pos:start="109:9" pos:end="129:9">if <condition pos:start="109:12" pos:end="109:27">(<expr pos:start="109:13" pos:end="109:26"><operator pos:start="109:13" pos:end="109:13">!</operator><name pos:start="109:14" pos:end="109:26"><name pos:start="109:14" pos:end="109:17">rdma</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:26">pin_all</name></name></expr>)</condition> <block pos:start="109:29" pos:end="129:9">{<block_content pos:start="125:13" pos:end="128:0">

            <comment type="block" pos:start="111:13" pos:end="121:15">/*

             * FYI: If one wanted to signal a specific chunk to be unregistered

             * using LRU or workload-specific information, this is the function

             * you would call to do so. That chunk would then get asynchronously

             * unregistered later.

             */</comment>

<cpp:ifdef pos:start="123:1" pos:end="123:34">#<cpp:directive pos:start="123:2" pos:end="123:6">ifdef</cpp:directive> <name pos:start="123:8" pos:end="123:34">RDMA_UNREGISTRATION_EXAMPLE</name></cpp:ifdef>

            <expr_stmt pos:start="125:13" pos:end="128:0"><expr pos:start="125:13" pos:end="125:69"><call pos:start="125:13" pos:end="125:69"><name pos:start="125:13" pos:end="125:39">qemu_rdma_signal_unregister</name><argument_list pos:start="125:40" pos:end="125:69">(<argument pos:start="125:41" pos:end="125:44"><expr pos:start="125:41" pos:end="125:44"><name pos:start="125:41" pos:end="125:44">rdma</name></expr></argument>, <argument pos:start="125:47" pos:end="125:51"><expr pos:start="125:47" pos:end="125:51"><name pos:start="125:47" pos:end="125:51">index</name></expr></argument>, <argument pos:start="125:54" pos:end="125:58"><expr pos:start="125:54" pos:end="125:58"><name pos:start="125:54" pos:end="125:58">chunk</name></expr></argument>, <argument pos:start="125:61" pos:end="125:68"><expr pos:start="125:61" pos:end="125:68"><name pos:start="125:61" pos:end="125:68"><name pos:start="125:61" pos:end="125:62">wc</name><operator pos:start="125:63" pos:end="125:63">.</operator><name pos:start="125:64" pos:end="125:68">wr_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="127:1" pos:end="127:6">#<cpp:directive pos:start="127:2" pos:end="127:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="131:7" pos:end="137:5">else <block pos:start="131:12" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:53">

        <expr_stmt pos:start="133:9" pos:end="135:53"><expr pos:start="133:9" pos:end="135:52"><call pos:start="133:9" pos:end="135:52"><name pos:start="133:9" pos:end="133:17">DDDPRINTF</name><argument_list pos:start="133:18" pos:end="135:52">(<argument pos:start="133:19" pos:end="133:72"><expr pos:start="133:19" pos:end="133:72"><literal type="string" pos:start="133:19" pos:end="133:42">"other completion %s (%"</literal> <name pos:start="133:44" pos:end="133:49">PRId64</name> <literal type="string" pos:start="133:51" pos:end="133:72">") received left %d\n"</literal></expr></argument>,

            <argument pos:start="135:13" pos:end="135:29"><expr pos:start="135:13" pos:end="135:29"><call pos:start="135:13" pos:end="135:29"><name pos:start="135:13" pos:end="135:22">print_wrid</name><argument_list pos:start="135:23" pos:end="135:29">(<argument pos:start="135:24" pos:end="135:28"><expr pos:start="135:24" pos:end="135:28"><name pos:start="135:24" pos:end="135:28">wr_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="135:32" pos:end="135:36"><expr pos:start="135:32" pos:end="135:36"><name pos:start="135:32" pos:end="135:36">wr_id</name></expr></argument>, <argument pos:start="135:39" pos:end="135:51"><expr pos:start="135:39" pos:end="135:51"><name pos:start="135:39" pos:end="135:51"><name pos:start="135:39" pos:end="135:42">rdma</name><operator pos:start="135:43" pos:end="135:44">-&gt;</operator><name pos:start="135:45" pos:end="135:51">nb_sent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:26"><expr pos:start="141:5" pos:end="141:25"><operator pos:start="141:5" pos:end="141:5">*</operator><name pos:start="141:6" pos:end="141:14">wr_id_out</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <name pos:start="141:18" pos:end="141:25"><name pos:start="141:18" pos:end="141:19">wc</name><operator pos:start="141:20" pos:end="141:20">.</operator><name pos:start="141:21" pos:end="141:25">wr_id</name></name></expr>;</expr_stmt>



    <return pos:start="145:5" pos:end="145:14">return  <expr pos:start="145:13" pos:end="145:13"><literal type="number" pos:start="145:13" pos:end="145:13">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
