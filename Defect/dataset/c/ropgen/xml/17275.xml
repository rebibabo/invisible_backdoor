<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17275.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:39">ehci_advance_periodic_state</name><parameter_list pos:start="1:40" pos:end="1:56">(<parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:51"><name pos:start="1:41" pos:end="1:49">EHCIState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:55">ehci</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="95:1">{<block_content pos:start="5:5" pos:end="93:5">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:18">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">list</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:13"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:13">int</name></type> <name pos:start="9:15" pos:end="9:19">async</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="line" pos:start="13:5" pos:end="13:10">// 4.6</comment>



    <switch pos:start="17:5" pos:end="93:5">switch<condition pos:start="17:11" pos:end="17:39">(<expr pos:start="17:12" pos:end="17:38"><call pos:start="17:12" pos:end="17:38"><name pos:start="17:12" pos:end="17:25">ehci_get_state</name><argument_list pos:start="17:26" pos:end="17:38">(<argument pos:start="17:27" pos:end="17:30"><expr pos:start="17:27" pos:end="17:30"><name pos:start="17:27" pos:end="17:30">ehci</name></expr></argument>, <argument pos:start="17:33" pos:end="17:37"><expr pos:start="17:33" pos:end="17:37"><name pos:start="17:33" pos:end="17:37">async</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:41" pos:end="93:5">{<block_content pos:start="19:5" pos:end="91:18">

    <case pos:start="19:5" pos:end="19:22">case <expr pos:start="19:10" pos:end="19:21"><name pos:start="19:10" pos:end="19:21">EST_INACTIVE</name></expr>:</case>

        <if_stmt pos:start="21:9" pos:end="29:18"><if pos:start="21:9" pos:end="27:9">if <condition pos:start="21:12" pos:end="21:64">(<expr pos:start="21:13" pos:end="21:63"><operator pos:start="21:13" pos:end="21:13">!</operator><operator pos:start="21:14" pos:end="21:14">(</operator><name pos:start="21:15" pos:end="21:27"><name pos:start="21:15" pos:end="21:18">ehci</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:27">frindex</name></name> <operator pos:start="21:29" pos:end="21:29">&amp;</operator> <literal type="number" pos:start="21:31" pos:end="21:31">7</literal><operator pos:start="21:32" pos:end="21:32">)</operator> <operator pos:start="21:34" pos:end="21:35">&amp;&amp;</operator> <call pos:start="21:37" pos:end="21:63"><name pos:start="21:37" pos:end="21:57">ehci_periodic_enabled</name><argument_list pos:start="21:58" pos:end="21:63">(<argument pos:start="21:59" pos:end="21:62"><expr pos:start="21:59" pos:end="21:62"><name pos:start="21:59" pos:end="21:62">ehci</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:66" pos:end="27:9">{<block_content pos:start="23:13" pos:end="23:52">

            <expr_stmt pos:start="23:13" pos:end="23:52"><expr pos:start="23:13" pos:end="23:51"><call pos:start="23:13" pos:end="23:51"><name pos:start="23:13" pos:end="23:26">ehci_set_state</name><argument_list pos:start="23:27" pos:end="23:51">(<argument pos:start="23:28" pos:end="23:31"><expr pos:start="23:28" pos:end="23:31"><name pos:start="23:28" pos:end="23:31">ehci</name></expr></argument>, <argument pos:start="23:34" pos:end="23:38"><expr pos:start="23:34" pos:end="23:38"><name pos:start="23:34" pos:end="23:38">async</name></expr></argument>, <argument pos:start="23:41" pos:end="23:50"><expr pos:start="23:41" pos:end="23:50"><name pos:start="23:41" pos:end="23:50">EST_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="25:13" pos:end="25:47">// No break, fall through to ACTIVE</comment>

        </block_content>}</block></if> <else pos:start="27:11" pos:end="29:18">else<block type="pseudo" pos:start="29:13" pos:end="29:18"><block_content pos:start="29:13" pos:end="29:18">

            <break pos:start="29:13" pos:end="29:18">break;</break></block_content></block></else></if_stmt>



    <case pos:start="33:5" pos:end="33:20">case <expr pos:start="33:10" pos:end="33:19"><name pos:start="33:10" pos:end="33:19">EST_ACTIVE</name></expr>:</case>

        <if_stmt pos:start="35:9" pos:end="43:9"><if pos:start="35:9" pos:end="43:9">if <condition pos:start="35:12" pos:end="35:65">(<expr pos:start="35:13" pos:end="35:64"><operator pos:start="35:13" pos:end="35:13">!</operator><operator pos:start="35:14" pos:end="35:14">(</operator><name pos:start="35:15" pos:end="35:27"><name pos:start="35:15" pos:end="35:18">ehci</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:27">frindex</name></name> <operator pos:start="35:29" pos:end="35:29">&amp;</operator> <literal type="number" pos:start="35:31" pos:end="35:31">7</literal><operator pos:start="35:32" pos:end="35:32">)</operator> <operator pos:start="35:34" pos:end="35:35">&amp;&amp;</operator> <operator pos:start="35:37" pos:end="35:37">!</operator><call pos:start="35:38" pos:end="35:64"><name pos:start="35:38" pos:end="35:58">ehci_periodic_enabled</name><argument_list pos:start="35:59" pos:end="35:64">(<argument pos:start="35:60" pos:end="35:63"><expr pos:start="35:60" pos:end="35:63"><name pos:start="35:60" pos:end="35:63">ehci</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:67" pos:end="43:9">{<block_content pos:start="37:13" pos:end="41:18">

            <expr_stmt pos:start="37:13" pos:end="37:45"><expr pos:start="37:13" pos:end="37:44"><call pos:start="37:13" pos:end="37:44"><name pos:start="37:13" pos:end="37:31">ehci_queues_rip_all</name><argument_list pos:start="37:32" pos:end="37:44">(<argument pos:start="37:33" pos:end="37:36"><expr pos:start="37:33" pos:end="37:36"><name pos:start="37:33" pos:end="37:36">ehci</name></expr></argument>, <argument pos:start="37:39" pos:end="37:43"><expr pos:start="37:39" pos:end="37:43"><name pos:start="37:39" pos:end="37:43">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:54"><expr pos:start="39:13" pos:end="39:53"><call pos:start="39:13" pos:end="39:53"><name pos:start="39:13" pos:end="39:26">ehci_set_state</name><argument_list pos:start="39:27" pos:end="39:53">(<argument pos:start="39:28" pos:end="39:31"><expr pos:start="39:28" pos:end="39:31"><name pos:start="39:28" pos:end="39:31">ehci</name></expr></argument>, <argument pos:start="39:34" pos:end="39:38"><expr pos:start="39:34" pos:end="39:38"><name pos:start="39:34" pos:end="39:38">async</name></expr></argument>, <argument pos:start="39:41" pos:end="39:52"><expr pos:start="39:41" pos:end="39:52"><name pos:start="39:41" pos:end="39:52">EST_INACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:51"><expr pos:start="47:9" pos:end="47:50"><name pos:start="47:9" pos:end="47:12">list</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <name pos:start="47:16" pos:end="47:37"><name pos:start="47:16" pos:end="47:19">ehci</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:37">periodiclistbase</name></name> <operator pos:start="47:39" pos:end="47:39">&amp;</operator> <literal type="number" pos:start="47:41" pos:end="47:50">0xfffff000</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="49:9" pos:end="49:46">/* check that register has been set */</comment>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:22">(<expr pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:16">list</name> <operator pos:start="51:18" pos:end="51:19">==</operator> <literal type="number" pos:start="51:21" pos:end="51:21">0</literal></expr>)</condition> <block pos:start="51:24" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:18">

            <break pos:start="53:13" pos:end="53:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:48"><expr pos:start="57:9" pos:end="57:47"><name pos:start="57:9" pos:end="57:12">list</name> <operator pos:start="57:14" pos:end="57:15">|=</operator> <operator pos:start="57:17" pos:end="57:17">(</operator><operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:31"><name pos:start="57:19" pos:end="57:22">ehci</name><operator pos:start="57:23" pos:end="57:24">-&gt;</operator><name pos:start="57:25" pos:end="57:31">frindex</name></name> <operator pos:start="57:33" pos:end="57:33">&amp;</operator> <literal type="number" pos:start="57:35" pos:end="57:40">0x1ff8</literal><operator pos:start="57:41" pos:end="57:41">)</operator> <operator pos:start="57:43" pos:end="57:44">&gt;&gt;</operator> <literal type="number" pos:start="57:46" pos:end="57:46">1</literal><operator pos:start="57:47" pos:end="57:47">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:61"><expr pos:start="61:9" pos:end="61:60"><call pos:start="61:9" pos:end="61:60"><name pos:start="61:9" pos:end="61:20">pci_dma_read</name><argument_list pos:start="61:21" pos:end="61:60">(<argument pos:start="61:22" pos:end="61:31"><expr pos:start="61:22" pos:end="61:31"><operator pos:start="61:22" pos:end="61:22">&amp;</operator><name pos:start="61:23" pos:end="61:31"><name pos:start="61:23" pos:end="61:26">ehci</name><operator pos:start="61:27" pos:end="61:28">-&gt;</operator><name pos:start="61:29" pos:end="61:31">dev</name></name></expr></argument>, <argument pos:start="61:34" pos:end="61:37"><expr pos:start="61:34" pos:end="61:37"><name pos:start="61:34" pos:end="61:37">list</name></expr></argument>, <argument pos:start="61:40" pos:end="61:45"><expr pos:start="61:40" pos:end="61:45"><operator pos:start="61:40" pos:end="61:40">&amp;</operator><name pos:start="61:41" pos:end="61:45">entry</name></expr></argument>, <argument pos:start="61:48" pos:end="61:59"><expr pos:start="61:48" pos:end="61:59"><sizeof pos:start="61:48" pos:end="61:59">sizeof <name pos:start="61:55" pos:end="61:59">entry</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:35"><expr pos:start="63:9" pos:end="63:34"><name pos:start="63:9" pos:end="63:13">entry</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:34"><name pos:start="63:17" pos:end="63:27">le32_to_cpu</name><argument_list pos:start="63:28" pos:end="63:34">(<argument pos:start="63:29" pos:end="63:33"><expr pos:start="63:29" pos:end="63:33"><name pos:start="63:29" pos:end="63:33">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="67:9" pos:end="69:48"><expr pos:start="67:9" pos:end="69:47"><call pos:start="67:9" pos:end="69:47"><name pos:start="67:9" pos:end="67:15">DPRINTF</name><argument_list pos:start="67:16" pos:end="69:47">(<argument pos:start="67:17" pos:end="67:61"><expr pos:start="67:17" pos:end="67:61"><literal type="string" pos:start="67:17" pos:end="67:61">"PERIODIC state adv fr=%d.  [%08X] -&gt; %08X\n"</literal></expr></argument>,

                <argument pos:start="69:17" pos:end="69:33"><expr pos:start="69:17" pos:end="69:33"><name pos:start="69:17" pos:end="69:29"><name pos:start="69:17" pos:end="69:20">ehci</name><operator pos:start="69:21" pos:end="69:22">-&gt;</operator><name pos:start="69:23" pos:end="69:29">frindex</name></name> <operator pos:start="69:31" pos:end="69:31">/</operator> <literal type="number" pos:start="69:33" pos:end="69:33">8</literal></expr></argument>, <argument pos:start="69:36" pos:end="69:39"><expr pos:start="69:36" pos:end="69:39"><name pos:start="69:36" pos:end="69:39">list</name></expr></argument>, <argument pos:start="69:42" pos:end="69:46"><expr pos:start="69:42" pos:end="69:46"><name pos:start="69:42" pos:end="69:46">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:47"><expr pos:start="71:9" pos:end="71:46"><call pos:start="71:9" pos:end="71:46"><name pos:start="71:9" pos:end="71:27">ehci_set_fetch_addr</name><argument_list pos:start="71:28" pos:end="71:46">(<argument pos:start="71:29" pos:end="71:32"><expr pos:start="71:29" pos:end="71:32"><name pos:start="71:29" pos:end="71:32">ehci</name></expr></argument>, <argument pos:start="71:35" pos:end="71:39"><expr pos:start="71:35" pos:end="71:39"><name pos:start="71:35" pos:end="71:39">async</name></expr></argument>,<argument pos:start="71:41" pos:end="71:45"><expr pos:start="71:41" pos:end="71:45"><name pos:start="71:41" pos:end="71:45">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:52"><expr pos:start="73:9" pos:end="73:51"><call pos:start="73:9" pos:end="73:51"><name pos:start="73:9" pos:end="73:22">ehci_set_state</name><argument_list pos:start="73:23" pos:end="73:51">(<argument pos:start="73:24" pos:end="73:27"><expr pos:start="73:24" pos:end="73:27"><name pos:start="73:24" pos:end="73:27">ehci</name></expr></argument>, <argument pos:start="73:30" pos:end="73:34"><expr pos:start="73:30" pos:end="73:34"><name pos:start="73:30" pos:end="73:34">async</name></expr></argument>, <argument pos:start="73:37" pos:end="73:50"><expr pos:start="73:37" pos:end="73:50"><name pos:start="73:37" pos:end="73:50">EST_FETCHENTRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:40"><expr pos:start="75:9" pos:end="75:39"><call pos:start="75:9" pos:end="75:39"><name pos:start="75:9" pos:end="75:26">ehci_advance_state</name><argument_list pos:start="75:27" pos:end="75:39">(<argument pos:start="75:28" pos:end="75:31"><expr pos:start="75:28" pos:end="75:31"><name pos:start="75:28" pos:end="75:31">ehci</name></expr></argument>, <argument pos:start="75:34" pos:end="75:38"><expr pos:start="75:34" pos:end="75:38"><name pos:start="75:34" pos:end="75:38">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:47"><expr pos:start="77:9" pos:end="77:46"><call pos:start="77:9" pos:end="77:46"><name pos:start="77:9" pos:end="77:30">ehci_queues_rip_unused</name><argument_list pos:start="77:31" pos:end="77:46">(<argument pos:start="77:32" pos:end="77:35"><expr pos:start="77:32" pos:end="77:35"><name pos:start="77:32" pos:end="77:35">ehci</name></expr></argument>, <argument pos:start="77:38" pos:end="77:42"><expr pos:start="77:38" pos:end="77:42"><name pos:start="77:38" pos:end="77:42">async</name></expr></argument>, <argument pos:start="77:45" pos:end="77:45"><expr pos:start="77:45" pos:end="77:45"><literal type="number" pos:start="77:45" pos:end="77:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>



    <default pos:start="83:5" pos:end="83:12">default:</default>

        <comment type="block" pos:start="85:9" pos:end="85:60">/* this should only be due to a developer mistake */</comment>

        <expr_stmt pos:start="87:9" pos:end="89:55"><expr pos:start="87:9" pos:end="89:54"><call pos:start="87:9" pos:end="89:54"><name pos:start="87:9" pos:end="87:15">fprintf</name><argument_list pos:start="87:16" pos:end="89:54">(<argument pos:start="87:17" pos:end="87:22"><expr pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:22">stderr</name></expr></argument>, <argument pos:start="87:25" pos:end="89:39"><expr pos:start="87:25" pos:end="89:39"><literal type="string" pos:start="87:25" pos:end="87:55">"ehci: Bad periodic state %d. "</literal>

                <literal type="string" pos:start="89:17" pos:end="89:39">"Resetting to active\n"</literal></expr></argument>, <argument pos:start="89:42" pos:end="89:53"><expr pos:start="89:42" pos:end="89:53"><name pos:start="89:42" pos:end="89:53"><name pos:start="89:42" pos:end="89:45">ehci</name><operator pos:start="89:46" pos:end="89:47">-&gt;</operator><name pos:start="89:48" pos:end="89:53">pstate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:18"><expr pos:start="91:9" pos:end="91:17"><call pos:start="91:9" pos:end="91:17"><name pos:start="91:9" pos:end="91:14">assert</name><argument_list pos:start="91:15" pos:end="91:17">(<argument pos:start="91:16" pos:end="91:16"><expr pos:start="91:16" pos:end="91:16"><literal type="number" pos:start="91:16" pos:end="91:16">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
