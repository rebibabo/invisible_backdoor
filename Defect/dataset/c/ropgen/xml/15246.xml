<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15246.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:52"><name pos:start="1:1" pos:end="1:15">dispatcher_wait</name><argument_list pos:start="1:16" pos:end="1:52">(<argument pos:start="1:17" pos:end="1:33">Dispatcher *dispr</argument>, <argument pos:start="1:36" pos:end="1:51">uint32_t timeout</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:13">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:18">timeval</name></name></type> <name pos:start="5:20" pos:end="5:21">tv</name></decl>;</decl_stmt>

    <expr_stmt pos:start="7:5" pos:end="7:34"><expr pos:start="7:5" pos:end="7:33"><name pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:6">tv</name><operator pos:start="7:7" pos:end="7:7">.</operator><name pos:start="7:8" pos:end="7:13">tv_sec</name></name> <operator pos:start="7:15" pos:end="7:15">=</operator> <name pos:start="7:17" pos:end="7:23">timeout</name> <operator pos:start="7:25" pos:end="7:25">/</operator> <literal type="number" pos:start="7:27" pos:end="7:33">1000000</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="9:5" pos:end="9:35"><expr pos:start="9:5" pos:end="9:34"><name pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:6">tv</name><operator pos:start="9:7" pos:end="9:7">.</operator><name pos:start="9:8" pos:end="9:14">tv_usec</name></name> <operator pos:start="9:16" pos:end="9:16">=</operator> <name pos:start="9:18" pos:end="9:24">timeout</name> <operator pos:start="9:26" pos:end="9:26">%</operator> <literal type="number" pos:start="9:28" pos:end="9:34">1000000</literal></expr>;</expr_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">fd_set</name></type> <name pos:start="13:12" pos:end="13:16">fdset</name> <init pos:start="13:18" pos:end="13:31">= <expr pos:start="13:20" pos:end="13:31"><name pos:start="13:20" pos:end="13:31"><name pos:start="13:20" pos:end="13:24">dispr</name><operator pos:start="13:25" pos:end="13:26">-&gt;</operator><name pos:start="13:27" pos:end="13:31">fdset</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:53">/* wait until some of sockets become readable. */</comment>

    <decl_stmt pos:start="19:5" pos:end="19:60"><decl pos:start="19:5" pos:end="19:59"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:10">rc</name> <init pos:start="19:12" pos:end="19:59">= <expr pos:start="19:14" pos:end="19:59"><call pos:start="19:14" pos:end="19:59"><name pos:start="19:14" pos:end="19:19">select</name><argument_list pos:start="19:20" pos:end="19:59">(<argument pos:start="19:21" pos:end="19:39"><expr pos:start="19:21" pos:end="19:39"><name pos:start="19:21" pos:end="19:35"><name pos:start="19:21" pos:end="19:25">dispr</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:35">max_sock</name></name> <operator pos:start="19:37" pos:end="19:37">+</operator> <literal type="number" pos:start="19:39" pos:end="19:39">1</literal></expr></argument>, <argument pos:start="19:42" pos:end="19:47"><expr pos:start="19:42" pos:end="19:47"><operator pos:start="19:42" pos:end="19:42">&amp;</operator><name pos:start="19:43" pos:end="19:47">fdset</name></expr></argument>, <argument pos:start="19:50" pos:end="19:50"><expr pos:start="19:50" pos:end="19:50"><literal type="number" pos:start="19:50" pos:end="19:50">0</literal></expr></argument>, <argument pos:start="19:53" pos:end="19:53"><expr pos:start="19:53" pos:end="19:53"><literal type="number" pos:start="19:53" pos:end="19:53">0</literal></expr></argument>, <argument pos:start="19:56" pos:end="19:58"><expr pos:start="19:56" pos:end="19:58"><operator pos:start="19:56" pos:end="19:56">&amp;</operator><name pos:start="19:57" pos:end="19:58">tv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:17">(<expr pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:10">rc</name> <operator pos:start="23:12" pos:end="23:13">==</operator> <operator pos:start="23:15" pos:end="23:15">-</operator><literal type="number" pos:start="23:16" pos:end="23:16">1</literal></expr>)</condition> <block pos:start="23:19" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:27">

        <expr_stmt pos:start="25:9" pos:end="25:27"><expr pos:start="25:9" pos:end="25:26"><call pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:16">vubr_die</name><argument_list pos:start="25:17" pos:end="25:26">(<argument pos:start="25:18" pos:end="25:25"><expr pos:start="25:18" pos:end="25:25"><literal type="string" pos:start="25:18" pos:end="25:25">"select"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:17">/* Timeout */</comment>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:10">rc</name> <operator pos:start="33:12" pos:end="33:13">==</operator> <literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>)</condition> <block pos:start="33:18" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:17">

        <return pos:start="35:9" pos:end="35:17">return <expr pos:start="35:16" pos:end="35:16"><literal type="number" pos:start="35:16" pos:end="35:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:51">/* Now call callback for every ready socket. */</comment>



    <decl_stmt pos:start="45:5" pos:end="45:13"><decl pos:start="45:5" pos:end="45:12"><type pos:start="45:5" pos:end="45:7"><name pos:start="45:5" pos:end="45:7">int</name></type> <name pos:start="45:9" pos:end="45:12">sock</name></decl>;</decl_stmt>

    <for pos:start="47:5" pos:end="55:9">for <control pos:start="47:9" pos:end="47:54">(<init pos:start="47:10" pos:end="47:18"><expr pos:start="47:10" pos:end="47:17"><name pos:start="47:10" pos:end="47:13">sock</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <literal type="number" pos:start="47:17" pos:end="47:17">0</literal></expr>;</init> <condition pos:start="47:20" pos:end="47:46"><expr pos:start="47:20" pos:end="47:45"><name pos:start="47:20" pos:end="47:23">sock</name> <operator pos:start="47:25" pos:end="47:25">&lt;</operator> <name pos:start="47:27" pos:end="47:41"><name pos:start="47:27" pos:end="47:31">dispr</name><operator pos:start="47:32" pos:end="47:33">-&gt;</operator><name pos:start="47:34" pos:end="47:41">max_sock</name></name> <operator pos:start="47:43" pos:end="47:43">+</operator> <literal type="number" pos:start="47:45" pos:end="47:45">1</literal></expr>;</condition> <incr pos:start="47:48" pos:end="47:53"><expr pos:start="47:48" pos:end="47:53"><name pos:start="47:48" pos:end="47:51">sock</name><operator pos:start="47:52" pos:end="47:53">++</operator></expr></incr>)</control><block type="pseudo" pos:start="49:9" pos:end="55:9"><block_content pos:start="49:9" pos:end="55:9">

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:35">(<expr pos:start="49:13" pos:end="49:34"><call pos:start="49:13" pos:end="49:34"><name pos:start="49:13" pos:end="49:20">FD_ISSET</name><argument_list pos:start="49:21" pos:end="49:34">(<argument pos:start="49:22" pos:end="49:25"><expr pos:start="49:22" pos:end="49:25"><name pos:start="49:22" pos:end="49:25">sock</name></expr></argument>, <argument pos:start="49:28" pos:end="49:33"><expr pos:start="49:28" pos:end="49:33"><operator pos:start="49:28" pos:end="49:28">&amp;</operator><name pos:start="49:29" pos:end="49:33">fdset</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:37" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:38">

            <decl_stmt pos:start="51:13" pos:end="51:44"><decl pos:start="51:13" pos:end="51:43"><type pos:start="51:13" pos:end="51:19"><name pos:start="51:13" pos:end="51:17">Event</name> <modifier pos:start="51:19" pos:end="51:19">*</modifier></type><name pos:start="51:20" pos:end="51:20">e</name> <init pos:start="51:22" pos:end="51:43">= <expr pos:start="51:24" pos:end="51:43"><operator pos:start="51:24" pos:end="51:24">&amp;</operator><name pos:start="51:25" pos:end="51:43"><name pos:start="51:25" pos:end="51:29">dispr</name><operator pos:start="51:30" pos:end="51:31">-&gt;</operator><name pos:start="51:32" pos:end="51:37">events</name><index pos:start="51:38" pos:end="51:43">[<expr pos:start="51:39" pos:end="51:42"><name pos:start="51:39" pos:end="51:42">sock</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:38"><expr pos:start="53:13" pos:end="53:37"><call pos:start="53:13" pos:end="53:37"><name pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:13">e</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:23">callback</name></name><argument_list pos:start="53:24" pos:end="53:37">(<argument pos:start="53:25" pos:end="53:28"><expr pos:start="53:25" pos:end="53:28"><name pos:start="53:25" pos:end="53:28">sock</name></expr></argument>, <argument pos:start="53:31" pos:end="53:36"><expr pos:start="53:31" pos:end="53:36"><name pos:start="53:31" pos:end="53:36"><name pos:start="53:31" pos:end="53:31">e</name><operator pos:start="53:32" pos:end="53:33">-&gt;</operator><name pos:start="53:34" pos:end="53:36">ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></for>



    <return pos:start="59:5" pos:end="59:13">return <expr pos:start="59:12" pos:end="59:12"><literal type="number" pos:start="59:12" pos:end="59:12">0</literal></expr>;</return>

</block_content>}</block>
</unit>
