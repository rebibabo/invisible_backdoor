<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25757.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">vnc_client_read</name><parameter_list pos:start="1:28" pos:end="1:41">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:34"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:5">

    <decl_stmt pos:start="5:5" pos:end="5:26"><decl pos:start="5:5" pos:end="5:25"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">VncState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">vs</name> <init pos:start="5:18" pos:end="5:25">= <expr pos:start="5:20" pos:end="5:25"><name pos:start="5:20" pos:end="5:25">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">long</name></type> <name pos:start="7:10" pos:end="7:12">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="16:0"><expr pos:start="11:5" pos:end="11:36"><call pos:start="11:5" pos:end="11:36"><name pos:start="11:5" pos:end="11:18">buffer_reserve</name><argument_list pos:start="11:19" pos:end="11:36">(<argument pos:start="11:20" pos:end="11:29"><expr pos:start="11:20" pos:end="11:29"><operator pos:start="11:20" pos:end="11:20">&amp;</operator><name pos:start="11:21" pos:end="11:29"><name pos:start="11:21" pos:end="11:22">vs</name><operator pos:start="11:23" pos:end="11:24">-&gt;</operator><name pos:start="11:25" pos:end="11:29">input</name></name></expr></argument>, <argument pos:start="11:32" pos:end="11:35"><expr pos:start="11:32" pos:end="11:35"><literal type="number" pos:start="11:32" pos:end="11:35">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="15:1" pos:end="15:21">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:21">CONFIG_VNC_TLS</name></cpp:ifdef>

    <if_stmt pos:start="17:5" pos:end="39:63"><if pos:start="17:5" pos:end="35:5">if <condition pos:start="17:8" pos:end="17:24">(<expr pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:10">vs</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:23">tls_session</name></name></expr>)</condition> <block pos:start="17:26" pos:end="35:5">{<block_content pos:start="19:9" pos:end="33:9">

	<expr_stmt pos:start="19:9" pos:end="19:73"><expr pos:start="19:9" pos:end="19:72"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:72"><name pos:start="19:15" pos:end="19:25">gnutls_read</name><argument_list pos:start="19:26" pos:end="19:72">(<argument pos:start="19:27" pos:end="19:41"><expr pos:start="19:27" pos:end="19:41"><name pos:start="19:27" pos:end="19:41"><name pos:start="19:27" pos:end="19:28">vs</name><operator pos:start="19:29" pos:end="19:30">-&gt;</operator><name pos:start="19:31" pos:end="19:41">tls_session</name></name></expr></argument>, <argument pos:start="19:44" pos:end="19:65"><expr pos:start="19:44" pos:end="19:65"><call pos:start="19:44" pos:end="19:65"><name pos:start="19:44" pos:end="19:53">buffer_end</name><argument_list pos:start="19:54" pos:end="19:65">(<argument pos:start="19:55" pos:end="19:64"><expr pos:start="19:55" pos:end="19:64"><operator pos:start="19:55" pos:end="19:55">&amp;</operator><name pos:start="19:56" pos:end="19:64"><name pos:start="19:56" pos:end="19:57">vs</name><operator pos:start="19:58" pos:end="19:59">-&gt;</operator><name pos:start="19:60" pos:end="19:64">input</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:68" pos:end="19:71"><expr pos:start="19:68" pos:end="19:71"><literal type="number" pos:start="19:68" pos:end="19:71">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="21:9" pos:end="33:9"><if pos:start="21:9" pos:end="33:9">if <condition pos:start="21:12" pos:end="21:20">(<expr pos:start="21:13" pos:end="21:19"><name pos:start="21:13" pos:end="21:15">ret</name> <operator pos:start="21:17" pos:end="21:17">&lt;</operator> <literal type="number" pos:start="21:19" pos:end="21:19">0</literal></expr>)</condition> <block pos:start="21:22" pos:end="33:9">{<block_content pos:start="23:13" pos:end="31:21">

	    <if_stmt pos:start="23:13" pos:end="29:28"><if pos:start="23:13" pos:end="25:31">if <condition pos:start="23:16" pos:end="23:38">(<expr pos:start="23:17" pos:end="23:37"><name pos:start="23:17" pos:end="23:19">ret</name> <operator pos:start="23:21" pos:end="23:22">==</operator> <name pos:start="23:24" pos:end="23:37">GNUTLS_E_AGAIN</name></expr>)</condition><block type="pseudo" pos:start="25:17" pos:end="25:31"><block_content pos:start="25:17" pos:end="25:31">

		<expr_stmt pos:start="25:17" pos:end="25:31"><expr pos:start="25:17" pos:end="25:30"><name pos:start="25:17" pos:end="25:21">errno</name> <operator pos:start="25:23" pos:end="25:23">=</operator> <name pos:start="25:25" pos:end="25:30">EAGAIN</name></expr>;</expr_stmt></block_content></block></if>

	    <else pos:start="27:13" pos:end="29:28">else<block type="pseudo" pos:start="29:17" pos:end="29:28"><block_content pos:start="29:17" pos:end="29:28">

		<expr_stmt pos:start="29:17" pos:end="29:28"><expr pos:start="29:17" pos:end="29:27"><name pos:start="29:17" pos:end="29:21">errno</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <name pos:start="29:25" pos:end="29:27">EIO</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	    <expr_stmt pos:start="31:13" pos:end="31:21"><expr pos:start="31:13" pos:end="31:20"><name pos:start="31:13" pos:end="31:15">ret</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <operator pos:start="31:19" pos:end="31:19">-</operator><literal type="number" pos:start="31:20" pos:end="31:20">1</literal></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="39:63">else<block type="pseudo" pos:start="39:9" pos:end="39:63"><block_content pos:start="39:9" pos:end="39:63">

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="37:8" pos:end="37:27">/* CONFIG_VNC_TLS */</comment>

	<expr_stmt pos:start="39:9" pos:end="39:63"><expr pos:start="39:9" pos:end="39:62"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:62"><name pos:start="39:15" pos:end="39:18">recv</name><argument_list pos:start="39:19" pos:end="39:62">(<argument pos:start="39:20" pos:end="39:28"><expr pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:21">vs</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:28">csock</name></name></expr></argument>, <argument pos:start="39:31" pos:end="39:52"><expr pos:start="39:31" pos:end="39:52"><call pos:start="39:31" pos:end="39:52"><name pos:start="39:31" pos:end="39:40">buffer_end</name><argument_list pos:start="39:41" pos:end="39:52">(<argument pos:start="39:42" pos:end="39:51"><expr pos:start="39:42" pos:end="39:51"><operator pos:start="39:42" pos:end="39:42">&amp;</operator><name pos:start="39:43" pos:end="39:51"><name pos:start="39:43" pos:end="39:44">vs</name><operator pos:start="39:45" pos:end="39:46">-&gt;</operator><name pos:start="39:47" pos:end="39:51">input</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:55" pos:end="39:58"><expr pos:start="39:55" pos:end="39:58"><literal type="number" pos:start="39:55" pos:end="39:58">4096</literal></expr></argument>, <argument pos:start="39:61" pos:end="39:61"><expr pos:start="39:61" pos:end="39:61"><literal type="number" pos:start="39:61" pos:end="39:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:55"><expr pos:start="41:5" pos:end="41:54"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:54"><name pos:start="41:11" pos:end="41:29">vnc_client_io_error</name><argument_list pos:start="41:30" pos:end="41:54">(<argument pos:start="41:31" pos:end="41:32"><expr pos:start="41:31" pos:end="41:32"><name pos:start="41:31" pos:end="41:32">vs</name></expr></argument>, <argument pos:start="41:35" pos:end="41:37"><expr pos:start="41:35" pos:end="41:37"><name pos:start="41:35" pos:end="41:37">ret</name></expr></argument>, <argument pos:start="41:40" pos:end="41:53"><expr pos:start="41:40" pos:end="41:53"><call pos:start="41:40" pos:end="41:53"><name pos:start="41:40" pos:end="41:51">socket_error</name><argument_list pos:start="41:52" pos:end="41:53">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="45:15"><if pos:start="43:5" pos:end="45:15">if <condition pos:start="43:8" pos:end="43:13">(<expr pos:start="43:9" pos:end="43:12"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:12">ret</name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:15"><block_content pos:start="45:9" pos:end="45:15">

	<return pos:start="45:9" pos:end="45:15">return;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:28"><expr pos:start="49:5" pos:end="49:27"><name pos:start="49:5" pos:end="49:20"><name pos:start="49:5" pos:end="49:6">vs</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:13">input</name><operator pos:start="49:14" pos:end="49:14">.</operator><name pos:start="49:15" pos:end="49:20">offset</name></name> <operator pos:start="49:22" pos:end="49:23">+=</operator> <name pos:start="49:25" pos:end="49:27">ret</name></expr>;</expr_stmt>



    <while pos:start="53:5" pos:end="81:5">while <condition pos:start="53:11" pos:end="53:75">(<expr pos:start="53:12" pos:end="53:74"><name pos:start="53:12" pos:end="53:27"><name pos:start="53:12" pos:end="53:13">vs</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:27">read_handler</name></name> <operator pos:start="53:29" pos:end="53:30">&amp;&amp;</operator> <name pos:start="53:32" pos:end="53:47"><name pos:start="53:32" pos:end="53:33">vs</name><operator pos:start="53:34" pos:end="53:35">-&gt;</operator><name pos:start="53:36" pos:end="53:40">input</name><operator pos:start="53:41" pos:end="53:41">.</operator><name pos:start="53:42" pos:end="53:47">offset</name></name> <operator pos:start="53:49" pos:end="53:50">&gt;=</operator> <name pos:start="53:52" pos:end="53:74"><name pos:start="53:52" pos:end="53:53">vs</name><operator pos:start="53:54" pos:end="53:55">-&gt;</operator><name pos:start="53:56" pos:end="53:74">read_handler_expect</name></name></expr>)</condition> <block pos:start="53:77" pos:end="81:5">{<block_content pos:start="55:9" pos:end="79:9">

	<decl_stmt pos:start="55:9" pos:end="55:45"><decl pos:start="55:9" pos:end="55:44"><type pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:14">size_t</name></type> <name pos:start="55:16" pos:end="55:18">len</name> <init pos:start="55:20" pos:end="55:44">= <expr pos:start="55:22" pos:end="55:44"><name pos:start="55:22" pos:end="55:44"><name pos:start="55:22" pos:end="55:23">vs</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:44">read_handler_expect</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="57:9" pos:end="57:16"><decl pos:start="57:9" pos:end="57:15"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:15">ret</name></decl>;</decl_stmt>



	<expr_stmt pos:start="61:9" pos:end="61:58"><expr pos:start="61:9" pos:end="61:57"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:57"><name pos:start="61:15" pos:end="61:30"><name pos:start="61:15" pos:end="61:16">vs</name><operator pos:start="61:17" pos:end="61:18">-&gt;</operator><name pos:start="61:19" pos:end="61:30">read_handler</name></name><argument_list pos:start="61:31" pos:end="61:57">(<argument pos:start="61:32" pos:end="61:33"><expr pos:start="61:32" pos:end="61:33"><name pos:start="61:32" pos:end="61:33">vs</name></expr></argument>, <argument pos:start="61:36" pos:end="61:51"><expr pos:start="61:36" pos:end="61:51"><name pos:start="61:36" pos:end="61:51"><name pos:start="61:36" pos:end="61:37">vs</name><operator pos:start="61:38" pos:end="61:39">-&gt;</operator><name pos:start="61:40" pos:end="61:44">input</name><operator pos:start="61:45" pos:end="61:45">.</operator><name pos:start="61:46" pos:end="61:51">buffer</name></name></expr></argument>, <argument pos:start="61:54" pos:end="61:56"><expr pos:start="61:54" pos:end="61:56"><name pos:start="61:54" pos:end="61:56">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="63:9" pos:end="65:19"><if pos:start="63:9" pos:end="65:19">if <condition pos:start="63:12" pos:end="63:28">(<expr pos:start="63:13" pos:end="63:27"><name pos:start="63:13" pos:end="63:21"><name pos:start="63:13" pos:end="63:14">vs</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:21">csock</name></name> <operator pos:start="63:23" pos:end="63:24">==</operator> <operator pos:start="63:26" pos:end="63:26">-</operator><literal type="number" pos:start="63:27" pos:end="63:27">1</literal></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:19"><block_content pos:start="65:13" pos:end="65:19">

	    <return pos:start="65:13" pos:end="65:19">return;</return></block_content></block></if></if_stmt>



	<if_stmt pos:start="69:9" pos:end="79:9"><if pos:start="69:9" pos:end="75:9">if <condition pos:start="69:12" pos:end="69:17">(<expr pos:start="69:13" pos:end="69:16"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:16">ret</name></expr>)</condition> <block pos:start="69:19" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:36">

	    <expr_stmt pos:start="71:13" pos:end="71:88"><expr pos:start="71:13" pos:end="71:87"><call pos:start="71:13" pos:end="71:87"><name pos:start="71:13" pos:end="71:19">memmove</name><argument_list pos:start="71:20" pos:end="71:87">(<argument pos:start="71:21" pos:end="71:36"><expr pos:start="71:21" pos:end="71:36"><name pos:start="71:21" pos:end="71:36"><name pos:start="71:21" pos:end="71:22">vs</name><operator pos:start="71:23" pos:end="71:24">-&gt;</operator><name pos:start="71:25" pos:end="71:29">input</name><operator pos:start="71:30" pos:end="71:30">.</operator><name pos:start="71:31" pos:end="71:36">buffer</name></name></expr></argument>, <argument pos:start="71:39" pos:end="71:60"><expr pos:start="71:39" pos:end="71:60"><name pos:start="71:39" pos:end="71:54"><name pos:start="71:39" pos:end="71:40">vs</name><operator pos:start="71:41" pos:end="71:42">-&gt;</operator><name pos:start="71:43" pos:end="71:47">input</name><operator pos:start="71:48" pos:end="71:48">.</operator><name pos:start="71:49" pos:end="71:54">buffer</name></name> <operator pos:start="71:56" pos:end="71:56">+</operator> <name pos:start="71:58" pos:end="71:60">len</name></expr></argument>, <argument pos:start="71:63" pos:end="71:86"><expr pos:start="71:63" pos:end="71:86"><operator pos:start="71:63" pos:end="71:63">(</operator><name pos:start="71:64" pos:end="71:79"><name pos:start="71:64" pos:end="71:65">vs</name><operator pos:start="71:66" pos:end="71:67">-&gt;</operator><name pos:start="71:68" pos:end="71:72">input</name><operator pos:start="71:73" pos:end="71:73">.</operator><name pos:start="71:74" pos:end="71:79">offset</name></name> <operator pos:start="71:81" pos:end="71:81">-</operator> <name pos:start="71:83" pos:end="71:85">len</name><operator pos:start="71:86" pos:end="71:86">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="73:13" pos:end="73:36"><expr pos:start="73:13" pos:end="73:35"><name pos:start="73:13" pos:end="73:28"><name pos:start="73:13" pos:end="73:14">vs</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:21">input</name><operator pos:start="73:22" pos:end="73:22">.</operator><name pos:start="73:23" pos:end="73:28">offset</name></name> <operator pos:start="73:30" pos:end="73:31">-=</operator> <name pos:start="73:33" pos:end="73:35">len</name></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="75:11" pos:end="79:9">else <block pos:start="75:16" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:42">

	    <expr_stmt pos:start="77:13" pos:end="77:42"><expr pos:start="77:13" pos:end="77:41"><name pos:start="77:13" pos:end="77:35"><name pos:start="77:13" pos:end="77:14">vs</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:35">read_handler_expect</name></name> <operator pos:start="77:37" pos:end="77:37">=</operator> <name pos:start="77:39" pos:end="77:41">ret</name></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
