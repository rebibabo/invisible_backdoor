<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21675.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">target_disas</name><parameter_list pos:start="1:18" pos:end="3:47">(<parameter pos:start="1:19" pos:end="1:27"><decl pos:start="1:19" pos:end="1:27"><type pos:start="1:19" pos:end="1:27"><name pos:start="1:19" pos:end="1:22">FILE</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:27">out</name></decl></parameter>, <parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:42"><name pos:start="1:30" pos:end="1:37">CPUState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">cpu</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:61"><decl pos:start="1:45" pos:end="1:61"><type pos:start="1:45" pos:end="1:61"><name pos:start="1:45" pos:end="1:56">target_ulong</name></type> <name pos:start="1:58" pos:end="1:61">code</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:35"><decl pos:start="3:19" pos:end="3:35"><type pos:start="3:19" pos:end="3:35"><name pos:start="3:19" pos:end="3:30">target_ulong</name></type> <name pos:start="3:32" pos:end="3:35">size</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:46"><decl pos:start="3:38" pos:end="3:46"><type pos:start="3:38" pos:end="3:46"><name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:46">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="167:1">{<block_content pos:start="7:5" pos:end="165:5">

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUClass</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cc</name> <init pos:start="7:18" pos:end="7:37">= <expr pos:start="7:20" pos:end="7:37"><call pos:start="7:20" pos:end="7:37"><name pos:start="7:20" pos:end="7:32">CPU_GET_CLASS</name><argument_list pos:start="7:33" pos:end="7:37">(<argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">target_ulong</name></type> <name pos:start="9:18" pos:end="9:19">pc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">CPUDebug</name></type> <name pos:start="13:14" pos:end="13:14">s</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:48"><expr pos:start="17:5" pos:end="17:47"><call pos:start="17:5" pos:end="17:47"><name pos:start="17:5" pos:end="17:25">INIT_DISASSEMBLE_INFO</name><argument_list pos:start="17:26" pos:end="17:47">(<argument pos:start="17:27" pos:end="17:32"><expr pos:start="17:27" pos:end="17:32"><name pos:start="17:27" pos:end="17:32"><name pos:start="17:27" pos:end="17:27">s</name><operator pos:start="17:28" pos:end="17:28">.</operator><name pos:start="17:29" pos:end="17:32">info</name></name></expr></argument>, <argument pos:start="17:35" pos:end="17:37"><expr pos:start="17:35" pos:end="17:37"><name pos:start="17:35" pos:end="17:37">out</name></expr></argument>, <argument pos:start="17:40" pos:end="17:46"><expr pos:start="17:40" pos:end="17:46"><name pos:start="17:40" pos:end="17:46">fprintf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:16"><expr pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:9"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:6">.</operator><name pos:start="21:7" pos:end="21:9">cpu</name></name> <operator pos:start="21:11" pos:end="21:11">=</operator> <name pos:start="21:13" pos:end="21:15">cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:49"><expr pos:start="23:5" pos:end="23:48"><name pos:start="23:5" pos:end="23:27"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:6">.</operator><name pos:start="23:7" pos:end="23:10">info</name><operator pos:start="23:11" pos:end="23:11">.</operator><name pos:start="23:12" pos:end="23:27">read_memory_func</name></name> <operator pos:start="23:29" pos:end="23:29">=</operator> <name pos:start="23:31" pos:end="23:48">target_read_memory</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:41"><expr pos:start="25:5" pos:end="25:40"><name pos:start="25:5" pos:end="25:33"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:6">.</operator><name pos:start="25:7" pos:end="25:10">info</name><operator pos:start="25:11" pos:end="25:11">.</operator><name pos:start="25:12" pos:end="25:33">read_memory_inner_func</name></name> <operator pos:start="25:35" pos:end="25:35">=</operator> <name pos:start="25:37" pos:end="25:40">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:6">.</operator><name pos:start="27:7" pos:end="27:10">info</name><operator pos:start="27:11" pos:end="27:11">.</operator><name pos:start="27:12" pos:end="27:21">buffer_vma</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:28">code</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:32"><expr pos:start="29:5" pos:end="29:31"><name pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:6">.</operator><name pos:start="29:7" pos:end="29:10">info</name><operator pos:start="29:11" pos:end="29:11">.</operator><name pos:start="29:12" pos:end="29:24">buffer_length</name></name> <operator pos:start="29:26" pos:end="29:26">=</operator> <name pos:start="29:28" pos:end="29:31">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="36:0"><expr pos:start="31:5" pos:end="31:53"><name pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:6">.</operator><name pos:start="31:7" pos:end="31:10">info</name><operator pos:start="31:11" pos:end="31:11">.</operator><name pos:start="31:12" pos:end="31:29">print_address_func</name></name> <operator pos:start="31:31" pos:end="31:31">=</operator> <name pos:start="31:33" pos:end="31:53">generic_print_address</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="35:1" pos:end="35:29">#<cpp:directive pos:start="35:2" pos:end="35:6">ifdef</cpp:directive> <name pos:start="35:8" pos:end="35:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="37:5" pos:end="40:0"><expr pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:6">.</operator><name pos:start="37:7" pos:end="37:10">info</name><operator pos:start="37:11" pos:end="37:11">.</operator><name pos:start="37:12" pos:end="37:17">endian</name></name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:34">BFD_ENDIAN_BIG</name></expr>;</expr_stmt>

<cpp:else pos:start="39:1" pos:end="39:5">#<cpp:directive pos:start="39:2" pos:end="39:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="41:5" pos:end="44:0"><expr pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:17"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:6">.</operator><name pos:start="41:7" pos:end="41:10">info</name><operator pos:start="41:11" pos:end="41:11">.</operator><name pos:start="41:12" pos:end="41:17">endian</name></name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:37">BFD_ENDIAN_LITTLE</name></expr>;</expr_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="47:5" pos:end="56:0"><if pos:start="47:5" pos:end="56:0">if <condition pos:start="47:8" pos:end="47:27">(<expr pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:10">cc</name><operator pos:start="47:11" pos:end="47:12">-&gt;</operator><name pos:start="47:13" pos:end="47:26">disas_set_info</name></name></expr>)</condition> <block pos:start="47:29" pos:end="56:0">{<block_content pos:start="49:9" pos:end="49:41">

        <expr_stmt pos:start="49:9" pos:end="49:41"><expr pos:start="49:9" pos:end="49:40"><call pos:start="49:9" pos:end="49:40"><name pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:10">cc</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:26">disas_set_info</name></name><argument_list pos:start="49:27" pos:end="49:40">(<argument pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><name pos:start="49:28" pos:end="49:30">cpu</name></expr></argument>, <argument pos:start="49:33" pos:end="49:39"><expr pos:start="49:33" pos:end="49:39"><operator pos:start="49:33" pos:end="49:33">&amp;</operator><name pos:start="49:34" pos:end="49:39"><name pos:start="49:34" pos:end="49:34">s</name><operator pos:start="49:35" pos:end="49:35">.</operator><name pos:start="49:36" pos:end="49:39">info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="55:1" pos:end="55:24">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:24"><call pos:start="55:5" pos:end="55:24"><name pos:start="55:5" pos:end="55:11">defined</name><argument_list pos:start="55:12" pos:end="55:24">(<argument pos:start="55:13" pos:end="55:23"><expr pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:23">TARGET_I386</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="57:5" pos:end="69:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:19">(<expr pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:13">flags</name> <operator pos:start="57:15" pos:end="57:16">==</operator> <literal type="number" pos:start="57:18" pos:end="57:18">2</literal></expr>)</condition> <block pos:start="57:21" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:38">

        <expr_stmt pos:start="59:9" pos:end="59:38"><expr pos:start="59:9" pos:end="59:37"><name pos:start="59:9" pos:end="59:19"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:10">.</operator><name pos:start="59:11" pos:end="59:14">info</name><operator pos:start="59:15" pos:end="59:15">.</operator><name pos:start="59:16" pos:end="59:19">mach</name></name> <operator pos:start="59:21" pos:end="59:21">=</operator> <name pos:start="59:23" pos:end="59:37">bfd_mach_x86_64</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="61:7" pos:end="65:5">else if <condition pos:start="61:15" pos:end="61:26">(<expr pos:start="61:16" pos:end="61:25"><name pos:start="61:16" pos:end="61:20">flags</name> <operator pos:start="61:22" pos:end="61:23">==</operator> <literal type="number" pos:start="61:25" pos:end="61:25">1</literal></expr>)</condition> <block pos:start="61:28" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:42">

        <expr_stmt pos:start="63:9" pos:end="63:42"><expr pos:start="63:9" pos:end="63:41"><name pos:start="63:9" pos:end="63:19"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:10">.</operator><name pos:start="63:11" pos:end="63:14">info</name><operator pos:start="63:15" pos:end="63:15">.</operator><name pos:start="63:16" pos:end="63:19">mach</name></name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:41">bfd_mach_i386_i8086</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="69:5">else <block pos:start="65:12" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:41">

        <expr_stmt pos:start="67:9" pos:end="67:41"><expr pos:start="67:9" pos:end="67:40"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:10">.</operator><name pos:start="67:11" pos:end="67:14">info</name><operator pos:start="67:15" pos:end="67:15">.</operator><name pos:start="67:16" pos:end="67:19">mach</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:40">bfd_mach_i386_i386</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="74:0"><expr pos:start="71:5" pos:end="71:39"><name pos:start="71:5" pos:end="71:21"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:6">.</operator><name pos:start="71:7" pos:end="71:10">info</name><operator pos:start="71:11" pos:end="71:11">.</operator><name pos:start="71:12" pos:end="71:21">print_insn</name></name> <operator pos:start="71:23" pos:end="71:23">=</operator> <name pos:start="71:25" pos:end="71:39">print_insn_i386</name></expr>;</expr_stmt>

<cpp:elif pos:start="73:1" pos:end="73:25">#<cpp:directive pos:start="73:2" pos:end="73:5">elif</cpp:directive> <expr pos:start="73:7" pos:end="73:25"><call pos:start="73:7" pos:end="73:25"><name pos:start="73:7" pos:end="73:13">defined</name><argument_list pos:start="73:14" pos:end="73:25">(<argument pos:start="73:15" pos:end="73:24"><expr pos:start="73:15" pos:end="73:24"><name pos:start="73:15" pos:end="73:24">TARGET_PPC</name></expr></argument>)</argument_list></call></expr></cpp:elif>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:26">(<expr pos:start="75:9" pos:end="75:25"><operator pos:start="75:9" pos:end="75:9">(</operator><name pos:start="75:10" pos:end="75:14">flags</name> <operator pos:start="75:16" pos:end="75:17">&gt;&gt;</operator> <literal type="number" pos:start="75:19" pos:end="75:20">16</literal><operator pos:start="75:21" pos:end="75:21">)</operator> <operator pos:start="75:23" pos:end="75:23">&amp;</operator> <literal type="number" pos:start="75:25" pos:end="75:25">1</literal></expr>)</condition> <block pos:start="75:28" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:42">

        <expr_stmt pos:start="77:9" pos:end="77:42"><expr pos:start="77:9" pos:end="77:41"><name pos:start="77:9" pos:end="77:21"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:10">.</operator><name pos:start="77:11" pos:end="77:14">info</name><operator pos:start="77:15" pos:end="77:15">.</operator><name pos:start="77:16" pos:end="77:21">endian</name></name> <operator pos:start="77:23" pos:end="77:23">=</operator> <name pos:start="77:25" pos:end="77:41">BFD_ENDIAN_LITTLE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="81:5" pos:end="99:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:23">(<expr pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:13">flags</name> <operator pos:start="81:15" pos:end="81:15">&amp;</operator> <literal type="number" pos:start="81:17" pos:end="81:22">0xFFFF</literal></expr>)</condition> <block pos:start="81:25" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:37">

        <comment type="block" pos:start="83:9" pos:end="83:77">/* If we have a precise definition of the instruction set, use it. */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:37"><expr pos:start="85:9" pos:end="85:36"><name pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:10">.</operator><name pos:start="85:11" pos:end="85:14">info</name><operator pos:start="85:15" pos:end="85:15">.</operator><name pos:start="85:16" pos:end="85:19">mach</name></name> <operator pos:start="85:21" pos:end="85:21">=</operator> <name pos:start="85:23" pos:end="85:27">flags</name> <operator pos:start="85:29" pos:end="85:29">&amp;</operator> <literal type="number" pos:start="85:31" pos:end="85:36">0xFFFF</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="87:7" pos:end="99:5">else <block pos:start="87:12" pos:end="99:5">{<block_content pos:start="91:9" pos:end="98:0">

<cpp:ifdef pos:start="89:1" pos:end="89:19">#<cpp:directive pos:start="89:2" pos:end="89:6">ifdef</cpp:directive> <name pos:start="89:8" pos:end="89:19">TARGET_PPC64</name></cpp:ifdef>

        <expr_stmt pos:start="91:9" pos:end="94:0"><expr pos:start="91:9" pos:end="91:36"><name pos:start="91:9" pos:end="91:19"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:10">.</operator><name pos:start="91:11" pos:end="91:14">info</name><operator pos:start="91:15" pos:end="91:15">.</operator><name pos:start="91:16" pos:end="91:19">mach</name></name> <operator pos:start="91:21" pos:end="91:21">=</operator> <name pos:start="91:23" pos:end="91:36">bfd_mach_ppc64</name></expr>;</expr_stmt>

<cpp:else pos:start="93:1" pos:end="93:5">#<cpp:directive pos:start="93:2" pos:end="93:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="95:9" pos:end="98:0"><expr pos:start="95:9" pos:end="95:34"><name pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:10">.</operator><name pos:start="95:11" pos:end="95:14">info</name><operator pos:start="95:15" pos:end="95:15">.</operator><name pos:start="95:16" pos:end="95:19">mach</name></name> <operator pos:start="95:21" pos:end="95:21">=</operator> <name pos:start="95:23" pos:end="95:34">bfd_mach_ppc</name></expr>;</expr_stmt>

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:48"><expr pos:start="101:5" pos:end="101:47"><name pos:start="101:5" pos:end="101:31"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:6">.</operator><name pos:start="101:7" pos:end="101:10">info</name><operator pos:start="101:11" pos:end="101:11">.</operator><name pos:start="101:12" pos:end="101:31">disassembler_options</name></name> <operator pos:start="101:33" pos:end="101:33">=</operator> <operator pos:start="101:35" pos:end="101:35">(</operator><name pos:start="101:36" pos:end="101:39">char</name> <operator pos:start="101:41" pos:end="101:41">*</operator><operator pos:start="101:42" pos:end="101:42">)</operator><literal type="string" pos:start="101:43" pos:end="101:47">"any"</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="106:0"><expr pos:start="103:5" pos:end="103:38"><name pos:start="103:5" pos:end="103:21"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:6">.</operator><name pos:start="103:7" pos:end="103:10">info</name><operator pos:start="103:11" pos:end="103:11">.</operator><name pos:start="103:12" pos:end="103:21">print_insn</name></name> <operator pos:start="103:23" pos:end="103:23">=</operator> <name pos:start="103:25" pos:end="103:38">print_insn_ppc</name></expr>;</expr_stmt>

<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:34">(<expr pos:start="107:9" pos:end="107:33"><name pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:10">.</operator><name pos:start="107:11" pos:end="107:14">info</name><operator pos:start="107:15" pos:end="107:15">.</operator><name pos:start="107:16" pos:end="107:25">print_insn</name></name> <operator pos:start="107:27" pos:end="107:28">==</operator> <name pos:start="107:30" pos:end="107:33">NULL</name></expr>)</condition> <block pos:start="107:36" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:49">

        <expr_stmt pos:start="109:9" pos:end="109:49"><expr pos:start="109:9" pos:end="109:48"><name pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:9">s</name><operator pos:start="109:10" pos:end="109:10">.</operator><name pos:start="109:11" pos:end="109:14">info</name><operator pos:start="109:15" pos:end="109:15">.</operator><name pos:start="109:16" pos:end="109:25">print_insn</name></name> <operator pos:start="109:27" pos:end="109:27">=</operator> <name pos:start="109:29" pos:end="109:48">print_insn_od_target</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="115:5" pos:end="165:5">for <control pos:start="115:9" pos:end="115:57">(<init pos:start="115:10" pos:end="115:19"><expr pos:start="115:10" pos:end="115:18"><name pos:start="115:10" pos:end="115:11">pc</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <name pos:start="115:15" pos:end="115:18">code</name></expr>;</init> <condition pos:start="115:21" pos:end="115:29"><expr pos:start="115:21" pos:end="115:28"><name pos:start="115:21" pos:end="115:24">size</name> <operator pos:start="115:26" pos:end="115:26">&gt;</operator> <literal type="number" pos:start="115:28" pos:end="115:28">0</literal></expr>;</condition> <incr pos:start="115:31" pos:end="115:56"><expr pos:start="115:31" pos:end="115:41"><name pos:start="115:31" pos:end="115:32">pc</name> <operator pos:start="115:34" pos:end="115:35">+=</operator> <name pos:start="115:37" pos:end="115:41">count</name></expr><operator pos:start="115:42" pos:end="115:42">,</operator> <expr pos:start="115:44" pos:end="115:56"><name pos:start="115:44" pos:end="115:47">size</name> <operator pos:start="115:49" pos:end="115:50">-=</operator> <name pos:start="115:52" pos:end="115:56">count</name></expr></incr>)</control> <block pos:start="115:59" pos:end="165:5">{<block_content pos:start="117:9" pos:end="163:9">

	<expr_stmt pos:start="117:9" pos:end="117:51"><expr pos:start="117:9" pos:end="117:50"><call pos:start="117:9" pos:end="117:50"><name pos:start="117:9" pos:end="117:15">fprintf</name><argument_list pos:start="117:16" pos:end="117:50">(<argument pos:start="117:17" pos:end="117:19"><expr pos:start="117:17" pos:end="117:19"><name pos:start="117:17" pos:end="117:19">out</name></expr></argument>, <argument pos:start="117:22" pos:end="117:45"><expr pos:start="117:22" pos:end="117:45"><literal type="string" pos:start="117:22" pos:end="117:25">"0x"</literal> <name pos:start="117:27" pos:end="117:39">TARGET_FMT_lx</name> <literal type="string" pos:start="117:41" pos:end="117:45">":  "</literal></expr></argument>, <argument pos:start="117:48" pos:end="117:49"><expr pos:start="117:48" pos:end="117:49"><name pos:start="117:48" pos:end="117:49">pc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="119:9" pos:end="144:0"><expr pos:start="119:9" pos:end="119:46"><name pos:start="119:9" pos:end="119:13">count</name> <operator pos:start="119:15" pos:end="119:15">=</operator> <call pos:start="119:17" pos:end="119:46"><name pos:start="119:17" pos:end="119:33"><name pos:start="119:17" pos:end="119:17">s</name><operator pos:start="119:18" pos:end="119:18">.</operator><name pos:start="119:19" pos:end="119:22">info</name><operator pos:start="119:23" pos:end="119:23">.</operator><name pos:start="119:24" pos:end="119:33">print_insn</name></name><argument_list pos:start="119:34" pos:end="119:46">(<argument pos:start="119:35" pos:end="119:36"><expr pos:start="119:35" pos:end="119:36"><name pos:start="119:35" pos:end="119:36">pc</name></expr></argument>, <argument pos:start="119:39" pos:end="119:45"><expr pos:start="119:39" pos:end="119:45"><operator pos:start="119:39" pos:end="119:39">&amp;</operator><name pos:start="119:40" pos:end="119:45"><name pos:start="119:40" pos:end="119:40">s</name><operator pos:start="119:41" pos:end="119:41">.</operator><name pos:start="119:42" pos:end="119:45">info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="121:1" pos:end="121:5">#<cpp:directive pos:start="121:2" pos:end="121:3">if</cpp:directive> <expr pos:start="121:5" pos:end="121:5"><literal type="number" pos:start="121:5" pos:end="121:5">0</literal></expr></cpp:if>

        {

            int i;

            uint8_t b;

            fprintf(out, " {");

            for(i = 0; i &lt; count; i++) {

                target_read_memory(pc + i, &amp;b, 1, &amp;s.info);

                fprintf(out, " %02x", b);

            }

            fprintf(out, " }");

        }

<cpp:endif pos:start="143:1" pos:end="143:6">#<cpp:directive pos:start="143:2" pos:end="143:6">endif</cpp:directive></cpp:endif>

	<expr_stmt pos:start="145:9" pos:end="145:27"><expr pos:start="145:9" pos:end="145:26"><call pos:start="145:9" pos:end="145:26"><name pos:start="145:9" pos:end="145:15">fprintf</name><argument_list pos:start="145:16" pos:end="145:26">(<argument pos:start="145:17" pos:end="145:19"><expr pos:start="145:17" pos:end="145:19"><name pos:start="145:17" pos:end="145:19">out</name></expr></argument>, <argument pos:start="145:22" pos:end="145:25"><expr pos:start="145:22" pos:end="145:25"><literal type="string" pos:start="145:22" pos:end="145:25">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="147:9" pos:end="149:18"><if pos:start="147:9" pos:end="149:18">if <condition pos:start="147:12" pos:end="147:22">(<expr pos:start="147:13" pos:end="147:21"><name pos:start="147:13" pos:end="147:17">count</name> <operator pos:start="147:19" pos:end="147:19">&lt;</operator> <literal type="number" pos:start="147:21" pos:end="147:21">0</literal></expr>)</condition><block type="pseudo" pos:start="149:13" pos:end="149:18"><block_content pos:start="149:13" pos:end="149:18">

	    <break pos:start="149:13" pos:end="149:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="151:9" pos:end="163:9"><if pos:start="151:9" pos:end="163:9">if <condition pos:start="151:12" pos:end="151:25">(<expr pos:start="151:13" pos:end="151:24"><name pos:start="151:13" pos:end="151:16">size</name> <operator pos:start="151:18" pos:end="151:18">&lt;</operator> <name pos:start="151:20" pos:end="151:24">count</name></expr>)</condition> <block pos:start="151:27" pos:end="163:9">{<block_content pos:start="153:13" pos:end="161:18">

            <expr_stmt pos:start="153:13" pos:end="159:69"><expr pos:start="153:13" pos:end="159:68"><call pos:start="153:13" pos:end="159:68"><name pos:start="153:13" pos:end="153:19">fprintf</name><argument_list pos:start="153:20" pos:end="159:68">(<argument pos:start="153:21" pos:end="153:23"><expr pos:start="153:21" pos:end="153:23"><name pos:start="153:21" pos:end="153:23">out</name></expr></argument>,

                    <argument pos:start="155:21" pos:end="159:67"><expr pos:start="155:21" pos:end="159:67"><literal type="string" pos:start="155:21" pos:end="155:78">"Disassembler disagrees with translator over instruction "</literal>

                    <literal type="string" pos:start="157:21" pos:end="157:32">"decoding\n"</literal>

                    <literal type="string" pos:start="159:21" pos:end="159:67">"Please report this to qemu-devel@nongnu.org\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="161:13" pos:end="161:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
