<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3981.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">parse_object_segment</name><parameter_list pos:start="1:32" pos:end="3:67">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:52"><decl pos:start="3:35" pos:end="3:52"><type pos:start="3:35" pos:end="3:52"><specifier pos:start="3:35" pos:end="3:39">const</specifier> <name pos:start="3:41" pos:end="3:47">uint8_t</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:52">buf</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:66"><decl pos:start="3:55" pos:end="3:66"><type pos:start="3:55" pos:end="3:66"><name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:66">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="161:1">{<block_content pos:start="7:5" pos:end="159:13">

    <decl_stmt pos:start="7:5" pos:end="7:42"><decl pos:start="7:5" pos:end="7:41"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">PGSSubContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">ctx</name> <init pos:start="7:24" pos:end="7:41">= <expr pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:41"><name pos:start="7:26" pos:end="7:30">avctx</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:41">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">PGSSubObject</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:24">object</name></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:25">sequence_desc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:31">rle_bitmap_len</name></decl>, <decl pos:start="15:34" pos:end="15:38"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:34" pos:end="15:38">width</name></decl>, <decl pos:start="15:41" pos:end="15:46"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:41" pos:end="15:46">height</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:11"><decl pos:start="17:5" pos:end="17:10"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:10">id</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:35"><if pos:start="21:5" pos:end="23:35">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:16">buf_size</name> <operator pos:start="21:18" pos:end="21:19">&lt;=</operator> <literal type="number" pos:start="21:21" pos:end="21:21">4</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:35"><block_content pos:start="23:9" pos:end="23:35">

        <return pos:start="23:9" pos:end="23:35">return <expr pos:start="23:16" pos:end="23:34"><name pos:start="23:16" pos:end="23:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:18"><expr pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:12">buf_size</name> <operator pos:start="25:14" pos:end="25:15">-=</operator> <literal type="number" pos:start="25:17" pos:end="25:17">4</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:6">id</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <call pos:start="29:10" pos:end="29:34"><name pos:start="29:10" pos:end="29:28">bytestream_get_be16</name><argument_list pos:start="29:29" pos:end="29:34">(<argument pos:start="29:30" pos:end="29:33"><expr pos:start="29:30" pos:end="29:33"><operator pos:start="29:30" pos:end="29:30">&amp;</operator><name pos:start="29:31" pos:end="29:33">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:44"><expr pos:start="31:5" pos:end="31:43"><name pos:start="31:5" pos:end="31:10">object</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:43"><name pos:start="31:14" pos:end="31:24">find_object</name><argument_list pos:start="31:25" pos:end="31:43">(<argument pos:start="31:26" pos:end="31:27"><expr pos:start="31:26" pos:end="31:27"><name pos:start="31:26" pos:end="31:27">id</name></expr></argument>, <argument pos:start="31:30" pos:end="31:42"><expr pos:start="31:30" pos:end="31:42"><operator pos:start="31:30" pos:end="31:30">&amp;</operator><name pos:start="31:31" pos:end="31:42"><name pos:start="31:31" pos:end="31:33">ctx</name><operator pos:start="31:34" pos:end="31:35">-&gt;</operator><name pos:start="31:36" pos:end="31:42">objects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="47:5"><if pos:start="33:5" pos:end="47:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:15">object</name></expr>)</condition> <block pos:start="33:18" pos:end="47:5">{<block_content pos:start="35:9" pos:end="45:24">

        <if_stmt pos:start="35:9" pos:end="41:9"><if pos:start="35:9" pos:end="41:9">if <condition pos:start="35:12" pos:end="35:52">(<expr pos:start="35:13" pos:end="35:51"><name pos:start="35:13" pos:end="35:30"><name pos:start="35:13" pos:end="35:15">ctx</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:24">objects</name><operator pos:start="35:25" pos:end="35:25">.</operator><name pos:start="35:26" pos:end="35:30">count</name></name> <operator pos:start="35:32" pos:end="35:33">&gt;=</operator> <name pos:start="35:35" pos:end="35:51">MAX_EPOCH_OBJECTS</name></expr>)</condition> <block pos:start="35:54" pos:end="41:9">{<block_content pos:start="37:13" pos:end="39:39">

            <expr_stmt pos:start="37:13" pos:end="37:71"><expr pos:start="37:13" pos:end="37:70"><call pos:start="37:13" pos:end="37:70"><name pos:start="37:13" pos:end="37:18">av_log</name><argument_list pos:start="37:19" pos:end="37:70">(<argument pos:start="37:20" pos:end="37:24"><expr pos:start="37:20" pos:end="37:24"><name pos:start="37:20" pos:end="37:24">avctx</name></expr></argument>, <argument pos:start="37:27" pos:end="37:38"><expr pos:start="37:27" pos:end="37:38"><name pos:start="37:27" pos:end="37:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:41" pos:end="37:69"><expr pos:start="37:41" pos:end="37:69"><literal type="string" pos:start="37:41" pos:end="37:69">"Too many objects in epoch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="39:13" pos:end="39:39">return <expr pos:start="39:20" pos:end="39:38"><name pos:start="39:20" pos:end="39:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:60"><expr pos:start="43:9" pos:end="43:59"><name pos:start="43:9" pos:end="43:14">object</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:59"><name pos:start="43:19" pos:end="43:21">ctx</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:30">objects</name><operator pos:start="43:31" pos:end="43:31">.</operator><name pos:start="43:32" pos:end="43:37">object</name><index pos:start="43:38" pos:end="43:59">[<expr pos:start="43:39" pos:end="43:58"><name pos:start="43:39" pos:end="43:56"><name pos:start="43:39" pos:end="43:41">ctx</name><operator pos:start="43:42" pos:end="43:43">-&gt;</operator><name pos:start="43:44" pos:end="43:50">objects</name><operator pos:start="43:51" pos:end="43:51">.</operator><name pos:start="43:52" pos:end="43:56">count</name></name><operator pos:start="43:57" pos:end="43:58">++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:24"><expr pos:start="45:9" pos:end="45:23"><name pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:14">object</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:18">id</name></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:23">id</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:36">/* skip object version number */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:13"><expr pos:start="53:5" pos:end="53:12"><name pos:start="53:5" pos:end="53:7">buf</name> <operator pos:start="53:9" pos:end="53:10">+=</operator> <literal type="number" pos:start="53:12" pos:end="53:12">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:101">/* Read the Sequence Description to determine if start of RLE data or appended to previous RLE */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:46"><expr pos:start="59:5" pos:end="59:45"><name pos:start="59:5" pos:end="59:17">sequence_desc</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <call pos:start="59:21" pos:end="59:45"><name pos:start="59:21" pos:end="59:39">bytestream_get_byte</name><argument_list pos:start="59:40" pos:end="59:45">(<argument pos:start="59:41" pos:end="59:44"><expr pos:start="59:41" pos:end="59:44"><operator pos:start="59:41" pos:end="59:41">&amp;</operator><name pos:start="59:42" pos:end="59:44">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="83:5"><if pos:start="63:5" pos:end="83:5">if <condition pos:start="63:8" pos:end="63:32">(<expr pos:start="63:9" pos:end="63:31"><operator pos:start="63:9" pos:end="63:9">!</operator><operator pos:start="63:10" pos:end="63:10">(</operator><name pos:start="63:11" pos:end="63:23">sequence_desc</name> <operator pos:start="63:25" pos:end="63:25">&amp;</operator> <literal type="number" pos:start="63:27" pos:end="63:30">0x80</literal><operator pos:start="63:31" pos:end="63:31">)</operator></expr>)</condition> <block pos:start="63:34" pos:end="83:5">{<block_content pos:start="67:9" pos:end="81:17">

        <comment type="block" pos:start="65:9" pos:end="65:33">/* Additional RLE data */</comment>

        <if_stmt pos:start="67:9" pos:end="69:39"><if pos:start="67:9" pos:end="69:39">if <condition pos:start="67:12" pos:end="67:49">(<expr pos:start="67:13" pos:end="67:48"><name pos:start="67:13" pos:end="67:20">buf_size</name> <operator pos:start="67:22" pos:end="67:22">&gt;</operator> <name pos:start="67:24" pos:end="67:48"><name pos:start="67:24" pos:end="67:29">object</name><operator pos:start="67:30" pos:end="67:31">-&gt;</operator><name pos:start="67:32" pos:end="67:48">rle_remaining_len</name></name></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:39"><block_content pos:start="69:13" pos:end="69:39">

            <return pos:start="69:13" pos:end="69:39">return <expr pos:start="69:20" pos:end="69:38"><name pos:start="69:20" pos:end="69:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:66"><expr pos:start="73:9" pos:end="73:65"><call pos:start="73:9" pos:end="73:65"><name pos:start="73:9" pos:end="73:14">memcpy</name><argument_list pos:start="73:15" pos:end="73:65">(<argument pos:start="73:16" pos:end="73:49"><expr pos:start="73:16" pos:end="73:49"><name pos:start="73:16" pos:end="73:26"><name pos:start="73:16" pos:end="73:21">object</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:26">rle</name></name> <operator pos:start="73:28" pos:end="73:28">+</operator> <name pos:start="73:30" pos:end="73:49"><name pos:start="73:30" pos:end="73:35">object</name><operator pos:start="73:36" pos:end="73:37">-&gt;</operator><name pos:start="73:38" pos:end="73:49">rle_data_len</name></name></expr></argument>, <argument pos:start="73:52" pos:end="73:54"><expr pos:start="73:52" pos:end="73:54"><name pos:start="73:52" pos:end="73:54">buf</name></expr></argument>, <argument pos:start="73:57" pos:end="73:64"><expr pos:start="73:57" pos:end="73:64"><name pos:start="73:57" pos:end="73:64">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:41"><expr pos:start="75:9" pos:end="75:40"><name pos:start="75:9" pos:end="75:28"><name pos:start="75:9" pos:end="75:14">object</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:28">rle_data_len</name></name> <operator pos:start="75:30" pos:end="75:31">+=</operator> <name pos:start="75:33" pos:end="75:40">buf_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:46"><expr pos:start="77:9" pos:end="77:45"><name pos:start="77:9" pos:end="77:33"><name pos:start="77:9" pos:end="77:14">object</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:33">rle_remaining_len</name></name> <operator pos:start="77:35" pos:end="77:36">-=</operator> <name pos:start="77:38" pos:end="77:45">buf_size</name></expr>;</expr_stmt>



        <return pos:start="81:9" pos:end="81:17">return <expr pos:start="81:16" pos:end="81:16"><literal type="number" pos:start="81:16" pos:end="81:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="87:5" pos:end="89:35"><if pos:start="87:5" pos:end="89:35">if <condition pos:start="87:8" pos:end="87:22">(<expr pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:16">buf_size</name> <operator pos:start="87:18" pos:end="87:19">&lt;=</operator> <literal type="number" pos:start="87:21" pos:end="87:21">7</literal></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:35"><block_content pos:start="89:9" pos:end="89:35">

        <return pos:start="89:9" pos:end="89:35">return <expr pos:start="89:16" pos:end="89:34"><name pos:start="89:16" pos:end="89:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:18"><expr pos:start="91:5" pos:end="91:17"><name pos:start="91:5" pos:end="91:12">buf_size</name> <operator pos:start="91:14" pos:end="91:15">-=</operator> <literal type="number" pos:start="91:17" pos:end="91:17">7</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="95:74">/* Decode rle bitmap length, stored size includes width/height data */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:53"><expr pos:start="97:5" pos:end="97:52"><name pos:start="97:5" pos:end="97:18">rle_bitmap_len</name> <operator pos:start="97:20" pos:end="97:20">=</operator> <call pos:start="97:22" pos:end="97:46"><name pos:start="97:22" pos:end="97:40">bytestream_get_be24</name><argument_list pos:start="97:41" pos:end="97:46">(<argument pos:start="97:42" pos:end="97:45"><expr pos:start="97:42" pos:end="97:45"><operator pos:start="97:42" pos:end="97:42">&amp;</operator><name pos:start="97:43" pos:end="97:45">buf</name></expr></argument>)</argument_list></call> <operator pos:start="97:48" pos:end="97:48">-</operator> <literal type="number" pos:start="97:50" pos:end="97:50">2</literal><operator pos:start="97:51" pos:end="97:51">*</operator><literal type="number" pos:start="97:52" pos:end="97:52">2</literal></expr>;</expr_stmt>



    <if_stmt pos:start="101:5" pos:end="111:5"><if pos:start="101:5" pos:end="111:5">if <condition pos:start="101:8" pos:end="101:34">(<expr pos:start="101:9" pos:end="101:33"><name pos:start="101:9" pos:end="101:16">buf_size</name> <operator pos:start="101:18" pos:end="101:18">&gt;</operator> <name pos:start="101:20" pos:end="101:33">rle_bitmap_len</name></expr>)</condition> <block pos:start="101:36" pos:end="111:5">{<block_content pos:start="103:9" pos:end="109:35">

        <expr_stmt pos:start="103:9" pos:end="107:41"><expr pos:start="103:9" pos:end="107:40"><call pos:start="103:9" pos:end="107:40"><name pos:start="103:9" pos:end="103:14">av_log</name><argument_list pos:start="103:15" pos:end="107:40">(<argument pos:start="103:16" pos:end="103:20"><expr pos:start="103:16" pos:end="103:20"><name pos:start="103:16" pos:end="103:20">avctx</name></expr></argument>, <argument pos:start="103:23" pos:end="103:34"><expr pos:start="103:23" pos:end="103:34"><name pos:start="103:23" pos:end="103:34">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="105:16" pos:end="105:75"><expr pos:start="105:16" pos:end="105:75"><literal type="string" pos:start="105:16" pos:end="105:75">"Buffer dimension %d larger than the expected RLE data %d\n"</literal></expr></argument>,

               <argument pos:start="107:16" pos:end="107:23"><expr pos:start="107:16" pos:end="107:23"><name pos:start="107:16" pos:end="107:23">buf_size</name></expr></argument>, <argument pos:start="107:26" pos:end="107:39"><expr pos:start="107:26" pos:end="107:39"><name pos:start="107:26" pos:end="107:39">rle_bitmap_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="109:9" pos:end="109:35">return <expr pos:start="109:16" pos:end="109:34"><name pos:start="109:16" pos:end="109:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:41">/* Get bitmap dimensions from data */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:39"><expr pos:start="117:5" pos:end="117:38"><name pos:start="117:5" pos:end="117:9">width</name>  <operator pos:start="117:12" pos:end="117:12">=</operator> <call pos:start="117:14" pos:end="117:38"><name pos:start="117:14" pos:end="117:32">bytestream_get_be16</name><argument_list pos:start="117:33" pos:end="117:38">(<argument pos:start="117:34" pos:end="117:37"><expr pos:start="117:34" pos:end="117:37"><operator pos:start="117:34" pos:end="117:34">&amp;</operator><name pos:start="117:35" pos:end="117:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:39"><expr pos:start="119:5" pos:end="119:38"><name pos:start="119:5" pos:end="119:10">height</name> <operator pos:start="119:12" pos:end="119:12">=</operator> <call pos:start="119:14" pos:end="119:38"><name pos:start="119:14" pos:end="119:32">bytestream_get_be16</name><argument_list pos:start="119:33" pos:end="119:38">(<argument pos:start="119:34" pos:end="119:37"><expr pos:start="119:34" pos:end="119:37"><operator pos:start="119:34" pos:end="119:34">&amp;</operator><name pos:start="119:35" pos:end="119:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:47">/* Make sure the bitmap is not too large */</comment>

    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:55">(<expr pos:start="125:9" pos:end="125:54"><name pos:start="125:9" pos:end="125:20"><name pos:start="125:9" pos:end="125:13">avctx</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:20">width</name></name> <operator pos:start="125:22" pos:end="125:22">&lt;</operator> <name pos:start="125:24" pos:end="125:28">width</name> <operator pos:start="125:30" pos:end="125:31">||</operator> <name pos:start="125:33" pos:end="125:45"><name pos:start="125:33" pos:end="125:37">avctx</name><operator pos:start="125:38" pos:end="125:39">-&gt;</operator><name pos:start="125:40" pos:end="125:45">height</name></name> <operator pos:start="125:47" pos:end="125:47">&lt;</operator> <name pos:start="125:49" pos:end="125:54">height</name></expr>)</condition> <block pos:start="125:57" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:35">

        <expr_stmt pos:start="127:9" pos:end="127:78"><expr pos:start="127:9" pos:end="127:77"><call pos:start="127:9" pos:end="127:77"><name pos:start="127:9" pos:end="127:14">av_log</name><argument_list pos:start="127:15" pos:end="127:77">(<argument pos:start="127:16" pos:end="127:20"><expr pos:start="127:16" pos:end="127:20"><name pos:start="127:16" pos:end="127:20">avctx</name></expr></argument>, <argument pos:start="127:23" pos:end="127:34"><expr pos:start="127:23" pos:end="127:34"><name pos:start="127:23" pos:end="127:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:37" pos:end="127:76"><expr pos:start="127:37" pos:end="127:76"><literal type="string" pos:start="127:37" pos:end="127:76">"Bitmap dimensions larger than video.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="129:9" pos:end="129:35">return <expr pos:start="129:16" pos:end="129:34"><name pos:start="129:16" pos:end="129:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:22"><expr pos:start="135:5" pos:end="135:21"><name pos:start="135:5" pos:end="135:13"><name pos:start="135:5" pos:end="135:10">object</name><operator pos:start="135:11" pos:end="135:12">-&gt;</operator><name pos:start="135:13" pos:end="135:13">w</name></name> <operator pos:start="135:15" pos:end="135:15">=</operator> <name pos:start="135:17" pos:end="135:21">width</name></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:23"><expr pos:start="137:5" pos:end="137:22"><name pos:start="137:5" pos:end="137:13"><name pos:start="137:5" pos:end="137:10">object</name><operator pos:start="137:11" pos:end="137:12">-&gt;</operator><name pos:start="137:13" pos:end="137:13">h</name></name> <operator pos:start="137:15" pos:end="137:15">=</operator> <name pos:start="137:17" pos:end="137:22">height</name></expr>;</expr_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:82"><expr pos:start="141:5" pos:end="141:81"><call pos:start="141:5" pos:end="141:81"><name pos:start="141:5" pos:end="141:25">av_fast_padded_malloc</name><argument_list pos:start="141:26" pos:end="141:81">(<argument pos:start="141:27" pos:end="141:38"><expr pos:start="141:27" pos:end="141:38"><operator pos:start="141:27" pos:end="141:27">&amp;</operator><name pos:start="141:28" pos:end="141:38"><name pos:start="141:28" pos:end="141:33">object</name><operator pos:start="141:34" pos:end="141:35">-&gt;</operator><name pos:start="141:36" pos:end="141:38">rle</name></name></expr></argument>, <argument pos:start="141:41" pos:end="141:64"><expr pos:start="141:41" pos:end="141:64"><operator pos:start="141:41" pos:end="141:41">&amp;</operator><name pos:start="141:42" pos:end="141:64"><name pos:start="141:42" pos:end="141:47">object</name><operator pos:start="141:48" pos:end="141:49">-&gt;</operator><name pos:start="141:50" pos:end="141:64">rle_buffer_size</name></name></expr></argument>, <argument pos:start="141:67" pos:end="141:80"><expr pos:start="141:67" pos:end="141:80"><name pos:start="141:67" pos:end="141:80">rle_bitmap_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="145:5" pos:end="147:31"><if pos:start="145:5" pos:end="147:31">if <condition pos:start="145:8" pos:end="145:21">(<expr pos:start="145:9" pos:end="145:20"><operator pos:start="145:9" pos:end="145:9">!</operator><name pos:start="145:10" pos:end="145:20"><name pos:start="145:10" pos:end="145:15">object</name><operator pos:start="145:16" pos:end="145:17">-&gt;</operator><name pos:start="145:18" pos:end="145:20">rle</name></name></expr>)</condition><block type="pseudo" pos:start="147:9" pos:end="147:31"><block_content pos:start="147:9" pos:end="147:31">

        <return pos:start="147:9" pos:end="147:31">return <expr pos:start="147:16" pos:end="147:30"><call pos:start="147:16" pos:end="147:30"><name pos:start="147:16" pos:end="147:22">AVERROR</name><argument_list pos:start="147:23" pos:end="147:30">(<argument pos:start="147:24" pos:end="147:29"><expr pos:start="147:24" pos:end="147:29"><name pos:start="147:24" pos:end="147:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="151:5" pos:end="151:39"><expr pos:start="151:5" pos:end="151:38"><call pos:start="151:5" pos:end="151:38"><name pos:start="151:5" pos:end="151:10">memcpy</name><argument_list pos:start="151:11" pos:end="151:38">(<argument pos:start="151:12" pos:end="151:22"><expr pos:start="151:12" pos:end="151:22"><name pos:start="151:12" pos:end="151:22"><name pos:start="151:12" pos:end="151:17">object</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:22">rle</name></name></expr></argument>, <argument pos:start="151:25" pos:end="151:27"><expr pos:start="151:25" pos:end="151:27"><name pos:start="151:25" pos:end="151:27">buf</name></expr></argument>, <argument pos:start="151:30" pos:end="151:37"><expr pos:start="151:30" pos:end="151:37"><name pos:start="151:30" pos:end="151:37">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:36"><expr pos:start="153:5" pos:end="153:35"><name pos:start="153:5" pos:end="153:24"><name pos:start="153:5" pos:end="153:10">object</name><operator pos:start="153:11" pos:end="153:12">-&gt;</operator><name pos:start="153:13" pos:end="153:24">rle_data_len</name></name> <operator pos:start="153:26" pos:end="153:26">=</operator> <name pos:start="153:28" pos:end="153:35">buf_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:58"><expr pos:start="155:5" pos:end="155:57"><name pos:start="155:5" pos:end="155:29"><name pos:start="155:5" pos:end="155:10">object</name><operator pos:start="155:11" pos:end="155:12">-&gt;</operator><name pos:start="155:13" pos:end="155:29">rle_remaining_len</name></name> <operator pos:start="155:31" pos:end="155:31">=</operator> <name pos:start="155:33" pos:end="155:46">rle_bitmap_len</name> <operator pos:start="155:48" pos:end="155:48">-</operator> <name pos:start="155:50" pos:end="155:57">buf_size</name></expr>;</expr_stmt>



    <return pos:start="159:5" pos:end="159:13">return <expr pos:start="159:12" pos:end="159:12"><literal type="number" pos:start="159:12" pos:end="159:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
