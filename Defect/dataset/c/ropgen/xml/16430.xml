<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16430.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">vfio_msi_setup</name><parameter_list pos:start="1:26" pos:end="1:55">(<parameter pos:start="1:27" pos:end="1:45"><decl pos:start="1:27" pos:end="1:45"><type pos:start="1:27" pos:end="1:45"><name pos:start="1:27" pos:end="1:39">VFIOPCIDevice</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:45">vdev</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:54"><decl pos:start="1:48" pos:end="1:54"><type pos:start="1:48" pos:end="1:54"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:54">pos</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint16_t</name></type> <name pos:start="5:14" pos:end="5:17">ctrl</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">bool</name></type> <name pos:start="7:10" pos:end="7:18">msi_64bit</name></decl>, <decl pos:start="7:21" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:21" pos:end="7:31">msi_maskbit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:20">entries</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="15:73">(<expr pos:start="13:9" pos:end="15:72"><call pos:start="13:9" pos:end="15:56"><name pos:start="13:9" pos:end="13:13">pread</name><argument_list pos:start="13:14" pos:end="15:56">(<argument pos:start="13:15" pos:end="13:31"><expr pos:start="13:15" pos:end="13:31"><name pos:start="13:15" pos:end="13:31"><name pos:start="13:15" pos:end="13:18">vdev</name><operator pos:start="13:19" pos:end="13:20">-&gt;</operator><name pos:start="13:21" pos:end="13:28">vbasedev</name><operator pos:start="13:29" pos:end="13:29">.</operator><name pos:start="13:30" pos:end="13:31">fd</name></name></expr></argument>, <argument pos:start="13:34" pos:end="13:38"><expr pos:start="13:34" pos:end="13:38"><operator pos:start="13:34" pos:end="13:34">&amp;</operator><name pos:start="13:35" pos:end="13:38">ctrl</name></expr></argument>, <argument pos:start="13:41" pos:end="13:52"><expr pos:start="13:41" pos:end="13:52"><sizeof pos:start="13:41" pos:end="13:52">sizeof<argument_list pos:start="13:47" pos:end="13:52">(<argument pos:start="13:48" pos:end="13:51"><expr pos:start="13:48" pos:end="13:51"><name pos:start="13:48" pos:end="13:51">ctrl</name></expr></argument>)</argument_list></sizeof></expr></argument>,

              <argument pos:start="15:15" pos:end="15:55"><expr pos:start="15:15" pos:end="15:55"><name pos:start="15:15" pos:end="15:33"><name pos:start="15:15" pos:end="15:18">vdev</name><operator pos:start="15:19" pos:end="15:20">-&gt;</operator><name pos:start="15:21" pos:end="15:33">config_offset</name></name> <operator pos:start="15:35" pos:end="15:35">+</operator> <name pos:start="15:37" pos:end="15:39">pos</name> <operator pos:start="15:41" pos:end="15:41">+</operator> <name pos:start="15:43" pos:end="15:55">PCI_CAP_FLAGS</name></expr></argument>)</argument_list></call> <operator pos:start="15:58" pos:end="15:59">!=</operator> <sizeof pos:start="15:61" pos:end="15:72">sizeof<argument_list pos:start="15:67" pos:end="15:72">(<argument pos:start="15:68" pos:end="15:71"><expr pos:start="15:68" pos:end="15:71"><name pos:start="15:68" pos:end="15:71">ctrl</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="15:75" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:22">

        <return pos:start="17:9" pos:end="17:22">return <expr pos:start="17:16" pos:end="17:21"><operator pos:start="17:16" pos:end="17:16">-</operator><name pos:start="17:17" pos:end="17:21">errno</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:8">ctrl</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <call pos:start="21:12" pos:end="21:28"><name pos:start="21:12" pos:end="21:22">le16_to_cpu</name><argument_list pos:start="21:23" pos:end="21:28">(<argument pos:start="21:24" pos:end="21:27"><expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">ctrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:47"><expr pos:start="25:5" pos:end="25:46"><name pos:start="25:5" pos:end="25:13">msi_64bit</name> <operator pos:start="25:15" pos:end="25:15">=</operator> <operator pos:start="25:17" pos:end="25:17">!</operator><operator pos:start="25:18" pos:end="25:18">!</operator><operator pos:start="25:19" pos:end="25:19">(</operator><name pos:start="25:20" pos:end="25:23">ctrl</name> <operator pos:start="25:25" pos:end="25:25">&amp;</operator> <name pos:start="25:27" pos:end="25:45">PCI_MSI_FLAGS_64BIT</name><operator pos:start="25:46" pos:end="25:46">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:51"><expr pos:start="27:5" pos:end="27:50"><name pos:start="27:5" pos:end="27:15">msi_maskbit</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <operator pos:start="27:19" pos:end="27:19">!</operator><operator pos:start="27:20" pos:end="27:20">!</operator><operator pos:start="27:21" pos:end="27:21">(</operator><name pos:start="27:22" pos:end="27:25">ctrl</name> <operator pos:start="27:27" pos:end="27:27">&amp;</operator> <name pos:start="27:29" pos:end="27:49">PCI_MSI_FLAGS_MASKBIT</name><operator pos:start="27:50" pos:end="27:50">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:55"><expr pos:start="29:5" pos:end="29:54"><name pos:start="29:5" pos:end="29:11">entries</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <literal type="number" pos:start="29:15" pos:end="29:15">1</literal> <operator pos:start="29:17" pos:end="29:18">&lt;&lt;</operator> <operator pos:start="29:20" pos:end="29:20">(</operator><operator pos:start="29:21" pos:end="29:21">(</operator><name pos:start="29:22" pos:end="29:25">ctrl</name> <operator pos:start="29:27" pos:end="29:27">&amp;</operator> <name pos:start="29:29" pos:end="29:47">PCI_MSI_FLAGS_QMASK</name><operator pos:start="29:48" pos:end="29:48">)</operator> <operator pos:start="29:50" pos:end="29:51">&gt;&gt;</operator> <literal type="number" pos:start="29:53" pos:end="29:53">1</literal><operator pos:start="29:54" pos:end="29:54">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:51"><expr pos:start="33:5" pos:end="33:50"><call pos:start="33:5" pos:end="33:50"><name pos:start="33:5" pos:end="33:24">trace_vfio_msi_setup</name><argument_list pos:start="33:25" pos:end="33:50">(<argument pos:start="33:26" pos:end="33:44"><expr pos:start="33:26" pos:end="33:44"><name pos:start="33:26" pos:end="33:44"><name pos:start="33:26" pos:end="33:29">vdev</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:39">vbasedev</name><operator pos:start="33:40" pos:end="33:40">.</operator><name pos:start="33:41" pos:end="33:44">name</name></name></expr></argument>, <argument pos:start="33:47" pos:end="33:49"><expr pos:start="33:47" pos:end="33:49"><name pos:start="33:47" pos:end="33:49">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:70"><expr pos:start="37:5" pos:end="37:69"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:69"><name pos:start="37:11" pos:end="37:18">msi_init</name><argument_list pos:start="37:19" pos:end="37:69">(<argument pos:start="37:20" pos:end="37:30"><expr pos:start="37:20" pos:end="37:30"><operator pos:start="37:20" pos:end="37:20">&amp;</operator><name pos:start="37:21" pos:end="37:30"><name pos:start="37:21" pos:end="37:24">vdev</name><operator pos:start="37:25" pos:end="37:26">-&gt;</operator><name pos:start="37:27" pos:end="37:30">pdev</name></name></expr></argument>, <argument pos:start="37:33" pos:end="37:35"><expr pos:start="37:33" pos:end="37:35"><name pos:start="37:33" pos:end="37:35">pos</name></expr></argument>, <argument pos:start="37:38" pos:end="37:44"><expr pos:start="37:38" pos:end="37:44"><name pos:start="37:38" pos:end="37:44">entries</name></expr></argument>, <argument pos:start="37:47" pos:end="37:55"><expr pos:start="37:47" pos:end="37:55"><name pos:start="37:47" pos:end="37:55">msi_64bit</name></expr></argument>, <argument pos:start="37:58" pos:end="37:68"><expr pos:start="37:58" pos:end="37:68"><name pos:start="37:58" pos:end="37:68">msi_maskbit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="51:5"><if pos:start="39:5" pos:end="51:5">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">&lt;</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>)</condition> <block pos:start="39:18" pos:end="51:5">{<block_content pos:start="41:9" pos:end="49:19">

        <if_stmt pos:start="41:9" pos:end="45:9"><if pos:start="41:9" pos:end="45:9">if <condition pos:start="41:12" pos:end="41:28">(<expr pos:start="41:13" pos:end="41:27"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:18">==</operator> <operator pos:start="41:20" pos:end="41:20">-</operator><name pos:start="41:21" pos:end="41:27">ENOTSUP</name></expr>)</condition> <block pos:start="41:30" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:21">

            <return pos:start="43:13" pos:end="43:21">return <expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:46"><expr pos:start="47:9" pos:end="47:45"><call pos:start="47:9" pos:end="47:45"><name pos:start="47:9" pos:end="47:20">error_report</name><argument_list pos:start="47:21" pos:end="47:45">(<argument pos:start="47:22" pos:end="47:44"><expr pos:start="47:22" pos:end="47:44"><literal type="string" pos:start="47:22" pos:end="47:44">"vfio: msi_init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:19">return <expr pos:start="49:16" pos:end="49:18"><name pos:start="49:16" pos:end="49:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:79"><expr pos:start="53:5" pos:end="53:78"><name pos:start="53:5" pos:end="53:22"><name pos:start="53:5" pos:end="53:8">vdev</name><operator pos:start="53:9" pos:end="53:10">-&gt;</operator><name pos:start="53:11" pos:end="53:22">msi_cap_size</name></name> <operator pos:start="53:24" pos:end="53:24">=</operator> <literal type="number" pos:start="53:26" pos:end="53:30">0xa</literal> <operator pos:start="53:30" pos:end="53:30">+</operator> <operator pos:start="53:32" pos:end="53:32">(</operator><ternary pos:start="53:33" pos:end="53:53"><condition pos:start="53:33" pos:end="53:45"><expr pos:start="53:33" pos:end="53:43"><name pos:start="53:33" pos:end="53:43">msi_maskbit</name></expr> ?</condition><then pos:start="53:47" pos:end="53:49"> <expr pos:start="53:47" pos:end="53:49"><literal type="number" pos:start="53:47" pos:end="53:49">0xa</literal></expr> </then><else pos:start="53:51" pos:end="53:53">: <expr pos:start="53:53" pos:end="53:53"><literal type="number" pos:start="53:53" pos:end="53:53">0</literal></expr></else></ternary><operator pos:start="53:54" pos:end="53:54">)</operator> <operator pos:start="53:56" pos:end="53:56">+</operator> <operator pos:start="53:58" pos:end="53:58">(</operator><ternary pos:start="53:59" pos:end="53:77"><condition pos:start="53:59" pos:end="53:69"><expr pos:start="53:59" pos:end="53:67"><name pos:start="53:59" pos:end="53:67">msi_64bit</name></expr> ?</condition><then pos:start="53:71" pos:end="53:73"> <expr pos:start="53:71" pos:end="53:73"><literal type="number" pos:start="53:71" pos:end="53:73">0x4</literal></expr> </then><else pos:start="53:75" pos:end="53:77">: <expr pos:start="53:77" pos:end="53:77"><literal type="number" pos:start="53:77" pos:end="53:77">0</literal></expr></else></ternary><operator pos:start="53:78" pos:end="53:78">)</operator></expr>;</expr_stmt>



    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><literal type="number" pos:start="57:12" pos:end="57:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
