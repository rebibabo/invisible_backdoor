<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9322.c" pos:tabs="8"><function pos:start="1:1" pos:end="445:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:33">build_legacy_cpu_hotplug_aml</name><parameter_list pos:start="1:34" pos:end="3:68">(<parameter pos:start="1:35" pos:end="1:42"><decl pos:start="1:35" pos:end="1:42"><type pos:start="1:35" pos:end="1:42"><name pos:start="1:35" pos:end="1:37">Aml</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">ctx</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:65"><decl pos:start="1:45" pos:end="1:65"><type pos:start="1:45" pos:end="1:65"><name pos:start="1:45" pos:end="1:56">MachineState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:65">machine</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:50"><decl pos:start="3:35" pos:end="3:50"><type pos:start="3:35" pos:end="3:50"><name pos:start="3:35" pos:end="3:42">uint16_t</name></type> <name pos:start="3:44" pos:end="3:50">io_base</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:67"><decl pos:start="3:53" pos:end="3:67"><type pos:start="3:53" pos:end="3:67"><name pos:start="3:53" pos:end="3:60">uint16_t</name></type> <name pos:start="3:62" pos:end="3:67">io_len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="445:1">{<block_content pos:start="7:5" pos:end="443:28">

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:7">Aml</name> <modifier pos:start="7:9" pos:end="7:9">*</modifier></type><name pos:start="7:10" pos:end="7:12">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:7">Aml</name> <modifier pos:start="9:9" pos:end="9:9">*</modifier></type><name pos:start="9:10" pos:end="9:12">crs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:7">Aml</name> <modifier pos:start="11:9" pos:end="11:9">*</modifier></type><name pos:start="11:10" pos:end="11:12">pkg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:7">Aml</name> <modifier pos:start="13:9" pos:end="13:9">*</modifier></type><name pos:start="13:10" pos:end="13:14">field</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:7">Aml</name> <modifier pos:start="15:9" pos:end="15:9">*</modifier></type><name pos:start="15:10" pos:end="15:15">method</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:7">Aml</name> <modifier pos:start="17:9" pos:end="17:9">*</modifier></type><name pos:start="17:10" pos:end="17:15">if_ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:7">Aml</name> <modifier pos:start="19:9" pos:end="19:9">*</modifier></type><name pos:start="19:10" pos:end="19:17">else_ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>, <decl pos:start="21:12" pos:end="21:19"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:19">apic_idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:37"><decl pos:start="23:5" pos:end="23:36"><type pos:start="23:5" pos:end="23:9"><name pos:start="23:5" pos:end="23:7">Aml</name> <modifier pos:start="23:9" pos:end="23:9">*</modifier></type><name pos:start="23:10" pos:end="23:17">sb_scope</name> <init pos:start="23:19" pos:end="23:36">= <expr pos:start="23:21" pos:end="23:36"><call pos:start="23:21" pos:end="23:36"><name pos:start="23:21" pos:end="23:29">aml_scope</name><argument_list pos:start="23:30" pos:end="23:36">(<argument pos:start="23:31" pos:end="23:35"><expr pos:start="23:31" pos:end="23:35"><literal type="string" pos:start="23:31" pos:end="23:35">"_SB"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:67"><decl pos:start="25:5" pos:end="25:66"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">uint8_t</name></type> <name pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:21">madt_tmpl</name><index pos:start="25:22" pos:end="25:24">[<expr pos:start="25:23" pos:end="25:23"><literal type="number" pos:start="25:23" pos:end="25:23">8</literal></expr>]</index></name> <init pos:start="25:26" pos:end="25:66">= <expr pos:start="25:28" pos:end="25:66"><block pos:start="25:28" pos:end="25:66">{<expr pos:start="25:29" pos:end="25:32"><literal type="number" pos:start="25:29" pos:end="25:32">0x00</literal></expr>, <expr pos:start="25:35" pos:end="25:38"><literal type="number" pos:start="25:35" pos:end="25:38">0x08</literal></expr>, <expr pos:start="25:41" pos:end="25:44"><literal type="number" pos:start="25:41" pos:end="25:44">0x00</literal></expr>, <expr pos:start="25:47" pos:end="25:50"><literal type="number" pos:start="25:47" pos:end="25:50">0x00</literal></expr>, <expr pos:start="25:53" pos:end="25:56"><literal type="number" pos:start="25:53" pos:end="25:56">0x00</literal></expr>, <expr pos:start="25:59" pos:end="25:59"><literal type="number" pos:start="25:59" pos:end="25:59">0</literal></expr>, <expr pos:start="25:62" pos:end="25:62"><literal type="number" pos:start="25:62" pos:end="25:62">0</literal></expr>, <expr pos:start="25:65" pos:end="25:65"><literal type="number" pos:start="25:65" pos:end="25:65">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:29"><decl pos:start="27:5" pos:end="27:28"><type pos:start="27:5" pos:end="27:9"><name pos:start="27:5" pos:end="27:7">Aml</name> <modifier pos:start="27:9" pos:end="27:9">*</modifier></type><name pos:start="27:10" pos:end="27:15">cpu_id</name> <init pos:start="27:17" pos:end="27:28">= <expr pos:start="27:19" pos:end="27:28"><call pos:start="27:19" pos:end="27:28"><name pos:start="27:19" pos:end="27:25">aml_arg</name><argument_list pos:start="27:26" pos:end="27:28">(<argument pos:start="27:27" pos:end="27:27"><expr pos:start="27:27" pos:end="27:27"><literal type="number" pos:start="27:27" pos:end="27:27">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:31"><decl pos:start="29:5" pos:end="29:30"><type pos:start="29:5" pos:end="29:9"><name pos:start="29:5" pos:end="29:7">Aml</name> <modifier pos:start="29:9" pos:end="29:9">*</modifier></type><name pos:start="29:10" pos:end="29:15">cpu_on</name> <init pos:start="29:17" pos:end="29:30">= <expr pos:start="29:19" pos:end="29:30"><call pos:start="29:19" pos:end="29:30"><name pos:start="29:19" pos:end="29:27">aml_local</name><argument_list pos:start="29:28" pos:end="29:30">(<argument pos:start="29:29" pos:end="29:29"><expr pos:start="29:29" pos:end="29:29"><literal type="number" pos:start="29:29" pos:end="29:29">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:29"><decl pos:start="31:5" pos:end="31:28"><type pos:start="31:5" pos:end="31:9"><name pos:start="31:5" pos:end="31:7">Aml</name> <modifier pos:start="31:9" pos:end="31:9">*</modifier></type><name pos:start="31:10" pos:end="31:13">madt</name> <init pos:start="31:15" pos:end="31:28">= <expr pos:start="31:17" pos:end="31:28"><call pos:start="31:17" pos:end="31:28"><name pos:start="31:17" pos:end="31:25">aml_local</name><argument_list pos:start="31:26" pos:end="31:28">(<argument pos:start="31:27" pos:end="31:27"><expr pos:start="31:27" pos:end="31:27"><literal type="number" pos:start="31:27" pos:end="31:27">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:44"><decl pos:start="33:5" pos:end="33:43"><type pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:7">Aml</name> <modifier pos:start="33:9" pos:end="33:9">*</modifier></type><name pos:start="33:10" pos:end="33:17">cpus_map</name> <init pos:start="33:19" pos:end="33:43">= <expr pos:start="33:21" pos:end="33:43"><call pos:start="33:21" pos:end="33:43"><name pos:start="33:21" pos:end="33:28">aml_name</name><argument_list pos:start="33:29" pos:end="33:43">(<argument pos:start="33:30" pos:end="33:42"><expr pos:start="33:30" pos:end="33:42"><name pos:start="33:30" pos:end="33:42">CPU_ON_BITMAP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:27"><decl pos:start="35:5" pos:end="35:26"><type pos:start="35:5" pos:end="35:9"><name pos:start="35:5" pos:end="35:7">Aml</name> <modifier pos:start="35:9" pos:end="35:9">*</modifier></type><name pos:start="35:10" pos:end="35:13">zero</name> <init pos:start="35:15" pos:end="35:26">= <expr pos:start="35:17" pos:end="35:26"><call pos:start="35:17" pos:end="35:26"><name pos:start="35:17" pos:end="35:23">aml_int</name><argument_list pos:start="35:24" pos:end="35:26">(<argument pos:start="35:25" pos:end="35:25"><expr pos:start="35:25" pos:end="35:25"><literal type="number" pos:start="35:25" pos:end="35:25">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:26"><decl pos:start="37:5" pos:end="37:25"><type pos:start="37:5" pos:end="37:9"><name pos:start="37:5" pos:end="37:7">Aml</name> <modifier pos:start="37:9" pos:end="37:9">*</modifier></type><name pos:start="37:10" pos:end="37:12">one</name> <init pos:start="37:14" pos:end="37:25">= <expr pos:start="37:16" pos:end="37:25"><call pos:start="37:16" pos:end="37:25"><name pos:start="37:16" pos:end="37:22">aml_int</name><argument_list pos:start="37:23" pos:end="37:25">(<argument pos:start="37:24" pos:end="37:24"><expr pos:start="37:24" pos:end="37:24"><literal type="number" pos:start="37:24" pos:end="37:24">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:50"><decl pos:start="39:5" pos:end="39:49"><type pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:16">MachineClass</name> <modifier pos:start="39:18" pos:end="39:18">*</modifier></type><name pos:start="39:19" pos:end="39:20">mc</name> <init pos:start="39:22" pos:end="39:49">= <expr pos:start="39:24" pos:end="39:49"><call pos:start="39:24" pos:end="39:49"><name pos:start="39:24" pos:end="39:40">MACHINE_GET_CLASS</name><argument_list pos:start="39:41" pos:end="39:49">(<argument pos:start="39:42" pos:end="39:48"><expr pos:start="39:42" pos:end="39:48"><name pos:start="39:42" pos:end="39:48">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:65"><decl pos:start="41:5" pos:end="41:64"><type pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:17">CPUArchIdList</name> <modifier pos:start="41:19" pos:end="41:19">*</modifier></type><name pos:start="41:20" pos:end="41:27">apic_ids</name> <init pos:start="41:29" pos:end="41:64">= <expr pos:start="41:31" pos:end="41:64"><call pos:start="41:31" pos:end="41:64"><name pos:start="41:31" pos:end="41:55"><name pos:start="41:31" pos:end="41:32">mc</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:55">possible_cpu_arch_ids</name></name><argument_list pos:start="41:56" pos:end="41:64">(<argument pos:start="41:57" pos:end="41:63"><expr pos:start="41:57" pos:end="41:63"><name pos:start="41:57" pos:end="41:63">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:47"><decl pos:start="43:5" pos:end="43:46"><type pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:18">PCMachineState</name> <modifier pos:start="43:20" pos:end="43:20">*</modifier></type><name pos:start="43:21" pos:end="43:24">pcms</name> <init pos:start="43:26" pos:end="43:46">= <expr pos:start="43:28" pos:end="43:46"><call pos:start="43:28" pos:end="43:46"><name pos:start="43:28" pos:end="43:37">PC_MACHINE</name><argument_list pos:start="43:38" pos:end="43:46">(<argument pos:start="43:39" pos:end="43:45"><expr pos:start="43:39" pos:end="43:45"><name pos:start="43:39" pos:end="43:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="47:5" pos:end="57:7">/*

     * _MAT method - creates an madt apic buffer

     * cpu_id = Arg0 = Processor ID = Local APIC ID

     * cpu_on = Local0 = CPON flag for this cpu

     * madt = Local1 = Buffer (in madt apic form) to return

     */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:62"><expr pos:start="59:5" pos:end="59:61"><name pos:start="59:5" pos:end="59:10">method</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <call pos:start="59:14" pos:end="59:61"><name pos:start="59:14" pos:end="59:23">aml_method</name><argument_list pos:start="59:24" pos:end="59:61">(<argument pos:start="59:25" pos:end="59:38"><expr pos:start="59:25" pos:end="59:38"><name pos:start="59:25" pos:end="59:38">CPU_MAT_METHOD</name></expr></argument>, <argument pos:start="59:41" pos:end="59:41"><expr pos:start="59:41" pos:end="59:41"><literal type="number" pos:start="59:41" pos:end="59:41">1</literal></expr></argument>, <argument pos:start="59:44" pos:end="59:60"><expr pos:start="59:44" pos:end="59:60"><name pos:start="59:44" pos:end="59:60">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="63:69"><expr pos:start="61:5" pos:end="63:68"><call pos:start="61:5" pos:end="63:68"><name pos:start="61:5" pos:end="61:14">aml_append</name><argument_list pos:start="61:15" pos:end="63:68">(<argument pos:start="61:16" pos:end="61:21"><expr pos:start="61:16" pos:end="61:21"><name pos:start="61:16" pos:end="61:21">method</name></expr></argument>,

        <argument pos:start="63:9" pos:end="63:67"><expr pos:start="63:9" pos:end="63:67"><call pos:start="63:9" pos:end="63:67"><name pos:start="63:9" pos:end="63:17">aml_store</name><argument_list pos:start="63:18" pos:end="63:67">(<argument pos:start="63:19" pos:end="63:58"><expr pos:start="63:19" pos:end="63:58"><call pos:start="63:19" pos:end="63:58"><name pos:start="63:19" pos:end="63:29">aml_derefof</name><argument_list pos:start="63:30" pos:end="63:58">(<argument pos:start="63:31" pos:end="63:57"><expr pos:start="63:31" pos:end="63:57"><call pos:start="63:31" pos:end="63:57"><name pos:start="63:31" pos:end="63:39">aml_index</name><argument_list pos:start="63:40" pos:end="63:57">(<argument pos:start="63:41" pos:end="63:48"><expr pos:start="63:41" pos:end="63:48"><name pos:start="63:41" pos:end="63:48">cpus_map</name></expr></argument>, <argument pos:start="63:51" pos:end="63:56"><expr pos:start="63:51" pos:end="63:56"><name pos:start="63:51" pos:end="63:56">cpu_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="63:61" pos:end="63:66"><expr pos:start="63:61" pos:end="63:66"><name pos:start="63:61" pos:end="63:66">cpu_on</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="67:67"><expr pos:start="65:5" pos:end="67:66"><call pos:start="65:5" pos:end="67:66"><name pos:start="65:5" pos:end="65:14">aml_append</name><argument_list pos:start="65:15" pos:end="67:66">(<argument pos:start="65:16" pos:end="65:21"><expr pos:start="65:16" pos:end="65:21"><name pos:start="65:16" pos:end="65:21">method</name></expr></argument>,

        <argument pos:start="67:9" pos:end="67:65"><expr pos:start="67:9" pos:end="67:65"><call pos:start="67:9" pos:end="67:65"><name pos:start="67:9" pos:end="67:17">aml_store</name><argument_list pos:start="67:18" pos:end="67:65">(<argument pos:start="67:19" pos:end="67:58"><expr pos:start="67:19" pos:end="67:58"><call pos:start="67:19" pos:end="67:58"><name pos:start="67:19" pos:end="67:28">aml_buffer</name><argument_list pos:start="67:29" pos:end="67:58">(<argument pos:start="67:30" pos:end="67:46"><expr pos:start="67:30" pos:end="67:46"><sizeof pos:start="67:30" pos:end="67:46">sizeof<argument_list pos:start="67:36" pos:end="67:46">(<argument pos:start="67:37" pos:end="67:45"><expr pos:start="67:37" pos:end="67:45"><name pos:start="67:37" pos:end="67:45">madt_tmpl</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="67:49" pos:end="67:57"><expr pos:start="67:49" pos:end="67:57"><name pos:start="67:49" pos:end="67:57">madt_tmpl</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:61" pos:end="67:64"><expr pos:start="67:61" pos:end="67:64"><name pos:start="67:61" pos:end="67:64">madt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="69:5" pos:end="69:70">/* Update the processor id, lapic id, and enable/disable status */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:71"><expr pos:start="71:5" pos:end="71:70"><call pos:start="71:5" pos:end="71:70"><name pos:start="71:5" pos:end="71:14">aml_append</name><argument_list pos:start="71:15" pos:end="71:70">(<argument pos:start="71:16" pos:end="71:21"><expr pos:start="71:16" pos:end="71:21"><name pos:start="71:16" pos:end="71:21">method</name></expr></argument>, <argument pos:start="71:24" pos:end="71:69"><expr pos:start="71:24" pos:end="71:69"><call pos:start="71:24" pos:end="71:69"><name pos:start="71:24" pos:end="71:32">aml_store</name><argument_list pos:start="71:33" pos:end="71:69">(<argument pos:start="71:34" pos:end="71:39"><expr pos:start="71:34" pos:end="71:39"><name pos:start="71:34" pos:end="71:39">cpu_id</name></expr></argument>, <argument pos:start="71:42" pos:end="71:68"><expr pos:start="71:42" pos:end="71:68"><call pos:start="71:42" pos:end="71:68"><name pos:start="71:42" pos:end="71:50">aml_index</name><argument_list pos:start="71:51" pos:end="71:68">(<argument pos:start="71:52" pos:end="71:55"><expr pos:start="71:52" pos:end="71:55"><name pos:start="71:52" pos:end="71:55">madt</name></expr></argument>, <argument pos:start="71:58" pos:end="71:67"><expr pos:start="71:58" pos:end="71:67"><call pos:start="71:58" pos:end="71:67"><name pos:start="71:58" pos:end="71:64">aml_int</name><argument_list pos:start="71:65" pos:end="71:67">(<argument pos:start="71:66" pos:end="71:66"><expr pos:start="71:66" pos:end="71:66"><literal type="number" pos:start="71:66" pos:end="71:66">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:71"><expr pos:start="73:5" pos:end="73:70"><call pos:start="73:5" pos:end="73:70"><name pos:start="73:5" pos:end="73:14">aml_append</name><argument_list pos:start="73:15" pos:end="73:70">(<argument pos:start="73:16" pos:end="73:21"><expr pos:start="73:16" pos:end="73:21"><name pos:start="73:16" pos:end="73:21">method</name></expr></argument>, <argument pos:start="73:24" pos:end="73:69"><expr pos:start="73:24" pos:end="73:69"><call pos:start="73:24" pos:end="73:69"><name pos:start="73:24" pos:end="73:32">aml_store</name><argument_list pos:start="73:33" pos:end="73:69">(<argument pos:start="73:34" pos:end="73:39"><expr pos:start="73:34" pos:end="73:39"><name pos:start="73:34" pos:end="73:39">cpu_id</name></expr></argument>, <argument pos:start="73:42" pos:end="73:68"><expr pos:start="73:42" pos:end="73:68"><call pos:start="73:42" pos:end="73:68"><name pos:start="73:42" pos:end="73:50">aml_index</name><argument_list pos:start="73:51" pos:end="73:68">(<argument pos:start="73:52" pos:end="73:55"><expr pos:start="73:52" pos:end="73:55"><name pos:start="73:52" pos:end="73:55">madt</name></expr></argument>, <argument pos:start="73:58" pos:end="73:67"><expr pos:start="73:58" pos:end="73:67"><call pos:start="73:58" pos:end="73:67"><name pos:start="73:58" pos:end="73:64">aml_int</name><argument_list pos:start="73:65" pos:end="73:67">(<argument pos:start="73:66" pos:end="73:66"><expr pos:start="73:66" pos:end="73:66"><literal type="number" pos:start="73:66" pos:end="73:66">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:71"><expr pos:start="75:5" pos:end="75:70"><call pos:start="75:5" pos:end="75:70"><name pos:start="75:5" pos:end="75:14">aml_append</name><argument_list pos:start="75:15" pos:end="75:70">(<argument pos:start="75:16" pos:end="75:21"><expr pos:start="75:16" pos:end="75:21"><name pos:start="75:16" pos:end="75:21">method</name></expr></argument>, <argument pos:start="75:24" pos:end="75:69"><expr pos:start="75:24" pos:end="75:69"><call pos:start="75:24" pos:end="75:69"><name pos:start="75:24" pos:end="75:32">aml_store</name><argument_list pos:start="75:33" pos:end="75:69">(<argument pos:start="75:34" pos:end="75:39"><expr pos:start="75:34" pos:end="75:39"><name pos:start="75:34" pos:end="75:39">cpu_on</name></expr></argument>, <argument pos:start="75:42" pos:end="75:68"><expr pos:start="75:42" pos:end="75:68"><call pos:start="75:42" pos:end="75:68"><name pos:start="75:42" pos:end="75:50">aml_index</name><argument_list pos:start="75:51" pos:end="75:68">(<argument pos:start="75:52" pos:end="75:55"><expr pos:start="75:52" pos:end="75:55"><name pos:start="75:52" pos:end="75:55">madt</name></expr></argument>, <argument pos:start="75:58" pos:end="75:67"><expr pos:start="75:58" pos:end="75:67"><call pos:start="75:58" pos:end="75:67"><name pos:start="75:58" pos:end="75:64">aml_int</name><argument_list pos:start="75:65" pos:end="75:67">(<argument pos:start="75:66" pos:end="75:66"><expr pos:start="75:66" pos:end="75:66"><literal type="number" pos:start="75:66" pos:end="75:66">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:41"><expr pos:start="77:5" pos:end="77:40"><call pos:start="77:5" pos:end="77:40"><name pos:start="77:5" pos:end="77:14">aml_append</name><argument_list pos:start="77:15" pos:end="77:40">(<argument pos:start="77:16" pos:end="77:21"><expr pos:start="77:16" pos:end="77:21"><name pos:start="77:16" pos:end="77:21">method</name></expr></argument>, <argument pos:start="77:24" pos:end="77:39"><expr pos:start="77:24" pos:end="77:39"><call pos:start="77:24" pos:end="77:39"><name pos:start="77:24" pos:end="77:33">aml_return</name><argument_list pos:start="77:34" pos:end="77:39">(<argument pos:start="77:35" pos:end="77:38"><expr pos:start="77:35" pos:end="77:38"><name pos:start="77:35" pos:end="77:38">madt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:33"><expr pos:start="79:5" pos:end="79:32"><call pos:start="79:5" pos:end="79:32"><name pos:start="79:5" pos:end="79:14">aml_append</name><argument_list pos:start="79:15" pos:end="79:32">(<argument pos:start="79:16" pos:end="79:23"><expr pos:start="79:16" pos:end="79:23"><name pos:start="79:16" pos:end="79:23">sb_scope</name></expr></argument>, <argument pos:start="79:26" pos:end="79:31"><expr pos:start="79:26" pos:end="79:31"><name pos:start="79:26" pos:end="79:31">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="91:7">/*

     * _STA method - return ON status of cpu

     * cpu_id = Arg0 = Processor ID = Local APIC ID

     * cpu_on = Local0 = CPON flag for this cpu

     */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:65"><expr pos:start="93:5" pos:end="93:64"><name pos:start="93:5" pos:end="93:10">method</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <call pos:start="93:14" pos:end="93:64"><name pos:start="93:14" pos:end="93:23">aml_method</name><argument_list pos:start="93:24" pos:end="93:64">(<argument pos:start="93:25" pos:end="93:41"><expr pos:start="93:25" pos:end="93:41"><name pos:start="93:25" pos:end="93:41">CPU_STATUS_METHOD</name></expr></argument>, <argument pos:start="93:44" pos:end="93:44"><expr pos:start="93:44" pos:end="93:44"><literal type="number" pos:start="93:44" pos:end="93:44">1</literal></expr></argument>, <argument pos:start="93:47" pos:end="93:63"><expr pos:start="93:47" pos:end="93:63"><name pos:start="93:47" pos:end="93:63">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="97:69"><expr pos:start="95:5" pos:end="97:68"><call pos:start="95:5" pos:end="97:68"><name pos:start="95:5" pos:end="95:14">aml_append</name><argument_list pos:start="95:15" pos:end="97:68">(<argument pos:start="95:16" pos:end="95:21"><expr pos:start="95:16" pos:end="95:21"><name pos:start="95:16" pos:end="95:21">method</name></expr></argument>,

        <argument pos:start="97:9" pos:end="97:67"><expr pos:start="97:9" pos:end="97:67"><call pos:start="97:9" pos:end="97:67"><name pos:start="97:9" pos:end="97:17">aml_store</name><argument_list pos:start="97:18" pos:end="97:67">(<argument pos:start="97:19" pos:end="97:58"><expr pos:start="97:19" pos:end="97:58"><call pos:start="97:19" pos:end="97:58"><name pos:start="97:19" pos:end="97:29">aml_derefof</name><argument_list pos:start="97:30" pos:end="97:58">(<argument pos:start="97:31" pos:end="97:57"><expr pos:start="97:31" pos:end="97:57"><call pos:start="97:31" pos:end="97:57"><name pos:start="97:31" pos:end="97:39">aml_index</name><argument_list pos:start="97:40" pos:end="97:57">(<argument pos:start="97:41" pos:end="97:48"><expr pos:start="97:41" pos:end="97:48"><name pos:start="97:41" pos:end="97:48">cpus_map</name></expr></argument>, <argument pos:start="97:51" pos:end="97:56"><expr pos:start="97:51" pos:end="97:56"><name pos:start="97:51" pos:end="97:56">cpu_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="97:61" pos:end="97:66"><expr pos:start="97:61" pos:end="97:66"><name pos:start="97:61" pos:end="97:66">cpu_on</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:28"><expr pos:start="99:5" pos:end="99:27"><name pos:start="99:5" pos:end="99:10">if_ctx</name> <operator pos:start="99:12" pos:end="99:12">=</operator> <call pos:start="99:14" pos:end="99:27"><name pos:start="99:14" pos:end="99:19">aml_if</name><argument_list pos:start="99:20" pos:end="99:27">(<argument pos:start="99:21" pos:end="99:26"><expr pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:26">cpu_on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="101:5" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:53">

        <expr_stmt pos:start="103:9" pos:end="103:53"><expr pos:start="103:9" pos:end="103:52"><call pos:start="103:9" pos:end="103:52"><name pos:start="103:9" pos:end="103:18">aml_append</name><argument_list pos:start="103:19" pos:end="103:52">(<argument pos:start="103:20" pos:end="103:25"><expr pos:start="103:20" pos:end="103:25"><name pos:start="103:20" pos:end="103:25">if_ctx</name></expr></argument>, <argument pos:start="103:28" pos:end="103:51"><expr pos:start="103:28" pos:end="103:51"><call pos:start="103:28" pos:end="103:51"><name pos:start="103:28" pos:end="103:37">aml_return</name><argument_list pos:start="103:38" pos:end="103:51">(<argument pos:start="103:39" pos:end="103:50"><expr pos:start="103:39" pos:end="103:50"><call pos:start="103:39" pos:end="103:50"><name pos:start="103:39" pos:end="103:45">aml_int</name><argument_list pos:start="103:46" pos:end="103:50">(<argument pos:start="103:47" pos:end="103:49"><expr pos:start="103:47" pos:end="103:49"><literal type="number" pos:start="103:47" pos:end="103:49">0xF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="107:5" pos:end="107:31"><expr pos:start="107:5" pos:end="107:30"><call pos:start="107:5" pos:end="107:30"><name pos:start="107:5" pos:end="107:14">aml_append</name><argument_list pos:start="107:15" pos:end="107:30">(<argument pos:start="107:16" pos:end="107:21"><expr pos:start="107:16" pos:end="107:21"><name pos:start="107:16" pos:end="107:21">method</name></expr></argument>, <argument pos:start="107:24" pos:end="107:29"><expr pos:start="107:24" pos:end="107:29"><name pos:start="107:24" pos:end="107:29">if_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:26"><expr pos:start="109:5" pos:end="109:25"><name pos:start="109:5" pos:end="109:12">else_ctx</name> <operator pos:start="109:14" pos:end="109:14">=</operator> <call pos:start="109:16" pos:end="109:25"><name pos:start="109:16" pos:end="109:23">aml_else</name><argument_list pos:start="109:24" pos:end="109:25">()</argument_list></call></expr>;</expr_stmt>

    <block pos:start="111:5" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:47">

        <expr_stmt pos:start="113:9" pos:end="113:47"><expr pos:start="113:9" pos:end="113:46"><call pos:start="113:9" pos:end="113:46"><name pos:start="113:9" pos:end="113:18">aml_append</name><argument_list pos:start="113:19" pos:end="113:46">(<argument pos:start="113:20" pos:end="113:27"><expr pos:start="113:20" pos:end="113:27"><name pos:start="113:20" pos:end="113:27">else_ctx</name></expr></argument>, <argument pos:start="113:30" pos:end="113:45"><expr pos:start="113:30" pos:end="113:45"><call pos:start="113:30" pos:end="113:45"><name pos:start="113:30" pos:end="113:39">aml_return</name><argument_list pos:start="113:40" pos:end="113:45">(<argument pos:start="113:41" pos:end="113:44"><expr pos:start="113:41" pos:end="113:44"><name pos:start="113:41" pos:end="113:44">zero</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="117:5" pos:end="117:33"><expr pos:start="117:5" pos:end="117:32"><call pos:start="117:5" pos:end="117:32"><name pos:start="117:5" pos:end="117:14">aml_append</name><argument_list pos:start="117:15" pos:end="117:32">(<argument pos:start="117:16" pos:end="117:21"><expr pos:start="117:16" pos:end="117:21"><name pos:start="117:16" pos:end="117:21">method</name></expr></argument>, <argument pos:start="117:24" pos:end="117:31"><expr pos:start="117:24" pos:end="117:31"><name pos:start="117:24" pos:end="117:31">else_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:33"><expr pos:start="119:5" pos:end="119:32"><call pos:start="119:5" pos:end="119:32"><name pos:start="119:5" pos:end="119:14">aml_append</name><argument_list pos:start="119:15" pos:end="119:32">(<argument pos:start="119:16" pos:end="119:23"><expr pos:start="119:16" pos:end="119:23"><name pos:start="119:16" pos:end="119:23">sb_scope</name></expr></argument>, <argument pos:start="119:26" pos:end="119:31"><expr pos:start="119:26" pos:end="119:31"><name pos:start="119:26" pos:end="119:31">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:64"><expr pos:start="123:5" pos:end="123:63"><name pos:start="123:5" pos:end="123:10">method</name> <operator pos:start="123:12" pos:end="123:12">=</operator> <call pos:start="123:14" pos:end="123:63"><name pos:start="123:14" pos:end="123:23">aml_method</name><argument_list pos:start="123:24" pos:end="123:63">(<argument pos:start="123:25" pos:end="123:40"><expr pos:start="123:25" pos:end="123:40"><name pos:start="123:25" pos:end="123:40">CPU_EJECT_METHOD</name></expr></argument>, <argument pos:start="123:43" pos:end="123:43"><expr pos:start="123:43" pos:end="123:43"><literal type="number" pos:start="123:43" pos:end="123:43">2</literal></expr></argument>, <argument pos:start="123:46" pos:end="123:62"><expr pos:start="123:46" pos:end="123:62"><name pos:start="123:46" pos:end="123:62">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:39"><expr pos:start="125:5" pos:end="125:38"><call pos:start="125:5" pos:end="125:38"><name pos:start="125:5" pos:end="125:14">aml_append</name><argument_list pos:start="125:15" pos:end="125:38">(<argument pos:start="125:16" pos:end="125:21"><expr pos:start="125:16" pos:end="125:21"><name pos:start="125:16" pos:end="125:21">method</name></expr></argument>, <argument pos:start="125:24" pos:end="125:37"><expr pos:start="125:24" pos:end="125:37"><call pos:start="125:24" pos:end="125:37"><name pos:start="125:24" pos:end="125:32">aml_sleep</name><argument_list pos:start="125:33" pos:end="125:37">(<argument pos:start="125:34" pos:end="125:36"><expr pos:start="125:34" pos:end="125:36"><literal type="number" pos:start="125:34" pos:end="125:36">200</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:33"><expr pos:start="127:5" pos:end="127:32"><call pos:start="127:5" pos:end="127:32"><name pos:start="127:5" pos:end="127:14">aml_append</name><argument_list pos:start="127:15" pos:end="127:32">(<argument pos:start="127:16" pos:end="127:23"><expr pos:start="127:16" pos:end="127:23"><name pos:start="127:16" pos:end="127:23">sb_scope</name></expr></argument>, <argument pos:start="127:26" pos:end="127:31"><expr pos:start="127:26" pos:end="127:31"><name pos:start="127:26" pos:end="127:31">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="131:5" pos:end="131:63"><expr pos:start="131:5" pos:end="131:62"><name pos:start="131:5" pos:end="131:10">method</name> <operator pos:start="131:12" pos:end="131:12">=</operator> <call pos:start="131:14" pos:end="131:62"><name pos:start="131:14" pos:end="131:23">aml_method</name><argument_list pos:start="131:24" pos:end="131:62">(<argument pos:start="131:25" pos:end="131:39"><expr pos:start="131:25" pos:end="131:39"><name pos:start="131:25" pos:end="131:39">CPU_SCAN_METHOD</name></expr></argument>, <argument pos:start="131:42" pos:end="131:42"><expr pos:start="131:42" pos:end="131:42"><literal type="number" pos:start="131:42" pos:end="131:42">0</literal></expr></argument>, <argument pos:start="131:45" pos:end="131:61"><expr pos:start="131:45" pos:end="131:61"><name pos:start="131:45" pos:end="131:61">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="133:5" pos:end="245:5">{<block_content pos:start="135:9" pos:end="243:38">

        <decl_stmt pos:start="135:9" pos:end="135:45"><decl pos:start="135:9" pos:end="135:22"><type pos:start="135:9" pos:end="135:13"><name pos:start="135:9" pos:end="135:11">Aml</name> <modifier pos:start="135:13" pos:end="135:13">*</modifier></type><name pos:start="135:14" pos:end="135:22">while_ctx</name></decl>, <decl pos:start="135:25" pos:end="135:32"><type ref="prev" pos:start="135:9" pos:end="135:13"><modifier pos:start="135:25" pos:end="135:25">*</modifier></type><name pos:start="135:26" pos:end="135:32">if_ctx2</name></decl>, <decl pos:start="135:35" pos:end="135:44"><type ref="prev" pos:start="135:9" pos:end="135:13"><modifier pos:start="135:35" pos:end="135:35">*</modifier></type><name pos:start="135:36" pos:end="135:44">else_ctx2</name></decl>;</decl_stmt>

        <decl_stmt pos:start="137:9" pos:end="137:40"><decl pos:start="137:9" pos:end="137:39"><type pos:start="137:9" pos:end="137:13"><name pos:start="137:9" pos:end="137:11">Aml</name> <modifier pos:start="137:13" pos:end="137:13">*</modifier></type><name pos:start="137:14" pos:end="137:26">bus_check_evt</name> <init pos:start="137:28" pos:end="137:39">= <expr pos:start="137:30" pos:end="137:39"><call pos:start="137:30" pos:end="137:39"><name pos:start="137:30" pos:end="137:36">aml_int</name><argument_list pos:start="137:37" pos:end="137:39">(<argument pos:start="137:38" pos:end="137:38"><expr pos:start="137:38" pos:end="137:38"><literal type="number" pos:start="137:38" pos:end="137:38">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="139:9" pos:end="139:37"><decl pos:start="139:9" pos:end="139:36"><type pos:start="139:9" pos:end="139:13"><name pos:start="139:9" pos:end="139:11">Aml</name> <modifier pos:start="139:13" pos:end="139:13">*</modifier></type><name pos:start="139:14" pos:end="139:23">remove_evt</name> <init pos:start="139:25" pos:end="139:36">= <expr pos:start="139:27" pos:end="139:36"><call pos:start="139:27" pos:end="139:36"><name pos:start="139:27" pos:end="139:33">aml_int</name><argument_list pos:start="139:34" pos:end="139:36">(<argument pos:start="139:35" pos:end="139:35"><expr pos:start="139:35" pos:end="139:35"><literal type="number" pos:start="139:35" pos:end="139:35">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="141:9" pos:end="141:39"><decl pos:start="141:9" pos:end="141:38"><type pos:start="141:9" pos:end="141:13"><name pos:start="141:9" pos:end="141:11">Aml</name> <modifier pos:start="141:13" pos:end="141:13">*</modifier></type><name pos:start="141:14" pos:end="141:23">status_map</name> <init pos:start="141:25" pos:end="141:38">= <expr pos:start="141:27" pos:end="141:38"><call pos:start="141:27" pos:end="141:38"><name pos:start="141:27" pos:end="141:35">aml_local</name><argument_list pos:start="141:36" pos:end="141:38">(<argument pos:start="141:37" pos:end="141:37"><expr pos:start="141:37" pos:end="141:37"><literal type="number" pos:start="141:37" pos:end="141:37">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="141:41" pos:end="141:72">/* Local5 = active cpu bitmap */</comment>

        <decl_stmt pos:start="143:9" pos:end="143:33"><decl pos:start="143:9" pos:end="143:32"><type pos:start="143:9" pos:end="143:13"><name pos:start="143:9" pos:end="143:11">Aml</name> <modifier pos:start="143:13" pos:end="143:13">*</modifier></type><name pos:start="143:14" pos:end="143:17">byte</name> <init pos:start="143:19" pos:end="143:32">= <expr pos:start="143:21" pos:end="143:32"><call pos:start="143:21" pos:end="143:32"><name pos:start="143:21" pos:end="143:29">aml_local</name><argument_list pos:start="143:30" pos:end="143:32">(<argument pos:start="143:31" pos:end="143:31"><expr pos:start="143:31" pos:end="143:31"><literal type="number" pos:start="143:31" pos:end="143:31">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="143:35" pos:end="143:75">/* Local2 = last read byte from bitmap */</comment>

        <decl_stmt pos:start="145:9" pos:end="145:32"><decl pos:start="145:9" pos:end="145:31"><type pos:start="145:9" pos:end="145:13"><name pos:start="145:9" pos:end="145:11">Aml</name> <modifier pos:start="145:13" pos:end="145:13">*</modifier></type><name pos:start="145:14" pos:end="145:16">idx</name> <init pos:start="145:18" pos:end="145:31">= <expr pos:start="145:20" pos:end="145:31"><call pos:start="145:20" pos:end="145:31"><name pos:start="145:20" pos:end="145:28">aml_local</name><argument_list pos:start="145:29" pos:end="145:31">(<argument pos:start="145:30" pos:end="145:30"><expr pos:start="145:30" pos:end="145:30"><literal type="number" pos:start="145:30" pos:end="145:30">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="145:34" pos:end="145:70">/* Processor ID / APIC ID iterator */</comment>

        <decl_stmt pos:start="147:9" pos:end="147:38"><decl pos:start="147:9" pos:end="147:37"><type pos:start="147:9" pos:end="147:13"><name pos:start="147:9" pos:end="147:11">Aml</name> <modifier pos:start="147:13" pos:end="147:13">*</modifier></type><name pos:start="147:14" pos:end="147:22">is_cpu_on</name> <init pos:start="147:24" pos:end="147:37">= <expr pos:start="147:26" pos:end="147:37"><call pos:start="147:26" pos:end="147:37"><name pos:start="147:26" pos:end="147:34">aml_local</name><argument_list pos:start="147:35" pos:end="147:37">(<argument pos:start="147:36" pos:end="147:36"><expr pos:start="147:36" pos:end="147:36"><literal type="number" pos:start="147:36" pos:end="147:36">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="147:40" pos:end="147:71">/* Local1 = CPON flag for cpu */</comment>

        <decl_stmt pos:start="149:9" pos:end="149:35"><decl pos:start="149:9" pos:end="149:34"><type pos:start="149:9" pos:end="149:13"><name pos:start="149:9" pos:end="149:11">Aml</name> <modifier pos:start="149:13" pos:end="149:13">*</modifier></type><name pos:start="149:14" pos:end="149:19">status</name> <init pos:start="149:21" pos:end="149:34">= <expr pos:start="149:23" pos:end="149:34"><call pos:start="149:23" pos:end="149:34"><name pos:start="149:23" pos:end="149:31">aml_local</name><argument_list pos:start="149:32" pos:end="149:34">(<argument pos:start="149:33" pos:end="149:33"><expr pos:start="149:33" pos:end="149:33"><literal type="number" pos:start="149:33" pos:end="149:33">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="149:37" pos:end="149:71">/* Local3 = active state for cpu */</comment>



        <expr_stmt pos:start="153:9" pos:end="153:76"><expr pos:start="153:9" pos:end="153:75"><call pos:start="153:9" pos:end="153:75"><name pos:start="153:9" pos:end="153:18">aml_append</name><argument_list pos:start="153:19" pos:end="153:75">(<argument pos:start="153:20" pos:end="153:25"><expr pos:start="153:20" pos:end="153:25"><name pos:start="153:20" pos:end="153:25">method</name></expr></argument>, <argument pos:start="153:28" pos:end="153:74"><expr pos:start="153:28" pos:end="153:74"><call pos:start="153:28" pos:end="153:74"><name pos:start="153:28" pos:end="153:36">aml_store</name><argument_list pos:start="153:37" pos:end="153:74">(<argument pos:start="153:38" pos:end="153:61"><expr pos:start="153:38" pos:end="153:61"><call pos:start="153:38" pos:end="153:61"><name pos:start="153:38" pos:end="153:45">aml_name</name><argument_list pos:start="153:46" pos:end="153:61">(<argument pos:start="153:47" pos:end="153:60"><expr pos:start="153:47" pos:end="153:60"><name pos:start="153:47" pos:end="153:60">CPU_STATUS_MAP</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="153:64" pos:end="153:73"><expr pos:start="153:64" pos:end="153:73"><name pos:start="153:64" pos:end="153:73">status_map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:50"><expr pos:start="155:9" pos:end="155:49"><call pos:start="155:9" pos:end="155:49"><name pos:start="155:9" pos:end="155:18">aml_append</name><argument_list pos:start="155:19" pos:end="155:49">(<argument pos:start="155:20" pos:end="155:25"><expr pos:start="155:20" pos:end="155:25"><name pos:start="155:20" pos:end="155:25">method</name></expr></argument>, <argument pos:start="155:28" pos:end="155:48"><expr pos:start="155:28" pos:end="155:48"><call pos:start="155:28" pos:end="155:48"><name pos:start="155:28" pos:end="155:36">aml_store</name><argument_list pos:start="155:37" pos:end="155:48">(<argument pos:start="155:38" pos:end="155:41"><expr pos:start="155:38" pos:end="155:41"><name pos:start="155:38" pos:end="155:41">zero</name></expr></argument>, <argument pos:start="155:44" pos:end="155:47"><expr pos:start="155:44" pos:end="155:47"><name pos:start="155:44" pos:end="155:47">byte</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:49"><expr pos:start="157:9" pos:end="157:48"><call pos:start="157:9" pos:end="157:48"><name pos:start="157:9" pos:end="157:18">aml_append</name><argument_list pos:start="157:19" pos:end="157:48">(<argument pos:start="157:20" pos:end="157:25"><expr pos:start="157:20" pos:end="157:25"><name pos:start="157:20" pos:end="157:25">method</name></expr></argument>, <argument pos:start="157:28" pos:end="157:47"><expr pos:start="157:28" pos:end="157:47"><call pos:start="157:28" pos:end="157:47"><name pos:start="157:28" pos:end="157:36">aml_store</name><argument_list pos:start="157:37" pos:end="157:47">(<argument pos:start="157:38" pos:end="157:41"><expr pos:start="157:38" pos:end="157:41"><name pos:start="157:38" pos:end="157:41">zero</name></expr></argument>, <argument pos:start="157:44" pos:end="157:46"><expr pos:start="157:44" pos:end="157:46"><name pos:start="157:44" pos:end="157:46">idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="161:9" pos:end="161:40">/* While (idx &lt; SizeOf(CPON)) */</comment>

        <expr_stmt pos:start="163:9" pos:end="163:68"><expr pos:start="163:9" pos:end="163:67"><name pos:start="163:9" pos:end="163:17">while_ctx</name> <operator pos:start="163:19" pos:end="163:19">=</operator> <call pos:start="163:21" pos:end="163:67"><name pos:start="163:21" pos:end="163:29">aml_while</name><argument_list pos:start="163:30" pos:end="163:67">(<argument pos:start="163:31" pos:end="163:66"><expr pos:start="163:31" pos:end="163:66"><call pos:start="163:31" pos:end="163:66"><name pos:start="163:31" pos:end="163:39">aml_lless</name><argument_list pos:start="163:40" pos:end="163:66">(<argument pos:start="163:41" pos:end="163:43"><expr pos:start="163:41" pos:end="163:43"><name pos:start="163:41" pos:end="163:43">idx</name></expr></argument>, <argument pos:start="163:46" pos:end="163:65"><expr pos:start="163:46" pos:end="163:65"><call pos:start="163:46" pos:end="163:65"><name pos:start="163:46" pos:end="163:55">aml_sizeof</name><argument_list pos:start="163:56" pos:end="163:65">(<argument pos:start="163:57" pos:end="163:64"><expr pos:start="163:57" pos:end="163:64"><name pos:start="163:57" pos:end="163:64">cpus_map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="167:73"><expr pos:start="165:9" pos:end="167:72"><call pos:start="165:9" pos:end="167:72"><name pos:start="165:9" pos:end="165:18">aml_append</name><argument_list pos:start="165:19" pos:end="167:72">(<argument pos:start="165:20" pos:end="165:28"><expr pos:start="165:20" pos:end="165:28"><name pos:start="165:20" pos:end="165:28">while_ctx</name></expr></argument>,

            <argument pos:start="167:13" pos:end="167:71"><expr pos:start="167:13" pos:end="167:71"><call pos:start="167:13" pos:end="167:71"><name pos:start="167:13" pos:end="167:21">aml_store</name><argument_list pos:start="167:22" pos:end="167:71">(<argument pos:start="167:23" pos:end="167:59"><expr pos:start="167:23" pos:end="167:59"><call pos:start="167:23" pos:end="167:59"><name pos:start="167:23" pos:end="167:33">aml_derefof</name><argument_list pos:start="167:34" pos:end="167:59">(<argument pos:start="167:35" pos:end="167:58"><expr pos:start="167:35" pos:end="167:58"><call pos:start="167:35" pos:end="167:58"><name pos:start="167:35" pos:end="167:43">aml_index</name><argument_list pos:start="167:44" pos:end="167:58">(<argument pos:start="167:45" pos:end="167:52"><expr pos:start="167:45" pos:end="167:52"><name pos:start="167:45" pos:end="167:52">cpus_map</name></expr></argument>, <argument pos:start="167:55" pos:end="167:57"><expr pos:start="167:55" pos:end="167:57"><name pos:start="167:55" pos:end="167:57">idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="167:62" pos:end="167:70"><expr pos:start="167:62" pos:end="167:70"><name pos:start="167:62" pos:end="167:70">is_cpu_on</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="171:9" pos:end="171:59"><expr pos:start="171:9" pos:end="171:58"><name pos:start="171:9" pos:end="171:14">if_ctx</name> <operator pos:start="171:16" pos:end="171:16">=</operator> <call pos:start="171:18" pos:end="171:58"><name pos:start="171:18" pos:end="171:23">aml_if</name><argument_list pos:start="171:24" pos:end="171:58">(<argument pos:start="171:25" pos:end="171:57"><expr pos:start="171:25" pos:end="171:57"><call pos:start="171:25" pos:end="171:57"><name pos:start="171:25" pos:end="171:31">aml_and</name><argument_list pos:start="171:32" pos:end="171:57">(<argument pos:start="171:33" pos:end="171:35"><expr pos:start="171:33" pos:end="171:35"><name pos:start="171:33" pos:end="171:35">idx</name></expr></argument>, <argument pos:start="171:38" pos:end="171:50"><expr pos:start="171:38" pos:end="171:50"><call pos:start="171:38" pos:end="171:50"><name pos:start="171:38" pos:end="171:44">aml_int</name><argument_list pos:start="171:45" pos:end="171:50">(<argument pos:start="171:46" pos:end="171:49"><expr pos:start="171:46" pos:end="171:49"><literal type="number" pos:start="171:46" pos:end="171:49">0x07</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="171:53" pos:end="171:56"><expr pos:start="171:53" pos:end="171:56"><name pos:start="171:53" pos:end="171:56">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="173:9" pos:end="179:9">{<block_content pos:start="177:13" pos:end="177:64">

            <comment type="block" pos:start="175:13" pos:end="175:56">/* Shift down previously read bitmap byte */</comment>

            <expr_stmt pos:start="177:13" pos:end="177:64"><expr pos:start="177:13" pos:end="177:63"><call pos:start="177:13" pos:end="177:63"><name pos:start="177:13" pos:end="177:22">aml_append</name><argument_list pos:start="177:23" pos:end="177:63">(<argument pos:start="177:24" pos:end="177:29"><expr pos:start="177:24" pos:end="177:29"><name pos:start="177:24" pos:end="177:29">if_ctx</name></expr></argument>, <argument pos:start="177:32" pos:end="177:62"><expr pos:start="177:32" pos:end="177:62"><call pos:start="177:32" pos:end="177:62"><name pos:start="177:32" pos:end="177:45">aml_shiftright</name><argument_list pos:start="177:46" pos:end="177:62">(<argument pos:start="177:47" pos:end="177:50"><expr pos:start="177:47" pos:end="177:50"><name pos:start="177:47" pos:end="177:50">byte</name></expr></argument>, <argument pos:start="177:53" pos:end="177:55"><expr pos:start="177:53" pos:end="177:55"><name pos:start="177:53" pos:end="177:55">one</name></expr></argument>, <argument pos:start="177:58" pos:end="177:61"><expr pos:start="177:58" pos:end="177:61"><name pos:start="177:58" pos:end="177:61">byte</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="181:9" pos:end="181:38"><expr pos:start="181:9" pos:end="181:37"><call pos:start="181:9" pos:end="181:37"><name pos:start="181:9" pos:end="181:18">aml_append</name><argument_list pos:start="181:19" pos:end="181:37">(<argument pos:start="181:20" pos:end="181:28"><expr pos:start="181:20" pos:end="181:28"><name pos:start="181:20" pos:end="181:28">while_ctx</name></expr></argument>, <argument pos:start="181:31" pos:end="181:36"><expr pos:start="181:31" pos:end="181:36"><name pos:start="181:31" pos:end="181:36">if_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="185:9" pos:end="185:30"><expr pos:start="185:9" pos:end="185:29"><name pos:start="185:9" pos:end="185:16">else_ctx</name> <operator pos:start="185:18" pos:end="185:18">=</operator> <call pos:start="185:20" pos:end="185:29"><name pos:start="185:20" pos:end="185:27">aml_else</name><argument_list pos:start="185:28" pos:end="185:29">()</argument_list></call></expr>;</expr_stmt>

        <block pos:start="187:9" pos:end="195:9">{<block_content pos:start="191:13" pos:end="193:71">

            <comment type="block" pos:start="189:13" pos:end="189:48">/* Read next byte from cpu bitmap */</comment>

            <expr_stmt pos:start="191:13" pos:end="193:71"><expr pos:start="191:13" pos:end="193:70"><call pos:start="191:13" pos:end="193:70"><name pos:start="191:13" pos:end="191:22">aml_append</name><argument_list pos:start="191:23" pos:end="193:70">(<argument pos:start="191:24" pos:end="191:31"><expr pos:start="191:24" pos:end="191:31"><name pos:start="191:24" pos:end="191:31">else_ctx</name></expr></argument>, <argument pos:start="191:34" pos:end="193:69"><expr pos:start="191:34" pos:end="193:69"><call pos:start="191:34" pos:end="193:69"><name pos:start="191:34" pos:end="191:42">aml_store</name><argument_list pos:start="191:43" pos:end="193:69">(<argument pos:start="191:44" pos:end="193:62"><expr pos:start="191:44" pos:end="193:62"><call pos:start="191:44" pos:end="193:62"><name pos:start="191:44" pos:end="191:54">aml_derefof</name><argument_list pos:start="191:55" pos:end="193:62">(<argument pos:start="191:56" pos:end="193:61"><expr pos:start="191:56" pos:end="193:61"><call pos:start="191:56" pos:end="193:61"><name pos:start="191:56" pos:end="191:64">aml_index</name><argument_list pos:start="191:65" pos:end="193:61">(<argument pos:start="191:66" pos:end="191:75"><expr pos:start="191:66" pos:end="191:75"><name pos:start="191:66" pos:end="191:75">status_map</name></expr></argument>,

                       <argument pos:start="193:24" pos:end="193:60"><expr pos:start="193:24" pos:end="193:60"><call pos:start="193:24" pos:end="193:60"><name pos:start="193:24" pos:end="193:37">aml_shiftright</name><argument_list pos:start="193:38" pos:end="193:60">(<argument pos:start="193:39" pos:end="193:41"><expr pos:start="193:39" pos:end="193:41"><name pos:start="193:39" pos:end="193:41">idx</name></expr></argument>, <argument pos:start="193:44" pos:end="193:53"><expr pos:start="193:44" pos:end="193:53"><call pos:start="193:44" pos:end="193:53"><name pos:start="193:44" pos:end="193:50">aml_int</name><argument_list pos:start="193:51" pos:end="193:53">(<argument pos:start="193:52" pos:end="193:52"><expr pos:start="193:52" pos:end="193:52"><literal type="number" pos:start="193:52" pos:end="193:52">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="193:56" pos:end="193:59"><expr pos:start="193:56" pos:end="193:59"><name pos:start="193:56" pos:end="193:59">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="193:65" pos:end="193:68"><expr pos:start="193:65" pos:end="193:68"><name pos:start="193:65" pos:end="193:68">byte</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="197:9" pos:end="197:40"><expr pos:start="197:9" pos:end="197:39"><call pos:start="197:9" pos:end="197:39"><name pos:start="197:9" pos:end="197:18">aml_append</name><argument_list pos:start="197:19" pos:end="197:39">(<argument pos:start="197:20" pos:end="197:28"><expr pos:start="197:20" pos:end="197:28"><name pos:start="197:20" pos:end="197:28">while_ctx</name></expr></argument>, <argument pos:start="197:31" pos:end="197:38"><expr pos:start="197:31" pos:end="197:38"><name pos:start="197:31" pos:end="197:38">else_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="201:9" pos:end="201:75"><expr pos:start="201:9" pos:end="201:74"><call pos:start="201:9" pos:end="201:74"><name pos:start="201:9" pos:end="201:18">aml_append</name><argument_list pos:start="201:19" pos:end="201:74">(<argument pos:start="201:20" pos:end="201:28"><expr pos:start="201:20" pos:end="201:28"><name pos:start="201:20" pos:end="201:28">while_ctx</name></expr></argument>, <argument pos:start="201:31" pos:end="201:73"><expr pos:start="201:31" pos:end="201:73"><call pos:start="201:31" pos:end="201:73"><name pos:start="201:31" pos:end="201:39">aml_store</name><argument_list pos:start="201:40" pos:end="201:73">(<argument pos:start="201:41" pos:end="201:64"><expr pos:start="201:41" pos:end="201:64"><call pos:start="201:41" pos:end="201:64"><name pos:start="201:41" pos:end="201:47">aml_and</name><argument_list pos:start="201:48" pos:end="201:64">(<argument pos:start="201:49" pos:end="201:52"><expr pos:start="201:49" pos:end="201:52"><name pos:start="201:49" pos:end="201:52">byte</name></expr></argument>, <argument pos:start="201:55" pos:end="201:57"><expr pos:start="201:55" pos:end="201:57"><name pos:start="201:55" pos:end="201:57">one</name></expr></argument>, <argument pos:start="201:60" pos:end="201:63"><expr pos:start="201:60" pos:end="201:63"><name pos:start="201:60" pos:end="201:63">NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="201:67" pos:end="201:72"><expr pos:start="201:67" pos:end="201:72"><name pos:start="201:67" pos:end="201:72">status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:64"><expr pos:start="203:9" pos:end="203:63"><name pos:start="203:9" pos:end="203:14">if_ctx</name> <operator pos:start="203:16" pos:end="203:16">=</operator> <call pos:start="203:18" pos:end="203:63"><name pos:start="203:18" pos:end="203:23">aml_if</name><argument_list pos:start="203:24" pos:end="203:63">(<argument pos:start="203:25" pos:end="203:62"><expr pos:start="203:25" pos:end="203:62"><call pos:start="203:25" pos:end="203:62"><name pos:start="203:25" pos:end="203:32">aml_lnot</name><argument_list pos:start="203:33" pos:end="203:62">(<argument pos:start="203:34" pos:end="203:61"><expr pos:start="203:34" pos:end="203:61"><call pos:start="203:34" pos:end="203:61"><name pos:start="203:34" pos:end="203:42">aml_equal</name><argument_list pos:start="203:43" pos:end="203:61">(<argument pos:start="203:44" pos:end="203:52"><expr pos:start="203:44" pos:end="203:52"><name pos:start="203:44" pos:end="203:52">is_cpu_on</name></expr></argument>, <argument pos:start="203:55" pos:end="203:60"><expr pos:start="203:55" pos:end="203:60"><name pos:start="203:55" pos:end="203:60">status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="205:9" pos:end="233:9">{<block_content pos:start="209:13" pos:end="231:13">

            <comment type="block" pos:start="207:13" pos:end="207:59">/* State change - update CPON with new state */</comment>

            <expr_stmt pos:start="209:13" pos:end="209:76"><expr pos:start="209:13" pos:end="209:75"><call pos:start="209:13" pos:end="209:75"><name pos:start="209:13" pos:end="209:22">aml_append</name><argument_list pos:start="209:23" pos:end="209:75">(<argument pos:start="209:24" pos:end="209:29"><expr pos:start="209:24" pos:end="209:29"><name pos:start="209:24" pos:end="209:29">if_ctx</name></expr></argument>, <argument pos:start="209:32" pos:end="209:74"><expr pos:start="209:32" pos:end="209:74"><call pos:start="209:32" pos:end="209:74"><name pos:start="209:32" pos:end="209:40">aml_store</name><argument_list pos:start="209:41" pos:end="209:74">(<argument pos:start="209:42" pos:end="209:47"><expr pos:start="209:42" pos:end="209:47"><name pos:start="209:42" pos:end="209:47">status</name></expr></argument>, <argument pos:start="209:50" pos:end="209:73"><expr pos:start="209:50" pos:end="209:73"><call pos:start="209:50" pos:end="209:73"><name pos:start="209:50" pos:end="209:58">aml_index</name><argument_list pos:start="209:59" pos:end="209:73">(<argument pos:start="209:60" pos:end="209:67"><expr pos:start="209:60" pos:end="209:67"><name pos:start="209:60" pos:end="209:67">cpus_map</name></expr></argument>, <argument pos:start="209:70" pos:end="209:72"><expr pos:start="209:70" pos:end="209:72"><name pos:start="209:70" pos:end="209:72">idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:53"><expr pos:start="211:13" pos:end="211:52"><name pos:start="211:13" pos:end="211:19">if_ctx2</name> <operator pos:start="211:21" pos:end="211:21">=</operator> <call pos:start="211:23" pos:end="211:52"><name pos:start="211:23" pos:end="211:28">aml_if</name><argument_list pos:start="211:29" pos:end="211:52">(<argument pos:start="211:30" pos:end="211:51"><expr pos:start="211:30" pos:end="211:51"><call pos:start="211:30" pos:end="211:51"><name pos:start="211:30" pos:end="211:38">aml_equal</name><argument_list pos:start="211:39" pos:end="211:51">(<argument pos:start="211:40" pos:end="211:45"><expr pos:start="211:40" pos:end="211:45"><name pos:start="211:40" pos:end="211:45">status</name></expr></argument>, <argument pos:start="211:48" pos:end="211:50"><expr pos:start="211:48" pos:end="211:50"><name pos:start="211:48" pos:end="211:50">one</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <block pos:start="213:13" pos:end="219:13">{<block_content pos:start="215:17" pos:end="217:70">

                <expr_stmt pos:start="215:17" pos:end="217:70"><expr pos:start="215:17" pos:end="217:69"><call pos:start="215:17" pos:end="217:69"><name pos:start="215:17" pos:end="215:26">aml_append</name><argument_list pos:start="215:27" pos:end="217:69">(<argument pos:start="215:28" pos:end="215:34"><expr pos:start="215:28" pos:end="215:34"><name pos:start="215:28" pos:end="215:34">if_ctx2</name></expr></argument>,

                    <argument pos:start="217:21" pos:end="217:68"><expr pos:start="217:21" pos:end="217:68"><call pos:start="217:21" pos:end="217:68"><name pos:start="217:21" pos:end="217:29">aml_call2</name><argument_list pos:start="217:30" pos:end="217:68">(<argument pos:start="217:31" pos:end="217:47"><expr pos:start="217:31" pos:end="217:47"><name pos:start="217:31" pos:end="217:47">AML_NOTIFY_METHOD</name></expr></argument>, <argument pos:start="217:50" pos:end="217:52"><expr pos:start="217:50" pos:end="217:52"><name pos:start="217:50" pos:end="217:52">idx</name></expr></argument>, <argument pos:start="217:55" pos:end="217:67"><expr pos:start="217:55" pos:end="217:67"><name pos:start="217:55" pos:end="217:67">bus_check_evt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <expr_stmt pos:start="221:13" pos:end="221:40"><expr pos:start="221:13" pos:end="221:39"><call pos:start="221:13" pos:end="221:39"><name pos:start="221:13" pos:end="221:22">aml_append</name><argument_list pos:start="221:23" pos:end="221:39">(<argument pos:start="221:24" pos:end="221:29"><expr pos:start="221:24" pos:end="221:29"><name pos:start="221:24" pos:end="221:29">if_ctx</name></expr></argument>, <argument pos:start="221:32" pos:end="221:38"><expr pos:start="221:32" pos:end="221:38"><name pos:start="221:32" pos:end="221:38">if_ctx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:35"><expr pos:start="223:13" pos:end="223:34"><name pos:start="223:13" pos:end="223:21">else_ctx2</name> <operator pos:start="223:23" pos:end="223:23">=</operator> <call pos:start="223:25" pos:end="223:34"><name pos:start="223:25" pos:end="223:32">aml_else</name><argument_list pos:start="223:33" pos:end="223:34">()</argument_list></call></expr>;</expr_stmt>

            <block pos:start="225:13" pos:end="231:13">{<block_content pos:start="227:17" pos:end="229:67">

                <expr_stmt pos:start="227:17" pos:end="229:67"><expr pos:start="227:17" pos:end="229:66"><call pos:start="227:17" pos:end="229:66"><name pos:start="227:17" pos:end="227:26">aml_append</name><argument_list pos:start="227:27" pos:end="229:66">(<argument pos:start="227:28" pos:end="227:36"><expr pos:start="227:28" pos:end="227:36"><name pos:start="227:28" pos:end="227:36">else_ctx2</name></expr></argument>,

                    <argument pos:start="229:21" pos:end="229:65"><expr pos:start="229:21" pos:end="229:65"><call pos:start="229:21" pos:end="229:65"><name pos:start="229:21" pos:end="229:29">aml_call2</name><argument_list pos:start="229:30" pos:end="229:65">(<argument pos:start="229:31" pos:end="229:47"><expr pos:start="229:31" pos:end="229:47"><name pos:start="229:31" pos:end="229:47">AML_NOTIFY_METHOD</name></expr></argument>, <argument pos:start="229:50" pos:end="229:52"><expr pos:start="229:50" pos:end="229:52"><name pos:start="229:50" pos:end="229:52">idx</name></expr></argument>, <argument pos:start="229:55" pos:end="229:64"><expr pos:start="229:55" pos:end="229:64"><name pos:start="229:55" pos:end="229:64">remove_evt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

        </block_content>}</block>

        <expr_stmt pos:start="235:9" pos:end="235:38"><expr pos:start="235:9" pos:end="235:37"><call pos:start="235:9" pos:end="235:37"><name pos:start="235:9" pos:end="235:18">aml_append</name><argument_list pos:start="235:19" pos:end="235:37">(<argument pos:start="235:20" pos:end="235:25"><expr pos:start="235:20" pos:end="235:25"><name pos:start="235:20" pos:end="235:25">if_ctx</name></expr></argument>, <argument pos:start="235:28" pos:end="235:36"><expr pos:start="235:28" pos:end="235:36"><name pos:start="235:28" pos:end="235:36">else_ctx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="237:9" pos:end="237:38"><expr pos:start="237:9" pos:end="237:37"><call pos:start="237:9" pos:end="237:37"><name pos:start="237:9" pos:end="237:18">aml_append</name><argument_list pos:start="237:19" pos:end="237:37">(<argument pos:start="237:20" pos:end="237:28"><expr pos:start="237:20" pos:end="237:28"><name pos:start="237:20" pos:end="237:28">while_ctx</name></expr></argument>, <argument pos:start="237:31" pos:end="237:36"><expr pos:start="237:31" pos:end="237:36"><name pos:start="237:31" pos:end="237:36">if_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="241:9" pos:end="241:50"><expr pos:start="241:9" pos:end="241:49"><call pos:start="241:9" pos:end="241:49"><name pos:start="241:9" pos:end="241:18">aml_append</name><argument_list pos:start="241:19" pos:end="241:49">(<argument pos:start="241:20" pos:end="241:28"><expr pos:start="241:20" pos:end="241:28"><name pos:start="241:20" pos:end="241:28">while_ctx</name></expr></argument>, <argument pos:start="241:31" pos:end="241:48"><expr pos:start="241:31" pos:end="241:48"><call pos:start="241:31" pos:end="241:48"><name pos:start="241:31" pos:end="241:43">aml_increment</name><argument_list pos:start="241:44" pos:end="241:48">(<argument pos:start="241:45" pos:end="241:47"><expr pos:start="241:45" pos:end="241:47"><name pos:start="241:45" pos:end="241:47">idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="241:52" pos:end="241:71">/* go to next cpu */</comment>

        <expr_stmt pos:start="243:9" pos:end="243:38"><expr pos:start="243:9" pos:end="243:37"><call pos:start="243:9" pos:end="243:37"><name pos:start="243:9" pos:end="243:18">aml_append</name><argument_list pos:start="243:19" pos:end="243:37">(<argument pos:start="243:20" pos:end="243:25"><expr pos:start="243:20" pos:end="243:25"><name pos:start="243:20" pos:end="243:25">method</name></expr></argument>, <argument pos:start="243:28" pos:end="243:36"><expr pos:start="243:28" pos:end="243:36"><name pos:start="243:28" pos:end="243:36">while_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="247:5" pos:end="247:33"><expr pos:start="247:5" pos:end="247:32"><call pos:start="247:5" pos:end="247:32"><name pos:start="247:5" pos:end="247:14">aml_append</name><argument_list pos:start="247:15" pos:end="247:32">(<argument pos:start="247:16" pos:end="247:23"><expr pos:start="247:16" pos:end="247:23"><name pos:start="247:16" pos:end="247:23">sb_scope</name></expr></argument>, <argument pos:start="247:26" pos:end="247:31"><expr pos:start="247:26" pos:end="247:31"><name pos:start="247:26" pos:end="247:31">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="251:5" pos:end="253:38">/* The current AML generator can cover the APIC ID range [0..255],

     * inclusive, for VCPU hotplug. */</comment>

    <expr_stmt pos:start="255:5" pos:end="255:55"><expr pos:start="255:5" pos:end="255:54"><call pos:start="255:5" pos:end="255:54"><name pos:start="255:5" pos:end="255:21">QEMU_BUILD_BUG_ON</name><argument_list pos:start="255:22" pos:end="255:54">(<argument pos:start="255:23" pos:end="255:53"><expr pos:start="255:23" pos:end="255:53"><name pos:start="255:23" pos:end="255:47">ACPI_CPU_HOTPLUG_ID_LIMIT</name> <operator pos:start="255:49" pos:end="255:49">&gt;</operator> <literal type="number" pos:start="255:51" pos:end="255:53">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:63"><expr pos:start="257:5" pos:end="257:62"><call pos:start="257:5" pos:end="257:62"><name pos:start="257:5" pos:end="257:12">g_assert</name><argument_list pos:start="257:13" pos:end="257:62">(<argument pos:start="257:14" pos:end="257:61"><expr pos:start="257:14" pos:end="257:61"><name pos:start="257:14" pos:end="257:32"><name pos:start="257:14" pos:end="257:17">pcms</name><operator pos:start="257:18" pos:end="257:19">-&gt;</operator><name pos:start="257:20" pos:end="257:32">apic_id_limit</name></name> <operator pos:start="257:34" pos:end="257:35">&lt;=</operator> <name pos:start="257:37" pos:end="257:61">ACPI_CPU_HOTPLUG_ID_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="261:5" pos:end="261:74">/* create PCI0.PRES device and its _CRS to reserve CPU hotplug MMIO */</comment>

    <expr_stmt pos:start="263:5" pos:end="263:69"><expr pos:start="263:5" pos:end="263:68"><name pos:start="263:5" pos:end="263:7">dev</name> <operator pos:start="263:9" pos:end="263:9">=</operator> <call pos:start="263:11" pos:end="263:68"><name pos:start="263:11" pos:end="263:20">aml_device</name><argument_list pos:start="263:21" pos:end="263:68">(<argument pos:start="263:22" pos:end="263:67"><expr pos:start="263:22" pos:end="263:67"><literal type="string" pos:start="263:22" pos:end="263:28">"PCI0."</literal> <call pos:start="263:30" pos:end="263:67"><name pos:start="263:30" pos:end="263:38">stringify</name><argument_list pos:start="263:39" pos:end="263:67">(<argument pos:start="263:40" pos:end="263:66"><expr pos:start="263:40" pos:end="263:66"><name pos:start="263:40" pos:end="263:66">CPU_HOTPLUG_RESOURCE_DEVICE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:66"><expr pos:start="265:5" pos:end="265:65"><call pos:start="265:5" pos:end="265:65"><name pos:start="265:5" pos:end="265:14">aml_append</name><argument_list pos:start="265:15" pos:end="265:65">(<argument pos:start="265:16" pos:end="265:18"><expr pos:start="265:16" pos:end="265:18"><name pos:start="265:16" pos:end="265:18">dev</name></expr></argument>, <argument pos:start="265:21" pos:end="265:64"><expr pos:start="265:21" pos:end="265:64"><call pos:start="265:21" pos:end="265:64"><name pos:start="265:21" pos:end="265:33">aml_name_decl</name><argument_list pos:start="265:34" pos:end="265:64">(<argument pos:start="265:35" pos:end="265:40"><expr pos:start="265:35" pos:end="265:40"><literal type="string" pos:start="265:35" pos:end="265:40">"_HID"</literal></expr></argument>, <argument pos:start="265:43" pos:end="265:63"><expr pos:start="265:43" pos:end="265:63"><call pos:start="265:43" pos:end="265:63"><name pos:start="265:43" pos:end="265:52">aml_eisaid</name><argument_list pos:start="265:53" pos:end="265:63">(<argument pos:start="265:54" pos:end="265:62"><expr pos:start="265:54" pos:end="265:62"><literal type="string" pos:start="265:54" pos:end="265:62">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="271:6"><expr pos:start="267:5" pos:end="271:5"><call pos:start="267:5" pos:end="271:5"><name pos:start="267:5" pos:end="267:14">aml_append</name><argument_list pos:start="267:15" pos:end="271:5">(<argument pos:start="267:16" pos:end="267:18"><expr pos:start="267:16" pos:end="267:18"><name pos:start="267:16" pos:end="267:18">dev</name></expr></argument>,

        <argument pos:start="269:9" pos:end="269:66"><expr pos:start="269:9" pos:end="269:66"><call pos:start="269:9" pos:end="269:66"><name pos:start="269:9" pos:end="269:21">aml_name_decl</name><argument_list pos:start="269:22" pos:end="269:66">(<argument pos:start="269:23" pos:end="269:28"><expr pos:start="269:23" pos:end="269:28"><literal type="string" pos:start="269:23" pos:end="269:28">"_UID"</literal></expr></argument>, <argument pos:start="269:31" pos:end="269:65"><expr pos:start="269:31" pos:end="269:65"><call pos:start="269:31" pos:end="269:65"><name pos:start="269:31" pos:end="269:40">aml_string</name><argument_list pos:start="269:41" pos:end="269:65">(<argument pos:start="269:42" pos:end="269:64"><expr pos:start="269:42" pos:end="269:64"><literal type="string" pos:start="269:42" pos:end="269:64">"CPU Hotplug resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

    )</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="273:5" pos:end="273:64">/* device present, functioning, decoding, not shown in UI */</comment>

    <expr_stmt pos:start="275:5" pos:end="275:57"><expr pos:start="275:5" pos:end="275:56"><call pos:start="275:5" pos:end="275:56"><name pos:start="275:5" pos:end="275:14">aml_append</name><argument_list pos:start="275:15" pos:end="275:56">(<argument pos:start="275:16" pos:end="275:18"><expr pos:start="275:16" pos:end="275:18"><name pos:start="275:16" pos:end="275:18">dev</name></expr></argument>, <argument pos:start="275:21" pos:end="275:55"><expr pos:start="275:21" pos:end="275:55"><call pos:start="275:21" pos:end="275:55"><name pos:start="275:21" pos:end="275:33">aml_name_decl</name><argument_list pos:start="275:34" pos:end="275:55">(<argument pos:start="275:35" pos:end="275:40"><expr pos:start="275:35" pos:end="275:40"><literal type="string" pos:start="275:35" pos:end="275:40">"_STA"</literal></expr></argument>, <argument pos:start="275:43" pos:end="275:54"><expr pos:start="275:43" pos:end="275:54"><call pos:start="275:43" pos:end="275:54"><name pos:start="275:43" pos:end="275:49">aml_int</name><argument_list pos:start="275:50" pos:end="275:54">(<argument pos:start="275:51" pos:end="275:53"><expr pos:start="275:51" pos:end="275:53"><literal type="number" pos:start="275:51" pos:end="275:53">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:34"><expr pos:start="277:5" pos:end="277:33"><name pos:start="277:5" pos:end="277:7">crs</name> <operator pos:start="277:9" pos:end="277:9">=</operator> <call pos:start="277:11" pos:end="277:33"><name pos:start="277:11" pos:end="277:31">aml_resource_template</name><argument_list pos:start="277:32" pos:end="277:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="283:6"><expr pos:start="279:5" pos:end="283:5"><call pos:start="279:5" pos:end="283:5"><name pos:start="279:5" pos:end="279:14">aml_append</name><argument_list pos:start="279:15" pos:end="283:5">(<argument pos:start="279:16" pos:end="279:18"><expr pos:start="279:16" pos:end="279:18"><name pos:start="279:16" pos:end="279:18">crs</name></expr></argument>,

        <argument pos:start="281:9" pos:end="281:57"><expr pos:start="281:9" pos:end="281:57"><call pos:start="281:9" pos:end="281:57"><name pos:start="281:9" pos:end="281:14">aml_io</name><argument_list pos:start="281:15" pos:end="281:57">(<argument pos:start="281:16" pos:end="281:27"><expr pos:start="281:16" pos:end="281:27"><name pos:start="281:16" pos:end="281:27">AML_DECODE16</name></expr></argument>, <argument pos:start="281:30" pos:end="281:36"><expr pos:start="281:30" pos:end="281:36"><name pos:start="281:30" pos:end="281:36">io_base</name></expr></argument>, <argument pos:start="281:39" pos:end="281:45"><expr pos:start="281:39" pos:end="281:45"><name pos:start="281:39" pos:end="281:45">io_base</name></expr></argument>, <argument pos:start="281:48" pos:end="281:48"><expr pos:start="281:48" pos:end="281:48"><literal type="number" pos:start="281:48" pos:end="281:48">1</literal></expr></argument>, <argument pos:start="281:51" pos:end="281:56"><expr pos:start="281:51" pos:end="281:56"><name pos:start="281:51" pos:end="281:56">io_len</name></expr></argument>)</argument_list></call></expr></argument>

    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:48"><expr pos:start="285:5" pos:end="285:47"><call pos:start="285:5" pos:end="285:47"><name pos:start="285:5" pos:end="285:14">aml_append</name><argument_list pos:start="285:15" pos:end="285:47">(<argument pos:start="285:16" pos:end="285:18"><expr pos:start="285:16" pos:end="285:18"><name pos:start="285:16" pos:end="285:18">dev</name></expr></argument>, <argument pos:start="285:21" pos:end="285:46"><expr pos:start="285:21" pos:end="285:46"><call pos:start="285:21" pos:end="285:46"><name pos:start="285:21" pos:end="285:33">aml_name_decl</name><argument_list pos:start="285:34" pos:end="285:46">(<argument pos:start="285:35" pos:end="285:40"><expr pos:start="285:35" pos:end="285:40"><literal type="string" pos:start="285:35" pos:end="285:40">"_CRS"</literal></expr></argument>, <argument pos:start="285:43" pos:end="285:45"><expr pos:start="285:43" pos:end="285:45"><name pos:start="285:43" pos:end="285:45">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:30"><expr pos:start="287:5" pos:end="287:29"><call pos:start="287:5" pos:end="287:29"><name pos:start="287:5" pos:end="287:14">aml_append</name><argument_list pos:start="287:15" pos:end="287:29">(<argument pos:start="287:16" pos:end="287:23"><expr pos:start="287:16" pos:end="287:23"><name pos:start="287:16" pos:end="287:23">sb_scope</name></expr></argument>, <argument pos:start="287:26" pos:end="287:28"><expr pos:start="287:26" pos:end="287:28"><name pos:start="287:26" pos:end="287:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="289:5" pos:end="289:68">/* declare CPU hotplug MMIO region and PRS field to access it */</comment>

    <expr_stmt pos:start="291:5" pos:end="293:58"><expr pos:start="291:5" pos:end="293:57"><call pos:start="291:5" pos:end="293:57"><name pos:start="291:5" pos:end="291:14">aml_append</name><argument_list pos:start="291:15" pos:end="293:57">(<argument pos:start="291:16" pos:end="291:23"><expr pos:start="291:16" pos:end="291:23"><name pos:start="291:16" pos:end="291:23">sb_scope</name></expr></argument>, <argument pos:start="291:26" pos:end="293:56"><expr pos:start="291:26" pos:end="293:56"><call pos:start="291:26" pos:end="293:56"><name pos:start="291:26" pos:end="291:45">aml_operation_region</name><argument_list pos:start="291:46" pos:end="293:56">(

        <argument pos:start="293:9" pos:end="293:14"><expr pos:start="293:9" pos:end="293:14"><literal type="string" pos:start="293:9" pos:end="293:14">"PRST"</literal></expr></argument>, <argument pos:start="293:17" pos:end="293:29"><expr pos:start="293:17" pos:end="293:29"><name pos:start="293:17" pos:end="293:29">AML_SYSTEM_IO</name></expr></argument>, <argument pos:start="293:32" pos:end="293:47"><expr pos:start="293:32" pos:end="293:47"><call pos:start="293:32" pos:end="293:47"><name pos:start="293:32" pos:end="293:38">aml_int</name><argument_list pos:start="293:39" pos:end="293:47">(<argument pos:start="293:40" pos:end="293:46"><expr pos:start="293:40" pos:end="293:46"><name pos:start="293:40" pos:end="293:46">io_base</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="293:50" pos:end="293:55"><expr pos:start="293:50" pos:end="293:55"><name pos:start="293:50" pos:end="293:55">io_len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="295:5" pos:end="295:70"><expr pos:start="295:5" pos:end="295:69"><name pos:start="295:5" pos:end="295:9">field</name> <operator pos:start="295:11" pos:end="295:11">=</operator> <call pos:start="295:13" pos:end="295:69"><name pos:start="295:13" pos:end="295:21">aml_field</name><argument_list pos:start="295:22" pos:end="295:69">(<argument pos:start="295:23" pos:end="295:28"><expr pos:start="295:23" pos:end="295:28"><literal type="string" pos:start="295:23" pos:end="295:28">"PRST"</literal></expr></argument>, <argument pos:start="295:31" pos:end="295:42"><expr pos:start="295:31" pos:end="295:42"><name pos:start="295:31" pos:end="295:42">AML_BYTE_ACC</name></expr></argument>, <argument pos:start="295:45" pos:end="295:54"><expr pos:start="295:45" pos:end="295:54"><name pos:start="295:45" pos:end="295:54">AML_NOLOCK</name></expr></argument>, <argument pos:start="295:57" pos:end="295:68"><expr pos:start="295:57" pos:end="295:68"><name pos:start="295:57" pos:end="295:68">AML_PRESERVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="297:5" pos:end="297:51"><expr pos:start="297:5" pos:end="297:50"><call pos:start="297:5" pos:end="297:50"><name pos:start="297:5" pos:end="297:14">aml_append</name><argument_list pos:start="297:15" pos:end="297:50">(<argument pos:start="297:16" pos:end="297:20"><expr pos:start="297:16" pos:end="297:20"><name pos:start="297:16" pos:end="297:20">field</name></expr></argument>, <argument pos:start="297:23" pos:end="297:49"><expr pos:start="297:23" pos:end="297:49"><call pos:start="297:23" pos:end="297:49"><name pos:start="297:23" pos:end="297:37">aml_named_field</name><argument_list pos:start="297:38" pos:end="297:49">(<argument pos:start="297:39" pos:end="297:43"><expr pos:start="297:39" pos:end="297:43"><literal type="string" pos:start="297:39" pos:end="297:43">"PRS"</literal></expr></argument>, <argument pos:start="297:46" pos:end="297:48"><expr pos:start="297:46" pos:end="297:48"><literal type="number" pos:start="297:46" pos:end="297:48">256</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:32"><expr pos:start="299:5" pos:end="299:31"><call pos:start="299:5" pos:end="299:31"><name pos:start="299:5" pos:end="299:14">aml_append</name><argument_list pos:start="299:15" pos:end="299:31">(<argument pos:start="299:16" pos:end="299:23"><expr pos:start="299:16" pos:end="299:23"><name pos:start="299:16" pos:end="299:23">sb_scope</name></expr></argument>, <argument pos:start="299:26" pos:end="299:30"><expr pos:start="299:26" pos:end="299:30"><name pos:start="299:26" pos:end="299:30">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="303:5" pos:end="303:51">/* build Processor object for each processor */</comment>

    <for pos:start="305:5" pos:end="355:5">for <control pos:start="305:9" pos:end="305:39">(<init pos:start="305:10" pos:end="305:15"><expr pos:start="305:10" pos:end="305:14"><name pos:start="305:10" pos:end="305:10">i</name> <operator pos:start="305:12" pos:end="305:12">=</operator> <literal type="number" pos:start="305:14" pos:end="305:14">0</literal></expr>;</init> <condition pos:start="305:17" pos:end="305:34"><expr pos:start="305:17" pos:end="305:33"><name pos:start="305:17" pos:end="305:17">i</name> <operator pos:start="305:19" pos:end="305:19">&lt;</operator> <name pos:start="305:21" pos:end="305:33"><name pos:start="305:21" pos:end="305:28">apic_ids</name><operator pos:start="305:29" pos:end="305:30">-&gt;</operator><name pos:start="305:31" pos:end="305:33">len</name></name></expr>;</condition> <incr pos:start="305:36" pos:end="305:38"><expr pos:start="305:36" pos:end="305:38"><name pos:start="305:36" pos:end="305:36">i</name><operator pos:start="305:37" pos:end="305:38">++</operator></expr></incr>)</control> <block pos:start="305:41" pos:end="355:5">{<block_content pos:start="307:9" pos:end="353:34">

        <decl_stmt pos:start="307:9" pos:end="307:48"><decl pos:start="307:9" pos:end="307:47"><type pos:start="307:9" pos:end="307:11"><name pos:start="307:9" pos:end="307:11">int</name></type> <name pos:start="307:13" pos:end="307:19">apic_id</name> <init pos:start="307:21" pos:end="307:47">= <expr pos:start="307:23" pos:end="307:47"><name pos:start="307:23" pos:end="307:39"><name pos:start="307:23" pos:end="307:30">apic_ids</name><operator pos:start="307:31" pos:end="307:32">-&gt;</operator><name pos:start="307:33" pos:end="307:36">cpus</name><index pos:start="307:37" pos:end="307:39">[<expr pos:start="307:38" pos:end="307:38"><name pos:start="307:38" pos:end="307:38">i</name></expr>]</index></name><operator pos:start="307:40" pos:end="307:40">.</operator><name pos:start="307:41" pos:end="307:47">arch_id</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="311:9" pos:end="311:52"><expr pos:start="311:9" pos:end="311:51"><call pos:start="311:9" pos:end="311:51"><name pos:start="311:9" pos:end="311:14">assert</name><argument_list pos:start="311:15" pos:end="311:51">(<argument pos:start="311:16" pos:end="311:50"><expr pos:start="311:16" pos:end="311:50"><name pos:start="311:16" pos:end="311:22">apic_id</name> <operator pos:start="311:24" pos:end="311:24">&lt;</operator> <name pos:start="311:26" pos:end="311:50">ACPI_CPU_HOTPLUG_ID_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="315:9" pos:end="315:63"><expr pos:start="315:9" pos:end="315:62"><name pos:start="315:9" pos:end="315:11">dev</name> <operator pos:start="315:13" pos:end="315:13">=</operator> <call pos:start="315:15" pos:end="315:62"><name pos:start="315:15" pos:end="315:27">aml_processor</name><argument_list pos:start="315:28" pos:end="315:62">(<argument pos:start="315:29" pos:end="315:35"><expr pos:start="315:29" pos:end="315:35"><name pos:start="315:29" pos:end="315:35">apic_id</name></expr></argument>, <argument pos:start="315:38" pos:end="315:38"><expr pos:start="315:38" pos:end="315:38"><literal type="number" pos:start="315:38" pos:end="315:38">0</literal></expr></argument>, <argument pos:start="315:41" pos:end="315:41"><expr pos:start="315:41" pos:end="315:41"><literal type="number" pos:start="315:41" pos:end="315:41">0</literal></expr></argument>, <argument pos:start="315:44" pos:end="315:52"><expr pos:start="315:44" pos:end="315:52"><literal type="string" pos:start="315:44" pos:end="315:52">"CP%.02X"</literal></expr></argument>, <argument pos:start="315:55" pos:end="315:61"><expr pos:start="315:55" pos:end="315:61"><name pos:start="315:55" pos:end="315:61">apic_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="319:9" pos:end="319:58"><expr pos:start="319:9" pos:end="319:57"><name pos:start="319:9" pos:end="319:14">method</name> <operator pos:start="319:16" pos:end="319:16">=</operator> <call pos:start="319:18" pos:end="319:57"><name pos:start="319:18" pos:end="319:27">aml_method</name><argument_list pos:start="319:28" pos:end="319:57">(<argument pos:start="319:29" pos:end="319:34"><expr pos:start="319:29" pos:end="319:34"><literal type="string" pos:start="319:29" pos:end="319:34">"_MAT"</literal></expr></argument>, <argument pos:start="319:37" pos:end="319:37"><expr pos:start="319:37" pos:end="319:37"><literal type="number" pos:start="319:37" pos:end="319:37">0</literal></expr></argument>, <argument pos:start="319:40" pos:end="319:56"><expr pos:start="319:40" pos:end="319:56"><name pos:start="319:40" pos:end="319:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="321:9" pos:end="323:69"><expr pos:start="321:9" pos:end="323:68"><call pos:start="321:9" pos:end="323:68"><name pos:start="321:9" pos:end="321:18">aml_append</name><argument_list pos:start="321:19" pos:end="323:68">(<argument pos:start="321:20" pos:end="321:25"><expr pos:start="321:20" pos:end="321:25"><name pos:start="321:20" pos:end="321:25">method</name></expr></argument>,

            <argument pos:start="323:13" pos:end="323:67"><expr pos:start="323:13" pos:end="323:67"><call pos:start="323:13" pos:end="323:67"><name pos:start="323:13" pos:end="323:22">aml_return</name><argument_list pos:start="323:23" pos:end="323:67">(<argument pos:start="323:24" pos:end="323:66"><expr pos:start="323:24" pos:end="323:66"><call pos:start="323:24" pos:end="323:66"><name pos:start="323:24" pos:end="323:32">aml_call1</name><argument_list pos:start="323:33" pos:end="323:66">(<argument pos:start="323:34" pos:end="323:47"><expr pos:start="323:34" pos:end="323:47"><name pos:start="323:34" pos:end="323:47">CPU_MAT_METHOD</name></expr></argument>, <argument pos:start="323:50" pos:end="323:65"><expr pos:start="323:50" pos:end="323:65"><call pos:start="323:50" pos:end="323:65"><name pos:start="323:50" pos:end="323:56">aml_int</name><argument_list pos:start="323:57" pos:end="323:65">(<argument pos:start="323:58" pos:end="323:64"><expr pos:start="323:58" pos:end="323:64"><name pos:start="323:58" pos:end="323:64">apic_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="325:9" pos:end="325:32"><expr pos:start="325:9" pos:end="325:31"><call pos:start="325:9" pos:end="325:31"><name pos:start="325:9" pos:end="325:18">aml_append</name><argument_list pos:start="325:19" pos:end="325:31">(<argument pos:start="325:20" pos:end="325:22"><expr pos:start="325:20" pos:end="325:22"><name pos:start="325:20" pos:end="325:22">dev</name></expr></argument>, <argument pos:start="325:25" pos:end="325:30"><expr pos:start="325:25" pos:end="325:30"><name pos:start="325:25" pos:end="325:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="329:9" pos:end="329:58"><expr pos:start="329:9" pos:end="329:57"><name pos:start="329:9" pos:end="329:14">method</name> <operator pos:start="329:16" pos:end="329:16">=</operator> <call pos:start="329:18" pos:end="329:57"><name pos:start="329:18" pos:end="329:27">aml_method</name><argument_list pos:start="329:28" pos:end="329:57">(<argument pos:start="329:29" pos:end="329:34"><expr pos:start="329:29" pos:end="329:34"><literal type="string" pos:start="329:29" pos:end="329:34">"_STA"</literal></expr></argument>, <argument pos:start="329:37" pos:end="329:37"><expr pos:start="329:37" pos:end="329:37"><literal type="number" pos:start="329:37" pos:end="329:37">0</literal></expr></argument>, <argument pos:start="329:40" pos:end="329:56"><expr pos:start="329:40" pos:end="329:56"><name pos:start="329:40" pos:end="329:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="333:72"><expr pos:start="331:9" pos:end="333:71"><call pos:start="331:9" pos:end="333:71"><name pos:start="331:9" pos:end="331:18">aml_append</name><argument_list pos:start="331:19" pos:end="333:71">(<argument pos:start="331:20" pos:end="331:25"><expr pos:start="331:20" pos:end="331:25"><name pos:start="331:20" pos:end="331:25">method</name></expr></argument>,

            <argument pos:start="333:13" pos:end="333:70"><expr pos:start="333:13" pos:end="333:70"><call pos:start="333:13" pos:end="333:70"><name pos:start="333:13" pos:end="333:22">aml_return</name><argument_list pos:start="333:23" pos:end="333:70">(<argument pos:start="333:24" pos:end="333:69"><expr pos:start="333:24" pos:end="333:69"><call pos:start="333:24" pos:end="333:69"><name pos:start="333:24" pos:end="333:32">aml_call1</name><argument_list pos:start="333:33" pos:end="333:69">(<argument pos:start="333:34" pos:end="333:50"><expr pos:start="333:34" pos:end="333:50"><name pos:start="333:34" pos:end="333:50">CPU_STATUS_METHOD</name></expr></argument>, <argument pos:start="333:53" pos:end="333:68"><expr pos:start="333:53" pos:end="333:68"><call pos:start="333:53" pos:end="333:68"><name pos:start="333:53" pos:end="333:59">aml_int</name><argument_list pos:start="333:60" pos:end="333:68">(<argument pos:start="333:61" pos:end="333:67"><expr pos:start="333:61" pos:end="333:67"><name pos:start="333:61" pos:end="333:67">apic_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:32"><expr pos:start="335:9" pos:end="335:31"><call pos:start="335:9" pos:end="335:31"><name pos:start="335:9" pos:end="335:18">aml_append</name><argument_list pos:start="335:19" pos:end="335:31">(<argument pos:start="335:20" pos:end="335:22"><expr pos:start="335:20" pos:end="335:22"><name pos:start="335:20" pos:end="335:22">dev</name></expr></argument>, <argument pos:start="335:25" pos:end="335:30"><expr pos:start="335:25" pos:end="335:30"><name pos:start="335:25" pos:end="335:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="339:9" pos:end="339:58"><expr pos:start="339:9" pos:end="339:57"><name pos:start="339:9" pos:end="339:14">method</name> <operator pos:start="339:16" pos:end="339:16">=</operator> <call pos:start="339:18" pos:end="339:57"><name pos:start="339:18" pos:end="339:27">aml_method</name><argument_list pos:start="339:28" pos:end="339:57">(<argument pos:start="339:29" pos:end="339:34"><expr pos:start="339:29" pos:end="339:34"><literal type="string" pos:start="339:29" pos:end="339:34">"_EJ0"</literal></expr></argument>, <argument pos:start="339:37" pos:end="339:37"><expr pos:start="339:37" pos:end="339:37"><literal type="number" pos:start="339:37" pos:end="339:37">1</literal></expr></argument>, <argument pos:start="339:40" pos:end="339:56"><expr pos:start="339:40" pos:end="339:56"><name pos:start="339:40" pos:end="339:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="341:9" pos:end="347:10"><expr pos:start="341:9" pos:end="347:9"><call pos:start="341:9" pos:end="347:9"><name pos:start="341:9" pos:end="341:18">aml_append</name><argument_list pos:start="341:19" pos:end="347:9">(<argument pos:start="341:20" pos:end="341:25"><expr pos:start="341:20" pos:end="341:25"><name pos:start="341:20" pos:end="341:25">method</name></expr></argument>,

            <argument pos:start="343:13" pos:end="345:28"><expr pos:start="343:13" pos:end="345:28"><call pos:start="343:13" pos:end="345:28"><name pos:start="343:13" pos:end="343:22">aml_return</name><argument_list pos:start="343:23" pos:end="345:28">(<argument pos:start="343:24" pos:end="345:27"><expr pos:start="343:24" pos:end="345:27"><call pos:start="343:24" pos:end="345:27"><name pos:start="343:24" pos:end="343:32">aml_call2</name><argument_list pos:start="343:33" pos:end="345:27">(<argument pos:start="343:34" pos:end="343:49"><expr pos:start="343:34" pos:end="343:49"><name pos:start="343:34" pos:end="343:49">CPU_EJECT_METHOD</name></expr></argument>, <argument pos:start="343:52" pos:end="343:67"><expr pos:start="343:52" pos:end="343:67"><call pos:start="343:52" pos:end="343:67"><name pos:start="343:52" pos:end="343:58">aml_int</name><argument_list pos:start="343:59" pos:end="343:67">(<argument pos:start="343:60" pos:end="343:66"><expr pos:start="343:60" pos:end="343:66"><name pos:start="343:60" pos:end="343:66">apic_id</name></expr></argument>)</argument_list></call></expr></argument>,

                <argument pos:start="345:17" pos:end="345:26"><expr pos:start="345:17" pos:end="345:26"><call pos:start="345:17" pos:end="345:26"><name pos:start="345:17" pos:end="345:23">aml_arg</name><argument_list pos:start="345:24" pos:end="345:26">(<argument pos:start="345:25" pos:end="345:25"><expr pos:start="345:25" pos:end="345:25"><literal type="number" pos:start="345:25" pos:end="345:25">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:32"><expr pos:start="349:9" pos:end="349:31"><call pos:start="349:9" pos:end="349:31"><name pos:start="349:9" pos:end="349:18">aml_append</name><argument_list pos:start="349:19" pos:end="349:31">(<argument pos:start="349:20" pos:end="349:22"><expr pos:start="349:20" pos:end="349:22"><name pos:start="349:20" pos:end="349:22">dev</name></expr></argument>, <argument pos:start="349:25" pos:end="349:30"><expr pos:start="349:25" pos:end="349:30"><name pos:start="349:25" pos:end="349:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="353:9" pos:end="353:34"><expr pos:start="353:9" pos:end="353:33"><call pos:start="353:9" pos:end="353:33"><name pos:start="353:9" pos:end="353:18">aml_append</name><argument_list pos:start="353:19" pos:end="353:33">(<argument pos:start="353:20" pos:end="353:27"><expr pos:start="353:20" pos:end="353:27"><name pos:start="353:20" pos:end="353:27">sb_scope</name></expr></argument>, <argument pos:start="353:30" pos:end="353:32"><expr pos:start="353:30" pos:end="353:32"><name pos:start="353:30" pos:end="353:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="359:5" pos:end="363:7">/* build this code:

     *   Method(NTFY, 2) {If (LEqual(Arg0, 0x00)) {Notify(CP00, Arg1)} ...}

     */</comment>

    <comment type="block" pos:start="365:5" pos:end="365:39">/* Arg0 = Processor ID = APIC ID */</comment>

    <expr_stmt pos:start="367:5" pos:end="367:65"><expr pos:start="367:5" pos:end="367:64"><name pos:start="367:5" pos:end="367:10">method</name> <operator pos:start="367:12" pos:end="367:12">=</operator> <call pos:start="367:14" pos:end="367:64"><name pos:start="367:14" pos:end="367:23">aml_method</name><argument_list pos:start="367:24" pos:end="367:64">(<argument pos:start="367:25" pos:end="367:41"><expr pos:start="367:25" pos:end="367:41"><name pos:start="367:25" pos:end="367:41">AML_NOTIFY_METHOD</name></expr></argument>, <argument pos:start="367:44" pos:end="367:44"><expr pos:start="367:44" pos:end="367:44"><literal type="number" pos:start="367:44" pos:end="367:44">2</literal></expr></argument>, <argument pos:start="367:47" pos:end="367:63"><expr pos:start="367:47" pos:end="367:63"><name pos:start="367:47" pos:end="367:63">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="369:5" pos:end="385:5">for <control pos:start="369:9" pos:end="369:39">(<init pos:start="369:10" pos:end="369:15"><expr pos:start="369:10" pos:end="369:14"><name pos:start="369:10" pos:end="369:10">i</name> <operator pos:start="369:12" pos:end="369:12">=</operator> <literal type="number" pos:start="369:14" pos:end="369:14">0</literal></expr>;</init> <condition pos:start="369:17" pos:end="369:34"><expr pos:start="369:17" pos:end="369:33"><name pos:start="369:17" pos:end="369:17">i</name> <operator pos:start="369:19" pos:end="369:19">&lt;</operator> <name pos:start="369:21" pos:end="369:33"><name pos:start="369:21" pos:end="369:28">apic_ids</name><operator pos:start="369:29" pos:end="369:30">-&gt;</operator><name pos:start="369:31" pos:end="369:33">len</name></name></expr>;</condition> <incr pos:start="369:36" pos:end="369:38"><expr pos:start="369:36" pos:end="369:38"><name pos:start="369:36" pos:end="369:36">i</name><operator pos:start="369:37" pos:end="369:38">++</operator></expr></incr>)</control> <block pos:start="369:41" pos:end="385:5">{<block_content pos:start="371:9" pos:end="383:35">

        <decl_stmt pos:start="371:9" pos:end="371:48"><decl pos:start="371:9" pos:end="371:47"><type pos:start="371:9" pos:end="371:11"><name pos:start="371:9" pos:end="371:11">int</name></type> <name pos:start="371:13" pos:end="371:19">apic_id</name> <init pos:start="371:21" pos:end="371:47">= <expr pos:start="371:23" pos:end="371:47"><name pos:start="371:23" pos:end="371:39"><name pos:start="371:23" pos:end="371:30">apic_ids</name><operator pos:start="371:31" pos:end="371:32">-&gt;</operator><name pos:start="371:33" pos:end="371:36">cpus</name><index pos:start="371:37" pos:end="371:39">[<expr pos:start="371:38" pos:end="371:38"><name pos:start="371:38" pos:end="371:38">i</name></expr>]</index></name><operator pos:start="371:40" pos:end="371:40">.</operator><name pos:start="371:41" pos:end="371:47">arch_id</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="375:9" pos:end="375:65"><expr pos:start="375:9" pos:end="375:64"><name pos:start="375:9" pos:end="375:14">if_ctx</name> <operator pos:start="375:16" pos:end="375:16">=</operator> <call pos:start="375:18" pos:end="375:64"><name pos:start="375:18" pos:end="375:23">aml_if</name><argument_list pos:start="375:24" pos:end="375:64">(<argument pos:start="375:25" pos:end="375:63"><expr pos:start="375:25" pos:end="375:63"><call pos:start="375:25" pos:end="375:63"><name pos:start="375:25" pos:end="375:33">aml_equal</name><argument_list pos:start="375:34" pos:end="375:63">(<argument pos:start="375:35" pos:end="375:44"><expr pos:start="375:35" pos:end="375:44"><call pos:start="375:35" pos:end="375:44"><name pos:start="375:35" pos:end="375:41">aml_arg</name><argument_list pos:start="375:42" pos:end="375:44">(<argument pos:start="375:43" pos:end="375:43"><expr pos:start="375:43" pos:end="375:43"><literal type="number" pos:start="375:43" pos:end="375:43">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="375:47" pos:end="375:62"><expr pos:start="375:47" pos:end="375:62"><call pos:start="375:47" pos:end="375:62"><name pos:start="375:47" pos:end="375:53">aml_int</name><argument_list pos:start="375:54" pos:end="375:62">(<argument pos:start="375:55" pos:end="375:61"><expr pos:start="375:55" pos:end="375:61"><name pos:start="375:55" pos:end="375:61">apic_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="377:9" pos:end="381:10"><expr pos:start="377:9" pos:end="381:9"><call pos:start="377:9" pos:end="381:9"><name pos:start="377:9" pos:end="377:18">aml_append</name><argument_list pos:start="377:19" pos:end="381:9">(<argument pos:start="377:20" pos:end="377:25"><expr pos:start="377:20" pos:end="377:25"><name pos:start="377:20" pos:end="377:25">if_ctx</name></expr></argument>,

            <argument pos:start="379:13" pos:end="379:64"><expr pos:start="379:13" pos:end="379:64"><call pos:start="379:13" pos:end="379:64"><name pos:start="379:13" pos:end="379:22">aml_notify</name><argument_list pos:start="379:23" pos:end="379:64">(<argument pos:start="379:24" pos:end="379:51"><expr pos:start="379:24" pos:end="379:51"><call pos:start="379:24" pos:end="379:51"><name pos:start="379:24" pos:end="379:31">aml_name</name><argument_list pos:start="379:32" pos:end="379:51">(<argument pos:start="379:33" pos:end="379:41"><expr pos:start="379:33" pos:end="379:41"><literal type="string" pos:start="379:33" pos:end="379:41">"CP%.02X"</literal></expr></argument>, <argument pos:start="379:44" pos:end="379:50"><expr pos:start="379:44" pos:end="379:50"><name pos:start="379:44" pos:end="379:50">apic_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="379:54" pos:end="379:63"><expr pos:start="379:54" pos:end="379:63"><call pos:start="379:54" pos:end="379:63"><name pos:start="379:54" pos:end="379:60">aml_arg</name><argument_list pos:start="379:61" pos:end="379:63">(<argument pos:start="379:62" pos:end="379:62"><expr pos:start="379:62" pos:end="379:62"><literal type="number" pos:start="379:62" pos:end="379:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="383:35"><expr pos:start="383:9" pos:end="383:34"><call pos:start="383:9" pos:end="383:34"><name pos:start="383:9" pos:end="383:18">aml_append</name><argument_list pos:start="383:19" pos:end="383:34">(<argument pos:start="383:20" pos:end="383:25"><expr pos:start="383:20" pos:end="383:25"><name pos:start="383:20" pos:end="383:25">method</name></expr></argument>, <argument pos:start="383:28" pos:end="383:33"><expr pos:start="383:28" pos:end="383:33"><name pos:start="383:28" pos:end="383:33">if_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="387:5" pos:end="387:33"><expr pos:start="387:5" pos:end="387:32"><call pos:start="387:5" pos:end="387:32"><name pos:start="387:5" pos:end="387:14">aml_append</name><argument_list pos:start="387:15" pos:end="387:32">(<argument pos:start="387:16" pos:end="387:23"><expr pos:start="387:16" pos:end="387:23"><name pos:start="387:16" pos:end="387:23">sb_scope</name></expr></argument>, <argument pos:start="387:26" pos:end="387:31"><expr pos:start="387:26" pos:end="387:31"><name pos:start="387:26" pos:end="387:31">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="391:5" pos:end="403:7">/* build "Name(CPON, Package() { One, One, ..., Zero, Zero, ... })"

     *

     * Note: The ability to create variable-sized packages was first

     * introduced in ACPI 2.0. ACPI 1.0 only allowed fixed-size packages

     * ith up to 255 elements. Windows guests up to win2k8 fail when

     * VarPackageOp is used.

     */</comment>

    <expr_stmt pos:start="405:5" pos:end="407:75"><expr pos:start="405:5" pos:end="407:74"><name pos:start="405:5" pos:end="405:7">pkg</name> <operator pos:start="405:9" pos:end="405:9">=</operator> <ternary pos:start="405:11" pos:end="407:74"><condition pos:start="405:11" pos:end="405:38"><expr pos:start="405:11" pos:end="405:36"><name pos:start="405:11" pos:end="405:29"><name pos:start="405:11" pos:end="405:14">pcms</name><operator pos:start="405:15" pos:end="405:16">-&gt;</operator><name pos:start="405:17" pos:end="405:29">apic_id_limit</name></name> <operator pos:start="405:31" pos:end="405:32">&lt;=</operator> <literal type="number" pos:start="405:34" pos:end="405:36">255</literal></expr> ?</condition><then pos:start="405:40" pos:end="405:71"> <expr pos:start="405:40" pos:end="405:71"><call pos:start="405:40" pos:end="405:71"><name pos:start="405:40" pos:end="405:50">aml_package</name><argument_list pos:start="405:51" pos:end="405:71">(<argument pos:start="405:52" pos:end="405:70"><expr pos:start="405:52" pos:end="405:70"><name pos:start="405:52" pos:end="405:70"><name pos:start="405:52" pos:end="405:55">pcms</name><operator pos:start="405:56" pos:end="405:57">-&gt;</operator><name pos:start="405:58" pos:end="405:70">apic_id_limit</name></name></expr></argument>)</argument_list></call></expr> </then><else pos:start="405:73" pos:end="407:74">:

                                       <expr pos:start="407:40" pos:end="407:74"><call pos:start="407:40" pos:end="407:74"><name pos:start="407:40" pos:end="407:53">aml_varpackage</name><argument_list pos:start="407:54" pos:end="407:74">(<argument pos:start="407:55" pos:end="407:73"><expr pos:start="407:55" pos:end="407:73"><name pos:start="407:55" pos:end="407:73"><name pos:start="407:55" pos:end="407:58">pcms</name><operator pos:start="407:59" pos:end="407:60">-&gt;</operator><name pos:start="407:61" pos:end="407:73">apic_id_limit</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>



    <for pos:start="411:5" pos:end="427:5">for <control pos:start="411:9" pos:end="411:53">(<init pos:start="411:10" pos:end="411:29"><expr pos:start="411:10" pos:end="411:14"><name pos:start="411:10" pos:end="411:10">i</name> <operator pos:start="411:12" pos:end="411:12">=</operator> <literal type="number" pos:start="411:14" pos:end="411:14">0</literal></expr><operator pos:start="411:15" pos:end="411:15">,</operator> <expr pos:start="411:17" pos:end="411:28"><name pos:start="411:17" pos:end="411:24">apic_idx</name> <operator pos:start="411:26" pos:end="411:26">=</operator> <literal type="number" pos:start="411:28" pos:end="411:28">0</literal></expr>;</init> <condition pos:start="411:31" pos:end="411:48"><expr pos:start="411:31" pos:end="411:47"><name pos:start="411:31" pos:end="411:31">i</name> <operator pos:start="411:33" pos:end="411:33">&lt;</operator> <name pos:start="411:35" pos:end="411:47"><name pos:start="411:35" pos:end="411:42">apic_ids</name><operator pos:start="411:43" pos:end="411:44">-&gt;</operator><name pos:start="411:45" pos:end="411:47">len</name></name></expr>;</condition> <incr pos:start="411:50" pos:end="411:52"><expr pos:start="411:50" pos:end="411:52"><name pos:start="411:50" pos:end="411:50">i</name><operator pos:start="411:51" pos:end="411:52">++</operator></expr></incr>)</control> <block pos:start="411:55" pos:end="427:5">{<block_content pos:start="413:9" pos:end="425:31">

        <decl_stmt pos:start="413:9" pos:end="413:48"><decl pos:start="413:9" pos:end="413:47"><type pos:start="413:9" pos:end="413:11"><name pos:start="413:9" pos:end="413:11">int</name></type> <name pos:start="413:13" pos:end="413:19">apic_id</name> <init pos:start="413:21" pos:end="413:47">= <expr pos:start="413:23" pos:end="413:47"><name pos:start="413:23" pos:end="413:39"><name pos:start="413:23" pos:end="413:30">apic_ids</name><operator pos:start="413:31" pos:end="413:32">-&gt;</operator><name pos:start="413:33" pos:end="413:36">cpus</name><index pos:start="413:37" pos:end="413:39">[<expr pos:start="413:38" pos:end="413:38"><name pos:start="413:38" pos:end="413:38">i</name></expr>]</index></name><operator pos:start="413:40" pos:end="413:40">.</operator><name pos:start="413:41" pos:end="413:47">arch_id</name></expr></init></decl>;</decl_stmt>



        <for pos:start="417:9" pos:end="421:9">for <control pos:start="417:13" pos:end="417:46">(<init pos:start="417:14" pos:end="417:14">;</init> <condition pos:start="417:16" pos:end="417:34"><expr pos:start="417:16" pos:end="417:33"><name pos:start="417:16" pos:end="417:23">apic_idx</name> <operator pos:start="417:25" pos:end="417:25">&lt;</operator> <name pos:start="417:27" pos:end="417:33">apic_id</name></expr>;</condition> <incr pos:start="417:36" pos:end="417:45"><expr pos:start="417:36" pos:end="417:45"><name pos:start="417:36" pos:end="417:43">apic_idx</name><operator pos:start="417:44" pos:end="417:45">++</operator></expr></incr>)</control> <block pos:start="417:48" pos:end="421:9">{<block_content pos:start="419:13" pos:end="419:40">

            <expr_stmt pos:start="419:13" pos:end="419:40"><expr pos:start="419:13" pos:end="419:39"><call pos:start="419:13" pos:end="419:39"><name pos:start="419:13" pos:end="419:22">aml_append</name><argument_list pos:start="419:23" pos:end="419:39">(<argument pos:start="419:24" pos:end="419:26"><expr pos:start="419:24" pos:end="419:26"><name pos:start="419:24" pos:end="419:26">pkg</name></expr></argument>, <argument pos:start="419:29" pos:end="419:38"><expr pos:start="419:29" pos:end="419:38"><call pos:start="419:29" pos:end="419:38"><name pos:start="419:29" pos:end="419:35">aml_int</name><argument_list pos:start="419:36" pos:end="419:38">(<argument pos:start="419:37" pos:end="419:37"><expr pos:start="419:37" pos:end="419:37"><literal type="number" pos:start="419:37" pos:end="419:37">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="423:9" pos:end="423:64"><expr pos:start="423:9" pos:end="423:63"><call pos:start="423:9" pos:end="423:63"><name pos:start="423:9" pos:end="423:18">aml_append</name><argument_list pos:start="423:19" pos:end="423:63">(<argument pos:start="423:20" pos:end="423:22"><expr pos:start="423:20" pos:end="423:22"><name pos:start="423:20" pos:end="423:22">pkg</name></expr></argument>, <argument pos:start="423:25" pos:end="423:62"><expr pos:start="423:25" pos:end="423:62"><call pos:start="423:25" pos:end="423:62"><name pos:start="423:25" pos:end="423:31">aml_int</name><argument_list pos:start="423:32" pos:end="423:62">(<argument pos:start="423:33" pos:end="423:61"><expr pos:start="423:33" pos:end="423:61"><ternary pos:start="423:33" pos:end="423:61"><condition pos:start="423:33" pos:end="423:55"><expr pos:start="423:33" pos:end="423:53"><name pos:start="423:33" pos:end="423:49"><name pos:start="423:33" pos:end="423:40">apic_ids</name><operator pos:start="423:41" pos:end="423:42">-&gt;</operator><name pos:start="423:43" pos:end="423:46">cpus</name><index pos:start="423:47" pos:end="423:49">[<expr pos:start="423:48" pos:end="423:48"><name pos:start="423:48" pos:end="423:48">i</name></expr>]</index></name><operator pos:start="423:50" pos:end="423:50">.</operator><name pos:start="423:51" pos:end="423:53">cpu</name></expr> ?</condition><then pos:start="423:57" pos:end="423:57"> <expr pos:start="423:57" pos:end="423:57"><literal type="number" pos:start="423:57" pos:end="423:57">1</literal></expr> </then><else pos:start="423:59" pos:end="423:61">: <expr pos:start="423:61" pos:end="423:61"><literal type="number" pos:start="423:61" pos:end="423:61">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="425:9" pos:end="425:31"><expr pos:start="425:9" pos:end="425:30"><name pos:start="425:9" pos:end="425:16">apic_idx</name> <operator pos:start="425:18" pos:end="425:18">=</operator> <name pos:start="425:20" pos:end="425:26">apic_id</name> <operator pos:start="425:28" pos:end="425:28">+</operator> <literal type="number" pos:start="425:30" pos:end="425:30">1</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="429:5" pos:end="429:60"><expr pos:start="429:5" pos:end="429:59"><call pos:start="429:5" pos:end="429:59"><name pos:start="429:5" pos:end="429:14">aml_append</name><argument_list pos:start="429:15" pos:end="429:59">(<argument pos:start="429:16" pos:end="429:23"><expr pos:start="429:16" pos:end="429:23"><name pos:start="429:16" pos:end="429:23">sb_scope</name></expr></argument>, <argument pos:start="429:26" pos:end="429:58"><expr pos:start="429:26" pos:end="429:58"><call pos:start="429:26" pos:end="429:58"><name pos:start="429:26" pos:end="429:38">aml_name_decl</name><argument_list pos:start="429:39" pos:end="429:58">(<argument pos:start="429:40" pos:end="429:52"><expr pos:start="429:40" pos:end="429:52"><name pos:start="429:40" pos:end="429:52">CPU_ON_BITMAP</name></expr></argument>, <argument pos:start="429:55" pos:end="429:57"><expr pos:start="429:55" pos:end="429:57"><name pos:start="429:55" pos:end="429:57">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="431:5" pos:end="431:21"><expr pos:start="431:5" pos:end="431:20"><call pos:start="431:5" pos:end="431:20"><name pos:start="431:5" pos:end="431:10">g_free</name><argument_list pos:start="431:11" pos:end="431:20">(<argument pos:start="431:12" pos:end="431:19"><expr pos:start="431:12" pos:end="431:19"><name pos:start="431:12" pos:end="431:19">apic_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="435:5" pos:end="435:30"><expr pos:start="435:5" pos:end="435:29"><call pos:start="435:5" pos:end="435:29"><name pos:start="435:5" pos:end="435:14">aml_append</name><argument_list pos:start="435:15" pos:end="435:29">(<argument pos:start="435:16" pos:end="435:18"><expr pos:start="435:16" pos:end="435:18"><name pos:start="435:16" pos:end="435:18">ctx</name></expr></argument>, <argument pos:start="435:21" pos:end="435:28"><expr pos:start="435:21" pos:end="435:28"><name pos:start="435:21" pos:end="435:28">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="439:5" pos:end="439:61"><expr pos:start="439:5" pos:end="439:60"><name pos:start="439:5" pos:end="439:10">method</name> <operator pos:start="439:12" pos:end="439:12">=</operator> <call pos:start="439:14" pos:end="439:60"><name pos:start="439:14" pos:end="439:23">aml_method</name><argument_list pos:start="439:24" pos:end="439:60">(<argument pos:start="439:25" pos:end="439:37"><expr pos:start="439:25" pos:end="439:37"><literal type="string" pos:start="439:25" pos:end="439:37">"\\_GPE._E02"</literal></expr></argument>, <argument pos:start="439:40" pos:end="439:40"><expr pos:start="439:40" pos:end="439:40"><literal type="number" pos:start="439:40" pos:end="439:40">0</literal></expr></argument>, <argument pos:start="439:43" pos:end="439:59"><expr pos:start="439:43" pos:end="439:59"><name pos:start="439:43" pos:end="439:59">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="441:5" pos:end="441:60"><expr pos:start="441:5" pos:end="441:59"><call pos:start="441:5" pos:end="441:59"><name pos:start="441:5" pos:end="441:14">aml_append</name><argument_list pos:start="441:15" pos:end="441:59">(<argument pos:start="441:16" pos:end="441:21"><expr pos:start="441:16" pos:end="441:21"><name pos:start="441:16" pos:end="441:21">method</name></expr></argument>, <argument pos:start="441:24" pos:end="441:58"><expr pos:start="441:24" pos:end="441:58"><call pos:start="441:24" pos:end="441:58"><name pos:start="441:24" pos:end="441:32">aml_call0</name><argument_list pos:start="441:33" pos:end="441:58">(<argument pos:start="441:34" pos:end="441:57"><expr pos:start="441:34" pos:end="441:57"><literal type="string" pos:start="441:34" pos:end="441:41">"\\_SB."</literal> <name pos:start="441:43" pos:end="441:57">CPU_SCAN_METHOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="443:5" pos:end="443:28"><expr pos:start="443:5" pos:end="443:27"><call pos:start="443:5" pos:end="443:27"><name pos:start="443:5" pos:end="443:14">aml_append</name><argument_list pos:start="443:15" pos:end="443:27">(<argument pos:start="443:16" pos:end="443:18"><expr pos:start="443:16" pos:end="443:18"><name pos:start="443:16" pos:end="443:18">ctx</name></expr></argument>, <argument pos:start="443:21" pos:end="443:26"><expr pos:start="443:21" pos:end="443:26"><name pos:start="443:21" pos:end="443:26">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
