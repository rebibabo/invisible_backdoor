<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3727.c" pos:tabs="8"><function pos:start="1:1" pos:end="261:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:42">aio_read_response</name><parameter_list pos:start="1:43" pos:end="1:56">(<parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:49"><name pos:start="1:44" pos:end="1:47">void</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:55">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="261:1">{<block_content pos:start="5:5" pos:end="259:30">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:18">SheepdogObjRsp</name></type> <name pos:start="5:20" pos:end="5:22">rsp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">BDRVSheepdogState</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:24">s</name> <init pos:start="7:26" pos:end="7:33">= <expr pos:start="7:28" pos:end="7:33"><name pos:start="7:28" pos:end="7:33">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">fd</name> <init pos:start="9:12" pos:end="9:18">= <expr pos:start="9:14" pos:end="9:18"><name pos:start="9:14" pos:end="9:18"><name pos:start="9:14" pos:end="9:14">s</name><operator pos:start="9:15" pos:end="9:16">-&gt;</operator><name pos:start="9:17" pos:end="9:18">fd</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:10">AIOReq</name> <modifier pos:start="13:12" pos:end="13:12">*</modifier></type><name pos:start="13:13" pos:end="13:19">aio_req</name> <init pos:start="13:21" pos:end="13:26">= <expr pos:start="13:23" pos:end="13:26"><name pos:start="13:23" pos:end="13:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">SheepdogAIOCB</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:22">acb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:16">idx</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:23">/* read a header */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:46"><expr pos:start="23:5" pos:end="23:45"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:45"><name pos:start="23:11" pos:end="23:22">qemu_co_recv</name><argument_list pos:start="23:23" pos:end="23:45">(<argument pos:start="23:24" pos:end="23:25"><expr pos:start="23:24" pos:end="23:25"><name pos:start="23:24" pos:end="23:25">fd</name></expr></argument>, <argument pos:start="23:28" pos:end="23:31"><expr pos:start="23:28" pos:end="23:31"><operator pos:start="23:28" pos:end="23:28">&amp;</operator><name pos:start="23:29" pos:end="23:31">rsp</name></expr></argument>, <argument pos:start="23:34" pos:end="23:44"><expr pos:start="23:34" pos:end="23:44"><sizeof pos:start="23:34" pos:end="23:44">sizeof<argument_list pos:start="23:40" pos:end="23:44">(<argument pos:start="23:41" pos:end="23:43"><expr pos:start="23:41" pos:end="23:43"><name pos:start="23:41" pos:end="23:43">rsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:27">(<expr pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:14">!=</operator> <sizeof pos:start="25:16" pos:end="25:26">sizeof<argument_list pos:start="25:22" pos:end="25:26">(<argument pos:start="25:23" pos:end="25:25"><expr pos:start="25:23" pos:end="25:25"><name pos:start="25:23" pos:end="25:25">rsp</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="25:29" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:17">

        <expr_stmt pos:start="27:9" pos:end="27:70"><expr pos:start="27:9" pos:end="27:69"><call pos:start="27:9" pos:end="27:69"><name pos:start="27:9" pos:end="27:20">error_report</name><argument_list pos:start="27:21" pos:end="27:69">(<argument pos:start="27:22" pos:end="27:51"><expr pos:start="27:22" pos:end="27:51"><literal type="string" pos:start="27:22" pos:end="27:51">"failed to get the header, %s"</literal></expr></argument>, <argument pos:start="27:54" pos:end="27:68"><expr pos:start="27:54" pos:end="27:68"><call pos:start="27:54" pos:end="27:68"><name pos:start="27:54" pos:end="27:61">strerror</name><argument_list pos:start="27:62" pos:end="27:68">(<argument pos:start="27:63" pos:end="27:67"><expr pos:start="27:63" pos:end="27:67"><name pos:start="27:63" pos:end="27:67">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="29:9" pos:end="29:17">goto <name pos:start="29:14" pos:end="29:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:59">/* find the right aio_req from the inflight aio list */</comment>

    <macro pos:start="37:5" pos:end="37:63"><name pos:start="37:5" pos:end="37:17">QLIST_FOREACH</name><argument_list pos:start="37:18" pos:end="37:63">(<argument pos:start="37:19" pos:end="37:25">aio_req</argument>, <argument pos:start="37:28" pos:end="37:48">&amp;s-&gt;inflight_aio_head</argument>, <argument pos:start="37:51" pos:end="37:62">aio_siblings</argument>)</argument_list></macro> <block pos:start="37:65" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:9">

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if <condition pos:start="39:12" pos:end="39:34">(<expr pos:start="39:13" pos:end="39:33"><name pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:19">aio_req</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:23">id</name></name> <operator pos:start="39:25" pos:end="39:26">==</operator> <name pos:start="39:28" pos:end="39:33"><name pos:start="39:28" pos:end="39:30">rsp</name><operator pos:start="39:31" pos:end="39:31">.</operator><name pos:start="39:32" pos:end="39:33">id</name></name></expr>)</condition> <block pos:start="39:36" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:18">

            <break pos:start="41:13" pos:end="41:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:16">aio_req</name></expr>)</condition> <block pos:start="47:19" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:17">

        <expr_stmt pos:start="49:9" pos:end="49:55"><expr pos:start="49:9" pos:end="49:54"><call pos:start="49:9" pos:end="49:54"><name pos:start="49:9" pos:end="49:20">error_report</name><argument_list pos:start="49:21" pos:end="49:54">(<argument pos:start="49:22" pos:end="49:45"><expr pos:start="49:22" pos:end="49:45"><literal type="string" pos:start="49:22" pos:end="49:45">"cannot find aio_req %x"</literal></expr></argument>, <argument pos:start="49:48" pos:end="49:53"><expr pos:start="49:48" pos:end="49:53"><name pos:start="49:48" pos:end="49:53"><name pos:start="49:48" pos:end="49:50">rsp</name><operator pos:start="49:51" pos:end="49:51">.</operator><name pos:start="49:52" pos:end="49:53">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:17">goto <name pos:start="51:14" pos:end="51:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:25"><expr pos:start="57:5" pos:end="57:24"><name pos:start="57:5" pos:end="57:7">acb</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <name pos:start="57:11" pos:end="57:24"><name pos:start="57:11" pos:end="57:17">aio_req</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:24">aiocb</name></name></expr>;</expr_stmt>



    <switch pos:start="61:5" pos:end="181:5">switch <condition pos:start="61:12" pos:end="61:28">(<expr pos:start="61:13" pos:end="61:27"><name pos:start="61:13" pos:end="61:27"><name pos:start="61:13" pos:end="61:15">acb</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:27">aiocb_type</name></name></expr>)</condition> <block pos:start="61:30" pos:end="181:5">{<block_content pos:start="63:5" pos:end="179:9">

    <case pos:start="63:5" pos:end="63:27">case <expr pos:start="63:10" pos:end="63:26"><name pos:start="63:10" pos:end="63:26">AIOCB_WRITE_UDATA</name></expr>:</case>

        <comment type="block" pos:start="65:9" pos:end="67:60">/* this coroutine context is no longer suitable for co_recv

         * because we may send data to update vdi objects */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:26"><expr pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:18">co_recv</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <name pos:start="69:22" pos:end="69:25">NULL</name></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:39">(<expr pos:start="71:13" pos:end="71:38"><operator pos:start="71:13" pos:end="71:13">!</operator><call pos:start="71:14" pos:end="71:38"><name pos:start="71:14" pos:end="71:24">is_data_obj</name><argument_list pos:start="71:25" pos:end="71:38">(<argument pos:start="71:26" pos:end="71:37"><expr pos:start="71:26" pos:end="71:37"><name pos:start="71:26" pos:end="71:37"><name pos:start="71:26" pos:end="71:32">aio_req</name><operator pos:start="71:33" pos:end="71:34">-&gt;</operator><name pos:start="71:35" pos:end="71:37">oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:41" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:18">

            <break pos:start="73:13" pos:end="73:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:44"><expr pos:start="77:9" pos:end="77:43"><name pos:start="77:9" pos:end="77:11">idx</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:43"><name pos:start="77:15" pos:end="77:29">data_oid_to_idx</name><argument_list pos:start="77:30" pos:end="77:43">(<argument pos:start="77:31" pos:end="77:42"><expr pos:start="77:31" pos:end="77:42"><name pos:start="77:31" pos:end="77:42"><name pos:start="77:31" pos:end="77:37">aio_req</name><operator pos:start="77:38" pos:end="77:39">-&gt;</operator><name pos:start="77:40" pos:end="77:42">oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="81:9" pos:end="117:9"><if pos:start="81:9" pos:end="117:9">if <condition pos:start="81:12" pos:end="81:57">(<expr pos:start="81:13" pos:end="81:56"><name pos:start="81:13" pos:end="81:37"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:20">inode</name><operator pos:start="81:21" pos:end="81:21">.</operator><name pos:start="81:22" pos:end="81:32">data_vdi_id</name><index pos:start="81:33" pos:end="81:37">[<expr pos:start="81:34" pos:end="81:36"><name pos:start="81:34" pos:end="81:36">idx</name></expr>]</index></name> <operator pos:start="81:39" pos:end="81:40">!=</operator> <name pos:start="81:42" pos:end="81:56"><name pos:start="81:42" pos:end="81:42">s</name><operator pos:start="81:43" pos:end="81:44">-&gt;</operator><name pos:start="81:45" pos:end="81:49">inode</name><operator pos:start="81:50" pos:end="81:50">.</operator><name pos:start="81:51" pos:end="81:56">vdi_id</name></name></expr>)</condition> <block pos:start="81:59" pos:end="117:9">{<block_content pos:start="95:13" pos:end="115:46">

            <comment type="block" pos:start="83:13" pos:end="93:15">/*

             * If the object is newly created one, we need to update

             * the vdi object (metadata object).  min_dirty_data_idx

             * and max_dirty_data_idx are changed to include updated

             * index between them.

             */</comment>

            <if_stmt pos:start="95:13" pos:end="103:13"><if pos:start="95:13" pos:end="103:13">if <condition pos:start="95:16" pos:end="95:45">(<expr pos:start="95:17" pos:end="95:44"><name pos:start="95:17" pos:end="95:26"><name pos:start="95:17" pos:end="95:19">rsp</name><operator pos:start="95:20" pos:end="95:20">.</operator><name pos:start="95:21" pos:end="95:26">result</name></name> <operator pos:start="95:28" pos:end="95:29">==</operator> <name pos:start="95:31" pos:end="95:44">SD_RES_SUCCESS</name></expr>)</condition> <block pos:start="95:47" pos:end="103:13">{<block_content pos:start="97:17" pos:end="101:72">

                <expr_stmt pos:start="97:17" pos:end="97:60"><expr pos:start="97:17" pos:end="97:59"><name pos:start="97:17" pos:end="97:41"><name pos:start="97:17" pos:end="97:17">s</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:24">inode</name><operator pos:start="97:25" pos:end="97:25">.</operator><name pos:start="97:26" pos:end="97:36">data_vdi_id</name><index pos:start="97:37" pos:end="97:41">[<expr pos:start="97:38" pos:end="97:40"><name pos:start="97:38" pos:end="97:40">idx</name></expr>]</index></name> <operator pos:start="97:43" pos:end="97:43">=</operator> <name pos:start="97:45" pos:end="97:59"><name pos:start="97:45" pos:end="97:45">s</name><operator pos:start="97:46" pos:end="97:47">-&gt;</operator><name pos:start="97:48" pos:end="97:52">inode</name><operator pos:start="97:53" pos:end="97:53">.</operator><name pos:start="97:54" pos:end="97:59">vdi_id</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="99:17" pos:end="99:72"><expr pos:start="99:17" pos:end="99:71"><name pos:start="99:17" pos:end="99:37"><name pos:start="99:17" pos:end="99:17">s</name><operator pos:start="99:18" pos:end="99:19">-&gt;</operator><name pos:start="99:20" pos:end="99:37">max_dirty_data_idx</name></name> <operator pos:start="99:39" pos:end="99:39">=</operator> <call pos:start="99:41" pos:end="99:71"><name pos:start="99:41" pos:end="99:43">MAX</name><argument_list pos:start="99:44" pos:end="99:71">(<argument pos:start="99:45" pos:end="99:47"><expr pos:start="99:45" pos:end="99:47"><name pos:start="99:45" pos:end="99:47">idx</name></expr></argument>, <argument pos:start="99:50" pos:end="99:70"><expr pos:start="99:50" pos:end="99:70"><name pos:start="99:50" pos:end="99:70"><name pos:start="99:50" pos:end="99:50">s</name><operator pos:start="99:51" pos:end="99:52">-&gt;</operator><name pos:start="99:53" pos:end="99:70">max_dirty_data_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="101:17" pos:end="101:72"><expr pos:start="101:17" pos:end="101:71"><name pos:start="101:17" pos:end="101:37"><name pos:start="101:17" pos:end="101:17">s</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:37">min_dirty_data_idx</name></name> <operator pos:start="101:39" pos:end="101:39">=</operator> <call pos:start="101:41" pos:end="101:71"><name pos:start="101:41" pos:end="101:43">MIN</name><argument_list pos:start="101:44" pos:end="101:71">(<argument pos:start="101:45" pos:end="101:47"><expr pos:start="101:45" pos:end="101:47"><name pos:start="101:45" pos:end="101:47">idx</name></expr></argument>, <argument pos:start="101:50" pos:end="101:70"><expr pos:start="101:50" pos:end="101:70"><name pos:start="101:50" pos:end="101:70"><name pos:start="101:50" pos:end="101:50">s</name><operator pos:start="101:51" pos:end="101:52">-&gt;</operator><name pos:start="101:53" pos:end="101:70">min_dirty_data_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="105:13" pos:end="113:15">/*

             * Some requests may be blocked because simultaneous

             * create requests are not allowed, so we search the

             * pending requests here.

             */</comment>

            <expr_stmt pos:start="115:13" pos:end="115:46"><expr pos:start="115:13" pos:end="115:45"><call pos:start="115:13" pos:end="115:45"><name pos:start="115:13" pos:end="115:28">send_pending_req</name><argument_list pos:start="115:29" pos:end="115:45">(<argument pos:start="115:30" pos:end="115:30"><expr pos:start="115:30" pos:end="115:30"><name pos:start="115:30" pos:end="115:30">s</name></expr></argument>, <argument pos:start="115:33" pos:end="115:44"><expr pos:start="115:33" pos:end="115:44"><name pos:start="115:33" pos:end="115:44"><name pos:start="115:33" pos:end="115:39">aio_req</name><operator pos:start="115:40" pos:end="115:41">-&gt;</operator><name pos:start="115:42" pos:end="115:44">oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:26">case <expr pos:start="121:10" pos:end="121:25"><name pos:start="121:10" pos:end="121:25">AIOCB_READ_UDATA</name></expr>:</case>

        <expr_stmt pos:start="123:9" pos:end="125:66"><expr pos:start="123:9" pos:end="125:65"><name pos:start="123:9" pos:end="123:11">ret</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <call pos:start="123:15" pos:end="125:65"><name pos:start="123:15" pos:end="123:27">qemu_co_recvv</name><argument_list pos:start="123:28" pos:end="125:65">(<argument pos:start="123:29" pos:end="123:30"><expr pos:start="123:29" pos:end="123:30"><name pos:start="123:29" pos:end="123:30">fd</name></expr></argument>, <argument pos:start="123:33" pos:end="123:46"><expr pos:start="123:33" pos:end="123:46"><name pos:start="123:33" pos:end="123:46"><name pos:start="123:33" pos:end="123:35">acb</name><operator pos:start="123:36" pos:end="123:37">-&gt;</operator><name pos:start="123:38" pos:end="123:41">qiov</name><operator pos:start="123:42" pos:end="123:43">-&gt;</operator><name pos:start="123:44" pos:end="123:46">iov</name></name></expr></argument>, <argument pos:start="123:49" pos:end="123:63"><expr pos:start="123:49" pos:end="123:63"><name pos:start="123:49" pos:end="123:63"><name pos:start="123:49" pos:end="123:51">acb</name><operator pos:start="123:52" pos:end="123:53">-&gt;</operator><name pos:start="123:54" pos:end="123:57">qiov</name><operator pos:start="123:58" pos:end="123:59">-&gt;</operator><name pos:start="123:60" pos:end="123:63">niov</name></name></expr></argument>,

                            <argument pos:start="125:29" pos:end="125:47"><expr pos:start="125:29" pos:end="125:47"><name pos:start="125:29" pos:end="125:47"><name pos:start="125:29" pos:end="125:35">aio_req</name><operator pos:start="125:36" pos:end="125:37">-&gt;</operator><name pos:start="125:38" pos:end="125:47">iov_offset</name></name></expr></argument>, <argument pos:start="125:50" pos:end="125:64"><expr pos:start="125:50" pos:end="125:64"><name pos:start="125:50" pos:end="125:64"><name pos:start="125:50" pos:end="125:52">rsp</name><operator pos:start="125:53" pos:end="125:53">.</operator><name pos:start="125:54" pos:end="125:64">data_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:35">(<expr pos:start="127:13" pos:end="127:34"><name pos:start="127:13" pos:end="127:15">ret</name> <operator pos:start="127:17" pos:end="127:18">!=</operator> <name pos:start="127:20" pos:end="127:34"><name pos:start="127:20" pos:end="127:22">rsp</name><operator pos:start="127:23" pos:end="127:23">.</operator><name pos:start="127:24" pos:end="127:34">data_length</name></name></expr>)</condition> <block pos:start="127:37" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:21">

            <expr_stmt pos:start="129:13" pos:end="129:72"><expr pos:start="129:13" pos:end="129:71"><call pos:start="129:13" pos:end="129:71"><name pos:start="129:13" pos:end="129:24">error_report</name><argument_list pos:start="129:25" pos:end="129:71">(<argument pos:start="129:26" pos:end="129:53"><expr pos:start="129:26" pos:end="129:53"><literal type="string" pos:start="129:26" pos:end="129:53">"failed to get the data, %s"</literal></expr></argument>, <argument pos:start="129:56" pos:end="129:70"><expr pos:start="129:56" pos:end="129:70"><call pos:start="129:56" pos:end="129:70"><name pos:start="129:56" pos:end="129:63">strerror</name><argument_list pos:start="129:64" pos:end="129:70">(<argument pos:start="129:65" pos:end="129:69"><expr pos:start="129:65" pos:end="129:69"><name pos:start="129:65" pos:end="129:69">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="131:13" pos:end="131:21">goto <name pos:start="131:18" pos:end="131:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="135:9" pos:end="135:14">break;</break>

    <case pos:start="137:5" pos:end="137:27">case <expr pos:start="137:10" pos:end="137:26"><name pos:start="137:10" pos:end="137:26">AIOCB_FLUSH_CACHE</name></expr>:</case>

        <if_stmt pos:start="139:9" pos:end="147:9"><if pos:start="139:9" pos:end="147:9">if <condition pos:start="139:12" pos:end="139:47">(<expr pos:start="139:13" pos:end="139:46"><name pos:start="139:13" pos:end="139:22"><name pos:start="139:13" pos:end="139:15">rsp</name><operator pos:start="139:16" pos:end="139:16">.</operator><name pos:start="139:17" pos:end="139:22">result</name></name> <operator pos:start="139:24" pos:end="139:25">==</operator> <name pos:start="139:27" pos:end="139:46">SD_RES_INVALID_PARMS</name></expr>)</condition> <block pos:start="139:49" pos:end="147:9">{<block_content pos:start="141:13" pos:end="145:40">

            <expr_stmt pos:start="141:13" pos:end="141:75"><expr pos:start="141:13" pos:end="141:74"><call pos:start="141:13" pos:end="141:74"><name pos:start="141:13" pos:end="141:19">DPRINTF</name><argument_list pos:start="141:20" pos:end="141:74">(<argument pos:start="141:21" pos:end="141:73"><expr pos:start="141:21" pos:end="141:73"><literal type="string" pos:start="141:21" pos:end="141:73">"disable cache since the server doesn't support it\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:48"><expr pos:start="143:13" pos:end="143:47"><name pos:start="143:13" pos:end="143:26"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:26">cache_flags</name></name> <operator pos:start="143:28" pos:end="143:28">=</operator> <name pos:start="143:30" pos:end="143:47">SD_FLAG_CMD_DIRECT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:40"><expr pos:start="145:13" pos:end="145:39"><name pos:start="145:13" pos:end="145:22"><name pos:start="145:13" pos:end="145:15">rsp</name><operator pos:start="145:16" pos:end="145:16">.</operator><name pos:start="145:17" pos:end="145:22">result</name></name> <operator pos:start="145:24" pos:end="145:24">=</operator> <name pos:start="145:26" pos:end="145:39">SD_RES_SUCCESS</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <case pos:start="151:5" pos:end="151:27">case <expr pos:start="151:10" pos:end="151:26"><name pos:start="151:10" pos:end="151:26">AIOCB_DISCARD_OBJ</name></expr>:</case>

        <switch pos:start="153:9" pos:end="179:9">switch <condition pos:start="153:16" pos:end="153:27">(<expr pos:start="153:17" pos:end="153:26"><name pos:start="153:17" pos:end="153:26"><name pos:start="153:17" pos:end="153:19">rsp</name><operator pos:start="153:20" pos:end="153:20">.</operator><name pos:start="153:21" pos:end="153:26">result</name></name></expr>)</condition> <block pos:start="153:29" pos:end="179:9">{<block_content pos:start="155:9" pos:end="177:18">

        <case pos:start="155:9" pos:end="155:34">case <expr pos:start="155:14" pos:end="155:33"><name pos:start="155:14" pos:end="155:33">SD_RES_INVALID_PARMS</name></expr>:</case>

            <expr_stmt pos:start="157:13" pos:end="159:39"><expr pos:start="157:13" pos:end="159:38"><call pos:start="157:13" pos:end="159:38"><name pos:start="157:13" pos:end="157:24">error_report</name><argument_list pos:start="157:25" pos:end="159:38">(<argument pos:start="157:26" pos:end="157:68"><expr pos:start="157:26" pos:end="157:68"><literal type="string" pos:start="157:26" pos:end="157:68">"sheep(%s) doesn't support discard command"</literal></expr></argument>,

                         <argument pos:start="159:26" pos:end="159:37"><expr pos:start="159:26" pos:end="159:37"><name pos:start="159:26" pos:end="159:37"><name pos:start="159:26" pos:end="159:26">s</name><operator pos:start="159:27" pos:end="159:28">-&gt;</operator><name pos:start="159:29" pos:end="159:37">host_spec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:40"><expr pos:start="161:13" pos:end="161:39"><name pos:start="161:13" pos:end="161:22"><name pos:start="161:13" pos:end="161:15">rsp</name><operator pos:start="161:16" pos:end="161:16">.</operator><name pos:start="161:17" pos:end="161:22">result</name></name> <operator pos:start="161:24" pos:end="161:24">=</operator> <name pos:start="161:26" pos:end="161:39">SD_RES_SUCCESS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:41"><expr pos:start="163:13" pos:end="163:40"><name pos:start="163:13" pos:end="163:32"><name pos:start="163:13" pos:end="163:13">s</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:32">discard_supported</name></name> <operator pos:start="163:34" pos:end="163:34">=</operator> <name pos:start="163:36" pos:end="163:40">false</name></expr>;</expr_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        <case pos:start="167:9" pos:end="167:28">case <expr pos:start="167:14" pos:end="167:27"><name pos:start="167:14" pos:end="167:27">SD_RES_SUCCESS</name></expr>:</case>

            <expr_stmt pos:start="169:13" pos:end="169:48"><expr pos:start="169:13" pos:end="169:47"><name pos:start="169:13" pos:end="169:15">idx</name> <operator pos:start="169:17" pos:end="169:17">=</operator> <call pos:start="169:19" pos:end="169:47"><name pos:start="169:19" pos:end="169:33">data_oid_to_idx</name><argument_list pos:start="169:34" pos:end="169:47">(<argument pos:start="169:35" pos:end="169:46"><expr pos:start="169:35" pos:end="169:46"><name pos:start="169:35" pos:end="169:46"><name pos:start="169:35" pos:end="169:41">aio_req</name><operator pos:start="169:42" pos:end="169:43">-&gt;</operator><name pos:start="169:44" pos:end="169:46">oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:42"><expr pos:start="171:13" pos:end="171:41"><name pos:start="171:13" pos:end="171:37"><name pos:start="171:13" pos:end="171:13">s</name><operator pos:start="171:14" pos:end="171:15">-&gt;</operator><name pos:start="171:16" pos:end="171:20">inode</name><operator pos:start="171:21" pos:end="171:21">.</operator><name pos:start="171:22" pos:end="171:32">data_vdi_id</name><index pos:start="171:33" pos:end="171:37">[<expr pos:start="171:34" pos:end="171:36"><name pos:start="171:34" pos:end="171:36">idx</name></expr>]</index></name> <operator pos:start="171:39" pos:end="171:39">=</operator> <literal type="number" pos:start="171:41" pos:end="171:41">0</literal></expr>;</expr_stmt>

            <break pos:start="173:13" pos:end="173:18">break;</break>

        <default pos:start="175:9" pos:end="175:16">default:</default>

            <break pos:start="177:13" pos:end="177:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></switch>



    <switch pos:start="185:5" pos:end="229:5">switch <condition pos:start="185:12" pos:end="185:23">(<expr pos:start="185:13" pos:end="185:22"><name pos:start="185:13" pos:end="185:22"><name pos:start="185:13" pos:end="185:15">rsp</name><operator pos:start="185:16" pos:end="185:16">.</operator><name pos:start="185:17" pos:end="185:22">result</name></name></expr>)</condition> <block pos:start="185:25" pos:end="229:5">{<block_content pos:start="187:5" pos:end="227:14">

    <case pos:start="187:5" pos:end="187:24">case <expr pos:start="187:10" pos:end="187:23"><name pos:start="187:10" pos:end="187:23">SD_RES_SUCCESS</name></expr>:</case>

        <break pos:start="189:9" pos:end="189:14">break;</break>

    <case pos:start="191:5" pos:end="191:25">case <expr pos:start="191:10" pos:end="191:24"><name pos:start="191:10" pos:end="191:24">SD_RES_READONLY</name></expr>:</case>

        <if_stmt pos:start="193:9" pos:end="203:9"><if pos:start="193:9" pos:end="203:9">if <condition pos:start="193:12" pos:end="193:56">(<expr pos:start="193:13" pos:end="193:55"><name pos:start="193:13" pos:end="193:27"><name pos:start="193:13" pos:end="193:13">s</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:20">inode</name><operator pos:start="193:21" pos:end="193:21">.</operator><name pos:start="193:22" pos:end="193:27">vdi_id</name></name> <operator pos:start="193:29" pos:end="193:30">==</operator> <call pos:start="193:32" pos:end="193:55"><name pos:start="193:32" pos:end="193:41">oid_to_vid</name><argument_list pos:start="193:42" pos:end="193:55">(<argument pos:start="193:43" pos:end="193:54"><expr pos:start="193:43" pos:end="193:54"><name pos:start="193:43" pos:end="193:54"><name pos:start="193:43" pos:end="193:49">aio_req</name><operator pos:start="193:50" pos:end="193:51">-&gt;</operator><name pos:start="193:52" pos:end="193:54">oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="193:58" pos:end="203:9">{<block_content pos:start="195:13" pos:end="201:13">

            <expr_stmt pos:start="195:13" pos:end="195:41"><expr pos:start="195:13" pos:end="195:40"><name pos:start="195:13" pos:end="195:15">ret</name> <operator pos:start="195:17" pos:end="195:17">=</operator> <call pos:start="195:19" pos:end="195:40"><name pos:start="195:19" pos:end="195:30">reload_inode</name><argument_list pos:start="195:31" pos:end="195:40">(<argument pos:start="195:32" pos:end="195:32"><expr pos:start="195:32" pos:end="195:32"><name pos:start="195:32" pos:end="195:32">s</name></expr></argument>, <argument pos:start="195:35" pos:end="195:35"><expr pos:start="195:35" pos:end="195:35"><literal type="number" pos:start="195:35" pos:end="195:35">0</literal></expr></argument>, <argument pos:start="195:38" pos:end="195:39"><expr pos:start="195:38" pos:end="195:39"><literal type="string" pos:start="195:38" pos:end="195:39">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="197:13" pos:end="201:13"><if pos:start="197:13" pos:end="201:13">if <condition pos:start="197:16" pos:end="197:24">(<expr pos:start="197:17" pos:end="197:23"><name pos:start="197:17" pos:end="197:19">ret</name> <operator pos:start="197:21" pos:end="197:21">&lt;</operator> <literal type="number" pos:start="197:23" pos:end="197:23">0</literal></expr>)</condition> <block pos:start="197:26" pos:end="201:13">{<block_content pos:start="199:17" pos:end="199:25">

                <goto pos:start="199:17" pos:end="199:25">goto <name pos:start="199:22" pos:end="199:24">err</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="205:9" pos:end="215:9"><if pos:start="205:9" pos:end="211:9">if <condition pos:start="205:12" pos:end="205:38">(<expr pos:start="205:13" pos:end="205:37"><call pos:start="205:13" pos:end="205:37"><name pos:start="205:13" pos:end="205:23">is_data_obj</name><argument_list pos:start="205:24" pos:end="205:37">(<argument pos:start="205:25" pos:end="205:36"><expr pos:start="205:25" pos:end="205:36"><name pos:start="205:25" pos:end="205:36"><name pos:start="205:25" pos:end="205:31">aio_req</name><operator pos:start="205:32" pos:end="205:33">-&gt;</operator><name pos:start="205:34" pos:end="205:36">oid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="205:40" pos:end="211:9">{<block_content pos:start="207:13" pos:end="209:74">

            <expr_stmt pos:start="207:13" pos:end="209:74"><expr pos:start="207:13" pos:end="209:73"><name pos:start="207:13" pos:end="207:24"><name pos:start="207:13" pos:end="207:19">aio_req</name><operator pos:start="207:20" pos:end="207:21">-&gt;</operator><name pos:start="207:22" pos:end="207:24">oid</name></name> <operator pos:start="207:26" pos:end="207:26">=</operator> <call pos:start="207:28" pos:end="209:73"><name pos:start="207:28" pos:end="207:42">vid_to_data_oid</name><argument_list pos:start="207:43" pos:end="209:73">(<argument pos:start="207:44" pos:end="207:58"><expr pos:start="207:44" pos:end="207:58"><name pos:start="207:44" pos:end="207:58"><name pos:start="207:44" pos:end="207:44">s</name><operator pos:start="207:45" pos:end="207:46">-&gt;</operator><name pos:start="207:47" pos:end="207:51">inode</name><operator pos:start="207:52" pos:end="207:52">.</operator><name pos:start="207:53" pos:end="207:58">vdi_id</name></name></expr></argument>,

                                           <argument pos:start="209:44" pos:end="209:72"><expr pos:start="209:44" pos:end="209:72"><call pos:start="209:44" pos:end="209:72"><name pos:start="209:44" pos:end="209:58">data_oid_to_idx</name><argument_list pos:start="209:59" pos:end="209:72">(<argument pos:start="209:60" pos:end="209:71"><expr pos:start="209:60" pos:end="209:71"><name pos:start="209:60" pos:end="209:71"><name pos:start="209:60" pos:end="209:66">aio_req</name><operator pos:start="209:67" pos:end="209:68">-&gt;</operator><name pos:start="209:69" pos:end="209:71">oid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="211:11" pos:end="215:9">else <block pos:start="211:16" pos:end="215:9">{<block_content pos:start="213:13" pos:end="213:59">

            <expr_stmt pos:start="213:13" pos:end="213:59"><expr pos:start="213:13" pos:end="213:58"><name pos:start="213:13" pos:end="213:24"><name pos:start="213:13" pos:end="213:19">aio_req</name><operator pos:start="213:20" pos:end="213:21">-&gt;</operator><name pos:start="213:22" pos:end="213:24">oid</name></name> <operator pos:start="213:26" pos:end="213:26">=</operator> <call pos:start="213:28" pos:end="213:58"><name pos:start="213:28" pos:end="213:41">vid_to_vdi_oid</name><argument_list pos:start="213:42" pos:end="213:58">(<argument pos:start="213:43" pos:end="213:57"><expr pos:start="213:43" pos:end="213:57"><name pos:start="213:43" pos:end="213:57"><name pos:start="213:43" pos:end="213:43">s</name><operator pos:start="213:44" pos:end="213:45">-&gt;</operator><name pos:start="213:46" pos:end="213:50">inode</name><operator pos:start="213:51" pos:end="213:51">.</operator><name pos:start="213:52" pos:end="213:57">vdi_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:34"><expr pos:start="217:9" pos:end="217:33"><call pos:start="217:9" pos:end="217:33"><name pos:start="217:9" pos:end="217:21">resend_aioreq</name><argument_list pos:start="217:22" pos:end="217:33">(<argument pos:start="217:23" pos:end="217:23"><expr pos:start="217:23" pos:end="217:23"><name pos:start="217:23" pos:end="217:23">s</name></expr></argument>, <argument pos:start="217:26" pos:end="217:32"><expr pos:start="217:26" pos:end="217:32"><name pos:start="217:26" pos:end="217:32">aio_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="219:9" pos:end="219:17">goto <name pos:start="219:14" pos:end="219:16">out</name>;</goto>

    <default pos:start="221:5" pos:end="221:12">default:</default>

        <expr_stmt pos:start="223:9" pos:end="223:24"><expr pos:start="223:9" pos:end="223:23"><name pos:start="223:9" pos:end="223:16"><name pos:start="223:9" pos:end="223:11">acb</name><operator pos:start="223:12" pos:end="223:13">-&gt;</operator><name pos:start="223:14" pos:end="223:16">ret</name></name> <operator pos:start="223:18" pos:end="223:18">=</operator> <operator pos:start="223:20" pos:end="223:20">-</operator><name pos:start="223:21" pos:end="223:23">EIO</name></expr>;</expr_stmt>

        <expr_stmt pos:start="225:9" pos:end="225:52"><expr pos:start="225:9" pos:end="225:51"><call pos:start="225:9" pos:end="225:51"><name pos:start="225:9" pos:end="225:20">error_report</name><argument_list pos:start="225:21" pos:end="225:51">(<argument pos:start="225:22" pos:end="225:25"><expr pos:start="225:22" pos:end="225:25"><literal type="string" pos:start="225:22" pos:end="225:25">"%s"</literal></expr></argument>, <argument pos:start="225:28" pos:end="225:50"><expr pos:start="225:28" pos:end="225:50"><call pos:start="225:28" pos:end="225:50"><name pos:start="225:28" pos:end="225:38">sd_strerror</name><argument_list pos:start="225:39" pos:end="225:50">(<argument pos:start="225:40" pos:end="225:49"><expr pos:start="225:40" pos:end="225:49"><name pos:start="225:40" pos:end="225:49"><name pos:start="225:40" pos:end="225:42">rsp</name><operator pos:start="225:43" pos:end="225:43">.</operator><name pos:start="225:44" pos:end="225:49">result</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="227:9" pos:end="227:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="233:5" pos:end="233:29"><expr pos:start="233:5" pos:end="233:28"><call pos:start="233:5" pos:end="233:28"><name pos:start="233:5" pos:end="233:16">free_aio_req</name><argument_list pos:start="233:17" pos:end="233:28">(<argument pos:start="233:18" pos:end="233:18"><expr pos:start="233:18" pos:end="233:18"><name pos:start="233:18" pos:end="233:18">s</name></expr></argument>, <argument pos:start="233:21" pos:end="233:27"><expr pos:start="233:21" pos:end="233:27"><name pos:start="233:21" pos:end="233:27">aio_req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="235:5" pos:end="247:5"><if pos:start="235:5" pos:end="247:5">if <condition pos:start="235:8" pos:end="235:25">(<expr pos:start="235:9" pos:end="235:24"><operator pos:start="235:9" pos:end="235:9">!</operator><name pos:start="235:10" pos:end="235:24"><name pos:start="235:10" pos:end="235:12">acb</name><operator pos:start="235:13" pos:end="235:14">-&gt;</operator><name pos:start="235:15" pos:end="235:24">nr_pending</name></name></expr>)</condition> <block pos:start="235:27" pos:end="247:5">{<block_content pos:start="245:9" pos:end="245:32">

        <comment type="block" pos:start="237:9" pos:end="243:11">/*

         * We've finished all requests which belong to the AIOCB, so

         * we can switch back to sd_co_readv/writev now.

         */</comment>

        <expr_stmt pos:start="245:9" pos:end="245:32"><expr pos:start="245:9" pos:end="245:31"><call pos:start="245:9" pos:end="245:31"><name pos:start="245:9" pos:end="245:26"><name pos:start="245:9" pos:end="245:11">acb</name><operator pos:start="245:12" pos:end="245:13">-&gt;</operator><name pos:start="245:14" pos:end="245:26">aio_done_func</name></name><argument_list pos:start="245:27" pos:end="245:31">(<argument pos:start="245:28" pos:end="245:30"><expr pos:start="245:28" pos:end="245:30"><name pos:start="245:28" pos:end="245:30">acb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="249:1" pos:end="249:4"><name pos:start="249:1" pos:end="249:3">out</name>:</label>

    <expr_stmt pos:start="251:5" pos:end="251:22"><expr pos:start="251:5" pos:end="251:21"><name pos:start="251:5" pos:end="251:14"><name pos:start="251:5" pos:end="251:5">s</name><operator pos:start="251:6" pos:end="251:7">-&gt;</operator><name pos:start="251:8" pos:end="251:14">co_recv</name></name> <operator pos:start="251:16" pos:end="251:16">=</operator> <name pos:start="251:18" pos:end="251:21">NULL</name></expr>;</expr_stmt>

    <return pos:start="253:5" pos:end="253:11">return;</return>

<label pos:start="255:1" pos:end="255:4"><name pos:start="255:1" pos:end="255:3">err</name>:</label>

    <expr_stmt pos:start="257:5" pos:end="257:22"><expr pos:start="257:5" pos:end="257:21"><name pos:start="257:5" pos:end="257:14"><name pos:start="257:5" pos:end="257:5">s</name><operator pos:start="257:6" pos:end="257:7">-&gt;</operator><name pos:start="257:8" pos:end="257:14">co_recv</name></name> <operator pos:start="257:16" pos:end="257:16">=</operator> <name pos:start="257:18" pos:end="257:21">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:30"><expr pos:start="259:5" pos:end="259:29"><call pos:start="259:5" pos:end="259:29"><name pos:start="259:5" pos:end="259:21">reconnect_to_sdog</name><argument_list pos:start="259:22" pos:end="259:29">(<argument pos:start="259:23" pos:end="259:28"><expr pos:start="259:23" pos:end="259:28"><name pos:start="259:23" pos:end="259:28">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
