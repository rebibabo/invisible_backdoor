<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6400.c" pos:tabs="8"><function pos:start="1:1" pos:end="317:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">n8x0_atag_setup</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:34"><decl pos:start="1:28" pos:end="1:34"><type pos:start="1:28" pos:end="1:34"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:34">p</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:45"><decl pos:start="1:37" pos:end="1:45"><type pos:start="1:37" pos:end="1:45"><name pos:start="1:37" pos:end="1:39">int</name></type> <name pos:start="1:41" pos:end="1:45">model</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="317:1">{<block_content pos:start="5:5" pos:end="315:26">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:14">b</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">uint16_t</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">w</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">uint32_t</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">l</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:31"><name pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:29">omap_gpiosw_info_s</name></name> <modifier pos:start="11:31" pos:end="11:31">*</modifier></type><name pos:start="11:32" pos:end="11:37">gpiosw</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:44"><decl pos:start="13:5" pos:end="13:43"><type pos:start="13:5" pos:end="13:34"><name pos:start="13:5" pos:end="13:32"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:32">omap_partition_info_s</name></name> <modifier pos:start="13:34" pos:end="13:34">*</modifier></type><name pos:start="13:35" pos:end="13:43">partition</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:19">tag</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:10"><expr pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:5">w</name> <operator pos:start="19:7" pos:end="19:7">=</operator> <name pos:start="19:9" pos:end="19:9">p</name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:30"><expr pos:start="23:5" pos:end="23:29"><call pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:9">stw_p</name><argument_list pos:start="23:10" pos:end="23:29">(<argument pos:start="23:11" pos:end="23:13"><expr pos:start="23:11" pos:end="23:13"><name pos:start="23:11" pos:end="23:11">w</name><operator pos:start="23:12" pos:end="23:13">++</operator></expr></argument>, <argument pos:start="23:16" pos:end="23:28"><expr pos:start="23:16" pos:end="23:28"><name pos:start="23:16" pos:end="23:28">OMAP_TAG_UART</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="23:49" pos:end="23:61">/* u16 tag */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:18"><expr pos:start="25:5" pos:end="25:17"><call pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:9">stw_p</name><argument_list pos:start="25:10" pos:end="25:17">(<argument pos:start="25:11" pos:end="25:13"><expr pos:start="25:11" pos:end="25:13"><name pos:start="25:11" pos:end="25:11">w</name><operator pos:start="25:12" pos:end="25:13">++</operator></expr></argument>, <argument pos:start="25:16" pos:end="25:16"><expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="25:49" pos:end="25:61">/* u16 len */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><call pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:9">stw_p</name><argument_list pos:start="27:10" pos:end="27:46">(<argument pos:start="27:11" pos:end="27:13"><expr pos:start="27:11" pos:end="27:13"><name pos:start="27:11" pos:end="27:11">w</name><operator pos:start="27:12" pos:end="27:13">++</operator></expr></argument>, <argument pos:start="27:16" pos:end="27:45"><expr pos:start="27:16" pos:end="27:45"><operator pos:start="27:16" pos:end="27:16">(</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal> <operator pos:start="27:19" pos:end="27:20">&lt;&lt;</operator> <literal type="number" pos:start="27:22" pos:end="27:22">2</literal><operator pos:start="27:23" pos:end="27:23">)</operator> <operator pos:start="27:25" pos:end="27:25">|</operator> <operator pos:start="27:27" pos:end="27:27">(</operator><literal type="number" pos:start="27:28" pos:end="27:28">1</literal> <operator pos:start="27:30" pos:end="27:31">&lt;&lt;</operator> <literal type="number" pos:start="27:33" pos:end="27:33">1</literal><operator pos:start="27:34" pos:end="27:34">)</operator> <operator pos:start="27:36" pos:end="27:36">|</operator> <operator pos:start="27:38" pos:end="27:38">(</operator><literal type="number" pos:start="27:39" pos:end="27:39">1</literal> <operator pos:start="27:41" pos:end="27:42">&lt;&lt;</operator> <literal type="number" pos:start="27:44" pos:end="27:44">0</literal><operator pos:start="27:45" pos:end="27:45">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="27:49" pos:end="27:72">/* uint enabled_uarts */</comment>

    <expr_stmt pos:start="29:5" pos:end="44:0"><expr pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:5">w</name><operator pos:start="29:6" pos:end="29:7">++</operator></expr>;</expr_stmt>



<cpp:if pos:start="33:1" pos:end="33:5">#<cpp:directive pos:start="33:2" pos:end="33:3">if</cpp:directive> <expr pos:start="33:5" pos:end="33:5"><literal type="number" pos:start="33:5" pos:end="33:5">0</literal></expr></cpp:if>

    stw_p(w++, OMAP_TAG_SERIAL_CONSOLE);	<comment type="block" pos:start="35:49" pos:end="35:61">/* u16 tag */</comment>

    stw_p(w++, 4);				<comment type="block" pos:start="37:49" pos:end="37:61">/* u16 len */</comment>

    stw_p(w++, XLDR_LL_UART + 1);		<comment type="block" pos:start="39:49" pos:end="39:69">/* u8 console_uart */</comment>

    stw_p(w++, 115200);				<comment type="block" pos:start="41:49" pos:end="41:71">/* u32 console_speed */</comment>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><call pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:9">stw_p</name><argument_list pos:start="47:10" pos:end="47:28">(<argument pos:start="47:11" pos:end="47:13"><expr pos:start="47:11" pos:end="47:13"><name pos:start="47:11" pos:end="47:11">w</name><operator pos:start="47:12" pos:end="47:13">++</operator></expr></argument>, <argument pos:start="47:16" pos:end="47:27"><expr pos:start="47:16" pos:end="47:27"><name pos:start="47:16" pos:end="47:27">OMAP_TAG_LCD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="47:49" pos:end="47:61">/* u16 tag */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:19"><expr pos:start="49:5" pos:end="49:18"><call pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:9">stw_p</name><argument_list pos:start="49:10" pos:end="49:18">(<argument pos:start="49:11" pos:end="49:13"><expr pos:start="49:11" pos:end="49:13"><name pos:start="49:11" pos:end="49:11">w</name><operator pos:start="49:12" pos:end="49:13">++</operator></expr></argument>, <argument pos:start="49:16" pos:end="49:17"><expr pos:start="49:16" pos:end="49:17"><literal type="number" pos:start="49:16" pos:end="49:17">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="49:49" pos:end="49:61">/* u16 len */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:41"><expr pos:start="51:5" pos:end="51:40"><call pos:start="51:5" pos:end="51:40"><name pos:start="51:5" pos:end="51:10">strcpy</name><argument_list pos:start="51:11" pos:end="51:40">(<argument pos:start="51:12" pos:end="51:21"><expr pos:start="51:12" pos:end="51:21"><operator pos:start="51:12" pos:end="51:12">(</operator><name pos:start="51:13" pos:end="51:16">void</name> <operator pos:start="51:18" pos:end="51:18">*</operator><operator pos:start="51:19" pos:end="51:19">)</operator> <name pos:start="51:21" pos:end="51:21">w</name></expr></argument>, <argument pos:start="51:24" pos:end="51:39"><expr pos:start="51:24" pos:end="51:39"><literal type="string" pos:start="51:24" pos:end="51:39">"QEMU LCD panel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="51:49" pos:end="51:73">/* char panel_name[16] */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:11"><expr pos:start="53:5" pos:end="53:10"><name pos:start="53:5" pos:end="53:5">w</name> <operator pos:start="53:7" pos:end="53:8">+=</operator> <literal type="number" pos:start="53:10" pos:end="53:10">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:35"><expr pos:start="55:5" pos:end="55:34"><call pos:start="55:5" pos:end="55:34"><name pos:start="55:5" pos:end="55:10">strcpy</name><argument_list pos:start="55:11" pos:end="55:34">(<argument pos:start="55:12" pos:end="55:21"><expr pos:start="55:12" pos:end="55:21"><operator pos:start="55:12" pos:end="55:12">(</operator><name pos:start="55:13" pos:end="55:16">void</name> <operator pos:start="55:18" pos:end="55:18">*</operator><operator pos:start="55:19" pos:end="55:19">)</operator> <name pos:start="55:21" pos:end="55:21">w</name></expr></argument>, <argument pos:start="55:24" pos:end="55:33"><expr pos:start="55:24" pos:end="55:33"><literal type="string" pos:start="55:24" pos:end="55:33">"blizzard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="55:49" pos:end="55:72">/* char ctrl_name[16] */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:11"><expr pos:start="57:5" pos:end="57:10"><name pos:start="57:5" pos:end="57:5">w</name> <operator pos:start="57:7" pos:end="57:8">+=</operator> <literal type="number" pos:start="57:10" pos:end="57:10">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:41"><expr pos:start="59:5" pos:end="59:40"><call pos:start="59:5" pos:end="59:40"><name pos:start="59:5" pos:end="59:9">stw_p</name><argument_list pos:start="59:10" pos:end="59:40">(<argument pos:start="59:11" pos:end="59:13"><expr pos:start="59:11" pos:end="59:13"><name pos:start="59:11" pos:end="59:11">w</name><operator pos:start="59:12" pos:end="59:13">++</operator></expr></argument>, <argument pos:start="59:16" pos:end="59:39"><expr pos:start="59:16" pos:end="59:39"><name pos:start="59:16" pos:end="59:39">N810_BLIZZARD_RESET_GPIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="59:49" pos:end="59:80">/* TODO: n800 s16 nreset_gpio */</comment>

    <expr_stmt pos:start="61:5" pos:end="61:19"><expr pos:start="61:5" pos:end="61:18"><call pos:start="61:5" pos:end="61:18"><name pos:start="61:5" pos:end="61:9">stw_p</name><argument_list pos:start="61:10" pos:end="61:18">(<argument pos:start="61:11" pos:end="61:13"><expr pos:start="61:11" pos:end="61:13"><name pos:start="61:11" pos:end="61:11">w</name><operator pos:start="61:12" pos:end="61:13">++</operator></expr></argument>, <argument pos:start="61:16" pos:end="61:17"><expr pos:start="61:16" pos:end="61:17"><literal type="number" pos:start="61:16" pos:end="61:17">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="61:49" pos:end="61:67">/* u8 data_lines */</comment>



    <expr_stmt pos:start="65:5" pos:end="65:30"><expr pos:start="65:5" pos:end="65:29"><call pos:start="65:5" pos:end="65:29"><name pos:start="65:5" pos:end="65:9">stw_p</name><argument_list pos:start="65:10" pos:end="65:29">(<argument pos:start="65:11" pos:end="65:13"><expr pos:start="65:11" pos:end="65:13"><name pos:start="65:11" pos:end="65:11">w</name><operator pos:start="65:12" pos:end="65:13">++</operator></expr></argument>, <argument pos:start="65:16" pos:end="65:28"><expr pos:start="65:16" pos:end="65:28"><name pos:start="65:16" pos:end="65:28">OMAP_TAG_CBUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="65:49" pos:end="65:61">/* u16 tag */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:18"><expr pos:start="67:5" pos:end="67:17"><call pos:start="67:5" pos:end="67:17"><name pos:start="67:5" pos:end="67:9">stw_p</name><argument_list pos:start="67:10" pos:end="67:17">(<argument pos:start="67:11" pos:end="67:13"><expr pos:start="67:11" pos:end="67:13"><name pos:start="67:11" pos:end="67:11">w</name><operator pos:start="67:12" pos:end="67:13">++</operator></expr></argument>, <argument pos:start="67:16" pos:end="67:16"><expr pos:start="67:16" pos:end="67:16"><literal type="number" pos:start="67:16" pos:end="67:16">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="67:49" pos:end="67:61">/* u16 len */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:35"><expr pos:start="69:5" pos:end="69:34"><call pos:start="69:5" pos:end="69:34"><name pos:start="69:5" pos:end="69:9">stw_p</name><argument_list pos:start="69:10" pos:end="69:34">(<argument pos:start="69:11" pos:end="69:13"><expr pos:start="69:11" pos:end="69:13"><name pos:start="69:11" pos:end="69:11">w</name><operator pos:start="69:12" pos:end="69:13">++</operator></expr></argument>, <argument pos:start="69:16" pos:end="69:33"><expr pos:start="69:16" pos:end="69:33"><name pos:start="69:16" pos:end="69:33">N8X0_CBUS_CLK_GPIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="69:49" pos:end="69:66">/* s16 clk_gpio */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:35"><expr pos:start="71:5" pos:end="71:34"><call pos:start="71:5" pos:end="71:34"><name pos:start="71:5" pos:end="71:9">stw_p</name><argument_list pos:start="71:10" pos:end="71:34">(<argument pos:start="71:11" pos:end="71:13"><expr pos:start="71:11" pos:end="71:13"><name pos:start="71:11" pos:end="71:11">w</name><operator pos:start="71:12" pos:end="71:13">++</operator></expr></argument>, <argument pos:start="71:16" pos:end="71:33"><expr pos:start="71:16" pos:end="71:33"><name pos:start="71:16" pos:end="71:33">N8X0_CBUS_DAT_GPIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="71:49" pos:end="71:66">/* s16 dat_gpio */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:35"><expr pos:start="73:5" pos:end="73:34"><call pos:start="73:5" pos:end="73:34"><name pos:start="73:5" pos:end="73:9">stw_p</name><argument_list pos:start="73:10" pos:end="73:34">(<argument pos:start="73:11" pos:end="73:13"><expr pos:start="73:11" pos:end="73:13"><name pos:start="73:11" pos:end="73:11">w</name><operator pos:start="73:12" pos:end="73:13">++</operator></expr></argument>, <argument pos:start="73:16" pos:end="73:33"><expr pos:start="73:16" pos:end="73:33"><name pos:start="73:16" pos:end="73:33">N8X0_CBUS_SEL_GPIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="73:49" pos:end="73:66">/* s16 sel_gpio */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:8"><expr pos:start="75:5" pos:end="75:7"><name pos:start="75:5" pos:end="75:5">w</name><operator pos:start="75:6" pos:end="75:7">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:37"><expr pos:start="79:5" pos:end="79:36"><call pos:start="79:5" pos:end="79:36"><name pos:start="79:5" pos:end="79:9">stw_p</name><argument_list pos:start="79:10" pos:end="79:36">(<argument pos:start="79:11" pos:end="79:13"><expr pos:start="79:11" pos:end="79:13"><name pos:start="79:11" pos:end="79:11">w</name><operator pos:start="79:12" pos:end="79:13">++</operator></expr></argument>, <argument pos:start="79:16" pos:end="79:35"><expr pos:start="79:16" pos:end="79:35"><name pos:start="79:16" pos:end="79:35">OMAP_TAG_EM_ASIC_BB5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="79:49" pos:end="79:61">/* u16 tag */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:18"><expr pos:start="81:5" pos:end="81:17"><call pos:start="81:5" pos:end="81:17"><name pos:start="81:5" pos:end="81:9">stw_p</name><argument_list pos:start="81:10" pos:end="81:17">(<argument pos:start="81:11" pos:end="81:13"><expr pos:start="81:11" pos:end="81:13"><name pos:start="81:11" pos:end="81:11">w</name><operator pos:start="81:12" pos:end="81:13">++</operator></expr></argument>, <argument pos:start="81:16" pos:end="81:16"><expr pos:start="81:16" pos:end="81:16"><literal type="number" pos:start="81:16" pos:end="81:16">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="81:49" pos:end="81:61">/* u16 len */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:31"><expr pos:start="83:5" pos:end="83:30"><call pos:start="83:5" pos:end="83:30"><name pos:start="83:5" pos:end="83:9">stw_p</name><argument_list pos:start="83:10" pos:end="83:30">(<argument pos:start="83:11" pos:end="83:13"><expr pos:start="83:11" pos:end="83:13"><name pos:start="83:11" pos:end="83:11">w</name><operator pos:start="83:12" pos:end="83:13">++</operator></expr></argument>, <argument pos:start="83:16" pos:end="83:29"><expr pos:start="83:16" pos:end="83:29"><name pos:start="83:16" pos:end="83:29">N8X0_RETU_GPIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="83:49" pos:end="83:71">/* s16 retu_irq_gpio */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:32"><expr pos:start="85:5" pos:end="85:31"><call pos:start="85:5" pos:end="85:31"><name pos:start="85:5" pos:end="85:9">stw_p</name><argument_list pos:start="85:10" pos:end="85:31">(<argument pos:start="85:11" pos:end="85:13"><expr pos:start="85:11" pos:end="85:13"><name pos:start="85:11" pos:end="85:11">w</name><operator pos:start="85:12" pos:end="85:13">++</operator></expr></argument>, <argument pos:start="85:16" pos:end="85:30"><expr pos:start="85:16" pos:end="85:30"><name pos:start="85:16" pos:end="85:30">N8X0_TAHVO_GPIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="85:49" pos:end="85:72">/* s16 tahvo_irq_gpio */</comment>



    <expr_stmt pos:start="89:5" pos:end="89:66"><expr pos:start="89:5" pos:end="89:65"><name pos:start="89:5" pos:end="89:10">gpiosw</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <ternary pos:start="89:14" pos:end="89:65"><condition pos:start="89:14" pos:end="89:29"><expr pos:start="89:14" pos:end="89:27"><operator pos:start="89:14" pos:end="89:14">(</operator><name pos:start="89:15" pos:end="89:19">model</name> <operator pos:start="89:21" pos:end="89:22">==</operator> <literal type="number" pos:start="89:24" pos:end="89:26">810</literal><operator pos:start="89:27" pos:end="89:27">)</operator></expr> ?</condition><then pos:start="89:31" pos:end="89:46"> <expr pos:start="89:31" pos:end="89:46"><name pos:start="89:31" pos:end="89:46">n810_gpiosw_info</name></expr> </then><else pos:start="89:48" pos:end="89:65">: <expr pos:start="89:50" pos:end="89:65"><name pos:start="89:50" pos:end="89:65">n800_gpiosw_info</name></expr></else></ternary></expr>;</expr_stmt>

    <for pos:start="91:5" pos:end="109:5">for <control pos:start="91:9" pos:end="91:34">(<init pos:start="91:10" pos:end="91:10">;</init> <condition pos:start="91:12" pos:end="91:24"><expr pos:start="91:12" pos:end="91:23"><name pos:start="91:12" pos:end="91:23"><name pos:start="91:12" pos:end="91:17">gpiosw</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:23">name</name></name></expr>;</condition> <incr pos:start="91:26" pos:end="91:33"><expr pos:start="91:26" pos:end="91:33"><name pos:start="91:26" pos:end="91:31">gpiosw</name><operator pos:start="91:32" pos:end="91:33">++</operator></expr></incr>)</control> <block pos:start="91:36" pos:end="109:5">{<block_content pos:start="93:9" pos:end="107:22">

        <expr_stmt pos:start="93:9" pos:end="93:41"><expr pos:start="93:9" pos:end="93:40"><call pos:start="93:9" pos:end="93:40"><name pos:start="93:9" pos:end="93:13">stw_p</name><argument_list pos:start="93:14" pos:end="93:40">(<argument pos:start="93:15" pos:end="93:17"><expr pos:start="93:15" pos:end="93:17"><name pos:start="93:15" pos:end="93:15">w</name><operator pos:start="93:16" pos:end="93:17">++</operator></expr></argument>, <argument pos:start="93:20" pos:end="93:39"><expr pos:start="93:20" pos:end="93:39"><name pos:start="93:20" pos:end="93:39">OMAP_TAG_GPIO_SWITCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="93:49" pos:end="93:61">/* u16 tag */</comment>

        <expr_stmt pos:start="95:9" pos:end="95:23"><expr pos:start="95:9" pos:end="95:22"><call pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:13">stw_p</name><argument_list pos:start="95:14" pos:end="95:22">(<argument pos:start="95:15" pos:end="95:17"><expr pos:start="95:15" pos:end="95:17"><name pos:start="95:15" pos:end="95:15">w</name><operator pos:start="95:16" pos:end="95:17">++</operator></expr></argument>, <argument pos:start="95:20" pos:end="95:21"><expr pos:start="95:20" pos:end="95:21"><literal type="number" pos:start="95:20" pos:end="95:21">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="95:49" pos:end="95:61">/* u16 len */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:41"><expr pos:start="97:9" pos:end="97:40"><call pos:start="97:9" pos:end="97:40"><name pos:start="97:9" pos:end="97:14">strcpy</name><argument_list pos:start="97:15" pos:end="97:40">(<argument pos:start="97:16" pos:end="97:25"><expr pos:start="97:16" pos:end="97:25"><operator pos:start="97:16" pos:end="97:16">(</operator><name pos:start="97:17" pos:end="97:20">void</name> <operator pos:start="97:22" pos:end="97:22">*</operator><operator pos:start="97:23" pos:end="97:23">)</operator> <name pos:start="97:25" pos:end="97:25">w</name></expr></argument>, <argument pos:start="97:28" pos:end="97:39"><expr pos:start="97:28" pos:end="97:39"><name pos:start="97:28" pos:end="97:39"><name pos:start="97:28" pos:end="97:33">gpiosw</name><operator pos:start="97:34" pos:end="97:35">-&gt;</operator><name pos:start="97:36" pos:end="97:39">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="97:49" pos:end="97:67">/* char name[12] */</comment>

        <expr_stmt pos:start="99:9" pos:end="99:15"><expr pos:start="99:9" pos:end="99:14"><name pos:start="99:9" pos:end="99:9">w</name> <operator pos:start="99:11" pos:end="99:12">+=</operator> <literal type="number" pos:start="99:14" pos:end="99:14">6</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:33"><expr pos:start="101:9" pos:end="101:32"><call pos:start="101:9" pos:end="101:32"><name pos:start="101:9" pos:end="101:13">stw_p</name><argument_list pos:start="101:14" pos:end="101:32">(<argument pos:start="101:15" pos:end="101:17"><expr pos:start="101:15" pos:end="101:17"><name pos:start="101:15" pos:end="101:15">w</name><operator pos:start="101:16" pos:end="101:17">++</operator></expr></argument>, <argument pos:start="101:20" pos:end="101:31"><expr pos:start="101:20" pos:end="101:31"><name pos:start="101:20" pos:end="101:31"><name pos:start="101:20" pos:end="101:25">gpiosw</name><operator pos:start="101:26" pos:end="101:27">-&gt;</operator><name pos:start="101:28" pos:end="101:31">line</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="101:49" pos:end="101:62">/* u16 gpio */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:33"><expr pos:start="103:9" pos:end="103:32"><call pos:start="103:9" pos:end="103:32"><name pos:start="103:9" pos:end="103:13">stw_p</name><argument_list pos:start="103:14" pos:end="103:32">(<argument pos:start="103:15" pos:end="103:17"><expr pos:start="103:15" pos:end="103:17"><name pos:start="103:15" pos:end="103:15">w</name><operator pos:start="103:16" pos:end="103:17">++</operator></expr></argument>, <argument pos:start="103:20" pos:end="103:31"><expr pos:start="103:20" pos:end="103:31"><name pos:start="103:20" pos:end="103:31"><name pos:start="103:20" pos:end="103:25">gpiosw</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:31">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:22"><expr pos:start="105:9" pos:end="105:21"><call pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:13">stw_p</name><argument_list pos:start="105:14" pos:end="105:21">(<argument pos:start="105:15" pos:end="105:17"><expr pos:start="105:15" pos:end="105:17"><name pos:start="105:15" pos:end="105:15">w</name><operator pos:start="105:16" pos:end="105:17">++</operator></expr></argument>, <argument pos:start="105:20" pos:end="105:20"><expr pos:start="105:20" pos:end="105:20"><literal type="number" pos:start="105:20" pos:end="105:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:22"><expr pos:start="107:9" pos:end="107:21"><call pos:start="107:9" pos:end="107:21"><name pos:start="107:9" pos:end="107:13">stw_p</name><argument_list pos:start="107:14" pos:end="107:21">(<argument pos:start="107:15" pos:end="107:17"><expr pos:start="107:15" pos:end="107:17"><name pos:start="107:15" pos:end="107:15">w</name><operator pos:start="107:16" pos:end="107:17">++</operator></expr></argument>, <argument pos:start="107:20" pos:end="107:20"><expr pos:start="107:20" pos:end="107:20"><literal type="number" pos:start="107:20" pos:end="107:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="113:5" pos:end="113:34"><expr pos:start="113:5" pos:end="113:33"><call pos:start="113:5" pos:end="113:33"><name pos:start="113:5" pos:end="113:9">stw_p</name><argument_list pos:start="113:10" pos:end="113:33">(<argument pos:start="113:11" pos:end="113:13"><expr pos:start="113:11" pos:end="113:13"><name pos:start="113:11" pos:end="113:11">w</name><operator pos:start="113:12" pos:end="113:13">++</operator></expr></argument>, <argument pos:start="113:16" pos:end="113:32"><expr pos:start="113:16" pos:end="113:32"><name pos:start="113:16" pos:end="113:32">OMAP_TAG_NOKIA_BT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="113:49" pos:end="113:61">/* u16 tag */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:19"><expr pos:start="115:5" pos:end="115:18"><call pos:start="115:5" pos:end="115:18"><name pos:start="115:5" pos:end="115:9">stw_p</name><argument_list pos:start="115:10" pos:end="115:18">(<argument pos:start="115:11" pos:end="115:13"><expr pos:start="115:11" pos:end="115:13"><name pos:start="115:11" pos:end="115:11">w</name><operator pos:start="115:12" pos:end="115:13">++</operator></expr></argument>, <argument pos:start="115:16" pos:end="115:17"><expr pos:start="115:16" pos:end="115:17"><literal type="number" pos:start="115:16" pos:end="115:17">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="115:49" pos:end="115:61">/* u16 len */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:19"><expr pos:start="117:5" pos:end="117:18"><name pos:start="117:5" pos:end="117:5">b</name> <operator pos:start="117:7" pos:end="117:7">=</operator> <operator pos:start="117:9" pos:end="117:9">(</operator><name pos:start="117:10" pos:end="117:13">void</name> <operator pos:start="117:15" pos:end="117:15">*</operator><operator pos:start="117:16" pos:end="117:16">)</operator> <name pos:start="117:18" pos:end="117:18">w</name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:21"><expr pos:start="119:5" pos:end="119:20"><call pos:start="119:5" pos:end="119:20"><name pos:start="119:5" pos:end="119:9">stb_p</name><argument_list pos:start="119:10" pos:end="119:20">(<argument pos:start="119:11" pos:end="119:13"><expr pos:start="119:11" pos:end="119:13"><name pos:start="119:11" pos:end="119:11">b</name><operator pos:start="119:12" pos:end="119:13">++</operator></expr></argument>, <argument pos:start="119:16" pos:end="119:19"><expr pos:start="119:16" pos:end="119:19"><literal type="number" pos:start="119:16" pos:end="119:19">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="119:49" pos:end="119:72">/* u8 chip_type	(CSR) */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:34"><expr pos:start="121:5" pos:end="121:33"><call pos:start="121:5" pos:end="121:33"><name pos:start="121:5" pos:end="121:9">stb_p</name><argument_list pos:start="121:10" pos:end="121:33">(<argument pos:start="121:11" pos:end="121:13"><expr pos:start="121:11" pos:end="121:13"><name pos:start="121:11" pos:end="121:11">b</name><operator pos:start="121:12" pos:end="121:13">++</operator></expr></argument>, <argument pos:start="121:16" pos:end="121:32"><expr pos:start="121:16" pos:end="121:32"><name pos:start="121:16" pos:end="121:32">N8X0_BT_WKUP_GPIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="121:49" pos:end="121:71">/* u8 bt_wakeup_gpio */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:39"><expr pos:start="123:5" pos:end="123:38"><call pos:start="123:5" pos:end="123:38"><name pos:start="123:5" pos:end="123:9">stb_p</name><argument_list pos:start="123:10" pos:end="123:38">(<argument pos:start="123:11" pos:end="123:13"><expr pos:start="123:11" pos:end="123:13"><name pos:start="123:11" pos:end="123:11">b</name><operator pos:start="123:12" pos:end="123:13">++</operator></expr></argument>, <argument pos:start="123:16" pos:end="123:37"><expr pos:start="123:16" pos:end="123:37"><name pos:start="123:16" pos:end="123:37">N8X0_BT_HOST_WKUP_GPIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="123:49" pos:end="123:73">/* u8 host_wakeup_gpio */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:35"><expr pos:start="125:5" pos:end="125:34"><call pos:start="125:5" pos:end="125:34"><name pos:start="125:5" pos:end="125:9">stb_p</name><argument_list pos:start="125:10" pos:end="125:34">(<argument pos:start="125:11" pos:end="125:13"><expr pos:start="125:11" pos:end="125:13"><name pos:start="125:11" pos:end="125:11">b</name><operator pos:start="125:12" pos:end="125:13">++</operator></expr></argument>, <argument pos:start="125:16" pos:end="125:33"><expr pos:start="125:16" pos:end="125:33"><name pos:start="125:16" pos:end="125:33">N8X0_BT_RESET_GPIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="125:49" pos:end="125:67">/* u8 reset_gpio */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:28"><expr pos:start="127:5" pos:end="127:27"><call pos:start="127:5" pos:end="127:27"><name pos:start="127:5" pos:end="127:9">stb_p</name><argument_list pos:start="127:10" pos:end="127:27">(<argument pos:start="127:11" pos:end="127:13"><expr pos:start="127:11" pos:end="127:13"><name pos:start="127:11" pos:end="127:11">b</name><operator pos:start="127:12" pos:end="127:13">++</operator></expr></argument>, <argument pos:start="127:16" pos:end="127:26"><expr pos:start="127:16" pos:end="127:26"><name pos:start="127:16" pos:end="127:22">BT_UART</name> <operator pos:start="127:24" pos:end="127:24">+</operator> <literal type="number" pos:start="127:26" pos:end="127:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="127:49" pos:end="127:64">/* u8 bt_uart */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:32"><expr pos:start="129:5" pos:end="129:31"><call pos:start="129:5" pos:end="129:31"><name pos:start="129:5" pos:end="129:10">memcpy</name><argument_list pos:start="129:11" pos:end="129:31">(<argument pos:start="129:12" pos:end="129:12"><expr pos:start="129:12" pos:end="129:12"><name pos:start="129:12" pos:end="129:12">b</name></expr></argument>, <argument pos:start="129:15" pos:end="129:27"><expr pos:start="129:15" pos:end="129:27"><operator pos:start="129:15" pos:end="129:15">&amp;</operator><name pos:start="129:16" pos:end="129:27">n8x0_bd_addr</name></expr></argument>, <argument pos:start="129:30" pos:end="129:30"><expr pos:start="129:30" pos:end="129:30"><literal type="number" pos:start="129:30" pos:end="129:30">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="129:49" pos:end="129:67">/* u8 bd_addr[6] */</comment>

    <expr_stmt pos:start="131:5" pos:end="131:11"><expr pos:start="131:5" pos:end="131:10"><name pos:start="131:5" pos:end="131:5">b</name> <operator pos:start="131:7" pos:end="131:8">+=</operator> <literal type="number" pos:start="131:10" pos:end="131:10">6</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:21"><expr pos:start="133:5" pos:end="133:20"><call pos:start="133:5" pos:end="133:20"><name pos:start="133:5" pos:end="133:9">stb_p</name><argument_list pos:start="133:10" pos:end="133:20">(<argument pos:start="133:11" pos:end="133:13"><expr pos:start="133:11" pos:end="133:13"><name pos:start="133:11" pos:end="133:11">b</name><operator pos:start="133:12" pos:end="133:13">++</operator></expr></argument>, <argument pos:start="133:16" pos:end="133:19"><expr pos:start="133:16" pos:end="133:19"><literal type="number" pos:start="133:16" pos:end="133:19">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="133:49" pos:end="133:73">/* u8 bt_sysclk (38.4) */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:19"><expr pos:start="135:5" pos:end="135:18"><name pos:start="135:5" pos:end="135:5">w</name> <operator pos:start="135:7" pos:end="135:7">=</operator> <operator pos:start="135:9" pos:end="135:9">(</operator><name pos:start="135:10" pos:end="135:13">void</name> <operator pos:start="135:15" pos:end="135:15">*</operator><operator pos:start="135:16" pos:end="135:16">)</operator> <name pos:start="135:18" pos:end="135:18">b</name></expr>;</expr_stmt>



    <expr_stmt pos:start="139:5" pos:end="139:38"><expr pos:start="139:5" pos:end="139:37"><call pos:start="139:5" pos:end="139:37"><name pos:start="139:5" pos:end="139:9">stw_p</name><argument_list pos:start="139:10" pos:end="139:37">(<argument pos:start="139:11" pos:end="139:13"><expr pos:start="139:11" pos:end="139:13"><name pos:start="139:11" pos:end="139:11">w</name><operator pos:start="139:12" pos:end="139:13">++</operator></expr></argument>, <argument pos:start="139:16" pos:end="139:36"><expr pos:start="139:16" pos:end="139:36"><name pos:start="139:16" pos:end="139:36">OMAP_TAG_WLAN_CX3110X</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="139:49" pos:end="139:61">/* u16 tag */</comment>

    <expr_stmt pos:start="141:5" pos:end="141:18"><expr pos:start="141:5" pos:end="141:17"><call pos:start="141:5" pos:end="141:17"><name pos:start="141:5" pos:end="141:9">stw_p</name><argument_list pos:start="141:10" pos:end="141:17">(<argument pos:start="141:11" pos:end="141:13"><expr pos:start="141:11" pos:end="141:13"><name pos:start="141:11" pos:end="141:11">w</name><operator pos:start="141:12" pos:end="141:13">++</operator></expr></argument>, <argument pos:start="141:16" pos:end="141:16"><expr pos:start="141:16" pos:end="141:16"><literal type="number" pos:start="141:16" pos:end="141:16">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="141:49" pos:end="141:61">/* u16 len */</comment>

    <expr_stmt pos:start="143:5" pos:end="143:21"><expr pos:start="143:5" pos:end="143:20"><call pos:start="143:5" pos:end="143:20"><name pos:start="143:5" pos:end="143:9">stw_p</name><argument_list pos:start="143:10" pos:end="143:20">(<argument pos:start="143:11" pos:end="143:13"><expr pos:start="143:11" pos:end="143:13"><name pos:start="143:11" pos:end="143:11">w</name><operator pos:start="143:12" pos:end="143:13">++</operator></expr></argument>, <argument pos:start="143:16" pos:end="143:19"><expr pos:start="143:16" pos:end="143:19"><literal type="number" pos:start="143:16" pos:end="143:19">0x25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="143:49" pos:end="143:66">/* u8 chip_type */</comment>

    <expr_stmt pos:start="145:5" pos:end="145:35"><expr pos:start="145:5" pos:end="145:34"><call pos:start="145:5" pos:end="145:34"><name pos:start="145:5" pos:end="145:9">stw_p</name><argument_list pos:start="145:10" pos:end="145:34">(<argument pos:start="145:11" pos:end="145:13"><expr pos:start="145:11" pos:end="145:13"><name pos:start="145:11" pos:end="145:11">w</name><operator pos:start="145:12" pos:end="145:13">++</operator></expr></argument>, <argument pos:start="145:16" pos:end="145:33"><expr pos:start="145:16" pos:end="145:33"><name pos:start="145:16" pos:end="145:33">N8X0_WLAN_PWR_GPIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="145:49" pos:end="145:68">/* s16 power_gpio */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:35"><expr pos:start="147:5" pos:end="147:34"><call pos:start="147:5" pos:end="147:34"><name pos:start="147:5" pos:end="147:9">stw_p</name><argument_list pos:start="147:10" pos:end="147:34">(<argument pos:start="147:11" pos:end="147:13"><expr pos:start="147:11" pos:end="147:13"><name pos:start="147:11" pos:end="147:11">w</name><operator pos:start="147:12" pos:end="147:13">++</operator></expr></argument>, <argument pos:start="147:16" pos:end="147:33"><expr pos:start="147:16" pos:end="147:33"><name pos:start="147:16" pos:end="147:33">N8X0_WLAN_IRQ_GPIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="147:49" pos:end="147:66">/* s16 irq_gpio */</comment>

    <expr_stmt pos:start="149:5" pos:end="149:19"><expr pos:start="149:5" pos:end="149:18"><call pos:start="149:5" pos:end="149:18"><name pos:start="149:5" pos:end="149:9">stw_p</name><argument_list pos:start="149:10" pos:end="149:18">(<argument pos:start="149:11" pos:end="149:13"><expr pos:start="149:11" pos:end="149:13"><name pos:start="149:11" pos:end="149:11">w</name><operator pos:start="149:12" pos:end="149:13">++</operator></expr></argument>, <argument pos:start="149:16" pos:end="149:17"><expr pos:start="149:16" pos:end="149:17"><operator pos:start="149:16" pos:end="149:16">-</operator><literal type="number" pos:start="149:17" pos:end="149:17">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="149:49" pos:end="149:69">/* s16 spi_cs_gpio */</comment>



    <expr_stmt pos:start="153:5" pos:end="153:29"><expr pos:start="153:5" pos:end="153:28"><call pos:start="153:5" pos:end="153:28"><name pos:start="153:5" pos:end="153:9">stw_p</name><argument_list pos:start="153:10" pos:end="153:28">(<argument pos:start="153:11" pos:end="153:13"><expr pos:start="153:11" pos:end="153:13"><name pos:start="153:11" pos:end="153:11">w</name><operator pos:start="153:12" pos:end="153:13">++</operator></expr></argument>, <argument pos:start="153:16" pos:end="153:27"><expr pos:start="153:16" pos:end="153:27"><name pos:start="153:16" pos:end="153:27">OMAP_TAG_MMC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="153:49" pos:end="153:61">/* u16 tag */</comment>

    <expr_stmt pos:start="155:5" pos:end="155:19"><expr pos:start="155:5" pos:end="155:18"><call pos:start="155:5" pos:end="155:18"><name pos:start="155:5" pos:end="155:9">stw_p</name><argument_list pos:start="155:10" pos:end="155:18">(<argument pos:start="155:11" pos:end="155:13"><expr pos:start="155:11" pos:end="155:13"><name pos:start="155:11" pos:end="155:11">w</name><operator pos:start="155:12" pos:end="155:13">++</operator></expr></argument>, <argument pos:start="155:16" pos:end="155:17"><expr pos:start="155:16" pos:end="155:17"><literal type="number" pos:start="155:16" pos:end="155:17">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="155:49" pos:end="155:61">/* u16 len */</comment>

    <if_stmt pos:start="157:5" pos:end="193:5"><if pos:start="157:5" pos:end="175:5">if <condition pos:start="157:8" pos:end="157:21">(<expr pos:start="157:9" pos:end="157:20"><name pos:start="157:9" pos:end="157:13">model</name> <operator pos:start="157:15" pos:end="157:16">==</operator> <literal type="number" pos:start="157:18" pos:end="157:20">810</literal></expr>)</condition> <block pos:start="157:23" pos:end="175:5">{<block_content pos:start="159:9" pos:end="173:27">

        <expr_stmt pos:start="159:9" pos:end="159:26"><expr pos:start="159:9" pos:end="159:25"><call pos:start="159:9" pos:end="159:25"><name pos:start="159:9" pos:end="159:13">stw_p</name><argument_list pos:start="159:14" pos:end="159:25">(<argument pos:start="159:15" pos:end="159:17"><expr pos:start="159:15" pos:end="159:17"><name pos:start="159:15" pos:end="159:15">w</name><operator pos:start="159:16" pos:end="159:17">++</operator></expr></argument>, <argument pos:start="159:20" pos:end="159:24"><expr pos:start="159:20" pos:end="159:24"><literal type="number" pos:start="159:20" pos:end="159:24">0x23f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="159:49" pos:end="159:68">/* unsigned flags */</comment>

        <expr_stmt pos:start="161:9" pos:end="161:23"><expr pos:start="161:9" pos:end="161:22"><call pos:start="161:9" pos:end="161:22"><name pos:start="161:9" pos:end="161:13">stw_p</name><argument_list pos:start="161:14" pos:end="161:22">(<argument pos:start="161:15" pos:end="161:17"><expr pos:start="161:15" pos:end="161:17"><name pos:start="161:15" pos:end="161:15">w</name><operator pos:start="161:16" pos:end="161:17">++</operator></expr></argument>, <argument pos:start="161:20" pos:end="161:21"><expr pos:start="161:20" pos:end="161:21"><operator pos:start="161:20" pos:end="161:20">-</operator><literal type="number" pos:start="161:21" pos:end="161:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="161:49" pos:end="161:67">/* s16 power_pin */</comment>

        <expr_stmt pos:start="163:9" pos:end="163:23"><expr pos:start="163:9" pos:end="163:22"><call pos:start="163:9" pos:end="163:22"><name pos:start="163:9" pos:end="163:13">stw_p</name><argument_list pos:start="163:14" pos:end="163:22">(<argument pos:start="163:15" pos:end="163:17"><expr pos:start="163:15" pos:end="163:17"><name pos:start="163:15" pos:end="163:15">w</name><operator pos:start="163:16" pos:end="163:17">++</operator></expr></argument>, <argument pos:start="163:20" pos:end="163:21"><expr pos:start="163:20" pos:end="163:21"><operator pos:start="163:20" pos:end="163:20">-</operator><literal type="number" pos:start="163:21" pos:end="163:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="163:49" pos:end="163:68">/* s16 switch_pin */</comment>

        <expr_stmt pos:start="165:9" pos:end="165:23"><expr pos:start="165:9" pos:end="165:22"><call pos:start="165:9" pos:end="165:22"><name pos:start="165:9" pos:end="165:13">stw_p</name><argument_list pos:start="165:14" pos:end="165:22">(<argument pos:start="165:15" pos:end="165:17"><expr pos:start="165:15" pos:end="165:17"><name pos:start="165:15" pos:end="165:15">w</name><operator pos:start="165:16" pos:end="165:17">++</operator></expr></argument>, <argument pos:start="165:20" pos:end="165:21"><expr pos:start="165:20" pos:end="165:21"><operator pos:start="165:20" pos:end="165:20">-</operator><literal type="number" pos:start="165:21" pos:end="165:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="165:49" pos:end="165:64">/* s16 wp_pin */</comment>

        <expr_stmt pos:start="167:9" pos:end="167:26"><expr pos:start="167:9" pos:end="167:25"><call pos:start="167:9" pos:end="167:25"><name pos:start="167:9" pos:end="167:13">stw_p</name><argument_list pos:start="167:14" pos:end="167:25">(<argument pos:start="167:15" pos:end="167:17"><expr pos:start="167:15" pos:end="167:17"><name pos:start="167:15" pos:end="167:15">w</name><operator pos:start="167:16" pos:end="167:17">++</operator></expr></argument>, <argument pos:start="167:20" pos:end="167:24"><expr pos:start="167:20" pos:end="167:24"><literal type="number" pos:start="167:20" pos:end="167:24">0x240</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="167:49" pos:end="167:68">/* unsigned flags */</comment>

        <expr_stmt pos:start="169:9" pos:end="169:27"><expr pos:start="169:9" pos:end="169:26"><call pos:start="169:9" pos:end="169:26"><name pos:start="169:9" pos:end="169:13">stw_p</name><argument_list pos:start="169:14" pos:end="169:26">(<argument pos:start="169:15" pos:end="169:17"><expr pos:start="169:15" pos:end="169:17"><name pos:start="169:15" pos:end="169:15">w</name><operator pos:start="169:16" pos:end="169:17">++</operator></expr></argument>, <argument pos:start="169:20" pos:end="169:25"><expr pos:start="169:20" pos:end="169:25"><literal type="number" pos:start="169:20" pos:end="169:25">0xc000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="169:49" pos:end="169:67">/* s16 power_pin */</comment>

        <expr_stmt pos:start="171:9" pos:end="171:27"><expr pos:start="171:9" pos:end="171:26"><call pos:start="171:9" pos:end="171:26"><name pos:start="171:9" pos:end="171:13">stw_p</name><argument_list pos:start="171:14" pos:end="171:26">(<argument pos:start="171:15" pos:end="171:17"><expr pos:start="171:15" pos:end="171:17"><name pos:start="171:15" pos:end="171:15">w</name><operator pos:start="171:16" pos:end="171:17">++</operator></expr></argument>, <argument pos:start="171:20" pos:end="171:25"><expr pos:start="171:20" pos:end="171:25"><literal type="number" pos:start="171:20" pos:end="171:25">0x0248</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="171:49" pos:end="171:68">/* s16 switch_pin */</comment>

        <expr_stmt pos:start="173:9" pos:end="173:27"><expr pos:start="173:9" pos:end="173:26"><call pos:start="173:9" pos:end="173:26"><name pos:start="173:9" pos:end="173:13">stw_p</name><argument_list pos:start="173:14" pos:end="173:26">(<argument pos:start="173:15" pos:end="173:17"><expr pos:start="173:15" pos:end="173:17"><name pos:start="173:15" pos:end="173:15">w</name><operator pos:start="173:16" pos:end="173:17">++</operator></expr></argument>, <argument pos:start="173:20" pos:end="173:25"><expr pos:start="173:20" pos:end="173:25"><literal type="number" pos:start="173:20" pos:end="173:25">0xc000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="173:49" pos:end="173:64">/* s16 wp_pin */</comment>

    </block_content>}</block></if> <else pos:start="175:7" pos:end="193:5">else <block pos:start="175:12" pos:end="193:5">{<block_content pos:start="177:9" pos:end="191:22">

        <expr_stmt pos:start="177:9" pos:end="177:24"><expr pos:start="177:9" pos:end="177:23"><call pos:start="177:9" pos:end="177:23"><name pos:start="177:9" pos:end="177:13">stw_p</name><argument_list pos:start="177:14" pos:end="177:23">(<argument pos:start="177:15" pos:end="177:17"><expr pos:start="177:15" pos:end="177:17"><name pos:start="177:15" pos:end="177:15">w</name><operator pos:start="177:16" pos:end="177:17">++</operator></expr></argument>, <argument pos:start="177:20" pos:end="177:22"><expr pos:start="177:20" pos:end="177:22"><literal type="number" pos:start="177:20" pos:end="177:22">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="177:49" pos:end="177:68">/* unsigned flags */</comment>

        <expr_stmt pos:start="179:9" pos:end="179:23"><expr pos:start="179:9" pos:end="179:22"><call pos:start="179:9" pos:end="179:22"><name pos:start="179:9" pos:end="179:13">stw_p</name><argument_list pos:start="179:14" pos:end="179:22">(<argument pos:start="179:15" pos:end="179:17"><expr pos:start="179:15" pos:end="179:17"><name pos:start="179:15" pos:end="179:15">w</name><operator pos:start="179:16" pos:end="179:17">++</operator></expr></argument>, <argument pos:start="179:20" pos:end="179:21"><expr pos:start="179:20" pos:end="179:21"><operator pos:start="179:20" pos:end="179:20">-</operator><literal type="number" pos:start="179:21" pos:end="179:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="179:49" pos:end="179:67">/* s16 power_pin */</comment>

        <expr_stmt pos:start="181:9" pos:end="181:23"><expr pos:start="181:9" pos:end="181:22"><call pos:start="181:9" pos:end="181:22"><name pos:start="181:9" pos:end="181:13">stw_p</name><argument_list pos:start="181:14" pos:end="181:22">(<argument pos:start="181:15" pos:end="181:17"><expr pos:start="181:15" pos:end="181:17"><name pos:start="181:15" pos:end="181:15">w</name><operator pos:start="181:16" pos:end="181:17">++</operator></expr></argument>, <argument pos:start="181:20" pos:end="181:21"><expr pos:start="181:20" pos:end="181:21"><operator pos:start="181:20" pos:end="181:20">-</operator><literal type="number" pos:start="181:21" pos:end="181:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="181:49" pos:end="181:68">/* s16 switch_pin */</comment>

        <expr_stmt pos:start="183:9" pos:end="183:23"><expr pos:start="183:9" pos:end="183:22"><call pos:start="183:9" pos:end="183:22"><name pos:start="183:9" pos:end="183:13">stw_p</name><argument_list pos:start="183:14" pos:end="183:22">(<argument pos:start="183:15" pos:end="183:17"><expr pos:start="183:15" pos:end="183:17"><name pos:start="183:15" pos:end="183:15">w</name><operator pos:start="183:16" pos:end="183:17">++</operator></expr></argument>, <argument pos:start="183:20" pos:end="183:21"><expr pos:start="183:20" pos:end="183:21"><operator pos:start="183:20" pos:end="183:20">-</operator><literal type="number" pos:start="183:21" pos:end="183:21">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="183:49" pos:end="183:64">/* s16 wp_pin */</comment>

        <expr_stmt pos:start="185:9" pos:end="185:22"><expr pos:start="185:9" pos:end="185:21"><call pos:start="185:9" pos:end="185:21"><name pos:start="185:9" pos:end="185:13">stw_p</name><argument_list pos:start="185:14" pos:end="185:21">(<argument pos:start="185:15" pos:end="185:17"><expr pos:start="185:15" pos:end="185:17"><name pos:start="185:15" pos:end="185:15">w</name><operator pos:start="185:16" pos:end="185:17">++</operator></expr></argument>, <argument pos:start="185:20" pos:end="185:20"><expr pos:start="185:20" pos:end="185:20"><literal type="number" pos:start="185:20" pos:end="185:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="185:49" pos:end="185:68">/* unsigned flags */</comment>

        <expr_stmt pos:start="187:9" pos:end="187:22"><expr pos:start="187:9" pos:end="187:21"><call pos:start="187:9" pos:end="187:21"><name pos:start="187:9" pos:end="187:13">stw_p</name><argument_list pos:start="187:14" pos:end="187:21">(<argument pos:start="187:15" pos:end="187:17"><expr pos:start="187:15" pos:end="187:17"><name pos:start="187:15" pos:end="187:15">w</name><operator pos:start="187:16" pos:end="187:17">++</operator></expr></argument>, <argument pos:start="187:20" pos:end="187:20"><expr pos:start="187:20" pos:end="187:20"><literal type="number" pos:start="187:20" pos:end="187:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="187:49" pos:end="187:67">/* s16 power_pin */</comment>

        <expr_stmt pos:start="189:9" pos:end="189:22"><expr pos:start="189:9" pos:end="189:21"><call pos:start="189:9" pos:end="189:21"><name pos:start="189:9" pos:end="189:13">stw_p</name><argument_list pos:start="189:14" pos:end="189:21">(<argument pos:start="189:15" pos:end="189:17"><expr pos:start="189:15" pos:end="189:17"><name pos:start="189:15" pos:end="189:15">w</name><operator pos:start="189:16" pos:end="189:17">++</operator></expr></argument>, <argument pos:start="189:20" pos:end="189:20"><expr pos:start="189:20" pos:end="189:20"><literal type="number" pos:start="189:20" pos:end="189:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="189:49" pos:end="189:68">/* s16 switch_pin */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:22"><expr pos:start="191:9" pos:end="191:21"><call pos:start="191:9" pos:end="191:21"><name pos:start="191:9" pos:end="191:13">stw_p</name><argument_list pos:start="191:14" pos:end="191:21">(<argument pos:start="191:15" pos:end="191:17"><expr pos:start="191:15" pos:end="191:17"><name pos:start="191:15" pos:end="191:15">w</name><operator pos:start="191:16" pos:end="191:17">++</operator></expr></argument>, <argument pos:start="191:20" pos:end="191:20"><expr pos:start="191:20" pos:end="191:20"><literal type="number" pos:start="191:20" pos:end="191:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="191:49" pos:end="191:64">/* s16 wp_pin */</comment>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:33"><expr pos:start="197:5" pos:end="197:32"><call pos:start="197:5" pos:end="197:32"><name pos:start="197:5" pos:end="197:9">stw_p</name><argument_list pos:start="197:10" pos:end="197:32">(<argument pos:start="197:11" pos:end="197:13"><expr pos:start="197:11" pos:end="197:13"><name pos:start="197:11" pos:end="197:11">w</name><operator pos:start="197:12" pos:end="197:13">++</operator></expr></argument>, <argument pos:start="197:16" pos:end="197:31"><expr pos:start="197:16" pos:end="197:31"><name pos:start="197:16" pos:end="197:31">OMAP_TAG_TEA5761</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="197:49" pos:end="197:61">/* u16 tag */</comment>

    <expr_stmt pos:start="199:5" pos:end="199:18"><expr pos:start="199:5" pos:end="199:17"><call pos:start="199:5" pos:end="199:17"><name pos:start="199:5" pos:end="199:9">stw_p</name><argument_list pos:start="199:10" pos:end="199:17">(<argument pos:start="199:11" pos:end="199:13"><expr pos:start="199:11" pos:end="199:13"><name pos:start="199:11" pos:end="199:11">w</name><operator pos:start="199:12" pos:end="199:13">++</operator></expr></argument>, <argument pos:start="199:16" pos:end="199:16"><expr pos:start="199:16" pos:end="199:16"><literal type="number" pos:start="199:16" pos:end="199:16">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="199:49" pos:end="199:61">/* u16 len */</comment>

    <expr_stmt pos:start="201:5" pos:end="201:37"><expr pos:start="201:5" pos:end="201:36"><call pos:start="201:5" pos:end="201:36"><name pos:start="201:5" pos:end="201:9">stw_p</name><argument_list pos:start="201:10" pos:end="201:36">(<argument pos:start="201:11" pos:end="201:13"><expr pos:start="201:11" pos:end="201:13"><name pos:start="201:11" pos:end="201:11">w</name><operator pos:start="201:12" pos:end="201:13">++</operator></expr></argument>, <argument pos:start="201:16" pos:end="201:35"><expr pos:start="201:16" pos:end="201:35"><name pos:start="201:16" pos:end="201:35">N8X0_TEA5761_CS_GPIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="201:49" pos:end="201:69">/* u16 enable_gpio */</comment>

    <expr_stmt pos:start="203:5" pos:end="203:8"><expr pos:start="203:5" pos:end="203:7"><name pos:start="203:5" pos:end="203:5">w</name><operator pos:start="203:6" pos:end="203:7">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:65"><expr pos:start="207:5" pos:end="207:64"><name pos:start="207:5" pos:end="207:13">partition</name> <operator pos:start="207:15" pos:end="207:15">=</operator> <ternary pos:start="207:17" pos:end="207:64"><condition pos:start="207:17" pos:end="207:32"><expr pos:start="207:17" pos:end="207:30"><operator pos:start="207:17" pos:end="207:17">(</operator><name pos:start="207:18" pos:end="207:22">model</name> <operator pos:start="207:24" pos:end="207:25">==</operator> <literal type="number" pos:start="207:27" pos:end="207:29">810</literal><operator pos:start="207:30" pos:end="207:30">)</operator></expr> ?</condition><then pos:start="207:34" pos:end="207:47"> <expr pos:start="207:34" pos:end="207:47"><name pos:start="207:34" pos:end="207:47">n810_part_info</name></expr> </then><else pos:start="207:49" pos:end="207:64">: <expr pos:start="207:51" pos:end="207:64"><name pos:start="207:51" pos:end="207:64">n800_part_info</name></expr></else></ternary></expr>;</expr_stmt>

    <for pos:start="209:5" pos:end="227:5">for <control pos:start="209:9" pos:end="209:40">(<init pos:start="209:10" pos:end="209:10">;</init> <condition pos:start="209:12" pos:end="209:27"><expr pos:start="209:12" pos:end="209:26"><name pos:start="209:12" pos:end="209:26"><name pos:start="209:12" pos:end="209:20">partition</name><operator pos:start="209:21" pos:end="209:22">-&gt;</operator><name pos:start="209:23" pos:end="209:26">name</name></name></expr>;</condition> <incr pos:start="209:29" pos:end="209:39"><expr pos:start="209:29" pos:end="209:39"><name pos:start="209:29" pos:end="209:37">partition</name><operator pos:start="209:38" pos:end="209:39">++</operator></expr></incr>)</control> <block pos:start="209:42" pos:end="227:5">{<block_content pos:start="211:9" pos:end="225:23">

        <expr_stmt pos:start="211:9" pos:end="211:39"><expr pos:start="211:9" pos:end="211:38"><call pos:start="211:9" pos:end="211:38"><name pos:start="211:9" pos:end="211:13">stw_p</name><argument_list pos:start="211:14" pos:end="211:38">(<argument pos:start="211:15" pos:end="211:17"><expr pos:start="211:15" pos:end="211:17"><name pos:start="211:15" pos:end="211:15">w</name><operator pos:start="211:16" pos:end="211:17">++</operator></expr></argument>, <argument pos:start="211:20" pos:end="211:37"><expr pos:start="211:20" pos:end="211:37"><name pos:start="211:20" pos:end="211:37">OMAP_TAG_PARTITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="211:49" pos:end="211:61">/* u16 tag */</comment>

        <expr_stmt pos:start="213:9" pos:end="213:23"><expr pos:start="213:9" pos:end="213:22"><call pos:start="213:9" pos:end="213:22"><name pos:start="213:9" pos:end="213:13">stw_p</name><argument_list pos:start="213:14" pos:end="213:22">(<argument pos:start="213:15" pos:end="213:17"><expr pos:start="213:15" pos:end="213:17"><name pos:start="213:15" pos:end="213:15">w</name><operator pos:start="213:16" pos:end="213:17">++</operator></expr></argument>, <argument pos:start="213:20" pos:end="213:21"><expr pos:start="213:20" pos:end="213:21"><literal type="number" pos:start="213:20" pos:end="213:21">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="213:49" pos:end="213:61">/* u16 len */</comment>

        <expr_stmt pos:start="215:9" pos:end="215:44"><expr pos:start="215:9" pos:end="215:43"><call pos:start="215:9" pos:end="215:43"><name pos:start="215:9" pos:end="215:14">strcpy</name><argument_list pos:start="215:15" pos:end="215:43">(<argument pos:start="215:16" pos:end="215:25"><expr pos:start="215:16" pos:end="215:25"><operator pos:start="215:16" pos:end="215:16">(</operator><name pos:start="215:17" pos:end="215:20">void</name> <operator pos:start="215:22" pos:end="215:22">*</operator><operator pos:start="215:23" pos:end="215:23">)</operator> <name pos:start="215:25" pos:end="215:25">w</name></expr></argument>, <argument pos:start="215:28" pos:end="215:42"><expr pos:start="215:28" pos:end="215:42"><name pos:start="215:28" pos:end="215:42"><name pos:start="215:28" pos:end="215:36">partition</name><operator pos:start="215:37" pos:end="215:38">-&gt;</operator><name pos:start="215:39" pos:end="215:42">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block" pos:start="215:49" pos:end="215:67">/* char name[16] */</comment>

        <expr_stmt pos:start="217:9" pos:end="217:29"><expr pos:start="217:9" pos:end="217:28"><name pos:start="217:9" pos:end="217:9">l</name> <operator pos:start="217:11" pos:end="217:11">=</operator> <operator pos:start="217:13" pos:end="217:13">(</operator><name pos:start="217:14" pos:end="217:17">void</name> <operator pos:start="217:19" pos:end="217:19">*</operator><operator pos:start="217:20" pos:end="217:20">)</operator> <operator pos:start="217:22" pos:end="217:22">(</operator><name pos:start="217:23" pos:end="217:23">w</name> <operator pos:start="217:25" pos:end="217:25">+</operator> <literal type="number" pos:start="217:27" pos:end="217:27">8</literal><operator pos:start="217:28" pos:end="217:28">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:36"><expr pos:start="219:9" pos:end="219:35"><call pos:start="219:9" pos:end="219:35"><name pos:start="219:9" pos:end="219:13">stl_p</name><argument_list pos:start="219:14" pos:end="219:35">(<argument pos:start="219:15" pos:end="219:17"><expr pos:start="219:15" pos:end="219:17"><name pos:start="219:15" pos:end="219:15">l</name><operator pos:start="219:16" pos:end="219:17">++</operator></expr></argument>, <argument pos:start="219:20" pos:end="219:34"><expr pos:start="219:20" pos:end="219:34"><name pos:start="219:20" pos:end="219:34"><name pos:start="219:20" pos:end="219:28">partition</name><operator pos:start="219:29" pos:end="219:30">-&gt;</operator><name pos:start="219:31" pos:end="219:34">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="219:49" pos:end="219:71">/* unsigned int size */</comment>

        <expr_stmt pos:start="221:9" pos:end="221:38"><expr pos:start="221:9" pos:end="221:37"><call pos:start="221:9" pos:end="221:37"><name pos:start="221:9" pos:end="221:13">stl_p</name><argument_list pos:start="221:14" pos:end="221:37">(<argument pos:start="221:15" pos:end="221:17"><expr pos:start="221:15" pos:end="221:17"><name pos:start="221:15" pos:end="221:15">l</name><operator pos:start="221:16" pos:end="221:17">++</operator></expr></argument>, <argument pos:start="221:20" pos:end="221:36"><expr pos:start="221:20" pos:end="221:36"><name pos:start="221:20" pos:end="221:36"><name pos:start="221:20" pos:end="221:28">partition</name><operator pos:start="221:29" pos:end="221:30">-&gt;</operator><name pos:start="221:31" pos:end="221:36">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="221:49" pos:end="221:73">/* unsigned int offset */</comment>

        <expr_stmt pos:start="223:9" pos:end="223:36"><expr pos:start="223:9" pos:end="223:35"><call pos:start="223:9" pos:end="223:35"><name pos:start="223:9" pos:end="223:13">stl_p</name><argument_list pos:start="223:14" pos:end="223:35">(<argument pos:start="223:15" pos:end="223:17"><expr pos:start="223:15" pos:end="223:17"><name pos:start="223:15" pos:end="223:15">l</name><operator pos:start="223:16" pos:end="223:17">++</operator></expr></argument>, <argument pos:start="223:20" pos:end="223:34"><expr pos:start="223:20" pos:end="223:34"><name pos:start="223:20" pos:end="223:34"><name pos:start="223:20" pos:end="223:28">partition</name><operator pos:start="223:29" pos:end="223:30">-&gt;</operator><name pos:start="223:31" pos:end="223:34">mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="223:49" pos:end="223:77">/* unsigned int mask_flags */</comment>

        <expr_stmt pos:start="225:9" pos:end="225:23"><expr pos:start="225:9" pos:end="225:22"><name pos:start="225:9" pos:end="225:9">w</name> <operator pos:start="225:11" pos:end="225:11">=</operator> <operator pos:start="225:13" pos:end="225:13">(</operator><name pos:start="225:14" pos:end="225:17">void</name> <operator pos:start="225:19" pos:end="225:19">*</operator><operator pos:start="225:20" pos:end="225:20">)</operator> <name pos:start="225:22" pos:end="225:22">l</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="231:5" pos:end="231:37"><expr pos:start="231:5" pos:end="231:36"><call pos:start="231:5" pos:end="231:36"><name pos:start="231:5" pos:end="231:9">stw_p</name><argument_list pos:start="231:10" pos:end="231:36">(<argument pos:start="231:11" pos:end="231:13"><expr pos:start="231:11" pos:end="231:13"><name pos:start="231:11" pos:end="231:11">w</name><operator pos:start="231:12" pos:end="231:13">++</operator></expr></argument>, <argument pos:start="231:16" pos:end="231:35"><expr pos:start="231:16" pos:end="231:35"><name pos:start="231:16" pos:end="231:35">OMAP_TAG_BOOT_REASON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="231:49" pos:end="231:61">/* u16 tag */</comment>

    <expr_stmt pos:start="233:5" pos:end="258:0"><expr pos:start="233:5" pos:end="233:18"><call pos:start="233:5" pos:end="233:18"><name pos:start="233:5" pos:end="233:9">stw_p</name><argument_list pos:start="233:10" pos:end="233:18">(<argument pos:start="233:11" pos:end="233:13"><expr pos:start="233:11" pos:end="233:13"><name pos:start="233:11" pos:end="233:11">w</name><operator pos:start="233:12" pos:end="233:13">++</operator></expr></argument>, <argument pos:start="233:16" pos:end="233:17"><expr pos:start="233:16" pos:end="233:17"><literal type="number" pos:start="233:16" pos:end="233:17">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="233:49" pos:end="233:61">/* u16 len */</comment>

<cpp:if pos:start="235:1" pos:end="235:5">#<cpp:directive pos:start="235:2" pos:end="235:3">if</cpp:directive> <expr pos:start="235:5" pos:end="235:5"><literal type="number" pos:start="235:5" pos:end="235:5">0</literal></expr></cpp:if>

    strcpy((void *) w, "por");			<comment type="block" pos:start="237:49" pos:end="237:73">/* char reason_str[12] */</comment>

    strcpy((void *) w, "charger");		<comment type="block" pos:start="239:49" pos:end="239:73">/* char reason_str[12] */</comment>

    strcpy((void *) w, "32wd_to");		<comment type="block" pos:start="241:49" pos:end="241:73">/* char reason_str[12] */</comment>

    strcpy((void *) w, "sw_rst");		<comment type="block" pos:start="243:49" pos:end="243:73">/* char reason_str[12] */</comment>

    strcpy((void *) w, "mbus");			<comment type="block" pos:start="245:49" pos:end="245:73">/* char reason_str[12] */</comment>

    strcpy((void *) w, "unknown");		<comment type="block" pos:start="247:49" pos:end="247:73">/* char reason_str[12] */</comment>

    strcpy((void *) w, "swdg_to");		<comment type="block" pos:start="249:49" pos:end="249:73">/* char reason_str[12] */</comment>

    strcpy((void *) w, "sec_vio");		<comment type="block" pos:start="251:49" pos:end="251:73">/* char reason_str[12] */</comment>

    strcpy((void *) w, "pwr_key");		<comment type="block" pos:start="253:49" pos:end="253:73">/* char reason_str[12] */</comment>

    strcpy((void *) w, "rtc_alarm");		<comment type="block" pos:start="255:49" pos:end="255:73">/* char reason_str[12] */</comment>

<cpp:else pos:start="257:1" pos:end="257:5">#<cpp:directive pos:start="257:2" pos:end="257:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="259:5" pos:end="262:0"><expr pos:start="259:5" pos:end="259:33"><call pos:start="259:5" pos:end="259:33"><name pos:start="259:5" pos:end="259:10">strcpy</name><argument_list pos:start="259:11" pos:end="259:33">(<argument pos:start="259:12" pos:end="259:21"><expr pos:start="259:12" pos:end="259:21"><operator pos:start="259:12" pos:end="259:12">(</operator><name pos:start="259:13" pos:end="259:16">void</name> <operator pos:start="259:18" pos:end="259:18">*</operator><operator pos:start="259:19" pos:end="259:19">)</operator> <name pos:start="259:21" pos:end="259:21">w</name></expr></argument>, <argument pos:start="259:24" pos:end="259:32"><expr pos:start="259:24" pos:end="259:32"><literal type="string" pos:start="259:24" pos:end="259:32">"pwr_key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="259:49" pos:end="259:73">/* char reason_str[12] */</comment>

<cpp:endif pos:start="261:1" pos:end="261:6">#<cpp:directive pos:start="261:2" pos:end="261:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="263:5" pos:end="263:11"><expr pos:start="263:5" pos:end="263:10"><name pos:start="263:5" pos:end="263:5">w</name> <operator pos:start="263:7" pos:end="263:8">+=</operator> <literal type="number" pos:start="263:10" pos:end="263:10">6</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="267:5" pos:end="267:45"><expr pos:start="267:5" pos:end="267:44"><name pos:start="267:5" pos:end="267:7">tag</name> <operator pos:start="267:9" pos:end="267:9">=</operator> <ternary pos:start="267:11" pos:end="267:44"><condition pos:start="267:11" pos:end="267:26"><expr pos:start="267:11" pos:end="267:24"><operator pos:start="267:11" pos:end="267:11">(</operator><name pos:start="267:12" pos:end="267:16">model</name> <operator pos:start="267:18" pos:end="267:19">==</operator> <literal type="number" pos:start="267:21" pos:end="267:23">810</literal><operator pos:start="267:24" pos:end="267:24">)</operator></expr> ?</condition><then pos:start="267:28" pos:end="267:34"> <expr pos:start="267:28" pos:end="267:34"><literal type="string" pos:start="267:28" pos:end="267:34">"RX-44"</literal></expr> </then><else pos:start="267:36" pos:end="267:44">: <expr pos:start="267:38" pos:end="267:44"><literal type="string" pos:start="267:38" pos:end="267:44">"RX-34"</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:37"><expr pos:start="269:5" pos:end="269:36"><call pos:start="269:5" pos:end="269:36"><name pos:start="269:5" pos:end="269:9">stw_p</name><argument_list pos:start="269:10" pos:end="269:36">(<argument pos:start="269:11" pos:end="269:13"><expr pos:start="269:11" pos:end="269:13"><name pos:start="269:11" pos:end="269:11">w</name><operator pos:start="269:12" pos:end="269:13">++</operator></expr></argument>, <argument pos:start="269:16" pos:end="269:35"><expr pos:start="269:16" pos:end="269:35"><name pos:start="269:16" pos:end="269:35">OMAP_TAG_VERSION_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="269:49" pos:end="269:61">/* u16 tag */</comment>

    <expr_stmt pos:start="271:5" pos:end="271:19"><expr pos:start="271:5" pos:end="271:18"><call pos:start="271:5" pos:end="271:18"><name pos:start="271:5" pos:end="271:9">stw_p</name><argument_list pos:start="271:10" pos:end="271:18">(<argument pos:start="271:11" pos:end="271:13"><expr pos:start="271:11" pos:end="271:13"><name pos:start="271:11" pos:end="271:11">w</name><operator pos:start="271:12" pos:end="271:13">++</operator></expr></argument>, <argument pos:start="271:16" pos:end="271:17"><expr pos:start="271:16" pos:end="271:17"><literal type="number" pos:start="271:16" pos:end="271:17">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="271:49" pos:end="271:61">/* u16 len */</comment>

    <expr_stmt pos:start="273:5" pos:end="273:34"><expr pos:start="273:5" pos:end="273:33"><call pos:start="273:5" pos:end="273:33"><name pos:start="273:5" pos:end="273:10">strcpy</name><argument_list pos:start="273:11" pos:end="273:33">(<argument pos:start="273:12" pos:end="273:21"><expr pos:start="273:12" pos:end="273:21"><operator pos:start="273:12" pos:end="273:12">(</operator><name pos:start="273:13" pos:end="273:16">void</name> <operator pos:start="273:18" pos:end="273:18">*</operator><operator pos:start="273:19" pos:end="273:19">)</operator> <name pos:start="273:21" pos:end="273:21">w</name></expr></argument>, <argument pos:start="273:24" pos:end="273:32"><expr pos:start="273:24" pos:end="273:32"><literal type="string" pos:start="273:24" pos:end="273:32">"product"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="273:49" pos:end="273:72">/* char component[12] */</comment>

    <expr_stmt pos:start="275:5" pos:end="275:11"><expr pos:start="275:5" pos:end="275:10"><name pos:start="275:5" pos:end="275:5">w</name> <operator pos:start="275:7" pos:end="275:8">+=</operator> <literal type="number" pos:start="275:10" pos:end="275:10">6</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:28"><expr pos:start="277:5" pos:end="277:27"><call pos:start="277:5" pos:end="277:27"><name pos:start="277:5" pos:end="277:10">strcpy</name><argument_list pos:start="277:11" pos:end="277:27">(<argument pos:start="277:12" pos:end="277:21"><expr pos:start="277:12" pos:end="277:21"><operator pos:start="277:12" pos:end="277:12">(</operator><name pos:start="277:13" pos:end="277:16">void</name> <operator pos:start="277:18" pos:end="277:18">*</operator><operator pos:start="277:19" pos:end="277:19">)</operator> <name pos:start="277:21" pos:end="277:21">w</name></expr></argument>, <argument pos:start="277:24" pos:end="277:26"><expr pos:start="277:24" pos:end="277:26"><name pos:start="277:24" pos:end="277:26">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="277:49" pos:end="277:70">/* char version[12] */</comment>

    <expr_stmt pos:start="279:5" pos:end="279:11"><expr pos:start="279:5" pos:end="279:10"><name pos:start="279:5" pos:end="279:5">w</name> <operator pos:start="279:7" pos:end="279:8">+=</operator> <literal type="number" pos:start="279:10" pos:end="279:10">6</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="283:5" pos:end="283:37"><expr pos:start="283:5" pos:end="283:36"><call pos:start="283:5" pos:end="283:36"><name pos:start="283:5" pos:end="283:9">stw_p</name><argument_list pos:start="283:10" pos:end="283:36">(<argument pos:start="283:11" pos:end="283:13"><expr pos:start="283:11" pos:end="283:13"><name pos:start="283:11" pos:end="283:11">w</name><operator pos:start="283:12" pos:end="283:13">++</operator></expr></argument>, <argument pos:start="283:16" pos:end="283:35"><expr pos:start="283:16" pos:end="283:35"><name pos:start="283:16" pos:end="283:35">OMAP_TAG_VERSION_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="283:49" pos:end="283:61">/* u16 tag */</comment>

    <expr_stmt pos:start="285:5" pos:end="285:19"><expr pos:start="285:5" pos:end="285:18"><call pos:start="285:5" pos:end="285:18"><name pos:start="285:5" pos:end="285:9">stw_p</name><argument_list pos:start="285:10" pos:end="285:18">(<argument pos:start="285:11" pos:end="285:13"><expr pos:start="285:11" pos:end="285:13"><name pos:start="285:11" pos:end="285:11">w</name><operator pos:start="285:12" pos:end="285:13">++</operator></expr></argument>, <argument pos:start="285:16" pos:end="285:17"><expr pos:start="285:16" pos:end="285:17"><literal type="number" pos:start="285:16" pos:end="285:17">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="285:49" pos:end="285:61">/* u16 len */</comment>

    <expr_stmt pos:start="287:5" pos:end="287:35"><expr pos:start="287:5" pos:end="287:34"><call pos:start="287:5" pos:end="287:34"><name pos:start="287:5" pos:end="287:10">strcpy</name><argument_list pos:start="287:11" pos:end="287:34">(<argument pos:start="287:12" pos:end="287:21"><expr pos:start="287:12" pos:end="287:21"><operator pos:start="287:12" pos:end="287:12">(</operator><name pos:start="287:13" pos:end="287:16">void</name> <operator pos:start="287:18" pos:end="287:18">*</operator><operator pos:start="287:19" pos:end="287:19">)</operator> <name pos:start="287:21" pos:end="287:21">w</name></expr></argument>, <argument pos:start="287:24" pos:end="287:33"><expr pos:start="287:24" pos:end="287:33"><literal type="string" pos:start="287:24" pos:end="287:33">"hw-build"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="287:49" pos:end="287:72">/* char component[12] */</comment>

    <expr_stmt pos:start="289:5" pos:end="289:11"><expr pos:start="289:5" pos:end="289:10"><name pos:start="289:5" pos:end="289:5">w</name> <operator pos:start="289:7" pos:end="289:8">+=</operator> <literal type="number" pos:start="289:10" pos:end="289:10">6</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:32"><expr pos:start="291:5" pos:end="291:31"><call pos:start="291:5" pos:end="291:31"><name pos:start="291:5" pos:end="291:10">strcpy</name><argument_list pos:start="291:11" pos:end="291:31">(<argument pos:start="291:12" pos:end="291:21"><expr pos:start="291:12" pos:end="291:21"><operator pos:start="291:12" pos:end="291:12">(</operator><name pos:start="291:13" pos:end="291:16">void</name> <operator pos:start="291:18" pos:end="291:18">*</operator><operator pos:start="291:19" pos:end="291:19">)</operator> <name pos:start="291:21" pos:end="291:21">w</name></expr></argument>, <argument pos:start="291:24" pos:end="291:30"><expr pos:start="291:24" pos:end="291:30"><literal type="string" pos:start="291:24" pos:end="291:30">"QEMU "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="293:5" pos:end="293:48"><expr pos:start="293:5" pos:end="293:47"><call pos:start="293:5" pos:end="293:47"><name pos:start="293:5" pos:end="293:11">pstrcat</name><argument_list pos:start="293:12" pos:end="293:47">(<argument pos:start="293:13" pos:end="293:22"><expr pos:start="293:13" pos:end="293:22"><operator pos:start="293:13" pos:end="293:13">(</operator><name pos:start="293:14" pos:end="293:17">void</name> <operator pos:start="293:19" pos:end="293:19">*</operator><operator pos:start="293:20" pos:end="293:20">)</operator> <name pos:start="293:22" pos:end="293:22">w</name></expr></argument>, <argument pos:start="293:25" pos:end="293:26"><expr pos:start="293:25" pos:end="293:26"><literal type="number" pos:start="293:25" pos:end="293:26">12</literal></expr></argument>, <argument pos:start="293:29" pos:end="293:46"><expr pos:start="293:29" pos:end="293:46"><call pos:start="293:29" pos:end="293:46"><name pos:start="293:29" pos:end="293:44">qemu_get_version</name><argument_list pos:start="293:45" pos:end="293:46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="293:50" pos:end="293:71">/* char version[12] */</comment>

    <expr_stmt pos:start="295:5" pos:end="295:11"><expr pos:start="295:5" pos:end="295:10"><name pos:start="295:5" pos:end="295:5">w</name> <operator pos:start="295:7" pos:end="295:8">+=</operator> <literal type="number" pos:start="295:10" pos:end="295:10">6</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="299:5" pos:end="299:56"><expr pos:start="299:5" pos:end="299:55"><name pos:start="299:5" pos:end="299:7">tag</name> <operator pos:start="299:9" pos:end="299:9">=</operator> <ternary pos:start="299:11" pos:end="299:55"><condition pos:start="299:11" pos:end="299:26"><expr pos:start="299:11" pos:end="299:24"><operator pos:start="299:11" pos:end="299:11">(</operator><name pos:start="299:12" pos:end="299:16">model</name> <operator pos:start="299:18" pos:end="299:19">==</operator> <literal type="number" pos:start="299:21" pos:end="299:23">810</literal><operator pos:start="299:24" pos:end="299:24">)</operator></expr> ?</condition><then pos:start="299:28" pos:end="299:40"> <expr pos:start="299:28" pos:end="299:40"><literal type="string" pos:start="299:28" pos:end="299:40">"1.1.10-qemu"</literal></expr> </then><else pos:start="299:42" pos:end="299:55">: <expr pos:start="299:44" pos:end="299:55"><literal type="string" pos:start="299:44" pos:end="299:55">"1.1.6-qemu"</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:37"><expr pos:start="301:5" pos:end="301:36"><call pos:start="301:5" pos:end="301:36"><name pos:start="301:5" pos:end="301:9">stw_p</name><argument_list pos:start="301:10" pos:end="301:36">(<argument pos:start="301:11" pos:end="301:13"><expr pos:start="301:11" pos:end="301:13"><name pos:start="301:11" pos:end="301:11">w</name><operator pos:start="301:12" pos:end="301:13">++</operator></expr></argument>, <argument pos:start="301:16" pos:end="301:35"><expr pos:start="301:16" pos:end="301:35"><name pos:start="301:16" pos:end="301:35">OMAP_TAG_VERSION_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block" pos:start="301:49" pos:end="301:61">/* u16 tag */</comment>

    <expr_stmt pos:start="303:5" pos:end="303:19"><expr pos:start="303:5" pos:end="303:18"><call pos:start="303:5" pos:end="303:18"><name pos:start="303:5" pos:end="303:9">stw_p</name><argument_list pos:start="303:10" pos:end="303:18">(<argument pos:start="303:11" pos:end="303:13"><expr pos:start="303:11" pos:end="303:13"><name pos:start="303:11" pos:end="303:11">w</name><operator pos:start="303:12" pos:end="303:13">++</operator></expr></argument>, <argument pos:start="303:16" pos:end="303:17"><expr pos:start="303:16" pos:end="303:17"><literal type="number" pos:start="303:16" pos:end="303:17">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block" pos:start="303:49" pos:end="303:61">/* u16 len */</comment>

    <expr_stmt pos:start="305:5" pos:end="305:31"><expr pos:start="305:5" pos:end="305:30"><call pos:start="305:5" pos:end="305:30"><name pos:start="305:5" pos:end="305:10">strcpy</name><argument_list pos:start="305:11" pos:end="305:30">(<argument pos:start="305:12" pos:end="305:21"><expr pos:start="305:12" pos:end="305:21"><operator pos:start="305:12" pos:end="305:12">(</operator><name pos:start="305:13" pos:end="305:16">void</name> <operator pos:start="305:18" pos:end="305:18">*</operator><operator pos:start="305:19" pos:end="305:19">)</operator> <name pos:start="305:21" pos:end="305:21">w</name></expr></argument>, <argument pos:start="305:24" pos:end="305:29"><expr pos:start="305:24" pos:end="305:29"><literal type="string" pos:start="305:24" pos:end="305:29">"nolo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="305:49" pos:end="305:72">/* char component[12] */</comment>

    <expr_stmt pos:start="307:5" pos:end="307:11"><expr pos:start="307:5" pos:end="307:10"><name pos:start="307:5" pos:end="307:5">w</name> <operator pos:start="307:7" pos:end="307:8">+=</operator> <literal type="number" pos:start="307:10" pos:end="307:10">6</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="309:5" pos:end="309:28"><expr pos:start="309:5" pos:end="309:27"><call pos:start="309:5" pos:end="309:27"><name pos:start="309:5" pos:end="309:10">strcpy</name><argument_list pos:start="309:11" pos:end="309:27">(<argument pos:start="309:12" pos:end="309:21"><expr pos:start="309:12" pos:end="309:21"><operator pos:start="309:12" pos:end="309:12">(</operator><name pos:start="309:13" pos:end="309:16">void</name> <operator pos:start="309:18" pos:end="309:18">*</operator><operator pos:start="309:19" pos:end="309:19">)</operator> <name pos:start="309:21" pos:end="309:21">w</name></expr></argument>, <argument pos:start="309:24" pos:end="309:26"><expr pos:start="309:24" pos:end="309:26"><name pos:start="309:24" pos:end="309:26">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>			<comment type="block" pos:start="309:49" pos:end="309:70">/* char version[12] */</comment>

    <expr_stmt pos:start="311:5" pos:end="311:11"><expr pos:start="311:5" pos:end="311:10"><name pos:start="311:5" pos:end="311:5">w</name> <operator pos:start="311:7" pos:end="311:8">+=</operator> <literal type="number" pos:start="311:10" pos:end="311:10">6</literal></expr>;</expr_stmt>



    <return pos:start="315:5" pos:end="315:26">return <expr pos:start="315:12" pos:end="315:25"><operator pos:start="315:12" pos:end="315:12">(</operator><name pos:start="315:13" pos:end="315:16">void</name> <operator pos:start="315:18" pos:end="315:18">*</operator><operator pos:start="315:19" pos:end="315:19">)</operator> <name pos:start="315:21" pos:end="315:21">w</name> <operator pos:start="315:23" pos:end="315:23">-</operator> <name pos:start="315:25" pos:end="315:25">p</name></expr>;</return>

</block_content>}</block></function>
</unit>
