<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13168.c" pos:tabs="8"><function pos:start="1:1" pos:end="309:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:22">kvm_arch_init_vcpu</name><parameter_list pos:start="1:23" pos:end="1:37">(<parameter pos:start="1:24" pos:end="1:36"><decl pos:start="1:24" pos:end="1:36"><type pos:start="1:24" pos:end="1:33"><name pos:start="1:24" pos:end="1:31">CPUState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="309:1">{<block_content pos:start="5:5" pos:end="307:60">

    <struct pos:start="5:5" pos:end="11:41">struct <block pos:start="5:12" pos:end="11:5">{

        <decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:25"><name pos:start="7:9" pos:end="7:25"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:25">kvm_cpuid2</name></name></type> <name pos:start="7:27" pos:end="7:31">cpuid</name></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:45"><decl pos:start="9:9" pos:end="9:44"><type pos:start="9:9" pos:end="9:31"><name pos:start="9:9" pos:end="9:31"><name pos:start="9:9" pos:end="9:14">struct</name> <name pos:start="9:16" pos:end="9:31">kvm_cpuid_entry2</name></name></type> <name pos:start="9:33" pos:end="9:44"><name pos:start="9:33" pos:end="9:39">entries</name><index pos:start="9:40" pos:end="9:44">[<expr pos:start="9:41" pos:end="9:43"><literal type="number" pos:start="9:41" pos:end="9:43">100</literal></expr>]</index></name></decl>;</decl_stmt>

    }</block> <decl pos:start="11:7" pos:end="11:40"><name pos:start="11:7" pos:end="11:19">__attribute__</name><argument_list pos:start="11:20" pos:end="11:29">(<argument pos:start="11:21" pos:end="11:28"><expr pos:start="11:21" pos:end="11:28"><operator pos:start="11:21" pos:end="11:21">(</operator><name pos:start="11:22" pos:end="11:27">packed</name><operator pos:start="11:28" pos:end="11:28">)</operator></expr></argument>)</argument_list> <name pos:start="11:31" pos:end="11:40">cpuid_data</name></decl>;</struct>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:18">limit</name></decl>, <decl pos:start="13:21" pos:end="13:21"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:21" pos:end="13:21">i</name></decl>, <decl pos:start="13:24" pos:end="13:24"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:24" pos:end="13:24">j</name></decl>, <decl pos:start="13:27" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:27" pos:end="13:33">cpuid_i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:19">unused</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:30"><type pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:27">kvm_cpuid_entry2</name></name> <modifier pos:start="17:29" pos:end="17:29">*</modifier></type><name pos:start="17:30" pos:end="17:30">c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:25"><name pos:start="19:14" pos:end="19:22">signature</name><index pos:start="19:23" pos:end="19:25">[<expr pos:start="19:24" pos:end="19:24"><literal type="number" pos:start="19:24" pos:end="19:24">3</literal></expr>]</index></name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:74"><expr pos:start="23:5" pos:end="23:73"><name pos:start="23:5" pos:end="23:23"><name pos:start="23:5" pos:end="23:7">env</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:23">cpuid_features</name></name> <operator pos:start="23:25" pos:end="23:26">&amp;=</operator> <call pos:start="23:28" pos:end="23:73"><name pos:start="23:28" pos:end="23:55">kvm_arch_get_supported_cpuid</name><argument_list pos:start="23:56" pos:end="23:73">(<argument pos:start="23:57" pos:end="23:59"><expr pos:start="23:57" pos:end="23:59"><name pos:start="23:57" pos:end="23:59">env</name></expr></argument>, <argument pos:start="23:62" pos:end="23:62"><expr pos:start="23:62" pos:end="23:62"><literal type="number" pos:start="23:62" pos:end="23:62">1</literal></expr></argument>, <argument pos:start="23:65" pos:end="23:65"><expr pos:start="23:65" pos:end="23:65"><literal type="number" pos:start="23:65" pos:end="23:65">0</literal></expr></argument>, <argument pos:start="23:68" pos:end="23:72"><expr pos:start="23:68" pos:end="23:72"><name pos:start="23:68" pos:end="23:72">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:55"><expr pos:start="27:5" pos:end="27:54"><name pos:start="27:5" pos:end="27:5">i</name> <operator pos:start="27:7" pos:end="27:7">=</operator> <name pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:11">env</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:31">cpuid_ext_features</name></name> <operator pos:start="27:33" pos:end="27:33">&amp;</operator> <name pos:start="27:35" pos:end="27:54">CPUID_EXT_HYPERVISOR</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:78"><expr pos:start="29:5" pos:end="29:77"><name pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:7">env</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:27">cpuid_ext_features</name></name> <operator pos:start="29:29" pos:end="29:30">&amp;=</operator> <call pos:start="29:32" pos:end="29:77"><name pos:start="29:32" pos:end="29:59">kvm_arch_get_supported_cpuid</name><argument_list pos:start="29:60" pos:end="29:77">(<argument pos:start="29:61" pos:end="29:63"><expr pos:start="29:61" pos:end="29:63"><name pos:start="29:61" pos:end="29:63">env</name></expr></argument>, <argument pos:start="29:66" pos:end="29:66"><expr pos:start="29:66" pos:end="29:66"><literal type="number" pos:start="29:66" pos:end="29:66">1</literal></expr></argument>, <argument pos:start="29:69" pos:end="29:69"><expr pos:start="29:69" pos:end="29:69"><literal type="number" pos:start="29:69" pos:end="29:69">0</literal></expr></argument>, <argument pos:start="29:72" pos:end="29:76"><expr pos:start="29:72" pos:end="29:76"><name pos:start="29:72" pos:end="29:76">R_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:33"><expr pos:start="31:5" pos:end="31:32"><name pos:start="31:5" pos:end="31:27"><name pos:start="31:5" pos:end="31:7">env</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:27">cpuid_ext_features</name></name> <operator pos:start="31:29" pos:end="31:30">|=</operator> <name pos:start="31:32" pos:end="31:32">i</name></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="37:71"><expr pos:start="35:5" pos:end="37:70"><name pos:start="35:5" pos:end="35:28"><name pos:start="35:5" pos:end="35:7">env</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:28">cpuid_ext2_features</name></name> <operator pos:start="35:30" pos:end="35:31">&amp;=</operator> <call pos:start="35:33" pos:end="37:70"><name pos:start="35:33" pos:end="35:60">kvm_arch_get_supported_cpuid</name><argument_list pos:start="35:61" pos:end="37:70">(<argument pos:start="35:62" pos:end="35:64"><expr pos:start="35:62" pos:end="35:64"><name pos:start="35:62" pos:end="35:64">env</name></expr></argument>, <argument pos:start="35:67" pos:end="35:76"><expr pos:start="35:67" pos:end="35:76"><literal type="number" pos:start="35:67" pos:end="35:76">0x80000001</literal></expr></argument>,

                                                             <argument pos:start="37:62" pos:end="37:62"><expr pos:start="37:62" pos:end="37:62"><literal type="number" pos:start="37:62" pos:end="37:62">0</literal></expr></argument>, <argument pos:start="37:65" pos:end="37:69"><expr pos:start="37:65" pos:end="37:69"><name pos:start="37:65" pos:end="37:69">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="41:71"><expr pos:start="39:5" pos:end="41:70"><name pos:start="39:5" pos:end="39:28"><name pos:start="39:5" pos:end="39:7">env</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:28">cpuid_ext3_features</name></name> <operator pos:start="39:30" pos:end="39:31">&amp;=</operator> <call pos:start="39:33" pos:end="41:70"><name pos:start="39:33" pos:end="39:60">kvm_arch_get_supported_cpuid</name><argument_list pos:start="39:61" pos:end="41:70">(<argument pos:start="39:62" pos:end="39:64"><expr pos:start="39:62" pos:end="39:64"><name pos:start="39:62" pos:end="39:64">env</name></expr></argument>, <argument pos:start="39:67" pos:end="39:76"><expr pos:start="39:67" pos:end="39:76"><literal type="number" pos:start="39:67" pos:end="39:76">0x80000001</literal></expr></argument>,

                                                             <argument pos:start="41:62" pos:end="41:62"><expr pos:start="41:62" pos:end="41:62"><literal type="number" pos:start="41:62" pos:end="41:62">0</literal></expr></argument>, <argument pos:start="41:65" pos:end="41:69"><expr pos:start="41:65" pos:end="41:69"><name pos:start="41:65" pos:end="41:69">R_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="45:71"><expr pos:start="43:5" pos:end="45:70"><name pos:start="43:5" pos:end="43:27"><name pos:start="43:5" pos:end="43:7">env</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:27">cpuid_svm_features</name></name>  <operator pos:start="43:30" pos:end="43:31">&amp;=</operator> <call pos:start="43:33" pos:end="45:70"><name pos:start="43:33" pos:end="43:60">kvm_arch_get_supported_cpuid</name><argument_list pos:start="43:61" pos:end="45:70">(<argument pos:start="43:62" pos:end="43:64"><expr pos:start="43:62" pos:end="43:64"><name pos:start="43:62" pos:end="43:64">env</name></expr></argument>, <argument pos:start="43:67" pos:end="43:76"><expr pos:start="43:67" pos:end="43:76"><literal type="number" pos:start="43:67" pos:end="43:76">0x8000000A</literal></expr></argument>,

                                                             <argument pos:start="45:62" pos:end="45:62"><expr pos:start="45:62" pos:end="45:62"><literal type="number" pos:start="45:62" pos:end="45:62">0</literal></expr></argument>, <argument pos:start="45:65" pos:end="45:69"><expr pos:start="45:65" pos:end="45:69"><name pos:start="45:65" pos:end="45:69">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="51:5" pos:end="51:16"><expr pos:start="51:5" pos:end="51:15"><name pos:start="51:5" pos:end="51:11">cpuid_i</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <literal type="number" pos:start="51:15" pos:end="51:15">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:35">/* Paravirtualization CPUIDs */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:45"><expr pos:start="57:5" pos:end="57:44"><call pos:start="57:5" pos:end="57:44"><name pos:start="57:5" pos:end="57:10">memcpy</name><argument_list pos:start="57:11" pos:end="57:44">(<argument pos:start="57:12" pos:end="57:20"><expr pos:start="57:12" pos:end="57:20"><name pos:start="57:12" pos:end="57:20">signature</name></expr></argument>, <argument pos:start="57:23" pos:end="57:39"><expr pos:start="57:23" pos:end="57:39"><literal type="string" pos:start="57:23" pos:end="57:39">"KVMKVMKVM\0\0\0"</literal></expr></argument>, <argument pos:start="57:42" pos:end="57:43"><expr pos:start="57:42" pos:end="57:43"><literal type="number" pos:start="57:42" pos:end="57:43">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:39"><expr pos:start="59:5" pos:end="59:38"><name pos:start="59:5" pos:end="59:5">c</name> <operator pos:start="59:7" pos:end="59:7">=</operator> <operator pos:start="59:9" pos:end="59:9">&amp;</operator><name pos:start="59:10" pos:end="59:38"><name pos:start="59:10" pos:end="59:19">cpuid_data</name><operator pos:start="59:20" pos:end="59:20">.</operator><name pos:start="59:21" pos:end="59:27">entries</name><index pos:start="59:28" pos:end="59:38">[<expr pos:start="59:29" pos:end="59:37"><name pos:start="59:29" pos:end="59:35">cpuid_i</name><operator pos:start="59:36" pos:end="59:37">++</operator></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:29"><expr pos:start="61:5" pos:end="61:28"><call pos:start="61:5" pos:end="61:28"><name pos:start="61:5" pos:end="61:10">memset</name><argument_list pos:start="61:11" pos:end="61:28">(<argument pos:start="61:12" pos:end="61:12"><expr pos:start="61:12" pos:end="61:12"><name pos:start="61:12" pos:end="61:12">c</name></expr></argument>, <argument pos:start="61:15" pos:end="61:15"><expr pos:start="61:15" pos:end="61:15"><literal type="number" pos:start="61:15" pos:end="61:15">0</literal></expr></argument>, <argument pos:start="61:18" pos:end="61:27"><expr pos:start="61:18" pos:end="61:27"><sizeof pos:start="61:18" pos:end="61:27">sizeof<argument_list pos:start="61:24" pos:end="61:27">(<argument pos:start="61:25" pos:end="61:26"><expr pos:start="61:25" pos:end="61:26"><operator pos:start="61:25" pos:end="61:25">*</operator><name pos:start="61:26" pos:end="61:26">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:38"><expr pos:start="63:5" pos:end="63:37"><name pos:start="63:5" pos:end="63:15"><name pos:start="63:5" pos:end="63:5">c</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:15">function</name></name> <operator pos:start="63:17" pos:end="63:17">=</operator> <name pos:start="63:19" pos:end="63:37">KVM_CPUID_SIGNATURE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:15"><expr pos:start="65:5" pos:end="65:14"><name pos:start="65:5" pos:end="65:10"><name pos:start="65:5" pos:end="65:5">c</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:10">eax</name></name> <operator pos:start="65:12" pos:end="65:12">=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:26"><expr pos:start="67:5" pos:end="67:25"><name pos:start="67:5" pos:end="67:10"><name pos:start="67:5" pos:end="67:5">c</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:10">ebx</name></name> <operator pos:start="67:12" pos:end="67:12">=</operator> <name pos:start="67:14" pos:end="67:25"><name pos:start="67:14" pos:end="67:22">signature</name><index pos:start="67:23" pos:end="67:25">[<expr pos:start="67:24" pos:end="67:24"><literal type="number" pos:start="67:24" pos:end="67:24">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:26"><expr pos:start="69:5" pos:end="69:25"><name pos:start="69:5" pos:end="69:10"><name pos:start="69:5" pos:end="69:5">c</name><operator pos:start="69:6" pos:end="69:7">-&gt;</operator><name pos:start="69:8" pos:end="69:10">ecx</name></name> <operator pos:start="69:12" pos:end="69:12">=</operator> <name pos:start="69:14" pos:end="69:25"><name pos:start="69:14" pos:end="69:22">signature</name><index pos:start="69:23" pos:end="69:25">[<expr pos:start="69:24" pos:end="69:24"><literal type="number" pos:start="69:24" pos:end="69:24">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:26"><expr pos:start="71:5" pos:end="71:25"><name pos:start="71:5" pos:end="71:10"><name pos:start="71:5" pos:end="71:5">c</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:10">edx</name></name> <operator pos:start="71:12" pos:end="71:12">=</operator> <name pos:start="71:14" pos:end="71:25"><name pos:start="71:14" pos:end="71:22">signature</name><index pos:start="71:23" pos:end="71:25">[<expr pos:start="71:24" pos:end="71:24"><literal type="number" pos:start="71:24" pos:end="71:24">2</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:39"><expr pos:start="75:5" pos:end="75:38"><name pos:start="75:5" pos:end="75:5">c</name> <operator pos:start="75:7" pos:end="75:7">=</operator> <operator pos:start="75:9" pos:end="75:9">&amp;</operator><name pos:start="75:10" pos:end="75:38"><name pos:start="75:10" pos:end="75:19">cpuid_data</name><operator pos:start="75:20" pos:end="75:20">.</operator><name pos:start="75:21" pos:end="75:27">entries</name><index pos:start="75:28" pos:end="75:38">[<expr pos:start="75:29" pos:end="75:37"><name pos:start="75:29" pos:end="75:35">cpuid_i</name><operator pos:start="75:36" pos:end="75:37">++</operator></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:29"><expr pos:start="77:5" pos:end="77:28"><call pos:start="77:5" pos:end="77:28"><name pos:start="77:5" pos:end="77:10">memset</name><argument_list pos:start="77:11" pos:end="77:28">(<argument pos:start="77:12" pos:end="77:12"><expr pos:start="77:12" pos:end="77:12"><name pos:start="77:12" pos:end="77:12">c</name></expr></argument>, <argument pos:start="77:15" pos:end="77:15"><expr pos:start="77:15" pos:end="77:15"><literal type="number" pos:start="77:15" pos:end="77:15">0</literal></expr></argument>, <argument pos:start="77:18" pos:end="77:27"><expr pos:start="77:18" pos:end="77:27"><sizeof pos:start="77:18" pos:end="77:27">sizeof<argument_list pos:start="77:24" pos:end="77:27">(<argument pos:start="77:25" pos:end="77:26"><expr pos:start="77:25" pos:end="77:26"><operator pos:start="77:25" pos:end="77:25">*</operator><name pos:start="77:26" pos:end="77:26">c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:37"><expr pos:start="79:5" pos:end="79:36"><name pos:start="79:5" pos:end="79:15"><name pos:start="79:5" pos:end="79:5">c</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:15">function</name></name> <operator pos:start="79:17" pos:end="79:17">=</operator> <name pos:start="79:19" pos:end="79:36">KVM_CPUID_FEATURES</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="83:78"><expr pos:start="81:5" pos:end="83:77"><name pos:start="81:5" pos:end="81:10"><name pos:start="81:5" pos:end="81:5">c</name><operator pos:start="81:6" pos:end="81:7">-&gt;</operator><name pos:start="81:8" pos:end="81:10">eax</name></name> <operator pos:start="81:12" pos:end="81:12">=</operator> <name pos:start="81:14" pos:end="81:36"><name pos:start="81:14" pos:end="81:16">env</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:36">cpuid_kvm_features</name></name> <operator pos:start="81:38" pos:end="81:38">&amp;</operator> <call pos:start="81:40" pos:end="83:77"><name pos:start="81:40" pos:end="81:67">kvm_arch_get_supported_cpuid</name><argument_list pos:start="81:68" pos:end="83:77">(<argument pos:start="81:69" pos:end="81:71"><expr pos:start="81:69" pos:end="81:71"><name pos:start="81:69" pos:end="81:71">env</name></expr></argument>,

                                                <argument pos:start="83:49" pos:end="83:66"><expr pos:start="83:49" pos:end="83:66"><name pos:start="83:49" pos:end="83:66">KVM_CPUID_FEATURES</name></expr></argument>, <argument pos:start="83:69" pos:end="83:69"><expr pos:start="83:69" pos:end="83:69"><literal type="number" pos:start="83:69" pos:end="83:69">0</literal></expr></argument>, <argument pos:start="83:72" pos:end="83:76"><expr pos:start="83:72" pos:end="83:76"><name pos:start="83:72" pos:end="83:76">R_EAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:63"><expr pos:start="87:5" pos:end="87:62"><name pos:start="87:5" pos:end="87:23">has_msr_async_pf_en</name> <operator pos:start="87:25" pos:end="87:25">=</operator> <name pos:start="87:27" pos:end="87:32"><name pos:start="87:27" pos:end="87:27">c</name><operator pos:start="87:28" pos:end="87:29">-&gt;</operator><name pos:start="87:30" pos:end="87:32">eax</name></name> <operator pos:start="87:34" pos:end="87:34">&amp;</operator> <operator pos:start="87:36" pos:end="87:36">(</operator><literal type="number" pos:start="87:37" pos:end="87:37">1</literal> <operator pos:start="87:39" pos:end="87:40">&lt;&lt;</operator> <name pos:start="87:42" pos:end="87:61">KVM_FEATURE_ASYNC_PF</name><operator pos:start="87:62" pos:end="87:62">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:64"><expr pos:start="91:5" pos:end="91:63"><call pos:start="91:5" pos:end="91:63"><name pos:start="91:5" pos:end="91:17">cpu_x86_cpuid</name><argument_list pos:start="91:18" pos:end="91:63">(<argument pos:start="91:19" pos:end="91:21"><expr pos:start="91:19" pos:end="91:21"><name pos:start="91:19" pos:end="91:21">env</name></expr></argument>, <argument pos:start="91:24" pos:end="91:24"><expr pos:start="91:24" pos:end="91:24"><literal type="number" pos:start="91:24" pos:end="91:24">0</literal></expr></argument>, <argument pos:start="91:27" pos:end="91:27"><expr pos:start="91:27" pos:end="91:27"><literal type="number" pos:start="91:27" pos:end="91:27">0</literal></expr></argument>, <argument pos:start="91:30" pos:end="91:35"><expr pos:start="91:30" pos:end="91:35"><operator pos:start="91:30" pos:end="91:30">&amp;</operator><name pos:start="91:31" pos:end="91:35">limit</name></expr></argument>, <argument pos:start="91:38" pos:end="91:44"><expr pos:start="91:38" pos:end="91:44"><operator pos:start="91:38" pos:end="91:38">&amp;</operator><name pos:start="91:39" pos:end="91:44">unused</name></expr></argument>, <argument pos:start="91:47" pos:end="91:53"><expr pos:start="91:47" pos:end="91:53"><operator pos:start="91:47" pos:end="91:47">&amp;</operator><name pos:start="91:48" pos:end="91:53">unused</name></expr></argument>, <argument pos:start="91:56" pos:end="91:62"><expr pos:start="91:56" pos:end="91:62"><operator pos:start="91:56" pos:end="91:56">&amp;</operator><name pos:start="91:57" pos:end="91:62">unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="95:5" pos:end="193:5">for <control pos:start="95:9" pos:end="95:32">(<init pos:start="95:10" pos:end="95:15"><expr pos:start="95:10" pos:end="95:14"><name pos:start="95:10" pos:end="95:10">i</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <literal type="number" pos:start="95:14" pos:end="95:14">0</literal></expr>;</init> <condition pos:start="95:17" pos:end="95:27"><expr pos:start="95:17" pos:end="95:26"><name pos:start="95:17" pos:end="95:17">i</name> <operator pos:start="95:19" pos:end="95:20">&lt;=</operator> <name pos:start="95:22" pos:end="95:26">limit</name></expr>;</condition> <incr pos:start="95:29" pos:end="95:31"><expr pos:start="95:29" pos:end="95:31"><name pos:start="95:29" pos:end="95:29">i</name><operator pos:start="95:30" pos:end="95:31">++</operator></expr></incr>)</control> <block pos:start="95:34" pos:end="193:5">{<block_content pos:start="97:9" pos:end="191:9">

        <expr_stmt pos:start="97:9" pos:end="97:43"><expr pos:start="97:9" pos:end="97:42"><name pos:start="97:9" pos:end="97:9">c</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <operator pos:start="97:13" pos:end="97:13">&amp;</operator><name pos:start="97:14" pos:end="97:42"><name pos:start="97:14" pos:end="97:23">cpuid_data</name><operator pos:start="97:24" pos:end="97:24">.</operator><name pos:start="97:25" pos:end="97:31">entries</name><index pos:start="97:32" pos:end="97:42">[<expr pos:start="97:33" pos:end="97:41"><name pos:start="97:33" pos:end="97:39">cpuid_i</name><operator pos:start="97:40" pos:end="97:41">++</operator></expr>]</index></name></expr>;</expr_stmt>



        <switch pos:start="101:9" pos:end="191:9">switch <condition pos:start="101:16" pos:end="101:18">(<expr pos:start="101:17" pos:end="101:17"><name pos:start="101:17" pos:end="101:17">i</name></expr>)</condition> <block pos:start="101:20" pos:end="191:9">{<block_content pos:start="103:9" pos:end="189:18">

        <case pos:start="103:9" pos:end="103:15">case <expr pos:start="103:14" pos:end="103:14"><literal type="number" pos:start="103:14" pos:end="103:14">2</literal></expr>:</case> <block pos:start="103:17" pos:end="137:9">{<block_content pos:start="107:13" pos:end="135:18">

            <comment type="block" pos:start="105:13" pos:end="105:72">/* Keep reading function 2 till all the input is received */</comment>

            <decl_stmt pos:start="107:13" pos:end="107:22"><decl pos:start="107:13" pos:end="107:21"><type pos:start="107:13" pos:end="107:15"><name pos:start="107:13" pos:end="107:15">int</name></type> <name pos:start="107:17" pos:end="107:21">times</name></decl>;</decl_stmt>



            <expr_stmt pos:start="111:13" pos:end="111:28"><expr pos:start="111:13" pos:end="111:27"><name pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:13">c</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:23">function</name></name> <operator pos:start="111:25" pos:end="111:25">=</operator> <name pos:start="111:27" pos:end="111:27">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="115:54"><expr pos:start="113:13" pos:end="115:53"><name pos:start="113:13" pos:end="113:20"><name pos:start="113:13" pos:end="113:13">c</name><operator pos:start="113:14" pos:end="113:15">-&gt;</operator><name pos:start="113:16" pos:end="113:20">flags</name></name> <operator pos:start="113:22" pos:end="113:22">=</operator> <name pos:start="113:24" pos:end="113:51">KVM_CPUID_FLAG_STATEFUL_FUNC</name> <operator pos:start="113:53" pos:end="113:53">|</operator>

                       <name pos:start="115:24" pos:end="115:53">KVM_CPUID_FLAG_STATE_READ_NEXT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:73"><expr pos:start="117:13" pos:end="117:72"><call pos:start="117:13" pos:end="117:72"><name pos:start="117:13" pos:end="117:25">cpu_x86_cpuid</name><argument_list pos:start="117:26" pos:end="117:72">(<argument pos:start="117:27" pos:end="117:29"><expr pos:start="117:27" pos:end="117:29"><name pos:start="117:27" pos:end="117:29">env</name></expr></argument>, <argument pos:start="117:32" pos:end="117:32"><expr pos:start="117:32" pos:end="117:32"><name pos:start="117:32" pos:end="117:32">i</name></expr></argument>, <argument pos:start="117:35" pos:end="117:35"><expr pos:start="117:35" pos:end="117:35"><literal type="number" pos:start="117:35" pos:end="117:35">0</literal></expr></argument>, <argument pos:start="117:38" pos:end="117:44"><expr pos:start="117:38" pos:end="117:44"><operator pos:start="117:38" pos:end="117:38">&amp;</operator><name pos:start="117:39" pos:end="117:44"><name pos:start="117:39" pos:end="117:39">c</name><operator pos:start="117:40" pos:end="117:41">-&gt;</operator><name pos:start="117:42" pos:end="117:44">eax</name></name></expr></argument>, <argument pos:start="117:47" pos:end="117:53"><expr pos:start="117:47" pos:end="117:53"><operator pos:start="117:47" pos:end="117:47">&amp;</operator><name pos:start="117:48" pos:end="117:53"><name pos:start="117:48" pos:end="117:48">c</name><operator pos:start="117:49" pos:end="117:50">-&gt;</operator><name pos:start="117:51" pos:end="117:53">ebx</name></name></expr></argument>, <argument pos:start="117:56" pos:end="117:62"><expr pos:start="117:56" pos:end="117:62"><operator pos:start="117:56" pos:end="117:56">&amp;</operator><name pos:start="117:57" pos:end="117:62"><name pos:start="117:57" pos:end="117:57">c</name><operator pos:start="117:58" pos:end="117:59">-&gt;</operator><name pos:start="117:60" pos:end="117:62">ecx</name></name></expr></argument>, <argument pos:start="117:65" pos:end="117:71"><expr pos:start="117:65" pos:end="117:71"><operator pos:start="117:65" pos:end="117:65">&amp;</operator><name pos:start="117:66" pos:end="117:71"><name pos:start="117:66" pos:end="117:66">c</name><operator pos:start="117:67" pos:end="117:68">-&gt;</operator><name pos:start="117:69" pos:end="117:71">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:34"><expr pos:start="119:13" pos:end="119:33"><name pos:start="119:13" pos:end="119:17">times</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <name pos:start="119:21" pos:end="119:26"><name pos:start="119:21" pos:end="119:21">c</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:26">eax</name></name> <operator pos:start="119:28" pos:end="119:28">&amp;</operator> <literal type="number" pos:start="119:30" pos:end="119:33">0xff</literal></expr>;</expr_stmt>



            <for pos:start="123:13" pos:end="133:13">for <control pos:start="123:17" pos:end="123:39">(<init pos:start="123:18" pos:end="123:23"><expr pos:start="123:18" pos:end="123:22"><name pos:start="123:18" pos:end="123:18">j</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <literal type="number" pos:start="123:22" pos:end="123:22">1</literal></expr>;</init> <condition pos:start="123:25" pos:end="123:34"><expr pos:start="123:25" pos:end="123:33"><name pos:start="123:25" pos:end="123:25">j</name> <operator pos:start="123:27" pos:end="123:27">&lt;</operator> <name pos:start="123:29" pos:end="123:33">times</name></expr>;</condition> <incr pos:start="123:36" pos:end="123:38"><expr pos:start="123:36" pos:end="123:38"><operator pos:start="123:36" pos:end="123:37">++</operator><name pos:start="123:38" pos:end="123:38">j</name></expr></incr>)</control> <block pos:start="123:41" pos:end="133:13">{<block_content pos:start="125:17" pos:end="131:77">

                <expr_stmt pos:start="125:17" pos:end="125:51"><expr pos:start="125:17" pos:end="125:50"><name pos:start="125:17" pos:end="125:17">c</name> <operator pos:start="125:19" pos:end="125:19">=</operator> <operator pos:start="125:21" pos:end="125:21">&amp;</operator><name pos:start="125:22" pos:end="125:50"><name pos:start="125:22" pos:end="125:31">cpuid_data</name><operator pos:start="125:32" pos:end="125:32">.</operator><name pos:start="125:33" pos:end="125:39">entries</name><index pos:start="125:40" pos:end="125:50">[<expr pos:start="125:41" pos:end="125:49"><name pos:start="125:41" pos:end="125:47">cpuid_i</name><operator pos:start="125:48" pos:end="125:49">++</operator></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:32"><expr pos:start="127:17" pos:end="127:31"><name pos:start="127:17" pos:end="127:27"><name pos:start="127:17" pos:end="127:17">c</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:27">function</name></name> <operator pos:start="127:29" pos:end="127:29">=</operator> <name pos:start="127:31" pos:end="127:31">i</name></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:56"><expr pos:start="129:17" pos:end="129:55"><name pos:start="129:17" pos:end="129:24"><name pos:start="129:17" pos:end="129:17">c</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:24">flags</name></name> <operator pos:start="129:26" pos:end="129:26">=</operator> <name pos:start="129:28" pos:end="129:55">KVM_CPUID_FLAG_STATEFUL_FUNC</name></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:77"><expr pos:start="131:17" pos:end="131:76"><call pos:start="131:17" pos:end="131:76"><name pos:start="131:17" pos:end="131:29">cpu_x86_cpuid</name><argument_list pos:start="131:30" pos:end="131:76">(<argument pos:start="131:31" pos:end="131:33"><expr pos:start="131:31" pos:end="131:33"><name pos:start="131:31" pos:end="131:33">env</name></expr></argument>, <argument pos:start="131:36" pos:end="131:36"><expr pos:start="131:36" pos:end="131:36"><name pos:start="131:36" pos:end="131:36">i</name></expr></argument>, <argument pos:start="131:39" pos:end="131:39"><expr pos:start="131:39" pos:end="131:39"><literal type="number" pos:start="131:39" pos:end="131:39">0</literal></expr></argument>, <argument pos:start="131:42" pos:end="131:48"><expr pos:start="131:42" pos:end="131:48"><operator pos:start="131:42" pos:end="131:42">&amp;</operator><name pos:start="131:43" pos:end="131:48"><name pos:start="131:43" pos:end="131:43">c</name><operator pos:start="131:44" pos:end="131:45">-&gt;</operator><name pos:start="131:46" pos:end="131:48">eax</name></name></expr></argument>, <argument pos:start="131:51" pos:end="131:57"><expr pos:start="131:51" pos:end="131:57"><operator pos:start="131:51" pos:end="131:51">&amp;</operator><name pos:start="131:52" pos:end="131:57"><name pos:start="131:52" pos:end="131:52">c</name><operator pos:start="131:53" pos:end="131:54">-&gt;</operator><name pos:start="131:55" pos:end="131:57">ebx</name></name></expr></argument>, <argument pos:start="131:60" pos:end="131:66"><expr pos:start="131:60" pos:end="131:66"><operator pos:start="131:60" pos:end="131:60">&amp;</operator><name pos:start="131:61" pos:end="131:66"><name pos:start="131:61" pos:end="131:61">c</name><operator pos:start="131:62" pos:end="131:63">-&gt;</operator><name pos:start="131:64" pos:end="131:66">ecx</name></name></expr></argument>, <argument pos:start="131:69" pos:end="131:75"><expr pos:start="131:69" pos:end="131:75"><operator pos:start="131:69" pos:end="131:69">&amp;</operator><name pos:start="131:70" pos:end="131:75"><name pos:start="131:70" pos:end="131:70">c</name><operator pos:start="131:71" pos:end="131:72">-&gt;</operator><name pos:start="131:73" pos:end="131:75">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="135:13" pos:end="135:18">break;</break>

        </block_content>}</block>

        <case pos:start="139:9" pos:end="139:15">case <expr pos:start="139:14" pos:end="139:14"><literal type="number" pos:start="139:14" pos:end="139:14">4</literal></expr>:</case>

        <case pos:start="141:9" pos:end="141:17">case <expr pos:start="141:14" pos:end="141:16"><literal type="number" pos:start="141:14" pos:end="141:16">0xb</literal></expr>:</case>

        <case pos:start="143:9" pos:end="143:17">case <expr pos:start="143:14" pos:end="143:16"><literal type="number" pos:start="143:14" pos:end="143:16">0xd</literal></expr>:</case>

            <for pos:start="145:13" pos:end="177:13">for <control pos:start="145:17" pos:end="145:30">(<init pos:start="145:18" pos:end="145:23"><expr pos:start="145:18" pos:end="145:22"><name pos:start="145:18" pos:end="145:18">j</name> <operator pos:start="145:20" pos:end="145:20">=</operator> <literal type="number" pos:start="145:22" pos:end="145:22">0</literal></expr>;</init> <condition pos:start="145:25" pos:end="145:25">;</condition> <incr pos:start="145:27" pos:end="145:29"><expr pos:start="145:27" pos:end="145:29"><name pos:start="145:27" pos:end="145:27">j</name><operator pos:start="145:28" pos:end="145:29">++</operator></expr></incr>)</control> <block pos:start="145:32" pos:end="177:13">{<block_content pos:start="147:17" pos:end="175:51">

                <expr_stmt pos:start="147:17" pos:end="147:32"><expr pos:start="147:17" pos:end="147:31"><name pos:start="147:17" pos:end="147:27"><name pos:start="147:17" pos:end="147:17">c</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:27">function</name></name> <operator pos:start="147:29" pos:end="147:29">=</operator> <name pos:start="147:31" pos:end="147:31">i</name></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:59"><expr pos:start="149:17" pos:end="149:58"><name pos:start="149:17" pos:end="149:24"><name pos:start="149:17" pos:end="149:17">c</name><operator pos:start="149:18" pos:end="149:19">-&gt;</operator><name pos:start="149:20" pos:end="149:24">flags</name></name> <operator pos:start="149:26" pos:end="149:26">=</operator> <name pos:start="149:28" pos:end="149:58">KVM_CPUID_FLAG_SIGNIFCANT_INDEX</name></expr>;</expr_stmt>

                <expr_stmt pos:start="151:17" pos:end="151:29"><expr pos:start="151:17" pos:end="151:28"><name pos:start="151:17" pos:end="151:24"><name pos:start="151:17" pos:end="151:17">c</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:24">index</name></name> <operator pos:start="151:26" pos:end="151:26">=</operator> <name pos:start="151:28" pos:end="151:28">j</name></expr>;</expr_stmt>

                <expr_stmt pos:start="153:17" pos:end="153:77"><expr pos:start="153:17" pos:end="153:76"><call pos:start="153:17" pos:end="153:76"><name pos:start="153:17" pos:end="153:29">cpu_x86_cpuid</name><argument_list pos:start="153:30" pos:end="153:76">(<argument pos:start="153:31" pos:end="153:33"><expr pos:start="153:31" pos:end="153:33"><name pos:start="153:31" pos:end="153:33">env</name></expr></argument>, <argument pos:start="153:36" pos:end="153:36"><expr pos:start="153:36" pos:end="153:36"><name pos:start="153:36" pos:end="153:36">i</name></expr></argument>, <argument pos:start="153:39" pos:end="153:39"><expr pos:start="153:39" pos:end="153:39"><name pos:start="153:39" pos:end="153:39">j</name></expr></argument>, <argument pos:start="153:42" pos:end="153:48"><expr pos:start="153:42" pos:end="153:48"><operator pos:start="153:42" pos:end="153:42">&amp;</operator><name pos:start="153:43" pos:end="153:48"><name pos:start="153:43" pos:end="153:43">c</name><operator pos:start="153:44" pos:end="153:45">-&gt;</operator><name pos:start="153:46" pos:end="153:48">eax</name></name></expr></argument>, <argument pos:start="153:51" pos:end="153:57"><expr pos:start="153:51" pos:end="153:57"><operator pos:start="153:51" pos:end="153:51">&amp;</operator><name pos:start="153:52" pos:end="153:57"><name pos:start="153:52" pos:end="153:52">c</name><operator pos:start="153:53" pos:end="153:54">-&gt;</operator><name pos:start="153:55" pos:end="153:57">ebx</name></name></expr></argument>, <argument pos:start="153:60" pos:end="153:66"><expr pos:start="153:60" pos:end="153:66"><operator pos:start="153:60" pos:end="153:60">&amp;</operator><name pos:start="153:61" pos:end="153:66"><name pos:start="153:61" pos:end="153:61">c</name><operator pos:start="153:62" pos:end="153:63">-&gt;</operator><name pos:start="153:64" pos:end="153:66">ecx</name></name></expr></argument>, <argument pos:start="153:69" pos:end="153:75"><expr pos:start="153:69" pos:end="153:75"><operator pos:start="153:69" pos:end="153:69">&amp;</operator><name pos:start="153:70" pos:end="153:75"><name pos:start="153:70" pos:end="153:70">c</name><operator pos:start="153:71" pos:end="153:72">-&gt;</operator><name pos:start="153:73" pos:end="153:75">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="157:17" pos:end="161:17"><if pos:start="157:17" pos:end="161:17">if <condition pos:start="157:20" pos:end="157:42">(<expr pos:start="157:21" pos:end="157:41"><name pos:start="157:21" pos:end="157:21">i</name> <operator pos:start="157:23" pos:end="157:24">==</operator> <literal type="number" pos:start="157:26" pos:end="157:26">4</literal> <operator pos:start="157:28" pos:end="157:29">&amp;&amp;</operator> <name pos:start="157:31" pos:end="157:36"><name pos:start="157:31" pos:end="157:31">c</name><operator pos:start="157:32" pos:end="157:33">-&gt;</operator><name pos:start="157:34" pos:end="157:36">eax</name></name> <operator pos:start="157:38" pos:end="157:39">==</operator> <literal type="number" pos:start="157:41" pos:end="157:41">0</literal></expr>)</condition> <block pos:start="157:44" pos:end="161:17">{<block_content pos:start="159:21" pos:end="159:26">

                    <break pos:start="159:21" pos:end="159:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="163:17" pos:end="167:17"><if pos:start="163:17" pos:end="167:17">if <condition pos:start="163:20" pos:end="163:51">(<expr pos:start="163:21" pos:end="163:50"><name pos:start="163:21" pos:end="163:21">i</name> <operator pos:start="163:23" pos:end="163:24">==</operator> <literal type="number" pos:start="163:26" pos:end="163:28">0xb</literal> <operator pos:start="163:30" pos:end="163:31">&amp;&amp;</operator> <operator pos:start="163:33" pos:end="163:33">!</operator><operator pos:start="163:34" pos:end="163:34">(</operator><name pos:start="163:35" pos:end="163:40"><name pos:start="163:35" pos:end="163:35">c</name><operator pos:start="163:36" pos:end="163:37">-&gt;</operator><name pos:start="163:38" pos:end="163:40">ecx</name></name> <operator pos:start="163:42" pos:end="163:42">&amp;</operator> <literal type="number" pos:start="163:44" pos:end="163:49">0xff00</literal><operator pos:start="163:50" pos:end="163:50">)</operator></expr>)</condition> <block pos:start="163:53" pos:end="167:17">{<block_content pos:start="165:21" pos:end="165:26">

                    <break pos:start="165:21" pos:end="165:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="169:17" pos:end="173:17"><if pos:start="169:17" pos:end="173:17">if <condition pos:start="169:20" pos:end="169:44">(<expr pos:start="169:21" pos:end="169:43"><name pos:start="169:21" pos:end="169:21">i</name> <operator pos:start="169:23" pos:end="169:24">==</operator> <literal type="number" pos:start="169:26" pos:end="169:28">0xd</literal> <operator pos:start="169:30" pos:end="169:31">&amp;&amp;</operator> <name pos:start="169:33" pos:end="169:38"><name pos:start="169:33" pos:end="169:33">c</name><operator pos:start="169:34" pos:end="169:35">-&gt;</operator><name pos:start="169:36" pos:end="169:38">eax</name></name> <operator pos:start="169:40" pos:end="169:41">==</operator> <literal type="number" pos:start="169:43" pos:end="169:43">0</literal></expr>)</condition> <block pos:start="169:46" pos:end="173:17">{<block_content pos:start="171:21" pos:end="171:26">

                    <break pos:start="171:21" pos:end="171:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="175:17" pos:end="175:51"><expr pos:start="175:17" pos:end="175:50"><name pos:start="175:17" pos:end="175:17">c</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <operator pos:start="175:21" pos:end="175:21">&amp;</operator><name pos:start="175:22" pos:end="175:50"><name pos:start="175:22" pos:end="175:31">cpuid_data</name><operator pos:start="175:32" pos:end="175:32">.</operator><name pos:start="175:33" pos:end="175:39">entries</name><index pos:start="175:40" pos:end="175:50">[<expr pos:start="175:41" pos:end="175:49"><name pos:start="175:41" pos:end="175:47">cpuid_i</name><operator pos:start="175:48" pos:end="175:49">++</operator></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="179:13" pos:end="179:18">break;</break>

        <default pos:start="181:9" pos:end="181:16">default:</default>

            <expr_stmt pos:start="183:13" pos:end="183:28"><expr pos:start="183:13" pos:end="183:27"><name pos:start="183:13" pos:end="183:23"><name pos:start="183:13" pos:end="183:13">c</name><operator pos:start="183:14" pos:end="183:15">-&gt;</operator><name pos:start="183:16" pos:end="183:23">function</name></name> <operator pos:start="183:25" pos:end="183:25">=</operator> <name pos:start="183:27" pos:end="183:27">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:25"><expr pos:start="185:13" pos:end="185:24"><name pos:start="185:13" pos:end="185:20"><name pos:start="185:13" pos:end="185:13">c</name><operator pos:start="185:14" pos:end="185:15">-&gt;</operator><name pos:start="185:16" pos:end="185:20">flags</name></name> <operator pos:start="185:22" pos:end="185:22">=</operator> <literal type="number" pos:start="185:24" pos:end="185:24">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:73"><expr pos:start="187:13" pos:end="187:72"><call pos:start="187:13" pos:end="187:72"><name pos:start="187:13" pos:end="187:25">cpu_x86_cpuid</name><argument_list pos:start="187:26" pos:end="187:72">(<argument pos:start="187:27" pos:end="187:29"><expr pos:start="187:27" pos:end="187:29"><name pos:start="187:27" pos:end="187:29">env</name></expr></argument>, <argument pos:start="187:32" pos:end="187:32"><expr pos:start="187:32" pos:end="187:32"><name pos:start="187:32" pos:end="187:32">i</name></expr></argument>, <argument pos:start="187:35" pos:end="187:35"><expr pos:start="187:35" pos:end="187:35"><literal type="number" pos:start="187:35" pos:end="187:35">0</literal></expr></argument>, <argument pos:start="187:38" pos:end="187:44"><expr pos:start="187:38" pos:end="187:44"><operator pos:start="187:38" pos:end="187:38">&amp;</operator><name pos:start="187:39" pos:end="187:44"><name pos:start="187:39" pos:end="187:39">c</name><operator pos:start="187:40" pos:end="187:41">-&gt;</operator><name pos:start="187:42" pos:end="187:44">eax</name></name></expr></argument>, <argument pos:start="187:47" pos:end="187:53"><expr pos:start="187:47" pos:end="187:53"><operator pos:start="187:47" pos:end="187:47">&amp;</operator><name pos:start="187:48" pos:end="187:53"><name pos:start="187:48" pos:end="187:48">c</name><operator pos:start="187:49" pos:end="187:50">-&gt;</operator><name pos:start="187:51" pos:end="187:53">ebx</name></name></expr></argument>, <argument pos:start="187:56" pos:end="187:62"><expr pos:start="187:56" pos:end="187:62"><operator pos:start="187:56" pos:end="187:56">&amp;</operator><name pos:start="187:57" pos:end="187:62"><name pos:start="187:57" pos:end="187:57">c</name><operator pos:start="187:58" pos:end="187:59">-&gt;</operator><name pos:start="187:60" pos:end="187:62">ecx</name></name></expr></argument>, <argument pos:start="187:65" pos:end="187:71"><expr pos:start="187:65" pos:end="187:71"><operator pos:start="187:65" pos:end="187:65">&amp;</operator><name pos:start="187:66" pos:end="187:71"><name pos:start="187:66" pos:end="187:66">c</name><operator pos:start="187:67" pos:end="187:68">-&gt;</operator><name pos:start="187:69" pos:end="187:71">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="189:13" pos:end="189:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <expr_stmt pos:start="195:5" pos:end="195:73"><expr pos:start="195:5" pos:end="195:72"><call pos:start="195:5" pos:end="195:72"><name pos:start="195:5" pos:end="195:17">cpu_x86_cpuid</name><argument_list pos:start="195:18" pos:end="195:72">(<argument pos:start="195:19" pos:end="195:21"><expr pos:start="195:19" pos:end="195:21"><name pos:start="195:19" pos:end="195:21">env</name></expr></argument>, <argument pos:start="195:24" pos:end="195:33"><expr pos:start="195:24" pos:end="195:33"><literal type="number" pos:start="195:24" pos:end="195:33">0x80000000</literal></expr></argument>, <argument pos:start="195:36" pos:end="195:36"><expr pos:start="195:36" pos:end="195:36"><literal type="number" pos:start="195:36" pos:end="195:36">0</literal></expr></argument>, <argument pos:start="195:39" pos:end="195:44"><expr pos:start="195:39" pos:end="195:44"><operator pos:start="195:39" pos:end="195:39">&amp;</operator><name pos:start="195:40" pos:end="195:44">limit</name></expr></argument>, <argument pos:start="195:47" pos:end="195:53"><expr pos:start="195:47" pos:end="195:53"><operator pos:start="195:47" pos:end="195:47">&amp;</operator><name pos:start="195:48" pos:end="195:53">unused</name></expr></argument>, <argument pos:start="195:56" pos:end="195:62"><expr pos:start="195:56" pos:end="195:62"><operator pos:start="195:56" pos:end="195:56">&amp;</operator><name pos:start="195:57" pos:end="195:62">unused</name></expr></argument>, <argument pos:start="195:65" pos:end="195:71"><expr pos:start="195:65" pos:end="195:71"><operator pos:start="195:65" pos:end="195:65">&amp;</operator><name pos:start="195:66" pos:end="195:71">unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="199:5" pos:end="211:5">for <control pos:start="199:9" pos:end="199:41">(<init pos:start="199:10" pos:end="199:24"><expr pos:start="199:10" pos:end="199:23"><name pos:start="199:10" pos:end="199:10">i</name> <operator pos:start="199:12" pos:end="199:12">=</operator> <literal type="number" pos:start="199:14" pos:end="199:23">0x80000000</literal></expr>;</init> <condition pos:start="199:26" pos:end="199:36"><expr pos:start="199:26" pos:end="199:35"><name pos:start="199:26" pos:end="199:26">i</name> <operator pos:start="199:28" pos:end="199:29">&lt;=</operator> <name pos:start="199:31" pos:end="199:35">limit</name></expr>;</condition> <incr pos:start="199:38" pos:end="199:40"><expr pos:start="199:38" pos:end="199:40"><name pos:start="199:38" pos:end="199:38">i</name><operator pos:start="199:39" pos:end="199:40">++</operator></expr></incr>)</control> <block pos:start="199:43" pos:end="211:5">{<block_content pos:start="201:9" pos:end="209:69">

        <expr_stmt pos:start="201:9" pos:end="201:43"><expr pos:start="201:9" pos:end="201:42"><name pos:start="201:9" pos:end="201:9">c</name> <operator pos:start="201:11" pos:end="201:11">=</operator> <operator pos:start="201:13" pos:end="201:13">&amp;</operator><name pos:start="201:14" pos:end="201:42"><name pos:start="201:14" pos:end="201:23">cpuid_data</name><operator pos:start="201:24" pos:end="201:24">.</operator><name pos:start="201:25" pos:end="201:31">entries</name><index pos:start="201:32" pos:end="201:42">[<expr pos:start="201:33" pos:end="201:41"><name pos:start="201:33" pos:end="201:39">cpuid_i</name><operator pos:start="201:40" pos:end="201:41">++</operator></expr>]</index></name></expr>;</expr_stmt>



        <expr_stmt pos:start="205:9" pos:end="205:24"><expr pos:start="205:9" pos:end="205:23"><name pos:start="205:9" pos:end="205:19"><name pos:start="205:9" pos:end="205:9">c</name><operator pos:start="205:10" pos:end="205:11">-&gt;</operator><name pos:start="205:12" pos:end="205:19">function</name></name> <operator pos:start="205:21" pos:end="205:21">=</operator> <name pos:start="205:23" pos:end="205:23">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:21"><expr pos:start="207:9" pos:end="207:20"><name pos:start="207:9" pos:end="207:16"><name pos:start="207:9" pos:end="207:9">c</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:16">flags</name></name> <operator pos:start="207:18" pos:end="207:18">=</operator> <literal type="number" pos:start="207:20" pos:end="207:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:69"><expr pos:start="209:9" pos:end="209:68"><call pos:start="209:9" pos:end="209:68"><name pos:start="209:9" pos:end="209:21">cpu_x86_cpuid</name><argument_list pos:start="209:22" pos:end="209:68">(<argument pos:start="209:23" pos:end="209:25"><expr pos:start="209:23" pos:end="209:25"><name pos:start="209:23" pos:end="209:25">env</name></expr></argument>, <argument pos:start="209:28" pos:end="209:28"><expr pos:start="209:28" pos:end="209:28"><name pos:start="209:28" pos:end="209:28">i</name></expr></argument>, <argument pos:start="209:31" pos:end="209:31"><expr pos:start="209:31" pos:end="209:31"><literal type="number" pos:start="209:31" pos:end="209:31">0</literal></expr></argument>, <argument pos:start="209:34" pos:end="209:40"><expr pos:start="209:34" pos:end="209:40"><operator pos:start="209:34" pos:end="209:34">&amp;</operator><name pos:start="209:35" pos:end="209:40"><name pos:start="209:35" pos:end="209:35">c</name><operator pos:start="209:36" pos:end="209:37">-&gt;</operator><name pos:start="209:38" pos:end="209:40">eax</name></name></expr></argument>, <argument pos:start="209:43" pos:end="209:49"><expr pos:start="209:43" pos:end="209:49"><operator pos:start="209:43" pos:end="209:43">&amp;</operator><name pos:start="209:44" pos:end="209:49"><name pos:start="209:44" pos:end="209:44">c</name><operator pos:start="209:45" pos:end="209:46">-&gt;</operator><name pos:start="209:47" pos:end="209:49">ebx</name></name></expr></argument>, <argument pos:start="209:52" pos:end="209:58"><expr pos:start="209:52" pos:end="209:58"><operator pos:start="209:52" pos:end="209:52">&amp;</operator><name pos:start="209:53" pos:end="209:58"><name pos:start="209:53" pos:end="209:53">c</name><operator pos:start="209:54" pos:end="209:55">-&gt;</operator><name pos:start="209:56" pos:end="209:58">ecx</name></name></expr></argument>, <argument pos:start="209:61" pos:end="209:67"><expr pos:start="209:61" pos:end="209:67"><operator pos:start="209:61" pos:end="209:61">&amp;</operator><name pos:start="209:62" pos:end="209:67"><name pos:start="209:62" pos:end="209:62">c</name><operator pos:start="209:63" pos:end="209:64">-&gt;</operator><name pos:start="209:65" pos:end="209:67">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="215:5" pos:end="215:63">/* Call Centaur's CPUID instructions they are supported. */</comment>

    <if_stmt pos:start="217:5" pos:end="241:5"><if pos:start="217:5" pos:end="241:5">if <condition pos:start="217:8" pos:end="217:31">(<expr pos:start="217:9" pos:end="217:30"><name pos:start="217:9" pos:end="217:26"><name pos:start="217:9" pos:end="217:11">env</name><operator pos:start="217:12" pos:end="217:13">-&gt;</operator><name pos:start="217:14" pos:end="217:26">cpuid_xlevel2</name></name> <operator pos:start="217:28" pos:end="217:28">&gt;</operator> <literal type="number" pos:start="217:30" pos:end="217:30">0</literal></expr>)</condition> <block pos:start="217:33" pos:end="241:5">{<block_content pos:start="219:9" pos:end="239:9">

        <expr_stmt pos:start="219:9" pos:end="221:68"><expr pos:start="219:9" pos:end="221:67"><name pos:start="219:9" pos:end="219:32"><name pos:start="219:9" pos:end="219:11">env</name><operator pos:start="219:12" pos:end="219:13">-&gt;</operator><name pos:start="219:14" pos:end="219:32">cpuid_ext4_features</name></name> <operator pos:start="219:34" pos:end="219:35">&amp;=</operator>

            <call pos:start="221:13" pos:end="221:67"><name pos:start="221:13" pos:end="221:40">kvm_arch_get_supported_cpuid</name><argument_list pos:start="221:41" pos:end="221:67">(<argument pos:start="221:42" pos:end="221:44"><expr pos:start="221:42" pos:end="221:44"><name pos:start="221:42" pos:end="221:44">env</name></expr></argument>, <argument pos:start="221:47" pos:end="221:56"><expr pos:start="221:47" pos:end="221:56"><literal type="number" pos:start="221:47" pos:end="221:56">0xC0000001</literal></expr></argument>, <argument pos:start="221:59" pos:end="221:59"><expr pos:start="221:59" pos:end="221:59"><literal type="number" pos:start="221:59" pos:end="221:59">0</literal></expr></argument>, <argument pos:start="221:62" pos:end="221:66"><expr pos:start="221:62" pos:end="221:66"><name pos:start="221:62" pos:end="221:66">R_EDX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:77"><expr pos:start="223:9" pos:end="223:76"><call pos:start="223:9" pos:end="223:76"><name pos:start="223:9" pos:end="223:21">cpu_x86_cpuid</name><argument_list pos:start="223:22" pos:end="223:76">(<argument pos:start="223:23" pos:end="223:25"><expr pos:start="223:23" pos:end="223:25"><name pos:start="223:23" pos:end="223:25">env</name></expr></argument>, <argument pos:start="223:28" pos:end="223:37"><expr pos:start="223:28" pos:end="223:37"><literal type="number" pos:start="223:28" pos:end="223:37">0xC0000000</literal></expr></argument>, <argument pos:start="223:40" pos:end="223:40"><expr pos:start="223:40" pos:end="223:40"><literal type="number" pos:start="223:40" pos:end="223:40">0</literal></expr></argument>, <argument pos:start="223:43" pos:end="223:48"><expr pos:start="223:43" pos:end="223:48"><operator pos:start="223:43" pos:end="223:43">&amp;</operator><name pos:start="223:44" pos:end="223:48">limit</name></expr></argument>, <argument pos:start="223:51" pos:end="223:57"><expr pos:start="223:51" pos:end="223:57"><operator pos:start="223:51" pos:end="223:51">&amp;</operator><name pos:start="223:52" pos:end="223:57">unused</name></expr></argument>, <argument pos:start="223:60" pos:end="223:66"><expr pos:start="223:60" pos:end="223:66"><operator pos:start="223:60" pos:end="223:60">&amp;</operator><name pos:start="223:61" pos:end="223:66">unused</name></expr></argument>, <argument pos:start="223:69" pos:end="223:75"><expr pos:start="223:69" pos:end="223:75"><operator pos:start="223:69" pos:end="223:69">&amp;</operator><name pos:start="223:70" pos:end="223:75">unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="227:9" pos:end="239:9">for <control pos:start="227:13" pos:end="227:45">(<init pos:start="227:14" pos:end="227:28"><expr pos:start="227:14" pos:end="227:27"><name pos:start="227:14" pos:end="227:14">i</name> <operator pos:start="227:16" pos:end="227:16">=</operator> <literal type="number" pos:start="227:18" pos:end="227:27">0xC0000000</literal></expr>;</init> <condition pos:start="227:30" pos:end="227:40"><expr pos:start="227:30" pos:end="227:39"><name pos:start="227:30" pos:end="227:30">i</name> <operator pos:start="227:32" pos:end="227:33">&lt;=</operator> <name pos:start="227:35" pos:end="227:39">limit</name></expr>;</condition> <incr pos:start="227:42" pos:end="227:44"><expr pos:start="227:42" pos:end="227:44"><name pos:start="227:42" pos:end="227:42">i</name><operator pos:start="227:43" pos:end="227:44">++</operator></expr></incr>)</control> <block pos:start="227:47" pos:end="239:9">{<block_content pos:start="229:13" pos:end="237:73">

            <expr_stmt pos:start="229:13" pos:end="229:47"><expr pos:start="229:13" pos:end="229:46"><name pos:start="229:13" pos:end="229:13">c</name> <operator pos:start="229:15" pos:end="229:15">=</operator> <operator pos:start="229:17" pos:end="229:17">&amp;</operator><name pos:start="229:18" pos:end="229:46"><name pos:start="229:18" pos:end="229:27">cpuid_data</name><operator pos:start="229:28" pos:end="229:28">.</operator><name pos:start="229:29" pos:end="229:35">entries</name><index pos:start="229:36" pos:end="229:46">[<expr pos:start="229:37" pos:end="229:45"><name pos:start="229:37" pos:end="229:43">cpuid_i</name><operator pos:start="229:44" pos:end="229:45">++</operator></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="233:13" pos:end="233:28"><expr pos:start="233:13" pos:end="233:27"><name pos:start="233:13" pos:end="233:23"><name pos:start="233:13" pos:end="233:13">c</name><operator pos:start="233:14" pos:end="233:15">-&gt;</operator><name pos:start="233:16" pos:end="233:23">function</name></name> <operator pos:start="233:25" pos:end="233:25">=</operator> <name pos:start="233:27" pos:end="233:27">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:25"><expr pos:start="235:13" pos:end="235:24"><name pos:start="235:13" pos:end="235:20"><name pos:start="235:13" pos:end="235:13">c</name><operator pos:start="235:14" pos:end="235:15">-&gt;</operator><name pos:start="235:16" pos:end="235:20">flags</name></name> <operator pos:start="235:22" pos:end="235:22">=</operator> <literal type="number" pos:start="235:24" pos:end="235:24">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:73"><expr pos:start="237:13" pos:end="237:72"><call pos:start="237:13" pos:end="237:72"><name pos:start="237:13" pos:end="237:25">cpu_x86_cpuid</name><argument_list pos:start="237:26" pos:end="237:72">(<argument pos:start="237:27" pos:end="237:29"><expr pos:start="237:27" pos:end="237:29"><name pos:start="237:27" pos:end="237:29">env</name></expr></argument>, <argument pos:start="237:32" pos:end="237:32"><expr pos:start="237:32" pos:end="237:32"><name pos:start="237:32" pos:end="237:32">i</name></expr></argument>, <argument pos:start="237:35" pos:end="237:35"><expr pos:start="237:35" pos:end="237:35"><literal type="number" pos:start="237:35" pos:end="237:35">0</literal></expr></argument>, <argument pos:start="237:38" pos:end="237:44"><expr pos:start="237:38" pos:end="237:44"><operator pos:start="237:38" pos:end="237:38">&amp;</operator><name pos:start="237:39" pos:end="237:44"><name pos:start="237:39" pos:end="237:39">c</name><operator pos:start="237:40" pos:end="237:41">-&gt;</operator><name pos:start="237:42" pos:end="237:44">eax</name></name></expr></argument>, <argument pos:start="237:47" pos:end="237:53"><expr pos:start="237:47" pos:end="237:53"><operator pos:start="237:47" pos:end="237:47">&amp;</operator><name pos:start="237:48" pos:end="237:53"><name pos:start="237:48" pos:end="237:48">c</name><operator pos:start="237:49" pos:end="237:50">-&gt;</operator><name pos:start="237:51" pos:end="237:53">ebx</name></name></expr></argument>, <argument pos:start="237:56" pos:end="237:62"><expr pos:start="237:56" pos:end="237:62"><operator pos:start="237:56" pos:end="237:56">&amp;</operator><name pos:start="237:57" pos:end="237:62"><name pos:start="237:57" pos:end="237:57">c</name><operator pos:start="237:58" pos:end="237:59">-&gt;</operator><name pos:start="237:60" pos:end="237:62">ecx</name></name></expr></argument>, <argument pos:start="237:65" pos:end="237:71"><expr pos:start="237:65" pos:end="237:71"><operator pos:start="237:65" pos:end="237:65">&amp;</operator><name pos:start="237:66" pos:end="237:71"><name pos:start="237:66" pos:end="237:66">c</name><operator pos:start="237:67" pos:end="237:68">-&gt;</operator><name pos:start="237:69" pos:end="237:71">edx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="245:5" pos:end="245:36"><expr pos:start="245:5" pos:end="245:35"><name pos:start="245:5" pos:end="245:25"><name pos:start="245:5" pos:end="245:14">cpuid_data</name><operator pos:start="245:15" pos:end="245:15">.</operator><name pos:start="245:16" pos:end="245:20">cpuid</name><operator pos:start="245:21" pos:end="245:21">.</operator><name pos:start="245:22" pos:end="245:25">nent</name></name> <operator pos:start="245:27" pos:end="245:27">=</operator> <name pos:start="245:29" pos:end="245:35">cpuid_i</name></expr>;</expr_stmt>



    <if_stmt pos:start="249:5" pos:end="299:5"><if pos:start="249:5" pos:end="299:5">if <condition pos:start="249:8" pos:end="253:64">(<expr pos:start="249:9" pos:end="253:63"><operator pos:start="249:9" pos:end="249:9">(</operator><operator pos:start="249:10" pos:end="249:10">(</operator><name pos:start="249:11" pos:end="249:28"><name pos:start="249:11" pos:end="249:13">env</name><operator pos:start="249:14" pos:end="249:15">-&gt;</operator><name pos:start="249:16" pos:end="249:28">cpuid_version</name></name> <operator pos:start="249:30" pos:end="249:31">&gt;&gt;</operator> <literal type="number" pos:start="249:33" pos:end="249:33">8</literal><operator pos:start="249:34" pos:end="249:34">)</operator><operator pos:start="249:35" pos:end="249:35">&amp;</operator><literal type="number" pos:start="249:36" pos:end="249:38">0xF</literal><operator pos:start="249:39" pos:end="249:39">)</operator> <operator pos:start="249:41" pos:end="249:42">&gt;=</operator> <literal type="number" pos:start="249:44" pos:end="249:44">6</literal>

        <operator pos:start="251:9" pos:end="251:10">&amp;&amp;</operator> <operator pos:start="251:12" pos:end="251:12">(</operator><name pos:start="251:13" pos:end="251:31"><name pos:start="251:13" pos:end="251:15">env</name><operator pos:start="251:16" pos:end="251:17">-&gt;</operator><name pos:start="251:18" pos:end="251:31">cpuid_features</name></name><operator pos:start="251:32" pos:end="251:32">&amp;</operator><operator pos:start="251:33" pos:end="251:33">(</operator><name pos:start="251:34" pos:end="251:42">CPUID_MCE</name><operator pos:start="251:43" pos:end="251:43">|</operator><name pos:start="251:44" pos:end="251:52">CPUID_MCA</name><operator pos:start="251:53" pos:end="251:53">)</operator><operator pos:start="251:54" pos:end="251:54">)</operator> <operator pos:start="251:56" pos:end="251:57">==</operator> <operator pos:start="251:59" pos:end="251:59">(</operator><name pos:start="251:60" pos:end="251:68">CPUID_MCE</name><operator pos:start="251:69" pos:end="251:69">|</operator><name pos:start="251:70" pos:end="251:78">CPUID_MCA</name><operator pos:start="251:79" pos:end="251:79">)</operator>

        <operator pos:start="253:9" pos:end="253:10">&amp;&amp;</operator> <call pos:start="253:12" pos:end="253:59"><name pos:start="253:12" pos:end="253:30">kvm_check_extension</name><argument_list pos:start="253:31" pos:end="253:59">(<argument pos:start="253:32" pos:end="253:45"><expr pos:start="253:32" pos:end="253:45"><name pos:start="253:32" pos:end="253:45"><name pos:start="253:32" pos:end="253:34">env</name><operator pos:start="253:35" pos:end="253:36">-&gt;</operator><name pos:start="253:37" pos:end="253:45">kvm_state</name></name></expr></argument>, <argument pos:start="253:48" pos:end="253:58"><expr pos:start="253:48" pos:end="253:58"><name pos:start="253:48" pos:end="253:58">KVM_CAP_MCE</name></expr></argument>)</argument_list></call> <operator pos:start="253:61" pos:end="253:61">&gt;</operator> <literal type="number" pos:start="253:63" pos:end="253:63">0</literal></expr>)</condition> <block pos:start="253:66" pos:end="299:5">{<block_content pos:start="255:9" pos:end="297:31">

        <decl_stmt pos:start="255:9" pos:end="255:25"><decl pos:start="255:9" pos:end="255:24"><type pos:start="255:9" pos:end="255:16"><name pos:start="255:9" pos:end="255:16">uint64_t</name></type> <name pos:start="255:18" pos:end="255:24">mcg_cap</name></decl>;</decl_stmt>

        <decl_stmt pos:start="257:9" pos:end="257:18"><decl pos:start="257:9" pos:end="257:17"><type pos:start="257:9" pos:end="257:11"><name pos:start="257:9" pos:end="257:11">int</name></type> <name pos:start="257:13" pos:end="257:17">banks</name></decl>;</decl_stmt>

        <decl_stmt pos:start="259:9" pos:end="259:16"><decl pos:start="259:9" pos:end="259:15"><type pos:start="259:9" pos:end="259:11"><name pos:start="259:9" pos:end="259:11">int</name></type> <name pos:start="259:13" pos:end="259:15">ret</name></decl>;</decl_stmt>



        <expr_stmt pos:start="263:9" pos:end="263:74"><expr pos:start="263:9" pos:end="263:73"><name pos:start="263:9" pos:end="263:11">ret</name> <operator pos:start="263:13" pos:end="263:13">=</operator> <call pos:start="263:15" pos:end="263:73"><name pos:start="263:15" pos:end="263:39">kvm_get_mce_cap_supported</name><argument_list pos:start="263:40" pos:end="263:73">(<argument pos:start="263:41" pos:end="263:54"><expr pos:start="263:41" pos:end="263:54"><name pos:start="263:41" pos:end="263:54"><name pos:start="263:41" pos:end="263:43">env</name><operator pos:start="263:44" pos:end="263:45">-&gt;</operator><name pos:start="263:46" pos:end="263:54">kvm_state</name></name></expr></argument>, <argument pos:start="263:57" pos:end="263:64"><expr pos:start="263:57" pos:end="263:64"><operator pos:start="263:57" pos:end="263:57">&amp;</operator><name pos:start="263:58" pos:end="263:64">mcg_cap</name></expr></argument>, <argument pos:start="263:67" pos:end="263:72"><expr pos:start="263:67" pos:end="263:72"><operator pos:start="263:67" pos:end="263:67">&amp;</operator><name pos:start="263:68" pos:end="263:72">banks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="265:9" pos:end="271:9"><if pos:start="265:9" pos:end="271:9">if <condition pos:start="265:12" pos:end="265:20">(<expr pos:start="265:13" pos:end="265:19"><name pos:start="265:13" pos:end="265:15">ret</name> <operator pos:start="265:17" pos:end="265:17">&lt;</operator> <literal type="number" pos:start="265:19" pos:end="265:19">0</literal></expr>)</condition> <block pos:start="265:22" pos:end="271:9">{<block_content pos:start="267:13" pos:end="269:23">

            <expr_stmt pos:start="267:13" pos:end="267:77"><expr pos:start="267:13" pos:end="267:76"><call pos:start="267:13" pos:end="267:76"><name pos:start="267:13" pos:end="267:19">fprintf</name><argument_list pos:start="267:20" pos:end="267:76">(<argument pos:start="267:21" pos:end="267:26"><expr pos:start="267:21" pos:end="267:26"><name pos:start="267:21" pos:end="267:26">stderr</name></expr></argument>, <argument pos:start="267:29" pos:end="267:59"><expr pos:start="267:29" pos:end="267:59"><literal type="string" pos:start="267:29" pos:end="267:59">"kvm_get_mce_cap_supported: %s"</literal></expr></argument>, <argument pos:start="267:62" pos:end="267:75"><expr pos:start="267:62" pos:end="267:75"><call pos:start="267:62" pos:end="267:75"><name pos:start="267:62" pos:end="267:69">strerror</name><argument_list pos:start="267:70" pos:end="267:75">(<argument pos:start="267:71" pos:end="267:74"><expr pos:start="267:71" pos:end="267:74"><operator pos:start="267:71" pos:end="267:71">-</operator><name pos:start="267:72" pos:end="267:74">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="269:13" pos:end="269:23">return <expr pos:start="269:20" pos:end="269:22"><name pos:start="269:20" pos:end="269:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="275:9" pos:end="279:9"><if pos:start="275:9" pos:end="279:9">if <condition pos:start="275:12" pos:end="275:34">(<expr pos:start="275:13" pos:end="275:33"><name pos:start="275:13" pos:end="275:17">banks</name> <operator pos:start="275:19" pos:end="275:19">&gt;</operator> <name pos:start="275:21" pos:end="275:33">MCE_BANKS_DEF</name></expr>)</condition> <block pos:start="275:36" pos:end="279:9">{<block_content pos:start="277:13" pos:end="277:34">

            <expr_stmt pos:start="277:13" pos:end="277:34"><expr pos:start="277:13" pos:end="277:33"><name pos:start="277:13" pos:end="277:17">banks</name> <operator pos:start="277:19" pos:end="277:19">=</operator> <name pos:start="277:21" pos:end="277:33">MCE_BANKS_DEF</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:31"><expr pos:start="281:9" pos:end="281:30"><name pos:start="281:9" pos:end="281:15">mcg_cap</name> <operator pos:start="281:17" pos:end="281:18">&amp;=</operator> <name pos:start="281:20" pos:end="281:30">MCE_CAP_DEF</name></expr>;</expr_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:25"><expr pos:start="283:9" pos:end="283:24"><name pos:start="283:9" pos:end="283:15">mcg_cap</name> <operator pos:start="283:17" pos:end="283:18">|=</operator> <name pos:start="283:20" pos:end="283:24">banks</name></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:63"><expr pos:start="285:9" pos:end="285:62"><name pos:start="285:9" pos:end="285:11">ret</name> <operator pos:start="285:13" pos:end="285:13">=</operator> <call pos:start="285:15" pos:end="285:62"><name pos:start="285:15" pos:end="285:28">kvm_vcpu_ioctl</name><argument_list pos:start="285:29" pos:end="285:62">(<argument pos:start="285:30" pos:end="285:32"><expr pos:start="285:30" pos:end="285:32"><name pos:start="285:30" pos:end="285:32">env</name></expr></argument>, <argument pos:start="285:35" pos:end="285:51"><expr pos:start="285:35" pos:end="285:51"><name pos:start="285:35" pos:end="285:51">KVM_X86_SETUP_MCE</name></expr></argument>, <argument pos:start="285:54" pos:end="285:61"><expr pos:start="285:54" pos:end="285:61"><operator pos:start="285:54" pos:end="285:54">&amp;</operator><name pos:start="285:55" pos:end="285:61">mcg_cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="287:9" pos:end="293:9"><if pos:start="287:9" pos:end="293:9">if <condition pos:start="287:12" pos:end="287:20">(<expr pos:start="287:13" pos:end="287:19"><name pos:start="287:13" pos:end="287:15">ret</name> <operator pos:start="287:17" pos:end="287:17">&lt;</operator> <literal type="number" pos:start="287:19" pos:end="287:19">0</literal></expr>)</condition> <block pos:start="287:22" pos:end="293:9">{<block_content pos:start="289:13" pos:end="291:23">

            <expr_stmt pos:start="289:13" pos:end="289:69"><expr pos:start="289:13" pos:end="289:68"><call pos:start="289:13" pos:end="289:68"><name pos:start="289:13" pos:end="289:19">fprintf</name><argument_list pos:start="289:20" pos:end="289:68">(<argument pos:start="289:21" pos:end="289:26"><expr pos:start="289:21" pos:end="289:26"><name pos:start="289:21" pos:end="289:26">stderr</name></expr></argument>, <argument pos:start="289:29" pos:end="289:51"><expr pos:start="289:29" pos:end="289:51"><literal type="string" pos:start="289:29" pos:end="289:51">"KVM_X86_SETUP_MCE: %s"</literal></expr></argument>, <argument pos:start="289:54" pos:end="289:67"><expr pos:start="289:54" pos:end="289:67"><call pos:start="289:54" pos:end="289:67"><name pos:start="289:54" pos:end="289:61">strerror</name><argument_list pos:start="289:62" pos:end="289:67">(<argument pos:start="289:63" pos:end="289:66"><expr pos:start="289:63" pos:end="289:66"><operator pos:start="289:63" pos:end="289:63">-</operator><name pos:start="289:64" pos:end="289:66">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="291:13" pos:end="291:23">return <expr pos:start="291:20" pos:end="291:22"><name pos:start="291:20" pos:end="291:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="297:9" pos:end="297:31"><expr pos:start="297:9" pos:end="297:30"><name pos:start="297:9" pos:end="297:20"><name pos:start="297:9" pos:end="297:11">env</name><operator pos:start="297:12" pos:end="297:13">-&gt;</operator><name pos:start="297:14" pos:end="297:20">mcg_cap</name></name> <operator pos:start="297:22" pos:end="297:22">=</operator> <name pos:start="297:24" pos:end="297:30">mcg_cap</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="303:5" pos:end="303:60"><expr pos:start="303:5" pos:end="303:59"><call pos:start="303:5" pos:end="303:59"><name pos:start="303:5" pos:end="303:36">qemu_add_vm_change_state_handler</name><argument_list pos:start="303:37" pos:end="303:59">(<argument pos:start="303:38" pos:end="303:53"><expr pos:start="303:38" pos:end="303:53"><name pos:start="303:38" pos:end="303:53">cpu_update_state</name></expr></argument>, <argument pos:start="303:56" pos:end="303:58"><expr pos:start="303:56" pos:end="303:58"><name pos:start="303:56" pos:end="303:58">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="307:5" pos:end="307:60">return <expr pos:start="307:12" pos:end="307:59"><call pos:start="307:12" pos:end="307:59"><name pos:start="307:12" pos:end="307:25">kvm_vcpu_ioctl</name><argument_list pos:start="307:26" pos:end="307:59">(<argument pos:start="307:27" pos:end="307:29"><expr pos:start="307:27" pos:end="307:29"><name pos:start="307:27" pos:end="307:29">env</name></expr></argument>, <argument pos:start="307:32" pos:end="307:45"><expr pos:start="307:32" pos:end="307:45"><name pos:start="307:32" pos:end="307:45">KVM_SET_CPUID2</name></expr></argument>, <argument pos:start="307:48" pos:end="307:58"><expr pos:start="307:48" pos:end="307:58"><operator pos:start="307:48" pos:end="307:48">&amp;</operator><name pos:start="307:49" pos:end="307:58">cpuid_data</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
