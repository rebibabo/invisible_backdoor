<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25707.c" pos:tabs="8"><function pos:start="1:1" pos:end="295:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">do_v7m_exception_exit</name><parameter_list pos:start="1:34" pos:end="1:46">(<parameter pos:start="1:35" pos:end="1:45"><decl pos:start="1:35" pos:end="1:45"><type pos:start="1:35" pos:end="1:42"><name pos:start="1:35" pos:end="1:40">ARMCPU</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="295:1">{<block_content pos:start="5:5" pos:end="293:67">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">CPUARMState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">env</name> <init pos:start="5:22" pos:end="5:32">= <expr pos:start="5:24" pos:end="5:32"><operator pos:start="5:24" pos:end="5:24">&amp;</operator><name pos:start="5:25" pos:end="5:32"><name pos:start="5:25" pos:end="5:27">cpu</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">xpsr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:15">ufault</name> <init pos:start="11:17" pos:end="11:23">= <expr pos:start="11:19" pos:end="11:23"><name pos:start="11:19" pos:end="11:23">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:29">return_to_sp_process</name> <init pos:start="13:31" pos:end="13:37">= <expr pos:start="13:33" pos:end="13:37"><name pos:start="13:33" pos:end="13:37">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:34"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:26">return_to_handler</name> <init pos:start="15:28" pos:end="15:34">= <expr pos:start="15:30" pos:end="15:34"><name pos:start="15:30" pos:end="15:34">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:18">rettobase</name> <init pos:start="17:20" pos:end="17:26">= <expr pos:start="17:22" pos:end="17:26"><name pos:start="17:22" pos:end="17:26">false</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="29:7">/* We can only get here from an EXCP_EXCEPTION_EXIT, and

     * gen_bx_excret() enforces the architectural rule

     * that jumps to magic addresses don't have magic behaviour unless

     * we're in Handler mode (compare pseudocode BXWritePC()).

     */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:41"><expr pos:start="31:5" pos:end="31:40"><call pos:start="31:5" pos:end="31:40"><name pos:start="31:5" pos:end="31:10">assert</name><argument_list pos:start="31:11" pos:end="31:40">(<argument pos:start="31:12" pos:end="31:39"><expr pos:start="31:12" pos:end="31:39"><call pos:start="31:12" pos:end="31:39"><name pos:start="31:12" pos:end="31:34">arm_v7m_is_handler_mode</name><argument_list pos:start="31:35" pos:end="31:39">(<argument pos:start="31:36" pos:end="31:38"><expr pos:start="31:36" pos:end="31:38"><name pos:start="31:36" pos:end="31:38">env</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="47:7">/* In the spec pseudocode ExceptionReturn() is called directly

     * from BXWritePC() and gets the full target PC value including

     * bit zero. In QEMU's implementation we treat it as a normal

     * jump-to-register (which is then caught later on), and so split

     * the target value up between env-&gt;regs[15] and env-&gt;thumb in

     * gen_bx(). Reconstitute it.

     */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:25"><expr pos:start="49:5" pos:end="49:24"><name pos:start="49:5" pos:end="49:8">type</name> <operator pos:start="49:10" pos:end="49:10">=</operator> <name pos:start="49:12" pos:end="49:24"><name pos:start="49:12" pos:end="49:14">env</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:20">regs</name><index pos:start="49:21" pos:end="49:24">[<expr pos:start="49:22" pos:end="49:23"><literal type="number" pos:start="49:22" pos:end="49:23">15</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:19">(<expr pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:11">env</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:18">thumb</name></name></expr>)</condition> <block pos:start="51:21" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:18">

        <expr_stmt pos:start="53:9" pos:end="53:18"><expr pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:12">type</name> <operator pos:start="53:14" pos:end="53:15">|=</operator> <literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="63:44"><expr pos:start="59:5" pos:end="63:43"><call pos:start="59:5" pos:end="63:43"><name pos:start="59:5" pos:end="59:17">qemu_log_mask</name><argument_list pos:start="59:18" pos:end="63:43">(<argument pos:start="59:19" pos:end="59:29"><expr pos:start="59:19" pos:end="59:29"><name pos:start="59:19" pos:end="59:29">CPU_LOG_INT</name></expr></argument>, <argument pos:start="59:32" pos:end="61:44"><expr pos:start="59:32" pos:end="61:44"><literal type="string" pos:start="59:32" pos:end="59:61">"Exception return: magic PC %"</literal> <name pos:start="59:63" pos:end="59:68">PRIx32</name>

                  <literal type="string" pos:start="61:19" pos:end="61:44">" previous exception %d\n"</literal></expr></argument>,

                  <argument pos:start="63:19" pos:end="63:22"><expr pos:start="63:19" pos:end="63:22"><name pos:start="63:19" pos:end="63:22">type</name></expr></argument>, <argument pos:start="63:25" pos:end="63:42"><expr pos:start="63:25" pos:end="63:42"><name pos:start="63:25" pos:end="63:42"><name pos:start="63:25" pos:end="63:27">env</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:32">v7m</name><operator pos:start="63:33" pos:end="63:33">.</operator><name pos:start="63:34" pos:end="63:42">exception</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:55">(<expr pos:start="67:9" pos:end="67:54"><call pos:start="67:9" pos:end="67:30"><name pos:start="67:9" pos:end="67:17">extract32</name><argument_list pos:start="67:18" pos:end="67:30">(<argument pos:start="67:19" pos:end="67:22"><expr pos:start="67:19" pos:end="67:22"><name pos:start="67:19" pos:end="67:22">type</name></expr></argument>, <argument pos:start="67:25" pos:end="67:25"><expr pos:start="67:25" pos:end="67:25"><literal type="number" pos:start="67:25" pos:end="67:25">5</literal></expr></argument>, <argument pos:start="67:28" pos:end="67:29"><expr pos:start="67:28" pos:end="67:29"><literal type="number" pos:start="67:28" pos:end="67:29">23</literal></expr></argument>)</argument_list></call> <operator pos:start="67:32" pos:end="67:33">!=</operator> <call pos:start="67:35" pos:end="67:54"><name pos:start="67:35" pos:end="67:43">extract32</name><argument_list pos:start="67:44" pos:end="67:54">(<argument pos:start="67:45" pos:end="67:46"><expr pos:start="67:45" pos:end="67:46"><operator pos:start="67:45" pos:end="67:45">-</operator><literal type="number" pos:start="67:46" pos:end="67:46">1</literal></expr></argument>, <argument pos:start="67:49" pos:end="67:49"><expr pos:start="67:49" pos:end="67:49"><literal type="number" pos:start="67:49" pos:end="67:49">5</literal></expr></argument>, <argument pos:start="67:52" pos:end="67:53"><expr pos:start="67:52" pos:end="67:53"><literal type="number" pos:start="67:52" pos:end="67:53">23</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:57" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:79">

        <expr_stmt pos:start="69:9" pos:end="71:79"><expr pos:start="69:9" pos:end="71:78"><call pos:start="69:9" pos:end="71:78"><name pos:start="69:9" pos:end="69:21">qemu_log_mask</name><argument_list pos:start="69:22" pos:end="71:78">(<argument pos:start="69:23" pos:end="69:37"><expr pos:start="69:23" pos:end="69:37"><name pos:start="69:23" pos:end="69:37">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="69:40" pos:end="71:71"><expr pos:start="69:40" pos:end="71:71"><literal type="string" pos:start="69:40" pos:end="69:80">"M profile: zero high bits in exception "</literal>

                      <literal type="string" pos:start="71:23" pos:end="71:41">"exit PC value 0x%"</literal> <name pos:start="71:43" pos:end="71:48">PRIx32</name> <literal type="string" pos:start="71:50" pos:end="71:71">" are UNPREDICTABLE\n"</literal></expr></argument>, <argument pos:start="71:74" pos:end="71:77"><expr pos:start="71:74" pos:end="71:77"><name pos:start="71:74" pos:end="71:77">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="107:5"><if pos:start="77:5" pos:end="107:5">if <condition pos:start="77:8" pos:end="77:46">(<expr pos:start="77:9" pos:end="77:45"><name pos:start="77:9" pos:end="77:26"><name pos:start="77:9" pos:end="77:11">env</name><operator pos:start="77:12" pos:end="77:13">-&gt;</operator><name pos:start="77:14" pos:end="77:16">v7m</name><operator pos:start="77:17" pos:end="77:17">.</operator><name pos:start="77:18" pos:end="77:26">exception</name></name> <operator pos:start="77:28" pos:end="77:29">!=</operator> <name pos:start="77:31" pos:end="77:45">ARMV7M_EXCP_NMI</name></expr>)</condition> <block pos:start="77:48" pos:end="107:5">{<block_content pos:start="91:9" pos:end="105:9">

        <comment type="block" pos:start="79:9" pos:end="89:11">/* Auto-clear FAULTMASK on return from other than NMI.

         * If the security extension is implemented then this only

         * happens if the raw execution priority is &gt;= 0; the

         * value of the ES bit in the exception return value indicates

         * which security state's faultmask to clear. (v8M ARM ARM R_KBNF.)

         */</comment>

        <if_stmt pos:start="91:9" pos:end="105:9"><if pos:start="91:9" pos:end="101:9">if <condition pos:start="91:12" pos:end="91:53">(<expr pos:start="91:13" pos:end="91:52"><call pos:start="91:13" pos:end="91:52"><name pos:start="91:13" pos:end="91:23">arm_feature</name><argument_list pos:start="91:24" pos:end="91:52">(<argument pos:start="91:25" pos:end="91:27"><expr pos:start="91:25" pos:end="91:27"><name pos:start="91:25" pos:end="91:27">env</name></expr></argument>, <argument pos:start="91:30" pos:end="91:51"><expr pos:start="91:30" pos:end="91:51"><name pos:start="91:30" pos:end="91:51">ARM_FEATURE_M_SECURITY</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:55" pos:end="101:9">{<block_content pos:start="93:13" pos:end="99:13">

            <decl_stmt pos:start="93:13" pos:end="93:30"><decl pos:start="93:13" pos:end="93:29"><type pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">int</name></type> <name pos:start="93:17" pos:end="93:18">es</name> <init pos:start="93:20" pos:end="93:29">= <expr pos:start="93:22" pos:end="93:29"><name pos:start="93:22" pos:end="93:25">type</name> <operator pos:start="93:27" pos:end="93:27">&amp;</operator> <literal type="number" pos:start="93:29" pos:end="93:29">1</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="95:13" pos:end="99:13"><if pos:start="95:13" pos:end="99:13">if <condition pos:start="95:16" pos:end="95:67">(<expr pos:start="95:17" pos:end="95:66"><call pos:start="95:17" pos:end="95:61"><name pos:start="95:17" pos:end="95:50">armv7m_nvic_raw_execution_priority</name><argument_list pos:start="95:51" pos:end="95:61">(<argument pos:start="95:52" pos:end="95:60"><expr pos:start="95:52" pos:end="95:60"><name pos:start="95:52" pos:end="95:60"><name pos:start="95:52" pos:end="95:54">env</name><operator pos:start="95:55" pos:end="95:56">-&gt;</operator><name pos:start="95:57" pos:end="95:60">nvic</name></name></expr></argument>)</argument_list></call> <operator pos:start="95:63" pos:end="95:64">&gt;=</operator> <literal type="number" pos:start="95:66" pos:end="95:66">0</literal></expr>)</condition> <block pos:start="95:69" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:43">

                <expr_stmt pos:start="97:17" pos:end="97:43"><expr pos:start="97:17" pos:end="97:42"><name pos:start="97:17" pos:end="97:38"><name pos:start="97:17" pos:end="97:19">env</name><operator pos:start="97:20" pos:end="97:21">-&gt;</operator><name pos:start="97:22" pos:end="97:24">v7m</name><operator pos:start="97:25" pos:end="97:25">.</operator><name pos:start="97:26" pos:end="97:34">faultmask</name><index pos:start="97:35" pos:end="97:38">[<expr pos:start="97:36" pos:end="97:37"><name pos:start="97:36" pos:end="97:37">es</name></expr>]</index></name> <operator pos:start="97:40" pos:end="97:40">=</operator> <literal type="number" pos:start="97:42" pos:end="97:42">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="101:11" pos:end="105:9">else <block pos:start="101:16" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:45">

            <expr_stmt pos:start="103:13" pos:end="103:45"><expr pos:start="103:13" pos:end="103:44"><name pos:start="103:13" pos:end="103:40"><name pos:start="103:13" pos:end="103:15">env</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:20">v7m</name><operator pos:start="103:21" pos:end="103:21">.</operator><name pos:start="103:22" pos:end="103:30">faultmask</name><index pos:start="103:31" pos:end="103:40">[<expr pos:start="103:32" pos:end="103:39"><name pos:start="103:32" pos:end="103:39">M_REG_NS</name></expr>]</index></name> <operator pos:start="103:42" pos:end="103:42">=</operator> <literal type="number" pos:start="103:44" pos:end="103:44">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="111:5" pos:end="145:5">switch <condition pos:start="111:12" pos:end="111:68">(<expr pos:start="111:13" pos:end="111:67"><call pos:start="111:13" pos:end="111:67"><name pos:start="111:13" pos:end="111:36">armv7m_nvic_complete_irq</name><argument_list pos:start="111:37" pos:end="111:67">(<argument pos:start="111:38" pos:end="111:46"><expr pos:start="111:38" pos:end="111:46"><name pos:start="111:38" pos:end="111:46"><name pos:start="111:38" pos:end="111:40">env</name><operator pos:start="111:41" pos:end="111:42">-&gt;</operator><name pos:start="111:43" pos:end="111:46">nvic</name></name></expr></argument>, <argument pos:start="111:49" pos:end="111:66"><expr pos:start="111:49" pos:end="111:66"><name pos:start="111:49" pos:end="111:66"><name pos:start="111:49" pos:end="111:51">env</name><operator pos:start="111:52" pos:end="111:53">-&gt;</operator><name pos:start="111:54" pos:end="111:56">v7m</name><operator pos:start="111:57" pos:end="111:57">.</operator><name pos:start="111:58" pos:end="111:66">exception</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:70" pos:end="145:5">{<block_content pos:start="113:5" pos:end="143:31">

    <case pos:start="113:5" pos:end="113:12">case <expr pos:start="113:10" pos:end="113:11"><operator pos:start="113:10" pos:end="113:10">-</operator><literal type="number" pos:start="113:11" pos:end="113:11">1</literal></expr>:</case>

        <comment type="block" pos:start="115:9" pos:end="115:60">/* attempt to exit an exception that isn't active */</comment>

        <expr_stmt pos:start="117:9" pos:end="117:22"><expr pos:start="117:9" pos:end="117:21"><name pos:start="117:9" pos:end="117:14">ufault</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <name pos:start="117:18" pos:end="117:21">true</name></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:11">case <expr pos:start="121:10" pos:end="121:10"><literal type="number" pos:start="121:10" pos:end="121:10">0</literal></expr>:</case>

        <comment type="block" pos:start="123:9" pos:end="123:37">/* still an irq active now */</comment>

        <break pos:start="125:9" pos:end="125:14">break;</break>

    <case pos:start="127:5" pos:end="127:11">case <expr pos:start="127:10" pos:end="127:10"><literal type="number" pos:start="127:10" pos:end="127:10">1</literal></expr>:</case>

        <comment type="block" pos:start="129:9" pos:end="135:11">/* we returned to base exception level, no nesting.

         * (In the pseudocode this is written using "NestedActivation != 1"

         * where we have 'rettobase == false'.)

         */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:25"><expr pos:start="137:9" pos:end="137:24"><name pos:start="137:9" pos:end="137:17">rettobase</name> <operator pos:start="137:19" pos:end="137:19">=</operator> <name pos:start="137:21" pos:end="137:24">true</name></expr>;</expr_stmt>

        <break pos:start="139:9" pos:end="139:14">break;</break>

    <default pos:start="141:5" pos:end="141:12">default:</default>

        <expr_stmt pos:start="143:9" pos:end="143:31"><expr pos:start="143:9" pos:end="143:30"><call pos:start="143:9" pos:end="143:30"><name pos:start="143:9" pos:end="143:28">g_assert_not_reached</name><argument_list pos:start="143:29" pos:end="143:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <switch pos:start="149:5" pos:end="179:5">switch <condition pos:start="149:12" pos:end="149:23">(<expr pos:start="149:13" pos:end="149:22"><name pos:start="149:13" pos:end="149:16">type</name> <operator pos:start="149:18" pos:end="149:18">&amp;</operator> <literal type="number" pos:start="149:20" pos:end="149:22">0xf</literal></expr>)</condition> <block pos:start="149:25" pos:end="179:5">{<block_content pos:start="151:5" pos:end="177:22">

    <case pos:start="151:5" pos:end="151:11">case <expr pos:start="151:10" pos:end="151:10"><literal type="number" pos:start="151:10" pos:end="151:10">1</literal></expr>:</case> <comment type="block" pos:start="151:13" pos:end="151:35">/* Return to Handler */</comment>

        <expr_stmt pos:start="153:9" pos:end="153:33"><expr pos:start="153:9" pos:end="153:32"><name pos:start="153:9" pos:end="153:25">return_to_handler</name> <operator pos:start="153:27" pos:end="153:27">=</operator> <name pos:start="153:29" pos:end="153:32">true</name></expr>;</expr_stmt>

        <break pos:start="155:9" pos:end="155:14">break;</break>

    <case pos:start="157:5" pos:end="157:12">case <expr pos:start="157:10" pos:end="157:11"><literal type="number" pos:start="157:10" pos:end="157:11">13</literal></expr>:</case> <comment type="block" pos:start="157:14" pos:end="157:55">/* Return to Thread using Process stack */</comment>

        <expr_stmt pos:start="159:9" pos:end="159:36"><expr pos:start="159:9" pos:end="159:35"><name pos:start="159:9" pos:end="159:28">return_to_sp_process</name> <operator pos:start="159:30" pos:end="159:30">=</operator> <name pos:start="159:32" pos:end="159:35">true</name></expr>;</expr_stmt>

        <comment type="block" pos:start="161:9" pos:end="161:26">/* fall through */</comment>

    <case pos:start="163:5" pos:end="163:11">case <expr pos:start="163:10" pos:end="163:10"><literal type="number" pos:start="163:10" pos:end="163:10">9</literal></expr>:</case> <comment type="block" pos:start="163:13" pos:end="163:51">/* Return to Thread using Main stack */</comment>

        <if_stmt pos:start="165:9" pos:end="171:9"><if pos:start="165:9" pos:end="171:9">if <condition pos:start="165:12" pos:end="167:77">(<expr pos:start="165:13" pos:end="167:76"><operator pos:start="165:13" pos:end="165:13">!</operator><name pos:start="165:14" pos:end="165:22">rettobase</name> <operator pos:start="165:24" pos:end="165:25">&amp;&amp;</operator>

            <operator pos:start="167:13" pos:end="167:13">!</operator><operator pos:start="167:14" pos:end="167:14">(</operator><name pos:start="167:15" pos:end="167:43"><name pos:start="167:15" pos:end="167:17">env</name><operator pos:start="167:18" pos:end="167:19">-&gt;</operator><name pos:start="167:20" pos:end="167:22">v7m</name><operator pos:start="167:23" pos:end="167:23">.</operator><name pos:start="167:24" pos:end="167:26">ccr</name><index pos:start="167:27" pos:end="167:43">[<expr pos:start="167:28" pos:end="167:42"><name pos:start="167:28" pos:end="167:42"><name pos:start="167:28" pos:end="167:30">env</name><operator pos:start="167:31" pos:end="167:32">-&gt;</operator><name pos:start="167:33" pos:end="167:35">v7m</name><operator pos:start="167:36" pos:end="167:36">.</operator><name pos:start="167:37" pos:end="167:42">secure</name></name></expr>]</index></name> <operator pos:start="167:45" pos:end="167:45">&amp;</operator> <name pos:start="167:47" pos:end="167:75">R_V7M_CCR_NONBASETHRDENA_MASK</name><operator pos:start="167:76" pos:end="167:76">)</operator></expr>)</condition> <block pos:start="167:79" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:26">

            <expr_stmt pos:start="169:13" pos:end="169:26"><expr pos:start="169:13" pos:end="169:25"><name pos:start="169:13" pos:end="169:18">ufault</name> <operator pos:start="169:20" pos:end="169:20">=</operator> <name pos:start="169:22" pos:end="169:25">true</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="173:9" pos:end="173:14">break;</break>

    <default pos:start="175:5" pos:end="175:12">default:</default>

        <expr_stmt pos:start="177:9" pos:end="177:22"><expr pos:start="177:9" pos:end="177:21"><name pos:start="177:9" pos:end="177:14">ufault</name> <operator pos:start="177:16" pos:end="177:16">=</operator> <name pos:start="177:18" pos:end="177:21">true</name></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <if_stmt pos:start="183:5" pos:end="203:5"><if pos:start="183:5" pos:end="203:5">if <condition pos:start="183:8" pos:end="183:15">(<expr pos:start="183:9" pos:end="183:14"><name pos:start="183:9" pos:end="183:14">ufault</name></expr>)</condition> <block pos:start="183:17" pos:end="203:5">{<block_content pos:start="191:9" pos:end="201:15">

        <comment type="block" pos:start="185:9" pos:end="189:11">/* Bad exception return: instead of popping the exception

         * stack, directly take a usage fault on the current stack.

         */</comment>

        <expr_stmt pos:start="191:9" pos:end="191:47"><expr pos:start="191:9" pos:end="191:46"><name pos:start="191:9" pos:end="191:21"><name pos:start="191:9" pos:end="191:11">env</name><operator pos:start="191:12" pos:end="191:13">-&gt;</operator><name pos:start="191:14" pos:end="191:16">v7m</name><operator pos:start="191:17" pos:end="191:17">.</operator><name pos:start="191:18" pos:end="191:21">cfsr</name></name> <operator pos:start="191:23" pos:end="191:24">|=</operator> <name pos:start="191:26" pos:end="191:46">R_V7M_CFSR_INVPC_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:62"><expr pos:start="193:9" pos:end="193:61"><call pos:start="193:9" pos:end="193:61"><name pos:start="193:9" pos:end="193:31">armv7m_nvic_set_pending</name><argument_list pos:start="193:32" pos:end="193:61">(<argument pos:start="193:33" pos:end="193:41"><expr pos:start="193:33" pos:end="193:41"><name pos:start="193:33" pos:end="193:41"><name pos:start="193:33" pos:end="193:35">env</name><operator pos:start="193:36" pos:end="193:37">-&gt;</operator><name pos:start="193:38" pos:end="193:41">nvic</name></name></expr></argument>, <argument pos:start="193:44" pos:end="193:60"><expr pos:start="193:44" pos:end="193:60"><name pos:start="193:44" pos:end="193:60">ARMV7M_EXCP_USAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:52"><expr pos:start="195:9" pos:end="195:51"><call pos:start="195:9" pos:end="195:51"><name pos:start="195:9" pos:end="195:27">v7m_exception_taken</name><argument_list pos:start="195:28" pos:end="195:51">(<argument pos:start="195:29" pos:end="195:31"><expr pos:start="195:29" pos:end="195:31"><name pos:start="195:29" pos:end="195:31">cpu</name></expr></argument>, <argument pos:start="195:34" pos:end="195:50"><expr pos:start="195:34" pos:end="195:50"><name pos:start="195:34" pos:end="195:37">type</name> <operator pos:start="195:39" pos:end="195:39">|</operator> <literal type="number" pos:start="195:41" pos:end="195:50">0xf0000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="199:79"><expr pos:start="197:9" pos:end="199:78"><call pos:start="197:9" pos:end="199:78"><name pos:start="197:9" pos:end="197:21">qemu_log_mask</name><argument_list pos:start="197:22" pos:end="199:78">(<argument pos:start="197:23" pos:end="197:33"><expr pos:start="197:23" pos:end="197:33"><name pos:start="197:23" pos:end="197:33">CPU_LOG_INT</name></expr></argument>, <argument pos:start="197:36" pos:end="199:77"><expr pos:start="197:36" pos:end="199:77"><literal type="string" pos:start="197:36" pos:end="197:70">"...taking UsageFault on existing "</literal>

                      <literal type="string" pos:start="199:23" pos:end="199:77">"stackframe: failed exception return integrity check\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="201:9" pos:end="201:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="207:5" pos:end="207:38">/* Switch to the target stack.  */</comment>

    <expr_stmt pos:start="209:5" pos:end="209:45"><expr pos:start="209:5" pos:end="209:44"><call pos:start="209:5" pos:end="209:44"><name pos:start="209:5" pos:end="209:17">switch_v7m_sp</name><argument_list pos:start="209:18" pos:end="209:44">(<argument pos:start="209:19" pos:end="209:21"><expr pos:start="209:19" pos:end="209:21"><name pos:start="209:19" pos:end="209:21">env</name></expr></argument>, <argument pos:start="209:24" pos:end="209:43"><expr pos:start="209:24" pos:end="209:43"><name pos:start="209:24" pos:end="209:43">return_to_sp_process</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="211:5" pos:end="211:25">/* Pop registers.  */</comment>

    <expr_stmt pos:start="213:5" pos:end="213:32"><expr pos:start="213:5" pos:end="213:31"><name pos:start="213:5" pos:end="213:16"><name pos:start="213:5" pos:end="213:7">env</name><operator pos:start="213:8" pos:end="213:9">-&gt;</operator><name pos:start="213:10" pos:end="213:13">regs</name><index pos:start="213:14" pos:end="213:16">[<expr pos:start="213:15" pos:end="213:15"><literal type="number" pos:start="213:15" pos:end="213:15">0</literal></expr>]</index></name> <operator pos:start="213:18" pos:end="213:18">=</operator> <call pos:start="213:20" pos:end="213:31"><name pos:start="213:20" pos:end="213:26">v7m_pop</name><argument_list pos:start="213:27" pos:end="213:31">(<argument pos:start="213:28" pos:end="213:30"><expr pos:start="213:28" pos:end="213:30"><name pos:start="213:28" pos:end="213:30">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:32"><expr pos:start="215:5" pos:end="215:31"><name pos:start="215:5" pos:end="215:16"><name pos:start="215:5" pos:end="215:7">env</name><operator pos:start="215:8" pos:end="215:9">-&gt;</operator><name pos:start="215:10" pos:end="215:13">regs</name><index pos:start="215:14" pos:end="215:16">[<expr pos:start="215:15" pos:end="215:15"><literal type="number" pos:start="215:15" pos:end="215:15">1</literal></expr>]</index></name> <operator pos:start="215:18" pos:end="215:18">=</operator> <call pos:start="215:20" pos:end="215:31"><name pos:start="215:20" pos:end="215:26">v7m_pop</name><argument_list pos:start="215:27" pos:end="215:31">(<argument pos:start="215:28" pos:end="215:30"><expr pos:start="215:28" pos:end="215:30"><name pos:start="215:28" pos:end="215:30">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:32"><expr pos:start="217:5" pos:end="217:31"><name pos:start="217:5" pos:end="217:16"><name pos:start="217:5" pos:end="217:7">env</name><operator pos:start="217:8" pos:end="217:9">-&gt;</operator><name pos:start="217:10" pos:end="217:13">regs</name><index pos:start="217:14" pos:end="217:16">[<expr pos:start="217:15" pos:end="217:15"><literal type="number" pos:start="217:15" pos:end="217:15">2</literal></expr>]</index></name> <operator pos:start="217:18" pos:end="217:18">=</operator> <call pos:start="217:20" pos:end="217:31"><name pos:start="217:20" pos:end="217:26">v7m_pop</name><argument_list pos:start="217:27" pos:end="217:31">(<argument pos:start="217:28" pos:end="217:30"><expr pos:start="217:28" pos:end="217:30"><name pos:start="217:28" pos:end="217:30">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:32"><expr pos:start="219:5" pos:end="219:31"><name pos:start="219:5" pos:end="219:16"><name pos:start="219:5" pos:end="219:7">env</name><operator pos:start="219:8" pos:end="219:9">-&gt;</operator><name pos:start="219:10" pos:end="219:13">regs</name><index pos:start="219:14" pos:end="219:16">[<expr pos:start="219:15" pos:end="219:15"><literal type="number" pos:start="219:15" pos:end="219:15">3</literal></expr>]</index></name> <operator pos:start="219:18" pos:end="219:18">=</operator> <call pos:start="219:20" pos:end="219:31"><name pos:start="219:20" pos:end="219:26">v7m_pop</name><argument_list pos:start="219:27" pos:end="219:31">(<argument pos:start="219:28" pos:end="219:30"><expr pos:start="219:28" pos:end="219:30"><name pos:start="219:28" pos:end="219:30">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:33"><expr pos:start="221:5" pos:end="221:32"><name pos:start="221:5" pos:end="221:17"><name pos:start="221:5" pos:end="221:7">env</name><operator pos:start="221:8" pos:end="221:9">-&gt;</operator><name pos:start="221:10" pos:end="221:13">regs</name><index pos:start="221:14" pos:end="221:17">[<expr pos:start="221:15" pos:end="221:16"><literal type="number" pos:start="221:15" pos:end="221:16">12</literal></expr>]</index></name> <operator pos:start="221:19" pos:end="221:19">=</operator> <call pos:start="221:21" pos:end="221:32"><name pos:start="221:21" pos:end="221:27">v7m_pop</name><argument_list pos:start="221:28" pos:end="221:32">(<argument pos:start="221:29" pos:end="221:31"><expr pos:start="221:29" pos:end="221:31"><name pos:start="221:29" pos:end="221:31">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:33"><expr pos:start="223:5" pos:end="223:32"><name pos:start="223:5" pos:end="223:17"><name pos:start="223:5" pos:end="223:7">env</name><operator pos:start="223:8" pos:end="223:9">-&gt;</operator><name pos:start="223:10" pos:end="223:13">regs</name><index pos:start="223:14" pos:end="223:17">[<expr pos:start="223:15" pos:end="223:16"><literal type="number" pos:start="223:15" pos:end="223:16">14</literal></expr>]</index></name> <operator pos:start="223:19" pos:end="223:19">=</operator> <call pos:start="223:21" pos:end="223:32"><name pos:start="223:21" pos:end="223:27">v7m_pop</name><argument_list pos:start="223:28" pos:end="223:32">(<argument pos:start="223:29" pos:end="223:31"><expr pos:start="223:29" pos:end="223:31"><name pos:start="223:29" pos:end="223:31">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:33"><expr pos:start="225:5" pos:end="225:32"><name pos:start="225:5" pos:end="225:17"><name pos:start="225:5" pos:end="225:7">env</name><operator pos:start="225:8" pos:end="225:9">-&gt;</operator><name pos:start="225:10" pos:end="225:13">regs</name><index pos:start="225:14" pos:end="225:17">[<expr pos:start="225:15" pos:end="225:16"><literal type="number" pos:start="225:15" pos:end="225:16">15</literal></expr>]</index></name> <operator pos:start="225:19" pos:end="225:19">=</operator> <call pos:start="225:21" pos:end="225:32"><name pos:start="225:21" pos:end="225:27">v7m_pop</name><argument_list pos:start="225:28" pos:end="225:32">(<argument pos:start="225:29" pos:end="225:31"><expr pos:start="225:29" pos:end="225:31"><name pos:start="225:29" pos:end="225:31">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="227:5" pos:end="245:5"><if pos:start="227:5" pos:end="245:5">if <condition pos:start="227:8" pos:end="227:26">(<expr pos:start="227:9" pos:end="227:25"><name pos:start="227:9" pos:end="227:21"><name pos:start="227:9" pos:end="227:11">env</name><operator pos:start="227:12" pos:end="227:13">-&gt;</operator><name pos:start="227:14" pos:end="227:17">regs</name><index pos:start="227:18" pos:end="227:21">[<expr pos:start="227:19" pos:end="227:20"><literal type="number" pos:start="227:19" pos:end="227:20">15</literal></expr>]</index></name> <operator pos:start="227:23" pos:end="227:23">&amp;</operator> <literal type="number" pos:start="227:25" pos:end="227:25">1</literal></expr>)</condition> <block pos:start="227:28" pos:end="245:5">{<block_content pos:start="229:9" pos:end="243:29">

        <expr_stmt pos:start="229:9" pos:end="233:47"><expr pos:start="229:9" pos:end="233:46"><call pos:start="229:9" pos:end="233:46"><name pos:start="229:9" pos:end="229:21">qemu_log_mask</name><argument_list pos:start="229:22" pos:end="233:46">(<argument pos:start="229:23" pos:end="229:37"><expr pos:start="229:23" pos:end="229:37"><name pos:start="229:23" pos:end="229:37">LOG_GUEST_ERROR</name></expr></argument>,

                      <argument pos:start="231:23" pos:end="233:45"><expr pos:start="231:23" pos:end="233:45"><literal type="string" pos:start="231:23" pos:end="231:72">"M profile return from interrupt with misaligned "</literal>

                      <literal type="string" pos:start="233:23" pos:end="233:45">"PC is UNPREDICTABLE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="235:9" pos:end="241:11">/* Actual hardware seems to ignore the lsbit, and there are several

         * RTOSes out there which incorrectly assume the r15 in the stack

         * frame should be a Thumb-style "lsbit indicates ARM/Thumb" value.

         */</comment>

        <expr_stmt pos:start="243:9" pos:end="243:29"><expr pos:start="243:9" pos:end="243:28"><name pos:start="243:9" pos:end="243:21"><name pos:start="243:9" pos:end="243:11">env</name><operator pos:start="243:12" pos:end="243:13">-&gt;</operator><name pos:start="243:14" pos:end="243:17">regs</name><index pos:start="243:18" pos:end="243:21">[<expr pos:start="243:19" pos:end="243:20"><literal type="number" pos:start="243:19" pos:end="243:20">15</literal></expr>]</index></name> <operator pos:start="243:23" pos:end="243:24">&amp;=</operator> <operator pos:start="243:26" pos:end="243:26">~</operator><literal type="number" pos:start="243:27" pos:end="243:28">1U</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:24"><expr pos:start="247:5" pos:end="247:23"><name pos:start="247:5" pos:end="247:8">xpsr</name> <operator pos:start="247:10" pos:end="247:10">=</operator> <call pos:start="247:12" pos:end="247:23"><name pos:start="247:12" pos:end="247:18">v7m_pop</name><argument_list pos:start="247:19" pos:end="247:23">(<argument pos:start="247:20" pos:end="247:22"><expr pos:start="247:20" pos:end="247:22"><name pos:start="247:20" pos:end="247:22">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:43"><expr pos:start="249:5" pos:end="249:42"><call pos:start="249:5" pos:end="249:42"><name pos:start="249:5" pos:end="249:14">xpsr_write</name><argument_list pos:start="249:15" pos:end="249:42">(<argument pos:start="249:16" pos:end="249:18"><expr pos:start="249:16" pos:end="249:18"><name pos:start="249:16" pos:end="249:18">env</name></expr></argument>, <argument pos:start="249:21" pos:end="249:24"><expr pos:start="249:21" pos:end="249:24"><name pos:start="249:21" pos:end="249:24">xpsr</name></expr></argument>, <argument pos:start="249:27" pos:end="249:41"><expr pos:start="249:27" pos:end="249:41"><operator pos:start="249:27" pos:end="249:27">~</operator><name pos:start="249:28" pos:end="249:41">XPSR_SPREALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="251:5" pos:end="251:32">/* Undo stack alignment.  */</comment>

    <if_stmt pos:start="253:5" pos:end="257:5"><if pos:start="253:5" pos:end="257:5">if <condition pos:start="253:8" pos:end="253:30">(<expr pos:start="253:9" pos:end="253:29"><name pos:start="253:9" pos:end="253:12">xpsr</name> <operator pos:start="253:14" pos:end="253:14">&amp;</operator> <name pos:start="253:16" pos:end="253:29">XPSR_SPREALIGN</name></expr>)</condition> <block pos:start="253:32" pos:end="257:5">{<block_content pos:start="255:9" pos:end="255:27">

        <expr_stmt pos:start="255:9" pos:end="255:27"><expr pos:start="255:9" pos:end="255:26"><name pos:start="255:9" pos:end="255:21"><name pos:start="255:9" pos:end="255:11">env</name><operator pos:start="255:12" pos:end="255:13">-&gt;</operator><name pos:start="255:14" pos:end="255:17">regs</name><index pos:start="255:18" pos:end="255:21">[<expr pos:start="255:19" pos:end="255:20"><literal type="number" pos:start="255:19" pos:end="255:20">13</literal></expr>]</index></name> <operator pos:start="255:23" pos:end="255:24">|=</operator> <literal type="number" pos:start="255:26" pos:end="255:26">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="261:5" pos:end="267:7">/* The restored xPSR exception field will be zero if we're

     * resuming in Thread mode. If that doesn't match what the

     * exception return type specified then this is a UsageFault.

     */</comment>

    <if_stmt pos:start="269:5" pos:end="287:5"><if pos:start="269:5" pos:end="287:5">if <condition pos:start="269:8" pos:end="269:58">(<expr pos:start="269:9" pos:end="269:57"><name pos:start="269:9" pos:end="269:25">return_to_handler</name> <operator pos:start="269:27" pos:end="269:28">!=</operator> <call pos:start="269:30" pos:end="269:57"><name pos:start="269:30" pos:end="269:52">arm_v7m_is_handler_mode</name><argument_list pos:start="269:53" pos:end="269:57">(<argument pos:start="269:54" pos:end="269:56"><expr pos:start="269:54" pos:end="269:56"><name pos:start="269:54" pos:end="269:56">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="269:60" pos:end="287:5">{<block_content pos:start="273:9" pos:end="285:15">

        <comment type="block" pos:start="271:9" pos:end="271:66">/* Take an INVPC UsageFault by pushing the stack again. */</comment>

        <expr_stmt pos:start="273:9" pos:end="273:62"><expr pos:start="273:9" pos:end="273:61"><call pos:start="273:9" pos:end="273:61"><name pos:start="273:9" pos:end="273:31">armv7m_nvic_set_pending</name><argument_list pos:start="273:32" pos:end="273:61">(<argument pos:start="273:33" pos:end="273:41"><expr pos:start="273:33" pos:end="273:41"><name pos:start="273:33" pos:end="273:41"><name pos:start="273:33" pos:end="273:35">env</name><operator pos:start="273:36" pos:end="273:37">-&gt;</operator><name pos:start="273:38" pos:end="273:41">nvic</name></name></expr></argument>, <argument pos:start="273:44" pos:end="273:60"><expr pos:start="273:44" pos:end="273:60"><name pos:start="273:44" pos:end="273:60">ARMV7M_EXCP_USAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:47"><expr pos:start="275:9" pos:end="275:46"><name pos:start="275:9" pos:end="275:21"><name pos:start="275:9" pos:end="275:11">env</name><operator pos:start="275:12" pos:end="275:13">-&gt;</operator><name pos:start="275:14" pos:end="275:16">v7m</name><operator pos:start="275:17" pos:end="275:17">.</operator><name pos:start="275:18" pos:end="275:21">cfsr</name></name> <operator pos:start="275:23" pos:end="275:24">|=</operator> <name pos:start="275:26" pos:end="275:46">R_V7M_CFSR_INVPC_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="277:9" pos:end="277:28"><expr pos:start="277:9" pos:end="277:27"><call pos:start="277:9" pos:end="277:27"><name pos:start="277:9" pos:end="277:22">v7m_push_stack</name><argument_list pos:start="277:23" pos:end="277:27">(<argument pos:start="277:24" pos:end="277:26"><expr pos:start="277:24" pos:end="277:26"><name pos:start="277:24" pos:end="277:26">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="279:9" pos:end="279:52"><expr pos:start="279:9" pos:end="279:51"><call pos:start="279:9" pos:end="279:51"><name pos:start="279:9" pos:end="279:27">v7m_exception_taken</name><argument_list pos:start="279:28" pos:end="279:51">(<argument pos:start="279:29" pos:end="279:31"><expr pos:start="279:29" pos:end="279:31"><name pos:start="279:29" pos:end="279:31">cpu</name></expr></argument>, <argument pos:start="279:34" pos:end="279:50"><expr pos:start="279:34" pos:end="279:50"><name pos:start="279:34" pos:end="279:37">type</name> <operator pos:start="279:39" pos:end="279:39">|</operator> <literal type="number" pos:start="279:41" pos:end="279:50">0xf0000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="283:67"><expr pos:start="281:9" pos:end="283:66"><call pos:start="281:9" pos:end="283:66"><name pos:start="281:9" pos:end="281:21">qemu_log_mask</name><argument_list pos:start="281:22" pos:end="283:66">(<argument pos:start="281:23" pos:end="281:33"><expr pos:start="281:23" pos:end="281:33"><name pos:start="281:23" pos:end="281:33">CPU_LOG_INT</name></expr></argument>, <argument pos:start="281:36" pos:end="283:65"><expr pos:start="281:36" pos:end="283:65"><literal type="string" pos:start="281:36" pos:end="281:77">"...taking UsageFault on new stackframe: "</literal>

                      <literal type="string" pos:start="283:23" pos:end="283:65">"failed exception return integrity check\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="285:9" pos:end="285:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="291:5" pos:end="291:57">/* Otherwise, we have a successful exception exit. */</comment>

    <expr_stmt pos:start="293:5" pos:end="293:67"><expr pos:start="293:5" pos:end="293:66"><call pos:start="293:5" pos:end="293:66"><name pos:start="293:5" pos:end="293:17">qemu_log_mask</name><argument_list pos:start="293:18" pos:end="293:66">(<argument pos:start="293:19" pos:end="293:29"><expr pos:start="293:19" pos:end="293:29"><name pos:start="293:19" pos:end="293:29">CPU_LOG_INT</name></expr></argument>, <argument pos:start="293:32" pos:end="293:65"><expr pos:start="293:32" pos:end="293:65"><literal type="string" pos:start="293:32" pos:end="293:65">"...successful exception return\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
