<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9949.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">lsi_command_complete</name><parameter_list pos:start="1:33" pos:end="1:81">(<parameter pos:start="1:34" pos:end="1:49"><decl pos:start="1:34" pos:end="1:49"><type pos:start="1:34" pos:end="1:49"><name pos:start="1:34" pos:end="1:44">SCSIRequest</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">req</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:66"><decl pos:start="1:52" pos:end="1:66"><type pos:start="1:52" pos:end="1:66"><name pos:start="1:52" pos:end="1:59">uint32_t</name></type> <name pos:start="1:61" pos:end="1:66">status</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:80"><decl pos:start="1:69" pos:end="1:80"><type pos:start="1:69" pos:end="1:80"><name pos:start="1:69" pos:end="1:74">size_t</name></type> <name pos:start="1:76" pos:end="1:80">resid</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="45:1">{<block_content pos:start="5:5" pos:end="43:25">

    <decl_stmt pos:start="5:5" pos:end="5:71"><decl pos:start="5:5" pos:end="5:70"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">LSIState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:70">= <expr pos:start="5:19" pos:end="5:70"><call pos:start="5:19" pos:end="5:70"><name pos:start="5:19" pos:end="5:27">DO_UPCAST</name><argument_list pos:start="5:28" pos:end="5:70">(<argument pos:start="5:29" pos:end="5:36"><expr pos:start="5:29" pos:end="5:36"><name pos:start="5:29" pos:end="5:36">LSIState</name></expr></argument>, <argument pos:start="5:39" pos:end="5:46"><expr pos:start="5:39" pos:end="5:46"><name pos:start="5:39" pos:end="5:46"><name pos:start="5:39" pos:end="5:41">dev</name><operator pos:start="5:42" pos:end="5:42">.</operator><name pos:start="5:43" pos:end="5:46">qdev</name></name></expr></argument>, <argument pos:start="5:49" pos:end="5:69"><expr pos:start="5:49" pos:end="5:69"><name pos:start="5:49" pos:end="5:69"><name pos:start="5:49" pos:end="5:51">req</name><operator pos:start="5:52" pos:end="5:53">-&gt;</operator><name pos:start="5:54" pos:end="5:56">bus</name><operator pos:start="5:57" pos:end="5:58">-&gt;</operator><name pos:start="5:59" pos:end="5:62">qbus</name><operator pos:start="5:63" pos:end="5:63">.</operator><name pos:start="5:64" pos:end="5:69">parent</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">out</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:47"><expr pos:start="11:5" pos:end="11:46"><name pos:start="11:5" pos:end="11:7">out</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <operator pos:start="11:11" pos:end="11:11">(</operator><name pos:start="11:12" pos:end="11:20"><name pos:start="11:12" pos:end="11:12">s</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:20">sstat1</name></name> <operator pos:start="11:22" pos:end="11:22">&amp;</operator> <name pos:start="11:24" pos:end="11:33">PHASE_MASK</name><operator pos:start="11:34" pos:end="11:34">)</operator> <operator pos:start="11:36" pos:end="11:37">==</operator> <name pos:start="11:39" pos:end="11:46">PHASE_DO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:57"><expr pos:start="13:5" pos:end="13:56"><call pos:start="13:5" pos:end="13:56"><name pos:start="13:5" pos:end="13:11">DPRINTF</name><argument_list pos:start="13:12" pos:end="13:56">(<argument pos:start="13:13" pos:end="13:42"><expr pos:start="13:13" pos:end="13:42"><literal type="string" pos:start="13:13" pos:end="13:42">"Command complete status=%d\n"</literal></expr></argument>, <argument pos:start="13:45" pos:end="13:55"><expr pos:start="13:45" pos:end="13:55"><operator pos:start="13:45" pos:end="13:45">(</operator><name pos:start="13:46" pos:end="13:48">int</name><operator pos:start="13:49" pos:end="13:49">)</operator><name pos:start="13:50" pos:end="13:55">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:23"><expr pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:13">status</name></name> <operator pos:start="15:15" pos:end="15:15">=</operator> <name pos:start="15:17" pos:end="15:22">status</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:28"><expr pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:23"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:23">command_complete</name></name> <operator pos:start="17:25" pos:end="17:25">=</operator> <literal type="number" pos:start="17:27" pos:end="17:27">2</literal></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="29:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:34">(<expr pos:start="19:9" pos:end="19:33"><name pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:18">waiting</name></name> <operator pos:start="19:20" pos:end="19:21">&amp;&amp;</operator> <name pos:start="19:23" pos:end="19:28"><name pos:start="19:23" pos:end="19:23">s</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:28">dbc</name></name> <operator pos:start="19:30" pos:end="19:31">!=</operator> <literal type="number" pos:start="19:33" pos:end="19:33">0</literal></expr>)</condition> <block pos:start="19:36" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:40">

        <comment type="block" pos:start="21:9" pos:end="21:56">/* Raise phase mismatch for short transfers.  */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:40"><expr pos:start="23:9" pos:end="23:39"><call pos:start="23:9" pos:end="23:39"><name pos:start="23:9" pos:end="23:21">lsi_bad_phase</name><argument_list pos:start="23:22" pos:end="23:39">(<argument pos:start="23:23" pos:end="23:23"><expr pos:start="23:23" pos:end="23:23"><name pos:start="23:23" pos:end="23:23">s</name></expr></argument>, <argument pos:start="23:26" pos:end="23:28"><expr pos:start="23:26" pos:end="23:28"><name pos:start="23:26" pos:end="23:28">out</name></expr></argument>, <argument pos:start="23:31" pos:end="23:38"><expr pos:start="23:31" pos:end="23:38"><name pos:start="23:31" pos:end="23:38">PHASE_ST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="29:5">else <block pos:start="25:12" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:35">

        <expr_stmt pos:start="27:9" pos:end="27:35"><expr pos:start="27:9" pos:end="27:34"><call pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:21">lsi_set_phase</name><argument_list pos:start="27:22" pos:end="27:34">(<argument pos:start="27:23" pos:end="27:23"><expr pos:start="27:23" pos:end="27:23"><name pos:start="27:23" pos:end="27:23">s</name></expr></argument>, <argument pos:start="27:26" pos:end="27:33"><expr pos:start="27:26" pos:end="27:33"><name pos:start="27:26" pos:end="27:33">PHASE_ST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:45">(<expr pos:start="33:9" pos:end="33:44"><name pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:18">current</name></name> <operator pos:start="33:20" pos:end="33:21">&amp;&amp;</operator> <name pos:start="33:23" pos:end="33:25">req</name> <operator pos:start="33:27" pos:end="33:28">==</operator> <name pos:start="33:30" pos:end="33:44"><name pos:start="33:30" pos:end="33:30">s</name><operator pos:start="33:31" pos:end="33:32">-&gt;</operator><name pos:start="33:33" pos:end="33:39">current</name><operator pos:start="33:40" pos:end="33:41">-&gt;</operator><name pos:start="33:42" pos:end="33:44">req</name></name></expr>)</condition> <block pos:start="33:47" pos:end="41:5">{<block_content pos:start="35:9" pos:end="39:28">

        <expr_stmt pos:start="35:9" pos:end="35:32"><expr pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:11">req</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:24">hba_private</name></name> <operator pos:start="35:26" pos:end="35:26">=</operator> <name pos:start="35:28" pos:end="35:31">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:40"><expr pos:start="37:9" pos:end="37:39"><call pos:start="37:9" pos:end="37:39"><name pos:start="37:9" pos:end="37:24">lsi_request_free</name><argument_list pos:start="37:25" pos:end="37:39">(<argument pos:start="37:26" pos:end="37:26"><expr pos:start="37:26" pos:end="37:26"><name pos:start="37:26" pos:end="37:26">s</name></expr></argument>, <argument pos:start="37:29" pos:end="37:38"><expr pos:start="37:29" pos:end="37:38"><name pos:start="37:29" pos:end="37:38"><name pos:start="37:29" pos:end="37:29">s</name><operator pos:start="37:30" pos:end="37:31">-&gt;</operator><name pos:start="37:32" pos:end="37:38">current</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:28"><expr pos:start="39:9" pos:end="39:27"><call pos:start="39:9" pos:end="39:27"><name pos:start="39:9" pos:end="39:22">scsi_req_unref</name><argument_list pos:start="39:23" pos:end="39:27">(<argument pos:start="39:24" pos:end="39:26"><expr pos:start="39:24" pos:end="39:26"><name pos:start="39:24" pos:end="39:26">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:25"><expr pos:start="43:5" pos:end="43:24"><call pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:21">lsi_resume_script</name><argument_list pos:start="43:22" pos:end="43:24">(<argument pos:start="43:23" pos:end="43:23"><expr pos:start="43:23" pos:end="43:23"><name pos:start="43:23" pos:end="43:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
