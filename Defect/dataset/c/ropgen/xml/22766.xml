<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22766.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:27">qpa_thread_out</name> <parameter_list pos:start="1:29" pos:end="1:39">(<parameter pos:start="1:30" pos:end="1:38"><decl pos:start="1:30" pos:end="1:38"><type pos:start="1:30" pos:end="1:35"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:38">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="131:1">{<block_content pos:start="5:5" pos:end="129:16">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">PAVoiceOut</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:18">pa</name> <init pos:start="5:20" pos:end="5:24">= <expr pos:start="5:22" pos:end="5:24"><name pos:start="5:22" pos:end="5:24">arg</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">HWVoiceOut</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:18">hw</name> <init pos:start="7:20" pos:end="7:28">= <expr pos:start="7:22" pos:end="7:28"><operator pos:start="7:22" pos:end="7:22">&amp;</operator><name pos:start="7:23" pos:end="7:28"><name pos:start="7:23" pos:end="7:24">pa</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:28">hw</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">threshold</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:62"><expr pos:start="13:5" pos:end="13:61"><name pos:start="13:5" pos:end="13:13">threshold</name> <operator pos:start="13:15" pos:end="13:15">=</operator> <ternary pos:start="13:17" pos:end="13:61"><condition pos:start="13:17" pos:end="13:30"><expr pos:start="13:17" pos:end="13:28"><name pos:start="13:17" pos:end="13:28"><name pos:start="13:17" pos:end="13:20">conf</name><operator pos:start="13:21" pos:end="13:21">.</operator><name pos:start="13:22" pos:end="13:28">divisor</name></name></expr> ?</condition><then pos:start="13:32" pos:end="13:57"> <expr pos:start="13:32" pos:end="13:57"><name pos:start="13:32" pos:end="13:42"><name pos:start="13:32" pos:end="13:33">hw</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:42">samples</name></name> <operator pos:start="13:44" pos:end="13:44">/</operator> <name pos:start="13:46" pos:end="13:57"><name pos:start="13:46" pos:end="13:49">conf</name><operator pos:start="13:50" pos:end="13:50">.</operator><name pos:start="13:51" pos:end="13:57">divisor</name></name></expr> </then><else pos:start="13:59" pos:end="13:61">: <expr pos:start="13:61" pos:end="13:61"><literal type="number" pos:start="13:61" pos:end="13:61">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:44">(<expr pos:start="17:9" pos:end="17:43"><call pos:start="17:9" pos:end="17:43"><name pos:start="17:9" pos:end="17:21">audio_pt_lock</name> <argument_list pos:start="17:23" pos:end="17:43">(<argument pos:start="17:24" pos:end="17:30"><expr pos:start="17:24" pos:end="17:30"><operator pos:start="17:24" pos:end="17:24">&amp;</operator><name pos:start="17:25" pos:end="17:30"><name pos:start="17:25" pos:end="17:26">pa</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:30">pt</name></name></expr></argument>, <argument pos:start="17:33" pos:end="17:42"><expr pos:start="17:33" pos:end="17:42"><name pos:start="17:33" pos:end="17:42">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:46" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:20">

        <return pos:start="19:9" pos:end="19:20">return <expr pos:start="19:16" pos:end="19:19"><name pos:start="19:16" pos:end="19:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="25:5" pos:end="121:5">for <control pos:start="25:9" pos:end="25:12">(<init pos:start="25:10" pos:end="25:10">;</init><condition pos:start="25:11" pos:end="25:11">;</condition><incr/>)</control> <block pos:start="25:14" pos:end="121:5">{<block_content pos:start="27:9" pos:end="119:25">

        <decl_stmt pos:start="27:9" pos:end="27:31"><decl pos:start="27:9" pos:end="27:16"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:16">decr</name></decl>, <decl pos:start="27:19" pos:end="27:24"><type ref="prev" pos:start="27:9" pos:end="27:11"/><name pos:start="27:19" pos:end="27:24">to_mix</name></decl>, <decl pos:start="27:27" pos:end="27:30"><type ref="prev" pos:start="27:9" pos:end="27:11"/><name pos:start="27:27" pos:end="27:30">rpos</name></decl>;</decl_stmt>



        <for pos:start="31:9" pos:end="55:9">for <control pos:start="31:13" pos:end="31:16">(<init pos:start="31:14" pos:end="31:14">;</init><condition pos:start="31:15" pos:end="31:15">;</condition><incr/>)</control> <block pos:start="31:18" pos:end="55:9">{<block_content pos:start="33:13" pos:end="53:13">

            <if_stmt pos:start="33:13" pos:end="37:13"><if pos:start="33:13" pos:end="37:13">if <condition pos:start="33:16" pos:end="33:25">(<expr pos:start="33:17" pos:end="33:24"><name pos:start="33:17" pos:end="33:24"><name pos:start="33:17" pos:end="33:18">pa</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:24">done</name></name></expr>)</condition> <block pos:start="33:27" pos:end="37:13">{<block_content pos:start="35:17" pos:end="35:26">

                <goto pos:start="35:17" pos:end="35:26">goto <name pos:start="35:22" pos:end="35:25">exit</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="41:13" pos:end="45:13"><if pos:start="41:13" pos:end="45:13">if <condition pos:start="41:16" pos:end="41:37">(<expr pos:start="41:17" pos:end="41:36"><name pos:start="41:17" pos:end="41:24"><name pos:start="41:17" pos:end="41:18">pa</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:24">live</name></name> <operator pos:start="41:26" pos:end="41:26">&gt;</operator> <name pos:start="41:28" pos:end="41:36">threshold</name></expr>)</condition> <block pos:start="41:39" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:22">

                <break pos:start="43:17" pos:end="43:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="49:13" pos:end="53:13"><if pos:start="49:13" pos:end="53:13">if <condition pos:start="49:16" pos:end="49:52">(<expr pos:start="49:17" pos:end="49:51"><call pos:start="49:17" pos:end="49:51"><name pos:start="49:17" pos:end="49:29">audio_pt_wait</name> <argument_list pos:start="49:31" pos:end="49:51">(<argument pos:start="49:32" pos:end="49:38"><expr pos:start="49:32" pos:end="49:38"><operator pos:start="49:32" pos:end="49:32">&amp;</operator><name pos:start="49:33" pos:end="49:38"><name pos:start="49:33" pos:end="49:34">pa</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:38">pt</name></name></expr></argument>, <argument pos:start="49:41" pos:end="49:50"><expr pos:start="49:41" pos:end="49:50"><name pos:start="49:41" pos:end="49:50">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:54" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:26">

                <goto pos:start="51:17" pos:end="51:26">goto <name pos:start="51:22" pos:end="51:25">exit</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:12">decr</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <name pos:start="59:16" pos:end="59:21">to_mix</name> <operator pos:start="59:23" pos:end="59:23">=</operator> <name pos:start="59:25" pos:end="59:32"><name pos:start="59:25" pos:end="59:26">pa</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:32">live</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:24"><expr pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:12">rpos</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <name pos:start="61:16" pos:end="61:23"><name pos:start="61:16" pos:end="61:17">hw</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:23">rpos</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:50">(<expr pos:start="65:13" pos:end="65:49"><call pos:start="65:13" pos:end="65:49"><name pos:start="65:13" pos:end="65:27">audio_pt_unlock</name> <argument_list pos:start="65:29" pos:end="65:49">(<argument pos:start="65:30" pos:end="65:36"><expr pos:start="65:30" pos:end="65:36"><operator pos:start="65:30" pos:end="65:30">&amp;</operator><name pos:start="65:31" pos:end="65:36"><name pos:start="65:31" pos:end="65:32">pa</name><operator pos:start="65:33" pos:end="65:34">-&gt;</operator><name pos:start="65:35" pos:end="65:36">pt</name></name></expr></argument>, <argument pos:start="65:39" pos:end="65:48"><expr pos:start="65:39" pos:end="65:48"><name pos:start="65:39" pos:end="65:48">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:52" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:24">

            <return pos:start="67:13" pos:end="67:24">return <expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <while pos:start="73:9" pos:end="103:9">while <condition pos:start="73:15" pos:end="73:22">(<expr pos:start="73:16" pos:end="73:21"><name pos:start="73:16" pos:end="73:21">to_mix</name></expr>)</condition> <block pos:start="73:24" pos:end="103:9">{<block_content pos:start="75:13" pos:end="101:28">

            <decl_stmt pos:start="75:13" pos:end="75:22"><decl pos:start="75:13" pos:end="75:21"><type pos:start="75:13" pos:end="75:15"><name pos:start="75:13" pos:end="75:15">int</name></type> <name pos:start="75:17" pos:end="75:21">error</name></decl>;</decl_stmt>

            <decl_stmt pos:start="77:13" pos:end="77:63"><decl pos:start="77:13" pos:end="77:62"><type pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:15">int</name></type> <name pos:start="77:17" pos:end="77:21">chunk</name> <init pos:start="77:23" pos:end="77:62">= <expr pos:start="77:25" pos:end="77:62"><call pos:start="77:25" pos:end="77:62"><name pos:start="77:25" pos:end="77:33">audio_MIN</name> <argument_list pos:start="77:35" pos:end="77:62">(<argument pos:start="77:36" pos:end="77:41"><expr pos:start="77:36" pos:end="77:41"><name pos:start="77:36" pos:end="77:41">to_mix</name></expr></argument>, <argument pos:start="77:44" pos:end="77:61"><expr pos:start="77:44" pos:end="77:61"><name pos:start="77:44" pos:end="77:54"><name pos:start="77:44" pos:end="77:45">hw</name><operator pos:start="77:46" pos:end="77:47">-&gt;</operator><name pos:start="77:48" pos:end="77:54">samples</name></name> <operator pos:start="77:56" pos:end="77:56">-</operator> <name pos:start="77:58" pos:end="77:61">rpos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="79:13" pos:end="79:55"><decl pos:start="79:13" pos:end="79:54"><type pos:start="79:13" pos:end="79:30"><name pos:start="79:13" pos:end="79:28"><name pos:start="79:13" pos:end="79:18">struct</name> <name pos:start="79:20" pos:end="79:28">st_sample</name></name> <modifier pos:start="79:30" pos:end="79:30">*</modifier></type><name pos:start="79:31" pos:end="79:33">src</name> <init pos:start="79:35" pos:end="79:54">= <expr pos:start="79:37" pos:end="79:54"><name pos:start="79:37" pos:end="79:47"><name pos:start="79:37" pos:end="79:38">hw</name><operator pos:start="79:39" pos:end="79:40">-&gt;</operator><name pos:start="79:41" pos:end="79:47">mix_buf</name></name> <operator pos:start="79:49" pos:end="79:49">+</operator> <name pos:start="79:51" pos:end="79:54">rpos</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="83:13" pos:end="83:47"><expr pos:start="83:13" pos:end="83:46"><call pos:start="83:13" pos:end="83:46"><name pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:14">hw</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:20">clip</name></name> <argument_list pos:start="83:22" pos:end="83:46">(<argument pos:start="83:23" pos:end="83:33"><expr pos:start="83:23" pos:end="83:33"><name pos:start="83:23" pos:end="83:33"><name pos:start="83:23" pos:end="83:24">pa</name><operator pos:start="83:25" pos:end="83:26">-&gt;</operator><name pos:start="83:27" pos:end="83:33">pcm_buf</name></name></expr></argument>, <argument pos:start="83:36" pos:end="83:38"><expr pos:start="83:36" pos:end="83:38"><name pos:start="83:36" pos:end="83:38">src</name></expr></argument>, <argument pos:start="83:41" pos:end="83:45"><expr pos:start="83:41" pos:end="83:45"><name pos:start="83:41" pos:end="83:45">chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="87:13" pos:end="95:13"><if pos:start="87:13" pos:end="95:13">if <condition pos:start="87:16" pos:end="89:70">(<expr pos:start="87:17" pos:end="89:69"><call pos:start="87:17" pos:end="89:65"><name pos:start="87:17" pos:end="87:31">pa_simple_write</name> <argument_list pos:start="87:33" pos:end="89:65">(<argument pos:start="87:34" pos:end="87:38"><expr pos:start="87:34" pos:end="87:38"><name pos:start="87:34" pos:end="87:38"><name pos:start="87:34" pos:end="87:35">pa</name><operator pos:start="87:36" pos:end="87:37">-&gt;</operator><name pos:start="87:38" pos:end="87:38">s</name></name></expr></argument>, <argument pos:start="87:41" pos:end="87:51"><expr pos:start="87:41" pos:end="87:51"><name pos:start="87:41" pos:end="87:51"><name pos:start="87:41" pos:end="87:42">pa</name><operator pos:start="87:43" pos:end="87:44">-&gt;</operator><name pos:start="87:45" pos:end="87:51">pcm_buf</name></name></expr></argument>,

                                 <argument pos:start="89:34" pos:end="89:56"><expr pos:start="89:34" pos:end="89:56"><name pos:start="89:34" pos:end="89:38">chunk</name> <operator pos:start="89:40" pos:end="89:41">&lt;&lt;</operator> <name pos:start="89:43" pos:end="89:56"><name pos:start="89:43" pos:end="89:44">hw</name><operator pos:start="89:45" pos:end="89:46">-&gt;</operator><name pos:start="89:47" pos:end="89:50">info</name><operator pos:start="89:51" pos:end="89:51">.</operator><name pos:start="89:52" pos:end="89:56">shift</name></name></expr></argument>, <argument pos:start="89:59" pos:end="89:64"><expr pos:start="89:59" pos:end="89:64"><operator pos:start="89:59" pos:end="89:59">&amp;</operator><name pos:start="89:60" pos:end="89:64">error</name></expr></argument>)</argument_list></call> <operator pos:start="89:67" pos:end="89:67">&lt;</operator> <literal type="number" pos:start="89:69" pos:end="89:69">0</literal></expr>)</condition> <block pos:start="89:72" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:28">

                <expr_stmt pos:start="91:17" pos:end="91:63"><expr pos:start="91:17" pos:end="91:62"><call pos:start="91:17" pos:end="91:62"><name pos:start="91:17" pos:end="91:26">qpa_logerr</name> <argument_list pos:start="91:28" pos:end="91:62">(<argument pos:start="91:29" pos:end="91:33"><expr pos:start="91:29" pos:end="91:33"><name pos:start="91:29" pos:end="91:33">error</name></expr></argument>, <argument pos:start="91:36" pos:end="91:61"><expr pos:start="91:36" pos:end="91:61"><literal type="string" pos:start="91:36" pos:end="91:61">"pa_simple_write failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="93:17" pos:end="93:28">return <expr pos:start="93:24" pos:end="93:27"><name pos:start="93:24" pos:end="93:27">NULL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="99:13" pos:end="99:48"><expr pos:start="99:13" pos:end="99:47"><name pos:start="99:13" pos:end="99:16">rpos</name> <operator pos:start="99:18" pos:end="99:18">=</operator> <operator pos:start="99:20" pos:end="99:20">(</operator><name pos:start="99:21" pos:end="99:24">rpos</name> <operator pos:start="99:26" pos:end="99:26">+</operator> <name pos:start="99:28" pos:end="99:32">chunk</name><operator pos:start="99:33" pos:end="99:33">)</operator> <operator pos:start="99:35" pos:end="99:35">%</operator> <name pos:start="99:37" pos:end="99:47"><name pos:start="99:37" pos:end="99:38">hw</name><operator pos:start="99:39" pos:end="99:40">-&gt;</operator><name pos:start="99:41" pos:end="99:47">samples</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:28"><expr pos:start="101:13" pos:end="101:27"><name pos:start="101:13" pos:end="101:18">to_mix</name> <operator pos:start="101:20" pos:end="101:21">-=</operator> <name pos:start="101:23" pos:end="101:27">chunk</name></expr>;</expr_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="107:9" pos:end="111:9"><if pos:start="107:9" pos:end="111:9">if <condition pos:start="107:12" pos:end="107:48">(<expr pos:start="107:13" pos:end="107:47"><call pos:start="107:13" pos:end="107:47"><name pos:start="107:13" pos:end="107:25">audio_pt_lock</name> <argument_list pos:start="107:27" pos:end="107:47">(<argument pos:start="107:28" pos:end="107:34"><expr pos:start="107:28" pos:end="107:34"><operator pos:start="107:28" pos:end="107:28">&amp;</operator><name pos:start="107:29" pos:end="107:34"><name pos:start="107:29" pos:end="107:30">pa</name><operator pos:start="107:31" pos:end="107:32">-&gt;</operator><name pos:start="107:33" pos:end="107:34">pt</name></name></expr></argument>, <argument pos:start="107:37" pos:end="107:46"><expr pos:start="107:37" pos:end="107:46"><name pos:start="107:37" pos:end="107:46">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="107:50" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:24">

            <return pos:start="109:13" pos:end="109:24">return <expr pos:start="109:20" pos:end="109:23"><name pos:start="109:20" pos:end="109:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="115:21"><expr pos:start="115:9" pos:end="115:20"><name pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:10">pa</name><operator pos:start="115:11" pos:end="115:12">-&gt;</operator><name pos:start="115:13" pos:end="115:16">live</name></name> <operator pos:start="115:18" pos:end="115:18">=</operator> <literal type="number" pos:start="115:20" pos:end="115:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:24"><expr pos:start="117:9" pos:end="117:23"><name pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:10">pa</name><operator pos:start="117:11" pos:end="117:12">-&gt;</operator><name pos:start="117:13" pos:end="117:16">rpos</name></name> <operator pos:start="117:18" pos:end="117:18">=</operator> <name pos:start="117:20" pos:end="117:23">rpos</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:25"><expr pos:start="119:9" pos:end="119:24"><name pos:start="119:9" pos:end="119:16"><name pos:start="119:9" pos:end="119:10">pa</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:16">decr</name></name> <operator pos:start="119:18" pos:end="119:19">+=</operator> <name pos:start="119:21" pos:end="119:24">decr</name></expr>;</expr_stmt>

    </block_content>}</block></for>



 <label pos:start="125:2" pos:end="125:6"><name pos:start="125:2" pos:end="125:5">exit</name>:</label>

    <expr_stmt pos:start="127:5" pos:end="127:42"><expr pos:start="127:5" pos:end="127:41"><call pos:start="127:5" pos:end="127:41"><name pos:start="127:5" pos:end="127:19">audio_pt_unlock</name> <argument_list pos:start="127:21" pos:end="127:41">(<argument pos:start="127:22" pos:end="127:28"><expr pos:start="127:22" pos:end="127:28"><operator pos:start="127:22" pos:end="127:22">&amp;</operator><name pos:start="127:23" pos:end="127:28"><name pos:start="127:23" pos:end="127:24">pa</name><operator pos:start="127:25" pos:end="127:26">-&gt;</operator><name pos:start="127:27" pos:end="127:28">pt</name></name></expr></argument>, <argument pos:start="127:31" pos:end="127:40"><expr pos:start="127:31" pos:end="127:40"><name pos:start="127:31" pos:end="127:40">AUDIO_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="129:5" pos:end="129:16">return <expr pos:start="129:12" pos:end="129:15"><name pos:start="129:12" pos:end="129:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
