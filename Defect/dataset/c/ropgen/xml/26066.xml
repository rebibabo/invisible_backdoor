<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26066.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">float32</name></type> <name pos:start="1:9" pos:end="1:28">float32_round_to_int</name><parameter_list pos:start="1:29" pos:end="1:53">( <parameter pos:start="1:31" pos:end="1:52"><decl pos:start="1:31" pos:end="1:52"><type pos:start="1:31" pos:end="1:39"><name pos:start="1:31" pos:end="1:37">float32</name> <name pos:start="1:39" pos:end="1:39">a</name></type> <name pos:start="1:41" pos:end="1:52">STATUS_PARAM</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="97:13">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:14"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">flag</name></type> <name pos:start="5:10" pos:end="5:14">aSign</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:9">int16</name></type> <name pos:start="7:11" pos:end="7:14">aExp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">bits32</name></type> <name pos:start="9:12" pos:end="9:22">lastBitMask</name></decl>, <decl pos:start="9:25" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:25" pos:end="9:37">roundBitsMask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">int8</name></type> <name pos:start="11:10" pos:end="11:21">roundingMode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">float32</name></type> <name pos:start="13:13" pos:end="13:13">z</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:34"><expr pos:start="17:5" pos:end="17:33"><name pos:start="17:5" pos:end="17:8">aExp</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <call pos:start="17:12" pos:end="17:33"><name pos:start="17:12" pos:end="17:28">extractFloat32Exp</name><argument_list pos:start="17:29" pos:end="17:33">( <argument pos:start="17:31" pos:end="17:31"><expr pos:start="17:31" pos:end="17:31"><name pos:start="17:31" pos:end="17:31">a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="29:5"><if pos:start="19:5" pos:end="29:5">if <condition pos:start="19:8" pos:end="19:23">( <expr pos:start="19:10" pos:end="19:21"><literal type="number" pos:start="19:10" pos:end="19:13">0x96</literal> <operator pos:start="19:15" pos:end="19:16">&lt;=</operator> <name pos:start="19:18" pos:end="19:21">aExp</name></expr> )</condition> <block pos:start="19:25" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:17">

        <if_stmt pos:start="21:9" pos:end="25:9"><if pos:start="21:9" pos:end="25:9">if <condition pos:start="21:12" pos:end="21:58">( <expr pos:start="21:14" pos:end="21:56"><operator pos:start="21:14" pos:end="21:14">(</operator> <name pos:start="21:16" pos:end="21:19">aExp</name> <operator pos:start="21:21" pos:end="21:22">==</operator> <literal type="number" pos:start="21:24" pos:end="21:27">0xFF</literal> <operator pos:start="21:29" pos:end="21:29">)</operator> <operator pos:start="21:31" pos:end="21:32">&amp;&amp;</operator> <call pos:start="21:34" pos:end="21:56"><name pos:start="21:34" pos:end="21:51">extractFloat32Frac</name><argument_list pos:start="21:52" pos:end="21:56">( <argument pos:start="21:54" pos:end="21:54"><expr pos:start="21:54" pos:end="21:54"><name pos:start="21:54" pos:end="21:54">a</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="21:60" pos:end="25:9">{<block_content pos:start="23:13" pos:end="23:58">

            <return pos:start="23:13" pos:end="23:58">return <macro pos:start="23:20" pos:end="23:57"><name pos:start="23:20" pos:end="23:38">propagateFloat32NaN</name><argument_list pos:start="23:39" pos:end="23:57">( <argument pos:start="23:41" pos:end="23:41">a</argument>, <argument pos:start="23:44" pos:end="23:55">a STATUS_VAR</argument> )</argument_list></macro>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><name pos:start="27:16" pos:end="27:16">a</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="31:5" pos:end="63:5"><if pos:start="31:5" pos:end="63:5">if <condition pos:start="31:8" pos:end="31:23">( <expr pos:start="31:10" pos:end="31:21"><name pos:start="31:10" pos:end="31:13">aExp</name> <operator pos:start="31:15" pos:end="31:16">&lt;=</operator> <literal type="number" pos:start="31:18" pos:end="31:21">0x7E</literal></expr> )</condition> <block pos:start="31:25" pos:end="63:5">{<block_content pos:start="33:9" pos:end="61:42">

        <if_stmt pos:start="33:9" pos:end="33:47"><if pos:start="33:9" pos:end="33:47">if <condition pos:start="33:12" pos:end="33:37">( <expr pos:start="33:14" pos:end="33:35"><operator pos:start="33:14" pos:end="33:14">(</operator><name pos:start="33:15" pos:end="33:20">bits32</name><operator pos:start="33:21" pos:end="33:21">)</operator> <operator pos:start="33:23" pos:end="33:23">(</operator> <name pos:start="33:25" pos:end="33:25">a</name><operator pos:start="33:26" pos:end="33:27">&lt;&lt;</operator><literal type="number" pos:start="33:28" pos:end="33:28">1</literal> <operator pos:start="33:30" pos:end="33:30">)</operator> <operator pos:start="33:32" pos:end="33:33">==</operator> <literal type="number" pos:start="33:35" pos:end="33:35">0</literal></expr> )</condition><block type="pseudo" pos:start="33:39" pos:end="33:47"><block_content pos:start="33:39" pos:end="33:47"> <return pos:start="33:39" pos:end="33:47">return <expr pos:start="33:46" pos:end="33:46"><name pos:start="33:46" pos:end="33:46">a</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:60"><expr pos:start="35:9" pos:end="35:59"><call pos:start="35:9" pos:end="35:37"><name pos:start="35:9" pos:end="35:14">STATUS</name><argument_list pos:start="35:15" pos:end="35:37">(<argument pos:start="35:16" pos:end="35:36"><expr pos:start="35:16" pos:end="35:36"><name pos:start="35:16" pos:end="35:36">float_exception_flags</name></expr></argument>)</argument_list></call> <operator pos:start="35:39" pos:end="35:40">|=</operator> <name pos:start="35:42" pos:end="35:59">float_flag_inexact</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:40"><expr pos:start="37:9" pos:end="37:39"><name pos:start="37:9" pos:end="37:13">aSign</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:39"><name pos:start="37:17" pos:end="37:34">extractFloat32Sign</name><argument_list pos:start="37:35" pos:end="37:39">( <argument pos:start="37:37" pos:end="37:37"><expr pos:start="37:37" pos:end="37:37"><name pos:start="37:37" pos:end="37:37">a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="39:9" pos:end="59:9">switch <condition pos:start="39:16" pos:end="39:46">( <expr pos:start="39:18" pos:end="39:44"><call pos:start="39:18" pos:end="39:44"><name pos:start="39:18" pos:end="39:23">STATUS</name><argument_list pos:start="39:24" pos:end="39:44">(<argument pos:start="39:25" pos:end="39:43"><expr pos:start="39:25" pos:end="39:43"><name pos:start="39:25" pos:end="39:43">float_rounding_mode</name></expr></argument>)</argument_list></call></expr> )</condition> <block pos:start="39:48" pos:end="59:9">{<block_content pos:start="41:10" pos:end="57:51">

         <case pos:start="41:10" pos:end="41:39">case <expr pos:start="41:15" pos:end="41:38"><name pos:start="41:15" pos:end="41:38">float_round_nearest_even</name></expr>:</case>

            <if_stmt pos:start="43:13" pos:end="47:13"><if pos:start="43:13" pos:end="47:13">if <condition pos:start="43:16" pos:end="43:62">( <expr pos:start="43:18" pos:end="43:60"><operator pos:start="43:18" pos:end="43:18">(</operator> <name pos:start="43:20" pos:end="43:23">aExp</name> <operator pos:start="43:25" pos:end="43:26">==</operator> <literal type="number" pos:start="43:28" pos:end="43:31">0x7E</literal> <operator pos:start="43:33" pos:end="43:33">)</operator> <operator pos:start="43:35" pos:end="43:36">&amp;&amp;</operator> <call pos:start="43:38" pos:end="43:60"><name pos:start="43:38" pos:end="43:55">extractFloat32Frac</name><argument_list pos:start="43:56" pos:end="43:60">( <argument pos:start="43:58" pos:end="43:58"><expr pos:start="43:58" pos:end="43:58"><name pos:start="43:58" pos:end="43:58">a</name></expr></argument> )</argument_list></call></expr> )</condition> <block pos:start="43:64" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:53">

                <return pos:start="45:17" pos:end="45:53">return <expr pos:start="45:24" pos:end="45:52"><call pos:start="45:24" pos:end="45:52"><name pos:start="45:24" pos:end="45:34">packFloat32</name><argument_list pos:start="45:35" pos:end="45:52">( <argument pos:start="45:37" pos:end="45:41"><expr pos:start="45:37" pos:end="45:41"><name pos:start="45:37" pos:end="45:41">aSign</name></expr></argument>, <argument pos:start="45:44" pos:end="45:47"><expr pos:start="45:44" pos:end="45:47"><literal type="number" pos:start="45:44" pos:end="45:47">0x7F</literal></expr></argument>, <argument pos:start="45:50" pos:end="45:50"><expr pos:start="45:50" pos:end="45:50"><literal type="number" pos:start="45:50" pos:end="45:50">0</literal></expr></argument> )</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

         <case pos:start="51:10" pos:end="51:31">case <expr pos:start="51:15" pos:end="51:30"><name pos:start="51:15" pos:end="51:30">float_round_down</name></expr>:</case>

            <return pos:start="53:13" pos:end="53:42">return <expr pos:start="53:20" pos:end="53:41"><ternary pos:start="53:20" pos:end="53:41"><condition pos:start="53:20" pos:end="53:26"><expr pos:start="53:20" pos:end="53:24"><name pos:start="53:20" pos:end="53:24">aSign</name></expr> ?</condition><then pos:start="53:28" pos:end="53:37"> <expr pos:start="53:28" pos:end="53:37"><literal type="number" pos:start="53:28" pos:end="53:37">0xBF800000</literal></expr> </then><else pos:start="53:39" pos:end="53:41">: <expr pos:start="53:41" pos:end="53:41"><literal type="number" pos:start="53:41" pos:end="53:41">0</literal></expr></else></ternary></expr>;</return>

         <case pos:start="55:10" pos:end="55:29">case <expr pos:start="55:15" pos:end="55:28"><name pos:start="55:15" pos:end="55:28">float_round_up</name></expr>:</case>

            <return pos:start="57:13" pos:end="57:51">return <expr pos:start="57:20" pos:end="57:50"><ternary pos:start="57:20" pos:end="57:50"><condition pos:start="57:20" pos:end="57:26"><expr pos:start="57:20" pos:end="57:24"><name pos:start="57:20" pos:end="57:24">aSign</name></expr> ?</condition><then pos:start="57:28" pos:end="57:37"> <expr pos:start="57:28" pos:end="57:37"><literal type="number" pos:start="57:28" pos:end="57:37">0x80000000</literal></expr> </then><else pos:start="57:39" pos:end="57:50">: <expr pos:start="57:41" pos:end="57:50"><literal type="number" pos:start="57:41" pos:end="57:50">0x3F800000</literal></expr></else></ternary></expr>;</return>

        </block_content>}</block></switch>

        <return pos:start="61:9" pos:end="61:42">return <expr pos:start="61:16" pos:end="61:41"><call pos:start="61:16" pos:end="61:41"><name pos:start="61:16" pos:end="61:26">packFloat32</name><argument_list pos:start="61:27" pos:end="61:41">( <argument pos:start="61:29" pos:end="61:33"><expr pos:start="61:29" pos:end="61:33"><name pos:start="61:29" pos:end="61:33">aSign</name></expr></argument>, <argument pos:start="61:36" pos:end="61:36"><expr pos:start="61:36" pos:end="61:36"><literal type="number" pos:start="61:36" pos:end="61:36">0</literal></expr></argument>, <argument pos:start="61:39" pos:end="61:39"><expr pos:start="61:39" pos:end="61:39"><literal type="number" pos:start="61:39" pos:end="61:39">0</literal></expr></argument> )</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:20"><expr pos:start="65:5" pos:end="65:19"><name pos:start="65:5" pos:end="65:15">lastBitMask</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <literal type="number" pos:start="65:19" pos:end="65:19">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:32"><expr pos:start="67:5" pos:end="67:31"><name pos:start="67:5" pos:end="67:15">lastBitMask</name> <operator pos:start="67:17" pos:end="67:19">&lt;&lt;=</operator> <literal type="number" pos:start="67:21" pos:end="67:26">0x96</literal> <operator pos:start="67:26" pos:end="67:26">-</operator> <name pos:start="67:28" pos:end="67:31">aExp</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:36"><expr pos:start="69:5" pos:end="69:35"><name pos:start="69:5" pos:end="69:17">roundBitsMask</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <name pos:start="69:21" pos:end="69:31">lastBitMask</name> <operator pos:start="69:33" pos:end="69:33">-</operator> <literal type="number" pos:start="69:35" pos:end="69:35">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:10"><expr pos:start="71:5" pos:end="71:9"><name pos:start="71:5" pos:end="71:5">z</name> <operator pos:start="71:7" pos:end="71:7">=</operator> <name pos:start="71:9" pos:end="71:9">a</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:47"><expr pos:start="73:5" pos:end="73:46"><name pos:start="73:5" pos:end="73:16">roundingMode</name> <operator pos:start="73:18" pos:end="73:18">=</operator> <call pos:start="73:20" pos:end="73:46"><name pos:start="73:20" pos:end="73:25">STATUS</name><argument_list pos:start="73:26" pos:end="73:46">(<argument pos:start="73:27" pos:end="73:45"><expr pos:start="73:27" pos:end="73:45"><name pos:start="73:27" pos:end="73:45">float_rounding_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="91:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:51">( <expr pos:start="75:10" pos:end="75:49"><name pos:start="75:10" pos:end="75:21">roundingMode</name> <operator pos:start="75:23" pos:end="75:24">==</operator> <name pos:start="75:26" pos:end="75:49">float_round_nearest_even</name></expr> )</condition> <block pos:start="75:53" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:61">

        <expr_stmt pos:start="77:9" pos:end="77:28"><expr pos:start="77:9" pos:end="77:27"><name pos:start="77:9" pos:end="77:9">z</name> <operator pos:start="77:11" pos:end="77:12">+=</operator> <name pos:start="77:14" pos:end="77:24">lastBitMask</name><operator pos:start="77:25" pos:end="77:26">&gt;&gt;</operator><literal type="number" pos:start="77:27" pos:end="77:27">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="79:61"><if pos:start="79:9" pos:end="79:61">if <condition pos:start="79:12" pos:end="79:41">( <expr pos:start="79:14" pos:end="79:39"><operator pos:start="79:14" pos:end="79:14">(</operator> <name pos:start="79:16" pos:end="79:16">z</name> <operator pos:start="79:18" pos:end="79:18">&amp;</operator> <name pos:start="79:20" pos:end="79:32">roundBitsMask</name> <operator pos:start="79:34" pos:end="79:34">)</operator> <operator pos:start="79:36" pos:end="79:37">==</operator> <literal type="number" pos:start="79:39" pos:end="79:39">0</literal></expr> )</condition><block type="pseudo" pos:start="79:43" pos:end="79:61"><block_content pos:start="79:43" pos:end="79:61"> <expr_stmt pos:start="79:43" pos:end="79:61"><expr pos:start="79:43" pos:end="79:60"><name pos:start="79:43" pos:end="79:43">z</name> <operator pos:start="79:45" pos:end="79:46">&amp;=</operator> <operator pos:start="79:48" pos:end="79:48">~</operator> <name pos:start="79:50" pos:end="79:60">lastBitMask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if>

    <if type="elseif" pos:start="83:5" pos:end="91:5">else if <condition pos:start="83:13" pos:end="83:51">( <expr pos:start="83:15" pos:end="83:49"><name pos:start="83:15" pos:end="83:26">roundingMode</name> <operator pos:start="83:28" pos:end="83:29">!=</operator> <name pos:start="83:31" pos:end="83:49">float_round_to_zero</name></expr> )</condition> <block pos:start="83:53" pos:end="91:5">{<block_content pos:start="85:9" pos:end="89:9">

        <if_stmt pos:start="85:9" pos:end="89:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:75">( <expr pos:start="85:14" pos:end="85:73"><call pos:start="85:14" pos:end="85:36"><name pos:start="85:14" pos:end="85:31">extractFloat32Sign</name><argument_list pos:start="85:32" pos:end="85:36">( <argument pos:start="85:34" pos:end="85:34"><expr pos:start="85:34" pos:end="85:34"><name pos:start="85:34" pos:end="85:34">z</name></expr></argument> )</argument_list></call> <operator pos:start="85:38" pos:end="85:38">^</operator> <operator pos:start="85:40" pos:end="85:40">(</operator> <name pos:start="85:42" pos:end="85:53">roundingMode</name> <operator pos:start="85:55" pos:end="85:56">==</operator> <name pos:start="85:58" pos:end="85:71">float_round_up</name> <operator pos:start="85:73" pos:end="85:73">)</operator></expr> )</condition> <block pos:start="85:77" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:31">

            <expr_stmt pos:start="87:13" pos:end="87:31"><expr pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:13">z</name> <operator pos:start="87:15" pos:end="87:16">+=</operator> <name pos:start="87:18" pos:end="87:30">roundBitsMask</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:25"><expr pos:start="93:5" pos:end="93:24"><name pos:start="93:5" pos:end="93:5">z</name> <operator pos:start="93:7" pos:end="93:8">&amp;=</operator> <operator pos:start="93:10" pos:end="93:10">~</operator> <name pos:start="93:12" pos:end="93:24">roundBitsMask</name></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="95:70"><if pos:start="95:5" pos:end="95:70">if <condition pos:start="95:8" pos:end="95:17">( <expr pos:start="95:10" pos:end="95:15"><name pos:start="95:10" pos:end="95:10">z</name> <operator pos:start="95:12" pos:end="95:13">!=</operator> <name pos:start="95:15" pos:end="95:15">a</name></expr> )</condition><block type="pseudo" pos:start="95:19" pos:end="95:70"><block_content pos:start="95:19" pos:end="95:70"> <expr_stmt pos:start="95:19" pos:end="95:70"><expr pos:start="95:19" pos:end="95:69"><call pos:start="95:19" pos:end="95:47"><name pos:start="95:19" pos:end="95:24">STATUS</name><argument_list pos:start="95:25" pos:end="95:47">(<argument pos:start="95:26" pos:end="95:46"><expr pos:start="95:26" pos:end="95:46"><name pos:start="95:26" pos:end="95:46">float_exception_flags</name></expr></argument>)</argument_list></call> <operator pos:start="95:49" pos:end="95:50">|=</operator> <name pos:start="95:52" pos:end="95:69">float_flag_inexact</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="97:5" pos:end="97:13">return <expr pos:start="97:12" pos:end="97:12"><name pos:start="97:12" pos:end="97:12">z</name></expr>;</return>



</block_content>}</block></function>
</unit>
