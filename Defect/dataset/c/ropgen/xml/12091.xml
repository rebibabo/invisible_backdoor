<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12091.c" pos:tabs="8"><function pos:start="1:1" pos:end="227:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:25">qcow2_snapshot_create</name><parameter_list pos:start="1:26" pos:end="1:74">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:42">BlockDriverState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">bs</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:73"><decl pos:start="1:49" pos:end="1:73"><type pos:start="1:49" pos:end="1:73"><name pos:start="1:49" pos:end="1:64">QEMUSnapshotInfo</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:73">sn_info</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="227:1">{<block_content pos:start="5:5" pos:end="225:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">QCowSnapshot</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:35">new_snapshot_list</name> <init pos:start="7:37" pos:end="7:42">= <expr pos:start="7:39" pos:end="7:42"><name pos:start="7:39" pos:end="7:42">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">QCowSnapshot</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:35">old_snapshot_list</name> <init pos:start="9:37" pos:end="9:42">= <expr pos:start="9:39" pos:end="9:42"><name pos:start="9:39" pos:end="9:42">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">QCowSnapshot</name></type> <name pos:start="11:18" pos:end="11:20">sn1</name></decl>, <decl pos:start="11:23" pos:end="11:32"><type ref="prev" pos:start="11:5" pos:end="11:16"><modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:25">sn</name> <init pos:start="11:27" pos:end="11:32">= <expr pos:start="11:29" pos:end="11:32"><operator pos:start="11:29" pos:end="11:29">&amp;</operator><name pos:start="11:30" pos:end="11:32">sn1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>, <decl pos:start="13:12" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:12" pos:end="13:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint64_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:22">l1_table</name> <init pos:start="15:24" pos:end="15:29">= <expr pos:start="15:26" pos:end="15:29"><name pos:start="15:26" pos:end="15:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:27">l1_table_offset</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:31"><expr pos:start="21:5" pos:end="21:30"><call pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:10">memset</name><argument_list pos:start="21:11" pos:end="21:30">(<argument pos:start="21:12" pos:end="21:13"><expr pos:start="21:12" pos:end="21:13"><name pos:start="21:12" pos:end="21:13">sn</name></expr></argument>, <argument pos:start="21:16" pos:end="21:16"><expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr></argument>, <argument pos:start="21:19" pos:end="21:29"><expr pos:start="21:19" pos:end="21:29"><sizeof pos:start="21:19" pos:end="21:29">sizeof<argument_list pos:start="21:25" pos:end="21:29">(<argument pos:start="21:26" pos:end="21:28"><expr pos:start="21:26" pos:end="21:28"><operator pos:start="21:26" pos:end="21:26">*</operator><name pos:start="21:27" pos:end="21:28">sn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:44">/* Generate an ID if it wasn't passed */</comment>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:35">(<expr pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:26"><name pos:start="27:9" pos:end="27:15">sn_info</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:23">id_str</name><index pos:start="27:24" pos:end="27:26">[<expr pos:start="27:25" pos:end="27:25"><literal type="number" pos:start="27:25" pos:end="27:25">0</literal></expr>]</index></name> <operator pos:start="27:28" pos:end="27:29">==</operator> <literal type="char" pos:start="27:31" pos:end="27:34">'\0'</literal></expr>)</condition> <block pos:start="27:37" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:75">

        <expr_stmt pos:start="29:9" pos:end="29:75"><expr pos:start="29:9" pos:end="29:74"><call pos:start="29:9" pos:end="29:74"><name pos:start="29:9" pos:end="29:28">find_new_snapshot_id</name><argument_list pos:start="29:29" pos:end="29:74">(<argument pos:start="29:30" pos:end="29:31"><expr pos:start="29:30" pos:end="29:31"><name pos:start="29:30" pos:end="29:31">bs</name></expr></argument>, <argument pos:start="29:34" pos:end="29:48"><expr pos:start="29:34" pos:end="29:48"><name pos:start="29:34" pos:end="29:48"><name pos:start="29:34" pos:end="29:40">sn_info</name><operator pos:start="29:41" pos:end="29:42">-&gt;</operator><name pos:start="29:43" pos:end="29:48">id_str</name></name></expr></argument>, <argument pos:start="29:51" pos:end="29:73"><expr pos:start="29:51" pos:end="29:73"><sizeof pos:start="29:51" pos:end="29:73">sizeof<argument_list pos:start="29:57" pos:end="29:73">(<argument pos:start="29:58" pos:end="29:72"><expr pos:start="29:58" pos:end="29:72"><name pos:start="29:58" pos:end="29:72"><name pos:start="29:58" pos:end="29:64">sn_info</name><operator pos:start="29:65" pos:end="29:66">-&gt;</operator><name pos:start="29:67" pos:end="29:72">id_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:37">/* Check that the ID is unique */</comment>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:69">(<expr pos:start="37:9" pos:end="37:68"><call pos:start="37:9" pos:end="37:63"><name pos:start="37:9" pos:end="37:36">find_snapshot_by_id_and_name</name><argument_list pos:start="37:37" pos:end="37:63">(<argument pos:start="37:38" pos:end="37:39"><expr pos:start="37:38" pos:end="37:39"><name pos:start="37:38" pos:end="37:39">bs</name></expr></argument>, <argument pos:start="37:42" pos:end="37:56"><expr pos:start="37:42" pos:end="37:56"><name pos:start="37:42" pos:end="37:56"><name pos:start="37:42" pos:end="37:48">sn_info</name><operator pos:start="37:49" pos:end="37:50">-&gt;</operator><name pos:start="37:51" pos:end="37:56">id_str</name></name></expr></argument>, <argument pos:start="37:59" pos:end="37:62"><expr pos:start="37:59" pos:end="37:62"><name pos:start="37:59" pos:end="37:62">NULL</name></expr></argument>)</argument_list></call> <operator pos:start="37:65" pos:end="37:66">&gt;=</operator> <literal type="number" pos:start="37:68" pos:end="37:68">0</literal></expr>)</condition> <block pos:start="37:71" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:23">

        <return pos:start="39:9" pos:end="39:23">return <expr pos:start="39:16" pos:end="39:22"><operator pos:start="39:16" pos:end="39:16">-</operator><name pos:start="39:17" pos:end="39:22">EEXIST</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:38">/* Populate sn with passed data */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:6">sn</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:14">id_str</name></name> <operator pos:start="47:16" pos:end="47:16">=</operator> <call pos:start="47:18" pos:end="47:42"><name pos:start="47:18" pos:end="47:25">g_strdup</name><argument_list pos:start="47:26" pos:end="47:42">(<argument pos:start="47:27" pos:end="47:41"><expr pos:start="47:27" pos:end="47:41"><name pos:start="47:27" pos:end="47:41"><name pos:start="47:27" pos:end="47:33">sn_info</name><operator pos:start="47:34" pos:end="47:35">-&gt;</operator><name pos:start="47:36" pos:end="47:41">id_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:39"><expr pos:start="49:5" pos:end="49:38"><name pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:6">sn</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:12">name</name></name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="49:38"><name pos:start="49:16" pos:end="49:23">g_strdup</name><argument_list pos:start="49:24" pos:end="49:38">(<argument pos:start="49:25" pos:end="49:37"><expr pos:start="49:25" pos:end="49:37"><name pos:start="49:25" pos:end="49:37"><name pos:start="49:25" pos:end="49:31">sn_info</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:37">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:57"><expr pos:start="53:5" pos:end="53:56"><name pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:6">sn</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:17">disk_size</name></name> <operator pos:start="53:19" pos:end="53:19">=</operator> <name pos:start="53:21" pos:end="53:37"><name pos:start="53:21" pos:end="53:22">bs</name><operator pos:start="53:23" pos:end="53:24">-&gt;</operator><name pos:start="53:25" pos:end="53:37">total_sectors</name></name> <operator pos:start="53:39" pos:end="53:39">*</operator> <name pos:start="53:41" pos:end="53:56">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:47"><expr pos:start="55:5" pos:end="55:46"><name pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:6">sn</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:21">vm_state_size</name></name> <operator pos:start="55:23" pos:end="55:23">=</operator> <name pos:start="55:25" pos:end="55:46"><name pos:start="55:25" pos:end="55:31">sn_info</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:46">vm_state_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:37"><expr pos:start="57:5" pos:end="57:36"><name pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:6">sn</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:16">date_sec</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:36"><name pos:start="57:20" pos:end="57:26">sn_info</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:36">date_sec</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:39"><expr pos:start="59:5" pos:end="59:38"><name pos:start="59:5" pos:end="59:17"><name pos:start="59:5" pos:end="59:6">sn</name><operator pos:start="59:7" pos:end="59:8">-&gt;</operator><name pos:start="59:9" pos:end="59:17">date_nsec</name></name> <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:38"><name pos:start="59:21" pos:end="59:27">sn_info</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:38">date_nsec</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:47"><expr pos:start="61:5" pos:end="61:46"><name pos:start="61:5" pos:end="61:21"><name pos:start="61:5" pos:end="61:6">sn</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:21">vm_clock_nsec</name></name> <operator pos:start="61:23" pos:end="61:23">=</operator> <name pos:start="61:25" pos:end="61:46"><name pos:start="61:25" pos:end="61:31">sn_info</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:46">vm_clock_nsec</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:79">/* Allocate the L1 table of the snapshot and copy the current one there. */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:78"><expr pos:start="67:5" pos:end="67:77"><name pos:start="67:5" pos:end="67:19">l1_table_offset</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:77"><name pos:start="67:23" pos:end="67:42">qcow2_alloc_clusters</name><argument_list pos:start="67:43" pos:end="67:77">(<argument pos:start="67:44" pos:end="67:45"><expr pos:start="67:44" pos:end="67:45"><name pos:start="67:44" pos:end="67:45">bs</name></expr></argument>, <argument pos:start="67:48" pos:end="67:76"><expr pos:start="67:48" pos:end="67:76"><name pos:start="67:48" pos:end="67:57"><name pos:start="67:48" pos:end="67:48">s</name><operator pos:start="67:49" pos:end="67:50">-&gt;</operator><name pos:start="67:51" pos:end="67:57">l1_size</name></name> <operator pos:start="67:59" pos:end="67:59">*</operator> <sizeof pos:start="67:61" pos:end="67:76">sizeof<argument_list pos:start="67:67" pos:end="67:76">(<argument pos:start="67:68" pos:end="67:75"><expr pos:start="67:68" pos:end="67:75"><name pos:start="67:68" pos:end="67:75">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:28">(<expr pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:23">l1_table_offset</name> <operator pos:start="69:25" pos:end="69:25">&lt;</operator> <literal type="number" pos:start="69:27" pos:end="69:27">0</literal></expr>)</condition> <block pos:start="69:30" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:18">

        <expr_stmt pos:start="71:9" pos:end="71:30"><expr pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <name pos:start="71:15" pos:end="71:29">l1_table_offset</name></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:18">goto <name pos:start="73:14" pos:end="73:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:42"><expr pos:start="79:5" pos:end="79:41"><name pos:start="79:5" pos:end="79:23"><name pos:start="79:5" pos:end="79:6">sn</name><operator pos:start="79:7" pos:end="79:8">-&gt;</operator><name pos:start="79:9" pos:end="79:23">l1_table_offset</name></name> <operator pos:start="79:25" pos:end="79:25">=</operator> <name pos:start="79:27" pos:end="79:41">l1_table_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:29"><expr pos:start="81:5" pos:end="81:28"><name pos:start="81:5" pos:end="81:15"><name pos:start="81:5" pos:end="81:6">sn</name><operator pos:start="81:7" pos:end="81:8">-&gt;</operator><name pos:start="81:9" pos:end="81:15">l1_size</name></name> <operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:28"><name pos:start="81:19" pos:end="81:19">s</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:28">l1_size</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:55"><expr pos:start="85:5" pos:end="85:54"><name pos:start="85:5" pos:end="85:12">l1_table</name> <operator pos:start="85:14" pos:end="85:14">=</operator> <call pos:start="85:16" pos:end="85:54"><name pos:start="85:16" pos:end="85:23">g_malloc</name><argument_list pos:start="85:24" pos:end="85:54">(<argument pos:start="85:25" pos:end="85:53"><expr pos:start="85:25" pos:end="85:53"><name pos:start="85:25" pos:end="85:34"><name pos:start="85:25" pos:end="85:25">s</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:34">l1_size</name></name> <operator pos:start="85:36" pos:end="85:36">*</operator> <sizeof pos:start="85:38" pos:end="85:53">sizeof<argument_list pos:start="85:44" pos:end="85:53">(<argument pos:start="85:45" pos:end="85:52"><expr pos:start="85:45" pos:end="85:52"><name pos:start="85:45" pos:end="85:52">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="87:5" pos:end="91:5">for<control pos:start="87:8" pos:end="87:35">(<init pos:start="87:9" pos:end="87:14"><expr pos:start="87:9" pos:end="87:13"><name pos:start="87:9" pos:end="87:9">i</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <literal type="number" pos:start="87:13" pos:end="87:13">0</literal></expr>;</init> <condition pos:start="87:16" pos:end="87:30"><expr pos:start="87:16" pos:end="87:29"><name pos:start="87:16" pos:end="87:16">i</name> <operator pos:start="87:18" pos:end="87:18">&lt;</operator> <name pos:start="87:20" pos:end="87:29"><name pos:start="87:20" pos:end="87:20">s</name><operator pos:start="87:21" pos:end="87:22">-&gt;</operator><name pos:start="87:23" pos:end="87:29">l1_size</name></name></expr>;</condition> <incr pos:start="87:32" pos:end="87:34"><expr pos:start="87:32" pos:end="87:34"><name pos:start="87:32" pos:end="87:32">i</name><operator pos:start="87:33" pos:end="87:34">++</operator></expr></incr>)</control> <block pos:start="87:37" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:50">

        <expr_stmt pos:start="89:9" pos:end="89:50"><expr pos:start="89:9" pos:end="89:49"><name pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:16">l1_table</name><index pos:start="89:17" pos:end="89:19">[<expr pos:start="89:18" pos:end="89:18"><name pos:start="89:18" pos:end="89:18">i</name></expr>]</index></name> <operator pos:start="89:21" pos:end="89:21">=</operator> <call pos:start="89:23" pos:end="89:49"><name pos:start="89:23" pos:end="89:33">cpu_to_be64</name><argument_list pos:start="89:34" pos:end="89:49">(<argument pos:start="89:35" pos:end="89:48"><expr pos:start="89:35" pos:end="89:48"><name pos:start="89:35" pos:end="89:48"><name pos:start="89:35" pos:end="89:35">s</name><operator pos:start="89:36" pos:end="89:37">-&gt;</operator><name pos:start="89:38" pos:end="89:45">l1_table</name><index pos:start="89:46" pos:end="89:48">[<expr pos:start="89:47" pos:end="89:47"><name pos:start="89:47" pos:end="89:47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="95:5" pos:end="97:64"><expr pos:start="95:5" pos:end="97:63"><name pos:start="95:5" pos:end="95:7">ret</name> <operator pos:start="95:9" pos:end="95:9">=</operator> <call pos:start="95:11" pos:end="97:63"><name pos:start="95:11" pos:end="95:39">qcow2_pre_write_overlap_check</name><argument_list pos:start="95:40" pos:end="97:63">(<argument pos:start="95:41" pos:end="95:42"><expr pos:start="95:41" pos:end="95:42"><name pos:start="95:41" pos:end="95:42">bs</name></expr></argument>, <argument pos:start="95:45" pos:end="95:60"><expr pos:start="95:45" pos:end="95:60"><name pos:start="95:45" pos:end="95:60">QCOW2_OL_DEFAULT</name></expr></argument>,

            <argument pos:start="97:13" pos:end="97:31"><expr pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:14">sn</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:31">l1_table_offset</name></name></expr></argument>, <argument pos:start="97:34" pos:end="97:62"><expr pos:start="97:34" pos:end="97:62"><name pos:start="97:34" pos:end="97:43"><name pos:start="97:34" pos:end="97:34">s</name><operator pos:start="97:35" pos:end="97:36">-&gt;</operator><name pos:start="97:37" pos:end="97:43">l1_size</name></name> <operator pos:start="97:45" pos:end="97:45">*</operator> <sizeof pos:start="97:47" pos:end="97:62">sizeof<argument_list pos:start="97:53" pos:end="97:62">(<argument pos:start="97:54" pos:end="97:61"><expr pos:start="97:54" pos:end="97:61"><name pos:start="97:54" pos:end="97:61">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="103:5"><if pos:start="99:5" pos:end="103:5">if <condition pos:start="99:8" pos:end="99:16">(<expr pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">&lt;</operator> <literal type="number" pos:start="99:15" pos:end="99:15">0</literal></expr>)</condition> <block pos:start="99:18" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:18">

        <goto pos:start="101:9" pos:end="101:18">goto <name pos:start="101:14" pos:end="101:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="107:5" pos:end="109:53"><expr pos:start="107:5" pos:end="109:52"><name pos:start="107:5" pos:end="107:7">ret</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <call pos:start="107:11" pos:end="109:52"><name pos:start="107:11" pos:end="107:21">bdrv_pwrite</name><argument_list pos:start="107:22" pos:end="109:52">(<argument pos:start="107:23" pos:end="107:30"><expr pos:start="107:23" pos:end="107:30"><name pos:start="107:23" pos:end="107:30"><name pos:start="107:23" pos:end="107:24">bs</name><operator pos:start="107:25" pos:end="107:26">-&gt;</operator><name pos:start="107:27" pos:end="107:30">file</name></name></expr></argument>, <argument pos:start="107:33" pos:end="107:51"><expr pos:start="107:33" pos:end="107:51"><name pos:start="107:33" pos:end="107:51"><name pos:start="107:33" pos:end="107:34">sn</name><operator pos:start="107:35" pos:end="107:36">-&gt;</operator><name pos:start="107:37" pos:end="107:51">l1_table_offset</name></name></expr></argument>, <argument pos:start="107:54" pos:end="107:61"><expr pos:start="107:54" pos:end="107:61"><name pos:start="107:54" pos:end="107:61">l1_table</name></expr></argument>,

                      <argument pos:start="109:23" pos:end="109:51"><expr pos:start="109:23" pos:end="109:51"><name pos:start="109:23" pos:end="109:32"><name pos:start="109:23" pos:end="109:23">s</name><operator pos:start="109:24" pos:end="109:25">-&gt;</operator><name pos:start="109:26" pos:end="109:32">l1_size</name></name> <operator pos:start="109:34" pos:end="109:34">*</operator> <sizeof pos:start="109:36" pos:end="109:51">sizeof<argument_list pos:start="109:42" pos:end="109:51">(<argument pos:start="109:43" pos:end="109:50"><expr pos:start="109:43" pos:end="109:50"><name pos:start="109:43" pos:end="109:50">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="115:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:16">(<expr pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">&lt;</operator> <literal type="number" pos:start="111:15" pos:end="111:15">0</literal></expr>)</condition> <block pos:start="111:18" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:18">

        <goto pos:start="113:9" pos:end="113:18">goto <name pos:start="113:14" pos:end="113:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:21"><expr pos:start="119:5" pos:end="119:20"><call pos:start="119:5" pos:end="119:20"><name pos:start="119:5" pos:end="119:10">g_free</name><argument_list pos:start="119:11" pos:end="119:20">(<argument pos:start="119:12" pos:end="119:19"><expr pos:start="119:12" pos:end="119:19"><name pos:start="119:12" pos:end="119:19">l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:20"><expr pos:start="121:5" pos:end="121:19"><name pos:start="121:5" pos:end="121:12">l1_table</name> <operator pos:start="121:14" pos:end="121:14">=</operator> <name pos:start="121:16" pos:end="121:19">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="125:5" pos:end="133:7">/*

     * Increase the refcounts of all clusters and make sure everything is

     * stable on disk before updating the snapshot table to contain a pointer

     * to the new L1 table.

     */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:80"><expr pos:start="135:5" pos:end="135:79"><name pos:start="135:5" pos:end="135:7">ret</name> <operator pos:start="135:9" pos:end="135:9">=</operator> <call pos:start="135:11" pos:end="135:79"><name pos:start="135:11" pos:end="135:40">qcow2_update_snapshot_refcount</name><argument_list pos:start="135:41" pos:end="135:79">(<argument pos:start="135:42" pos:end="135:43"><expr pos:start="135:42" pos:end="135:43"><name pos:start="135:42" pos:end="135:43">bs</name></expr></argument>, <argument pos:start="135:46" pos:end="135:63"><expr pos:start="135:46" pos:end="135:63"><name pos:start="135:46" pos:end="135:63"><name pos:start="135:46" pos:end="135:46">s</name><operator pos:start="135:47" pos:end="135:48">-&gt;</operator><name pos:start="135:49" pos:end="135:63">l1_table_offset</name></name></expr></argument>, <argument pos:start="135:66" pos:end="135:75"><expr pos:start="135:66" pos:end="135:75"><name pos:start="135:66" pos:end="135:75"><name pos:start="135:66" pos:end="135:66">s</name><operator pos:start="135:67" pos:end="135:68">-&gt;</operator><name pos:start="135:69" pos:end="135:75">l1_size</name></name></expr></argument>, <argument pos:start="135:78" pos:end="135:78"><expr pos:start="135:78" pos:end="135:78"><literal type="number" pos:start="135:78" pos:end="135:78">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="141:5"><if pos:start="137:5" pos:end="141:5">if <condition pos:start="137:8" pos:end="137:16">(<expr pos:start="137:9" pos:end="137:15"><name pos:start="137:9" pos:end="137:11">ret</name> <operator pos:start="137:13" pos:end="137:13">&lt;</operator> <literal type="number" pos:start="137:15" pos:end="137:15">0</literal></expr>)</condition> <block pos:start="137:18" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:18">

        <goto pos:start="139:9" pos:end="139:18">goto <name pos:start="139:14" pos:end="139:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:54">/* Append the new snapshot to the snapshot list */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:79"><expr pos:start="147:5" pos:end="147:78"><name pos:start="147:5" pos:end="147:21">new_snapshot_list</name> <operator pos:start="147:23" pos:end="147:23">=</operator> <call pos:start="147:25" pos:end="147:78"><name pos:start="147:25" pos:end="147:32">g_malloc</name><argument_list pos:start="147:33" pos:end="147:78">(<argument pos:start="147:34" pos:end="147:77"><expr pos:start="147:34" pos:end="147:77"><operator pos:start="147:34" pos:end="147:34">(</operator><name pos:start="147:35" pos:end="147:49"><name pos:start="147:35" pos:end="147:35">s</name><operator pos:start="147:36" pos:end="147:37">-&gt;</operator><name pos:start="147:38" pos:end="147:49">nb_snapshots</name></name> <operator pos:start="147:51" pos:end="147:51">+</operator> <literal type="number" pos:start="147:53" pos:end="147:53">1</literal><operator pos:start="147:54" pos:end="147:54">)</operator> <operator pos:start="147:56" pos:end="147:56">*</operator> <sizeof pos:start="147:58" pos:end="147:77">sizeof<argument_list pos:start="147:64" pos:end="147:77">(<argument pos:start="147:65" pos:end="147:76"><expr pos:start="147:65" pos:end="147:76"><name pos:start="147:65" pos:end="147:76">QCowSnapshot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="157:5"><if pos:start="149:5" pos:end="157:5">if <condition pos:start="149:8" pos:end="149:21">(<expr pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:20"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:20">snapshots</name></name></expr>)</condition> <block pos:start="149:23" pos:end="157:5">{<block_content pos:start="151:9" pos:end="155:41">

        <expr_stmt pos:start="151:9" pos:end="153:55"><expr pos:start="151:9" pos:end="153:54"><call pos:start="151:9" pos:end="153:54"><name pos:start="151:9" pos:end="151:14">memcpy</name><argument_list pos:start="151:15" pos:end="153:54">(<argument pos:start="151:16" pos:end="151:32"><expr pos:start="151:16" pos:end="151:32"><name pos:start="151:16" pos:end="151:32">new_snapshot_list</name></expr></argument>, <argument pos:start="151:35" pos:end="151:46"><expr pos:start="151:35" pos:end="151:46"><name pos:start="151:35" pos:end="151:46"><name pos:start="151:35" pos:end="151:35">s</name><operator pos:start="151:36" pos:end="151:37">-&gt;</operator><name pos:start="151:38" pos:end="151:46">snapshots</name></name></expr></argument>,

               <argument pos:start="153:16" pos:end="153:53"><expr pos:start="153:16" pos:end="153:53"><name pos:start="153:16" pos:end="153:30"><name pos:start="153:16" pos:end="153:16">s</name><operator pos:start="153:17" pos:end="153:18">-&gt;</operator><name pos:start="153:19" pos:end="153:30">nb_snapshots</name></name> <operator pos:start="153:32" pos:end="153:32">*</operator> <sizeof pos:start="153:34" pos:end="153:53">sizeof<argument_list pos:start="153:40" pos:end="153:53">(<argument pos:start="153:41" pos:end="153:52"><expr pos:start="153:41" pos:end="153:52"><name pos:start="153:41" pos:end="153:52">QCowSnapshot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:41"><expr pos:start="155:9" pos:end="155:40"><name pos:start="155:9" pos:end="155:25">old_snapshot_list</name> <operator pos:start="155:27" pos:end="155:27">=</operator> <name pos:start="155:29" pos:end="155:40"><name pos:start="155:29" pos:end="155:29">s</name><operator pos:start="155:30" pos:end="155:31">-&gt;</operator><name pos:start="155:32" pos:end="155:40">snapshots</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:37"><expr pos:start="159:5" pos:end="159:36"><name pos:start="159:5" pos:end="159:16"><name pos:start="159:5" pos:end="159:5">s</name><operator pos:start="159:6" pos:end="159:7">-&gt;</operator><name pos:start="159:8" pos:end="159:16">snapshots</name></name> <operator pos:start="159:18" pos:end="159:18">=</operator> <name pos:start="159:20" pos:end="159:36">new_snapshot_list</name></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:42"><expr pos:start="161:5" pos:end="161:41"><name pos:start="161:5" pos:end="161:35"><name pos:start="161:5" pos:end="161:5">s</name><operator pos:start="161:6" pos:end="161:7">-&gt;</operator><name pos:start="161:8" pos:end="161:16">snapshots</name><index pos:start="161:17" pos:end="161:35">[<expr pos:start="161:18" pos:end="161:34"><name pos:start="161:18" pos:end="161:32"><name pos:start="161:18" pos:end="161:18">s</name><operator pos:start="161:19" pos:end="161:20">-&gt;</operator><name pos:start="161:21" pos:end="161:32">nb_snapshots</name></name><operator pos:start="161:33" pos:end="161:34">++</operator></expr>]</index></name> <operator pos:start="161:37" pos:end="161:37">=</operator> <operator pos:start="161:39" pos:end="161:39">*</operator><name pos:start="161:40" pos:end="161:41">sn</name></expr>;</expr_stmt>



    <expr_stmt pos:start="165:5" pos:end="165:36"><expr pos:start="165:5" pos:end="165:35"><name pos:start="165:5" pos:end="165:7">ret</name> <operator pos:start="165:9" pos:end="165:9">=</operator> <call pos:start="165:11" pos:end="165:35"><name pos:start="165:11" pos:end="165:31">qcow2_write_snapshots</name><argument_list pos:start="165:32" pos:end="165:35">(<argument pos:start="165:33" pos:end="165:34"><expr pos:start="165:33" pos:end="165:34"><name pos:start="165:33" pos:end="165:34">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="177:5"><if pos:start="167:5" pos:end="177:5">if <condition pos:start="167:8" pos:end="167:16">(<expr pos:start="167:9" pos:end="167:15"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:13">&lt;</operator> <literal type="number" pos:start="167:15" pos:end="167:15">0</literal></expr>)</condition> <block pos:start="167:18" pos:end="177:5">{<block_content pos:start="169:9" pos:end="175:18">

        <expr_stmt pos:start="169:9" pos:end="169:29"><expr pos:start="169:9" pos:end="169:28"><call pos:start="169:9" pos:end="169:28"><name pos:start="169:9" pos:end="169:14">g_free</name><argument_list pos:start="169:15" pos:end="169:28">(<argument pos:start="169:16" pos:end="169:27"><expr pos:start="169:16" pos:end="169:27"><name pos:start="169:16" pos:end="169:27"><name pos:start="169:16" pos:end="169:16">s</name><operator pos:start="169:17" pos:end="169:18">-&gt;</operator><name pos:start="169:19" pos:end="169:27">snapshots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:41"><expr pos:start="171:9" pos:end="171:40"><name pos:start="171:9" pos:end="171:20"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:20">snapshots</name></name> <operator pos:start="171:22" pos:end="171:22">=</operator> <name pos:start="171:24" pos:end="171:40">old_snapshot_list</name></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:26"><expr pos:start="173:9" pos:end="173:25"><name pos:start="173:9" pos:end="173:23"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:23">nb_snapshots</name></name><operator pos:start="173:24" pos:end="173:25">--</operator></expr>;</expr_stmt>

        <goto pos:start="175:9" pos:end="175:18">goto <name pos:start="175:14" pos:end="175:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:30"><expr pos:start="181:5" pos:end="181:29"><call pos:start="181:5" pos:end="181:29"><name pos:start="181:5" pos:end="181:10">g_free</name><argument_list pos:start="181:11" pos:end="181:29">(<argument pos:start="181:12" pos:end="181:28"><expr pos:start="181:12" pos:end="181:28"><name pos:start="181:12" pos:end="181:28">old_snapshot_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="185:5" pos:end="187:63">/* The VM state isn't needed any more in the active L1 table; in fact, it

     * hurts by causing expensive COW for the next snapshot. */</comment>

    <expr_stmt pos:start="189:5" pos:end="200:0"><expr pos:start="189:5" pos:end="195:47"><call pos:start="189:5" pos:end="195:47"><name pos:start="189:5" pos:end="189:26">qcow2_discard_clusters</name><argument_list pos:start="189:27" pos:end="195:47">(<argument pos:start="189:28" pos:end="189:29"><expr pos:start="189:28" pos:end="189:29"><name pos:start="189:28" pos:end="189:29">bs</name></expr></argument>, <argument pos:start="189:32" pos:end="189:55"><expr pos:start="189:32" pos:end="189:55"><call pos:start="189:32" pos:end="189:55"><name pos:start="189:32" pos:end="189:52">qcow2_vm_state_offset</name><argument_list pos:start="189:53" pos:end="189:55">(<argument pos:start="189:54" pos:end="189:54"><expr pos:start="189:54" pos:end="189:54"><name pos:start="189:54" pos:end="189:54">s</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="191:28" pos:end="193:51"><expr pos:start="191:28" pos:end="193:51"><call pos:start="191:28" pos:end="191:75"><name pos:start="191:28" pos:end="191:39">align_offset</name><argument_list pos:start="191:40" pos:end="191:75">(<argument pos:start="191:41" pos:end="191:57"><expr pos:start="191:41" pos:end="191:57"><name pos:start="191:41" pos:end="191:57"><name pos:start="191:41" pos:end="191:42">sn</name><operator pos:start="191:43" pos:end="191:44">-&gt;</operator><name pos:start="191:45" pos:end="191:57">vm_state_size</name></name></expr></argument>, <argument pos:start="191:60" pos:end="191:74"><expr pos:start="191:60" pos:end="191:74"><name pos:start="191:60" pos:end="191:74"><name pos:start="191:60" pos:end="191:60">s</name><operator pos:start="191:61" pos:end="191:62">-&gt;</operator><name pos:start="191:63" pos:end="191:74">cluster_size</name></name></expr></argument>)</argument_list></call>

                                <operator pos:start="193:33" pos:end="193:34">&gt;&gt;</operator> <name pos:start="193:36" pos:end="193:51">BDRV_SECTOR_BITS</name></expr></argument>,

                           <argument pos:start="195:28" pos:end="195:46"><expr pos:start="195:28" pos:end="195:46"><name pos:start="195:28" pos:end="195:46">QCOW2_DISCARD_NEVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="199:1" pos:end="199:18">#<cpp:directive pos:start="199:2" pos:end="199:6">ifdef</cpp:directive> <name pos:start="199:8" pos:end="199:18">DEBUG_ALLOC</name></cpp:ifdef>

    <block pos:start="201:5" pos:end="210:0">{<block_content pos:start="203:7" pos:end="205:44">

      <decl_stmt pos:start="203:7" pos:end="203:35"><decl pos:start="203:7" pos:end="203:34"><type pos:start="203:7" pos:end="203:21"><name pos:start="203:7" pos:end="203:21">BdrvCheckResult</name></type> <name pos:start="203:23" pos:end="203:28">result</name> <init pos:start="203:30" pos:end="203:34">= <expr pos:start="203:32" pos:end="203:34"><block pos:start="203:32" pos:end="203:34">{<expr pos:start="203:33" pos:end="203:33"><literal type="number" pos:start="203:33" pos:end="203:33">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

      <expr_stmt pos:start="205:7" pos:end="205:44"><expr pos:start="205:7" pos:end="205:43"><call pos:start="205:7" pos:end="205:43"><name pos:start="205:7" pos:end="205:27">qcow2_check_refcounts</name><argument_list pos:start="205:28" pos:end="205:43">(<argument pos:start="205:29" pos:end="205:30"><expr pos:start="205:29" pos:end="205:30"><name pos:start="205:29" pos:end="205:30">bs</name></expr></argument>, <argument pos:start="205:33" pos:end="205:39"><expr pos:start="205:33" pos:end="205:39"><operator pos:start="205:33" pos:end="205:33">&amp;</operator><name pos:start="205:34" pos:end="205:39">result</name></expr></argument>, <argument pos:start="205:42" pos:end="205:42"><expr pos:start="205:42" pos:end="205:42"><literal type="number" pos:start="205:42" pos:end="205:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="209:1" pos:end="209:6">#<cpp:directive pos:start="209:2" pos:end="209:6">endif</cpp:directive></cpp:endif>

    <return pos:start="211:5" pos:end="211:13">return <expr pos:start="211:12" pos:end="211:12"><literal type="number" pos:start="211:12" pos:end="211:12">0</literal></expr>;</return>



<label pos:start="215:1" pos:end="215:5"><name pos:start="215:1" pos:end="215:4">fail</name>:</label>

    <expr_stmt pos:start="217:5" pos:end="217:23"><expr pos:start="217:5" pos:end="217:22"><call pos:start="217:5" pos:end="217:22"><name pos:start="217:5" pos:end="217:10">g_free</name><argument_list pos:start="217:11" pos:end="217:22">(<argument pos:start="217:12" pos:end="217:21"><expr pos:start="217:12" pos:end="217:21"><name pos:start="217:12" pos:end="217:21"><name pos:start="217:12" pos:end="217:13">sn</name><operator pos:start="217:14" pos:end="217:15">-&gt;</operator><name pos:start="217:16" pos:end="217:21">id_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:21"><expr pos:start="219:5" pos:end="219:20"><call pos:start="219:5" pos:end="219:20"><name pos:start="219:5" pos:end="219:10">g_free</name><argument_list pos:start="219:11" pos:end="219:20">(<argument pos:start="219:12" pos:end="219:19"><expr pos:start="219:12" pos:end="219:19"><name pos:start="219:12" pos:end="219:19"><name pos:start="219:12" pos:end="219:13">sn</name><operator pos:start="219:14" pos:end="219:15">-&gt;</operator><name pos:start="219:16" pos:end="219:19">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:21"><expr pos:start="221:5" pos:end="221:20"><call pos:start="221:5" pos:end="221:20"><name pos:start="221:5" pos:end="221:10">g_free</name><argument_list pos:start="221:11" pos:end="221:20">(<argument pos:start="221:12" pos:end="221:19"><expr pos:start="221:12" pos:end="221:19"><name pos:start="221:12" pos:end="221:19">l1_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="225:5" pos:end="225:15">return <expr pos:start="225:12" pos:end="225:14"><name pos:start="225:12" pos:end="225:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
