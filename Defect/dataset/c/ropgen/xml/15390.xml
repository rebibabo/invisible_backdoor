<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15390.c" pos:tabs="8"><function pos:start="1:1" pos:end="292:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">make_completely_empty</name><parameter_list pos:start="1:33" pos:end="1:54">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:51"><name pos:start="1:34" pos:end="1:49">BlockDriverState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="292:1">{<block_content pos:start="5:5" pos:end="290:15">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">BDRVQcow2State</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:34">= <expr pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:26">bs</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:24">l1_clusters</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">uint64_t</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:26">new_reftable</name> <init pos:start="11:28" pos:end="11:33">= <expr pos:start="11:30" pos:end="11:33"><name pos:start="11:30" pos:end="11:33">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:21">rt_entry</name></decl>, <decl pos:start="13:24" pos:end="13:31"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:24" pos:end="13:31">l1_size2</name></decl>;</decl_stmt>

    <struct pos:start="15:5" pos:end="23:36">struct <block pos:start="15:12" pos:end="23:5">{

        <decl_stmt pos:start="17:9" pos:end="17:27"><decl pos:start="17:9" pos:end="17:26"><type pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:16">uint64_t</name></type> <name pos:start="17:18" pos:end="17:26">l1_offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:33"><decl pos:start="19:9" pos:end="19:32"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint64_t</name></type> <name pos:start="19:18" pos:end="19:32">reftable_offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:35"><decl pos:start="21:9" pos:end="21:34"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">uint32_t</name></type> <name pos:start="21:18" pos:end="21:34">reftable_clusters</name></decl>;</decl_stmt>

    }</block> <decl pos:start="23:7" pos:end="23:35"><name pos:start="23:7" pos:end="23:17">QEMU_PACKED</name> <name pos:start="23:19" pos:end="23:35">l1_ofs_rt_ofs_cls</name></decl>;</struct>



    <expr_stmt pos:start="27:5" pos:end="27:51"><expr pos:start="27:5" pos:end="27:50"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:50"><name pos:start="27:11" pos:end="27:27">qcow2_cache_empty</name><argument_list pos:start="27:28" pos:end="27:50">(<argument pos:start="27:29" pos:end="27:30"><expr pos:start="27:29" pos:end="27:30"><name pos:start="27:29" pos:end="27:30">bs</name></expr></argument>, <argument pos:start="27:33" pos:end="27:49"><expr pos:start="27:33" pos:end="27:49"><name pos:start="27:33" pos:end="27:49"><name pos:start="27:33" pos:end="27:33">s</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:49">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition> <block pos:start="29:18" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:18">

        <goto pos:start="31:9" pos:end="31:18">goto <name pos:start="31:14" pos:end="31:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:57"><expr pos:start="37:5" pos:end="37:56"><name pos:start="37:5" pos:end="37:7">ret</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:56"><name pos:start="37:11" pos:end="37:27">qcow2_cache_empty</name><argument_list pos:start="37:28" pos:end="37:56">(<argument pos:start="37:29" pos:end="37:30"><expr pos:start="37:29" pos:end="37:30"><name pos:start="37:29" pos:end="37:30">bs</name></expr></argument>, <argument pos:start="37:33" pos:end="37:55"><expr pos:start="37:33" pos:end="37:55"><name pos:start="37:33" pos:end="37:55"><name pos:start="37:33" pos:end="37:33">s</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:55">refcount_block_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">&lt;</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>)</condition> <block pos:start="39:18" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:18">

        <goto pos:start="41:9" pos:end="41:18">goto <name pos:start="41:14" pos:end="41:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:42">/* Refcounts will be broken utterly */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:31"><expr pos:start="49:5" pos:end="49:30"><name pos:start="49:5" pos:end="49:7">ret</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="49:30"><name pos:start="49:11" pos:end="49:26">qcow2_mark_dirty</name><argument_list pos:start="49:27" pos:end="49:30">(<argument pos:start="49:28" pos:end="49:29"><expr pos:start="49:28" pos:end="49:29"><name pos:start="49:28" pos:end="49:29">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:16">(<expr pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:11">ret</name> <operator pos:start="51:13" pos:end="51:13">&lt;</operator> <literal type="number" pos:start="51:15" pos:end="51:15">0</literal></expr>)</condition> <block pos:start="51:18" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:18">

        <goto pos:start="53:9" pos:end="53:18">goto <name pos:start="53:14" pos:end="53:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:45"><expr pos:start="59:5" pos:end="59:44"><call pos:start="59:5" pos:end="59:44"><name pos:start="59:5" pos:end="59:16">BLKDBG_EVENT</name><argument_list pos:start="59:17" pos:end="59:44">(<argument pos:start="59:18" pos:end="59:25"><expr pos:start="59:18" pos:end="59:25"><name pos:start="59:18" pos:end="59:25"><name pos:start="59:18" pos:end="59:19">bs</name><operator pos:start="59:20" pos:end="59:21">-&gt;</operator><name pos:start="59:22" pos:end="59:25">file</name></name></expr></argument>, <argument pos:start="59:28" pos:end="59:43"><expr pos:start="59:28" pos:end="59:43"><name pos:start="59:28" pos:end="59:43">BLKDBG_L1_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:79"><expr pos:start="63:5" pos:end="63:78"><name pos:start="63:5" pos:end="63:15">l1_clusters</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <call pos:start="63:19" pos:end="63:78"><name pos:start="63:19" pos:end="63:30">DIV_ROUND_UP</name><argument_list pos:start="63:31" pos:end="63:78">(<argument pos:start="63:32" pos:end="63:41"><expr pos:start="63:32" pos:end="63:41"><name pos:start="63:32" pos:end="63:41"><name pos:start="63:32" pos:end="63:32">s</name><operator pos:start="63:33" pos:end="63:34">-&gt;</operator><name pos:start="63:35" pos:end="63:41">l1_size</name></name></expr></argument>, <argument pos:start="63:44" pos:end="63:77"><expr pos:start="63:44" pos:end="63:77"><name pos:start="63:44" pos:end="63:58"><name pos:start="63:44" pos:end="63:44">s</name><operator pos:start="63:45" pos:end="63:46">-&gt;</operator><name pos:start="63:47" pos:end="63:58">cluster_size</name></name> <operator pos:start="63:60" pos:end="63:60">/</operator> <sizeof pos:start="63:62" pos:end="63:77">sizeof<argument_list pos:start="63:68" pos:end="63:77">(<argument pos:start="63:69" pos:end="63:76"><expr pos:start="63:69" pos:end="63:76"><name pos:start="63:69" pos:end="63:76">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:55"><expr pos:start="65:5" pos:end="65:54"><name pos:start="65:5" pos:end="65:12">l1_size2</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <operator pos:start="65:16" pos:end="65:16">(</operator><name pos:start="65:17" pos:end="65:24">uint64_t</name><operator pos:start="65:25" pos:end="65:25">)</operator><name pos:start="65:26" pos:end="65:35"><name pos:start="65:26" pos:end="65:26">s</name><operator pos:start="65:27" pos:end="65:28">-&gt;</operator><name pos:start="65:29" pos:end="65:35">l1_size</name></name> <operator pos:start="65:37" pos:end="65:37">*</operator> <sizeof pos:start="65:39" pos:end="65:54">sizeof<argument_list pos:start="65:45" pos:end="65:54">(<argument pos:start="65:46" pos:end="65:53"><expr pos:start="65:46" pos:end="65:53"><name pos:start="65:46" pos:end="65:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="71:63">/* After this call, neither the in-memory nor the on-disk refcount

     * information accurately describe the actual references */</comment>



    <expr_stmt pos:start="75:5" pos:end="77:63"><expr pos:start="75:5" pos:end="77:62"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="77:62"><name pos:start="75:11" pos:end="75:28">bdrv_pwrite_zeroes</name><argument_list pos:start="75:29" pos:end="77:62">(<argument pos:start="75:30" pos:end="75:37"><expr pos:start="75:30" pos:end="75:37"><name pos:start="75:30" pos:end="75:37"><name pos:start="75:30" pos:end="75:31">bs</name><operator pos:start="75:32" pos:end="75:33">-&gt;</operator><name pos:start="75:34" pos:end="75:37">file</name></name></expr></argument>, <argument pos:start="75:40" pos:end="75:57"><expr pos:start="75:40" pos:end="75:57"><name pos:start="75:40" pos:end="75:57"><name pos:start="75:40" pos:end="75:40">s</name><operator pos:start="75:41" pos:end="75:42">-&gt;</operator><name pos:start="75:43" pos:end="75:57">l1_table_offset</name></name></expr></argument>,

                             <argument pos:start="77:30" pos:end="77:58"><expr pos:start="77:30" pos:end="77:58"><name pos:start="77:30" pos:end="77:40">l1_clusters</name> <operator pos:start="77:42" pos:end="77:42">*</operator> <name pos:start="77:44" pos:end="77:58"><name pos:start="77:44" pos:end="77:44">s</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:58">cluster_size</name></name></expr></argument>, <argument pos:start="77:61" pos:end="77:61"><expr pos:start="77:61" pos:end="77:61"><literal type="number" pos:start="77:61" pos:end="77:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:16">(<expr pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">&lt;</operator> <literal type="number" pos:start="79:15" pos:end="79:15">0</literal></expr>)</condition> <block pos:start="79:18" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:35">

        <goto pos:start="81:9" pos:end="81:35">goto <name pos:start="81:14" pos:end="81:34">fail_broken_refcounts</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:37"><expr pos:start="85:5" pos:end="85:36"><call pos:start="85:5" pos:end="85:36"><name pos:start="85:5" pos:end="85:10">memset</name><argument_list pos:start="85:11" pos:end="85:36">(<argument pos:start="85:12" pos:end="85:22"><expr pos:start="85:12" pos:end="85:22"><name pos:start="85:12" pos:end="85:22"><name pos:start="85:12" pos:end="85:12">s</name><operator pos:start="85:13" pos:end="85:14">-&gt;</operator><name pos:start="85:15" pos:end="85:22">l1_table</name></name></expr></argument>, <argument pos:start="85:25" pos:end="85:25"><expr pos:start="85:25" pos:end="85:25"><literal type="number" pos:start="85:25" pos:end="85:25">0</literal></expr></argument>, <argument pos:start="85:28" pos:end="85:35"><expr pos:start="85:28" pos:end="85:35"><name pos:start="85:28" pos:end="85:35">l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:55"><expr pos:start="89:5" pos:end="89:54"><call pos:start="89:5" pos:end="89:54"><name pos:start="89:5" pos:end="89:16">BLKDBG_EVENT</name><argument_list pos:start="89:17" pos:end="89:54">(<argument pos:start="89:18" pos:end="89:25"><expr pos:start="89:18" pos:end="89:25"><name pos:start="89:18" pos:end="89:25"><name pos:start="89:18" pos:end="89:19">bs</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:25">file</name></name></expr></argument>, <argument pos:start="89:28" pos:end="89:53"><expr pos:start="89:28" pos:end="89:53"><name pos:start="89:28" pos:end="89:53">BLKDBG_EMPTY_IMAGE_PREPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="93:5" pos:end="101:68">/* Overwrite enough clusters at the beginning of the sectors to place

     * the refcount table, a refcount block and the L1 table in; this may

     * overwrite parts of the existing refcount and L1 table, which is not

     * an issue because the dirty flag is set, complete data loss is in fact

     * desired and partial data loss is consequently fine as well */</comment>

    <expr_stmt pos:start="103:5" pos:end="105:69"><expr pos:start="103:5" pos:end="105:68"><name pos:start="103:5" pos:end="103:7">ret</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <call pos:start="103:11" pos:end="105:68"><name pos:start="103:11" pos:end="103:28">bdrv_pwrite_zeroes</name><argument_list pos:start="103:29" pos:end="105:68">(<argument pos:start="103:30" pos:end="103:37"><expr pos:start="103:30" pos:end="103:37"><name pos:start="103:30" pos:end="103:37"><name pos:start="103:30" pos:end="103:31">bs</name><operator pos:start="103:32" pos:end="103:33">-&gt;</operator><name pos:start="103:34" pos:end="103:37">file</name></name></expr></argument>, <argument pos:start="103:40" pos:end="103:54"><expr pos:start="103:40" pos:end="103:54"><name pos:start="103:40" pos:end="103:54"><name pos:start="103:40" pos:end="103:40">s</name><operator pos:start="103:41" pos:end="103:42">-&gt;</operator><name pos:start="103:43" pos:end="103:54">cluster_size</name></name></expr></argument>,

                             <argument pos:start="105:30" pos:end="105:64"><expr pos:start="105:30" pos:end="105:64"><operator pos:start="105:30" pos:end="105:30">(</operator><literal type="number" pos:start="105:31" pos:end="105:33">2</literal> <operator pos:start="105:33" pos:end="105:33">+</operator> <name pos:start="105:35" pos:end="105:45">l1_clusters</name><operator pos:start="105:46" pos:end="105:46">)</operator> <operator pos:start="105:48" pos:end="105:48">*</operator> <name pos:start="105:50" pos:end="105:64"><name pos:start="105:50" pos:end="105:50">s</name><operator pos:start="105:51" pos:end="105:52">-&gt;</operator><name pos:start="105:53" pos:end="105:64">cluster_size</name></name></expr></argument>, <argument pos:start="105:67" pos:end="105:67"><expr pos:start="105:67" pos:end="105:67"><literal type="number" pos:start="105:67" pos:end="105:67">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="107:5" pos:end="113:18">/* This call (even if it failed overall) may have overwritten on-disk

     * refcount structures; in that case, the in-memory refcount information

     * will probably differ from the on-disk information which makes the BDS

     * unusable */</comment>

    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:16">(<expr pos:start="115:9" pos:end="115:15"><name pos:start="115:9" pos:end="115:11">ret</name> <operator pos:start="115:13" pos:end="115:13">&lt;</operator> <literal type="number" pos:start="115:15" pos:end="115:15">0</literal></expr>)</condition> <block pos:start="115:18" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:35">

        <goto pos:start="117:9" pos:end="117:35">goto <name pos:start="117:14" pos:end="117:34">fail_broken_refcounts</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:45"><expr pos:start="123:5" pos:end="123:44"><call pos:start="123:5" pos:end="123:44"><name pos:start="123:5" pos:end="123:16">BLKDBG_EVENT</name><argument_list pos:start="123:17" pos:end="123:44">(<argument pos:start="123:18" pos:end="123:25"><expr pos:start="123:18" pos:end="123:25"><name pos:start="123:18" pos:end="123:25"><name pos:start="123:18" pos:end="123:19">bs</name><operator pos:start="123:20" pos:end="123:21">-&gt;</operator><name pos:start="123:22" pos:end="123:25">file</name></name></expr></argument>, <argument pos:start="123:28" pos:end="123:43"><expr pos:start="123:28" pos:end="123:43"><name pos:start="123:28" pos:end="123:43">BLKDBG_L1_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:51"><expr pos:start="125:5" pos:end="125:50"><call pos:start="125:5" pos:end="125:50"><name pos:start="125:5" pos:end="125:16">BLKDBG_EVENT</name><argument_list pos:start="125:17" pos:end="125:50">(<argument pos:start="125:18" pos:end="125:25"><expr pos:start="125:18" pos:end="125:25"><name pos:start="125:18" pos:end="125:25"><name pos:start="125:18" pos:end="125:19">bs</name><operator pos:start="125:20" pos:end="125:21">-&gt;</operator><name pos:start="125:22" pos:end="125:25">file</name></name></expr></argument>, <argument pos:start="125:28" pos:end="125:49"><expr pos:start="125:28" pos:end="125:49"><name pos:start="125:28" pos:end="125:49">BLKDBG_REFTABLE_UPDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="133:74">/* "Create" an empty reftable (one cluster) directly after the image

     * header and an empty L1 table three clusters after the image header;

     * the cluster between those two will be used as the first refblock */</comment>

    <expr_stmt pos:start="135:5" pos:end="135:67"><expr pos:start="135:5" pos:end="135:66"><name pos:start="135:5" pos:end="135:31"><name pos:start="135:5" pos:end="135:21">l1_ofs_rt_ofs_cls</name><operator pos:start="135:22" pos:end="135:22">.</operator><name pos:start="135:23" pos:end="135:31">l1_offset</name></name> <operator pos:start="135:33" pos:end="135:33">=</operator> <call pos:start="135:35" pos:end="135:66"><name pos:start="135:35" pos:end="135:45">cpu_to_be64</name><argument_list pos:start="135:46" pos:end="135:66">(<argument pos:start="135:47" pos:end="135:65"><expr pos:start="135:47" pos:end="135:65"><literal type="number" pos:start="135:47" pos:end="135:47">3</literal> <operator pos:start="135:49" pos:end="135:49">*</operator> <name pos:start="135:51" pos:end="135:65"><name pos:start="135:51" pos:end="135:51">s</name><operator pos:start="135:52" pos:end="135:53">-&gt;</operator><name pos:start="135:54" pos:end="135:65">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:69"><expr pos:start="137:5" pos:end="137:68"><name pos:start="137:5" pos:end="137:37"><name pos:start="137:5" pos:end="137:21">l1_ofs_rt_ofs_cls</name><operator pos:start="137:22" pos:end="137:22">.</operator><name pos:start="137:23" pos:end="137:37">reftable_offset</name></name> <operator pos:start="137:39" pos:end="137:39">=</operator> <call pos:start="137:41" pos:end="137:68"><name pos:start="137:41" pos:end="137:51">cpu_to_be64</name><argument_list pos:start="137:52" pos:end="137:68">(<argument pos:start="137:53" pos:end="137:67"><expr pos:start="137:53" pos:end="137:67"><name pos:start="137:53" pos:end="137:67"><name pos:start="137:53" pos:end="137:53">s</name><operator pos:start="137:54" pos:end="137:55">-&gt;</operator><name pos:start="137:56" pos:end="137:67">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:57"><expr pos:start="139:5" pos:end="139:56"><name pos:start="139:5" pos:end="139:39"><name pos:start="139:5" pos:end="139:21">l1_ofs_rt_ofs_cls</name><operator pos:start="139:22" pos:end="139:22">.</operator><name pos:start="139:23" pos:end="139:39">reftable_clusters</name></name> <operator pos:start="139:41" pos:end="139:41">=</operator> <call pos:start="139:43" pos:end="139:56"><name pos:start="139:43" pos:end="139:53">cpu_to_be32</name><argument_list pos:start="139:54" pos:end="139:56">(<argument pos:start="139:55" pos:end="139:55"><expr pos:start="139:55" pos:end="139:55"><literal type="number" pos:start="139:55" pos:end="139:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="143:74"><expr pos:start="141:5" pos:end="143:73"><name pos:start="141:5" pos:end="141:7">ret</name> <operator pos:start="141:9" pos:end="141:9">=</operator> <call pos:start="141:11" pos:end="143:73"><name pos:start="141:11" pos:end="141:26">bdrv_pwrite_sync</name><argument_list pos:start="141:27" pos:end="143:73">(<argument pos:start="141:28" pos:end="141:35"><expr pos:start="141:28" pos:end="141:35"><name pos:start="141:28" pos:end="141:35"><name pos:start="141:28" pos:end="141:29">bs</name><operator pos:start="141:30" pos:end="141:31">-&gt;</operator><name pos:start="141:32" pos:end="141:35">file</name></name></expr></argument>, <argument pos:start="141:38" pos:end="141:74"><expr pos:start="141:38" pos:end="141:74"><call pos:start="141:38" pos:end="141:74"><name pos:start="141:38" pos:end="141:45">offsetof</name><argument_list pos:start="141:46" pos:end="141:74">(<argument pos:start="141:47" pos:end="141:56"><expr pos:start="141:47" pos:end="141:56"><name pos:start="141:47" pos:end="141:56">QCowHeader</name></expr></argument>, <argument pos:start="141:59" pos:end="141:73"><expr pos:start="141:59" pos:end="141:73"><name pos:start="141:59" pos:end="141:73">l1_table_offset</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="143:28" pos:end="143:45"><expr pos:start="143:28" pos:end="143:45"><operator pos:start="143:28" pos:end="143:28">&amp;</operator><name pos:start="143:29" pos:end="143:45">l1_ofs_rt_ofs_cls</name></expr></argument>, <argument pos:start="143:48" pos:end="143:72"><expr pos:start="143:48" pos:end="143:72"><sizeof pos:start="143:48" pos:end="143:72">sizeof<argument_list pos:start="143:54" pos:end="143:72">(<argument pos:start="143:55" pos:end="143:71"><expr pos:start="143:55" pos:end="143:71"><name pos:start="143:55" pos:end="143:71">l1_ofs_rt_ofs_cls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:16">(<expr pos:start="145:9" pos:end="145:15"><name pos:start="145:9" pos:end="145:11">ret</name> <operator pos:start="145:13" pos:end="145:13">&lt;</operator> <literal type="number" pos:start="145:15" pos:end="145:15">0</literal></expr>)</condition> <block pos:start="145:18" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:35">

        <goto pos:start="147:9" pos:end="147:35">goto <name pos:start="147:14" pos:end="147:34">fail_broken_refcounts</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:45"><expr pos:start="153:5" pos:end="153:44"><name pos:start="153:5" pos:end="153:22"><name pos:start="153:5" pos:end="153:5">s</name><operator pos:start="153:6" pos:end="153:7">-&gt;</operator><name pos:start="153:8" pos:end="153:22">l1_table_offset</name></name> <operator pos:start="153:24" pos:end="153:24">=</operator> <literal type="number" pos:start="153:26" pos:end="153:26">3</literal> <operator pos:start="153:28" pos:end="153:28">*</operator> <name pos:start="153:30" pos:end="153:44"><name pos:start="153:30" pos:end="153:30">s</name><operator pos:start="153:31" pos:end="153:32">-&gt;</operator><name pos:start="153:33" pos:end="153:44">cluster_size</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:76"><expr pos:start="157:5" pos:end="157:75"><name pos:start="157:5" pos:end="157:16">new_reftable</name> <operator pos:start="157:18" pos:end="157:18">=</operator> <call pos:start="157:20" pos:end="157:75"><name pos:start="157:20" pos:end="157:29">g_try_new0</name><argument_list pos:start="157:30" pos:end="157:75">(<argument pos:start="157:31" pos:end="157:38"><expr pos:start="157:31" pos:end="157:38"><name pos:start="157:31" pos:end="157:38">uint64_t</name></expr></argument>, <argument pos:start="157:41" pos:end="157:74"><expr pos:start="157:41" pos:end="157:74"><name pos:start="157:41" pos:end="157:55"><name pos:start="157:41" pos:end="157:41">s</name><operator pos:start="157:42" pos:end="157:43">-&gt;</operator><name pos:start="157:44" pos:end="157:55">cluster_size</name></name> <operator pos:start="157:57" pos:end="157:57">/</operator> <sizeof pos:start="157:59" pos:end="157:74">sizeof<argument_list pos:start="157:65" pos:end="157:74">(<argument pos:start="157:66" pos:end="157:73"><expr pos:start="157:66" pos:end="157:73"><name pos:start="157:66" pos:end="157:73">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="165:5"><if pos:start="159:5" pos:end="165:5">if <condition pos:start="159:8" pos:end="159:22">(<expr pos:start="159:9" pos:end="159:21"><operator pos:start="159:9" pos:end="159:9">!</operator><name pos:start="159:10" pos:end="159:21">new_reftable</name></expr>)</condition> <block pos:start="159:24" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:35">

        <expr_stmt pos:start="161:9" pos:end="161:22"><expr pos:start="161:9" pos:end="161:21"><name pos:start="161:9" pos:end="161:11">ret</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <operator pos:start="161:15" pos:end="161:15">-</operator><name pos:start="161:16" pos:end="161:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="163:9" pos:end="163:35">goto <name pos:start="163:14" pos:end="163:34">fail_broken_refcounts</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:47"><expr pos:start="169:5" pos:end="169:46"><name pos:start="169:5" pos:end="169:28"><name pos:start="169:5" pos:end="169:5">s</name><operator pos:start="169:6" pos:end="169:7">-&gt;</operator><name pos:start="169:8" pos:end="169:28">refcount_table_offset</name></name> <operator pos:start="169:30" pos:end="169:30">=</operator> <name pos:start="169:32" pos:end="169:46"><name pos:start="169:32" pos:end="169:32">s</name><operator pos:start="169:33" pos:end="169:34">-&gt;</operator><name pos:start="169:35" pos:end="169:46">cluster_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:66"><expr pos:start="171:5" pos:end="171:65"><name pos:start="171:5" pos:end="171:26"><name pos:start="171:5" pos:end="171:5">s</name><operator pos:start="171:6" pos:end="171:7">-&gt;</operator><name pos:start="171:8" pos:end="171:26">refcount_table_size</name></name>   <operator pos:start="171:30" pos:end="171:30">=</operator> <name pos:start="171:32" pos:end="171:46"><name pos:start="171:32" pos:end="171:32">s</name><operator pos:start="171:33" pos:end="171:34">-&gt;</operator><name pos:start="171:35" pos:end="171:46">cluster_size</name></name> <operator pos:start="171:48" pos:end="171:48">/</operator> <sizeof pos:start="171:50" pos:end="171:65">sizeof<argument_list pos:start="171:56" pos:end="171:65">(<argument pos:start="171:57" pos:end="171:64"><expr pos:start="171:57" pos:end="171:64"><name pos:start="171:57" pos:end="171:64">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>




    <expr_stmt pos:start="176:5" pos:end="176:30"><expr pos:start="176:5" pos:end="176:29"><call pos:start="176:5" pos:end="176:29"><name pos:start="176:5" pos:end="176:10">g_free</name><argument_list pos:start="176:11" pos:end="176:29">(<argument pos:start="176:12" pos:end="176:28"><expr pos:start="176:12" pos:end="176:28"><name pos:start="176:12" pos:end="176:28"><name pos:start="176:12" pos:end="176:12">s</name><operator pos:start="176:13" pos:end="176:14">-&gt;</operator><name pos:start="176:15" pos:end="176:28">refcount_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="178:5" pos:end="178:37"><expr pos:start="178:5" pos:end="178:36"><name pos:start="178:5" pos:end="178:21"><name pos:start="178:5" pos:end="178:5">s</name><operator pos:start="178:6" pos:end="178:7">-&gt;</operator><name pos:start="178:8" pos:end="178:21">refcount_table</name></name> <operator pos:start="178:23" pos:end="178:23">=</operator> <name pos:start="178:25" pos:end="178:36">new_reftable</name></expr>;</expr_stmt>

    <expr_stmt pos:start="180:5" pos:end="180:24"><expr pos:start="180:5" pos:end="180:23"><name pos:start="180:5" pos:end="180:16">new_reftable</name> <operator pos:start="180:18" pos:end="180:18">=</operator> <name pos:start="180:20" pos:end="180:23">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="184:5" pos:end="192:53">/* Now the in-memory refcount information again corresponds to the on-disk

     * information (reftable is empty and no refblocks (the refblock cache is

     * empty)); however, this means some clusters (e.g. the image header) are

     * referenced, but not refcounted, but the normal qcow2 code assumes that

     * the in-memory information is always correct */</comment>



    <expr_stmt pos:start="196:5" pos:end="196:50"><expr pos:start="196:5" pos:end="196:49"><call pos:start="196:5" pos:end="196:49"><name pos:start="196:5" pos:end="196:16">BLKDBG_EVENT</name><argument_list pos:start="196:17" pos:end="196:49">(<argument pos:start="196:18" pos:end="196:25"><expr pos:start="196:18" pos:end="196:25"><name pos:start="196:18" pos:end="196:25"><name pos:start="196:18" pos:end="196:19">bs</name><operator pos:start="196:20" pos:end="196:21">-&gt;</operator><name pos:start="196:22" pos:end="196:25">file</name></name></expr></argument>, <argument pos:start="196:28" pos:end="196:48"><expr pos:start="196:28" pos:end="196:48"><name pos:start="196:28" pos:end="196:48">BLKDBG_REFBLOCK_ALLOC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="200:5" pos:end="200:52">/* Enter the first refblock into the reftable */</comment>

    <expr_stmt pos:start="202:5" pos:end="202:48"><expr pos:start="202:5" pos:end="202:47"><name pos:start="202:5" pos:end="202:12">rt_entry</name> <operator pos:start="202:14" pos:end="202:14">=</operator> <call pos:start="202:16" pos:end="202:47"><name pos:start="202:16" pos:end="202:26">cpu_to_be64</name><argument_list pos:start="202:27" pos:end="202:47">(<argument pos:start="202:28" pos:end="202:46"><expr pos:start="202:28" pos:end="202:46"><literal type="number" pos:start="202:28" pos:end="202:28">2</literal> <operator pos:start="202:30" pos:end="202:30">*</operator> <name pos:start="202:32" pos:end="202:46"><name pos:start="202:32" pos:end="202:32">s</name><operator pos:start="202:33" pos:end="202:34">-&gt;</operator><name pos:start="202:35" pos:end="202:46">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="204:5" pos:end="206:56"><expr pos:start="204:5" pos:end="206:55"><name pos:start="204:5" pos:end="204:7">ret</name> <operator pos:start="204:9" pos:end="204:9">=</operator> <call pos:start="204:11" pos:end="206:55"><name pos:start="204:11" pos:end="204:26">bdrv_pwrite_sync</name><argument_list pos:start="204:27" pos:end="206:55">(<argument pos:start="204:28" pos:end="204:35"><expr pos:start="204:28" pos:end="204:35"><name pos:start="204:28" pos:end="204:35"><name pos:start="204:28" pos:end="204:29">bs</name><operator pos:start="204:30" pos:end="204:31">-&gt;</operator><name pos:start="204:32" pos:end="204:35">file</name></name></expr></argument>, <argument pos:start="204:38" pos:end="204:52"><expr pos:start="204:38" pos:end="204:52"><name pos:start="204:38" pos:end="204:52"><name pos:start="204:38" pos:end="204:38">s</name><operator pos:start="204:39" pos:end="204:40">-&gt;</operator><name pos:start="204:41" pos:end="204:52">cluster_size</name></name></expr></argument>,

                           <argument pos:start="206:28" pos:end="206:36"><expr pos:start="206:28" pos:end="206:36"><operator pos:start="206:28" pos:end="206:28">&amp;</operator><name pos:start="206:29" pos:end="206:36">rt_entry</name></expr></argument>, <argument pos:start="206:39" pos:end="206:54"><expr pos:start="206:39" pos:end="206:54"><sizeof pos:start="206:39" pos:end="206:54">sizeof<argument_list pos:start="206:45" pos:end="206:54">(<argument pos:start="206:46" pos:end="206:53"><expr pos:start="206:46" pos:end="206:53"><name pos:start="206:46" pos:end="206:53">rt_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="208:5" pos:end="212:5"><if pos:start="208:5" pos:end="212:5">if <condition pos:start="208:8" pos:end="208:16">(<expr pos:start="208:9" pos:end="208:15"><name pos:start="208:9" pos:end="208:11">ret</name> <operator pos:start="208:13" pos:end="208:13">&lt;</operator> <literal type="number" pos:start="208:15" pos:end="208:15">0</literal></expr>)</condition> <block pos:start="208:18" pos:end="212:5">{<block_content pos:start="210:9" pos:end="210:35">

        <goto pos:start="210:9" pos:end="210:35">goto <name pos:start="210:14" pos:end="210:34">fail_broken_refcounts</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="214:5" pos:end="214:47"><expr pos:start="214:5" pos:end="214:46"><name pos:start="214:5" pos:end="214:24"><name pos:start="214:5" pos:end="214:5">s</name><operator pos:start="214:6" pos:end="214:7">-&gt;</operator><name pos:start="214:8" pos:end="214:21">refcount_table</name><index pos:start="214:22" pos:end="214:24">[<expr pos:start="214:23" pos:end="214:23"><literal type="number" pos:start="214:23" pos:end="214:23">0</literal></expr>]</index></name> <operator pos:start="214:26" pos:end="214:26">=</operator> <literal type="number" pos:start="214:28" pos:end="214:28">2</literal> <operator pos:start="214:30" pos:end="214:30">*</operator> <name pos:start="214:32" pos:end="214:46"><name pos:start="214:32" pos:end="214:32">s</name><operator pos:start="214:33" pos:end="214:34">-&gt;</operator><name pos:start="214:35" pos:end="214:46">cluster_size</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="218:5" pos:end="218:30"><expr pos:start="218:5" pos:end="218:29"><name pos:start="218:5" pos:end="218:25"><name pos:start="218:5" pos:end="218:5">s</name><operator pos:start="218:6" pos:end="218:7">-&gt;</operator><name pos:start="218:8" pos:end="218:25">free_cluster_index</name></name> <operator pos:start="218:27" pos:end="218:27">=</operator> <literal type="number" pos:start="218:29" pos:end="218:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="220:5" pos:end="220:54"><expr pos:start="220:5" pos:end="220:53"><call pos:start="220:5" pos:end="220:53"><name pos:start="220:5" pos:end="220:10">assert</name><argument_list pos:start="220:11" pos:end="220:53">(<argument pos:start="220:12" pos:end="220:52"><expr pos:start="220:12" pos:end="220:52"><literal type="number" pos:start="220:12" pos:end="220:14">3</literal> <operator pos:start="220:14" pos:end="220:14">+</operator> <name pos:start="220:16" pos:end="220:26">l1_clusters</name> <operator pos:start="220:28" pos:end="220:29">&lt;=</operator> <name pos:start="220:31" pos:end="220:52"><name pos:start="220:31" pos:end="220:31">s</name><operator pos:start="220:32" pos:end="220:33">-&gt;</operator><name pos:start="220:34" pos:end="220:52">refcount_block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="222:5" pos:end="222:70"><expr pos:start="222:5" pos:end="222:69"><name pos:start="222:5" pos:end="222:10">offset</name> <operator pos:start="222:12" pos:end="222:12">=</operator> <call pos:start="222:14" pos:end="222:69"><name pos:start="222:14" pos:end="222:33">qcow2_alloc_clusters</name><argument_list pos:start="222:34" pos:end="222:69">(<argument pos:start="222:35" pos:end="222:36"><expr pos:start="222:35" pos:end="222:36"><name pos:start="222:35" pos:end="222:36">bs</name></expr></argument>, <argument pos:start="222:39" pos:end="222:68"><expr pos:start="222:39" pos:end="222:68"><literal type="number" pos:start="222:39" pos:end="222:39">3</literal> <operator pos:start="222:41" pos:end="222:41">*</operator> <name pos:start="222:43" pos:end="222:57"><name pos:start="222:43" pos:end="222:43">s</name><operator pos:start="222:44" pos:end="222:45">-&gt;</operator><name pos:start="222:46" pos:end="222:57">cluster_size</name></name> <operator pos:start="222:59" pos:end="222:59">+</operator> <name pos:start="222:61" pos:end="222:68">l1_size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="224:5" pos:end="236:5"><if pos:start="224:5" pos:end="230:5">if <condition pos:start="224:8" pos:end="224:19">(<expr pos:start="224:9" pos:end="224:18"><name pos:start="224:9" pos:end="224:14">offset</name> <operator pos:start="224:16" pos:end="224:16">&lt;</operator> <literal type="number" pos:start="224:18" pos:end="224:18">0</literal></expr>)</condition> <block pos:start="224:21" pos:end="230:5">{<block_content pos:start="226:9" pos:end="228:35">

        <expr_stmt pos:start="226:9" pos:end="226:21"><expr pos:start="226:9" pos:end="226:20"><name pos:start="226:9" pos:end="226:11">ret</name> <operator pos:start="226:13" pos:end="226:13">=</operator> <name pos:start="226:15" pos:end="226:20">offset</name></expr>;</expr_stmt>

        <goto pos:start="228:9" pos:end="228:35">goto <name pos:start="228:14" pos:end="228:34">fail_broken_refcounts</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="230:7" pos:end="236:5">else if <condition pos:start="230:15" pos:end="230:26">(<expr pos:start="230:16" pos:end="230:25"><name pos:start="230:16" pos:end="230:21">offset</name> <operator pos:start="230:23" pos:end="230:23">&gt;</operator> <literal type="number" pos:start="230:25" pos:end="230:25">0</literal></expr>)</condition> <block pos:start="230:28" pos:end="236:5">{<block_content pos:start="232:9" pos:end="234:16">

        <expr_stmt pos:start="232:9" pos:end="232:65"><expr pos:start="232:9" pos:end="232:64"><call pos:start="232:9" pos:end="232:64"><name pos:start="232:9" pos:end="232:20">error_report</name><argument_list pos:start="232:21" pos:end="232:64">(<argument pos:start="232:22" pos:end="232:63"><expr pos:start="232:22" pos:end="232:63"><literal type="string" pos:start="232:22" pos:end="232:63">"First cluster in emptied image is in use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="234:9" pos:end="234:16"><expr pos:start="234:9" pos:end="234:15"><call pos:start="234:9" pos:end="234:15"><name pos:start="234:9" pos:end="234:13">abort</name><argument_list pos:start="234:14" pos:end="234:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="240:5" pos:end="242:35">/* Now finally the in-memory information corresponds to the on-disk

     * structures and is correct */</comment>

    <expr_stmt pos:start="244:5" pos:end="244:31"><expr pos:start="244:5" pos:end="244:30"><name pos:start="244:5" pos:end="244:7">ret</name> <operator pos:start="244:9" pos:end="244:9">=</operator> <call pos:start="244:11" pos:end="244:30"><name pos:start="244:11" pos:end="244:26">qcow2_mark_clean</name><argument_list pos:start="244:27" pos:end="244:30">(<argument pos:start="244:28" pos:end="244:29"><expr pos:start="244:28" pos:end="244:29"><name pos:start="244:28" pos:end="244:29">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="246:5" pos:end="250:5"><if pos:start="246:5" pos:end="250:5">if <condition pos:start="246:8" pos:end="246:16">(<expr pos:start="246:9" pos:end="246:15"><name pos:start="246:9" pos:end="246:11">ret</name> <operator pos:start="246:13" pos:end="246:13">&lt;</operator> <literal type="number" pos:start="246:15" pos:end="246:15">0</literal></expr>)</condition> <block pos:start="246:18" pos:end="250:5">{<block_content pos:start="248:9" pos:end="248:18">

        <goto pos:start="248:9" pos:end="248:18">goto <name pos:start="248:14" pos:end="248:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="254:5" pos:end="254:75"><expr pos:start="254:5" pos:end="254:74"><name pos:start="254:5" pos:end="254:7">ret</name> <operator pos:start="254:9" pos:end="254:9">=</operator> <call pos:start="254:11" pos:end="254:74"><name pos:start="254:11" pos:end="254:23">bdrv_truncate</name><argument_list pos:start="254:24" pos:end="254:74">(<argument pos:start="254:25" pos:end="254:36"><expr pos:start="254:25" pos:end="254:36"><name pos:start="254:25" pos:end="254:36"><name pos:start="254:25" pos:end="254:26">bs</name><operator pos:start="254:27" pos:end="254:28">-&gt;</operator><name pos:start="254:29" pos:end="254:32">file</name><operator pos:start="254:33" pos:end="254:34">-&gt;</operator><name pos:start="254:35" pos:end="254:36">bs</name></name></expr></argument>, <argument pos:start="254:39" pos:end="254:73"><expr pos:start="254:39" pos:end="254:73"><operator pos:start="254:39" pos:end="254:39">(</operator><literal type="number" pos:start="254:40" pos:end="254:42">3</literal> <operator pos:start="254:42" pos:end="254:42">+</operator> <name pos:start="254:44" pos:end="254:54">l1_clusters</name><operator pos:start="254:55" pos:end="254:55">)</operator> <operator pos:start="254:57" pos:end="254:57">*</operator> <name pos:start="254:59" pos:end="254:73"><name pos:start="254:59" pos:end="254:59">s</name><operator pos:start="254:60" pos:end="254:61">-&gt;</operator><name pos:start="254:62" pos:end="254:73">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="256:5" pos:end="260:5"><if pos:start="256:5" pos:end="260:5">if <condition pos:start="256:8" pos:end="256:16">(<expr pos:start="256:9" pos:end="256:15"><name pos:start="256:9" pos:end="256:11">ret</name> <operator pos:start="256:13" pos:end="256:13">&lt;</operator> <literal type="number" pos:start="256:15" pos:end="256:15">0</literal></expr>)</condition> <block pos:start="256:18" pos:end="260:5">{<block_content pos:start="258:9" pos:end="258:18">

        <goto pos:start="258:9" pos:end="258:18">goto <name pos:start="258:14" pos:end="258:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="264:5" pos:end="264:13">return <expr pos:start="264:12" pos:end="264:12"><literal type="number" pos:start="264:12" pos:end="264:12">0</literal></expr>;</return>



<label pos:start="268:1" pos:end="268:22"><name pos:start="268:1" pos:end="268:21">fail_broken_refcounts</name>:</label>

    <comment type="block" pos:start="270:5" pos:end="280:78">/* The BDS is unusable at this point. If we wanted to make it usable, we

     * would have to call qcow2_refcount_close(), qcow2_refcount_init(),

     * qcow2_check_refcounts(), qcow2_refcount_close() and qcow2_refcount_init()

     * again. However, because the functions which could have caused this error

     * path to be taken are used by those functions as well, it's very likely

     * that that sequence will fail as well. Therefore, just eject the BDS. */</comment>

    <expr_stmt pos:start="282:5" pos:end="282:19"><expr pos:start="282:5" pos:end="282:18"><name pos:start="282:5" pos:end="282:11"><name pos:start="282:5" pos:end="282:6">bs</name><operator pos:start="282:7" pos:end="282:8">-&gt;</operator><name pos:start="282:9" pos:end="282:11">drv</name></name> <operator pos:start="282:13" pos:end="282:13">=</operator> <name pos:start="282:15" pos:end="282:18">NULL</name></expr>;</expr_stmt>



<label pos:start="286:1" pos:end="286:5"><name pos:start="286:1" pos:end="286:4">fail</name>:</label>

    <expr_stmt pos:start="288:5" pos:end="288:25"><expr pos:start="288:5" pos:end="288:24"><call pos:start="288:5" pos:end="288:24"><name pos:start="288:5" pos:end="288:10">g_free</name><argument_list pos:start="288:11" pos:end="288:24">(<argument pos:start="288:12" pos:end="288:23"><expr pos:start="288:12" pos:end="288:23"><name pos:start="288:12" pos:end="288:23">new_reftable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="290:5" pos:end="290:15">return <expr pos:start="290:12" pos:end="290:14"><name pos:start="290:12" pos:end="290:14">ret</name></expr>;</return>

</block_content>}</block></function></unit>
