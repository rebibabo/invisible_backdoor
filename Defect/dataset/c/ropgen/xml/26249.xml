<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26249.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">ff_audio_mix_get_matrix</name><parameter_list pos:start="1:28" pos:end="1:69">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:36">AudioMix</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">am</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:48">double</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:56">matrix</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:68"><decl pos:start="1:59" pos:end="1:68"><type pos:start="1:59" pos:end="1:68"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:68">stride</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:13">

    <decl_stmt pos:start="5:5" pos:end="5:13"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:12"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:12">o</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="36:0"><if pos:start="9:5" pos:end="36:0">if <condition pos:start="9:8" pos:end="11:76">( <expr pos:start="9:10" pos:end="11:75"><name pos:start="9:10" pos:end="9:24"><name pos:start="9:10" pos:end="9:11">am</name><operator pos:start="9:12" pos:end="9:13">-&gt;</operator><name pos:start="9:14" pos:end="9:24">in_channels</name></name> <operator pos:start="9:26" pos:end="9:27">&lt;=</operator> <literal type="number" pos:start="9:29" pos:end="9:29">0</literal> <operator pos:start="9:31" pos:end="9:32">||</operator>  <name pos:start="9:35" pos:end="9:49"><name pos:start="9:35" pos:end="9:36">am</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:49">in_channels</name></name> <operator pos:start="9:51" pos:end="9:51">&gt;</operator> <name pos:start="9:53" pos:end="9:75">AVRESAMPLE_MAX_CHANNELS</name> <operator pos:start="9:77" pos:end="9:78">||</operator>

        <name pos:start="11:9" pos:end="11:24"><name pos:start="11:9" pos:end="11:10">am</name><operator pos:start="11:11" pos:end="11:12">-&gt;</operator><name pos:start="11:13" pos:end="11:24">out_channels</name></name> <operator pos:start="11:26" pos:end="11:27">&lt;=</operator> <literal type="number" pos:start="11:29" pos:end="11:29">0</literal> <operator pos:start="11:31" pos:end="11:32">||</operator> <name pos:start="11:34" pos:end="11:49"><name pos:start="11:34" pos:end="11:35">am</name><operator pos:start="11:36" pos:end="11:37">-&gt;</operator><name pos:start="11:38" pos:end="11:49">out_channels</name></name> <operator pos:start="11:51" pos:end="11:51">&gt;</operator> <name pos:start="11:53" pos:end="11:75">AVRESAMPLE_MAX_CHANNELS</name></expr>)</condition> <block pos:start="11:78" pos:end="36:0">{<block_content pos:start="13:9" pos:end="15:31">

        <expr_stmt pos:start="13:9" pos:end="13:61"><expr pos:start="13:9" pos:end="13:60"><call pos:start="13:9" pos:end="13:60"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="13:60">(<argument pos:start="13:16" pos:end="13:17"><expr pos:start="13:16" pos:end="13:17"><name pos:start="13:16" pos:end="13:17">am</name></expr></argument>, <argument pos:start="13:20" pos:end="13:31"><expr pos:start="13:20" pos:end="13:31"><name pos:start="13:20" pos:end="13:31">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:34" pos:end="13:59"><expr pos:start="13:34" pos:end="13:59"><literal type="string" pos:start="13:34" pos:end="13:59">"Invalid channel counts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:31">return <expr pos:start="15:16" pos:end="15:30"><call pos:start="15:16" pos:end="15:30"><name pos:start="15:16" pos:end="15:22">AVERROR</name><argument_list pos:start="15:23" pos:end="15:30">(<argument pos:start="15:24" pos:end="15:29"><expr pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



<cpp:define pos:start="21:1" pos:end="35:75">#<cpp:directive pos:start="21:2" pos:end="21:7">define</cpp:directive> <cpp:macro pos:start="21:9" pos:end="21:41"><name pos:start="21:9" pos:end="21:26">GET_MATRIX_CONVERT</name><parameter_list pos:start="21:27" pos:end="21:41">(<parameter pos:start="21:28" pos:end="21:33"><type pos:start="21:28" pos:end="21:33"><name pos:start="21:28" pos:end="21:33">suffix</name></type></parameter>, <parameter pos:start="21:36" pos:end="21:40"><type pos:start="21:36" pos:end="21:40"><name pos:start="21:36" pos:end="21:40">scale</name></type></parameter>)</parameter_list></cpp:macro>                                   \

    <cpp:value pos:start="23:5" pos:end="35:75">if (!am-&gt;matrix_ ## suffix[0]) {                                        \

        av_log(am, AV_LOG_ERROR, "matrix is not set\n");                    \

        return AVERROR(EINVAL);                                             \

    }                                                                       \

    for (o = 0; o &lt; am-&gt;out_channels; o++)                                  \

        for (i = 0; i &lt; am-&gt;in_channels; i++)                               \

            matrix[o * stride + i] = am-&gt;matrix_ ## suffix[o][i] * (scale);</cpp:value></cpp:define>



    <switch pos:start="39:5" pos:end="65:5">switch <condition pos:start="39:12" pos:end="39:27">(<expr pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:26"><name pos:start="39:13" pos:end="39:14">am</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:26">coeff_type</name></name></expr>)</condition> <block pos:start="39:29" pos:end="65:5">{<block_content pos:start="41:5" pos:end="63:31">

    <case pos:start="41:5" pos:end="41:30">case <expr pos:start="41:10" pos:end="41:29"><name pos:start="41:10" pos:end="41:29">AV_MIX_COEFF_TYPE_Q8</name></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:44"><expr pos:start="43:9" pos:end="43:43"><call pos:start="43:9" pos:end="43:43"><name pos:start="43:9" pos:end="43:26">GET_MATRIX_CONVERT</name><argument_list pos:start="43:27" pos:end="43:43">(<argument pos:start="43:28" pos:end="43:29"><expr pos:start="43:28" pos:end="43:29"><name pos:start="43:28" pos:end="43:29">q8</name></expr></argument>, <argument pos:start="43:32" pos:end="43:42"><expr pos:start="43:32" pos:end="43:42"><literal type="number" pos:start="43:32" pos:end="43:34">1.0</literal> <operator pos:start="43:36" pos:end="43:36">/</operator> <literal type="number" pos:start="43:38" pos:end="43:42">256.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:31">case <expr pos:start="47:10" pos:end="47:30"><name pos:start="47:10" pos:end="47:30">AV_MIX_COEFF_TYPE_Q15</name></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:47"><expr pos:start="49:9" pos:end="49:46"><call pos:start="49:9" pos:end="49:46"><name pos:start="49:9" pos:end="49:26">GET_MATRIX_CONVERT</name><argument_list pos:start="49:27" pos:end="49:46">(<argument pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><name pos:start="49:28" pos:end="49:30">q15</name></expr></argument>, <argument pos:start="49:33" pos:end="49:45"><expr pos:start="49:33" pos:end="49:45"><literal type="number" pos:start="49:33" pos:end="49:35">1.0</literal> <operator pos:start="49:37" pos:end="49:37">/</operator> <literal type="number" pos:start="49:39" pos:end="49:45">32768.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <case pos:start="53:5" pos:end="53:31">case <expr pos:start="53:10" pos:end="53:30"><name pos:start="53:10" pos:end="53:30">AV_MIX_COEFF_TYPE_FLT</name></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:37"><expr pos:start="55:9" pos:end="55:36"><call pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:26">GET_MATRIX_CONVERT</name><argument_list pos:start="55:27" pos:end="55:36">(<argument pos:start="55:28" pos:end="55:30"><expr pos:start="55:28" pos:end="55:30"><name pos:start="55:28" pos:end="55:30">flt</name></expr></argument>, <argument pos:start="55:33" pos:end="55:35"><expr pos:start="55:33" pos:end="55:35"><literal type="number" pos:start="55:33" pos:end="55:35">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <default pos:start="59:5" pos:end="59:12">default:</default>

        <expr_stmt pos:start="61:9" pos:end="61:61"><expr pos:start="61:9" pos:end="61:60"><call pos:start="61:9" pos:end="61:60"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="61:60">(<argument pos:start="61:16" pos:end="61:17"><expr pos:start="61:16" pos:end="61:17"><name pos:start="61:16" pos:end="61:17">am</name></expr></argument>, <argument pos:start="61:20" pos:end="61:31"><expr pos:start="61:20" pos:end="61:31"><name pos:start="61:20" pos:end="61:31">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:34" pos:end="61:59"><expr pos:start="61:34" pos:end="61:59"><literal type="string" pos:start="61:34" pos:end="61:59">"Invalid mix coeff type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:31">return <expr pos:start="63:16" pos:end="63:30"><call pos:start="63:16" pos:end="63:30"><name pos:start="63:16" pos:end="63:22">AVERROR</name><argument_list pos:start="63:23" pos:end="63:30">(<argument pos:start="63:24" pos:end="63:29"><expr pos:start="63:24" pos:end="63:29"><name pos:start="63:24" pos:end="63:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>



    <return pos:start="69:5" pos:end="69:13">return <expr pos:start="69:12" pos:end="69:12"><literal type="number" pos:start="69:12" pos:end="69:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
