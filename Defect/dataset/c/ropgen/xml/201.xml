<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/201.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:18">gen_lq</name><parameter_list pos:start="1:19" pos:end="1:37">(<parameter pos:start="1:20" pos:end="1:36"><decl pos:start="1:20" pos:end="1:36"><type pos:start="1:20" pos:end="1:33"><name pos:start="1:20" pos:end="1:31">DisasContext</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="7:5" pos:end="64:0">

<cpp:if pos:start="5:1" pos:end="5:29">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:29"><call pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:29">(<argument pos:start="5:13" pos:end="5:28"><expr pos:start="5:13" pos:end="5:28"><name pos:start="5:13" pos:end="5:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="7:5" pos:end="10:0"><expr pos:start="7:5" pos:end="7:51"><call pos:start="7:5" pos:end="7:51"><name pos:start="7:5" pos:end="7:23">gen_inval_exception</name><argument_list pos:start="7:24" pos:end="7:51">(<argument pos:start="7:25" pos:end="7:27"><expr pos:start="7:25" pos:end="7:27"><name pos:start="7:25" pos:end="7:27">ctx</name></expr></argument>, <argument pos:start="7:30" pos:end="7:50"><expr pos:start="7:30" pos:end="7:50"><name pos:start="7:30" pos:end="7:50">POWERPC_EXCP_PRIV_OPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="9:1" pos:end="9:5">#<cpp:directive pos:start="9:2" pos:end="9:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">ra</name></decl>, <decl pos:start="11:13" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:14">rd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">TCGv</name></type> <name pos:start="13:10" pos:end="13:11">EA</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:27">/* Restore CPU state */</comment>

    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:36">(<expr pos:start="19:9" pos:end="19:35"><call pos:start="19:9" pos:end="19:35"><name pos:start="19:9" pos:end="19:16">unlikely</name><argument_list pos:start="19:17" pos:end="19:35">(<argument pos:start="19:18" pos:end="19:34"><expr pos:start="19:18" pos:end="19:34"><name pos:start="19:18" pos:end="19:29"><name pos:start="19:18" pos:end="19:20">ctx</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:29">mem_idx</name></name> <operator pos:start="19:31" pos:end="19:32">==</operator> <literal type="number" pos:start="19:34" pos:end="19:34">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:38" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:56"><expr pos:start="21:9" pos:end="21:55"><call pos:start="21:9" pos:end="21:55"><name pos:start="21:9" pos:end="21:27">gen_inval_exception</name><argument_list pos:start="21:28" pos:end="21:55">(<argument pos:start="21:29" pos:end="21:31"><expr pos:start="21:29" pos:end="21:31"><name pos:start="21:29" pos:end="21:31">ctx</name></expr></argument>, <argument pos:start="21:34" pos:end="21:54"><expr pos:start="21:34" pos:end="21:54"><name pos:start="21:34" pos:end="21:54">POWERPC_EXCP_PRIV_OPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:25"><expr pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:6">ra</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <call pos:start="27:10" pos:end="27:24"><name pos:start="27:10" pos:end="27:11">rA</name><argument_list pos:start="27:12" pos:end="27:24">(<argument pos:start="27:13" pos:end="27:23"><expr pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:23"><name pos:start="27:13" pos:end="27:15">ctx</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:23">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:25"><expr pos:start="29:5" pos:end="29:24"><name pos:start="29:5" pos:end="29:6">rd</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <call pos:start="29:10" pos:end="29:24"><name pos:start="29:10" pos:end="29:11">rD</name><argument_list pos:start="29:12" pos:end="29:24">(<argument pos:start="29:13" pos:end="29:23"><expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:15">ctx</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:23">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:39">(<expr pos:start="31:9" pos:end="31:38"><call pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:16">unlikely</name><argument_list pos:start="31:17" pos:end="31:38">(<argument pos:start="31:18" pos:end="31:37"><expr pos:start="31:18" pos:end="31:37"><operator pos:start="31:18" pos:end="31:18">(</operator><name pos:start="31:19" pos:end="31:20">rd</name> <operator pos:start="31:22" pos:end="31:22">&amp;</operator> <literal type="number" pos:start="31:24" pos:end="31:24">1</literal><operator pos:start="31:25" pos:end="31:25">)</operator> <operator pos:start="31:27" pos:end="31:28">||</operator> <name pos:start="31:30" pos:end="31:31">rd</name> <operator pos:start="31:33" pos:end="31:34">==</operator> <name pos:start="31:36" pos:end="31:37">ra</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:41" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:59"><expr pos:start="33:9" pos:end="33:58"><call pos:start="33:9" pos:end="33:58"><name pos:start="33:9" pos:end="33:27">gen_inval_exception</name><argument_list pos:start="33:28" pos:end="33:58">(<argument pos:start="33:29" pos:end="33:31"><expr pos:start="33:29" pos:end="33:31"><name pos:start="33:29" pos:end="33:31">ctx</name></expr></argument>, <argument pos:start="33:34" pos:end="33:57"><expr pos:start="33:34" pos:end="33:57"><name pos:start="33:34" pos:end="33:57">POWERPC_EXCP_INVAL_INVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:31">(<expr pos:start="39:9" pos:end="39:30"><call pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:16">unlikely</name><argument_list pos:start="39:17" pos:end="39:30">(<argument pos:start="39:18" pos:end="39:29"><expr pos:start="39:18" pos:end="39:29"><name pos:start="39:18" pos:end="39:29"><name pos:start="39:18" pos:end="39:20">ctx</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:29">le_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:33" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:15">

        <comment type="block" pos:start="41:9" pos:end="41:47">/* Little-endian mode is not handled */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:74"><expr pos:start="43:9" pos:end="43:73"><call pos:start="43:9" pos:end="43:73"><name pos:start="43:9" pos:end="43:25">gen_exception_err</name><argument_list pos:start="43:26" pos:end="43:73">(<argument pos:start="43:27" pos:end="43:29"><expr pos:start="43:27" pos:end="43:29"><name pos:start="43:27" pos:end="43:29">ctx</name></expr></argument>, <argument pos:start="43:32" pos:end="43:49"><expr pos:start="43:32" pos:end="43:49"><name pos:start="43:32" pos:end="43:49">POWERPC_EXCP_ALIGN</name></expr></argument>, <argument pos:start="43:52" pos:end="43:72"><expr pos:start="43:52" pos:end="43:72"><name pos:start="43:52" pos:end="43:72">POWERPC_EXCP_ALIGN_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:41"><expr pos:start="49:5" pos:end="49:40"><call pos:start="49:5" pos:end="49:40"><name pos:start="49:5" pos:end="49:23">gen_set_access_type</name><argument_list pos:start="49:24" pos:end="49:40">(<argument pos:start="49:25" pos:end="49:27"><expr pos:start="49:25" pos:end="49:27"><name pos:start="49:25" pos:end="49:27">ctx</name></expr></argument>, <argument pos:start="49:30" pos:end="49:39"><expr pos:start="49:30" pos:end="49:39"><name pos:start="49:30" pos:end="49:39">ACCESS_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:24"><expr pos:start="51:5" pos:end="51:23"><name pos:start="51:5" pos:end="51:6">EA</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <call pos:start="51:10" pos:end="51:23"><name pos:start="51:10" pos:end="51:21">tcg_temp_new</name><argument_list pos:start="51:22" pos:end="51:23">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:38"><expr pos:start="53:5" pos:end="53:37"><call pos:start="53:5" pos:end="53:37"><name pos:start="53:5" pos:end="53:22">gen_addr_imm_index</name><argument_list pos:start="53:23" pos:end="53:37">(<argument pos:start="53:24" pos:end="53:26"><expr pos:start="53:24" pos:end="53:26"><name pos:start="53:24" pos:end="53:26">ctx</name></expr></argument>, <argument pos:start="53:29" pos:end="53:30"><expr pos:start="53:29" pos:end="53:30"><name pos:start="53:29" pos:end="53:30">EA</name></expr></argument>, <argument pos:start="53:33" pos:end="53:36"><expr pos:start="53:33" pos:end="53:36"><literal type="number" pos:start="53:33" pos:end="53:36">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:40"><expr pos:start="55:5" pos:end="55:39"><call pos:start="55:5" pos:end="55:39"><name pos:start="55:5" pos:end="55:17">gen_qemu_ld64</name><argument_list pos:start="55:18" pos:end="55:39">(<argument pos:start="55:19" pos:end="55:21"><expr pos:start="55:19" pos:end="55:21"><name pos:start="55:19" pos:end="55:21">ctx</name></expr></argument>, <argument pos:start="55:24" pos:end="55:34"><expr pos:start="55:24" pos:end="55:34"><name pos:start="55:24" pos:end="55:34"><name pos:start="55:24" pos:end="55:30">cpu_gpr</name><index pos:start="55:31" pos:end="55:34">[<expr pos:start="55:32" pos:end="55:33"><name pos:start="55:32" pos:end="55:33">rd</name></expr>]</index></name></expr></argument>, <argument pos:start="55:37" pos:end="55:38"><expr pos:start="55:37" pos:end="55:38"><name pos:start="55:37" pos:end="55:38">EA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:33"><expr pos:start="57:5" pos:end="57:32"><call pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:16">gen_addr_add</name><argument_list pos:start="57:17" pos:end="57:32">(<argument pos:start="57:18" pos:end="57:20"><expr pos:start="57:18" pos:end="57:20"><name pos:start="57:18" pos:end="57:20">ctx</name></expr></argument>, <argument pos:start="57:23" pos:end="57:24"><expr pos:start="57:23" pos:end="57:24"><name pos:start="57:23" pos:end="57:24">EA</name></expr></argument>, <argument pos:start="57:27" pos:end="57:28"><expr pos:start="57:27" pos:end="57:28"><name pos:start="57:27" pos:end="57:28">EA</name></expr></argument>, <argument pos:start="57:31" pos:end="57:31"><expr pos:start="57:31" pos:end="57:31"><literal type="number" pos:start="57:31" pos:end="57:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:42"><expr pos:start="59:5" pos:end="59:41"><call pos:start="59:5" pos:end="59:41"><name pos:start="59:5" pos:end="59:17">gen_qemu_ld64</name><argument_list pos:start="59:18" pos:end="59:41">(<argument pos:start="59:19" pos:end="59:21"><expr pos:start="59:19" pos:end="59:21"><name pos:start="59:19" pos:end="59:21">ctx</name></expr></argument>, <argument pos:start="59:24" pos:end="59:36"><expr pos:start="59:24" pos:end="59:36"><name pos:start="59:24" pos:end="59:36"><name pos:start="59:24" pos:end="59:30">cpu_gpr</name><index pos:start="59:31" pos:end="59:36">[<expr pos:start="59:32" pos:end="59:35"><name pos:start="59:32" pos:end="59:33">rd</name><operator pos:start="59:34" pos:end="59:34">+</operator><literal type="number" pos:start="59:35" pos:end="59:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="59:39" pos:end="59:40"><expr pos:start="59:39" pos:end="59:40"><name pos:start="59:39" pos:end="59:40">EA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="64:0"><expr pos:start="61:5" pos:end="61:21"><call pos:start="61:5" pos:end="61:21"><name pos:start="61:5" pos:end="61:17">tcg_temp_free</name><argument_list pos:start="61:18" pos:end="61:21">(<argument pos:start="61:19" pos:end="61:20"><expr pos:start="61:19" pos:end="61:20"><name pos:start="61:19" pos:end="61:20">EA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
