<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12465.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:41">mirror_dirty_init</name><parameter_list pos:start="1:42" pos:end="1:60">(<parameter pos:start="1:43" pos:end="1:59"><decl pos:start="1:43" pos:end="1:59"><type pos:start="1:43" pos:end="1:58"><name pos:start="1:43" pos:end="1:56">MirrorBlockJob</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:22">sector_num</name></decl>, <decl pos:start="5:25" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:25" pos:end="5:27">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:26">base</name> <init pos:start="7:28" pos:end="7:36">= <expr pos:start="7:30" pos:end="7:36"><name pos:start="7:30" pos:end="7:36"><name pos:start="7:30" pos:end="7:30">s</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">base</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name> <init pos:start="9:26" pos:end="9:48">= <expr pos:start="9:28" pos:end="9:48"><call pos:start="9:28" pos:end="9:48"><name pos:start="9:28" pos:end="9:33">blk_bs</name><argument_list pos:start="9:34" pos:end="9:48">(<argument pos:start="9:35" pos:end="9:47"><expr pos:start="9:35" pos:end="9:47"><name pos:start="9:35" pos:end="9:47"><name pos:start="9:35" pos:end="9:35">s</name><operator pos:start="9:36" pos:end="9:37">-&gt;</operator><name pos:start="9:38" pos:end="9:43">common</name><operator pos:start="9:44" pos:end="9:44">.</operator><name pos:start="9:45" pos:end="9:47">blk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:52"><decl pos:start="11:5" pos:end="11:51"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:31">target_bs</name> <init pos:start="11:33" pos:end="11:51">= <expr pos:start="11:35" pos:end="11:51"><call pos:start="11:35" pos:end="11:51"><name pos:start="11:35" pos:end="11:40">blk_bs</name><argument_list pos:start="11:41" pos:end="11:51">(<argument pos:start="11:42" pos:end="11:50"><expr pos:start="11:42" pos:end="11:50"><name pos:start="11:42" pos:end="11:50"><name pos:start="11:42" pos:end="11:42">s</name><operator pos:start="11:43" pos:end="11:44">-&gt;</operator><name pos:start="11:45" pos:end="11:50">target</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:14"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:14">n</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:44"><expr pos:start="17:5" pos:end="17:43"><name pos:start="17:5" pos:end="17:7">end</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <name pos:start="17:11" pos:end="17:24"><name pos:start="17:11" pos:end="17:11">s</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:24">bdev_length</name></name> <operator pos:start="17:26" pos:end="17:26">/</operator> <name pos:start="17:28" pos:end="17:43">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="75:5"><if pos:start="21:5" pos:end="75:5">if <condition pos:start="21:8" pos:end="21:55">(<expr pos:start="21:9" pos:end="21:54"><name pos:start="21:9" pos:end="21:12">base</name> <operator pos:start="21:14" pos:end="21:15">==</operator> <name pos:start="21:17" pos:end="21:20">NULL</name> <operator pos:start="21:22" pos:end="21:23">&amp;&amp;</operator> <operator pos:start="21:25" pos:end="21:25">!</operator><call pos:start="21:26" pos:end="21:54"><name pos:start="21:26" pos:end="21:43">bdrv_has_zero_init</name><argument_list pos:start="21:44" pos:end="21:54">(<argument pos:start="21:45" pos:end="21:53"><expr pos:start="21:45" pos:end="21:53"><name pos:start="21:45" pos:end="21:53">target_bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:57" pos:end="75:5">{<block_content pos:start="23:9" pos:end="73:24">

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:57">(<expr pos:start="23:13" pos:end="23:56"><operator pos:start="23:13" pos:end="23:13">!</operator><call pos:start="23:14" pos:end="23:56"><name pos:start="23:14" pos:end="23:45">bdrv_can_write_zeroes_with_unmap</name><argument_list pos:start="23:46" pos:end="23:56">(<argument pos:start="23:47" pos:end="23:55"><expr pos:start="23:47" pos:end="23:55"><name pos:start="23:47" pos:end="23:55">target_bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:59" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:21">

            <expr_stmt pos:start="25:13" pos:end="25:59"><expr pos:start="25:13" pos:end="25:58"><call pos:start="25:13" pos:end="25:58"><name pos:start="25:13" pos:end="25:33">bdrv_set_dirty_bitmap</name><argument_list pos:start="25:34" pos:end="25:58">(<argument pos:start="25:35" pos:end="25:49"><expr pos:start="25:35" pos:end="25:49"><name pos:start="25:35" pos:end="25:49"><name pos:start="25:35" pos:end="25:35">s</name><operator pos:start="25:36" pos:end="25:37">-&gt;</operator><name pos:start="25:38" pos:end="25:49">dirty_bitmap</name></name></expr></argument>, <argument pos:start="25:52" pos:end="25:52"><expr pos:start="25:52" pos:end="25:52"><literal type="number" pos:start="25:52" pos:end="25:52">0</literal></expr></argument>, <argument pos:start="25:55" pos:end="25:57"><expr pos:start="25:55" pos:end="25:57"><name pos:start="25:55" pos:end="25:57">end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:21">return <expr pos:start="27:20" pos:end="27:20"><literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <for pos:start="33:9" pos:end="69:9">for <control pos:start="33:13" pos:end="33:48">(<init pos:start="33:14" pos:end="33:28"><expr pos:start="33:14" pos:end="33:27"><name pos:start="33:14" pos:end="33:23">sector_num</name> <operator pos:start="33:25" pos:end="33:25">=</operator> <literal type="number" pos:start="33:27" pos:end="33:27">0</literal></expr>;</init> <condition pos:start="33:30" pos:end="33:46"><expr pos:start="33:30" pos:end="33:45"><name pos:start="33:30" pos:end="33:39">sector_num</name> <operator pos:start="33:41" pos:end="33:41">&lt;</operator> <name pos:start="33:43" pos:end="33:45">end</name></expr>;</condition> <incr/>)</control> <block pos:start="33:50" pos:end="69:9">{<block_content pos:start="35:13" pos:end="67:37">

            <decl_stmt pos:start="35:13" pos:end="37:78"><decl pos:start="35:13" pos:end="37:77"><type pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">int</name></type> <name pos:start="35:17" pos:end="35:26">nb_sectors</name> <init pos:start="35:28" pos:end="37:77">= <expr pos:start="35:30" pos:end="37:77"><call pos:start="35:30" pos:end="37:77"><name pos:start="35:30" pos:end="35:32">MIN</name><argument_list pos:start="35:33" pos:end="37:77">(<argument pos:start="35:34" pos:end="35:49"><expr pos:start="35:34" pos:end="35:49"><name pos:start="35:34" pos:end="35:36">end</name> <operator pos:start="35:38" pos:end="35:38">-</operator> <name pos:start="35:40" pos:end="35:49">sector_num</name></expr></argument>,

                <argument pos:start="37:17" pos:end="37:76"><expr pos:start="37:17" pos:end="37:76"><call pos:start="37:17" pos:end="37:56"><name pos:start="37:17" pos:end="37:31">QEMU_ALIGN_DOWN</name><argument_list pos:start="37:32" pos:end="37:56">(<argument pos:start="37:33" pos:end="37:39"><expr pos:start="37:33" pos:end="37:39"><name pos:start="37:33" pos:end="37:39">INT_MAX</name></expr></argument>, <argument pos:start="37:42" pos:end="37:55"><expr pos:start="37:42" pos:end="37:55"><name pos:start="37:42" pos:end="37:55"><name pos:start="37:42" pos:end="37:42">s</name><operator pos:start="37:43" pos:end="37:44">-&gt;</operator><name pos:start="37:45" pos:end="37:55">granularity</name></name></expr></argument>)</argument_list></call> <operator pos:start="37:58" pos:end="37:59">&gt;&gt;</operator> <name pos:start="37:61" pos:end="37:76">BDRV_SECTOR_BITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="41:13" pos:end="41:31"><expr pos:start="41:13" pos:end="41:30"><call pos:start="41:13" pos:end="41:30"><name pos:start="41:13" pos:end="41:27">mirror_throttle</name><argument_list pos:start="41:28" pos:end="41:30">(<argument pos:start="41:29" pos:end="41:29"><expr pos:start="41:29" pos:end="41:29"><name pos:start="41:29" pos:end="41:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="45:13" pos:end="49:13"><if pos:start="45:13" pos:end="49:13">if <condition pos:start="45:16" pos:end="45:51">(<expr pos:start="45:17" pos:end="45:50"><call pos:start="45:17" pos:end="45:50"><name pos:start="45:17" pos:end="45:38">block_job_is_cancelled</name><argument_list pos:start="45:39" pos:end="45:50">(<argument pos:start="45:40" pos:end="45:49"><expr pos:start="45:40" pos:end="45:49"><operator pos:start="45:40" pos:end="45:40">&amp;</operator><name pos:start="45:41" pos:end="45:49"><name pos:start="45:41" pos:end="45:41">s</name><operator pos:start="45:42" pos:end="45:43">-&gt;</operator><name pos:start="45:44" pos:end="45:49">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:53" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:25">

                <return pos:start="47:17" pos:end="47:25">return <expr pos:start="47:24" pos:end="47:24"><literal type="number" pos:start="47:24" pos:end="47:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="53:13" pos:end="61:13"><if pos:start="53:13" pos:end="61:13">if <condition pos:start="53:16" pos:end="53:46">(<expr pos:start="53:17" pos:end="53:45"><name pos:start="53:17" pos:end="53:28"><name pos:start="53:17" pos:end="53:17">s</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:28">in_flight</name></name> <operator pos:start="53:30" pos:end="53:31">&gt;=</operator> <name pos:start="53:33" pos:end="53:45">MAX_IN_FLIGHT</name></expr>)</condition> <block pos:start="53:48" pos:end="61:13">{<block_content pos:start="55:17" pos:end="59:25">

                <expr_stmt pos:start="55:17" pos:end="55:75"><expr pos:start="55:17" pos:end="55:74"><call pos:start="55:17" pos:end="55:74"><name pos:start="55:17" pos:end="55:34">trace_mirror_yield</name><argument_list pos:start="55:35" pos:end="55:74">(<argument pos:start="55:36" pos:end="55:36"><expr pos:start="55:36" pos:end="55:36"><name pos:start="55:36" pos:end="55:36">s</name></expr></argument>, <argument pos:start="55:39" pos:end="55:50"><expr pos:start="55:39" pos:end="55:50"><name pos:start="55:39" pos:end="55:50"><name pos:start="55:39" pos:end="55:39">s</name><operator pos:start="55:40" pos:end="55:41">-&gt;</operator><name pos:start="55:42" pos:end="55:50">in_flight</name></name></expr></argument>, <argument pos:start="55:53" pos:end="55:69"><expr pos:start="55:53" pos:end="55:69"><name pos:start="55:53" pos:end="55:69"><name pos:start="55:53" pos:end="55:53">s</name><operator pos:start="55:54" pos:end="55:55">-&gt;</operator><name pos:start="55:56" pos:end="55:69">buf_free_count</name></name></expr></argument>, <argument pos:start="55:72" pos:end="55:73"><expr pos:start="55:72" pos:end="55:73"><operator pos:start="55:72" pos:end="55:72">-</operator><literal type="number" pos:start="55:73" pos:end="55:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:38"><expr pos:start="57:17" pos:end="57:37"><call pos:start="57:17" pos:end="57:37"><name pos:start="57:17" pos:end="57:34">mirror_wait_for_io</name><argument_list pos:start="57:35" pos:end="57:37">(<argument pos:start="57:36" pos:end="57:36"><expr pos:start="57:36" pos:end="57:36"><name pos:start="57:36" pos:end="57:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="59:17" pos:end="59:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="65:13" pos:end="65:72"><expr pos:start="65:13" pos:end="65:71"><call pos:start="65:13" pos:end="65:71"><name pos:start="65:13" pos:end="65:37">mirror_do_zero_or_discard</name><argument_list pos:start="65:38" pos:end="65:71">(<argument pos:start="65:39" pos:end="65:39"><expr pos:start="65:39" pos:end="65:39"><name pos:start="65:39" pos:end="65:39">s</name></expr></argument>, <argument pos:start="65:42" pos:end="65:51"><expr pos:start="65:42" pos:end="65:51"><name pos:start="65:42" pos:end="65:51">sector_num</name></expr></argument>, <argument pos:start="65:54" pos:end="65:63"><expr pos:start="65:54" pos:end="65:63"><name pos:start="65:54" pos:end="65:63">nb_sectors</name></expr></argument>, <argument pos:start="65:66" pos:end="65:70"><expr pos:start="65:66" pos:end="65:70"><name pos:start="65:66" pos:end="65:70">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:37"><expr pos:start="67:13" pos:end="67:36"><name pos:start="67:13" pos:end="67:22">sector_num</name> <operator pos:start="67:24" pos:end="67:25">+=</operator> <name pos:start="67:27" pos:end="67:36">nb_sectors</name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="73:9" pos:end="73:24"><expr pos:start="73:9" pos:end="73:23"><call pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:20">mirror_drain</name><argument_list pos:start="73:21" pos:end="73:23">(<argument pos:start="73:22" pos:end="73:22"><expr pos:start="73:22" pos:end="73:22"><name pos:start="73:22" pos:end="73:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:75">/* First part, loop on the sectors and initialize the dirty bitmap.  */</comment>

    <for pos:start="81:5" pos:end="123:5">for <control pos:start="81:9" pos:end="81:44">(<init pos:start="81:10" pos:end="81:24"><expr pos:start="81:10" pos:end="81:23"><name pos:start="81:10" pos:end="81:19">sector_num</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <literal type="number" pos:start="81:23" pos:end="81:23">0</literal></expr>;</init> <condition pos:start="81:26" pos:end="81:42"><expr pos:start="81:26" pos:end="81:41"><name pos:start="81:26" pos:end="81:35">sector_num</name> <operator pos:start="81:37" pos:end="81:37">&lt;</operator> <name pos:start="81:39" pos:end="81:41">end</name></expr>;</condition> <incr/>)</control> <block pos:start="81:46" pos:end="123:5">{<block_content pos:start="85:9" pos:end="121:24">

        <comment type="block" pos:start="83:9" pos:end="83:63">/* Just to make sure we are not exceeding int limit. */</comment>

        <decl_stmt pos:start="85:9" pos:end="87:47"><decl pos:start="85:9" pos:end="87:46"><type pos:start="85:9" pos:end="85:11"><name pos:start="85:9" pos:end="85:11">int</name></type> <name pos:start="85:13" pos:end="85:22">nb_sectors</name> <init pos:start="85:24" pos:end="87:46">= <expr pos:start="85:26" pos:end="87:46"><call pos:start="85:26" pos:end="87:46"><name pos:start="85:26" pos:end="85:28">MIN</name><argument_list pos:start="85:29" pos:end="87:46">(<argument pos:start="85:30" pos:end="85:56"><expr pos:start="85:30" pos:end="85:56"><name pos:start="85:30" pos:end="85:36">INT_MAX</name> <operator pos:start="85:38" pos:end="85:39">&gt;&gt;</operator> <name pos:start="85:41" pos:end="85:56">BDRV_SECTOR_BITS</name></expr></argument>,

                             <argument pos:start="87:30" pos:end="87:45"><expr pos:start="87:30" pos:end="87:45"><name pos:start="87:30" pos:end="87:32">end</name> <operator pos:start="87:34" pos:end="87:34">-</operator> <name pos:start="87:36" pos:end="87:45">sector_num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:27"><expr pos:start="91:9" pos:end="91:26"><call pos:start="91:9" pos:end="91:26"><name pos:start="91:9" pos:end="91:23">mirror_throttle</name><argument_list pos:start="91:24" pos:end="91:26">(<argument pos:start="91:25" pos:end="91:25"><expr pos:start="91:25" pos:end="91:25"><name pos:start="91:25" pos:end="91:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="95:9" pos:end="99:9"><if pos:start="95:9" pos:end="99:9">if <condition pos:start="95:12" pos:end="95:47">(<expr pos:start="95:13" pos:end="95:46"><call pos:start="95:13" pos:end="95:46"><name pos:start="95:13" pos:end="95:34">block_job_is_cancelled</name><argument_list pos:start="95:35" pos:end="95:46">(<argument pos:start="95:36" pos:end="95:45"><expr pos:start="95:36" pos:end="95:45"><operator pos:start="95:36" pos:end="95:36">&amp;</operator><name pos:start="95:37" pos:end="95:45"><name pos:start="95:37" pos:end="95:37">s</name><operator pos:start="95:38" pos:end="95:39">-&gt;</operator><name pos:start="95:40" pos:end="95:45">common</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="95:49" pos:end="99:9">{<block_content pos:start="97:13" pos:end="97:21">

            <return pos:start="97:13" pos:end="97:21">return <expr pos:start="97:20" pos:end="97:20"><literal type="number" pos:start="97:20" pos:end="97:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="103:76"><expr pos:start="103:9" pos:end="103:75"><name pos:start="103:9" pos:end="103:11">ret</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:75"><name pos:start="103:15" pos:end="103:37">bdrv_is_allocated_above</name><argument_list pos:start="103:38" pos:end="103:75">(<argument pos:start="103:39" pos:end="103:40"><expr pos:start="103:39" pos:end="103:40"><name pos:start="103:39" pos:end="103:40">bs</name></expr></argument>, <argument pos:start="103:43" pos:end="103:46"><expr pos:start="103:43" pos:end="103:46"><name pos:start="103:43" pos:end="103:46">base</name></expr></argument>, <argument pos:start="103:49" pos:end="103:58"><expr pos:start="103:49" pos:end="103:58"><name pos:start="103:49" pos:end="103:58">sector_num</name></expr></argument>, <argument pos:start="103:61" pos:end="103:70"><expr pos:start="103:61" pos:end="103:70"><name pos:start="103:61" pos:end="103:70">nb_sectors</name></expr></argument>, <argument pos:start="103:73" pos:end="103:74"><expr pos:start="103:73" pos:end="103:74"><operator pos:start="103:73" pos:end="103:73">&amp;</operator><name pos:start="103:74" pos:end="103:74">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="109:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:20">(<expr pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:15">ret</name> <operator pos:start="105:17" pos:end="105:17">&lt;</operator> <literal type="number" pos:start="105:19" pos:end="105:19">0</literal></expr>)</condition> <block pos:start="105:22" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:23">

            <return pos:start="107:13" pos:end="107:23">return <expr pos:start="107:20" pos:end="107:22"><name pos:start="107:20" pos:end="107:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:22"><expr pos:start="113:9" pos:end="113:21"><call pos:start="113:9" pos:end="113:21"><name pos:start="113:9" pos:end="113:14">assert</name><argument_list pos:start="113:15" pos:end="113:21">(<argument pos:start="113:16" pos:end="113:20"><expr pos:start="113:16" pos:end="113:20"><name pos:start="113:16" pos:end="113:16">n</name> <operator pos:start="113:18" pos:end="113:18">&gt;</operator> <literal type="number" pos:start="113:20" pos:end="113:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:21">(<expr pos:start="115:13" pos:end="115:20"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:18">==</operator> <literal type="number" pos:start="115:20" pos:end="115:20">1</literal></expr>)</condition> <block pos:start="115:23" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:66">

            <expr_stmt pos:start="117:13" pos:end="117:66"><expr pos:start="117:13" pos:end="117:65"><call pos:start="117:13" pos:end="117:65"><name pos:start="117:13" pos:end="117:33">bdrv_set_dirty_bitmap</name><argument_list pos:start="117:34" pos:end="117:65">(<argument pos:start="117:35" pos:end="117:49"><expr pos:start="117:35" pos:end="117:49"><name pos:start="117:35" pos:end="117:49"><name pos:start="117:35" pos:end="117:35">s</name><operator pos:start="117:36" pos:end="117:37">-&gt;</operator><name pos:start="117:38" pos:end="117:49">dirty_bitmap</name></name></expr></argument>, <argument pos:start="117:52" pos:end="117:61"><expr pos:start="117:52" pos:end="117:61"><name pos:start="117:52" pos:end="117:61">sector_num</name></expr></argument>, <argument pos:start="117:64" pos:end="117:64"><expr pos:start="117:64" pos:end="117:64"><name pos:start="117:64" pos:end="117:64">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:24"><expr pos:start="121:9" pos:end="121:23"><name pos:start="121:9" pos:end="121:18">sector_num</name> <operator pos:start="121:20" pos:end="121:21">+=</operator> <name pos:start="121:23" pos:end="121:23">n</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="125:5" pos:end="125:13">return <expr pos:start="125:12" pos:end="125:12"><literal type="number" pos:start="125:12" pos:end="125:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
