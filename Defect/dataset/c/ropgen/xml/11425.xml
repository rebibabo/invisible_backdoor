<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11425.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">decode_i_block</name><parameter_list pos:start="1:26" pos:end="1:58">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:38">FourXContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">f</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:50">int16_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:57">block</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="5:5" pos:end="91:13">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">code</name></decl>, <decl pos:start="5:15" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:15">i</name></decl>, <decl pos:start="5:18" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:18" pos:end="5:18">j</name></decl>, <decl pos:start="5:21" pos:end="5:25"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:21" pos:end="5:25">level</name></decl>, <decl pos:start="5:28" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:28" pos:end="5:30">val</name></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:34">(<expr pos:start="9:9" pos:end="9:33"><call pos:start="9:9" pos:end="9:29"><name pos:start="9:9" pos:end="9:21">get_bits_left</name><argument_list pos:start="9:22" pos:end="9:29">(<argument pos:start="9:23" pos:end="9:28"><expr pos:start="9:23" pos:end="9:28"><operator pos:start="9:23" pos:end="9:23">&amp;</operator><name pos:start="9:24" pos:end="9:28"><name pos:start="9:24" pos:end="9:24">f</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:28">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="9:31" pos:end="9:31">&lt;</operator> <literal type="number" pos:start="9:33" pos:end="9:33">2</literal></expr>)</condition><block pos:start="9:35" pos:end="15:5">{<block_content pos:start="11:9" pos:end="13:18">

        <expr_stmt pos:start="11:9" pos:end="11:104"><expr pos:start="11:9" pos:end="11:103"><call pos:start="11:9" pos:end="11:103"><name pos:start="11:9" pos:end="11:14">av_log</name><argument_list pos:start="11:15" pos:end="11:103">(<argument pos:start="11:16" pos:end="11:23"><expr pos:start="11:16" pos:end="11:23"><name pos:start="11:16" pos:end="11:23"><name pos:start="11:16" pos:end="11:16">f</name><operator pos:start="11:17" pos:end="11:18">-&gt;</operator><name pos:start="11:19" pos:end="11:23">avctx</name></name></expr></argument>, <argument pos:start="11:26" pos:end="11:37"><expr pos:start="11:26" pos:end="11:37"><name pos:start="11:26" pos:end="11:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="11:40" pos:end="11:79"><expr pos:start="11:40" pos:end="11:79"><literal type="string" pos:start="11:40" pos:end="11:79">"%d bits left before decode_i_block()\n"</literal></expr></argument>, <argument pos:start="11:82" pos:end="11:102"><expr pos:start="11:82" pos:end="11:102"><call pos:start="11:82" pos:end="11:102"><name pos:start="11:82" pos:end="11:94">get_bits_left</name><argument_list pos:start="11:95" pos:end="11:102">(<argument pos:start="11:96" pos:end="11:101"><expr pos:start="11:96" pos:end="11:101"><operator pos:start="11:96" pos:end="11:96">&amp;</operator><name pos:start="11:97" pos:end="11:101"><name pos:start="11:97" pos:end="11:97">f</name><operator pos:start="11:98" pos:end="11:99">-&gt;</operator><name pos:start="11:100" pos:end="11:101">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="13:9" pos:end="13:18">return <expr pos:start="13:16" pos:end="13:17"><operator pos:start="13:16" pos:end="13:16">-</operator><literal type="number" pos:start="13:17" pos:end="13:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:17">/* DC coef */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:67"><expr pos:start="21:5" pos:end="21:66"><name pos:start="21:5" pos:end="21:7">val</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:66"><name pos:start="21:11" pos:end="21:18">get_vlc2</name><argument_list pos:start="21:19" pos:end="21:66">(<argument pos:start="21:20" pos:end="21:29"><expr pos:start="21:20" pos:end="21:29"><operator pos:start="21:20" pos:end="21:20">&amp;</operator><name pos:start="21:21" pos:end="21:29"><name pos:start="21:21" pos:end="21:21">f</name><operator pos:start="21:22" pos:end="21:23">-&gt;</operator><name pos:start="21:24" pos:end="21:29">pre_gb</name></name></expr></argument>, <argument pos:start="21:32" pos:end="21:47"><expr pos:start="21:32" pos:end="21:47"><name pos:start="21:32" pos:end="21:47"><name pos:start="21:32" pos:end="21:32">f</name><operator pos:start="21:33" pos:end="21:34">-&gt;</operator><name pos:start="21:35" pos:end="21:41">pre_vlc</name><operator pos:start="21:42" pos:end="21:42">.</operator><name pos:start="21:43" pos:end="21:47">table</name></name></expr></argument>, <argument pos:start="21:50" pos:end="21:62"><expr pos:start="21:50" pos:end="21:62"><name pos:start="21:50" pos:end="21:62">ACDC_VLC_BITS</name></expr></argument>, <argument pos:start="21:65" pos:end="21:65"><expr pos:start="21:65" pos:end="21:65"><literal type="number" pos:start="21:65" pos:end="21:65">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="25:62"><if pos:start="23:5" pos:end="25:62">if <condition pos:start="23:8" pos:end="23:17">(<expr pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:11">val</name> <operator pos:start="23:13" pos:end="23:14">&gt;&gt;</operator> <literal type="number" pos:start="23:16" pos:end="23:16">4</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:62"><block_content pos:start="25:9" pos:end="25:62">

        <expr_stmt pos:start="25:9" pos:end="25:62"><expr pos:start="25:9" pos:end="25:61"><call pos:start="25:9" pos:end="25:61"><name pos:start="25:9" pos:end="25:14">av_log</name><argument_list pos:start="25:15" pos:end="25:61">(<argument pos:start="25:16" pos:end="25:23"><expr pos:start="25:16" pos:end="25:23"><name pos:start="25:16" pos:end="25:23"><name pos:start="25:16" pos:end="25:16">f</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:23">avctx</name></name></expr></argument>, <argument pos:start="25:26" pos:end="25:37"><expr pos:start="25:26" pos:end="25:37"><name pos:start="25:26" pos:end="25:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:40" pos:end="25:60"><expr pos:start="25:40" pos:end="25:60"><literal type="string" pos:start="25:40" pos:end="25:60">"error dc run != 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="31:37"><if pos:start="29:5" pos:end="31:37">if <condition pos:start="29:8" pos:end="29:12">(<expr pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">val</name></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:37"><block_content pos:start="31:9" pos:end="31:37">

        <expr_stmt pos:start="31:9" pos:end="31:37"><expr pos:start="31:9" pos:end="31:36"><name pos:start="31:9" pos:end="31:11">val</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <call pos:start="31:15" pos:end="31:36"><name pos:start="31:15" pos:end="31:23">get_xbits</name><argument_list pos:start="31:24" pos:end="31:36">(<argument pos:start="31:25" pos:end="31:30"><expr pos:start="31:25" pos:end="31:30"><operator pos:start="31:25" pos:end="31:25">&amp;</operator><name pos:start="31:26" pos:end="31:30"><name pos:start="31:26" pos:end="31:26">f</name><operator pos:start="31:27" pos:end="31:28">-&gt;</operator><name pos:start="31:29" pos:end="31:30">gb</name></name></expr></argument>, <argument pos:start="31:33" pos:end="31:35"><expr pos:start="31:33" pos:end="31:35"><name pos:start="31:33" pos:end="31:35">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:53"><expr pos:start="35:5" pos:end="35:52"><name pos:start="35:5" pos:end="35:7">val</name>        <operator pos:start="35:16" pos:end="35:16">=</operator> <name pos:start="35:18" pos:end="35:20">val</name> <operator pos:start="35:22" pos:end="35:22">*</operator> <name pos:start="35:24" pos:end="35:39"><name pos:start="35:24" pos:end="35:36">dequant_table</name><index pos:start="35:37" pos:end="35:39">[<expr pos:start="35:38" pos:end="35:38"><literal type="number" pos:start="35:38" pos:end="35:38">0</literal></expr>]</index></name> <operator pos:start="35:41" pos:end="35:41">+</operator> <name pos:start="35:43" pos:end="35:52"><name pos:start="35:43" pos:end="35:43">f</name><operator pos:start="35:44" pos:end="35:45">-&gt;</operator><name pos:start="35:46" pos:end="35:52">last_dc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:32"><expr pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:5">f</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:14">last_dc</name></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:25"><name pos:start="37:18" pos:end="37:22">block</name><index pos:start="37:23" pos:end="37:25">[<expr pos:start="37:24" pos:end="37:24"><literal type="number" pos:start="37:24" pos:end="37:24">0</literal></expr>]</index></name> <operator pos:start="37:27" pos:end="37:27">=</operator> <name pos:start="37:29" pos:end="37:31">val</name></expr>;</expr_stmt>

    <comment type="block" pos:start="39:5" pos:end="39:18">/* AC coefs */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:10"><expr pos:start="41:5" pos:end="41:9"><name pos:start="41:5" pos:end="41:5">i</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <literal type="number" pos:start="41:9" pos:end="41:9">1</literal></expr>;</expr_stmt>

    <for pos:start="43:5" pos:end="87:5">for <control pos:start="43:9" pos:end="43:12">(<init pos:start="43:10" pos:end="43:10">;</init><condition pos:start="43:11" pos:end="43:11">;</condition><incr/>)</control> <block pos:start="43:14" pos:end="87:5">{<block_content pos:start="45:9" pos:end="85:9">

        <expr_stmt pos:start="45:9" pos:end="45:72"><expr pos:start="45:9" pos:end="45:71"><name pos:start="45:9" pos:end="45:12">code</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:71"><name pos:start="45:16" pos:end="45:23">get_vlc2</name><argument_list pos:start="45:24" pos:end="45:71">(<argument pos:start="45:25" pos:end="45:34"><expr pos:start="45:25" pos:end="45:34"><operator pos:start="45:25" pos:end="45:25">&amp;</operator><name pos:start="45:26" pos:end="45:34"><name pos:start="45:26" pos:end="45:26">f</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:34">pre_gb</name></name></expr></argument>, <argument pos:start="45:37" pos:end="45:52"><expr pos:start="45:37" pos:end="45:52"><name pos:start="45:37" pos:end="45:52"><name pos:start="45:37" pos:end="45:37">f</name><operator pos:start="45:38" pos:end="45:39">-&gt;</operator><name pos:start="45:40" pos:end="45:46">pre_vlc</name><operator pos:start="45:47" pos:end="45:47">.</operator><name pos:start="45:48" pos:end="45:52">table</name></name></expr></argument>, <argument pos:start="45:55" pos:end="45:67"><expr pos:start="45:55" pos:end="45:67"><name pos:start="45:55" pos:end="45:67">ACDC_VLC_BITS</name></expr></argument>, <argument pos:start="45:70" pos:end="45:70"><expr pos:start="45:70" pos:end="45:70"><literal type="number" pos:start="45:70" pos:end="45:70">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="49:9" pos:end="49:17">/* EOB */</comment>

        <if_stmt pos:start="51:9" pos:end="53:18"><if pos:start="51:9" pos:end="53:18">if <condition pos:start="51:12" pos:end="51:22">(<expr pos:start="51:13" pos:end="51:21"><name pos:start="51:13" pos:end="51:16">code</name> <operator pos:start="51:18" pos:end="51:19">==</operator> <literal type="number" pos:start="51:21" pos:end="51:21">0</literal></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:18"><block_content pos:start="53:13" pos:end="53:18">

            <break pos:start="53:13" pos:end="53:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="85:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:25">(<expr pos:start="55:13" pos:end="55:24"><name pos:start="55:13" pos:end="55:16">code</name> <operator pos:start="55:18" pos:end="55:19">==</operator> <literal type="number" pos:start="55:21" pos:end="55:24">0xf0</literal></expr>)</condition> <block pos:start="55:27" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:20">

            <expr_stmt pos:start="57:13" pos:end="57:20"><expr pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:13">i</name> <operator pos:start="57:15" pos:end="57:16">+=</operator> <literal type="number" pos:start="57:18" pos:end="57:19">16</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="59:11" pos:end="85:9">else <block pos:start="59:16" pos:end="85:9">{<block_content pos:start="61:13" pos:end="83:22">

            <expr_stmt pos:start="61:13" pos:end="61:50"><expr pos:start="61:13" pos:end="61:49"><name pos:start="61:13" pos:end="61:17">level</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <call pos:start="61:21" pos:end="61:49"><name pos:start="61:21" pos:end="61:29">get_xbits</name><argument_list pos:start="61:30" pos:end="61:49">(<argument pos:start="61:31" pos:end="61:36"><expr pos:start="61:31" pos:end="61:36"><operator pos:start="61:31" pos:end="61:31">&amp;</operator><name pos:start="61:32" pos:end="61:36"><name pos:start="61:32" pos:end="61:32">f</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:36">gb</name></name></expr></argument>, <argument pos:start="61:39" pos:end="61:48"><expr pos:start="61:39" pos:end="61:48"><name pos:start="61:39" pos:end="61:42">code</name> <operator pos:start="61:44" pos:end="61:44">&amp;</operator> <literal type="number" pos:start="61:46" pos:end="61:48">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:30"><expr pos:start="63:13" pos:end="63:29"><name pos:start="63:13" pos:end="63:13">i</name>    <operator pos:start="63:18" pos:end="63:19">+=</operator> <name pos:start="63:21" pos:end="63:24">code</name> <operator pos:start="63:26" pos:end="63:27">&gt;&gt;</operator> <literal type="number" pos:start="63:29" pos:end="63:29">4</literal></expr>;</expr_stmt>

            <if_stmt pos:start="65:13" pos:end="71:13"><if pos:start="65:13" pos:end="71:13">if <condition pos:start="65:16" pos:end="65:24">(<expr pos:start="65:17" pos:end="65:23"><name pos:start="65:17" pos:end="65:17">i</name> <operator pos:start="65:19" pos:end="65:20">&gt;=</operator> <literal type="number" pos:start="65:22" pos:end="65:23">64</literal></expr>)</condition> <block pos:start="65:26" pos:end="71:13">{<block_content pos:start="67:17" pos:end="69:25">

                <expr_stmt pos:start="67:17" pos:end="67:70"><expr pos:start="67:17" pos:end="67:69"><call pos:start="67:17" pos:end="67:69"><name pos:start="67:17" pos:end="67:22">av_log</name><argument_list pos:start="67:23" pos:end="67:69">(<argument pos:start="67:24" pos:end="67:31"><expr pos:start="67:24" pos:end="67:31"><name pos:start="67:24" pos:end="67:31"><name pos:start="67:24" pos:end="67:24">f</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:31">avctx</name></name></expr></argument>, <argument pos:start="67:34" pos:end="67:45"><expr pos:start="67:34" pos:end="67:45"><name pos:start="67:34" pos:end="67:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:48" pos:end="67:65"><expr pos:start="67:48" pos:end="67:65"><literal type="string" pos:start="67:48" pos:end="67:65">"run %d oveflow\n"</literal></expr></argument>, <argument pos:start="67:68" pos:end="67:68"><expr pos:start="67:68" pos:end="67:68"><name pos:start="67:68" pos:end="67:68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="69:17" pos:end="69:25">return <expr pos:start="69:24" pos:end="69:24"><literal type="number" pos:start="69:24" pos:end="69:24">0</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="75:13" pos:end="75:36"><expr pos:start="75:13" pos:end="75:35"><name pos:start="75:13" pos:end="75:13">j</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <name pos:start="75:17" pos:end="75:35"><name pos:start="75:17" pos:end="75:32">ff_zigzag_direct</name><index pos:start="75:33" pos:end="75:35">[<expr pos:start="75:34" pos:end="75:34"><name pos:start="75:34" pos:end="75:34">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:48"><expr pos:start="77:13" pos:end="77:47"><name pos:start="77:13" pos:end="77:20"><name pos:start="77:13" pos:end="77:17">block</name><index pos:start="77:18" pos:end="77:20">[<expr pos:start="77:19" pos:end="77:19"><name pos:start="77:19" pos:end="77:19">j</name></expr>]</index></name> <operator pos:start="77:22" pos:end="77:22">=</operator> <name pos:start="77:24" pos:end="77:28">level</name> <operator pos:start="77:30" pos:end="77:30">*</operator> <name pos:start="77:32" pos:end="77:47"><name pos:start="77:32" pos:end="77:44">dequant_table</name><index pos:start="77:45" pos:end="77:47">[<expr pos:start="77:46" pos:end="77:46"><name pos:start="77:46" pos:end="77:46">j</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:16"><expr pos:start="79:13" pos:end="79:15"><name pos:start="79:13" pos:end="79:13">i</name><operator pos:start="79:14" pos:end="79:15">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="81:13" pos:end="83:22"><if pos:start="81:13" pos:end="83:22">if <condition pos:start="81:16" pos:end="81:24">(<expr pos:start="81:17" pos:end="81:23"><name pos:start="81:17" pos:end="81:17">i</name> <operator pos:start="81:19" pos:end="81:20">&gt;=</operator> <literal type="number" pos:start="81:22" pos:end="81:23">64</literal></expr>)</condition><block type="pseudo" pos:start="83:17" pos:end="83:22"><block_content pos:start="83:17" pos:end="83:22">

                <break pos:start="83:17" pos:end="83:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <return pos:start="91:5" pos:end="91:13">return <expr pos:start="91:12" pos:end="91:12"><literal type="number" pos:start="91:12" pos:end="91:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
