<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22061.c" pos:tabs="8"><function pos:start="1:1" pos:end="124:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">ff_combine_frame</name><parameter_list pos:start="1:21" pos:end="1:84">(<parameter pos:start="1:22" pos:end="1:37"><decl pos:start="1:22" pos:end="1:37"><type pos:start="1:22" pos:end="1:37"><name pos:start="1:22" pos:end="1:33">ParseContext</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:37">pc</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:47"><decl pos:start="1:40" pos:end="1:47"><type pos:start="1:40" pos:end="1:47"><name pos:start="1:40" pos:end="1:42">int</name></type> <name pos:start="1:44" pos:end="1:47">next</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:68"><decl pos:start="1:50" pos:end="1:68"><type pos:start="1:50" pos:end="1:68"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:62">uint8_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier><modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">buf</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:83"><decl pos:start="1:71" pos:end="1:83"><type pos:start="1:71" pos:end="1:83"><name pos:start="1:71" pos:end="1:73">int</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:83">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="124:1">{<block_content pos:start="5:5" pos:end="122:13">

    <if_stmt pos:start="5:5" pos:end="13:5"><if pos:start="5:5" pos:end="13:5">if<condition pos:start="5:7" pos:end="5:20">(<expr pos:start="5:8" pos:end="5:19"><name pos:start="5:8" pos:end="5:19"><name pos:start="5:8" pos:end="5:9">pc</name><operator pos:start="5:10" pos:end="5:11">-&gt;</operator><name pos:start="5:12" pos:end="5:19">overread</name></name></expr>)</condition><block pos:start="5:21" pos:end="13:5">{<block_content pos:start="7:9" pos:end="11:83">

        <expr_stmt pos:start="7:9" pos:end="9:78"><expr pos:start="7:9" pos:end="9:77"><call pos:start="7:9" pos:end="9:77"><name pos:start="7:9" pos:end="7:15">av_dlog</name><argument_list pos:start="7:16" pos:end="9:77">(<argument pos:start="7:17" pos:end="7:20"><expr pos:start="7:17" pos:end="7:20"><name pos:start="7:17" pos:end="7:20">NULL</name></expr></argument>, <argument pos:start="7:23" pos:end="7:75"><expr pos:start="7:23" pos:end="7:75"><literal type="string" pos:start="7:23" pos:end="7:75">"overread %d, state:%X next:%d index:%d o_index:%d\n"</literal></expr></argument>,

                <argument pos:start="9:17" pos:end="9:28"><expr pos:start="9:17" pos:end="9:28"><name pos:start="9:17" pos:end="9:28"><name pos:start="9:17" pos:end="9:18">pc</name><operator pos:start="9:19" pos:end="9:20">-&gt;</operator><name pos:start="9:21" pos:end="9:28">overread</name></name></expr></argument>, <argument pos:start="9:31" pos:end="9:39"><expr pos:start="9:31" pos:end="9:39"><name pos:start="9:31" pos:end="9:39"><name pos:start="9:31" pos:end="9:32">pc</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:39">state</name></name></expr></argument>, <argument pos:start="9:42" pos:end="9:45"><expr pos:start="9:42" pos:end="9:45"><name pos:start="9:42" pos:end="9:45">next</name></expr></argument>, <argument pos:start="9:48" pos:end="9:56"><expr pos:start="9:48" pos:end="9:56"><name pos:start="9:48" pos:end="9:56"><name pos:start="9:48" pos:end="9:49">pc</name><operator pos:start="9:50" pos:end="9:51">-&gt;</operator><name pos:start="9:52" pos:end="9:56">index</name></name></expr></argument>, <argument pos:start="9:59" pos:end="9:76"><expr pos:start="9:59" pos:end="9:76"><name pos:start="9:59" pos:end="9:76"><name pos:start="9:59" pos:end="9:60">pc</name><operator pos:start="9:61" pos:end="9:62">-&gt;</operator><name pos:start="9:63" pos:end="9:76">overread_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="11:9" pos:end="11:83"><expr pos:start="11:9" pos:end="11:82"><call pos:start="11:9" pos:end="11:82"><name pos:start="11:9" pos:end="11:15">av_dlog</name><argument_list pos:start="11:16" pos:end="11:82">(<argument pos:start="11:17" pos:end="11:20"><expr pos:start="11:17" pos:end="11:20"><name pos:start="11:17" pos:end="11:20">NULL</name></expr></argument>, <argument pos:start="11:23" pos:end="11:37"><expr pos:start="11:23" pos:end="11:37"><literal type="string" pos:start="11:23" pos:end="11:37">"%X %X %X %X\n"</literal></expr></argument>, <argument pos:start="11:40" pos:end="11:48"><expr pos:start="11:40" pos:end="11:48"><operator pos:start="11:40" pos:end="11:40">(</operator><operator pos:start="11:41" pos:end="11:41">*</operator><name pos:start="11:42" pos:end="11:44">buf</name><operator pos:start="11:45" pos:end="11:45">)</operator><index pos:start="11:46" pos:end="11:48">[<expr pos:start="11:47" pos:end="11:47"><literal type="number" pos:start="11:47" pos:end="11:47">0</literal></expr>]</index></expr></argument>, <argument pos:start="11:51" pos:end="11:59"><expr pos:start="11:51" pos:end="11:59"><operator pos:start="11:51" pos:end="11:51">(</operator><operator pos:start="11:52" pos:end="11:52">*</operator><name pos:start="11:53" pos:end="11:55">buf</name><operator pos:start="11:56" pos:end="11:56">)</operator><index pos:start="11:57" pos:end="11:59">[<expr pos:start="11:58" pos:end="11:58"><literal type="number" pos:start="11:58" pos:end="11:58">1</literal></expr>]</index></expr></argument>, <argument pos:start="11:62" pos:end="11:70"><expr pos:start="11:62" pos:end="11:70"><operator pos:start="11:62" pos:end="11:62">(</operator><operator pos:start="11:63" pos:end="11:63">*</operator><name pos:start="11:64" pos:end="11:66">buf</name><operator pos:start="11:67" pos:end="11:67">)</operator><index pos:start="11:68" pos:end="11:70">[<expr pos:start="11:69" pos:end="11:69"><literal type="number" pos:start="11:69" pos:end="11:69">2</literal></expr>]</index></expr></argument>, <argument pos:start="11:73" pos:end="11:81"><expr pos:start="11:73" pos:end="11:81"><operator pos:start="11:73" pos:end="11:73">(</operator><operator pos:start="11:74" pos:end="11:74">*</operator><name pos:start="11:75" pos:end="11:77">buf</name><operator pos:start="11:78" pos:end="11:78">)</operator><index pos:start="11:79" pos:end="11:81">[<expr pos:start="11:80" pos:end="11:80"><literal type="number" pos:start="11:80" pos:end="11:80">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:58">/* Copy overread bytes from last frame into buffer. */</comment>

    <for pos:start="19:5" pos:end="23:5">for<control pos:start="19:8" pos:end="19:41">(<init pos:start="19:9" pos:end="19:9">;</init> <condition pos:start="19:11" pos:end="19:25"><expr pos:start="19:11" pos:end="19:24"><name pos:start="19:11" pos:end="19:22"><name pos:start="19:11" pos:end="19:12">pc</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:22">overread</name></name><operator pos:start="19:23" pos:end="19:23">&gt;</operator><literal type="number" pos:start="19:24" pos:end="19:24">0</literal></expr>;</condition> <incr pos:start="19:27" pos:end="19:40"><expr pos:start="19:27" pos:end="19:40"><name pos:start="19:27" pos:end="19:38"><name pos:start="19:27" pos:end="19:28">pc</name><operator pos:start="19:29" pos:end="19:30">-&gt;</operator><name pos:start="19:31" pos:end="19:38">overread</name></name><operator pos:start="19:39" pos:end="19:40">--</operator></expr></incr>)</control><block pos:start="19:42" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:66">

        <expr_stmt pos:start="21:9" pos:end="21:66"><expr pos:start="21:9" pos:end="21:65"><name pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:10">pc</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:18">buffer</name><index pos:start="21:19" pos:end="21:31">[<expr pos:start="21:20" pos:end="21:30"><name pos:start="21:20" pos:end="21:28"><name pos:start="21:20" pos:end="21:21">pc</name><operator pos:start="21:22" pos:end="21:23">-&gt;</operator><name pos:start="21:24" pos:end="21:28">index</name></name><operator pos:start="21:29" pos:end="21:30">++</operator></expr>]</index></name><operator pos:start="21:32" pos:end="21:32">=</operator> <name pos:start="21:34" pos:end="21:65"><name pos:start="21:34" pos:end="21:35">pc</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:43">buffer</name><index pos:start="21:44" pos:end="21:65">[<expr pos:start="21:45" pos:end="21:64"><name pos:start="21:45" pos:end="21:62"><name pos:start="21:45" pos:end="21:46">pc</name><operator pos:start="21:47" pos:end="21:48">-&gt;</operator><name pos:start="21:49" pos:end="21:62">overread_index</name></name><operator pos:start="21:63" pos:end="21:64">++</operator></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="27:5" pos:end="27:32">/* flush remaining if EOF */</comment>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if<condition pos:start="29:7" pos:end="29:43">(<expr pos:start="29:8" pos:end="29:42"><operator pos:start="29:8" pos:end="29:8">!</operator><operator pos:start="29:9" pos:end="29:9">*</operator><name pos:start="29:10" pos:end="29:17">buf_size</name> <operator pos:start="29:19" pos:end="29:20">&amp;&amp;</operator> <name pos:start="29:22" pos:end="29:25">next</name> <operator pos:start="29:27" pos:end="29:28">==</operator> <name pos:start="29:30" pos:end="29:42">END_NOT_FOUND</name></expr>)</condition><block pos:start="29:44" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:16">

        <expr_stmt pos:start="31:9" pos:end="31:16"><expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:12">next</name><operator pos:start="31:13" pos:end="31:13">=</operator> <literal type="number" pos:start="31:15" pos:end="31:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:6">pc</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:18">last_index</name></name><operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:29"><name pos:start="37:21" pos:end="37:22">pc</name><operator pos:start="37:23" pos:end="37:24">-&gt;</operator><name pos:start="37:25" pos:end="37:29">index</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:37">/* copy into buffer end return */</comment>

    <if_stmt pos:start="43:5" pos:end="61:5"><if pos:start="43:5" pos:end="61:5">if<condition pos:start="43:7" pos:end="43:29">(<expr pos:start="43:8" pos:end="43:28"><name pos:start="43:8" pos:end="43:11">next</name> <operator pos:start="43:13" pos:end="43:14">==</operator> <name pos:start="43:16" pos:end="43:28">END_NOT_FOUND</name></expr>)</condition><block pos:start="43:30" pos:end="61:5">{<block_content pos:start="45:9" pos:end="59:18">

        <decl_stmt pos:start="45:9" pos:end="45:129"><decl pos:start="45:9" pos:end="45:128"><type pos:start="45:9" pos:end="45:13"><name pos:start="45:9" pos:end="45:12">void</name><modifier pos:start="45:13" pos:end="45:13">*</modifier></type> <name pos:start="45:15" pos:end="45:24">new_buffer</name> <init pos:start="45:26" pos:end="45:128">= <expr pos:start="45:28" pos:end="45:128"><call pos:start="45:28" pos:end="45:128"><name pos:start="45:28" pos:end="45:42">av_fast_realloc</name><argument_list pos:start="45:43" pos:end="45:128">(<argument pos:start="45:44" pos:end="45:53"><expr pos:start="45:44" pos:end="45:53"><name pos:start="45:44" pos:end="45:53"><name pos:start="45:44" pos:end="45:45">pc</name><operator pos:start="45:46" pos:end="45:47">-&gt;</operator><name pos:start="45:48" pos:end="45:53">buffer</name></name></expr></argument>, <argument pos:start="45:56" pos:end="45:71"><expr pos:start="45:56" pos:end="45:71"><operator pos:start="45:56" pos:end="45:56">&amp;</operator><name pos:start="45:57" pos:end="45:71"><name pos:start="45:57" pos:end="45:58">pc</name><operator pos:start="45:59" pos:end="45:60">-&gt;</operator><name pos:start="45:61" pos:end="45:71">buffer_size</name></name></expr></argument>, <argument pos:start="45:74" pos:end="45:127"><expr pos:start="45:74" pos:end="45:127"><operator pos:start="45:74" pos:end="45:74">(</operator><operator pos:start="45:75" pos:end="45:75">*</operator><name pos:start="45:76" pos:end="45:83">buf_size</name><operator pos:start="45:84" pos:end="45:84">)</operator> <operator pos:start="45:86" pos:end="45:86">+</operator> <name pos:start="45:88" pos:end="45:96"><name pos:start="45:88" pos:end="45:89">pc</name><operator pos:start="45:90" pos:end="45:91">-&gt;</operator><name pos:start="45:92" pos:end="45:96">index</name></name> <operator pos:start="45:98" pos:end="45:98">+</operator> <name pos:start="45:100" pos:end="45:127">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="49:9" pos:end="51:35"><if pos:start="49:9" pos:end="51:35">if<condition pos:start="49:11" pos:end="49:23">(<expr pos:start="49:12" pos:end="49:22"><operator pos:start="49:12" pos:end="49:12">!</operator><name pos:start="49:13" pos:end="49:22">new_buffer</name></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:35"><block_content pos:start="51:13" pos:end="51:35">

            <return pos:start="51:13" pos:end="51:35">return <expr pos:start="51:20" pos:end="51:34"><call pos:start="51:20" pos:end="51:34"><name pos:start="51:20" pos:end="51:26">AVERROR</name><argument_list pos:start="51:27" pos:end="51:34">(<argument pos:start="51:28" pos:end="51:33"><expr pos:start="51:28" pos:end="51:33"><name pos:start="51:28" pos:end="51:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:32"><expr pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:10">pc</name><operator pos:start="53:11" pos:end="53:12">-&gt;</operator><name pos:start="53:13" pos:end="53:18">buffer</name></name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:31">new_buffer</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:56"><expr pos:start="55:9" pos:end="55:55"><call pos:start="55:9" pos:end="55:55"><name pos:start="55:9" pos:end="55:14">memcpy</name><argument_list pos:start="55:15" pos:end="55:55">(<argument pos:start="55:16" pos:end="55:37"><expr pos:start="55:16" pos:end="55:37"><operator pos:start="55:16" pos:end="55:16">&amp;</operator><name pos:start="55:17" pos:end="55:37"><name pos:start="55:17" pos:end="55:18">pc</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:26">buffer</name><index pos:start="55:27" pos:end="55:37">[<expr pos:start="55:28" pos:end="55:36"><name pos:start="55:28" pos:end="55:36"><name pos:start="55:28" pos:end="55:29">pc</name><operator pos:start="55:30" pos:end="55:31">-&gt;</operator><name pos:start="55:32" pos:end="55:36">index</name></name></expr>]</index></name></expr></argument>, <argument pos:start="55:40" pos:end="55:43"><expr pos:start="55:40" pos:end="55:43"><operator pos:start="55:40" pos:end="55:40">*</operator><name pos:start="55:41" pos:end="55:43">buf</name></expr></argument>, <argument pos:start="55:46" pos:end="55:54"><expr pos:start="55:46" pos:end="55:54"><operator pos:start="55:46" pos:end="55:46">*</operator><name pos:start="55:47" pos:end="55:54">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:31"><expr pos:start="57:9" pos:end="57:30"><name pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:10">pc</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:17">index</name></name> <operator pos:start="57:19" pos:end="57:20">+=</operator> <operator pos:start="57:22" pos:end="57:22">*</operator><name pos:start="57:23" pos:end="57:30">buf_size</name></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:18">return <expr pos:start="59:16" pos:end="59:17"><operator pos:start="59:16" pos:end="59:16">-</operator><literal type="number" pos:start="59:17" pos:end="59:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="67:41"><expr pos:start="65:5" pos:end="67:40"><operator pos:start="65:5" pos:end="65:5">*</operator><name pos:start="65:6" pos:end="65:13">buf_size</name><operator pos:start="65:14" pos:end="65:14">=</operator>

    <name pos:start="67:5" pos:end="67:22"><name pos:start="67:5" pos:end="67:6">pc</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:22">overread_index</name></name><operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:33"><name pos:start="67:25" pos:end="67:26">pc</name><operator pos:start="67:27" pos:end="67:28">-&gt;</operator><name pos:start="67:29" pos:end="67:33">index</name></name> <operator pos:start="67:35" pos:end="67:35">+</operator> <name pos:start="67:37" pos:end="67:40">next</name></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:26">/* append to buffer */</comment>

    <if_stmt pos:start="73:5" pos:end="92:5"><if pos:start="73:5" pos:end="92:5">if<condition pos:start="73:7" pos:end="73:17">(<expr pos:start="73:8" pos:end="73:16"><name pos:start="73:8" pos:end="73:16"><name pos:start="73:8" pos:end="73:9">pc</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:16">index</name></name></expr>)</condition><block pos:start="73:18" pos:end="92:5">{<block_content pos:start="75:9" pos:end="90:25">

        <decl_stmt pos:start="75:9" pos:end="75:122"><decl pos:start="75:9" pos:end="75:121"><type pos:start="75:9" pos:end="75:13"><name pos:start="75:9" pos:end="75:12">void</name><modifier pos:start="75:13" pos:end="75:13">*</modifier></type> <name pos:start="75:15" pos:end="75:24">new_buffer</name> <init pos:start="75:26" pos:end="75:121">= <expr pos:start="75:28" pos:end="75:121"><call pos:start="75:28" pos:end="75:121"><name pos:start="75:28" pos:end="75:42">av_fast_realloc</name><argument_list pos:start="75:43" pos:end="75:121">(<argument pos:start="75:44" pos:end="75:53"><expr pos:start="75:44" pos:end="75:53"><name pos:start="75:44" pos:end="75:53"><name pos:start="75:44" pos:end="75:45">pc</name><operator pos:start="75:46" pos:end="75:47">-&gt;</operator><name pos:start="75:48" pos:end="75:53">buffer</name></name></expr></argument>, <argument pos:start="75:56" pos:end="75:71"><expr pos:start="75:56" pos:end="75:71"><operator pos:start="75:56" pos:end="75:56">&amp;</operator><name pos:start="75:57" pos:end="75:71"><name pos:start="75:57" pos:end="75:58">pc</name><operator pos:start="75:59" pos:end="75:60">-&gt;</operator><name pos:start="75:61" pos:end="75:71">buffer_size</name></name></expr></argument>, <argument pos:start="75:74" pos:end="75:120"><expr pos:start="75:74" pos:end="75:120"><name pos:start="75:74" pos:end="75:77">next</name> <operator pos:start="75:79" pos:end="75:79">+</operator> <name pos:start="75:81" pos:end="75:89"><name pos:start="75:81" pos:end="75:82">pc</name><operator pos:start="75:83" pos:end="75:84">-&gt;</operator><name pos:start="75:85" pos:end="75:89">index</name></name> <operator pos:start="75:91" pos:end="75:91">+</operator> <name pos:start="75:93" pos:end="75:120">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="79:9" pos:end="81:35"><if pos:start="79:9" pos:end="81:35">if<condition pos:start="79:11" pos:end="79:23">(<expr pos:start="79:12" pos:end="79:22"><operator pos:start="79:12" pos:end="79:12">!</operator><name pos:start="79:13" pos:end="79:22">new_buffer</name></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:35"><block_content pos:start="81:13" pos:end="81:35">

            <return pos:start="81:13" pos:end="81:35">return <expr pos:start="81:20" pos:end="81:34"><call pos:start="81:20" pos:end="81:34"><name pos:start="81:20" pos:end="81:26">AVERROR</name><argument_list pos:start="81:27" pos:end="81:34">(<argument pos:start="81:28" pos:end="81:33"><expr pos:start="81:28" pos:end="81:33"><name pos:start="81:28" pos:end="81:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:32"><expr pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:10">pc</name><operator pos:start="83:11" pos:end="83:12">-&gt;</operator><name pos:start="83:13" pos:end="83:18">buffer</name></name> <operator pos:start="83:20" pos:end="83:20">=</operator> <name pos:start="83:22" pos:end="83:31">new_buffer</name></expr>;</expr_stmt>


        <expr_stmt pos:start="86:9" pos:end="86:83"><expr pos:start="86:9" pos:end="86:82"><call pos:start="86:9" pos:end="86:82"><name pos:start="86:9" pos:end="86:14">memcpy</name><argument_list pos:start="86:15" pos:end="86:82">(<argument pos:start="86:16" pos:end="86:37"><expr pos:start="86:16" pos:end="86:37"><operator pos:start="86:16" pos:end="86:16">&amp;</operator><name pos:start="86:17" pos:end="86:37"><name pos:start="86:17" pos:end="86:18">pc</name><operator pos:start="86:19" pos:end="86:20">-&gt;</operator><name pos:start="86:21" pos:end="86:26">buffer</name><index pos:start="86:27" pos:end="86:37">[<expr pos:start="86:28" pos:end="86:36"><name pos:start="86:28" pos:end="86:36"><name pos:start="86:28" pos:end="86:29">pc</name><operator pos:start="86:30" pos:end="86:31">-&gt;</operator><name pos:start="86:32" pos:end="86:36">index</name></name></expr>]</index></name></expr></argument>, <argument pos:start="86:40" pos:end="86:43"><expr pos:start="86:40" pos:end="86:43"><operator pos:start="86:40" pos:end="86:40">*</operator><name pos:start="86:41" pos:end="86:43">buf</name></expr></argument>, <argument pos:start="86:46" pos:end="86:80"><expr pos:start="86:46" pos:end="86:80"><name pos:start="86:46" pos:end="86:49">next</name> <operator pos:start="86:51" pos:end="86:51">+</operator> <name pos:start="86:53" pos:end="86:80">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="88:9" pos:end="88:22"><expr pos:start="88:9" pos:end="88:21"><name pos:start="88:9" pos:end="88:17"><name pos:start="88:9" pos:end="88:10">pc</name><operator pos:start="88:11" pos:end="88:12">-&gt;</operator><name pos:start="88:13" pos:end="88:17">index</name></name> <operator pos:start="88:19" pos:end="88:19">=</operator> <literal type="number" pos:start="88:21" pos:end="88:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="90:9" pos:end="90:25"><expr pos:start="90:9" pos:end="90:24"><operator pos:start="90:9" pos:end="90:9">*</operator><name pos:start="90:10" pos:end="90:12">buf</name><operator pos:start="90:13" pos:end="90:13">=</operator> <name pos:start="90:15" pos:end="90:24"><name pos:start="90:15" pos:end="90:16">pc</name><operator pos:start="90:17" pos:end="90:18">-&gt;</operator><name pos:start="90:19" pos:end="90:24">buffer</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="96:5" pos:end="96:30">/* store overread bytes */</comment>

    <for pos:start="98:5" pos:end="106:5">for<control pos:start="98:8" pos:end="98:26">(<init pos:start="98:9" pos:end="98:9">;</init><condition pos:start="98:10" pos:end="98:18"><expr pos:start="98:10" pos:end="98:17"><name pos:start="98:10" pos:end="98:13">next</name> <operator pos:start="98:15" pos:end="98:15">&lt;</operator> <literal type="number" pos:start="98:17" pos:end="98:17">0</literal></expr>;</condition> <incr pos:start="98:20" pos:end="98:25"><expr pos:start="98:20" pos:end="98:25"><name pos:start="98:20" pos:end="98:23">next</name><operator pos:start="98:24" pos:end="98:25">++</operator></expr></incr>)</control><block pos:start="98:27" pos:end="106:5">{<block_content pos:start="100:9" pos:end="104:23">

        <expr_stmt pos:start="100:9" pos:end="100:71"><expr pos:start="100:9" pos:end="100:70"><name pos:start="100:9" pos:end="100:17"><name pos:start="100:9" pos:end="100:10">pc</name><operator pos:start="100:11" pos:end="100:12">-&gt;</operator><name pos:start="100:13" pos:end="100:17">state</name></name> <operator pos:start="100:19" pos:end="100:19">=</operator> <operator pos:start="100:21" pos:end="100:21">(</operator><name pos:start="100:22" pos:end="100:30"><name pos:start="100:22" pos:end="100:23">pc</name><operator pos:start="100:24" pos:end="100:25">-&gt;</operator><name pos:start="100:26" pos:end="100:30">state</name></name><operator pos:start="100:31" pos:end="100:32">&lt;&lt;</operator><literal type="number" pos:start="100:33" pos:end="100:33">8</literal><operator pos:start="100:34" pos:end="100:34">)</operator> <operator pos:start="100:36" pos:end="100:36">|</operator> <name pos:start="100:38" pos:end="100:70"><name pos:start="100:38" pos:end="100:39">pc</name><operator pos:start="100:40" pos:end="100:41">-&gt;</operator><name pos:start="100:42" pos:end="100:47">buffer</name><index pos:start="100:48" pos:end="100:70">[<expr pos:start="100:49" pos:end="100:69"><name pos:start="100:49" pos:end="100:62"><name pos:start="100:49" pos:end="100:50">pc</name><operator pos:start="100:51" pos:end="100:52">-&gt;</operator><name pos:start="100:53" pos:end="100:62">last_index</name></name> <operator pos:start="100:64" pos:end="100:64">+</operator> <name pos:start="100:66" pos:end="100:69">next</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="102:9" pos:end="102:75"><expr pos:start="102:9" pos:end="102:74"><name pos:start="102:9" pos:end="102:19"><name pos:start="102:9" pos:end="102:10">pc</name><operator pos:start="102:11" pos:end="102:12">-&gt;</operator><name pos:start="102:13" pos:end="102:19">state64</name></name> <operator pos:start="102:21" pos:end="102:21">=</operator> <operator pos:start="102:23" pos:end="102:23">(</operator><name pos:start="102:24" pos:end="102:34"><name pos:start="102:24" pos:end="102:25">pc</name><operator pos:start="102:26" pos:end="102:27">-&gt;</operator><name pos:start="102:28" pos:end="102:34">state64</name></name><operator pos:start="102:35" pos:end="102:36">&lt;&lt;</operator><literal type="number" pos:start="102:37" pos:end="102:37">8</literal><operator pos:start="102:38" pos:end="102:38">)</operator> <operator pos:start="102:40" pos:end="102:40">|</operator> <name pos:start="102:42" pos:end="102:74"><name pos:start="102:42" pos:end="102:43">pc</name><operator pos:start="102:44" pos:end="102:45">-&gt;</operator><name pos:start="102:46" pos:end="102:51">buffer</name><index pos:start="102:52" pos:end="102:74">[<expr pos:start="102:53" pos:end="102:73"><name pos:start="102:53" pos:end="102:66"><name pos:start="102:53" pos:end="102:54">pc</name><operator pos:start="102:55" pos:end="102:56">-&gt;</operator><name pos:start="102:57" pos:end="102:66">last_index</name></name> <operator pos:start="102:68" pos:end="102:68">+</operator> <name pos:start="102:70" pos:end="102:73">next</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="104:9" pos:end="104:23"><expr pos:start="104:9" pos:end="104:22"><name pos:start="104:9" pos:end="104:20"><name pos:start="104:9" pos:end="104:10">pc</name><operator pos:start="104:11" pos:end="104:12">-&gt;</operator><name pos:start="104:13" pos:end="104:20">overread</name></name><operator pos:start="104:21" pos:end="104:22">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="110:5" pos:end="118:5"><if pos:start="110:5" pos:end="118:5">if<condition pos:start="110:7" pos:end="110:20">(<expr pos:start="110:8" pos:end="110:19"><name pos:start="110:8" pos:end="110:19"><name pos:start="110:8" pos:end="110:9">pc</name><operator pos:start="110:10" pos:end="110:11">-&gt;</operator><name pos:start="110:12" pos:end="110:19">overread</name></name></expr>)</condition><block pos:start="110:21" pos:end="118:5">{<block_content pos:start="112:9" pos:end="116:81">

        <expr_stmt pos:start="112:9" pos:end="114:78"><expr pos:start="112:9" pos:end="114:77"><call pos:start="112:9" pos:end="114:77"><name pos:start="112:9" pos:end="112:15">av_dlog</name><argument_list pos:start="112:16" pos:end="114:77">(<argument pos:start="112:17" pos:end="112:20"><expr pos:start="112:17" pos:end="112:20"><name pos:start="112:17" pos:end="112:20">NULL</name></expr></argument>, <argument pos:start="112:23" pos:end="112:75"><expr pos:start="112:23" pos:end="112:75"><literal type="string" pos:start="112:23" pos:end="112:75">"overread %d, state:%X next:%d index:%d o_index:%d\n"</literal></expr></argument>,

                <argument pos:start="114:17" pos:end="114:28"><expr pos:start="114:17" pos:end="114:28"><name pos:start="114:17" pos:end="114:28"><name pos:start="114:17" pos:end="114:18">pc</name><operator pos:start="114:19" pos:end="114:20">-&gt;</operator><name pos:start="114:21" pos:end="114:28">overread</name></name></expr></argument>, <argument pos:start="114:31" pos:end="114:39"><expr pos:start="114:31" pos:end="114:39"><name pos:start="114:31" pos:end="114:39"><name pos:start="114:31" pos:end="114:32">pc</name><operator pos:start="114:33" pos:end="114:34">-&gt;</operator><name pos:start="114:35" pos:end="114:39">state</name></name></expr></argument>, <argument pos:start="114:42" pos:end="114:45"><expr pos:start="114:42" pos:end="114:45"><name pos:start="114:42" pos:end="114:45">next</name></expr></argument>, <argument pos:start="114:48" pos:end="114:56"><expr pos:start="114:48" pos:end="114:56"><name pos:start="114:48" pos:end="114:56"><name pos:start="114:48" pos:end="114:49">pc</name><operator pos:start="114:50" pos:end="114:51">-&gt;</operator><name pos:start="114:52" pos:end="114:56">index</name></name></expr></argument>, <argument pos:start="114:59" pos:end="114:76"><expr pos:start="114:59" pos:end="114:76"><name pos:start="114:59" pos:end="114:76"><name pos:start="114:59" pos:end="114:60">pc</name><operator pos:start="114:61" pos:end="114:62">-&gt;</operator><name pos:start="114:63" pos:end="114:76">overread_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="116:9" pos:end="116:81"><expr pos:start="116:9" pos:end="116:80"><call pos:start="116:9" pos:end="116:80"><name pos:start="116:9" pos:end="116:15">av_dlog</name><argument_list pos:start="116:16" pos:end="116:80">(<argument pos:start="116:17" pos:end="116:20"><expr pos:start="116:17" pos:end="116:20"><name pos:start="116:17" pos:end="116:20">NULL</name></expr></argument>, <argument pos:start="116:23" pos:end="116:37"><expr pos:start="116:23" pos:end="116:37"><literal type="string" pos:start="116:23" pos:end="116:37">"%X %X %X %X\n"</literal></expr></argument>, <argument pos:start="116:40" pos:end="116:48"><expr pos:start="116:40" pos:end="116:48"><operator pos:start="116:40" pos:end="116:40">(</operator><operator pos:start="116:41" pos:end="116:41">*</operator><name pos:start="116:42" pos:end="116:44">buf</name><operator pos:start="116:45" pos:end="116:45">)</operator><index pos:start="116:46" pos:end="116:48">[<expr pos:start="116:47" pos:end="116:47"><literal type="number" pos:start="116:47" pos:end="116:47">0</literal></expr>]</index></expr></argument>, <argument pos:start="116:51" pos:end="116:59"><expr pos:start="116:51" pos:end="116:59"><operator pos:start="116:51" pos:end="116:51">(</operator><operator pos:start="116:52" pos:end="116:52">*</operator><name pos:start="116:53" pos:end="116:55">buf</name><operator pos:start="116:56" pos:end="116:56">)</operator><index pos:start="116:57" pos:end="116:59">[<expr pos:start="116:58" pos:end="116:58"><literal type="number" pos:start="116:58" pos:end="116:58">1</literal></expr>]</index></expr></argument>,<argument pos:start="116:61" pos:end="116:69"><expr pos:start="116:61" pos:end="116:69"><operator pos:start="116:61" pos:end="116:61">(</operator><operator pos:start="116:62" pos:end="116:62">*</operator><name pos:start="116:63" pos:end="116:65">buf</name><operator pos:start="116:66" pos:end="116:66">)</operator><index pos:start="116:67" pos:end="116:69">[<expr pos:start="116:68" pos:end="116:68"><literal type="number" pos:start="116:68" pos:end="116:68">2</literal></expr>]</index></expr></argument>,<argument pos:start="116:71" pos:end="116:79"><expr pos:start="116:71" pos:end="116:79"><operator pos:start="116:71" pos:end="116:71">(</operator><operator pos:start="116:72" pos:end="116:72">*</operator><name pos:start="116:73" pos:end="116:75">buf</name><operator pos:start="116:76" pos:end="116:76">)</operator><index pos:start="116:77" pos:end="116:79">[<expr pos:start="116:78" pos:end="116:78"><literal type="number" pos:start="116:78" pos:end="116:78">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="122:5" pos:end="122:13">return <expr pos:start="122:12" pos:end="122:12"><literal type="number" pos:start="122:12" pos:end="122:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
