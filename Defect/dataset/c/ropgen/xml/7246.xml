<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7246.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">compile_kernel_file</name><parameter_list pos:start="1:31" pos:end="1:74">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:37">GPUEnv</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:46">gpu_env</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:73"><decl pos:start="1:49" pos:end="1:73"><type pos:start="1:49" pos:end="1:73"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:58">char</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:73">build_options</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:15">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">cl_int</name></type> <name pos:start="5:12" pos:end="5:17">status</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:14">temp</name></decl>, <decl pos:start="7:17" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:27">source_str</name> <init pos:start="7:29" pos:end="7:34">= <expr pos:start="7:31" pos:end="7:34"><name pos:start="7:31" pos:end="7:34">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:25">source_str_len</name> <init pos:start="9:27" pos:end="9:29">= <expr pos:start="9:29" pos:end="9:29"><literal type="number" pos:start="9:29" pos:end="9:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:18"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">ret</name> <init pos:start="11:16" pos:end="11:18">= <expr pos:start="11:18" pos:end="11:18"><literal type="number" pos:start="11:18" pos:end="11:18">0</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="21:5">for <control pos:start="15:9" pos:end="15:52">(<init pos:start="15:10" pos:end="15:15"><expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:10">i</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</init> <condition pos:start="15:17" pos:end="15:47"><expr pos:start="15:17" pos:end="15:46"><name pos:start="15:17" pos:end="15:17">i</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <name pos:start="15:21" pos:end="15:46"><name pos:start="15:21" pos:end="15:27">gpu_env</name><operator pos:start="15:28" pos:end="15:29">-&gt;</operator><name pos:start="15:30" pos:end="15:46">kernel_code_count</name></name></expr>;</condition> <incr pos:start="15:49" pos:end="15:51"><expr pos:start="15:49" pos:end="15:51"><name pos:start="15:49" pos:end="15:49">i</name><operator pos:start="15:50" pos:end="15:51">++</operator></expr></incr>)</control> <block pos:start="15:54" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:76">

        <if_stmt pos:start="17:9" pos:end="19:76"><if pos:start="17:9" pos:end="19:76">if <condition pos:start="17:12" pos:end="17:49">(<expr pos:start="17:13" pos:end="17:48"><operator pos:start="17:13" pos:end="17:13">!</operator><name pos:start="17:14" pos:end="17:36"><name pos:start="17:14" pos:end="17:20">gpu_env</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:33">kernel_code</name><index pos:start="17:34" pos:end="17:36">[<expr pos:start="17:35" pos:end="17:35"><name pos:start="17:35" pos:end="17:35">i</name></expr>]</index></name><operator pos:start="17:37" pos:end="17:37">.</operator><name pos:start="17:38" pos:end="17:48">is_compiled</name></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:76"><block_content pos:start="19:13" pos:end="19:76">

            <expr_stmt pos:start="19:13" pos:end="19:76"><expr pos:start="19:13" pos:end="19:75"><name pos:start="19:13" pos:end="19:26">source_str_len</name> <operator pos:start="19:28" pos:end="19:29">+=</operator> <call pos:start="19:31" pos:end="19:75"><name pos:start="19:31" pos:end="19:36">strlen</name><argument_list pos:start="19:37" pos:end="19:75">(<argument pos:start="19:38" pos:end="19:74"><expr pos:start="19:38" pos:end="19:74"><name pos:start="19:38" pos:end="19:60"><name pos:start="19:38" pos:end="19:44">gpu_env</name><operator pos:start="19:45" pos:end="19:46">-&gt;</operator><name pos:start="19:47" pos:end="19:57">kernel_code</name><index pos:start="19:58" pos:end="19:60">[<expr pos:start="19:59" pos:end="19:59"><name pos:start="19:59" pos:end="19:59">i</name></expr>]</index></name><operator pos:start="19:61" pos:end="19:61">.</operator><name pos:start="19:62" pos:end="19:74">kernel_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:24">(<expr pos:start="23:9" pos:end="23:23"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:23">source_str_len</name></expr>)</condition> <block pos:start="23:26" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:17">

        <return pos:start="25:9" pos:end="25:17">return <expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:48"><expr pos:start="29:5" pos:end="29:47"><name pos:start="29:5" pos:end="29:14">source_str</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <call pos:start="29:18" pos:end="29:47"><name pos:start="29:18" pos:end="29:27">av_mallocz</name><argument_list pos:start="29:28" pos:end="29:47">(<argument pos:start="29:29" pos:end="29:46"><expr pos:start="29:29" pos:end="29:46"><name pos:start="29:29" pos:end="29:42">source_str_len</name> <operator pos:start="29:44" pos:end="29:44">+</operator> <literal type="number" pos:start="29:46" pos:end="29:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:20">(<expr pos:start="31:9" pos:end="31:19"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:19">source_str</name></expr>)</condition> <block pos:start="31:22" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:31">

        <return pos:start="33:9" pos:end="33:31">return <expr pos:start="33:16" pos:end="33:30"><call pos:start="33:16" pos:end="33:30"><name pos:start="33:16" pos:end="33:22">AVERROR</name><argument_list pos:start="33:23" pos:end="33:30">(<argument pos:start="33:24" pos:end="33:29"><expr pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:22"><expr pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:8">temp</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <name pos:start="37:12" pos:end="37:21">source_str</name></expr>;</expr_stmt>

    <for pos:start="39:5" pos:end="53:5">for <control pos:start="39:9" pos:end="39:52">(<init pos:start="39:10" pos:end="39:15"><expr pos:start="39:10" pos:end="39:14"><name pos:start="39:10" pos:end="39:10">i</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</init> <condition pos:start="39:17" pos:end="39:47"><expr pos:start="39:17" pos:end="39:46"><name pos:start="39:17" pos:end="39:17">i</name> <operator pos:start="39:19" pos:end="39:19">&lt;</operator> <name pos:start="39:21" pos:end="39:46"><name pos:start="39:21" pos:end="39:27">gpu_env</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:46">kernel_code_count</name></name></expr>;</condition> <incr pos:start="39:49" pos:end="39:51"><expr pos:start="39:49" pos:end="39:51"><name pos:start="39:49" pos:end="39:49">i</name><operator pos:start="39:50" pos:end="39:51">++</operator></expr></incr>)</control> <block pos:start="39:54" pos:end="53:5">{<block_content pos:start="41:9" pos:end="51:9">

        <if_stmt pos:start="41:9" pos:end="51:9"><if pos:start="41:9" pos:end="51:9">if <condition pos:start="41:12" pos:end="41:49">(<expr pos:start="41:13" pos:end="41:48"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:36"><name pos:start="41:14" pos:end="41:20">gpu_env</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:33">kernel_code</name><index pos:start="41:34" pos:end="41:36">[<expr pos:start="41:35" pos:end="41:35"><name pos:start="41:35" pos:end="41:35">i</name></expr>]</index></name><operator pos:start="41:37" pos:end="41:37">.</operator><name pos:start="41:38" pos:end="41:48">is_compiled</name></expr>)</condition> <block pos:start="41:51" pos:end="51:9">{<block_content pos:start="43:13" pos:end="49:66">

            <expr_stmt pos:start="43:13" pos:end="45:71"><expr pos:start="43:13" pos:end="45:70"><call pos:start="43:13" pos:end="45:70"><name pos:start="43:13" pos:end="43:18">memcpy</name><argument_list pos:start="43:19" pos:end="45:70">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">temp</name></expr></argument>, <argument pos:start="43:26" pos:end="43:62"><expr pos:start="43:26" pos:end="43:62"><name pos:start="43:26" pos:end="43:48"><name pos:start="43:26" pos:end="43:32">gpu_env</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:45">kernel_code</name><index pos:start="43:46" pos:end="43:48">[<expr pos:start="43:47" pos:end="43:47"><name pos:start="43:47" pos:end="43:47">i</name></expr>]</index></name><operator pos:start="43:49" pos:end="43:49">.</operator><name pos:start="43:50" pos:end="43:62">kernel_string</name></expr></argument>,

                        <argument pos:start="45:25" pos:end="45:69"><expr pos:start="45:25" pos:end="45:69"><call pos:start="45:25" pos:end="45:69"><name pos:start="45:25" pos:end="45:30">strlen</name><argument_list pos:start="45:31" pos:end="45:69">(<argument pos:start="45:32" pos:end="45:68"><expr pos:start="45:32" pos:end="45:68"><name pos:start="45:32" pos:end="45:54"><name pos:start="45:32" pos:end="45:38">gpu_env</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:51">kernel_code</name><index pos:start="45:52" pos:end="45:54">[<expr pos:start="45:53" pos:end="45:53"><name pos:start="45:53" pos:end="45:53">i</name></expr>]</index></name><operator pos:start="45:55" pos:end="45:55">.</operator><name pos:start="45:56" pos:end="45:68">kernel_string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:52"><expr pos:start="47:13" pos:end="47:51"><name pos:start="47:13" pos:end="47:35"><name pos:start="47:13" pos:end="47:19">gpu_env</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:32">kernel_code</name><index pos:start="47:33" pos:end="47:35">[<expr pos:start="47:34" pos:end="47:34"><name pos:start="47:34" pos:end="47:34">i</name></expr>]</index></name><operator pos:start="47:36" pos:end="47:36">.</operator><name pos:start="47:37" pos:end="47:47">is_compiled</name> <operator pos:start="47:49" pos:end="47:49">=</operator> <literal type="number" pos:start="47:51" pos:end="47:51">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:66"><expr pos:start="49:13" pos:end="49:65"><name pos:start="49:13" pos:end="49:16">temp</name> <operator pos:start="49:18" pos:end="49:19">+=</operator> <call pos:start="49:21" pos:end="49:65"><name pos:start="49:21" pos:end="49:26">strlen</name><argument_list pos:start="49:27" pos:end="49:65">(<argument pos:start="49:28" pos:end="49:64"><expr pos:start="49:28" pos:end="49:64"><name pos:start="49:28" pos:end="49:50"><name pos:start="49:28" pos:end="49:34">gpu_env</name><operator pos:start="49:35" pos:end="49:36">-&gt;</operator><name pos:start="49:37" pos:end="49:47">kernel_code</name><index pos:start="49:48" pos:end="49:50">[<expr pos:start="49:49" pos:end="49:49"><name pos:start="49:49" pos:end="49:49">i</name></expr>]</index></name><operator pos:start="49:51" pos:end="49:51">.</operator><name pos:start="49:52" pos:end="49:64">kernel_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="55:5" pos:end="55:53">/* create a CL program using the kernel source */</comment>

    <expr_stmt pos:start="57:5" pos:end="61:93"><expr pos:start="57:5" pos:end="61:92"><name pos:start="57:5" pos:end="57:45"><name pos:start="57:5" pos:end="57:11">gpu_env</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:21">programs</name><index pos:start="57:22" pos:end="57:45">[<expr pos:start="57:23" pos:end="57:44"><name pos:start="57:23" pos:end="57:44"><name pos:start="57:23" pos:end="57:29">gpu_env</name><operator pos:start="57:30" pos:end="57:31">-&gt;</operator><name pos:start="57:32" pos:end="57:44">program_count</name></name></expr>]</index></name> <operator pos:start="57:47" pos:end="57:47">=</operator> <call pos:start="57:49" pos:end="61:92"><name pos:start="57:49" pos:end="57:73">clCreateProgramWithSource</name><argument_list pos:start="57:74" pos:end="61:92">(<argument pos:start="57:75" pos:end="57:90"><expr pos:start="57:75" pos:end="57:90"><name pos:start="57:75" pos:end="57:90"><name pos:start="57:75" pos:end="57:81">gpu_env</name><operator pos:start="57:82" pos:end="57:83">-&gt;</operator><name pos:start="57:84" pos:end="57:90">context</name></name></expr></argument>,

                                                           <argument pos:start="59:60" pos:end="59:60"><expr pos:start="59:60" pos:end="59:60"><literal type="number" pos:start="59:60" pos:end="59:60">1</literal></expr></argument>, <argument pos:start="59:63" pos:end="59:90"><expr pos:start="59:63" pos:end="59:90"><operator pos:start="59:63" pos:end="59:63">(</operator><specifier pos:start="59:64" pos:end="59:68">const</specifier> <name pos:start="59:70" pos:end="59:73">char</name> <operator pos:start="59:75" pos:end="59:75">*</operator><operator pos:start="59:76" pos:end="59:76">*</operator><operator pos:start="59:77" pos:end="59:77">)</operator><operator pos:start="59:78" pos:end="59:78">(</operator><operator pos:start="59:79" pos:end="59:79">&amp;</operator><name pos:start="59:80" pos:end="59:89">source_str</name><operator pos:start="59:90" pos:end="59:90">)</operator></expr></argument>,

                                                                   <argument pos:start="61:68" pos:end="61:82"><expr pos:start="61:68" pos:end="61:82"><operator pos:start="61:68" pos:end="61:68">&amp;</operator><name pos:start="61:69" pos:end="61:82">source_str_len</name></expr></argument>, <argument pos:start="61:85" pos:end="61:91"><expr pos:start="61:85" pos:end="61:91"><operator pos:start="61:85" pos:end="61:85">&amp;</operator><name pos:start="61:86" pos:end="61:91">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="73:5">if<condition pos:start="63:7" pos:end="63:28">(<expr pos:start="63:8" pos:end="63:27"><name pos:start="63:8" pos:end="63:13">status</name> <operator pos:start="63:15" pos:end="63:16">!=</operator> <name pos:start="63:18" pos:end="63:27">CL_SUCCESS</name></expr>)</condition> <block pos:start="63:30" pos:end="73:5">{<block_content pos:start="65:9" pos:end="71:17">

        <expr_stmt pos:start="65:9" pos:end="67:38"><expr pos:start="65:9" pos:end="67:37"><call pos:start="65:9" pos:end="67:37"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="67:37">(<argument pos:start="65:16" pos:end="65:27"><expr pos:start="65:16" pos:end="65:27"><operator pos:start="65:16" pos:end="65:16">&amp;</operator><name pos:start="65:17" pos:end="65:27">openclutils</name></expr></argument>, <argument pos:start="65:30" pos:end="65:41"><expr pos:start="65:30" pos:end="65:41"><name pos:start="65:30" pos:end="65:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:44" pos:end="65:99"><expr pos:start="65:44" pos:end="65:99"><literal type="string" pos:start="65:44" pos:end="65:99">"Could not create OpenCL program with source code: %s\n"</literal></expr></argument>,

               <argument pos:start="67:16" pos:end="67:36"><expr pos:start="67:16" pos:end="67:36"><call pos:start="67:16" pos:end="67:36"><name pos:start="67:16" pos:end="67:28">opencl_errstr</name><argument_list pos:start="67:29" pos:end="67:36">(<argument pos:start="67:30" pos:end="67:35"><expr pos:start="67:30" pos:end="67:35"><name pos:start="67:30" pos:end="67:35">status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:31"><expr pos:start="69:9" pos:end="69:30"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <name pos:start="69:15" pos:end="69:30">AVERROR_EXTERNAL</name></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:17">goto <name pos:start="71:14" pos:end="71:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:51">(<expr pos:start="75:9" pos:end="75:50"><operator pos:start="75:9" pos:end="75:9">!</operator><name pos:start="75:10" pos:end="75:50"><name pos:start="75:10" pos:end="75:16">gpu_env</name><operator pos:start="75:17" pos:end="75:18">-&gt;</operator><name pos:start="75:19" pos:end="75:26">programs</name><index pos:start="75:27" pos:end="75:50">[<expr pos:start="75:28" pos:end="75:49"><name pos:start="75:28" pos:end="75:49"><name pos:start="75:28" pos:end="75:34">gpu_env</name><operator pos:start="75:35" pos:end="75:36">-&gt;</operator><name pos:start="75:37" pos:end="75:49">program_count</name></name></expr>]</index></name></expr>)</condition> <block pos:start="75:53" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:17">

        <expr_stmt pos:start="77:9" pos:end="77:72"><expr pos:start="77:9" pos:end="77:71"><call pos:start="77:9" pos:end="77:71"><name pos:start="77:9" pos:end="77:14">av_log</name><argument_list pos:start="77:15" pos:end="77:71">(<argument pos:start="77:16" pos:end="77:27"><expr pos:start="77:16" pos:end="77:27"><operator pos:start="77:16" pos:end="77:16">&amp;</operator><name pos:start="77:17" pos:end="77:27">openclutils</name></expr></argument>, <argument pos:start="77:30" pos:end="77:41"><expr pos:start="77:30" pos:end="77:41"><name pos:start="77:30" pos:end="77:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="77:44" pos:end="77:70"><expr pos:start="77:44" pos:end="77:70"><literal type="string" pos:start="77:44" pos:end="77:70">"Created program is NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:31"><expr pos:start="79:9" pos:end="79:30"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:30">AVERROR_EXTERNAL</name></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:17">goto <name pos:start="81:14" pos:end="81:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:10"><expr pos:start="85:5" pos:end="85:9"><name pos:start="85:5" pos:end="85:5">i</name> <operator pos:start="85:7" pos:end="85:7">=</operator> <literal type="number" pos:start="85:9" pos:end="85:9">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="89:47"><if pos:start="87:5" pos:end="89:47">if <condition pos:start="87:8" pos:end="87:48">(<expr pos:start="87:9" pos:end="87:47"><name pos:start="87:9" pos:end="87:42"><name pos:start="87:9" pos:end="87:15">gpu_env</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:34">usr_spec_dev_info</name><operator pos:start="87:35" pos:end="87:35">.</operator><name pos:start="87:36" pos:end="87:42">dev_idx</name></name> <operator pos:start="87:44" pos:end="87:45">&gt;=</operator> <literal type="number" pos:start="87:47" pos:end="87:47">0</literal></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:47"><block_content pos:start="89:9" pos:end="89:47">

        <expr_stmt pos:start="89:9" pos:end="89:47"><expr pos:start="89:9" pos:end="89:46"><name pos:start="89:9" pos:end="89:9">i</name> <operator pos:start="89:11" pos:end="89:11">=</operator> <name pos:start="89:13" pos:end="89:46"><name pos:start="89:13" pos:end="89:19">gpu_env</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:38">usr_spec_dev_info</name><operator pos:start="89:39" pos:end="89:39">.</operator><name pos:start="89:40" pos:end="89:46">dev_idx</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="91:5" pos:end="91:70">/* create a cl program executable for all the devices specified */</comment>

    <if_stmt pos:start="93:5" pos:end="103:60"><if pos:start="93:5" pos:end="97:59">if <condition pos:start="93:8" pos:end="93:34">(<expr pos:start="93:9" pos:end="93:33"><operator pos:start="93:9" pos:end="93:9">!</operator><name pos:start="93:10" pos:end="93:33"><name pos:start="93:10" pos:end="93:16">gpu_env</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:33">is_user_created</name></name></expr>)</condition><block type="pseudo" pos:start="95:9" pos:end="97:59"><block_content pos:start="95:9" pos:end="97:59">

        <expr_stmt pos:start="95:9" pos:end="97:59"><expr pos:start="95:9" pos:end="97:58"><name pos:start="95:9" pos:end="95:14">status</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <call pos:start="95:18" pos:end="97:58"><name pos:start="95:18" pos:end="95:31">clBuildProgram</name><argument_list pos:start="95:32" pos:end="97:58">(<argument pos:start="95:33" pos:end="95:73"><expr pos:start="95:33" pos:end="95:73"><name pos:start="95:33" pos:end="95:73"><name pos:start="95:33" pos:end="95:39">gpu_env</name><operator pos:start="95:40" pos:end="95:41">-&gt;</operator><name pos:start="95:42" pos:end="95:49">programs</name><index pos:start="95:50" pos:end="95:73">[<expr pos:start="95:51" pos:end="95:72"><name pos:start="95:51" pos:end="95:72"><name pos:start="95:51" pos:end="95:57">gpu_env</name><operator pos:start="95:58" pos:end="95:59">-&gt;</operator><name pos:start="95:60" pos:end="95:72">program_count</name></name></expr>]</index></name></expr></argument>, <argument pos:start="95:76" pos:end="95:76"><expr pos:start="95:76" pos:end="95:76"><literal type="number" pos:start="95:76" pos:end="95:76">1</literal></expr></argument>, <argument pos:start="95:79" pos:end="95:101"><expr pos:start="95:79" pos:end="95:101"><operator pos:start="95:79" pos:end="95:79">&amp;</operator><name pos:start="95:80" pos:end="95:101"><name pos:start="95:80" pos:end="95:86">gpu_env</name><operator pos:start="95:87" pos:end="95:88">-&gt;</operator><name pos:start="95:89" pos:end="95:98">device_ids</name><index pos:start="95:99" pos:end="95:101">[<expr pos:start="95:100" pos:end="95:100"><name pos:start="95:100" pos:end="95:100">i</name></expr>]</index></name></expr></argument>,

                                <argument pos:start="97:33" pos:end="97:45"><expr pos:start="97:33" pos:end="97:45"><name pos:start="97:33" pos:end="97:45">build_options</name></expr></argument>, <argument pos:start="97:48" pos:end="97:51"><expr pos:start="97:48" pos:end="97:51"><name pos:start="97:48" pos:end="97:51">NULL</name></expr></argument>, <argument pos:start="97:54" pos:end="97:57"><expr pos:start="97:54" pos:end="97:57"><name pos:start="97:54" pos:end="97:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="99:5" pos:end="103:60">else<block type="pseudo" pos:start="101:9" pos:end="103:60"><block_content pos:start="101:9" pos:end="103:60">

        <expr_stmt pos:start="101:9" pos:end="103:60"><expr pos:start="101:9" pos:end="103:59"><name pos:start="101:9" pos:end="101:14">status</name> <operator pos:start="101:16" pos:end="101:16">=</operator> <call pos:start="101:18" pos:end="103:59"><name pos:start="101:18" pos:end="101:31">clBuildProgram</name><argument_list pos:start="101:32" pos:end="103:59">(<argument pos:start="101:33" pos:end="101:73"><expr pos:start="101:33" pos:end="101:73"><name pos:start="101:33" pos:end="101:73"><name pos:start="101:33" pos:end="101:39">gpu_env</name><operator pos:start="101:40" pos:end="101:41">-&gt;</operator><name pos:start="101:42" pos:end="101:49">programs</name><index pos:start="101:50" pos:end="101:73">[<expr pos:start="101:51" pos:end="101:72"><name pos:start="101:51" pos:end="101:72"><name pos:start="101:51" pos:end="101:57">gpu_env</name><operator pos:start="101:58" pos:end="101:59">-&gt;</operator><name pos:start="101:60" pos:end="101:72">program_count</name></name></expr>]</index></name></expr></argument>, <argument pos:start="101:76" pos:end="101:76"><expr pos:start="101:76" pos:end="101:76"><literal type="number" pos:start="101:76" pos:end="101:76">1</literal></expr></argument>, <argument pos:start="101:79" pos:end="101:99"><expr pos:start="101:79" pos:end="101:99"><operator pos:start="101:79" pos:end="101:79">&amp;</operator><operator pos:start="101:80" pos:end="101:80">(</operator><name pos:start="101:81" pos:end="101:98"><name pos:start="101:81" pos:end="101:87">gpu_env</name><operator pos:start="101:88" pos:end="101:89">-&gt;</operator><name pos:start="101:90" pos:end="101:98">device_id</name></name><operator pos:start="101:99" pos:end="101:99">)</operator></expr></argument>,

                                 <argument pos:start="103:34" pos:end="103:46"><expr pos:start="103:34" pos:end="103:46"><name pos:start="103:34" pos:end="103:46">build_options</name></expr></argument>, <argument pos:start="103:49" pos:end="103:52"><expr pos:start="103:49" pos:end="103:52"><name pos:start="103:49" pos:end="103:52">NULL</name></expr></argument>, <argument pos:start="103:55" pos:end="103:58"><expr pos:start="103:55" pos:end="103:58"><name pos:start="103:55" pos:end="103:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="107:5" pos:end="115:5"><if pos:start="107:5" pos:end="115:5">if <condition pos:start="107:8" pos:end="107:29">(<expr pos:start="107:9" pos:end="107:28"><name pos:start="107:9" pos:end="107:14">status</name> <operator pos:start="107:16" pos:end="107:17">!=</operator> <name pos:start="107:19" pos:end="107:28">CL_SUCCESS</name></expr>)</condition> <block pos:start="107:31" pos:end="115:5">{<block_content pos:start="109:9" pos:end="113:17">

        <expr_stmt pos:start="109:9" pos:end="109:107"><expr pos:start="109:9" pos:end="109:106"><call pos:start="109:9" pos:end="109:106"><name pos:start="109:9" pos:end="109:14">av_log</name><argument_list pos:start="109:15" pos:end="109:106">(<argument pos:start="109:16" pos:end="109:27"><expr pos:start="109:16" pos:end="109:27"><operator pos:start="109:16" pos:end="109:16">&amp;</operator><name pos:start="109:17" pos:end="109:27">openclutils</name></expr></argument>, <argument pos:start="109:30" pos:end="109:41"><expr pos:start="109:30" pos:end="109:41"><name pos:start="109:30" pos:end="109:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:44" pos:end="109:82"><expr pos:start="109:44" pos:end="109:82"><literal type="string" pos:start="109:44" pos:end="109:82">"Could not compile OpenCL kernel: %s\n"</literal></expr></argument>, <argument pos:start="109:85" pos:end="109:105"><expr pos:start="109:85" pos:end="109:105"><call pos:start="109:85" pos:end="109:105"><name pos:start="109:85" pos:end="109:97">opencl_errstr</name><argument_list pos:start="109:98" pos:end="109:105">(<argument pos:start="109:99" pos:end="109:104"><expr pos:start="109:99" pos:end="109:104"><name pos:start="109:99" pos:end="109:104">status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:31"><expr pos:start="111:9" pos:end="111:30"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <name pos:start="111:15" pos:end="111:30">AVERROR_EXTERNAL</name></expr>;</expr_stmt>

        <goto pos:start="113:9" pos:end="113:17">goto <name pos:start="113:14" pos:end="113:16">end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:29"><expr pos:start="117:5" pos:end="117:28"><name pos:start="117:5" pos:end="117:26"><name pos:start="117:5" pos:end="117:11">gpu_env</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:26">program_count</name></name><operator pos:start="117:27" pos:end="117:28">++</operator></expr>;</expr_stmt>

<label pos:start="119:1" pos:end="119:4"><name pos:start="119:1" pos:end="119:3">end</name>:</label>

    <expr_stmt pos:start="121:5" pos:end="121:24"><expr pos:start="121:5" pos:end="121:23"><call pos:start="121:5" pos:end="121:23"><name pos:start="121:5" pos:end="121:11">av_free</name><argument_list pos:start="121:12" pos:end="121:23">(<argument pos:start="121:13" pos:end="121:22"><expr pos:start="121:13" pos:end="121:22"><name pos:start="121:13" pos:end="121:22">source_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="123:5" pos:end="123:15">return <expr pos:start="123:12" pos:end="123:14"><name pos:start="123:12" pos:end="123:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
