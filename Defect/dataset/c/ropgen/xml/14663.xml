<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14663.c" pos:tabs="8"><function pos:start="1:1" pos:end="66:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">spapr_machine_reset</name><parameter_list pos:start="1:32" pos:end="1:37">(<parameter pos:start="1:33" pos:end="1:36"><decl pos:start="1:33" pos:end="1:36"><type pos:start="1:33" pos:end="1:36"><name pos:start="1:33" pos:end="1:36">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="66:1">{<block_content pos:start="3:5" pos:end="65:30">
    <decl_stmt pos:start="3:5" pos:end="3:56"><decl pos:start="3:5" pos:end="3:55"><type pos:start="3:5" pos:end="3:18"><name pos:start="3:5" pos:end="3:16">MachineState</name> <modifier pos:start="3:18" pos:end="3:18">*</modifier></type><name pos:start="3:19" pos:end="3:25">machine</name> <init pos:start="3:27" pos:end="3:55">= <expr pos:start="3:29" pos:end="3:55"><call pos:start="3:29" pos:end="3:55"><name pos:start="3:29" pos:end="3:35">MACHINE</name><argument_list pos:start="3:36" pos:end="3:55">(<argument pos:start="3:37" pos:end="3:54"><expr pos:start="3:37" pos:end="3:54"><call pos:start="3:37" pos:end="3:54"><name pos:start="3:37" pos:end="3:52">qdev_get_machine</name><argument_list pos:start="3:53" pos:end="3:54">()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:54"><decl pos:start="4:5" pos:end="4:53"><type pos:start="4:5" pos:end="4:23"><name pos:start="4:5" pos:end="4:21">sPAPRMachineState</name> <modifier pos:start="4:23" pos:end="4:23">*</modifier></type><name pos:start="4:24" pos:end="4:28">spapr</name> <init pos:start="4:30" pos:end="4:53">= <expr pos:start="4:32" pos:end="4:53"><call pos:start="4:32" pos:end="4:53"><name pos:start="4:32" pos:end="4:44">SPAPR_MACHINE</name><argument_list pos:start="4:45" pos:end="4:53">(<argument pos:start="4:46" pos:end="4:52"><expr pos:start="4:46" pos:end="4:52"><name pos:start="4:46" pos:end="4:52">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">PowerPCCPU</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:29">first_ppc_cpu</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:24"><decl pos:start="6:5" pos:end="6:23"><type pos:start="6:5" pos:end="6:12"><name pos:start="6:5" pos:end="6:12">uint32_t</name></type> <name pos:start="6:14" pos:end="6:23">rtas_limit</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">hwaddr</name></type> <name pos:start="7:12" pos:end="7:20">rtas_addr</name></decl>, <decl pos:start="7:23" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:10"/><name pos:start="7:23" pos:end="7:30">fdt_addr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:14"><decl pos:start="8:5" pos:end="8:13"><type pos:start="8:5" pos:end="8:10"><name pos:start="8:5" pos:end="8:8">void</name> <modifier pos:start="8:10" pos:end="8:10">*</modifier></type><name pos:start="8:11" pos:end="8:13">fdt</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rc</name></decl>;</decl_stmt>
    <comment type="block" pos:start="10:5" pos:end="10:42">/* Check for unknown sysbus devices */</comment>
    <expr_stmt pos:start="11:5" pos:end="11:68"><expr pos:start="11:5" pos:end="11:67"><call pos:start="11:5" pos:end="11:67"><name pos:start="11:5" pos:end="11:33">foreach_dynamic_sysbus_device</name><argument_list pos:start="11:34" pos:end="11:67">(<argument pos:start="11:35" pos:end="11:60"><expr pos:start="11:35" pos:end="11:60"><name pos:start="11:35" pos:end="11:60">find_unknown_sysbus_device</name></expr></argument>, <argument pos:start="11:63" pos:end="11:66"><expr pos:start="11:63" pos:end="11:66"><name pos:start="11:63" pos:end="11:66">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:43"><expr pos:start="12:5" pos:end="12:42"><name pos:start="12:5" pos:end="12:17">first_ppc_cpu</name> <operator pos:start="12:19" pos:end="12:19">=</operator> <call pos:start="12:21" pos:end="12:42"><name pos:start="12:21" pos:end="12:31">POWERPC_CPU</name><argument_list pos:start="12:32" pos:end="12:42">(<argument pos:start="12:33" pos:end="12:41"><expr pos:start="12:33" pos:end="12:41"><name pos:start="12:33" pos:end="12:41">first_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="13:5" pos:end="22:5"><if pos:start="13:5" pos:end="20:5">if <condition pos:start="13:8" pos:end="15:48">(<expr pos:start="13:9" pos:end="15:47"><call pos:start="13:9" pos:end="13:21"><name pos:start="13:9" pos:end="13:19">kvm_enabled</name><argument_list pos:start="13:20" pos:end="13:21">()</argument_list></call> <operator pos:start="13:23" pos:end="13:24">&amp;&amp;</operator> <call pos:start="13:26" pos:end="13:51"><name pos:start="13:26" pos:end="13:49">kvmppc_has_cap_mmu_radix</name><argument_list pos:start="13:50" pos:end="13:51">()</argument_list></call> <operator pos:start="13:53" pos:end="13:54">&amp;&amp;</operator>
        <call pos:start="14:9" pos:end="15:47"><name pos:start="14:9" pos:end="14:24">ppc_check_compat</name><argument_list pos:start="14:25" pos:end="15:47">(<argument pos:start="14:26" pos:end="14:38"><expr pos:start="14:26" pos:end="14:38"><name pos:start="14:26" pos:end="14:38">first_ppc_cpu</name></expr></argument>, <argument pos:start="14:41" pos:end="14:64"><expr pos:start="14:41" pos:end="14:64"><name pos:start="14:41" pos:end="14:64">CPU_POWERPC_LOGICAL_3_00</name></expr></argument>, <argument pos:start="14:67" pos:end="14:67"><expr pos:start="14:67" pos:end="14:67"><literal type="number" pos:start="14:67" pos:end="14:67">0</literal></expr></argument>,
                         <argument pos:start="15:26" pos:end="15:46"><expr pos:start="15:26" pos:end="15:46"><name pos:start="15:26" pos:end="15:46"><name pos:start="15:26" pos:end="15:30">spapr</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:46">max_compat_pvr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:50" pos:end="20:5">{<block_content pos:start="19:9" pos:end="19:38">
        <comment type="block" pos:start="16:9" pos:end="18:69">/* If using KVM with radix mode available, VCPUs can be started
         * without a HPT because KVM will start them in radix mode.
         * Set the GR bit in PATB so that we know there is no HPT. */</comment>
        <expr_stmt pos:start="19:9" pos:end="19:38"><expr pos:start="19:9" pos:end="19:37"><name pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:13">spapr</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:25">patb_entry</name></name> <operator pos:start="19:27" pos:end="19:27">=</operator> <name pos:start="19:29" pos:end="19:37">PATBE1_GR</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="20:7" pos:end="22:5">else <block pos:start="20:12" pos:end="22:5">{<block_content pos:start="21:9" pos:end="21:40">
        <expr_stmt pos:start="21:9" pos:end="21:40"><expr pos:start="21:9" pos:end="21:39"><call pos:start="21:9" pos:end="21:39"><name pos:start="21:9" pos:end="21:32">spapr_setup_hpt_and_vrma</name><argument_list pos:start="21:33" pos:end="21:39">(<argument pos:start="21:34" pos:end="21:38"><expr pos:start="21:34" pos:end="21:38"><name pos:start="21:34" pos:end="21:38">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:25"><expr pos:start="23:5" pos:end="23:24"><call pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:22">qemu_devices_reset</name><argument_list pos:start="23:23" pos:end="23:24">()</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="24:5" pos:end="28:7">/* DRC reset may cause a device to be unplugged. This will cause troubles
     * if this device is used by another device (eg, a running vhost backend
     * will crash QEMU if the DIMM holding the vring goes away). To avoid such
     * situations, we reset DRCs after all devices have been reset.
     */</comment>
    <expr_stmt pos:start="29:5" pos:end="29:78"><expr pos:start="29:5" pos:end="29:77"><call pos:start="29:5" pos:end="29:77"><name pos:start="29:5" pos:end="29:34">object_child_foreach_recursive</name><argument_list pos:start="29:35" pos:end="29:77">(<argument pos:start="29:36" pos:end="29:52"><expr pos:start="29:36" pos:end="29:52"><call pos:start="29:36" pos:end="29:52"><name pos:start="29:36" pos:end="29:50">object_get_root</name><argument_list pos:start="29:51" pos:end="29:52">()</argument_list></call></expr></argument>, <argument pos:start="29:55" pos:end="29:70"><expr pos:start="29:55" pos:end="29:70"><name pos:start="29:55" pos:end="29:70">spapr_reset_drcs</name></expr></argument>, <argument pos:start="29:73" pos:end="29:76"><expr pos:start="29:73" pos:end="29:76"><name pos:start="29:73" pos:end="29:76">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:38"><expr pos:start="30:5" pos:end="30:37"><call pos:start="30:5" pos:end="30:37"><name pos:start="30:5" pos:end="30:30">spapr_clear_pending_events</name><argument_list pos:start="30:31" pos:end="30:37">(<argument pos:start="30:32" pos:end="30:36"><expr pos:start="30:32" pos:end="30:36"><name pos:start="30:32" pos:end="30:36">spapr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="31:5" pos:end="35:7">/*
     * We place the device tree and RTAS just below either the top of the RMA,
     * or just below 2GB, whichever is lowere, so that it can be
     * processed with 32-bit real mode code if necessary
     */</comment>
    <expr_stmt pos:start="36:5" pos:end="36:53"><expr pos:start="36:5" pos:end="36:52"><name pos:start="36:5" pos:end="36:14">rtas_limit</name> <operator pos:start="36:16" pos:end="36:16">=</operator> <call pos:start="36:18" pos:end="36:52"><name pos:start="36:18" pos:end="36:20">MIN</name><argument_list pos:start="36:21" pos:end="36:52">(<argument pos:start="36:22" pos:end="36:36"><expr pos:start="36:22" pos:end="36:36"><name pos:start="36:22" pos:end="36:36"><name pos:start="36:22" pos:end="36:26">spapr</name><operator pos:start="36:27" pos:end="36:28">-&gt;</operator><name pos:start="36:29" pos:end="36:36">rma_size</name></name></expr></argument>, <argument pos:start="36:39" pos:end="36:51"><expr pos:start="36:39" pos:end="36:51"><name pos:start="36:39" pos:end="36:51">RTAS_MAX_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="37:5" pos:end="37:43"><expr pos:start="37:5" pos:end="37:42"><name pos:start="37:5" pos:end="37:13">rtas_addr</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <name pos:start="37:17" pos:end="37:26">rtas_limit</name> <operator pos:start="37:28" pos:end="37:28">-</operator> <name pos:start="37:30" pos:end="37:42">RTAS_MAX_SIZE</name></expr>;</expr_stmt>
    <expr_stmt pos:start="38:5" pos:end="38:40"><expr pos:start="38:5" pos:end="38:39"><name pos:start="38:5" pos:end="38:12">fdt_addr</name> <operator pos:start="38:14" pos:end="38:14">=</operator> <name pos:start="38:16" pos:end="38:24">rtas_addr</name> <operator pos:start="38:26" pos:end="38:26">-</operator> <name pos:start="38:28" pos:end="38:39">FDT_MAX_SIZE</name></expr>;</expr_stmt>
    <comment type="block" pos:start="39:5" pos:end="40:51">/* if this reset wasn't generated by CAS, we should reset our
     * negotiated options and start from scratch */</comment>
    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:27">(<expr pos:start="41:9" pos:end="41:26"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:26"><name pos:start="41:10" pos:end="41:14">spapr</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:26">cas_reboot</name></name></expr>)</condition> <block pos:start="41:29" pos:end="45:5">{<block_content pos:start="42:9" pos:end="44:75">
        <expr_stmt pos:start="42:9" pos:end="42:43"><expr pos:start="42:9" pos:end="42:42"><call pos:start="42:9" pos:end="42:42"><name pos:start="42:9" pos:end="42:26">spapr_ovec_cleanup</name><argument_list pos:start="42:27" pos:end="42:42">(<argument pos:start="42:28" pos:end="42:41"><expr pos:start="42:28" pos:end="42:41"><name pos:start="42:28" pos:end="42:41"><name pos:start="42:28" pos:end="42:32">spapr</name><operator pos:start="42:33" pos:end="42:34">-&gt;</operator><name pos:start="42:35" pos:end="42:41">ov5_cas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="43:9" pos:end="43:42"><expr pos:start="43:9" pos:end="43:41"><name pos:start="43:9" pos:end="43:22"><name pos:start="43:9" pos:end="43:13">spapr</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:22">ov5_cas</name></name> <operator pos:start="43:24" pos:end="43:24">=</operator> <call pos:start="43:26" pos:end="43:41"><name pos:start="43:26" pos:end="43:39">spapr_ovec_new</name><argument_list pos:start="43:40" pos:end="43:41">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="44:9" pos:end="44:75"><expr pos:start="44:9" pos:end="44:74"><call pos:start="44:9" pos:end="44:74"><name pos:start="44:9" pos:end="44:22">ppc_set_compat</name><argument_list pos:start="44:23" pos:end="44:74">(<argument pos:start="44:24" pos:end="44:36"><expr pos:start="44:24" pos:end="44:36"><name pos:start="44:24" pos:end="44:36">first_ppc_cpu</name></expr></argument>, <argument pos:start="44:39" pos:end="44:59"><expr pos:start="44:39" pos:end="44:59"><name pos:start="44:39" pos:end="44:59"><name pos:start="44:39" pos:end="44:43">spapr</name><operator pos:start="44:44" pos:end="44:45">-&gt;</operator><name pos:start="44:46" pos:end="44:59">max_compat_pvr</name></name></expr></argument>, <argument pos:start="44:62" pos:end="44:73"><expr pos:start="44:62" pos:end="44:73"><operator pos:start="44:62" pos:end="44:62">&amp;</operator><name pos:start="44:63" pos:end="44:73">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="46:5" pos:end="46:62"><expr pos:start="46:5" pos:end="46:61"><name pos:start="46:5" pos:end="46:7">fdt</name> <operator pos:start="46:9" pos:end="46:9">=</operator> <call pos:start="46:11" pos:end="46:61"><name pos:start="46:11" pos:end="46:25">spapr_build_fdt</name><argument_list pos:start="46:26" pos:end="46:61">(<argument pos:start="46:27" pos:end="46:31"><expr pos:start="46:27" pos:end="46:31"><name pos:start="46:27" pos:end="46:31">spapr</name></expr></argument>, <argument pos:start="46:34" pos:end="46:42"><expr pos:start="46:34" pos:end="46:42"><name pos:start="46:34" pos:end="46:42">rtas_addr</name></expr></argument>, <argument pos:start="46:45" pos:end="46:60"><expr pos:start="46:45" pos:end="46:60"><name pos:start="46:45" pos:end="46:60"><name pos:start="46:45" pos:end="46:49">spapr</name><operator pos:start="46:50" pos:end="46:51">-&gt;</operator><name pos:start="46:52" pos:end="46:60">rtas_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="47:5" pos:end="47:43"><expr pos:start="47:5" pos:end="47:42"><call pos:start="47:5" pos:end="47:42"><name pos:start="47:5" pos:end="47:19">spapr_load_rtas</name><argument_list pos:start="47:20" pos:end="47:42">(<argument pos:start="47:21" pos:end="47:25"><expr pos:start="47:21" pos:end="47:25"><name pos:start="47:21" pos:end="47:25">spapr</name></expr></argument>, <argument pos:start="47:28" pos:end="47:30"><expr pos:start="47:28" pos:end="47:30"><name pos:start="47:28" pos:end="47:30">fdt</name></expr></argument>, <argument pos:start="47:33" pos:end="47:41"><expr pos:start="47:33" pos:end="47:41"><name pos:start="47:33" pos:end="47:41">rtas_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="48:5" pos:end="48:23"><expr pos:start="48:5" pos:end="48:22"><name pos:start="48:5" pos:end="48:6">rc</name> <operator pos:start="48:8" pos:end="48:8">=</operator> <call pos:start="48:10" pos:end="48:22"><name pos:start="48:10" pos:end="48:17">fdt_pack</name><argument_list pos:start="48:18" pos:end="48:22">(<argument pos:start="48:19" pos:end="48:21"><expr pos:start="48:19" pos:end="48:21"><name pos:start="48:19" pos:end="48:21">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="49:5" pos:end="49:58">/* Should only fail if we've built a corrupted tree */</comment>
    <expr_stmt pos:start="50:5" pos:end="50:20"><expr pos:start="50:5" pos:end="50:19"><call pos:start="50:5" pos:end="50:19"><name pos:start="50:5" pos:end="50:10">assert</name><argument_list pos:start="50:11" pos:end="50:19">(<argument pos:start="50:12" pos:end="50:18"><expr pos:start="50:12" pos:end="50:18"><name pos:start="50:12" pos:end="50:13">rc</name> <operator pos:start="50:15" pos:end="50:16">==</operator> <literal type="number" pos:start="50:18" pos:end="50:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:42">(<expr pos:start="51:9" pos:end="51:41"><call pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:21">fdt_totalsize</name><argument_list pos:start="51:22" pos:end="51:26">(<argument pos:start="51:23" pos:end="51:25"><expr pos:start="51:23" pos:end="51:25"><name pos:start="51:23" pos:end="51:25">fdt</name></expr></argument>)</argument_list></call> <operator pos:start="51:28" pos:end="51:28">&gt;</operator> <name pos:start="51:30" pos:end="51:41">FDT_MAX_SIZE</name></expr>)</condition> <block pos:start="51:44" pos:end="55:5">{<block_content pos:start="52:9" pos:end="54:16">
        <expr_stmt pos:start="52:9" pos:end="53:55"><expr pos:start="52:9" pos:end="53:54"><call pos:start="52:9" pos:end="53:54"><name pos:start="52:9" pos:end="52:20">error_report</name><argument_list pos:start="52:21" pos:end="53:54">(<argument pos:start="52:22" pos:end="52:61"><expr pos:start="52:22" pos:end="52:61"><literal type="string" pos:start="52:22" pos:end="52:61">"FDT too big ! 0x%x bytes (max is 0x%x)"</literal></expr></argument>,
                     <argument pos:start="53:22" pos:end="53:39"><expr pos:start="53:22" pos:end="53:39"><call pos:start="53:22" pos:end="53:39"><name pos:start="53:22" pos:end="53:34">fdt_totalsize</name><argument_list pos:start="53:35" pos:end="53:39">(<argument pos:start="53:36" pos:end="53:38"><expr pos:start="53:36" pos:end="53:38"><name pos:start="53:36" pos:end="53:38">fdt</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:42" pos:end="53:53"><expr pos:start="53:42" pos:end="53:53"><name pos:start="53:42" pos:end="53:53">FDT_MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="54:9" pos:end="54:16"><expr pos:start="54:9" pos:end="54:15"><call pos:start="54:9" pos:end="54:15"><name pos:start="54:9" pos:end="54:12">exit</name><argument_list pos:start="54:13" pos:end="54:15">(<argument pos:start="54:14" pos:end="54:14"><expr pos:start="54:14" pos:end="54:14"><literal type="number" pos:start="54:14" pos:end="54:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="56:5" pos:end="56:22">/* Load the fdt */</comment>
    <expr_stmt pos:start="57:5" pos:end="57:46"><expr pos:start="57:5" pos:end="57:45"><call pos:start="57:5" pos:end="57:45"><name pos:start="57:5" pos:end="57:20">qemu_fdt_dumpdtb</name><argument_list pos:start="57:21" pos:end="57:45">(<argument pos:start="57:22" pos:end="57:24"><expr pos:start="57:22" pos:end="57:24"><name pos:start="57:22" pos:end="57:24">fdt</name></expr></argument>, <argument pos:start="57:27" pos:end="57:44"><expr pos:start="57:27" pos:end="57:44"><call pos:start="57:27" pos:end="57:44"><name pos:start="57:27" pos:end="57:39">fdt_totalsize</name><argument_list pos:start="57:40" pos:end="57:44">(<argument pos:start="57:41" pos:end="57:43"><expr pos:start="57:41" pos:end="57:43"><name pos:start="57:41" pos:end="57:43">fdt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="58:5" pos:end="58:65"><expr pos:start="58:5" pos:end="58:64"><call pos:start="58:5" pos:end="58:64"><name pos:start="58:5" pos:end="58:29">cpu_physical_memory_write</name><argument_list pos:start="58:30" pos:end="58:64">(<argument pos:start="58:31" pos:end="58:38"><expr pos:start="58:31" pos:end="58:38"><name pos:start="58:31" pos:end="58:38">fdt_addr</name></expr></argument>, <argument pos:start="58:41" pos:end="58:43"><expr pos:start="58:41" pos:end="58:43"><name pos:start="58:41" pos:end="58:43">fdt</name></expr></argument>, <argument pos:start="58:46" pos:end="58:63"><expr pos:start="58:46" pos:end="58:63"><call pos:start="58:46" pos:end="58:63"><name pos:start="58:46" pos:end="58:58">fdt_totalsize</name><argument_list pos:start="58:59" pos:end="58:63">(<argument pos:start="58:60" pos:end="58:62"><expr pos:start="58:60" pos:end="58:62"><name pos:start="58:60" pos:end="58:62">fdt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="59:5" pos:end="59:16"><expr pos:start="59:5" pos:end="59:15"><call pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:10">g_free</name><argument_list pos:start="59:11" pos:end="59:15">(<argument pos:start="59:12" pos:end="59:14"><expr pos:start="59:12" pos:end="59:14"><name pos:start="59:12" pos:end="59:14">fdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="60:5" pos:end="60:32">/* Set up the entry state */</comment>
    <expr_stmt pos:start="61:5" pos:end="61:41"><expr pos:start="61:5" pos:end="61:40"><name pos:start="61:5" pos:end="61:29"><name pos:start="61:5" pos:end="61:17">first_ppc_cpu</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:22">env</name><operator pos:start="61:23" pos:end="61:23">.</operator><name pos:start="61:24" pos:end="61:26">gpr</name><index pos:start="61:27" pos:end="61:29">[<expr pos:start="61:28" pos:end="61:28"><literal type="number" pos:start="61:28" pos:end="61:28">3</literal></expr>]</index></name> <operator pos:start="61:31" pos:end="61:31">=</operator> <name pos:start="61:33" pos:end="61:40">fdt_addr</name></expr>;</expr_stmt>
    <expr_stmt pos:start="62:5" pos:end="62:34"><expr pos:start="62:5" pos:end="62:33"><name pos:start="62:5" pos:end="62:29"><name pos:start="62:5" pos:end="62:17">first_ppc_cpu</name><operator pos:start="62:18" pos:end="62:19">-&gt;</operator><name pos:start="62:20" pos:end="62:22">env</name><operator pos:start="62:23" pos:end="62:23">.</operator><name pos:start="62:24" pos:end="62:26">gpr</name><index pos:start="62:27" pos:end="62:29">[<expr pos:start="62:28" pos:end="62:28"><literal type="number" pos:start="62:28" pos:end="62:28">5</literal></expr>]</index></name> <operator pos:start="62:31" pos:end="62:31">=</operator> <literal type="number" pos:start="62:33" pos:end="62:33">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="63:5" pos:end="63:26"><expr pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:21"><name pos:start="63:5" pos:end="63:13">first_cpu</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:21">halted</name></name> <operator pos:start="63:23" pos:end="63:23">=</operator> <literal type="number" pos:start="63:25" pos:end="63:25">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="64:5" pos:end="64:47"><expr pos:start="64:5" pos:end="64:46"><name pos:start="64:5" pos:end="64:26"><name pos:start="64:5" pos:end="64:17">first_ppc_cpu</name><operator pos:start="64:18" pos:end="64:19">-&gt;</operator><name pos:start="64:20" pos:end="64:22">env</name><operator pos:start="64:23" pos:end="64:23">.</operator><name pos:start="64:24" pos:end="64:26">nip</name></name> <operator pos:start="64:28" pos:end="64:28">=</operator> <name pos:start="64:30" pos:end="64:46">SPAPR_ENTRY_POINT</name></expr>;</expr_stmt>
    <expr_stmt pos:start="65:5" pos:end="65:30"><expr pos:start="65:5" pos:end="65:29"><name pos:start="65:5" pos:end="65:21"><name pos:start="65:5" pos:end="65:9">spapr</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:21">cas_reboot</name></name> <operator pos:start="65:23" pos:end="65:23">=</operator> <name pos:start="65:25" pos:end="65:29">false</name></expr>;</expr_stmt>
</block_content>}</block></function></unit>
