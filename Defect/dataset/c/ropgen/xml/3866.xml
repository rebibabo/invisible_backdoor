<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3866.c" pos:tabs="8"><function pos:start="1:1" pos:end="282:16"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:26">gem_receive</name><parameter_list pos:start="1:27" pos:end="1:79">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:41">NetClientState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:45">nc</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:65"><decl pos:start="1:48" pos:end="1:65"><type pos:start="1:48" pos:end="1:65"><specifier pos:start="1:48" pos:end="1:52">const</specifier> <name pos:start="1:54" pos:end="1:60">uint8_t</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">buf</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:78"><decl pos:start="1:68" pos:end="1:78"><type pos:start="1:68" pos:end="1:78"><name pos:start="1:68" pos:end="1:73">size_t</name></type> <name pos:start="1:75" pos:end="1:78">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="282:16">{<block_content pos:start="5:5" pos:end="282:16">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">CadenceGEMState</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">unsigned</name></type>   <name pos:start="7:16" pos:end="7:24">rxbufsize</name></decl>, <decl pos:start="7:27" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:27" pos:end="7:39">bytes_to_copy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type>   <name pos:start="9:16" pos:end="9:27">rxbuf_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">uint8_t</name></type>    <name pos:start="11:16" pos:end="11:26"><name pos:start="11:16" pos:end="11:20">rxbuf</name><index pos:start="11:21" pos:end="11:26">[<expr pos:start="11:22" pos:end="11:25"><literal type="number" pos:start="11:22" pos:end="11:25">2048</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:11">uint8_t</name>   <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:24">rxbuf_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:19">first_desc</name> <init pos:start="15:21" pos:end="15:26">= <expr pos:start="15:23" pos:end="15:26"><name pos:start="15:23" pos:end="15:26">true</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">maf</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:32"><expr pos:start="21:5" pos:end="21:31"><name pos:start="21:5" pos:end="21:5">s</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <call pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:27">qemu_get_nic_opaque</name><argument_list pos:start="21:28" pos:end="21:31">(<argument pos:start="21:29" pos:end="21:30"><expr pos:start="21:29" pos:end="21:30"><name pos:start="21:29" pos:end="21:30">nc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:52">/* Is this destination MAC address "for us" ? */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:41"><expr pos:start="27:5" pos:end="27:40"><name pos:start="27:5" pos:end="27:7">maf</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:40"><name pos:start="27:11" pos:end="27:32">gem_mac_address_filter</name><argument_list pos:start="27:33" pos:end="27:40">(<argument pos:start="27:34" pos:end="27:34"><expr pos:start="27:34" pos:end="27:34"><name pos:start="27:34" pos:end="27:34">s</name></expr></argument>, <argument pos:start="27:37" pos:end="27:39"><expr pos:start="27:37" pos:end="27:39"><name pos:start="27:37" pos:end="27:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="282:16"><if pos:start="29:5" pos:end="282:16">if <condition pos:start="29:8" pos:end="29:29">(<expr pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:11">maf</name> <operator pos:start="29:13" pos:end="29:14">==</operator> <name pos:start="29:16" pos:end="29:28">GEM_RX_REJECT</name></expr>)</condition> <block pos:start="29:31" pos:end="282:16">{<block_content pos:start="31:9" pos:end="282:16">

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>




    <comment type="block" pos:start="36:5" pos:end="36:61">/* Discard packets with receive length error enabled ? */</comment>

    <if_stmt pos:start="38:5" pos:end="282:16"><if pos:start="38:5" pos:end="282:16">if <condition pos:start="38:8" pos:end="38:49">(<expr pos:start="38:9" pos:end="38:48"><name pos:start="38:9" pos:end="38:26"><name pos:start="38:9" pos:end="38:9">s</name><operator pos:start="38:10" pos:end="38:11">-&gt;</operator><name pos:start="38:12" pos:end="38:15">regs</name><index pos:start="38:16" pos:end="38:26">[<expr pos:start="38:17" pos:end="38:25"><name pos:start="38:17" pos:end="38:25">GEM_NWCFG</name></expr>]</index></name> <operator pos:start="38:28" pos:end="38:28">&amp;</operator> <name pos:start="38:30" pos:end="38:48">GEM_NWCFG_LERR_DISC</name></expr>)</condition> <block pos:start="38:51" pos:end="282:16">{<block_content pos:start="40:9" pos:end="282:16">

        <decl_stmt pos:start="40:9" pos:end="40:26"><decl pos:start="40:9" pos:end="40:25"><type pos:start="40:9" pos:end="40:16"><name pos:start="40:9" pos:end="40:16">unsigned</name></type> <name pos:start="40:18" pos:end="40:25">type_len</name></decl>;</decl_stmt>



        <comment type="block" pos:start="44:9" pos:end="44:68">/* Fish the ethertype / length field out of the RX packet */</comment>

        <expr_stmt pos:start="46:9" pos:end="46:42"><expr pos:start="46:9" pos:end="46:41"><name pos:start="46:9" pos:end="46:16">type_len</name> <operator pos:start="46:18" pos:end="46:18">=</operator> <name pos:start="46:20" pos:end="46:26"><name pos:start="46:20" pos:end="46:22">buf</name><index pos:start="46:23" pos:end="46:26">[<expr pos:start="46:24" pos:end="46:25"><literal type="number" pos:start="46:24" pos:end="46:25">12</literal></expr>]</index></name> <operator pos:start="46:28" pos:end="46:29">&lt;&lt;</operator> <literal type="number" pos:start="46:31" pos:end="46:31">8</literal> <operator pos:start="46:33" pos:end="46:33">|</operator> <name pos:start="46:35" pos:end="46:41"><name pos:start="46:35" pos:end="46:37">buf</name><index pos:start="46:38" pos:end="46:41">[<expr pos:start="46:39" pos:end="46:40"><literal type="number" pos:start="46:39" pos:end="46:40">13</literal></expr>]</index></name></expr>;</expr_stmt>

        <comment type="block" pos:start="48:9" pos:end="48:52">/* It is a length field, not an ethertype */</comment>

        <if_stmt pos:start="50:9" pos:end="282:16"><if pos:start="50:9" pos:end="282:16">if <condition pos:start="50:12" pos:end="50:29">(<expr pos:start="50:13" pos:end="50:28"><name pos:start="50:13" pos:end="50:20">type_len</name> <operator pos:start="50:22" pos:end="50:22">&lt;</operator> <literal type="number" pos:start="50:24" pos:end="50:28">0x600</literal></expr>)</condition> <block pos:start="50:31" pos:end="282:16">{<block_content pos:start="52:13" pos:end="282:16">

            <if_stmt pos:start="52:13" pos:end="282:16"><if pos:start="52:13" pos:end="282:16">if <condition pos:start="52:16" pos:end="52:32">(<expr pos:start="52:17" pos:end="52:31"><name pos:start="52:17" pos:end="52:20">size</name> <operator pos:start="52:22" pos:end="52:22">&lt;</operator> <name pos:start="52:24" pos:end="52:31">type_len</name></expr>)</condition> <block pos:start="52:34" pos:end="282:16">{<block_content pos:start="56:17" pos:end="282:16">

                <comment type="block" pos:start="54:17" pos:end="54:29">/* discard */</comment>

                <return pos:start="56:17" pos:end="56:26">return <expr pos:start="56:24" pos:end="56:25"><operator pos:start="56:24" pos:end="56:24">-</operator><literal type="number" pos:start="56:25" pos:end="56:25">1</literal></expr>;</return>






    <comment type="block" pos:start="63:5" pos:end="67:7">/*

     * Determine configured receive buffer offset (probably 0)

     */</comment>

    <expr_stmt pos:start="69:5" pos:end="71:41"><expr pos:start="69:5" pos:end="71:40"><name pos:start="69:5" pos:end="69:16">rxbuf_offset</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <operator pos:start="69:20" pos:end="69:20">(</operator><name pos:start="69:21" pos:end="69:38"><name pos:start="69:21" pos:end="69:21">s</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:27">regs</name><index pos:start="69:28" pos:end="69:38">[<expr pos:start="69:29" pos:end="69:37"><name pos:start="69:29" pos:end="69:37">GEM_NWCFG</name></expr>]</index></name> <operator pos:start="69:40" pos:end="69:40">&amp;</operator> <name pos:start="69:42" pos:end="69:62">GEM_NWCFG_BUFF_OFST_M</name><operator pos:start="69:63" pos:end="69:63">)</operator> <operator pos:start="69:65" pos:end="69:66">&gt;&gt;</operator>

                   <name pos:start="71:20" pos:end="71:40">GEM_NWCFG_BUFF_OFST_S</name></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="79:7">/* The configure size of each receive buffer.  Determines how many

     * buffers needed to hold this packet.

     */</comment>

    <expr_stmt pos:start="81:5" pos:end="83:62"><expr pos:start="81:5" pos:end="83:61"><name pos:start="81:5" pos:end="81:13">rxbufsize</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <operator pos:start="81:17" pos:end="81:17">(</operator><operator pos:start="81:18" pos:end="81:18">(</operator><name pos:start="81:19" pos:end="81:37"><name pos:start="81:19" pos:end="81:19">s</name><operator pos:start="81:20" pos:end="81:21">-&gt;</operator><name pos:start="81:22" pos:end="81:25">regs</name><index pos:start="81:26" pos:end="81:37">[<expr pos:start="81:27" pos:end="81:36"><name pos:start="81:27" pos:end="81:36">GEM_DMACFG</name></expr>]</index></name> <operator pos:start="81:39" pos:end="81:39">&amp;</operator> <name pos:start="81:41" pos:end="81:59">GEM_DMACFG_RBUFSZ_M</name><operator pos:start="81:60" pos:end="81:60">)</operator> <operator pos:start="81:62" pos:end="81:63">&gt;&gt;</operator>

                 <name pos:start="83:18" pos:end="83:36">GEM_DMACFG_RBUFSZ_S</name><operator pos:start="83:37" pos:end="83:37">)</operator> <operator pos:start="83:39" pos:end="83:39">*</operator> <name pos:start="83:41" pos:end="83:61">GEM_DMACFG_RBUFSZ_MUL</name></expr>;</expr_stmt>




    <comment type="block" pos:start="88:5" pos:end="94:7">/* Pad to minimum length. Assume FCS field is stripped, logic

     * below will increment it to the real minimum of 64 when

     * not FCS stripping

     */</comment>

    <if_stmt pos:start="96:5" pos:end="282:16"><if pos:start="96:5" pos:end="282:16">if <condition pos:start="96:8" pos:end="96:18">(<expr pos:start="96:9" pos:end="96:17"><name pos:start="96:9" pos:end="96:12">size</name> <operator pos:start="96:14" pos:end="96:14">&lt;</operator> <literal type="number" pos:start="96:16" pos:end="96:17">60</literal></expr>)</condition> <block pos:start="96:20" pos:end="282:16">{<block_content pos:start="98:9" pos:end="282:16">

        <expr_stmt pos:start="98:9" pos:end="98:18"><expr pos:start="98:9" pos:end="98:17"><name pos:start="98:9" pos:end="98:12">size</name> <operator pos:start="98:14" pos:end="98:14">=</operator> <literal type="number" pos:start="98:16" pos:end="98:17">60</literal></expr>;</expr_stmt>




    <comment type="block" pos:start="103:5" pos:end="103:44">/* Strip of FCS field ? (usually yes) */</comment>

    <if_stmt pos:start="105:5" pos:end="282:16"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:49">(<expr pos:start="105:9" pos:end="105:48"><name pos:start="105:9" pos:end="105:26"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:15">regs</name><index pos:start="105:16" pos:end="105:26">[<expr pos:start="105:17" pos:end="105:25"><name pos:start="105:17" pos:end="105:25">GEM_NWCFG</name></expr>]</index></name> <operator pos:start="105:28" pos:end="105:28">&amp;</operator> <name pos:start="105:30" pos:end="105:48">GEM_NWCFG_STRIP_FCS</name></expr>)</condition> <block pos:start="105:51" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:32">

        <expr_stmt pos:start="107:9" pos:end="107:32"><expr pos:start="107:9" pos:end="107:31"><name pos:start="107:9" pos:end="107:17">rxbuf_ptr</name> <operator pos:start="107:19" pos:end="107:19">=</operator> <operator pos:start="107:21" pos:end="107:21">(</operator><name pos:start="107:22" pos:end="107:25">void</name> <operator pos:start="107:27" pos:end="107:27">*</operator><operator pos:start="107:28" pos:end="107:28">)</operator><name pos:start="107:29" pos:end="107:31">buf</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="109:7" pos:end="282:16">else <block pos:start="109:12" pos:end="282:16">{<block_content pos:start="111:9" pos:end="282:16">

        <decl_stmt pos:start="111:9" pos:end="111:25"><decl pos:start="111:9" pos:end="111:24"><type pos:start="111:9" pos:end="111:16"><name pos:start="111:9" pos:end="111:16">unsigned</name></type> <name pos:start="111:18" pos:end="111:24">crc_val</name></decl>;</decl_stmt>







        <comment type="block" pos:start="119:9" pos:end="123:11">/* The application wants the FCS field, which QEMU does not provide.

         * We must try and calculate one.

         */</comment>



        <expr_stmt pos:start="127:9" pos:end="127:33"><expr pos:start="127:9" pos:end="127:32"><call pos:start="127:9" pos:end="127:32"><name pos:start="127:9" pos:end="127:14">memcpy</name><argument_list pos:start="127:15" pos:end="127:32">(<argument pos:start="127:16" pos:end="127:20"><expr pos:start="127:16" pos:end="127:20"><name pos:start="127:16" pos:end="127:20">rxbuf</name></expr></argument>, <argument pos:start="127:23" pos:end="127:25"><expr pos:start="127:23" pos:end="127:25"><name pos:start="127:23" pos:end="127:25">buf</name></expr></argument>, <argument pos:start="127:28" pos:end="127:31"><expr pos:start="127:28" pos:end="127:31"><name pos:start="127:28" pos:end="127:31">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:54"><expr pos:start="129:9" pos:end="129:53"><call pos:start="129:9" pos:end="129:53"><name pos:start="129:9" pos:end="129:14">memset</name><argument_list pos:start="129:15" pos:end="129:53">(<argument pos:start="129:16" pos:end="129:27"><expr pos:start="129:16" pos:end="129:27"><name pos:start="129:16" pos:end="129:20">rxbuf</name> <operator pos:start="129:22" pos:end="129:22">+</operator> <name pos:start="129:24" pos:end="129:27">size</name></expr></argument>, <argument pos:start="129:30" pos:end="129:30"><expr pos:start="129:30" pos:end="129:30"><literal type="number" pos:start="129:30" pos:end="129:30">0</literal></expr></argument>, <argument pos:start="129:33" pos:end="129:52"><expr pos:start="129:33" pos:end="129:52"><sizeof pos:start="129:33" pos:end="129:45">sizeof<argument_list pos:start="129:39" pos:end="129:45">(<argument pos:start="129:40" pos:end="129:44"><expr pos:start="129:40" pos:end="129:44"><name pos:start="129:40" pos:end="129:44">rxbuf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="129:47" pos:end="129:47">-</operator> <name pos:start="129:49" pos:end="129:52">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:26"><expr pos:start="131:9" pos:end="131:25"><name pos:start="131:9" pos:end="131:17">rxbuf_ptr</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <name pos:start="131:21" pos:end="131:25">rxbuf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:62"><expr pos:start="133:9" pos:end="133:61"><name pos:start="133:9" pos:end="133:15">crc_val</name> <operator pos:start="133:17" pos:end="133:17">=</operator> <call pos:start="133:19" pos:end="133:61"><name pos:start="133:19" pos:end="133:29">cpu_to_le32</name><argument_list pos:start="133:30" pos:end="133:61">(<argument pos:start="133:31" pos:end="133:60"><expr pos:start="133:31" pos:end="133:60"><call pos:start="133:31" pos:end="133:60"><name pos:start="133:31" pos:end="133:35">crc32</name><argument_list pos:start="133:36" pos:end="133:60">(<argument pos:start="133:37" pos:end="133:37"><expr pos:start="133:37" pos:end="133:37"><literal type="number" pos:start="133:37" pos:end="133:37">0</literal></expr></argument>, <argument pos:start="133:40" pos:end="133:44"><expr pos:start="133:40" pos:end="133:44"><name pos:start="133:40" pos:end="133:44">rxbuf</name></expr></argument>, <argument pos:start="133:47" pos:end="133:59"><expr pos:start="133:47" pos:end="133:59"><call pos:start="133:47" pos:end="133:59"><name pos:start="133:47" pos:end="133:49">MAX</name><argument_list pos:start="133:50" pos:end="133:59">(<argument pos:start="133:51" pos:end="133:54"><expr pos:start="133:51" pos:end="133:54"><name pos:start="133:51" pos:end="133:54">size</name></expr></argument>, <argument pos:start="133:57" pos:end="133:58"><expr pos:start="133:57" pos:end="133:58"><literal type="number" pos:start="133:57" pos:end="133:58">60</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:56"><expr pos:start="135:9" pos:end="135:55"><call pos:start="135:9" pos:end="135:55"><name pos:start="135:9" pos:end="135:14">memcpy</name><argument_list pos:start="135:15" pos:end="135:55">(<argument pos:start="135:16" pos:end="135:27"><expr pos:start="135:16" pos:end="135:27"><name pos:start="135:16" pos:end="135:20">rxbuf</name> <operator pos:start="135:22" pos:end="135:22">+</operator> <name pos:start="135:24" pos:end="135:27">size</name></expr></argument>, <argument pos:start="135:30" pos:end="135:37"><expr pos:start="135:30" pos:end="135:37"><operator pos:start="135:30" pos:end="135:30">&amp;</operator><name pos:start="135:31" pos:end="135:37">crc_val</name></expr></argument>, <argument pos:start="135:40" pos:end="135:54"><expr pos:start="135:40" pos:end="135:54"><sizeof pos:start="135:40" pos:end="135:54">sizeof<argument_list pos:start="135:46" pos:end="135:54">(<argument pos:start="135:47" pos:end="135:53"><expr pos:start="135:47" pos:end="135:53"><name pos:start="135:47" pos:end="135:53">crc_val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="139:9" pos:end="139:27"><expr pos:start="139:9" pos:end="139:26"><name pos:start="139:9" pos:end="139:21">bytes_to_copy</name> <operator pos:start="139:23" pos:end="139:24">+=</operator> <literal type="number" pos:start="139:26" pos:end="139:26">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:18"><expr pos:start="141:9" pos:end="141:17"><name pos:start="141:9" pos:end="141:12">size</name> <operator pos:start="141:14" pos:end="141:15">+=</operator> <literal type="number" pos:start="141:17" pos:end="141:17">4</literal></expr>;</expr_stmt>




    <expr_stmt pos:start="146:5" pos:end="146:71"><expr pos:start="146:5" pos:end="146:70"><call pos:start="146:5" pos:end="146:70"><name pos:start="146:5" pos:end="146:12">DB_PRINT</name><argument_list pos:start="146:13" pos:end="146:70">(<argument pos:start="146:14" pos:end="146:52"><expr pos:start="146:14" pos:end="146:52"><literal type="string" pos:start="146:14" pos:end="146:52">"config bufsize: %d packet size: %ld\n"</literal></expr></argument>, <argument pos:start="146:55" pos:end="146:63"><expr pos:start="146:55" pos:end="146:63"><name pos:start="146:55" pos:end="146:63">rxbufsize</name></expr></argument>, <argument pos:start="146:66" pos:end="146:69"><expr pos:start="146:66" pos:end="146:69"><name pos:start="146:66" pos:end="146:69">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="150:5" pos:end="282:16">while <condition pos:start="150:11" pos:end="150:25">(<expr pos:start="150:12" pos:end="150:24"><name pos:start="150:12" pos:end="150:24">bytes_to_copy</name></expr>)</condition> <block pos:start="150:27" pos:end="282:16">{<block_content pos:start="154:9" pos:end="282:16">

        <comment type="block" pos:start="152:9" pos:end="152:51">/* Do nothing if receive is not enabled. */</comment>

        <if_stmt pos:start="154:9" pos:end="282:16"><if pos:start="154:9" pos:end="282:16">if <condition pos:start="154:12" pos:end="154:33">(<expr pos:start="154:13" pos:end="154:32"><operator pos:start="154:13" pos:end="154:13">!</operator><call pos:start="154:14" pos:end="154:32"><name pos:start="154:14" pos:end="154:28">gem_can_receive</name><argument_list pos:start="154:29" pos:end="154:32">(<argument pos:start="154:30" pos:end="154:31"><expr pos:start="154:30" pos:end="154:31"><name pos:start="154:30" pos:end="154:31">nc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="154:35" pos:end="282:16">{<block_content pos:start="156:13" pos:end="282:16">

            <expr_stmt pos:start="156:13" pos:end="156:32"><expr pos:start="156:13" pos:end="156:31"><call pos:start="156:13" pos:end="156:31"><name pos:start="156:13" pos:end="156:18">assert</name><argument_list pos:start="156:19" pos:end="156:31">(<argument pos:start="156:20" pos:end="156:30"><expr pos:start="156:20" pos:end="156:30"><operator pos:start="156:20" pos:end="156:20">!</operator><name pos:start="156:21" pos:end="156:30">first_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="158:13" pos:end="158:22">return <expr pos:start="158:20" pos:end="158:21"><operator pos:start="158:20" pos:end="158:20">-</operator><literal type="number" pos:start="158:21" pos:end="158:21">1</literal></expr>;</return>




        <expr_stmt pos:start="163:9" pos:end="165:48"><expr pos:start="163:9" pos:end="165:47"><call pos:start="163:9" pos:end="165:47"><name pos:start="163:9" pos:end="163:16">DB_PRINT</name><argument_list pos:start="163:17" pos:end="165:47">(<argument pos:start="163:18" pos:end="163:42"><expr pos:start="163:18" pos:end="163:42"><literal type="string" pos:start="163:18" pos:end="163:42">"copy %d bytes to 0x%x\n"</literal></expr></argument>, <argument pos:start="163:45" pos:end="163:73"><expr pos:start="163:45" pos:end="163:73"><call pos:start="163:45" pos:end="163:73"><name pos:start="163:45" pos:end="163:47">MIN</name><argument_list pos:start="163:48" pos:end="163:73">(<argument pos:start="163:49" pos:end="163:61"><expr pos:start="163:49" pos:end="163:61"><name pos:start="163:49" pos:end="163:61">bytes_to_copy</name></expr></argument>, <argument pos:start="163:64" pos:end="163:72"><expr pos:start="163:64" pos:end="163:72"><name pos:start="163:64" pos:end="163:72">rxbufsize</name></expr></argument>)</argument_list></call></expr></argument>,

                <argument pos:start="165:17" pos:end="165:46"><expr pos:start="165:17" pos:end="165:46"><call pos:start="165:17" pos:end="165:46"><name pos:start="165:17" pos:end="165:34">rx_desc_get_buffer</name><argument_list pos:start="165:35" pos:end="165:46">(<argument pos:start="165:36" pos:end="165:45"><expr pos:start="165:36" pos:end="165:45"><name pos:start="165:36" pos:end="165:45"><name pos:start="165:36" pos:end="165:36">s</name><operator pos:start="165:37" pos:end="165:38">-&gt;</operator><name pos:start="165:39" pos:end="165:45">rx_desc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="169:9" pos:end="169:53">/* Copy packet data to emulated DMA buffer */</comment>

        <expr_stmt pos:start="171:9" pos:end="173:76"><expr pos:start="171:9" pos:end="173:75"><call pos:start="171:9" pos:end="173:75"><name pos:start="171:9" pos:end="171:33">cpu_physical_memory_write</name><argument_list pos:start="171:34" pos:end="173:75">(<argument pos:start="171:35" pos:end="171:79"><expr pos:start="171:35" pos:end="171:79"><call pos:start="171:35" pos:end="171:64"><name pos:start="171:35" pos:end="171:52">rx_desc_get_buffer</name><argument_list pos:start="171:53" pos:end="171:64">(<argument pos:start="171:54" pos:end="171:63"><expr pos:start="171:54" pos:end="171:63"><name pos:start="171:54" pos:end="171:63"><name pos:start="171:54" pos:end="171:54">s</name><operator pos:start="171:55" pos:end="171:56">-&gt;</operator><name pos:start="171:57" pos:end="171:63">rx_desc</name></name></expr></argument>)</argument_list></call> <operator pos:start="171:66" pos:end="171:66">+</operator> <name pos:start="171:68" pos:end="171:79">rxbuf_offset</name></expr></argument>,

                                  <argument pos:start="173:35" pos:end="173:43"><expr pos:start="173:35" pos:end="173:43"><name pos:start="173:35" pos:end="173:43">rxbuf_ptr</name></expr></argument>, <argument pos:start="173:46" pos:end="173:74"><expr pos:start="173:46" pos:end="173:74"><call pos:start="173:46" pos:end="173:74"><name pos:start="173:46" pos:end="173:48">MIN</name><argument_list pos:start="173:49" pos:end="173:74">(<argument pos:start="173:50" pos:end="173:62"><expr pos:start="173:50" pos:end="173:62"><name pos:start="173:50" pos:end="173:62">bytes_to_copy</name></expr></argument>, <argument pos:start="173:65" pos:end="173:73"><expr pos:start="173:65" pos:end="173:73"><name pos:start="173:65" pos:end="173:73">rxbufsize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:51"><expr pos:start="175:9" pos:end="175:50"><name pos:start="175:9" pos:end="175:17">rxbuf_ptr</name> <operator pos:start="175:19" pos:end="175:20">+=</operator> <call pos:start="175:22" pos:end="175:50"><name pos:start="175:22" pos:end="175:24">MIN</name><argument_list pos:start="175:25" pos:end="175:50">(<argument pos:start="175:26" pos:end="175:38"><expr pos:start="175:26" pos:end="175:38"><name pos:start="175:26" pos:end="175:38">bytes_to_copy</name></expr></argument>, <argument pos:start="175:41" pos:end="175:49"><expr pos:start="175:41" pos:end="175:49"><name pos:start="175:41" pos:end="175:49">rxbufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:55"><expr pos:start="177:9" pos:end="177:54"><name pos:start="177:9" pos:end="177:21">bytes_to_copy</name> <operator pos:start="177:23" pos:end="177:24">-=</operator> <call pos:start="177:26" pos:end="177:54"><name pos:start="177:26" pos:end="177:28">MIN</name><argument_list pos:start="177:29" pos:end="177:54">(<argument pos:start="177:30" pos:end="177:42"><expr pos:start="177:30" pos:end="177:42"><name pos:start="177:30" pos:end="177:42">bytes_to_copy</name></expr></argument>, <argument pos:start="177:45" pos:end="177:53"><expr pos:start="177:45" pos:end="177:53"><name pos:start="177:45" pos:end="177:53">rxbufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="181:9" pos:end="181:37">/* Update the descriptor.  */</comment>

        <if_stmt pos:start="183:9" pos:end="282:16"><if pos:start="183:9" pos:end="282:16">if <condition pos:start="183:12" pos:end="183:23">(<expr pos:start="183:13" pos:end="183:22"><name pos:start="183:13" pos:end="183:22">first_desc</name></expr>)</condition> <block pos:start="183:25" pos:end="282:16">{<block_content pos:start="185:13" pos:end="282:16">

            <expr_stmt pos:start="185:13" pos:end="185:40"><expr pos:start="185:13" pos:end="185:39"><call pos:start="185:13" pos:end="185:39"><name pos:start="185:13" pos:end="185:27">rx_desc_set_sof</name><argument_list pos:start="185:28" pos:end="185:39">(<argument pos:start="185:29" pos:end="185:38"><expr pos:start="185:29" pos:end="185:38"><name pos:start="185:29" pos:end="185:38"><name pos:start="185:29" pos:end="185:29">s</name><operator pos:start="185:30" pos:end="185:31">-&gt;</operator><name pos:start="185:32" pos:end="185:38">rx_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:31"><expr pos:start="187:13" pos:end="187:30"><name pos:start="187:13" pos:end="187:22">first_desc</name> <operator pos:start="187:24" pos:end="187:24">=</operator> <name pos:start="187:26" pos:end="187:30">false</name></expr>;</expr_stmt>


        <if_stmt pos:start="190:9" pos:end="282:16"><if pos:start="190:9" pos:end="282:16">if <condition pos:start="190:12" pos:end="190:31">(<expr pos:start="190:13" pos:end="190:30"><name pos:start="190:13" pos:end="190:25">bytes_to_copy</name> <operator pos:start="190:27" pos:end="190:28">==</operator> <literal type="number" pos:start="190:30" pos:end="190:30">0</literal></expr>)</condition> <block pos:start="190:33" pos:end="282:16">{<block_content pos:start="192:13" pos:end="282:16">

            <expr_stmt pos:start="192:13" pos:end="192:40"><expr pos:start="192:13" pos:end="192:39"><call pos:start="192:13" pos:end="192:39"><name pos:start="192:13" pos:end="192:27">rx_desc_set_eof</name><argument_list pos:start="192:28" pos:end="192:39">(<argument pos:start="192:29" pos:end="192:38"><expr pos:start="192:29" pos:end="192:38"><name pos:start="192:29" pos:end="192:38"><name pos:start="192:29" pos:end="192:29">s</name><operator pos:start="192:30" pos:end="192:31">-&gt;</operator><name pos:start="192:32" pos:end="192:38">rx_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="194:13" pos:end="194:49"><expr pos:start="194:13" pos:end="194:48"><call pos:start="194:13" pos:end="194:48"><name pos:start="194:13" pos:end="194:30">rx_desc_set_length</name><argument_list pos:start="194:31" pos:end="194:48">(<argument pos:start="194:32" pos:end="194:41"><expr pos:start="194:32" pos:end="194:41"><name pos:start="194:32" pos:end="194:41"><name pos:start="194:32" pos:end="194:32">s</name><operator pos:start="194:33" pos:end="194:34">-&gt;</operator><name pos:start="194:35" pos:end="194:41">rx_desc</name></name></expr></argument>, <argument pos:start="194:44" pos:end="194:47"><expr pos:start="194:44" pos:end="194:47"><name pos:start="194:44" pos:end="194:47">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <expr_stmt pos:start="197:9" pos:end="197:42"><expr pos:start="197:9" pos:end="197:41"><call pos:start="197:9" pos:end="197:41"><name pos:start="197:9" pos:end="197:29">rx_desc_set_ownership</name><argument_list pos:start="197:30" pos:end="197:41">(<argument pos:start="197:31" pos:end="197:40"><expr pos:start="197:31" pos:end="197:40"><name pos:start="197:31" pos:end="197:40"><name pos:start="197:31" pos:end="197:31">s</name><operator pos:start="197:32" pos:end="197:33">-&gt;</operator><name pos:start="197:34" pos:end="197:40">rx_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="201:9" pos:end="282:16">switch <condition pos:start="201:16" pos:end="201:20">(<expr pos:start="201:17" pos:end="201:19"><name pos:start="201:17" pos:end="201:19">maf</name></expr>)</condition> <block pos:start="201:22" pos:end="282:16">{<block_content pos:start="203:9" pos:end="282:16">

        <case pos:start="203:9" pos:end="203:39">case <expr pos:start="203:14" pos:end="203:38"><name pos:start="203:14" pos:end="203:38">GEM_RX_PROMISCUOUS_ACCEPT</name></expr>:</case>

            <break pos:start="205:13" pos:end="205:18">break;</break>

        <case pos:start="207:9" pos:end="207:37">case <expr pos:start="207:14" pos:end="207:36"><name pos:start="207:14" pos:end="207:36">GEM_RX_BROADCAST_ACCEPT</name></expr>:</case>

            <expr_stmt pos:start="209:13" pos:end="209:46"><expr pos:start="209:13" pos:end="209:45"><call pos:start="209:13" pos:end="209:45"><name pos:start="209:13" pos:end="209:33">rx_desc_set_broadcast</name><argument_list pos:start="209:34" pos:end="209:45">(<argument pos:start="209:35" pos:end="209:44"><expr pos:start="209:35" pos:end="209:44"><name pos:start="209:35" pos:end="209:44"><name pos:start="209:35" pos:end="209:35">s</name><operator pos:start="209:36" pos:end="209:37">-&gt;</operator><name pos:start="209:38" pos:end="209:44">rx_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="211:13" pos:end="211:18">break;</break>

        <case pos:start="213:9" pos:end="213:40">case <expr pos:start="213:14" pos:end="213:39"><name pos:start="213:14" pos:end="213:39">GEM_RX_UNICAST_HASH_ACCEPT</name></expr>:</case>

            <expr_stmt pos:start="215:13" pos:end="215:49"><expr pos:start="215:13" pos:end="215:48"><call pos:start="215:13" pos:end="215:48"><name pos:start="215:13" pos:end="215:36">rx_desc_set_unicast_hash</name><argument_list pos:start="215:37" pos:end="215:48">(<argument pos:start="215:38" pos:end="215:47"><expr pos:start="215:38" pos:end="215:47"><name pos:start="215:38" pos:end="215:47"><name pos:start="215:38" pos:end="215:38">s</name><operator pos:start="215:39" pos:end="215:40">-&gt;</operator><name pos:start="215:41" pos:end="215:47">rx_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="217:13" pos:end="217:18">break;</break>

        <case pos:start="219:9" pos:end="219:42">case <expr pos:start="219:14" pos:end="219:41"><name pos:start="219:14" pos:end="219:41">GEM_RX_MULTICAST_HASH_ACCEPT</name></expr>:</case>

            <expr_stmt pos:start="221:13" pos:end="221:51"><expr pos:start="221:13" pos:end="221:50"><call pos:start="221:13" pos:end="221:50"><name pos:start="221:13" pos:end="221:38">rx_desc_set_multicast_hash</name><argument_list pos:start="221:39" pos:end="221:50">(<argument pos:start="221:40" pos:end="221:49"><expr pos:start="221:40" pos:end="221:49"><name pos:start="221:40" pos:end="221:49"><name pos:start="221:40" pos:end="221:40">s</name><operator pos:start="221:41" pos:end="221:42">-&gt;</operator><name pos:start="221:43" pos:end="221:49">rx_desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="223:13" pos:end="223:18">break;</break>

        <case pos:start="225:9" pos:end="225:27">case <expr pos:start="225:14" pos:end="225:26"><name pos:start="225:14" pos:end="225:26">GEM_RX_REJECT</name></expr>:</case>

            <expr_stmt pos:start="227:13" pos:end="227:20"><expr pos:start="227:13" pos:end="227:19"><call pos:start="227:13" pos:end="227:19"><name pos:start="227:13" pos:end="227:17">abort</name><argument_list pos:start="227:18" pos:end="227:19">()</argument_list></call></expr>;</expr_stmt>

        <default pos:start="229:9" pos:end="229:16">default:</default> <comment type="block" pos:start="229:18" pos:end="229:26">/* SAR */</comment>

            <expr_stmt pos:start="231:13" pos:end="231:45"><expr pos:start="231:13" pos:end="231:44"><call pos:start="231:13" pos:end="231:44"><name pos:start="231:13" pos:end="231:27">rx_desc_set_sar</name><argument_list pos:start="231:28" pos:end="231:44">(<argument pos:start="231:29" pos:end="231:38"><expr pos:start="231:29" pos:end="231:38"><name pos:start="231:29" pos:end="231:38"><name pos:start="231:29" pos:end="231:29">s</name><operator pos:start="231:30" pos:end="231:31">-&gt;</operator><name pos:start="231:32" pos:end="231:38">rx_desc</name></name></expr></argument>, <argument pos:start="231:41" pos:end="231:43"><expr pos:start="231:41" pos:end="231:43"><name pos:start="231:41" pos:end="231:43">maf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




        <comment type="block" pos:start="236:9" pos:end="236:37">/* Descriptor write-back.  */</comment>

        <expr_stmt pos:start="238:9" pos:end="240:77"><expr pos:start="238:9" pos:end="240:76"><call pos:start="238:9" pos:end="240:76"><name pos:start="238:9" pos:end="238:33">cpu_physical_memory_write</name><argument_list pos:start="238:34" pos:end="240:76">(<argument pos:start="238:35" pos:end="238:49"><expr pos:start="238:35" pos:end="238:49"><name pos:start="238:35" pos:end="238:49"><name pos:start="238:35" pos:end="238:35">s</name><operator pos:start="238:36" pos:end="238:37">-&gt;</operator><name pos:start="238:38" pos:end="238:49">rx_desc_addr</name></name></expr></argument>,

                                  <argument pos:start="240:35" pos:end="240:55"><expr pos:start="240:35" pos:end="240:55"><operator pos:start="240:35" pos:end="240:35">(</operator><name pos:start="240:36" pos:end="240:42">uint8_t</name> <operator pos:start="240:44" pos:end="240:44">*</operator><operator pos:start="240:45" pos:end="240:45">)</operator><name pos:start="240:46" pos:end="240:55"><name pos:start="240:46" pos:end="240:46">s</name><operator pos:start="240:47" pos:end="240:48">-&gt;</operator><name pos:start="240:49" pos:end="240:55">rx_desc</name></name></expr></argument>, <argument pos:start="240:58" pos:end="240:75"><expr pos:start="240:58" pos:end="240:75"><sizeof pos:start="240:58" pos:end="240:75">sizeof<argument_list pos:start="240:64" pos:end="240:75">(<argument pos:start="240:65" pos:end="240:74"><expr pos:start="240:65" pos:end="240:74"><name pos:start="240:65" pos:end="240:74"><name pos:start="240:65" pos:end="240:65">s</name><operator pos:start="240:66" pos:end="240:67">-&gt;</operator><name pos:start="240:68" pos:end="240:74">rx_desc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="244:9" pos:end="244:29">/* Next descriptor */</comment>

        <if_stmt pos:start="246:9" pos:end="282:16"><if pos:start="246:9" pos:end="252:9">if <condition pos:start="246:12" pos:end="246:41">(<expr pos:start="246:13" pos:end="246:40"><call pos:start="246:13" pos:end="246:40"><name pos:start="246:13" pos:end="246:28">rx_desc_get_wrap</name><argument_list pos:start="246:29" pos:end="246:40">(<argument pos:start="246:30" pos:end="246:39"><expr pos:start="246:30" pos:end="246:39"><name pos:start="246:30" pos:end="246:39"><name pos:start="246:30" pos:end="246:30">s</name><operator pos:start="246:31" pos:end="246:32">-&gt;</operator><name pos:start="246:33" pos:end="246:39">rx_desc</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="246:43" pos:end="252:9">{<block_content pos:start="248:13" pos:end="250:51">

            <expr_stmt pos:start="248:13" pos:end="248:54"><expr pos:start="248:13" pos:end="248:53"><call pos:start="248:13" pos:end="248:53"><name pos:start="248:13" pos:end="248:20">DB_PRINT</name><argument_list pos:start="248:21" pos:end="248:53">(<argument pos:start="248:22" pos:end="248:52"><expr pos:start="248:22" pos:end="248:52"><literal type="string" pos:start="248:22" pos:end="248:52">"wrapping RX descriptor list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="250:13" pos:end="250:51"><expr pos:start="250:13" pos:end="250:50"><name pos:start="250:13" pos:end="250:27"><name pos:start="250:13" pos:end="250:13">s</name><operator pos:start="250:14" pos:end="250:15">-&gt;</operator><name pos:start="250:16" pos:end="250:27">rx_desc_addr</name></name> <operator pos:start="250:29" pos:end="250:29">=</operator> <name pos:start="250:31" pos:end="250:50"><name pos:start="250:31" pos:end="250:31">s</name><operator pos:start="250:32" pos:end="250:33">-&gt;</operator><name pos:start="250:34" pos:end="250:37">regs</name><index pos:start="250:38" pos:end="250:50">[<expr pos:start="250:39" pos:end="250:49"><name pos:start="250:39" pos:end="250:49">GEM_RXQBASE</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="252:11" pos:end="282:16">else <block pos:start="252:16" pos:end="282:16">{<block_content pos:start="254:13" pos:end="282:16">

            <expr_stmt pos:start="254:13" pos:end="254:58"><expr pos:start="254:13" pos:end="254:57"><call pos:start="254:13" pos:end="254:57"><name pos:start="254:13" pos:end="254:20">DB_PRINT</name><argument_list pos:start="254:21" pos:end="254:57">(<argument pos:start="254:22" pos:end="254:56"><expr pos:start="254:22" pos:end="254:56"><literal type="string" pos:start="254:22" pos:end="254:56">"incrementing RX descriptor list\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="256:13" pos:end="256:33"><expr pos:start="256:13" pos:end="256:32"><name pos:start="256:13" pos:end="256:27"><name pos:start="256:13" pos:end="256:13">s</name><operator pos:start="256:14" pos:end="256:15">-&gt;</operator><name pos:start="256:16" pos:end="256:27">rx_desc_addr</name></name> <operator pos:start="256:29" pos:end="256:30">+=</operator> <literal type="number" pos:start="256:32" pos:end="256:32">8</literal></expr>;</expr_stmt>


        <expr_stmt pos:start="259:9" pos:end="259:27"><expr pos:start="259:9" pos:end="259:26"><call pos:start="259:9" pos:end="259:26"><name pos:start="259:9" pos:end="259:23">gem_get_rx_desc</name><argument_list pos:start="259:24" pos:end="259:26">(<argument pos:start="259:25" pos:end="259:25"><expr pos:start="259:25" pos:end="259:25"><name pos:start="259:25" pos:end="259:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <comment type="block" pos:start="264:5" pos:end="264:18">/* Count it */</comment>

    <expr_stmt pos:start="266:5" pos:end="266:42"><expr pos:start="266:5" pos:end="266:41"><call pos:start="266:5" pos:end="266:41"><name pos:start="266:5" pos:end="266:27">gem_receive_updatestats</name><argument_list pos:start="266:28" pos:end="266:41">(<argument pos:start="266:29" pos:end="266:29"><expr pos:start="266:29" pos:end="266:29"><name pos:start="266:29" pos:end="266:29">s</name></expr></argument>, <argument pos:start="266:32" pos:end="266:34"><expr pos:start="266:32" pos:end="266:34"><name pos:start="266:32" pos:end="266:34">buf</name></expr></argument>, <argument pos:start="266:37" pos:end="266:40"><expr pos:start="266:37" pos:end="266:40"><name pos:start="266:37" pos:end="266:40">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="270:5" pos:end="270:50"><expr pos:start="270:5" pos:end="270:49"><name pos:start="270:5" pos:end="270:25"><name pos:start="270:5" pos:end="270:5">s</name><operator pos:start="270:6" pos:end="270:7">-&gt;</operator><name pos:start="270:8" pos:end="270:11">regs</name><index pos:start="270:12" pos:end="270:25">[<expr pos:start="270:13" pos:end="270:24"><name pos:start="270:13" pos:end="270:24">GEM_RXSTATUS</name></expr>]</index></name> <operator pos:start="270:27" pos:end="270:28">|=</operator> <name pos:start="270:30" pos:end="270:49">GEM_RXSTATUS_FRMRCVD</name></expr>;</expr_stmt>

    <expr_stmt pos:start="272:5" pos:end="272:61"><expr pos:start="272:5" pos:end="272:60"><name pos:start="272:5" pos:end="272:20"><name pos:start="272:5" pos:end="272:5">s</name><operator pos:start="272:6" pos:end="272:7">-&gt;</operator><name pos:start="272:8" pos:end="272:11">regs</name><index pos:start="272:12" pos:end="272:20">[<expr pos:start="272:13" pos:end="272:19"><name pos:start="272:13" pos:end="272:19">GEM_ISR</name></expr>]</index></name> <operator pos:start="272:22" pos:end="272:23">|=</operator> <name pos:start="272:25" pos:end="272:38">GEM_INT_RXCMPL</name> <operator pos:start="272:40" pos:end="272:40">&amp;</operator> <operator pos:start="272:42" pos:end="272:42">~</operator><operator pos:start="272:43" pos:end="272:43">(</operator><name pos:start="272:44" pos:end="272:59"><name pos:start="272:44" pos:end="272:44">s</name><operator pos:start="272:45" pos:end="272:46">-&gt;</operator><name pos:start="272:47" pos:end="272:50">regs</name><index pos:start="272:51" pos:end="272:59">[<expr pos:start="272:52" pos:end="272:58"><name pos:start="272:52" pos:end="272:58">GEM_IMR</name></expr>]</index></name><operator pos:start="272:60" pos:end="272:60">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="276:5" pos:end="276:39">/* Handle interrupt consequences */</comment>

    <expr_stmt pos:start="278:5" pos:end="278:29"><expr pos:start="278:5" pos:end="278:28"><call pos:start="278:5" pos:end="278:28"><name pos:start="278:5" pos:end="278:25">gem_update_int_status</name><argument_list pos:start="278:26" pos:end="278:28">(<argument pos:start="278:27" pos:end="278:27"><expr pos:start="278:27" pos:end="278:27"><name pos:start="278:27" pos:end="278:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="282:5" pos:end="282:16">return <expr pos:start="282:12" pos:end="282:15"><name pos:start="282:12" pos:end="282:15">size</name></expr>;</return></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
