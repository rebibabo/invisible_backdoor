<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23910.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">segment_end</name><parameter_list pos:start="1:23" pos:end="1:74">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><name pos:start="1:24" pos:end="1:38">AVFormatContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:60"><decl pos:start="1:44" pos:end="1:60"><type pos:start="1:44" pos:end="1:60"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:60">write_trailer</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:73"><decl pos:start="1:63" pos:end="1:73"><type pos:start="1:63" pos:end="1:73"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:73">is_last</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="119:1">{<block_content pos:start="5:5" pos:end="117:15">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">SegmentContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">seg</name> <init pos:start="5:25" pos:end="5:38">= <expr pos:start="5:27" pos:end="5:38"><name pos:start="5:27" pos:end="5:38"><name pos:start="5:27" pos:end="5:27">s</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:19">AVFormatContext</name> <modifier pos:start="7:21" pos:end="7:21">*</modifier></type><name pos:start="7:22" pos:end="7:23">oc</name> <init pos:start="7:25" pos:end="7:34">= <expr pos:start="7:27" pos:end="7:34"><name pos:start="7:27" pos:end="7:34"><name pos:start="7:27" pos:end="7:29">seg</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:34">avf</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><call pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:18">av_write_frame</name><argument_list pos:start="13:19" pos:end="13:28">(<argument pos:start="13:20" pos:end="13:21"><expr pos:start="13:20" pos:end="13:21"><name pos:start="13:20" pos:end="13:21">oc</name></expr></argument>, <argument pos:start="13:24" pos:end="13:27"><expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="13:31" pos:end="13:76">/* Flush any buffered data (fragmented mp4) */</comment>

    <if_stmt pos:start="15:5" pos:end="17:35"><if pos:start="15:5" pos:end="17:35">if <condition pos:start="15:8" pos:end="15:22">(<expr pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:21">write_trailer</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:35"><block_content pos:start="17:9" pos:end="17:35">

        <expr_stmt pos:start="17:9" pos:end="17:35"><expr pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:11">ret</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <call pos:start="17:15" pos:end="17:34"><name pos:start="17:15" pos:end="17:30">av_write_trailer</name><argument_list pos:start="17:31" pos:end="17:34">(<argument pos:start="17:32" pos:end="17:33"><expr pos:start="17:32" pos:end="17:33"><name pos:start="17:32" pos:end="17:33">oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="25:29"><if pos:start="21:5" pos:end="25:29">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">&lt;</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="25:29"><block_content pos:start="23:9" pos:end="25:29">

        <expr_stmt pos:start="23:9" pos:end="25:29"><expr pos:start="23:9" pos:end="25:28"><call pos:start="23:9" pos:end="25:28"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="25:28">(<argument pos:start="23:16" pos:end="23:16"><expr pos:start="23:16" pos:end="23:16"><name pos:start="23:16" pos:end="23:16">s</name></expr></argument>, <argument pos:start="23:19" pos:end="23:30"><expr pos:start="23:19" pos:end="23:30"><name pos:start="23:19" pos:end="23:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:33" pos:end="23:77"><expr pos:start="23:33" pos:end="23:77"><literal type="string" pos:start="23:33" pos:end="23:77">"Failure occurred when ending segment '%s'\n"</literal></expr></argument>,

               <argument pos:start="25:16" pos:end="25:27"><expr pos:start="25:16" pos:end="25:27"><name pos:start="25:16" pos:end="25:27"><name pos:start="25:16" pos:end="25:17">oc</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:27">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="99:5"><if pos:start="29:5" pos:end="99:5">if <condition pos:start="29:8" pos:end="29:18">(<expr pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:11">seg</name><operator pos:start="29:12" pos:end="29:13">-&gt;</operator><name pos:start="29:14" pos:end="29:17">list</name></name></expr>)</condition> <block pos:start="29:20" pos:end="99:5">{<block_content pos:start="31:9" pos:end="97:33">

        <if_stmt pos:start="31:9" pos:end="95:9"><if pos:start="31:9" pos:end="91:9">if <condition pos:start="31:12" pos:end="31:63">(<expr pos:start="31:13" pos:end="31:62"><name pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:15">seg</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:26">list_size</name></name> <operator pos:start="31:28" pos:end="31:29">||</operator> <name pos:start="31:31" pos:end="31:44"><name pos:start="31:31" pos:end="31:33">seg</name><operator pos:start="31:34" pos:end="31:35">-&gt;</operator><name pos:start="31:36" pos:end="31:44">list_type</name></name> <operator pos:start="31:46" pos:end="31:47">==</operator> <name pos:start="31:49" pos:end="31:62">LIST_TYPE_M3U8</name></expr>)</condition> <block pos:start="31:65" pos:end="91:9">{<block_content pos:start="33:13" pos:end="89:62">

            <decl_stmt pos:start="33:13" pos:end="33:65"><decl pos:start="33:13" pos:end="33:64"><type pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:28">SegmentListEntry</name> <modifier pos:start="33:30" pos:end="33:30">*</modifier></type><name pos:start="33:31" pos:end="33:35">entry</name> <init pos:start="33:37" pos:end="33:64">= <expr pos:start="33:39" pos:end="33:64"><call pos:start="33:39" pos:end="33:64"><name pos:start="33:39" pos:end="33:48">av_mallocz</name><argument_list pos:start="33:49" pos:end="33:64">(<argument pos:start="33:50" pos:end="33:63"><expr pos:start="33:50" pos:end="33:63"><sizeof pos:start="33:50" pos:end="33:63">sizeof<argument_list pos:start="33:56" pos:end="33:63">(<argument pos:start="33:57" pos:end="33:62"><expr pos:start="33:57" pos:end="33:62"><operator pos:start="33:57" pos:end="33:57">*</operator><name pos:start="33:58" pos:end="33:62">entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="35:13" pos:end="41:13"><if pos:start="35:13" pos:end="41:13">if <condition pos:start="35:16" pos:end="35:23">(<expr pos:start="35:17" pos:end="35:22"><operator pos:start="35:17" pos:end="35:17">!</operator><name pos:start="35:18" pos:end="35:22">entry</name></expr>)</condition> <block pos:start="35:25" pos:end="41:13">{<block_content pos:start="37:17" pos:end="39:25">

                <expr_stmt pos:start="37:17" pos:end="37:38"><expr pos:start="37:17" pos:end="37:37"><name pos:start="37:17" pos:end="37:19">ret</name> <operator pos:start="37:21" pos:end="37:21">=</operator> <call pos:start="37:23" pos:end="37:37"><name pos:start="37:23" pos:end="37:29">AVERROR</name><argument_list pos:start="37:30" pos:end="37:37">(<argument pos:start="37:31" pos:end="37:36"><expr pos:start="37:31" pos:end="37:36"><name pos:start="37:31" pos:end="37:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="39:17" pos:end="39:25">goto <name pos:start="39:22" pos:end="39:24">end</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="45:13" pos:end="45:36">/* append new element */</comment>

            <expr_stmt pos:start="47:13" pos:end="47:59"><expr pos:start="47:13" pos:end="47:58"><call pos:start="47:13" pos:end="47:58"><name pos:start="47:13" pos:end="47:18">memcpy</name><argument_list pos:start="47:19" pos:end="47:58">(<argument pos:start="47:20" pos:end="47:24"><expr pos:start="47:20" pos:end="47:24"><name pos:start="47:20" pos:end="47:24">entry</name></expr></argument>, <argument pos:start="47:27" pos:end="47:41"><expr pos:start="47:27" pos:end="47:41"><operator pos:start="47:27" pos:end="47:27">&amp;</operator><name pos:start="47:28" pos:end="47:41"><name pos:start="47:28" pos:end="47:30">seg</name><operator pos:start="47:31" pos:end="47:32">-&gt;</operator><name pos:start="47:33" pos:end="47:41">cur_entry</name></name></expr></argument>, <argument pos:start="47:44" pos:end="47:57"><expr pos:start="47:44" pos:end="47:57"><sizeof pos:start="47:44" pos:end="47:57">sizeof<argument_list pos:start="47:50" pos:end="47:57">(<argument pos:start="47:51" pos:end="47:56"><expr pos:start="47:51" pos:end="47:56"><operator pos:start="47:51" pos:end="47:51">*</operator><name pos:start="47:52" pos:end="47:56">entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="49:13" pos:end="55:60"><if pos:start="49:13" pos:end="51:82">if <condition pos:start="49:16" pos:end="49:43">(<expr pos:start="49:17" pos:end="49:42"><operator pos:start="49:17" pos:end="49:17">!</operator><name pos:start="49:18" pos:end="49:42"><name pos:start="49:18" pos:end="49:20">seg</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:42">segment_list_entries</name></name></expr>)</condition><block type="pseudo" pos:start="51:17" pos:end="51:82"><block_content pos:start="51:17" pos:end="51:82">

                <expr_stmt pos:start="51:17" pos:end="51:82"><expr pos:start="51:17" pos:end="51:81"><name pos:start="51:17" pos:end="51:41"><name pos:start="51:17" pos:end="51:19">seg</name><operator pos:start="51:20" pos:end="51:21">-&gt;</operator><name pos:start="51:22" pos:end="51:41">segment_list_entries</name></name> <operator pos:start="51:43" pos:end="51:43">=</operator> <name pos:start="51:45" pos:end="51:73"><name pos:start="51:45" pos:end="51:47">seg</name><operator pos:start="51:48" pos:end="51:49">-&gt;</operator><name pos:start="51:50" pos:end="51:73">segment_list_entries_end</name></name> <operator pos:start="51:75" pos:end="51:75">=</operator> <name pos:start="51:77" pos:end="51:81">entry</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="53:13" pos:end="55:60">else<block type="pseudo" pos:start="55:17" pos:end="55:60"><block_content pos:start="55:17" pos:end="55:60">

                <expr_stmt pos:start="55:17" pos:end="55:60"><expr pos:start="55:17" pos:end="55:59"><name pos:start="55:17" pos:end="55:51"><name pos:start="55:17" pos:end="55:19">seg</name><operator pos:start="55:20" pos:end="55:21">-&gt;</operator><name pos:start="55:22" pos:end="55:45">segment_list_entries_end</name><operator pos:start="55:46" pos:end="55:47">-&gt;</operator><name pos:start="55:48" pos:end="55:51">next</name></name> <operator pos:start="55:53" pos:end="55:53">=</operator> <name pos:start="55:55" pos:end="55:59">entry</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:50"><expr pos:start="57:13" pos:end="57:49"><name pos:start="57:13" pos:end="57:41"><name pos:start="57:13" pos:end="57:15">seg</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:41">segment_list_entries_end</name></name> <operator pos:start="57:43" pos:end="57:43">=</operator> <name pos:start="57:45" pos:end="57:49">entry</name></expr>;</expr_stmt>



            <comment type="block" pos:start="61:13" pos:end="61:33">/* drop first item */</comment>

            <if_stmt pos:start="63:13" pos:end="73:13"><if pos:start="63:13" pos:end="73:13">if <condition pos:start="63:16" pos:end="63:70">(<expr pos:start="63:17" pos:end="63:69"><name pos:start="63:17" pos:end="63:30"><name pos:start="63:17" pos:end="63:19">seg</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:30">list_size</name></name> <operator pos:start="63:32" pos:end="63:33">&amp;&amp;</operator> <name pos:start="63:35" pos:end="63:52"><name pos:start="63:35" pos:end="63:37">seg</name><operator pos:start="63:38" pos:end="63:39">-&gt;</operator><name pos:start="63:40" pos:end="63:52">segment_count</name></name> <operator pos:start="63:54" pos:end="63:54">&gt;</operator> <name pos:start="63:56" pos:end="63:69"><name pos:start="63:56" pos:end="63:58">seg</name><operator pos:start="63:59" pos:end="63:60">-&gt;</operator><name pos:start="63:61" pos:end="63:69">list_size</name></name></expr>)</condition> <block pos:start="63:72" pos:end="73:13">{<block_content pos:start="65:17" pos:end="71:33">

                <expr_stmt pos:start="65:17" pos:end="65:50"><expr pos:start="65:17" pos:end="65:49"><name pos:start="65:17" pos:end="65:21">entry</name> <operator pos:start="65:23" pos:end="65:23">=</operator> <name pos:start="65:25" pos:end="65:49"><name pos:start="65:25" pos:end="65:27">seg</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:49">segment_list_entries</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="67:17" pos:end="67:76"><expr pos:start="67:17" pos:end="67:75"><name pos:start="67:17" pos:end="67:41"><name pos:start="67:17" pos:end="67:19">seg</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:41">segment_list_entries</name></name> <operator pos:start="67:43" pos:end="67:43">=</operator> <name pos:start="67:45" pos:end="67:75"><name pos:start="67:45" pos:end="67:47">seg</name><operator pos:start="67:48" pos:end="67:49">-&gt;</operator><name pos:start="67:50" pos:end="67:69">segment_list_entries</name><operator pos:start="67:70" pos:end="67:71">-&gt;</operator><name pos:start="67:72" pos:end="67:75">next</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="69:17" pos:end="69:41"><expr pos:start="69:17" pos:end="69:40"><call pos:start="69:17" pos:end="69:40"><name pos:start="69:17" pos:end="69:23">av_free</name><argument_list pos:start="69:24" pos:end="69:40">(<argument pos:start="69:25" pos:end="69:39"><expr pos:start="69:25" pos:end="69:39"><name pos:start="69:25" pos:end="69:39"><name pos:start="69:25" pos:end="69:29">entry</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:39">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="71:17" pos:end="71:33"><expr pos:start="71:17" pos:end="71:32"><call pos:start="71:17" pos:end="71:32"><name pos:start="71:17" pos:end="71:24">av_freep</name><argument_list pos:start="71:25" pos:end="71:32">(<argument pos:start="71:26" pos:end="71:31"><expr pos:start="71:26" pos:end="71:31"><operator pos:start="71:26" pos:end="71:26">&amp;</operator><name pos:start="71:27" pos:end="71:31">entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="77:13" pos:end="77:37"><expr pos:start="77:13" pos:end="77:36"><call pos:start="77:13" pos:end="77:36"><name pos:start="77:13" pos:end="77:22">avio_close</name><argument_list pos:start="77:23" pos:end="77:36">(<argument pos:start="77:24" pos:end="77:35"><expr pos:start="77:24" pos:end="77:35"><name pos:start="77:24" pos:end="77:35"><name pos:start="77:24" pos:end="77:26">seg</name><operator pos:start="77:27" pos:end="77:28">-&gt;</operator><name pos:start="77:29" pos:end="77:35">list_pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="81:25"><if pos:start="79:13" pos:end="81:25">if <condition pos:start="79:16" pos:end="79:49">(<expr pos:start="79:17" pos:end="79:48"><operator pos:start="79:17" pos:end="79:17">(</operator><name pos:start="79:18" pos:end="79:20">ret</name> <operator pos:start="79:22" pos:end="79:22">=</operator> <call pos:start="79:24" pos:end="79:43"><name pos:start="79:24" pos:end="79:40">segment_list_open</name><argument_list pos:start="79:41" pos:end="79:43">(<argument pos:start="79:42" pos:end="79:42"><expr pos:start="79:42" pos:end="79:42"><name pos:start="79:42" pos:end="79:42">s</name></expr></argument>)</argument_list></call><operator pos:start="79:44" pos:end="79:44">)</operator> <operator pos:start="79:46" pos:end="79:46">&lt;</operator> <literal type="number" pos:start="79:48" pos:end="79:48">0</literal></expr>)</condition><block type="pseudo" pos:start="81:17" pos:end="81:25"><block_content pos:start="81:17" pos:end="81:25">

                <goto pos:start="81:17" pos:end="81:25">goto <name pos:start="81:22" pos:end="81:24">end</name>;</goto></block_content></block></if></if_stmt>

            <for pos:start="83:13" pos:end="85:81">for <control pos:start="83:17" pos:end="83:79">(<init pos:start="83:18" pos:end="83:51"><expr pos:start="83:18" pos:end="83:50"><name pos:start="83:18" pos:end="83:22">entry</name> <operator pos:start="83:24" pos:end="83:24">=</operator> <name pos:start="83:26" pos:end="83:50"><name pos:start="83:26" pos:end="83:28">seg</name><operator pos:start="83:29" pos:end="83:30">-&gt;</operator><name pos:start="83:31" pos:end="83:50">segment_list_entries</name></name></expr>;</init> <condition pos:start="83:53" pos:end="83:58"><expr pos:start="83:53" pos:end="83:57"><name pos:start="83:53" pos:end="83:57">entry</name></expr>;</condition> <incr pos:start="83:60" pos:end="83:78"><expr pos:start="83:60" pos:end="83:78"><name pos:start="83:60" pos:end="83:64">entry</name> <operator pos:start="83:66" pos:end="83:66">=</operator> <name pos:start="83:68" pos:end="83:78"><name pos:start="83:68" pos:end="83:72">entry</name><operator pos:start="83:73" pos:end="83:74">-&gt;</operator><name pos:start="83:75" pos:end="83:78">next</name></name></expr></incr>)</control><block type="pseudo" pos:start="85:17" pos:end="85:81"><block_content pos:start="85:17" pos:end="85:81">

                <expr_stmt pos:start="85:17" pos:end="85:81"><expr pos:start="85:17" pos:end="85:80"><call pos:start="85:17" pos:end="85:80"><name pos:start="85:17" pos:end="85:40">segment_list_print_entry</name><argument_list pos:start="85:41" pos:end="85:80">(<argument pos:start="85:42" pos:end="85:53"><expr pos:start="85:42" pos:end="85:53"><name pos:start="85:42" pos:end="85:53"><name pos:start="85:42" pos:end="85:44">seg</name><operator pos:start="85:45" pos:end="85:46">-&gt;</operator><name pos:start="85:47" pos:end="85:53">list_pb</name></name></expr></argument>, <argument pos:start="85:56" pos:end="85:69"><expr pos:start="85:56" pos:end="85:69"><name pos:start="85:56" pos:end="85:69"><name pos:start="85:56" pos:end="85:58">seg</name><operator pos:start="85:59" pos:end="85:60">-&gt;</operator><name pos:start="85:61" pos:end="85:69">list_type</name></name></expr></argument>, <argument pos:start="85:72" pos:end="85:76"><expr pos:start="85:72" pos:end="85:76"><name pos:start="85:72" pos:end="85:76">entry</name></expr></argument>, <argument pos:start="85:79" pos:end="85:79"><expr pos:start="85:79" pos:end="85:79"><name pos:start="85:79" pos:end="85:79">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <if_stmt pos:start="87:13" pos:end="89:62"><if pos:start="87:13" pos:end="89:62">if <condition pos:start="87:16" pos:end="87:60">(<expr pos:start="87:17" pos:end="87:59"><name pos:start="87:17" pos:end="87:30"><name pos:start="87:17" pos:end="87:19">seg</name><operator pos:start="87:20" pos:end="87:21">-&gt;</operator><name pos:start="87:22" pos:end="87:30">list_type</name></name> <operator pos:start="87:32" pos:end="87:33">==</operator> <name pos:start="87:35" pos:end="87:48">LIST_TYPE_M3U8</name> <operator pos:start="87:50" pos:end="87:51">&amp;&amp;</operator> <name pos:start="87:53" pos:end="87:59">is_last</name></expr>)</condition><block type="pseudo" pos:start="89:17" pos:end="89:62"><block_content pos:start="89:17" pos:end="89:62">

                <expr_stmt pos:start="89:17" pos:end="89:62"><expr pos:start="89:17" pos:end="89:61"><call pos:start="89:17" pos:end="89:61"><name pos:start="89:17" pos:end="89:27">avio_printf</name><argument_list pos:start="89:28" pos:end="89:61">(<argument pos:start="89:29" pos:end="89:40"><expr pos:start="89:29" pos:end="89:40"><name pos:start="89:29" pos:end="89:40"><name pos:start="89:29" pos:end="89:31">seg</name><operator pos:start="89:32" pos:end="89:33">-&gt;</operator><name pos:start="89:34" pos:end="89:40">list_pb</name></name></expr></argument>, <argument pos:start="89:43" pos:end="89:60"><expr pos:start="89:43" pos:end="89:60"><literal type="string" pos:start="89:43" pos:end="89:60">"#EXT-X-ENDLIST\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="91:11" pos:end="95:9">else <block pos:start="91:16" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:87">

            <expr_stmt pos:start="93:13" pos:end="93:87"><expr pos:start="93:13" pos:end="93:86"><call pos:start="93:13" pos:end="93:86"><name pos:start="93:13" pos:end="93:36">segment_list_print_entry</name><argument_list pos:start="93:37" pos:end="93:86">(<argument pos:start="93:38" pos:end="93:49"><expr pos:start="93:38" pos:end="93:49"><name pos:start="93:38" pos:end="93:49"><name pos:start="93:38" pos:end="93:40">seg</name><operator pos:start="93:41" pos:end="93:42">-&gt;</operator><name pos:start="93:43" pos:end="93:49">list_pb</name></name></expr></argument>, <argument pos:start="93:52" pos:end="93:65"><expr pos:start="93:52" pos:end="93:65"><name pos:start="93:52" pos:end="93:65"><name pos:start="93:52" pos:end="93:54">seg</name><operator pos:start="93:55" pos:end="93:56">-&gt;</operator><name pos:start="93:57" pos:end="93:65">list_type</name></name></expr></argument>, <argument pos:start="93:68" pos:end="93:82"><expr pos:start="93:68" pos:end="93:82"><operator pos:start="93:68" pos:end="93:68">&amp;</operator><name pos:start="93:69" pos:end="93:82"><name pos:start="93:69" pos:end="93:71">seg</name><operator pos:start="93:72" pos:end="93:73">-&gt;</operator><name pos:start="93:74" pos:end="93:82">cur_entry</name></name></expr></argument>, <argument pos:start="93:85" pos:end="93:85"><expr pos:start="93:85" pos:end="93:85"><name pos:start="93:85" pos:end="93:85">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:33"><expr pos:start="97:9" pos:end="97:32"><call pos:start="97:9" pos:end="97:32"><name pos:start="97:9" pos:end="97:18">avio_flush</name><argument_list pos:start="97:19" pos:end="97:32">(<argument pos:start="97:20" pos:end="97:31"><expr pos:start="97:20" pos:end="97:31"><name pos:start="97:20" pos:end="97:31"><name pos:start="97:20" pos:end="97:22">seg</name><operator pos:start="97:23" pos:end="97:24">-&gt;</operator><name pos:start="97:25" pos:end="97:31">list_pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="105:51"><expr pos:start="103:5" pos:end="105:50"><call pos:start="103:5" pos:end="105:50"><name pos:start="103:5" pos:end="103:10">av_log</name><argument_list pos:start="103:11" pos:end="105:50">(<argument pos:start="103:12" pos:end="103:12"><expr pos:start="103:12" pos:end="103:12"><name pos:start="103:12" pos:end="103:12">s</name></expr></argument>, <argument pos:start="103:15" pos:end="103:28"><expr pos:start="103:15" pos:end="103:28"><name pos:start="103:15" pos:end="103:28">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="103:31" pos:end="103:61"><expr pos:start="103:31" pos:end="103:61"><literal type="string" pos:start="103:31" pos:end="103:61">"segment:'%s' count:%d ended\n"</literal></expr></argument>,

           <argument pos:start="105:12" pos:end="105:29"><expr pos:start="105:12" pos:end="105:29"><name pos:start="105:12" pos:end="105:29"><name pos:start="105:12" pos:end="105:14">seg</name><operator pos:start="105:15" pos:end="105:16">-&gt;</operator><name pos:start="105:17" pos:end="105:19">avf</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:29">filename</name></name></expr></argument>, <argument pos:start="105:32" pos:end="105:49"><expr pos:start="105:32" pos:end="105:49"><name pos:start="105:32" pos:end="105:49"><name pos:start="105:32" pos:end="105:34">seg</name><operator pos:start="105:35" pos:end="105:36">-&gt;</operator><name pos:start="105:37" pos:end="105:49">segment_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:25"><expr pos:start="107:5" pos:end="107:24"><name pos:start="107:5" pos:end="107:22"><name pos:start="107:5" pos:end="107:7">seg</name><operator pos:start="107:8" pos:end="107:9">-&gt;</operator><name pos:start="107:10" pos:end="107:22">segment_count</name></name><operator pos:start="107:23" pos:end="107:24">++</operator></expr>;</expr_stmt>



<label pos:start="111:1" pos:end="111:4"><name pos:start="111:1" pos:end="111:3">end</name>:</label>

    <expr_stmt pos:start="113:5" pos:end="113:23"><expr pos:start="113:5" pos:end="113:22"><call pos:start="113:5" pos:end="113:22"><name pos:start="113:5" pos:end="113:14">avio_close</name><argument_list pos:start="113:15" pos:end="113:22">(<argument pos:start="113:16" pos:end="113:21"><expr pos:start="113:16" pos:end="113:21"><name pos:start="113:16" pos:end="113:21"><name pos:start="113:16" pos:end="113:17">oc</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:21">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="117:5" pos:end="117:15">return <expr pos:start="117:12" pos:end="117:14"><name pos:start="117:12" pos:end="117:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
