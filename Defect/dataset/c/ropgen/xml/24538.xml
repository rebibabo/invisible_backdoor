<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24538.c" pos:tabs="8"><function pos:start="1:1" pos:end="68:0"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:35">rgb15to16</name>)<parameter_list pos:start="1:37" pos:end="1:87">(<parameter pos:start="1:38" pos:end="1:55"><decl pos:start="1:38" pos:end="1:55"><type pos:start="1:38" pos:end="1:55"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:50">uint8_t</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">src</name></decl></parameter>,<parameter pos:start="1:57" pos:end="1:68"><decl pos:start="1:57" pos:end="1:68"><type pos:start="1:57" pos:end="1:68"><name pos:start="1:57" pos:end="1:63">uint8_t</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">dst</name></decl></parameter>,<parameter pos:start="1:70" pos:end="1:86"><decl pos:start="1:70" pos:end="1:86"><type pos:start="1:70" pos:end="1:86"><name pos:start="1:70" pos:end="1:77">unsigned</name></type> <name pos:start="1:79" pos:end="1:86">src_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="68:0">{<block_content pos:start="5:3" pos:end="59:14">

  <decl_stmt pos:start="5:3" pos:end="5:32"><decl pos:start="5:3" pos:end="5:31"><type pos:start="5:3" pos:end="5:25"><specifier pos:start="5:3" pos:end="5:10">register</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:24">uint8_t</name><modifier pos:start="5:25" pos:end="5:25">*</modifier></type> <name pos:start="5:27" pos:end="5:27">s</name><init pos:start="5:28" pos:end="5:31">=<expr pos:start="5:29" pos:end="5:31"><name pos:start="5:29" pos:end="5:31">src</name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="7:3" pos:end="7:26"><decl pos:start="7:3" pos:end="7:25"><type pos:start="7:3" pos:end="7:19"><specifier pos:start="7:3" pos:end="7:10">register</specifier> <name pos:start="7:12" pos:end="7:18">uint8_t</name><modifier pos:start="7:19" pos:end="7:19">*</modifier></type> <name pos:start="7:21" pos:end="7:21">d</name><init pos:start="7:22" pos:end="7:25">=<expr pos:start="7:23" pos:end="7:25"><name pos:start="7:23" pos:end="7:25">dst</name></expr></init></decl>;</decl_stmt>

  <decl_stmt pos:start="9:3" pos:end="9:30"><decl pos:start="9:3" pos:end="9:29"><type pos:start="9:3" pos:end="9:26"><specifier pos:start="9:3" pos:end="9:10">register</specifier> <specifier pos:start="9:12" pos:end="9:16">const</specifier> <name pos:start="9:18" pos:end="9:24">uint8_t</name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:29">end</name></decl>;</decl_stmt>

  <decl_stmt pos:start="11:3" pos:end="11:24"><decl pos:start="11:3" pos:end="11:23"><type pos:start="11:3" pos:end="11:17"><specifier pos:start="11:3" pos:end="11:7">const</specifier> <name pos:start="11:9" pos:end="11:15">uint8_t</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:23">mm_end</name></decl>;</decl_stmt>

  <expr_stmt pos:start="13:3" pos:end="19:58"><expr pos:start="13:3" pos:end="13:20"><name pos:start="13:3" pos:end="13:5">end</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <name pos:start="13:9" pos:end="13:9">s</name> <operator pos:start="13:11" pos:end="13:11">+</operator> <name pos:start="13:13" pos:end="13:20">src_size</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="15:1" pos:end="15:15">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:15">HAVE_MMX</name></cpp:ifdef>

  <asm pos:start="17:3" pos:end="17:46">__asm __volatile(PREFETCH"	%0"::"m"(*s));</asm>

  <asm pos:start="19:3" pos:end="19:58">__asm __volatile("movq	%0, %%mm4"::"m"(mask15s));</asm>

  <expr_stmt pos:start="21:3" pos:end="21:20"><expr pos:start="21:3" pos:end="21:19"><name pos:start="21:3" pos:end="21:8">mm_end</name> <operator pos:start="21:10" pos:end="21:10">=</operator> <name pos:start="21:12" pos:end="21:14">end</name> <operator pos:start="21:16" pos:end="21:16">-</operator> <literal type="number" pos:start="21:18" pos:end="21:19">15</literal></expr>;</expr_stmt>

  <while pos:start="23:3" pos:end="55:18">while<condition pos:start="23:8" pos:end="23:17">(<expr pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:10">&lt;</operator><name pos:start="23:11" pos:end="23:16">mm_end</name></expr>)</condition>

  <block pos:start="25:3" pos:end="55:17">{<block_content pos:start="29:17" pos:end="55:17">

	<asm pos:start="27:9" pos:end="27:25">__asm __volatile(</asm>

		<expr_stmt pos:start="29:17" pos:end="53:24"><expr pos:start="29:17" pos:end="53:24"><name pos:start="29:17" pos:end="29:24">PREFETCH</name><literal type="string" pos:start="29:25" pos:end="29:41">"	32%1\n\t"</literal>

		<literal type="string" pos:start="31:17" pos:end="31:38">"movq	%1, %%mm0\n\t"</literal>

		<literal type="string" pos:start="33:17" pos:end="33:39">"movq	8%1, %%mm2\n\t"</literal>

		<literal type="string" pos:start="35:17" pos:end="35:41">"movq	%%mm0, %%mm1\n\t"</literal>

		<literal type="string" pos:start="37:17" pos:end="37:41">"movq	%%mm2, %%mm3\n\t"</literal>

		<literal type="string" pos:start="39:17" pos:end="39:41">"pand	%%mm4, %%mm0\n\t"</literal>

		<literal type="string" pos:start="41:17" pos:end="41:41">"pand	%%mm4, %%mm2\n\t"</literal>

		<literal type="string" pos:start="43:17" pos:end="43:41">"paddw	%%mm1, %%mm0\n\t"</literal>

		<literal type="string" pos:start="45:17" pos:end="45:41">"paddw	%%mm3, %%mm2\n\t"</literal>

		<name pos:start="47:17" pos:end="47:22">MOVNTQ</name><literal type="string" pos:start="47:23" pos:end="47:38">"	%%mm0, %0\n\t"</literal>

		<name pos:start="49:17" pos:end="49:22">MOVNTQ</name><literal type="string" pos:start="49:23" pos:end="49:35">"	%%mm2, 8%0"</literal>

		<operator pos:start="51:17" pos:end="51:17">:</operator><literal type="string" pos:start="51:18" pos:end="51:21">"=m"</literal><operator pos:start="51:22" pos:end="51:22">(</operator><operator pos:start="51:23" pos:end="51:23">*</operator><name pos:start="51:24" pos:end="51:24">d</name><operator pos:start="51:25" pos:end="51:25">)</operator>

		<operator pos:start="53:17" pos:end="53:17">:</operator><literal type="string" pos:start="53:18" pos:end="53:20">"m"</literal><operator pos:start="53:21" pos:end="53:21">(</operator><operator pos:start="53:22" pos:end="53:22">*</operator><name pos:start="53:23" pos:end="53:23">s</name><operator pos:start="53:24" pos:end="53:24">)</operator></expr></expr_stmt>

		)</block_content></block><empty_stmt pos:start="55:18" pos:end="55:18">;</empty_stmt></while>

	<expr_stmt pos:start="57:9" pos:end="57:14"><expr pos:start="57:9" pos:end="57:13"><name pos:start="57:9" pos:end="57:9">d</name><operator pos:start="57:10" pos:end="57:11">+=</operator><literal type="number" pos:start="57:12" pos:end="57:13">16</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="59:9" pos:end="59:14"><expr pos:start="59:9" pos:end="59:13"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">+=</operator><literal type="number" pos:start="59:12" pos:end="59:13">16</literal></expr>;</expr_stmt>

  </block_content>}</block></function>

  <asm pos:start="63:3" pos:end="63:38">__asm __volatile(SFENCE:::"memory");</asm>

  <asm pos:start="65:3" pos:end="65:36">__asm __volatile(EMMS:::"memory");</asm>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="69:5" pos:end="69:21"><expr pos:start="69:5" pos:end="69:20"><name pos:start="69:5" pos:end="69:10">mm_end</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <name pos:start="69:14" pos:end="69:16">end</name> <operator pos:start="69:18" pos:end="69:18">-</operator> <literal type="number" pos:start="69:20" pos:end="69:20">3</literal></expr>;</expr_stmt>

    <while pos:start="71:5" pos:end="83:5">while<condition pos:start="71:10" pos:end="71:21">(<expr pos:start="71:11" pos:end="71:20"><name pos:start="71:11" pos:end="71:11">s</name> <operator pos:start="71:13" pos:end="71:13">&lt;</operator> <name pos:start="71:15" pos:end="71:20">mm_end</name></expr>)</condition>

    <block pos:start="73:5" pos:end="83:5">{<block_content pos:start="75:9" pos:end="81:13">

	<decl_stmt pos:start="75:9" pos:end="75:46"><decl pos:start="75:9" pos:end="75:45"><type pos:start="75:9" pos:end="75:25"><specifier pos:start="75:9" pos:end="75:16">register</specifier> <name pos:start="75:18" pos:end="75:25">unsigned</name></type> <name pos:start="75:27" pos:end="75:27">x</name><init pos:start="75:28" pos:end="75:45">= <expr pos:start="75:30" pos:end="75:45"><operator pos:start="75:30" pos:end="75:30">*</operator><operator pos:start="75:31" pos:end="75:31">(</operator><operator pos:start="75:32" pos:end="75:32">(</operator><name pos:start="75:33" pos:end="75:40">uint32_t</name> <operator pos:start="75:42" pos:end="75:42">*</operator><operator pos:start="75:43" pos:end="75:43">)</operator><name pos:start="75:44" pos:end="75:44">s</name><operator pos:start="75:45" pos:end="75:45">)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt pos:start="77:9" pos:end="77:59"><expr pos:start="77:9" pos:end="77:58"><operator pos:start="77:9" pos:end="77:9">*</operator><operator pos:start="77:10" pos:end="77:10">(</operator><operator pos:start="77:11" pos:end="77:11">(</operator><name pos:start="77:12" pos:end="77:19">uint32_t</name> <operator pos:start="77:21" pos:end="77:21">*</operator><operator pos:start="77:22" pos:end="77:22">)</operator><name pos:start="77:23" pos:end="77:23">d</name><operator pos:start="77:24" pos:end="77:24">)</operator> <operator pos:start="77:26" pos:end="77:26">=</operator> <operator pos:start="77:28" pos:end="77:28">(</operator><name pos:start="77:29" pos:end="77:29">x</name><operator pos:start="77:30" pos:end="77:30">&amp;</operator><literal type="number" pos:start="77:31" pos:end="77:40">0x7FFF7FFF</literal><operator pos:start="77:41" pos:end="77:41">)</operator> <operator pos:start="77:43" pos:end="77:43">+</operator> <operator pos:start="77:45" pos:end="77:45">(</operator><name pos:start="77:46" pos:end="77:46">x</name><operator pos:start="77:47" pos:end="77:47">&amp;</operator><literal type="number" pos:start="77:48" pos:end="77:57">0x7FE07FE0</literal><operator pos:start="77:58" pos:end="77:58">)</operator></expr>;</expr_stmt>

	<expr_stmt pos:start="79:9" pos:end="79:13"><expr pos:start="79:9" pos:end="79:12"><name pos:start="79:9" pos:end="79:9">d</name><operator pos:start="79:10" pos:end="79:11">+=</operator><literal type="number" pos:start="79:12" pos:end="79:12">4</literal></expr>;</expr_stmt>

	<expr_stmt pos:start="81:9" pos:end="81:13"><expr pos:start="81:9" pos:end="81:12"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">+=</operator><literal type="number" pos:start="81:12" pos:end="81:12">4</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="93:5">if<condition pos:start="85:7" pos:end="85:15">(<expr pos:start="85:8" pos:end="85:14"><name pos:start="85:8" pos:end="85:8">s</name> <operator pos:start="85:10" pos:end="85:10">&lt;</operator> <name pos:start="85:12" pos:end="85:14">end</name></expr>)</condition>

    <block pos:start="87:5" pos:end="93:5">{<block_content pos:start="89:9" pos:end="91:51">

	<decl_stmt pos:start="89:9" pos:end="89:52"><decl pos:start="89:9" pos:end="89:51"><type pos:start="89:9" pos:end="89:31"><specifier pos:start="89:9" pos:end="89:16">register</specifier> <name pos:start="89:18" pos:end="89:25">unsigned</name> <name pos:start="89:27" pos:end="89:31">short</name></type> <name pos:start="89:33" pos:end="89:33">x</name><init pos:start="89:34" pos:end="89:51">= <expr pos:start="89:36" pos:end="89:51"><operator pos:start="89:36" pos:end="89:36">*</operator><operator pos:start="89:37" pos:end="89:37">(</operator><operator pos:start="89:38" pos:end="89:38">(</operator><name pos:start="89:39" pos:end="89:46">uint16_t</name> <operator pos:start="89:48" pos:end="89:48">*</operator><operator pos:start="89:49" pos:end="89:49">)</operator><name pos:start="89:50" pos:end="89:50">s</name><operator pos:start="89:51" pos:end="89:51">)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt pos:start="91:9" pos:end="91:51"><expr pos:start="91:9" pos:end="91:50"><operator pos:start="91:9" pos:end="91:9">*</operator><operator pos:start="91:10" pos:end="91:10">(</operator><operator pos:start="91:11" pos:end="91:11">(</operator><name pos:start="91:12" pos:end="91:19">uint16_t</name> <operator pos:start="91:21" pos:end="91:21">*</operator><operator pos:start="91:22" pos:end="91:22">)</operator><name pos:start="91:23" pos:end="91:23">d</name><operator pos:start="91:24" pos:end="91:24">)</operator> <operator pos:start="91:26" pos:end="91:26">=</operator> <operator pos:start="91:28" pos:end="91:28">(</operator><name pos:start="91:29" pos:end="91:29">x</name><operator pos:start="91:30" pos:end="91:30">&amp;</operator><literal type="number" pos:start="91:31" pos:end="91:36">0x7FFF</literal><operator pos:start="91:37" pos:end="91:37">)</operator> <operator pos:start="91:39" pos:end="91:39">+</operator> <operator pos:start="91:41" pos:end="91:41">(</operator><name pos:start="91:42" pos:end="91:42">x</name><operator pos:start="91:43" pos:end="91:43">&amp;</operator><literal type="number" pos:start="91:44" pos:end="91:49">0x7FE0</literal><operator pos:start="91:50" pos:end="91:50">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

}
</unit>
