<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24523.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:40">memory_region_dispatch_write</name><parameter_list pos:start="1:41" pos:end="7:55">(<parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><name pos:start="1:42" pos:end="1:53">MemoryRegion</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:57">mr</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:52"><decl pos:start="3:42" pos:end="3:52"><type pos:start="3:42" pos:end="3:52"><name pos:start="3:42" pos:end="3:47">hwaddr</name></type> <name pos:start="3:49" pos:end="3:52">addr</name></decl></parameter>,

                                         <parameter pos:start="5:42" pos:end="5:54"><decl pos:start="5:42" pos:end="5:54"><type pos:start="5:42" pos:end="5:54"><name pos:start="5:42" pos:end="5:49">uint64_t</name></type> <name pos:start="5:51" pos:end="5:54">data</name></decl></parameter>,

                                         <parameter pos:start="7:42" pos:end="7:54"><decl pos:start="7:42" pos:end="7:54"><type pos:start="7:42" pos:end="7:54"><name pos:start="7:42" pos:end="7:49">unsigned</name></type> <name pos:start="7:51" pos:end="7:54">size</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="45:1">{<block_content pos:start="11:5" pos:end="43:17">

    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:58">(<expr pos:start="11:9" pos:end="11:57"><operator pos:start="11:9" pos:end="11:9">!</operator><call pos:start="11:10" pos:end="11:57"><name pos:start="11:10" pos:end="11:35">memory_region_access_valid</name><argument_list pos:start="11:36" pos:end="11:57">(<argument pos:start="11:37" pos:end="11:38"><expr pos:start="11:37" pos:end="11:38"><name pos:start="11:37" pos:end="11:38">mr</name></expr></argument>, <argument pos:start="11:41" pos:end="11:44"><expr pos:start="11:41" pos:end="11:44"><name pos:start="11:41" pos:end="11:44">addr</name></expr></argument>, <argument pos:start="11:47" pos:end="11:50"><expr pos:start="11:47" pos:end="11:50"><name pos:start="11:47" pos:end="11:50">size</name></expr></argument>, <argument pos:start="11:53" pos:end="11:56"><expr pos:start="11:53" pos:end="11:56"><name pos:start="11:53" pos:end="11:56">true</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:60" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:20">

        <expr_stmt pos:start="13:9" pos:end="13:51"><expr pos:start="13:9" pos:end="13:50"><call pos:start="13:9" pos:end="13:50"><name pos:start="13:9" pos:end="13:28">unassigned_mem_write</name><argument_list pos:start="13:29" pos:end="13:50">(<argument pos:start="13:30" pos:end="13:31"><expr pos:start="13:30" pos:end="13:31"><name pos:start="13:30" pos:end="13:31">mr</name></expr></argument>, <argument pos:start="13:34" pos:end="13:37"><expr pos:start="13:34" pos:end="13:37"><name pos:start="13:34" pos:end="13:37">addr</name></expr></argument>, <argument pos:start="13:40" pos:end="13:43"><expr pos:start="13:40" pos:end="13:43"><name pos:start="13:40" pos:end="13:43">data</name></expr></argument>, <argument pos:start="13:46" pos:end="13:49"><expr pos:start="13:46" pos:end="13:49"><name pos:start="13:46" pos:end="13:49">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:20">return <expr pos:start="15:16" pos:end="15:19"><name pos:start="15:16" pos:end="15:19">true</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:39"><expr pos:start="21:5" pos:end="21:38"><call pos:start="21:5" pos:end="21:38"><name pos:start="21:5" pos:end="21:21">adjust_endianness</name><argument_list pos:start="21:22" pos:end="21:38">(<argument pos:start="21:23" pos:end="21:24"><expr pos:start="21:23" pos:end="21:24"><name pos:start="21:23" pos:end="21:24">mr</name></expr></argument>, <argument pos:start="21:27" pos:end="21:31"><expr pos:start="21:27" pos:end="21:31"><operator pos:start="21:27" pos:end="21:27">&amp;</operator><name pos:start="21:28" pos:end="21:31">data</name></expr></argument>, <argument pos:start="21:34" pos:end="21:37"><expr pos:start="21:34" pos:end="21:37"><name pos:start="21:34" pos:end="21:37">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="25:5" pos:end="41:5"><if pos:start="25:5" pos:end="35:5">if <condition pos:start="25:8" pos:end="25:23">(<expr pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:22"><name pos:start="25:9" pos:end="25:10">mr</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:15">ops</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:22">write</name></name></expr>)</condition> <block pos:start="25:25" pos:end="35:5">{<block_content pos:start="27:9" pos:end="33:68">

        <expr_stmt pos:start="27:9" pos:end="33:68"><expr pos:start="27:9" pos:end="33:67"><call pos:start="27:9" pos:end="33:67"><name pos:start="27:9" pos:end="27:33">access_with_adjusted_size</name><argument_list pos:start="27:34" pos:end="33:67">(<argument pos:start="27:35" pos:end="27:38"><expr pos:start="27:35" pos:end="27:38"><name pos:start="27:35" pos:end="27:38">addr</name></expr></argument>, <argument pos:start="27:41" pos:end="27:45"><expr pos:start="27:41" pos:end="27:45"><operator pos:start="27:41" pos:end="27:41">&amp;</operator><name pos:start="27:42" pos:end="27:45">data</name></expr></argument>, <argument pos:start="27:48" pos:end="27:51"><expr pos:start="27:48" pos:end="27:51"><name pos:start="27:48" pos:end="27:51">size</name></expr></argument>,

                                  <argument pos:start="29:35" pos:end="29:63"><expr pos:start="29:35" pos:end="29:63"><name pos:start="29:35" pos:end="29:63"><name pos:start="29:35" pos:end="29:36">mr</name><operator pos:start="29:37" pos:end="29:38">-&gt;</operator><name pos:start="29:39" pos:end="29:41">ops</name><operator pos:start="29:42" pos:end="29:43">-&gt;</operator><name pos:start="29:44" pos:end="29:47">impl</name><operator pos:start="29:48" pos:end="29:48">.</operator><name pos:start="29:49" pos:end="29:63">min_access_size</name></name></expr></argument>,

                                  <argument pos:start="31:35" pos:end="31:63"><expr pos:start="31:35" pos:end="31:63"><name pos:start="31:35" pos:end="31:63"><name pos:start="31:35" pos:end="31:36">mr</name><operator pos:start="31:37" pos:end="31:38">-&gt;</operator><name pos:start="31:39" pos:end="31:41">ops</name><operator pos:start="31:42" pos:end="31:43">-&gt;</operator><name pos:start="31:44" pos:end="31:47">impl</name><operator pos:start="31:48" pos:end="31:48">.</operator><name pos:start="31:49" pos:end="31:63">max_access_size</name></name></expr></argument>,

                                  <argument pos:start="33:35" pos:end="33:62"><expr pos:start="33:35" pos:end="33:62"><name pos:start="33:35" pos:end="33:62">memory_region_write_accessor</name></expr></argument>, <argument pos:start="33:65" pos:end="33:66"><expr pos:start="33:65" pos:end="33:66"><name pos:start="33:65" pos:end="33:66">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="41:5">else <block pos:start="35:12" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:76">

        <expr_stmt pos:start="37:9" pos:end="39:76"><expr pos:start="37:9" pos:end="39:75"><call pos:start="37:9" pos:end="39:75"><name pos:start="37:9" pos:end="37:33">access_with_adjusted_size</name><argument_list pos:start="37:34" pos:end="39:75">(<argument pos:start="37:35" pos:end="37:38"><expr pos:start="37:35" pos:end="37:38"><name pos:start="37:35" pos:end="37:38">addr</name></expr></argument>, <argument pos:start="37:41" pos:end="37:45"><expr pos:start="37:41" pos:end="37:45"><operator pos:start="37:41" pos:end="37:41">&amp;</operator><name pos:start="37:42" pos:end="37:45">data</name></expr></argument>, <argument pos:start="37:48" pos:end="37:51"><expr pos:start="37:48" pos:end="37:51"><name pos:start="37:48" pos:end="37:51">size</name></expr></argument>, <argument pos:start="37:54" pos:end="37:54"><expr pos:start="37:54" pos:end="37:54"><literal type="number" pos:start="37:54" pos:end="37:54">1</literal></expr></argument>, <argument pos:start="37:57" pos:end="37:57"><expr pos:start="37:57" pos:end="37:57"><literal type="number" pos:start="37:57" pos:end="37:57">4</literal></expr></argument>,

                                  <argument pos:start="39:35" pos:end="39:70"><expr pos:start="39:35" pos:end="39:70"><name pos:start="39:35" pos:end="39:70">memory_region_oldmmio_write_accessor</name></expr></argument>, <argument pos:start="39:73" pos:end="39:74"><expr pos:start="39:73" pos:end="39:74"><name pos:start="39:73" pos:end="39:74">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="43:5" pos:end="43:17">return <expr pos:start="43:12" pos:end="43:16"><name pos:start="43:12" pos:end="43:16">false</name></expr>;</return>

</block_content>}</block></function>
</unit>
