<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16768.c" pos:tabs="8"><function pos:start="1:1" pos:end="240:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:40">ff_h264_decode_picture_parameter_set</name><parameter_list pos:start="1:41" pos:end="1:72">(<parameter pos:start="1:42" pos:end="1:55"><decl pos:start="1:42" pos:end="1:55"><type pos:start="1:42" pos:end="1:55"><name pos:start="1:42" pos:end="1:52">H264Context</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">h</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:71"><decl pos:start="1:58" pos:end="1:71"><type pos:start="1:58" pos:end="1:71"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:71">bit_length</name></decl></parameter>)</parameter_list><block pos:start="1:73" pos:end="240:1">{<block_content pos:start="3:5" pos:end="238:14">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:16">int</name></type> <name pos:start="5:18" pos:end="5:23">pps_id</name><init pos:start="5:24" pos:end="5:46">= <expr pos:start="5:26" pos:end="5:46"><call pos:start="5:26" pos:end="5:46"><name pos:start="5:26" pos:end="5:38">get_ue_golomb</name><argument_list pos:start="5:39" pos:end="5:46">(<argument pos:start="5:40" pos:end="5:45"><expr pos:start="5:40" pos:end="5:45"><operator pos:start="5:40" pos:end="5:40">&amp;</operator><name pos:start="5:41" pos:end="5:45"><name pos:start="5:41" pos:end="5:41">s</name><operator pos:start="5:42" pos:end="5:43">-&gt;</operator><name pos:start="5:44" pos:end="5:45">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:7">PPS</name> <modifier pos:start="7:9" pos:end="7:9">*</modifier></type><name pos:start="7:10" pos:end="7:12">pps</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:13"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:13">int</name></type> <name pos:start="9:15" pos:end="9:26">qp_bd_offset</name> <init pos:start="9:28" pos:end="9:56">= <expr pos:start="9:30" pos:end="9:56"><literal type="number" pos:start="9:30" pos:end="9:30">6</literal><operator pos:start="9:31" pos:end="9:31">*</operator><operator pos:start="9:32" pos:end="9:32">(</operator><name pos:start="9:33" pos:end="9:53"><name pos:start="9:33" pos:end="9:33">h</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:38">sps</name><operator pos:start="9:39" pos:end="9:39">.</operator><name pos:start="9:40" pos:end="9:53">bit_depth_luma</name></name><operator pos:start="9:54" pos:end="9:54">-</operator><literal type="number" pos:start="9:55" pos:end="9:55">8</literal><operator pos:start="9:56" pos:end="9:56">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">bits_left</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="24:5"><if pos:start="15:5" pos:end="24:5">if<condition pos:start="15:7" pos:end="15:31">(<expr pos:start="15:8" pos:end="15:30"><name pos:start="15:8" pos:end="15:13">pps_id</name> <operator pos:start="15:15" pos:end="15:16">&gt;=</operator> <name pos:start="15:18" pos:end="15:30">MAX_PPS_COUNT</name></expr>)</condition> <block pos:start="15:33" pos:end="24:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:79"><expr pos:start="17:9" pos:end="17:78"><call pos:start="17:9" pos:end="17:78"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:78">(<argument pos:start="17:16" pos:end="17:25"><expr pos:start="17:16" pos:end="17:25"><name pos:start="17:16" pos:end="17:25"><name pos:start="17:16" pos:end="17:16">h</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:19">s</name><operator pos:start="17:20" pos:end="17:20">.</operator><name pos:start="17:21" pos:end="17:25">avctx</name></name></expr></argument>, <argument pos:start="17:28" pos:end="17:39"><expr pos:start="17:28" pos:end="17:39"><name pos:start="17:28" pos:end="17:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:42" pos:end="17:69"><expr pos:start="17:42" pos:end="17:69"><literal type="string" pos:start="17:42" pos:end="17:69">"pps_id (%d) out of range\n"</literal></expr></argument>, <argument pos:start="17:72" pos:end="17:77"><expr pos:start="17:72" pos:end="17:77"><name pos:start="17:72" pos:end="17:77">pps_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>




    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="28:5" pos:end="28:33"><expr pos:start="28:5" pos:end="28:32"><name pos:start="28:5" pos:end="28:7">pps</name><operator pos:start="28:8" pos:end="28:8">=</operator> <call pos:start="28:10" pos:end="28:32"><name pos:start="28:10" pos:end="28:19">av_mallocz</name><argument_list pos:start="28:20" pos:end="28:32">(<argument pos:start="28:21" pos:end="28:31"><expr pos:start="28:21" pos:end="28:31"><sizeof pos:start="28:21" pos:end="28:31">sizeof<argument_list pos:start="28:27" pos:end="28:31">(<argument pos:start="28:28" pos:end="28:30"><expr pos:start="28:28" pos:end="28:30"><name pos:start="28:28" pos:end="28:30">PPS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="30:5" pos:end="32:18"><if pos:start="30:5" pos:end="32:18">if<condition pos:start="30:7" pos:end="30:19">(<expr pos:start="30:8" pos:end="30:18"><name pos:start="30:8" pos:end="30:10">pps</name> <operator pos:start="30:12" pos:end="30:13">==</operator> <name pos:start="30:15" pos:end="30:18">NULL</name></expr>)</condition><block type="pseudo" pos:start="32:9" pos:end="32:18"><block_content pos:start="32:9" pos:end="32:18">

        <return pos:start="32:9" pos:end="32:18">return <expr pos:start="32:16" pos:end="32:17"><operator pos:start="32:16" pos:end="32:16">-</operator><literal type="number" pos:start="32:17" pos:end="32:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="34:5" pos:end="34:42"><expr pos:start="34:5" pos:end="34:41"><name pos:start="34:5" pos:end="34:15"><name pos:start="34:5" pos:end="34:7">pps</name><operator pos:start="34:8" pos:end="34:9">-&gt;</operator><name pos:start="34:10" pos:end="34:15">sps_id</name></name><operator pos:start="34:16" pos:end="34:16">=</operator> <call pos:start="34:18" pos:end="34:41"><name pos:start="34:18" pos:end="34:33">get_ue_golomb_31</name><argument_list pos:start="34:34" pos:end="34:41">(<argument pos:start="34:35" pos:end="34:40"><expr pos:start="34:35" pos:end="34:40"><operator pos:start="34:35" pos:end="34:35">&amp;</operator><name pos:start="34:36" pos:end="34:40"><name pos:start="34:36" pos:end="34:36">s</name><operator pos:start="34:37" pos:end="34:38">-&gt;</operator><name pos:start="34:39" pos:end="34:40">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="36:5" pos:end="42:5"><if pos:start="36:5" pos:end="42:5">if<condition pos:start="36:7" pos:end="36:83">(<expr pos:start="36:8" pos:end="36:82"><operator pos:start="36:8" pos:end="36:8">(</operator><name pos:start="36:9" pos:end="36:16">unsigned</name><operator pos:start="36:17" pos:end="36:17">)</operator><name pos:start="36:18" pos:end="36:28"><name pos:start="36:18" pos:end="36:20">pps</name><operator pos:start="36:21" pos:end="36:22">-&gt;</operator><name pos:start="36:23" pos:end="36:28">sps_id</name></name><operator pos:start="36:29" pos:end="36:30">&gt;=</operator><name pos:start="36:31" pos:end="36:43">MAX_SPS_COUNT</name> <operator pos:start="36:45" pos:end="36:46">||</operator> <name pos:start="36:48" pos:end="36:74"><name pos:start="36:48" pos:end="36:48">h</name><operator pos:start="36:49" pos:end="36:50">-&gt;</operator><name pos:start="36:51" pos:end="36:61">sps_buffers</name><index pos:start="36:62" pos:end="36:74">[<expr pos:start="36:63" pos:end="36:73"><name pos:start="36:63" pos:end="36:73"><name pos:start="36:63" pos:end="36:65">pps</name><operator pos:start="36:66" pos:end="36:67">-&gt;</operator><name pos:start="36:68" pos:end="36:73">sps_id</name></name></expr>]</index></name> <operator pos:start="36:76" pos:end="36:77">==</operator> <name pos:start="36:79" pos:end="36:82">NULL</name></expr>)</condition><block pos:start="36:84" pos:end="42:5">{<block_content pos:start="38:9" pos:end="40:18">

        <expr_stmt pos:start="38:9" pos:end="38:66"><expr pos:start="38:9" pos:end="38:65"><call pos:start="38:9" pos:end="38:65"><name pos:start="38:9" pos:end="38:14">av_log</name><argument_list pos:start="38:15" pos:end="38:65">(<argument pos:start="38:16" pos:end="38:25"><expr pos:start="38:16" pos:end="38:25"><name pos:start="38:16" pos:end="38:25"><name pos:start="38:16" pos:end="38:16">h</name><operator pos:start="38:17" pos:end="38:18">-&gt;</operator><name pos:start="38:19" pos:end="38:19">s</name><operator pos:start="38:20" pos:end="38:20">.</operator><name pos:start="38:21" pos:end="38:25">avctx</name></name></expr></argument>, <argument pos:start="38:28" pos:end="38:39"><expr pos:start="38:28" pos:end="38:39"><name pos:start="38:28" pos:end="38:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="38:42" pos:end="38:64"><expr pos:start="38:42" pos:end="38:64"><literal type="string" pos:start="38:42" pos:end="38:64">"sps_id out of range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="40:9" pos:end="40:18">goto <name pos:start="40:14" pos:end="40:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="46:5" pos:end="46:34"><expr pos:start="46:5" pos:end="46:33"><name pos:start="46:5" pos:end="46:14"><name pos:start="46:5" pos:end="46:7">pps</name><operator pos:start="46:8" pos:end="46:9">-&gt;</operator><name pos:start="46:10" pos:end="46:14">cabac</name></name><operator pos:start="46:15" pos:end="46:15">=</operator> <call pos:start="46:17" pos:end="46:33"><name pos:start="46:17" pos:end="46:25">get_bits1</name><argument_list pos:start="46:26" pos:end="46:33">(<argument pos:start="46:27" pos:end="46:32"><expr pos:start="46:27" pos:end="46:32"><operator pos:start="46:27" pos:end="46:27">&amp;</operator><name pos:start="46:28" pos:end="46:32"><name pos:start="46:28" pos:end="46:28">s</name><operator pos:start="46:29" pos:end="46:30">-&gt;</operator><name pos:start="46:31" pos:end="46:32">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="48:5" pos:end="48:46"><expr pos:start="48:5" pos:end="48:45"><name pos:start="48:5" pos:end="48:26"><name pos:start="48:5" pos:end="48:7">pps</name><operator pos:start="48:8" pos:end="48:9">-&gt;</operator><name pos:start="48:10" pos:end="48:26">pic_order_present</name></name><operator pos:start="48:27" pos:end="48:27">=</operator> <call pos:start="48:29" pos:end="48:45"><name pos:start="48:29" pos:end="48:37">get_bits1</name><argument_list pos:start="48:38" pos:end="48:45">(<argument pos:start="48:39" pos:end="48:44"><expr pos:start="48:39" pos:end="48:44"><operator pos:start="48:39" pos:end="48:39">&amp;</operator><name pos:start="48:40" pos:end="48:44"><name pos:start="48:40" pos:end="48:40">s</name><operator pos:start="48:41" pos:end="48:42">-&gt;</operator><name pos:start="48:43" pos:end="48:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="50:5" pos:end="50:54"><expr pos:start="50:5" pos:end="50:53"><name pos:start="50:5" pos:end="50:26"><name pos:start="50:5" pos:end="50:7">pps</name><operator pos:start="50:8" pos:end="50:9">-&gt;</operator><name pos:start="50:10" pos:end="50:26">slice_group_count</name></name><operator pos:start="50:27" pos:end="50:27">=</operator> <call pos:start="50:29" pos:end="50:49"><name pos:start="50:29" pos:end="50:41">get_ue_golomb</name><argument_list pos:start="50:42" pos:end="50:49">(<argument pos:start="50:43" pos:end="50:48"><expr pos:start="50:43" pos:end="50:48"><operator pos:start="50:43" pos:end="50:43">&amp;</operator><name pos:start="50:44" pos:end="50:48"><name pos:start="50:44" pos:end="50:44">s</name><operator pos:start="50:45" pos:end="50:46">-&gt;</operator><name pos:start="50:47" pos:end="50:48">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="50:51" pos:end="50:51">+</operator> <literal type="number" pos:start="50:53" pos:end="50:53">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="52:5" pos:end="124:5"><if pos:start="52:5" pos:end="124:5">if<condition pos:start="52:7" pos:end="52:35">(<expr pos:start="52:8" pos:end="52:33"><name pos:start="52:8" pos:end="52:29"><name pos:start="52:8" pos:end="52:10">pps</name><operator pos:start="52:11" pos:end="52:12">-&gt;</operator><name pos:start="52:13" pos:end="52:29">slice_group_count</name></name> <operator pos:start="52:31" pos:end="52:31">&gt;</operator> <literal type="number" pos:start="52:33" pos:end="52:33">1</literal></expr> )</condition><block pos:start="52:36" pos:end="124:5">{<block_content pos:start="54:9" pos:end="122:9">

        <expr_stmt pos:start="54:9" pos:end="54:60"><expr pos:start="54:9" pos:end="54:59"><name pos:start="54:9" pos:end="54:36"><name pos:start="54:9" pos:end="54:11">pps</name><operator pos:start="54:12" pos:end="54:13">-&gt;</operator><name pos:start="54:14" pos:end="54:36">mb_slice_group_map_type</name></name><operator pos:start="54:37" pos:end="54:37">=</operator> <call pos:start="54:39" pos:end="54:59"><name pos:start="54:39" pos:end="54:51">get_ue_golomb</name><argument_list pos:start="54:52" pos:end="54:59">(<argument pos:start="54:53" pos:end="54:58"><expr pos:start="54:53" pos:end="54:58"><operator pos:start="54:53" pos:end="54:53">&amp;</operator><name pos:start="54:54" pos:end="54:58"><name pos:start="54:54" pos:end="54:54">s</name><operator pos:start="54:55" pos:end="54:56">-&gt;</operator><name pos:start="54:57" pos:end="54:58">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="56:9" pos:end="56:64"><expr pos:start="56:9" pos:end="56:63"><call pos:start="56:9" pos:end="56:63"><name pos:start="56:9" pos:end="56:14">av_log</name><argument_list pos:start="56:15" pos:end="56:63">(<argument pos:start="56:16" pos:end="56:25"><expr pos:start="56:16" pos:end="56:25"><name pos:start="56:16" pos:end="56:25"><name pos:start="56:16" pos:end="56:16">h</name><operator pos:start="56:17" pos:end="56:18">-&gt;</operator><name pos:start="56:19" pos:end="56:19">s</name><operator pos:start="56:20" pos:end="56:20">.</operator><name pos:start="56:21" pos:end="56:25">avctx</name></name></expr></argument>, <argument pos:start="56:28" pos:end="56:39"><expr pos:start="56:28" pos:end="56:39"><name pos:start="56:28" pos:end="56:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="56:42" pos:end="56:62"><expr pos:start="56:42" pos:end="56:62"><literal type="string" pos:start="56:42" pos:end="56:62">"FMO not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="58:9" pos:end="122:9">switch<condition pos:start="58:15" pos:end="58:44">(<expr pos:start="58:16" pos:end="58:43"><name pos:start="58:16" pos:end="58:43"><name pos:start="58:16" pos:end="58:18">pps</name><operator pos:start="58:19" pos:end="58:20">-&gt;</operator><name pos:start="58:21" pos:end="58:43">mb_slice_group_map_type</name></name></expr>)</condition><block pos:start="58:45" pos:end="122:9">{<block_content pos:start="60:9" pos:end="120:18">

        <case pos:start="60:9" pos:end="69:0">case <expr pos:start="60:14" pos:end="60:14"><literal type="number" pos:start="60:14" pos:end="60:14">0</literal></expr>:</case>

<cpp:if pos:start="62:1" pos:end="62:5">#<cpp:directive pos:start="62:2" pos:end="62:3">if</cpp:directive> <expr pos:start="62:5" pos:end="62:5"><literal type="number" pos:start="62:5" pos:end="62:5">0</literal></expr></cpp:if>

|   for( i = 0; i &lt;= num_slice_groups_minus1; i++ ) |   |        |

|    run_length[ i ]                                |1  |ue(v)   |

<cpp:endif pos:start="68:1" pos:end="68:6">#<cpp:directive pos:start="68:2" pos:end="68:6">endif</cpp:directive></cpp:endif>

            <break pos:start="70:13" pos:end="70:18">break;</break>

        <case pos:start="72:9" pos:end="87:0">case <expr pos:start="72:14" pos:end="72:14"><literal type="number" pos:start="72:14" pos:end="72:14">2</literal></expr>:</case>

<cpp:if pos:start="74:1" pos:end="74:5">#<cpp:directive pos:start="74:2" pos:end="74:3">if</cpp:directive> <expr pos:start="74:5" pos:end="74:5"><literal type="number" pos:start="74:5" pos:end="74:5">0</literal></expr></cpp:if>

|   for( i = 0; i &lt; num_slice_groups_minus1; i++ )  |   |        |

|{                                                  |   |        |

|    top_left_mb[ i ]                               |1  |ue(v)   |

|    bottom_right_mb[ i ]                           |1  |ue(v)   |

|   }                                               |   |        |

<cpp:endif pos:start="86:1" pos:end="86:6">#<cpp:directive pos:start="86:2" pos:end="86:6">endif</cpp:directive></cpp:endif>

            <break pos:start="88:13" pos:end="88:18">break;</break>

        <case pos:start="90:9" pos:end="90:15">case <expr pos:start="90:14" pos:end="90:14"><literal type="number" pos:start="90:14" pos:end="90:14">3</literal></expr>:</case>

        <case pos:start="92:9" pos:end="92:15">case <expr pos:start="92:14" pos:end="92:14"><literal type="number" pos:start="92:14" pos:end="92:14">4</literal></expr>:</case>

        <case pos:start="94:9" pos:end="103:0">case <expr pos:start="94:14" pos:end="94:14"><literal type="number" pos:start="94:14" pos:end="94:14">5</literal></expr>:</case>

<cpp:if pos:start="96:1" pos:end="96:5">#<cpp:directive pos:start="96:2" pos:end="96:3">if</cpp:directive> <expr pos:start="96:5" pos:end="96:5"><literal type="number" pos:start="96:5" pos:end="96:5">0</literal></expr></cpp:if>

|   slice_group_change_direction_flag               |1  |u(1)    |

|   slice_group_change_rate_minus1                  |1  |ue(v)   |

<cpp:endif pos:start="102:1" pos:end="102:6">#<cpp:directive pos:start="102:2" pos:end="102:6">endif</cpp:directive></cpp:endif>

            <break pos:start="104:13" pos:end="104:18">break;</break>

        <case pos:start="106:9" pos:end="119:0">case <expr pos:start="106:14" pos:end="106:14"><literal type="number" pos:start="106:14" pos:end="106:14">6</literal></expr>:</case>

<cpp:if pos:start="108:1" pos:end="108:5">#<cpp:directive pos:start="108:2" pos:end="108:3">if</cpp:directive> <expr pos:start="108:5" pos:end="108:5"><literal type="number" pos:start="108:5" pos:end="108:5">0</literal></expr></cpp:if>

|   slice_group_id_cnt_minus1                       |1  |ue(v)   |

|   for( i = 0; i &lt;= slice_group_id_cnt_minus1; i++ |   |        |

|)                                                  |   |        |

|    slice_group_id[ i ]                            |1  |u(v)    |

<cpp:endif pos:start="118:1" pos:end="118:6">#<cpp:directive pos:start="118:2" pos:end="118:6">endif</cpp:directive></cpp:endif>

            <break pos:start="120:13" pos:end="120:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="126:5" pos:end="126:49"><expr pos:start="126:5" pos:end="126:48"><name pos:start="126:5" pos:end="126:21"><name pos:start="126:5" pos:end="126:7">pps</name><operator pos:start="126:8" pos:end="126:9">-&gt;</operator><name pos:start="126:10" pos:end="126:18">ref_count</name><index pos:start="126:19" pos:end="126:21">[<expr pos:start="126:20" pos:end="126:20"><literal type="number" pos:start="126:20" pos:end="126:20">0</literal></expr>]</index></name><operator pos:start="126:22" pos:end="126:22">=</operator> <call pos:start="126:24" pos:end="126:44"><name pos:start="126:24" pos:end="126:36">get_ue_golomb</name><argument_list pos:start="126:37" pos:end="126:44">(<argument pos:start="126:38" pos:end="126:43"><expr pos:start="126:38" pos:end="126:43"><operator pos:start="126:38" pos:end="126:38">&amp;</operator><name pos:start="126:39" pos:end="126:43"><name pos:start="126:39" pos:end="126:39">s</name><operator pos:start="126:40" pos:end="126:41">-&gt;</operator><name pos:start="126:42" pos:end="126:43">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="126:46" pos:end="126:46">+</operator> <literal type="number" pos:start="126:48" pos:end="126:48">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="128:5" pos:end="128:49"><expr pos:start="128:5" pos:end="128:48"><name pos:start="128:5" pos:end="128:21"><name pos:start="128:5" pos:end="128:7">pps</name><operator pos:start="128:8" pos:end="128:9">-&gt;</operator><name pos:start="128:10" pos:end="128:18">ref_count</name><index pos:start="128:19" pos:end="128:21">[<expr pos:start="128:20" pos:end="128:20"><literal type="number" pos:start="128:20" pos:end="128:20">1</literal></expr>]</index></name><operator pos:start="128:22" pos:end="128:22">=</operator> <call pos:start="128:24" pos:end="128:44"><name pos:start="128:24" pos:end="128:36">get_ue_golomb</name><argument_list pos:start="128:37" pos:end="128:44">(<argument pos:start="128:38" pos:end="128:43"><expr pos:start="128:38" pos:end="128:43"><operator pos:start="128:38" pos:end="128:38">&amp;</operator><name pos:start="128:39" pos:end="128:43"><name pos:start="128:39" pos:end="128:39">s</name><operator pos:start="128:40" pos:end="128:41">-&gt;</operator><name pos:start="128:42" pos:end="128:43">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="128:46" pos:end="128:46">+</operator> <literal type="number" pos:start="128:48" pos:end="128:48">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="130:5" pos:end="136:5"><if pos:start="130:5" pos:end="136:5">if<condition pos:start="130:7" pos:end="130:64">(<expr pos:start="130:8" pos:end="130:63"><name pos:start="130:8" pos:end="130:24"><name pos:start="130:8" pos:end="130:10">pps</name><operator pos:start="130:11" pos:end="130:12">-&gt;</operator><name pos:start="130:13" pos:end="130:21">ref_count</name><index pos:start="130:22" pos:end="130:24">[<expr pos:start="130:23" pos:end="130:23"><literal type="number" pos:start="130:23" pos:end="130:23">0</literal></expr>]</index></name><operator pos:start="130:25" pos:end="130:25">-</operator><literal type="number" pos:start="130:26" pos:end="130:26">1</literal> <operator pos:start="130:28" pos:end="130:28">&gt;</operator> <literal type="number" pos:start="130:30" pos:end="130:32">32</literal><operator pos:start="130:32" pos:end="130:32">-</operator><literal type="number" pos:start="130:33" pos:end="130:33">1</literal> <operator pos:start="130:35" pos:end="130:36">||</operator> <name pos:start="130:38" pos:end="130:54"><name pos:start="130:38" pos:end="130:40">pps</name><operator pos:start="130:41" pos:end="130:42">-&gt;</operator><name pos:start="130:43" pos:end="130:51">ref_count</name><index pos:start="130:52" pos:end="130:54">[<expr pos:start="130:53" pos:end="130:53"><literal type="number" pos:start="130:53" pos:end="130:53">1</literal></expr>]</index></name><operator pos:start="130:55" pos:end="130:55">-</operator><literal type="number" pos:start="130:56" pos:end="130:56">1</literal> <operator pos:start="130:58" pos:end="130:58">&gt;</operator> <literal type="number" pos:start="130:60" pos:end="130:62">32</literal><operator pos:start="130:62" pos:end="130:62">-</operator><literal type="number" pos:start="130:63" pos:end="130:63">1</literal></expr>)</condition><block pos:start="130:65" pos:end="136:5">{<block_content pos:start="132:9" pos:end="134:18">

        <expr_stmt pos:start="132:9" pos:end="132:71"><expr pos:start="132:9" pos:end="132:70"><call pos:start="132:9" pos:end="132:70"><name pos:start="132:9" pos:end="132:14">av_log</name><argument_list pos:start="132:15" pos:end="132:70">(<argument pos:start="132:16" pos:end="132:25"><expr pos:start="132:16" pos:end="132:25"><name pos:start="132:16" pos:end="132:25"><name pos:start="132:16" pos:end="132:16">h</name><operator pos:start="132:17" pos:end="132:18">-&gt;</operator><name pos:start="132:19" pos:end="132:19">s</name><operator pos:start="132:20" pos:end="132:20">.</operator><name pos:start="132:21" pos:end="132:25">avctx</name></name></expr></argument>, <argument pos:start="132:28" pos:end="132:39"><expr pos:start="132:28" pos:end="132:39"><name pos:start="132:28" pos:end="132:39">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="132:42" pos:end="132:69"><expr pos:start="132:42" pos:end="132:69"><literal type="string" pos:start="132:42" pos:end="132:69">"reference overflow (pps)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="134:9" pos:end="134:18">goto <name pos:start="134:14" pos:end="134:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="140:5" pos:end="140:42"><expr pos:start="140:5" pos:end="140:41"><name pos:start="140:5" pos:end="140:22"><name pos:start="140:5" pos:end="140:7">pps</name><operator pos:start="140:8" pos:end="140:9">-&gt;</operator><name pos:start="140:10" pos:end="140:22">weighted_pred</name></name><operator pos:start="140:23" pos:end="140:23">=</operator> <call pos:start="140:25" pos:end="140:41"><name pos:start="140:25" pos:end="140:33">get_bits1</name><argument_list pos:start="140:34" pos:end="140:41">(<argument pos:start="140:35" pos:end="140:40"><expr pos:start="140:35" pos:end="140:40"><operator pos:start="140:35" pos:end="140:35">&amp;</operator><name pos:start="140:36" pos:end="140:40"><name pos:start="140:36" pos:end="140:36">s</name><operator pos:start="140:37" pos:end="140:38">-&gt;</operator><name pos:start="140:39" pos:end="140:40">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="142:5" pos:end="142:50"><expr pos:start="142:5" pos:end="142:49"><name pos:start="142:5" pos:end="142:28"><name pos:start="142:5" pos:end="142:7">pps</name><operator pos:start="142:8" pos:end="142:9">-&gt;</operator><name pos:start="142:10" pos:end="142:28">weighted_bipred_idc</name></name><operator pos:start="142:29" pos:end="142:29">=</operator> <call pos:start="142:31" pos:end="142:49"><name pos:start="142:31" pos:end="142:38">get_bits</name><argument_list pos:start="142:39" pos:end="142:49">(<argument pos:start="142:40" pos:end="142:45"><expr pos:start="142:40" pos:end="142:45"><operator pos:start="142:40" pos:end="142:40">&amp;</operator><name pos:start="142:41" pos:end="142:45"><name pos:start="142:41" pos:end="142:41">s</name><operator pos:start="142:42" pos:end="142:43">-&gt;</operator><name pos:start="142:44" pos:end="142:45">gb</name></name></expr></argument>, <argument pos:start="142:48" pos:end="142:48"><expr pos:start="142:48" pos:end="142:48"><literal type="number" pos:start="142:48" pos:end="142:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="144:5" pos:end="144:60"><expr pos:start="144:5" pos:end="144:59"><name pos:start="144:5" pos:end="144:16"><name pos:start="144:5" pos:end="144:7">pps</name><operator pos:start="144:8" pos:end="144:9">-&gt;</operator><name pos:start="144:10" pos:end="144:16">init_qp</name></name><operator pos:start="144:17" pos:end="144:17">=</operator> <call pos:start="144:19" pos:end="144:39"><name pos:start="144:19" pos:end="144:31">get_se_golomb</name><argument_list pos:start="144:32" pos:end="144:39">(<argument pos:start="144:33" pos:end="144:38"><expr pos:start="144:33" pos:end="144:38"><operator pos:start="144:33" pos:end="144:33">&amp;</operator><name pos:start="144:34" pos:end="144:38"><name pos:start="144:34" pos:end="144:34">s</name><operator pos:start="144:35" pos:end="144:36">-&gt;</operator><name pos:start="144:37" pos:end="144:38">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="144:41" pos:end="144:41">+</operator> <literal type="number" pos:start="144:43" pos:end="144:46">26</literal> <operator pos:start="144:46" pos:end="144:46">+</operator> <name pos:start="144:48" pos:end="144:59">qp_bd_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="146:5" pos:end="146:60"><expr pos:start="146:5" pos:end="146:59"><name pos:start="146:5" pos:end="146:16"><name pos:start="146:5" pos:end="146:7">pps</name><operator pos:start="146:8" pos:end="146:9">-&gt;</operator><name pos:start="146:10" pos:end="146:16">init_qs</name></name><operator pos:start="146:17" pos:end="146:17">=</operator> <call pos:start="146:19" pos:end="146:39"><name pos:start="146:19" pos:end="146:31">get_se_golomb</name><argument_list pos:start="146:32" pos:end="146:39">(<argument pos:start="146:33" pos:end="146:38"><expr pos:start="146:33" pos:end="146:38"><operator pos:start="146:33" pos:end="146:33">&amp;</operator><name pos:start="146:34" pos:end="146:38"><name pos:start="146:34" pos:end="146:34">s</name><operator pos:start="146:35" pos:end="146:36">-&gt;</operator><name pos:start="146:37" pos:end="146:38">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="146:41" pos:end="146:41">+</operator> <literal type="number" pos:start="146:43" pos:end="146:46">26</literal> <operator pos:start="146:46" pos:end="146:46">+</operator> <name pos:start="146:48" pos:end="146:59">qp_bd_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="148:5" pos:end="148:58"><expr pos:start="148:5" pos:end="148:57"><name pos:start="148:5" pos:end="148:34"><name pos:start="148:5" pos:end="148:7">pps</name><operator pos:start="148:8" pos:end="148:9">-&gt;</operator><name pos:start="148:10" pos:end="148:31">chroma_qp_index_offset</name><index pos:start="148:32" pos:end="148:34">[<expr pos:start="148:33" pos:end="148:33"><literal type="number" pos:start="148:33" pos:end="148:33">0</literal></expr>]</index></name><operator pos:start="148:35" pos:end="148:35">=</operator> <call pos:start="148:37" pos:end="148:57"><name pos:start="148:37" pos:end="148:49">get_se_golomb</name><argument_list pos:start="148:50" pos:end="148:57">(<argument pos:start="148:51" pos:end="148:56"><expr pos:start="148:51" pos:end="148:56"><operator pos:start="148:51" pos:end="148:51">&amp;</operator><name pos:start="148:52" pos:end="148:56"><name pos:start="148:52" pos:end="148:52">s</name><operator pos:start="148:53" pos:end="148:54">-&gt;</operator><name pos:start="148:55" pos:end="148:56">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="150:5" pos:end="150:65"><expr pos:start="150:5" pos:end="150:64"><name pos:start="150:5" pos:end="150:45"><name pos:start="150:5" pos:end="150:7">pps</name><operator pos:start="150:8" pos:end="150:9">-&gt;</operator><name pos:start="150:10" pos:end="150:45">deblocking_filter_parameters_present</name></name><operator pos:start="150:46" pos:end="150:46">=</operator> <call pos:start="150:48" pos:end="150:64"><name pos:start="150:48" pos:end="150:56">get_bits1</name><argument_list pos:start="150:57" pos:end="150:64">(<argument pos:start="150:58" pos:end="150:63"><expr pos:start="150:58" pos:end="150:63"><operator pos:start="150:58" pos:end="150:58">&amp;</operator><name pos:start="150:59" pos:end="150:63"><name pos:start="150:59" pos:end="150:59">s</name><operator pos:start="150:60" pos:end="150:61">-&gt;</operator><name pos:start="150:62" pos:end="150:63">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="152:5" pos:end="152:51"><expr pos:start="152:5" pos:end="152:50"><name pos:start="152:5" pos:end="152:31"><name pos:start="152:5" pos:end="152:7">pps</name><operator pos:start="152:8" pos:end="152:9">-&gt;</operator><name pos:start="152:10" pos:end="152:31">constrained_intra_pred</name></name><operator pos:start="152:32" pos:end="152:32">=</operator> <call pos:start="152:34" pos:end="152:50"><name pos:start="152:34" pos:end="152:42">get_bits1</name><argument_list pos:start="152:43" pos:end="152:50">(<argument pos:start="152:44" pos:end="152:49"><expr pos:start="152:44" pos:end="152:49"><operator pos:start="152:44" pos:end="152:44">&amp;</operator><name pos:start="152:45" pos:end="152:49"><name pos:start="152:45" pos:end="152:45">s</name><operator pos:start="152:46" pos:end="152:47">-&gt;</operator><name pos:start="152:48" pos:end="152:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="154:5" pos:end="154:55"><expr pos:start="154:5" pos:end="154:54"><name pos:start="154:5" pos:end="154:34"><name pos:start="154:5" pos:end="154:7">pps</name><operator pos:start="154:8" pos:end="154:9">-&gt;</operator><name pos:start="154:10" pos:end="154:34">redundant_pic_cnt_present</name></name> <operator pos:start="154:36" pos:end="154:36">=</operator> <call pos:start="154:38" pos:end="154:54"><name pos:start="154:38" pos:end="154:46">get_bits1</name><argument_list pos:start="154:47" pos:end="154:54">(<argument pos:start="154:48" pos:end="154:53"><expr pos:start="154:48" pos:end="154:53"><operator pos:start="154:48" pos:end="154:48">&amp;</operator><name pos:start="154:49" pos:end="154:53"><name pos:start="154:49" pos:end="154:49">s</name><operator pos:start="154:50" pos:end="154:51">-&gt;</operator><name pos:start="154:52" pos:end="154:53">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="158:5" pos:end="158:31"><expr pos:start="158:5" pos:end="158:30"><name pos:start="158:5" pos:end="158:27"><name pos:start="158:5" pos:end="158:7">pps</name><operator pos:start="158:8" pos:end="158:9">-&gt;</operator><name pos:start="158:10" pos:end="158:27">transform_8x8_mode</name></name><operator pos:start="158:28" pos:end="158:28">=</operator> <literal type="number" pos:start="158:30" pos:end="158:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="160:5" pos:end="160:29"><expr pos:start="160:5" pos:end="160:28"><name pos:start="160:5" pos:end="160:24"><name pos:start="160:5" pos:end="160:5">h</name><operator pos:start="160:6" pos:end="160:7">-&gt;</operator><name pos:start="160:8" pos:end="160:24">dequant_coeff_pps</name></name><operator pos:start="160:25" pos:end="160:25">=</operator> <operator pos:start="160:27" pos:end="160:27">-</operator><literal type="number" pos:start="160:28" pos:end="160:28">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="160:31" pos:end="160:92">//contents of sps/pps can change even if id doesn't, so reinit</comment>

    <expr_stmt pos:start="162:5" pos:end="162:109"><expr pos:start="162:5" pos:end="162:108"><call pos:start="162:5" pos:end="162:108"><name pos:start="162:5" pos:end="162:10">memcpy</name><argument_list pos:start="162:11" pos:end="162:108">(<argument pos:start="162:12" pos:end="162:31"><expr pos:start="162:12" pos:end="162:31"><name pos:start="162:12" pos:end="162:31"><name pos:start="162:12" pos:end="162:14">pps</name><operator pos:start="162:15" pos:end="162:16">-&gt;</operator><name pos:start="162:17" pos:end="162:31">scaling_matrix4</name></name></expr></argument>, <argument pos:start="162:34" pos:end="162:77"><expr pos:start="162:34" pos:end="162:77"><name pos:start="162:34" pos:end="162:60"><name pos:start="162:34" pos:end="162:34">h</name><operator pos:start="162:35" pos:end="162:36">-&gt;</operator><name pos:start="162:37" pos:end="162:47">sps_buffers</name><index pos:start="162:48" pos:end="162:60">[<expr pos:start="162:49" pos:end="162:59"><name pos:start="162:49" pos:end="162:59"><name pos:start="162:49" pos:end="162:51">pps</name><operator pos:start="162:52" pos:end="162:53">-&gt;</operator><name pos:start="162:54" pos:end="162:59">sps_id</name></name></expr>]</index></name><operator pos:start="162:61" pos:end="162:62">-&gt;</operator><name pos:start="162:63" pos:end="162:77">scaling_matrix4</name></expr></argument>, <argument pos:start="162:80" pos:end="162:107"><expr pos:start="162:80" pos:end="162:107"><sizeof pos:start="162:80" pos:end="162:107">sizeof<argument_list pos:start="162:86" pos:end="162:107">(<argument pos:start="162:87" pos:end="162:106"><expr pos:start="162:87" pos:end="162:106"><name pos:start="162:87" pos:end="162:106"><name pos:start="162:87" pos:end="162:89">pps</name><operator pos:start="162:90" pos:end="162:91">-&gt;</operator><name pos:start="162:92" pos:end="162:106">scaling_matrix4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="164:5" pos:end="164:109"><expr pos:start="164:5" pos:end="164:108"><call pos:start="164:5" pos:end="164:108"><name pos:start="164:5" pos:end="164:10">memcpy</name><argument_list pos:start="164:11" pos:end="164:108">(<argument pos:start="164:12" pos:end="164:31"><expr pos:start="164:12" pos:end="164:31"><name pos:start="164:12" pos:end="164:31"><name pos:start="164:12" pos:end="164:14">pps</name><operator pos:start="164:15" pos:end="164:16">-&gt;</operator><name pos:start="164:17" pos:end="164:31">scaling_matrix8</name></name></expr></argument>, <argument pos:start="164:34" pos:end="164:77"><expr pos:start="164:34" pos:end="164:77"><name pos:start="164:34" pos:end="164:60"><name pos:start="164:34" pos:end="164:34">h</name><operator pos:start="164:35" pos:end="164:36">-&gt;</operator><name pos:start="164:37" pos:end="164:47">sps_buffers</name><index pos:start="164:48" pos:end="164:60">[<expr pos:start="164:49" pos:end="164:59"><name pos:start="164:49" pos:end="164:59"><name pos:start="164:49" pos:end="164:51">pps</name><operator pos:start="164:52" pos:end="164:53">-&gt;</operator><name pos:start="164:54" pos:end="164:59">sps_id</name></name></expr>]</index></name><operator pos:start="164:61" pos:end="164:62">-&gt;</operator><name pos:start="164:63" pos:end="164:77">scaling_matrix8</name></expr></argument>, <argument pos:start="164:80" pos:end="164:107"><expr pos:start="164:80" pos:end="164:107"><sizeof pos:start="164:80" pos:end="164:107">sizeof<argument_list pos:start="164:86" pos:end="164:107">(<argument pos:start="164:87" pos:end="164:106"><expr pos:start="164:87" pos:end="164:106"><name pos:start="164:87" pos:end="164:106"><name pos:start="164:87" pos:end="164:89">pps</name><operator pos:start="164:90" pos:end="164:91">-&gt;</operator><name pos:start="164:92" pos:end="164:106">scaling_matrix8</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="168:5" pos:end="168:52"><expr pos:start="168:5" pos:end="168:51"><name pos:start="168:5" pos:end="168:13">bits_left</name> <operator pos:start="168:15" pos:end="168:15">=</operator> <name pos:start="168:17" pos:end="168:26">bit_length</name> <operator pos:start="168:28" pos:end="168:28">-</operator> <call pos:start="168:30" pos:end="168:51"><name pos:start="168:30" pos:end="168:43">get_bits_count</name><argument_list pos:start="168:44" pos:end="168:51">(<argument pos:start="168:45" pos:end="168:50"><expr pos:start="168:45" pos:end="168:50"><operator pos:start="168:45" pos:end="168:45">&amp;</operator><name pos:start="168:46" pos:end="168:50"><name pos:start="168:46" pos:end="168:46">s</name><operator pos:start="168:47" pos:end="168:48">-&gt;</operator><name pos:start="168:49" pos:end="168:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="170:5" pos:end="184:5"><if pos:start="170:5" pos:end="180:5">if <condition pos:start="170:8" pos:end="172:76">(<expr pos:start="170:9" pos:end="172:75"><name pos:start="170:9" pos:end="170:17">bits_left</name> <operator pos:start="170:19" pos:end="170:20">&amp;&amp;</operator> <operator pos:start="170:22" pos:end="170:22">(</operator><name pos:start="170:23" pos:end="170:31">bits_left</name> <operator pos:start="170:33" pos:end="170:33">&gt;</operator> <literal type="number" pos:start="170:35" pos:end="170:35">8</literal> <operator pos:start="170:37" pos:end="170:38">||</operator>

                      <call pos:start="172:23" pos:end="172:50"><name pos:start="172:23" pos:end="172:31">show_bits</name><argument_list pos:start="172:32" pos:end="172:50">(<argument pos:start="172:33" pos:end="172:38"><expr pos:start="172:33" pos:end="172:38"><operator pos:start="172:33" pos:end="172:33">&amp;</operator><name pos:start="172:34" pos:end="172:38"><name pos:start="172:34" pos:end="172:34">s</name><operator pos:start="172:35" pos:end="172:36">-&gt;</operator><name pos:start="172:37" pos:end="172:38">gb</name></name></expr></argument>, <argument pos:start="172:41" pos:end="172:49"><expr pos:start="172:41" pos:end="172:49"><name pos:start="172:41" pos:end="172:49">bits_left</name></expr></argument>)</argument_list></call> <operator pos:start="172:52" pos:end="172:53">!=</operator> <literal type="number" pos:start="172:55" pos:end="172:55">1</literal> <operator pos:start="172:57" pos:end="172:58">&lt;&lt;</operator> <operator pos:start="172:60" pos:end="172:60">(</operator><name pos:start="172:61" pos:end="172:69">bits_left</name> <operator pos:start="172:71" pos:end="172:71">-</operator> <literal type="number" pos:start="172:73" pos:end="172:73">1</literal><operator pos:start="172:74" pos:end="172:74">)</operator><operator pos:start="172:75" pos:end="172:75">)</operator></expr>)</condition> <block pos:start="172:78" pos:end="180:5">{<block_content pos:start="174:9" pos:end="178:62">

        <expr_stmt pos:start="174:9" pos:end="174:51"><expr pos:start="174:9" pos:end="174:50"><name pos:start="174:9" pos:end="174:31"><name pos:start="174:9" pos:end="174:11">pps</name><operator pos:start="174:12" pos:end="174:13">-&gt;</operator><name pos:start="174:14" pos:end="174:31">transform_8x8_mode</name></name><operator pos:start="174:32" pos:end="174:32">=</operator> <call pos:start="174:34" pos:end="174:50"><name pos:start="174:34" pos:end="174:42">get_bits1</name><argument_list pos:start="174:43" pos:end="174:50">(<argument pos:start="174:44" pos:end="174:49"><expr pos:start="174:44" pos:end="174:49"><operator pos:start="174:44" pos:end="174:44">&amp;</operator><name pos:start="174:45" pos:end="174:49"><name pos:start="174:45" pos:end="174:45">s</name><operator pos:start="174:46" pos:end="174:47">-&gt;</operator><name pos:start="174:48" pos:end="174:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="176:9" pos:end="176:116"><expr pos:start="176:9" pos:end="176:115"><call pos:start="176:9" pos:end="176:115"><name pos:start="176:9" pos:end="176:31">decode_scaling_matrices</name><argument_list pos:start="176:32" pos:end="176:115">(<argument pos:start="176:33" pos:end="176:33"><expr pos:start="176:33" pos:end="176:33"><name pos:start="176:33" pos:end="176:33">h</name></expr></argument>, <argument pos:start="176:36" pos:end="176:62"><expr pos:start="176:36" pos:end="176:62"><name pos:start="176:36" pos:end="176:62"><name pos:start="176:36" pos:end="176:36">h</name><operator pos:start="176:37" pos:end="176:38">-&gt;</operator><name pos:start="176:39" pos:end="176:49">sps_buffers</name><index pos:start="176:50" pos:end="176:62">[<expr pos:start="176:51" pos:end="176:61"><name pos:start="176:51" pos:end="176:61"><name pos:start="176:51" pos:end="176:53">pps</name><operator pos:start="176:54" pos:end="176:55">-&gt;</operator><name pos:start="176:56" pos:end="176:61">sps_id</name></name></expr>]</index></name></expr></argument>, <argument pos:start="176:65" pos:end="176:67"><expr pos:start="176:65" pos:end="176:67"><name pos:start="176:65" pos:end="176:67">pps</name></expr></argument>, <argument pos:start="176:70" pos:end="176:70"><expr pos:start="176:70" pos:end="176:70"><literal type="number" pos:start="176:70" pos:end="176:70">0</literal></expr></argument>, <argument pos:start="176:73" pos:end="176:92"><expr pos:start="176:73" pos:end="176:92"><name pos:start="176:73" pos:end="176:92"><name pos:start="176:73" pos:end="176:75">pps</name><operator pos:start="176:76" pos:end="176:77">-&gt;</operator><name pos:start="176:78" pos:end="176:92">scaling_matrix4</name></name></expr></argument>, <argument pos:start="176:95" pos:end="176:114"><expr pos:start="176:95" pos:end="176:114"><name pos:start="176:95" pos:end="176:114"><name pos:start="176:95" pos:end="176:97">pps</name><operator pos:start="176:98" pos:end="176:99">-&gt;</operator><name pos:start="176:100" pos:end="176:114">scaling_matrix8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="178:9" pos:end="178:62"><expr pos:start="178:9" pos:end="178:61"><name pos:start="178:9" pos:end="178:38"><name pos:start="178:9" pos:end="178:11">pps</name><operator pos:start="178:12" pos:end="178:13">-&gt;</operator><name pos:start="178:14" pos:end="178:35">chroma_qp_index_offset</name><index pos:start="178:36" pos:end="178:38">[<expr pos:start="178:37" pos:end="178:37"><literal type="number" pos:start="178:37" pos:end="178:37">1</literal></expr>]</index></name><operator pos:start="178:39" pos:end="178:39">=</operator> <call pos:start="178:41" pos:end="178:61"><name pos:start="178:41" pos:end="178:53">get_se_golomb</name><argument_list pos:start="178:54" pos:end="178:61">(<argument pos:start="178:55" pos:end="178:60"><expr pos:start="178:55" pos:end="178:60"><operator pos:start="178:55" pos:end="178:55">&amp;</operator><name pos:start="178:56" pos:end="178:60"><name pos:start="178:56" pos:end="178:56">s</name><operator pos:start="178:57" pos:end="178:58">-&gt;</operator><name pos:start="178:59" pos:end="178:60">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="178:64" pos:end="178:94">//second_chroma_qp_index_offset</comment>

    </block_content>}</block></if> <else pos:start="180:7" pos:end="184:5">else <block pos:start="180:12" pos:end="184:5">{<block_content pos:start="182:9" pos:end="182:71">

        <expr_stmt pos:start="182:9" pos:end="182:71"><expr pos:start="182:9" pos:end="182:70"><name pos:start="182:9" pos:end="182:38"><name pos:start="182:9" pos:end="182:11">pps</name><operator pos:start="182:12" pos:end="182:13">-&gt;</operator><name pos:start="182:14" pos:end="182:35">chroma_qp_index_offset</name><index pos:start="182:36" pos:end="182:38">[<expr pos:start="182:37" pos:end="182:37"><literal type="number" pos:start="182:37" pos:end="182:37">1</literal></expr>]</index></name><operator pos:start="182:39" pos:end="182:39">=</operator> <name pos:start="182:41" pos:end="182:70"><name pos:start="182:41" pos:end="182:43">pps</name><operator pos:start="182:44" pos:end="182:45">-&gt;</operator><name pos:start="182:46" pos:end="182:67">chroma_qp_index_offset</name><index pos:start="182:68" pos:end="182:70">[<expr pos:start="182:69" pos:end="182:69"><literal type="number" pos:start="182:69" pos:end="182:69">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="188:5" pos:end="188:82"><expr pos:start="188:5" pos:end="188:81"><call pos:start="188:5" pos:end="188:81"><name pos:start="188:5" pos:end="188:18">build_qp_table</name><argument_list pos:start="188:19" pos:end="188:81">(<argument pos:start="188:20" pos:end="188:22"><expr pos:start="188:20" pos:end="188:22"><name pos:start="188:20" pos:end="188:22">pps</name></expr></argument>, <argument pos:start="188:25" pos:end="188:25"><expr pos:start="188:25" pos:end="188:25"><literal type="number" pos:start="188:25" pos:end="188:25">0</literal></expr></argument>, <argument pos:start="188:28" pos:end="188:57"><expr pos:start="188:28" pos:end="188:57"><name pos:start="188:28" pos:end="188:57"><name pos:start="188:28" pos:end="188:30">pps</name><operator pos:start="188:31" pos:end="188:32">-&gt;</operator><name pos:start="188:33" pos:end="188:54">chroma_qp_index_offset</name><index pos:start="188:55" pos:end="188:57">[<expr pos:start="188:56" pos:end="188:56"><literal type="number" pos:start="188:56" pos:end="188:56">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="188:60" pos:end="188:80"><expr pos:start="188:60" pos:end="188:80"><name pos:start="188:60" pos:end="188:80"><name pos:start="188:60" pos:end="188:60">h</name><operator pos:start="188:61" pos:end="188:62">-&gt;</operator><name pos:start="188:63" pos:end="188:65">sps</name><operator pos:start="188:66" pos:end="188:66">.</operator><name pos:start="188:67" pos:end="188:80">bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="190:5" pos:end="190:82"><expr pos:start="190:5" pos:end="190:81"><call pos:start="190:5" pos:end="190:81"><name pos:start="190:5" pos:end="190:18">build_qp_table</name><argument_list pos:start="190:19" pos:end="190:81">(<argument pos:start="190:20" pos:end="190:22"><expr pos:start="190:20" pos:end="190:22"><name pos:start="190:20" pos:end="190:22">pps</name></expr></argument>, <argument pos:start="190:25" pos:end="190:25"><expr pos:start="190:25" pos:end="190:25"><literal type="number" pos:start="190:25" pos:end="190:25">1</literal></expr></argument>, <argument pos:start="190:28" pos:end="190:57"><expr pos:start="190:28" pos:end="190:57"><name pos:start="190:28" pos:end="190:57"><name pos:start="190:28" pos:end="190:30">pps</name><operator pos:start="190:31" pos:end="190:32">-&gt;</operator><name pos:start="190:33" pos:end="190:54">chroma_qp_index_offset</name><index pos:start="190:55" pos:end="190:57">[<expr pos:start="190:56" pos:end="190:56"><literal type="number" pos:start="190:56" pos:end="190:56">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="190:60" pos:end="190:80"><expr pos:start="190:60" pos:end="190:80"><name pos:start="190:60" pos:end="190:80"><name pos:start="190:60" pos:end="190:60">h</name><operator pos:start="190:61" pos:end="190:62">-&gt;</operator><name pos:start="190:63" pos:end="190:65">sps</name><operator pos:start="190:66" pos:end="190:66">.</operator><name pos:start="190:67" pos:end="190:80">bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="192:5" pos:end="194:31"><if pos:start="192:5" pos:end="194:31">if<condition pos:start="192:7" pos:end="192:72">(<expr pos:start="192:8" pos:end="192:71"><name pos:start="192:8" pos:end="192:37"><name pos:start="192:8" pos:end="192:10">pps</name><operator pos:start="192:11" pos:end="192:12">-&gt;</operator><name pos:start="192:13" pos:end="192:34">chroma_qp_index_offset</name><index pos:start="192:35" pos:end="192:37">[<expr pos:start="192:36" pos:end="192:36"><literal type="number" pos:start="192:36" pos:end="192:36">0</literal></expr>]</index></name> <operator pos:start="192:39" pos:end="192:40">!=</operator> <name pos:start="192:42" pos:end="192:71"><name pos:start="192:42" pos:end="192:44">pps</name><operator pos:start="192:45" pos:end="192:46">-&gt;</operator><name pos:start="192:47" pos:end="192:68">chroma_qp_index_offset</name><index pos:start="192:69" pos:end="192:71">[<expr pos:start="192:70" pos:end="192:70"><literal type="number" pos:start="192:70" pos:end="192:70">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="194:9" pos:end="194:31"><block_content pos:start="194:9" pos:end="194:31">

        <expr_stmt pos:start="194:9" pos:end="194:31"><expr pos:start="194:9" pos:end="194:30"><name pos:start="194:9" pos:end="194:27"><name pos:start="194:9" pos:end="194:11">pps</name><operator pos:start="194:12" pos:end="194:13">-&gt;</operator><name pos:start="194:14" pos:end="194:27">chroma_qp_diff</name></name><operator pos:start="194:28" pos:end="194:28">=</operator> <literal type="number" pos:start="194:30" pos:end="194:30">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="198:5" pos:end="224:5"><if pos:start="198:5" pos:end="224:5">if<condition pos:start="198:7" pos:end="198:42">(<expr pos:start="198:8" pos:end="198:41"><name pos:start="198:8" pos:end="198:22"><name pos:start="198:8" pos:end="198:8">s</name><operator pos:start="198:9" pos:end="198:10">-&gt;</operator><name pos:start="198:11" pos:end="198:15">avctx</name><operator pos:start="198:16" pos:end="198:17">-&gt;</operator><name pos:start="198:18" pos:end="198:22">debug</name></name><operator pos:start="198:23" pos:end="198:23">&amp;</operator><name pos:start="198:24" pos:end="198:41">FF_DEBUG_PICT_INFO</name></expr>)</condition><block pos:start="198:43" pos:end="224:5">{<block_content pos:start="200:9" pos:end="222:17">

        <expr_stmt pos:start="200:9" pos:end="222:17"><expr pos:start="200:9" pos:end="222:16"><call pos:start="200:9" pos:end="222:16"><name pos:start="200:9" pos:end="200:14">av_log</name><argument_list pos:start="200:15" pos:end="222:16">(<argument pos:start="200:16" pos:end="200:25"><expr pos:start="200:16" pos:end="200:25"><name pos:start="200:16" pos:end="200:25"><name pos:start="200:16" pos:end="200:16">h</name><operator pos:start="200:17" pos:end="200:18">-&gt;</operator><name pos:start="200:19" pos:end="200:19">s</name><operator pos:start="200:20" pos:end="200:20">.</operator><name pos:start="200:21" pos:end="200:25">avctx</name></name></expr></argument>, <argument pos:start="200:28" pos:end="200:39"><expr pos:start="200:28" pos:end="200:39"><name pos:start="200:28" pos:end="200:39">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="200:42" pos:end="200:117"><expr pos:start="200:42" pos:end="200:117"><literal type="string" pos:start="200:42" pos:end="200:117">"pps:%u sps:%u %s slice_groups:%d ref:%d/%d %s qp:%d/%d/%d/%d %s %s %s %s\n"</literal></expr></argument>,

               <argument pos:start="202:16" pos:end="202:21"><expr pos:start="202:16" pos:end="202:21"><name pos:start="202:16" pos:end="202:21">pps_id</name></expr></argument>, <argument pos:start="202:24" pos:end="202:34"><expr pos:start="202:24" pos:end="202:34"><name pos:start="202:24" pos:end="202:34"><name pos:start="202:24" pos:end="202:26">pps</name><operator pos:start="202:27" pos:end="202:28">-&gt;</operator><name pos:start="202:29" pos:end="202:34">sps_id</name></name></expr></argument>,

               <argument pos:start="204:16" pos:end="204:45"><expr pos:start="204:16" pos:end="204:45"><ternary pos:start="204:16" pos:end="204:45"><condition pos:start="204:16" pos:end="204:27"><expr pos:start="204:16" pos:end="204:25"><name pos:start="204:16" pos:end="204:25"><name pos:start="204:16" pos:end="204:18">pps</name><operator pos:start="204:19" pos:end="204:20">-&gt;</operator><name pos:start="204:21" pos:end="204:25">cabac</name></name></expr> ?</condition><then pos:start="204:29" pos:end="204:35"> <expr pos:start="204:29" pos:end="204:35"><literal type="string" pos:start="204:29" pos:end="204:35">"CABAC"</literal></expr> </then><else pos:start="204:37" pos:end="204:45">: <expr pos:start="204:39" pos:end="204:45"><literal type="string" pos:start="204:39" pos:end="204:45">"CAVLC"</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="206:16" pos:end="206:37"><expr pos:start="206:16" pos:end="206:37"><name pos:start="206:16" pos:end="206:37"><name pos:start="206:16" pos:end="206:18">pps</name><operator pos:start="206:19" pos:end="206:20">-&gt;</operator><name pos:start="206:21" pos:end="206:37">slice_group_count</name></name></expr></argument>,

               <argument pos:start="208:16" pos:end="208:32"><expr pos:start="208:16" pos:end="208:32"><name pos:start="208:16" pos:end="208:32"><name pos:start="208:16" pos:end="208:18">pps</name><operator pos:start="208:19" pos:end="208:20">-&gt;</operator><name pos:start="208:21" pos:end="208:29">ref_count</name><index pos:start="208:30" pos:end="208:32">[<expr pos:start="208:31" pos:end="208:31"><literal type="number" pos:start="208:31" pos:end="208:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="208:35" pos:end="208:51"><expr pos:start="208:35" pos:end="208:51"><name pos:start="208:35" pos:end="208:51"><name pos:start="208:35" pos:end="208:37">pps</name><operator pos:start="208:38" pos:end="208:39">-&gt;</operator><name pos:start="208:40" pos:end="208:48">ref_count</name><index pos:start="208:49" pos:end="208:51">[<expr pos:start="208:50" pos:end="208:50"><literal type="number" pos:start="208:50" pos:end="208:50">1</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="210:16" pos:end="210:51"><expr pos:start="210:16" pos:end="210:51"><ternary pos:start="210:16" pos:end="210:51"><condition pos:start="210:16" pos:end="210:35"><expr pos:start="210:16" pos:end="210:33"><name pos:start="210:16" pos:end="210:33"><name pos:start="210:16" pos:end="210:18">pps</name><operator pos:start="210:19" pos:end="210:20">-&gt;</operator><name pos:start="210:21" pos:end="210:33">weighted_pred</name></name></expr> ?</condition><then pos:start="210:37" pos:end="210:46"> <expr pos:start="210:37" pos:end="210:46"><literal type="string" pos:start="210:37" pos:end="210:46">"weighted"</literal></expr> </then><else pos:start="210:48" pos:end="210:51">: <expr pos:start="210:50" pos:end="210:51"><literal type="string" pos:start="210:50" pos:end="210:51">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="212:16" pos:end="212:27"><expr pos:start="212:16" pos:end="212:27"><name pos:start="212:16" pos:end="212:27"><name pos:start="212:16" pos:end="212:18">pps</name><operator pos:start="212:19" pos:end="212:20">-&gt;</operator><name pos:start="212:21" pos:end="212:27">init_qp</name></name></expr></argument>, <argument pos:start="212:30" pos:end="212:41"><expr pos:start="212:30" pos:end="212:41"><name pos:start="212:30" pos:end="212:41"><name pos:start="212:30" pos:end="212:32">pps</name><operator pos:start="212:33" pos:end="212:34">-&gt;</operator><name pos:start="212:35" pos:end="212:41">init_qs</name></name></expr></argument>, <argument pos:start="212:44" pos:end="212:73"><expr pos:start="212:44" pos:end="212:73"><name pos:start="212:44" pos:end="212:73"><name pos:start="212:44" pos:end="212:46">pps</name><operator pos:start="212:47" pos:end="212:48">-&gt;</operator><name pos:start="212:49" pos:end="212:70">chroma_qp_index_offset</name><index pos:start="212:71" pos:end="212:73">[<expr pos:start="212:72" pos:end="212:72"><literal type="number" pos:start="212:72" pos:end="212:72">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="212:76" pos:end="212:105"><expr pos:start="212:76" pos:end="212:105"><name pos:start="212:76" pos:end="212:105"><name pos:start="212:76" pos:end="212:78">pps</name><operator pos:start="212:79" pos:end="212:80">-&gt;</operator><name pos:start="212:81" pos:end="212:102">chroma_qp_index_offset</name><index pos:start="212:103" pos:end="212:105">[<expr pos:start="212:104" pos:end="212:104"><literal type="number" pos:start="212:104" pos:end="212:104">1</literal></expr>]</index></name></expr></argument>,

               <argument pos:start="214:16" pos:end="214:70"><expr pos:start="214:16" pos:end="214:70"><ternary pos:start="214:16" pos:end="214:70"><condition pos:start="214:16" pos:end="214:58"><expr pos:start="214:16" pos:end="214:56"><name pos:start="214:16" pos:end="214:56"><name pos:start="214:16" pos:end="214:18">pps</name><operator pos:start="214:19" pos:end="214:20">-&gt;</operator><name pos:start="214:21" pos:end="214:56">deblocking_filter_parameters_present</name></name></expr> ?</condition><then pos:start="214:60" pos:end="214:65"> <expr pos:start="214:60" pos:end="214:65"><literal type="string" pos:start="214:60" pos:end="214:65">"LPAR"</literal></expr> </then><else pos:start="214:67" pos:end="214:70">: <expr pos:start="214:69" pos:end="214:70"><literal type="string" pos:start="214:69" pos:end="214:70">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="216:16" pos:end="216:58"><expr pos:start="216:16" pos:end="216:58"><ternary pos:start="216:16" pos:end="216:58"><condition pos:start="216:16" pos:end="216:44"><expr pos:start="216:16" pos:end="216:42"><name pos:start="216:16" pos:end="216:42"><name pos:start="216:16" pos:end="216:18">pps</name><operator pos:start="216:19" pos:end="216:20">-&gt;</operator><name pos:start="216:21" pos:end="216:42">constrained_intra_pred</name></name></expr> ?</condition><then pos:start="216:46" pos:end="216:53"> <expr pos:start="216:46" pos:end="216:53"><literal type="string" pos:start="216:46" pos:end="216:53">"CONSTR"</literal></expr> </then><else pos:start="216:55" pos:end="216:58">: <expr pos:start="216:57" pos:end="216:58"><literal type="string" pos:start="216:57" pos:end="216:58">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="218:16" pos:end="218:59"><expr pos:start="218:16" pos:end="218:59"><ternary pos:start="218:16" pos:end="218:59"><condition pos:start="218:16" pos:end="218:47"><expr pos:start="218:16" pos:end="218:45"><name pos:start="218:16" pos:end="218:45"><name pos:start="218:16" pos:end="218:18">pps</name><operator pos:start="218:19" pos:end="218:20">-&gt;</operator><name pos:start="218:21" pos:end="218:45">redundant_pic_cnt_present</name></name></expr> ?</condition><then pos:start="218:49" pos:end="218:54"> <expr pos:start="218:49" pos:end="218:54"><literal type="string" pos:start="218:49" pos:end="218:54">"REDU"</literal></expr> </then><else pos:start="218:56" pos:end="218:59">: <expr pos:start="218:58" pos:end="218:59"><literal type="string" pos:start="218:58" pos:end="218:59">""</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="220:16" pos:end="220:54"><expr pos:start="220:16" pos:end="220:54"><ternary pos:start="220:16" pos:end="220:54"><condition pos:start="220:16" pos:end="220:40"><expr pos:start="220:16" pos:end="220:38"><name pos:start="220:16" pos:end="220:38"><name pos:start="220:16" pos:end="220:18">pps</name><operator pos:start="220:19" pos:end="220:20">-&gt;</operator><name pos:start="220:21" pos:end="220:38">transform_8x8_mode</name></name></expr> ?</condition><then pos:start="220:42" pos:end="220:49"> <expr pos:start="220:42" pos:end="220:49"><literal type="string" pos:start="220:42" pos:end="220:49">"8x8DCT"</literal></expr> </then><else pos:start="220:51" pos:end="220:54">: <expr pos:start="220:53" pos:end="220:54"><literal type="string" pos:start="220:53" pos:end="220:54">""</literal></expr></else></ternary></expr></argument>

               )</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="228:5" pos:end="228:36"><expr pos:start="228:5" pos:end="228:35"><call pos:start="228:5" pos:end="228:35"><name pos:start="228:5" pos:end="228:11">av_free</name><argument_list pos:start="228:12" pos:end="228:35">(<argument pos:start="228:13" pos:end="228:34"><expr pos:start="228:13" pos:end="228:34"><name pos:start="228:13" pos:end="228:34"><name pos:start="228:13" pos:end="228:13">h</name><operator pos:start="228:14" pos:end="228:15">-&gt;</operator><name pos:start="228:16" pos:end="228:26">pps_buffers</name><index pos:start="228:27" pos:end="228:34">[<expr pos:start="228:28" pos:end="228:33"><name pos:start="228:28" pos:end="228:33">pps_id</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="230:5" pos:end="230:32"><expr pos:start="230:5" pos:end="230:31"><name pos:start="230:5" pos:end="230:26"><name pos:start="230:5" pos:end="230:5">h</name><operator pos:start="230:6" pos:end="230:7">-&gt;</operator><name pos:start="230:8" pos:end="230:18">pps_buffers</name><index pos:start="230:19" pos:end="230:26">[<expr pos:start="230:20" pos:end="230:25"><name pos:start="230:20" pos:end="230:25">pps_id</name></expr>]</index></name><operator pos:start="230:27" pos:end="230:27">=</operator> <name pos:start="230:29" pos:end="230:31">pps</name></expr>;</expr_stmt>

    <return pos:start="232:5" pos:end="232:13">return <expr pos:start="232:12" pos:end="232:12"><literal type="number" pos:start="232:12" pos:end="232:12">0</literal></expr>;</return>

<label pos:start="234:1" pos:end="234:5"><name pos:start="234:1" pos:end="234:4">fail</name>:</label>

    <expr_stmt pos:start="236:5" pos:end="236:17"><expr pos:start="236:5" pos:end="236:16"><call pos:start="236:5" pos:end="236:16"><name pos:start="236:5" pos:end="236:11">av_free</name><argument_list pos:start="236:12" pos:end="236:16">(<argument pos:start="236:13" pos:end="236:15"><expr pos:start="236:13" pos:end="236:15"><name pos:start="236:13" pos:end="236:15">pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="238:5" pos:end="238:14">return <expr pos:start="238:12" pos:end="238:13"><operator pos:start="238:12" pos:end="238:12">-</operator><literal type="number" pos:start="238:13" pos:end="238:13">1</literal></expr>;</return>

</block_content>}</block></function></unit>
