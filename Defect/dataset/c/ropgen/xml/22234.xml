<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22234.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:17"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">qemu_irq</name> <modifier pos:start="1:17" pos:end="1:17">*</modifier></type><name pos:start="1:18" pos:end="1:34">ppce500_init_mpic</name><parameter_list pos:start="1:35" pos:end="3:51">(<parameter pos:start="1:36" pos:end="1:56"><decl pos:start="1:36" pos:end="1:56"><type pos:start="1:36" pos:end="1:56"><name pos:start="1:36" pos:end="1:48">PPCE500Params</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:56">params</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:76"><decl pos:start="1:59" pos:end="1:76"><type pos:start="1:59" pos:end="1:76"><name pos:start="1:59" pos:end="1:70">MemoryRegion</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:76">ccsr</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:50"><decl pos:start="3:36" pos:end="3:50"><type pos:start="3:36" pos:end="3:50"><name pos:start="3:36" pos:end="3:43">qemu_irq</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier><modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">irqs</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="93:1">{<block_content pos:start="7:5" pos:end="91:16">

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">QemuOptsList</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:22">list</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">qemu_irq</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:18">mpic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">DeviceState</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">dev</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">SysBusDevice</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:19">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:32"><expr pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:8">mpic</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <call pos:start="19:12" pos:end="19:31"><name pos:start="19:12" pos:end="19:16">g_new</name><argument_list pos:start="19:17" pos:end="19:31">(<argument pos:start="19:18" pos:end="19:25"><expr pos:start="19:18" pos:end="19:25"><name pos:start="19:18" pos:end="19:25">qemu_irq</name></expr></argument>, <argument pos:start="19:28" pos:end="19:30"><expr pos:start="19:28" pos:end="19:30"><literal type="number" pos:start="19:28" pos:end="19:30">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="63:5"><if pos:start="23:5" pos:end="63:5">if <condition pos:start="23:8" pos:end="23:22">(<expr pos:start="23:9" pos:end="23:21"><call pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:19">kvm_enabled</name><argument_list pos:start="23:20" pos:end="23:21">()</argument_list></call></expr>)</condition> <block pos:start="23:24" pos:end="63:5">{<block_content pos:start="25:9" pos:end="61:9">

        <decl_stmt pos:start="25:9" pos:end="25:62"><decl pos:start="25:9" pos:end="25:35"><type pos:start="25:9" pos:end="25:12"><name pos:start="25:9" pos:end="25:12">bool</name></type> <name pos:start="25:14" pos:end="25:28">irqchip_allowed</name> <init pos:start="25:30" pos:end="25:35">= <expr pos:start="25:32" pos:end="25:35"><name pos:start="25:32" pos:end="25:35">true</name></expr></init></decl>, <decl pos:start="25:38" pos:end="25:61"><type ref="prev" pos:start="25:9" pos:end="25:12"/><name pos:start="25:38" pos:end="25:53">irqchip_required</name> <init pos:start="25:55" pos:end="25:61">= <expr pos:start="25:57" pos:end="25:61"><name pos:start="25:57" pos:end="25:61">false</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:41"><expr pos:start="29:9" pos:end="29:40"><name pos:start="29:9" pos:end="29:12">list</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <call pos:start="29:16" pos:end="29:40"><name pos:start="29:16" pos:end="29:29">qemu_find_opts</name><argument_list pos:start="29:30" pos:end="29:40">(<argument pos:start="29:31" pos:end="29:39"><expr pos:start="29:31" pos:end="29:39"><literal type="string" pos:start="29:31" pos:end="29:39">"machine"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="41:9"><if pos:start="31:9" pos:end="41:9">if <condition pos:start="31:12" pos:end="31:39">(<expr pos:start="31:13" pos:end="31:38"><operator pos:start="31:13" pos:end="31:13">!</operator><call pos:start="31:14" pos:end="31:38"><name pos:start="31:14" pos:end="31:25">QTAILQ_EMPTY</name><argument_list pos:start="31:26" pos:end="31:38">(<argument pos:start="31:27" pos:end="31:37"><expr pos:start="31:27" pos:end="31:37"><operator pos:start="31:27" pos:end="31:27">&amp;</operator><name pos:start="31:28" pos:end="31:37"><name pos:start="31:28" pos:end="31:31">list</name><operator pos:start="31:32" pos:end="31:33">-&gt;</operator><name pos:start="31:34" pos:end="31:37">head</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:41" pos:end="41:9">{<block_content pos:start="33:13" pos:end="39:74">

            <expr_stmt pos:start="33:13" pos:end="35:72"><expr pos:start="33:13" pos:end="35:71"><name pos:start="33:13" pos:end="33:27">irqchip_allowed</name> <operator pos:start="33:29" pos:end="33:29">=</operator> <call pos:start="33:31" pos:end="35:71"><name pos:start="33:31" pos:end="33:47">qemu_opt_get_bool</name><argument_list pos:start="33:48" pos:end="35:71">(<argument pos:start="33:49" pos:end="33:73"><expr pos:start="33:49" pos:end="33:73"><call pos:start="33:49" pos:end="33:73"><name pos:start="33:49" pos:end="33:60">QTAILQ_FIRST</name><argument_list pos:start="33:61" pos:end="33:73">(<argument pos:start="33:62" pos:end="33:72"><expr pos:start="33:62" pos:end="33:72"><operator pos:start="33:62" pos:end="33:62">&amp;</operator><name pos:start="33:63" pos:end="33:72"><name pos:start="33:63" pos:end="33:66">list</name><operator pos:start="33:67" pos:end="33:68">-&gt;</operator><name pos:start="33:69" pos:end="33:72">head</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                                <argument pos:start="35:49" pos:end="35:64"><expr pos:start="35:49" pos:end="35:64"><literal type="string" pos:start="35:49" pos:end="35:64">"kernel_irqchip"</literal></expr></argument>, <argument pos:start="35:67" pos:end="35:70"><expr pos:start="35:67" pos:end="35:70"><name pos:start="35:67" pos:end="35:70">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="39:74"><expr pos:start="37:13" pos:end="39:73"><name pos:start="37:13" pos:end="37:28">irqchip_required</name> <operator pos:start="37:30" pos:end="37:30">=</operator> <call pos:start="37:32" pos:end="39:73"><name pos:start="37:32" pos:end="37:48">qemu_opt_get_bool</name><argument_list pos:start="37:49" pos:end="39:73">(<argument pos:start="37:50" pos:end="37:74"><expr pos:start="37:50" pos:end="37:74"><call pos:start="37:50" pos:end="37:74"><name pos:start="37:50" pos:end="37:61">QTAILQ_FIRST</name><argument_list pos:start="37:62" pos:end="37:74">(<argument pos:start="37:63" pos:end="37:73"><expr pos:start="37:63" pos:end="37:73"><operator pos:start="37:63" pos:end="37:63">&amp;</operator><name pos:start="37:64" pos:end="37:73"><name pos:start="37:64" pos:end="37:67">list</name><operator pos:start="37:68" pos:end="37:69">-&gt;</operator><name pos:start="37:70" pos:end="37:73">head</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                                 <argument pos:start="39:50" pos:end="39:65"><expr pos:start="39:50" pos:end="39:65"><literal type="string" pos:start="39:50" pos:end="39:65">"kernel_irqchip"</literal></expr></argument>, <argument pos:start="39:68" pos:end="39:72"><expr pos:start="39:68" pos:end="39:72"><name pos:start="39:68" pos:end="39:72">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:28">(<expr pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:27">irqchip_allowed</name></expr>)</condition> <block pos:start="45:30" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:54">

            <expr_stmt pos:start="47:13" pos:end="47:54"><expr pos:start="47:13" pos:end="47:53"><name pos:start="47:13" pos:end="47:15">dev</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:53"><name pos:start="47:19" pos:end="47:39">ppce500_init_mpic_kvm</name><argument_list pos:start="47:40" pos:end="47:53">(<argument pos:start="47:41" pos:end="47:46"><expr pos:start="47:41" pos:end="47:46"><name pos:start="47:41" pos:end="47:46">params</name></expr></argument>, <argument pos:start="47:49" pos:end="47:52"><expr pos:start="47:49" pos:end="47:52"><name pos:start="47:49" pos:end="47:52">irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="53:9" pos:end="61:9"><if pos:start="53:9" pos:end="61:9">if <condition pos:start="53:12" pos:end="53:37">(<expr pos:start="53:13" pos:end="53:36"><name pos:start="53:13" pos:end="53:28">irqchip_required</name> <operator pos:start="53:30" pos:end="53:31">&amp;&amp;</operator> <operator pos:start="53:33" pos:end="53:33">!</operator><name pos:start="53:34" pos:end="53:36">dev</name></expr>)</condition> <block pos:start="53:39" pos:end="61:9">{<block_content pos:start="55:13" pos:end="59:20">

            <expr_stmt pos:start="55:13" pos:end="57:30"><expr pos:start="55:13" pos:end="57:29"><call pos:start="55:13" pos:end="57:29"><name pos:start="55:13" pos:end="55:19">fprintf</name><argument_list pos:start="55:20" pos:end="57:29">(<argument pos:start="55:21" pos:end="55:26"><expr pos:start="55:21" pos:end="55:26"><name pos:start="55:21" pos:end="55:26">stderr</name></expr></argument>, <argument pos:start="55:29" pos:end="55:69"><expr pos:start="55:29" pos:end="55:69"><literal type="string" pos:start="55:29" pos:end="55:69">"%s: irqchip requested but unavailable\n"</literal></expr></argument>,

                    <argument pos:start="57:21" pos:end="57:28"><expr pos:start="57:21" pos:end="57:28"><name pos:start="57:21" pos:end="57:28">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:20"><expr pos:start="59:13" pos:end="59:19"><call pos:start="59:13" pos:end="59:19"><name pos:start="59:13" pos:end="59:17">abort</name><argument_list pos:start="59:18" pos:end="59:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:13">(<expr pos:start="67:9" pos:end="67:12"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:12">dev</name></expr>)</condition> <block pos:start="67:15" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:51">

        <expr_stmt pos:start="69:9" pos:end="69:51"><expr pos:start="69:9" pos:end="69:50"><name pos:start="69:9" pos:end="69:11">dev</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:50"><name pos:start="69:15" pos:end="69:36">ppce500_init_mpic_qemu</name><argument_list pos:start="69:37" pos:end="69:50">(<argument pos:start="69:38" pos:end="69:43"><expr pos:start="69:38" pos:end="69:43"><name pos:start="69:38" pos:end="69:43">params</name></expr></argument>, <argument pos:start="69:46" pos:end="69:49"><expr pos:start="69:46" pos:end="69:49"><name pos:start="69:46" pos:end="69:49">irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="75:5" pos:end="79:5">for <control pos:start="75:9" pos:end="75:29">(<init pos:start="75:10" pos:end="75:15"><expr pos:start="75:10" pos:end="75:14"><name pos:start="75:10" pos:end="75:10">i</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>;</init> <condition pos:start="75:17" pos:end="75:24"><expr pos:start="75:17" pos:end="75:23"><name pos:start="75:17" pos:end="75:17">i</name> <operator pos:start="75:19" pos:end="75:19">&lt;</operator> <literal type="number" pos:start="75:21" pos:end="75:23">256</literal></expr>;</condition> <incr pos:start="75:26" pos:end="75:28"><expr pos:start="75:26" pos:end="75:28"><name pos:start="75:26" pos:end="75:26">i</name><operator pos:start="75:27" pos:end="75:28">++</operator></expr></incr>)</control> <block pos:start="75:31" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:43">

        <expr_stmt pos:start="77:9" pos:end="77:43"><expr pos:start="77:9" pos:end="77:42"><name pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:12">mpic</name><index pos:start="77:13" pos:end="77:15">[<expr pos:start="77:14" pos:end="77:14"><name pos:start="77:14" pos:end="77:14">i</name></expr>]</index></name> <operator pos:start="77:17" pos:end="77:17">=</operator> <call pos:start="77:19" pos:end="77:42"><name pos:start="77:19" pos:end="77:34">qdev_get_gpio_in</name><argument_list pos:start="77:35" pos:end="77:42">(<argument pos:start="77:36" pos:end="77:38"><expr pos:start="77:36" pos:end="77:38"><name pos:start="77:36" pos:end="77:38">dev</name></expr></argument>, <argument pos:start="77:41" pos:end="77:41"><expr pos:start="77:41" pos:end="77:41"><name pos:start="77:41" pos:end="77:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="83:5" pos:end="83:28"><expr pos:start="83:5" pos:end="83:27"><name pos:start="83:5" pos:end="83:5">s</name> <operator pos:start="83:7" pos:end="83:7">=</operator> <call pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:22">SYS_BUS_DEVICE</name><argument_list pos:start="83:23" pos:end="83:27">(<argument pos:start="83:24" pos:end="83:26"><expr pos:start="83:24" pos:end="83:26"><name pos:start="83:24" pos:end="83:26">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="87:51"><expr pos:start="85:5" pos:end="87:50"><call pos:start="85:5" pos:end="87:50"><name pos:start="85:5" pos:end="85:31">memory_region_add_subregion</name><argument_list pos:start="85:32" pos:end="87:50">(<argument pos:start="85:33" pos:end="85:36"><expr pos:start="85:33" pos:end="85:36"><name pos:start="85:33" pos:end="85:36">ccsr</name></expr></argument>, <argument pos:start="85:39" pos:end="85:62"><expr pos:start="85:39" pos:end="85:62"><name pos:start="85:39" pos:end="85:62">MPC8544_MPIC_REGS_OFFSET</name></expr></argument>,

                                <argument pos:start="87:33" pos:end="87:49"><expr pos:start="87:33" pos:end="87:49"><name pos:start="87:33" pos:end="87:42"><name pos:start="87:33" pos:end="87:33">s</name><operator pos:start="87:34" pos:end="87:35">-&gt;</operator><name pos:start="87:36" pos:end="87:39">mmio</name><index pos:start="87:40" pos:end="87:42">[<expr pos:start="87:41" pos:end="87:41"><literal type="number" pos:start="87:41" pos:end="87:41">0</literal></expr>]</index></name><operator pos:start="87:43" pos:end="87:43">.</operator><name pos:start="87:44" pos:end="87:49">memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="91:5" pos:end="91:16">return <expr pos:start="91:12" pos:end="91:15"><name pos:start="91:12" pos:end="91:15">mpic</name></expr>;</return>

</block_content>}</block></function>
</unit>
