<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14377.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">vnc_update_client</name><parameter_list pos:start="1:29" pos:end="1:57">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:37">VncState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">vs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:56">has_dirty</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:13">

    <if_stmt pos:start="5:5" pos:end="115:5"><if pos:start="5:5" pos:end="115:5">if <condition pos:start="5:8" pos:end="5:43">(<expr pos:start="5:9" pos:end="5:42"><name pos:start="5:9" pos:end="5:23"><name pos:start="5:9" pos:end="5:10">vs</name><operator pos:start="5:11" pos:end="5:12">-&gt;</operator><name pos:start="5:13" pos:end="5:23">need_update</name></name> <operator pos:start="5:25" pos:end="5:26">&amp;&amp;</operator> <name pos:start="5:28" pos:end="5:36"><name pos:start="5:28" pos:end="5:29">vs</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:36">csock</name></name> <operator pos:start="5:38" pos:end="5:39">!=</operator> <operator pos:start="5:41" pos:end="5:41">-</operator><literal type="number" pos:start="5:42" pos:end="5:42">1</literal></expr>)</condition> <block pos:start="5:45" pos:end="115:5">{<block_content pos:start="7:9" pos:end="113:17">

        <decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:20"><name pos:start="7:9" pos:end="7:18">VncDisplay</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:22">vd</name> <init pos:start="7:24" pos:end="7:31">= <expr pos:start="7:26" pos:end="7:31"><name pos:start="7:26" pos:end="7:31"><name pos:start="7:26" pos:end="7:27">vs</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:31">vd</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:20"><decl pos:start="9:9" pos:end="9:19"><type pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:14">VncJob</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">job</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:14"><decl pos:start="11:9" pos:end="11:13"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:13">y</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:26"><decl pos:start="13:9" pos:end="13:17"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:17">width</name></decl>, <decl pos:start="13:20" pos:end="13:25"><type ref="prev" pos:start="13:9" pos:end="13:11"/><name pos:start="13:20" pos:end="13:25">height</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:18"><decl pos:start="15:9" pos:end="15:17"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:13">n</name> <init pos:start="15:15" pos:end="15:17">= <expr pos:start="15:17" pos:end="15:17"><literal type="number" pos:start="15:17" pos:end="15:17">0</literal></expr></init></decl>;</decl_stmt>





        <if_stmt pos:start="21:9" pos:end="25:21"><if pos:start="21:9" pos:end="25:21">if <condition pos:start="21:12" pos:end="21:69">(<expr pos:start="21:13" pos:end="21:68"><name pos:start="21:13" pos:end="21:29"><name pos:start="21:13" pos:end="21:14">vs</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:22">output</name><operator pos:start="21:23" pos:end="21:23">.</operator><name pos:start="21:24" pos:end="21:29">offset</name></name> <operator pos:start="21:31" pos:end="21:32">&amp;&amp;</operator> <operator pos:start="21:34" pos:end="21:34">!</operator><name pos:start="21:35" pos:end="21:47"><name pos:start="21:35" pos:end="21:36">vs</name><operator pos:start="21:37" pos:end="21:38">-&gt;</operator><name pos:start="21:39" pos:end="21:47">audio_cap</name></name> <operator pos:start="21:49" pos:end="21:50">&amp;&amp;</operator> <operator pos:start="21:52" pos:end="21:52">!</operator><name pos:start="21:53" pos:end="21:68"><name pos:start="21:53" pos:end="21:54">vs</name><operator pos:start="21:55" pos:end="21:56">-&gt;</operator><name pos:start="21:57" pos:end="21:68">force_update</name></name></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:21"><block_content pos:start="25:13" pos:end="25:21">

            <comment type="block" pos:start="23:13" pos:end="23:73">/* kernel send buffers are full -&gt; drop frames to throttle */</comment>

            <return pos:start="25:13" pos:end="25:21">return <expr pos:start="25:20" pos:end="25:20"><literal type="number" pos:start="25:20" pos:end="25:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="29:9" pos:end="31:21"><if pos:start="29:9" pos:end="31:21">if <condition pos:start="29:12" pos:end="29:62">(<expr pos:start="29:13" pos:end="29:61"><operator pos:start="29:13" pos:end="29:13">!</operator><name pos:start="29:14" pos:end="29:22">has_dirty</name> <operator pos:start="29:24" pos:end="29:25">&amp;&amp;</operator> <operator pos:start="29:27" pos:end="29:27">!</operator><name pos:start="29:28" pos:end="29:40"><name pos:start="29:28" pos:end="29:29">vs</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:40">audio_cap</name></name> <operator pos:start="29:42" pos:end="29:43">&amp;&amp;</operator> <operator pos:start="29:45" pos:end="29:45">!</operator><name pos:start="29:46" pos:end="29:61"><name pos:start="29:46" pos:end="29:47">vs</name><operator pos:start="29:48" pos:end="29:49">-&gt;</operator><name pos:start="29:50" pos:end="29:61">force_update</name></name></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:21"><block_content pos:start="31:13" pos:end="31:21">

            <return pos:start="31:13" pos:end="31:21">return <expr pos:start="31:20" pos:end="31:20"><literal type="number" pos:start="31:20" pos:end="31:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="35:9" pos:end="45:11">/*

         * Send screen updates to the vnc client using the server

         * surface and server dirty map.  guest surface updates

         * happening in parallel don't disturb us, the next pass will

         * send them to the client.

         */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:30"><expr pos:start="47:9" pos:end="47:29"><name pos:start="47:9" pos:end="47:11">job</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:29"><name pos:start="47:15" pos:end="47:25">vnc_job_new</name><argument_list pos:start="47:26" pos:end="47:29">(<argument pos:start="47:27" pos:end="47:28"><expr pos:start="47:27" pos:end="47:28"><name pos:start="47:27" pos:end="47:28">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:74"><expr pos:start="51:9" pos:end="51:73"><name pos:start="51:9" pos:end="51:13">width</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <call pos:start="51:17" pos:end="51:73"><name pos:start="51:17" pos:end="51:19">MIN</name><argument_list pos:start="51:20" pos:end="51:73">(<argument pos:start="51:21" pos:end="51:54"><expr pos:start="51:21" pos:end="51:54"><call pos:start="51:21" pos:end="51:54"><name pos:start="51:21" pos:end="51:42">pixman_image_get_width</name><argument_list pos:start="51:43" pos:end="51:54">(<argument pos:start="51:44" pos:end="51:53"><expr pos:start="51:44" pos:end="51:53"><name pos:start="51:44" pos:end="51:53"><name pos:start="51:44" pos:end="51:45">vd</name><operator pos:start="51:46" pos:end="51:47">-&gt;</operator><name pos:start="51:48" pos:end="51:53">server</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:57" pos:end="51:72"><expr pos:start="51:57" pos:end="51:72"><name pos:start="51:57" pos:end="51:72"><name pos:start="51:57" pos:end="51:58">vs</name><operator pos:start="51:59" pos:end="51:60">-&gt;</operator><name pos:start="51:61" pos:end="51:72">client_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:77"><expr pos:start="53:9" pos:end="53:76"><name pos:start="53:9" pos:end="53:14">height</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <call pos:start="53:18" pos:end="53:76"><name pos:start="53:18" pos:end="53:20">MIN</name><argument_list pos:start="53:21" pos:end="53:76">(<argument pos:start="53:22" pos:end="53:56"><expr pos:start="53:22" pos:end="53:56"><call pos:start="53:22" pos:end="53:56"><name pos:start="53:22" pos:end="53:44">pixman_image_get_height</name><argument_list pos:start="53:45" pos:end="53:56">(<argument pos:start="53:46" pos:end="53:55"><expr pos:start="53:46" pos:end="53:55"><name pos:start="53:46" pos:end="53:55"><name pos:start="53:46" pos:end="53:47">vd</name><operator pos:start="53:48" pos:end="53:49">-&gt;</operator><name pos:start="53:50" pos:end="53:55">server</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:59" pos:end="53:75"><expr pos:start="53:59" pos:end="53:75"><name pos:start="53:59" pos:end="53:75"><name pos:start="53:59" pos:end="53:60">vs</name><operator pos:start="53:61" pos:end="53:62">-&gt;</operator><name pos:start="53:63" pos:end="53:75">client_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="57:9" pos:end="105:9">for <control pos:start="57:13" pos:end="57:36">(<init pos:start="57:14" pos:end="57:19"><expr pos:start="57:14" pos:end="57:18"><name pos:start="57:14" pos:end="57:14">y</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <literal type="number" pos:start="57:18" pos:end="57:18">0</literal></expr>;</init> <condition pos:start="57:21" pos:end="57:31"><expr pos:start="57:21" pos:end="57:30"><name pos:start="57:21" pos:end="57:21">y</name> <operator pos:start="57:23" pos:end="57:23">&lt;</operator> <name pos:start="57:25" pos:end="57:30">height</name></expr>;</condition> <incr pos:start="57:33" pos:end="57:35"><expr pos:start="57:33" pos:end="57:35"><name pos:start="57:33" pos:end="57:33">y</name><operator pos:start="57:34" pos:end="57:35">++</operator></expr></incr>)</control> <block pos:start="57:38" pos:end="105:9">{<block_content pos:start="59:13" pos:end="103:13">

            <decl_stmt pos:start="59:13" pos:end="59:18"><decl pos:start="59:13" pos:end="59:17"><type pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">int</name></type> <name pos:start="59:17" pos:end="59:17">x</name></decl>;</decl_stmt>

            <decl_stmt pos:start="61:13" pos:end="61:28"><decl pos:start="61:13" pos:end="61:27"><type pos:start="61:13" pos:end="61:15"><name pos:start="61:13" pos:end="61:15">int</name></type> <name pos:start="61:17" pos:end="61:22">last_x</name> <init pos:start="61:24" pos:end="61:27">= <expr pos:start="61:26" pos:end="61:27"><operator pos:start="61:26" pos:end="61:26">-</operator><literal type="number" pos:start="61:27" pos:end="61:27">1</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="63:13" pos:end="93:13">for <control pos:start="63:17" pos:end="63:44">(<init pos:start="63:18" pos:end="63:23"><expr pos:start="63:18" pos:end="63:22"><name pos:start="63:18" pos:end="63:18">x</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <literal type="number" pos:start="63:22" pos:end="63:22">0</literal></expr>;</init> <condition pos:start="63:25" pos:end="63:39"><expr pos:start="63:25" pos:end="63:38"><name pos:start="63:25" pos:end="63:25">x</name> <operator pos:start="63:27" pos:end="63:27">&lt;</operator> <name pos:start="63:29" pos:end="63:33">width</name> <operator pos:start="63:35" pos:end="63:35">/</operator> <literal type="number" pos:start="63:37" pos:end="63:38">16</literal></expr>;</condition> <incr pos:start="63:41" pos:end="63:43"><expr pos:start="63:41" pos:end="63:43"><name pos:start="63:41" pos:end="63:41">x</name><operator pos:start="63:42" pos:end="63:43">++</operator></expr></incr>)</control> <block pos:start="63:46" pos:end="93:13">{<block_content pos:start="65:17" pos:end="91:17">

                <if_stmt pos:start="65:17" pos:end="91:17"><if pos:start="65:17" pos:end="73:17">if <condition pos:start="65:20" pos:end="65:56">(<expr pos:start="65:21" pos:end="65:55"><call pos:start="65:21" pos:end="65:55"><name pos:start="65:21" pos:end="65:38">test_and_clear_bit</name><argument_list pos:start="65:39" pos:end="65:55">(<argument pos:start="65:40" pos:end="65:40"><expr pos:start="65:40" pos:end="65:40"><name pos:start="65:40" pos:end="65:40">x</name></expr></argument>, <argument pos:start="65:43" pos:end="65:54"><expr pos:start="65:43" pos:end="65:54"><name pos:start="65:43" pos:end="65:54"><name pos:start="65:43" pos:end="65:44">vs</name><operator pos:start="65:45" pos:end="65:46">-&gt;</operator><name pos:start="65:47" pos:end="65:51">dirty</name><index pos:start="65:52" pos:end="65:54">[<expr pos:start="65:53" pos:end="65:53"><name pos:start="65:53" pos:end="65:53">y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:58" pos:end="73:17">{<block_content pos:start="67:21" pos:end="71:21">

                    <if_stmt pos:start="67:21" pos:end="71:21"><if pos:start="67:21" pos:end="71:21">if <condition pos:start="67:24" pos:end="67:37">(<expr pos:start="67:25" pos:end="67:36"><name pos:start="67:25" pos:end="67:30">last_x</name> <operator pos:start="67:32" pos:end="67:33">==</operator> <operator pos:start="67:35" pos:end="67:35">-</operator><literal type="number" pos:start="67:36" pos:end="67:36">1</literal></expr>)</condition> <block pos:start="67:39" pos:end="71:21">{<block_content pos:start="69:25" pos:end="69:35">

                        <expr_stmt pos:start="69:25" pos:end="69:35"><expr pos:start="69:25" pos:end="69:34"><name pos:start="69:25" pos:end="69:30">last_x</name> <operator pos:start="69:32" pos:end="69:32">=</operator> <name pos:start="69:34" pos:end="69:34">x</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="73:19" pos:end="91:17">else <block pos:start="73:24" pos:end="91:17">{<block_content pos:start="75:21" pos:end="89:32">

                    <if_stmt pos:start="75:21" pos:end="87:21"><if pos:start="75:21" pos:end="87:21">if <condition pos:start="75:24" pos:end="75:37">(<expr pos:start="75:25" pos:end="75:36"><name pos:start="75:25" pos:end="75:30">last_x</name> <operator pos:start="75:32" pos:end="75:33">!=</operator> <operator pos:start="75:35" pos:end="75:35">-</operator><literal type="number" pos:start="75:36" pos:end="75:36">1</literal></expr>)</condition> <block pos:start="75:39" pos:end="87:21">{<block_content pos:start="77:25" pos:end="85:68">

                        <decl_stmt pos:start="77:25" pos:end="79:68"><decl pos:start="77:25" pos:end="79:67"><type pos:start="77:25" pos:end="77:27"><name pos:start="77:25" pos:end="77:27">int</name></type> <name pos:start="77:29" pos:end="77:29">h</name> <init pos:start="77:31" pos:end="79:67">= <expr pos:start="77:33" pos:end="79:67"><call pos:start="77:33" pos:end="79:67"><name pos:start="77:33" pos:end="77:59">find_and_clear_dirty_height</name><argument_list pos:start="77:60" pos:end="79:67">(<argument pos:start="77:61" pos:end="77:62"><expr pos:start="77:61" pos:end="77:62"><name pos:start="77:61" pos:end="77:62">vs</name></expr></argument>, <argument pos:start="77:65" pos:end="77:65"><expr pos:start="77:65" pos:end="77:65"><name pos:start="77:65" pos:end="77:65">y</name></expr></argument>, <argument pos:start="77:68" pos:end="77:73"><expr pos:start="77:68" pos:end="77:73"><name pos:start="77:68" pos:end="77:73">last_x</name></expr></argument>, <argument pos:start="77:76" pos:end="77:76"><expr pos:start="77:76" pos:end="77:76"><name pos:start="77:76" pos:end="77:76">x</name></expr></argument>,

                                                            <argument pos:start="79:61" pos:end="79:66"><expr pos:start="79:61" pos:end="79:66"><name pos:start="79:61" pos:end="79:66">height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                        <expr_stmt pos:start="83:25" pos:end="85:68"><expr pos:start="83:25" pos:end="85:67"><name pos:start="83:25" pos:end="83:25">n</name> <operator pos:start="83:27" pos:end="83:28">+=</operator> <call pos:start="83:30" pos:end="85:67"><name pos:start="83:30" pos:end="83:45">vnc_job_add_rect</name><argument_list pos:start="83:46" pos:end="85:67">(<argument pos:start="83:47" pos:end="83:49"><expr pos:start="83:47" pos:end="83:49"><name pos:start="83:47" pos:end="83:49">job</name></expr></argument>, <argument pos:start="83:52" pos:end="83:62"><expr pos:start="83:52" pos:end="83:62"><name pos:start="83:52" pos:end="83:57">last_x</name> <operator pos:start="83:59" pos:end="83:59">*</operator> <literal type="number" pos:start="83:61" pos:end="83:62">16</literal></expr></argument>, <argument pos:start="83:65" pos:end="83:65"><expr pos:start="83:65" pos:end="83:65"><name pos:start="83:65" pos:end="83:65">y</name></expr></argument>,

                                              <argument pos:start="85:47" pos:end="85:63"><expr pos:start="85:47" pos:end="85:63"><operator pos:start="85:47" pos:end="85:47">(</operator><name pos:start="85:48" pos:end="85:48">x</name> <operator pos:start="85:50" pos:end="85:50">-</operator> <name pos:start="85:52" pos:end="85:57">last_x</name><operator pos:start="85:58" pos:end="85:58">)</operator> <operator pos:start="85:60" pos:end="85:60">*</operator> <literal type="number" pos:start="85:62" pos:end="85:63">16</literal></expr></argument>, <argument pos:start="85:66" pos:end="85:66"><expr pos:start="85:66" pos:end="85:66"><name pos:start="85:66" pos:end="85:66">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="89:21" pos:end="89:32"><expr pos:start="89:21" pos:end="89:31"><name pos:start="89:21" pos:end="89:26">last_x</name> <operator pos:start="89:28" pos:end="89:28">=</operator> <operator pos:start="89:30" pos:end="89:30">-</operator><literal type="number" pos:start="89:31" pos:end="89:31">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="95:13" pos:end="103:13"><if pos:start="95:13" pos:end="103:13">if <condition pos:start="95:16" pos:end="95:29">(<expr pos:start="95:17" pos:end="95:28"><name pos:start="95:17" pos:end="95:22">last_x</name> <operator pos:start="95:24" pos:end="95:25">!=</operator> <operator pos:start="95:27" pos:end="95:27">-</operator><literal type="number" pos:start="95:28" pos:end="95:28">1</literal></expr>)</condition> <block pos:start="95:31" pos:end="103:13">{<block_content pos:start="97:17" pos:end="101:60">

                <decl_stmt pos:start="97:17" pos:end="97:78"><decl pos:start="97:17" pos:end="97:77"><type pos:start="97:17" pos:end="97:19"><name pos:start="97:17" pos:end="97:19">int</name></type> <name pos:start="97:21" pos:end="97:21">h</name> <init pos:start="97:23" pos:end="97:77">= <expr pos:start="97:25" pos:end="97:77"><call pos:start="97:25" pos:end="97:77"><name pos:start="97:25" pos:end="97:51">find_and_clear_dirty_height</name><argument_list pos:start="97:52" pos:end="97:77">(<argument pos:start="97:53" pos:end="97:54"><expr pos:start="97:53" pos:end="97:54"><name pos:start="97:53" pos:end="97:54">vs</name></expr></argument>, <argument pos:start="97:57" pos:end="97:57"><expr pos:start="97:57" pos:end="97:57"><name pos:start="97:57" pos:end="97:57">y</name></expr></argument>, <argument pos:start="97:60" pos:end="97:65"><expr pos:start="97:60" pos:end="97:65"><name pos:start="97:60" pos:end="97:65">last_x</name></expr></argument>, <argument pos:start="97:68" pos:end="97:68"><expr pos:start="97:68" pos:end="97:68"><name pos:start="97:68" pos:end="97:68">x</name></expr></argument>, <argument pos:start="97:71" pos:end="97:76"><expr pos:start="97:71" pos:end="97:76"><name pos:start="97:71" pos:end="97:76">height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="99:17" pos:end="101:60"><expr pos:start="99:17" pos:end="101:59"><name pos:start="99:17" pos:end="99:17">n</name> <operator pos:start="99:19" pos:end="99:20">+=</operator> <call pos:start="99:22" pos:end="101:59"><name pos:start="99:22" pos:end="99:37">vnc_job_add_rect</name><argument_list pos:start="99:38" pos:end="101:59">(<argument pos:start="99:39" pos:end="99:41"><expr pos:start="99:39" pos:end="99:41"><name pos:start="99:39" pos:end="99:41">job</name></expr></argument>, <argument pos:start="99:44" pos:end="99:54"><expr pos:start="99:44" pos:end="99:54"><name pos:start="99:44" pos:end="99:49">last_x</name> <operator pos:start="99:51" pos:end="99:51">*</operator> <literal type="number" pos:start="99:53" pos:end="99:54">16</literal></expr></argument>, <argument pos:start="99:57" pos:end="99:57"><expr pos:start="99:57" pos:end="99:57"><name pos:start="99:57" pos:end="99:57">y</name></expr></argument>,

                                      <argument pos:start="101:39" pos:end="101:55"><expr pos:start="101:39" pos:end="101:55"><operator pos:start="101:39" pos:end="101:39">(</operator><name pos:start="101:40" pos:end="101:40">x</name> <operator pos:start="101:42" pos:end="101:42">-</operator> <name pos:start="101:44" pos:end="101:49">last_x</name><operator pos:start="101:50" pos:end="101:50">)</operator> <operator pos:start="101:52" pos:end="101:52">*</operator> <literal type="number" pos:start="101:54" pos:end="101:55">16</literal></expr></argument>, <argument pos:start="101:58" pos:end="101:58"><expr pos:start="101:58" pos:end="101:58"><name pos:start="101:58" pos:end="101:58">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="109:9" pos:end="109:26"><expr pos:start="109:9" pos:end="109:25"><call pos:start="109:9" pos:end="109:25"><name pos:start="109:9" pos:end="109:20">vnc_job_push</name><argument_list pos:start="109:21" pos:end="109:25">(<argument pos:start="109:22" pos:end="109:24"><expr pos:start="109:22" pos:end="109:24"><name pos:start="109:22" pos:end="109:24">job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:29"><expr pos:start="111:9" pos:end="111:28"><name pos:start="111:9" pos:end="111:24"><name pos:start="111:9" pos:end="111:10">vs</name><operator pos:start="111:11" pos:end="111:12">-&gt;</operator><name pos:start="111:13" pos:end="111:24">force_update</name></name> <operator pos:start="111:26" pos:end="111:26">=</operator> <literal type="number" pos:start="111:28" pos:end="111:28">0</literal></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:17">return <expr pos:start="113:16" pos:end="113:16"><name pos:start="113:16" pos:end="113:16">n</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="121:34"><if pos:start="119:5" pos:end="121:34">if <condition pos:start="119:8" pos:end="119:24">(<expr pos:start="119:9" pos:end="119:23"><name pos:start="119:9" pos:end="119:17"><name pos:start="119:9" pos:end="119:10">vs</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:17">csock</name></name> <operator pos:start="119:19" pos:end="119:20">==</operator> <operator pos:start="119:22" pos:end="119:22">-</operator><literal type="number" pos:start="119:23" pos:end="119:23">1</literal></expr>)</condition><block type="pseudo" pos:start="121:9" pos:end="121:34"><block_content pos:start="121:9" pos:end="121:34">

        <expr_stmt pos:start="121:9" pos:end="121:34"><expr pos:start="121:9" pos:end="121:33"><call pos:start="121:9" pos:end="121:33"><name pos:start="121:9" pos:end="121:29">vnc_disconnect_finish</name><argument_list pos:start="121:30" pos:end="121:33">(<argument pos:start="121:31" pos:end="121:32"><expr pos:start="121:31" pos:end="121:32"><name pos:start="121:31" pos:end="121:32">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="125:5" pos:end="125:13">return <expr pos:start="125:12" pos:end="125:12"><literal type="number" pos:start="125:12" pos:end="125:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
