<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19722.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">apply_param_change</name><parameter_list pos:start="1:30" pos:end="1:69">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:61">AVPacket</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:68">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:31">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">size</name> <init pos:start="5:14" pos:end="5:16">= <expr pos:start="5:16" pos:end="5:16"><literal type="number" pos:start="5:16" pos:end="5:16">0</literal></expr></init></decl>, <decl pos:start="5:19" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:19" pos:end="5:21">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:23">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:18">flags</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:75"><expr pos:start="13:5" pos:end="13:74"><name pos:start="13:5" pos:end="13:8">data</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <call pos:start="13:12" pos:end="13:74"><name pos:start="13:12" pos:end="13:34">av_packet_get_side_data</name><argument_list pos:start="13:35" pos:end="13:74">(<argument pos:start="13:36" pos:end="13:40"><expr pos:start="13:36" pos:end="13:40"><name pos:start="13:36" pos:end="13:40">avpkt</name></expr></argument>, <argument pos:start="13:43" pos:end="13:66"><expr pos:start="13:43" pos:end="13:66"><name pos:start="13:43" pos:end="13:66">AV_PKT_DATA_PARAM_CHANGE</name></expr></argument>, <argument pos:start="13:69" pos:end="13:73"><expr pos:start="13:69" pos:end="13:73"><operator pos:start="13:69" pos:end="13:69">&amp;</operator><name pos:start="13:70" pos:end="13:73">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:17"><if pos:start="15:5" pos:end="17:17">if <condition pos:start="15:8" pos:end="15:14">(<expr pos:start="15:9" pos:end="15:13"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:13">data</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:17"><block_content pos:start="17:9" pos:end="17:17">

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:63">(<expr pos:start="21:9" pos:end="21:62"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:36"><name pos:start="21:11" pos:end="21:15">avctx</name><operator pos:start="21:16" pos:end="21:17">-&gt;</operator><name pos:start="21:18" pos:end="21:22">codec</name><operator pos:start="21:23" pos:end="21:24">-&gt;</operator><name pos:start="21:25" pos:end="21:36">capabilities</name></name> <operator pos:start="21:38" pos:end="21:38">&amp;</operator> <name pos:start="21:40" pos:end="21:61">CODEC_CAP_PARAM_CHANGE</name><operator pos:start="21:62" pos:end="21:62">)</operator></expr>)</condition> <block pos:start="21:65" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:31">

        <expr_stmt pos:start="23:9" pos:end="25:72"><expr pos:start="23:9" pos:end="25:71"><call pos:start="23:9" pos:end="25:71"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="25:71">(<argument pos:start="23:16" pos:end="23:20"><expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20">avctx</name></expr></argument>, <argument pos:start="23:23" pos:end="23:34"><expr pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:37" pos:end="25:70"><expr pos:start="23:37" pos:end="25:70"><literal type="string" pos:start="23:37" pos:end="23:78">"This decoder does not support parameter "</literal>

               <literal type="string" pos:start="25:16" pos:end="25:70">"changes, but PARAM_CHANGE side data was sent to it.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:31">return <expr pos:start="27:16" pos:end="27:30"><call pos:start="27:16" pos:end="27:30"><name pos:start="27:16" pos:end="27:22">AVERROR</name><argument_list pos:start="27:23" pos:end="27:30">(<argument pos:start="27:24" pos:end="27:29"><expr pos:start="27:24" pos:end="27:29"><name pos:start="27:24" pos:end="27:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="35:18"><if pos:start="33:5" pos:end="35:18">if <condition pos:start="33:8" pos:end="33:17">(<expr pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:12">size</name> <operator pos:start="33:14" pos:end="33:14">&lt;</operator> <literal type="number" pos:start="33:16" pos:end="33:16">4</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:18"><block_content pos:start="35:9" pos:end="35:18">

        <goto pos:start="35:9" pos:end="35:18">goto <name pos:start="35:14" pos:end="35:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:39"><expr pos:start="39:5" pos:end="39:38"><name pos:start="39:5" pos:end="39:9">flags</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <call pos:start="39:13" pos:end="39:38"><name pos:start="39:13" pos:end="39:31">bytestream_get_le32</name><argument_list pos:start="39:32" pos:end="39:38">(<argument pos:start="39:33" pos:end="39:37"><expr pos:start="39:33" pos:end="39:37"><operator pos:start="39:33" pos:end="39:33">&amp;</operator><name pos:start="39:34" pos:end="39:37">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:14"><expr pos:start="41:5" pos:end="41:13"><name pos:start="41:5" pos:end="41:8">size</name> <operator pos:start="41:10" pos:end="41:11">-=</operator> <literal type="number" pos:start="41:13" pos:end="41:13">4</literal></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="55:5"><if pos:start="45:5" pos:end="55:5">if <condition pos:start="45:8" pos:end="45:56">(<expr pos:start="45:9" pos:end="45:55"><name pos:start="45:9" pos:end="45:13">flags</name> <operator pos:start="45:15" pos:end="45:15">&amp;</operator> <name pos:start="45:17" pos:end="45:55">AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_COUNT</name></expr>)</condition> <block pos:start="45:58" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:18">

        <if_stmt pos:start="47:9" pos:end="49:22"><if pos:start="47:9" pos:end="49:22">if <condition pos:start="47:12" pos:end="47:21">(<expr pos:start="47:13" pos:end="47:20"><name pos:start="47:13" pos:end="47:16">size</name> <operator pos:start="47:18" pos:end="47:18">&lt;</operator> <literal type="number" pos:start="47:20" pos:end="47:20">4</literal></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:22"><block_content pos:start="49:13" pos:end="49:22">

            <goto pos:start="49:13" pos:end="49:22">goto <name pos:start="49:18" pos:end="49:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:53"><expr pos:start="51:9" pos:end="51:52"><name pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:13">avctx</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:23">channels</name></name> <operator pos:start="51:25" pos:end="51:25">=</operator> <call pos:start="51:27" pos:end="51:52"><name pos:start="51:27" pos:end="51:45">bytestream_get_le32</name><argument_list pos:start="51:46" pos:end="51:52">(<argument pos:start="51:47" pos:end="51:51"><expr pos:start="51:47" pos:end="51:51"><operator pos:start="51:47" pos:end="51:47">&amp;</operator><name pos:start="51:48" pos:end="51:51">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:18"><expr pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:12">size</name> <operator pos:start="53:14" pos:end="53:15">-=</operator> <literal type="number" pos:start="53:17" pos:end="53:17">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="57:5" pos:end="67:5"><if pos:start="57:5" pos:end="67:5">if <condition pos:start="57:8" pos:end="57:57">(<expr pos:start="57:9" pos:end="57:56"><name pos:start="57:9" pos:end="57:13">flags</name> <operator pos:start="57:15" pos:end="57:15">&amp;</operator> <name pos:start="57:17" pos:end="57:56">AV_SIDE_DATA_PARAM_CHANGE_CHANNEL_LAYOUT</name></expr>)</condition> <block pos:start="57:59" pos:end="67:5">{<block_content pos:start="59:9" pos:end="65:18">

        <if_stmt pos:start="59:9" pos:end="61:22"><if pos:start="59:9" pos:end="61:22">if <condition pos:start="59:12" pos:end="59:21">(<expr pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:16">size</name> <operator pos:start="59:18" pos:end="59:18">&lt;</operator> <literal type="number" pos:start="59:20" pos:end="59:20">8</literal></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:22"><block_content pos:start="61:13" pos:end="61:22">

            <goto pos:start="61:13" pos:end="61:22">goto <name pos:start="61:18" pos:end="61:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:59"><expr pos:start="63:9" pos:end="63:58"><name pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:13">avctx</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:29">channel_layout</name></name> <operator pos:start="63:31" pos:end="63:31">=</operator> <call pos:start="63:33" pos:end="63:58"><name pos:start="63:33" pos:end="63:51">bytestream_get_le64</name><argument_list pos:start="63:52" pos:end="63:58">(<argument pos:start="63:53" pos:end="63:57"><expr pos:start="63:53" pos:end="63:57"><operator pos:start="63:53" pos:end="63:53">&amp;</operator><name pos:start="63:54" pos:end="63:57">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:18"><expr pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:12">size</name> <operator pos:start="65:14" pos:end="65:15">-=</operator> <literal type="number" pos:start="65:17" pos:end="65:17">8</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="79:5"><if pos:start="69:5" pos:end="79:5">if <condition pos:start="69:8" pos:end="69:54">(<expr pos:start="69:9" pos:end="69:53"><name pos:start="69:9" pos:end="69:13">flags</name> <operator pos:start="69:15" pos:end="69:15">&amp;</operator> <name pos:start="69:17" pos:end="69:53">AV_SIDE_DATA_PARAM_CHANGE_SAMPLE_RATE</name></expr>)</condition> <block pos:start="69:56" pos:end="79:5">{<block_content pos:start="71:9" pos:end="77:18">

        <if_stmt pos:start="71:9" pos:end="73:22"><if pos:start="71:9" pos:end="73:22">if <condition pos:start="71:12" pos:end="71:21">(<expr pos:start="71:13" pos:end="71:20"><name pos:start="71:13" pos:end="71:16">size</name> <operator pos:start="71:18" pos:end="71:18">&lt;</operator> <literal type="number" pos:start="71:20" pos:end="71:20">4</literal></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:22"><block_content pos:start="73:13" pos:end="73:22">

            <goto pos:start="73:13" pos:end="73:22">goto <name pos:start="73:18" pos:end="73:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:56"><expr pos:start="75:9" pos:end="75:55"><name pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:13">avctx</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:26">sample_rate</name></name> <operator pos:start="75:28" pos:end="75:28">=</operator> <call pos:start="75:30" pos:end="75:55"><name pos:start="75:30" pos:end="75:48">bytestream_get_le32</name><argument_list pos:start="75:49" pos:end="75:55">(<argument pos:start="75:50" pos:end="75:54"><expr pos:start="75:50" pos:end="75:54"><operator pos:start="75:50" pos:end="75:50">&amp;</operator><name pos:start="75:51" pos:end="75:54">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:18"><expr pos:start="77:9" pos:end="77:17"><name pos:start="77:9" pos:end="77:12">size</name> <operator pos:start="77:14" pos:end="77:15">-=</operator> <literal type="number" pos:start="77:17" pos:end="77:17">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="81:5" pos:end="99:5"><if pos:start="81:5" pos:end="99:5">if <condition pos:start="81:8" pos:end="81:53">(<expr pos:start="81:9" pos:end="81:52"><name pos:start="81:9" pos:end="81:13">flags</name> <operator pos:start="81:15" pos:end="81:15">&amp;</operator> <name pos:start="81:17" pos:end="81:52">AV_SIDE_DATA_PARAM_CHANGE_DIMENSIONS</name></expr>)</condition> <block pos:start="81:55" pos:end="99:5">{<block_content pos:start="83:9" pos:end="97:23">

        <if_stmt pos:start="83:9" pos:end="85:22"><if pos:start="83:9" pos:end="85:22">if <condition pos:start="83:12" pos:end="83:21">(<expr pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:16">size</name> <operator pos:start="83:18" pos:end="83:18">&lt;</operator> <literal type="number" pos:start="83:20" pos:end="83:20">8</literal></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:22"><block_content pos:start="85:13" pos:end="85:22">

            <goto pos:start="85:13" pos:end="85:22">goto <name pos:start="85:18" pos:end="85:21">fail</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:51"><expr pos:start="87:9" pos:end="87:50"><name pos:start="87:9" pos:end="87:20"><name pos:start="87:9" pos:end="87:13">avctx</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:20">width</name></name>  <operator pos:start="87:23" pos:end="87:23">=</operator> <call pos:start="87:25" pos:end="87:50"><name pos:start="87:25" pos:end="87:43">bytestream_get_le32</name><argument_list pos:start="87:44" pos:end="87:50">(<argument pos:start="87:45" pos:end="87:49"><expr pos:start="87:45" pos:end="87:49"><operator pos:start="87:45" pos:end="87:45">&amp;</operator><name pos:start="87:46" pos:end="87:49">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:51"><expr pos:start="89:9" pos:end="89:50"><name pos:start="89:9" pos:end="89:21"><name pos:start="89:9" pos:end="89:13">avctx</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:21">height</name></name> <operator pos:start="89:23" pos:end="89:23">=</operator> <call pos:start="89:25" pos:end="89:50"><name pos:start="89:25" pos:end="89:43">bytestream_get_le32</name><argument_list pos:start="89:44" pos:end="89:50">(<argument pos:start="89:45" pos:end="89:49"><expr pos:start="89:45" pos:end="89:49"><operator pos:start="89:45" pos:end="89:45">&amp;</operator><name pos:start="89:46" pos:end="89:49">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:18"><expr pos:start="91:9" pos:end="91:17"><name pos:start="91:9" pos:end="91:12">size</name> <operator pos:start="91:14" pos:end="91:15">-=</operator> <literal type="number" pos:start="91:17" pos:end="91:17">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:68"><expr pos:start="93:9" pos:end="93:67"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:67"><name pos:start="93:15" pos:end="93:31">ff_set_dimensions</name><argument_list pos:start="93:32" pos:end="93:67">(<argument pos:start="93:33" pos:end="93:37"><expr pos:start="93:33" pos:end="93:37"><name pos:start="93:33" pos:end="93:37">avctx</name></expr></argument>, <argument pos:start="93:40" pos:end="93:51"><expr pos:start="93:40" pos:end="93:51"><name pos:start="93:40" pos:end="93:51"><name pos:start="93:40" pos:end="93:44">avctx</name><operator pos:start="93:45" pos:end="93:46">-&gt;</operator><name pos:start="93:47" pos:end="93:51">width</name></name></expr></argument>, <argument pos:start="93:54" pos:end="93:66"><expr pos:start="93:54" pos:end="93:66"><name pos:start="93:54" pos:end="93:66"><name pos:start="93:54" pos:end="93:58">avctx</name><operator pos:start="93:59" pos:end="93:60">-&gt;</operator><name pos:start="93:61" pos:end="93:66">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="95:9" pos:end="97:23"><if pos:start="95:9" pos:end="97:23">if <condition pos:start="95:12" pos:end="95:20">(<expr pos:start="95:13" pos:end="95:19"><name pos:start="95:13" pos:end="95:15">ret</name> <operator pos:start="95:17" pos:end="95:17">&lt;</operator> <literal type="number" pos:start="95:19" pos:end="95:19">0</literal></expr>)</condition><block type="pseudo" pos:start="97:13" pos:end="97:23"><block_content pos:start="97:13" pos:end="97:23">

            <return pos:start="97:13" pos:end="97:23">return <expr pos:start="97:20" pos:end="97:22"><name pos:start="97:20" pos:end="97:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

<label pos:start="105:1" pos:end="105:5"><name pos:start="105:1" pos:end="105:4">fail</name>:</label>

    <expr_stmt pos:start="107:5" pos:end="107:71"><expr pos:start="107:5" pos:end="107:70"><call pos:start="107:5" pos:end="107:70"><name pos:start="107:5" pos:end="107:10">av_log</name><argument_list pos:start="107:11" pos:end="107:70">(<argument pos:start="107:12" pos:end="107:16"><expr pos:start="107:12" pos:end="107:16"><name pos:start="107:12" pos:end="107:16">avctx</name></expr></argument>, <argument pos:start="107:19" pos:end="107:30"><expr pos:start="107:19" pos:end="107:30"><name pos:start="107:19" pos:end="107:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="107:33" pos:end="107:69"><expr pos:start="107:33" pos:end="107:69"><literal type="string" pos:start="107:33" pos:end="107:69">"PARAM_CHANGE side data too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="109:5" pos:end="109:31">return <expr pos:start="109:12" pos:end="109:30"><name pos:start="109:12" pos:end="109:30">AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>
</unit>
