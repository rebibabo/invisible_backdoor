<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17965.c" pos:tabs="8"><function pos:start="1:1" pos:end="559:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:10">SwsContext</name> <modifier pos:start="1:12" pos:end="1:12">*</modifier></type><name pos:start="1:13" pos:end="1:25">getSwsContext</name><parameter_list pos:start="1:26" pos:end="3:68">(<parameter pos:start="1:27" pos:end="1:34"><decl pos:start="1:27" pos:end="1:34"><type pos:start="1:27" pos:end="1:34"><name pos:start="1:27" pos:end="1:29">int</name></type> <name pos:start="1:31" pos:end="1:34">srcW</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:44"><decl pos:start="1:37" pos:end="1:44"><type pos:start="1:37" pos:end="1:44"><name pos:start="1:37" pos:end="1:39">int</name></type> <name pos:start="1:41" pos:end="1:44">srcH</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:59"><decl pos:start="1:47" pos:end="1:59"><type pos:start="1:47" pos:end="1:59"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:59">srcFormat</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:69"><decl pos:start="1:62" pos:end="1:69"><type pos:start="1:62" pos:end="1:69"><name pos:start="1:62" pos:end="1:64">int</name></type> <name pos:start="1:66" pos:end="1:69">dstW</name></decl></parameter>, <parameter pos:start="1:72" pos:end="1:79"><decl pos:start="1:72" pos:end="1:79"><type pos:start="1:72" pos:end="1:79"><name pos:start="1:72" pos:end="1:74">int</name></type> <name pos:start="1:76" pos:end="1:79">dstH</name></decl></parameter>, <parameter pos:start="1:82" pos:end="1:94"><decl pos:start="1:82" pos:end="1:94"><type pos:start="1:82" pos:end="1:94"><name pos:start="1:82" pos:end="1:84">int</name></type> <name pos:start="1:86" pos:end="1:94">dstFormat</name></decl></parameter>, <parameter pos:start="1:97" pos:end="1:105"><decl pos:start="1:97" pos:end="1:105"><type pos:start="1:97" pos:end="1:105"><name pos:start="1:97" pos:end="1:99">int</name></type> <name pos:start="1:101" pos:end="1:105">flags</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:45"><decl pos:start="3:26" pos:end="3:45"><type pos:start="3:26" pos:end="3:45"><name pos:start="3:26" pos:end="3:34">SwsFilter</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:45">srcFilter</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:67"><decl pos:start="3:48" pos:end="3:67"><type pos:start="3:48" pos:end="3:67"><name pos:start="3:48" pos:end="3:56">SwsFilter</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:67">dstFilter</name></decl></parameter>)</parameter_list><block pos:start="3:69" pos:end="559:1">{<block_content pos:start="7:9" pos:end="557:17">



	<decl_stmt pos:start="7:9" pos:end="7:22"><decl pos:start="7:9" pos:end="7:21"><type pos:start="7:9" pos:end="7:20"><name pos:start="7:9" pos:end="7:18">SwsContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">c</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:14"><decl pos:start="9:9" pos:end="9:13"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:13">i</name></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="16:0"><decl pos:start="11:9" pos:end="11:55"><type pos:start="11:9" pos:end="11:17"><name pos:start="11:9" pos:end="11:17">SwsFilter</name></type> <name pos:start="11:19" pos:end="11:29">dummyFilter</name><init pos:start="11:30" pos:end="11:55">= <expr pos:start="11:32" pos:end="11:55"><block pos:start="11:32" pos:end="11:55">{<expr pos:start="11:33" pos:end="11:36"><name pos:start="11:33" pos:end="11:36">NULL</name></expr>, <expr pos:start="11:39" pos:end="11:42"><name pos:start="11:39" pos:end="11:42">NULL</name></expr>, <expr pos:start="11:45" pos:end="11:48"><name pos:start="11:45" pos:end="11:48">NULL</name></expr>, <expr pos:start="11:51" pos:end="11:54"><name pos:start="11:51" pos:end="11:54">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="15:1" pos:end="15:15">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:15">ARCH_X86</name></cpp:ifdef>

	<if_stmt pos:start="17:9" pos:end="22:0"><if pos:start="17:9" pos:end="22:0">if<condition pos:start="17:11" pos:end="17:27">(<expr pos:start="17:12" pos:end="17:26"><name pos:start="17:12" pos:end="17:26"><name pos:start="17:12" pos:end="17:19">gCpuCaps</name><operator pos:start="17:20" pos:end="17:20">.</operator><name pos:start="17:21" pos:end="17:26">hasMMX</name></name></expr>)</condition><block type="pseudo" pos:start="19:17" pos:end="22:0"><block_content pos:start="19:17" pos:end="22:0">

		<asm pos:start="19:17" pos:end="22:0">asm <specifier pos:start="19:21" pos:end="19:28">volatile</specifier>("emms\n\t"::: "memory");</asm></block_content></block></if></if_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>



	<if_stmt pos:start="25:9" pos:end="25:39"><if pos:start="25:9" pos:end="25:39">if<condition pos:start="25:11" pos:end="25:25">(<expr pos:start="25:12" pos:end="25:24"><name pos:start="25:12" pos:end="25:18">swScale</name><operator pos:start="25:19" pos:end="25:20">==</operator><name pos:start="25:21" pos:end="25:24">NULL</name></expr>)</condition><block type="pseudo" pos:start="25:27" pos:end="25:39"><block_content pos:start="25:27" pos:end="25:39"> <expr_stmt pos:start="25:27" pos:end="25:39"><expr pos:start="25:27" pos:end="25:38"><call pos:start="25:27" pos:end="25:38"><name pos:start="25:27" pos:end="25:36">globalInit</name><argument_list pos:start="25:37" pos:end="25:38">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<comment type="block" pos:start="29:9" pos:end="29:26">/* sanity check */</comment>

	<if_stmt pos:start="31:9" pos:end="31:61"><if pos:start="31:9" pos:end="31:61">if<condition pos:start="31:11" pos:end="31:48">(<expr pos:start="31:12" pos:end="31:47"><name pos:start="31:12" pos:end="31:15">srcW</name><operator pos:start="31:16" pos:end="31:16">&lt;</operator><literal type="number" pos:start="31:17" pos:end="31:17">4</literal> <operator pos:start="31:19" pos:end="31:20">||</operator> <name pos:start="31:22" pos:end="31:25">srcH</name><operator pos:start="31:26" pos:end="31:26">&lt;</operator><literal type="number" pos:start="31:27" pos:end="31:27">1</literal> <operator pos:start="31:29" pos:end="31:30">||</operator> <name pos:start="31:32" pos:end="31:35">dstW</name><operator pos:start="31:36" pos:end="31:36">&lt;</operator><literal type="number" pos:start="31:37" pos:end="31:37">8</literal> <operator pos:start="31:39" pos:end="31:40">||</operator> <name pos:start="31:42" pos:end="31:45">dstH</name><operator pos:start="31:46" pos:end="31:46">&lt;</operator><literal type="number" pos:start="31:47" pos:end="31:47">1</literal></expr>)</condition><block type="pseudo" pos:start="31:50" pos:end="31:61"><block_content pos:start="31:50" pos:end="31:61"> <return pos:start="31:50" pos:end="31:61">return <expr pos:start="31:57" pos:end="31:60"><name pos:start="31:57" pos:end="31:60">NULL</name></expr>;</return></block_content></block></if></if_stmt> <comment type="line" pos:start="31:63" pos:end="31:162">//FIXME check if these are enough and try to lowwer them after fixing the relevant parts of the code</comment>

	

<comment type="line" pos:start="35:1" pos:end="35:50">//	if(!isSupportedIn(srcFormat)) return NULL;</comment>

<comment type="line" pos:start="37:1" pos:end="37:51">//	if(!isSupportedOut(dstFormat)) return NULL;</comment>



	<if_stmt pos:start="41:9" pos:end="41:47"><if pos:start="41:9" pos:end="41:47">if<condition pos:start="41:11" pos:end="41:22">(<expr pos:start="41:12" pos:end="41:21"><operator pos:start="41:12" pos:end="41:12">!</operator><name pos:start="41:13" pos:end="41:21">dstFilter</name></expr>)</condition><block type="pseudo" pos:start="41:24" pos:end="41:47"><block_content pos:start="41:24" pos:end="41:47"> <expr_stmt pos:start="41:24" pos:end="41:47"><expr pos:start="41:24" pos:end="41:46"><name pos:start="41:24" pos:end="41:32">dstFilter</name><operator pos:start="41:33" pos:end="41:33">=</operator> <operator pos:start="41:35" pos:end="41:35">&amp;</operator><name pos:start="41:36" pos:end="41:46">dummyFilter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt pos:start="43:9" pos:end="43:47"><if pos:start="43:9" pos:end="43:47">if<condition pos:start="43:11" pos:end="43:22">(<expr pos:start="43:12" pos:end="43:21"><operator pos:start="43:12" pos:end="43:12">!</operator><name pos:start="43:13" pos:end="43:21">srcFilter</name></expr>)</condition><block type="pseudo" pos:start="43:24" pos:end="43:47"><block_content pos:start="43:24" pos:end="43:47"> <expr_stmt pos:start="43:24" pos:end="43:47"><expr pos:start="43:24" pos:end="43:46"><name pos:start="43:24" pos:end="43:32">srcFilter</name><operator pos:start="43:33" pos:end="43:33">=</operator> <operator pos:start="43:35" pos:end="43:35">&amp;</operator><name pos:start="43:36" pos:end="43:46">dummyFilter</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<expr_stmt pos:start="47:9" pos:end="47:44"><expr pos:start="47:9" pos:end="47:43"><name pos:start="47:9" pos:end="47:9">c</name><operator pos:start="47:10" pos:end="47:10">=</operator> <call pos:start="47:12" pos:end="47:43"><name pos:start="47:12" pos:end="47:19">memalign</name><argument_list pos:start="47:20" pos:end="47:43">(<argument pos:start="47:21" pos:end="47:22"><expr pos:start="47:21" pos:end="47:22"><literal type="number" pos:start="47:21" pos:end="47:22">64</literal></expr></argument>, <argument pos:start="47:25" pos:end="47:42"><expr pos:start="47:25" pos:end="47:42"><sizeof pos:start="47:25" pos:end="47:42">sizeof<argument_list pos:start="47:31" pos:end="47:42">(<argument pos:start="47:32" pos:end="47:41"><expr pos:start="47:32" pos:end="47:41"><name pos:start="47:32" pos:end="47:41">SwsContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="49:9" pos:end="49:41"><expr pos:start="49:9" pos:end="49:40"><call pos:start="49:9" pos:end="49:40"><name pos:start="49:9" pos:end="49:14">memset</name><argument_list pos:start="49:15" pos:end="49:40">(<argument pos:start="49:16" pos:end="49:16"><expr pos:start="49:16" pos:end="49:16"><name pos:start="49:16" pos:end="49:16">c</name></expr></argument>, <argument pos:start="49:19" pos:end="49:19"><expr pos:start="49:19" pos:end="49:19"><literal type="number" pos:start="49:19" pos:end="49:19">0</literal></expr></argument>, <argument pos:start="49:22" pos:end="49:39"><expr pos:start="49:22" pos:end="49:39"><sizeof pos:start="49:22" pos:end="49:39">sizeof<argument_list pos:start="49:28" pos:end="49:39">(<argument pos:start="49:29" pos:end="49:38"><expr pos:start="49:29" pos:end="49:38"><name pos:start="49:29" pos:end="49:38">SwsContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="53:9" pos:end="53:22"><expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:9">c</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:15">srcW</name></name><operator pos:start="53:16" pos:end="53:16">=</operator> <name pos:start="53:18" pos:end="53:21">srcW</name></expr>;</expr_stmt>

	<expr_stmt pos:start="55:9" pos:end="55:22"><expr pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:15"><name pos:start="55:9" pos:end="55:9">c</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:15">srcH</name></name><operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:21">srcH</name></expr>;</expr_stmt>

	<expr_stmt pos:start="57:9" pos:end="57:22"><expr pos:start="57:9" pos:end="57:21"><name pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:9">c</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:15">dstW</name></name><operator pos:start="57:16" pos:end="57:16">=</operator> <name pos:start="57:18" pos:end="57:21">dstW</name></expr>;</expr_stmt>

	<expr_stmt pos:start="59:9" pos:end="59:22"><expr pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:9">c</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:15">dstH</name></name><operator pos:start="59:16" pos:end="59:16">=</operator> <name pos:start="59:18" pos:end="59:21">dstH</name></expr>;</expr_stmt>

	<expr_stmt pos:start="61:9" pos:end="61:50"><expr pos:start="61:9" pos:end="61:49"><name pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:9">c</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:18">lumXInc</name></name><operator pos:start="61:19" pos:end="61:19">=</operator> <operator pos:start="61:21" pos:end="61:21">(</operator><operator pos:start="61:22" pos:end="61:22">(</operator><name pos:start="61:23" pos:end="61:26">srcW</name><operator pos:start="61:27" pos:end="61:28">&lt;&lt;</operator><literal type="number" pos:start="61:29" pos:end="61:30">16</literal><operator pos:start="61:31" pos:end="61:31">)</operator> <operator pos:start="61:33" pos:end="61:33">+</operator> <operator pos:start="61:35" pos:end="61:35">(</operator><name pos:start="61:36" pos:end="61:39">dstW</name><operator pos:start="61:40" pos:end="61:41">&gt;&gt;</operator><literal type="number" pos:start="61:42" pos:end="61:42">1</literal><operator pos:start="61:43" pos:end="61:43">)</operator><operator pos:start="61:44" pos:end="61:44">)</operator><operator pos:start="61:45" pos:end="61:45">/</operator><name pos:start="61:46" pos:end="61:49">dstW</name></expr>;</expr_stmt>

	<expr_stmt pos:start="63:9" pos:end="63:50"><expr pos:start="63:9" pos:end="63:49"><name pos:start="63:9" pos:end="63:18"><name pos:start="63:9" pos:end="63:9">c</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:18">lumYInc</name></name><operator pos:start="63:19" pos:end="63:19">=</operator> <operator pos:start="63:21" pos:end="63:21">(</operator><operator pos:start="63:22" pos:end="63:22">(</operator><name pos:start="63:23" pos:end="63:26">srcH</name><operator pos:start="63:27" pos:end="63:28">&lt;&lt;</operator><literal type="number" pos:start="63:29" pos:end="63:30">16</literal><operator pos:start="63:31" pos:end="63:31">)</operator> <operator pos:start="63:33" pos:end="63:33">+</operator> <operator pos:start="63:35" pos:end="63:35">(</operator><name pos:start="63:36" pos:end="63:39">dstH</name><operator pos:start="63:40" pos:end="63:41">&gt;&gt;</operator><literal type="number" pos:start="63:42" pos:end="63:42">1</literal><operator pos:start="63:43" pos:end="63:43">)</operator><operator pos:start="63:44" pos:end="63:44">)</operator><operator pos:start="63:45" pos:end="63:45">/</operator><name pos:start="63:46" pos:end="63:49">dstH</name></expr>;</expr_stmt>

	<expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:9">c</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:16">flags</name></name><operator pos:start="65:17" pos:end="65:17">=</operator> <name pos:start="65:19" pos:end="65:23">flags</name></expr>;</expr_stmt>

	<expr_stmt pos:start="67:9" pos:end="67:32"><expr pos:start="67:9" pos:end="67:31"><name pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:9">c</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:20">dstFormat</name></name><operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:31">dstFormat</name></expr>;</expr_stmt>

	<expr_stmt pos:start="69:9" pos:end="69:32"><expr pos:start="69:9" pos:end="69:31"><name pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:9">c</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:20">srcFormat</name></name><operator pos:start="69:21" pos:end="69:21">=</operator> <name pos:start="69:23" pos:end="69:31">srcFormat</name></expr>;</expr_stmt>



	<if_stmt pos:start="73:9" pos:end="93:35"><if pos:start="73:9" pos:end="89:9">if<condition pos:start="73:11" pos:end="73:27">(<expr pos:start="73:12" pos:end="73:26"><name pos:start="73:12" pos:end="73:26"><name pos:start="73:12" pos:end="73:18">cpuCaps</name><operator pos:start="73:19" pos:end="73:19">.</operator><name pos:start="73:20" pos:end="73:26">hasMMX2</name></name></expr>)</condition>

	<block pos:start="75:9" pos:end="89:9">{<block_content pos:start="77:17" pos:end="87:17">

		<expr_stmt pos:start="77:17" pos:end="77:88"><expr pos:start="77:17" pos:end="77:87"><name pos:start="77:17" pos:end="77:32"><name pos:start="77:17" pos:end="77:17">c</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:32">canMMX2BeUsed</name></name><operator pos:start="77:33" pos:end="77:33">=</operator> <ternary pos:start="77:35" pos:end="77:87"><condition pos:start="77:35" pos:end="77:81"><expr pos:start="77:35" pos:end="77:79"><operator pos:start="77:35" pos:end="77:35">(</operator><name pos:start="77:36" pos:end="77:39">dstW</name> <operator pos:start="77:41" pos:end="77:42">&gt;=</operator><name pos:start="77:43" pos:end="77:46">srcW</name> <operator pos:start="77:48" pos:end="77:49">&amp;&amp;</operator> <operator pos:start="77:51" pos:end="77:51">(</operator><name pos:start="77:52" pos:end="77:55">dstW</name><operator pos:start="77:56" pos:end="77:56">&amp;</operator><literal type="number" pos:start="77:57" pos:end="77:58">31</literal><operator pos:start="77:59" pos:end="77:59">)</operator><operator pos:start="77:60" pos:end="77:61">==</operator><literal type="number" pos:start="77:62" pos:end="77:62">0</literal> <operator pos:start="77:64" pos:end="77:65">&amp;&amp;</operator> <operator pos:start="77:67" pos:end="77:67">(</operator><name pos:start="77:68" pos:end="77:71">srcW</name><operator pos:start="77:72" pos:end="77:72">&amp;</operator><literal type="number" pos:start="77:73" pos:end="77:74">15</literal><operator pos:start="77:75" pos:end="77:75">)</operator><operator pos:start="77:76" pos:end="77:77">==</operator><literal type="number" pos:start="77:78" pos:end="77:78">0</literal><operator pos:start="77:79" pos:end="77:79">)</operator></expr> ?</condition><then pos:start="77:83" pos:end="77:83"> <expr pos:start="77:83" pos:end="77:83"><literal type="number" pos:start="77:83" pos:end="77:83">1</literal></expr> </then><else pos:start="77:85" pos:end="77:87">: <expr pos:start="77:87" pos:end="77:87"><literal type="number" pos:start="77:87" pos:end="77:87">0</literal></expr></else></ternary></expr>;</expr_stmt>

		<if_stmt pos:start="79:17" pos:end="87:17"><if pos:start="79:17" pos:end="87:17">if<condition pos:start="79:19" pos:end="79:97">(<expr pos:start="79:20" pos:end="79:96"><operator pos:start="79:20" pos:end="79:20">!</operator><name pos:start="79:21" pos:end="79:36"><name pos:start="79:21" pos:end="79:21">c</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:36">canMMX2BeUsed</name></name> <operator pos:start="79:38" pos:end="79:39">&amp;&amp;</operator> <name pos:start="79:41" pos:end="79:44">dstW</name> <operator pos:start="79:46" pos:end="79:47">&gt;=</operator><name pos:start="79:48" pos:end="79:51">srcW</name> <operator pos:start="79:53" pos:end="79:54">&amp;&amp;</operator> <operator pos:start="79:56" pos:end="79:56">(</operator><name pos:start="79:57" pos:end="79:60">srcW</name><operator pos:start="79:61" pos:end="79:61">&amp;</operator><literal type="number" pos:start="79:62" pos:end="79:63">15</literal><operator pos:start="79:64" pos:end="79:64">)</operator><operator pos:start="79:65" pos:end="79:66">==</operator><literal type="number" pos:start="79:67" pos:end="79:67">0</literal> <operator pos:start="79:69" pos:end="79:70">&amp;&amp;</operator> <operator pos:start="79:72" pos:end="79:72">(</operator><name pos:start="79:73" pos:end="79:77">flags</name><operator pos:start="79:78" pos:end="79:78">&amp;</operator><name pos:start="79:79" pos:end="79:95">SWS_FAST_BILINEAR</name><operator pos:start="79:96" pos:end="79:96">)</operator></expr>)</condition>

		<block pos:start="81:17" pos:end="87:17">{<block_content pos:start="83:25" pos:end="85:118">

			<if_stmt pos:start="83:25" pos:end="85:118"><if pos:start="83:25" pos:end="85:118">if<condition pos:start="83:27" pos:end="83:48">(<expr pos:start="83:28" pos:end="83:47"><name pos:start="83:28" pos:end="83:32">flags</name><operator pos:start="83:33" pos:end="83:33">&amp;</operator><name pos:start="83:34" pos:end="83:47">SWS_PRINT_INFO</name></expr>)</condition><block type="pseudo" pos:start="85:33" pos:end="85:118"><block_content pos:start="85:33" pos:end="85:118">

				<expr_stmt pos:start="85:33" pos:end="85:118"><expr pos:start="85:33" pos:end="85:117"><call pos:start="85:33" pos:end="85:117"><name pos:start="85:33" pos:end="85:39">fprintf</name><argument_list pos:start="85:40" pos:end="85:117">(<argument pos:start="85:41" pos:end="85:46"><expr pos:start="85:41" pos:end="85:46"><name pos:start="85:41" pos:end="85:46">stderr</name></expr></argument>, <argument pos:start="85:49" pos:end="85:116"><expr pos:start="85:49" pos:end="85:116"><literal type="string" pos:start="85:49" pos:end="85:116">"SwScaler: output Width is not a multiple of 32 -&gt; no MMX2 scaler\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if>

	<else pos:start="91:9" pos:end="93:35">else<block type="pseudo" pos:start="93:17" pos:end="93:35"><block_content pos:start="93:17" pos:end="93:35">

		<expr_stmt pos:start="93:17" pos:end="93:35"><expr pos:start="93:17" pos:end="93:34"><name pos:start="93:17" pos:end="93:32"><name pos:start="93:17" pos:end="93:17">c</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:32">canMMX2BeUsed</name></name><operator pos:start="93:33" pos:end="93:33">=</operator><literal type="number" pos:start="93:34" pos:end="93:34">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>





	<comment type="block" pos:start="99:9" pos:end="99:89">/* dont use full vertical UV input/internaly if the source doesnt even have it */</comment>

	<if_stmt pos:start="101:9" pos:end="101:75"><if pos:start="101:9" pos:end="101:75">if<condition pos:start="101:11" pos:end="101:33">(<expr pos:start="101:12" pos:end="101:32"><call pos:start="101:12" pos:end="101:32"><name pos:start="101:12" pos:end="101:21">isHalfChrV</name><argument_list pos:start="101:22" pos:end="101:32">(<argument pos:start="101:23" pos:end="101:31"><expr pos:start="101:23" pos:end="101:31"><name pos:start="101:23" pos:end="101:31">srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="101:35" pos:end="101:75"><block_content pos:start="101:35" pos:end="101:75"> <expr_stmt pos:start="101:35" pos:end="101:75"><expr pos:start="101:35" pos:end="101:74"><name pos:start="101:35" pos:end="101:42"><name pos:start="101:35" pos:end="101:35">c</name><operator pos:start="101:36" pos:end="101:37">-&gt;</operator><name pos:start="101:38" pos:end="101:42">flags</name></name><operator pos:start="101:43" pos:end="101:43">=</operator> <name pos:start="101:45" pos:end="101:49">flags</name><operator pos:start="101:50" pos:end="101:50">=</operator> <name pos:start="101:52" pos:end="101:56">flags</name><operator pos:start="101:57" pos:end="101:57">&amp;</operator><operator pos:start="101:58" pos:end="101:58">(</operator><operator pos:start="101:59" pos:end="101:59">~</operator><name pos:start="101:60" pos:end="101:73">SWS_FULL_CHR_V</name><operator pos:start="101:74" pos:end="101:74">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block" pos:start="103:9" pos:end="103:81">/* dont use full horizontal UV input if the source doesnt even have it */</comment>

	<if_stmt pos:start="105:9" pos:end="105:79"><if pos:start="105:9" pos:end="105:79">if<condition pos:start="105:11" pos:end="105:33">(<expr pos:start="105:12" pos:end="105:32"><call pos:start="105:12" pos:end="105:32"><name pos:start="105:12" pos:end="105:21">isHalfChrH</name><argument_list pos:start="105:22" pos:end="105:32">(<argument pos:start="105:23" pos:end="105:31"><expr pos:start="105:23" pos:end="105:31"><name pos:start="105:23" pos:end="105:31">srcFormat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="105:35" pos:end="105:79"><block_content pos:start="105:35" pos:end="105:79"> <expr_stmt pos:start="105:35" pos:end="105:79"><expr pos:start="105:35" pos:end="105:78"><name pos:start="105:35" pos:end="105:42"><name pos:start="105:35" pos:end="105:35">c</name><operator pos:start="105:36" pos:end="105:37">-&gt;</operator><name pos:start="105:38" pos:end="105:42">flags</name></name><operator pos:start="105:43" pos:end="105:43">=</operator> <name pos:start="105:45" pos:end="105:49">flags</name><operator pos:start="105:50" pos:end="105:50">=</operator> <name pos:start="105:52" pos:end="105:56">flags</name><operator pos:start="105:57" pos:end="105:57">&amp;</operator><operator pos:start="105:58" pos:end="105:58">(</operator><operator pos:start="105:59" pos:end="105:59">~</operator><name pos:start="105:60" pos:end="105:77">SWS_FULL_CHR_H_INP</name><operator pos:start="105:78" pos:end="105:78">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block" pos:start="107:9" pos:end="107:91">/* dont use full horizontal UV internally if the destination doesnt even have it */</comment>

	<if_stmt pos:start="109:9" pos:end="109:79"><if pos:start="109:9" pos:end="109:79">if<condition pos:start="109:11" pos:end="109:33">(<expr pos:start="109:12" pos:end="109:32"><call pos:start="109:12" pos:end="109:32"><name pos:start="109:12" pos:end="109:21">isHalfChrH</name><argument_list pos:start="109:22" pos:end="109:32">(<argument pos:start="109:23" pos:end="109:31"><expr pos:start="109:23" pos:end="109:31"><name pos:start="109:23" pos:end="109:31">dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="109:35" pos:end="109:79"><block_content pos:start="109:35" pos:end="109:79"> <expr_stmt pos:start="109:35" pos:end="109:79"><expr pos:start="109:35" pos:end="109:78"><name pos:start="109:35" pos:end="109:42"><name pos:start="109:35" pos:end="109:35">c</name><operator pos:start="109:36" pos:end="109:37">-&gt;</operator><name pos:start="109:38" pos:end="109:42">flags</name></name><operator pos:start="109:43" pos:end="109:43">=</operator> <name pos:start="109:45" pos:end="109:49">flags</name><operator pos:start="109:50" pos:end="109:50">=</operator> <name pos:start="109:52" pos:end="109:56">flags</name><operator pos:start="109:57" pos:end="109:57">&amp;</operator><operator pos:start="109:58" pos:end="109:58">(</operator><operator pos:start="109:59" pos:end="109:59">~</operator><name pos:start="109:60" pos:end="109:77">SWS_FULL_CHR_H_INT</name><operator pos:start="109:78" pos:end="109:78">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<if_stmt pos:start="113:9" pos:end="115:64"><if pos:start="113:9" pos:end="113:57">if<condition pos:start="113:11" pos:end="113:36">(<expr pos:start="113:12" pos:end="113:35"><name pos:start="113:12" pos:end="113:16">flags</name><operator pos:start="113:17" pos:end="113:17">&amp;</operator><name pos:start="113:18" pos:end="113:35">SWS_FULL_CHR_H_INP</name></expr>)</condition><block type="pseudo" pos:start="113:41" pos:end="113:57"><block_content pos:start="113:41" pos:end="113:57">	<expr_stmt pos:start="113:41" pos:end="113:57"><expr pos:start="113:41" pos:end="113:56"><name pos:start="113:41" pos:end="113:50"><name pos:start="113:41" pos:end="113:41">c</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:50">chrSrcW</name></name><operator pos:start="113:51" pos:end="113:51">=</operator> <name pos:start="113:53" pos:end="113:56">srcW</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="115:9" pos:end="115:64">else<block type="pseudo" pos:start="115:41" pos:end="115:64"><block_content pos:start="115:41" pos:end="115:64">				<expr_stmt pos:start="115:41" pos:end="115:64"><expr pos:start="115:41" pos:end="115:63"><name pos:start="115:41" pos:end="115:50"><name pos:start="115:41" pos:end="115:41">c</name><operator pos:start="115:42" pos:end="115:43">-&gt;</operator><name pos:start="115:44" pos:end="115:50">chrSrcW</name></name><operator pos:start="115:51" pos:end="115:51">=</operator> <operator pos:start="115:53" pos:end="115:53">(</operator><name pos:start="115:54" pos:end="115:57">srcW</name><operator pos:start="115:58" pos:end="115:58">+</operator><literal type="number" pos:start="115:59" pos:end="115:59">1</literal><operator pos:start="115:60" pos:end="115:60">)</operator><operator pos:start="115:61" pos:end="115:62">&gt;&gt;</operator><literal type="number" pos:start="115:63" pos:end="115:63">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



	<if_stmt pos:start="119:9" pos:end="121:64"><if pos:start="119:9" pos:end="119:57">if<condition pos:start="119:11" pos:end="119:36">(<expr pos:start="119:12" pos:end="119:35"><name pos:start="119:12" pos:end="119:16">flags</name><operator pos:start="119:17" pos:end="119:17">&amp;</operator><name pos:start="119:18" pos:end="119:35">SWS_FULL_CHR_H_INT</name></expr>)</condition><block type="pseudo" pos:start="119:41" pos:end="119:57"><block_content pos:start="119:41" pos:end="119:57">	<expr_stmt pos:start="119:41" pos:end="119:57"><expr pos:start="119:41" pos:end="119:56"><name pos:start="119:41" pos:end="119:50"><name pos:start="119:41" pos:end="119:41">c</name><operator pos:start="119:42" pos:end="119:43">-&gt;</operator><name pos:start="119:44" pos:end="119:50">chrDstW</name></name><operator pos:start="119:51" pos:end="119:51">=</operator> <name pos:start="119:53" pos:end="119:56">dstW</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="121:9" pos:end="121:64">else<block type="pseudo" pos:start="121:41" pos:end="121:64"><block_content pos:start="121:41" pos:end="121:64">				<expr_stmt pos:start="121:41" pos:end="121:64"><expr pos:start="121:41" pos:end="121:63"><name pos:start="121:41" pos:end="121:50"><name pos:start="121:41" pos:end="121:41">c</name><operator pos:start="121:42" pos:end="121:43">-&gt;</operator><name pos:start="121:44" pos:end="121:50">chrDstW</name></name><operator pos:start="121:51" pos:end="121:51">=</operator> <operator pos:start="121:53" pos:end="121:53">(</operator><name pos:start="121:54" pos:end="121:57">dstW</name><operator pos:start="121:58" pos:end="121:58">+</operator><literal type="number" pos:start="121:59" pos:end="121:59">1</literal><operator pos:start="121:60" pos:end="121:60">)</operator><operator pos:start="121:61" pos:end="121:62">&gt;&gt;</operator><literal type="number" pos:start="121:63" pos:end="121:63">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



	<if_stmt pos:start="125:9" pos:end="127:64"><if pos:start="125:9" pos:end="125:57">if<condition pos:start="125:11" pos:end="125:32">(<expr pos:start="125:12" pos:end="125:31"><name pos:start="125:12" pos:end="125:16">flags</name><operator pos:start="125:17" pos:end="125:17">&amp;</operator><name pos:start="125:18" pos:end="125:31">SWS_FULL_CHR_V</name></expr>)</condition><block type="pseudo" pos:start="125:41" pos:end="125:57"><block_content pos:start="125:41" pos:end="125:57">	<expr_stmt pos:start="125:41" pos:end="125:57"><expr pos:start="125:41" pos:end="125:56"><name pos:start="125:41" pos:end="125:50"><name pos:start="125:41" pos:end="125:41">c</name><operator pos:start="125:42" pos:end="125:43">-&gt;</operator><name pos:start="125:44" pos:end="125:50">chrSrcH</name></name><operator pos:start="125:51" pos:end="125:51">=</operator> <name pos:start="125:53" pos:end="125:56">srcH</name></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="127:9" pos:end="127:64">else<block type="pseudo" pos:start="127:41" pos:end="127:64"><block_content pos:start="127:41" pos:end="127:64">				<expr_stmt pos:start="127:41" pos:end="127:64"><expr pos:start="127:41" pos:end="127:63"><name pos:start="127:41" pos:end="127:50"><name pos:start="127:41" pos:end="127:41">c</name><operator pos:start="127:42" pos:end="127:43">-&gt;</operator><name pos:start="127:44" pos:end="127:50">chrSrcH</name></name><operator pos:start="127:51" pos:end="127:51">=</operator> <operator pos:start="127:53" pos:end="127:53">(</operator><name pos:start="127:54" pos:end="127:57">srcH</name><operator pos:start="127:58" pos:end="127:58">+</operator><literal type="number" pos:start="127:59" pos:end="127:59">1</literal><operator pos:start="127:60" pos:end="127:60">)</operator><operator pos:start="127:61" pos:end="127:62">&gt;&gt;</operator><literal type="number" pos:start="127:63" pos:end="127:63">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



	<if_stmt pos:start="131:9" pos:end="133:57"><if pos:start="131:9" pos:end="131:64">if<condition pos:start="131:11" pos:end="131:33">(<expr pos:start="131:12" pos:end="131:32"><call pos:start="131:12" pos:end="131:32"><name pos:start="131:12" pos:end="131:21">isHalfChrV</name><argument_list pos:start="131:22" pos:end="131:32">(<argument pos:start="131:23" pos:end="131:31"><expr pos:start="131:23" pos:end="131:31"><name pos:start="131:23" pos:end="131:31">dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="131:41" pos:end="131:64"><block_content pos:start="131:41" pos:end="131:64">	<expr_stmt pos:start="131:41" pos:end="131:64"><expr pos:start="131:41" pos:end="131:63"><name pos:start="131:41" pos:end="131:50"><name pos:start="131:41" pos:end="131:41">c</name><operator pos:start="131:42" pos:end="131:43">-&gt;</operator><name pos:start="131:44" pos:end="131:50">chrDstH</name></name><operator pos:start="131:51" pos:end="131:51">=</operator> <operator pos:start="131:53" pos:end="131:53">(</operator><name pos:start="131:54" pos:end="131:57">dstH</name><operator pos:start="131:58" pos:end="131:58">+</operator><literal type="number" pos:start="131:59" pos:end="131:59">1</literal><operator pos:start="131:60" pos:end="131:60">)</operator><operator pos:start="131:61" pos:end="131:62">&gt;&gt;</operator><literal type="number" pos:start="131:63" pos:end="131:63">1</literal></expr>;</expr_stmt></block_content></block></if>

	<else pos:start="133:9" pos:end="133:57">else<block type="pseudo" pos:start="133:41" pos:end="133:57"><block_content pos:start="133:41" pos:end="133:57">				<expr_stmt pos:start="133:41" pos:end="133:57"><expr pos:start="133:41" pos:end="133:56"><name pos:start="133:41" pos:end="133:50"><name pos:start="133:41" pos:end="133:41">c</name><operator pos:start="133:42" pos:end="133:43">-&gt;</operator><name pos:start="133:44" pos:end="133:50">chrDstH</name></name><operator pos:start="133:51" pos:end="133:51">=</operator> <name pos:start="133:53" pos:end="133:56">dstH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



	<expr_stmt pos:start="137:9" pos:end="137:68"><expr pos:start="137:9" pos:end="137:67"><name pos:start="137:9" pos:end="137:18"><name pos:start="137:9" pos:end="137:9">c</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:18">chrXInc</name></name><operator pos:start="137:19" pos:end="137:19">=</operator> <operator pos:start="137:21" pos:end="137:21">(</operator><operator pos:start="137:22" pos:end="137:22">(</operator><name pos:start="137:23" pos:end="137:32"><name pos:start="137:23" pos:end="137:23">c</name><operator pos:start="137:24" pos:end="137:25">-&gt;</operator><name pos:start="137:26" pos:end="137:32">chrSrcW</name></name><operator pos:start="137:33" pos:end="137:34">&lt;&lt;</operator><literal type="number" pos:start="137:35" pos:end="137:36">16</literal><operator pos:start="137:37" pos:end="137:37">)</operator> <operator pos:start="137:39" pos:end="137:39">+</operator> <operator pos:start="137:41" pos:end="137:41">(</operator><name pos:start="137:42" pos:end="137:51"><name pos:start="137:42" pos:end="137:42">c</name><operator pos:start="137:43" pos:end="137:44">-&gt;</operator><name pos:start="137:45" pos:end="137:51">chrDstW</name></name><operator pos:start="137:52" pos:end="137:53">&gt;&gt;</operator><literal type="number" pos:start="137:54" pos:end="137:54">1</literal><operator pos:start="137:55" pos:end="137:55">)</operator><operator pos:start="137:56" pos:end="137:56">)</operator><operator pos:start="137:57" pos:end="137:57">/</operator><name pos:start="137:58" pos:end="137:67"><name pos:start="137:58" pos:end="137:58">c</name><operator pos:start="137:59" pos:end="137:60">-&gt;</operator><name pos:start="137:61" pos:end="137:67">chrDstW</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="139:9" pos:end="139:68"><expr pos:start="139:9" pos:end="139:67"><name pos:start="139:9" pos:end="139:18"><name pos:start="139:9" pos:end="139:9">c</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:18">chrYInc</name></name><operator pos:start="139:19" pos:end="139:19">=</operator> <operator pos:start="139:21" pos:end="139:21">(</operator><operator pos:start="139:22" pos:end="139:22">(</operator><name pos:start="139:23" pos:end="139:32"><name pos:start="139:23" pos:end="139:23">c</name><operator pos:start="139:24" pos:end="139:25">-&gt;</operator><name pos:start="139:26" pos:end="139:32">chrSrcH</name></name><operator pos:start="139:33" pos:end="139:34">&lt;&lt;</operator><literal type="number" pos:start="139:35" pos:end="139:36">16</literal><operator pos:start="139:37" pos:end="139:37">)</operator> <operator pos:start="139:39" pos:end="139:39">+</operator> <operator pos:start="139:41" pos:end="139:41">(</operator><name pos:start="139:42" pos:end="139:51"><name pos:start="139:42" pos:end="139:42">c</name><operator pos:start="139:43" pos:end="139:44">-&gt;</operator><name pos:start="139:45" pos:end="139:51">chrDstH</name></name><operator pos:start="139:52" pos:end="139:53">&gt;&gt;</operator><literal type="number" pos:start="139:54" pos:end="139:54">1</literal><operator pos:start="139:55" pos:end="139:55">)</operator><operator pos:start="139:56" pos:end="139:56">)</operator><operator pos:start="139:57" pos:end="139:57">/</operator><name pos:start="139:58" pos:end="139:67"><name pos:start="139:58" pos:end="139:58">c</name><operator pos:start="139:59" pos:end="139:60">-&gt;</operator><name pos:start="139:61" pos:end="139:67">chrDstH</name></name></expr>;</expr_stmt>





	<comment type="line" pos:start="145:9" pos:end="145:100">// match pixel 0 of the src to pixel 0 of dst and match pixel n-2 of src to pixel n-2 of dst</comment>

	<comment type="line" pos:start="147:9" pos:end="147:75">// but only for the FAST_BILINEAR mode otherwise do correct scaling</comment>

	<comment type="line" pos:start="149:9" pos:end="149:55">// n-2 is the last chrominance sample available</comment>

	<comment type="line" pos:start="151:9" pos:end="151:95">// this is not perfect, but noone shuld notice the difference, the more correct variant</comment>

	<comment type="line" pos:start="153:9" pos:end="153:91">// would be like the vertical one, but that would require some special code for the</comment>

	<comment type="line" pos:start="155:9" pos:end="155:31">// first and last pixel</comment>

	<if_stmt pos:start="157:9" pos:end="183:9"><if pos:start="157:9" pos:end="183:9">if<condition pos:start="157:11" pos:end="157:35">(<expr pos:start="157:12" pos:end="157:34"><name pos:start="157:12" pos:end="157:16">flags</name><operator pos:start="157:17" pos:end="157:17">&amp;</operator><name pos:start="157:18" pos:end="157:34">SWS_FAST_BILINEAR</name></expr>)</condition>

	<block pos:start="159:9" pos:end="183:9">{<block_content pos:start="161:17" pos:end="181:17">

		<if_stmt pos:start="161:17" pos:end="181:17"><if pos:start="161:17" pos:end="169:17">if<condition pos:start="161:19" pos:end="161:36">(<expr pos:start="161:20" pos:end="161:35"><name pos:start="161:20" pos:end="161:35"><name pos:start="161:20" pos:end="161:20">c</name><operator pos:start="161:21" pos:end="161:22">-&gt;</operator><name pos:start="161:23" pos:end="161:35">canMMX2BeUsed</name></name></expr>)</condition>

		<block pos:start="163:17" pos:end="169:17">{<block_content pos:start="165:25" pos:end="167:40">

			<expr_stmt pos:start="165:25" pos:end="165:40"><expr pos:start="165:25" pos:end="165:39"><name pos:start="165:25" pos:end="165:34"><name pos:start="165:25" pos:end="165:25">c</name><operator pos:start="165:26" pos:end="165:27">-&gt;</operator><name pos:start="165:28" pos:end="165:34">lumXInc</name></name><operator pos:start="165:35" pos:end="165:36">+=</operator> <literal type="number" pos:start="165:38" pos:end="165:39">20</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="167:25" pos:end="167:40"><expr pos:start="167:25" pos:end="167:39"><name pos:start="167:25" pos:end="167:34"><name pos:start="167:25" pos:end="167:25">c</name><operator pos:start="167:26" pos:end="167:27">-&gt;</operator><name pos:start="167:28" pos:end="167:34">chrXInc</name></name><operator pos:start="167:35" pos:end="167:36">+=</operator> <literal type="number" pos:start="167:38" pos:end="167:39">20</literal></expr>;</expr_stmt>

		</block_content>}</block></if>

		<comment type="line" pos:start="171:17" pos:end="171:67">//we dont use the x86asm scaler if mmx is available</comment>

		<if type="elseif" pos:start="173:17" pos:end="181:17">else if<condition pos:start="173:24" pos:end="173:39">(<expr pos:start="173:25" pos:end="173:38"><name pos:start="173:25" pos:end="173:38"><name pos:start="173:25" pos:end="173:31">cpuCaps</name><operator pos:start="173:32" pos:end="173:32">.</operator><name pos:start="173:33" pos:end="173:38">hasMMX</name></name></expr>)</condition>

		<block pos:start="175:17" pos:end="181:17">{<block_content pos:start="177:25" pos:end="179:78">

			<expr_stmt pos:start="177:25" pos:end="177:66"><expr pos:start="177:25" pos:end="177:65"><name pos:start="177:25" pos:end="177:34"><name pos:start="177:25" pos:end="177:25">c</name><operator pos:start="177:26" pos:end="177:27">-&gt;</operator><name pos:start="177:28" pos:end="177:34">lumXInc</name></name> <operator pos:start="177:36" pos:end="177:36">=</operator> <operator pos:start="177:38" pos:end="177:38">(</operator><operator pos:start="177:39" pos:end="177:39">(</operator><name pos:start="177:40" pos:end="177:43">srcW</name><operator pos:start="177:44" pos:end="177:44">-</operator><literal type="number" pos:start="177:45" pos:end="177:45">2</literal><operator pos:start="177:46" pos:end="177:46">)</operator><operator pos:start="177:47" pos:end="177:48">&lt;&lt;</operator><literal type="number" pos:start="177:49" pos:end="177:50">16</literal><operator pos:start="177:51" pos:end="177:51">)</operator><operator pos:start="177:52" pos:end="177:52">/</operator><operator pos:start="177:53" pos:end="177:53">(</operator><name pos:start="177:54" pos:end="177:57">dstW</name><operator pos:start="177:58" pos:end="177:58">-</operator><literal type="number" pos:start="177:59" pos:end="177:59">2</literal><operator pos:start="177:60" pos:end="177:60">)</operator> <operator pos:start="177:62" pos:end="177:62">-</operator> <literal type="number" pos:start="177:64" pos:end="177:65">20</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="179:25" pos:end="179:78"><expr pos:start="179:25" pos:end="179:77"><name pos:start="179:25" pos:end="179:34"><name pos:start="179:25" pos:end="179:25">c</name><operator pos:start="179:26" pos:end="179:27">-&gt;</operator><name pos:start="179:28" pos:end="179:34">chrXInc</name></name> <operator pos:start="179:36" pos:end="179:36">=</operator> <operator pos:start="179:38" pos:end="179:38">(</operator><operator pos:start="179:39" pos:end="179:39">(</operator><name pos:start="179:40" pos:end="179:49"><name pos:start="179:40" pos:end="179:40">c</name><operator pos:start="179:41" pos:end="179:42">-&gt;</operator><name pos:start="179:43" pos:end="179:49">chrSrcW</name></name><operator pos:start="179:50" pos:end="179:50">-</operator><literal type="number" pos:start="179:51" pos:end="179:51">2</literal><operator pos:start="179:52" pos:end="179:52">)</operator><operator pos:start="179:53" pos:end="179:54">&lt;&lt;</operator><literal type="number" pos:start="179:55" pos:end="179:56">16</literal><operator pos:start="179:57" pos:end="179:57">)</operator><operator pos:start="179:58" pos:end="179:58">/</operator><operator pos:start="179:59" pos:end="179:59">(</operator><name pos:start="179:60" pos:end="179:69"><name pos:start="179:60" pos:end="179:60">c</name><operator pos:start="179:61" pos:end="179:62">-&gt;</operator><name pos:start="179:63" pos:end="179:69">chrDstW</name></name><operator pos:start="179:70" pos:end="179:70">-</operator><literal type="number" pos:start="179:71" pos:end="179:71">2</literal><operator pos:start="179:72" pos:end="179:72">)</operator> <operator pos:start="179:74" pos:end="179:74">-</operator> <literal type="number" pos:start="179:76" pos:end="179:77">20</literal></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></if></if_stmt>



	<comment type="block" pos:start="187:9" pos:end="187:64">/* precalculate horizontal scaler filter coefficients */</comment>

	<block pos:start="189:9" pos:end="225:9">{<block_content pos:start="191:17" pos:end="224:0">

		<decl_stmt pos:start="191:17" pos:end="191:62"><decl pos:start="191:17" pos:end="191:61"><type pos:start="191:17" pos:end="191:25"><specifier pos:start="191:17" pos:end="191:21">const</specifier> <name pos:start="191:23" pos:end="191:25">int</name></type> <name pos:start="191:27" pos:end="191:37">filterAlign</name><init pos:start="191:38" pos:end="191:61">= <expr pos:start="191:40" pos:end="191:61"><ternary pos:start="191:40" pos:end="191:61"><condition pos:start="191:40" pos:end="191:55"><expr pos:start="191:40" pos:end="191:53"><name pos:start="191:40" pos:end="191:53"><name pos:start="191:40" pos:end="191:46">cpuCaps</name><operator pos:start="191:47" pos:end="191:47">.</operator><name pos:start="191:48" pos:end="191:53">hasMMX</name></name></expr> ?</condition><then pos:start="191:57" pos:end="191:57"> <expr pos:start="191:57" pos:end="191:57"><literal type="number" pos:start="191:57" pos:end="191:57">4</literal></expr> </then><else pos:start="191:59" pos:end="191:61">: <expr pos:start="191:61" pos:end="191:61"><literal type="number" pos:start="191:61" pos:end="191:61">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>



		<expr_stmt pos:start="195:17" pos:end="199:67"><expr pos:start="195:17" pos:end="199:66"><call pos:start="195:17" pos:end="199:66"><name pos:start="195:17" pos:end="195:26">initFilter</name><argument_list pos:start="195:27" pos:end="199:66">(<argument pos:start="195:28" pos:end="195:41"><expr pos:start="195:28" pos:end="195:41"><operator pos:start="195:28" pos:end="195:28">&amp;</operator><name pos:start="195:29" pos:end="195:41"><name pos:start="195:29" pos:end="195:29">c</name><operator pos:start="195:30" pos:end="195:31">-&gt;</operator><name pos:start="195:32" pos:end="195:41">hLumFilter</name></name></expr></argument>, <argument pos:start="195:44" pos:end="195:60"><expr pos:start="195:44" pos:end="195:60"><operator pos:start="195:44" pos:end="195:44">&amp;</operator><name pos:start="195:45" pos:end="195:60"><name pos:start="195:45" pos:end="195:45">c</name><operator pos:start="195:46" pos:end="195:47">-&gt;</operator><name pos:start="195:48" pos:end="195:60">hLumFilterPos</name></name></expr></argument>, <argument pos:start="195:63" pos:end="195:80"><expr pos:start="195:63" pos:end="195:80"><operator pos:start="195:63" pos:end="195:63">&amp;</operator><name pos:start="195:64" pos:end="195:80"><name pos:start="195:64" pos:end="195:64">c</name><operator pos:start="195:65" pos:end="195:66">-&gt;</operator><name pos:start="195:67" pos:end="195:80">hLumFilterSize</name></name></expr></argument>, <argument pos:start="195:83" pos:end="195:92"><expr pos:start="195:83" pos:end="195:92"><name pos:start="195:83" pos:end="195:92"><name pos:start="195:83" pos:end="195:83">c</name><operator pos:start="195:84" pos:end="195:85">-&gt;</operator><name pos:start="195:86" pos:end="195:92">lumXInc</name></name></expr></argument>,

				 <argument pos:start="197:34" pos:end="197:37"><expr pos:start="197:34" pos:end="197:37"><name pos:start="197:34" pos:end="197:37">srcW</name></expr></argument>      ,       <argument pos:start="197:52" pos:end="197:55"><expr pos:start="197:52" pos:end="197:55"><name pos:start="197:52" pos:end="197:55">dstW</name></expr></argument>, <argument pos:start="197:58" pos:end="197:68"><expr pos:start="197:58" pos:end="197:68"><name pos:start="197:58" pos:end="197:68">filterAlign</name></expr></argument>, <argument pos:start="197:71" pos:end="197:75"><expr pos:start="197:71" pos:end="197:75"><literal type="number" pos:start="197:71" pos:end="197:71">1</literal><operator pos:start="197:72" pos:end="197:73">&lt;&lt;</operator><literal type="number" pos:start="197:74" pos:end="197:75">14</literal></expr></argument>, <argument pos:start="197:78" pos:end="197:82"><expr pos:start="197:78" pos:end="197:82"><name pos:start="197:78" pos:end="197:82">flags</name></expr></argument>,

				 <argument pos:start="199:34" pos:end="199:48"><expr pos:start="199:34" pos:end="199:48"><name pos:start="199:34" pos:end="199:48"><name pos:start="199:34" pos:end="199:42">srcFilter</name><operator pos:start="199:43" pos:end="199:44">-&gt;</operator><name pos:start="199:45" pos:end="199:48">lumH</name></name></expr></argument>, <argument pos:start="199:51" pos:end="199:65"><expr pos:start="199:51" pos:end="199:65"><name pos:start="199:51" pos:end="199:65"><name pos:start="199:51" pos:end="199:59">dstFilter</name><operator pos:start="199:60" pos:end="199:61">-&gt;</operator><name pos:start="199:62" pos:end="199:65">lumH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="201:17" pos:end="210:0"><expr pos:start="201:17" pos:end="205:66"><call pos:start="201:17" pos:end="205:66"><name pos:start="201:17" pos:end="201:26">initFilter</name><argument_list pos:start="201:27" pos:end="205:66">(<argument pos:start="201:28" pos:end="201:41"><expr pos:start="201:28" pos:end="201:41"><operator pos:start="201:28" pos:end="201:28">&amp;</operator><name pos:start="201:29" pos:end="201:41"><name pos:start="201:29" pos:end="201:29">c</name><operator pos:start="201:30" pos:end="201:31">-&gt;</operator><name pos:start="201:32" pos:end="201:41">hChrFilter</name></name></expr></argument>, <argument pos:start="201:44" pos:end="201:60"><expr pos:start="201:44" pos:end="201:60"><operator pos:start="201:44" pos:end="201:44">&amp;</operator><name pos:start="201:45" pos:end="201:60"><name pos:start="201:45" pos:end="201:45">c</name><operator pos:start="201:46" pos:end="201:47">-&gt;</operator><name pos:start="201:48" pos:end="201:60">hChrFilterPos</name></name></expr></argument>, <argument pos:start="201:63" pos:end="201:80"><expr pos:start="201:63" pos:end="201:80"><operator pos:start="201:63" pos:end="201:63">&amp;</operator><name pos:start="201:64" pos:end="201:80"><name pos:start="201:64" pos:end="201:64">c</name><operator pos:start="201:65" pos:end="201:66">-&gt;</operator><name pos:start="201:67" pos:end="201:80">hChrFilterSize</name></name></expr></argument>, <argument pos:start="201:83" pos:end="201:92"><expr pos:start="201:83" pos:end="201:92"><name pos:start="201:83" pos:end="201:92"><name pos:start="201:83" pos:end="201:83">c</name><operator pos:start="201:84" pos:end="201:85">-&gt;</operator><name pos:start="201:86" pos:end="201:92">chrXInc</name></name></expr></argument>,

				<argument pos:start="203:33" pos:end="203:43"><expr pos:start="203:33" pos:end="203:43"><operator pos:start="203:33" pos:end="203:33">(</operator><name pos:start="203:34" pos:end="203:37">srcW</name><operator pos:start="203:38" pos:end="203:38">+</operator><literal type="number" pos:start="203:39" pos:end="203:39">1</literal><operator pos:start="203:40" pos:end="203:40">)</operator><operator pos:start="203:41" pos:end="203:42">&gt;&gt;</operator><literal type="number" pos:start="203:43" pos:end="203:43">1</literal></expr></argument>, <argument pos:start="203:46" pos:end="203:55"><expr pos:start="203:46" pos:end="203:55"><name pos:start="203:46" pos:end="203:55"><name pos:start="203:46" pos:end="203:46">c</name><operator pos:start="203:47" pos:end="203:48">-&gt;</operator><name pos:start="203:49" pos:end="203:55">chrDstW</name></name></expr></argument>, <argument pos:start="203:58" pos:end="203:68"><expr pos:start="203:58" pos:end="203:68"><name pos:start="203:58" pos:end="203:68">filterAlign</name></expr></argument>, <argument pos:start="203:71" pos:end="203:75"><expr pos:start="203:71" pos:end="203:75"><literal type="number" pos:start="203:71" pos:end="203:71">1</literal><operator pos:start="203:72" pos:end="203:73">&lt;&lt;</operator><literal type="number" pos:start="203:74" pos:end="203:75">14</literal></expr></argument>, <argument pos:start="203:78" pos:end="203:82"><expr pos:start="203:78" pos:end="203:82"><name pos:start="203:78" pos:end="203:82">flags</name></expr></argument>,

				 <argument pos:start="205:34" pos:end="205:48"><expr pos:start="205:34" pos:end="205:48"><name pos:start="205:34" pos:end="205:48"><name pos:start="205:34" pos:end="205:42">srcFilter</name><operator pos:start="205:43" pos:end="205:44">-&gt;</operator><name pos:start="205:45" pos:end="205:48">chrH</name></name></expr></argument>, <argument pos:start="205:51" pos:end="205:65"><expr pos:start="205:51" pos:end="205:65"><name pos:start="205:51" pos:end="205:65"><name pos:start="205:51" pos:end="205:59">dstFilter</name><operator pos:start="205:60" pos:end="205:61">-&gt;</operator><name pos:start="205:62" pos:end="205:65">chrH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="209:1" pos:end="209:15">#<cpp:directive pos:start="209:2" pos:end="209:6">ifdef</cpp:directive> <name pos:start="209:8" pos:end="209:15">ARCH_X86</name></cpp:ifdef>

<comment type="line" pos:start="211:1" pos:end="211:21">// cant downscale !!!</comment>

		<if_stmt pos:start="213:17" pos:end="224:0"><if pos:start="213:17" pos:end="224:0">if<condition pos:start="213:19" pos:end="213:67">(<expr pos:start="213:20" pos:end="213:66"><name pos:start="213:20" pos:end="213:35"><name pos:start="213:20" pos:end="213:20">c</name><operator pos:start="213:21" pos:end="213:22">-&gt;</operator><name pos:start="213:23" pos:end="213:35">canMMX2BeUsed</name></name> <operator pos:start="213:37" pos:end="213:38">&amp;&amp;</operator> <operator pos:start="213:40" pos:end="213:40">(</operator><name pos:start="213:41" pos:end="213:45">flags</name> <operator pos:start="213:47" pos:end="213:47">&amp;</operator> <name pos:start="213:49" pos:end="213:65">SWS_FAST_BILINEAR</name><operator pos:start="213:66" pos:end="213:66">)</operator></expr>)</condition>

		<block pos:start="215:17" pos:end="224:0">{<block_content pos:start="217:25" pos:end="219:80">

			<expr_stmt pos:start="217:25" pos:end="217:79"><expr pos:start="217:25" pos:end="217:78"><call pos:start="217:25" pos:end="217:78"><name pos:start="217:25" pos:end="217:39">initMMX2HScaler</name><argument_list pos:start="217:40" pos:end="217:78">(      <argument pos:start="217:47" pos:end="217:50"><expr pos:start="217:47" pos:end="217:50"><name pos:start="217:47" pos:end="217:50">dstW</name></expr></argument>, <argument pos:start="217:53" pos:end="217:62"><expr pos:start="217:53" pos:end="217:62"><name pos:start="217:53" pos:end="217:62"><name pos:start="217:53" pos:end="217:53">c</name><operator pos:start="217:54" pos:end="217:55">-&gt;</operator><name pos:start="217:56" pos:end="217:62">lumXInc</name></name></expr></argument>, <argument pos:start="217:65" pos:end="217:77"><expr pos:start="217:65" pos:end="217:77"><name pos:start="217:65" pos:end="217:77"><name pos:start="217:65" pos:end="217:65">c</name><operator pos:start="217:66" pos:end="217:67">-&gt;</operator><name pos:start="217:68" pos:end="217:77">funnyYCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="219:25" pos:end="219:80"><expr pos:start="219:25" pos:end="219:79"><call pos:start="219:25" pos:end="219:79"><name pos:start="219:25" pos:end="219:39">initMMX2HScaler</name><argument_list pos:start="219:40" pos:end="219:79">(<argument pos:start="219:41" pos:end="219:50"><expr pos:start="219:41" pos:end="219:50"><name pos:start="219:41" pos:end="219:50"><name pos:start="219:41" pos:end="219:41">c</name><operator pos:start="219:42" pos:end="219:43">-&gt;</operator><name pos:start="219:44" pos:end="219:50">chrDstW</name></name></expr></argument>, <argument pos:start="219:53" pos:end="219:62"><expr pos:start="219:53" pos:end="219:62"><name pos:start="219:53" pos:end="219:62"><name pos:start="219:53" pos:end="219:53">c</name><operator pos:start="219:54" pos:end="219:55">-&gt;</operator><name pos:start="219:56" pos:end="219:62">chrXInc</name></name></expr></argument>, <argument pos:start="219:65" pos:end="219:78"><expr pos:start="219:65" pos:end="219:78"><name pos:start="219:65" pos:end="219:78"><name pos:start="219:65" pos:end="219:65">c</name><operator pos:start="219:66" pos:end="219:67">-&gt;</operator><name pos:start="219:68" pos:end="219:78">funnyUVCode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>

<cpp:endif pos:start="223:1" pos:end="223:6">#<cpp:directive pos:start="223:2" pos:end="223:6">endif</cpp:directive></cpp:endif>

	</block_content>}</block> <comment type="line" pos:start="225:11" pos:end="225:34">// Init Horizontal stuff</comment>







	<comment type="block" pos:start="233:9" pos:end="233:62">/* precalculate vertical scaler filter coefficients */</comment>

	<expr_stmt pos:start="235:9" pos:end="239:58"><expr pos:start="235:9" pos:end="239:57"><call pos:start="235:9" pos:end="239:57"><name pos:start="235:9" pos:end="235:18">initFilter</name><argument_list pos:start="235:19" pos:end="239:57">(<argument pos:start="235:20" pos:end="235:33"><expr pos:start="235:20" pos:end="235:33"><operator pos:start="235:20" pos:end="235:20">&amp;</operator><name pos:start="235:21" pos:end="235:33"><name pos:start="235:21" pos:end="235:21">c</name><operator pos:start="235:22" pos:end="235:23">-&gt;</operator><name pos:start="235:24" pos:end="235:33">vLumFilter</name></name></expr></argument>, <argument pos:start="235:36" pos:end="235:52"><expr pos:start="235:36" pos:end="235:52"><operator pos:start="235:36" pos:end="235:36">&amp;</operator><name pos:start="235:37" pos:end="235:52"><name pos:start="235:37" pos:end="235:37">c</name><operator pos:start="235:38" pos:end="235:39">-&gt;</operator><name pos:start="235:40" pos:end="235:52">vLumFilterPos</name></name></expr></argument>, <argument pos:start="235:55" pos:end="235:72"><expr pos:start="235:55" pos:end="235:72"><operator pos:start="235:55" pos:end="235:55">&amp;</operator><name pos:start="235:56" pos:end="235:72"><name pos:start="235:56" pos:end="235:56">c</name><operator pos:start="235:57" pos:end="235:58">-&gt;</operator><name pos:start="235:59" pos:end="235:72">vLumFilterSize</name></name></expr></argument>, <argument pos:start="235:75" pos:end="235:84"><expr pos:start="235:75" pos:end="235:84"><name pos:start="235:75" pos:end="235:84"><name pos:start="235:75" pos:end="235:75">c</name><operator pos:start="235:76" pos:end="235:77">-&gt;</operator><name pos:start="235:78" pos:end="235:84">lumYInc</name></name></expr></argument>,

			<argument pos:start="237:25" pos:end="237:28"><expr pos:start="237:25" pos:end="237:28"><name pos:start="237:25" pos:end="237:28">srcH</name></expr></argument>      ,        <argument pos:start="237:44" pos:end="237:47"><expr pos:start="237:44" pos:end="237:47"><name pos:start="237:44" pos:end="237:47">dstH</name></expr></argument>, <argument pos:start="237:50" pos:end="237:50"><expr pos:start="237:50" pos:end="237:50"><literal type="number" pos:start="237:50" pos:end="237:50">1</literal></expr></argument>, <argument pos:start="237:53" pos:end="237:61"><expr pos:start="237:53" pos:end="237:61"><operator pos:start="237:53" pos:end="237:53">(</operator><literal type="number" pos:start="237:54" pos:end="237:54">1</literal><operator pos:start="237:55" pos:end="237:56">&lt;&lt;</operator><literal type="number" pos:start="237:57" pos:end="237:58">12</literal><operator pos:start="237:59" pos:end="237:59">)</operator><operator pos:start="237:60" pos:end="237:60">-</operator><literal type="number" pos:start="237:61" pos:end="237:61">4</literal></expr></argument>, <argument pos:start="237:64" pos:end="237:68"><expr pos:start="237:64" pos:end="237:68"><name pos:start="237:64" pos:end="237:68">flags</name></expr></argument>,

			<argument pos:start="239:25" pos:end="239:39"><expr pos:start="239:25" pos:end="239:39"><name pos:start="239:25" pos:end="239:39"><name pos:start="239:25" pos:end="239:33">srcFilter</name><operator pos:start="239:34" pos:end="239:35">-&gt;</operator><name pos:start="239:36" pos:end="239:39">lumV</name></name></expr></argument>, <argument pos:start="239:42" pos:end="239:56"><expr pos:start="239:42" pos:end="239:56"><name pos:start="239:42" pos:end="239:56"><name pos:start="239:42" pos:end="239:50">dstFilter</name><operator pos:start="239:51" pos:end="239:52">-&gt;</operator><name pos:start="239:53" pos:end="239:56">lumV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="241:9" pos:end="245:59"><expr pos:start="241:9" pos:end="245:58"><call pos:start="241:9" pos:end="245:58"><name pos:start="241:9" pos:end="241:18">initFilter</name><argument_list pos:start="241:19" pos:end="245:58">(<argument pos:start="241:20" pos:end="241:33"><expr pos:start="241:20" pos:end="241:33"><operator pos:start="241:20" pos:end="241:20">&amp;</operator><name pos:start="241:21" pos:end="241:33"><name pos:start="241:21" pos:end="241:21">c</name><operator pos:start="241:22" pos:end="241:23">-&gt;</operator><name pos:start="241:24" pos:end="241:33">vChrFilter</name></name></expr></argument>, <argument pos:start="241:36" pos:end="241:52"><expr pos:start="241:36" pos:end="241:52"><operator pos:start="241:36" pos:end="241:36">&amp;</operator><name pos:start="241:37" pos:end="241:52"><name pos:start="241:37" pos:end="241:37">c</name><operator pos:start="241:38" pos:end="241:39">-&gt;</operator><name pos:start="241:40" pos:end="241:52">vChrFilterPos</name></name></expr></argument>, <argument pos:start="241:55" pos:end="241:72"><expr pos:start="241:55" pos:end="241:72"><operator pos:start="241:55" pos:end="241:55">&amp;</operator><name pos:start="241:56" pos:end="241:72"><name pos:start="241:56" pos:end="241:56">c</name><operator pos:start="241:57" pos:end="241:58">-&gt;</operator><name pos:start="241:59" pos:end="241:72">vChrFilterSize</name></name></expr></argument>, <argument pos:start="241:75" pos:end="241:84"><expr pos:start="241:75" pos:end="241:84"><name pos:start="241:75" pos:end="241:84"><name pos:start="241:75" pos:end="241:75">c</name><operator pos:start="241:76" pos:end="241:77">-&gt;</operator><name pos:start="241:78" pos:end="241:84">chrYInc</name></name></expr></argument>,

			<argument pos:start="243:25" pos:end="243:35"><expr pos:start="243:25" pos:end="243:35"><operator pos:start="243:25" pos:end="243:25">(</operator><name pos:start="243:26" pos:end="243:29">srcH</name><operator pos:start="243:30" pos:end="243:30">+</operator><literal type="number" pos:start="243:31" pos:end="243:31">1</literal><operator pos:start="243:32" pos:end="243:32">)</operator><operator pos:start="243:33" pos:end="243:34">&gt;&gt;</operator><literal type="number" pos:start="243:35" pos:end="243:35">1</literal></expr></argument>, <argument pos:start="243:38" pos:end="243:47"><expr pos:start="243:38" pos:end="243:47"><name pos:start="243:38" pos:end="243:47"><name pos:start="243:38" pos:end="243:38">c</name><operator pos:start="243:39" pos:end="243:40">-&gt;</operator><name pos:start="243:41" pos:end="243:47">chrDstH</name></name></expr></argument>, <argument pos:start="243:50" pos:end="243:50"><expr pos:start="243:50" pos:end="243:50"><literal type="number" pos:start="243:50" pos:end="243:50">1</literal></expr></argument>, <argument pos:start="243:53" pos:end="243:61"><expr pos:start="243:53" pos:end="243:61"><operator pos:start="243:53" pos:end="243:53">(</operator><literal type="number" pos:start="243:54" pos:end="243:54">1</literal><operator pos:start="243:55" pos:end="243:56">&lt;&lt;</operator><literal type="number" pos:start="243:57" pos:end="243:58">12</literal><operator pos:start="243:59" pos:end="243:59">)</operator><operator pos:start="243:60" pos:end="243:60">-</operator><literal type="number" pos:start="243:61" pos:end="243:61">4</literal></expr></argument>, <argument pos:start="243:64" pos:end="243:68"><expr pos:start="243:64" pos:end="243:68"><name pos:start="243:64" pos:end="243:68">flags</name></expr></argument>,

			 <argument pos:start="245:26" pos:end="245:40"><expr pos:start="245:26" pos:end="245:40"><name pos:start="245:26" pos:end="245:40"><name pos:start="245:26" pos:end="245:34">srcFilter</name><operator pos:start="245:35" pos:end="245:36">-&gt;</operator><name pos:start="245:37" pos:end="245:40">chrV</name></name></expr></argument>, <argument pos:start="245:43" pos:end="245:57"><expr pos:start="245:43" pos:end="245:57"><name pos:start="245:43" pos:end="245:57"><name pos:start="245:43" pos:end="245:51">dstFilter</name><operator pos:start="245:52" pos:end="245:53">-&gt;</operator><name pos:start="245:54" pos:end="245:57">chrV</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<comment type="line" pos:start="249:9" pos:end="249:92">// Calculate Buffer Sizes so that they wont run out while handling these damn slices</comment>

	<expr_stmt pos:start="251:9" pos:end="251:42"><expr pos:start="251:9" pos:end="251:41"><name pos:start="251:9" pos:end="251:22"><name pos:start="251:9" pos:end="251:9">c</name><operator pos:start="251:10" pos:end="251:11">-&gt;</operator><name pos:start="251:12" pos:end="251:22">vLumBufSize</name></name><operator pos:start="251:23" pos:end="251:23">=</operator> <name pos:start="251:25" pos:end="251:41"><name pos:start="251:25" pos:end="251:25">c</name><operator pos:start="251:26" pos:end="251:27">-&gt;</operator><name pos:start="251:28" pos:end="251:41">vLumFilterSize</name></name></expr>;</expr_stmt>

	<expr_stmt pos:start="253:9" pos:end="253:42"><expr pos:start="253:9" pos:end="253:41"><name pos:start="253:9" pos:end="253:22"><name pos:start="253:9" pos:end="253:9">c</name><operator pos:start="253:10" pos:end="253:11">-&gt;</operator><name pos:start="253:12" pos:end="253:22">vChrBufSize</name></name><operator pos:start="253:23" pos:end="253:23">=</operator> <name pos:start="253:25" pos:end="253:41"><name pos:start="253:25" pos:end="253:25">c</name><operator pos:start="253:26" pos:end="253:27">-&gt;</operator><name pos:start="253:28" pos:end="253:41">vChrFilterSize</name></name></expr>;</expr_stmt>

	<for pos:start="255:9" pos:end="275:9">for<control pos:start="255:12" pos:end="255:29">(<init pos:start="255:13" pos:end="255:16"><expr pos:start="255:13" pos:end="255:15"><name pos:start="255:13" pos:end="255:13">i</name><operator pos:start="255:14" pos:end="255:14">=</operator><literal type="number" pos:start="255:15" pos:end="255:15">0</literal></expr>;</init> <condition pos:start="255:18" pos:end="255:24"><expr pos:start="255:18" pos:end="255:23"><name pos:start="255:18" pos:end="255:18">i</name><operator pos:start="255:19" pos:end="255:19">&lt;</operator><name pos:start="255:20" pos:end="255:23">dstH</name></expr>;</condition> <incr pos:start="255:26" pos:end="255:28"><expr pos:start="255:26" pos:end="255:28"><name pos:start="255:26" pos:end="255:26">i</name><operator pos:start="255:27" pos:end="255:28">++</operator></expr></incr>)</control>

	<block pos:start="257:9" pos:end="275:9">{<block_content pos:start="259:17" pos:end="273:80">

		<decl_stmt pos:start="259:17" pos:end="259:46"><decl pos:start="259:17" pos:end="259:45"><type pos:start="259:17" pos:end="259:19"><name pos:start="259:17" pos:end="259:19">int</name></type> <name pos:start="259:21" pos:end="259:24">chrI</name><init pos:start="259:25" pos:end="259:45">= <expr pos:start="259:27" pos:end="259:45"><name pos:start="259:27" pos:end="259:27">i</name><operator pos:start="259:28" pos:end="259:28">*</operator><name pos:start="259:29" pos:end="259:38"><name pos:start="259:29" pos:end="259:29">c</name><operator pos:start="259:30" pos:end="259:31">-&gt;</operator><name pos:start="259:32" pos:end="259:38">chrDstH</name></name> <operator pos:start="259:40" pos:end="259:40">/</operator> <name pos:start="259:42" pos:end="259:45">dstH</name></expr></init></decl>;</decl_stmt>

		<decl_stmt pos:start="261:17" pos:end="263:88"><decl pos:start="261:17" pos:end="263:87"><type pos:start="261:17" pos:end="261:19"><name pos:start="261:17" pos:end="261:19">int</name></type> <name pos:start="261:21" pos:end="261:29">nextSlice</name><init pos:start="261:30" pos:end="263:87">= <expr pos:start="261:32" pos:end="263:87"><call pos:start="261:32" pos:end="263:87"><name pos:start="261:32" pos:end="261:34">MAX</name><argument_list pos:start="261:35" pos:end="263:87">(<argument pos:start="261:36" pos:end="261:81"><expr pos:start="261:36" pos:end="261:81"><name pos:start="261:36" pos:end="261:57"><name pos:start="261:36" pos:end="261:36">c</name><operator pos:start="261:37" pos:end="261:38">-&gt;</operator><name pos:start="261:39" pos:end="261:51">vLumFilterPos</name><index pos:start="261:52" pos:end="261:57">[<expr pos:start="261:53" pos:end="261:53"><name pos:start="261:53" pos:end="261:53">i</name></expr>   ]</index></name> <operator pos:start="261:59" pos:end="261:59">+</operator> <name pos:start="261:61" pos:end="261:77"><name pos:start="261:61" pos:end="261:61">c</name><operator pos:start="261:62" pos:end="261:63">-&gt;</operator><name pos:start="261:64" pos:end="261:77">vLumFilterSize</name></name> <operator pos:start="261:79" pos:end="261:79">-</operator> <literal type="number" pos:start="261:81" pos:end="261:81">1</literal></expr></argument>,

				 <argument pos:start="263:34" pos:end="263:86"><expr pos:start="263:34" pos:end="263:86"><operator pos:start="263:34" pos:end="263:34">(</operator><operator pos:start="263:35" pos:end="263:35">(</operator><name pos:start="263:36" pos:end="263:57"><name pos:start="263:36" pos:end="263:36">c</name><operator pos:start="263:37" pos:end="263:38">-&gt;</operator><name pos:start="263:39" pos:end="263:51">vChrFilterPos</name><index pos:start="263:52" pos:end="263:57">[<expr pos:start="263:53" pos:end="263:56"><name pos:start="263:53" pos:end="263:56">chrI</name></expr>]</index></name> <operator pos:start="263:59" pos:end="263:59">+</operator> <name pos:start="263:61" pos:end="263:77"><name pos:start="263:61" pos:end="263:61">c</name><operator pos:start="263:62" pos:end="263:63">-&gt;</operator><name pos:start="263:64" pos:end="263:77">vChrFilterSize</name></name> <operator pos:start="263:79" pos:end="263:79">-</operator> <literal type="number" pos:start="263:81" pos:end="263:81">1</literal><operator pos:start="263:82" pos:end="263:82">)</operator><operator pos:start="263:83" pos:end="263:84">&lt;&lt;</operator><literal type="number" pos:start="263:85" pos:end="263:85">1</literal><operator pos:start="263:86" pos:end="263:86">)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt pos:start="265:17" pos:end="265:31"><expr pos:start="265:17" pos:end="265:30"><name pos:start="265:17" pos:end="265:25">nextSlice</name><operator pos:start="265:26" pos:end="265:27">&amp;=</operator> <operator pos:start="265:29" pos:end="265:29">~</operator><literal type="number" pos:start="265:30" pos:end="265:30">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="265:33" pos:end="265:66">// Slices start at even boundaries</comment>

		<if_stmt pos:start="267:17" pos:end="269:75"><if pos:start="267:17" pos:end="269:75">if<condition pos:start="267:19" pos:end="267:71">(<expr pos:start="267:20" pos:end="267:70"><name pos:start="267:20" pos:end="267:41"><name pos:start="267:20" pos:end="267:20">c</name><operator pos:start="267:21" pos:end="267:22">-&gt;</operator><name pos:start="267:23" pos:end="267:35">vLumFilterPos</name><index pos:start="267:36" pos:end="267:41">[<expr pos:start="267:37" pos:end="267:37"><name pos:start="267:37" pos:end="267:37">i</name></expr>   ]</index></name> <operator pos:start="267:43" pos:end="267:43">+</operator> <name pos:start="267:45" pos:end="267:58"><name pos:start="267:45" pos:end="267:45">c</name><operator pos:start="267:46" pos:end="267:47">-&gt;</operator><name pos:start="267:48" pos:end="267:58">vLumBufSize</name></name> <operator pos:start="267:60" pos:end="267:60">&lt;</operator> <name pos:start="267:62" pos:end="267:70">nextSlice</name></expr>)</condition><block type="pseudo" pos:start="269:25" pos:end="269:75"><block_content pos:start="269:25" pos:end="269:75">

			<expr_stmt pos:start="269:25" pos:end="269:75"><expr pos:start="269:25" pos:end="269:74"><name pos:start="269:25" pos:end="269:38"><name pos:start="269:25" pos:end="269:25">c</name><operator pos:start="269:26" pos:end="269:27">-&gt;</operator><name pos:start="269:28" pos:end="269:38">vLumBufSize</name></name><operator pos:start="269:39" pos:end="269:39">=</operator> <name pos:start="269:41" pos:end="269:49">nextSlice</name> <operator pos:start="269:51" pos:end="269:51">-</operator> <name pos:start="269:53" pos:end="269:74"><name pos:start="269:53" pos:end="269:53">c</name><operator pos:start="269:54" pos:end="269:55">-&gt;</operator><name pos:start="269:56" pos:end="269:68">vLumFilterPos</name><index pos:start="269:69" pos:end="269:74">[<expr pos:start="269:70" pos:end="269:70"><name pos:start="269:70" pos:end="269:70">i</name></expr>   ]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt pos:start="271:17" pos:end="273:80"><if pos:start="271:17" pos:end="273:80">if<condition pos:start="271:19" pos:end="271:76">(<expr pos:start="271:20" pos:end="271:75"><name pos:start="271:20" pos:end="271:41"><name pos:start="271:20" pos:end="271:20">c</name><operator pos:start="271:21" pos:end="271:22">-&gt;</operator><name pos:start="271:23" pos:end="271:35">vChrFilterPos</name><index pos:start="271:36" pos:end="271:41">[<expr pos:start="271:37" pos:end="271:40"><name pos:start="271:37" pos:end="271:40">chrI</name></expr>]</index></name> <operator pos:start="271:43" pos:end="271:43">+</operator> <name pos:start="271:45" pos:end="271:58"><name pos:start="271:45" pos:end="271:45">c</name><operator pos:start="271:46" pos:end="271:47">-&gt;</operator><name pos:start="271:48" pos:end="271:58">vChrBufSize</name></name> <operator pos:start="271:60" pos:end="271:60">&lt;</operator> <operator pos:start="271:62" pos:end="271:62">(</operator><name pos:start="271:63" pos:end="271:71">nextSlice</name><operator pos:start="271:72" pos:end="271:73">&gt;&gt;</operator><literal type="number" pos:start="271:74" pos:end="271:74">1</literal><operator pos:start="271:75" pos:end="271:75">)</operator></expr>)</condition><block type="pseudo" pos:start="273:25" pos:end="273:80"><block_content pos:start="273:25" pos:end="273:80">

			<expr_stmt pos:start="273:25" pos:end="273:80"><expr pos:start="273:25" pos:end="273:79"><name pos:start="273:25" pos:end="273:38"><name pos:start="273:25" pos:end="273:25">c</name><operator pos:start="273:26" pos:end="273:27">-&gt;</operator><name pos:start="273:28" pos:end="273:38">vChrBufSize</name></name><operator pos:start="273:39" pos:end="273:39">=</operator> <operator pos:start="273:41" pos:end="273:41">(</operator><name pos:start="273:42" pos:end="273:50">nextSlice</name><operator pos:start="273:51" pos:end="273:52">&gt;&gt;</operator><literal type="number" pos:start="273:53" pos:end="273:53">1</literal><operator pos:start="273:54" pos:end="273:54">)</operator> <operator pos:start="273:56" pos:end="273:56">-</operator> <name pos:start="273:58" pos:end="273:79"><name pos:start="273:58" pos:end="273:58">c</name><operator pos:start="273:59" pos:end="273:60">-&gt;</operator><name pos:start="273:61" pos:end="273:73">vChrFilterPos</name><index pos:start="273:74" pos:end="273:79">[<expr pos:start="273:75" pos:end="273:78"><name pos:start="273:75" pos:end="273:78">chrI</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	</block_content>}</block></for>



	<comment type="line" pos:start="279:9" pos:end="279:89">// allocate pixbufs (we use dynamic allocation because otherwise we would need to</comment>

	<expr_stmt pos:start="281:9" pos:end="281:80"><expr pos:start="281:9" pos:end="281:79"><name pos:start="281:9" pos:end="281:20"><name pos:start="281:9" pos:end="281:9">c</name><operator pos:start="281:10" pos:end="281:11">-&gt;</operator><name pos:start="281:12" pos:end="281:20">lumPixBuf</name></name><operator pos:start="281:21" pos:end="281:21">=</operator> <operator pos:start="281:23" pos:end="281:23">(</operator><name pos:start="281:24" pos:end="281:30">int16_t</name><operator pos:start="281:31" pos:end="281:31">*</operator><operator pos:start="281:32" pos:end="281:32">*</operator><operator pos:start="281:33" pos:end="281:33">)</operator><call pos:start="281:34" pos:end="281:79"><name pos:start="281:34" pos:end="281:41">memalign</name><argument_list pos:start="281:42" pos:end="281:79">(<argument pos:start="281:43" pos:end="281:43"><expr pos:start="281:43" pos:end="281:43"><literal type="number" pos:start="281:43" pos:end="281:43">4</literal></expr></argument>, <argument pos:start="281:46" pos:end="281:78"><expr pos:start="281:46" pos:end="281:78"><name pos:start="281:46" pos:end="281:59"><name pos:start="281:46" pos:end="281:46">c</name><operator pos:start="281:47" pos:end="281:48">-&gt;</operator><name pos:start="281:49" pos:end="281:59">vLumBufSize</name></name><operator pos:start="281:60" pos:end="281:60">*</operator><literal type="number" pos:start="281:61" pos:end="281:61">2</literal><operator pos:start="281:62" pos:end="281:62">*</operator><sizeof pos:start="281:63" pos:end="281:78">sizeof<argument_list pos:start="281:69" pos:end="281:78">(<argument pos:start="281:70" pos:end="281:77"><expr pos:start="281:70" pos:end="281:77"><name pos:start="281:70" pos:end="281:76">int16_t</name><operator pos:start="281:77" pos:end="281:77">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="283:9" pos:end="283:80"><expr pos:start="283:9" pos:end="283:79"><name pos:start="283:9" pos:end="283:20"><name pos:start="283:9" pos:end="283:9">c</name><operator pos:start="283:10" pos:end="283:11">-&gt;</operator><name pos:start="283:12" pos:end="283:20">chrPixBuf</name></name><operator pos:start="283:21" pos:end="283:21">=</operator> <operator pos:start="283:23" pos:end="283:23">(</operator><name pos:start="283:24" pos:end="283:30">int16_t</name><operator pos:start="283:31" pos:end="283:31">*</operator><operator pos:start="283:32" pos:end="283:32">*</operator><operator pos:start="283:33" pos:end="283:33">)</operator><call pos:start="283:34" pos:end="283:79"><name pos:start="283:34" pos:end="283:41">memalign</name><argument_list pos:start="283:42" pos:end="283:79">(<argument pos:start="283:43" pos:end="283:43"><expr pos:start="283:43" pos:end="283:43"><literal type="number" pos:start="283:43" pos:end="283:43">4</literal></expr></argument>, <argument pos:start="283:46" pos:end="283:78"><expr pos:start="283:46" pos:end="283:78"><name pos:start="283:46" pos:end="283:59"><name pos:start="283:46" pos:end="283:46">c</name><operator pos:start="283:47" pos:end="283:48">-&gt;</operator><name pos:start="283:49" pos:end="283:59">vChrBufSize</name></name><operator pos:start="283:60" pos:end="283:60">*</operator><literal type="number" pos:start="283:61" pos:end="283:61">2</literal><operator pos:start="283:62" pos:end="283:62">*</operator><sizeof pos:start="283:63" pos:end="283:78">sizeof<argument_list pos:start="283:69" pos:end="283:78">(<argument pos:start="283:70" pos:end="283:77"><expr pos:start="283:70" pos:end="283:77"><name pos:start="283:70" pos:end="283:76">int16_t</name><operator pos:start="283:77" pos:end="283:77">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line" pos:start="285:9" pos:end="285:132">//Note we need at least one pixel more at the end because of the mmx code (just in case someone wanna replace the 4000/8000)</comment>

	<for pos:start="287:9" pos:end="289:94">for<control pos:start="287:12" pos:end="287:39">(<init pos:start="287:13" pos:end="287:16"><expr pos:start="287:13" pos:end="287:15"><name pos:start="287:13" pos:end="287:13">i</name><operator pos:start="287:14" pos:end="287:14">=</operator><literal type="number" pos:start="287:15" pos:end="287:15">0</literal></expr>;</init> <condition pos:start="287:18" pos:end="287:34"><expr pos:start="287:18" pos:end="287:33"><name pos:start="287:18" pos:end="287:18">i</name><operator pos:start="287:19" pos:end="287:19">&lt;</operator><name pos:start="287:20" pos:end="287:33"><name pos:start="287:20" pos:end="287:20">c</name><operator pos:start="287:21" pos:end="287:22">-&gt;</operator><name pos:start="287:23" pos:end="287:33">vLumBufSize</name></name></expr>;</condition> <incr pos:start="287:36" pos:end="287:38"><expr pos:start="287:36" pos:end="287:38"><name pos:start="287:36" pos:end="287:36">i</name><operator pos:start="287:37" pos:end="287:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="289:17" pos:end="289:94"><block_content pos:start="289:17" pos:end="289:94">

		<expr_stmt pos:start="289:17" pos:end="289:94"><expr pos:start="289:17" pos:end="289:93"><name pos:start="289:17" pos:end="289:31"><name pos:start="289:17" pos:end="289:17">c</name><operator pos:start="289:18" pos:end="289:19">-&gt;</operator><name pos:start="289:20" pos:end="289:28">lumPixBuf</name><index pos:start="289:29" pos:end="289:31">[<expr pos:start="289:30" pos:end="289:30"><name pos:start="289:30" pos:end="289:30">i</name></expr>]</index></name><operator pos:start="289:32" pos:end="289:32">=</operator> <name pos:start="289:34" pos:end="289:63"><name pos:start="289:34" pos:end="289:34">c</name><operator pos:start="289:35" pos:end="289:36">-&gt;</operator><name pos:start="289:37" pos:end="289:45">lumPixBuf</name><index pos:start="289:46" pos:end="289:63">[<expr pos:start="289:47" pos:end="289:62"><name pos:start="289:47" pos:end="289:47">i</name><operator pos:start="289:48" pos:end="289:48">+</operator><name pos:start="289:49" pos:end="289:62"><name pos:start="289:49" pos:end="289:49">c</name><operator pos:start="289:50" pos:end="289:51">-&gt;</operator><name pos:start="289:52" pos:end="289:62">vLumBufSize</name></name></expr>]</index></name><operator pos:start="289:64" pos:end="289:64">=</operator> <operator pos:start="289:66" pos:end="289:66">(</operator><name pos:start="289:67" pos:end="289:74">uint16_t</name><operator pos:start="289:75" pos:end="289:75">*</operator><operator pos:start="289:76" pos:end="289:76">)</operator><call pos:start="289:77" pos:end="289:93"><name pos:start="289:77" pos:end="289:84">memalign</name><argument_list pos:start="289:85" pos:end="289:93">(<argument pos:start="289:86" pos:end="289:86"><expr pos:start="289:86" pos:end="289:86"><literal type="number" pos:start="289:86" pos:end="289:86">8</literal></expr></argument>, <argument pos:start="289:89" pos:end="289:92"><expr pos:start="289:89" pos:end="289:92"><literal type="number" pos:start="289:89" pos:end="289:92">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for pos:start="291:9" pos:end="293:94">for<control pos:start="291:12" pos:end="291:39">(<init pos:start="291:13" pos:end="291:16"><expr pos:start="291:13" pos:end="291:15"><name pos:start="291:13" pos:end="291:13">i</name><operator pos:start="291:14" pos:end="291:14">=</operator><literal type="number" pos:start="291:15" pos:end="291:15">0</literal></expr>;</init> <condition pos:start="291:18" pos:end="291:34"><expr pos:start="291:18" pos:end="291:33"><name pos:start="291:18" pos:end="291:18">i</name><operator pos:start="291:19" pos:end="291:19">&lt;</operator><name pos:start="291:20" pos:end="291:33"><name pos:start="291:20" pos:end="291:20">c</name><operator pos:start="291:21" pos:end="291:22">-&gt;</operator><name pos:start="291:23" pos:end="291:33">vChrBufSize</name></name></expr>;</condition> <incr pos:start="291:36" pos:end="291:38"><expr pos:start="291:36" pos:end="291:38"><name pos:start="291:36" pos:end="291:36">i</name><operator pos:start="291:37" pos:end="291:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="293:17" pos:end="293:94"><block_content pos:start="293:17" pos:end="293:94">

		<expr_stmt pos:start="293:17" pos:end="293:94"><expr pos:start="293:17" pos:end="293:93"><name pos:start="293:17" pos:end="293:31"><name pos:start="293:17" pos:end="293:17">c</name><operator pos:start="293:18" pos:end="293:19">-&gt;</operator><name pos:start="293:20" pos:end="293:28">chrPixBuf</name><index pos:start="293:29" pos:end="293:31">[<expr pos:start="293:30" pos:end="293:30"><name pos:start="293:30" pos:end="293:30">i</name></expr>]</index></name><operator pos:start="293:32" pos:end="293:32">=</operator> <name pos:start="293:34" pos:end="293:63"><name pos:start="293:34" pos:end="293:34">c</name><operator pos:start="293:35" pos:end="293:36">-&gt;</operator><name pos:start="293:37" pos:end="293:45">chrPixBuf</name><index pos:start="293:46" pos:end="293:63">[<expr pos:start="293:47" pos:end="293:62"><name pos:start="293:47" pos:end="293:47">i</name><operator pos:start="293:48" pos:end="293:48">+</operator><name pos:start="293:49" pos:end="293:62"><name pos:start="293:49" pos:end="293:49">c</name><operator pos:start="293:50" pos:end="293:51">-&gt;</operator><name pos:start="293:52" pos:end="293:62">vChrBufSize</name></name></expr>]</index></name><operator pos:start="293:64" pos:end="293:64">=</operator> <operator pos:start="293:66" pos:end="293:66">(</operator><name pos:start="293:67" pos:end="293:74">uint16_t</name><operator pos:start="293:75" pos:end="293:75">*</operator><operator pos:start="293:76" pos:end="293:76">)</operator><call pos:start="293:77" pos:end="293:93"><name pos:start="293:77" pos:end="293:84">memalign</name><argument_list pos:start="293:85" pos:end="293:93">(<argument pos:start="293:86" pos:end="293:86"><expr pos:start="293:86" pos:end="293:86"><literal type="number" pos:start="293:86" pos:end="293:86">8</literal></expr></argument>, <argument pos:start="293:89" pos:end="293:92"><expr pos:start="293:89" pos:end="293:92"><literal type="number" pos:start="293:89" pos:end="293:92">8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



	<comment type="line" pos:start="297:9" pos:end="297:83">//try to avoid drawing green stuff between the right end and the stride end</comment>

	<for pos:start="299:9" pos:end="299:73">for<control pos:start="299:12" pos:end="299:39">(<init pos:start="299:13" pos:end="299:16"><expr pos:start="299:13" pos:end="299:15"><name pos:start="299:13" pos:end="299:13">i</name><operator pos:start="299:14" pos:end="299:14">=</operator><literal type="number" pos:start="299:15" pos:end="299:15">0</literal></expr>;</init> <condition pos:start="299:18" pos:end="299:34"><expr pos:start="299:18" pos:end="299:33"><name pos:start="299:18" pos:end="299:18">i</name><operator pos:start="299:19" pos:end="299:19">&lt;</operator><name pos:start="299:20" pos:end="299:33"><name pos:start="299:20" pos:end="299:20">c</name><operator pos:start="299:21" pos:end="299:22">-&gt;</operator><name pos:start="299:23" pos:end="299:33">vLumBufSize</name></name></expr>;</condition> <incr pos:start="299:36" pos:end="299:38"><expr pos:start="299:36" pos:end="299:38"><name pos:start="299:36" pos:end="299:36">i</name><operator pos:start="299:37" pos:end="299:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="299:41" pos:end="299:73"><block_content pos:start="299:41" pos:end="299:73"> <expr_stmt pos:start="299:41" pos:end="299:73"><expr pos:start="299:41" pos:end="299:72"><call pos:start="299:41" pos:end="299:72"><name pos:start="299:41" pos:end="299:46">memset</name><argument_list pos:start="299:47" pos:end="299:72">(<argument pos:start="299:48" pos:end="299:62"><expr pos:start="299:48" pos:end="299:62"><name pos:start="299:48" pos:end="299:62"><name pos:start="299:48" pos:end="299:48">c</name><operator pos:start="299:49" pos:end="299:50">-&gt;</operator><name pos:start="299:51" pos:end="299:59">lumPixBuf</name><index pos:start="299:60" pos:end="299:62">[<expr pos:start="299:61" pos:end="299:61"><name pos:start="299:61" pos:end="299:61">i</name></expr>]</index></name></expr></argument>, <argument pos:start="299:65" pos:end="299:65"><expr pos:start="299:65" pos:end="299:65"><literal type="number" pos:start="299:65" pos:end="299:65">0</literal></expr></argument>, <argument pos:start="299:68" pos:end="299:71"><expr pos:start="299:68" pos:end="299:71"><literal type="number" pos:start="299:68" pos:end="299:71">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<for pos:start="301:9" pos:end="301:74">for<control pos:start="301:12" pos:end="301:39">(<init pos:start="301:13" pos:end="301:16"><expr pos:start="301:13" pos:end="301:15"><name pos:start="301:13" pos:end="301:13">i</name><operator pos:start="301:14" pos:end="301:14">=</operator><literal type="number" pos:start="301:15" pos:end="301:15">0</literal></expr>;</init> <condition pos:start="301:18" pos:end="301:34"><expr pos:start="301:18" pos:end="301:33"><name pos:start="301:18" pos:end="301:18">i</name><operator pos:start="301:19" pos:end="301:19">&lt;</operator><name pos:start="301:20" pos:end="301:33"><name pos:start="301:20" pos:end="301:20">c</name><operator pos:start="301:21" pos:end="301:22">-&gt;</operator><name pos:start="301:23" pos:end="301:33">vChrBufSize</name></name></expr>;</condition> <incr pos:start="301:36" pos:end="301:38"><expr pos:start="301:36" pos:end="301:38"><name pos:start="301:36" pos:end="301:36">i</name><operator pos:start="301:37" pos:end="301:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="301:41" pos:end="301:74"><block_content pos:start="301:41" pos:end="301:74"> <expr_stmt pos:start="301:41" pos:end="301:74"><expr pos:start="301:41" pos:end="301:73"><call pos:start="301:41" pos:end="301:73"><name pos:start="301:41" pos:end="301:46">memset</name><argument_list pos:start="301:47" pos:end="301:73">(<argument pos:start="301:48" pos:end="301:62"><expr pos:start="301:48" pos:end="301:62"><name pos:start="301:48" pos:end="301:62"><name pos:start="301:48" pos:end="301:48">c</name><operator pos:start="301:49" pos:end="301:50">-&gt;</operator><name pos:start="301:51" pos:end="301:59">chrPixBuf</name><index pos:start="301:60" pos:end="301:62">[<expr pos:start="301:61" pos:end="301:61"><name pos:start="301:61" pos:end="301:61">i</name></expr>]</index></name></expr></argument>, <argument pos:start="301:65" pos:end="301:66"><expr pos:start="301:65" pos:end="301:66"><literal type="number" pos:start="301:65" pos:end="301:66">64</literal></expr></argument>, <argument pos:start="301:69" pos:end="301:72"><expr pos:start="301:69" pos:end="301:72"><literal type="number" pos:start="301:69" pos:end="301:72">8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



	<macro pos:start="305:9" pos:end="305:34"><name pos:start="305:9" pos:end="305:14">ASSERT</name><argument_list pos:start="305:15" pos:end="305:34">(<argument pos:start="305:16" pos:end="305:33">c-&gt;chrDstH &lt;= dstH</argument>)</argument_list></macro>



	<comment type="line" pos:start="309:9" pos:end="309:40">// pack filter data for mmx code</comment>

	<if_stmt pos:start="311:9" pos:end="331:9"><if pos:start="311:9" pos:end="331:9">if<condition pos:start="311:11" pos:end="311:26">(<expr pos:start="311:12" pos:end="311:25"><name pos:start="311:12" pos:end="311:25"><name pos:start="311:12" pos:end="311:18">cpuCaps</name><operator pos:start="311:19" pos:end="311:19">.</operator><name pos:start="311:20" pos:end="311:25">hasMMX</name></name></expr>)</condition>

	<block pos:start="313:9" pos:end="331:9">{<block_content pos:start="315:17" pos:end="329:49">

		<expr_stmt pos:start="315:17" pos:end="315:103"><expr pos:start="315:17" pos:end="315:102"><name pos:start="315:17" pos:end="315:31"><name pos:start="315:17" pos:end="315:17">c</name><operator pos:start="315:18" pos:end="315:19">-&gt;</operator><name pos:start="315:20" pos:end="315:31">lumMmxFilter</name></name><operator pos:start="315:32" pos:end="315:32">=</operator> <operator pos:start="315:34" pos:end="315:34">(</operator><name pos:start="315:35" pos:end="315:41">int16_t</name><operator pos:start="315:42" pos:end="315:42">*</operator><operator pos:start="315:43" pos:end="315:43">)</operator><call pos:start="315:44" pos:end="315:102"><name pos:start="315:44" pos:end="315:51">memalign</name><argument_list pos:start="315:52" pos:end="315:102">(<argument pos:start="315:53" pos:end="315:53"><expr pos:start="315:53" pos:end="315:53"><literal type="number" pos:start="315:53" pos:end="315:53">8</literal></expr></argument>, <argument pos:start="315:56" pos:end="315:101"><expr pos:start="315:56" pos:end="315:101"><name pos:start="315:56" pos:end="315:72"><name pos:start="315:56" pos:end="315:56">c</name><operator pos:start="315:57" pos:end="315:58">-&gt;</operator><name pos:start="315:59" pos:end="315:72">vLumFilterSize</name></name><operator pos:start="315:73" pos:end="315:73">*</operator>      <name pos:start="315:80" pos:end="315:83">dstH</name><operator pos:start="315:84" pos:end="315:84">*</operator><literal type="number" pos:start="315:85" pos:end="315:85">4</literal><operator pos:start="315:86" pos:end="315:86">*</operator><sizeof pos:start="315:87" pos:end="315:101">sizeof<argument_list pos:start="315:93" pos:end="315:101">(<argument pos:start="315:94" pos:end="315:100"><expr pos:start="315:94" pos:end="315:100"><name pos:start="315:94" pos:end="315:100">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="317:17" pos:end="317:103"><expr pos:start="317:17" pos:end="317:102"><name pos:start="317:17" pos:end="317:31"><name pos:start="317:17" pos:end="317:17">c</name><operator pos:start="317:18" pos:end="317:19">-&gt;</operator><name pos:start="317:20" pos:end="317:31">chrMmxFilter</name></name><operator pos:start="317:32" pos:end="317:32">=</operator> <operator pos:start="317:34" pos:end="317:34">(</operator><name pos:start="317:35" pos:end="317:41">int16_t</name><operator pos:start="317:42" pos:end="317:42">*</operator><operator pos:start="317:43" pos:end="317:43">)</operator><call pos:start="317:44" pos:end="317:102"><name pos:start="317:44" pos:end="317:51">memalign</name><argument_list pos:start="317:52" pos:end="317:102">(<argument pos:start="317:53" pos:end="317:53"><expr pos:start="317:53" pos:end="317:53"><literal type="number" pos:start="317:53" pos:end="317:53">8</literal></expr></argument>, <argument pos:start="317:56" pos:end="317:101"><expr pos:start="317:56" pos:end="317:101"><name pos:start="317:56" pos:end="317:72"><name pos:start="317:56" pos:end="317:56">c</name><operator pos:start="317:57" pos:end="317:58">-&gt;</operator><name pos:start="317:59" pos:end="317:72">vChrFilterSize</name></name><operator pos:start="317:73" pos:end="317:73">*</operator><name pos:start="317:74" pos:end="317:83"><name pos:start="317:74" pos:end="317:74">c</name><operator pos:start="317:75" pos:end="317:76">-&gt;</operator><name pos:start="317:77" pos:end="317:83">chrDstH</name></name><operator pos:start="317:84" pos:end="317:84">*</operator><literal type="number" pos:start="317:85" pos:end="317:85">4</literal><operator pos:start="317:86" pos:end="317:86">*</operator><sizeof pos:start="317:87" pos:end="317:101">sizeof<argument_list pos:start="317:93" pos:end="317:101">(<argument pos:start="317:94" pos:end="317:100"><expr pos:start="317:94" pos:end="317:100"><name pos:start="317:94" pos:end="317:100">int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for pos:start="319:17" pos:end="323:49">for<control pos:start="319:20" pos:end="319:55">(<init pos:start="319:21" pos:end="319:24"><expr pos:start="319:21" pos:end="319:23"><name pos:start="319:21" pos:end="319:21">i</name><operator pos:start="319:22" pos:end="319:22">=</operator><literal type="number" pos:start="319:23" pos:end="319:23">0</literal></expr>;</init> <condition pos:start="319:26" pos:end="319:50"><expr pos:start="319:26" pos:end="319:49"><name pos:start="319:26" pos:end="319:26">i</name><operator pos:start="319:27" pos:end="319:27">&lt;</operator><name pos:start="319:28" pos:end="319:44"><name pos:start="319:28" pos:end="319:28">c</name><operator pos:start="319:29" pos:end="319:30">-&gt;</operator><name pos:start="319:31" pos:end="319:44">vLumFilterSize</name></name><operator pos:start="319:45" pos:end="319:45">*</operator><name pos:start="319:46" pos:end="319:49">dstH</name></expr>;</condition> <incr pos:start="319:52" pos:end="319:54"><expr pos:start="319:52" pos:end="319:54"><name pos:start="319:52" pos:end="319:52">i</name><operator pos:start="319:53" pos:end="319:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="321:25" pos:end="323:49"><block_content pos:start="321:25" pos:end="323:49">

			<expr_stmt pos:start="321:25" pos:end="323:49"><expr pos:start="321:25" pos:end="323:48"><name pos:start="321:25" pos:end="321:44"><name pos:start="321:25" pos:end="321:25">c</name><operator pos:start="321:26" pos:end="321:27">-&gt;</operator><name pos:start="321:28" pos:end="321:39">lumMmxFilter</name><index pos:start="321:40" pos:end="321:44">[<expr pos:start="321:41" pos:end="321:43"><literal type="number" pos:start="321:41" pos:end="321:41">4</literal><operator pos:start="321:42" pos:end="321:42">*</operator><name pos:start="321:43" pos:end="321:43">i</name></expr>]</index></name><operator pos:start="321:45" pos:end="321:45">=</operator><name pos:start="321:46" pos:end="321:67"><name pos:start="321:46" pos:end="321:46">c</name><operator pos:start="321:47" pos:end="321:48">-&gt;</operator><name pos:start="321:49" pos:end="321:60">lumMmxFilter</name><index pos:start="321:61" pos:end="321:67">[<expr pos:start="321:62" pos:end="321:66"><literal type="number" pos:start="321:62" pos:end="321:62">4</literal><operator pos:start="321:63" pos:end="321:63">*</operator><name pos:start="321:64" pos:end="321:64">i</name><operator pos:start="321:65" pos:end="321:65">+</operator><literal type="number" pos:start="321:66" pos:end="321:66">1</literal></expr>]</index></name><operator pos:start="321:68" pos:end="321:68">=</operator><name pos:start="321:69" pos:end="321:90"><name pos:start="321:69" pos:end="321:69">c</name><operator pos:start="321:70" pos:end="321:71">-&gt;</operator><name pos:start="321:72" pos:end="321:83">lumMmxFilter</name><index pos:start="321:84" pos:end="321:90">[<expr pos:start="321:85" pos:end="321:89"><literal type="number" pos:start="321:85" pos:end="321:85">4</literal><operator pos:start="321:86" pos:end="321:86">*</operator><name pos:start="321:87" pos:end="321:87">i</name><operator pos:start="321:88" pos:end="321:88">+</operator><literal type="number" pos:start="321:89" pos:end="321:89">2</literal></expr>]</index></name><operator pos:start="321:91" pos:end="321:91">=</operator><name pos:start="321:92" pos:end="321:113"><name pos:start="321:92" pos:end="321:92">c</name><operator pos:start="321:93" pos:end="321:94">-&gt;</operator><name pos:start="321:95" pos:end="321:106">lumMmxFilter</name><index pos:start="321:107" pos:end="321:113">[<expr pos:start="321:108" pos:end="321:112"><literal type="number" pos:start="321:108" pos:end="321:108">4</literal><operator pos:start="321:109" pos:end="321:109">*</operator><name pos:start="321:110" pos:end="321:110">i</name><operator pos:start="321:111" pos:end="321:111">+</operator><literal type="number" pos:start="321:112" pos:end="321:112">3</literal></expr>]</index></name><operator pos:start="321:114" pos:end="321:114">=</operator>

				<name pos:start="323:33" pos:end="323:48"><name pos:start="323:33" pos:end="323:33">c</name><operator pos:start="323:34" pos:end="323:35">-&gt;</operator><name pos:start="323:36" pos:end="323:45">vLumFilter</name><index pos:start="323:46" pos:end="323:48">[<expr pos:start="323:47" pos:end="323:47"><name pos:start="323:47" pos:end="323:47">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

		<for pos:start="325:17" pos:end="329:49">for<control pos:start="325:20" pos:end="325:61">(<init pos:start="325:21" pos:end="325:24"><expr pos:start="325:21" pos:end="325:23"><name pos:start="325:21" pos:end="325:21">i</name><operator pos:start="325:22" pos:end="325:22">=</operator><literal type="number" pos:start="325:23" pos:end="325:23">0</literal></expr>;</init> <condition pos:start="325:26" pos:end="325:56"><expr pos:start="325:26" pos:end="325:55"><name pos:start="325:26" pos:end="325:26">i</name><operator pos:start="325:27" pos:end="325:27">&lt;</operator><name pos:start="325:28" pos:end="325:44"><name pos:start="325:28" pos:end="325:28">c</name><operator pos:start="325:29" pos:end="325:30">-&gt;</operator><name pos:start="325:31" pos:end="325:44">vChrFilterSize</name></name><operator pos:start="325:45" pos:end="325:45">*</operator><name pos:start="325:46" pos:end="325:55"><name pos:start="325:46" pos:end="325:46">c</name><operator pos:start="325:47" pos:end="325:48">-&gt;</operator><name pos:start="325:49" pos:end="325:55">chrDstH</name></name></expr>;</condition> <incr pos:start="325:58" pos:end="325:60"><expr pos:start="325:58" pos:end="325:60"><name pos:start="325:58" pos:end="325:58">i</name><operator pos:start="325:59" pos:end="325:60">++</operator></expr></incr>)</control><block type="pseudo" pos:start="327:25" pos:end="329:49"><block_content pos:start="327:25" pos:end="329:49">

			<expr_stmt pos:start="327:25" pos:end="329:49"><expr pos:start="327:25" pos:end="329:48"><name pos:start="327:25" pos:end="327:44"><name pos:start="327:25" pos:end="327:25">c</name><operator pos:start="327:26" pos:end="327:27">-&gt;</operator><name pos:start="327:28" pos:end="327:39">chrMmxFilter</name><index pos:start="327:40" pos:end="327:44">[<expr pos:start="327:41" pos:end="327:43"><literal type="number" pos:start="327:41" pos:end="327:41">4</literal><operator pos:start="327:42" pos:end="327:42">*</operator><name pos:start="327:43" pos:end="327:43">i</name></expr>]</index></name><operator pos:start="327:45" pos:end="327:45">=</operator><name pos:start="327:46" pos:end="327:67"><name pos:start="327:46" pos:end="327:46">c</name><operator pos:start="327:47" pos:end="327:48">-&gt;</operator><name pos:start="327:49" pos:end="327:60">chrMmxFilter</name><index pos:start="327:61" pos:end="327:67">[<expr pos:start="327:62" pos:end="327:66"><literal type="number" pos:start="327:62" pos:end="327:62">4</literal><operator pos:start="327:63" pos:end="327:63">*</operator><name pos:start="327:64" pos:end="327:64">i</name><operator pos:start="327:65" pos:end="327:65">+</operator><literal type="number" pos:start="327:66" pos:end="327:66">1</literal></expr>]</index></name><operator pos:start="327:68" pos:end="327:68">=</operator><name pos:start="327:69" pos:end="327:90"><name pos:start="327:69" pos:end="327:69">c</name><operator pos:start="327:70" pos:end="327:71">-&gt;</operator><name pos:start="327:72" pos:end="327:83">chrMmxFilter</name><index pos:start="327:84" pos:end="327:90">[<expr pos:start="327:85" pos:end="327:89"><literal type="number" pos:start="327:85" pos:end="327:85">4</literal><operator pos:start="327:86" pos:end="327:86">*</operator><name pos:start="327:87" pos:end="327:87">i</name><operator pos:start="327:88" pos:end="327:88">+</operator><literal type="number" pos:start="327:89" pos:end="327:89">2</literal></expr>]</index></name><operator pos:start="327:91" pos:end="327:91">=</operator><name pos:start="327:92" pos:end="327:113"><name pos:start="327:92" pos:end="327:92">c</name><operator pos:start="327:93" pos:end="327:94">-&gt;</operator><name pos:start="327:95" pos:end="327:106">chrMmxFilter</name><index pos:start="327:107" pos:end="327:113">[<expr pos:start="327:108" pos:end="327:112"><literal type="number" pos:start="327:108" pos:end="327:108">4</literal><operator pos:start="327:109" pos:end="327:109">*</operator><name pos:start="327:110" pos:end="327:110">i</name><operator pos:start="327:111" pos:end="327:111">+</operator><literal type="number" pos:start="327:112" pos:end="327:112">3</literal></expr>]</index></name><operator pos:start="327:114" pos:end="327:114">=</operator>

				<name pos:start="329:33" pos:end="329:48"><name pos:start="329:33" pos:end="329:33">c</name><operator pos:start="329:34" pos:end="329:35">-&gt;</operator><name pos:start="329:36" pos:end="329:45">vChrFilter</name><index pos:start="329:46" pos:end="329:48">[<expr pos:start="329:47" pos:end="329:47"><name pos:start="329:47" pos:end="329:47">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="335:9" pos:end="409:9"><if pos:start="335:9" pos:end="409:9">if<condition pos:start="335:11" pos:end="335:32">(<expr pos:start="335:12" pos:end="335:31"><name pos:start="335:12" pos:end="335:16">flags</name><operator pos:start="335:17" pos:end="335:17">&amp;</operator><name pos:start="335:18" pos:end="335:31">SWS_PRINT_INFO</name></expr>)</condition>

	<block pos:start="337:9" pos:end="409:9">{<block_content pos:start="341:17" pos:end="407:53">

<cpp:ifdef pos:start="339:1" pos:end="339:18">#<cpp:directive pos:start="339:2" pos:end="339:6">ifdef</cpp:directive> <name pos:start="339:8" pos:end="339:18">DITHER1XBPP</name></cpp:ifdef>

		<decl_stmt pos:start="341:17" pos:end="344:0"><decl pos:start="341:17" pos:end="341:41"><type pos:start="341:17" pos:end="341:22"><name pos:start="341:17" pos:end="341:20">char</name> <modifier pos:start="341:22" pos:end="341:22">*</modifier></type><name pos:start="341:23" pos:end="341:28">dither</name><init pos:start="341:29" pos:end="341:41">= <expr pos:start="341:31" pos:end="341:41"><literal type="string" pos:start="341:31" pos:end="341:41">" dithered"</literal></expr></init></decl>;</decl_stmt>

<cpp:else pos:start="343:1" pos:end="343:5">#<cpp:directive pos:start="343:2" pos:end="343:5">else</cpp:directive></cpp:else>

		<decl_stmt pos:start="345:17" pos:end="348:0"><decl pos:start="345:17" pos:end="345:32"><type pos:start="345:17" pos:end="345:22"><name pos:start="345:17" pos:end="345:20">char</name> <modifier pos:start="345:22" pos:end="345:22">*</modifier></type><name pos:start="345:23" pos:end="345:28">dither</name><init pos:start="345:29" pos:end="345:32">= <expr pos:start="345:31" pos:end="345:32"><literal type="string" pos:start="345:31" pos:end="345:32">""</literal></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="347:1" pos:end="347:6">#<cpp:directive pos:start="347:2" pos:end="347:6">endif</cpp:directive></cpp:endif>

		<if_stmt pos:start="349:17" pos:end="375:76"><if pos:start="349:17" pos:end="351:78">if<condition pos:start="349:19" pos:end="349:43">(<expr pos:start="349:20" pos:end="349:42"><name pos:start="349:20" pos:end="349:24">flags</name><operator pos:start="349:25" pos:end="349:25">&amp;</operator><name pos:start="349:26" pos:end="349:42">SWS_FAST_BILINEAR</name></expr>)</condition><block type="pseudo" pos:start="351:25" pos:end="351:78"><block_content pos:start="351:25" pos:end="351:78">

			<expr_stmt pos:start="351:25" pos:end="351:78"><expr pos:start="351:25" pos:end="351:77"><call pos:start="351:25" pos:end="351:77"><name pos:start="351:25" pos:end="351:31">fprintf</name><argument_list pos:start="351:32" pos:end="351:77">(<argument pos:start="351:33" pos:end="351:38"><expr pos:start="351:33" pos:end="351:38"><name pos:start="351:33" pos:end="351:38">stderr</name></expr></argument>, <argument pos:start="351:41" pos:end="351:76"><expr pos:start="351:41" pos:end="351:76"><literal type="string" pos:start="351:41" pos:end="351:76">"\nSwScaler: FAST_BILINEAR scaler, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="353:17" pos:end="355:73">else if<condition pos:start="353:24" pos:end="353:43">(<expr pos:start="353:25" pos:end="353:42"><name pos:start="353:25" pos:end="353:29">flags</name><operator pos:start="353:30" pos:end="353:30">&amp;</operator><name pos:start="353:31" pos:end="353:42">SWS_BILINEAR</name></expr>)</condition><block type="pseudo" pos:start="355:25" pos:end="355:73"><block_content pos:start="355:25" pos:end="355:73">

			<expr_stmt pos:start="355:25" pos:end="355:73"><expr pos:start="355:25" pos:end="355:72"><call pos:start="355:25" pos:end="355:72"><name pos:start="355:25" pos:end="355:31">fprintf</name><argument_list pos:start="355:32" pos:end="355:72">(<argument pos:start="355:33" pos:end="355:38"><expr pos:start="355:33" pos:end="355:38"><name pos:start="355:33" pos:end="355:38">stderr</name></expr></argument>, <argument pos:start="355:41" pos:end="355:71"><expr pos:start="355:41" pos:end="355:71"><literal type="string" pos:start="355:41" pos:end="355:71">"\nSwScaler: BILINEAR scaler, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="357:17" pos:end="359:72">else if<condition pos:start="357:24" pos:end="357:42">(<expr pos:start="357:25" pos:end="357:41"><name pos:start="357:25" pos:end="357:29">flags</name><operator pos:start="357:30" pos:end="357:30">&amp;</operator><name pos:start="357:31" pos:end="357:41">SWS_BICUBIC</name></expr>)</condition><block type="pseudo" pos:start="359:25" pos:end="359:72"><block_content pos:start="359:25" pos:end="359:72">

			<expr_stmt pos:start="359:25" pos:end="359:72"><expr pos:start="359:25" pos:end="359:71"><call pos:start="359:25" pos:end="359:71"><name pos:start="359:25" pos:end="359:31">fprintf</name><argument_list pos:start="359:32" pos:end="359:71">(<argument pos:start="359:33" pos:end="359:38"><expr pos:start="359:33" pos:end="359:38"><name pos:start="359:33" pos:end="359:38">stderr</name></expr></argument>, <argument pos:start="359:41" pos:end="359:70"><expr pos:start="359:41" pos:end="359:70"><literal type="string" pos:start="359:41" pos:end="359:70">"\nSwScaler: BICUBIC scaler, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="361:17" pos:end="363:77">else if<condition pos:start="361:24" pos:end="361:36">(<expr pos:start="361:25" pos:end="361:35"><name pos:start="361:25" pos:end="361:29">flags</name><operator pos:start="361:30" pos:end="361:30">&amp;</operator><name pos:start="361:31" pos:end="361:35">SWS_X</name></expr>)</condition><block type="pseudo" pos:start="363:25" pos:end="363:77"><block_content pos:start="363:25" pos:end="363:77">

			<expr_stmt pos:start="363:25" pos:end="363:77"><expr pos:start="363:25" pos:end="363:76"><call pos:start="363:25" pos:end="363:76"><name pos:start="363:25" pos:end="363:31">fprintf</name><argument_list pos:start="363:32" pos:end="363:76">(<argument pos:start="363:33" pos:end="363:38"><expr pos:start="363:33" pos:end="363:38"><name pos:start="363:33" pos:end="363:38">stderr</name></expr></argument>, <argument pos:start="363:41" pos:end="363:75"><expr pos:start="363:41" pos:end="363:75"><literal type="string" pos:start="363:41" pos:end="363:75">"\nSwScaler: Experimental scaler, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="365:17" pos:end="367:89">else if<condition pos:start="365:24" pos:end="365:40">(<expr pos:start="365:25" pos:end="365:39"><name pos:start="365:25" pos:end="365:29">flags</name><operator pos:start="365:30" pos:end="365:30">&amp;</operator><name pos:start="365:31" pos:end="365:39">SWS_POINT</name></expr>)</condition><block type="pseudo" pos:start="367:25" pos:end="367:89"><block_content pos:start="367:25" pos:end="367:89">

			<expr_stmt pos:start="367:25" pos:end="367:89"><expr pos:start="367:25" pos:end="367:88"><call pos:start="367:25" pos:end="367:88"><name pos:start="367:25" pos:end="367:31">fprintf</name><argument_list pos:start="367:32" pos:end="367:88">(<argument pos:start="367:33" pos:end="367:38"><expr pos:start="367:33" pos:end="367:38"><name pos:start="367:33" pos:end="367:38">stderr</name></expr></argument>, <argument pos:start="367:41" pos:end="367:87"><expr pos:start="367:41" pos:end="367:87"><literal type="string" pos:start="367:41" pos:end="367:87">"\nSwScaler: Nearest Neighbor / POINT scaler, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="369:17" pos:end="371:80">else if<condition pos:start="369:24" pos:end="369:39">(<expr pos:start="369:25" pos:end="369:38"><name pos:start="369:25" pos:end="369:29">flags</name><operator pos:start="369:30" pos:end="369:30">&amp;</operator><name pos:start="369:31" pos:end="369:38">SWS_AREA</name></expr>)</condition><block type="pseudo" pos:start="371:25" pos:end="371:80"><block_content pos:start="371:25" pos:end="371:80">

			<expr_stmt pos:start="371:25" pos:end="371:80"><expr pos:start="371:25" pos:end="371:79"><call pos:start="371:25" pos:end="371:79"><name pos:start="371:25" pos:end="371:31">fprintf</name><argument_list pos:start="371:32" pos:end="371:79">(<argument pos:start="371:33" pos:end="371:38"><expr pos:start="371:33" pos:end="371:38"><name pos:start="371:33" pos:end="371:38">stderr</name></expr></argument>, <argument pos:start="371:41" pos:end="371:78"><expr pos:start="371:41" pos:end="371:78"><literal type="string" pos:start="371:41" pos:end="371:78">"\nSwScaler: Area Averageing scaler, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="373:17" pos:end="375:76">else<block type="pseudo" pos:start="375:25" pos:end="375:76"><block_content pos:start="375:25" pos:end="375:76">

			<expr_stmt pos:start="375:25" pos:end="375:76"><expr pos:start="375:25" pos:end="375:75"><call pos:start="375:25" pos:end="375:75"><name pos:start="375:25" pos:end="375:31">fprintf</name><argument_list pos:start="375:32" pos:end="375:75">(<argument pos:start="375:33" pos:end="375:38"><expr pos:start="375:33" pos:end="375:38"><name pos:start="375:33" pos:end="375:38">stderr</name></expr></argument>, <argument pos:start="375:41" pos:end="375:74"><expr pos:start="375:41" pos:end="375:74"><literal type="string" pos:start="375:41" pos:end="375:74">"\nSwScaler: ehh flags invalid?! "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



		<if_stmt pos:start="379:17" pos:end="389:86"><if pos:start="379:17" pos:end="383:94">if<condition pos:start="379:19" pos:end="379:70">(<expr pos:start="379:20" pos:end="379:69"><name pos:start="379:20" pos:end="379:28">dstFormat</name><operator pos:start="379:29" pos:end="379:30">==</operator><name pos:start="379:31" pos:end="379:42">IMGFMT_BGR15</name> <operator pos:start="379:44" pos:end="379:45">||</operator> <name pos:start="379:47" pos:end="379:55">dstFormat</name><operator pos:start="379:56" pos:end="379:57">==</operator><name pos:start="379:58" pos:end="379:69">IMGFMT_BGR16</name></expr>)</condition><block type="pseudo" pos:start="381:25" pos:end="383:94"><block_content pos:start="381:25" pos:end="383:94">

			<expr_stmt pos:start="381:25" pos:end="383:94"><expr pos:start="381:25" pos:end="383:93"><call pos:start="381:25" pos:end="383:93"><name pos:start="381:25" pos:end="381:31">fprintf</name><argument_list pos:start="381:32" pos:end="383:93">(<argument pos:start="381:33" pos:end="381:38"><expr pos:start="381:33" pos:end="381:38"><name pos:start="381:33" pos:end="381:38">stderr</name></expr></argument>, <argument pos:start="381:41" pos:end="381:58"><expr pos:start="381:41" pos:end="381:58"><literal type="string" pos:start="381:41" pos:end="381:58">"from %s to%s %s "</literal></expr></argument>, 

				<argument pos:start="383:33" pos:end="383:57"><expr pos:start="383:33" pos:end="383:57"><call pos:start="383:33" pos:end="383:57"><name pos:start="383:33" pos:end="383:46">vo_format_name</name><argument_list pos:start="383:47" pos:end="383:57">(<argument pos:start="383:48" pos:end="383:56"><expr pos:start="383:48" pos:end="383:56"><name pos:start="383:48" pos:end="383:56">srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="383:60" pos:end="383:65"><expr pos:start="383:60" pos:end="383:65"><name pos:start="383:60" pos:end="383:65">dither</name></expr></argument>, <argument pos:start="383:68" pos:end="383:92"><expr pos:start="383:68" pos:end="383:92"><call pos:start="383:68" pos:end="383:92"><name pos:start="383:68" pos:end="383:81">vo_format_name</name><argument_list pos:start="383:82" pos:end="383:92">(<argument pos:start="383:83" pos:end="383:91"><expr pos:start="383:83" pos:end="383:91"><name pos:start="383:83" pos:end="383:91">dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="385:17" pos:end="389:86">else<block type="pseudo" pos:start="387:25" pos:end="389:86"><block_content pos:start="387:25" pos:end="389:86">

			<expr_stmt pos:start="387:25" pos:end="389:86"><expr pos:start="387:25" pos:end="389:85"><call pos:start="387:25" pos:end="389:85"><name pos:start="387:25" pos:end="387:31">fprintf</name><argument_list pos:start="387:32" pos:end="389:85">(<argument pos:start="387:33" pos:end="387:38"><expr pos:start="387:33" pos:end="387:38"><name pos:start="387:33" pos:end="387:38">stderr</name></expr></argument>, <argument pos:start="387:41" pos:end="387:56"><expr pos:start="387:41" pos:end="387:56"><literal type="string" pos:start="387:41" pos:end="387:56">"from %s to %s "</literal></expr></argument>, 

				<argument pos:start="389:33" pos:end="389:57"><expr pos:start="389:33" pos:end="389:57"><call pos:start="389:33" pos:end="389:57"><name pos:start="389:33" pos:end="389:46">vo_format_name</name><argument_list pos:start="389:47" pos:end="389:57">(<argument pos:start="389:48" pos:end="389:56"><expr pos:start="389:48" pos:end="389:56"><name pos:start="389:48" pos:end="389:56">srcFormat</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="389:60" pos:end="389:84"><expr pos:start="389:60" pos:end="389:84"><call pos:start="389:60" pos:end="389:84"><name pos:start="389:60" pos:end="389:73">vo_format_name</name><argument_list pos:start="389:74" pos:end="389:84">(<argument pos:start="389:75" pos:end="389:83"><expr pos:start="389:75" pos:end="389:83"><name pos:start="389:75" pos:end="389:83">dstFormat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



		<if_stmt pos:start="393:17" pos:end="407:53"><if pos:start="393:17" pos:end="395:56">if<condition pos:start="393:19" pos:end="393:35">(<expr pos:start="393:20" pos:end="393:34"><name pos:start="393:20" pos:end="393:34"><name pos:start="393:20" pos:end="393:26">cpuCaps</name><operator pos:start="393:27" pos:end="393:27">.</operator><name pos:start="393:28" pos:end="393:34">hasMMX2</name></name></expr>)</condition><block type="pseudo" pos:start="395:25" pos:end="395:56"><block_content pos:start="395:25" pos:end="395:56">

			<expr_stmt pos:start="395:25" pos:end="395:56"><expr pos:start="395:25" pos:end="395:55"><call pos:start="395:25" pos:end="395:55"><name pos:start="395:25" pos:end="395:31">fprintf</name><argument_list pos:start="395:32" pos:end="395:55">(<argument pos:start="395:33" pos:end="395:38"><expr pos:start="395:33" pos:end="395:38"><name pos:start="395:33" pos:end="395:38">stderr</name></expr></argument>, <argument pos:start="395:41" pos:end="395:54"><expr pos:start="395:41" pos:end="395:54"><literal type="string" pos:start="395:41" pos:end="395:54">"using MMX2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="397:17" pos:end="399:57">else if<condition pos:start="397:24" pos:end="397:41">(<expr pos:start="397:25" pos:end="397:40"><name pos:start="397:25" pos:end="397:40"><name pos:start="397:25" pos:end="397:31">cpuCaps</name><operator pos:start="397:32" pos:end="397:32">.</operator><name pos:start="397:33" pos:end="397:40">has3DNow</name></name></expr>)</condition><block type="pseudo" pos:start="399:25" pos:end="399:57"><block_content pos:start="399:25" pos:end="399:57">

			<expr_stmt pos:start="399:25" pos:end="399:57"><expr pos:start="399:25" pos:end="399:56"><call pos:start="399:25" pos:end="399:56"><name pos:start="399:25" pos:end="399:31">fprintf</name><argument_list pos:start="399:32" pos:end="399:56">(<argument pos:start="399:33" pos:end="399:38"><expr pos:start="399:33" pos:end="399:38"><name pos:start="399:33" pos:end="399:38">stderr</name></expr></argument>, <argument pos:start="399:41" pos:end="399:55"><expr pos:start="399:41" pos:end="399:55"><literal type="string" pos:start="399:41" pos:end="399:55">"using 3DNOW\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="401:17" pos:end="403:55">else if<condition pos:start="401:24" pos:end="401:39">(<expr pos:start="401:25" pos:end="401:38"><name pos:start="401:25" pos:end="401:38"><name pos:start="401:25" pos:end="401:31">cpuCaps</name><operator pos:start="401:32" pos:end="401:32">.</operator><name pos:start="401:33" pos:end="401:38">hasMMX</name></name></expr>)</condition><block type="pseudo" pos:start="403:25" pos:end="403:55"><block_content pos:start="403:25" pos:end="403:55">

			<expr_stmt pos:start="403:25" pos:end="403:55"><expr pos:start="403:25" pos:end="403:54"><call pos:start="403:25" pos:end="403:54"><name pos:start="403:25" pos:end="403:31">fprintf</name><argument_list pos:start="403:32" pos:end="403:54">(<argument pos:start="403:33" pos:end="403:38"><expr pos:start="403:33" pos:end="403:38"><name pos:start="403:33" pos:end="403:38">stderr</name></expr></argument>, <argument pos:start="403:41" pos:end="403:53"><expr pos:start="403:41" pos:end="403:53"><literal type="string" pos:start="403:41" pos:end="403:53">"using MMX\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<else pos:start="405:17" pos:end="407:53">else<block type="pseudo" pos:start="407:25" pos:end="407:53"><block_content pos:start="407:25" pos:end="407:53">

			<expr_stmt pos:start="407:25" pos:end="407:53"><expr pos:start="407:25" pos:end="407:52"><call pos:start="407:25" pos:end="407:52"><name pos:start="407:25" pos:end="407:31">fprintf</name><argument_list pos:start="407:32" pos:end="407:52">(<argument pos:start="407:33" pos:end="407:38"><expr pos:start="407:33" pos:end="407:38"><name pos:start="407:33" pos:end="407:38">stderr</name></expr></argument>, <argument pos:start="407:41" pos:end="407:51"><expr pos:start="407:41" pos:end="407:51"><literal type="string" pos:start="407:41" pos:end="407:51">"using C\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	</block_content>}</block></if></if_stmt>



	<if_stmt pos:start="413:9" pos:end="539:9"><if pos:start="413:9" pos:end="539:9">if<condition pos:start="413:11" pos:end="413:47">(<expr pos:start="413:12" pos:end="413:46"><operator pos:start="413:12" pos:end="413:12">(</operator><name pos:start="413:13" pos:end="413:17">flags</name> <operator pos:start="413:19" pos:end="413:19">&amp;</operator> <name pos:start="413:21" pos:end="413:34">SWS_PRINT_INFO</name><operator pos:start="413:35" pos:end="413:35">)</operator> <operator pos:start="413:37" pos:end="413:38">&amp;&amp;</operator> <name pos:start="413:40" pos:end="413:46">verbose</name></expr>)</condition>

	<block pos:start="415:9" pos:end="539:9">{<block_content pos:start="417:17" pos:end="537:77">

		<if_stmt pos:start="417:17" pos:end="479:17"><if pos:start="417:17" pos:end="457:17">if<condition pos:start="417:19" pos:end="417:34">(<expr pos:start="417:20" pos:end="417:33"><name pos:start="417:20" pos:end="417:33"><name pos:start="417:20" pos:end="417:26">cpuCaps</name><operator pos:start="417:27" pos:end="417:27">.</operator><name pos:start="417:28" pos:end="417:33">hasMMX</name></name></expr>)</condition>

		<block pos:start="419:17" pos:end="457:17">{<block_content pos:start="421:25" pos:end="455:25">

			<if_stmt pos:start="421:25" pos:end="455:25"><if pos:start="421:25" pos:end="423:109">if<condition pos:start="421:27" pos:end="421:73">(<expr pos:start="421:28" pos:end="421:72"><name pos:start="421:28" pos:end="421:43"><name pos:start="421:28" pos:end="421:28">c</name><operator pos:start="421:29" pos:end="421:30">-&gt;</operator><name pos:start="421:31" pos:end="421:43">canMMX2BeUsed</name></name> <operator pos:start="421:45" pos:end="421:46">&amp;&amp;</operator> <operator pos:start="421:48" pos:end="421:48">(</operator><name pos:start="421:49" pos:end="421:53">flags</name><operator pos:start="421:54" pos:end="421:54">&amp;</operator><name pos:start="421:55" pos:end="421:71">SWS_FAST_BILINEAR</name><operator pos:start="421:72" pos:end="421:72">)</operator></expr>)</condition><block type="pseudo" pos:start="423:33" pos:end="423:109"><block_content pos:start="423:33" pos:end="423:109">

				<expr_stmt pos:start="423:33" pos:end="423:109"><expr pos:start="423:33" pos:end="423:108"><call pos:start="423:33" pos:end="423:108"><name pos:start="423:33" pos:end="423:38">printf</name><argument_list pos:start="423:39" pos:end="423:108">(<argument pos:start="423:40" pos:end="423:107"><expr pos:start="423:40" pos:end="423:107"><literal type="string" pos:start="423:40" pos:end="423:107">"SwScaler: using FAST_BILINEAR MMX2 scaler for horizontal scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

			<else pos:start="425:25" pos:end="455:25">else

			<block pos:start="427:25" pos:end="455:25">{<block_content pos:start="429:33" pos:end="453:120">

				<if_stmt pos:start="429:33" pos:end="439:118"><if pos:start="429:33" pos:end="431:118">if<condition pos:start="429:35" pos:end="429:56">(<expr pos:start="429:36" pos:end="429:55"><name pos:start="429:36" pos:end="429:52"><name pos:start="429:36" pos:end="429:36">c</name><operator pos:start="429:37" pos:end="429:38">-&gt;</operator><name pos:start="429:39" pos:end="429:52">hLumFilterSize</name></name><operator pos:start="429:53" pos:end="429:54">==</operator><literal type="number" pos:start="429:55" pos:end="429:55">4</literal></expr>)</condition><block type="pseudo" pos:start="431:41" pos:end="431:118"><block_content pos:start="431:41" pos:end="431:118">

					<expr_stmt pos:start="431:41" pos:end="431:118"><expr pos:start="431:41" pos:end="431:117"><call pos:start="431:41" pos:end="431:117"><name pos:start="431:41" pos:end="431:46">printf</name><argument_list pos:start="431:47" pos:end="431:117">(<argument pos:start="431:48" pos:end="431:116"><expr pos:start="431:48" pos:end="431:116"><literal type="string" pos:start="431:48" pos:end="431:116">"SwScaler: using 4-tap MMX scaler for horizontal luminance scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

				<if type="elseif" pos:start="433:33" pos:end="435:118">else if<condition pos:start="433:40" pos:end="433:61">(<expr pos:start="433:41" pos:end="433:60"><name pos:start="433:41" pos:end="433:57"><name pos:start="433:41" pos:end="433:41">c</name><operator pos:start="433:42" pos:end="433:43">-&gt;</operator><name pos:start="433:44" pos:end="433:57">hLumFilterSize</name></name><operator pos:start="433:58" pos:end="433:59">==</operator><literal type="number" pos:start="433:60" pos:end="433:60">8</literal></expr>)</condition><block type="pseudo" pos:start="435:41" pos:end="435:118"><block_content pos:start="435:41" pos:end="435:118">

					<expr_stmt pos:start="435:41" pos:end="435:118"><expr pos:start="435:41" pos:end="435:117"><call pos:start="435:41" pos:end="435:117"><name pos:start="435:41" pos:end="435:46">printf</name><argument_list pos:start="435:47" pos:end="435:117">(<argument pos:start="435:48" pos:end="435:116"><expr pos:start="435:48" pos:end="435:116"><literal type="string" pos:start="435:48" pos:end="435:116">"SwScaler: using 8-tap MMX scaler for horizontal luminance scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

				<else pos:start="437:33" pos:end="439:118">else<block type="pseudo" pos:start="439:41" pos:end="439:118"><block_content pos:start="439:41" pos:end="439:118">

					<expr_stmt pos:start="439:41" pos:end="439:118"><expr pos:start="439:41" pos:end="439:117"><call pos:start="439:41" pos:end="439:117"><name pos:start="439:41" pos:end="439:46">printf</name><argument_list pos:start="439:47" pos:end="439:117">(<argument pos:start="439:48" pos:end="439:116"><expr pos:start="439:48" pos:end="439:116"><literal type="string" pos:start="439:48" pos:end="439:116">"SwScaler: using n-tap MMX scaler for horizontal luminance scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



				<if_stmt pos:start="443:33" pos:end="453:120"><if pos:start="443:33" pos:end="445:120">if<condition pos:start="443:35" pos:end="443:56">(<expr pos:start="443:36" pos:end="443:55"><name pos:start="443:36" pos:end="443:52"><name pos:start="443:36" pos:end="443:36">c</name><operator pos:start="443:37" pos:end="443:38">-&gt;</operator><name pos:start="443:39" pos:end="443:52">hChrFilterSize</name></name><operator pos:start="443:53" pos:end="443:54">==</operator><literal type="number" pos:start="443:55" pos:end="443:55">4</literal></expr>)</condition><block type="pseudo" pos:start="445:41" pos:end="445:120"><block_content pos:start="445:41" pos:end="445:120">

					<expr_stmt pos:start="445:41" pos:end="445:120"><expr pos:start="445:41" pos:end="445:119"><call pos:start="445:41" pos:end="445:119"><name pos:start="445:41" pos:end="445:46">printf</name><argument_list pos:start="445:47" pos:end="445:119">(<argument pos:start="445:48" pos:end="445:118"><expr pos:start="445:48" pos:end="445:118"><literal type="string" pos:start="445:48" pos:end="445:118">"SwScaler: using 4-tap MMX scaler for horizontal chrominance scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

				<if type="elseif" pos:start="447:33" pos:end="449:120">else if<condition pos:start="447:40" pos:end="447:61">(<expr pos:start="447:41" pos:end="447:60"><name pos:start="447:41" pos:end="447:57"><name pos:start="447:41" pos:end="447:41">c</name><operator pos:start="447:42" pos:end="447:43">-&gt;</operator><name pos:start="447:44" pos:end="447:57">hChrFilterSize</name></name><operator pos:start="447:58" pos:end="447:59">==</operator><literal type="number" pos:start="447:60" pos:end="447:60">8</literal></expr>)</condition><block type="pseudo" pos:start="449:41" pos:end="449:120"><block_content pos:start="449:41" pos:end="449:120">

					<expr_stmt pos:start="449:41" pos:end="449:120"><expr pos:start="449:41" pos:end="449:119"><call pos:start="449:41" pos:end="449:119"><name pos:start="449:41" pos:end="449:46">printf</name><argument_list pos:start="449:47" pos:end="449:119">(<argument pos:start="449:48" pos:end="449:118"><expr pos:start="449:48" pos:end="449:118"><literal type="string" pos:start="449:48" pos:end="449:118">"SwScaler: using 8-tap MMX scaler for horizontal chrominance scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

				<else pos:start="451:33" pos:end="453:120">else<block type="pseudo" pos:start="453:41" pos:end="453:120"><block_content pos:start="453:41" pos:end="453:120">

					<expr_stmt pos:start="453:41" pos:end="453:120"><expr pos:start="453:41" pos:end="453:119"><call pos:start="453:41" pos:end="453:119"><name pos:start="453:41" pos:end="453:46">printf</name><argument_list pos:start="453:47" pos:end="453:119">(<argument pos:start="453:48" pos:end="453:118"><expr pos:start="453:48" pos:end="453:118"><literal type="string" pos:start="453:48" pos:end="453:118">"SwScaler: using n-tap MMX scaler for horizontal chrominance scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			</block_content>}</block></else></if_stmt>

		</block_content>}</block></if>

		<else pos:start="459:17" pos:end="479:17">else

		<block pos:start="461:17" pos:end="479:17">{<block_content pos:start="465:25" pos:end="478:0">

<cpp:ifdef pos:start="463:1" pos:end="463:15">#<cpp:directive pos:start="463:2" pos:end="463:6">ifdef</cpp:directive> <name pos:start="463:8" pos:end="463:15">ARCH_X86</name></cpp:ifdef>

			<expr_stmt pos:start="465:25" pos:end="468:0"><expr pos:start="465:25" pos:end="465:89"><call pos:start="465:25" pos:end="465:89"><name pos:start="465:25" pos:end="465:30">printf</name><argument_list pos:start="465:31" pos:end="465:89">(<argument pos:start="465:32" pos:end="465:88"><expr pos:start="465:32" pos:end="465:88"><literal type="string" pos:start="465:32" pos:end="465:88">"SwScaler: using X86-Asm scaler for horizontal scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="467:1" pos:end="467:5">#<cpp:directive pos:start="467:2" pos:end="467:5">else</cpp:directive></cpp:else>

			<if_stmt pos:start="469:25" pos:end="478:0"><if pos:start="469:25" pos:end="471:106">if<condition pos:start="469:27" pos:end="469:53">(<expr pos:start="469:28" pos:end="469:52"><name pos:start="469:28" pos:end="469:32">flags</name> <operator pos:start="469:34" pos:end="469:34">&amp;</operator> <name pos:start="469:36" pos:end="469:52">SWS_FAST_BILINEAR</name></expr>)</condition><block type="pseudo" pos:start="471:33" pos:end="471:106"><block_content pos:start="471:33" pos:end="471:106">

				<expr_stmt pos:start="471:33" pos:end="471:106"><expr pos:start="471:33" pos:end="471:105"><call pos:start="471:33" pos:end="471:105"><name pos:start="471:33" pos:end="471:38">printf</name><argument_list pos:start="471:39" pos:end="471:105">(<argument pos:start="471:40" pos:end="471:104"><expr pos:start="471:40" pos:end="471:104"><literal type="string" pos:start="471:40" pos:end="471:104">"SwScaler: using FAST_BILINEAR C scaler for horizontal scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

			<else pos:start="473:25" pos:end="478:0">else<block type="pseudo" pos:start="475:33" pos:end="478:0"><block_content pos:start="475:33" pos:end="478:0">

				<expr_stmt pos:start="475:33" pos:end="478:0"><expr pos:start="475:33" pos:end="475:91"><call pos:start="475:33" pos:end="475:91"><name pos:start="475:33" pos:end="475:38">printf</name><argument_list pos:start="475:39" pos:end="475:91">(<argument pos:start="475:40" pos:end="475:90"><expr pos:start="475:40" pos:end="475:90"><literal type="string" pos:start="475:40" pos:end="475:90">"SwScaler: using C scaler for horizontal scaling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif pos:start="477:1" pos:end="477:6">#<cpp:directive pos:start="477:2" pos:end="477:6">endif</cpp:directive></cpp:endif>

		</block_content>}</block></else></if_stmt>

		<if_stmt pos:start="481:17" pos:end="513:17"><if pos:start="481:17" pos:end="493:17">if<condition pos:start="481:19" pos:end="481:42">(<expr pos:start="481:20" pos:end="481:41"><call pos:start="481:20" pos:end="481:41"><name pos:start="481:20" pos:end="481:30">isPlanarYUV</name><argument_list pos:start="481:31" pos:end="481:41">(<argument pos:start="481:32" pos:end="481:40"><expr pos:start="481:32" pos:end="481:40"><name pos:start="481:32" pos:end="481:40">dstFormat</name></expr></argument>)</argument_list></call></expr>)</condition>

		<block pos:start="483:17" pos:end="493:17">{<block_content pos:start="485:25" pos:end="491:139">

			<if_stmt pos:start="485:25" pos:end="491:139"><if pos:start="485:25" pos:end="487:143">if<condition pos:start="485:27" pos:end="485:48">(<expr pos:start="485:28" pos:end="485:47"><name pos:start="485:28" pos:end="485:44"><name pos:start="485:28" pos:end="485:28">c</name><operator pos:start="485:29" pos:end="485:30">-&gt;</operator><name pos:start="485:31" pos:end="485:44">vLumFilterSize</name></name><operator pos:start="485:45" pos:end="485:46">==</operator><literal type="number" pos:start="485:47" pos:end="485:47">1</literal></expr>)</condition><block type="pseudo" pos:start="487:33" pos:end="487:143"><block_content pos:start="487:33" pos:end="487:143">

				<expr_stmt pos:start="487:33" pos:end="487:143"><expr pos:start="487:33" pos:end="487:142"><call pos:start="487:33" pos:end="487:142"><name pos:start="487:33" pos:end="487:38">printf</name><argument_list pos:start="487:39" pos:end="487:142">(<argument pos:start="487:40" pos:end="487:111"><expr pos:start="487:40" pos:end="487:111"><literal type="string" pos:start="487:40" pos:end="487:111">"SwScaler: using 1-tap %s \"scaler\" for vertical scaling (YV12 like)\n"</literal></expr></argument>, <argument pos:start="487:114" pos:end="487:141"><expr pos:start="487:114" pos:end="487:141"><ternary pos:start="487:114" pos:end="487:141"><condition pos:start="487:114" pos:end="487:129"><expr pos:start="487:114" pos:end="487:127"><name pos:start="487:114" pos:end="487:127"><name pos:start="487:114" pos:end="487:120">cpuCaps</name><operator pos:start="487:121" pos:end="487:121">.</operator><name pos:start="487:122" pos:end="487:127">hasMMX</name></name></expr> ?</condition><then pos:start="487:131" pos:end="487:135"> <expr pos:start="487:131" pos:end="487:135"><literal type="string" pos:start="487:131" pos:end="487:135">"MMX"</literal></expr> </then><else pos:start="487:137" pos:end="487:141">: <expr pos:start="487:139" pos:end="487:141"><literal type="string" pos:start="487:139" pos:end="487:141">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

			<else pos:start="489:25" pos:end="491:139">else<block type="pseudo" pos:start="491:33" pos:end="491:139"><block_content pos:start="491:33" pos:end="491:139">

				<expr_stmt pos:start="491:33" pos:end="491:139"><expr pos:start="491:33" pos:end="491:138"><call pos:start="491:33" pos:end="491:138"><name pos:start="491:33" pos:end="491:38">printf</name><argument_list pos:start="491:39" pos:end="491:138">(<argument pos:start="491:40" pos:end="491:107"><expr pos:start="491:40" pos:end="491:107"><literal type="string" pos:start="491:40" pos:end="491:107">"SwScaler: using n-tap %s scaler for vertical scaling (YV12 like)\n"</literal></expr></argument>, <argument pos:start="491:110" pos:end="491:137"><expr pos:start="491:110" pos:end="491:137"><ternary pos:start="491:110" pos:end="491:137"><condition pos:start="491:110" pos:end="491:125"><expr pos:start="491:110" pos:end="491:123"><name pos:start="491:110" pos:end="491:123"><name pos:start="491:110" pos:end="491:116">cpuCaps</name><operator pos:start="491:117" pos:end="491:117">.</operator><name pos:start="491:118" pos:end="491:123">hasMMX</name></name></expr> ?</condition><then pos:start="491:127" pos:end="491:131"> <expr pos:start="491:127" pos:end="491:131"><literal type="string" pos:start="491:127" pos:end="491:131">"MMX"</literal></expr> </then><else pos:start="491:133" pos:end="491:137">: <expr pos:start="491:135" pos:end="491:137"><literal type="string" pos:start="491:135" pos:end="491:137">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		</block_content>}</block></if>

		<else pos:start="495:17" pos:end="513:17">else

		<block pos:start="497:17" pos:end="513:17">{<block_content pos:start="499:25" pos:end="511:133">

			<if_stmt pos:start="499:25" pos:end="511:133"><if pos:start="499:25" pos:end="503:141">if<condition pos:start="499:27" pos:end="499:72">(<expr pos:start="499:28" pos:end="499:71"><name pos:start="499:28" pos:end="499:44"><name pos:start="499:28" pos:end="499:28">c</name><operator pos:start="499:29" pos:end="499:30">-&gt;</operator><name pos:start="499:31" pos:end="499:44">vLumFilterSize</name></name><operator pos:start="499:45" pos:end="499:46">==</operator><literal type="number" pos:start="499:47" pos:end="499:47">1</literal> <operator pos:start="499:49" pos:end="499:50">&amp;&amp;</operator> <name pos:start="499:52" pos:end="499:68"><name pos:start="499:52" pos:end="499:52">c</name><operator pos:start="499:53" pos:end="499:54">-&gt;</operator><name pos:start="499:55" pos:end="499:68">vChrFilterSize</name></name><operator pos:start="499:69" pos:end="499:70">==</operator><literal type="number" pos:start="499:71" pos:end="499:71">2</literal></expr>)</condition><block type="pseudo" pos:start="501:33" pos:end="503:141"><block_content pos:start="501:33" pos:end="503:141">

				<expr_stmt pos:start="501:33" pos:end="503:141"><expr pos:start="501:33" pos:end="503:140"><call pos:start="501:33" pos:end="503:140"><name pos:start="501:33" pos:end="501:38">printf</name><argument_list pos:start="501:39" pos:end="503:140">(<argument pos:start="501:40" pos:end="503:110"><expr pos:start="501:40" pos:end="503:110"><literal type="string" pos:start="501:40" pos:end="501:115">"SwScaler: using 1-tap %s \"scaler\" for vertical luminance scaling (BGR)\n"</literal>

				       <literal type="string" pos:start="503:40" pos:end="503:110">"SwScaler:       2-tap scaler for vertical chrominance scaling (BGR)\n"</literal></expr></argument>,<argument pos:start="503:112" pos:end="503:139"><expr pos:start="503:112" pos:end="503:139"><ternary pos:start="503:112" pos:end="503:139"><condition pos:start="503:112" pos:end="503:127"><expr pos:start="503:112" pos:end="503:125"><name pos:start="503:112" pos:end="503:125"><name pos:start="503:112" pos:end="503:118">cpuCaps</name><operator pos:start="503:119" pos:end="503:119">.</operator><name pos:start="503:120" pos:end="503:125">hasMMX</name></name></expr> ?</condition><then pos:start="503:129" pos:end="503:133"> <expr pos:start="503:129" pos:end="503:133"><literal type="string" pos:start="503:129" pos:end="503:133">"MMX"</literal></expr> </then><else pos:start="503:135" pos:end="503:139">: <expr pos:start="503:137" pos:end="503:139"><literal type="string" pos:start="503:137" pos:end="503:139">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

			<if type="elseif" pos:start="505:25" pos:end="507:140">else if<condition pos:start="505:32" pos:end="505:77">(<expr pos:start="505:33" pos:end="505:76"><name pos:start="505:33" pos:end="505:49"><name pos:start="505:33" pos:end="505:33">c</name><operator pos:start="505:34" pos:end="505:35">-&gt;</operator><name pos:start="505:36" pos:end="505:49">vLumFilterSize</name></name><operator pos:start="505:50" pos:end="505:51">==</operator><literal type="number" pos:start="505:52" pos:end="505:52">2</literal> <operator pos:start="505:54" pos:end="505:55">&amp;&amp;</operator> <name pos:start="505:57" pos:end="505:73"><name pos:start="505:57" pos:end="505:57">c</name><operator pos:start="505:58" pos:end="505:59">-&gt;</operator><name pos:start="505:60" pos:end="505:73">vChrFilterSize</name></name><operator pos:start="505:74" pos:end="505:75">==</operator><literal type="number" pos:start="505:76" pos:end="505:76">2</literal></expr>)</condition><block type="pseudo" pos:start="507:33" pos:end="507:140"><block_content pos:start="507:33" pos:end="507:140">

				<expr_stmt pos:start="507:33" pos:end="507:140"><expr pos:start="507:33" pos:end="507:139"><call pos:start="507:33" pos:end="507:139"><name pos:start="507:33" pos:end="507:38">printf</name><argument_list pos:start="507:39" pos:end="507:139">(<argument pos:start="507:40" pos:end="507:108"><expr pos:start="507:40" pos:end="507:108"><literal type="string" pos:start="507:40" pos:end="507:108">"SwScaler: using 2-tap linear %s scaler for vertical scaling (BGR)\n"</literal></expr></argument>, <argument pos:start="507:111" pos:end="507:138"><expr pos:start="507:111" pos:end="507:138"><ternary pos:start="507:111" pos:end="507:138"><condition pos:start="507:111" pos:end="507:126"><expr pos:start="507:111" pos:end="507:124"><name pos:start="507:111" pos:end="507:124"><name pos:start="507:111" pos:end="507:117">cpuCaps</name><operator pos:start="507:118" pos:end="507:118">.</operator><name pos:start="507:119" pos:end="507:124">hasMMX</name></name></expr> ?</condition><then pos:start="507:128" pos:end="507:132"> <expr pos:start="507:128" pos:end="507:132"><literal type="string" pos:start="507:128" pos:end="507:132">"MMX"</literal></expr> </then><else pos:start="507:134" pos:end="507:138">: <expr pos:start="507:136" pos:end="507:138"><literal type="string" pos:start="507:136" pos:end="507:138">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

			<else pos:start="509:25" pos:end="511:133">else<block type="pseudo" pos:start="511:33" pos:end="511:133"><block_content pos:start="511:33" pos:end="511:133">

				<expr_stmt pos:start="511:33" pos:end="511:133"><expr pos:start="511:33" pos:end="511:132"><call pos:start="511:33" pos:end="511:132"><name pos:start="511:33" pos:end="511:38">printf</name><argument_list pos:start="511:39" pos:end="511:132">(<argument pos:start="511:40" pos:end="511:101"><expr pos:start="511:40" pos:end="511:101"><literal type="string" pos:start="511:40" pos:end="511:101">"SwScaler: using n-tap %s scaler for vertical scaling (BGR)\n"</literal></expr></argument>, <argument pos:start="511:104" pos:end="511:131"><expr pos:start="511:104" pos:end="511:131"><ternary pos:start="511:104" pos:end="511:131"><condition pos:start="511:104" pos:end="511:119"><expr pos:start="511:104" pos:end="511:117"><name pos:start="511:104" pos:end="511:117"><name pos:start="511:104" pos:end="511:110">cpuCaps</name><operator pos:start="511:111" pos:end="511:111">.</operator><name pos:start="511:112" pos:end="511:117">hasMMX</name></name></expr> ?</condition><then pos:start="511:121" pos:end="511:125"> <expr pos:start="511:121" pos:end="511:125"><literal type="string" pos:start="511:121" pos:end="511:125">"MMX"</literal></expr> </then><else pos:start="511:127" pos:end="511:131">: <expr pos:start="511:129" pos:end="511:131"><literal type="string" pos:start="511:129" pos:end="511:131">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		</block_content>}</block></else></if_stmt>



		<if_stmt pos:start="517:17" pos:end="533:107"><if pos:start="517:17" pos:end="521:91">if<condition pos:start="517:19" pos:end="517:43">(<expr pos:start="517:20" pos:end="517:42"><name pos:start="517:20" pos:end="517:28">dstFormat</name><operator pos:start="517:29" pos:end="517:30">==</operator><name pos:start="517:31" pos:end="517:42">IMGFMT_BGR24</name></expr>)</condition><block type="pseudo" pos:start="519:25" pos:end="521:91"><block_content pos:start="519:25" pos:end="521:91">

			<expr_stmt pos:start="519:25" pos:end="521:91"><expr pos:start="519:25" pos:end="521:90"><call pos:start="519:25" pos:end="521:90"><name pos:start="519:25" pos:end="519:30">printf</name><argument_list pos:start="519:31" pos:end="521:90">(<argument pos:start="519:32" pos:end="519:75"><expr pos:start="519:32" pos:end="519:75"><literal type="string" pos:start="519:32" pos:end="519:75">"SwScaler: using %s YV12-&gt;BGR24 Converter\n"</literal></expr></argument>,

				<argument pos:start="521:33" pos:end="521:89"><expr pos:start="521:33" pos:end="521:89"><ternary pos:start="521:33" pos:end="521:89"><condition pos:start="521:33" pos:end="521:49"><expr pos:start="521:33" pos:end="521:47"><name pos:start="521:33" pos:end="521:47"><name pos:start="521:33" pos:end="521:39">cpuCaps</name><operator pos:start="521:40" pos:end="521:40">.</operator><name pos:start="521:41" pos:end="521:47">hasMMX2</name></name></expr> ?</condition><then pos:start="521:51" pos:end="521:56"> <expr pos:start="521:51" pos:end="521:56"><literal type="string" pos:start="521:51" pos:end="521:56">"MMX2"</literal></expr> </then><else pos:start="521:58" pos:end="521:89">: <expr pos:start="521:60" pos:end="521:89"><operator pos:start="521:60" pos:end="521:60">(</operator><ternary pos:start="521:61" pos:end="521:88"><condition pos:start="521:61" pos:end="521:76"><expr pos:start="521:61" pos:end="521:74"><name pos:start="521:61" pos:end="521:74"><name pos:start="521:61" pos:end="521:67">cpuCaps</name><operator pos:start="521:68" pos:end="521:68">.</operator><name pos:start="521:69" pos:end="521:74">hasMMX</name></name></expr> ?</condition><then pos:start="521:78" pos:end="521:82"> <expr pos:start="521:78" pos:end="521:82"><literal type="string" pos:start="521:78" pos:end="521:82">"MMX"</literal></expr> </then><else pos:start="521:84" pos:end="521:88">: <expr pos:start="521:86" pos:end="521:88"><literal type="string" pos:start="521:86" pos:end="521:88">"C"</literal></expr></else></ternary><operator pos:start="521:89" pos:end="521:89">)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="523:17" pos:end="525:107">else if<condition pos:start="523:24" pos:end="523:48">(<expr pos:start="523:25" pos:end="523:47"><name pos:start="523:25" pos:end="523:33">dstFormat</name><operator pos:start="523:34" pos:end="523:35">==</operator><name pos:start="523:36" pos:end="523:47">IMGFMT_BGR32</name></expr>)</condition><block type="pseudo" pos:start="525:25" pos:end="525:107"><block_content pos:start="525:25" pos:end="525:107">

			<expr_stmt pos:start="525:25" pos:end="525:107"><expr pos:start="525:25" pos:end="525:106"><call pos:start="525:25" pos:end="525:106"><name pos:start="525:25" pos:end="525:30">printf</name><argument_list pos:start="525:31" pos:end="525:106">(<argument pos:start="525:32" pos:end="525:75"><expr pos:start="525:32" pos:end="525:75"><literal type="string" pos:start="525:32" pos:end="525:75">"SwScaler: using %s YV12-&gt;BGR32 Converter\n"</literal></expr></argument>, <argument pos:start="525:78" pos:end="525:105"><expr pos:start="525:78" pos:end="525:105"><ternary pos:start="525:78" pos:end="525:105"><condition pos:start="525:78" pos:end="525:93"><expr pos:start="525:78" pos:end="525:91"><name pos:start="525:78" pos:end="525:91"><name pos:start="525:78" pos:end="525:84">cpuCaps</name><operator pos:start="525:85" pos:end="525:85">.</operator><name pos:start="525:86" pos:end="525:91">hasMMX</name></name></expr> ?</condition><then pos:start="525:95" pos:end="525:99"> <expr pos:start="525:95" pos:end="525:99"><literal type="string" pos:start="525:95" pos:end="525:99">"MMX"</literal></expr> </then><else pos:start="525:101" pos:end="525:105">: <expr pos:start="525:103" pos:end="525:105"><literal type="string" pos:start="525:103" pos:end="525:105">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="527:17" pos:end="529:107">else if<condition pos:start="527:24" pos:end="527:48">(<expr pos:start="527:25" pos:end="527:47"><name pos:start="527:25" pos:end="527:33">dstFormat</name><operator pos:start="527:34" pos:end="527:35">==</operator><name pos:start="527:36" pos:end="527:47">IMGFMT_BGR16</name></expr>)</condition><block type="pseudo" pos:start="529:25" pos:end="529:107"><block_content pos:start="529:25" pos:end="529:107">

			<expr_stmt pos:start="529:25" pos:end="529:107"><expr pos:start="529:25" pos:end="529:106"><call pos:start="529:25" pos:end="529:106"><name pos:start="529:25" pos:end="529:30">printf</name><argument_list pos:start="529:31" pos:end="529:106">(<argument pos:start="529:32" pos:end="529:75"><expr pos:start="529:32" pos:end="529:75"><literal type="string" pos:start="529:32" pos:end="529:75">"SwScaler: using %s YV12-&gt;BGR16 Converter\n"</literal></expr></argument>, <argument pos:start="529:78" pos:end="529:105"><expr pos:start="529:78" pos:end="529:105"><ternary pos:start="529:78" pos:end="529:105"><condition pos:start="529:78" pos:end="529:93"><expr pos:start="529:78" pos:end="529:91"><name pos:start="529:78" pos:end="529:91"><name pos:start="529:78" pos:end="529:84">cpuCaps</name><operator pos:start="529:85" pos:end="529:85">.</operator><name pos:start="529:86" pos:end="529:91">hasMMX</name></name></expr> ?</condition><then pos:start="529:95" pos:end="529:99"> <expr pos:start="529:95" pos:end="529:99"><literal type="string" pos:start="529:95" pos:end="529:99">"MMX"</literal></expr> </then><else pos:start="529:101" pos:end="529:105">: <expr pos:start="529:103" pos:end="529:105"><literal type="string" pos:start="529:103" pos:end="529:105">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

		<if type="elseif" pos:start="531:17" pos:end="533:107">else if<condition pos:start="531:24" pos:end="531:48">(<expr pos:start="531:25" pos:end="531:47"><name pos:start="531:25" pos:end="531:33">dstFormat</name><operator pos:start="531:34" pos:end="531:35">==</operator><name pos:start="531:36" pos:end="531:47">IMGFMT_BGR15</name></expr>)</condition><block type="pseudo" pos:start="533:25" pos:end="533:107"><block_content pos:start="533:25" pos:end="533:107">

			<expr_stmt pos:start="533:25" pos:end="533:107"><expr pos:start="533:25" pos:end="533:106"><call pos:start="533:25" pos:end="533:106"><name pos:start="533:25" pos:end="533:30">printf</name><argument_list pos:start="533:31" pos:end="533:106">(<argument pos:start="533:32" pos:end="533:75"><expr pos:start="533:32" pos:end="533:75"><literal type="string" pos:start="533:32" pos:end="533:75">"SwScaler: using %s YV12-&gt;BGR15 Converter\n"</literal></expr></argument>, <argument pos:start="533:78" pos:end="533:105"><expr pos:start="533:78" pos:end="533:105"><ternary pos:start="533:78" pos:end="533:105"><condition pos:start="533:78" pos:end="533:93"><expr pos:start="533:78" pos:end="533:91"><name pos:start="533:78" pos:end="533:91"><name pos:start="533:78" pos:end="533:84">cpuCaps</name><operator pos:start="533:85" pos:end="533:85">.</operator><name pos:start="533:86" pos:end="533:91">hasMMX</name></name></expr> ?</condition><then pos:start="533:95" pos:end="533:99"> <expr pos:start="533:95" pos:end="533:99"><literal type="string" pos:start="533:95" pos:end="533:99">"MMX"</literal></expr> </then><else pos:start="533:101" pos:end="533:105">: <expr pos:start="533:103" pos:end="533:105"><literal type="string" pos:start="533:103" pos:end="533:105">"C"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



		<expr_stmt pos:start="537:17" pos:end="537:77"><expr pos:start="537:17" pos:end="537:76"><call pos:start="537:17" pos:end="537:76"><name pos:start="537:17" pos:end="537:22">printf</name><argument_list pos:start="537:23" pos:end="537:76">(<argument pos:start="537:24" pos:end="537:51"><expr pos:start="537:24" pos:end="537:51"><literal type="string" pos:start="537:24" pos:end="537:51">"SwScaler: %dx%d -&gt; %dx%d\n"</literal></expr></argument>, <argument pos:start="537:54" pos:end="537:57"><expr pos:start="537:54" pos:end="537:57"><name pos:start="537:54" pos:end="537:57">srcW</name></expr></argument>, <argument pos:start="537:60" pos:end="537:63"><expr pos:start="537:60" pos:end="537:63"><name pos:start="537:60" pos:end="537:63">srcH</name></expr></argument>, <argument pos:start="537:66" pos:end="537:69"><expr pos:start="537:66" pos:end="537:69"><name pos:start="537:66" pos:end="537:69">dstW</name></expr></argument>, <argument pos:start="537:72" pos:end="537:75"><expr pos:start="537:72" pos:end="537:75"><name pos:start="537:72" pos:end="537:75">dstH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt pos:start="541:9" pos:end="553:9"><if pos:start="541:9" pos:end="553:9">if<condition pos:start="541:11" pos:end="541:49">(<expr pos:start="541:12" pos:end="541:48"><operator pos:start="541:12" pos:end="541:12">(</operator><name pos:start="541:13" pos:end="541:17">flags</name> <operator pos:start="541:19" pos:end="541:19">&amp;</operator> <name pos:start="541:21" pos:end="541:34">SWS_PRINT_INFO</name><operator pos:start="541:35" pos:end="541:35">)</operator> <operator pos:start="541:37" pos:end="541:38">&amp;&amp;</operator> <name pos:start="541:40" pos:end="541:46">verbose</name><operator pos:start="541:47" pos:end="541:47">&gt;</operator><literal type="number" pos:start="541:48" pos:end="541:48">1</literal></expr>)</condition>

	<block pos:start="543:9" pos:end="553:9">{<block_content pos:start="545:17" pos:end="551:96">

		<expr_stmt pos:start="545:17" pos:end="547:84"><expr pos:start="545:17" pos:end="547:83"><call pos:start="545:17" pos:end="547:83"><name pos:start="545:17" pos:end="545:22">printf</name><argument_list pos:start="545:23" pos:end="547:83">(<argument pos:start="545:24" pos:end="545:87"><expr pos:start="545:24" pos:end="545:87"><literal type="string" pos:start="545:24" pos:end="545:87">"SwScaler:Lum srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n"</literal></expr></argument>,

			<argument pos:start="547:25" pos:end="547:31"><expr pos:start="547:25" pos:end="547:31"><name pos:start="547:25" pos:end="547:31"><name pos:start="547:25" pos:end="547:25">c</name><operator pos:start="547:26" pos:end="547:27">-&gt;</operator><name pos:start="547:28" pos:end="547:31">srcW</name></name></expr></argument>, <argument pos:start="547:34" pos:end="547:40"><expr pos:start="547:34" pos:end="547:40"><name pos:start="547:34" pos:end="547:40"><name pos:start="547:34" pos:end="547:34">c</name><operator pos:start="547:35" pos:end="547:36">-&gt;</operator><name pos:start="547:37" pos:end="547:40">srcH</name></name></expr></argument>, <argument pos:start="547:43" pos:end="547:49"><expr pos:start="547:43" pos:end="547:49"><name pos:start="547:43" pos:end="547:49"><name pos:start="547:43" pos:end="547:43">c</name><operator pos:start="547:44" pos:end="547:45">-&gt;</operator><name pos:start="547:46" pos:end="547:49">dstW</name></name></expr></argument>, <argument pos:start="547:52" pos:end="547:58"><expr pos:start="547:52" pos:end="547:58"><name pos:start="547:52" pos:end="547:58"><name pos:start="547:52" pos:end="547:52">c</name><operator pos:start="547:53" pos:end="547:54">-&gt;</operator><name pos:start="547:55" pos:end="547:58">dstH</name></name></expr></argument>, <argument pos:start="547:61" pos:end="547:70"><expr pos:start="547:61" pos:end="547:70"><name pos:start="547:61" pos:end="547:70"><name pos:start="547:61" pos:end="547:61">c</name><operator pos:start="547:62" pos:end="547:63">-&gt;</operator><name pos:start="547:64" pos:end="547:70">lumXInc</name></name></expr></argument>, <argument pos:start="547:73" pos:end="547:82"><expr pos:start="547:73" pos:end="547:82"><name pos:start="547:73" pos:end="547:82"><name pos:start="547:73" pos:end="547:73">c</name><operator pos:start="547:74" pos:end="547:75">-&gt;</operator><name pos:start="547:76" pos:end="547:82">lumYInc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="549:17" pos:end="551:96"><expr pos:start="549:17" pos:end="551:95"><call pos:start="549:17" pos:end="551:95"><name pos:start="549:17" pos:end="549:22">printf</name><argument_list pos:start="549:23" pos:end="551:95">(<argument pos:start="549:24" pos:end="549:87"><expr pos:start="549:24" pos:end="549:87"><literal type="string" pos:start="549:24" pos:end="549:87">"SwScaler:Chr srcW=%d srcH=%d dstW=%d dstH=%d xInc=%d yInc=%d\n"</literal></expr></argument>,

			<argument pos:start="551:25" pos:end="551:34"><expr pos:start="551:25" pos:end="551:34"><name pos:start="551:25" pos:end="551:34"><name pos:start="551:25" pos:end="551:25">c</name><operator pos:start="551:26" pos:end="551:27">-&gt;</operator><name pos:start="551:28" pos:end="551:34">chrSrcW</name></name></expr></argument>, <argument pos:start="551:37" pos:end="551:46"><expr pos:start="551:37" pos:end="551:46"><name pos:start="551:37" pos:end="551:46"><name pos:start="551:37" pos:end="551:37">c</name><operator pos:start="551:38" pos:end="551:39">-&gt;</operator><name pos:start="551:40" pos:end="551:46">chrSrcH</name></name></expr></argument>, <argument pos:start="551:49" pos:end="551:58"><expr pos:start="551:49" pos:end="551:58"><name pos:start="551:49" pos:end="551:58"><name pos:start="551:49" pos:end="551:49">c</name><operator pos:start="551:50" pos:end="551:51">-&gt;</operator><name pos:start="551:52" pos:end="551:58">chrDstW</name></name></expr></argument>, <argument pos:start="551:61" pos:end="551:70"><expr pos:start="551:61" pos:end="551:70"><name pos:start="551:61" pos:end="551:70"><name pos:start="551:61" pos:end="551:61">c</name><operator pos:start="551:62" pos:end="551:63">-&gt;</operator><name pos:start="551:64" pos:end="551:70">chrDstH</name></name></expr></argument>, <argument pos:start="551:73" pos:end="551:82"><expr pos:start="551:73" pos:end="551:82"><name pos:start="551:73" pos:end="551:82"><name pos:start="551:73" pos:end="551:73">c</name><operator pos:start="551:74" pos:end="551:75">-&gt;</operator><name pos:start="551:76" pos:end="551:82">chrXInc</name></name></expr></argument>, <argument pos:start="551:85" pos:end="551:94"><expr pos:start="551:85" pos:end="551:94"><name pos:start="551:85" pos:end="551:94"><name pos:start="551:85" pos:end="551:85">c</name><operator pos:start="551:86" pos:end="551:87">-&gt;</operator><name pos:start="551:88" pos:end="551:94">chrYInc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	

	<return pos:start="557:9" pos:end="557:17">return <expr pos:start="557:16" pos:end="557:16"><name pos:start="557:16" pos:end="557:16">c</name></expr>;</return>

</block_content>}</block></function>
</unit>
