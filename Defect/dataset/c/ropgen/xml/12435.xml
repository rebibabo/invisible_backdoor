<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12435.c" pos:tabs="8"><function pos:start="1:1" pos:end="389:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:8">unsigned</name> <name pos:start="1:10" pos:end="1:12">int</name></type> <name pos:start="1:14" pos:end="1:23">DoubleCPDO</name><parameter_list pos:start="1:24" pos:end="1:50">(<parameter pos:start="1:25" pos:end="1:49"><decl pos:start="1:25" pos:end="1:49"><type pos:start="1:25" pos:end="1:42"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:38">unsigned</name> <name pos:start="1:40" pos:end="1:42">int</name></type> <name pos:start="1:44" pos:end="1:49">opcode</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="389:1">{<block_content pos:start="5:4" pos:end="387:14">

   <decl_stmt pos:start="5:4" pos:end="5:30"><decl pos:start="5:4" pos:end="5:29"><type pos:start="5:4" pos:end="5:10"><name pos:start="5:4" pos:end="5:8">FPA11</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:15">fpa11</name> <init pos:start="5:17" pos:end="5:29">= <expr pos:start="5:19" pos:end="5:29"><call pos:start="5:19" pos:end="5:29"><name pos:start="5:19" pos:end="5:27">GET_FPA11</name><argument_list pos:start="5:28" pos:end="5:29">()</argument_list></call></expr></init></decl>;</decl_stmt>

   <decl_stmt pos:start="7:4" pos:end="7:24"><decl pos:start="7:4" pos:end="7:14"><type pos:start="7:4" pos:end="7:10"><name pos:start="7:4" pos:end="7:10">float64</name></type> <name pos:start="7:12" pos:end="7:14">rFm</name></decl>, <decl pos:start="7:17" pos:end="7:23"><type ref="prev" pos:start="7:4" pos:end="7:10"/><name pos:start="7:17" pos:end="7:19">rFn</name> <init pos:start="7:21" pos:end="7:23">= <expr pos:start="7:23" pos:end="7:23"><literal type="number" pos:start="7:23" pos:end="7:23">0</literal></expr></init></decl>;</decl_stmt>

   <decl_stmt pos:start="9:4" pos:end="9:36"><decl pos:start="9:4" pos:end="9:18"><type pos:start="9:4" pos:end="9:15"><name pos:start="9:4" pos:end="9:11">unsigned</name> <name pos:start="9:13" pos:end="9:15">int</name></type> <name pos:start="9:17" pos:end="9:18">Fd</name></decl>, <decl pos:start="9:21" pos:end="9:22"><type ref="prev" pos:start="9:4" pos:end="9:15"/><name pos:start="9:21" pos:end="9:22">Fm</name></decl>, <decl pos:start="9:25" pos:end="9:26"><type ref="prev" pos:start="9:4" pos:end="9:15"/><name pos:start="9:25" pos:end="9:26">Fn</name></decl>, <decl pos:start="9:29" pos:end="9:35"><type ref="prev" pos:start="9:4" pos:end="9:15"/><name pos:start="9:29" pos:end="9:31">nRc</name> <init pos:start="9:33" pos:end="9:35">= <expr pos:start="9:35" pos:end="9:35"><literal type="number" pos:start="9:35" pos:end="9:35">1</literal></expr></init></decl>;</decl_stmt>



   <comment type="line" pos:start="13:4" pos:end="13:43">//printk("DoubleCPDO(0x%08x)\n",opcode);</comment>



   <expr_stmt pos:start="17:4" pos:end="17:22"><expr pos:start="17:4" pos:end="17:21"><name pos:start="17:4" pos:end="17:5">Fm</name> <operator pos:start="17:7" pos:end="17:7">=</operator> <call pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:13">getFm</name><argument_list pos:start="17:14" pos:end="17:21">(<argument pos:start="17:15" pos:end="17:20"><expr pos:start="17:15" pos:end="17:20"><name pos:start="17:15" pos:end="17:20">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <if_stmt pos:start="19:4" pos:end="73:4"><if pos:start="19:4" pos:end="25:4">if <condition pos:start="19:7" pos:end="19:27">(<expr pos:start="19:8" pos:end="19:26"><call pos:start="19:8" pos:end="19:26"><name pos:start="19:8" pos:end="19:18">CONSTANT_FM</name><argument_list pos:start="19:19" pos:end="19:26">(<argument pos:start="19:20" pos:end="19:25"><expr pos:start="19:20" pos:end="19:25"><name pos:start="19:20" pos:end="19:25">opcode</name></expr></argument>)</argument_list></call></expr>)</condition>

   <block pos:start="21:4" pos:end="25:4">{<block_content pos:start="23:6" pos:end="23:33">

     <expr_stmt pos:start="23:6" pos:end="23:33"><expr pos:start="23:6" pos:end="23:32"><name pos:start="23:6" pos:end="23:8">rFm</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:32"><name pos:start="23:12" pos:end="23:28">getDoubleConstant</name><argument_list pos:start="23:29" pos:end="23:32">(<argument pos:start="23:30" pos:end="23:31"><expr pos:start="23:30" pos:end="23:31"><name pos:start="23:30" pos:end="23:31">Fm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   </block_content>}</block></if>

   <else pos:start="27:4" pos:end="73:4">else

   <block pos:start="29:4" pos:end="73:4">{<block_content pos:start="31:6" pos:end="71:6">

     <switch pos:start="31:6" pos:end="71:6">switch <condition pos:start="31:13" pos:end="31:30">(<expr pos:start="31:14" pos:end="31:29"><name pos:start="31:14" pos:end="31:29"><name pos:start="31:14" pos:end="31:18">fpa11</name><operator pos:start="31:19" pos:end="31:20">-&gt;</operator><name pos:start="31:21" pos:end="31:25">fType</name><index pos:start="31:26" pos:end="31:29">[<expr pos:start="31:27" pos:end="31:28"><name pos:start="31:27" pos:end="31:28">Fm</name></expr>]</index></name></expr>)</condition>

     <block pos:start="33:6" pos:end="71:6">{<block_content pos:start="35:9" pos:end="69:26">

        <case pos:start="35:9" pos:end="35:24">case <expr pos:start="35:14" pos:end="35:23"><name pos:start="35:14" pos:end="35:23">typeSingle</name></expr>:</case>

          <expr_stmt pos:start="37:11" pos:end="37:80"><expr pos:start="37:11" pos:end="37:79"><name pos:start="37:11" pos:end="37:13">rFm</name> <operator pos:start="37:15" pos:end="37:15">=</operator> <call pos:start="37:17" pos:end="37:79"><name pos:start="37:17" pos:end="37:34">float32_to_float64</name><argument_list pos:start="37:35" pos:end="37:79">(<argument pos:start="37:36" pos:end="37:59"><expr pos:start="37:36" pos:end="37:59"><name pos:start="37:36" pos:end="37:51"><name pos:start="37:36" pos:end="37:40">fpa11</name><operator pos:start="37:41" pos:end="37:42">-&gt;</operator><name pos:start="37:43" pos:end="37:47">fpreg</name><index pos:start="37:48" pos:end="37:51">[<expr pos:start="37:49" pos:end="37:50"><name pos:start="37:49" pos:end="37:50">Fm</name></expr>]</index></name><operator pos:start="37:52" pos:end="37:52">.</operator><name pos:start="37:53" pos:end="37:59">fSingle</name></expr></argument>, <argument pos:start="37:62" pos:end="37:78"><expr pos:start="37:62" pos:end="37:78"><operator pos:start="37:62" pos:end="37:62">&amp;</operator><name pos:start="37:63" pos:end="37:78"><name pos:start="37:63" pos:end="37:67">fpa11</name><operator pos:start="37:68" pos:end="37:69">-&gt;</operator><name pos:start="37:70" pos:end="37:78">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>



        <case pos:start="43:9" pos:end="43:24">case <expr pos:start="43:14" pos:end="43:23"><name pos:start="43:14" pos:end="43:23">typeDouble</name></expr>:</case>

          <expr_stmt pos:start="45:11" pos:end="45:41"><expr pos:start="45:11" pos:end="45:40"><name pos:start="45:11" pos:end="45:13">rFm</name> <operator pos:start="45:15" pos:end="45:15">=</operator> <name pos:start="45:17" pos:end="45:32"><name pos:start="45:17" pos:end="45:21">fpa11</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:28">fpreg</name><index pos:start="45:29" pos:end="45:32">[<expr pos:start="45:30" pos:end="45:31"><name pos:start="45:30" pos:end="45:31">Fm</name></expr>]</index></name><operator pos:start="45:33" pos:end="45:33">.</operator><name pos:start="45:34" pos:end="45:40">fDouble</name></expr>;</expr_stmt>

          <break pos:start="47:11" pos:end="47:16">break;</break>



        <case pos:start="51:9" pos:end="51:26">case <expr pos:start="51:14" pos:end="51:25"><name pos:start="51:14" pos:end="51:25">typeExtended</name></expr>:</case>

            <comment type="line" pos:start="53:13" pos:end="53:22">// !! patb</comment>

	    <comment type="line" pos:start="55:13" pos:end="55:52">//printk("not implemented! why not?\n");</comment>

            <comment type="line" format="doxygen" pos:start="57:13" pos:end="57:23">//!! ScottB</comment>

            <comment type="line" pos:start="59:13" pos:end="59:58">// should never get here, if extended involved</comment>

            <comment type="line" pos:start="61:13" pos:end="61:57">// then other operand should be promoted then</comment>

            <comment type="line" pos:start="63:13" pos:end="63:35">// ExtendedCPDO called.</comment>

            <break pos:start="65:13" pos:end="65:18">break;</break>



        <default pos:start="69:9" pos:end="69:16">default:</default> <return pos:start="69:18" pos:end="69:26">return <expr pos:start="69:25" pos:end="69:25"><literal type="number" pos:start="69:25" pos:end="69:25">0</literal></expr>;</return>

     </block_content>}</block></switch>

   </block_content>}</block></else></if_stmt>



   <if_stmt pos:start="77:4" pos:end="107:4"><if pos:start="77:4" pos:end="107:4">if <condition pos:start="77:7" pos:end="77:36">(<expr pos:start="77:8" pos:end="77:35"><operator pos:start="77:8" pos:end="77:8">!</operator><call pos:start="77:9" pos:end="77:35"><name pos:start="77:9" pos:end="77:27">MONADIC_INSTRUCTION</name><argument_list pos:start="77:28" pos:end="77:35">(<argument pos:start="77:29" pos:end="77:34"><expr pos:start="77:29" pos:end="77:34"><name pos:start="77:29" pos:end="77:34">opcode</name></expr></argument>)</argument_list></call></expr>)</condition>

   <block pos:start="79:4" pos:end="107:4">{<block_content pos:start="81:7" pos:end="105:7">

      <expr_stmt pos:start="81:7" pos:end="81:25"><expr pos:start="81:7" pos:end="81:24"><name pos:start="81:7" pos:end="81:8">Fn</name> <operator pos:start="81:10" pos:end="81:10">=</operator> <call pos:start="81:12" pos:end="81:24"><name pos:start="81:12" pos:end="81:16">getFn</name><argument_list pos:start="81:17" pos:end="81:24">(<argument pos:start="81:18" pos:end="81:23"><expr pos:start="81:18" pos:end="81:23"><name pos:start="81:18" pos:end="81:23">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <switch pos:start="83:7" pos:end="105:7">switch <condition pos:start="83:14" pos:end="83:31">(<expr pos:start="83:15" pos:end="83:30"><name pos:start="83:15" pos:end="83:30"><name pos:start="83:15" pos:end="83:19">fpa11</name><operator pos:start="83:20" pos:end="83:21">-&gt;</operator><name pos:start="83:22" pos:end="83:26">fType</name><index pos:start="83:27" pos:end="83:30">[<expr pos:start="83:28" pos:end="83:29"><name pos:start="83:28" pos:end="83:29">Fn</name></expr>]</index></name></expr>)</condition>

      <block pos:start="85:7" pos:end="105:7">{<block_content pos:start="87:9" pos:end="103:26">

        <case pos:start="87:9" pos:end="87:24">case <expr pos:start="87:14" pos:end="87:23"><name pos:start="87:14" pos:end="87:23">typeSingle</name></expr>:</case>

          <expr_stmt pos:start="89:11" pos:end="89:80"><expr pos:start="89:11" pos:end="89:79"><name pos:start="89:11" pos:end="89:13">rFn</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <call pos:start="89:17" pos:end="89:79"><name pos:start="89:17" pos:end="89:34">float32_to_float64</name><argument_list pos:start="89:35" pos:end="89:79">(<argument pos:start="89:36" pos:end="89:59"><expr pos:start="89:36" pos:end="89:59"><name pos:start="89:36" pos:end="89:51"><name pos:start="89:36" pos:end="89:40">fpa11</name><operator pos:start="89:41" pos:end="89:42">-&gt;</operator><name pos:start="89:43" pos:end="89:47">fpreg</name><index pos:start="89:48" pos:end="89:51">[<expr pos:start="89:49" pos:end="89:50"><name pos:start="89:49" pos:end="89:50">Fn</name></expr>]</index></name><operator pos:start="89:52" pos:end="89:52">.</operator><name pos:start="89:53" pos:end="89:59">fSingle</name></expr></argument>, <argument pos:start="89:62" pos:end="89:78"><expr pos:start="89:62" pos:end="89:78"><operator pos:start="89:62" pos:end="89:62">&amp;</operator><name pos:start="89:63" pos:end="89:78"><name pos:start="89:63" pos:end="89:67">fpa11</name><operator pos:start="89:68" pos:end="89:69">-&gt;</operator><name pos:start="89:70" pos:end="89:78">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="91:9" pos:end="91:14">break;</break>



        <case pos:start="95:9" pos:end="95:24">case <expr pos:start="95:14" pos:end="95:23"><name pos:start="95:14" pos:end="95:23">typeDouble</name></expr>:</case>

          <expr_stmt pos:start="97:11" pos:end="97:41"><expr pos:start="97:11" pos:end="97:40"><name pos:start="97:11" pos:end="97:13">rFn</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <name pos:start="97:17" pos:end="97:32"><name pos:start="97:17" pos:end="97:21">fpa11</name><operator pos:start="97:22" pos:end="97:23">-&gt;</operator><name pos:start="97:24" pos:end="97:28">fpreg</name><index pos:start="97:29" pos:end="97:32">[<expr pos:start="97:30" pos:end="97:31"><name pos:start="97:30" pos:end="97:31">Fn</name></expr>]</index></name><operator pos:start="97:33" pos:end="97:33">.</operator><name pos:start="97:34" pos:end="97:40">fDouble</name></expr>;</expr_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>



        <default pos:start="103:9" pos:end="103:16">default:</default> <return pos:start="103:18" pos:end="103:26">return <expr pos:start="103:25" pos:end="103:25"><literal type="number" pos:start="103:25" pos:end="103:25">0</literal></expr>;</return>

      </block_content>}</block></switch>

   </block_content>}</block></if></if_stmt>



   <expr_stmt pos:start="111:4" pos:end="111:22"><expr pos:start="111:4" pos:end="111:21"><name pos:start="111:4" pos:end="111:5">Fd</name> <operator pos:start="111:7" pos:end="111:7">=</operator> <call pos:start="111:9" pos:end="111:21"><name pos:start="111:9" pos:end="111:13">getFd</name><argument_list pos:start="111:14" pos:end="111:21">(<argument pos:start="111:15" pos:end="111:20"><expr pos:start="111:15" pos:end="111:20"><name pos:start="111:15" pos:end="111:20">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <comment type="block" pos:start="113:4" pos:end="113:94">/* !! this switch isn't optimized; better (opcode &amp; MASK_ARITHMETIC_OPCODE)&gt;&gt;24, sort of */</comment>

   <switch pos:start="115:4" pos:end="381:4">switch <condition pos:start="115:11" pos:end="115:43">(<expr pos:start="115:12" pos:end="115:42"><name pos:start="115:12" pos:end="115:17">opcode</name> <operator pos:start="115:19" pos:end="115:19">&amp;</operator> <name pos:start="115:21" pos:end="115:42">MASK_ARITHMETIC_OPCODE</name></expr>)</condition>

   <block pos:start="117:4" pos:end="381:4">{<block_content pos:start="121:7" pos:end="379:7">

      <comment type="block" pos:start="119:7" pos:end="119:26">/* dyadic opcodes */</comment>

      <case pos:start="121:7" pos:end="121:20">case <expr pos:start="121:12" pos:end="121:19"><name pos:start="121:12" pos:end="121:19">ADF_CODE</name></expr>:</case>

         <expr_stmt pos:start="123:10" pos:end="123:76"><expr pos:start="123:10" pos:end="123:75"><name pos:start="123:10" pos:end="123:25"><name pos:start="123:10" pos:end="123:14">fpa11</name><operator pos:start="123:15" pos:end="123:16">-&gt;</operator><name pos:start="123:17" pos:end="123:21">fpreg</name><index pos:start="123:22" pos:end="123:25">[<expr pos:start="123:23" pos:end="123:24"><name pos:start="123:23" pos:end="123:24">Fd</name></expr>]</index></name><operator pos:start="123:26" pos:end="123:26">.</operator><name pos:start="123:27" pos:end="123:33">fDouble</name> <operator pos:start="123:35" pos:end="123:35">=</operator> <call pos:start="123:37" pos:end="123:75"><name pos:start="123:37" pos:end="123:47">float64_add</name><argument_list pos:start="123:48" pos:end="123:75">(<argument pos:start="123:49" pos:end="123:51"><expr pos:start="123:49" pos:end="123:51"><name pos:start="123:49" pos:end="123:51">rFn</name></expr></argument>,<argument pos:start="123:53" pos:end="123:55"><expr pos:start="123:53" pos:end="123:55"><name pos:start="123:53" pos:end="123:55">rFm</name></expr></argument>, <argument pos:start="123:58" pos:end="123:74"><expr pos:start="123:58" pos:end="123:74"><operator pos:start="123:58" pos:end="123:58">&amp;</operator><name pos:start="123:59" pos:end="123:74"><name pos:start="123:59" pos:end="123:63">fpa11</name><operator pos:start="123:64" pos:end="123:65">-&gt;</operator><name pos:start="123:66" pos:end="123:74">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="125:7" pos:end="125:12">break;</break>



      <case pos:start="129:7" pos:end="129:20">case <expr pos:start="129:12" pos:end="129:19"><name pos:start="129:12" pos:end="129:19">MUF_CODE</name></expr>:</case>

      <case pos:start="131:7" pos:end="131:20">case <expr pos:start="131:12" pos:end="131:19"><name pos:start="131:12" pos:end="131:19">FML_CODE</name></expr>:</case>

         <expr_stmt pos:start="133:10" pos:end="133:76"><expr pos:start="133:10" pos:end="133:75"><name pos:start="133:10" pos:end="133:25"><name pos:start="133:10" pos:end="133:14">fpa11</name><operator pos:start="133:15" pos:end="133:16">-&gt;</operator><name pos:start="133:17" pos:end="133:21">fpreg</name><index pos:start="133:22" pos:end="133:25">[<expr pos:start="133:23" pos:end="133:24"><name pos:start="133:23" pos:end="133:24">Fd</name></expr>]</index></name><operator pos:start="133:26" pos:end="133:26">.</operator><name pos:start="133:27" pos:end="133:33">fDouble</name> <operator pos:start="133:35" pos:end="133:35">=</operator> <call pos:start="133:37" pos:end="133:75"><name pos:start="133:37" pos:end="133:47">float64_mul</name><argument_list pos:start="133:48" pos:end="133:75">(<argument pos:start="133:49" pos:end="133:51"><expr pos:start="133:49" pos:end="133:51"><name pos:start="133:49" pos:end="133:51">rFn</name></expr></argument>,<argument pos:start="133:53" pos:end="133:55"><expr pos:start="133:53" pos:end="133:55"><name pos:start="133:53" pos:end="133:55">rFm</name></expr></argument>, <argument pos:start="133:58" pos:end="133:74"><expr pos:start="133:58" pos:end="133:74"><operator pos:start="133:58" pos:end="133:58">&amp;</operator><name pos:start="133:59" pos:end="133:74"><name pos:start="133:59" pos:end="133:63">fpa11</name><operator pos:start="133:64" pos:end="133:65">-&gt;</operator><name pos:start="133:66" pos:end="133:74">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="135:7" pos:end="135:12">break;</break>



      <case pos:start="139:7" pos:end="139:20">case <expr pos:start="139:12" pos:end="139:19"><name pos:start="139:12" pos:end="139:19">SUF_CODE</name></expr>:</case>

         <expr_stmt pos:start="141:10" pos:end="141:76"><expr pos:start="141:10" pos:end="141:75"><name pos:start="141:10" pos:end="141:25"><name pos:start="141:10" pos:end="141:14">fpa11</name><operator pos:start="141:15" pos:end="141:16">-&gt;</operator><name pos:start="141:17" pos:end="141:21">fpreg</name><index pos:start="141:22" pos:end="141:25">[<expr pos:start="141:23" pos:end="141:24"><name pos:start="141:23" pos:end="141:24">Fd</name></expr>]</index></name><operator pos:start="141:26" pos:end="141:26">.</operator><name pos:start="141:27" pos:end="141:33">fDouble</name> <operator pos:start="141:35" pos:end="141:35">=</operator> <call pos:start="141:37" pos:end="141:75"><name pos:start="141:37" pos:end="141:47">float64_sub</name><argument_list pos:start="141:48" pos:end="141:75">(<argument pos:start="141:49" pos:end="141:51"><expr pos:start="141:49" pos:end="141:51"><name pos:start="141:49" pos:end="141:51">rFn</name></expr></argument>,<argument pos:start="141:53" pos:end="141:55"><expr pos:start="141:53" pos:end="141:55"><name pos:start="141:53" pos:end="141:55">rFm</name></expr></argument>, <argument pos:start="141:58" pos:end="141:74"><expr pos:start="141:58" pos:end="141:74"><operator pos:start="141:58" pos:end="141:58">&amp;</operator><name pos:start="141:59" pos:end="141:74"><name pos:start="141:59" pos:end="141:63">fpa11</name><operator pos:start="141:64" pos:end="141:65">-&gt;</operator><name pos:start="141:66" pos:end="141:74">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="143:7" pos:end="143:12">break;</break>



      <case pos:start="147:7" pos:end="147:20">case <expr pos:start="147:12" pos:end="147:19"><name pos:start="147:12" pos:end="147:19">RSF_CODE</name></expr>:</case>

         <expr_stmt pos:start="149:10" pos:end="149:76"><expr pos:start="149:10" pos:end="149:75"><name pos:start="149:10" pos:end="149:25"><name pos:start="149:10" pos:end="149:14">fpa11</name><operator pos:start="149:15" pos:end="149:16">-&gt;</operator><name pos:start="149:17" pos:end="149:21">fpreg</name><index pos:start="149:22" pos:end="149:25">[<expr pos:start="149:23" pos:end="149:24"><name pos:start="149:23" pos:end="149:24">Fd</name></expr>]</index></name><operator pos:start="149:26" pos:end="149:26">.</operator><name pos:start="149:27" pos:end="149:33">fDouble</name> <operator pos:start="149:35" pos:end="149:35">=</operator> <call pos:start="149:37" pos:end="149:75"><name pos:start="149:37" pos:end="149:47">float64_sub</name><argument_list pos:start="149:48" pos:end="149:75">(<argument pos:start="149:49" pos:end="149:51"><expr pos:start="149:49" pos:end="149:51"><name pos:start="149:49" pos:end="149:51">rFm</name></expr></argument>,<argument pos:start="149:53" pos:end="149:55"><expr pos:start="149:53" pos:end="149:55"><name pos:start="149:53" pos:end="149:55">rFn</name></expr></argument>, <argument pos:start="149:58" pos:end="149:74"><expr pos:start="149:58" pos:end="149:74"><operator pos:start="149:58" pos:end="149:58">&amp;</operator><name pos:start="149:59" pos:end="149:74"><name pos:start="149:59" pos:end="149:63">fpa11</name><operator pos:start="149:64" pos:end="149:65">-&gt;</operator><name pos:start="149:66" pos:end="149:74">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="151:7" pos:end="151:12">break;</break>



      <case pos:start="155:7" pos:end="155:20">case <expr pos:start="155:12" pos:end="155:19"><name pos:start="155:12" pos:end="155:19">DVF_CODE</name></expr>:</case>

      <case pos:start="157:7" pos:end="157:20">case <expr pos:start="157:12" pos:end="157:19"><name pos:start="157:12" pos:end="157:19">FDV_CODE</name></expr>:</case>

         <expr_stmt pos:start="159:10" pos:end="159:76"><expr pos:start="159:10" pos:end="159:75"><name pos:start="159:10" pos:end="159:25"><name pos:start="159:10" pos:end="159:14">fpa11</name><operator pos:start="159:15" pos:end="159:16">-&gt;</operator><name pos:start="159:17" pos:end="159:21">fpreg</name><index pos:start="159:22" pos:end="159:25">[<expr pos:start="159:23" pos:end="159:24"><name pos:start="159:23" pos:end="159:24">Fd</name></expr>]</index></name><operator pos:start="159:26" pos:end="159:26">.</operator><name pos:start="159:27" pos:end="159:33">fDouble</name> <operator pos:start="159:35" pos:end="159:35">=</operator> <call pos:start="159:37" pos:end="159:75"><name pos:start="159:37" pos:end="159:47">float64_div</name><argument_list pos:start="159:48" pos:end="159:75">(<argument pos:start="159:49" pos:end="159:51"><expr pos:start="159:49" pos:end="159:51"><name pos:start="159:49" pos:end="159:51">rFn</name></expr></argument>,<argument pos:start="159:53" pos:end="159:55"><expr pos:start="159:53" pos:end="159:55"><name pos:start="159:53" pos:end="159:55">rFm</name></expr></argument>, <argument pos:start="159:58" pos:end="159:74"><expr pos:start="159:58" pos:end="159:74"><operator pos:start="159:58" pos:end="159:58">&amp;</operator><name pos:start="159:59" pos:end="159:74"><name pos:start="159:59" pos:end="159:63">fpa11</name><operator pos:start="159:64" pos:end="159:65">-&gt;</operator><name pos:start="159:66" pos:end="159:74">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="161:7" pos:end="161:12">break;</break>



      <case pos:start="165:7" pos:end="165:20">case <expr pos:start="165:12" pos:end="165:19"><name pos:start="165:12" pos:end="165:19">RDF_CODE</name></expr>:</case>

      <case pos:start="167:7" pos:end="167:20">case <expr pos:start="167:12" pos:end="167:19"><name pos:start="167:12" pos:end="167:19">FRD_CODE</name></expr>:</case>

         <expr_stmt pos:start="169:10" pos:end="169:76"><expr pos:start="169:10" pos:end="169:75"><name pos:start="169:10" pos:end="169:25"><name pos:start="169:10" pos:end="169:14">fpa11</name><operator pos:start="169:15" pos:end="169:16">-&gt;</operator><name pos:start="169:17" pos:end="169:21">fpreg</name><index pos:start="169:22" pos:end="169:25">[<expr pos:start="169:23" pos:end="169:24"><name pos:start="169:23" pos:end="169:24">Fd</name></expr>]</index></name><operator pos:start="169:26" pos:end="169:26">.</operator><name pos:start="169:27" pos:end="169:33">fDouble</name> <operator pos:start="169:35" pos:end="169:35">=</operator> <call pos:start="169:37" pos:end="169:75"><name pos:start="169:37" pos:end="169:47">float64_div</name><argument_list pos:start="169:48" pos:end="169:75">(<argument pos:start="169:49" pos:end="169:51"><expr pos:start="169:49" pos:end="169:51"><name pos:start="169:49" pos:end="169:51">rFm</name></expr></argument>,<argument pos:start="169:53" pos:end="169:55"><expr pos:start="169:53" pos:end="169:55"><name pos:start="169:53" pos:end="169:55">rFn</name></expr></argument>, <argument pos:start="169:58" pos:end="169:74"><expr pos:start="169:58" pos:end="169:74"><operator pos:start="169:58" pos:end="169:58">&amp;</operator><name pos:start="169:59" pos:end="169:74"><name pos:start="169:59" pos:end="169:63">fpa11</name><operator pos:start="169:64" pos:end="169:65">-&gt;</operator><name pos:start="169:66" pos:end="169:74">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="171:7" pos:end="192:0">break;</break>



<cpp:if pos:start="175:1" pos:end="175:5">#<cpp:directive pos:start="175:2" pos:end="175:3">if</cpp:directive> <expr pos:start="175:5" pos:end="175:5"><literal type="number" pos:start="175:5" pos:end="175:5">0</literal></expr></cpp:if>

      case POW_CODE:

         fpa11-&gt;fpreg[Fd].fDouble = float64_pow(rFn,rFm);

      break;



      case RPW_CODE:

         fpa11-&gt;fpreg[Fd].fDouble = float64_pow(rFm,rFn);

      break;

<cpp:endif pos:start="191:1" pos:end="191:6">#<cpp:directive pos:start="191:2" pos:end="191:6">endif</cpp:directive></cpp:endif>



      <case pos:start="195:7" pos:end="195:20">case <expr pos:start="195:12" pos:end="195:19"><name pos:start="195:12" pos:end="195:19">RMF_CODE</name></expr>:</case>

         <expr_stmt pos:start="197:10" pos:end="197:76"><expr pos:start="197:10" pos:end="197:75"><name pos:start="197:10" pos:end="197:25"><name pos:start="197:10" pos:end="197:14">fpa11</name><operator pos:start="197:15" pos:end="197:16">-&gt;</operator><name pos:start="197:17" pos:end="197:21">fpreg</name><index pos:start="197:22" pos:end="197:25">[<expr pos:start="197:23" pos:end="197:24"><name pos:start="197:23" pos:end="197:24">Fd</name></expr>]</index></name><operator pos:start="197:26" pos:end="197:26">.</operator><name pos:start="197:27" pos:end="197:33">fDouble</name> <operator pos:start="197:35" pos:end="197:35">=</operator> <call pos:start="197:37" pos:end="197:75"><name pos:start="197:37" pos:end="197:47">float64_rem</name><argument_list pos:start="197:48" pos:end="197:75">(<argument pos:start="197:49" pos:end="197:51"><expr pos:start="197:49" pos:end="197:51"><name pos:start="197:49" pos:end="197:51">rFn</name></expr></argument>,<argument pos:start="197:53" pos:end="197:55"><expr pos:start="197:53" pos:end="197:55"><name pos:start="197:53" pos:end="197:55">rFm</name></expr></argument>, <argument pos:start="197:58" pos:end="197:74"><expr pos:start="197:58" pos:end="197:74"><operator pos:start="197:58" pos:end="197:58">&amp;</operator><name pos:start="197:59" pos:end="197:74"><name pos:start="197:59" pos:end="197:63">fpa11</name><operator pos:start="197:64" pos:end="197:65">-&gt;</operator><name pos:start="197:66" pos:end="197:74">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="199:7" pos:end="212:0">break;</break>



<cpp:if pos:start="203:1" pos:end="203:5">#<cpp:directive pos:start="203:2" pos:end="203:3">if</cpp:directive> <expr pos:start="203:5" pos:end="203:5"><literal type="number" pos:start="203:5" pos:end="203:5">0</literal></expr></cpp:if>

      case POL_CODE:

         fpa11-&gt;fpreg[Fd].fDouble = float64_pol(rFn,rFm);

      break;

<cpp:endif pos:start="211:1" pos:end="211:6">#<cpp:directive pos:start="211:2" pos:end="211:6">endif</cpp:directive></cpp:endif>



      <comment type="block" pos:start="215:7" pos:end="215:27">/* monadic opcodes */</comment>

      <case pos:start="217:7" pos:end="217:20">case <expr pos:start="217:12" pos:end="217:19"><name pos:start="217:12" pos:end="217:19">MVF_CODE</name></expr>:</case>

         <expr_stmt pos:start="219:10" pos:end="219:40"><expr pos:start="219:10" pos:end="219:39"><name pos:start="219:10" pos:end="219:25"><name pos:start="219:10" pos:end="219:14">fpa11</name><operator pos:start="219:15" pos:end="219:16">-&gt;</operator><name pos:start="219:17" pos:end="219:21">fpreg</name><index pos:start="219:22" pos:end="219:25">[<expr pos:start="219:23" pos:end="219:24"><name pos:start="219:23" pos:end="219:24">Fd</name></expr>]</index></name><operator pos:start="219:26" pos:end="219:26">.</operator><name pos:start="219:27" pos:end="219:33">fDouble</name> <operator pos:start="219:35" pos:end="219:35">=</operator> <name pos:start="219:37" pos:end="219:39">rFm</name></expr>;</expr_stmt>

      <break pos:start="221:7" pos:end="221:12">break;</break>



      <case pos:start="225:7" pos:end="225:20">case <expr pos:start="225:12" pos:end="225:19"><name pos:start="225:12" pos:end="225:19">MNF_CODE</name></expr>:</case>

      <block pos:start="227:7" pos:end="243:7">{<block_content pos:start="229:10" pos:end="241:40">

         <decl_stmt pos:start="229:10" pos:end="232:0"><decl pos:start="229:10" pos:end="229:46"><type pos:start="229:10" pos:end="229:23"><name pos:start="229:10" pos:end="229:17">unsigned</name> <name pos:start="229:19" pos:end="229:21">int</name> <modifier pos:start="229:23" pos:end="229:23">*</modifier></type><name pos:start="229:24" pos:end="229:24">p</name> <init pos:start="229:26" pos:end="229:46">= <expr pos:start="229:28" pos:end="229:46"><operator pos:start="229:28" pos:end="229:28">(</operator><name pos:start="229:29" pos:end="229:36">unsigned</name> <name pos:start="229:38" pos:end="229:40">int</name><operator pos:start="229:41" pos:end="229:41">*</operator><operator pos:start="229:42" pos:end="229:42">)</operator><operator pos:start="229:43" pos:end="229:43">&amp;</operator><name pos:start="229:44" pos:end="229:46">rFm</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="231:1" pos:end="231:22">#<cpp:directive pos:start="231:2" pos:end="231:6">ifdef</cpp:directive> <name pos:start="231:8" pos:end="231:22">WORDS_BIGENDIAN</name></cpp:ifdef>

         <expr_stmt pos:start="233:10" pos:end="236:0"><expr pos:start="233:10" pos:end="233:27"><name pos:start="233:10" pos:end="233:13"><name pos:start="233:10" pos:end="233:10">p</name><index pos:start="233:11" pos:end="233:13">[<expr pos:start="233:12" pos:end="233:12"><literal type="number" pos:start="233:12" pos:end="233:12">0</literal></expr>]</index></name> <operator pos:start="233:15" pos:end="233:16">^=</operator> <literal type="number" pos:start="233:18" pos:end="233:27">0x80000000</literal></expr>;</expr_stmt>

<cpp:else pos:start="235:1" pos:end="235:5">#<cpp:directive pos:start="235:2" pos:end="235:5">else</cpp:directive></cpp:else>

         <expr_stmt pos:start="237:10" pos:end="240:0"><expr pos:start="237:10" pos:end="237:27"><name pos:start="237:10" pos:end="237:13"><name pos:start="237:10" pos:end="237:10">p</name><index pos:start="237:11" pos:end="237:13">[<expr pos:start="237:12" pos:end="237:12"><literal type="number" pos:start="237:12" pos:end="237:12">1</literal></expr>]</index></name> <operator pos:start="237:15" pos:end="237:16">^=</operator> <literal type="number" pos:start="237:18" pos:end="237:27">0x80000000</literal></expr>;</expr_stmt>

<cpp:endif pos:start="239:1" pos:end="239:6">#<cpp:directive pos:start="239:2" pos:end="239:6">endif</cpp:directive></cpp:endif>

         <expr_stmt pos:start="241:10" pos:end="241:40"><expr pos:start="241:10" pos:end="241:39"><name pos:start="241:10" pos:end="241:25"><name pos:start="241:10" pos:end="241:14">fpa11</name><operator pos:start="241:15" pos:end="241:16">-&gt;</operator><name pos:start="241:17" pos:end="241:21">fpreg</name><index pos:start="241:22" pos:end="241:25">[<expr pos:start="241:23" pos:end="241:24"><name pos:start="241:23" pos:end="241:24">Fd</name></expr>]</index></name><operator pos:start="241:26" pos:end="241:26">.</operator><name pos:start="241:27" pos:end="241:33">fDouble</name> <operator pos:start="241:35" pos:end="241:35">=</operator> <name pos:start="241:37" pos:end="241:39">rFm</name></expr>;</expr_stmt>

      </block_content>}</block>

      <break pos:start="245:7" pos:end="245:12">break;</break>



      <case pos:start="249:7" pos:end="249:20">case <expr pos:start="249:12" pos:end="249:19"><name pos:start="249:12" pos:end="249:19">ABS_CODE</name></expr>:</case>

      <block pos:start="251:7" pos:end="267:7">{<block_content pos:start="253:10" pos:end="265:40">

         <decl_stmt pos:start="253:10" pos:end="256:0"><decl pos:start="253:10" pos:end="253:46"><type pos:start="253:10" pos:end="253:23"><name pos:start="253:10" pos:end="253:17">unsigned</name> <name pos:start="253:19" pos:end="253:21">int</name> <modifier pos:start="253:23" pos:end="253:23">*</modifier></type><name pos:start="253:24" pos:end="253:24">p</name> <init pos:start="253:26" pos:end="253:46">= <expr pos:start="253:28" pos:end="253:46"><operator pos:start="253:28" pos:end="253:28">(</operator><name pos:start="253:29" pos:end="253:36">unsigned</name> <name pos:start="253:38" pos:end="253:40">int</name><operator pos:start="253:41" pos:end="253:41">*</operator><operator pos:start="253:42" pos:end="253:42">)</operator><operator pos:start="253:43" pos:end="253:43">&amp;</operator><name pos:start="253:44" pos:end="253:46">rFm</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="255:1" pos:end="255:22">#<cpp:directive pos:start="255:2" pos:end="255:6">ifdef</cpp:directive> <name pos:start="255:8" pos:end="255:22">WORDS_BIGENDIAN</name></cpp:ifdef>

         <expr_stmt pos:start="257:10" pos:end="260:0"><expr pos:start="257:10" pos:end="257:27"><name pos:start="257:10" pos:end="257:13"><name pos:start="257:10" pos:end="257:10">p</name><index pos:start="257:11" pos:end="257:13">[<expr pos:start="257:12" pos:end="257:12"><literal type="number" pos:start="257:12" pos:end="257:12">0</literal></expr>]</index></name> <operator pos:start="257:15" pos:end="257:16">&amp;=</operator> <literal type="number" pos:start="257:18" pos:end="257:27">0x7fffffff</literal></expr>;</expr_stmt>

<cpp:else pos:start="259:1" pos:end="259:5">#<cpp:directive pos:start="259:2" pos:end="259:5">else</cpp:directive></cpp:else>

         <expr_stmt pos:start="261:10" pos:end="264:0"><expr pos:start="261:10" pos:end="261:27"><name pos:start="261:10" pos:end="261:13"><name pos:start="261:10" pos:end="261:10">p</name><index pos:start="261:11" pos:end="261:13">[<expr pos:start="261:12" pos:end="261:12"><literal type="number" pos:start="261:12" pos:end="261:12">1</literal></expr>]</index></name> <operator pos:start="261:15" pos:end="261:16">&amp;=</operator> <literal type="number" pos:start="261:18" pos:end="261:27">0x7fffffff</literal></expr>;</expr_stmt>

<cpp:endif pos:start="263:1" pos:end="263:6">#<cpp:directive pos:start="263:2" pos:end="263:6">endif</cpp:directive></cpp:endif>

         <expr_stmt pos:start="265:10" pos:end="265:40"><expr pos:start="265:10" pos:end="265:39"><name pos:start="265:10" pos:end="265:25"><name pos:start="265:10" pos:end="265:14">fpa11</name><operator pos:start="265:15" pos:end="265:16">-&gt;</operator><name pos:start="265:17" pos:end="265:21">fpreg</name><index pos:start="265:22" pos:end="265:25">[<expr pos:start="265:23" pos:end="265:24"><name pos:start="265:23" pos:end="265:24">Fd</name></expr>]</index></name><operator pos:start="265:26" pos:end="265:26">.</operator><name pos:start="265:27" pos:end="265:33">fDouble</name> <operator pos:start="265:35" pos:end="265:35">=</operator> <name pos:start="265:37" pos:end="265:39">rFm</name></expr>;</expr_stmt>

      </block_content>}</block>

      <break pos:start="269:7" pos:end="269:12">break;</break>



      <case pos:start="273:7" pos:end="273:20">case <expr pos:start="273:12" pos:end="273:19"><name pos:start="273:12" pos:end="273:19">RND_CODE</name></expr>:</case>

      <case pos:start="275:7" pos:end="275:20">case <expr pos:start="275:12" pos:end="275:19"><name pos:start="275:12" pos:end="275:19">URD_CODE</name></expr>:</case>

         <expr_stmt pos:start="277:10" pos:end="277:81"><expr pos:start="277:10" pos:end="277:80"><name pos:start="277:10" pos:end="277:25"><name pos:start="277:10" pos:end="277:14">fpa11</name><operator pos:start="277:15" pos:end="277:16">-&gt;</operator><name pos:start="277:17" pos:end="277:21">fpreg</name><index pos:start="277:22" pos:end="277:25">[<expr pos:start="277:23" pos:end="277:24"><name pos:start="277:23" pos:end="277:24">Fd</name></expr>]</index></name><operator pos:start="277:26" pos:end="277:26">.</operator><name pos:start="277:27" pos:end="277:33">fDouble</name> <operator pos:start="277:35" pos:end="277:35">=</operator> <call pos:start="277:37" pos:end="277:80"><name pos:start="277:37" pos:end="277:56">float64_round_to_int</name><argument_list pos:start="277:57" pos:end="277:80">(<argument pos:start="277:58" pos:end="277:60"><expr pos:start="277:58" pos:end="277:60"><name pos:start="277:58" pos:end="277:60">rFm</name></expr></argument>, <argument pos:start="277:63" pos:end="277:79"><expr pos:start="277:63" pos:end="277:79"><operator pos:start="277:63" pos:end="277:63">&amp;</operator><name pos:start="277:64" pos:end="277:79"><name pos:start="277:64" pos:end="277:68">fpa11</name><operator pos:start="277:69" pos:end="277:70">-&gt;</operator><name pos:start="277:71" pos:end="277:79">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="279:7" pos:end="279:12">break;</break>



      <case pos:start="283:7" pos:end="283:20">case <expr pos:start="283:12" pos:end="283:19"><name pos:start="283:12" pos:end="283:19">SQT_CODE</name></expr>:</case>

         <expr_stmt pos:start="285:10" pos:end="285:73"><expr pos:start="285:10" pos:end="285:72"><name pos:start="285:10" pos:end="285:25"><name pos:start="285:10" pos:end="285:14">fpa11</name><operator pos:start="285:15" pos:end="285:16">-&gt;</operator><name pos:start="285:17" pos:end="285:21">fpreg</name><index pos:start="285:22" pos:end="285:25">[<expr pos:start="285:23" pos:end="285:24"><name pos:start="285:23" pos:end="285:24">Fd</name></expr>]</index></name><operator pos:start="285:26" pos:end="285:26">.</operator><name pos:start="285:27" pos:end="285:33">fDouble</name> <operator pos:start="285:35" pos:end="285:35">=</operator> <call pos:start="285:37" pos:end="285:72"><name pos:start="285:37" pos:end="285:48">float64_sqrt</name><argument_list pos:start="285:49" pos:end="285:72">(<argument pos:start="285:50" pos:end="285:52"><expr pos:start="285:50" pos:end="285:52"><name pos:start="285:50" pos:end="285:52">rFm</name></expr></argument>, <argument pos:start="285:55" pos:end="285:71"><expr pos:start="285:55" pos:end="285:71"><operator pos:start="285:55" pos:end="285:55">&amp;</operator><name pos:start="285:56" pos:end="285:71"><name pos:start="285:56" pos:end="285:60">fpa11</name><operator pos:start="285:61" pos:end="285:62">-&gt;</operator><name pos:start="285:63" pos:end="285:71">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="287:7" pos:end="364:0">break;</break>



<cpp:if pos:start="291:1" pos:end="291:5">#<cpp:directive pos:start="291:2" pos:end="291:3">if</cpp:directive> <expr pos:start="291:5" pos:end="291:5"><literal type="number" pos:start="291:5" pos:end="291:5">0</literal></expr></cpp:if>

      case LOG_CODE:

         fpa11-&gt;fpreg[Fd].fDouble = float64_log(rFm);

      break;



      case LGN_CODE:

         fpa11-&gt;fpreg[Fd].fDouble = float64_ln(rFm);

      break;



      case EXP_CODE:

         fpa11-&gt;fpreg[Fd].fDouble = float64_exp(rFm);

      break;



      case SIN_CODE:

         fpa11-&gt;fpreg[Fd].fDouble = float64_sin(rFm);

      break;



      case COS_CODE:

         fpa11-&gt;fpreg[Fd].fDouble = float64_cos(rFm);

      break;



      case TAN_CODE:

         fpa11-&gt;fpreg[Fd].fDouble = float64_tan(rFm);

      break;



      case ASN_CODE:

         fpa11-&gt;fpreg[Fd].fDouble = float64_arcsin(rFm);

      break;



      case ACS_CODE:

         fpa11-&gt;fpreg[Fd].fDouble = float64_arccos(rFm);

      break;



      case ATN_CODE:

         fpa11-&gt;fpreg[Fd].fDouble = float64_arctan(rFm);

      break;

<cpp:endif pos:start="363:1" pos:end="363:6">#<cpp:directive pos:start="363:2" pos:end="363:6">endif</cpp:directive></cpp:endif>



      <case pos:start="367:7" pos:end="367:20">case <expr pos:start="367:12" pos:end="367:19"><name pos:start="367:12" pos:end="367:19">NRM_CODE</name></expr>:</case>

      <break pos:start="369:7" pos:end="369:12">break;</break>



      <default pos:start="373:7" pos:end="373:14">default:</default>

      <block pos:start="375:7" pos:end="379:7">{<block_content pos:start="377:9" pos:end="377:16">

        <expr_stmt pos:start="377:9" pos:end="377:16"><expr pos:start="377:9" pos:end="377:15"><name pos:start="377:9" pos:end="377:11">nRc</name> <operator pos:start="377:13" pos:end="377:13">=</operator> <literal type="number" pos:start="377:15" pos:end="377:15">0</literal></expr>;</expr_stmt>

      </block_content>}</block>

   </block_content>}</block></switch>



   <if_stmt pos:start="385:4" pos:end="385:47"><if pos:start="385:4" pos:end="385:47">if <condition pos:start="385:7" pos:end="385:16">(<expr pos:start="385:8" pos:end="385:15"><literal type="number" pos:start="385:8" pos:end="385:8">0</literal> <operator pos:start="385:10" pos:end="385:11">!=</operator> <name pos:start="385:13" pos:end="385:15">nRc</name></expr>)</condition><block type="pseudo" pos:start="385:18" pos:end="385:47"><block_content pos:start="385:18" pos:end="385:47"> <expr_stmt pos:start="385:18" pos:end="385:47"><expr pos:start="385:18" pos:end="385:46"><name pos:start="385:18" pos:end="385:33"><name pos:start="385:18" pos:end="385:22">fpa11</name><operator pos:start="385:23" pos:end="385:24">-&gt;</operator><name pos:start="385:25" pos:end="385:29">fType</name><index pos:start="385:30" pos:end="385:33">[<expr pos:start="385:31" pos:end="385:32"><name pos:start="385:31" pos:end="385:32">Fd</name></expr>]</index></name> <operator pos:start="385:35" pos:end="385:35">=</operator> <name pos:start="385:37" pos:end="385:46">typeDouble</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

   <return pos:start="387:4" pos:end="387:14">return <expr pos:start="387:11" pos:end="387:13"><name pos:start="387:11" pos:end="387:13">nRc</name></expr>;</return>

</block_content>}</block></function>
</unit>
