<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23720.c" pos:tabs="8"><function pos:start="1:1" pos:end="775:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_h263_decode_frame</name><parameter_list pos:start="1:25" pos:end="5:62">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:47"><decl pos:start="5:30" pos:end="5:47"><type pos:start="5:30" pos:end="5:47"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:42">uint8_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:47">buf</name></decl></parameter>, <parameter pos:start="5:50" pos:end="5:61"><decl pos:start="5:50" pos:end="5:61"><type pos:start="5:50" pos:end="5:61"><name pos:start="5:50" pos:end="5:52">int</name></type> <name pos:start="5:54" pos:end="5:61">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="775:1">{<block_content pos:start="9:5" pos:end="773:43">

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">MpegEncContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">s</name> <init pos:start="9:23" pos:end="9:40">= <expr pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:40"><name pos:start="9:25" pos:end="9:29">avctx</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="18:0"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">pict</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">data</name></expr></init></decl>;</decl_stmt>



<cpp:ifdef pos:start="17:1" pos:end="17:23">#<cpp:directive pos:start="17:2" pos:end="17:6">ifdef</cpp:directive> <name pos:start="17:8" pos:end="17:23">PRINT_FRAME_TIME</name></cpp:ifdef>

<decl_stmt pos:start="19:1" pos:end="24:0"><decl pos:start="19:1" pos:end="19:22"><type pos:start="19:1" pos:end="19:8"><name pos:start="19:1" pos:end="19:8">uint64_t</name></type> <name pos:start="19:10" pos:end="19:13">time</name><init pos:start="19:14" pos:end="19:22">= <expr pos:start="19:16" pos:end="19:22"><call pos:start="19:16" pos:end="19:22"><name pos:start="19:16" pos:end="19:20">rdtsc</name><argument_list pos:start="19:21" pos:end="19:22">()</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="23:1" pos:end="23:12">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="25:5" pos:end="25:90"><expr pos:start="25:5" pos:end="25:89"><call pos:start="25:5" pos:end="25:89"><name pos:start="25:5" pos:end="25:10">av_log</name><argument_list pos:start="25:11" pos:end="25:89">(<argument pos:start="25:12" pos:end="25:16"><expr pos:start="25:12" pos:end="25:16"><name pos:start="25:12" pos:end="25:16">avctx</name></expr></argument>, <argument pos:start="25:19" pos:end="25:30"><expr pos:start="25:19" pos:end="25:30"><name pos:start="25:19" pos:end="25:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="25:33" pos:end="25:57"><expr pos:start="25:33" pos:end="25:57"><literal type="string" pos:start="25:33" pos:end="25:57">"*****frame %d size=%d\n"</literal></expr></argument>, <argument pos:start="25:60" pos:end="25:78"><expr pos:start="25:60" pos:end="25:78"><name pos:start="25:60" pos:end="25:78"><name pos:start="25:60" pos:end="25:64">avctx</name><operator pos:start="25:65" pos:end="25:66">-&gt;</operator><name pos:start="25:67" pos:end="25:78">frame_number</name></name></expr></argument>, <argument pos:start="25:81" pos:end="25:88"><expr pos:start="25:81" pos:end="25:88"><name pos:start="25:81" pos:end="25:88">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="32:0"><if pos:start="27:5" pos:end="32:0">if<condition pos:start="27:7" pos:end="27:18">(<expr pos:start="27:8" pos:end="27:17"><name pos:start="27:8" pos:end="27:15">buf_size</name><operator pos:start="27:16" pos:end="27:16">&gt;</operator><literal type="number" pos:start="27:17" pos:end="27:17">0</literal></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="32:0"><block_content pos:start="29:9" pos:end="32:0">

        <expr_stmt pos:start="29:9" pos:end="32:0"><expr pos:start="29:9" pos:end="29:90"><call pos:start="29:9" pos:end="29:90"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:90">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="29:37" pos:end="29:57"><expr pos:start="29:37" pos:end="29:57"><literal type="string" pos:start="29:37" pos:end="29:57">"bytes=%x %x %x %x\n"</literal></expr></argument>, <argument pos:start="29:60" pos:end="29:65"><expr pos:start="29:60" pos:end="29:65"><name pos:start="29:60" pos:end="29:65"><name pos:start="29:60" pos:end="29:62">buf</name><index pos:start="29:63" pos:end="29:65">[<expr pos:start="29:64" pos:end="29:64"><literal type="number" pos:start="29:64" pos:end="29:64">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="29:68" pos:end="29:73"><expr pos:start="29:68" pos:end="29:73"><name pos:start="29:68" pos:end="29:73"><name pos:start="29:68" pos:end="29:70">buf</name><index pos:start="29:71" pos:end="29:73">[<expr pos:start="29:72" pos:end="29:72"><literal type="number" pos:start="29:72" pos:end="29:72">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="29:76" pos:end="29:81"><expr pos:start="29:76" pos:end="29:81"><name pos:start="29:76" pos:end="29:81"><name pos:start="29:76" pos:end="29:78">buf</name><index pos:start="29:79" pos:end="29:81">[<expr pos:start="29:80" pos:end="29:80"><literal type="number" pos:start="29:80" pos:end="29:80">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="29:84" pos:end="29:89"><expr pos:start="29:84" pos:end="29:89"><name pos:start="29:84" pos:end="29:89"><name pos:start="29:84" pos:end="29:86">buf</name><index pos:start="29:87" pos:end="29:89">[<expr pos:start="29:88" pos:end="29:88"><literal type="number" pos:start="29:88" pos:end="29:88">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="33:5" pos:end="33:27"><expr pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:5">s</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:12">flags</name></name><operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:26"><name pos:start="33:15" pos:end="33:19">avctx</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:26">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:29"><expr pos:start="35:5" pos:end="35:28"><name pos:start="35:5" pos:end="35:13"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:13">flags2</name></name><operator pos:start="35:14" pos:end="35:14">=</operator> <name pos:start="35:16" pos:end="35:28"><name pos:start="35:16" pos:end="35:20">avctx</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:28">flags2</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:34">/* no supplementary picture */</comment>

    <if_stmt pos:start="41:5" pos:end="61:5"><if pos:start="41:5" pos:end="61:5">if <condition pos:start="41:8" pos:end="41:22">(<expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:16">buf_size</name> <operator pos:start="41:18" pos:end="41:19">==</operator> <literal type="number" pos:start="41:21" pos:end="41:21">0</literal></expr>)</condition> <block pos:start="41:24" pos:end="61:5">{<block_content pos:start="45:9" pos:end="59:17">

        <comment type="block" pos:start="43:9" pos:end="43:43">/* special case for last picture */</comment>

        <if_stmt pos:start="45:9" pos:end="55:9"><if pos:start="45:9" pos:end="55:9">if <condition pos:start="45:12" pos:end="45:51">(<expr pos:start="45:13" pos:end="45:50"><name pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:24">low_delay</name></name><operator pos:start="45:25" pos:end="45:26">==</operator><literal type="number" pos:start="45:27" pos:end="45:27">0</literal> <operator pos:start="45:29" pos:end="45:30">&amp;&amp;</operator> <name pos:start="45:32" pos:end="45:50"><name pos:start="45:32" pos:end="45:32">s</name><operator pos:start="45:33" pos:end="45:34">-&gt;</operator><name pos:start="45:35" pos:end="45:50">next_picture_ptr</name></name></expr>)</condition> <block pos:start="45:53" pos:end="55:9">{<block_content pos:start="47:13" pos:end="53:41">

            <expr_stmt pos:start="47:13" pos:end="47:50"><expr pos:start="47:13" pos:end="47:49"><operator pos:start="47:13" pos:end="47:13">*</operator><name pos:start="47:14" pos:end="47:17">pict</name><operator pos:start="47:18" pos:end="47:18">=</operator> <operator pos:start="47:20" pos:end="47:20">*</operator><operator pos:start="47:21" pos:end="47:21">(</operator><name pos:start="47:22" pos:end="47:28">AVFrame</name><operator pos:start="47:29" pos:end="47:29">*</operator><operator pos:start="47:30" pos:end="47:30">)</operator><name pos:start="47:31" pos:end="47:49"><name pos:start="47:31" pos:end="47:31">s</name><operator pos:start="47:32" pos:end="47:33">-&gt;</operator><name pos:start="47:34" pos:end="47:49">next_picture_ptr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:38"><expr pos:start="49:13" pos:end="49:37"><name pos:start="49:13" pos:end="49:31"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:31">next_picture_ptr</name></name><operator pos:start="49:32" pos:end="49:32">=</operator> <name pos:start="49:34" pos:end="49:37">NULL</name></expr>;</expr_stmt>



            <expr_stmt pos:start="53:13" pos:end="53:41"><expr pos:start="53:13" pos:end="53:40"><operator pos:start="53:13" pos:end="53:13">*</operator><name pos:start="53:14" pos:end="53:22">data_size</name> <operator pos:start="53:24" pos:end="53:24">=</operator> <sizeof pos:start="53:26" pos:end="53:40">sizeof<argument_list pos:start="53:32" pos:end="53:40">(<argument pos:start="53:33" pos:end="53:39"><expr pos:start="53:33" pos:end="53:39"><name pos:start="53:33" pos:end="53:39">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="59:9" pos:end="59:17">return <expr pos:start="59:16" pos:end="59:16"><literal type="number" pos:start="59:16" pos:end="59:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="93:5"><if pos:start="65:5" pos:end="93:5">if<condition pos:start="65:7" pos:end="65:37">(<expr pos:start="65:8" pos:end="65:36"><name pos:start="65:8" pos:end="65:15"><name pos:start="65:8" pos:end="65:8">s</name><operator pos:start="65:9" pos:end="65:10">-&gt;</operator><name pos:start="65:11" pos:end="65:15">flags</name></name><operator pos:start="65:16" pos:end="65:16">&amp;</operator><name pos:start="65:17" pos:end="65:36">CODEC_FLAG_TRUNCATED</name></expr>)</condition><block pos:start="65:38" pos:end="93:5">{<block_content pos:start="67:9" pos:end="91:28">

        <decl_stmt pos:start="67:9" pos:end="67:17"><decl pos:start="67:9" pos:end="67:16"><type pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:11">int</name></type> <name pos:start="67:13" pos:end="67:16">next</name></decl>;</decl_stmt>



        <if_stmt pos:start="71:9" pos:end="85:9"><if pos:start="71:9" pos:end="75:9">if<condition pos:start="71:11" pos:end="71:63">(<expr pos:start="71:12" pos:end="71:62"><name pos:start="71:12" pos:end="71:31">CONFIG_MPEG4_DECODER</name> <operator pos:start="71:33" pos:end="71:34">&amp;&amp;</operator> <name pos:start="71:36" pos:end="71:46"><name pos:start="71:36" pos:end="71:36">s</name><operator pos:start="71:37" pos:end="71:38">-&gt;</operator><name pos:start="71:39" pos:end="71:46">codec_id</name></name><operator pos:start="71:47" pos:end="71:48">==</operator><name pos:start="71:49" pos:end="71:62">CODEC_ID_MPEG4</name></expr>)</condition><block pos:start="71:64" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:76">

            <expr_stmt pos:start="73:13" pos:end="73:76"><expr pos:start="73:13" pos:end="73:75"><name pos:start="73:13" pos:end="73:16">next</name><operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:75"><name pos:start="73:19" pos:end="73:41">ff_mpeg4_find_frame_end</name><argument_list pos:start="73:42" pos:end="73:75">(<argument pos:start="73:43" pos:end="73:59"><expr pos:start="73:43" pos:end="73:59"><operator pos:start="73:43" pos:end="73:43">&amp;</operator><name pos:start="73:44" pos:end="73:59"><name pos:start="73:44" pos:end="73:44">s</name><operator pos:start="73:45" pos:end="73:46">-&gt;</operator><name pos:start="73:47" pos:end="73:59">parse_context</name></name></expr></argument>, <argument pos:start="73:62" pos:end="73:64"><expr pos:start="73:62" pos:end="73:64"><name pos:start="73:62" pos:end="73:64">buf</name></expr></argument>, <argument pos:start="73:67" pos:end="73:74"><expr pos:start="73:67" pos:end="73:74"><name pos:start="73:67" pos:end="73:74">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="75:10" pos:end="79:9">else if<condition pos:start="75:17" pos:end="75:67">(<expr pos:start="75:18" pos:end="75:66"><name pos:start="75:18" pos:end="75:36">CONFIG_H263_DECODER</name> <operator pos:start="75:38" pos:end="75:39">&amp;&amp;</operator> <name pos:start="75:41" pos:end="75:51"><name pos:start="75:41" pos:end="75:41">s</name><operator pos:start="75:42" pos:end="75:43">-&gt;</operator><name pos:start="75:44" pos:end="75:51">codec_id</name></name><operator pos:start="75:52" pos:end="75:53">==</operator><name pos:start="75:54" pos:end="75:66">CODEC_ID_H263</name></expr>)</condition><block pos:start="75:68" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:75">

            <expr_stmt pos:start="77:13" pos:end="77:75"><expr pos:start="77:13" pos:end="77:74"><name pos:start="77:13" pos:end="77:16">next</name><operator pos:start="77:17" pos:end="77:17">=</operator> <call pos:start="77:19" pos:end="77:74"><name pos:start="77:19" pos:end="77:40">ff_h263_find_frame_end</name><argument_list pos:start="77:41" pos:end="77:74">(<argument pos:start="77:42" pos:end="77:58"><expr pos:start="77:42" pos:end="77:58"><operator pos:start="77:42" pos:end="77:42">&amp;</operator><name pos:start="77:43" pos:end="77:58"><name pos:start="77:43" pos:end="77:43">s</name><operator pos:start="77:44" pos:end="77:45">-&gt;</operator><name pos:start="77:46" pos:end="77:58">parse_context</name></name></expr></argument>, <argument pos:start="77:61" pos:end="77:63"><expr pos:start="77:61" pos:end="77:63"><name pos:start="77:61" pos:end="77:63">buf</name></expr></argument>, <argument pos:start="77:66" pos:end="77:73"><expr pos:start="77:66" pos:end="77:73"><name pos:start="77:66" pos:end="77:73">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="79:10" pos:end="85:9">else<block pos:start="79:14" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:22">

            <expr_stmt pos:start="81:13" pos:end="81:97"><expr pos:start="81:13" pos:end="81:96"><call pos:start="81:13" pos:end="81:96"><name pos:start="81:13" pos:end="81:18">av_log</name><argument_list pos:start="81:19" pos:end="81:96">(<argument pos:start="81:20" pos:end="81:27"><expr pos:start="81:20" pos:end="81:27"><name pos:start="81:20" pos:end="81:27"><name pos:start="81:20" pos:end="81:20">s</name><operator pos:start="81:21" pos:end="81:22">-&gt;</operator><name pos:start="81:23" pos:end="81:27">avctx</name></name></expr></argument>, <argument pos:start="81:30" pos:end="81:41"><expr pos:start="81:30" pos:end="81:41"><name pos:start="81:30" pos:end="81:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:44" pos:end="81:95"><expr pos:start="81:44" pos:end="81:95"><literal type="string" pos:start="81:44" pos:end="81:95">"this codec does not support truncated bitstreams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:22">return <expr pos:start="83:20" pos:end="83:21"><operator pos:start="83:20" pos:end="83:20">-</operator><literal type="number" pos:start="83:21" pos:end="83:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="89:9" pos:end="91:28"><if pos:start="89:9" pos:end="91:28">if<condition pos:start="89:11" pos:end="89:94">( <expr pos:start="89:13" pos:end="89:92"><call pos:start="89:13" pos:end="89:88"><name pos:start="89:13" pos:end="89:28">ff_combine_frame</name><argument_list pos:start="89:29" pos:end="89:88">(<argument pos:start="89:30" pos:end="89:46"><expr pos:start="89:30" pos:end="89:46"><operator pos:start="89:30" pos:end="89:30">&amp;</operator><name pos:start="89:31" pos:end="89:46"><name pos:start="89:31" pos:end="89:31">s</name><operator pos:start="89:32" pos:end="89:33">-&gt;</operator><name pos:start="89:34" pos:end="89:46">parse_context</name></name></expr></argument>, <argument pos:start="89:49" pos:end="89:52"><expr pos:start="89:49" pos:end="89:52"><name pos:start="89:49" pos:end="89:52">next</name></expr></argument>, <argument pos:start="89:55" pos:end="89:76"><expr pos:start="89:55" pos:end="89:76"><operator pos:start="89:55" pos:end="89:55">(</operator><specifier pos:start="89:56" pos:end="89:60">const</specifier> <name pos:start="89:62" pos:end="89:68">uint8_t</name> <operator pos:start="89:70" pos:end="89:70">*</operator><operator pos:start="89:71" pos:end="89:71">*</operator><operator pos:start="89:72" pos:end="89:72">)</operator><operator pos:start="89:73" pos:end="89:73">&amp;</operator><name pos:start="89:74" pos:end="89:76">buf</name></expr></argument>, <argument pos:start="89:79" pos:end="89:87"><expr pos:start="89:79" pos:end="89:87"><operator pos:start="89:79" pos:end="89:79">&amp;</operator><name pos:start="89:80" pos:end="89:87">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="89:90" pos:end="89:90">&lt;</operator> <literal type="number" pos:start="89:92" pos:end="89:92">0</literal></expr> )</condition><block type="pseudo" pos:start="91:13" pos:end="91:28"><block_content pos:start="91:13" pos:end="91:28">

            <return pos:start="91:13" pos:end="91:28">return <expr pos:start="91:20" pos:end="91:27"><name pos:start="91:20" pos:end="91:27">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>





<label pos:start="99:1" pos:end="99:6"><name pos:start="99:1" pos:end="99:5">retry</name>:</label>



    <if_stmt pos:start="103:5" pos:end="109:47"><if pos:start="103:5" pos:end="107:5">if<condition pos:start="103:7" pos:end="103:67">(<expr pos:start="103:8" pos:end="103:66"><name pos:start="103:8" pos:end="103:31"><name pos:start="103:8" pos:end="103:8">s</name><operator pos:start="103:9" pos:end="103:10">-&gt;</operator><name pos:start="103:11" pos:end="103:31">bitstream_buffer_size</name></name> <operator pos:start="103:33" pos:end="103:34">&amp;&amp;</operator> <operator pos:start="103:36" pos:end="103:36">(</operator><name pos:start="103:37" pos:end="103:50"><name pos:start="103:37" pos:end="103:37">s</name><operator pos:start="103:38" pos:end="103:39">-&gt;</operator><name pos:start="103:40" pos:end="103:50">divx_packed</name></name> <operator pos:start="103:52" pos:end="103:53">||</operator> <name pos:start="103:55" pos:end="103:62">buf_size</name><operator pos:start="103:63" pos:end="103:63">&lt;</operator><literal type="number" pos:start="103:64" pos:end="103:65">20</literal><operator pos:start="103:66" pos:end="103:66">)</operator></expr>)</condition><block pos:start="103:68" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:79"> <comment type="line" pos:start="103:70" pos:end="103:100">//divx 5.01+/xvid frame reorder</comment>

        <expr_stmt pos:start="105:9" pos:end="105:79"><expr pos:start="105:9" pos:end="105:78"><call pos:start="105:9" pos:end="105:78"><name pos:start="105:9" pos:end="105:21">init_get_bits</name><argument_list pos:start="105:22" pos:end="105:78">(<argument pos:start="105:23" pos:end="105:28"><expr pos:start="105:23" pos:end="105:28"><operator pos:start="105:23" pos:end="105:23">&amp;</operator><name pos:start="105:24" pos:end="105:28"><name pos:start="105:24" pos:end="105:24">s</name><operator pos:start="105:25" pos:end="105:26">-&gt;</operator><name pos:start="105:27" pos:end="105:28">gb</name></name></expr></argument>, <argument pos:start="105:31" pos:end="105:49"><expr pos:start="105:31" pos:end="105:49"><name pos:start="105:31" pos:end="105:49"><name pos:start="105:31" pos:end="105:31">s</name><operator pos:start="105:32" pos:end="105:33">-&gt;</operator><name pos:start="105:34" pos:end="105:49">bitstream_buffer</name></name></expr></argument>, <argument pos:start="105:52" pos:end="105:77"><expr pos:start="105:52" pos:end="105:77"><name pos:start="105:52" pos:end="105:75"><name pos:start="105:52" pos:end="105:52">s</name><operator pos:start="105:53" pos:end="105:54">-&gt;</operator><name pos:start="105:55" pos:end="105:75">bitstream_buffer_size</name></name><operator pos:start="105:76" pos:end="105:76">*</operator><literal type="number" pos:start="105:77" pos:end="105:77">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="107:6" pos:end="109:47">else<block type="pseudo" pos:start="109:9" pos:end="109:47"><block_content pos:start="109:9" pos:end="109:47">

        <expr_stmt pos:start="109:9" pos:end="109:47"><expr pos:start="109:9" pos:end="109:46"><call pos:start="109:9" pos:end="109:46"><name pos:start="109:9" pos:end="109:21">init_get_bits</name><argument_list pos:start="109:22" pos:end="109:46">(<argument pos:start="109:23" pos:end="109:28"><expr pos:start="109:23" pos:end="109:28"><operator pos:start="109:23" pos:end="109:23">&amp;</operator><name pos:start="109:24" pos:end="109:28"><name pos:start="109:24" pos:end="109:24">s</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:28">gb</name></name></expr></argument>, <argument pos:start="109:31" pos:end="109:33"><expr pos:start="109:31" pos:end="109:33"><name pos:start="109:31" pos:end="109:33">buf</name></expr></argument>, <argument pos:start="109:36" pos:end="109:45"><expr pos:start="109:36" pos:end="109:45"><name pos:start="109:36" pos:end="109:43">buf_size</name><operator pos:start="109:44" pos:end="109:44">*</operator><literal type="number" pos:start="109:45" pos:end="109:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="111:5" pos:end="111:31"><expr pos:start="111:5" pos:end="111:30"><name pos:start="111:5" pos:end="111:28"><name pos:start="111:5" pos:end="111:5">s</name><operator pos:start="111:6" pos:end="111:7">-&gt;</operator><name pos:start="111:8" pos:end="111:28">bitstream_buffer_size</name></name><operator pos:start="111:29" pos:end="111:29">=</operator><literal type="number" pos:start="111:30" pos:end="111:30">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:32">(<expr pos:start="115:9" pos:end="115:31"><operator pos:start="115:9" pos:end="115:9">!</operator><name pos:start="115:10" pos:end="115:31"><name pos:start="115:10" pos:end="115:10">s</name><operator pos:start="115:11" pos:end="115:12">-&gt;</operator><name pos:start="115:13" pos:end="115:31">context_initialized</name></name></expr>)</condition> <block pos:start="115:34" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:22">

        <if_stmt pos:start="117:9" pos:end="119:22"><if pos:start="117:9" pos:end="119:22">if <condition pos:start="117:12" pos:end="117:35">(<expr pos:start="117:13" pos:end="117:34"><call pos:start="117:13" pos:end="117:30"><name pos:start="117:13" pos:end="117:27">MPV_common_init</name><argument_list pos:start="117:28" pos:end="117:30">(<argument pos:start="117:29" pos:end="117:29"><expr pos:start="117:29" pos:end="117:29"><name pos:start="117:29" pos:end="117:29">s</name></expr></argument>)</argument_list></call> <operator pos:start="117:32" pos:end="117:32">&lt;</operator> <literal type="number" pos:start="117:34" pos:end="117:34">0</literal></expr>)</condition><block type="pseudo" pos:start="119:13" pos:end="119:22"><block_content pos:start="119:13" pos:end="119:22"> <comment type="line" pos:start="117:37" pos:end="117:93">//we need the idct permutaton for reading a custom matrix</comment>

            <return pos:start="119:13" pos:end="119:22">return <expr pos:start="119:20" pos:end="119:21"><operator pos:start="119:20" pos:end="119:20">-</operator><literal type="number" pos:start="119:21" pos:end="119:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="125:5" pos:end="127:52">/* We need to set current_picture_ptr before reading the header,

     * otherwise we cannot store anyting in there */</comment>

    <if_stmt pos:start="129:5" pos:end="135:5"><if pos:start="129:5" pos:end="135:5">if<condition pos:start="129:7" pos:end="129:71">(<expr pos:start="129:8" pos:end="129:70"><name pos:start="129:8" pos:end="129:29"><name pos:start="129:8" pos:end="129:8">s</name><operator pos:start="129:9" pos:end="129:10">-&gt;</operator><name pos:start="129:11" pos:end="129:29">current_picture_ptr</name></name><operator pos:start="129:30" pos:end="129:31">==</operator><name pos:start="129:32" pos:end="129:35">NULL</name> <operator pos:start="129:37" pos:end="129:38">||</operator> <name pos:start="129:40" pos:end="129:70"><name pos:start="129:40" pos:end="129:40">s</name><operator pos:start="129:41" pos:end="129:42">-&gt;</operator><name pos:start="129:43" pos:end="129:61">current_picture_ptr</name><operator pos:start="129:62" pos:end="129:63">-&gt;</operator><name pos:start="129:64" pos:end="129:67">data</name><index pos:start="129:68" pos:end="129:70">[<expr pos:start="129:69" pos:end="129:69"><literal type="number" pos:start="129:69" pos:end="129:69">0</literal></expr>]</index></name></expr>)</condition><block pos:start="129:72" pos:end="135:5">{<block_content pos:start="131:9" pos:end="133:47">

        <decl_stmt pos:start="131:9" pos:end="131:44"><decl pos:start="131:9" pos:end="131:43"><type pos:start="131:9" pos:end="131:11"><name pos:start="131:9" pos:end="131:11">int</name></type> <name pos:start="131:13" pos:end="131:13">i</name><init pos:start="131:14" pos:end="131:43">= <expr pos:start="131:16" pos:end="131:43"><call pos:start="131:16" pos:end="131:43"><name pos:start="131:16" pos:end="131:37">ff_find_unused_picture</name><argument_list pos:start="131:38" pos:end="131:43">(<argument pos:start="131:39" pos:end="131:39"><expr pos:start="131:39" pos:end="131:39"><name pos:start="131:39" pos:end="131:39">s</name></expr></argument>, <argument pos:start="131:42" pos:end="131:42"><expr pos:start="131:42" pos:end="131:42"><literal type="number" pos:start="131:42" pos:end="131:42">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:47"><expr pos:start="133:9" pos:end="133:46"><name pos:start="133:9" pos:end="133:30"><name pos:start="133:9" pos:end="133:9">s</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:30">current_picture_ptr</name></name><operator pos:start="133:31" pos:end="133:31">=</operator> <operator pos:start="133:33" pos:end="133:33">&amp;</operator><name pos:start="133:34" pos:end="133:46"><name pos:start="133:34" pos:end="133:34">s</name><operator pos:start="133:35" pos:end="133:36">-&gt;</operator><name pos:start="133:37" pos:end="133:43">picture</name><index pos:start="133:44" pos:end="133:46">[<expr pos:start="133:45" pos:end="133:45"><name pos:start="133:45" pos:end="133:45">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:22">/* let's go :-) */</comment>

    <if_stmt pos:start="141:5" pos:end="177:5"><if pos:start="141:5" pos:end="145:5">if <condition pos:start="141:8" pos:end="141:53">(<expr pos:start="141:9" pos:end="141:52"><name pos:start="141:9" pos:end="141:27">CONFIG_WMV2_DECODER</name> <operator pos:start="141:29" pos:end="141:30">&amp;&amp;</operator> <name pos:start="141:32" pos:end="141:49"><name pos:start="141:32" pos:end="141:32">s</name><operator pos:start="141:33" pos:end="141:34">-&gt;</operator><name pos:start="141:35" pos:end="141:49">msmpeg4_version</name></name><operator pos:start="141:50" pos:end="141:51">==</operator><literal type="number" pos:start="141:52" pos:end="141:52">5</literal></expr>)</condition> <block pos:start="141:55" pos:end="145:5">{<block_content pos:start="143:9" pos:end="143:46">

        <expr_stmt pos:start="143:9" pos:end="143:46"><expr pos:start="143:9" pos:end="143:45"><name pos:start="143:9" pos:end="143:11">ret</name><operator pos:start="143:12" pos:end="143:12">=</operator> <call pos:start="143:14" pos:end="143:45"><name pos:start="143:14" pos:end="143:42">ff_wmv2_decode_picture_header</name><argument_list pos:start="143:43" pos:end="143:45">(<argument pos:start="143:44" pos:end="143:44"><expr pos:start="143:44" pos:end="143:44"><name pos:start="143:44" pos:end="143:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="145:7" pos:end="149:5">else if <condition pos:start="145:15" pos:end="145:60">(<expr pos:start="145:16" pos:end="145:59"><name pos:start="145:16" pos:end="145:37">CONFIG_MSMPEG4_DECODER</name> <operator pos:start="145:39" pos:end="145:40">&amp;&amp;</operator> <name pos:start="145:42" pos:end="145:59"><name pos:start="145:42" pos:end="145:42">s</name><operator pos:start="145:43" pos:end="145:44">-&gt;</operator><name pos:start="145:45" pos:end="145:59">msmpeg4_version</name></name></expr>)</condition> <block pos:start="145:62" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:47">

        <expr_stmt pos:start="147:9" pos:end="147:47"><expr pos:start="147:9" pos:end="147:46"><name pos:start="147:9" pos:end="147:11">ret</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <call pos:start="147:15" pos:end="147:46"><name pos:start="147:15" pos:end="147:43">msmpeg4_decode_picture_header</name><argument_list pos:start="147:44" pos:end="147:46">(<argument pos:start="147:45" pos:end="147:45"><expr pos:start="147:45" pos:end="147:45"><name pos:start="147:45" pos:end="147:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="149:7" pos:end="165:5">else if <condition pos:start="149:15" pos:end="149:28">(<expr pos:start="149:16" pos:end="149:27"><name pos:start="149:16" pos:end="149:27"><name pos:start="149:16" pos:end="149:16">s</name><operator pos:start="149:17" pos:end="149:18">-&gt;</operator><name pos:start="149:19" pos:end="149:27">h263_pred</name></name></expr>)</condition> <block pos:start="149:30" pos:end="165:5">{<block_content pos:start="151:9" pos:end="163:56">

        <if_stmt pos:start="151:9" pos:end="161:9"><if pos:start="151:9" pos:end="161:9">if<condition pos:start="151:11" pos:end="151:60">(<expr pos:start="151:12" pos:end="151:59"><name pos:start="151:12" pos:end="151:35"><name pos:start="151:12" pos:end="151:12">s</name><operator pos:start="151:13" pos:end="151:14">-&gt;</operator><name pos:start="151:15" pos:end="151:19">avctx</name><operator pos:start="151:20" pos:end="151:21">-&gt;</operator><name pos:start="151:22" pos:end="151:35">extradata_size</name></name> <operator pos:start="151:37" pos:end="151:38">&amp;&amp;</operator> <name pos:start="151:40" pos:end="151:56"><name pos:start="151:40" pos:end="151:40">s</name><operator pos:start="151:41" pos:end="151:42">-&gt;</operator><name pos:start="151:43" pos:end="151:56">picture_number</name></name><operator pos:start="151:57" pos:end="151:58">==</operator><literal type="number" pos:start="151:59" pos:end="151:59">0</literal></expr>)</condition><block pos:start="151:61" pos:end="161:9">{<block_content pos:start="153:13" pos:end="159:57">

            <decl_stmt pos:start="153:13" pos:end="153:29"><decl pos:start="153:13" pos:end="153:28"><type pos:start="153:13" pos:end="153:25"><name pos:start="153:13" pos:end="153:25">GetBitContext</name></type> <name pos:start="153:27" pos:end="153:28">gb</name></decl>;</decl_stmt>



            <expr_stmt pos:start="157:13" pos:end="157:80"><expr pos:start="157:13" pos:end="157:79"><call pos:start="157:13" pos:end="157:79"><name pos:start="157:13" pos:end="157:25">init_get_bits</name><argument_list pos:start="157:26" pos:end="157:79">(<argument pos:start="157:27" pos:end="157:29"><expr pos:start="157:27" pos:end="157:29"><operator pos:start="157:27" pos:end="157:27">&amp;</operator><name pos:start="157:28" pos:end="157:29">gb</name></expr></argument>, <argument pos:start="157:32" pos:end="157:50"><expr pos:start="157:32" pos:end="157:50"><name pos:start="157:32" pos:end="157:50"><name pos:start="157:32" pos:end="157:32">s</name><operator pos:start="157:33" pos:end="157:34">-&gt;</operator><name pos:start="157:35" pos:end="157:39">avctx</name><operator pos:start="157:40" pos:end="157:41">-&gt;</operator><name pos:start="157:42" pos:end="157:50">extradata</name></name></expr></argument>, <argument pos:start="157:53" pos:end="157:78"><expr pos:start="157:53" pos:end="157:78"><name pos:start="157:53" pos:end="157:76"><name pos:start="157:53" pos:end="157:53">s</name><operator pos:start="157:54" pos:end="157:55">-&gt;</operator><name pos:start="157:56" pos:end="157:60">avctx</name><operator pos:start="157:61" pos:end="157:62">-&gt;</operator><name pos:start="157:63" pos:end="157:76">extradata_size</name></name><operator pos:start="157:77" pos:end="157:77">*</operator><literal type="number" pos:start="157:78" pos:end="157:78">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:57"><expr pos:start="159:13" pos:end="159:56"><name pos:start="159:13" pos:end="159:15">ret</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <call pos:start="159:19" pos:end="159:56"><name pos:start="159:19" pos:end="159:48">ff_mpeg4_decode_picture_header</name><argument_list pos:start="159:49" pos:end="159:56">(<argument pos:start="159:50" pos:end="159:50"><expr pos:start="159:50" pos:end="159:50"><name pos:start="159:50" pos:end="159:50">s</name></expr></argument>, <argument pos:start="159:53" pos:end="159:55"><expr pos:start="159:53" pos:end="159:55"><operator pos:start="159:53" pos:end="159:53">&amp;</operator><name pos:start="159:54" pos:end="159:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:56"><expr pos:start="163:9" pos:end="163:55"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <call pos:start="163:15" pos:end="163:55"><name pos:start="163:15" pos:end="163:44">ff_mpeg4_decode_picture_header</name><argument_list pos:start="163:45" pos:end="163:55">(<argument pos:start="163:46" pos:end="163:46"><expr pos:start="163:46" pos:end="163:46"><name pos:start="163:46" pos:end="163:46">s</name></expr></argument>, <argument pos:start="163:49" pos:end="163:54"><expr pos:start="163:49" pos:end="163:54"><operator pos:start="163:49" pos:end="163:49">&amp;</operator><name pos:start="163:50" pos:end="163:54"><name pos:start="163:50" pos:end="163:50">s</name><operator pos:start="163:51" pos:end="163:52">-&gt;</operator><name pos:start="163:53" pos:end="163:54">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="165:7" pos:end="169:5">else if <condition pos:start="165:15" pos:end="165:45">(<expr pos:start="165:16" pos:end="165:44"><name pos:start="165:16" pos:end="165:26"><name pos:start="165:16" pos:end="165:16">s</name><operator pos:start="165:17" pos:end="165:18">-&gt;</operator><name pos:start="165:19" pos:end="165:26">codec_id</name></name> <operator pos:start="165:28" pos:end="165:29">==</operator> <name pos:start="165:31" pos:end="165:44">CODEC_ID_H263I</name></expr>)</condition> <block pos:start="165:47" pos:end="169:5">{<block_content pos:start="167:9" pos:end="167:50">

        <expr_stmt pos:start="167:9" pos:end="167:50"><expr pos:start="167:9" pos:end="167:49"><name pos:start="167:9" pos:end="167:11">ret</name> <operator pos:start="167:13" pos:end="167:13">=</operator> <call pos:start="167:15" pos:end="167:49"><name pos:start="167:15" pos:end="167:46">intel_h263_decode_picture_header</name><argument_list pos:start="167:47" pos:end="167:49">(<argument pos:start="167:48" pos:end="167:48"><expr pos:start="167:48" pos:end="167:48"><name pos:start="167:48" pos:end="167:48">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="169:7" pos:end="173:5">else if <condition pos:start="169:15" pos:end="169:27">(<expr pos:start="169:16" pos:end="169:26"><name pos:start="169:16" pos:end="169:26"><name pos:start="169:16" pos:end="169:16">s</name><operator pos:start="169:17" pos:end="169:18">-&gt;</operator><name pos:start="169:19" pos:end="169:26">h263_flv</name></name></expr>)</condition> <block pos:start="169:29" pos:end="173:5">{<block_content pos:start="171:9" pos:end="171:48">

        <expr_stmt pos:start="171:9" pos:end="171:48"><expr pos:start="171:9" pos:end="171:47"><name pos:start="171:9" pos:end="171:11">ret</name> <operator pos:start="171:13" pos:end="171:13">=</operator> <call pos:start="171:15" pos:end="171:47"><name pos:start="171:15" pos:end="171:44">flv_h263_decode_picture_header</name><argument_list pos:start="171:45" pos:end="171:47">(<argument pos:start="171:46" pos:end="171:46"><expr pos:start="171:46" pos:end="171:46"><name pos:start="171:46" pos:end="171:46">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="173:7" pos:end="177:5">else <block pos:start="173:12" pos:end="177:5">{<block_content pos:start="175:9" pos:end="175:44">

        <expr_stmt pos:start="175:9" pos:end="175:44"><expr pos:start="175:9" pos:end="175:43"><name pos:start="175:9" pos:end="175:11">ret</name> <operator pos:start="175:13" pos:end="175:13">=</operator> <call pos:start="175:15" pos:end="175:43"><name pos:start="175:15" pos:end="175:40">h263_decode_picture_header</name><argument_list pos:start="175:41" pos:end="175:43">(<argument pos:start="175:42" pos:end="175:42"><expr pos:start="175:42" pos:end="175:42"><name pos:start="175:42" pos:end="175:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="181:5" pos:end="181:66"><if pos:start="181:5" pos:end="181:66">if<condition pos:start="181:7" pos:end="181:26">(<expr pos:start="181:8" pos:end="181:25"><name pos:start="181:8" pos:end="181:10">ret</name><operator pos:start="181:11" pos:end="181:12">==</operator><name pos:start="181:13" pos:end="181:25">FRAME_SKIPPED</name></expr>)</condition><block type="pseudo" pos:start="181:28" pos:end="181:66"><block_content pos:start="181:28" pos:end="181:66"> <return pos:start="181:28" pos:end="181:66">return <expr pos:start="181:35" pos:end="181:65"><call pos:start="181:35" pos:end="181:65"><name pos:start="181:35" pos:end="181:52">get_consumed_bytes</name><argument_list pos:start="181:53" pos:end="181:65">(<argument pos:start="181:54" pos:end="181:54"><expr pos:start="181:54" pos:end="181:54"><name pos:start="181:54" pos:end="181:54">s</name></expr></argument>, <argument pos:start="181:57" pos:end="181:64"><expr pos:start="181:57" pos:end="181:64"><name pos:start="181:57" pos:end="181:64">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="185:5" pos:end="185:41">/* skip if the header was thrashed */</comment>

    <if_stmt pos:start="187:5" pos:end="193:5"><if pos:start="187:5" pos:end="193:5">if <condition pos:start="187:8" pos:end="187:16">(<expr pos:start="187:9" pos:end="187:15"><name pos:start="187:9" pos:end="187:11">ret</name> <operator pos:start="187:13" pos:end="187:13">&lt;</operator> <literal type="number" pos:start="187:15" pos:end="187:15">0</literal></expr>)</condition><block pos:start="187:17" pos:end="193:5">{<block_content pos:start="189:9" pos:end="191:18">

        <expr_stmt pos:start="189:9" pos:end="189:59"><expr pos:start="189:9" pos:end="189:58"><call pos:start="189:9" pos:end="189:58"><name pos:start="189:9" pos:end="189:14">av_log</name><argument_list pos:start="189:15" pos:end="189:58">(<argument pos:start="189:16" pos:end="189:23"><expr pos:start="189:16" pos:end="189:23"><name pos:start="189:16" pos:end="189:23"><name pos:start="189:16" pos:end="189:16">s</name><operator pos:start="189:17" pos:end="189:18">-&gt;</operator><name pos:start="189:19" pos:end="189:23">avctx</name></name></expr></argument>, <argument pos:start="189:26" pos:end="189:37"><expr pos:start="189:26" pos:end="189:37"><name pos:start="189:26" pos:end="189:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="189:40" pos:end="189:57"><expr pos:start="189:40" pos:end="189:57"><literal type="string" pos:start="189:40" pos:end="189:57">"header damaged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="191:9" pos:end="191:18">return <expr pos:start="191:16" pos:end="191:17"><operator pos:start="191:16" pos:end="191:16">-</operator><literal type="number" pos:start="191:17" pos:end="191:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:39"><expr pos:start="197:5" pos:end="197:38"><name pos:start="197:5" pos:end="197:23"><name pos:start="197:5" pos:end="197:9">avctx</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:23">has_b_frames</name></name><operator pos:start="197:24" pos:end="197:24">=</operator> <operator pos:start="197:26" pos:end="197:26">!</operator><name pos:start="197:27" pos:end="197:38"><name pos:start="197:27" pos:end="197:27">s</name><operator pos:start="197:28" pos:end="197:29">-&gt;</operator><name pos:start="197:30" pos:end="197:38">low_delay</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="201:5" pos:end="221:5"><if pos:start="201:5" pos:end="221:5">if<condition pos:start="201:7" pos:end="201:66">(<expr pos:start="201:8" pos:end="201:65"><name pos:start="201:8" pos:end="201:20"><name pos:start="201:8" pos:end="201:8">s</name><operator pos:start="201:9" pos:end="201:10">-&gt;</operator><name pos:start="201:11" pos:end="201:20">xvid_build</name></name><operator pos:start="201:21" pos:end="201:22">==</operator><literal type="number" pos:start="201:23" pos:end="201:23">0</literal> <operator pos:start="201:25" pos:end="201:26">&amp;&amp;</operator> <name pos:start="201:28" pos:end="201:42"><name pos:start="201:28" pos:end="201:28">s</name><operator pos:start="201:29" pos:end="201:30">-&gt;</operator><name pos:start="201:31" pos:end="201:42">divx_version</name></name><operator pos:start="201:43" pos:end="201:44">==</operator><literal type="number" pos:start="201:45" pos:end="201:45">0</literal> <operator pos:start="201:47" pos:end="201:48">&amp;&amp;</operator> <name pos:start="201:50" pos:end="201:62"><name pos:start="201:50" pos:end="201:50">s</name><operator pos:start="201:51" pos:end="201:52">-&gt;</operator><name pos:start="201:53" pos:end="201:62">lavc_build</name></name><operator pos:start="201:63" pos:end="201:64">==</operator><literal type="number" pos:start="201:65" pos:end="201:65">0</literal></expr>)</condition><block pos:start="201:67" pos:end="221:5">{<block_content pos:start="203:9" pos:end="220:0">

        <if_stmt pos:start="203:9" pos:end="220:0"><if pos:start="203:9" pos:end="220:0">if<condition pos:start="203:11" pos:end="207:43">(<expr pos:start="203:12" pos:end="207:42"><name pos:start="203:12" pos:end="203:30"><name pos:start="203:12" pos:end="203:12">s</name><operator pos:start="203:13" pos:end="203:14">-&gt;</operator><name pos:start="203:15" pos:end="203:30">stream_codec_tag</name></name> <operator pos:start="203:32" pos:end="203:33">==</operator> <call pos:start="203:35" pos:end="203:49"><name pos:start="203:35" pos:end="203:41">AV_RL32</name><argument_list pos:start="203:42" pos:end="203:49">(<argument pos:start="203:43" pos:end="203:48"><expr pos:start="203:43" pos:end="203:48"><literal type="string" pos:start="203:43" pos:end="203:48">"XVID"</literal></expr></argument>)</argument_list></call> <operator pos:start="203:51" pos:end="203:52">||</operator>

           <name pos:start="205:12" pos:end="205:23"><name pos:start="205:12" pos:end="205:12">s</name><operator pos:start="205:13" pos:end="205:14">-&gt;</operator><name pos:start="205:15" pos:end="205:23">codec_tag</name></name> <operator pos:start="205:25" pos:end="205:26">==</operator> <call pos:start="205:28" pos:end="205:42"><name pos:start="205:28" pos:end="205:34">AV_RL32</name><argument_list pos:start="205:35" pos:end="205:42">(<argument pos:start="205:36" pos:end="205:41"><expr pos:start="205:36" pos:end="205:41"><literal type="string" pos:start="205:36" pos:end="205:41">"XVID"</literal></expr></argument>)</argument_list></call> <operator pos:start="205:44" pos:end="205:45">||</operator> <name pos:start="205:47" pos:end="205:58"><name pos:start="205:47" pos:end="205:47">s</name><operator pos:start="205:48" pos:end="205:49">-&gt;</operator><name pos:start="205:50" pos:end="205:58">codec_tag</name></name> <operator pos:start="205:60" pos:end="205:61">==</operator> <call pos:start="205:63" pos:end="205:77"><name pos:start="205:63" pos:end="205:69">AV_RL32</name><argument_list pos:start="205:70" pos:end="205:77">(<argument pos:start="205:71" pos:end="205:76"><expr pos:start="205:71" pos:end="205:76"><literal type="string" pos:start="205:71" pos:end="205:76">"XVIX"</literal></expr></argument>)</argument_list></call> <operator pos:start="205:79" pos:end="205:80">||</operator>

           <name pos:start="207:12" pos:end="207:23"><name pos:start="207:12" pos:end="207:12">s</name><operator pos:start="207:13" pos:end="207:14">-&gt;</operator><name pos:start="207:15" pos:end="207:23">codec_tag</name></name> <operator pos:start="207:25" pos:end="207:26">==</operator> <call pos:start="207:28" pos:end="207:42"><name pos:start="207:28" pos:end="207:34">AV_RL32</name><argument_list pos:start="207:35" pos:end="207:42">(<argument pos:start="207:36" pos:end="207:41"><expr pos:start="207:36" pos:end="207:41"><literal type="string" pos:start="207:36" pos:end="207:41">"RMP4"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="209:13" pos:end="220:0"><block_content pos:start="209:13" pos:end="220:0">

            <expr_stmt pos:start="209:13" pos:end="220:0"><expr pos:start="209:13" pos:end="209:29"><name pos:start="209:13" pos:end="209:25"><name pos:start="209:13" pos:end="209:13">s</name><operator pos:start="209:14" pos:end="209:15">-&gt;</operator><name pos:start="209:16" pos:end="209:25">xvid_build</name></name><operator pos:start="209:26" pos:end="209:26">=</operator> <operator pos:start="209:28" pos:end="209:28">-</operator><literal type="number" pos:start="209:29" pos:end="209:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="211:1" pos:end="211:5">#<cpp:directive pos:start="211:2" pos:end="211:3">if</cpp:directive> <expr pos:start="211:5" pos:end="211:5"><literal type="number" pos:start="211:5" pos:end="211:5">0</literal></expr></cpp:if>

        if(s-&gt;codec_tag == AV_RL32("DIVX") &amp;&amp; s-&gt;vo_type==0 &amp;&amp; s-&gt;vol_control_parameters==1

           &amp;&amp; s-&gt;padding_bug_score &gt; 0 &amp;&amp; s-&gt;low_delay) <comment type="line" pos:start="215:57" pos:end="215:84">// XVID with modified fourcc</comment>

            s-&gt;xvid_build= -1;

<cpp:endif pos:start="219:1" pos:end="219:6">#<cpp:directive pos:start="219:2" pos:end="219:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="225:5" pos:end="231:5"><if pos:start="225:5" pos:end="231:5">if<condition pos:start="225:7" pos:end="225:66">(<expr pos:start="225:8" pos:end="225:65"><name pos:start="225:8" pos:end="225:20"><name pos:start="225:8" pos:end="225:8">s</name><operator pos:start="225:9" pos:end="225:10">-&gt;</operator><name pos:start="225:11" pos:end="225:20">xvid_build</name></name><operator pos:start="225:21" pos:end="225:22">==</operator><literal type="number" pos:start="225:23" pos:end="225:23">0</literal> <operator pos:start="225:25" pos:end="225:26">&amp;&amp;</operator> <name pos:start="225:28" pos:end="225:42"><name pos:start="225:28" pos:end="225:28">s</name><operator pos:start="225:29" pos:end="225:30">-&gt;</operator><name pos:start="225:31" pos:end="225:42">divx_version</name></name><operator pos:start="225:43" pos:end="225:44">==</operator><literal type="number" pos:start="225:45" pos:end="225:45">0</literal> <operator pos:start="225:47" pos:end="225:48">&amp;&amp;</operator> <name pos:start="225:50" pos:end="225:62"><name pos:start="225:50" pos:end="225:50">s</name><operator pos:start="225:51" pos:end="225:52">-&gt;</operator><name pos:start="225:53" pos:end="225:62">lavc_build</name></name><operator pos:start="225:63" pos:end="225:64">==</operator><literal type="number" pos:start="225:65" pos:end="225:65">0</literal></expr>)</condition><block pos:start="225:67" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:33">

        <if_stmt pos:start="227:9" pos:end="229:33"><if pos:start="227:9" pos:end="229:33">if<condition pos:start="227:11" pos:end="227:92">(<expr pos:start="227:12" pos:end="227:91"><name pos:start="227:12" pos:end="227:23"><name pos:start="227:12" pos:end="227:12">s</name><operator pos:start="227:13" pos:end="227:14">-&gt;</operator><name pos:start="227:15" pos:end="227:23">codec_tag</name></name> <operator pos:start="227:25" pos:end="227:26">==</operator> <call pos:start="227:28" pos:end="227:42"><name pos:start="227:28" pos:end="227:34">AV_RL32</name><argument_list pos:start="227:35" pos:end="227:42">(<argument pos:start="227:36" pos:end="227:41"><expr pos:start="227:36" pos:end="227:41"><literal type="string" pos:start="227:36" pos:end="227:41">"DIVX"</literal></expr></argument>)</argument_list></call> <operator pos:start="227:44" pos:end="227:45">&amp;&amp;</operator> <name pos:start="227:47" pos:end="227:56"><name pos:start="227:47" pos:end="227:47">s</name><operator pos:start="227:48" pos:end="227:49">-&gt;</operator><name pos:start="227:50" pos:end="227:56">vo_type</name></name><operator pos:start="227:57" pos:end="227:58">==</operator><literal type="number" pos:start="227:59" pos:end="227:59">0</literal> <operator pos:start="227:61" pos:end="227:62">&amp;&amp;</operator> <name pos:start="227:64" pos:end="227:88"><name pos:start="227:64" pos:end="227:64">s</name><operator pos:start="227:65" pos:end="227:66">-&gt;</operator><name pos:start="227:67" pos:end="227:88">vol_control_parameters</name></name><operator pos:start="227:89" pos:end="227:90">==</operator><literal type="number" pos:start="227:91" pos:end="227:91">0</literal></expr>)</condition><block type="pseudo" pos:start="229:13" pos:end="229:33"><block_content pos:start="229:13" pos:end="229:33">

            <expr_stmt pos:start="229:13" pos:end="229:33"><expr pos:start="229:13" pos:end="229:32"><name pos:start="229:13" pos:end="229:27"><name pos:start="229:13" pos:end="229:13">s</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:27">divx_version</name></name><operator pos:start="229:28" pos:end="229:28">=</operator> <literal type="number" pos:start="229:30" pos:end="229:32">400</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="229:35" pos:end="229:42">//divx 4</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="235:5" pos:end="241:5"><if pos:start="235:5" pos:end="241:5">if<condition pos:start="235:7" pos:end="235:40">(<expr pos:start="235:8" pos:end="235:39"><name pos:start="235:8" pos:end="235:20"><name pos:start="235:8" pos:end="235:8">s</name><operator pos:start="235:9" pos:end="235:10">-&gt;</operator><name pos:start="235:11" pos:end="235:20">xvid_build</name></name> <operator pos:start="235:22" pos:end="235:23">&amp;&amp;</operator> <name pos:start="235:25" pos:end="235:39"><name pos:start="235:25" pos:end="235:25">s</name><operator pos:start="235:26" pos:end="235:27">-&gt;</operator><name pos:start="235:28" pos:end="235:39">divx_version</name></name></expr>)</condition><block pos:start="235:41" pos:end="241:5">{<block_content pos:start="237:9" pos:end="239:25">

        <expr_stmt pos:start="237:9" pos:end="239:25"><expr pos:start="237:9" pos:end="239:24"><name pos:start="237:9" pos:end="237:23"><name pos:start="237:9" pos:end="237:9">s</name><operator pos:start="237:10" pos:end="237:11">-&gt;</operator><name pos:start="237:12" pos:end="237:23">divx_version</name></name><operator pos:start="237:24" pos:end="237:24">=</operator>

        <name pos:start="239:9" pos:end="239:21"><name pos:start="239:9" pos:end="239:9">s</name><operator pos:start="239:10" pos:end="239:11">-&gt;</operator><name pos:start="239:12" pos:end="239:21">divx_build</name></name><operator pos:start="239:22" pos:end="239:22">=</operator> <literal type="number" pos:start="239:24" pos:end="239:24">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="245:5" pos:end="389:5"><if pos:start="245:5" pos:end="389:5">if<condition pos:start="245:7" pos:end="245:44">(<expr pos:start="245:8" pos:end="245:43"><name pos:start="245:8" pos:end="245:25"><name pos:start="245:8" pos:end="245:8">s</name><operator pos:start="245:9" pos:end="245:10">-&gt;</operator><name pos:start="245:11" pos:end="245:25">workaround_bugs</name></name><operator pos:start="245:26" pos:end="245:26">&amp;</operator><name pos:start="245:27" pos:end="245:43">FF_BUG_AUTODETECT</name></expr>)</condition><block pos:start="245:45" pos:end="389:5">{<block_content pos:start="247:9" pos:end="388:0">

        <if_stmt pos:start="247:9" pos:end="249:51"><if pos:start="247:9" pos:end="249:51">if<condition pos:start="247:11" pos:end="247:43">(<expr pos:start="247:12" pos:end="247:42"><name pos:start="247:12" pos:end="247:23"><name pos:start="247:12" pos:end="247:12">s</name><operator pos:start="247:13" pos:end="247:14">-&gt;</operator><name pos:start="247:15" pos:end="247:23">codec_tag</name></name> <operator pos:start="247:25" pos:end="247:26">==</operator> <call pos:start="247:28" pos:end="247:42"><name pos:start="247:28" pos:end="247:34">AV_RL32</name><argument_list pos:start="247:35" pos:end="247:42">(<argument pos:start="247:36" pos:end="247:41"><expr pos:start="247:36" pos:end="247:41"><literal type="string" pos:start="247:36" pos:end="247:41">"XVIX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="249:13" pos:end="249:51"><block_content pos:start="249:13" pos:end="249:51">

            <expr_stmt pos:start="249:13" pos:end="249:51"><expr pos:start="249:13" pos:end="249:50"><name pos:start="249:13" pos:end="249:30"><name pos:start="249:13" pos:end="249:13">s</name><operator pos:start="249:14" pos:end="249:15">-&gt;</operator><name pos:start="249:16" pos:end="249:30">workaround_bugs</name></name><operator pos:start="249:31" pos:end="249:32">|=</operator> <name pos:start="249:34" pos:end="249:50">FF_BUG_XVID_ILACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="253:9" pos:end="257:9"><if pos:start="253:9" pos:end="257:9">if<condition pos:start="253:11" pos:end="253:43">(<expr pos:start="253:12" pos:end="253:42"><name pos:start="253:12" pos:end="253:23"><name pos:start="253:12" pos:end="253:12">s</name><operator pos:start="253:13" pos:end="253:14">-&gt;</operator><name pos:start="253:15" pos:end="253:23">codec_tag</name></name> <operator pos:start="253:25" pos:end="253:26">==</operator> <call pos:start="253:28" pos:end="253:42"><name pos:start="253:28" pos:end="253:34">AV_RL32</name><argument_list pos:start="253:35" pos:end="253:42">(<argument pos:start="253:36" pos:end="253:41"><expr pos:start="253:36" pos:end="253:41"><literal type="string" pos:start="253:36" pos:end="253:41">"UMP4"</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="253:44" pos:end="257:9">{<block_content pos:start="255:13" pos:end="255:45">

            <expr_stmt pos:start="255:13" pos:end="255:45"><expr pos:start="255:13" pos:end="255:44"><name pos:start="255:13" pos:end="255:30"><name pos:start="255:13" pos:end="255:13">s</name><operator pos:start="255:14" pos:end="255:15">-&gt;</operator><name pos:start="255:16" pos:end="255:30">workaround_bugs</name></name><operator pos:start="255:31" pos:end="255:32">|=</operator> <name pos:start="255:34" pos:end="255:44">FF_BUG_UMP4</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="261:9" pos:end="265:9"><if pos:start="261:9" pos:end="265:9">if<condition pos:start="261:11" pos:end="261:54">(<expr pos:start="261:12" pos:end="261:53"><name pos:start="261:12" pos:end="261:26"><name pos:start="261:12" pos:end="261:12">s</name><operator pos:start="261:13" pos:end="261:14">-&gt;</operator><name pos:start="261:15" pos:end="261:26">divx_version</name></name><operator pos:start="261:27" pos:end="261:28">&gt;=</operator><literal type="number" pos:start="261:29" pos:end="261:31">500</literal> <operator pos:start="261:33" pos:end="261:34">&amp;&amp;</operator> <name pos:start="261:36" pos:end="261:48"><name pos:start="261:36" pos:end="261:36">s</name><operator pos:start="261:37" pos:end="261:38">-&gt;</operator><name pos:start="261:39" pos:end="261:48">divx_build</name></name><operator pos:start="261:49" pos:end="261:49">&lt;</operator><literal type="number" pos:start="261:50" pos:end="261:53">1814</literal></expr>)</condition><block pos:start="261:55" pos:end="265:9">{<block_content pos:start="263:13" pos:end="263:52">

            <expr_stmt pos:start="263:13" pos:end="263:52"><expr pos:start="263:13" pos:end="263:51"><name pos:start="263:13" pos:end="263:30"><name pos:start="263:13" pos:end="263:13">s</name><operator pos:start="263:14" pos:end="263:15">-&gt;</operator><name pos:start="263:16" pos:end="263:30">workaround_bugs</name></name><operator pos:start="263:31" pos:end="263:32">|=</operator> <name pos:start="263:34" pos:end="263:51">FF_BUG_QPEL_CHROMA</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="269:9" pos:end="273:9"><if pos:start="269:9" pos:end="273:9">if<condition pos:start="269:11" pos:end="269:53">(<expr pos:start="269:12" pos:end="269:52"><name pos:start="269:12" pos:end="269:26"><name pos:start="269:12" pos:end="269:12">s</name><operator pos:start="269:13" pos:end="269:14">-&gt;</operator><name pos:start="269:15" pos:end="269:26">divx_version</name></name><operator pos:start="269:27" pos:end="269:27">&gt;</operator><literal type="number" pos:start="269:28" pos:end="269:30">502</literal> <operator pos:start="269:32" pos:end="269:33">&amp;&amp;</operator> <name pos:start="269:35" pos:end="269:47"><name pos:start="269:35" pos:end="269:35">s</name><operator pos:start="269:36" pos:end="269:37">-&gt;</operator><name pos:start="269:38" pos:end="269:47">divx_build</name></name><operator pos:start="269:48" pos:end="269:48">&lt;</operator><literal type="number" pos:start="269:49" pos:end="269:52">1814</literal></expr>)</condition><block pos:start="269:54" pos:end="273:9">{<block_content pos:start="271:13" pos:end="271:53">

            <expr_stmt pos:start="271:13" pos:end="271:53"><expr pos:start="271:13" pos:end="271:52"><name pos:start="271:13" pos:end="271:30"><name pos:start="271:13" pos:end="271:13">s</name><operator pos:start="271:14" pos:end="271:15">-&gt;</operator><name pos:start="271:16" pos:end="271:30">workaround_bugs</name></name><operator pos:start="271:31" pos:end="271:32">|=</operator> <name pos:start="271:34" pos:end="271:52">FF_BUG_QPEL_CHROMA2</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="277:9" pos:end="279:49"><if pos:start="277:9" pos:end="279:49">if<condition pos:start="277:11" pos:end="277:45">(<expr pos:start="277:12" pos:end="277:44"><name pos:start="277:12" pos:end="277:24"><name pos:start="277:12" pos:end="277:12">s</name><operator pos:start="277:13" pos:end="277:14">-&gt;</operator><name pos:start="277:15" pos:end="277:24">xvid_build</name></name> <operator pos:start="277:26" pos:end="277:27">&amp;&amp;</operator> <name pos:start="277:29" pos:end="277:41"><name pos:start="277:29" pos:end="277:29">s</name><operator pos:start="277:30" pos:end="277:31">-&gt;</operator><name pos:start="277:32" pos:end="277:41">xvid_build</name></name><operator pos:start="277:42" pos:end="277:43">&lt;=</operator><literal type="number" pos:start="277:44" pos:end="277:44">3</literal></expr>)</condition><block type="pseudo" pos:start="279:13" pos:end="279:49"><block_content pos:start="279:13" pos:end="279:49">

            <expr_stmt pos:start="279:13" pos:end="279:49"><expr pos:start="279:13" pos:end="279:48"><name pos:start="279:13" pos:end="279:32"><name pos:start="279:13" pos:end="279:13">s</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:32">padding_bug_score</name></name><operator pos:start="279:33" pos:end="279:33">=</operator> <literal type="number" pos:start="279:35" pos:end="279:37">256</literal><operator pos:start="279:38" pos:end="279:38">*</operator><literal type="number" pos:start="279:39" pos:end="279:41">256</literal><operator pos:start="279:42" pos:end="279:42">*</operator><literal type="number" pos:start="279:43" pos:end="279:45">256</literal><operator pos:start="279:46" pos:end="279:46">*</operator><literal type="number" pos:start="279:47" pos:end="279:48">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="283:9" pos:end="285:52"><if pos:start="283:9" pos:end="285:52">if<condition pos:start="283:11" pos:end="283:45">(<expr pos:start="283:12" pos:end="283:44"><name pos:start="283:12" pos:end="283:24"><name pos:start="283:12" pos:end="283:12">s</name><operator pos:start="283:13" pos:end="283:14">-&gt;</operator><name pos:start="283:15" pos:end="283:24">xvid_build</name></name> <operator pos:start="283:26" pos:end="283:27">&amp;&amp;</operator> <name pos:start="283:29" pos:end="283:41"><name pos:start="283:29" pos:end="283:29">s</name><operator pos:start="283:30" pos:end="283:31">-&gt;</operator><name pos:start="283:32" pos:end="283:41">xvid_build</name></name><operator pos:start="283:42" pos:end="283:43">&lt;=</operator><literal type="number" pos:start="283:44" pos:end="283:44">1</literal></expr>)</condition><block type="pseudo" pos:start="285:13" pos:end="285:52"><block_content pos:start="285:13" pos:end="285:52">

            <expr_stmt pos:start="285:13" pos:end="285:52"><expr pos:start="285:13" pos:end="285:51"><name pos:start="285:13" pos:end="285:30"><name pos:start="285:13" pos:end="285:13">s</name><operator pos:start="285:14" pos:end="285:15">-&gt;</operator><name pos:start="285:16" pos:end="285:30">workaround_bugs</name></name><operator pos:start="285:31" pos:end="285:32">|=</operator> <name pos:start="285:34" pos:end="285:51">FF_BUG_QPEL_CHROMA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="289:9" pos:end="291:45"><if pos:start="289:9" pos:end="291:45">if<condition pos:start="289:11" pos:end="289:46">(<expr pos:start="289:12" pos:end="289:45"><name pos:start="289:12" pos:end="289:24"><name pos:start="289:12" pos:end="289:12">s</name><operator pos:start="289:13" pos:end="289:14">-&gt;</operator><name pos:start="289:15" pos:end="289:24">xvid_build</name></name> <operator pos:start="289:26" pos:end="289:27">&amp;&amp;</operator> <name pos:start="289:29" pos:end="289:41"><name pos:start="289:29" pos:end="289:29">s</name><operator pos:start="289:30" pos:end="289:31">-&gt;</operator><name pos:start="289:32" pos:end="289:41">xvid_build</name></name><operator pos:start="289:42" pos:end="289:43">&lt;=</operator><literal type="number" pos:start="289:44" pos:end="289:45">12</literal></expr>)</condition><block type="pseudo" pos:start="291:13" pos:end="291:45"><block_content pos:start="291:13" pos:end="291:45">

            <expr_stmt pos:start="291:13" pos:end="291:45"><expr pos:start="291:13" pos:end="291:44"><name pos:start="291:13" pos:end="291:30"><name pos:start="291:13" pos:end="291:13">s</name><operator pos:start="291:14" pos:end="291:15">-&gt;</operator><name pos:start="291:16" pos:end="291:30">workaround_bugs</name></name><operator pos:start="291:31" pos:end="291:32">|=</operator> <name pos:start="291:34" pos:end="291:44">FF_BUG_EDGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="295:9" pos:end="308:0"><if pos:start="295:9" pos:end="308:0">if<condition pos:start="295:11" pos:end="295:46">(<expr pos:start="295:12" pos:end="295:45"><name pos:start="295:12" pos:end="295:24"><name pos:start="295:12" pos:end="295:12">s</name><operator pos:start="295:13" pos:end="295:14">-&gt;</operator><name pos:start="295:15" pos:end="295:24">xvid_build</name></name> <operator pos:start="295:26" pos:end="295:27">&amp;&amp;</operator> <name pos:start="295:29" pos:end="295:41"><name pos:start="295:29" pos:end="295:29">s</name><operator pos:start="295:30" pos:end="295:31">-&gt;</operator><name pos:start="295:32" pos:end="295:41">xvid_build</name></name><operator pos:start="295:42" pos:end="295:43">&lt;=</operator><literal type="number" pos:start="295:44" pos:end="295:45">32</literal></expr>)</condition><block type="pseudo" pos:start="297:13" pos:end="308:0"><block_content pos:start="297:13" pos:end="308:0">

            <expr_stmt pos:start="297:13" pos:end="308:0"><expr pos:start="297:13" pos:end="297:47"><name pos:start="297:13" pos:end="297:30"><name pos:start="297:13" pos:end="297:13">s</name><operator pos:start="297:14" pos:end="297:15">-&gt;</operator><name pos:start="297:16" pos:end="297:30">workaround_bugs</name></name><operator pos:start="297:31" pos:end="297:32">|=</operator> <name pos:start="297:34" pos:end="297:47">FF_BUG_DC_CLIP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:define pos:start="301:1" pos:end="307:50">#<cpp:directive pos:start="301:2" pos:end="301:7">define</cpp:directive> <cpp:macro pos:start="301:9" pos:end="301:41"><name pos:start="301:9" pos:end="301:21">SET_QPEL_FUNC</name><parameter_list pos:start="301:22" pos:end="301:41">(<parameter pos:start="301:23" pos:end="301:30"><type pos:start="301:23" pos:end="301:30"><name pos:start="301:23" pos:end="301:30">postfix1</name></type></parameter>, <parameter pos:start="301:33" pos:end="301:40"><type pos:start="301:33" pos:end="301:40"><name pos:start="301:33" pos:end="301:40">postfix2</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="303:5" pos:end="307:50">s-&gt;dsp.put_ ## postfix1 = ff_put_ ## postfix2;\

    s-&gt;dsp.put_no_rnd_ ## postfix1 = ff_put_no_rnd_ ## postfix2;\

    s-&gt;dsp.avg_ ## postfix1 = ff_avg_ ## postfix2;</cpp:value></cpp:define>



        <if_stmt pos:start="311:9" pos:end="313:49"><if pos:start="311:9" pos:end="313:49">if<condition pos:start="311:11" pos:end="311:47">(<expr pos:start="311:12" pos:end="311:46"><name pos:start="311:12" pos:end="311:24"><name pos:start="311:12" pos:end="311:12">s</name><operator pos:start="311:13" pos:end="311:14">-&gt;</operator><name pos:start="311:15" pos:end="311:24">lavc_build</name></name> <operator pos:start="311:26" pos:end="311:27">&amp;&amp;</operator> <name pos:start="311:29" pos:end="311:41"><name pos:start="311:29" pos:end="311:29">s</name><operator pos:start="311:30" pos:end="311:31">-&gt;</operator><name pos:start="311:32" pos:end="311:41">lavc_build</name></name><operator pos:start="311:42" pos:end="311:42">&lt;</operator><literal type="number" pos:start="311:43" pos:end="311:46">4653</literal></expr>)</condition><block type="pseudo" pos:start="313:13" pos:end="313:49"><block_content pos:start="313:13" pos:end="313:49">

            <expr_stmt pos:start="313:13" pos:end="313:49"><expr pos:start="313:13" pos:end="313:48"><name pos:start="313:13" pos:end="313:30"><name pos:start="313:13" pos:end="313:13">s</name><operator pos:start="313:14" pos:end="313:15">-&gt;</operator><name pos:start="313:16" pos:end="313:30">workaround_bugs</name></name><operator pos:start="313:31" pos:end="313:32">|=</operator> <name pos:start="313:34" pos:end="313:48">FF_BUG_STD_QPEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="317:9" pos:end="319:57"><if pos:start="317:9" pos:end="319:57">if<condition pos:start="317:11" pos:end="317:47">(<expr pos:start="317:12" pos:end="317:46"><name pos:start="317:12" pos:end="317:24"><name pos:start="317:12" pos:end="317:12">s</name><operator pos:start="317:13" pos:end="317:14">-&gt;</operator><name pos:start="317:15" pos:end="317:24">lavc_build</name></name> <operator pos:start="317:26" pos:end="317:27">&amp;&amp;</operator> <name pos:start="317:29" pos:end="317:41"><name pos:start="317:29" pos:end="317:29">s</name><operator pos:start="317:30" pos:end="317:31">-&gt;</operator><name pos:start="317:32" pos:end="317:41">lavc_build</name></name><operator pos:start="317:42" pos:end="317:42">&lt;</operator><literal type="number" pos:start="317:43" pos:end="317:46">4655</literal></expr>)</condition><block type="pseudo" pos:start="319:13" pos:end="319:57"><block_content pos:start="319:13" pos:end="319:57">

            <expr_stmt pos:start="319:13" pos:end="319:57"><expr pos:start="319:13" pos:end="319:56"><name pos:start="319:13" pos:end="319:30"><name pos:start="319:13" pos:end="319:13">s</name><operator pos:start="319:14" pos:end="319:15">-&gt;</operator><name pos:start="319:16" pos:end="319:30">workaround_bugs</name></name><operator pos:start="319:31" pos:end="319:32">|=</operator> <name pos:start="319:34" pos:end="319:56">FF_BUG_DIRECT_BLOCKSIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="323:9" pos:end="327:9"><if pos:start="323:9" pos:end="327:9">if<condition pos:start="323:11" pos:end="323:47">(<expr pos:start="323:12" pos:end="323:46"><name pos:start="323:12" pos:end="323:24"><name pos:start="323:12" pos:end="323:12">s</name><operator pos:start="323:13" pos:end="323:14">-&gt;</operator><name pos:start="323:15" pos:end="323:24">lavc_build</name></name> <operator pos:start="323:26" pos:end="323:27">&amp;&amp;</operator> <name pos:start="323:29" pos:end="323:41"><name pos:start="323:29" pos:end="323:29">s</name><operator pos:start="323:30" pos:end="323:31">-&gt;</operator><name pos:start="323:32" pos:end="323:41">lavc_build</name></name><operator pos:start="323:42" pos:end="323:42">&lt;</operator><literal type="number" pos:start="323:43" pos:end="323:46">4670</literal></expr>)</condition><block pos:start="323:48" pos:end="327:9">{<block_content pos:start="325:13" pos:end="325:45">

            <expr_stmt pos:start="325:13" pos:end="325:45"><expr pos:start="325:13" pos:end="325:44"><name pos:start="325:13" pos:end="325:30"><name pos:start="325:13" pos:end="325:13">s</name><operator pos:start="325:14" pos:end="325:15">-&gt;</operator><name pos:start="325:16" pos:end="325:30">workaround_bugs</name></name><operator pos:start="325:31" pos:end="325:32">|=</operator> <name pos:start="325:34" pos:end="325:44">FF_BUG_EDGE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="331:9" pos:end="333:48"><if pos:start="331:9" pos:end="333:48">if<condition pos:start="331:11" pos:end="331:48">(<expr pos:start="331:12" pos:end="331:47"><name pos:start="331:12" pos:end="331:24"><name pos:start="331:12" pos:end="331:12">s</name><operator pos:start="331:13" pos:end="331:14">-&gt;</operator><name pos:start="331:15" pos:end="331:24">lavc_build</name></name> <operator pos:start="331:26" pos:end="331:27">&amp;&amp;</operator> <name pos:start="331:29" pos:end="331:41"><name pos:start="331:29" pos:end="331:29">s</name><operator pos:start="331:30" pos:end="331:31">-&gt;</operator><name pos:start="331:32" pos:end="331:41">lavc_build</name></name><operator pos:start="331:42" pos:end="331:43">&lt;=</operator><literal type="number" pos:start="331:44" pos:end="331:47">4712</literal></expr>)</condition><block type="pseudo" pos:start="333:13" pos:end="333:48"><block_content pos:start="333:13" pos:end="333:48">

            <expr_stmt pos:start="333:13" pos:end="333:48"><expr pos:start="333:13" pos:end="333:47"><name pos:start="333:13" pos:end="333:30"><name pos:start="333:13" pos:end="333:13">s</name><operator pos:start="333:14" pos:end="333:15">-&gt;</operator><name pos:start="333:16" pos:end="333:30">workaround_bugs</name></name><operator pos:start="333:31" pos:end="333:32">|=</operator> <name pos:start="333:34" pos:end="333:47">FF_BUG_DC_CLIP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="337:9" pos:end="339:57"><if pos:start="337:9" pos:end="339:57">if<condition pos:start="337:11" pos:end="337:27">(<expr pos:start="337:12" pos:end="337:26"><name pos:start="337:12" pos:end="337:26"><name pos:start="337:12" pos:end="337:12">s</name><operator pos:start="337:13" pos:end="337:14">-&gt;</operator><name pos:start="337:15" pos:end="337:26">divx_version</name></name></expr>)</condition><block type="pseudo" pos:start="339:13" pos:end="339:57"><block_content pos:start="339:13" pos:end="339:57">

            <expr_stmt pos:start="339:13" pos:end="339:57"><expr pos:start="339:13" pos:end="339:56"><name pos:start="339:13" pos:end="339:30"><name pos:start="339:13" pos:end="339:13">s</name><operator pos:start="339:14" pos:end="339:15">-&gt;</operator><name pos:start="339:16" pos:end="339:30">workaround_bugs</name></name><operator pos:start="339:31" pos:end="339:32">|=</operator> <name pos:start="339:34" pos:end="339:56">FF_BUG_DIRECT_BLOCKSIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<comment type="line" pos:start="341:1" pos:end="341:58">//printf("padding_bug_score: %d\n", s-&gt;padding_bug_score);</comment>

        <if_stmt pos:start="343:9" pos:end="345:49"><if pos:start="343:9" pos:end="345:49">if<condition pos:start="343:11" pos:end="343:59">(<expr pos:start="343:12" pos:end="343:58"><name pos:start="343:12" pos:end="343:26"><name pos:start="343:12" pos:end="343:12">s</name><operator pos:start="343:13" pos:end="343:14">-&gt;</operator><name pos:start="343:15" pos:end="343:26">divx_version</name></name><operator pos:start="343:27" pos:end="343:28">==</operator><literal type="number" pos:start="343:29" pos:end="343:31">501</literal> <operator pos:start="343:33" pos:end="343:34">&amp;&amp;</operator> <name pos:start="343:36" pos:end="343:48"><name pos:start="343:36" pos:end="343:36">s</name><operator pos:start="343:37" pos:end="343:38">-&gt;</operator><name pos:start="343:39" pos:end="343:48">divx_build</name></name><operator pos:start="343:49" pos:end="343:50">==</operator><literal type="number" pos:start="343:51" pos:end="343:58">20020416</literal></expr>)</condition><block type="pseudo" pos:start="345:13" pos:end="345:49"><block_content pos:start="345:13" pos:end="345:49">

            <expr_stmt pos:start="345:13" pos:end="345:49"><expr pos:start="345:13" pos:end="345:48"><name pos:start="345:13" pos:end="345:32"><name pos:start="345:13" pos:end="345:13">s</name><operator pos:start="345:14" pos:end="345:15">-&gt;</operator><name pos:start="345:16" pos:end="345:32">padding_bug_score</name></name><operator pos:start="345:33" pos:end="345:33">=</operator> <literal type="number" pos:start="345:35" pos:end="345:37">256</literal><operator pos:start="345:38" pos:end="345:38">*</operator><literal type="number" pos:start="345:39" pos:end="345:41">256</literal><operator pos:start="345:42" pos:end="345:42">*</operator><literal type="number" pos:start="345:43" pos:end="345:45">256</literal><operator pos:start="345:46" pos:end="345:46">*</operator><literal type="number" pos:start="345:47" pos:end="345:48">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="349:9" pos:end="353:9"><if pos:start="349:9" pos:end="353:9">if<condition pos:start="349:11" pos:end="349:50">(<expr pos:start="349:12" pos:end="349:49"><name pos:start="349:12" pos:end="349:26"><name pos:start="349:12" pos:end="349:12">s</name><operator pos:start="349:13" pos:end="349:14">-&gt;</operator><name pos:start="349:15" pos:end="349:26">divx_version</name></name> <operator pos:start="349:28" pos:end="349:29">&amp;&amp;</operator> <name pos:start="349:31" pos:end="349:45"><name pos:start="349:31" pos:end="349:31">s</name><operator pos:start="349:32" pos:end="349:33">-&gt;</operator><name pos:start="349:34" pos:end="349:45">divx_version</name></name><operator pos:start="349:46" pos:end="349:46">&lt;</operator><literal type="number" pos:start="349:47" pos:end="349:49">500</literal></expr>)</condition><block pos:start="349:51" pos:end="353:9">{<block_content pos:start="351:13" pos:end="351:45">

            <expr_stmt pos:start="351:13" pos:end="351:45"><expr pos:start="351:13" pos:end="351:44"><name pos:start="351:13" pos:end="351:30"><name pos:start="351:13" pos:end="351:13">s</name><operator pos:start="351:14" pos:end="351:15">-&gt;</operator><name pos:start="351:16" pos:end="351:30">workaround_bugs</name></name><operator pos:start="351:31" pos:end="351:32">|=</operator> <name pos:start="351:34" pos:end="351:44">FF_BUG_EDGE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="357:9" pos:end="388:0"><if pos:start="357:9" pos:end="388:0">if<condition pos:start="357:11" pos:end="357:27">(<expr pos:start="357:12" pos:end="357:26"><name pos:start="357:12" pos:end="357:26"><name pos:start="357:12" pos:end="357:12">s</name><operator pos:start="357:13" pos:end="357:14">-&gt;</operator><name pos:start="357:15" pos:end="357:26">divx_version</name></name></expr>)</condition><block type="pseudo" pos:start="359:13" pos:end="388:0"><block_content pos:start="359:13" pos:end="388:0">

            <expr_stmt pos:start="359:13" pos:end="388:0"><expr pos:start="359:13" pos:end="359:51"><name pos:start="359:13" pos:end="359:30"><name pos:start="359:13" pos:end="359:13">s</name><operator pos:start="359:14" pos:end="359:15">-&gt;</operator><name pos:start="359:16" pos:end="359:30">workaround_bugs</name></name><operator pos:start="359:31" pos:end="359:32">|=</operator> <name pos:start="359:34" pos:end="359:51">FF_BUG_HPEL_CHROMA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="361:1" pos:end="361:5">#<cpp:directive pos:start="361:2" pos:end="361:3">if</cpp:directive> <expr pos:start="361:5" pos:end="361:5"><literal type="number" pos:start="361:5" pos:end="361:5">0</literal></expr></cpp:if>

        if(s-&gt;divx_version==500)

            s-&gt;padding_bug_score= 256*256*256*64;



        <comment type="block" pos:start="369:9" pos:end="373:11">/* very ugly XVID padding bug detection FIXME/XXX solve this differently

         * Let us hope this at least works.

         */</comment>

        if(   s-&gt;resync_marker==0 &amp;&amp; s-&gt;data_partitioning==0 &amp;&amp; s-&gt;divx_version==0

           &amp;&amp; s-&gt;codec_id==CODEC_ID_MPEG4 &amp;&amp; s-&gt;vo_type==0)

            s-&gt;workaround_bugs|= FF_BUG_NO_PADDING;



        if(s-&gt;lavc_build &amp;&amp; s-&gt;lavc_build&lt;4609) <comment type="line" pos:start="383:49" pos:end="383:111">//FIXME not sure about the version num but a 4609 file seems ok</comment>

            s-&gt;workaround_bugs|= FF_BUG_NO_PADDING;

<cpp:endif pos:start="387:1" pos:end="387:6">#<cpp:directive pos:start="387:2" pos:end="387:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="393:5" pos:end="421:5"><if pos:start="393:5" pos:end="421:5">if<condition pos:start="393:7" pos:end="393:43">(<expr pos:start="393:8" pos:end="393:42"><name pos:start="393:8" pos:end="393:25"><name pos:start="393:8" pos:end="393:8">s</name><operator pos:start="393:9" pos:end="393:10">-&gt;</operator><name pos:start="393:11" pos:end="393:25">workaround_bugs</name></name><operator pos:start="393:26" pos:end="393:26">&amp;</operator> <name pos:start="393:28" pos:end="393:42">FF_BUG_STD_QPEL</name></expr>)</condition><block pos:start="393:44" pos:end="421:5">{<block_content pos:start="395:9" pos:end="419:63">

        <macro pos:start="395:9" pos:end="395:64"><name pos:start="395:9" pos:end="395:21">SET_QPEL_FUNC</name><argument_list pos:start="395:22" pos:end="395:64">(<argument pos:start="395:23" pos:end="395:44">qpel_pixels_tab[<literal type="number" pos:start="395:39" pos:end="395:39">0</literal>][ <literal type="number" pos:start="395:43" pos:end="395:43">5</literal>]</argument>, <argument pos:start="395:47" pos:end="395:63">qpel16_mc11_old_c</argument>)</argument_list></macro>

        <macro pos:start="397:9" pos:end="397:64"><name pos:start="397:9" pos:end="397:21">SET_QPEL_FUNC</name><argument_list pos:start="397:22" pos:end="397:64">(<argument pos:start="397:23" pos:end="397:44">qpel_pixels_tab[<literal type="number" pos:start="397:39" pos:end="397:39">0</literal>][ <literal type="number" pos:start="397:43" pos:end="397:43">7</literal>]</argument>, <argument pos:start="397:47" pos:end="397:63">qpel16_mc31_old_c</argument>)</argument_list></macro>

        <macro pos:start="399:9" pos:end="399:64"><name pos:start="399:9" pos:end="399:21">SET_QPEL_FUNC</name><argument_list pos:start="399:22" pos:end="399:64">(<argument pos:start="399:23" pos:end="399:44">qpel_pixels_tab[<literal type="number" pos:start="399:39" pos:end="399:39">0</literal>][ <literal type="number" pos:start="399:43" pos:end="399:43">9</literal>]</argument>, <argument pos:start="399:47" pos:end="399:63">qpel16_mc12_old_c</argument>)</argument_list></macro>

        <macro pos:start="401:9" pos:end="401:64"><name pos:start="401:9" pos:end="401:21">SET_QPEL_FUNC</name><argument_list pos:start="401:22" pos:end="401:64">(<argument pos:start="401:23" pos:end="401:44">qpel_pixels_tab[<literal type="number" pos:start="401:39" pos:end="401:39">0</literal>][<literal type="number" pos:start="401:42" pos:end="401:43">11</literal>]</argument>, <argument pos:start="401:47" pos:end="401:63">qpel16_mc32_old_c</argument>)</argument_list></macro>

        <macro pos:start="403:9" pos:end="403:64"><name pos:start="403:9" pos:end="403:21">SET_QPEL_FUNC</name><argument_list pos:start="403:22" pos:end="403:64">(<argument pos:start="403:23" pos:end="403:44">qpel_pixels_tab[<literal type="number" pos:start="403:39" pos:end="403:39">0</literal>][<literal type="number" pos:start="403:42" pos:end="403:43">13</literal>]</argument>, <argument pos:start="403:47" pos:end="403:63">qpel16_mc13_old_c</argument>)</argument_list></macro>

        <macro pos:start="405:9" pos:end="405:64"><name pos:start="405:9" pos:end="405:21">SET_QPEL_FUNC</name><argument_list pos:start="405:22" pos:end="405:64">(<argument pos:start="405:23" pos:end="405:44">qpel_pixels_tab[<literal type="number" pos:start="405:39" pos:end="405:39">0</literal>][<literal type="number" pos:start="405:42" pos:end="405:43">15</literal>]</argument>, <argument pos:start="405:47" pos:end="405:63">qpel16_mc33_old_c</argument>)</argument_list></macro>



        <macro pos:start="409:9" pos:end="409:63"><name pos:start="409:9" pos:end="409:21">SET_QPEL_FUNC</name><argument_list pos:start="409:22" pos:end="409:63">(<argument pos:start="409:23" pos:end="409:44">qpel_pixels_tab[<literal type="number" pos:start="409:39" pos:end="409:39">1</literal>][ <literal type="number" pos:start="409:43" pos:end="409:43">5</literal>]</argument>, <argument pos:start="409:47" pos:end="409:62">qpel8_mc11_old_c</argument>)</argument_list></macro>

        <macro pos:start="411:9" pos:end="411:63"><name pos:start="411:9" pos:end="411:21">SET_QPEL_FUNC</name><argument_list pos:start="411:22" pos:end="411:63">(<argument pos:start="411:23" pos:end="411:44">qpel_pixels_tab[<literal type="number" pos:start="411:39" pos:end="411:39">1</literal>][ <literal type="number" pos:start="411:43" pos:end="411:43">7</literal>]</argument>, <argument pos:start="411:47" pos:end="411:62">qpel8_mc31_old_c</argument>)</argument_list></macro>

        <macro pos:start="413:9" pos:end="413:63"><name pos:start="413:9" pos:end="413:21">SET_QPEL_FUNC</name><argument_list pos:start="413:22" pos:end="413:63">(<argument pos:start="413:23" pos:end="413:44">qpel_pixels_tab[<literal type="number" pos:start="413:39" pos:end="413:39">1</literal>][ <literal type="number" pos:start="413:43" pos:end="413:43">9</literal>]</argument>, <argument pos:start="413:47" pos:end="413:62">qpel8_mc12_old_c</argument>)</argument_list></macro>

        <macro pos:start="415:9" pos:end="415:63"><name pos:start="415:9" pos:end="415:21">SET_QPEL_FUNC</name><argument_list pos:start="415:22" pos:end="415:63">(<argument pos:start="415:23" pos:end="415:44">qpel_pixels_tab[<literal type="number" pos:start="415:39" pos:end="415:39">1</literal>][<literal type="number" pos:start="415:42" pos:end="415:43">11</literal>]</argument>, <argument pos:start="415:47" pos:end="415:62">qpel8_mc32_old_c</argument>)</argument_list></macro>

        <macro pos:start="417:9" pos:end="417:63"><name pos:start="417:9" pos:end="417:21">SET_QPEL_FUNC</name><argument_list pos:start="417:22" pos:end="417:63">(<argument pos:start="417:23" pos:end="417:44">qpel_pixels_tab[<literal type="number" pos:start="417:39" pos:end="417:39">1</literal>][<literal type="number" pos:start="417:42" pos:end="417:43">13</literal>]</argument>, <argument pos:start="417:47" pos:end="417:62">qpel8_mc13_old_c</argument>)</argument_list></macro>

        <macro pos:start="419:9" pos:end="419:63"><name pos:start="419:9" pos:end="419:21">SET_QPEL_FUNC</name><argument_list pos:start="419:22" pos:end="419:63">(<argument pos:start="419:23" pos:end="419:44">qpel_pixels_tab[<literal type="number" pos:start="419:39" pos:end="419:39">1</literal>][<literal type="number" pos:start="419:42" pos:end="419:43">15</literal>]</argument>, <argument pos:start="419:47" pos:end="419:62">qpel8_mc33_old_c</argument>)</argument_list></macro>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="425:5" pos:end="452:0"><if pos:start="425:5" pos:end="452:0">if<condition pos:start="425:7" pos:end="425:36">(<expr pos:start="425:8" pos:end="425:35"><name pos:start="425:8" pos:end="425:19"><name pos:start="425:8" pos:end="425:12">avctx</name><operator pos:start="425:13" pos:end="425:14">-&gt;</operator><name pos:start="425:15" pos:end="425:19">debug</name></name> <operator pos:start="425:21" pos:end="425:21">&amp;</operator> <name pos:start="425:23" pos:end="425:35">FF_DEBUG_BUGS</name></expr>)</condition><block type="pseudo" pos:start="427:9" pos:end="452:0"><block_content pos:start="427:9" pos:end="452:0">

        <expr_stmt pos:start="427:9" pos:end="452:0"><expr pos:start="427:9" pos:end="431:41"><call pos:start="427:9" pos:end="431:41"><name pos:start="427:9" pos:end="427:14">av_log</name><argument_list pos:start="427:15" pos:end="431:41">(<argument pos:start="427:16" pos:end="427:23"><expr pos:start="427:16" pos:end="427:23"><name pos:start="427:16" pos:end="427:23"><name pos:start="427:16" pos:end="427:16">s</name><operator pos:start="427:17" pos:end="427:18">-&gt;</operator><name pos:start="427:19" pos:end="427:23">avctx</name></name></expr></argument>, <argument pos:start="427:26" pos:end="427:37"><expr pos:start="427:26" pos:end="427:37"><name pos:start="427:26" pos:end="427:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="427:40" pos:end="427:112"><expr pos:start="427:40" pos:end="427:112"><literal type="string" pos:start="427:40" pos:end="427:112">"bugs: %X lavc_build:%d xvid_build:%d divx_version:%d divx_build:%d %s\n"</literal></expr></argument>,

               <argument pos:start="429:16" pos:end="429:33"><expr pos:start="429:16" pos:end="429:33"><name pos:start="429:16" pos:end="429:33"><name pos:start="429:16" pos:end="429:16">s</name><operator pos:start="429:17" pos:end="429:18">-&gt;</operator><name pos:start="429:19" pos:end="429:33">workaround_bugs</name></name></expr></argument>, <argument pos:start="429:36" pos:end="429:48"><expr pos:start="429:36" pos:end="429:48"><name pos:start="429:36" pos:end="429:48"><name pos:start="429:36" pos:end="429:36">s</name><operator pos:start="429:37" pos:end="429:38">-&gt;</operator><name pos:start="429:39" pos:end="429:48">lavc_build</name></name></expr></argument>, <argument pos:start="429:51" pos:end="429:63"><expr pos:start="429:51" pos:end="429:63"><name pos:start="429:51" pos:end="429:63"><name pos:start="429:51" pos:end="429:51">s</name><operator pos:start="429:52" pos:end="429:53">-&gt;</operator><name pos:start="429:54" pos:end="429:63">xvid_build</name></name></expr></argument>, <argument pos:start="429:66" pos:end="429:80"><expr pos:start="429:66" pos:end="429:80"><name pos:start="429:66" pos:end="429:80"><name pos:start="429:66" pos:end="429:66">s</name><operator pos:start="429:67" pos:end="429:68">-&gt;</operator><name pos:start="429:69" pos:end="429:80">divx_version</name></name></expr></argument>, <argument pos:start="429:83" pos:end="429:95"><expr pos:start="429:83" pos:end="429:95"><name pos:start="429:83" pos:end="429:95"><name pos:start="429:83" pos:end="429:83">s</name><operator pos:start="429:84" pos:end="429:85">-&gt;</operator><name pos:start="429:86" pos:end="429:95">divx_build</name></name></expr></argument>,

               <argument pos:start="431:16" pos:end="431:40"><expr pos:start="431:16" pos:end="431:40"><ternary pos:start="431:16" pos:end="431:40"><condition pos:start="431:16" pos:end="431:31"><expr pos:start="431:16" pos:end="431:29"><name pos:start="431:16" pos:end="431:29"><name pos:start="431:16" pos:end="431:16">s</name><operator pos:start="431:17" pos:end="431:18">-&gt;</operator><name pos:start="431:19" pos:end="431:29">divx_packed</name></name></expr> ?</condition><then pos:start="431:33" pos:end="431:35"> <expr pos:start="431:33" pos:end="431:35"><literal type="string" pos:start="431:33" pos:end="431:35">"p"</literal></expr> </then><else pos:start="431:37" pos:end="431:40">: <expr pos:start="431:39" pos:end="431:40"><literal type="string" pos:start="431:39" pos:end="431:40">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:if pos:start="435:1" pos:end="435:5">#<cpp:directive pos:start="435:2" pos:end="435:3">if</cpp:directive> <expr pos:start="435:5" pos:end="435:5"><literal type="number" pos:start="435:5" pos:end="435:5">0</literal></expr></cpp:if> <comment type="line" pos:start="435:7" pos:end="435:46">// dump bits per frame / qp / complexity</comment>

{

    static FILE *f=NULL;

    if(!f) f=fopen("rate_qp_cplx.txt", "w");

    fprintf(f, "%d %d %f\n", buf_size, s-&gt;qscale, buf_size*(double)s-&gt;qscale);

}

<cpp:endif pos:start="447:1" pos:end="447:6">#<cpp:directive pos:start="447:2" pos:end="447:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="451:1" pos:end="451:12">#<cpp:directive pos:start="451:2" pos:end="451:3">if</cpp:directive> <expr pos:start="451:5" pos:end="451:12"><name pos:start="451:5" pos:end="451:12">HAVE_MMX</name></expr></cpp:if>

    <if_stmt pos:start="453:5" pos:end="466:0"><if pos:start="453:5" pos:end="466:0">if<condition pos:start="453:7" pos:end="453:116">(<expr pos:start="453:8" pos:end="453:115"><name pos:start="453:8" pos:end="453:18"><name pos:start="453:8" pos:end="453:8">s</name><operator pos:start="453:9" pos:end="453:10">-&gt;</operator><name pos:start="453:11" pos:end="453:18">codec_id</name></name> <operator pos:start="453:20" pos:end="453:21">==</operator> <name pos:start="453:23" pos:end="453:36">CODEC_ID_MPEG4</name> <operator pos:start="453:38" pos:end="453:39">&amp;&amp;</operator> <name pos:start="453:41" pos:end="453:53"><name pos:start="453:41" pos:end="453:41">s</name><operator pos:start="453:42" pos:end="453:43">-&gt;</operator><name pos:start="453:44" pos:end="453:53">xvid_build</name></name> <operator pos:start="453:55" pos:end="453:56">&amp;&amp;</operator> <name pos:start="453:58" pos:end="453:73"><name pos:start="453:58" pos:end="453:62">avctx</name><operator pos:start="453:63" pos:end="453:64">-&gt;</operator><name pos:start="453:65" pos:end="453:73">idct_algo</name></name> <operator pos:start="453:75" pos:end="453:76">==</operator> <name pos:start="453:78" pos:end="453:89">FF_IDCT_AUTO</name> <operator pos:start="453:91" pos:end="453:92">&amp;&amp;</operator> <operator pos:start="453:94" pos:end="453:94">(</operator><name pos:start="453:95" pos:end="453:102">mm_flags</name> <operator pos:start="453:104" pos:end="453:104">&amp;</operator> <name pos:start="453:106" pos:end="453:114">FF_MM_MMX</name><operator pos:start="453:115" pos:end="453:115">)</operator></expr>)</condition><block pos:start="453:117" pos:end="466:0">{<block_content pos:start="455:9" pos:end="461:28">

        <expr_stmt pos:start="455:9" pos:end="455:42"><expr pos:start="455:9" pos:end="455:41"><name pos:start="455:9" pos:end="455:24"><name pos:start="455:9" pos:end="455:13">avctx</name><operator pos:start="455:14" pos:end="455:15">-&gt;</operator><name pos:start="455:16" pos:end="455:24">idct_algo</name></name><operator pos:start="455:25" pos:end="455:25">=</operator> <name pos:start="455:27" pos:end="455:41">FF_IDCT_XVIDMMX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="457:9" pos:end="457:30"><expr pos:start="457:9" pos:end="457:29"><name pos:start="457:9" pos:end="457:26"><name pos:start="457:9" pos:end="457:13">avctx</name><operator pos:start="457:14" pos:end="457:15">-&gt;</operator><name pos:start="457:16" pos:end="457:26">coded_width</name></name><operator pos:start="457:27" pos:end="457:27">=</operator> <literal type="number" pos:start="457:29" pos:end="457:29">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="457:32" pos:end="457:46">// force reinit</comment>

<comment type="line" pos:start="459:1" pos:end="459:39">//        dsputil_init(&amp;s-&gt;dsp, avctx);</comment>

        <expr_stmt pos:start="461:9" pos:end="461:28"><expr pos:start="461:9" pos:end="461:27"><name pos:start="461:9" pos:end="461:25"><name pos:start="461:9" pos:end="461:9">s</name><operator pos:start="461:10" pos:end="461:11">-&gt;</operator><name pos:start="461:12" pos:end="461:25">picture_number</name></name><operator pos:start="461:26" pos:end="461:26">=</operator><literal type="number" pos:start="461:27" pos:end="461:27">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="465:1" pos:end="465:6">#<cpp:directive pos:start="465:2" pos:end="465:6">endif</cpp:directive></cpp:endif>



        <comment type="block" pos:start="469:9" pos:end="469:72">/* After H263 &amp; mpeg4 header decode we have the height, width,*/</comment>

        <comment type="block" pos:start="471:9" pos:end="471:71">/* and other parameters. So then we could init the picture   */</comment>

        <comment type="block" pos:start="473:9" pos:end="473:71">/* FIXME: By the way H263 decoder is evolving it should have */</comment>

        <comment type="block" pos:start="475:9" pos:end="475:71">/* an H263EncContext                                         */</comment>



    <if_stmt pos:start="479:5" pos:end="493:5"><if pos:start="479:5" pos:end="493:5">if <condition pos:start="479:8" pos:end="481:44">(   <expr pos:start="479:12" pos:end="481:43"><name pos:start="479:12" pos:end="479:19"><name pos:start="479:12" pos:end="479:12">s</name><operator pos:start="479:13" pos:end="479:14">-&gt;</operator><name pos:start="479:15" pos:end="479:19">width</name></name>  <operator pos:start="479:22" pos:end="479:23">!=</operator> <name pos:start="479:25" pos:end="479:42"><name pos:start="479:25" pos:end="479:29">avctx</name><operator pos:start="479:30" pos:end="479:31">-&gt;</operator><name pos:start="479:32" pos:end="479:42">coded_width</name></name>

        <operator pos:start="481:9" pos:end="481:10">||</operator> <name pos:start="481:12" pos:end="481:20"><name pos:start="481:12" pos:end="481:12">s</name><operator pos:start="481:13" pos:end="481:14">-&gt;</operator><name pos:start="481:15" pos:end="481:20">height</name></name> <operator pos:start="481:22" pos:end="481:23">!=</operator> <name pos:start="481:25" pos:end="481:43"><name pos:start="481:25" pos:end="481:29">avctx</name><operator pos:start="481:30" pos:end="481:31">-&gt;</operator><name pos:start="481:32" pos:end="481:43">coded_height</name></name></expr>)</condition> <block pos:start="481:46" pos:end="493:5">{<block_content pos:start="485:9" pos:end="491:29">

        <comment type="block" pos:start="483:9" pos:end="483:54">/* H.263 could change picture size any time */</comment>

        <decl_stmt pos:start="485:9" pos:end="485:42"><decl pos:start="485:9" pos:end="485:41"><type pos:start="485:9" pos:end="485:20"><name pos:start="485:9" pos:end="485:20">ParseContext</name></type> <name pos:start="485:22" pos:end="485:23">pc</name><init pos:start="485:24" pos:end="485:41">= <expr pos:start="485:26" pos:end="485:41"><name pos:start="485:26" pos:end="485:41"><name pos:start="485:26" pos:end="485:26">s</name><operator pos:start="485:27" pos:end="485:28">-&gt;</operator><name pos:start="485:29" pos:end="485:41">parse_context</name></name></expr></init></decl>;</decl_stmt> <comment type="line" pos:start="485:44" pos:end="485:86">//FIXME move these demuxng hack to avformat</comment>

        <expr_stmt pos:start="487:9" pos:end="487:34"><expr pos:start="487:9" pos:end="487:33"><name pos:start="487:9" pos:end="487:31"><name pos:start="487:9" pos:end="487:9">s</name><operator pos:start="487:10" pos:end="487:11">-&gt;</operator><name pos:start="487:12" pos:end="487:24">parse_context</name><operator pos:start="487:25" pos:end="487:25">.</operator><name pos:start="487:26" pos:end="487:31">buffer</name></name><operator pos:start="487:32" pos:end="487:32">=</operator><literal type="number" pos:start="487:33" pos:end="487:33">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="489:9" pos:end="489:26"><expr pos:start="489:9" pos:end="489:25"><call pos:start="489:9" pos:end="489:25"><name pos:start="489:9" pos:end="489:22">MPV_common_end</name><argument_list pos:start="489:23" pos:end="489:25">(<argument pos:start="489:24" pos:end="489:24"><expr pos:start="489:24" pos:end="489:24"><name pos:start="489:24" pos:end="489:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="491:9" pos:end="491:29"><expr pos:start="491:9" pos:end="491:28"><name pos:start="491:9" pos:end="491:24"><name pos:start="491:9" pos:end="491:9">s</name><operator pos:start="491:10" pos:end="491:11">-&gt;</operator><name pos:start="491:12" pos:end="491:24">parse_context</name></name><operator pos:start="491:25" pos:end="491:25">=</operator> <name pos:start="491:27" pos:end="491:28">pc</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="495:5" pos:end="503:5"><if pos:start="495:5" pos:end="503:5">if <condition pos:start="495:8" pos:end="495:32">(<expr pos:start="495:9" pos:end="495:31"><operator pos:start="495:9" pos:end="495:9">!</operator><name pos:start="495:10" pos:end="495:31"><name pos:start="495:10" pos:end="495:10">s</name><operator pos:start="495:11" pos:end="495:12">-&gt;</operator><name pos:start="495:13" pos:end="495:31">context_initialized</name></name></expr>)</condition> <block pos:start="495:34" pos:end="503:5">{<block_content pos:start="497:9" pos:end="501:19">

        <expr_stmt pos:start="497:9" pos:end="497:59"><expr pos:start="497:9" pos:end="497:58"><call pos:start="497:9" pos:end="497:58"><name pos:start="497:9" pos:end="497:30">avcodec_set_dimensions</name><argument_list pos:start="497:31" pos:end="497:58">(<argument pos:start="497:32" pos:end="497:36"><expr pos:start="497:32" pos:end="497:36"><name pos:start="497:32" pos:end="497:36">avctx</name></expr></argument>, <argument pos:start="497:39" pos:end="497:46"><expr pos:start="497:39" pos:end="497:46"><name pos:start="497:39" pos:end="497:46"><name pos:start="497:39" pos:end="497:39">s</name><operator pos:start="497:40" pos:end="497:41">-&gt;</operator><name pos:start="497:42" pos:end="497:46">width</name></name></expr></argument>, <argument pos:start="497:49" pos:end="497:57"><expr pos:start="497:49" pos:end="497:57"><name pos:start="497:49" pos:end="497:57"><name pos:start="497:49" pos:end="497:49">s</name><operator pos:start="497:50" pos:end="497:51">-&gt;</operator><name pos:start="497:52" pos:end="497:57">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <goto pos:start="501:9" pos:end="501:19">goto <name pos:start="501:14" pos:end="501:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="507:5" pos:end="509:49"><if pos:start="507:5" pos:end="509:49">if<condition pos:start="507:7" pos:end="507:67">(<expr pos:start="507:8" pos:end="507:66"><operator pos:start="507:8" pos:end="507:8">(</operator><name pos:start="507:9" pos:end="507:19"><name pos:start="507:9" pos:end="507:9">s</name><operator pos:start="507:10" pos:end="507:11">-&gt;</operator><name pos:start="507:12" pos:end="507:19">codec_id</name></name><operator pos:start="507:20" pos:end="507:21">==</operator><name pos:start="507:22" pos:end="507:34">CODEC_ID_H263</name> <operator pos:start="507:36" pos:end="507:37">||</operator> <name pos:start="507:39" pos:end="507:49"><name pos:start="507:39" pos:end="507:39">s</name><operator pos:start="507:40" pos:end="507:41">-&gt;</operator><name pos:start="507:42" pos:end="507:49">codec_id</name></name><operator pos:start="507:50" pos:end="507:51">==</operator><name pos:start="507:52" pos:end="507:65">CODEC_ID_H263P</name><operator pos:start="507:66" pos:end="507:66">)</operator></expr>)</condition><block type="pseudo" pos:start="509:9" pos:end="509:49"><block_content pos:start="509:9" pos:end="509:49">

        <expr_stmt pos:start="509:9" pos:end="509:49"><expr pos:start="509:9" pos:end="509:48"><name pos:start="509:9" pos:end="509:20"><name pos:start="509:9" pos:end="509:9">s</name><operator pos:start="509:10" pos:end="509:11">-&gt;</operator><name pos:start="509:12" pos:end="509:20">gob_index</name></name> <operator pos:start="509:22" pos:end="509:22">=</operator> <call pos:start="509:24" pos:end="509:48"><name pos:start="509:24" pos:end="509:45">ff_h263_get_gob_height</name><argument_list pos:start="509:46" pos:end="509:48">(<argument pos:start="509:47" pos:end="509:47"><expr pos:start="509:47" pos:end="509:47"><name pos:start="509:47" pos:end="509:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="line" pos:start="513:5" pos:end="513:22">// for hurry_up==5</comment>

    <expr_stmt pos:start="515:5" pos:end="515:47"><expr pos:start="515:5" pos:end="515:46"><name pos:start="515:5" pos:end="515:32"><name pos:start="515:5" pos:end="515:5">s</name><operator pos:start="515:6" pos:end="515:7">-&gt;</operator><name pos:start="515:8" pos:end="515:22">current_picture</name><operator pos:start="515:23" pos:end="515:23">.</operator><name pos:start="515:24" pos:end="515:32">pict_type</name></name><operator pos:start="515:33" pos:end="515:33">=</operator> <name pos:start="515:35" pos:end="515:46"><name pos:start="515:35" pos:end="515:35">s</name><operator pos:start="515:36" pos:end="515:37">-&gt;</operator><name pos:start="515:38" pos:end="515:46">pict_type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="517:5" pos:end="517:60"><expr pos:start="517:5" pos:end="517:59"><name pos:start="517:5" pos:end="517:32"><name pos:start="517:5" pos:end="517:5">s</name><operator pos:start="517:6" pos:end="517:7">-&gt;</operator><name pos:start="517:8" pos:end="517:22">current_picture</name><operator pos:start="517:23" pos:end="517:23">.</operator><name pos:start="517:24" pos:end="517:32">key_frame</name></name><operator pos:start="517:33" pos:end="517:33">=</operator> <name pos:start="517:35" pos:end="517:46"><name pos:start="517:35" pos:end="517:35">s</name><operator pos:start="517:36" pos:end="517:37">-&gt;</operator><name pos:start="517:38" pos:end="517:46">pict_type</name></name> <operator pos:start="517:48" pos:end="517:49">==</operator> <name pos:start="517:51" pos:end="517:59">FF_I_TYPE</name></expr>;</expr_stmt>



    <comment type="block" pos:start="521:5" pos:end="521:57">/* skip B-frames if we don't have reference frames */</comment>

    <if_stmt pos:start="523:5" pos:end="523:117"><if pos:start="523:5" pos:end="523:117">if<condition pos:start="523:7" pos:end="523:77">(<expr pos:start="523:8" pos:end="523:76"><name pos:start="523:8" pos:end="523:26"><name pos:start="523:8" pos:end="523:8">s</name><operator pos:start="523:9" pos:end="523:10">-&gt;</operator><name pos:start="523:11" pos:end="523:26">last_picture_ptr</name></name><operator pos:start="523:27" pos:end="523:28">==</operator><name pos:start="523:29" pos:end="523:32">NULL</name> <operator pos:start="523:34" pos:end="523:35">&amp;&amp;</operator> <operator pos:start="523:37" pos:end="523:37">(</operator><name pos:start="523:38" pos:end="523:49"><name pos:start="523:38" pos:end="523:38">s</name><operator pos:start="523:39" pos:end="523:40">-&gt;</operator><name pos:start="523:41" pos:end="523:49">pict_type</name></name><operator pos:start="523:50" pos:end="523:51">==</operator><name pos:start="523:52" pos:end="523:60">FF_B_TYPE</name> <operator pos:start="523:62" pos:end="523:63">||</operator> <name pos:start="523:65" pos:end="523:75"><name pos:start="523:65" pos:end="523:65">s</name><operator pos:start="523:66" pos:end="523:67">-&gt;</operator><name pos:start="523:68" pos:end="523:75">dropable</name></name><operator pos:start="523:76" pos:end="523:76">)</operator></expr>)</condition><block type="pseudo" pos:start="523:79" pos:end="523:117"><block_content pos:start="523:79" pos:end="523:117"> <return pos:start="523:79" pos:end="523:117">return <expr pos:start="523:86" pos:end="523:116"><call pos:start="523:86" pos:end="523:116"><name pos:start="523:86" pos:end="523:103">get_consumed_bytes</name><argument_list pos:start="523:104" pos:end="523:116">(<argument pos:start="523:105" pos:end="523:105"><expr pos:start="523:105" pos:end="523:105"><name pos:start="523:105" pos:end="523:105">s</name></expr></argument>, <argument pos:start="523:108" pos:end="523:115"><expr pos:start="523:108" pos:end="523:115"><name pos:start="523:108" pos:end="523:115">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="525:5" pos:end="525:44">/* skip b frames if we are in a hurry */</comment>

    <if_stmt pos:start="527:5" pos:end="527:90"><if pos:start="527:5" pos:end="527:90">if<condition pos:start="527:7" pos:end="527:50">(<expr pos:start="527:8" pos:end="527:49"><name pos:start="527:8" pos:end="527:22"><name pos:start="527:8" pos:end="527:12">avctx</name><operator pos:start="527:13" pos:end="527:14">-&gt;</operator><name pos:start="527:15" pos:end="527:22">hurry_up</name></name> <operator pos:start="527:24" pos:end="527:25">&amp;&amp;</operator> <name pos:start="527:27" pos:end="527:38"><name pos:start="527:27" pos:end="527:27">s</name><operator pos:start="527:28" pos:end="527:29">-&gt;</operator><name pos:start="527:30" pos:end="527:38">pict_type</name></name><operator pos:start="527:39" pos:end="527:40">==</operator><name pos:start="527:41" pos:end="527:49">FF_B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="527:52" pos:end="527:90"><block_content pos:start="527:52" pos:end="527:90"> <return pos:start="527:52" pos:end="527:90">return <expr pos:start="527:59" pos:end="527:89"><call pos:start="527:59" pos:end="527:89"><name pos:start="527:59" pos:end="527:76">get_consumed_bytes</name><argument_list pos:start="527:77" pos:end="527:89">(<argument pos:start="527:78" pos:end="527:78"><expr pos:start="527:78" pos:end="527:78"><name pos:start="527:78" pos:end="527:78">s</name></expr></argument>, <argument pos:start="527:81" pos:end="527:88"><expr pos:start="527:81" pos:end="527:88"><name pos:start="527:81" pos:end="527:88">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="529:5" pos:end="535:47"><if pos:start="529:5" pos:end="535:47">if<condition pos:start="529:7" pos:end="533:46">(   <expr pos:start="529:11" pos:end="533:45"><operator pos:start="529:11" pos:end="529:11">(</operator><name pos:start="529:12" pos:end="529:28"><name pos:start="529:12" pos:end="529:16">avctx</name><operator pos:start="529:17" pos:end="529:18">-&gt;</operator><name pos:start="529:19" pos:end="529:28">skip_frame</name></name> <operator pos:start="529:30" pos:end="529:31">&gt;=</operator> <name pos:start="529:33" pos:end="529:48">AVDISCARD_NONREF</name> <operator pos:start="529:50" pos:end="529:51">&amp;&amp;</operator> <name pos:start="529:53" pos:end="529:64"><name pos:start="529:53" pos:end="529:53">s</name><operator pos:start="529:54" pos:end="529:55">-&gt;</operator><name pos:start="529:56" pos:end="529:64">pict_type</name></name><operator pos:start="529:65" pos:end="529:66">==</operator><name pos:start="529:67" pos:end="529:75">FF_B_TYPE</name><operator pos:start="529:76" pos:end="529:76">)</operator>

       <operator pos:start="531:8" pos:end="531:9">||</operator> <operator pos:start="531:11" pos:end="531:11">(</operator><name pos:start="531:12" pos:end="531:28"><name pos:start="531:12" pos:end="531:16">avctx</name><operator pos:start="531:17" pos:end="531:18">-&gt;</operator><name pos:start="531:19" pos:end="531:28">skip_frame</name></name> <operator pos:start="531:30" pos:end="531:31">&gt;=</operator> <name pos:start="531:33" pos:end="531:48">AVDISCARD_NONKEY</name> <operator pos:start="531:50" pos:end="531:51">&amp;&amp;</operator> <name pos:start="531:53" pos:end="531:64"><name pos:start="531:53" pos:end="531:53">s</name><operator pos:start="531:54" pos:end="531:55">-&gt;</operator><name pos:start="531:56" pos:end="531:64">pict_type</name></name><operator pos:start="531:65" pos:end="531:66">!=</operator><name pos:start="531:67" pos:end="531:75">FF_I_TYPE</name><operator pos:start="531:76" pos:end="531:76">)</operator>

       <operator pos:start="533:8" pos:end="533:9">||</operator>  <name pos:start="533:12" pos:end="533:28"><name pos:start="533:12" pos:end="533:16">avctx</name><operator pos:start="533:17" pos:end="533:18">-&gt;</operator><name pos:start="533:19" pos:end="533:28">skip_frame</name></name> <operator pos:start="533:30" pos:end="533:31">&gt;=</operator> <name pos:start="533:33" pos:end="533:45">AVDISCARD_ALL</name></expr>)</condition><block type="pseudo" pos:start="535:9" pos:end="535:47"><block_content pos:start="535:9" pos:end="535:47">

        <return pos:start="535:9" pos:end="535:47">return <expr pos:start="535:16" pos:end="535:46"><call pos:start="535:16" pos:end="535:46"><name pos:start="535:16" pos:end="535:33">get_consumed_bytes</name><argument_list pos:start="535:34" pos:end="535:46">(<argument pos:start="535:35" pos:end="535:35"><expr pos:start="535:35" pos:end="535:35"><name pos:start="535:35" pos:end="535:35">s</name></expr></argument>, <argument pos:start="535:38" pos:end="535:45"><expr pos:start="535:38" pos:end="535:45"><name pos:start="535:38" pos:end="535:45">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block" pos:start="537:5" pos:end="537:49">/* skip everything if we are in a hurry&gt;=5 */</comment>

    <if_stmt pos:start="539:5" pos:end="539:66"><if pos:start="539:5" pos:end="539:66">if<condition pos:start="539:7" pos:end="539:26">(<expr pos:start="539:8" pos:end="539:25"><name pos:start="539:8" pos:end="539:22"><name pos:start="539:8" pos:end="539:12">avctx</name><operator pos:start="539:13" pos:end="539:14">-&gt;</operator><name pos:start="539:15" pos:end="539:22">hurry_up</name></name><operator pos:start="539:23" pos:end="539:24">&gt;=</operator><literal type="number" pos:start="539:25" pos:end="539:25">5</literal></expr>)</condition><block type="pseudo" pos:start="539:28" pos:end="539:66"><block_content pos:start="539:28" pos:end="539:66"> <return pos:start="539:28" pos:end="539:66">return <expr pos:start="539:35" pos:end="539:65"><call pos:start="539:35" pos:end="539:65"><name pos:start="539:35" pos:end="539:52">get_consumed_bytes</name><argument_list pos:start="539:53" pos:end="539:65">(<argument pos:start="539:54" pos:end="539:54"><expr pos:start="539:54" pos:end="539:54"><name pos:start="539:54" pos:end="539:54">s</name></expr></argument>, <argument pos:start="539:57" pos:end="539:64"><expr pos:start="539:57" pos:end="539:64"><name pos:start="539:57" pos:end="539:64">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="543:5" pos:end="553:5"><if pos:start="543:5" pos:end="553:5">if<condition pos:start="543:7" pos:end="543:31">(<expr pos:start="543:8" pos:end="543:30"><name pos:start="543:8" pos:end="543:30"><name pos:start="543:8" pos:end="543:8">s</name><operator pos:start="543:9" pos:end="543:10">-&gt;</operator><name pos:start="543:11" pos:end="543:30">next_p_frame_damaged</name></name></expr>)</condition><block pos:start="543:32" pos:end="553:5">{<block_content pos:start="545:9" pos:end="551:38">

        <if_stmt pos:start="545:9" pos:end="551:38"><if pos:start="545:9" pos:end="547:51">if<condition pos:start="545:11" pos:end="545:35">(<expr pos:start="545:12" pos:end="545:34"><name pos:start="545:12" pos:end="545:23"><name pos:start="545:12" pos:end="545:12">s</name><operator pos:start="545:13" pos:end="545:14">-&gt;</operator><name pos:start="545:15" pos:end="545:23">pict_type</name></name><operator pos:start="545:24" pos:end="545:25">==</operator><name pos:start="545:26" pos:end="545:34">FF_B_TYPE</name></expr>)</condition><block type="pseudo" pos:start="547:13" pos:end="547:51"><block_content pos:start="547:13" pos:end="547:51">

            <return pos:start="547:13" pos:end="547:51">return <expr pos:start="547:20" pos:end="547:50"><call pos:start="547:20" pos:end="547:50"><name pos:start="547:20" pos:end="547:37">get_consumed_bytes</name><argument_list pos:start="547:38" pos:end="547:50">(<argument pos:start="547:39" pos:end="547:39"><expr pos:start="547:39" pos:end="547:39"><name pos:start="547:39" pos:end="547:39">s</name></expr></argument>, <argument pos:start="547:42" pos:end="547:49"><expr pos:start="547:42" pos:end="547:49"><name pos:start="547:42" pos:end="547:49">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

        <else pos:start="549:9" pos:end="551:38">else<block type="pseudo" pos:start="551:13" pos:end="551:38"><block_content pos:start="551:13" pos:end="551:38">

            <expr_stmt pos:start="551:13" pos:end="551:38"><expr pos:start="551:13" pos:end="551:37"><name pos:start="551:13" pos:end="551:35"><name pos:start="551:13" pos:end="551:13">s</name><operator pos:start="551:14" pos:end="551:15">-&gt;</operator><name pos:start="551:16" pos:end="551:35">next_p_frame_damaged</name></name><operator pos:start="551:36" pos:end="551:36">=</operator><literal type="number" pos:start="551:37" pos:end="551:37">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="557:5" pos:end="575:5"><if pos:start="557:5" pos:end="563:5">if<condition pos:start="557:7" pos:end="557:72">(<expr pos:start="557:8" pos:end="557:71"><operator pos:start="557:8" pos:end="557:8">(</operator><name pos:start="557:9" pos:end="557:24"><name pos:start="557:9" pos:end="557:9">s</name><operator pos:start="557:10" pos:end="557:11">-&gt;</operator><name pos:start="557:12" pos:end="557:16">avctx</name><operator pos:start="557:17" pos:end="557:18">-&gt;</operator><name pos:start="557:19" pos:end="557:24">flags2</name></name> <operator pos:start="557:26" pos:end="557:26">&amp;</operator> <name pos:start="557:28" pos:end="557:43">CODEC_FLAG2_FAST</name><operator pos:start="557:44" pos:end="557:44">)</operator> <operator pos:start="557:46" pos:end="557:47">&amp;&amp;</operator> <name pos:start="557:49" pos:end="557:60"><name pos:start="557:49" pos:end="557:49">s</name><operator pos:start="557:50" pos:end="557:51">-&gt;</operator><name pos:start="557:52" pos:end="557:60">pict_type</name></name><operator pos:start="557:61" pos:end="557:62">==</operator><name pos:start="557:63" pos:end="557:71">FF_B_TYPE</name></expr>)</condition><block pos:start="557:73" pos:end="563:5">{<block_content pos:start="559:9" pos:end="561:56">

        <expr_stmt pos:start="559:9" pos:end="559:56"><expr pos:start="559:9" pos:end="559:55"><name pos:start="559:9" pos:end="559:22"><name pos:start="559:9" pos:end="559:9">s</name><operator pos:start="559:10" pos:end="559:11">-&gt;</operator><name pos:start="559:12" pos:end="559:13">me</name><operator pos:start="559:14" pos:end="559:14">.</operator><name pos:start="559:15" pos:end="559:22">qpel_put</name></name><operator pos:start="559:23" pos:end="559:23">=</operator> <name pos:start="559:25" pos:end="559:55"><name pos:start="559:25" pos:end="559:25">s</name><operator pos:start="559:26" pos:end="559:27">-&gt;</operator><name pos:start="559:28" pos:end="559:30">dsp</name><operator pos:start="559:31" pos:end="559:31">.</operator><name pos:start="559:32" pos:end="559:55">put_2tap_qpel_pixels_tab</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="561:9" pos:end="561:56"><expr pos:start="561:9" pos:end="561:55"><name pos:start="561:9" pos:end="561:22"><name pos:start="561:9" pos:end="561:9">s</name><operator pos:start="561:10" pos:end="561:11">-&gt;</operator><name pos:start="561:12" pos:end="561:13">me</name><operator pos:start="561:14" pos:end="561:14">.</operator><name pos:start="561:15" pos:end="561:22">qpel_avg</name></name><operator pos:start="561:23" pos:end="561:23">=</operator> <name pos:start="561:25" pos:end="561:55"><name pos:start="561:25" pos:end="561:25">s</name><operator pos:start="561:26" pos:end="561:27">-&gt;</operator><name pos:start="561:28" pos:end="561:30">dsp</name><operator pos:start="561:31" pos:end="561:31">.</operator><name pos:start="561:32" pos:end="561:55">avg_2tap_qpel_pixels_tab</name></name></expr>;</expr_stmt>

    </block_content>}</block></if><if type="elseif" pos:start="563:6" pos:end="569:5">else if<condition pos:start="563:13" pos:end="563:58">(<expr pos:start="563:14" pos:end="563:57"><operator pos:start="563:14" pos:end="563:14">(</operator><operator pos:start="563:15" pos:end="563:15">!</operator><name pos:start="563:16" pos:end="563:29"><name pos:start="563:16" pos:end="563:16">s</name><operator pos:start="563:17" pos:end="563:18">-&gt;</operator><name pos:start="563:19" pos:end="563:29">no_rounding</name></name><operator pos:start="563:30" pos:end="563:30">)</operator> <operator pos:start="563:32" pos:end="563:33">||</operator> <name pos:start="563:35" pos:end="563:46"><name pos:start="563:35" pos:end="563:35">s</name><operator pos:start="563:36" pos:end="563:37">-&gt;</operator><name pos:start="563:38" pos:end="563:46">pict_type</name></name><operator pos:start="563:47" pos:end="563:48">==</operator><name pos:start="563:49" pos:end="563:57">FF_B_TYPE</name></expr>)</condition><block pos:start="563:59" pos:end="569:5">{<block_content pos:start="565:9" pos:end="567:51">

        <expr_stmt pos:start="565:9" pos:end="565:51"><expr pos:start="565:9" pos:end="565:50"><name pos:start="565:9" pos:end="565:22"><name pos:start="565:9" pos:end="565:9">s</name><operator pos:start="565:10" pos:end="565:11">-&gt;</operator><name pos:start="565:12" pos:end="565:13">me</name><operator pos:start="565:14" pos:end="565:14">.</operator><name pos:start="565:15" pos:end="565:22">qpel_put</name></name><operator pos:start="565:23" pos:end="565:23">=</operator> <name pos:start="565:25" pos:end="565:50"><name pos:start="565:25" pos:end="565:25">s</name><operator pos:start="565:26" pos:end="565:27">-&gt;</operator><name pos:start="565:28" pos:end="565:30">dsp</name><operator pos:start="565:31" pos:end="565:31">.</operator><name pos:start="565:32" pos:end="565:50">put_qpel_pixels_tab</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="567:9" pos:end="567:51"><expr pos:start="567:9" pos:end="567:50"><name pos:start="567:9" pos:end="567:22"><name pos:start="567:9" pos:end="567:9">s</name><operator pos:start="567:10" pos:end="567:11">-&gt;</operator><name pos:start="567:12" pos:end="567:13">me</name><operator pos:start="567:14" pos:end="567:14">.</operator><name pos:start="567:15" pos:end="567:22">qpel_avg</name></name><operator pos:start="567:23" pos:end="567:23">=</operator> <name pos:start="567:25" pos:end="567:50"><name pos:start="567:25" pos:end="567:25">s</name><operator pos:start="567:26" pos:end="567:27">-&gt;</operator><name pos:start="567:28" pos:end="567:30">dsp</name><operator pos:start="567:31" pos:end="567:31">.</operator><name pos:start="567:32" pos:end="567:50">avg_qpel_pixels_tab</name></name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="569:6" pos:end="575:5">else<block pos:start="569:10" pos:end="575:5">{<block_content pos:start="571:9" pos:end="573:51">

        <expr_stmt pos:start="571:9" pos:end="571:58"><expr pos:start="571:9" pos:end="571:57"><name pos:start="571:9" pos:end="571:22"><name pos:start="571:9" pos:end="571:9">s</name><operator pos:start="571:10" pos:end="571:11">-&gt;</operator><name pos:start="571:12" pos:end="571:13">me</name><operator pos:start="571:14" pos:end="571:14">.</operator><name pos:start="571:15" pos:end="571:22">qpel_put</name></name><operator pos:start="571:23" pos:end="571:23">=</operator> <name pos:start="571:25" pos:end="571:57"><name pos:start="571:25" pos:end="571:25">s</name><operator pos:start="571:26" pos:end="571:27">-&gt;</operator><name pos:start="571:28" pos:end="571:30">dsp</name><operator pos:start="571:31" pos:end="571:31">.</operator><name pos:start="571:32" pos:end="571:57">put_no_rnd_qpel_pixels_tab</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="573:9" pos:end="573:51"><expr pos:start="573:9" pos:end="573:50"><name pos:start="573:9" pos:end="573:22"><name pos:start="573:9" pos:end="573:9">s</name><operator pos:start="573:10" pos:end="573:11">-&gt;</operator><name pos:start="573:12" pos:end="573:13">me</name><operator pos:start="573:14" pos:end="573:14">.</operator><name pos:start="573:15" pos:end="573:22">qpel_avg</name></name><operator pos:start="573:23" pos:end="573:23">=</operator> <name pos:start="573:25" pos:end="573:50"><name pos:start="573:25" pos:end="573:25">s</name><operator pos:start="573:26" pos:end="573:27">-&gt;</operator><name pos:start="573:28" pos:end="573:30">dsp</name><operator pos:start="573:31" pos:end="573:31">.</operator><name pos:start="573:32" pos:end="573:50">avg_qpel_pixels_tab</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="579:5" pos:end="586:0"><if pos:start="579:5" pos:end="586:0">if<condition pos:start="579:7" pos:end="579:37">(<expr pos:start="579:8" pos:end="579:36"><call pos:start="579:8" pos:end="579:32"><name pos:start="579:8" pos:end="579:22">MPV_frame_start</name><argument_list pos:start="579:23" pos:end="579:32">(<argument pos:start="579:24" pos:end="579:24"><expr pos:start="579:24" pos:end="579:24"><name pos:start="579:24" pos:end="579:24">s</name></expr></argument>, <argument pos:start="579:27" pos:end="579:31"><expr pos:start="579:27" pos:end="579:31"><name pos:start="579:27" pos:end="579:31">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="579:34" pos:end="579:34">&lt;</operator> <literal type="number" pos:start="579:36" pos:end="579:36">0</literal></expr>)</condition><block type="pseudo" pos:start="581:9" pos:end="586:0"><block_content pos:start="581:9" pos:end="586:0">

        <return pos:start="581:9" pos:end="586:0">return <expr pos:start="581:16" pos:end="581:17"><operator pos:start="581:16" pos:end="581:16">-</operator><literal type="number" pos:start="581:17" pos:end="581:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



<cpp:ifdef pos:start="585:1" pos:end="585:12">#<cpp:directive pos:start="585:2" pos:end="585:6">ifdef</cpp:directive> <name pos:start="585:8" pos:end="585:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="587:5" pos:end="590:0"><expr pos:start="587:5" pos:end="587:57"><call pos:start="587:5" pos:end="587:57"><name pos:start="587:5" pos:end="587:10">av_log</name><argument_list pos:start="587:11" pos:end="587:57">(<argument pos:start="587:12" pos:end="587:16"><expr pos:start="587:12" pos:end="587:16"><name pos:start="587:12" pos:end="587:16">avctx</name></expr></argument>, <argument pos:start="587:19" pos:end="587:30"><expr pos:start="587:19" pos:end="587:30"><name pos:start="587:19" pos:end="587:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="587:33" pos:end="587:45"><expr pos:start="587:33" pos:end="587:45"><literal type="string" pos:start="587:33" pos:end="587:45">"qscale=%d\n"</literal></expr></argument>, <argument pos:start="587:48" pos:end="587:56"><expr pos:start="587:48" pos:end="587:56"><name pos:start="587:48" pos:end="587:56"><name pos:start="587:48" pos:end="587:48">s</name><operator pos:start="587:49" pos:end="587:50">-&gt;</operator><name pos:start="587:51" pos:end="587:56">qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="589:1" pos:end="589:6">#<cpp:directive pos:start="589:2" pos:end="589:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="593:5" pos:end="593:25"><expr pos:start="593:5" pos:end="593:24"><call pos:start="593:5" pos:end="593:24"><name pos:start="593:5" pos:end="593:21">ff_er_frame_start</name><argument_list pos:start="593:22" pos:end="593:24">(<argument pos:start="593:23" pos:end="593:23"><expr pos:start="593:23" pos:end="593:23"><name pos:start="593:23" pos:end="593:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="597:5" pos:end="597:111">//the second part of the wmv2 header contains the MB skip bits which are stored in current_picture-&gt;mb_type</comment>

    <comment type="line" pos:start="599:5" pos:end="599:53">//which is not available before MPV_frame_start()</comment>

    <if_stmt pos:start="601:5" pos:end="609:5"><if pos:start="601:5" pos:end="609:5">if <condition pos:start="601:8" pos:end="601:53">(<expr pos:start="601:9" pos:end="601:52"><name pos:start="601:9" pos:end="601:27">CONFIG_WMV2_DECODER</name> <operator pos:start="601:29" pos:end="601:30">&amp;&amp;</operator> <name pos:start="601:32" pos:end="601:49"><name pos:start="601:32" pos:end="601:32">s</name><operator pos:start="601:33" pos:end="601:34">-&gt;</operator><name pos:start="601:35" pos:end="601:49">msmpeg4_version</name></name><operator pos:start="601:50" pos:end="601:51">==</operator><literal type="number" pos:start="601:52" pos:end="601:52">5</literal></expr>)</condition><block pos:start="601:54" pos:end="609:5">{<block_content pos:start="603:9" pos:end="607:40">

        <expr_stmt pos:start="603:9" pos:end="603:57"><expr pos:start="603:9" pos:end="603:56"><name pos:start="603:9" pos:end="603:11">ret</name> <operator pos:start="603:13" pos:end="603:13">=</operator> <call pos:start="603:15" pos:end="603:56"><name pos:start="603:15" pos:end="603:53">ff_wmv2_decode_secondary_picture_header</name><argument_list pos:start="603:54" pos:end="603:56">(<argument pos:start="603:55" pos:end="603:55"><expr pos:start="603:55" pos:end="603:55"><name pos:start="603:55" pos:end="603:55">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="605:9" pos:end="605:29"><if pos:start="605:9" pos:end="605:29">if<condition pos:start="605:11" pos:end="605:17">(<expr pos:start="605:12" pos:end="605:16"><name pos:start="605:12" pos:end="605:14">ret</name><operator pos:start="605:15" pos:end="605:15">&lt;</operator><literal type="number" pos:start="605:16" pos:end="605:16">0</literal></expr>)</condition><block type="pseudo" pos:start="605:19" pos:end="605:29"><block_content pos:start="605:19" pos:end="605:29"> <return pos:start="605:19" pos:end="605:29">return <expr pos:start="605:26" pos:end="605:28"><name pos:start="605:26" pos:end="605:28">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="607:9" pos:end="607:40"><if pos:start="607:9" pos:end="607:40">if<condition pos:start="607:11" pos:end="607:18">(<expr pos:start="607:12" pos:end="607:17"><name pos:start="607:12" pos:end="607:14">ret</name><operator pos:start="607:15" pos:end="607:16">==</operator><literal type="number" pos:start="607:17" pos:end="607:17">1</literal></expr>)</condition><block type="pseudo" pos:start="607:20" pos:end="607:40"><block_content pos:start="607:20" pos:end="607:40"> <goto pos:start="607:20" pos:end="607:40">goto <name pos:start="607:25" pos:end="607:39">intrax8_decoded</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="613:5" pos:end="613:32">/* decode each macroblock */</comment>

    <expr_stmt pos:start="615:5" pos:end="615:14"><expr pos:start="615:5" pos:end="615:13"><name pos:start="615:5" pos:end="615:11"><name pos:start="615:5" pos:end="615:5">s</name><operator pos:start="615:6" pos:end="615:7">-&gt;</operator><name pos:start="615:8" pos:end="615:11">mb_x</name></name><operator pos:start="615:12" pos:end="615:12">=</operator><literal type="number" pos:start="615:13" pos:end="615:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="617:5" pos:end="617:14"><expr pos:start="617:5" pos:end="617:13"><name pos:start="617:5" pos:end="617:11"><name pos:start="617:5" pos:end="617:5">s</name><operator pos:start="617:6" pos:end="617:7">-&gt;</operator><name pos:start="617:8" pos:end="617:11">mb_y</name></name><operator pos:start="617:12" pos:end="617:12">=</operator><literal type="number" pos:start="617:13" pos:end="617:13">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="621:5" pos:end="621:20"><expr pos:start="621:5" pos:end="621:19"><call pos:start="621:5" pos:end="621:19"><name pos:start="621:5" pos:end="621:16">decode_slice</name><argument_list pos:start="621:17" pos:end="621:19">(<argument pos:start="621:18" pos:end="621:18"><expr pos:start="621:18" pos:end="621:18"><name pos:start="621:18" pos:end="621:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="623:5" pos:end="649:5">while<condition pos:start="623:10" pos:end="623:31">(<expr pos:start="623:11" pos:end="623:30"><name pos:start="623:11" pos:end="623:17"><name pos:start="623:11" pos:end="623:11">s</name><operator pos:start="623:12" pos:end="623:13">-&gt;</operator><name pos:start="623:14" pos:end="623:17">mb_y</name></name><operator pos:start="623:18" pos:end="623:18">&lt;</operator><name pos:start="623:19" pos:end="623:30"><name pos:start="623:19" pos:end="623:19">s</name><operator pos:start="623:20" pos:end="623:21">-&gt;</operator><name pos:start="623:22" pos:end="623:30">mb_height</name></name></expr>)</condition><block pos:start="623:32" pos:end="649:5">{<block_content pos:start="625:9" pos:end="647:24">

        <if_stmt pos:start="625:9" pos:end="637:9"><if pos:start="625:9" pos:end="631:9">if<condition pos:start="625:11" pos:end="625:30">(<expr pos:start="625:12" pos:end="625:29"><name pos:start="625:12" pos:end="625:29"><name pos:start="625:12" pos:end="625:12">s</name><operator pos:start="625:13" pos:end="625:14">-&gt;</operator><name pos:start="625:15" pos:end="625:29">msmpeg4_version</name></name></expr>)</condition><block pos:start="625:31" pos:end="631:9">{<block_content pos:start="627:13" pos:end="629:22">

            <if_stmt pos:start="627:13" pos:end="629:22"><if pos:start="627:13" pos:end="629:22">if<condition pos:start="627:15" pos:end="627:127">(<expr pos:start="627:16" pos:end="627:126"><name pos:start="627:16" pos:end="627:30"><name pos:start="627:16" pos:end="627:16">s</name><operator pos:start="627:17" pos:end="627:18">-&gt;</operator><name pos:start="627:19" pos:end="627:30">slice_height</name></name><operator pos:start="627:31" pos:end="627:32">==</operator><literal type="number" pos:start="627:33" pos:end="627:33">0</literal> <operator pos:start="627:35" pos:end="627:36">||</operator> <name pos:start="627:38" pos:end="627:44"><name pos:start="627:38" pos:end="627:38">s</name><operator pos:start="627:39" pos:end="627:40">-&gt;</operator><name pos:start="627:41" pos:end="627:44">mb_x</name></name><operator pos:start="627:45" pos:end="627:46">!=</operator><literal type="number" pos:start="627:47" pos:end="627:47">0</literal> <operator pos:start="627:49" pos:end="627:50">||</operator> <operator pos:start="627:52" pos:end="627:52">(</operator><name pos:start="627:53" pos:end="627:59"><name pos:start="627:53" pos:end="627:53">s</name><operator pos:start="627:54" pos:end="627:55">-&gt;</operator><name pos:start="627:56" pos:end="627:59">mb_y</name></name><operator pos:start="627:60" pos:end="627:60">%</operator><name pos:start="627:61" pos:end="627:75"><name pos:start="627:61" pos:end="627:61">s</name><operator pos:start="627:62" pos:end="627:63">-&gt;</operator><name pos:start="627:64" pos:end="627:75">slice_height</name></name><operator pos:start="627:76" pos:end="627:76">)</operator><operator pos:start="627:77" pos:end="627:78">!=</operator><literal type="number" pos:start="627:79" pos:end="627:79">0</literal> <operator pos:start="627:81" pos:end="627:82">||</operator> <call pos:start="627:84" pos:end="627:105"><name pos:start="627:84" pos:end="627:97">get_bits_count</name><argument_list pos:start="627:98" pos:end="627:105">(<argument pos:start="627:99" pos:end="627:104"><expr pos:start="627:99" pos:end="627:104"><operator pos:start="627:99" pos:end="627:99">&amp;</operator><name pos:start="627:100" pos:end="627:104"><name pos:start="627:100" pos:end="627:100">s</name><operator pos:start="627:101" pos:end="627:102">-&gt;</operator><name pos:start="627:103" pos:end="627:104">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="627:107" pos:end="627:107">&gt;</operator> <name pos:start="627:109" pos:end="627:126"><name pos:start="627:109" pos:end="627:109">s</name><operator pos:start="627:110" pos:end="627:111">-&gt;</operator><name pos:start="627:112" pos:end="627:113">gb</name><operator pos:start="627:114" pos:end="627:114">.</operator><name pos:start="627:115" pos:end="627:126">size_in_bits</name></name></expr>)</condition><block type="pseudo" pos:start="629:17" pos:end="629:22"><block_content pos:start="629:17" pos:end="629:22">

                <break pos:start="629:17" pos:end="629:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></if><else pos:start="631:10" pos:end="637:9">else<block pos:start="631:14" pos:end="637:9">{<block_content pos:start="633:13" pos:end="635:22">

            <if_stmt pos:start="633:13" pos:end="635:22"><if pos:start="633:13" pos:end="635:22">if<condition pos:start="633:15" pos:end="633:35">(<expr pos:start="633:16" pos:end="633:34"><call pos:start="633:16" pos:end="633:32"><name pos:start="633:16" pos:end="633:29">ff_h263_resync</name><argument_list pos:start="633:30" pos:end="633:32">(<argument pos:start="633:31" pos:end="633:31"><expr pos:start="633:31" pos:end="633:31"><name pos:start="633:31" pos:end="633:31">s</name></expr></argument>)</argument_list></call><operator pos:start="633:33" pos:end="633:33">&lt;</operator><literal type="number" pos:start="633:34" pos:end="633:34">0</literal></expr>)</condition><block type="pseudo" pos:start="635:17" pos:end="635:22"><block_content pos:start="635:17" pos:end="635:22">

                <break pos:start="635:17" pos:end="635:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="641:9" pos:end="643:38"><if pos:start="641:9" pos:end="643:38">if<condition pos:start="641:11" pos:end="641:48">(<expr pos:start="641:12" pos:end="641:47"><name pos:start="641:12" pos:end="641:29"><name pos:start="641:12" pos:end="641:12">s</name><operator pos:start="641:13" pos:end="641:14">-&gt;</operator><name pos:start="641:15" pos:end="641:29">msmpeg4_version</name></name><operator pos:start="641:30" pos:end="641:30">&lt;</operator><literal type="number" pos:start="641:31" pos:end="641:31">4</literal> <operator pos:start="641:33" pos:end="641:34">&amp;&amp;</operator> <name pos:start="641:36" pos:end="641:47"><name pos:start="641:36" pos:end="641:36">s</name><operator pos:start="641:37" pos:end="641:38">-&gt;</operator><name pos:start="641:39" pos:end="641:47">h263_pred</name></name></expr>)</condition><block type="pseudo" pos:start="643:13" pos:end="643:38"><block_content pos:start="643:13" pos:end="643:38">

            <expr_stmt pos:start="643:13" pos:end="643:38"><expr pos:start="643:13" pos:end="643:37"><call pos:start="643:13" pos:end="643:37"><name pos:start="643:13" pos:end="643:34">ff_mpeg4_clean_buffers</name><argument_list pos:start="643:35" pos:end="643:37">(<argument pos:start="643:36" pos:end="643:36"><expr pos:start="643:36" pos:end="643:36"><name pos:start="643:36" pos:end="643:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="647:9" pos:end="647:24"><expr pos:start="647:9" pos:end="647:23"><call pos:start="647:9" pos:end="647:23"><name pos:start="647:9" pos:end="647:20">decode_slice</name><argument_list pos:start="647:21" pos:end="647:23">(<argument pos:start="647:22" pos:end="647:22"><expr pos:start="647:22" pos:end="647:22"><name pos:start="647:22" pos:end="647:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="653:5" pos:end="659:9"><if pos:start="653:5" pos:end="659:9">if <condition pos:start="653:8" pos:end="653:75">(<expr pos:start="653:9" pos:end="653:74"><name pos:start="653:9" pos:end="653:23"><name pos:start="653:9" pos:end="653:9">s</name><operator pos:start="653:10" pos:end="653:11">-&gt;</operator><name pos:start="653:12" pos:end="653:23">h263_msmpeg4</name></name> <operator pos:start="653:25" pos:end="653:26">&amp;&amp;</operator> <name pos:start="653:28" pos:end="653:45"><name pos:start="653:28" pos:end="653:28">s</name><operator pos:start="653:29" pos:end="653:30">-&gt;</operator><name pos:start="653:31" pos:end="653:45">msmpeg4_version</name></name><operator pos:start="653:46" pos:end="653:46">&lt;</operator><literal type="number" pos:start="653:47" pos:end="653:47">4</literal> <operator pos:start="653:49" pos:end="653:50">&amp;&amp;</operator> <name pos:start="653:52" pos:end="653:63"><name pos:start="653:52" pos:end="653:52">s</name><operator pos:start="653:53" pos:end="653:54">-&gt;</operator><name pos:start="653:55" pos:end="653:63">pict_type</name></name><operator pos:start="653:64" pos:end="653:65">==</operator><name pos:start="653:66" pos:end="653:74">FF_I_TYPE</name></expr>)</condition><block type="pseudo" pos:start="655:9" pos:end="659:9"><block_content pos:start="655:9" pos:end="659:9">

        <if_stmt pos:start="655:9" pos:end="659:9"><if pos:start="655:9" pos:end="659:9">if<condition pos:start="655:11" pos:end="655:81">(<expr pos:start="655:12" pos:end="655:80"><operator pos:start="655:12" pos:end="655:12">!</operator><name pos:start="655:13" pos:end="655:34">CONFIG_MSMPEG4_DECODER</name> <operator pos:start="655:36" pos:end="655:37">||</operator> <call pos:start="655:39" pos:end="655:76"><name pos:start="655:39" pos:end="655:63">msmpeg4_decode_ext_header</name><argument_list pos:start="655:64" pos:end="655:76">(<argument pos:start="655:65" pos:end="655:65"><expr pos:start="655:65" pos:end="655:65"><name pos:start="655:65" pos:end="655:65">s</name></expr></argument>, <argument pos:start="655:68" pos:end="655:75"><expr pos:start="655:68" pos:end="655:75"><name pos:start="655:68" pos:end="655:75">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="655:78" pos:end="655:78">&lt;</operator> <literal type="number" pos:start="655:80" pos:end="655:80">0</literal></expr>)</condition><block pos:start="655:82" pos:end="659:9">{<block_content pos:start="657:13" pos:end="657:75">

            <expr_stmt pos:start="657:13" pos:end="657:75"><expr pos:start="657:13" pos:end="657:74"><name pos:start="657:13" pos:end="657:46"><name pos:start="657:13" pos:end="657:13">s</name><operator pos:start="657:14" pos:end="657:15">-&gt;</operator><name pos:start="657:16" pos:end="657:33">error_status_table</name><index pos:start="657:34" pos:end="657:46">[<expr pos:start="657:35" pos:end="657:45"><name pos:start="657:35" pos:end="657:43"><name pos:start="657:35" pos:end="657:35">s</name><operator pos:start="657:36" pos:end="657:37">-&gt;</operator><name pos:start="657:38" pos:end="657:43">mb_num</name></name><operator pos:start="657:44" pos:end="657:44">-</operator><literal type="number" pos:start="657:45" pos:end="657:45">1</literal></expr>]</index></name><operator pos:start="657:47" pos:end="657:47">=</operator> <name pos:start="657:49" pos:end="657:56">AC_ERROR</name><operator pos:start="657:57" pos:end="657:57">|</operator><name pos:start="657:58" pos:end="657:65">DC_ERROR</name><operator pos:start="657:66" pos:end="657:66">|</operator><name pos:start="657:67" pos:end="657:74">MV_ERROR</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="663:5" pos:end="663:43">/* divx 5.01+ bistream reorder stuff */</comment>

    <if_stmt pos:start="665:5" pos:end="717:5"><if pos:start="665:5" pos:end="717:5">if<condition pos:start="665:7" pos:end="665:84">(<expr pos:start="665:8" pos:end="665:83"><name pos:start="665:8" pos:end="665:18"><name pos:start="665:8" pos:end="665:8">s</name><operator pos:start="665:9" pos:end="665:10">-&gt;</operator><name pos:start="665:11" pos:end="665:18">codec_id</name></name><operator pos:start="665:19" pos:end="665:20">==</operator><name pos:start="665:21" pos:end="665:34">CODEC_ID_MPEG4</name> <operator pos:start="665:36" pos:end="665:37">&amp;&amp;</operator> <name pos:start="665:39" pos:end="665:62"><name pos:start="665:39" pos:end="665:39">s</name><operator pos:start="665:40" pos:end="665:41">-&gt;</operator><name pos:start="665:42" pos:end="665:62">bitstream_buffer_size</name></name><operator pos:start="665:63" pos:end="665:64">==</operator><literal type="number" pos:start="665:65" pos:end="665:65">0</literal> <operator pos:start="665:67" pos:end="665:68">&amp;&amp;</operator> <name pos:start="665:70" pos:end="665:83"><name pos:start="665:70" pos:end="665:70">s</name><operator pos:start="665:71" pos:end="665:72">-&gt;</operator><name pos:start="665:73" pos:end="665:83">divx_packed</name></name></expr>)</condition><block pos:start="665:85" pos:end="717:5">{<block_content pos:start="667:9" pos:end="715:9">

        <decl_stmt pos:start="667:9" pos:end="667:51"><decl pos:start="667:9" pos:end="667:50"><type pos:start="667:9" pos:end="667:11"><name pos:start="667:9" pos:end="667:11">int</name></type> <name pos:start="667:13" pos:end="667:23">current_pos</name><init pos:start="667:24" pos:end="667:50">= <expr pos:start="667:26" pos:end="667:50"><call pos:start="667:26" pos:end="667:47"><name pos:start="667:26" pos:end="667:39">get_bits_count</name><argument_list pos:start="667:40" pos:end="667:47">(<argument pos:start="667:41" pos:end="667:46"><expr pos:start="667:41" pos:end="667:46"><operator pos:start="667:41" pos:end="667:41">&amp;</operator><name pos:start="667:42" pos:end="667:46"><name pos:start="667:42" pos:end="667:42">s</name><operator pos:start="667:43" pos:end="667:44">-&gt;</operator><name pos:start="667:45" pos:end="667:46">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="667:48" pos:end="667:49">&gt;&gt;</operator><literal type="number" pos:start="667:50" pos:end="667:50">3</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="669:9" pos:end="669:30"><decl pos:start="669:9" pos:end="669:29"><type pos:start="669:9" pos:end="669:11"><name pos:start="669:9" pos:end="669:11">int</name></type> <name pos:start="669:13" pos:end="669:27">startcode_found</name><init pos:start="669:28" pos:end="669:29">=<expr pos:start="669:29" pos:end="669:29"><literal type="number" pos:start="669:29" pos:end="669:29">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="673:9" pos:end="689:9"><if pos:start="673:9" pos:end="689:9">if<condition pos:start="673:11" pos:end="673:38">(<expr pos:start="673:12" pos:end="673:37"><name pos:start="673:12" pos:end="673:19">buf_size</name> <operator pos:start="673:21" pos:end="673:21">-</operator> <name pos:start="673:23" pos:end="673:33">current_pos</name> <operator pos:start="673:35" pos:end="673:35">&gt;</operator> <literal type="number" pos:start="673:37" pos:end="673:37">5</literal></expr>)</condition><block pos:start="673:39" pos:end="689:9">{<block_content pos:start="675:13" pos:end="687:13">

            <decl_stmt pos:start="675:13" pos:end="675:18"><decl pos:start="675:13" pos:end="675:17"><type pos:start="675:13" pos:end="675:15"><name pos:start="675:13" pos:end="675:15">int</name></type> <name pos:start="675:17" pos:end="675:17">i</name></decl>;</decl_stmt>

            <for pos:start="677:13" pos:end="687:13">for<control pos:start="677:16" pos:end="677:49">(<init pos:start="677:17" pos:end="677:30"><expr pos:start="677:17" pos:end="677:29"><name pos:start="677:17" pos:end="677:17">i</name><operator pos:start="677:18" pos:end="677:18">=</operator><name pos:start="677:19" pos:end="677:29">current_pos</name></expr>;</init> <condition pos:start="677:32" pos:end="677:44"><expr pos:start="677:32" pos:end="677:43"><name pos:start="677:32" pos:end="677:32">i</name><operator pos:start="677:33" pos:end="677:33">&lt;</operator><name pos:start="677:34" pos:end="677:41">buf_size</name><operator pos:start="677:42" pos:end="677:42">-</operator><literal type="number" pos:start="677:43" pos:end="677:43">3</literal></expr>;</condition> <incr pos:start="677:46" pos:end="677:48"><expr pos:start="677:46" pos:end="677:48"><name pos:start="677:46" pos:end="677:46">i</name><operator pos:start="677:47" pos:end="677:48">++</operator></expr></incr>)</control><block pos:start="677:50" pos:end="687:13">{<block_content pos:start="679:17" pos:end="685:17">

                <if_stmt pos:start="679:17" pos:end="685:17"><if pos:start="679:17" pos:end="685:17">if<condition pos:start="679:19" pos:end="679:77">(<expr pos:start="679:20" pos:end="679:76"><name pos:start="679:20" pos:end="679:25"><name pos:start="679:20" pos:end="679:22">buf</name><index pos:start="679:23" pos:end="679:25">[<expr pos:start="679:24" pos:end="679:24"><name pos:start="679:24" pos:end="679:24">i</name></expr>]</index></name><operator pos:start="679:26" pos:end="679:27">==</operator><literal type="number" pos:start="679:28" pos:end="679:28">0</literal> <operator pos:start="679:30" pos:end="679:31">&amp;&amp;</operator> <name pos:start="679:33" pos:end="679:40"><name pos:start="679:33" pos:end="679:35">buf</name><index pos:start="679:36" pos:end="679:40">[<expr pos:start="679:37" pos:end="679:39"><name pos:start="679:37" pos:end="679:37">i</name><operator pos:start="679:38" pos:end="679:38">+</operator><literal type="number" pos:start="679:39" pos:end="679:39">1</literal></expr>]</index></name><operator pos:start="679:41" pos:end="679:42">==</operator><literal type="number" pos:start="679:43" pos:end="679:43">0</literal> <operator pos:start="679:45" pos:end="679:46">&amp;&amp;</operator> <name pos:start="679:48" pos:end="679:55"><name pos:start="679:48" pos:end="679:50">buf</name><index pos:start="679:51" pos:end="679:55">[<expr pos:start="679:52" pos:end="679:54"><name pos:start="679:52" pos:end="679:52">i</name><operator pos:start="679:53" pos:end="679:53">+</operator><literal type="number" pos:start="679:54" pos:end="679:54">2</literal></expr>]</index></name><operator pos:start="679:56" pos:end="679:57">==</operator><literal type="number" pos:start="679:58" pos:end="679:58">1</literal> <operator pos:start="679:60" pos:end="679:61">&amp;&amp;</operator> <name pos:start="679:63" pos:end="679:70"><name pos:start="679:63" pos:end="679:65">buf</name><index pos:start="679:66" pos:end="679:70">[<expr pos:start="679:67" pos:end="679:69"><name pos:start="679:67" pos:end="679:67">i</name><operator pos:start="679:68" pos:end="679:68">+</operator><literal type="number" pos:start="679:69" pos:end="679:69">3</literal></expr>]</index></name><operator pos:start="679:71" pos:end="679:72">==</operator><literal type="number" pos:start="679:73" pos:end="679:76">0xB6</literal></expr>)</condition><block pos:start="679:78" pos:end="685:17">{<block_content pos:start="681:21" pos:end="683:26">

                    <expr_stmt pos:start="681:21" pos:end="681:38"><expr pos:start="681:21" pos:end="681:37"><name pos:start="681:21" pos:end="681:35">startcode_found</name><operator pos:start="681:36" pos:end="681:36">=</operator><literal type="number" pos:start="681:37" pos:end="681:37">1</literal></expr>;</expr_stmt>

                    <break pos:start="683:21" pos:end="683:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="691:9" pos:end="697:9"><if pos:start="691:9" pos:end="697:9">if<condition pos:start="691:11" pos:end="691:62">(<expr pos:start="691:12" pos:end="691:61"><name pos:start="691:12" pos:end="691:23"><name pos:start="691:12" pos:end="691:12">s</name><operator pos:start="691:13" pos:end="691:14">-&gt;</operator><name pos:start="691:15" pos:end="691:16">gb</name><operator pos:start="691:17" pos:end="691:17">.</operator><name pos:start="691:18" pos:end="691:23">buffer</name></name> <operator pos:start="691:25" pos:end="691:26">==</operator> <name pos:start="691:28" pos:end="691:46"><name pos:start="691:28" pos:end="691:28">s</name><operator pos:start="691:29" pos:end="691:30">-&gt;</operator><name pos:start="691:31" pos:end="691:46">bitstream_buffer</name></name> <operator pos:start="691:48" pos:end="691:49">&amp;&amp;</operator> <name pos:start="691:51" pos:end="691:58">buf_size</name><operator pos:start="691:59" pos:end="691:59">&gt;</operator><literal type="number" pos:start="691:60" pos:end="691:61">20</literal></expr>)</condition><block pos:start="691:63" pos:end="697:9">{<block_content pos:start="693:13" pos:end="695:26"> <comment type="line" pos:start="691:65" pos:end="691:76">//xvid style</comment>

            <expr_stmt pos:start="693:13" pos:end="693:30"><expr pos:start="693:13" pos:end="693:29"><name pos:start="693:13" pos:end="693:27">startcode_found</name><operator pos:start="693:28" pos:end="693:28">=</operator><literal type="number" pos:start="693:29" pos:end="693:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="695:13" pos:end="695:26"><expr pos:start="695:13" pos:end="695:25"><name pos:start="695:13" pos:end="695:23">current_pos</name><operator pos:start="695:24" pos:end="695:24">=</operator><literal type="number" pos:start="695:25" pos:end="695:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="701:9" pos:end="715:9"><if pos:start="701:9" pos:end="715:9">if<condition pos:start="701:11" pos:end="701:27">(<expr pos:start="701:12" pos:end="701:26"><name pos:start="701:12" pos:end="701:26">startcode_found</name></expr>)</condition><block pos:start="701:28" pos:end="715:9">{<block_content pos:start="703:13" pos:end="713:61">

            <expr_stmt pos:start="703:13" pos:end="709:71"><expr pos:start="703:13" pos:end="709:70"><name pos:start="703:13" pos:end="703:31"><name pos:start="703:13" pos:end="703:13">s</name><operator pos:start="703:14" pos:end="703:15">-&gt;</operator><name pos:start="703:16" pos:end="703:31">bitstream_buffer</name></name><operator pos:start="703:32" pos:end="703:32">=</operator> <call pos:start="703:34" pos:end="709:70"><name pos:start="703:34" pos:end="703:48">av_fast_realloc</name><argument_list pos:start="703:49" pos:end="709:70">(

                <argument pos:start="705:17" pos:end="705:35"><expr pos:start="705:17" pos:end="705:35"><name pos:start="705:17" pos:end="705:35"><name pos:start="705:17" pos:end="705:17">s</name><operator pos:start="705:18" pos:end="705:19">-&gt;</operator><name pos:start="705:20" pos:end="705:35">bitstream_buffer</name></name></expr></argument>,

                <argument pos:start="707:17" pos:end="707:51"><expr pos:start="707:17" pos:end="707:51"><operator pos:start="707:17" pos:end="707:17">&amp;</operator><name pos:start="707:18" pos:end="707:51"><name pos:start="707:18" pos:end="707:18">s</name><operator pos:start="707:19" pos:end="707:20">-&gt;</operator><name pos:start="707:21" pos:end="707:51">allocated_bitstream_buffer_size</name></name></expr></argument>,

                <argument pos:start="709:17" pos:end="709:69"><expr pos:start="709:17" pos:end="709:69"><name pos:start="709:17" pos:end="709:24">buf_size</name> <operator pos:start="709:26" pos:end="709:26">-</operator> <name pos:start="709:28" pos:end="709:38">current_pos</name> <operator pos:start="709:40" pos:end="709:40">+</operator> <name pos:start="709:42" pos:end="709:69">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="711:13" pos:end="711:83"><expr pos:start="711:13" pos:end="711:82"><call pos:start="711:13" pos:end="711:82"><name pos:start="711:13" pos:end="711:18">memcpy</name><argument_list pos:start="711:19" pos:end="711:82">(<argument pos:start="711:20" pos:end="711:38"><expr pos:start="711:20" pos:end="711:38"><name pos:start="711:20" pos:end="711:38"><name pos:start="711:20" pos:end="711:20">s</name><operator pos:start="711:21" pos:end="711:22">-&gt;</operator><name pos:start="711:23" pos:end="711:38">bitstream_buffer</name></name></expr></argument>, <argument pos:start="711:41" pos:end="711:57"><expr pos:start="711:41" pos:end="711:57"><name pos:start="711:41" pos:end="711:43">buf</name> <operator pos:start="711:45" pos:end="711:45">+</operator> <name pos:start="711:47" pos:end="711:57">current_pos</name></expr></argument>, <argument pos:start="711:60" pos:end="711:81"><expr pos:start="711:60" pos:end="711:81"><name pos:start="711:60" pos:end="711:67">buf_size</name> <operator pos:start="711:69" pos:end="711:69">-</operator> <name pos:start="711:71" pos:end="711:81">current_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="713:13" pos:end="713:61"><expr pos:start="713:13" pos:end="713:60"><name pos:start="713:13" pos:end="713:36"><name pos:start="713:13" pos:end="713:13">s</name><operator pos:start="713:14" pos:end="713:15">-&gt;</operator><name pos:start="713:16" pos:end="713:36">bitstream_buffer_size</name></name><operator pos:start="713:37" pos:end="713:37">=</operator> <name pos:start="713:39" pos:end="713:46">buf_size</name> <operator pos:start="713:48" pos:end="713:48">-</operator> <name pos:start="713:50" pos:end="713:60">current_pos</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="721:1" pos:end="721:16"><name pos:start="721:1" pos:end="721:15">intrax8_decoded</name>:</label>

    <expr_stmt pos:start="723:5" pos:end="723:23"><expr pos:start="723:5" pos:end="723:22"><call pos:start="723:5" pos:end="723:22"><name pos:start="723:5" pos:end="723:19">ff_er_frame_end</name><argument_list pos:start="723:20" pos:end="723:22">(<argument pos:start="723:21" pos:end="723:21"><expr pos:start="723:21" pos:end="723:21"><name pos:start="723:21" pos:end="723:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="727:5" pos:end="727:21"><expr pos:start="727:5" pos:end="727:20"><call pos:start="727:5" pos:end="727:20"><name pos:start="727:5" pos:end="727:17">MPV_frame_end</name><argument_list pos:start="727:18" pos:end="727:20">(<argument pos:start="727:19" pos:end="727:19"><expr pos:start="727:19" pos:end="727:19"><name pos:start="727:19" pos:end="727:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<expr_stmt pos:start="731:1" pos:end="731:74"><expr pos:start="731:1" pos:end="731:73"><call pos:start="731:1" pos:end="731:73"><name pos:start="731:1" pos:end="731:6">assert</name><argument_list pos:start="731:7" pos:end="731:73">(<argument pos:start="731:8" pos:end="731:72"><expr pos:start="731:8" pos:end="731:72"><name pos:start="731:8" pos:end="731:35"><name pos:start="731:8" pos:end="731:8">s</name><operator pos:start="731:9" pos:end="731:10">-&gt;</operator><name pos:start="731:11" pos:end="731:25">current_picture</name><operator pos:start="731:26" pos:end="731:26">.</operator><name pos:start="731:27" pos:end="731:35">pict_type</name></name> <operator pos:start="731:37" pos:end="731:38">==</operator> <name pos:start="731:40" pos:end="731:72"><name pos:start="731:40" pos:end="731:40">s</name><operator pos:start="731:41" pos:end="731:42">-&gt;</operator><name pos:start="731:43" pos:end="731:61">current_picture_ptr</name><operator pos:start="731:62" pos:end="731:63">-&gt;</operator><name pos:start="731:64" pos:end="731:72">pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt pos:start="733:1" pos:end="733:53"><expr pos:start="733:1" pos:end="733:52"><call pos:start="733:1" pos:end="733:52"><name pos:start="733:1" pos:end="733:6">assert</name><argument_list pos:start="733:7" pos:end="733:52">(<argument pos:start="733:8" pos:end="733:51"><expr pos:start="733:8" pos:end="733:51"><name pos:start="733:8" pos:end="733:35"><name pos:start="733:8" pos:end="733:8">s</name><operator pos:start="733:9" pos:end="733:10">-&gt;</operator><name pos:start="733:11" pos:end="733:25">current_picture</name><operator pos:start="733:26" pos:end="733:26">.</operator><name pos:start="733:27" pos:end="733:35">pict_type</name></name> <operator pos:start="733:37" pos:end="733:38">==</operator> <name pos:start="733:40" pos:end="733:51"><name pos:start="733:40" pos:end="733:40">s</name><operator pos:start="733:41" pos:end="733:42">-&gt;</operator><name pos:start="733:43" pos:end="733:51">pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="735:5" pos:end="743:5"><if pos:start="735:5" pos:end="739:5">if <condition pos:start="735:8" pos:end="735:50">(<expr pos:start="735:9" pos:end="735:49"><name pos:start="735:9" pos:end="735:20"><name pos:start="735:9" pos:end="735:9">s</name><operator pos:start="735:10" pos:end="735:11">-&gt;</operator><name pos:start="735:12" pos:end="735:20">pict_type</name></name> <operator pos:start="735:22" pos:end="735:23">==</operator> <name pos:start="735:25" pos:end="735:33">FF_B_TYPE</name> <operator pos:start="735:35" pos:end="735:36">||</operator> <name pos:start="735:38" pos:end="735:49"><name pos:start="735:38" pos:end="735:38">s</name><operator pos:start="735:39" pos:end="735:40">-&gt;</operator><name pos:start="735:41" pos:end="735:49">low_delay</name></name></expr>)</condition> <block pos:start="735:52" pos:end="739:5">{<block_content pos:start="737:9" pos:end="737:49">

        <expr_stmt pos:start="737:9" pos:end="737:49"><expr pos:start="737:9" pos:end="737:48"><operator pos:start="737:9" pos:end="737:9">*</operator><name pos:start="737:10" pos:end="737:13">pict</name><operator pos:start="737:14" pos:end="737:14">=</operator> <operator pos:start="737:16" pos:end="737:16">*</operator><operator pos:start="737:17" pos:end="737:17">(</operator><name pos:start="737:18" pos:end="737:24">AVFrame</name><operator pos:start="737:25" pos:end="737:25">*</operator><operator pos:start="737:26" pos:end="737:26">)</operator><name pos:start="737:27" pos:end="737:48"><name pos:start="737:27" pos:end="737:27">s</name><operator pos:start="737:28" pos:end="737:29">-&gt;</operator><name pos:start="737:30" pos:end="737:48">current_picture_ptr</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="739:7" pos:end="743:5">else if <condition pos:start="739:15" pos:end="739:43">(<expr pos:start="739:16" pos:end="739:42"><name pos:start="739:16" pos:end="739:34"><name pos:start="739:16" pos:end="739:16">s</name><operator pos:start="739:17" pos:end="739:18">-&gt;</operator><name pos:start="739:19" pos:end="739:34">last_picture_ptr</name></name> <operator pos:start="739:36" pos:end="739:37">!=</operator> <name pos:start="739:39" pos:end="739:42">NULL</name></expr>)</condition> <block pos:start="739:45" pos:end="743:5">{<block_content pos:start="741:9" pos:end="741:46">

        <expr_stmt pos:start="741:9" pos:end="741:46"><expr pos:start="741:9" pos:end="741:45"><operator pos:start="741:9" pos:end="741:9">*</operator><name pos:start="741:10" pos:end="741:13">pict</name><operator pos:start="741:14" pos:end="741:14">=</operator> <operator pos:start="741:16" pos:end="741:16">*</operator><operator pos:start="741:17" pos:end="741:17">(</operator><name pos:start="741:18" pos:end="741:24">AVFrame</name><operator pos:start="741:25" pos:end="741:25">*</operator><operator pos:start="741:26" pos:end="741:26">)</operator><name pos:start="741:27" pos:end="741:45"><name pos:start="741:27" pos:end="741:27">s</name><operator pos:start="741:28" pos:end="741:29">-&gt;</operator><name pos:start="741:30" pos:end="741:45">last_picture_ptr</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="747:5" pos:end="753:5"><if pos:start="747:5" pos:end="753:5">if<condition pos:start="747:7" pos:end="747:43">(<expr pos:start="747:8" pos:end="747:42"><name pos:start="747:8" pos:end="747:26"><name pos:start="747:8" pos:end="747:8">s</name><operator pos:start="747:9" pos:end="747:10">-&gt;</operator><name pos:start="747:11" pos:end="747:26">last_picture_ptr</name></name> <operator pos:start="747:28" pos:end="747:29">||</operator> <name pos:start="747:31" pos:end="747:42"><name pos:start="747:31" pos:end="747:31">s</name><operator pos:start="747:32" pos:end="747:33">-&gt;</operator><name pos:start="747:34" pos:end="747:42">low_delay</name></name></expr>)</condition><block pos:start="747:44" pos:end="753:5">{<block_content pos:start="749:9" pos:end="751:37">

        <expr_stmt pos:start="749:9" pos:end="749:37"><expr pos:start="749:9" pos:end="749:36"><operator pos:start="749:9" pos:end="749:9">*</operator><name pos:start="749:10" pos:end="749:18">data_size</name> <operator pos:start="749:20" pos:end="749:20">=</operator> <sizeof pos:start="749:22" pos:end="749:36">sizeof<argument_list pos:start="749:28" pos:end="749:36">(<argument pos:start="749:29" pos:end="749:35"><expr pos:start="749:29" pos:end="749:35"><name pos:start="749:29" pos:end="749:35">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="751:9" pos:end="751:37"><expr pos:start="751:9" pos:end="751:36"><call pos:start="751:9" pos:end="751:36"><name pos:start="751:9" pos:end="751:27">ff_print_debug_info</name><argument_list pos:start="751:28" pos:end="751:36">(<argument pos:start="751:29" pos:end="751:29"><expr pos:start="751:29" pos:end="751:29"><name pos:start="751:29" pos:end="751:29">s</name></expr></argument>, <argument pos:start="751:32" pos:end="751:35"><expr pos:start="751:32" pos:end="751:35"><name pos:start="751:32" pos:end="751:35">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="757:5" pos:end="757:58">/* Return the Picture timestamp as the frame number */</comment>

    <comment type="block" pos:start="759:5" pos:end="759:58">/* we subtract 1 because it is added on utils.c     */</comment>

    <expr_stmt pos:start="761:5" pos:end="766:0"><expr pos:start="761:5" pos:end="761:47"><name pos:start="761:5" pos:end="761:23"><name pos:start="761:5" pos:end="761:9">avctx</name><operator pos:start="761:10" pos:end="761:11">-&gt;</operator><name pos:start="761:12" pos:end="761:23">frame_number</name></name> <operator pos:start="761:25" pos:end="761:25">=</operator> <name pos:start="761:27" pos:end="761:43"><name pos:start="761:27" pos:end="761:27">s</name><operator pos:start="761:28" pos:end="761:29">-&gt;</operator><name pos:start="761:30" pos:end="761:43">picture_number</name></name> <operator pos:start="761:45" pos:end="761:45">-</operator> <literal type="number" pos:start="761:47" pos:end="761:47">1</literal></expr>;</expr_stmt>



<cpp:ifdef pos:start="765:1" pos:end="765:23">#<cpp:directive pos:start="765:2" pos:end="765:6">ifdef</cpp:directive> <name pos:start="765:8" pos:end="765:23">PRINT_FRAME_TIME</name></cpp:ifdef>

<expr_stmt pos:start="767:1" pos:end="770:0"><expr pos:start="767:1" pos:end="767:56"><call pos:start="767:1" pos:end="767:56"><name pos:start="767:1" pos:end="767:6">av_log</name><argument_list pos:start="767:7" pos:end="767:56">(<argument pos:start="767:8" pos:end="767:12"><expr pos:start="767:8" pos:end="767:12"><name pos:start="767:8" pos:end="767:12">avctx</name></expr></argument>, <argument pos:start="767:15" pos:end="767:26"><expr pos:start="767:15" pos:end="767:26"><name pos:start="767:15" pos:end="767:26">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="767:29" pos:end="767:41"><expr pos:start="767:29" pos:end="767:41"><literal type="string" pos:start="767:29" pos:end="767:31">"%"</literal><name pos:start="767:32" pos:end="767:37">PRId64</name><literal type="string" pos:start="767:38" pos:end="767:41">"\n"</literal></expr></argument>, <argument pos:start="767:44" pos:end="767:55"><expr pos:start="767:44" pos:end="767:55"><call pos:start="767:44" pos:end="767:50"><name pos:start="767:44" pos:end="767:48">rdtsc</name><argument_list pos:start="767:49" pos:end="767:50">()</argument_list></call><operator pos:start="767:51" pos:end="767:51">-</operator><name pos:start="767:52" pos:end="767:55">time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="769:1" pos:end="769:6">#<cpp:directive pos:start="769:2" pos:end="769:6">endif</cpp:directive></cpp:endif>



    <return pos:start="773:5" pos:end="773:43">return <expr pos:start="773:12" pos:end="773:42"><call pos:start="773:12" pos:end="773:42"><name pos:start="773:12" pos:end="773:29">get_consumed_bytes</name><argument_list pos:start="773:30" pos:end="773:42">(<argument pos:start="773:31" pos:end="773:31"><expr pos:start="773:31" pos:end="773:31"><name pos:start="773:31" pos:end="773:31">s</name></expr></argument>, <argument pos:start="773:34" pos:end="773:41"><expr pos:start="773:34" pos:end="773:41"><name pos:start="773:34" pos:end="773:41">buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
