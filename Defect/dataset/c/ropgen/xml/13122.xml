<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13122.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">loadvm_postcopy_handle_run</name><parameter_list pos:start="1:38" pos:end="1:66">(<parameter pos:start="1:39" pos:end="1:65"><decl pos:start="1:39" pos:end="1:65"><type pos:start="1:39" pos:end="1:62"><name pos:start="1:39" pos:end="1:60">MigrationIncomingState</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">mis</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:23">

    <decl_stmt pos:start="5:5" pos:end="5:69"><decl pos:start="5:5" pos:end="5:68"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17">PostcopyState</name></type> <name pos:start="5:19" pos:end="5:20">ps</name> <init pos:start="5:22" pos:end="5:68">= <expr pos:start="5:24" pos:end="5:68"><call pos:start="5:24" pos:end="5:68"><name pos:start="5:24" pos:end="5:41">postcopy_state_set</name><argument_list pos:start="5:42" pos:end="5:68">(<argument pos:start="5:43" pos:end="5:67"><expr pos:start="5:43" pos:end="5:67"><name pos:start="5:43" pos:end="5:67">POSTCOPY_INCOMING_RUNNING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:39"><expr pos:start="9:5" pos:end="9:38"><call pos:start="9:5" pos:end="9:38"><name pos:start="9:5" pos:end="9:36">trace_loadvm_postcopy_handle_run</name><argument_list pos:start="9:37" pos:end="9:38">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:42">(<expr pos:start="11:9" pos:end="11:41"><name pos:start="11:9" pos:end="11:10">ps</name> <operator pos:start="11:12" pos:end="11:13">!=</operator> <name pos:start="11:15" pos:end="11:41">POSTCOPY_INCOMING_LISTENING</name></expr>)</condition> <block pos:start="11:44" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:18">

        <expr_stmt pos:start="13:9" pos:end="13:74"><expr pos:start="13:9" pos:end="13:73"><call pos:start="13:9" pos:end="13:73"><name pos:start="13:9" pos:end="13:20">error_report</name><argument_list pos:start="13:21" pos:end="13:73">(<argument pos:start="13:22" pos:end="13:68"><expr pos:start="13:22" pos:end="13:68"><literal type="string" pos:start="13:22" pos:end="13:68">"CMD_POSTCOPY_RUN in wrong postcopy state (%d)"</literal></expr></argument>, <argument pos:start="13:71" pos:end="13:72"><expr pos:start="13:71" pos:end="13:72"><name pos:start="13:71" pos:end="13:72">ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:18">return <expr pos:start="15:16" pos:end="15:17"><operator pos:start="15:16" pos:end="15:16">-</operator><literal type="number" pos:start="15:17" pos:end="15:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:63"><expr pos:start="21:5" pos:end="21:62"><name pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:7">mis</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:11">bh</name></name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:62"><name pos:start="21:15" pos:end="21:25">qemu_bh_new</name><argument_list pos:start="21:26" pos:end="21:62">(<argument pos:start="21:27" pos:end="21:55"><expr pos:start="21:27" pos:end="21:55"><name pos:start="21:27" pos:end="21:55">loadvm_postcopy_handle_run_bh</name></expr></argument>, <argument pos:start="21:58" pos:end="21:61"><expr pos:start="21:58" pos:end="21:61"><name pos:start="21:58" pos:end="21:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:30"><expr pos:start="23:5" pos:end="23:29"><call pos:start="23:5" pos:end="23:29"><name pos:start="23:5" pos:end="23:20">qemu_bh_schedule</name><argument_list pos:start="23:21" pos:end="23:29">(<argument pos:start="23:22" pos:end="23:28"><expr pos:start="23:22" pos:end="23:28"><name pos:start="23:22" pos:end="23:28"><name pos:start="23:22" pos:end="23:24">mis</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:28">bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="35:7">/* We need to finish reading the stream from the package

     * and also stop reading anything more from the stream that loaded the

     * package (since it's now being read by the listener thread).

     * LOADVM_QUIT will quit all the layers of nested loadvm loops.

     */</comment>

    <return pos:start="37:5" pos:end="37:23">return <expr pos:start="37:12" pos:end="37:22"><name pos:start="37:12" pos:end="37:22">LOADVM_QUIT</name></expr>;</return>

</block_content>}</block></function>
</unit>
