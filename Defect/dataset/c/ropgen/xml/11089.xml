<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11089.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">modified_levinson_durbin</name><parameter_list pos:start="1:37" pos:end="3:64">(<parameter pos:start="1:38" pos:end="1:48"><decl pos:start="1:38" pos:end="1:48"><type pos:start="1:38" pos:end="1:48"><name pos:start="1:38" pos:end="1:40">int</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">window</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:68"><decl pos:start="1:51" pos:end="1:68"><type pos:start="1:51" pos:end="1:68"><name pos:start="1:51" pos:end="1:53">int</name></type> <name pos:start="1:55" pos:end="1:68">window_entries</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:16"><decl pos:start="3:9" pos:end="3:16"><type pos:start="3:9" pos:end="3:16"><name pos:start="3:9" pos:end="3:11">int</name> <modifier pos:start="3:13" pos:end="3:13">*</modifier></type><name pos:start="3:14" pos:end="3:16">out</name></decl></parameter>, <parameter pos:start="3:19" pos:end="3:33"><decl pos:start="3:19" pos:end="3:33"><type pos:start="3:19" pos:end="3:33"><name pos:start="3:19" pos:end="3:21">int</name></type> <name pos:start="3:23" pos:end="3:33">out_entries</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:47"><decl pos:start="3:36" pos:end="3:47"><type pos:start="3:36" pos:end="3:47"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:47">channels</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:63"><decl pos:start="3:50" pos:end="3:63"><type pos:start="3:50" pos:end="3:63"><name pos:start="3:50" pos:end="3:52">int</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:63">tap_quant</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="141:1">{<block_content pos:start="7:5" pos:end="139:19">

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:7">int</name> <modifier pos:start="9:9" pos:end="9:9">*</modifier></type><name pos:start="9:10" pos:end="9:14">state</name> <init pos:start="9:16" pos:end="9:58">= <expr pos:start="9:18" pos:end="9:58"><call pos:start="9:18" pos:end="9:58"><name pos:start="9:18" pos:end="9:26">av_calloc</name><argument_list pos:start="9:27" pos:end="9:58">(<argument pos:start="9:28" pos:end="9:41"><expr pos:start="9:28" pos:end="9:41"><name pos:start="9:28" pos:end="9:41">window_entries</name></expr></argument>, <argument pos:start="9:44" pos:end="9:57"><expr pos:start="9:44" pos:end="9:57"><sizeof pos:start="9:44" pos:end="9:57">sizeof<argument_list pos:start="9:50" pos:end="9:57">(<argument pos:start="9:51" pos:end="9:56"><expr pos:start="9:51" pos:end="9:56"><operator pos:start="9:51" pos:end="9:51">*</operator><name pos:start="9:52" pos:end="9:56">state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:45"><expr pos:start="13:5" pos:end="13:44"><call pos:start="13:5" pos:end="13:44"><name pos:start="13:5" pos:end="13:10">memcpy</name><argument_list pos:start="13:11" pos:end="13:44">(<argument pos:start="13:12" pos:end="13:16"><expr pos:start="13:12" pos:end="13:16"><name pos:start="13:12" pos:end="13:16">state</name></expr></argument>, <argument pos:start="13:19" pos:end="13:24"><expr pos:start="13:19" pos:end="13:24"><name pos:start="13:19" pos:end="13:24">window</name></expr></argument>, <argument pos:start="13:27" pos:end="13:43"><expr pos:start="13:27" pos:end="13:43"><literal type="number" pos:start="13:27" pos:end="13:27">4</literal><operator pos:start="13:28" pos:end="13:28">*</operator> <name pos:start="13:30" pos:end="13:43">window_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="17:5" pos:end="135:5">for <control pos:start="17:9" pos:end="17:37">(<init pos:start="17:10" pos:end="17:15"><expr pos:start="17:10" pos:end="17:14"><name pos:start="17:10" pos:end="17:10">i</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <literal type="number" pos:start="17:14" pos:end="17:14">0</literal></expr>;</init> <condition pos:start="17:17" pos:end="17:32"><expr pos:start="17:17" pos:end="17:31"><name pos:start="17:17" pos:end="17:17">i</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <name pos:start="17:21" pos:end="17:31">out_entries</name></expr>;</condition> <incr pos:start="17:34" pos:end="17:36"><expr pos:start="17:34" pos:end="17:36"><name pos:start="17:34" pos:end="17:34">i</name><operator pos:start="17:35" pos:end="17:36">++</operator></expr></incr>)</control>

    <block pos:start="19:5" pos:end="135:5">{<block_content pos:start="21:9" pos:end="134:0">

        <decl_stmt pos:start="21:9" pos:end="21:40"><decl pos:start="21:9" pos:end="21:33"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:16">step</name> <init pos:start="21:18" pos:end="21:33">= <expr pos:start="21:20" pos:end="21:33"><operator pos:start="21:20" pos:end="21:20">(</operator><name pos:start="21:21" pos:end="21:21">i</name><operator pos:start="21:22" pos:end="21:22">+</operator><literal type="number" pos:start="21:23" pos:end="21:23">1</literal><operator pos:start="21:24" pos:end="21:24">)</operator><operator pos:start="21:25" pos:end="21:25">*</operator><name pos:start="21:26" pos:end="21:33">channels</name></expr></init></decl>, <decl pos:start="21:36" pos:end="21:36"><type ref="prev" pos:start="21:9" pos:end="21:11"/><name pos:start="21:36" pos:end="21:36">k</name></decl>, <decl pos:start="21:39" pos:end="21:39"><type ref="prev" pos:start="21:9" pos:end="21:11"/><name pos:start="21:39" pos:end="21:39">j</name></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="26:0"><decl pos:start="23:9" pos:end="23:23"><type pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:14">double</name></type> <name pos:start="23:16" pos:end="23:17">xx</name> <init pos:start="23:19" pos:end="23:23">= <expr pos:start="23:21" pos:end="23:23"><literal type="number" pos:start="23:21" pos:end="23:23">0.0</literal></expr></init></decl>, <decl pos:start="23:26" pos:end="23:33"><type ref="prev" pos:start="23:9" pos:end="23:14"/><name pos:start="23:26" pos:end="23:27">xy</name> <init pos:start="23:29" pos:end="23:33">= <expr pos:start="23:31" pos:end="23:33"><literal type="number" pos:start="23:31" pos:end="23:33">0.0</literal></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="25:1" pos:end="25:5">#<cpp:directive pos:start="25:2" pos:end="25:3">if</cpp:directive> <expr pos:start="25:5" pos:end="25:5"><literal type="number" pos:start="25:5" pos:end="25:5">1</literal></expr></cpp:if>

        <decl_stmt pos:start="27:9" pos:end="27:37"><decl pos:start="27:9" pos:end="27:36"><type pos:start="27:9" pos:end="27:13"><name pos:start="27:9" pos:end="27:11">int</name> <modifier pos:start="27:13" pos:end="27:13">*</modifier></type><name pos:start="27:14" pos:end="27:18">x_ptr</name> <init pos:start="27:20" pos:end="27:36">= <expr pos:start="27:22" pos:end="27:36"><operator pos:start="27:22" pos:end="27:22">&amp;</operator><operator pos:start="27:23" pos:end="27:23">(</operator><name pos:start="27:24" pos:end="27:35"><name pos:start="27:24" pos:end="27:29">window</name><index pos:start="27:30" pos:end="27:35">[<expr pos:start="27:31" pos:end="27:34"><name pos:start="27:31" pos:end="27:34">step</name></expr>]</index></name><operator pos:start="27:36" pos:end="27:36">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:37"><decl pos:start="29:9" pos:end="29:36"><type pos:start="29:9" pos:end="29:13"><name pos:start="29:9" pos:end="29:11">int</name> <modifier pos:start="29:13" pos:end="29:13">*</modifier></type><name pos:start="29:14" pos:end="29:22">state_ptr</name> <init pos:start="29:24" pos:end="29:36">= <expr pos:start="29:26" pos:end="29:36"><operator pos:start="29:26" pos:end="29:26">&amp;</operator><operator pos:start="29:27" pos:end="29:27">(</operator><name pos:start="29:28" pos:end="29:35"><name pos:start="29:28" pos:end="29:32">state</name><index pos:start="29:33" pos:end="29:35">[<expr pos:start="29:34" pos:end="29:34"><literal type="number" pos:start="29:34" pos:end="29:34">0</literal></expr>]</index></name><operator pos:start="29:36" pos:end="29:36">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:34"><expr pos:start="31:9" pos:end="31:33"><name pos:start="31:9" pos:end="31:9">j</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <name pos:start="31:13" pos:end="31:26">window_entries</name> <operator pos:start="31:28" pos:end="31:28">-</operator> <name pos:start="31:30" pos:end="31:33">step</name></expr>;</expr_stmt>

        <for pos:start="33:9" pos:end="48:0">for <control pos:start="33:13" pos:end="33:42">(<init pos:start="33:14" pos:end="33:14">;</init><condition pos:start="33:15" pos:end="33:18"><expr pos:start="33:15" pos:end="33:17"><name pos:start="33:15" pos:end="33:15">j</name><operator pos:start="33:16" pos:end="33:16">&gt;</operator><literal type="number" pos:start="33:17" pos:end="33:17">0</literal></expr>;</condition><incr pos:start="33:19" pos:end="33:41"><expr pos:start="33:19" pos:end="33:21"><name pos:start="33:19" pos:end="33:19">j</name><operator pos:start="33:20" pos:end="33:21">--</operator></expr><operator pos:start="33:22" pos:end="33:22">,</operator><expr pos:start="33:23" pos:end="33:29"><name pos:start="33:23" pos:end="33:27">x_ptr</name><operator pos:start="33:28" pos:end="33:29">++</operator></expr><operator pos:start="33:30" pos:end="33:30">,</operator><expr pos:start="33:31" pos:end="33:41"><name pos:start="33:31" pos:end="33:39">state_ptr</name><operator pos:start="33:40" pos:end="33:41">++</operator></expr></incr>)</control>

        <block pos:start="35:9" pos:end="48:0">{<block_content pos:start="37:13" pos:end="43:38">

            <decl_stmt pos:start="37:13" pos:end="37:36"><decl pos:start="37:13" pos:end="37:35"><type pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:18">double</name></type> <name pos:start="37:20" pos:end="37:26">x_value</name> <init pos:start="37:28" pos:end="37:35">= <expr pos:start="37:30" pos:end="37:35"><operator pos:start="37:30" pos:end="37:30">*</operator><name pos:start="37:31" pos:end="37:35">x_ptr</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="39:13" pos:end="39:44"><decl pos:start="39:13" pos:end="39:43"><type pos:start="39:13" pos:end="39:18"><name pos:start="39:13" pos:end="39:18">double</name></type> <name pos:start="39:20" pos:end="39:30">state_value</name> <init pos:start="39:32" pos:end="39:43">= <expr pos:start="39:34" pos:end="39:43"><operator pos:start="39:34" pos:end="39:34">*</operator><name pos:start="39:35" pos:end="39:43">state_ptr</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:42"><expr pos:start="41:13" pos:end="41:41"><name pos:start="41:13" pos:end="41:14">xx</name> <operator pos:start="41:16" pos:end="41:17">+=</operator> <name pos:start="41:19" pos:end="41:29">state_value</name><operator pos:start="41:30" pos:end="41:30">*</operator><name pos:start="41:31" pos:end="41:41">state_value</name></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:38"><expr pos:start="43:13" pos:end="43:37"><name pos:start="43:13" pos:end="43:14">xy</name> <operator pos:start="43:16" pos:end="43:17">+=</operator> <name pos:start="43:19" pos:end="43:25">x_value</name><operator pos:start="43:26" pos:end="43:26">*</operator><name pos:start="43:27" pos:end="43:37">state_value</name></expr>;</expr_stmt>

        </block_content>}</block></for>

<cpp:else pos:start="47:1" pos:end="47:5">#<cpp:directive pos:start="47:2" pos:end="47:5">else</cpp:directive></cpp:else>

        <for pos:start="49:9" pos:end="49:55">for <control pos:start="49:13" pos:end="49:54">(<init pos:start="49:14" pos:end="49:19"><expr pos:start="49:14" pos:end="49:18"><name pos:start="49:14" pos:end="49:14">j</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <literal type="number" pos:start="49:18" pos:end="49:18">0</literal></expr>;</init> <condition pos:start="49:21" pos:end="49:49"><expr pos:start="49:21" pos:end="49:48"><name pos:start="49:21" pos:end="49:21">j</name> <operator pos:start="49:23" pos:end="49:24">&lt;=</operator> <operator pos:start="49:26" pos:end="49:26">(</operator><name pos:start="49:27" pos:end="49:40">window_entries</name> <operator pos:start="49:42" pos:end="49:42">-</operator> <name pos:start="49:44" pos:end="49:47">step</name><operator pos:start="49:48" pos:end="49:48">)</operator></expr>;</condition> <incr pos:start="49:51" pos:end="49:53"><expr pos:start="49:51" pos:end="49:53"><name pos:start="49:51" pos:end="49:51">j</name><operator pos:start="49:52" pos:end="49:53">++</operator></expr></incr>)</control><block type="pseudo" pos:start="49:55" pos:end="49:55"><block_content pos:start="49:55" pos:end="49:55"><empty_stmt pos:start="49:55" pos:end="49:55">;</empty_stmt></block_content></block></for>

        <block pos:start="51:9" pos:end="68:0">{<block_content pos:start="53:13" pos:end="63:35">

            <decl_stmt pos:start="53:13" pos:end="53:44"><decl pos:start="53:13" pos:end="53:43"><type pos:start="53:13" pos:end="53:18"><name pos:start="53:13" pos:end="53:18">double</name></type> <name pos:start="53:20" pos:end="53:26">stepval</name> <init pos:start="53:28" pos:end="53:43">= <expr pos:start="53:30" pos:end="53:43"><name pos:start="53:30" pos:end="53:43"><name pos:start="53:30" pos:end="53:35">window</name><index pos:start="53:36" pos:end="53:43">[<expr pos:start="53:37" pos:end="53:42"><name pos:start="53:37" pos:end="53:40">step</name><operator pos:start="53:41" pos:end="53:41">+</operator><name pos:start="53:42" pos:end="53:42">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="55:13" pos:end="55:40"><decl pos:start="55:13" pos:end="55:39"><type pos:start="55:13" pos:end="55:18"><name pos:start="55:13" pos:end="55:18">double</name></type> <name pos:start="55:20" pos:end="55:27">stateval</name> <init pos:start="55:29" pos:end="55:39">= <expr pos:start="55:31" pos:end="55:39"><name pos:start="55:31" pos:end="55:39"><name pos:start="55:31" pos:end="55:36">window</name><index pos:start="55:37" pos:end="55:39">[<expr pos:start="55:38" pos:end="55:38"><name pos:start="55:38" pos:end="55:38">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<comment type="line" pos:start="57:1" pos:end="57:56">//            xx += (double)window[j]*(double)window[j];</comment>

<comment type="line" pos:start="59:1" pos:end="59:61">//            xy += (double)window[step+j]*(double)window[j];</comment>

            <expr_stmt pos:start="61:13" pos:end="61:36"><expr pos:start="61:13" pos:end="61:35"><name pos:start="61:13" pos:end="61:14">xx</name> <operator pos:start="61:16" pos:end="61:17">+=</operator> <name pos:start="61:19" pos:end="61:26">stateval</name><operator pos:start="61:27" pos:end="61:27">*</operator><name pos:start="61:28" pos:end="61:35">stateval</name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:35"><expr pos:start="63:13" pos:end="63:34"><name pos:start="63:13" pos:end="63:14">xy</name> <operator pos:start="63:16" pos:end="63:17">+=</operator> <name pos:start="63:19" pos:end="63:25">stepval</name><operator pos:start="63:26" pos:end="63:26">*</operator><name pos:start="63:27" pos:end="63:34">stateval</name></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="69:9" pos:end="75:93"><if pos:start="69:9" pos:end="71:18">if <condition pos:start="69:12" pos:end="69:22">(<expr pos:start="69:13" pos:end="69:21"><name pos:start="69:13" pos:end="69:14">xx</name> <operator pos:start="69:16" pos:end="69:17">==</operator> <literal type="number" pos:start="69:19" pos:end="69:21">0.0</literal></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:18"><block_content pos:start="71:13" pos:end="71:18">

            <expr_stmt pos:start="71:13" pos:end="71:18"><expr pos:start="71:13" pos:end="71:17"><name pos:start="71:13" pos:end="71:13">k</name> <operator pos:start="71:15" pos:end="71:15">=</operator> <literal type="number" pos:start="71:17" pos:end="71:17">0</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="73:9" pos:end="75:93">else<block type="pseudo" pos:start="75:13" pos:end="75:93"><block_content pos:start="75:13" pos:end="75:93">

            <expr_stmt pos:start="75:13" pos:end="75:93"><expr pos:start="75:13" pos:end="75:92"><name pos:start="75:13" pos:end="75:13">k</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <operator pos:start="75:17" pos:end="75:17">(</operator><name pos:start="75:18" pos:end="75:20">int</name><operator pos:start="75:21" pos:end="75:21">)</operator><operator pos:start="75:22" pos:end="75:22">(</operator><call pos:start="75:23" pos:end="75:91"><name pos:start="75:23" pos:end="75:27">floor</name><argument_list pos:start="75:28" pos:end="75:91">(<argument pos:start="75:29" pos:end="75:90"><expr pos:start="75:29" pos:end="75:90"><operator pos:start="75:29" pos:end="75:29">-</operator><name pos:start="75:30" pos:end="75:31">xy</name><operator pos:start="75:32" pos:end="75:32">/</operator><name pos:start="75:33" pos:end="75:34">xx</name> <operator pos:start="75:36" pos:end="75:36">*</operator> <operator pos:start="75:38" pos:end="75:38">(</operator><name pos:start="75:39" pos:end="75:44">double</name><operator pos:start="75:45" pos:end="75:45">)</operator><name pos:start="75:46" pos:end="75:59">LATTICE_FACTOR</name> <operator pos:start="75:61" pos:end="75:61">/</operator> <operator pos:start="75:63" pos:end="75:63">(</operator><name pos:start="75:64" pos:end="75:69">double</name><operator pos:start="75:70" pos:end="75:70">)</operator><operator pos:start="75:71" pos:end="75:71">(</operator><name pos:start="75:72" pos:end="75:83"><name pos:start="75:72" pos:end="75:80">tap_quant</name><index pos:start="75:81" pos:end="75:83">[<expr pos:start="75:82" pos:end="75:82"><name pos:start="75:82" pos:end="75:82">i</name></expr>]</index></name><operator pos:start="75:84" pos:end="75:84">)</operator> <operator pos:start="75:86" pos:end="75:86">+</operator> <literal type="number" pos:start="75:88" pos:end="75:90">0.5</literal></expr></argument>)</argument_list></call><operator pos:start="75:92" pos:end="75:92">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="79:9" pos:end="81:44"><if pos:start="79:9" pos:end="81:44">if <condition pos:start="79:12" pos:end="79:46">(<expr pos:start="79:13" pos:end="79:45"><name pos:start="79:13" pos:end="79:13">k</name> <operator pos:start="79:15" pos:end="79:15">&gt;</operator> <operator pos:start="79:17" pos:end="79:17">(</operator><name pos:start="79:18" pos:end="79:31">LATTICE_FACTOR</name><operator pos:start="79:32" pos:end="79:32">/</operator><name pos:start="79:33" pos:end="79:44"><name pos:start="79:33" pos:end="79:41">tap_quant</name><index pos:start="79:42" pos:end="79:44">[<expr pos:start="79:43" pos:end="79:43"><name pos:start="79:43" pos:end="79:43">i</name></expr>]</index></name><operator pos:start="79:45" pos:end="79:45">)</operator></expr>)</condition><block type="pseudo" pos:start="81:13" pos:end="81:44"><block_content pos:start="81:13" pos:end="81:44">

            <expr_stmt pos:start="81:13" pos:end="81:44"><expr pos:start="81:13" pos:end="81:43"><name pos:start="81:13" pos:end="81:13">k</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <name pos:start="81:17" pos:end="81:30">LATTICE_FACTOR</name><operator pos:start="81:31" pos:end="81:31">/</operator><name pos:start="81:32" pos:end="81:43"><name pos:start="81:32" pos:end="81:40">tap_quant</name><index pos:start="81:41" pos:end="81:43">[<expr pos:start="81:42" pos:end="81:42"><name pos:start="81:42" pos:end="81:42">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="83:9" pos:end="85:47"><if pos:start="83:9" pos:end="85:47">if <condition pos:start="83:12" pos:end="83:47">(<expr pos:start="83:13" pos:end="83:46"><operator pos:start="83:13" pos:end="83:13">-</operator><name pos:start="83:14" pos:end="83:14">k</name> <operator pos:start="83:16" pos:end="83:16">&gt;</operator> <operator pos:start="83:18" pos:end="83:18">(</operator><name pos:start="83:19" pos:end="83:32">LATTICE_FACTOR</name><operator pos:start="83:33" pos:end="83:33">/</operator><name pos:start="83:34" pos:end="83:45"><name pos:start="83:34" pos:end="83:42">tap_quant</name><index pos:start="83:43" pos:end="83:45">[<expr pos:start="83:44" pos:end="83:44"><name pos:start="83:44" pos:end="83:44">i</name></expr>]</index></name><operator pos:start="83:46" pos:end="83:46">)</operator></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:47"><block_content pos:start="85:13" pos:end="85:47">

            <expr_stmt pos:start="85:13" pos:end="85:47"><expr pos:start="85:13" pos:end="85:46"><name pos:start="85:13" pos:end="85:13">k</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <operator pos:start="85:17" pos:end="85:17">-</operator><operator pos:start="85:18" pos:end="85:18">(</operator><name pos:start="85:19" pos:end="85:32">LATTICE_FACTOR</name><operator pos:start="85:33" pos:end="85:33">/</operator><name pos:start="85:34" pos:end="85:45"><name pos:start="85:34" pos:end="85:42">tap_quant</name><index pos:start="85:43" pos:end="85:45">[<expr pos:start="85:44" pos:end="85:44"><name pos:start="85:44" pos:end="85:44">i</name></expr>]</index></name><operator pos:start="85:46" pos:end="85:46">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:19"><expr pos:start="89:9" pos:end="89:18"><name pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:11">out</name><index pos:start="89:12" pos:end="89:14">[<expr pos:start="89:13" pos:end="89:13"><name pos:start="89:13" pos:end="89:13">i</name></expr>]</index></name> <operator pos:start="89:16" pos:end="89:16">=</operator> <name pos:start="89:18" pos:end="89:18">k</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="96:0"><expr pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:9">k</name> <operator pos:start="91:11" pos:end="91:12">*=</operator> <name pos:start="91:14" pos:end="91:25"><name pos:start="91:14" pos:end="91:22">tap_quant</name><index pos:start="91:23" pos:end="91:25">[<expr pos:start="91:24" pos:end="91:24"><name pos:start="91:24" pos:end="91:24">i</name></expr>]</index></name></expr>;</expr_stmt>



<cpp:if pos:start="95:1" pos:end="95:5">#<cpp:directive pos:start="95:2" pos:end="95:3">if</cpp:directive> <expr pos:start="95:5" pos:end="95:5"><literal type="number" pos:start="95:5" pos:end="95:5">1</literal></expr></cpp:if>

        <expr_stmt pos:start="97:9" pos:end="97:32"><expr pos:start="97:9" pos:end="97:31"><name pos:start="97:9" pos:end="97:13">x_ptr</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <operator pos:start="97:17" pos:end="97:17">&amp;</operator><operator pos:start="97:18" pos:end="97:18">(</operator><name pos:start="97:19" pos:end="97:30"><name pos:start="97:19" pos:end="97:24">window</name><index pos:start="97:25" pos:end="97:30">[<expr pos:start="97:26" pos:end="97:29"><name pos:start="97:26" pos:end="97:29">step</name></expr>]</index></name><operator pos:start="97:31" pos:end="97:31">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:32"><expr pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:17">state_ptr</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <operator pos:start="99:21" pos:end="99:21">&amp;</operator><operator pos:start="99:22" pos:end="99:22">(</operator><name pos:start="99:23" pos:end="99:30"><name pos:start="99:23" pos:end="99:27">state</name><index pos:start="99:28" pos:end="99:30">[<expr pos:start="99:29" pos:end="99:29"><literal type="number" pos:start="99:29" pos:end="99:29">0</literal></expr>]</index></name><operator pos:start="99:31" pos:end="99:31">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:34"><expr pos:start="101:9" pos:end="101:33"><name pos:start="101:9" pos:end="101:9">j</name> <operator pos:start="101:11" pos:end="101:11">=</operator> <name pos:start="101:13" pos:end="101:26">window_entries</name> <operator pos:start="101:28" pos:end="101:28">-</operator> <name pos:start="101:30" pos:end="101:33">step</name></expr>;</expr_stmt>

        <for pos:start="103:9" pos:end="118:0">for <control pos:start="103:13" pos:end="103:42">(<init pos:start="103:14" pos:end="103:14">;</init><condition pos:start="103:15" pos:end="103:18"><expr pos:start="103:15" pos:end="103:17"><name pos:start="103:15" pos:end="103:15">j</name><operator pos:start="103:16" pos:end="103:16">&gt;</operator><literal type="number" pos:start="103:17" pos:end="103:17">0</literal></expr>;</condition><incr pos:start="103:19" pos:end="103:41"><expr pos:start="103:19" pos:end="103:21"><name pos:start="103:19" pos:end="103:19">j</name><operator pos:start="103:20" pos:end="103:21">--</operator></expr><operator pos:start="103:22" pos:end="103:22">,</operator><expr pos:start="103:23" pos:end="103:29"><name pos:start="103:23" pos:end="103:27">x_ptr</name><operator pos:start="103:28" pos:end="103:29">++</operator></expr><operator pos:start="103:30" pos:end="103:30">,</operator><expr pos:start="103:31" pos:end="103:41"><name pos:start="103:31" pos:end="103:39">state_ptr</name><operator pos:start="103:40" pos:end="103:41">++</operator></expr></incr>)</control>

        <block pos:start="105:9" pos:end="118:0">{<block_content pos:start="107:13" pos:end="113:76">

            <decl_stmt pos:start="107:13" pos:end="107:33"><decl pos:start="107:13" pos:end="107:32"><type pos:start="107:13" pos:end="107:15"><name pos:start="107:13" pos:end="107:15">int</name></type> <name pos:start="107:17" pos:end="107:23">x_value</name> <init pos:start="107:25" pos:end="107:32">= <expr pos:start="107:27" pos:end="107:32"><operator pos:start="107:27" pos:end="107:27">*</operator><name pos:start="107:28" pos:end="107:32">x_ptr</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="109:13" pos:end="109:41"><decl pos:start="109:13" pos:end="109:40"><type pos:start="109:13" pos:end="109:15"><name pos:start="109:13" pos:end="109:15">int</name></type> <name pos:start="109:17" pos:end="109:27">state_value</name> <init pos:start="109:29" pos:end="109:40">= <expr pos:start="109:31" pos:end="109:40"><operator pos:start="109:31" pos:end="109:31">*</operator><name pos:start="109:32" pos:end="109:40">state_ptr</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:71"><expr pos:start="111:13" pos:end="111:70"><operator pos:start="111:13" pos:end="111:13">*</operator><name pos:start="111:14" pos:end="111:18">x_ptr</name> <operator pos:start="111:20" pos:end="111:20">=</operator> <name pos:start="111:22" pos:end="111:28">x_value</name> <operator pos:start="111:30" pos:end="111:30">+</operator> <call pos:start="111:32" pos:end="111:70"><name pos:start="111:32" pos:end="111:41">shift_down</name><argument_list pos:start="111:42" pos:end="111:70">(<argument pos:start="111:43" pos:end="111:55"><expr pos:start="111:43" pos:end="111:55"><name pos:start="111:43" pos:end="111:43">k</name><operator pos:start="111:44" pos:end="111:44">*</operator><name pos:start="111:45" pos:end="111:55">state_value</name></expr></argument>,<argument pos:start="111:57" pos:end="111:69"><expr pos:start="111:57" pos:end="111:69"><name pos:start="111:57" pos:end="111:69">LATTICE_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:76"><expr pos:start="113:13" pos:end="113:75"><operator pos:start="113:13" pos:end="113:13">*</operator><name pos:start="113:14" pos:end="113:22">state_ptr</name> <operator pos:start="113:24" pos:end="113:24">=</operator> <name pos:start="113:26" pos:end="113:36">state_value</name> <operator pos:start="113:38" pos:end="113:38">+</operator> <call pos:start="113:40" pos:end="113:75"><name pos:start="113:40" pos:end="113:49">shift_down</name><argument_list pos:start="113:50" pos:end="113:75">(<argument pos:start="113:51" pos:end="113:59"><expr pos:start="113:51" pos:end="113:59"><name pos:start="113:51" pos:end="113:51">k</name><operator pos:start="113:52" pos:end="113:52">*</operator><name pos:start="113:53" pos:end="113:59">x_value</name></expr></argument>, <argument pos:start="113:62" pos:end="113:74"><expr pos:start="113:62" pos:end="113:74"><name pos:start="113:62" pos:end="113:74">LATTICE_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

<cpp:else pos:start="117:1" pos:end="117:5">#<cpp:directive pos:start="117:2" pos:end="117:5">else</cpp:directive></cpp:else>

        <for pos:start="119:9" pos:end="134:0">for <control pos:start="119:13" pos:end="119:52">(<init pos:start="119:14" pos:end="119:17"><expr pos:start="119:14" pos:end="119:16"><name pos:start="119:14" pos:end="119:14">j</name><operator pos:start="119:15" pos:end="119:15">=</operator><literal type="number" pos:start="119:16" pos:end="119:16">0</literal></expr>;</init> <condition pos:start="119:19" pos:end="119:47"><expr pos:start="119:19" pos:end="119:46"><name pos:start="119:19" pos:end="119:19">j</name> <operator pos:start="119:21" pos:end="119:22">&lt;=</operator> <operator pos:start="119:24" pos:end="119:24">(</operator><name pos:start="119:25" pos:end="119:38">window_entries</name> <operator pos:start="119:40" pos:end="119:40">-</operator> <name pos:start="119:42" pos:end="119:45">step</name><operator pos:start="119:46" pos:end="119:46">)</operator></expr>;</condition> <incr pos:start="119:49" pos:end="119:51"><expr pos:start="119:49" pos:end="119:51"><name pos:start="119:49" pos:end="119:49">j</name><operator pos:start="119:50" pos:end="119:51">++</operator></expr></incr>)</control>

        <block pos:start="121:9" pos:end="134:0">{<block_content pos:start="123:13" pos:end="129:63">

            <decl_stmt pos:start="123:13" pos:end="123:41"><decl pos:start="123:13" pos:end="123:40"><type pos:start="123:13" pos:end="123:15"><name pos:start="123:13" pos:end="123:15">int</name></type> <name pos:start="123:17" pos:end="123:23">stepval</name> <init pos:start="123:25" pos:end="123:40">= <expr pos:start="123:27" pos:end="123:40"><name pos:start="123:27" pos:end="123:40"><name pos:start="123:27" pos:end="123:32">window</name><index pos:start="123:33" pos:end="123:40">[<expr pos:start="123:34" pos:end="123:39"><name pos:start="123:34" pos:end="123:37">step</name><operator pos:start="123:38" pos:end="123:38">+</operator><name pos:start="123:39" pos:end="123:39">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="125:13" pos:end="125:34"><decl pos:start="125:13" pos:end="125:33"><type pos:start="125:13" pos:end="125:15"><name pos:start="125:13" pos:end="125:15">int</name></type> <name pos:start="125:17" pos:end="125:24">stateval</name><init pos:start="125:25" pos:end="125:33">=<expr pos:start="125:26" pos:end="125:33"><name pos:start="125:26" pos:end="125:33"><name pos:start="125:26" pos:end="125:30">state</name><index pos:start="125:31" pos:end="125:33">[<expr pos:start="125:32" pos:end="125:32"><name pos:start="125:32" pos:end="125:32">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:70"><expr pos:start="127:13" pos:end="127:69"><name pos:start="127:13" pos:end="127:26"><name pos:start="127:13" pos:end="127:18">window</name><index pos:start="127:19" pos:end="127:26">[<expr pos:start="127:20" pos:end="127:25"><name pos:start="127:20" pos:end="127:23">step</name><operator pos:start="127:24" pos:end="127:24">+</operator><name pos:start="127:25" pos:end="127:25">j</name></expr>]</index></name> <operator pos:start="127:28" pos:end="127:29">+=</operator> <call pos:start="127:31" pos:end="127:69"><name pos:start="127:31" pos:end="127:40">shift_down</name><argument_list pos:start="127:41" pos:end="127:69">(<argument pos:start="127:42" pos:end="127:53"><expr pos:start="127:42" pos:end="127:53"><name pos:start="127:42" pos:end="127:42">k</name> <operator pos:start="127:44" pos:end="127:44">*</operator> <name pos:start="127:46" pos:end="127:53">stateval</name></expr></argument>, <argument pos:start="127:56" pos:end="127:68"><expr pos:start="127:56" pos:end="127:68"><name pos:start="127:56" pos:end="127:68">LATTICE_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:63"><expr pos:start="129:13" pos:end="129:62"><name pos:start="129:13" pos:end="129:20"><name pos:start="129:13" pos:end="129:17">state</name><index pos:start="129:18" pos:end="129:20">[<expr pos:start="129:19" pos:end="129:19"><name pos:start="129:19" pos:end="129:19">j</name></expr>]</index></name> <operator pos:start="129:22" pos:end="129:23">+=</operator> <call pos:start="129:25" pos:end="129:62"><name pos:start="129:25" pos:end="129:34">shift_down</name><argument_list pos:start="129:35" pos:end="129:62">(<argument pos:start="129:36" pos:end="129:46"><expr pos:start="129:36" pos:end="129:46"><name pos:start="129:36" pos:end="129:36">k</name> <operator pos:start="129:38" pos:end="129:38">*</operator> <name pos:start="129:40" pos:end="129:46">stepval</name></expr></argument>, <argument pos:start="129:49" pos:end="129:61"><expr pos:start="129:49" pos:end="129:61"><name pos:start="129:49" pos:end="129:61">LATTICE_SHIFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

<cpp:endif pos:start="133:1" pos:end="133:6">#<cpp:directive pos:start="133:2" pos:end="133:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></for>



    <expr_stmt pos:start="139:5" pos:end="139:19"><expr pos:start="139:5" pos:end="139:18"><call pos:start="139:5" pos:end="139:18"><name pos:start="139:5" pos:end="139:11">av_free</name><argument_list pos:start="139:12" pos:end="139:18">(<argument pos:start="139:13" pos:end="139:17"><expr pos:start="139:13" pos:end="139:17"><name pos:start="139:13" pos:end="139:17">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
