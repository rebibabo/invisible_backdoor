<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10770.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:28"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:23">av_always_inline</name> <name pos:start="1:25" pos:end="1:28">void</name></type> <name pos:start="1:30" pos:end="1:45">decode_dc_coeffs</name><parameter_list pos:start="1:46" pos:end="3:67">(<parameter pos:start="1:47" pos:end="1:63"><decl pos:start="1:47" pos:end="1:63"><type pos:start="1:47" pos:end="1:63"><name pos:start="1:47" pos:end="1:59">GetBitContext</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:63">gb</name></decl></parameter>, <parameter pos:start="1:66" pos:end="1:77"><decl pos:start="1:66" pos:end="1:77"><type pos:start="1:66" pos:end="1:77"><name pos:start="1:66" pos:end="1:72">DCTELEM</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:77">out</name></decl></parameter>,

                                              <parameter pos:start="3:47" pos:end="3:66"><decl pos:start="3:47" pos:end="3:66"><type pos:start="3:47" pos:end="3:66"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:66">blocks_per_slice</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="49:1">{<block_content pos:start="7:5" pos:end="47:25">

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">DCTELEM</name></type> <name pos:start="7:13" pos:end="7:19">prev_dc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">code</name></decl>, <decl pos:start="9:15" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:15">i</name></decl>, <decl pos:start="9:18" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:21">sign</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:24"><expr pos:start="13:5" pos:end="13:23"><call pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:15">OPEN_READER</name><argument_list pos:start="13:16" pos:end="13:23">(<argument pos:start="13:17" pos:end="13:18"><expr pos:start="13:17" pos:end="13:18"><name pos:start="13:17" pos:end="13:18">re</name></expr></argument>, <argument pos:start="13:21" pos:end="13:22"><expr pos:start="13:21" pos:end="13:22"><name pos:start="13:21" pos:end="13:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:39"><expr pos:start="17:5" pos:end="17:38"><call pos:start="17:5" pos:end="17:38"><name pos:start="17:5" pos:end="17:19">DECODE_CODEWORD</name><argument_list pos:start="17:20" pos:end="17:38">(<argument pos:start="17:21" pos:end="17:24"><expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">code</name></expr></argument>, <argument pos:start="17:27" pos:end="17:37"><expr pos:start="17:27" pos:end="17:37"><name pos:start="17:27" pos:end="17:37">FIRST_DC_CB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:29"><expr pos:start="19:5" pos:end="19:28"><name pos:start="19:5" pos:end="19:11">prev_dc</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:28"><name pos:start="19:15" pos:end="19:22">TOSIGNED</name><argument_list pos:start="19:23" pos:end="19:28">(<argument pos:start="19:24" pos:end="19:27"><expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:21"><expr pos:start="21:5" pos:end="21:20"><name pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:7">out</name><index pos:start="21:8" pos:end="21:10">[<expr pos:start="21:9" pos:end="21:9"><literal type="number" pos:start="21:9" pos:end="21:9">0</literal></expr>]</index></name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:20">prev_dc</name></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:14"><expr pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:7">out</name> <operator pos:start="25:9" pos:end="25:10">+=</operator> <literal type="number" pos:start="25:12" pos:end="25:13">64</literal></expr>;</expr_stmt> <comment type="line" pos:start="25:16" pos:end="25:45">// dc coeff for the next block</comment>



    <expr_stmt pos:start="29:5" pos:end="29:13"><expr pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:8">code</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <literal type="number" pos:start="29:12" pos:end="29:12">5</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:13"><expr pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:8">sign</name> <operator pos:start="31:10" pos:end="31:10">=</operator> <literal type="number" pos:start="31:12" pos:end="31:12">0</literal></expr>;</expr_stmt>

    <for pos:start="33:5" pos:end="45:5">for <control pos:start="33:9" pos:end="33:53">(<init pos:start="33:10" pos:end="33:15"><expr pos:start="33:10" pos:end="33:14"><name pos:start="33:10" pos:end="33:10">i</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <literal type="number" pos:start="33:14" pos:end="33:14">1</literal></expr>;</init> <condition pos:start="33:17" pos:end="33:37"><expr pos:start="33:17" pos:end="33:36"><name pos:start="33:17" pos:end="33:17">i</name> <operator pos:start="33:19" pos:end="33:19">&lt;</operator> <name pos:start="33:21" pos:end="33:36">blocks_per_slice</name></expr>;</condition> <incr pos:start="33:39" pos:end="33:52"><expr pos:start="33:39" pos:end="33:41"><name pos:start="33:39" pos:end="33:39">i</name><operator pos:start="33:40" pos:end="33:41">++</operator></expr><operator pos:start="33:42" pos:end="33:42">,</operator> <expr pos:start="33:44" pos:end="33:52"><name pos:start="33:44" pos:end="33:46">out</name> <operator pos:start="33:48" pos:end="33:49">+=</operator> <literal type="number" pos:start="33:51" pos:end="33:52">64</literal></expr></incr>)</control> <block pos:start="33:55" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:25">

        <expr_stmt pos:start="35:9" pos:end="35:59"><expr pos:start="35:9" pos:end="35:58"><call pos:start="35:9" pos:end="35:58"><name pos:start="35:9" pos:end="35:23">DECODE_CODEWORD</name><argument_list pos:start="35:24" pos:end="35:58">(<argument pos:start="35:25" pos:end="35:28"><expr pos:start="35:25" pos:end="35:28"><name pos:start="35:25" pos:end="35:28">code</name></expr></argument>, <argument pos:start="35:31" pos:end="35:57"><expr pos:start="35:31" pos:end="35:57"><name pos:start="35:31" pos:end="35:57"><name pos:start="35:31" pos:end="35:41">dc_codebook</name><index pos:start="35:42" pos:end="35:57">[<expr pos:start="35:43" pos:end="35:56"><call pos:start="35:43" pos:end="35:56"><name pos:start="35:43" pos:end="35:47">FFMIN</name><argument_list pos:start="35:48" pos:end="35:56">(<argument pos:start="35:49" pos:end="35:52"><expr pos:start="35:49" pos:end="35:52"><name pos:start="35:49" pos:end="35:52">code</name></expr></argument>, <argument pos:start="35:55" pos:end="35:55"><expr pos:start="35:55" pos:end="35:55"><literal type="number" pos:start="35:55" pos:end="35:55">6</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="39:27"><if pos:start="37:9" pos:end="37:37">if<condition pos:start="37:11" pos:end="37:16">(<expr pos:start="37:12" pos:end="37:15"><name pos:start="37:12" pos:end="37:15">code</name></expr>)</condition><block type="pseudo" pos:start="37:18" pos:end="37:37"><block_content pos:start="37:18" pos:end="37:37"> <expr_stmt pos:start="37:18" pos:end="37:37"><expr pos:start="37:18" pos:end="37:36"><name pos:start="37:18" pos:end="37:21">sign</name> <operator pos:start="37:23" pos:end="37:24">^=</operator> <operator pos:start="37:26" pos:end="37:26">-</operator><operator pos:start="37:27" pos:end="37:27">(</operator><name pos:start="37:28" pos:end="37:31">code</name> <operator pos:start="37:33" pos:end="37:33">&amp;</operator> <literal type="number" pos:start="37:35" pos:end="37:35">1</literal><operator pos:start="37:36" pos:end="37:36">)</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="39:9" pos:end="39:27">else<block type="pseudo" pos:start="39:18" pos:end="39:27"><block_content pos:start="39:18" pos:end="39:27">     <expr_stmt pos:start="39:18" pos:end="39:27"><expr pos:start="39:18" pos:end="39:26"><name pos:start="39:18" pos:end="39:21">sign</name>  <operator pos:start="39:24" pos:end="39:24">=</operator> <literal type="number" pos:start="39:26" pos:end="39:26">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:53"><expr pos:start="41:9" pos:end="41:52"><name pos:start="41:9" pos:end="41:15">prev_dc</name> <operator pos:start="41:17" pos:end="41:18">+=</operator> <operator pos:start="41:20" pos:end="41:20">(</operator><operator pos:start="41:21" pos:end="41:21">(</operator><operator pos:start="41:22" pos:end="41:22">(</operator><name pos:start="41:23" pos:end="41:26">code</name> <operator pos:start="41:28" pos:end="41:28">+</operator> <literal type="number" pos:start="41:30" pos:end="41:30">1</literal><operator pos:start="41:31" pos:end="41:31">)</operator> <operator pos:start="41:33" pos:end="41:34">&gt;&gt;</operator> <literal type="number" pos:start="41:36" pos:end="41:36">1</literal><operator pos:start="41:37" pos:end="41:37">)</operator> <operator pos:start="41:39" pos:end="41:39">^</operator> <name pos:start="41:41" pos:end="41:44">sign</name><operator pos:start="41:45" pos:end="41:45">)</operator> <operator pos:start="41:47" pos:end="41:47">-</operator> <name pos:start="41:49" pos:end="41:52">sign</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:25"><expr pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:11">out</name><index pos:start="43:12" pos:end="43:14">[<expr pos:start="43:13" pos:end="43:13"><literal type="number" pos:start="43:13" pos:end="43:13">0</literal></expr>]</index></name> <operator pos:start="43:16" pos:end="43:16">=</operator> <name pos:start="43:18" pos:end="43:24">prev_dc</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="47:5" pos:end="47:25"><expr pos:start="47:5" pos:end="47:24"><call pos:start="47:5" pos:end="47:24"><name pos:start="47:5" pos:end="47:16">CLOSE_READER</name><argument_list pos:start="47:17" pos:end="47:24">(<argument pos:start="47:18" pos:end="47:19"><expr pos:start="47:18" pos:end="47:19"><name pos:start="47:18" pos:end="47:19">re</name></expr></argument>, <argument pos:start="47:22" pos:end="47:23"><expr pos:start="47:22" pos:end="47:23"><name pos:start="47:22" pos:end="47:23">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
