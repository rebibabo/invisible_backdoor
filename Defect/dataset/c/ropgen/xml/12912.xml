<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12912.c" pos:tabs="8"><function pos:start="1:1" pos:end="545:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">mss2_decode_frame</name><parameter_list pos:start="1:29" pos:end="3:45">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:62"><decl pos:start="1:53" pos:end="1:62"><type pos:start="1:53" pos:end="1:62"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:78"><decl pos:start="1:65" pos:end="1:78"><type pos:start="1:65" pos:end="1:78"><name pos:start="1:65" pos:end="1:67">int</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:78">got_frame</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:44"><decl pos:start="3:30" pos:end="3:44"><type pos:start="3:30" pos:end="3:44"><name pos:start="3:30" pos:end="3:37">AVPacket</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="545:1">{<block_content pos:start="7:5" pos:end="543:23">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name>       <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">MSS2Context</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">ctx</name> <init pos:start="11:22" pos:end="11:39">= <expr pos:start="11:24" pos:end="11:39"><name pos:start="11:24" pos:end="11:39"><name pos:start="11:24" pos:end="11:28">avctx</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MSS12Context</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:19">c</name>  <init pos:start="13:22" pos:end="13:30">= <expr pos:start="13:24" pos:end="13:30"><operator pos:start="13:24" pos:end="13:24">&amp;</operator><name pos:start="13:25" pos:end="13:30"><name pos:start="13:25" pos:end="13:27">ctx</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:30">c</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">AVFrame</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:18">frame</name>   <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:17">GetBitContext</name></type> <name pos:start="17:19" pos:end="17:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:18">GetByteContext</name></type> <name pos:start="19:20" pos:end="19:21">gB</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:14">ArithCoder</name></type> <name pos:start="21:16" pos:end="21:21">acoder</name></decl>;</decl_stmt>



    <decl_stmt pos:start="25:5" pos:end="25:56"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:16">keyframe</name></decl>, <decl pos:start="25:19" pos:end="25:26"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:19" pos:end="25:26">has_wmv9</name></decl>, <decl pos:start="25:29" pos:end="25:34"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:29" pos:end="25:34">has_mv</name></decl>, <decl pos:start="25:37" pos:end="25:42"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:37" pos:end="25:42">is_rle</name></decl>, <decl pos:start="25:45" pos:end="25:50"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:45" pos:end="25:50">is_555</name></decl>, <decl pos:start="25:53" pos:end="25:55"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:53" pos:end="25:55">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="29:5" pos:end="29:49"><decl pos:start="29:5" pos:end="29:44"><type pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:13">Rectangle</name></type> <name pos:start="29:15" pos:end="29:44"><name pos:start="29:15" pos:end="29:23">wmv9rects</name><index pos:start="29:24" pos:end="29:44">[<expr pos:start="29:25" pos:end="29:43"><name pos:start="29:25" pos:end="29:43">MAX_WMV9_RECTANGLES</name></expr>]</index></name></decl>, <decl pos:start="29:47" pos:end="29:48"><type ref="prev" pos:start="29:5" pos:end="29:13"><modifier pos:start="29:47" pos:end="29:47">*</modifier></type><name pos:start="29:48" pos:end="29:48">r</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:67"><decl pos:start="31:5" pos:end="31:22"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:18">used_rects</name> <init pos:start="31:20" pos:end="31:22">= <expr pos:start="31:22" pos:end="31:22"><literal type="number" pos:start="31:22" pos:end="31:22">0</literal></expr></init></decl>, <decl pos:start="31:25" pos:end="31:25"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:25" pos:end="31:25">i</name></decl>, <decl pos:start="31:28" pos:end="31:44"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:28" pos:end="31:40">implicit_rect</name> <init pos:start="31:42" pos:end="31:44">= <expr pos:start="31:44" pos:end="31:44"><literal type="number" pos:start="31:44" pos:end="31:44">0</literal></expr></init></decl>, <decl pos:start="31:47" pos:end="31:66"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:47" pos:end="31:55">av_uninit</name><argument_list pos:start="31:56" pos:end="31:66">(<argument pos:start="31:57" pos:end="31:65"><expr pos:start="31:57" pos:end="31:65"><name pos:start="31:57" pos:end="31:65">wmv9_mask</name></expr></argument>)</argument_list></decl>;</decl_stmt>



    <if_stmt pos:start="35:5" pos:end="37:19"><if pos:start="35:5" pos:end="37:19">if <condition pos:start="35:8" pos:end="35:55">(<expr pos:start="35:9" pos:end="35:54"><operator pos:start="35:9" pos:end="35:9">(</operator><name pos:start="35:10" pos:end="35:12">ret</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:49"><name pos:start="35:16" pos:end="35:29">init_get_bits8</name><argument_list pos:start="35:30" pos:end="35:49">(<argument pos:start="35:31" pos:end="35:33"><expr pos:start="35:31" pos:end="35:33"><operator pos:start="35:31" pos:end="35:31">&amp;</operator><name pos:start="35:32" pos:end="35:33">gb</name></expr></argument>, <argument pos:start="35:36" pos:end="35:38"><expr pos:start="35:36" pos:end="35:38"><name pos:start="35:36" pos:end="35:38">buf</name></expr></argument>, <argument pos:start="35:41" pos:end="35:48"><expr pos:start="35:41" pos:end="35:48"><name pos:start="35:41" pos:end="35:48">buf_size</name></expr></argument>)</argument_list></call><operator pos:start="35:50" pos:end="35:50">)</operator> <operator pos:start="35:52" pos:end="35:52">&lt;</operator> <literal type="number" pos:start="35:54" pos:end="35:54">0</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:19"><block_content pos:start="37:9" pos:end="37:19">

        <return pos:start="37:9" pos:end="37:19">return <expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="43:26"><if pos:start="41:5" pos:end="43:26">if <condition pos:start="41:8" pos:end="41:34">(<expr pos:start="41:9" pos:end="41:33"><name pos:start="41:9" pos:end="41:16">keyframe</name> <operator pos:start="41:18" pos:end="41:18">=</operator> <call pos:start="41:20" pos:end="41:33"><name pos:start="41:20" pos:end="41:28">get_bits1</name><argument_list pos:start="41:29" pos:end="41:33">(<argument pos:start="41:30" pos:end="41:32"><expr pos:start="41:30" pos:end="41:32"><operator pos:start="41:30" pos:end="41:30">&amp;</operator><name pos:start="41:31" pos:end="41:32">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:26"><block_content pos:start="43:9" pos:end="43:26">

        <expr_stmt pos:start="43:9" pos:end="43:26"><expr pos:start="43:9" pos:end="43:25"><call pos:start="43:9" pos:end="43:25"><name pos:start="43:9" pos:end="43:17">skip_bits</name><argument_list pos:start="43:18" pos:end="43:25">(<argument pos:start="43:19" pos:end="43:21"><expr pos:start="43:19" pos:end="43:21"><operator pos:start="43:19" pos:end="43:19">&amp;</operator><name pos:start="43:20" pos:end="43:21">gb</name></expr></argument>, <argument pos:start="43:24" pos:end="43:24"><expr pos:start="43:24" pos:end="43:24"><literal type="number" pos:start="43:24" pos:end="43:24">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:30"><expr pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:12">has_wmv9</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:29"><name pos:start="45:16" pos:end="45:24">get_bits1</name><argument_list pos:start="45:25" pos:end="45:29">(<argument pos:start="45:26" pos:end="45:28"><expr pos:start="45:26" pos:end="45:28"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:28">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:45"><expr pos:start="47:5" pos:end="47:44"><name pos:start="47:5" pos:end="47:10">has_mv</name>   <operator pos:start="47:14" pos:end="47:14">=</operator> <ternary pos:start="47:16" pos:end="47:44"><condition pos:start="47:16" pos:end="47:25"><expr pos:start="47:16" pos:end="47:23"><name pos:start="47:16" pos:end="47:23">keyframe</name></expr> ?</condition><then pos:start="47:27" pos:end="47:27"> <expr pos:start="47:27" pos:end="47:27"><literal type="number" pos:start="47:27" pos:end="47:27">0</literal></expr> </then><else pos:start="47:29" pos:end="47:44">: <expr pos:start="47:31" pos:end="47:44"><call pos:start="47:31" pos:end="47:44"><name pos:start="47:31" pos:end="47:39">get_bits1</name><argument_list pos:start="47:40" pos:end="47:44">(<argument pos:start="47:41" pos:end="47:43"><expr pos:start="47:41" pos:end="47:43"><operator pos:start="47:41" pos:end="47:41">&amp;</operator><name pos:start="47:42" pos:end="47:43">gb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:30"><expr pos:start="49:5" pos:end="49:29"><name pos:start="49:5" pos:end="49:10">is_rle</name>   <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="49:29"><name pos:start="49:16" pos:end="49:24">get_bits1</name><argument_list pos:start="49:25" pos:end="49:29">(<argument pos:start="49:26" pos:end="49:28"><expr pos:start="49:26" pos:end="49:28"><operator pos:start="49:26" pos:end="49:26">&amp;</operator><name pos:start="49:27" pos:end="49:28">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:40"><expr pos:start="51:5" pos:end="51:39"><name pos:start="51:5" pos:end="51:10">is_555</name>   <operator pos:start="51:14" pos:end="51:14">=</operator> <name pos:start="51:16" pos:end="51:21">is_rle</name> <operator pos:start="51:23" pos:end="51:24">&amp;&amp;</operator> <call pos:start="51:26" pos:end="51:39"><name pos:start="51:26" pos:end="51:34">get_bits1</name><argument_list pos:start="51:35" pos:end="51:39">(<argument pos:start="51:36" pos:end="51:38"><expr pos:start="51:36" pos:end="51:38"><operator pos:start="51:36" pos:end="51:36">&amp;</operator><name pos:start="51:37" pos:end="51:38">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="85:44"><if pos:start="53:5" pos:end="55:45">if <condition pos:start="53:8" pos:end="53:27">(<expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:9">c</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:22">slice_split</name></name> <operator pos:start="53:24" pos:end="53:24">&gt;</operator> <literal type="number" pos:start="53:26" pos:end="53:26">0</literal></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:45"><block_content pos:start="55:9" pos:end="55:45">

        <expr_stmt pos:start="55:9" pos:end="55:45"><expr pos:start="55:9" pos:end="55:44"><name pos:start="55:9" pos:end="55:27"><name pos:start="55:9" pos:end="55:11">ctx</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:27">split_position</name></name> <operator pos:start="55:29" pos:end="55:29">=</operator> <name pos:start="55:31" pos:end="55:44"><name pos:start="55:31" pos:end="55:31">c</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:44">slice_split</name></name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="57:5" pos:end="83:5">else if <condition pos:start="57:13" pos:end="57:32">(<expr pos:start="57:14" pos:end="57:31"><name pos:start="57:14" pos:end="57:27"><name pos:start="57:14" pos:end="57:14">c</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:27">slice_split</name></name> <operator pos:start="57:29" pos:end="57:29">&lt;</operator> <literal type="number" pos:start="57:31" pos:end="57:31">0</literal></expr>)</condition> <block pos:start="57:34" pos:end="83:5">{<block_content pos:start="59:9" pos:end="81:9">

        <if_stmt pos:start="59:9" pos:end="81:9"><if pos:start="59:9" pos:end="75:9">if <condition pos:start="59:12" pos:end="59:27">(<expr pos:start="59:13" pos:end="59:26"><call pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:21">get_bits1</name><argument_list pos:start="59:22" pos:end="59:26">(<argument pos:start="59:23" pos:end="59:25"><expr pos:start="59:23" pos:end="59:25"><operator pos:start="59:23" pos:end="59:23">&amp;</operator><name pos:start="59:24" pos:end="59:25">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:29" pos:end="75:9">{<block_content pos:start="61:13" pos:end="73:60">

            <if_stmt pos:start="61:13" pos:end="73:60"><if pos:start="61:13" pos:end="71:13">if <condition pos:start="61:16" pos:end="61:31">(<expr pos:start="61:17" pos:end="61:30"><call pos:start="61:17" pos:end="61:30"><name pos:start="61:17" pos:end="61:25">get_bits1</name><argument_list pos:start="61:26" pos:end="61:30">(<argument pos:start="61:27" pos:end="61:29"><expr pos:start="61:27" pos:end="61:29"><operator pos:start="61:27" pos:end="61:27">&amp;</operator><name pos:start="61:28" pos:end="61:29">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:33" pos:end="71:13">{<block_content pos:start="63:17" pos:end="69:60">

                <if_stmt pos:start="63:17" pos:end="69:60"><if pos:start="63:17" pos:end="65:60">if <condition pos:start="63:20" pos:end="63:35">(<expr pos:start="63:21" pos:end="63:34"><call pos:start="63:21" pos:end="63:34"><name pos:start="63:21" pos:end="63:29">get_bits1</name><argument_list pos:start="63:30" pos:end="63:34">(<argument pos:start="63:31" pos:end="63:33"><expr pos:start="63:31" pos:end="63:33"><operator pos:start="63:31" pos:end="63:31">&amp;</operator><name pos:start="63:32" pos:end="63:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="65:21" pos:end="65:60"><block_content pos:start="65:21" pos:end="65:60">

                    <expr_stmt pos:start="65:21" pos:end="65:60"><expr pos:start="65:21" pos:end="65:59"><name pos:start="65:21" pos:end="65:39"><name pos:start="65:21" pos:end="65:23">ctx</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:39">split_position</name></name> <operator pos:start="65:41" pos:end="65:41">=</operator> <call pos:start="65:43" pos:end="65:59"><name pos:start="65:43" pos:end="65:50">get_bits</name><argument_list pos:start="65:51" pos:end="65:59">(<argument pos:start="65:52" pos:end="65:54"><expr pos:start="65:52" pos:end="65:54"><operator pos:start="65:52" pos:end="65:52">&amp;</operator><name pos:start="65:53" pos:end="65:54">gb</name></expr></argument>, <argument pos:start="65:57" pos:end="65:58"><expr pos:start="65:57" pos:end="65:58"><literal type="number" pos:start="65:57" pos:end="65:58">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="67:17" pos:end="69:60">else<block type="pseudo" pos:start="69:21" pos:end="69:60"><block_content pos:start="69:21" pos:end="69:60">

                    <expr_stmt pos:start="69:21" pos:end="69:60"><expr pos:start="69:21" pos:end="69:59"><name pos:start="69:21" pos:end="69:39"><name pos:start="69:21" pos:end="69:23">ctx</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:39">split_position</name></name> <operator pos:start="69:41" pos:end="69:41">=</operator> <call pos:start="69:43" pos:end="69:59"><name pos:start="69:43" pos:end="69:50">get_bits</name><argument_list pos:start="69:51" pos:end="69:59">(<argument pos:start="69:52" pos:end="69:54"><expr pos:start="69:52" pos:end="69:54"><operator pos:start="69:52" pos:end="69:52">&amp;</operator><name pos:start="69:53" pos:end="69:54">gb</name></expr></argument>, <argument pos:start="69:57" pos:end="69:58"><expr pos:start="69:57" pos:end="69:58"><literal type="number" pos:start="69:57" pos:end="69:58">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="71:15" pos:end="73:60">else<block type="pseudo" pos:start="73:17" pos:end="73:60"><block_content pos:start="73:17" pos:end="73:60">

                <expr_stmt pos:start="73:17" pos:end="73:60"><expr pos:start="73:17" pos:end="73:59"><name pos:start="73:17" pos:end="73:35"><name pos:start="73:17" pos:end="73:19">ctx</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:35">split_position</name></name> <operator pos:start="73:37" pos:end="73:37">=</operator> <call pos:start="73:39" pos:end="73:54"><name pos:start="73:39" pos:end="73:46">get_bits</name><argument_list pos:start="73:47" pos:end="73:54">(<argument pos:start="73:48" pos:end="73:50"><expr pos:start="73:48" pos:end="73:50"><operator pos:start="73:48" pos:end="73:48">&amp;</operator><name pos:start="73:49" pos:end="73:50">gb</name></expr></argument>, <argument pos:start="73:53" pos:end="73:53"><expr pos:start="73:53" pos:end="73:53"><literal type="number" pos:start="73:53" pos:end="73:53">8</literal></expr></argument>)</argument_list></call> <operator pos:start="73:56" pos:end="73:57">&lt;&lt;</operator> <literal type="number" pos:start="73:59" pos:end="73:59">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="75:11" pos:end="81:9">else <block pos:start="75:16" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:56">

            <if_stmt pos:start="77:13" pos:end="79:56"><if pos:start="77:13" pos:end="79:56">if <condition pos:start="77:16" pos:end="77:25">(<expr pos:start="77:17" pos:end="77:24"><name pos:start="77:17" pos:end="77:24">keyframe</name></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:56"><block_content pos:start="79:17" pos:end="79:56">

                <expr_stmt pos:start="79:17" pos:end="79:56"><expr pos:start="79:17" pos:end="79:55"><name pos:start="79:17" pos:end="79:35"><name pos:start="79:17" pos:end="79:19">ctx</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:35">split_position</name></name> <operator pos:start="79:37" pos:end="79:37">=</operator> <name pos:start="79:39" pos:end="79:51"><name pos:start="79:39" pos:end="79:43">avctx</name><operator pos:start="79:44" pos:end="79:45">-&gt;</operator><name pos:start="79:46" pos:end="79:51">height</name></name> <operator pos:start="79:53" pos:end="79:53">/</operator> <literal type="number" pos:start="79:55" pos:end="79:55">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="83:7" pos:end="85:44">else<block type="pseudo" pos:start="85:9" pos:end="85:44"><block_content pos:start="85:9" pos:end="85:44">

        <expr_stmt pos:start="85:9" pos:end="85:44"><expr pos:start="85:9" pos:end="85:43"><name pos:start="85:9" pos:end="85:27"><name pos:start="85:9" pos:end="85:11">ctx</name><operator pos:start="85:12" pos:end="85:13">-&gt;</operator><name pos:start="85:14" pos:end="85:27">split_position</name></name> <operator pos:start="85:29" pos:end="85:29">=</operator> <name pos:start="85:31" pos:end="85:43"><name pos:start="85:31" pos:end="85:35">avctx</name><operator pos:start="85:36" pos:end="85:37">-&gt;</operator><name pos:start="85:38" pos:end="85:43">height</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="89:5" pos:end="93:35"><if pos:start="89:5" pos:end="93:35">if <condition pos:start="89:8" pos:end="91:68">(<expr pos:start="89:9" pos:end="91:67"><name pos:start="89:9" pos:end="89:22"><name pos:start="89:9" pos:end="89:9">c</name><operator pos:start="89:10" pos:end="89:11">-&gt;</operator><name pos:start="89:12" pos:end="89:22">slice_split</name></name> <operator pos:start="89:24" pos:end="89:25">&amp;&amp;</operator> <operator pos:start="89:27" pos:end="89:27">(</operator><name pos:start="89:28" pos:end="89:46"><name pos:start="89:28" pos:end="89:30">ctx</name><operator pos:start="89:31" pos:end="89:32">-&gt;</operator><name pos:start="89:33" pos:end="89:46">split_position</name></name> <operator pos:start="89:48" pos:end="89:48">&lt;</operator> <literal type="number" pos:start="89:50" pos:end="89:52">1</literal> <operator pos:start="89:52" pos:end="89:52">-</operator> <name pos:start="89:54" pos:end="89:59">is_555</name> <operator pos:start="89:61" pos:end="89:62">||</operator>

                           <name pos:start="91:28" pos:end="91:46"><name pos:start="91:28" pos:end="91:30">ctx</name><operator pos:start="91:31" pos:end="91:32">-&gt;</operator><name pos:start="91:33" pos:end="91:46">split_position</name></name> <operator pos:start="91:48" pos:end="91:48">&gt;</operator> <name pos:start="91:50" pos:end="91:62"><name pos:start="91:50" pos:end="91:54">avctx</name><operator pos:start="91:55" pos:end="91:56">-&gt;</operator><name pos:start="91:57" pos:end="91:62">height</name></name> <operator pos:start="91:64" pos:end="91:64">-</operator> <literal type="number" pos:start="91:66" pos:end="91:66">1</literal><operator pos:start="91:67" pos:end="91:67">)</operator></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:35"><block_content pos:start="93:9" pos:end="93:35">

        <return pos:start="93:9" pos:end="93:35">return <expr pos:start="93:16" pos:end="93:34"><name pos:start="93:16" pos:end="93:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:24"><expr pos:start="97:5" pos:end="97:23"><call pos:start="97:5" pos:end="97:23"><name pos:start="97:5" pos:end="97:18">align_get_bits</name><argument_list pos:start="97:19" pos:end="97:23">(<argument pos:start="97:20" pos:end="97:22"><expr pos:start="97:20" pos:end="97:22"><operator pos:start="97:20" pos:end="97:20">&amp;</operator><name pos:start="97:21" pos:end="97:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:41"><expr pos:start="99:5" pos:end="99:40"><name pos:start="99:5" pos:end="99:7">buf</name>      <operator pos:start="99:14" pos:end="99:15">+=</operator> <call pos:start="99:17" pos:end="99:35"><name pos:start="99:17" pos:end="99:30">get_bits_count</name><argument_list pos:start="99:31" pos:end="99:35">(<argument pos:start="99:32" pos:end="99:34"><expr pos:start="99:32" pos:end="99:34"><operator pos:start="99:32" pos:end="99:32">&amp;</operator><name pos:start="99:33" pos:end="99:34">gb</name></expr></argument>)</argument_list></call> <operator pos:start="99:37" pos:end="99:38">&gt;&gt;</operator> <literal type="number" pos:start="99:40" pos:end="99:40">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:41"><expr pos:start="101:5" pos:end="101:40"><name pos:start="101:5" pos:end="101:12">buf_size</name> <operator pos:start="101:14" pos:end="101:15">-=</operator> <call pos:start="101:17" pos:end="101:35"><name pos:start="101:17" pos:end="101:30">get_bits_count</name><argument_list pos:start="101:31" pos:end="101:35">(<argument pos:start="101:32" pos:end="101:34"><expr pos:start="101:32" pos:end="101:34"><operator pos:start="101:32" pos:end="101:32">&amp;</operator><name pos:start="101:33" pos:end="101:34">gb</name></expr></argument>)</argument_list></call> <operator pos:start="101:37" pos:end="101:38">&gt;&gt;</operator> <literal type="number" pos:start="101:40" pos:end="101:40">3</literal></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="107:35"><if pos:start="105:5" pos:end="107:35">if <condition pos:start="105:8" pos:end="105:21">(<expr pos:start="105:9" pos:end="105:20"><name pos:start="105:9" pos:end="105:16">buf_size</name> <operator pos:start="105:18" pos:end="105:18">&lt;</operator> <literal type="number" pos:start="105:20" pos:end="105:20">1</literal></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="107:35"><block_content pos:start="107:9" pos:end="107:35">

        <return pos:start="107:9" pos:end="107:35">return <expr pos:start="107:16" pos:end="107:34"><name pos:start="107:16" pos:end="107:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="113:35"><if pos:start="111:5" pos:end="113:35">if <condition pos:start="111:8" pos:end="111:80">(<expr pos:start="111:9" pos:end="111:79"><name pos:start="111:9" pos:end="111:14">is_555</name> <operator pos:start="111:16" pos:end="111:17">&amp;&amp;</operator> <operator pos:start="111:19" pos:end="111:19">(</operator><name pos:start="111:20" pos:end="111:27">has_wmv9</name> <operator pos:start="111:29" pos:end="111:30">||</operator> <name pos:start="111:32" pos:end="111:37">has_mv</name> <operator pos:start="111:39" pos:end="111:40">||</operator> <name pos:start="111:42" pos:end="111:55"><name pos:start="111:42" pos:end="111:42">c</name><operator pos:start="111:43" pos:end="111:44">-&gt;</operator><name pos:start="111:45" pos:end="111:55">slice_split</name></name> <operator pos:start="111:57" pos:end="111:58">&amp;&amp;</operator> <name pos:start="111:60" pos:end="111:78"><name pos:start="111:60" pos:end="111:62">ctx</name><operator pos:start="111:63" pos:end="111:64">-&gt;</operator><name pos:start="111:65" pos:end="111:78">split_position</name></name><operator pos:start="111:79" pos:end="111:79">)</operator></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:35"><block_content pos:start="113:9" pos:end="113:35">

        <return pos:start="113:9" pos:end="113:35">return <expr pos:start="113:16" pos:end="113:34"><name pos:start="113:16" pos:end="113:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="117:67"><expr pos:start="117:5" pos:end="117:66"><name pos:start="117:5" pos:end="117:18"><name pos:start="117:5" pos:end="117:9">avctx</name><operator pos:start="117:10" pos:end="117:11">-&gt;</operator><name pos:start="117:12" pos:end="117:18">pix_fmt</name></name> <operator pos:start="117:20" pos:end="117:20">=</operator> <ternary pos:start="117:22" pos:end="117:66"><condition pos:start="117:22" pos:end="117:29"><expr pos:start="117:22" pos:end="117:27"><name pos:start="117:22" pos:end="117:27">is_555</name></expr> ?</condition><then pos:start="117:31" pos:end="117:47"> <expr pos:start="117:31" pos:end="117:47"><name pos:start="117:31" pos:end="117:47">AV_PIX_FMT_RGB555</name></expr> </then><else pos:start="117:49" pos:end="117:66">: <expr pos:start="117:51" pos:end="117:66"><name pos:start="117:51" pos:end="117:66">AV_PIX_FMT_RGB24</name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="121:38"><if pos:start="119:5" pos:end="121:38">if <condition pos:start="119:8" pos:end="119:48">(<expr pos:start="119:9" pos:end="119:47"><name pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:11">ctx</name><operator pos:start="119:12" pos:end="119:13">-&gt;</operator><name pos:start="119:14" pos:end="119:21">last_pic</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:29">format</name></name> <operator pos:start="119:31" pos:end="119:32">!=</operator> <name pos:start="119:34" pos:end="119:47"><name pos:start="119:34" pos:end="119:38">avctx</name><operator pos:start="119:39" pos:end="119:40">-&gt;</operator><name pos:start="119:41" pos:end="119:47">pix_fmt</name></name></expr>)</condition><block type="pseudo" pos:start="121:9" pos:end="121:38"><block_content pos:start="121:9" pos:end="121:38">

        <expr_stmt pos:start="121:9" pos:end="121:38"><expr pos:start="121:9" pos:end="121:37"><call pos:start="121:9" pos:end="121:37"><name pos:start="121:9" pos:end="121:22">av_frame_unref</name><argument_list pos:start="121:23" pos:end="121:37">(<argument pos:start="121:24" pos:end="121:36"><expr pos:start="121:24" pos:end="121:36"><name pos:start="121:24" pos:end="121:36"><name pos:start="121:24" pos:end="121:26">ctx</name><operator pos:start="121:27" pos:end="121:28">-&gt;</operator><name pos:start="121:29" pos:end="121:36">last_pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="229:5"><if pos:start="125:5" pos:end="229:5">if <condition pos:start="125:8" pos:end="125:17">(<expr pos:start="125:9" pos:end="125:16"><name pos:start="125:9" pos:end="125:16">has_wmv9</name></expr>)</condition> <block pos:start="125:19" pos:end="229:5">{<block_content pos:start="127:9" pos:end="227:39">

        <expr_stmt pos:start="127:9" pos:end="127:62"><expr pos:start="127:9" pos:end="127:61"><call pos:start="127:9" pos:end="127:61"><name pos:start="127:9" pos:end="127:24">bytestream2_init</name><argument_list pos:start="127:25" pos:end="127:61">(<argument pos:start="127:26" pos:end="127:28"><expr pos:start="127:26" pos:end="127:28"><operator pos:start="127:26" pos:end="127:26">&amp;</operator><name pos:start="127:27" pos:end="127:28">gB</name></expr></argument>, <argument pos:start="127:31" pos:end="127:33"><expr pos:start="127:31" pos:end="127:33"><name pos:start="127:31" pos:end="127:33">buf</name></expr></argument>, <argument pos:start="127:36" pos:end="127:60"><expr pos:start="127:36" pos:end="127:60"><name pos:start="127:36" pos:end="127:43">buf_size</name> <operator pos:start="127:45" pos:end="127:45">+</operator> <name pos:start="127:47" pos:end="127:60">ARITH2_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:34"><expr pos:start="129:9" pos:end="129:33"><call pos:start="129:9" pos:end="129:33"><name pos:start="129:9" pos:end="129:19">arith2_init</name><argument_list pos:start="129:20" pos:end="129:33">(<argument pos:start="129:21" pos:end="129:27"><expr pos:start="129:21" pos:end="129:27"><operator pos:start="129:21" pos:end="129:21">&amp;</operator><name pos:start="129:22" pos:end="129:27">acoder</name></expr></argument>, <argument pos:start="129:30" pos:end="129:32"><expr pos:start="129:30" pos:end="129:32"><operator pos:start="129:30" pos:end="129:30">&amp;</operator><name pos:start="129:31" pos:end="129:32">gB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="133:9" pos:end="133:49"><expr pos:start="133:9" pos:end="133:48"><name pos:start="133:9" pos:end="133:21">implicit_rect</name> <operator pos:start="133:23" pos:end="133:23">=</operator> <operator pos:start="133:25" pos:end="133:25">!</operator><call pos:start="133:26" pos:end="133:48"><name pos:start="133:26" pos:end="133:39">arith2_get_bit</name><argument_list pos:start="133:40" pos:end="133:48">(<argument pos:start="133:41" pos:end="133:47"><expr pos:start="133:41" pos:end="133:47"><operator pos:start="133:41" pos:end="133:41">&amp;</operator><name pos:start="133:42" pos:end="133:47">acoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="137:9" pos:end="165:9">while <condition pos:start="137:15" pos:end="137:39">(<expr pos:start="137:16" pos:end="137:38"><call pos:start="137:16" pos:end="137:38"><name pos:start="137:16" pos:end="137:29">arith2_get_bit</name><argument_list pos:start="137:30" pos:end="137:38">(<argument pos:start="137:31" pos:end="137:37"><expr pos:start="137:31" pos:end="137:37"><operator pos:start="137:31" pos:end="137:31">&amp;</operator><name pos:start="137:32" pos:end="137:37">acoder</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:41" pos:end="165:9">{<block_content pos:start="139:13" pos:end="163:25">

            <if_stmt pos:start="139:13" pos:end="141:43"><if pos:start="139:13" pos:end="141:43">if <condition pos:start="139:16" pos:end="139:50">(<expr pos:start="139:17" pos:end="139:49"><name pos:start="139:17" pos:end="139:26">used_rects</name> <operator pos:start="139:28" pos:end="139:29">==</operator> <name pos:start="139:31" pos:end="139:49">MAX_WMV9_RECTANGLES</name></expr>)</condition><block type="pseudo" pos:start="141:17" pos:end="141:43"><block_content pos:start="141:17" pos:end="141:43">

                <return pos:start="141:17" pos:end="141:43">return <expr pos:start="141:24" pos:end="141:42"><name pos:start="141:24" pos:end="141:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:39"><expr pos:start="143:13" pos:end="143:38"><name pos:start="143:13" pos:end="143:13">r</name> <operator pos:start="143:15" pos:end="143:15">=</operator> <operator pos:start="143:17" pos:end="143:17">&amp;</operator><name pos:start="143:18" pos:end="143:38"><name pos:start="143:18" pos:end="143:26">wmv9rects</name><index pos:start="143:27" pos:end="143:38">[<expr pos:start="143:28" pos:end="143:37"><name pos:start="143:28" pos:end="143:37">used_rects</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="145:13" pos:end="155:51"><if pos:start="145:13" pos:end="147:64">if <condition pos:start="145:16" pos:end="145:28">(<expr pos:start="145:17" pos:end="145:27"><operator pos:start="145:17" pos:end="145:17">!</operator><name pos:start="145:18" pos:end="145:27">used_rects</name></expr>)</condition><block type="pseudo" pos:start="147:17" pos:end="147:64"><block_content pos:start="147:17" pos:end="147:64">

                <expr_stmt pos:start="147:17" pos:end="147:64"><expr pos:start="147:17" pos:end="147:63"><name pos:start="147:17" pos:end="147:20"><name pos:start="147:17" pos:end="147:17">r</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:20">x</name></name> <operator pos:start="147:22" pos:end="147:22">=</operator> <call pos:start="147:24" pos:end="147:63"><name pos:start="147:24" pos:end="147:40">arith2_get_number</name><argument_list pos:start="147:41" pos:end="147:63">(<argument pos:start="147:42" pos:end="147:48"><expr pos:start="147:42" pos:end="147:48"><operator pos:start="147:42" pos:end="147:42">&amp;</operator><name pos:start="147:43" pos:end="147:48">acoder</name></expr></argument>, <argument pos:start="147:51" pos:end="147:62"><expr pos:start="147:51" pos:end="147:62"><name pos:start="147:51" pos:end="147:62"><name pos:start="147:51" pos:end="147:55">avctx</name><operator pos:start="147:56" pos:end="147:57">-&gt;</operator><name pos:start="147:58" pos:end="147:62">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="149:13" pos:end="155:51">else<block type="pseudo" pos:start="151:17" pos:end="155:51"><block_content pos:start="151:17" pos:end="155:51">

                <expr_stmt pos:start="151:17" pos:end="155:51"><expr pos:start="151:17" pos:end="155:50"><name pos:start="151:17" pos:end="151:20"><name pos:start="151:17" pos:end="151:17">r</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:20">x</name></name> <operator pos:start="151:22" pos:end="151:22">=</operator> <call pos:start="151:24" pos:end="153:69"><name pos:start="151:24" pos:end="151:40">arith2_get_number</name><argument_list pos:start="151:41" pos:end="153:69">(<argument pos:start="151:42" pos:end="151:48"><expr pos:start="151:42" pos:end="151:48"><operator pos:start="151:42" pos:end="151:42">&amp;</operator><name pos:start="151:43" pos:end="151:48">acoder</name></expr></argument>, <argument pos:start="151:51" pos:end="153:68"><expr pos:start="151:51" pos:end="153:68"><name pos:start="151:51" pos:end="151:62"><name pos:start="151:51" pos:end="151:55">avctx</name><operator pos:start="151:56" pos:end="151:57">-&gt;</operator><name pos:start="151:58" pos:end="151:62">width</name></name> <operator pos:start="151:64" pos:end="151:64">-</operator>

                                         <name pos:start="153:42" pos:end="153:66"><name pos:start="153:42" pos:end="153:50">wmv9rects</name><index pos:start="153:51" pos:end="153:66">[<expr pos:start="153:52" pos:end="153:65"><name pos:start="153:52" pos:end="153:61">used_rects</name> <operator pos:start="153:63" pos:end="153:63">-</operator> <literal type="number" pos:start="153:65" pos:end="153:65">1</literal></expr>]</index></name><operator pos:start="153:67" pos:end="153:67">.</operator><name pos:start="153:68" pos:end="153:68">x</name></expr></argument>)</argument_list></call> <operator pos:start="153:71" pos:end="153:71">+</operator>

                       <name pos:start="155:24" pos:end="155:48"><name pos:start="155:24" pos:end="155:32">wmv9rects</name><index pos:start="155:33" pos:end="155:48">[<expr pos:start="155:34" pos:end="155:47"><name pos:start="155:34" pos:end="155:43">used_rects</name> <operator pos:start="155:45" pos:end="155:45">-</operator> <literal type="number" pos:start="155:47" pos:end="155:47">1</literal></expr>]</index></name><operator pos:start="155:49" pos:end="155:49">.</operator><name pos:start="155:50" pos:end="155:50">x</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:61"><expr pos:start="157:13" pos:end="157:60"><name pos:start="157:13" pos:end="157:16"><name pos:start="157:13" pos:end="157:13">r</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:16">y</name></name> <operator pos:start="157:18" pos:end="157:18">=</operator> <call pos:start="157:20" pos:end="157:60"><name pos:start="157:20" pos:end="157:36">arith2_get_number</name><argument_list pos:start="157:37" pos:end="157:60">(<argument pos:start="157:38" pos:end="157:44"><expr pos:start="157:38" pos:end="157:44"><operator pos:start="157:38" pos:end="157:38">&amp;</operator><name pos:start="157:39" pos:end="157:44">acoder</name></expr></argument>, <argument pos:start="157:47" pos:end="157:59"><expr pos:start="157:47" pos:end="157:59"><name pos:start="157:47" pos:end="157:59"><name pos:start="157:47" pos:end="157:51">avctx</name><operator pos:start="157:52" pos:end="157:53">-&gt;</operator><name pos:start="157:54" pos:end="157:59">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:72"><expr pos:start="159:13" pos:end="159:71"><name pos:start="159:13" pos:end="159:16"><name pos:start="159:13" pos:end="159:13">r</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:16">w</name></name> <operator pos:start="159:18" pos:end="159:18">=</operator> <call pos:start="159:20" pos:end="159:67"><name pos:start="159:20" pos:end="159:36">arith2_get_number</name><argument_list pos:start="159:37" pos:end="159:67">(<argument pos:start="159:38" pos:end="159:44"><expr pos:start="159:38" pos:end="159:44"><operator pos:start="159:38" pos:end="159:38">&amp;</operator><name pos:start="159:39" pos:end="159:44">acoder</name></expr></argument>, <argument pos:start="159:47" pos:end="159:66"><expr pos:start="159:47" pos:end="159:66"><name pos:start="159:47" pos:end="159:58"><name pos:start="159:47" pos:end="159:51">avctx</name><operator pos:start="159:52" pos:end="159:53">-&gt;</operator><name pos:start="159:54" pos:end="159:58">width</name></name>  <operator pos:start="159:61" pos:end="159:61">-</operator> <name pos:start="159:63" pos:end="159:66"><name pos:start="159:63" pos:end="159:63">r</name><operator pos:start="159:64" pos:end="159:65">-&gt;</operator><name pos:start="159:66" pos:end="159:66">x</name></name></expr></argument>)</argument_list></call> <operator pos:start="159:69" pos:end="159:69">+</operator> <literal type="number" pos:start="159:71" pos:end="159:71">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:72"><expr pos:start="161:13" pos:end="161:71"><name pos:start="161:13" pos:end="161:16"><name pos:start="161:13" pos:end="161:13">r</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:16">h</name></name> <operator pos:start="161:18" pos:end="161:18">=</operator> <call pos:start="161:20" pos:end="161:67"><name pos:start="161:20" pos:end="161:36">arith2_get_number</name><argument_list pos:start="161:37" pos:end="161:67">(<argument pos:start="161:38" pos:end="161:44"><expr pos:start="161:38" pos:end="161:44"><operator pos:start="161:38" pos:end="161:38">&amp;</operator><name pos:start="161:39" pos:end="161:44">acoder</name></expr></argument>, <argument pos:start="161:47" pos:end="161:66"><expr pos:start="161:47" pos:end="161:66"><name pos:start="161:47" pos:end="161:59"><name pos:start="161:47" pos:end="161:51">avctx</name><operator pos:start="161:52" pos:end="161:53">-&gt;</operator><name pos:start="161:54" pos:end="161:59">height</name></name> <operator pos:start="161:61" pos:end="161:61">-</operator> <name pos:start="161:63" pos:end="161:66"><name pos:start="161:63" pos:end="161:63">r</name><operator pos:start="161:64" pos:end="161:65">-&gt;</operator><name pos:start="161:66" pos:end="161:66">y</name></name></expr></argument>)</argument_list></call> <operator pos:start="161:69" pos:end="161:69">+</operator> <literal type="number" pos:start="161:71" pos:end="161:71">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:25"><expr pos:start="163:13" pos:end="163:24"><name pos:start="163:13" pos:end="163:22">used_rects</name><operator pos:start="163:23" pos:end="163:24">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="169:9" pos:end="175:9"><if pos:start="169:9" pos:end="175:9">if <condition pos:start="169:12" pos:end="169:40">(<expr pos:start="169:13" pos:end="169:39"><name pos:start="169:13" pos:end="169:25">implicit_rect</name> <operator pos:start="169:27" pos:end="169:28">&amp;&amp;</operator> <name pos:start="169:30" pos:end="169:39">used_rects</name></expr>)</condition> <block pos:start="169:42" pos:end="175:9">{<block_content pos:start="171:13" pos:end="173:39">

            <expr_stmt pos:start="171:13" pos:end="171:77"><expr pos:start="171:13" pos:end="171:76"><call pos:start="171:13" pos:end="171:76"><name pos:start="171:13" pos:end="171:18">av_log</name><argument_list pos:start="171:19" pos:end="171:76">(<argument pos:start="171:20" pos:end="171:24"><expr pos:start="171:20" pos:end="171:24"><name pos:start="171:20" pos:end="171:24">avctx</name></expr></argument>, <argument pos:start="171:27" pos:end="171:38"><expr pos:start="171:27" pos:end="171:38"><name pos:start="171:27" pos:end="171:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="171:41" pos:end="171:75"><expr pos:start="171:41" pos:end="171:75"><literal type="string" pos:start="171:41" pos:end="171:75">"implicit_rect &amp;&amp; used_rects &gt; 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="173:13" pos:end="173:39">return <expr pos:start="173:20" pos:end="173:38"><name pos:start="173:20" pos:end="173:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="179:9" pos:end="193:9"><if pos:start="179:9" pos:end="193:9">if <condition pos:start="179:12" pos:end="179:26">(<expr pos:start="179:13" pos:end="179:25"><name pos:start="179:13" pos:end="179:25">implicit_rect</name></expr>)</condition> <block pos:start="179:28" pos:end="193:9">{<block_content pos:start="181:13" pos:end="191:27">

            <expr_stmt pos:start="181:13" pos:end="181:31"><expr pos:start="181:13" pos:end="181:30"><name pos:start="181:13" pos:end="181:24"><name pos:start="181:13" pos:end="181:21">wmv9rects</name><index pos:start="181:22" pos:end="181:24">[<expr pos:start="181:23" pos:end="181:23"><literal type="number" pos:start="181:23" pos:end="181:23">0</literal></expr>]</index></name><operator pos:start="181:25" pos:end="181:25">.</operator><name pos:start="181:26" pos:end="181:26">x</name> <operator pos:start="181:28" pos:end="181:28">=</operator> <literal type="number" pos:start="181:30" pos:end="181:30">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:31"><expr pos:start="183:13" pos:end="183:30"><name pos:start="183:13" pos:end="183:24"><name pos:start="183:13" pos:end="183:21">wmv9rects</name><index pos:start="183:22" pos:end="183:24">[<expr pos:start="183:23" pos:end="183:23"><literal type="number" pos:start="183:23" pos:end="183:23">0</literal></expr>]</index></name><operator pos:start="183:25" pos:end="183:25">.</operator><name pos:start="183:26" pos:end="183:26">y</name> <operator pos:start="183:28" pos:end="183:28">=</operator> <literal type="number" pos:start="183:30" pos:end="183:30">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:42"><expr pos:start="185:13" pos:end="185:41"><name pos:start="185:13" pos:end="185:24"><name pos:start="185:13" pos:end="185:21">wmv9rects</name><index pos:start="185:22" pos:end="185:24">[<expr pos:start="185:23" pos:end="185:23"><literal type="number" pos:start="185:23" pos:end="185:23">0</literal></expr>]</index></name><operator pos:start="185:25" pos:end="185:25">.</operator><name pos:start="185:26" pos:end="185:26">w</name> <operator pos:start="185:28" pos:end="185:28">=</operator> <name pos:start="185:30" pos:end="185:41"><name pos:start="185:30" pos:end="185:34">avctx</name><operator pos:start="185:35" pos:end="185:36">-&gt;</operator><name pos:start="185:37" pos:end="185:41">width</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:43"><expr pos:start="187:13" pos:end="187:42"><name pos:start="187:13" pos:end="187:24"><name pos:start="187:13" pos:end="187:21">wmv9rects</name><index pos:start="187:22" pos:end="187:24">[<expr pos:start="187:23" pos:end="187:23"><literal type="number" pos:start="187:23" pos:end="187:23">0</literal></expr>]</index></name><operator pos:start="187:25" pos:end="187:25">.</operator><name pos:start="187:26" pos:end="187:26">h</name> <operator pos:start="187:28" pos:end="187:28">=</operator> <name pos:start="187:30" pos:end="187:42"><name pos:start="187:30" pos:end="187:34">avctx</name><operator pos:start="187:35" pos:end="187:36">-&gt;</operator><name pos:start="187:37" pos:end="187:42">height</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="191:13" pos:end="191:27"><expr pos:start="191:13" pos:end="191:26"><name pos:start="191:13" pos:end="191:22">used_rects</name> <operator pos:start="191:24" pos:end="191:24">=</operator> <literal type="number" pos:start="191:26" pos:end="191:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <for pos:start="195:9" pos:end="217:9">for <control pos:start="195:13" pos:end="195:40">(<init pos:start="195:14" pos:end="195:19"><expr pos:start="195:14" pos:end="195:18"><name pos:start="195:14" pos:end="195:14">i</name> <operator pos:start="195:16" pos:end="195:16">=</operator> <literal type="number" pos:start="195:18" pos:end="195:18">0</literal></expr>;</init> <condition pos:start="195:21" pos:end="195:35"><expr pos:start="195:21" pos:end="195:34"><name pos:start="195:21" pos:end="195:21">i</name> <operator pos:start="195:23" pos:end="195:23">&lt;</operator> <name pos:start="195:25" pos:end="195:34">used_rects</name></expr>;</condition> <incr pos:start="195:37" pos:end="195:39"><expr pos:start="195:37" pos:end="195:39"><name pos:start="195:37" pos:end="195:37">i</name><operator pos:start="195:38" pos:end="195:39">++</operator></expr></incr>)</control> <block pos:start="195:42" pos:end="217:9">{<block_content pos:start="197:13" pos:end="215:63">

            <if_stmt pos:start="197:13" pos:end="203:13"><if pos:start="197:13" pos:end="203:13">if <condition pos:start="197:16" pos:end="197:58">(<expr pos:start="197:17" pos:end="197:57"><operator pos:start="197:17" pos:end="197:17">!</operator><name pos:start="197:18" pos:end="197:30">implicit_rect</name> <operator pos:start="197:32" pos:end="197:33">&amp;&amp;</operator> <call pos:start="197:35" pos:end="197:57"><name pos:start="197:35" pos:end="197:48">arith2_get_bit</name><argument_list pos:start="197:49" pos:end="197:57">(<argument pos:start="197:50" pos:end="197:56"><expr pos:start="197:50" pos:end="197:56"><operator pos:start="197:50" pos:end="197:50">&amp;</operator><name pos:start="197:51" pos:end="197:56">acoder</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="197:60" pos:end="203:13">{<block_content pos:start="199:17" pos:end="201:43">

                <expr_stmt pos:start="199:17" pos:end="199:74"><expr pos:start="199:17" pos:end="199:73"><call pos:start="199:17" pos:end="199:73"><name pos:start="199:17" pos:end="199:22">av_log</name><argument_list pos:start="199:23" pos:end="199:73">(<argument pos:start="199:24" pos:end="199:28"><expr pos:start="199:24" pos:end="199:28"><name pos:start="199:24" pos:end="199:28">avctx</name></expr></argument>, <argument pos:start="199:31" pos:end="199:42"><expr pos:start="199:31" pos:end="199:42"><name pos:start="199:31" pos:end="199:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="199:45" pos:end="199:72"><expr pos:start="199:45" pos:end="199:72"><literal type="string" pos:start="199:45" pos:end="199:72">"Unexpected grandchildren\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="201:17" pos:end="201:43">return <expr pos:start="201:24" pos:end="201:42"><name pos:start="201:24" pos:end="201:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="205:13" pos:end="213:13"><if pos:start="205:13" pos:end="213:13">if <condition pos:start="205:16" pos:end="205:19">(<expr pos:start="205:17" pos:end="205:18"><operator pos:start="205:17" pos:end="205:17">!</operator><name pos:start="205:18" pos:end="205:18">i</name></expr>)</condition> <block pos:start="205:21" pos:end="213:13">{<block_content pos:start="207:17" pos:end="211:64">

                <expr_stmt pos:start="207:17" pos:end="207:56"><expr pos:start="207:17" pos:end="207:55"><name pos:start="207:17" pos:end="207:25">wmv9_mask</name> <operator pos:start="207:27" pos:end="207:27">=</operator> <call pos:start="207:29" pos:end="207:51"><name pos:start="207:29" pos:end="207:42">arith2_get_bit</name><argument_list pos:start="207:43" pos:end="207:51">(<argument pos:start="207:44" pos:end="207:50"><expr pos:start="207:44" pos:end="207:50"><operator pos:start="207:44" pos:end="207:44">&amp;</operator><name pos:start="207:45" pos:end="207:50">acoder</name></expr></argument>)</argument_list></call> <operator pos:start="207:53" pos:end="207:53">-</operator> <literal type="number" pos:start="207:55" pos:end="207:55">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="209:17" pos:end="211:64"><if pos:start="209:17" pos:end="211:64">if <condition pos:start="209:20" pos:end="209:31">(<expr pos:start="209:21" pos:end="209:30"><operator pos:start="209:21" pos:end="209:21">!</operator><name pos:start="209:22" pos:end="209:30">wmv9_mask</name></expr>)</condition><block type="pseudo" pos:start="211:21" pos:end="211:64"><block_content pos:start="211:21" pos:end="211:64">

                    <expr_stmt pos:start="211:21" pos:end="211:64"><expr pos:start="211:21" pos:end="211:63"><name pos:start="211:21" pos:end="211:29">wmv9_mask</name> <operator pos:start="211:31" pos:end="211:31">=</operator> <call pos:start="211:33" pos:end="211:63"><name pos:start="211:33" pos:end="211:49">arith2_get_number</name><argument_list pos:start="211:50" pos:end="211:63">(<argument pos:start="211:51" pos:end="211:57"><expr pos:start="211:51" pos:end="211:57"><operator pos:start="211:51" pos:end="211:51">&amp;</operator><name pos:start="211:52" pos:end="211:57">acoder</name></expr></argument>, <argument pos:start="211:60" pos:end="211:62"><expr pos:start="211:60" pos:end="211:62"><literal type="number" pos:start="211:60" pos:end="211:62">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:63"><expr pos:start="215:13" pos:end="215:62"><name pos:start="215:13" pos:end="215:24"><name pos:start="215:13" pos:end="215:21">wmv9rects</name><index pos:start="215:22" pos:end="215:24">[<expr pos:start="215:23" pos:end="215:23"><name pos:start="215:23" pos:end="215:23">i</name></expr>]</index></name><operator pos:start="215:25" pos:end="215:25">.</operator><name pos:start="215:26" pos:end="215:30">coded</name> <operator pos:start="215:32" pos:end="215:32">=</operator> <call pos:start="215:34" pos:end="215:62"><name pos:start="215:34" pos:end="215:50">arith2_get_number</name><argument_list pos:start="215:51" pos:end="215:62">(<argument pos:start="215:52" pos:end="215:58"><expr pos:start="215:52" pos:end="215:58"><operator pos:start="215:52" pos:end="215:52">&amp;</operator><name pos:start="215:53" pos:end="215:58">acoder</name></expr></argument>, <argument pos:start="215:61" pos:end="215:61"><expr pos:start="215:61" pos:end="215:61"><literal type="number" pos:start="215:61" pos:end="215:61">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="221:9" pos:end="221:55"><expr pos:start="221:9" pos:end="221:54"><name pos:start="221:9" pos:end="221:11">buf</name>      <operator pos:start="221:18" pos:end="221:19">+=</operator> <call pos:start="221:21" pos:end="221:54"><name pos:start="221:21" pos:end="221:45">arith2_get_consumed_bytes</name><argument_list pos:start="221:46" pos:end="221:54">(<argument pos:start="221:47" pos:end="221:53"><expr pos:start="221:47" pos:end="221:53"><operator pos:start="221:47" pos:end="221:47">&amp;</operator><name pos:start="221:48" pos:end="221:53">acoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:55"><expr pos:start="223:9" pos:end="223:54"><name pos:start="223:9" pos:end="223:16">buf_size</name> <operator pos:start="223:18" pos:end="223:19">-=</operator> <call pos:start="223:21" pos:end="223:54"><name pos:start="223:21" pos:end="223:45">arith2_get_consumed_bytes</name><argument_list pos:start="223:46" pos:end="223:54">(<argument pos:start="223:47" pos:end="223:53"><expr pos:start="223:47" pos:end="223:53"><operator pos:start="223:47" pos:end="223:47">&amp;</operator><name pos:start="223:48" pos:end="223:53">acoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="225:9" pos:end="227:39"><if pos:start="225:9" pos:end="227:39">if <condition pos:start="225:12" pos:end="225:25">(<expr pos:start="225:13" pos:end="225:24"><name pos:start="225:13" pos:end="225:20">buf_size</name> <operator pos:start="225:22" pos:end="225:22">&lt;</operator> <literal type="number" pos:start="225:24" pos:end="225:24">1</literal></expr>)</condition><block type="pseudo" pos:start="227:13" pos:end="227:39"><block_content pos:start="227:13" pos:end="227:39">

            <return pos:start="227:13" pos:end="227:39">return <expr pos:start="227:20" pos:end="227:38"><name pos:start="227:20" pos:end="227:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="233:5" pos:end="233:24"><expr pos:start="233:5" pos:end="233:23"><name pos:start="233:5" pos:end="233:10"><name pos:start="233:5" pos:end="233:5">c</name><operator pos:start="233:6" pos:end="233:7">-&gt;</operator><name pos:start="233:8" pos:end="233:10">mvX</name></name> <operator pos:start="233:12" pos:end="233:12">=</operator> <name pos:start="233:14" pos:end="233:19"><name pos:start="233:14" pos:end="233:14">c</name><operator pos:start="233:15" pos:end="233:16">-&gt;</operator><name pos:start="233:17" pos:end="233:19">mvY</name></name> <operator pos:start="233:21" pos:end="233:21">=</operator> <literal type="number" pos:start="233:23" pos:end="233:23">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="235:5" pos:end="259:5"><if pos:start="235:5" pos:end="245:5">if <condition pos:start="235:8" pos:end="235:28">(<expr pos:start="235:9" pos:end="235:27"><name pos:start="235:9" pos:end="235:16">keyframe</name> <operator pos:start="235:18" pos:end="235:19">&amp;&amp;</operator> <operator pos:start="235:21" pos:end="235:21">!</operator><name pos:start="235:22" pos:end="235:27">is_555</name></expr>)</condition> <block pos:start="235:30" pos:end="245:5">{<block_content pos:start="237:9" pos:end="243:22">

        <if_stmt pos:start="237:9" pos:end="239:39"><if pos:start="237:9" pos:end="239:39">if <condition pos:start="237:12" pos:end="237:54">(<expr pos:start="237:13" pos:end="237:53"><operator pos:start="237:13" pos:end="237:13">(</operator><name pos:start="237:14" pos:end="237:14">i</name> <operator pos:start="237:16" pos:end="237:16">=</operator> <call pos:start="237:18" pos:end="237:48"><name pos:start="237:18" pos:end="237:30">decode_pal_v2</name><argument_list pos:start="237:31" pos:end="237:48">(<argument pos:start="237:32" pos:end="237:32"><expr pos:start="237:32" pos:end="237:32"><name pos:start="237:32" pos:end="237:32">c</name></expr></argument>, <argument pos:start="237:35" pos:end="237:37"><expr pos:start="237:35" pos:end="237:37"><name pos:start="237:35" pos:end="237:37">buf</name></expr></argument>, <argument pos:start="237:40" pos:end="237:47"><expr pos:start="237:40" pos:end="237:47"><name pos:start="237:40" pos:end="237:47">buf_size</name></expr></argument>)</argument_list></call><operator pos:start="237:49" pos:end="237:49">)</operator> <operator pos:start="237:51" pos:end="237:51">&lt;</operator> <literal type="number" pos:start="237:53" pos:end="237:53">0</literal></expr>)</condition><block type="pseudo" pos:start="239:13" pos:end="239:39"><block_content pos:start="239:13" pos:end="239:39">

            <return pos:start="239:13" pos:end="239:39">return <expr pos:start="239:20" pos:end="239:38"><name pos:start="239:20" pos:end="239:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:22"><expr pos:start="241:9" pos:end="241:21"><name pos:start="241:9" pos:end="241:11">buf</name>      <operator pos:start="241:18" pos:end="241:19">+=</operator> <name pos:start="241:21" pos:end="241:21">i</name></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:22"><expr pos:start="243:9" pos:end="243:21"><name pos:start="243:9" pos:end="243:16">buf_size</name> <operator pos:start="243:18" pos:end="243:19">-=</operator> <name pos:start="243:21" pos:end="243:21">i</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="245:7" pos:end="259:5">else if <condition pos:start="245:15" pos:end="245:22">(<expr pos:start="245:16" pos:end="245:21"><name pos:start="245:16" pos:end="245:21">has_mv</name></expr>)</condition> <block pos:start="245:24" pos:end="259:5">{<block_content pos:start="247:9" pos:end="257:50">

        <expr_stmt pos:start="247:9" pos:end="247:22"><expr pos:start="247:9" pos:end="247:21"><name pos:start="247:9" pos:end="247:11">buf</name>      <operator pos:start="247:18" pos:end="247:19">+=</operator> <literal type="number" pos:start="247:21" pos:end="247:21">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:22"><expr pos:start="249:9" pos:end="249:21"><name pos:start="249:9" pos:end="249:16">buf_size</name> <operator pos:start="249:18" pos:end="249:19">-=</operator> <literal type="number" pos:start="249:21" pos:end="249:21">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="251:9" pos:end="253:39"><if pos:start="251:9" pos:end="253:39">if <condition pos:start="251:12" pos:end="251:25">(<expr pos:start="251:13" pos:end="251:24"><name pos:start="251:13" pos:end="251:20">buf_size</name> <operator pos:start="251:22" pos:end="251:22">&lt;</operator> <literal type="number" pos:start="251:24" pos:end="251:24">1</literal></expr>)</condition><block type="pseudo" pos:start="253:13" pos:end="253:39"><block_content pos:start="253:13" pos:end="253:39">

            <return pos:start="253:13" pos:end="253:39">return <expr pos:start="253:20" pos:end="253:38"><name pos:start="253:20" pos:end="253:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:49"><expr pos:start="255:9" pos:end="255:48"><name pos:start="255:9" pos:end="255:14"><name pos:start="255:9" pos:end="255:9">c</name><operator pos:start="255:10" pos:end="255:11">-&gt;</operator><name pos:start="255:12" pos:end="255:14">mvX</name></name> <operator pos:start="255:16" pos:end="255:16">=</operator> <call pos:start="255:18" pos:end="255:33"><name pos:start="255:18" pos:end="255:24">AV_RB16</name><argument_list pos:start="255:25" pos:end="255:33">(<argument pos:start="255:26" pos:end="255:32"><expr pos:start="255:26" pos:end="255:32"><name pos:start="255:26" pos:end="255:28">buf</name> <operator pos:start="255:30" pos:end="255:30">-</operator> <literal type="number" pos:start="255:32" pos:end="255:32">4</literal></expr></argument>)</argument_list></call> <operator pos:start="255:35" pos:end="255:35">-</operator> <name pos:start="255:37" pos:end="255:48"><name pos:start="255:37" pos:end="255:41">avctx</name><operator pos:start="255:42" pos:end="255:43">-&gt;</operator><name pos:start="255:44" pos:end="255:48">width</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:50"><expr pos:start="257:9" pos:end="257:49"><name pos:start="257:9" pos:end="257:14"><name pos:start="257:9" pos:end="257:9">c</name><operator pos:start="257:10" pos:end="257:11">-&gt;</operator><name pos:start="257:12" pos:end="257:14">mvY</name></name> <operator pos:start="257:16" pos:end="257:16">=</operator> <call pos:start="257:18" pos:end="257:33"><name pos:start="257:18" pos:end="257:24">AV_RB16</name><argument_list pos:start="257:25" pos:end="257:33">(<argument pos:start="257:26" pos:end="257:32"><expr pos:start="257:26" pos:end="257:32"><name pos:start="257:26" pos:end="257:28">buf</name> <operator pos:start="257:30" pos:end="257:30">-</operator> <literal type="number" pos:start="257:32" pos:end="257:32">2</literal></expr></argument>)</argument_list></call> <operator pos:start="257:35" pos:end="257:35">-</operator> <name pos:start="257:37" pos:end="257:49"><name pos:start="257:37" pos:end="257:41">avctx</name><operator pos:start="257:42" pos:end="257:43">-&gt;</operator><name pos:start="257:44" pos:end="257:49">height</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="263:5" pos:end="305:5"><if pos:start="263:5" pos:end="291:5">if <condition pos:start="263:8" pos:end="263:33">(<expr pos:start="263:9" pos:end="263:32"><name pos:start="263:9" pos:end="263:14"><name pos:start="263:9" pos:end="263:9">c</name><operator pos:start="263:10" pos:end="263:11">-&gt;</operator><name pos:start="263:12" pos:end="263:14">mvX</name></name> <operator pos:start="263:16" pos:end="263:16">&lt;</operator> <literal type="number" pos:start="263:18" pos:end="263:18">0</literal> <operator pos:start="263:20" pos:end="263:21">||</operator> <name pos:start="263:23" pos:end="263:28"><name pos:start="263:23" pos:end="263:23">c</name><operator pos:start="263:24" pos:end="263:25">-&gt;</operator><name pos:start="263:26" pos:end="263:28">mvY</name></name> <operator pos:start="263:30" pos:end="263:30">&lt;</operator> <literal type="number" pos:start="263:32" pos:end="263:32">0</literal></expr>)</condition> <block pos:start="263:35" pos:end="291:5">{<block_content pos:start="265:9" pos:end="289:9">

        <expr_stmt pos:start="265:9" pos:end="265:55"><expr pos:start="265:9" pos:end="265:54"><call pos:start="265:9" pos:end="265:54"><name pos:start="265:9" pos:end="265:14">FFSWAP</name><argument_list pos:start="265:15" pos:end="265:54">(<argument pos:start="265:16" pos:end="265:24"><expr pos:start="265:16" pos:end="265:24"><name pos:start="265:16" pos:end="265:22">uint8_t</name> <operator pos:start="265:24" pos:end="265:24">*</operator></expr></argument>, <argument pos:start="265:27" pos:end="265:36"><expr pos:start="265:27" pos:end="265:36"><name pos:start="265:27" pos:end="265:36"><name pos:start="265:27" pos:end="265:27">c</name><operator pos:start="265:28" pos:end="265:29">-&gt;</operator><name pos:start="265:30" pos:end="265:36">pal_pic</name></name></expr></argument>, <argument pos:start="265:39" pos:end="265:53"><expr pos:start="265:39" pos:end="265:53"><name pos:start="265:39" pos:end="265:53"><name pos:start="265:39" pos:end="265:39">c</name><operator pos:start="265:40" pos:end="265:41">-&gt;</operator><name pos:start="265:42" pos:end="265:53">last_pal_pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="269:9" pos:end="271:23"><if pos:start="269:9" pos:end="271:23">if <condition pos:start="269:12" pos:end="269:76">(<expr pos:start="269:13" pos:end="269:75"><operator pos:start="269:13" pos:end="269:13">(</operator><name pos:start="269:14" pos:end="269:16">ret</name> <operator pos:start="269:18" pos:end="269:18">=</operator> <call pos:start="269:20" pos:end="269:70"><name pos:start="269:20" pos:end="269:32">ff_get_buffer</name><argument_list pos:start="269:33" pos:end="269:70">(<argument pos:start="269:34" pos:end="269:38"><expr pos:start="269:34" pos:end="269:38"><name pos:start="269:34" pos:end="269:38">avctx</name></expr></argument>, <argument pos:start="269:41" pos:end="269:45"><expr pos:start="269:41" pos:end="269:45"><name pos:start="269:41" pos:end="269:45">frame</name></expr></argument>, <argument pos:start="269:48" pos:end="269:69"><expr pos:start="269:48" pos:end="269:69"><name pos:start="269:48" pos:end="269:69">AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator pos:start="269:71" pos:end="269:71">)</operator> <operator pos:start="269:73" pos:end="269:73">&lt;</operator> <literal type="number" pos:start="269:75" pos:end="269:75">0</literal></expr>)</condition><block type="pseudo" pos:start="271:13" pos:end="271:23"><block_content pos:start="271:13" pos:end="271:23">

            <return pos:start="271:13" pos:end="271:23">return <expr pos:start="271:20" pos:end="271:22"><name pos:start="271:20" pos:end="271:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="275:9" pos:end="289:9"><if pos:start="275:9" pos:end="283:9">if <condition pos:start="275:12" pos:end="275:35">(<expr pos:start="275:13" pos:end="275:34"><name pos:start="275:13" pos:end="275:34"><name pos:start="275:13" pos:end="275:15">ctx</name><operator pos:start="275:16" pos:end="275:17">-&gt;</operator><name pos:start="275:18" pos:end="275:25">last_pic</name><operator pos:start="275:26" pos:end="275:27">-&gt;</operator><name pos:start="275:28" pos:end="275:31">data</name><index pos:start="275:32" pos:end="275:34">[<expr pos:start="275:33" pos:end="275:33"><literal type="number" pos:start="275:33" pos:end="275:33">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="275:37" pos:end="283:9">{<block_content pos:start="277:13" pos:end="281:79">

            <expr_stmt pos:start="277:13" pos:end="277:73"><expr pos:start="277:13" pos:end="277:72"><call pos:start="277:13" pos:end="277:72"><name pos:start="277:13" pos:end="277:22">av_assert0</name><argument_list pos:start="277:23" pos:end="277:72">(<argument pos:start="277:24" pos:end="277:71"><expr pos:start="277:24" pos:end="277:71"><name pos:start="277:24" pos:end="277:41"><name pos:start="277:24" pos:end="277:28">frame</name><operator pos:start="277:29" pos:end="277:30">-&gt;</operator><name pos:start="277:31" pos:end="277:38">linesize</name><index pos:start="277:39" pos:end="277:41">[<expr pos:start="277:40" pos:end="277:40"><literal type="number" pos:start="277:40" pos:end="277:40">0</literal></expr>]</index></name> <operator pos:start="277:43" pos:end="277:44">==</operator> <name pos:start="277:46" pos:end="277:71"><name pos:start="277:46" pos:end="277:48">ctx</name><operator pos:start="277:49" pos:end="277:50">-&gt;</operator><name pos:start="277:51" pos:end="277:58">last_pic</name><operator pos:start="277:59" pos:end="277:60">-&gt;</operator><name pos:start="277:61" pos:end="277:68">linesize</name><index pos:start="277:69" pos:end="277:71">[<expr pos:start="277:70" pos:end="277:70"><literal type="number" pos:start="277:70" pos:end="277:70">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="279:13" pos:end="281:79"><expr pos:start="279:13" pos:end="281:78"><name pos:start="279:13" pos:end="279:27"><name pos:start="279:13" pos:end="279:13">c</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:27">last_rgb_pic</name></name> <operator pos:start="279:29" pos:end="279:29">=</operator> <name pos:start="279:31" pos:end="279:52"><name pos:start="279:31" pos:end="279:33">ctx</name><operator pos:start="279:34" pos:end="279:35">-&gt;</operator><name pos:start="279:36" pos:end="279:43">last_pic</name><operator pos:start="279:44" pos:end="279:45">-&gt;</operator><name pos:start="279:46" pos:end="279:49">data</name><index pos:start="279:50" pos:end="279:52">[<expr pos:start="279:51" pos:end="279:51"><literal type="number" pos:start="279:51" pos:end="279:51">0</literal></expr>]</index></name> <operator pos:start="279:54" pos:end="279:54">+</operator>

                              <name pos:start="281:31" pos:end="281:56"><name pos:start="281:31" pos:end="281:33">ctx</name><operator pos:start="281:34" pos:end="281:35">-&gt;</operator><name pos:start="281:36" pos:end="281:43">last_pic</name><operator pos:start="281:44" pos:end="281:45">-&gt;</operator><name pos:start="281:46" pos:end="281:53">linesize</name><index pos:start="281:54" pos:end="281:56">[<expr pos:start="281:55" pos:end="281:55"><literal type="number" pos:start="281:55" pos:end="281:55">0</literal></expr>]</index></name> <operator pos:start="281:58" pos:end="281:58">*</operator> <operator pos:start="281:60" pos:end="281:60">(</operator><name pos:start="281:61" pos:end="281:73"><name pos:start="281:61" pos:end="281:65">avctx</name><operator pos:start="281:66" pos:end="281:67">-&gt;</operator><name pos:start="281:68" pos:end="281:73">height</name></name> <operator pos:start="281:75" pos:end="281:75">-</operator> <literal type="number" pos:start="281:77" pos:end="281:77">1</literal><operator pos:start="281:78" pos:end="281:78">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="283:11" pos:end="289:9">else <block pos:start="283:16" pos:end="289:9">{<block_content pos:start="285:13" pos:end="287:39">

            <expr_stmt pos:start="285:13" pos:end="285:62"><expr pos:start="285:13" pos:end="285:61"><call pos:start="285:13" pos:end="285:61"><name pos:start="285:13" pos:end="285:18">av_log</name><argument_list pos:start="285:19" pos:end="285:61">(<argument pos:start="285:20" pos:end="285:24"><expr pos:start="285:20" pos:end="285:24"><name pos:start="285:20" pos:end="285:24">avctx</name></expr></argument>, <argument pos:start="285:27" pos:end="285:38"><expr pos:start="285:27" pos:end="285:38"><name pos:start="285:27" pos:end="285:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="285:41" pos:end="285:60"><expr pos:start="285:41" pos:end="285:60"><literal type="string" pos:start="285:41" pos:end="285:60">"Missing keyframe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="287:13" pos:end="287:39">return <expr pos:start="287:20" pos:end="287:38"><name pos:start="287:20" pos:end="287:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="291:7" pos:end="305:5">else <block pos:start="291:12" pos:end="305:5">{<block_content pos:start="293:9" pos:end="303:31">

        <if_stmt pos:start="293:9" pos:end="295:23"><if pos:start="293:9" pos:end="295:23">if <condition pos:start="293:12" pos:end="293:62">(<expr pos:start="293:13" pos:end="293:61"><operator pos:start="293:13" pos:end="293:13">(</operator><name pos:start="293:14" pos:end="293:16">ret</name> <operator pos:start="293:18" pos:end="293:18">=</operator> <call pos:start="293:20" pos:end="293:56"><name pos:start="293:20" pos:end="293:34">ff_reget_buffer</name><argument_list pos:start="293:35" pos:end="293:56">(<argument pos:start="293:36" pos:end="293:40"><expr pos:start="293:36" pos:end="293:40"><name pos:start="293:36" pos:end="293:40">avctx</name></expr></argument>, <argument pos:start="293:43" pos:end="293:55"><expr pos:start="293:43" pos:end="293:55"><name pos:start="293:43" pos:end="293:55"><name pos:start="293:43" pos:end="293:45">ctx</name><operator pos:start="293:46" pos:end="293:47">-&gt;</operator><name pos:start="293:48" pos:end="293:55">last_pic</name></name></expr></argument>)</argument_list></call><operator pos:start="293:57" pos:end="293:57">)</operator> <operator pos:start="293:59" pos:end="293:59">&lt;</operator> <literal type="number" pos:start="293:61" pos:end="293:61">0</literal></expr>)</condition><block type="pseudo" pos:start="295:13" pos:end="295:23"><block_content pos:start="295:13" pos:end="295:23">

            <return pos:start="295:13" pos:end="295:23">return <expr pos:start="295:20" pos:end="295:22"><name pos:start="295:20" pos:end="295:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="297:9" pos:end="299:23"><if pos:start="297:9" pos:end="299:23">if <condition pos:start="297:12" pos:end="297:59">(<expr pos:start="297:13" pos:end="297:58"><operator pos:start="297:13" pos:end="297:13">(</operator><name pos:start="297:14" pos:end="297:16">ret</name> <operator pos:start="297:18" pos:end="297:18">=</operator> <call pos:start="297:20" pos:end="297:53"><name pos:start="297:20" pos:end="297:31">av_frame_ref</name><argument_list pos:start="297:32" pos:end="297:53">(<argument pos:start="297:33" pos:end="297:37"><expr pos:start="297:33" pos:end="297:37"><name pos:start="297:33" pos:end="297:37">frame</name></expr></argument>, <argument pos:start="297:40" pos:end="297:52"><expr pos:start="297:40" pos:end="297:52"><name pos:start="297:40" pos:end="297:52"><name pos:start="297:40" pos:end="297:42">ctx</name><operator pos:start="297:43" pos:end="297:44">-&gt;</operator><name pos:start="297:45" pos:end="297:52">last_pic</name></name></expr></argument>)</argument_list></call><operator pos:start="297:54" pos:end="297:54">)</operator> <operator pos:start="297:56" pos:end="297:56">&lt;</operator> <literal type="number" pos:start="297:58" pos:end="297:58">0</literal></expr>)</condition><block type="pseudo" pos:start="299:13" pos:end="299:23"><block_content pos:start="299:13" pos:end="299:23">

            <return pos:start="299:13" pos:end="299:23">return <expr pos:start="299:20" pos:end="299:22"><name pos:start="299:20" pos:end="299:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="303:9" pos:end="303:31"><expr pos:start="303:9" pos:end="303:30"><name pos:start="303:9" pos:end="303:23"><name pos:start="303:9" pos:end="303:9">c</name><operator pos:start="303:10" pos:end="303:11">-&gt;</operator><name pos:start="303:12" pos:end="303:23">last_rgb_pic</name></name> <operator pos:start="303:25" pos:end="303:25">=</operator> <name pos:start="303:27" pos:end="303:30">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="307:5" pos:end="309:61"><expr pos:start="307:5" pos:end="309:60"><name pos:start="307:5" pos:end="307:14"><name pos:start="307:5" pos:end="307:5">c</name><operator pos:start="307:6" pos:end="307:7">-&gt;</operator><name pos:start="307:8" pos:end="307:14">rgb_pic</name></name>    <operator pos:start="307:19" pos:end="307:19">=</operator> <name pos:start="307:21" pos:end="307:34"><name pos:start="307:21" pos:end="307:25">frame</name><operator pos:start="307:26" pos:end="307:27">-&gt;</operator><name pos:start="307:28" pos:end="307:31">data</name><index pos:start="307:32" pos:end="307:34">[<expr pos:start="307:33" pos:end="307:33"><literal type="number" pos:start="307:33" pos:end="307:33">0</literal></expr>]</index></name> <operator pos:start="307:36" pos:end="307:36">+</operator>

                    <name pos:start="309:21" pos:end="309:38"><name pos:start="309:21" pos:end="309:25">frame</name><operator pos:start="309:26" pos:end="309:27">-&gt;</operator><name pos:start="309:28" pos:end="309:35">linesize</name><index pos:start="309:36" pos:end="309:38">[<expr pos:start="309:37" pos:end="309:37"><literal type="number" pos:start="309:37" pos:end="309:37">0</literal></expr>]</index></name> <operator pos:start="309:40" pos:end="309:40">*</operator> <operator pos:start="309:42" pos:end="309:42">(</operator><name pos:start="309:43" pos:end="309:55"><name pos:start="309:43" pos:end="309:47">avctx</name><operator pos:start="309:48" pos:end="309:49">-&gt;</operator><name pos:start="309:50" pos:end="309:55">height</name></name> <operator pos:start="309:57" pos:end="309:57">-</operator> <literal type="number" pos:start="309:59" pos:end="309:59">1</literal><operator pos:start="309:60" pos:end="309:60">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="311:5" pos:end="311:40"><expr pos:start="311:5" pos:end="311:39"><name pos:start="311:5" pos:end="311:17"><name pos:start="311:5" pos:end="311:5">c</name><operator pos:start="311:6" pos:end="311:7">-&gt;</operator><name pos:start="311:8" pos:end="311:17">rgb_stride</name></name> <operator pos:start="311:19" pos:end="311:19">=</operator> <operator pos:start="311:21" pos:end="311:21">-</operator><name pos:start="311:22" pos:end="311:39"><name pos:start="311:22" pos:end="311:26">frame</name><operator pos:start="311:27" pos:end="311:28">-&gt;</operator><name pos:start="311:29" pos:end="311:36">linesize</name><index pos:start="311:37" pos:end="311:39">[<expr pos:start="311:38" pos:end="311:38"><literal type="number" pos:start="311:38" pos:end="311:38">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <expr_stmt pos:start="315:5" pos:end="315:32"><expr pos:start="315:5" pos:end="315:31"><name pos:start="315:5" pos:end="315:20"><name pos:start="315:5" pos:end="315:9">frame</name><operator pos:start="315:10" pos:end="315:11">-&gt;</operator><name pos:start="315:12" pos:end="315:20">key_frame</name></name> <operator pos:start="315:22" pos:end="315:22">=</operator> <name pos:start="315:24" pos:end="315:31">keyframe</name></expr>;</expr_stmt>

    <expr_stmt pos:start="317:5" pos:end="317:72"><expr pos:start="317:5" pos:end="317:71"><name pos:start="317:5" pos:end="317:20"><name pos:start="317:5" pos:end="317:9">frame</name><operator pos:start="317:10" pos:end="317:11">-&gt;</operator><name pos:start="317:12" pos:end="317:20">pict_type</name></name> <operator pos:start="317:22" pos:end="317:22">=</operator> <ternary pos:start="317:24" pos:end="317:71"><condition pos:start="317:24" pos:end="317:33"><expr pos:start="317:24" pos:end="317:31"><name pos:start="317:24" pos:end="317:31">keyframe</name></expr> ?</condition><then pos:start="317:35" pos:end="317:51"> <expr pos:start="317:35" pos:end="317:51"><name pos:start="317:35" pos:end="317:51">AV_PICTURE_TYPE_I</name></expr> </then><else pos:start="317:53" pos:end="317:71">: <expr pos:start="317:55" pos:end="317:71"><name pos:start="317:55" pos:end="317:71">AV_PICTURE_TYPE_P</name></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="321:5" pos:end="449:5"><if pos:start="321:5" pos:end="337:5">if <condition pos:start="321:8" pos:end="321:15">(<expr pos:start="321:9" pos:end="321:14"><name pos:start="321:9" pos:end="321:14">is_555</name></expr>)</condition> <block pos:start="321:17" pos:end="337:5">{<block_content pos:start="323:9" pos:end="335:42">

        <expr_stmt pos:start="323:9" pos:end="323:45"><expr pos:start="323:9" pos:end="323:44"><call pos:start="323:9" pos:end="323:44"><name pos:start="323:9" pos:end="323:24">bytestream2_init</name><argument_list pos:start="323:25" pos:end="323:44">(<argument pos:start="323:26" pos:end="323:28"><expr pos:start="323:26" pos:end="323:28"><operator pos:start="323:26" pos:end="323:26">&amp;</operator><name pos:start="323:27" pos:end="323:28">gB</name></expr></argument>, <argument pos:start="323:31" pos:end="323:33"><expr pos:start="323:31" pos:end="323:33"><name pos:start="323:31" pos:end="323:33">buf</name></expr></argument>, <argument pos:start="323:36" pos:end="323:43"><expr pos:start="323:36" pos:end="323:43"><name pos:start="323:36" pos:end="323:43">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="327:9" pos:end="331:39"><if pos:start="327:9" pos:end="331:39">if <condition pos:start="327:12" pos:end="329:62">(<expr pos:start="327:13" pos:end="329:61"><call pos:start="327:13" pos:end="329:61"><name pos:start="327:13" pos:end="327:22">decode_555</name><argument_list pos:start="327:23" pos:end="329:61">(<argument pos:start="327:24" pos:end="327:26"><expr pos:start="327:24" pos:end="327:26"><operator pos:start="327:24" pos:end="327:24">&amp;</operator><name pos:start="327:25" pos:end="327:26">gB</name></expr></argument>, <argument pos:start="327:29" pos:end="327:50"><expr pos:start="327:29" pos:end="327:50"><operator pos:start="327:29" pos:end="327:29">(</operator><name pos:start="327:30" pos:end="327:37">uint16_t</name> <operator pos:start="327:39" pos:end="327:39">*</operator><operator pos:start="327:40" pos:end="327:40">)</operator><name pos:start="327:41" pos:end="327:50"><name pos:start="327:41" pos:end="327:41">c</name><operator pos:start="327:42" pos:end="327:43">-&gt;</operator><name pos:start="327:44" pos:end="327:50">rgb_pic</name></name></expr></argument>, <argument pos:start="327:53" pos:end="327:70"><expr pos:start="327:53" pos:end="327:70"><name pos:start="327:53" pos:end="327:65"><name pos:start="327:53" pos:end="327:53">c</name><operator pos:start="327:54" pos:end="327:55">-&gt;</operator><name pos:start="327:56" pos:end="327:65">rgb_stride</name></name> <operator pos:start="327:67" pos:end="327:68">&gt;&gt;</operator> <literal type="number" pos:start="327:70" pos:end="327:70">1</literal></expr></argument>,

                       <argument pos:start="329:24" pos:end="329:31"><expr pos:start="329:24" pos:end="329:31"><name pos:start="329:24" pos:end="329:31">keyframe</name></expr></argument>, <argument pos:start="329:34" pos:end="329:45"><expr pos:start="329:34" pos:end="329:45"><name pos:start="329:34" pos:end="329:45"><name pos:start="329:34" pos:end="329:38">avctx</name><operator pos:start="329:39" pos:end="329:40">-&gt;</operator><name pos:start="329:41" pos:end="329:45">width</name></name></expr></argument>, <argument pos:start="329:48" pos:end="329:60"><expr pos:start="329:48" pos:end="329:60"><name pos:start="329:48" pos:end="329:60"><name pos:start="329:48" pos:end="329:52">avctx</name><operator pos:start="329:53" pos:end="329:54">-&gt;</operator><name pos:start="329:55" pos:end="329:60">height</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="331:13" pos:end="331:39"><block_content pos:start="331:13" pos:end="331:39">

            <return pos:start="331:13" pos:end="331:39">return <expr pos:start="331:20" pos:end="331:38"><name pos:start="331:20" pos:end="331:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="335:9" pos:end="335:42"><expr pos:start="335:9" pos:end="335:41"><name pos:start="335:9" pos:end="335:16">buf_size</name> <operator pos:start="335:18" pos:end="335:19">-=</operator> <call pos:start="335:21" pos:end="335:41"><name pos:start="335:21" pos:end="335:36">bytestream2_tell</name><argument_list pos:start="335:37" pos:end="335:41">(<argument pos:start="335:38" pos:end="335:40"><expr pos:start="335:38" pos:end="335:40"><operator pos:start="335:38" pos:end="335:38">&amp;</operator><name pos:start="335:39" pos:end="335:40">gB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="337:7" pos:end="449:5">else <block pos:start="337:12" pos:end="449:5">{<block_content pos:start="339:9" pos:end="447:65">

        <if_stmt pos:start="339:9" pos:end="349:9"><if pos:start="339:9" pos:end="349:9">if <condition pos:start="339:12" pos:end="339:21">(<expr pos:start="339:13" pos:end="339:20"><name pos:start="339:13" pos:end="339:20">keyframe</name></expr>)</condition> <block pos:start="339:23" pos:end="349:9">{<block_content pos:start="341:13" pos:end="347:57">

            <expr_stmt pos:start="341:13" pos:end="341:29"><expr pos:start="341:13" pos:end="341:28"><name pos:start="341:13" pos:end="341:24"><name pos:start="341:13" pos:end="341:13">c</name><operator pos:start="341:14" pos:end="341:15">-&gt;</operator><name pos:start="341:16" pos:end="341:24">corrupted</name></name> <operator pos:start="341:26" pos:end="341:26">=</operator> <literal type="number" pos:start="341:28" pos:end="341:28">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:53"><expr pos:start="343:13" pos:end="343:52"><call pos:start="343:13" pos:end="343:52"><name pos:start="343:13" pos:end="343:39">ff_mss12_slicecontext_reset</name><argument_list pos:start="343:40" pos:end="343:52">(<argument pos:start="343:41" pos:end="343:51"><expr pos:start="343:41" pos:end="343:51"><operator pos:start="343:41" pos:end="343:41">&amp;</operator><name pos:start="343:42" pos:end="343:51"><name pos:start="343:42" pos:end="343:44">ctx</name><operator pos:start="343:45" pos:end="343:46">-&gt;</operator><name pos:start="343:47" pos:end="343:48">sc</name><index pos:start="343:49" pos:end="343:51">[<expr pos:start="343:50" pos:end="343:50"><literal type="number" pos:start="343:50" pos:end="343:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="345:13" pos:end="347:57"><if pos:start="345:13" pos:end="347:57">if <condition pos:start="345:16" pos:end="345:31">(<expr pos:start="345:17" pos:end="345:30"><name pos:start="345:17" pos:end="345:30"><name pos:start="345:17" pos:end="345:17">c</name><operator pos:start="345:18" pos:end="345:19">-&gt;</operator><name pos:start="345:20" pos:end="345:30">slice_split</name></name></expr>)</condition><block type="pseudo" pos:start="347:17" pos:end="347:57"><block_content pos:start="347:17" pos:end="347:57">

                <expr_stmt pos:start="347:17" pos:end="347:57"><expr pos:start="347:17" pos:end="347:56"><call pos:start="347:17" pos:end="347:56"><name pos:start="347:17" pos:end="347:43">ff_mss12_slicecontext_reset</name><argument_list pos:start="347:44" pos:end="347:56">(<argument pos:start="347:45" pos:end="347:55"><expr pos:start="347:45" pos:end="347:55"><operator pos:start="347:45" pos:end="347:45">&amp;</operator><name pos:start="347:46" pos:end="347:55"><name pos:start="347:46" pos:end="347:48">ctx</name><operator pos:start="347:49" pos:end="347:50">-&gt;</operator><name pos:start="347:51" pos:end="347:52">sc</name><index pos:start="347:53" pos:end="347:55">[<expr pos:start="347:54" pos:end="347:54"><literal type="number" pos:start="347:54" pos:end="347:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="351:9" pos:end="447:65"><if pos:start="351:9" pos:end="391:9">if <condition pos:start="351:12" pos:end="351:19">(<expr pos:start="351:13" pos:end="351:18"><name pos:start="351:13" pos:end="351:18">is_rle</name></expr>)</condition> <block pos:start="351:21" pos:end="391:9">{<block_content pos:start="353:13" pos:end="389:49">

            <if_stmt pos:start="353:13" pos:end="355:27"><if pos:start="353:13" pos:end="355:27">if <condition pos:start="353:16" pos:end="353:63">(<expr pos:start="353:17" pos:end="353:62"><operator pos:start="353:17" pos:end="353:17">(</operator><name pos:start="353:18" pos:end="353:20">ret</name> <operator pos:start="353:22" pos:end="353:22">=</operator> <call pos:start="353:24" pos:end="353:57"><name pos:start="353:24" pos:end="353:37">init_get_bits8</name><argument_list pos:start="353:38" pos:end="353:57">(<argument pos:start="353:39" pos:end="353:41"><expr pos:start="353:39" pos:end="353:41"><operator pos:start="353:39" pos:end="353:39">&amp;</operator><name pos:start="353:40" pos:end="353:41">gb</name></expr></argument>, <argument pos:start="353:44" pos:end="353:46"><expr pos:start="353:44" pos:end="353:46"><name pos:start="353:44" pos:end="353:46">buf</name></expr></argument>, <argument pos:start="353:49" pos:end="353:56"><expr pos:start="353:49" pos:end="353:56"><name pos:start="353:49" pos:end="353:56">buf_size</name></expr></argument>)</argument_list></call><operator pos:start="353:58" pos:end="353:58">)</operator> <operator pos:start="353:60" pos:end="353:60">&lt;</operator> <literal type="number" pos:start="353:62" pos:end="353:62">0</literal></expr>)</condition><block type="pseudo" pos:start="355:17" pos:end="355:27"><block_content pos:start="355:17" pos:end="355:27">

                <return pos:start="355:17" pos:end="355:27">return <expr pos:start="355:24" pos:end="355:26"><name pos:start="355:24" pos:end="355:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <if_stmt pos:start="357:13" pos:end="365:27"><if pos:start="357:13" pos:end="365:27">if <condition pos:start="357:16" pos:end="363:62">(<expr pos:start="357:17" pos:end="363:61"><name pos:start="357:17" pos:end="357:19">ret</name> <operator pos:start="357:21" pos:end="357:21">=</operator> <call pos:start="357:23" pos:end="363:61"><name pos:start="357:23" pos:end="357:32">decode_rle</name><argument_list pos:start="357:33" pos:end="363:61">(<argument pos:start="357:34" pos:end="357:36"><expr pos:start="357:34" pos:end="357:36"><operator pos:start="357:34" pos:end="357:34">&amp;</operator><name pos:start="357:35" pos:end="357:36">gb</name></expr></argument>, <argument pos:start="357:39" pos:end="357:48"><expr pos:start="357:39" pos:end="357:48"><name pos:start="357:39" pos:end="357:48"><name pos:start="357:39" pos:end="357:39">c</name><operator pos:start="357:40" pos:end="357:41">-&gt;</operator><name pos:start="357:42" pos:end="357:48">pal_pic</name></name></expr></argument>, <argument pos:start="357:51" pos:end="357:63"><expr pos:start="357:51" pos:end="357:63"><name pos:start="357:51" pos:end="357:63"><name pos:start="357:51" pos:end="357:51">c</name><operator pos:start="357:52" pos:end="357:53">-&gt;</operator><name pos:start="357:54" pos:end="357:63">pal_stride</name></name></expr></argument>,

                                 <argument pos:start="359:34" pos:end="359:43"><expr pos:start="359:34" pos:end="359:43"><name pos:start="359:34" pos:end="359:43"><name pos:start="359:34" pos:end="359:34">c</name><operator pos:start="359:35" pos:end="359:36">-&gt;</operator><name pos:start="359:37" pos:end="359:43">rgb_pic</name></name></expr></argument>, <argument pos:start="359:46" pos:end="359:58"><expr pos:start="359:46" pos:end="359:58"><name pos:start="359:46" pos:end="359:58"><name pos:start="359:46" pos:end="359:46">c</name><operator pos:start="359:47" pos:end="359:48">-&gt;</operator><name pos:start="359:49" pos:end="359:58">rgb_stride</name></name></expr></argument>, <argument pos:start="359:61" pos:end="359:66"><expr pos:start="359:61" pos:end="359:66"><name pos:start="359:61" pos:end="359:66"><name pos:start="359:61" pos:end="359:61">c</name><operator pos:start="359:62" pos:end="359:63">-&gt;</operator><name pos:start="359:64" pos:end="359:66">pal</name></name></expr></argument>, <argument pos:start="359:69" pos:end="359:76"><expr pos:start="359:69" pos:end="359:76"><name pos:start="359:69" pos:end="359:76">keyframe</name></expr></argument>,

                                 <argument pos:start="361:34" pos:end="361:52"><expr pos:start="361:34" pos:end="361:52"><name pos:start="361:34" pos:end="361:52"><name pos:start="361:34" pos:end="361:36">ctx</name><operator pos:start="361:37" pos:end="361:38">-&gt;</operator><name pos:start="361:39" pos:end="361:52">split_position</name></name></expr></argument>, <argument pos:start="361:55" pos:end="361:55"><expr pos:start="361:55" pos:end="361:55"><literal type="number" pos:start="361:55" pos:end="361:55">0</literal></expr></argument>,

                                 <argument pos:start="363:34" pos:end="363:45"><expr pos:start="363:34" pos:end="363:45"><name pos:start="363:34" pos:end="363:45"><name pos:start="363:34" pos:end="363:38">avctx</name><operator pos:start="363:39" pos:end="363:40">-&gt;</operator><name pos:start="363:41" pos:end="363:45">width</name></name></expr></argument>, <argument pos:start="363:48" pos:end="363:60"><expr pos:start="363:48" pos:end="363:60"><name pos:start="363:48" pos:end="363:60"><name pos:start="363:48" pos:end="363:52">avctx</name><operator pos:start="363:53" pos:end="363:54">-&gt;</operator><name pos:start="363:55" pos:end="363:60">height</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="365:17" pos:end="365:27"><block_content pos:start="365:17" pos:end="365:27">

                <return pos:start="365:17" pos:end="365:27">return <expr pos:start="365:24" pos:end="365:26"><name pos:start="365:24" pos:end="365:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:32"><expr pos:start="367:13" pos:end="367:31"><call pos:start="367:13" pos:end="367:31"><name pos:start="367:13" pos:end="367:26">align_get_bits</name><argument_list pos:start="367:27" pos:end="367:31">(<argument pos:start="367:28" pos:end="367:30"><expr pos:start="367:28" pos:end="367:30"><operator pos:start="367:28" pos:end="367:28">&amp;</operator><name pos:start="367:29" pos:end="367:30">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="371:13" pos:end="381:31"><if pos:start="371:13" pos:end="381:31">if <condition pos:start="371:16" pos:end="371:31">(<expr pos:start="371:17" pos:end="371:30"><name pos:start="371:17" pos:end="371:30"><name pos:start="371:17" pos:end="371:17">c</name><operator pos:start="371:18" pos:end="371:19">-&gt;</operator><name pos:start="371:20" pos:end="371:30">slice_split</name></name></expr>)</condition><block type="pseudo" pos:start="373:17" pos:end="381:31"><block_content pos:start="373:17" pos:end="381:31">

                <if_stmt pos:start="373:17" pos:end="381:31"><if pos:start="373:17" pos:end="381:31">if <condition pos:start="373:20" pos:end="379:66">(<expr pos:start="373:21" pos:end="379:65"><name pos:start="373:21" pos:end="373:23">ret</name> <operator pos:start="373:25" pos:end="373:25">=</operator> <call pos:start="373:27" pos:end="379:65"><name pos:start="373:27" pos:end="373:36">decode_rle</name><argument_list pos:start="373:37" pos:end="379:65">(<argument pos:start="373:38" pos:end="373:40"><expr pos:start="373:38" pos:end="373:40"><operator pos:start="373:38" pos:end="373:38">&amp;</operator><name pos:start="373:39" pos:end="373:40">gb</name></expr></argument>, <argument pos:start="373:43" pos:end="373:52"><expr pos:start="373:43" pos:end="373:52"><name pos:start="373:43" pos:end="373:52"><name pos:start="373:43" pos:end="373:43">c</name><operator pos:start="373:44" pos:end="373:45">-&gt;</operator><name pos:start="373:46" pos:end="373:52">pal_pic</name></name></expr></argument>, <argument pos:start="373:55" pos:end="373:67"><expr pos:start="373:55" pos:end="373:67"><name pos:start="373:55" pos:end="373:67"><name pos:start="373:55" pos:end="373:55">c</name><operator pos:start="373:56" pos:end="373:57">-&gt;</operator><name pos:start="373:58" pos:end="373:67">pal_stride</name></name></expr></argument>,

                                     <argument pos:start="375:38" pos:end="375:47"><expr pos:start="375:38" pos:end="375:47"><name pos:start="375:38" pos:end="375:47"><name pos:start="375:38" pos:end="375:38">c</name><operator pos:start="375:39" pos:end="375:40">-&gt;</operator><name pos:start="375:41" pos:end="375:47">rgb_pic</name></name></expr></argument>, <argument pos:start="375:50" pos:end="375:62"><expr pos:start="375:50" pos:end="375:62"><name pos:start="375:50" pos:end="375:62"><name pos:start="375:50" pos:end="375:50">c</name><operator pos:start="375:51" pos:end="375:52">-&gt;</operator><name pos:start="375:53" pos:end="375:62">rgb_stride</name></name></expr></argument>, <argument pos:start="375:65" pos:end="375:70"><expr pos:start="375:65" pos:end="375:70"><name pos:start="375:65" pos:end="375:70"><name pos:start="375:65" pos:end="375:65">c</name><operator pos:start="375:66" pos:end="375:67">-&gt;</operator><name pos:start="375:68" pos:end="375:70">pal</name></name></expr></argument>, <argument pos:start="375:73" pos:end="375:80"><expr pos:start="375:73" pos:end="375:80"><name pos:start="375:73" pos:end="375:80">keyframe</name></expr></argument>,

                                     <argument pos:start="377:38" pos:end="377:56"><expr pos:start="377:38" pos:end="377:56"><name pos:start="377:38" pos:end="377:56"><name pos:start="377:38" pos:end="377:40">ctx</name><operator pos:start="377:41" pos:end="377:42">-&gt;</operator><name pos:start="377:43" pos:end="377:56">split_position</name></name></expr></argument>, <argument pos:start="377:59" pos:end="377:59"><expr pos:start="377:59" pos:end="377:59"><literal type="number" pos:start="377:59" pos:end="377:59">1</literal></expr></argument>,

                                     <argument pos:start="379:38" pos:end="379:49"><expr pos:start="379:38" pos:end="379:49"><name pos:start="379:38" pos:end="379:49"><name pos:start="379:38" pos:end="379:42">avctx</name><operator pos:start="379:43" pos:end="379:44">-&gt;</operator><name pos:start="379:45" pos:end="379:49">width</name></name></expr></argument>, <argument pos:start="379:52" pos:end="379:64"><expr pos:start="379:52" pos:end="379:64"><name pos:start="379:52" pos:end="379:64"><name pos:start="379:52" pos:end="379:56">avctx</name><operator pos:start="379:57" pos:end="379:58">-&gt;</operator><name pos:start="379:59" pos:end="379:64">height</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="381:21" pos:end="381:31"><block_content pos:start="381:21" pos:end="381:31">

                    <return pos:start="381:21" pos:end="381:31">return <expr pos:start="381:28" pos:end="381:30"><name pos:start="381:28" pos:end="381:30">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="385:13" pos:end="385:32"><expr pos:start="385:13" pos:end="385:31"><call pos:start="385:13" pos:end="385:31"><name pos:start="385:13" pos:end="385:26">align_get_bits</name><argument_list pos:start="385:27" pos:end="385:31">(<argument pos:start="385:28" pos:end="385:30"><expr pos:start="385:28" pos:end="385:30"><operator pos:start="385:28" pos:end="385:28">&amp;</operator><name pos:start="385:29" pos:end="385:30">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="387:13" pos:end="387:49"><expr pos:start="387:13" pos:end="387:48"><name pos:start="387:13" pos:end="387:15">buf</name>      <operator pos:start="387:22" pos:end="387:23">+=</operator> <call pos:start="387:25" pos:end="387:43"><name pos:start="387:25" pos:end="387:38">get_bits_count</name><argument_list pos:start="387:39" pos:end="387:43">(<argument pos:start="387:40" pos:end="387:42"><expr pos:start="387:40" pos:end="387:42"><operator pos:start="387:40" pos:end="387:40">&amp;</operator><name pos:start="387:41" pos:end="387:42">gb</name></expr></argument>)</argument_list></call> <operator pos:start="387:45" pos:end="387:46">&gt;&gt;</operator> <literal type="number" pos:start="387:48" pos:end="387:48">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="389:13" pos:end="389:49"><expr pos:start="389:13" pos:end="389:48"><name pos:start="389:13" pos:end="389:20">buf_size</name> <operator pos:start="389:22" pos:end="389:23">-=</operator> <call pos:start="389:25" pos:end="389:43"><name pos:start="389:25" pos:end="389:38">get_bits_count</name><argument_list pos:start="389:39" pos:end="389:43">(<argument pos:start="389:40" pos:end="389:42"><expr pos:start="389:40" pos:end="389:42"><operator pos:start="389:40" pos:end="389:40">&amp;</operator><name pos:start="389:41" pos:end="389:42">gb</name></expr></argument>)</argument_list></call> <operator pos:start="389:45" pos:end="389:46">&gt;&gt;</operator> <literal type="number" pos:start="389:48" pos:end="389:48">3</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="391:11" pos:end="445:9">else if <condition pos:start="391:19" pos:end="391:53">(<expr pos:start="391:20" pos:end="391:52"><operator pos:start="391:20" pos:end="391:20">!</operator><name pos:start="391:21" pos:end="391:33">implicit_rect</name> <operator pos:start="391:35" pos:end="391:36">||</operator> <name pos:start="391:38" pos:end="391:46">wmv9_mask</name> <operator pos:start="391:48" pos:end="391:49">!=</operator> <operator pos:start="391:51" pos:end="391:51">-</operator><literal type="number" pos:start="391:52" pos:end="391:52">1</literal></expr>)</condition> <block pos:start="391:55" pos:end="445:9">{<block_content pos:start="393:13" pos:end="443:13">

            <if_stmt pos:start="393:13" pos:end="395:43"><if pos:start="393:13" pos:end="395:43">if <condition pos:start="393:16" pos:end="393:29">(<expr pos:start="393:17" pos:end="393:28"><name pos:start="393:17" pos:end="393:28"><name pos:start="393:17" pos:end="393:17">c</name><operator pos:start="393:18" pos:end="393:19">-&gt;</operator><name pos:start="393:20" pos:end="393:28">corrupted</name></name></expr>)</condition><block type="pseudo" pos:start="395:17" pos:end="395:43"><block_content pos:start="395:17" pos:end="395:43">

                <return pos:start="395:17" pos:end="395:43">return <expr pos:start="395:24" pos:end="395:42"><name pos:start="395:24" pos:end="395:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:66"><expr pos:start="397:13" pos:end="397:65"><call pos:start="397:13" pos:end="397:65"><name pos:start="397:13" pos:end="397:28">bytestream2_init</name><argument_list pos:start="397:29" pos:end="397:65">(<argument pos:start="397:30" pos:end="397:32"><expr pos:start="397:30" pos:end="397:32"><operator pos:start="397:30" pos:end="397:30">&amp;</operator><name pos:start="397:31" pos:end="397:32">gB</name></expr></argument>, <argument pos:start="397:35" pos:end="397:37"><expr pos:start="397:35" pos:end="397:37"><name pos:start="397:35" pos:end="397:37">buf</name></expr></argument>, <argument pos:start="397:40" pos:end="397:64"><expr pos:start="397:40" pos:end="397:64"><name pos:start="397:40" pos:end="397:47">buf_size</name> <operator pos:start="397:49" pos:end="397:49">+</operator> <name pos:start="397:51" pos:end="397:64">ARITH2_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="399:13" pos:end="399:38"><expr pos:start="399:13" pos:end="399:37"><call pos:start="399:13" pos:end="399:37"><name pos:start="399:13" pos:end="399:23">arith2_init</name><argument_list pos:start="399:24" pos:end="399:37">(<argument pos:start="399:25" pos:end="399:31"><expr pos:start="399:25" pos:end="399:31"><operator pos:start="399:25" pos:end="399:25">&amp;</operator><name pos:start="399:26" pos:end="399:31">acoder</name></expr></argument>, <argument pos:start="399:34" pos:end="399:36"><expr pos:start="399:34" pos:end="399:36"><operator pos:start="399:34" pos:end="399:34">&amp;</operator><name pos:start="399:35" pos:end="399:36">gB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="401:13" pos:end="401:35"><expr pos:start="401:13" pos:end="401:34"><name pos:start="401:13" pos:end="401:23"><name pos:start="401:13" pos:end="401:13">c</name><operator pos:start="401:14" pos:end="401:15">-&gt;</operator><name pos:start="401:16" pos:end="401:23">keyframe</name></name> <operator pos:start="401:25" pos:end="401:25">=</operator> <name pos:start="401:27" pos:end="401:34">keyframe</name></expr>;</expr_stmt>

            <if_stmt pos:start="403:13" pos:end="409:43"><if pos:start="403:13" pos:end="409:43">if <condition pos:start="403:16" pos:end="407:73">(<expr pos:start="403:17" pos:end="407:72"><name pos:start="403:17" pos:end="403:28"><name pos:start="403:17" pos:end="403:17">c</name><operator pos:start="403:18" pos:end="403:19">-&gt;</operator><name pos:start="403:20" pos:end="403:28">corrupted</name></name> <operator pos:start="403:30" pos:end="403:30">=</operator> <call pos:start="403:32" pos:end="407:72"><name pos:start="403:32" pos:end="403:51">ff_mss12_decode_rect</name><argument_list pos:start="403:52" pos:end="407:72">(<argument pos:start="403:53" pos:end="403:63"><expr pos:start="403:53" pos:end="403:63"><operator pos:start="403:53" pos:end="403:53">&amp;</operator><name pos:start="403:54" pos:end="403:63"><name pos:start="403:54" pos:end="403:56">ctx</name><operator pos:start="403:57" pos:end="403:58">-&gt;</operator><name pos:start="403:59" pos:end="403:60">sc</name><index pos:start="403:61" pos:end="403:63">[<expr pos:start="403:62" pos:end="403:62"><literal type="number" pos:start="403:62" pos:end="403:62">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="403:66" pos:end="403:72"><expr pos:start="403:66" pos:end="403:72"><operator pos:start="403:66" pos:end="403:66">&amp;</operator><name pos:start="403:67" pos:end="403:72">acoder</name></expr></argument>, <argument pos:start="403:75" pos:end="403:75"><expr pos:start="403:75" pos:end="403:75"><literal type="number" pos:start="403:75" pos:end="403:75">0</literal></expr></argument>, <argument pos:start="403:78" pos:end="403:78"><expr pos:start="403:78" pos:end="403:78"><literal type="number" pos:start="403:78" pos:end="403:78">0</literal></expr></argument>,

                                                    <argument pos:start="405:53" pos:end="405:64"><expr pos:start="405:53" pos:end="405:64"><name pos:start="405:53" pos:end="405:64"><name pos:start="405:53" pos:end="405:57">avctx</name><operator pos:start="405:58" pos:end="405:59">-&gt;</operator><name pos:start="405:60" pos:end="405:64">width</name></name></expr></argument>,

                                                    <argument pos:start="407:53" pos:end="407:71"><expr pos:start="407:53" pos:end="407:71"><name pos:start="407:53" pos:end="407:71"><name pos:start="407:53" pos:end="407:55">ctx</name><operator pos:start="407:56" pos:end="407:57">-&gt;</operator><name pos:start="407:58" pos:end="407:71">split_position</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="409:17" pos:end="409:43"><block_content pos:start="409:17" pos:end="409:43">

                <return pos:start="409:17" pos:end="409:43">return <expr pos:start="409:24" pos:end="409:42"><name pos:start="409:24" pos:end="409:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="413:13" pos:end="413:59"><expr pos:start="413:13" pos:end="413:58"><name pos:start="413:13" pos:end="413:15">buf</name>      <operator pos:start="413:22" pos:end="413:23">+=</operator> <call pos:start="413:25" pos:end="413:58"><name pos:start="413:25" pos:end="413:49">arith2_get_consumed_bytes</name><argument_list pos:start="413:50" pos:end="413:58">(<argument pos:start="413:51" pos:end="413:57"><expr pos:start="413:51" pos:end="413:57"><operator pos:start="413:51" pos:end="413:51">&amp;</operator><name pos:start="413:52" pos:end="413:57">acoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="415:13" pos:end="415:59"><expr pos:start="415:13" pos:end="415:58"><name pos:start="415:13" pos:end="415:20">buf_size</name> <operator pos:start="415:22" pos:end="415:23">-=</operator> <call pos:start="415:25" pos:end="415:58"><name pos:start="415:25" pos:end="415:49">arith2_get_consumed_bytes</name><argument_list pos:start="415:50" pos:end="415:58">(<argument pos:start="415:51" pos:end="415:57"><expr pos:start="415:51" pos:end="415:57"><operator pos:start="415:51" pos:end="415:51">&amp;</operator><name pos:start="415:52" pos:end="415:57">acoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="417:13" pos:end="443:13"><if pos:start="417:13" pos:end="443:13">if <condition pos:start="417:16" pos:end="417:31">(<expr pos:start="417:17" pos:end="417:30"><name pos:start="417:17" pos:end="417:30"><name pos:start="417:17" pos:end="417:17">c</name><operator pos:start="417:18" pos:end="417:19">-&gt;</operator><name pos:start="417:20" pos:end="417:30">slice_split</name></name></expr>)</condition> <block pos:start="417:33" pos:end="443:13">{<block_content pos:start="419:17" pos:end="441:63">

                <if_stmt pos:start="419:17" pos:end="421:47"><if pos:start="419:17" pos:end="421:47">if <condition pos:start="419:20" pos:end="419:33">(<expr pos:start="419:21" pos:end="419:32"><name pos:start="419:21" pos:end="419:28">buf_size</name> <operator pos:start="419:30" pos:end="419:30">&lt;</operator> <literal type="number" pos:start="419:32" pos:end="419:32">1</literal></expr>)</condition><block type="pseudo" pos:start="421:21" pos:end="421:47"><block_content pos:start="421:21" pos:end="421:47">

                    <return pos:start="421:21" pos:end="421:47">return <expr pos:start="421:28" pos:end="421:46"><name pos:start="421:28" pos:end="421:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="423:17" pos:end="423:70"><expr pos:start="423:17" pos:end="423:69"><call pos:start="423:17" pos:end="423:69"><name pos:start="423:17" pos:end="423:32">bytestream2_init</name><argument_list pos:start="423:33" pos:end="423:69">(<argument pos:start="423:34" pos:end="423:36"><expr pos:start="423:34" pos:end="423:36"><operator pos:start="423:34" pos:end="423:34">&amp;</operator><name pos:start="423:35" pos:end="423:36">gB</name></expr></argument>, <argument pos:start="423:39" pos:end="423:41"><expr pos:start="423:39" pos:end="423:41"><name pos:start="423:39" pos:end="423:41">buf</name></expr></argument>, <argument pos:start="423:44" pos:end="423:68"><expr pos:start="423:44" pos:end="423:68"><name pos:start="423:44" pos:end="423:51">buf_size</name> <operator pos:start="423:53" pos:end="423:53">+</operator> <name pos:start="423:55" pos:end="423:68">ARITH2_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="425:17" pos:end="425:42"><expr pos:start="425:17" pos:end="425:41"><call pos:start="425:17" pos:end="425:41"><name pos:start="425:17" pos:end="425:27">arith2_init</name><argument_list pos:start="425:28" pos:end="425:41">(<argument pos:start="425:29" pos:end="425:35"><expr pos:start="425:29" pos:end="425:35"><operator pos:start="425:29" pos:end="425:29">&amp;</operator><name pos:start="425:30" pos:end="425:35">acoder</name></expr></argument>, <argument pos:start="425:38" pos:end="425:40"><expr pos:start="425:38" pos:end="425:40"><operator pos:start="425:38" pos:end="425:38">&amp;</operator><name pos:start="425:39" pos:end="425:40">gB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="427:17" pos:end="435:47"><if pos:start="427:17" pos:end="435:47">if <condition pos:start="427:20" pos:end="433:93">(<expr pos:start="427:21" pos:end="433:92"><name pos:start="427:21" pos:end="427:32"><name pos:start="427:21" pos:end="427:21">c</name><operator pos:start="427:22" pos:end="427:23">-&gt;</operator><name pos:start="427:24" pos:end="427:32">corrupted</name></name> <operator pos:start="427:34" pos:end="427:34">=</operator> <call pos:start="427:36" pos:end="433:92"><name pos:start="427:36" pos:end="427:55">ff_mss12_decode_rect</name><argument_list pos:start="427:56" pos:end="433:92">(<argument pos:start="427:57" pos:end="427:67"><expr pos:start="427:57" pos:end="427:67"><operator pos:start="427:57" pos:end="427:57">&amp;</operator><name pos:start="427:58" pos:end="427:67"><name pos:start="427:58" pos:end="427:60">ctx</name><operator pos:start="427:61" pos:end="427:62">-&gt;</operator><name pos:start="427:63" pos:end="427:64">sc</name><index pos:start="427:65" pos:end="427:67">[<expr pos:start="427:66" pos:end="427:66"><literal type="number" pos:start="427:66" pos:end="427:66">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="427:70" pos:end="427:76"><expr pos:start="427:70" pos:end="427:76"><operator pos:start="427:70" pos:end="427:70">&amp;</operator><name pos:start="427:71" pos:end="427:76">acoder</name></expr></argument>, <argument pos:start="427:79" pos:end="427:79"><expr pos:start="427:79" pos:end="427:79"><literal type="number" pos:start="427:79" pos:end="427:79">0</literal></expr></argument>,

                                                        <argument pos:start="429:57" pos:end="429:75"><expr pos:start="429:57" pos:end="429:75"><name pos:start="429:57" pos:end="429:75"><name pos:start="429:57" pos:end="429:59">ctx</name><operator pos:start="429:60" pos:end="429:61">-&gt;</operator><name pos:start="429:62" pos:end="429:75">split_position</name></name></expr></argument>,

                                                        <argument pos:start="431:57" pos:end="431:68"><expr pos:start="431:57" pos:end="431:68"><name pos:start="431:57" pos:end="431:68"><name pos:start="431:57" pos:end="431:61">avctx</name><operator pos:start="431:62" pos:end="431:63">-&gt;</operator><name pos:start="431:64" pos:end="431:68">width</name></name></expr></argument>,

                                                        <argument pos:start="433:57" pos:end="433:91"><expr pos:start="433:57" pos:end="433:91"><name pos:start="433:57" pos:end="433:69"><name pos:start="433:57" pos:end="433:61">avctx</name><operator pos:start="433:62" pos:end="433:63">-&gt;</operator><name pos:start="433:64" pos:end="433:69">height</name></name> <operator pos:start="433:71" pos:end="433:71">-</operator> <name pos:start="433:73" pos:end="433:91"><name pos:start="433:73" pos:end="433:75">ctx</name><operator pos:start="433:76" pos:end="433:77">-&gt;</operator><name pos:start="433:78" pos:end="433:91">split_position</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="435:21" pos:end="435:47"><block_content pos:start="435:21" pos:end="435:47">

                    <return pos:start="435:21" pos:end="435:47">return <expr pos:start="435:28" pos:end="435:46"><name pos:start="435:28" pos:end="435:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



                <expr_stmt pos:start="439:17" pos:end="439:63"><expr pos:start="439:17" pos:end="439:62"><name pos:start="439:17" pos:end="439:19">buf</name>      <operator pos:start="439:26" pos:end="439:27">+=</operator> <call pos:start="439:29" pos:end="439:62"><name pos:start="439:29" pos:end="439:53">arith2_get_consumed_bytes</name><argument_list pos:start="439:54" pos:end="439:62">(<argument pos:start="439:55" pos:end="439:61"><expr pos:start="439:55" pos:end="439:61"><operator pos:start="439:55" pos:end="439:55">&amp;</operator><name pos:start="439:56" pos:end="439:61">acoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="441:17" pos:end="441:63"><expr pos:start="441:17" pos:end="441:62"><name pos:start="441:17" pos:end="441:24">buf_size</name> <operator pos:start="441:26" pos:end="441:27">-=</operator> <call pos:start="441:29" pos:end="441:62"><name pos:start="441:29" pos:end="441:53">arith2_get_consumed_bytes</name><argument_list pos:start="441:54" pos:end="441:62">(<argument pos:start="441:55" pos:end="441:61"><expr pos:start="441:55" pos:end="441:61"><operator pos:start="441:55" pos:end="441:55">&amp;</operator><name pos:start="441:56" pos:end="441:61">acoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="445:11" pos:end="447:65">else<block type="pseudo" pos:start="447:13" pos:end="447:65"><block_content pos:start="447:13" pos:end="447:65">

            <expr_stmt pos:start="447:13" pos:end="447:65"><expr pos:start="447:13" pos:end="447:64"><call pos:start="447:13" pos:end="447:64"><name pos:start="447:13" pos:end="447:18">memset</name><argument_list pos:start="447:19" pos:end="447:64">(<argument pos:start="447:20" pos:end="447:29"><expr pos:start="447:20" pos:end="447:29"><name pos:start="447:20" pos:end="447:29"><name pos:start="447:20" pos:end="447:20">c</name><operator pos:start="447:21" pos:end="447:22">-&gt;</operator><name pos:start="447:23" pos:end="447:29">pal_pic</name></name></expr></argument>, <argument pos:start="447:32" pos:end="447:32"><expr pos:start="447:32" pos:end="447:32"><literal type="number" pos:start="447:32" pos:end="447:32">0</literal></expr></argument>, <argument pos:start="447:35" pos:end="447:63"><expr pos:start="447:35" pos:end="447:63"><name pos:start="447:35" pos:end="447:47"><name pos:start="447:35" pos:end="447:35">c</name><operator pos:start="447:36" pos:end="447:37">-&gt;</operator><name pos:start="447:38" pos:end="447:47">pal_stride</name></name> <operator pos:start="447:49" pos:end="447:49">*</operator> <name pos:start="447:51" pos:end="447:63"><name pos:start="447:51" pos:end="447:55">avctx</name><operator pos:start="447:56" pos:end="447:57">-&gt;</operator><name pos:start="447:58" pos:end="447:63">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="453:5" pos:end="515:5"><if pos:start="453:5" pos:end="515:5">if <condition pos:start="453:8" pos:end="453:17">(<expr pos:start="453:9" pos:end="453:16"><name pos:start="453:9" pos:end="453:16">has_wmv9</name></expr>)</condition> <block pos:start="453:19" pos:end="515:5">{<block_content pos:start="455:9" pos:end="513:9">

        <for pos:start="455:9" pos:end="513:9">for <control pos:start="455:13" pos:end="455:40">(<init pos:start="455:14" pos:end="455:19"><expr pos:start="455:14" pos:end="455:18"><name pos:start="455:14" pos:end="455:14">i</name> <operator pos:start="455:16" pos:end="455:16">=</operator> <literal type="number" pos:start="455:18" pos:end="455:18">0</literal></expr>;</init> <condition pos:start="455:21" pos:end="455:35"><expr pos:start="455:21" pos:end="455:34"><name pos:start="455:21" pos:end="455:21">i</name> <operator pos:start="455:23" pos:end="455:23">&lt;</operator> <name pos:start="455:25" pos:end="455:34">used_rects</name></expr>;</condition> <incr pos:start="455:37" pos:end="455:39"><expr pos:start="455:37" pos:end="455:39"><name pos:start="455:37" pos:end="455:37">i</name><operator pos:start="455:38" pos:end="455:39">++</operator></expr></incr>)</control> <block pos:start="455:42" pos:end="513:9">{<block_content pos:start="457:13" pos:end="511:13">

            <decl_stmt pos:start="457:13" pos:end="457:35"><decl pos:start="457:13" pos:end="457:34"><type pos:start="457:13" pos:end="457:15"><name pos:start="457:13" pos:end="457:15">int</name></type> <name pos:start="457:17" pos:end="457:17">x</name> <init pos:start="457:19" pos:end="457:34">= <expr pos:start="457:21" pos:end="457:34"><name pos:start="457:21" pos:end="457:32"><name pos:start="457:21" pos:end="457:29">wmv9rects</name><index pos:start="457:30" pos:end="457:32">[<expr pos:start="457:31" pos:end="457:31"><name pos:start="457:31" pos:end="457:31">i</name></expr>]</index></name><operator pos:start="457:33" pos:end="457:33">.</operator><name pos:start="457:34" pos:end="457:34">x</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="459:13" pos:end="459:35"><decl pos:start="459:13" pos:end="459:34"><type pos:start="459:13" pos:end="459:15"><name pos:start="459:13" pos:end="459:15">int</name></type> <name pos:start="459:17" pos:end="459:17">y</name> <init pos:start="459:19" pos:end="459:34">= <expr pos:start="459:21" pos:end="459:34"><name pos:start="459:21" pos:end="459:32"><name pos:start="459:21" pos:end="459:29">wmv9rects</name><index pos:start="459:30" pos:end="459:32">[<expr pos:start="459:31" pos:end="459:31"><name pos:start="459:31" pos:end="459:31">i</name></expr>]</index></name><operator pos:start="459:33" pos:end="459:33">.</operator><name pos:start="459:34" pos:end="459:34">y</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="461:13" pos:end="461:35"><decl pos:start="461:13" pos:end="461:34"><type pos:start="461:13" pos:end="461:15"><name pos:start="461:13" pos:end="461:15">int</name></type> <name pos:start="461:17" pos:end="461:17">w</name> <init pos:start="461:19" pos:end="461:34">= <expr pos:start="461:21" pos:end="461:34"><name pos:start="461:21" pos:end="461:32"><name pos:start="461:21" pos:end="461:29">wmv9rects</name><index pos:start="461:30" pos:end="461:32">[<expr pos:start="461:31" pos:end="461:31"><name pos:start="461:31" pos:end="461:31">i</name></expr>]</index></name><operator pos:start="461:33" pos:end="461:33">.</operator><name pos:start="461:34" pos:end="461:34">w</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="463:13" pos:end="463:35"><decl pos:start="463:13" pos:end="463:34"><type pos:start="463:13" pos:end="463:15"><name pos:start="463:13" pos:end="463:15">int</name></type> <name pos:start="463:17" pos:end="463:17">h</name> <init pos:start="463:19" pos:end="463:34">= <expr pos:start="463:21" pos:end="463:34"><name pos:start="463:21" pos:end="463:32"><name pos:start="463:21" pos:end="463:29">wmv9rects</name><index pos:start="463:30" pos:end="463:32">[<expr pos:start="463:31" pos:end="463:31"><name pos:start="463:31" pos:end="463:31">i</name></expr>]</index></name><operator pos:start="463:33" pos:end="463:33">.</operator><name pos:start="463:34" pos:end="463:34">h</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="465:13" pos:end="511:13"><if pos:start="465:13" pos:end="483:13">if <condition pos:start="465:16" pos:end="465:35">(<expr pos:start="465:17" pos:end="465:34"><name pos:start="465:17" pos:end="465:28"><name pos:start="465:17" pos:end="465:25">wmv9rects</name><index pos:start="465:26" pos:end="465:28">[<expr pos:start="465:27" pos:end="465:27"><name pos:start="465:27" pos:end="465:27">i</name></expr>]</index></name><operator pos:start="465:29" pos:end="465:29">.</operator><name pos:start="465:30" pos:end="465:34">coded</name></expr>)</condition> <block pos:start="465:37" pos:end="483:13">{<block_content pos:start="467:17" pos:end="481:51">

                <decl_stmt pos:start="467:17" pos:end="467:39"><decl pos:start="467:17" pos:end="467:38"><type pos:start="467:17" pos:end="467:19"><name pos:start="467:17" pos:end="467:19">int</name></type> <name pos:start="467:21" pos:end="467:38">WMV9codedFrameSize</name></decl>;</decl_stmt>

                <if_stmt pos:start="469:17" pos:end="471:47"><if pos:start="469:17" pos:end="471:47">if <condition pos:start="469:20" pos:end="469:73">(<expr pos:start="469:21" pos:end="469:72"><name pos:start="469:21" pos:end="469:28">buf_size</name> <operator pos:start="469:30" pos:end="469:30">&lt;</operator> <literal type="number" pos:start="469:32" pos:end="469:32">4</literal> <operator pos:start="469:34" pos:end="469:35">||</operator> <operator pos:start="469:37" pos:end="469:37">!</operator><operator pos:start="469:38" pos:end="469:38">(</operator><name pos:start="469:39" pos:end="469:56">WMV9codedFrameSize</name> <operator pos:start="469:58" pos:end="469:58">=</operator> <call pos:start="469:60" pos:end="469:71"><name pos:start="469:60" pos:end="469:66">AV_RL24</name><argument_list pos:start="469:67" pos:end="469:71">(<argument pos:start="469:68" pos:end="469:70"><expr pos:start="469:68" pos:end="469:70"><name pos:start="469:68" pos:end="469:70">buf</name></expr></argument>)</argument_list></call><operator pos:start="469:72" pos:end="469:72">)</operator></expr>)</condition><block type="pseudo" pos:start="471:21" pos:end="471:47"><block_content pos:start="471:21" pos:end="471:47">

                    <return pos:start="471:21" pos:end="471:47">return <expr pos:start="471:28" pos:end="471:46"><name pos:start="471:28" pos:end="471:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <if_stmt pos:start="473:17" pos:end="477:31"><if pos:start="473:17" pos:end="477:31">if <condition pos:start="473:20" pos:end="475:61">(<expr pos:start="473:21" pos:end="475:60"><name pos:start="473:21" pos:end="473:23">ret</name> <operator pos:start="473:25" pos:end="473:25">=</operator> <call pos:start="473:27" pos:end="475:60"><name pos:start="473:27" pos:end="473:37">decode_wmv9</name><argument_list pos:start="473:38" pos:end="475:60">(<argument pos:start="473:39" pos:end="473:43"><expr pos:start="473:39" pos:end="473:43"><name pos:start="473:39" pos:end="473:43">avctx</name></expr></argument>, <argument pos:start="473:46" pos:end="473:52"><expr pos:start="473:46" pos:end="473:52"><name pos:start="473:46" pos:end="473:48">buf</name> <operator pos:start="473:50" pos:end="473:50">+</operator> <literal type="number" pos:start="473:52" pos:end="473:52">3</literal></expr></argument>, <argument pos:start="473:55" pos:end="473:66"><expr pos:start="473:55" pos:end="473:66"><name pos:start="473:55" pos:end="473:62">buf_size</name> <operator pos:start="473:64" pos:end="473:64">-</operator> <literal type="number" pos:start="473:66" pos:end="473:66">3</literal></expr></argument>,

                                      <argument pos:start="475:39" pos:end="475:39"><expr pos:start="475:39" pos:end="475:39"><name pos:start="475:39" pos:end="475:39">x</name></expr></argument>, <argument pos:start="475:42" pos:end="475:42"><expr pos:start="475:42" pos:end="475:42"><name pos:start="475:42" pos:end="475:42">y</name></expr></argument>, <argument pos:start="475:45" pos:end="475:45"><expr pos:start="475:45" pos:end="475:45"><name pos:start="475:45" pos:end="475:45">w</name></expr></argument>, <argument pos:start="475:48" pos:end="475:48"><expr pos:start="475:48" pos:end="475:48"><name pos:start="475:48" pos:end="475:48">h</name></expr></argument>, <argument pos:start="475:51" pos:end="475:59"><expr pos:start="475:51" pos:end="475:59"><name pos:start="475:51" pos:end="475:59">wmv9_mask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="477:21" pos:end="477:31"><block_content pos:start="477:21" pos:end="477:31">

                    <return pos:start="477:21" pos:end="477:31">return <expr pos:start="477:28" pos:end="477:30"><name pos:start="477:28" pos:end="477:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="479:17" pos:end="479:51"><expr pos:start="479:17" pos:end="479:50"><name pos:start="479:17" pos:end="479:19">buf</name>      <operator pos:start="479:26" pos:end="479:27">+=</operator> <name pos:start="479:29" pos:end="479:46">WMV9codedFrameSize</name> <operator pos:start="479:48" pos:end="479:48">+</operator> <literal type="number" pos:start="479:50" pos:end="479:50">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="481:17" pos:end="481:51"><expr pos:start="481:17" pos:end="481:50"><name pos:start="481:17" pos:end="481:24">buf_size</name> <operator pos:start="481:26" pos:end="481:27">-=</operator> <name pos:start="481:29" pos:end="481:46">WMV9codedFrameSize</name> <operator pos:start="481:48" pos:end="481:48">+</operator> <literal type="number" pos:start="481:50" pos:end="481:50">3</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="483:15" pos:end="511:13">else <block pos:start="483:20" pos:end="511:13">{<block_content pos:start="485:17" pos:end="509:17">

                <decl_stmt pos:start="485:17" pos:end="485:70"><decl pos:start="485:17" pos:end="485:69"><type pos:start="485:17" pos:end="485:25"><name pos:start="485:17" pos:end="485:23">uint8_t</name> <modifier pos:start="485:25" pos:end="485:25">*</modifier></type><name pos:start="485:26" pos:end="485:28">dst</name> <init pos:start="485:30" pos:end="485:69">= <expr pos:start="485:32" pos:end="485:69"><name pos:start="485:32" pos:end="485:41"><name pos:start="485:32" pos:end="485:32">c</name><operator pos:start="485:33" pos:end="485:34">-&gt;</operator><name pos:start="485:35" pos:end="485:41">rgb_pic</name></name> <operator pos:start="485:43" pos:end="485:43">+</operator> <name pos:start="485:45" pos:end="485:45">y</name> <operator pos:start="485:47" pos:end="485:47">*</operator> <name pos:start="485:49" pos:end="485:61"><name pos:start="485:49" pos:end="485:49">c</name><operator pos:start="485:50" pos:end="485:51">-&gt;</operator><name pos:start="485:52" pos:end="485:61">rgb_stride</name></name> <operator pos:start="485:63" pos:end="485:63">+</operator> <name pos:start="485:65" pos:end="485:65">x</name> <operator pos:start="485:67" pos:end="485:67">*</operator> <literal type="number" pos:start="485:69" pos:end="485:69">3</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="487:17" pos:end="509:17"><if pos:start="487:17" pos:end="499:17">if <condition pos:start="487:20" pos:end="487:36">(<expr pos:start="487:21" pos:end="487:35"><name pos:start="487:21" pos:end="487:29">wmv9_mask</name> <operator pos:start="487:31" pos:end="487:32">!=</operator> <operator pos:start="487:34" pos:end="487:34">-</operator><literal type="number" pos:start="487:35" pos:end="487:35">1</literal></expr>)</condition> <block pos:start="487:38" pos:end="499:17">{<block_content pos:start="489:21" pos:end="497:57">

                    <expr_stmt pos:start="489:21" pos:end="497:57"><expr pos:start="489:21" pos:end="497:56"><call pos:start="489:21" pos:end="497:56"><name pos:start="489:21" pos:end="489:50"><name pos:start="489:21" pos:end="489:23">ctx</name><operator pos:start="489:24" pos:end="489:25">-&gt;</operator><name pos:start="489:26" pos:end="489:28">dsp</name><operator pos:start="489:29" pos:end="489:29">.</operator><name pos:start="489:30" pos:end="489:50">mss2_gray_fill_masked</name></name><argument_list pos:start="489:51" pos:end="497:56">(<argument pos:start="489:52" pos:end="489:54"><expr pos:start="489:52" pos:end="489:54"><name pos:start="489:52" pos:end="489:54">dst</name></expr></argument>, <argument pos:start="489:57" pos:end="489:69"><expr pos:start="489:57" pos:end="489:69"><name pos:start="489:57" pos:end="489:69"><name pos:start="489:57" pos:end="489:57">c</name><operator pos:start="489:58" pos:end="489:59">-&gt;</operator><name pos:start="489:60" pos:end="489:69">rgb_stride</name></name></expr></argument>,

                                                   <argument pos:start="491:52" pos:end="491:60"><expr pos:start="491:52" pos:end="491:60"><name pos:start="491:52" pos:end="491:60">wmv9_mask</name></expr></argument>,

                                                   <argument pos:start="493:52" pos:end="493:85"><expr pos:start="493:52" pos:end="493:85"><name pos:start="493:52" pos:end="493:61"><name pos:start="493:52" pos:end="493:52">c</name><operator pos:start="493:53" pos:end="493:54">-&gt;</operator><name pos:start="493:55" pos:end="493:61">pal_pic</name></name> <operator pos:start="493:63" pos:end="493:63">+</operator> <name pos:start="493:65" pos:end="493:65">y</name> <operator pos:start="493:67" pos:end="493:67">*</operator> <name pos:start="493:69" pos:end="493:81"><name pos:start="493:69" pos:end="493:69">c</name><operator pos:start="493:70" pos:end="493:71">-&gt;</operator><name pos:start="493:72" pos:end="493:81">pal_stride</name></name> <operator pos:start="493:83" pos:end="493:83">+</operator> <name pos:start="493:85" pos:end="493:85">x</name></expr></argument>,

                                                   <argument pos:start="495:52" pos:end="495:64"><expr pos:start="495:52" pos:end="495:64"><name pos:start="495:52" pos:end="495:64"><name pos:start="495:52" pos:end="495:52">c</name><operator pos:start="495:53" pos:end="495:54">-&gt;</operator><name pos:start="495:55" pos:end="495:64">pal_stride</name></name></expr></argument>,

                                                   <argument pos:start="497:52" pos:end="497:52"><expr pos:start="497:52" pos:end="497:52"><name pos:start="497:52" pos:end="497:52">w</name></expr></argument>, <argument pos:start="497:55" pos:end="497:55"><expr pos:start="497:55" pos:end="497:55"><name pos:start="497:55" pos:end="497:55">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="499:19" pos:end="509:17">else <block pos:start="499:24" pos:end="509:17">{<block_content pos:start="501:21" pos:end="507:34">

                    <do pos:start="501:21" pos:end="507:34">do <block pos:start="501:24" pos:end="507:21">{<block_content pos:start="503:25" pos:end="505:45">

                        <expr_stmt pos:start="503:25" pos:end="503:49"><expr pos:start="503:25" pos:end="503:48"><call pos:start="503:25" pos:end="503:48"><name pos:start="503:25" pos:end="503:30">memset</name><argument_list pos:start="503:31" pos:end="503:48">(<argument pos:start="503:32" pos:end="503:34"><expr pos:start="503:32" pos:end="503:34"><name pos:start="503:32" pos:end="503:34">dst</name></expr></argument>, <argument pos:start="503:37" pos:end="503:40"><expr pos:start="503:37" pos:end="503:40"><literal type="number" pos:start="503:37" pos:end="503:40">0x80</literal></expr></argument>, <argument pos:start="503:43" pos:end="503:47"><expr pos:start="503:43" pos:end="503:47"><name pos:start="503:43" pos:end="503:43">w</name> <operator pos:start="503:45" pos:end="503:45">*</operator> <literal type="number" pos:start="503:47" pos:end="503:47">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="505:25" pos:end="505:45"><expr pos:start="505:25" pos:end="505:44"><name pos:start="505:25" pos:end="505:27">dst</name> <operator pos:start="505:29" pos:end="505:30">+=</operator> <name pos:start="505:32" pos:end="505:44"><name pos:start="505:32" pos:end="505:32">c</name><operator pos:start="505:33" pos:end="505:34">-&gt;</operator><name pos:start="505:35" pos:end="505:44">rgb_stride</name></name></expr>;</expr_stmt>

                    </block_content>}</block> while <condition pos:start="507:29" pos:end="507:33">(<expr pos:start="507:30" pos:end="507:32"><operator pos:start="507:30" pos:end="507:31">--</operator><name pos:start="507:32" pos:end="507:32">h</name></expr>)</condition>;</do>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="519:5" pos:end="521:69"><if pos:start="519:5" pos:end="521:69">if <condition pos:start="519:8" pos:end="519:17">(<expr pos:start="519:9" pos:end="519:16"><name pos:start="519:9" pos:end="519:16">buf_size</name></expr>)</condition><block type="pseudo" pos:start="521:9" pos:end="521:69"><block_content pos:start="521:9" pos:end="521:69">

        <expr_stmt pos:start="521:9" pos:end="521:69"><expr pos:start="521:9" pos:end="521:68"><call pos:start="521:9" pos:end="521:68"><name pos:start="521:9" pos:end="521:14">av_log</name><argument_list pos:start="521:15" pos:end="521:68">(<argument pos:start="521:16" pos:end="521:20"><expr pos:start="521:16" pos:end="521:20"><name pos:start="521:16" pos:end="521:20">avctx</name></expr></argument>, <argument pos:start="521:23" pos:end="521:36"><expr pos:start="521:23" pos:end="521:36"><name pos:start="521:23" pos:end="521:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="521:39" pos:end="521:67"><expr pos:start="521:39" pos:end="521:67"><literal type="string" pos:start="521:39" pos:end="521:67">"buffer not fully consumed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="525:5" pos:end="535:5"><if pos:start="525:5" pos:end="535:5">if <condition pos:start="525:8" pos:end="525:33">(<expr pos:start="525:9" pos:end="525:32"><name pos:start="525:9" pos:end="525:14"><name pos:start="525:9" pos:end="525:9">c</name><operator pos:start="525:10" pos:end="525:11">-&gt;</operator><name pos:start="525:12" pos:end="525:14">mvX</name></name> <operator pos:start="525:16" pos:end="525:16">&lt;</operator> <literal type="number" pos:start="525:18" pos:end="525:18">0</literal> <operator pos:start="525:20" pos:end="525:21">||</operator> <name pos:start="525:23" pos:end="525:28"><name pos:start="525:23" pos:end="525:23">c</name><operator pos:start="525:24" pos:end="525:25">-&gt;</operator><name pos:start="525:26" pos:end="525:28">mvY</name></name> <operator pos:start="525:30" pos:end="525:30">&lt;</operator> <literal type="number" pos:start="525:32" pos:end="525:32">0</literal></expr>)</condition> <block pos:start="525:35" pos:end="535:5">{<block_content pos:start="527:9" pos:end="533:23">

        <expr_stmt pos:start="527:9" pos:end="527:38"><expr pos:start="527:9" pos:end="527:37"><call pos:start="527:9" pos:end="527:37"><name pos:start="527:9" pos:end="527:22">av_frame_unref</name><argument_list pos:start="527:23" pos:end="527:37">(<argument pos:start="527:24" pos:end="527:36"><expr pos:start="527:24" pos:end="527:36"><name pos:start="527:24" pos:end="527:36"><name pos:start="527:24" pos:end="527:26">ctx</name><operator pos:start="527:27" pos:end="527:28">-&gt;</operator><name pos:start="527:29" pos:end="527:36">last_pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="529:9" pos:end="529:49"><expr pos:start="529:9" pos:end="529:48"><name pos:start="529:9" pos:end="529:11">ret</name> <operator pos:start="529:13" pos:end="529:13">=</operator> <call pos:start="529:15" pos:end="529:48"><name pos:start="529:15" pos:end="529:26">av_frame_ref</name><argument_list pos:start="529:27" pos:end="529:48">(<argument pos:start="529:28" pos:end="529:40"><expr pos:start="529:28" pos:end="529:40"><name pos:start="529:28" pos:end="529:40"><name pos:start="529:28" pos:end="529:30">ctx</name><operator pos:start="529:31" pos:end="529:32">-&gt;</operator><name pos:start="529:33" pos:end="529:40">last_pic</name></name></expr></argument>, <argument pos:start="529:43" pos:end="529:47"><expr pos:start="529:43" pos:end="529:47"><name pos:start="529:43" pos:end="529:47">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="531:9" pos:end="533:23"><if pos:start="531:9" pos:end="533:23">if <condition pos:start="531:12" pos:end="531:20">(<expr pos:start="531:13" pos:end="531:19"><name pos:start="531:13" pos:end="531:15">ret</name> <operator pos:start="531:17" pos:end="531:17">&lt;</operator> <literal type="number" pos:start="531:19" pos:end="531:19">0</literal></expr>)</condition><block type="pseudo" pos:start="533:13" pos:end="533:23"><block_content pos:start="533:13" pos:end="533:23">

            <return pos:start="533:13" pos:end="533:23">return <expr pos:start="533:20" pos:end="533:22"><name pos:start="533:20" pos:end="533:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="539:5" pos:end="539:25"><expr pos:start="539:5" pos:end="539:24"><operator pos:start="539:5" pos:end="539:5">*</operator><name pos:start="539:6" pos:end="539:14">got_frame</name>       <operator pos:start="539:22" pos:end="539:22">=</operator> <literal type="number" pos:start="539:24" pos:end="539:24">1</literal></expr>;</expr_stmt>



    <return pos:start="543:5" pos:end="543:23">return <expr pos:start="543:12" pos:end="543:22"><name pos:start="543:12" pos:end="543:22"><name pos:start="543:12" pos:end="543:16">avpkt</name><operator pos:start="543:17" pos:end="543:18">-&gt;</operator><name pos:start="543:19" pos:end="543:22">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
