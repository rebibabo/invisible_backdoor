<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11774.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">notdirty_mem_write</name><parameter_list pos:start="1:31" pos:end="3:59">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">opaque</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:60"><decl pos:start="1:46" pos:end="1:60"><type pos:start="1:46" pos:end="1:60"><name pos:start="1:46" pos:end="1:51">hwaddr</name></type> <name pos:start="1:53" pos:end="1:60">ram_addr</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:43"><decl pos:start="3:32" pos:end="3:43"><type pos:start="3:32" pos:end="3:43"><name pos:start="3:32" pos:end="3:39">uint64_t</name></type> <name pos:start="3:41" pos:end="3:43">val</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:58"><decl pos:start="3:46" pos:end="3:58"><type pos:start="3:46" pos:end="3:58"><name pos:start="3:46" pos:end="3:53">unsigned</name></type> <name pos:start="3:55" pos:end="3:58">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:5">

    <if_stmt pos:start="7:5" pos:end="11:5"><if pos:start="7:5" pos:end="11:5">if <condition pos:start="7:8" pos:end="7:73">(<expr pos:start="7:9" pos:end="7:72"><operator pos:start="7:9" pos:end="7:9">!</operator><call pos:start="7:10" pos:end="7:72"><name pos:start="7:10" pos:end="7:43">cpu_physical_memory_get_dirty_flag</name><argument_list pos:start="7:44" pos:end="7:72">(<argument pos:start="7:45" pos:end="7:52"><expr pos:start="7:45" pos:end="7:52"><name pos:start="7:45" pos:end="7:52">ram_addr</name></expr></argument>, <argument pos:start="7:55" pos:end="7:71"><expr pos:start="7:55" pos:end="7:71"><name pos:start="7:55" pos:end="7:71">DIRTY_MEMORY_CODE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="7:75" pos:end="11:5">{<block_content pos:start="9:9" pos:end="9:53">

        <expr_stmt pos:start="9:9" pos:end="9:53"><expr pos:start="9:9" pos:end="9:52"><call pos:start="9:9" pos:end="9:52"><name pos:start="9:9" pos:end="9:36">tb_invalidate_phys_page_fast</name><argument_list pos:start="9:37" pos:end="9:52">(<argument pos:start="9:38" pos:end="9:45"><expr pos:start="9:38" pos:end="9:45"><name pos:start="9:38" pos:end="9:45">ram_addr</name></expr></argument>, <argument pos:start="9:48" pos:end="9:51"><expr pos:start="9:48" pos:end="9:51"><name pos:start="9:48" pos:end="9:51">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="13:5" pos:end="37:5">switch <condition pos:start="13:12" pos:end="13:17">(<expr pos:start="13:13" pos:end="13:16"><name pos:start="13:13" pos:end="13:16">size</name></expr>)</condition> <block pos:start="13:19" pos:end="37:5">{<block_content pos:start="15:5" pos:end="35:16">

    <case pos:start="15:5" pos:end="15:11">case <expr pos:start="15:10" pos:end="15:10"><literal type="number" pos:start="15:10" pos:end="15:10">1</literal></expr>:</case>

        <expr_stmt pos:start="17:9" pos:end="17:47"><expr pos:start="17:9" pos:end="17:46"><call pos:start="17:9" pos:end="17:46"><name pos:start="17:9" pos:end="17:13">stb_p</name><argument_list pos:start="17:14" pos:end="17:46">(<argument pos:start="17:15" pos:end="17:40"><expr pos:start="17:15" pos:end="17:40"><call pos:start="17:15" pos:end="17:40"><name pos:start="17:15" pos:end="17:30">qemu_get_ram_ptr</name><argument_list pos:start="17:31" pos:end="17:40">(<argument pos:start="17:32" pos:end="17:39"><expr pos:start="17:32" pos:end="17:39"><name pos:start="17:32" pos:end="17:39">ram_addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="17:43" pos:end="17:45"><expr pos:start="17:43" pos:end="17:45"><name pos:start="17:43" pos:end="17:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>

    <case pos:start="21:5" pos:end="21:11">case <expr pos:start="21:10" pos:end="21:10"><literal type="number" pos:start="21:10" pos:end="21:10">2</literal></expr>:</case>

        <expr_stmt pos:start="23:9" pos:end="23:47"><expr pos:start="23:9" pos:end="23:46"><call pos:start="23:9" pos:end="23:46"><name pos:start="23:9" pos:end="23:13">stw_p</name><argument_list pos:start="23:14" pos:end="23:46">(<argument pos:start="23:15" pos:end="23:40"><expr pos:start="23:15" pos:end="23:40"><call pos:start="23:15" pos:end="23:40"><name pos:start="23:15" pos:end="23:30">qemu_get_ram_ptr</name><argument_list pos:start="23:31" pos:end="23:40">(<argument pos:start="23:32" pos:end="23:39"><expr pos:start="23:32" pos:end="23:39"><name pos:start="23:32" pos:end="23:39">ram_addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="23:43" pos:end="23:45"><expr pos:start="23:43" pos:end="23:45"><name pos:start="23:43" pos:end="23:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="25:9" pos:end="25:14">break;</break>

    <case pos:start="27:5" pos:end="27:11">case <expr pos:start="27:10" pos:end="27:10"><literal type="number" pos:start="27:10" pos:end="27:10">4</literal></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:47"><expr pos:start="29:9" pos:end="29:46"><call pos:start="29:9" pos:end="29:46"><name pos:start="29:9" pos:end="29:13">stl_p</name><argument_list pos:start="29:14" pos:end="29:46">(<argument pos:start="29:15" pos:end="29:40"><expr pos:start="29:15" pos:end="29:40"><call pos:start="29:15" pos:end="29:40"><name pos:start="29:15" pos:end="29:30">qemu_get_ram_ptr</name><argument_list pos:start="29:31" pos:end="29:40">(<argument pos:start="29:32" pos:end="29:39"><expr pos:start="29:32" pos:end="29:39"><name pos:start="29:32" pos:end="29:39">ram_addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="29:43" pos:end="29:45"><expr pos:start="29:43" pos:end="29:45"><name pos:start="29:43" pos:end="29:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <default pos:start="33:5" pos:end="33:12">default:</default>

        <expr_stmt pos:start="35:9" pos:end="35:16"><expr pos:start="35:9" pos:end="35:15"><call pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:13">abort</name><argument_list pos:start="35:14" pos:end="35:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <expr_stmt pos:start="39:5" pos:end="39:73"><expr pos:start="39:5" pos:end="39:72"><call pos:start="39:5" pos:end="39:72"><name pos:start="39:5" pos:end="39:38">cpu_physical_memory_set_dirty_flag</name><argument_list pos:start="39:39" pos:end="39:72">(<argument pos:start="39:40" pos:end="39:47"><expr pos:start="39:40" pos:end="39:47"><name pos:start="39:40" pos:end="39:47">ram_addr</name></expr></argument>, <argument pos:start="39:50" pos:end="39:71"><expr pos:start="39:50" pos:end="39:71"><name pos:start="39:50" pos:end="39:71">DIRTY_MEMORY_MIGRATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:67"><expr pos:start="41:5" pos:end="41:66"><call pos:start="41:5" pos:end="41:66"><name pos:start="41:5" pos:end="41:38">cpu_physical_memory_set_dirty_flag</name><argument_list pos:start="41:39" pos:end="41:66">(<argument pos:start="41:40" pos:end="41:47"><expr pos:start="41:40" pos:end="41:47"><name pos:start="41:40" pos:end="41:47">ram_addr</name></expr></argument>, <argument pos:start="41:50" pos:end="41:65"><expr pos:start="41:50" pos:end="41:65"><name pos:start="41:50" pos:end="41:65">DIRTY_MEMORY_VGA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="43:5" pos:end="45:17">/* we remove the notdirty callback only if the code has been

       flushed */</comment>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:48">(<expr pos:start="47:9" pos:end="47:47"><operator pos:start="47:9" pos:end="47:9">!</operator><call pos:start="47:10" pos:end="47:47"><name pos:start="47:10" pos:end="47:37">cpu_physical_memory_is_clean</name><argument_list pos:start="47:38" pos:end="47:47">(<argument pos:start="47:39" pos:end="47:46"><expr pos:start="47:39" pos:end="47:46"><name pos:start="47:39" pos:end="47:46">ram_addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="47:50" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:54">

        <decl_stmt pos:start="49:9" pos:end="49:49"><decl pos:start="49:9" pos:end="49:48"><type pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:20">CPUArchState</name> <modifier pos:start="49:22" pos:end="49:22">*</modifier></type><name pos:start="49:23" pos:end="49:25">env</name> <init pos:start="49:27" pos:end="49:48">= <expr pos:start="49:29" pos:end="49:48"><name pos:start="49:29" pos:end="49:48"><name pos:start="49:29" pos:end="49:39">current_cpu</name><operator pos:start="49:40" pos:end="49:41">-&gt;</operator><name pos:start="49:42" pos:end="49:48">env_ptr</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:54"><expr pos:start="51:9" pos:end="51:53"><call pos:start="51:9" pos:end="51:53"><name pos:start="51:9" pos:end="51:21">tlb_set_dirty</name><argument_list pos:start="51:22" pos:end="51:53">(<argument pos:start="51:23" pos:end="51:25"><expr pos:start="51:23" pos:end="51:25"><name pos:start="51:23" pos:end="51:25">env</name></expr></argument>, <argument pos:start="51:28" pos:end="51:52"><expr pos:start="51:28" pos:end="51:52"><name pos:start="51:28" pos:end="51:52"><name pos:start="51:28" pos:end="51:38">current_cpu</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:52">mem_io_vaddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
