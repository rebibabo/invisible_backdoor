<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/840.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">parse_type_int64</name><parameter_list pos:start="1:29" pos:end="3:42">(<parameter pos:start="1:30" pos:end="1:39"><decl pos:start="1:30" pos:end="1:39"><type pos:start="1:30" pos:end="1:39"><name pos:start="1:30" pos:end="1:36">Visitor</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">v</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:57"><decl pos:start="1:42" pos:end="1:57"><type pos:start="1:42" pos:end="1:57"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">name</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:71"><decl pos:start="1:60" pos:end="1:71"><type pos:start="1:60" pos:end="1:71"><name pos:start="1:60" pos:end="1:66">int64_t</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:71">obj</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:41"><decl pos:start="3:30" pos:end="3:41"><type pos:start="3:30" pos:end="3:41"><name pos:start="3:30" pos:end="3:34">Error</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier><modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:41">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:42">

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:39"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">StringInputVisitor</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">siv</name> <init pos:start="7:29" pos:end="7:39">= <expr pos:start="7:31" pos:end="7:39"><call pos:start="7:31" pos:end="7:39"><name pos:start="7:31" pos:end="7:36">to_siv</name><argument_list pos:start="7:37" pos:end="7:39">(<argument pos:start="7:38" pos:end="7:38"><expr pos:start="7:38" pos:end="7:38"><name pos:start="7:38" pos:end="7:38">v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="19:5"><if pos:start="11:5" pos:end="19:5">if <condition pos:start="11:8" pos:end="11:21">(<expr pos:start="11:9" pos:end="11:20"><operator pos:start="11:9" pos:end="11:9">!</operator><name pos:start="11:10" pos:end="11:20"><name pos:start="11:10" pos:end="11:12">siv</name><operator pos:start="11:13" pos:end="11:14">-&gt;</operator><name pos:start="11:15" pos:end="11:20">string</name></name></expr>)</condition> <block pos:start="11:23" pos:end="19:5">{<block_content pos:start="13:9" pos:end="17:15">

        <expr_stmt pos:start="13:9" pos:end="15:30"><expr pos:start="13:9" pos:end="15:29"><call pos:start="13:9" pos:end="15:29"><name pos:start="13:9" pos:end="13:18">error_setg</name><argument_list pos:start="13:19" pos:end="15:29">(<argument pos:start="13:20" pos:end="13:23"><expr pos:start="13:20" pos:end="13:23"><name pos:start="13:20" pos:end="13:23">errp</name></expr></argument>, <argument pos:start="13:26" pos:end="13:52"><expr pos:start="13:26" pos:end="13:52"><name pos:start="13:26" pos:end="13:52">QERR_INVALID_PARAMETER_TYPE</name></expr></argument>, <argument pos:start="13:55" pos:end="13:74"><expr pos:start="13:55" pos:end="13:74"><ternary pos:start="13:55" pos:end="13:74"><condition pos:start="13:55" pos:end="13:60"><expr pos:start="13:55" pos:end="13:58"><name pos:start="13:55" pos:end="13:58">name</name></expr> ?</condition><then pos:start="13:62" pos:end="13:65"> <expr pos:start="13:62" pos:end="13:65"><name pos:start="13:62" pos:end="13:65">name</name></expr> </then><else pos:start="13:67" pos:end="13:74">: <expr pos:start="13:69" pos:end="13:74"><literal type="string" pos:start="13:69" pos:end="13:74">"null"</literal></expr></else></ternary></expr></argument>,

                   <argument pos:start="15:20" pos:end="15:28"><expr pos:start="15:20" pos:end="15:28"><literal type="string" pos:start="15:20" pos:end="15:28">"integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:25"><expr pos:start="23:5" pos:end="23:24"><call pos:start="23:5" pos:end="23:24"><name pos:start="23:5" pos:end="23:13">parse_str</name><argument_list pos:start="23:14" pos:end="23:24">(<argument pos:start="23:15" pos:end="23:17"><expr pos:start="23:15" pos:end="23:17"><name pos:start="23:15" pos:end="23:17">siv</name></expr></argument>, <argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:21">(<expr pos:start="27:9" pos:end="27:20"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:20"><name pos:start="27:10" pos:end="27:12">siv</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:20">ranges</name></name></expr>)</condition> <block pos:start="27:23" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:19">

        <goto pos:start="29:9" pos:end="29:19">goto <name pos:start="29:14" pos:end="29:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="63:5"><if pos:start="35:5" pos:end="63:5">if <condition pos:start="35:8" pos:end="35:24">(<expr pos:start="35:9" pos:end="35:23"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:23"><name pos:start="35:10" pos:end="35:12">siv</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:23">cur_range</name></name></expr>)</condition> <block pos:start="35:26" pos:end="63:5">{<block_content pos:start="37:9" pos:end="61:28">

        <decl_stmt pos:start="37:9" pos:end="37:17"><decl pos:start="37:9" pos:end="37:16"><type pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:13">Range</name> <modifier pos:start="37:15" pos:end="37:15">*</modifier></type><name pos:start="37:16" pos:end="37:16">r</name></decl>;</decl_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:51"><expr pos:start="41:9" pos:end="41:50"><name pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:11">siv</name><operator pos:start="41:12" pos:end="41:13">-&gt;</operator><name pos:start="41:14" pos:end="41:22">cur_range</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <call pos:start="41:26" pos:end="41:50"><name pos:start="41:26" pos:end="41:37">g_list_first</name><argument_list pos:start="41:38" pos:end="41:50">(<argument pos:start="41:39" pos:end="41:49"><expr pos:start="41:39" pos:end="41:49"><name pos:start="41:39" pos:end="41:49"><name pos:start="41:39" pos:end="41:41">siv</name><operator pos:start="41:42" pos:end="41:43">-&gt;</operator><name pos:start="41:44" pos:end="41:49">ranges</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:28">(<expr pos:start="43:13" pos:end="43:27"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:27"><name pos:start="43:14" pos:end="43:16">siv</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:27">cur_range</name></name></expr>)</condition> <block pos:start="43:30" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:23">

            <goto pos:start="45:13" pos:end="45:23">goto <name pos:start="45:18" pos:end="45:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:33"><expr pos:start="51:9" pos:end="51:32"><name pos:start="51:9" pos:end="51:9">r</name> <operator pos:start="51:11" pos:end="51:11">=</operator> <name pos:start="51:13" pos:end="51:32"><name pos:start="51:13" pos:end="51:15">siv</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:26">cur_range</name><operator pos:start="51:27" pos:end="51:28">-&gt;</operator><name pos:start="51:29" pos:end="51:32">data</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:15">(<expr pos:start="53:13" pos:end="53:14"><operator pos:start="53:13" pos:end="53:13">!</operator><name pos:start="53:14" pos:end="53:14">r</name></expr>)</condition> <block pos:start="53:17" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:23">

            <goto pos:start="55:13" pos:end="55:23">goto <name pos:start="55:18" pos:end="55:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:28"><expr pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:11">siv</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:16">cur</name></name> <operator pos:start="61:18" pos:end="61:18">=</operator> <name pos:start="61:20" pos:end="61:27"><name pos:start="61:20" pos:end="61:20">r</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:27">begin</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:20"><expr pos:start="67:5" pos:end="67:19"><operator pos:start="67:5" pos:end="67:5">*</operator><name pos:start="67:6" pos:end="67:8">obj</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <name pos:start="67:12" pos:end="67:19"><name pos:start="67:12" pos:end="67:14">siv</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:19">cur</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:15"><expr pos:start="69:5" pos:end="69:14"><name pos:start="69:5" pos:end="69:12"><name pos:start="69:5" pos:end="69:7">siv</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:12">cur</name></name><operator pos:start="69:13" pos:end="69:14">++</operator></expr>;</expr_stmt>

    <return pos:start="71:5" pos:end="71:11">return;</return>



<label pos:start="75:1" pos:end="75:6"><name pos:start="75:1" pos:end="75:5">error</name>:</label>

    <expr_stmt pos:start="77:5" pos:end="79:42"><expr pos:start="77:5" pos:end="79:41"><call pos:start="77:5" pos:end="79:41"><name pos:start="77:5" pos:end="77:14">error_setg</name><argument_list pos:start="77:15" pos:end="79:41">(<argument pos:start="77:16" pos:end="77:19"><expr pos:start="77:16" pos:end="77:19"><name pos:start="77:16" pos:end="77:19">errp</name></expr></argument>, <argument pos:start="77:22" pos:end="77:49"><expr pos:start="77:22" pos:end="77:49"><name pos:start="77:22" pos:end="77:49">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="77:52" pos:end="77:71"><expr pos:start="77:52" pos:end="77:71"><ternary pos:start="77:52" pos:end="77:71"><condition pos:start="77:52" pos:end="77:57"><expr pos:start="77:52" pos:end="77:55"><name pos:start="77:52" pos:end="77:55">name</name></expr> ?</condition><then pos:start="77:59" pos:end="77:62"> <expr pos:start="77:59" pos:end="77:62"><name pos:start="77:59" pos:end="77:62">name</name></expr> </then><else pos:start="77:64" pos:end="77:71">: <expr pos:start="77:66" pos:end="77:71"><literal type="string" pos:start="77:66" pos:end="77:71">"null"</literal></expr></else></ternary></expr></argument>,

               <argument pos:start="79:16" pos:end="79:40"><expr pos:start="79:16" pos:end="79:40"><literal type="string" pos:start="79:16" pos:end="79:40">"an int64 value or range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
