<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17776.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">uhci_handle_td</name><parameter_list pos:start="1:26" pos:end="3:76">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:38"><name pos:start="1:27" pos:end="1:35">UHCIState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:52"><decl pos:start="1:41" pos:end="1:52"><type pos:start="1:41" pos:end="1:52"><name pos:start="1:41" pos:end="1:49">UHCIQueue</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">q</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:37"><decl pos:start="3:27" pos:end="3:37"><type pos:start="3:27" pos:end="3:37"><name pos:start="3:27" pos:end="3:33">UHCI_TD</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:37">td</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:55"><decl pos:start="3:40" pos:end="3:55"><type pos:start="3:40" pos:end="3:55"><name pos:start="3:40" pos:end="3:47">uint32_t</name></type> <name pos:start="3:49" pos:end="3:55">td_addr</name></decl></parameter>, <parameter pos:start="3:58" pos:end="3:75"><decl pos:start="3:58" pos:end="3:75"><type pos:start="3:58" pos:end="3:75"><name pos:start="3:58" pos:end="3:65">uint32_t</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:75">int_mask</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="191:1">{<block_content pos:start="7:5" pos:end="189:15">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">UHCIAsync</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:20">async</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name> <init pos:start="9:13" pos:end="9:15">= <expr pos:start="9:15" pos:end="9:15"><literal type="number" pos:start="9:15" pos:end="9:15">0</literal></expr></init></decl>, <decl pos:start="9:18" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:24">max_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:12">spd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:31"><decl pos:start="13:5" pos:end="13:30"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:16">queuing</name> <init pos:start="13:18" pos:end="13:30">= <expr pos:start="13:20" pos:end="13:30"><operator pos:start="13:20" pos:end="13:20">(</operator><name pos:start="13:21" pos:end="13:21">q</name> <operator pos:start="13:23" pos:end="13:24">!=</operator> <name pos:start="13:26" pos:end="13:29">NULL</name><operator pos:start="13:30" pos:end="13:30">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:34"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type> <name pos:start="15:13" pos:end="15:15">pid</name> <init pos:start="15:17" pos:end="15:34">= <expr pos:start="15:19" pos:end="15:34"><name pos:start="15:19" pos:end="15:27"><name pos:start="15:19" pos:end="15:20">td</name><operator pos:start="15:21" pos:end="15:22">-&gt;</operator><name pos:start="15:23" pos:end="15:27">token</name></name> <operator pos:start="15:29" pos:end="15:29">&amp;</operator> <literal type="number" pos:start="15:31" pos:end="15:34">0xff</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:21">/* Is active ? */</comment>

    <if_stmt pos:start="21:5" pos:end="39:5"><if pos:start="21:5" pos:end="39:5">if <condition pos:start="21:8" pos:end="21:37">(<expr pos:start="21:9" pos:end="21:36"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:18"><name pos:start="21:11" pos:end="21:12">td</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:18">ctrl</name></name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <name pos:start="21:22" pos:end="21:35">TD_CTRL_ACTIVE</name><operator pos:start="21:36" pos:end="21:36">)</operator></expr>)</condition> <block pos:start="21:39" pos:end="39:5">{<block_content pos:start="31:9" pos:end="37:33">

        <comment type="block" pos:start="23:9" pos:end="29:11">/*

         * ehci11d spec page 22: "Even if the Active bit in the TD is already

         * cleared when the TD is fetched ... an IOC interrupt is generated"

         */</comment>

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:35">(<expr pos:start="31:13" pos:end="31:34"><name pos:start="31:13" pos:end="31:20"><name pos:start="31:13" pos:end="31:14">td</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:20">ctrl</name></name> <operator pos:start="31:22" pos:end="31:22">&amp;</operator> <name pos:start="31:24" pos:end="31:34">TD_CTRL_IOC</name></expr>)</condition> <block pos:start="31:37" pos:end="35:9">{<block_content pos:start="33:17" pos:end="33:34">

                <expr_stmt pos:start="33:17" pos:end="33:34"><expr pos:start="33:17" pos:end="33:33"><operator pos:start="33:17" pos:end="33:17">*</operator><name pos:start="33:18" pos:end="33:25">int_mask</name> <operator pos:start="33:27" pos:end="33:28">|=</operator> <literal type="number" pos:start="33:30" pos:end="33:33">0x01</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="37:9" pos:end="37:33">return <expr pos:start="37:16" pos:end="37:32"><name pos:start="37:16" pos:end="37:32">TD_RESULT_NEXT_QH</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:47"><expr pos:start="43:5" pos:end="43:46"><name pos:start="43:5" pos:end="43:9">async</name> <operator pos:start="43:11" pos:end="43:11">=</operator> <call pos:start="43:13" pos:end="43:46"><name pos:start="43:13" pos:end="43:30">uhci_async_find_td</name><argument_list pos:start="43:31" pos:end="43:46">(<argument pos:start="43:32" pos:end="43:32"><expr pos:start="43:32" pos:end="43:32"><name pos:start="43:32" pos:end="43:32">s</name></expr></argument>, <argument pos:start="43:35" pos:end="43:41"><expr pos:start="43:35" pos:end="43:41"><name pos:start="43:35" pos:end="43:41">td_addr</name></expr></argument>, <argument pos:start="43:44" pos:end="43:45"><expr pos:start="43:44" pos:end="43:45"><name pos:start="43:44" pos:end="43:45">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="75:5"><if pos:start="45:5" pos:end="75:5">if <condition pos:start="45:8" pos:end="45:14">(<expr pos:start="45:9" pos:end="45:13"><name pos:start="45:9" pos:end="45:13">async</name></expr>)</condition> <block pos:start="45:16" pos:end="75:5">{<block_content pos:start="49:9" pos:end="73:18">

        <comment type="block" pos:start="47:9" pos:end="47:31">/* Already submitted */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:33"><expr pos:start="49:9" pos:end="49:32"><name pos:start="49:9" pos:end="49:27"><name pos:start="49:9" pos:end="49:13">async</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:20">queue</name><operator pos:start="49:21" pos:end="49:22">-&gt;</operator><name pos:start="49:23" pos:end="49:27">valid</name></name> <operator pos:start="49:29" pos:end="49:29">=</operator> <literal type="number" pos:start="49:31" pos:end="49:32">32</literal></expr>;</expr_stmt>



        <if_stmt pos:start="53:9" pos:end="55:40"><if pos:start="53:9" pos:end="55:40">if <condition pos:start="53:12" pos:end="53:25">(<expr pos:start="53:13" pos:end="53:24"><operator pos:start="53:13" pos:end="53:13">!</operator><name pos:start="53:14" pos:end="53:24"><name pos:start="53:14" pos:end="53:18">async</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:24">done</name></name></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:40"><block_content pos:start="55:13" pos:end="55:40">

            <return pos:start="55:13" pos:end="55:40">return <expr pos:start="55:20" pos:end="55:39"><name pos:start="55:20" pos:end="55:39">TD_RESULT_ASYNC_CONT</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="67:9"><if pos:start="57:9" pos:end="67:9">if <condition pos:start="57:12" pos:end="57:20">(<expr pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:19">queuing</name></expr>)</condition> <block pos:start="57:22" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:40">

            <comment type="block" pos:start="59:13" pos:end="63:32">/* we are busy filling the queue, we are not prepared

               to consume completed packages then, just leave them

               in async state */</comment>

            <return pos:start="65:13" pos:end="65:40">return <expr pos:start="65:20" pos:end="65:39"><name pos:start="65:20" pos:end="65:39">TD_RESULT_ASYNC_CONT</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:33"><expr pos:start="71:9" pos:end="71:32"><call pos:start="71:9" pos:end="71:32"><name pos:start="71:9" pos:end="71:25">uhci_async_unlink</name><argument_list pos:start="71:26" pos:end="71:32">(<argument pos:start="71:27" pos:end="71:31"><expr pos:start="71:27" pos:end="71:31"><name pos:start="71:27" pos:end="71:31">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:18">goto <name pos:start="73:14" pos:end="73:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:29">/* Allocate new packet */</comment>

    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:18">(<expr pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:9">q</name> <operator pos:start="81:11" pos:end="81:12">==</operator> <name pos:start="81:14" pos:end="81:17">NULL</name></expr>)</condition> <block pos:start="81:20" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:38">

        <decl_stmt pos:start="83:9" pos:end="83:70"><decl pos:start="83:9" pos:end="83:69"><type pos:start="83:9" pos:end="83:19"><name pos:start="83:9" pos:end="83:17">USBDevice</name> <modifier pos:start="83:19" pos:end="83:19">*</modifier></type><name pos:start="83:20" pos:end="83:22">dev</name> <init pos:start="83:24" pos:end="83:69">= <expr pos:start="83:26" pos:end="83:69"><call pos:start="83:26" pos:end="83:69"><name pos:start="83:26" pos:end="83:41">uhci_find_device</name><argument_list pos:start="83:42" pos:end="83:69">(<argument pos:start="83:43" pos:end="83:43"><expr pos:start="83:43" pos:end="83:43"><name pos:start="83:43" pos:end="83:43">s</name></expr></argument>, <argument pos:start="83:46" pos:end="83:68"><expr pos:start="83:46" pos:end="83:68"><operator pos:start="83:46" pos:end="83:46">(</operator><name pos:start="83:47" pos:end="83:55"><name pos:start="83:47" pos:end="83:48">td</name><operator pos:start="83:49" pos:end="83:50">-&gt;</operator><name pos:start="83:51" pos:end="83:55">token</name></name> <operator pos:start="83:57" pos:end="83:58">&gt;&gt;</operator> <literal type="number" pos:start="83:60" pos:end="83:60">8</literal><operator pos:start="83:61" pos:end="83:61">)</operator> <operator pos:start="83:63" pos:end="83:63">&amp;</operator> <literal type="number" pos:start="83:65" pos:end="83:68">0x7f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="85:9" pos:end="85:72"><decl pos:start="85:9" pos:end="85:71"><type pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:19">USBEndpoint</name> <modifier pos:start="85:21" pos:end="85:21">*</modifier></type><name pos:start="85:22" pos:end="85:23">ep</name> <init pos:start="85:25" pos:end="85:71">= <expr pos:start="85:27" pos:end="85:71"><call pos:start="85:27" pos:end="85:71"><name pos:start="85:27" pos:end="85:36">usb_ep_get</name><argument_list pos:start="85:37" pos:end="85:71">(<argument pos:start="85:38" pos:end="85:40"><expr pos:start="85:38" pos:end="85:40"><name pos:start="85:38" pos:end="85:40">dev</name></expr></argument>, <argument pos:start="85:43" pos:end="85:45"><expr pos:start="85:43" pos:end="85:45"><name pos:start="85:43" pos:end="85:45">pid</name></expr></argument>, <argument pos:start="85:48" pos:end="85:70"><expr pos:start="85:48" pos:end="85:70"><operator pos:start="85:48" pos:end="85:48">(</operator><name pos:start="85:49" pos:end="85:57"><name pos:start="85:49" pos:end="85:50">td</name><operator pos:start="85:51" pos:end="85:52">-&gt;</operator><name pos:start="85:53" pos:end="85:57">token</name></name> <operator pos:start="85:59" pos:end="85:60">&gt;&gt;</operator> <literal type="number" pos:start="85:62" pos:end="85:63">15</literal><operator pos:start="85:64" pos:end="85:64">)</operator> <operator pos:start="85:66" pos:end="85:66">&amp;</operator> <literal type="number" pos:start="85:68" pos:end="85:70">0xf</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:38"><expr pos:start="87:9" pos:end="87:37"><name pos:start="87:9" pos:end="87:9">q</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <call pos:start="87:13" pos:end="87:37"><name pos:start="87:13" pos:end="87:26">uhci_queue_get</name><argument_list pos:start="87:27" pos:end="87:37">(<argument pos:start="87:28" pos:end="87:28"><expr pos:start="87:28" pos:end="87:28"><name pos:start="87:28" pos:end="87:28">s</name></expr></argument>, <argument pos:start="87:31" pos:end="87:32"><expr pos:start="87:31" pos:end="87:32"><name pos:start="87:31" pos:end="87:32">td</name></expr></argument>, <argument pos:start="87:35" pos:end="87:36"><expr pos:start="87:35" pos:end="87:36"><name pos:start="87:35" pos:end="87:36">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:41"><expr pos:start="91:5" pos:end="91:40"><name pos:start="91:5" pos:end="91:9">async</name> <operator pos:start="91:11" pos:end="91:11">=</operator> <call pos:start="91:13" pos:end="91:40"><name pos:start="91:13" pos:end="91:28">uhci_async_alloc</name><argument_list pos:start="91:29" pos:end="91:40">(<argument pos:start="91:30" pos:end="91:30"><expr pos:start="91:30" pos:end="91:30"><name pos:start="91:30" pos:end="91:30">q</name></expr></argument>, <argument pos:start="91:33" pos:end="91:39"><expr pos:start="91:33" pos:end="91:39"><name pos:start="91:33" pos:end="91:39">td_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="95:5" pos:end="99:7">/* valid needs to be large enough to handle 10 frame delay

     * for initial isochronous requests

     */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:29"><expr pos:start="101:5" pos:end="101:28"><name pos:start="101:5" pos:end="101:23"><name pos:start="101:5" pos:end="101:9">async</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:16">queue</name><operator pos:start="101:17" pos:end="101:18">-&gt;</operator><name pos:start="101:19" pos:end="101:23">valid</name></name> <operator pos:start="101:25" pos:end="101:25">=</operator> <literal type="number" pos:start="101:27" pos:end="101:28">32</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:46"><expr pos:start="105:5" pos:end="105:45"><name pos:start="105:5" pos:end="105:11">max_len</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <operator pos:start="105:15" pos:end="105:15">(</operator><operator pos:start="105:16" pos:end="105:16">(</operator><name pos:start="105:17" pos:end="105:25"><name pos:start="105:17" pos:end="105:18">td</name><operator pos:start="105:19" pos:end="105:20">-&gt;</operator><name pos:start="105:21" pos:end="105:25">token</name></name> <operator pos:start="105:27" pos:end="105:28">&gt;&gt;</operator> <literal type="number" pos:start="105:30" pos:end="105:31">21</literal><operator pos:start="105:32" pos:end="105:32">)</operator> <operator pos:start="105:34" pos:end="105:34">+</operator> <literal type="number" pos:start="105:36" pos:end="105:36">1</literal><operator pos:start="105:37" pos:end="105:37">)</operator> <operator pos:start="105:39" pos:end="105:39">&amp;</operator> <literal type="number" pos:start="105:41" pos:end="105:45">0x7ff</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:65"><expr pos:start="107:5" pos:end="107:64"><name pos:start="107:5" pos:end="107:7">spd</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <operator pos:start="107:11" pos:end="107:11">(</operator><name pos:start="107:12" pos:end="107:14">pid</name> <operator pos:start="107:16" pos:end="107:17">==</operator> <name pos:start="107:19" pos:end="107:30">USB_TOKEN_IN</name> <operator pos:start="107:32" pos:end="107:33">&amp;&amp;</operator> <operator pos:start="107:35" pos:end="107:35">(</operator><name pos:start="107:36" pos:end="107:43"><name pos:start="107:36" pos:end="107:37">td</name><operator pos:start="107:38" pos:end="107:39">-&gt;</operator><name pos:start="107:40" pos:end="107:43">ctrl</name></name> <operator pos:start="107:45" pos:end="107:45">&amp;</operator> <name pos:start="107:47" pos:end="107:57">TD_CTRL_SPD</name><operator pos:start="107:58" pos:end="107:58">)</operator> <operator pos:start="107:60" pos:end="107:61">!=</operator> <literal type="number" pos:start="107:63" pos:end="107:63">0</literal><operator pos:start="107:64" pos:end="107:64">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="111:52"><expr pos:start="109:5" pos:end="111:51"><call pos:start="109:5" pos:end="111:51"><name pos:start="109:5" pos:end="109:20">usb_packet_setup</name><argument_list pos:start="109:21" pos:end="111:51">(<argument pos:start="109:22" pos:end="109:35"><expr pos:start="109:22" pos:end="109:35"><operator pos:start="109:22" pos:end="109:22">&amp;</operator><name pos:start="109:23" pos:end="109:35"><name pos:start="109:23" pos:end="109:27">async</name><operator pos:start="109:28" pos:end="109:29">-&gt;</operator><name pos:start="109:30" pos:end="109:35">packet</name></name></expr></argument>, <argument pos:start="109:38" pos:end="109:40"><expr pos:start="109:38" pos:end="109:40"><name pos:start="109:38" pos:end="109:40">pid</name></expr></argument>, <argument pos:start="109:43" pos:end="109:47"><expr pos:start="109:43" pos:end="109:47"><name pos:start="109:43" pos:end="109:47"><name pos:start="109:43" pos:end="109:43">q</name><operator pos:start="109:44" pos:end="109:45">-&gt;</operator><name pos:start="109:46" pos:end="109:47">ep</name></name></expr></argument>, <argument pos:start="109:50" pos:end="109:56"><expr pos:start="109:50" pos:end="109:56"><name pos:start="109:50" pos:end="109:56">td_addr</name></expr></argument>, <argument pos:start="109:59" pos:end="109:61"><expr pos:start="109:59" pos:end="109:61"><name pos:start="109:59" pos:end="109:61">spd</name></expr></argument>,

                     <argument pos:start="111:22" pos:end="111:50"><expr pos:start="111:22" pos:end="111:50"><operator pos:start="111:22" pos:end="111:22">(</operator><name pos:start="111:23" pos:end="111:30"><name pos:start="111:23" pos:end="111:24">td</name><operator pos:start="111:25" pos:end="111:26">-&gt;</operator><name pos:start="111:27" pos:end="111:30">ctrl</name></name> <operator pos:start="111:32" pos:end="111:32">&amp;</operator> <name pos:start="111:34" pos:end="111:44">TD_CTRL_IOC</name><operator pos:start="111:45" pos:end="111:45">)</operator> <operator pos:start="111:47" pos:end="111:48">!=</operator> <literal type="number" pos:start="111:50" pos:end="111:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:54"><expr pos:start="113:5" pos:end="113:53"><call pos:start="113:5" pos:end="113:53"><name pos:start="113:5" pos:end="113:19">qemu_sglist_add</name><argument_list pos:start="113:20" pos:end="113:53">(<argument pos:start="113:21" pos:end="113:31"><expr pos:start="113:21" pos:end="113:31"><operator pos:start="113:21" pos:end="113:21">&amp;</operator><name pos:start="113:22" pos:end="113:31"><name pos:start="113:22" pos:end="113:26">async</name><operator pos:start="113:27" pos:end="113:28">-&gt;</operator><name pos:start="113:29" pos:end="113:31">sgl</name></name></expr></argument>, <argument pos:start="113:34" pos:end="113:43"><expr pos:start="113:34" pos:end="113:43"><name pos:start="113:34" pos:end="113:43"><name pos:start="113:34" pos:end="113:35">td</name><operator pos:start="113:36" pos:end="113:37">-&gt;</operator><name pos:start="113:38" pos:end="113:43">buffer</name></name></expr></argument>, <argument pos:start="113:46" pos:end="113:52"><expr pos:start="113:46" pos:end="113:52"><name pos:start="113:46" pos:end="113:52">max_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:48"><expr pos:start="115:5" pos:end="115:47"><call pos:start="115:5" pos:end="115:47"><name pos:start="115:5" pos:end="115:18">usb_packet_map</name><argument_list pos:start="115:19" pos:end="115:47">(<argument pos:start="115:20" pos:end="115:33"><expr pos:start="115:20" pos:end="115:33"><operator pos:start="115:20" pos:end="115:20">&amp;</operator><name pos:start="115:21" pos:end="115:33"><name pos:start="115:21" pos:end="115:25">async</name><operator pos:start="115:26" pos:end="115:27">-&gt;</operator><name pos:start="115:28" pos:end="115:33">packet</name></name></expr></argument>, <argument pos:start="115:36" pos:end="115:46"><expr pos:start="115:36" pos:end="115:46"><operator pos:start="115:36" pos:end="115:36">&amp;</operator><name pos:start="115:37" pos:end="115:46"><name pos:start="115:37" pos:end="115:41">async</name><operator pos:start="115:42" pos:end="115:43">-&gt;</operator><name pos:start="115:44" pos:end="115:46">sgl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="119:5" pos:end="157:5">switch<condition pos:start="119:11" pos:end="119:15">(<expr pos:start="119:12" pos:end="119:14"><name pos:start="119:12" pos:end="119:14">pid</name></expr>)</condition> <block pos:start="119:17" pos:end="157:5">{<block_content pos:start="121:5" pos:end="155:36">

    <case pos:start="121:5" pos:end="121:23">case <expr pos:start="121:10" pos:end="121:22"><name pos:start="121:10" pos:end="121:22">USB_TOKEN_OUT</name></expr>:</case>

    <case pos:start="123:5" pos:end="123:25">case <expr pos:start="123:10" pos:end="123:24"><name pos:start="123:10" pos:end="123:24">USB_TOKEN_SETUP</name></expr>:</case>

        <expr_stmt pos:start="125:9" pos:end="125:60"><expr pos:start="125:9" pos:end="125:59"><name pos:start="125:9" pos:end="125:11">len</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <call pos:start="125:15" pos:end="125:59"><name pos:start="125:15" pos:end="125:31">usb_handle_packet</name><argument_list pos:start="125:32" pos:end="125:59">(<argument pos:start="125:33" pos:end="125:42"><expr pos:start="125:33" pos:end="125:42"><name pos:start="125:33" pos:end="125:42"><name pos:start="125:33" pos:end="125:33">q</name><operator pos:start="125:34" pos:end="125:35">-&gt;</operator><name pos:start="125:36" pos:end="125:37">ep</name><operator pos:start="125:38" pos:end="125:39">-&gt;</operator><name pos:start="125:40" pos:end="125:42">dev</name></name></expr></argument>, <argument pos:start="125:45" pos:end="125:58"><expr pos:start="125:45" pos:end="125:58"><operator pos:start="125:45" pos:end="125:45">&amp;</operator><name pos:start="125:46" pos:end="125:58"><name pos:start="125:46" pos:end="125:50">async</name><operator pos:start="125:51" pos:end="125:52">-&gt;</operator><name pos:start="125:53" pos:end="125:58">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="127:9" pos:end="129:26"><if pos:start="127:9" pos:end="129:26">if <condition pos:start="127:12" pos:end="127:21">(<expr pos:start="127:13" pos:end="127:20"><name pos:start="127:13" pos:end="127:15">len</name> <operator pos:start="127:17" pos:end="127:18">&gt;=</operator> <literal type="number" pos:start="127:20" pos:end="127:20">0</literal></expr>)</condition><block type="pseudo" pos:start="129:13" pos:end="129:26"><block_content pos:start="129:13" pos:end="129:26">

            <expr_stmt pos:start="129:13" pos:end="129:26"><expr pos:start="129:13" pos:end="129:25"><name pos:start="129:13" pos:end="129:15">len</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <name pos:start="129:19" pos:end="129:25">max_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="131:9" pos:end="131:14">break;</break>



    <case pos:start="135:5" pos:end="135:22">case <expr pos:start="135:10" pos:end="135:21"><name pos:start="135:10" pos:end="135:21">USB_TOKEN_IN</name></expr>:</case>

        <expr_stmt pos:start="137:9" pos:end="137:60"><expr pos:start="137:9" pos:end="137:59"><name pos:start="137:9" pos:end="137:11">len</name> <operator pos:start="137:13" pos:end="137:13">=</operator> <call pos:start="137:15" pos:end="137:59"><name pos:start="137:15" pos:end="137:31">usb_handle_packet</name><argument_list pos:start="137:32" pos:end="137:59">(<argument pos:start="137:33" pos:end="137:42"><expr pos:start="137:33" pos:end="137:42"><name pos:start="137:33" pos:end="137:42"><name pos:start="137:33" pos:end="137:33">q</name><operator pos:start="137:34" pos:end="137:35">-&gt;</operator><name pos:start="137:36" pos:end="137:37">ep</name><operator pos:start="137:38" pos:end="137:39">-&gt;</operator><name pos:start="137:40" pos:end="137:42">dev</name></name></expr></argument>, <argument pos:start="137:45" pos:end="137:58"><expr pos:start="137:45" pos:end="137:58"><operator pos:start="137:45" pos:end="137:45">&amp;</operator><name pos:start="137:46" pos:end="137:58"><name pos:start="137:46" pos:end="137:50">async</name><operator pos:start="137:51" pos:end="137:52">-&gt;</operator><name pos:start="137:53" pos:end="137:58">packet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="139:9" pos:end="139:14">break;</break>



    <default pos:start="143:5" pos:end="143:12">default:</default>

        <comment type="block" pos:start="145:9" pos:end="145:45">/* invalid pid : frame interrupted */</comment>

        <expr_stmt pos:start="147:9" pos:end="147:54"><expr pos:start="147:9" pos:end="147:53"><call pos:start="147:9" pos:end="147:53"><name pos:start="147:9" pos:end="147:24">usb_packet_unmap</name><argument_list pos:start="147:25" pos:end="147:53">(<argument pos:start="147:26" pos:end="147:39"><expr pos:start="147:26" pos:end="147:39"><operator pos:start="147:26" pos:end="147:26">&amp;</operator><name pos:start="147:27" pos:end="147:39"><name pos:start="147:27" pos:end="147:31">async</name><operator pos:start="147:32" pos:end="147:33">-&gt;</operator><name pos:start="147:34" pos:end="147:39">packet</name></name></expr></argument>, <argument pos:start="147:42" pos:end="147:52"><expr pos:start="147:42" pos:end="147:52"><operator pos:start="147:42" pos:end="147:42">&amp;</operator><name pos:start="147:43" pos:end="147:52"><name pos:start="147:43" pos:end="147:47">async</name><operator pos:start="147:48" pos:end="147:49">-&gt;</operator><name pos:start="147:50" pos:end="147:52">sgl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:31"><expr pos:start="149:9" pos:end="149:30"><call pos:start="149:9" pos:end="149:30"><name pos:start="149:9" pos:end="149:23">uhci_async_free</name><argument_list pos:start="149:24" pos:end="149:30">(<argument pos:start="149:25" pos:end="149:29"><expr pos:start="149:25" pos:end="149:29"><name pos:start="149:25" pos:end="149:29">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:37"><expr pos:start="151:9" pos:end="151:36"><name pos:start="151:9" pos:end="151:17"><name pos:start="151:9" pos:end="151:9">s</name><operator pos:start="151:10" pos:end="151:11">-&gt;</operator><name pos:start="151:12" pos:end="151:17">status</name></name> <operator pos:start="151:19" pos:end="151:20">|=</operator> <name pos:start="151:22" pos:end="151:36">UHCI_STS_HCPERR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:27"><expr pos:start="153:9" pos:end="153:26"><call pos:start="153:9" pos:end="153:26"><name pos:start="153:9" pos:end="153:23">uhci_update_irq</name><argument_list pos:start="153:24" pos:end="153:26">(<argument pos:start="153:25" pos:end="153:25"><expr pos:start="153:25" pos:end="153:25"><name pos:start="153:25" pos:end="153:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="155:9" pos:end="155:36">return <expr pos:start="155:16" pos:end="155:35"><name pos:start="155:16" pos:end="155:35">TD_RESULT_STOP_FRAME</name></expr>;</return>

    </block_content>}</block></switch>

 

    <if_stmt pos:start="161:5" pos:end="173:5"><if pos:start="161:5" pos:end="173:5">if <condition pos:start="161:8" pos:end="161:29">(<expr pos:start="161:9" pos:end="161:28"><name pos:start="161:9" pos:end="161:11">len</name> <operator pos:start="161:13" pos:end="161:14">==</operator> <name pos:start="161:16" pos:end="161:28">USB_RET_ASYNC</name></expr>)</condition> <block pos:start="161:31" pos:end="173:5">{<block_content pos:start="163:9" pos:end="171:37">

        <expr_stmt pos:start="163:9" pos:end="163:31"><expr pos:start="163:9" pos:end="163:30"><call pos:start="163:9" pos:end="163:30"><name pos:start="163:9" pos:end="163:23">uhci_async_link</name><argument_list pos:start="163:24" pos:end="163:30">(<argument pos:start="163:25" pos:end="163:29"><expr pos:start="163:25" pos:end="163:29"><name pos:start="163:25" pos:end="163:29">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="165:9" pos:end="169:9"><if pos:start="165:9" pos:end="169:9">if <condition pos:start="165:12" pos:end="165:21">(<expr pos:start="165:13" pos:end="165:20"><operator pos:start="165:13" pos:end="165:13">!</operator><name pos:start="165:14" pos:end="165:20">queuing</name></expr>)</condition> <block pos:start="165:23" pos:end="169:9">{<block_content pos:start="167:13" pos:end="167:35">

            <expr_stmt pos:start="167:13" pos:end="167:35"><expr pos:start="167:13" pos:end="167:34"><call pos:start="167:13" pos:end="167:34"><name pos:start="167:13" pos:end="167:27">uhci_queue_fill</name><argument_list pos:start="167:28" pos:end="167:34">(<argument pos:start="167:29" pos:end="167:29"><expr pos:start="167:29" pos:end="167:29"><name pos:start="167:29" pos:end="167:29">q</name></expr></argument>, <argument pos:start="167:32" pos:end="167:33"><expr pos:start="167:32" pos:end="167:33"><name pos:start="167:32" pos:end="167:33">td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <return pos:start="171:9" pos:end="171:37">return <expr pos:start="171:16" pos:end="171:36"><name pos:start="171:16" pos:end="171:36">TD_RESULT_ASYNC_START</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:31"><expr pos:start="177:5" pos:end="177:30"><name pos:start="177:5" pos:end="177:24"><name pos:start="177:5" pos:end="177:9">async</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:17">packet</name><operator pos:start="177:18" pos:end="177:18">.</operator><name pos:start="177:19" pos:end="177:24">result</name></name> <operator pos:start="177:26" pos:end="177:26">=</operator> <name pos:start="177:28" pos:end="177:30">len</name></expr>;</expr_stmt>



<label pos:start="181:1" pos:end="181:5"><name pos:start="181:1" pos:end="181:4">done</name>:</label>

    <expr_stmt pos:start="183:5" pos:end="183:51"><expr pos:start="183:5" pos:end="183:50"><name pos:start="183:5" pos:end="183:7">len</name> <operator pos:start="183:9" pos:end="183:9">=</operator> <call pos:start="183:11" pos:end="183:50"><name pos:start="183:11" pos:end="183:26">uhci_complete_td</name><argument_list pos:start="183:27" pos:end="183:50">(<argument pos:start="183:28" pos:end="183:28"><expr pos:start="183:28" pos:end="183:28"><name pos:start="183:28" pos:end="183:28">s</name></expr></argument>, <argument pos:start="183:31" pos:end="183:32"><expr pos:start="183:31" pos:end="183:32"><name pos:start="183:31" pos:end="183:32">td</name></expr></argument>, <argument pos:start="183:35" pos:end="183:39"><expr pos:start="183:35" pos:end="183:39"><name pos:start="183:35" pos:end="183:39">async</name></expr></argument>, <argument pos:start="183:42" pos:end="183:49"><expr pos:start="183:42" pos:end="183:49"><name pos:start="183:42" pos:end="183:49">int_mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:50"><expr pos:start="185:5" pos:end="185:49"><call pos:start="185:5" pos:end="185:49"><name pos:start="185:5" pos:end="185:20">usb_packet_unmap</name><argument_list pos:start="185:21" pos:end="185:49">(<argument pos:start="185:22" pos:end="185:35"><expr pos:start="185:22" pos:end="185:35"><operator pos:start="185:22" pos:end="185:22">&amp;</operator><name pos:start="185:23" pos:end="185:35"><name pos:start="185:23" pos:end="185:27">async</name><operator pos:start="185:28" pos:end="185:29">-&gt;</operator><name pos:start="185:30" pos:end="185:35">packet</name></name></expr></argument>, <argument pos:start="185:38" pos:end="185:48"><expr pos:start="185:38" pos:end="185:48"><operator pos:start="185:38" pos:end="185:38">&amp;</operator><name pos:start="185:39" pos:end="185:48"><name pos:start="185:39" pos:end="185:43">async</name><operator pos:start="185:44" pos:end="185:45">-&gt;</operator><name pos:start="185:46" pos:end="185:48">sgl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:27"><expr pos:start="187:5" pos:end="187:26"><call pos:start="187:5" pos:end="187:26"><name pos:start="187:5" pos:end="187:19">uhci_async_free</name><argument_list pos:start="187:20" pos:end="187:26">(<argument pos:start="187:21" pos:end="187:25"><expr pos:start="187:21" pos:end="187:25"><name pos:start="187:21" pos:end="187:25">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="189:5" pos:end="189:15">return <expr pos:start="189:12" pos:end="189:14"><name pos:start="189:12" pos:end="189:14">len</name></expr>;</return>

</block_content>}</block></function>
</unit>
