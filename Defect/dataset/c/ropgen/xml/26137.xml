<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26137.c" pos:tabs="8"><function pos:start="1:1" pos:end="33:13"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:21">cpu_get_dump_info</name><parameter_list pos:start="1:22" pos:end="3:73">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:34">ArchDumpInfo</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:40">info</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:72"><decl pos:start="3:23" pos:end="3:72"><type pos:start="3:23" pos:end="3:72"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:53"><name pos:start="3:29" pos:end="3:34">struct</name> <name pos:start="3:36" pos:end="3:53">GuestPhysBlockList</name></name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:72">guest_phys_blocks</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="33:13">{<block_content pos:start="7:5" pos:end="33:13">

    <decl_stmt pos:start="7:5" pos:end="7:45"><decl pos:start="7:5" pos:end="7:44"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">PowerPCCPU</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">cpu</name> <init pos:start="7:21" pos:end="7:44">= <expr pos:start="7:23" pos:end="7:44"><call pos:start="7:23" pos:end="7:44"><name pos:start="7:23" pos:end="7:33">POWERPC_CPU</name><argument_list pos:start="7:34" pos:end="7:44">(<argument pos:start="7:35" pos:end="7:43"><expr pos:start="7:35" pos:end="7:43"><name pos:start="7:35" pos:end="7:43">first_cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:21"><name pos:start="9:5" pos:end="9:19">PowerPCCPUClass</name> <modifier pos:start="9:21" pos:end="9:21">*</modifier></type><name pos:start="9:22" pos:end="9:24">pcc</name> <init pos:start="9:26" pos:end="9:53">= <expr pos:start="9:28" pos:end="9:53"><call pos:start="9:28" pos:end="9:53"><name pos:start="9:28" pos:end="9:48">POWERPC_CPU_GET_CLASS</name><argument_list pos:start="9:49" pos:end="9:53">(<argument pos:start="9:50" pos:end="9:52"><expr pos:start="9:50" pos:end="9:52"><name pos:start="9:50" pos:end="9:52">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:8">info</name><operator pos:start="13:9" pos:end="13:10">-&gt;</operator><name pos:start="13:11" pos:end="13:19">d_machine</name></name> <operator pos:start="13:21" pos:end="13:21">=</operator> <name pos:start="13:23" pos:end="13:30">EM_PPC64</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:31"><expr pos:start="15:5" pos:end="15:30"><name pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:8">info</name><operator pos:start="15:9" pos:end="15:10">-&gt;</operator><name pos:start="15:11" pos:end="15:17">d_class</name></name> <operator pos:start="15:19" pos:end="15:19">=</operator> <name pos:start="15:21" pos:end="15:30">ELFCLASS64</name></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="33:13"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:43">(<expr pos:start="17:9" pos:end="17:42"><call pos:start="17:9" pos:end="17:42">(<modifier pos:start="17:10" pos:end="17:10">*</modifier><name pos:start="17:11" pos:end="17:36"><name pos:start="17:11" pos:end="17:13">pcc</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:36">interrupts_big_endian</name></name>)<argument_list pos:start="17:38" pos:end="17:42">(<argument pos:start="17:39" pos:end="17:41"><expr pos:start="17:39" pos:end="17:41"><name pos:start="17:39" pos:end="17:41">cpu</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:45" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:37">

        <expr_stmt pos:start="19:9" pos:end="19:37"><expr pos:start="19:9" pos:end="19:36"><name pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:12">info</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:22">d_endian</name></name> <operator pos:start="19:24" pos:end="19:24">=</operator> <name pos:start="19:26" pos:end="19:36">ELFDATA2MSB</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="21:7" pos:end="33:13">else <block pos:start="21:12" pos:end="33:13">{<block_content pos:start="23:9" pos:end="33:13">

        <expr_stmt pos:start="23:9" pos:end="23:37"><expr pos:start="23:9" pos:end="23:36"><name pos:start="23:9" pos:end="23:22"><name pos:start="23:9" pos:end="23:12">info</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:22">d_endian</name></name> <operator pos:start="23:24" pos:end="23:24">=</operator> <name pos:start="23:26" pos:end="23:36">ELFDATA2LSB</name></expr>;</expr_stmt>









    <return pos:start="33:5" pos:end="33:13">return <expr pos:start="33:12" pos:end="33:12"><literal type="number" pos:start="33:12" pos:end="33:12">0</literal></expr>;</return></block_content></block></else></if_stmt></block_content></block></function>
</unit>
