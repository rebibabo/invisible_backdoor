<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19852.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:28">ff_fmt_convert_init_x86</name><parameter_list pos:start="1:29" pos:end="1:73">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:46">FmtConvertContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">c</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:72"><decl pos:start="1:52" pos:end="1:72"><type pos:start="1:52" pos:end="1:72"><name pos:start="1:52" pos:end="1:65">AVCodecContext</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:72">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:5">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:16">mm_flags</name> <init pos:start="5:18" pos:end="5:37">= <expr pos:start="5:20" pos:end="5:37"><call pos:start="5:20" pos:end="5:37"><name pos:start="5:20" pos:end="5:35">av_get_cpu_flags</name><argument_list pos:start="5:36" pos:end="5:37">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="71:5"><if pos:start="9:5" pos:end="71:5">if <condition pos:start="9:8" pos:end="9:35">(<expr pos:start="9:9" pos:end="9:34"><name pos:start="9:9" pos:end="9:16">mm_flags</name> <operator pos:start="9:18" pos:end="9:18">&amp;</operator> <name pos:start="9:20" pos:end="9:34">AV_CPU_FLAG_MMX</name></expr>)</condition> <block pos:start="9:37" pos:end="71:5">{<block_content pos:start="13:9" pos:end="69:9">

<cpp:if pos:start="11:1" pos:end="11:13">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:13">HAVE_YASM</name></expr></cpp:if>

        <expr_stmt pos:start="13:9" pos:end="13:51"><expr pos:start="13:9" pos:end="13:50"><name pos:start="13:9" pos:end="13:27"><name pos:start="13:9" pos:end="13:9">c</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:27">float_interleave</name></name> <operator pos:start="13:29" pos:end="13:29">=</operator> <name pos:start="13:31" pos:end="13:50">float_interleave_mmx</name></expr>;</expr_stmt>



        <if_stmt pos:start="17:9" pos:end="27:9"><if pos:start="17:9" pos:end="27:9">if<condition pos:start="17:11" pos:end="17:40">(<expr pos:start="17:12" pos:end="17:39"><name pos:start="17:12" pos:end="17:19">mm_flags</name> <operator pos:start="17:21" pos:end="17:21">&amp;</operator> <name pos:start="17:23" pos:end="17:39">AV_CPU_FLAG_3DNOW</name></expr>)</condition><block pos:start="17:41" pos:end="27:9">{<block_content pos:start="19:13" pos:end="25:13">

            <if_stmt pos:start="19:13" pos:end="25:13"><if pos:start="19:13" pos:end="25:13">if<condition pos:start="19:15" pos:end="19:53">(<expr pos:start="19:16" pos:end="19:52"><operator pos:start="19:16" pos:end="19:16">!</operator><operator pos:start="19:17" pos:end="19:17">(</operator><name pos:start="19:18" pos:end="19:29"><name pos:start="19:18" pos:end="19:22">avctx</name><operator pos:start="19:23" pos:end="19:24">-&gt;</operator><name pos:start="19:25" pos:end="19:29">flags</name></name> <operator pos:start="19:31" pos:end="19:31">&amp;</operator> <name pos:start="19:33" pos:end="19:51">CODEC_FLAG_BITEXACT</name><operator pos:start="19:52" pos:end="19:52">)</operator></expr>)</condition><block pos:start="19:54" pos:end="25:13">{<block_content pos:start="21:17" pos:end="23:79">

                <expr_stmt pos:start="21:17" pos:end="21:60"><expr pos:start="21:17" pos:end="21:59"><name pos:start="21:17" pos:end="21:33"><name pos:start="21:17" pos:end="21:17">c</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:33">float_to_int16</name></name> <operator pos:start="21:35" pos:end="21:35">=</operator> <name pos:start="21:37" pos:end="21:59">ff_float_to_int16_3dnow</name></expr>;</expr_stmt>

                <expr_stmt pos:start="23:17" pos:end="23:79"><expr pos:start="23:17" pos:end="23:78"><name pos:start="23:17" pos:end="23:44"><name pos:start="23:17" pos:end="23:17">c</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:44">float_to_int16_interleave</name></name> <operator pos:start="23:46" pos:end="23:46">=</operator> <name pos:start="23:48" pos:end="23:78">float_to_int16_interleave_3dnow</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="40:0"><if pos:start="29:9" pos:end="40:0">if<condition pos:start="29:11" pos:end="29:43">(<expr pos:start="29:12" pos:end="29:42"><name pos:start="29:12" pos:end="29:19">mm_flags</name> <operator pos:start="29:21" pos:end="29:21">&amp;</operator> <name pos:start="29:23" pos:end="29:42">AV_CPU_FLAG_3DNOWEXT</name></expr>)</condition><block pos:start="29:44" pos:end="40:0">{<block_content pos:start="31:13" pos:end="35:13">

            <if_stmt pos:start="31:13" pos:end="35:13"><if pos:start="31:13" pos:end="35:13">if<condition pos:start="31:15" pos:end="31:53">(<expr pos:start="31:16" pos:end="31:52"><operator pos:start="31:16" pos:end="31:16">!</operator><operator pos:start="31:17" pos:end="31:17">(</operator><name pos:start="31:18" pos:end="31:29"><name pos:start="31:18" pos:end="31:22">avctx</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:29">flags</name></name> <operator pos:start="31:31" pos:end="31:31">&amp;</operator> <name pos:start="31:33" pos:end="31:51">CODEC_FLAG_BITEXACT</name><operator pos:start="31:52" pos:end="31:52">)</operator></expr>)</condition><block pos:start="31:54" pos:end="35:13">{<block_content pos:start="33:17" pos:end="33:78">

                <expr_stmt pos:start="33:17" pos:end="33:78"><expr pos:start="33:17" pos:end="33:77"><name pos:start="33:17" pos:end="33:44"><name pos:start="33:17" pos:end="33:17">c</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:44">float_to_int16_interleave</name></name> <operator pos:start="33:46" pos:end="33:46">=</operator> <name pos:start="33:48" pos:end="33:77">float_to_int16_interleave_3dn2</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="41:9" pos:end="55:9"><if pos:start="41:9" pos:end="55:9">if<condition pos:start="41:11" pos:end="41:38">(<expr pos:start="41:12" pos:end="41:37"><name pos:start="41:12" pos:end="41:19">mm_flags</name> <operator pos:start="41:21" pos:end="41:21">&amp;</operator> <name pos:start="41:23" pos:end="41:37">AV_CPU_FLAG_SSE</name></expr>)</condition><block pos:start="41:39" pos:end="55:9">{<block_content pos:start="43:13" pos:end="54:0">

            <expr_stmt pos:start="43:13" pos:end="46:0"><expr pos:start="43:13" pos:end="43:74"><name pos:start="43:13" pos:end="43:41"><name pos:start="43:13" pos:end="43:13">c</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:41">int32_to_float_fmul_scalar</name></name> <operator pos:start="43:43" pos:end="43:43">=</operator> <name pos:start="43:45" pos:end="43:74">int32_to_float_fmul_scalar_sse</name></expr>;</expr_stmt>

<cpp:if pos:start="45:1" pos:end="45:13">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:13"><name pos:start="45:5" pos:end="45:13">HAVE_YASM</name></expr></cpp:if>

            <expr_stmt pos:start="47:13" pos:end="47:54"><expr pos:start="47:13" pos:end="47:53"><name pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:13">c</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:29">float_to_int16</name></name> <operator pos:start="47:31" pos:end="47:31">=</operator> <name pos:start="47:33" pos:end="47:53">ff_float_to_int16_sse</name></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:73"><expr pos:start="49:13" pos:end="49:72"><name pos:start="49:13" pos:end="49:40"><name pos:start="49:13" pos:end="49:13">c</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:40">float_to_int16_interleave</name></name> <operator pos:start="49:42" pos:end="49:42">=</operator> <name pos:start="49:44" pos:end="49:72">float_to_int16_interleave_sse</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="54:0"><expr pos:start="51:13" pos:end="51:54"><name pos:start="51:13" pos:end="51:31"><name pos:start="51:13" pos:end="51:13">c</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:31">float_interleave</name></name> <operator pos:start="51:33" pos:end="51:33">=</operator> <name pos:start="51:35" pos:end="51:54">float_interleave_sse</name></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="69:9"><if pos:start="57:9" pos:end="69:9">if<condition pos:start="57:11" pos:end="57:39">(<expr pos:start="57:12" pos:end="57:38"><name pos:start="57:12" pos:end="57:19">mm_flags</name> <operator pos:start="57:21" pos:end="57:21">&amp;</operator> <name pos:start="57:23" pos:end="57:38">AV_CPU_FLAG_SSE2</name></expr>)</condition><block pos:start="57:40" pos:end="69:9">{<block_content pos:start="59:13" pos:end="68:0">

            <expr_stmt pos:start="59:13" pos:end="62:0"><expr pos:start="59:13" pos:end="59:75"><name pos:start="59:13" pos:end="59:41"><name pos:start="59:13" pos:end="59:13">c</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:41">int32_to_float_fmul_scalar</name></name> <operator pos:start="59:43" pos:end="59:43">=</operator> <name pos:start="59:45" pos:end="59:75">int32_to_float_fmul_scalar_sse2</name></expr>;</expr_stmt>

<cpp:if pos:start="61:1" pos:end="61:13">#<cpp:directive pos:start="61:2" pos:end="61:3">if</cpp:directive> <expr pos:start="61:5" pos:end="61:13"><name pos:start="61:5" pos:end="61:13">HAVE_YASM</name></expr></cpp:if>

            <expr_stmt pos:start="63:13" pos:end="63:55"><expr pos:start="63:13" pos:end="63:54"><name pos:start="63:13" pos:end="63:29"><name pos:start="63:13" pos:end="63:13">c</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:29">float_to_int16</name></name> <operator pos:start="63:31" pos:end="63:31">=</operator> <name pos:start="63:33" pos:end="63:54">ff_float_to_int16_sse2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="68:0"><expr pos:start="65:13" pos:end="65:73"><name pos:start="65:13" pos:end="65:40"><name pos:start="65:13" pos:end="65:13">c</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:40">float_to_int16_interleave</name></name> <operator pos:start="65:42" pos:end="65:42">=</operator> <name pos:start="65:44" pos:end="65:73">float_to_int16_interleave_sse2</name></expr>;</expr_stmt>

<cpp:endif pos:start="67:1" pos:end="67:6">#<cpp:directive pos:start="67:2" pos:end="67:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
