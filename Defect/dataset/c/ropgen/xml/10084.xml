<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10084.c" pos:tabs="8"><function pos:start="1:1" pos:end="129:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint16_t</name></type> <name pos:start="1:17" pos:end="1:30">md_common_read</name><parameter_list pos:start="1:31" pos:end="1:66">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:46">PCMCIACardState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:52">card</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:65"><decl pos:start="1:55" pos:end="1:65"><type pos:start="1:55" pos:end="1:65"><name pos:start="1:55" pos:end="1:62">uint32_t</name></type> <name pos:start="1:64" pos:end="1:65">at</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="129:1">{<block_content pos:start="5:5" pos:end="127:13">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">MicroDriveState</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">s</name> <init pos:start="5:24" pos:end="5:41">= <expr pos:start="5:26" pos:end="5:41"><call pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:35">MICRODRIVE</name><argument_list pos:start="5:36" pos:end="5:41">(<argument pos:start="5:37" pos:end="5:40"><expr pos:start="5:37" pos:end="5:40"><name pos:start="5:37" pos:end="5:40">card</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IDEState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:17">ifs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:16">ret</name></decl>;</decl_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:21"><expr pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:6">at</name> <operator pos:start="11:8" pos:end="11:9">-=</operator> <name pos:start="11:11" pos:end="11:20"><name pos:start="11:11" pos:end="11:11">s</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:20">io_base</name></name></expr>;</expr_stmt>



    <switch pos:start="15:5" pos:end="59:5">switch <condition pos:start="15:12" pos:end="15:30">(<expr pos:start="15:13" pos:end="15:29"><name pos:start="15:13" pos:end="15:18"><name pos:start="15:13" pos:end="15:13">s</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:18">opt</name></name> <operator pos:start="15:20" pos:end="15:20">&amp;</operator> <name pos:start="15:22" pos:end="15:29">OPT_MODE</name></expr>)</condition> <block pos:start="15:32" pos:end="59:5">{<block_content pos:start="17:5" pos:end="57:9">

    <case pos:start="17:5" pos:end="17:23">case <expr pos:start="17:10" pos:end="17:22"><name pos:start="17:10" pos:end="17:22">OPT_MODE_MMAP</name></expr>:</case>

        <if_stmt pos:start="19:9" pos:end="23:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:35">(<expr pos:start="19:13" pos:end="19:34"><operator pos:start="19:13" pos:end="19:13">(</operator><name pos:start="19:14" pos:end="19:15">at</name> <operator pos:start="19:17" pos:end="19:17">&amp;</operator> <operator pos:start="19:19" pos:end="19:19">~</operator><literal type="number" pos:start="19:20" pos:end="19:24">0x3ff</literal><operator pos:start="19:25" pos:end="19:25">)</operator> <operator pos:start="19:27" pos:end="19:28">==</operator> <literal type="number" pos:start="19:30" pos:end="19:34">0x400</literal></expr>)</condition> <block pos:start="19:37" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:19">

            <expr_stmt pos:start="21:13" pos:end="21:19"><expr pos:start="21:13" pos:end="21:18"><name pos:start="21:13" pos:end="21:14">at</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="25:9" pos:end="25:14">break;</break>

    <case pos:start="27:5" pos:end="27:26">case <expr pos:start="27:10" pos:end="27:25"><name pos:start="27:10" pos:end="27:25">OPT_MODE_IOMAP16</name></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:18"><expr pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:10">at</name> <operator pos:start="29:12" pos:end="29:13">&amp;=</operator> <literal type="number" pos:start="29:15" pos:end="29:17">0xf</literal></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:25">case <expr pos:start="33:10" pos:end="33:24"><name pos:start="33:10" pos:end="33:24">OPT_MODE_IOMAP1</name></expr>:</case>

        <if_stmt pos:start="35:9" pos:end="43:9"><if pos:start="35:9" pos:end="39:9">if <condition pos:start="35:12" pos:end="35:33">(<expr pos:start="35:13" pos:end="35:32"><operator pos:start="35:13" pos:end="35:13">(</operator><name pos:start="35:14" pos:end="35:15">at</name> <operator pos:start="35:17" pos:end="35:17">&amp;</operator> <operator pos:start="35:19" pos:end="35:19">~</operator><literal type="number" pos:start="35:20" pos:end="35:22">0xf</literal><operator pos:start="35:23" pos:end="35:23">)</operator> <operator pos:start="35:25" pos:end="35:26">==</operator> <literal type="number" pos:start="35:28" pos:end="35:32">0x3f0</literal></expr>)</condition> <block pos:start="35:35" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:24">

            <expr_stmt pos:start="37:13" pos:end="37:24"><expr pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:14">at</name> <operator pos:start="37:16" pos:end="37:17">-=</operator> <literal type="number" pos:start="37:19" pos:end="37:23">0x3e8</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="39:11" pos:end="43:9">else if <condition pos:start="39:19" pos:end="39:40">(<expr pos:start="39:20" pos:end="39:39"><operator pos:start="39:20" pos:end="39:20">(</operator><name pos:start="39:21" pos:end="39:22">at</name> <operator pos:start="39:24" pos:end="39:24">&amp;</operator> <operator pos:start="39:26" pos:end="39:26">~</operator><literal type="number" pos:start="39:27" pos:end="39:29">0xf</literal><operator pos:start="39:30" pos:end="39:30">)</operator> <operator pos:start="39:32" pos:end="39:33">==</operator> <literal type="number" pos:start="39:35" pos:end="39:39">0x1f0</literal></expr>)</condition> <block pos:start="39:42" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:24">

            <expr_stmt pos:start="41:13" pos:end="41:24"><expr pos:start="41:13" pos:end="41:23"><name pos:start="41:13" pos:end="41:14">at</name> <operator pos:start="41:16" pos:end="41:17">-=</operator> <literal type="number" pos:start="41:19" pos:end="41:23">0x1f0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <case pos:start="47:5" pos:end="47:25">case <expr pos:start="47:10" pos:end="47:24"><name pos:start="47:10" pos:end="47:24">OPT_MODE_IOMAP2</name></expr>:</case>

        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:33">(<expr pos:start="49:13" pos:end="49:32"><operator pos:start="49:13" pos:end="49:13">(</operator><name pos:start="49:14" pos:end="49:15">at</name> <operator pos:start="49:17" pos:end="49:17">&amp;</operator> <operator pos:start="49:19" pos:end="49:19">~</operator><literal type="number" pos:start="49:20" pos:end="49:22">0xf</literal><operator pos:start="49:23" pos:end="49:23">)</operator> <operator pos:start="49:25" pos:end="49:26">==</operator> <literal type="number" pos:start="49:28" pos:end="49:32">0x370</literal></expr>)</condition> <block pos:start="49:35" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:24">

            <expr_stmt pos:start="51:13" pos:end="51:24"><expr pos:start="51:13" pos:end="51:23"><name pos:start="51:13" pos:end="51:14">at</name> <operator pos:start="51:16" pos:end="51:17">-=</operator> <literal type="number" pos:start="51:19" pos:end="51:23">0x368</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="53:11" pos:end="57:9">else if <condition pos:start="53:19" pos:end="53:40">(<expr pos:start="53:20" pos:end="53:39"><operator pos:start="53:20" pos:end="53:20">(</operator><name pos:start="53:21" pos:end="53:22">at</name> <operator pos:start="53:24" pos:end="53:24">&amp;</operator> <operator pos:start="53:26" pos:end="53:26">~</operator><literal type="number" pos:start="53:27" pos:end="53:29">0xf</literal><operator pos:start="53:30" pos:end="53:30">)</operator> <operator pos:start="53:32" pos:end="53:33">==</operator> <literal type="number" pos:start="53:35" pos:end="53:39">0x170</literal></expr>)</condition> <block pos:start="53:42" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:24">

            <expr_stmt pos:start="55:13" pos:end="55:24"><expr pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:14">at</name> <operator pos:start="55:16" pos:end="55:17">-=</operator> <literal type="number" pos:start="55:19" pos:end="55:23">0x170</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></switch>



    <switch pos:start="63:5" pos:end="123:5">switch <condition pos:start="63:12" pos:end="63:15">(<expr pos:start="63:13" pos:end="63:14"><name pos:start="63:13" pos:end="63:14">at</name></expr>)</condition> <block pos:start="63:17" pos:end="123:5">{<block_content pos:start="65:5" pos:end="121:44">

    <case pos:start="65:5" pos:end="65:13">case <expr pos:start="65:10" pos:end="65:12"><literal type="number" pos:start="65:10" pos:end="65:12">0x0</literal></expr>:</case>	<comment type="block" pos:start="65:17" pos:end="65:34">/* Even RD Data */</comment>

    <case pos:start="67:5" pos:end="67:13">case <expr pos:start="67:10" pos:end="67:12"><literal type="number" pos:start="67:10" pos:end="67:12">0x8</literal></expr>:</case>

        <return pos:start="69:9" pos:end="69:42">return <expr pos:start="69:16" pos:end="69:41"><call pos:start="69:16" pos:end="69:41"><name pos:start="69:16" pos:end="69:29">ide_data_readw</name><argument_list pos:start="69:30" pos:end="69:41">(<argument pos:start="69:31" pos:end="69:37"><expr pos:start="69:31" pos:end="69:37"><operator pos:start="69:31" pos:end="69:31">&amp;</operator><name pos:start="69:32" pos:end="69:37"><name pos:start="69:32" pos:end="69:32">s</name><operator pos:start="69:33" pos:end="69:34">-&gt;</operator><name pos:start="69:35" pos:end="69:37">bus</name></name></expr></argument>, <argument pos:start="69:40" pos:end="69:40"><expr pos:start="69:40" pos:end="69:40"><literal type="number" pos:start="69:40" pos:end="69:40">0</literal></expr></argument>)</argument_list></call></expr>;</return>



        <comment type="block" pos:start="73:9" pos:end="73:34">/* TODO: 8-bit accesses */</comment>

        <if_stmt pos:start="75:9" pos:end="85:9"><if pos:start="75:9" pos:end="79:9">if <condition pos:start="75:12" pos:end="75:21">(<expr pos:start="75:13" pos:end="75:20"><name pos:start="75:13" pos:end="75:20"><name pos:start="75:13" pos:end="75:13">s</name><operator pos:start="75:14" pos:end="75:15">-&gt;</operator><name pos:start="75:16" pos:end="75:20">cycle</name></name></expr>)</condition> <block pos:start="75:23" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:29">

            <expr_stmt pos:start="77:13" pos:end="77:29"><expr pos:start="77:13" pos:end="77:28"><name pos:start="77:13" pos:end="77:15">ret</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:23"><name pos:start="77:19" pos:end="77:19">s</name><operator pos:start="77:20" pos:end="77:21">-&gt;</operator><name pos:start="77:22" pos:end="77:23">io</name></name> <operator pos:start="77:25" pos:end="77:26">&gt;&gt;</operator> <literal type="number" pos:start="77:28" pos:end="77:28">8</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="79:11" pos:end="85:9">else <block pos:start="79:16" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:31">

            <expr_stmt pos:start="81:13" pos:end="81:47"><expr pos:start="81:13" pos:end="81:46"><name pos:start="81:13" pos:end="81:17"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:17">io</name></name> <operator pos:start="81:19" pos:end="81:19">=</operator> <call pos:start="81:21" pos:end="81:46"><name pos:start="81:21" pos:end="81:34">ide_data_readw</name><argument_list pos:start="81:35" pos:end="81:46">(<argument pos:start="81:36" pos:end="81:42"><expr pos:start="81:36" pos:end="81:42"><operator pos:start="81:36" pos:end="81:36">&amp;</operator><name pos:start="81:37" pos:end="81:42"><name pos:start="81:37" pos:end="81:37">s</name><operator pos:start="81:38" pos:end="81:39">-&gt;</operator><name pos:start="81:40" pos:end="81:42">bus</name></name></expr></argument>, <argument pos:start="81:45" pos:end="81:45"><expr pos:start="81:45" pos:end="81:45"><literal type="number" pos:start="81:45" pos:end="81:45">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:31"><expr pos:start="83:13" pos:end="83:30"><name pos:start="83:13" pos:end="83:15">ret</name> <operator pos:start="83:17" pos:end="83:17">=</operator> <name pos:start="83:19" pos:end="83:23"><name pos:start="83:19" pos:end="83:19">s</name><operator pos:start="83:20" pos:end="83:21">-&gt;</operator><name pos:start="83:22" pos:end="83:23">io</name></name> <operator pos:start="83:25" pos:end="83:25">&amp;</operator> <literal type="number" pos:start="83:27" pos:end="83:30">0xff</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:29"><expr pos:start="87:9" pos:end="87:28"><name pos:start="87:9" pos:end="87:16"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:16">cycle</name></name> <operator pos:start="87:18" pos:end="87:18">=</operator> <operator pos:start="87:20" pos:end="87:20">!</operator><name pos:start="87:21" pos:end="87:28"><name pos:start="87:21" pos:end="87:21">s</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:28">cycle</name></name></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:19">return <expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">ret</name></expr>;</return>

    <case pos:start="91:5" pos:end="91:13">case <expr pos:start="91:10" pos:end="91:12"><literal type="number" pos:start="91:10" pos:end="91:12">0x9</literal></expr>:</case>	<comment type="block" pos:start="91:17" pos:end="91:33">/* Odd RD Data */</comment>

        <return pos:start="93:9" pos:end="93:26">return <expr pos:start="93:16" pos:end="93:25"><name pos:start="93:16" pos:end="93:20"><name pos:start="93:16" pos:end="93:16">s</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:20">io</name></name> <operator pos:start="93:22" pos:end="93:23">&gt;&gt;</operator> <literal type="number" pos:start="93:25" pos:end="93:25">8</literal></expr>;</return>

    <case pos:start="95:5" pos:end="95:13">case <expr pos:start="95:10" pos:end="95:12"><literal type="number" pos:start="95:10" pos:end="95:12">0xd</literal></expr>:</case>	<comment type="block" pos:start="95:17" pos:end="95:27">/* Error */</comment>

        <return pos:start="97:9" pos:end="97:45">return <expr pos:start="97:16" pos:end="97:44"><call pos:start="97:16" pos:end="97:44"><name pos:start="97:16" pos:end="97:30">ide_ioport_read</name><argument_list pos:start="97:31" pos:end="97:44">(<argument pos:start="97:32" pos:end="97:38"><expr pos:start="97:32" pos:end="97:38"><operator pos:start="97:32" pos:end="97:32">&amp;</operator><name pos:start="97:33" pos:end="97:38"><name pos:start="97:33" pos:end="97:33">s</name><operator pos:start="97:34" pos:end="97:35">-&gt;</operator><name pos:start="97:36" pos:end="97:38">bus</name></name></expr></argument>, <argument pos:start="97:41" pos:end="97:43"><expr pos:start="97:41" pos:end="97:43"><literal type="number" pos:start="97:41" pos:end="97:43">0x1</literal></expr></argument>)</argument_list></call></expr>;</return>

    <case pos:start="99:5" pos:end="99:13">case <expr pos:start="99:10" pos:end="99:12"><literal type="number" pos:start="99:10" pos:end="99:12">0xe</literal></expr>:</case>	<comment type="block" pos:start="99:17" pos:end="99:38">/* Alternate Status */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:40"><expr pos:start="101:9" pos:end="101:39"><name pos:start="101:9" pos:end="101:11">ifs</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <call pos:start="101:15" pos:end="101:39"><name pos:start="101:15" pos:end="101:30">idebus_active_if</name><argument_list pos:start="101:31" pos:end="101:39">(<argument pos:start="101:32" pos:end="101:38"><expr pos:start="101:32" pos:end="101:38"><operator pos:start="101:32" pos:end="101:32">&amp;</operator><name pos:start="101:33" pos:end="101:38"><name pos:start="101:33" pos:end="101:33">s</name><operator pos:start="101:34" pos:end="101:35">-&gt;</operator><name pos:start="101:36" pos:end="101:38">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="111:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:20">(<expr pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:15">ifs</name><operator pos:start="103:16" pos:end="103:17">-&gt;</operator><name pos:start="103:18" pos:end="103:19">bs</name></name></expr>)</condition> <block pos:start="103:22" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:31">

            <return pos:start="105:13" pos:end="105:31">return <expr pos:start="105:20" pos:end="105:30"><name pos:start="105:20" pos:end="105:30"><name pos:start="105:20" pos:end="105:22">ifs</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:30">status</name></name></expr>;</return>

        </block_content>}</block></if> <else pos:start="107:11" pos:end="111:9">else <block pos:start="107:16" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:21">

            <return pos:start="109:13" pos:end="109:21">return <expr pos:start="109:20" pos:end="109:20"><literal type="number" pos:start="109:20" pos:end="109:20">0</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

    <case pos:start="113:5" pos:end="113:13">case <expr pos:start="113:10" pos:end="113:12"><literal type="number" pos:start="113:10" pos:end="113:12">0xf</literal></expr>:</case>	<comment type="block" pos:start="113:17" pos:end="113:36">/* Device Address */</comment>

        <expr_stmt pos:start="115:9" pos:end="115:40"><expr pos:start="115:9" pos:end="115:39"><name pos:start="115:9" pos:end="115:11">ifs</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <call pos:start="115:15" pos:end="115:39"><name pos:start="115:15" pos:end="115:30">idebus_active_if</name><argument_list pos:start="115:31" pos:end="115:39">(<argument pos:start="115:32" pos:end="115:38"><expr pos:start="115:32" pos:end="115:38"><operator pos:start="115:32" pos:end="115:32">&amp;</operator><name pos:start="115:33" pos:end="115:38"><name pos:start="115:33" pos:end="115:33">s</name><operator pos:start="115:34" pos:end="115:35">-&gt;</operator><name pos:start="115:36" pos:end="115:38">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:51">return <expr pos:start="117:16" pos:end="117:50"><literal type="number" pos:start="117:16" pos:end="117:19">0xc2</literal> <operator pos:start="117:21" pos:end="117:21">|</operator> <operator pos:start="117:23" pos:end="117:23">(</operator><operator pos:start="117:24" pos:end="117:24">(</operator><operator pos:start="117:25" pos:end="117:25">~</operator><name pos:start="117:26" pos:end="117:36"><name pos:start="117:26" pos:end="117:28">ifs</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:36">select</name></name> <operator pos:start="117:38" pos:end="117:39">&lt;&lt;</operator> <literal type="number" pos:start="117:41" pos:end="117:41">2</literal><operator pos:start="117:42" pos:end="117:42">)</operator> <operator pos:start="117:44" pos:end="117:44">&amp;</operator> <literal type="number" pos:start="117:46" pos:end="117:49">0x3c</literal><operator pos:start="117:50" pos:end="117:50">)</operator></expr>;</return>

    <default pos:start="119:5" pos:end="119:12">default:</default>

        <return pos:start="121:9" pos:end="121:44">return <expr pos:start="121:16" pos:end="121:43"><call pos:start="121:16" pos:end="121:43"><name pos:start="121:16" pos:end="121:30">ide_ioport_read</name><argument_list pos:start="121:31" pos:end="121:43">(<argument pos:start="121:32" pos:end="121:38"><expr pos:start="121:32" pos:end="121:38"><operator pos:start="121:32" pos:end="121:32">&amp;</operator><name pos:start="121:33" pos:end="121:38"><name pos:start="121:33" pos:end="121:33">s</name><operator pos:start="121:34" pos:end="121:35">-&gt;</operator><name pos:start="121:36" pos:end="121:38">bus</name></name></expr></argument>, <argument pos:start="121:41" pos:end="121:42"><expr pos:start="121:41" pos:end="121:42"><name pos:start="121:41" pos:end="121:42">at</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>



    <return pos:start="127:5" pos:end="127:13">return <expr pos:start="127:12" pos:end="127:12"><literal type="number" pos:start="127:12" pos:end="127:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
