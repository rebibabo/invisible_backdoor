<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16887.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">commit_complete</name><parameter_list pos:start="1:28" pos:end="1:56">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:36">BlockJob</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">job</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:47">void</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:55">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:17">

    <decl_stmt pos:start="5:5" pos:end="5:66"><decl pos:start="5:5" pos:end="5:65"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">CommitBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:65">= <expr pos:start="5:25" pos:end="5:65"><call pos:start="5:25" pos:end="5:65"><name pos:start="5:25" pos:end="5:36">container_of</name><argument_list pos:start="5:37" pos:end="5:65">(<argument pos:start="5:38" pos:end="5:40"><expr pos:start="5:38" pos:end="5:40"><name pos:start="5:38" pos:end="5:40">job</name></expr></argument>, <argument pos:start="5:43" pos:end="5:56"><expr pos:start="5:43" pos:end="5:56"><name pos:start="5:43" pos:end="5:56">CommitBlockJob</name></expr></argument>, <argument pos:start="5:59" pos:end="5:64"><expr pos:start="5:59" pos:end="5:64"><name pos:start="5:59" pos:end="5:64">common</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">CommitCompleteData</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:28">data</name> <init pos:start="7:30" pos:end="7:37">= <expr pos:start="7:32" pos:end="7:37"><name pos:start="7:32" pos:end="7:37">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:28">active</name> <init pos:start="9:30" pos:end="9:40">= <expr pos:start="9:32" pos:end="9:40"><name pos:start="9:32" pos:end="9:40"><name pos:start="9:32" pos:end="9:32">s</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:40">active</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:25">top</name> <init pos:start="11:27" pos:end="11:42">= <expr pos:start="11:29" pos:end="11:42"><call pos:start="11:29" pos:end="11:42"><name pos:start="11:29" pos:end="11:34">blk_bs</name><argument_list pos:start="11:35" pos:end="11:42">(<argument pos:start="11:36" pos:end="11:41"><expr pos:start="11:36" pos:end="11:41"><name pos:start="11:36" pos:end="11:41"><name pos:start="11:36" pos:end="11:36">s</name><operator pos:start="11:37" pos:end="11:38">-&gt;</operator><name pos:start="11:39" pos:end="11:41">top</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:44"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockDriverState</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:26">base</name> <init pos:start="13:28" pos:end="13:44">= <expr pos:start="13:30" pos:end="13:44"><call pos:start="13:30" pos:end="13:44"><name pos:start="13:30" pos:end="13:35">blk_bs</name><argument_list pos:start="13:36" pos:end="13:44">(<argument pos:start="13:37" pos:end="13:43"><expr pos:start="13:37" pos:end="13:43"><name pos:start="13:37" pos:end="13:43"><name pos:start="13:37" pos:end="13:37">s</name><operator pos:start="13:38" pos:end="13:39">-&gt;</operator><name pos:start="13:40" pos:end="13:43">base</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:66"><decl pos:start="15:5" pos:end="15:65"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">BlockDriverState</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:32">overlay_bs</name> <init pos:start="15:34" pos:end="15:65">= <expr pos:start="15:36" pos:end="15:65"><call pos:start="15:36" pos:end="15:65"><name pos:start="15:36" pos:end="15:52">bdrv_find_overlay</name><argument_list pos:start="15:53" pos:end="15:65">(<argument pos:start="15:54" pos:end="15:59"><expr pos:start="15:54" pos:end="15:59"><name pos:start="15:54" pos:end="15:59">active</name></expr></argument>, <argument pos:start="15:62" pos:end="15:64"><expr pos:start="15:62" pos:end="15:64"><name pos:start="15:62" pos:end="15:64">top</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name> <init pos:start="17:13" pos:end="17:23">= <expr pos:start="17:15" pos:end="17:23"><name pos:start="17:15" pos:end="17:23"><name pos:start="17:15" pos:end="17:18">data</name><operator pos:start="17:19" pos:end="17:20">-&gt;</operator><name pos:start="17:21" pos:end="17:23">ret</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:56">(<expr pos:start="21:9" pos:end="21:55"><operator pos:start="21:9" pos:end="21:9">!</operator><call pos:start="21:10" pos:end="21:43"><name pos:start="21:10" pos:end="21:31">block_job_is_cancelled</name><argument_list pos:start="21:32" pos:end="21:43">(<argument pos:start="21:33" pos:end="21:42"><expr pos:start="21:33" pos:end="21:42"><operator pos:start="21:33" pos:end="21:33">&amp;</operator><name pos:start="21:34" pos:end="21:42"><name pos:start="21:34" pos:end="21:34">s</name><operator pos:start="21:35" pos:end="21:36">-&gt;</operator><name pos:start="21:37" pos:end="21:42">common</name></name></expr></argument>)</argument_list></call> <operator pos:start="21:45" pos:end="21:46">&amp;&amp;</operator> <name pos:start="21:48" pos:end="21:50">ret</name> <operator pos:start="21:52" pos:end="21:53">==</operator> <literal type="number" pos:start="21:55" pos:end="21:55">0</literal></expr>)</condition> <block pos:start="21:58" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:77">

        <comment type="block" pos:start="23:9" pos:end="23:21">/* success */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:77"><expr pos:start="25:9" pos:end="25:76"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:76"><name pos:start="25:15" pos:end="25:36">bdrv_drop_intermediate</name><argument_list pos:start="25:37" pos:end="25:76">(<argument pos:start="25:38" pos:end="25:43"><expr pos:start="25:38" pos:end="25:43"><name pos:start="25:38" pos:end="25:43">active</name></expr></argument>, <argument pos:start="25:46" pos:end="25:48"><expr pos:start="25:46" pos:end="25:48"><name pos:start="25:46" pos:end="25:48">top</name></expr></argument>, <argument pos:start="25:51" pos:end="25:54"><expr pos:start="25:51" pos:end="25:54"><name pos:start="25:51" pos:end="25:54">base</name></expr></argument>, <argument pos:start="25:57" pos:end="25:75"><expr pos:start="25:57" pos:end="25:75"><name pos:start="25:57" pos:end="25:75"><name pos:start="25:57" pos:end="25:57">s</name><operator pos:start="25:58" pos:end="25:59">-&gt;</operator><name pos:start="25:60" pos:end="25:75">backing_file_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="35:30">/* restore base open flags here if appropriate (e.g., change the base back

     * to r/o). These reopens do not need to be atomic, since we won't abort

     * even on failure here */</comment>

    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:46">(<expr pos:start="37:9" pos:end="37:45"><name pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:21">base_flags</name></name> <operator pos:start="37:23" pos:end="37:24">!=</operator> <call pos:start="37:26" pos:end="37:45"><name pos:start="37:26" pos:end="37:39">bdrv_get_flags</name><argument_list pos:start="37:40" pos:end="37:45">(<argument pos:start="37:41" pos:end="37:44"><expr pos:start="37:41" pos:end="37:44"><name pos:start="37:41" pos:end="37:44">base</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:48" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:47">

        <expr_stmt pos:start="39:9" pos:end="39:47"><expr pos:start="39:9" pos:end="39:46"><call pos:start="39:9" pos:end="39:46"><name pos:start="39:9" pos:end="39:19">bdrv_reopen</name><argument_list pos:start="39:20" pos:end="39:46">(<argument pos:start="39:21" pos:end="39:24"><expr pos:start="39:21" pos:end="39:24"><name pos:start="39:21" pos:end="39:24">base</name></expr></argument>, <argument pos:start="39:27" pos:end="39:39"><expr pos:start="39:27" pos:end="39:39"><name pos:start="39:27" pos:end="39:39"><name pos:start="39:27" pos:end="39:27">s</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:39">base_flags</name></name></expr></argument>, <argument pos:start="39:42" pos:end="39:45"><expr pos:start="39:42" pos:end="39:45"><name pos:start="39:42" pos:end="39:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:74">(<expr pos:start="43:9" pos:end="43:73"><name pos:start="43:9" pos:end="43:18">overlay_bs</name> <operator pos:start="43:20" pos:end="43:21">&amp;&amp;</operator> <name pos:start="43:23" pos:end="43:43"><name pos:start="43:23" pos:end="43:23">s</name><operator pos:start="43:24" pos:end="43:25">-&gt;</operator><name pos:start="43:26" pos:end="43:43">orig_overlay_flags</name></name> <operator pos:start="43:45" pos:end="43:46">!=</operator> <call pos:start="43:48" pos:end="43:73"><name pos:start="43:48" pos:end="43:61">bdrv_get_flags</name><argument_list pos:start="43:62" pos:end="43:73">(<argument pos:start="43:63" pos:end="43:72"><expr pos:start="43:63" pos:end="43:72"><name pos:start="43:63" pos:end="43:72">overlay_bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:76" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:61">

        <expr_stmt pos:start="45:9" pos:end="45:61"><expr pos:start="45:9" pos:end="45:60"><call pos:start="45:9" pos:end="45:60"><name pos:start="45:9" pos:end="45:19">bdrv_reopen</name><argument_list pos:start="45:20" pos:end="45:60">(<argument pos:start="45:21" pos:end="45:30"><expr pos:start="45:21" pos:end="45:30"><name pos:start="45:21" pos:end="45:30">overlay_bs</name></expr></argument>, <argument pos:start="45:33" pos:end="45:53"><expr pos:start="45:33" pos:end="45:53"><name pos:start="45:33" pos:end="45:53"><name pos:start="45:33" pos:end="45:33">s</name><operator pos:start="45:34" pos:end="45:35">-&gt;</operator><name pos:start="45:36" pos:end="45:53">orig_overlay_flags</name></name></expr></argument>, <argument pos:start="45:56" pos:end="45:59"><expr pos:start="45:56" pos:end="45:59"><name pos:start="45:56" pos:end="45:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:32"><expr pos:start="49:5" pos:end="49:31"><call pos:start="49:5" pos:end="49:31"><name pos:start="49:5" pos:end="49:10">g_free</name><argument_list pos:start="49:11" pos:end="49:31">(<argument pos:start="49:12" pos:end="49:30"><expr pos:start="49:12" pos:end="49:30"><name pos:start="49:12" pos:end="49:30"><name pos:start="49:12" pos:end="49:12">s</name><operator pos:start="49:13" pos:end="49:14">-&gt;</operator><name pos:start="49:15" pos:end="49:30">backing_file_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:22"><expr pos:start="51:5" pos:end="51:21"><call pos:start="51:5" pos:end="51:21"><name pos:start="51:5" pos:end="51:13">blk_unref</name><argument_list pos:start="51:14" pos:end="51:21">(<argument pos:start="51:15" pos:end="51:20"><expr pos:start="51:15" pos:end="51:20"><name pos:start="51:15" pos:end="51:20"><name pos:start="51:15" pos:end="51:15">s</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:20">top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:23"><expr pos:start="53:5" pos:end="53:22"><call pos:start="53:5" pos:end="53:22"><name pos:start="53:5" pos:end="53:13">blk_unref</name><argument_list pos:start="53:14" pos:end="53:22">(<argument pos:start="53:15" pos:end="53:21"><expr pos:start="53:15" pos:end="53:21"><name pos:start="53:15" pos:end="53:21"><name pos:start="53:15" pos:end="53:15">s</name><operator pos:start="53:16" pos:end="53:17">-&gt;</operator><name pos:start="53:18" pos:end="53:21">base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:41"><expr pos:start="55:5" pos:end="55:40"><call pos:start="55:5" pos:end="55:40"><name pos:start="55:5" pos:end="55:23">block_job_completed</name><argument_list pos:start="55:24" pos:end="55:40">(<argument pos:start="55:25" pos:end="55:34"><expr pos:start="55:25" pos:end="55:34"><operator pos:start="55:25" pos:end="55:25">&amp;</operator><name pos:start="55:26" pos:end="55:34"><name pos:start="55:26" pos:end="55:26">s</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:34">common</name></name></expr></argument>, <argument pos:start="55:37" pos:end="55:39"><expr pos:start="55:37" pos:end="55:39"><name pos:start="55:37" pos:end="55:39">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:17"><expr pos:start="57:5" pos:end="57:16"><call pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:10">g_free</name><argument_list pos:start="57:11" pos:end="57:16">(<argument pos:start="57:12" pos:end="57:15"><expr pos:start="57:12" pos:end="57:15"><name pos:start="57:12" pos:end="57:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
