<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16761.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:40">inject_fake_duration_metadata</name><parameter_list pos:start="1:41" pos:end="1:57">(<parameter pos:start="1:42" pos:end="1:56"><decl pos:start="1:42" pos:end="1:56"><type pos:start="1:42" pos:end="1:54"><name pos:start="1:42" pos:end="1:52">RTMPContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">rt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="13:5" pos:end="103:13">

    <comment type="line" pos:start="5:5" pos:end="5:66">// We need to insert the metdata packet directly after the FLV</comment>

    <comment type="line" pos:start="7:5" pos:end="7:70">// header, i.e. we need to move all other already read data by the</comment>

    <comment type="line" pos:start="9:5" pos:end="9:40">// size of our fake metadata packet.</comment>



    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:11">uint8_t</name><modifier pos:start="13:12" pos:end="13:12">*</modifier></type> <name pos:start="13:14" pos:end="13:14">p</name></decl>;</decl_stmt>

    <comment type="line" pos:start="15:5" pos:end="15:32">// Keep old flv_data pointer</comment>

    <decl_stmt pos:start="17:5" pos:end="17:41"><decl pos:start="17:5" pos:end="17:40"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:11">uint8_t</name><modifier pos:start="17:12" pos:end="17:12">*</modifier></type> <name pos:start="17:14" pos:end="17:25">old_flv_data</name> <init pos:start="17:27" pos:end="17:40">= <expr pos:start="17:29" pos:end="17:40"><name pos:start="17:29" pos:end="17:40"><name pos:start="17:29" pos:end="17:30">rt</name><operator pos:start="17:31" pos:end="17:32">-&gt;</operator><name pos:start="17:33" pos:end="17:40">flv_data</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line" pos:start="19:5" pos:end="19:83">// Allocate a new flv_data pointer with enough space for the additional package</comment>

    <if_stmt pos:start="21:5" pos:end="27:5"><if pos:start="21:5" pos:end="27:5">if <condition pos:start="21:8" pos:end="21:55">(<expr pos:start="21:9" pos:end="21:54"><operator pos:start="21:9" pos:end="21:9">!</operator><operator pos:start="21:10" pos:end="21:10">(</operator><name pos:start="21:11" pos:end="21:22"><name pos:start="21:11" pos:end="21:12">rt</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:22">flv_data</name></name> <operator pos:start="21:24" pos:end="21:24">=</operator> <call pos:start="21:26" pos:end="21:53"><name pos:start="21:26" pos:end="21:34">av_malloc</name><argument_list pos:start="21:35" pos:end="21:53">(<argument pos:start="21:36" pos:end="21:52"><expr pos:start="21:36" pos:end="21:52"><name pos:start="21:36" pos:end="21:47"><name pos:start="21:36" pos:end="21:37">rt</name><operator pos:start="21:38" pos:end="21:39">-&gt;</operator><name pos:start="21:40" pos:end="21:47">flv_size</name></name> <operator pos:start="21:49" pos:end="21:49">+</operator> <literal type="number" pos:start="21:51" pos:end="21:52">55</literal></expr></argument>)</argument_list></call><operator pos:start="21:54" pos:end="21:54">)</operator></expr>)</condition> <block pos:start="21:57" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:31">

        <expr_stmt pos:start="23:9" pos:end="23:36"><expr pos:start="23:9" pos:end="23:35"><name pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:10">rt</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:20">flv_data</name></name> <operator pos:start="23:22" pos:end="23:22">=</operator> <name pos:start="23:24" pos:end="23:35">old_flv_data</name></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:31">return <expr pos:start="25:16" pos:end="25:30"><call pos:start="25:16" pos:end="25:30"><name pos:start="25:16" pos:end="25:22">AVERROR</name><argument_list pos:start="25:23" pos:end="25:30">(<argument pos:start="25:24" pos:end="25:29"><expr pos:start="25:24" pos:end="25:29"><name pos:start="25:24" pos:end="25:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="31:5" pos:end="31:22">// Copy FLV header</comment>

    <expr_stmt pos:start="33:5" pos:end="33:43"><expr pos:start="33:5" pos:end="33:42"><call pos:start="33:5" pos:end="33:42"><name pos:start="33:5" pos:end="33:10">memcpy</name><argument_list pos:start="33:11" pos:end="33:42">(<argument pos:start="33:12" pos:end="33:23"><expr pos:start="33:12" pos:end="33:23"><name pos:start="33:12" pos:end="33:23"><name pos:start="33:12" pos:end="33:13">rt</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:23">flv_data</name></name></expr></argument>, <argument pos:start="33:26" pos:end="33:37"><expr pos:start="33:26" pos:end="33:37"><name pos:start="33:26" pos:end="33:37">old_flv_data</name></expr></argument>, <argument pos:start="33:40" pos:end="33:41"><expr pos:start="33:40" pos:end="33:41"><literal type="number" pos:start="33:40" pos:end="33:41">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="35:5" pos:end="35:29">// Copy remaining packets</comment>

    <expr_stmt pos:start="37:5" pos:end="37:73"><expr pos:start="37:5" pos:end="37:72"><call pos:start="37:5" pos:end="37:72"><name pos:start="37:5" pos:end="37:10">memcpy</name><argument_list pos:start="37:11" pos:end="37:72">(<argument pos:start="37:12" pos:end="37:33"><expr pos:start="37:12" pos:end="37:33"><name pos:start="37:12" pos:end="37:23"><name pos:start="37:12" pos:end="37:13">rt</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:23">flv_data</name></name> <operator pos:start="37:25" pos:end="37:25">+</operator> <literal type="number" pos:start="37:27" pos:end="37:30">13</literal> <operator pos:start="37:30" pos:end="37:30">+</operator> <literal type="number" pos:start="37:32" pos:end="37:33">55</literal></expr></argument>, <argument pos:start="37:36" pos:end="37:52"><expr pos:start="37:36" pos:end="37:52"><name pos:start="37:36" pos:end="37:47">old_flv_data</name> <operator pos:start="37:49" pos:end="37:49">+</operator> <literal type="number" pos:start="37:51" pos:end="37:52">13</literal></expr></argument>, <argument pos:start="37:55" pos:end="37:71"><expr pos:start="37:55" pos:end="37:71"><name pos:start="37:55" pos:end="37:66"><name pos:start="37:55" pos:end="37:56">rt</name><operator pos:start="37:57" pos:end="37:58">-&gt;</operator><name pos:start="37:59" pos:end="37:66">flv_size</name></name> <operator pos:start="37:68" pos:end="37:68">-</operator> <literal type="number" pos:start="37:70" pos:end="37:71">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="39:5" pos:end="39:47">// Increase the size by the injected packet</comment>

    <expr_stmt pos:start="41:5" pos:end="41:23"><expr pos:start="41:5" pos:end="41:22"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:6">rt</name><operator pos:start="41:7" pos:end="41:8">-&gt;</operator><name pos:start="41:9" pos:end="41:16">flv_size</name></name> <operator pos:start="41:18" pos:end="41:19">+=</operator> <literal type="number" pos:start="41:21" pos:end="41:22">55</literal></expr>;</expr_stmt>

    <comment type="line" pos:start="43:5" pos:end="43:30">// Delete the old FLV data</comment>

    <expr_stmt pos:start="45:5" pos:end="45:26"><expr pos:start="45:5" pos:end="45:25"><call pos:start="45:5" pos:end="45:25"><name pos:start="45:5" pos:end="45:11">av_free</name><argument_list pos:start="45:12" pos:end="45:25">(<argument pos:start="45:13" pos:end="45:24"><expr pos:start="45:13" pos:end="45:24"><name pos:start="45:13" pos:end="45:24">old_flv_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:26"><expr pos:start="49:5" pos:end="49:25"><name pos:start="49:5" pos:end="49:5">p</name> <operator pos:start="49:7" pos:end="49:7">=</operator> <name pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:10">rt</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:20">flv_data</name></name> <operator pos:start="49:22" pos:end="49:22">+</operator> <literal type="number" pos:start="49:24" pos:end="49:25">13</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:47"><expr pos:start="51:5" pos:end="51:46"><call pos:start="51:5" pos:end="51:46"><name pos:start="51:5" pos:end="51:23">bytestream_put_byte</name><argument_list pos:start="51:24" pos:end="51:46">(<argument pos:start="51:25" pos:end="51:26"><expr pos:start="51:25" pos:end="51:26"><operator pos:start="51:25" pos:end="51:25">&amp;</operator><name pos:start="51:26" pos:end="51:26">p</name></expr></argument>, <argument pos:start="51:29" pos:end="51:45"><expr pos:start="51:29" pos:end="51:45"><name pos:start="51:29" pos:end="51:45">FLV_TAG_TYPE_META</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:32"><expr pos:start="53:5" pos:end="53:31"><call pos:start="53:5" pos:end="53:31"><name pos:start="53:5" pos:end="53:23">bytestream_put_be24</name><argument_list pos:start="53:24" pos:end="53:31">(<argument pos:start="53:25" pos:end="53:26"><expr pos:start="53:25" pos:end="53:26"><operator pos:start="53:25" pos:end="53:25">&amp;</operator><name pos:start="53:26" pos:end="53:26">p</name></expr></argument>, <argument pos:start="53:29" pos:end="53:30"><expr pos:start="53:29" pos:end="53:30"><literal type="number" pos:start="53:29" pos:end="53:30">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="53:34" pos:end="53:78">// size of data part (sum of all parts below)</comment>

    <expr_stmt pos:start="55:5" pos:end="55:31"><expr pos:start="55:5" pos:end="55:30"><call pos:start="55:5" pos:end="55:30"><name pos:start="55:5" pos:end="55:23">bytestream_put_be24</name><argument_list pos:start="55:24" pos:end="55:30">(<argument pos:start="55:25" pos:end="55:26"><expr pos:start="55:25" pos:end="55:26"><operator pos:start="55:25" pos:end="55:25">&amp;</operator><name pos:start="55:26" pos:end="55:26">p</name></expr></argument>, <argument pos:start="55:29" pos:end="55:29"><expr pos:start="55:29" pos:end="55:29"><literal type="number" pos:start="55:29" pos:end="55:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="55:34" pos:end="55:45">// timestamp</comment>

    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><call pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:23">bytestream_put_be32</name><argument_list pos:start="57:24" pos:end="57:30">(<argument pos:start="57:25" pos:end="57:26"><expr pos:start="57:25" pos:end="57:26"><operator pos:start="57:25" pos:end="57:25">&amp;</operator><name pos:start="57:26" pos:end="57:26">p</name></expr></argument>, <argument pos:start="57:29" pos:end="57:29"><expr pos:start="57:29" pos:end="57:29"><literal type="number" pos:start="57:29" pos:end="57:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="57:34" pos:end="57:44">// reserved</comment>



    <comment type="line" pos:start="61:5" pos:end="61:35">// first event name as a string</comment>

    <expr_stmt pos:start="63:5" pos:end="63:50"><expr pos:start="63:5" pos:end="63:49"><call pos:start="63:5" pos:end="63:49"><name pos:start="63:5" pos:end="63:23">bytestream_put_byte</name><argument_list pos:start="63:24" pos:end="63:49">(<argument pos:start="63:25" pos:end="63:26"><expr pos:start="63:25" pos:end="63:26"><operator pos:start="63:25" pos:end="63:25">&amp;</operator><name pos:start="63:26" pos:end="63:26">p</name></expr></argument>, <argument pos:start="63:29" pos:end="63:48"><expr pos:start="63:29" pos:end="63:48"><name pos:start="63:29" pos:end="63:48">AMF_DATA_TYPE_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="65:5" pos:end="65:33">// "onMetaData" as AMF string</comment>

    <expr_stmt pos:start="67:5" pos:end="67:32"><expr pos:start="67:5" pos:end="67:31"><call pos:start="67:5" pos:end="67:31"><name pos:start="67:5" pos:end="67:23">bytestream_put_be16</name><argument_list pos:start="67:24" pos:end="67:31">(<argument pos:start="67:25" pos:end="67:26"><expr pos:start="67:25" pos:end="67:26"><operator pos:start="67:25" pos:end="67:25">&amp;</operator><name pos:start="67:26" pos:end="67:26">p</name></expr></argument>, <argument pos:start="67:29" pos:end="67:30"><expr pos:start="67:29" pos:end="67:30"><literal type="number" pos:start="67:29" pos:end="67:30">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:48"><expr pos:start="69:5" pos:end="69:47"><call pos:start="69:5" pos:end="69:47"><name pos:start="69:5" pos:end="69:25">bytestream_put_buffer</name><argument_list pos:start="69:26" pos:end="69:47">(<argument pos:start="69:27" pos:end="69:28"><expr pos:start="69:27" pos:end="69:28"><operator pos:start="69:27" pos:end="69:27">&amp;</operator><name pos:start="69:28" pos:end="69:28">p</name></expr></argument>, <argument pos:start="69:31" pos:end="69:42"><expr pos:start="69:31" pos:end="69:42"><literal type="string" pos:start="69:31" pos:end="69:42">"onMetaData"</literal></expr></argument>, <argument pos:start="69:45" pos:end="69:46"><expr pos:start="69:45" pos:end="69:46"><literal type="number" pos:start="69:45" pos:end="69:46">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="73:5" pos:end="73:63">// mixed array (hash) with size and string/type/data tuples</comment>

    <expr_stmt pos:start="75:5" pos:end="75:54"><expr pos:start="75:5" pos:end="75:53"><call pos:start="75:5" pos:end="75:53"><name pos:start="75:5" pos:end="75:23">bytestream_put_byte</name><argument_list pos:start="75:24" pos:end="75:53">(<argument pos:start="75:25" pos:end="75:26"><expr pos:start="75:25" pos:end="75:26"><operator pos:start="75:25" pos:end="75:25">&amp;</operator><name pos:start="75:26" pos:end="75:26">p</name></expr></argument>, <argument pos:start="75:29" pos:end="75:52"><expr pos:start="75:29" pos:end="75:52"><name pos:start="75:29" pos:end="75:52">AMF_DATA_TYPE_MIXEDARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:31"><expr pos:start="77:5" pos:end="77:30"><call pos:start="77:5" pos:end="77:30"><name pos:start="77:5" pos:end="77:23">bytestream_put_be32</name><argument_list pos:start="77:24" pos:end="77:30">(<argument pos:start="77:25" pos:end="77:26"><expr pos:start="77:25" pos:end="77:26"><operator pos:start="77:25" pos:end="77:25">&amp;</operator><name pos:start="77:26" pos:end="77:26">p</name></expr></argument>, <argument pos:start="77:29" pos:end="77:29"><expr pos:start="77:29" pos:end="77:29"><literal type="number" pos:start="77:29" pos:end="77:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="77:33" pos:end="77:49">// metadata_count</comment>



    <comment type="line" pos:start="81:5" pos:end="81:31">// "duration" as AMF string</comment>

    <expr_stmt pos:start="83:5" pos:end="83:31"><expr pos:start="83:5" pos:end="83:30"><call pos:start="83:5" pos:end="83:30"><name pos:start="83:5" pos:end="83:23">bytestream_put_be16</name><argument_list pos:start="83:24" pos:end="83:30">(<argument pos:start="83:25" pos:end="83:26"><expr pos:start="83:25" pos:end="83:26"><operator pos:start="83:25" pos:end="83:25">&amp;</operator><name pos:start="83:26" pos:end="83:26">p</name></expr></argument>, <argument pos:start="83:29" pos:end="83:29"><expr pos:start="83:29" pos:end="83:29"><literal type="number" pos:start="83:29" pos:end="83:29">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:45"><expr pos:start="85:5" pos:end="85:44"><call pos:start="85:5" pos:end="85:44"><name pos:start="85:5" pos:end="85:25">bytestream_put_buffer</name><argument_list pos:start="85:26" pos:end="85:44">(<argument pos:start="85:27" pos:end="85:28"><expr pos:start="85:27" pos:end="85:28"><operator pos:start="85:27" pos:end="85:27">&amp;</operator><name pos:start="85:28" pos:end="85:28">p</name></expr></argument>, <argument pos:start="85:31" pos:end="85:40"><expr pos:start="85:31" pos:end="85:40"><literal type="string" pos:start="85:31" pos:end="85:40">"duration"</literal></expr></argument>, <argument pos:start="85:43" pos:end="85:43"><expr pos:start="85:43" pos:end="85:43"><literal type="number" pos:start="85:43" pos:end="85:43">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:50"><expr pos:start="87:5" pos:end="87:49"><call pos:start="87:5" pos:end="87:49"><name pos:start="87:5" pos:end="87:23">bytestream_put_byte</name><argument_list pos:start="87:24" pos:end="87:49">(<argument pos:start="87:25" pos:end="87:26"><expr pos:start="87:25" pos:end="87:26"><operator pos:start="87:25" pos:end="87:25">&amp;</operator><name pos:start="87:26" pos:end="87:26">p</name></expr></argument>, <argument pos:start="87:29" pos:end="87:48"><expr pos:start="87:29" pos:end="87:48"><name pos:start="87:29" pos:end="87:48">AMF_DATA_TYPE_NUMBER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:57"><expr pos:start="89:5" pos:end="89:56"><call pos:start="89:5" pos:end="89:56"><name pos:start="89:5" pos:end="89:23">bytestream_put_be64</name><argument_list pos:start="89:24" pos:end="89:56">(<argument pos:start="89:25" pos:end="89:26"><expr pos:start="89:25" pos:end="89:26"><operator pos:start="89:25" pos:end="89:25">&amp;</operator><name pos:start="89:26" pos:end="89:26">p</name></expr></argument>, <argument pos:start="89:29" pos:end="89:55"><expr pos:start="89:29" pos:end="89:55"><call pos:start="89:29" pos:end="89:55"><name pos:start="89:29" pos:end="89:41">av_double2int</name><argument_list pos:start="89:42" pos:end="89:55">(<argument pos:start="89:43" pos:end="89:54"><expr pos:start="89:43" pos:end="89:54"><name pos:start="89:43" pos:end="89:54"><name pos:start="89:43" pos:end="89:44">rt</name><operator pos:start="89:45" pos:end="89:46">-&gt;</operator><name pos:start="89:47" pos:end="89:54">duration</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="93:5" pos:end="93:22">// Finalise object</comment>

    <expr_stmt pos:start="95:5" pos:end="95:31"><expr pos:start="95:5" pos:end="95:30"><call pos:start="95:5" pos:end="95:30"><name pos:start="95:5" pos:end="95:23">bytestream_put_be16</name><argument_list pos:start="95:24" pos:end="95:30">(<argument pos:start="95:25" pos:end="95:26"><expr pos:start="95:25" pos:end="95:26"><operator pos:start="95:25" pos:end="95:25">&amp;</operator><name pos:start="95:26" pos:end="95:26">p</name></expr></argument>, <argument pos:start="95:29" pos:end="95:29"><expr pos:start="95:29" pos:end="95:29"><literal type="number" pos:start="95:29" pos:end="95:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="95:33" pos:end="95:47">// Empty string</comment>

    <expr_stmt pos:start="97:5" pos:end="97:47"><expr pos:start="97:5" pos:end="97:46"><call pos:start="97:5" pos:end="97:46"><name pos:start="97:5" pos:end="97:23">bytestream_put_byte</name><argument_list pos:start="97:24" pos:end="97:46">(<argument pos:start="97:25" pos:end="97:26"><expr pos:start="97:25" pos:end="97:26"><operator pos:start="97:25" pos:end="97:25">&amp;</operator><name pos:start="97:26" pos:end="97:26">p</name></expr></argument>, <argument pos:start="97:29" pos:end="97:45"><expr pos:start="97:29" pos:end="97:45"><name pos:start="97:29" pos:end="97:45">AMF_END_OF_OBJECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:32"><expr pos:start="99:5" pos:end="99:31"><call pos:start="99:5" pos:end="99:31"><name pos:start="99:5" pos:end="99:23">bytestream_put_be32</name><argument_list pos:start="99:24" pos:end="99:31">(<argument pos:start="99:25" pos:end="99:26"><expr pos:start="99:25" pos:end="99:26"><operator pos:start="99:25" pos:end="99:25">&amp;</operator><name pos:start="99:26" pos:end="99:26">p</name></expr></argument>, <argument pos:start="99:29" pos:end="99:30"><expr pos:start="99:29" pos:end="99:30"><literal type="number" pos:start="99:29" pos:end="99:30">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="99:34" pos:end="99:78">// size of data part (sum of all parts below)</comment>



    <return pos:start="103:5" pos:end="103:13">return <expr pos:start="103:12" pos:end="103:12"><literal type="number" pos:start="103:12" pos:end="103:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
