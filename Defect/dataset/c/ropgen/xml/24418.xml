<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24418.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">bochs_open</name><parameter_list pos:start="1:22" pos:end="3:35">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:49">QDict</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">options</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:69">flags</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:34"><decl pos:start="3:23" pos:end="3:34"><type pos:start="3:23" pos:end="3:34"><name pos:start="3:23" pos:end="3:27">Error</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier><modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="115:1">{<block_content pos:start="7:5" pos:end="113:15">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">BDRVBochsState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:34">= <expr pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:34"><name pos:start="7:25" pos:end="7:26">bs</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:23"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:23">bochs_header</name></name></type> <name pos:start="11:25" pos:end="11:29">bochs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:26"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:26">bochs_header_v1</name></name></type> <name pos:start="13:28" pos:end="13:36">header_v1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:6">bs</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:17">read_only</name></name> <operator pos:start="19:19" pos:end="19:19">=</operator> <literal type="number" pos:start="19:21" pos:end="19:21">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="19:24" pos:end="19:46">// no write support yet</comment>



    <expr_stmt pos:start="23:5" pos:end="23:57"><expr pos:start="23:5" pos:end="23:56"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:56"><name pos:start="23:11" pos:end="23:20">bdrv_pread</name><argument_list pos:start="23:21" pos:end="23:56">(<argument pos:start="23:22" pos:end="23:29"><expr pos:start="23:22" pos:end="23:29"><name pos:start="23:22" pos:end="23:29"><name pos:start="23:22" pos:end="23:23">bs</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:29">file</name></name></expr></argument>, <argument pos:start="23:32" pos:end="23:32"><expr pos:start="23:32" pos:end="23:32"><literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr></argument>, <argument pos:start="23:35" pos:end="23:40"><expr pos:start="23:35" pos:end="23:40"><operator pos:start="23:35" pos:end="23:35">&amp;</operator><name pos:start="23:36" pos:end="23:40">bochs</name></expr></argument>, <argument pos:start="23:43" pos:end="23:55"><expr pos:start="23:43" pos:end="23:55"><sizeof pos:start="23:43" pos:end="23:55">sizeof<argument_list pos:start="23:49" pos:end="23:55">(<argument pos:start="23:50" pos:end="23:54"><expr pos:start="23:50" pos:end="23:54"><name pos:start="23:50" pos:end="23:54">bochs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition> <block pos:start="25:18" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:19">

        <return pos:start="27:9" pos:end="27:19">return <expr pos:start="27:16" pos:end="27:18"><name pos:start="27:16" pos:end="27:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="47:5"><if pos:start="33:5" pos:end="47:5">if <condition pos:start="33:8" pos:end="41:51">(<expr pos:start="33:9" pos:end="41:50"><call pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:14">strcmp</name><argument_list pos:start="33:15" pos:end="33:41">(<argument pos:start="33:16" pos:end="33:26"><expr pos:start="33:16" pos:end="33:26"><name pos:start="33:16" pos:end="33:26"><name pos:start="33:16" pos:end="33:20">bochs</name><operator pos:start="33:21" pos:end="33:21">.</operator><name pos:start="33:22" pos:end="33:26">magic</name></name></expr></argument>, <argument pos:start="33:29" pos:end="33:40"><expr pos:start="33:29" pos:end="33:40"><name pos:start="33:29" pos:end="33:40">HEADER_MAGIC</name></expr></argument>)</argument_list></call> <operator pos:start="33:43" pos:end="33:44">||</operator>

        <call pos:start="35:9" pos:end="35:40"><name pos:start="35:9" pos:end="35:14">strcmp</name><argument_list pos:start="35:15" pos:end="35:40">(<argument pos:start="35:16" pos:end="35:25"><expr pos:start="35:16" pos:end="35:25"><name pos:start="35:16" pos:end="35:25"><name pos:start="35:16" pos:end="35:20">bochs</name><operator pos:start="35:21" pos:end="35:21">.</operator><name pos:start="35:22" pos:end="35:25">type</name></name></expr></argument>, <argument pos:start="35:28" pos:end="35:39"><expr pos:start="35:28" pos:end="35:39"><name pos:start="35:28" pos:end="35:39">REDOLOG_TYPE</name></expr></argument>)</argument_list></call> <operator pos:start="35:42" pos:end="35:43">||</operator>

        <call pos:start="37:9" pos:end="37:43"><name pos:start="37:9" pos:end="37:14">strcmp</name><argument_list pos:start="37:15" pos:end="37:43">(<argument pos:start="37:16" pos:end="37:28"><expr pos:start="37:16" pos:end="37:28"><name pos:start="37:16" pos:end="37:28"><name pos:start="37:16" pos:end="37:20">bochs</name><operator pos:start="37:21" pos:end="37:21">.</operator><name pos:start="37:22" pos:end="37:28">subtype</name></name></expr></argument>, <argument pos:start="37:31" pos:end="37:42"><expr pos:start="37:31" pos:end="37:42"><name pos:start="37:31" pos:end="37:42">GROWING_TYPE</name></expr></argument>)</argument_list></call> <operator pos:start="37:45" pos:end="37:46">||</operator>

	<operator pos:start="39:9" pos:end="39:9">(</operator><operator pos:start="39:10" pos:end="39:10">(</operator><call pos:start="39:11" pos:end="39:36"><name pos:start="39:11" pos:end="39:21">le32_to_cpu</name><argument_list pos:start="39:22" pos:end="39:36">(<argument pos:start="39:23" pos:end="39:35"><expr pos:start="39:23" pos:end="39:35"><name pos:start="39:23" pos:end="39:35"><name pos:start="39:23" pos:end="39:27">bochs</name><operator pos:start="39:28" pos:end="39:28">.</operator><name pos:start="39:29" pos:end="39:35">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="39:38" pos:end="39:39">!=</operator> <name pos:start="39:41" pos:end="39:54">HEADER_VERSION</name><operator pos:start="39:55" pos:end="39:55">)</operator> <operator pos:start="39:57" pos:end="39:58">&amp;&amp;</operator>

	<operator pos:start="41:9" pos:end="41:9">(</operator><call pos:start="41:10" pos:end="41:35"><name pos:start="41:10" pos:end="41:20">le32_to_cpu</name><argument_list pos:start="41:21" pos:end="41:35">(<argument pos:start="41:22" pos:end="41:34"><expr pos:start="41:22" pos:end="41:34"><name pos:start="41:22" pos:end="41:34"><name pos:start="41:22" pos:end="41:26">bochs</name><operator pos:start="41:27" pos:end="41:27">.</operator><name pos:start="41:28" pos:end="41:34">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="41:37" pos:end="41:38">!=</operator> <name pos:start="41:40" pos:end="41:48">HEADER_V1</name><operator pos:start="41:49" pos:end="41:49">)</operator><operator pos:start="41:50" pos:end="41:50">)</operator></expr>)</condition> <block pos:start="41:53" pos:end="47:5">{<block_content pos:start="43:9" pos:end="45:23">

        <expr_stmt pos:start="43:9" pos:end="43:54"><expr pos:start="43:9" pos:end="43:53"><call pos:start="43:9" pos:end="43:53"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="43:53">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>, <argument pos:start="43:26" pos:end="43:52"><expr pos:start="43:26" pos:end="43:52"><literal type="string" pos:start="43:26" pos:end="43:52">"Image not in Bochs format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:23">return <expr pos:start="45:16" pos:end="45:22"><operator pos:start="45:16" pos:end="45:16">-</operator><name pos:start="45:17" pos:end="45:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="61:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:48">(<expr pos:start="51:9" pos:end="51:47"><call pos:start="51:9" pos:end="51:34"><name pos:start="51:9" pos:end="51:19">le32_to_cpu</name><argument_list pos:start="51:20" pos:end="51:34">(<argument pos:start="51:21" pos:end="51:33"><expr pos:start="51:21" pos:end="51:33"><name pos:start="51:21" pos:end="51:33"><name pos:start="51:21" pos:end="51:25">bochs</name><operator pos:start="51:26" pos:end="51:26">.</operator><name pos:start="51:27" pos:end="51:33">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="51:36" pos:end="51:37">==</operator> <name pos:start="51:39" pos:end="51:47">HEADER_V1</name></expr>)</condition> <block pos:start="51:50" pos:end="57:5">{<block_content pos:start="53:7" pos:end="55:74">

      <expr_stmt pos:start="53:7" pos:end="53:48"><expr pos:start="53:7" pos:end="53:47"><call pos:start="53:7" pos:end="53:47"><name pos:start="53:7" pos:end="53:12">memcpy</name><argument_list pos:start="53:13" pos:end="53:47">(<argument pos:start="53:14" pos:end="53:23"><expr pos:start="53:14" pos:end="53:23"><operator pos:start="53:14" pos:end="53:14">&amp;</operator><name pos:start="53:15" pos:end="53:23">header_v1</name></expr></argument>, <argument pos:start="53:26" pos:end="53:31"><expr pos:start="53:26" pos:end="53:31"><operator pos:start="53:26" pos:end="53:26">&amp;</operator><name pos:start="53:27" pos:end="53:31">bochs</name></expr></argument>, <argument pos:start="53:34" pos:end="53:46"><expr pos:start="53:34" pos:end="53:46"><sizeof pos:start="53:34" pos:end="53:46">sizeof<argument_list pos:start="53:40" pos:end="53:46">(<argument pos:start="53:41" pos:end="53:45"><expr pos:start="53:41" pos:end="53:45"><name pos:start="53:41" pos:end="53:45">bochs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt pos:start="55:7" pos:end="55:74"><expr pos:start="55:7" pos:end="55:73"><name pos:start="55:7" pos:end="55:23"><name pos:start="55:7" pos:end="55:8">bs</name><operator pos:start="55:9" pos:end="55:10">-&gt;</operator><name pos:start="55:11" pos:end="55:23">total_sectors</name></name> <operator pos:start="55:25" pos:end="55:25">=</operator> <call pos:start="55:27" pos:end="55:67"><name pos:start="55:27" pos:end="55:37">le64_to_cpu</name><argument_list pos:start="55:38" pos:end="55:67">(<argument pos:start="55:39" pos:end="55:66"><expr pos:start="55:39" pos:end="55:66"><name pos:start="55:39" pos:end="55:66"><name pos:start="55:39" pos:end="55:47">header_v1</name><operator pos:start="55:48" pos:end="55:48">.</operator><name pos:start="55:49" pos:end="55:53">extra</name><operator pos:start="55:54" pos:end="55:54">.</operator><name pos:start="55:55" pos:end="55:61">redolog</name><operator pos:start="55:62" pos:end="55:62">.</operator><name pos:start="55:63" pos:end="55:66">disk</name></name></expr></argument>)</argument_list></call> <operator pos:start="55:69" pos:end="55:69">/</operator> <literal type="number" pos:start="55:71" pos:end="55:73">512</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="61:5">else <block pos:start="57:12" pos:end="61:5">{<block_content pos:start="59:7" pos:end="59:70">

      <expr_stmt pos:start="59:7" pos:end="59:70"><expr pos:start="59:7" pos:end="59:69"><name pos:start="59:7" pos:end="59:23"><name pos:start="59:7" pos:end="59:8">bs</name><operator pos:start="59:9" pos:end="59:10">-&gt;</operator><name pos:start="59:11" pos:end="59:23">total_sectors</name></name> <operator pos:start="59:25" pos:end="59:25">=</operator> <call pos:start="59:27" pos:end="59:63"><name pos:start="59:27" pos:end="59:37">le64_to_cpu</name><argument_list pos:start="59:38" pos:end="59:63">(<argument pos:start="59:39" pos:end="59:62"><expr pos:start="59:39" pos:end="59:62"><name pos:start="59:39" pos:end="59:62"><name pos:start="59:39" pos:end="59:43">bochs</name><operator pos:start="59:44" pos:end="59:44">.</operator><name pos:start="59:45" pos:end="59:49">extra</name><operator pos:start="59:50" pos:end="59:50">.</operator><name pos:start="59:51" pos:end="59:57">redolog</name><operator pos:start="59:58" pos:end="59:58">.</operator><name pos:start="59:59" pos:end="59:62">disk</name></name></expr></argument>)</argument_list></call> <operator pos:start="59:65" pos:end="59:65">/</operator> <literal type="number" pos:start="59:67" pos:end="59:69">512</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:63"><expr pos:start="65:5" pos:end="65:62"><name pos:start="65:5" pos:end="65:19"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:19">catalog_size</name></name> <operator pos:start="65:21" pos:end="65:21">=</operator> <call pos:start="65:23" pos:end="65:62"><name pos:start="65:23" pos:end="65:33">le32_to_cpu</name><argument_list pos:start="65:34" pos:end="65:62">(<argument pos:start="65:35" pos:end="65:61"><expr pos:start="65:35" pos:end="65:61"><name pos:start="65:35" pos:end="65:61"><name pos:start="65:35" pos:end="65:39">bochs</name><operator pos:start="65:40" pos:end="65:40">.</operator><name pos:start="65:41" pos:end="65:45">extra</name><operator pos:start="65:46" pos:end="65:46">.</operator><name pos:start="65:47" pos:end="65:53">redolog</name><operator pos:start="65:54" pos:end="65:54">.</operator><name pos:start="65:55" pos:end="65:61">catalog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:54"><expr pos:start="67:5" pos:end="67:53"><name pos:start="67:5" pos:end="67:21"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:21">catalog_bitmap</name></name> <operator pos:start="67:23" pos:end="67:23">=</operator> <call pos:start="67:25" pos:end="67:53"><name pos:start="67:25" pos:end="67:32">g_malloc</name><argument_list pos:start="67:33" pos:end="67:53">(<argument pos:start="67:34" pos:end="67:52"><expr pos:start="67:34" pos:end="67:52"><name pos:start="67:34" pos:end="67:48"><name pos:start="67:34" pos:end="67:34">s</name><operator pos:start="67:35" pos:end="67:36">-&gt;</operator><name pos:start="67:37" pos:end="67:48">catalog_size</name></name> <operator pos:start="67:50" pos:end="67:50">*</operator> <literal type="number" pos:start="67:52" pos:end="67:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="73:42"><expr pos:start="71:5" pos:end="73:41"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="73:41"><name pos:start="71:11" pos:end="71:20">bdrv_pread</name><argument_list pos:start="71:21" pos:end="73:41">(<argument pos:start="71:22" pos:end="71:29"><expr pos:start="71:22" pos:end="71:29"><name pos:start="71:22" pos:end="71:29"><name pos:start="71:22" pos:end="71:23">bs</name><operator pos:start="71:24" pos:end="71:25">-&gt;</operator><name pos:start="71:26" pos:end="71:29">file</name></name></expr></argument>, <argument pos:start="71:32" pos:end="71:56"><expr pos:start="71:32" pos:end="71:56"><call pos:start="71:32" pos:end="71:56"><name pos:start="71:32" pos:end="71:42">le32_to_cpu</name><argument_list pos:start="71:43" pos:end="71:56">(<argument pos:start="71:44" pos:end="71:55"><expr pos:start="71:44" pos:end="71:55"><name pos:start="71:44" pos:end="71:55"><name pos:start="71:44" pos:end="71:48">bochs</name><operator pos:start="71:49" pos:end="71:49">.</operator><name pos:start="71:50" pos:end="71:55">header</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:59" pos:end="71:75"><expr pos:start="71:59" pos:end="71:75"><name pos:start="71:59" pos:end="71:75"><name pos:start="71:59" pos:end="71:59">s</name><operator pos:start="71:60" pos:end="71:61">-&gt;</operator><name pos:start="71:62" pos:end="71:75">catalog_bitmap</name></name></expr></argument>,

                     <argument pos:start="73:22" pos:end="73:40"><expr pos:start="73:22" pos:end="73:40"><name pos:start="73:22" pos:end="73:36"><name pos:start="73:22" pos:end="73:22">s</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:36">catalog_size</name></name> <operator pos:start="73:38" pos:end="73:38">*</operator> <literal type="number" pos:start="73:40" pos:end="73:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:16">(<expr pos:start="75:9" pos:end="75:15"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">&lt;</operator> <literal type="number" pos:start="75:15" pos:end="75:15">0</literal></expr>)</condition> <block pos:start="75:18" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:18">

        <goto pos:start="77:9" pos:end="77:18">goto <name pos:start="77:14" pos:end="77:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="83:5" pos:end="85:44">for <control pos:start="83:9" pos:end="83:41">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">i</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:36"><expr pos:start="83:17" pos:end="83:35"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <name pos:start="83:21" pos:end="83:35"><name pos:start="83:21" pos:end="83:21">s</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:35">catalog_size</name></name></expr>;</condition> <incr pos:start="83:38" pos:end="83:40"><expr pos:start="83:38" pos:end="83:40"><name pos:start="83:38" pos:end="83:38">i</name><operator pos:start="83:39" pos:end="83:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="85:9" pos:end="85:44"><block_content pos:start="85:9" pos:end="85:44">

	<expr_stmt pos:start="85:9" pos:end="85:44"><expr pos:start="85:9" pos:end="85:43"><call pos:start="85:9" pos:end="85:43"><name pos:start="85:9" pos:end="85:20">le32_to_cpus</name><argument_list pos:start="85:21" pos:end="85:43">(<argument pos:start="85:22" pos:end="85:42"><expr pos:start="85:22" pos:end="85:42"><operator pos:start="85:22" pos:end="85:22">&amp;</operator><name pos:start="85:23" pos:end="85:42"><name pos:start="85:23" pos:end="85:23">s</name><operator pos:start="85:24" pos:end="85:25">-&gt;</operator><name pos:start="85:26" pos:end="85:39">catalog_bitmap</name><index pos:start="85:40" pos:end="85:42">[<expr pos:start="85:41" pos:end="85:41"><name pos:start="85:41" pos:end="85:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="89:5" pos:end="89:71"><expr pos:start="89:5" pos:end="89:70"><name pos:start="89:5" pos:end="89:18"><name pos:start="89:5" pos:end="89:5">s</name><operator pos:start="89:6" pos:end="89:7">-&gt;</operator><name pos:start="89:8" pos:end="89:18">data_offset</name></name> <operator pos:start="89:20" pos:end="89:20">=</operator> <call pos:start="89:22" pos:end="89:46"><name pos:start="89:22" pos:end="89:32">le32_to_cpu</name><argument_list pos:start="89:33" pos:end="89:46">(<argument pos:start="89:34" pos:end="89:45"><expr pos:start="89:34" pos:end="89:45"><name pos:start="89:34" pos:end="89:45"><name pos:start="89:34" pos:end="89:38">bochs</name><operator pos:start="89:39" pos:end="89:39">.</operator><name pos:start="89:40" pos:end="89:45">header</name></name></expr></argument>)</argument_list></call> <operator pos:start="89:48" pos:end="89:48">+</operator> <operator pos:start="89:50" pos:end="89:50">(</operator><name pos:start="89:51" pos:end="89:65"><name pos:start="89:51" pos:end="89:51">s</name><operator pos:start="89:52" pos:end="89:53">-&gt;</operator><name pos:start="89:54" pos:end="89:65">catalog_size</name></name> <operator pos:start="89:67" pos:end="89:67">*</operator> <literal type="number" pos:start="89:69" pos:end="89:69">4</literal><operator pos:start="89:70" pos:end="89:70">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:79"><expr pos:start="93:5" pos:end="93:78"><name pos:start="93:5" pos:end="93:20"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:20">bitmap_blocks</name></name> <operator pos:start="93:22" pos:end="93:22">=</operator> <literal type="number" pos:start="93:24" pos:end="93:26">1</literal> <operator pos:start="93:26" pos:end="93:26">+</operator> <operator pos:start="93:28" pos:end="93:28">(</operator><call pos:start="93:29" pos:end="93:67"><name pos:start="93:29" pos:end="93:39">le32_to_cpu</name><argument_list pos:start="93:40" pos:end="93:67">(<argument pos:start="93:41" pos:end="93:66"><expr pos:start="93:41" pos:end="93:66"><name pos:start="93:41" pos:end="93:66"><name pos:start="93:41" pos:end="93:45">bochs</name><operator pos:start="93:46" pos:end="93:46">.</operator><name pos:start="93:47" pos:end="93:51">extra</name><operator pos:start="93:52" pos:end="93:52">.</operator><name pos:start="93:53" pos:end="93:59">redolog</name><operator pos:start="93:60" pos:end="93:60">.</operator><name pos:start="93:61" pos:end="93:66">bitmap</name></name></expr></argument>)</argument_list></call> <operator pos:start="93:69" pos:end="93:69">-</operator> <literal type="number" pos:start="93:71" pos:end="93:71">1</literal><operator pos:start="93:72" pos:end="93:72">)</operator> <operator pos:start="93:74" pos:end="93:74">/</operator> <literal type="number" pos:start="93:76" pos:end="93:78">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:79"><expr pos:start="95:5" pos:end="95:78"><name pos:start="95:5" pos:end="95:20"><name pos:start="95:5" pos:end="95:5">s</name><operator pos:start="95:6" pos:end="95:7">-&gt;</operator><name pos:start="95:8" pos:end="95:20">extent_blocks</name></name> <operator pos:start="95:22" pos:end="95:22">=</operator> <literal type="number" pos:start="95:24" pos:end="95:26">1</literal> <operator pos:start="95:26" pos:end="95:26">+</operator> <operator pos:start="95:28" pos:end="95:28">(</operator><call pos:start="95:29" pos:end="95:67"><name pos:start="95:29" pos:end="95:39">le32_to_cpu</name><argument_list pos:start="95:40" pos:end="95:67">(<argument pos:start="95:41" pos:end="95:66"><expr pos:start="95:41" pos:end="95:66"><name pos:start="95:41" pos:end="95:66"><name pos:start="95:41" pos:end="95:45">bochs</name><operator pos:start="95:46" pos:end="95:46">.</operator><name pos:start="95:47" pos:end="95:51">extra</name><operator pos:start="95:52" pos:end="95:52">.</operator><name pos:start="95:53" pos:end="95:59">redolog</name><operator pos:start="95:60" pos:end="95:60">.</operator><name pos:start="95:61" pos:end="95:66">extent</name></name></expr></argument>)</argument_list></call> <operator pos:start="95:69" pos:end="95:69">-</operator> <literal type="number" pos:start="95:71" pos:end="95:71">1</literal><operator pos:start="95:72" pos:end="95:72">)</operator> <operator pos:start="95:74" pos:end="95:74">/</operator> <literal type="number" pos:start="95:76" pos:end="95:78">512</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:61"><expr pos:start="99:5" pos:end="99:60"><name pos:start="99:5" pos:end="99:18"><name pos:start="99:5" pos:end="99:5">s</name><operator pos:start="99:6" pos:end="99:7">-&gt;</operator><name pos:start="99:8" pos:end="99:18">extent_size</name></name> <operator pos:start="99:20" pos:end="99:20">=</operator> <call pos:start="99:22" pos:end="99:60"><name pos:start="99:22" pos:end="99:32">le32_to_cpu</name><argument_list pos:start="99:33" pos:end="99:60">(<argument pos:start="99:34" pos:end="99:59"><expr pos:start="99:34" pos:end="99:59"><name pos:start="99:34" pos:end="99:59"><name pos:start="99:34" pos:end="99:38">bochs</name><operator pos:start="99:39" pos:end="99:39">.</operator><name pos:start="99:40" pos:end="99:44">extra</name><operator pos:start="99:45" pos:end="99:45">.</operator><name pos:start="99:46" pos:end="99:52">redolog</name><operator pos:start="99:53" pos:end="99:53">.</operator><name pos:start="99:54" pos:end="99:59">extent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:33"><expr pos:start="103:5" pos:end="103:32"><call pos:start="103:5" pos:end="103:32"><name pos:start="103:5" pos:end="103:22">qemu_co_mutex_init</name><argument_list pos:start="103:23" pos:end="103:32">(<argument pos:start="103:24" pos:end="103:31"><expr pos:start="103:24" pos:end="103:31"><operator pos:start="103:24" pos:end="103:24">&amp;</operator><name pos:start="103:25" pos:end="103:31"><name pos:start="103:25" pos:end="103:25">s</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="105:5" pos:end="105:13">return <expr pos:start="105:12" pos:end="105:12"><literal type="number" pos:start="105:12" pos:end="105:12">0</literal></expr>;</return>



<label pos:start="109:1" pos:end="109:5"><name pos:start="109:1" pos:end="109:4">fail</name>:</label>

    <expr_stmt pos:start="111:5" pos:end="111:30"><expr pos:start="111:5" pos:end="111:29"><call pos:start="111:5" pos:end="111:29"><name pos:start="111:5" pos:end="111:10">g_free</name><argument_list pos:start="111:11" pos:end="111:29">(<argument pos:start="111:12" pos:end="111:28"><expr pos:start="111:12" pos:end="111:28"><name pos:start="111:12" pos:end="111:28"><name pos:start="111:12" pos:end="111:12">s</name><operator pos:start="111:13" pos:end="111:14">-&gt;</operator><name pos:start="111:15" pos:end="111:28">catalog_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="113:5" pos:end="113:15">return <expr pos:start="113:12" pos:end="113:14"><name pos:start="113:12" pos:end="113:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
