<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12601.c" pos:tabs="8"><function pos:start="1:1" pos:end="325:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:27">vpx_init</name><parameter_list pos:start="1:28" pos:end="3:64">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:63"><decl pos:start="3:29" pos:end="3:63"><type pos:start="3:29" pos:end="3:63"><specifier pos:start="3:29" pos:end="3:33">const</specifier> <name pos:start="3:35" pos:end="3:56"><name pos:start="3:35" pos:end="3:40">struct</name> <name pos:start="3:42" pos:end="3:56">vpx_codec_iface</name></name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:63">iface</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="325:1">{<block_content pos:start="7:5" pos:end="323:13">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">VP8Context</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:19">ctx</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:27">avctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:28">vpx_codec_enc_cfg</name></name></type> <name pos:start="9:30" pos:end="9:35">enccfg</name> <init pos:start="9:37" pos:end="9:43">= <expr pos:start="9:39" pos:end="9:43"><block pos:start="9:39" pos:end="9:43">{ <expr pos:start="9:41" pos:end="9:41"><literal type="number" pos:start="9:41" pos:end="9:41">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">res</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:64"><expr pos:start="15:5" pos:end="15:63"><call pos:start="15:5" pos:end="15:63"><name pos:start="15:5" pos:end="15:10">av_log</name><argument_list pos:start="15:11" pos:end="15:63">(<argument pos:start="15:12" pos:end="15:16"><expr pos:start="15:12" pos:end="15:16"><name pos:start="15:12" pos:end="15:16">avctx</name></expr></argument>, <argument pos:start="15:19" pos:end="15:29"><expr pos:start="15:19" pos:end="15:29"><name pos:start="15:19" pos:end="15:29">AV_LOG_INFO</name></expr></argument>, <argument pos:start="15:32" pos:end="15:37"><expr pos:start="15:32" pos:end="15:37"><literal type="string" pos:start="15:32" pos:end="15:37">"%s\n"</literal></expr></argument>, <argument pos:start="15:40" pos:end="15:62"><expr pos:start="15:40" pos:end="15:62"><call pos:start="15:40" pos:end="15:62"><name pos:start="15:40" pos:end="15:60">vpx_codec_version_str</name><argument_list pos:start="15:61" pos:end="15:62">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:68"><expr pos:start="17:5" pos:end="17:67"><call pos:start="17:5" pos:end="17:67"><name pos:start="17:5" pos:end="17:10">av_log</name><argument_list pos:start="17:11" pos:end="17:67">(<argument pos:start="17:12" pos:end="17:16"><expr pos:start="17:12" pos:end="17:16"><name pos:start="17:12" pos:end="17:16">avctx</name></expr></argument>, <argument pos:start="17:19" pos:end="17:32"><expr pos:start="17:19" pos:end="17:32"><name pos:start="17:19" pos:end="17:32">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="17:35" pos:end="17:40"><expr pos:start="17:35" pos:end="17:40"><literal type="string" pos:start="17:35" pos:end="17:40">"%s\n"</literal></expr></argument>, <argument pos:start="17:43" pos:end="17:66"><expr pos:start="17:43" pos:end="17:66"><call pos:start="17:43" pos:end="17:66"><name pos:start="17:43" pos:end="17:64">vpx_codec_build_config</name><argument_list pos:start="17:65" pos:end="17:66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:80">(<expr pos:start="21:9" pos:end="21:79"><operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:12">res</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:62"><name pos:start="21:16" pos:end="21:43">vpx_codec_enc_config_default</name><argument_list pos:start="21:44" pos:end="21:62">(<argument pos:start="21:45" pos:end="21:49"><expr pos:start="21:45" pos:end="21:49"><name pos:start="21:45" pos:end="21:49">iface</name></expr></argument>, <argument pos:start="21:52" pos:end="21:58"><expr pos:start="21:52" pos:end="21:58"><operator pos:start="21:52" pos:end="21:52">&amp;</operator><name pos:start="21:53" pos:end="21:58">enccfg</name></expr></argument>, <argument pos:start="21:61" pos:end="21:61"><expr pos:start="21:61" pos:end="21:61"><literal type="number" pos:start="21:61" pos:end="21:61">0</literal></expr></argument>)</argument_list></call><operator pos:start="21:63" pos:end="21:63">)</operator> <operator pos:start="21:65" pos:end="21:66">!=</operator> <name pos:start="21:68" pos:end="21:79">VPX_CODEC_OK</name></expr>)</condition> <block pos:start="21:82" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:31">

        <expr_stmt pos:start="23:9" pos:end="25:45"><expr pos:start="23:9" pos:end="25:44"><call pos:start="23:9" pos:end="25:44"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="25:44">(<argument pos:start="23:16" pos:end="23:20"><expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20">avctx</name></expr></argument>, <argument pos:start="23:23" pos:end="23:34"><expr pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:37" pos:end="23:64"><expr pos:start="23:37" pos:end="23:64"><literal type="string" pos:start="23:37" pos:end="23:64">"Failed to get config: %s\n"</literal></expr></argument>,

               <argument pos:start="25:16" pos:end="25:43"><expr pos:start="25:16" pos:end="25:43"><call pos:start="25:16" pos:end="25:43"><name pos:start="25:16" pos:end="25:38">vpx_codec_err_to_string</name><argument_list pos:start="25:39" pos:end="25:43">(<argument pos:start="25:40" pos:end="25:42"><expr pos:start="25:40" pos:end="25:42"><name pos:start="25:40" pos:end="25:42">res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:31">return <expr pos:start="27:16" pos:end="27:30"><call pos:start="27:16" pos:end="27:30"><name pos:start="27:16" pos:end="27:22">AVERROR</name><argument_list pos:start="27:23" pos:end="27:30">(<argument pos:start="27:24" pos:end="27:29"><expr pos:start="27:24" pos:end="27:29"><name pos:start="27:24" pos:end="27:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:33"><expr pos:start="31:5" pos:end="31:32"><call pos:start="31:5" pos:end="31:32"><name pos:start="31:5" pos:end="31:16">dump_enc_cfg</name><argument_list pos:start="31:17" pos:end="31:32">(<argument pos:start="31:18" pos:end="31:22"><expr pos:start="31:18" pos:end="31:22"><name pos:start="31:18" pos:end="31:22">avctx</name></expr></argument>, <argument pos:start="31:25" pos:end="31:31"><expr pos:start="31:25" pos:end="31:31"><operator pos:start="31:25" pos:end="31:25">&amp;</operator><name pos:start="31:26" pos:end="31:31">enccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:41"><expr pos:start="35:5" pos:end="35:40"><name pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:10">enccfg</name><operator pos:start="35:11" pos:end="35:11">.</operator><name pos:start="35:12" pos:end="35:14">g_w</name></name>            <operator pos:start="35:27" pos:end="35:27">=</operator> <name pos:start="35:29" pos:end="35:40"><name pos:start="35:29" pos:end="35:33">avctx</name><operator pos:start="35:34" pos:end="35:35">-&gt;</operator><name pos:start="35:36" pos:end="35:40">width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:10">enccfg</name><operator pos:start="37:11" pos:end="37:11">.</operator><name pos:start="37:12" pos:end="37:14">g_h</name></name>            <operator pos:start="37:27" pos:end="37:27">=</operator> <name pos:start="37:29" pos:end="37:41"><name pos:start="37:29" pos:end="37:33">avctx</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:41">height</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:49"><expr pos:start="39:5" pos:end="39:48"><name pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:10">enccfg</name><operator pos:start="39:11" pos:end="39:11">.</operator><name pos:start="39:12" pos:end="39:21">g_timebase</name><operator pos:start="39:22" pos:end="39:22">.</operator><name pos:start="39:23" pos:end="39:25">num</name></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <name pos:start="39:29" pos:end="39:48"><name pos:start="39:29" pos:end="39:33">avctx</name><operator pos:start="39:34" pos:end="39:35">-&gt;</operator><name pos:start="39:36" pos:end="39:44">time_base</name><operator pos:start="39:45" pos:end="39:45">.</operator><name pos:start="39:46" pos:end="39:48">num</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:49"><expr pos:start="41:5" pos:end="41:48"><name pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:10">enccfg</name><operator pos:start="41:11" pos:end="41:11">.</operator><name pos:start="41:12" pos:end="41:21">g_timebase</name><operator pos:start="41:22" pos:end="41:22">.</operator><name pos:start="41:23" pos:end="41:25">den</name></name> <operator pos:start="41:27" pos:end="41:27">=</operator> <name pos:start="41:29" pos:end="41:48"><name pos:start="41:29" pos:end="41:33">avctx</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:44">time_base</name><operator pos:start="41:45" pos:end="41:45">.</operator><name pos:start="41:46" pos:end="41:48">den</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:48"><expr pos:start="43:5" pos:end="43:47"><name pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:10">enccfg</name><operator pos:start="43:11" pos:end="43:11">.</operator><name pos:start="43:12" pos:end="43:20">g_threads</name></name>      <operator pos:start="43:27" pos:end="43:27">=</operator> <name pos:start="43:29" pos:end="43:47"><name pos:start="43:29" pos:end="43:33">avctx</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:47">thread_count</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="49:52"><if pos:start="47:5" pos:end="49:52">if <condition pos:start="47:8" pos:end="47:32">(<expr pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:11">ctx</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:26">lag_in_frames</name></name> <operator pos:start="47:28" pos:end="47:29">&gt;=</operator> <literal type="number" pos:start="47:31" pos:end="47:31">0</literal></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:52"><block_content pos:start="49:9" pos:end="49:52">

        <expr_stmt pos:start="49:9" pos:end="49:52"><expr pos:start="49:9" pos:end="49:51"><name pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:14">enccfg</name><operator pos:start="49:15" pos:end="49:15">.</operator><name pos:start="49:16" pos:end="49:30">g_lag_in_frames</name></name> <operator pos:start="49:32" pos:end="49:32">=</operator> <name pos:start="49:34" pos:end="49:51"><name pos:start="49:34" pos:end="49:36">ctx</name><operator pos:start="49:37" pos:end="49:38">-&gt;</operator><name pos:start="49:39" pos:end="49:51">lag_in_frames</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="63:40"><if pos:start="53:5" pos:end="55:42">if <condition pos:start="53:8" pos:end="53:40">(<expr pos:start="53:9" pos:end="53:39"><name pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:13">avctx</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:20">flags</name></name> <operator pos:start="53:22" pos:end="53:22">&amp;</operator> <name pos:start="53:24" pos:end="53:39">CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:42"><block_content pos:start="55:9" pos:end="55:42">

        <expr_stmt pos:start="55:9" pos:end="55:42"><expr pos:start="55:9" pos:end="55:41"><name pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:14">enccfg</name><operator pos:start="55:15" pos:end="55:15">.</operator><name pos:start="55:16" pos:end="55:21">g_pass</name></name> <operator pos:start="55:23" pos:end="55:23">=</operator> <name pos:start="55:25" pos:end="55:41">VPX_RC_FIRST_PASS</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="57:5" pos:end="59:41">else if <condition pos:start="57:13" pos:end="57:45">(<expr pos:start="57:14" pos:end="57:44"><name pos:start="57:14" pos:end="57:25"><name pos:start="57:14" pos:end="57:18">avctx</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:25">flags</name></name> <operator pos:start="57:27" pos:end="57:27">&amp;</operator> <name pos:start="57:29" pos:end="57:44">CODEC_FLAG_PASS2</name></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:41"><block_content pos:start="59:9" pos:end="59:41">

        <expr_stmt pos:start="59:9" pos:end="59:41"><expr pos:start="59:9" pos:end="59:40"><name pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:14">enccfg</name><operator pos:start="59:15" pos:end="59:15">.</operator><name pos:start="59:16" pos:end="59:21">g_pass</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <name pos:start="59:25" pos:end="59:40">VPX_RC_LAST_PASS</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="61:5" pos:end="63:40">else<block type="pseudo" pos:start="63:9" pos:end="63:40"><block_content pos:start="63:9" pos:end="63:40">

        <expr_stmt pos:start="63:9" pos:end="63:40"><expr pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:14">enccfg</name><operator pos:start="63:15" pos:end="63:15">.</operator><name pos:start="63:16" pos:end="63:21">g_pass</name></name> <operator pos:start="63:23" pos:end="63:23">=</operator> <name pos:start="63:25" pos:end="63:39">VPX_RC_ONE_PASS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="67:5" pos:end="75:65"><if pos:start="67:5" pos:end="69:58">if <condition pos:start="67:8" pos:end="67:25">(<expr pos:start="67:9" pos:end="67:24"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:24"><name pos:start="67:10" pos:end="67:14">avctx</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:24">bit_rate</name></name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:58"><block_content pos:start="69:9" pos:end="69:58">

        <expr_stmt pos:start="69:9" pos:end="69:58"><expr pos:start="69:9" pos:end="69:57"><name pos:start="69:9" pos:end="69:23"><name pos:start="69:9" pos:end="69:13">avctx</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:23">bit_rate</name></name> <operator pos:start="69:25" pos:end="69:25">=</operator> <name pos:start="69:27" pos:end="69:50"><name pos:start="69:27" pos:end="69:32">enccfg</name><operator pos:start="69:33" pos:end="69:33">.</operator><name pos:start="69:34" pos:end="69:50">rc_target_bitrate</name></name> <operator pos:start="69:52" pos:end="69:52">*</operator> <literal type="number" pos:start="69:54" pos:end="69:57">1000</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="71:5" pos:end="75:65">else<block type="pseudo" pos:start="73:9" pos:end="75:65"><block_content pos:start="73:9" pos:end="75:65">

        <expr_stmt pos:start="73:9" pos:end="75:65"><expr pos:start="73:9" pos:end="75:64"><name pos:start="73:9" pos:end="73:32"><name pos:start="73:9" pos:end="73:14">enccfg</name><operator pos:start="73:15" pos:end="73:15">.</operator><name pos:start="73:16" pos:end="73:32">rc_target_bitrate</name></name> <operator pos:start="73:34" pos:end="73:34">=</operator> <call pos:start="73:36" pos:end="75:64"><name pos:start="73:36" pos:end="73:49">av_rescale_rnd</name><argument_list pos:start="73:50" pos:end="75:64">(<argument pos:start="73:51" pos:end="73:65"><expr pos:start="73:51" pos:end="73:65"><name pos:start="73:51" pos:end="73:65"><name pos:start="73:51" pos:end="73:55">avctx</name><operator pos:start="73:56" pos:end="73:57">-&gt;</operator><name pos:start="73:58" pos:end="73:65">bit_rate</name></name></expr></argument>, <argument pos:start="73:68" pos:end="73:68"><expr pos:start="73:68" pos:end="73:68"><literal type="number" pos:start="73:68" pos:end="73:68">1</literal></expr></argument>, <argument pos:start="73:71" pos:end="73:74"><expr pos:start="73:71" pos:end="73:74"><literal type="number" pos:start="73:71" pos:end="73:74">1000</literal></expr></argument>,

                                              <argument pos:start="75:47" pos:end="75:63"><expr pos:start="75:47" pos:end="75:63"><name pos:start="75:47" pos:end="75:63">AV_ROUND_NEAR_INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="79:5" pos:end="87:38"><if pos:start="79:5" pos:end="81:37">if <condition pos:start="79:8" pos:end="79:17">(<expr pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:16"><name pos:start="79:9" pos:end="79:11">ctx</name><operator pos:start="79:12" pos:end="79:13">-&gt;</operator><name pos:start="79:14" pos:end="79:16">crf</name></name></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:37"><block_content pos:start="81:9" pos:end="81:37">

        <expr_stmt pos:start="81:9" pos:end="81:37"><expr pos:start="81:9" pos:end="81:36"><name pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:14">enccfg</name><operator pos:start="81:15" pos:end="81:15">.</operator><name pos:start="81:16" pos:end="81:27">rc_end_usage</name></name> <operator pos:start="81:29" pos:end="81:29">=</operator> <name pos:start="81:31" pos:end="81:36">VPX_CQ</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="83:5" pos:end="87:38">else if <condition pos:start="83:13" pos:end="85:51">(<expr pos:start="83:14" pos:end="85:50"><name pos:start="83:14" pos:end="83:31"><name pos:start="83:14" pos:end="83:18">avctx</name><operator pos:start="83:19" pos:end="83:20">-&gt;</operator><name pos:start="83:21" pos:end="83:31">rc_min_rate</name></name> <operator pos:start="83:33" pos:end="83:34">==</operator> <name pos:start="83:36" pos:end="83:53"><name pos:start="83:36" pos:end="83:40">avctx</name><operator pos:start="83:41" pos:end="83:42">-&gt;</operator><name pos:start="83:43" pos:end="83:53">rc_max_rate</name></name> <operator pos:start="83:55" pos:end="83:56">&amp;&amp;</operator>

             <name pos:start="85:14" pos:end="85:31"><name pos:start="85:14" pos:end="85:18">avctx</name><operator pos:start="85:19" pos:end="85:20">-&gt;</operator><name pos:start="85:21" pos:end="85:31">rc_min_rate</name></name> <operator pos:start="85:33" pos:end="85:34">==</operator> <name pos:start="85:36" pos:end="85:50"><name pos:start="85:36" pos:end="85:40">avctx</name><operator pos:start="85:41" pos:end="85:42">-&gt;</operator><name pos:start="85:43" pos:end="85:50">bit_rate</name></name></expr>)</condition><block type="pseudo" pos:start="87:9" pos:end="87:38"><block_content pos:start="87:9" pos:end="87:38">

        <expr_stmt pos:start="87:9" pos:end="87:38"><expr pos:start="87:9" pos:end="87:37"><name pos:start="87:9" pos:end="87:27"><name pos:start="87:9" pos:end="87:14">enccfg</name><operator pos:start="87:15" pos:end="87:15">.</operator><name pos:start="87:16" pos:end="87:27">rc_end_usage</name></name> <operator pos:start="87:29" pos:end="87:29">=</operator> <name pos:start="87:31" pos:end="87:37">VPX_CBR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="91:5" pos:end="93:46"><if pos:start="91:5" pos:end="93:46">if <condition pos:start="91:8" pos:end="91:24">(<expr pos:start="91:9" pos:end="91:23"><name pos:start="91:9" pos:end="91:19"><name pos:start="91:9" pos:end="91:13">avctx</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:19">qmin</name></name> <operator pos:start="91:21" pos:end="91:21">&gt;</operator> <literal type="number" pos:start="91:23" pos:end="91:23">0</literal></expr>)</condition><block type="pseudo" pos:start="93:9" pos:end="93:46"><block_content pos:start="93:9" pos:end="93:46">

        <expr_stmt pos:start="93:9" pos:end="93:46"><expr pos:start="93:9" pos:end="93:45"><name pos:start="93:9" pos:end="93:31"><name pos:start="93:9" pos:end="93:14">enccfg</name><operator pos:start="93:15" pos:end="93:15">.</operator><name pos:start="93:16" pos:end="93:31">rc_min_quantizer</name></name> <operator pos:start="93:33" pos:end="93:33">=</operator> <name pos:start="93:35" pos:end="93:45"><name pos:start="93:35" pos:end="93:39">avctx</name><operator pos:start="93:40" pos:end="93:41">-&gt;</operator><name pos:start="93:42" pos:end="93:45">qmin</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="95:5" pos:end="97:46"><if pos:start="95:5" pos:end="97:46">if <condition pos:start="95:8" pos:end="95:24">(<expr pos:start="95:9" pos:end="95:23"><name pos:start="95:9" pos:end="95:19"><name pos:start="95:9" pos:end="95:13">avctx</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:19">qmax</name></name> <operator pos:start="95:21" pos:end="95:21">&gt;</operator> <literal type="number" pos:start="95:23" pos:end="95:23">0</literal></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:46"><block_content pos:start="97:9" pos:end="97:46">

        <expr_stmt pos:start="97:9" pos:end="97:46"><expr pos:start="97:9" pos:end="97:45"><name pos:start="97:9" pos:end="97:31"><name pos:start="97:9" pos:end="97:14">enccfg</name><operator pos:start="97:15" pos:end="97:15">.</operator><name pos:start="97:16" pos:end="97:31">rc_max_quantizer</name></name> <operator pos:start="97:33" pos:end="97:33">=</operator> <name pos:start="97:35" pos:end="97:45"><name pos:start="97:35" pos:end="97:39">avctx</name><operator pos:start="97:40" pos:end="97:41">-&gt;</operator><name pos:start="97:42" pos:end="97:45">qmax</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:61"><expr pos:start="99:5" pos:end="99:60"><name pos:start="99:5" pos:end="99:30"><name pos:start="99:5" pos:end="99:10">enccfg</name><operator pos:start="99:11" pos:end="99:11">.</operator><name pos:start="99:12" pos:end="99:30">rc_dropframe_thresh</name></name> <operator pos:start="99:32" pos:end="99:32">=</operator> <name pos:start="99:34" pos:end="99:60"><name pos:start="99:34" pos:end="99:38">avctx</name><operator pos:start="99:39" pos:end="99:40">-&gt;</operator><name pos:start="99:41" pos:end="99:60">frame_skip_threshold</name></name></expr>;</expr_stmt>



    <comment type="line" pos:start="103:5" pos:end="103:34">//0-100 (0 =&gt; CBR, 100 =&gt; VBR)</comment>

    <expr_stmt pos:start="105:5" pos:end="105:75"><expr pos:start="105:5" pos:end="105:74"><name pos:start="105:5" pos:end="105:32"><name pos:start="105:5" pos:end="105:10">enccfg</name><operator pos:start="105:11" pos:end="105:11">.</operator><name pos:start="105:12" pos:end="105:32">rc_2pass_vbr_bias_pct</name></name>           <operator pos:start="105:44" pos:end="105:44">=</operator> <call pos:start="105:46" pos:end="105:74"><name pos:start="105:46" pos:end="105:50">round</name><argument_list pos:start="105:51" pos:end="105:74">(<argument pos:start="105:52" pos:end="105:73"><expr pos:start="105:52" pos:end="105:73"><name pos:start="105:52" pos:end="105:67"><name pos:start="105:52" pos:end="105:56">avctx</name><operator pos:start="105:57" pos:end="105:58">-&gt;</operator><name pos:start="105:59" pos:end="105:67">qcompress</name></name> <operator pos:start="105:69" pos:end="105:69">*</operator> <literal type="number" pos:start="105:71" pos:end="105:73">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="109:53"><expr pos:start="107:5" pos:end="109:52"><name pos:start="107:5" pos:end="107:38"><name pos:start="107:5" pos:end="107:10">enccfg</name><operator pos:start="107:11" pos:end="107:11">.</operator><name pos:start="107:12" pos:end="107:38">rc_2pass_vbr_minsection_pct</name></name>     <operator pos:start="107:44" pos:end="107:44">=</operator>

        <name pos:start="109:9" pos:end="109:26"><name pos:start="109:9" pos:end="109:13">avctx</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:26">rc_min_rate</name></name> <operator pos:start="109:28" pos:end="109:28">*</operator> <literal type="number" pos:start="109:30" pos:end="109:34">100LL</literal> <operator pos:start="109:36" pos:end="109:36">/</operator> <name pos:start="109:38" pos:end="109:52"><name pos:start="109:38" pos:end="109:42">avctx</name><operator pos:start="109:43" pos:end="109:44">-&gt;</operator><name pos:start="109:45" pos:end="109:52">bit_rate</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="115:57"><if pos:start="111:5" pos:end="115:57">if <condition pos:start="111:8" pos:end="111:27">(<expr pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:13">avctx</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:26">rc_max_rate</name></name></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="115:57"><block_content pos:start="113:9" pos:end="115:57">

        <expr_stmt pos:start="113:9" pos:end="115:57"><expr pos:start="113:9" pos:end="115:56"><name pos:start="113:9" pos:end="113:42"><name pos:start="113:9" pos:end="113:14">enccfg</name><operator pos:start="113:15" pos:end="113:15">.</operator><name pos:start="113:16" pos:end="113:42">rc_2pass_vbr_maxsection_pct</name></name> <operator pos:start="113:44" pos:end="113:44">=</operator>

            <name pos:start="115:13" pos:end="115:30"><name pos:start="115:13" pos:end="115:17">avctx</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:30">rc_max_rate</name></name> <operator pos:start="115:32" pos:end="115:32">*</operator> <literal type="number" pos:start="115:34" pos:end="115:38">100LL</literal> <operator pos:start="115:40" pos:end="115:40">/</operator> <name pos:start="115:42" pos:end="115:56"><name pos:start="115:42" pos:end="115:46">avctx</name><operator pos:start="115:47" pos:end="115:48">-&gt;</operator><name pos:start="115:49" pos:end="115:56">bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="123:61"><if pos:start="119:5" pos:end="123:61">if <condition pos:start="119:8" pos:end="119:30">(<expr pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:29"><name pos:start="119:9" pos:end="119:13">avctx</name><operator pos:start="119:14" pos:end="119:15">-&gt;</operator><name pos:start="119:16" pos:end="119:29">rc_buffer_size</name></name></expr>)</condition><block type="pseudo" pos:start="121:9" pos:end="123:61"><block_content pos:start="121:9" pos:end="123:61">

        <expr_stmt pos:start="121:9" pos:end="123:61"><expr pos:start="121:9" pos:end="123:60"><name pos:start="121:9" pos:end="121:24"><name pos:start="121:9" pos:end="121:14">enccfg</name><operator pos:start="121:15" pos:end="121:15">.</operator><name pos:start="121:16" pos:end="121:24">rc_buf_sz</name></name>         <operator pos:start="121:34" pos:end="121:34">=</operator>

            <name pos:start="123:13" pos:end="123:33"><name pos:start="123:13" pos:end="123:17">avctx</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:33">rc_buffer_size</name></name> <operator pos:start="123:35" pos:end="123:35">*</operator> <literal type="number" pos:start="123:37" pos:end="123:42">1000LL</literal> <operator pos:start="123:44" pos:end="123:44">/</operator> <name pos:start="123:46" pos:end="123:60"><name pos:start="123:46" pos:end="123:50">avctx</name><operator pos:start="123:51" pos:end="123:52">-&gt;</operator><name pos:start="123:53" pos:end="123:60">bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="125:5" pos:end="129:74"><if pos:start="125:5" pos:end="129:74">if <condition pos:start="125:8" pos:end="125:43">(<expr pos:start="125:9" pos:end="125:42"><name pos:start="125:9" pos:end="125:42"><name pos:start="125:9" pos:end="125:13">avctx</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:42">rc_initial_buffer_occupancy</name></name></expr>)</condition><block type="pseudo" pos:start="127:9" pos:end="129:74"><block_content pos:start="127:9" pos:end="129:74">

        <expr_stmt pos:start="127:9" pos:end="129:74"><expr pos:start="127:9" pos:end="129:73"><name pos:start="127:9" pos:end="127:32"><name pos:start="127:9" pos:end="127:14">enccfg</name><operator pos:start="127:15" pos:end="127:15">.</operator><name pos:start="127:16" pos:end="127:32">rc_buf_initial_sz</name></name> <operator pos:start="127:34" pos:end="127:34">=</operator>

            <name pos:start="129:13" pos:end="129:46"><name pos:start="129:13" pos:end="129:17">avctx</name><operator pos:start="129:18" pos:end="129:19">-&gt;</operator><name pos:start="129:20" pos:end="129:46">rc_initial_buffer_occupancy</name></name> <operator pos:start="129:48" pos:end="129:48">*</operator> <literal type="number" pos:start="129:50" pos:end="129:55">1000LL</literal> <operator pos:start="129:57" pos:end="129:57">/</operator> <name pos:start="129:59" pos:end="129:73"><name pos:start="129:59" pos:end="129:63">avctx</name><operator pos:start="129:64" pos:end="129:65">-&gt;</operator><name pos:start="129:66" pos:end="129:73">bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:60"><expr pos:start="131:5" pos:end="131:59"><name pos:start="131:5" pos:end="131:28"><name pos:start="131:5" pos:end="131:10">enccfg</name><operator pos:start="131:11" pos:end="131:11">.</operator><name pos:start="131:12" pos:end="131:28">rc_buf_optimal_sz</name></name>     <operator pos:start="131:34" pos:end="131:34">=</operator> <name pos:start="131:36" pos:end="131:51"><name pos:start="131:36" pos:end="131:41">enccfg</name><operator pos:start="131:42" pos:end="131:42">.</operator><name pos:start="131:43" pos:end="131:51">rc_buf_sz</name></name> <operator pos:start="131:53" pos:end="131:53">*</operator> <literal type="number" pos:start="131:55" pos:end="131:55">5</literal> <operator pos:start="131:57" pos:end="131:57">/</operator> <literal type="number" pos:start="131:59" pos:end="131:59">6</literal></expr>;</expr_stmt>



    <comment type="line" pos:start="135:5" pos:end="135:73">//_enc_init() will balk if kf_min_dist differs from max w/VPX_KF_AUTO</comment>

    <if_stmt pos:start="137:5" pos:end="139:47"><if pos:start="137:5" pos:end="139:47">if <condition pos:start="137:8" pos:end="137:71">(<expr pos:start="137:9" pos:end="137:70"><name pos:start="137:9" pos:end="137:25"><name pos:start="137:9" pos:end="137:13">avctx</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:25">keyint_min</name></name> <operator pos:start="137:27" pos:end="137:28">&gt;=</operator> <literal type="number" pos:start="137:30" pos:end="137:30">0</literal> <operator pos:start="137:32" pos:end="137:33">&amp;&amp;</operator> <name pos:start="137:35" pos:end="137:51"><name pos:start="137:35" pos:end="137:39">avctx</name><operator pos:start="137:40" pos:end="137:41">-&gt;</operator><name pos:start="137:42" pos:end="137:51">keyint_min</name></name> <operator pos:start="137:53" pos:end="137:54">==</operator> <name pos:start="137:56" pos:end="137:70"><name pos:start="137:56" pos:end="137:60">avctx</name><operator pos:start="137:61" pos:end="137:62">-&gt;</operator><name pos:start="137:63" pos:end="137:70">gop_size</name></name></expr>)</condition><block type="pseudo" pos:start="139:9" pos:end="139:47"><block_content pos:start="139:9" pos:end="139:47">

        <expr_stmt pos:start="139:9" pos:end="139:47"><expr pos:start="139:9" pos:end="139:46"><name pos:start="139:9" pos:end="139:26"><name pos:start="139:9" pos:end="139:14">enccfg</name><operator pos:start="139:15" pos:end="139:15">.</operator><name pos:start="139:16" pos:end="139:26">kf_min_dist</name></name> <operator pos:start="139:28" pos:end="139:28">=</operator> <name pos:start="139:30" pos:end="139:46"><name pos:start="139:30" pos:end="139:34">avctx</name><operator pos:start="139:35" pos:end="139:36">-&gt;</operator><name pos:start="139:37" pos:end="139:46">keyint_min</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="141:5" pos:end="143:45"><if pos:start="141:5" pos:end="143:45">if <condition pos:start="141:8" pos:end="141:29">(<expr pos:start="141:9" pos:end="141:28"><name pos:start="141:9" pos:end="141:23"><name pos:start="141:9" pos:end="141:13">avctx</name><operator pos:start="141:14" pos:end="141:15">-&gt;</operator><name pos:start="141:16" pos:end="141:23">gop_size</name></name> <operator pos:start="141:25" pos:end="141:26">&gt;=</operator> <literal type="number" pos:start="141:28" pos:end="141:28">0</literal></expr>)</condition><block type="pseudo" pos:start="143:9" pos:end="143:45"><block_content pos:start="143:9" pos:end="143:45">

        <expr_stmt pos:start="143:9" pos:end="143:45"><expr pos:start="143:9" pos:end="143:44"><name pos:start="143:9" pos:end="143:26"><name pos:start="143:9" pos:end="143:14">enccfg</name><operator pos:start="143:15" pos:end="143:15">.</operator><name pos:start="143:16" pos:end="143:26">kf_max_dist</name></name> <operator pos:start="143:28" pos:end="143:28">=</operator> <name pos:start="143:30" pos:end="143:44"><name pos:start="143:30" pos:end="143:34">avctx</name><operator pos:start="143:35" pos:end="143:36">-&gt;</operator><name pos:start="143:37" pos:end="143:44">gop_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="147:5" pos:end="201:5"><if pos:start="147:5" pos:end="149:35">if <condition pos:start="147:8" pos:end="147:43">(<expr pos:start="147:9" pos:end="147:42"><name pos:start="147:9" pos:end="147:21"><name pos:start="147:9" pos:end="147:14">enccfg</name><operator pos:start="147:15" pos:end="147:15">.</operator><name pos:start="147:16" pos:end="147:21">g_pass</name></name> <operator pos:start="147:23" pos:end="147:24">==</operator> <name pos:start="147:26" pos:end="147:42">VPX_RC_FIRST_PASS</name></expr>)</condition><block type="pseudo" pos:start="149:9" pos:end="149:35"><block_content pos:start="149:9" pos:end="149:35">

        <expr_stmt pos:start="149:9" pos:end="149:35"><expr pos:start="149:9" pos:end="149:34"><name pos:start="149:9" pos:end="149:30"><name pos:start="149:9" pos:end="149:14">enccfg</name><operator pos:start="149:15" pos:end="149:15">.</operator><name pos:start="149:16" pos:end="149:30">g_lag_in_frames</name></name> <operator pos:start="149:32" pos:end="149:32">=</operator> <literal type="number" pos:start="149:34" pos:end="149:34">0</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="151:5" pos:end="201:5">else if <condition pos:start="151:13" pos:end="151:47">(<expr pos:start="151:14" pos:end="151:46"><name pos:start="151:14" pos:end="151:26"><name pos:start="151:14" pos:end="151:19">enccfg</name><operator pos:start="151:20" pos:end="151:20">.</operator><name pos:start="151:21" pos:end="151:26">g_pass</name></name> <operator pos:start="151:28" pos:end="151:29">==</operator> <name pos:start="151:31" pos:end="151:46">VPX_RC_LAST_PASS</name></expr>)</condition> <block pos:start="151:49" pos:end="201:5">{<block_content pos:start="153:9" pos:end="199:56">

        <decl_stmt pos:start="153:9" pos:end="153:29"><decl pos:start="153:9" pos:end="153:23"><type pos:start="153:9" pos:end="153:11"><name pos:start="153:9" pos:end="153:11">int</name></type> <name pos:start="153:13" pos:end="153:23">decode_size</name></decl>, <decl pos:start="153:26" pos:end="153:28"><type ref="prev" pos:start="153:9" pos:end="153:11"/><name pos:start="153:26" pos:end="153:28">ret</name></decl>;</decl_stmt>



        <if_stmt pos:start="157:9" pos:end="163:9"><if pos:start="157:9" pos:end="163:9">if <condition pos:start="157:12" pos:end="157:29">(<expr pos:start="157:13" pos:end="157:28"><operator pos:start="157:13" pos:end="157:13">!</operator><name pos:start="157:14" pos:end="157:28"><name pos:start="157:14" pos:end="157:18">avctx</name><operator pos:start="157:19" pos:end="157:20">-&gt;</operator><name pos:start="157:21" pos:end="157:28">stats_in</name></name></expr>)</condition> <block pos:start="157:31" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:39">

            <expr_stmt pos:start="159:13" pos:end="159:75"><expr pos:start="159:13" pos:end="159:74"><call pos:start="159:13" pos:end="159:74"><name pos:start="159:13" pos:end="159:18">av_log</name><argument_list pos:start="159:19" pos:end="159:74">(<argument pos:start="159:20" pos:end="159:24"><expr pos:start="159:20" pos:end="159:24"><name pos:start="159:20" pos:end="159:24">avctx</name></expr></argument>, <argument pos:start="159:27" pos:end="159:38"><expr pos:start="159:27" pos:end="159:38"><name pos:start="159:27" pos:end="159:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="159:41" pos:end="159:73"><expr pos:start="159:41" pos:end="159:73"><literal type="string" pos:start="159:41" pos:end="159:73">"No stats file for second pass\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="161:13" pos:end="161:39">return <expr pos:start="161:20" pos:end="161:38"><name pos:start="161:20" pos:end="161:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="167:9" pos:end="167:65"><expr pos:start="167:9" pos:end="167:64"><name pos:start="167:9" pos:end="167:29"><name pos:start="167:9" pos:end="167:11">ctx</name><operator pos:start="167:12" pos:end="167:13">-&gt;</operator><name pos:start="167:14" pos:end="167:26">twopass_stats</name><operator pos:start="167:27" pos:end="167:27">.</operator><name pos:start="167:28" pos:end="167:29">sz</name></name>  <operator pos:start="167:32" pos:end="167:32">=</operator> <call pos:start="167:34" pos:end="167:56"><name pos:start="167:34" pos:end="167:39">strlen</name><argument_list pos:start="167:40" pos:end="167:56">(<argument pos:start="167:41" pos:end="167:55"><expr pos:start="167:41" pos:end="167:55"><name pos:start="167:41" pos:end="167:55"><name pos:start="167:41" pos:end="167:45">avctx</name><operator pos:start="167:46" pos:end="167:47">-&gt;</operator><name pos:start="167:48" pos:end="167:55">stats_in</name></name></expr></argument>)</argument_list></call> <operator pos:start="167:58" pos:end="167:58">*</operator> <literal type="number" pos:start="167:60" pos:end="167:60">3</literal> <operator pos:start="167:62" pos:end="167:62">/</operator> <literal type="number" pos:start="167:64" pos:end="167:64">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:74"><expr pos:start="169:9" pos:end="169:73"><name pos:start="169:9" pos:end="169:11">ret</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <call pos:start="169:15" pos:end="169:73"><name pos:start="169:15" pos:end="169:25">av_reallocp</name><argument_list pos:start="169:26" pos:end="169:73">(<argument pos:start="169:27" pos:end="169:49"><expr pos:start="169:27" pos:end="169:49"><operator pos:start="169:27" pos:end="169:27">&amp;</operator><name pos:start="169:28" pos:end="169:49"><name pos:start="169:28" pos:end="169:30">ctx</name><operator pos:start="169:31" pos:end="169:32">-&gt;</operator><name pos:start="169:33" pos:end="169:45">twopass_stats</name><operator pos:start="169:46" pos:end="169:46">.</operator><name pos:start="169:47" pos:end="169:49">buf</name></name></expr></argument>, <argument pos:start="169:52" pos:end="169:72"><expr pos:start="169:52" pos:end="169:72"><name pos:start="169:52" pos:end="169:72"><name pos:start="169:52" pos:end="169:54">ctx</name><operator pos:start="169:55" pos:end="169:56">-&gt;</operator><name pos:start="169:57" pos:end="169:69">twopass_stats</name><operator pos:start="169:70" pos:end="169:70">.</operator><name pos:start="169:71" pos:end="169:72">sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="171:9" pos:end="181:9"><if pos:start="171:9" pos:end="181:9">if <condition pos:start="171:12" pos:end="171:20">(<expr pos:start="171:13" pos:end="171:19"><name pos:start="171:13" pos:end="171:15">ret</name> <operator pos:start="171:17" pos:end="171:17">&lt;</operator> <literal type="number" pos:start="171:19" pos:end="171:19">0</literal></expr>)</condition> <block pos:start="171:22" pos:end="181:9">{<block_content pos:start="173:13" pos:end="179:23">

            <expr_stmt pos:start="173:13" pos:end="177:42"><expr pos:start="173:13" pos:end="177:41"><call pos:start="173:13" pos:end="177:41"><name pos:start="173:13" pos:end="173:18">av_log</name><argument_list pos:start="173:19" pos:end="177:41">(<argument pos:start="173:20" pos:end="173:24"><expr pos:start="173:20" pos:end="173:24"><name pos:start="173:20" pos:end="173:24">avctx</name></expr></argument>, <argument pos:start="173:27" pos:end="173:38"><expr pos:start="173:27" pos:end="173:38"><name pos:start="173:27" pos:end="173:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="175:20" pos:end="175:59"><expr pos:start="175:20" pos:end="175:59"><literal type="string" pos:start="175:20" pos:end="175:59">"Stat buffer alloc (%zu bytes) failed\n"</literal></expr></argument>,

                   <argument pos:start="177:20" pos:end="177:40"><expr pos:start="177:20" pos:end="177:40"><name pos:start="177:20" pos:end="177:40"><name pos:start="177:20" pos:end="177:22">ctx</name><operator pos:start="177:23" pos:end="177:24">-&gt;</operator><name pos:start="177:25" pos:end="177:37">twopass_stats</name><operator pos:start="177:38" pos:end="177:38">.</operator><name pos:start="177:39" pos:end="177:40">sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="179:13" pos:end="179:23">return <expr pos:start="179:20" pos:end="179:22"><name pos:start="179:20" pos:end="179:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="183:9" pos:end="185:62"><expr pos:start="183:9" pos:end="185:61"><name pos:start="183:9" pos:end="183:19">decode_size</name> <operator pos:start="183:21" pos:end="183:21">=</operator> <call pos:start="183:23" pos:end="185:61"><name pos:start="183:23" pos:end="183:38">av_base64_decode</name><argument_list pos:start="183:39" pos:end="185:61">(<argument pos:start="183:40" pos:end="183:61"><expr pos:start="183:40" pos:end="183:61"><name pos:start="183:40" pos:end="183:61"><name pos:start="183:40" pos:end="183:42">ctx</name><operator pos:start="183:43" pos:end="183:44">-&gt;</operator><name pos:start="183:45" pos:end="183:57">twopass_stats</name><operator pos:start="183:58" pos:end="183:58">.</operator><name pos:start="183:59" pos:end="183:61">buf</name></name></expr></argument>, <argument pos:start="183:64" pos:end="183:78"><expr pos:start="183:64" pos:end="183:78"><name pos:start="183:64" pos:end="183:78"><name pos:start="183:64" pos:end="183:68">avctx</name><operator pos:start="183:69" pos:end="183:70">-&gt;</operator><name pos:start="183:71" pos:end="183:78">stats_in</name></name></expr></argument>,

                                       <argument pos:start="185:40" pos:end="185:60"><expr pos:start="185:40" pos:end="185:60"><name pos:start="185:40" pos:end="185:60"><name pos:start="185:40" pos:end="185:42">ctx</name><operator pos:start="185:43" pos:end="185:44">-&gt;</operator><name pos:start="185:45" pos:end="185:57">twopass_stats</name><operator pos:start="185:58" pos:end="185:58">.</operator><name pos:start="185:59" pos:end="185:60">sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="187:9" pos:end="193:9"><if pos:start="187:9" pos:end="193:9">if <condition pos:start="187:12" pos:end="187:28">(<expr pos:start="187:13" pos:end="187:27"><name pos:start="187:13" pos:end="187:23">decode_size</name> <operator pos:start="187:25" pos:end="187:25">&lt;</operator> <literal type="number" pos:start="187:27" pos:end="187:27">0</literal></expr>)</condition> <block pos:start="187:30" pos:end="193:9">{<block_content pos:start="189:13" pos:end="191:39">

            <expr_stmt pos:start="189:13" pos:end="189:71"><expr pos:start="189:13" pos:end="189:70"><call pos:start="189:13" pos:end="189:70"><name pos:start="189:13" pos:end="189:18">av_log</name><argument_list pos:start="189:19" pos:end="189:70">(<argument pos:start="189:20" pos:end="189:24"><expr pos:start="189:20" pos:end="189:24"><name pos:start="189:20" pos:end="189:24">avctx</name></expr></argument>, <argument pos:start="189:27" pos:end="189:38"><expr pos:start="189:27" pos:end="189:38"><name pos:start="189:27" pos:end="189:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="189:41" pos:end="189:69"><expr pos:start="189:41" pos:end="189:69"><literal type="string" pos:start="189:41" pos:end="189:69">"Stat buffer decode failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="191:13" pos:end="191:39">return <expr pos:start="191:20" pos:end="191:38"><name pos:start="191:20" pos:end="191:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="197:9" pos:end="197:49"><expr pos:start="197:9" pos:end="197:48"><name pos:start="197:9" pos:end="197:29"><name pos:start="197:9" pos:end="197:11">ctx</name><operator pos:start="197:12" pos:end="197:13">-&gt;</operator><name pos:start="197:14" pos:end="197:26">twopass_stats</name><operator pos:start="197:27" pos:end="197:27">.</operator><name pos:start="197:28" pos:end="197:29">sz</name></name>      <operator pos:start="197:36" pos:end="197:36">=</operator> <name pos:start="197:38" pos:end="197:48">decode_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:56"><expr pos:start="199:9" pos:end="199:55"><name pos:start="199:9" pos:end="199:34"><name pos:start="199:9" pos:end="199:14">enccfg</name><operator pos:start="199:15" pos:end="199:15">.</operator><name pos:start="199:16" pos:end="199:34">rc_twopass_stats_in</name></name> <operator pos:start="199:36" pos:end="199:36">=</operator> <name pos:start="199:38" pos:end="199:55"><name pos:start="199:38" pos:end="199:40">ctx</name><operator pos:start="199:41" pos:end="199:42">-&gt;</operator><name pos:start="199:43" pos:end="199:55">twopass_stats</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="205:5" pos:end="209:18">/* 0-3: For non-zero values the encoder increasingly optimizes for reduced

       complexity playback on low powered devices at the expense of encode

       quality. */</comment>

    <if_stmt pos:start="211:5" pos:end="221:61"><if pos:start="211:5" pos:end="213:42">if <condition pos:start="211:8" pos:end="211:45">(<expr pos:start="211:9" pos:end="211:44"><name pos:start="211:9" pos:end="211:22"><name pos:start="211:9" pos:end="211:13">avctx</name><operator pos:start="211:14" pos:end="211:15">-&gt;</operator><name pos:start="211:16" pos:end="211:22">profile</name></name> <operator pos:start="211:24" pos:end="211:25">!=</operator> <name pos:start="211:27" pos:end="211:44">FF_PROFILE_UNKNOWN</name></expr>)</condition><block type="pseudo" pos:start="213:9" pos:end="213:42"><block_content pos:start="213:9" pos:end="213:42">

        <expr_stmt pos:start="213:9" pos:end="213:42"><expr pos:start="213:9" pos:end="213:41"><name pos:start="213:9" pos:end="213:24"><name pos:start="213:9" pos:end="213:14">enccfg</name><operator pos:start="213:15" pos:end="213:15">.</operator><name pos:start="213:16" pos:end="213:24">g_profile</name></name> <operator pos:start="213:26" pos:end="213:26">=</operator> <name pos:start="213:28" pos:end="213:41"><name pos:start="213:28" pos:end="213:32">avctx</name><operator pos:start="213:33" pos:end="213:34">-&gt;</operator><name pos:start="213:35" pos:end="213:41">profile</name></name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="215:5" pos:end="217:61">else if <condition pos:start="215:13" pos:end="215:50">(<expr pos:start="215:14" pos:end="215:49"><name pos:start="215:14" pos:end="215:27"><name pos:start="215:14" pos:end="215:18">avctx</name><operator pos:start="215:19" pos:end="215:20">-&gt;</operator><name pos:start="215:21" pos:end="215:27">pix_fmt</name></name> <operator pos:start="215:29" pos:end="215:30">==</operator> <name pos:start="215:32" pos:end="215:49">AV_PIX_FMT_YUV420P</name></expr>)</condition><block type="pseudo" pos:start="217:9" pos:end="217:61"><block_content pos:start="217:9" pos:end="217:61">

        <expr_stmt pos:start="217:9" pos:end="217:61"><expr pos:start="217:9" pos:end="217:60"><name pos:start="217:9" pos:end="217:22"><name pos:start="217:9" pos:end="217:13">avctx</name><operator pos:start="217:14" pos:end="217:15">-&gt;</operator><name pos:start="217:16" pos:end="217:22">profile</name></name> <operator pos:start="217:24" pos:end="217:24">=</operator> <name pos:start="217:26" pos:end="217:41"><name pos:start="217:26" pos:end="217:31">enccfg</name><operator pos:start="217:32" pos:end="217:32">.</operator><name pos:start="217:33" pos:end="217:41">g_profile</name></name> <operator pos:start="217:43" pos:end="217:43">=</operator> <name pos:start="217:45" pos:end="217:60">FF_PROFILE_VP9_0</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="219:5" pos:end="221:61">else<block type="pseudo" pos:start="221:9" pos:end="221:61"><block_content pos:start="221:9" pos:end="221:61">

        <expr_stmt pos:start="221:9" pos:end="221:61"><expr pos:start="221:9" pos:end="221:60"><name pos:start="221:9" pos:end="221:22"><name pos:start="221:9" pos:end="221:13">avctx</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:22">profile</name></name> <operator pos:start="221:24" pos:end="221:24">=</operator> <name pos:start="221:26" pos:end="221:41"><name pos:start="221:26" pos:end="221:31">enccfg</name><operator pos:start="221:32" pos:end="221:32">.</operator><name pos:start="221:33" pos:end="221:41">g_profile</name></name> <operator pos:start="221:43" pos:end="221:43">=</operator> <name pos:start="221:45" pos:end="221:60">FF_PROFILE_VP9_1</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="225:5" pos:end="225:52"><expr pos:start="225:5" pos:end="225:51"><name pos:start="225:5" pos:end="225:28"><name pos:start="225:5" pos:end="225:10">enccfg</name><operator pos:start="225:11" pos:end="225:11">.</operator><name pos:start="225:12" pos:end="225:28">g_error_resilient</name></name> <operator pos:start="225:30" pos:end="225:30">=</operator> <name pos:start="225:32" pos:end="225:51"><name pos:start="225:32" pos:end="225:34">ctx</name><operator pos:start="225:35" pos:end="225:36">-&gt;</operator><name pos:start="225:37" pos:end="225:51">error_resilient</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="229:5" pos:end="229:33"><expr pos:start="229:5" pos:end="229:32"><call pos:start="229:5" pos:end="229:32"><name pos:start="229:5" pos:end="229:16">dump_enc_cfg</name><argument_list pos:start="229:17" pos:end="229:32">(<argument pos:start="229:18" pos:end="229:22"><expr pos:start="229:18" pos:end="229:22"><name pos:start="229:18" pos:end="229:22">avctx</name></expr></argument>, <argument pos:start="229:25" pos:end="229:31"><expr pos:start="229:25" pos:end="229:31"><operator pos:start="229:25" pos:end="229:25">&amp;</operator><name pos:start="229:26" pos:end="229:31">enccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="231:5" pos:end="231:35">/* Construct Encoder Context */</comment>

    <expr_stmt pos:start="233:5" pos:end="233:63"><expr pos:start="233:5" pos:end="233:62"><name pos:start="233:5" pos:end="233:7">res</name> <operator pos:start="233:9" pos:end="233:9">=</operator> <call pos:start="233:11" pos:end="233:62"><name pos:start="233:11" pos:end="233:28">vpx_codec_enc_init</name><argument_list pos:start="233:29" pos:end="233:62">(<argument pos:start="233:30" pos:end="233:42"><expr pos:start="233:30" pos:end="233:42"><operator pos:start="233:30" pos:end="233:30">&amp;</operator><name pos:start="233:31" pos:end="233:42"><name pos:start="233:31" pos:end="233:33">ctx</name><operator pos:start="233:34" pos:end="233:35">-&gt;</operator><name pos:start="233:36" pos:end="233:42">encoder</name></name></expr></argument>, <argument pos:start="233:45" pos:end="233:49"><expr pos:start="233:45" pos:end="233:49"><name pos:start="233:45" pos:end="233:49">iface</name></expr></argument>, <argument pos:start="233:52" pos:end="233:58"><expr pos:start="233:52" pos:end="233:58"><operator pos:start="233:52" pos:end="233:52">&amp;</operator><name pos:start="233:53" pos:end="233:58">enccfg</name></expr></argument>, <argument pos:start="233:61" pos:end="233:61"><expr pos:start="233:61" pos:end="233:61"><literal type="number" pos:start="233:61" pos:end="233:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="235:5" pos:end="241:5"><if pos:start="235:5" pos:end="241:5">if <condition pos:start="235:8" pos:end="235:28">(<expr pos:start="235:9" pos:end="235:27"><name pos:start="235:9" pos:end="235:11">res</name> <operator pos:start="235:13" pos:end="235:14">!=</operator> <name pos:start="235:16" pos:end="235:27">VPX_CODEC_OK</name></expr>)</condition> <block pos:start="235:30" pos:end="241:5">{<block_content pos:start="237:9" pos:end="239:31">

        <expr_stmt pos:start="237:9" pos:end="237:65"><expr pos:start="237:9" pos:end="237:64"><call pos:start="237:9" pos:end="237:64"><name pos:start="237:9" pos:end="237:25">log_encoder_error</name><argument_list pos:start="237:26" pos:end="237:64">(<argument pos:start="237:27" pos:end="237:31"><expr pos:start="237:27" pos:end="237:31"><name pos:start="237:27" pos:end="237:31">avctx</name></expr></argument>, <argument pos:start="237:34" pos:end="237:63"><expr pos:start="237:34" pos:end="237:63"><literal type="string" pos:start="237:34" pos:end="237:63">"Failed to initialize encoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="239:9" pos:end="239:31">return <expr pos:start="239:16" pos:end="239:30"><call pos:start="239:16" pos:end="239:30"><name pos:start="239:16" pos:end="239:22">AVERROR</name><argument_list pos:start="239:23" pos:end="239:30">(<argument pos:start="239:24" pos:end="239:29"><expr pos:start="239:24" pos:end="239:29"><name pos:start="239:24" pos:end="239:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="245:5" pos:end="245:67">//codec control failures are currently treated only as warnings</comment>

    <expr_stmt pos:start="247:5" pos:end="247:55"><expr pos:start="247:5" pos:end="247:54"><call pos:start="247:5" pos:end="247:54"><name pos:start="247:5" pos:end="247:10">av_log</name><argument_list pos:start="247:11" pos:end="247:54">(<argument pos:start="247:12" pos:end="247:16"><expr pos:start="247:12" pos:end="247:16"><name pos:start="247:12" pos:end="247:16">avctx</name></expr></argument>, <argument pos:start="247:19" pos:end="247:30"><expr pos:start="247:19" pos:end="247:30"><name pos:start="247:19" pos:end="247:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="247:33" pos:end="247:53"><expr pos:start="247:33" pos:end="247:53"><literal type="string" pos:start="247:33" pos:end="247:53">"vpx_codec_control\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="249:5" pos:end="251:70"><if pos:start="249:5" pos:end="251:70">if <condition pos:start="249:8" pos:end="249:33">(<expr pos:start="249:9" pos:end="249:32"><name pos:start="249:9" pos:end="249:21"><name pos:start="249:9" pos:end="249:11">ctx</name><operator pos:start="249:12" pos:end="249:13">-&gt;</operator><name pos:start="249:14" pos:end="249:21">cpu_used</name></name> <operator pos:start="249:23" pos:end="249:24">!=</operator> <name pos:start="249:26" pos:end="249:32">INT_MIN</name></expr>)</condition><block type="pseudo" pos:start="251:9" pos:end="251:70"><block_content pos:start="251:9" pos:end="251:70">

        <expr_stmt pos:start="251:9" pos:end="251:70"><expr pos:start="251:9" pos:end="251:69"><call pos:start="251:9" pos:end="251:69"><name pos:start="251:9" pos:end="251:20">codecctl_int</name><argument_list pos:start="251:21" pos:end="251:69">(<argument pos:start="251:22" pos:end="251:26"><expr pos:start="251:22" pos:end="251:26"><name pos:start="251:22" pos:end="251:26">avctx</name></expr></argument>, <argument pos:start="251:29" pos:end="251:44"><expr pos:start="251:29" pos:end="251:44"><name pos:start="251:29" pos:end="251:44">VP8E_SET_CPUUSED</name></expr></argument>,          <argument pos:start="251:56" pos:end="251:68"><expr pos:start="251:56" pos:end="251:68"><name pos:start="251:56" pos:end="251:68"><name pos:start="251:56" pos:end="251:58">ctx</name><operator pos:start="251:59" pos:end="251:60">-&gt;</operator><name pos:start="251:61" pos:end="251:68">cpu_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="253:5" pos:end="255:74"><if pos:start="253:5" pos:end="255:74">if <condition pos:start="253:8" pos:end="253:31">(<expr pos:start="253:9" pos:end="253:30"><name pos:start="253:9" pos:end="253:25"><name pos:start="253:9" pos:end="253:11">ctx</name><operator pos:start="253:12" pos:end="253:13">-&gt;</operator><name pos:start="253:14" pos:end="253:25">auto_alt_ref</name></name> <operator pos:start="253:27" pos:end="253:28">&gt;=</operator> <literal type="number" pos:start="253:30" pos:end="253:30">0</literal></expr>)</condition><block type="pseudo" pos:start="255:9" pos:end="255:74"><block_content pos:start="255:9" pos:end="255:74">

        <expr_stmt pos:start="255:9" pos:end="255:74"><expr pos:start="255:9" pos:end="255:73"><call pos:start="255:9" pos:end="255:73"><name pos:start="255:9" pos:end="255:20">codecctl_int</name><argument_list pos:start="255:21" pos:end="255:73">(<argument pos:start="255:22" pos:end="255:26"><expr pos:start="255:22" pos:end="255:26"><name pos:start="255:22" pos:end="255:26">avctx</name></expr></argument>, <argument pos:start="255:29" pos:end="255:53"><expr pos:start="255:29" pos:end="255:53"><name pos:start="255:29" pos:end="255:53">VP8E_SET_ENABLEAUTOALTREF</name></expr></argument>, <argument pos:start="255:56" pos:end="255:72"><expr pos:start="255:56" pos:end="255:72"><name pos:start="255:56" pos:end="255:72"><name pos:start="255:56" pos:end="255:58">ctx</name><operator pos:start="255:59" pos:end="255:60">-&gt;</operator><name pos:start="255:61" pos:end="255:72">auto_alt_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="257:5" pos:end="259:77"><if pos:start="257:5" pos:end="259:77">if <condition pos:start="257:8" pos:end="257:34">(<expr pos:start="257:9" pos:end="257:33"><name pos:start="257:9" pos:end="257:28"><name pos:start="257:9" pos:end="257:11">ctx</name><operator pos:start="257:12" pos:end="257:13">-&gt;</operator><name pos:start="257:14" pos:end="257:28">arnr_max_frames</name></name> <operator pos:start="257:30" pos:end="257:31">&gt;=</operator> <literal type="number" pos:start="257:33" pos:end="257:33">0</literal></expr>)</condition><block type="pseudo" pos:start="259:9" pos:end="259:77"><block_content pos:start="259:9" pos:end="259:77">

        <expr_stmt pos:start="259:9" pos:end="259:77"><expr pos:start="259:9" pos:end="259:76"><call pos:start="259:9" pos:end="259:76"><name pos:start="259:9" pos:end="259:20">codecctl_int</name><argument_list pos:start="259:21" pos:end="259:76">(<argument pos:start="259:22" pos:end="259:26"><expr pos:start="259:22" pos:end="259:26"><name pos:start="259:22" pos:end="259:26">avctx</name></expr></argument>, <argument pos:start="259:29" pos:end="259:51"><expr pos:start="259:29" pos:end="259:51"><name pos:start="259:29" pos:end="259:51">VP8E_SET_ARNR_MAXFRAMES</name></expr></argument>,   <argument pos:start="259:56" pos:end="259:75"><expr pos:start="259:56" pos:end="259:75"><name pos:start="259:56" pos:end="259:75"><name pos:start="259:56" pos:end="259:58">ctx</name><operator pos:start="259:59" pos:end="259:60">-&gt;</operator><name pos:start="259:61" pos:end="259:75">arnr_max_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="261:5" pos:end="263:75"><if pos:start="261:5" pos:end="263:75">if <condition pos:start="261:8" pos:end="261:32">(<expr pos:start="261:9" pos:end="261:31"><name pos:start="261:9" pos:end="261:26"><name pos:start="261:9" pos:end="261:11">ctx</name><operator pos:start="261:12" pos:end="261:13">-&gt;</operator><name pos:start="261:14" pos:end="261:26">arnr_strength</name></name> <operator pos:start="261:28" pos:end="261:29">&gt;=</operator> <literal type="number" pos:start="261:31" pos:end="261:31">0</literal></expr>)</condition><block type="pseudo" pos:start="263:9" pos:end="263:75"><block_content pos:start="263:9" pos:end="263:75">

        <expr_stmt pos:start="263:9" pos:end="263:75"><expr pos:start="263:9" pos:end="263:74"><call pos:start="263:9" pos:end="263:74"><name pos:start="263:9" pos:end="263:20">codecctl_int</name><argument_list pos:start="263:21" pos:end="263:74">(<argument pos:start="263:22" pos:end="263:26"><expr pos:start="263:22" pos:end="263:26"><name pos:start="263:22" pos:end="263:26">avctx</name></expr></argument>, <argument pos:start="263:29" pos:end="263:50"><expr pos:start="263:29" pos:end="263:50"><name pos:start="263:29" pos:end="263:50">VP8E_SET_ARNR_STRENGTH</name></expr></argument>,    <argument pos:start="263:56" pos:end="263:73"><expr pos:start="263:56" pos:end="263:73"><name pos:start="263:56" pos:end="263:73"><name pos:start="263:56" pos:end="263:58">ctx</name><operator pos:start="263:59" pos:end="263:60">-&gt;</operator><name pos:start="263:61" pos:end="263:73">arnr_strength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="265:5" pos:end="267:71"><if pos:start="265:5" pos:end="267:71">if <condition pos:start="265:8" pos:end="265:28">(<expr pos:start="265:9" pos:end="265:27"><name pos:start="265:9" pos:end="265:22"><name pos:start="265:9" pos:end="265:11">ctx</name><operator pos:start="265:12" pos:end="265:13">-&gt;</operator><name pos:start="265:14" pos:end="265:22">arnr_type</name></name> <operator pos:start="265:24" pos:end="265:25">&gt;=</operator> <literal type="number" pos:start="265:27" pos:end="265:27">0</literal></expr>)</condition><block type="pseudo" pos:start="267:9" pos:end="267:71"><block_content pos:start="267:9" pos:end="267:71">

        <expr_stmt pos:start="267:9" pos:end="267:71"><expr pos:start="267:9" pos:end="267:70"><call pos:start="267:9" pos:end="267:70"><name pos:start="267:9" pos:end="267:20">codecctl_int</name><argument_list pos:start="267:21" pos:end="267:70">(<argument pos:start="267:22" pos:end="267:26"><expr pos:start="267:22" pos:end="267:26"><name pos:start="267:22" pos:end="267:26">avctx</name></expr></argument>, <argument pos:start="267:29" pos:end="267:46"><expr pos:start="267:29" pos:end="267:46"><name pos:start="267:29" pos:end="267:46">VP8E_SET_ARNR_TYPE</name></expr></argument>,        <argument pos:start="267:56" pos:end="267:69"><expr pos:start="267:56" pos:end="267:69"><name pos:start="267:56" pos:end="267:69"><name pos:start="267:56" pos:end="267:58">ctx</name><operator pos:start="267:59" pos:end="267:60">-&gt;</operator><name pos:start="267:61" pos:end="267:69">arnr_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="271:5" pos:end="280:0"><if pos:start="271:5" pos:end="280:0">if <condition pos:start="271:8" pos:end="271:69">(<expr pos:start="271:9" pos:end="271:68"><name pos:start="271:9" pos:end="271:33">CONFIG_LIBVPX_VP8_ENCODER</name> <operator pos:start="271:35" pos:end="271:36">&amp;&amp;</operator> <name pos:start="271:38" pos:end="271:42">iface</name> <operator pos:start="271:44" pos:end="271:45">==</operator> <operator pos:start="271:47" pos:end="271:47">&amp;</operator><name pos:start="271:48" pos:end="271:68">vpx_codec_vp8_cx_algo</name></expr>)</condition> <block pos:start="271:71" pos:end="280:0">{<block_content pos:start="273:9" pos:end="275:80">

        <expr_stmt pos:start="273:9" pos:end="273:80"><expr pos:start="273:9" pos:end="273:79"><call pos:start="273:9" pos:end="273:79"><name pos:start="273:9" pos:end="273:20">codecctl_int</name><argument_list pos:start="273:21" pos:end="273:79">(<argument pos:start="273:22" pos:end="273:26"><expr pos:start="273:22" pos:end="273:26"><name pos:start="273:22" pos:end="273:26">avctx</name></expr></argument>, <argument pos:start="273:29" pos:end="273:54"><expr pos:start="273:29" pos:end="273:54"><name pos:start="273:29" pos:end="273:54">VP8E_SET_NOISE_SENSITIVITY</name></expr></argument>, <argument pos:start="273:57" pos:end="273:78"><expr pos:start="273:57" pos:end="273:78"><name pos:start="273:57" pos:end="273:78"><name pos:start="273:57" pos:end="273:61">avctx</name><operator pos:start="273:62" pos:end="273:63">-&gt;</operator><name pos:start="273:64" pos:end="273:78">noise_reduction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:80"><expr pos:start="275:9" pos:end="275:79"><call pos:start="275:9" pos:end="275:79"><name pos:start="275:9" pos:end="275:20">codecctl_int</name><argument_list pos:start="275:21" pos:end="275:79">(<argument pos:start="275:22" pos:end="275:26"><expr pos:start="275:22" pos:end="275:26"><name pos:start="275:22" pos:end="275:26">avctx</name></expr></argument>, <argument pos:start="275:29" pos:end="275:53"><expr pos:start="275:29" pos:end="275:53"><name pos:start="275:29" pos:end="275:53">VP8E_SET_TOKEN_PARTITIONS</name></expr></argument>,  <argument pos:start="275:57" pos:end="275:78"><expr pos:start="275:57" pos:end="275:78"><call pos:start="275:57" pos:end="275:78"><name pos:start="275:57" pos:end="275:63">av_log2</name><argument_list pos:start="275:64" pos:end="275:78">(<argument pos:start="275:65" pos:end="275:77"><expr pos:start="275:65" pos:end="275:77"><name pos:start="275:65" pos:end="275:77"><name pos:start="275:65" pos:end="275:69">avctx</name><operator pos:start="275:70" pos:end="275:71">-&gt;</operator><name pos:start="275:72" pos:end="275:77">slices</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:if pos:start="279:1" pos:end="279:18">#<cpp:directive pos:start="279:2" pos:end="279:3">if</cpp:directive> <expr pos:start="279:5" pos:end="279:18"><name pos:start="279:5" pos:end="279:18">FF_API_MPV_OPT</name></expr></cpp:if>

    <macro pos:start="281:5" pos:end="281:35"><name pos:start="281:5" pos:end="281:35">FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

    <if_stmt pos:start="283:5" pos:end="291:5"><if pos:start="283:5" pos:end="291:5">if <condition pos:start="283:8" pos:end="283:28">(<expr pos:start="283:9" pos:end="283:27"><name pos:start="283:9" pos:end="283:27"><name pos:start="283:9" pos:end="283:13">avctx</name><operator pos:start="283:14" pos:end="283:15">-&gt;</operator><name pos:start="283:16" pos:end="283:27">mb_threshold</name></name></expr>)</condition> <block pos:start="283:30" pos:end="291:5">{<block_content pos:start="285:9" pos:end="289:49">

        <expr_stmt pos:start="285:9" pos:end="287:66"><expr pos:start="285:9" pos:end="287:65"><call pos:start="285:9" pos:end="287:65"><name pos:start="285:9" pos:end="285:14">av_log</name><argument_list pos:start="285:15" pos:end="287:65">(<argument pos:start="285:16" pos:end="285:20"><expr pos:start="285:16" pos:end="285:20"><name pos:start="285:16" pos:end="285:20">avctx</name></expr></argument>, <argument pos:start="285:23" pos:end="285:36"><expr pos:start="285:23" pos:end="285:36"><name pos:start="285:23" pos:end="285:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="285:39" pos:end="287:64"><expr pos:start="285:39" pos:end="287:64"><literal type="string" pos:start="285:39" pos:end="285:79">"The mb_threshold option is deprecated, "</literal>

               <literal type="string" pos:start="287:16" pos:end="287:64">"use the static-thresh private option instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:49"><expr pos:start="289:9" pos:end="289:48"><name pos:start="289:9" pos:end="289:26"><name pos:start="289:9" pos:end="289:11">ctx</name><operator pos:start="289:12" pos:end="289:13">-&gt;</operator><name pos:start="289:14" pos:end="289:26">static_thresh</name></name> <operator pos:start="289:28" pos:end="289:28">=</operator> <name pos:start="289:30" pos:end="289:48"><name pos:start="289:30" pos:end="289:34">avctx</name><operator pos:start="289:35" pos:end="289:36">-&gt;</operator><name pos:start="289:37" pos:end="289:48">mb_threshold</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <decl_stmt pos:start="293:5" pos:end="297:72"><decl pos:start="293:5" pos:end="297:71"><type pos:start="293:5" pos:end="296:0"><name pos:start="293:5" pos:end="296:0">FF_ENABLE_DEPRECATION_WARNINGS</name></type>

<cpp:endif pos:start="295:1" pos:end="295:6">#<cpp:directive pos:start="295:2" pos:end="295:6">endif</cpp:directive></cpp:endif>

    <name pos:start="297:5" pos:end="297:16">codecctl_int</name><argument_list pos:start="297:17" pos:end="297:71">(<argument pos:start="297:18" pos:end="297:22"><expr pos:start="297:18" pos:end="297:22"><name pos:start="297:18" pos:end="297:22">avctx</name></expr></argument>, <argument pos:start="297:25" pos:end="297:49"><expr pos:start="297:25" pos:end="297:49"><name pos:start="297:25" pos:end="297:49">VP8E_SET_STATIC_THRESHOLD</name></expr></argument>,  <argument pos:start="297:53" pos:end="297:70"><expr pos:start="297:53" pos:end="297:70"><name pos:start="297:53" pos:end="297:70"><name pos:start="297:53" pos:end="297:55">ctx</name><operator pos:start="297:56" pos:end="297:57">-&gt;</operator><name pos:start="297:58" pos:end="297:70">static_thresh</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:62"><expr pos:start="299:5" pos:end="299:61"><call pos:start="299:5" pos:end="299:61"><name pos:start="299:5" pos:end="299:16">codecctl_int</name><argument_list pos:start="299:17" pos:end="299:61">(<argument pos:start="299:18" pos:end="299:22"><expr pos:start="299:18" pos:end="299:22"><name pos:start="299:18" pos:end="299:22">avctx</name></expr></argument>, <argument pos:start="299:25" pos:end="299:41"><expr pos:start="299:25" pos:end="299:41"><name pos:start="299:25" pos:end="299:41">VP8E_SET_CQ_LEVEL</name></expr></argument>,          <argument pos:start="299:53" pos:end="299:60"><expr pos:start="299:53" pos:end="299:60"><name pos:start="299:53" pos:end="299:60"><name pos:start="299:53" pos:end="299:55">ctx</name><operator pos:start="299:56" pos:end="299:57">-&gt;</operator><name pos:start="299:58" pos:end="299:60">crf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="303:5" pos:end="303:86">//provide dummy value to initialize wrapper, values will be updated each _encode()</comment>

    <expr_stmt pos:start="305:5" pos:end="307:69"><expr pos:start="305:5" pos:end="307:68"><call pos:start="305:5" pos:end="307:68"><name pos:start="305:5" pos:end="305:16">vpx_img_wrap</name><argument_list pos:start="305:17" pos:end="307:68">(<argument pos:start="305:18" pos:end="305:29"><expr pos:start="305:18" pos:end="305:29"><operator pos:start="305:18" pos:end="305:18">&amp;</operator><name pos:start="305:19" pos:end="305:29"><name pos:start="305:19" pos:end="305:21">ctx</name><operator pos:start="305:22" pos:end="305:23">-&gt;</operator><name pos:start="305:24" pos:end="305:29">rawimg</name></name></expr></argument>, <argument pos:start="305:32" pos:end="305:70"><expr pos:start="305:32" pos:end="305:70"><call pos:start="305:32" pos:end="305:70"><name pos:start="305:32" pos:end="305:54">ff_vpx_pixfmt_to_imgfmt</name><argument_list pos:start="305:55" pos:end="305:70">(<argument pos:start="305:56" pos:end="305:69"><expr pos:start="305:56" pos:end="305:69"><name pos:start="305:56" pos:end="305:69"><name pos:start="305:56" pos:end="305:60">avctx</name><operator pos:start="305:61" pos:end="305:62">-&gt;</operator><name pos:start="305:63" pos:end="305:69">pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>,

                 <argument pos:start="307:18" pos:end="307:29"><expr pos:start="307:18" pos:end="307:29"><name pos:start="307:18" pos:end="307:29"><name pos:start="307:18" pos:end="307:22">avctx</name><operator pos:start="307:23" pos:end="307:24">-&gt;</operator><name pos:start="307:25" pos:end="307:29">width</name></name></expr></argument>, <argument pos:start="307:32" pos:end="307:44"><expr pos:start="307:32" pos:end="307:44"><name pos:start="307:32" pos:end="307:44"><name pos:start="307:32" pos:end="307:36">avctx</name><operator pos:start="307:37" pos:end="307:38">-&gt;</operator><name pos:start="307:39" pos:end="307:44">height</name></name></expr></argument>, <argument pos:start="307:47" pos:end="307:47"><expr pos:start="307:47" pos:end="307:47"><literal type="number" pos:start="307:47" pos:end="307:47">1</literal></expr></argument>, <argument pos:start="307:50" pos:end="307:67"><expr pos:start="307:50" pos:end="307:67"><operator pos:start="307:50" pos:end="307:50">(</operator><name pos:start="307:51" pos:end="307:58">unsigned</name> <name pos:start="307:60" pos:end="307:63">char</name> <operator pos:start="307:65" pos:end="307:65">*</operator><operator pos:start="307:66" pos:end="307:66">)</operator><literal type="number" pos:start="307:67" pos:end="307:67">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="311:5" pos:end="311:42"><expr pos:start="311:5" pos:end="311:41"><name pos:start="311:5" pos:end="311:22"><name pos:start="311:5" pos:end="311:9">avctx</name><operator pos:start="311:10" pos:end="311:11">-&gt;</operator><name pos:start="311:12" pos:end="311:22">coded_frame</name></name> <operator pos:start="311:24" pos:end="311:24">=</operator> <call pos:start="311:26" pos:end="311:41"><name pos:start="311:26" pos:end="311:39">av_frame_alloc</name><argument_list pos:start="311:40" pos:end="311:41">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="313:5" pos:end="321:5"><if pos:start="313:5" pos:end="321:5">if <condition pos:start="313:8" pos:end="313:28">(<expr pos:start="313:9" pos:end="313:27"><operator pos:start="313:9" pos:end="313:9">!</operator><name pos:start="313:10" pos:end="313:27"><name pos:start="313:10" pos:end="313:14">avctx</name><operator pos:start="313:15" pos:end="313:16">-&gt;</operator><name pos:start="313:17" pos:end="313:27">coded_frame</name></name></expr>)</condition> <block pos:start="313:30" pos:end="321:5">{<block_content pos:start="315:9" pos:end="319:31">

        <expr_stmt pos:start="315:9" pos:end="315:70"><expr pos:start="315:9" pos:end="315:69"><call pos:start="315:9" pos:end="315:69"><name pos:start="315:9" pos:end="315:14">av_log</name><argument_list pos:start="315:15" pos:end="315:69">(<argument pos:start="315:16" pos:end="315:20"><expr pos:start="315:16" pos:end="315:20"><name pos:start="315:16" pos:end="315:20">avctx</name></expr></argument>, <argument pos:start="315:23" pos:end="315:34"><expr pos:start="315:23" pos:end="315:34"><name pos:start="315:23" pos:end="315:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="315:37" pos:end="315:68"><expr pos:start="315:37" pos:end="315:68"><literal type="string" pos:start="315:37" pos:end="315:68">"Error allocating coded frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="317:9" pos:end="317:24"><expr pos:start="317:9" pos:end="317:23"><call pos:start="317:9" pos:end="317:23"><name pos:start="317:9" pos:end="317:16">vp8_free</name><argument_list pos:start="317:17" pos:end="317:23">(<argument pos:start="317:18" pos:end="317:22"><expr pos:start="317:18" pos:end="317:22"><name pos:start="317:18" pos:end="317:22">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="319:9" pos:end="319:31">return <expr pos:start="319:16" pos:end="319:30"><call pos:start="319:16" pos:end="319:30"><name pos:start="319:16" pos:end="319:22">AVERROR</name><argument_list pos:start="319:23" pos:end="319:30">(<argument pos:start="319:24" pos:end="319:29"><expr pos:start="319:24" pos:end="319:29"><name pos:start="319:24" pos:end="319:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="323:5" pos:end="323:13">return <expr pos:start="323:12" pos:end="323:12"><literal type="number" pos:start="323:12" pos:end="323:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
