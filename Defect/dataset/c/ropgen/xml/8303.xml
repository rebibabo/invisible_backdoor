<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8303.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">qcow2_make_empty</name><parameter_list pos:start="1:28" pos:end="1:49">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:44">BlockDriverState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:15">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">BDRVQcow2State</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:34">= <expr pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:34"><name pos:start="5:25" pos:end="5:26">bs</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:25">start_sector</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:19">sector_step</name> <init pos:start="9:21" pos:end="9:48">= <expr pos:start="9:23" pos:end="9:48"><name pos:start="9:23" pos:end="9:29">INT_MAX</name> <operator pos:start="9:31" pos:end="9:31">/</operator> <name pos:start="9:33" pos:end="9:48">BDRV_SECTOR_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">l1_clusters</name></decl>, <decl pos:start="11:22" pos:end="11:28"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:22" pos:end="11:24">ret</name> <init pos:start="11:26" pos:end="11:28">= <expr pos:start="11:28" pos:end="11:28"><literal type="number" pos:start="11:28" pos:end="11:28">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:79"><expr pos:start="15:5" pos:end="15:78"><name pos:start="15:5" pos:end="15:15">l1_clusters</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <call pos:start="15:19" pos:end="15:78"><name pos:start="15:19" pos:end="15:30">DIV_ROUND_UP</name><argument_list pos:start="15:31" pos:end="15:78">(<argument pos:start="15:32" pos:end="15:41"><expr pos:start="15:32" pos:end="15:41"><name pos:start="15:32" pos:end="15:41"><name pos:start="15:32" pos:end="15:32">s</name><operator pos:start="15:33" pos:end="15:34">-&gt;</operator><name pos:start="15:35" pos:end="15:41">l1_size</name></name></expr></argument>, <argument pos:start="15:44" pos:end="15:77"><expr pos:start="15:44" pos:end="15:77"><name pos:start="15:44" pos:end="15:58"><name pos:start="15:44" pos:end="15:44">s</name><operator pos:start="15:45" pos:end="15:46">-&gt;</operator><name pos:start="15:47" pos:end="15:58">cluster_size</name></name> <operator pos:start="15:60" pos:end="15:60">/</operator> <sizeof pos:start="15:62" pos:end="15:77">sizeof<argument_list pos:start="15:68" pos:end="15:77">(<argument pos:start="15:69" pos:end="15:76"><expr pos:start="15:69" pos:end="15:76"><name pos:start="15:69" pos:end="15:76">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="35:5"><if pos:start="19:5" pos:end="35:5">if <condition pos:start="19:8" pos:end="21:50">(<expr pos:start="19:9" pos:end="21:49"><name pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:23">qcow_version</name></name> <operator pos:start="19:25" pos:end="19:26">&gt;=</operator> <literal type="number" pos:start="19:28" pos:end="19:28">3</literal> <operator pos:start="19:30" pos:end="19:31">&amp;&amp;</operator> <operator pos:start="19:33" pos:end="19:33">!</operator><name pos:start="19:34" pos:end="19:45"><name pos:start="19:34" pos:end="19:34">s</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:45">snapshots</name></name> <operator pos:start="19:47" pos:end="19:48">&amp;&amp;</operator>

        <literal type="number" pos:start="21:9" pos:end="21:11">3</literal> <operator pos:start="21:11" pos:end="21:11">+</operator> <name pos:start="21:13" pos:end="21:23">l1_clusters</name> <operator pos:start="21:25" pos:end="21:26">&lt;=</operator> <name pos:start="21:28" pos:end="21:49"><name pos:start="21:28" pos:end="21:28">s</name><operator pos:start="21:29" pos:end="21:30">-&gt;</operator><name pos:start="21:31" pos:end="21:49">refcount_block_size</name></name></expr>)</condition> <block pos:start="21:52" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:41">

        <comment type="block" pos:start="23:9" pos:end="31:59">/* The following function only works for qcow2 v3 images (it requires

         * the dirty flag) and only as long as there are no snapshots (because

         * it completely empties the image). Furthermore, the L1 table and three

         * additional clusters (image header, refcount table, one refcount

         * block) have to fit inside one refcount block. */</comment>

        <return pos:start="33:9" pos:end="33:41">return <expr pos:start="33:16" pos:end="33:40"><call pos:start="33:16" pos:end="33:40"><name pos:start="33:16" pos:end="33:36">make_completely_empty</name><argument_list pos:start="33:37" pos:end="33:40">(<argument pos:start="33:38" pos:end="33:39"><expr pos:start="33:38" pos:end="33:39"><name pos:start="33:38" pos:end="33:39">bs</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="41:32">/* This fallback code simply discards every active cluster; this is slow,

     * but works in all cases */</comment>

    <for pos:start="43:5" pos:end="73:5">for <control pos:start="43:9" pos:end="45:37">(<init pos:start="43:10" pos:end="43:26"><expr pos:start="43:10" pos:end="43:25"><name pos:start="43:10" pos:end="43:21">start_sector</name> <operator pos:start="43:23" pos:end="43:23">=</operator> <literal type="number" pos:start="43:25" pos:end="43:25">0</literal></expr>;</init> <condition pos:start="43:28" pos:end="43:60"><expr pos:start="43:28" pos:end="43:59"><name pos:start="43:28" pos:end="43:39">start_sector</name> <operator pos:start="43:41" pos:end="43:41">&lt;</operator> <name pos:start="43:43" pos:end="43:59"><name pos:start="43:43" pos:end="43:44">bs</name><operator pos:start="43:45" pos:end="43:46">-&gt;</operator><name pos:start="43:47" pos:end="43:59">total_sectors</name></name></expr>;</condition>

         <incr pos:start="45:10" pos:end="45:36"><expr pos:start="45:10" pos:end="45:36"><name pos:start="45:10" pos:end="45:21">start_sector</name> <operator pos:start="45:23" pos:end="45:24">+=</operator> <name pos:start="45:26" pos:end="45:36">sector_step</name></expr></incr>)</control>

    <block pos:start="47:5" pos:end="73:5">{<block_content pos:start="59:9" pos:end="71:9">

        <comment type="block" pos:start="49:9" pos:end="57:34">/* As this function is generally used after committing an external

         * snapshot, QCOW2_DISCARD_SNAPSHOT seems appropriate. Also, the

         * default action for this kind of discard is to pass the discard,

         * which will ideally result in an actually smaller image file, as

         * is probably desired. */</comment>

        <expr_stmt pos:start="59:9" pos:end="65:67"><expr pos:start="59:9" pos:end="65:66"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="65:66"><name pos:start="59:15" pos:end="59:36">qcow2_discard_clusters</name><argument_list pos:start="59:37" pos:end="65:66">(<argument pos:start="59:38" pos:end="59:39"><expr pos:start="59:38" pos:end="59:39"><name pos:start="59:38" pos:end="59:39">bs</name></expr></argument>, <argument pos:start="59:42" pos:end="59:72"><expr pos:start="59:42" pos:end="59:72"><name pos:start="59:42" pos:end="59:53">start_sector</name> <operator pos:start="59:55" pos:end="59:55">*</operator> <name pos:start="59:57" pos:end="59:72">BDRV_SECTOR_SIZE</name></expr></argument>,

                                     <argument pos:start="61:38" pos:end="63:74"><expr pos:start="61:38" pos:end="63:74"><call pos:start="61:38" pos:end="63:74"><name pos:start="61:38" pos:end="61:40">MIN</name><argument_list pos:start="61:41" pos:end="63:74">(<argument pos:start="61:42" pos:end="61:52"><expr pos:start="61:42" pos:end="61:52"><name pos:start="61:42" pos:end="61:52">sector_step</name></expr></argument>,

                                         <argument pos:start="63:42" pos:end="63:73"><expr pos:start="63:42" pos:end="63:73"><name pos:start="63:42" pos:end="63:58"><name pos:start="63:42" pos:end="63:43">bs</name><operator pos:start="63:44" pos:end="63:45">-&gt;</operator><name pos:start="63:46" pos:end="63:58">total_sectors</name></name> <operator pos:start="63:60" pos:end="63:60">-</operator> <name pos:start="63:62" pos:end="63:73">start_sector</name></expr></argument>)</argument_list></call></expr></argument>,

                                     <argument pos:start="65:38" pos:end="65:59"><expr pos:start="65:38" pos:end="65:59"><name pos:start="65:38" pos:end="65:59">QCOW2_DISCARD_SNAPSHOT</name></expr></argument>, <argument pos:start="65:62" pos:end="65:65"><expr pos:start="65:62" pos:end="65:65"><name pos:start="65:62" pos:end="65:65">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:20">(<expr pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">&lt;</operator> <literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr>)</condition> <block pos:start="67:22" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:18">

            <break pos:start="69:13" pos:end="69:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="77:5" pos:end="77:15">return <expr pos:start="77:12" pos:end="77:14"><name pos:start="77:12" pos:end="77:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
