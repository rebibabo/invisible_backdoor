<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3075.c" pos:tabs="8"><function pos:start="1:1" pos:end="187:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">ide_dma_cb</name><parameter_list pos:start="1:23" pos:end="1:45">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:35"><name pos:start="1:24" pos:end="1:27">void</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:35">opaque</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:44"><decl pos:start="1:38" pos:end="1:44"><type pos:start="1:38" pos:end="1:44"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:44">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="187:1">{<block_content pos:start="5:5" pos:end="185:37">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">IDEState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:15">s</name> <init pos:start="5:17" pos:end="5:24">= <expr pos:start="5:19" pos:end="5:24"><name pos:start="5:19" pos:end="5:24">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:22">sector_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:20">stay_active</name> <init pos:start="11:22" pos:end="11:28">= <expr pos:start="11:24" pos:end="11:28"><name pos:start="11:24" pos:end="11:28">false</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:26">(<expr pos:start="15:9" pos:end="15:25"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:14">==</operator> <operator pos:start="15:16" pos:end="15:16">-</operator><name pos:start="15:17" pos:end="15:25">ECANCELED</name></expr>)</condition> <block pos:start="15:28" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="43:5"><if pos:start="21:5" pos:end="43:5">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><name pos:start="21:9" pos:end="21:11">ret</name> <operator pos:start="21:13" pos:end="21:13">&lt;</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>)</condition> <block pos:start="21:18" pos:end="43:5">{<block_content pos:start="23:9" pos:end="41:9">

        <decl_stmt pos:start="23:9" pos:end="23:31"><decl pos:start="23:9" pos:end="23:30"><type pos:start="23:9" pos:end="23:11"><name pos:start="23:9" pos:end="23:11">int</name></type> <name pos:start="23:13" pos:end="23:14">op</name> <init pos:start="23:16" pos:end="23:30">= <expr pos:start="23:18" pos:end="23:30"><name pos:start="23:18" pos:end="23:30">IDE_RETRY_DMA</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="27:9" pos:end="33:33"><if pos:start="27:9" pos:end="29:33">if <condition pos:start="27:12" pos:end="27:39">(<expr pos:start="27:13" pos:end="27:38"><name pos:start="27:13" pos:end="27:22"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:22">dma_cmd</name></name> <operator pos:start="27:24" pos:end="27:25">==</operator> <name pos:start="27:27" pos:end="27:38">IDE_DMA_READ</name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:33"><block_content pos:start="29:13" pos:end="29:33">

            <expr_stmt pos:start="29:13" pos:end="29:33"><expr pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:14">op</name> <operator pos:start="29:16" pos:end="29:17">|=</operator> <name pos:start="29:19" pos:end="29:32">IDE_RETRY_READ</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="31:9" pos:end="33:33">else if <condition pos:start="31:17" pos:end="31:44">(<expr pos:start="31:18" pos:end="31:43"><name pos:start="31:18" pos:end="31:27"><name pos:start="31:18" pos:end="31:18">s</name><operator pos:start="31:19" pos:end="31:20">-&gt;</operator><name pos:start="31:21" pos:end="31:27">dma_cmd</name></name> <operator pos:start="31:29" pos:end="31:30">==</operator> <name pos:start="31:32" pos:end="31:43">IDE_DMA_TRIM</name></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:33"><block_content pos:start="33:13" pos:end="33:33">

            <expr_stmt pos:start="33:13" pos:end="33:33"><expr pos:start="33:13" pos:end="33:32"><name pos:start="33:13" pos:end="33:14">op</name> <operator pos:start="33:16" pos:end="33:17">|=</operator> <name pos:start="33:19" pos:end="33:32">IDE_RETRY_TRIM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:45">(<expr pos:start="37:13" pos:end="37:44"><call pos:start="37:13" pos:end="37:44"><name pos:start="37:13" pos:end="37:31">ide_handle_rw_error</name><argument_list pos:start="37:32" pos:end="37:44">(<argument pos:start="37:33" pos:end="37:33"><expr pos:start="37:33" pos:end="37:33"><name pos:start="37:33" pos:end="37:33">s</name></expr></argument>, <argument pos:start="37:36" pos:end="37:39"><expr pos:start="37:36" pos:end="37:39"><operator pos:start="37:36" pos:end="37:36">-</operator><name pos:start="37:37" pos:end="37:39">ret</name></expr></argument>, <argument pos:start="37:42" pos:end="37:43"><expr pos:start="37:42" pos:end="37:43"><name pos:start="37:42" pos:end="37:43">op</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:47" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:19">

            <return pos:start="39:13" pos:end="39:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:31"><expr pos:start="47:5" pos:end="47:30"><name pos:start="47:5" pos:end="47:5">n</name> <operator pos:start="47:7" pos:end="47:7">=</operator> <name pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:25">io_buffer_size</name></name> <operator pos:start="47:27" pos:end="47:28">&gt;&gt;</operator> <literal type="number" pos:start="47:30" pos:end="47:30">9</literal></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="61:5"><if pos:start="49:5" pos:end="61:5">if <condition pos:start="49:8" pos:end="49:23">(<expr pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:9">n</name> <operator pos:start="49:11" pos:end="49:11">&gt;</operator> <name pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:22">nsector</name></name></expr>)</condition> <block pos:start="49:25" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:27">

        <comment type="block" pos:start="51:9" pos:end="55:42">/* The PRDs were longer than needed for this request. Shorten them so

         * we don't get a negative remainder. The Active bit must remain set

         * after the request completes. */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:23"><expr pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:9">n</name> <operator pos:start="57:11" pos:end="57:11">=</operator> <name pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:22">nsector</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:27"><expr pos:start="59:9" pos:end="59:26"><name pos:start="59:9" pos:end="59:19">stay_active</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <name pos:start="59:23" pos:end="59:26">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:35"><expr pos:start="65:5" pos:end="65:34"><name pos:start="65:5" pos:end="65:14">sector_num</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:34"><name pos:start="65:18" pos:end="65:31">ide_get_sector</name><argument_list pos:start="65:32" pos:end="65:34">(<argument pos:start="65:33" pos:end="65:33"><expr pos:start="65:33" pos:end="65:33"><name pos:start="65:33" pos:end="65:33">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="79:5"><if pos:start="67:5" pos:end="79:5">if <condition pos:start="67:8" pos:end="67:14">(<expr pos:start="67:9" pos:end="67:13"><name pos:start="67:9" pos:end="67:9">n</name> <operator pos:start="67:11" pos:end="67:11">&gt;</operator> <literal type="number" pos:start="67:13" pos:end="67:13">0</literal></expr>)</condition> <block pos:start="67:16" pos:end="79:5">{<block_content pos:start="69:9" pos:end="77:24">

        <expr_stmt pos:start="69:9" pos:end="69:48"><expr pos:start="69:9" pos:end="69:47"><call pos:start="69:9" pos:end="69:47"><name pos:start="69:9" pos:end="69:14">assert</name><argument_list pos:start="69:15" pos:end="69:47">(<argument pos:start="69:16" pos:end="69:46"><expr pos:start="69:16" pos:end="69:46"><name pos:start="69:16" pos:end="69:32"><name pos:start="69:16" pos:end="69:16">s</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:32">io_buffer_size</name></name> <operator pos:start="69:34" pos:end="69:35">==</operator> <name pos:start="69:37" pos:end="69:46"><name pos:start="69:37" pos:end="69:37">s</name><operator pos:start="69:38" pos:end="69:39">-&gt;</operator><name pos:start="69:40" pos:end="69:41">sg</name><operator pos:start="69:42" pos:end="69:42">.</operator><name pos:start="69:43" pos:end="69:46">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:45"><expr pos:start="71:9" pos:end="71:44"><call pos:start="71:9" pos:end="71:44"><name pos:start="71:9" pos:end="71:22">dma_buf_commit</name><argument_list pos:start="71:23" pos:end="71:44">(<argument pos:start="71:24" pos:end="71:24"><expr pos:start="71:24" pos:end="71:24"><name pos:start="71:24" pos:end="71:24">s</name></expr></argument>, <argument pos:start="71:27" pos:end="71:43"><expr pos:start="71:27" pos:end="71:43"><name pos:start="71:27" pos:end="71:43"><name pos:start="71:27" pos:end="71:27">s</name><operator pos:start="71:28" pos:end="71:29">-&gt;</operator><name pos:start="71:30" pos:end="71:43">io_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:24"><expr pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:18">sector_num</name> <operator pos:start="73:20" pos:end="73:21">+=</operator> <name pos:start="73:23" pos:end="73:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:38"><expr pos:start="75:9" pos:end="75:37"><call pos:start="75:9" pos:end="75:37"><name pos:start="75:9" pos:end="75:22">ide_set_sector</name><argument_list pos:start="75:23" pos:end="75:37">(<argument pos:start="75:24" pos:end="75:24"><expr pos:start="75:24" pos:end="75:24"><name pos:start="75:24" pos:end="75:24">s</name></expr></argument>, <argument pos:start="75:27" pos:end="75:36"><expr pos:start="75:27" pos:end="75:36"><name pos:start="75:27" pos:end="75:36">sector_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:24"><expr pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:18">nsector</name></name> <operator pos:start="77:20" pos:end="77:21">-=</operator> <name pos:start="77:23" pos:end="77:23">n</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:27">/* end of transfer ? */</comment>

    <if_stmt pos:start="85:5" pos:end="93:5"><if pos:start="85:5" pos:end="93:5">if <condition pos:start="85:8" pos:end="85:24">(<expr pos:start="85:9" pos:end="85:23"><name pos:start="85:9" pos:end="85:18"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:18">nsector</name></name> <operator pos:start="85:20" pos:end="85:21">==</operator> <literal type="number" pos:start="85:23" pos:end="85:23">0</literal></expr>)</condition> <block pos:start="85:26" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:17">

        <expr_stmt pos:start="87:9" pos:end="87:43"><expr pos:start="87:9" pos:end="87:42"><name pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:9">s</name><operator pos:start="87:10" pos:end="87:11">-&gt;</operator><name pos:start="87:12" pos:end="87:17">status</name></name> <operator pos:start="87:19" pos:end="87:19">=</operator> <name pos:start="87:21" pos:end="87:30">READY_STAT</name> <operator pos:start="87:32" pos:end="87:32">|</operator> <name pos:start="87:34" pos:end="87:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:28"><expr pos:start="89:9" pos:end="89:27"><call pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:19">ide_set_irq</name><argument_list pos:start="89:20" pos:end="89:27">(<argument pos:start="89:21" pos:end="89:26"><expr pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:21">s</name><operator pos:start="89:22" pos:end="89:23">-&gt;</operator><name pos:start="89:24" pos:end="89:26">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="91:9" pos:end="91:17">goto <name pos:start="91:14" pos:end="91:16">eot</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:30">/* launch next transfer */</comment>

    <expr_stmt pos:start="99:5" pos:end="99:19"><expr pos:start="99:5" pos:end="99:18"><name pos:start="99:5" pos:end="99:5">n</name> <operator pos:start="99:7" pos:end="99:7">=</operator> <name pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:18">nsector</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:27"><expr pos:start="101:5" pos:end="101:26"><name pos:start="101:5" pos:end="101:22"><name pos:start="101:5" pos:end="101:5">s</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:22">io_buffer_index</name></name> <operator pos:start="101:24" pos:end="101:24">=</operator> <literal type="number" pos:start="101:26" pos:end="101:26">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:32"><expr pos:start="103:5" pos:end="103:31"><name pos:start="103:5" pos:end="103:21"><name pos:start="103:5" pos:end="103:5">s</name><operator pos:start="103:6" pos:end="103:7">-&gt;</operator><name pos:start="103:8" pos:end="103:21">io_buffer_size</name></name> <operator pos:start="103:23" pos:end="103:23">=</operator> <name pos:start="103:25" pos:end="103:25">n</name> <operator pos:start="103:27" pos:end="103:27">*</operator> <literal type="number" pos:start="103:29" pos:end="103:31">512</literal></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="122:0"><if pos:start="105:5" pos:end="122:0">if <condition pos:start="105:8" pos:end="105:77">(<expr pos:start="105:9" pos:end="105:76"><call pos:start="105:9" pos:end="105:70"><name pos:start="105:9" pos:end="105:37"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:14">bus</name><operator pos:start="105:15" pos:end="105:16">-&gt;</operator><name pos:start="105:17" pos:end="105:19">dma</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:24">ops</name><operator pos:start="105:25" pos:end="105:26">-&gt;</operator><name pos:start="105:27" pos:end="105:37">prepare_buf</name></name><argument_list pos:start="105:38" pos:end="105:70">(<argument pos:start="105:39" pos:end="105:49"><expr pos:start="105:39" pos:end="105:49"><name pos:start="105:39" pos:end="105:49"><name pos:start="105:39" pos:end="105:39">s</name><operator pos:start="105:40" pos:end="105:41">-&gt;</operator><name pos:start="105:42" pos:end="105:44">bus</name><operator pos:start="105:45" pos:end="105:46">-&gt;</operator><name pos:start="105:47" pos:end="105:49">dma</name></name></expr></argument>, <argument pos:start="105:52" pos:end="105:69"><expr pos:start="105:52" pos:end="105:69"><call pos:start="105:52" pos:end="105:69"><name pos:start="105:52" pos:end="105:66">ide_cmd_is_read</name><argument_list pos:start="105:67" pos:end="105:69">(<argument pos:start="105:68" pos:end="105:68"><expr pos:start="105:68" pos:end="105:68"><name pos:start="105:68" pos:end="105:68">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="105:72" pos:end="105:72">&lt;</operator> <literal type="number" pos:start="105:74" pos:end="105:76">512</literal></expr>)</condition> <block pos:start="105:79" pos:end="122:0">{<block_content pos:start="111:9" pos:end="115:17">

        <comment type="block" pos:start="107:9" pos:end="109:24">/* The PRDs were too short. Reset the Active bit, but don't raise an

         * interrupt. */</comment>

        <expr_stmt pos:start="111:9" pos:end="111:43"><expr pos:start="111:9" pos:end="111:42"><name pos:start="111:9" pos:end="111:17"><name pos:start="111:9" pos:end="111:9">s</name><operator pos:start="111:10" pos:end="111:11">-&gt;</operator><name pos:start="111:12" pos:end="111:17">status</name></name> <operator pos:start="111:19" pos:end="111:19">=</operator> <name pos:start="111:21" pos:end="111:30">READY_STAT</name> <operator pos:start="111:32" pos:end="111:32">|</operator> <name pos:start="111:34" pos:end="111:42">SEEK_STAT</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:29"><expr pos:start="113:9" pos:end="113:28"><call pos:start="113:9" pos:end="113:28"><name pos:start="113:9" pos:end="113:22">dma_buf_commit</name><argument_list pos:start="113:23" pos:end="113:28">(<argument pos:start="113:24" pos:end="113:24"><expr pos:start="113:24" pos:end="113:24"><name pos:start="113:24" pos:end="113:24">s</name></expr></argument>, <argument pos:start="113:27" pos:end="113:27"><expr pos:start="113:27" pos:end="113:27"><literal type="number" pos:start="113:27" pos:end="113:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="115:9" pos:end="115:17">goto <name pos:start="115:14" pos:end="115:16">eot</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="121:1" pos:end="121:16">#<cpp:directive pos:start="121:2" pos:end="121:6">ifdef</cpp:directive> <name pos:start="121:8" pos:end="121:16">DEBUG_AIO</name></cpp:ifdef>

    <expr_stmt pos:start="123:5" pos:end="128:0"><expr pos:start="123:5" pos:end="125:37"><call pos:start="123:5" pos:end="125:37"><name pos:start="123:5" pos:end="123:10">printf</name><argument_list pos:start="123:11" pos:end="125:37">(<argument pos:start="123:12" pos:end="123:66"><expr pos:start="123:12" pos:end="123:66"><literal type="string" pos:start="123:12" pos:end="123:37">"ide_dma_cb: sector_num=%"</literal> <name pos:start="123:39" pos:end="123:44">PRId64</name> <literal type="string" pos:start="123:46" pos:end="123:66">" n=%d, cmd_cmd=%d\n"</literal></expr></argument>,

           <argument pos:start="125:12" pos:end="125:21"><expr pos:start="125:12" pos:end="125:21"><name pos:start="125:12" pos:end="125:21">sector_num</name></expr></argument>, <argument pos:start="125:24" pos:end="125:24"><expr pos:start="125:24" pos:end="125:24"><name pos:start="125:24" pos:end="125:24">n</name></expr></argument>, <argument pos:start="125:27" pos:end="125:36"><expr pos:start="125:27" pos:end="125:36"><name pos:start="125:27" pos:end="125:36"><name pos:start="125:27" pos:end="125:27">s</name><operator pos:start="125:28" pos:end="125:29">-&gt;</operator><name pos:start="125:30" pos:end="125:36">dma_cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="127:1" pos:end="127:6">#<cpp:directive pos:start="127:2" pos:end="127:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="131:5" pos:end="139:5"><if pos:start="131:5" pos:end="139:5">if <condition pos:start="131:8" pos:end="133:45">(<expr pos:start="131:9" pos:end="133:44"><operator pos:start="131:9" pos:end="131:9">(</operator><name pos:start="131:10" pos:end="131:19"><name pos:start="131:10" pos:end="131:10">s</name><operator pos:start="131:11" pos:end="131:12">-&gt;</operator><name pos:start="131:13" pos:end="131:19">dma_cmd</name></name> <operator pos:start="131:21" pos:end="131:22">==</operator> <name pos:start="131:24" pos:end="131:35">IDE_DMA_READ</name> <operator pos:start="131:37" pos:end="131:38">||</operator> <name pos:start="131:40" pos:end="131:49"><name pos:start="131:40" pos:end="131:40">s</name><operator pos:start="131:41" pos:end="131:42">-&gt;</operator><name pos:start="131:43" pos:end="131:49">dma_cmd</name></name> <operator pos:start="131:51" pos:end="131:52">==</operator> <name pos:start="131:54" pos:end="131:66">IDE_DMA_WRITE</name><operator pos:start="131:67" pos:end="131:67">)</operator> <operator pos:start="131:69" pos:end="131:70">&amp;&amp;</operator>

        <operator pos:start="133:9" pos:end="133:9">!</operator><call pos:start="133:10" pos:end="133:44"><name pos:start="133:10" pos:end="133:26">ide_sect_range_ok</name><argument_list pos:start="133:27" pos:end="133:44">(<argument pos:start="133:28" pos:end="133:28"><expr pos:start="133:28" pos:end="133:28"><name pos:start="133:28" pos:end="133:28">s</name></expr></argument>, <argument pos:start="133:31" pos:end="133:40"><expr pos:start="133:31" pos:end="133:40"><name pos:start="133:31" pos:end="133:40">sector_num</name></expr></argument>, <argument pos:start="133:43" pos:end="133:43"><expr pos:start="133:43" pos:end="133:43"><name pos:start="133:43" pos:end="133:43">n</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="133:47" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:15">

        <expr_stmt pos:start="135:9" pos:end="135:25"><expr pos:start="135:9" pos:end="135:24"><call pos:start="135:9" pos:end="135:24"><name pos:start="135:9" pos:end="135:21">ide_dma_error</name><argument_list pos:start="135:22" pos:end="135:24">(<argument pos:start="135:23" pos:end="135:23"><expr pos:start="135:23" pos:end="135:23"><name pos:start="135:23" pos:end="135:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="137:9" pos:end="137:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="143:5" pos:end="171:5">switch <condition pos:start="143:12" pos:end="143:23">(<expr pos:start="143:13" pos:end="143:22"><name pos:start="143:13" pos:end="143:22"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:22">dma_cmd</name></name></expr>)</condition> <block pos:start="143:25" pos:end="171:5">{<block_content pos:start="145:5" pos:end="169:14">

    <case pos:start="145:5" pos:end="145:22">case <expr pos:start="145:10" pos:end="145:21"><name pos:start="145:10" pos:end="145:21">IDE_DMA_READ</name></expr>:</case>

        <expr_stmt pos:start="147:9" pos:end="149:57"><expr pos:start="147:9" pos:end="149:56"><name pos:start="147:9" pos:end="147:26"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:14">bus</name><operator pos:start="147:15" pos:end="147:16">-&gt;</operator><name pos:start="147:17" pos:end="147:19">dma</name><operator pos:start="147:20" pos:end="147:21">-&gt;</operator><name pos:start="147:22" pos:end="147:26">aiocb</name></name> <operator pos:start="147:28" pos:end="147:28">=</operator> <call pos:start="147:30" pos:end="149:56"><name pos:start="147:30" pos:end="147:41">dma_blk_read</name><argument_list pos:start="147:42" pos:end="149:56">(<argument pos:start="147:43" pos:end="147:48"><expr pos:start="147:43" pos:end="147:48"><name pos:start="147:43" pos:end="147:48"><name pos:start="147:43" pos:end="147:43">s</name><operator pos:start="147:44" pos:end="147:45">-&gt;</operator><name pos:start="147:46" pos:end="147:48">blk</name></name></expr></argument>, <argument pos:start="147:51" pos:end="147:56"><expr pos:start="147:51" pos:end="147:56"><operator pos:start="147:51" pos:end="147:51">&amp;</operator><name pos:start="147:52" pos:end="147:56"><name pos:start="147:52" pos:end="147:52">s</name><operator pos:start="147:53" pos:end="147:54">-&gt;</operator><name pos:start="147:55" pos:end="147:56">sg</name></name></expr></argument>, <argument pos:start="147:59" pos:end="147:68"><expr pos:start="147:59" pos:end="147:68"><name pos:start="147:59" pos:end="147:68">sector_num</name></expr></argument>,

                                          <argument pos:start="149:43" pos:end="149:52"><expr pos:start="149:43" pos:end="149:52"><name pos:start="149:43" pos:end="149:52">ide_dma_cb</name></expr></argument>, <argument pos:start="149:55" pos:end="149:55"><expr pos:start="149:55" pos:end="149:55"><name pos:start="149:55" pos:end="149:55">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>

    <case pos:start="153:5" pos:end="153:23">case <expr pos:start="153:10" pos:end="153:22"><name pos:start="153:10" pos:end="153:22">IDE_DMA_WRITE</name></expr>:</case>

        <expr_stmt pos:start="155:9" pos:end="157:58"><expr pos:start="155:9" pos:end="157:57"><name pos:start="155:9" pos:end="155:26"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:14">bus</name><operator pos:start="155:15" pos:end="155:16">-&gt;</operator><name pos:start="155:17" pos:end="155:19">dma</name><operator pos:start="155:20" pos:end="155:21">-&gt;</operator><name pos:start="155:22" pos:end="155:26">aiocb</name></name> <operator pos:start="155:28" pos:end="155:28">=</operator> <call pos:start="155:30" pos:end="157:57"><name pos:start="155:30" pos:end="155:42">dma_blk_write</name><argument_list pos:start="155:43" pos:end="157:57">(<argument pos:start="155:44" pos:end="155:49"><expr pos:start="155:44" pos:end="155:49"><name pos:start="155:44" pos:end="155:49"><name pos:start="155:44" pos:end="155:44">s</name><operator pos:start="155:45" pos:end="155:46">-&gt;</operator><name pos:start="155:47" pos:end="155:49">blk</name></name></expr></argument>, <argument pos:start="155:52" pos:end="155:57"><expr pos:start="155:52" pos:end="155:57"><operator pos:start="155:52" pos:end="155:52">&amp;</operator><name pos:start="155:53" pos:end="155:57"><name pos:start="155:53" pos:end="155:53">s</name><operator pos:start="155:54" pos:end="155:55">-&gt;</operator><name pos:start="155:56" pos:end="155:57">sg</name></name></expr></argument>, <argument pos:start="155:60" pos:end="155:69"><expr pos:start="155:60" pos:end="155:69"><name pos:start="155:60" pos:end="155:69">sector_num</name></expr></argument>,

                                           <argument pos:start="157:44" pos:end="157:53"><expr pos:start="157:44" pos:end="157:53"><name pos:start="157:44" pos:end="157:53">ide_dma_cb</name></expr></argument>, <argument pos:start="157:56" pos:end="157:56"><expr pos:start="157:56" pos:end="157:56"><name pos:start="157:56" pos:end="157:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="159:9" pos:end="159:14">break;</break>

    <case pos:start="161:5" pos:end="161:22">case <expr pos:start="161:10" pos:end="161:21"><name pos:start="161:10" pos:end="161:21">IDE_DMA_TRIM</name></expr>:</case>

        <expr_stmt pos:start="163:9" pos:end="167:65"><expr pos:start="163:9" pos:end="167:64"><name pos:start="163:9" pos:end="163:26"><name pos:start="163:9" pos:end="163:9">s</name><operator pos:start="163:10" pos:end="163:11">-&gt;</operator><name pos:start="163:12" pos:end="163:14">bus</name><operator pos:start="163:15" pos:end="163:16">-&gt;</operator><name pos:start="163:17" pos:end="163:19">dma</name><operator pos:start="163:20" pos:end="163:21">-&gt;</operator><name pos:start="163:22" pos:end="163:26">aiocb</name></name> <operator pos:start="163:28" pos:end="163:28">=</operator> <call pos:start="163:30" pos:end="167:64"><name pos:start="163:30" pos:end="163:39">dma_blk_io</name><argument_list pos:start="163:40" pos:end="167:64">(<argument pos:start="163:41" pos:end="163:46"><expr pos:start="163:41" pos:end="163:46"><name pos:start="163:41" pos:end="163:46"><name pos:start="163:41" pos:end="163:41">s</name><operator pos:start="163:42" pos:end="163:43">-&gt;</operator><name pos:start="163:44" pos:end="163:46">blk</name></name></expr></argument>, <argument pos:start="163:49" pos:end="163:54"><expr pos:start="163:49" pos:end="163:54"><operator pos:start="163:49" pos:end="163:49">&amp;</operator><name pos:start="163:50" pos:end="163:54"><name pos:start="163:50" pos:end="163:50">s</name><operator pos:start="163:51" pos:end="163:52">-&gt;</operator><name pos:start="163:53" pos:end="163:54">sg</name></name></expr></argument>, <argument pos:start="163:57" pos:end="163:66"><expr pos:start="163:57" pos:end="163:66"><name pos:start="163:57" pos:end="163:66">sector_num</name></expr></argument>,

                                        <argument pos:start="165:41" pos:end="165:54"><expr pos:start="165:41" pos:end="165:54"><name pos:start="165:41" pos:end="165:54">ide_issue_trim</name></expr></argument>, <argument pos:start="165:57" pos:end="165:66"><expr pos:start="165:57" pos:end="165:66"><name pos:start="165:57" pos:end="165:66">ide_dma_cb</name></expr></argument>, <argument pos:start="165:69" pos:end="165:69"><expr pos:start="165:69" pos:end="165:69"><name pos:start="165:69" pos:end="165:69">s</name></expr></argument>,

                                        <argument pos:start="167:41" pos:end="167:63"><expr pos:start="167:41" pos:end="167:63"><name pos:start="167:41" pos:end="167:63">DMA_DIRECTION_TO_DEVICE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="169:9" pos:end="169:14">break;</break>

    </block_content>}</block></switch>

    <return pos:start="173:5" pos:end="173:11">return;</return>



<label pos:start="177:1" pos:end="177:4"><name pos:start="177:1" pos:end="177:3">eot</name>:</label>

    <if_stmt pos:start="179:5" pos:end="183:5"><if pos:start="179:5" pos:end="183:5">if <condition pos:start="179:8" pos:end="179:66">(<expr pos:start="179:9" pos:end="179:65"><name pos:start="179:9" pos:end="179:18"><name pos:start="179:9" pos:end="179:9">s</name><operator pos:start="179:10" pos:end="179:11">-&gt;</operator><name pos:start="179:12" pos:end="179:18">dma_cmd</name></name> <operator pos:start="179:20" pos:end="179:21">==</operator> <name pos:start="179:23" pos:end="179:34">IDE_DMA_READ</name> <operator pos:start="179:36" pos:end="179:37">||</operator> <name pos:start="179:39" pos:end="179:48"><name pos:start="179:39" pos:end="179:39">s</name><operator pos:start="179:40" pos:end="179:41">-&gt;</operator><name pos:start="179:42" pos:end="179:48">dma_cmd</name></name> <operator pos:start="179:50" pos:end="179:51">==</operator> <name pos:start="179:53" pos:end="179:65">IDE_DMA_WRITE</name></expr>)</condition> <block pos:start="179:68" pos:end="183:5">{<block_content pos:start="181:9" pos:end="181:57">

        <expr_stmt pos:start="181:9" pos:end="181:57"><expr pos:start="181:9" pos:end="181:56"><call pos:start="181:9" pos:end="181:56"><name pos:start="181:9" pos:end="181:23">block_acct_done</name><argument_list pos:start="181:24" pos:end="181:56">(<argument pos:start="181:25" pos:end="181:45"><expr pos:start="181:25" pos:end="181:45"><call pos:start="181:25" pos:end="181:45"><name pos:start="181:25" pos:end="181:37">blk_get_stats</name><argument_list pos:start="181:38" pos:end="181:45">(<argument pos:start="181:39" pos:end="181:44"><expr pos:start="181:39" pos:end="181:44"><name pos:start="181:39" pos:end="181:44"><name pos:start="181:39" pos:end="181:39">s</name><operator pos:start="181:40" pos:end="181:41">-&gt;</operator><name pos:start="181:42" pos:end="181:44">blk</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="181:48" pos:end="181:55"><expr pos:start="181:48" pos:end="181:55"><operator pos:start="181:48" pos:end="181:48">&amp;</operator><name pos:start="181:49" pos:end="181:55"><name pos:start="181:49" pos:end="181:49">s</name><operator pos:start="181:50" pos:end="181:51">-&gt;</operator><name pos:start="181:52" pos:end="181:55">acct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:37"><expr pos:start="185:5" pos:end="185:36"><call pos:start="185:5" pos:end="185:36"><name pos:start="185:5" pos:end="185:20">ide_set_inactive</name><argument_list pos:start="185:21" pos:end="185:36">(<argument pos:start="185:22" pos:end="185:22"><expr pos:start="185:22" pos:end="185:22"><name pos:start="185:22" pos:end="185:22">s</name></expr></argument>, <argument pos:start="185:25" pos:end="185:35"><expr pos:start="185:25" pos:end="185:35"><name pos:start="185:25" pos:end="185:35">stay_active</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
