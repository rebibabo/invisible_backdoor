<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6234.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:36">set_allocation_state</name><parameter_list pos:start="1:37" pos:end="3:66">(<parameter pos:start="1:38" pos:end="1:58"><decl pos:start="1:38" pos:end="1:58"><type pos:start="1:38" pos:end="1:58"><name pos:start="1:38" pos:end="1:53">sPAPRDRConnector</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">drc</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:65"><decl pos:start="3:38" pos:end="3:65"><type pos:start="3:38" pos:end="3:65"><name pos:start="3:38" pos:end="3:59">sPAPRDRAllocationState</name></type> <name pos:start="3:61" pos:end="3:65">state</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="83:1">{<block_content pos:start="7:5" pos:end="81:28">

    <decl_stmt pos:start="7:5" pos:end="7:68"><decl pos:start="7:5" pos:end="7:67"><type pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:25">sPAPRDRConnectorClass</name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:31">drck</name> <init pos:start="7:33" pos:end="7:67">= <expr pos:start="7:35" pos:end="7:67"><call pos:start="7:35" pos:end="7:67"><name pos:start="7:35" pos:end="7:62">SPAPR_DR_CONNECTOR_GET_CLASS</name><argument_list pos:start="7:63" pos:end="7:67">(<argument pos:start="7:64" pos:end="7:66"><expr pos:start="7:64" pos:end="7:66"><name pos:start="7:64" pos:end="7:66">drc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:64"><expr pos:start="11:5" pos:end="11:63"><call pos:start="11:5" pos:end="11:63"><name pos:start="11:5" pos:end="11:40">trace_spapr_drc_set_allocation_state</name><argument_list pos:start="11:41" pos:end="11:63">(<argument pos:start="11:42" pos:end="11:55"><expr pos:start="11:42" pos:end="11:55"><call pos:start="11:42" pos:end="11:55"><name pos:start="11:42" pos:end="11:50">get_index</name><argument_list pos:start="11:51" pos:end="11:55">(<argument pos:start="11:52" pos:end="11:54"><expr pos:start="11:52" pos:end="11:54"><name pos:start="11:52" pos:end="11:54">drc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="11:58" pos:end="11:62"><expr pos:start="11:58" pos:end="11:62"><name pos:start="11:58" pos:end="11:62">state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="15:5" pos:end="55:5"><if pos:start="15:5" pos:end="55:5">if <condition pos:start="15:8" pos:end="15:50">(<expr pos:start="15:9" pos:end="15:49"><name pos:start="15:9" pos:end="15:13">state</name> <operator pos:start="15:15" pos:end="15:16">==</operator> <name pos:start="15:18" pos:end="15:49">SPAPR_DR_ALLOCATION_STATE_USABLE</name></expr>)</condition> <block pos:start="15:52" pos:end="55:5">{<block_content pos:start="27:9" pos:end="53:9">

        <comment type="block" pos:start="17:9" pos:end="25:11">/* if there's no resource/device associated with the DRC, there's

         * no way for us to put it in an allocation state consistent with

         * being 'USABLE'. PAPR 2.7, 13.5.3.4 documents that this should

         * result in an RTAS return code of -3 / "no such indicator"

         */</comment>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:22">(<expr pos:start="27:13" pos:end="27:21"><operator pos:start="27:13" pos:end="27:13">!</operator><name pos:start="27:14" pos:end="27:21"><name pos:start="27:14" pos:end="27:16">drc</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:21">dev</name></name></expr>)</condition> <block pos:start="27:24" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:46">

            <return pos:start="29:13" pos:end="29:46">return <expr pos:start="29:20" pos:end="29:45"><name pos:start="29:20" pos:end="29:45">RTAS_OUT_NO_SUCH_INDICATOR</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="53:9"><if pos:start="33:9" pos:end="53:9">if <condition pos:start="33:12" pos:end="33:62">(<expr pos:start="33:13" pos:end="33:61"><name pos:start="33:13" pos:end="33:33"><name pos:start="33:13" pos:end="33:15">drc</name><operator pos:start="33:16" pos:end="33:17">-&gt;</operator><name pos:start="33:18" pos:end="33:33">awaiting_release</name></name> <operator pos:start="33:35" pos:end="33:36">&amp;&amp;</operator> <name pos:start="33:38" pos:end="33:61"><name pos:start="33:38" pos:end="33:40">drc</name><operator pos:start="33:41" pos:end="33:42">-&gt;</operator><name pos:start="33:43" pos:end="33:61">awaiting_allocation</name></name></expr>)</condition> <block pos:start="33:64" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:46">

            <comment type="block" pos:start="35:13" pos:end="47:15">/* kernel is acknowledging a previous hotplug event

             * while we are already removing it.

             * it's safe to ignore awaiting_allocation here since we know the

             * situation is predicated on the guest either already having done

             * so (boot-time hotplug), or never being able to acquire in the

             * first place (hotplug followed by immediate unplug).

             */</comment>

            <expr_stmt pos:start="49:13" pos:end="49:54"><expr pos:start="49:13" pos:end="49:53"><name pos:start="49:13" pos:end="49:46"><name pos:start="49:13" pos:end="49:15">drc</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:46">awaiting_allocation_skippable</name></name> <operator pos:start="49:48" pos:end="49:48">=</operator> <name pos:start="49:50" pos:end="49:53">true</name></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:46">return <expr pos:start="51:20" pos:end="51:45"><name pos:start="51:20" pos:end="51:45">RTAS_OUT_NO_SUCH_INDICATOR</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="79:5"><if pos:start="59:5" pos:end="79:5">if <condition pos:start="59:8" pos:end="59:49">(<expr pos:start="59:9" pos:end="59:48"><name pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:11">drc</name><operator pos:start="59:12" pos:end="59:13">-&gt;</operator><name pos:start="59:14" pos:end="59:17">type</name></name> <operator pos:start="59:19" pos:end="59:20">!=</operator> <name pos:start="59:22" pos:end="59:48">SPAPR_DR_CONNECTOR_TYPE_PCI</name></expr>)</condition> <block pos:start="59:51" pos:end="79:5">{<block_content pos:start="61:9" pos:end="77:9">

        <expr_stmt pos:start="61:9" pos:end="61:38"><expr pos:start="61:9" pos:end="61:37"><name pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:11">drc</name><operator pos:start="61:12" pos:end="61:13">-&gt;</operator><name pos:start="61:14" pos:end="61:29">allocation_state</name></name> <operator pos:start="61:31" pos:end="61:31">=</operator> <name pos:start="61:33" pos:end="61:37">state</name></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="77:9"><if pos:start="63:9" pos:end="73:9">if <condition pos:start="63:12" pos:end="65:72">(<expr pos:start="63:13" pos:end="65:71"><name pos:start="63:13" pos:end="63:33"><name pos:start="63:13" pos:end="63:15">drc</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:33">awaiting_release</name></name> <operator pos:start="63:35" pos:end="63:36">&amp;&amp;</operator>

            <name pos:start="65:13" pos:end="65:33"><name pos:start="65:13" pos:end="65:15">drc</name><operator pos:start="65:16" pos:end="65:17">-&gt;</operator><name pos:start="65:18" pos:end="65:33">allocation_state</name></name> <operator pos:start="65:35" pos:end="65:36">==</operator> <name pos:start="65:38" pos:end="65:71">SPAPR_DR_ALLOCATION_STATE_UNUSABLE</name></expr>)</condition> <block pos:start="65:74" pos:end="73:9">{<block_content pos:start="67:13" pos:end="71:54">

            <expr_stmt pos:start="67:13" pos:end="67:76"><expr pos:start="67:13" pos:end="67:75"><call pos:start="67:13" pos:end="67:75"><name pos:start="67:13" pos:end="67:59">trace_spapr_drc_set_allocation_state_finalizing</name><argument_list pos:start="67:60" pos:end="67:75">(<argument pos:start="67:61" pos:end="67:74"><expr pos:start="67:61" pos:end="67:74"><call pos:start="67:61" pos:end="67:74"><name pos:start="67:61" pos:end="67:69">get_index</name><argument_list pos:start="67:70" pos:end="67:74">(<argument pos:start="67:71" pos:end="67:73"><expr pos:start="67:71" pos:end="67:73"><name pos:start="67:71" pos:end="67:73">drc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="71:54"><expr pos:start="69:13" pos:end="71:53"><call pos:start="69:13" pos:end="71:53"><name pos:start="69:13" pos:end="69:24"><name pos:start="69:13" pos:end="69:16">drck</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:24">detach</name></name><argument_list pos:start="69:25" pos:end="71:53">(<argument pos:start="69:26" pos:end="69:28"><expr pos:start="69:26" pos:end="69:28"><name pos:start="69:26" pos:end="69:28">drc</name></expr></argument>, <argument pos:start="69:31" pos:end="69:46"><expr pos:start="69:31" pos:end="69:46"><call pos:start="69:31" pos:end="69:46"><name pos:start="69:31" pos:end="69:36">DEVICE</name><argument_list pos:start="69:37" pos:end="69:46">(<argument pos:start="69:38" pos:end="69:45"><expr pos:start="69:38" pos:end="69:45"><name pos:start="69:38" pos:end="69:45"><name pos:start="69:38" pos:end="69:40">drc</name><operator pos:start="69:41" pos:end="69:42">-&gt;</operator><name pos:start="69:43" pos:end="69:45">dev</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="69:49" pos:end="69:62"><expr pos:start="69:49" pos:end="69:62"><name pos:start="69:49" pos:end="69:62"><name pos:start="69:49" pos:end="69:51">drc</name><operator pos:start="69:52" pos:end="69:53">-&gt;</operator><name pos:start="69:54" pos:end="69:62">detach_cb</name></name></expr></argument>,

                         <argument pos:start="71:26" pos:end="71:46"><expr pos:start="71:26" pos:end="71:46"><name pos:start="71:26" pos:end="71:46"><name pos:start="71:26" pos:end="71:28">drc</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:46">detach_cb_opaque</name></name></expr></argument>, <argument pos:start="71:49" pos:end="71:52"><expr pos:start="71:49" pos:end="71:52"><name pos:start="71:49" pos:end="71:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="73:11" pos:end="77:9">else if <condition pos:start="73:19" pos:end="73:77">(<expr pos:start="73:20" pos:end="73:76"><name pos:start="73:20" pos:end="73:40"><name pos:start="73:20" pos:end="73:22">drc</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:40">allocation_state</name></name> <operator pos:start="73:42" pos:end="73:43">==</operator> <name pos:start="73:45" pos:end="73:76">SPAPR_DR_ALLOCATION_STATE_USABLE</name></expr>)</condition> <block pos:start="73:79" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:45">

            <expr_stmt pos:start="75:13" pos:end="75:45"><expr pos:start="75:13" pos:end="75:44"><name pos:start="75:13" pos:end="75:36"><name pos:start="75:13" pos:end="75:15">drc</name><operator pos:start="75:16" pos:end="75:17">-&gt;</operator><name pos:start="75:18" pos:end="75:36">awaiting_allocation</name></name> <operator pos:start="75:38" pos:end="75:38">=</operator> <name pos:start="75:40" pos:end="75:44">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="81:5" pos:end="81:28">return <expr pos:start="81:12" pos:end="81:27"><name pos:start="81:12" pos:end="81:27">RTAS_OUT_SUCCESS</name></expr>;</return>

</block_content>}</block></function>
</unit>
