<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14974.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:18">ff_listen_bind</name><parameter_list pos:start="1:19" pos:end="3:50">(<parameter pos:start="1:20" pos:end="1:25"><decl pos:start="1:20" pos:end="1:25"><type pos:start="1:20" pos:end="1:25"><name pos:start="1:20" pos:end="1:22">int</name></type> <name pos:start="1:24" pos:end="1:25">fd</name></decl></parameter>, <parameter pos:start="1:28" pos:end="1:54"><decl pos:start="1:28" pos:end="1:54"><type pos:start="1:28" pos:end="1:54"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:48"><name pos:start="1:34" pos:end="1:39">struct</name> <name pos:start="1:41" pos:end="1:48">sockaddr</name></name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:54">addr</name></decl></parameter>,

                   <parameter pos:start="3:20" pos:end="3:36"><decl pos:start="3:20" pos:end="3:36"><type pos:start="3:20" pos:end="3:36"><name pos:start="3:20" pos:end="3:28">socklen_t</name></type> <name pos:start="3:30" pos:end="3:36">addrlen</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:49"><decl pos:start="3:39" pos:end="3:49"><type pos:start="3:39" pos:end="3:49"><name pos:start="3:39" pos:end="3:41">int</name></type> <name pos:start="3:43" pos:end="3:49">timeout</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="55:1">{<block_content pos:start="7:5" pos:end="53:15">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">reuse</name> <init pos:start="9:15" pos:end="9:17">= <expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:17">pollfd</name></name></type> <name pos:start="11:19" pos:end="11:20">lp</name> <init pos:start="11:22" pos:end="11:40">= <expr pos:start="11:24" pos:end="11:40"><block pos:start="11:24" pos:end="11:40">{ <expr pos:start="11:26" pos:end="11:27"><name pos:start="11:26" pos:end="11:27">fd</name></expr>, <expr pos:start="11:30" pos:end="11:35"><name pos:start="11:30" pos:end="11:35">POLLIN</name></expr>, <expr pos:start="11:38" pos:end="11:38"><literal type="number" pos:start="11:38" pos:end="11:38">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:68"><expr pos:start="13:5" pos:end="13:67"><call pos:start="13:5" pos:end="13:67"><name pos:start="13:5" pos:end="13:14">setsockopt</name><argument_list pos:start="13:15" pos:end="13:67">(<argument pos:start="13:16" pos:end="13:17"><expr pos:start="13:16" pos:end="13:17"><name pos:start="13:16" pos:end="13:17">fd</name></expr></argument>, <argument pos:start="13:20" pos:end="13:29"><expr pos:start="13:20" pos:end="13:29"><name pos:start="13:20" pos:end="13:29">SOL_SOCKET</name></expr></argument>, <argument pos:start="13:32" pos:end="13:43"><expr pos:start="13:32" pos:end="13:43"><name pos:start="13:32" pos:end="13:43">SO_REUSEADDR</name></expr></argument>, <argument pos:start="13:46" pos:end="13:51"><expr pos:start="13:46" pos:end="13:51"><operator pos:start="13:46" pos:end="13:46">&amp;</operator><name pos:start="13:47" pos:end="13:51">reuse</name></expr></argument>, <argument pos:start="13:54" pos:end="13:66"><expr pos:start="13:54" pos:end="13:66"><sizeof pos:start="13:54" pos:end="13:66">sizeof<argument_list pos:start="13:60" pos:end="13:66">(<argument pos:start="13:61" pos:end="13:65"><expr pos:start="13:61" pos:end="13:65"><name pos:start="13:61" pos:end="13:65">reuse</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:34"><expr pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:7">ret</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:33"><name pos:start="15:11" pos:end="15:14">bind</name><argument_list pos:start="15:15" pos:end="15:33">(<argument pos:start="15:16" pos:end="15:17"><expr pos:start="15:16" pos:end="15:17"><name pos:start="15:16" pos:end="15:17">fd</name></expr></argument>, <argument pos:start="15:20" pos:end="15:23"><expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">addr</name></expr></argument>, <argument pos:start="15:26" pos:end="15:32"><expr pos:start="15:26" pos:end="15:32"><name pos:start="15:26" pos:end="15:32">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="19:29"><if pos:start="17:5" pos:end="19:29">if <condition pos:start="17:8" pos:end="17:12">(<expr pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">ret</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:29"><block_content pos:start="19:9" pos:end="19:29">

        <return pos:start="19:9" pos:end="19:29">return <expr pos:start="19:16" pos:end="19:28"><call pos:start="19:16" pos:end="19:28"><name pos:start="19:16" pos:end="19:26">ff_neterrno</name><argument_list pos:start="19:27" pos:end="19:28">()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:24"><expr pos:start="23:5" pos:end="23:23"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:23"><name pos:start="23:11" pos:end="23:16">listen</name><argument_list pos:start="23:17" pos:end="23:23">(<argument pos:start="23:18" pos:end="23:19"><expr pos:start="23:18" pos:end="23:19"><name pos:start="23:18" pos:end="23:19">fd</name></expr></argument>, <argument pos:start="23:22" pos:end="23:22"><expr pos:start="23:22" pos:end="23:22"><literal type="number" pos:start="23:22" pos:end="23:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="27:29"><if pos:start="25:5" pos:end="27:29">if <condition pos:start="25:8" pos:end="25:12">(<expr pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">ret</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:29"><block_content pos:start="27:9" pos:end="27:29">

        <return pos:start="27:9" pos:end="27:29">return <expr pos:start="27:16" pos:end="27:28"><call pos:start="27:16" pos:end="27:28"><name pos:start="27:16" pos:end="27:26">ff_neterrno</name><argument_list pos:start="27:27" pos:end="27:28">()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:52"><expr pos:start="31:5" pos:end="31:51"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:51"><name pos:start="31:11" pos:end="31:14">poll</name><argument_list pos:start="31:15" pos:end="31:51">(<argument pos:start="31:16" pos:end="31:18"><expr pos:start="31:16" pos:end="31:18"><operator pos:start="31:16" pos:end="31:16">&amp;</operator><name pos:start="31:17" pos:end="31:18">lp</name></expr></argument>, <argument pos:start="31:21" pos:end="31:21"><expr pos:start="31:21" pos:end="31:21"><literal type="number" pos:start="31:21" pos:end="31:21">1</literal></expr></argument>, <argument pos:start="31:24" pos:end="31:50"><expr pos:start="31:24" pos:end="31:50"><ternary pos:start="31:24" pos:end="31:50"><condition pos:start="31:24" pos:end="31:37"><expr pos:start="31:24" pos:end="31:35"><name pos:start="31:24" pos:end="31:30">timeout</name> <operator pos:start="31:32" pos:end="31:33">&gt;=</operator> <literal type="number" pos:start="31:35" pos:end="31:35">0</literal></expr> ?</condition><then pos:start="31:39" pos:end="31:45"> <expr pos:start="31:39" pos:end="31:45"><name pos:start="31:39" pos:end="31:45">timeout</name></expr> </then><else pos:start="31:47" pos:end="31:50">: <expr pos:start="31:49" pos:end="31:50"><operator pos:start="31:49" pos:end="31:49">-</operator><literal type="number" pos:start="31:50" pos:end="31:50">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:34"><if pos:start="33:5" pos:end="35:34">if <condition pos:start="33:8" pos:end="33:17">(<expr pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:14">&lt;=</operator> <literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:34"><block_content pos:start="35:9" pos:end="35:34">

        <return pos:start="35:9" pos:end="35:34">return <expr pos:start="35:16" pos:end="35:33"><call pos:start="35:16" pos:end="35:33"><name pos:start="35:16" pos:end="35:22">AVERROR</name><argument_list pos:start="35:23" pos:end="35:33">(<argument pos:start="35:24" pos:end="35:32"><expr pos:start="35:24" pos:end="35:32"><name pos:start="35:24" pos:end="35:32">ETIMEDOUT</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:33"><expr pos:start="39:5" pos:end="39:32"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:32"><name pos:start="39:11" pos:end="39:16">accept</name><argument_list pos:start="39:17" pos:end="39:32">(<argument pos:start="39:18" pos:end="39:19"><expr pos:start="39:18" pos:end="39:19"><name pos:start="39:18" pos:end="39:19">fd</name></expr></argument>, <argument pos:start="39:22" pos:end="39:25"><expr pos:start="39:22" pos:end="39:25"><name pos:start="39:22" pos:end="39:25">NULL</name></expr></argument>, <argument pos:start="39:28" pos:end="39:31"><expr pos:start="39:28" pos:end="39:31"><name pos:start="39:28" pos:end="39:31">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="43:29"><if pos:start="41:5" pos:end="43:29">if <condition pos:start="41:8" pos:end="41:16">(<expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:11">ret</name> <operator pos:start="41:13" pos:end="41:13">&lt;</operator> <literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:29"><block_content pos:start="43:9" pos:end="43:29">

        <return pos:start="43:9" pos:end="43:29">return <expr pos:start="43:16" pos:end="43:28"><call pos:start="43:16" pos:end="43:28"><name pos:start="43:16" pos:end="43:26">ff_neterrno</name><argument_list pos:start="43:27" pos:end="43:28">()</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:20"><expr pos:start="47:5" pos:end="47:19"><call pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:15">closesocket</name><argument_list pos:start="47:16" pos:end="47:19">(<argument pos:start="47:17" pos:end="47:18"><expr pos:start="47:17" pos:end="47:18"><name pos:start="47:17" pos:end="47:18">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:31"><expr pos:start="51:5" pos:end="51:30"><call pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:22">ff_socket_nonblock</name><argument_list pos:start="51:23" pos:end="51:30">(<argument pos:start="51:24" pos:end="51:26"><expr pos:start="51:24" pos:end="51:26"><name pos:start="51:24" pos:end="51:26">ret</name></expr></argument>, <argument pos:start="51:29" pos:end="51:29"><expr pos:start="51:29" pos:end="51:29"><literal type="number" pos:start="51:29" pos:end="51:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="53:5" pos:end="53:15">return <expr pos:start="53:12" pos:end="53:14"><name pos:start="53:12" pos:end="53:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
