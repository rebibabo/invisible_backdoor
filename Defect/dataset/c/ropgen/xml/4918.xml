<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4918.c" pos:tabs="8"><function pos:start="1:1" pos:end="799:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">hls_slice_header</name><parameter_list pos:start="1:28" pos:end="1:43">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:39">HEVCContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="799:1">{<block_content pos:start="5:5" pos:end="797:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">GetBitContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">gb</name> <init pos:start="5:23" pos:end="5:38">= <expr pos:start="5:25" pos:end="5:38"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:38"><name pos:start="5:26" pos:end="5:26">s</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:34">HEVClc</name><operator pos:start="5:35" pos:end="5:36">-&gt;</operator><name pos:start="5:37" pos:end="5:38">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">SliceHeader</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">sh</name>   <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:30"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:30">sh</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>, <decl pos:start="9:15" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:17">ret</name></decl>;</decl_stmt>



    <comment type="line" pos:start="13:5" pos:end="13:23">// Coded parameters</comment>

    <expr_stmt pos:start="15:5" pos:end="15:48"><expr pos:start="15:5" pos:end="15:47"><name pos:start="15:5" pos:end="15:31"><name pos:start="15:5" pos:end="15:6">sh</name><operator pos:start="15:7" pos:end="15:8">-&gt;</operator><name pos:start="15:9" pos:end="15:31">first_slice_in_pic_flag</name></name> <operator pos:start="15:33" pos:end="15:33">=</operator> <call pos:start="15:35" pos:end="15:47"><name pos:start="15:35" pos:end="15:43">get_bits1</name><argument_list pos:start="15:44" pos:end="15:47">(<argument pos:start="15:45" pos:end="15:46"><expr pos:start="15:45" pos:end="15:46"><name pos:start="15:45" pos:end="15:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="27:5"><if pos:start="17:5" pos:end="27:5">if <condition pos:start="17:8" pos:end="17:64">(<expr pos:start="17:9" pos:end="17:63"><operator pos:start="17:9" pos:end="17:9">(</operator><call pos:start="17:10" pos:end="17:18"><name pos:start="17:10" pos:end="17:15">IS_IDR</name><argument_list pos:start="17:16" pos:end="17:18">(<argument pos:start="17:17" pos:end="17:17"><expr pos:start="17:17" pos:end="17:17"><name pos:start="17:17" pos:end="17:17">s</name></expr></argument>)</argument_list></call> <operator pos:start="17:20" pos:end="17:21">||</operator> <call pos:start="17:23" pos:end="17:31"><name pos:start="17:23" pos:end="17:28">IS_BLA</name><argument_list pos:start="17:29" pos:end="17:31">(<argument pos:start="17:30" pos:end="17:30"><expr pos:start="17:30" pos:end="17:30"><name pos:start="17:30" pos:end="17:30">s</name></expr></argument>)</argument_list></call><operator pos:start="17:32" pos:end="17:32">)</operator> <operator pos:start="17:34" pos:end="17:35">&amp;&amp;</operator> <name pos:start="17:37" pos:end="17:63"><name pos:start="17:37" pos:end="17:38">sh</name><operator pos:start="17:39" pos:end="17:40">-&gt;</operator><name pos:start="17:41" pos:end="17:63">first_slice_in_pic_flag</name></name></expr>)</condition> <block pos:start="17:66" pos:end="27:5">{<block_content pos:start="19:9" pos:end="25:34">

        <expr_stmt pos:start="19:9" pos:end="19:51"><expr pos:start="19:9" pos:end="19:50"><name pos:start="19:9" pos:end="19:21"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:21">seq_decode</name></name> <operator pos:start="19:23" pos:end="19:23">=</operator> <operator pos:start="19:25" pos:end="19:25">(</operator><name pos:start="19:26" pos:end="19:38"><name pos:start="19:26" pos:end="19:26">s</name><operator pos:start="19:27" pos:end="19:28">-&gt;</operator><name pos:start="19:29" pos:end="19:38">seq_decode</name></name> <operator pos:start="19:40" pos:end="19:40">+</operator> <literal type="number" pos:start="19:42" pos:end="19:42">1</literal><operator pos:start="19:43" pos:end="19:43">)</operator> <operator pos:start="19:45" pos:end="19:45">&amp;</operator> <literal type="number" pos:start="19:47" pos:end="19:50">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:32"><expr pos:start="21:9" pos:end="21:31"><name pos:start="21:9" pos:end="21:17"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:17">max_ra</name></name>     <operator pos:start="21:23" pos:end="21:23">=</operator> <name pos:start="21:25" pos:end="21:31">INT_MAX</name></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="25:34"><if pos:start="23:9" pos:end="25:34">if <condition pos:start="23:12" pos:end="23:22">(<expr pos:start="23:13" pos:end="23:21"><call pos:start="23:13" pos:end="23:21"><name pos:start="23:13" pos:end="23:18">IS_IDR</name><argument_list pos:start="23:19" pos:end="23:21">(<argument pos:start="23:20" pos:end="23:20"><expr pos:start="23:20" pos:end="23:20"><name pos:start="23:20" pos:end="23:20">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:34"><block_content pos:start="25:13" pos:end="25:34">

            <expr_stmt pos:start="25:13" pos:end="25:34"><expr pos:start="25:13" pos:end="25:33"><call pos:start="25:13" pos:end="25:33"><name pos:start="25:13" pos:end="25:30">ff_hevc_clear_refs</name><argument_list pos:start="25:31" pos:end="25:33">(<argument pos:start="25:32" pos:end="25:32"><expr pos:start="25:32" pos:end="25:32"><name pos:start="25:32" pos:end="25:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><name pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:6">sh</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:36">no_output_of_prior_pics_flag</name></name> <operator pos:start="29:38" pos:end="29:38">=</operator> <literal type="number" pos:start="29:40" pos:end="29:40">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:57"><if pos:start="31:5" pos:end="33:57">if <condition pos:start="31:8" pos:end="31:19">(<expr pos:start="31:9" pos:end="31:18"><call pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:15">IS_IRAP</name><argument_list pos:start="31:16" pos:end="31:18">(<argument pos:start="31:17" pos:end="31:17"><expr pos:start="31:17" pos:end="31:17"><name pos:start="31:17" pos:end="31:17">s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:57"><block_content pos:start="33:9" pos:end="33:57">

        <expr_stmt pos:start="33:9" pos:end="33:57"><expr pos:start="33:9" pos:end="33:56"><name pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:10">sh</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:40">no_output_of_prior_pics_flag</name></name> <operator pos:start="33:42" pos:end="33:42">=</operator> <call pos:start="33:44" pos:end="33:56"><name pos:start="33:44" pos:end="33:52">get_bits1</name><argument_list pos:start="33:53" pos:end="33:56">(<argument pos:start="33:54" pos:end="33:55"><expr pos:start="33:54" pos:end="33:55"><name pos:start="33:54" pos:end="33:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:40"><expr pos:start="37:5" pos:end="37:39"><name pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:6">sh</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:14">pps_id</name></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <call pos:start="37:18" pos:end="37:39"><name pos:start="37:18" pos:end="37:35">get_ue_golomb_long</name><argument_list pos:start="37:36" pos:end="37:39">(<argument pos:start="37:37" pos:end="37:38"><expr pos:start="37:37" pos:end="37:38"><name pos:start="37:37" pos:end="37:38">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:64">(<expr pos:start="39:9" pos:end="39:63"><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:10">sh</name><operator pos:start="39:11" pos:end="39:12">-&gt;</operator><name pos:start="39:13" pos:end="39:18">pps_id</name></name> <operator pos:start="39:20" pos:end="39:21">&gt;=</operator> <name pos:start="39:23" pos:end="39:35">MAX_PPS_COUNT</name> <operator pos:start="39:37" pos:end="39:38">||</operator> <operator pos:start="39:40" pos:end="39:40">!</operator><name pos:start="39:41" pos:end="39:63"><name pos:start="39:41" pos:end="39:41">s</name><operator pos:start="39:42" pos:end="39:43">-&gt;</operator><name pos:start="39:44" pos:end="39:51">pps_list</name><index pos:start="39:52" pos:end="39:63">[<expr pos:start="39:53" pos:end="39:62"><name pos:start="39:53" pos:end="39:62"><name pos:start="39:53" pos:end="39:54">sh</name><operator pos:start="39:55" pos:end="39:56">-&gt;</operator><name pos:start="39:57" pos:end="39:62">pps_id</name></name></expr>]</index></name></expr>)</condition> <block pos:start="39:66" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:35">

        <expr_stmt pos:start="41:9" pos:end="41:80"><expr pos:start="41:9" pos:end="41:79"><call pos:start="41:9" pos:end="41:79"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:79">(<argument pos:start="41:16" pos:end="41:23"><expr pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:16">s</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:23">avctx</name></name></expr></argument>, <argument pos:start="41:26" pos:end="41:37"><expr pos:start="41:26" pos:end="41:37"><name pos:start="41:26" pos:end="41:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:40" pos:end="41:66"><expr pos:start="41:40" pos:end="41:66"><literal type="string" pos:start="41:40" pos:end="41:66">"PPS id out of range: %d\n"</literal></expr></argument>, <argument pos:start="41:69" pos:end="41:78"><expr pos:start="41:69" pos:end="41:78"><name pos:start="41:69" pos:end="41:78"><name pos:start="41:69" pos:end="41:70">sh</name><operator pos:start="41:71" pos:end="41:72">-&gt;</operator><name pos:start="41:73" pos:end="41:78">pps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:35">return <expr pos:start="43:16" pos:end="43:34"><name pos:start="43:16" pos:end="43:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="49:58">(<expr pos:start="47:9" pos:end="49:57"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:36"><name pos:start="47:10" pos:end="47:11">sh</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:36">first_slice_in_pic_flag</name></name> <operator pos:start="47:38" pos:end="47:39">&amp;&amp;</operator>

        <name pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:9">s</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:14">pps</name></name> <operator pos:start="49:16" pos:end="49:17">!=</operator> <operator pos:start="49:19" pos:end="49:19">(</operator><name pos:start="49:20" pos:end="49:26">HEVCPPS</name><operator pos:start="49:27" pos:end="49:27">*</operator><operator pos:start="49:28" pos:end="49:28">)</operator><name pos:start="49:29" pos:end="49:51"><name pos:start="49:29" pos:end="49:29">s</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:39">pps_list</name><index pos:start="49:40" pos:end="49:51">[<expr pos:start="49:41" pos:end="49:50"><name pos:start="49:41" pos:end="49:50"><name pos:start="49:41" pos:end="49:42">sh</name><operator pos:start="49:43" pos:end="49:44">-&gt;</operator><name pos:start="49:45" pos:end="49:50">pps_id</name></name></expr>]</index></name><operator pos:start="49:52" pos:end="49:53">-&gt;</operator><name pos:start="49:54" pos:end="49:57">data</name></expr>)</condition> <block pos:start="49:60" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:35">

        <expr_stmt pos:start="51:9" pos:end="51:72"><expr pos:start="51:9" pos:end="51:71"><call pos:start="51:9" pos:end="51:71"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="51:71">(<argument pos:start="51:16" pos:end="51:23"><expr pos:start="51:16" pos:end="51:23"><name pos:start="51:16" pos:end="51:23"><name pos:start="51:16" pos:end="51:16">s</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:23">avctx</name></name></expr></argument>, <argument pos:start="51:26" pos:end="51:37"><expr pos:start="51:26" pos:end="51:37"><name pos:start="51:26" pos:end="51:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:40" pos:end="51:70"><expr pos:start="51:40" pos:end="51:70"><literal type="string" pos:start="51:40" pos:end="51:70">"PPS changed between slices.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:35">return <expr pos:start="53:16" pos:end="53:34"><name pos:start="53:16" pos:end="53:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:53"><expr pos:start="57:5" pos:end="57:52"><name pos:start="57:5" pos:end="57:10"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:10">pps</name></name> <operator pos:start="57:12" pos:end="57:12">=</operator> <operator pos:start="57:14" pos:end="57:14">(</operator><name pos:start="57:15" pos:end="57:21">HEVCPPS</name><operator pos:start="57:22" pos:end="57:22">*</operator><operator pos:start="57:23" pos:end="57:23">)</operator><name pos:start="57:24" pos:end="57:46"><name pos:start="57:24" pos:end="57:24">s</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:34">pps_list</name><index pos:start="57:35" pos:end="57:46">[<expr pos:start="57:36" pos:end="57:45"><name pos:start="57:36" pos:end="57:45"><name pos:start="57:36" pos:end="57:37">sh</name><operator pos:start="57:38" pos:end="57:39">-&gt;</operator><name pos:start="57:40" pos:end="57:45">pps_id</name></name></expr>]</index></name><operator pos:start="57:47" pos:end="57:48">-&gt;</operator><name pos:start="57:49" pos:end="57:52">data</name></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="61:45"><if pos:start="59:5" pos:end="61:45">if <condition pos:start="59:8" pos:end="59:60">(<expr pos:start="59:9" pos:end="59:59"><name pos:start="59:9" pos:end="59:24"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:24">nal_unit_type</name></name> <operator pos:start="59:26" pos:end="59:27">==</operator> <name pos:start="59:29" pos:end="59:39">NAL_CRA_NUT</name> <operator pos:start="59:41" pos:end="59:42">&amp;&amp;</operator> <name pos:start="59:44" pos:end="59:54"><name pos:start="59:44" pos:end="59:44">s</name><operator pos:start="59:45" pos:end="59:46">-&gt;</operator><name pos:start="59:47" pos:end="59:54">last_eos</name></name> <operator pos:start="59:56" pos:end="59:57">==</operator> <literal type="number" pos:start="59:59" pos:end="59:59">1</literal></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:45"><block_content pos:start="61:9" pos:end="61:45">

        <expr_stmt pos:start="61:9" pos:end="61:45"><expr pos:start="61:9" pos:end="61:44"><name pos:start="61:9" pos:end="61:40"><name pos:start="61:9" pos:end="61:10">sh</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:40">no_output_of_prior_pics_flag</name></name> <operator pos:start="61:42" pos:end="61:42">=</operator> <literal type="number" pos:start="61:44" pos:end="61:44">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="97:5"><if pos:start="65:5" pos:end="97:5">if <condition pos:start="65:8" pos:end="65:62">(<expr pos:start="65:9" pos:end="65:61"><name pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:14">sps</name></name> <operator pos:start="65:16" pos:end="65:17">!=</operator> <operator pos:start="65:19" pos:end="65:19">(</operator><name pos:start="65:20" pos:end="65:26">HEVCSPS</name><operator pos:start="65:27" pos:end="65:27">*</operator><operator pos:start="65:28" pos:end="65:28">)</operator><name pos:start="65:29" pos:end="65:55"><name pos:start="65:29" pos:end="65:29">s</name><operator pos:start="65:30" pos:end="65:31">-&gt;</operator><name pos:start="65:32" pos:end="65:39">sps_list</name><index pos:start="65:40" pos:end="65:55">[<expr pos:start="65:41" pos:end="65:54"><name pos:start="65:41" pos:end="65:54"><name pos:start="65:41" pos:end="65:41">s</name><operator pos:start="65:42" pos:end="65:43">-&gt;</operator><name pos:start="65:44" pos:end="65:46">pps</name><operator pos:start="65:47" pos:end="65:48">-&gt;</operator><name pos:start="65:49" pos:end="65:54">sps_id</name></name></expr>]</index></name><operator pos:start="65:56" pos:end="65:57">-&gt;</operator><name pos:start="65:58" pos:end="65:61">data</name></expr>)</condition> <block pos:start="65:64" pos:end="97:5">{<block_content pos:start="67:9" pos:end="95:32">

        <decl_stmt pos:start="67:9" pos:end="67:41"><decl pos:start="67:9" pos:end="67:40"><type pos:start="67:9" pos:end="67:22"><specifier pos:start="67:9" pos:end="67:13">const</specifier> <name pos:start="67:15" pos:end="67:21">HEVCSPS</name><modifier pos:start="67:22" pos:end="67:22">*</modifier></type> <name pos:start="67:24" pos:end="67:31">last_sps</name> <init pos:start="67:33" pos:end="67:40">= <expr pos:start="67:35" pos:end="67:40"><name pos:start="67:35" pos:end="67:40"><name pos:start="67:35" pos:end="67:35">s</name><operator pos:start="67:36" pos:end="67:37">-&gt;</operator><name pos:start="67:38" pos:end="67:40">sps</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:61"><expr pos:start="69:9" pos:end="69:60"><name pos:start="69:9" pos:end="69:14"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:14">sps</name></name> <operator pos:start="69:16" pos:end="69:16">=</operator> <operator pos:start="69:18" pos:end="69:18">(</operator><name pos:start="69:19" pos:end="69:25">HEVCSPS</name><operator pos:start="69:26" pos:end="69:26">*</operator><operator pos:start="69:27" pos:end="69:27">)</operator><name pos:start="69:28" pos:end="69:54"><name pos:start="69:28" pos:end="69:28">s</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:38">sps_list</name><index pos:start="69:39" pos:end="69:54">[<expr pos:start="69:40" pos:end="69:53"><name pos:start="69:40" pos:end="69:53"><name pos:start="69:40" pos:end="69:40">s</name><operator pos:start="69:41" pos:end="69:42">-&gt;</operator><name pos:start="69:43" pos:end="69:45">pps</name><operator pos:start="69:46" pos:end="69:47">-&gt;</operator><name pos:start="69:48" pos:end="69:53">sps_id</name></name></expr>]</index></name><operator pos:start="69:55" pos:end="69:56">-&gt;</operator><name pos:start="69:57" pos:end="69:60">data</name></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="81:9"><if pos:start="71:9" pos:end="81:9">if <condition pos:start="71:12" pos:end="71:70">(<expr pos:start="71:13" pos:end="71:69"><name pos:start="71:13" pos:end="71:20">last_sps</name> <operator pos:start="71:22" pos:end="71:23">&amp;&amp;</operator> <call pos:start="71:25" pos:end="71:34"><name pos:start="71:25" pos:end="71:31">IS_IRAP</name><argument_list pos:start="71:32" pos:end="71:34">(<argument pos:start="71:33" pos:end="71:33"><expr pos:start="71:33" pos:end="71:33"><name pos:start="71:33" pos:end="71:33">s</name></expr></argument>)</argument_list></call> <operator pos:start="71:36" pos:end="71:37">&amp;&amp;</operator> <name pos:start="71:39" pos:end="71:54"><name pos:start="71:39" pos:end="71:39">s</name><operator pos:start="71:40" pos:end="71:41">-&gt;</operator><name pos:start="71:42" pos:end="71:54">nal_unit_type</name></name> <operator pos:start="71:56" pos:end="71:57">!=</operator> <name pos:start="71:59" pos:end="71:69">NAL_CRA_NUT</name></expr>)</condition> <block pos:start="71:72" pos:end="81:9">{<block_content pos:start="73:13" pos:end="79:53">

            <if_stmt pos:start="73:13" pos:end="79:53"><if pos:start="73:13" pos:end="79:53">if <condition pos:start="73:16" pos:end="77:93">(<expr pos:start="73:17" pos:end="77:92"><name pos:start="73:17" pos:end="73:29"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:22">sps</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:29">width</name></name> <operator pos:start="73:31" pos:end="73:32">!=</operator>  <name pos:start="73:35" pos:end="73:49"><name pos:start="73:35" pos:end="73:42">last_sps</name><operator pos:start="73:43" pos:end="73:44">-&gt;</operator><name pos:start="73:45" pos:end="73:49">width</name></name> <operator pos:start="73:51" pos:end="73:52">||</operator> <name pos:start="73:54" pos:end="73:67"><name pos:start="73:54" pos:end="73:54">s</name><operator pos:start="73:55" pos:end="73:56">-&gt;</operator><name pos:start="73:57" pos:end="73:59">sps</name><operator pos:start="73:60" pos:end="73:61">-&gt;</operator><name pos:start="73:62" pos:end="73:67">height</name></name> <operator pos:start="73:69" pos:end="73:70">!=</operator> <name pos:start="73:72" pos:end="73:87"><name pos:start="73:72" pos:end="73:79">last_sps</name><operator pos:start="73:80" pos:end="73:81">-&gt;</operator><name pos:start="73:82" pos:end="73:87">height</name></name> <operator pos:start="73:89" pos:end="73:90">||</operator>

                <name pos:start="75:17" pos:end="75:66"><name pos:start="75:17" pos:end="75:17">s</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:22">sps</name><operator pos:start="75:23" pos:end="75:24">-&gt;</operator><name pos:start="75:25" pos:end="75:38">temporal_layer</name><index pos:start="75:39" pos:end="75:66">[<expr pos:start="75:40" pos:end="75:65"><name pos:start="75:40" pos:end="75:61"><name pos:start="75:40" pos:end="75:40">s</name><operator pos:start="75:41" pos:end="75:42">-&gt;</operator><name pos:start="75:43" pos:end="75:45">sps</name><operator pos:start="75:46" pos:end="75:47">-&gt;</operator><name pos:start="75:48" pos:end="75:61">max_sub_layers</name></name> <operator pos:start="75:63" pos:end="75:63">-</operator> <literal type="number" pos:start="75:65" pos:end="75:65">1</literal></expr>]</index></name><operator pos:start="75:67" pos:end="75:67">.</operator><name pos:start="75:68" pos:end="75:88">max_dec_pic_buffering</name> <operator pos:start="75:90" pos:end="75:91">!=</operator>

                <name pos:start="77:17" pos:end="77:70"><name pos:start="77:17" pos:end="77:24">last_sps</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:40">temporal_layer</name><index pos:start="77:41" pos:end="77:70">[<expr pos:start="77:42" pos:end="77:69"><name pos:start="77:42" pos:end="77:65"><name pos:start="77:42" pos:end="77:49">last_sps</name><operator pos:start="77:50" pos:end="77:51">-&gt;</operator><name pos:start="77:52" pos:end="77:65">max_sub_layers</name></name> <operator pos:start="77:67" pos:end="77:67">-</operator> <literal type="number" pos:start="77:69" pos:end="77:69">1</literal></expr>]</index></name><operator pos:start="77:71" pos:end="77:71">.</operator><name pos:start="77:72" pos:end="77:92">max_dec_pic_buffering</name></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:53"><block_content pos:start="79:17" pos:end="79:53">

                <expr_stmt pos:start="79:17" pos:end="79:53"><expr pos:start="79:17" pos:end="79:52"><name pos:start="79:17" pos:end="79:48"><name pos:start="79:17" pos:end="79:18">sh</name><operator pos:start="79:19" pos:end="79:20">-&gt;</operator><name pos:start="79:21" pos:end="79:48">no_output_of_prior_pics_flag</name></name> <operator pos:start="79:50" pos:end="79:50">=</operator> <literal type="number" pos:start="79:52" pos:end="79:52">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:30"><expr pos:start="83:9" pos:end="83:29"><call pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:26">ff_hevc_clear_refs</name><argument_list pos:start="83:27" pos:end="83:29">(<argument pos:start="83:28" pos:end="83:28"><expr pos:start="83:28" pos:end="83:28"><name pos:start="83:28" pos:end="83:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:50"><expr pos:start="85:9" pos:end="85:49"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <call pos:start="85:15" pos:end="85:49"><name pos:start="85:15" pos:end="85:21">set_sps</name><argument_list pos:start="85:22" pos:end="85:49">(<argument pos:start="85:23" pos:end="85:23"><expr pos:start="85:23" pos:end="85:23"><name pos:start="85:23" pos:end="85:23">s</name></expr></argument>, <argument pos:start="85:26" pos:end="85:31"><expr pos:start="85:26" pos:end="85:31"><name pos:start="85:26" pos:end="85:31"><name pos:start="85:26" pos:end="85:26">s</name><operator pos:start="85:27" pos:end="85:28">-&gt;</operator><name pos:start="85:29" pos:end="85:31">sps</name></name></expr></argument>, <argument pos:start="85:34" pos:end="85:48"><expr pos:start="85:34" pos:end="85:48"><name pos:start="85:34" pos:end="85:48">AV_PIX_FMT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="89:23"><if pos:start="87:9" pos:end="89:23">if <condition pos:start="87:12" pos:end="87:20">(<expr pos:start="87:13" pos:end="87:19"><name pos:start="87:13" pos:end="87:15">ret</name> <operator pos:start="87:17" pos:end="87:17">&lt;</operator> <literal type="number" pos:start="87:19" pos:end="87:19">0</literal></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:23"><block_content pos:start="89:13" pos:end="89:23">

            <return pos:start="89:13" pos:end="89:23">return <expr pos:start="89:20" pos:end="89:22"><name pos:start="89:20" pos:end="89:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:51"><expr pos:start="93:9" pos:end="93:50"><name pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:21">seq_decode</name></name> <operator pos:start="93:23" pos:end="93:23">=</operator> <operator pos:start="93:25" pos:end="93:25">(</operator><name pos:start="93:26" pos:end="93:38"><name pos:start="93:26" pos:end="93:26">s</name><operator pos:start="93:27" pos:end="93:28">-&gt;</operator><name pos:start="93:29" pos:end="93:38">seq_decode</name></name> <operator pos:start="93:40" pos:end="93:40">+</operator> <literal type="number" pos:start="93:42" pos:end="93:42">1</literal><operator pos:start="93:43" pos:end="93:43">)</operator> <operator pos:start="93:45" pos:end="93:45">&amp;</operator> <literal type="number" pos:start="93:47" pos:end="93:50">0xff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:32"><expr pos:start="95:9" pos:end="95:31"><name pos:start="95:9" pos:end="95:17"><name pos:start="95:9" pos:end="95:9">s</name><operator pos:start="95:10" pos:end="95:11">-&gt;</operator><name pos:start="95:12" pos:end="95:17">max_ra</name></name>     <operator pos:start="95:23" pos:end="95:23">=</operator> <name pos:start="95:25" pos:end="95:31">INT_MAX</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:41"><expr pos:start="101:5" pos:end="101:40"><name pos:start="101:5" pos:end="101:36"><name pos:start="101:5" pos:end="101:6">sh</name><operator pos:start="101:7" pos:end="101:8">-&gt;</operator><name pos:start="101:9" pos:end="101:36">dependent_slice_segment_flag</name></name> <operator pos:start="101:38" pos:end="101:38">=</operator> <literal type="number" pos:start="101:40" pos:end="101:40">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="151:5"><if pos:start="103:5" pos:end="143:5">if <condition pos:start="103:8" pos:end="103:37">(<expr pos:start="103:9" pos:end="103:36"><operator pos:start="103:9" pos:end="103:9">!</operator><name pos:start="103:10" pos:end="103:36"><name pos:start="103:10" pos:end="103:11">sh</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:36">first_slice_in_pic_flag</name></name></expr>)</condition> <block pos:start="103:39" pos:end="143:5">{<block_content pos:start="105:9" pos:end="141:9">

        <decl_stmt pos:start="105:9" pos:end="105:33"><decl pos:start="105:9" pos:end="105:32"><type pos:start="105:9" pos:end="105:11"><name pos:start="105:9" pos:end="105:11">int</name></type> <name pos:start="105:13" pos:end="105:32">slice_address_length</name></decl>;</decl_stmt>



        <if_stmt pos:start="109:9" pos:end="111:61"><if pos:start="109:9" pos:end="111:61">if <condition pos:start="109:12" pos:end="109:58">(<expr pos:start="109:13" pos:end="109:57"><name pos:start="109:13" pos:end="109:57"><name pos:start="109:13" pos:end="109:13">s</name><operator pos:start="109:14" pos:end="109:15">-&gt;</operator><name pos:start="109:16" pos:end="109:18">pps</name><operator pos:start="109:19" pos:end="109:20">-&gt;</operator><name pos:start="109:21" pos:end="109:57">dependent_slice_segments_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:61"><block_content pos:start="111:13" pos:end="111:61">

            <expr_stmt pos:start="111:13" pos:end="111:61"><expr pos:start="111:13" pos:end="111:60"><name pos:start="111:13" pos:end="111:44"><name pos:start="111:13" pos:end="111:14">sh</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:44">dependent_slice_segment_flag</name></name> <operator pos:start="111:46" pos:end="111:46">=</operator> <call pos:start="111:48" pos:end="111:60"><name pos:start="111:48" pos:end="111:56">get_bits1</name><argument_list pos:start="111:57" pos:end="111:60">(<argument pos:start="111:58" pos:end="111:59"><expr pos:start="111:58" pos:end="111:59"><name pos:start="111:58" pos:end="111:59">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="115:9" pos:end="117:64"><expr pos:start="115:9" pos:end="117:63"><name pos:start="115:9" pos:end="115:28">slice_address_length</name> <operator pos:start="115:30" pos:end="115:30">=</operator> <call pos:start="115:32" pos:end="117:63"><name pos:start="115:32" pos:end="115:43">av_ceil_log2</name><argument_list pos:start="115:44" pos:end="117:63">(<argument pos:start="115:45" pos:end="117:62"><expr pos:start="115:45" pos:end="117:62"><name pos:start="115:45" pos:end="115:61"><name pos:start="115:45" pos:end="115:45">s</name><operator pos:start="115:46" pos:end="115:47">-&gt;</operator><name pos:start="115:48" pos:end="115:50">sps</name><operator pos:start="115:51" pos:end="115:52">-&gt;</operator><name pos:start="115:53" pos:end="115:61">ctb_width</name></name> <operator pos:start="115:63" pos:end="115:63">*</operator>

                                            <name pos:start="117:45" pos:end="117:62"><name pos:start="117:45" pos:end="117:45">s</name><operator pos:start="117:46" pos:end="117:47">-&gt;</operator><name pos:start="117:48" pos:end="117:50">sps</name><operator pos:start="117:51" pos:end="117:52">-&gt;</operator><name pos:start="117:53" pos:end="117:62">ctb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:68"><expr pos:start="119:9" pos:end="119:67"><name pos:start="119:9" pos:end="119:30"><name pos:start="119:9" pos:end="119:10">sh</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:30">slice_segment_addr</name></name> <operator pos:start="119:32" pos:end="119:32">=</operator> <call pos:start="119:34" pos:end="119:67"><name pos:start="119:34" pos:end="119:41">get_bits</name><argument_list pos:start="119:42" pos:end="119:67">(<argument pos:start="119:43" pos:end="119:44"><expr pos:start="119:43" pos:end="119:44"><name pos:start="119:43" pos:end="119:44">gb</name></expr></argument>, <argument pos:start="119:47" pos:end="119:66"><expr pos:start="119:47" pos:end="119:66"><name pos:start="119:47" pos:end="119:66">slice_address_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="131:9"><if pos:start="121:9" pos:end="131:9">if <condition pos:start="121:12" pos:end="121:77">(<expr pos:start="121:13" pos:end="121:76"><name pos:start="121:13" pos:end="121:34"><name pos:start="121:13" pos:end="121:14">sh</name><operator pos:start="121:15" pos:end="121:16">-&gt;</operator><name pos:start="121:17" pos:end="121:34">slice_segment_addr</name></name> <operator pos:start="121:36" pos:end="121:37">&gt;=</operator> <name pos:start="121:39" pos:end="121:55"><name pos:start="121:39" pos:end="121:39">s</name><operator pos:start="121:40" pos:end="121:41">-&gt;</operator><name pos:start="121:42" pos:end="121:44">sps</name><operator pos:start="121:45" pos:end="121:46">-&gt;</operator><name pos:start="121:47" pos:end="121:55">ctb_width</name></name> <operator pos:start="121:57" pos:end="121:57">*</operator> <name pos:start="121:59" pos:end="121:76"><name pos:start="121:59" pos:end="121:59">s</name><operator pos:start="121:60" pos:end="121:61">-&gt;</operator><name pos:start="121:62" pos:end="121:64">sps</name><operator pos:start="121:65" pos:end="121:66">-&gt;</operator><name pos:start="121:67" pos:end="121:76">ctb_height</name></name></expr>)</condition> <block pos:start="121:79" pos:end="131:9">{<block_content pos:start="123:13" pos:end="129:39">

            <expr_stmt pos:start="123:13" pos:end="127:43"><expr pos:start="123:13" pos:end="127:42"><call pos:start="123:13" pos:end="127:42"><name pos:start="123:13" pos:end="123:18">av_log</name><argument_list pos:start="123:19" pos:end="127:42">(<argument pos:start="123:20" pos:end="123:27"><expr pos:start="123:20" pos:end="123:27"><name pos:start="123:20" pos:end="123:27"><name pos:start="123:20" pos:end="123:20">s</name><operator pos:start="123:21" pos:end="123:22">-&gt;</operator><name pos:start="123:23" pos:end="123:27">avctx</name></name></expr></argument>, <argument pos:start="123:30" pos:end="123:41"><expr pos:start="123:30" pos:end="123:41"><name pos:start="123:30" pos:end="123:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="125:20" pos:end="125:57"><expr pos:start="125:20" pos:end="125:57"><literal type="string" pos:start="125:20" pos:end="125:57">"Invalid slice segment address: %u.\n"</literal></expr></argument>,

                   <argument pos:start="127:20" pos:end="127:41"><expr pos:start="127:20" pos:end="127:41"><name pos:start="127:20" pos:end="127:41"><name pos:start="127:20" pos:end="127:21">sh</name><operator pos:start="127:22" pos:end="127:23">-&gt;</operator><name pos:start="127:24" pos:end="127:41">slice_segment_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="129:13" pos:end="129:39">return <expr pos:start="129:20" pos:end="129:38"><name pos:start="129:20" pos:end="129:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="135:9" pos:end="141:9"><if pos:start="135:9" pos:end="141:9">if <condition pos:start="135:12" pos:end="135:46">(<expr pos:start="135:13" pos:end="135:45"><operator pos:start="135:13" pos:end="135:13">!</operator><name pos:start="135:14" pos:end="135:45"><name pos:start="135:14" pos:end="135:15">sh</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:45">dependent_slice_segment_flag</name></name></expr>)</condition> <block pos:start="135:48" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:27">

            <expr_stmt pos:start="137:13" pos:end="137:52"><expr pos:start="137:13" pos:end="137:51"><name pos:start="137:13" pos:end="137:26"><name pos:start="137:13" pos:end="137:14">sh</name><operator pos:start="137:15" pos:end="137:16">-&gt;</operator><name pos:start="137:17" pos:end="137:26">slice_addr</name></name> <operator pos:start="137:28" pos:end="137:28">=</operator> <name pos:start="137:30" pos:end="137:51"><name pos:start="137:30" pos:end="137:31">sh</name><operator pos:start="137:32" pos:end="137:33">-&gt;</operator><name pos:start="137:34" pos:end="137:51">slice_segment_addr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:27"><expr pos:start="139:13" pos:end="139:26"><name pos:start="139:13" pos:end="139:24"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:24">slice_idx</name></name><operator pos:start="139:25" pos:end="139:26">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="143:7" pos:end="151:5">else <block pos:start="143:12" pos:end="151:5">{<block_content pos:start="145:9" pos:end="149:35">

        <expr_stmt pos:start="145:9" pos:end="145:52"><expr pos:start="145:9" pos:end="145:51"><name pos:start="145:9" pos:end="145:30"><name pos:start="145:9" pos:end="145:10">sh</name><operator pos:start="145:11" pos:end="145:12">-&gt;</operator><name pos:start="145:13" pos:end="145:30">slice_segment_addr</name></name> <operator pos:start="145:32" pos:end="145:32">=</operator> <name pos:start="145:34" pos:end="145:47"><name pos:start="145:34" pos:end="145:35">sh</name><operator pos:start="145:36" pos:end="145:37">-&gt;</operator><name pos:start="145:38" pos:end="145:47">slice_addr</name></name> <operator pos:start="145:49" pos:end="145:49">=</operator> <literal type="number" pos:start="145:51" pos:end="145:51">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:35"><expr pos:start="147:9" pos:end="147:34"><name pos:start="147:9" pos:end="147:20"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:20">slice_idx</name></name>           <operator pos:start="147:32" pos:end="147:32">=</operator> <literal type="number" pos:start="147:34" pos:end="147:34">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:35"><expr pos:start="149:9" pos:end="149:34"><name pos:start="149:9" pos:end="149:28"><name pos:start="149:9" pos:end="149:9">s</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:28">slice_initialized</name></name>   <operator pos:start="149:32" pos:end="149:32">=</operator> <literal type="number" pos:start="149:34" pos:end="149:34">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="155:5" pos:end="619:5"><if pos:start="155:5" pos:end="613:5">if <condition pos:start="155:8" pos:end="155:42">(<expr pos:start="155:9" pos:end="155:41"><operator pos:start="155:9" pos:end="155:9">!</operator><name pos:start="155:10" pos:end="155:41"><name pos:start="155:10" pos:end="155:11">sh</name><operator pos:start="155:12" pos:end="155:13">-&gt;</operator><name pos:start="155:14" pos:end="155:41">dependent_slice_segment_flag</name></name></expr>)</condition> <block pos:start="155:44" pos:end="613:5">{<block_content pos:start="157:9" pos:end="611:9">

        <expr_stmt pos:start="157:9" pos:end="157:33"><expr pos:start="157:9" pos:end="157:32"><name pos:start="157:9" pos:end="157:28"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:28">slice_initialized</name></name> <operator pos:start="157:30" pos:end="157:30">=</operator> <literal type="number" pos:start="157:32" pos:end="157:32">0</literal></expr>;</expr_stmt>



        <for pos:start="161:9" pos:end="163:29">for <control pos:start="161:13" pos:end="161:65">(<init pos:start="161:14" pos:end="161:19"><expr pos:start="161:14" pos:end="161:18"><name pos:start="161:14" pos:end="161:14">i</name> <operator pos:start="161:16" pos:end="161:16">=</operator> <literal type="number" pos:start="161:18" pos:end="161:18">0</literal></expr>;</init> <condition pos:start="161:21" pos:end="161:60"><expr pos:start="161:21" pos:end="161:59"><name pos:start="161:21" pos:end="161:21">i</name> <operator pos:start="161:23" pos:end="161:23">&lt;</operator> <name pos:start="161:25" pos:end="161:59"><name pos:start="161:25" pos:end="161:25">s</name><operator pos:start="161:26" pos:end="161:27">-&gt;</operator><name pos:start="161:28" pos:end="161:30">pps</name><operator pos:start="161:31" pos:end="161:32">-&gt;</operator><name pos:start="161:33" pos:end="161:59">num_extra_slice_header_bits</name></name></expr>;</condition> <incr pos:start="161:62" pos:end="161:64"><expr pos:start="161:62" pos:end="161:64"><name pos:start="161:62" pos:end="161:62">i</name><operator pos:start="161:63" pos:end="161:64">++</operator></expr></incr>)</control><block type="pseudo" pos:start="163:13" pos:end="163:29"><block_content pos:start="163:13" pos:end="163:29">

            <expr_stmt pos:start="163:13" pos:end="163:29"><expr pos:start="163:13" pos:end="163:28"><call pos:start="163:13" pos:end="163:28"><name pos:start="163:13" pos:end="163:21">skip_bits</name><argument_list pos:start="163:22" pos:end="163:28">(<argument pos:start="163:23" pos:end="163:24"><expr pos:start="163:23" pos:end="163:24"><name pos:start="163:23" pos:end="163:24">gb</name></expr></argument>, <argument pos:start="163:27" pos:end="163:27"><expr pos:start="163:27" pos:end="163:27"><literal type="number" pos:start="163:27" pos:end="163:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>  <comment type="line" pos:start="163:32" pos:end="163:68">// slice_reserved_undetermined_flag[]</comment>



        <expr_stmt pos:start="167:9" pos:end="167:48"><expr pos:start="167:9" pos:end="167:47"><name pos:start="167:9" pos:end="167:22"><name pos:start="167:9" pos:end="167:10">sh</name><operator pos:start="167:11" pos:end="167:12">-&gt;</operator><name pos:start="167:13" pos:end="167:22">slice_type</name></name> <operator pos:start="167:24" pos:end="167:24">=</operator> <call pos:start="167:26" pos:end="167:47"><name pos:start="167:26" pos:end="167:43">get_ue_golomb_long</name><argument_list pos:start="167:44" pos:end="167:47">(<argument pos:start="167:45" pos:end="167:46"><expr pos:start="167:45" pos:end="167:46"><name pos:start="167:45" pos:end="167:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="181:9"><if pos:start="169:9" pos:end="181:9">if <condition pos:start="169:12" pos:end="173:41">(<expr pos:start="169:13" pos:end="173:40"><operator pos:start="169:13" pos:end="169:13">!</operator><operator pos:start="169:14" pos:end="169:14">(</operator><name pos:start="169:15" pos:end="169:28"><name pos:start="169:15" pos:end="169:16">sh</name><operator pos:start="169:17" pos:end="169:18">-&gt;</operator><name pos:start="169:19" pos:end="169:28">slice_type</name></name> <operator pos:start="169:30" pos:end="169:31">==</operator> <name pos:start="169:33" pos:end="169:39">I_SLICE</name> <operator pos:start="169:41" pos:end="169:42">||</operator>

              <name pos:start="171:15" pos:end="171:28"><name pos:start="171:15" pos:end="171:16">sh</name><operator pos:start="171:17" pos:end="171:18">-&gt;</operator><name pos:start="171:19" pos:end="171:28">slice_type</name></name> <operator pos:start="171:30" pos:end="171:31">==</operator> <name pos:start="171:33" pos:end="171:39">P_SLICE</name> <operator pos:start="171:41" pos:end="171:42">||</operator>

              <name pos:start="173:15" pos:end="173:28"><name pos:start="173:15" pos:end="173:16">sh</name><operator pos:start="173:17" pos:end="173:18">-&gt;</operator><name pos:start="173:19" pos:end="173:28">slice_type</name></name> <operator pos:start="173:30" pos:end="173:31">==</operator> <name pos:start="173:33" pos:end="173:39">B_SLICE</name><operator pos:start="173:40" pos:end="173:40">)</operator></expr>)</condition> <block pos:start="173:43" pos:end="181:9">{<block_content pos:start="175:13" pos:end="179:39">

            <expr_stmt pos:start="175:13" pos:end="177:35"><expr pos:start="175:13" pos:end="177:34"><call pos:start="175:13" pos:end="177:34"><name pos:start="175:13" pos:end="175:18">av_log</name><argument_list pos:start="175:19" pos:end="177:34">(<argument pos:start="175:20" pos:end="175:27"><expr pos:start="175:20" pos:end="175:27"><name pos:start="175:20" pos:end="175:27"><name pos:start="175:20" pos:end="175:20">s</name><operator pos:start="175:21" pos:end="175:22">-&gt;</operator><name pos:start="175:23" pos:end="175:27">avctx</name></name></expr></argument>, <argument pos:start="175:30" pos:end="175:41"><expr pos:start="175:30" pos:end="175:41"><name pos:start="175:30" pos:end="175:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="175:44" pos:end="175:70"><expr pos:start="175:44" pos:end="175:70"><literal type="string" pos:start="175:44" pos:end="175:70">"Unknown slice type: %d.\n"</literal></expr></argument>,

                   <argument pos:start="177:20" pos:end="177:33"><expr pos:start="177:20" pos:end="177:33"><name pos:start="177:20" pos:end="177:33"><name pos:start="177:20" pos:end="177:21">sh</name><operator pos:start="177:22" pos:end="177:23">-&gt;</operator><name pos:start="177:24" pos:end="177:33">slice_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="179:13" pos:end="179:39">return <expr pos:start="179:20" pos:end="179:38"><name pos:start="179:20" pos:end="179:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="183:9" pos:end="189:9"><if pos:start="183:9" pos:end="189:9">if <condition pos:start="183:12" pos:end="183:52">(<expr pos:start="183:13" pos:end="183:51"><call pos:start="183:13" pos:end="183:22"><name pos:start="183:13" pos:end="183:19">IS_IRAP</name><argument_list pos:start="183:20" pos:end="183:22">(<argument pos:start="183:21" pos:end="183:21"><expr pos:start="183:21" pos:end="183:21"><name pos:start="183:21" pos:end="183:21">s</name></expr></argument>)</argument_list></call> <operator pos:start="183:24" pos:end="183:25">&amp;&amp;</operator> <name pos:start="183:27" pos:end="183:40"><name pos:start="183:27" pos:end="183:28">sh</name><operator pos:start="183:29" pos:end="183:30">-&gt;</operator><name pos:start="183:31" pos:end="183:40">slice_type</name></name> <operator pos:start="183:42" pos:end="183:43">!=</operator> <name pos:start="183:45" pos:end="183:51">I_SLICE</name></expr>)</condition> <block pos:start="183:54" pos:end="189:9">{<block_content pos:start="185:13" pos:end="187:39">

            <expr_stmt pos:start="185:13" pos:end="185:79"><expr pos:start="185:13" pos:end="185:78"><call pos:start="185:13" pos:end="185:78"><name pos:start="185:13" pos:end="185:18">av_log</name><argument_list pos:start="185:19" pos:end="185:78">(<argument pos:start="185:20" pos:end="185:27"><expr pos:start="185:20" pos:end="185:27"><name pos:start="185:20" pos:end="185:27"><name pos:start="185:20" pos:end="185:20">s</name><operator pos:start="185:21" pos:end="185:22">-&gt;</operator><name pos:start="185:23" pos:end="185:27">avctx</name></name></expr></argument>, <argument pos:start="185:30" pos:end="185:41"><expr pos:start="185:30" pos:end="185:41"><name pos:start="185:30" pos:end="185:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="185:44" pos:end="185:77"><expr pos:start="185:44" pos:end="185:77"><literal type="string" pos:start="185:44" pos:end="185:77">"Inter slices in an IRAP frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="187:13" pos:end="187:39">return <expr pos:start="187:20" pos:end="187:38"><name pos:start="187:20" pos:end="187:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="193:9" pos:end="193:69">// when flag is not present, picture is inferred to be output</comment>

        <expr_stmt pos:start="195:9" pos:end="195:32"><expr pos:start="195:9" pos:end="195:31"><name pos:start="195:9" pos:end="195:27"><name pos:start="195:9" pos:end="195:10">sh</name><operator pos:start="195:11" pos:end="195:12">-&gt;</operator><name pos:start="195:13" pos:end="195:27">pic_output_flag</name></name> <operator pos:start="195:29" pos:end="195:29">=</operator> <literal type="number" pos:start="195:31" pos:end="195:31">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="197:9" pos:end="199:48"><if pos:start="197:9" pos:end="199:48">if <condition pos:start="197:12" pos:end="197:45">(<expr pos:start="197:13" pos:end="197:44"><name pos:start="197:13" pos:end="197:44"><name pos:start="197:13" pos:end="197:13">s</name><operator pos:start="197:14" pos:end="197:15">-&gt;</operator><name pos:start="197:16" pos:end="197:18">pps</name><operator pos:start="197:19" pos:end="197:20">-&gt;</operator><name pos:start="197:21" pos:end="197:44">output_flag_present_flag</name></name></expr>)</condition><block type="pseudo" pos:start="199:13" pos:end="199:48"><block_content pos:start="199:13" pos:end="199:48">

            <expr_stmt pos:start="199:13" pos:end="199:48"><expr pos:start="199:13" pos:end="199:47"><name pos:start="199:13" pos:end="199:31"><name pos:start="199:13" pos:end="199:14">sh</name><operator pos:start="199:15" pos:end="199:16">-&gt;</operator><name pos:start="199:17" pos:end="199:31">pic_output_flag</name></name> <operator pos:start="199:33" pos:end="199:33">=</operator> <call pos:start="199:35" pos:end="199:47"><name pos:start="199:35" pos:end="199:43">get_bits1</name><argument_list pos:start="199:44" pos:end="199:47">(<argument pos:start="199:45" pos:end="199:46"><expr pos:start="199:45" pos:end="199:46"><name pos:start="199:45" pos:end="199:46">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="203:9" pos:end="205:50"><if pos:start="203:9" pos:end="205:50">if <condition pos:start="203:12" pos:end="203:47">(<expr pos:start="203:13" pos:end="203:46"><name pos:start="203:13" pos:end="203:46"><name pos:start="203:13" pos:end="203:13">s</name><operator pos:start="203:14" pos:end="203:15">-&gt;</operator><name pos:start="203:16" pos:end="203:18">sps</name><operator pos:start="203:19" pos:end="203:20">-&gt;</operator><name pos:start="203:21" pos:end="203:46">separate_colour_plane_flag</name></name></expr>)</condition><block type="pseudo" pos:start="205:13" pos:end="205:50"><block_content pos:start="205:13" pos:end="205:50">

            <expr_stmt pos:start="205:13" pos:end="205:50"><expr pos:start="205:13" pos:end="205:49"><name pos:start="205:13" pos:end="205:31"><name pos:start="205:13" pos:end="205:14">sh</name><operator pos:start="205:15" pos:end="205:16">-&gt;</operator><name pos:start="205:17" pos:end="205:31">colour_plane_id</name></name> <operator pos:start="205:33" pos:end="205:33">=</operator> <call pos:start="205:35" pos:end="205:49"><name pos:start="205:35" pos:end="205:42">get_bits</name><argument_list pos:start="205:43" pos:end="205:49">(<argument pos:start="205:44" pos:end="205:45"><expr pos:start="205:44" pos:end="205:45"><name pos:start="205:44" pos:end="205:45">gb</name></expr></argument>, <argument pos:start="205:48" pos:end="205:48"><expr pos:start="205:48" pos:end="205:48"><literal type="number" pos:start="205:48" pos:end="205:48">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="209:9" pos:end="309:9"><if pos:start="209:9" pos:end="303:9">if <condition pos:start="209:12" pos:end="209:23">(<expr pos:start="209:13" pos:end="209:22"><operator pos:start="209:13" pos:end="209:13">!</operator><call pos:start="209:14" pos:end="209:22"><name pos:start="209:14" pos:end="209:19">IS_IDR</name><argument_list pos:start="209:20" pos:end="209:22">(<argument pos:start="209:21" pos:end="209:21"><expr pos:start="209:21" pos:end="209:21"><name pos:start="209:21" pos:end="209:21">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="209:25" pos:end="303:9">{<block_content pos:start="211:13" pos:end="301:56">

            <decl_stmt pos:start="211:13" pos:end="211:20"><decl pos:start="211:13" pos:end="211:19"><type pos:start="211:13" pos:end="211:15"><name pos:start="211:13" pos:end="211:15">int</name></type> <name pos:start="211:17" pos:end="211:19">poc</name></decl>;</decl_stmt>



            <expr_stmt pos:start="215:13" pos:end="215:75"><expr pos:start="215:13" pos:end="215:74"><name pos:start="215:13" pos:end="215:33"><name pos:start="215:13" pos:end="215:14">sh</name><operator pos:start="215:15" pos:end="215:16">-&gt;</operator><name pos:start="215:17" pos:end="215:33">pic_order_cnt_lsb</name></name> <operator pos:start="215:35" pos:end="215:35">=</operator> <call pos:start="215:37" pos:end="215:74"><name pos:start="215:37" pos:end="215:44">get_bits</name><argument_list pos:start="215:45" pos:end="215:74">(<argument pos:start="215:46" pos:end="215:47"><expr pos:start="215:46" pos:end="215:47"><name pos:start="215:46" pos:end="215:47">gb</name></expr></argument>, <argument pos:start="215:50" pos:end="215:73"><expr pos:start="215:50" pos:end="215:73"><name pos:start="215:50" pos:end="215:73"><name pos:start="215:50" pos:end="215:50">s</name><operator pos:start="215:51" pos:end="215:52">-&gt;</operator><name pos:start="215:53" pos:end="215:55">sps</name><operator pos:start="215:56" pos:end="215:57">-&gt;</operator><name pos:start="215:58" pos:end="215:73">log2_max_poc_lsb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:64"><expr pos:start="217:13" pos:end="217:63"><name pos:start="217:13" pos:end="217:15">poc</name> <operator pos:start="217:17" pos:end="217:17">=</operator> <call pos:start="217:19" pos:end="217:63"><name pos:start="217:19" pos:end="217:37">ff_hevc_compute_poc</name><argument_list pos:start="217:38" pos:end="217:63">(<argument pos:start="217:39" pos:end="217:39"><expr pos:start="217:39" pos:end="217:39"><name pos:start="217:39" pos:end="217:39">s</name></expr></argument>, <argument pos:start="217:42" pos:end="217:62"><expr pos:start="217:42" pos:end="217:62"><name pos:start="217:42" pos:end="217:62"><name pos:start="217:42" pos:end="217:43">sh</name><operator pos:start="217:44" pos:end="217:45">-&gt;</operator><name pos:start="217:46" pos:end="217:62">pic_order_cnt_lsb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="219:13" pos:end="231:13"><if pos:start="219:13" pos:end="231:13">if <condition pos:start="219:16" pos:end="219:62">(<expr pos:start="219:17" pos:end="219:61"><operator pos:start="219:17" pos:end="219:17">!</operator><name pos:start="219:18" pos:end="219:44"><name pos:start="219:18" pos:end="219:19">sh</name><operator pos:start="219:20" pos:end="219:21">-&gt;</operator><name pos:start="219:22" pos:end="219:44">first_slice_in_pic_flag</name></name> <operator pos:start="219:46" pos:end="219:47">&amp;&amp;</operator> <name pos:start="219:49" pos:end="219:51">poc</name> <operator pos:start="219:53" pos:end="219:54">!=</operator> <name pos:start="219:56" pos:end="219:61"><name pos:start="219:56" pos:end="219:56">s</name><operator pos:start="219:57" pos:end="219:58">-&gt;</operator><name pos:start="219:59" pos:end="219:61">poc</name></name></expr>)</condition> <block pos:start="219:64" pos:end="231:13">{<block_content pos:start="221:17" pos:end="229:29">

                <expr_stmt pos:start="221:17" pos:end="223:86"><expr pos:start="221:17" pos:end="223:85"><call pos:start="221:17" pos:end="223:85"><name pos:start="221:17" pos:end="221:22">av_log</name><argument_list pos:start="221:23" pos:end="223:85">(<argument pos:start="221:24" pos:end="221:31"><expr pos:start="221:24" pos:end="221:31"><name pos:start="221:24" pos:end="221:31"><name pos:start="221:24" pos:end="221:24">s</name><operator pos:start="221:25" pos:end="221:26">-&gt;</operator><name pos:start="221:27" pos:end="221:31">avctx</name></name></expr></argument>, <argument pos:start="221:34" pos:end="221:47"><expr pos:start="221:34" pos:end="221:47"><name pos:start="221:34" pos:end="221:47">AV_LOG_WARNING</name></expr></argument>,

                       <argument pos:start="223:24" pos:end="223:71"><expr pos:start="223:24" pos:end="223:71"><literal type="string" pos:start="223:24" pos:end="223:71">"Ignoring POC change between slices: %d -&gt; %d\n"</literal></expr></argument>, <argument pos:start="223:74" pos:end="223:79"><expr pos:start="223:74" pos:end="223:79"><name pos:start="223:74" pos:end="223:79"><name pos:start="223:74" pos:end="223:74">s</name><operator pos:start="223:75" pos:end="223:76">-&gt;</operator><name pos:start="223:77" pos:end="223:79">poc</name></name></expr></argument>, <argument pos:start="223:82" pos:end="223:84"><expr pos:start="223:82" pos:end="223:84"><name pos:start="223:82" pos:end="223:84">poc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="225:17" pos:end="227:47"><if pos:start="225:17" pos:end="227:47">if <condition pos:start="225:20" pos:end="225:62">(<expr pos:start="225:21" pos:end="225:61"><name pos:start="225:21" pos:end="225:45"><name pos:start="225:21" pos:end="225:21">s</name><operator pos:start="225:22" pos:end="225:23">-&gt;</operator><name pos:start="225:24" pos:end="225:28">avctx</name><operator pos:start="225:29" pos:end="225:30">-&gt;</operator><name pos:start="225:31" pos:end="225:45">err_recognition</name></name> <operator pos:start="225:47" pos:end="225:47">&amp;</operator> <name pos:start="225:49" pos:end="225:61">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="227:21" pos:end="227:47"><block_content pos:start="227:21" pos:end="227:47">

                    <return pos:start="227:21" pos:end="227:47">return <expr pos:start="227:28" pos:end="227:46"><name pos:start="227:28" pos:end="227:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:29"><expr pos:start="229:17" pos:end="229:28"><name pos:start="229:17" pos:end="229:19">poc</name> <operator pos:start="229:21" pos:end="229:21">=</operator> <name pos:start="229:23" pos:end="229:28"><name pos:start="229:23" pos:end="229:23">s</name><operator pos:start="229:24" pos:end="229:25">-&gt;</operator><name pos:start="229:26" pos:end="229:28">poc</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:25"><expr pos:start="233:13" pos:end="233:24"><name pos:start="233:13" pos:end="233:18"><name pos:start="233:13" pos:end="233:13">s</name><operator pos:start="233:14" pos:end="233:15">-&gt;</operator><name pos:start="233:16" pos:end="233:18">poc</name></name> <operator pos:start="233:20" pos:end="233:20">=</operator> <name pos:start="233:22" pos:end="233:24">poc</name></expr>;</expr_stmt>



            <expr_stmt pos:start="237:13" pos:end="237:64"><expr pos:start="237:13" pos:end="237:63"><name pos:start="237:13" pos:end="237:47"><name pos:start="237:13" pos:end="237:14">sh</name><operator pos:start="237:15" pos:end="237:16">-&gt;</operator><name pos:start="237:17" pos:end="237:47">short_term_ref_pic_set_sps_flag</name></name> <operator pos:start="237:49" pos:end="237:49">=</operator> <call pos:start="237:51" pos:end="237:63"><name pos:start="237:51" pos:end="237:59">get_bits1</name><argument_list pos:start="237:60" pos:end="237:63">(<argument pos:start="237:61" pos:end="237:62"><expr pos:start="237:61" pos:end="237:62"><name pos:start="237:61" pos:end="237:62">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="239:13" pos:end="277:13"><if pos:start="239:13" pos:end="255:13">if <condition pos:start="239:16" pos:end="239:53">(<expr pos:start="239:17" pos:end="239:52"><operator pos:start="239:17" pos:end="239:17">!</operator><name pos:start="239:18" pos:end="239:52"><name pos:start="239:18" pos:end="239:19">sh</name><operator pos:start="239:20" pos:end="239:21">-&gt;</operator><name pos:start="239:22" pos:end="239:52">short_term_ref_pic_set_sps_flag</name></name></expr>)</condition> <block pos:start="239:55" pos:end="255:13">{<block_content pos:start="241:17" pos:end="253:52">

                <decl_stmt pos:start="241:17" pos:end="241:44"><decl pos:start="241:17" pos:end="241:43"><type pos:start="241:17" pos:end="241:19"><name pos:start="241:17" pos:end="241:19">int</name></type> <name pos:start="241:21" pos:end="241:23">pos</name> <init pos:start="241:25" pos:end="241:43">= <expr pos:start="241:27" pos:end="241:43"><call pos:start="241:27" pos:end="241:43"><name pos:start="241:27" pos:end="241:39">get_bits_left</name><argument_list pos:start="241:40" pos:end="241:43">(<argument pos:start="241:41" pos:end="241:42"><expr pos:start="241:41" pos:end="241:42"><name pos:start="241:41" pos:end="241:42">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:82"><expr pos:start="243:17" pos:end="243:81"><name pos:start="243:17" pos:end="243:19">ret</name> <operator pos:start="243:21" pos:end="243:21">=</operator> <call pos:start="243:23" pos:end="243:81"><name pos:start="243:23" pos:end="243:51">ff_hevc_decode_short_term_rps</name><argument_list pos:start="243:52" pos:end="243:81">(<argument pos:start="243:53" pos:end="243:53"><expr pos:start="243:53" pos:end="243:53"><name pos:start="243:53" pos:end="243:53">s</name></expr></argument>, <argument pos:start="243:56" pos:end="243:69"><expr pos:start="243:56" pos:end="243:69"><operator pos:start="243:56" pos:end="243:56">&amp;</operator><name pos:start="243:57" pos:end="243:69"><name pos:start="243:57" pos:end="243:58">sh</name><operator pos:start="243:59" pos:end="243:60">-&gt;</operator><name pos:start="243:61" pos:end="243:69">slice_rps</name></name></expr></argument>, <argument pos:start="243:72" pos:end="243:77"><expr pos:start="243:72" pos:end="243:77"><name pos:start="243:72" pos:end="243:77"><name pos:start="243:72" pos:end="243:72">s</name><operator pos:start="243:73" pos:end="243:74">-&gt;</operator><name pos:start="243:75" pos:end="243:77">sps</name></name></expr></argument>, <argument pos:start="243:80" pos:end="243:80"><expr pos:start="243:80" pos:end="243:80"><literal type="number" pos:start="243:80" pos:end="243:80">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="245:17" pos:end="247:31"><if pos:start="245:17" pos:end="247:31">if <condition pos:start="245:20" pos:end="245:28">(<expr pos:start="245:21" pos:end="245:27"><name pos:start="245:21" pos:end="245:23">ret</name> <operator pos:start="245:25" pos:end="245:25">&lt;</operator> <literal type="number" pos:start="245:27" pos:end="245:27">0</literal></expr>)</condition><block type="pseudo" pos:start="247:21" pos:end="247:31"><block_content pos:start="247:21" pos:end="247:31">

                    <return pos:start="247:21" pos:end="247:31">return <expr pos:start="247:28" pos:end="247:30"><name pos:start="247:28" pos:end="247:30">ret</name></expr>;</return></block_content></block></if></if_stmt>



                <expr_stmt pos:start="251:17" pos:end="251:74"><expr pos:start="251:17" pos:end="251:73"><name pos:start="251:17" pos:end="251:47"><name pos:start="251:17" pos:end="251:18">sh</name><operator pos:start="251:19" pos:end="251:20">-&gt;</operator><name pos:start="251:21" pos:end="251:47">short_term_ref_pic_set_size</name></name> <operator pos:start="251:49" pos:end="251:49">=</operator> <name pos:start="251:51" pos:end="251:53">pos</name> <operator pos:start="251:55" pos:end="251:55">-</operator> <call pos:start="251:57" pos:end="251:73"><name pos:start="251:57" pos:end="251:69">get_bits_left</name><argument_list pos:start="251:70" pos:end="251:73">(<argument pos:start="251:71" pos:end="251:72"><expr pos:start="251:71" pos:end="251:72"><name pos:start="251:71" pos:end="251:72">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:52"><expr pos:start="253:17" pos:end="253:51"><name pos:start="253:17" pos:end="253:34"><name pos:start="253:17" pos:end="253:18">sh</name><operator pos:start="253:19" pos:end="253:20">-&gt;</operator><name pos:start="253:21" pos:end="253:34">short_term_rps</name></name> <operator pos:start="253:36" pos:end="253:36">=</operator> <operator pos:start="253:38" pos:end="253:38">&amp;</operator><name pos:start="253:39" pos:end="253:51"><name pos:start="253:39" pos:end="253:40">sh</name><operator pos:start="253:41" pos:end="253:42">-&gt;</operator><name pos:start="253:43" pos:end="253:51">slice_rps</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="255:15" pos:end="277:13">else <block pos:start="255:20" pos:end="277:13">{<block_content pos:start="257:17" pos:end="275:62">

                <decl_stmt pos:start="257:17" pos:end="257:37"><decl pos:start="257:17" pos:end="257:27"><type pos:start="257:17" pos:end="257:19"><name pos:start="257:17" pos:end="257:19">int</name></type> <name pos:start="257:21" pos:end="257:27">numbits</name></decl>, <decl pos:start="257:30" pos:end="257:36"><type ref="prev" pos:start="257:17" pos:end="257:19"/><name pos:start="257:30" pos:end="257:36">rps_idx</name></decl>;</decl_stmt>



                <if_stmt pos:start="261:17" pos:end="267:17"><if pos:start="261:17" pos:end="267:17">if <condition pos:start="261:20" pos:end="261:39">(<expr pos:start="261:21" pos:end="261:38"><operator pos:start="261:21" pos:end="261:21">!</operator><name pos:start="261:22" pos:end="261:38"><name pos:start="261:22" pos:end="261:22">s</name><operator pos:start="261:23" pos:end="261:24">-&gt;</operator><name pos:start="261:25" pos:end="261:27">sps</name><operator pos:start="261:28" pos:end="261:29">-&gt;</operator><name pos:start="261:30" pos:end="261:38">nb_st_rps</name></name></expr>)</condition> <block pos:start="261:41" pos:end="267:17">{<block_content pos:start="263:21" pos:end="265:47">

                    <expr_stmt pos:start="263:21" pos:end="263:81"><expr pos:start="263:21" pos:end="263:80"><call pos:start="263:21" pos:end="263:80"><name pos:start="263:21" pos:end="263:26">av_log</name><argument_list pos:start="263:27" pos:end="263:80">(<argument pos:start="263:28" pos:end="263:35"><expr pos:start="263:28" pos:end="263:35"><name pos:start="263:28" pos:end="263:35"><name pos:start="263:28" pos:end="263:28">s</name><operator pos:start="263:29" pos:end="263:30">-&gt;</operator><name pos:start="263:31" pos:end="263:35">avctx</name></name></expr></argument>, <argument pos:start="263:38" pos:end="263:49"><expr pos:start="263:38" pos:end="263:49"><name pos:start="263:38" pos:end="263:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="263:52" pos:end="263:79"><expr pos:start="263:52" pos:end="263:79"><literal type="string" pos:start="263:52" pos:end="263:79">"No ref lists in the SPS.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="265:21" pos:end="265:47">return <expr pos:start="265:28" pos:end="265:46"><name pos:start="265:28" pos:end="265:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="271:17" pos:end="271:58"><expr pos:start="271:17" pos:end="271:57"><name pos:start="271:17" pos:end="271:23">numbits</name> <operator pos:start="271:25" pos:end="271:25">=</operator> <call pos:start="271:27" pos:end="271:57"><name pos:start="271:27" pos:end="271:38">av_ceil_log2</name><argument_list pos:start="271:39" pos:end="271:57">(<argument pos:start="271:40" pos:end="271:56"><expr pos:start="271:40" pos:end="271:56"><name pos:start="271:40" pos:end="271:56"><name pos:start="271:40" pos:end="271:40">s</name><operator pos:start="271:41" pos:end="271:42">-&gt;</operator><name pos:start="271:43" pos:end="271:45">sps</name><operator pos:start="271:46" pos:end="271:47">-&gt;</operator><name pos:start="271:48" pos:end="271:56">nb_st_rps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="273:17" pos:end="273:66"><expr pos:start="273:17" pos:end="273:65"><name pos:start="273:17" pos:end="273:23">rps_idx</name> <operator pos:start="273:25" pos:end="273:25">=</operator> <ternary pos:start="273:27" pos:end="273:65"><condition pos:start="273:27" pos:end="273:39"><expr pos:start="273:27" pos:end="273:37"><name pos:start="273:27" pos:end="273:33">numbits</name> <operator pos:start="273:35" pos:end="273:35">&gt;</operator> <literal type="number" pos:start="273:37" pos:end="273:37">0</literal></expr> ?</condition><then pos:start="273:41" pos:end="273:61"> <expr pos:start="273:41" pos:end="273:61"><call pos:start="273:41" pos:end="273:61"><name pos:start="273:41" pos:end="273:48">get_bits</name><argument_list pos:start="273:49" pos:end="273:61">(<argument pos:start="273:50" pos:end="273:51"><expr pos:start="273:50" pos:end="273:51"><name pos:start="273:50" pos:end="273:51">gb</name></expr></argument>, <argument pos:start="273:54" pos:end="273:60"><expr pos:start="273:54" pos:end="273:60"><name pos:start="273:54" pos:end="273:60">numbits</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="273:63" pos:end="273:65">: <expr pos:start="273:65" pos:end="273:65"><literal type="number" pos:start="273:65" pos:end="273:65">0</literal></expr></else></ternary></expr>;</expr_stmt>

                <expr_stmt pos:start="275:17" pos:end="275:62"><expr pos:start="275:17" pos:end="275:61"><name pos:start="275:17" pos:end="275:34"><name pos:start="275:17" pos:end="275:18">sh</name><operator pos:start="275:19" pos:end="275:20">-&gt;</operator><name pos:start="275:21" pos:end="275:34">short_term_rps</name></name> <operator pos:start="275:36" pos:end="275:36">=</operator> <operator pos:start="275:38" pos:end="275:38">&amp;</operator><name pos:start="275:39" pos:end="275:61"><name pos:start="275:39" pos:end="275:39">s</name><operator pos:start="275:40" pos:end="275:41">-&gt;</operator><name pos:start="275:42" pos:end="275:44">sps</name><operator pos:start="275:45" pos:end="275:46">-&gt;</operator><name pos:start="275:47" pos:end="275:52">st_rps</name><index pos:start="275:53" pos:end="275:61">[<expr pos:start="275:54" pos:end="275:60"><name pos:start="275:54" pos:end="275:60">rps_idx</name></expr>]</index></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="281:13" pos:end="281:59"><expr pos:start="281:13" pos:end="281:58"><name pos:start="281:13" pos:end="281:15">ret</name> <operator pos:start="281:17" pos:end="281:17">=</operator> <call pos:start="281:19" pos:end="281:58"><name pos:start="281:19" pos:end="281:31">decode_lt_rps</name><argument_list pos:start="281:32" pos:end="281:58">(<argument pos:start="281:33" pos:end="281:33"><expr pos:start="281:33" pos:end="281:33"><name pos:start="281:33" pos:end="281:33">s</name></expr></argument>, <argument pos:start="281:36" pos:end="281:53"><expr pos:start="281:36" pos:end="281:53"><operator pos:start="281:36" pos:end="281:36">&amp;</operator><name pos:start="281:37" pos:end="281:53"><name pos:start="281:37" pos:end="281:38">sh</name><operator pos:start="281:39" pos:end="281:40">-&gt;</operator><name pos:start="281:41" pos:end="281:53">long_term_rps</name></name></expr></argument>, <argument pos:start="281:56" pos:end="281:57"><expr pos:start="281:56" pos:end="281:57"><name pos:start="281:56" pos:end="281:57">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="283:13" pos:end="291:13"><if pos:start="283:13" pos:end="291:13">if <condition pos:start="283:16" pos:end="283:24">(<expr pos:start="283:17" pos:end="283:23"><name pos:start="283:17" pos:end="283:19">ret</name> <operator pos:start="283:21" pos:end="283:21">&lt;</operator> <literal type="number" pos:start="283:23" pos:end="283:23">0</literal></expr>)</condition> <block pos:start="283:26" pos:end="291:13">{<block_content pos:start="285:17" pos:end="289:47">

                <expr_stmt pos:start="285:17" pos:end="285:77"><expr pos:start="285:17" pos:end="285:76"><call pos:start="285:17" pos:end="285:76"><name pos:start="285:17" pos:end="285:22">av_log</name><argument_list pos:start="285:23" pos:end="285:76">(<argument pos:start="285:24" pos:end="285:31"><expr pos:start="285:24" pos:end="285:31"><name pos:start="285:24" pos:end="285:31"><name pos:start="285:24" pos:end="285:24">s</name><operator pos:start="285:25" pos:end="285:26">-&gt;</operator><name pos:start="285:27" pos:end="285:31">avctx</name></name></expr></argument>, <argument pos:start="285:34" pos:end="285:47"><expr pos:start="285:34" pos:end="285:47"><name pos:start="285:34" pos:end="285:47">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="285:50" pos:end="285:75"><expr pos:start="285:50" pos:end="285:75"><literal type="string" pos:start="285:50" pos:end="285:75">"Invalid long term RPS.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="287:17" pos:end="289:47"><if pos:start="287:17" pos:end="289:47">if <condition pos:start="287:20" pos:end="287:62">(<expr pos:start="287:21" pos:end="287:61"><name pos:start="287:21" pos:end="287:45"><name pos:start="287:21" pos:end="287:21">s</name><operator pos:start="287:22" pos:end="287:23">-&gt;</operator><name pos:start="287:24" pos:end="287:28">avctx</name><operator pos:start="287:29" pos:end="287:30">-&gt;</operator><name pos:start="287:31" pos:end="287:45">err_recognition</name></name> <operator pos:start="287:47" pos:end="287:47">&amp;</operator> <name pos:start="287:49" pos:end="287:61">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="289:21" pos:end="289:47"><block_content pos:start="289:21" pos:end="289:47">

                    <return pos:start="289:21" pos:end="289:47">return <expr pos:start="289:28" pos:end="289:46"><name pos:start="289:28" pos:end="289:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="295:13" pos:end="301:56"><if pos:start="295:13" pos:end="297:68">if <condition pos:start="295:16" pos:end="295:54">(<expr pos:start="295:17" pos:end="295:53"><name pos:start="295:17" pos:end="295:53"><name pos:start="295:17" pos:end="295:17">s</name><operator pos:start="295:18" pos:end="295:19">-&gt;</operator><name pos:start="295:20" pos:end="295:22">sps</name><operator pos:start="295:23" pos:end="295:24">-&gt;</operator><name pos:start="295:25" pos:end="295:53">sps_temporal_mvp_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="297:17" pos:end="297:68"><block_content pos:start="297:17" pos:end="297:68">

                <expr_stmt pos:start="297:17" pos:end="297:68"><expr pos:start="297:17" pos:end="297:67"><name pos:start="297:17" pos:end="297:51"><name pos:start="297:17" pos:end="297:18">sh</name><operator pos:start="297:19" pos:end="297:20">-&gt;</operator><name pos:start="297:21" pos:end="297:51">slice_temporal_mvp_enabled_flag</name></name> <operator pos:start="297:53" pos:end="297:53">=</operator> <call pos:start="297:55" pos:end="297:67"><name pos:start="297:55" pos:end="297:63">get_bits1</name><argument_list pos:start="297:64" pos:end="297:67">(<argument pos:start="297:65" pos:end="297:66"><expr pos:start="297:65" pos:end="297:66"><name pos:start="297:65" pos:end="297:66">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="299:13" pos:end="301:56">else<block type="pseudo" pos:start="301:17" pos:end="301:56"><block_content pos:start="301:17" pos:end="301:56">

                <expr_stmt pos:start="301:17" pos:end="301:56"><expr pos:start="301:17" pos:end="301:55"><name pos:start="301:17" pos:end="301:51"><name pos:start="301:17" pos:end="301:18">sh</name><operator pos:start="301:19" pos:end="301:20">-&gt;</operator><name pos:start="301:21" pos:end="301:51">slice_temporal_mvp_enabled_flag</name></name> <operator pos:start="301:53" pos:end="301:53">=</operator> <literal type="number" pos:start="301:55" pos:end="301:55">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="303:11" pos:end="309:9">else <block pos:start="303:16" pos:end="309:9">{<block_content pos:start="305:13" pos:end="307:37">

            <expr_stmt pos:start="305:13" pos:end="305:40"><expr pos:start="305:13" pos:end="305:39"><name pos:start="305:13" pos:end="305:32"><name pos:start="305:13" pos:end="305:13">s</name><operator pos:start="305:14" pos:end="305:15">-&gt;</operator><name pos:start="305:16" pos:end="305:17">sh</name><operator pos:start="305:18" pos:end="305:18">.</operator><name pos:start="305:19" pos:end="305:32">short_term_rps</name></name> <operator pos:start="305:34" pos:end="305:34">=</operator> <name pos:start="305:36" pos:end="305:39">NULL</name></expr>;</expr_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:37"><expr pos:start="307:13" pos:end="307:36"><name pos:start="307:13" pos:end="307:18"><name pos:start="307:13" pos:end="307:13">s</name><operator pos:start="307:14" pos:end="307:15">-&gt;</operator><name pos:start="307:16" pos:end="307:18">poc</name></name>               <operator pos:start="307:34" pos:end="307:34">=</operator> <literal type="number" pos:start="307:36" pos:end="307:36">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="313:9" pos:end="313:19">/* 8.3.1 */</comment>

        <if_stmt pos:start="315:9" pos:end="331:32"><if pos:start="315:9" pos:end="331:32">if <condition pos:start="315:12" pos:end="329:43">(<expr pos:start="315:13" pos:end="329:42"><name pos:start="315:13" pos:end="315:26"><name pos:start="315:13" pos:end="315:13">s</name><operator pos:start="315:14" pos:end="315:15">-&gt;</operator><name pos:start="315:16" pos:end="315:26">temporal_id</name></name> <operator pos:start="315:28" pos:end="315:29">==</operator> <literal type="number" pos:start="315:31" pos:end="315:31">0</literal> <operator pos:start="315:33" pos:end="315:34">&amp;&amp;</operator>

            <name pos:start="317:13" pos:end="317:28"><name pos:start="317:13" pos:end="317:13">s</name><operator pos:start="317:14" pos:end="317:15">-&gt;</operator><name pos:start="317:16" pos:end="317:28">nal_unit_type</name></name> <operator pos:start="317:30" pos:end="317:31">!=</operator> <name pos:start="317:33" pos:end="317:43">NAL_TRAIL_N</name> <operator pos:start="317:45" pos:end="317:46">&amp;&amp;</operator>

            <name pos:start="319:13" pos:end="319:28"><name pos:start="319:13" pos:end="319:13">s</name><operator pos:start="319:14" pos:end="319:15">-&gt;</operator><name pos:start="319:16" pos:end="319:28">nal_unit_type</name></name> <operator pos:start="319:30" pos:end="319:31">!=</operator> <name pos:start="319:33" pos:end="319:41">NAL_TSA_N</name>   <operator pos:start="319:45" pos:end="319:46">&amp;&amp;</operator>

            <name pos:start="321:13" pos:end="321:28"><name pos:start="321:13" pos:end="321:13">s</name><operator pos:start="321:14" pos:end="321:15">-&gt;</operator><name pos:start="321:16" pos:end="321:28">nal_unit_type</name></name> <operator pos:start="321:30" pos:end="321:31">!=</operator> <name pos:start="321:33" pos:end="321:42">NAL_STSA_N</name>  <operator pos:start="321:45" pos:end="321:46">&amp;&amp;</operator>

            <name pos:start="323:13" pos:end="323:28"><name pos:start="323:13" pos:end="323:13">s</name><operator pos:start="323:14" pos:end="323:15">-&gt;</operator><name pos:start="323:16" pos:end="323:28">nal_unit_type</name></name> <operator pos:start="323:30" pos:end="323:31">!=</operator> <name pos:start="323:33" pos:end="323:42">NAL_RADL_N</name>  <operator pos:start="323:45" pos:end="323:46">&amp;&amp;</operator>

            <name pos:start="325:13" pos:end="325:28"><name pos:start="325:13" pos:end="325:13">s</name><operator pos:start="325:14" pos:end="325:15">-&gt;</operator><name pos:start="325:16" pos:end="325:28">nal_unit_type</name></name> <operator pos:start="325:30" pos:end="325:31">!=</operator> <name pos:start="325:33" pos:end="325:42">NAL_RADL_R</name>  <operator pos:start="325:45" pos:end="325:46">&amp;&amp;</operator>

            <name pos:start="327:13" pos:end="327:28"><name pos:start="327:13" pos:end="327:13">s</name><operator pos:start="327:14" pos:end="327:15">-&gt;</operator><name pos:start="327:16" pos:end="327:28">nal_unit_type</name></name> <operator pos:start="327:30" pos:end="327:31">!=</operator> <name pos:start="327:33" pos:end="327:42">NAL_RASL_N</name>  <operator pos:start="327:45" pos:end="327:46">&amp;&amp;</operator>

            <name pos:start="329:13" pos:end="329:28"><name pos:start="329:13" pos:end="329:13">s</name><operator pos:start="329:14" pos:end="329:15">-&gt;</operator><name pos:start="329:16" pos:end="329:28">nal_unit_type</name></name> <operator pos:start="329:30" pos:end="329:31">!=</operator> <name pos:start="329:33" pos:end="329:42">NAL_RASL_R</name></expr>)</condition><block type="pseudo" pos:start="331:13" pos:end="331:32"><block_content pos:start="331:13" pos:end="331:32">

            <expr_stmt pos:start="331:13" pos:end="331:32"><expr pos:start="331:13" pos:end="331:31"><name pos:start="331:13" pos:end="331:22"><name pos:start="331:13" pos:end="331:13">s</name><operator pos:start="331:14" pos:end="331:15">-&gt;</operator><name pos:start="331:16" pos:end="331:22">pocTid0</name></name> <operator pos:start="331:24" pos:end="331:24">=</operator> <name pos:start="331:26" pos:end="331:31"><name pos:start="331:26" pos:end="331:26">s</name><operator pos:start="331:27" pos:end="331:28">-&gt;</operator><name pos:start="331:29" pos:end="331:31">poc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="335:9" pos:end="355:9"><if pos:start="335:9" pos:end="347:9">if <condition pos:start="335:12" pos:end="335:32">(<expr pos:start="335:13" pos:end="335:31"><name pos:start="335:13" pos:end="335:31"><name pos:start="335:13" pos:end="335:13">s</name><operator pos:start="335:14" pos:end="335:15">-&gt;</operator><name pos:start="335:16" pos:end="335:18">sps</name><operator pos:start="335:19" pos:end="335:20">-&gt;</operator><name pos:start="335:21" pos:end="335:31">sao_enabled</name></name></expr>)</condition> <block pos:start="335:34" pos:end="347:9">{<block_content pos:start="337:13" pos:end="345:13">

            <expr_stmt pos:start="337:13" pos:end="337:69"><expr pos:start="337:13" pos:end="337:68"><name pos:start="337:13" pos:end="337:52"><name pos:start="337:13" pos:end="337:14">sh</name><operator pos:start="337:15" pos:end="337:16">-&gt;</operator><name pos:start="337:17" pos:end="337:49">slice_sample_adaptive_offset_flag</name><index pos:start="337:50" pos:end="337:52">[<expr pos:start="337:51" pos:end="337:51"><literal type="number" pos:start="337:51" pos:end="337:51">0</literal></expr>]</index></name> <operator pos:start="337:54" pos:end="337:54">=</operator> <call pos:start="337:56" pos:end="337:68"><name pos:start="337:56" pos:end="337:64">get_bits1</name><argument_list pos:start="337:65" pos:end="337:68">(<argument pos:start="337:66" pos:end="337:67"><expr pos:start="337:66" pos:end="337:67"><name pos:start="337:66" pos:end="337:67">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="339:13" pos:end="345:13"><if pos:start="339:13" pos:end="345:13">if <condition pos:start="339:16" pos:end="339:42">(<expr pos:start="339:17" pos:end="339:41"><name pos:start="339:17" pos:end="339:41"><name pos:start="339:17" pos:end="339:17">s</name><operator pos:start="339:18" pos:end="339:19">-&gt;</operator><name pos:start="339:20" pos:end="339:22">sps</name><operator pos:start="339:23" pos:end="339:24">-&gt;</operator><name pos:start="339:25" pos:end="339:41">chroma_format_idc</name></name></expr>)</condition> <block pos:start="339:44" pos:end="345:13">{<block_content pos:start="341:17" pos:end="343:73">

                <expr_stmt pos:start="341:17" pos:end="343:73"><expr pos:start="341:17" pos:end="343:72"><name pos:start="341:17" pos:end="341:56"><name pos:start="341:17" pos:end="341:18">sh</name><operator pos:start="341:19" pos:end="341:20">-&gt;</operator><name pos:start="341:21" pos:end="341:53">slice_sample_adaptive_offset_flag</name><index pos:start="341:54" pos:end="341:56">[<expr pos:start="341:55" pos:end="341:55"><literal type="number" pos:start="341:55" pos:end="341:55">1</literal></expr>]</index></name> <operator pos:start="341:58" pos:end="341:58">=</operator>

                <name pos:start="343:17" pos:end="343:56"><name pos:start="343:17" pos:end="343:18">sh</name><operator pos:start="343:19" pos:end="343:20">-&gt;</operator><name pos:start="343:21" pos:end="343:53">slice_sample_adaptive_offset_flag</name><index pos:start="343:54" pos:end="343:56">[<expr pos:start="343:55" pos:end="343:55"><literal type="number" pos:start="343:55" pos:end="343:55">2</literal></expr>]</index></name> <operator pos:start="343:58" pos:end="343:58">=</operator> <call pos:start="343:60" pos:end="343:72"><name pos:start="343:60" pos:end="343:68">get_bits1</name><argument_list pos:start="343:69" pos:end="343:72">(<argument pos:start="343:70" pos:end="343:71"><expr pos:start="343:70" pos:end="343:71"><name pos:start="343:70" pos:end="343:71">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="347:11" pos:end="355:9">else <block pos:start="347:16" pos:end="355:9">{<block_content pos:start="349:13" pos:end="353:57">

            <expr_stmt pos:start="349:13" pos:end="349:57"><expr pos:start="349:13" pos:end="349:56"><name pos:start="349:13" pos:end="349:52"><name pos:start="349:13" pos:end="349:14">sh</name><operator pos:start="349:15" pos:end="349:16">-&gt;</operator><name pos:start="349:17" pos:end="349:49">slice_sample_adaptive_offset_flag</name><index pos:start="349:50" pos:end="349:52">[<expr pos:start="349:51" pos:end="349:51"><literal type="number" pos:start="349:51" pos:end="349:51">0</literal></expr>]</index></name> <operator pos:start="349:54" pos:end="349:54">=</operator> <literal type="number" pos:start="349:56" pos:end="349:56">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="351:13" pos:end="351:57"><expr pos:start="351:13" pos:end="351:56"><name pos:start="351:13" pos:end="351:52"><name pos:start="351:13" pos:end="351:14">sh</name><operator pos:start="351:15" pos:end="351:16">-&gt;</operator><name pos:start="351:17" pos:end="351:49">slice_sample_adaptive_offset_flag</name><index pos:start="351:50" pos:end="351:52">[<expr pos:start="351:51" pos:end="351:51"><literal type="number" pos:start="351:51" pos:end="351:51">1</literal></expr>]</index></name> <operator pos:start="351:54" pos:end="351:54">=</operator> <literal type="number" pos:start="351:56" pos:end="351:56">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:57"><expr pos:start="353:13" pos:end="353:56"><name pos:start="353:13" pos:end="353:52"><name pos:start="353:13" pos:end="353:14">sh</name><operator pos:start="353:15" pos:end="353:16">-&gt;</operator><name pos:start="353:17" pos:end="353:49">slice_sample_adaptive_offset_flag</name><index pos:start="353:50" pos:end="353:52">[<expr pos:start="353:51" pos:end="353:51"><literal type="number" pos:start="353:51" pos:end="353:51">2</literal></expr>]</index></name> <operator pos:start="353:54" pos:end="353:54">=</operator> <literal type="number" pos:start="353:56" pos:end="353:56">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="359:9" pos:end="359:46"><expr pos:start="359:9" pos:end="359:45"><name pos:start="359:9" pos:end="359:23"><name pos:start="359:9" pos:end="359:10">sh</name><operator pos:start="359:11" pos:end="359:12">-&gt;</operator><name pos:start="359:13" pos:end="359:19">nb_refs</name><index pos:start="359:20" pos:end="359:23">[<expr pos:start="359:21" pos:end="359:22"><name pos:start="359:21" pos:end="359:22">L0</name></expr>]</index></name> <operator pos:start="359:25" pos:end="359:25">=</operator> <name pos:start="359:27" pos:end="359:41"><name pos:start="359:27" pos:end="359:28">sh</name><operator pos:start="359:29" pos:end="359:30">-&gt;</operator><name pos:start="359:31" pos:end="359:37">nb_refs</name><index pos:start="359:38" pos:end="359:41">[<expr pos:start="359:39" pos:end="359:40"><name pos:start="359:39" pos:end="359:40">L1</name></expr>]</index></name> <operator pos:start="359:43" pos:end="359:43">=</operator> <literal type="number" pos:start="359:45" pos:end="359:45">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="361:9" pos:end="517:9"><if pos:start="361:9" pos:end="517:9">if <condition pos:start="361:12" pos:end="361:67">(<expr pos:start="361:13" pos:end="361:66"><name pos:start="361:13" pos:end="361:26"><name pos:start="361:13" pos:end="361:14">sh</name><operator pos:start="361:15" pos:end="361:16">-&gt;</operator><name pos:start="361:17" pos:end="361:26">slice_type</name></name> <operator pos:start="361:28" pos:end="361:29">==</operator> <name pos:start="361:31" pos:end="361:37">P_SLICE</name> <operator pos:start="361:39" pos:end="361:40">||</operator> <name pos:start="361:42" pos:end="361:55"><name pos:start="361:42" pos:end="361:43">sh</name><operator pos:start="361:44" pos:end="361:45">-&gt;</operator><name pos:start="361:46" pos:end="361:55">slice_type</name></name> <operator pos:start="361:57" pos:end="361:58">==</operator> <name pos:start="361:60" pos:end="361:66">B_SLICE</name></expr>)</condition> <block pos:start="361:69" pos:end="517:9">{<block_content pos:start="363:13" pos:end="515:13">

            <decl_stmt pos:start="363:13" pos:end="363:24"><decl pos:start="363:13" pos:end="363:23"><type pos:start="363:13" pos:end="363:15"><name pos:start="363:13" pos:end="363:15">int</name></type> <name pos:start="363:17" pos:end="363:23">nb_refs</name></decl>;</decl_stmt>



            <expr_stmt pos:start="367:13" pos:end="367:68"><expr pos:start="367:13" pos:end="367:67"><name pos:start="367:13" pos:end="367:27"><name pos:start="367:13" pos:end="367:14">sh</name><operator pos:start="367:15" pos:end="367:16">-&gt;</operator><name pos:start="367:17" pos:end="367:23">nb_refs</name><index pos:start="367:24" pos:end="367:27">[<expr pos:start="367:25" pos:end="367:26"><name pos:start="367:25" pos:end="367:26">L0</name></expr>]</index></name> <operator pos:start="367:29" pos:end="367:29">=</operator> <name pos:start="367:31" pos:end="367:67"><name pos:start="367:31" pos:end="367:31">s</name><operator pos:start="367:32" pos:end="367:33">-&gt;</operator><name pos:start="367:34" pos:end="367:36">pps</name><operator pos:start="367:37" pos:end="367:38">-&gt;</operator><name pos:start="367:39" pos:end="367:67">num_ref_idx_l0_default_active</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="369:13" pos:end="371:72"><if pos:start="369:13" pos:end="371:72">if <condition pos:start="369:16" pos:end="369:42">(<expr pos:start="369:17" pos:end="369:41"><name pos:start="369:17" pos:end="369:30"><name pos:start="369:17" pos:end="369:18">sh</name><operator pos:start="369:19" pos:end="369:20">-&gt;</operator><name pos:start="369:21" pos:end="369:30">slice_type</name></name> <operator pos:start="369:32" pos:end="369:33">==</operator> <name pos:start="369:35" pos:end="369:41">B_SLICE</name></expr>)</condition><block type="pseudo" pos:start="371:17" pos:end="371:72"><block_content pos:start="371:17" pos:end="371:72">

                <expr_stmt pos:start="371:17" pos:end="371:72"><expr pos:start="371:17" pos:end="371:71"><name pos:start="371:17" pos:end="371:31"><name pos:start="371:17" pos:end="371:18">sh</name><operator pos:start="371:19" pos:end="371:20">-&gt;</operator><name pos:start="371:21" pos:end="371:27">nb_refs</name><index pos:start="371:28" pos:end="371:31">[<expr pos:start="371:29" pos:end="371:30"><name pos:start="371:29" pos:end="371:30">L1</name></expr>]</index></name> <operator pos:start="371:33" pos:end="371:33">=</operator> <name pos:start="371:35" pos:end="371:71"><name pos:start="371:35" pos:end="371:35">s</name><operator pos:start="371:36" pos:end="371:37">-&gt;</operator><name pos:start="371:38" pos:end="371:40">pps</name><operator pos:start="371:41" pos:end="371:42">-&gt;</operator><name pos:start="371:43" pos:end="371:71">num_ref_idx_l1_default_active</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="375:13" pos:end="383:13"><if pos:start="375:13" pos:end="383:13">if <condition pos:start="375:16" pos:end="375:30">(<expr pos:start="375:17" pos:end="375:29"><call pos:start="375:17" pos:end="375:29"><name pos:start="375:17" pos:end="375:25">get_bits1</name><argument_list pos:start="375:26" pos:end="375:29">(<argument pos:start="375:27" pos:end="375:28"><expr pos:start="375:27" pos:end="375:28"><name pos:start="375:27" pos:end="375:28">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="375:32" pos:end="383:13">{<block_content pos:start="377:17" pos:end="381:65"> <comment type="line" pos:start="375:34" pos:end="375:68">// num_ref_idx_active_override_flag</comment>

                <expr_stmt pos:start="377:17" pos:end="377:61"><expr pos:start="377:17" pos:end="377:60"><name pos:start="377:17" pos:end="377:31"><name pos:start="377:17" pos:end="377:18">sh</name><operator pos:start="377:19" pos:end="377:20">-&gt;</operator><name pos:start="377:21" pos:end="377:27">nb_refs</name><index pos:start="377:28" pos:end="377:31">[<expr pos:start="377:29" pos:end="377:30"><name pos:start="377:29" pos:end="377:30">L0</name></expr>]</index></name> <operator pos:start="377:33" pos:end="377:33">=</operator> <call pos:start="377:35" pos:end="377:56"><name pos:start="377:35" pos:end="377:52">get_ue_golomb_long</name><argument_list pos:start="377:53" pos:end="377:56">(<argument pos:start="377:54" pos:end="377:55"><expr pos:start="377:54" pos:end="377:55"><name pos:start="377:54" pos:end="377:55">gb</name></expr></argument>)</argument_list></call> <operator pos:start="377:58" pos:end="377:58">+</operator> <literal type="number" pos:start="377:60" pos:end="377:60">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="379:17" pos:end="381:65"><if pos:start="379:17" pos:end="381:65">if <condition pos:start="379:20" pos:end="379:46">(<expr pos:start="379:21" pos:end="379:45"><name pos:start="379:21" pos:end="379:34"><name pos:start="379:21" pos:end="379:22">sh</name><operator pos:start="379:23" pos:end="379:24">-&gt;</operator><name pos:start="379:25" pos:end="379:34">slice_type</name></name> <operator pos:start="379:36" pos:end="379:37">==</operator> <name pos:start="379:39" pos:end="379:45">B_SLICE</name></expr>)</condition><block type="pseudo" pos:start="381:21" pos:end="381:65"><block_content pos:start="381:21" pos:end="381:65">

                    <expr_stmt pos:start="381:21" pos:end="381:65"><expr pos:start="381:21" pos:end="381:64"><name pos:start="381:21" pos:end="381:35"><name pos:start="381:21" pos:end="381:22">sh</name><operator pos:start="381:23" pos:end="381:24">-&gt;</operator><name pos:start="381:25" pos:end="381:31">nb_refs</name><index pos:start="381:32" pos:end="381:35">[<expr pos:start="381:33" pos:end="381:34"><name pos:start="381:33" pos:end="381:34">L1</name></expr>]</index></name> <operator pos:start="381:37" pos:end="381:37">=</operator> <call pos:start="381:39" pos:end="381:60"><name pos:start="381:39" pos:end="381:56">get_ue_golomb_long</name><argument_list pos:start="381:57" pos:end="381:60">(<argument pos:start="381:58" pos:end="381:59"><expr pos:start="381:58" pos:end="381:59"><name pos:start="381:58" pos:end="381:59">gb</name></expr></argument>)</argument_list></call> <operator pos:start="381:62" pos:end="381:62">+</operator> <literal type="number" pos:start="381:64" pos:end="381:64">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="385:13" pos:end="393:13"><if pos:start="385:13" pos:end="393:13">if <condition pos:start="385:16" pos:end="385:73">(<expr pos:start="385:17" pos:end="385:72"><name pos:start="385:17" pos:end="385:31"><name pos:start="385:17" pos:end="385:18">sh</name><operator pos:start="385:19" pos:end="385:20">-&gt;</operator><name pos:start="385:21" pos:end="385:27">nb_refs</name><index pos:start="385:28" pos:end="385:31">[<expr pos:start="385:29" pos:end="385:30"><name pos:start="385:29" pos:end="385:30">L0</name></expr>]</index></name> <operator pos:start="385:33" pos:end="385:33">&gt;</operator> <name pos:start="385:35" pos:end="385:42">MAX_REFS</name> <operator pos:start="385:44" pos:end="385:45">||</operator> <name pos:start="385:47" pos:end="385:61"><name pos:start="385:47" pos:end="385:48">sh</name><operator pos:start="385:49" pos:end="385:50">-&gt;</operator><name pos:start="385:51" pos:end="385:57">nb_refs</name><index pos:start="385:58" pos:end="385:61">[<expr pos:start="385:59" pos:end="385:60"><name pos:start="385:59" pos:end="385:60">L1</name></expr>]</index></name> <operator pos:start="385:63" pos:end="385:63">&gt;</operator> <name pos:start="385:65" pos:end="385:72">MAX_REFS</name></expr>)</condition> <block pos:start="385:75" pos:end="393:13">{<block_content pos:start="387:17" pos:end="391:43">

                <expr_stmt pos:start="387:17" pos:end="389:57"><expr pos:start="387:17" pos:end="389:56"><call pos:start="387:17" pos:end="389:56"><name pos:start="387:17" pos:end="387:22">av_log</name><argument_list pos:start="387:23" pos:end="389:56">(<argument pos:start="387:24" pos:end="387:31"><expr pos:start="387:24" pos:end="387:31"><name pos:start="387:24" pos:end="387:31"><name pos:start="387:24" pos:end="387:24">s</name><operator pos:start="387:25" pos:end="387:26">-&gt;</operator><name pos:start="387:27" pos:end="387:31">avctx</name></name></expr></argument>, <argument pos:start="387:34" pos:end="387:45"><expr pos:start="387:34" pos:end="387:45"><name pos:start="387:34" pos:end="387:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="387:48" pos:end="387:72"><expr pos:start="387:48" pos:end="387:72"><literal type="string" pos:start="387:48" pos:end="387:72">"Too many refs: %d/%d.\n"</literal></expr></argument>,

                       <argument pos:start="389:24" pos:end="389:38"><expr pos:start="389:24" pos:end="389:38"><name pos:start="389:24" pos:end="389:38"><name pos:start="389:24" pos:end="389:25">sh</name><operator pos:start="389:26" pos:end="389:27">-&gt;</operator><name pos:start="389:28" pos:end="389:34">nb_refs</name><index pos:start="389:35" pos:end="389:38">[<expr pos:start="389:36" pos:end="389:37"><name pos:start="389:36" pos:end="389:37">L0</name></expr>]</index></name></expr></argument>, <argument pos:start="389:41" pos:end="389:55"><expr pos:start="389:41" pos:end="389:55"><name pos:start="389:41" pos:end="389:55"><name pos:start="389:41" pos:end="389:42">sh</name><operator pos:start="389:43" pos:end="389:44">-&gt;</operator><name pos:start="389:45" pos:end="389:51">nb_refs</name><index pos:start="389:52" pos:end="389:55">[<expr pos:start="389:53" pos:end="389:54"><name pos:start="389:53" pos:end="389:54">L1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="391:17" pos:end="391:43">return <expr pos:start="391:24" pos:end="391:42"><name pos:start="391:24" pos:end="391:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="397:13" pos:end="397:45"><expr pos:start="397:13" pos:end="397:44"><name pos:start="397:13" pos:end="397:40"><name pos:start="397:13" pos:end="397:14">sh</name><operator pos:start="397:15" pos:end="397:16">-&gt;</operator><name pos:start="397:17" pos:end="397:37">rpl_modification_flag</name><index pos:start="397:38" pos:end="397:40">[<expr pos:start="397:39" pos:end="397:39"><literal type="number" pos:start="397:39" pos:end="397:39">0</literal></expr>]</index></name> <operator pos:start="397:42" pos:end="397:42">=</operator> <literal type="number" pos:start="397:44" pos:end="397:44">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="399:13" pos:end="399:45"><expr pos:start="399:13" pos:end="399:44"><name pos:start="399:13" pos:end="399:40"><name pos:start="399:13" pos:end="399:14">sh</name><operator pos:start="399:15" pos:end="399:16">-&gt;</operator><name pos:start="399:17" pos:end="399:37">rpl_modification_flag</name><index pos:start="399:38" pos:end="399:40">[<expr pos:start="399:39" pos:end="399:39"><literal type="number" pos:start="399:39" pos:end="399:39">1</literal></expr>]</index></name> <operator pos:start="399:42" pos:end="399:42">=</operator> <literal type="number" pos:start="399:44" pos:end="399:44">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="401:13" pos:end="401:47"><expr pos:start="401:13" pos:end="401:46"><name pos:start="401:13" pos:end="401:19">nb_refs</name> <operator pos:start="401:21" pos:end="401:21">=</operator> <call pos:start="401:23" pos:end="401:46"><name pos:start="401:23" pos:end="401:43">ff_hevc_frame_nb_refs</name><argument_list pos:start="401:44" pos:end="401:46">(<argument pos:start="401:45" pos:end="401:45"><expr pos:start="401:45" pos:end="401:45"><name pos:start="401:45" pos:end="401:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="403:13" pos:end="409:13"><if pos:start="403:13" pos:end="409:13">if <condition pos:start="403:16" pos:end="403:25">(<expr pos:start="403:17" pos:end="403:24"><operator pos:start="403:17" pos:end="403:17">!</operator><name pos:start="403:18" pos:end="403:24">nb_refs</name></expr>)</condition> <block pos:start="403:27" pos:end="409:13">{<block_content pos:start="405:17" pos:end="407:43">

                <expr_stmt pos:start="405:17" pos:end="405:94"><expr pos:start="405:17" pos:end="405:93"><call pos:start="405:17" pos:end="405:93"><name pos:start="405:17" pos:end="405:22">av_log</name><argument_list pos:start="405:23" pos:end="405:93">(<argument pos:start="405:24" pos:end="405:31"><expr pos:start="405:24" pos:end="405:31"><name pos:start="405:24" pos:end="405:31"><name pos:start="405:24" pos:end="405:24">s</name><operator pos:start="405:25" pos:end="405:26">-&gt;</operator><name pos:start="405:27" pos:end="405:31">avctx</name></name></expr></argument>, <argument pos:start="405:34" pos:end="405:45"><expr pos:start="405:34" pos:end="405:45"><name pos:start="405:34" pos:end="405:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="405:48" pos:end="405:92"><expr pos:start="405:48" pos:end="405:92"><literal type="string" pos:start="405:48" pos:end="405:92">"Zero refs for a frame with P or B slices.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="407:17" pos:end="407:43">return <expr pos:start="407:24" pos:end="407:42"><name pos:start="407:24" pos:end="407:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="413:13" pos:end="439:13"><if pos:start="413:13" pos:end="439:13">if <condition pos:start="413:16" pos:end="413:71">(<expr pos:start="413:17" pos:end="413:70"><name pos:start="413:17" pos:end="413:55"><name pos:start="413:17" pos:end="413:17">s</name><operator pos:start="413:18" pos:end="413:19">-&gt;</operator><name pos:start="413:20" pos:end="413:22">pps</name><operator pos:start="413:23" pos:end="413:24">-&gt;</operator><name pos:start="413:25" pos:end="413:55">lists_modification_present_flag</name></name> <operator pos:start="413:57" pos:end="413:58">&amp;&amp;</operator> <name pos:start="413:60" pos:end="413:66">nb_refs</name> <operator pos:start="413:68" pos:end="413:68">&gt;</operator> <literal type="number" pos:start="413:70" pos:end="413:70">1</literal></expr>)</condition> <block pos:start="413:73" pos:end="439:13">{<block_content pos:start="415:17" pos:end="437:17">

                <expr_stmt pos:start="415:17" pos:end="415:61"><expr pos:start="415:17" pos:end="415:60"><name pos:start="415:17" pos:end="415:44"><name pos:start="415:17" pos:end="415:18">sh</name><operator pos:start="415:19" pos:end="415:20">-&gt;</operator><name pos:start="415:21" pos:end="415:41">rpl_modification_flag</name><index pos:start="415:42" pos:end="415:44">[<expr pos:start="415:43" pos:end="415:43"><literal type="number" pos:start="415:43" pos:end="415:43">0</literal></expr>]</index></name> <operator pos:start="415:46" pos:end="415:46">=</operator> <call pos:start="415:48" pos:end="415:60"><name pos:start="415:48" pos:end="415:56">get_bits1</name><argument_list pos:start="415:57" pos:end="415:60">(<argument pos:start="415:58" pos:end="415:59"><expr pos:start="415:58" pos:end="415:59"><name pos:start="415:58" pos:end="415:59">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="417:17" pos:end="423:17"><if pos:start="417:17" pos:end="423:17">if <condition pos:start="417:20" pos:end="417:49">(<expr pos:start="417:21" pos:end="417:48"><name pos:start="417:21" pos:end="417:48"><name pos:start="417:21" pos:end="417:22">sh</name><operator pos:start="417:23" pos:end="417:24">-&gt;</operator><name pos:start="417:25" pos:end="417:45">rpl_modification_flag</name><index pos:start="417:46" pos:end="417:48">[<expr pos:start="417:47" pos:end="417:47"><literal type="number" pos:start="417:47" pos:end="417:47">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="417:51" pos:end="423:17">{<block_content pos:start="419:21" pos:end="421:86">

                    <for pos:start="419:21" pos:end="421:86">for <control pos:start="419:25" pos:end="419:57">(<init pos:start="419:26" pos:end="419:31"><expr pos:start="419:26" pos:end="419:30"><name pos:start="419:26" pos:end="419:26">i</name> <operator pos:start="419:28" pos:end="419:28">=</operator> <literal type="number" pos:start="419:30" pos:end="419:30">0</literal></expr>;</init> <condition pos:start="419:33" pos:end="419:52"><expr pos:start="419:33" pos:end="419:51"><name pos:start="419:33" pos:end="419:33">i</name> <operator pos:start="419:35" pos:end="419:35">&lt;</operator> <name pos:start="419:37" pos:end="419:51"><name pos:start="419:37" pos:end="419:38">sh</name><operator pos:start="419:39" pos:end="419:40">-&gt;</operator><name pos:start="419:41" pos:end="419:47">nb_refs</name><index pos:start="419:48" pos:end="419:51">[<expr pos:start="419:49" pos:end="419:50"><name pos:start="419:49" pos:end="419:50">L0</name></expr>]</index></name></expr>;</condition> <incr pos:start="419:54" pos:end="419:56"><expr pos:start="419:54" pos:end="419:56"><name pos:start="419:54" pos:end="419:54">i</name><operator pos:start="419:55" pos:end="419:56">++</operator></expr></incr>)</control><block type="pseudo" pos:start="421:25" pos:end="421:86"><block_content pos:start="421:25" pos:end="421:86">

                        <expr_stmt pos:start="421:25" pos:end="421:86"><expr pos:start="421:25" pos:end="421:85"><name pos:start="421:25" pos:end="421:47"><name pos:start="421:25" pos:end="421:26">sh</name><operator pos:start="421:27" pos:end="421:28">-&gt;</operator><name pos:start="421:29" pos:end="421:41">list_entry_lx</name><index pos:start="421:42" pos:end="421:44">[<expr pos:start="421:43" pos:end="421:43"><literal type="number" pos:start="421:43" pos:end="421:43">0</literal></expr>]</index><index pos:start="421:45" pos:end="421:47">[<expr pos:start="421:46" pos:end="421:46"><name pos:start="421:46" pos:end="421:46">i</name></expr>]</index></name> <operator pos:start="421:49" pos:end="421:49">=</operator> <call pos:start="421:51" pos:end="421:85"><name pos:start="421:51" pos:end="421:58">get_bits</name><argument_list pos:start="421:59" pos:end="421:85">(<argument pos:start="421:60" pos:end="421:61"><expr pos:start="421:60" pos:end="421:61"><name pos:start="421:60" pos:end="421:61">gb</name></expr></argument>, <argument pos:start="421:64" pos:end="421:84"><expr pos:start="421:64" pos:end="421:84"><call pos:start="421:64" pos:end="421:84"><name pos:start="421:64" pos:end="421:75">av_ceil_log2</name><argument_list pos:start="421:76" pos:end="421:84">(<argument pos:start="421:77" pos:end="421:83"><expr pos:start="421:77" pos:end="421:83"><name pos:start="421:77" pos:end="421:83">nb_refs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="427:17" pos:end="437:17"><if pos:start="427:17" pos:end="437:17">if <condition pos:start="427:20" pos:end="427:46">(<expr pos:start="427:21" pos:end="427:45"><name pos:start="427:21" pos:end="427:34"><name pos:start="427:21" pos:end="427:22">sh</name><operator pos:start="427:23" pos:end="427:24">-&gt;</operator><name pos:start="427:25" pos:end="427:34">slice_type</name></name> <operator pos:start="427:36" pos:end="427:37">==</operator> <name pos:start="427:39" pos:end="427:45">B_SLICE</name></expr>)</condition> <block pos:start="427:48" pos:end="437:17">{<block_content pos:start="429:21" pos:end="435:90">

                    <expr_stmt pos:start="429:21" pos:end="429:65"><expr pos:start="429:21" pos:end="429:64"><name pos:start="429:21" pos:end="429:48"><name pos:start="429:21" pos:end="429:22">sh</name><operator pos:start="429:23" pos:end="429:24">-&gt;</operator><name pos:start="429:25" pos:end="429:45">rpl_modification_flag</name><index pos:start="429:46" pos:end="429:48">[<expr pos:start="429:47" pos:end="429:47"><literal type="number" pos:start="429:47" pos:end="429:47">1</literal></expr>]</index></name> <operator pos:start="429:50" pos:end="429:50">=</operator> <call pos:start="429:52" pos:end="429:64"><name pos:start="429:52" pos:end="429:60">get_bits1</name><argument_list pos:start="429:61" pos:end="429:64">(<argument pos:start="429:62" pos:end="429:63"><expr pos:start="429:62" pos:end="429:63"><name pos:start="429:62" pos:end="429:63">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="431:21" pos:end="435:90"><if pos:start="431:21" pos:end="435:90">if <condition pos:start="431:24" pos:end="431:58">(<expr pos:start="431:25" pos:end="431:57"><name pos:start="431:25" pos:end="431:52"><name pos:start="431:25" pos:end="431:26">sh</name><operator pos:start="431:27" pos:end="431:28">-&gt;</operator><name pos:start="431:29" pos:end="431:49">rpl_modification_flag</name><index pos:start="431:50" pos:end="431:52">[<expr pos:start="431:51" pos:end="431:51"><literal type="number" pos:start="431:51" pos:end="431:51">1</literal></expr>]</index></name> <operator pos:start="431:54" pos:end="431:55">==</operator> <literal type="number" pos:start="431:57" pos:end="431:57">1</literal></expr>)</condition><block type="pseudo" pos:start="433:25" pos:end="435:90"><block_content pos:start="433:25" pos:end="435:90">

                        <for pos:start="433:25" pos:end="435:90">for <control pos:start="433:29" pos:end="433:61">(<init pos:start="433:30" pos:end="433:35"><expr pos:start="433:30" pos:end="433:34"><name pos:start="433:30" pos:end="433:30">i</name> <operator pos:start="433:32" pos:end="433:32">=</operator> <literal type="number" pos:start="433:34" pos:end="433:34">0</literal></expr>;</init> <condition pos:start="433:37" pos:end="433:56"><expr pos:start="433:37" pos:end="433:55"><name pos:start="433:37" pos:end="433:37">i</name> <operator pos:start="433:39" pos:end="433:39">&lt;</operator> <name pos:start="433:41" pos:end="433:55"><name pos:start="433:41" pos:end="433:42">sh</name><operator pos:start="433:43" pos:end="433:44">-&gt;</operator><name pos:start="433:45" pos:end="433:51">nb_refs</name><index pos:start="433:52" pos:end="433:55">[<expr pos:start="433:53" pos:end="433:54"><name pos:start="433:53" pos:end="433:54">L1</name></expr>]</index></name></expr>;</condition> <incr pos:start="433:58" pos:end="433:60"><expr pos:start="433:58" pos:end="433:60"><name pos:start="433:58" pos:end="433:58">i</name><operator pos:start="433:59" pos:end="433:60">++</operator></expr></incr>)</control><block type="pseudo" pos:start="435:29" pos:end="435:90"><block_content pos:start="435:29" pos:end="435:90">

                            <expr_stmt pos:start="435:29" pos:end="435:90"><expr pos:start="435:29" pos:end="435:89"><name pos:start="435:29" pos:end="435:51"><name pos:start="435:29" pos:end="435:30">sh</name><operator pos:start="435:31" pos:end="435:32">-&gt;</operator><name pos:start="435:33" pos:end="435:45">list_entry_lx</name><index pos:start="435:46" pos:end="435:48">[<expr pos:start="435:47" pos:end="435:47"><literal type="number" pos:start="435:47" pos:end="435:47">1</literal></expr>]</index><index pos:start="435:49" pos:end="435:51">[<expr pos:start="435:50" pos:end="435:50"><name pos:start="435:50" pos:end="435:50">i</name></expr>]</index></name> <operator pos:start="435:53" pos:end="435:53">=</operator> <call pos:start="435:55" pos:end="435:89"><name pos:start="435:55" pos:end="435:62">get_bits</name><argument_list pos:start="435:63" pos:end="435:89">(<argument pos:start="435:64" pos:end="435:65"><expr pos:start="435:64" pos:end="435:65"><name pos:start="435:64" pos:end="435:65">gb</name></expr></argument>, <argument pos:start="435:68" pos:end="435:88"><expr pos:start="435:68" pos:end="435:88"><call pos:start="435:68" pos:end="435:88"><name pos:start="435:68" pos:end="435:79">av_ceil_log2</name><argument_list pos:start="435:80" pos:end="435:88">(<argument pos:start="435:81" pos:end="435:87"><expr pos:start="435:81" pos:end="435:87"><name pos:start="435:81" pos:end="435:87">nb_refs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="443:13" pos:end="445:53"><if pos:start="443:13" pos:end="445:53">if <condition pos:start="443:16" pos:end="443:42">(<expr pos:start="443:17" pos:end="443:41"><name pos:start="443:17" pos:end="443:30"><name pos:start="443:17" pos:end="443:18">sh</name><operator pos:start="443:19" pos:end="443:20">-&gt;</operator><name pos:start="443:21" pos:end="443:30">slice_type</name></name> <operator pos:start="443:32" pos:end="443:33">==</operator> <name pos:start="443:35" pos:end="443:41">B_SLICE</name></expr>)</condition><block type="pseudo" pos:start="445:17" pos:end="445:53"><block_content pos:start="445:17" pos:end="445:53">

                <expr_stmt pos:start="445:17" pos:end="445:53"><expr pos:start="445:17" pos:end="445:52"><name pos:start="445:17" pos:end="445:36"><name pos:start="445:17" pos:end="445:18">sh</name><operator pos:start="445:19" pos:end="445:20">-&gt;</operator><name pos:start="445:21" pos:end="445:36">mvd_l1_zero_flag</name></name> <operator pos:start="445:38" pos:end="445:38">=</operator> <call pos:start="445:40" pos:end="445:52"><name pos:start="445:40" pos:end="445:48">get_bits1</name><argument_list pos:start="445:49" pos:end="445:52">(<argument pos:start="445:50" pos:end="445:51"><expr pos:start="445:50" pos:end="445:51"><name pos:start="445:50" pos:end="445:51">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="449:13" pos:end="455:40"><if pos:start="449:13" pos:end="451:52">if <condition pos:start="449:16" pos:end="449:48">(<expr pos:start="449:17" pos:end="449:47"><name pos:start="449:17" pos:end="449:47"><name pos:start="449:17" pos:end="449:17">s</name><operator pos:start="449:18" pos:end="449:19">-&gt;</operator><name pos:start="449:20" pos:end="449:22">pps</name><operator pos:start="449:23" pos:end="449:24">-&gt;</operator><name pos:start="449:25" pos:end="449:47">cabac_init_present_flag</name></name></expr>)</condition><block type="pseudo" pos:start="451:17" pos:end="451:52"><block_content pos:start="451:17" pos:end="451:52">

                <expr_stmt pos:start="451:17" pos:end="451:52"><expr pos:start="451:17" pos:end="451:51"><name pos:start="451:17" pos:end="451:35"><name pos:start="451:17" pos:end="451:18">sh</name><operator pos:start="451:19" pos:end="451:20">-&gt;</operator><name pos:start="451:21" pos:end="451:35">cabac_init_flag</name></name> <operator pos:start="451:37" pos:end="451:37">=</operator> <call pos:start="451:39" pos:end="451:51"><name pos:start="451:39" pos:end="451:47">get_bits1</name><argument_list pos:start="451:48" pos:end="451:51">(<argument pos:start="451:49" pos:end="451:50"><expr pos:start="451:49" pos:end="451:50"><name pos:start="451:49" pos:end="451:50">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="453:13" pos:end="455:40">else<block type="pseudo" pos:start="455:17" pos:end="455:40"><block_content pos:start="455:17" pos:end="455:40">

                <expr_stmt pos:start="455:17" pos:end="455:40"><expr pos:start="455:17" pos:end="455:39"><name pos:start="455:17" pos:end="455:35"><name pos:start="455:17" pos:end="455:18">sh</name><operator pos:start="455:19" pos:end="455:20">-&gt;</operator><name pos:start="455:21" pos:end="455:35">cabac_init_flag</name></name> <operator pos:start="455:37" pos:end="455:37">=</operator> <literal type="number" pos:start="455:39" pos:end="455:39">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="459:13" pos:end="459:39"><expr pos:start="459:13" pos:end="459:38"><name pos:start="459:13" pos:end="459:34"><name pos:start="459:13" pos:end="459:14">sh</name><operator pos:start="459:15" pos:end="459:16">-&gt;</operator><name pos:start="459:17" pos:end="459:34">collocated_ref_idx</name></name> <operator pos:start="459:36" pos:end="459:36">=</operator> <literal type="number" pos:start="459:38" pos:end="459:38">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="461:13" pos:end="489:13"><if pos:start="461:13" pos:end="489:13">if <condition pos:start="461:16" pos:end="461:52">(<expr pos:start="461:17" pos:end="461:51"><name pos:start="461:17" pos:end="461:51"><name pos:start="461:17" pos:end="461:18">sh</name><operator pos:start="461:19" pos:end="461:20">-&gt;</operator><name pos:start="461:21" pos:end="461:51">slice_temporal_mvp_enabled_flag</name></name></expr>)</condition> <block pos:start="461:54" pos:end="489:13">{<block_content pos:start="463:17" pos:end="487:17">

                <expr_stmt pos:start="463:17" pos:end="463:41"><expr pos:start="463:17" pos:end="463:40"><name pos:start="463:17" pos:end="463:35"><name pos:start="463:17" pos:end="463:18">sh</name><operator pos:start="463:19" pos:end="463:20">-&gt;</operator><name pos:start="463:21" pos:end="463:35">collocated_list</name></name> <operator pos:start="463:37" pos:end="463:37">=</operator> <name pos:start="463:39" pos:end="463:40">L0</name></expr>;</expr_stmt>

                <if_stmt pos:start="465:17" pos:end="467:57"><if pos:start="465:17" pos:end="467:57">if <condition pos:start="465:20" pos:end="465:46">(<expr pos:start="465:21" pos:end="465:45"><name pos:start="465:21" pos:end="465:34"><name pos:start="465:21" pos:end="465:22">sh</name><operator pos:start="465:23" pos:end="465:24">-&gt;</operator><name pos:start="465:25" pos:end="465:34">slice_type</name></name> <operator pos:start="465:36" pos:end="465:37">==</operator> <name pos:start="465:39" pos:end="465:45">B_SLICE</name></expr>)</condition><block type="pseudo" pos:start="467:21" pos:end="467:57"><block_content pos:start="467:21" pos:end="467:57">

                    <expr_stmt pos:start="467:21" pos:end="467:57"><expr pos:start="467:21" pos:end="467:56"><name pos:start="467:21" pos:end="467:39"><name pos:start="467:21" pos:end="467:22">sh</name><operator pos:start="467:23" pos:end="467:24">-&gt;</operator><name pos:start="467:25" pos:end="467:39">collocated_list</name></name> <operator pos:start="467:41" pos:end="467:41">=</operator> <operator pos:start="467:43" pos:end="467:43">!</operator><call pos:start="467:44" pos:end="467:56"><name pos:start="467:44" pos:end="467:52">get_bits1</name><argument_list pos:start="467:53" pos:end="467:56">(<argument pos:start="467:54" pos:end="467:55"><expr pos:start="467:54" pos:end="467:55"><name pos:start="467:54" pos:end="467:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="471:17" pos:end="487:17"><if pos:start="471:17" pos:end="487:17">if <condition pos:start="471:20" pos:end="471:57">(<expr pos:start="471:21" pos:end="471:56"><name pos:start="471:21" pos:end="471:52"><name pos:start="471:21" pos:end="471:22">sh</name><operator pos:start="471:23" pos:end="471:24">-&gt;</operator><name pos:start="471:25" pos:end="471:31">nb_refs</name><index pos:start="471:32" pos:end="471:52">[<expr pos:start="471:33" pos:end="471:51"><name pos:start="471:33" pos:end="471:51"><name pos:start="471:33" pos:end="471:34">sh</name><operator pos:start="471:35" pos:end="471:36">-&gt;</operator><name pos:start="471:37" pos:end="471:51">collocated_list</name></name></expr>]</index></name> <operator pos:start="471:54" pos:end="471:54">&gt;</operator> <literal type="number" pos:start="471:56" pos:end="471:56">1</literal></expr>)</condition> <block pos:start="471:59" pos:end="487:17">{<block_content pos:start="473:21" pos:end="485:21">

                    <expr_stmt pos:start="473:21" pos:end="473:68"><expr pos:start="473:21" pos:end="473:67"><name pos:start="473:21" pos:end="473:42"><name pos:start="473:21" pos:end="473:22">sh</name><operator pos:start="473:23" pos:end="473:24">-&gt;</operator><name pos:start="473:25" pos:end="473:42">collocated_ref_idx</name></name> <operator pos:start="473:44" pos:end="473:44">=</operator> <call pos:start="473:46" pos:end="473:67"><name pos:start="473:46" pos:end="473:63">get_ue_golomb_long</name><argument_list pos:start="473:64" pos:end="473:67">(<argument pos:start="473:65" pos:end="473:66"><expr pos:start="473:65" pos:end="473:66"><name pos:start="473:65" pos:end="473:66">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="475:21" pos:end="485:21"><if pos:start="475:21" pos:end="485:21">if <condition pos:start="475:24" pos:end="475:83">(<expr pos:start="475:25" pos:end="475:82"><name pos:start="475:25" pos:end="475:46"><name pos:start="475:25" pos:end="475:26">sh</name><operator pos:start="475:27" pos:end="475:28">-&gt;</operator><name pos:start="475:29" pos:end="475:46">collocated_ref_idx</name></name> <operator pos:start="475:48" pos:end="475:49">&gt;=</operator> <name pos:start="475:51" pos:end="475:82"><name pos:start="475:51" pos:end="475:52">sh</name><operator pos:start="475:53" pos:end="475:54">-&gt;</operator><name pos:start="475:55" pos:end="475:61">nb_refs</name><index pos:start="475:62" pos:end="475:82">[<expr pos:start="475:63" pos:end="475:81"><name pos:start="475:63" pos:end="475:81"><name pos:start="475:63" pos:end="475:64">sh</name><operator pos:start="475:65" pos:end="475:66">-&gt;</operator><name pos:start="475:67" pos:end="475:81">collocated_list</name></name></expr>]</index></name></expr>)</condition> <block pos:start="475:85" pos:end="485:21">{<block_content pos:start="477:25" pos:end="483:51">

                        <expr_stmt pos:start="477:25" pos:end="481:55"><expr pos:start="477:25" pos:end="481:54"><call pos:start="477:25" pos:end="481:54"><name pos:start="477:25" pos:end="477:30">av_log</name><argument_list pos:start="477:31" pos:end="481:54">(<argument pos:start="477:32" pos:end="477:39"><expr pos:start="477:32" pos:end="477:39"><name pos:start="477:32" pos:end="477:39"><name pos:start="477:32" pos:end="477:32">s</name><operator pos:start="477:33" pos:end="477:34">-&gt;</operator><name pos:start="477:35" pos:end="477:39">avctx</name></name></expr></argument>, <argument pos:start="477:42" pos:end="477:53"><expr pos:start="477:42" pos:end="477:53"><name pos:start="477:42" pos:end="477:53">AV_LOG_ERROR</name></expr></argument>,

                               <argument pos:start="479:32" pos:end="479:66"><expr pos:start="479:32" pos:end="479:66"><literal type="string" pos:start="479:32" pos:end="479:66">"Invalid collocated_ref_idx: %d.\n"</literal></expr></argument>,

                               <argument pos:start="481:32" pos:end="481:53"><expr pos:start="481:32" pos:end="481:53"><name pos:start="481:32" pos:end="481:53"><name pos:start="481:32" pos:end="481:33">sh</name><operator pos:start="481:34" pos:end="481:35">-&gt;</operator><name pos:start="481:36" pos:end="481:53">collocated_ref_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="483:25" pos:end="483:51">return <expr pos:start="483:32" pos:end="483:50"><name pos:start="483:32" pos:end="483:50">AVERROR_INVALIDDATA</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="493:13" pos:end="499:13"><if pos:start="493:13" pos:end="499:13">if <condition pos:start="493:16" pos:end="495:76">(<expr pos:start="493:17" pos:end="495:75"><operator pos:start="493:17" pos:end="493:17">(</operator><name pos:start="493:18" pos:end="493:43"><name pos:start="493:18" pos:end="493:18">s</name><operator pos:start="493:19" pos:end="493:20">-&gt;</operator><name pos:start="493:21" pos:end="493:23">pps</name><operator pos:start="493:24" pos:end="493:25">-&gt;</operator><name pos:start="493:26" pos:end="493:43">weighted_pred_flag</name></name>   <operator pos:start="493:47" pos:end="493:48">&amp;&amp;</operator> <name pos:start="493:50" pos:end="493:63"><name pos:start="493:50" pos:end="493:51">sh</name><operator pos:start="493:52" pos:end="493:53">-&gt;</operator><name pos:start="493:54" pos:end="493:63">slice_type</name></name> <operator pos:start="493:65" pos:end="493:66">==</operator> <name pos:start="493:68" pos:end="493:74">P_SLICE</name><operator pos:start="493:75" pos:end="493:75">)</operator> <operator pos:start="493:77" pos:end="493:78">||</operator>

                <operator pos:start="495:17" pos:end="495:17">(</operator><name pos:start="495:18" pos:end="495:45"><name pos:start="495:18" pos:end="495:18">s</name><operator pos:start="495:19" pos:end="495:20">-&gt;</operator><name pos:start="495:21" pos:end="495:23">pps</name><operator pos:start="495:24" pos:end="495:25">-&gt;</operator><name pos:start="495:26" pos:end="495:45">weighted_bipred_flag</name></name> <operator pos:start="495:47" pos:end="495:48">&amp;&amp;</operator> <name pos:start="495:50" pos:end="495:63"><name pos:start="495:50" pos:end="495:51">sh</name><operator pos:start="495:52" pos:end="495:53">-&gt;</operator><name pos:start="495:54" pos:end="495:63">slice_type</name></name> <operator pos:start="495:65" pos:end="495:66">==</operator> <name pos:start="495:68" pos:end="495:74">B_SLICE</name><operator pos:start="495:75" pos:end="495:75">)</operator></expr>)</condition> <block pos:start="495:78" pos:end="499:13">{<block_content pos:start="497:17" pos:end="497:41">

                <expr_stmt pos:start="497:17" pos:end="497:41"><expr pos:start="497:17" pos:end="497:40"><call pos:start="497:17" pos:end="497:40"><name pos:start="497:17" pos:end="497:33">pred_weight_table</name><argument_list pos:start="497:34" pos:end="497:40">(<argument pos:start="497:35" pos:end="497:35"><expr pos:start="497:35" pos:end="497:35"><name pos:start="497:35" pos:end="497:35">s</name></expr></argument>, <argument pos:start="497:38" pos:end="497:39"><expr pos:start="497:38" pos:end="497:39"><name pos:start="497:38" pos:end="497:39">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="503:13" pos:end="503:64"><expr pos:start="503:13" pos:end="503:63"><name pos:start="503:13" pos:end="503:34"><name pos:start="503:13" pos:end="503:14">sh</name><operator pos:start="503:15" pos:end="503:16">-&gt;</operator><name pos:start="503:17" pos:end="503:34">max_num_merge_cand</name></name> <operator pos:start="503:36" pos:end="503:36">=</operator> <literal type="number" pos:start="503:38" pos:end="503:40">5</literal> <operator pos:start="503:40" pos:end="503:40">-</operator> <call pos:start="503:42" pos:end="503:63"><name pos:start="503:42" pos:end="503:59">get_ue_golomb_long</name><argument_list pos:start="503:60" pos:end="503:63">(<argument pos:start="503:61" pos:end="503:62"><expr pos:start="503:61" pos:end="503:62"><name pos:start="503:61" pos:end="503:62">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="505:13" pos:end="515:13"><if pos:start="505:13" pos:end="515:13">if <condition pos:start="505:16" pos:end="505:73">(<expr pos:start="505:17" pos:end="505:72"><name pos:start="505:17" pos:end="505:38"><name pos:start="505:17" pos:end="505:18">sh</name><operator pos:start="505:19" pos:end="505:20">-&gt;</operator><name pos:start="505:21" pos:end="505:38">max_num_merge_cand</name></name> <operator pos:start="505:40" pos:end="505:40">&lt;</operator> <literal type="number" pos:start="505:42" pos:end="505:42">1</literal> <operator pos:start="505:44" pos:end="505:45">||</operator> <name pos:start="505:47" pos:end="505:68"><name pos:start="505:47" pos:end="505:48">sh</name><operator pos:start="505:49" pos:end="505:50">-&gt;</operator><name pos:start="505:51" pos:end="505:68">max_num_merge_cand</name></name> <operator pos:start="505:70" pos:end="505:70">&gt;</operator> <literal type="number" pos:start="505:72" pos:end="505:72">5</literal></expr>)</condition> <block pos:start="505:75" pos:end="515:13">{<block_content pos:start="507:17" pos:end="513:43">

                <expr_stmt pos:start="507:17" pos:end="511:47"><expr pos:start="507:17" pos:end="511:46"><call pos:start="507:17" pos:end="511:46"><name pos:start="507:17" pos:end="507:22">av_log</name><argument_list pos:start="507:23" pos:end="511:46">(<argument pos:start="507:24" pos:end="507:31"><expr pos:start="507:24" pos:end="507:31"><name pos:start="507:24" pos:end="507:31"><name pos:start="507:24" pos:end="507:24">s</name><operator pos:start="507:25" pos:end="507:26">-&gt;</operator><name pos:start="507:27" pos:end="507:31">avctx</name></name></expr></argument>, <argument pos:start="507:34" pos:end="507:45"><expr pos:start="507:34" pos:end="507:45"><name pos:start="507:34" pos:end="507:45">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="509:24" pos:end="509:72"><expr pos:start="509:24" pos:end="509:72"><literal type="string" pos:start="509:24" pos:end="509:72">"Invalid number of merging MVP candidates: %d.\n"</literal></expr></argument>,

                       <argument pos:start="511:24" pos:end="511:45"><expr pos:start="511:24" pos:end="511:45"><name pos:start="511:24" pos:end="511:45"><name pos:start="511:24" pos:end="511:25">sh</name><operator pos:start="511:26" pos:end="511:27">-&gt;</operator><name pos:start="511:28" pos:end="511:45">max_num_merge_cand</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="513:17" pos:end="513:43">return <expr pos:start="513:24" pos:end="513:42"><name pos:start="513:24" pos:end="513:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="521:9" pos:end="521:47"><expr pos:start="521:9" pos:end="521:46"><name pos:start="521:9" pos:end="521:26"><name pos:start="521:9" pos:end="521:10">sh</name><operator pos:start="521:11" pos:end="521:12">-&gt;</operator><name pos:start="521:13" pos:end="521:26">slice_qp_delta</name></name> <operator pos:start="521:28" pos:end="521:28">=</operator> <call pos:start="521:30" pos:end="521:46"><name pos:start="521:30" pos:end="521:42">get_se_golomb</name><argument_list pos:start="521:43" pos:end="521:46">(<argument pos:start="521:44" pos:end="521:45"><expr pos:start="521:44" pos:end="521:45"><name pos:start="521:44" pos:end="521:45">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="525:9" pos:end="537:9"><if pos:start="525:9" pos:end="531:9">if <condition pos:start="525:12" pos:end="525:67">(<expr pos:start="525:13" pos:end="525:66"><name pos:start="525:13" pos:end="525:66"><name pos:start="525:13" pos:end="525:13">s</name><operator pos:start="525:14" pos:end="525:15">-&gt;</operator><name pos:start="525:16" pos:end="525:18">pps</name><operator pos:start="525:19" pos:end="525:20">-&gt;</operator><name pos:start="525:21" pos:end="525:66">pic_slice_level_chroma_qp_offsets_present_flag</name></name></expr>)</condition> <block pos:start="525:69" pos:end="531:9">{<block_content pos:start="527:13" pos:end="529:55">

            <expr_stmt pos:start="527:13" pos:end="527:55"><expr pos:start="527:13" pos:end="527:54"><name pos:start="527:13" pos:end="527:34"><name pos:start="527:13" pos:end="527:14">sh</name><operator pos:start="527:15" pos:end="527:16">-&gt;</operator><name pos:start="527:17" pos:end="527:34">slice_cb_qp_offset</name></name> <operator pos:start="527:36" pos:end="527:36">=</operator> <call pos:start="527:38" pos:end="527:54"><name pos:start="527:38" pos:end="527:50">get_se_golomb</name><argument_list pos:start="527:51" pos:end="527:54">(<argument pos:start="527:52" pos:end="527:53"><expr pos:start="527:52" pos:end="527:53"><name pos:start="527:52" pos:end="527:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="529:13" pos:end="529:55"><expr pos:start="529:13" pos:end="529:54"><name pos:start="529:13" pos:end="529:34"><name pos:start="529:13" pos:end="529:14">sh</name><operator pos:start="529:15" pos:end="529:16">-&gt;</operator><name pos:start="529:17" pos:end="529:34">slice_cr_qp_offset</name></name> <operator pos:start="529:36" pos:end="529:36">=</operator> <call pos:start="529:38" pos:end="529:54"><name pos:start="529:38" pos:end="529:50">get_se_golomb</name><argument_list pos:start="529:51" pos:end="529:54">(<argument pos:start="529:52" pos:end="529:53"><expr pos:start="529:52" pos:end="529:53"><name pos:start="529:52" pos:end="529:53">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="531:11" pos:end="537:9">else <block pos:start="531:16" pos:end="537:9">{<block_content pos:start="533:13" pos:end="535:39">

            <expr_stmt pos:start="533:13" pos:end="533:39"><expr pos:start="533:13" pos:end="533:38"><name pos:start="533:13" pos:end="533:34"><name pos:start="533:13" pos:end="533:14">sh</name><operator pos:start="533:15" pos:end="533:16">-&gt;</operator><name pos:start="533:17" pos:end="533:34">slice_cb_qp_offset</name></name> <operator pos:start="533:36" pos:end="533:36">=</operator> <literal type="number" pos:start="533:38" pos:end="533:38">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="535:13" pos:end="535:39"><expr pos:start="535:13" pos:end="535:38"><name pos:start="535:13" pos:end="535:34"><name pos:start="535:13" pos:end="535:14">sh</name><operator pos:start="535:15" pos:end="535:16">-&gt;</operator><name pos:start="535:17" pos:end="535:34">slice_cr_qp_offset</name></name> <operator pos:start="535:36" pos:end="535:36">=</operator> <literal type="number" pos:start="535:38" pos:end="535:38">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="541:9" pos:end="547:53"><if pos:start="541:9" pos:end="543:65">if <condition pos:start="541:12" pos:end="541:55">(<expr pos:start="541:13" pos:end="541:54"><name pos:start="541:13" pos:end="541:54"><name pos:start="541:13" pos:end="541:13">s</name><operator pos:start="541:14" pos:end="541:15">-&gt;</operator><name pos:start="541:16" pos:end="541:18">pps</name><operator pos:start="541:19" pos:end="541:20">-&gt;</operator><name pos:start="541:21" pos:end="541:54">chroma_qp_offset_list_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="543:13" pos:end="543:65"><block_content pos:start="543:13" pos:end="543:65">

            <expr_stmt pos:start="543:13" pos:end="543:65"><expr pos:start="543:13" pos:end="543:64"><name pos:start="543:13" pos:end="543:48"><name pos:start="543:13" pos:end="543:14">sh</name><operator pos:start="543:15" pos:end="543:16">-&gt;</operator><name pos:start="543:17" pos:end="543:48">cu_chroma_qp_offset_enabled_flag</name></name> <operator pos:start="543:50" pos:end="543:50">=</operator> <call pos:start="543:52" pos:end="543:64"><name pos:start="543:52" pos:end="543:60">get_bits1</name><argument_list pos:start="543:61" pos:end="543:64">(<argument pos:start="543:62" pos:end="543:63"><expr pos:start="543:62" pos:end="543:63"><name pos:start="543:62" pos:end="543:63">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="545:9" pos:end="547:53">else<block type="pseudo" pos:start="547:13" pos:end="547:53"><block_content pos:start="547:13" pos:end="547:53">

            <expr_stmt pos:start="547:13" pos:end="547:53"><expr pos:start="547:13" pos:end="547:52"><name pos:start="547:13" pos:end="547:48"><name pos:start="547:13" pos:end="547:14">sh</name><operator pos:start="547:15" pos:end="547:16">-&gt;</operator><name pos:start="547:17" pos:end="547:48">cu_chroma_qp_offset_enabled_flag</name></name> <operator pos:start="547:50" pos:end="547:50">=</operator> <literal type="number" pos:start="547:52" pos:end="547:52">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="551:9" pos:end="593:9"><if pos:start="551:9" pos:end="585:9">if <condition pos:start="551:12" pos:end="551:59">(<expr pos:start="551:13" pos:end="551:58"><name pos:start="551:13" pos:end="551:58"><name pos:start="551:13" pos:end="551:13">s</name><operator pos:start="551:14" pos:end="551:15">-&gt;</operator><name pos:start="551:16" pos:end="551:18">pps</name><operator pos:start="551:19" pos:end="551:20">-&gt;</operator><name pos:start="551:21" pos:end="551:58">deblocking_filter_control_present_flag</name></name></expr>)</condition> <block pos:start="551:61" pos:end="585:9">{<block_content pos:start="553:13" pos:end="583:13">

            <decl_stmt pos:start="553:13" pos:end="553:52"><decl pos:start="553:13" pos:end="553:51"><type pos:start="553:13" pos:end="553:15"><name pos:start="553:13" pos:end="553:15">int</name></type> <name pos:start="553:17" pos:end="553:47">deblocking_filter_override_flag</name> <init pos:start="553:49" pos:end="553:51">= <expr pos:start="553:51" pos:end="553:51"><literal type="number" pos:start="553:51" pos:end="553:51">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="557:13" pos:end="559:64"><if pos:start="557:13" pos:end="559:64">if <condition pos:start="557:16" pos:end="557:64">(<expr pos:start="557:17" pos:end="557:63"><name pos:start="557:17" pos:end="557:63"><name pos:start="557:17" pos:end="557:17">s</name><operator pos:start="557:18" pos:end="557:19">-&gt;</operator><name pos:start="557:20" pos:end="557:22">pps</name><operator pos:start="557:23" pos:end="557:24">-&gt;</operator><name pos:start="557:25" pos:end="557:63">deblocking_filter_override_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="559:17" pos:end="559:64"><block_content pos:start="559:17" pos:end="559:64">

                <expr_stmt pos:start="559:17" pos:end="559:64"><expr pos:start="559:17" pos:end="559:63"><name pos:start="559:17" pos:end="559:47">deblocking_filter_override_flag</name> <operator pos:start="559:49" pos:end="559:49">=</operator> <call pos:start="559:51" pos:end="559:63"><name pos:start="559:51" pos:end="559:59">get_bits1</name><argument_list pos:start="559:60" pos:end="559:63">(<argument pos:start="559:61" pos:end="559:62"><expr pos:start="559:61" pos:end="559:62"><name pos:start="559:61" pos:end="559:62">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="563:13" pos:end="583:13"><if pos:start="563:13" pos:end="575:13">if <condition pos:start="563:16" pos:end="563:48">(<expr pos:start="563:17" pos:end="563:47"><name pos:start="563:17" pos:end="563:47">deblocking_filter_override_flag</name></expr>)</condition> <block pos:start="563:50" pos:end="575:13">{<block_content pos:start="565:17" pos:end="573:17">

                <expr_stmt pos:start="565:17" pos:end="565:67"><expr pos:start="565:17" pos:end="565:66"><name pos:start="565:17" pos:end="565:50"><name pos:start="565:17" pos:end="565:18">sh</name><operator pos:start="565:19" pos:end="565:20">-&gt;</operator><name pos:start="565:21" pos:end="565:50">disable_deblocking_filter_flag</name></name> <operator pos:start="565:52" pos:end="565:52">=</operator> <call pos:start="565:54" pos:end="565:66"><name pos:start="565:54" pos:end="565:62">get_bits1</name><argument_list pos:start="565:63" pos:end="565:66">(<argument pos:start="565:64" pos:end="565:65"><expr pos:start="565:64" pos:end="565:65"><name pos:start="565:64" pos:end="565:65">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="567:17" pos:end="573:17"><if pos:start="567:17" pos:end="573:17">if <condition pos:start="567:20" pos:end="567:56">(<expr pos:start="567:21" pos:end="567:55"><operator pos:start="567:21" pos:end="567:21">!</operator><name pos:start="567:22" pos:end="567:55"><name pos:start="567:22" pos:end="567:23">sh</name><operator pos:start="567:24" pos:end="567:25">-&gt;</operator><name pos:start="567:26" pos:end="567:55">disable_deblocking_filter_flag</name></name></expr>)</condition> <block pos:start="567:58" pos:end="573:17">{<block_content pos:start="569:21" pos:end="571:60">

                    <expr_stmt pos:start="569:21" pos:end="569:60"><expr pos:start="569:21" pos:end="569:59"><name pos:start="569:21" pos:end="569:35"><name pos:start="569:21" pos:end="569:22">sh</name><operator pos:start="569:23" pos:end="569:24">-&gt;</operator><name pos:start="569:25" pos:end="569:35">beta_offset</name></name> <operator pos:start="569:37" pos:end="569:37">=</operator> <call pos:start="569:39" pos:end="569:55"><name pos:start="569:39" pos:end="569:51">get_se_golomb</name><argument_list pos:start="569:52" pos:end="569:55">(<argument pos:start="569:53" pos:end="569:54"><expr pos:start="569:53" pos:end="569:54"><name pos:start="569:53" pos:end="569:54">gb</name></expr></argument>)</argument_list></call> <operator pos:start="569:57" pos:end="569:57">*</operator> <literal type="number" pos:start="569:59" pos:end="569:59">2</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="571:21" pos:end="571:60"><expr pos:start="571:21" pos:end="571:59"><name pos:start="571:21" pos:end="571:33"><name pos:start="571:21" pos:end="571:22">sh</name><operator pos:start="571:23" pos:end="571:24">-&gt;</operator><name pos:start="571:25" pos:end="571:33">tc_offset</name></name>   <operator pos:start="571:37" pos:end="571:37">=</operator> <call pos:start="571:39" pos:end="571:55"><name pos:start="571:39" pos:end="571:51">get_se_golomb</name><argument_list pos:start="571:52" pos:end="571:55">(<argument pos:start="571:53" pos:end="571:54"><expr pos:start="571:53" pos:end="571:54"><name pos:start="571:53" pos:end="571:54">gb</name></expr></argument>)</argument_list></call> <operator pos:start="571:57" pos:end="571:57">*</operator> <literal type="number" pos:start="571:59" pos:end="571:59">2</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="575:15" pos:end="583:13">else <block pos:start="575:20" pos:end="583:13">{<block_content pos:start="577:17" pos:end="581:71">

                <expr_stmt pos:start="577:17" pos:end="577:73"><expr pos:start="577:17" pos:end="577:72"><name pos:start="577:17" pos:end="577:50"><name pos:start="577:17" pos:end="577:18">sh</name><operator pos:start="577:19" pos:end="577:20">-&gt;</operator><name pos:start="577:21" pos:end="577:50">disable_deblocking_filter_flag</name></name> <operator pos:start="577:52" pos:end="577:52">=</operator> <name pos:start="577:54" pos:end="577:72"><name pos:start="577:54" pos:end="577:54">s</name><operator pos:start="577:55" pos:end="577:56">-&gt;</operator><name pos:start="577:57" pos:end="577:59">pps</name><operator pos:start="577:60" pos:end="577:61">-&gt;</operator><name pos:start="577:62" pos:end="577:72">disable_dbf</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="579:17" pos:end="579:73"><expr pos:start="579:17" pos:end="579:72"><name pos:start="579:17" pos:end="579:31"><name pos:start="579:17" pos:end="579:18">sh</name><operator pos:start="579:19" pos:end="579:20">-&gt;</operator><name pos:start="579:21" pos:end="579:31">beta_offset</name></name>                    <operator pos:start="579:52" pos:end="579:52">=</operator> <name pos:start="579:54" pos:end="579:72"><name pos:start="579:54" pos:end="579:54">s</name><operator pos:start="579:55" pos:end="579:56">-&gt;</operator><name pos:start="579:57" pos:end="579:59">pps</name><operator pos:start="579:60" pos:end="579:61">-&gt;</operator><name pos:start="579:62" pos:end="579:72">beta_offset</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="581:17" pos:end="581:71"><expr pos:start="581:17" pos:end="581:70"><name pos:start="581:17" pos:end="581:29"><name pos:start="581:17" pos:end="581:18">sh</name><operator pos:start="581:19" pos:end="581:20">-&gt;</operator><name pos:start="581:21" pos:end="581:29">tc_offset</name></name>                      <operator pos:start="581:52" pos:end="581:52">=</operator> <name pos:start="581:54" pos:end="581:70"><name pos:start="581:54" pos:end="581:54">s</name><operator pos:start="581:55" pos:end="581:56">-&gt;</operator><name pos:start="581:57" pos:end="581:59">pps</name><operator pos:start="581:60" pos:end="581:61">-&gt;</operator><name pos:start="581:62" pos:end="581:70">tc_offset</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="585:11" pos:end="593:9">else <block pos:start="585:16" pos:end="593:9">{<block_content pos:start="587:13" pos:end="591:51">

            <expr_stmt pos:start="587:13" pos:end="587:51"><expr pos:start="587:13" pos:end="587:50"><name pos:start="587:13" pos:end="587:46"><name pos:start="587:13" pos:end="587:14">sh</name><operator pos:start="587:15" pos:end="587:16">-&gt;</operator><name pos:start="587:17" pos:end="587:46">disable_deblocking_filter_flag</name></name> <operator pos:start="587:48" pos:end="587:48">=</operator> <literal type="number" pos:start="587:50" pos:end="587:50">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="589:13" pos:end="589:51"><expr pos:start="589:13" pos:end="589:50"><name pos:start="589:13" pos:end="589:27"><name pos:start="589:13" pos:end="589:14">sh</name><operator pos:start="589:15" pos:end="589:16">-&gt;</operator><name pos:start="589:17" pos:end="589:27">beta_offset</name></name>                    <operator pos:start="589:48" pos:end="589:48">=</operator> <literal type="number" pos:start="589:50" pos:end="589:50">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="591:13" pos:end="591:51"><expr pos:start="591:13" pos:end="591:50"><name pos:start="591:13" pos:end="591:25"><name pos:start="591:13" pos:end="591:14">sh</name><operator pos:start="591:15" pos:end="591:16">-&gt;</operator><name pos:start="591:17" pos:end="591:25">tc_offset</name></name>                      <operator pos:start="591:48" pos:end="591:48">=</operator> <literal type="number" pos:start="591:50" pos:end="591:50">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="597:9" pos:end="611:9"><if pos:start="597:9" pos:end="607:9">if <condition pos:start="597:12" pos:end="603:50">(<expr pos:start="597:13" pos:end="603:49"><name pos:start="597:13" pos:end="597:62"><name pos:start="597:13" pos:end="597:13">s</name><operator pos:start="597:14" pos:end="597:15">-&gt;</operator><name pos:start="597:16" pos:end="597:18">pps</name><operator pos:start="597:19" pos:end="597:20">-&gt;</operator><name pos:start="597:21" pos:end="597:62">seq_loop_filter_across_slices_enabled_flag</name></name> <operator pos:start="597:64" pos:end="597:65">&amp;&amp;</operator>

            <operator pos:start="599:13" pos:end="599:13">(</operator><name pos:start="599:14" pos:end="599:53"><name pos:start="599:14" pos:end="599:15">sh</name><operator pos:start="599:16" pos:end="599:17">-&gt;</operator><name pos:start="599:18" pos:end="599:50">slice_sample_adaptive_offset_flag</name><index pos:start="599:51" pos:end="599:53">[<expr pos:start="599:52" pos:end="599:52"><literal type="number" pos:start="599:52" pos:end="599:52">0</literal></expr>]</index></name> <operator pos:start="599:55" pos:end="599:56">||</operator>

             <name pos:start="601:14" pos:end="601:53"><name pos:start="601:14" pos:end="601:15">sh</name><operator pos:start="601:16" pos:end="601:17">-&gt;</operator><name pos:start="601:18" pos:end="601:50">slice_sample_adaptive_offset_flag</name><index pos:start="601:51" pos:end="601:53">[<expr pos:start="601:52" pos:end="601:52"><literal type="number" pos:start="601:52" pos:end="601:52">1</literal></expr>]</index></name> <operator pos:start="601:55" pos:end="601:56">||</operator>

             <operator pos:start="603:14" pos:end="603:14">!</operator><name pos:start="603:15" pos:end="603:48"><name pos:start="603:15" pos:end="603:16">sh</name><operator pos:start="603:17" pos:end="603:18">-&gt;</operator><name pos:start="603:19" pos:end="603:48">disable_deblocking_filter_flag</name></name><operator pos:start="603:49" pos:end="603:49">)</operator></expr>)</condition> <block pos:start="603:52" pos:end="607:9">{<block_content pos:start="605:13" pos:end="605:77">

            <expr_stmt pos:start="605:13" pos:end="605:77"><expr pos:start="605:13" pos:end="605:76"><name pos:start="605:13" pos:end="605:60"><name pos:start="605:13" pos:end="605:14">sh</name><operator pos:start="605:15" pos:end="605:16">-&gt;</operator><name pos:start="605:17" pos:end="605:60">slice_loop_filter_across_slices_enabled_flag</name></name> <operator pos:start="605:62" pos:end="605:62">=</operator> <call pos:start="605:64" pos:end="605:76"><name pos:start="605:64" pos:end="605:72">get_bits1</name><argument_list pos:start="605:73" pos:end="605:76">(<argument pos:start="605:74" pos:end="605:75"><expr pos:start="605:74" pos:end="605:75"><name pos:start="605:74" pos:end="605:75">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="607:11" pos:end="611:9">else <block pos:start="607:16" pos:end="611:9">{<block_content pos:start="609:13" pos:end="609:114">

            <expr_stmt pos:start="609:13" pos:end="609:114"><expr pos:start="609:13" pos:end="609:113"><name pos:start="609:13" pos:end="609:60"><name pos:start="609:13" pos:end="609:14">sh</name><operator pos:start="609:15" pos:end="609:16">-&gt;</operator><name pos:start="609:17" pos:end="609:60">slice_loop_filter_across_slices_enabled_flag</name></name> <operator pos:start="609:62" pos:end="609:62">=</operator> <name pos:start="609:64" pos:end="609:113"><name pos:start="609:64" pos:end="609:64">s</name><operator pos:start="609:65" pos:end="609:66">-&gt;</operator><name pos:start="609:67" pos:end="609:69">pps</name><operator pos:start="609:70" pos:end="609:71">-&gt;</operator><name pos:start="609:72" pos:end="609:113">seq_loop_filter_across_slices_enabled_flag</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="613:7" pos:end="619:5">else if <condition pos:start="613:15" pos:end="613:37">(<expr pos:start="613:16" pos:end="613:36"><operator pos:start="613:16" pos:end="613:16">!</operator><name pos:start="613:17" pos:end="613:36"><name pos:start="613:17" pos:end="613:17">s</name><operator pos:start="613:18" pos:end="613:19">-&gt;</operator><name pos:start="613:20" pos:end="613:36">slice_initialized</name></name></expr>)</condition> <block pos:start="613:39" pos:end="619:5">{<block_content pos:start="615:9" pos:end="617:35">

        <expr_stmt pos:start="615:9" pos:end="615:79"><expr pos:start="615:9" pos:end="615:78"><call pos:start="615:9" pos:end="615:78"><name pos:start="615:9" pos:end="615:14">av_log</name><argument_list pos:start="615:15" pos:end="615:78">(<argument pos:start="615:16" pos:end="615:23"><expr pos:start="615:16" pos:end="615:23"><name pos:start="615:16" pos:end="615:23"><name pos:start="615:16" pos:end="615:16">s</name><operator pos:start="615:17" pos:end="615:18">-&gt;</operator><name pos:start="615:19" pos:end="615:23">avctx</name></name></expr></argument>, <argument pos:start="615:26" pos:end="615:37"><expr pos:start="615:26" pos:end="615:37"><name pos:start="615:26" pos:end="615:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="615:40" pos:end="615:77"><expr pos:start="615:40" pos:end="615:77"><literal type="string" pos:start="615:40" pos:end="615:77">"Independent slice segment missing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="617:9" pos:end="617:35">return <expr pos:start="617:16" pos:end="617:34"><name pos:start="617:16" pos:end="617:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="623:5" pos:end="623:36"><expr pos:start="623:5" pos:end="623:35"><name pos:start="623:5" pos:end="623:31"><name pos:start="623:5" pos:end="623:6">sh</name><operator pos:start="623:7" pos:end="623:8">-&gt;</operator><name pos:start="623:9" pos:end="623:31">num_entry_point_offsets</name></name> <operator pos:start="623:33" pos:end="623:33">=</operator> <literal type="number" pos:start="623:35" pos:end="623:35">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="625:5" pos:end="705:5"><if pos:start="625:5" pos:end="705:5">if <condition pos:start="625:8" pos:end="625:79">(<expr pos:start="625:9" pos:end="625:78"><name pos:start="625:9" pos:end="625:34"><name pos:start="625:9" pos:end="625:9">s</name><operator pos:start="625:10" pos:end="625:11">-&gt;</operator><name pos:start="625:12" pos:end="625:14">pps</name><operator pos:start="625:15" pos:end="625:16">-&gt;</operator><name pos:start="625:17" pos:end="625:34">tiles_enabled_flag</name></name> <operator pos:start="625:36" pos:end="625:37">||</operator> <name pos:start="625:39" pos:end="625:78"><name pos:start="625:39" pos:end="625:39">s</name><operator pos:start="625:40" pos:end="625:41">-&gt;</operator><name pos:start="625:42" pos:end="625:44">pps</name><operator pos:start="625:45" pos:end="625:46">-&gt;</operator><name pos:start="625:47" pos:end="625:78">entropy_coding_sync_enabled_flag</name></name></expr>)</condition> <block pos:start="625:81" pos:end="705:5">{<block_content pos:start="627:9" pos:end="703:41">

        <decl_stmt pos:start="627:9" pos:end="627:66"><decl pos:start="627:9" pos:end="627:65"><type pos:start="627:9" pos:end="627:16"><name pos:start="627:9" pos:end="627:16">unsigned</name></type> <name pos:start="627:18" pos:end="627:40">num_entry_point_offsets</name> <init pos:start="627:42" pos:end="627:65">= <expr pos:start="627:44" pos:end="627:65"><call pos:start="627:44" pos:end="627:65"><name pos:start="627:44" pos:end="627:61">get_ue_golomb_long</name><argument_list pos:start="627:62" pos:end="627:65">(<argument pos:start="627:63" pos:end="627:64"><expr pos:start="627:63" pos:end="627:64"><name pos:start="627:63" pos:end="627:64">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:start="629:9" pos:end="629:78">// It would be possible to bound this tighter but this here is simpler</comment>

        <if_stmt pos:start="631:9" pos:end="637:9"><if pos:start="631:9" pos:end="637:9">if <condition pos:start="631:12" pos:end="631:60">(<expr pos:start="631:13" pos:end="631:59"><name pos:start="631:13" pos:end="631:39"><name pos:start="631:13" pos:end="631:14">sh</name><operator pos:start="631:15" pos:end="631:16">-&gt;</operator><name pos:start="631:17" pos:end="631:39">num_entry_point_offsets</name></name> <operator pos:start="631:41" pos:end="631:41">&gt;</operator> <call pos:start="631:43" pos:end="631:59"><name pos:start="631:43" pos:end="631:55">get_bits_left</name><argument_list pos:start="631:56" pos:end="631:59">(<argument pos:start="631:57" pos:end="631:58"><expr pos:start="631:57" pos:end="631:58"><name pos:start="631:57" pos:end="631:58">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="631:62" pos:end="637:9">{<block_content pos:start="633:13" pos:end="635:39">

            <expr_stmt pos:start="633:13" pos:end="633:111"><expr pos:start="633:13" pos:end="633:110"><call pos:start="633:13" pos:end="633:110"><name pos:start="633:13" pos:end="633:18">av_log</name><argument_list pos:start="633:19" pos:end="633:110">(<argument pos:start="633:20" pos:end="633:27"><expr pos:start="633:20" pos:end="633:27"><name pos:start="633:20" pos:end="633:27"><name pos:start="633:20" pos:end="633:20">s</name><operator pos:start="633:21" pos:end="633:22">-&gt;</operator><name pos:start="633:23" pos:end="633:27">avctx</name></name></expr></argument>, <argument pos:start="633:30" pos:end="633:41"><expr pos:start="633:30" pos:end="633:41"><name pos:start="633:30" pos:end="633:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="633:44" pos:end="633:84"><expr pos:start="633:44" pos:end="633:84"><literal type="string" pos:start="633:44" pos:end="633:84">"num_entry_point_offsets %d is invalid\n"</literal></expr></argument>, <argument pos:start="633:87" pos:end="633:109"><expr pos:start="633:87" pos:end="633:109"><name pos:start="633:87" pos:end="633:109">num_entry_point_offsets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="635:13" pos:end="635:39">return <expr pos:start="635:20" pos:end="635:38"><name pos:start="635:20" pos:end="635:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="641:9" pos:end="641:62"><expr pos:start="641:9" pos:end="641:61"><name pos:start="641:9" pos:end="641:35"><name pos:start="641:9" pos:end="641:10">sh</name><operator pos:start="641:11" pos:end="641:12">-&gt;</operator><name pos:start="641:13" pos:end="641:35">num_entry_point_offsets</name></name> <operator pos:start="641:37" pos:end="641:37">=</operator> <name pos:start="641:39" pos:end="641:61">num_entry_point_offsets</name></expr>;</expr_stmt>

        <if_stmt pos:start="643:9" pos:end="703:41"><if pos:start="643:9" pos:end="701:9">if <condition pos:start="643:12" pos:end="643:44">(<expr pos:start="643:13" pos:end="643:43"><name pos:start="643:13" pos:end="643:39"><name pos:start="643:13" pos:end="643:14">sh</name><operator pos:start="643:15" pos:end="643:16">-&gt;</operator><name pos:start="643:17" pos:end="643:39">num_entry_point_offsets</name></name> <operator pos:start="643:41" pos:end="643:41">&gt;</operator> <literal type="number" pos:start="643:43" pos:end="643:43">0</literal></expr>)</condition> <block pos:start="643:46" pos:end="701:9">{<block_content pos:start="645:13" pos:end="699:45">

            <decl_stmt pos:start="645:13" pos:end="645:56"><decl pos:start="645:13" pos:end="645:55"><type pos:start="645:13" pos:end="645:15"><name pos:start="645:13" pos:end="645:15">int</name></type> <name pos:start="645:17" pos:end="645:26">offset_len</name> <init pos:start="645:28" pos:end="645:55">= <expr pos:start="645:30" pos:end="645:55"><call pos:start="645:30" pos:end="645:51"><name pos:start="645:30" pos:end="645:47">get_ue_golomb_long</name><argument_list pos:start="645:48" pos:end="645:51">(<argument pos:start="645:49" pos:end="645:50"><expr pos:start="645:49" pos:end="645:50"><name pos:start="645:49" pos:end="645:50">gb</name></expr></argument>)</argument_list></call> <operator pos:start="645:53" pos:end="645:53">+</operator> <literal type="number" pos:start="645:55" pos:end="645:55">1</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="649:13" pos:end="657:13"><if pos:start="649:13" pos:end="657:13">if <condition pos:start="649:16" pos:end="649:50">(<expr pos:start="649:17" pos:end="649:49"><name pos:start="649:17" pos:end="649:46"><name pos:start="649:17" pos:end="649:26">offset_len</name> <argument_list type="generic" pos:start="649:28" pos:end="649:46">&lt; <argument pos:start="649:30" pos:end="649:44"><expr pos:start="649:30" pos:end="649:44"><literal type="number" pos:start="649:30" pos:end="649:30">1</literal> <operator pos:start="649:32" pos:end="649:33">||</operator> <name pos:start="649:35" pos:end="649:44">offset_len</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="649:48" pos:end="649:49">32</literal></expr>)</condition> <block pos:start="649:52" pos:end="657:13">{<block_content pos:start="651:17" pos:end="655:43">

                <expr_stmt pos:start="651:17" pos:end="651:48"><expr pos:start="651:17" pos:end="651:47"><name pos:start="651:17" pos:end="651:43"><name pos:start="651:17" pos:end="651:18">sh</name><operator pos:start="651:19" pos:end="651:20">-&gt;</operator><name pos:start="651:21" pos:end="651:43">num_entry_point_offsets</name></name> <operator pos:start="651:45" pos:end="651:45">=</operator> <literal type="number" pos:start="651:47" pos:end="651:47">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="653:17" pos:end="653:89"><expr pos:start="653:17" pos:end="653:88"><call pos:start="653:17" pos:end="653:88"><name pos:start="653:17" pos:end="653:22">av_log</name><argument_list pos:start="653:23" pos:end="653:88">(<argument pos:start="653:24" pos:end="653:31"><expr pos:start="653:24" pos:end="653:31"><name pos:start="653:24" pos:end="653:31"><name pos:start="653:24" pos:end="653:24">s</name><operator pos:start="653:25" pos:end="653:26">-&gt;</operator><name pos:start="653:27" pos:end="653:31">avctx</name></name></expr></argument>, <argument pos:start="653:34" pos:end="653:45"><expr pos:start="653:34" pos:end="653:45"><name pos:start="653:34" pos:end="653:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="653:48" pos:end="653:75"><expr pos:start="653:48" pos:end="653:75"><literal type="string" pos:start="653:48" pos:end="653:75">"offset_len %d is invalid\n"</literal></expr></argument>, <argument pos:start="653:78" pos:end="653:87"><expr pos:start="653:78" pos:end="653:87"><name pos:start="653:78" pos:end="653:87">offset_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="655:17" pos:end="655:43">return <expr pos:start="655:24" pos:end="655:42"><name pos:start="655:24" pos:end="655:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="661:13" pos:end="661:46"><expr pos:start="661:13" pos:end="661:45"><call pos:start="661:13" pos:end="661:45"><name pos:start="661:13" pos:end="661:20">av_freep</name><argument_list pos:start="661:21" pos:end="661:45">(<argument pos:start="661:22" pos:end="661:44"><expr pos:start="661:22" pos:end="661:44"><operator pos:start="661:22" pos:end="661:22">&amp;</operator><name pos:start="661:23" pos:end="661:44"><name pos:start="661:23" pos:end="661:24">sh</name><operator pos:start="661:25" pos:end="661:26">-&gt;</operator><name pos:start="661:27" pos:end="661:44">entry_point_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="663:13" pos:end="663:34"><expr pos:start="663:13" pos:end="663:33"><call pos:start="663:13" pos:end="663:33"><name pos:start="663:13" pos:end="663:20">av_freep</name><argument_list pos:start="663:21" pos:end="663:33">(<argument pos:start="663:22" pos:end="663:32"><expr pos:start="663:22" pos:end="663:32"><operator pos:start="663:22" pos:end="663:22">&amp;</operator><name pos:start="663:23" pos:end="663:32"><name pos:start="663:23" pos:end="663:24">sh</name><operator pos:start="663:25" pos:end="663:26">-&gt;</operator><name pos:start="663:27" pos:end="663:32">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="665:13" pos:end="665:32"><expr pos:start="665:13" pos:end="665:31"><call pos:start="665:13" pos:end="665:31"><name pos:start="665:13" pos:end="665:20">av_freep</name><argument_list pos:start="665:21" pos:end="665:31">(<argument pos:start="665:22" pos:end="665:30"><expr pos:start="665:22" pos:end="665:30"><operator pos:start="665:22" pos:end="665:22">&amp;</operator><name pos:start="665:23" pos:end="665:30"><name pos:start="665:23" pos:end="665:24">sh</name><operator pos:start="665:25" pos:end="665:26">-&gt;</operator><name pos:start="665:27" pos:end="665:30">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="667:13" pos:end="667:95"><expr pos:start="667:13" pos:end="667:94"><name pos:start="667:13" pos:end="667:34"><name pos:start="667:13" pos:end="667:14">sh</name><operator pos:start="667:15" pos:end="667:16">-&gt;</operator><name pos:start="667:17" pos:end="667:34">entry_point_offset</name></name> <operator pos:start="667:36" pos:end="667:36">=</operator> <call pos:start="667:38" pos:end="667:94"><name pos:start="667:38" pos:end="667:52">av_malloc_array</name><argument_list pos:start="667:53" pos:end="667:94">(<argument pos:start="667:54" pos:end="667:80"><expr pos:start="667:54" pos:end="667:80"><name pos:start="667:54" pos:end="667:80"><name pos:start="667:54" pos:end="667:55">sh</name><operator pos:start="667:56" pos:end="667:57">-&gt;</operator><name pos:start="667:58" pos:end="667:80">num_entry_point_offsets</name></name></expr></argument>, <argument pos:start="667:83" pos:end="667:93"><expr pos:start="667:83" pos:end="667:93"><sizeof pos:start="667:83" pos:end="667:93">sizeof<argument_list pos:start="667:89" pos:end="667:93">(<argument pos:start="667:90" pos:end="667:92"><expr pos:start="667:90" pos:end="667:92"><name pos:start="667:90" pos:end="667:92">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="669:13" pos:end="669:83"><expr pos:start="669:13" pos:end="669:82"><name pos:start="669:13" pos:end="669:22"><name pos:start="669:13" pos:end="669:14">sh</name><operator pos:start="669:15" pos:end="669:16">-&gt;</operator><name pos:start="669:17" pos:end="669:22">offset</name></name> <operator pos:start="669:24" pos:end="669:24">=</operator> <call pos:start="669:26" pos:end="669:82"><name pos:start="669:26" pos:end="669:40">av_malloc_array</name><argument_list pos:start="669:41" pos:end="669:82">(<argument pos:start="669:42" pos:end="669:68"><expr pos:start="669:42" pos:end="669:68"><name pos:start="669:42" pos:end="669:68"><name pos:start="669:42" pos:end="669:43">sh</name><operator pos:start="669:44" pos:end="669:45">-&gt;</operator><name pos:start="669:46" pos:end="669:68">num_entry_point_offsets</name></name></expr></argument>, <argument pos:start="669:71" pos:end="669:81"><expr pos:start="669:71" pos:end="669:81"><sizeof pos:start="669:71" pos:end="669:81">sizeof<argument_list pos:start="669:77" pos:end="669:81">(<argument pos:start="669:78" pos:end="669:80"><expr pos:start="669:78" pos:end="669:80"><name pos:start="669:78" pos:end="669:80">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="671:13" pos:end="671:81"><expr pos:start="671:13" pos:end="671:80"><name pos:start="671:13" pos:end="671:20"><name pos:start="671:13" pos:end="671:14">sh</name><operator pos:start="671:15" pos:end="671:16">-&gt;</operator><name pos:start="671:17" pos:end="671:20">size</name></name> <operator pos:start="671:22" pos:end="671:22">=</operator> <call pos:start="671:24" pos:end="671:80"><name pos:start="671:24" pos:end="671:38">av_malloc_array</name><argument_list pos:start="671:39" pos:end="671:80">(<argument pos:start="671:40" pos:end="671:66"><expr pos:start="671:40" pos:end="671:66"><name pos:start="671:40" pos:end="671:66"><name pos:start="671:40" pos:end="671:41">sh</name><operator pos:start="671:42" pos:end="671:43">-&gt;</operator><name pos:start="671:44" pos:end="671:66">num_entry_point_offsets</name></name></expr></argument>, <argument pos:start="671:69" pos:end="671:79"><expr pos:start="671:69" pos:end="671:79"><sizeof pos:start="671:69" pos:end="671:79">sizeof<argument_list pos:start="671:75" pos:end="671:79">(<argument pos:start="671:76" pos:end="671:78"><expr pos:start="671:76" pos:end="671:78"><name pos:start="671:76" pos:end="671:78">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="673:13" pos:end="681:13"><if pos:start="673:13" pos:end="681:13">if <condition pos:start="673:16" pos:end="673:68">(<expr pos:start="673:17" pos:end="673:67"><operator pos:start="673:17" pos:end="673:17">!</operator><name pos:start="673:18" pos:end="673:39"><name pos:start="673:18" pos:end="673:19">sh</name><operator pos:start="673:20" pos:end="673:21">-&gt;</operator><name pos:start="673:22" pos:end="673:39">entry_point_offset</name></name> <operator pos:start="673:41" pos:end="673:42">||</operator> <operator pos:start="673:44" pos:end="673:44">!</operator><name pos:start="673:45" pos:end="673:54"><name pos:start="673:45" pos:end="673:46">sh</name><operator pos:start="673:47" pos:end="673:48">-&gt;</operator><name pos:start="673:49" pos:end="673:54">offset</name></name> <operator pos:start="673:56" pos:end="673:57">||</operator> <operator pos:start="673:59" pos:end="673:59">!</operator><name pos:start="673:60" pos:end="673:67"><name pos:start="673:60" pos:end="673:61">sh</name><operator pos:start="673:62" pos:end="673:63">-&gt;</operator><name pos:start="673:64" pos:end="673:67">size</name></name></expr>)</condition> <block pos:start="673:70" pos:end="681:13">{<block_content pos:start="675:17" pos:end="679:39">

                <expr_stmt pos:start="675:17" pos:end="675:48"><expr pos:start="675:17" pos:end="675:47"><name pos:start="675:17" pos:end="675:43"><name pos:start="675:17" pos:end="675:18">sh</name><operator pos:start="675:19" pos:end="675:20">-&gt;</operator><name pos:start="675:21" pos:end="675:43">num_entry_point_offsets</name></name> <operator pos:start="675:45" pos:end="675:45">=</operator> <literal type="number" pos:start="675:47" pos:end="675:47">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="677:17" pos:end="677:78"><expr pos:start="677:17" pos:end="677:77"><call pos:start="677:17" pos:end="677:77"><name pos:start="677:17" pos:end="677:22">av_log</name><argument_list pos:start="677:23" pos:end="677:77">(<argument pos:start="677:24" pos:end="677:31"><expr pos:start="677:24" pos:end="677:31"><name pos:start="677:24" pos:end="677:31"><name pos:start="677:24" pos:end="677:24">s</name><operator pos:start="677:25" pos:end="677:26">-&gt;</operator><name pos:start="677:27" pos:end="677:31">avctx</name></name></expr></argument>, <argument pos:start="677:34" pos:end="677:45"><expr pos:start="677:34" pos:end="677:45"><name pos:start="677:34" pos:end="677:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="677:48" pos:end="677:76"><expr pos:start="677:48" pos:end="677:76"><literal type="string" pos:start="677:48" pos:end="677:76">"Failed to allocate memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="679:17" pos:end="679:39">return <expr pos:start="679:24" pos:end="679:38"><call pos:start="679:24" pos:end="679:38"><name pos:start="679:24" pos:end="679:30">AVERROR</name><argument_list pos:start="679:31" pos:end="679:38">(<argument pos:start="679:32" pos:end="679:37"><expr pos:start="679:32" pos:end="679:37"><name pos:start="679:32" pos:end="679:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <for pos:start="683:13" pos:end="689:13">for <control pos:start="683:17" pos:end="683:61">(<init pos:start="683:18" pos:end="683:23"><expr pos:start="683:18" pos:end="683:22"><name pos:start="683:18" pos:end="683:18">i</name> <operator pos:start="683:20" pos:end="683:20">=</operator> <literal type="number" pos:start="683:22" pos:end="683:22">0</literal></expr>;</init> <condition pos:start="683:25" pos:end="683:56"><expr pos:start="683:25" pos:end="683:55"><name pos:start="683:25" pos:end="683:25">i</name> <operator pos:start="683:27" pos:end="683:27">&lt;</operator> <name pos:start="683:29" pos:end="683:55"><name pos:start="683:29" pos:end="683:30">sh</name><operator pos:start="683:31" pos:end="683:32">-&gt;</operator><name pos:start="683:33" pos:end="683:55">num_entry_point_offsets</name></name></expr>;</condition> <incr pos:start="683:58" pos:end="683:60"><expr pos:start="683:58" pos:end="683:60"><name pos:start="683:58" pos:end="683:58">i</name><operator pos:start="683:59" pos:end="683:60">++</operator></expr></incr>)</control> <block pos:start="683:63" pos:end="689:13">{<block_content pos:start="685:17" pos:end="687:52">

                <decl_stmt pos:start="685:17" pos:end="685:61"><decl pos:start="685:17" pos:end="685:60"><type pos:start="685:17" pos:end="685:24"><name pos:start="685:17" pos:end="685:24">unsigned</name></type> <name pos:start="685:26" pos:end="685:28">val</name> <init pos:start="685:30" pos:end="685:60">= <expr pos:start="685:32" pos:end="685:60"><call pos:start="685:32" pos:end="685:60"><name pos:start="685:32" pos:end="685:44">get_bits_long</name><argument_list pos:start="685:45" pos:end="685:60">(<argument pos:start="685:46" pos:end="685:47"><expr pos:start="685:46" pos:end="685:47"><name pos:start="685:46" pos:end="685:47">gb</name></expr></argument>, <argument pos:start="685:50" pos:end="685:59"><expr pos:start="685:50" pos:end="685:59"><name pos:start="685:50" pos:end="685:59">offset_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="687:17" pos:end="687:52"><expr pos:start="687:17" pos:end="687:51"><name pos:start="687:17" pos:end="687:41"><name pos:start="687:17" pos:end="687:18">sh</name><operator pos:start="687:19" pos:end="687:20">-&gt;</operator><name pos:start="687:21" pos:end="687:38">entry_point_offset</name><index pos:start="687:39" pos:end="687:41">[<expr pos:start="687:40" pos:end="687:40"><name pos:start="687:40" pos:end="687:40">i</name></expr>]</index></name> <operator pos:start="687:43" pos:end="687:43">=</operator> <name pos:start="687:45" pos:end="687:47">val</name> <operator pos:start="687:49" pos:end="687:49">+</operator> <literal type="number" pos:start="687:51" pos:end="687:51">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="687:54" pos:end="687:81">// +1; // +1 to get the size</comment>

            </block_content>}</block></for>

            <if_stmt pos:start="691:13" pos:end="699:45"><if pos:start="691:13" pos:end="697:13">if <condition pos:start="691:16" pos:end="691:101">(<expr pos:start="691:17" pos:end="691:100"><name pos:start="691:17" pos:end="691:33"><name pos:start="691:17" pos:end="691:17">s</name><operator pos:start="691:18" pos:end="691:19">-&gt;</operator><name pos:start="691:20" pos:end="691:33">threads_number</name></name> <operator pos:start="691:35" pos:end="691:35">&gt;</operator> <literal type="number" pos:start="691:37" pos:end="691:37">1</literal> <operator pos:start="691:39" pos:end="691:40">&amp;&amp;</operator> <operator pos:start="691:42" pos:end="691:42">(</operator><name pos:start="691:43" pos:end="691:63"><name pos:start="691:43" pos:end="691:43">s</name><operator pos:start="691:44" pos:end="691:45">-&gt;</operator><name pos:start="691:46" pos:end="691:48">pps</name><operator pos:start="691:49" pos:end="691:50">-&gt;</operator><name pos:start="691:51" pos:end="691:63">num_tile_rows</name></name> <operator pos:start="691:65" pos:end="691:65">&gt;</operator> <literal type="number" pos:start="691:67" pos:end="691:67">1</literal> <operator pos:start="691:69" pos:end="691:70">||</operator> <name pos:start="691:72" pos:end="691:95"><name pos:start="691:72" pos:end="691:72">s</name><operator pos:start="691:73" pos:end="691:74">-&gt;</operator><name pos:start="691:75" pos:end="691:77">pps</name><operator pos:start="691:78" pos:end="691:79">-&gt;</operator><name pos:start="691:80" pos:end="691:95">num_tile_columns</name></name> <operator pos:start="691:97" pos:end="691:97">&gt;</operator> <literal type="number" pos:start="691:99" pos:end="691:99">1</literal><operator pos:start="691:100" pos:end="691:100">)</operator></expr>)</condition> <block pos:start="691:103" pos:end="697:13">{<block_content pos:start="693:17" pos:end="695:38">

                <expr_stmt pos:start="693:17" pos:end="693:45"><expr pos:start="693:17" pos:end="693:44"><name pos:start="693:17" pos:end="693:40"><name pos:start="693:17" pos:end="693:17">s</name><operator pos:start="693:18" pos:end="693:19">-&gt;</operator><name pos:start="693:20" pos:end="693:40">enable_parallel_tiles</name></name> <operator pos:start="693:42" pos:end="693:42">=</operator> <literal type="number" pos:start="693:44" pos:end="693:44">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="693:47" pos:end="693:92">// TODO: you can enable tiles in parallel here</comment>

                <expr_stmt pos:start="695:17" pos:end="695:38"><expr pos:start="695:17" pos:end="695:37"><name pos:start="695:17" pos:end="695:33"><name pos:start="695:17" pos:end="695:17">s</name><operator pos:start="695:18" pos:end="695:19">-&gt;</operator><name pos:start="695:20" pos:end="695:33">threads_number</name></name> <operator pos:start="695:35" pos:end="695:35">=</operator> <literal type="number" pos:start="695:37" pos:end="695:37">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="697:15" pos:end="699:45">else<block type="pseudo" pos:start="699:17" pos:end="699:45"><block_content pos:start="699:17" pos:end="699:45">

                <expr_stmt pos:start="699:17" pos:end="699:45"><expr pos:start="699:17" pos:end="699:44"><name pos:start="699:17" pos:end="699:40"><name pos:start="699:17" pos:end="699:17">s</name><operator pos:start="699:18" pos:end="699:19">-&gt;</operator><name pos:start="699:20" pos:end="699:40">enable_parallel_tiles</name></name> <operator pos:start="699:42" pos:end="699:42">=</operator> <literal type="number" pos:start="699:44" pos:end="699:44">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="701:11" pos:end="703:41">else<block type="pseudo" pos:start="703:13" pos:end="703:41"><block_content pos:start="703:13" pos:end="703:41">

            <expr_stmt pos:start="703:13" pos:end="703:41"><expr pos:start="703:13" pos:end="703:40"><name pos:start="703:13" pos:end="703:36"><name pos:start="703:13" pos:end="703:13">s</name><operator pos:start="703:14" pos:end="703:15">-&gt;</operator><name pos:start="703:16" pos:end="703:36">enable_parallel_tiles</name></name> <operator pos:start="703:38" pos:end="703:38">=</operator> <literal type="number" pos:start="703:40" pos:end="703:40">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="709:5" pos:end="725:5"><if pos:start="709:5" pos:end="725:5">if <condition pos:start="709:8" pos:end="709:52">(<expr pos:start="709:9" pos:end="709:51"><name pos:start="709:9" pos:end="709:51"><name pos:start="709:9" pos:end="709:9">s</name><operator pos:start="709:10" pos:end="709:11">-&gt;</operator><name pos:start="709:12" pos:end="709:14">pps</name><operator pos:start="709:15" pos:end="709:16">-&gt;</operator><name pos:start="709:17" pos:end="709:51">slice_header_extension_present_flag</name></name></expr>)</condition> <block pos:start="709:54" pos:end="725:5">{<block_content pos:start="711:9" pos:end="723:29">

        <decl_stmt pos:start="711:9" pos:end="711:53"><decl pos:start="711:9" pos:end="711:52"><type pos:start="711:9" pos:end="711:20"><name pos:start="711:9" pos:end="711:16">unsigned</name> <name pos:start="711:18" pos:end="711:20">int</name></type> <name pos:start="711:22" pos:end="711:27">length</name> <init pos:start="711:29" pos:end="711:52">= <expr pos:start="711:31" pos:end="711:52"><call pos:start="711:31" pos:end="711:52"><name pos:start="711:31" pos:end="711:48">get_ue_golomb_long</name><argument_list pos:start="711:49" pos:end="711:52">(<argument pos:start="711:50" pos:end="711:51"><expr pos:start="711:50" pos:end="711:51"><name pos:start="711:50" pos:end="711:51">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="713:9" pos:end="719:9"><if pos:start="713:9" pos:end="719:9">if <condition pos:start="713:12" pos:end="713:43">(<expr pos:start="713:13" pos:end="713:42"><name pos:start="713:13" pos:end="713:18">length</name><operator pos:start="713:19" pos:end="713:19">*</operator><literal type="number" pos:start="713:20" pos:end="713:22">8LL</literal> <operator pos:start="713:24" pos:end="713:24">&gt;</operator> <call pos:start="713:26" pos:end="713:42"><name pos:start="713:26" pos:end="713:38">get_bits_left</name><argument_list pos:start="713:39" pos:end="713:42">(<argument pos:start="713:40" pos:end="713:41"><expr pos:start="713:40" pos:end="713:41"><name pos:start="713:40" pos:end="713:41">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="713:45" pos:end="719:9">{<block_content pos:start="715:13" pos:end="717:39">

            <expr_stmt pos:start="715:13" pos:end="715:91"><expr pos:start="715:13" pos:end="715:90"><call pos:start="715:13" pos:end="715:90"><name pos:start="715:13" pos:end="715:18">av_log</name><argument_list pos:start="715:19" pos:end="715:90">(<argument pos:start="715:20" pos:end="715:27"><expr pos:start="715:20" pos:end="715:27"><name pos:start="715:20" pos:end="715:27"><name pos:start="715:20" pos:end="715:20">s</name><operator pos:start="715:21" pos:end="715:22">-&gt;</operator><name pos:start="715:23" pos:end="715:27">avctx</name></name></expr></argument>, <argument pos:start="715:30" pos:end="715:41"><expr pos:start="715:30" pos:end="715:41"><name pos:start="715:30" pos:end="715:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="715:44" pos:end="715:89"><expr pos:start="715:44" pos:end="715:89"><literal type="string" pos:start="715:44" pos:end="715:89">"too many slice_header_extension_data_bytes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="717:13" pos:end="717:39">return <expr pos:start="717:20" pos:end="717:38"><name pos:start="717:20" pos:end="717:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <for pos:start="721:9" pos:end="723:29">for <control pos:start="721:13" pos:end="721:36">(<init pos:start="721:14" pos:end="721:19"><expr pos:start="721:14" pos:end="721:18"><name pos:start="721:14" pos:end="721:14">i</name> <operator pos:start="721:16" pos:end="721:16">=</operator> <literal type="number" pos:start="721:18" pos:end="721:18">0</literal></expr>;</init> <condition pos:start="721:21" pos:end="721:31"><expr pos:start="721:21" pos:end="721:30"><name pos:start="721:21" pos:end="721:21">i</name> <operator pos:start="721:23" pos:end="721:23">&lt;</operator> <name pos:start="721:25" pos:end="721:30">length</name></expr>;</condition> <incr pos:start="721:33" pos:end="721:35"><expr pos:start="721:33" pos:end="721:35"><name pos:start="721:33" pos:end="721:33">i</name><operator pos:start="721:34" pos:end="721:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="723:13" pos:end="723:29"><block_content pos:start="723:13" pos:end="723:29">

            <expr_stmt pos:start="723:13" pos:end="723:29"><expr pos:start="723:13" pos:end="723:28"><call pos:start="723:13" pos:end="723:28"><name pos:start="723:13" pos:end="723:21">skip_bits</name><argument_list pos:start="723:22" pos:end="723:28">(<argument pos:start="723:23" pos:end="723:24"><expr pos:start="723:23" pos:end="723:24"><name pos:start="723:23" pos:end="723:24">gb</name></expr></argument>, <argument pos:start="723:27" pos:end="723:27"><expr pos:start="723:27" pos:end="723:27"><literal type="number" pos:start="723:27" pos:end="723:27">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>  <comment type="line" pos:start="723:32" pos:end="723:66">// slice_header_extension_data_byte</comment>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="729:5" pos:end="729:26">// Inferred parameters</comment>

    <expr_stmt pos:start="731:5" pos:end="731:74"><expr pos:start="731:5" pos:end="731:73"><name pos:start="731:5" pos:end="731:16"><name pos:start="731:5" pos:end="731:6">sh</name><operator pos:start="731:7" pos:end="731:8">-&gt;</operator><name pos:start="731:9" pos:end="731:16">slice_qp</name></name> <operator pos:start="731:18" pos:end="731:18">=</operator> <literal type="number" pos:start="731:20" pos:end="731:24">26U</literal> <operator pos:start="731:24" pos:end="731:24">+</operator> <name pos:start="731:26" pos:end="731:52"><name pos:start="731:26" pos:end="731:26">s</name><operator pos:start="731:27" pos:end="731:28">-&gt;</operator><name pos:start="731:29" pos:end="731:31">pps</name><operator pos:start="731:32" pos:end="731:33">-&gt;</operator><name pos:start="731:34" pos:end="731:52">pic_init_qp_minus26</name></name> <operator pos:start="731:54" pos:end="731:54">+</operator> <name pos:start="731:56" pos:end="731:73"><name pos:start="731:56" pos:end="731:57">sh</name><operator pos:start="731:58" pos:end="731:59">-&gt;</operator><name pos:start="731:60" pos:end="731:73">slice_qp_delta</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="733:5" pos:end="749:5"><if pos:start="733:5" pos:end="749:5">if <condition pos:start="733:8" pos:end="735:45">(<expr pos:start="733:9" pos:end="735:44"><name pos:start="733:9" pos:end="733:20"><name pos:start="733:9" pos:end="733:10">sh</name><operator pos:start="733:11" pos:end="733:12">-&gt;</operator><name pos:start="733:13" pos:end="733:20">slice_qp</name></name> <operator pos:start="733:22" pos:end="733:22">&gt;</operator> <literal type="number" pos:start="733:24" pos:end="733:25">51</literal> <operator pos:start="733:27" pos:end="733:28">||</operator>

        <name pos:start="735:9" pos:end="735:20"><name pos:start="735:9" pos:end="735:10">sh</name><operator pos:start="735:11" pos:end="735:12">-&gt;</operator><name pos:start="735:13" pos:end="735:20">slice_qp</name></name> <operator pos:start="735:22" pos:end="735:22">&lt;</operator> <operator pos:start="735:24" pos:end="735:24">-</operator><name pos:start="735:25" pos:end="735:44"><name pos:start="735:25" pos:end="735:25">s</name><operator pos:start="735:26" pos:end="735:27">-&gt;</operator><name pos:start="735:28" pos:end="735:30">sps</name><operator pos:start="735:31" pos:end="735:32">-&gt;</operator><name pos:start="735:33" pos:end="735:44">qp_bd_offset</name></name></expr>)</condition> <block pos:start="735:47" pos:end="749:5">{<block_content pos:start="737:9" pos:end="747:35">

        <expr_stmt pos:start="737:9" pos:end="745:38"><expr pos:start="737:9" pos:end="745:37"><call pos:start="737:9" pos:end="745:37"><name pos:start="737:9" pos:end="737:14">av_log</name><argument_list pos:start="737:15" pos:end="745:37">(<argument pos:start="737:16" pos:end="737:23"><expr pos:start="737:16" pos:end="737:23"><name pos:start="737:16" pos:end="737:23"><name pos:start="737:16" pos:end="737:16">s</name><operator pos:start="737:17" pos:end="737:18">-&gt;</operator><name pos:start="737:19" pos:end="737:23">avctx</name></name></expr></argument>, <argument pos:start="737:26" pos:end="737:37"><expr pos:start="737:26" pos:end="737:37"><name pos:start="737:26" pos:end="737:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="739:16" pos:end="741:28"><expr pos:start="739:16" pos:end="741:28"><literal type="string" pos:start="739:16" pos:end="739:60">"The slice_qp %d is outside the valid range "</literal>

               <literal type="string" pos:start="741:16" pos:end="741:28">"[%d, 51].\n"</literal></expr></argument>,

               <argument pos:start="743:16" pos:end="743:27"><expr pos:start="743:16" pos:end="743:27"><name pos:start="743:16" pos:end="743:27"><name pos:start="743:16" pos:end="743:17">sh</name><operator pos:start="743:18" pos:end="743:19">-&gt;</operator><name pos:start="743:20" pos:end="743:27">slice_qp</name></name></expr></argument>,

               <argument pos:start="745:16" pos:end="745:36"><expr pos:start="745:16" pos:end="745:36"><operator pos:start="745:16" pos:end="745:16">-</operator><name pos:start="745:17" pos:end="745:36"><name pos:start="745:17" pos:end="745:17">s</name><operator pos:start="745:18" pos:end="745:19">-&gt;</operator><name pos:start="745:20" pos:end="745:22">sps</name><operator pos:start="745:23" pos:end="745:24">-&gt;</operator><name pos:start="745:25" pos:end="745:36">qp_bd_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="747:9" pos:end="747:35">return <expr pos:start="747:16" pos:end="747:34"><name pos:start="747:16" pos:end="747:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="753:5" pos:end="753:51"><expr pos:start="753:5" pos:end="753:50"><name pos:start="753:5" pos:end="753:25"><name pos:start="753:5" pos:end="753:6">sh</name><operator pos:start="753:7" pos:end="753:8">-&gt;</operator><name pos:start="753:9" pos:end="753:25">slice_ctb_addr_rs</name></name> <operator pos:start="753:27" pos:end="753:27">=</operator> <name pos:start="753:29" pos:end="753:50"><name pos:start="753:29" pos:end="753:30">sh</name><operator pos:start="753:31" pos:end="753:32">-&gt;</operator><name pos:start="753:33" pos:end="753:50">slice_segment_addr</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="757:5" pos:end="763:5"><if pos:start="757:5" pos:end="763:5">if <condition pos:start="757:8" pos:end="757:71">(<expr pos:start="757:9" pos:end="757:70"><operator pos:start="757:9" pos:end="757:9">!</operator><name pos:start="757:10" pos:end="757:32"><name pos:start="757:10" pos:end="757:10">s</name><operator pos:start="757:11" pos:end="757:12">-&gt;</operator><name pos:start="757:13" pos:end="757:14">sh</name><operator pos:start="757:15" pos:end="757:15">.</operator><name pos:start="757:16" pos:end="757:32">slice_ctb_addr_rs</name></name> <operator pos:start="757:34" pos:end="757:35">&amp;&amp;</operator> <name pos:start="757:37" pos:end="757:70"><name pos:start="757:37" pos:end="757:37">s</name><operator pos:start="757:38" pos:end="757:39">-&gt;</operator><name pos:start="757:40" pos:end="757:41">sh</name><operator pos:start="757:42" pos:end="757:42">.</operator><name pos:start="757:43" pos:end="757:70">dependent_slice_segment_flag</name></name></expr>)</condition> <block pos:start="757:73" pos:end="763:5">{<block_content pos:start="759:9" pos:end="761:35">

        <expr_stmt pos:start="759:9" pos:end="759:70"><expr pos:start="759:9" pos:end="759:69"><call pos:start="759:9" pos:end="759:69"><name pos:start="759:9" pos:end="759:14">av_log</name><argument_list pos:start="759:15" pos:end="759:69">(<argument pos:start="759:16" pos:end="759:23"><expr pos:start="759:16" pos:end="759:23"><name pos:start="759:16" pos:end="759:23"><name pos:start="759:16" pos:end="759:16">s</name><operator pos:start="759:17" pos:end="759:18">-&gt;</operator><name pos:start="759:19" pos:end="759:23">avctx</name></name></expr></argument>, <argument pos:start="759:26" pos:end="759:37"><expr pos:start="759:26" pos:end="759:37"><name pos:start="759:26" pos:end="759:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="759:40" pos:end="759:68"><expr pos:start="759:40" pos:end="759:68"><literal type="string" pos:start="759:40" pos:end="759:68">"Impossible slice segment.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="761:9" pos:end="761:35">return <expr pos:start="761:16" pos:end="761:34"><name pos:start="761:16" pos:end="761:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="767:5" pos:end="775:5"><if pos:start="767:5" pos:end="775:5">if <condition pos:start="767:8" pos:end="767:30">(<expr pos:start="767:9" pos:end="767:29"><call pos:start="767:9" pos:end="767:25"><name pos:start="767:9" pos:end="767:21">get_bits_left</name><argument_list pos:start="767:22" pos:end="767:25">(<argument pos:start="767:23" pos:end="767:24"><expr pos:start="767:23" pos:end="767:24"><name pos:start="767:23" pos:end="767:24">gb</name></expr></argument>)</argument_list></call> <operator pos:start="767:27" pos:end="767:27">&lt;</operator> <literal type="number" pos:start="767:29" pos:end="767:29">0</literal></expr>)</condition> <block pos:start="767:32" pos:end="775:5">{<block_content pos:start="769:9" pos:end="773:35">

        <expr_stmt pos:start="769:9" pos:end="771:73"><expr pos:start="769:9" pos:end="771:72"><call pos:start="769:9" pos:end="771:72"><name pos:start="769:9" pos:end="769:14">av_log</name><argument_list pos:start="769:15" pos:end="771:72">(<argument pos:start="769:16" pos:end="769:23"><expr pos:start="769:16" pos:end="769:23"><name pos:start="769:16" pos:end="769:23"><name pos:start="769:16" pos:end="769:16">s</name><operator pos:start="769:17" pos:end="769:18">-&gt;</operator><name pos:start="769:19" pos:end="769:23">avctx</name></name></expr></argument>, <argument pos:start="769:26" pos:end="769:37"><expr pos:start="769:26" pos:end="769:37"><name pos:start="769:26" pos:end="769:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="771:16" pos:end="771:51"><expr pos:start="771:16" pos:end="771:51"><literal type="string" pos:start="771:16" pos:end="771:51">"Overread slice header by %d bits\n"</literal></expr></argument>, <argument pos:start="771:54" pos:end="771:71"><expr pos:start="771:54" pos:end="771:71"><operator pos:start="771:54" pos:end="771:54">-</operator><call pos:start="771:55" pos:end="771:71"><name pos:start="771:55" pos:end="771:67">get_bits_left</name><argument_list pos:start="771:68" pos:end="771:71">(<argument pos:start="771:69" pos:end="771:70"><expr pos:start="771:69" pos:end="771:70"><name pos:start="771:69" pos:end="771:70">gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="773:9" pos:end="773:35">return <expr pos:start="773:16" pos:end="773:34"><name pos:start="773:16" pos:end="773:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="779:5" pos:end="779:68"><expr pos:start="779:5" pos:end="779:67"><name pos:start="779:5" pos:end="779:29"><name pos:start="779:5" pos:end="779:5">s</name><operator pos:start="779:6" pos:end="779:7">-&gt;</operator><name pos:start="779:8" pos:end="779:13">HEVClc</name><operator pos:start="779:14" pos:end="779:15">-&gt;</operator><name pos:start="779:16" pos:end="779:29">first_qp_group</name></name> <operator pos:start="779:31" pos:end="779:31">=</operator> <operator pos:start="779:33" pos:end="779:33">!</operator><name pos:start="779:34" pos:end="779:67"><name pos:start="779:34" pos:end="779:34">s</name><operator pos:start="779:35" pos:end="779:36">-&gt;</operator><name pos:start="779:37" pos:end="779:38">sh</name><operator pos:start="779:39" pos:end="779:39">.</operator><name pos:start="779:40" pos:end="779:67">dependent_slice_segment_flag</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="783:5" pos:end="785:41"><if pos:start="783:5" pos:end="785:41">if <condition pos:start="783:8" pos:end="783:42">(<expr pos:start="783:9" pos:end="783:41"><operator pos:start="783:9" pos:end="783:9">!</operator><name pos:start="783:10" pos:end="783:41"><name pos:start="783:10" pos:end="783:10">s</name><operator pos:start="783:11" pos:end="783:12">-&gt;</operator><name pos:start="783:13" pos:end="783:15">pps</name><operator pos:start="783:16" pos:end="783:17">-&gt;</operator><name pos:start="783:18" pos:end="783:41">cu_qp_delta_enabled_flag</name></name></expr>)</condition><block type="pseudo" pos:start="785:9" pos:end="785:41"><block_content pos:start="785:9" pos:end="785:41">

        <expr_stmt pos:start="785:9" pos:end="785:41"><expr pos:start="785:9" pos:end="785:40"><name pos:start="785:9" pos:end="785:23"><name pos:start="785:9" pos:end="785:9">s</name><operator pos:start="785:10" pos:end="785:11">-&gt;</operator><name pos:start="785:12" pos:end="785:17">HEVClc</name><operator pos:start="785:18" pos:end="785:19">-&gt;</operator><name pos:start="785:20" pos:end="785:23">qp_y</name></name> <operator pos:start="785:25" pos:end="785:25">=</operator> <name pos:start="785:27" pos:end="785:40"><name pos:start="785:27" pos:end="785:27">s</name><operator pos:start="785:28" pos:end="785:29">-&gt;</operator><name pos:start="785:30" pos:end="785:31">sh</name><operator pos:start="785:32" pos:end="785:32">.</operator><name pos:start="785:33" pos:end="785:40">slice_qp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="789:5" pos:end="789:29"><expr pos:start="789:5" pos:end="789:28"><name pos:start="789:5" pos:end="789:24"><name pos:start="789:5" pos:end="789:5">s</name><operator pos:start="789:6" pos:end="789:7">-&gt;</operator><name pos:start="789:8" pos:end="789:24">slice_initialized</name></name> <operator pos:start="789:26" pos:end="789:26">=</operator> <literal type="number" pos:start="789:28" pos:end="789:28">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="791:5" pos:end="791:38"><expr pos:start="791:5" pos:end="791:37"><name pos:start="791:5" pos:end="791:33"><name pos:start="791:5" pos:end="791:5">s</name><operator pos:start="791:6" pos:end="791:7">-&gt;</operator><name pos:start="791:8" pos:end="791:13">HEVClc</name><operator pos:start="791:14" pos:end="791:15">-&gt;</operator><name pos:start="791:16" pos:end="791:17">tu</name><operator pos:start="791:18" pos:end="791:18">.</operator><name pos:start="791:19" pos:end="791:33">cu_qp_offset_cb</name></name> <operator pos:start="791:35" pos:end="791:35">=</operator> <literal type="number" pos:start="791:37" pos:end="791:37">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="793:5" pos:end="793:38"><expr pos:start="793:5" pos:end="793:37"><name pos:start="793:5" pos:end="793:33"><name pos:start="793:5" pos:end="793:5">s</name><operator pos:start="793:6" pos:end="793:7">-&gt;</operator><name pos:start="793:8" pos:end="793:13">HEVClc</name><operator pos:start="793:14" pos:end="793:15">-&gt;</operator><name pos:start="793:16" pos:end="793:17">tu</name><operator pos:start="793:18" pos:end="793:18">.</operator><name pos:start="793:19" pos:end="793:33">cu_qp_offset_cr</name></name> <operator pos:start="793:35" pos:end="793:35">=</operator> <literal type="number" pos:start="793:37" pos:end="793:37">0</literal></expr>;</expr_stmt>



    <return pos:start="797:5" pos:end="797:13">return <expr pos:start="797:12" pos:end="797:12"><literal type="number" pos:start="797:12" pos:end="797:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
