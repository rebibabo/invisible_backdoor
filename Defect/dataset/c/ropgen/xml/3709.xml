<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3709.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:39">bastardized_rice_decompress</name><parameter_list pos:start="1:40" pos:end="9:62">(<parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:51">ALACContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">alac</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:62"><decl pos:start="3:41" pos:end="3:62"><type pos:start="3:41" pos:end="3:62"><name pos:start="3:41" pos:end="3:47">int32_t</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:62">output_buffer</name></decl></parameter>,

                                        <parameter pos:start="5:41" pos:end="5:55"><decl pos:start="5:41" pos:end="5:55"><type pos:start="5:41" pos:end="5:55"><name pos:start="5:41" pos:end="5:43">int</name></type> <name pos:start="5:45" pos:end="5:55">output_size</name></decl></parameter>,

                                        <parameter pos:start="7:41" pos:end="7:58"><decl pos:start="7:41" pos:end="7:58"><type pos:start="7:41" pos:end="7:58"><name pos:start="7:41" pos:end="7:43">int</name></type> <name pos:start="7:45" pos:end="7:58">readsamplesize</name></decl></parameter>,

                                        <parameter pos:start="9:41" pos:end="9:61"><decl pos:start="9:41" pos:end="9:61"><type pos:start="9:41" pos:end="9:61"><name pos:start="9:41" pos:end="9:43">int</name></type> <name pos:start="9:45" pos:end="9:61">rice_history_mult</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="127:1">{<block_content pos:start="13:5" pos:end="125:5">

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:20">output_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:54"><decl pos:start="15:5" pos:end="15:53"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:24">history</name> <init pos:start="15:26" pos:end="15:53">= <expr pos:start="15:28" pos:end="15:53"><name pos:start="15:28" pos:end="15:53"><name pos:start="15:28" pos:end="15:31">alac</name><operator pos:start="15:32" pos:end="15:33">-&gt;</operator><name pos:start="15:34" pos:end="15:53">rice_initial_history</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:21">sign_modifier</name> <init pos:start="17:23" pos:end="17:25">= <expr pos:start="17:25" pos:end="17:25"><literal type="number" pos:start="17:25" pos:end="17:25">0</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="21:5" pos:end="125:5">for <control pos:start="21:9" pos:end="21:70">(<init pos:start="21:10" pos:end="21:26"><expr pos:start="21:10" pos:end="21:25"><name pos:start="21:10" pos:end="21:21">output_count</name> <operator pos:start="21:23" pos:end="21:23">=</operator> <literal type="number" pos:start="21:25" pos:end="21:25">0</literal></expr>;</init> <condition pos:start="21:28" pos:end="21:54"><expr pos:start="21:28" pos:end="21:53"><name pos:start="21:28" pos:end="21:39">output_count</name> <operator pos:start="21:41" pos:end="21:41">&lt;</operator> <name pos:start="21:43" pos:end="21:53">output_size</name></expr>;</condition> <incr pos:start="21:56" pos:end="21:69"><expr pos:start="21:56" pos:end="21:69"><name pos:start="21:56" pos:end="21:67">output_count</name><operator pos:start="21:68" pos:end="21:69">++</operator></expr></incr>)</control> <block pos:start="21:72" pos:end="125:5">{<block_content pos:start="23:9" pos:end="123:9">

        <decl_stmt pos:start="23:9" pos:end="23:18"><decl pos:start="23:9" pos:end="23:17"><type pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:15">int32_t</name></type> <name pos:start="23:17" pos:end="23:17">x</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:27"><decl pos:start="25:9" pos:end="25:26"><type pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:15">int32_t</name></type> <name pos:start="25:17" pos:end="25:26">x_modified</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:26"><decl pos:start="27:9" pos:end="27:25"><type pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:15">int32_t</name></type> <name pos:start="27:17" pos:end="27:25">final_val</name></decl>;</decl_stmt>



        <comment type="block" pos:start="31:9" pos:end="31:36">/* standard rice encoding */</comment>

        <decl_stmt pos:start="33:9" pos:end="33:14"><decl pos:start="33:9" pos:end="33:13"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:13">k</name></decl>;</decl_stmt> <comment type="block" pos:start="33:16" pos:end="33:39">/* size of extra bits */</comment>



        <comment type="block" pos:start="37:9" pos:end="37:40">/* read k, that is bits as is */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:40"><expr pos:start="39:9" pos:end="39:39"><name pos:start="39:9" pos:end="39:9">k</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <call pos:start="39:13" pos:end="39:39"><name pos:start="39:13" pos:end="39:19">av_log2</name><argument_list pos:start="39:20" pos:end="39:39">(<argument pos:start="39:21" pos:end="39:38"><expr pos:start="39:21" pos:end="39:38"><operator pos:start="39:21" pos:end="39:21">(</operator><name pos:start="39:22" pos:end="39:28">history</name> <operator pos:start="39:30" pos:end="39:31">&gt;&gt;</operator> <literal type="number" pos:start="39:33" pos:end="39:33">9</literal><operator pos:start="39:34" pos:end="39:34">)</operator> <operator pos:start="39:36" pos:end="39:36">+</operator> <literal type="number" pos:start="39:38" pos:end="39:38">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:74"><expr pos:start="41:9" pos:end="41:73"><name pos:start="41:9" pos:end="41:9">x</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <call pos:start="41:13" pos:end="41:73"><name pos:start="41:13" pos:end="41:25">decode_scalar</name><argument_list pos:start="41:26" pos:end="41:73">(<argument pos:start="41:27" pos:end="41:35"><expr pos:start="41:27" pos:end="41:35"><operator pos:start="41:27" pos:end="41:27">&amp;</operator><name pos:start="41:28" pos:end="41:35"><name pos:start="41:28" pos:end="41:31">alac</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:35">gb</name></name></expr></argument>, <argument pos:start="41:38" pos:end="41:38"><expr pos:start="41:38" pos:end="41:38"><name pos:start="41:38" pos:end="41:38">k</name></expr></argument>, <argument pos:start="41:41" pos:end="41:56"><expr pos:start="41:41" pos:end="41:56"><name pos:start="41:41" pos:end="41:56"><name pos:start="41:41" pos:end="41:44">alac</name><operator pos:start="41:45" pos:end="41:46">-&gt;</operator><name pos:start="41:47" pos:end="41:56">rice_limit</name></name></expr></argument>, <argument pos:start="41:59" pos:end="41:72"><expr pos:start="41:59" pos:end="41:72"><name pos:start="41:59" pos:end="41:72">readsamplesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:39"><expr pos:start="45:9" pos:end="45:38"><name pos:start="45:9" pos:end="45:18">x_modified</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:34">sign_modifier</name> <operator pos:start="45:36" pos:end="45:36">+</operator> <name pos:start="45:38" pos:end="45:38">x</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:41"><expr pos:start="47:9" pos:end="47:40"><name pos:start="47:9" pos:end="47:17">final_val</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <operator pos:start="47:21" pos:end="47:21">(</operator><name pos:start="47:22" pos:end="47:31">x_modified</name> <operator pos:start="47:33" pos:end="47:33">+</operator> <literal type="number" pos:start="47:35" pos:end="47:35">1</literal><operator pos:start="47:36" pos:end="47:36">)</operator> <operator pos:start="47:38" pos:end="47:38">/</operator> <literal type="number" pos:start="47:40" pos:end="47:40">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="49:44"><if pos:start="49:9" pos:end="49:44">if <condition pos:start="49:12" pos:end="49:27">(<expr pos:start="49:13" pos:end="49:26"><name pos:start="49:13" pos:end="49:22">x_modified</name> <operator pos:start="49:24" pos:end="49:24">&amp;</operator> <literal type="number" pos:start="49:26" pos:end="49:26">1</literal></expr>)</condition><block type="pseudo" pos:start="49:29" pos:end="49:44"><block_content pos:start="49:29" pos:end="49:44"> <expr_stmt pos:start="49:29" pos:end="49:44"><expr pos:start="49:29" pos:end="49:43"><name pos:start="49:29" pos:end="49:37">final_val</name> <operator pos:start="49:39" pos:end="49:40">*=</operator> <operator pos:start="49:42" pos:end="49:42">-</operator><literal type="number" pos:start="49:43" pos:end="49:43">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:48"><expr pos:start="53:9" pos:end="53:47"><name pos:start="53:9" pos:end="53:35"><name pos:start="53:9" pos:end="53:21">output_buffer</name><index pos:start="53:22" pos:end="53:35">[<expr pos:start="53:23" pos:end="53:34"><name pos:start="53:23" pos:end="53:34">output_count</name></expr>]</index></name> <operator pos:start="53:37" pos:end="53:37">=</operator> <name pos:start="53:39" pos:end="53:47">final_val</name></expr>;</expr_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:26"><expr pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:21">sign_modifier</name> <operator pos:start="57:23" pos:end="57:23">=</operator> <literal type="number" pos:start="57:25" pos:end="57:25">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="61:9" pos:end="61:36">/* now update the history */</comment>

        <expr_stmt pos:start="63:9" pos:end="65:57"><expr pos:start="63:9" pos:end="65:56"><name pos:start="63:9" pos:end="63:15">history</name> <operator pos:start="63:17" pos:end="63:18">+=</operator> <name pos:start="63:20" pos:end="63:29">x_modified</name> <operator pos:start="63:31" pos:end="63:31">*</operator> <name pos:start="63:33" pos:end="63:49">rice_history_mult</name> <operator pos:start="63:51" pos:end="63:51">-</operator>

                    <operator pos:start="65:21" pos:end="65:21">(</operator><operator pos:start="65:22" pos:end="65:22">(</operator><name pos:start="65:23" pos:end="65:29">history</name> <operator pos:start="65:31" pos:end="65:31">*</operator> <name pos:start="65:33" pos:end="65:49">rice_history_mult</name><operator pos:start="65:50" pos:end="65:50">)</operator> <operator pos:start="65:52" pos:end="65:53">&gt;&gt;</operator> <literal type="number" pos:start="65:55" pos:end="65:55">9</literal><operator pos:start="65:56" pos:end="65:56">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="69:9" pos:end="71:29"><if pos:start="69:9" pos:end="71:29">if <condition pos:start="69:12" pos:end="69:32">(<expr pos:start="69:13" pos:end="69:31"><name pos:start="69:13" pos:end="69:22">x_modified</name> <operator pos:start="69:24" pos:end="69:24">&gt;</operator> <literal type="number" pos:start="69:26" pos:end="69:31">0xffff</literal></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:29"><block_content pos:start="71:13" pos:end="71:29">

            <expr_stmt pos:start="71:13" pos:end="71:29"><expr pos:start="71:13" pos:end="71:28"><name pos:start="71:13" pos:end="71:19">history</name> <operator pos:start="71:21" pos:end="71:21">=</operator> <literal type="number" pos:start="71:23" pos:end="71:28">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="75:9" pos:end="75:63">/* special case: there may be compressed blocks of 0 */</comment>

        <if_stmt pos:start="77:9" pos:end="123:9"><if pos:start="77:9" pos:end="123:9">if <condition pos:start="77:12" pos:end="77:62">(<expr pos:start="77:13" pos:end="77:61"><operator pos:start="77:13" pos:end="77:13">(</operator><name pos:start="77:14" pos:end="77:20">history</name> <operator pos:start="77:22" pos:end="77:22">&lt;</operator> <literal type="number" pos:start="77:24" pos:end="77:26">128</literal><operator pos:start="77:27" pos:end="77:27">)</operator> <operator pos:start="77:29" pos:end="77:30">&amp;&amp;</operator> <operator pos:start="77:32" pos:end="77:32">(</operator><name pos:start="77:33" pos:end="77:44">output_count</name><operator pos:start="77:45" pos:end="77:45">+</operator><literal type="number" pos:start="77:46" pos:end="77:46">1</literal> <operator pos:start="77:48" pos:end="77:48">&lt;</operator> <name pos:start="77:50" pos:end="77:60">output_size</name><operator pos:start="77:61" pos:end="77:61">)</operator></expr>)</condition> <block pos:start="77:64" pos:end="123:9">{<block_content pos:start="79:13" pos:end="121:24">

            <decl_stmt pos:start="79:13" pos:end="79:18"><decl pos:start="79:13" pos:end="79:17"><type pos:start="79:13" pos:end="79:15"><name pos:start="79:13" pos:end="79:15">int</name></type> <name pos:start="79:17" pos:end="79:17">k</name></decl>;</decl_stmt>

            <decl_stmt pos:start="81:13" pos:end="81:36"><decl pos:start="81:13" pos:end="81:35"><type pos:start="81:13" pos:end="81:24"><name pos:start="81:13" pos:end="81:20">unsigned</name> <name pos:start="81:22" pos:end="81:24">int</name></type> <name pos:start="81:26" pos:end="81:35">block_size</name></decl>;</decl_stmt>



            <expr_stmt pos:start="85:13" pos:end="85:30"><expr pos:start="85:13" pos:end="85:29"><name pos:start="85:13" pos:end="85:25">sign_modifier</name> <operator pos:start="85:27" pos:end="85:27">=</operator> <literal type="number" pos:start="85:29" pos:end="85:29">1</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="89:13" pos:end="89:72"><expr pos:start="89:13" pos:end="89:71"><name pos:start="89:13" pos:end="89:13">k</name> <operator pos:start="89:15" pos:end="89:15">=</operator> <literal type="number" pos:start="89:17" pos:end="89:19">7</literal> <operator pos:start="89:19" pos:end="89:19">-</operator> <call pos:start="89:21" pos:end="89:36"><name pos:start="89:21" pos:end="89:27">av_log2</name><argument_list pos:start="89:28" pos:end="89:36">(<argument pos:start="89:29" pos:end="89:35"><expr pos:start="89:29" pos:end="89:35"><name pos:start="89:29" pos:end="89:35">history</name></expr></argument>)</argument_list></call> <operator pos:start="89:38" pos:end="89:38">+</operator> <operator pos:start="89:40" pos:end="89:40">(</operator><operator pos:start="89:41" pos:end="89:41">(</operator><name pos:start="89:42" pos:end="89:48">history</name> <operator pos:start="89:50" pos:end="89:50">+</operator> <literal type="number" pos:start="89:52" pos:end="89:53">16</literal><operator pos:start="89:54" pos:end="89:54">)</operator> <operator pos:start="89:56" pos:end="89:57">&gt;&gt;</operator> <literal type="number" pos:start="89:59" pos:end="89:59">6</literal> <comment type="block" pos:start="89:61" pos:end="89:70">/* / 64 */</comment><operator pos:start="89:71" pos:end="89:71">)</operator></expr>;</expr_stmt>



            <expr_stmt pos:start="93:13" pos:end="93:75"><expr pos:start="93:13" pos:end="93:74"><name pos:start="93:13" pos:end="93:22">block_size</name> <operator pos:start="93:24" pos:end="93:24">=</operator> <call pos:start="93:26" pos:end="93:74"><name pos:start="93:26" pos:end="93:38">decode_scalar</name><argument_list pos:start="93:39" pos:end="93:74">(<argument pos:start="93:40" pos:end="93:48"><expr pos:start="93:40" pos:end="93:48"><operator pos:start="93:40" pos:end="93:40">&amp;</operator><name pos:start="93:41" pos:end="93:48"><name pos:start="93:41" pos:end="93:44">alac</name><operator pos:start="93:45" pos:end="93:46">-&gt;</operator><name pos:start="93:47" pos:end="93:48">gb</name></name></expr></argument>, <argument pos:start="93:51" pos:end="93:51"><expr pos:start="93:51" pos:end="93:51"><name pos:start="93:51" pos:end="93:51">k</name></expr></argument>, <argument pos:start="93:54" pos:end="93:69"><expr pos:start="93:54" pos:end="93:69"><name pos:start="93:54" pos:end="93:69"><name pos:start="93:54" pos:end="93:57">alac</name><operator pos:start="93:58" pos:end="93:59">-&gt;</operator><name pos:start="93:60" pos:end="93:69">rice_limit</name></name></expr></argument>, <argument pos:start="93:72" pos:end="93:73"><expr pos:start="93:72" pos:end="93:73"><literal type="number" pos:start="93:72" pos:end="93:73">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="97:13" pos:end="111:13"><if pos:start="97:13" pos:end="111:13">if <condition pos:start="97:16" pos:end="97:31">(<expr pos:start="97:17" pos:end="97:30"><name pos:start="97:17" pos:end="97:26">block_size</name> <operator pos:start="97:28" pos:end="97:28">&gt;</operator> <literal type="number" pos:start="97:30" pos:end="97:30">0</literal></expr>)</condition> <block pos:start="97:33" pos:end="111:13">{<block_content pos:start="99:17" pos:end="109:43">

                <if_stmt pos:start="99:17" pos:end="105:17"><if pos:start="99:17" pos:end="105:17">if<condition pos:start="99:19" pos:end="99:60">(<expr pos:start="99:20" pos:end="99:59"><name pos:start="99:20" pos:end="99:29">block_size</name> <operator pos:start="99:31" pos:end="99:32">&gt;=</operator> <name pos:start="99:34" pos:end="99:44">output_size</name> <operator pos:start="99:46" pos:end="99:46">-</operator> <name pos:start="99:48" pos:end="99:59">output_count</name></expr>)</condition><block pos:start="99:61" pos:end="105:17">{<block_content pos:start="101:21" pos:end="103:63">

                    <expr_stmt pos:start="101:21" pos:end="101:134"><expr pos:start="101:21" pos:end="101:133"><call pos:start="101:21" pos:end="101:133"><name pos:start="101:21" pos:end="101:26">av_log</name><argument_list pos:start="101:27" pos:end="101:133">(<argument pos:start="101:28" pos:end="101:38"><expr pos:start="101:28" pos:end="101:38"><name pos:start="101:28" pos:end="101:38"><name pos:start="101:28" pos:end="101:31">alac</name><operator pos:start="101:32" pos:end="101:33">-&gt;</operator><name pos:start="101:34" pos:end="101:38">avctx</name></name></expr></argument>, <argument pos:start="101:41" pos:end="101:52"><expr pos:start="101:41" pos:end="101:52"><name pos:start="101:41" pos:end="101:52">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:55" pos:end="101:93"><expr pos:start="101:55" pos:end="101:93"><literal type="string" pos:start="101:55" pos:end="101:93">"invalid zero block size of %d %d %d\n"</literal></expr></argument>, <argument pos:start="101:96" pos:end="101:105"><expr pos:start="101:96" pos:end="101:105"><name pos:start="101:96" pos:end="101:105">block_size</name></expr></argument>, <argument pos:start="101:108" pos:end="101:118"><expr pos:start="101:108" pos:end="101:118"><name pos:start="101:108" pos:end="101:118">output_size</name></expr></argument>, <argument pos:start="101:121" pos:end="101:132"><expr pos:start="101:121" pos:end="101:132"><name pos:start="101:121" pos:end="101:132">output_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:63"><expr pos:start="103:21" pos:end="103:62"><name pos:start="103:21" pos:end="103:30">block_size</name><operator pos:start="103:31" pos:end="103:31">=</operator> <name pos:start="103:33" pos:end="103:43">output_size</name> <operator pos:start="103:45" pos:end="103:45">-</operator> <name pos:start="103:47" pos:end="103:58">output_count</name> <operator pos:start="103:60" pos:end="103:60">-</operator> <literal type="number" pos:start="103:62" pos:end="103:62">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:74"><expr pos:start="107:17" pos:end="107:73"><call pos:start="107:17" pos:end="107:73"><name pos:start="107:17" pos:end="107:22">memset</name><argument_list pos:start="107:23" pos:end="107:73">(<argument pos:start="107:24" pos:end="107:53"><expr pos:start="107:24" pos:end="107:53"><operator pos:start="107:24" pos:end="107:24">&amp;</operator><name pos:start="107:25" pos:end="107:53"><name pos:start="107:25" pos:end="107:37">output_buffer</name><index pos:start="107:38" pos:end="107:53">[<expr pos:start="107:39" pos:end="107:52"><name pos:start="107:39" pos:end="107:50">output_count</name><operator pos:start="107:51" pos:end="107:51">+</operator><literal type="number" pos:start="107:52" pos:end="107:52">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="107:56" pos:end="107:56"><expr pos:start="107:56" pos:end="107:56"><literal type="number" pos:start="107:56" pos:end="107:56">0</literal></expr></argument>, <argument pos:start="107:59" pos:end="107:72"><expr pos:start="107:59" pos:end="107:72"><name pos:start="107:59" pos:end="107:68">block_size</name> <operator pos:start="107:70" pos:end="107:70">*</operator> <literal type="number" pos:start="107:72" pos:end="107:72">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:43"><expr pos:start="109:17" pos:end="109:42"><name pos:start="109:17" pos:end="109:28">output_count</name> <operator pos:start="109:30" pos:end="109:31">+=</operator> <name pos:start="109:33" pos:end="109:42">block_size</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="115:13" pos:end="117:34"><if pos:start="115:13" pos:end="117:34">if <condition pos:start="115:16" pos:end="115:36">(<expr pos:start="115:17" pos:end="115:35"><name pos:start="115:17" pos:end="115:26">block_size</name> <operator pos:start="115:28" pos:end="115:28">&gt;</operator> <literal type="number" pos:start="115:30" pos:end="115:35">0xffff</literal></expr>)</condition><block type="pseudo" pos:start="117:17" pos:end="117:34"><block_content pos:start="117:17" pos:end="117:34">

                <expr_stmt pos:start="117:17" pos:end="117:34"><expr pos:start="117:17" pos:end="117:33"><name pos:start="117:17" pos:end="117:29">sign_modifier</name> <operator pos:start="117:31" pos:end="117:31">=</operator> <literal type="number" pos:start="117:33" pos:end="117:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="121:13" pos:end="121:24"><expr pos:start="121:13" pos:end="121:23"><name pos:start="121:13" pos:end="121:19">history</name> <operator pos:start="121:21" pos:end="121:21">=</operator> <literal type="number" pos:start="121:23" pos:end="121:23">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
