<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11350.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:33">mirror_iteration_done</name><parameter_list pos:start="1:34" pos:end="1:56">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:46"><name pos:start="1:35" pos:end="1:42">MirrorOp</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">op</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:55"><decl pos:start="1:49" pos:end="1:55"><type pos:start="1:49" pos:end="1:55"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:55">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:5">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MirrorBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:29">= <expr pos:start="5:25" pos:end="5:29"><name pos:start="5:25" pos:end="5:29"><name pos:start="5:25" pos:end="5:26">op</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:16">iovec</name></name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:21">iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:21">chunk_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:20"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:20">nb_chunks</name></decl>, <decl pos:start="11:23" pos:end="11:39"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:23" pos:end="11:39">sectors_per_chunk</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:72"><expr pos:start="15:5" pos:end="15:71"><call pos:start="15:5" pos:end="15:71"><name pos:start="15:5" pos:end="15:31">trace_mirror_iteration_done</name><argument_list pos:start="15:32" pos:end="15:71">(<argument pos:start="15:33" pos:end="15:33"><expr pos:start="15:33" pos:end="15:33"><name pos:start="15:33" pos:end="15:33">s</name></expr></argument>, <argument pos:start="15:36" pos:end="15:49"><expr pos:start="15:36" pos:end="15:49"><name pos:start="15:36" pos:end="15:49"><name pos:start="15:36" pos:end="15:37">op</name><operator pos:start="15:38" pos:end="15:39">-&gt;</operator><name pos:start="15:40" pos:end="15:49">sector_num</name></name></expr></argument>, <argument pos:start="15:52" pos:end="15:65"><expr pos:start="15:52" pos:end="15:65"><name pos:start="15:52" pos:end="15:65"><name pos:start="15:52" pos:end="15:53">op</name><operator pos:start="15:54" pos:end="15:55">-&gt;</operator><name pos:start="15:56" pos:end="15:65">nb_sectors</name></name></expr></argument>, <argument pos:start="15:68" pos:end="15:70"><expr pos:start="15:68" pos:end="15:70"><name pos:start="15:68" pos:end="15:70">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:19"><expr pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:16">in_flight</name></name><operator pos:start="19:17" pos:end="19:18">--</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:24">sectors_in_flight</name></name> <operator pos:start="21:26" pos:end="21:27">-=</operator> <name pos:start="21:29" pos:end="21:42"><name pos:start="21:29" pos:end="21:30">op</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:42">nb_sectors</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:23"><expr pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:7">iov</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <name pos:start="23:11" pos:end="23:22"><name pos:start="23:11" pos:end="23:12">op</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:18">qiov</name><operator pos:start="23:19" pos:end="23:19">.</operator><name pos:start="23:20" pos:end="23:22">iov</name></name></expr>;</expr_stmt>

    <for pos:start="25:5" pos:end="33:5">for <control pos:start="25:9" pos:end="25:39">(<init pos:start="25:10" pos:end="25:15"><expr pos:start="25:10" pos:end="25:14"><name pos:start="25:10" pos:end="25:10">i</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>;</init> <condition pos:start="25:17" pos:end="25:34"><expr pos:start="25:17" pos:end="25:33"><name pos:start="25:17" pos:end="25:17">i</name> <operator pos:start="25:19" pos:end="25:19">&lt;</operator> <name pos:start="25:21" pos:end="25:33"><name pos:start="25:21" pos:end="25:22">op</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:28">qiov</name><operator pos:start="25:29" pos:end="25:29">.</operator><name pos:start="25:30" pos:end="25:33">niov</name></name></expr>;</condition> <incr pos:start="25:36" pos:end="25:38"><expr pos:start="25:36" pos:end="25:38"><name pos:start="25:36" pos:end="25:36">i</name><operator pos:start="25:37" pos:end="25:38">++</operator></expr></incr>)</control> <block pos:start="25:41" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:28">

        <decl_stmt pos:start="27:9" pos:end="27:61"><decl pos:start="27:9" pos:end="27:60"><type pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:20">MirrorBuffer</name> <modifier pos:start="27:22" pos:end="27:22">*</modifier></type><name pos:start="27:23" pos:end="27:25">buf</name> <init pos:start="27:27" pos:end="27:60">= <expr pos:start="27:29" pos:end="27:60"><operator pos:start="27:29" pos:end="27:29">(</operator><name pos:start="27:30" pos:end="27:41">MirrorBuffer</name> <operator pos:start="27:43" pos:end="27:43">*</operator><operator pos:start="27:44" pos:end="27:44">)</operator> <name pos:start="27:46" pos:end="27:51"><name pos:start="27:46" pos:end="27:48">iov</name><index pos:start="27:49" pos:end="27:51">[<expr pos:start="27:50" pos:end="27:50"><name pos:start="27:50" pos:end="27:50">i</name></expr>]</index></name><operator pos:start="27:52" pos:end="27:52">.</operator><name pos:start="27:53" pos:end="27:60">iov_base</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:54"><expr pos:start="29:9" pos:end="29:53"><call pos:start="29:9" pos:end="29:53"><name pos:start="29:9" pos:end="29:28">QSIMPLEQ_INSERT_TAIL</name><argument_list pos:start="29:29" pos:end="29:53">(<argument pos:start="29:30" pos:end="29:41"><expr pos:start="29:30" pos:end="29:41"><operator pos:start="29:30" pos:end="29:30">&amp;</operator><name pos:start="29:31" pos:end="29:41"><name pos:start="29:31" pos:end="29:31">s</name><operator pos:start="29:32" pos:end="29:33">-&gt;</operator><name pos:start="29:34" pos:end="29:41">buf_free</name></name></expr></argument>, <argument pos:start="29:44" pos:end="29:46"><expr pos:start="29:44" pos:end="29:46"><name pos:start="29:44" pos:end="29:46">buf</name></expr></argument>, <argument pos:start="29:49" pos:end="29:52"><expr pos:start="29:49" pos:end="29:52"><name pos:start="29:49" pos:end="29:52">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:28"><expr pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:25"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:25">buf_free_count</name></name><operator pos:start="31:26" pos:end="31:27">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="37:5" pos:end="37:59"><expr pos:start="37:5" pos:end="37:58"><name pos:start="37:5" pos:end="37:21">sectors_per_chunk</name> <operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:38"><name pos:start="37:25" pos:end="37:25">s</name><operator pos:start="37:26" pos:end="37:27">-&gt;</operator><name pos:start="37:28" pos:end="37:38">granularity</name></name> <operator pos:start="37:40" pos:end="37:41">&gt;&gt;</operator> <name pos:start="37:43" pos:end="37:58">BDRV_SECTOR_BITS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:51"><expr pos:start="39:5" pos:end="39:50"><name pos:start="39:5" pos:end="39:13">chunk_num</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <name pos:start="39:17" pos:end="39:30"><name pos:start="39:17" pos:end="39:18">op</name><operator pos:start="39:19" pos:end="39:20">-&gt;</operator><name pos:start="39:21" pos:end="39:30">sector_num</name></name> <operator pos:start="39:32" pos:end="39:32">/</operator> <name pos:start="39:34" pos:end="39:50">sectors_per_chunk</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:64"><expr pos:start="41:5" pos:end="41:63"><name pos:start="41:5" pos:end="41:13">nb_chunks</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:63"><name pos:start="41:17" pos:end="41:28">DIV_ROUND_UP</name><argument_list pos:start="41:29" pos:end="41:63">(<argument pos:start="41:30" pos:end="41:43"><expr pos:start="41:30" pos:end="41:43"><name pos:start="41:30" pos:end="41:43"><name pos:start="41:30" pos:end="41:31">op</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:43">nb_sectors</name></name></expr></argument>, <argument pos:start="41:46" pos:end="41:62"><expr pos:start="41:46" pos:end="41:62"><name pos:start="41:46" pos:end="41:62">sectors_per_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:60"><expr pos:start="43:5" pos:end="43:59"><call pos:start="43:5" pos:end="43:59"><name pos:start="43:5" pos:end="43:16">bitmap_clear</name><argument_list pos:start="43:17" pos:end="43:59">(<argument pos:start="43:18" pos:end="43:36"><expr pos:start="43:18" pos:end="43:36"><name pos:start="43:18" pos:end="43:36"><name pos:start="43:18" pos:end="43:18">s</name><operator pos:start="43:19" pos:end="43:20">-&gt;</operator><name pos:start="43:21" pos:end="43:36">in_flight_bitmap</name></name></expr></argument>, <argument pos:start="43:39" pos:end="43:47"><expr pos:start="43:39" pos:end="43:47"><name pos:start="43:39" pos:end="43:47">chunk_num</name></expr></argument>, <argument pos:start="43:50" pos:end="43:58"><expr pos:start="43:50" pos:end="43:58"><name pos:start="43:50" pos:end="43:58">nb_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="55:5"><if pos:start="45:5" pos:end="55:5">if <condition pos:start="45:8" pos:end="45:17">(<expr pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:14">&gt;=</operator> <literal type="number" pos:start="45:16" pos:end="45:16">0</literal></expr>)</condition> <block pos:start="45:19" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:72">

        <if_stmt pos:start="47:9" pos:end="51:9"><if pos:start="47:9" pos:end="51:9">if <condition pos:start="47:12" pos:end="47:26">(<expr pos:start="47:13" pos:end="47:25"><name pos:start="47:13" pos:end="47:25"><name pos:start="47:13" pos:end="47:13">s</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:25">cow_bitmap</name></name></expr>)</condition> <block pos:start="47:28" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:60">

            <expr_stmt pos:start="49:13" pos:end="49:60"><expr pos:start="49:13" pos:end="49:59"><call pos:start="49:13" pos:end="49:59"><name pos:start="49:13" pos:end="49:22">bitmap_set</name><argument_list pos:start="49:23" pos:end="49:59">(<argument pos:start="49:24" pos:end="49:36"><expr pos:start="49:24" pos:end="49:36"><name pos:start="49:24" pos:end="49:36"><name pos:start="49:24" pos:end="49:24">s</name><operator pos:start="49:25" pos:end="49:26">-&gt;</operator><name pos:start="49:27" pos:end="49:36">cow_bitmap</name></name></expr></argument>, <argument pos:start="49:39" pos:end="49:47"><expr pos:start="49:39" pos:end="49:47"><name pos:start="49:39" pos:end="49:47">chunk_num</name></expr></argument>, <argument pos:start="49:50" pos:end="49:58"><expr pos:start="49:50" pos:end="49:58"><name pos:start="49:50" pos:end="49:58">nb_chunks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:72"><expr pos:start="53:9" pos:end="53:71"><name pos:start="53:9" pos:end="53:24"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:17">common</name><operator pos:start="53:18" pos:end="53:18">.</operator><name pos:start="53:19" pos:end="53:24">offset</name></name> <operator pos:start="53:26" pos:end="53:27">+=</operator> <operator pos:start="53:29" pos:end="53:29">(</operator><name pos:start="53:30" pos:end="53:37">uint64_t</name><operator pos:start="53:38" pos:end="53:38">)</operator><name pos:start="53:39" pos:end="53:52"><name pos:start="53:39" pos:end="53:40">op</name><operator pos:start="53:41" pos:end="53:42">-&gt;</operator><name pos:start="53:43" pos:end="53:52">nb_sectors</name></name> <operator pos:start="53:54" pos:end="53:54">*</operator> <name pos:start="53:56" pos:end="53:71">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:34"><expr pos:start="59:5" pos:end="59:33"><call pos:start="59:5" pos:end="59:33"><name pos:start="59:5" pos:end="59:22">qemu_iovec_destroy</name><argument_list pos:start="59:23" pos:end="59:33">(<argument pos:start="59:24" pos:end="59:32"><expr pos:start="59:24" pos:end="59:32"><operator pos:start="59:24" pos:end="59:24">&amp;</operator><name pos:start="59:25" pos:end="59:32"><name pos:start="59:25" pos:end="59:26">op</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:32">qiov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:15"><expr pos:start="61:5" pos:end="61:14"><call pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:10">g_free</name><argument_list pos:start="61:11" pos:end="61:14">(<argument pos:start="61:12" pos:end="61:13"><expr pos:start="61:12" pos:end="61:13"><name pos:start="61:12" pos:end="61:13">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:26">(<expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:25">waiting_for_io</name></name></expr>)</condition> <block pos:start="65:28" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:49">

        <expr_stmt pos:start="67:9" pos:end="67:49"><expr pos:start="67:9" pos:end="67:48"><call pos:start="67:9" pos:end="67:48"><name pos:start="67:9" pos:end="67:28">qemu_coroutine_enter</name><argument_list pos:start="67:29" pos:end="67:48">(<argument pos:start="67:30" pos:end="67:41"><expr pos:start="67:30" pos:end="67:41"><name pos:start="67:30" pos:end="67:41"><name pos:start="67:30" pos:end="67:30">s</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:38">common</name><operator pos:start="67:39" pos:end="67:39">.</operator><name pos:start="67:40" pos:end="67:41">co</name></name></expr></argument>, <argument pos:start="67:44" pos:end="67:47"><expr pos:start="67:44" pos:end="67:47"><name pos:start="67:44" pos:end="67:47">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
