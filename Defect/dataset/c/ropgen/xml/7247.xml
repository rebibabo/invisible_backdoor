<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7247.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">read_ttag</name><parameter_list pos:start="1:22" pos:end="1:70">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:37">AVFormatContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:52"><decl pos:start="1:43" pos:end="1:52"><type pos:start="1:43" pos:end="1:52"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:52">taglen</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:69"><decl pos:start="1:55" pos:end="1:69"><type pos:start="1:55" pos:end="1:69"><specifier pos:start="1:55" pos:end="1:59">const</specifier> <name pos:start="1:61" pos:end="1:64">char</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">key</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:48">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:11">q</name></decl>, <decl pos:start="5:14" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:10"/><name pos:start="5:14" pos:end="5:21"><name pos:start="5:14" pos:end="5:16">dst</name><index pos:start="5:17" pos:end="5:21">[<expr pos:start="5:18" pos:end="5:20"><literal type="number" pos:start="5:18" pos:end="5:20">512</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">len</name></decl>, <decl pos:start="7:14" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:19">dstlen</name> <init pos:start="7:21" pos:end="7:37">= <expr pos:start="7:23" pos:end="7:37"><sizeof pos:start="7:23" pos:end="7:33">sizeof<argument_list pos:start="7:29" pos:end="7:33">(<argument pos:start="7:30" pos:end="7:32"><expr pos:start="7:30" pos:end="7:32"><name pos:start="7:30" pos:end="7:32">dst</name></expr></argument>)</argument_list></sizeof> <operator pos:start="7:35" pos:end="7:35">-</operator> <literal type="number" pos:start="7:37" pos:end="7:37">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:18">genre</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:15"><expr pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:7">dst</name><index pos:start="13:8" pos:end="13:10">[<expr pos:start="13:9" pos:end="13:9"><literal type="number" pos:start="13:9" pos:end="13:9">0</literal></expr>]</index></name> <operator pos:start="13:12" pos:end="13:12">=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:15"><if pos:start="15:5" pos:end="17:15">if <condition pos:start="15:8" pos:end="15:19">(<expr pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:14">taglen</name> <operator pos:start="15:16" pos:end="15:16">&lt;</operator> <literal type="number" pos:start="15:18" pos:end="15:18">1</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:15"><block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:13"><expr pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:10">taglen</name><operator pos:start="21:11" pos:end="21:12">--</operator></expr>;</expr_stmt> <comment type="block" pos:start="21:15" pos:end="21:50">/* account for encoding type byte */</comment>



    <switch pos:start="25:5" pos:end="57:5">switch <condition pos:start="25:12" pos:end="25:28">(<expr pos:start="25:13" pos:end="25:27"><call pos:start="25:13" pos:end="25:27"><name pos:start="25:13" pos:end="25:20">get_byte</name><argument_list pos:start="25:21" pos:end="25:27">(<argument pos:start="25:22" pos:end="25:26"><expr pos:start="25:22" pos:end="25:26"><name pos:start="25:22" pos:end="25:26"><name pos:start="25:22" pos:end="25:22">s</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:26">pb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:30" pos:end="57:5">{<block_content pos:start="29:5" pos:end="55:14"> <comment type="block" pos:start="25:32" pos:end="25:50">/* encoding type */</comment>



    <case pos:start="29:5" pos:end="29:11">case <expr pos:start="29:10" pos:end="29:10"><literal type="number" pos:start="29:10" pos:end="29:10">0</literal></expr>:</case>  <comment type="block" pos:start="29:14" pos:end="29:66">/* ISO-8859-1 (0 - 255 maps directly into unicode) */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:16"><expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:9">q</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <name pos:start="31:13" pos:end="31:15">dst</name></expr>;</expr_stmt>

        <while pos:start="33:9" pos:end="39:9">while <condition pos:start="33:15" pos:end="33:24">(<expr pos:start="33:16" pos:end="33:23"><name pos:start="33:16" pos:end="33:21">taglen</name><operator pos:start="33:22" pos:end="33:23">--</operator></expr>)</condition> <block pos:start="33:26" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:81">

            <decl_stmt pos:start="35:13" pos:end="35:24"><decl pos:start="35:13" pos:end="35:23"><type pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:19">uint8_t</name></type> <name pos:start="35:21" pos:end="35:23">tmp</name></decl>;</decl_stmt>

            <macro pos:start="37:13" pos:end="37:81"><name pos:start="37:13" pos:end="37:20">PUT_UTF8</name><argument_list pos:start="37:21" pos:end="37:81">(<argument pos:start="37:22" pos:end="37:36">get_byte(s-&gt;pb)</argument>, <argument pos:start="37:39" pos:end="37:41">tmp</argument>, <argument pos:start="37:44" pos:end="37:80">if (q - dst &lt; dstlen - <literal type="number" pos:start="37:67" pos:end="37:67">1</literal>) *q++ = tmp;</argument>)</argument_list></macro>

        </block_content>}</block></while>

        <expr_stmt pos:start="41:9" pos:end="41:18"><expr pos:start="41:9" pos:end="41:17"><operator pos:start="41:9" pos:end="41:9">*</operator><name pos:start="41:10" pos:end="41:10">q</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="char" pos:start="41:14" pos:end="41:17">'\0'</literal></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>



    <case pos:start="47:5" pos:end="47:11">case <expr pos:start="47:10" pos:end="47:10"><literal type="number" pos:start="47:10" pos:end="47:10">3</literal></expr>:</case>  <comment type="block" pos:start="47:14" pos:end="47:24">/* UTF-8 */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:40"><expr pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:11">len</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:39"><name pos:start="49:15" pos:end="49:19">FFMIN</name><argument_list pos:start="49:20" pos:end="49:39">(<argument pos:start="49:21" pos:end="49:26"><expr pos:start="49:21" pos:end="49:26"><name pos:start="49:21" pos:end="49:26">taglen</name></expr></argument>, <argument pos:start="49:29" pos:end="49:38"><expr pos:start="49:29" pos:end="49:38"><name pos:start="49:29" pos:end="49:34">dstlen</name> <operator pos:start="49:36" pos:end="49:36">-</operator> <literal type="number" pos:start="49:38" pos:end="49:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:36"><expr pos:start="51:9" pos:end="51:35"><call pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:18">get_buffer</name><argument_list pos:start="51:19" pos:end="51:35">(<argument pos:start="51:20" pos:end="51:24"><expr pos:start="51:20" pos:end="51:24"><name pos:start="51:20" pos:end="51:24"><name pos:start="51:20" pos:end="51:20">s</name><operator pos:start="51:21" pos:end="51:22">-&gt;</operator><name pos:start="51:23" pos:end="51:24">pb</name></name></expr></argument>, <argument pos:start="51:27" pos:end="51:29"><expr pos:start="51:27" pos:end="51:29"><name pos:start="51:27" pos:end="51:29">dst</name></expr></argument>, <argument pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:34"><name pos:start="51:32" pos:end="51:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:21"><expr pos:start="53:9" pos:end="53:20"><name pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:11">dst</name><index pos:start="53:12" pos:end="53:16">[<expr pos:start="53:13" pos:end="53:15"><name pos:start="53:13" pos:end="53:15">len</name></expr>]</index></name> <operator pos:start="53:18" pos:end="53:18">=</operator> <literal type="number" pos:start="53:20" pos:end="53:20">0</literal></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="61:5" pos:end="67:64"><if pos:start="61:5" pos:end="67:64">if <condition pos:start="61:8" pos:end="65:36">(<expr pos:start="61:9" pos:end="65:35"><operator pos:start="61:9" pos:end="61:9">!</operator><call pos:start="61:10" pos:end="61:29"><name pos:start="61:10" pos:end="61:15">strcmp</name><argument_list pos:start="61:16" pos:end="61:29">(<argument pos:start="61:17" pos:end="61:19"><expr pos:start="61:17" pos:end="61:19"><name pos:start="61:17" pos:end="61:19">key</name></expr></argument>, <argument pos:start="61:22" pos:end="61:28"><expr pos:start="61:22" pos:end="61:28"><literal type="string" pos:start="61:22" pos:end="61:28">"genre"</literal></expr></argument>)</argument_list></call>

        <operator pos:start="63:9" pos:end="63:10">&amp;&amp;</operator> <operator pos:start="63:12" pos:end="63:12">(</operator><call pos:start="63:13" pos:end="63:39"><name pos:start="63:13" pos:end="63:18">sscanf</name><argument_list pos:start="63:19" pos:end="63:39">(<argument pos:start="63:20" pos:end="63:22"><expr pos:start="63:20" pos:end="63:22"><name pos:start="63:20" pos:end="63:22">dst</name></expr></argument>, <argument pos:start="63:25" pos:end="63:30"><expr pos:start="63:25" pos:end="63:30"><literal type="string" pos:start="63:25" pos:end="63:30">"(%d)"</literal></expr></argument>, <argument pos:start="63:33" pos:end="63:38"><expr pos:start="63:33" pos:end="63:38"><operator pos:start="63:33" pos:end="63:33">&amp;</operator><name pos:start="63:34" pos:end="63:38">genre</name></expr></argument>)</argument_list></call> <operator pos:start="63:41" pos:end="63:42">==</operator> <literal type="number" pos:start="63:44" pos:end="63:44">1</literal> <operator pos:start="63:46" pos:end="63:47">||</operator> <call pos:start="63:49" pos:end="63:73"><name pos:start="63:49" pos:end="63:54">sscanf</name><argument_list pos:start="63:55" pos:end="63:73">(<argument pos:start="63:56" pos:end="63:58"><expr pos:start="63:56" pos:end="63:58"><name pos:start="63:56" pos:end="63:58">dst</name></expr></argument>, <argument pos:start="63:61" pos:end="63:64"><expr pos:start="63:61" pos:end="63:64"><literal type="string" pos:start="63:61" pos:end="63:64">"%d"</literal></expr></argument>, <argument pos:start="63:67" pos:end="63:72"><expr pos:start="63:67" pos:end="63:72"><operator pos:start="63:67" pos:end="63:67">&amp;</operator><name pos:start="63:68" pos:end="63:72">genre</name></expr></argument>)</argument_list></call> <operator pos:start="63:75" pos:end="63:76">==</operator> <literal type="number" pos:start="63:78" pos:end="63:78">1</literal><operator pos:start="63:79" pos:end="63:79">)</operator>

        <operator pos:start="65:9" pos:end="65:10">&amp;&amp;</operator> <name pos:start="65:12" pos:end="65:16">genre</name> <operator pos:start="65:18" pos:end="65:19">&lt;=</operator> <name pos:start="65:21" pos:end="65:35">ID3v1_GENRE_MAX</name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:64"><block_content pos:start="67:9" pos:end="67:64">

        <expr_stmt pos:start="67:9" pos:end="67:64"><expr pos:start="67:9" pos:end="67:63"><call pos:start="67:9" pos:end="67:63"><name pos:start="67:9" pos:end="67:18">av_strlcpy</name><argument_list pos:start="67:19" pos:end="67:63">(<argument pos:start="67:20" pos:end="67:22"><expr pos:start="67:20" pos:end="67:22"><name pos:start="67:20" pos:end="67:22">dst</name></expr></argument>, <argument pos:start="67:25" pos:end="67:49"><expr pos:start="67:25" pos:end="67:49"><name pos:start="67:25" pos:end="67:49"><name pos:start="67:25" pos:end="67:42">ff_id3v1_genre_str</name><index pos:start="67:43" pos:end="67:49">[<expr pos:start="67:44" pos:end="67:48"><name pos:start="67:44" pos:end="67:48">genre</name></expr>]</index></name></expr></argument>, <argument pos:start="67:52" pos:end="67:62"><expr pos:start="67:52" pos:end="67:62"><sizeof pos:start="67:52" pos:end="67:62">sizeof<argument_list pos:start="67:58" pos:end="67:62">(<argument pos:start="67:59" pos:end="67:61"><expr pos:start="67:59" pos:end="67:61"><name pos:start="67:59" pos:end="67:61">dst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="73:48"><if pos:start="71:5" pos:end="73:48">if <condition pos:start="71:8" pos:end="71:13">(<expr pos:start="71:9" pos:end="71:12"><operator pos:start="71:9" pos:end="71:9">*</operator><name pos:start="71:10" pos:end="71:12">dst</name></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:48"><block_content pos:start="73:9" pos:end="73:48">

        <expr_stmt pos:start="73:9" pos:end="73:48"><expr pos:start="73:9" pos:end="73:47"><call pos:start="73:9" pos:end="73:47"><name pos:start="73:9" pos:end="73:23">av_metadata_set</name><argument_list pos:start="73:24" pos:end="73:47">(<argument pos:start="73:25" pos:end="73:36"><expr pos:start="73:25" pos:end="73:36"><operator pos:start="73:25" pos:end="73:25">&amp;</operator><name pos:start="73:26" pos:end="73:36"><name pos:start="73:26" pos:end="73:26">s</name><operator pos:start="73:27" pos:end="73:28">-&gt;</operator><name pos:start="73:29" pos:end="73:36">metadata</name></name></expr></argument>, <argument pos:start="73:39" pos:end="73:41"><expr pos:start="73:39" pos:end="73:41"><name pos:start="73:39" pos:end="73:41">key</name></expr></argument>, <argument pos:start="73:44" pos:end="73:46"><expr pos:start="73:44" pos:end="73:46"><name pos:start="73:44" pos:end="73:46">dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
