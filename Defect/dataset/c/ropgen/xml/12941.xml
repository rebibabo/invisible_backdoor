<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12941.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">cpu_common_reset</name><parameter_list pos:start="1:29" pos:end="1:43">(<parameter pos:start="1:30" pos:end="1:42"><decl pos:start="1:30" pos:end="1:42"><type pos:start="1:30" pos:end="1:39"><name pos:start="1:30" pos:end="1:37">CPUState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:5">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUClass</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cc</name> <init pos:start="5:18" pos:end="5:37">= <expr pos:start="5:20" pos:end="5:37"><call pos:start="5:20" pos:end="5:37"><name pos:start="5:20" pos:end="5:32">CPU_GET_CLASS</name><argument_list pos:start="5:33" pos:end="5:37">(<argument pos:start="5:34" pos:end="5:36"><expr pos:start="5:34" pos:end="5:36"><name pos:start="5:34" pos:end="5:36">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:42">(<expr pos:start="11:9" pos:end="11:41"><call pos:start="11:9" pos:end="11:41"><name pos:start="11:9" pos:end="11:26">qemu_loglevel_mask</name><argument_list pos:start="11:27" pos:end="11:41">(<argument pos:start="11:28" pos:end="11:40"><expr pos:start="11:28" pos:end="11:40"><name pos:start="11:28" pos:end="11:40">CPU_LOG_RESET</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="11:44" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:49">

        <expr_stmt pos:start="13:9" pos:end="13:57"><expr pos:start="13:9" pos:end="13:56"><call pos:start="13:9" pos:end="13:56"><name pos:start="13:9" pos:end="13:16">qemu_log</name><argument_list pos:start="13:17" pos:end="13:56">(<argument pos:start="13:18" pos:end="13:39"><expr pos:start="13:18" pos:end="13:39"><literal type="string" pos:start="13:18" pos:end="13:39">"CPU Reset (CPU %d)\n"</literal></expr></argument>, <argument pos:start="13:42" pos:end="13:55"><expr pos:start="13:42" pos:end="13:55"><name pos:start="13:42" pos:end="13:55"><name pos:start="13:42" pos:end="13:44">cpu</name><operator pos:start="13:45" pos:end="13:46">-&gt;</operator><name pos:start="13:47" pos:end="13:55">cpu_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:49"><expr pos:start="15:9" pos:end="15:48"><call pos:start="15:9" pos:end="15:48"><name pos:start="15:9" pos:end="15:21">log_cpu_state</name><argument_list pos:start="15:22" pos:end="15:48">(<argument pos:start="15:23" pos:end="15:25"><expr pos:start="15:23" pos:end="15:25"><name pos:start="15:23" pos:end="15:25">cpu</name></expr></argument>, <argument pos:start="15:28" pos:end="15:47"><expr pos:start="15:28" pos:end="15:47"><name pos:start="15:28" pos:end="15:47"><name pos:start="15:28" pos:end="15:29">cc</name><operator pos:start="15:30" pos:end="15:31">-&gt;</operator><name pos:start="15:32" pos:end="15:47">reset_dump_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:31"><expr pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:7">cpu</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:26">interrupt_request</name></name> <operator pos:start="21:28" pos:end="21:28">=</operator> <literal type="number" pos:start="21:30" pos:end="21:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:20"><expr pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:7">cpu</name><operator pos:start="23:8" pos:end="23:9">-&gt;</operator><name pos:start="23:10" pos:end="23:15">halted</name></name> <operator pos:start="23:17" pos:end="23:17">=</operator> <literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:23"><expr pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:7">cpu</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:18">mem_io_pc</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <literal type="number" pos:start="25:22" pos:end="25:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:26"><expr pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:7">cpu</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:21">mem_io_vaddr</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <literal type="number" pos:start="27:25" pos:end="27:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:26"><expr pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:7">cpu</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:21">icount_extra</name></name> <operator pos:start="29:23" pos:end="29:23">=</operator> <literal type="number" pos:start="29:25" pos:end="29:25">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:29"><expr pos:start="31:5" pos:end="31:28"><name pos:start="31:5" pos:end="31:24"><name pos:start="31:5" pos:end="31:7">cpu</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:20">icount_decr</name><operator pos:start="31:21" pos:end="31:21">.</operator><name pos:start="31:22" pos:end="31:24">u32</name></name> <operator pos:start="31:26" pos:end="31:26">=</operator> <literal type="number" pos:start="31:28" pos:end="31:28">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:7">cpu</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:18">can_do_io</name></name> <operator pos:start="33:20" pos:end="33:20">=</operator> <literal type="number" pos:start="33:22" pos:end="33:22">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:30"><expr pos:start="35:5" pos:end="35:29"><name pos:start="35:5" pos:end="35:24"><name pos:start="35:5" pos:end="35:7">cpu</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:24">exception_index</name></name> <operator pos:start="35:26" pos:end="35:26">=</operator> <operator pos:start="35:28" pos:end="35:28">-</operator><literal type="number" pos:start="35:29" pos:end="35:29">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:32"><expr pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:7">cpu</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:23">crash_occurred</name></name> <operator pos:start="37:25" pos:end="37:25">=</operator> <name pos:start="37:27" pos:end="37:31">false</name></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="57:5"><if pos:start="41:5" pos:end="57:5">if <condition pos:start="41:8" pos:end="41:22">(<expr pos:start="41:9" pos:end="41:21"><call pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:19">tcg_enabled</name><argument_list pos:start="41:20" pos:end="41:21">()</argument_list></call></expr>)</condition> <block pos:start="41:24" pos:end="57:5">{<block_content pos:start="43:9" pos:end="56:0">

        <for pos:start="43:9" pos:end="52:0">for <control pos:start="43:13" pos:end="43:47">(<init pos:start="43:14" pos:end="43:19"><expr pos:start="43:14" pos:end="43:18"><name pos:start="43:14" pos:end="43:14">i</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <literal type="number" pos:start="43:18" pos:end="43:18">0</literal></expr>;</init> <condition pos:start="43:21" pos:end="43:42"><expr pos:start="43:21" pos:end="43:41"><name pos:start="43:21" pos:end="43:21">i</name> <operator pos:start="43:23" pos:end="43:23">&lt;</operator> <name pos:start="43:25" pos:end="43:41">TB_JMP_CACHE_SIZE</name></expr>;</condition> <incr pos:start="43:44" pos:end="43:46"><expr pos:start="43:44" pos:end="43:46"><operator pos:start="43:44" pos:end="43:45">++</operator><name pos:start="43:46" pos:end="43:46">i</name></expr></incr>)</control> <block pos:start="43:49" pos:end="52:0">{<block_content pos:start="45:13" pos:end="45:52">

            <expr_stmt pos:start="45:13" pos:end="45:52"><expr pos:start="45:13" pos:end="45:51"><call pos:start="45:13" pos:end="45:51"><name pos:start="45:13" pos:end="45:22">atomic_set</name><argument_list pos:start="45:23" pos:end="45:51">(<argument pos:start="45:24" pos:end="45:44"><expr pos:start="45:24" pos:end="45:44"><operator pos:start="45:24" pos:end="45:24">&amp;</operator><name pos:start="45:25" pos:end="45:44"><name pos:start="45:25" pos:end="45:27">cpu</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:41">tb_jmp_cache</name><index pos:start="45:42" pos:end="45:44">[<expr pos:start="45:43" pos:end="45:43"><name pos:start="45:43" pos:end="45:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="45:47" pos:end="45:50"><expr pos:start="45:47" pos:end="45:50"><name pos:start="45:47" pos:end="45:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



<cpp:ifdef pos:start="51:1" pos:end="51:21">#<cpp:directive pos:start="51:2" pos:end="51:6">ifdef</cpp:directive> <name pos:start="51:8" pos:end="51:21">CONFIG_SOFTMMU</name></cpp:ifdef>

        <expr_stmt pos:start="53:9" pos:end="56:0"><expr pos:start="53:9" pos:end="53:25"><call pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:17">tlb_flush</name><argument_list pos:start="53:18" pos:end="53:25">(<argument pos:start="53:19" pos:end="53:21"><expr pos:start="53:19" pos:end="53:21"><name pos:start="53:19" pos:end="53:21">cpu</name></expr></argument>, <argument pos:start="53:24" pos:end="53:24"><expr pos:start="53:24" pos:end="53:24"><literal type="number" pos:start="53:24" pos:end="53:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
