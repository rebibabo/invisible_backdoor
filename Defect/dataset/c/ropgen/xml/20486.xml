<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20486.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">ivshmem_realize</name><parameter_list pos:start="1:28" pos:end="1:57">(<parameter pos:start="1:29" pos:end="1:42"><decl pos:start="1:29" pos:end="1:42"><type pos:start="1:29" pos:end="1:42"><name pos:start="1:29" pos:end="1:37">PCIDevice</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">dev</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:56"><decl pos:start="1:45" pos:end="1:56"><type pos:start="1:45" pos:end="1:56"><name pos:start="1:45" pos:end="1:49">Error</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier><modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:56">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:38">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">IVShmemState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:19">s</name> <init pos:start="5:21" pos:end="5:41">= <expr pos:start="5:23" pos:end="5:41"><call pos:start="5:23" pos:end="5:41"><name pos:start="5:23" pos:end="5:36">IVSHMEM_COMMON</name><argument_list pos:start="5:37" pos:end="5:41">(<argument pos:start="5:38" pos:end="5:40"><expr pos:start="5:38" pos:end="5:40"><name pos:start="5:38" pos:end="5:40">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="15:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:25">(<expr pos:start="9:9" pos:end="9:24"><operator pos:start="9:9" pos:end="9:9">!</operator><call pos:start="9:10" pos:end="9:24"><name pos:start="9:10" pos:end="9:22">qtest_enabled</name><argument_list pos:start="9:23" pos:end="9:24">()</argument_list></call></expr>)</condition> <block pos:start="9:27" pos:end="15:5">{<block_content pos:start="11:9" pos:end="13:53">

        <expr_stmt pos:start="11:9" pos:end="13:53"><expr pos:start="11:9" pos:end="13:52"><call pos:start="11:9" pos:end="13:52"><name pos:start="11:9" pos:end="11:20">error_report</name><argument_list pos:start="11:21" pos:end="13:52">(<argument pos:start="11:22" pos:end="13:51"><expr pos:start="11:22" pos:end="13:51"><literal type="string" pos:start="11:22" pos:end="11:70">"ivshmem is deprecated, please use ivshmem-plain"</literal>

                     <literal type="string" pos:start="13:22" pos:end="13:51">" or ivshmem-doorbell instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:68">(<expr pos:start="19:9" pos:end="19:67"><operator pos:start="19:9" pos:end="19:9">!</operator><operator pos:start="19:10" pos:end="19:10">!</operator><call pos:start="19:11" pos:end="19:48"><name pos:start="19:11" pos:end="19:32">qemu_chr_fe_get_driver</name><argument_list pos:start="19:33" pos:end="19:48">(<argument pos:start="19:34" pos:end="19:47"><expr pos:start="19:34" pos:end="19:47"><operator pos:start="19:34" pos:end="19:34">&amp;</operator><name pos:start="19:35" pos:end="19:47"><name pos:start="19:35" pos:end="19:35">s</name><operator pos:start="19:36" pos:end="19:37">-&gt;</operator><name pos:start="19:38" pos:end="19:47">server_chr</name></name></expr></argument>)</argument_list></call> <operator pos:start="19:50" pos:end="19:50">+</operator> <operator pos:start="19:52" pos:end="19:52">!</operator><operator pos:start="19:53" pos:end="19:53">!</operator><name pos:start="19:54" pos:end="19:62"><name pos:start="19:54" pos:end="19:54">s</name><operator pos:start="19:55" pos:end="19:56">-&gt;</operator><name pos:start="19:57" pos:end="19:62">shmobj</name></name> <operator pos:start="19:64" pos:end="19:65">!=</operator> <literal type="number" pos:start="19:67" pos:end="19:67">1</literal></expr>)</condition> <block pos:start="19:70" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:15">

        <expr_stmt pos:start="21:9" pos:end="21:71"><expr pos:start="21:9" pos:end="21:70"><call pos:start="21:9" pos:end="21:70"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="21:70">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>, <argument pos:start="21:26" pos:end="21:69"><expr pos:start="21:26" pos:end="21:69"><literal type="string" pos:start="21:26" pos:end="21:69">"You must specify either 'shm' or 'chardev'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="47:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:27">(<expr pos:start="29:9" pos:end="29:26"><name pos:start="29:9" pos:end="29:18"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:18">sizearg</name></name> <operator pos:start="29:20" pos:end="29:21">==</operator> <name pos:start="29:23" pos:end="29:26">NULL</name></expr>)</condition> <block pos:start="29:29" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:33">

        <expr_stmt pos:start="31:9" pos:end="31:33"><expr pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:22">legacy_size</name></name> <operator pos:start="31:24" pos:end="31:24">=</operator> <literal type="number" pos:start="31:26" pos:end="31:26">4</literal> <operator pos:start="31:28" pos:end="31:29">&lt;&lt;</operator> <literal type="number" pos:start="31:31" pos:end="31:32">20</literal></expr>;</expr_stmt> <comment type="block" pos:start="31:35" pos:end="31:52">/* 4 MB default */</comment>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="47:5">else <block pos:start="33:12" pos:end="47:5">{<block_content pos:start="35:9" pos:end="45:30">

        <decl_stmt pos:start="35:9" pos:end="35:58"><decl pos:start="35:9" pos:end="35:57"><type pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:15">int64_t</name></type> <name pos:start="35:17" pos:end="35:20">size</name> <init pos:start="35:22" pos:end="35:57">= <expr pos:start="35:24" pos:end="35:57"><call pos:start="35:24" pos:end="35:57"><name pos:start="35:24" pos:end="35:39">qemu_strtosz_MiB</name><argument_list pos:start="35:40" pos:end="35:57">(<argument pos:start="35:41" pos:end="35:50"><expr pos:start="35:41" pos:end="35:50"><name pos:start="35:41" pos:end="35:50"><name pos:start="35:41" pos:end="35:41">s</name><operator pos:start="35:42" pos:end="35:43">-&gt;</operator><name pos:start="35:44" pos:end="35:50">sizearg</name></name></expr></argument>, <argument pos:start="35:53" pos:end="35:56"><expr pos:start="35:53" pos:end="35:56"><name pos:start="35:53" pos:end="35:56">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:69">(<expr pos:start="37:13" pos:end="37:68"><name pos:start="37:13" pos:end="37:16">size</name> <operator pos:start="37:18" pos:end="37:18">&lt;</operator> <literal type="number" pos:start="37:20" pos:end="37:20">0</literal> <operator pos:start="37:22" pos:end="37:23">||</operator> <operator pos:start="37:25" pos:end="37:25">(</operator><name pos:start="37:26" pos:end="37:31">size_t</name><operator pos:start="37:32" pos:end="37:32">)</operator><name pos:start="37:33" pos:end="37:36">size</name> <operator pos:start="37:38" pos:end="37:39">!=</operator> <name pos:start="37:41" pos:end="37:44">size</name> <operator pos:start="37:46" pos:end="37:47">||</operator> <operator pos:start="37:49" pos:end="37:49">!</operator><call pos:start="37:50" pos:end="37:68"><name pos:start="37:50" pos:end="37:62">is_power_of_2</name><argument_list pos:start="37:63" pos:end="37:68">(<argument pos:start="37:64" pos:end="37:67"><expr pos:start="37:64" pos:end="37:67"><name pos:start="37:64" pos:end="37:67">size</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:71" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:19">

            <expr_stmt pos:start="39:13" pos:end="39:60"><expr pos:start="39:13" pos:end="39:59"><call pos:start="39:13" pos:end="39:59"><name pos:start="39:13" pos:end="39:22">error_setg</name><argument_list pos:start="39:23" pos:end="39:59">(<argument pos:start="39:24" pos:end="39:27"><expr pos:start="39:24" pos:end="39:27"><name pos:start="39:24" pos:end="39:27">errp</name></expr></argument>, <argument pos:start="39:30" pos:end="39:46"><expr pos:start="39:30" pos:end="39:46"><literal type="string" pos:start="39:30" pos:end="39:46">"Invalid size %s"</literal></expr></argument>, <argument pos:start="39:49" pos:end="39:58"><expr pos:start="39:49" pos:end="39:58"><name pos:start="39:49" pos:end="39:58"><name pos:start="39:49" pos:end="39:49">s</name><operator pos:start="39:50" pos:end="39:51">-&gt;</operator><name pos:start="39:52" pos:end="39:58">sizearg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:30"><expr pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:22"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:22">legacy_size</name></name> <operator pos:start="45:24" pos:end="45:24">=</operator> <name pos:start="45:26" pos:end="45:29">size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:39">/* check that role is reasonable */</comment>

    <if_stmt pos:start="53:5" pos:end="75:5"><if pos:start="53:5" pos:end="71:5">if <condition pos:start="53:8" pos:end="53:16">(<expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:9">s</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:15">role</name></name></expr>)</condition> <block pos:start="53:18" pos:end="71:5">{<block_content pos:start="55:9" pos:end="69:9">

        <if_stmt pos:start="55:9" pos:end="69:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:45">(<expr pos:start="55:13" pos:end="55:44"><call pos:start="55:13" pos:end="55:39"><name pos:start="55:13" pos:end="55:19">strncmp</name><argument_list pos:start="55:20" pos:end="55:39">(<argument pos:start="55:21" pos:end="55:27"><expr pos:start="55:21" pos:end="55:27"><name pos:start="55:21" pos:end="55:27"><name pos:start="55:21" pos:end="55:21">s</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:27">role</name></name></expr></argument>, <argument pos:start="55:30" pos:end="55:35"><expr pos:start="55:30" pos:end="55:35"><literal type="string" pos:start="55:30" pos:end="55:35">"peer"</literal></expr></argument>, <argument pos:start="55:38" pos:end="55:38"><expr pos:start="55:38" pos:end="55:38"><literal type="number" pos:start="55:38" pos:end="55:38">5</literal></expr></argument>)</argument_list></call> <operator pos:start="55:41" pos:end="55:42">==</operator> <literal type="number" pos:start="55:44" pos:end="55:44">0</literal></expr>)</condition> <block pos:start="55:47" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:40">

            <expr_stmt pos:start="57:13" pos:end="57:40"><expr pos:start="57:13" pos:end="57:39"><name pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:21">master</name></name> <operator pos:start="57:23" pos:end="57:23">=</operator> <name pos:start="57:25" pos:end="57:39">ON_OFF_AUTO_OFF</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="59:11" pos:end="63:9">else if <condition pos:start="59:19" pos:end="59:54">(<expr pos:start="59:20" pos:end="59:53"><call pos:start="59:20" pos:end="59:48"><name pos:start="59:20" pos:end="59:26">strncmp</name><argument_list pos:start="59:27" pos:end="59:48">(<argument pos:start="59:28" pos:end="59:34"><expr pos:start="59:28" pos:end="59:34"><name pos:start="59:28" pos:end="59:34"><name pos:start="59:28" pos:end="59:28">s</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:34">role</name></name></expr></argument>, <argument pos:start="59:37" pos:end="59:44"><expr pos:start="59:37" pos:end="59:44"><literal type="string" pos:start="59:37" pos:end="59:44">"master"</literal></expr></argument>, <argument pos:start="59:47" pos:end="59:47"><expr pos:start="59:47" pos:end="59:47"><literal type="number" pos:start="59:47" pos:end="59:47">7</literal></expr></argument>)</argument_list></call> <operator pos:start="59:50" pos:end="59:51">==</operator> <literal type="number" pos:start="59:53" pos:end="59:53">0</literal></expr>)</condition> <block pos:start="59:56" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:39">

            <expr_stmt pos:start="61:13" pos:end="61:39"><expr pos:start="61:13" pos:end="61:38"><name pos:start="61:13" pos:end="61:21"><name pos:start="61:13" pos:end="61:13">s</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:21">master</name></name> <operator pos:start="61:23" pos:end="61:23">=</operator> <name pos:start="61:25" pos:end="61:38">ON_OFF_AUTO_ON</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="69:9">else <block pos:start="63:16" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:19">

            <expr_stmt pos:start="65:13" pos:end="65:66"><expr pos:start="65:13" pos:end="65:65"><call pos:start="65:13" pos:end="65:65"><name pos:start="65:13" pos:end="65:22">error_setg</name><argument_list pos:start="65:23" pos:end="65:65">(<argument pos:start="65:24" pos:end="65:27"><expr pos:start="65:24" pos:end="65:27"><name pos:start="65:24" pos:end="65:27">errp</name></expr></argument>, <argument pos:start="65:30" pos:end="65:64"><expr pos:start="65:30" pos:end="65:64"><literal type="string" pos:start="65:30" pos:end="65:64">"'role' must be 'peer' or 'master'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:19">return;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="71:7" pos:end="75:5">else <block pos:start="71:12" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:37">

        <expr_stmt pos:start="73:9" pos:end="73:37"><expr pos:start="73:9" pos:end="73:36"><name pos:start="73:9" pos:end="73:17"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:17">master</name></name> <operator pos:start="73:19" pos:end="73:19">=</operator> <name pos:start="73:21" pos:end="73:36">ON_OFF_AUTO_AUTO</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="79:5" pos:end="83:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:18">(<expr pos:start="79:9" pos:end="79:17"><name pos:start="79:9" pos:end="79:17"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:17">shmobj</name></name></expr>)</condition> <block pos:start="79:20" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:23">

        <expr_stmt pos:start="81:9" pos:end="81:23"><expr pos:start="81:9" pos:end="81:22"><call pos:start="81:9" pos:end="81:22"><name pos:start="81:9" pos:end="81:19">desugar_shm</name><argument_list pos:start="81:20" pos:end="81:22">(<argument pos:start="81:21" pos:end="81:21"><expr pos:start="81:21" pos:end="81:21"><name pos:start="81:21" pos:end="81:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="87:5" pos:end="93:7">/*

     * Note: we don't use INTx with IVSHMEM_MSI at all, so this is a

     * bald-faced lie then.  But it's a backwards compatible lie.

     */</comment>

    <expr_stmt pos:start="95:5" pos:end="95:49"><expr pos:start="95:5" pos:end="95:48"><call pos:start="95:5" pos:end="95:48"><name pos:start="95:5" pos:end="95:32">pci_config_set_interrupt_pin</name><argument_list pos:start="95:33" pos:end="95:48">(<argument pos:start="95:34" pos:end="95:44"><expr pos:start="95:34" pos:end="95:44"><name pos:start="95:34" pos:end="95:44"><name pos:start="95:34" pos:end="95:36">dev</name><operator pos:start="95:37" pos:end="95:38">-&gt;</operator><name pos:start="95:39" pos:end="95:44">config</name></name></expr></argument>, <argument pos:start="95:47" pos:end="95:47"><expr pos:start="95:47" pos:end="95:47"><literal type="number" pos:start="95:47" pos:end="95:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:38"><expr pos:start="99:5" pos:end="99:37"><call pos:start="99:5" pos:end="99:37"><name pos:start="99:5" pos:end="99:26">ivshmem_common_realize</name><argument_list pos:start="99:27" pos:end="99:37">(<argument pos:start="99:28" pos:end="99:30"><expr pos:start="99:28" pos:end="99:30"><name pos:start="99:28" pos:end="99:30">dev</name></expr></argument>, <argument pos:start="99:33" pos:end="99:36"><expr pos:start="99:33" pos:end="99:36"><name pos:start="99:33" pos:end="99:36">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
