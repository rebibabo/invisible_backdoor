<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11375.c" pos:tabs="8"><function pos:start="1:1" pos:end="275:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">encode_frame</name><parameter_list pos:start="1:25" pos:end="5:37">(<parameter pos:start="1:26" pos:end="1:44"><decl pos:start="1:26" pos:end="1:44"><type pos:start="1:26" pos:end="1:44"><name pos:start="1:26" pos:end="1:41">MpegAudioContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:75"><decl pos:start="3:26" pos:end="3:75"><type pos:start="3:26" pos:end="3:48"><name pos:start="3:26" pos:end="3:33">unsigned</name> <name pos:start="3:35" pos:end="3:38">char</name></type> <name pos:start="3:40" pos:end="3:75"><name pos:start="3:40" pos:end="3:48">bit_alloc</name><index pos:start="3:49" pos:end="3:66">[<expr pos:start="3:50" pos:end="3:65"><name pos:start="3:50" pos:end="3:65">MPA_MAX_CHANNELS</name></expr>]</index><index pos:start="3:67" pos:end="3:75">[<expr pos:start="3:68" pos:end="3:74"><name pos:start="3:68" pos:end="3:74">SBLIMIT</name></expr>]</index></name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:36"><decl pos:start="5:26" pos:end="5:36"><type pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:28">int</name></type> <name pos:start="5:30" pos:end="5:36">padding</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="275:1">{<block_content pos:start="9:5" pos:end="273:22">

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>, <decl pos:start="9:15" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:15">k</name></decl>, <decl pos:start="9:18" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:18">l</name></decl>, <decl pos:start="9:21" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:34">bit_alloc_bits</name></decl>, <decl pos:start="9:37" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:37" pos:end="9:37">b</name></decl>, <decl pos:start="9:40" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:40" pos:end="9:41">ch</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">char</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:21">sf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:13"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12"><name pos:start="13:9" pos:end="13:9">q</name><index pos:start="13:10" pos:end="13:12">[<expr pos:start="13:11" pos:end="13:11"><literal type="number" pos:start="13:11" pos:end="13:11">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:29"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">PutBitContext</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:20">p</name> <init pos:start="15:22" pos:end="15:29">= <expr pos:start="15:24" pos:end="15:29"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:29"><name pos:start="15:25" pos:end="15:25">s</name><operator pos:start="15:26" pos:end="15:27">-&gt;</operator><name pos:start="15:28" pos:end="15:29">pb</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:16">/* header */</comment>



    <expr_stmt pos:start="23:5" pos:end="23:27"><expr pos:start="23:5" pos:end="23:26"><call pos:start="23:5" pos:end="23:26"><name pos:start="23:5" pos:end="23:12">put_bits</name><argument_list pos:start="23:13" pos:end="23:26">(<argument pos:start="23:14" pos:end="23:14"><expr pos:start="23:14" pos:end="23:14"><name pos:start="23:14" pos:end="23:14">p</name></expr></argument>, <argument pos:start="23:17" pos:end="23:18"><expr pos:start="23:17" pos:end="23:18"><literal type="number" pos:start="23:17" pos:end="23:18">12</literal></expr></argument>, <argument pos:start="23:21" pos:end="23:25"><expr pos:start="23:21" pos:end="23:25"><literal type="number" pos:start="23:21" pos:end="23:25">0xfff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:31"><expr pos:start="25:5" pos:end="25:30"><call pos:start="25:5" pos:end="25:30"><name pos:start="25:5" pos:end="25:12">put_bits</name><argument_list pos:start="25:13" pos:end="25:30">(<argument pos:start="25:14" pos:end="25:14"><expr pos:start="25:14" pos:end="25:14"><name pos:start="25:14" pos:end="25:14">p</name></expr></argument>, <argument pos:start="25:17" pos:end="25:17"><expr pos:start="25:17" pos:end="25:17"><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr></argument>, <argument pos:start="25:20" pos:end="25:29"><expr pos:start="25:20" pos:end="25:29"><literal type="number" pos:start="25:20" pos:end="25:22">1</literal> <operator pos:start="25:22" pos:end="25:22">-</operator> <name pos:start="25:24" pos:end="25:29"><name pos:start="25:24" pos:end="25:24">s</name><operator pos:start="25:25" pos:end="25:26">-&gt;</operator><name pos:start="25:27" pos:end="25:29">lsf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="25:33" pos:end="25:68">/* 1 = mpeg1 ID, 0 = mpeg2 lsf ID */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:24"><expr pos:start="27:5" pos:end="27:23"><call pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:12">put_bits</name><argument_list pos:start="27:13" pos:end="27:23">(<argument pos:start="27:14" pos:end="27:14"><expr pos:start="27:14" pos:end="27:14"><name pos:start="27:14" pos:end="27:14">p</name></expr></argument>, <argument pos:start="27:17" pos:end="27:17"><expr pos:start="27:17" pos:end="27:17"><literal type="number" pos:start="27:17" pos:end="27:17">2</literal></expr></argument>, <argument pos:start="27:20" pos:end="27:22"><expr pos:start="27:20" pos:end="27:22"><literal type="number" pos:start="27:20" pos:end="27:21">4</literal><operator pos:start="27:21" pos:end="27:21">-</operator><literal type="number" pos:start="27:22" pos:end="27:22">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="27:27" pos:end="27:39">/* layer 2 */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:22"><expr pos:start="29:5" pos:end="29:21"><call pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:12">put_bits</name><argument_list pos:start="29:13" pos:end="29:21">(<argument pos:start="29:14" pos:end="29:14"><expr pos:start="29:14" pos:end="29:14"><name pos:start="29:14" pos:end="29:14">p</name></expr></argument>, <argument pos:start="29:17" pos:end="29:17"><expr pos:start="29:17" pos:end="29:17"><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr></argument>, <argument pos:start="29:20" pos:end="29:20"><expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="29:24" pos:end="29:48">/* no error protection */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:37"><expr pos:start="31:5" pos:end="31:36"><call pos:start="31:5" pos:end="31:36"><name pos:start="31:5" pos:end="31:12">put_bits</name><argument_list pos:start="31:13" pos:end="31:36">(<argument pos:start="31:14" pos:end="31:14"><expr pos:start="31:14" pos:end="31:14"><name pos:start="31:14" pos:end="31:14">p</name></expr></argument>, <argument pos:start="31:17" pos:end="31:17"><expr pos:start="31:17" pos:end="31:17"><literal type="number" pos:start="31:17" pos:end="31:17">4</literal></expr></argument>, <argument pos:start="31:20" pos:end="31:35"><expr pos:start="31:20" pos:end="31:35"><name pos:start="31:20" pos:end="31:35"><name pos:start="31:20" pos:end="31:20">s</name><operator pos:start="31:21" pos:end="31:22">-&gt;</operator><name pos:start="31:23" pos:end="31:35">bitrate_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:34"><expr pos:start="33:5" pos:end="33:33"><call pos:start="33:5" pos:end="33:33"><name pos:start="33:5" pos:end="33:12">put_bits</name><argument_list pos:start="33:13" pos:end="33:33">(<argument pos:start="33:14" pos:end="33:14"><expr pos:start="33:14" pos:end="33:14"><name pos:start="33:14" pos:end="33:14">p</name></expr></argument>, <argument pos:start="33:17" pos:end="33:17"><expr pos:start="33:17" pos:end="33:17"><literal type="number" pos:start="33:17" pos:end="33:17">2</literal></expr></argument>, <argument pos:start="33:20" pos:end="33:32"><expr pos:start="33:20" pos:end="33:32"><name pos:start="33:20" pos:end="33:32"><name pos:start="33:20" pos:end="33:20">s</name><operator pos:start="33:21" pos:end="33:22">-&gt;</operator><name pos:start="33:23" pos:end="33:32">freq_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><call pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:12">put_bits</name><argument_list pos:start="35:13" pos:end="35:33">(<argument pos:start="35:14" pos:end="35:14"><expr pos:start="35:14" pos:end="35:14"><name pos:start="35:14" pos:end="35:14">p</name></expr></argument>, <argument pos:start="35:17" pos:end="35:17"><expr pos:start="35:17" pos:end="35:17"><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr></argument>, <argument pos:start="35:20" pos:end="35:32"><expr pos:start="35:20" pos:end="35:32"><name pos:start="35:20" pos:end="35:32"><name pos:start="35:20" pos:end="35:20">s</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:32">do_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="35:36" pos:end="35:52">/* use padding */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:22"><expr pos:start="37:5" pos:end="37:21"><call pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:12">put_bits</name><argument_list pos:start="37:13" pos:end="37:21">(<argument pos:start="37:14" pos:end="37:14"><expr pos:start="37:14" pos:end="37:14"><name pos:start="37:14" pos:end="37:14">p</name></expr></argument>, <argument pos:start="37:17" pos:end="37:17"><expr pos:start="37:17" pos:end="37:17"><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr></argument>, <argument pos:start="37:20" pos:end="37:20"><expr pos:start="37:20" pos:end="37:20"><literal type="number" pos:start="37:20" pos:end="37:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>             <comment type="block" pos:start="37:36" pos:end="37:52">/* private_bit */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:64"><expr pos:start="39:5" pos:end="39:63"><call pos:start="39:5" pos:end="39:63"><name pos:start="39:5" pos:end="39:12">put_bits</name><argument_list pos:start="39:13" pos:end="39:63">(<argument pos:start="39:14" pos:end="39:14"><expr pos:start="39:14" pos:end="39:14"><name pos:start="39:14" pos:end="39:14">p</name></expr></argument>, <argument pos:start="39:17" pos:end="39:17"><expr pos:start="39:17" pos:end="39:17"><literal type="number" pos:start="39:17" pos:end="39:17">2</literal></expr></argument>, <argument pos:start="39:20" pos:end="39:62"><expr pos:start="39:20" pos:end="39:62"><ternary pos:start="39:20" pos:end="39:62"><condition pos:start="39:20" pos:end="39:40"><expr pos:start="39:20" pos:end="39:38"><name pos:start="39:20" pos:end="39:33"><name pos:start="39:20" pos:end="39:20">s</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:33">nb_channels</name></name> <operator pos:start="39:35" pos:end="39:36">==</operator> <literal type="number" pos:start="39:38" pos:end="39:38">2</literal></expr> ?</condition><then pos:start="39:42" pos:end="39:51"> <expr pos:start="39:42" pos:end="39:51"><name pos:start="39:42" pos:end="39:51">MPA_STEREO</name></expr> </then><else pos:start="39:53" pos:end="39:62">: <expr pos:start="39:55" pos:end="39:62"><name pos:start="39:55" pos:end="39:62">MPA_MONO</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><call pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:12">put_bits</name><argument_list pos:start="41:13" pos:end="41:21">(<argument pos:start="41:14" pos:end="41:14"><expr pos:start="41:14" pos:end="41:14"><name pos:start="41:14" pos:end="41:14">p</name></expr></argument>, <argument pos:start="41:17" pos:end="41:17"><expr pos:start="41:17" pos:end="41:17"><literal type="number" pos:start="41:17" pos:end="41:17">2</literal></expr></argument>, <argument pos:start="41:20" pos:end="41:20"><expr pos:start="41:20" pos:end="41:20"><literal type="number" pos:start="41:20" pos:end="41:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="41:24" pos:end="41:37">/* mode_ext */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><call pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:12">put_bits</name><argument_list pos:start="43:13" pos:end="43:21">(<argument pos:start="43:14" pos:end="43:14"><expr pos:start="43:14" pos:end="43:14"><name pos:start="43:14" pos:end="43:14">p</name></expr></argument>, <argument pos:start="43:17" pos:end="43:17"><expr pos:start="43:17" pos:end="43:17"><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr></argument>, <argument pos:start="43:20" pos:end="43:20"><expr pos:start="43:20" pos:end="43:20"><literal type="number" pos:start="43:20" pos:end="43:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="43:24" pos:end="43:41">/* no copyright */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:22"><expr pos:start="45:5" pos:end="45:21"><call pos:start="45:5" pos:end="45:21"><name pos:start="45:5" pos:end="45:12">put_bits</name><argument_list pos:start="45:13" pos:end="45:21">(<argument pos:start="45:14" pos:end="45:14"><expr pos:start="45:14" pos:end="45:14"><name pos:start="45:14" pos:end="45:14">p</name></expr></argument>, <argument pos:start="45:17" pos:end="45:17"><expr pos:start="45:17" pos:end="45:17"><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr></argument>, <argument pos:start="45:20" pos:end="45:20"><expr pos:start="45:20" pos:end="45:20"><literal type="number" pos:start="45:20" pos:end="45:20">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="45:24" pos:end="45:37">/* original */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:22"><expr pos:start="47:5" pos:end="47:21"><call pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:12">put_bits</name><argument_list pos:start="47:13" pos:end="47:21">(<argument pos:start="47:14" pos:end="47:14"><expr pos:start="47:14" pos:end="47:14"><name pos:start="47:14" pos:end="47:14">p</name></expr></argument>, <argument pos:start="47:17" pos:end="47:17"><expr pos:start="47:17" pos:end="47:17"><literal type="number" pos:start="47:17" pos:end="47:17">2</literal></expr></argument>, <argument pos:start="47:20" pos:end="47:20"><expr pos:start="47:20" pos:end="47:20"><literal type="number" pos:start="47:20" pos:end="47:20">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="47:24" pos:end="47:40">/* no emphasis */</comment>



    <comment type="block" pos:start="51:5" pos:end="51:24">/* bit allocation */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:10"><expr pos:start="53:5" pos:end="53:9"><name pos:start="53:5" pos:end="53:5">j</name> <operator pos:start="53:7" pos:end="53:7">=</operator> <literal type="number" pos:start="53:9" pos:end="53:9">0</literal></expr>;</expr_stmt>

    <for pos:start="55:5" pos:end="67:5">for<control pos:start="55:8" pos:end="55:29">(<init pos:start="55:9" pos:end="55:12"><expr pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:9">i</name><operator pos:start="55:10" pos:end="55:10">=</operator><literal type="number" pos:start="55:11" pos:end="55:11">0</literal></expr>;</init><condition pos:start="55:13" pos:end="55:25"><expr pos:start="55:13" pos:end="55:24"><name pos:start="55:13" pos:end="55:13">i</name><operator pos:start="55:14" pos:end="55:14">&lt;</operator><name pos:start="55:15" pos:end="55:24"><name pos:start="55:15" pos:end="55:15">s</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:24">sblimit</name></name></expr>;</condition><incr pos:start="55:26" pos:end="55:28"><expr pos:start="55:26" pos:end="55:28"><name pos:start="55:26" pos:end="55:26">i</name><operator pos:start="55:27" pos:end="55:28">++</operator></expr></incr>)</control> <block pos:start="55:31" pos:end="67:5">{<block_content pos:start="57:9" pos:end="65:33">

        <expr_stmt pos:start="57:9" pos:end="57:43"><expr pos:start="57:9" pos:end="57:42"><name pos:start="57:9" pos:end="57:22">bit_alloc_bits</name> <operator pos:start="57:24" pos:end="57:24">=</operator> <name pos:start="57:26" pos:end="57:42"><name pos:start="57:26" pos:end="57:26">s</name><operator pos:start="57:27" pos:end="57:28">-&gt;</operator><name pos:start="57:29" pos:end="57:39">alloc_table</name><index pos:start="57:40" pos:end="57:42">[<expr pos:start="57:41" pos:end="57:41"><name pos:start="57:41" pos:end="57:41">j</name></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="59:9" pos:end="63:9">for<control pos:start="59:12" pos:end="59:40">(<init pos:start="59:13" pos:end="59:17"><expr pos:start="59:13" pos:end="59:16"><name pos:start="59:13" pos:end="59:14">ch</name><operator pos:start="59:15" pos:end="59:15">=</operator><literal type="number" pos:start="59:16" pos:end="59:16">0</literal></expr>;</init><condition pos:start="59:18" pos:end="59:35"><expr pos:start="59:18" pos:end="59:34"><name pos:start="59:18" pos:end="59:19">ch</name><operator pos:start="59:20" pos:end="59:20">&lt;</operator><name pos:start="59:21" pos:end="59:34"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:34">nb_channels</name></name></expr>;</condition><incr pos:start="59:36" pos:end="59:39"><expr pos:start="59:36" pos:end="59:39"><name pos:start="59:36" pos:end="59:37">ch</name><operator pos:start="59:38" pos:end="59:39">++</operator></expr></incr>)</control> <block pos:start="59:42" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:58">

            <expr_stmt pos:start="61:13" pos:end="61:58"><expr pos:start="61:13" pos:end="61:57"><call pos:start="61:13" pos:end="61:57"><name pos:start="61:13" pos:end="61:20">put_bits</name><argument_list pos:start="61:21" pos:end="61:57">(<argument pos:start="61:22" pos:end="61:22"><expr pos:start="61:22" pos:end="61:22"><name pos:start="61:22" pos:end="61:22">p</name></expr></argument>, <argument pos:start="61:25" pos:end="61:38"><expr pos:start="61:25" pos:end="61:38"><name pos:start="61:25" pos:end="61:38">bit_alloc_bits</name></expr></argument>, <argument pos:start="61:41" pos:end="61:56"><expr pos:start="61:41" pos:end="61:56"><name pos:start="61:41" pos:end="61:56"><name pos:start="61:41" pos:end="61:49">bit_alloc</name><index pos:start="61:50" pos:end="61:53">[<expr pos:start="61:51" pos:end="61:52"><name pos:start="61:51" pos:end="61:52">ch</name></expr>]</index><index pos:start="61:54" pos:end="61:56">[<expr pos:start="61:55" pos:end="61:55"><name pos:start="61:55" pos:end="61:55">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="65:9" pos:end="65:33"><expr pos:start="65:9" pos:end="65:32"><name pos:start="65:9" pos:end="65:9">j</name> <operator pos:start="65:11" pos:end="65:12">+=</operator> <literal type="number" pos:start="65:14" pos:end="65:14">1</literal> <operator pos:start="65:16" pos:end="65:17">&lt;&lt;</operator> <name pos:start="65:19" pos:end="65:32">bit_alloc_bits</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="71:5" pos:end="71:21">/* scale codes */</comment>

    <for pos:start="73:5" pos:end="83:5">for<control pos:start="73:8" pos:end="73:29">(<init pos:start="73:9" pos:end="73:12"><expr pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:9">i</name><operator pos:start="73:10" pos:end="73:10">=</operator><literal type="number" pos:start="73:11" pos:end="73:11">0</literal></expr>;</init><condition pos:start="73:13" pos:end="73:25"><expr pos:start="73:13" pos:end="73:24"><name pos:start="73:13" pos:end="73:13">i</name><operator pos:start="73:14" pos:end="73:14">&lt;</operator><name pos:start="73:15" pos:end="73:24"><name pos:start="73:15" pos:end="73:15">s</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:24">sblimit</name></name></expr>;</condition><incr pos:start="73:26" pos:end="73:28"><expr pos:start="73:26" pos:end="73:28"><name pos:start="73:26" pos:end="73:26">i</name><operator pos:start="73:27" pos:end="73:28">++</operator></expr></incr>)</control> <block pos:start="73:31" pos:end="83:5">{<block_content pos:start="75:9" pos:end="81:9">

        <for pos:start="75:9" pos:end="81:9">for<control pos:start="75:12" pos:end="75:40">(<init pos:start="75:13" pos:end="75:17"><expr pos:start="75:13" pos:end="75:16"><name pos:start="75:13" pos:end="75:14">ch</name><operator pos:start="75:15" pos:end="75:15">=</operator><literal type="number" pos:start="75:16" pos:end="75:16">0</literal></expr>;</init><condition pos:start="75:18" pos:end="75:35"><expr pos:start="75:18" pos:end="75:34"><name pos:start="75:18" pos:end="75:19">ch</name><operator pos:start="75:20" pos:end="75:20">&lt;</operator><name pos:start="75:21" pos:end="75:34"><name pos:start="75:21" pos:end="75:21">s</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:34">nb_channels</name></name></expr>;</condition><incr pos:start="75:36" pos:end="75:39"><expr pos:start="75:36" pos:end="75:39"><name pos:start="75:36" pos:end="75:37">ch</name><operator pos:start="75:38" pos:end="75:39">++</operator></expr></incr>)</control> <block pos:start="75:42" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:53">

            <if_stmt pos:start="77:13" pos:end="79:53"><if pos:start="77:13" pos:end="79:53">if <condition pos:start="77:16" pos:end="77:33">(<expr pos:start="77:17" pos:end="77:32"><name pos:start="77:17" pos:end="77:32"><name pos:start="77:17" pos:end="77:25">bit_alloc</name><index pos:start="77:26" pos:end="77:29">[<expr pos:start="77:27" pos:end="77:28"><name pos:start="77:27" pos:end="77:28">ch</name></expr>]</index><index pos:start="77:30" pos:end="77:32">[<expr pos:start="77:31" pos:end="77:31"><name pos:start="77:31" pos:end="77:31">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="79:17" pos:end="79:53"><block_content pos:start="79:17" pos:end="79:53">

                <expr_stmt pos:start="79:17" pos:end="79:53"><expr pos:start="79:17" pos:end="79:52"><call pos:start="79:17" pos:end="79:52"><name pos:start="79:17" pos:end="79:24">put_bits</name><argument_list pos:start="79:25" pos:end="79:52">(<argument pos:start="79:26" pos:end="79:26"><expr pos:start="79:26" pos:end="79:26"><name pos:start="79:26" pos:end="79:26">p</name></expr></argument>, <argument pos:start="79:29" pos:end="79:29"><expr pos:start="79:29" pos:end="79:29"><literal type="number" pos:start="79:29" pos:end="79:29">2</literal></expr></argument>, <argument pos:start="79:32" pos:end="79:51"><expr pos:start="79:32" pos:end="79:51"><name pos:start="79:32" pos:end="79:51"><name pos:start="79:32" pos:end="79:32">s</name><operator pos:start="79:33" pos:end="79:34">-&gt;</operator><name pos:start="79:35" pos:end="79:44">scale_code</name><index pos:start="79:45" pos:end="79:48">[<expr pos:start="79:46" pos:end="79:47"><name pos:start="79:46" pos:end="79:47">ch</name></expr>]</index><index pos:start="79:49" pos:end="79:51">[<expr pos:start="79:50" pos:end="79:50"><name pos:start="79:50" pos:end="79:50">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="87:5" pos:end="87:23">/* scale factors */</comment>

    <for pos:start="89:5" pos:end="131:5">for<control pos:start="89:8" pos:end="89:29">(<init pos:start="89:9" pos:end="89:12"><expr pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:9">i</name><operator pos:start="89:10" pos:end="89:10">=</operator><literal type="number" pos:start="89:11" pos:end="89:11">0</literal></expr>;</init><condition pos:start="89:13" pos:end="89:25"><expr pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:13">i</name><operator pos:start="89:14" pos:end="89:14">&lt;</operator><name pos:start="89:15" pos:end="89:24"><name pos:start="89:15" pos:end="89:15">s</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:24">sblimit</name></name></expr>;</condition><incr pos:start="89:26" pos:end="89:28"><expr pos:start="89:26" pos:end="89:28"><name pos:start="89:26" pos:end="89:26">i</name><operator pos:start="89:27" pos:end="89:28">++</operator></expr></incr>)</control> <block pos:start="89:31" pos:end="131:5">{<block_content pos:start="91:9" pos:end="129:9">

        <for pos:start="91:9" pos:end="129:9">for<control pos:start="91:12" pos:end="91:40">(<init pos:start="91:13" pos:end="91:17"><expr pos:start="91:13" pos:end="91:16"><name pos:start="91:13" pos:end="91:14">ch</name><operator pos:start="91:15" pos:end="91:15">=</operator><literal type="number" pos:start="91:16" pos:end="91:16">0</literal></expr>;</init><condition pos:start="91:18" pos:end="91:35"><expr pos:start="91:18" pos:end="91:34"><name pos:start="91:18" pos:end="91:19">ch</name><operator pos:start="91:20" pos:end="91:20">&lt;</operator><name pos:start="91:21" pos:end="91:34"><name pos:start="91:21" pos:end="91:21">s</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:34">nb_channels</name></name></expr>;</condition><incr pos:start="91:36" pos:end="91:39"><expr pos:start="91:36" pos:end="91:39"><name pos:start="91:36" pos:end="91:37">ch</name><operator pos:start="91:38" pos:end="91:39">++</operator></expr></incr>)</control> <block pos:start="91:42" pos:end="129:9">{<block_content pos:start="93:13" pos:end="127:13">

            <if_stmt pos:start="93:13" pos:end="127:13"><if pos:start="93:13" pos:end="127:13">if <condition pos:start="93:16" pos:end="93:33">(<expr pos:start="93:17" pos:end="93:32"><name pos:start="93:17" pos:end="93:32"><name pos:start="93:17" pos:end="93:25">bit_alloc</name><index pos:start="93:26" pos:end="93:29">[<expr pos:start="93:27" pos:end="93:28"><name pos:start="93:27" pos:end="93:28">ch</name></expr>]</index><index pos:start="93:30" pos:end="93:32">[<expr pos:start="93:31" pos:end="93:31"><name pos:start="93:31" pos:end="93:31">i</name></expr>]</index></name></expr>)</condition> <block pos:start="93:35" pos:end="127:13">{<block_content pos:start="95:17" pos:end="125:17">

                <expr_stmt pos:start="95:17" pos:end="95:49"><expr pos:start="95:17" pos:end="95:48"><name pos:start="95:17" pos:end="95:18">sf</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <operator pos:start="95:22" pos:end="95:22">&amp;</operator><name pos:start="95:23" pos:end="95:48"><name pos:start="95:23" pos:end="95:23">s</name><operator pos:start="95:24" pos:end="95:25">-&gt;</operator><name pos:start="95:26" pos:end="95:38">scale_factors</name><index pos:start="95:39" pos:end="95:42">[<expr pos:start="95:40" pos:end="95:41"><name pos:start="95:40" pos:end="95:41">ch</name></expr>]</index><index pos:start="95:43" pos:end="95:45">[<expr pos:start="95:44" pos:end="95:44"><name pos:start="95:44" pos:end="95:44">i</name></expr>]</index><index pos:start="95:46" pos:end="95:48">[<expr pos:start="95:47" pos:end="95:47"><literal type="number" pos:start="95:47" pos:end="95:47">0</literal></expr>]</index></name></expr>;</expr_stmt>

                <switch pos:start="97:17" pos:end="125:17">switch<condition pos:start="97:23" pos:end="97:44">(<expr pos:start="97:24" pos:end="97:43"><name pos:start="97:24" pos:end="97:43"><name pos:start="97:24" pos:end="97:24">s</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:36">scale_code</name><index pos:start="97:37" pos:end="97:40">[<expr pos:start="97:38" pos:end="97:39"><name pos:start="97:38" pos:end="97:39">ch</name></expr>]</index><index pos:start="97:41" pos:end="97:43">[<expr pos:start="97:42" pos:end="97:42"><name pos:start="97:42" pos:end="97:42">i</name></expr>]</index></name></expr>)</condition> <block pos:start="97:46" pos:end="125:17">{<block_content pos:start="99:17" pos:end="123:26">

                <case pos:start="99:17" pos:end="99:23">case <expr pos:start="99:22" pos:end="99:22"><literal type="number" pos:start="99:22" pos:end="99:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="101:21" pos:end="101:42"><expr pos:start="101:21" pos:end="101:41"><call pos:start="101:21" pos:end="101:41"><name pos:start="101:21" pos:end="101:28">put_bits</name><argument_list pos:start="101:29" pos:end="101:41">(<argument pos:start="101:30" pos:end="101:30"><expr pos:start="101:30" pos:end="101:30"><name pos:start="101:30" pos:end="101:30">p</name></expr></argument>, <argument pos:start="101:33" pos:end="101:33"><expr pos:start="101:33" pos:end="101:33"><literal type="number" pos:start="101:33" pos:end="101:33">6</literal></expr></argument>, <argument pos:start="101:36" pos:end="101:40"><expr pos:start="101:36" pos:end="101:40"><name pos:start="101:36" pos:end="101:40"><name pos:start="101:36" pos:end="101:37">sf</name><index pos:start="101:38" pos:end="101:40">[<expr pos:start="101:39" pos:end="101:39"><literal type="number" pos:start="101:39" pos:end="101:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="103:21" pos:end="103:42"><expr pos:start="103:21" pos:end="103:41"><call pos:start="103:21" pos:end="103:41"><name pos:start="103:21" pos:end="103:28">put_bits</name><argument_list pos:start="103:29" pos:end="103:41">(<argument pos:start="103:30" pos:end="103:30"><expr pos:start="103:30" pos:end="103:30"><name pos:start="103:30" pos:end="103:30">p</name></expr></argument>, <argument pos:start="103:33" pos:end="103:33"><expr pos:start="103:33" pos:end="103:33"><literal type="number" pos:start="103:33" pos:end="103:33">6</literal></expr></argument>, <argument pos:start="103:36" pos:end="103:40"><expr pos:start="103:36" pos:end="103:40"><name pos:start="103:36" pos:end="103:40"><name pos:start="103:36" pos:end="103:37">sf</name><index pos:start="103:38" pos:end="103:40">[<expr pos:start="103:39" pos:end="103:39"><literal type="number" pos:start="103:39" pos:end="103:39">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:42"><expr pos:start="105:21" pos:end="105:41"><call pos:start="105:21" pos:end="105:41"><name pos:start="105:21" pos:end="105:28">put_bits</name><argument_list pos:start="105:29" pos:end="105:41">(<argument pos:start="105:30" pos:end="105:30"><expr pos:start="105:30" pos:end="105:30"><name pos:start="105:30" pos:end="105:30">p</name></expr></argument>, <argument pos:start="105:33" pos:end="105:33"><expr pos:start="105:33" pos:end="105:33"><literal type="number" pos:start="105:33" pos:end="105:33">6</literal></expr></argument>, <argument pos:start="105:36" pos:end="105:40"><expr pos:start="105:36" pos:end="105:40"><name pos:start="105:36" pos:end="105:40"><name pos:start="105:36" pos:end="105:37">sf</name><index pos:start="105:38" pos:end="105:40">[<expr pos:start="105:39" pos:end="105:39"><literal type="number" pos:start="105:39" pos:end="105:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="107:21" pos:end="107:26">break;</break>

                <case pos:start="109:17" pos:end="109:23">case <expr pos:start="109:22" pos:end="109:22"><literal type="number" pos:start="109:22" pos:end="109:22">3</literal></expr>:</case>

                <case pos:start="111:17" pos:end="111:23">case <expr pos:start="111:22" pos:end="111:22"><literal type="number" pos:start="111:22" pos:end="111:22">1</literal></expr>:</case>

                    <expr_stmt pos:start="113:21" pos:end="113:42"><expr pos:start="113:21" pos:end="113:41"><call pos:start="113:21" pos:end="113:41"><name pos:start="113:21" pos:end="113:28">put_bits</name><argument_list pos:start="113:29" pos:end="113:41">(<argument pos:start="113:30" pos:end="113:30"><expr pos:start="113:30" pos:end="113:30"><name pos:start="113:30" pos:end="113:30">p</name></expr></argument>, <argument pos:start="113:33" pos:end="113:33"><expr pos:start="113:33" pos:end="113:33"><literal type="number" pos:start="113:33" pos:end="113:33">6</literal></expr></argument>, <argument pos:start="113:36" pos:end="113:40"><expr pos:start="113:36" pos:end="113:40"><name pos:start="113:36" pos:end="113:40"><name pos:start="113:36" pos:end="113:37">sf</name><index pos:start="113:38" pos:end="113:40">[<expr pos:start="113:39" pos:end="113:39"><literal type="number" pos:start="113:39" pos:end="113:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="115:21" pos:end="115:42"><expr pos:start="115:21" pos:end="115:41"><call pos:start="115:21" pos:end="115:41"><name pos:start="115:21" pos:end="115:28">put_bits</name><argument_list pos:start="115:29" pos:end="115:41">(<argument pos:start="115:30" pos:end="115:30"><expr pos:start="115:30" pos:end="115:30"><name pos:start="115:30" pos:end="115:30">p</name></expr></argument>, <argument pos:start="115:33" pos:end="115:33"><expr pos:start="115:33" pos:end="115:33"><literal type="number" pos:start="115:33" pos:end="115:33">6</literal></expr></argument>, <argument pos:start="115:36" pos:end="115:40"><expr pos:start="115:36" pos:end="115:40"><name pos:start="115:36" pos:end="115:40"><name pos:start="115:36" pos:end="115:37">sf</name><index pos:start="115:38" pos:end="115:40">[<expr pos:start="115:39" pos:end="115:39"><literal type="number" pos:start="115:39" pos:end="115:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="117:21" pos:end="117:26">break;</break>

                <case pos:start="119:17" pos:end="119:23">case <expr pos:start="119:22" pos:end="119:22"><literal type="number" pos:start="119:22" pos:end="119:22">2</literal></expr>:</case>

                    <expr_stmt pos:start="121:21" pos:end="121:42"><expr pos:start="121:21" pos:end="121:41"><call pos:start="121:21" pos:end="121:41"><name pos:start="121:21" pos:end="121:28">put_bits</name><argument_list pos:start="121:29" pos:end="121:41">(<argument pos:start="121:30" pos:end="121:30"><expr pos:start="121:30" pos:end="121:30"><name pos:start="121:30" pos:end="121:30">p</name></expr></argument>, <argument pos:start="121:33" pos:end="121:33"><expr pos:start="121:33" pos:end="121:33"><literal type="number" pos:start="121:33" pos:end="121:33">6</literal></expr></argument>, <argument pos:start="121:36" pos:end="121:40"><expr pos:start="121:36" pos:end="121:40"><name pos:start="121:36" pos:end="121:40"><name pos:start="121:36" pos:end="121:37">sf</name><index pos:start="121:38" pos:end="121:40">[<expr pos:start="121:39" pos:end="121:39"><literal type="number" pos:start="121:39" pos:end="121:39">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="123:21" pos:end="123:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="135:5" pos:end="135:47">/* quantization &amp; write sub band samples */</comment>



    <for pos:start="139:5" pos:end="259:5">for<control pos:start="139:8" pos:end="139:20">(<init pos:start="139:9" pos:end="139:12"><expr pos:start="139:9" pos:end="139:11"><name pos:start="139:9" pos:end="139:9">k</name><operator pos:start="139:10" pos:end="139:10">=</operator><literal type="number" pos:start="139:11" pos:end="139:11">0</literal></expr>;</init><condition pos:start="139:13" pos:end="139:16"><expr pos:start="139:13" pos:end="139:15"><name pos:start="139:13" pos:end="139:13">k</name><operator pos:start="139:14" pos:end="139:14">&lt;</operator><literal type="number" pos:start="139:15" pos:end="139:15">3</literal></expr>;</condition><incr pos:start="139:17" pos:end="139:19"><expr pos:start="139:17" pos:end="139:19"><name pos:start="139:17" pos:end="139:17">k</name><operator pos:start="139:18" pos:end="139:19">++</operator></expr></incr>)</control> <block pos:start="139:22" pos:end="259:5">{<block_content pos:start="141:9" pos:end="257:9">

        <for pos:start="141:9" pos:end="257:9">for<control pos:start="141:12" pos:end="141:26">(<init pos:start="141:13" pos:end="141:16"><expr pos:start="141:13" pos:end="141:15"><name pos:start="141:13" pos:end="141:13">l</name><operator pos:start="141:14" pos:end="141:14">=</operator><literal type="number" pos:start="141:15" pos:end="141:15">0</literal></expr>;</init><condition pos:start="141:17" pos:end="141:21"><expr pos:start="141:17" pos:end="141:20"><name pos:start="141:17" pos:end="141:17">l</name><operator pos:start="141:18" pos:end="141:18">&lt;</operator><literal type="number" pos:start="141:19" pos:end="141:20">12</literal></expr>;</condition><incr pos:start="141:22" pos:end="141:25"><expr pos:start="141:22" pos:end="141:25"><name pos:start="141:22" pos:end="141:22">l</name><operator pos:start="141:23" pos:end="141:24">+=</operator><literal type="number" pos:start="141:25" pos:end="141:25">3</literal></expr></incr>)</control> <block pos:start="141:28" pos:end="257:9">{<block_content pos:start="143:13" pos:end="255:13">

            <expr_stmt pos:start="143:13" pos:end="143:18"><expr pos:start="143:13" pos:end="143:17"><name pos:start="143:13" pos:end="143:13">j</name> <operator pos:start="143:15" pos:end="143:15">=</operator> <literal type="number" pos:start="143:17" pos:end="143:17">0</literal></expr>;</expr_stmt>

            <for pos:start="145:13" pos:end="255:13">for<control pos:start="145:16" pos:end="145:37">(<init pos:start="145:17" pos:end="145:20"><expr pos:start="145:17" pos:end="145:19"><name pos:start="145:17" pos:end="145:17">i</name><operator pos:start="145:18" pos:end="145:18">=</operator><literal type="number" pos:start="145:19" pos:end="145:19">0</literal></expr>;</init><condition pos:start="145:21" pos:end="145:33"><expr pos:start="145:21" pos:end="145:32"><name pos:start="145:21" pos:end="145:21">i</name><operator pos:start="145:22" pos:end="145:22">&lt;</operator><name pos:start="145:23" pos:end="145:32"><name pos:start="145:23" pos:end="145:23">s</name><operator pos:start="145:24" pos:end="145:25">-&gt;</operator><name pos:start="145:26" pos:end="145:32">sblimit</name></name></expr>;</condition><incr pos:start="145:34" pos:end="145:36"><expr pos:start="145:34" pos:end="145:36"><name pos:start="145:34" pos:end="145:34">i</name><operator pos:start="145:35" pos:end="145:36">++</operator></expr></incr>)</control> <block pos:start="145:39" pos:end="255:13">{<block_content pos:start="147:17" pos:end="253:41">

                <expr_stmt pos:start="147:17" pos:end="147:51"><expr pos:start="147:17" pos:end="147:50"><name pos:start="147:17" pos:end="147:30">bit_alloc_bits</name> <operator pos:start="147:32" pos:end="147:32">=</operator> <name pos:start="147:34" pos:end="147:50"><name pos:start="147:34" pos:end="147:34">s</name><operator pos:start="147:35" pos:end="147:36">-&gt;</operator><name pos:start="147:37" pos:end="147:47">alloc_table</name><index pos:start="147:48" pos:end="147:50">[<expr pos:start="147:49" pos:end="147:49"><name pos:start="147:49" pos:end="147:49">j</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="149:17" pos:end="249:17">for<control pos:start="149:20" pos:end="149:48">(<init pos:start="149:21" pos:end="149:25"><expr pos:start="149:21" pos:end="149:24"><name pos:start="149:21" pos:end="149:22">ch</name><operator pos:start="149:23" pos:end="149:23">=</operator><literal type="number" pos:start="149:24" pos:end="149:24">0</literal></expr>;</init><condition pos:start="149:26" pos:end="149:43"><expr pos:start="149:26" pos:end="149:42"><name pos:start="149:26" pos:end="149:27">ch</name><operator pos:start="149:28" pos:end="149:28">&lt;</operator><name pos:start="149:29" pos:end="149:42"><name pos:start="149:29" pos:end="149:29">s</name><operator pos:start="149:30" pos:end="149:31">-&gt;</operator><name pos:start="149:32" pos:end="149:42">nb_channels</name></name></expr>;</condition><incr pos:start="149:44" pos:end="149:47"><expr pos:start="149:44" pos:end="149:47"><name pos:start="149:44" pos:end="149:45">ch</name><operator pos:start="149:46" pos:end="149:47">++</operator></expr></incr>)</control> <block pos:start="149:50" pos:end="249:17">{<block_content pos:start="151:21" pos:end="247:21">

                    <expr_stmt pos:start="151:21" pos:end="151:41"><expr pos:start="151:21" pos:end="151:40"><name pos:start="151:21" pos:end="151:21">b</name> <operator pos:start="151:23" pos:end="151:23">=</operator> <name pos:start="151:25" pos:end="151:40"><name pos:start="151:25" pos:end="151:33">bit_alloc</name><index pos:start="151:34" pos:end="151:37">[<expr pos:start="151:35" pos:end="151:36"><name pos:start="151:35" pos:end="151:36">ch</name></expr>]</index><index pos:start="151:38" pos:end="151:40">[<expr pos:start="151:39" pos:end="151:39"><name pos:start="151:39" pos:end="151:39">i</name></expr>]</index></name></expr>;</expr_stmt>

                    <if_stmt pos:start="153:21" pos:end="247:21"><if pos:start="153:21" pos:end="247:21">if <condition pos:start="153:24" pos:end="153:26">(<expr pos:start="153:25" pos:end="153:25"><name pos:start="153:25" pos:end="153:25">b</name></expr>)</condition> <block pos:start="153:28" pos:end="247:21">{<block_content pos:start="155:25" pos:end="245:25">

                        <decl_stmt pos:start="155:25" pos:end="155:59"><decl pos:start="155:25" pos:end="155:34"><type pos:start="155:25" pos:end="155:27"><name pos:start="155:25" pos:end="155:27">int</name></type> <name pos:start="155:29" pos:end="155:34">qindex</name></decl>, <decl pos:start="155:37" pos:end="155:41"><type ref="prev" pos:start="155:25" pos:end="155:27"/><name pos:start="155:37" pos:end="155:41">steps</name></decl>, <decl pos:start="155:44" pos:end="155:44"><type ref="prev" pos:start="155:25" pos:end="155:27"/><name pos:start="155:44" pos:end="155:44">m</name></decl>, <decl pos:start="155:47" pos:end="155:52"><type ref="prev" pos:start="155:25" pos:end="155:27"/><name pos:start="155:47" pos:end="155:52">sample</name></decl>, <decl pos:start="155:55" pos:end="155:58"><type ref="prev" pos:start="155:25" pos:end="155:27"/><name pos:start="155:55" pos:end="155:58">bits</name></decl>;</decl_stmt>

                        <comment type="block" pos:start="157:25" pos:end="157:89">/* we encode 3 sub band samples of the same sub band at a time */</comment>

                        <expr_stmt pos:start="159:25" pos:end="159:53"><expr pos:start="159:25" pos:end="159:52"><name pos:start="159:25" pos:end="159:30">qindex</name> <operator pos:start="159:32" pos:end="159:32">=</operator> <name pos:start="159:34" pos:end="159:52"><name pos:start="159:34" pos:end="159:34">s</name><operator pos:start="159:35" pos:end="159:36">-&gt;</operator><name pos:start="159:37" pos:end="159:47">alloc_table</name><index pos:start="159:48" pos:end="159:52">[<expr pos:start="159:49" pos:end="159:51"><name pos:start="159:49" pos:end="159:49">j</name><operator pos:start="159:50" pos:end="159:50">+</operator><name pos:start="159:51" pos:end="159:51">b</name></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="161:25" pos:end="161:59"><expr pos:start="161:25" pos:end="161:58"><name pos:start="161:25" pos:end="161:29">steps</name> <operator pos:start="161:31" pos:end="161:31">=</operator> <name pos:start="161:33" pos:end="161:58"><name pos:start="161:33" pos:end="161:50">ff_mpa_quant_steps</name><index pos:start="161:51" pos:end="161:58">[<expr pos:start="161:52" pos:end="161:57"><name pos:start="161:52" pos:end="161:57">qindex</name></expr>]</index></name></expr>;</expr_stmt>

                        <for pos:start="163:25" pos:end="225:25">for<control pos:start="163:28" pos:end="163:40">(<init pos:start="163:29" pos:end="163:32"><expr pos:start="163:29" pos:end="163:31"><name pos:start="163:29" pos:end="163:29">m</name><operator pos:start="163:30" pos:end="163:30">=</operator><literal type="number" pos:start="163:31" pos:end="163:31">0</literal></expr>;</init><condition pos:start="163:33" pos:end="163:36"><expr pos:start="163:33" pos:end="163:35"><name pos:start="163:33" pos:end="163:33">m</name><operator pos:start="163:34" pos:end="163:34">&lt;</operator><literal type="number" pos:start="163:35" pos:end="163:35">3</literal></expr>;</condition><incr pos:start="163:37" pos:end="163:39"><expr pos:start="163:37" pos:end="163:39"><name pos:start="163:37" pos:end="163:37">m</name><operator pos:start="163:38" pos:end="163:39">++</operator></expr></incr>)</control> <block pos:start="163:42" pos:end="225:25">{<block_content pos:start="165:29" pos:end="223:66">

                            <expr_stmt pos:start="165:29" pos:end="170:0"><expr pos:start="165:29" pos:end="165:67"><name pos:start="165:29" pos:end="165:34">sample</name> <operator pos:start="165:36" pos:end="165:36">=</operator> <name pos:start="165:38" pos:end="165:67"><name pos:start="165:38" pos:end="165:38">s</name><operator pos:start="165:39" pos:end="165:40">-&gt;</operator><name pos:start="165:41" pos:end="165:50">sb_samples</name><index pos:start="165:51" pos:end="165:54">[<expr pos:start="165:52" pos:end="165:53"><name pos:start="165:52" pos:end="165:53">ch</name></expr>]</index><index pos:start="165:55" pos:end="165:57">[<expr pos:start="165:56" pos:end="165:56"><name pos:start="165:56" pos:end="165:56">k</name></expr>]</index><index pos:start="165:58" pos:end="165:64">[<expr pos:start="165:59" pos:end="165:63"><name pos:start="165:59" pos:end="165:59">l</name> <operator pos:start="165:61" pos:end="165:61">+</operator> <name pos:start="165:63" pos:end="165:63">m</name></expr>]</index><index pos:start="165:65" pos:end="165:67">[<expr pos:start="165:66" pos:end="165:66"><name pos:start="165:66" pos:end="165:66">i</name></expr>]</index></name></expr>;</expr_stmt>

                            <comment type="block" pos:start="167:29" pos:end="167:56">/* divide by scale factor */</comment>

<cpp:if pos:start="169:1" pos:end="169:14">#<cpp:directive pos:start="169:2" pos:end="169:3">if</cpp:directive> <expr pos:start="169:5" pos:end="169:14"><name pos:start="169:5" pos:end="169:14">USE_FLOATS</name></expr></cpp:if>

                            <block pos:start="171:29" pos:end="182:0">{<block_content pos:start="173:33" pos:end="177:70">

                                <decl_stmt pos:start="173:33" pos:end="173:40"><decl pos:start="173:33" pos:end="173:39"><type pos:start="173:33" pos:end="173:37"><name pos:start="173:33" pos:end="173:37">float</name></type> <name pos:start="173:39" pos:end="173:39">a</name></decl>;</decl_stmt>

                                <expr_stmt pos:start="175:33" pos:end="175:106"><expr pos:start="175:33" pos:end="175:105"><name pos:start="175:33" pos:end="175:33">a</name> <operator pos:start="175:35" pos:end="175:35">=</operator> <operator pos:start="175:37" pos:end="175:37">(</operator><name pos:start="175:38" pos:end="175:42">float</name><operator pos:start="175:43" pos:end="175:43">)</operator><name pos:start="175:44" pos:end="175:49">sample</name> <operator pos:start="175:51" pos:end="175:51">*</operator> <name pos:start="175:53" pos:end="175:105"><name pos:start="175:53" pos:end="175:53">s</name><operator pos:start="175:54" pos:end="175:55">-&gt;</operator><name pos:start="175:56" pos:end="175:77">scale_factor_inv_table</name><index pos:start="175:78" pos:end="175:105">[<expr pos:start="175:79" pos:end="175:104"><name pos:start="175:79" pos:end="175:104"><name pos:start="175:79" pos:end="175:79">s</name><operator pos:start="175:80" pos:end="175:81">-&gt;</operator><name pos:start="175:82" pos:end="175:94">scale_factors</name><index pos:start="175:95" pos:end="175:98">[<expr pos:start="175:96" pos:end="175:97"><name pos:start="175:96" pos:end="175:97">ch</name></expr>]</index><index pos:start="175:99" pos:end="175:101">[<expr pos:start="175:100" pos:end="175:100"><name pos:start="175:100" pos:end="175:100">i</name></expr>]</index><index pos:start="175:102" pos:end="175:104">[<expr pos:start="175:103" pos:end="175:103"><name pos:start="175:103" pos:end="175:103">k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

                                <expr_stmt pos:start="177:33" pos:end="177:70"><expr pos:start="177:33" pos:end="177:69"><name pos:start="177:33" pos:end="177:36"><name pos:start="177:33" pos:end="177:33">q</name><index pos:start="177:34" pos:end="177:36">[<expr pos:start="177:35" pos:end="177:35"><name pos:start="177:35" pos:end="177:35">m</name></expr>]</index></name> <operator pos:start="177:38" pos:end="177:38">=</operator> <operator pos:start="177:40" pos:end="177:40">(</operator><name pos:start="177:41" pos:end="177:43">int</name><operator pos:start="177:44" pos:end="177:44">)</operator><operator pos:start="177:45" pos:end="177:45">(</operator><operator pos:start="177:46" pos:end="177:46">(</operator><name pos:start="177:47" pos:end="177:47">a</name> <operator pos:start="177:49" pos:end="177:49">+</operator> <literal type="number" pos:start="177:51" pos:end="177:53">1.0</literal><operator pos:start="177:54" pos:end="177:54">)</operator> <operator pos:start="177:56" pos:end="177:56">*</operator> <name pos:start="177:58" pos:end="177:62">steps</name> <operator pos:start="177:64" pos:end="177:64">*</operator> <literal type="number" pos:start="177:66" pos:end="177:68">0.5</literal><operator pos:start="177:69" pos:end="177:69">)</operator></expr>;</expr_stmt>

                            </block_content>}</block>

<cpp:else pos:start="181:1" pos:end="181:5">#<cpp:directive pos:start="181:2" pos:end="181:5">else</cpp:directive></cpp:else>

                            <block pos:start="183:29" pos:end="218:0">{<block_content pos:start="185:33" pos:end="213:73">

                                <decl_stmt pos:start="185:33" pos:end="185:55"><decl pos:start="185:33" pos:end="185:38"><type pos:start="185:33" pos:end="185:35"><name pos:start="185:33" pos:end="185:35">int</name></type> <name pos:start="185:37" pos:end="185:38">q1</name></decl>, <decl pos:start="185:41" pos:end="185:41"><type ref="prev" pos:start="185:33" pos:end="185:35"/><name pos:start="185:41" pos:end="185:41">e</name></decl>, <decl pos:start="185:44" pos:end="185:48"><type ref="prev" pos:start="185:33" pos:end="185:35"/><name pos:start="185:44" pos:end="185:48">shift</name></decl>, <decl pos:start="185:51" pos:end="185:54"><type ref="prev" pos:start="185:33" pos:end="185:35"/><name pos:start="185:51" pos:end="185:54">mult</name></decl>;</decl_stmt>

                                <expr_stmt pos:start="187:33" pos:end="187:63"><expr pos:start="187:33" pos:end="187:62"><name pos:start="187:33" pos:end="187:33">e</name> <operator pos:start="187:35" pos:end="187:35">=</operator> <name pos:start="187:37" pos:end="187:62"><name pos:start="187:37" pos:end="187:37">s</name><operator pos:start="187:38" pos:end="187:39">-&gt;</operator><name pos:start="187:40" pos:end="187:52">scale_factors</name><index pos:start="187:53" pos:end="187:56">[<expr pos:start="187:54" pos:end="187:55"><name pos:start="187:54" pos:end="187:55">ch</name></expr>]</index><index pos:start="187:57" pos:end="187:59">[<expr pos:start="187:58" pos:end="187:58"><name pos:start="187:58" pos:end="187:58">i</name></expr>]</index><index pos:start="187:60" pos:end="187:62">[<expr pos:start="187:61" pos:end="187:61"><name pos:start="187:61" pos:end="187:61">k</name></expr>]</index></name></expr>;</expr_stmt>

                                <expr_stmt pos:start="189:33" pos:end="189:65"><expr pos:start="189:33" pos:end="189:64"><name pos:start="189:33" pos:end="189:37">shift</name> <operator pos:start="189:39" pos:end="189:39">=</operator> <name pos:start="189:41" pos:end="189:64"><name pos:start="189:41" pos:end="189:41">s</name><operator pos:start="189:42" pos:end="189:43">-&gt;</operator><name pos:start="189:44" pos:end="189:61">scale_factor_shift</name><index pos:start="189:62" pos:end="189:64">[<expr pos:start="189:63" pos:end="189:63"><name pos:start="189:63" pos:end="189:63">e</name></expr>]</index></name></expr>;</expr_stmt>

                                <expr_stmt pos:start="191:33" pos:end="191:63"><expr pos:start="191:33" pos:end="191:62"><name pos:start="191:33" pos:end="191:36">mult</name> <operator pos:start="191:38" pos:end="191:38">=</operator> <name pos:start="191:40" pos:end="191:62"><name pos:start="191:40" pos:end="191:40">s</name><operator pos:start="191:41" pos:end="191:42">-&gt;</operator><name pos:start="191:43" pos:end="191:59">scale_factor_mult</name><index pos:start="191:60" pos:end="191:62">[<expr pos:start="191:61" pos:end="191:61"><name pos:start="191:61" pos:end="191:61">e</name></expr>]</index></name></expr>;</expr_stmt>



                                <comment type="block" pos:start="195:33" pos:end="195:57">/* normalize to P bits */</comment>

                                <if_stmt pos:start="197:33" pos:end="203:57"><if pos:start="197:33" pos:end="199:60">if <condition pos:start="197:36" pos:end="197:46">(<expr pos:start="197:37" pos:end="197:45"><name pos:start="197:37" pos:end="197:41">shift</name> <operator pos:start="197:43" pos:end="197:43">&lt;</operator> <literal type="number" pos:start="197:45" pos:end="197:45">0</literal></expr>)</condition><block type="pseudo" pos:start="199:37" pos:end="199:60"><block_content pos:start="199:37" pos:end="199:60">

                                    <expr_stmt pos:start="199:37" pos:end="199:60"><expr pos:start="199:37" pos:end="199:59"><name pos:start="199:37" pos:end="199:38">q1</name> <operator pos:start="199:40" pos:end="199:40">=</operator> <name pos:start="199:42" pos:end="199:47">sample</name> <operator pos:start="199:49" pos:end="199:50">&lt;&lt;</operator> <operator pos:start="199:52" pos:end="199:52">(</operator><operator pos:start="199:53" pos:end="199:53">-</operator><name pos:start="199:54" pos:end="199:58">shift</name><operator pos:start="199:59" pos:end="199:59">)</operator></expr>;</expr_stmt></block_content></block></if>

                                <else pos:start="201:33" pos:end="203:57">else<block type="pseudo" pos:start="203:37" pos:end="203:57"><block_content pos:start="203:37" pos:end="203:57">

                                    <expr_stmt pos:start="203:37" pos:end="203:57"><expr pos:start="203:37" pos:end="203:56"><name pos:start="203:37" pos:end="203:38">q1</name> <operator pos:start="203:40" pos:end="203:40">=</operator> <name pos:start="203:42" pos:end="203:47">sample</name> <operator pos:start="203:49" pos:end="203:50">&gt;&gt;</operator> <name pos:start="203:52" pos:end="203:56">shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                                <expr_stmt pos:start="205:33" pos:end="205:54"><expr pos:start="205:33" pos:end="205:53"><name pos:start="205:33" pos:end="205:34">q1</name> <operator pos:start="205:36" pos:end="205:36">=</operator> <operator pos:start="205:38" pos:end="205:38">(</operator><name pos:start="205:39" pos:end="205:40">q1</name> <operator pos:start="205:42" pos:end="205:42">*</operator> <name pos:start="205:44" pos:end="205:47">mult</name><operator pos:start="205:48" pos:end="205:48">)</operator> <operator pos:start="205:50" pos:end="205:51">&gt;&gt;</operator> <name pos:start="205:53" pos:end="205:53">P</name></expr>;</expr_stmt>

                                <expr_stmt pos:start="207:33" pos:end="207:45"><expr pos:start="207:33" pos:end="207:44"><name pos:start="207:33" pos:end="207:34">q1</name> <operator pos:start="207:36" pos:end="207:37">+=</operator> <literal type="number" pos:start="207:39" pos:end="207:39">1</literal> <operator pos:start="207:41" pos:end="207:42">&lt;&lt;</operator> <name pos:start="207:44" pos:end="207:44">P</name></expr>;</expr_stmt>

                                <if_stmt pos:start="209:33" pos:end="211:43"><if pos:start="209:33" pos:end="211:43">if <condition pos:start="209:36" pos:end="209:43">(<expr pos:start="209:37" pos:end="209:42"><name pos:start="209:37" pos:end="209:38">q1</name> <operator pos:start="209:40" pos:end="209:40">&lt;</operator> <literal type="number" pos:start="209:42" pos:end="209:42">0</literal></expr>)</condition><block type="pseudo" pos:start="211:37" pos:end="211:43"><block_content pos:start="211:37" pos:end="211:43">

                                    <expr_stmt pos:start="211:37" pos:end="211:43"><expr pos:start="211:37" pos:end="211:42"><name pos:start="211:37" pos:end="211:38">q1</name> <operator pos:start="211:40" pos:end="211:40">=</operator> <literal type="number" pos:start="211:42" pos:end="211:42">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                                <expr_stmt pos:start="213:33" pos:end="213:73"><expr pos:start="213:33" pos:end="213:72"><name pos:start="213:33" pos:end="213:36"><name pos:start="213:33" pos:end="213:33">q</name><index pos:start="213:34" pos:end="213:36">[<expr pos:start="213:35" pos:end="213:35"><name pos:start="213:35" pos:end="213:35">m</name></expr>]</index></name> <operator pos:start="213:38" pos:end="213:38">=</operator> <operator pos:start="213:40" pos:end="213:40">(</operator><name pos:start="213:41" pos:end="213:48">unsigned</name><operator pos:start="213:49" pos:end="213:49">)</operator><operator pos:start="213:50" pos:end="213:50">(</operator><name pos:start="213:51" pos:end="213:52">q1</name> <operator pos:start="213:54" pos:end="213:54">*</operator> <name pos:start="213:56" pos:end="213:60">steps</name><operator pos:start="213:61" pos:end="213:61">)</operator> <operator pos:start="213:63" pos:end="213:64">&gt;&gt;</operator> <operator pos:start="213:66" pos:end="213:66">(</operator><name pos:start="213:67" pos:end="213:67">P</name> <operator pos:start="213:69" pos:end="213:69">+</operator> <literal type="number" pos:start="213:71" pos:end="213:71">1</literal><operator pos:start="213:72" pos:end="213:72">)</operator></expr>;</expr_stmt>

                            </block_content>}</block>

<cpp:endif pos:start="217:1" pos:end="217:6">#<cpp:directive pos:start="217:2" pos:end="217:6">endif</cpp:directive></cpp:endif>

                            <if_stmt pos:start="219:29" pos:end="221:49"><if pos:start="219:29" pos:end="221:49">if <condition pos:start="219:32" pos:end="219:46">(<expr pos:start="219:33" pos:end="219:45"><name pos:start="219:33" pos:end="219:36"><name pos:start="219:33" pos:end="219:33">q</name><index pos:start="219:34" pos:end="219:36">[<expr pos:start="219:35" pos:end="219:35"><name pos:start="219:35" pos:end="219:35">m</name></expr>]</index></name> <operator pos:start="219:38" pos:end="219:39">&gt;=</operator> <name pos:start="219:41" pos:end="219:45">steps</name></expr>)</condition><block type="pseudo" pos:start="221:33" pos:end="221:49"><block_content pos:start="221:33" pos:end="221:49">

                                <expr_stmt pos:start="221:33" pos:end="221:49"><expr pos:start="221:33" pos:end="221:48"><name pos:start="221:33" pos:end="221:36"><name pos:start="221:33" pos:end="221:33">q</name><index pos:start="221:34" pos:end="221:36">[<expr pos:start="221:35" pos:end="221:35"><name pos:start="221:35" pos:end="221:35">m</name></expr>]</index></name> <operator pos:start="221:38" pos:end="221:38">=</operator> <name pos:start="221:40" pos:end="221:44">steps</name> <operator pos:start="221:46" pos:end="221:46">-</operator> <literal type="number" pos:start="221:48" pos:end="221:48">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <expr_stmt pos:start="223:29" pos:end="223:66"><expr pos:start="223:29" pos:end="223:65"><call pos:start="223:29" pos:end="223:65"><name pos:start="223:29" pos:end="223:38">av_assert2</name><argument_list pos:start="223:39" pos:end="223:65">(<argument pos:start="223:40" pos:end="223:64"><expr pos:start="223:40" pos:end="223:64"><name pos:start="223:40" pos:end="223:43"><name pos:start="223:40" pos:end="223:40">q</name><index pos:start="223:41" pos:end="223:43">[<expr pos:start="223:42" pos:end="223:42"><name pos:start="223:42" pos:end="223:42">m</name></expr>]</index></name> <operator pos:start="223:45" pos:end="223:46">&gt;=</operator> <literal type="number" pos:start="223:48" pos:end="223:48">0</literal> <operator pos:start="223:50" pos:end="223:51">&amp;&amp;</operator> <name pos:start="223:53" pos:end="223:56"><name pos:start="223:53" pos:end="223:53">q</name><index pos:start="223:54" pos:end="223:56">[<expr pos:start="223:55" pos:end="223:55"><name pos:start="223:55" pos:end="223:55">m</name></expr>]</index></name> <operator pos:start="223:58" pos:end="223:58">&lt;</operator> <name pos:start="223:60" pos:end="223:64">steps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></for>

                        <expr_stmt pos:start="227:25" pos:end="227:57"><expr pos:start="227:25" pos:end="227:56"><name pos:start="227:25" pos:end="227:28">bits</name> <operator pos:start="227:30" pos:end="227:30">=</operator> <name pos:start="227:32" pos:end="227:56"><name pos:start="227:32" pos:end="227:48">ff_mpa_quant_bits</name><index pos:start="227:49" pos:end="227:56">[<expr pos:start="227:50" pos:end="227:55"><name pos:start="227:50" pos:end="227:55">qindex</name></expr>]</index></name></expr>;</expr_stmt>

                        <if_stmt pos:start="229:25" pos:end="245:25"><if pos:start="229:25" pos:end="237:25">if <condition pos:start="229:28" pos:end="229:37">(<expr pos:start="229:29" pos:end="229:36"><name pos:start="229:29" pos:end="229:32">bits</name> <operator pos:start="229:34" pos:end="229:34">&lt;</operator> <literal type="number" pos:start="229:36" pos:end="229:36">0</literal></expr>)</condition> <block pos:start="229:39" pos:end="237:25">{<block_content pos:start="233:29" pos:end="235:75">

                            <comment type="block" pos:start="231:29" pos:end="231:65">/* group the 3 values to save bits */</comment>

                            <expr_stmt pos:start="233:29" pos:end="235:75"><expr pos:start="233:29" pos:end="235:74"><call pos:start="233:29" pos:end="235:74"><name pos:start="233:29" pos:end="233:36">put_bits</name><argument_list pos:start="233:37" pos:end="235:74">(<argument pos:start="233:38" pos:end="233:38"><expr pos:start="233:38" pos:end="233:38"><name pos:start="233:38" pos:end="233:38">p</name></expr></argument>, <argument pos:start="233:41" pos:end="233:45"><expr pos:start="233:41" pos:end="233:45"><operator pos:start="233:41" pos:end="233:41">-</operator><name pos:start="233:42" pos:end="233:45">bits</name></expr></argument>,

                                     <argument pos:start="235:38" pos:end="235:73"><expr pos:start="235:38" pos:end="235:73"><name pos:start="235:38" pos:end="235:41"><name pos:start="235:38" pos:end="235:38">q</name><index pos:start="235:39" pos:end="235:41">[<expr pos:start="235:40" pos:end="235:40"><literal type="number" pos:start="235:40" pos:end="235:40">0</literal></expr>]</index></name> <operator pos:start="235:43" pos:end="235:43">+</operator> <name pos:start="235:45" pos:end="235:49">steps</name> <operator pos:start="235:51" pos:end="235:51">*</operator> <operator pos:start="235:53" pos:end="235:53">(</operator><name pos:start="235:54" pos:end="235:57"><name pos:start="235:54" pos:end="235:54">q</name><index pos:start="235:55" pos:end="235:57">[<expr pos:start="235:56" pos:end="235:56"><literal type="number" pos:start="235:56" pos:end="235:56">1</literal></expr>]</index></name> <operator pos:start="235:59" pos:end="235:59">+</operator> <name pos:start="235:61" pos:end="235:65">steps</name> <operator pos:start="235:67" pos:end="235:67">*</operator> <name pos:start="235:69" pos:end="235:72"><name pos:start="235:69" pos:end="235:69">q</name><index pos:start="235:70" pos:end="235:72">[<expr pos:start="235:71" pos:end="235:71"><literal type="number" pos:start="235:71" pos:end="235:71">2</literal></expr>]</index></name><operator pos:start="235:73" pos:end="235:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="237:27" pos:end="245:25">else <block pos:start="237:32" pos:end="245:25">{<block_content pos:start="239:29" pos:end="243:52">

                            <expr_stmt pos:start="239:29" pos:end="239:52"><expr pos:start="239:29" pos:end="239:51"><call pos:start="239:29" pos:end="239:51"><name pos:start="239:29" pos:end="239:36">put_bits</name><argument_list pos:start="239:37" pos:end="239:51">(<argument pos:start="239:38" pos:end="239:38"><expr pos:start="239:38" pos:end="239:38"><name pos:start="239:38" pos:end="239:38">p</name></expr></argument>, <argument pos:start="239:41" pos:end="239:44"><expr pos:start="239:41" pos:end="239:44"><name pos:start="239:41" pos:end="239:44">bits</name></expr></argument>, <argument pos:start="239:47" pos:end="239:50"><expr pos:start="239:47" pos:end="239:50"><name pos:start="239:47" pos:end="239:50"><name pos:start="239:47" pos:end="239:47">q</name><index pos:start="239:48" pos:end="239:50">[<expr pos:start="239:49" pos:end="239:49"><literal type="number" pos:start="239:49" pos:end="239:49">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="241:29" pos:end="241:52"><expr pos:start="241:29" pos:end="241:51"><call pos:start="241:29" pos:end="241:51"><name pos:start="241:29" pos:end="241:36">put_bits</name><argument_list pos:start="241:37" pos:end="241:51">(<argument pos:start="241:38" pos:end="241:38"><expr pos:start="241:38" pos:end="241:38"><name pos:start="241:38" pos:end="241:38">p</name></expr></argument>, <argument pos:start="241:41" pos:end="241:44"><expr pos:start="241:41" pos:end="241:44"><name pos:start="241:41" pos:end="241:44">bits</name></expr></argument>, <argument pos:start="241:47" pos:end="241:50"><expr pos:start="241:47" pos:end="241:50"><name pos:start="241:47" pos:end="241:50"><name pos:start="241:47" pos:end="241:47">q</name><index pos:start="241:48" pos:end="241:50">[<expr pos:start="241:49" pos:end="241:49"><literal type="number" pos:start="241:49" pos:end="241:49">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="243:29" pos:end="243:52"><expr pos:start="243:29" pos:end="243:51"><call pos:start="243:29" pos:end="243:51"><name pos:start="243:29" pos:end="243:36">put_bits</name><argument_list pos:start="243:37" pos:end="243:51">(<argument pos:start="243:38" pos:end="243:38"><expr pos:start="243:38" pos:end="243:38"><name pos:start="243:38" pos:end="243:38">p</name></expr></argument>, <argument pos:start="243:41" pos:end="243:44"><expr pos:start="243:41" pos:end="243:44"><name pos:start="243:41" pos:end="243:44">bits</name></expr></argument>, <argument pos:start="243:47" pos:end="243:50"><expr pos:start="243:47" pos:end="243:50"><name pos:start="243:47" pos:end="243:50"><name pos:start="243:47" pos:end="243:47">q</name><index pos:start="243:48" pos:end="243:50">[<expr pos:start="243:49" pos:end="243:49"><literal type="number" pos:start="243:49" pos:end="243:49">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

                <comment type="block" pos:start="251:17" pos:end="251:49">/* next subband in alloc table */</comment>

                <expr_stmt pos:start="253:17" pos:end="253:41"><expr pos:start="253:17" pos:end="253:40"><name pos:start="253:17" pos:end="253:17">j</name> <operator pos:start="253:19" pos:end="253:20">+=</operator> <literal type="number" pos:start="253:22" pos:end="253:22">1</literal> <operator pos:start="253:24" pos:end="253:25">&lt;&lt;</operator> <name pos:start="253:27" pos:end="253:40">bit_alloc_bits</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <comment type="block" pos:start="263:5" pos:end="263:17">/* padding */</comment>

    <for pos:start="265:5" pos:end="267:26">for<control pos:start="265:8" pos:end="265:26">(<init pos:start="265:9" pos:end="265:12"><expr pos:start="265:9" pos:end="265:11"><name pos:start="265:9" pos:end="265:9">i</name><operator pos:start="265:10" pos:end="265:10">=</operator><literal type="number" pos:start="265:11" pos:end="265:11">0</literal></expr>;</init><condition pos:start="265:13" pos:end="265:22"><expr pos:start="265:13" pos:end="265:21"><name pos:start="265:13" pos:end="265:13">i</name><operator pos:start="265:14" pos:end="265:14">&lt;</operator><name pos:start="265:15" pos:end="265:21">padding</name></expr>;</condition><incr pos:start="265:23" pos:end="265:25"><expr pos:start="265:23" pos:end="265:25"><name pos:start="265:23" pos:end="265:23">i</name><operator pos:start="265:24" pos:end="265:25">++</operator></expr></incr>)</control><block type="pseudo" pos:start="267:9" pos:end="267:26"><block_content pos:start="267:9" pos:end="267:26">

        <expr_stmt pos:start="267:9" pos:end="267:26"><expr pos:start="267:9" pos:end="267:25"><call pos:start="267:9" pos:end="267:25"><name pos:start="267:9" pos:end="267:16">put_bits</name><argument_list pos:start="267:17" pos:end="267:25">(<argument pos:start="267:18" pos:end="267:18"><expr pos:start="267:18" pos:end="267:18"><name pos:start="267:18" pos:end="267:18">p</name></expr></argument>, <argument pos:start="267:21" pos:end="267:21"><expr pos:start="267:21" pos:end="267:21"><literal type="number" pos:start="267:21" pos:end="267:21">1</literal></expr></argument>, <argument pos:start="267:24" pos:end="267:24"><expr pos:start="267:24" pos:end="267:24"><literal type="number" pos:start="267:24" pos:end="267:24">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="271:5" pos:end="271:15">/* flush */</comment>

    <expr_stmt pos:start="273:5" pos:end="273:22"><expr pos:start="273:5" pos:end="273:21"><call pos:start="273:5" pos:end="273:21"><name pos:start="273:5" pos:end="273:18">flush_put_bits</name><argument_list pos:start="273:19" pos:end="273:21">(<argument pos:start="273:20" pos:end="273:20"><expr pos:start="273:20" pos:end="273:20"><name pos:start="273:20" pos:end="273:20">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
