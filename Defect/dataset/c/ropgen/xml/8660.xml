<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8660.c" pos:tabs="8"><function pos:start="1:1" pos:end="335:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">realview_init</name><parameter_list pos:start="1:26" pos:end="7:72">(<parameter pos:start="1:27" pos:end="1:45"><decl pos:start="1:27" pos:end="1:45"><type pos:start="1:27" pos:end="1:45"><name pos:start="1:27" pos:end="1:36">ram_addr_t</name></type> <name pos:start="1:38" pos:end="1:45">ram_size</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:44"><decl pos:start="3:22" pos:end="3:44"><type pos:start="3:22" pos:end="3:44"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:31">char</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:44">boot_device</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:48"><decl pos:start="5:22" pos:end="5:48"><type pos:start="5:22" pos:end="5:48"><specifier pos:start="5:22" pos:end="5:26">const</specifier> <name pos:start="5:28" pos:end="5:31">char</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:48">kernel_filename</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:76"><decl pos:start="5:51" pos:end="5:76"><type pos:start="5:51" pos:end="5:76"><specifier pos:start="5:51" pos:end="5:55">const</specifier> <name pos:start="5:57" pos:end="5:60">char</name> <modifier pos:start="5:62" pos:end="5:62">*</modifier></type><name pos:start="5:63" pos:end="5:76">kernel_cmdline</name></decl></parameter>,

                     <parameter pos:start="7:22" pos:end="7:48"><decl pos:start="7:22" pos:end="7:48"><type pos:start="7:22" pos:end="7:48"><specifier pos:start="7:22" pos:end="7:26">const</specifier> <name pos:start="7:28" pos:end="7:31">char</name> <modifier pos:start="7:33" pos:end="7:33">*</modifier></type><name pos:start="7:34" pos:end="7:48">initrd_filename</name></decl></parameter>, <parameter pos:start="7:51" pos:end="7:71"><decl pos:start="7:51" pos:end="7:71"><type pos:start="7:51" pos:end="7:71"><specifier pos:start="7:51" pos:end="7:55">const</specifier> <name pos:start="7:57" pos:end="7:60">char</name> <modifier pos:start="7:62" pos:end="7:62">*</modifier></type><name pos:start="7:63" pos:end="7:71">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="335:1">{<block_content pos:start="11:5" pos:end="333:48">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">ram_addr_t</name></type> <name pos:start="13:16" pos:end="13:25">ram_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">DeviceState</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">qemu_irq</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:18">irqp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">qemu_irq</name></type> <name pos:start="19:14" pos:end="19:20"><name pos:start="19:14" pos:end="19:16">pic</name><index pos:start="19:17" pos:end="19:20">[<expr pos:start="19:18" pos:end="19:19"><literal type="number" pos:start="19:18" pos:end="19:19">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:10">PCIBus</name> <modifier pos:start="21:12" pos:end="21:12">*</modifier></type><name pos:start="21:13" pos:end="21:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">NICInfo</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:15">nd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:21"><decl pos:start="27:5" pos:end="27:20"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:16">done_smc</name> <init pos:start="27:18" pos:end="27:20">= <expr pos:start="27:20" pos:end="27:20"><literal type="number" pos:start="27:20" pos:end="27:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:24"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:12">qemu_irq</name></type> <name pos:start="29:14" pos:end="29:23"><name pos:start="29:14" pos:end="29:20">cpu_irq</name><index pos:start="29:21" pos:end="29:23">[<expr pos:start="29:22" pos:end="29:22"><literal type="number" pos:start="29:22" pos:end="29:22">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:13"><decl pos:start="31:5" pos:end="31:12"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:12">ncpu</name></decl>;</decl_stmt>



    <if_stmt pos:start="35:5" pos:end="37:29"><if pos:start="35:5" pos:end="37:29">if <condition pos:start="35:8" pos:end="35:19">(<expr pos:start="35:9" pos:end="35:18"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:29"><block_content pos:start="37:9" pos:end="37:29">

        <expr_stmt pos:start="37:9" pos:end="37:29"><expr pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:17">cpu_model</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <literal type="string" pos:start="37:21" pos:end="37:28">"arm926"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block" pos:start="39:5" pos:end="39:32">/* FIXME: obey smp_cpus.  */</comment>

    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:46">(<expr pos:start="41:9" pos:end="41:45"><call pos:start="41:9" pos:end="41:40"><name pos:start="41:9" pos:end="41:14">strcmp</name><argument_list pos:start="41:15" pos:end="41:40">(<argument pos:start="41:16" pos:end="41:24"><expr pos:start="41:16" pos:end="41:24"><name pos:start="41:16" pos:end="41:24">cpu_model</name></expr></argument>, <argument pos:start="41:27" pos:end="41:39"><expr pos:start="41:27" pos:end="41:39"><literal type="string" pos:start="41:27" pos:end="41:39">"arm11mpcore"</literal></expr></argument>)</argument_list></call> <operator pos:start="41:42" pos:end="41:43">==</operator> <literal type="number" pos:start="41:45" pos:end="41:45">0</literal></expr>)</condition> <block pos:start="41:48" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:17">

        <expr_stmt pos:start="43:9" pos:end="43:17"><expr pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:12">ncpu</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <literal type="number" pos:start="43:16" pos:end="43:16">4</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="49:5">else <block pos:start="45:12" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:17">

        <expr_stmt pos:start="47:9" pos:end="47:17"><expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:12">ncpu</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <literal type="number" pos:start="47:16" pos:end="47:16">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="53:5" pos:end="75:5">for <control pos:start="53:9" pos:end="53:30">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">n</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:25"><expr pos:start="53:17" pos:end="53:24"><name pos:start="53:17" pos:end="53:17">n</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <name pos:start="53:21" pos:end="53:24">ncpu</name></expr>;</condition> <incr pos:start="53:27" pos:end="53:29"><expr pos:start="53:27" pos:end="53:29"><name pos:start="53:27" pos:end="53:27">n</name><operator pos:start="53:28" pos:end="53:29">++</operator></expr></incr>)</control> <block pos:start="53:32" pos:end="75:5">{<block_content pos:start="55:9" pos:end="73:9">

        <expr_stmt pos:start="55:9" pos:end="55:34"><expr pos:start="55:9" pos:end="55:33"><name pos:start="55:9" pos:end="55:11">env</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <call pos:start="55:15" pos:end="55:33"><name pos:start="55:15" pos:end="55:22">cpu_init</name><argument_list pos:start="55:23" pos:end="55:33">(<argument pos:start="55:24" pos:end="55:32"><expr pos:start="55:24" pos:end="55:32"><name pos:start="55:24" pos:end="55:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:17">(<expr pos:start="57:13" pos:end="57:16"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:16">env</name></expr>)</condition> <block pos:start="57:19" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:20">

            <expr_stmt pos:start="59:13" pos:end="59:63"><expr pos:start="59:13" pos:end="59:62"><call pos:start="59:13" pos:end="59:62"><name pos:start="59:13" pos:end="59:19">fprintf</name><argument_list pos:start="59:20" pos:end="59:62">(<argument pos:start="59:21" pos:end="59:26"><expr pos:start="59:21" pos:end="59:26"><name pos:start="59:21" pos:end="59:26">stderr</name></expr></argument>, <argument pos:start="59:29" pos:end="59:61"><expr pos:start="59:29" pos:end="59:61"><literal type="string" pos:start="59:29" pos:end="59:61">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:20"><expr pos:start="61:13" pos:end="61:19"><call pos:start="61:13" pos:end="61:19"><name pos:start="61:13" pos:end="61:16">exit</name><argument_list pos:start="61:17" pos:end="61:19">(<argument pos:start="61:18" pos:end="61:18"><expr pos:start="61:18" pos:end="61:18"><literal type="number" pos:start="61:18" pos:end="61:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:37"><expr pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:12">irqp</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <call pos:start="65:16" pos:end="65:36"><name pos:start="65:16" pos:end="65:31">arm_pic_init_cpu</name><argument_list pos:start="65:32" pos:end="65:36">(<argument pos:start="65:33" pos:end="65:35"><expr pos:start="65:33" pos:end="65:35"><name pos:start="65:33" pos:end="65:35">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:43"><expr pos:start="67:9" pos:end="67:42"><name pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:15">cpu_irq</name><index pos:start="67:16" pos:end="67:18">[<expr pos:start="67:17" pos:end="67:17"><name pos:start="67:17" pos:end="67:17">n</name></expr>]</index></name> <operator pos:start="67:20" pos:end="67:20">=</operator> <name pos:start="67:22" pos:end="67:42"><name pos:start="67:22" pos:end="67:25">irqp</name><index pos:start="67:26" pos:end="67:42">[<expr pos:start="67:27" pos:end="67:41"><name pos:start="67:27" pos:end="67:41">ARM_PIC_CPU_IRQ</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="73:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:18">(<expr pos:start="69:13" pos:end="69:17"><name pos:start="69:13" pos:end="69:13">n</name> <operator pos:start="69:15" pos:end="69:15">&gt;</operator> <literal type="number" pos:start="69:17" pos:end="69:17">0</literal></expr>)</condition> <block pos:start="69:20" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:58">

            <expr_stmt pos:start="71:13" pos:end="71:58"><expr pos:start="71:13" pos:end="71:57"><call pos:start="71:13" pos:end="71:57"><name pos:start="71:13" pos:end="71:31">qemu_register_reset</name><argument_list pos:start="71:32" pos:end="71:57">(<argument pos:start="71:33" pos:end="71:51"><expr pos:start="71:33" pos:end="71:51"><name pos:start="71:33" pos:end="71:51">secondary_cpu_reset</name></expr></argument>, <argument pos:start="71:54" pos:end="71:56"><expr pos:start="71:54" pos:end="71:56"><name pos:start="71:54" pos:end="71:56">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="79:5" pos:end="79:42"><expr pos:start="79:5" pos:end="79:41"><name pos:start="79:5" pos:end="79:14">ram_offset</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <call pos:start="79:18" pos:end="79:41"><name pos:start="79:18" pos:end="79:31">qemu_ram_alloc</name><argument_list pos:start="79:32" pos:end="79:41">(<argument pos:start="79:33" pos:end="79:40"><expr pos:start="79:33" pos:end="79:40"><name pos:start="79:33" pos:end="79:40">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="81:5" pos:end="81:63">/* ??? RAM should repeat to fill physical memory space.  */</comment>

    <comment type="block" pos:start="83:5" pos:end="83:33">/* SDRAM at address zero.  */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:71"><expr pos:start="85:5" pos:end="85:70"><call pos:start="85:5" pos:end="85:70"><name pos:start="85:5" pos:end="85:32">cpu_register_physical_memory</name><argument_list pos:start="85:33" pos:end="85:70">(<argument pos:start="85:34" pos:end="85:34"><expr pos:start="85:34" pos:end="85:34"><literal type="number" pos:start="85:34" pos:end="85:34">0</literal></expr></argument>, <argument pos:start="85:37" pos:end="85:44"><expr pos:start="85:37" pos:end="85:44"><name pos:start="85:37" pos:end="85:44">ram_size</name></expr></argument>, <argument pos:start="85:47" pos:end="85:69"><expr pos:start="85:47" pos:end="85:69"><name pos:start="85:47" pos:end="85:56">ram_offset</name> <operator pos:start="85:58" pos:end="85:58">|</operator> <name pos:start="85:60" pos:end="85:69">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:44"><expr pos:start="89:5" pos:end="89:43"><call pos:start="89:5" pos:end="89:43"><name pos:start="89:5" pos:end="89:19">arm_sysctl_init</name><argument_list pos:start="89:20" pos:end="89:43">(<argument pos:start="89:21" pos:end="89:30"><expr pos:start="89:21" pos:end="89:30"><literal type="number" pos:start="89:21" pos:end="89:30">0x10000000</literal></expr></argument>, <argument pos:start="89:33" pos:end="89:42"><expr pos:start="89:33" pos:end="89:42"><literal type="number" pos:start="89:33" pos:end="89:42">0xc1400400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="93:5" pos:end="111:5"><if pos:start="93:5" pos:end="103:5">if <condition pos:start="93:8" pos:end="93:18">(<expr pos:start="93:9" pos:end="93:17"><name pos:start="93:9" pos:end="93:12">ncpu</name> <operator pos:start="93:14" pos:end="93:15">==</operator> <literal type="number" pos:start="93:17" pos:end="93:17">1</literal></expr>)</condition> <block pos:start="93:20" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:75">

        <comment type="block" pos:start="95:9" pos:end="99:78">/* ??? The documentation says GIC1 is nFIQ and either GIC2 or GIC3

           is nIRQ (there are inconsistencies).  However Linux 2.6.17 expects

           GIC1 to be nIRQ and ignores all the others, so do that for now.  */</comment>

        <expr_stmt pos:start="101:9" pos:end="101:75"><expr pos:start="101:9" pos:end="101:74"><name pos:start="101:9" pos:end="101:11">dev</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <call pos:start="101:15" pos:end="101:74"><name pos:start="101:15" pos:end="101:34">sysbus_create_simple</name><argument_list pos:start="101:35" pos:end="101:74">(<argument pos:start="101:36" pos:end="101:49"><expr pos:start="101:36" pos:end="101:49"><literal type="string" pos:start="101:36" pos:end="101:49">"realview_gic"</literal></expr></argument>, <argument pos:start="101:52" pos:end="101:61"><expr pos:start="101:52" pos:end="101:61"><literal type="number" pos:start="101:52" pos:end="101:61">0x10040000</literal></expr></argument>, <argument pos:start="101:64" pos:end="101:73"><expr pos:start="101:64" pos:end="101:73"><name pos:start="101:64" pos:end="101:73"><name pos:start="101:64" pos:end="101:70">cpu_irq</name><index pos:start="101:71" pos:end="101:73">[<expr pos:start="101:72" pos:end="101:72"><literal type="number" pos:start="101:72" pos:end="101:72">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="103:7" pos:end="111:5">else <block pos:start="103:12" pos:end="111:5">{<block_content pos:start="105:9" pos:end="109:54">

        <expr_stmt pos:start="105:9" pos:end="109:54"><expr pos:start="105:9" pos:end="109:53"><name pos:start="105:9" pos:end="105:11">dev</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <call pos:start="105:15" pos:end="109:53"><name pos:start="105:15" pos:end="105:35">sysbus_create_varargs</name><argument_list pos:start="105:36" pos:end="109:53">(<argument pos:start="105:37" pos:end="105:53"><expr pos:start="105:37" pos:end="105:53"><literal type="string" pos:start="105:37" pos:end="105:53">"realview_mpcore"</literal></expr></argument>, <argument pos:start="105:56" pos:end="105:57"><expr pos:start="105:56" pos:end="105:57"><operator pos:start="105:56" pos:end="105:56">-</operator><literal type="number" pos:start="105:57" pos:end="105:57">1</literal></expr></argument>,

                                    <argument pos:start="107:37" pos:end="107:46"><expr pos:start="107:37" pos:end="107:46"><name pos:start="107:37" pos:end="107:46"><name pos:start="107:37" pos:end="107:43">cpu_irq</name><index pos:start="107:44" pos:end="107:46">[<expr pos:start="107:45" pos:end="107:45"><literal type="number" pos:start="107:45" pos:end="107:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="107:49" pos:end="107:58"><expr pos:start="107:49" pos:end="107:58"><name pos:start="107:49" pos:end="107:58"><name pos:start="107:49" pos:end="107:55">cpu_irq</name><index pos:start="107:56" pos:end="107:58">[<expr pos:start="107:57" pos:end="107:57"><literal type="number" pos:start="107:57" pos:end="107:57">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="107:61" pos:end="107:70"><expr pos:start="107:61" pos:end="107:70"><name pos:start="107:61" pos:end="107:70"><name pos:start="107:61" pos:end="107:67">cpu_irq</name><index pos:start="107:68" pos:end="107:70">[<expr pos:start="107:69" pos:end="107:69"><literal type="number" pos:start="107:69" pos:end="107:69">2</literal></expr>]</index></name></expr></argument>,

                                    <argument pos:start="109:37" pos:end="109:46"><expr pos:start="109:37" pos:end="109:46"><name pos:start="109:37" pos:end="109:46"><name pos:start="109:37" pos:end="109:43">cpu_irq</name><index pos:start="109:44" pos:end="109:46">[<expr pos:start="109:45" pos:end="109:45"><literal type="number" pos:start="109:45" pos:end="109:45">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:49" pos:end="109:52"><expr pos:start="109:49" pos:end="109:52"><name pos:start="109:49" pos:end="109:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <for pos:start="113:5" pos:end="117:5">for <control pos:start="113:9" pos:end="113:28">(<init pos:start="113:10" pos:end="113:15"><expr pos:start="113:10" pos:end="113:14"><name pos:start="113:10" pos:end="113:10">n</name> <operator pos:start="113:12" pos:end="113:12">=</operator> <literal type="number" pos:start="113:14" pos:end="113:14">0</literal></expr>;</init> <condition pos:start="113:17" pos:end="113:23"><expr pos:start="113:17" pos:end="113:22"><name pos:start="113:17" pos:end="113:17">n</name> <operator pos:start="113:19" pos:end="113:19">&lt;</operator> <literal type="number" pos:start="113:21" pos:end="113:22">64</literal></expr>;</condition> <incr pos:start="113:25" pos:end="113:27"><expr pos:start="113:25" pos:end="113:27"><name pos:start="113:25" pos:end="113:25">n</name><operator pos:start="113:26" pos:end="113:27">++</operator></expr></incr>)</control> <block pos:start="113:30" pos:end="117:5">{<block_content pos:start="115:9" pos:end="115:42">

        <expr_stmt pos:start="115:9" pos:end="115:42"><expr pos:start="115:9" pos:end="115:41"><name pos:start="115:9" pos:end="115:14"><name pos:start="115:9" pos:end="115:11">pic</name><index pos:start="115:12" pos:end="115:14">[<expr pos:start="115:13" pos:end="115:13"><name pos:start="115:13" pos:end="115:13">n</name></expr>]</index></name> <operator pos:start="115:16" pos:end="115:16">=</operator> <call pos:start="115:18" pos:end="115:41"><name pos:start="115:18" pos:end="115:33">qdev_get_gpio_in</name><argument_list pos:start="115:34" pos:end="115:41">(<argument pos:start="115:35" pos:end="115:37"><expr pos:start="115:35" pos:end="115:37"><name pos:start="115:35" pos:end="115:37">dev</name></expr></argument>, <argument pos:start="115:40" pos:end="115:40"><expr pos:start="115:40" pos:end="115:40"><name pos:start="115:40" pos:end="115:40">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="121:5" pos:end="121:64"><expr pos:start="121:5" pos:end="121:63"><call pos:start="121:5" pos:end="121:63"><name pos:start="121:5" pos:end="121:24">sysbus_create_simple</name><argument_list pos:start="121:25" pos:end="121:63">(<argument pos:start="121:26" pos:end="121:41"><expr pos:start="121:26" pos:end="121:41"><literal type="string" pos:start="121:26" pos:end="121:41">"pl050_keyboard"</literal></expr></argument>, <argument pos:start="121:44" pos:end="121:53"><expr pos:start="121:44" pos:end="121:53"><literal type="number" pos:start="121:44" pos:end="121:53">0x10006000</literal></expr></argument>, <argument pos:start="121:56" pos:end="121:62"><expr pos:start="121:56" pos:end="121:62"><name pos:start="121:56" pos:end="121:62"><name pos:start="121:56" pos:end="121:58">pic</name><index pos:start="121:59" pos:end="121:62">[<expr pos:start="121:60" pos:end="121:61"><literal type="number" pos:start="121:60" pos:end="121:61">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:61"><expr pos:start="123:5" pos:end="123:60"><call pos:start="123:5" pos:end="123:60"><name pos:start="123:5" pos:end="123:24">sysbus_create_simple</name><argument_list pos:start="123:25" pos:end="123:60">(<argument pos:start="123:26" pos:end="123:38"><expr pos:start="123:26" pos:end="123:38"><literal type="string" pos:start="123:26" pos:end="123:38">"pl050_mouse"</literal></expr></argument>, <argument pos:start="123:41" pos:end="123:50"><expr pos:start="123:41" pos:end="123:50"><literal type="number" pos:start="123:41" pos:end="123:50">0x10007000</literal></expr></argument>, <argument pos:start="123:53" pos:end="123:59"><expr pos:start="123:53" pos:end="123:59"><name pos:start="123:53" pos:end="123:59"><name pos:start="123:53" pos:end="123:55">pic</name><index pos:start="123:56" pos:end="123:59">[<expr pos:start="123:57" pos:end="123:58"><literal type="number" pos:start="123:57" pos:end="123:58">21</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:55"><expr pos:start="127:5" pos:end="127:54"><call pos:start="127:5" pos:end="127:54"><name pos:start="127:5" pos:end="127:24">sysbus_create_simple</name><argument_list pos:start="127:25" pos:end="127:54">(<argument pos:start="127:26" pos:end="127:32"><expr pos:start="127:26" pos:end="127:32"><literal type="string" pos:start="127:26" pos:end="127:32">"pl011"</literal></expr></argument>, <argument pos:start="127:35" pos:end="127:44"><expr pos:start="127:35" pos:end="127:44"><literal type="number" pos:start="127:35" pos:end="127:44">0x10009000</literal></expr></argument>, <argument pos:start="127:47" pos:end="127:53"><expr pos:start="127:47" pos:end="127:53"><name pos:start="127:47" pos:end="127:53"><name pos:start="127:47" pos:end="127:49">pic</name><index pos:start="127:50" pos:end="127:53">[<expr pos:start="127:51" pos:end="127:52"><literal type="number" pos:start="127:51" pos:end="127:52">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:55"><expr pos:start="129:5" pos:end="129:54"><call pos:start="129:5" pos:end="129:54"><name pos:start="129:5" pos:end="129:24">sysbus_create_simple</name><argument_list pos:start="129:25" pos:end="129:54">(<argument pos:start="129:26" pos:end="129:32"><expr pos:start="129:26" pos:end="129:32"><literal type="string" pos:start="129:26" pos:end="129:32">"pl011"</literal></expr></argument>, <argument pos:start="129:35" pos:end="129:44"><expr pos:start="129:35" pos:end="129:44"><literal type="number" pos:start="129:35" pos:end="129:44">0x1000a000</literal></expr></argument>, <argument pos:start="129:47" pos:end="129:53"><expr pos:start="129:47" pos:end="129:53"><name pos:start="129:47" pos:end="129:53"><name pos:start="129:47" pos:end="129:49">pic</name><index pos:start="129:50" pos:end="129:53">[<expr pos:start="129:51" pos:end="129:52"><literal type="number" pos:start="129:51" pos:end="129:52">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:55"><expr pos:start="131:5" pos:end="131:54"><call pos:start="131:5" pos:end="131:54"><name pos:start="131:5" pos:end="131:24">sysbus_create_simple</name><argument_list pos:start="131:25" pos:end="131:54">(<argument pos:start="131:26" pos:end="131:32"><expr pos:start="131:26" pos:end="131:32"><literal type="string" pos:start="131:26" pos:end="131:32">"pl011"</literal></expr></argument>, <argument pos:start="131:35" pos:end="131:44"><expr pos:start="131:35" pos:end="131:44"><literal type="number" pos:start="131:35" pos:end="131:44">0x1000b000</literal></expr></argument>, <argument pos:start="131:47" pos:end="131:53"><expr pos:start="131:47" pos:end="131:53"><name pos:start="131:47" pos:end="131:53"><name pos:start="131:47" pos:end="131:49">pic</name><index pos:start="131:50" pos:end="131:53">[<expr pos:start="131:51" pos:end="131:52"><literal type="number" pos:start="131:51" pos:end="131:52">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:55"><expr pos:start="133:5" pos:end="133:54"><call pos:start="133:5" pos:end="133:54"><name pos:start="133:5" pos:end="133:24">sysbus_create_simple</name><argument_list pos:start="133:25" pos:end="133:54">(<argument pos:start="133:26" pos:end="133:32"><expr pos:start="133:26" pos:end="133:32"><literal type="string" pos:start="133:26" pos:end="133:32">"pl011"</literal></expr></argument>, <argument pos:start="133:35" pos:end="133:44"><expr pos:start="133:35" pos:end="133:44"><literal type="number" pos:start="133:35" pos:end="133:44">0x1000c000</literal></expr></argument>, <argument pos:start="133:47" pos:end="133:53"><expr pos:start="133:47" pos:end="133:53"><name pos:start="133:47" pos:end="133:53"><name pos:start="133:47" pos:end="133:49">pic</name><index pos:start="133:50" pos:end="133:53">[<expr pos:start="133:51" pos:end="133:52"><literal type="number" pos:start="133:51" pos:end="133:52">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:50">/* DMA controller is optional, apparently.  */</comment>

    <expr_stmt pos:start="139:5" pos:end="139:55"><expr pos:start="139:5" pos:end="139:54"><call pos:start="139:5" pos:end="139:54"><name pos:start="139:5" pos:end="139:24">sysbus_create_simple</name><argument_list pos:start="139:25" pos:end="139:54">(<argument pos:start="139:26" pos:end="139:32"><expr pos:start="139:26" pos:end="139:32"><literal type="string" pos:start="139:26" pos:end="139:32">"pl081"</literal></expr></argument>, <argument pos:start="139:35" pos:end="139:44"><expr pos:start="139:35" pos:end="139:44"><literal type="number" pos:start="139:35" pos:end="139:44">0x10030000</literal></expr></argument>, <argument pos:start="139:47" pos:end="139:53"><expr pos:start="139:47" pos:end="139:53"><name pos:start="139:47" pos:end="139:53"><name pos:start="139:47" pos:end="139:49">pic</name><index pos:start="139:50" pos:end="139:53">[<expr pos:start="139:51" pos:end="139:52"><literal type="number" pos:start="139:51" pos:end="139:52">24</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:54"><expr pos:start="143:5" pos:end="143:53"><call pos:start="143:5" pos:end="143:53"><name pos:start="143:5" pos:end="143:24">sysbus_create_simple</name><argument_list pos:start="143:25" pos:end="143:53">(<argument pos:start="143:26" pos:end="143:32"><expr pos:start="143:26" pos:end="143:32"><literal type="string" pos:start="143:26" pos:end="143:32">"sp804"</literal></expr></argument>, <argument pos:start="143:35" pos:end="143:44"><expr pos:start="143:35" pos:end="143:44"><literal type="number" pos:start="143:35" pos:end="143:44">0x10011000</literal></expr></argument>, <argument pos:start="143:47" pos:end="143:52"><expr pos:start="143:47" pos:end="143:52"><name pos:start="143:47" pos:end="143:52"><name pos:start="143:47" pos:end="143:49">pic</name><index pos:start="143:50" pos:end="143:52">[<expr pos:start="143:51" pos:end="143:51"><literal type="number" pos:start="143:51" pos:end="143:51">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:54"><expr pos:start="145:5" pos:end="145:53"><call pos:start="145:5" pos:end="145:53"><name pos:start="145:5" pos:end="145:24">sysbus_create_simple</name><argument_list pos:start="145:25" pos:end="145:53">(<argument pos:start="145:26" pos:end="145:32"><expr pos:start="145:26" pos:end="145:32"><literal type="string" pos:start="145:26" pos:end="145:32">"sp804"</literal></expr></argument>, <argument pos:start="145:35" pos:end="145:44"><expr pos:start="145:35" pos:end="145:44"><literal type="number" pos:start="145:35" pos:end="145:44">0x10012000</literal></expr></argument>, <argument pos:start="145:47" pos:end="145:52"><expr pos:start="145:47" pos:end="145:52"><name pos:start="145:47" pos:end="145:52"><name pos:start="145:47" pos:end="145:49">pic</name><index pos:start="145:50" pos:end="145:52">[<expr pos:start="145:51" pos:end="145:51"><literal type="number" pos:start="145:51" pos:end="145:51">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:65"><expr pos:start="149:5" pos:end="149:64"><call pos:start="149:5" pos:end="149:64"><name pos:start="149:5" pos:end="149:24">sysbus_create_simple</name><argument_list pos:start="149:25" pos:end="149:64">(<argument pos:start="149:26" pos:end="149:42"><expr pos:start="149:26" pos:end="149:42"><literal type="string" pos:start="149:26" pos:end="149:42">"pl110_versatile"</literal></expr></argument>, <argument pos:start="149:45" pos:end="149:54"><expr pos:start="149:45" pos:end="149:54"><literal type="number" pos:start="149:45" pos:end="149:54">0x10020000</literal></expr></argument>, <argument pos:start="149:57" pos:end="149:63"><expr pos:start="149:57" pos:end="149:63"><name pos:start="149:57" pos:end="149:63"><name pos:start="149:57" pos:end="149:59">pic</name><index pos:start="149:60" pos:end="149:63">[<expr pos:start="149:61" pos:end="149:62"><literal type="number" pos:start="149:61" pos:end="149:62">23</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:71"><expr pos:start="153:5" pos:end="153:70"><call pos:start="153:5" pos:end="153:70"><name pos:start="153:5" pos:end="153:25">sysbus_create_varargs</name><argument_list pos:start="153:26" pos:end="153:70">(<argument pos:start="153:27" pos:end="153:33"><expr pos:start="153:27" pos:end="153:33"><literal type="string" pos:start="153:27" pos:end="153:33">"pl181"</literal></expr></argument>, <argument pos:start="153:36" pos:end="153:45"><expr pos:start="153:36" pos:end="153:45"><literal type="number" pos:start="153:36" pos:end="153:45">0x10005000</literal></expr></argument>, <argument pos:start="153:48" pos:end="153:54"><expr pos:start="153:48" pos:end="153:54"><name pos:start="153:48" pos:end="153:54"><name pos:start="153:48" pos:end="153:50">pic</name><index pos:start="153:51" pos:end="153:54">[<expr pos:start="153:52" pos:end="153:53"><literal type="number" pos:start="153:52" pos:end="153:53">17</literal></expr>]</index></name></expr></argument>, <argument pos:start="153:57" pos:end="153:63"><expr pos:start="153:57" pos:end="153:63"><name pos:start="153:57" pos:end="153:63"><name pos:start="153:57" pos:end="153:59">pic</name><index pos:start="153:60" pos:end="153:63">[<expr pos:start="153:61" pos:end="153:62"><literal type="number" pos:start="153:61" pos:end="153:62">18</literal></expr>]</index></name></expr></argument>, <argument pos:start="153:66" pos:end="153:69"><expr pos:start="153:66" pos:end="153:69"><name pos:start="153:66" pos:end="153:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="157:5" pos:end="157:55"><expr pos:start="157:5" pos:end="157:54"><call pos:start="157:5" pos:end="157:54"><name pos:start="157:5" pos:end="157:24">sysbus_create_simple</name><argument_list pos:start="157:25" pos:end="157:54">(<argument pos:start="157:26" pos:end="157:32"><expr pos:start="157:26" pos:end="157:32"><literal type="string" pos:start="157:26" pos:end="157:32">"pl031"</literal></expr></argument>, <argument pos:start="157:35" pos:end="157:44"><expr pos:start="157:35" pos:end="157:44"><literal type="number" pos:start="157:35" pos:end="157:44">0x10017000</literal></expr></argument>, <argument pos:start="157:47" pos:end="157:53"><expr pos:start="157:47" pos:end="157:53"><name pos:start="157:47" pos:end="157:53"><name pos:start="157:47" pos:end="157:49">pic</name><index pos:start="157:50" pos:end="157:53">[<expr pos:start="157:51" pos:end="157:52"><literal type="number" pos:start="157:51" pos:end="157:52">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="161:5" pos:end="163:74"><expr pos:start="161:5" pos:end="163:73"><name pos:start="161:5" pos:end="161:7">dev</name> <operator pos:start="161:9" pos:end="161:9">=</operator> <call pos:start="161:11" pos:end="163:73"><name pos:start="161:11" pos:end="161:31">sysbus_create_varargs</name><argument_list pos:start="161:32" pos:end="163:73">(<argument pos:start="161:33" pos:end="161:46"><expr pos:start="161:33" pos:end="161:46"><literal type="string" pos:start="161:33" pos:end="161:46">"realview_pci"</literal></expr></argument>, <argument pos:start="161:49" pos:end="161:58"><expr pos:start="161:49" pos:end="161:58"><literal type="number" pos:start="161:49" pos:end="161:58">0x60000000</literal></expr></argument>,

                                <argument pos:start="163:33" pos:end="163:39"><expr pos:start="163:33" pos:end="163:39"><name pos:start="163:33" pos:end="163:39"><name pos:start="163:33" pos:end="163:35">pic</name><index pos:start="163:36" pos:end="163:39">[<expr pos:start="163:37" pos:end="163:38"><literal type="number" pos:start="163:37" pos:end="163:38">48</literal></expr>]</index></name></expr></argument>, <argument pos:start="163:42" pos:end="163:48"><expr pos:start="163:42" pos:end="163:48"><name pos:start="163:42" pos:end="163:48"><name pos:start="163:42" pos:end="163:44">pic</name><index pos:start="163:45" pos:end="163:48">[<expr pos:start="163:46" pos:end="163:47"><literal type="number" pos:start="163:46" pos:end="163:47">49</literal></expr>]</index></name></expr></argument>, <argument pos:start="163:51" pos:end="163:57"><expr pos:start="163:51" pos:end="163:57"><name pos:start="163:51" pos:end="163:57"><name pos:start="163:51" pos:end="163:53">pic</name><index pos:start="163:54" pos:end="163:57">[<expr pos:start="163:55" pos:end="163:56"><literal type="number" pos:start="163:55" pos:end="163:56">50</literal></expr>]</index></name></expr></argument>, <argument pos:start="163:60" pos:end="163:66"><expr pos:start="163:60" pos:end="163:66"><name pos:start="163:60" pos:end="163:66"><name pos:start="163:60" pos:end="163:62">pic</name><index pos:start="163:63" pos:end="163:66">[<expr pos:start="163:64" pos:end="163:65"><literal type="number" pos:start="163:64" pos:end="163:65">51</literal></expr>]</index></name></expr></argument>, <argument pos:start="163:69" pos:end="163:72"><expr pos:start="163:69" pos:end="163:72"><name pos:start="163:69" pos:end="163:72">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:55"><expr pos:start="165:5" pos:end="165:54"><name pos:start="165:5" pos:end="165:11">pci_bus</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <operator pos:start="165:15" pos:end="165:15">(</operator><name pos:start="165:16" pos:end="165:21">PCIBus</name> <operator pos:start="165:23" pos:end="165:23">*</operator><operator pos:start="165:24" pos:end="165:24">)</operator><call pos:start="165:25" pos:end="165:54"><name pos:start="165:25" pos:end="165:42">qdev_get_child_bus</name><argument_list pos:start="165:43" pos:end="165:54">(<argument pos:start="165:44" pos:end="165:46"><expr pos:start="165:44" pos:end="165:46"><name pos:start="165:44" pos:end="165:46">dev</name></expr></argument>, <argument pos:start="165:49" pos:end="165:53"><expr pos:start="165:49" pos:end="165:53"><literal type="string" pos:start="165:49" pos:end="165:53">"pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="171:5"><if pos:start="167:5" pos:end="171:5">if <condition pos:start="167:8" pos:end="167:20">(<expr pos:start="167:9" pos:end="167:19"><name pos:start="167:9" pos:end="167:19">usb_enabled</name></expr>)</condition> <block pos:start="167:22" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:39">

        <expr_stmt pos:start="169:9" pos:end="169:39"><expr pos:start="169:9" pos:end="169:38"><call pos:start="169:9" pos:end="169:38"><name pos:start="169:9" pos:end="169:25">usb_ohci_init_pci</name><argument_list pos:start="169:26" pos:end="169:38">(<argument pos:start="169:27" pos:end="169:33"><expr pos:start="169:27" pos:end="169:33"><name pos:start="169:27" pos:end="169:33">pci_bus</name></expr></argument>, <argument pos:start="169:36" pos:end="169:37"><expr pos:start="169:36" pos:end="169:37"><operator pos:start="169:36" pos:end="169:36">-</operator><literal type="number" pos:start="169:37" pos:end="169:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:35"><expr pos:start="173:5" pos:end="173:34"><name pos:start="173:5" pos:end="173:5">n</name> <operator pos:start="173:7" pos:end="173:7">=</operator> <call pos:start="173:9" pos:end="173:34"><name pos:start="173:9" pos:end="173:25">drive_get_max_bus</name><argument_list pos:start="173:26" pos:end="173:34">(<argument pos:start="173:27" pos:end="173:33"><expr pos:start="173:27" pos:end="173:33"><name pos:start="173:27" pos:end="173:33">IF_SCSI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="175:5" pos:end="181:5">while <condition pos:start="175:11" pos:end="175:18">(<expr pos:start="175:12" pos:end="175:17"><name pos:start="175:12" pos:end="175:12">n</name> <operator pos:start="175:14" pos:end="175:15">&gt;=</operator> <literal type="number" pos:start="175:17" pos:end="175:17">0</literal></expr>)</condition> <block pos:start="175:20" pos:end="181:5">{<block_content pos:start="177:9" pos:end="179:12">

        <expr_stmt pos:start="177:9" pos:end="177:53"><expr pos:start="177:9" pos:end="177:52"><call pos:start="177:9" pos:end="177:52"><name pos:start="177:9" pos:end="177:25">pci_create_simple</name><argument_list pos:start="177:26" pos:end="177:52">(<argument pos:start="177:27" pos:end="177:33"><expr pos:start="177:27" pos:end="177:33"><name pos:start="177:27" pos:end="177:33">pci_bus</name></expr></argument>, <argument pos:start="177:36" pos:end="177:37"><expr pos:start="177:36" pos:end="177:37"><operator pos:start="177:36" pos:end="177:36">-</operator><literal type="number" pos:start="177:37" pos:end="177:37">1</literal></expr></argument>, <argument pos:start="177:40" pos:end="177:51"><expr pos:start="177:40" pos:end="177:51"><literal type="string" pos:start="177:40" pos:end="177:51">"lsi53c895a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:12"><expr pos:start="179:9" pos:end="179:11"><name pos:start="179:9" pos:end="179:9">n</name><operator pos:start="179:10" pos:end="179:11">--</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <for pos:start="183:5" pos:end="201:5">for<control pos:start="183:8" pos:end="183:32">(<init pos:start="183:9" pos:end="183:14"><expr pos:start="183:9" pos:end="183:13"><name pos:start="183:9" pos:end="183:9">n</name> <operator pos:start="183:11" pos:end="183:11">=</operator> <literal type="number" pos:start="183:13" pos:end="183:13">0</literal></expr>;</init> <condition pos:start="183:16" pos:end="183:27"><expr pos:start="183:16" pos:end="183:26"><name pos:start="183:16" pos:end="183:16">n</name> <operator pos:start="183:18" pos:end="183:18">&lt;</operator> <name pos:start="183:20" pos:end="183:26">nb_nics</name></expr>;</condition> <incr pos:start="183:29" pos:end="183:31"><expr pos:start="183:29" pos:end="183:31"><name pos:start="183:29" pos:end="183:29">n</name><operator pos:start="183:30" pos:end="183:31">++</operator></expr></incr>)</control> <block pos:start="183:34" pos:end="201:5">{<block_content pos:start="185:9" pos:end="199:9">

        <expr_stmt pos:start="185:9" pos:end="185:26"><expr pos:start="185:9" pos:end="185:25"><name pos:start="185:9" pos:end="185:10">nd</name> <operator pos:start="185:12" pos:end="185:12">=</operator> <operator pos:start="185:14" pos:end="185:14">&amp;</operator><name pos:start="185:15" pos:end="185:25"><name pos:start="185:15" pos:end="185:22">nd_table</name><index pos:start="185:23" pos:end="185:25">[<expr pos:start="185:24" pos:end="185:24"><name pos:start="185:24" pos:end="185:24">n</name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="189:9" pos:end="199:9"><if pos:start="189:9" pos:end="195:9">if <condition pos:start="189:12" pos:end="189:77">(<expr pos:start="189:13" pos:end="189:76"><operator pos:start="189:13" pos:end="189:13">(</operator><operator pos:start="189:14" pos:end="189:14">!</operator><name pos:start="189:15" pos:end="189:23"><name pos:start="189:15" pos:end="189:16">nd</name><operator pos:start="189:17" pos:end="189:18">-&gt;</operator><name pos:start="189:19" pos:end="189:23">model</name></name> <operator pos:start="189:25" pos:end="189:26">&amp;&amp;</operator> <operator pos:start="189:28" pos:end="189:28">!</operator><name pos:start="189:29" pos:end="189:36">done_smc</name><operator pos:start="189:37" pos:end="189:37">)</operator> <operator pos:start="189:39" pos:end="189:40">||</operator> <call pos:start="189:42" pos:end="189:71"><name pos:start="189:42" pos:end="189:47">strcmp</name><argument_list pos:start="189:48" pos:end="189:71">(<argument pos:start="189:49" pos:end="189:57"><expr pos:start="189:49" pos:end="189:57"><name pos:start="189:49" pos:end="189:57"><name pos:start="189:49" pos:end="189:50">nd</name><operator pos:start="189:51" pos:end="189:52">-&gt;</operator><name pos:start="189:53" pos:end="189:57">model</name></name></expr></argument>, <argument pos:start="189:60" pos:end="189:70"><expr pos:start="189:60" pos:end="189:70"><literal type="string" pos:start="189:60" pos:end="189:70">"smc91c111"</literal></expr></argument>)</argument_list></call> <operator pos:start="189:73" pos:end="189:74">==</operator> <literal type="number" pos:start="189:76" pos:end="189:76">0</literal></expr>)</condition> <block pos:start="189:79" pos:end="195:9">{<block_content pos:start="191:13" pos:end="193:25">

            <expr_stmt pos:start="191:13" pos:end="191:52"><expr pos:start="191:13" pos:end="191:51"><call pos:start="191:13" pos:end="191:51"><name pos:start="191:13" pos:end="191:26">smc91c111_init</name><argument_list pos:start="191:27" pos:end="191:51">(<argument pos:start="191:28" pos:end="191:29"><expr pos:start="191:28" pos:end="191:29"><name pos:start="191:28" pos:end="191:29">nd</name></expr></argument>, <argument pos:start="191:32" pos:end="191:41"><expr pos:start="191:32" pos:end="191:41"><literal type="number" pos:start="191:32" pos:end="191:41">0x4e000000</literal></expr></argument>, <argument pos:start="191:44" pos:end="191:50"><expr pos:start="191:44" pos:end="191:50"><name pos:start="191:44" pos:end="191:50"><name pos:start="191:44" pos:end="191:46">pic</name><index pos:start="191:47" pos:end="191:50">[<expr pos:start="191:48" pos:end="191:49"><literal type="number" pos:start="191:48" pos:end="191:49">28</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:25"><expr pos:start="193:13" pos:end="193:24"><name pos:start="193:13" pos:end="193:20">done_smc</name> <operator pos:start="193:22" pos:end="193:22">=</operator> <literal type="number" pos:start="193:24" pos:end="193:24">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="195:11" pos:end="199:9">else <block pos:start="195:16" pos:end="199:9">{<block_content pos:start="197:13" pos:end="197:53">

            <expr_stmt pos:start="197:13" pos:end="197:53"><expr pos:start="197:13" pos:end="197:52"><call pos:start="197:13" pos:end="197:52"><name pos:start="197:13" pos:end="197:31">pci_nic_init_nofail</name><argument_list pos:start="197:32" pos:end="197:52">(<argument pos:start="197:33" pos:end="197:34"><expr pos:start="197:33" pos:end="197:34"><name pos:start="197:33" pos:end="197:34">nd</name></expr></argument>, <argument pos:start="197:37" pos:end="197:45"><expr pos:start="197:37" pos:end="197:45"><literal type="string" pos:start="197:37" pos:end="197:45">"rtl8139"</literal></expr></argument>, <argument pos:start="197:48" pos:end="197:51"><expr pos:start="197:48" pos:end="197:51"><name pos:start="197:48" pos:end="197:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="205:5" pos:end="205:55">/* Memory map for RealView Emulation Baseboard:  */</comment>

    <comment type="block" pos:start="207:5" pos:end="207:39">/* 0x10000000 System registers.  */</comment>

    <comment type="block" pos:start="209:5" pos:end="209:41">/*  0x10001000 System controller.  */</comment>

    <comment type="block" pos:start="211:5" pos:end="211:43">/*  0x10002000 Two-Wire Serial Bus.  */</comment>

    <comment type="block" pos:start="213:5" pos:end="213:31">/* 0x10003000 Reserved.  */</comment>

    <comment type="block" pos:start="215:5" pos:end="215:28">/*  0x10004000 AACI.  */</comment>

    <comment type="block" pos:start="217:5" pos:end="217:27">/*  0x10005000 MCI.  */</comment>

    <comment type="block" pos:start="219:5" pos:end="219:27">/* 0x10006000 KMI0.  */</comment>

    <comment type="block" pos:start="221:5" pos:end="221:27">/* 0x10007000 KMI1.  */</comment>

    <comment type="block" pos:start="223:5" pos:end="223:37">/*  0x10008000 Character LCD.  */</comment>

    <comment type="block" pos:start="225:5" pos:end="225:28">/* 0x10009000 UART0.  */</comment>

    <comment type="block" pos:start="227:5" pos:end="227:28">/* 0x1000a000 UART1.  */</comment>

    <comment type="block" pos:start="229:5" pos:end="229:28">/* 0x1000b000 UART2.  */</comment>

    <comment type="block" pos:start="231:5" pos:end="231:28">/* 0x1000c000 UART3.  */</comment>

    <comment type="block" pos:start="233:5" pos:end="233:28">/*  0x1000d000 SSPI.  */</comment>

    <comment type="block" pos:start="235:5" pos:end="235:27">/*  0x1000e000 SCI.  */</comment>

    <comment type="block" pos:start="237:5" pos:end="237:31">/* 0x1000f000 Reserved.  */</comment>

    <comment type="block" pos:start="239:5" pos:end="239:32">/*  0x10010000 Watchdog.  */</comment>

    <comment type="block" pos:start="241:5" pos:end="241:32">/* 0x10011000 Timer 0+1.  */</comment>

    <comment type="block" pos:start="243:5" pos:end="243:32">/* 0x10012000 Timer 2+3.  */</comment>

    <comment type="block" pos:start="245:5" pos:end="245:30">/*  0x10013000 GPIO 0.  */</comment>

    <comment type="block" pos:start="247:5" pos:end="247:30">/*  0x10014000 GPIO 1.  */</comment>

    <comment type="block" pos:start="249:5" pos:end="249:30">/*  0x10015000 GPIO 2.  */</comment>

    <comment type="block" pos:start="251:5" pos:end="251:31">/* 0x10016000 Reserved.  */</comment>

    <comment type="block" pos:start="253:5" pos:end="253:26">/* 0x10017000 RTC.  */</comment>

    <comment type="block" pos:start="255:5" pos:end="255:27">/*  0x10018000 DMC.  */</comment>

    <comment type="block" pos:start="257:5" pos:end="257:45">/*  0x10019000 PCI controller config.  */</comment>

    <comment type="block" pos:start="259:5" pos:end="259:28">/*  0x10020000 CLCD.  */</comment>

    <comment type="block" pos:start="261:5" pos:end="261:37">/* 0x10030000 DMA Controller.  */</comment>

    <comment type="block" pos:start="263:5" pos:end="263:27">/* 0x10040000 GIC1.  */</comment>

    <comment type="block" pos:start="265:5" pos:end="265:27">/* 0x10050000 GIC2.  */</comment>

    <comment type="block" pos:start="267:5" pos:end="267:27">/* 0x10060000 GIC3.  */</comment>

    <comment type="block" pos:start="269:5" pos:end="269:27">/* 0x10070000 GIC4.  */</comment>

    <comment type="block" pos:start="271:5" pos:end="271:27">/*  0x10080000 SMC.  */</comment>

    <comment type="block" pos:start="273:5" pos:end="273:33">/*  0x40000000 NOR flash.  */</comment>

    <comment type="block" pos:start="275:5" pos:end="275:33">/*  0x44000000 DoC flash.  */</comment>

    <comment type="block" pos:start="277:5" pos:end="277:28">/*  0x48000000 SRAM.  */</comment>

    <comment type="block" pos:start="279:5" pos:end="279:43">/*  0x4c000000 Configuration flash.  */</comment>

    <comment type="block" pos:start="281:5" pos:end="281:31">/* 0x4e000000 Ethernet.  */</comment>

    <comment type="block" pos:start="283:5" pos:end="283:27">/*  0x4f000000 USB.  */</comment>

    <comment type="block" pos:start="285:5" pos:end="285:29">/*  0x50000000 PISMO.  */</comment>

    <comment type="block" pos:start="287:5" pos:end="287:29">/*  0x54000000 PISMO.  */</comment>

    <comment type="block" pos:start="289:5" pos:end="289:29">/*  0x58000000 PISMO.  */</comment>

    <comment type="block" pos:start="291:5" pos:end="291:29">/*  0x5c000000 PISMO.  */</comment>

    <comment type="block" pos:start="293:5" pos:end="293:26">/* 0x60000000 PCI.  */</comment>

    <comment type="block" pos:start="295:5" pos:end="295:38">/* 0x61000000 PCI Self Config.  */</comment>

    <comment type="block" pos:start="297:5" pos:end="297:33">/* 0x62000000 PCI Config.  */</comment>

    <comment type="block" pos:start="299:5" pos:end="299:29">/* 0x63000000 PCI IO.  */</comment>

    <comment type="block" pos:start="301:5" pos:end="301:32">/* 0x64000000 PCI mem 0.  */</comment>

    <comment type="block" pos:start="303:5" pos:end="303:32">/* 0x68000000 PCI mem 1.  */</comment>

    <comment type="block" pos:start="305:5" pos:end="305:32">/* 0x6c000000 PCI mem 2.  */</comment>



    <comment type="block" pos:start="309:5" pos:end="315:54">/* ??? Hack to map an additional page of ram for the secondary CPU

       startup code.  I guess this works on real hardware because the

       BootROM happens to be in ROM/flash or in memory that isn't clobbered

       until after Linux boots the secondary CPUs.  */</comment>

    <expr_stmt pos:start="317:5" pos:end="317:40"><expr pos:start="317:5" pos:end="317:39"><name pos:start="317:5" pos:end="317:14">ram_offset</name> <operator pos:start="317:16" pos:end="317:16">=</operator> <call pos:start="317:18" pos:end="317:39"><name pos:start="317:18" pos:end="317:31">qemu_ram_alloc</name><argument_list pos:start="317:32" pos:end="317:39">(<argument pos:start="317:33" pos:end="317:38"><expr pos:start="317:33" pos:end="317:38"><literal type="number" pos:start="317:33" pos:end="317:38">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="319:5" pos:end="319:78"><expr pos:start="319:5" pos:end="319:77"><call pos:start="319:5" pos:end="319:77"><name pos:start="319:5" pos:end="319:32">cpu_register_physical_memory</name><argument_list pos:start="319:33" pos:end="319:77">(<argument pos:start="319:34" pos:end="319:43"><expr pos:start="319:34" pos:end="319:43"><literal type="number" pos:start="319:34" pos:end="319:43">0x80000000</literal></expr></argument>, <argument pos:start="319:46" pos:end="319:51"><expr pos:start="319:46" pos:end="319:51"><literal type="number" pos:start="319:46" pos:end="319:51">0x1000</literal></expr></argument>, <argument pos:start="319:54" pos:end="319:76"><expr pos:start="319:54" pos:end="319:76"><name pos:start="319:54" pos:end="319:63">ram_offset</name> <operator pos:start="319:65" pos:end="319:65">|</operator> <name pos:start="319:67" pos:end="319:76">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="323:5" pos:end="323:39"><expr pos:start="323:5" pos:end="323:38"><name pos:start="323:5" pos:end="323:27"><name pos:start="323:5" pos:end="323:18">realview_binfo</name><operator pos:start="323:19" pos:end="323:19">.</operator><name pos:start="323:20" pos:end="323:27">ram_size</name></name> <operator pos:start="323:29" pos:end="323:29">=</operator> <name pos:start="323:31" pos:end="323:38">ram_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="325:53"><expr pos:start="325:5" pos:end="325:52"><name pos:start="325:5" pos:end="325:34"><name pos:start="325:5" pos:end="325:18">realview_binfo</name><operator pos:start="325:19" pos:end="325:19">.</operator><name pos:start="325:20" pos:end="325:34">kernel_filename</name></name> <operator pos:start="325:36" pos:end="325:36">=</operator> <name pos:start="325:38" pos:end="325:52">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:51"><expr pos:start="327:5" pos:end="327:50"><name pos:start="327:5" pos:end="327:33"><name pos:start="327:5" pos:end="327:18">realview_binfo</name><operator pos:start="327:19" pos:end="327:19">.</operator><name pos:start="327:20" pos:end="327:33">kernel_cmdline</name></name> <operator pos:start="327:35" pos:end="327:35">=</operator> <name pos:start="327:37" pos:end="327:50">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="329:5" pos:end="329:53"><expr pos:start="329:5" pos:end="329:52"><name pos:start="329:5" pos:end="329:34"><name pos:start="329:5" pos:end="329:18">realview_binfo</name><operator pos:start="329:19" pos:end="329:19">.</operator><name pos:start="329:20" pos:end="329:34">initrd_filename</name></name> <operator pos:start="329:36" pos:end="329:36">=</operator> <name pos:start="329:38" pos:end="329:52">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:34"><expr pos:start="331:5" pos:end="331:33"><name pos:start="331:5" pos:end="331:26"><name pos:start="331:5" pos:end="331:18">realview_binfo</name><operator pos:start="331:19" pos:end="331:19">.</operator><name pos:start="331:20" pos:end="331:26">nb_cpus</name></name> <operator pos:start="331:28" pos:end="331:28">=</operator> <name pos:start="331:30" pos:end="331:33">ncpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="333:5" pos:end="333:48"><expr pos:start="333:5" pos:end="333:47"><call pos:start="333:5" pos:end="333:47"><name pos:start="333:5" pos:end="333:19">arm_load_kernel</name><argument_list pos:start="333:20" pos:end="333:47">(<argument pos:start="333:21" pos:end="333:29"><expr pos:start="333:21" pos:end="333:29"><name pos:start="333:21" pos:end="333:29">first_cpu</name></expr></argument>, <argument pos:start="333:32" pos:end="333:46"><expr pos:start="333:32" pos:end="333:46"><operator pos:start="333:32" pos:end="333:32">&amp;</operator><name pos:start="333:33" pos:end="333:46">realview_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
