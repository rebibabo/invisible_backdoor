<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2550.c" pos:tabs="8"><function pos:start="1:1" pos:end="197:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:38">usb_linux_update_endp_table</name><parameter_list pos:start="1:39" pos:end="1:56">(<parameter pos:start="1:40" pos:end="1:55"><decl pos:start="1:40" pos:end="1:55"><type pos:start="1:40" pos:end="1:54"><name pos:start="1:40" pos:end="1:52">USBHostDevice</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:55">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="197:1">{<block_content pos:start="5:5" pos:end="195:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:24">descriptors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:17">devep</name></decl>, <decl pos:start="7:20" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:20" pos:end="7:23">type</name></decl>, <decl pos:start="7:26" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:26" pos:end="7:38">alt_interface</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">interface</name></decl>, <decl pos:start="9:20" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:20" pos:end="9:25">length</name></decl>, <decl pos:start="9:28" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:28">i</name></decl>, <decl pos:start="9:31" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:31" pos:end="9:32">ep</name></decl>, <decl pos:start="9:35" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:35" pos:end="9:37">pid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:20">endp_data</name></name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:25">epd</name></decl>;</decl_stmt>



    <for pos:start="15:5" pos:end="21:5">for <control pos:start="15:9" pos:end="15:39">(<init pos:start="15:10" pos:end="15:15"><expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:10">i</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr>;</init> <condition pos:start="15:17" pos:end="15:34"><expr pos:start="15:17" pos:end="15:33"><name pos:start="15:17" pos:end="15:17">i</name> <operator pos:start="15:19" pos:end="15:19">&lt;</operator> <name pos:start="15:21" pos:end="15:33">MAX_ENDPOINTS</name></expr>;</condition> <incr pos:start="15:36" pos:end="15:38"><expr pos:start="15:36" pos:end="15:38"><name pos:start="15:36" pos:end="15:36">i</name><operator pos:start="15:37" pos:end="15:38">++</operator></expr></incr>)</control> <block pos:start="15:41" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:44">

        <expr_stmt pos:start="17:9" pos:end="17:43"><expr pos:start="17:9" pos:end="17:42"><name pos:start="17:9" pos:end="17:19"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:16">ep_in</name><index pos:start="17:17" pos:end="17:19">[<expr pos:start="17:18" pos:end="17:18"><name pos:start="17:18" pos:end="17:18">i</name></expr>]</index></name><operator pos:start="17:20" pos:end="17:20">.</operator><name pos:start="17:21" pos:end="17:24">type</name> <operator pos:start="17:26" pos:end="17:26">=</operator> <name pos:start="17:28" pos:end="17:42">INVALID_EP_TYPE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:44"><expr pos:start="19:9" pos:end="19:43"><name pos:start="19:9" pos:end="19:20"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:17">ep_out</name><index pos:start="19:18" pos:end="19:20">[<expr pos:start="19:19" pos:end="19:19"><name pos:start="19:19" pos:end="19:19">i</name></expr>]</index></name><operator pos:start="19:21" pos:end="19:21">.</operator><name pos:start="19:22" pos:end="19:25">type</name> <operator pos:start="19:27" pos:end="19:27">=</operator> <name pos:start="19:29" pos:end="19:43">INVALID_EP_TYPE</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:30">(<expr pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:24"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:24">configuration</name></name> <operator pos:start="25:26" pos:end="25:27">==</operator> <literal type="number" pos:start="25:29" pos:end="25:29">0</literal></expr>)</condition> <block pos:start="25:32" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:17">

        <comment type="block" pos:start="27:9" pos:end="27:64">/* not configured yet -- leave all endpoints disabled */</comment>

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="35:5" pos:end="37:33">/* get the desired configuration, interface, and endpoint descriptors

     * from device description */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:32"><expr pos:start="39:5" pos:end="39:31"><name pos:start="39:5" pos:end="39:15">descriptors</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <operator pos:start="39:19" pos:end="39:19">&amp;</operator><name pos:start="39:20" pos:end="39:31"><name pos:start="39:20" pos:end="39:20">s</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:27">descr</name><index pos:start="39:28" pos:end="39:31">[<expr pos:start="39:29" pos:end="39:30"><literal type="number" pos:start="39:29" pos:end="39:30">18</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:31"><expr pos:start="41:5" pos:end="41:30"><name pos:start="41:5" pos:end="41:10">length</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <name pos:start="41:14" pos:end="41:25"><name pos:start="41:14" pos:end="41:14">s</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:25">descr_len</name></name> <operator pos:start="41:27" pos:end="41:27">-</operator> <literal type="number" pos:start="41:29" pos:end="41:30">18</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:10"><expr pos:start="43:5" pos:end="43:9"><name pos:start="43:5" pos:end="43:5">i</name> <operator pos:start="43:7" pos:end="43:7">=</operator> <literal type="number" pos:start="43:9" pos:end="43:9">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="57:5"><if pos:start="47:5" pos:end="57:5">if <condition pos:start="47:8" pos:end="49:47">(<expr pos:start="47:9" pos:end="49:46"><name pos:start="47:9" pos:end="47:26"><name pos:start="47:9" pos:end="47:19">descriptors</name><index pos:start="47:20" pos:end="47:26">[<expr pos:start="47:21" pos:end="47:25"><name pos:start="47:21" pos:end="47:21">i</name> <operator pos:start="47:23" pos:end="47:23">+</operator> <literal type="number" pos:start="47:25" pos:end="47:25">1</literal></expr>]</index></name> <operator pos:start="47:28" pos:end="47:29">!=</operator> <name pos:start="47:31" pos:end="47:43">USB_DT_CONFIG</name> <operator pos:start="47:45" pos:end="47:46">||</operator>

        <name pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:19">descriptors</name><index pos:start="49:20" pos:end="49:26">[<expr pos:start="49:21" pos:end="49:25"><name pos:start="49:21" pos:end="49:21">i</name> <operator pos:start="49:23" pos:end="49:23">+</operator> <literal type="number" pos:start="49:25" pos:end="49:25">5</literal></expr>]</index></name> <operator pos:start="49:28" pos:end="49:29">!=</operator> <name pos:start="49:31" pos:end="49:46"><name pos:start="49:31" pos:end="49:31">s</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:46">configuration</name></name></expr>)</condition> <block pos:start="49:49" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:17">

        <expr_stmt pos:start="51:9" pos:end="53:34"><expr pos:start="51:9" pos:end="53:33"><call pos:start="51:9" pos:end="53:33"><name pos:start="51:9" pos:end="51:15">fprintf</name><argument_list pos:start="51:16" pos:end="53:33">(<argument pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:22">stderr</name></expr></argument>, <argument pos:start="51:25" pos:end="51:70"><expr pos:start="51:25" pos:end="51:70"><literal type="string" pos:start="51:25" pos:end="51:70">"invalid descriptor data - configuration %d\n"</literal></expr></argument>,

                <argument pos:start="53:17" pos:end="53:32"><expr pos:start="53:17" pos:end="53:32"><name pos:start="53:17" pos:end="53:32"><name pos:start="53:17" pos:end="53:17">s</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:32">configuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:17">return <expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:24"><expr pos:start="59:5" pos:end="59:23"><name pos:start="59:5" pos:end="59:5">i</name> <operator pos:start="59:7" pos:end="59:8">+=</operator> <name pos:start="59:10" pos:end="59:23"><name pos:start="59:10" pos:end="59:20">descriptors</name><index pos:start="59:21" pos:end="59:23">[<expr pos:start="59:22" pos:end="59:22"><name pos:start="59:22" pos:end="59:22">i</name></expr>]</index></name></expr>;</expr_stmt>



    <while pos:start="63:5" pos:end="193:5">while <condition pos:start="63:11" pos:end="63:22">(<expr pos:start="63:12" pos:end="63:21"><name pos:start="63:12" pos:end="63:12">i</name> <operator pos:start="63:14" pos:end="63:14">&lt;</operator> <name pos:start="63:16" pos:end="63:21">length</name></expr>)</condition> <block pos:start="63:24" pos:end="193:5">{<block_content pos:start="65:9" pos:end="191:9">

        <if_stmt pos:start="65:9" pos:end="75:9"><if pos:start="65:9" pos:end="75:9">if <condition pos:start="65:12" pos:end="69:38">(<expr pos:start="65:13" pos:end="69:37"><name pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:23">descriptors</name><index pos:start="65:24" pos:end="65:30">[<expr pos:start="65:25" pos:end="65:29"><name pos:start="65:25" pos:end="65:25">i</name> <operator pos:start="65:27" pos:end="65:27">+</operator> <literal type="number" pos:start="65:29" pos:end="65:29">1</literal></expr>]</index></name> <operator pos:start="65:32" pos:end="65:33">!=</operator> <name pos:start="65:35" pos:end="65:50">USB_DT_INTERFACE</name> <operator pos:start="65:52" pos:end="65:53">||</operator>

            <operator pos:start="67:13" pos:end="67:13">(</operator><name pos:start="67:14" pos:end="67:31"><name pos:start="67:14" pos:end="67:24">descriptors</name><index pos:start="67:25" pos:end="67:31">[<expr pos:start="67:26" pos:end="67:30"><name pos:start="67:26" pos:end="67:26">i</name> <operator pos:start="67:28" pos:end="67:28">+</operator> <literal type="number" pos:start="67:30" pos:end="67:30">1</literal></expr>]</index></name> <operator pos:start="67:33" pos:end="67:34">==</operator> <name pos:start="67:36" pos:end="67:51">USB_DT_INTERFACE</name> <operator pos:start="67:53" pos:end="67:54">&amp;&amp;</operator>

             <name pos:start="69:14" pos:end="69:31"><name pos:start="69:14" pos:end="69:24">descriptors</name><index pos:start="69:25" pos:end="69:31">[<expr pos:start="69:26" pos:end="69:30"><name pos:start="69:26" pos:end="69:26">i</name> <operator pos:start="69:28" pos:end="69:28">+</operator> <literal type="number" pos:start="69:30" pos:end="69:30">4</literal></expr>]</index></name> <operator pos:start="69:33" pos:end="69:34">==</operator> <literal type="number" pos:start="69:36" pos:end="69:36">0</literal><operator pos:start="69:37" pos:end="69:37">)</operator></expr>)</condition> <block pos:start="69:40" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:21">

            <expr_stmt pos:start="71:13" pos:end="71:32"><expr pos:start="71:13" pos:end="71:31"><name pos:start="71:13" pos:end="71:13">i</name> <operator pos:start="71:15" pos:end="71:16">+=</operator> <name pos:start="71:18" pos:end="71:31"><name pos:start="71:18" pos:end="71:28">descriptors</name><index pos:start="71:29" pos:end="71:31">[<expr pos:start="71:30" pos:end="71:30"><name pos:start="71:30" pos:end="71:30">i</name></expr>]</index></name></expr>;</expr_stmt>

            <continue pos:start="73:13" pos:end="73:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:39"><expr pos:start="79:9" pos:end="79:38"><name pos:start="79:9" pos:end="79:17">interface</name> <operator pos:start="79:19" pos:end="79:19">=</operator> <name pos:start="79:21" pos:end="79:38"><name pos:start="79:21" pos:end="79:31">descriptors</name><index pos:start="79:32" pos:end="79:38">[<expr pos:start="79:33" pos:end="79:37"><name pos:start="79:33" pos:end="79:33">i</name> <operator pos:start="79:35" pos:end="79:35">+</operator> <literal type="number" pos:start="79:37" pos:end="79:37">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="83:61"><expr pos:start="81:9" pos:end="83:60"><name pos:start="81:9" pos:end="81:21">alt_interface</name> <operator pos:start="81:23" pos:end="81:23">=</operator> <call pos:start="81:25" pos:end="83:60"><name pos:start="81:25" pos:end="81:49">usb_linux_get_alt_setting</name><argument_list pos:start="81:50" pos:end="83:60">(<argument pos:start="81:51" pos:end="81:51"><expr pos:start="81:51" pos:end="81:51"><name pos:start="81:51" pos:end="81:51">s</name></expr></argument>, <argument pos:start="81:54" pos:end="81:69"><expr pos:start="81:54" pos:end="81:69"><name pos:start="81:54" pos:end="81:69"><name pos:start="81:54" pos:end="81:54">s</name><operator pos:start="81:55" pos:end="81:56">-&gt;</operator><name pos:start="81:57" pos:end="81:69">configuration</name></name></expr></argument>,

                                                  <argument pos:start="83:51" pos:end="83:59"><expr pos:start="83:51" pos:end="83:59"><name pos:start="83:51" pos:end="83:59">interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="87:9" pos:end="89:31">/* the current interface descriptor is the active interface

         * and has endpoints */</comment>

        <if_stmt pos:start="91:9" pos:end="97:9"><if pos:start="91:9" pos:end="97:9">if <condition pos:start="91:12" pos:end="91:48">(<expr pos:start="91:13" pos:end="91:47"><name pos:start="91:13" pos:end="91:30"><name pos:start="91:13" pos:end="91:23">descriptors</name><index pos:start="91:24" pos:end="91:30">[<expr pos:start="91:25" pos:end="91:29"><name pos:start="91:25" pos:end="91:25">i</name> <operator pos:start="91:27" pos:end="91:27">+</operator> <literal type="number" pos:start="91:29" pos:end="91:29">3</literal></expr>]</index></name> <operator pos:start="91:32" pos:end="91:33">!=</operator> <name pos:start="91:35" pos:end="91:47">alt_interface</name></expr>)</condition> <block pos:start="91:50" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:21">

            <expr_stmt pos:start="93:13" pos:end="93:32"><expr pos:start="93:13" pos:end="93:31"><name pos:start="93:13" pos:end="93:13">i</name> <operator pos:start="93:15" pos:end="93:16">+=</operator> <name pos:start="93:18" pos:end="93:31"><name pos:start="93:18" pos:end="93:28">descriptors</name><index pos:start="93:29" pos:end="93:31">[<expr pos:start="93:30" pos:end="93:30"><name pos:start="93:30" pos:end="93:30">i</name></expr>]</index></name></expr>;</expr_stmt>

            <continue pos:start="95:13" pos:end="95:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="101:9" pos:end="101:38">/* advance to the endpoints */</comment>

        <while pos:start="103:9" pos:end="107:9">while <condition pos:start="103:15" pos:end="103:66">(<expr pos:start="103:16" pos:end="103:65"><name pos:start="103:16" pos:end="103:16">i</name> <operator pos:start="103:18" pos:end="103:18">&lt;</operator> <name pos:start="103:20" pos:end="103:25">length</name> <operator pos:start="103:27" pos:end="103:28">&amp;&amp;</operator> <name pos:start="103:30" pos:end="103:46"><name pos:start="103:30" pos:end="103:40">descriptors</name><index pos:start="103:41" pos:end="103:46">[<expr pos:start="103:42" pos:end="103:45"><name pos:start="103:42" pos:end="103:42">i</name> <operator pos:start="103:44" pos:end="103:44">+</operator><literal type="number" pos:start="103:45" pos:end="103:45">1</literal></expr>]</index></name> <operator pos:start="103:48" pos:end="103:49">!=</operator> <name pos:start="103:51" pos:end="103:65">USB_DT_ENDPOINT</name></expr>)</condition> <block pos:start="103:68" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:32">

            <expr_stmt pos:start="105:13" pos:end="105:32"><expr pos:start="105:13" pos:end="105:31"><name pos:start="105:13" pos:end="105:13">i</name> <operator pos:start="105:15" pos:end="105:16">+=</operator> <name pos:start="105:18" pos:end="105:31"><name pos:start="105:18" pos:end="105:28">descriptors</name><index pos:start="105:29" pos:end="105:31">[<expr pos:start="105:30" pos:end="105:30"><name pos:start="105:30" pos:end="105:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="111:9" pos:end="113:18"><if pos:start="111:9" pos:end="113:18">if <condition pos:start="111:12" pos:end="111:24">(<expr pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:13">i</name> <operator pos:start="111:15" pos:end="111:16">&gt;=</operator> <name pos:start="111:18" pos:end="111:23">length</name></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:18"><block_content pos:start="113:13" pos:end="113:18">

            <break pos:start="113:13" pos:end="113:18">break;</break></block_content></block></if></if_stmt>



        <while pos:start="117:9" pos:end="191:9">while <condition pos:start="117:15" pos:end="117:26">(<expr pos:start="117:16" pos:end="117:25"><name pos:start="117:16" pos:end="117:16">i</name> <operator pos:start="117:18" pos:end="117:18">&lt;</operator> <name pos:start="117:20" pos:end="117:25">length</name></expr>)</condition> <block pos:start="117:28" pos:end="191:9">{<block_content pos:start="119:13" pos:end="189:32">

            <if_stmt pos:start="119:13" pos:end="123:13"><if pos:start="119:13" pos:end="123:13">if <condition pos:start="119:16" pos:end="119:54">(<expr pos:start="119:17" pos:end="119:53"><name pos:start="119:17" pos:end="119:34"><name pos:start="119:17" pos:end="119:27">descriptors</name><index pos:start="119:28" pos:end="119:34">[<expr pos:start="119:29" pos:end="119:33"><name pos:start="119:29" pos:end="119:29">i</name> <operator pos:start="119:31" pos:end="119:31">+</operator> <literal type="number" pos:start="119:33" pos:end="119:33">1</literal></expr>]</index></name> <operator pos:start="119:36" pos:end="119:37">!=</operator> <name pos:start="119:39" pos:end="119:53">USB_DT_ENDPOINT</name></expr>)</condition> <block pos:start="119:56" pos:end="123:13">{<block_content pos:start="121:17" pos:end="121:22">

                <break pos:start="121:17" pos:end="121:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="127:13" pos:end="127:39"><expr pos:start="127:13" pos:end="127:38"><name pos:start="127:13" pos:end="127:17">devep</name> <operator pos:start="127:19" pos:end="127:19">=</operator> <name pos:start="127:21" pos:end="127:38"><name pos:start="127:21" pos:end="127:31">descriptors</name><index pos:start="127:32" pos:end="127:38">[<expr pos:start="127:33" pos:end="127:37"><name pos:start="127:33" pos:end="127:33">i</name> <operator pos:start="127:35" pos:end="127:35">+</operator> <literal type="number" pos:start="127:37" pos:end="127:37">2</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:70"><expr pos:start="129:13" pos:end="129:69"><name pos:start="129:13" pos:end="129:15">pid</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <ternary pos:start="129:19" pos:end="129:69"><condition pos:start="129:19" pos:end="129:40"><expr pos:start="129:19" pos:end="129:38"><operator pos:start="129:19" pos:end="129:19">(</operator><name pos:start="129:20" pos:end="129:24">devep</name> <operator pos:start="129:26" pos:end="129:26">&amp;</operator> <name pos:start="129:28" pos:end="129:37">USB_DIR_IN</name><operator pos:start="129:38" pos:end="129:38">)</operator></expr> ?</condition><then pos:start="129:42" pos:end="129:53"> <expr pos:start="129:42" pos:end="129:53"><name pos:start="129:42" pos:end="129:53">USB_TOKEN_IN</name></expr> </then><else pos:start="129:55" pos:end="129:69">: <expr pos:start="129:57" pos:end="129:69"><name pos:start="129:57" pos:end="129:69">USB_TOKEN_OUT</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:29"><expr pos:start="131:13" pos:end="131:28"><name pos:start="131:13" pos:end="131:14">ep</name> <operator pos:start="131:16" pos:end="131:16">=</operator> <name pos:start="131:18" pos:end="131:22">devep</name> <operator pos:start="131:24" pos:end="131:24">&amp;</operator> <literal type="number" pos:start="131:26" pos:end="131:28">0xf</literal></expr>;</expr_stmt>

            <if_stmt pos:start="133:13" pos:end="139:13"><if pos:start="133:13" pos:end="139:13">if <condition pos:start="133:16" pos:end="133:24">(<expr pos:start="133:17" pos:end="133:23"><name pos:start="133:17" pos:end="133:18">ep</name> <operator pos:start="133:20" pos:end="133:21">==</operator> <literal type="number" pos:start="133:23" pos:end="133:23">0</literal></expr>)</condition> <block pos:start="133:26" pos:end="139:13">{<block_content pos:start="135:17" pos:end="137:25">

                <expr_stmt pos:start="135:17" pos:end="135:79"><expr pos:start="135:17" pos:end="135:78"><call pos:start="135:17" pos:end="135:78"><name pos:start="135:17" pos:end="135:23">fprintf</name><argument_list pos:start="135:24" pos:end="135:78">(<argument pos:start="135:25" pos:end="135:30"><expr pos:start="135:25" pos:end="135:30"><name pos:start="135:25" pos:end="135:30">stderr</name></expr></argument>, <argument pos:start="135:33" pos:end="135:77"><expr pos:start="135:33" pos:end="135:77"><literal type="string" pos:start="135:33" pos:end="135:77">"usb-linux: invalid ep descriptor, ep == 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="137:17" pos:end="137:25">return <expr pos:start="137:24" pos:end="137:24"><literal type="number" pos:start="137:24" pos:end="137:24">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <switch pos:start="143:13" pos:end="177:13">switch <condition pos:start="143:20" pos:end="143:45">(<expr pos:start="143:21" pos:end="143:44"><name pos:start="143:21" pos:end="143:38"><name pos:start="143:21" pos:end="143:31">descriptors</name><index pos:start="143:32" pos:end="143:38">[<expr pos:start="143:33" pos:end="143:37"><name pos:start="143:33" pos:end="143:33">i</name> <operator pos:start="143:35" pos:end="143:35">+</operator> <literal type="number" pos:start="143:37" pos:end="143:37">3</literal></expr>]</index></name> <operator pos:start="143:40" pos:end="143:40">&amp;</operator> <literal type="number" pos:start="143:42" pos:end="143:44">0x3</literal></expr>)</condition> <block pos:start="143:47" pos:end="177:13">{<block_content pos:start="145:13" pos:end="175:46">

            <case pos:start="145:13" pos:end="145:22">case <expr pos:start="145:18" pos:end="145:21"><literal type="number" pos:start="145:18" pos:end="145:21">0x00</literal></expr>:</case>

                <expr_stmt pos:start="147:17" pos:end="147:49"><expr pos:start="147:17" pos:end="147:48"><name pos:start="147:17" pos:end="147:20">type</name> <operator pos:start="147:22" pos:end="147:22">=</operator> <name pos:start="147:24" pos:end="147:48">USBDEVFS_URB_TYPE_CONTROL</name></expr>;</expr_stmt>

                <break pos:start="149:17" pos:end="149:22">break;</break>

            <case pos:start="151:13" pos:end="151:22">case <expr pos:start="151:18" pos:end="151:21"><literal type="number" pos:start="151:18" pos:end="151:21">0x01</literal></expr>:</case>

                <expr_stmt pos:start="153:17" pos:end="153:45"><expr pos:start="153:17" pos:end="153:44"><name pos:start="153:17" pos:end="153:20">type</name> <operator pos:start="153:22" pos:end="153:22">=</operator> <name pos:start="153:24" pos:end="153:44">USBDEVFS_URB_TYPE_ISO</name></expr>;</expr_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:65"><expr pos:start="155:17" pos:end="155:64"><call pos:start="155:17" pos:end="155:64"><name pos:start="155:17" pos:end="155:35">set_max_packet_size</name><argument_list pos:start="155:36" pos:end="155:64">(<argument pos:start="155:37" pos:end="155:37"><expr pos:start="155:37" pos:end="155:37"><name pos:start="155:37" pos:end="155:37">s</name></expr></argument>, <argument pos:start="155:40" pos:end="155:42"><expr pos:start="155:40" pos:end="155:42"><name pos:start="155:40" pos:end="155:42">pid</name></expr></argument>, <argument pos:start="155:45" pos:end="155:46"><expr pos:start="155:45" pos:end="155:46"><name pos:start="155:45" pos:end="155:46">ep</name></expr></argument>, <argument pos:start="155:49" pos:end="155:63"><expr pos:start="155:49" pos:end="155:63"><name pos:start="155:49" pos:end="155:59">descriptors</name> <operator pos:start="155:61" pos:end="155:61">+</operator> <name pos:start="155:63" pos:end="155:63">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="157:17" pos:end="157:22">break;</break>

            <case pos:start="159:13" pos:end="159:22">case <expr pos:start="159:18" pos:end="159:21"><literal type="number" pos:start="159:18" pos:end="159:21">0x02</literal></expr>:</case>

                <expr_stmt pos:start="161:17" pos:end="161:46"><expr pos:start="161:17" pos:end="161:45"><name pos:start="161:17" pos:end="161:20">type</name> <operator pos:start="161:22" pos:end="161:22">=</operator> <name pos:start="161:24" pos:end="161:45">USBDEVFS_URB_TYPE_BULK</name></expr>;</expr_stmt>

                <break pos:start="163:17" pos:end="163:22">break;</break>

            <case pos:start="165:13" pos:end="165:22">case <expr pos:start="165:18" pos:end="165:21"><literal type="number" pos:start="165:18" pos:end="165:21">0x03</literal></expr>:</case>

                <expr_stmt pos:start="167:17" pos:end="167:51"><expr pos:start="167:17" pos:end="167:50"><name pos:start="167:17" pos:end="167:20">type</name> <operator pos:start="167:22" pos:end="167:22">=</operator> <name pos:start="167:24" pos:end="167:50">USBDEVFS_URB_TYPE_INTERRUPT</name></expr>;</expr_stmt>

                <break pos:start="169:17" pos:end="169:22">break;</break>

            <default pos:start="171:13" pos:end="171:20">default:</default>

                <expr_stmt pos:start="173:17" pos:end="173:63"><expr pos:start="173:17" pos:end="173:62"><call pos:start="173:17" pos:end="173:62"><name pos:start="173:17" pos:end="173:23">DPRINTF</name><argument_list pos:start="173:24" pos:end="173:62">(<argument pos:start="173:25" pos:end="173:61"><expr pos:start="173:25" pos:end="173:61"><literal type="string" pos:start="173:25" pos:end="173:61">"usb_host: malformed endpoint type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="175:17" pos:end="175:46"><expr pos:start="175:17" pos:end="175:45"><name pos:start="175:17" pos:end="175:20">type</name> <operator pos:start="175:22" pos:end="175:22">=</operator> <name pos:start="175:24" pos:end="175:45">USBDEVFS_URB_TYPE_BULK</name></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <expr_stmt pos:start="179:13" pos:end="179:39"><expr pos:start="179:13" pos:end="179:38"><name pos:start="179:13" pos:end="179:15">epd</name> <operator pos:start="179:17" pos:end="179:17">=</operator> <call pos:start="179:19" pos:end="179:38"><name pos:start="179:19" pos:end="179:26">get_endp</name><argument_list pos:start="179:27" pos:end="179:38">(<argument pos:start="179:28" pos:end="179:28"><expr pos:start="179:28" pos:end="179:28"><name pos:start="179:28" pos:end="179:28">s</name></expr></argument>, <argument pos:start="179:31" pos:end="179:33"><expr pos:start="179:31" pos:end="179:33"><name pos:start="179:31" pos:end="179:33">pid</name></expr></argument>, <argument pos:start="179:36" pos:end="179:37"><expr pos:start="179:36" pos:end="179:37"><name pos:start="179:36" pos:end="179:37">ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:49"><expr pos:start="181:13" pos:end="181:48"><call pos:start="181:13" pos:end="181:48"><name pos:start="181:13" pos:end="181:18">assert</name><argument_list pos:start="181:19" pos:end="181:48">(<argument pos:start="181:20" pos:end="181:47"><expr pos:start="181:20" pos:end="181:47"><name pos:start="181:20" pos:end="181:28"><name pos:start="181:20" pos:end="181:22">epd</name><operator pos:start="181:23" pos:end="181:24">-&gt;</operator><name pos:start="181:25" pos:end="181:28">type</name></name> <operator pos:start="181:30" pos:end="181:31">==</operator> <name pos:start="181:33" pos:end="181:47">INVALID_EP_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:29"><expr pos:start="183:13" pos:end="183:28"><name pos:start="183:13" pos:end="183:21"><name pos:start="183:13" pos:end="183:15">epd</name><operator pos:start="183:16" pos:end="183:17">-&gt;</operator><name pos:start="183:18" pos:end="183:21">type</name></name> <operator pos:start="183:23" pos:end="183:23">=</operator> <name pos:start="183:25" pos:end="183:28">type</name></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:28"><expr pos:start="185:13" pos:end="185:27"><name pos:start="185:13" pos:end="185:23"><name pos:start="185:13" pos:end="185:15">epd</name><operator pos:start="185:16" pos:end="185:17">-&gt;</operator><name pos:start="185:18" pos:end="185:23">halted</name></name> <operator pos:start="185:25" pos:end="185:25">=</operator> <literal type="number" pos:start="185:27" pos:end="185:27">0</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="189:13" pos:end="189:32"><expr pos:start="189:13" pos:end="189:31"><name pos:start="189:13" pos:end="189:13">i</name> <operator pos:start="189:15" pos:end="189:16">+=</operator> <name pos:start="189:18" pos:end="189:31"><name pos:start="189:18" pos:end="189:28">descriptors</name><index pos:start="189:29" pos:end="189:31">[<expr pos:start="189:30" pos:end="189:30"><name pos:start="189:30" pos:end="189:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></while>

    <return pos:start="195:5" pos:end="195:13">return <expr pos:start="195:12" pos:end="195:12"><literal type="number" pos:start="195:12" pos:end="195:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
