<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17626.c" pos:tabs="8"><function pos:start="1:1" pos:end="567:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">ppc_core99_init</name><parameter_list pos:start="1:28" pos:end="1:54">(<parameter pos:start="1:29" pos:end="1:53"><decl pos:start="1:29" pos:end="1:53"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:47">QEMUMachineInitArgs</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:53">args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="567:1">{<block_content pos:start="5:5" pos:end="565:52">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:40">= <expr pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:30">args</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:40">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:32">args</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:55">= <expr pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:38">args</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:53">= <expr pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:53"><name pos:start="11:34" pos:end="11:37">args</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:53">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:56"><decl pos:start="13:5" pos:end="13:55"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:55">= <expr pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:55"><name pos:start="13:35" pos:end="13:38">args</name><operator pos:start="13:39" pos:end="13:40">-&gt;</operator><name pos:start="13:41" pos:end="13:55">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:48"><decl pos:start="15:5" pos:end="15:47"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">boot_device</name> <init pos:start="15:29" pos:end="15:47">= <expr pos:start="15:31" pos:end="15:47"><name pos:start="15:31" pos:end="15:47"><name pos:start="15:31" pos:end="15:34">args</name><operator pos:start="15:35" pos:end="15:36">-&gt;</operator><name pos:start="15:37" pos:end="15:47">boot_device</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:14">PowerPCCPU</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:19">cpu</name> <init pos:start="17:21" pos:end="17:26">= <expr pos:start="17:23" pos:end="17:26"><name pos:start="17:23" pos:end="17:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">CPUPPCState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:20">env</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:19"><decl pos:start="21:5" pos:end="21:18"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:34"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:12">qemu_irq</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:17">pic</name></decl>, <decl pos:start="23:20" pos:end="23:33"><type ref="prev" pos:start="23:5" pos:end="23:14"><modifier pos:start="23:20" pos:end="23:20">*</modifier><modifier pos:start="23:21" pos:end="23:21">*</modifier></type><name pos:start="23:22" pos:end="23:33">openpic_irqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:55"><decl pos:start="25:5" pos:end="25:54"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">MemoryRegion</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:29">unin_memory</name> <init pos:start="25:31" pos:end="25:54">= <expr pos:start="25:33" pos:end="25:54"><call pos:start="25:33" pos:end="25:54"><name pos:start="25:33" pos:end="25:37">g_new</name><argument_list pos:start="25:38" pos:end="25:54">(<argument pos:start="25:39" pos:end="25:50"><expr pos:start="25:39" pos:end="25:50"><name pos:start="25:39" pos:end="25:50">MemoryRegion</name></expr></argument>, <argument pos:start="25:53" pos:end="25:53"><expr pos:start="25:53" pos:end="25:53"><literal type="number" pos:start="25:53" pos:end="25:53">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">linux_boot</name></decl>, <decl pos:start="27:21" pos:end="27:21"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:21" pos:end="27:21">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:79"><decl pos:start="29:5" pos:end="29:46"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:21">ram</name> <init pos:start="29:23" pos:end="29:46">= <expr pos:start="29:25" pos:end="29:46"><call pos:start="29:25" pos:end="29:46"><name pos:start="29:25" pos:end="29:29">g_new</name><argument_list pos:start="29:30" pos:end="29:46">(<argument pos:start="29:31" pos:end="29:42"><expr pos:start="29:31" pos:end="29:42"><name pos:start="29:31" pos:end="29:42">MemoryRegion</name></expr></argument>, <argument pos:start="29:45" pos:end="29:45"><expr pos:start="29:45" pos:end="29:45"><literal type="number" pos:start="29:45" pos:end="29:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl pos:start="29:49" pos:end="29:78"><type ref="prev" pos:start="29:5" pos:end="29:18"><modifier pos:start="29:49" pos:end="29:49">*</modifier></type><name pos:start="29:50" pos:end="29:53">bios</name> <init pos:start="29:55" pos:end="29:78">= <expr pos:start="29:57" pos:end="29:78"><call pos:start="29:57" pos:end="29:78"><name pos:start="29:57" pos:end="29:61">g_new</name><argument_list pos:start="29:62" pos:end="29:78">(<argument pos:start="29:63" pos:end="29:74"><expr pos:start="29:63" pos:end="29:74"><name pos:start="29:63" pos:end="29:74">MemoryRegion</name></expr></argument>, <argument pos:start="29:77" pos:end="29:77"><expr pos:start="29:77" pos:end="29:77"><literal type="number" pos:start="29:77" pos:end="29:77">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:54"><decl pos:start="31:5" pos:end="31:22"><type pos:start="31:5" pos:end="31:10"><name pos:start="31:5" pos:end="31:10">hwaddr</name></type> <name pos:start="31:12" pos:end="31:22">kernel_base</name></decl>, <decl pos:start="31:25" pos:end="31:35"><type ref="prev" pos:start="31:5" pos:end="31:10"/><name pos:start="31:25" pos:end="31:35">initrd_base</name></decl>, <decl pos:start="31:38" pos:end="31:53"><type ref="prev" pos:start="31:5" pos:end="31:10"/><name pos:start="31:38" pos:end="31:49">cmdline_base</name> <init pos:start="31:51" pos:end="31:53">= <expr pos:start="31:53" pos:end="31:53"><literal type="number" pos:start="31:53" pos:end="31:53">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:34"><decl pos:start="33:5" pos:end="33:20"><type pos:start="33:5" pos:end="33:8"><name pos:start="33:5" pos:end="33:8">long</name></type> <name pos:start="33:10" pos:end="33:20">kernel_size</name></decl>, <decl pos:start="33:23" pos:end="33:33"><type ref="prev" pos:start="33:5" pos:end="33:8"/><name pos:start="33:23" pos:end="33:33">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:20"><decl pos:start="35:5" pos:end="35:19"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:10">PCIBus</name> <modifier pos:start="35:12" pos:end="35:12">*</modifier></type><name pos:start="35:13" pos:end="35:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:25"><decl pos:start="37:5" pos:end="37:24"><type pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:19">MacIONVRAMState</name> <modifier pos:start="37:21" pos:end="37:21">*</modifier></type><name pos:start="37:22" pos:end="37:24">nvr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:18"><decl pos:start="39:5" pos:end="39:17"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:17">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:60"><decl pos:start="41:5" pos:end="41:25"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:16">MemoryRegion</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:25">pic_mem</name></decl>, <decl pos:start="41:28" pos:end="41:37"><type ref="prev" pos:start="41:5" pos:end="41:18"><modifier pos:start="41:28" pos:end="41:28">*</modifier></type><name pos:start="41:29" pos:end="41:37">dbdma_mem</name></decl>, <decl pos:start="41:40" pos:end="41:48"><type ref="prev" pos:start="41:5" pos:end="41:18"><modifier pos:start="41:40" pos:end="41:40">*</modifier></type><name pos:start="41:41" pos:end="41:48">cuda_mem</name></decl>, <decl pos:start="41:51" pos:end="41:59"><type ref="prev" pos:start="41:5" pos:end="41:18"><modifier pos:start="41:51" pos:end="41:51">*</modifier></type><name pos:start="41:52" pos:end="41:59">escc_mem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:52"><decl pos:start="43:5" pos:end="43:51"><type pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:16">MemoryRegion</name> <modifier pos:start="43:18" pos:end="43:18">*</modifier></type><name pos:start="43:19" pos:end="43:26">escc_bar</name> <init pos:start="43:28" pos:end="43:51">= <expr pos:start="43:30" pos:end="43:51"><call pos:start="43:30" pos:end="43:51"><name pos:start="43:30" pos:end="43:34">g_new</name><argument_list pos:start="43:35" pos:end="43:51">(<argument pos:start="43:36" pos:end="43:47"><expr pos:start="43:36" pos:end="43:47"><name pos:start="43:36" pos:end="43:47">MemoryRegion</name></expr></argument>, <argument pos:start="43:50" pos:end="43:50"><expr pos:start="43:50" pos:end="43:50"><literal type="number" pos:start="43:50" pos:end="43:50">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:29"><decl pos:start="45:5" pos:end="45:28"><type pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:16">MemoryRegion</name> <modifier pos:start="45:18" pos:end="45:18">*</modifier></type><name pos:start="45:19" pos:end="45:28"><name pos:start="45:19" pos:end="45:25">ide_mem</name><index pos:start="45:26" pos:end="45:28">[<expr pos:start="45:27" pos:end="45:27"><literal type="number" pos:start="45:27" pos:end="45:27">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:24"><decl pos:start="47:5" pos:end="47:23"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:23">ppc_boot_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:46"><decl pos:start="49:5" pos:end="49:45"><type pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:13">DriveInfo</name> <modifier pos:start="49:15" pos:end="49:15">*</modifier></type><name pos:start="49:16" pos:end="49:45"><name pos:start="49:16" pos:end="49:17">hd</name><index pos:start="49:18" pos:end="49:45">[<expr pos:start="49:19" pos:end="49:44"><name pos:start="49:19" pos:end="49:29">MAX_IDE_BUS</name> <operator pos:start="49:31" pos:end="49:31">*</operator> <name pos:start="49:33" pos:end="49:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:17"><decl pos:start="51:5" pos:end="51:16"><type pos:start="51:5" pos:end="51:10"><name pos:start="51:5" pos:end="51:8">void</name> <modifier pos:start="51:10" pos:end="51:10">*</modifier></type><name pos:start="51:11" pos:end="51:16">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:16"><decl pos:start="53:5" pos:end="53:15"><type pos:start="53:5" pos:end="53:10"><name pos:start="53:5" pos:end="53:8">void</name> <modifier pos:start="53:10" pos:end="53:10">*</modifier></type><name pos:start="53:11" pos:end="53:15">dbdma</name></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:21"><decl pos:start="55:5" pos:end="55:20"><type pos:start="55:5" pos:end="55:7"><name pos:start="55:5" pos:end="55:7">int</name></type> <name pos:start="55:9" pos:end="55:20">machine_arch</name></decl>;</decl_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:14">linux_boot</name> <operator pos:start="59:16" pos:end="59:16">=</operator> <operator pos:start="59:18" pos:end="59:18">(</operator><name pos:start="59:19" pos:end="59:33">kernel_filename</name> <operator pos:start="59:35" pos:end="59:36">!=</operator> <name pos:start="59:38" pos:end="59:41">NULL</name><operator pos:start="59:42" pos:end="59:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:19">/* init CPUs */</comment>

    <if_stmt pos:start="65:5" pos:end="72:0"><if pos:start="65:5" pos:end="72:0">if <condition pos:start="65:8" pos:end="68:0">(<expr pos:start="65:9" pos:end="65:25"><name pos:start="65:9" pos:end="65:17">cpu_model</name> <operator pos:start="65:19" pos:end="65:20">==</operator> <name pos:start="65:22" pos:end="65:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="72:0"><block_content pos:start="69:9" pos:end="72:0">

<cpp:ifdef pos:start="67:1" pos:end="67:19">#<cpp:directive pos:start="67:2" pos:end="67:6">ifdef</cpp:directive> <name pos:start="67:8" pos:end="67:19">TARGET_PPC64</name></cpp:ifdef>

        <expr_stmt pos:start="69:9" pos:end="72:0"><expr pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:17">cpu_model</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <literal type="string" pos:start="69:21" pos:end="69:27">"970fx"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else pos:start="71:1" pos:end="71:5">#<cpp:directive pos:start="71:2" pos:end="71:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="73:9" pos:end="76:0"><expr pos:start="73:9" pos:end="73:24"><name pos:start="73:9" pos:end="73:17">cpu_model</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <literal type="string" pos:start="73:21" pos:end="73:24">"G4"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

    <for pos:start="77:5" pos:end="99:5">for <control pos:start="77:9" pos:end="77:34">(<init pos:start="77:10" pos:end="77:15"><expr pos:start="77:10" pos:end="77:14"><name pos:start="77:10" pos:end="77:10">i</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>;</init> <condition pos:start="77:17" pos:end="77:29"><expr pos:start="77:17" pos:end="77:28"><name pos:start="77:17" pos:end="77:17">i</name> <operator pos:start="77:19" pos:end="77:19">&lt;</operator> <name pos:start="77:21" pos:end="77:28">smp_cpus</name></expr>;</condition> <incr pos:start="77:31" pos:end="77:33"><expr pos:start="77:31" pos:end="77:33"><name pos:start="77:31" pos:end="77:31">i</name><operator pos:start="77:32" pos:end="77:33">++</operator></expr></incr>)</control> <block pos:start="77:36" pos:end="99:5">{<block_content pos:start="79:9" pos:end="97:51">

        <expr_stmt pos:start="79:9" pos:end="79:38"><expr pos:start="79:9" pos:end="79:37"><name pos:start="79:9" pos:end="79:11">cpu</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:37"><name pos:start="79:15" pos:end="79:26">cpu_ppc_init</name><argument_list pos:start="79:27" pos:end="79:37">(<argument pos:start="79:28" pos:end="79:36"><expr pos:start="79:28" pos:end="79:36"><name pos:start="79:28" pos:end="79:36">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="87:9"><if pos:start="81:9" pos:end="87:9">if <condition pos:start="81:12" pos:end="81:24">(<expr pos:start="81:13" pos:end="81:23"><name pos:start="81:13" pos:end="81:15">cpu</name> <operator pos:start="81:17" pos:end="81:18">==</operator> <name pos:start="81:20" pos:end="81:23">NULL</name></expr>)</condition> <block pos:start="81:26" pos:end="87:9">{<block_content pos:start="83:13" pos:end="85:20">

            <expr_stmt pos:start="83:13" pos:end="83:71"><expr pos:start="83:13" pos:end="83:70"><call pos:start="83:13" pos:end="83:70"><name pos:start="83:13" pos:end="83:19">fprintf</name><argument_list pos:start="83:20" pos:end="83:70">(<argument pos:start="83:21" pos:end="83:26"><expr pos:start="83:21" pos:end="83:26"><name pos:start="83:21" pos:end="83:26">stderr</name></expr></argument>, <argument pos:start="83:29" pos:end="83:69"><expr pos:start="83:29" pos:end="83:69"><literal type="string" pos:start="83:29" pos:end="83:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:20"><expr pos:start="85:13" pos:end="85:19"><call pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:16">exit</name><argument_list pos:start="85:17" pos:end="85:19">(<argument pos:start="85:18" pos:end="85:18"><expr pos:start="85:18" pos:end="85:18"><literal type="number" pos:start="85:18" pos:end="85:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:24"><expr pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:11">env</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <operator pos:start="89:15" pos:end="89:15">&amp;</operator><name pos:start="89:16" pos:end="89:23"><name pos:start="89:16" pos:end="89:18">cpu</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:23">env</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="93:9" pos:end="93:48">/* Set time-base frequency to 100 Mhz */</comment>

        <expr_stmt pos:start="95:9" pos:end="95:54"><expr pos:start="95:9" pos:end="95:53"><call pos:start="95:9" pos:end="95:53"><name pos:start="95:9" pos:end="95:23">cpu_ppc_tb_init</name><argument_list pos:start="95:24" pos:end="95:53">(<argument pos:start="95:25" pos:end="95:27"><expr pos:start="95:25" pos:end="95:27"><name pos:start="95:25" pos:end="95:27">env</name></expr></argument>, <argument pos:start="95:30" pos:end="95:52"><expr pos:start="95:30" pos:end="95:52"><literal type="number" pos:start="95:30" pos:end="95:34">100UL</literal> <operator pos:start="95:36" pos:end="95:36">*</operator> <literal type="number" pos:start="95:38" pos:end="95:43">1000UL</literal> <operator pos:start="95:45" pos:end="95:45">*</operator> <literal type="number" pos:start="95:47" pos:end="95:52">1000UL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:51"><expr pos:start="97:9" pos:end="97:50"><call pos:start="97:9" pos:end="97:50"><name pos:start="97:9" pos:end="97:27">qemu_register_reset</name><argument_list pos:start="97:28" pos:end="97:50">(<argument pos:start="97:29" pos:end="97:44"><expr pos:start="97:29" pos:end="97:44"><name pos:start="97:29" pos:end="97:44">ppc_core99_reset</name></expr></argument>, <argument pos:start="97:47" pos:end="97:49"><expr pos:start="97:47" pos:end="97:49"><name pos:start="97:47" pos:end="97:49">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="103:5" pos:end="103:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="105:5" pos:end="105:60"><expr pos:start="105:5" pos:end="105:59"><call pos:start="105:5" pos:end="105:59"><name pos:start="105:5" pos:end="105:26">memory_region_init_ram</name><argument_list pos:start="105:27" pos:end="105:59">(<argument pos:start="105:28" pos:end="105:30"><expr pos:start="105:28" pos:end="105:30"><name pos:start="105:28" pos:end="105:30">ram</name></expr></argument>, <argument pos:start="105:33" pos:end="105:48"><expr pos:start="105:33" pos:end="105:48"><literal type="string" pos:start="105:33" pos:end="105:48">"ppc_core99.ram"</literal></expr></argument>, <argument pos:start="105:51" pos:end="105:58"><expr pos:start="105:51" pos:end="105:58"><name pos:start="105:51" pos:end="105:58">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:37"><expr pos:start="107:5" pos:end="107:36"><call pos:start="107:5" pos:end="107:36"><name pos:start="107:5" pos:end="107:31">vmstate_register_ram_global</name><argument_list pos:start="107:32" pos:end="107:36">(<argument pos:start="107:33" pos:end="107:35"><expr pos:start="107:33" pos:end="107:35"><name pos:start="107:33" pos:end="107:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:61"><expr pos:start="109:5" pos:end="109:60"><call pos:start="109:5" pos:end="109:60"><name pos:start="109:5" pos:end="109:31">memory_region_add_subregion</name><argument_list pos:start="109:32" pos:end="109:60">(<argument pos:start="109:33" pos:end="109:51"><expr pos:start="109:33" pos:end="109:51"><call pos:start="109:33" pos:end="109:51"><name pos:start="109:33" pos:end="109:49">get_system_memory</name><argument_list pos:start="109:50" pos:end="109:51">()</argument_list></call></expr></argument>, <argument pos:start="109:54" pos:end="109:54"><expr pos:start="109:54" pos:end="109:54"><literal type="number" pos:start="109:54" pos:end="109:54">0</literal></expr></argument>, <argument pos:start="109:57" pos:end="109:59"><expr pos:start="109:57" pos:end="109:59"><name pos:start="109:57" pos:end="109:59">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:63"><expr pos:start="115:5" pos:end="115:62"><call pos:start="115:5" pos:end="115:62"><name pos:start="115:5" pos:end="115:26">memory_region_init_ram</name><argument_list pos:start="115:27" pos:end="115:62">(<argument pos:start="115:28" pos:end="115:31"><expr pos:start="115:28" pos:end="115:31"><name pos:start="115:28" pos:end="115:31">bios</name></expr></argument>, <argument pos:start="115:34" pos:end="115:50"><expr pos:start="115:34" pos:end="115:50"><literal type="string" pos:start="115:34" pos:end="115:50">"ppc_core99.bios"</literal></expr></argument>, <argument pos:start="115:53" pos:end="115:61"><expr pos:start="115:53" pos:end="115:61"><name pos:start="115:53" pos:end="115:61">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:38"><expr pos:start="117:5" pos:end="117:37"><call pos:start="117:5" pos:end="117:37"><name pos:start="117:5" pos:end="117:31">vmstate_register_ram_global</name><argument_list pos:start="117:32" pos:end="117:37">(<argument pos:start="117:33" pos:end="117:36"><expr pos:start="117:33" pos:end="117:36"><name pos:start="117:33" pos:end="117:36">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="121:34"><if pos:start="119:5" pos:end="121:34">if <condition pos:start="119:8" pos:end="119:26">(<expr pos:start="119:9" pos:end="119:25"><name pos:start="119:9" pos:end="119:17">bios_name</name> <operator pos:start="119:19" pos:end="119:20">==</operator> <name pos:start="119:22" pos:end="119:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="121:9" pos:end="121:34"><block_content pos:start="121:9" pos:end="121:34">

        <expr_stmt pos:start="121:9" pos:end="121:34"><expr pos:start="121:9" pos:end="121:33"><name pos:start="121:9" pos:end="121:17">bios_name</name> <operator pos:start="121:19" pos:end="121:19">=</operator> <name pos:start="121:21" pos:end="121:33">PROM_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:62"><expr pos:start="123:5" pos:end="123:61"><name pos:start="123:5" pos:end="123:12">filename</name> <operator pos:start="123:14" pos:end="123:14">=</operator> <call pos:start="123:16" pos:end="123:61"><name pos:start="123:16" pos:end="123:29">qemu_find_file</name><argument_list pos:start="123:30" pos:end="123:61">(<argument pos:start="123:31" pos:end="123:49"><expr pos:start="123:31" pos:end="123:49"><name pos:start="123:31" pos:end="123:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="123:52" pos:end="123:60"><expr pos:start="123:52" pos:end="123:60"><name pos:start="123:52" pos:end="123:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:43"><expr pos:start="125:5" pos:end="125:42"><call pos:start="125:5" pos:end="125:42"><name pos:start="125:5" pos:end="125:30">memory_region_set_readonly</name><argument_list pos:start="125:31" pos:end="125:42">(<argument pos:start="125:32" pos:end="125:35"><expr pos:start="125:32" pos:end="125:35"><name pos:start="125:32" pos:end="125:35">bios</name></expr></argument>, <argument pos:start="125:38" pos:end="125:41"><expr pos:start="125:38" pos:end="125:41"><name pos:start="125:38" pos:end="125:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:70"><expr pos:start="127:5" pos:end="127:69"><call pos:start="127:5" pos:end="127:69"><name pos:start="127:5" pos:end="127:31">memory_region_add_subregion</name><argument_list pos:start="127:32" pos:end="127:69">(<argument pos:start="127:33" pos:end="127:51"><expr pos:start="127:33" pos:end="127:51"><call pos:start="127:33" pos:end="127:51"><name pos:start="127:33" pos:end="127:49">get_system_memory</name><argument_list pos:start="127:50" pos:end="127:51">()</argument_list></call></expr></argument>, <argument pos:start="127:54" pos:end="127:62"><expr pos:start="127:54" pos:end="127:62"><name pos:start="127:54" pos:end="127:62">PROM_ADDR</name></expr></argument>, <argument pos:start="127:65" pos:end="127:68"><expr pos:start="127:65" pos:end="127:68"><name pos:start="127:65" pos:end="127:68">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:29">/* Load OpenBIOS (ELF) */</comment>

    <if_stmt pos:start="133:5" pos:end="147:5"><if pos:start="133:5" pos:end="143:5">if <condition pos:start="133:8" pos:end="133:17">(<expr pos:start="133:9" pos:end="133:16"><name pos:start="133:9" pos:end="133:16">filename</name></expr>)</condition> <block pos:start="133:19" pos:end="143:5">{<block_content pos:start="135:9" pos:end="141:25">

        <expr_stmt pos:start="135:9" pos:end="137:60"><expr pos:start="135:9" pos:end="137:59"><name pos:start="135:9" pos:end="135:17">bios_size</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <call pos:start="135:21" pos:end="137:59"><name pos:start="135:21" pos:end="135:28">load_elf</name><argument_list pos:start="135:29" pos:end="137:59">(<argument pos:start="135:30" pos:end="135:37"><expr pos:start="135:30" pos:end="135:37"><name pos:start="135:30" pos:end="135:37">filename</name></expr></argument>, <argument pos:start="135:40" pos:end="135:43"><expr pos:start="135:40" pos:end="135:43"><name pos:start="135:40" pos:end="135:43">NULL</name></expr></argument>, <argument pos:start="135:46" pos:end="135:49"><expr pos:start="135:46" pos:end="135:49"><name pos:start="135:46" pos:end="135:49">NULL</name></expr></argument>, <argument pos:start="135:52" pos:end="135:55"><expr pos:start="135:52" pos:end="135:55"><name pos:start="135:52" pos:end="135:55">NULL</name></expr></argument>,

                             <argument pos:start="137:30" pos:end="137:33"><expr pos:start="137:30" pos:end="137:33"><name pos:start="137:30" pos:end="137:33">NULL</name></expr></argument>, <argument pos:start="137:36" pos:end="137:39"><expr pos:start="137:36" pos:end="137:39"><name pos:start="137:36" pos:end="137:39">NULL</name></expr></argument>, <argument pos:start="137:42" pos:end="137:42"><expr pos:start="137:42" pos:end="137:42"><literal type="number" pos:start="137:42" pos:end="137:42">1</literal></expr></argument>, <argument pos:start="137:45" pos:end="137:55"><expr pos:start="137:45" pos:end="137:55"><name pos:start="137:45" pos:end="137:55">ELF_MACHINE</name></expr></argument>, <argument pos:start="137:58" pos:end="137:58"><expr pos:start="137:58" pos:end="137:58"><literal type="number" pos:start="137:58" pos:end="137:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="141:9" pos:end="141:25"><expr pos:start="141:9" pos:end="141:24"><call pos:start="141:9" pos:end="141:24"><name pos:start="141:9" pos:end="141:14">g_free</name><argument_list pos:start="141:15" pos:end="141:24">(<argument pos:start="141:16" pos:end="141:23"><expr pos:start="141:16" pos:end="141:23"><name pos:start="141:16" pos:end="141:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="143:7" pos:end="147:5">else <block pos:start="143:12" pos:end="147:5">{<block_content pos:start="145:9" pos:end="145:23">

        <expr_stmt pos:start="145:9" pos:end="145:23"><expr pos:start="145:9" pos:end="145:22"><name pos:start="145:9" pos:end="145:17">bios_size</name> <operator pos:start="145:19" pos:end="145:19">=</operator> <operator pos:start="145:21" pos:end="145:21">-</operator><literal type="number" pos:start="145:22" pos:end="145:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="149:5" pos:end="155:5"><if pos:start="149:5" pos:end="155:5">if <condition pos:start="149:8" pos:end="149:47">(<expr pos:start="149:9" pos:end="149:46"><name pos:start="149:9" pos:end="149:36"><name pos:start="149:9" pos:end="149:17">bios_size</name> <argument_list type="generic" pos:start="149:19" pos:end="149:36">&lt; <argument pos:start="149:21" pos:end="149:34"><expr pos:start="149:21" pos:end="149:34"><literal type="number" pos:start="149:21" pos:end="149:21">0</literal> <operator pos:start="149:23" pos:end="149:24">||</operator> <name pos:start="149:26" pos:end="149:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="149:38" pos:end="149:46">BIOS_SIZE</name></expr>)</condition> <block pos:start="149:49" pos:end="155:5">{<block_content pos:start="151:9" pos:end="153:16">

        <expr_stmt pos:start="151:9" pos:end="151:72"><expr pos:start="151:9" pos:end="151:71"><call pos:start="151:9" pos:end="151:71"><name pos:start="151:9" pos:end="151:16">hw_error</name><argument_list pos:start="151:17" pos:end="151:71">(<argument pos:start="151:18" pos:end="151:59"><expr pos:start="151:18" pos:end="151:59"><literal type="string" pos:start="151:18" pos:end="151:59">"qemu: could not load PowerPC bios '%s'\n"</literal></expr></argument>, <argument pos:start="151:62" pos:end="151:70"><expr pos:start="151:62" pos:end="151:70"><name pos:start="151:62" pos:end="151:70">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:16"><expr pos:start="153:9" pos:end="153:15"><call pos:start="153:9" pos:end="153:15"><name pos:start="153:9" pos:end="153:12">exit</name><argument_list pos:start="153:13" pos:end="153:15">(<argument pos:start="153:14" pos:end="153:14"><expr pos:start="153:14" pos:end="153:14"><literal type="number" pos:start="153:14" pos:end="153:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="159:5" pos:end="281:5"><if pos:start="159:5" pos:end="243:5">if <condition pos:start="159:8" pos:end="159:19">(<expr pos:start="159:9" pos:end="159:18"><name pos:start="159:9" pos:end="159:18">linux_boot</name></expr>)</condition> <block pos:start="159:21" pos:end="243:5">{<block_content pos:start="161:9" pos:end="241:30">

        <decl_stmt pos:start="161:9" pos:end="161:29"><decl pos:start="161:9" pos:end="161:28"><type pos:start="161:9" pos:end="161:16"><name pos:start="161:9" pos:end="161:16">uint64_t</name></type> <name pos:start="161:18" pos:end="161:24">lowaddr</name> <init pos:start="161:26" pos:end="161:28">= <expr pos:start="161:28" pos:end="161:28"><literal type="number" pos:start="161:28" pos:end="161:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="163:9" pos:end="168:0"><decl pos:start="163:9" pos:end="163:24"><type pos:start="163:9" pos:end="163:11"><name pos:start="163:9" pos:end="163:11">int</name></type> <name pos:start="163:13" pos:end="163:24">bswap_needed</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="167:1" pos:end="167:19">#<cpp:directive pos:start="167:2" pos:end="167:6">ifdef</cpp:directive> <name pos:start="167:8" pos:end="167:19">BSWAP_NEEDED</name></cpp:ifdef>

        <expr_stmt pos:start="169:9" pos:end="172:0"><expr pos:start="169:9" pos:end="169:24"><name pos:start="169:9" pos:end="169:20">bswap_needed</name> <operator pos:start="169:22" pos:end="169:22">=</operator> <literal type="number" pos:start="169:24" pos:end="169:24">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="171:1" pos:end="171:5">#<cpp:directive pos:start="171:2" pos:end="171:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="173:9" pos:end="176:0"><expr pos:start="173:9" pos:end="173:24"><name pos:start="173:9" pos:end="173:20">bswap_needed</name> <operator pos:start="173:22" pos:end="173:22">=</operator> <literal type="number" pos:start="173:24" pos:end="173:24">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="175:1" pos:end="175:6">#<cpp:directive pos:start="175:2" pos:end="175:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="177:9" pos:end="177:39"><expr pos:start="177:9" pos:end="177:38"><name pos:start="177:9" pos:end="177:19">kernel_base</name> <operator pos:start="177:21" pos:end="177:21">=</operator> <name pos:start="177:23" pos:end="177:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>



        <expr_stmt pos:start="181:9" pos:end="183:72"><expr pos:start="181:9" pos:end="183:71"><name pos:start="181:9" pos:end="181:19">kernel_size</name> <operator pos:start="181:21" pos:end="181:21">=</operator> <call pos:start="181:23" pos:end="183:71"><name pos:start="181:23" pos:end="181:30">load_elf</name><argument_list pos:start="181:31" pos:end="183:71">(<argument pos:start="181:32" pos:end="181:46"><expr pos:start="181:32" pos:end="181:46"><name pos:start="181:32" pos:end="181:46">kernel_filename</name></expr></argument>, <argument pos:start="181:49" pos:end="181:72"><expr pos:start="181:49" pos:end="181:72"><name pos:start="181:49" pos:end="181:72">translate_kernel_address</name></expr></argument>, <argument pos:start="181:75" pos:end="181:78"><expr pos:start="181:75" pos:end="181:78"><name pos:start="181:75" pos:end="181:78">NULL</name></expr></argument>,

                               <argument pos:start="183:32" pos:end="183:35"><expr pos:start="183:32" pos:end="183:35"><name pos:start="183:32" pos:end="183:35">NULL</name></expr></argument>, <argument pos:start="183:38" pos:end="183:45"><expr pos:start="183:38" pos:end="183:45"><operator pos:start="183:38" pos:end="183:38">&amp;</operator><name pos:start="183:39" pos:end="183:45">lowaddr</name></expr></argument>, <argument pos:start="183:48" pos:end="183:51"><expr pos:start="183:48" pos:end="183:51"><name pos:start="183:48" pos:end="183:51">NULL</name></expr></argument>, <argument pos:start="183:54" pos:end="183:54"><expr pos:start="183:54" pos:end="183:54"><literal type="number" pos:start="183:54" pos:end="183:54">1</literal></expr></argument>, <argument pos:start="183:57" pos:end="183:67"><expr pos:start="183:57" pos:end="183:67"><name pos:start="183:57" pos:end="183:67">ELF_MACHINE</name></expr></argument>, <argument pos:start="183:70" pos:end="183:70"><expr pos:start="183:70" pos:end="183:70"><literal type="number" pos:start="183:70" pos:end="183:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="185:9" pos:end="191:54"><if pos:start="185:9" pos:end="191:54">if <condition pos:start="185:12" pos:end="185:28">(<expr pos:start="185:13" pos:end="185:27"><name pos:start="185:13" pos:end="185:23">kernel_size</name> <operator pos:start="185:25" pos:end="185:25">&lt;</operator> <literal type="number" pos:start="185:27" pos:end="185:27">0</literal></expr>)</condition><block type="pseudo" pos:start="187:13" pos:end="191:54"><block_content pos:start="187:13" pos:end="191:54">

            <expr_stmt pos:start="187:13" pos:end="191:54"><expr pos:start="187:13" pos:end="191:53"><name pos:start="187:13" pos:end="187:23">kernel_size</name> <operator pos:start="187:25" pos:end="187:25">=</operator> <call pos:start="187:27" pos:end="191:53"><name pos:start="187:27" pos:end="187:35">load_aout</name><argument_list pos:start="187:36" pos:end="191:53">(<argument pos:start="187:37" pos:end="187:51"><expr pos:start="187:37" pos:end="187:51"><name pos:start="187:37" pos:end="187:51">kernel_filename</name></expr></argument>, <argument pos:start="187:54" pos:end="187:64"><expr pos:start="187:54" pos:end="187:64"><name pos:start="187:54" pos:end="187:64">kernel_base</name></expr></argument>,

                                    <argument pos:start="189:37" pos:end="189:58"><expr pos:start="189:37" pos:end="189:58"><name pos:start="189:37" pos:end="189:44">ram_size</name> <operator pos:start="189:46" pos:end="189:46">-</operator> <name pos:start="189:48" pos:end="189:58">kernel_base</name></expr></argument>, <argument pos:start="189:61" pos:end="189:72"><expr pos:start="189:61" pos:end="189:72"><name pos:start="189:61" pos:end="189:72">bswap_needed</name></expr></argument>,

                                    <argument pos:start="191:37" pos:end="191:52"><expr pos:start="191:37" pos:end="191:52"><name pos:start="191:37" pos:end="191:52">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="193:9" pos:end="199:70"><if pos:start="193:9" pos:end="199:70">if <condition pos:start="193:12" pos:end="193:28">(<expr pos:start="193:13" pos:end="193:27"><name pos:start="193:13" pos:end="193:23">kernel_size</name> <operator pos:start="193:25" pos:end="193:25">&lt;</operator> <literal type="number" pos:start="193:27" pos:end="193:27">0</literal></expr>)</condition><block type="pseudo" pos:start="195:13" pos:end="199:70"><block_content pos:start="195:13" pos:end="199:70">

            <expr_stmt pos:start="195:13" pos:end="199:70"><expr pos:start="195:13" pos:end="199:69"><name pos:start="195:13" pos:end="195:23">kernel_size</name> <operator pos:start="195:25" pos:end="195:25">=</operator> <call pos:start="195:27" pos:end="199:69"><name pos:start="195:27" pos:end="195:45">load_image_targphys</name><argument_list pos:start="195:46" pos:end="199:69">(<argument pos:start="195:47" pos:end="195:61"><expr pos:start="195:47" pos:end="195:61"><name pos:start="195:47" pos:end="195:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="197:47" pos:end="197:57"><expr pos:start="197:47" pos:end="197:57"><name pos:start="197:47" pos:end="197:57">kernel_base</name></expr></argument>,

                                              <argument pos:start="199:47" pos:end="199:68"><expr pos:start="199:47" pos:end="199:68"><name pos:start="199:47" pos:end="199:54">ram_size</name> <operator pos:start="199:56" pos:end="199:56">-</operator> <name pos:start="199:58" pos:end="199:68">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="201:9" pos:end="207:9"><if pos:start="201:9" pos:end="207:9">if <condition pos:start="201:12" pos:end="201:28">(<expr pos:start="201:13" pos:end="201:27"><name pos:start="201:13" pos:end="201:23">kernel_size</name> <operator pos:start="201:25" pos:end="201:25">&lt;</operator> <literal type="number" pos:start="201:27" pos:end="201:27">0</literal></expr>)</condition> <block pos:start="201:30" pos:end="207:9">{<block_content pos:start="203:13" pos:end="205:20">

            <expr_stmt pos:start="203:13" pos:end="203:76"><expr pos:start="203:13" pos:end="203:75"><call pos:start="203:13" pos:end="203:75"><name pos:start="203:13" pos:end="203:20">hw_error</name><argument_list pos:start="203:21" pos:end="203:75">(<argument pos:start="203:22" pos:end="203:57"><expr pos:start="203:22" pos:end="203:57"><literal type="string" pos:start="203:22" pos:end="203:57">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="203:60" pos:end="203:74"><expr pos:start="203:60" pos:end="203:74"><name pos:start="203:60" pos:end="203:74">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:20"><expr pos:start="205:13" pos:end="205:19"><call pos:start="205:13" pos:end="205:19"><name pos:start="205:13" pos:end="205:16">exit</name><argument_list pos:start="205:17" pos:end="205:19">(<argument pos:start="205:18" pos:end="205:18"><expr pos:start="205:18" pos:end="205:18"><literal type="number" pos:start="205:18" pos:end="205:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="209:9" pos:end="209:25">/* load initrd */</comment>

        <if_stmt pos:start="211:9" pos:end="239:9"><if pos:start="211:9" pos:end="231:9">if <condition pos:start="211:12" pos:end="211:28">(<expr pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:27">initrd_filename</name></expr>)</condition> <block pos:start="211:30" pos:end="231:9">{<block_content pos:start="213:13" pos:end="229:65">

            <expr_stmt pos:start="213:13" pos:end="213:77"><expr pos:start="213:13" pos:end="213:76"><name pos:start="213:13" pos:end="213:23">initrd_base</name> <operator pos:start="213:25" pos:end="213:25">=</operator> <call pos:start="213:27" pos:end="213:76"><name pos:start="213:27" pos:end="213:36">round_page</name><argument_list pos:start="213:37" pos:end="213:76">(<argument pos:start="213:38" pos:end="213:75"><expr pos:start="213:38" pos:end="213:75"><name pos:start="213:38" pos:end="213:48">kernel_base</name> <operator pos:start="213:50" pos:end="213:50">+</operator> <name pos:start="213:52" pos:end="213:62">kernel_size</name> <operator pos:start="213:64" pos:end="213:64">+</operator> <name pos:start="213:66" pos:end="213:75">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="217:70"><expr pos:start="215:13" pos:end="217:69"><name pos:start="215:13" pos:end="215:23">initrd_size</name> <operator pos:start="215:25" pos:end="215:25">=</operator> <call pos:start="215:27" pos:end="217:69"><name pos:start="215:27" pos:end="215:45">load_image_targphys</name><argument_list pos:start="215:46" pos:end="217:69">(<argument pos:start="215:47" pos:end="215:61"><expr pos:start="215:47" pos:end="215:61"><name pos:start="215:47" pos:end="215:61">initrd_filename</name></expr></argument>, <argument pos:start="215:64" pos:end="215:74"><expr pos:start="215:64" pos:end="215:74"><name pos:start="215:64" pos:end="215:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="217:47" pos:end="217:68"><expr pos:start="217:47" pos:end="217:68"><name pos:start="217:47" pos:end="217:54">ram_size</name> <operator pos:start="217:56" pos:end="217:56">-</operator> <name pos:start="217:58" pos:end="217:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="219:13" pos:end="227:13"><if pos:start="219:13" pos:end="227:13">if <condition pos:start="219:16" pos:end="219:32">(<expr pos:start="219:17" pos:end="219:31"><name pos:start="219:17" pos:end="219:27">initrd_size</name> <operator pos:start="219:29" pos:end="219:29">&lt;</operator> <literal type="number" pos:start="219:31" pos:end="219:31">0</literal></expr>)</condition> <block pos:start="219:34" pos:end="227:13">{<block_content pos:start="221:17" pos:end="225:24">

                <expr_stmt pos:start="221:17" pos:end="223:42"><expr pos:start="221:17" pos:end="223:41"><call pos:start="221:17" pos:end="223:41"><name pos:start="221:17" pos:end="221:24">hw_error</name><argument_list pos:start="221:25" pos:end="223:41">(<argument pos:start="221:26" pos:end="221:71"><expr pos:start="221:26" pos:end="221:71"><literal type="string" pos:start="221:26" pos:end="221:71">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                         <argument pos:start="223:26" pos:end="223:40"><expr pos:start="223:26" pos:end="223:40"><name pos:start="223:26" pos:end="223:40">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="225:17" pos:end="225:24"><expr pos:start="225:17" pos:end="225:23"><call pos:start="225:17" pos:end="225:23"><name pos:start="225:17" pos:end="225:20">exit</name><argument_list pos:start="225:21" pos:end="225:23">(<argument pos:start="225:22" pos:end="225:22"><expr pos:start="225:22" pos:end="225:22"><literal type="number" pos:start="225:22" pos:end="225:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:65"><expr pos:start="229:13" pos:end="229:64"><name pos:start="229:13" pos:end="229:24">cmdline_base</name> <operator pos:start="229:26" pos:end="229:26">=</operator> <call pos:start="229:28" pos:end="229:64"><name pos:start="229:28" pos:end="229:37">round_page</name><argument_list pos:start="229:38" pos:end="229:64">(<argument pos:start="229:39" pos:end="229:63"><expr pos:start="229:39" pos:end="229:63"><name pos:start="229:39" pos:end="229:49">initrd_base</name> <operator pos:start="229:51" pos:end="229:51">+</operator> <name pos:start="229:53" pos:end="229:63">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="231:11" pos:end="239:9">else <block pos:start="231:16" pos:end="239:9">{<block_content pos:start="233:13" pos:end="237:78">

            <expr_stmt pos:start="233:13" pos:end="233:28"><expr pos:start="233:13" pos:end="233:27"><name pos:start="233:13" pos:end="233:23">initrd_base</name> <operator pos:start="233:25" pos:end="233:25">=</operator> <literal type="number" pos:start="233:27" pos:end="233:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:28"><expr pos:start="235:13" pos:end="235:27"><name pos:start="235:13" pos:end="235:23">initrd_size</name> <operator pos:start="235:25" pos:end="235:25">=</operator> <literal type="number" pos:start="235:27" pos:end="235:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="237:13" pos:end="237:78"><expr pos:start="237:13" pos:end="237:77"><name pos:start="237:13" pos:end="237:24">cmdline_base</name> <operator pos:start="237:26" pos:end="237:26">=</operator> <call pos:start="237:28" pos:end="237:77"><name pos:start="237:28" pos:end="237:37">round_page</name><argument_list pos:start="237:38" pos:end="237:77">(<argument pos:start="237:39" pos:end="237:76"><expr pos:start="237:39" pos:end="237:76"><name pos:start="237:39" pos:end="237:49">kernel_base</name> <operator pos:start="237:51" pos:end="237:51">+</operator> <name pos:start="237:53" pos:end="237:63">kernel_size</name> <operator pos:start="237:65" pos:end="237:65">+</operator> <name pos:start="237:67" pos:end="237:76">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:30"><expr pos:start="241:9" pos:end="241:29"><name pos:start="241:9" pos:end="241:23">ppc_boot_device</name> <operator pos:start="241:25" pos:end="241:25">=</operator> <literal type="char" pos:start="241:27" pos:end="241:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="243:7" pos:end="281:5">else <block pos:start="243:12" pos:end="281:5">{<block_content pos:start="245:9" pos:end="279:9">

        <expr_stmt pos:start="245:9" pos:end="245:24"><expr pos:start="245:9" pos:end="245:23"><name pos:start="245:9" pos:end="245:19">kernel_base</name> <operator pos:start="245:21" pos:end="245:21">=</operator> <literal type="number" pos:start="245:23" pos:end="245:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:24"><expr pos:start="247:9" pos:end="247:23"><name pos:start="247:9" pos:end="247:19">kernel_size</name> <operator pos:start="247:21" pos:end="247:21">=</operator> <literal type="number" pos:start="247:23" pos:end="247:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:24"><expr pos:start="249:9" pos:end="249:23"><name pos:start="249:9" pos:end="249:19">initrd_base</name> <operator pos:start="249:21" pos:end="249:21">=</operator> <literal type="number" pos:start="249:23" pos:end="249:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="251:9" pos:end="251:24"><expr pos:start="251:9" pos:end="251:23"><name pos:start="251:9" pos:end="251:19">initrd_size</name> <operator pos:start="251:21" pos:end="251:21">=</operator> <literal type="number" pos:start="251:23" pos:end="251:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:31"><expr pos:start="253:9" pos:end="253:30"><name pos:start="253:9" pos:end="253:23">ppc_boot_device</name> <operator pos:start="253:25" pos:end="253:25">=</operator> <literal type="char" pos:start="253:27" pos:end="253:30">'\0'</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="255:9" pos:end="259:11">/* We consider that NewWorld PowerMac never have any floppy drive

         * For now, OHW cannot boot from the network.

         */</comment>

        <for pos:start="261:9" pos:end="271:9">for <control pos:start="261:13" pos:end="261:48">(<init pos:start="261:14" pos:end="261:19"><expr pos:start="261:14" pos:end="261:18"><name pos:start="261:14" pos:end="261:14">i</name> <operator pos:start="261:16" pos:end="261:16">=</operator> <literal type="number" pos:start="261:18" pos:end="261:18">0</literal></expr>;</init> <condition pos:start="261:21" pos:end="261:43"><expr pos:start="261:21" pos:end="261:42"><name pos:start="261:21" pos:end="261:34"><name pos:start="261:21" pos:end="261:31">boot_device</name><index pos:start="261:32" pos:end="261:34">[<expr pos:start="261:33" pos:end="261:33"><name pos:start="261:33" pos:end="261:33">i</name></expr>]</index></name> <operator pos:start="261:36" pos:end="261:37">!=</operator> <literal type="char" pos:start="261:39" pos:end="261:42">'\0'</literal></expr>;</condition> <incr pos:start="261:45" pos:end="261:47"><expr pos:start="261:45" pos:end="261:47"><name pos:start="261:45" pos:end="261:45">i</name><operator pos:start="261:46" pos:end="261:47">++</operator></expr></incr>)</control> <block pos:start="261:50" pos:end="271:9">{<block_content pos:start="263:13" pos:end="269:13">

            <if_stmt pos:start="263:13" pos:end="269:13"><if pos:start="263:13" pos:end="269:13">if <condition pos:start="263:16" pos:end="263:63">(<expr pos:start="263:17" pos:end="263:62"><name pos:start="263:17" pos:end="263:30"><name pos:start="263:17" pos:end="263:27">boot_device</name><index pos:start="263:28" pos:end="263:30">[<expr pos:start="263:29" pos:end="263:29"><name pos:start="263:29" pos:end="263:29">i</name></expr>]</index></name> <operator pos:start="263:32" pos:end="263:33">&gt;=</operator> <literal type="char" pos:start="263:35" pos:end="263:37">'c'</literal> <operator pos:start="263:39" pos:end="263:40">&amp;&amp;</operator> <name pos:start="263:42" pos:end="263:55"><name pos:start="263:42" pos:end="263:52">boot_device</name><index pos:start="263:53" pos:end="263:55">[<expr pos:start="263:54" pos:end="263:54"><name pos:start="263:54" pos:end="263:54">i</name></expr>]</index></name> <operator pos:start="263:57" pos:end="263:58">&lt;=</operator> <literal type="char" pos:start="263:60" pos:end="263:62">'f'</literal></expr>)</condition> <block pos:start="263:65" pos:end="269:13">{<block_content pos:start="265:17" pos:end="267:22">

                <expr_stmt pos:start="265:17" pos:end="265:49"><expr pos:start="265:17" pos:end="265:48"><name pos:start="265:17" pos:end="265:31">ppc_boot_device</name> <operator pos:start="265:33" pos:end="265:33">=</operator> <name pos:start="265:35" pos:end="265:48"><name pos:start="265:35" pos:end="265:45">boot_device</name><index pos:start="265:46" pos:end="265:48">[<expr pos:start="265:47" pos:end="265:47"><name pos:start="265:47" pos:end="265:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="267:17" pos:end="267:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <if_stmt pos:start="273:9" pos:end="279:9"><if pos:start="273:9" pos:end="279:9">if <condition pos:start="273:12" pos:end="273:36">(<expr pos:start="273:13" pos:end="273:35"><name pos:start="273:13" pos:end="273:27">ppc_boot_device</name> <operator pos:start="273:29" pos:end="273:30">==</operator> <literal type="char" pos:start="273:32" pos:end="273:35">'\0'</literal></expr>)</condition> <block pos:start="273:38" pos:end="279:9">{<block_content pos:start="275:13" pos:end="277:20">

            <expr_stmt pos:start="275:13" pos:end="275:72"><expr pos:start="275:13" pos:end="275:71"><call pos:start="275:13" pos:end="275:71"><name pos:start="275:13" pos:end="275:19">fprintf</name><argument_list pos:start="275:20" pos:end="275:71">(<argument pos:start="275:21" pos:end="275:26"><expr pos:start="275:21" pos:end="275:26"><name pos:start="275:21" pos:end="275:26">stderr</name></expr></argument>, <argument pos:start="275:29" pos:end="275:70"><expr pos:start="275:29" pos:end="275:70"><literal type="string" pos:start="275:29" pos:end="275:70">"No valid boot device for Mac99 machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:20"><expr pos:start="277:13" pos:end="277:19"><call pos:start="277:13" pos:end="277:19"><name pos:start="277:13" pos:end="277:16">exit</name><argument_list pos:start="277:17" pos:end="277:19">(<argument pos:start="277:18" pos:end="277:18"><expr pos:start="277:18" pos:end="277:18"><literal type="number" pos:start="277:18" pos:end="277:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="285:5" pos:end="285:39">/* Register 8 MB of ISA IO space */</comment>

    <expr_stmt pos:start="287:5" pos:end="287:42"><expr pos:start="287:5" pos:end="287:41"><call pos:start="287:5" pos:end="287:41"><name pos:start="287:5" pos:end="287:17">isa_mmio_init</name><argument_list pos:start="287:18" pos:end="287:41">(<argument pos:start="287:19" pos:end="287:28"><expr pos:start="287:19" pos:end="287:28"><literal type="number" pos:start="287:19" pos:end="287:28">0xf2000000</literal></expr></argument>, <argument pos:start="287:31" pos:end="287:40"><expr pos:start="287:31" pos:end="287:40"><literal type="number" pos:start="287:31" pos:end="287:40">0x00800000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="291:5" pos:end="291:19">/* UniN init */</comment>

    <expr_stmt pos:start="293:5" pos:end="293:72"><expr pos:start="293:5" pos:end="293:71"><call pos:start="293:5" pos:end="293:71"><name pos:start="293:5" pos:end="293:25">memory_region_init_io</name><argument_list pos:start="293:26" pos:end="293:71">(<argument pos:start="293:27" pos:end="293:37"><expr pos:start="293:27" pos:end="293:37"><name pos:start="293:27" pos:end="293:37">unin_memory</name></expr></argument>, <argument pos:start="293:40" pos:end="293:48"><expr pos:start="293:40" pos:end="293:48"><operator pos:start="293:40" pos:end="293:40">&amp;</operator><name pos:start="293:41" pos:end="293:48">unin_ops</name></expr></argument>, <argument pos:start="293:51" pos:end="293:54"><expr pos:start="293:51" pos:end="293:54"><name pos:start="293:51" pos:end="293:54">NULL</name></expr></argument>, <argument pos:start="293:57" pos:end="293:62"><expr pos:start="293:57" pos:end="293:62"><literal type="string" pos:start="293:57" pos:end="293:62">"unin"</literal></expr></argument>, <argument pos:start="293:65" pos:end="293:70"><expr pos:start="293:65" pos:end="293:70"><literal type="number" pos:start="293:65" pos:end="293:70">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="295:5" pos:end="295:78"><expr pos:start="295:5" pos:end="295:77"><call pos:start="295:5" pos:end="295:77"><name pos:start="295:5" pos:end="295:31">memory_region_add_subregion</name><argument_list pos:start="295:32" pos:end="295:77">(<argument pos:start="295:33" pos:end="295:51"><expr pos:start="295:33" pos:end="295:51"><call pos:start="295:33" pos:end="295:51"><name pos:start="295:33" pos:end="295:49">get_system_memory</name><argument_list pos:start="295:50" pos:end="295:51">()</argument_list></call></expr></argument>, <argument pos:start="295:54" pos:end="295:63"><expr pos:start="295:54" pos:end="295:63"><literal type="number" pos:start="295:54" pos:end="295:63">0xf8000000</literal></expr></argument>, <argument pos:start="295:66" pos:end="295:76"><expr pos:start="295:66" pos:end="295:76"><name pos:start="295:66" pos:end="295:76">unin_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="299:5" pos:end="299:60"><expr pos:start="299:5" pos:end="299:59"><name pos:start="299:5" pos:end="299:16">openpic_irqs</name> <operator pos:start="299:18" pos:end="299:18">=</operator> <call pos:start="299:20" pos:end="299:59"><name pos:start="299:20" pos:end="299:28">g_malloc0</name><argument_list pos:start="299:29" pos:end="299:59">(<argument pos:start="299:30" pos:end="299:58"><expr pos:start="299:30" pos:end="299:58"><name pos:start="299:30" pos:end="299:37">smp_cpus</name> <operator pos:start="299:39" pos:end="299:39">*</operator> <sizeof pos:start="299:41" pos:end="299:58">sizeof<argument_list pos:start="299:47" pos:end="299:58">(<argument pos:start="299:48" pos:end="299:57"><expr pos:start="299:48" pos:end="299:57"><name pos:start="299:48" pos:end="299:55">qemu_irq</name> <operator pos:start="299:57" pos:end="299:57">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="303:67"><expr pos:start="301:5" pos:end="303:66"><name pos:start="301:5" pos:end="301:19"><name pos:start="301:5" pos:end="301:16">openpic_irqs</name><index pos:start="301:17" pos:end="301:19">[<expr pos:start="301:18" pos:end="301:18"><literal type="number" pos:start="301:18" pos:end="301:18">0</literal></expr>]</index></name> <operator pos:start="301:21" pos:end="301:21">=</operator>

        <call pos:start="303:9" pos:end="303:66"><name pos:start="303:9" pos:end="303:17">g_malloc0</name><argument_list pos:start="303:18" pos:end="303:66">(<argument pos:start="303:19" pos:end="303:65"><expr pos:start="303:19" pos:end="303:65"><name pos:start="303:19" pos:end="303:26">smp_cpus</name> <operator pos:start="303:28" pos:end="303:28">*</operator> <sizeof pos:start="303:30" pos:end="303:45">sizeof<argument_list pos:start="303:36" pos:end="303:45">(<argument pos:start="303:37" pos:end="303:44"><expr pos:start="303:37" pos:end="303:44"><name pos:start="303:37" pos:end="303:44">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="303:47" pos:end="303:47">*</operator> <name pos:start="303:49" pos:end="303:65">OPENPIC_OUTPUT_NB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="305:5" pos:end="383:5">for <control pos:start="305:9" pos:end="305:34">(<init pos:start="305:10" pos:end="305:15"><expr pos:start="305:10" pos:end="305:14"><name pos:start="305:10" pos:end="305:10">i</name> <operator pos:start="305:12" pos:end="305:12">=</operator> <literal type="number" pos:start="305:14" pos:end="305:14">0</literal></expr>;</init> <condition pos:start="305:17" pos:end="305:29"><expr pos:start="305:17" pos:end="305:28"><name pos:start="305:17" pos:end="305:17">i</name> <operator pos:start="305:19" pos:end="305:19">&lt;</operator> <name pos:start="305:21" pos:end="305:28">smp_cpus</name></expr>;</condition> <incr pos:start="305:31" pos:end="305:33"><expr pos:start="305:31" pos:end="305:33"><name pos:start="305:31" pos:end="305:31">i</name><operator pos:start="305:32" pos:end="305:33">++</operator></expr></incr>)</control> <block pos:start="305:36" pos:end="383:5">{<block_content pos:start="313:9" pos:end="381:9">

        <comment type="block" pos:start="307:9" pos:end="311:11">/* Mac99 IRQ connection between OpenPIC outputs pins

         * and PowerPC input pins

         */</comment>

        <switch pos:start="313:9" pos:end="381:9">switch <condition pos:start="313:16" pos:end="313:31">(<expr pos:start="313:17" pos:end="313:30"><call pos:start="313:17" pos:end="313:30"><name pos:start="313:17" pos:end="313:25">PPC_INPUT</name><argument_list pos:start="313:26" pos:end="313:30">(<argument pos:start="313:27" pos:end="313:29"><expr pos:start="313:27" pos:end="313:29"><name pos:start="313:27" pos:end="313:29">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="313:33" pos:end="381:9">{<block_content pos:start="315:9" pos:end="379:20">

        <case pos:start="315:9" pos:end="315:33">case <expr pos:start="315:14" pos:end="315:32"><name pos:start="315:14" pos:end="315:32">PPC_FLAGS_INPUT_6xx</name></expr>:</case>

            <expr_stmt pos:start="317:13" pos:end="317:72"><expr pos:start="317:13" pos:end="317:71"><name pos:start="317:13" pos:end="317:27"><name pos:start="317:13" pos:end="317:24">openpic_irqs</name><index pos:start="317:25" pos:end="317:27">[<expr pos:start="317:26" pos:end="317:26"><name pos:start="317:26" pos:end="317:26">i</name></expr>]</index></name> <operator pos:start="317:29" pos:end="317:29">=</operator> <name pos:start="317:31" pos:end="317:45"><name pos:start="317:31" pos:end="317:42">openpic_irqs</name><index pos:start="317:43" pos:end="317:45">[<expr pos:start="317:44" pos:end="317:44"><literal type="number" pos:start="317:44" pos:end="317:44">0</literal></expr>]</index></name> <operator pos:start="317:47" pos:end="317:47">+</operator> <operator pos:start="317:49" pos:end="317:49">(</operator><name pos:start="317:50" pos:end="317:50">i</name> <operator pos:start="317:52" pos:end="317:52">*</operator> <name pos:start="317:54" pos:end="317:70">OPENPIC_OUTPUT_NB</name><operator pos:start="317:71" pos:end="317:71">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="321:64"><expr pos:start="319:13" pos:end="321:63"><name pos:start="319:13" pos:end="319:47"><name pos:start="319:13" pos:end="319:24">openpic_irqs</name><index pos:start="319:25" pos:end="319:27">[<expr pos:start="319:26" pos:end="319:26"><name pos:start="319:26" pos:end="319:26">i</name></expr>]</index><index pos:start="319:28" pos:end="319:47">[<expr pos:start="319:29" pos:end="319:46"><name pos:start="319:29" pos:end="319:46">OPENPIC_OUTPUT_INT</name></expr>]</index></name> <operator pos:start="319:49" pos:end="319:49">=</operator>

                <operator pos:start="321:17" pos:end="321:17">(</operator><operator pos:start="321:18" pos:end="321:18">(</operator><name pos:start="321:19" pos:end="321:26">qemu_irq</name> <operator pos:start="321:28" pos:end="321:28">*</operator><operator pos:start="321:29" pos:end="321:29">)</operator><name pos:start="321:30" pos:end="321:44"><name pos:start="321:30" pos:end="321:32">env</name><operator pos:start="321:33" pos:end="321:34">-&gt;</operator><name pos:start="321:35" pos:end="321:44">irq_inputs</name></name><operator pos:start="321:45" pos:end="321:45">)</operator><index pos:start="321:46" pos:end="321:63">[<expr pos:start="321:47" pos:end="321:62"><name pos:start="321:47" pos:end="321:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="323:13" pos:end="325:64"><expr pos:start="323:13" pos:end="325:63"><name pos:start="323:13" pos:end="323:48"><name pos:start="323:13" pos:end="323:24">openpic_irqs</name><index pos:start="323:25" pos:end="323:27">[<expr pos:start="323:26" pos:end="323:26"><name pos:start="323:26" pos:end="323:26">i</name></expr>]</index><index pos:start="323:28" pos:end="323:48">[<expr pos:start="323:29" pos:end="323:47"><name pos:start="323:29" pos:end="323:47">OPENPIC_OUTPUT_CINT</name></expr>]</index></name> <operator pos:start="323:50" pos:end="323:50">=</operator>

                <operator pos:start="325:17" pos:end="325:17">(</operator><operator pos:start="325:18" pos:end="325:18">(</operator><name pos:start="325:19" pos:end="325:26">qemu_irq</name> <operator pos:start="325:28" pos:end="325:28">*</operator><operator pos:start="325:29" pos:end="325:29">)</operator><name pos:start="325:30" pos:end="325:44"><name pos:start="325:30" pos:end="325:32">env</name><operator pos:start="325:33" pos:end="325:34">-&gt;</operator><name pos:start="325:35" pos:end="325:44">irq_inputs</name></name><operator pos:start="325:45" pos:end="325:45">)</operator><index pos:start="325:46" pos:end="325:63">[<expr pos:start="325:47" pos:end="325:62"><name pos:start="325:47" pos:end="325:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="327:13" pos:end="329:64"><expr pos:start="327:13" pos:end="329:63"><name pos:start="327:13" pos:end="327:47"><name pos:start="327:13" pos:end="327:24">openpic_irqs</name><index pos:start="327:25" pos:end="327:27">[<expr pos:start="327:26" pos:end="327:26"><name pos:start="327:26" pos:end="327:26">i</name></expr>]</index><index pos:start="327:28" pos:end="327:47">[<expr pos:start="327:29" pos:end="327:46"><name pos:start="327:29" pos:end="327:46">OPENPIC_OUTPUT_MCK</name></expr>]</index></name> <operator pos:start="327:49" pos:end="327:49">=</operator>

                <operator pos:start="329:17" pos:end="329:17">(</operator><operator pos:start="329:18" pos:end="329:18">(</operator><name pos:start="329:19" pos:end="329:26">qemu_irq</name> <operator pos:start="329:28" pos:end="329:28">*</operator><operator pos:start="329:29" pos:end="329:29">)</operator><name pos:start="329:30" pos:end="329:44"><name pos:start="329:30" pos:end="329:32">env</name><operator pos:start="329:33" pos:end="329:34">-&gt;</operator><name pos:start="329:35" pos:end="329:44">irq_inputs</name></name><operator pos:start="329:45" pos:end="329:45">)</operator><index pos:start="329:46" pos:end="329:63">[<expr pos:start="329:47" pos:end="329:62"><name pos:start="329:47" pos:end="329:62">PPC6xx_INPUT_MCP</name></expr>]</index></expr>;</expr_stmt>

            <comment type="block" pos:start="331:13" pos:end="331:33">/* Not connected ? */</comment>

            <expr_stmt pos:start="333:13" pos:end="333:57"><expr pos:start="333:13" pos:end="333:56"><name pos:start="333:13" pos:end="333:49"><name pos:start="333:13" pos:end="333:24">openpic_irqs</name><index pos:start="333:25" pos:end="333:27">[<expr pos:start="333:26" pos:end="333:26"><name pos:start="333:26" pos:end="333:26">i</name></expr>]</index><index pos:start="333:28" pos:end="333:49">[<expr pos:start="333:29" pos:end="333:48"><name pos:start="333:29" pos:end="333:48">OPENPIC_OUTPUT_DEBUG</name></expr>]</index></name> <operator pos:start="333:51" pos:end="333:51">=</operator> <name pos:start="333:53" pos:end="333:56">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="335:13" pos:end="335:28">/* Check this */</comment>

            <expr_stmt pos:start="337:13" pos:end="339:67"><expr pos:start="337:13" pos:end="339:66"><name pos:start="337:13" pos:end="337:49"><name pos:start="337:13" pos:end="337:24">openpic_irqs</name><index pos:start="337:25" pos:end="337:27">[<expr pos:start="337:26" pos:end="337:26"><name pos:start="337:26" pos:end="337:26">i</name></expr>]</index><index pos:start="337:28" pos:end="337:49">[<expr pos:start="337:29" pos:end="337:48"><name pos:start="337:29" pos:end="337:48">OPENPIC_OUTPUT_RESET</name></expr>]</index></name> <operator pos:start="337:51" pos:end="337:51">=</operator>

                <operator pos:start="339:17" pos:end="339:17">(</operator><operator pos:start="339:18" pos:end="339:18">(</operator><name pos:start="339:19" pos:end="339:26">qemu_irq</name> <operator pos:start="339:28" pos:end="339:28">*</operator><operator pos:start="339:29" pos:end="339:29">)</operator><name pos:start="339:30" pos:end="339:44"><name pos:start="339:30" pos:end="339:32">env</name><operator pos:start="339:33" pos:end="339:34">-&gt;</operator><name pos:start="339:35" pos:end="339:44">irq_inputs</name></name><operator pos:start="339:45" pos:end="339:45">)</operator><index pos:start="339:46" pos:end="339:66">[<expr pos:start="339:47" pos:end="339:65"><name pos:start="339:47" pos:end="339:65">PPC6xx_INPUT_HRESET</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="341:13" pos:end="344:0">break;</break>

<cpp:if pos:start="343:1" pos:end="343:25">#<cpp:directive pos:start="343:2" pos:end="343:3">if</cpp:directive> <expr pos:start="343:5" pos:end="343:25"><call pos:start="343:5" pos:end="343:25"><name pos:start="343:5" pos:end="343:11">defined</name><argument_list pos:start="343:12" pos:end="343:25">(<argument pos:start="343:13" pos:end="343:24"><expr pos:start="343:13" pos:end="343:24"><name pos:start="343:13" pos:end="343:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="345:9" pos:end="345:33">case <expr pos:start="345:14" pos:end="345:32"><name pos:start="345:14" pos:end="345:32">PPC_FLAGS_INPUT_970</name></expr>:</case>

            <expr_stmt pos:start="347:13" pos:end="347:72"><expr pos:start="347:13" pos:end="347:71"><name pos:start="347:13" pos:end="347:27"><name pos:start="347:13" pos:end="347:24">openpic_irqs</name><index pos:start="347:25" pos:end="347:27">[<expr pos:start="347:26" pos:end="347:26"><name pos:start="347:26" pos:end="347:26">i</name></expr>]</index></name> <operator pos:start="347:29" pos:end="347:29">=</operator> <name pos:start="347:31" pos:end="347:45"><name pos:start="347:31" pos:end="347:42">openpic_irqs</name><index pos:start="347:43" pos:end="347:45">[<expr pos:start="347:44" pos:end="347:44"><literal type="number" pos:start="347:44" pos:end="347:44">0</literal></expr>]</index></name> <operator pos:start="347:47" pos:end="347:47">+</operator> <operator pos:start="347:49" pos:end="347:49">(</operator><name pos:start="347:50" pos:end="347:50">i</name> <operator pos:start="347:52" pos:end="347:52">*</operator> <name pos:start="347:54" pos:end="347:70">OPENPIC_OUTPUT_NB</name><operator pos:start="347:71" pos:end="347:71">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="349:13" pos:end="351:64"><expr pos:start="349:13" pos:end="351:63"><name pos:start="349:13" pos:end="349:47"><name pos:start="349:13" pos:end="349:24">openpic_irqs</name><index pos:start="349:25" pos:end="349:27">[<expr pos:start="349:26" pos:end="349:26"><name pos:start="349:26" pos:end="349:26">i</name></expr>]</index><index pos:start="349:28" pos:end="349:47">[<expr pos:start="349:29" pos:end="349:46"><name pos:start="349:29" pos:end="349:46">OPENPIC_OUTPUT_INT</name></expr>]</index></name> <operator pos:start="349:49" pos:end="349:49">=</operator>

                <operator pos:start="351:17" pos:end="351:17">(</operator><operator pos:start="351:18" pos:end="351:18">(</operator><name pos:start="351:19" pos:end="351:26">qemu_irq</name> <operator pos:start="351:28" pos:end="351:28">*</operator><operator pos:start="351:29" pos:end="351:29">)</operator><name pos:start="351:30" pos:end="351:44"><name pos:start="351:30" pos:end="351:32">env</name><operator pos:start="351:33" pos:end="351:34">-&gt;</operator><name pos:start="351:35" pos:end="351:44">irq_inputs</name></name><operator pos:start="351:45" pos:end="351:45">)</operator><index pos:start="351:46" pos:end="351:63">[<expr pos:start="351:47" pos:end="351:62"><name pos:start="351:47" pos:end="351:62">PPC970_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="355:64"><expr pos:start="353:13" pos:end="355:63"><name pos:start="353:13" pos:end="353:48"><name pos:start="353:13" pos:end="353:24">openpic_irqs</name><index pos:start="353:25" pos:end="353:27">[<expr pos:start="353:26" pos:end="353:26"><name pos:start="353:26" pos:end="353:26">i</name></expr>]</index><index pos:start="353:28" pos:end="353:48">[<expr pos:start="353:29" pos:end="353:47"><name pos:start="353:29" pos:end="353:47">OPENPIC_OUTPUT_CINT</name></expr>]</index></name> <operator pos:start="353:50" pos:end="353:50">=</operator>

                <operator pos:start="355:17" pos:end="355:17">(</operator><operator pos:start="355:18" pos:end="355:18">(</operator><name pos:start="355:19" pos:end="355:26">qemu_irq</name> <operator pos:start="355:28" pos:end="355:28">*</operator><operator pos:start="355:29" pos:end="355:29">)</operator><name pos:start="355:30" pos:end="355:44"><name pos:start="355:30" pos:end="355:32">env</name><operator pos:start="355:33" pos:end="355:34">-&gt;</operator><name pos:start="355:35" pos:end="355:44">irq_inputs</name></name><operator pos:start="355:45" pos:end="355:45">)</operator><index pos:start="355:46" pos:end="355:63">[<expr pos:start="355:47" pos:end="355:62"><name pos:start="355:47" pos:end="355:62">PPC970_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="359:64"><expr pos:start="357:13" pos:end="359:63"><name pos:start="357:13" pos:end="357:47"><name pos:start="357:13" pos:end="357:24">openpic_irqs</name><index pos:start="357:25" pos:end="357:27">[<expr pos:start="357:26" pos:end="357:26"><name pos:start="357:26" pos:end="357:26">i</name></expr>]</index><index pos:start="357:28" pos:end="357:47">[<expr pos:start="357:29" pos:end="357:46"><name pos:start="357:29" pos:end="357:46">OPENPIC_OUTPUT_MCK</name></expr>]</index></name> <operator pos:start="357:49" pos:end="357:49">=</operator>

                <operator pos:start="359:17" pos:end="359:17">(</operator><operator pos:start="359:18" pos:end="359:18">(</operator><name pos:start="359:19" pos:end="359:26">qemu_irq</name> <operator pos:start="359:28" pos:end="359:28">*</operator><operator pos:start="359:29" pos:end="359:29">)</operator><name pos:start="359:30" pos:end="359:44"><name pos:start="359:30" pos:end="359:32">env</name><operator pos:start="359:33" pos:end="359:34">-&gt;</operator><name pos:start="359:35" pos:end="359:44">irq_inputs</name></name><operator pos:start="359:45" pos:end="359:45">)</operator><index pos:start="359:46" pos:end="359:63">[<expr pos:start="359:47" pos:end="359:62"><name pos:start="359:47" pos:end="359:62">PPC970_INPUT_MCP</name></expr>]</index></expr>;</expr_stmt>

            <comment type="block" pos:start="361:13" pos:end="361:33">/* Not connected ? */</comment>

            <expr_stmt pos:start="363:13" pos:end="363:57"><expr pos:start="363:13" pos:end="363:56"><name pos:start="363:13" pos:end="363:49"><name pos:start="363:13" pos:end="363:24">openpic_irqs</name><index pos:start="363:25" pos:end="363:27">[<expr pos:start="363:26" pos:end="363:26"><name pos:start="363:26" pos:end="363:26">i</name></expr>]</index><index pos:start="363:28" pos:end="363:49">[<expr pos:start="363:29" pos:end="363:48"><name pos:start="363:29" pos:end="363:48">OPENPIC_OUTPUT_DEBUG</name></expr>]</index></name> <operator pos:start="363:51" pos:end="363:51">=</operator> <name pos:start="363:53" pos:end="363:56">NULL</name></expr>;</expr_stmt>

            <comment type="block" pos:start="365:13" pos:end="365:28">/* Check this */</comment>

            <expr_stmt pos:start="367:13" pos:end="369:67"><expr pos:start="367:13" pos:end="369:66"><name pos:start="367:13" pos:end="367:49"><name pos:start="367:13" pos:end="367:24">openpic_irqs</name><index pos:start="367:25" pos:end="367:27">[<expr pos:start="367:26" pos:end="367:26"><name pos:start="367:26" pos:end="367:26">i</name></expr>]</index><index pos:start="367:28" pos:end="367:49">[<expr pos:start="367:29" pos:end="367:48"><name pos:start="367:29" pos:end="367:48">OPENPIC_OUTPUT_RESET</name></expr>]</index></name> <operator pos:start="367:51" pos:end="367:51">=</operator>

                <operator pos:start="369:17" pos:end="369:17">(</operator><operator pos:start="369:18" pos:end="369:18">(</operator><name pos:start="369:19" pos:end="369:26">qemu_irq</name> <operator pos:start="369:28" pos:end="369:28">*</operator><operator pos:start="369:29" pos:end="369:29">)</operator><name pos:start="369:30" pos:end="369:44"><name pos:start="369:30" pos:end="369:32">env</name><operator pos:start="369:33" pos:end="369:34">-&gt;</operator><name pos:start="369:35" pos:end="369:44">irq_inputs</name></name><operator pos:start="369:45" pos:end="369:45">)</operator><index pos:start="369:46" pos:end="369:66">[<expr pos:start="369:47" pos:end="369:65"><name pos:start="369:47" pos:end="369:65">PPC970_INPUT_HRESET</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="371:13" pos:end="374:0">break;</break>

<cpp:endif pos:start="373:1" pos:end="373:6">#<cpp:directive pos:start="373:2" pos:end="373:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="373:8" pos:end="373:34">/* defined(TARGET_PPC64) */</comment>

        <default pos:start="375:9" pos:end="375:16">default:</default>

            <expr_stmt pos:start="377:13" pos:end="377:67"><expr pos:start="377:13" pos:end="377:66"><call pos:start="377:13" pos:end="377:66"><name pos:start="377:13" pos:end="377:20">hw_error</name><argument_list pos:start="377:21" pos:end="377:66">(<argument pos:start="377:22" pos:end="377:65"><expr pos:start="377:22" pos:end="377:65"><literal type="string" pos:start="377:22" pos:end="377:65">"Bus model not supported on mac99 machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="379:13" pos:end="379:20"><expr pos:start="379:13" pos:end="379:19"><call pos:start="379:13" pos:end="379:19"><name pos:start="379:13" pos:end="379:16">exit</name><argument_list pos:start="379:17" pos:end="379:19">(<argument pos:start="379:18" pos:end="379:18"><expr pos:start="379:18" pos:end="379:18"><literal type="number" pos:start="379:18" pos:end="379:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <expr_stmt pos:start="385:5" pos:end="385:63"><expr pos:start="385:5" pos:end="385:62"><name pos:start="385:5" pos:end="385:7">pic</name> <operator pos:start="385:9" pos:end="385:9">=</operator> <call pos:start="385:11" pos:end="385:62"><name pos:start="385:11" pos:end="385:22">openpic_init</name><argument_list pos:start="385:23" pos:end="385:62">(<argument pos:start="385:24" pos:end="385:31"><expr pos:start="385:24" pos:end="385:31"><operator pos:start="385:24" pos:end="385:24">&amp;</operator><name pos:start="385:25" pos:end="385:31">pic_mem</name></expr></argument>, <argument pos:start="385:34" pos:end="385:41"><expr pos:start="385:34" pos:end="385:41"><name pos:start="385:34" pos:end="385:41">smp_cpus</name></expr></argument>, <argument pos:start="385:44" pos:end="385:55"><expr pos:start="385:44" pos:end="385:55"><name pos:start="385:44" pos:end="385:55">openpic_irqs</name></expr></argument>, <argument pos:start="385:58" pos:end="385:61"><expr pos:start="385:58" pos:end="385:61"><name pos:start="385:58" pos:end="385:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="387:5" pos:end="401:5"><if pos:start="387:5" pos:end="395:5">if <condition pos:start="387:8" pos:end="387:46">(<expr pos:start="387:9" pos:end="387:45"><call pos:start="387:9" pos:end="387:22"><name pos:start="387:9" pos:end="387:17">PPC_INPUT</name><argument_list pos:start="387:18" pos:end="387:22">(<argument pos:start="387:19" pos:end="387:21"><expr pos:start="387:19" pos:end="387:21"><name pos:start="387:19" pos:end="387:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="387:24" pos:end="387:25">==</operator> <name pos:start="387:27" pos:end="387:45">PPC_FLAGS_INPUT_970</name></expr>)</condition> <block pos:start="387:48" pos:end="395:5">{<block_content pos:start="391:9" pos:end="393:37">

        <comment type="block" pos:start="389:9" pos:end="389:31">/* 970 gets a U3 bus */</comment>

        <expr_stmt pos:start="391:9" pos:end="391:78"><expr pos:start="391:9" pos:end="391:77"><name pos:start="391:9" pos:end="391:15">pci_bus</name> <operator pos:start="391:17" pos:end="391:17">=</operator> <call pos:start="391:19" pos:end="391:77"><name pos:start="391:19" pos:end="391:34">pci_pmac_u3_init</name><argument_list pos:start="391:35" pos:end="391:77">(<argument pos:start="391:36" pos:end="391:38"><expr pos:start="391:36" pos:end="391:38"><name pos:start="391:36" pos:end="391:38">pic</name></expr></argument>, <argument pos:start="391:41" pos:end="391:59"><expr pos:start="391:41" pos:end="391:59"><call pos:start="391:41" pos:end="391:59"><name pos:start="391:41" pos:end="391:57">get_system_memory</name><argument_list pos:start="391:58" pos:end="391:59">()</argument_list></call></expr></argument>, <argument pos:start="391:62" pos:end="391:76"><expr pos:start="391:62" pos:end="391:76"><call pos:start="391:62" pos:end="391:76"><name pos:start="391:62" pos:end="391:74">get_system_io</name><argument_list pos:start="391:75" pos:end="391:76">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="393:9" pos:end="393:37"><expr pos:start="393:9" pos:end="393:36"><name pos:start="393:9" pos:end="393:20">machine_arch</name> <operator pos:start="393:22" pos:end="393:22">=</operator> <name pos:start="393:24" pos:end="393:36">ARCH_MAC99_U3</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="395:7" pos:end="401:5">else <block pos:start="395:12" pos:end="401:5">{<block_content pos:start="397:9" pos:end="399:34">

        <expr_stmt pos:start="397:9" pos:end="397:75"><expr pos:start="397:9" pos:end="397:74"><name pos:start="397:9" pos:end="397:15">pci_bus</name> <operator pos:start="397:17" pos:end="397:17">=</operator> <call pos:start="397:19" pos:end="397:74"><name pos:start="397:19" pos:end="397:31">pci_pmac_init</name><argument_list pos:start="397:32" pos:end="397:74">(<argument pos:start="397:33" pos:end="397:35"><expr pos:start="397:33" pos:end="397:35"><name pos:start="397:33" pos:end="397:35">pic</name></expr></argument>, <argument pos:start="397:38" pos:end="397:56"><expr pos:start="397:38" pos:end="397:56"><call pos:start="397:38" pos:end="397:56"><name pos:start="397:38" pos:end="397:54">get_system_memory</name><argument_list pos:start="397:55" pos:end="397:56">()</argument_list></call></expr></argument>, <argument pos:start="397:59" pos:end="397:73"><expr pos:start="397:59" pos:end="397:73"><call pos:start="397:59" pos:end="397:73"><name pos:start="397:59" pos:end="397:71">get_system_io</name><argument_list pos:start="397:72" pos:end="397:73">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:34"><expr pos:start="399:9" pos:end="399:33"><name pos:start="399:9" pos:end="399:20">machine_arch</name> <operator pos:start="399:22" pos:end="399:22">=</operator> <name pos:start="399:24" pos:end="399:33">ARCH_MAC99</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="403:5" pos:end="403:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="405:5" pos:end="405:26"><expr pos:start="405:5" pos:end="405:25"><call pos:start="405:5" pos:end="405:25"><name pos:start="405:5" pos:end="405:16">pci_vga_init</name><argument_list pos:start="405:17" pos:end="405:25">(<argument pos:start="405:18" pos:end="405:24"><expr pos:start="405:18" pos:end="405:24"><name pos:start="405:18" pos:end="405:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="409:5" pos:end="411:70"><expr pos:start="409:5" pos:end="411:69"><name pos:start="409:5" pos:end="409:12">escc_mem</name> <operator pos:start="409:14" pos:end="409:14">=</operator> <call pos:start="409:16" pos:end="411:69"><name pos:start="409:16" pos:end="409:24">escc_init</name><argument_list pos:start="409:25" pos:end="411:69">(<argument pos:start="409:26" pos:end="409:26"><expr pos:start="409:26" pos:end="409:26"><literal type="number" pos:start="409:26" pos:end="409:26">0</literal></expr></argument>, <argument pos:start="409:29" pos:end="409:37"><expr pos:start="409:29" pos:end="409:37"><name pos:start="409:29" pos:end="409:37"><name pos:start="409:29" pos:end="409:31">pic</name><index pos:start="409:32" pos:end="409:37">[<expr pos:start="409:33" pos:end="409:36"><literal type="number" pos:start="409:33" pos:end="409:36">0x25</literal></expr>]</index></name></expr></argument>, <argument pos:start="409:40" pos:end="409:48"><expr pos:start="409:40" pos:end="409:48"><name pos:start="409:40" pos:end="409:48"><name pos:start="409:40" pos:end="409:42">pic</name><index pos:start="409:43" pos:end="409:48">[<expr pos:start="409:44" pos:end="409:47"><literal type="number" pos:start="409:44" pos:end="409:47">0x24</literal></expr>]</index></name></expr></argument>,

                         <argument pos:start="411:26" pos:end="411:38"><expr pos:start="411:26" pos:end="411:38"><name pos:start="411:26" pos:end="411:38"><name pos:start="411:26" pos:end="411:35">serial_hds</name><index pos:start="411:36" pos:end="411:38">[<expr pos:start="411:37" pos:end="411:37"><literal type="number" pos:start="411:37" pos:end="411:37">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="411:41" pos:end="411:53"><expr pos:start="411:41" pos:end="411:53"><name pos:start="411:41" pos:end="411:53"><name pos:start="411:41" pos:end="411:50">serial_hds</name><index pos:start="411:51" pos:end="411:53">[<expr pos:start="411:52" pos:end="411:52"><literal type="number" pos:start="411:52" pos:end="411:52">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="411:56" pos:end="411:65"><expr pos:start="411:56" pos:end="411:65"><name pos:start="411:56" pos:end="411:65">ESCC_CLOCK</name></expr></argument>, <argument pos:start="411:68" pos:end="411:68"><expr pos:start="411:68" pos:end="411:68"><literal type="number" pos:start="411:68" pos:end="411:68">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="413:5" pos:end="415:72"><expr pos:start="413:5" pos:end="415:71"><call pos:start="413:5" pos:end="415:71"><name pos:start="413:5" pos:end="413:28">memory_region_init_alias</name><argument_list pos:start="413:29" pos:end="415:71">(<argument pos:start="413:30" pos:end="413:37"><expr pos:start="413:30" pos:end="413:37"><name pos:start="413:30" pos:end="413:37">escc_bar</name></expr></argument>, <argument pos:start="413:40" pos:end="413:49"><expr pos:start="413:40" pos:end="413:49"><literal type="string" pos:start="413:40" pos:end="413:49">"escc-bar"</literal></expr></argument>,

                             <argument pos:start="415:30" pos:end="415:37"><expr pos:start="415:30" pos:end="415:37"><name pos:start="415:30" pos:end="415:37">escc_mem</name></expr></argument>, <argument pos:start="415:40" pos:end="415:40"><expr pos:start="415:40" pos:end="415:40"><literal type="number" pos:start="415:40" pos:end="415:40">0</literal></expr></argument>, <argument pos:start="415:43" pos:end="415:70"><expr pos:start="415:43" pos:end="415:70"><call pos:start="415:43" pos:end="415:70"><name pos:start="415:43" pos:end="415:60">memory_region_size</name><argument_list pos:start="415:61" pos:end="415:70">(<argument pos:start="415:62" pos:end="415:69"><expr pos:start="415:62" pos:end="415:69"><name pos:start="415:62" pos:end="415:69">escc_mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="419:5" pos:end="421:60">for<control pos:start="419:8" pos:end="419:32">(<init pos:start="419:9" pos:end="419:14"><expr pos:start="419:9" pos:end="419:13"><name pos:start="419:9" pos:end="419:9">i</name> <operator pos:start="419:11" pos:end="419:11">=</operator> <literal type="number" pos:start="419:13" pos:end="419:13">0</literal></expr>;</init> <condition pos:start="419:16" pos:end="419:27"><expr pos:start="419:16" pos:end="419:26"><name pos:start="419:16" pos:end="419:16">i</name> <operator pos:start="419:18" pos:end="419:18">&lt;</operator> <name pos:start="419:20" pos:end="419:26">nb_nics</name></expr>;</condition> <incr pos:start="419:29" pos:end="419:31"><expr pos:start="419:29" pos:end="419:31"><name pos:start="419:29" pos:end="419:29">i</name><operator pos:start="419:30" pos:end="419:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="421:9" pos:end="421:60"><block_content pos:start="421:9" pos:end="421:60">

        <expr_stmt pos:start="421:9" pos:end="421:60"><expr pos:start="421:9" pos:end="421:59"><call pos:start="421:9" pos:end="421:59"><name pos:start="421:9" pos:end="421:27">pci_nic_init_nofail</name><argument_list pos:start="421:28" pos:end="421:59">(<argument pos:start="421:29" pos:end="421:40"><expr pos:start="421:29" pos:end="421:40"><operator pos:start="421:29" pos:end="421:29">&amp;</operator><name pos:start="421:30" pos:end="421:40"><name pos:start="421:30" pos:end="421:37">nd_table</name><index pos:start="421:38" pos:end="421:40">[<expr pos:start="421:39" pos:end="421:39"><name pos:start="421:39" pos:end="421:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="421:43" pos:end="421:52"><expr pos:start="421:43" pos:end="421:52"><literal type="string" pos:start="421:43" pos:end="421:52">"ne2k_pci"</literal></expr></argument>, <argument pos:start="421:55" pos:end="421:58"><expr pos:start="421:55" pos:end="421:58"><name pos:start="421:55" pos:end="421:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="425:5" pos:end="425:35"><expr pos:start="425:5" pos:end="425:34"><call pos:start="425:5" pos:end="425:34"><name pos:start="425:5" pos:end="425:17">ide_drive_get</name><argument_list pos:start="425:18" pos:end="425:34">(<argument pos:start="425:19" pos:end="425:20"><expr pos:start="425:19" pos:end="425:20"><name pos:start="425:19" pos:end="425:20">hd</name></expr></argument>, <argument pos:start="425:23" pos:end="425:33"><expr pos:start="425:23" pos:end="425:33"><name pos:start="425:23" pos:end="425:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="427:5" pos:end="427:35"><expr pos:start="427:5" pos:end="427:34"><name pos:start="427:5" pos:end="427:9">dbdma</name> <operator pos:start="427:11" pos:end="427:11">=</operator> <call pos:start="427:13" pos:end="427:34"><name pos:start="427:13" pos:end="427:22">DBDMA_init</name><argument_list pos:start="427:23" pos:end="427:34">(<argument pos:start="427:24" pos:end="427:33"><expr pos:start="427:24" pos:end="427:33"><operator pos:start="427:24" pos:end="427:24">&amp;</operator><name pos:start="427:25" pos:end="427:33">dbdma_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="431:5" pos:end="431:60">/* We only emulate 2 out of 3 IDE controllers for now */</comment>

    <expr_stmt pos:start="433:5" pos:end="433:22"><expr pos:start="433:5" pos:end="433:21"><name pos:start="433:5" pos:end="433:14"><name pos:start="433:5" pos:end="433:11">ide_mem</name><index pos:start="433:12" pos:end="433:14">[<expr pos:start="433:13" pos:end="433:13"><literal type="number" pos:start="433:13" pos:end="433:13">0</literal></expr>]</index></name> <operator pos:start="433:16" pos:end="433:16">=</operator> <name pos:start="433:18" pos:end="433:21">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="435:5" pos:end="435:70"><expr pos:start="435:5" pos:end="435:69"><name pos:start="435:5" pos:end="435:14"><name pos:start="435:5" pos:end="435:11">ide_mem</name><index pos:start="435:12" pos:end="435:14">[<expr pos:start="435:13" pos:end="435:13"><literal type="number" pos:start="435:13" pos:end="435:13">1</literal></expr>]</index></name> <operator pos:start="435:16" pos:end="435:16">=</operator> <call pos:start="435:18" pos:end="435:69"><name pos:start="435:18" pos:end="435:30">pmac_ide_init</name><argument_list pos:start="435:31" pos:end="435:69">(<argument pos:start="435:32" pos:end="435:33"><expr pos:start="435:32" pos:end="435:33"><name pos:start="435:32" pos:end="435:33">hd</name></expr></argument>, <argument pos:start="435:36" pos:end="435:44"><expr pos:start="435:36" pos:end="435:44"><name pos:start="435:36" pos:end="435:44"><name pos:start="435:36" pos:end="435:38">pic</name><index pos:start="435:39" pos:end="435:44">[<expr pos:start="435:40" pos:end="435:43"><literal type="number" pos:start="435:40" pos:end="435:43">0x0d</literal></expr>]</index></name></expr></argument>, <argument pos:start="435:47" pos:end="435:51"><expr pos:start="435:47" pos:end="435:51"><name pos:start="435:47" pos:end="435:51">dbdma</name></expr></argument>, <argument pos:start="435:54" pos:end="435:57"><expr pos:start="435:54" pos:end="435:57"><literal type="number" pos:start="435:54" pos:end="435:57">0x16</literal></expr></argument>, <argument pos:start="435:60" pos:end="435:68"><expr pos:start="435:60" pos:end="435:68"><name pos:start="435:60" pos:end="435:68"><name pos:start="435:60" pos:end="435:62">pic</name><index pos:start="435:63" pos:end="435:68">[<expr pos:start="435:64" pos:end="435:67"><literal type="number" pos:start="435:64" pos:end="435:67">0x02</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="437:5" pos:end="437:85"><expr pos:start="437:5" pos:end="437:84"><name pos:start="437:5" pos:end="437:14"><name pos:start="437:5" pos:end="437:11">ide_mem</name><index pos:start="437:12" pos:end="437:14">[<expr pos:start="437:13" pos:end="437:13"><literal type="number" pos:start="437:13" pos:end="437:13">2</literal></expr>]</index></name> <operator pos:start="437:16" pos:end="437:16">=</operator> <call pos:start="437:18" pos:end="437:84"><name pos:start="437:18" pos:end="437:30">pmac_ide_init</name><argument_list pos:start="437:31" pos:end="437:84">(<argument pos:start="437:32" pos:end="437:48"><expr pos:start="437:32" pos:end="437:48"><operator pos:start="437:32" pos:end="437:32">&amp;</operator><name pos:start="437:33" pos:end="437:48"><name pos:start="437:33" pos:end="437:34">hd</name><index pos:start="437:35" pos:end="437:48">[<expr pos:start="437:36" pos:end="437:47"><name pos:start="437:36" pos:end="437:47">MAX_IDE_DEVS</name></expr>]</index></name></expr></argument>, <argument pos:start="437:51" pos:end="437:59"><expr pos:start="437:51" pos:end="437:59"><name pos:start="437:51" pos:end="437:59"><name pos:start="437:51" pos:end="437:53">pic</name><index pos:start="437:54" pos:end="437:59">[<expr pos:start="437:55" pos:end="437:58"><literal type="number" pos:start="437:55" pos:end="437:58">0x0e</literal></expr>]</index></name></expr></argument>, <argument pos:start="437:62" pos:end="437:66"><expr pos:start="437:62" pos:end="437:66"><name pos:start="437:62" pos:end="437:66">dbdma</name></expr></argument>, <argument pos:start="437:69" pos:end="437:72"><expr pos:start="437:69" pos:end="437:72"><literal type="number" pos:start="437:69" pos:end="437:72">0x1a</literal></expr></argument>, <argument pos:start="437:75" pos:end="437:83"><expr pos:start="437:75" pos:end="437:83"><name pos:start="437:75" pos:end="437:83"><name pos:start="437:75" pos:end="437:77">pic</name><index pos:start="437:78" pos:end="437:83">[<expr pos:start="437:79" pos:end="437:82"><literal type="number" pos:start="437:79" pos:end="437:82">0x02</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="441:5" pos:end="441:36"><expr pos:start="441:5" pos:end="441:35"><call pos:start="441:5" pos:end="441:35"><name pos:start="441:5" pos:end="441:13">cuda_init</name><argument_list pos:start="441:14" pos:end="441:35">(<argument pos:start="441:15" pos:end="441:23"><expr pos:start="441:15" pos:end="441:23"><operator pos:start="441:15" pos:end="441:15">&amp;</operator><name pos:start="441:16" pos:end="441:23">cuda_mem</name></expr></argument>, <argument pos:start="441:26" pos:end="441:34"><expr pos:start="441:26" pos:end="441:34"><name pos:start="441:26" pos:end="441:34"><name pos:start="441:26" pos:end="441:28">pic</name><index pos:start="441:29" pos:end="441:34">[<expr pos:start="441:30" pos:end="441:33"><literal type="number" pos:start="441:30" pos:end="441:33">0x19</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="445:5" pos:end="445:27"><expr pos:start="445:5" pos:end="445:26"><call pos:start="445:5" pos:end="445:26"><name pos:start="445:5" pos:end="445:16">adb_kbd_init</name><argument_list pos:start="445:17" pos:end="445:26">(<argument pos:start="445:18" pos:end="445:25"><expr pos:start="445:18" pos:end="445:25"><operator pos:start="445:18" pos:end="445:18">&amp;</operator><name pos:start="445:19" pos:end="445:25">adb_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="447:5" pos:end="447:29"><expr pos:start="447:5" pos:end="447:28"><call pos:start="447:5" pos:end="447:28"><name pos:start="447:5" pos:end="447:18">adb_mouse_init</name><argument_list pos:start="447:19" pos:end="447:28">(<argument pos:start="447:20" pos:end="447:27"><expr pos:start="447:20" pos:end="447:27"><operator pos:start="447:20" pos:end="447:20">&amp;</operator><name pos:start="447:21" pos:end="447:27">adb_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="451:5" pos:end="453:64"><expr pos:start="451:5" pos:end="453:63"><call pos:start="451:5" pos:end="453:63"><name pos:start="451:5" pos:end="451:14">macio_init</name><argument_list pos:start="451:15" pos:end="453:63">(<argument pos:start="451:16" pos:end="451:22"><expr pos:start="451:16" pos:end="451:22"><name pos:start="451:16" pos:end="451:22">pci_bus</name></expr></argument>, <argument pos:start="451:25" pos:end="451:54"><expr pos:start="451:25" pos:end="451:54"><name pos:start="451:25" pos:end="451:54">PCI_DEVICE_ID_APPLE_UNI_N_KEYL</name></expr></argument>, <argument pos:start="451:57" pos:end="451:57"><expr pos:start="451:57" pos:end="451:57"><literal type="number" pos:start="451:57" pos:end="451:57">0</literal></expr></argument>, <argument pos:start="451:60" pos:end="451:66"><expr pos:start="451:60" pos:end="451:66"><name pos:start="451:60" pos:end="451:66">pic_mem</name></expr></argument>,

               <argument pos:start="453:16" pos:end="453:24"><expr pos:start="453:16" pos:end="453:24"><name pos:start="453:16" pos:end="453:24">dbdma_mem</name></expr></argument>, <argument pos:start="453:27" pos:end="453:34"><expr pos:start="453:27" pos:end="453:34"><name pos:start="453:27" pos:end="453:34">cuda_mem</name></expr></argument>, <argument pos:start="453:37" pos:end="453:40"><expr pos:start="453:37" pos:end="453:40"><name pos:start="453:37" pos:end="453:40">NULL</name></expr></argument>, <argument pos:start="453:43" pos:end="453:43"><expr pos:start="453:43" pos:end="453:43"><literal type="number" pos:start="453:43" pos:end="453:43">3</literal></expr></argument>, <argument pos:start="453:46" pos:end="453:52"><expr pos:start="453:46" pos:end="453:52"><name pos:start="453:46" pos:end="453:52">ide_mem</name></expr></argument>, <argument pos:start="453:55" pos:end="453:62"><expr pos:start="453:55" pos:end="453:62"><name pos:start="453:55" pos:end="453:62">escc_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="457:5" pos:end="473:5"><if pos:start="457:5" pos:end="473:5">if <condition pos:start="457:8" pos:end="457:51">(<expr pos:start="457:9" pos:end="457:50"><call pos:start="457:9" pos:end="457:50"><name pos:start="457:9" pos:end="457:19">usb_enabled</name><argument_list pos:start="457:20" pos:end="457:50">(<argument pos:start="457:21" pos:end="457:49"><expr pos:start="457:21" pos:end="457:49"><name pos:start="457:21" pos:end="457:32">machine_arch</name> <operator pos:start="457:34" pos:end="457:35">==</operator> <name pos:start="457:37" pos:end="457:49">ARCH_MAC99_U3</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="457:53" pos:end="473:5">{<block_content pos:start="459:9" pos:end="471:9">

        <expr_stmt pos:start="459:9" pos:end="459:51"><expr pos:start="459:9" pos:end="459:50"><call pos:start="459:9" pos:end="459:50"><name pos:start="459:9" pos:end="459:25">pci_create_simple</name><argument_list pos:start="459:26" pos:end="459:50">(<argument pos:start="459:27" pos:end="459:33"><expr pos:start="459:27" pos:end="459:33"><name pos:start="459:27" pos:end="459:33">pci_bus</name></expr></argument>, <argument pos:start="459:36" pos:end="459:37"><expr pos:start="459:36" pos:end="459:37"><operator pos:start="459:36" pos:end="459:36">-</operator><literal type="number" pos:start="459:37" pos:end="459:37">1</literal></expr></argument>, <argument pos:start="459:40" pos:end="459:49"><expr pos:start="459:40" pos:end="459:49"><literal type="string" pos:start="459:40" pos:end="459:49">"pci-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="461:9" pos:end="463:19">/* U3 needs to use USB for input because Linux doesn't support via-cuda

        on PPC64 */</comment>

        <if_stmt pos:start="465:9" pos:end="471:9"><if pos:start="465:9" pos:end="471:9">if <condition pos:start="465:12" pos:end="465:42">(<expr pos:start="465:13" pos:end="465:41"><name pos:start="465:13" pos:end="465:24">machine_arch</name> <operator pos:start="465:26" pos:end="465:27">==</operator> <name pos:start="465:29" pos:end="465:41">ARCH_MAC99_U3</name></expr>)</condition> <block pos:start="465:44" pos:end="471:9">{<block_content pos:start="467:13" pos:end="469:38">

            <expr_stmt pos:start="467:13" pos:end="467:41"><expr pos:start="467:13" pos:end="467:40"><call pos:start="467:13" pos:end="467:40"><name pos:start="467:13" pos:end="467:28">usbdevice_create</name><argument_list pos:start="467:29" pos:end="467:40">(<argument pos:start="467:30" pos:end="467:39"><expr pos:start="467:30" pos:end="467:39"><literal type="string" pos:start="467:30" pos:end="467:39">"keyboard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="469:13" pos:end="469:38"><expr pos:start="469:13" pos:end="469:37"><call pos:start="469:13" pos:end="469:37"><name pos:start="469:13" pos:end="469:28">usbdevice_create</name><argument_list pos:start="469:29" pos:end="469:37">(<argument pos:start="469:30" pos:end="469:36"><expr pos:start="469:30" pos:end="469:36"><literal type="string" pos:start="469:30" pos:end="469:36">"mouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="477:5" pos:end="479:27"><if pos:start="477:5" pos:end="479:27">if <condition pos:start="477:8" pos:end="477:73">(<expr pos:start="477:9" pos:end="477:72"><name pos:start="477:9" pos:end="477:21">graphic_depth</name> <operator pos:start="477:23" pos:end="477:24">!=</operator> <literal type="number" pos:start="477:26" pos:end="477:27">15</literal> <operator pos:start="477:29" pos:end="477:30">&amp;&amp;</operator> <name pos:start="477:32" pos:end="477:44">graphic_depth</name> <operator pos:start="477:46" pos:end="477:47">!=</operator> <literal type="number" pos:start="477:49" pos:end="477:50">32</literal> <operator pos:start="477:52" pos:end="477:53">&amp;&amp;</operator> <name pos:start="477:55" pos:end="477:67">graphic_depth</name> <operator pos:start="477:69" pos:end="477:70">!=</operator> <literal type="number" pos:start="477:72" pos:end="477:72">8</literal></expr>)</condition><block type="pseudo" pos:start="479:9" pos:end="479:27"><block_content pos:start="479:9" pos:end="479:27">

        <expr_stmt pos:start="479:9" pos:end="479:27"><expr pos:start="479:9" pos:end="479:26"><name pos:start="479:9" pos:end="479:21">graphic_depth</name> <operator pos:start="479:23" pos:end="479:23">=</operator> <literal type="number" pos:start="479:25" pos:end="479:26">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="483:5" pos:end="483:63">/* The NewWorld NVRAM is not located in the MacIO device */</comment>

    <expr_stmt pos:start="485:5" pos:end="485:38"><expr pos:start="485:5" pos:end="485:37"><name pos:start="485:5" pos:end="485:7">nvr</name> <operator pos:start="485:9" pos:end="485:9">=</operator> <call pos:start="485:11" pos:end="485:37"><name pos:start="485:11" pos:end="485:26">macio_nvram_init</name><argument_list pos:start="485:27" pos:end="485:37">(<argument pos:start="485:28" pos:end="485:33"><expr pos:start="485:28" pos:end="485:33"><literal type="number" pos:start="485:28" pos:end="485:33">0x2000</literal></expr></argument>, <argument pos:start="485:36" pos:end="485:36"><expr pos:start="485:36" pos:end="485:36"><literal type="number" pos:start="485:36" pos:end="485:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="487:5" pos:end="487:45"><expr pos:start="487:5" pos:end="487:44"><call pos:start="487:5" pos:end="487:44"><name pos:start="487:5" pos:end="487:31">pmac_format_nvram_partition</name><argument_list pos:start="487:32" pos:end="487:44">(<argument pos:start="487:33" pos:end="487:35"><expr pos:start="487:33" pos:end="487:35"><name pos:start="487:33" pos:end="487:35">nvr</name></expr></argument>, <argument pos:start="487:38" pos:end="487:43"><expr pos:start="487:38" pos:end="487:43"><literal type="number" pos:start="487:38" pos:end="487:43">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="489:5" pos:end="489:64"><expr pos:start="489:5" pos:end="489:63"><call pos:start="489:5" pos:end="489:63"><name pos:start="489:5" pos:end="489:25">macio_nvram_setup_bar</name><argument_list pos:start="489:26" pos:end="489:63">(<argument pos:start="489:27" pos:end="489:29"><expr pos:start="489:27" pos:end="489:29"><name pos:start="489:27" pos:end="489:29">nvr</name></expr></argument>, <argument pos:start="489:32" pos:end="489:50"><expr pos:start="489:32" pos:end="489:50"><call pos:start="489:32" pos:end="489:50"><name pos:start="489:32" pos:end="489:48">get_system_memory</name><argument_list pos:start="489:49" pos:end="489:50">()</argument_list></call></expr></argument>, <argument pos:start="489:53" pos:end="489:62"><expr pos:start="489:53" pos:end="489:62"><literal type="number" pos:start="489:53" pos:end="489:62">0xFFF04000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="491:5" pos:end="491:42">/* No PCI init: the BIOS will do it */</comment>



    <expr_stmt pos:start="495:5" pos:end="495:55"><expr pos:start="495:5" pos:end="495:54"><name pos:start="495:5" pos:end="495:10">fw_cfg</name> <operator pos:start="495:12" pos:end="495:12">=</operator> <call pos:start="495:14" pos:end="495:54"><name pos:start="495:14" pos:end="495:24">fw_cfg_init</name><argument_list pos:start="495:25" pos:end="495:54">(<argument pos:start="495:26" pos:end="495:26"><expr pos:start="495:26" pos:end="495:26"><literal type="number" pos:start="495:26" pos:end="495:26">0</literal></expr></argument>, <argument pos:start="495:29" pos:end="495:29"><expr pos:start="495:29" pos:end="495:29"><literal type="number" pos:start="495:29" pos:end="495:29">0</literal></expr></argument>, <argument pos:start="495:32" pos:end="495:39"><expr pos:start="495:32" pos:end="495:39"><name pos:start="495:32" pos:end="495:39">CFG_ADDR</name></expr></argument>, <argument pos:start="495:42" pos:end="495:53"><expr pos:start="495:42" pos:end="495:53"><name pos:start="495:42" pos:end="495:49">CFG_ADDR</name> <operator pos:start="495:51" pos:end="495:51">+</operator> <literal type="number" pos:start="495:53" pos:end="495:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="497:5" pos:end="497:41"><expr pos:start="497:5" pos:end="497:40"><call pos:start="497:5" pos:end="497:40"><name pos:start="497:5" pos:end="497:18">fw_cfg_add_i32</name><argument_list pos:start="497:19" pos:end="497:40">(<argument pos:start="497:20" pos:end="497:25"><expr pos:start="497:20" pos:end="497:25"><name pos:start="497:20" pos:end="497:25">fw_cfg</name></expr></argument>, <argument pos:start="497:28" pos:end="497:36"><expr pos:start="497:28" pos:end="497:36"><name pos:start="497:28" pos:end="497:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="497:39" pos:end="497:39"><expr pos:start="497:39" pos:end="497:39"><literal type="number" pos:start="497:39" pos:end="497:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="499:5" pos:end="499:64"><expr pos:start="499:5" pos:end="499:63"><call pos:start="499:5" pos:end="499:63"><name pos:start="499:5" pos:end="499:18">fw_cfg_add_i64</name><argument_list pos:start="499:19" pos:end="499:63">(<argument pos:start="499:20" pos:end="499:25"><expr pos:start="499:20" pos:end="499:25"><name pos:start="499:20" pos:end="499:25">fw_cfg</name></expr></argument>, <argument pos:start="499:28" pos:end="499:42"><expr pos:start="499:28" pos:end="499:42"><name pos:start="499:28" pos:end="499:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="499:45" pos:end="499:62"><expr pos:start="499:45" pos:end="499:62"><operator pos:start="499:45" pos:end="499:45">(</operator><name pos:start="499:46" pos:end="499:53">uint64_t</name><operator pos:start="499:54" pos:end="499:54">)</operator><name pos:start="499:55" pos:end="499:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="501:5" pos:end="501:60"><expr pos:start="501:5" pos:end="501:59"><call pos:start="501:5" pos:end="501:59"><name pos:start="501:5" pos:end="501:18">fw_cfg_add_i16</name><argument_list pos:start="501:19" pos:end="501:59">(<argument pos:start="501:20" pos:end="501:25"><expr pos:start="501:20" pos:end="501:25"><name pos:start="501:20" pos:end="501:25">fw_cfg</name></expr></argument>, <argument pos:start="501:28" pos:end="501:44"><expr pos:start="501:28" pos:end="501:44"><name pos:start="501:28" pos:end="501:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="501:47" pos:end="501:58"><expr pos:start="501:47" pos:end="501:58"><name pos:start="501:47" pos:end="501:58">machine_arch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="503:5" pos:end="503:60"><expr pos:start="503:5" pos:end="503:59"><call pos:start="503:5" pos:end="503:59"><name pos:start="503:5" pos:end="503:18">fw_cfg_add_i32</name><argument_list pos:start="503:19" pos:end="503:59">(<argument pos:start="503:20" pos:end="503:25"><expr pos:start="503:20" pos:end="503:25"><name pos:start="503:20" pos:end="503:25">fw_cfg</name></expr></argument>, <argument pos:start="503:28" pos:end="503:45"><expr pos:start="503:28" pos:end="503:45"><name pos:start="503:28" pos:end="503:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="503:48" pos:end="503:58"><expr pos:start="503:48" pos:end="503:58"><name pos:start="503:48" pos:end="503:58">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="505:5" pos:end="505:60"><expr pos:start="505:5" pos:end="505:59"><call pos:start="505:5" pos:end="505:59"><name pos:start="505:5" pos:end="505:18">fw_cfg_add_i32</name><argument_list pos:start="505:19" pos:end="505:59">(<argument pos:start="505:20" pos:end="505:25"><expr pos:start="505:20" pos:end="505:25"><name pos:start="505:20" pos:end="505:25">fw_cfg</name></expr></argument>, <argument pos:start="505:28" pos:end="505:45"><expr pos:start="505:28" pos:end="505:45"><name pos:start="505:28" pos:end="505:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="505:48" pos:end="505:58"><expr pos:start="505:48" pos:end="505:58"><name pos:start="505:48" pos:end="505:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="507:5" pos:end="517:5"><if pos:start="507:5" pos:end="513:5">if <condition pos:start="507:8" pos:end="507:23">(<expr pos:start="507:9" pos:end="507:22"><name pos:start="507:9" pos:end="507:22">kernel_cmdline</name></expr>)</condition> <block pos:start="507:25" pos:end="513:5">{<block_content pos:start="509:9" pos:end="511:84">

        <expr_stmt pos:start="509:9" pos:end="509:68"><expr pos:start="509:9" pos:end="509:67"><call pos:start="509:9" pos:end="509:67"><name pos:start="509:9" pos:end="509:22">fw_cfg_add_i32</name><argument_list pos:start="509:23" pos:end="509:67">(<argument pos:start="509:24" pos:end="509:29"><expr pos:start="509:24" pos:end="509:29"><name pos:start="509:24" pos:end="509:29">fw_cfg</name></expr></argument>, <argument pos:start="509:32" pos:end="509:52"><expr pos:start="509:32" pos:end="509:52"><name pos:start="509:32" pos:end="509:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="509:55" pos:end="509:66"><expr pos:start="509:55" pos:end="509:66"><name pos:start="509:55" pos:end="509:66">cmdline_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="511:9" pos:end="511:84"><expr pos:start="511:9" pos:end="511:83"><call pos:start="511:9" pos:end="511:83"><name pos:start="511:9" pos:end="511:24">pstrcpy_targphys</name><argument_list pos:start="511:25" pos:end="511:83">(<argument pos:start="511:26" pos:end="511:34"><expr pos:start="511:26" pos:end="511:34"><literal type="string" pos:start="511:26" pos:end="511:34">"cmdline"</literal></expr></argument>, <argument pos:start="511:37" pos:end="511:48"><expr pos:start="511:37" pos:end="511:48"><name pos:start="511:37" pos:end="511:48">cmdline_base</name></expr></argument>, <argument pos:start="511:51" pos:end="511:66"><expr pos:start="511:51" pos:end="511:66"><name pos:start="511:51" pos:end="511:66">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="511:69" pos:end="511:82"><expr pos:start="511:69" pos:end="511:82"><name pos:start="511:69" pos:end="511:82">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="513:7" pos:end="517:5">else <block pos:start="513:12" pos:end="517:5">{<block_content pos:start="515:9" pos:end="515:57">

        <expr_stmt pos:start="515:9" pos:end="515:57"><expr pos:start="515:9" pos:end="515:56"><call pos:start="515:9" pos:end="515:56"><name pos:start="515:9" pos:end="515:22">fw_cfg_add_i32</name><argument_list pos:start="515:23" pos:end="515:56">(<argument pos:start="515:24" pos:end="515:29"><expr pos:start="515:24" pos:end="515:29"><name pos:start="515:24" pos:end="515:29">fw_cfg</name></expr></argument>, <argument pos:start="515:32" pos:end="515:52"><expr pos:start="515:32" pos:end="515:52"><name pos:start="515:32" pos:end="515:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="515:55" pos:end="515:55"><expr pos:start="515:55" pos:end="515:55"><literal type="number" pos:start="515:55" pos:end="515:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="519:5" pos:end="519:60"><expr pos:start="519:5" pos:end="519:59"><call pos:start="519:5" pos:end="519:59"><name pos:start="519:5" pos:end="519:18">fw_cfg_add_i32</name><argument_list pos:start="519:19" pos:end="519:59">(<argument pos:start="519:20" pos:end="519:25"><expr pos:start="519:20" pos:end="519:25"><name pos:start="519:20" pos:end="519:25">fw_cfg</name></expr></argument>, <argument pos:start="519:28" pos:end="519:45"><expr pos:start="519:28" pos:end="519:45"><name pos:start="519:28" pos:end="519:45">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="519:48" pos:end="519:58"><expr pos:start="519:48" pos:end="519:58"><name pos:start="519:48" pos:end="519:58">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="521:5" pos:end="521:60"><expr pos:start="521:5" pos:end="521:59"><call pos:start="521:5" pos:end="521:59"><name pos:start="521:5" pos:end="521:18">fw_cfg_add_i32</name><argument_list pos:start="521:19" pos:end="521:59">(<argument pos:start="521:20" pos:end="521:25"><expr pos:start="521:20" pos:end="521:25"><name pos:start="521:20" pos:end="521:25">fw_cfg</name></expr></argument>, <argument pos:start="521:28" pos:end="521:45"><expr pos:start="521:28" pos:end="521:45"><name pos:start="521:28" pos:end="521:45">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="521:48" pos:end="521:58"><expr pos:start="521:48" pos:end="521:58"><name pos:start="521:48" pos:end="521:58">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="523:5" pos:end="523:64"><expr pos:start="523:5" pos:end="523:63"><call pos:start="523:5" pos:end="523:63"><name pos:start="523:5" pos:end="523:18">fw_cfg_add_i16</name><argument_list pos:start="523:19" pos:end="523:63">(<argument pos:start="523:20" pos:end="523:25"><expr pos:start="523:20" pos:end="523:25"><name pos:start="523:20" pos:end="523:25">fw_cfg</name></expr></argument>, <argument pos:start="523:28" pos:end="523:45"><expr pos:start="523:28" pos:end="523:45"><name pos:start="523:28" pos:end="523:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="523:48" pos:end="523:62"><expr pos:start="523:48" pos:end="523:62"><name pos:start="523:48" pos:end="523:62">ppc_boot_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="527:5" pos:end="527:60"><expr pos:start="527:5" pos:end="527:59"><call pos:start="527:5" pos:end="527:59"><name pos:start="527:5" pos:end="527:18">fw_cfg_add_i16</name><argument_list pos:start="527:19" pos:end="527:59">(<argument pos:start="527:20" pos:end="527:25"><expr pos:start="527:20" pos:end="527:25"><name pos:start="527:20" pos:end="527:25">fw_cfg</name></expr></argument>, <argument pos:start="527:28" pos:end="527:43"><expr pos:start="527:28" pos:end="527:43"><name pos:start="527:28" pos:end="527:43">FW_CFG_PPC_WIDTH</name></expr></argument>, <argument pos:start="527:46" pos:end="527:58"><expr pos:start="527:46" pos:end="527:58"><name pos:start="527:46" pos:end="527:58">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="529:5" pos:end="529:62"><expr pos:start="529:5" pos:end="529:61"><call pos:start="529:5" pos:end="529:61"><name pos:start="529:5" pos:end="529:18">fw_cfg_add_i16</name><argument_list pos:start="529:19" pos:end="529:61">(<argument pos:start="529:20" pos:end="529:25"><expr pos:start="529:20" pos:end="529:25"><name pos:start="529:20" pos:end="529:25">fw_cfg</name></expr></argument>, <argument pos:start="529:28" pos:end="529:44"><expr pos:start="529:28" pos:end="529:44"><name pos:start="529:28" pos:end="529:44">FW_CFG_PPC_HEIGHT</name></expr></argument>, <argument pos:start="529:47" pos:end="529:60"><expr pos:start="529:47" pos:end="529:60"><name pos:start="529:47" pos:end="529:60">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="531:5" pos:end="531:60"><expr pos:start="531:5" pos:end="531:59"><call pos:start="531:5" pos:end="531:59"><name pos:start="531:5" pos:end="531:18">fw_cfg_add_i16</name><argument_list pos:start="531:19" pos:end="531:59">(<argument pos:start="531:20" pos:end="531:25"><expr pos:start="531:20" pos:end="531:25"><name pos:start="531:20" pos:end="531:25">fw_cfg</name></expr></argument>, <argument pos:start="531:28" pos:end="531:43"><expr pos:start="531:28" pos:end="531:43"><name pos:start="531:28" pos:end="531:43">FW_CFG_PPC_DEPTH</name></expr></argument>, <argument pos:start="531:46" pos:end="531:58"><expr pos:start="531:46" pos:end="531:58"><name pos:start="531:46" pos:end="531:58">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="535:5" pos:end="535:61"><expr pos:start="535:5" pos:end="535:60"><call pos:start="535:5" pos:end="535:60"><name pos:start="535:5" pos:end="535:18">fw_cfg_add_i32</name><argument_list pos:start="535:19" pos:end="535:60">(<argument pos:start="535:20" pos:end="535:25"><expr pos:start="535:20" pos:end="535:25"><name pos:start="535:20" pos:end="535:25">fw_cfg</name></expr></argument>, <argument pos:start="535:28" pos:end="535:44"><expr pos:start="535:28" pos:end="535:44"><name pos:start="535:28" pos:end="535:44">FW_CFG_PPC_IS_KVM</name></expr></argument>, <argument pos:start="535:47" pos:end="535:59"><expr pos:start="535:47" pos:end="535:59"><call pos:start="535:47" pos:end="535:59"><name pos:start="535:47" pos:end="535:57">kvm_enabled</name><argument_list pos:start="535:58" pos:end="535:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="537:5" pos:end="561:5"><if pos:start="537:5" pos:end="557:5">if <condition pos:start="537:8" pos:end="537:22">(<expr pos:start="537:9" pos:end="537:21"><call pos:start="537:9" pos:end="537:21"><name pos:start="537:9" pos:end="537:19">kvm_enabled</name><argument_list pos:start="537:20" pos:end="537:21">()</argument_list></call></expr>)</condition> <block pos:start="537:24" pos:end="557:5">{<block_content pos:start="541:9" pos:end="556:0">

<cpp:ifdef pos:start="539:1" pos:end="539:17">#<cpp:directive pos:start="539:2" pos:end="539:6">ifdef</cpp:directive> <name pos:start="539:8" pos:end="539:17">CONFIG_KVM</name></cpp:ifdef>

        <decl_stmt pos:start="541:9" pos:end="541:27"><decl pos:start="541:9" pos:end="541:26"><type pos:start="541:9" pos:end="541:17"><name pos:start="541:9" pos:end="541:15">uint8_t</name> <modifier pos:start="541:17" pos:end="541:17">*</modifier></type><name pos:start="541:18" pos:end="541:26">hypercall</name></decl>;</decl_stmt>



        <expr_stmt pos:start="545:9" pos:end="545:71"><expr pos:start="545:9" pos:end="545:70"><call pos:start="545:9" pos:end="545:70"><name pos:start="545:9" pos:end="545:22">fw_cfg_add_i32</name><argument_list pos:start="545:23" pos:end="545:70">(<argument pos:start="545:24" pos:end="545:29"><expr pos:start="545:24" pos:end="545:29"><name pos:start="545:24" pos:end="545:29">fw_cfg</name></expr></argument>, <argument pos:start="545:32" pos:end="545:48"><expr pos:start="545:32" pos:end="545:48"><name pos:start="545:32" pos:end="545:48">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="545:51" pos:end="545:69"><expr pos:start="545:51" pos:end="545:69"><call pos:start="545:51" pos:end="545:69"><name pos:start="545:51" pos:end="545:67">kvmppc_get_tbfreq</name><argument_list pos:start="545:68" pos:end="545:69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="547:9" pos:end="547:33"><expr pos:start="547:9" pos:end="547:32"><name pos:start="547:9" pos:end="547:17">hypercall</name> <operator pos:start="547:19" pos:end="547:19">=</operator> <call pos:start="547:21" pos:end="547:32"><name pos:start="547:21" pos:end="547:28">g_malloc</name><argument_list pos:start="547:29" pos:end="547:32">(<argument pos:start="547:30" pos:end="547:31"><expr pos:start="547:30" pos:end="547:31"><literal type="number" pos:start="547:30" pos:end="547:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="549:9" pos:end="549:49"><expr pos:start="549:9" pos:end="549:48"><call pos:start="549:9" pos:end="549:48"><name pos:start="549:9" pos:end="549:28">kvmppc_get_hypercall</name><argument_list pos:start="549:29" pos:end="549:48">(<argument pos:start="549:30" pos:end="549:32"><expr pos:start="549:30" pos:end="549:32"><name pos:start="549:30" pos:end="549:32">env</name></expr></argument>, <argument pos:start="549:35" pos:end="549:43"><expr pos:start="549:35" pos:end="549:43"><name pos:start="549:35" pos:end="549:43">hypercall</name></expr></argument>, <argument pos:start="549:46" pos:end="549:47"><expr pos:start="549:46" pos:end="549:47"><literal type="number" pos:start="549:46" pos:end="549:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="551:9" pos:end="551:67"><expr pos:start="551:9" pos:end="551:66"><call pos:start="551:9" pos:end="551:66"><name pos:start="551:9" pos:end="551:24">fw_cfg_add_bytes</name><argument_list pos:start="551:25" pos:end="551:66">(<argument pos:start="551:26" pos:end="551:31"><expr pos:start="551:26" pos:end="551:31"><name pos:start="551:26" pos:end="551:31">fw_cfg</name></expr></argument>, <argument pos:start="551:34" pos:end="551:50"><expr pos:start="551:34" pos:end="551:50"><name pos:start="551:34" pos:end="551:50">FW_CFG_PPC_KVM_HC</name></expr></argument>, <argument pos:start="551:53" pos:end="551:61"><expr pos:start="551:53" pos:end="551:61"><name pos:start="551:53" pos:end="551:61">hypercall</name></expr></argument>, <argument pos:start="551:64" pos:end="551:65"><expr pos:start="551:64" pos:end="551:65"><literal type="number" pos:start="551:64" pos:end="551:65">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="553:9" pos:end="556:0"><expr pos:start="553:9" pos:end="553:60"><call pos:start="553:9" pos:end="553:60"><name pos:start="553:9" pos:end="553:22">fw_cfg_add_i32</name><argument_list pos:start="553:23" pos:end="553:60">(<argument pos:start="553:24" pos:end="553:29"><expr pos:start="553:24" pos:end="553:29"><name pos:start="553:24" pos:end="553:29">fw_cfg</name></expr></argument>, <argument pos:start="553:32" pos:end="553:49"><expr pos:start="553:32" pos:end="553:49"><name pos:start="553:32" pos:end="553:49">FW_CFG_PPC_KVM_PID</name></expr></argument>, <argument pos:start="553:52" pos:end="553:59"><expr pos:start="553:52" pos:end="553:59"><call pos:start="553:52" pos:end="553:59"><name pos:start="553:52" pos:end="553:57">getpid</name><argument_list pos:start="553:58" pos:end="553:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="555:1" pos:end="555:6">#<cpp:directive pos:start="555:2" pos:end="555:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="557:7" pos:end="561:5">else <block pos:start="557:12" pos:end="561:5">{<block_content pos:start="559:9" pos:end="559:71">

        <expr_stmt pos:start="559:9" pos:end="559:71"><expr pos:start="559:9" pos:end="559:70"><call pos:start="559:9" pos:end="559:70"><name pos:start="559:9" pos:end="559:22">fw_cfg_add_i32</name><argument_list pos:start="559:23" pos:end="559:70">(<argument pos:start="559:24" pos:end="559:29"><expr pos:start="559:24" pos:end="559:29"><name pos:start="559:24" pos:end="559:29">fw_cfg</name></expr></argument>, <argument pos:start="559:32" pos:end="559:48"><expr pos:start="559:32" pos:end="559:48"><name pos:start="559:32" pos:end="559:48">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="559:51" pos:end="559:69"><expr pos:start="559:51" pos:end="559:69"><call pos:start="559:51" pos:end="559:69"><name pos:start="559:51" pos:end="559:67">get_ticks_per_sec</name><argument_list pos:start="559:68" pos:end="559:69">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="565:5" pos:end="565:52"><expr pos:start="565:5" pos:end="565:51"><call pos:start="565:5" pos:end="565:51"><name pos:start="565:5" pos:end="565:26">qemu_register_boot_set</name><argument_list pos:start="565:27" pos:end="565:51">(<argument pos:start="565:28" pos:end="565:42"><expr pos:start="565:28" pos:end="565:42"><name pos:start="565:28" pos:end="565:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="565:45" pos:end="565:50"><expr pos:start="565:45" pos:end="565:50"><name pos:start="565:45" pos:end="565:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
