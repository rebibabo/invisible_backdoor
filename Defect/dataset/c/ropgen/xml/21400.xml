<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21400.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">bdrv_open_driver</name><parameter_list pos:start="1:28" pos:end="5:57">(<parameter pos:start="1:29" pos:end="1:48"><decl pos:start="1:29" pos:end="1:48"><type pos:start="1:29" pos:end="1:48"><name pos:start="1:29" pos:end="1:44">BlockDriverState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:48">bs</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:66"><decl pos:start="1:51" pos:end="1:66"><type pos:start="1:51" pos:end="1:66"><name pos:start="1:51" pos:end="1:61">BlockDriver</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:66">drv</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:49"><decl pos:start="3:29" pos:end="3:49"><type pos:start="3:29" pos:end="3:49"><specifier pos:start="3:29" pos:end="3:33">const</specifier> <name pos:start="3:35" pos:end="3:38">char</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:49">node_name</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:65"><decl pos:start="3:52" pos:end="3:65"><type pos:start="3:52" pos:end="3:65"><name pos:start="3:52" pos:end="3:56">QDict</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:65">options</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:42"><decl pos:start="5:29" pos:end="5:42"><type pos:start="5:29" pos:end="5:42"><name pos:start="5:29" pos:end="5:31">int</name></type> <name pos:start="5:33" pos:end="5:42">open_flags</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:56"><decl pos:start="5:45" pos:end="5:56"><type pos:start="5:45" pos:end="5:56"><name pos:start="5:45" pos:end="5:49">Error</name> <modifier pos:start="5:51" pos:end="5:51">*</modifier><modifier pos:start="5:52" pos:end="5:52">*</modifier></type><name pos:start="5:53" pos:end="5:56">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="125:1">{<block_content pos:start="9:5" pos:end="123:15">

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:53"><expr pos:start="15:5" pos:end="15:52"><call pos:start="15:5" pos:end="15:52"><name pos:start="15:5" pos:end="15:25">bdrv_assign_node_name</name><argument_list pos:start="15:26" pos:end="15:52">(<argument pos:start="15:27" pos:end="15:28"><expr pos:start="15:27" pos:end="15:28"><name pos:start="15:27" pos:end="15:28">bs</name></expr></argument>, <argument pos:start="15:31" pos:end="15:39"><expr pos:start="15:31" pos:end="15:39"><name pos:start="15:31" pos:end="15:39">node_name</name></expr></argument>, <argument pos:start="15:42" pos:end="15:51"><expr pos:start="15:42" pos:end="15:51"><operator pos:start="15:42" pos:end="15:42">&amp;</operator><name pos:start="15:43" pos:end="15:51">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:18">(<expr pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:17">local_err</name></expr>)</condition> <block pos:start="17:20" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:23">

        <expr_stmt pos:start="19:9" pos:end="19:41"><expr pos:start="19:9" pos:end="19:40"><call pos:start="19:9" pos:end="19:40"><name pos:start="19:9" pos:end="19:23">error_propagate</name><argument_list pos:start="19:24" pos:end="19:40">(<argument pos:start="19:25" pos:end="19:28"><expr pos:start="19:25" pos:end="19:28"><name pos:start="19:25" pos:end="19:28">errp</name></expr></argument>, <argument pos:start="19:31" pos:end="19:39"><expr pos:start="19:31" pos:end="19:39"><name pos:start="19:31" pos:end="19:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:23">return <expr pos:start="21:16" pos:end="21:22"><operator pos:start="21:16" pos:end="21:16">-</operator><name pos:start="21:17" pos:end="21:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:18"><expr pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:6">bs</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:11">drv</name></name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:17">drv</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:52"><expr pos:start="29:5" pos:end="29:51"><name pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:6">bs</name><operator pos:start="29:7" pos:end="29:8">-&gt;</operator><name pos:start="29:9" pos:end="29:17">read_only</name></name> <operator pos:start="29:19" pos:end="29:19">=</operator> <operator pos:start="29:21" pos:end="29:21">!</operator><operator pos:start="29:22" pos:end="29:22">(</operator><name pos:start="29:23" pos:end="29:36"><name pos:start="29:23" pos:end="29:24">bs</name><operator pos:start="29:25" pos:end="29:26">-&gt;</operator><name pos:start="29:27" pos:end="29:36">open_flags</name></name> <operator pos:start="29:38" pos:end="29:38">&amp;</operator> <name pos:start="29:40" pos:end="29:50">BDRV_O_RDWR</name><operator pos:start="29:51" pos:end="29:51">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:47"><expr pos:start="31:5" pos:end="31:46"><name pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:6">bs</name><operator pos:start="31:7" pos:end="31:8">-&gt;</operator><name pos:start="31:9" pos:end="31:14">opaque</name></name> <operator pos:start="31:16" pos:end="31:16">=</operator> <call pos:start="31:18" pos:end="31:46"><name pos:start="31:18" pos:end="31:26">g_malloc0</name><argument_list pos:start="31:27" pos:end="31:46">(<argument pos:start="31:28" pos:end="31:45"><expr pos:start="31:28" pos:end="31:45"><name pos:start="31:28" pos:end="31:45"><name pos:start="31:28" pos:end="31:30">drv</name><operator pos:start="31:31" pos:end="31:32">-&gt;</operator><name pos:start="31:33" pos:end="31:45">instance_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="49:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:28">(<expr pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:11">drv</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:27">bdrv_file_open</name></name></expr>)</condition> <block pos:start="35:30" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:71">

        <expr_stmt pos:start="37:9" pos:end="37:61"><expr pos:start="37:9" pos:end="37:60"><call pos:start="37:9" pos:end="37:60"><name pos:start="37:9" pos:end="37:14">assert</name><argument_list pos:start="37:15" pos:end="37:60">(<argument pos:start="37:16" pos:end="37:59"><expr pos:start="37:16" pos:end="37:59"><operator pos:start="37:16" pos:end="37:16">!</operator><name pos:start="37:17" pos:end="37:40"><name pos:start="37:17" pos:end="37:19">drv</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:40">bdrv_needs_filename</name></name> <operator pos:start="37:42" pos:end="37:43">||</operator> <name pos:start="37:45" pos:end="37:59"><name pos:start="37:45" pos:end="37:46">bs</name><operator pos:start="37:47" pos:end="37:48">-&gt;</operator><name pos:start="37:49" pos:end="37:56">filename</name><index pos:start="37:57" pos:end="37:59">[<expr pos:start="37:58" pos:end="37:58"><literal type="number" pos:start="37:58" pos:end="37:58">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:71"><expr pos:start="39:9" pos:end="39:70"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:70"><name pos:start="39:15" pos:end="39:33"><name pos:start="39:15" pos:end="39:17">drv</name><operator pos:start="39:18" pos:end="39:19">-&gt;</operator><name pos:start="39:20" pos:end="39:33">bdrv_file_open</name></name><argument_list pos:start="39:34" pos:end="39:70">(<argument pos:start="39:35" pos:end="39:36"><expr pos:start="39:35" pos:end="39:36"><name pos:start="39:35" pos:end="39:36">bs</name></expr></argument>, <argument pos:start="39:39" pos:end="39:45"><expr pos:start="39:39" pos:end="39:45"><name pos:start="39:39" pos:end="39:45">options</name></expr></argument>, <argument pos:start="39:48" pos:end="39:57"><expr pos:start="39:48" pos:end="39:57"><name pos:start="39:48" pos:end="39:57">open_flags</name></expr></argument>, <argument pos:start="39:60" pos:end="39:69"><expr pos:start="39:60" pos:end="39:69"><operator pos:start="39:60" pos:end="39:60">&amp;</operator><name pos:start="39:61" pos:end="39:69">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="41:7" pos:end="45:5">else if <condition pos:start="41:15" pos:end="41:30">(<expr pos:start="41:16" pos:end="41:29"><name pos:start="41:16" pos:end="41:29"><name pos:start="41:16" pos:end="41:18">drv</name><operator pos:start="41:19" pos:end="41:20">-&gt;</operator><name pos:start="41:21" pos:end="41:29">bdrv_open</name></name></expr>)</condition> <block pos:start="41:32" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:66">

        <expr_stmt pos:start="43:9" pos:end="43:66"><expr pos:start="43:9" pos:end="43:65"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:65"><name pos:start="43:15" pos:end="43:28"><name pos:start="43:15" pos:end="43:17">drv</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:28">bdrv_open</name></name><argument_list pos:start="43:29" pos:end="43:65">(<argument pos:start="43:30" pos:end="43:31"><expr pos:start="43:30" pos:end="43:31"><name pos:start="43:30" pos:end="43:31">bs</name></expr></argument>, <argument pos:start="43:34" pos:end="43:40"><expr pos:start="43:34" pos:end="43:40"><name pos:start="43:34" pos:end="43:40">options</name></expr></argument>, <argument pos:start="43:43" pos:end="43:52"><expr pos:start="43:43" pos:end="43:52"><name pos:start="43:43" pos:end="43:52">open_flags</name></expr></argument>, <argument pos:start="43:55" pos:end="43:64"><expr pos:start="43:55" pos:end="43:64"><operator pos:start="43:55" pos:end="43:55">&amp;</operator><name pos:start="43:56" pos:end="43:64">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="49:5">else <block pos:start="45:12" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:16">

        <expr_stmt pos:start="47:9" pos:end="47:16"><expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="53:5" pos:end="71:5"><if pos:start="53:5" pos:end="71:5">if <condition pos:start="53:8" pos:end="53:16">(<expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">&lt;</operator> <literal type="number" pos:start="53:15" pos:end="53:15">0</literal></expr>)</condition> <block pos:start="53:18" pos:end="71:5">{<block_content pos:start="55:9" pos:end="69:27">

        <if_stmt pos:start="55:9" pos:end="67:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:22">(<expr pos:start="55:13" pos:end="55:21"><name pos:start="55:13" pos:end="55:21">local_err</name></expr>)</condition> <block pos:start="55:24" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:45">

            <expr_stmt pos:start="57:13" pos:end="57:45"><expr pos:start="57:13" pos:end="57:44"><call pos:start="57:13" pos:end="57:44"><name pos:start="57:13" pos:end="57:27">error_propagate</name><argument_list pos:start="57:28" pos:end="57:44">(<argument pos:start="57:29" pos:end="57:32"><expr pos:start="57:29" pos:end="57:32"><name pos:start="57:29" pos:end="57:32">errp</name></expr></argument>, <argument pos:start="57:35" pos:end="57:43"><expr pos:start="57:35" pos:end="57:43"><name pos:start="57:35" pos:end="57:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="59:11" pos:end="63:9">else if <condition pos:start="59:19" pos:end="59:35">(<expr pos:start="59:20" pos:end="59:34"><name pos:start="59:20" pos:end="59:34"><name pos:start="59:20" pos:end="59:21">bs</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:31">filename</name><index pos:start="59:32" pos:end="59:34">[<expr pos:start="59:33" pos:end="59:33"><literal type="number" pos:start="59:33" pos:end="59:33">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="59:37" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:78">

            <expr_stmt pos:start="61:13" pos:end="61:78"><expr pos:start="61:13" pos:end="61:77"><call pos:start="61:13" pos:end="61:77"><name pos:start="61:13" pos:end="61:28">error_setg_errno</name><argument_list pos:start="61:29" pos:end="61:77">(<argument pos:start="61:30" pos:end="61:33"><expr pos:start="61:30" pos:end="61:33"><name pos:start="61:30" pos:end="61:33">errp</name></expr></argument>, <argument pos:start="61:36" pos:end="61:39"><expr pos:start="61:36" pos:end="61:39"><operator pos:start="61:36" pos:end="61:36">-</operator><name pos:start="61:37" pos:end="61:39">ret</name></expr></argument>, <argument pos:start="61:42" pos:end="61:62"><expr pos:start="61:42" pos:end="61:62"><literal type="string" pos:start="61:42" pos:end="61:62">"Could not open '%s'"</literal></expr></argument>, <argument pos:start="61:65" pos:end="61:76"><expr pos:start="61:65" pos:end="61:76"><name pos:start="61:65" pos:end="61:76"><name pos:start="61:65" pos:end="61:66">bs</name><operator pos:start="61:67" pos:end="61:68">-&gt;</operator><name pos:start="61:69" pos:end="61:76">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="67:9">else <block pos:start="63:16" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:65">

            <expr_stmt pos:start="65:13" pos:end="65:65"><expr pos:start="65:13" pos:end="65:64"><call pos:start="65:13" pos:end="65:64"><name pos:start="65:13" pos:end="65:28">error_setg_errno</name><argument_list pos:start="65:29" pos:end="65:64">(<argument pos:start="65:30" pos:end="65:33"><expr pos:start="65:30" pos:end="65:33"><name pos:start="65:30" pos:end="65:33">errp</name></expr></argument>, <argument pos:start="65:36" pos:end="65:39"><expr pos:start="65:36" pos:end="65:39"><operator pos:start="65:36" pos:end="65:36">-</operator><name pos:start="65:37" pos:end="65:39">ret</name></expr></argument>, <argument pos:start="65:42" pos:end="65:63"><expr pos:start="65:42" pos:end="65:63"><literal type="string" pos:start="65:42" pos:end="65:63">"Could not open image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <goto pos:start="69:9" pos:end="69:27">goto <name pos:start="69:14" pos:end="69:26">free_and_fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:55"><expr pos:start="75:5" pos:end="75:54"><name pos:start="75:5" pos:end="75:7">ret</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <call pos:start="75:11" pos:end="75:54"><name pos:start="75:11" pos:end="75:31">refresh_total_sectors</name><argument_list pos:start="75:32" pos:end="75:54">(<argument pos:start="75:33" pos:end="75:34"><expr pos:start="75:33" pos:end="75:34"><name pos:start="75:33" pos:end="75:34">bs</name></expr></argument>, <argument pos:start="75:37" pos:end="75:53"><expr pos:start="75:37" pos:end="75:53"><name pos:start="75:37" pos:end="75:53"><name pos:start="75:37" pos:end="75:38">bs</name><operator pos:start="75:39" pos:end="75:40">-&gt;</operator><name pos:start="75:41" pos:end="75:53">total_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:16">(<expr pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">&lt;</operator> <literal type="number" pos:start="77:15" pos:end="77:15">0</literal></expr>)</condition> <block pos:start="77:18" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:27">

        <expr_stmt pos:start="79:9" pos:end="79:77"><expr pos:start="79:9" pos:end="79:76"><call pos:start="79:9" pos:end="79:76"><name pos:start="79:9" pos:end="79:24">error_setg_errno</name><argument_list pos:start="79:25" pos:end="79:76">(<argument pos:start="79:26" pos:end="79:29"><expr pos:start="79:26" pos:end="79:29"><name pos:start="79:26" pos:end="79:29">errp</name></expr></argument>, <argument pos:start="79:32" pos:end="79:35"><expr pos:start="79:32" pos:end="79:35"><operator pos:start="79:32" pos:end="79:32">-</operator><name pos:start="79:33" pos:end="79:35">ret</name></expr></argument>, <argument pos:start="79:38" pos:end="79:75"><expr pos:start="79:38" pos:end="79:75"><literal type="string" pos:start="79:38" pos:end="79:75">"Could not refresh total sector count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:27">goto <name pos:start="81:14" pos:end="81:26">free_and_fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:40"><expr pos:start="87:5" pos:end="87:39"><call pos:start="87:5" pos:end="87:39"><name pos:start="87:5" pos:end="87:23">bdrv_refresh_limits</name><argument_list pos:start="87:24" pos:end="87:39">(<argument pos:start="87:25" pos:end="87:26"><expr pos:start="87:25" pos:end="87:26"><name pos:start="87:25" pos:end="87:26">bs</name></expr></argument>, <argument pos:start="87:29" pos:end="87:38"><expr pos:start="87:29" pos:end="87:38"><operator pos:start="87:29" pos:end="87:29">&amp;</operator><name pos:start="87:30" pos:end="87:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="89:18">(<expr pos:start="89:9" pos:end="89:17"><name pos:start="89:9" pos:end="89:17">local_err</name></expr>)</condition> <block pos:start="89:20" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:27">

        <expr_stmt pos:start="91:9" pos:end="91:41"><expr pos:start="91:9" pos:end="91:40"><call pos:start="91:9" pos:end="91:40"><name pos:start="91:9" pos:end="91:23">error_propagate</name><argument_list pos:start="91:24" pos:end="91:40">(<argument pos:start="91:25" pos:end="91:28"><expr pos:start="91:25" pos:end="91:28"><name pos:start="91:25" pos:end="91:28">errp</name></expr></argument>, <argument pos:start="91:31" pos:end="91:39"><expr pos:start="91:31" pos:end="91:39"><name pos:start="91:31" pos:end="91:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:22"><expr pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <operator pos:start="93:15" pos:end="93:15">-</operator><name pos:start="93:16" pos:end="93:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="95:9" pos:end="95:27">goto <name pos:start="95:14" pos:end="95:26">free_and_fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:40"><expr pos:start="101:5" pos:end="101:39"><call pos:start="101:5" pos:end="101:39"><name pos:start="101:5" pos:end="101:10">assert</name><argument_list pos:start="101:11" pos:end="101:39">(<argument pos:start="101:12" pos:end="101:38"><expr pos:start="101:12" pos:end="101:38"><call pos:start="101:12" pos:end="101:33"><name pos:start="101:12" pos:end="101:29">bdrv_opt_mem_align</name><argument_list pos:start="101:30" pos:end="101:33">(<argument pos:start="101:31" pos:end="101:32"><expr pos:start="101:31" pos:end="101:32"><name pos:start="101:31" pos:end="101:32">bs</name></expr></argument>)</argument_list></call> <operator pos:start="101:35" pos:end="101:36">!=</operator> <literal type="number" pos:start="101:38" pos:end="101:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:40"><expr pos:start="103:5" pos:end="103:39"><call pos:start="103:5" pos:end="103:39"><name pos:start="103:5" pos:end="103:10">assert</name><argument_list pos:start="103:11" pos:end="103:39">(<argument pos:start="103:12" pos:end="103:38"><expr pos:start="103:12" pos:end="103:38"><call pos:start="103:12" pos:end="103:33"><name pos:start="103:12" pos:end="103:29">bdrv_min_mem_align</name><argument_list pos:start="103:30" pos:end="103:33">(<argument pos:start="103:31" pos:end="103:32"><expr pos:start="103:31" pos:end="103:32"><name pos:start="103:31" pos:end="103:32">bs</name></expr></argument>)</argument_list></call> <operator pos:start="103:35" pos:end="103:36">!=</operator> <literal type="number" pos:start="103:38" pos:end="103:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:52"><expr pos:start="105:5" pos:end="105:51"><call pos:start="105:5" pos:end="105:51"><name pos:start="105:5" pos:end="105:10">assert</name><argument_list pos:start="105:11" pos:end="105:51">(<argument pos:start="105:12" pos:end="105:50"><expr pos:start="105:12" pos:end="105:50"><call pos:start="105:12" pos:end="105:50"><name pos:start="105:12" pos:end="105:24">is_power_of_2</name><argument_list pos:start="105:25" pos:end="105:50">(<argument pos:start="105:26" pos:end="105:49"><expr pos:start="105:26" pos:end="105:49"><name pos:start="105:26" pos:end="105:49"><name pos:start="105:26" pos:end="105:27">bs</name><operator pos:start="105:28" pos:end="105:29">-&gt;</operator><name pos:start="105:30" pos:end="105:31">bl</name><operator pos:start="105:32" pos:end="105:32">.</operator><name pos:start="105:33" pos:end="105:49">request_alignment</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="109:5" pos:end="109:13">return <expr pos:start="109:12" pos:end="109:12"><literal type="number" pos:start="109:12" pos:end="109:12">0</literal></expr>;</return>



<label pos:start="113:1" pos:end="113:14"><name pos:start="113:1" pos:end="113:13">free_and_fail</name>:</label>

    <comment type="block" pos:start="115:5" pos:end="115:47">/* FIXME Close bs first if already opened*/</comment>

    <expr_stmt pos:start="117:5" pos:end="117:23"><expr pos:start="117:5" pos:end="117:22"><call pos:start="117:5" pos:end="117:22"><name pos:start="117:5" pos:end="117:10">g_free</name><argument_list pos:start="117:11" pos:end="117:22">(<argument pos:start="117:12" pos:end="117:21"><expr pos:start="117:12" pos:end="117:21"><name pos:start="117:12" pos:end="117:21"><name pos:start="117:12" pos:end="117:13">bs</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:21">opaque</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:22"><expr pos:start="119:5" pos:end="119:21"><name pos:start="119:5" pos:end="119:14"><name pos:start="119:5" pos:end="119:6">bs</name><operator pos:start="119:7" pos:end="119:8">-&gt;</operator><name pos:start="119:9" pos:end="119:14">opaque</name></name> <operator pos:start="119:16" pos:end="119:16">=</operator> <name pos:start="119:18" pos:end="119:21">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:19"><expr pos:start="121:5" pos:end="121:18"><name pos:start="121:5" pos:end="121:11"><name pos:start="121:5" pos:end="121:6">bs</name><operator pos:start="121:7" pos:end="121:8">-&gt;</operator><name pos:start="121:9" pos:end="121:11">drv</name></name> <operator pos:start="121:13" pos:end="121:13">=</operator> <name pos:start="121:15" pos:end="121:18">NULL</name></expr>;</expr_stmt>

    <return pos:start="123:5" pos:end="123:15">return <expr pos:start="123:12" pos:end="123:14"><name pos:start="123:12" pos:end="123:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
