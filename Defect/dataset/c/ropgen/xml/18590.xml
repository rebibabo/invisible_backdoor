<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18590.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">stream_complete</name><parameter_list pos:start="1:28" pos:end="1:56">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:36">BlockJob</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">job</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:55"><decl pos:start="1:44" pos:end="1:55"><type pos:start="1:44" pos:end="1:55"><name pos:start="1:44" pos:end="1:47">void</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:55">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="75:1">{<block_content pos:start="5:5" pos:end="73:17">

    <decl_stmt pos:start="5:5" pos:end="5:66"><decl pos:start="5:5" pos:end="5:65"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">StreamBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:65">= <expr pos:start="5:25" pos:end="5:65"><call pos:start="5:25" pos:end="5:65"><name pos:start="5:25" pos:end="5:36">container_of</name><argument_list pos:start="5:37" pos:end="5:65">(<argument pos:start="5:38" pos:end="5:40"><expr pos:start="5:38" pos:end="5:40"><name pos:start="5:38" pos:end="5:40">job</name></expr></argument>, <argument pos:start="5:43" pos:end="5:56"><expr pos:start="5:43" pos:end="5:56"><name pos:start="5:43" pos:end="5:56">StreamBlockJob</name></expr></argument>, <argument pos:start="5:59" pos:end="5:64"><expr pos:start="5:59" pos:end="5:64"><name pos:start="5:59" pos:end="5:64">common</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">StreamCompleteData</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:28">data</name> <init pos:start="7:30" pos:end="7:37">= <expr pos:start="7:32" pos:end="7:37"><name pos:start="7:32" pos:end="7:37">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:44"><decl pos:start="9:5" pos:end="9:43"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">BlockDriverState</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">bs</name> <init pos:start="9:26" pos:end="9:43">= <expr pos:start="9:28" pos:end="9:43"><call pos:start="9:28" pos:end="9:43"><name pos:start="9:28" pos:end="9:33">blk_bs</name><argument_list pos:start="9:34" pos:end="9:43">(<argument pos:start="9:35" pos:end="9:42"><expr pos:start="9:35" pos:end="9:42"><name pos:start="9:35" pos:end="9:42"><name pos:start="9:35" pos:end="9:37">job</name><operator pos:start="9:38" pos:end="9:39">-&gt;</operator><name pos:start="9:40" pos:end="9:42">blk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:26">base</name> <init pos:start="11:28" pos:end="11:36">= <expr pos:start="11:30" pos:end="11:36"><name pos:start="11:30" pos:end="11:36"><name pos:start="11:30" pos:end="11:30">s</name><operator pos:start="11:31" pos:end="11:32">-&gt;</operator><name pos:start="11:33" pos:end="11:36">base</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:20">local_err</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><name pos:start="13:24" pos:end="13:27">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="49:5"><if pos:start="17:5" pos:end="49:5">if <condition pos:start="17:8" pos:end="19:23">(<expr pos:start="17:9" pos:end="19:22"><operator pos:start="17:9" pos:end="17:9">!</operator><call pos:start="17:10" pos:end="17:43"><name pos:start="17:10" pos:end="17:31">block_job_is_cancelled</name><argument_list pos:start="17:32" pos:end="17:43">(<argument pos:start="17:33" pos:end="17:42"><expr pos:start="17:33" pos:end="17:42"><operator pos:start="17:33" pos:end="17:33">&amp;</operator><name pos:start="17:34" pos:end="17:42"><name pos:start="17:34" pos:end="17:34">s</name><operator pos:start="17:35" pos:end="17:36">-&gt;</operator><name pos:start="17:37" pos:end="17:42">common</name></name></expr></argument>)</argument_list></call> <operator pos:start="17:45" pos:end="17:46">&amp;&amp;</operator> <name pos:start="17:48" pos:end="17:64"><name pos:start="17:48" pos:end="17:51">data</name><operator pos:start="17:52" pos:end="17:53">-&gt;</operator><name pos:start="17:54" pos:end="17:64">reached_end</name></name> <operator pos:start="17:66" pos:end="17:67">&amp;&amp;</operator>

        <name pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:12">data</name><operator pos:start="19:13" pos:end="19:14">-&gt;</operator><name pos:start="19:15" pos:end="19:17">ret</name></name> <operator pos:start="19:19" pos:end="19:20">==</operator> <literal type="number" pos:start="19:22" pos:end="19:22">0</literal></expr>)</condition> <block pos:start="19:25" pos:end="49:5">{<block_content pos:start="21:9" pos:end="47:9">

        <decl_stmt pos:start="21:9" pos:end="21:53"><decl pos:start="21:9" pos:end="21:34"><type pos:start="21:9" pos:end="21:20"><specifier pos:start="21:9" pos:end="21:13">const</specifier> <name pos:start="21:15" pos:end="21:18">char</name> <modifier pos:start="21:20" pos:end="21:20">*</modifier></type><name pos:start="21:21" pos:end="21:27">base_id</name> <init pos:start="21:29" pos:end="21:34">= <expr pos:start="21:31" pos:end="21:34"><name pos:start="21:31" pos:end="21:34">NULL</name></expr></init></decl>, <decl pos:start="21:37" pos:end="21:52"><type ref="prev" pos:start="21:9" pos:end="21:20"><modifier pos:start="21:37" pos:end="21:37">*</modifier></type><name pos:start="21:38" pos:end="21:45">base_fmt</name> <init pos:start="21:47" pos:end="21:52">= <expr pos:start="21:49" pos:end="21:52"><name pos:start="21:49" pos:end="21:52">NULL</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="23:9" pos:end="33:9"><if pos:start="23:9" pos:end="33:9">if <condition pos:start="23:12" pos:end="23:17">(<expr pos:start="23:13" pos:end="23:16"><name pos:start="23:13" pos:end="23:16">base</name></expr>)</condition> <block pos:start="23:19" pos:end="33:9">{<block_content pos:start="25:13" pos:end="31:13">

            <expr_stmt pos:start="25:13" pos:end="25:42"><expr pos:start="25:13" pos:end="25:41"><name pos:start="25:13" pos:end="25:19">base_id</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <name pos:start="25:23" pos:end="25:41"><name pos:start="25:23" pos:end="25:23">s</name><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:41">backing_file_str</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="27:13" pos:end="31:13"><if pos:start="27:13" pos:end="31:13">if <condition pos:start="27:16" pos:end="27:26">(<expr pos:start="27:17" pos:end="27:25"><name pos:start="27:17" pos:end="27:25"><name pos:start="27:17" pos:end="27:20">base</name><operator pos:start="27:21" pos:end="27:22">-&gt;</operator><name pos:start="27:23" pos:end="27:25">drv</name></name></expr>)</condition> <block pos:start="27:28" pos:end="31:13">{<block_content pos:start="29:17" pos:end="29:50">

                <expr_stmt pos:start="29:17" pos:end="29:50"><expr pos:start="29:17" pos:end="29:49"><name pos:start="29:17" pos:end="29:24">base_fmt</name> <operator pos:start="29:26" pos:end="29:26">=</operator> <name pos:start="29:28" pos:end="29:49"><name pos:start="29:28" pos:end="29:31">base</name><operator pos:start="29:32" pos:end="29:33">-&gt;</operator><name pos:start="29:34" pos:end="29:36">drv</name><operator pos:start="29:37" pos:end="29:38">-&gt;</operator><name pos:start="29:39" pos:end="29:49">format_name</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:68"><expr pos:start="35:9" pos:end="35:67"><name pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:12">data</name><operator pos:start="35:13" pos:end="35:14">-&gt;</operator><name pos:start="35:15" pos:end="35:17">ret</name></name> <operator pos:start="35:19" pos:end="35:19">=</operator> <call pos:start="35:21" pos:end="35:67"><name pos:start="35:21" pos:end="35:44">bdrv_change_backing_file</name><argument_list pos:start="35:45" pos:end="35:67">(<argument pos:start="35:46" pos:end="35:47"><expr pos:start="35:46" pos:end="35:47"><name pos:start="35:46" pos:end="35:47">bs</name></expr></argument>, <argument pos:start="35:50" pos:end="35:56"><expr pos:start="35:50" pos:end="35:56"><name pos:start="35:50" pos:end="35:56">base_id</name></expr></argument>, <argument pos:start="35:59" pos:end="35:66"><expr pos:start="35:59" pos:end="35:66"><name pos:start="35:59" pos:end="35:66">base_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:50"><expr pos:start="37:9" pos:end="37:49"><call pos:start="37:9" pos:end="37:49"><name pos:start="37:9" pos:end="37:27">bdrv_set_backing_hd</name><argument_list pos:start="37:28" pos:end="37:49">(<argument pos:start="37:29" pos:end="37:30"><expr pos:start="37:29" pos:end="37:30"><name pos:start="37:29" pos:end="37:30">bs</name></expr></argument>, <argument pos:start="37:33" pos:end="37:36"><expr pos:start="37:33" pos:end="37:36"><name pos:start="37:33" pos:end="37:36">base</name></expr></argument>, <argument pos:start="37:39" pos:end="37:48"><expr pos:start="37:39" pos:end="37:48"><operator pos:start="37:39" pos:end="37:39">&amp;</operator><name pos:start="37:40" pos:end="37:48">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:22">(<expr pos:start="39:13" pos:end="39:21"><name pos:start="39:13" pos:end="39:21">local_err</name></expr>)</condition> <block pos:start="39:24" pos:end="47:9">{<block_content pos:start="41:13" pos:end="45:21">

            <expr_stmt pos:start="41:13" pos:end="41:40"><expr pos:start="41:13" pos:end="41:39"><call pos:start="41:13" pos:end="41:39"><name pos:start="41:13" pos:end="41:28">error_report_err</name><argument_list pos:start="41:29" pos:end="41:39">(<argument pos:start="41:30" pos:end="41:38"><expr pos:start="41:30" pos:end="41:38"><name pos:start="41:30" pos:end="41:38">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:31"><expr pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:21"><name pos:start="43:13" pos:end="43:16">data</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:21">ret</name></name> <operator pos:start="43:23" pos:end="43:23">=</operator> <operator pos:start="43:25" pos:end="43:25">-</operator><name pos:start="43:26" pos:end="43:30">EPERM</name></expr>;</expr_stmt>

            <goto pos:start="45:13" pos:end="45:21">goto <name pos:start="45:18" pos:end="45:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="53:1" pos:end="53:4"><name pos:start="53:1" pos:end="53:3">out</name>:</label>

    <comment type="block" pos:start="55:5" pos:end="55:62">/* Reopen the image back in read-only mode if necessary */</comment>

    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="57:42">(<expr pos:start="57:9" pos:end="57:41"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:19">bs_flags</name></name> <operator pos:start="57:21" pos:end="57:22">!=</operator> <call pos:start="57:24" pos:end="57:41"><name pos:start="57:24" pos:end="57:37">bdrv_get_flags</name><argument_list pos:start="57:38" pos:end="57:41">(<argument pos:start="57:39" pos:end="57:40"><expr pos:start="57:39" pos:end="57:40"><name pos:start="57:39" pos:end="57:40">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:44" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:43">

        <comment type="block" pos:start="59:9" pos:end="59:66">/* Give up write permissions before making it read-only */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:62"><expr pos:start="61:9" pos:end="61:61"><call pos:start="61:9" pos:end="61:61"><name pos:start="61:9" pos:end="61:20">blk_set_perm</name><argument_list pos:start="61:21" pos:end="61:61">(<argument pos:start="61:22" pos:end="61:29"><expr pos:start="61:22" pos:end="61:29"><name pos:start="61:22" pos:end="61:29"><name pos:start="61:22" pos:end="61:24">job</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:29">blk</name></name></expr></argument>, <argument pos:start="61:32" pos:end="61:32"><expr pos:start="61:32" pos:end="61:32"><literal type="number" pos:start="61:32" pos:end="61:32">0</literal></expr></argument>, <argument pos:start="61:35" pos:end="61:46"><expr pos:start="61:35" pos:end="61:46"><name pos:start="61:35" pos:end="61:46">BLK_PERM_ALL</name></expr></argument>, <argument pos:start="61:49" pos:end="61:60"><expr pos:start="61:49" pos:end="61:60"><operator pos:start="61:49" pos:end="61:49">&amp;</operator><name pos:start="61:50" pos:end="61:60">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:43"><expr pos:start="63:9" pos:end="63:42"><call pos:start="63:9" pos:end="63:42"><name pos:start="63:9" pos:end="63:19">bdrv_reopen</name><argument_list pos:start="63:20" pos:end="63:42">(<argument pos:start="63:21" pos:end="63:22"><expr pos:start="63:21" pos:end="63:22"><name pos:start="63:21" pos:end="63:22">bs</name></expr></argument>, <argument pos:start="63:25" pos:end="63:35"><expr pos:start="63:25" pos:end="63:35"><name pos:start="63:25" pos:end="63:35"><name pos:start="63:25" pos:end="63:25">s</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:35">bs_flags</name></name></expr></argument>, <argument pos:start="63:38" pos:end="63:41"><expr pos:start="63:38" pos:end="63:41"><name pos:start="63:38" pos:end="63:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:32"><expr pos:start="69:5" pos:end="69:31"><call pos:start="69:5" pos:end="69:31"><name pos:start="69:5" pos:end="69:10">g_free</name><argument_list pos:start="69:11" pos:end="69:31">(<argument pos:start="69:12" pos:end="69:30"><expr pos:start="69:12" pos:end="69:30"><name pos:start="69:12" pos:end="69:30"><name pos:start="69:12" pos:end="69:12">s</name><operator pos:start="69:13" pos:end="69:14">-&gt;</operator><name pos:start="69:15" pos:end="69:30">backing_file_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:47"><expr pos:start="71:5" pos:end="71:46"><call pos:start="71:5" pos:end="71:46"><name pos:start="71:5" pos:end="71:23">block_job_completed</name><argument_list pos:start="71:24" pos:end="71:46">(<argument pos:start="71:25" pos:end="71:34"><expr pos:start="71:25" pos:end="71:34"><operator pos:start="71:25" pos:end="71:25">&amp;</operator><name pos:start="71:26" pos:end="71:34"><name pos:start="71:26" pos:end="71:26">s</name><operator pos:start="71:27" pos:end="71:28">-&gt;</operator><name pos:start="71:29" pos:end="71:34">common</name></name></expr></argument>, <argument pos:start="71:37" pos:end="71:45"><expr pos:start="71:37" pos:end="71:45"><name pos:start="71:37" pos:end="71:45"><name pos:start="71:37" pos:end="71:40">data</name><operator pos:start="71:41" pos:end="71:42">-&gt;</operator><name pos:start="71:43" pos:end="71:45">ret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:17"><expr pos:start="73:5" pos:end="73:16"><call pos:start="73:5" pos:end="73:16"><name pos:start="73:5" pos:end="73:10">g_free</name><argument_list pos:start="73:11" pos:end="73:16">(<argument pos:start="73:12" pos:end="73:15"><expr pos:start="73:12" pos:end="73:15"><name pos:start="73:12" pos:end="73:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
