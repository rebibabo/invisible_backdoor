<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4392.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">mirror_cow_align</name><parameter_list pos:start="1:28" pos:end="5:44">(<parameter pos:start="1:29" pos:end="1:45"><decl pos:start="1:29" pos:end="1:45"><type pos:start="1:29" pos:end="1:45"><name pos:start="1:29" pos:end="1:42">MirrorBlockJob</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:47"><decl pos:start="3:29" pos:end="3:47"><type pos:start="3:29" pos:end="3:47"><name pos:start="3:29" pos:end="3:35">int64_t</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:47">sector_num</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:31">int</name> <modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:43">nb_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="73:1">{<block_content pos:start="9:5" pos:end="71:15">

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:17">need_cow</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:21">chunk_sectors</name> <init pos:start="13:23" pos:end="13:58">= <expr pos:start="13:25" pos:end="13:58"><name pos:start="13:25" pos:end="13:38"><name pos:start="13:25" pos:end="13:25">s</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:38">granularity</name></name> <operator pos:start="13:40" pos:end="13:41">&gt;&gt;</operator> <name pos:start="13:43" pos:end="13:58">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:43"><decl pos:start="15:5" pos:end="15:42"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:28">align_sector_num</name> <init pos:start="15:30" pos:end="15:42">= <expr pos:start="15:32" pos:end="15:42"><operator pos:start="15:32" pos:end="15:32">*</operator><name pos:start="15:33" pos:end="15:42">sector_num</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:39"><decl pos:start="17:5" pos:end="17:38"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:24">align_nb_sectors</name> <init pos:start="17:26" pos:end="17:38">= <expr pos:start="17:28" pos:end="17:38"><operator pos:start="17:28" pos:end="17:28">*</operator><name pos:start="17:29" pos:end="17:38">nb_sectors</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:49"><decl pos:start="19:5" pos:end="19:48"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">max_sectors</name> <init pos:start="19:21" pos:end="19:48">= <expr pos:start="19:23" pos:end="19:48"><name pos:start="19:23" pos:end="19:35">chunk_sectors</name> <operator pos:start="19:37" pos:end="19:37">*</operator> <name pos:start="19:39" pos:end="19:48"><name pos:start="19:39" pos:end="19:39">s</name><operator pos:start="19:40" pos:end="19:41">-&gt;</operator><name pos:start="19:42" pos:end="19:48">max_iov</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:69"><expr pos:start="23:5" pos:end="23:68"><name pos:start="23:5" pos:end="23:12">need_cow</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <operator pos:start="23:16" pos:end="23:16">!</operator><call pos:start="23:17" pos:end="23:68"><name pos:start="23:17" pos:end="23:24">test_bit</name><argument_list pos:start="23:25" pos:end="23:68">(<argument pos:start="23:26" pos:end="23:52"><expr pos:start="23:26" pos:end="23:52"><operator pos:start="23:26" pos:end="23:26">*</operator><name pos:start="23:27" pos:end="23:36">sector_num</name> <operator pos:start="23:38" pos:end="23:38">/</operator> <name pos:start="23:40" pos:end="23:52">chunk_sectors</name></expr></argument>, <argument pos:start="23:55" pos:end="23:67"><expr pos:start="23:55" pos:end="23:67"><name pos:start="23:55" pos:end="23:67"><name pos:start="23:55" pos:end="23:55">s</name><operator pos:start="23:56" pos:end="23:57">-&gt;</operator><name pos:start="23:58" pos:end="23:67">cow_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="27:41"><expr pos:start="25:5" pos:end="27:40"><name pos:start="25:5" pos:end="25:12">need_cow</name> <operator pos:start="25:14" pos:end="25:15">|=</operator> <operator pos:start="25:17" pos:end="25:17">!</operator><call pos:start="25:18" pos:end="27:40"><name pos:start="25:18" pos:end="25:25">test_bit</name><argument_list pos:start="25:26" pos:end="27:40">(<argument pos:start="25:27" pos:end="25:73"><expr pos:start="25:27" pos:end="25:73"><operator pos:start="25:27" pos:end="25:27">(</operator><operator pos:start="25:28" pos:end="25:28">*</operator><name pos:start="25:29" pos:end="25:38">sector_num</name> <operator pos:start="25:40" pos:end="25:40">+</operator> <operator pos:start="25:42" pos:end="25:42">*</operator><name pos:start="25:43" pos:end="25:52">nb_sectors</name> <operator pos:start="25:54" pos:end="25:54">-</operator> <literal type="number" pos:start="25:56" pos:end="25:56">1</literal><operator pos:start="25:57" pos:end="25:57">)</operator> <operator pos:start="25:59" pos:end="25:59">/</operator> <name pos:start="25:61" pos:end="25:73">chunk_sectors</name></expr></argument>,

                          <argument pos:start="27:27" pos:end="27:39"><expr pos:start="27:27" pos:end="27:39"><name pos:start="27:27" pos:end="27:39"><name pos:start="27:27" pos:end="27:27">s</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:39">cow_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:17">(<expr pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:16">need_cow</name></expr>)</condition> <block pos:start="29:19" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:58">

        <expr_stmt pos:start="31:9" pos:end="35:58"><expr pos:start="31:9" pos:end="35:57"><call pos:start="31:9" pos:end="35:57"><name pos:start="31:9" pos:end="31:38">bdrv_round_sectors_to_clusters</name><argument_list pos:start="31:39" pos:end="35:57">(<argument pos:start="31:40" pos:end="31:56"><expr pos:start="31:40" pos:end="31:56"><call pos:start="31:40" pos:end="31:56"><name pos:start="31:40" pos:end="31:45">blk_bs</name><argument_list pos:start="31:46" pos:end="31:56">(<argument pos:start="31:47" pos:end="31:55"><expr pos:start="31:47" pos:end="31:55"><name pos:start="31:47" pos:end="31:55"><name pos:start="31:47" pos:end="31:47">s</name><operator pos:start="31:48" pos:end="31:49">-&gt;</operator><name pos:start="31:50" pos:end="31:55">target</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:59" pos:end="31:69"><expr pos:start="31:59" pos:end="31:69"><operator pos:start="31:59" pos:end="31:59">*</operator><name pos:start="31:60" pos:end="31:69">sector_num</name></expr></argument>,

                                       <argument pos:start="33:40" pos:end="33:50"><expr pos:start="33:40" pos:end="33:50"><operator pos:start="33:40" pos:end="33:40">*</operator><name pos:start="33:41" pos:end="33:50">nb_sectors</name></expr></argument>, <argument pos:start="33:53" pos:end="33:69"><expr pos:start="33:53" pos:end="33:69"><operator pos:start="33:53" pos:end="33:53">&amp;</operator><name pos:start="33:54" pos:end="33:69">align_sector_num</name></expr></argument>,

                                       <argument pos:start="35:40" pos:end="35:56"><expr pos:start="35:40" pos:end="35:56"><operator pos:start="35:40" pos:end="35:40">&amp;</operator><name pos:start="35:41" pos:end="35:56">align_nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="53:5"><if pos:start="41:5" pos:end="53:5">if <condition pos:start="41:8" pos:end="41:39">(<expr pos:start="41:9" pos:end="41:38"><name pos:start="41:9" pos:end="41:24">align_nb_sectors</name> <operator pos:start="41:26" pos:end="41:26">&gt;</operator> <name pos:start="41:28" pos:end="41:38">max_sectors</name></expr>)</condition> <block pos:start="41:41" pos:end="53:5">{<block_content pos:start="43:9" pos:end="51:9">

        <expr_stmt pos:start="43:9" pos:end="43:39"><expr pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:24">align_nb_sectors</name> <operator pos:start="43:26" pos:end="43:26">=</operator> <name pos:start="43:28" pos:end="43:38">max_sectors</name></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="51:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:21">(<expr pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:20">need_cow</name></expr>)</condition> <block pos:start="45:23" pos:end="51:9">{<block_content pos:start="47:13" pos:end="49:74">

            <expr_stmt pos:start="47:13" pos:end="49:74"><expr pos:start="47:13" pos:end="49:73"><name pos:start="47:13" pos:end="47:28">align_nb_sectors</name> <operator pos:start="47:30" pos:end="47:30">=</operator> <call pos:start="47:32" pos:end="49:73"><name pos:start="47:32" pos:end="47:46">QEMU_ALIGN_DOWN</name><argument_list pos:start="47:47" pos:end="49:73">(<argument pos:start="47:48" pos:end="47:63"><expr pos:start="47:48" pos:end="47:63"><name pos:start="47:48" pos:end="47:63">align_nb_sectors</name></expr></argument>,

                                               <argument pos:start="49:48" pos:end="49:72"><expr pos:start="49:48" pos:end="49:72"><name pos:start="49:48" pos:end="49:72"><name pos:start="49:48" pos:end="49:48">s</name><operator pos:start="49:49" pos:end="49:50">-&gt;</operator><name pos:start="49:51" pos:end="49:72">target_cluster_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="55:5" pos:end="57:75">/* Clipping may result in align_nb_sectors unaligned to chunk boundary, but

     * that doesn't matter because it's already the end of source image. */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:64"><expr pos:start="59:5" pos:end="59:63"><call pos:start="59:5" pos:end="59:63"><name pos:start="59:5" pos:end="59:23">mirror_clip_sectors</name><argument_list pos:start="59:24" pos:end="59:63">(<argument pos:start="59:25" pos:end="59:25"><expr pos:start="59:25" pos:end="59:25"><name pos:start="59:25" pos:end="59:25">s</name></expr></argument>, <argument pos:start="59:28" pos:end="59:43"><expr pos:start="59:28" pos:end="59:43"><name pos:start="59:28" pos:end="59:43">align_sector_num</name></expr></argument>, <argument pos:start="59:46" pos:end="59:62"><expr pos:start="59:46" pos:end="59:62"><operator pos:start="59:46" pos:end="59:46">&amp;</operator><name pos:start="59:47" pos:end="59:62">align_nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:76"><expr pos:start="63:5" pos:end="63:75"><name pos:start="63:5" pos:end="63:7">ret</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <name pos:start="63:11" pos:end="63:26">align_sector_num</name> <operator pos:start="63:28" pos:end="63:28">+</operator> <name pos:start="63:30" pos:end="63:45">align_nb_sectors</name> <operator pos:start="63:47" pos:end="63:47">-</operator> <operator pos:start="63:49" pos:end="63:49">(</operator><operator pos:start="63:50" pos:end="63:50">*</operator><name pos:start="63:51" pos:end="63:60">sector_num</name> <operator pos:start="63:62" pos:end="63:62">+</operator> <operator pos:start="63:64" pos:end="63:64">*</operator><name pos:start="63:65" pos:end="63:74">nb_sectors</name><operator pos:start="63:75" pos:end="63:75">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:35"><expr pos:start="65:5" pos:end="65:34"><operator pos:start="65:5" pos:end="65:5">*</operator><name pos:start="65:6" pos:end="65:15">sector_num</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <name pos:start="65:19" pos:end="65:34">align_sector_num</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><operator pos:start="67:5" pos:end="67:5">*</operator><name pos:start="67:6" pos:end="67:15">nb_sectors</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <name pos:start="67:19" pos:end="67:34">align_nb_sectors</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:21"><expr pos:start="69:5" pos:end="69:20"><call pos:start="69:5" pos:end="69:20"><name pos:start="69:5" pos:end="69:10">assert</name><argument_list pos:start="69:11" pos:end="69:20">(<argument pos:start="69:12" pos:end="69:19"><expr pos:start="69:12" pos:end="69:19"><name pos:start="69:12" pos:end="69:14">ret</name> <operator pos:start="69:16" pos:end="69:17">&gt;=</operator> <literal type="number" pos:start="69:19" pos:end="69:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="71:5" pos:end="71:15">return <expr pos:start="71:12" pos:end="71:14"><name pos:start="71:12" pos:end="71:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
