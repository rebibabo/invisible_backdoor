<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17263.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:13"><name pos:start="1:1" pos:end="1:11">CPUX86State</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:25">cpu_x86_init</name><parameter_list pos:start="1:26" pos:end="1:48">(<parameter pos:start="1:27" pos:end="1:47"><decl pos:start="1:27" pos:end="1:47"><type pos:start="1:27" pos:end="1:38"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:47">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="63:1">{<block_content pos:start="5:5" pos:end="61:15">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">CPUX86State</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:14"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <name pos:start="7:12" pos:end="7:14">int</name></type> <name pos:start="7:16" pos:end="7:21">inited</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:44"><expr pos:start="11:5" pos:end="11:43"><name pos:start="11:5" pos:end="11:7">env</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:43"><name pos:start="11:11" pos:end="11:22">qemu_mallocz</name><argument_list pos:start="11:23" pos:end="11:43">(<argument pos:start="11:24" pos:end="11:42"><expr pos:start="11:24" pos:end="11:42"><sizeof pos:start="11:24" pos:end="11:42">sizeof<argument_list pos:start="11:30" pos:end="11:42">(<argument pos:start="11:31" pos:end="11:41"><expr pos:start="11:31" pos:end="11:41"><name pos:start="11:31" pos:end="11:41">CPUX86State</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:23"><expr pos:start="13:5" pos:end="13:22"><call pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:17">cpu_exec_init</name><argument_list pos:start="13:18" pos:end="13:22">(<argument pos:start="13:19" pos:end="13:21"><expr pos:start="13:19" pos:end="13:21"><name pos:start="13:19" pos:end="13:21">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:35"><expr pos:start="15:5" pos:end="15:34"><name pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:7">env</name><operator pos:start="15:8" pos:end="15:9">-&gt;</operator><name pos:start="15:10" pos:end="15:22">cpu_model_str</name></name> <operator pos:start="15:24" pos:end="15:24">=</operator> <name pos:start="15:26" pos:end="15:34">cpu_model</name></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="19:36">/* init various static tables */</comment>

    <if_stmt pos:start="21:5" pos:end="35:5"><if pos:start="21:5" pos:end="35:5">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:15">inited</name></expr>)</condition> <block pos:start="21:18" pos:end="35:5">{<block_content pos:start="23:9" pos:end="34:0">

        <expr_stmt pos:start="23:9" pos:end="23:19"><expr pos:start="23:9" pos:end="23:18"><name pos:start="23:9" pos:end="23:14">inited</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <literal type="number" pos:start="23:18" pos:end="23:18">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="28:0"><expr pos:start="25:9" pos:end="25:29"><call pos:start="25:9" pos:end="25:29"><name pos:start="25:9" pos:end="25:27">optimize_flags_init</name><argument_list pos:start="25:28" pos:end="25:29">()</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef pos:start="27:1" pos:end="27:24">#<cpp:directive pos:start="27:2" pos:end="27:7">ifndef</cpp:directive> <name pos:start="27:9" pos:end="27:24">CONFIG_USER_ONLY</name></cpp:ifndef>

        <expr_stmt pos:start="29:9" pos:end="34:0"><expr pos:start="29:9" pos:end="31:58"><name pos:start="29:9" pos:end="29:31">prev_debug_excp_handler</name> <operator pos:start="29:33" pos:end="29:33">=</operator>

            <call pos:start="31:13" pos:end="31:58"><name pos:start="31:13" pos:end="31:38">cpu_set_debug_excp_handler</name><argument_list pos:start="31:39" pos:end="31:58">(<argument pos:start="31:40" pos:end="31:57"><expr pos:start="31:40" pos:end="31:57"><name pos:start="31:40" pos:end="31:57">breakpoint_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="33:1" pos:end="33:6">#<cpp:directive pos:start="33:2" pos:end="33:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:45">(<expr pos:start="37:9" pos:end="37:44"><call pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:24">cpu_x86_register</name><argument_list pos:start="37:25" pos:end="37:40">(<argument pos:start="37:26" pos:end="37:28"><expr pos:start="37:26" pos:end="37:28"><name pos:start="37:26" pos:end="37:28">env</name></expr></argument>, <argument pos:start="37:31" pos:end="37:39"><expr pos:start="37:31" pos:end="37:39"><name pos:start="37:31" pos:end="37:39">cpu_model</name></expr></argument>)</argument_list></call> <operator pos:start="37:42" pos:end="37:42">&lt;</operator> <literal type="number" pos:start="37:44" pos:end="37:44">0</literal></expr>)</condition> <block pos:start="37:47" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:20">

        <expr_stmt pos:start="39:9" pos:end="39:27"><expr pos:start="39:9" pos:end="39:26"><call pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:21">cpu_x86_close</name><argument_list pos:start="39:22" pos:end="39:26">(<argument pos:start="39:23" pos:end="39:25"><expr pos:start="39:23" pos:end="39:25"><name pos:start="39:23" pos:end="39:25">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:20">return <expr pos:start="41:16" pos:end="41:19"><name pos:start="41:16" pos:end="41:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:18"><expr pos:start="45:5" pos:end="45:17"><call pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:12">mce_init</name><argument_list pos:start="45:13" pos:end="45:17">(<argument pos:start="45:14" pos:end="45:16"><expr pos:start="45:14" pos:end="45:16"><name pos:start="45:14" pos:end="45:16">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="50:0"><expr pos:start="47:5" pos:end="47:18"><call pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:13">cpu_reset</name><argument_list pos:start="47:14" pos:end="47:18">(<argument pos:start="47:15" pos:end="47:17"><expr pos:start="47:15" pos:end="47:17"><name pos:start="47:15" pos:end="47:17">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="49:1" pos:end="49:19">#<cpp:directive pos:start="49:2" pos:end="49:6">ifdef</cpp:directive> <name pos:start="49:8" pos:end="49:19">CONFIG_KQEMU</name></cpp:ifdef>

    <expr_stmt pos:start="51:5" pos:end="54:0"><expr pos:start="51:5" pos:end="51:19"><call pos:start="51:5" pos:end="51:19"><name pos:start="51:5" pos:end="51:14">kqemu_init</name><argument_list pos:start="51:15" pos:end="51:19">(<argument pos:start="51:16" pos:end="51:18"><expr pos:start="51:16" pos:end="51:18"><name pos:start="51:16" pos:end="51:18">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="53:1" pos:end="53:6">#<cpp:directive pos:start="53:2" pos:end="53:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="57:5" pos:end="57:24"><expr pos:start="57:5" pos:end="57:23"><call pos:start="57:5" pos:end="57:23"><name pos:start="57:5" pos:end="57:18">qemu_init_vcpu</name><argument_list pos:start="57:19" pos:end="57:23">(<argument pos:start="57:20" pos:end="57:22"><expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:22">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="61:5" pos:end="61:15">return <expr pos:start="61:12" pos:end="61:14"><name pos:start="61:12" pos:end="61:14">env</name></expr>;</return>

</block_content>}</block></function>
</unit>
