<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2718.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:41"><name pos:start="1:1" pos:end="1:14">milkymist_init</name><argument_list pos:start="1:15" pos:end="1:41">(<argument pos:start="1:16" pos:end="1:40">QEMUMachineInitArgs *args</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="257:1">{<block_content pos:start="5:5" pos:end="255:52">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:25">cpu_model</name> <init pos:start="5:27" pos:end="5:43">= <expr pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:32">args</name><operator pos:start="5:33" pos:end="5:34">-&gt;</operator><name pos:start="5:35" pos:end="5:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:55">= <expr pos:start="7:35" pos:end="7:55"><name pos:start="7:35" pos:end="7:55"><name pos:start="7:35" pos:end="7:38">args</name><operator pos:start="7:39" pos:end="7:40">-&gt;</operator><name pos:start="7:41" pos:end="7:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:30">kernel_cmdline</name> <init pos:start="9:32" pos:end="9:53">= <expr pos:start="9:34" pos:end="9:53"><name pos:start="9:34" pos:end="9:53"><name pos:start="9:34" pos:end="9:37">args</name><operator pos:start="9:38" pos:end="9:39">-&gt;</operator><name pos:start="9:40" pos:end="9:53">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:56"><decl pos:start="11:5" pos:end="11:55"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">initrd_filename</name> <init pos:start="11:33" pos:end="11:55">= <expr pos:start="11:35" pos:end="11:55"><name pos:start="11:35" pos:end="11:55"><name pos:start="11:35" pos:end="11:38">args</name><operator pos:start="11:39" pos:end="11:40">-&gt;</operator><name pos:start="11:41" pos:end="11:55">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">LM32CPU</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">CPULM32State</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:13">DriveInfo</name> <modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:58"><decl pos:start="21:5" pos:end="21:57"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:35">address_space_mem</name> <init pos:start="21:37" pos:end="21:57">= <expr pos:start="21:39" pos:end="21:57"><call pos:start="21:39" pos:end="21:57"><name pos:start="21:39" pos:end="21:55">get_system_memory</name><argument_list pos:start="21:56" pos:end="21:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:54"><decl pos:start="23:5" pos:end="23:53"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:28">phys_sdram</name> <init pos:start="23:30" pos:end="23:53">= <expr pos:start="23:32" pos:end="23:53"><call pos:start="23:32" pos:end="23:53"><name pos:start="23:32" pos:end="23:36">g_new</name><argument_list pos:start="23:37" pos:end="23:53">(<argument pos:start="23:38" pos:end="23:49"><expr pos:start="23:38" pos:end="23:49"><name pos:start="23:38" pos:end="23:49">MemoryRegion</name></expr></argument>, <argument pos:start="23:52" pos:end="23:52"><expr pos:start="23:52" pos:end="23:52"><literal type="number" pos:start="23:52" pos:end="23:52">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">qemu_irq</name></type> <name pos:start="25:14" pos:end="25:20"><name pos:start="25:14" pos:end="25:16">irq</name><index pos:start="25:17" pos:end="25:20">[<expr pos:start="25:18" pos:end="25:19"><literal type="number" pos:start="25:18" pos:end="25:19">32</literal></expr>]</index></name></decl>, <decl pos:start="25:23" pos:end="25:30"><type ref="prev" pos:start="25:5" pos:end="25:12"><modifier pos:start="25:23" pos:end="25:23">*</modifier></type><name pos:start="25:24" pos:end="25:30">cpu_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:10"><decl pos:start="27:5" pos:end="27:9"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:24"><decl pos:start="29:5" pos:end="29:23"><type pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:8">char</name> <modifier pos:start="29:10" pos:end="29:10">*</modifier></type><name pos:start="29:11" pos:end="29:23">bios_filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:26"><decl pos:start="31:5" pos:end="31:25"><type pos:start="31:5" pos:end="31:15"><name pos:start="31:5" pos:end="31:13">ResetInfo</name> <modifier pos:start="31:15" pos:end="31:15">*</modifier></type><name pos:start="31:16" pos:end="31:25">reset_info</name></decl>;</decl_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:20">/* memory map */</comment>

    <decl_stmt pos:start="37:5" pos:end="37:49"><decl pos:start="37:5" pos:end="37:48"><type pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:22">target_phys_addr_t</name></type> <name pos:start="37:24" pos:end="37:33">flash_base</name>   <init pos:start="37:37" pos:end="37:48">= <expr pos:start="37:39" pos:end="37:48"><literal type="number" pos:start="37:39" pos:end="37:48">0x00000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:49"><decl pos:start="39:5" pos:end="39:48"><type pos:start="39:5" pos:end="39:10"><name pos:start="39:5" pos:end="39:10">size_t</name></type> <name pos:start="39:12" pos:end="39:28">flash_sector_size</name>        <init pos:start="39:37" pos:end="39:48">= <expr pos:start="39:39" pos:end="39:48"><literal type="number" pos:start="39:39" pos:end="39:41">128</literal> <operator pos:start="39:43" pos:end="39:43">*</operator> <literal type="number" pos:start="39:45" pos:end="39:48">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:55"><decl pos:start="41:5" pos:end="41:54"><type pos:start="41:5" pos:end="41:10"><name pos:start="41:5" pos:end="41:10">size_t</name></type> <name pos:start="41:12" pos:end="41:21">flash_size</name>               <init pos:start="41:37" pos:end="41:54">= <expr pos:start="41:39" pos:end="41:54"><literal type="number" pos:start="41:39" pos:end="41:40">32</literal> <operator pos:start="41:42" pos:end="41:42">*</operator> <literal type="number" pos:start="41:44" pos:end="41:47">1024</literal> <operator pos:start="41:49" pos:end="41:49">*</operator> <literal type="number" pos:start="41:51" pos:end="41:54">1024</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:49"><decl pos:start="43:5" pos:end="43:48"><type pos:start="43:5" pos:end="43:22"><name pos:start="43:5" pos:end="43:22">target_phys_addr_t</name></type> <name pos:start="43:24" pos:end="43:33">sdram_base</name>   <init pos:start="43:37" pos:end="43:48">= <expr pos:start="43:39" pos:end="43:48"><literal type="number" pos:start="43:39" pos:end="43:48">0x40000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:56"><decl pos:start="45:5" pos:end="45:55"><type pos:start="45:5" pos:end="45:10"><name pos:start="45:5" pos:end="45:10">size_t</name></type> <name pos:start="45:12" pos:end="45:21">sdram_size</name>               <init pos:start="45:37" pos:end="45:55">= <expr pos:start="45:39" pos:end="45:55"><literal type="number" pos:start="45:39" pos:end="45:41">128</literal> <operator pos:start="45:43" pos:end="45:43">*</operator> <literal type="number" pos:start="45:45" pos:end="45:48">1024</literal> <operator pos:start="45:50" pos:end="45:50">*</operator> <literal type="number" pos:start="45:52" pos:end="45:55">1024</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="49:5" pos:end="49:61"><decl pos:start="49:5" pos:end="49:60"><type pos:start="49:5" pos:end="49:22"><name pos:start="49:5" pos:end="49:22">target_phys_addr_t</name></type> <name pos:start="49:24" pos:end="49:34">initrd_base</name>  <init pos:start="49:37" pos:end="49:60">= <expr pos:start="49:39" pos:end="49:60"><name pos:start="49:39" pos:end="49:48">sdram_base</name> <operator pos:start="49:50" pos:end="49:50">+</operator> <literal type="number" pos:start="49:52" pos:end="49:60">0x1002000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:61"><decl pos:start="51:5" pos:end="51:60"><type pos:start="51:5" pos:end="51:22"><name pos:start="51:5" pos:end="51:22">target_phys_addr_t</name></type> <name pos:start="51:24" pos:end="51:35">cmdline_base</name> <init pos:start="51:37" pos:end="51:60">= <expr pos:start="51:39" pos:end="51:60"><name pos:start="51:39" pos:end="51:48">sdram_base</name> <operator pos:start="51:50" pos:end="51:50">+</operator> <literal type="number" pos:start="51:52" pos:end="51:60">0x1000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:47"><decl pos:start="53:5" pos:end="53:46"><type pos:start="53:5" pos:end="53:10"><name pos:start="53:5" pos:end="53:10">size_t</name></type> <name pos:start="53:12" pos:end="53:21">initrd_max</name> <init pos:start="53:23" pos:end="53:46">= <expr pos:start="53:25" pos:end="53:46"><name pos:start="53:25" pos:end="53:34">sdram_size</name> <operator pos:start="53:36" pos:end="53:36">-</operator> <literal type="number" pos:start="53:38" pos:end="53:46">0x1002000</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:46"><expr pos:start="57:5" pos:end="57:45"><name pos:start="57:5" pos:end="57:14">reset_info</name> <operator pos:start="57:16" pos:end="57:16">=</operator> <call pos:start="57:18" pos:end="57:45"><name pos:start="57:18" pos:end="57:26">g_malloc0</name><argument_list pos:start="57:27" pos:end="57:45">(<argument pos:start="57:28" pos:end="57:44"><expr pos:start="57:28" pos:end="57:44"><sizeof pos:start="57:28" pos:end="57:44">sizeof<argument_list pos:start="57:34" pos:end="57:44">(<argument pos:start="57:35" pos:end="57:43"><expr pos:start="57:35" pos:end="57:43"><name pos:start="57:35" pos:end="57:43">ResetInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:26">(<expr pos:start="61:9" pos:end="61:25"><name pos:start="61:9" pos:end="61:17">cpu_model</name> <operator pos:start="61:19" pos:end="61:20">==</operator> <name pos:start="61:22" pos:end="61:25">NULL</name></expr>)</condition> <block pos:start="61:28" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:32">

        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:17">cpu_model</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <literal type="string" pos:start="63:21" pos:end="63:31">"lm32-full"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><name pos:start="67:5" pos:end="67:7">cpu</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:34"><name pos:start="67:11" pos:end="67:23">cpu_lm32_init</name><argument_list pos:start="67:24" pos:end="67:34">(<argument pos:start="67:25" pos:end="67:33"><expr pos:start="67:25" pos:end="67:33"><name pos:start="67:25" pos:end="67:33">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:20"><expr pos:start="69:5" pos:end="69:19"><name pos:start="69:5" pos:end="69:7">env</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <operator pos:start="69:11" pos:end="69:11">&amp;</operator><name pos:start="69:12" pos:end="69:19"><name pos:start="69:12" pos:end="69:14">cpu</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:19">env</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:26"><expr pos:start="71:5" pos:end="71:25"><name pos:start="71:5" pos:end="71:19"><name pos:start="71:5" pos:end="71:14">reset_info</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:19">cpu</name></name> <operator pos:start="71:21" pos:end="71:21">=</operator> <name pos:start="71:23" pos:end="71:25">cpu</name></expr>;</expr_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:41"><expr pos:start="75:5" pos:end="75:40"><call pos:start="75:5" pos:end="75:40"><name pos:start="75:5" pos:end="75:32">cpu_lm32_set_phys_msb_ignore</name><argument_list pos:start="75:33" pos:end="75:40">(<argument pos:start="75:34" pos:end="75:36"><expr pos:start="75:34" pos:end="75:36"><name pos:start="75:34" pos:end="75:36">env</name></expr></argument>, <argument pos:start="75:39" pos:end="75:39"><expr pos:start="75:39" pos:end="75:39"><literal type="number" pos:start="75:39" pos:end="75:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:70"><expr pos:start="79:5" pos:end="79:69"><call pos:start="79:5" pos:end="79:69"><name pos:start="79:5" pos:end="79:26">memory_region_init_ram</name><argument_list pos:start="79:27" pos:end="79:69">(<argument pos:start="79:28" pos:end="79:37"><expr pos:start="79:28" pos:end="79:37"><name pos:start="79:28" pos:end="79:37">phys_sdram</name></expr></argument>, <argument pos:start="79:40" pos:end="79:56"><expr pos:start="79:40" pos:end="79:56"><literal type="string" pos:start="79:40" pos:end="79:56">"milkymist.sdram"</literal></expr></argument>, <argument pos:start="79:59" pos:end="79:68"><expr pos:start="79:59" pos:end="79:68"><name pos:start="79:59" pos:end="79:68">sdram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:44"><expr pos:start="81:5" pos:end="81:43"><call pos:start="81:5" pos:end="81:43"><name pos:start="81:5" pos:end="81:31">vmstate_register_ram_global</name><argument_list pos:start="81:32" pos:end="81:43">(<argument pos:start="81:33" pos:end="81:42"><expr pos:start="81:33" pos:end="81:42"><name pos:start="81:33" pos:end="81:42">phys_sdram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:75"><expr pos:start="83:5" pos:end="83:74"><call pos:start="83:5" pos:end="83:74"><name pos:start="83:5" pos:end="83:31">memory_region_add_subregion</name><argument_list pos:start="83:32" pos:end="83:74">(<argument pos:start="83:33" pos:end="83:49"><expr pos:start="83:33" pos:end="83:49"><name pos:start="83:33" pos:end="83:49">address_space_mem</name></expr></argument>, <argument pos:start="83:52" pos:end="83:61"><expr pos:start="83:52" pos:end="83:61"><name pos:start="83:52" pos:end="83:61">sdram_base</name></expr></argument>, <argument pos:start="83:64" pos:end="83:73"><expr pos:start="83:64" pos:end="83:73"><name pos:start="83:64" pos:end="83:73">phys_sdram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:39"><expr pos:start="87:5" pos:end="87:38"><name pos:start="87:5" pos:end="87:9">dinfo</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <call pos:start="87:13" pos:end="87:38"><name pos:start="87:13" pos:end="87:21">drive_get</name><argument_list pos:start="87:22" pos:end="87:38">(<argument pos:start="87:23" pos:end="87:31"><expr pos:start="87:23" pos:end="87:31"><name pos:start="87:23" pos:end="87:31">IF_PFLASH</name></expr></argument>, <argument pos:start="87:34" pos:end="87:34"><expr pos:start="87:34" pos:end="87:34"><literal type="number" pos:start="87:34" pos:end="87:34">0</literal></expr></argument>, <argument pos:start="87:37" pos:end="87:37"><expr pos:start="87:37" pos:end="87:37"><literal type="number" pos:start="87:37" pos:end="87:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="89:5" pos:end="89:32">/* Numonyx JS28F256J3F105 */</comment>

    <expr_stmt pos:start="91:5" pos:end="97:53"><expr pos:start="91:5" pos:end="97:52"><call pos:start="91:5" pos:end="97:52"><name pos:start="91:5" pos:end="91:25">pflash_cfi01_register</name><argument_list pos:start="91:26" pos:end="97:52">(<argument pos:start="91:27" pos:end="91:36"><expr pos:start="91:27" pos:end="91:36"><name pos:start="91:27" pos:end="91:36">flash_base</name></expr></argument>, <argument pos:start="91:39" pos:end="91:42"><expr pos:start="91:39" pos:end="91:42"><name pos:start="91:39" pos:end="91:42">NULL</name></expr></argument>, <argument pos:start="91:45" pos:end="91:61"><expr pos:start="91:45" pos:end="91:61"><literal type="string" pos:start="91:45" pos:end="91:61">"milkymist.flash"</literal></expr></argument>, <argument pos:start="91:64" pos:end="91:73"><expr pos:start="91:64" pos:end="91:73"><name pos:start="91:64" pos:end="91:73">flash_size</name></expr></argument>,

                          <argument pos:start="93:27" pos:end="93:52"><expr pos:start="93:27" pos:end="93:52"><ternary pos:start="93:27" pos:end="93:52"><condition pos:start="93:27" pos:end="93:33"><expr pos:start="93:27" pos:end="93:31"><name pos:start="93:27" pos:end="93:31">dinfo</name></expr> ?</condition><then pos:start="93:35" pos:end="93:45"> <expr pos:start="93:35" pos:end="93:45"><name pos:start="93:35" pos:end="93:45"><name pos:start="93:35" pos:end="93:39">dinfo</name><operator pos:start="93:40" pos:end="93:41">-&gt;</operator><name pos:start="93:42" pos:end="93:45">bdrv</name></name></expr> </then><else pos:start="93:47" pos:end="93:52">: <expr pos:start="93:49" pos:end="93:52"><name pos:start="93:49" pos:end="93:52">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="93:55" pos:end="93:71"><expr pos:start="93:55" pos:end="93:71"><name pos:start="93:55" pos:end="93:71">flash_sector_size</name></expr></argument>,

                          <argument pos:start="95:27" pos:end="95:56"><expr pos:start="95:27" pos:end="95:56"><name pos:start="95:27" pos:end="95:36">flash_size</name> <operator pos:start="95:38" pos:end="95:38">/</operator> <name pos:start="95:40" pos:end="95:56">flash_sector_size</name></expr></argument>, <argument pos:start="95:59" pos:end="95:59"><expr pos:start="95:59" pos:end="95:59"><literal type="number" pos:start="95:59" pos:end="95:59">2</literal></expr></argument>,

                          <argument pos:start="97:27" pos:end="97:30"><expr pos:start="97:27" pos:end="97:30"><literal type="number" pos:start="97:27" pos:end="97:30">0x00</literal></expr></argument>, <argument pos:start="97:33" pos:end="97:36"><expr pos:start="97:33" pos:end="97:36"><literal type="number" pos:start="97:33" pos:end="97:36">0x89</literal></expr></argument>, <argument pos:start="97:39" pos:end="97:42"><expr pos:start="97:39" pos:end="97:42"><literal type="number" pos:start="97:39" pos:end="97:42">0x00</literal></expr></argument>, <argument pos:start="97:45" pos:end="97:48"><expr pos:start="97:45" pos:end="97:48"><literal type="number" pos:start="97:45" pos:end="97:48">0x1d</literal></expr></argument>, <argument pos:start="97:51" pos:end="97:51"><expr pos:start="97:51" pos:end="97:51"><literal type="number" pos:start="97:51" pos:end="97:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:26">/* create irq lines */</comment>

    <expr_stmt pos:start="103:5" pos:end="103:58"><expr pos:start="103:5" pos:end="103:57"><name pos:start="103:5" pos:end="103:11">cpu_irq</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="103:57"><name pos:start="103:15" pos:end="103:32">qemu_allocate_irqs</name><argument_list pos:start="103:33" pos:end="103:57">(<argument pos:start="103:34" pos:end="103:48"><expr pos:start="103:34" pos:end="103:48"><name pos:start="103:34" pos:end="103:48">cpu_irq_handler</name></expr></argument>, <argument pos:start="103:51" pos:end="103:53"><expr pos:start="103:51" pos:end="103:53"><name pos:start="103:51" pos:end="103:53">env</name></expr></argument>, <argument pos:start="103:56" pos:end="103:56"><expr pos:start="103:56" pos:end="103:56"><literal type="number" pos:start="103:56" pos:end="103:56">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:45"><expr pos:start="105:5" pos:end="105:44"><name pos:start="105:5" pos:end="105:18"><name pos:start="105:5" pos:end="105:7">env</name><operator pos:start="105:8" pos:end="105:9">-&gt;</operator><name pos:start="105:10" pos:end="105:18">pic_state</name></name> <operator pos:start="105:20" pos:end="105:20">=</operator> <call pos:start="105:22" pos:end="105:44"><name pos:start="105:22" pos:end="105:34">lm32_pic_init</name><argument_list pos:start="105:35" pos:end="105:44">(<argument pos:start="105:36" pos:end="105:43"><expr pos:start="105:36" pos:end="105:43"><operator pos:start="105:36" pos:end="105:36">*</operator><name pos:start="105:37" pos:end="105:43">cpu_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="107:5" pos:end="111:5">for <control pos:start="107:9" pos:end="107:28">(<init pos:start="107:10" pos:end="107:15"><expr pos:start="107:10" pos:end="107:14"><name pos:start="107:10" pos:end="107:10">i</name> <operator pos:start="107:12" pos:end="107:12">=</operator> <literal type="number" pos:start="107:14" pos:end="107:14">0</literal></expr>;</init> <condition pos:start="107:17" pos:end="107:23"><expr pos:start="107:17" pos:end="107:22"><name pos:start="107:17" pos:end="107:17">i</name> <operator pos:start="107:19" pos:end="107:19">&lt;</operator> <literal type="number" pos:start="107:21" pos:end="107:22">32</literal></expr>;</condition> <incr pos:start="107:25" pos:end="107:27"><expr pos:start="107:25" pos:end="107:27"><name pos:start="107:25" pos:end="107:25">i</name><operator pos:start="107:26" pos:end="107:27">++</operator></expr></incr>)</control> <block pos:start="107:30" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:53">

        <expr_stmt pos:start="109:9" pos:end="109:53"><expr pos:start="109:9" pos:end="109:52"><name pos:start="109:9" pos:end="109:14"><name pos:start="109:9" pos:end="109:11">irq</name><index pos:start="109:12" pos:end="109:14">[<expr pos:start="109:13" pos:end="109:13"><name pos:start="109:13" pos:end="109:13">i</name></expr>]</index></name> <operator pos:start="109:16" pos:end="109:16">=</operator> <call pos:start="109:18" pos:end="109:52"><name pos:start="109:18" pos:end="109:33">qdev_get_gpio_in</name><argument_list pos:start="109:34" pos:end="109:52">(<argument pos:start="109:35" pos:end="109:48"><expr pos:start="109:35" pos:end="109:48"><name pos:start="109:35" pos:end="109:48"><name pos:start="109:35" pos:end="109:37">env</name><operator pos:start="109:38" pos:end="109:39">-&gt;</operator><name pos:start="109:40" pos:end="109:48">pic_state</name></name></expr></argument>, <argument pos:start="109:51" pos:end="109:51"><expr pos:start="109:51" pos:end="109:51"><name pos:start="109:51" pos:end="109:51">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="115:5" pos:end="115:23">/* load bios rom */</comment>

    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:26">(<expr pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:17">bios_name</name> <operator pos:start="117:19" pos:end="117:20">==</operator> <name pos:start="117:22" pos:end="117:25">NULL</name></expr>)</condition> <block pos:start="117:28" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:34">

        <expr_stmt pos:start="119:9" pos:end="119:34"><expr pos:start="119:9" pos:end="119:33"><name pos:start="119:9" pos:end="119:17">bios_name</name> <operator pos:start="119:19" pos:end="119:19">=</operator> <name pos:start="119:21" pos:end="119:33">BIOS_FILENAME</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:67"><expr pos:start="123:5" pos:end="123:66"><name pos:start="123:5" pos:end="123:17">bios_filename</name> <operator pos:start="123:19" pos:end="123:19">=</operator> <call pos:start="123:21" pos:end="123:66"><name pos:start="123:21" pos:end="123:34">qemu_find_file</name><argument_list pos:start="123:35" pos:end="123:66">(<argument pos:start="123:36" pos:end="123:54"><expr pos:start="123:36" pos:end="123:54"><name pos:start="123:36" pos:end="123:54">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="123:57" pos:end="123:65"><expr pos:start="123:57" pos:end="123:65"><name pos:start="123:57" pos:end="123:65">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="127:5" pos:end="131:5"><if pos:start="127:5" pos:end="131:5">if <condition pos:start="127:8" pos:end="127:22">(<expr pos:start="127:9" pos:end="127:21"><name pos:start="127:9" pos:end="127:21">bios_filename</name></expr>)</condition> <block pos:start="127:24" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:67">

        <expr_stmt pos:start="129:9" pos:end="129:67"><expr pos:start="129:9" pos:end="129:66"><call pos:start="129:9" pos:end="129:66"><name pos:start="129:9" pos:end="129:27">load_image_targphys</name><argument_list pos:start="129:28" pos:end="129:66">(<argument pos:start="129:29" pos:end="129:41"><expr pos:start="129:29" pos:end="129:41"><name pos:start="129:29" pos:end="129:41">bios_filename</name></expr></argument>, <argument pos:start="129:44" pos:end="129:54"><expr pos:start="129:44" pos:end="129:54"><name pos:start="129:44" pos:end="129:54">BIOS_OFFSET</name></expr></argument>, <argument pos:start="129:57" pos:end="129:65"><expr pos:start="129:57" pos:end="129:65"><name pos:start="129:57" pos:end="129:65">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:43"><expr pos:start="135:5" pos:end="135:42"><name pos:start="135:5" pos:end="135:28"><name pos:start="135:5" pos:end="135:14">reset_info</name><operator pos:start="135:15" pos:end="135:16">-&gt;</operator><name pos:start="135:17" pos:end="135:28">bootstrap_pc</name></name> <operator pos:start="135:30" pos:end="135:30">=</operator> <name pos:start="135:32" pos:end="135:42">BIOS_OFFSET</name></expr>;</expr_stmt>



    <comment type="block" pos:start="139:5" pos:end="139:66">/* if no kernel is given no valid bios rom is a fatal error */</comment>

    <if_stmt pos:start="141:5" pos:end="149:5"><if pos:start="141:5" pos:end="149:5">if <condition pos:start="141:8" pos:end="141:53">(<expr pos:start="141:9" pos:end="141:52"><operator pos:start="141:9" pos:end="141:9">!</operator><name pos:start="141:10" pos:end="141:24">kernel_filename</name> <operator pos:start="141:26" pos:end="141:27">&amp;&amp;</operator> <operator pos:start="141:29" pos:end="141:29">!</operator><name pos:start="141:30" pos:end="141:34">dinfo</name> <operator pos:start="141:36" pos:end="141:37">&amp;&amp;</operator> <operator pos:start="141:39" pos:end="141:39">!</operator><name pos:start="141:40" pos:end="141:52">bios_filename</name></expr>)</condition> <block pos:start="141:55" pos:end="149:5">{<block_content pos:start="143:9" pos:end="147:16">

        <expr_stmt pos:start="143:9" pos:end="145:27"><expr pos:start="143:9" pos:end="145:26"><call pos:start="143:9" pos:end="145:26"><name pos:start="143:9" pos:end="143:15">fprintf</name><argument_list pos:start="143:16" pos:end="145:26">(<argument pos:start="143:17" pos:end="143:22"><expr pos:start="143:17" pos:end="143:22"><name pos:start="143:17" pos:end="143:22">stderr</name></expr></argument>, <argument pos:start="143:25" pos:end="143:72"><expr pos:start="143:25" pos:end="143:72"><literal type="string" pos:start="143:25" pos:end="143:72">"qemu: could not load Milkymist One bios '%s'\n"</literal></expr></argument>,

                <argument pos:start="145:17" pos:end="145:25"><expr pos:start="145:17" pos:end="145:25"><name pos:start="145:17" pos:end="145:25">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:16"><expr pos:start="147:9" pos:end="147:15"><call pos:start="147:9" pos:end="147:15"><name pos:start="147:9" pos:end="147:12">exit</name><argument_list pos:start="147:13" pos:end="147:15">(<argument pos:start="147:14" pos:end="147:14"><expr pos:start="147:14" pos:end="147:14"><literal type="number" pos:start="147:14" pos:end="147:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:46"><expr pos:start="153:5" pos:end="153:45"><call pos:start="153:5" pos:end="153:45"><name pos:start="153:5" pos:end="153:25">milkymist_uart_create</name><argument_list pos:start="153:26" pos:end="153:45">(<argument pos:start="153:27" pos:end="153:36"><expr pos:start="153:27" pos:end="153:36"><literal type="number" pos:start="153:27" pos:end="153:36">0x60000000</literal></expr></argument>, <argument pos:start="153:39" pos:end="153:44"><expr pos:start="153:39" pos:end="153:44"><name pos:start="153:39" pos:end="153:44"><name pos:start="153:39" pos:end="153:41">irq</name><index pos:start="153:42" pos:end="153:44">[<expr pos:start="153:43" pos:end="153:43"><literal type="number" pos:start="153:43" pos:end="153:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="157:58"><expr pos:start="155:5" pos:end="157:57"><call pos:start="155:5" pos:end="157:57"><name pos:start="155:5" pos:end="155:27">milkymist_sysctl_create</name><argument_list pos:start="155:28" pos:end="157:57">(<argument pos:start="155:29" pos:end="155:38"><expr pos:start="155:29" pos:end="155:38"><literal type="number" pos:start="155:29" pos:end="155:38">0x60001000</literal></expr></argument>, <argument pos:start="155:41" pos:end="155:46"><expr pos:start="155:41" pos:end="155:46"><name pos:start="155:41" pos:end="155:46"><name pos:start="155:41" pos:end="155:43">irq</name><index pos:start="155:44" pos:end="155:46">[<expr pos:start="155:45" pos:end="155:45"><literal type="number" pos:start="155:45" pos:end="155:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="155:49" pos:end="155:54"><expr pos:start="155:49" pos:end="155:54"><name pos:start="155:49" pos:end="155:54"><name pos:start="155:49" pos:end="155:51">irq</name><index pos:start="155:52" pos:end="155:54">[<expr pos:start="155:53" pos:end="155:53"><literal type="number" pos:start="155:53" pos:end="155:53">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="155:57" pos:end="155:62"><expr pos:start="155:57" pos:end="155:62"><name pos:start="155:57" pos:end="155:62"><name pos:start="155:57" pos:end="155:59">irq</name><index pos:start="155:60" pos:end="155:62">[<expr pos:start="155:61" pos:end="155:61"><literal type="number" pos:start="155:61" pos:end="155:61">3</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="157:13" pos:end="157:20"><expr pos:start="157:13" pos:end="157:20"><literal type="number" pos:start="157:13" pos:end="157:20">80000000</literal></expr></argument>, <argument pos:start="157:23" pos:end="157:32"><expr pos:start="157:23" pos:end="157:32"><literal type="number" pos:start="157:23" pos:end="157:32">0x10014d31</literal></expr></argument>, <argument pos:start="157:35" pos:end="157:44"><expr pos:start="157:35" pos:end="157:44"><literal type="number" pos:start="157:35" pos:end="157:44">0x0000041f</literal></expr></argument>, <argument pos:start="157:47" pos:end="157:56"><expr pos:start="157:47" pos:end="157:56"><literal type="number" pos:start="157:47" pos:end="157:56">0x00000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:39"><expr pos:start="159:5" pos:end="159:38"><call pos:start="159:5" pos:end="159:38"><name pos:start="159:5" pos:end="159:26">milkymist_hpdmc_create</name><argument_list pos:start="159:27" pos:end="159:38">(<argument pos:start="159:28" pos:end="159:37"><expr pos:start="159:28" pos:end="159:37"><literal type="number" pos:start="159:28" pos:end="159:37">0x60002000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:63"><expr pos:start="161:5" pos:end="161:62"><call pos:start="161:5" pos:end="161:62"><name pos:start="161:5" pos:end="161:26">milkymist_vgafb_create</name><argument_list pos:start="161:27" pos:end="161:62">(<argument pos:start="161:28" pos:end="161:37"><expr pos:start="161:28" pos:end="161:37"><literal type="number" pos:start="161:28" pos:end="161:37">0x60003000</literal></expr></argument>, <argument pos:start="161:40" pos:end="161:49"><expr pos:start="161:40" pos:end="161:49"><literal type="number" pos:start="161:40" pos:end="161:49">0x40000000</literal></expr></argument>, <argument pos:start="161:52" pos:end="161:61"><expr pos:start="161:52" pos:end="161:61"><literal type="number" pos:start="161:52" pos:end="161:61">0x0fffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:41"><expr pos:start="163:5" pos:end="163:40"><call pos:start="163:5" pos:end="163:40"><name pos:start="163:5" pos:end="163:28">milkymist_memcard_create</name><argument_list pos:start="163:29" pos:end="163:40">(<argument pos:start="163:30" pos:end="163:39"><expr pos:start="163:30" pos:end="163:39"><literal type="number" pos:start="163:30" pos:end="163:39">0x60004000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:70"><expr pos:start="165:5" pos:end="165:69"><call pos:start="165:5" pos:end="165:69"><name pos:start="165:5" pos:end="165:25">milkymist_ac97_create</name><argument_list pos:start="165:26" pos:end="165:69">(<argument pos:start="165:27" pos:end="165:36"><expr pos:start="165:27" pos:end="165:36"><literal type="number" pos:start="165:27" pos:end="165:36">0x60005000</literal></expr></argument>, <argument pos:start="165:39" pos:end="165:44"><expr pos:start="165:39" pos:end="165:44"><name pos:start="165:39" pos:end="165:44"><name pos:start="165:39" pos:end="165:41">irq</name><index pos:start="165:42" pos:end="165:44">[<expr pos:start="165:43" pos:end="165:43"><literal type="number" pos:start="165:43" pos:end="165:43">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="165:47" pos:end="165:52"><expr pos:start="165:47" pos:end="165:52"><name pos:start="165:47" pos:end="165:52"><name pos:start="165:47" pos:end="165:49">irq</name><index pos:start="165:50" pos:end="165:52">[<expr pos:start="165:51" pos:end="165:51"><literal type="number" pos:start="165:51" pos:end="165:51">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="165:55" pos:end="165:60"><expr pos:start="165:55" pos:end="165:60"><name pos:start="165:55" pos:end="165:60"><name pos:start="165:55" pos:end="165:57">irq</name><index pos:start="165:58" pos:end="165:60">[<expr pos:start="165:59" pos:end="165:59"><literal type="number" pos:start="165:59" pos:end="165:59">6</literal></expr>]</index></name></expr></argument>, <argument pos:start="165:63" pos:end="165:68"><expr pos:start="165:63" pos:end="165:68"><name pos:start="165:63" pos:end="165:68"><name pos:start="165:63" pos:end="165:65">irq</name><index pos:start="165:66" pos:end="165:68">[<expr pos:start="165:67" pos:end="165:67"><literal type="number" pos:start="165:67" pos:end="165:67">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:46"><expr pos:start="167:5" pos:end="167:45"><call pos:start="167:5" pos:end="167:45"><name pos:start="167:5" pos:end="167:25">milkymist_pfpu_create</name><argument_list pos:start="167:26" pos:end="167:45">(<argument pos:start="167:27" pos:end="167:36"><expr pos:start="167:27" pos:end="167:36"><literal type="number" pos:start="167:27" pos:end="167:36">0x60006000</literal></expr></argument>, <argument pos:start="167:39" pos:end="167:44"><expr pos:start="167:39" pos:end="167:44"><name pos:start="167:39" pos:end="167:44"><name pos:start="167:39" pos:end="167:41">irq</name><index pos:start="167:42" pos:end="167:44">[<expr pos:start="167:43" pos:end="167:43"><literal type="number" pos:start="167:43" pos:end="167:43">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:46"><expr pos:start="169:5" pos:end="169:45"><call pos:start="169:5" pos:end="169:45"><name pos:start="169:5" pos:end="169:25">milkymist_tmu2_create</name><argument_list pos:start="169:26" pos:end="169:45">(<argument pos:start="169:27" pos:end="169:36"><expr pos:start="169:27" pos:end="169:36"><literal type="number" pos:start="169:27" pos:end="169:36">0x60007000</literal></expr></argument>, <argument pos:start="169:39" pos:end="169:44"><expr pos:start="169:39" pos:end="169:44"><name pos:start="169:39" pos:end="169:44"><name pos:start="169:39" pos:end="169:41">irq</name><index pos:start="169:42" pos:end="169:44">[<expr pos:start="169:43" pos:end="169:43"><literal type="number" pos:start="169:43" pos:end="169:43">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:72"><expr pos:start="171:5" pos:end="171:71"><call pos:start="171:5" pos:end="171:71"><name pos:start="171:5" pos:end="171:29">milkymist_minimac2_create</name><argument_list pos:start="171:30" pos:end="171:71">(<argument pos:start="171:31" pos:end="171:40"><expr pos:start="171:31" pos:end="171:40"><literal type="number" pos:start="171:31" pos:end="171:40">0x60008000</literal></expr></argument>, <argument pos:start="171:43" pos:end="171:52"><expr pos:start="171:43" pos:end="171:52"><literal type="number" pos:start="171:43" pos:end="171:52">0x30000000</literal></expr></argument>, <argument pos:start="171:55" pos:end="171:61"><expr pos:start="171:55" pos:end="171:61"><name pos:start="171:55" pos:end="171:61"><name pos:start="171:55" pos:end="171:57">irq</name><index pos:start="171:58" pos:end="171:61">[<expr pos:start="171:59" pos:end="171:60"><literal type="number" pos:start="171:59" pos:end="171:60">10</literal></expr>]</index></name></expr></argument>, <argument pos:start="171:64" pos:end="171:70"><expr pos:start="171:64" pos:end="171:70"><name pos:start="171:64" pos:end="171:70"><name pos:start="171:64" pos:end="171:66">irq</name><index pos:start="171:67" pos:end="171:70">[<expr pos:start="171:68" pos:end="171:69"><literal type="number" pos:start="171:68" pos:end="171:69">11</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="175:52"><expr pos:start="173:5" pos:end="175:51"><call pos:start="173:5" pos:end="175:51"><name pos:start="173:5" pos:end="173:28">milkymist_softusb_create</name><argument_list pos:start="173:29" pos:end="175:51">(<argument pos:start="173:30" pos:end="173:39"><expr pos:start="173:30" pos:end="173:39"><literal type="number" pos:start="173:30" pos:end="173:39">0x6000f000</literal></expr></argument>, <argument pos:start="173:42" pos:end="173:48"><expr pos:start="173:42" pos:end="173:48"><name pos:start="173:42" pos:end="173:48"><name pos:start="173:42" pos:end="173:44">irq</name><index pos:start="173:45" pos:end="173:48">[<expr pos:start="173:46" pos:end="173:47"><literal type="number" pos:start="173:46" pos:end="173:47">15</literal></expr>]</index></name></expr></argument>,

            <argument pos:start="175:13" pos:end="175:22"><expr pos:start="175:13" pos:end="175:22"><literal type="number" pos:start="175:13" pos:end="175:22">0x20000000</literal></expr></argument>, <argument pos:start="175:25" pos:end="175:30"><expr pos:start="175:25" pos:end="175:30"><literal type="number" pos:start="175:25" pos:end="175:30">0x1000</literal></expr></argument>, <argument pos:start="175:33" pos:end="175:42"><expr pos:start="175:33" pos:end="175:42"><literal type="number" pos:start="175:33" pos:end="175:42">0x20020000</literal></expr></argument>, <argument pos:start="175:45" pos:end="175:50"><expr pos:start="175:45" pos:end="175:50"><literal type="number" pos:start="175:45" pos:end="175:50">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="179:5" pos:end="179:49">/* make sure juart isn't the first chardev */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:41"><expr pos:start="181:5" pos:end="181:40"><name pos:start="181:5" pos:end="181:20"><name pos:start="181:5" pos:end="181:7">env</name><operator pos:start="181:8" pos:end="181:9">-&gt;</operator><name pos:start="181:10" pos:end="181:20">juart_state</name></name> <operator pos:start="181:22" pos:end="181:22">=</operator> <call pos:start="181:24" pos:end="181:40"><name pos:start="181:24" pos:end="181:38">lm32_juart_init</name><argument_list pos:start="181:39" pos:end="181:40">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="185:5" pos:end="223:5"><if pos:start="185:5" pos:end="223:5">if <condition pos:start="185:8" pos:end="185:24">(<expr pos:start="185:9" pos:end="185:23"><name pos:start="185:9" pos:end="185:23">kernel_filename</name></expr>)</condition> <block pos:start="185:26" pos:end="223:5">{<block_content pos:start="187:9" pos:end="221:9">

        <decl_stmt pos:start="187:9" pos:end="187:23"><decl pos:start="187:9" pos:end="187:22"><type pos:start="187:9" pos:end="187:16"><name pos:start="187:9" pos:end="187:16">uint64_t</name></type> <name pos:start="187:18" pos:end="187:22">entry</name></decl>;</decl_stmt>



        <comment type="block" pos:start="191:9" pos:end="191:41">/* Boots a kernel elf binary.  */</comment>

        <expr_stmt pos:start="193:9" pos:end="195:50"><expr pos:start="193:9" pos:end="195:49"><name pos:start="193:9" pos:end="193:19">kernel_size</name> <operator pos:start="193:21" pos:end="193:21">=</operator> <call pos:start="193:23" pos:end="195:49"><name pos:start="193:23" pos:end="193:30">load_elf</name><argument_list pos:start="193:31" pos:end="195:49">(<argument pos:start="193:32" pos:end="193:46"><expr pos:start="193:32" pos:end="193:46"><name pos:start="193:32" pos:end="193:46">kernel_filename</name></expr></argument>, <argument pos:start="193:49" pos:end="193:52"><expr pos:start="193:49" pos:end="193:52"><name pos:start="193:49" pos:end="193:52">NULL</name></expr></argument>, <argument pos:start="193:55" pos:end="193:58"><expr pos:start="193:55" pos:end="193:58"><name pos:start="193:55" pos:end="193:58">NULL</name></expr></argument>, <argument pos:start="193:61" pos:end="193:66"><expr pos:start="193:61" pos:end="193:66"><operator pos:start="193:61" pos:end="193:61">&amp;</operator><name pos:start="193:62" pos:end="193:66">entry</name></expr></argument>, <argument pos:start="193:69" pos:end="193:72"><expr pos:start="193:69" pos:end="193:72"><name pos:start="193:69" pos:end="193:72">NULL</name></expr></argument>, <argument pos:start="193:75" pos:end="193:78"><expr pos:start="193:75" pos:end="193:78"><name pos:start="193:75" pos:end="193:78">NULL</name></expr></argument>,

                               <argument pos:start="195:32" pos:end="195:32"><expr pos:start="195:32" pos:end="195:32"><literal type="number" pos:start="195:32" pos:end="195:32">1</literal></expr></argument>, <argument pos:start="195:35" pos:end="195:45"><expr pos:start="195:35" pos:end="195:45"><name pos:start="195:35" pos:end="195:45">ELF_MACHINE</name></expr></argument>, <argument pos:start="195:48" pos:end="195:48"><expr pos:start="195:48" pos:end="195:48"><literal type="number" pos:start="195:48" pos:end="195:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:41"><expr pos:start="197:9" pos:end="197:40"><name pos:start="197:9" pos:end="197:32"><name pos:start="197:9" pos:end="197:18">reset_info</name><operator pos:start="197:19" pos:end="197:20">-&gt;</operator><name pos:start="197:21" pos:end="197:32">bootstrap_pc</name></name> <operator pos:start="197:34" pos:end="197:34">=</operator> <name pos:start="197:36" pos:end="197:40">entry</name></expr>;</expr_stmt>



        <if_stmt pos:start="201:9" pos:end="209:9"><if pos:start="201:9" pos:end="209:9">if <condition pos:start="201:12" pos:end="201:28">(<expr pos:start="201:13" pos:end="201:27"><name pos:start="201:13" pos:end="201:23">kernel_size</name> <operator pos:start="201:25" pos:end="201:25">&lt;</operator> <literal type="number" pos:start="201:27" pos:end="201:27">0</literal></expr>)</condition> <block pos:start="201:30" pos:end="209:9">{<block_content pos:start="203:13" pos:end="207:50">

            <expr_stmt pos:start="203:13" pos:end="205:58"><expr pos:start="203:13" pos:end="205:57"><name pos:start="203:13" pos:end="203:23">kernel_size</name> <operator pos:start="203:25" pos:end="203:25">=</operator> <call pos:start="203:27" pos:end="205:57"><name pos:start="203:27" pos:end="203:45">load_image_targphys</name><argument_list pos:start="203:46" pos:end="205:57">(<argument pos:start="203:47" pos:end="203:61"><expr pos:start="203:47" pos:end="203:61"><name pos:start="203:47" pos:end="203:61">kernel_filename</name></expr></argument>, <argument pos:start="203:64" pos:end="203:73"><expr pos:start="203:64" pos:end="203:73"><name pos:start="203:64" pos:end="203:73">sdram_base</name></expr></argument>,

                                              <argument pos:start="205:47" pos:end="205:56"><expr pos:start="205:47" pos:end="205:56"><name pos:start="205:47" pos:end="205:56">sdram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:50"><expr pos:start="207:13" pos:end="207:49"><name pos:start="207:13" pos:end="207:36"><name pos:start="207:13" pos:end="207:22">reset_info</name><operator pos:start="207:23" pos:end="207:24">-&gt;</operator><name pos:start="207:25" pos:end="207:36">bootstrap_pc</name></name> <operator pos:start="207:38" pos:end="207:38">=</operator> <name pos:start="207:40" pos:end="207:49">sdram_base</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="213:9" pos:end="221:9"><if pos:start="213:9" pos:end="221:9">if <condition pos:start="213:12" pos:end="213:28">(<expr pos:start="213:13" pos:end="213:27"><name pos:start="213:13" pos:end="213:23">kernel_size</name> <operator pos:start="213:25" pos:end="213:25">&lt;</operator> <literal type="number" pos:start="213:27" pos:end="213:27">0</literal></expr>)</condition> <block pos:start="213:30" pos:end="221:9">{<block_content pos:start="215:13" pos:end="219:20">

            <expr_stmt pos:start="215:13" pos:end="217:37"><expr pos:start="215:13" pos:end="217:36"><call pos:start="215:13" pos:end="217:36"><name pos:start="215:13" pos:end="215:19">fprintf</name><argument_list pos:start="215:20" pos:end="217:36">(<argument pos:start="215:21" pos:end="215:26"><expr pos:start="215:21" pos:end="215:26"><name pos:start="215:21" pos:end="215:26">stderr</name></expr></argument>, <argument pos:start="215:29" pos:end="215:64"><expr pos:start="215:29" pos:end="215:64"><literal type="string" pos:start="215:29" pos:end="215:64">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                    <argument pos:start="217:21" pos:end="217:35"><expr pos:start="217:21" pos:end="217:35"><name pos:start="217:21" pos:end="217:35">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:20"><expr pos:start="219:13" pos:end="219:19"><call pos:start="219:13" pos:end="219:19"><name pos:start="219:13" pos:end="219:16">exit</name><argument_list pos:start="219:17" pos:end="219:19">(<argument pos:start="219:18" pos:end="219:18"><expr pos:start="219:18" pos:end="219:18"><literal type="number" pos:start="219:18" pos:end="219:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="227:5" pos:end="235:5"><if pos:start="227:5" pos:end="235:5">if <condition pos:start="227:8" pos:end="227:49">(<expr pos:start="227:9" pos:end="227:48"><name pos:start="227:9" pos:end="227:22">kernel_cmdline</name> <operator pos:start="227:24" pos:end="227:25">&amp;&amp;</operator> <call pos:start="227:27" pos:end="227:48"><name pos:start="227:27" pos:end="227:32">strlen</name><argument_list pos:start="227:33" pos:end="227:48">(<argument pos:start="227:34" pos:end="227:47"><expr pos:start="227:34" pos:end="227:47"><name pos:start="227:34" pos:end="227:47">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="227:51" pos:end="235:5">{<block_content pos:start="229:9" pos:end="233:58">

        <expr_stmt pos:start="229:9" pos:end="231:32"><expr pos:start="229:9" pos:end="231:31"><call pos:start="229:9" pos:end="231:31"><name pos:start="229:9" pos:end="229:24">pstrcpy_targphys</name><argument_list pos:start="229:25" pos:end="231:31">(<argument pos:start="229:26" pos:end="229:34"><expr pos:start="229:26" pos:end="229:34"><literal type="string" pos:start="229:26" pos:end="229:34">"cmdline"</literal></expr></argument>, <argument pos:start="229:37" pos:end="229:48"><expr pos:start="229:37" pos:end="229:48"><name pos:start="229:37" pos:end="229:48">cmdline_base</name></expr></argument>, <argument pos:start="229:51" pos:end="229:66"><expr pos:start="229:51" pos:end="229:66"><name pos:start="229:51" pos:end="229:66">TARGET_PAGE_SIZE</name></expr></argument>,

                <argument pos:start="231:17" pos:end="231:30"><expr pos:start="231:17" pos:end="231:30"><name pos:start="231:17" pos:end="231:30">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="233:9" pos:end="233:58"><expr pos:start="233:9" pos:end="233:57"><name pos:start="233:9" pos:end="233:32"><name pos:start="233:9" pos:end="233:18">reset_info</name><operator pos:start="233:19" pos:end="233:20">-&gt;</operator><name pos:start="233:21" pos:end="233:32">cmdline_base</name></name> <operator pos:start="233:34" pos:end="233:34">=</operator> <operator pos:start="233:36" pos:end="233:36">(</operator><name pos:start="233:37" pos:end="233:44">uint32_t</name><operator pos:start="233:45" pos:end="233:45">)</operator><name pos:start="233:46" pos:end="233:57">cmdline_base</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="239:5" pos:end="251:5"><if pos:start="239:5" pos:end="251:5">if <condition pos:start="239:8" pos:end="239:24">(<expr pos:start="239:9" pos:end="239:23"><name pos:start="239:9" pos:end="239:23">initrd_filename</name></expr>)</condition> <block pos:start="239:26" pos:end="251:5">{<block_content pos:start="241:9" pos:end="249:56">

        <decl_stmt pos:start="241:9" pos:end="241:27"><decl pos:start="241:9" pos:end="241:26"><type pos:start="241:9" pos:end="241:14"><name pos:start="241:9" pos:end="241:14">size_t</name></type> <name pos:start="241:16" pos:end="241:26">initrd_size</name></decl>;</decl_stmt>

        <expr_stmt pos:start="243:9" pos:end="245:28"><expr pos:start="243:9" pos:end="245:27"><name pos:start="243:9" pos:end="243:19">initrd_size</name> <operator pos:start="243:21" pos:end="243:21">=</operator> <call pos:start="243:23" pos:end="245:27"><name pos:start="243:23" pos:end="243:41">load_image_targphys</name><argument_list pos:start="243:42" pos:end="245:27">(<argument pos:start="243:43" pos:end="243:57"><expr pos:start="243:43" pos:end="243:57"><name pos:start="243:43" pos:end="243:57">initrd_filename</name></expr></argument>, <argument pos:start="243:60" pos:end="243:70"><expr pos:start="243:60" pos:end="243:70"><name pos:start="243:60" pos:end="243:70">initrd_base</name></expr></argument>,

                <argument pos:start="245:17" pos:end="245:26"><expr pos:start="245:17" pos:end="245:26"><name pos:start="245:17" pos:end="245:26">initrd_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:56"><expr pos:start="247:9" pos:end="247:55"><name pos:start="247:9" pos:end="247:31"><name pos:start="247:9" pos:end="247:18">reset_info</name><operator pos:start="247:19" pos:end="247:20">-&gt;</operator><name pos:start="247:21" pos:end="247:31">initrd_base</name></name> <operator pos:start="247:33" pos:end="247:33">=</operator> <operator pos:start="247:35" pos:end="247:35">(</operator><name pos:start="247:36" pos:end="247:43">uint32_t</name><operator pos:start="247:44" pos:end="247:44">)</operator><name pos:start="247:45" pos:end="247:55">initrd_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="249:9" pos:end="249:56"><expr pos:start="249:9" pos:end="249:55"><name pos:start="249:9" pos:end="249:31"><name pos:start="249:9" pos:end="249:18">reset_info</name><operator pos:start="249:19" pos:end="249:20">-&gt;</operator><name pos:start="249:21" pos:end="249:31">initrd_size</name></name> <operator pos:start="249:33" pos:end="249:33">=</operator> <operator pos:start="249:35" pos:end="249:35">(</operator><name pos:start="249:36" pos:end="249:43">uint32_t</name><operator pos:start="249:44" pos:end="249:44">)</operator><name pos:start="249:45" pos:end="249:55">initrd_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="255:5" pos:end="255:52"><expr pos:start="255:5" pos:end="255:51"><call pos:start="255:5" pos:end="255:51"><name pos:start="255:5" pos:end="255:23">qemu_register_reset</name><argument_list pos:start="255:24" pos:end="255:51">(<argument pos:start="255:25" pos:end="255:38"><expr pos:start="255:25" pos:end="255:38"><name pos:start="255:25" pos:end="255:38">main_cpu_reset</name></expr></argument>, <argument pos:start="255:41" pos:end="255:50"><expr pos:start="255:41" pos:end="255:50"><name pos:start="255:41" pos:end="255:50">reset_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
