<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12058.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:37">thread_get_buffer_internal</name><parameter_list pos:start="1:38" pos:end="1:87">(<parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:59"><name pos:start="1:39" pos:end="1:52">AVCodecContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">avctx</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:75"><decl pos:start="1:62" pos:end="1:75"><type pos:start="1:62" pos:end="1:75"><name pos:start="1:62" pos:end="1:72">ThreadFrame</name> <modifier pos:start="1:74" pos:end="1:74">*</modifier></type><name pos:start="1:75" pos:end="1:75">f</name></decl></parameter>, <parameter pos:start="1:78" pos:end="1:86"><decl pos:start="1:78" pos:end="1:86"><type pos:start="1:78" pos:end="1:86"><name pos:start="1:78" pos:end="1:80">int</name></type> <name pos:start="1:82" pos:end="1:86">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:15">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">PerThreadContext</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:23">p</name> <init pos:start="5:25" pos:end="5:53">= <expr pos:start="5:27" pos:end="5:53"><name pos:start="5:27" pos:end="5:53"><name pos:start="5:27" pos:end="5:31">avctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:41">internal</name><operator pos:start="5:42" pos:end="5:43">-&gt;</operator><name pos:start="5:44" pos:end="5:53">thread_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">err</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:21"><expr pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:5">f</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:12">owner</name></name> <operator pos:start="11:14" pos:end="11:14">=</operator> <name pos:start="11:16" pos:end="11:20">avctx</name></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:37"><expr pos:start="15:5" pos:end="15:36"><call pos:start="15:5" pos:end="15:36"><name pos:start="15:5" pos:end="15:23">ff_init_buffer_info</name><argument_list pos:start="15:24" pos:end="15:36">(<argument pos:start="15:25" pos:end="15:29"><expr pos:start="15:25" pos:end="15:29"><name pos:start="15:25" pos:end="15:29">avctx</name></expr></argument>, <argument pos:start="15:32" pos:end="15:35"><expr pos:start="15:32" pos:end="15:35"><name pos:start="15:32" pos:end="15:35"><name pos:start="15:32" pos:end="15:32">f</name><operator pos:start="15:33" pos:end="15:34">-&gt;</operator><name pos:start="15:35" pos:end="15:35">f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="21:49"><if pos:start="19:5" pos:end="21:49">if <condition pos:start="19:8" pos:end="19:55">(<expr pos:start="19:9" pos:end="19:54"><operator pos:start="19:9" pos:end="19:9">!</operator><operator pos:start="19:10" pos:end="19:10">(</operator><name pos:start="19:11" pos:end="19:35"><name pos:start="19:11" pos:end="19:15">avctx</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:35">active_thread_type</name></name> <operator pos:start="19:37" pos:end="19:37">&amp;</operator> <name pos:start="19:39" pos:end="19:53">FF_THREAD_FRAME</name><operator pos:start="19:54" pos:end="19:54">)</operator></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:49"><block_content pos:start="21:9" pos:end="21:49">

        <return pos:start="21:9" pos:end="21:49">return <expr pos:start="21:16" pos:end="21:48"><call pos:start="21:16" pos:end="21:48"><name pos:start="21:16" pos:end="21:28">ff_get_buffer</name><argument_list pos:start="21:29" pos:end="21:48">(<argument pos:start="21:30" pos:end="21:34"><expr pos:start="21:30" pos:end="21:34"><name pos:start="21:30" pos:end="21:34">avctx</name></expr></argument>, <argument pos:start="21:37" pos:end="21:40"><expr pos:start="21:37" pos:end="21:40"><name pos:start="21:37" pos:end="21:40"><name pos:start="21:37" pos:end="21:37">f</name><operator pos:start="21:38" pos:end="21:39">-&gt;</operator><name pos:start="21:40" pos:end="21:40">f</name></name></expr></argument>, <argument pos:start="21:43" pos:end="21:47"><expr pos:start="21:43" pos:end="21:47"><name pos:start="21:43" pos:end="21:47">flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="27:79">(<expr pos:start="25:9" pos:end="27:78"><call pos:start="25:9" pos:end="25:30"><name pos:start="25:9" pos:end="25:19">atomic_load</name><argument_list pos:start="25:20" pos:end="25:30">(<argument pos:start="25:21" pos:end="25:29"><expr pos:start="25:21" pos:end="25:29"><operator pos:start="25:21" pos:end="25:21">&amp;</operator><name pos:start="25:22" pos:end="25:29"><name pos:start="25:22" pos:end="25:22">p</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:29">state</name></name></expr></argument>)</argument_list></call> <operator pos:start="25:32" pos:end="25:33">!=</operator> <name pos:start="25:35" pos:end="25:50">STATE_SETTING_UP</name> <operator pos:start="25:52" pos:end="25:53">&amp;&amp;</operator>

        <operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:44"><name pos:start="27:10" pos:end="27:14">avctx</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:21">codec</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:44">update_thread_context</name></name> <operator pos:start="27:46" pos:end="27:47">||</operator> <operator pos:start="27:49" pos:end="27:49">!</operator><call pos:start="27:50" pos:end="27:77"><name pos:start="27:50" pos:end="27:70">THREAD_SAFE_CALLBACKS</name><argument_list pos:start="27:71" pos:end="27:77">(<argument pos:start="27:72" pos:end="27:76"><expr pos:start="27:72" pos:end="27:76"><name pos:start="27:72" pos:end="27:76">avctx</name></expr></argument>)</argument_list></call><operator pos:start="27:78" pos:end="27:78">)</operator></expr>)</condition> <block pos:start="27:81" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:102"><expr pos:start="29:9" pos:end="29:101"><call pos:start="29:9" pos:end="29:101"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:101">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:100"><expr pos:start="29:37" pos:end="29:100"><literal type="string" pos:start="29:37" pos:end="29:100">"get_buffer() cannot be called after ff_thread_finish_setup()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="57:5"><if pos:start="37:5" pos:end="57:5">if <condition pos:start="37:8" pos:end="37:43">(<expr pos:start="37:9" pos:end="37:42"><name pos:start="37:9" pos:end="37:42"><name pos:start="37:9" pos:end="37:13">avctx</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:23">internal</name><operator pos:start="37:24" pos:end="37:25">-&gt;</operator><name pos:start="37:26" pos:end="37:42">allocate_progress</name></name></expr>)</condition> <block pos:start="37:45" pos:end="57:5">{<block_content pos:start="39:9" pos:end="55:38">

        <decl_stmt pos:start="39:9" pos:end="39:29"><decl pos:start="39:9" pos:end="39:28"><type pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:18">atomic_int</name> <modifier pos:start="39:20" pos:end="39:20">*</modifier></type><name pos:start="39:21" pos:end="39:28">progress</name></decl>;</decl_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:61"><expr pos:start="41:9" pos:end="41:60"><name pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:9">f</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:19">progress</name></name> <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="41:60"><name pos:start="41:23" pos:end="41:37">av_buffer_alloc</name><argument_list pos:start="41:38" pos:end="41:60">(<argument pos:start="41:39" pos:end="41:59"><expr pos:start="41:39" pos:end="41:59"><literal type="number" pos:start="41:39" pos:end="41:39">2</literal> <operator pos:start="41:41" pos:end="41:41">*</operator> <sizeof pos:start="41:43" pos:end="41:59">sizeof<argument_list pos:start="41:49" pos:end="41:59">(<argument pos:start="41:50" pos:end="41:58"><expr pos:start="41:50" pos:end="41:58"><operator pos:start="41:50" pos:end="41:50">*</operator><name pos:start="41:51" pos:end="41:58">progress</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:25">(<expr pos:start="43:13" pos:end="43:24"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:24"><name pos:start="43:14" pos:end="43:14">f</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:24">progress</name></name></expr>)</condition> <block pos:start="43:27" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:35">

            <return pos:start="45:13" pos:end="45:35">return <expr pos:start="45:20" pos:end="45:34"><call pos:start="45:20" pos:end="45:34"><name pos:start="45:20" pos:end="45:26">AVERROR</name><argument_list pos:start="45:27" pos:end="45:34">(<argument pos:start="45:28" pos:end="45:33"><expr pos:start="45:28" pos:end="45:33"><name pos:start="45:28" pos:end="45:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:50"><expr pos:start="49:9" pos:end="49:49"><name pos:start="49:9" pos:end="49:16">progress</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <operator pos:start="49:20" pos:end="49:20">(</operator><name pos:start="49:21" pos:end="49:30">atomic_int</name><operator pos:start="49:31" pos:end="49:31">*</operator><operator pos:start="49:32" pos:end="49:32">)</operator><name pos:start="49:33" pos:end="49:49"><name pos:start="49:33" pos:end="49:33">f</name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:43">progress</name><operator pos:start="49:44" pos:end="49:45">-&gt;</operator><name pos:start="49:46" pos:end="49:49">data</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:38"><expr pos:start="53:9" pos:end="53:37"><call pos:start="53:9" pos:end="53:37"><name pos:start="53:9" pos:end="53:19">atomic_init</name><argument_list pos:start="53:20" pos:end="53:37">(<argument pos:start="53:21" pos:end="53:32"><expr pos:start="53:21" pos:end="53:32"><operator pos:start="53:21" pos:end="53:21">&amp;</operator><name pos:start="53:22" pos:end="53:32"><name pos:start="53:22" pos:end="53:29">progress</name><index pos:start="53:30" pos:end="53:32">[<expr pos:start="53:31" pos:end="53:31"><literal type="number" pos:start="53:31" pos:end="53:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="53:35" pos:end="53:36"><expr pos:start="53:35" pos:end="53:36"><operator pos:start="53:35" pos:end="53:35">-</operator><literal type="number" pos:start="53:36" pos:end="53:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:38"><expr pos:start="55:9" pos:end="55:37"><call pos:start="55:9" pos:end="55:37"><name pos:start="55:9" pos:end="55:19">atomic_init</name><argument_list pos:start="55:20" pos:end="55:37">(<argument pos:start="55:21" pos:end="55:32"><expr pos:start="55:21" pos:end="55:32"><operator pos:start="55:21" pos:end="55:21">&amp;</operator><name pos:start="55:22" pos:end="55:32"><name pos:start="55:22" pos:end="55:29">progress</name><index pos:start="55:30" pos:end="55:32">[<expr pos:start="55:31" pos:end="55:31"><literal type="number" pos:start="55:31" pos:end="55:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="55:35" pos:end="55:36"><expr pos:start="55:35" pos:end="55:36"><operator pos:start="55:35" pos:end="55:35">-</operator><literal type="number" pos:start="55:36" pos:end="55:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:49"><expr pos:start="61:5" pos:end="61:48"><call pos:start="61:5" pos:end="61:48"><name pos:start="61:5" pos:end="61:22">pthread_mutex_lock</name><argument_list pos:start="61:23" pos:end="61:48">(<argument pos:start="61:24" pos:end="61:47"><expr pos:start="61:24" pos:end="61:47"><operator pos:start="61:24" pos:end="61:24">&amp;</operator><name pos:start="61:25" pos:end="61:47"><name pos:start="61:25" pos:end="61:25">p</name><operator pos:start="61:26" pos:end="61:27">-&gt;</operator><name pos:start="61:28" pos:end="61:33">parent</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:47">buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="97:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="65:58">(<expr pos:start="63:9" pos:end="65:57"><name pos:start="63:9" pos:end="63:36"><name pos:start="63:9" pos:end="63:13">avctx</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:36">thread_safe_callbacks</name></name> <operator pos:start="63:38" pos:end="63:39">||</operator>

        <name pos:start="65:9" pos:end="65:26"><name pos:start="65:9" pos:end="65:13">avctx</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:26">get_buffer2</name></name> <operator pos:start="65:28" pos:end="65:29">==</operator> <name pos:start="65:31" pos:end="65:57">avcodec_default_get_buffer2</name></expr>)</condition> <block pos:start="65:60" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:48">

        <expr_stmt pos:start="67:9" pos:end="67:48"><expr pos:start="67:9" pos:end="67:47"><name pos:start="67:9" pos:end="67:11">err</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="67:47"><name pos:start="67:15" pos:end="67:27">ff_get_buffer</name><argument_list pos:start="67:28" pos:end="67:47">(<argument pos:start="67:29" pos:end="67:33"><expr pos:start="67:29" pos:end="67:33"><name pos:start="67:29" pos:end="67:33">avctx</name></expr></argument>, <argument pos:start="67:36" pos:end="67:39"><expr pos:start="67:36" pos:end="67:39"><name pos:start="67:36" pos:end="67:39"><name pos:start="67:36" pos:end="67:36">f</name><operator pos:start="67:37" pos:end="67:38">-&gt;</operator><name pos:start="67:39" pos:end="67:39">f</name></name></expr></argument>, <argument pos:start="67:42" pos:end="67:46"><expr pos:start="67:42" pos:end="67:46"><name pos:start="67:42" pos:end="67:46">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="69:7" pos:end="97:5">else <block pos:start="69:12" pos:end="97:5">{<block_content pos:start="71:9" pos:end="93:49">

        <expr_stmt pos:start="71:9" pos:end="71:47"><expr pos:start="71:9" pos:end="71:46"><call pos:start="71:9" pos:end="71:46"><name pos:start="71:9" pos:end="71:26">pthread_mutex_lock</name><argument_list pos:start="71:27" pos:end="71:46">(<argument pos:start="71:28" pos:end="71:45"><expr pos:start="71:28" pos:end="71:45"><operator pos:start="71:28" pos:end="71:28">&amp;</operator><name pos:start="71:29" pos:end="71:45"><name pos:start="71:29" pos:end="71:29">p</name><operator pos:start="71:30" pos:end="71:31">-&gt;</operator><name pos:start="71:32" pos:end="71:45">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:34"><expr pos:start="73:9" pos:end="73:33"><name pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:9">p</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:26">requested_frame</name></name> <operator pos:start="73:28" pos:end="73:28">=</operator> <name pos:start="73:30" pos:end="73:33"><name pos:start="73:30" pos:end="73:30">f</name><operator pos:start="73:31" pos:end="73:32">-&gt;</operator><name pos:start="73:33" pos:end="73:33">f</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:35"><expr pos:start="75:9" pos:end="75:34"><name pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:9">p</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:26">requested_flags</name></name> <operator pos:start="75:28" pos:end="75:28">=</operator> <name pos:start="75:30" pos:end="75:34">flags</name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:81"><expr pos:start="77:9" pos:end="77:80"><call pos:start="77:9" pos:end="77:80"><name pos:start="77:9" pos:end="77:29">atomic_store_explicit</name><argument_list pos:start="77:30" pos:end="77:80">(<argument pos:start="77:31" pos:end="77:39"><expr pos:start="77:31" pos:end="77:39"><operator pos:start="77:31" pos:end="77:31">&amp;</operator><name pos:start="77:32" pos:end="77:39"><name pos:start="77:32" pos:end="77:32">p</name><operator pos:start="77:33" pos:end="77:34">-&gt;</operator><name pos:start="77:35" pos:end="77:39">state</name></name></expr></argument>, <argument pos:start="77:42" pos:end="77:57"><expr pos:start="77:42" pos:end="77:57"><name pos:start="77:42" pos:end="77:57">STATE_GET_BUFFER</name></expr></argument>, <argument pos:start="77:60" pos:end="77:79"><expr pos:start="77:60" pos:end="77:79"><name pos:start="77:60" pos:end="77:79">memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:50"><expr pos:start="79:9" pos:end="79:49"><call pos:start="79:9" pos:end="79:49"><name pos:start="79:9" pos:end="79:30">pthread_cond_broadcast</name><argument_list pos:start="79:31" pos:end="79:49">(<argument pos:start="79:32" pos:end="79:48"><expr pos:start="79:32" pos:end="79:48"><operator pos:start="79:32" pos:end="79:32">&amp;</operator><name pos:start="79:33" pos:end="79:48"><name pos:start="79:33" pos:end="79:33">p</name><operator pos:start="79:34" pos:end="79:35">-&gt;</operator><name pos:start="79:36" pos:end="79:48">progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <while pos:start="83:9" pos:end="85:69">while <condition pos:start="83:15" pos:end="83:58">(<expr pos:start="83:16" pos:end="83:57"><call pos:start="83:16" pos:end="83:37"><name pos:start="83:16" pos:end="83:26">atomic_load</name><argument_list pos:start="83:27" pos:end="83:37">(<argument pos:start="83:28" pos:end="83:36"><expr pos:start="83:28" pos:end="83:36"><operator pos:start="83:28" pos:end="83:28">&amp;</operator><name pos:start="83:29" pos:end="83:36"><name pos:start="83:29" pos:end="83:29">p</name><operator pos:start="83:30" pos:end="83:31">-&gt;</operator><name pos:start="83:32" pos:end="83:36">state</name></name></expr></argument>)</argument_list></call> <operator pos:start="83:39" pos:end="83:40">!=</operator> <name pos:start="83:42" pos:end="83:57">STATE_SETTING_UP</name></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:69"><block_content pos:start="85:13" pos:end="85:69">

            <expr_stmt pos:start="85:13" pos:end="85:69"><expr pos:start="85:13" pos:end="85:68"><call pos:start="85:13" pos:end="85:68"><name pos:start="85:13" pos:end="85:29">pthread_cond_wait</name><argument_list pos:start="85:30" pos:end="85:68">(<argument pos:start="85:31" pos:end="85:47"><expr pos:start="85:31" pos:end="85:47"><operator pos:start="85:31" pos:end="85:31">&amp;</operator><name pos:start="85:32" pos:end="85:47"><name pos:start="85:32" pos:end="85:32">p</name><operator pos:start="85:33" pos:end="85:34">-&gt;</operator><name pos:start="85:35" pos:end="85:47">progress_cond</name></name></expr></argument>, <argument pos:start="85:50" pos:end="85:67"><expr pos:start="85:50" pos:end="85:67"><operator pos:start="85:50" pos:end="85:50">&amp;</operator><name pos:start="85:51" pos:end="85:67"><name pos:start="85:51" pos:end="85:51">p</name><operator pos:start="85:52" pos:end="85:53">-&gt;</operator><name pos:start="85:54" pos:end="85:67">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



        <expr_stmt pos:start="89:9" pos:end="89:24"><expr pos:start="89:9" pos:end="89:23"><name pos:start="89:9" pos:end="89:11">err</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <name pos:start="89:15" pos:end="89:23"><name pos:start="89:15" pos:end="89:15">p</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:23">result</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:49"><expr pos:start="93:9" pos:end="93:48"><call pos:start="93:9" pos:end="93:48"><name pos:start="93:9" pos:end="93:28">pthread_mutex_unlock</name><argument_list pos:start="93:29" pos:end="93:48">(<argument pos:start="93:30" pos:end="93:47"><expr pos:start="93:30" pos:end="93:47"><operator pos:start="93:30" pos:end="93:30">&amp;</operator><name pos:start="93:31" pos:end="93:47"><name pos:start="93:31" pos:end="93:31">p</name><operator pos:start="93:32" pos:end="93:33">-&gt;</operator><name pos:start="93:34" pos:end="93:47">progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="99:5" pos:end="101:38"><if pos:start="99:5" pos:end="101:38">if <condition pos:start="99:8" pos:end="99:78">(<expr pos:start="99:9" pos:end="99:77"><operator pos:start="99:9" pos:end="99:9">!</operator><call pos:start="99:10" pos:end="99:37"><name pos:start="99:10" pos:end="99:30">THREAD_SAFE_CALLBACKS</name><argument_list pos:start="99:31" pos:end="99:37">(<argument pos:start="99:32" pos:end="99:36"><expr pos:start="99:32" pos:end="99:36"><name pos:start="99:32" pos:end="99:36">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="99:39" pos:end="99:40">&amp;&amp;</operator> <operator pos:start="99:42" pos:end="99:42">!</operator><name pos:start="99:43" pos:end="99:77"><name pos:start="99:43" pos:end="99:47">avctx</name><operator pos:start="99:48" pos:end="99:49">-&gt;</operator><name pos:start="99:50" pos:end="99:54">codec</name><operator pos:start="99:55" pos:end="99:56">-&gt;</operator><name pos:start="99:57" pos:end="99:77">update_thread_context</name></name></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:38"><block_content pos:start="101:9" pos:end="101:38">

        <expr_stmt pos:start="101:9" pos:end="101:38"><expr pos:start="101:9" pos:end="101:37"><call pos:start="101:9" pos:end="101:37"><name pos:start="101:9" pos:end="101:30">ff_thread_finish_setup</name><argument_list pos:start="101:31" pos:end="101:37">(<argument pos:start="101:32" pos:end="101:36"><expr pos:start="101:32" pos:end="101:36"><name pos:start="101:32" pos:end="101:36">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="103:5" pos:end="105:38"><if pos:start="103:5" pos:end="105:38">if <condition pos:start="103:8" pos:end="103:12">(<expr pos:start="103:9" pos:end="103:11"><name pos:start="103:9" pos:end="103:11">err</name></expr>)</condition><block type="pseudo" pos:start="105:9" pos:end="105:38"><block_content pos:start="105:9" pos:end="105:38">

        <expr_stmt pos:start="105:9" pos:end="105:38"><expr pos:start="105:9" pos:end="105:37"><call pos:start="105:9" pos:end="105:37"><name pos:start="105:9" pos:end="105:23">av_buffer_unref</name><argument_list pos:start="105:24" pos:end="105:37">(<argument pos:start="105:25" pos:end="105:36"><expr pos:start="105:25" pos:end="105:36"><operator pos:start="105:25" pos:end="105:25">&amp;</operator><name pos:start="105:26" pos:end="105:36"><name pos:start="105:26" pos:end="105:26">f</name><operator pos:start="105:27" pos:end="105:28">-&gt;</operator><name pos:start="105:29" pos:end="105:36">progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:51"><expr pos:start="109:5" pos:end="109:50"><call pos:start="109:5" pos:end="109:50"><name pos:start="109:5" pos:end="109:24">pthread_mutex_unlock</name><argument_list pos:start="109:25" pos:end="109:50">(<argument pos:start="109:26" pos:end="109:49"><expr pos:start="109:26" pos:end="109:49"><operator pos:start="109:26" pos:end="109:26">&amp;</operator><name pos:start="109:27" pos:end="109:49"><name pos:start="109:27" pos:end="109:27">p</name><operator pos:start="109:28" pos:end="109:29">-&gt;</operator><name pos:start="109:30" pos:end="109:35">parent</name><operator pos:start="109:36" pos:end="109:37">-&gt;</operator><name pos:start="109:38" pos:end="109:49">buffer_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="113:5" pos:end="113:15">return <expr pos:start="113:12" pos:end="113:14"><name pos:start="113:12" pos:end="113:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
