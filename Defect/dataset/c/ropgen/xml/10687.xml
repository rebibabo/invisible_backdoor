<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10687.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">vnc_dpy_resize</name><parameter_list pos:start="1:27" pos:end="3:44">(<parameter pos:start="1:28" pos:end="1:53"><decl pos:start="1:28" pos:end="1:53"><type pos:start="1:28" pos:end="1:53"><name pos:start="1:28" pos:end="1:48">DisplayChangeListener</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:53">dcl</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:43"><decl pos:start="3:28" pos:end="3:43"><type pos:start="3:28" pos:end="3:43"><name pos:start="3:28" pos:end="3:39">DisplayState</name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:43">ds</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="67:1">{<block_content pos:start="7:5" pos:end="65:5">

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">VncDisplay</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:18">vd</name> <init pos:start="7:20" pos:end="7:31">= <expr pos:start="7:22" pos:end="7:31"><name pos:start="7:22" pos:end="7:31"><name pos:start="7:22" pos:end="7:23">ds</name><operator pos:start="7:24" pos:end="7:25">-&gt;</operator><name pos:start="7:26" pos:end="7:31">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">VncState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">vs</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:31"><expr pos:start="13:5" pos:end="13:30"><call pos:start="13:5" pos:end="13:30"><name pos:start="13:5" pos:end="13:26">vnc_abort_display_jobs</name><argument_list pos:start="13:27" pos:end="13:30">(<argument pos:start="13:28" pos:end="13:29"><expr pos:start="13:28" pos:end="13:29"><name pos:start="13:28" pos:end="13:29">vd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:24">/* server surface */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:40"><expr pos:start="19:5" pos:end="19:39"><call pos:start="19:5" pos:end="19:39"><name pos:start="19:5" pos:end="19:27">qemu_pixman_image_unref</name><argument_list pos:start="19:28" pos:end="19:39">(<argument pos:start="19:29" pos:end="19:38"><expr pos:start="19:29" pos:end="19:38"><name pos:start="19:29" pos:end="19:38"><name pos:start="19:29" pos:end="19:30">vd</name><operator pos:start="19:31" pos:end="19:32">-&gt;</operator><name pos:start="19:33" pos:end="19:38">server</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="40:0"><expr pos:start="21:5" pos:end="27:50"><name pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:6">vd</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:14">server</name></name> <operator pos:start="21:16" pos:end="21:16">=</operator> <call pos:start="21:18" pos:end="27:50"><name pos:start="21:18" pos:end="21:41">pixman_image_create_bits</name><argument_list pos:start="21:42" pos:end="27:50">(<argument pos:start="21:43" pos:end="21:62"><expr pos:start="21:43" pos:end="21:62"><name pos:start="21:43" pos:end="21:62">VNC_SERVER_FB_FORMAT</name></expr></argument>,

                                          <argument pos:start="23:43" pos:end="23:58"><expr pos:start="23:43" pos:end="23:58"><call pos:start="23:43" pos:end="23:58"><name pos:start="23:43" pos:end="23:54">ds_get_width</name><argument_list pos:start="23:55" pos:end="23:58">(<argument pos:start="23:56" pos:end="23:57"><expr pos:start="23:56" pos:end="23:57"><name pos:start="23:56" pos:end="23:57">ds</name></expr></argument>)</argument_list></call></expr></argument>,

                                          <argument pos:start="25:43" pos:end="25:59"><expr pos:start="25:43" pos:end="25:59"><call pos:start="25:43" pos:end="25:59"><name pos:start="25:43" pos:end="25:55">ds_get_height</name><argument_list pos:start="25:56" pos:end="25:59">(<argument pos:start="25:57" pos:end="25:58"><expr pos:start="25:57" pos:end="25:58"><name pos:start="25:57" pos:end="25:58">ds</name></expr></argument>)</argument_list></call></expr></argument>,

                                          <argument pos:start="27:43" pos:end="27:46"><expr pos:start="27:43" pos:end="27:46"><name pos:start="27:43" pos:end="27:46">NULL</name></expr></argument>, <argument pos:start="27:49" pos:end="27:49"><expr pos:start="27:49" pos:end="27:49"><literal type="number" pos:start="27:49" pos:end="27:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:23">/* guest surface */</comment>

<cpp:if pos:start="33:1" pos:end="33:5">#<cpp:directive pos:start="33:2" pos:end="33:3">if</cpp:directive> <expr pos:start="33:5" pos:end="33:5"><literal type="number" pos:start="33:5" pos:end="33:5">0</literal></expr></cpp:if> <comment type="block" pos:start="33:7" pos:end="33:17">/* FIXME */</comment>

    if (ds_get_bytes_per_pixel(ds) != vd-&gt;guest.ds-&gt;pf.bytes_per_pixel)

        console_color_init(ds);

<cpp:endif pos:start="39:1" pos:end="39:6">#<cpp:directive pos:start="39:2" pos:end="39:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="41:5" pos:end="41:42"><expr pos:start="41:5" pos:end="41:41"><call pos:start="41:5" pos:end="41:41"><name pos:start="41:5" pos:end="41:27">qemu_pixman_image_unref</name><argument_list pos:start="41:28" pos:end="41:41">(<argument pos:start="41:29" pos:end="41:40"><expr pos:start="41:29" pos:end="41:40"><name pos:start="41:29" pos:end="41:40"><name pos:start="41:29" pos:end="41:30">vd</name><operator pos:start="41:31" pos:end="41:32">-&gt;</operator><name pos:start="41:33" pos:end="41:37">guest</name><operator pos:start="41:38" pos:end="41:38">.</operator><name pos:start="41:39" pos:end="41:40">fb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:56"><expr pos:start="43:5" pos:end="43:55"><name pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:6">vd</name><operator pos:start="43:7" pos:end="43:8">-&gt;</operator><name pos:start="43:9" pos:end="43:13">guest</name><operator pos:start="43:14" pos:end="43:14">.</operator><name pos:start="43:15" pos:end="43:16">fb</name></name> <operator pos:start="43:18" pos:end="43:18">=</operator> <call pos:start="43:20" pos:end="43:55"><name pos:start="43:20" pos:end="43:35">pixman_image_ref</name><argument_list pos:start="43:36" pos:end="43:55">(<argument pos:start="43:37" pos:end="43:54"><expr pos:start="43:37" pos:end="43:54"><name pos:start="43:37" pos:end="43:54"><name pos:start="43:37" pos:end="43:38">ds</name><operator pos:start="43:39" pos:end="43:40">-&gt;</operator><name pos:start="43:41" pos:end="43:47">surface</name><operator pos:start="43:48" pos:end="43:49">-&gt;</operator><name pos:start="43:50" pos:end="43:54">image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:43"><expr pos:start="45:5" pos:end="45:42"><name pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:6">vd</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:13">guest</name><operator pos:start="45:14" pos:end="45:14">.</operator><name pos:start="45:15" pos:end="45:20">format</name></name> <operator pos:start="45:22" pos:end="45:22">=</operator> <name pos:start="45:24" pos:end="45:42"><name pos:start="45:24" pos:end="45:25">ds</name><operator pos:start="45:26" pos:end="45:27">-&gt;</operator><name pos:start="45:28" pos:end="45:34">surface</name><operator pos:start="45:35" pos:end="45:36">-&gt;</operator><name pos:start="45:37" pos:end="45:42">format</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:59"><expr pos:start="47:5" pos:end="47:58"><call pos:start="47:5" pos:end="47:58"><name pos:start="47:5" pos:end="47:10">memset</name><argument_list pos:start="47:11" pos:end="47:58">(<argument pos:start="47:12" pos:end="47:26"><expr pos:start="47:12" pos:end="47:26"><name pos:start="47:12" pos:end="47:26"><name pos:start="47:12" pos:end="47:13">vd</name><operator pos:start="47:14" pos:end="47:15">-&gt;</operator><name pos:start="47:16" pos:end="47:20">guest</name><operator pos:start="47:21" pos:end="47:21">.</operator><name pos:start="47:22" pos:end="47:26">dirty</name></name></expr></argument>, <argument pos:start="47:29" pos:end="47:32"><expr pos:start="47:29" pos:end="47:32"><literal type="number" pos:start="47:29" pos:end="47:32">0xFF</literal></expr></argument>, <argument pos:start="47:35" pos:end="47:57"><expr pos:start="47:35" pos:end="47:57"><sizeof pos:start="47:35" pos:end="47:57">sizeof<argument_list pos:start="47:41" pos:end="47:57">(<argument pos:start="47:42" pos:end="47:56"><expr pos:start="47:42" pos:end="47:56"><name pos:start="47:42" pos:end="47:56"><name pos:start="47:42" pos:end="47:43">vd</name><operator pos:start="47:44" pos:end="47:45">-&gt;</operator><name pos:start="47:46" pos:end="47:50">guest</name><operator pos:start="47:51" pos:end="47:51">.</operator><name pos:start="47:52" pos:end="47:56">dirty</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="51:5" pos:end="51:42"><name pos:start="51:5" pos:end="51:18">QTAILQ_FOREACH</name><argument_list pos:start="51:19" pos:end="51:42">(<argument pos:start="51:20" pos:end="51:21">vs</argument>, <argument pos:start="51:24" pos:end="51:35">&amp;vd-&gt;clients</argument>, <argument pos:start="51:38" pos:end="51:41">next</argument>)</argument_list></macro> <block pos:start="51:44" pos:end="65:5">{<block_content pos:start="53:9" pos:end="63:51">

        <expr_stmt pos:start="53:9" pos:end="53:27"><expr pos:start="53:9" pos:end="53:26"><call pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:22">vnc_colordepth</name><argument_list pos:start="53:23" pos:end="53:26">(<argument pos:start="53:24" pos:end="53:25"><expr pos:start="53:24" pos:end="53:25"><name pos:start="53:24" pos:end="53:25">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:31"><expr pos:start="55:9" pos:end="55:30"><call pos:start="55:9" pos:end="55:30"><name pos:start="55:9" pos:end="55:26">vnc_desktop_resize</name><argument_list pos:start="55:27" pos:end="55:30">(<argument pos:start="55:28" pos:end="55:29"><expr pos:start="55:28" pos:end="55:29"><name pos:start="55:28" pos:end="55:29">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:27">(<expr pos:start="57:13" pos:end="57:26"><name pos:start="57:13" pos:end="57:26"><name pos:start="57:13" pos:end="57:14">vs</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:18">vd</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:26">cursor</name></name></expr>)</condition> <block pos:start="57:29" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:34">

            <expr_stmt pos:start="59:13" pos:end="59:34"><expr pos:start="59:13" pos:end="59:33"><call pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:29">vnc_cursor_define</name><argument_list pos:start="59:30" pos:end="59:33">(<argument pos:start="59:31" pos:end="59:32"><expr pos:start="59:31" pos:end="59:32"><name pos:start="59:31" pos:end="59:32">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:51"><expr pos:start="63:9" pos:end="63:50"><call pos:start="63:9" pos:end="63:50"><name pos:start="63:9" pos:end="63:14">memset</name><argument_list pos:start="63:15" pos:end="63:50">(<argument pos:start="63:16" pos:end="63:24"><expr pos:start="63:16" pos:end="63:24"><name pos:start="63:16" pos:end="63:24"><name pos:start="63:16" pos:end="63:17">vs</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:24">dirty</name></name></expr></argument>, <argument pos:start="63:27" pos:end="63:30"><expr pos:start="63:27" pos:end="63:30"><literal type="number" pos:start="63:27" pos:end="63:30">0xFF</literal></expr></argument>, <argument pos:start="63:33" pos:end="63:49"><expr pos:start="63:33" pos:end="63:49"><sizeof pos:start="63:33" pos:end="63:49">sizeof<argument_list pos:start="63:39" pos:end="63:49">(<argument pos:start="63:40" pos:end="63:48"><expr pos:start="63:40" pos:end="63:48"><name pos:start="63:40" pos:end="63:48"><name pos:start="63:40" pos:end="63:41">vs</name><operator pos:start="63:42" pos:end="63:43">-&gt;</operator><name pos:start="63:44" pos:end="63:48">dirty</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
