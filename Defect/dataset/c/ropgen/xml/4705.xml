<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4705.c" pos:tabs="8"><function pos:start="1:1" pos:end="99:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">tcg_cpu_exec</name><parameter_list pos:start="1:24" pos:end="1:38">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:34"><name pos:start="1:25" pos:end="1:32">CPUState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="99:1">{<block_content pos:start="5:5" pos:end="97:15">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="7:1" pos:end="7:22">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:22">CONFIG_PROFILER</name></cpp:ifdef>

    <decl_stmt pos:start="9:5" pos:end="16:0"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:14">ti</name></decl>;</decl_stmt>

<cpp:endif pos:start="11:1" pos:end="11:6">#<cpp:directive pos:start="11:2" pos:end="11:6">endif</cpp:directive></cpp:endif>



<cpp:ifdef pos:start="15:1" pos:end="15:22">#<cpp:directive pos:start="15:2" pos:end="15:6">ifdef</cpp:directive> <name pos:start="15:8" pos:end="15:22">CONFIG_PROFILER</name></cpp:ifdef>

    <expr_stmt pos:start="17:5" pos:end="20:0"><expr pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:6">ti</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <call pos:start="17:10" pos:end="17:27"><name pos:start="17:10" pos:end="17:25">profile_getclock</name><argument_list pos:start="17:26" pos:end="17:27">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="19:1" pos:end="19:6">#<cpp:directive pos:start="19:2" pos:end="19:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="21:5" pos:end="71:5"><if pos:start="21:5" pos:end="71:5">if <condition pos:start="21:8" pos:end="21:19">(<expr pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:18">use_icount</name></expr>)</condition> <block pos:start="21:21" pos:end="71:5">{<block_content pos:start="23:9" pos:end="69:34">

        <decl_stmt pos:start="23:9" pos:end="23:22"><decl pos:start="23:9" pos:end="23:21"><type pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:15">int64_t</name></type> <name pos:start="23:17" pos:end="23:21">count</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:25"><decl pos:start="25:9" pos:end="25:24"><type pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:15">int64_t</name></type> <name pos:start="25:17" pos:end="25:24">deadline</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:17"><decl pos:start="27:9" pos:end="27:16"><type pos:start="27:9" pos:end="27:11"><name pos:start="27:9" pos:end="27:11">int</name></type> <name pos:start="27:13" pos:end="27:16">decr</name></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="31:57"><expr pos:start="29:9" pos:end="31:56"><name pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:20">timers_state</name><operator pos:start="29:21" pos:end="29:21">.</operator><name pos:start="29:22" pos:end="29:32">qemu_icount</name></name> <operator pos:start="29:34" pos:end="29:35">-=</operator> <operator pos:start="29:37" pos:end="29:37">(</operator><name pos:start="29:38" pos:end="29:61"><name pos:start="29:38" pos:end="29:40">cpu</name><operator pos:start="29:41" pos:end="29:42">-&gt;</operator><name pos:start="29:43" pos:end="29:53">icount_decr</name><operator pos:start="29:54" pos:end="29:54">.</operator><name pos:start="29:55" pos:end="29:57">u16</name><operator pos:start="29:58" pos:end="29:58">.</operator><name pos:start="29:59" pos:end="29:61">low</name></name>

                                    <operator pos:start="31:37" pos:end="31:37">+</operator> <name pos:start="31:39" pos:end="31:55"><name pos:start="31:39" pos:end="31:41">cpu</name><operator pos:start="31:42" pos:end="31:43">-&gt;</operator><name pos:start="31:44" pos:end="31:55">icount_extra</name></name><operator pos:start="31:56" pos:end="31:56">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:37"><expr pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:11">cpu</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:24">icount_decr</name><operator pos:start="33:25" pos:end="33:25">.</operator><name pos:start="33:26" pos:end="33:28">u16</name><operator pos:start="33:29" pos:end="33:29">.</operator><name pos:start="33:30" pos:end="33:32">low</name></name> <operator pos:start="33:34" pos:end="33:34">=</operator> <literal type="number" pos:start="33:36" pos:end="33:36">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:30"><expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:11">cpu</name><operator pos:start="35:12" pos:end="35:13">-&gt;</operator><name pos:start="35:14" pos:end="35:25">icount_extra</name></name> <operator pos:start="35:27" pos:end="35:27">=</operator> <literal type="number" pos:start="35:29" pos:end="35:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:66"><expr pos:start="37:9" pos:end="37:65"><name pos:start="37:9" pos:end="37:16">deadline</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:65"><name pos:start="37:20" pos:end="37:45">qemu_clock_deadline_ns_all</name><argument_list pos:start="37:46" pos:end="37:65">(<argument pos:start="37:47" pos:end="37:64"><expr pos:start="37:47" pos:end="37:64"><name pos:start="37:47" pos:end="37:64">QEMU_CLOCK_VIRTUAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="41:9" pos:end="49:11">/* Maintain prior (possibly buggy) behaviour where if no deadline

         * was set (as there is no QEMU_CLOCK_VIRTUAL timer) or it is more than

         * INT32_MAX nanoseconds ahead, we still use INT32_MAX

         * nanoseconds.

         */</comment>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:53">(<expr pos:start="51:13" pos:end="51:52"><operator pos:start="51:13" pos:end="51:13">(</operator><name pos:start="51:14" pos:end="51:21">deadline</name> <operator pos:start="51:23" pos:end="51:23">&lt;</operator> <literal type="number" pos:start="51:25" pos:end="51:25">0</literal><operator pos:start="51:26" pos:end="51:26">)</operator> <operator pos:start="51:28" pos:end="51:29">||</operator> <operator pos:start="51:31" pos:end="51:31">(</operator><name pos:start="51:32" pos:end="51:39">deadline</name> <operator pos:start="51:41" pos:end="51:41">&gt;</operator> <name pos:start="51:43" pos:end="51:51">INT32_MAX</name><operator pos:start="51:52" pos:end="51:52">)</operator></expr>)</condition> <block pos:start="51:55" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:33">

            <expr_stmt pos:start="53:13" pos:end="53:33"><expr pos:start="53:13" pos:end="53:32"><name pos:start="53:13" pos:end="53:20">deadline</name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:32">INT32_MAX</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:44"><expr pos:start="59:9" pos:end="59:43"><name pos:start="59:9" pos:end="59:13">count</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <call pos:start="59:17" pos:end="59:43"><name pos:start="59:17" pos:end="59:33">qemu_icount_round</name><argument_list pos:start="59:34" pos:end="59:43">(<argument pos:start="59:35" pos:end="59:42"><expr pos:start="59:35" pos:end="59:42"><name pos:start="59:35" pos:end="59:42">deadline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:42"><expr pos:start="61:9" pos:end="61:41"><name pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:20">timers_state</name><operator pos:start="61:21" pos:end="61:21">.</operator><name pos:start="61:22" pos:end="61:32">qemu_icount</name></name> <operator pos:start="61:34" pos:end="61:35">+=</operator> <name pos:start="61:37" pos:end="61:41">count</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:49"><expr pos:start="63:9" pos:end="63:48"><name pos:start="63:9" pos:end="63:12">decr</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <ternary pos:start="63:16" pos:end="63:48"><condition pos:start="63:16" pos:end="63:33"><expr pos:start="63:16" pos:end="63:31"><operator pos:start="63:16" pos:end="63:16">(</operator><name pos:start="63:17" pos:end="63:21">count</name> <operator pos:start="63:23" pos:end="63:23">&gt;</operator> <literal type="number" pos:start="63:25" pos:end="63:30">0xffff</literal><operator pos:start="63:31" pos:end="63:31">)</operator></expr> ?</condition><then pos:start="63:35" pos:end="63:40"> <expr pos:start="63:35" pos:end="63:40"><literal type="number" pos:start="63:35" pos:end="63:40">0xffff</literal></expr> </then><else pos:start="63:42" pos:end="63:48">: <expr pos:start="63:44" pos:end="63:48"><name pos:start="63:44" pos:end="63:48">count</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:13">count</name> <operator pos:start="65:15" pos:end="65:16">-=</operator> <name pos:start="65:18" pos:end="65:21">decr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:40"><expr pos:start="67:9" pos:end="67:39"><name pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:11">cpu</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:24">icount_decr</name><operator pos:start="67:25" pos:end="67:25">.</operator><name pos:start="67:26" pos:end="67:28">u16</name><operator pos:start="67:29" pos:end="67:29">.</operator><name pos:start="67:30" pos:end="67:32">low</name></name> <operator pos:start="67:34" pos:end="67:34">=</operator> <name pos:start="67:36" pos:end="67:39">decr</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:34"><expr pos:start="69:9" pos:end="69:33"><name pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:11">cpu</name><operator pos:start="69:12" pos:end="69:13">-&gt;</operator><name pos:start="69:14" pos:end="69:25">icount_extra</name></name> <operator pos:start="69:27" pos:end="69:27">=</operator> <name pos:start="69:29" pos:end="69:33">count</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="76:0"><expr pos:start="73:5" pos:end="73:23"><name pos:start="73:5" pos:end="73:7">ret</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:23"><name pos:start="73:11" pos:end="73:18">cpu_exec</name><argument_list pos:start="73:19" pos:end="73:23">(<argument pos:start="73:20" pos:end="73:22"><expr pos:start="73:20" pos:end="73:22"><name pos:start="73:20" pos:end="73:22">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="75:1" pos:end="75:22">#<cpp:directive pos:start="75:2" pos:end="75:6">ifdef</cpp:directive> <name pos:start="75:8" pos:end="75:22">CONFIG_PROFILER</name></cpp:ifdef>

    <expr_stmt pos:start="77:5" pos:end="80:0"><expr pos:start="77:5" pos:end="77:39"><name pos:start="77:5" pos:end="77:12">tcg_time</name> <operator pos:start="77:14" pos:end="77:15">+=</operator> <call pos:start="77:17" pos:end="77:34"><name pos:start="77:17" pos:end="77:32">profile_getclock</name><argument_list pos:start="77:33" pos:end="77:34">()</argument_list></call> <operator pos:start="77:36" pos:end="77:36">-</operator> <name pos:start="77:38" pos:end="77:39">ti</name></expr>;</expr_stmt>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="81:5" pos:end="95:5"><if pos:start="81:5" pos:end="95:5">if <condition pos:start="81:8" pos:end="81:19">(<expr pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:18">use_icount</name></expr>)</condition> <block pos:start="81:21" pos:end="95:5">{<block_content pos:start="87:9" pos:end="93:30">

        <comment type="block" pos:start="83:9" pos:end="85:65">/* Fold pending instructions back into the

           instruction counter, and clear the interrupt flag.  */</comment>

        <expr_stmt pos:start="87:9" pos:end="89:45"><expr pos:start="87:9" pos:end="89:44"><name pos:start="87:9" pos:end="87:32"><name pos:start="87:9" pos:end="87:20">timers_state</name><operator pos:start="87:21" pos:end="87:21">.</operator><name pos:start="87:22" pos:end="87:32">qemu_icount</name></name> <operator pos:start="87:34" pos:end="87:35">-=</operator> <operator pos:start="87:37" pos:end="87:37">(</operator><name pos:start="87:38" pos:end="87:61"><name pos:start="87:38" pos:end="87:40">cpu</name><operator pos:start="87:41" pos:end="87:42">-&gt;</operator><name pos:start="87:43" pos:end="87:53">icount_decr</name><operator pos:start="87:54" pos:end="87:54">.</operator><name pos:start="87:55" pos:end="87:57">u16</name><operator pos:start="87:58" pos:end="87:58">.</operator><name pos:start="87:59" pos:end="87:61">low</name></name>

                        <operator pos:start="89:25" pos:end="89:25">+</operator> <name pos:start="89:27" pos:end="89:43"><name pos:start="89:27" pos:end="89:29">cpu</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:43">icount_extra</name></name><operator pos:start="89:44" pos:end="89:44">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:33"><expr pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:28"><name pos:start="91:9" pos:end="91:11">cpu</name><operator pos:start="91:12" pos:end="91:13">-&gt;</operator><name pos:start="91:14" pos:end="91:24">icount_decr</name><operator pos:start="91:25" pos:end="91:25">.</operator><name pos:start="91:26" pos:end="91:28">u32</name></name> <operator pos:start="91:30" pos:end="91:30">=</operator> <literal type="number" pos:start="91:32" pos:end="91:32">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:30"><expr pos:start="93:9" pos:end="93:29"><name pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:11">cpu</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:25">icount_extra</name></name> <operator pos:start="93:27" pos:end="93:27">=</operator> <literal type="number" pos:start="93:29" pos:end="93:29">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="97:5" pos:end="97:15">return <expr pos:start="97:12" pos:end="97:14"><name pos:start="97:12" pos:end="97:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
