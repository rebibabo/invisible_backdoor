<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7476.c" pos:tabs="8"><macro pos:start="1:1" pos:end="7:50"><name pos:start="1:1" pos:end="1:20">matroska_parse_block</name><argument_list pos:start="1:21" pos:end="7:50">(<argument pos:start="1:22" pos:end="1:51">MatroskaDemuxContext *matroska</argument>, <argument pos:start="1:54" pos:end="1:66">uint8_t *data</argument>, <argument pos:start="1:69" pos:end="1:76">int size</argument>,

                     <argument pos:start="3:22" pos:end="3:32">int64_t pos</argument>, <argument pos:start="3:35" pos:end="3:55">uint64_t cluster_time</argument>,

                     <argument pos:start="5:22" pos:end="5:36">int is_keyframe</argument>, <argument pos:start="5:39" pos:end="5:51">int is_bframe</argument>,

                     <argument pos:start="7:22" pos:end="7:32">int *ptrack</argument>, <argument pos:start="7:35" pos:end="7:49">AVPacket **ppkt</argument>)</argument_list></macro>

<block pos:start="9:1" pos:end="357:1">{<block_content pos:start="11:5" pos:end="355:15">

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">res</name> <init pos:start="11:13" pos:end="11:15">= <expr pos:start="11:15" pos:end="11:15"><literal type="number" pos:start="11:15" pos:end="11:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">track</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">AVPacket</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:17">pkt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">uint8_t</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:21">origdata</name> <init pos:start="17:23" pos:end="17:28">= <expr pos:start="17:25" pos:end="17:28"><name pos:start="17:25" pos:end="17:28">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:11">int16_t</name></type> <name pos:start="19:13" pos:end="19:22">block_time</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:31"><decl pos:start="21:5" pos:end="21:30"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">uint32_t</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:23">lace_size</name> <init pos:start="21:25" pos:end="21:30">= <expr pos:start="21:27" pos:end="21:30"><name pos:start="21:27" pos:end="21:30">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">n</name></decl>, <decl pos:start="23:12" pos:end="23:16"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:12" pos:end="23:16">flags</name></decl>, <decl pos:start="23:19" pos:end="23:27"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:19" pos:end="23:23">laces</name> <init pos:start="23:25" pos:end="23:27">= <expr pos:start="23:27" pos:end="23:27"><literal type="number" pos:start="23:27" pos:end="23:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint64_t</name></type> <name pos:start="25:14" pos:end="25:16">num</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:33">/* first byte(s): tracknum */</comment>

    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:58">(<expr pos:start="31:9" pos:end="31:57"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:10">n</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:52"><name pos:start="31:14" pos:end="31:34">matroska_ebmlnum_uint</name><argument_list pos:start="31:35" pos:end="31:52">(<argument pos:start="31:36" pos:end="31:39"><expr pos:start="31:36" pos:end="31:39"><name pos:start="31:36" pos:end="31:39">data</name></expr></argument>, <argument pos:start="31:42" pos:end="31:45"><expr pos:start="31:42" pos:end="31:45"><name pos:start="31:42" pos:end="31:45">size</name></expr></argument>, <argument pos:start="31:48" pos:end="31:51"><expr pos:start="31:48" pos:end="31:51"><operator pos:start="31:48" pos:end="31:48">&amp;</operator><name pos:start="31:49" pos:end="31:51">num</name></expr></argument>)</argument_list></call><operator pos:start="31:53" pos:end="31:53">)</operator> <operator pos:start="31:55" pos:end="31:55">&lt;</operator> <literal type="number" pos:start="31:57" pos:end="31:57">0</literal></expr>)</condition> <block pos:start="31:60" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:19">

        <expr_stmt pos:start="33:9" pos:end="33:71"><expr pos:start="33:9" pos:end="33:70"><call pos:start="33:9" pos:end="33:70"><name pos:start="33:9" pos:end="33:14">av_log</name><argument_list pos:start="33:15" pos:end="33:70">(<argument pos:start="33:16" pos:end="33:28"><expr pos:start="33:16" pos:end="33:28"><name pos:start="33:16" pos:end="33:28"><name pos:start="33:16" pos:end="33:23">matroska</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:28">ctx</name></name></expr></argument>, <argument pos:start="33:31" pos:end="33:42"><expr pos:start="33:31" pos:end="33:42"><name pos:start="33:31" pos:end="33:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="33:45" pos:end="33:69"><expr pos:start="33:45" pos:end="33:69"><literal type="string" pos:start="33:45" pos:end="33:69">"EBML block data error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:26"><expr pos:start="35:9" pos:end="35:25"><call pos:start="35:9" pos:end="35:25"><name pos:start="35:9" pos:end="35:15">av_free</name><argument_list pos:start="35:16" pos:end="35:25">(<argument pos:start="35:17" pos:end="35:24"><expr pos:start="35:17" pos:end="35:24"><name pos:start="35:17" pos:end="35:24">origdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:19">return <expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">res</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:14"><expr pos:start="41:5" pos:end="41:13"><name pos:start="41:5" pos:end="41:8">data</name> <operator pos:start="41:10" pos:end="41:11">+=</operator> <name pos:start="41:13" pos:end="41:13">n</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:14"><expr pos:start="43:5" pos:end="43:13"><name pos:start="43:5" pos:end="43:8">size</name> <operator pos:start="43:10" pos:end="43:11">-=</operator> <name pos:start="43:13" pos:end="43:13">n</name></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:30">/* fetch track from num */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:54"><expr pos:start="49:5" pos:end="49:53"><name pos:start="49:5" pos:end="49:9">track</name> <operator pos:start="49:11" pos:end="49:11">=</operator> <call pos:start="49:13" pos:end="49:53"><name pos:start="49:13" pos:end="49:38">matroska_find_track_by_num</name><argument_list pos:start="49:39" pos:end="49:53">(<argument pos:start="49:40" pos:end="49:47"><expr pos:start="49:40" pos:end="49:47"><name pos:start="49:40" pos:end="49:47">matroska</name></expr></argument>, <argument pos:start="49:50" pos:end="49:52"><expr pos:start="49:50" pos:end="49:52"><name pos:start="49:50" pos:end="49:52">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="51:33"><if pos:start="51:5" pos:end="51:33">if <condition pos:start="51:8" pos:end="51:15">(<expr pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:14">ptrack</name></expr>)</condition><block type="pseudo" pos:start="51:18" pos:end="51:33"><block_content pos:start="51:18" pos:end="51:33">  <expr_stmt pos:start="51:18" pos:end="51:33"><expr pos:start="51:18" pos:end="51:32"><operator pos:start="51:18" pos:end="51:18">*</operator><name pos:start="51:19" pos:end="51:24">ptrack</name> <operator pos:start="51:26" pos:end="51:26">=</operator> <name pos:start="51:28" pos:end="51:32">track</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="63:5"><if pos:start="53:5" pos:end="63:5">if <condition pos:start="53:8" pos:end="53:64">(<expr pos:start="53:9" pos:end="53:63"><name pos:start="53:9" pos:end="53:12">size</name> <operator pos:start="53:14" pos:end="53:15">&lt;=</operator> <literal type="number" pos:start="53:17" pos:end="53:17">3</literal> <operator pos:start="53:19" pos:end="53:20">||</operator> <name pos:start="53:22" pos:end="53:26">track</name> <operator pos:start="53:28" pos:end="53:28">&lt;</operator> <literal type="number" pos:start="53:30" pos:end="53:30">0</literal> <operator pos:start="53:32" pos:end="53:33">||</operator> <name pos:start="53:35" pos:end="53:39">track</name> <operator pos:start="53:41" pos:end="53:42">&gt;=</operator> <name pos:start="53:44" pos:end="53:63"><name pos:start="53:44" pos:end="53:51">matroska</name><operator pos:start="53:52" pos:end="53:53">-&gt;</operator><name pos:start="53:54" pos:end="53:63">num_tracks</name></name></expr>)</condition> <block pos:start="53:66" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:19">

        <expr_stmt pos:start="55:9" pos:end="57:62"><expr pos:start="55:9" pos:end="57:61"><call pos:start="55:9" pos:end="57:61"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="57:61">(<argument pos:start="55:16" pos:end="55:28"><expr pos:start="55:16" pos:end="55:28"><name pos:start="55:16" pos:end="55:28"><name pos:start="55:16" pos:end="55:23">matroska</name><operator pos:start="55:24" pos:end="55:25">-&gt;</operator><name pos:start="55:26" pos:end="55:28">ctx</name></name></expr></argument>, <argument pos:start="55:31" pos:end="55:41"><expr pos:start="55:31" pos:end="55:41"><name pos:start="55:31" pos:end="55:41">AV_LOG_INFO</name></expr></argument>,

               <argument pos:start="57:16" pos:end="57:47"><expr pos:start="57:16" pos:end="57:47"><literal type="string" pos:start="57:16" pos:end="57:47">"Invalid stream %d or size %u\n"</literal></expr></argument>, <argument pos:start="57:50" pos:end="57:54"><expr pos:start="57:50" pos:end="57:54"><name pos:start="57:50" pos:end="57:54">track</name></expr></argument>, <argument pos:start="57:57" pos:end="57:60"><expr pos:start="57:57" pos:end="57:60"><name pos:start="57:57" pos:end="57:60">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:26"><expr pos:start="59:9" pos:end="59:25"><call pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:15">av_free</name><argument_list pos:start="59:16" pos:end="59:25">(<argument pos:start="59:17" pos:end="59:24"><expr pos:start="59:17" pos:end="59:24"><name pos:start="59:17" pos:end="59:24">origdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:19">return <expr pos:start="61:16" pos:end="61:18"><name pos:start="61:16" pos:end="61:18">res</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if<condition pos:start="65:7" pos:end="65:97">(<expr pos:start="65:8" pos:end="65:96"><name pos:start="65:8" pos:end="65:70"><name pos:start="65:8" pos:end="65:15">matroska</name><operator pos:start="65:16" pos:end="65:17">-&gt;</operator><name pos:start="65:18" pos:end="65:20">ctx</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:29">streams</name><index pos:start="65:30" pos:end="65:70">[ <expr pos:start="65:32" pos:end="65:68"><name pos:start="65:32" pos:end="65:54"><name pos:start="65:32" pos:end="65:39">matroska</name><operator pos:start="65:40" pos:end="65:41">-&gt;</operator><name pos:start="65:42" pos:end="65:47">tracks</name><index pos:start="65:48" pos:end="65:54">[<expr pos:start="65:49" pos:end="65:53"><name pos:start="65:49" pos:end="65:53">track</name></expr>]</index></name><operator pos:start="65:55" pos:end="65:56">-&gt;</operator><name pos:start="65:57" pos:end="65:68">stream_index</name></expr> ]</index></name><operator pos:start="65:71" pos:end="65:72">-&gt;</operator><name pos:start="65:73" pos:end="65:79">discard</name> <operator pos:start="65:81" pos:end="65:82">&gt;=</operator> <name pos:start="65:84" pos:end="65:96">AVDISCARD_ALL</name></expr>)</condition><block pos:start="65:98" pos:end="71:5">{<block_content pos:start="67:9" pos:end="69:19">

        <expr_stmt pos:start="67:9" pos:end="67:26"><expr pos:start="67:9" pos:end="67:25"><call pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:15">av_free</name><argument_list pos:start="67:16" pos:end="67:25">(<argument pos:start="67:17" pos:end="67:24"><expr pos:start="67:17" pos:end="67:24"><name pos:start="67:17" pos:end="67:24">origdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:19">return <expr pos:start="69:16" pos:end="69:18"><name pos:start="69:16" pos:end="69:18">res</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:47">/* block_time (relative to cluster time) */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:42"><expr pos:start="77:5" pos:end="77:41"><name pos:start="77:5" pos:end="77:14">block_time</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <operator pos:start="77:18" pos:end="77:18">(</operator><name pos:start="77:19" pos:end="77:25"><name pos:start="77:19" pos:end="77:22">data</name><index pos:start="77:23" pos:end="77:25">[<expr pos:start="77:24" pos:end="77:24"><literal type="number" pos:start="77:24" pos:end="77:24">0</literal></expr>]</index></name> <operator pos:start="77:27" pos:end="77:28">&lt;&lt;</operator> <literal type="number" pos:start="77:30" pos:end="77:30">8</literal><operator pos:start="77:31" pos:end="77:31">)</operator> <operator pos:start="77:33" pos:end="77:33">|</operator> <name pos:start="77:35" pos:end="77:41"><name pos:start="77:35" pos:end="77:38">data</name><index pos:start="77:39" pos:end="77:41">[<expr pos:start="77:40" pos:end="77:40"><literal type="number" pos:start="77:40" pos:end="77:40">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:14"><expr pos:start="79:5" pos:end="79:13"><name pos:start="79:5" pos:end="79:8">data</name> <operator pos:start="79:10" pos:end="79:11">+=</operator> <literal type="number" pos:start="79:13" pos:end="79:13">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:14"><expr pos:start="81:5" pos:end="81:13"><name pos:start="81:5" pos:end="81:8">size</name> <operator pos:start="81:10" pos:end="81:11">-=</operator> <literal type="number" pos:start="81:13" pos:end="81:13">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:18"><expr pos:start="83:5" pos:end="83:17"><name pos:start="83:5" pos:end="83:9">flags</name> <operator pos:start="83:11" pos:end="83:11">=</operator> <operator pos:start="83:13" pos:end="83:13">*</operator><name pos:start="83:14" pos:end="83:17">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:14"><expr pos:start="85:5" pos:end="85:13"><name pos:start="85:5" pos:end="85:8">data</name> <operator pos:start="85:10" pos:end="85:11">+=</operator> <literal type="number" pos:start="85:13" pos:end="85:13">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:14"><expr pos:start="87:5" pos:end="87:13"><name pos:start="87:5" pos:end="87:8">size</name> <operator pos:start="87:10" pos:end="87:11">-=</operator> <literal type="number" pos:start="87:13" pos:end="87:13">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="91:51"><if pos:start="89:5" pos:end="91:51">if <condition pos:start="89:8" pos:end="89:26">(<expr pos:start="89:9" pos:end="89:25"><name pos:start="89:9" pos:end="89:19">is_keyframe</name> <operator pos:start="89:21" pos:end="89:22">==</operator> <operator pos:start="89:24" pos:end="89:24">-</operator><literal type="number" pos:start="89:25" pos:end="89:25">1</literal></expr>)</condition><block type="pseudo" pos:start="91:9" pos:end="91:51"><block_content pos:start="91:9" pos:end="91:51">

        <expr_stmt pos:start="91:9" pos:end="91:51"><expr pos:start="91:9" pos:end="91:50"><name pos:start="91:9" pos:end="91:19">is_keyframe</name> <operator pos:start="91:21" pos:end="91:21">=</operator> <ternary pos:start="91:23" pos:end="91:50"><condition pos:start="91:23" pos:end="91:33"><expr pos:start="91:23" pos:end="91:31"><name pos:start="91:23" pos:end="91:27">flags</name> <operator pos:start="91:29" pos:end="91:29">&amp;</operator> <literal type="number" pos:start="91:31" pos:end="91:31">1</literal></expr> ?</condition><then pos:start="91:35" pos:end="91:46"> <expr pos:start="91:35" pos:end="91:46"><name pos:start="91:35" pos:end="91:46">PKT_FLAG_KEY</name></expr> </then><else pos:start="91:48" pos:end="91:50">: <expr pos:start="91:50" pos:end="91:50"><literal type="number" pos:start="91:50" pos:end="91:50">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <switch pos:start="93:5" pos:end="247:5">switch <condition pos:start="93:12" pos:end="93:32">(<expr pos:start="93:13" pos:end="93:31"><operator pos:start="93:13" pos:end="93:13">(</operator><name pos:start="93:14" pos:end="93:18">flags</name> <operator pos:start="93:20" pos:end="93:20">&amp;</operator> <literal type="number" pos:start="93:22" pos:end="93:25">0x06</literal><operator pos:start="93:26" pos:end="93:26">)</operator> <operator pos:start="93:28" pos:end="93:29">&gt;&gt;</operator> <literal type="number" pos:start="93:31" pos:end="93:31">1</literal></expr>)</condition> <block pos:start="93:34" pos:end="247:5">{<block_content pos:start="95:9" pos:end="245:18">

        <case pos:start="95:9" pos:end="95:17">case <expr pos:start="95:14" pos:end="95:16"><literal type="number" pos:start="95:14" pos:end="95:16">0x0</literal></expr>:</case> <comment type="block" pos:start="95:19" pos:end="95:33">/* no lacing */</comment>

            <expr_stmt pos:start="97:13" pos:end="97:22"><expr pos:start="97:13" pos:end="97:21"><name pos:start="97:13" pos:end="97:17">laces</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <literal type="number" pos:start="97:21" pos:end="97:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:48"><expr pos:start="99:13" pos:end="99:47"><name pos:start="99:13" pos:end="99:21">lace_size</name> <operator pos:start="99:23" pos:end="99:23">=</operator> <call pos:start="99:25" pos:end="99:47"><name pos:start="99:25" pos:end="99:34">av_mallocz</name><argument_list pos:start="99:35" pos:end="99:47">(<argument pos:start="99:36" pos:end="99:46"><expr pos:start="99:36" pos:end="99:46"><sizeof pos:start="99:36" pos:end="99:46">sizeof<argument_list pos:start="99:42" pos:end="99:46">(<argument pos:start="99:43" pos:end="99:45"><expr pos:start="99:43" pos:end="99:45"><name pos:start="99:43" pos:end="99:45">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:32"><expr pos:start="101:13" pos:end="101:31"><name pos:start="101:13" pos:end="101:24"><name pos:start="101:13" pos:end="101:21">lace_size</name><index pos:start="101:22" pos:end="101:24">[<expr pos:start="101:23" pos:end="101:23"><literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr>]</index></name> <operator pos:start="101:26" pos:end="101:26">=</operator> <name pos:start="101:28" pos:end="101:31">size</name></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>



        <case pos:start="107:9" pos:end="107:17">case <expr pos:start="107:14" pos:end="107:16"><literal type="number" pos:start="107:14" pos:end="107:16">0x1</literal></expr>:</case> <comment type="block" pos:start="107:19" pos:end="107:35">/* xiph lacing */</comment>

        <case pos:start="109:9" pos:end="109:17">case <expr pos:start="109:14" pos:end="109:16"><literal type="number" pos:start="109:14" pos:end="109:16">0x2</literal></expr>:</case> <comment type="block" pos:start="109:19" pos:end="109:41">/* fixed-size lacing */</comment>

        <case pos:start="111:9" pos:end="111:17">case <expr pos:start="111:14" pos:end="111:16"><literal type="number" pos:start="111:14" pos:end="111:16">0x3</literal></expr>:</case> <comment type="block" pos:start="111:19" pos:end="111:35">/* EBML lacing */</comment>

            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if <condition pos:start="113:16" pos:end="113:26">(<expr pos:start="113:17" pos:end="113:25"><name pos:start="113:17" pos:end="113:20">size</name> <operator pos:start="113:22" pos:end="113:23">==</operator> <literal type="number" pos:start="113:25" pos:end="113:25">0</literal></expr>)</condition> <block pos:start="113:28" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:22">

                <expr_stmt pos:start="115:17" pos:end="115:25"><expr pos:start="115:17" pos:end="115:24"><name pos:start="115:17" pos:end="115:19">res</name> <operator pos:start="115:21" pos:end="115:21">=</operator> <operator pos:start="115:23" pos:end="115:23">-</operator><literal type="number" pos:start="115:24" pos:end="115:24">1</literal></expr>;</expr_stmt>

                <break pos:start="117:17" pos:end="117:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:32"><expr pos:start="121:13" pos:end="121:31"><name pos:start="121:13" pos:end="121:17">laces</name> <operator pos:start="121:19" pos:end="121:19">=</operator> <operator pos:start="121:21" pos:end="121:21">(</operator><operator pos:start="121:22" pos:end="121:22">*</operator><name pos:start="121:23" pos:end="121:26">data</name><operator pos:start="121:27" pos:end="121:27">)</operator> <operator pos:start="121:29" pos:end="121:29">+</operator> <literal type="number" pos:start="121:31" pos:end="121:31">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:22"><expr pos:start="123:13" pos:end="123:21"><name pos:start="123:13" pos:end="123:16">data</name> <operator pos:start="123:18" pos:end="123:19">+=</operator> <literal type="number" pos:start="123:21" pos:end="123:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:22"><expr pos:start="125:13" pos:end="125:21"><name pos:start="125:13" pos:end="125:16">size</name> <operator pos:start="125:18" pos:end="125:19">-=</operator> <literal type="number" pos:start="125:21" pos:end="125:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:56"><expr pos:start="127:13" pos:end="127:55"><name pos:start="127:13" pos:end="127:21">lace_size</name> <operator pos:start="127:23" pos:end="127:23">=</operator> <call pos:start="127:25" pos:end="127:55"><name pos:start="127:25" pos:end="127:34">av_mallocz</name><argument_list pos:start="127:35" pos:end="127:55">(<argument pos:start="127:36" pos:end="127:54"><expr pos:start="127:36" pos:end="127:54"><name pos:start="127:36" pos:end="127:40">laces</name> <operator pos:start="127:42" pos:end="127:42">*</operator> <sizeof pos:start="127:44" pos:end="127:54">sizeof<argument_list pos:start="127:50" pos:end="127:54">(<argument pos:start="127:51" pos:end="127:53"><expr pos:start="127:51" pos:end="127:53"><name pos:start="127:51" pos:end="127:53">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <switch pos:start="131:13" pos:end="243:13">switch <condition pos:start="131:20" pos:end="131:40">(<expr pos:start="131:21" pos:end="131:39"><operator pos:start="131:21" pos:end="131:21">(</operator><name pos:start="131:22" pos:end="131:26">flags</name> <operator pos:start="131:28" pos:end="131:28">&amp;</operator> <literal type="number" pos:start="131:30" pos:end="131:33">0x06</literal><operator pos:start="131:34" pos:end="131:34">)</operator> <operator pos:start="131:36" pos:end="131:37">&gt;&gt;</operator> <literal type="number" pos:start="131:39" pos:end="131:39">1</literal></expr>)</condition> <block pos:start="131:42" pos:end="243:13">{<block_content pos:start="133:17" pos:end="241:17">

                <case pos:start="133:17" pos:end="133:25">case <expr pos:start="133:22" pos:end="133:24"><literal type="number" pos:start="133:22" pos:end="133:24">0x1</literal></expr>:</case> <comment type="block" pos:start="133:27" pos:end="133:43">/* xiph lacing */</comment> <block pos:start="133:45" pos:end="173:17">{<block_content pos:start="135:21" pos:end="171:26">

                    <decl_stmt pos:start="135:21" pos:end="135:33"><decl pos:start="135:21" pos:end="135:32"><type pos:start="135:21" pos:end="135:27"><name pos:start="135:21" pos:end="135:27">uint8_t</name></type> <name pos:start="135:29" pos:end="135:32">temp</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="137:21" pos:end="137:39"><decl pos:start="137:21" pos:end="137:38"><type pos:start="137:21" pos:end="137:28"><name pos:start="137:21" pos:end="137:28">uint32_t</name></type> <name pos:start="137:30" pos:end="137:34">total</name> <init pos:start="137:36" pos:end="137:38">= <expr pos:start="137:38" pos:end="137:38"><literal type="number" pos:start="137:38" pos:end="137:38">0</literal></expr></init></decl>;</decl_stmt>

                    <for pos:start="139:21" pos:end="167:21">for <control pos:start="139:25" pos:end="139:63">(<init pos:start="139:26" pos:end="139:31"><expr pos:start="139:26" pos:end="139:30"><name pos:start="139:26" pos:end="139:26">n</name> <operator pos:start="139:28" pos:end="139:28">=</operator> <literal type="number" pos:start="139:30" pos:end="139:30">0</literal></expr>;</init> <condition pos:start="139:33" pos:end="139:58"><expr pos:start="139:33" pos:end="139:57"><name pos:start="139:33" pos:end="139:35">res</name> <operator pos:start="139:37" pos:end="139:38">==</operator> <literal type="number" pos:start="139:40" pos:end="139:40">0</literal> <operator pos:start="139:42" pos:end="139:43">&amp;&amp;</operator> <name pos:start="139:45" pos:end="139:45">n</name> <operator pos:start="139:47" pos:end="139:47">&lt;</operator> <name pos:start="139:49" pos:end="139:53">laces</name> <operator pos:start="139:55" pos:end="139:55">-</operator> <literal type="number" pos:start="139:57" pos:end="139:57">1</literal></expr>;</condition> <incr pos:start="139:60" pos:end="139:62"><expr pos:start="139:60" pos:end="139:62"><name pos:start="139:60" pos:end="139:60">n</name><operator pos:start="139:61" pos:end="139:62">++</operator></expr></incr>)</control> <block pos:start="139:65" pos:end="167:21">{<block_content pos:start="141:25" pos:end="165:46">

                        <while pos:start="141:25" pos:end="163:25">while <condition pos:start="141:31" pos:end="141:33">(<expr pos:start="141:32" pos:end="141:32"><literal type="number" pos:start="141:32" pos:end="141:32">1</literal></expr>)</condition> <block pos:start="141:35" pos:end="163:25">{<block_content pos:start="143:29" pos:end="161:38">

                            <if_stmt pos:start="143:29" pos:end="149:29"><if pos:start="143:29" pos:end="149:29">if <condition pos:start="143:32" pos:end="143:42">(<expr pos:start="143:33" pos:end="143:41"><name pos:start="143:33" pos:end="143:36">size</name> <operator pos:start="143:38" pos:end="143:39">==</operator> <literal type="number" pos:start="143:41" pos:end="143:41">0</literal></expr>)</condition> <block pos:start="143:44" pos:end="149:29">{<block_content pos:start="145:33" pos:end="147:38">

                                <expr_stmt pos:start="145:33" pos:end="145:41"><expr pos:start="145:33" pos:end="145:40"><name pos:start="145:33" pos:end="145:35">res</name> <operator pos:start="145:37" pos:end="145:37">=</operator> <operator pos:start="145:39" pos:end="145:39">-</operator><literal type="number" pos:start="145:40" pos:end="145:40">1</literal></expr>;</expr_stmt>

                                <break pos:start="147:33" pos:end="147:38">break;</break>

                            </block_content>}</block></if></if_stmt>

                            <expr_stmt pos:start="151:29" pos:end="151:41"><expr pos:start="151:29" pos:end="151:40"><name pos:start="151:29" pos:end="151:32">temp</name> <operator pos:start="151:34" pos:end="151:34">=</operator> <operator pos:start="151:36" pos:end="151:36">*</operator><name pos:start="151:37" pos:end="151:40">data</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="153:29" pos:end="153:49"><expr pos:start="153:29" pos:end="153:48"><name pos:start="153:29" pos:end="153:40"><name pos:start="153:29" pos:end="153:37">lace_size</name><index pos:start="153:38" pos:end="153:40">[<expr pos:start="153:39" pos:end="153:39"><name pos:start="153:39" pos:end="153:39">n</name></expr>]</index></name> <operator pos:start="153:42" pos:end="153:43">+=</operator> <name pos:start="153:45" pos:end="153:48">temp</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="155:29" pos:end="155:38"><expr pos:start="155:29" pos:end="155:37"><name pos:start="155:29" pos:end="155:32">data</name> <operator pos:start="155:34" pos:end="155:35">+=</operator> <literal type="number" pos:start="155:37" pos:end="155:37">1</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="157:29" pos:end="157:38"><expr pos:start="157:29" pos:end="157:37"><name pos:start="157:29" pos:end="157:32">size</name> <operator pos:start="157:34" pos:end="157:35">-=</operator> <literal type="number" pos:start="157:37" pos:end="157:37">1</literal></expr>;</expr_stmt>

                            <if_stmt pos:start="159:29" pos:end="161:38"><if pos:start="159:29" pos:end="161:38">if <condition pos:start="159:32" pos:end="159:45">(<expr pos:start="159:33" pos:end="159:44"><name pos:start="159:33" pos:end="159:36">temp</name> <operator pos:start="159:38" pos:end="159:39">!=</operator> <literal type="number" pos:start="159:41" pos:end="159:44">0xff</literal></expr>)</condition><block type="pseudo" pos:start="161:33" pos:end="161:38"><block_content pos:start="161:33" pos:end="161:38">

                                <break pos:start="161:33" pos:end="161:38">break;</break></block_content></block></if></if_stmt>

                        </block_content>}</block></while>

                        <expr_stmt pos:start="165:25" pos:end="165:46"><expr pos:start="165:25" pos:end="165:45"><name pos:start="165:25" pos:end="165:29">total</name> <operator pos:start="165:31" pos:end="165:32">+=</operator> <name pos:start="165:34" pos:end="165:45"><name pos:start="165:34" pos:end="165:42">lace_size</name><index pos:start="165:43" pos:end="165:45">[<expr pos:start="165:44" pos:end="165:44"><name pos:start="165:44" pos:end="165:44">n</name></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="169:21" pos:end="169:48"><expr pos:start="169:21" pos:end="169:47"><name pos:start="169:21" pos:end="169:32"><name pos:start="169:21" pos:end="169:29">lace_size</name><index pos:start="169:30" pos:end="169:32">[<expr pos:start="169:31" pos:end="169:31"><name pos:start="169:31" pos:end="169:31">n</name></expr>]</index></name> <operator pos:start="169:34" pos:end="169:34">=</operator> <name pos:start="169:36" pos:end="169:39">size</name> <operator pos:start="169:41" pos:end="169:41">-</operator> <name pos:start="169:43" pos:end="169:47">total</name></expr>;</expr_stmt>

                    <break pos:start="171:21" pos:end="171:26">break;</break>

                </block_content>}</block>



                <case pos:start="177:17" pos:end="177:25">case <expr pos:start="177:22" pos:end="177:24"><literal type="number" pos:start="177:22" pos:end="177:24">0x2</literal></expr>:</case> <comment type="block" pos:start="177:27" pos:end="177:49">/* fixed-size lacing */</comment>

                    <for pos:start="179:21" pos:end="181:52">for <control pos:start="179:25" pos:end="179:47">(<init pos:start="179:26" pos:end="179:31"><expr pos:start="179:26" pos:end="179:30"><name pos:start="179:26" pos:end="179:26">n</name> <operator pos:start="179:28" pos:end="179:28">=</operator> <literal type="number" pos:start="179:30" pos:end="179:30">0</literal></expr>;</init> <condition pos:start="179:33" pos:end="179:42"><expr pos:start="179:33" pos:end="179:41"><name pos:start="179:33" pos:end="179:33">n</name> <operator pos:start="179:35" pos:end="179:35">&lt;</operator> <name pos:start="179:37" pos:end="179:41">laces</name></expr>;</condition> <incr pos:start="179:44" pos:end="179:46"><expr pos:start="179:44" pos:end="179:46"><name pos:start="179:44" pos:end="179:44">n</name><operator pos:start="179:45" pos:end="179:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="181:25" pos:end="181:52"><block_content pos:start="181:25" pos:end="181:52">

                        <expr_stmt pos:start="181:25" pos:end="181:52"><expr pos:start="181:25" pos:end="181:51"><name pos:start="181:25" pos:end="181:36"><name pos:start="181:25" pos:end="181:33">lace_size</name><index pos:start="181:34" pos:end="181:36">[<expr pos:start="181:35" pos:end="181:35"><name pos:start="181:35" pos:end="181:35">n</name></expr>]</index></name> <operator pos:start="181:38" pos:end="181:38">=</operator> <name pos:start="181:40" pos:end="181:43">size</name> <operator pos:start="181:45" pos:end="181:45">/</operator> <name pos:start="181:47" pos:end="181:51">laces</name></expr>;</expr_stmt></block_content></block></for>

                    <break pos:start="183:21" pos:end="183:26">break;</break>



                <case pos:start="187:17" pos:end="187:25">case <expr pos:start="187:22" pos:end="187:24"><literal type="number" pos:start="187:22" pos:end="187:24">0x3</literal></expr>:</case> <comment type="block" pos:start="187:27" pos:end="187:43">/* EBML lacing */</comment> <block pos:start="187:45" pos:end="241:17">{<block_content pos:start="189:21" pos:end="239:26">

                    <decl_stmt pos:start="189:21" pos:end="189:35"><decl pos:start="189:21" pos:end="189:34"><type pos:start="189:21" pos:end="189:28"><name pos:start="189:21" pos:end="189:28">uint32_t</name></type> <name pos:start="189:30" pos:end="189:34">total</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="191:21" pos:end="191:64"><expr pos:start="191:21" pos:end="191:63"><name pos:start="191:21" pos:end="191:21">n</name> <operator pos:start="191:23" pos:end="191:23">=</operator> <call pos:start="191:25" pos:end="191:63"><name pos:start="191:25" pos:end="191:45">matroska_ebmlnum_uint</name><argument_list pos:start="191:46" pos:end="191:63">(<argument pos:start="191:47" pos:end="191:50"><expr pos:start="191:47" pos:end="191:50"><name pos:start="191:47" pos:end="191:50">data</name></expr></argument>, <argument pos:start="191:53" pos:end="191:56"><expr pos:start="191:53" pos:end="191:56"><name pos:start="191:53" pos:end="191:56">size</name></expr></argument>, <argument pos:start="191:59" pos:end="191:62"><expr pos:start="191:59" pos:end="191:62"><operator pos:start="191:59" pos:end="191:59">&amp;</operator><name pos:start="191:60" pos:end="191:62">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="193:21" pos:end="201:21"><if pos:start="193:21" pos:end="201:21">if <condition pos:start="193:24" pos:end="193:30">(<expr pos:start="193:25" pos:end="193:29"><name pos:start="193:25" pos:end="193:25">n</name> <operator pos:start="193:27" pos:end="193:27">&lt;</operator> <literal type="number" pos:start="193:29" pos:end="193:29">0</literal></expr>)</condition> <block pos:start="193:32" pos:end="201:21">{<block_content pos:start="195:25" pos:end="199:30">

                        <expr_stmt pos:start="195:25" pos:end="197:58"><expr pos:start="195:25" pos:end="197:57"><call pos:start="195:25" pos:end="197:57"><name pos:start="195:25" pos:end="195:30">av_log</name><argument_list pos:start="195:31" pos:end="197:57">(<argument pos:start="195:32" pos:end="195:44"><expr pos:start="195:32" pos:end="195:44"><name pos:start="195:32" pos:end="195:44"><name pos:start="195:32" pos:end="195:39">matroska</name><operator pos:start="195:40" pos:end="195:41">-&gt;</operator><name pos:start="195:42" pos:end="195:44">ctx</name></name></expr></argument>, <argument pos:start="195:47" pos:end="195:57"><expr pos:start="195:47" pos:end="195:57"><name pos:start="195:47" pos:end="195:57">AV_LOG_INFO</name></expr></argument>,

                               <argument pos:start="197:32" pos:end="197:56"><expr pos:start="197:32" pos:end="197:56"><literal type="string" pos:start="197:32" pos:end="197:56">"EBML block data error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="199:25" pos:end="199:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="203:21" pos:end="203:30"><expr pos:start="203:21" pos:end="203:29"><name pos:start="203:21" pos:end="203:24">data</name> <operator pos:start="203:26" pos:end="203:27">+=</operator> <name pos:start="203:29" pos:end="203:29">n</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="205:21" pos:end="205:30"><expr pos:start="205:21" pos:end="205:29"><name pos:start="205:21" pos:end="205:24">size</name> <operator pos:start="205:26" pos:end="205:27">-=</operator> <name pos:start="205:29" pos:end="205:29">n</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="207:21" pos:end="207:47"><expr pos:start="207:21" pos:end="207:46"><name pos:start="207:21" pos:end="207:25">total</name> <operator pos:start="207:27" pos:end="207:27">=</operator> <name pos:start="207:29" pos:end="207:40"><name pos:start="207:29" pos:end="207:37">lace_size</name><index pos:start="207:38" pos:end="207:40">[<expr pos:start="207:39" pos:end="207:39"><literal type="number" pos:start="207:39" pos:end="207:39">0</literal></expr>]</index></name> <operator pos:start="207:42" pos:end="207:42">=</operator> <name pos:start="207:44" pos:end="207:46">num</name></expr>;</expr_stmt>

                    <for pos:start="209:21" pos:end="235:21">for <control pos:start="209:25" pos:end="209:63">(<init pos:start="209:26" pos:end="209:31"><expr pos:start="209:26" pos:end="209:30"><name pos:start="209:26" pos:end="209:26">n</name> <operator pos:start="209:28" pos:end="209:28">=</operator> <literal type="number" pos:start="209:30" pos:end="209:30">1</literal></expr>;</init> <condition pos:start="209:33" pos:end="209:58"><expr pos:start="209:33" pos:end="209:57"><name pos:start="209:33" pos:end="209:35">res</name> <operator pos:start="209:37" pos:end="209:38">==</operator> <literal type="number" pos:start="209:40" pos:end="209:40">0</literal> <operator pos:start="209:42" pos:end="209:43">&amp;&amp;</operator> <name pos:start="209:45" pos:end="209:45">n</name> <operator pos:start="209:47" pos:end="209:47">&lt;</operator> <name pos:start="209:49" pos:end="209:53">laces</name> <operator pos:start="209:55" pos:end="209:55">-</operator> <literal type="number" pos:start="209:57" pos:end="209:57">1</literal></expr>;</condition> <incr pos:start="209:60" pos:end="209:62"><expr pos:start="209:60" pos:end="209:62"><name pos:start="209:60" pos:end="209:60">n</name><operator pos:start="209:61" pos:end="209:62">++</operator></expr></incr>)</control> <block pos:start="209:65" pos:end="235:21">{<block_content pos:start="211:25" pos:end="233:46">

                        <decl_stmt pos:start="211:25" pos:end="211:37"><decl pos:start="211:25" pos:end="211:36"><type pos:start="211:25" pos:end="211:31"><name pos:start="211:25" pos:end="211:31">int64_t</name></type> <name pos:start="211:33" pos:end="211:36">snum</name></decl>;</decl_stmt>

                        <decl_stmt pos:start="213:25" pos:end="213:30"><decl pos:start="213:25" pos:end="213:29"><type pos:start="213:25" pos:end="213:27"><name pos:start="213:25" pos:end="213:27">int</name></type> <name pos:start="213:29" pos:end="213:29">r</name></decl>;</decl_stmt>

                        <expr_stmt pos:start="215:25" pos:end="215:70"><expr pos:start="215:25" pos:end="215:69"><name pos:start="215:25" pos:end="215:25">r</name> <operator pos:start="215:27" pos:end="215:27">=</operator> <call pos:start="215:29" pos:end="215:69"><name pos:start="215:29" pos:end="215:49">matroska_ebmlnum_sint</name> <argument_list pos:start="215:51" pos:end="215:69">(<argument pos:start="215:52" pos:end="215:55"><expr pos:start="215:52" pos:end="215:55"><name pos:start="215:52" pos:end="215:55">data</name></expr></argument>, <argument pos:start="215:58" pos:end="215:61"><expr pos:start="215:58" pos:end="215:61"><name pos:start="215:58" pos:end="215:61">size</name></expr></argument>, <argument pos:start="215:64" pos:end="215:68"><expr pos:start="215:64" pos:end="215:68"><operator pos:start="215:64" pos:end="215:64">&amp;</operator><name pos:start="215:65" pos:end="215:68">snum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="217:25" pos:end="225:25"><if pos:start="217:25" pos:end="225:25">if <condition pos:start="217:28" pos:end="217:34">(<expr pos:start="217:29" pos:end="217:33"><name pos:start="217:29" pos:end="217:29">r</name> <operator pos:start="217:31" pos:end="217:31">&lt;</operator> <literal type="number" pos:start="217:33" pos:end="217:33">0</literal></expr>)</condition> <block pos:start="217:36" pos:end="225:25">{<block_content pos:start="219:29" pos:end="223:34">

                            <expr_stmt pos:start="219:29" pos:end="221:62"><expr pos:start="219:29" pos:end="221:61"><call pos:start="219:29" pos:end="221:61"><name pos:start="219:29" pos:end="219:34">av_log</name><argument_list pos:start="219:35" pos:end="221:61">(<argument pos:start="219:36" pos:end="219:48"><expr pos:start="219:36" pos:end="219:48"><name pos:start="219:36" pos:end="219:48"><name pos:start="219:36" pos:end="219:43">matroska</name><operator pos:start="219:44" pos:end="219:45">-&gt;</operator><name pos:start="219:46" pos:end="219:48">ctx</name></name></expr></argument>, <argument pos:start="219:51" pos:end="219:61"><expr pos:start="219:51" pos:end="219:61"><name pos:start="219:51" pos:end="219:61">AV_LOG_INFO</name></expr></argument>,

                                   <argument pos:start="221:36" pos:end="221:60"><expr pos:start="221:36" pos:end="221:60"><literal type="string" pos:start="221:36" pos:end="221:60">"EBML block data error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <break pos:start="223:29" pos:end="223:34">break;</break>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="227:25" pos:end="227:34"><expr pos:start="227:25" pos:end="227:33"><name pos:start="227:25" pos:end="227:28">data</name> <operator pos:start="227:30" pos:end="227:31">+=</operator> <name pos:start="227:33" pos:end="227:33">r</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="229:25" pos:end="229:34"><expr pos:start="229:25" pos:end="229:33"><name pos:start="229:25" pos:end="229:28">size</name> <operator pos:start="229:30" pos:end="229:31">-=</operator> <name pos:start="229:33" pos:end="229:33">r</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="231:25" pos:end="231:63"><expr pos:start="231:25" pos:end="231:62"><name pos:start="231:25" pos:end="231:36"><name pos:start="231:25" pos:end="231:33">lace_size</name><index pos:start="231:34" pos:end="231:36">[<expr pos:start="231:35" pos:end="231:35"><name pos:start="231:35" pos:end="231:35">n</name></expr>]</index></name> <operator pos:start="231:38" pos:end="231:38">=</operator> <name pos:start="231:40" pos:end="231:55"><name pos:start="231:40" pos:end="231:48">lace_size</name><index pos:start="231:49" pos:end="231:55">[<expr pos:start="231:50" pos:end="231:54"><name pos:start="231:50" pos:end="231:50">n</name> <operator pos:start="231:52" pos:end="231:52">-</operator> <literal type="number" pos:start="231:54" pos:end="231:54">1</literal></expr>]</index></name> <operator pos:start="231:57" pos:end="231:57">+</operator> <name pos:start="231:59" pos:end="231:62">snum</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="233:25" pos:end="233:46"><expr pos:start="233:25" pos:end="233:45"><name pos:start="233:25" pos:end="233:29">total</name> <operator pos:start="233:31" pos:end="233:32">+=</operator> <name pos:start="233:34" pos:end="233:45"><name pos:start="233:34" pos:end="233:42">lace_size</name><index pos:start="233:43" pos:end="233:45">[<expr pos:start="233:44" pos:end="233:44"><name pos:start="233:44" pos:end="233:44">n</name></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="237:21" pos:end="237:48"><expr pos:start="237:21" pos:end="237:47"><name pos:start="237:21" pos:end="237:32"><name pos:start="237:21" pos:end="237:29">lace_size</name><index pos:start="237:30" pos:end="237:32">[<expr pos:start="237:31" pos:end="237:31"><name pos:start="237:31" pos:end="237:31">n</name></expr>]</index></name> <operator pos:start="237:34" pos:end="237:34">=</operator> <name pos:start="237:36" pos:end="237:39">size</name> <operator pos:start="237:41" pos:end="237:41">-</operator> <name pos:start="237:43" pos:end="237:47">total</name></expr>;</expr_stmt>

                    <break pos:start="239:21" pos:end="239:26">break;</break>

                </block_content>}</block>

            </block_content>}</block></switch>

            <break pos:start="245:13" pos:end="245:18">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="251:5" pos:end="347:5"><if pos:start="251:5" pos:end="347:5">if <condition pos:start="251:8" pos:end="251:17">(<expr pos:start="251:9" pos:end="251:16"><name pos:start="251:9" pos:end="251:11">res</name> <operator pos:start="251:13" pos:end="251:14">==</operator> <literal type="number" pos:start="251:16" pos:end="251:16">0</literal></expr>)</condition> <block pos:start="251:19" pos:end="347:5">{<block_content pos:start="253:9" pos:end="345:9">

        <decl_stmt pos:start="253:9" pos:end="253:76"><decl pos:start="253:9" pos:end="253:75"><type pos:start="253:9" pos:end="253:11"><name pos:start="253:9" pos:end="253:11">int</name></type> <name pos:start="253:13" pos:end="253:18">real_v</name> <init pos:start="253:20" pos:end="253:75">= <expr pos:start="253:22" pos:end="253:75"><name pos:start="253:22" pos:end="253:44"><name pos:start="253:22" pos:end="253:29">matroska</name><operator pos:start="253:30" pos:end="253:31">-&gt;</operator><name pos:start="253:32" pos:end="253:37">tracks</name><index pos:start="253:38" pos:end="253:44">[<expr pos:start="253:39" pos:end="253:43"><name pos:start="253:39" pos:end="253:43">track</name></expr>]</index></name><operator pos:start="253:45" pos:end="253:46">-&gt;</operator><name pos:start="253:47" pos:end="253:51">flags</name> <operator pos:start="253:53" pos:end="253:53">&amp;</operator> <name pos:start="253:55" pos:end="253:75">MATROSKA_TRACK_REAL_V</name></expr></init></decl>;</decl_stmt>

        <for pos:start="255:9" pos:end="345:9">for <control pos:start="255:13" pos:end="255:35">(<init pos:start="255:14" pos:end="255:19"><expr pos:start="255:14" pos:end="255:18"><name pos:start="255:14" pos:end="255:14">n</name> <operator pos:start="255:16" pos:end="255:16">=</operator> <literal type="number" pos:start="255:18" pos:end="255:18">0</literal></expr>;</init> <condition pos:start="255:21" pos:end="255:30"><expr pos:start="255:21" pos:end="255:29"><name pos:start="255:21" pos:end="255:21">n</name> <operator pos:start="255:23" pos:end="255:23">&lt;</operator> <name pos:start="255:25" pos:end="255:29">laces</name></expr>;</condition> <incr pos:start="255:32" pos:end="255:34"><expr pos:start="255:32" pos:end="255:34"><name pos:start="255:32" pos:end="255:32">n</name><operator pos:start="255:33" pos:end="255:34">++</operator></expr></incr>)</control> <block pos:start="255:37" pos:end="345:9">{<block_content pos:start="257:13" pos:end="343:33">

            <decl_stmt pos:start="257:13" pos:end="257:47"><decl pos:start="257:13" pos:end="257:46"><type pos:start="257:13" pos:end="257:20"><name pos:start="257:13" pos:end="257:20">uint64_t</name></type> <name pos:start="257:22" pos:end="257:29">timecode</name> <init pos:start="257:31" pos:end="257:46">= <expr pos:start="257:33" pos:end="257:46"><name pos:start="257:33" pos:end="257:46">AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="259:13" pos:end="259:34"><decl pos:start="259:13" pos:end="259:21"><type pos:start="259:13" pos:end="259:15"><name pos:start="259:13" pos:end="259:15">int</name></type> <name pos:start="259:17" pos:end="259:21">slice</name></decl>, <decl pos:start="259:24" pos:end="259:33"><type ref="prev" pos:start="259:13" pos:end="259:15"/><name pos:start="259:24" pos:end="259:29">slices</name> <init pos:start="259:31" pos:end="259:33">= <expr pos:start="259:33" pos:end="259:33"><literal type="number" pos:start="259:33" pos:end="259:33">1</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="263:13" pos:end="269:13"><if pos:start="263:13" pos:end="269:13">if <condition pos:start="263:16" pos:end="263:23">(<expr pos:start="263:17" pos:end="263:22"><name pos:start="263:17" pos:end="263:22">real_v</name></expr>)</condition> <block pos:start="263:25" pos:end="269:13">{<block_content pos:start="265:17" pos:end="267:31">

                <expr_stmt pos:start="265:17" pos:end="265:37"><expr pos:start="265:17" pos:end="265:36"><name pos:start="265:17" pos:end="265:22">slices</name> <operator pos:start="265:24" pos:end="265:24">=</operator> <operator pos:start="265:26" pos:end="265:26">*</operator><name pos:start="265:27" pos:end="265:30">data</name><operator pos:start="265:31" pos:end="265:32">++</operator> <operator pos:start="265:34" pos:end="265:34">+</operator> <literal type="number" pos:start="265:36" pos:end="265:36">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:31"><expr pos:start="267:17" pos:end="267:30"><name pos:start="267:17" pos:end="267:28"><name pos:start="267:17" pos:end="267:25">lace_size</name><index pos:start="267:26" pos:end="267:28">[<expr pos:start="267:27" pos:end="267:27"><name pos:start="267:27" pos:end="267:27">n</name></expr>]</index></name><operator pos:start="267:29" pos:end="267:30">--</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="271:13" pos:end="277:13"><if pos:start="271:13" pos:end="277:13">if <condition pos:start="271:16" pos:end="271:55">(<expr pos:start="271:17" pos:end="271:54"><name pos:start="271:17" pos:end="271:28">cluster_time</name> <operator pos:start="271:30" pos:end="271:31">!=</operator> <operator pos:start="271:33" pos:end="271:33">(</operator><name pos:start="271:34" pos:end="271:41">uint64_t</name><operator pos:start="271:42" pos:end="271:42">)</operator><operator pos:start="271:43" pos:end="271:43">-</operator><literal type="number" pos:start="271:44" pos:end="271:44">1</literal> <operator pos:start="271:46" pos:end="271:47">&amp;&amp;</operator> <name pos:start="271:49" pos:end="271:49">n</name> <operator pos:start="271:51" pos:end="271:52">==</operator> <literal type="number" pos:start="271:54" pos:end="271:54">0</literal></expr>)</condition> <block pos:start="271:57" pos:end="277:13">{<block_content pos:start="273:17" pos:end="275:57">

                <if_stmt pos:start="273:17" pos:end="275:57"><if pos:start="273:17" pos:end="275:57">if <condition pos:start="273:20" pos:end="273:51">(<expr pos:start="273:21" pos:end="273:50"><name pos:start="273:21" pos:end="273:32">cluster_time</name> <operator pos:start="273:34" pos:end="273:34">+</operator> <name pos:start="273:36" pos:end="273:45">block_time</name> <operator pos:start="273:47" pos:end="273:48">&gt;=</operator> <literal type="number" pos:start="273:50" pos:end="273:50">0</literal></expr>)</condition><block type="pseudo" pos:start="275:21" pos:end="275:57"><block_content pos:start="275:21" pos:end="275:57">

                    <expr_stmt pos:start="275:21" pos:end="275:57"><expr pos:start="275:21" pos:end="275:56"><name pos:start="275:21" pos:end="275:28">timecode</name> <operator pos:start="275:30" pos:end="275:30">=</operator> <name pos:start="275:32" pos:end="275:43">cluster_time</name> <operator pos:start="275:45" pos:end="275:45">+</operator> <name pos:start="275:47" pos:end="275:56">block_time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="279:13" pos:end="279:33">/* FIXME: duration */</comment>



            <for pos:start="283:13" pos:end="341:13">for <control pos:start="283:17" pos:end="283:48">(<init pos:start="283:18" pos:end="283:25"><expr pos:start="283:18" pos:end="283:24"><name pos:start="283:18" pos:end="283:22">slice</name><operator pos:start="283:23" pos:end="283:23">=</operator><literal type="number" pos:start="283:24" pos:end="283:24">0</literal></expr>;</init> <condition pos:start="283:27" pos:end="283:39"><expr pos:start="283:27" pos:end="283:38"><name pos:start="283:27" pos:end="283:31">slice</name><operator pos:start="283:32" pos:end="283:32">&lt;</operator><name pos:start="283:33" pos:end="283:38">slices</name></expr>;</condition> <incr pos:start="283:41" pos:end="283:47"><expr pos:start="283:41" pos:end="283:47"><name pos:start="283:41" pos:end="283:45">slice</name><operator pos:start="283:46" pos:end="283:47">++</operator></expr></incr>)</control> <block pos:start="283:50" pos:end="341:13">{<block_content pos:start="285:17" pos:end="339:57">

                <decl_stmt pos:start="285:17" pos:end="285:49"><decl pos:start="285:17" pos:end="285:30"><type pos:start="285:17" pos:end="285:19"><name pos:start="285:17" pos:end="285:19">int</name></type> <name pos:start="285:21" pos:end="285:30">slice_size</name></decl>, <decl pos:start="285:33" pos:end="285:48"><type ref="prev" pos:start="285:17" pos:end="285:19"/><name pos:start="285:33" pos:end="285:44">slice_offset</name> <init pos:start="285:46" pos:end="285:48">= <expr pos:start="285:48" pos:end="285:48"><literal type="number" pos:start="285:48" pos:end="285:48">0</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="287:17" pos:end="289:66"><if pos:start="287:17" pos:end="289:66">if <condition pos:start="287:20" pos:end="287:27">(<expr pos:start="287:21" pos:end="287:26"><name pos:start="287:21" pos:end="287:26">real_v</name></expr>)</condition><block type="pseudo" pos:start="289:21" pos:end="289:66"><block_content pos:start="289:21" pos:end="289:66">

                    <expr_stmt pos:start="289:21" pos:end="289:66"><expr pos:start="289:21" pos:end="289:65"><name pos:start="289:21" pos:end="289:32">slice_offset</name> <operator pos:start="289:34" pos:end="289:34">=</operator> <call pos:start="289:36" pos:end="289:65"><name pos:start="289:36" pos:end="289:44">rv_offset</name><argument_list pos:start="289:45" pos:end="289:65">(<argument pos:start="289:46" pos:end="289:49"><expr pos:start="289:46" pos:end="289:49"><name pos:start="289:46" pos:end="289:49">data</name></expr></argument>, <argument pos:start="289:52" pos:end="289:56"><expr pos:start="289:52" pos:end="289:56"><name pos:start="289:52" pos:end="289:56">slice</name></expr></argument>, <argument pos:start="289:59" pos:end="289:64"><expr pos:start="289:59" pos:end="289:64"><name pos:start="289:59" pos:end="289:64">slices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="291:17" pos:end="297:81"><if pos:start="291:17" pos:end="293:61">if <condition pos:start="291:20" pos:end="291:38">(<expr pos:start="291:21" pos:end="291:37"><name pos:start="291:21" pos:end="291:25">slice</name><operator pos:start="291:26" pos:end="291:26">+</operator><literal type="number" pos:start="291:27" pos:end="291:27">1</literal> <operator pos:start="291:29" pos:end="291:30">==</operator> <name pos:start="291:32" pos:end="291:37">slices</name></expr>)</condition><block type="pseudo" pos:start="293:21" pos:end="293:61"><block_content pos:start="293:21" pos:end="293:61">

                    <expr_stmt pos:start="293:21" pos:end="293:61"><expr pos:start="293:21" pos:end="293:60"><name pos:start="293:21" pos:end="293:30">slice_size</name> <operator pos:start="293:32" pos:end="293:32">=</operator> <name pos:start="293:34" pos:end="293:45"><name pos:start="293:34" pos:end="293:42">lace_size</name><index pos:start="293:43" pos:end="293:45">[<expr pos:start="293:44" pos:end="293:44"><name pos:start="293:44" pos:end="293:44">n</name></expr>]</index></name> <operator pos:start="293:47" pos:end="293:47">-</operator> <name pos:start="293:49" pos:end="293:60">slice_offset</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="295:17" pos:end="297:81">else<block type="pseudo" pos:start="297:21" pos:end="297:81"><block_content pos:start="297:21" pos:end="297:81">

                    <expr_stmt pos:start="297:21" pos:end="297:81"><expr pos:start="297:21" pos:end="297:80"><name pos:start="297:21" pos:end="297:30">slice_size</name> <operator pos:start="297:32" pos:end="297:32">=</operator> <call pos:start="297:34" pos:end="297:65"><name pos:start="297:34" pos:end="297:42">rv_offset</name><argument_list pos:start="297:43" pos:end="297:65">(<argument pos:start="297:44" pos:end="297:47"><expr pos:start="297:44" pos:end="297:47"><name pos:start="297:44" pos:end="297:47">data</name></expr></argument>, <argument pos:start="297:50" pos:end="297:56"><expr pos:start="297:50" pos:end="297:56"><name pos:start="297:50" pos:end="297:54">slice</name><operator pos:start="297:55" pos:end="297:55">+</operator><literal type="number" pos:start="297:56" pos:end="297:56">1</literal></expr></argument>, <argument pos:start="297:59" pos:end="297:64"><expr pos:start="297:59" pos:end="297:64"><name pos:start="297:59" pos:end="297:64">slices</name></expr></argument>)</argument_list></call> <operator pos:start="297:67" pos:end="297:67">-</operator> <name pos:start="297:69" pos:end="297:80">slice_offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="299:17" pos:end="299:51"><expr pos:start="299:17" pos:end="299:50"><name pos:start="299:17" pos:end="299:19">pkt</name> <operator pos:start="299:21" pos:end="299:21">=</operator> <call pos:start="299:23" pos:end="299:50"><name pos:start="299:23" pos:end="299:32">av_mallocz</name><argument_list pos:start="299:33" pos:end="299:50">(<argument pos:start="299:34" pos:end="299:49"><expr pos:start="299:34" pos:end="299:49"><sizeof pos:start="299:34" pos:end="299:49">sizeof<argument_list pos:start="299:40" pos:end="299:49">(<argument pos:start="299:41" pos:end="299:48"><expr pos:start="299:41" pos:end="299:48"><name pos:start="299:41" pos:end="299:48">AVPacket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="301:17" pos:end="301:39"><if pos:start="301:17" pos:end="301:39">if <condition pos:start="301:20" pos:end="301:25">(<expr pos:start="301:21" pos:end="301:24"><name pos:start="301:21" pos:end="301:24">ppkt</name></expr>)</condition><block type="pseudo" pos:start="301:28" pos:end="301:39"><block_content pos:start="301:28" pos:end="301:39">  <expr_stmt pos:start="301:28" pos:end="301:39"><expr pos:start="301:28" pos:end="301:38"><operator pos:start="301:28" pos:end="301:28">*</operator><name pos:start="301:29" pos:end="301:32">ppkt</name> <operator pos:start="301:34" pos:end="301:34">=</operator> <name pos:start="301:36" pos:end="301:38">pkt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="block" pos:start="303:17" pos:end="303:47">/* XXX: prevent data copy... */</comment>

                <if_stmt pos:start="305:17" pos:end="313:17"><if pos:start="305:17" pos:end="313:17">if <condition pos:start="305:20" pos:end="305:55">(<expr pos:start="305:21" pos:end="305:54"><call pos:start="305:21" pos:end="305:50"><name pos:start="305:21" pos:end="305:33">av_new_packet</name><argument_list pos:start="305:34" pos:end="305:50">(<argument pos:start="305:35" pos:end="305:37"><expr pos:start="305:35" pos:end="305:37"><name pos:start="305:35" pos:end="305:37">pkt</name></expr></argument>, <argument pos:start="305:40" pos:end="305:49"><expr pos:start="305:40" pos:end="305:49"><name pos:start="305:40" pos:end="305:49">slice_size</name></expr></argument>)</argument_list></call> <operator pos:start="305:52" pos:end="305:52">&lt;</operator> <literal type="number" pos:start="305:54" pos:end="305:54">0</literal></expr>)</condition> <block pos:start="305:57" pos:end="313:17">{<block_content pos:start="307:21" pos:end="311:26">

                    <expr_stmt pos:start="307:21" pos:end="307:40"><expr pos:start="307:21" pos:end="307:39"><name pos:start="307:21" pos:end="307:23">res</name> <operator pos:start="307:25" pos:end="307:25">=</operator> <name pos:start="307:27" pos:end="307:39">AVERROR_NOMEM</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="309:21" pos:end="309:32"><expr pos:start="309:21" pos:end="309:31"><name pos:start="309:21" pos:end="309:21">n</name> <operator pos:start="309:23" pos:end="309:23">=</operator> <name pos:start="309:25" pos:end="309:29">laces</name><operator pos:start="309:30" pos:end="309:30">-</operator><literal type="number" pos:start="309:31" pos:end="309:31">1</literal></expr>;</expr_stmt>

                    <break pos:start="311:21" pos:end="311:26">break;</break>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="315:17" pos:end="315:66"><expr pos:start="315:17" pos:end="315:65"><call pos:start="315:17" pos:end="315:65"><name pos:start="315:17" pos:end="315:22">memcpy</name> <argument_list pos:start="315:24" pos:end="315:65">(<argument pos:start="315:25" pos:end="315:33"><expr pos:start="315:25" pos:end="315:33"><name pos:start="315:25" pos:end="315:33"><name pos:start="315:25" pos:end="315:27">pkt</name><operator pos:start="315:28" pos:end="315:29">-&gt;</operator><name pos:start="315:30" pos:end="315:33">data</name></name></expr></argument>, <argument pos:start="315:36" pos:end="315:52"><expr pos:start="315:36" pos:end="315:52"><name pos:start="315:36" pos:end="315:39">data</name><operator pos:start="315:40" pos:end="315:40">+</operator><name pos:start="315:41" pos:end="315:52">slice_offset</name></expr></argument>, <argument pos:start="315:55" pos:end="315:64"><expr pos:start="315:55" pos:end="315:64"><name pos:start="315:55" pos:end="315:64">slice_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="319:17" pos:end="321:45"><if pos:start="319:17" pos:end="321:45">if <condition pos:start="319:20" pos:end="319:27">(<expr pos:start="319:21" pos:end="319:26"><name pos:start="319:21" pos:end="319:21">n</name> <operator pos:start="319:23" pos:end="319:24">==</operator> <literal type="number" pos:start="319:26" pos:end="319:26">0</literal></expr>)</condition><block type="pseudo" pos:start="321:21" pos:end="321:45"><block_content pos:start="321:21" pos:end="321:45">

                    <expr_stmt pos:start="321:21" pos:end="321:45"><expr pos:start="321:21" pos:end="321:44"><name pos:start="321:21" pos:end="321:30"><name pos:start="321:21" pos:end="321:23">pkt</name><operator pos:start="321:24" pos:end="321:25">-&gt;</operator><name pos:start="321:26" pos:end="321:30">flags</name></name> <operator pos:start="321:32" pos:end="321:32">=</operator> <name pos:start="321:34" pos:end="321:44">is_keyframe</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="323:17" pos:end="323:74"><expr pos:start="323:17" pos:end="323:73"><name pos:start="323:17" pos:end="323:33"><name pos:start="323:17" pos:end="323:19">pkt</name><operator pos:start="323:20" pos:end="323:21">-&gt;</operator><name pos:start="323:22" pos:end="323:33">stream_index</name></name> <operator pos:start="323:35" pos:end="323:35">=</operator> <name pos:start="323:37" pos:end="323:59"><name pos:start="323:37" pos:end="323:44">matroska</name><operator pos:start="323:45" pos:end="323:46">-&gt;</operator><name pos:start="323:47" pos:end="323:52">tracks</name><index pos:start="323:53" pos:end="323:59">[<expr pos:start="323:54" pos:end="323:58"><name pos:start="323:54" pos:end="323:58">track</name></expr>]</index></name><operator pos:start="323:60" pos:end="323:61">-&gt;</operator><name pos:start="323:62" pos:end="323:73">stream_index</name></expr>;</expr_stmt>



                <expr_stmt pos:start="327:17" pos:end="327:36"><expr pos:start="327:17" pos:end="327:35"><name pos:start="327:17" pos:end="327:24"><name pos:start="327:17" pos:end="327:19">pkt</name><operator pos:start="327:20" pos:end="327:21">-&gt;</operator><name pos:start="327:22" pos:end="327:24">pts</name></name> <operator pos:start="327:26" pos:end="327:26">=</operator> <name pos:start="327:28" pos:end="327:35">timecode</name></expr>;</expr_stmt>

                <expr_stmt pos:start="329:17" pos:end="329:31"><expr pos:start="329:17" pos:end="329:30"><name pos:start="329:17" pos:end="329:24"><name pos:start="329:17" pos:end="329:19">pkt</name><operator pos:start="329:20" pos:end="329:21">-&gt;</operator><name pos:start="329:22" pos:end="329:24">pos</name></name> <operator pos:start="329:26" pos:end="329:26">=</operator> <name pos:start="329:28" pos:end="329:30">pos</name></expr>;</expr_stmt>



                <if_stmt pos:start="333:17" pos:end="339:57"><if pos:start="333:17" pos:end="335:78">if <condition pos:start="333:20" pos:end="333:76">(<expr pos:start="333:21" pos:end="333:75"><name pos:start="333:21" pos:end="333:43"><name pos:start="333:21" pos:end="333:28">matroska</name><operator pos:start="333:29" pos:end="333:30">-&gt;</operator><name pos:start="333:31" pos:end="333:36">tracks</name><index pos:start="333:37" pos:end="333:43">[<expr pos:start="333:38" pos:end="333:42"><name pos:start="333:38" pos:end="333:42">track</name></expr>]</index></name><operator pos:start="333:44" pos:end="333:45">-&gt;</operator><name pos:start="333:46" pos:end="333:50">flags</name> <operator pos:start="333:52" pos:end="333:52">&amp;</operator> <name pos:start="333:54" pos:end="333:75">MATROSKA_TRACK_REORDER</name></expr>)</condition><block type="pseudo" pos:start="335:21" pos:end="335:78"><block_content pos:start="335:21" pos:end="335:78">

                    <expr_stmt pos:start="335:21" pos:end="335:78"><expr pos:start="335:21" pos:end="335:77"><call pos:start="335:21" pos:end="335:77"><name pos:start="335:21" pos:end="335:51">matroska_queue_packet_reordered</name><argument_list pos:start="335:52" pos:end="335:77">(<argument pos:start="335:53" pos:end="335:60"><expr pos:start="335:53" pos:end="335:60"><name pos:start="335:53" pos:end="335:60">matroska</name></expr></argument>, <argument pos:start="335:63" pos:end="335:65"><expr pos:start="335:63" pos:end="335:65"><name pos:start="335:63" pos:end="335:65">pkt</name></expr></argument>, <argument pos:start="335:68" pos:end="335:76"><expr pos:start="335:68" pos:end="335:76"><name pos:start="335:68" pos:end="335:76">is_bframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="337:17" pos:end="339:57">else<block type="pseudo" pos:start="339:21" pos:end="339:57"><block_content pos:start="339:21" pos:end="339:57">

                    <expr_stmt pos:start="339:21" pos:end="339:57"><expr pos:start="339:21" pos:end="339:56"><call pos:start="339:21" pos:end="339:56"><name pos:start="339:21" pos:end="339:41">matroska_queue_packet</name><argument_list pos:start="339:42" pos:end="339:56">(<argument pos:start="339:43" pos:end="339:50"><expr pos:start="339:43" pos:end="339:50"><name pos:start="339:43" pos:end="339:50">matroska</name></expr></argument>, <argument pos:start="339:53" pos:end="339:55"><expr pos:start="339:53" pos:end="339:55"><name pos:start="339:53" pos:end="339:55">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="343:13" pos:end="343:33"><expr pos:start="343:13" pos:end="343:32"><name pos:start="343:13" pos:end="343:16">data</name> <operator pos:start="343:18" pos:end="343:19">+=</operator> <name pos:start="343:21" pos:end="343:32"><name pos:start="343:21" pos:end="343:29">lace_size</name><index pos:start="343:30" pos:end="343:32">[<expr pos:start="343:31" pos:end="343:31"><name pos:start="343:31" pos:end="343:31">n</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="351:5" pos:end="351:23"><expr pos:start="351:5" pos:end="351:22"><call pos:start="351:5" pos:end="351:22"><name pos:start="351:5" pos:end="351:11">av_free</name><argument_list pos:start="351:12" pos:end="351:22">(<argument pos:start="351:13" pos:end="351:21"><expr pos:start="351:13" pos:end="351:21"><name pos:start="351:13" pos:end="351:21">lace_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="353:5" pos:end="353:22"><expr pos:start="353:5" pos:end="353:21"><call pos:start="353:5" pos:end="353:21"><name pos:start="353:5" pos:end="353:11">av_free</name><argument_list pos:start="353:12" pos:end="353:21">(<argument pos:start="353:13" pos:end="353:20"><expr pos:start="353:13" pos:end="353:20"><name pos:start="353:13" pos:end="353:20">origdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="355:5" pos:end="355:15">return <expr pos:start="355:12" pos:end="355:14"><name pos:start="355:12" pos:end="355:14">res</name></expr>;</return>

</block_content>}</block>
</unit>
