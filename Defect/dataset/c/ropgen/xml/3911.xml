<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3911.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:38">postcopy_ram_fault_thread</name><parameter_list pos:start="1:39" pos:end="1:52">(<parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:45"><name pos:start="1:40" pos:end="1:43">void</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:51">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="185:1">{<block_content pos:start="5:5" pos:end="183:16">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:28"><name pos:start="5:5" pos:end="5:26">MigrationIncomingState</name> <modifier pos:start="5:28" pos:end="5:28">*</modifier></type><name pos:start="5:29" pos:end="5:31">mis</name> <init pos:start="5:33" pos:end="5:40">= <expr pos:start="5:35" pos:end="5:40"><name pos:start="5:35" pos:end="5:40">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:19">uffd_msg</name></name></type> <name pos:start="7:21" pos:end="7:23">msg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">RAMBlock</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">rb</name> <init pos:start="11:18" pos:end="11:23">= <expr pos:start="11:20" pos:end="11:23"><name pos:start="11:20" pos:end="11:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">RAMBlock</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:21">last_rb</name> <init pos:start="13:23" pos:end="13:28">= <expr pos:start="13:25" pos:end="13:28"><name pos:start="13:25" pos:end="13:28">NULL</name></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="13:31" pos:end="13:65">/* last RAMBlock we sent part of */</comment>



    <expr_stmt pos:start="17:5" pos:end="17:44"><expr pos:start="17:5" pos:end="17:43"><call pos:start="17:5" pos:end="17:43"><name pos:start="17:5" pos:end="17:41">trace_postcopy_ram_fault_thread_entry</name><argument_list pos:start="17:42" pos:end="17:43">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:42"><expr pos:start="19:5" pos:end="19:41"><call pos:start="19:5" pos:end="19:41"><name pos:start="19:5" pos:end="19:17">qemu_sem_post</name><argument_list pos:start="19:18" pos:end="19:41">(<argument pos:start="19:19" pos:end="19:40"><expr pos:start="19:19" pos:end="19:40"><operator pos:start="19:19" pos:end="19:19">&amp;</operator><name pos:start="19:20" pos:end="19:40"><name pos:start="19:20" pos:end="19:22">mis</name><operator pos:start="19:23" pos:end="19:24">-&gt;</operator><name pos:start="19:25" pos:end="19:40">fault_thread_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="23:5" pos:end="179:5">while <condition pos:start="23:11" pos:end="23:16">(<expr pos:start="23:12" pos:end="23:15"><name pos:start="23:12" pos:end="23:15">true</name></expr>)</condition> <block pos:start="23:18" pos:end="179:5">{<block_content pos:start="25:9" pos:end="177:9">

        <decl_stmt pos:start="25:9" pos:end="25:29"><decl pos:start="25:9" pos:end="25:28"><type pos:start="25:9" pos:end="25:18"><name pos:start="25:9" pos:end="25:18">ram_addr_t</name></type> <name pos:start="25:20" pos:end="25:28">rb_offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="27:9" pos:end="27:29"><decl pos:start="27:9" pos:end="27:28"><type pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:14">struct</name> <name pos:start="27:16" pos:end="27:21">pollfd</name></name></type> <name pos:start="27:23" pos:end="27:28"><name pos:start="27:23" pos:end="27:25">pfd</name><index pos:start="27:26" pos:end="27:28">[<expr pos:start="27:27" pos:end="27:27"><literal type="number" pos:start="27:27" pos:end="27:27">2</literal></expr>]</index></name></decl>;</decl_stmt>



        <comment type="block" pos:start="31:9" pos:end="39:11">/*

         * We're mainly waiting for the kernel to give us a faulting HVA,

         * however we can be told to quit via userfault_quit_fd which is

         * an eventfd

         */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:38"><expr pos:start="41:9" pos:end="41:37"><name pos:start="41:9" pos:end="41:14"><name pos:start="41:9" pos:end="41:11">pfd</name><index pos:start="41:12" pos:end="41:14">[<expr pos:start="41:13" pos:end="41:13"><literal type="number" pos:start="41:13" pos:end="41:13">0</literal></expr>]</index></name><operator pos:start="41:15" pos:end="41:15">.</operator><name pos:start="41:16" pos:end="41:17">fd</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <name pos:start="41:21" pos:end="41:37"><name pos:start="41:21" pos:end="41:23">mis</name><operator pos:start="41:24" pos:end="41:25">-&gt;</operator><name pos:start="41:26" pos:end="41:37">userfault_fd</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:31"><expr pos:start="43:9" pos:end="43:30"><name pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:11">pfd</name><index pos:start="43:12" pos:end="43:14">[<expr pos:start="43:13" pos:end="43:13"><literal type="number" pos:start="43:13" pos:end="43:13">0</literal></expr>]</index></name><operator pos:start="43:15" pos:end="43:15">.</operator><name pos:start="43:16" pos:end="43:21">events</name> <operator pos:start="43:23" pos:end="43:23">=</operator> <name pos:start="43:25" pos:end="43:30">POLLIN</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:27"><expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:14"><name pos:start="45:9" pos:end="45:11">pfd</name><index pos:start="45:12" pos:end="45:14">[<expr pos:start="45:13" pos:end="45:13"><literal type="number" pos:start="45:13" pos:end="45:13">0</literal></expr>]</index></name><operator pos:start="45:15" pos:end="45:15">.</operator><name pos:start="45:16" pos:end="45:22">revents</name> <operator pos:start="45:24" pos:end="45:24">=</operator> <literal type="number" pos:start="45:26" pos:end="45:26">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:43"><expr pos:start="47:9" pos:end="47:42"><name pos:start="47:9" pos:end="47:14"><name pos:start="47:9" pos:end="47:11">pfd</name><index pos:start="47:12" pos:end="47:14">[<expr pos:start="47:13" pos:end="47:13"><literal type="number" pos:start="47:13" pos:end="47:13">1</literal></expr>]</index></name><operator pos:start="47:15" pos:end="47:15">.</operator><name pos:start="47:16" pos:end="47:17">fd</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:42"><name pos:start="47:21" pos:end="47:23">mis</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:42">userfault_quit_fd</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:31"><expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:14"><name pos:start="49:9" pos:end="49:11">pfd</name><index pos:start="49:12" pos:end="49:14">[<expr pos:start="49:13" pos:end="49:13"><literal type="number" pos:start="49:13" pos:end="49:13">1</literal></expr>]</index></name><operator pos:start="49:15" pos:end="49:15">.</operator><name pos:start="49:16" pos:end="49:21">events</name> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:30">POLLIN</name></expr>;</expr_stmt> <comment type="block" pos:start="49:33" pos:end="49:72">/* Waiting for eventfd to go positive */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:27"><expr pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:11">pfd</name><index pos:start="51:12" pos:end="51:14">[<expr pos:start="51:13" pos:end="51:13"><literal type="number" pos:start="51:13" pos:end="51:13">1</literal></expr>]</index></name><operator pos:start="51:15" pos:end="51:15">.</operator><name pos:start="51:16" pos:end="51:22">revents</name> <operator pos:start="51:24" pos:end="51:24">=</operator> <literal type="number" pos:start="51:26" pos:end="51:26">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:54">(<expr pos:start="55:13" pos:end="55:53"><call pos:start="55:13" pos:end="55:47"><name pos:start="55:13" pos:end="55:16">poll</name><argument_list pos:start="55:17" pos:end="55:47">(<argument pos:start="55:18" pos:end="55:20"><expr pos:start="55:18" pos:end="55:20"><name pos:start="55:18" pos:end="55:20">pfd</name></expr></argument>, <argument pos:start="55:23" pos:end="55:23"><expr pos:start="55:23" pos:end="55:23"><literal type="number" pos:start="55:23" pos:end="55:23">2</literal></expr></argument>, <argument pos:start="55:26" pos:end="55:27"><expr pos:start="55:26" pos:end="55:27"><operator pos:start="55:26" pos:end="55:26">-</operator><literal type="number" pos:start="55:27" pos:end="55:27">1</literal></expr></argument> <comment type="block" pos:start="55:29" pos:end="55:46">/* Wait forever */</comment>)</argument_list></call> <operator pos:start="55:49" pos:end="55:50">==</operator> <operator pos:start="55:52" pos:end="55:52">-</operator><literal type="number" pos:start="55:53" pos:end="55:53">1</literal></expr>)</condition> <block pos:start="55:56" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:18">

            <expr_stmt pos:start="57:13" pos:end="57:78"><expr pos:start="57:13" pos:end="57:77"><call pos:start="57:13" pos:end="57:77"><name pos:start="57:13" pos:end="57:24">error_report</name><argument_list pos:start="57:25" pos:end="57:77">(<argument pos:start="57:26" pos:end="57:49"><expr pos:start="57:26" pos:end="57:49"><literal type="string" pos:start="57:26" pos:end="57:49">"%s: userfault poll: %s"</literal></expr></argument>, <argument pos:start="57:52" pos:end="57:59"><expr pos:start="57:52" pos:end="57:59"><name pos:start="57:52" pos:end="57:59">__func__</name></expr></argument>, <argument pos:start="57:62" pos:end="57:76"><expr pos:start="57:62" pos:end="57:76"><call pos:start="57:62" pos:end="57:76"><name pos:start="57:62" pos:end="57:69">strerror</name><argument_list pos:start="57:70" pos:end="57:76">(<argument pos:start="57:71" pos:end="57:75"><expr pos:start="57:71" pos:end="57:75"><name pos:start="57:71" pos:end="57:75">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="59:13" pos:end="59:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if <condition pos:start="65:12" pos:end="65:27">(<expr pos:start="65:13" pos:end="65:26"><name pos:start="65:13" pos:end="65:18"><name pos:start="65:13" pos:end="65:15">pfd</name><index pos:start="65:16" pos:end="65:18">[<expr pos:start="65:17" pos:end="65:17"><literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>]</index></name><operator pos:start="65:19" pos:end="65:19">.</operator><name pos:start="65:20" pos:end="65:26">revents</name></expr>)</condition> <block pos:start="65:29" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:18">

            <expr_stmt pos:start="67:13" pos:end="67:51"><expr pos:start="67:13" pos:end="67:50"><call pos:start="67:13" pos:end="67:50"><name pos:start="67:13" pos:end="67:48">trace_postcopy_ram_fault_thread_quit</name><argument_list pos:start="67:49" pos:end="67:50">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:57"><expr pos:start="75:9" pos:end="75:56"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:56"><name pos:start="75:15" pos:end="75:18">read</name><argument_list pos:start="75:19" pos:end="75:56">(<argument pos:start="75:20" pos:end="75:36"><expr pos:start="75:20" pos:end="75:36"><name pos:start="75:20" pos:end="75:36"><name pos:start="75:20" pos:end="75:22">mis</name><operator pos:start="75:23" pos:end="75:24">-&gt;</operator><name pos:start="75:25" pos:end="75:36">userfault_fd</name></name></expr></argument>, <argument pos:start="75:39" pos:end="75:42"><expr pos:start="75:39" pos:end="75:42"><operator pos:start="75:39" pos:end="75:39">&amp;</operator><name pos:start="75:40" pos:end="75:42">msg</name></expr></argument>, <argument pos:start="75:45" pos:end="75:55"><expr pos:start="75:45" pos:end="75:55"><sizeof pos:start="75:45" pos:end="75:55">sizeof<argument_list pos:start="75:51" pos:end="75:55">(<argument pos:start="75:52" pos:end="75:54"><expr pos:start="75:52" pos:end="75:54"><name pos:start="75:52" pos:end="75:54">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="111:9"><if pos:start="77:9" pos:end="111:9">if <condition pos:start="77:12" pos:end="77:31">(<expr pos:start="77:13" pos:end="77:30"><name pos:start="77:13" pos:end="77:15">ret</name> <operator pos:start="77:17" pos:end="77:18">!=</operator> <sizeof pos:start="77:20" pos:end="77:30">sizeof<argument_list pos:start="77:26" pos:end="77:30">(<argument pos:start="77:27" pos:end="77:29"><expr pos:start="77:27" pos:end="77:29"><name pos:start="77:27" pos:end="77:29">msg</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="77:33" pos:end="111:9">{<block_content pos:start="79:13" pos:end="109:13">

            <if_stmt pos:start="79:13" pos:end="91:13"><if pos:start="79:13" pos:end="91:13">if <condition pos:start="79:16" pos:end="79:32">(<expr pos:start="79:17" pos:end="79:31"><name pos:start="79:17" pos:end="79:21">errno</name> <operator pos:start="79:23" pos:end="79:24">==</operator> <name pos:start="79:26" pos:end="79:31">EAGAIN</name></expr>)</condition> <block pos:start="79:34" pos:end="91:13">{<block_content pos:start="89:17" pos:end="89:25">

                <comment type="block" pos:start="81:17" pos:end="87:19">/*

                 * if a wake up happens on the other thread just after

                 * the poll, there is nothing to read.

                 */</comment>

                <continue pos:start="89:17" pos:end="89:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="93:13" pos:end="109:13"><if pos:start="93:13" pos:end="101:13">if <condition pos:start="93:16" pos:end="93:24">(<expr pos:start="93:17" pos:end="93:23"><name pos:start="93:17" pos:end="93:19">ret</name> <operator pos:start="93:21" pos:end="93:21">&lt;</operator> <literal type="number" pos:start="93:23" pos:end="93:23">0</literal></expr>)</condition> <block pos:start="93:26" pos:end="101:13">{<block_content pos:start="95:17" pos:end="99:22">

                <expr_stmt pos:start="95:17" pos:end="97:56"><expr pos:start="95:17" pos:end="97:55"><call pos:start="95:17" pos:end="97:55"><name pos:start="95:17" pos:end="95:28">error_report</name><argument_list pos:start="95:29" pos:end="97:55">(<argument pos:start="95:30" pos:end="95:76"><expr pos:start="95:30" pos:end="95:76"><literal type="string" pos:start="95:30" pos:end="95:76">"%s: Failed to read full userfault message: %s"</literal></expr></argument>,

                             <argument pos:start="97:30" pos:end="97:37"><expr pos:start="97:30" pos:end="97:37"><name pos:start="97:30" pos:end="97:37">__func__</name></expr></argument>, <argument pos:start="97:40" pos:end="97:54"><expr pos:start="97:40" pos:end="97:54"><call pos:start="97:40" pos:end="97:54"><name pos:start="97:40" pos:end="97:47">strerror</name><argument_list pos:start="97:48" pos:end="97:54">(<argument pos:start="97:49" pos:end="97:53"><expr pos:start="97:49" pos:end="97:53"><name pos:start="97:49" pos:end="97:53">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="99:17" pos:end="99:22">break;</break>

            </block_content>}</block></if> <else pos:start="101:15" pos:end="109:13">else <block pos:start="101:20" pos:end="109:13">{<block_content pos:start="103:17" pos:end="107:22">

                <expr_stmt pos:start="103:17" pos:end="105:57"><expr pos:start="103:17" pos:end="105:56"><call pos:start="103:17" pos:end="105:56"><name pos:start="103:17" pos:end="103:28">error_report</name><argument_list pos:start="103:29" pos:end="105:56">(<argument pos:start="103:30" pos:end="103:78"><expr pos:start="103:30" pos:end="103:78"><literal type="string" pos:start="103:30" pos:end="103:78">"%s: Read %d bytes from userfaultfd expected %zd"</literal></expr></argument>,

                             <argument pos:start="105:30" pos:end="105:37"><expr pos:start="105:30" pos:end="105:37"><name pos:start="105:30" pos:end="105:37">__func__</name></expr></argument>, <argument pos:start="105:40" pos:end="105:42"><expr pos:start="105:40" pos:end="105:42"><name pos:start="105:40" pos:end="105:42">ret</name></expr></argument>, <argument pos:start="105:45" pos:end="105:55"><expr pos:start="105:45" pos:end="105:55"><sizeof pos:start="105:45" pos:end="105:55">sizeof<argument_list pos:start="105:51" pos:end="105:55">(<argument pos:start="105:52" pos:end="105:54"><expr pos:start="105:52" pos:end="105:54"><name pos:start="105:52" pos:end="105:54">msg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="107:17" pos:end="107:22">break;</break> <comment type="block" pos:start="107:24" pos:end="107:75">/* Lost alignment, don't know what we'd read next */</comment>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="113:9" pos:end="121:9"><if pos:start="113:9" pos:end="121:9">if <condition pos:start="113:12" pos:end="113:46">(<expr pos:start="113:13" pos:end="113:45"><name pos:start="113:13" pos:end="113:21"><name pos:start="113:13" pos:end="113:15">msg</name><operator pos:start="113:16" pos:end="113:16">.</operator><name pos:start="113:17" pos:end="113:21">event</name></name> <operator pos:start="113:23" pos:end="113:24">!=</operator> <name pos:start="113:26" pos:end="113:45">UFFD_EVENT_PAGEFAULT</name></expr>)</condition> <block pos:start="113:48" pos:end="121:9">{<block_content pos:start="115:13" pos:end="119:21">

            <expr_stmt pos:start="115:13" pos:end="117:46"><expr pos:start="115:13" pos:end="117:45"><call pos:start="115:13" pos:end="117:45"><name pos:start="115:13" pos:end="115:24">error_report</name><argument_list pos:start="115:25" pos:end="117:45">(<argument pos:start="115:26" pos:end="115:73"><expr pos:start="115:26" pos:end="115:73"><literal type="string" pos:start="115:26" pos:end="115:73">"%s: Read unexpected event %ud from userfaultfd"</literal></expr></argument>,

                         <argument pos:start="117:26" pos:end="117:33"><expr pos:start="117:26" pos:end="117:33"><name pos:start="117:26" pos:end="117:33">__func__</name></expr></argument>, <argument pos:start="117:36" pos:end="117:44"><expr pos:start="117:36" pos:end="117:44"><name pos:start="117:36" pos:end="117:44"><name pos:start="117:36" pos:end="117:38">msg</name><operator pos:start="117:39" pos:end="117:39">.</operator><name pos:start="117:40" pos:end="117:44">event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="119:13" pos:end="119:21">continue;</continue> <comment type="block" pos:start="119:23" pos:end="119:67">/* It's not a page fault, shouldn't happen */</comment>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="125:9" pos:end="129:35"><expr pos:start="125:9" pos:end="129:34"><name pos:start="125:9" pos:end="125:10">rb</name> <operator pos:start="125:12" pos:end="125:12">=</operator> <call pos:start="125:14" pos:end="129:34"><name pos:start="125:14" pos:end="125:37">qemu_ram_block_from_host</name><argument_list pos:start="125:38" pos:end="129:34">(

                 <argument pos:start="127:18" pos:end="127:61"><expr pos:start="127:18" pos:end="127:61"><operator pos:start="127:18" pos:end="127:18">(</operator><name pos:start="127:19" pos:end="127:22">void</name> <operator pos:start="127:24" pos:end="127:24">*</operator><operator pos:start="127:25" pos:end="127:25">)</operator><operator pos:start="127:26" pos:end="127:26">(</operator><name pos:start="127:27" pos:end="127:35">uintptr_t</name><operator pos:start="127:36" pos:end="127:36">)</operator><name pos:start="127:37" pos:end="127:61"><name pos:start="127:37" pos:end="127:39">msg</name><operator pos:start="127:40" pos:end="127:40">.</operator><name pos:start="127:41" pos:end="127:43">arg</name><operator pos:start="127:44" pos:end="127:44">.</operator><name pos:start="127:45" pos:end="127:53">pagefault</name><operator pos:start="127:54" pos:end="127:54">.</operator><name pos:start="127:55" pos:end="127:61">address</name></name></expr></argument>,

                 <argument pos:start="129:18" pos:end="129:21"><expr pos:start="129:18" pos:end="129:21"><name pos:start="129:18" pos:end="129:21">true</name></expr></argument>, <argument pos:start="129:24" pos:end="129:33"><expr pos:start="129:24" pos:end="129:33"><operator pos:start="129:24" pos:end="129:24">&amp;</operator><name pos:start="129:25" pos:end="129:33">rb_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="139:9"><if pos:start="131:9" pos:end="139:9">if <condition pos:start="131:12" pos:end="131:16">(<expr pos:start="131:13" pos:end="131:15"><operator pos:start="131:13" pos:end="131:13">!</operator><name pos:start="131:14" pos:end="131:15">rb</name></expr>)</condition> <block pos:start="131:18" pos:end="139:9">{<block_content pos:start="133:13" pos:end="137:18">

            <expr_stmt pos:start="133:13" pos:end="135:70"><expr pos:start="133:13" pos:end="135:69"><call pos:start="133:13" pos:end="135:69"><name pos:start="133:13" pos:end="133:24">error_report</name><argument_list pos:start="133:25" pos:end="135:69">(<argument pos:start="133:26" pos:end="135:31"><expr pos:start="133:26" pos:end="135:31"><literal type="string" pos:start="133:26" pos:end="133:76">"postcopy_ram_fault_thread: Fault outside guest: %"</literal>

                         <name pos:start="135:26" pos:end="135:31">PRIx64</name></expr></argument>, <argument pos:start="135:34" pos:end="135:68"><expr pos:start="135:34" pos:end="135:68"><operator pos:start="135:34" pos:end="135:34">(</operator><name pos:start="135:35" pos:end="135:42">uint64_t</name><operator pos:start="135:43" pos:end="135:43">)</operator><name pos:start="135:44" pos:end="135:68"><name pos:start="135:44" pos:end="135:46">msg</name><operator pos:start="135:47" pos:end="135:47">.</operator><name pos:start="135:48" pos:end="135:50">arg</name><operator pos:start="135:51" pos:end="135:51">.</operator><name pos:start="135:52" pos:end="135:60">pagefault</name><operator pos:start="135:61" pos:end="135:61">.</operator><name pos:start="135:62" pos:end="135:68">address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="137:13" pos:end="137:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="143:9" pos:end="143:50"><expr pos:start="143:9" pos:end="143:49"><name pos:start="143:9" pos:end="143:17">rb_offset</name> <operator pos:start="143:19" pos:end="143:20">&amp;=</operator> <operator pos:start="143:22" pos:end="143:22">~</operator><operator pos:start="143:23" pos:end="143:23">(</operator><call pos:start="143:24" pos:end="143:44"><name pos:start="143:24" pos:end="143:40">qemu_ram_pagesize</name><argument_list pos:start="143:41" pos:end="143:44">(<argument pos:start="143:42" pos:end="143:43"><expr pos:start="143:42" pos:end="143:43"><name pos:start="143:42" pos:end="143:43">rb</name></expr></argument>)</argument_list></call> <operator pos:start="143:46" pos:end="143:46">-</operator> <literal type="number" pos:start="143:48" pos:end="143:48">1</literal><operator pos:start="143:49" pos:end="143:49">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="149:59"><expr pos:start="145:9" pos:end="149:58"><call pos:start="145:9" pos:end="149:58"><name pos:start="145:9" pos:end="145:47">trace_postcopy_ram_fault_thread_request</name><argument_list pos:start="145:48" pos:end="149:58">(<argument pos:start="145:49" pos:end="145:73"><expr pos:start="145:49" pos:end="145:73"><name pos:start="145:49" pos:end="145:73"><name pos:start="145:49" pos:end="145:51">msg</name><operator pos:start="145:52" pos:end="145:52">.</operator><name pos:start="145:53" pos:end="145:55">arg</name><operator pos:start="145:56" pos:end="145:56">.</operator><name pos:start="145:57" pos:end="145:65">pagefault</name><operator pos:start="145:66" pos:end="145:66">.</operator><name pos:start="145:67" pos:end="145:73">address</name></name></expr></argument>,

                                                <argument pos:start="147:49" pos:end="147:70"><expr pos:start="147:49" pos:end="147:70"><call pos:start="147:49" pos:end="147:70"><name pos:start="147:49" pos:end="147:66">qemu_ram_get_idstr</name><argument_list pos:start="147:67" pos:end="147:70">(<argument pos:start="147:68" pos:end="147:69"><expr pos:start="147:68" pos:end="147:69"><name pos:start="147:68" pos:end="147:69">rb</name></expr></argument>)</argument_list></call></expr></argument>,

                                                <argument pos:start="149:49" pos:end="149:57"><expr pos:start="149:49" pos:end="149:57"><name pos:start="149:49" pos:end="149:57">rb_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="153:9" pos:end="159:11">/*

         * Send the request to the source - we want to request one

         * of our host page sizes (which is &gt;= TPS)

         */</comment>

        <if_stmt pos:start="161:9" pos:end="177:9"><if pos:start="161:9" pos:end="169:9">if <condition pos:start="161:12" pos:end="161:26">(<expr pos:start="161:13" pos:end="161:25"><name pos:start="161:13" pos:end="161:14">rb</name> <operator pos:start="161:16" pos:end="161:17">!=</operator> <name pos:start="161:19" pos:end="161:25">last_rb</name></expr>)</condition> <block pos:start="161:28" pos:end="169:9">{<block_content pos:start="163:13" pos:end="167:71">

            <expr_stmt pos:start="163:13" pos:end="163:25"><expr pos:start="163:13" pos:end="163:24"><name pos:start="163:13" pos:end="163:19">last_rb</name> <operator pos:start="163:21" pos:end="163:21">=</operator> <name pos:start="163:23" pos:end="163:24">rb</name></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="167:71"><expr pos:start="165:13" pos:end="167:70"><call pos:start="165:13" pos:end="167:70"><name pos:start="165:13" pos:end="165:37">migrate_send_rp_req_pages</name><argument_list pos:start="165:38" pos:end="167:70">(<argument pos:start="165:39" pos:end="165:41"><expr pos:start="165:39" pos:end="165:41"><name pos:start="165:39" pos:end="165:41">mis</name></expr></argument>, <argument pos:start="165:44" pos:end="165:65"><expr pos:start="165:44" pos:end="165:65"><call pos:start="165:44" pos:end="165:65"><name pos:start="165:44" pos:end="165:61">qemu_ram_get_idstr</name><argument_list pos:start="165:62" pos:end="165:65">(<argument pos:start="165:63" pos:end="165:64"><expr pos:start="165:63" pos:end="165:64"><name pos:start="165:63" pos:end="165:64">rb</name></expr></argument>)</argument_list></call></expr></argument>,

                                     <argument pos:start="167:38" pos:end="167:46"><expr pos:start="167:38" pos:end="167:46"><name pos:start="167:38" pos:end="167:46">rb_offset</name></expr></argument>, <argument pos:start="167:49" pos:end="167:69"><expr pos:start="167:49" pos:end="167:69"><call pos:start="167:49" pos:end="167:69"><name pos:start="167:49" pos:end="167:65">qemu_ram_pagesize</name><argument_list pos:start="167:66" pos:end="167:69">(<argument pos:start="167:67" pos:end="167:68"><expr pos:start="167:67" pos:end="167:68"><name pos:start="167:67" pos:end="167:68">rb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="169:11" pos:end="177:9">else <block pos:start="169:16" pos:end="177:9">{<block_content pos:start="173:13" pos:end="175:71">

            <comment type="block" pos:start="171:13" pos:end="171:33">/* Save some space */</comment>

            <expr_stmt pos:start="173:13" pos:end="175:71"><expr pos:start="173:13" pos:end="175:70"><call pos:start="173:13" pos:end="175:70"><name pos:start="173:13" pos:end="173:37">migrate_send_rp_req_pages</name><argument_list pos:start="173:38" pos:end="175:70">(<argument pos:start="173:39" pos:end="173:41"><expr pos:start="173:39" pos:end="173:41"><name pos:start="173:39" pos:end="173:41">mis</name></expr></argument>, <argument pos:start="173:44" pos:end="173:47"><expr pos:start="173:44" pos:end="173:47"><name pos:start="173:44" pos:end="173:47">NULL</name></expr></argument>,

                                     <argument pos:start="175:38" pos:end="175:46"><expr pos:start="175:38" pos:end="175:46"><name pos:start="175:38" pos:end="175:46">rb_offset</name></expr></argument>, <argument pos:start="175:49" pos:end="175:69"><expr pos:start="175:49" pos:end="175:69"><call pos:start="175:49" pos:end="175:69"><name pos:start="175:49" pos:end="175:65">qemu_ram_pagesize</name><argument_list pos:start="175:66" pos:end="175:69">(<argument pos:start="175:67" pos:end="175:68"><expr pos:start="175:67" pos:end="175:68"><name pos:start="175:67" pos:end="175:68">rb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="181:5" pos:end="181:43"><expr pos:start="181:5" pos:end="181:42"><call pos:start="181:5" pos:end="181:42"><name pos:start="181:5" pos:end="181:40">trace_postcopy_ram_fault_thread_exit</name><argument_list pos:start="181:41" pos:end="181:42">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="183:5" pos:end="183:16">return <expr pos:start="183:12" pos:end="183:15"><name pos:start="183:12" pos:end="183:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
