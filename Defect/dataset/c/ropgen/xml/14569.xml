<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14569.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">nbd_opt_go</name><parameter_list pos:start="1:22" pos:end="3:56">(<parameter pos:start="1:23" pos:end="1:37"><decl pos:start="1:23" pos:end="1:37"><type pos:start="1:23" pos:end="1:37"><name pos:start="1:23" pos:end="1:32">QIOChannel</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">ioc</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:59"><decl pos:start="1:40" pos:end="1:59"><type pos:start="1:40" pos:end="1:59"><specifier pos:start="1:40" pos:end="1:44">const</specifier> <name pos:start="1:46" pos:end="1:49">char</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:59">wantname</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:41"><decl pos:start="3:23" pos:end="3:41"><type pos:start="3:23" pos:end="3:41"><name pos:start="3:23" pos:end="3:35">NBDExportInfo</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:41">info</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:55"><decl pos:start="3:44" pos:end="3:55"><type pos:start="3:44" pos:end="3:55"><name pos:start="3:44" pos:end="3:48">Error</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier><modifier pos:start="3:51" pos:end="3:51">*</modifier></type><name pos:start="3:52" pos:end="3:55">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="205:1">{<block_content pos:start="7:5" pos:end="203:5">

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">nbd_opt_reply</name></type> <name pos:start="7:19" pos:end="7:23">reply</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">len</name> <init pos:start="9:18" pos:end="9:35">= <expr pos:start="9:20" pos:end="9:35"><call pos:start="9:20" pos:end="9:35"><name pos:start="9:20" pos:end="9:25">strlen</name><argument_list pos:start="9:26" pos:end="9:35">(<argument pos:start="9:27" pos:end="9:34"><expr pos:start="9:27" pos:end="9:34"><name pos:start="9:27" pos:end="9:34">wantname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:17">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">buf</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="23:56">/* The protocol requires that the server send NBD_INFO_EXPORT with

     * a non-zero flags (at least NBD_FLAG_HAS_FLAGS must be set); so

     * flags still 0 is a witness of a broken server. */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:20"><expr pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:8">info</name><operator pos:start="25:9" pos:end="25:10">-&gt;</operator><name pos:start="25:11" pos:end="25:15">flags</name></name> <operator pos:start="25:17" pos:end="25:17">=</operator> <literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:37"><expr pos:start="29:5" pos:end="29:36"><call pos:start="29:5" pos:end="29:36"><name pos:start="29:5" pos:end="29:26">trace_nbd_opt_go_start</name><argument_list pos:start="29:27" pos:end="29:36">(<argument pos:start="29:28" pos:end="29:35"><expr pos:start="29:28" pos:end="29:35"><name pos:start="29:28" pos:end="29:35">wantname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:36"><expr pos:start="31:5" pos:end="31:35"><name pos:start="31:5" pos:end="31:7">buf</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:35"><name pos:start="31:11" pos:end="31:18">g_malloc</name><argument_list pos:start="31:19" pos:end="31:35">(<argument pos:start="31:20" pos:end="31:34"><expr pos:start="31:20" pos:end="31:34"><literal type="number" pos:start="31:20" pos:end="31:22">4</literal> <operator pos:start="31:22" pos:end="31:22">+</operator> <name pos:start="31:24" pos:end="31:26">len</name> <operator pos:start="31:28" pos:end="31:28">+</operator> <literal type="number" pos:start="31:30" pos:end="31:32">2</literal> <operator pos:start="31:32" pos:end="31:32">+</operator> <literal type="number" pos:start="31:34" pos:end="31:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><call pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:12">stl_be_p</name><argument_list pos:start="33:13" pos:end="33:22">(<argument pos:start="33:14" pos:end="33:16"><expr pos:start="33:14" pos:end="33:16"><name pos:start="33:14" pos:end="33:16">buf</name></expr></argument>, <argument pos:start="33:19" pos:end="33:21"><expr pos:start="33:19" pos:end="33:21"><name pos:start="33:19" pos:end="33:21">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:35"><expr pos:start="35:5" pos:end="35:34"><call pos:start="35:5" pos:end="35:34"><name pos:start="35:5" pos:end="35:10">memcpy</name><argument_list pos:start="35:11" pos:end="35:34">(<argument pos:start="35:12" pos:end="35:18"><expr pos:start="35:12" pos:end="35:18"><name pos:start="35:12" pos:end="35:14">buf</name> <operator pos:start="35:16" pos:end="35:16">+</operator> <literal type="number" pos:start="35:18" pos:end="35:18">4</literal></expr></argument>, <argument pos:start="35:21" pos:end="35:28"><expr pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:28">wantname</name></expr></argument>, <argument pos:start="35:31" pos:end="35:33"><expr pos:start="35:31" pos:end="35:33"><name pos:start="35:31" pos:end="35:33">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="37:5" pos:end="37:54">/* No requests, live with whatever server sends */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:31"><expr pos:start="39:5" pos:end="39:30"><call pos:start="39:5" pos:end="39:30"><name pos:start="39:5" pos:end="39:12">stw_be_p</name><argument_list pos:start="39:13" pos:end="39:30">(<argument pos:start="39:14" pos:end="39:26"><expr pos:start="39:14" pos:end="39:26"><name pos:start="39:14" pos:end="39:16">buf</name> <operator pos:start="39:18" pos:end="39:18">+</operator> <literal type="number" pos:start="39:20" pos:end="39:22">4</literal> <operator pos:start="39:22" pos:end="39:22">+</operator> <name pos:start="39:24" pos:end="39:26">len</name></expr></argument>, <argument pos:start="39:29" pos:end="39:29"><expr pos:start="39:29" pos:end="39:29"><literal type="number" pos:start="39:29" pos:end="39:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="45:5"><if pos:start="41:5" pos:end="45:5">if <condition pos:start="41:8" pos:end="41:73">(<expr pos:start="41:9" pos:end="41:72"><call pos:start="41:9" pos:end="41:68"><name pos:start="41:9" pos:end="41:31">nbd_send_option_request</name><argument_list pos:start="41:32" pos:end="41:68">(<argument pos:start="41:33" pos:end="41:35"><expr pos:start="41:33" pos:end="41:35"><name pos:start="41:33" pos:end="41:35">ioc</name></expr></argument>, <argument pos:start="41:38" pos:end="41:47"><expr pos:start="41:38" pos:end="41:47"><name pos:start="41:38" pos:end="41:47">NBD_OPT_GO</name></expr></argument>, <argument pos:start="41:50" pos:end="41:56"><expr pos:start="41:50" pos:end="41:56"><name pos:start="41:50" pos:end="41:52">len</name> <operator pos:start="41:54" pos:end="41:54">+</operator> <literal type="number" pos:start="41:56" pos:end="41:56">6</literal></expr></argument>, <argument pos:start="41:59" pos:end="41:61"><expr pos:start="41:59" pos:end="41:61"><name pos:start="41:59" pos:end="41:61">buf</name></expr></argument>, <argument pos:start="41:64" pos:end="41:67"><expr pos:start="41:64" pos:end="41:67"><name pos:start="41:64" pos:end="41:67">errp</name></expr></argument>)</argument_list></call> <operator pos:start="41:70" pos:end="41:70">&lt;</operator> <literal type="number" pos:start="41:72" pos:end="41:72">0</literal></expr>)</condition> <block pos:start="41:75" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:18">

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <while pos:start="49:5" pos:end="203:5">while <condition pos:start="49:11" pos:end="49:13">(<expr pos:start="49:12" pos:end="49:12"><literal type="number" pos:start="49:12" pos:end="49:12">1</literal></expr>)</condition> <block pos:start="49:15" pos:end="203:5">{<block_content pos:start="51:9" pos:end="201:9">

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:72">(<expr pos:start="51:13" pos:end="51:71"><call pos:start="51:13" pos:end="51:67"><name pos:start="51:13" pos:end="51:36">nbd_receive_option_reply</name><argument_list pos:start="51:37" pos:end="51:67">(<argument pos:start="51:38" pos:end="51:40"><expr pos:start="51:38" pos:end="51:40"><name pos:start="51:38" pos:end="51:40">ioc</name></expr></argument>, <argument pos:start="51:43" pos:end="51:52"><expr pos:start="51:43" pos:end="51:52"><name pos:start="51:43" pos:end="51:52">NBD_OPT_GO</name></expr></argument>, <argument pos:start="51:55" pos:end="51:60"><expr pos:start="51:55" pos:end="51:60"><operator pos:start="51:55" pos:end="51:55">&amp;</operator><name pos:start="51:56" pos:end="51:60">reply</name></expr></argument>, <argument pos:start="51:63" pos:end="51:66"><expr pos:start="51:63" pos:end="51:66"><name pos:start="51:63" pos:end="51:66">errp</name></expr></argument>)</argument_list></call> <operator pos:start="51:69" pos:end="51:69">&lt;</operator> <literal type="number" pos:start="51:71" pos:end="51:71">0</literal></expr>)</condition> <block pos:start="51:74" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:22">

            <return pos:start="53:13" pos:end="53:22">return <expr pos:start="53:20" pos:end="53:21"><operator pos:start="53:20" pos:end="53:20">-</operator><literal type="number" pos:start="53:21" pos:end="53:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:56"><expr pos:start="57:9" pos:end="57:55"><name pos:start="57:9" pos:end="57:13">error</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <call pos:start="57:17" pos:end="57:55"><name pos:start="57:17" pos:end="57:36">nbd_handle_reply_err</name><argument_list pos:start="57:37" pos:end="57:55">(<argument pos:start="57:38" pos:end="57:40"><expr pos:start="57:38" pos:end="57:40"><name pos:start="57:38" pos:end="57:40">ioc</name></expr></argument>, <argument pos:start="57:43" pos:end="57:48"><expr pos:start="57:43" pos:end="57:48"><operator pos:start="57:43" pos:end="57:43">&amp;</operator><name pos:start="57:44" pos:end="57:48">reply</name></expr></argument>, <argument pos:start="57:51" pos:end="57:54"><expr pos:start="57:51" pos:end="57:54"><name pos:start="57:51" pos:end="57:54">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:23">(<expr pos:start="59:13" pos:end="59:22"><name pos:start="59:13" pos:end="59:17">error</name> <operator pos:start="59:19" pos:end="59:20">&lt;=</operator> <literal type="number" pos:start="59:22" pos:end="59:22">0</literal></expr>)</condition> <block pos:start="59:25" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:25">

            <return pos:start="61:13" pos:end="61:25">return <expr pos:start="61:20" pos:end="61:24"><name pos:start="61:20" pos:end="61:24">error</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:27"><expr pos:start="65:9" pos:end="65:26"><name pos:start="65:9" pos:end="65:11">len</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <name pos:start="65:15" pos:end="65:26"><name pos:start="65:15" pos:end="65:19">reply</name><operator pos:start="65:20" pos:end="65:20">.</operator><name pos:start="65:21" pos:end="65:26">length</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="69:9" pos:end="99:9"><if pos:start="69:9" pos:end="99:9">if <condition pos:start="69:12" pos:end="69:38">(<expr pos:start="69:13" pos:end="69:37"><name pos:start="69:13" pos:end="69:22"><name pos:start="69:13" pos:end="69:17">reply</name><operator pos:start="69:18" pos:end="69:18">.</operator><name pos:start="69:19" pos:end="69:22">type</name></name> <operator pos:start="69:24" pos:end="69:25">==</operator> <name pos:start="69:27" pos:end="69:37">NBD_REP_ACK</name></expr>)</condition> <block pos:start="69:40" pos:end="99:9">{<block_content pos:start="75:13" pos:end="97:21">

            <comment type="block" pos:start="71:13" pos:end="73:52">/* Server is done sending info and moved into transmission

               phase, but make sure it sent flags */</comment>

            <if_stmt pos:start="75:13" pos:end="83:13"><if pos:start="75:13" pos:end="83:13">if <condition pos:start="75:16" pos:end="75:20">(<expr pos:start="75:17" pos:end="75:19"><name pos:start="75:17" pos:end="75:19">len</name></expr>)</condition> <block pos:start="75:22" pos:end="83:13">{<block_content pos:start="77:17" pos:end="81:26">

                <expr_stmt pos:start="77:17" pos:end="77:68"><expr pos:start="77:17" pos:end="77:67"><call pos:start="77:17" pos:end="77:67"><name pos:start="77:17" pos:end="77:26">error_setg</name><argument_list pos:start="77:27" pos:end="77:67">(<argument pos:start="77:28" pos:end="77:31"><expr pos:start="77:28" pos:end="77:31"><name pos:start="77:28" pos:end="77:31">errp</name></expr></argument>, <argument pos:start="77:34" pos:end="77:66"><expr pos:start="77:34" pos:end="77:66"><literal type="string" pos:start="77:34" pos:end="77:66">"server sent invalid NBD_REP_ACK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="79:40"><expr pos:start="79:17" pos:end="79:39"><call pos:start="79:17" pos:end="79:39"><name pos:start="79:17" pos:end="79:34">nbd_send_opt_abort</name><argument_list pos:start="79:35" pos:end="79:39">(<argument pos:start="79:36" pos:end="79:38"><expr pos:start="79:36" pos:end="79:38"><name pos:start="79:36" pos:end="79:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="81:17" pos:end="81:26">return <expr pos:start="81:24" pos:end="81:25"><operator pos:start="81:24" pos:end="81:24">-</operator><literal type="number" pos:start="81:25" pos:end="81:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="85:13" pos:end="93:13"><if pos:start="85:13" pos:end="93:13">if <condition pos:start="85:16" pos:end="85:29">(<expr pos:start="85:17" pos:end="85:28"><operator pos:start="85:17" pos:end="85:17">!</operator><name pos:start="85:18" pos:end="85:28"><name pos:start="85:18" pos:end="85:21">info</name><operator pos:start="85:22" pos:end="85:23">-&gt;</operator><name pos:start="85:24" pos:end="85:28">flags</name></name></expr>)</condition> <block pos:start="85:31" pos:end="93:13">{<block_content pos:start="87:17" pos:end="91:26">

                <expr_stmt pos:start="87:17" pos:end="87:74"><expr pos:start="87:17" pos:end="87:73"><call pos:start="87:17" pos:end="87:73"><name pos:start="87:17" pos:end="87:26">error_setg</name><argument_list pos:start="87:27" pos:end="87:73">(<argument pos:start="87:28" pos:end="87:31"><expr pos:start="87:28" pos:end="87:31"><name pos:start="87:28" pos:end="87:31">errp</name></expr></argument>, <argument pos:start="87:34" pos:end="87:72"><expr pos:start="87:34" pos:end="87:72"><literal type="string" pos:start="87:34" pos:end="87:72">"broken server omitted NBD_INFO_EXPORT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="89:17" pos:end="89:40"><expr pos:start="89:17" pos:end="89:39"><call pos:start="89:17" pos:end="89:39"><name pos:start="89:17" pos:end="89:34">nbd_send_opt_abort</name><argument_list pos:start="89:35" pos:end="89:39">(<argument pos:start="89:36" pos:end="89:38"><expr pos:start="89:36" pos:end="89:38"><name pos:start="89:36" pos:end="89:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="91:17" pos:end="91:26">return <expr pos:start="91:24" pos:end="91:25"><operator pos:start="91:24" pos:end="91:24">-</operator><literal type="number" pos:start="91:25" pos:end="91:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:39"><expr pos:start="95:13" pos:end="95:38"><call pos:start="95:13" pos:end="95:38"><name pos:start="95:13" pos:end="95:36">trace_nbd_opt_go_success</name><argument_list pos:start="95:37" pos:end="95:38">()</argument_list></call></expr>;</expr_stmt>

            <return pos:start="97:13" pos:end="97:21">return <expr pos:start="97:20" pos:end="97:20"><literal type="number" pos:start="97:20" pos:end="97:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="101:9" pos:end="111:9"><if pos:start="101:9" pos:end="111:9">if <condition pos:start="101:12" pos:end="101:39">(<expr pos:start="101:13" pos:end="101:38"><name pos:start="101:13" pos:end="101:22"><name pos:start="101:13" pos:end="101:17">reply</name><operator pos:start="101:18" pos:end="101:18">.</operator><name pos:start="101:19" pos:end="101:22">type</name></name> <operator pos:start="101:24" pos:end="101:25">!=</operator> <name pos:start="101:27" pos:end="101:38">NBD_REP_INFO</name></expr>)</condition> <block pos:start="101:41" pos:end="111:9">{<block_content pos:start="103:13" pos:end="109:22">

            <expr_stmt pos:start="103:13" pos:end="105:49"><expr pos:start="103:13" pos:end="105:48"><call pos:start="103:13" pos:end="105:48"><name pos:start="103:13" pos:end="103:22">error_setg</name><argument_list pos:start="103:23" pos:end="105:48">(<argument pos:start="103:24" pos:end="103:27"><expr pos:start="103:24" pos:end="103:27"><name pos:start="103:24" pos:end="103:27">errp</name></expr></argument>, <argument pos:start="103:30" pos:end="103:77"><expr pos:start="103:30" pos:end="103:77"><literal type="string" pos:start="103:30" pos:end="103:54">"unexpected reply type %"</literal> <name pos:start="103:56" pos:end="103:61">PRIx32</name> <literal type="string" pos:start="103:63" pos:end="103:77">", expected %x"</literal></expr></argument>,

                       <argument pos:start="105:24" pos:end="105:33"><expr pos:start="105:24" pos:end="105:33"><name pos:start="105:24" pos:end="105:33"><name pos:start="105:24" pos:end="105:28">reply</name><operator pos:start="105:29" pos:end="105:29">.</operator><name pos:start="105:30" pos:end="105:33">type</name></name></expr></argument>, <argument pos:start="105:36" pos:end="105:47"><expr pos:start="105:36" pos:end="105:47"><name pos:start="105:36" pos:end="105:47">NBD_REP_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:36"><expr pos:start="107:13" pos:end="107:35"><call pos:start="107:13" pos:end="107:35"><name pos:start="107:13" pos:end="107:30">nbd_send_opt_abort</name><argument_list pos:start="107:31" pos:end="107:35">(<argument pos:start="107:32" pos:end="107:34"><expr pos:start="107:32" pos:end="107:34"><name pos:start="107:32" pos:end="107:34">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="109:13" pos:end="109:22">return <expr pos:start="109:20" pos:end="109:21"><operator pos:start="109:20" pos:end="109:20">-</operator><literal type="number" pos:start="109:21" pos:end="109:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="113:9" pos:end="123:9"><if pos:start="113:9" pos:end="123:9">if <condition pos:start="113:12" pos:end="113:31">(<expr pos:start="113:13" pos:end="113:30"><name pos:start="113:13" pos:end="113:15">len</name> <operator pos:start="113:17" pos:end="113:17">&lt;</operator> <sizeof pos:start="113:19" pos:end="113:30">sizeof<argument_list pos:start="113:25" pos:end="113:30">(<argument pos:start="113:26" pos:end="113:29"><expr pos:start="113:26" pos:end="113:29"><name pos:start="113:26" pos:end="113:29">type</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="113:33" pos:end="123:9">{<block_content pos:start="115:13" pos:end="121:22">

            <expr_stmt pos:start="115:13" pos:end="117:28"><expr pos:start="115:13" pos:end="117:27"><call pos:start="115:13" pos:end="117:27"><name pos:start="115:13" pos:end="115:22">error_setg</name><argument_list pos:start="115:23" pos:end="117:27">(<argument pos:start="115:24" pos:end="115:27"><expr pos:start="115:24" pos:end="115:27"><name pos:start="115:24" pos:end="115:27">errp</name></expr></argument>, <argument pos:start="115:30" pos:end="115:75"><expr pos:start="115:30" pos:end="115:75"><literal type="string" pos:start="115:30" pos:end="115:52">"NBD_REP_INFO length %"</literal> <name pos:start="115:54" pos:end="115:59">PRIu32</name> <literal type="string" pos:start="115:61" pos:end="115:75">" is too short"</literal></expr></argument>,

                       <argument pos:start="117:24" pos:end="117:26"><expr pos:start="117:24" pos:end="117:26"><name pos:start="117:24" pos:end="117:26">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:36"><expr pos:start="119:13" pos:end="119:35"><call pos:start="119:13" pos:end="119:35"><name pos:start="119:13" pos:end="119:30">nbd_send_opt_abort</name><argument_list pos:start="119:31" pos:end="119:35">(<argument pos:start="119:32" pos:end="119:34"><expr pos:start="119:32" pos:end="119:34"><name pos:start="119:32" pos:end="119:34">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="121:13" pos:end="121:22">return <expr pos:start="121:20" pos:end="121:21"><operator pos:start="121:20" pos:end="121:20">-</operator><literal type="number" pos:start="121:21" pos:end="121:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="125:9" pos:end="133:9"><if pos:start="125:9" pos:end="133:9">if <condition pos:start="125:12" pos:end="125:57">(<expr pos:start="125:13" pos:end="125:56"><call pos:start="125:13" pos:end="125:52"><name pos:start="125:13" pos:end="125:20">nbd_read</name><argument_list pos:start="125:21" pos:end="125:52">(<argument pos:start="125:22" pos:end="125:24"><expr pos:start="125:22" pos:end="125:24"><name pos:start="125:22" pos:end="125:24">ioc</name></expr></argument>, <argument pos:start="125:27" pos:end="125:31"><expr pos:start="125:27" pos:end="125:31"><operator pos:start="125:27" pos:end="125:27">&amp;</operator><name pos:start="125:28" pos:end="125:31">type</name></expr></argument>, <argument pos:start="125:34" pos:end="125:45"><expr pos:start="125:34" pos:end="125:45"><sizeof pos:start="125:34" pos:end="125:45">sizeof<argument_list pos:start="125:40" pos:end="125:45">(<argument pos:start="125:41" pos:end="125:44"><expr pos:start="125:41" pos:end="125:44"><name pos:start="125:41" pos:end="125:44">type</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="125:48" pos:end="125:51"><expr pos:start="125:48" pos:end="125:51"><name pos:start="125:48" pos:end="125:51">errp</name></expr></argument>)</argument_list></call> <operator pos:start="125:54" pos:end="125:54">&lt;</operator> <literal type="number" pos:start="125:56" pos:end="125:56">0</literal></expr>)</condition> <block pos:start="125:59" pos:end="133:9">{<block_content pos:start="127:13" pos:end="131:22">

            <expr_stmt pos:start="127:13" pos:end="127:60"><expr pos:start="127:13" pos:end="127:59"><call pos:start="127:13" pos:end="127:59"><name pos:start="127:13" pos:end="127:25">error_prepend</name><argument_list pos:start="127:26" pos:end="127:59">(<argument pos:start="127:27" pos:end="127:30"><expr pos:start="127:27" pos:end="127:30"><name pos:start="127:27" pos:end="127:30">errp</name></expr></argument>, <argument pos:start="127:33" pos:end="127:58"><expr pos:start="127:33" pos:end="127:58"><literal type="string" pos:start="127:33" pos:end="127:58">"failed to read info type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:36"><expr pos:start="129:13" pos:end="129:35"><call pos:start="129:13" pos:end="129:35"><name pos:start="129:13" pos:end="129:30">nbd_send_opt_abort</name><argument_list pos:start="129:31" pos:end="129:35">(<argument pos:start="129:32" pos:end="129:34"><expr pos:start="129:32" pos:end="129:34"><name pos:start="129:32" pos:end="129:34">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="131:13" pos:end="131:22">return <expr pos:start="131:20" pos:end="131:21"><operator pos:start="131:20" pos:end="131:20">-</operator><literal type="number" pos:start="131:21" pos:end="131:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:28"><expr pos:start="135:9" pos:end="135:27"><name pos:start="135:9" pos:end="135:11">len</name> <operator pos:start="135:13" pos:end="135:14">-=</operator> <sizeof pos:start="135:16" pos:end="135:27">sizeof<argument_list pos:start="135:22" pos:end="135:27">(<argument pos:start="135:23" pos:end="135:26"><expr pos:start="135:23" pos:end="135:26"><name pos:start="135:23" pos:end="135:26">type</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:28"><expr pos:start="137:9" pos:end="137:27"><call pos:start="137:9" pos:end="137:27"><name pos:start="137:9" pos:end="137:20">be16_to_cpus</name><argument_list pos:start="137:21" pos:end="137:27">(<argument pos:start="137:22" pos:end="137:26"><expr pos:start="137:22" pos:end="137:26"><operator pos:start="137:22" pos:end="137:22">&amp;</operator><name pos:start="137:23" pos:end="137:26">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="139:9" pos:end="201:9">switch <condition pos:start="139:16" pos:end="139:21">(<expr pos:start="139:17" pos:end="139:20"><name pos:start="139:17" pos:end="139:20">type</name></expr>)</condition> <block pos:start="139:23" pos:end="201:9">{<block_content pos:start="141:9" pos:end="199:18">

        <case pos:start="141:9" pos:end="141:29">case <expr pos:start="141:14" pos:end="141:28"><name pos:start="141:14" pos:end="141:28">NBD_INFO_EXPORT</name></expr>:</case>

            <if_stmt pos:start="143:13" pos:end="153:13"><if pos:start="143:13" pos:end="153:13">if <condition pos:start="143:16" pos:end="143:64">(<expr pos:start="143:17" pos:end="143:63"><name pos:start="143:17" pos:end="143:19">len</name> <operator pos:start="143:21" pos:end="143:22">!=</operator> <sizeof pos:start="143:24" pos:end="143:41">sizeof<argument_list pos:start="143:30" pos:end="143:41">(<argument pos:start="143:31" pos:end="143:40"><expr pos:start="143:31" pos:end="143:40"><name pos:start="143:31" pos:end="143:40"><name pos:start="143:31" pos:end="143:34">info</name><operator pos:start="143:35" pos:end="143:36">-&gt;</operator><name pos:start="143:37" pos:end="143:40">size</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="143:43" pos:end="143:43">+</operator> <sizeof pos:start="143:45" pos:end="143:63">sizeof<argument_list pos:start="143:51" pos:end="143:63">(<argument pos:start="143:52" pos:end="143:62"><expr pos:start="143:52" pos:end="143:62"><name pos:start="143:52" pos:end="143:62"><name pos:start="143:52" pos:end="143:55">info</name><operator pos:start="143:56" pos:end="143:57">-&gt;</operator><name pos:start="143:58" pos:end="143:62">flags</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="143:66" pos:end="153:13">{<block_content pos:start="145:17" pos:end="151:26">

                <expr_stmt pos:start="145:17" pos:end="147:55"><expr pos:start="145:17" pos:end="147:54"><call pos:start="145:17" pos:end="147:54"><name pos:start="145:17" pos:end="145:26">error_setg</name><argument_list pos:start="145:27" pos:end="147:54">(<argument pos:start="145:28" pos:end="145:31"><expr pos:start="145:28" pos:end="145:31"><name pos:start="145:28" pos:end="145:31">errp</name></expr></argument>, <argument pos:start="145:34" pos:end="147:48"><expr pos:start="145:34" pos:end="147:48"><literal type="string" pos:start="145:34" pos:end="145:62">"remaining export info len %"</literal> <name pos:start="145:64" pos:end="145:69">PRIu32</name>

                           <literal type="string" pos:start="147:28" pos:end="147:48">" is unexpected size"</literal></expr></argument>, <argument pos:start="147:51" pos:end="147:53"><expr pos:start="147:51" pos:end="147:53"><name pos:start="147:51" pos:end="147:53">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:40"><expr pos:start="149:17" pos:end="149:39"><call pos:start="149:17" pos:end="149:39"><name pos:start="149:17" pos:end="149:34">nbd_send_opt_abort</name><argument_list pos:start="149:35" pos:end="149:39">(<argument pos:start="149:36" pos:end="149:38"><expr pos:start="149:36" pos:end="149:38"><name pos:start="149:36" pos:end="149:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="151:17" pos:end="151:26">return <expr pos:start="151:24" pos:end="151:25"><operator pos:start="151:24" pos:end="151:24">-</operator><literal type="number" pos:start="151:25" pos:end="151:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="155:13" pos:end="163:13"><if pos:start="155:13" pos:end="163:13">if <condition pos:start="155:16" pos:end="155:73">(<expr pos:start="155:17" pos:end="155:72"><call pos:start="155:17" pos:end="155:68"><name pos:start="155:17" pos:end="155:24">nbd_read</name><argument_list pos:start="155:25" pos:end="155:68">(<argument pos:start="155:26" pos:end="155:28"><expr pos:start="155:26" pos:end="155:28"><name pos:start="155:26" pos:end="155:28">ioc</name></expr></argument>, <argument pos:start="155:31" pos:end="155:41"><expr pos:start="155:31" pos:end="155:41"><operator pos:start="155:31" pos:end="155:31">&amp;</operator><name pos:start="155:32" pos:end="155:41"><name pos:start="155:32" pos:end="155:35">info</name><operator pos:start="155:36" pos:end="155:37">-&gt;</operator><name pos:start="155:38" pos:end="155:41">size</name></name></expr></argument>, <argument pos:start="155:44" pos:end="155:61"><expr pos:start="155:44" pos:end="155:61"><sizeof pos:start="155:44" pos:end="155:61">sizeof<argument_list pos:start="155:50" pos:end="155:61">(<argument pos:start="155:51" pos:end="155:60"><expr pos:start="155:51" pos:end="155:60"><name pos:start="155:51" pos:end="155:60"><name pos:start="155:51" pos:end="155:54">info</name><operator pos:start="155:55" pos:end="155:56">-&gt;</operator><name pos:start="155:57" pos:end="155:60">size</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="155:64" pos:end="155:67"><expr pos:start="155:64" pos:end="155:67"><name pos:start="155:64" pos:end="155:67">errp</name></expr></argument>)</argument_list></call> <operator pos:start="155:70" pos:end="155:70">&lt;</operator> <literal type="number" pos:start="155:72" pos:end="155:72">0</literal></expr>)</condition> <block pos:start="155:75" pos:end="163:13">{<block_content pos:start="157:17" pos:end="161:26">

                <expr_stmt pos:start="157:17" pos:end="157:64"><expr pos:start="157:17" pos:end="157:63"><call pos:start="157:17" pos:end="157:63"><name pos:start="157:17" pos:end="157:29">error_prepend</name><argument_list pos:start="157:30" pos:end="157:63">(<argument pos:start="157:31" pos:end="157:34"><expr pos:start="157:31" pos:end="157:34"><name pos:start="157:31" pos:end="157:34">errp</name></expr></argument>, <argument pos:start="157:37" pos:end="157:62"><expr pos:start="157:37" pos:end="157:62"><literal type="string" pos:start="157:37" pos:end="157:62">"failed to read info size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:40"><expr pos:start="159:17" pos:end="159:39"><call pos:start="159:17" pos:end="159:39"><name pos:start="159:17" pos:end="159:34">nbd_send_opt_abort</name><argument_list pos:start="159:35" pos:end="159:39">(<argument pos:start="159:36" pos:end="159:38"><expr pos:start="159:36" pos:end="159:38"><name pos:start="159:36" pos:end="159:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="161:17" pos:end="161:26">return <expr pos:start="161:24" pos:end="161:25"><operator pos:start="161:24" pos:end="161:24">-</operator><literal type="number" pos:start="161:25" pos:end="161:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:38"><expr pos:start="165:13" pos:end="165:37"><call pos:start="165:13" pos:end="165:37"><name pos:start="165:13" pos:end="165:24">be64_to_cpus</name><argument_list pos:start="165:25" pos:end="165:37">(<argument pos:start="165:26" pos:end="165:36"><expr pos:start="165:26" pos:end="165:36"><operator pos:start="165:26" pos:end="165:26">&amp;</operator><name pos:start="165:27" pos:end="165:36"><name pos:start="165:27" pos:end="165:30">info</name><operator pos:start="165:31" pos:end="165:32">-&gt;</operator><name pos:start="165:33" pos:end="165:36">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="167:13" pos:end="175:13"><if pos:start="167:13" pos:end="175:13">if <condition pos:start="167:16" pos:end="167:75">(<expr pos:start="167:17" pos:end="167:74"><call pos:start="167:17" pos:end="167:70"><name pos:start="167:17" pos:end="167:24">nbd_read</name><argument_list pos:start="167:25" pos:end="167:70">(<argument pos:start="167:26" pos:end="167:28"><expr pos:start="167:26" pos:end="167:28"><name pos:start="167:26" pos:end="167:28">ioc</name></expr></argument>, <argument pos:start="167:31" pos:end="167:42"><expr pos:start="167:31" pos:end="167:42"><operator pos:start="167:31" pos:end="167:31">&amp;</operator><name pos:start="167:32" pos:end="167:42"><name pos:start="167:32" pos:end="167:35">info</name><operator pos:start="167:36" pos:end="167:37">-&gt;</operator><name pos:start="167:38" pos:end="167:42">flags</name></name></expr></argument>, <argument pos:start="167:45" pos:end="167:63"><expr pos:start="167:45" pos:end="167:63"><sizeof pos:start="167:45" pos:end="167:63">sizeof<argument_list pos:start="167:51" pos:end="167:63">(<argument pos:start="167:52" pos:end="167:62"><expr pos:start="167:52" pos:end="167:62"><name pos:start="167:52" pos:end="167:62"><name pos:start="167:52" pos:end="167:55">info</name><operator pos:start="167:56" pos:end="167:57">-&gt;</operator><name pos:start="167:58" pos:end="167:62">flags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="167:66" pos:end="167:69"><expr pos:start="167:66" pos:end="167:69"><name pos:start="167:66" pos:end="167:69">errp</name></expr></argument>)</argument_list></call> <operator pos:start="167:72" pos:end="167:72">&lt;</operator> <literal type="number" pos:start="167:74" pos:end="167:74">0</literal></expr>)</condition> <block pos:start="167:77" pos:end="175:13">{<block_content pos:start="169:17" pos:end="173:26">

                <expr_stmt pos:start="169:17" pos:end="169:65"><expr pos:start="169:17" pos:end="169:64"><call pos:start="169:17" pos:end="169:64"><name pos:start="169:17" pos:end="169:29">error_prepend</name><argument_list pos:start="169:30" pos:end="169:64">(<argument pos:start="169:31" pos:end="169:34"><expr pos:start="169:31" pos:end="169:34"><name pos:start="169:31" pos:end="169:34">errp</name></expr></argument>, <argument pos:start="169:37" pos:end="169:63"><expr pos:start="169:37" pos:end="169:63"><literal type="string" pos:start="169:37" pos:end="169:63">"failed to read info flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="171:17" pos:end="171:40"><expr pos:start="171:17" pos:end="171:39"><call pos:start="171:17" pos:end="171:39"><name pos:start="171:17" pos:end="171:34">nbd_send_opt_abort</name><argument_list pos:start="171:35" pos:end="171:39">(<argument pos:start="171:36" pos:end="171:38"><expr pos:start="171:36" pos:end="171:38"><name pos:start="171:36" pos:end="171:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="173:17" pos:end="173:26">return <expr pos:start="173:24" pos:end="173:25"><operator pos:start="173:24" pos:end="173:24">-</operator><literal type="number" pos:start="173:25" pos:end="173:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:39"><expr pos:start="177:13" pos:end="177:38"><call pos:start="177:13" pos:end="177:38"><name pos:start="177:13" pos:end="177:24">be16_to_cpus</name><argument_list pos:start="177:25" pos:end="177:38">(<argument pos:start="177:26" pos:end="177:37"><expr pos:start="177:26" pos:end="177:37"><operator pos:start="177:26" pos:end="177:26">&amp;</operator><name pos:start="177:27" pos:end="177:37"><name pos:start="177:27" pos:end="177:30">info</name><operator pos:start="177:31" pos:end="177:32">-&gt;</operator><name pos:start="177:33" pos:end="177:37">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:76"><expr pos:start="179:13" pos:end="179:75"><call pos:start="179:13" pos:end="179:75"><name pos:start="179:13" pos:end="179:50">trace_nbd_receive_negotiate_size_flags</name><argument_list pos:start="179:51" pos:end="179:75">(<argument pos:start="179:52" pos:end="179:61"><expr pos:start="179:52" pos:end="179:61"><name pos:start="179:52" pos:end="179:61"><name pos:start="179:52" pos:end="179:55">info</name><operator pos:start="179:56" pos:end="179:57">-&gt;</operator><name pos:start="179:58" pos:end="179:61">size</name></name></expr></argument>, <argument pos:start="179:64" pos:end="179:74"><expr pos:start="179:64" pos:end="179:74"><name pos:start="179:64" pos:end="179:74"><name pos:start="179:64" pos:end="179:67">info</name><operator pos:start="179:68" pos:end="179:69">-&gt;</operator><name pos:start="179:70" pos:end="179:74">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="181:13" pos:end="181:18">break;</break>



        <default pos:start="185:9" pos:end="185:16">default:</default>

            <expr_stmt pos:start="187:13" pos:end="187:71"><expr pos:start="187:13" pos:end="187:70"><call pos:start="187:13" pos:end="187:70"><name pos:start="187:13" pos:end="187:41">trace_nbd_opt_go_info_unknown</name><argument_list pos:start="187:42" pos:end="187:70">(<argument pos:start="187:43" pos:end="187:46"><expr pos:start="187:43" pos:end="187:46"><name pos:start="187:43" pos:end="187:46">type</name></expr></argument>, <argument pos:start="187:49" pos:end="187:69"><expr pos:start="187:49" pos:end="187:69"><call pos:start="187:49" pos:end="187:69"><name pos:start="187:49" pos:end="187:63">nbd_info_lookup</name><argument_list pos:start="187:64" pos:end="187:69">(<argument pos:start="187:65" pos:end="187:68"><expr pos:start="187:65" pos:end="187:68"><name pos:start="187:65" pos:end="187:68">type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="189:13" pos:end="197:13"><if pos:start="189:13" pos:end="197:13">if <condition pos:start="189:16" pos:end="189:45">(<expr pos:start="189:17" pos:end="189:44"><call pos:start="189:17" pos:end="189:40"><name pos:start="189:17" pos:end="189:24">nbd_drop</name><argument_list pos:start="189:25" pos:end="189:40">(<argument pos:start="189:26" pos:end="189:28"><expr pos:start="189:26" pos:end="189:28"><name pos:start="189:26" pos:end="189:28">ioc</name></expr></argument>, <argument pos:start="189:31" pos:end="189:33"><expr pos:start="189:31" pos:end="189:33"><name pos:start="189:31" pos:end="189:33">len</name></expr></argument>, <argument pos:start="189:36" pos:end="189:39"><expr pos:start="189:36" pos:end="189:39"><name pos:start="189:36" pos:end="189:39">errp</name></expr></argument>)</argument_list></call> <operator pos:start="189:42" pos:end="189:42">&lt;</operator> <literal type="number" pos:start="189:44" pos:end="189:44">0</literal></expr>)</condition> <block pos:start="189:47" pos:end="197:13">{<block_content pos:start="191:17" pos:end="195:26">

                <expr_stmt pos:start="191:17" pos:end="191:67"><expr pos:start="191:17" pos:end="191:66"><call pos:start="191:17" pos:end="191:66"><name pos:start="191:17" pos:end="191:29">error_prepend</name><argument_list pos:start="191:30" pos:end="191:66">(<argument pos:start="191:31" pos:end="191:34"><expr pos:start="191:31" pos:end="191:34"><name pos:start="191:31" pos:end="191:34">errp</name></expr></argument>, <argument pos:start="191:37" pos:end="191:65"><expr pos:start="191:37" pos:end="191:65"><literal type="string" pos:start="191:37" pos:end="191:65">"Failed to read info payload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:40"><expr pos:start="193:17" pos:end="193:39"><call pos:start="193:17" pos:end="193:39"><name pos:start="193:17" pos:end="193:34">nbd_send_opt_abort</name><argument_list pos:start="193:35" pos:end="193:39">(<argument pos:start="193:36" pos:end="193:38"><expr pos:start="193:36" pos:end="193:38"><name pos:start="193:36" pos:end="193:38">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="195:17" pos:end="195:26">return <expr pos:start="195:24" pos:end="195:25"><operator pos:start="195:24" pos:end="195:24">-</operator><literal type="number" pos:start="195:25" pos:end="195:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="199:13" pos:end="199:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
