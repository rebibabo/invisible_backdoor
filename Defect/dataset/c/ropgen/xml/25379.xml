<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25379.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:13">qmp_cont</name><parameter_list pos:start="1:14" pos:end="1:27">(<parameter pos:start="1:15" pos:end="1:26"><decl pos:start="1:15" pos:end="1:26"><type pos:start="1:15" pos:end="1:22"><name pos:start="1:15" pos:end="1:19">Error</name> <modifier pos:start="1:21" pos:end="1:21">*</modifier><modifier pos:start="1:22" pos:end="1:22">*</modifier></type><name pos:start="1:23" pos:end="1:26">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="47:1">{<block_content pos:start="5:5" pos:end="45:15">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">Error</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:20">local_err</name> <init pos:start="5:22" pos:end="5:27">= <expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">NULL</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="27:5"><if pos:start="9:5" pos:end="15:5">if <condition pos:start="9:8" pos:end="9:44">(<expr pos:start="9:9" pos:end="9:43"><call pos:start="9:9" pos:end="9:43"><name pos:start="9:9" pos:end="9:22">runstate_check</name><argument_list pos:start="9:23" pos:end="9:43">(<argument pos:start="9:24" pos:end="9:42"><expr pos:start="9:24" pos:end="9:42"><name pos:start="9:24" pos:end="9:42">RUN_STATE_INMIGRATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="9:46" pos:end="15:5">{<block_content pos:start="11:9" pos:end="13:15">

        <expr_stmt pos:start="11:9" pos:end="11:49"><expr pos:start="11:9" pos:end="11:48"><call pos:start="11:9" pos:end="11:48"><name pos:start="11:9" pos:end="11:17">error_set</name><argument_list pos:start="11:18" pos:end="11:48">(<argument pos:start="11:19" pos:end="11:22"><expr pos:start="11:19" pos:end="11:22"><name pos:start="11:19" pos:end="11:22">errp</name></expr></argument>, <argument pos:start="11:25" pos:end="11:47"><expr pos:start="11:25" pos:end="11:47"><name pos:start="11:25" pos:end="11:47">QERR_MIGRATION_EXPECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="13:9" pos:end="13:15">return;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="15:7" pos:end="23:5">else if <condition pos:start="15:15" pos:end="17:50">(<expr pos:start="15:16" pos:end="17:49"><call pos:start="15:16" pos:end="15:55"><name pos:start="15:16" pos:end="15:29">runstate_check</name><argument_list pos:start="15:30" pos:end="15:55">(<argument pos:start="15:31" pos:end="15:54"><expr pos:start="15:31" pos:end="15:54"><name pos:start="15:31" pos:end="15:54">RUN_STATE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call> <operator pos:start="15:57" pos:end="15:58">||</operator>

               <call pos:start="17:16" pos:end="17:49"><name pos:start="17:16" pos:end="17:29">runstate_check</name><argument_list pos:start="17:30" pos:end="17:49">(<argument pos:start="17:31" pos:end="17:48"><expr pos:start="17:31" pos:end="17:48"><name pos:start="17:31" pos:end="17:48">RUN_STATE_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="17:52" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:45"><expr pos:start="19:9" pos:end="19:44"><call pos:start="19:9" pos:end="19:44"><name pos:start="19:9" pos:end="19:17">error_set</name><argument_list pos:start="19:18" pos:end="19:44">(<argument pos:start="19:19" pos:end="19:22"><expr pos:start="19:19" pos:end="19:22"><name pos:start="19:19" pos:end="19:22">errp</name></expr></argument>, <argument pos:start="19:25" pos:end="19:43"><expr pos:start="19:25" pos:end="19:43"><name pos:start="19:25" pos:end="19:43">QERR_RESET_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="23:7" pos:end="27:5">else if <condition pos:start="23:15" pos:end="23:51">(<expr pos:start="23:16" pos:end="23:50"><call pos:start="23:16" pos:end="23:50"><name pos:start="23:16" pos:end="23:29">runstate_check</name><argument_list pos:start="23:30" pos:end="23:50">(<argument pos:start="23:31" pos:end="23:49"><expr pos:start="23:31" pos:end="23:49"><name pos:start="23:31" pos:end="23:49">RUN_STATE_SUSPENDED</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:53" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:15">

        <return pos:start="25:9" pos:end="25:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:41"><expr pos:start="31:5" pos:end="31:40"><call pos:start="31:5" pos:end="31:40"><name pos:start="31:5" pos:end="31:16">bdrv_iterate</name><argument_list pos:start="31:17" pos:end="31:40">(<argument pos:start="31:18" pos:end="31:33"><expr pos:start="31:18" pos:end="31:33"><name pos:start="31:18" pos:end="31:33">iostatus_bdrv_it</name></expr></argument>, <argument pos:start="31:36" pos:end="31:39"><expr pos:start="31:36" pos:end="31:39"><name pos:start="31:36" pos:end="31:39">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:48"><expr pos:start="33:5" pos:end="33:47"><call pos:start="33:5" pos:end="33:47"><name pos:start="33:5" pos:end="33:16">bdrv_iterate</name><argument_list pos:start="33:17" pos:end="33:47">(<argument pos:start="33:18" pos:end="33:34"><expr pos:start="33:18" pos:end="33:34"><name pos:start="33:18" pos:end="33:34">encrypted_bdrv_it</name></expr></argument>, <argument pos:start="33:37" pos:end="33:46"><expr pos:start="33:37" pos:end="33:46"><operator pos:start="33:37" pos:end="33:37">&amp;</operator><name pos:start="33:38" pos:end="33:46">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:18">(<expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:17">local_err</name></expr>)</condition> <block pos:start="35:20" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:15">

        <expr_stmt pos:start="37:9" pos:end="37:41"><expr pos:start="37:9" pos:end="37:40"><call pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:23">error_propagate</name><argument_list pos:start="37:24" pos:end="37:40">(<argument pos:start="37:25" pos:end="37:28"><expr pos:start="37:25" pos:end="37:28"><name pos:start="37:25" pos:end="37:28">errp</name></expr></argument>, <argument pos:start="37:31" pos:end="37:39"><expr pos:start="37:31" pos:end="37:39"><name pos:start="37:31" pos:end="37:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:15"><expr pos:start="45:5" pos:end="45:14"><call pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:12">vm_start</name><argument_list pos:start="45:13" pos:end="45:14">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
