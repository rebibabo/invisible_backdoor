<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23662.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:56"><name pos:start="1:1" pos:end="1:9">fork_exec</name><argument_list pos:start="1:10" pos:end="1:56">(<argument pos:start="1:11" pos:end="1:27">struct socket *so</argument>, <argument pos:start="1:30" pos:end="1:43">const char *ex</argument>, <argument pos:start="1:46" pos:end="1:55">int do_pty</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="235:1">{<block_content pos:start="5:9" pos:end="233:9">

	<decl_stmt pos:start="5:9" pos:end="5:14"><decl pos:start="5:9" pos:end="5:13"><type pos:start="5:9" pos:end="5:11"><name pos:start="5:9" pos:end="5:11">int</name></type> <name pos:start="5:13" pos:end="5:13">s</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:26">sockaddr_in</name></name></type> <name pos:start="7:28" pos:end="7:31">addr</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:41"><decl pos:start="9:9" pos:end="9:40"><type pos:start="9:9" pos:end="9:17"><name pos:start="9:9" pos:end="9:17">socklen_t</name></type> <name pos:start="9:19" pos:end="9:25">addrlen</name> <init pos:start="9:27" pos:end="9:40">= <expr pos:start="9:29" pos:end="9:40"><sizeof pos:start="9:29" pos:end="9:40">sizeof<argument_list pos:start="9:35" pos:end="9:40">(<argument pos:start="9:36" pos:end="9:39"><expr pos:start="9:36" pos:end="9:39"><name pos:start="9:36" pos:end="9:39">addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:16"><decl pos:start="11:9" pos:end="11:15"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:15">opt</name></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:30"><decl pos:start="13:9" pos:end="13:29"><type pos:start="13:9" pos:end="13:20"><specifier pos:start="13:9" pos:end="13:13">const</specifier> <name pos:start="13:15" pos:end="13:18">char</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:29"><name pos:start="13:21" pos:end="13:24">argv</name><index pos:start="13:25" pos:end="13:29">[<expr pos:start="13:26" pos:end="13:28"><literal type="number" pos:start="13:26" pos:end="13:28">256</literal></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block" pos:start="15:9" pos:end="15:48">/* don't want to clobber the original */</comment>

	<decl_stmt pos:start="17:9" pos:end="17:19"><decl pos:start="17:9" pos:end="17:18"><type pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:12">char</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:18">bptr</name></decl>;</decl_stmt>

	<decl_stmt pos:start="19:9" pos:end="19:27"><decl pos:start="19:9" pos:end="19:26"><type pos:start="19:9" pos:end="19:20"><specifier pos:start="19:9" pos:end="19:13">const</specifier> <name pos:start="19:15" pos:end="19:18">char</name> <modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:26">curarg</name></decl>;</decl_stmt>

	<decl_stmt pos:start="21:9" pos:end="21:22"><decl pos:start="21:9" pos:end="21:13"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:13">c</name></decl>, <decl pos:start="21:16" pos:end="21:16"><type ref="prev" pos:start="21:9" pos:end="21:11"/><name pos:start="21:16" pos:end="21:16">i</name></decl>, <decl pos:start="21:19" pos:end="21:21"><type ref="prev" pos:start="21:9" pos:end="21:11"/><name pos:start="21:19" pos:end="21:21">ret</name></decl>;</decl_stmt>

	<decl_stmt pos:start="23:9" pos:end="23:18"><decl pos:start="23:9" pos:end="23:17"><type pos:start="23:9" pos:end="23:13"><name pos:start="23:9" pos:end="23:13">pid_t</name></type> <name pos:start="23:15" pos:end="23:17">pid</name></decl>;</decl_stmt>



	<expr_stmt pos:start="27:9" pos:end="27:32"><expr pos:start="27:9" pos:end="27:31"><call pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:18">DEBUG_CALL</name><argument_list pos:start="27:19" pos:end="27:31">(<argument pos:start="27:20" pos:end="27:30"><expr pos:start="27:20" pos:end="27:30"><literal type="string" pos:start="27:20" pos:end="27:30">"fork_exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="29:9" pos:end="29:33"><expr pos:start="29:9" pos:end="29:32"><call pos:start="29:9" pos:end="29:32"><name pos:start="29:9" pos:end="29:17">DEBUG_ARG</name><argument_list pos:start="29:18" pos:end="29:32">(<argument pos:start="29:19" pos:end="29:27"><expr pos:start="29:19" pos:end="29:27"><literal type="string" pos:start="29:19" pos:end="29:27">"so = %p"</literal></expr></argument>, <argument pos:start="29:30" pos:end="29:31"><expr pos:start="29:30" pos:end="29:31"><name pos:start="29:30" pos:end="29:31">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="31:9" pos:end="31:33"><expr pos:start="31:9" pos:end="31:32"><call pos:start="31:9" pos:end="31:32"><name pos:start="31:9" pos:end="31:17">DEBUG_ARG</name><argument_list pos:start="31:18" pos:end="31:32">(<argument pos:start="31:19" pos:end="31:27"><expr pos:start="31:19" pos:end="31:27"><literal type="string" pos:start="31:19" pos:end="31:27">"ex = %p"</literal></expr></argument>, <argument pos:start="31:30" pos:end="31:31"><expr pos:start="31:30" pos:end="31:31"><name pos:start="31:30" pos:end="31:31">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="33:9" pos:end="33:41"><expr pos:start="33:9" pos:end="33:40"><call pos:start="33:9" pos:end="33:40"><name pos:start="33:9" pos:end="33:17">DEBUG_ARG</name><argument_list pos:start="33:18" pos:end="33:40">(<argument pos:start="33:19" pos:end="33:31"><expr pos:start="33:19" pos:end="33:31"><literal type="string" pos:start="33:19" pos:end="33:31">"do_pty = %x"</literal></expr></argument>, <argument pos:start="33:34" pos:end="33:39"><expr pos:start="33:34" pos:end="33:39"><name pos:start="33:34" pos:end="33:39">do_pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="37:9" pos:end="67:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:24">(<expr pos:start="37:13" pos:end="37:23"><name pos:start="37:13" pos:end="37:18">do_pty</name> <operator pos:start="37:20" pos:end="37:21">==</operator> <literal type="number" pos:start="37:23" pos:end="37:23">2</literal></expr>)</condition> <block pos:start="37:26" pos:end="41:9">{<block_content pos:start="39:17" pos:end="39:25">

                <return pos:start="39:17" pos:end="39:25">return <expr pos:start="39:24" pos:end="39:24"><literal type="number" pos:start="39:24" pos:end="39:24">0</literal></expr>;</return>

	</block_content>}</block></if> <else pos:start="41:11" pos:end="67:9">else <block pos:start="41:16" pos:end="67:9">{<block_content pos:start="43:17" pos:end="65:17">

		<expr_stmt pos:start="43:17" pos:end="43:42"><expr pos:start="43:17" pos:end="43:41"><name pos:start="43:17" pos:end="43:31"><name pos:start="43:17" pos:end="43:20">addr</name><operator pos:start="43:21" pos:end="43:21">.</operator><name pos:start="43:22" pos:end="43:31">sin_family</name></name> <operator pos:start="43:33" pos:end="43:33">=</operator> <name pos:start="43:35" pos:end="43:41">AF_INET</name></expr>;</expr_stmt>

		<expr_stmt pos:start="45:17" pos:end="45:34"><expr pos:start="45:17" pos:end="45:33"><name pos:start="45:17" pos:end="45:29"><name pos:start="45:17" pos:end="45:20">addr</name><operator pos:start="45:21" pos:end="45:21">.</operator><name pos:start="45:22" pos:end="45:29">sin_port</name></name> <operator pos:start="45:31" pos:end="45:31">=</operator> <literal type="number" pos:start="45:33" pos:end="45:33">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="47:17" pos:end="47:50"><expr pos:start="47:17" pos:end="47:49"><name pos:start="47:17" pos:end="47:36"><name pos:start="47:17" pos:end="47:20">addr</name><operator pos:start="47:21" pos:end="47:21">.</operator><name pos:start="47:22" pos:end="47:29">sin_addr</name><operator pos:start="47:30" pos:end="47:30">.</operator><name pos:start="47:31" pos:end="47:36">s_addr</name></name> <operator pos:start="47:38" pos:end="47:38">=</operator> <name pos:start="47:40" pos:end="47:49">INADDR_ANY</name></expr>;</expr_stmt>



		<if_stmt pos:start="51:17" pos:end="65:17"><if pos:start="51:17" pos:end="65:17">if <condition pos:start="51:20" pos:end="55:37">(<expr pos:start="51:21" pos:end="55:36"><operator pos:start="51:21" pos:end="51:21">(</operator><name pos:start="51:22" pos:end="51:22">s</name> <operator pos:start="51:24" pos:end="51:24">=</operator> <call pos:start="51:26" pos:end="51:61"><name pos:start="51:26" pos:end="51:36">qemu_socket</name><argument_list pos:start="51:37" pos:end="51:61">(<argument pos:start="51:38" pos:end="51:44"><expr pos:start="51:38" pos:end="51:44"><name pos:start="51:38" pos:end="51:44">AF_INET</name></expr></argument>, <argument pos:start="51:47" pos:end="51:57"><expr pos:start="51:47" pos:end="51:57"><name pos:start="51:47" pos:end="51:57">SOCK_STREAM</name></expr></argument>, <argument pos:start="51:60" pos:end="51:60"><expr pos:start="51:60" pos:end="51:60"><literal type="number" pos:start="51:60" pos:end="51:60">0</literal></expr></argument>)</argument_list></call><operator pos:start="51:62" pos:end="51:62">)</operator> <operator pos:start="51:64" pos:end="51:64">&lt;</operator> <literal type="number" pos:start="51:66" pos:end="51:66">0</literal> <operator pos:start="51:68" pos:end="51:69">||</operator>

		    <call pos:start="53:21" pos:end="53:62"><name pos:start="53:21" pos:end="53:24">bind</name><argument_list pos:start="53:25" pos:end="53:62">(<argument pos:start="53:26" pos:end="53:26"><expr pos:start="53:26" pos:end="53:26"><name pos:start="53:26" pos:end="53:26">s</name></expr></argument>, <argument pos:start="53:29" pos:end="53:52"><expr pos:start="53:29" pos:end="53:52"><operator pos:start="53:29" pos:end="53:29">(</operator>struct <name pos:start="53:37" pos:end="53:44">sockaddr</name> <operator pos:start="53:46" pos:end="53:46">*</operator><operator pos:start="53:47" pos:end="53:47">)</operator><operator pos:start="53:48" pos:end="53:48">&amp;</operator><name pos:start="53:49" pos:end="53:52">addr</name></expr></argument>, <argument pos:start="53:55" pos:end="53:61"><expr pos:start="53:55" pos:end="53:61"><name pos:start="53:55" pos:end="53:61">addrlen</name></expr></argument>)</argument_list></call> <operator pos:start="53:64" pos:end="53:64">&lt;</operator> <literal type="number" pos:start="53:66" pos:end="53:66">0</literal> <operator pos:start="53:68" pos:end="53:69">||</operator>

		    <call pos:start="55:21" pos:end="55:32"><name pos:start="55:21" pos:end="55:26">listen</name><argument_list pos:start="55:27" pos:end="55:32">(<argument pos:start="55:28" pos:end="55:28"><expr pos:start="55:28" pos:end="55:28"><name pos:start="55:28" pos:end="55:28">s</name></expr></argument>, <argument pos:start="55:31" pos:end="55:31"><expr pos:start="55:31" pos:end="55:31"><literal type="number" pos:start="55:31" pos:end="55:31">1</literal></expr></argument>)</argument_list></call> <operator pos:start="55:34" pos:end="55:34">&lt;</operator> <literal type="number" pos:start="55:36" pos:end="55:36">0</literal></expr>)</condition> <block pos:start="55:39" pos:end="65:17">{<block_content pos:start="57:25" pos:end="63:33">

			<expr_stmt pos:start="57:25" pos:end="57:80"><expr pos:start="57:25" pos:end="57:79"><call pos:start="57:25" pos:end="57:79"><name pos:start="57:25" pos:end="57:36">error_report</name><argument_list pos:start="57:37" pos:end="57:79">(<argument pos:start="57:38" pos:end="57:61"><expr pos:start="57:38" pos:end="57:61"><literal type="string" pos:start="57:38" pos:end="57:61">"Error: inet socket: %s"</literal></expr></argument>, <argument pos:start="57:64" pos:end="57:78"><expr pos:start="57:64" pos:end="57:78"><call pos:start="57:64" pos:end="57:78"><name pos:start="57:64" pos:end="57:71">strerror</name><argument_list pos:start="57:72" pos:end="57:78">(<argument pos:start="57:73" pos:end="57:77"><expr pos:start="57:73" pos:end="57:77"><name pos:start="57:73" pos:end="57:77">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="59:25" pos:end="59:39"><expr pos:start="59:25" pos:end="59:38"><call pos:start="59:25" pos:end="59:38"><name pos:start="59:25" pos:end="59:35">closesocket</name><argument_list pos:start="59:36" pos:end="59:38">(<argument pos:start="59:37" pos:end="59:37"><expr pos:start="59:37" pos:end="59:37"><name pos:start="59:37" pos:end="59:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



			<return pos:start="63:25" pos:end="63:33">return <expr pos:start="63:32" pos:end="63:32"><literal type="number" pos:start="63:32" pos:end="63:32">0</literal></expr>;</return>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></else></if_stmt>



	<expr_stmt pos:start="71:9" pos:end="71:21"><expr pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:11">pid</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:20"><name pos:start="71:15" pos:end="71:18">fork</name><argument_list pos:start="71:19" pos:end="71:20">()</argument_list></call></expr>;</expr_stmt>

	<switch pos:start="73:9" pos:end="233:9">switch<condition pos:start="73:15" pos:end="73:19">(<expr pos:start="73:16" pos:end="73:18"><name pos:start="73:16" pos:end="73:18">pid</name></expr>)</condition> <block pos:start="73:21" pos:end="233:9">{<block_content pos:start="75:10" pos:end="231:25">

	 <case pos:start="75:10" pos:end="75:17">case <expr pos:start="75:15" pos:end="75:16"><operator pos:start="75:15" pos:end="75:15">-</operator><literal type="number" pos:start="75:16" pos:end="75:16">1</literal></expr>:</case>

		<expr_stmt pos:start="77:17" pos:end="77:72"><expr pos:start="77:17" pos:end="77:71"><call pos:start="77:17" pos:end="77:71"><name pos:start="77:17" pos:end="77:28">error_report</name><argument_list pos:start="77:29" pos:end="77:71">(<argument pos:start="77:30" pos:end="77:53"><expr pos:start="77:30" pos:end="77:53"><literal type="string" pos:start="77:30" pos:end="77:53">"Error: fork failed: %s"</literal></expr></argument>, <argument pos:start="77:56" pos:end="77:70"><expr pos:start="77:56" pos:end="77:70"><call pos:start="77:56" pos:end="77:70"><name pos:start="77:56" pos:end="77:63">strerror</name><argument_list pos:start="77:64" pos:end="77:70">(<argument pos:start="77:65" pos:end="77:69"><expr pos:start="77:65" pos:end="77:69"><name pos:start="77:65" pos:end="77:69">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="79:17" pos:end="79:25"><expr pos:start="79:17" pos:end="79:24"><call pos:start="79:17" pos:end="79:24"><name pos:start="79:17" pos:end="79:21">close</name><argument_list pos:start="79:22" pos:end="79:24">(<argument pos:start="79:23" pos:end="79:23"><expr pos:start="79:23" pos:end="79:23"><name pos:start="79:23" pos:end="79:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="81:17" pos:end="81:25">return <expr pos:start="81:24" pos:end="81:24"><literal type="number" pos:start="81:24" pos:end="81:24">0</literal></expr>;</return>



	 <case pos:start="85:10" pos:end="85:16">case <expr pos:start="85:15" pos:end="85:15"><literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>:</case>

                <expr_stmt pos:start="87:17" pos:end="87:25"><expr pos:start="87:17" pos:end="87:24"><call pos:start="87:17" pos:end="87:24"><name pos:start="87:17" pos:end="87:22">setsid</name><argument_list pos:start="87:23" pos:end="87:24">()</argument_list></call></expr>;</expr_stmt>



		<comment type="block" pos:start="91:17" pos:end="91:37">/* Set the DISPLAY */</comment>

                <expr_stmt pos:start="93:17" pos:end="93:67"><expr pos:start="93:17" pos:end="93:66"><call pos:start="93:17" pos:end="93:66"><name pos:start="93:17" pos:end="93:27">getsockname</name><argument_list pos:start="93:28" pos:end="93:66">(<argument pos:start="93:29" pos:end="93:29"><expr pos:start="93:29" pos:end="93:29"><name pos:start="93:29" pos:end="93:29">s</name></expr></argument>, <argument pos:start="93:32" pos:end="93:55"><expr pos:start="93:32" pos:end="93:55"><operator pos:start="93:32" pos:end="93:32">(</operator>struct <name pos:start="93:40" pos:end="93:47">sockaddr</name> <operator pos:start="93:49" pos:end="93:49">*</operator><operator pos:start="93:50" pos:end="93:50">)</operator><operator pos:start="93:51" pos:end="93:51">&amp;</operator><name pos:start="93:52" pos:end="93:55">addr</name></expr></argument>, <argument pos:start="93:58" pos:end="93:65"><expr pos:start="93:58" pos:end="93:65"><operator pos:start="93:58" pos:end="93:58">&amp;</operator><name pos:start="93:59" pos:end="93:65">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="95:17" pos:end="95:25"><expr pos:start="95:17" pos:end="95:24"><call pos:start="95:17" pos:end="95:24"><name pos:start="95:17" pos:end="95:21">close</name><argument_list pos:start="95:22" pos:end="95:24">(<argument pos:start="95:23" pos:end="95:23"><expr pos:start="95:23" pos:end="95:23"><name pos:start="95:23" pos:end="95:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="97:17" pos:end="103:19">/*

                 * Connect to the socket

                 * XXX If any of these fail, we're in trouble!

                 */</comment>

                <expr_stmt pos:start="105:17" pos:end="105:57"><expr pos:start="105:17" pos:end="105:56"><name pos:start="105:17" pos:end="105:17">s</name> <operator pos:start="105:19" pos:end="105:19">=</operator> <call pos:start="105:21" pos:end="105:56"><name pos:start="105:21" pos:end="105:31">qemu_socket</name><argument_list pos:start="105:32" pos:end="105:56">(<argument pos:start="105:33" pos:end="105:39"><expr pos:start="105:33" pos:end="105:39"><name pos:start="105:33" pos:end="105:39">AF_INET</name></expr></argument>, <argument pos:start="105:42" pos:end="105:52"><expr pos:start="105:42" pos:end="105:52"><name pos:start="105:42" pos:end="105:52">SOCK_STREAM</name></expr></argument>, <argument pos:start="105:55" pos:end="105:55"><expr pos:start="105:55" pos:end="105:55"><literal type="number" pos:start="105:55" pos:end="105:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:46"><expr pos:start="107:17" pos:end="107:45"><name pos:start="107:17" pos:end="107:29"><name pos:start="107:17" pos:end="107:20">addr</name><operator pos:start="107:21" pos:end="107:21">.</operator><name pos:start="107:22" pos:end="107:29">sin_addr</name></name> <operator pos:start="107:31" pos:end="107:31">=</operator> <name pos:start="107:33" pos:end="107:45">loopback_addr</name></expr>;</expr_stmt>

                <do pos:start="109:17" pos:end="113:52">do <block pos:start="109:20" pos:end="113:17">{<block_content pos:start="111:21" pos:end="111:72">

                    <expr_stmt pos:start="111:21" pos:end="111:72"><expr pos:start="111:21" pos:end="111:71"><name pos:start="111:21" pos:end="111:23">ret</name> <operator pos:start="111:25" pos:end="111:25">=</operator> <call pos:start="111:27" pos:end="111:71"><name pos:start="111:27" pos:end="111:33">connect</name><argument_list pos:start="111:34" pos:end="111:71">(<argument pos:start="111:35" pos:end="111:35"><expr pos:start="111:35" pos:end="111:35"><name pos:start="111:35" pos:end="111:35">s</name></expr></argument>, <argument pos:start="111:38" pos:end="111:61"><expr pos:start="111:38" pos:end="111:61"><operator pos:start="111:38" pos:end="111:38">(</operator>struct <name pos:start="111:46" pos:end="111:53">sockaddr</name> <operator pos:start="111:55" pos:end="111:55">*</operator><operator pos:start="111:56" pos:end="111:56">)</operator><operator pos:start="111:57" pos:end="111:57">&amp;</operator><name pos:start="111:58" pos:end="111:61">addr</name></expr></argument>, <argument pos:start="111:64" pos:end="111:70"><expr pos:start="111:64" pos:end="111:70"><name pos:start="111:64" pos:end="111:70">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block> while <condition pos:start="113:25" pos:end="113:51">(<expr pos:start="113:26" pos:end="113:50"><name pos:start="113:26" pos:end="113:28">ret</name> <operator pos:start="113:30" pos:end="113:30">&lt;</operator> <literal type="number" pos:start="113:32" pos:end="113:32">0</literal> <operator pos:start="113:34" pos:end="113:35">&amp;&amp;</operator> <name pos:start="113:37" pos:end="113:41">errno</name> <operator pos:start="113:43" pos:end="113:44">==</operator> <name pos:start="113:46" pos:end="113:50">EINTR</name></expr>)</condition>;</do>



		<expr_stmt pos:start="117:17" pos:end="117:27"><expr pos:start="117:17" pos:end="117:26"><call pos:start="117:17" pos:end="117:26"><name pos:start="117:17" pos:end="117:20">dup2</name><argument_list pos:start="117:21" pos:end="117:26">(<argument pos:start="117:22" pos:end="117:22"><expr pos:start="117:22" pos:end="117:22"><name pos:start="117:22" pos:end="117:22">s</name></expr></argument>, <argument pos:start="117:25" pos:end="117:25"><expr pos:start="117:25" pos:end="117:25"><literal type="number" pos:start="117:25" pos:end="117:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="119:17" pos:end="119:27"><expr pos:start="119:17" pos:end="119:26"><call pos:start="119:17" pos:end="119:26"><name pos:start="119:17" pos:end="119:20">dup2</name><argument_list pos:start="119:21" pos:end="119:26">(<argument pos:start="119:22" pos:end="119:22"><expr pos:start="119:22" pos:end="119:22"><name pos:start="119:22" pos:end="119:22">s</name></expr></argument>, <argument pos:start="119:25" pos:end="119:25"><expr pos:start="119:25" pos:end="119:25"><literal type="number" pos:start="119:25" pos:end="119:25">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="121:17" pos:end="121:27"><expr pos:start="121:17" pos:end="121:26"><call pos:start="121:17" pos:end="121:26"><name pos:start="121:17" pos:end="121:20">dup2</name><argument_list pos:start="121:21" pos:end="121:26">(<argument pos:start="121:22" pos:end="121:22"><expr pos:start="121:22" pos:end="121:22"><name pos:start="121:22" pos:end="121:22">s</name></expr></argument>, <argument pos:start="121:25" pos:end="121:25"><expr pos:start="121:25" pos:end="121:25"><literal type="number" pos:start="121:25" pos:end="121:25">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for pos:start="123:17" pos:end="125:28">for <control pos:start="123:21" pos:end="123:58">(<init pos:start="123:22" pos:end="123:45"><expr pos:start="123:22" pos:end="123:44"><name pos:start="123:22" pos:end="123:22">s</name> <operator pos:start="123:24" pos:end="123:24">=</operator> <call pos:start="123:26" pos:end="123:40"><name pos:start="123:26" pos:end="123:38">getdtablesize</name><argument_list pos:start="123:39" pos:end="123:40">()</argument_list></call> <operator pos:start="123:42" pos:end="123:42">-</operator> <literal type="number" pos:start="123:44" pos:end="123:44">1</literal></expr>;</init> <condition pos:start="123:47" pos:end="123:53"><expr pos:start="123:47" pos:end="123:52"><name pos:start="123:47" pos:end="123:47">s</name> <operator pos:start="123:49" pos:end="123:50">&gt;=</operator> <literal type="number" pos:start="123:52" pos:end="123:52">3</literal></expr>;</condition> <incr pos:start="123:55" pos:end="123:57"><expr pos:start="123:55" pos:end="123:57"><name pos:start="123:55" pos:end="123:55">s</name><operator pos:start="123:56" pos:end="123:57">--</operator></expr></incr>)</control><block type="pseudo" pos:start="125:20" pos:end="125:28"><block_content pos:start="125:20" pos:end="125:28">

		   <expr_stmt pos:start="125:20" pos:end="125:28"><expr pos:start="125:20" pos:end="125:27"><call pos:start="125:20" pos:end="125:27"><name pos:start="125:20" pos:end="125:24">close</name><argument_list pos:start="125:25" pos:end="125:27">(<argument pos:start="125:26" pos:end="125:26"><expr pos:start="125:26" pos:end="125:26"><name pos:start="125:26" pos:end="125:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



		<expr_stmt pos:start="129:17" pos:end="129:22"><expr pos:start="129:17" pos:end="129:21"><name pos:start="129:17" pos:end="129:17">i</name> <operator pos:start="129:19" pos:end="129:19">=</operator> <literal type="number" pos:start="129:21" pos:end="129:21">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="131:17" pos:end="131:36"><expr pos:start="131:17" pos:end="131:35"><name pos:start="131:17" pos:end="131:20">bptr</name> <operator pos:start="131:22" pos:end="131:22">=</operator> <call pos:start="131:24" pos:end="131:35"><name pos:start="131:24" pos:end="131:31">g_strdup</name><argument_list pos:start="131:32" pos:end="131:35">(<argument pos:start="131:33" pos:end="131:34"><expr pos:start="131:33" pos:end="131:34"><name pos:start="131:33" pos:end="131:34">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="131:38" pos:end="131:65">/* No need to free() this */</comment>

		<if_stmt pos:start="133:17" pos:end="161:31"><if pos:start="133:17" pos:end="143:17">if <condition pos:start="133:20" pos:end="133:32">(<expr pos:start="133:21" pos:end="133:31"><name pos:start="133:21" pos:end="133:26">do_pty</name> <operator pos:start="133:28" pos:end="133:29">==</operator> <literal type="number" pos:start="133:31" pos:end="133:31">1</literal></expr>)</condition> <block pos:start="133:34" pos:end="143:17">{<block_content pos:start="137:25" pos:end="141:41">

			<comment type="block" pos:start="135:25" pos:end="135:54">/* Setup "slirp.telnetd -x" */</comment>

			<expr_stmt pos:start="137:25" pos:end="137:52"><expr pos:start="137:25" pos:end="137:51"><name pos:start="137:25" pos:end="137:33"><name pos:start="137:25" pos:end="137:28">argv</name><index pos:start="137:29" pos:end="137:33">[<expr pos:start="137:30" pos:end="137:32"><name pos:start="137:30" pos:end="137:30">i</name><operator pos:start="137:31" pos:end="137:32">++</operator></expr>]</index></name> <operator pos:start="137:35" pos:end="137:35">=</operator> <literal type="string" pos:start="137:37" pos:end="137:51">"slirp.telnetd"</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="139:25" pos:end="139:41"><expr pos:start="139:25" pos:end="139:40"><name pos:start="139:25" pos:end="139:33"><name pos:start="139:25" pos:end="139:28">argv</name><index pos:start="139:29" pos:end="139:33">[<expr pos:start="139:30" pos:end="139:32"><name pos:start="139:30" pos:end="139:30">i</name><operator pos:start="139:31" pos:end="139:32">++</operator></expr>]</index></name> <operator pos:start="139:35" pos:end="139:35">=</operator> <literal type="string" pos:start="139:37" pos:end="139:40">"-x"</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="141:25" pos:end="141:41"><expr pos:start="141:25" pos:end="141:40"><name pos:start="141:25" pos:end="141:33"><name pos:start="141:25" pos:end="141:28">argv</name><index pos:start="141:29" pos:end="141:33">[<expr pos:start="141:30" pos:end="141:32"><name pos:start="141:30" pos:end="141:30">i</name><operator pos:start="141:31" pos:end="141:32">++</operator></expr>]</index></name> <operator pos:start="141:35" pos:end="141:35">=</operator> <name pos:start="141:37" pos:end="141:40">bptr</name></expr>;</expr_stmt>

		</block_content>}</block></if> <else pos:start="143:19" pos:end="161:31">else<block type="pseudo" pos:start="145:20" pos:end="161:31"><block_content pos:start="145:20" pos:end="161:31">

		   <do pos:start="145:20" pos:end="161:31">do <block pos:start="145:23" pos:end="161:20">{<block_content pos:start="149:25" pos:end="159:53">

			<comment type="block" pos:start="147:25" pos:end="147:59">/* Change the string into argv[] */</comment>

			<expr_stmt pos:start="149:25" pos:end="149:38"><expr pos:start="149:25" pos:end="149:37"><name pos:start="149:25" pos:end="149:30">curarg</name> <operator pos:start="149:32" pos:end="149:32">=</operator> <name pos:start="149:34" pos:end="149:37">bptr</name></expr>;</expr_stmt>

			<while pos:start="151:25" pos:end="153:34">while <condition pos:start="151:31" pos:end="151:64">(<expr pos:start="151:32" pos:end="151:63"><operator pos:start="151:32" pos:end="151:32">*</operator><name pos:start="151:33" pos:end="151:36">bptr</name> <operator pos:start="151:38" pos:end="151:39">!=</operator> <literal type="char" pos:start="151:41" pos:end="151:43">' '</literal> <operator pos:start="151:45" pos:end="151:46">&amp;&amp;</operator> <operator pos:start="151:48" pos:end="151:48">*</operator><name pos:start="151:49" pos:end="151:52">bptr</name> <operator pos:start="151:54" pos:end="151:55">!=</operator> <operator pos:start="151:57" pos:end="151:57">(</operator><name pos:start="151:58" pos:end="151:61">char</name><operator pos:start="151:62" pos:end="151:62">)</operator><literal type="number" pos:start="151:63" pos:end="151:63">0</literal></expr>)</condition><block type="pseudo" pos:start="153:28" pos:end="153:34"><block_content pos:start="153:28" pos:end="153:34">

			   <expr_stmt pos:start="153:28" pos:end="153:34"><expr pos:start="153:28" pos:end="153:33"><name pos:start="153:28" pos:end="153:31">bptr</name><operator pos:start="153:32" pos:end="153:33">++</operator></expr>;</expr_stmt></block_content></block></while>

			<expr_stmt pos:start="155:25" pos:end="155:34"><expr pos:start="155:25" pos:end="155:33"><name pos:start="155:25" pos:end="155:25">c</name> <operator pos:start="155:27" pos:end="155:27">=</operator> <operator pos:start="155:29" pos:end="155:29">*</operator><name pos:start="155:30" pos:end="155:33">bptr</name></expr>;</expr_stmt>

			<expr_stmt pos:start="157:25" pos:end="157:42"><expr pos:start="157:25" pos:end="157:41"><operator pos:start="157:25" pos:end="157:25">*</operator><name pos:start="157:26" pos:end="157:29">bptr</name><operator pos:start="157:30" pos:end="157:31">++</operator> <operator pos:start="157:33" pos:end="157:33">=</operator> <operator pos:start="157:35" pos:end="157:35">(</operator><name pos:start="157:36" pos:end="157:39">char</name><operator pos:start="157:40" pos:end="157:40">)</operator><literal type="number" pos:start="157:41" pos:end="157:41">0</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="159:25" pos:end="159:53"><expr pos:start="159:25" pos:end="159:52"><name pos:start="159:25" pos:end="159:33"><name pos:start="159:25" pos:end="159:28">argv</name><index pos:start="159:29" pos:end="159:33">[<expr pos:start="159:30" pos:end="159:32"><name pos:start="159:30" pos:end="159:30">i</name><operator pos:start="159:31" pos:end="159:32">++</operator></expr>]</index></name> <operator pos:start="159:35" pos:end="159:35">=</operator> <call pos:start="159:37" pos:end="159:52"><name pos:start="159:37" pos:end="159:44">g_strdup</name><argument_list pos:start="159:45" pos:end="159:52">(<argument pos:start="159:46" pos:end="159:51"><expr pos:start="159:46" pos:end="159:51"><name pos:start="159:46" pos:end="159:51">curarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		   </block_content>}</block> while <condition pos:start="161:28" pos:end="161:30">(<expr pos:start="161:29" pos:end="161:29"><name pos:start="161:29" pos:end="161:29">c</name></expr>)</condition>;</do></block_content></block></else></if_stmt>



                <expr_stmt pos:start="165:17" pos:end="165:31"><expr pos:start="165:17" pos:end="165:30"><name pos:start="165:17" pos:end="165:23"><name pos:start="165:17" pos:end="165:20">argv</name><index pos:start="165:21" pos:end="165:23">[<expr pos:start="165:22" pos:end="165:22"><name pos:start="165:22" pos:end="165:22">i</name></expr>]</index></name> <operator pos:start="165:25" pos:end="165:25">=</operator> <name pos:start="165:27" pos:end="165:30">NULL</name></expr>;</expr_stmt>

		<expr_stmt pos:start="167:17" pos:end="167:47"><expr pos:start="167:17" pos:end="167:46"><call pos:start="167:17" pos:end="167:46"><name pos:start="167:17" pos:end="167:22">execvp</name><argument_list pos:start="167:23" pos:end="167:46">(<argument pos:start="167:24" pos:end="167:30"><expr pos:start="167:24" pos:end="167:30"><name pos:start="167:24" pos:end="167:30"><name pos:start="167:24" pos:end="167:27">argv</name><index pos:start="167:28" pos:end="167:30">[<expr pos:start="167:29" pos:end="167:29"><literal type="number" pos:start="167:29" pos:end="167:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="167:33" pos:end="167:45"><expr pos:start="167:33" pos:end="167:45"><operator pos:start="167:33" pos:end="167:33">(</operator><name pos:start="167:34" pos:end="167:37">char</name> <operator pos:start="167:39" pos:end="167:39">*</operator><operator pos:start="167:40" pos:end="167:40">*</operator><operator pos:start="167:41" pos:end="167:41">)</operator><name pos:start="167:42" pos:end="167:45">argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



		<comment type="block" pos:start="171:17" pos:end="171:60">/* Ooops, failed, let's tell the user why */</comment>

        <expr_stmt pos:start="173:9" pos:end="175:42"><expr pos:start="173:9" pos:end="175:41"><call pos:start="173:9" pos:end="175:41"><name pos:start="173:9" pos:end="173:15">fprintf</name><argument_list pos:start="173:16" pos:end="175:41">(<argument pos:start="173:17" pos:end="173:22"><expr pos:start="173:17" pos:end="173:22"><name pos:start="173:17" pos:end="173:22">stderr</name></expr></argument>, <argument pos:start="173:25" pos:end="173:58"><expr pos:start="173:25" pos:end="173:58"><literal type="string" pos:start="173:25" pos:end="173:58">"Error: execvp of %s failed: %s\n"</literal></expr></argument>,

                <argument pos:start="175:17" pos:end="175:23"><expr pos:start="175:17" pos:end="175:23"><name pos:start="175:17" pos:end="175:23"><name pos:start="175:17" pos:end="175:20">argv</name><index pos:start="175:21" pos:end="175:23">[<expr pos:start="175:22" pos:end="175:22"><literal type="number" pos:start="175:22" pos:end="175:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="175:26" pos:end="175:40"><expr pos:start="175:26" pos:end="175:40"><call pos:start="175:26" pos:end="175:40"><name pos:start="175:26" pos:end="175:33">strerror</name><argument_list pos:start="175:34" pos:end="175:40">(<argument pos:start="175:35" pos:end="175:39"><expr pos:start="175:35" pos:end="175:39"><name pos:start="175:35" pos:end="175:39">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="177:17" pos:end="177:25"><expr pos:start="177:17" pos:end="177:24"><call pos:start="177:17" pos:end="177:24"><name pos:start="177:17" pos:end="177:21">close</name><argument_list pos:start="177:22" pos:end="177:24">(<argument pos:start="177:23" pos:end="177:23"><expr pos:start="177:23" pos:end="177:23"><literal type="number" pos:start="177:23" pos:end="177:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="177:27" pos:end="177:35"><expr pos:start="177:27" pos:end="177:34"><call pos:start="177:27" pos:end="177:34"><name pos:start="177:27" pos:end="177:31">close</name><argument_list pos:start="177:32" pos:end="177:34">(<argument pos:start="177:33" pos:end="177:33"><expr pos:start="177:33" pos:end="177:33"><literal type="number" pos:start="177:33" pos:end="177:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="177:37" pos:end="177:45"><expr pos:start="177:37" pos:end="177:44"><call pos:start="177:37" pos:end="177:44"><name pos:start="177:37" pos:end="177:41">close</name><argument_list pos:start="177:42" pos:end="177:44">(<argument pos:start="177:43" pos:end="177:43"><expr pos:start="177:43" pos:end="177:43"><literal type="number" pos:start="177:43" pos:end="177:43">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="177:47" pos:end="177:55">/* XXX */</comment>

		<expr_stmt pos:start="179:17" pos:end="179:24"><expr pos:start="179:17" pos:end="179:23"><call pos:start="179:17" pos:end="179:23"><name pos:start="179:17" pos:end="179:20">exit</name><argument_list pos:start="179:21" pos:end="179:23">(<argument pos:start="179:22" pos:end="179:22"><expr pos:start="179:22" pos:end="179:22"><literal type="number" pos:start="179:22" pos:end="179:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	 <default pos:start="183:10" pos:end="183:17">default:</default>

		<expr_stmt pos:start="185:17" pos:end="185:42"><expr pos:start="185:17" pos:end="185:41"><call pos:start="185:17" pos:end="185:41"><name pos:start="185:17" pos:end="185:36">qemu_add_child_watch</name><argument_list pos:start="185:37" pos:end="185:41">(<argument pos:start="185:38" pos:end="185:40"><expr pos:start="185:38" pos:end="185:40"><name pos:start="185:38" pos:end="185:40">pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="187:17" pos:end="199:19">/*

                 * XXX this could block us...

                 * XXX Should set a timer here, and if accept() doesn't

                 * return after X seconds, declare it a failure

                 * The only reason this will block forever is if socket()

                 * of connect() fail in the child process

                 */</comment>

                <do pos:start="201:17" pos:end="205:54">do <block pos:start="201:20" pos:end="205:17">{<block_content pos:start="203:21" pos:end="203:74">

                    <expr_stmt pos:start="203:21" pos:end="203:74"><expr pos:start="203:21" pos:end="203:73"><name pos:start="203:21" pos:end="203:25"><name pos:start="203:21" pos:end="203:22">so</name><operator pos:start="203:23" pos:end="203:24">-&gt;</operator><name pos:start="203:25" pos:end="203:25">s</name></name> <operator pos:start="203:27" pos:end="203:27">=</operator> <call pos:start="203:29" pos:end="203:73"><name pos:start="203:29" pos:end="203:34">accept</name><argument_list pos:start="203:35" pos:end="203:73">(<argument pos:start="203:36" pos:end="203:36"><expr pos:start="203:36" pos:end="203:36"><name pos:start="203:36" pos:end="203:36">s</name></expr></argument>, <argument pos:start="203:39" pos:end="203:62"><expr pos:start="203:39" pos:end="203:62"><operator pos:start="203:39" pos:end="203:39">(</operator>struct <name pos:start="203:47" pos:end="203:54">sockaddr</name> <operator pos:start="203:56" pos:end="203:56">*</operator><operator pos:start="203:57" pos:end="203:57">)</operator><operator pos:start="203:58" pos:end="203:58">&amp;</operator><name pos:start="203:59" pos:end="203:62">addr</name></expr></argument>, <argument pos:start="203:65" pos:end="203:72"><expr pos:start="203:65" pos:end="203:72"><operator pos:start="203:65" pos:end="203:65">&amp;</operator><name pos:start="203:66" pos:end="203:72">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block> while <condition pos:start="205:25" pos:end="205:53">(<expr pos:start="205:26" pos:end="205:52"><name pos:start="205:26" pos:end="205:30"><name pos:start="205:26" pos:end="205:27">so</name><operator pos:start="205:28" pos:end="205:29">-&gt;</operator><name pos:start="205:30" pos:end="205:30">s</name></name> <operator pos:start="205:32" pos:end="205:32">&lt;</operator> <literal type="number" pos:start="205:34" pos:end="205:34">0</literal> <operator pos:start="205:36" pos:end="205:37">&amp;&amp;</operator> <name pos:start="205:39" pos:end="205:43">errno</name> <operator pos:start="205:45" pos:end="205:46">==</operator> <name pos:start="205:48" pos:end="205:52">EINTR</name></expr>)</condition>;</do>

                <expr_stmt pos:start="207:17" pos:end="207:31"><expr pos:start="207:17" pos:end="207:30"><call pos:start="207:17" pos:end="207:30"><name pos:start="207:17" pos:end="207:27">closesocket</name><argument_list pos:start="207:28" pos:end="207:30">(<argument pos:start="207:29" pos:end="207:29"><expr pos:start="207:29" pos:end="207:29"><name pos:start="207:29" pos:end="207:29">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="209:17" pos:end="209:45"><expr pos:start="209:17" pos:end="209:44"><call pos:start="209:17" pos:end="209:44"><name pos:start="209:17" pos:end="209:37">socket_set_fast_reuse</name><argument_list pos:start="209:38" pos:end="209:44">(<argument pos:start="209:39" pos:end="209:43"><expr pos:start="209:39" pos:end="209:43"><name pos:start="209:39" pos:end="209:43"><name pos:start="209:39" pos:end="209:40">so</name><operator pos:start="209:41" pos:end="209:42">-&gt;</operator><name pos:start="209:43" pos:end="209:43">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:24"><expr pos:start="211:17" pos:end="211:23"><name pos:start="211:17" pos:end="211:19">opt</name> <operator pos:start="211:21" pos:end="211:21">=</operator> <literal type="number" pos:start="211:23" pos:end="211:23">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:84"><expr pos:start="213:17" pos:end="213:83"><call pos:start="213:17" pos:end="213:83"><name pos:start="213:17" pos:end="213:31">qemu_setsockopt</name><argument_list pos:start="213:32" pos:end="213:83">(<argument pos:start="213:33" pos:end="213:37"><expr pos:start="213:33" pos:end="213:37"><name pos:start="213:33" pos:end="213:37"><name pos:start="213:33" pos:end="213:34">so</name><operator pos:start="213:35" pos:end="213:36">-&gt;</operator><name pos:start="213:37" pos:end="213:37">s</name></name></expr></argument>, <argument pos:start="213:40" pos:end="213:49"><expr pos:start="213:40" pos:end="213:49"><name pos:start="213:40" pos:end="213:49">SOL_SOCKET</name></expr></argument>, <argument pos:start="213:52" pos:end="213:63"><expr pos:start="213:52" pos:end="213:63"><name pos:start="213:52" pos:end="213:63">SO_OOBINLINE</name></expr></argument>, <argument pos:start="213:66" pos:end="213:69"><expr pos:start="213:66" pos:end="213:69"><operator pos:start="213:66" pos:end="213:66">&amp;</operator><name pos:start="213:67" pos:end="213:69">opt</name></expr></argument>, <argument pos:start="213:72" pos:end="213:82"><expr pos:start="213:72" pos:end="213:82"><sizeof pos:start="213:72" pos:end="213:82">sizeof<argument_list pos:start="213:78" pos:end="213:82">(<argument pos:start="213:79" pos:end="213:81"><expr pos:start="213:79" pos:end="213:81"><name pos:start="213:79" pos:end="213:81">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="215:17" pos:end="215:41"><expr pos:start="215:17" pos:end="215:40"><call pos:start="215:17" pos:end="215:40"><name pos:start="215:17" pos:end="215:33">qemu_set_nonblock</name><argument_list pos:start="215:34" pos:end="215:40">(<argument pos:start="215:35" pos:end="215:39"><expr pos:start="215:35" pos:end="215:39"><name pos:start="215:35" pos:end="215:39"><name pos:start="215:35" pos:end="215:36">so</name><operator pos:start="215:37" pos:end="215:38">-&gt;</operator><name pos:start="215:39" pos:end="215:39">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



		<comment type="block" pos:start="219:17" pos:end="219:51">/* Append the telnet options now */</comment>

                <if_stmt pos:start="221:17" pos:end="227:17"><if pos:start="221:17" pos:end="227:17">if <condition pos:start="221:20" pos:end="221:52">(<expr pos:start="221:21" pos:end="221:51"><name pos:start="221:21" pos:end="221:28"><name pos:start="221:21" pos:end="221:22">so</name><operator pos:start="221:23" pos:end="221:24">-&gt;</operator><name pos:start="221:25" pos:end="221:28">so_m</name></name> <operator pos:start="221:30" pos:end="221:31">!=</operator> <name pos:start="221:33" pos:end="221:36">NULL</name> <operator pos:start="221:38" pos:end="221:39">&amp;&amp;</operator> <name pos:start="221:41" pos:end="221:46">do_pty</name> <operator pos:start="221:48" pos:end="221:49">==</operator> <literal type="number" pos:start="221:51" pos:end="221:51">1</literal></expr>)</condition>  <block pos:start="221:55" pos:end="227:17">{<block_content pos:start="223:25" pos:end="225:40">

			<expr_stmt pos:start="223:25" pos:end="223:47"><expr pos:start="223:25" pos:end="223:46"><call pos:start="223:25" pos:end="223:46"><name pos:start="223:25" pos:end="223:32">sbappend</name><argument_list pos:start="223:33" pos:end="223:46">(<argument pos:start="223:34" pos:end="223:35"><expr pos:start="223:34" pos:end="223:35"><name pos:start="223:34" pos:end="223:35">so</name></expr></argument>, <argument pos:start="223:38" pos:end="223:45"><expr pos:start="223:38" pos:end="223:45"><name pos:start="223:38" pos:end="223:45"><name pos:start="223:38" pos:end="223:39">so</name><operator pos:start="223:40" pos:end="223:41">-&gt;</operator><name pos:start="223:42" pos:end="223:45">so_m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="225:25" pos:end="225:40"><expr pos:start="225:25" pos:end="225:39"><name pos:start="225:25" pos:end="225:32"><name pos:start="225:25" pos:end="225:26">so</name><operator pos:start="225:27" pos:end="225:28">-&gt;</operator><name pos:start="225:29" pos:end="225:32">so_m</name></name> <operator pos:start="225:34" pos:end="225:34">=</operator> <name pos:start="225:36" pos:end="225:39">NULL</name></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>



		<return pos:start="231:17" pos:end="231:25">return <expr pos:start="231:24" pos:end="231:24"><literal type="number" pos:start="231:24" pos:end="231:24">1</literal></expr>;</return>

	</block_content>}</block></switch>

</block_content>}</block>
</unit>
