<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12612.c" pos:tabs="8"><function pos:start="1:1" pos:end="289:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">decode_init</name><parameter_list pos:start="1:23" pos:end="1:45">(<parameter pos:start="1:24" pos:end="1:44"><decl pos:start="1:24" pos:end="1:44"><type pos:start="1:24" pos:end="1:39"><name pos:start="1:24" pos:end="1:37">AVCodecContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:44">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="289:1">{<block_content pos:start="5:5" pos:end="287:13">

    <decl_stmt pos:start="5:5" pos:end="5:58"><decl pos:start="5:5" pos:end="5:57"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:14">LclContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier> <specifier pos:start="5:18" pos:end="5:22">const</specifier></type> <name pos:start="5:24" pos:end="5:24">c</name> <init pos:start="5:26" pos:end="5:57">= <expr pos:start="5:28" pos:end="5:57"><operator pos:start="5:28" pos:end="5:28">(</operator><name pos:start="5:29" pos:end="5:38">LclContext</name> <operator pos:start="5:40" pos:end="5:40">*</operator><operator pos:start="5:41" pos:end="5:41">)</operator><name pos:start="5:42" pos:end="5:57"><name pos:start="5:42" pos:end="5:46">avctx</name><operator pos:start="5:47" pos:end="5:48">-&gt;</operator><name pos:start="5:49" pos:end="5:57">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:16">basesize</name> <init pos:start="7:18" pos:end="7:47">= <expr pos:start="7:20" pos:end="7:47"><name pos:start="7:20" pos:end="7:31"><name pos:start="7:20" pos:end="7:24">avctx</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:31">width</name></name> <operator pos:start="7:33" pos:end="7:33">*</operator> <name pos:start="7:35" pos:end="7:47"><name pos:start="7:35" pos:end="7:39">avctx</name><operator pos:start="7:40" pos:end="7:41">-&gt;</operator><name pos:start="7:42" pos:end="7:47">height</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">zret</name></decl>;</decl_stmt> <comment type="line" pos:start="9:15" pos:end="9:33">// Zlib return code</comment>



    <expr_stmt pos:start="13:5" pos:end="13:21"><expr pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:5">c</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:12">avctx</name></name> <operator pos:start="13:14" pos:end="13:14">=</operator> <name pos:start="13:16" pos:end="13:20">avctx</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:28"><expr pos:start="15:5" pos:end="15:27"><name pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:9">avctx</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:23">has_b_frames</name></name> <operator pos:start="15:25" pos:end="15:25">=</operator> <literal type="number" pos:start="15:27" pos:end="15:27">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="24:0"><expr pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:5">c</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:10">pic</name><operator pos:start="19:11" pos:end="19:11">.</operator><name pos:start="19:12" pos:end="19:15">data</name><index pos:start="19:16" pos:end="19:18">[<expr pos:start="19:17" pos:end="19:17"><literal type="number" pos:start="19:17" pos:end="19:17">0</literal></expr>]</index></name> <operator pos:start="19:20" pos:end="19:20">=</operator> <name pos:start="19:22" pos:end="19:25">NULL</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="23:1" pos:end="23:18">#<cpp:directive pos:start="23:2" pos:end="23:6">ifdef</cpp:directive> <name pos:start="23:8" pos:end="23:18">CONFIG_ZLIB</name></cpp:ifdef>

    <comment type="line" pos:start="25:5" pos:end="25:63">// Needed if zlib unused or init aborted before inflateInit</comment>

    <expr_stmt pos:start="27:5" pos:end="30:0"><expr pos:start="27:5" pos:end="27:46"><call pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:10">memset</name><argument_list pos:start="27:11" pos:end="27:46">(<argument pos:start="27:12" pos:end="27:24"><expr pos:start="27:12" pos:end="27:24"><operator pos:start="27:12" pos:end="27:12">&amp;</operator><operator pos:start="27:13" pos:end="27:13">(</operator><name pos:start="27:14" pos:end="27:23"><name pos:start="27:14" pos:end="27:14">c</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:23">zstream</name></name><operator pos:start="27:24" pos:end="27:24">)</operator></expr></argument>, <argument pos:start="27:27" pos:end="27:27"><expr pos:start="27:27" pos:end="27:27"><literal type="number" pos:start="27:27" pos:end="27:27">0</literal></expr></argument>, <argument pos:start="27:30" pos:end="27:45"><expr pos:start="27:30" pos:end="27:45"><sizeof pos:start="27:30" pos:end="27:45">sizeof<argument_list pos:start="27:36" pos:end="27:45">(<argument pos:start="27:37" pos:end="27:44"><expr pos:start="27:37" pos:end="27:44"><name pos:start="27:37" pos:end="27:44">z_stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:34">(<expr pos:start="33:9" pos:end="33:33"><name pos:start="33:9" pos:end="33:29"><name pos:start="33:9" pos:end="33:13">avctx</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:29">extradata_size</name></name> <operator pos:start="33:31" pos:end="33:31">&lt;</operator> <literal type="number" pos:start="33:33" pos:end="33:33">8</literal></expr>)</condition> <block pos:start="33:36" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:17">

        <expr_stmt pos:start="35:9" pos:end="35:67"><expr pos:start="35:9" pos:end="35:66"><call pos:start="35:9" pos:end="35:66"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="35:66">(<argument pos:start="35:16" pos:end="35:20"><expr pos:start="35:16" pos:end="35:20"><name pos:start="35:16" pos:end="35:20">avctx</name></expr></argument>, <argument pos:start="35:23" pos:end="35:34"><expr pos:start="35:23" pos:end="35:34"><name pos:start="35:23" pos:end="35:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:37" pos:end="35:65"><expr pos:start="35:37" pos:end="35:65"><literal type="string" pos:start="35:37" pos:end="35:65">"Extradata size too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:17">return <expr pos:start="37:16" pos:end="37:16"><literal type="number" pos:start="37:16" pos:end="37:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:26">/* Check codec type */</comment> 

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="47:97">(<expr pos:start="45:9" pos:end="47:96"><operator pos:start="45:9" pos:end="45:9">(</operator><operator pos:start="45:10" pos:end="45:10">(</operator><name pos:start="45:11" pos:end="45:25"><name pos:start="45:11" pos:end="45:15">avctx</name><operator pos:start="45:16" pos:end="45:17">-&gt;</operator><name pos:start="45:18" pos:end="45:25">codec_id</name></name> <operator pos:start="45:27" pos:end="45:28">==</operator> <name pos:start="45:30" pos:end="45:42">CODEC_ID_MSZH</name><operator pos:start="45:43" pos:end="45:43">)</operator>  <operator pos:start="45:46" pos:end="45:47">&amp;&amp;</operator> <operator pos:start="45:49" pos:end="45:49">(</operator><operator pos:start="45:50" pos:end="45:50">*</operator><operator pos:start="45:51" pos:end="45:51">(</operator><operator pos:start="45:52" pos:end="45:52">(</operator><name pos:start="45:53" pos:end="45:56">char</name> <operator pos:start="45:58" pos:end="45:58">*</operator><operator pos:start="45:59" pos:end="45:59">)</operator><name pos:start="45:60" pos:end="45:75"><name pos:start="45:60" pos:end="45:64">avctx</name><operator pos:start="45:65" pos:end="45:66">-&gt;</operator><name pos:start="45:67" pos:end="45:75">extradata</name></name> <operator pos:start="45:77" pos:end="45:77">+</operator> <literal type="number" pos:start="45:79" pos:end="45:79">7</literal><operator pos:start="45:80" pos:end="45:80">)</operator> <operator pos:start="45:82" pos:end="45:83">!=</operator> <name pos:start="45:85" pos:end="45:94">CODEC_MSZH</name><operator pos:start="45:95" pos:end="45:95">)</operator><operator pos:start="45:96" pos:end="45:96">)</operator> <operator pos:start="45:98" pos:end="45:99">||</operator>

        <operator pos:start="47:9" pos:end="47:9">(</operator><operator pos:start="47:10" pos:end="47:10">(</operator><name pos:start="47:11" pos:end="47:25"><name pos:start="47:11" pos:end="47:15">avctx</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:25">codec_id</name></name> <operator pos:start="47:27" pos:end="47:28">==</operator> <name pos:start="47:30" pos:end="47:42">CODEC_ID_ZLIB</name><operator pos:start="47:43" pos:end="47:43">)</operator>  <operator pos:start="47:46" pos:end="47:47">&amp;&amp;</operator> <operator pos:start="47:49" pos:end="47:49">(</operator><operator pos:start="47:50" pos:end="47:50">*</operator><operator pos:start="47:51" pos:end="47:51">(</operator><operator pos:start="47:52" pos:end="47:52">(</operator><name pos:start="47:53" pos:end="47:56">char</name> <operator pos:start="47:58" pos:end="47:58">*</operator><operator pos:start="47:59" pos:end="47:59">)</operator><name pos:start="47:60" pos:end="47:75"><name pos:start="47:60" pos:end="47:64">avctx</name><operator pos:start="47:65" pos:end="47:66">-&gt;</operator><name pos:start="47:67" pos:end="47:75">extradata</name></name> <operator pos:start="47:77" pos:end="47:77">+</operator> <literal type="number" pos:start="47:79" pos:end="47:79">7</literal><operator pos:start="47:80" pos:end="47:80">)</operator> <operator pos:start="47:82" pos:end="47:83">!=</operator> <name pos:start="47:85" pos:end="47:94">CODEC_ZLIB</name><operator pos:start="47:95" pos:end="47:95">)</operator><operator pos:start="47:96" pos:end="47:96">)</operator></expr>)</condition> <block pos:start="47:99" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:99">

        <expr_stmt pos:start="49:9" pos:end="49:99"><expr pos:start="49:9" pos:end="49:98"><call pos:start="49:9" pos:end="49:98"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:98">(<argument pos:start="49:16" pos:end="49:20"><expr pos:start="49:16" pos:end="49:20"><name pos:start="49:16" pos:end="49:20">avctx</name></expr></argument>, <argument pos:start="49:23" pos:end="49:34"><expr pos:start="49:23" pos:end="49:34"><name pos:start="49:23" pos:end="49:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:37" pos:end="49:97"><expr pos:start="49:37" pos:end="49:97"><literal type="string" pos:start="49:37" pos:end="49:97">"Codec id and codec type mismatch. This should not happen.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:27">/* Detect image type */</comment>

    <switch pos:start="57:5" pos:end="113:5">switch <condition pos:start="57:12" pos:end="57:57">(<expr pos:start="57:13" pos:end="57:56"><name pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:13">c</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:22">imgtype</name></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <operator pos:start="57:26" pos:end="57:26">*</operator><operator pos:start="57:27" pos:end="57:27">(</operator><operator pos:start="57:28" pos:end="57:28">(</operator><name pos:start="57:29" pos:end="57:32">char</name> <operator pos:start="57:34" pos:end="57:34">*</operator><operator pos:start="57:35" pos:end="57:35">)</operator><name pos:start="57:36" pos:end="57:51"><name pos:start="57:36" pos:end="57:40">avctx</name><operator pos:start="57:41" pos:end="57:42">-&gt;</operator><name pos:start="57:43" pos:end="57:51">extradata</name></name> <operator pos:start="57:53" pos:end="57:53">+</operator> <literal type="number" pos:start="57:55" pos:end="57:55">4</literal><operator pos:start="57:56" pos:end="57:56">)</operator></expr>)</condition> <block pos:start="57:59" pos:end="113:5">{<block_content pos:start="59:9" pos:end="111:21">

        <case pos:start="59:9" pos:end="59:28">case <expr pos:start="59:14" pos:end="59:27"><name pos:start="59:14" pos:end="59:27">IMGTYPE_YUV111</name></expr>:</case>

            <expr_stmt pos:start="61:13" pos:end="61:42"><expr pos:start="61:13" pos:end="61:41"><name pos:start="61:13" pos:end="61:26"><name pos:start="61:13" pos:end="61:13">c</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:26">decomp_size</name></name> <operator pos:start="61:28" pos:end="61:28">=</operator> <name pos:start="61:30" pos:end="61:37">basesize</name> <operator pos:start="61:39" pos:end="61:39">*</operator> <literal type="number" pos:start="61:41" pos:end="61:41">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:69"><expr pos:start="63:13" pos:end="63:68"><call pos:start="63:13" pos:end="63:68"><name pos:start="63:13" pos:end="63:18">av_log</name><argument_list pos:start="63:19" pos:end="63:68">(<argument pos:start="63:20" pos:end="63:24"><expr pos:start="63:20" pos:end="63:24"><name pos:start="63:20" pos:end="63:24">avctx</name></expr></argument>, <argument pos:start="63:27" pos:end="63:37"><expr pos:start="63:27" pos:end="63:37"><name pos:start="63:27" pos:end="63:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="63:40" pos:end="63:67"><expr pos:start="63:40" pos:end="63:67"><literal type="string" pos:start="63:40" pos:end="63:67">"Image type is YUV 1:1:1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="65:13" pos:end="65:18">break;</break>

        <case pos:start="67:9" pos:end="67:28">case <expr pos:start="67:14" pos:end="67:27"><name pos:start="67:14" pos:end="67:27">IMGTYPE_YUV422</name></expr>:</case>

            <expr_stmt pos:start="69:13" pos:end="69:42"><expr pos:start="69:13" pos:end="69:41"><name pos:start="69:13" pos:end="69:26"><name pos:start="69:13" pos:end="69:13">c</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:26">decomp_size</name></name> <operator pos:start="69:28" pos:end="69:28">=</operator> <name pos:start="69:30" pos:end="69:37">basesize</name> <operator pos:start="69:39" pos:end="69:39">*</operator> <literal type="number" pos:start="69:41" pos:end="69:41">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:69"><expr pos:start="71:13" pos:end="71:68"><call pos:start="71:13" pos:end="71:68"><name pos:start="71:13" pos:end="71:18">av_log</name><argument_list pos:start="71:19" pos:end="71:68">(<argument pos:start="71:20" pos:end="71:24"><expr pos:start="71:20" pos:end="71:24"><name pos:start="71:20" pos:end="71:24">avctx</name></expr></argument>, <argument pos:start="71:27" pos:end="71:37"><expr pos:start="71:27" pos:end="71:37"><name pos:start="71:27" pos:end="71:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="71:40" pos:end="71:67"><expr pos:start="71:40" pos:end="71:67"><literal type="string" pos:start="71:40" pos:end="71:67">"Image type is YUV 4:2:2.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="73:13" pos:end="73:18">break;</break>

        <case pos:start="75:9" pos:end="75:27">case <expr pos:start="75:14" pos:end="75:26"><name pos:start="75:14" pos:end="75:26">IMGTYPE_RGB24</name></expr>:</case>

            <expr_stmt pos:start="77:13" pos:end="77:42"><expr pos:start="77:13" pos:end="77:41"><name pos:start="77:13" pos:end="77:26"><name pos:start="77:13" pos:end="77:13">c</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:26">decomp_size</name></name> <operator pos:start="77:28" pos:end="77:28">=</operator> <name pos:start="77:30" pos:end="77:37">basesize</name> <operator pos:start="77:39" pos:end="77:39">*</operator> <literal type="number" pos:start="77:41" pos:end="77:41">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:66"><expr pos:start="79:13" pos:end="79:65"><call pos:start="79:13" pos:end="79:65"><name pos:start="79:13" pos:end="79:18">av_log</name><argument_list pos:start="79:19" pos:end="79:65">(<argument pos:start="79:20" pos:end="79:24"><expr pos:start="79:20" pos:end="79:24"><name pos:start="79:20" pos:end="79:24">avctx</name></expr></argument>, <argument pos:start="79:27" pos:end="79:37"><expr pos:start="79:27" pos:end="79:37"><name pos:start="79:27" pos:end="79:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="79:40" pos:end="79:64"><expr pos:start="79:40" pos:end="79:64"><literal type="string" pos:start="79:40" pos:end="79:64">"Image type is RGB 24.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="81:13" pos:end="81:18">break;</break>

        <case pos:start="83:9" pos:end="83:28">case <expr pos:start="83:14" pos:end="83:27"><name pos:start="83:14" pos:end="83:27">IMGTYPE_YUV411</name></expr>:</case>

            <expr_stmt pos:start="85:13" pos:end="85:46"><expr pos:start="85:13" pos:end="85:45"><name pos:start="85:13" pos:end="85:26"><name pos:start="85:13" pos:end="85:13">c</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:26">decomp_size</name></name> <operator pos:start="85:28" pos:end="85:28">=</operator> <name pos:start="85:30" pos:end="85:37">basesize</name> <operator pos:start="85:39" pos:end="85:39">/</operator> <literal type="number" pos:start="85:41" pos:end="85:41">2</literal> <operator pos:start="85:43" pos:end="85:43">*</operator> <literal type="number" pos:start="85:45" pos:end="85:45">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:69"><expr pos:start="87:13" pos:end="87:68"><call pos:start="87:13" pos:end="87:68"><name pos:start="87:13" pos:end="87:18">av_log</name><argument_list pos:start="87:19" pos:end="87:68">(<argument pos:start="87:20" pos:end="87:24"><expr pos:start="87:20" pos:end="87:24"><name pos:start="87:20" pos:end="87:24">avctx</name></expr></argument>, <argument pos:start="87:27" pos:end="87:37"><expr pos:start="87:27" pos:end="87:37"><name pos:start="87:27" pos:end="87:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="87:40" pos:end="87:67"><expr pos:start="87:40" pos:end="87:67"><literal type="string" pos:start="87:40" pos:end="87:67">"Image type is YUV 4:1:1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        <case pos:start="91:9" pos:end="91:28">case <expr pos:start="91:14" pos:end="91:27"><name pos:start="91:14" pos:end="91:27">IMGTYPE_YUV211</name></expr>:</case>

            <expr_stmt pos:start="93:13" pos:end="93:42"><expr pos:start="93:13" pos:end="93:41"><name pos:start="93:13" pos:end="93:26"><name pos:start="93:13" pos:end="93:13">c</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:26">decomp_size</name></name> <operator pos:start="93:28" pos:end="93:28">=</operator> <name pos:start="93:30" pos:end="93:37">basesize</name> <operator pos:start="93:39" pos:end="93:39">*</operator> <literal type="number" pos:start="93:41" pos:end="93:41">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:69"><expr pos:start="95:13" pos:end="95:68"><call pos:start="95:13" pos:end="95:68"><name pos:start="95:13" pos:end="95:18">av_log</name><argument_list pos:start="95:19" pos:end="95:68">(<argument pos:start="95:20" pos:end="95:24"><expr pos:start="95:20" pos:end="95:24"><name pos:start="95:20" pos:end="95:24">avctx</name></expr></argument>, <argument pos:start="95:27" pos:end="95:37"><expr pos:start="95:27" pos:end="95:37"><name pos:start="95:27" pos:end="95:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="95:40" pos:end="95:67"><expr pos:start="95:40" pos:end="95:67"><literal type="string" pos:start="95:40" pos:end="95:67">"Image type is YUV 2:1:1.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="97:13" pos:end="97:18">break;</break>

        <case pos:start="99:9" pos:end="99:28">case <expr pos:start="99:14" pos:end="99:27"><name pos:start="99:14" pos:end="99:27">IMGTYPE_YUV420</name></expr>:</case>

            <expr_stmt pos:start="101:13" pos:end="101:46"><expr pos:start="101:13" pos:end="101:45"><name pos:start="101:13" pos:end="101:26"><name pos:start="101:13" pos:end="101:13">c</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:26">decomp_size</name></name> <operator pos:start="101:28" pos:end="101:28">=</operator> <name pos:start="101:30" pos:end="101:37">basesize</name> <operator pos:start="101:39" pos:end="101:39">/</operator> <literal type="number" pos:start="101:41" pos:end="101:41">2</literal> <operator pos:start="101:43" pos:end="101:43">*</operator> <literal type="number" pos:start="101:45" pos:end="101:45">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:69"><expr pos:start="103:13" pos:end="103:68"><call pos:start="103:13" pos:end="103:68"><name pos:start="103:13" pos:end="103:18">av_log</name><argument_list pos:start="103:19" pos:end="103:68">(<argument pos:start="103:20" pos:end="103:24"><expr pos:start="103:20" pos:end="103:24"><name pos:start="103:20" pos:end="103:24">avctx</name></expr></argument>, <argument pos:start="103:27" pos:end="103:37"><expr pos:start="103:27" pos:end="103:37"><name pos:start="103:27" pos:end="103:37">AV_LOG_INFO</name></expr></argument>, <argument pos:start="103:40" pos:end="103:67"><expr pos:start="103:40" pos:end="103:67"><literal type="string" pos:start="103:40" pos:end="103:67">"Image type is YUV 4:2:0.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        <default pos:start="107:9" pos:end="107:16">default:</default>

            <expr_stmt pos:start="109:13" pos:end="109:86"><expr pos:start="109:13" pos:end="109:85"><call pos:start="109:13" pos:end="109:85"><name pos:start="109:13" pos:end="109:18">av_log</name><argument_list pos:start="109:19" pos:end="109:85">(<argument pos:start="109:20" pos:end="109:24"><expr pos:start="109:20" pos:end="109:24"><name pos:start="109:20" pos:end="109:24">avctx</name></expr></argument>, <argument pos:start="109:27" pos:end="109:38"><expr pos:start="109:27" pos:end="109:38"><name pos:start="109:27" pos:end="109:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:41" pos:end="109:72"><expr pos:start="109:41" pos:end="109:72"><literal type="string" pos:start="109:41" pos:end="109:72">"Unsupported image format %d.\n"</literal></expr></argument>, <argument pos:start="109:75" pos:end="109:84"><expr pos:start="109:75" pos:end="109:84"><name pos:start="109:75" pos:end="109:84"><name pos:start="109:75" pos:end="109:75">c</name><operator pos:start="109:76" pos:end="109:77">-&gt;</operator><name pos:start="109:78" pos:end="109:84">imgtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="111:13" pos:end="111:21">return <expr pos:start="111:20" pos:end="111:20"><literal type="number" pos:start="111:20" pos:end="111:20">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <comment type="block" pos:start="117:5" pos:end="117:35">/* Detect compression method */</comment>

    <expr_stmt pos:start="119:5" pos:end="119:53"><expr pos:start="119:5" pos:end="119:52"><name pos:start="119:5" pos:end="119:18"><name pos:start="119:5" pos:end="119:5">c</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:18">compression</name></name> <operator pos:start="119:20" pos:end="119:20">=</operator> <operator pos:start="119:22" pos:end="119:22">*</operator><operator pos:start="119:23" pos:end="119:23">(</operator><operator pos:start="119:24" pos:end="119:24">(</operator><name pos:start="119:25" pos:end="119:28">char</name> <operator pos:start="119:30" pos:end="119:30">*</operator><operator pos:start="119:31" pos:end="119:31">)</operator><name pos:start="119:32" pos:end="119:47"><name pos:start="119:32" pos:end="119:36">avctx</name><operator pos:start="119:37" pos:end="119:38">-&gt;</operator><name pos:start="119:39" pos:end="119:47">extradata</name></name> <operator pos:start="119:49" pos:end="119:49">+</operator> <literal type="number" pos:start="119:51" pos:end="119:51">5</literal><operator pos:start="119:52" pos:end="119:52">)</operator></expr>;</expr_stmt>

    <switch pos:start="121:5" pos:end="205:5">switch <condition pos:start="121:12" pos:end="121:28">(<expr pos:start="121:13" pos:end="121:27"><name pos:start="121:13" pos:end="121:27"><name pos:start="121:13" pos:end="121:17">avctx</name><operator pos:start="121:18" pos:end="121:19">-&gt;</operator><name pos:start="121:20" pos:end="121:27">codec_id</name></name></expr>)</condition> <block pos:start="121:30" pos:end="205:5">{<block_content pos:start="123:9" pos:end="203:21">

        <case pos:start="123:9" pos:end="123:27">case <expr pos:start="123:14" pos:end="123:26"><name pos:start="123:14" pos:end="123:26">CODEC_ID_MSZH</name></expr>:</case>

            <switch pos:start="125:13" pos:end="147:13">switch <condition pos:start="125:20" pos:end="125:35">(<expr pos:start="125:21" pos:end="125:34"><name pos:start="125:21" pos:end="125:34"><name pos:start="125:21" pos:end="125:21">c</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:34">compression</name></name></expr>)</condition> <block pos:start="125:37" pos:end="147:13">{<block_content pos:start="127:17" pos:end="145:29">

                <case pos:start="127:17" pos:end="127:31">case <expr pos:start="127:22" pos:end="127:30"><name pos:start="127:22" pos:end="127:30">COMP_MSZH</name></expr>:</case>

                    <expr_stmt pos:start="129:21" pos:end="129:73"><expr pos:start="129:21" pos:end="129:72"><call pos:start="129:21" pos:end="129:72"><name pos:start="129:21" pos:end="129:26">av_log</name><argument_list pos:start="129:27" pos:end="129:72">(<argument pos:start="129:28" pos:end="129:32"><expr pos:start="129:28" pos:end="129:32"><name pos:start="129:28" pos:end="129:32">avctx</name></expr></argument>, <argument pos:start="129:35" pos:end="129:45"><expr pos:start="129:35" pos:end="129:45"><name pos:start="129:35" pos:end="129:45">AV_LOG_INFO</name></expr></argument>, <argument pos:start="129:48" pos:end="129:71"><expr pos:start="129:48" pos:end="129:71"><literal type="string" pos:start="129:48" pos:end="129:71">"Compression enabled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="131:21" pos:end="131:26">break;</break>

                <case pos:start="133:17" pos:end="133:38">case <expr pos:start="133:22" pos:end="133:37"><name pos:start="133:22" pos:end="133:37">COMP_MSZH_NOCOMP</name></expr>:</case>

                    <expr_stmt pos:start="135:21" pos:end="135:39"><expr pos:start="135:21" pos:end="135:38"><name pos:start="135:21" pos:end="135:34"><name pos:start="135:21" pos:end="135:21">c</name><operator pos:start="135:22" pos:end="135:23">-&gt;</operator><name pos:start="135:24" pos:end="135:34">decomp_size</name></name> <operator pos:start="135:36" pos:end="135:36">=</operator> <literal type="number" pos:start="135:38" pos:end="135:38">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="137:21" pos:end="137:68"><expr pos:start="137:21" pos:end="137:67"><call pos:start="137:21" pos:end="137:67"><name pos:start="137:21" pos:end="137:26">av_log</name><argument_list pos:start="137:27" pos:end="137:67">(<argument pos:start="137:28" pos:end="137:32"><expr pos:start="137:28" pos:end="137:32"><name pos:start="137:28" pos:end="137:32">avctx</name></expr></argument>, <argument pos:start="137:35" pos:end="137:45"><expr pos:start="137:35" pos:end="137:45"><name pos:start="137:35" pos:end="137:45">AV_LOG_INFO</name></expr></argument>, <argument pos:start="137:48" pos:end="137:66"><expr pos:start="137:48" pos:end="137:66"><literal type="string" pos:start="137:48" pos:end="137:66">"No compression.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="139:21" pos:end="139:26">break;</break>

                <default pos:start="141:17" pos:end="141:24">default:</default>

                    <expr_stmt pos:start="143:21" pos:end="143:115"><expr pos:start="143:21" pos:end="143:114"><call pos:start="143:21" pos:end="143:114"><name pos:start="143:21" pos:end="143:26">av_log</name><argument_list pos:start="143:27" pos:end="143:114">(<argument pos:start="143:28" pos:end="143:32"><expr pos:start="143:28" pos:end="143:32"><name pos:start="143:28" pos:end="143:32">avctx</name></expr></argument>, <argument pos:start="143:35" pos:end="143:46"><expr pos:start="143:35" pos:end="143:46"><name pos:start="143:35" pos:end="143:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="143:49" pos:end="143:97"><expr pos:start="143:49" pos:end="143:97"><literal type="string" pos:start="143:49" pos:end="143:97">"Unsupported compression format for MSZH (%d).\n"</literal></expr></argument>, <argument pos:start="143:100" pos:end="143:113"><expr pos:start="143:100" pos:end="143:113"><name pos:start="143:100" pos:end="143:113"><name pos:start="143:100" pos:end="143:100">c</name><operator pos:start="143:101" pos:end="143:102">-&gt;</operator><name pos:start="143:103" pos:end="143:113">compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="145:21" pos:end="145:29">return <expr pos:start="145:28" pos:end="145:28"><literal type="number" pos:start="145:28" pos:end="145:28">1</literal></expr>;</return>

            </block_content>}</block></switch>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <case pos:start="151:9" pos:end="154:0">case <expr pos:start="151:14" pos:end="151:26"><name pos:start="151:14" pos:end="151:26">CODEC_ID_ZLIB</name></expr>:</case>

<cpp:ifdef pos:start="153:1" pos:end="153:18">#<cpp:directive pos:start="153:2" pos:end="153:6">ifdef</cpp:directive> <name pos:start="153:8" pos:end="153:18">CONFIG_ZLIB</name></cpp:ifdef>

            <switch pos:start="155:13" pos:end="190:0">switch <condition pos:start="155:20" pos:end="155:35">(<expr pos:start="155:21" pos:end="155:34"><name pos:start="155:21" pos:end="155:34"><name pos:start="155:21" pos:end="155:21">c</name><operator pos:start="155:22" pos:end="155:23">-&gt;</operator><name pos:start="155:24" pos:end="155:34">compression</name></name></expr>)</condition> <block pos:start="155:37" pos:end="190:0">{<block_content pos:start="157:17" pos:end="185:102">

                <case pos:start="157:17" pos:end="157:39">case <expr pos:start="157:22" pos:end="157:38"><name pos:start="157:22" pos:end="157:38">COMP_ZLIB_HISPEED</name></expr>:</case>

                    <expr_stmt pos:start="159:21" pos:end="159:76"><expr pos:start="159:21" pos:end="159:75"><call pos:start="159:21" pos:end="159:75"><name pos:start="159:21" pos:end="159:26">av_log</name><argument_list pos:start="159:27" pos:end="159:75">(<argument pos:start="159:28" pos:end="159:32"><expr pos:start="159:28" pos:end="159:32"><name pos:start="159:28" pos:end="159:32">avctx</name></expr></argument>, <argument pos:start="159:35" pos:end="159:45"><expr pos:start="159:35" pos:end="159:45"><name pos:start="159:35" pos:end="159:45">AV_LOG_INFO</name></expr></argument>, <argument pos:start="159:48" pos:end="159:74"><expr pos:start="159:48" pos:end="159:74"><literal type="string" pos:start="159:48" pos:end="159:74">"High speed compression.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="161:21" pos:end="161:26">break;</break>

                <case pos:start="163:17" pos:end="163:38">case <expr pos:start="163:22" pos:end="163:37"><name pos:start="163:22" pos:end="163:37">COMP_ZLIB_HICOMP</name></expr>:</case>

                    <expr_stmt pos:start="165:21" pos:end="165:70"><expr pos:start="165:21" pos:end="165:69"><call pos:start="165:21" pos:end="165:69"><name pos:start="165:21" pos:end="165:26">av_log</name><argument_list pos:start="165:27" pos:end="165:69">(<argument pos:start="165:28" pos:end="165:32"><expr pos:start="165:28" pos:end="165:32"><name pos:start="165:28" pos:end="165:32">avctx</name></expr></argument>, <argument pos:start="165:35" pos:end="165:45"><expr pos:start="165:35" pos:end="165:45"><name pos:start="165:35" pos:end="165:45">AV_LOG_INFO</name></expr></argument>, <argument pos:start="165:48" pos:end="165:68"><expr pos:start="165:48" pos:end="165:68"><literal type="string" pos:start="165:48" pos:end="165:68">"High compression.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="167:21" pos:end="167:26">break;</break>

                <case pos:start="169:17" pos:end="169:38">case <expr pos:start="169:22" pos:end="169:37"><name pos:start="169:22" pos:end="169:37">COMP_ZLIB_NORMAL</name></expr>:</case>

                    <expr_stmt pos:start="171:21" pos:end="171:72"><expr pos:start="171:21" pos:end="171:71"><call pos:start="171:21" pos:end="171:71"><name pos:start="171:21" pos:end="171:26">av_log</name><argument_list pos:start="171:27" pos:end="171:71">(<argument pos:start="171:28" pos:end="171:32"><expr pos:start="171:28" pos:end="171:32"><name pos:start="171:28" pos:end="171:32">avctx</name></expr></argument>, <argument pos:start="171:35" pos:end="171:45"><expr pos:start="171:35" pos:end="171:45"><name pos:start="171:35" pos:end="171:45">AV_LOG_INFO</name></expr></argument>, <argument pos:start="171:48" pos:end="171:70"><expr pos:start="171:48" pos:end="171:70"><literal type="string" pos:start="171:48" pos:end="171:70">"Normal compression.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="173:21" pos:end="173:26">break;</break>

                <default pos:start="175:17" pos:end="175:24">default:</default>

                    <if_stmt pos:start="177:21" pos:end="183:21"><if pos:start="177:21" pos:end="183:21">if <condition pos:start="177:24" pos:end="177:101">(<expr pos:start="177:25" pos:end="177:100"><operator pos:start="177:25" pos:end="177:25">(</operator><name pos:start="177:26" pos:end="177:39"><name pos:start="177:26" pos:end="177:26">c</name><operator pos:start="177:27" pos:end="177:28">-&gt;</operator><name pos:start="177:29" pos:end="177:39">compression</name></name> <operator pos:start="177:41" pos:end="177:41">&lt;</operator> <name pos:start="177:43" pos:end="177:58">Z_NO_COMPRESSION</name><operator pos:start="177:59" pos:end="177:59">)</operator> <operator pos:start="177:61" pos:end="177:62">||</operator> <operator pos:start="177:64" pos:end="177:64">(</operator><name pos:start="177:65" pos:end="177:78"><name pos:start="177:65" pos:end="177:65">c</name><operator pos:start="177:66" pos:end="177:67">-&gt;</operator><name pos:start="177:68" pos:end="177:78">compression</name></name> <operator pos:start="177:80" pos:end="177:80">&gt;</operator> <name pos:start="177:82" pos:end="177:99">Z_BEST_COMPRESSION</name><operator pos:start="177:100" pos:end="177:100">)</operator></expr>)</condition> <block pos:start="177:103" pos:end="183:21">{<block_content pos:start="179:29" pos:end="181:33">

                	    <expr_stmt pos:start="179:29" pos:end="179:124"><expr pos:start="179:29" pos:end="179:123"><call pos:start="179:29" pos:end="179:123"><name pos:start="179:29" pos:end="179:34">av_log</name><argument_list pos:start="179:35" pos:end="179:123">(<argument pos:start="179:36" pos:end="179:40"><expr pos:start="179:36" pos:end="179:40"><name pos:start="179:36" pos:end="179:40">avctx</name></expr></argument>, <argument pos:start="179:43" pos:end="179:54"><expr pos:start="179:43" pos:end="179:54"><name pos:start="179:43" pos:end="179:54">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="179:57" pos:end="179:106"><expr pos:start="179:57" pos:end="179:106"><literal type="string" pos:start="179:57" pos:end="179:106">"Unusupported compression level for ZLIB: (%d).\n"</literal></expr></argument>, <argument pos:start="179:109" pos:end="179:122"><expr pos:start="179:109" pos:end="179:122"><name pos:start="179:109" pos:end="179:122"><name pos:start="179:109" pos:end="179:109">c</name><operator pos:start="179:110" pos:end="179:111">-&gt;</operator><name pos:start="179:112" pos:end="179:122">compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="181:25" pos:end="181:33">return <expr pos:start="181:32" pos:end="181:32"><literal type="number" pos:start="181:32" pos:end="181:32">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="185:21" pos:end="185:102"><expr pos:start="185:21" pos:end="185:101"><call pos:start="185:21" pos:end="185:101"><name pos:start="185:21" pos:end="185:26">av_log</name><argument_list pos:start="185:27" pos:end="185:101">(<argument pos:start="185:28" pos:end="185:32"><expr pos:start="185:28" pos:end="185:32"><name pos:start="185:28" pos:end="185:32">avctx</name></expr></argument>, <argument pos:start="185:35" pos:end="185:45"><expr pos:start="185:35" pos:end="185:45"><name pos:start="185:35" pos:end="185:45">AV_LOG_INFO</name></expr></argument>, <argument pos:start="185:48" pos:end="185:84"><expr pos:start="185:48" pos:end="185:84"><literal type="string" pos:start="185:48" pos:end="185:84">"Compression level for ZLIB: (%d).\n"</literal></expr></argument>, <argument pos:start="185:87" pos:end="185:100"><expr pos:start="185:87" pos:end="185:100"><name pos:start="185:87" pos:end="185:100"><name pos:start="185:87" pos:end="185:87">c</name><operator pos:start="185:88" pos:end="185:89">-&gt;</operator><name pos:start="185:90" pos:end="185:100">compression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

<cpp:else pos:start="189:1" pos:end="189:5">#<cpp:directive pos:start="189:2" pos:end="189:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="191:13" pos:end="191:72"><expr pos:start="191:13" pos:end="191:71"><call pos:start="191:13" pos:end="191:71"><name pos:start="191:13" pos:end="191:18">av_log</name><argument_list pos:start="191:19" pos:end="191:71">(<argument pos:start="191:20" pos:end="191:24"><expr pos:start="191:20" pos:end="191:24"><name pos:start="191:20" pos:end="191:24">avctx</name></expr></argument>, <argument pos:start="191:27" pos:end="191:38"><expr pos:start="191:27" pos:end="191:38"><name pos:start="191:27" pos:end="191:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="191:41" pos:end="191:70"><expr pos:start="191:41" pos:end="191:70"><literal type="string" pos:start="191:41" pos:end="191:70">"Zlib support not compiled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="193:13" pos:end="196:0">return <expr pos:start="193:20" pos:end="193:20"><literal type="number" pos:start="193:20" pos:end="193:20">1</literal></expr>;</return>

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>

            <break pos:start="197:13" pos:end="197:18">break;</break>

        <default pos:start="199:9" pos:end="199:16">default:</default>

            <expr_stmt pos:start="201:13" pos:end="201:87"><expr pos:start="201:13" pos:end="201:86"><call pos:start="201:13" pos:end="201:86"><name pos:start="201:13" pos:end="201:18">av_log</name><argument_list pos:start="201:19" pos:end="201:86">(<argument pos:start="201:20" pos:end="201:24"><expr pos:start="201:20" pos:end="201:24"><name pos:start="201:20" pos:end="201:24">avctx</name></expr></argument>, <argument pos:start="201:27" pos:end="201:38"><expr pos:start="201:27" pos:end="201:38"><name pos:start="201:27" pos:end="201:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="201:41" pos:end="201:85"><expr pos:start="201:41" pos:end="201:85"><literal type="string" pos:start="201:41" pos:end="201:85">"BUG! Unknown codec in compression switch.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="203:13" pos:end="203:21">return <expr pos:start="203:20" pos:end="203:20"><literal type="number" pos:start="203:20" pos:end="203:20">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <comment type="block" pos:start="209:5" pos:end="209:39">/* Allocate decompression buffer */</comment>

    <comment type="block" pos:start="211:5" pos:end="211:58">/* 4*8 max overflow space for mszh decomp algorithm */</comment>

    <if_stmt pos:start="213:5" pos:end="223:5"><if pos:start="213:5" pos:end="223:5">if <condition pos:start="213:8" pos:end="213:23">(<expr pos:start="213:9" pos:end="213:22"><name pos:start="213:9" pos:end="213:22"><name pos:start="213:9" pos:end="213:9">c</name><operator pos:start="213:10" pos:end="213:11">-&gt;</operator><name pos:start="213:12" pos:end="213:22">decomp_size</name></name></expr>)</condition> <block pos:start="213:25" pos:end="223:5">{<block_content pos:start="215:9" pos:end="221:9">

        <if_stmt pos:start="215:9" pos:end="221:9"><if pos:start="215:9" pos:end="221:9">if <condition pos:start="215:12" pos:end="215:68">(<expr pos:start="215:13" pos:end="215:67"><operator pos:start="215:13" pos:end="215:13">(</operator><name pos:start="215:14" pos:end="215:26"><name pos:start="215:14" pos:end="215:14">c</name><operator pos:start="215:15" pos:end="215:16">-&gt;</operator><name pos:start="215:17" pos:end="215:26">decomp_buf</name></name> <operator pos:start="215:28" pos:end="215:28">=</operator> <call pos:start="215:30" pos:end="215:58"><name pos:start="215:30" pos:end="215:38">av_malloc</name><argument_list pos:start="215:39" pos:end="215:58">(<argument pos:start="215:40" pos:end="215:57"><expr pos:start="215:40" pos:end="215:57"><name pos:start="215:40" pos:end="215:53"><name pos:start="215:40" pos:end="215:40">c</name><operator pos:start="215:41" pos:end="215:42">-&gt;</operator><name pos:start="215:43" pos:end="215:53">decomp_size</name></name><operator pos:start="215:54" pos:end="215:54">+</operator><literal type="number" pos:start="215:55" pos:end="215:55">4</literal><operator pos:start="215:56" pos:end="215:56">*</operator><literal type="number" pos:start="215:57" pos:end="215:57">8</literal></expr></argument>)</argument_list></call><operator pos:start="215:59" pos:end="215:59">)</operator> <operator pos:start="215:61" pos:end="215:62">==</operator> <name pos:start="215:64" pos:end="215:67">NULL</name></expr>)</condition> <block pos:start="215:70" pos:end="221:9">{<block_content pos:start="217:13" pos:end="219:21">

            <expr_stmt pos:start="217:13" pos:end="217:82"><expr pos:start="217:13" pos:end="217:81"><call pos:start="217:13" pos:end="217:81"><name pos:start="217:13" pos:end="217:18">av_log</name><argument_list pos:start="217:19" pos:end="217:81">(<argument pos:start="217:20" pos:end="217:24"><expr pos:start="217:20" pos:end="217:24"><name pos:start="217:20" pos:end="217:24">avctx</name></expr></argument>, <argument pos:start="217:27" pos:end="217:38"><expr pos:start="217:27" pos:end="217:38"><name pos:start="217:27" pos:end="217:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="217:41" pos:end="217:80"><expr pos:start="217:41" pos:end="217:80"><literal type="string" pos:start="217:41" pos:end="217:80">"Can't allocate decompression buffer.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="219:13" pos:end="219:21">return <expr pos:start="219:20" pos:end="219:20"><literal type="number" pos:start="219:20" pos:end="219:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

  

    <comment type="block" pos:start="227:5" pos:end="227:22">/* Detect flags */</comment> 

    <expr_stmt pos:start="229:5" pos:end="229:47"><expr pos:start="229:5" pos:end="229:46"><name pos:start="229:5" pos:end="229:12"><name pos:start="229:5" pos:end="229:5">c</name><operator pos:start="229:6" pos:end="229:7">-&gt;</operator><name pos:start="229:8" pos:end="229:12">flags</name></name> <operator pos:start="229:14" pos:end="229:14">=</operator> <operator pos:start="229:16" pos:end="229:16">*</operator><operator pos:start="229:17" pos:end="229:17">(</operator><operator pos:start="229:18" pos:end="229:18">(</operator><name pos:start="229:19" pos:end="229:22">char</name> <operator pos:start="229:24" pos:end="229:24">*</operator><operator pos:start="229:25" pos:end="229:25">)</operator><name pos:start="229:26" pos:end="229:41"><name pos:start="229:26" pos:end="229:30">avctx</name><operator pos:start="229:31" pos:end="229:32">-&gt;</operator><name pos:start="229:33" pos:end="229:41">extradata</name></name> <operator pos:start="229:43" pos:end="229:43">+</operator> <literal type="number" pos:start="229:45" pos:end="229:45">6</literal><operator pos:start="229:46" pos:end="229:46">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="231:5" pos:end="233:70"><if pos:start="231:5" pos:end="233:70">if <condition pos:start="231:8" pos:end="231:36">(<expr pos:start="231:9" pos:end="231:35"><name pos:start="231:9" pos:end="231:16"><name pos:start="231:9" pos:end="231:9">c</name><operator pos:start="231:10" pos:end="231:11">-&gt;</operator><name pos:start="231:12" pos:end="231:16">flags</name></name> <operator pos:start="231:18" pos:end="231:18">&amp;</operator> <name pos:start="231:20" pos:end="231:35">FLAG_MULTITHREAD</name></expr>)</condition><block type="pseudo" pos:start="233:9" pos:end="233:70"><block_content pos:start="233:9" pos:end="233:70">

        <expr_stmt pos:start="233:9" pos:end="233:70"><expr pos:start="233:9" pos:end="233:69"><call pos:start="233:9" pos:end="233:69"><name pos:start="233:9" pos:end="233:14">av_log</name><argument_list pos:start="233:15" pos:end="233:69">(<argument pos:start="233:16" pos:end="233:20"><expr pos:start="233:16" pos:end="233:20"><name pos:start="233:16" pos:end="233:20">avctx</name></expr></argument>, <argument pos:start="233:23" pos:end="233:33"><expr pos:start="233:23" pos:end="233:33"><name pos:start="233:23" pos:end="233:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="233:36" pos:end="233:68"><expr pos:start="233:36" pos:end="233:68"><literal type="string" pos:start="233:36" pos:end="233:68">"Multithread encoder flag set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="235:5" pos:end="237:70"><if pos:start="235:5" pos:end="237:70">if <condition pos:start="235:8" pos:end="235:34">(<expr pos:start="235:9" pos:end="235:33"><name pos:start="235:9" pos:end="235:16"><name pos:start="235:9" pos:end="235:9">c</name><operator pos:start="235:10" pos:end="235:11">-&gt;</operator><name pos:start="235:12" pos:end="235:16">flags</name></name> <operator pos:start="235:18" pos:end="235:18">&amp;</operator> <name pos:start="235:20" pos:end="235:33">FLAG_NULLFRAME</name></expr>)</condition><block type="pseudo" pos:start="237:9" pos:end="237:70"><block_content pos:start="237:9" pos:end="237:70">

        <expr_stmt pos:start="237:9" pos:end="237:70"><expr pos:start="237:9" pos:end="237:69"><call pos:start="237:9" pos:end="237:69"><name pos:start="237:9" pos:end="237:14">av_log</name><argument_list pos:start="237:15" pos:end="237:69">(<argument pos:start="237:16" pos:end="237:20"><expr pos:start="237:16" pos:end="237:20"><name pos:start="237:16" pos:end="237:20">avctx</name></expr></argument>, <argument pos:start="237:23" pos:end="237:33"><expr pos:start="237:23" pos:end="237:33"><name pos:start="237:23" pos:end="237:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="237:36" pos:end="237:68"><expr pos:start="237:36" pos:end="237:68"><literal type="string" pos:start="237:36" pos:end="237:68">"Nullframe insertion flag set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="239:5" pos:end="241:61"><if pos:start="239:5" pos:end="241:61">if <condition pos:start="239:8" pos:end="239:74">(<expr pos:start="239:9" pos:end="239:73"><operator pos:start="239:9" pos:end="239:9">(</operator><name pos:start="239:10" pos:end="239:24"><name pos:start="239:10" pos:end="239:14">avctx</name><operator pos:start="239:15" pos:end="239:16">-&gt;</operator><name pos:start="239:17" pos:end="239:24">codec_id</name></name> <operator pos:start="239:26" pos:end="239:27">==</operator> <name pos:start="239:29" pos:end="239:41">CODEC_ID_ZLIB</name><operator pos:start="239:42" pos:end="239:42">)</operator> <operator pos:start="239:44" pos:end="239:45">&amp;&amp;</operator> <operator pos:start="239:47" pos:end="239:47">(</operator><name pos:start="239:48" pos:end="239:55"><name pos:start="239:48" pos:end="239:48">c</name><operator pos:start="239:49" pos:end="239:50">-&gt;</operator><name pos:start="239:51" pos:end="239:55">flags</name></name> <operator pos:start="239:57" pos:end="239:57">&amp;</operator> <name pos:start="239:59" pos:end="239:72">FLAG_PNGFILTER</name><operator pos:start="239:73" pos:end="239:73">)</operator></expr>)</condition><block type="pseudo" pos:start="241:9" pos:end="241:61"><block_content pos:start="241:9" pos:end="241:61">

        <expr_stmt pos:start="241:9" pos:end="241:61"><expr pos:start="241:9" pos:end="241:60"><call pos:start="241:9" pos:end="241:60"><name pos:start="241:9" pos:end="241:14">av_log</name><argument_list pos:start="241:15" pos:end="241:60">(<argument pos:start="241:16" pos:end="241:20"><expr pos:start="241:16" pos:end="241:20"><name pos:start="241:16" pos:end="241:20">avctx</name></expr></argument>, <argument pos:start="241:23" pos:end="241:33"><expr pos:start="241:23" pos:end="241:33"><name pos:start="241:23" pos:end="241:33">AV_LOG_INFO</name></expr></argument>, <argument pos:start="241:36" pos:end="241:59"><expr pos:start="241:36" pos:end="241:59"><literal type="string" pos:start="241:36" pos:end="241:59">"PNG filter flag set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="243:5" pos:end="245:74"><if pos:start="243:5" pos:end="245:74">if <condition pos:start="243:8" pos:end="243:35">(<expr pos:start="243:9" pos:end="243:34"><name pos:start="243:9" pos:end="243:16"><name pos:start="243:9" pos:end="243:9">c</name><operator pos:start="243:10" pos:end="243:11">-&gt;</operator><name pos:start="243:12" pos:end="243:16">flags</name></name> <operator pos:start="243:18" pos:end="243:18">&amp;</operator> <name pos:start="243:20" pos:end="243:34">FLAGMASK_UNUSED</name></expr>)</condition><block type="pseudo" pos:start="245:9" pos:end="245:74"><block_content pos:start="245:9" pos:end="245:74">

        <expr_stmt pos:start="245:9" pos:end="245:74"><expr pos:start="245:9" pos:end="245:73"><call pos:start="245:9" pos:end="245:73"><name pos:start="245:9" pos:end="245:14">av_log</name><argument_list pos:start="245:15" pos:end="245:73">(<argument pos:start="245:16" pos:end="245:20"><expr pos:start="245:16" pos:end="245:20"><name pos:start="245:16" pos:end="245:20">avctx</name></expr></argument>, <argument pos:start="245:23" pos:end="245:34"><expr pos:start="245:23" pos:end="245:34"><name pos:start="245:23" pos:end="245:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="245:37" pos:end="245:62"><expr pos:start="245:37" pos:end="245:62"><literal type="string" pos:start="245:37" pos:end="245:62">"Unknown flag set (%d).\n"</literal></expr></argument>, <argument pos:start="245:65" pos:end="245:72"><expr pos:start="245:65" pos:end="245:72"><name pos:start="245:65" pos:end="245:72"><name pos:start="245:65" pos:end="245:65">c</name><operator pos:start="245:66" pos:end="245:67">-&gt;</operator><name pos:start="245:68" pos:end="245:72">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="249:5" pos:end="249:29">/* If needed init zlib */</comment>

    <if_stmt pos:start="251:5" pos:end="279:5"><if pos:start="251:5" pos:end="279:5">if <condition pos:start="251:8" pos:end="251:41">(<expr pos:start="251:9" pos:end="251:40"><name pos:start="251:9" pos:end="251:23"><name pos:start="251:9" pos:end="251:13">avctx</name><operator pos:start="251:14" pos:end="251:15">-&gt;</operator><name pos:start="251:16" pos:end="251:23">codec_id</name></name> <operator pos:start="251:25" pos:end="251:26">==</operator> <name pos:start="251:28" pos:end="251:40">CODEC_ID_ZLIB</name></expr>)</condition> <block pos:start="251:43" pos:end="279:5">{<block_content pos:start="255:9" pos:end="278:0">

<cpp:ifdef pos:start="253:1" pos:end="253:18">#<cpp:directive pos:start="253:2" pos:end="253:6">ifdef</cpp:directive> <name pos:start="253:8" pos:end="253:18">CONFIG_ZLIB</name></cpp:ifdef>

        <expr_stmt pos:start="255:9" pos:end="255:35"><expr pos:start="255:9" pos:end="255:34"><name pos:start="255:9" pos:end="255:25"><name pos:start="255:9" pos:end="255:9">c</name><operator pos:start="255:10" pos:end="255:11">-&gt;</operator><name pos:start="255:12" pos:end="255:18">zstream</name><operator pos:start="255:19" pos:end="255:19">.</operator><name pos:start="255:20" pos:end="255:25">zalloc</name></name> <operator pos:start="255:27" pos:end="255:27">=</operator> <name pos:start="255:29" pos:end="255:34">Z_NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:34"><expr pos:start="257:9" pos:end="257:33"><name pos:start="257:9" pos:end="257:24"><name pos:start="257:9" pos:end="257:9">c</name><operator pos:start="257:10" pos:end="257:11">-&gt;</operator><name pos:start="257:12" pos:end="257:18">zstream</name><operator pos:start="257:19" pos:end="257:19">.</operator><name pos:start="257:20" pos:end="257:24">zfree</name></name> <operator pos:start="257:26" pos:end="257:26">=</operator> <name pos:start="257:28" pos:end="257:33">Z_NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:35"><expr pos:start="259:9" pos:end="259:34"><name pos:start="259:9" pos:end="259:25"><name pos:start="259:9" pos:end="259:9">c</name><operator pos:start="259:10" pos:end="259:11">-&gt;</operator><name pos:start="259:12" pos:end="259:18">zstream</name><operator pos:start="259:19" pos:end="259:19">.</operator><name pos:start="259:20" pos:end="259:25">opaque</name></name> <operator pos:start="259:27" pos:end="259:27">=</operator> <name pos:start="259:29" pos:end="259:34">Z_NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:42"><expr pos:start="261:9" pos:end="261:41"><name pos:start="261:9" pos:end="261:12">zret</name> <operator pos:start="261:14" pos:end="261:14">=</operator> <call pos:start="261:16" pos:end="261:41"><name pos:start="261:16" pos:end="261:26">inflateInit</name><argument_list pos:start="261:27" pos:end="261:41">(<argument pos:start="261:28" pos:end="261:40"><expr pos:start="261:28" pos:end="261:40"><operator pos:start="261:28" pos:end="261:28">&amp;</operator><operator pos:start="261:29" pos:end="261:29">(</operator><name pos:start="261:30" pos:end="261:39"><name pos:start="261:30" pos:end="261:30">c</name><operator pos:start="261:31" pos:end="261:32">-&gt;</operator><name pos:start="261:33" pos:end="261:39">zstream</name></name><operator pos:start="261:40" pos:end="261:40">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="263:9" pos:end="272:0"><if pos:start="263:9" pos:end="272:0">if <condition pos:start="263:12" pos:end="263:25">(<expr pos:start="263:13" pos:end="263:24"><name pos:start="263:13" pos:end="263:16">zret</name> <operator pos:start="263:18" pos:end="263:19">!=</operator> <name pos:start="263:21" pos:end="263:24">Z_OK</name></expr>)</condition> <block pos:start="263:27" pos:end="272:0">{<block_content pos:start="265:13" pos:end="267:21">

            <expr_stmt pos:start="265:13" pos:end="265:74"><expr pos:start="265:13" pos:end="265:73"><call pos:start="265:13" pos:end="265:73"><name pos:start="265:13" pos:end="265:18">av_log</name><argument_list pos:start="265:19" pos:end="265:73">(<argument pos:start="265:20" pos:end="265:24"><expr pos:start="265:20" pos:end="265:24"><name pos:start="265:20" pos:end="265:24">avctx</name></expr></argument>, <argument pos:start="265:27" pos:end="265:38"><expr pos:start="265:27" pos:end="265:38"><name pos:start="265:27" pos:end="265:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="265:41" pos:end="265:66"><expr pos:start="265:41" pos:end="265:66"><literal type="string" pos:start="265:41" pos:end="265:66">"Inflate init error: %d\n"</literal></expr></argument>, <argument pos:start="265:69" pos:end="265:72"><expr pos:start="265:69" pos:end="265:72"><name pos:start="265:69" pos:end="265:72">zret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="267:13" pos:end="267:21">return <expr pos:start="267:20" pos:end="267:20"><literal type="number" pos:start="267:20" pos:end="267:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

<cpp:else pos:start="271:1" pos:end="271:5">#<cpp:directive pos:start="271:2" pos:end="271:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="273:5" pos:end="273:64"><expr pos:start="273:5" pos:end="273:63"><call pos:start="273:5" pos:end="273:63"><name pos:start="273:5" pos:end="273:10">av_log</name><argument_list pos:start="273:11" pos:end="273:63">(<argument pos:start="273:12" pos:end="273:16"><expr pos:start="273:12" pos:end="273:16"><name pos:start="273:12" pos:end="273:16">avctx</name></expr></argument>, <argument pos:start="273:19" pos:end="273:30"><expr pos:start="273:19" pos:end="273:30"><name pos:start="273:19" pos:end="273:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="273:33" pos:end="273:62"><expr pos:start="273:33" pos:end="273:62"><literal type="string" pos:start="273:33" pos:end="273:62">"Zlib support not compiled.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="275:5" pos:end="278:0">return <expr pos:start="275:12" pos:end="275:12"><literal type="number" pos:start="275:12" pos:end="275:12">1</literal></expr>;</return>

<cpp:endif pos:start="277:1" pos:end="277:6">#<cpp:directive pos:start="277:2" pos:end="277:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="283:5" pos:end="283:35"><expr pos:start="283:5" pos:end="283:34"><name pos:start="283:5" pos:end="283:18"><name pos:start="283:5" pos:end="283:9">avctx</name><operator pos:start="283:10" pos:end="283:11">-&gt;</operator><name pos:start="283:12" pos:end="283:18">pix_fmt</name></name> <operator pos:start="283:20" pos:end="283:20">=</operator> <name pos:start="283:22" pos:end="283:34">PIX_FMT_BGR24</name></expr>;</expr_stmt>



    <return pos:start="287:5" pos:end="287:13">return <expr pos:start="287:12" pos:end="287:12"><literal type="number" pos:start="287:12" pos:end="287:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
