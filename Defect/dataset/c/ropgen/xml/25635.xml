<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25635.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:37">virtio_scsi_load_request</name><parameter_list pos:start="1:38" pos:end="1:69">(<parameter pos:start="1:39" pos:end="1:49"><decl pos:start="1:39" pos:end="1:49"><type pos:start="1:39" pos:end="1:49"><name pos:start="1:39" pos:end="1:46">QEMUFile</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">f</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:68"><decl pos:start="1:52" pos:end="1:68"><type pos:start="1:52" pos:end="1:68"><name pos:start="1:52" pos:end="1:62">SCSIRequest</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:68">sreq</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:15">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">SCSIBus</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">bus</name> <init pos:start="5:18" pos:end="5:28">= <expr pos:start="5:20" pos:end="5:28"><name pos:start="5:20" pos:end="5:28"><name pos:start="5:20" pos:end="5:23">sreq</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:28">bus</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:54"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">VirtIOSCSI</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">s</name> <init pos:start="7:19" pos:end="7:54">= <expr pos:start="7:21" pos:end="7:54"><call pos:start="7:21" pos:end="7:54"><name pos:start="7:21" pos:end="7:32">container_of</name><argument_list pos:start="7:33" pos:end="7:54">(<argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">bus</name></expr></argument>, <argument pos:start="7:39" pos:end="7:48"><expr pos:start="7:39" pos:end="7:48"><name pos:start="7:39" pos:end="7:48">VirtIOSCSI</name></expr></argument>, <argument pos:start="7:51" pos:end="7:53"><expr pos:start="7:51" pos:end="7:53"><name pos:start="7:51" pos:end="7:53">bus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:48"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">VirtIOSCSICommon</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:24">vs</name> <init pos:start="9:26" pos:end="9:48">= <expr pos:start="9:28" pos:end="9:48"><call pos:start="9:28" pos:end="9:48"><name pos:start="9:28" pos:end="9:45">VIRTIO_SCSI_COMMON</name><argument_list pos:start="9:46" pos:end="9:48">(<argument pos:start="9:47" pos:end="9:47"><expr pos:start="9:47" pos:end="9:47"><name pos:start="9:47" pos:end="9:47">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">VirtIOSCSIReq</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">req</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:14">n</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:7">req</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:32"><name pos:start="17:11" pos:end="17:18">g_malloc</name><argument_list pos:start="17:19" pos:end="17:32">(<argument pos:start="17:20" pos:end="17:31"><expr pos:start="17:20" pos:end="17:31"><sizeof pos:start="17:20" pos:end="17:31">sizeof<argument_list pos:start="17:26" pos:end="17:31">(<argument pos:start="17:27" pos:end="17:30"><expr pos:start="17:27" pos:end="17:30"><operator pos:start="17:27" pos:end="17:27">*</operator><name pos:start="17:28" pos:end="17:30">req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:26"><expr pos:start="19:5" pos:end="19:25"><call pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:18">qemu_get_be32s</name><argument_list pos:start="19:19" pos:end="19:25">(<argument pos:start="19:20" pos:end="19:20"><expr pos:start="19:20" pos:end="19:20"><name pos:start="19:20" pos:end="19:20">f</name></expr></argument>, <argument pos:start="19:23" pos:end="19:24"><expr pos:start="19:23" pos:end="19:24"><operator pos:start="19:23" pos:end="19:23">&amp;</operator><name pos:start="19:24" pos:end="19:24">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:36"><expr pos:start="21:5" pos:end="21:35"><call pos:start="21:5" pos:end="21:35"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:35">(<argument pos:start="21:12" pos:end="21:34"><expr pos:start="21:12" pos:end="21:34"><name pos:start="21:12" pos:end="21:12">n</name> <operator pos:start="21:14" pos:end="21:14">&lt;</operator> <name pos:start="21:16" pos:end="21:34"><name pos:start="21:16" pos:end="21:17">vs</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:23">conf</name><operator pos:start="21:24" pos:end="21:24">.</operator><name pos:start="21:25" pos:end="21:34">num_queues</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="38:0"><expr pos:start="23:5" pos:end="23:70"><call pos:start="23:5" pos:end="23:70"><name pos:start="23:5" pos:end="23:19">qemu_get_buffer</name><argument_list pos:start="23:20" pos:end="23:70">(<argument pos:start="23:21" pos:end="23:21"><expr pos:start="23:21" pos:end="23:21"><name pos:start="23:21" pos:end="23:21">f</name></expr></argument>, <argument pos:start="23:24" pos:end="23:50"><expr pos:start="23:24" pos:end="23:50"><operator pos:start="23:24" pos:end="23:24">(</operator><name pos:start="23:25" pos:end="23:32">unsigned</name> <name pos:start="23:34" pos:end="23:37">char</name> <operator pos:start="23:39" pos:end="23:39">*</operator><operator pos:start="23:40" pos:end="23:40">)</operator><operator pos:start="23:41" pos:end="23:41">&amp;</operator><name pos:start="23:42" pos:end="23:50"><name pos:start="23:42" pos:end="23:44">req</name><operator pos:start="23:45" pos:end="23:46">-&gt;</operator><name pos:start="23:47" pos:end="23:50">elem</name></name></expr></argument>, <argument pos:start="23:53" pos:end="23:69"><expr pos:start="23:53" pos:end="23:69"><sizeof pos:start="23:53" pos:end="23:69">sizeof<argument_list pos:start="23:59" pos:end="23:69">(<argument pos:start="23:60" pos:end="23:68"><expr pos:start="23:60" pos:end="23:68"><name pos:start="23:60" pos:end="23:68"><name pos:start="23:60" pos:end="23:62">req</name><operator pos:start="23:63" pos:end="23:64">-&gt;</operator><name pos:start="23:65" pos:end="23:68">elem</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="25:5" pos:end="31:7">/* TODO: add a way for SCSIBusInfo's load_request to fail,

     * and fail migration instead of asserting here.

     * When we do, we might be able to re-enable NDEBUG below.

     */</comment>

<cpp:ifdef pos:start="33:1" pos:end="33:13">#<cpp:directive pos:start="33:2" pos:end="33:6">ifdef</cpp:directive> <name pos:start="33:8" pos:end="33:13">NDEBUG</name></cpp:ifdef>

<cpp:error pos:start="35:1" pos:end="35:44">#<cpp:directive pos:start="35:2" pos:end="35:6">error</cpp:directive> building with NDEBUG is not supported</cpp:error>

<cpp:endif pos:start="37:1" pos:end="37:6">#<cpp:directive pos:start="37:2" pos:end="37:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="39:5" pos:end="39:60"><expr pos:start="39:5" pos:end="39:59"><call pos:start="39:5" pos:end="39:59"><name pos:start="39:5" pos:end="39:10">assert</name><argument_list pos:start="39:11" pos:end="39:59">(<argument pos:start="39:12" pos:end="39:58"><expr pos:start="39:12" pos:end="39:58"><name pos:start="39:12" pos:end="39:27"><name pos:start="39:12" pos:end="39:14">req</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:20">elem</name><operator pos:start="39:21" pos:end="39:21">.</operator><name pos:start="39:22" pos:end="39:27">in_num</name></name> <operator pos:start="39:29" pos:end="39:30">&lt;=</operator> <call pos:start="39:32" pos:end="39:58"><name pos:start="39:32" pos:end="39:41">ARRAY_SIZE</name><argument_list pos:start="39:42" pos:end="39:58">(<argument pos:start="39:43" pos:end="39:57"><expr pos:start="39:43" pos:end="39:57"><name pos:start="39:43" pos:end="39:57"><name pos:start="39:43" pos:end="39:45">req</name><operator pos:start="39:46" pos:end="39:47">-&gt;</operator><name pos:start="39:48" pos:end="39:51">elem</name><operator pos:start="39:52" pos:end="39:52">.</operator><name pos:start="39:53" pos:end="39:57">in_sg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:62"><expr pos:start="41:5" pos:end="41:61"><call pos:start="41:5" pos:end="41:61"><name pos:start="41:5" pos:end="41:10">assert</name><argument_list pos:start="41:11" pos:end="41:61">(<argument pos:start="41:12" pos:end="41:60"><expr pos:start="41:12" pos:end="41:60"><name pos:start="41:12" pos:end="41:28"><name pos:start="41:12" pos:end="41:14">req</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:20">elem</name><operator pos:start="41:21" pos:end="41:21">.</operator><name pos:start="41:22" pos:end="41:28">out_num</name></name> <operator pos:start="41:30" pos:end="41:31">&lt;=</operator> <call pos:start="41:33" pos:end="41:60"><name pos:start="41:33" pos:end="41:42">ARRAY_SIZE</name><argument_list pos:start="41:43" pos:end="41:60">(<argument pos:start="41:44" pos:end="41:59"><expr pos:start="41:44" pos:end="41:59"><name pos:start="41:44" pos:end="41:59"><name pos:start="41:44" pos:end="41:46">req</name><operator pos:start="41:47" pos:end="41:48">-&gt;</operator><name pos:start="41:49" pos:end="41:52">elem</name><operator pos:start="41:53" pos:end="41:53">.</operator><name pos:start="41:54" pos:end="41:59">out_sg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:50"><expr pos:start="43:5" pos:end="43:49"><call pos:start="43:5" pos:end="43:49"><name pos:start="43:5" pos:end="43:25">virtio_scsi_parse_req</name><argument_list pos:start="43:26" pos:end="43:49">(<argument pos:start="43:27" pos:end="43:27"><expr pos:start="43:27" pos:end="43:27"><name pos:start="43:27" pos:end="43:27">s</name></expr></argument>, <argument pos:start="43:30" pos:end="43:43"><expr pos:start="43:30" pos:end="43:43"><name pos:start="43:30" pos:end="43:43"><name pos:start="43:30" pos:end="43:31">vs</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:40">cmd_vqs</name><index pos:start="43:41" pos:end="43:43">[<expr pos:start="43:42" pos:end="43:42"><name pos:start="43:42" pos:end="43:42">n</name></expr>]</index></name></expr></argument>, <argument pos:start="43:46" pos:end="43:48"><expr pos:start="43:46" pos:end="43:48"><name pos:start="43:46" pos:end="43:48">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:23"><expr pos:start="47:5" pos:end="47:22"><call pos:start="47:5" pos:end="47:22"><name pos:start="47:5" pos:end="47:16">scsi_req_ref</name><argument_list pos:start="47:17" pos:end="47:22">(<argument pos:start="47:18" pos:end="47:21"><expr pos:start="47:18" pos:end="47:21"><name pos:start="47:18" pos:end="47:21">sreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:21"><expr pos:start="49:5" pos:end="49:20"><name pos:start="49:5" pos:end="49:13"><name pos:start="49:5" pos:end="49:7">req</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:13">sreq</name></name> <operator pos:start="49:15" pos:end="49:15">=</operator> <name pos:start="49:17" pos:end="49:20">sreq</name></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="61:5"><if pos:start="51:5" pos:end="61:5">if <condition pos:start="51:8" pos:end="51:46">(<expr pos:start="51:9" pos:end="51:45"><name pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:11">req</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:17">sreq</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:22">cmd</name><operator pos:start="51:23" pos:end="51:23">.</operator><name pos:start="51:24" pos:end="51:27">mode</name></name> <operator pos:start="51:29" pos:end="51:30">!=</operator> <name pos:start="51:32" pos:end="51:45">SCSI_XFER_NONE</name></expr>)</condition> <block pos:start="51:48" pos:end="61:5">{<block_content pos:start="53:9" pos:end="59:48">

        <decl_stmt pos:start="53:9" pos:end="55:75"><decl pos:start="53:9" pos:end="55:74"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:20">req_mode</name> <init pos:start="53:22" pos:end="55:74">=

            <expr pos:start="55:13" pos:end="55:74"><operator pos:start="55:13" pos:end="55:13">(</operator><ternary pos:start="55:14" pos:end="55:73"><condition pos:start="55:14" pos:end="55:35"><expr pos:start="55:14" pos:end="55:33"><name pos:start="55:14" pos:end="55:29"><name pos:start="55:14" pos:end="55:16">req</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:22">elem</name><operator pos:start="55:23" pos:end="55:23">.</operator><name pos:start="55:24" pos:end="55:29">in_num</name></name> <operator pos:start="55:31" pos:end="55:31">&gt;</operator> <literal type="number" pos:start="55:33" pos:end="55:33">1</literal></expr> ?</condition><then pos:start="55:37" pos:end="55:54"> <expr pos:start="55:37" pos:end="55:54"><name pos:start="55:37" pos:end="55:54">SCSI_XFER_FROM_DEV</name></expr> </then><else pos:start="55:56" pos:end="55:73">: <expr pos:start="55:58" pos:end="55:73"><name pos:start="55:58" pos:end="55:73">SCSI_XFER_TO_DEV</name></expr></else></ternary><operator pos:start="55:74" pos:end="55:74">)</operator></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="59:9" pos:end="59:48"><expr pos:start="59:9" pos:end="59:47"><call pos:start="59:9" pos:end="59:47"><name pos:start="59:9" pos:end="59:14">assert</name><argument_list pos:start="59:15" pos:end="59:47">(<argument pos:start="59:16" pos:end="59:46"><expr pos:start="59:16" pos:end="59:46"><name pos:start="59:16" pos:end="59:34"><name pos:start="59:16" pos:end="59:18">req</name><operator pos:start="59:19" pos:end="59:20">-&gt;</operator><name pos:start="59:21" pos:end="59:24">sreq</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:29">cmd</name><operator pos:start="59:30" pos:end="59:30">.</operator><name pos:start="59:31" pos:end="59:34">mode</name></name> <operator pos:start="59:36" pos:end="59:37">==</operator> <name pos:start="59:39" pos:end="59:46">req_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="63:5" pos:end="63:15">return <expr pos:start="63:12" pos:end="63:14"><name pos:start="63:12" pos:end="63:14">req</name></expr>;</return>

</block_content>}</block></function>
</unit>
