<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20546.c" pos:tabs="8"><function pos:start="1:1" pos:end="303:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">vmdk_open_vmdk4</name><parameter_list pos:start="1:27" pos:end="5:51">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">bs</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:49"><decl pos:start="3:28" pos:end="3:49"><type pos:start="3:28" pos:end="3:49"><name pos:start="3:28" pos:end="3:43">BlockDriverState</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:49">file</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:36"><decl pos:start="5:28" pos:end="5:36"><type pos:start="5:28" pos:end="5:36"><name pos:start="5:28" pos:end="5:30">int</name></type> <name pos:start="5:32" pos:end="5:36">flags</name></decl></parameter>, <parameter pos:start="5:39" pos:end="5:50"><decl pos:start="5:39" pos:end="5:50"><type pos:start="5:39" pos:end="5:50"><name pos:start="5:39" pos:end="5:43">Error</name> <modifier pos:start="5:45" pos:end="5:45">*</modifier><modifier pos:start="5:46" pos:end="5:46">*</modifier></type><name pos:start="5:47" pos:end="5:50">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="303:1">{<block_content pos:start="9:5" pos:end="301:15">

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">magic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:20">l1_size</name></decl>, <decl pos:start="13:23" pos:end="13:38"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:23" pos:end="13:38">l1_entry_sectors</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:15">VMDK4Header</name></type> <name pos:start="15:17" pos:end="15:22">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:14">VmdkExtent</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:22">extent</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:34"><decl pos:start="19:5" pos:end="19:33"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:17">BDRVVmdkState</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:20">s</name> <init pos:start="19:22" pos:end="19:33">= <expr pos:start="19:24" pos:end="19:33"><name pos:start="19:24" pos:end="19:33"><name pos:start="19:24" pos:end="19:25">bs</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:28">l1_backup_offset</name> <init pos:start="21:30" pos:end="21:32">= <expr pos:start="21:32" pos:end="21:32"><literal type="number" pos:start="21:32" pos:end="21:32">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:67"><expr pos:start="25:5" pos:end="25:66"><name pos:start="25:5" pos:end="25:7">ret</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:66"><name pos:start="25:11" pos:end="25:20">bdrv_pread</name><argument_list pos:start="25:21" pos:end="25:66">(<argument pos:start="25:22" pos:end="25:25"><expr pos:start="25:22" pos:end="25:25"><name pos:start="25:22" pos:end="25:25">file</name></expr></argument>, <argument pos:start="25:28" pos:end="25:40"><expr pos:start="25:28" pos:end="25:40"><sizeof pos:start="25:28" pos:end="25:40">sizeof<argument_list pos:start="25:34" pos:end="25:40">(<argument pos:start="25:35" pos:end="25:39"><expr pos:start="25:35" pos:end="25:39"><name pos:start="25:35" pos:end="25:39">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="25:43" pos:end="25:49"><expr pos:start="25:43" pos:end="25:49"><operator pos:start="25:43" pos:end="25:43">&amp;</operator><name pos:start="25:44" pos:end="25:49">header</name></expr></argument>, <argument pos:start="25:52" pos:end="25:65"><expr pos:start="25:52" pos:end="25:65"><sizeof pos:start="25:52" pos:end="25:65">sizeof<argument_list pos:start="25:58" pos:end="25:65">(<argument pos:start="25:59" pos:end="25:64"><expr pos:start="25:59" pos:end="25:64"><name pos:start="25:59" pos:end="25:64">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:16">(<expr pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:11">ret</name> <operator pos:start="27:13" pos:end="27:13">&lt;</operator> <literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr>)</condition> <block pos:start="27:18" pos:end="37:5">{<block_content pos:start="29:9" pos:end="35:23">

        <expr_stmt pos:start="29:9" pos:end="33:41"><expr pos:start="29:9" pos:end="33:40"><call pos:start="29:9" pos:end="33:40"><name pos:start="29:9" pos:end="29:24">error_setg_errno</name><argument_list pos:start="29:25" pos:end="33:40">(<argument pos:start="29:26" pos:end="29:29"><expr pos:start="29:26" pos:end="29:29"><name pos:start="29:26" pos:end="29:29">errp</name></expr></argument>, <argument pos:start="29:32" pos:end="29:35"><expr pos:start="29:32" pos:end="29:35"><operator pos:start="29:32" pos:end="29:32">-</operator><name pos:start="29:33" pos:end="29:35">ret</name></expr></argument>,

                         <argument pos:start="31:26" pos:end="31:63"><expr pos:start="31:26" pos:end="31:63"><literal type="string" pos:start="31:26" pos:end="31:63">"Could not read header from file '%s'"</literal></expr></argument>,

                         <argument pos:start="33:26" pos:end="33:39"><expr pos:start="33:26" pos:end="33:39"><name pos:start="33:26" pos:end="33:39"><name pos:start="33:26" pos:end="33:29">file</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:39">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:23">return <expr pos:start="35:16" pos:end="35:22"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="61:5"><if pos:start="39:5" pos:end="61:5">if <condition pos:start="39:8" pos:end="39:29">(<expr pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:23"><name pos:start="39:9" pos:end="39:14">header</name><operator pos:start="39:15" pos:end="39:15">.</operator><name pos:start="39:16" pos:end="39:23">capacity</name></name> <operator pos:start="39:25" pos:end="39:26">==</operator> <literal type="number" pos:start="39:28" pos:end="39:28">0</literal></expr>)</condition> <block pos:start="39:31" pos:end="61:5">{<block_content pos:start="41:9" pos:end="59:9">

        <decl_stmt pos:start="41:9" pos:end="41:63"><decl pos:start="41:9" pos:end="41:62"><type pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:16">uint64_t</name></type> <name pos:start="41:18" pos:end="41:28">desc_offset</name> <init pos:start="41:30" pos:end="41:62">= <expr pos:start="41:32" pos:end="41:62"><call pos:start="41:32" pos:end="41:62"><name pos:start="41:32" pos:end="41:42">le64_to_cpu</name><argument_list pos:start="41:43" pos:end="41:62">(<argument pos:start="41:44" pos:end="41:61"><expr pos:start="41:44" pos:end="41:61"><name pos:start="41:44" pos:end="41:61"><name pos:start="41:44" pos:end="41:49">header</name><operator pos:start="41:50" pos:end="41:50">.</operator><name pos:start="41:51" pos:end="41:61">desc_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="43:9" pos:end="59:9"><if pos:start="43:9" pos:end="59:9">if <condition pos:start="43:12" pos:end="43:24">(<expr pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:23">desc_offset</name></expr>)</condition> <block pos:start="43:26" pos:end="59:9">{<block_content pos:start="45:13" pos:end="57:23">

            <decl_stmt pos:start="45:13" pos:end="45:69"><decl pos:start="45:13" pos:end="45:68"><type pos:start="45:13" pos:end="45:18"><name pos:start="45:13" pos:end="45:16">char</name> <modifier pos:start="45:18" pos:end="45:18">*</modifier></type><name pos:start="45:19" pos:end="45:21">buf</name> <init pos:start="45:23" pos:end="45:68">= <expr pos:start="45:25" pos:end="45:68"><call pos:start="45:25" pos:end="45:68"><name pos:start="45:25" pos:end="45:38">vmdk_read_desc</name><argument_list pos:start="45:39" pos:end="45:68">(<argument pos:start="45:40" pos:end="45:43"><expr pos:start="45:40" pos:end="45:43"><name pos:start="45:40" pos:end="45:43">file</name></expr></argument>, <argument pos:start="45:46" pos:end="45:61"><expr pos:start="45:46" pos:end="45:61"><name pos:start="45:46" pos:end="45:56">desc_offset</name> <operator pos:start="45:58" pos:end="45:59">&lt;&lt;</operator> <literal type="number" pos:start="45:61" pos:end="45:61">9</literal></expr></argument>, <argument pos:start="45:64" pos:end="45:67"><expr pos:start="45:64" pos:end="45:67"><name pos:start="45:64" pos:end="45:67">errp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="47:13" pos:end="51:13"><if pos:start="47:13" pos:end="51:13">if <condition pos:start="47:16" pos:end="47:21">(<expr pos:start="47:17" pos:end="47:20"><operator pos:start="47:17" pos:end="47:17">!</operator><name pos:start="47:18" pos:end="47:20">buf</name></expr>)</condition> <block pos:start="47:23" pos:end="51:13">{<block_content pos:start="49:17" pos:end="49:31">

                <return pos:start="49:17" pos:end="49:31">return <expr pos:start="49:24" pos:end="49:30"><operator pos:start="49:24" pos:end="49:24">-</operator><name pos:start="49:25" pos:end="49:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:60"><expr pos:start="53:13" pos:end="53:59"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <call pos:start="53:19" pos:end="53:59"><name pos:start="53:19" pos:end="53:37">vmdk_open_desc_file</name><argument_list pos:start="53:38" pos:end="53:59">(<argument pos:start="53:39" pos:end="53:40"><expr pos:start="53:39" pos:end="53:40"><name pos:start="53:39" pos:end="53:40">bs</name></expr></argument>, <argument pos:start="53:43" pos:end="53:47"><expr pos:start="53:43" pos:end="53:47"><name pos:start="53:43" pos:end="53:47">flags</name></expr></argument>, <argument pos:start="53:50" pos:end="53:52"><expr pos:start="53:50" pos:end="53:52"><name pos:start="53:50" pos:end="53:52">buf</name></expr></argument>, <argument pos:start="53:55" pos:end="53:58"><expr pos:start="53:55" pos:end="53:58"><name pos:start="53:55" pos:end="53:58">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:24"><expr pos:start="55:13" pos:end="55:23"><call pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:18">g_free</name><argument_list pos:start="55:19" pos:end="55:23">(<argument pos:start="55:20" pos:end="55:22"><expr pos:start="55:20" pos:end="55:22"><name pos:start="55:20" pos:end="55:22">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="57:13" pos:end="57:23">return <expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:24">(<expr pos:start="65:9" pos:end="65:23"><operator pos:start="65:9" pos:end="65:9">!</operator><name pos:start="65:10" pos:end="65:23"><name pos:start="65:10" pos:end="65:10">s</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:23">create_type</name></name></expr>)</condition> <block pos:start="65:26" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:54">

        <expr_stmt pos:start="67:9" pos:end="67:54"><expr pos:start="67:9" pos:end="67:53"><name pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:22">create_type</name></name> <operator pos:start="67:24" pos:end="67:24">=</operator> <call pos:start="67:26" pos:end="67:53"><name pos:start="67:26" pos:end="67:33">g_strdup</name><argument_list pos:start="67:34" pos:end="67:53">(<argument pos:start="67:35" pos:end="67:52"><expr pos:start="67:35" pos:end="67:52"><literal type="string" pos:start="67:35" pos:end="67:52">"monolithicSparse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="167:5"><if pos:start="73:5" pos:end="167:5">if <condition pos:start="73:8" pos:end="73:57">(<expr pos:start="73:9" pos:end="73:56"><call pos:start="73:9" pos:end="73:37"><name pos:start="73:9" pos:end="73:19">le64_to_cpu</name><argument_list pos:start="73:20" pos:end="73:37">(<argument pos:start="73:21" pos:end="73:36"><expr pos:start="73:21" pos:end="73:36"><name pos:start="73:21" pos:end="73:36"><name pos:start="73:21" pos:end="73:26">header</name><operator pos:start="73:27" pos:end="73:27">.</operator><name pos:start="73:28" pos:end="73:36">gd_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="73:39" pos:end="73:40">==</operator> <name pos:start="73:42" pos:end="73:56">VMDK4_GD_AT_END</name></expr>)</condition> <block pos:start="73:59" pos:end="167:5">{<block_content pos:start="85:9" pos:end="165:31">

        <comment type="block" pos:start="75:9" pos:end="83:11">/*

         * The footer takes precedence over the header, so read it in. The

         * footer starts at offset -1024 from the end: One sector for the

         * footer, and another one for the end-of-stream marker.

         */</comment>

        <struct pos:start="85:9" pos:end="121:29">struct <block pos:start="85:16" pos:end="121:9">{

            <struct pos:start="87:13" pos:end="97:40">struct <block pos:start="87:20" pos:end="97:13">{

                <decl_stmt pos:start="89:17" pos:end="89:29"><decl pos:start="89:17" pos:end="89:28"><type pos:start="89:17" pos:end="89:24"><name pos:start="89:17" pos:end="89:24">uint64_t</name></type> <name pos:start="89:26" pos:end="89:28">val</name></decl>;</decl_stmt>

                <decl_stmt pos:start="91:17" pos:end="91:30"><decl pos:start="91:17" pos:end="91:29"><type pos:start="91:17" pos:end="91:24"><name pos:start="91:17" pos:end="91:24">uint32_t</name></type> <name pos:start="91:26" pos:end="91:29">size</name></decl>;</decl_stmt>

                <decl_stmt pos:start="93:17" pos:end="93:30"><decl pos:start="93:17" pos:end="93:29"><type pos:start="93:17" pos:end="93:24"><name pos:start="93:17" pos:end="93:24">uint32_t</name></type> <name pos:start="93:26" pos:end="93:29">type</name></decl>;</decl_stmt>

                <decl_stmt pos:start="95:17" pos:end="95:38"><decl pos:start="95:17" pos:end="95:37"><type pos:start="95:17" pos:end="95:23"><name pos:start="95:17" pos:end="95:23">uint8_t</name></type> <name pos:start="95:25" pos:end="95:37"><name pos:start="95:25" pos:end="95:27">pad</name><index pos:start="95:28" pos:end="95:37">[<expr pos:start="95:29" pos:end="95:36"><literal type="number" pos:start="95:29" pos:end="95:31">512</literal> <operator pos:start="95:33" pos:end="95:33">-</operator> <literal type="number" pos:start="95:35" pos:end="95:36">16</literal></expr>]</index></name></decl>;</decl_stmt>

            }</block> <decl pos:start="97:15" pos:end="97:39"><name pos:start="97:15" pos:end="97:25">QEMU_PACKED</name> <name pos:start="97:27" pos:end="97:39">footer_marker</name></decl>;</struct>



            <decl_stmt pos:start="101:13" pos:end="101:27"><decl pos:start="101:13" pos:end="101:26"><type pos:start="101:13" pos:end="101:20"><name pos:start="101:13" pos:end="101:20">uint32_t</name></type> <name pos:start="101:22" pos:end="101:26">magic</name></decl>;</decl_stmt>

            <decl_stmt pos:start="103:13" pos:end="103:31"><decl pos:start="103:13" pos:end="103:30"><type pos:start="103:13" pos:end="103:23"><name pos:start="103:13" pos:end="103:23">VMDK4Header</name></type> <name pos:start="103:25" pos:end="103:30">header</name></decl>;</decl_stmt>

            <decl_stmt pos:start="105:13" pos:end="105:55"><decl pos:start="105:13" pos:end="105:54"><type pos:start="105:13" pos:end="105:19"><name pos:start="105:13" pos:end="105:19">uint8_t</name></type> <name pos:start="105:21" pos:end="105:54"><name pos:start="105:21" pos:end="105:23">pad</name><index pos:start="105:24" pos:end="105:54">[<expr pos:start="105:25" pos:end="105:53"><literal type="number" pos:start="105:25" pos:end="105:29">512</literal> <operator pos:start="105:29" pos:end="105:29">-</operator> <literal type="number" pos:start="105:31" pos:end="105:33">4</literal> <operator pos:start="105:33" pos:end="105:33">-</operator> <sizeof pos:start="105:35" pos:end="105:53">sizeof<argument_list pos:start="105:41" pos:end="105:53">(<argument pos:start="105:42" pos:end="105:52"><expr pos:start="105:42" pos:end="105:52"><name pos:start="105:42" pos:end="105:52">VMDK4Header</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>



            <struct pos:start="109:13" pos:end="119:37">struct <block pos:start="109:20" pos:end="119:13">{

                <decl_stmt pos:start="111:17" pos:end="111:29"><decl pos:start="111:17" pos:end="111:28"><type pos:start="111:17" pos:end="111:24"><name pos:start="111:17" pos:end="111:24">uint64_t</name></type> <name pos:start="111:26" pos:end="111:28">val</name></decl>;</decl_stmt>

                <decl_stmt pos:start="113:17" pos:end="113:30"><decl pos:start="113:17" pos:end="113:29"><type pos:start="113:17" pos:end="113:24"><name pos:start="113:17" pos:end="113:24">uint32_t</name></type> <name pos:start="113:26" pos:end="113:29">size</name></decl>;</decl_stmt>

                <decl_stmt pos:start="115:17" pos:end="115:30"><decl pos:start="115:17" pos:end="115:29"><type pos:start="115:17" pos:end="115:24"><name pos:start="115:17" pos:end="115:24">uint32_t</name></type> <name pos:start="115:26" pos:end="115:29">type</name></decl>;</decl_stmt>

                <decl_stmt pos:start="117:17" pos:end="117:38"><decl pos:start="117:17" pos:end="117:37"><type pos:start="117:17" pos:end="117:23"><name pos:start="117:17" pos:end="117:23">uint8_t</name></type> <name pos:start="117:25" pos:end="117:37"><name pos:start="117:25" pos:end="117:27">pad</name><index pos:start="117:28" pos:end="117:37">[<expr pos:start="117:29" pos:end="117:36"><literal type="number" pos:start="117:29" pos:end="117:31">512</literal> <operator pos:start="117:33" pos:end="117:33">-</operator> <literal type="number" pos:start="117:35" pos:end="117:36">16</literal></expr>]</index></name></decl>;</decl_stmt>

            }</block> <decl pos:start="119:15" pos:end="119:36"><name pos:start="119:15" pos:end="119:25">QEMU_PACKED</name> <name pos:start="119:27" pos:end="119:36">eos_marker</name></decl>;</struct>

        }</block> <decl pos:start="121:11" pos:end="121:28"><name pos:start="121:11" pos:end="121:21">QEMU_PACKED</name> <name pos:start="121:23" pos:end="121:28">footer</name></decl>;</struct>



        <expr_stmt pos:start="125:9" pos:end="129:37"><expr pos:start="125:9" pos:end="129:36"><name pos:start="125:9" pos:end="125:11">ret</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <call pos:start="125:15" pos:end="129:36"><name pos:start="125:15" pos:end="125:24">bdrv_pread</name><argument_list pos:start="125:25" pos:end="129:36">(<argument pos:start="125:26" pos:end="125:29"><expr pos:start="125:26" pos:end="125:29"><name pos:start="125:26" pos:end="125:29">file</name></expr></argument>,

            <argument pos:start="127:13" pos:end="127:48"><expr pos:start="127:13" pos:end="127:48"><name pos:start="127:13" pos:end="127:35"><name pos:start="127:13" pos:end="127:14">bs</name><operator pos:start="127:15" pos:end="127:16">-&gt;</operator><name pos:start="127:17" pos:end="127:20">file</name><operator pos:start="127:21" pos:end="127:22">-&gt;</operator><name pos:start="127:23" pos:end="127:35">total_sectors</name></name> <operator pos:start="127:37" pos:end="127:37">*</operator> <literal type="number" pos:start="127:39" pos:end="127:43">512</literal> <operator pos:start="127:43" pos:end="127:43">-</operator> <literal type="number" pos:start="127:45" pos:end="127:48">1536</literal></expr></argument>,

            <argument pos:start="129:13" pos:end="129:19"><expr pos:start="129:13" pos:end="129:19"><operator pos:start="129:13" pos:end="129:13">&amp;</operator><name pos:start="129:14" pos:end="129:19">footer</name></expr></argument>, <argument pos:start="129:22" pos:end="129:35"><expr pos:start="129:22" pos:end="129:35"><sizeof pos:start="129:22" pos:end="129:35">sizeof<argument_list pos:start="129:28" pos:end="129:35">(<argument pos:start="129:29" pos:end="129:34"><expr pos:start="129:29" pos:end="129:34"><name pos:start="129:29" pos:end="129:34">footer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="131:20">(<expr pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">&lt;</operator> <literal type="number" pos:start="131:19" pos:end="131:19">0</literal></expr>)</condition> <block pos:start="131:22" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:23">

            <expr_stmt pos:start="133:13" pos:end="133:66"><expr pos:start="133:13" pos:end="133:65"><call pos:start="133:13" pos:end="133:65"><name pos:start="133:13" pos:end="133:28">error_setg_errno</name><argument_list pos:start="133:29" pos:end="133:65">(<argument pos:start="133:30" pos:end="133:33"><expr pos:start="133:30" pos:end="133:33"><name pos:start="133:30" pos:end="133:33">errp</name></expr></argument>, <argument pos:start="133:36" pos:end="133:39"><expr pos:start="133:36" pos:end="133:39"><operator pos:start="133:36" pos:end="133:36">-</operator><name pos:start="133:37" pos:end="133:39">ret</name></expr></argument>, <argument pos:start="133:42" pos:end="133:64"><expr pos:start="133:42" pos:end="133:64"><literal type="string" pos:start="133:42" pos:end="133:64">"Failed to read footer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="135:13" pos:end="135:23">return <expr pos:start="135:20" pos:end="135:22"><name pos:start="135:20" pos:end="135:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="141:9" pos:end="141:47">/* Some sanity checks for the footer */</comment>

        <if_stmt pos:start="143:9" pos:end="161:9"><if pos:start="143:9" pos:end="161:9">if <condition pos:start="143:12" pos:end="153:72">(<expr pos:start="143:13" pos:end="153:71"><call pos:start="143:13" pos:end="143:37"><name pos:start="143:13" pos:end="143:23">be32_to_cpu</name><argument_list pos:start="143:24" pos:end="143:37">(<argument pos:start="143:25" pos:end="143:36"><expr pos:start="143:25" pos:end="143:36"><name pos:start="143:25" pos:end="143:36"><name pos:start="143:25" pos:end="143:30">footer</name><operator pos:start="143:31" pos:end="143:31">.</operator><name pos:start="143:32" pos:end="143:36">magic</name></name></expr></argument>)</argument_list></call> <operator pos:start="143:39" pos:end="143:40">!=</operator> <name pos:start="143:42" pos:end="143:52">VMDK4_MAGIC</name> <operator pos:start="143:54" pos:end="143:55">||</operator>

            <call pos:start="145:13" pos:end="145:50"><name pos:start="145:13" pos:end="145:23">le32_to_cpu</name><argument_list pos:start="145:24" pos:end="145:50">(<argument pos:start="145:25" pos:end="145:49"><expr pos:start="145:25" pos:end="145:49"><name pos:start="145:25" pos:end="145:49"><name pos:start="145:25" pos:end="145:30">footer</name><operator pos:start="145:31" pos:end="145:31">.</operator><name pos:start="145:32" pos:end="145:44">footer_marker</name><operator pos:start="145:45" pos:end="145:45">.</operator><name pos:start="145:46" pos:end="145:49">size</name></name></expr></argument>)</argument_list></call> <operator pos:start="145:52" pos:end="145:53">!=</operator> <literal type="number" pos:start="145:55" pos:end="145:55">0</literal>  <operator pos:start="145:58" pos:end="145:59">||</operator>

            <call pos:start="147:13" pos:end="147:50"><name pos:start="147:13" pos:end="147:23">le32_to_cpu</name><argument_list pos:start="147:24" pos:end="147:50">(<argument pos:start="147:25" pos:end="147:49"><expr pos:start="147:25" pos:end="147:49"><name pos:start="147:25" pos:end="147:49"><name pos:start="147:25" pos:end="147:30">footer</name><operator pos:start="147:31" pos:end="147:31">.</operator><name pos:start="147:32" pos:end="147:44">footer_marker</name><operator pos:start="147:45" pos:end="147:45">.</operator><name pos:start="147:46" pos:end="147:49">type</name></name></expr></argument>)</argument_list></call> <operator pos:start="147:52" pos:end="147:53">!=</operator> <name pos:start="147:55" pos:end="147:67">MARKER_FOOTER</name> <operator pos:start="147:69" pos:end="147:70">||</operator>

            <call pos:start="149:13" pos:end="149:46"><name pos:start="149:13" pos:end="149:23">le64_to_cpu</name><argument_list pos:start="149:24" pos:end="149:46">(<argument pos:start="149:25" pos:end="149:45"><expr pos:start="149:25" pos:end="149:45"><name pos:start="149:25" pos:end="149:45"><name pos:start="149:25" pos:end="149:30">footer</name><operator pos:start="149:31" pos:end="149:31">.</operator><name pos:start="149:32" pos:end="149:41">eos_marker</name><operator pos:start="149:42" pos:end="149:42">.</operator><name pos:start="149:43" pos:end="149:45">val</name></name></expr></argument>)</argument_list></call> <operator pos:start="149:48" pos:end="149:49">!=</operator> <literal type="number" pos:start="149:51" pos:end="149:51">0</literal>  <operator pos:start="149:54" pos:end="149:55">||</operator>

            <call pos:start="151:13" pos:end="151:47"><name pos:start="151:13" pos:end="151:23">le32_to_cpu</name><argument_list pos:start="151:24" pos:end="151:47">(<argument pos:start="151:25" pos:end="151:46"><expr pos:start="151:25" pos:end="151:46"><name pos:start="151:25" pos:end="151:46"><name pos:start="151:25" pos:end="151:30">footer</name><operator pos:start="151:31" pos:end="151:31">.</operator><name pos:start="151:32" pos:end="151:41">eos_marker</name><operator pos:start="151:42" pos:end="151:42">.</operator><name pos:start="151:43" pos:end="151:46">size</name></name></expr></argument>)</argument_list></call> <operator pos:start="151:49" pos:end="151:50">!=</operator> <literal type="number" pos:start="151:52" pos:end="151:52">0</literal>  <operator pos:start="151:55" pos:end="151:56">||</operator>

            <call pos:start="153:13" pos:end="153:47"><name pos:start="153:13" pos:end="153:23">le32_to_cpu</name><argument_list pos:start="153:24" pos:end="153:47">(<argument pos:start="153:25" pos:end="153:46"><expr pos:start="153:25" pos:end="153:46"><name pos:start="153:25" pos:end="153:46"><name pos:start="153:25" pos:end="153:30">footer</name><operator pos:start="153:31" pos:end="153:31">.</operator><name pos:start="153:32" pos:end="153:41">eos_marker</name><operator pos:start="153:42" pos:end="153:42">.</operator><name pos:start="153:43" pos:end="153:46">type</name></name></expr></argument>)</argument_list></call> <operator pos:start="153:49" pos:end="153:50">!=</operator> <name pos:start="153:52" pos:end="153:71">MARKER_END_OF_STREAM</name></expr>)</condition>

        <block pos:start="155:9" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:27">

            <expr_stmt pos:start="157:13" pos:end="157:47"><expr pos:start="157:13" pos:end="157:46"><call pos:start="157:13" pos:end="157:46"><name pos:start="157:13" pos:end="157:22">error_setg</name><argument_list pos:start="157:23" pos:end="157:46">(<argument pos:start="157:24" pos:end="157:27"><expr pos:start="157:24" pos:end="157:27"><name pos:start="157:24" pos:end="157:27">errp</name></expr></argument>, <argument pos:start="157:30" pos:end="157:45"><expr pos:start="157:30" pos:end="157:45"><literal type="string" pos:start="157:30" pos:end="157:45">"Invalid footer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="159:13" pos:end="159:27">return <expr pos:start="159:20" pos:end="159:26"><operator pos:start="159:20" pos:end="159:20">-</operator><name pos:start="159:21" pos:end="159:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="165:9" pos:end="165:31"><expr pos:start="165:9" pos:end="165:30"><name pos:start="165:9" pos:end="165:14">header</name> <operator pos:start="165:16" pos:end="165:16">=</operator> <name pos:start="165:18" pos:end="165:30"><name pos:start="165:18" pos:end="165:23">footer</name><operator pos:start="165:24" pos:end="165:24">.</operator><name pos:start="165:25" pos:end="165:30">header</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="171:5" pos:end="199:5"><if pos:start="171:5" pos:end="185:5">if <condition pos:start="171:8" pos:end="171:40">(<expr pos:start="171:9" pos:end="171:39"><call pos:start="171:9" pos:end="171:35"><name pos:start="171:9" pos:end="171:19">le32_to_cpu</name><argument_list pos:start="171:20" pos:end="171:35">(<argument pos:start="171:21" pos:end="171:34"><expr pos:start="171:21" pos:end="171:34"><name pos:start="171:21" pos:end="171:34"><name pos:start="171:21" pos:end="171:26">header</name><operator pos:start="171:27" pos:end="171:27">.</operator><name pos:start="171:28" pos:end="171:34">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="171:37" pos:end="171:37">&gt;</operator> <literal type="number" pos:start="171:39" pos:end="171:39">3</literal></expr>)</condition> <block pos:start="171:42" pos:end="185:5">{<block_content pos:start="173:9" pos:end="183:24">

        <decl_stmt pos:start="173:9" pos:end="173:21"><decl pos:start="173:9" pos:end="173:20"><type pos:start="173:9" pos:end="173:12"><name pos:start="173:9" pos:end="173:12">char</name></type> <name pos:start="173:14" pos:end="173:20"><name pos:start="173:14" pos:end="173:16">buf</name><index pos:start="173:17" pos:end="173:20">[<expr pos:start="173:18" pos:end="173:19"><literal type="number" pos:start="173:18" pos:end="173:19">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt pos:start="175:9" pos:end="177:46"><expr pos:start="175:9" pos:end="177:45"><call pos:start="175:9" pos:end="177:45"><name pos:start="175:9" pos:end="175:16">snprintf</name><argument_list pos:start="175:17" pos:end="177:45">(<argument pos:start="175:18" pos:end="175:20"><expr pos:start="175:18" pos:end="175:20"><name pos:start="175:18" pos:end="175:20">buf</name></expr></argument>, <argument pos:start="175:23" pos:end="175:33"><expr pos:start="175:23" pos:end="175:33"><sizeof pos:start="175:23" pos:end="175:33">sizeof<argument_list pos:start="175:29" pos:end="175:33">(<argument pos:start="175:30" pos:end="175:32"><expr pos:start="175:30" pos:end="175:32"><name pos:start="175:30" pos:end="175:32">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="175:36" pos:end="175:58"><expr pos:start="175:36" pos:end="175:58"><literal type="string" pos:start="175:36" pos:end="175:51">"VMDK version %"</literal> <name pos:start="175:53" pos:end="175:58">PRId32</name></expr></argument>,

                 <argument pos:start="177:18" pos:end="177:44"><expr pos:start="177:18" pos:end="177:44"><call pos:start="177:18" pos:end="177:44"><name pos:start="177:18" pos:end="177:28">le32_to_cpu</name><argument_list pos:start="177:29" pos:end="177:44">(<argument pos:start="177:30" pos:end="177:43"><expr pos:start="177:30" pos:end="177:43"><name pos:start="177:30" pos:end="177:43"><name pos:start="177:30" pos:end="177:35">header</name><operator pos:start="177:36" pos:end="177:36">.</operator><name pos:start="177:37" pos:end="177:43">version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="181:65"><expr pos:start="179:9" pos:end="181:64"><call pos:start="179:9" pos:end="181:64"><name pos:start="179:9" pos:end="179:17">error_set</name><argument_list pos:start="179:18" pos:end="181:64">(<argument pos:start="179:19" pos:end="179:22"><expr pos:start="179:19" pos:end="179:22"><name pos:start="179:19" pos:end="179:22">errp</name></expr></argument>, <argument pos:start="179:25" pos:end="179:57"><expr pos:start="179:25" pos:end="179:57"><name pos:start="179:25" pos:end="179:57">QERR_UNKNOWN_BLOCK_FORMAT_FEATURE</name></expr></argument>,

                  <argument pos:start="181:19" pos:end="181:50"><expr pos:start="181:19" pos:end="181:50"><call pos:start="181:19" pos:end="181:50"><name pos:start="181:19" pos:end="181:46">bdrv_get_device_or_node_name</name><argument_list pos:start="181:47" pos:end="181:50">(<argument pos:start="181:48" pos:end="181:49"><expr pos:start="181:48" pos:end="181:49"><name pos:start="181:48" pos:end="181:49">bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="181:53" pos:end="181:58"><expr pos:start="181:53" pos:end="181:58"><literal type="string" pos:start="181:53" pos:end="181:58">"vmdk"</literal></expr></argument>, <argument pos:start="181:61" pos:end="181:63"><expr pos:start="181:61" pos:end="181:63"><name pos:start="181:61" pos:end="181:63">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="183:9" pos:end="183:24">return <expr pos:start="183:16" pos:end="183:23"><operator pos:start="183:16" pos:end="183:16">-</operator><name pos:start="183:17" pos:end="183:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="185:7" pos:end="199:5">else if <condition pos:start="185:15" pos:end="185:73">(<expr pos:start="185:16" pos:end="185:72"><call pos:start="185:16" pos:end="185:42"><name pos:start="185:16" pos:end="185:26">le32_to_cpu</name><argument_list pos:start="185:27" pos:end="185:42">(<argument pos:start="185:28" pos:end="185:41"><expr pos:start="185:28" pos:end="185:41"><name pos:start="185:28" pos:end="185:41"><name pos:start="185:28" pos:end="185:33">header</name><operator pos:start="185:34" pos:end="185:34">.</operator><name pos:start="185:35" pos:end="185:41">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="185:44" pos:end="185:45">==</operator> <literal type="number" pos:start="185:47" pos:end="185:47">3</literal> <operator pos:start="185:49" pos:end="185:50">&amp;&amp;</operator> <operator pos:start="185:52" pos:end="185:52">(</operator><name pos:start="185:53" pos:end="185:57">flags</name> <operator pos:start="185:59" pos:end="185:59">&amp;</operator> <name pos:start="185:61" pos:end="185:71">BDRV_O_RDWR</name><operator pos:start="185:72" pos:end="185:72">)</operator></expr>)</condition> <block pos:start="185:75" pos:end="199:5">{<block_content pos:start="195:9" pos:end="197:23">

        <comment type="block" pos:start="187:9" pos:end="193:62">/* VMware KB 2064959 explains that version 3 added support for

         * persistent changed block tracking (CBT), and backup software can

         * read it as version=1 if it doesn't care about the changed area

         * information. So we are safe to enable read only. */</comment>

        <expr_stmt pos:start="195:9" pos:end="195:61"><expr pos:start="195:9" pos:end="195:60"><call pos:start="195:9" pos:end="195:60"><name pos:start="195:9" pos:end="195:18">error_setg</name><argument_list pos:start="195:19" pos:end="195:60">(<argument pos:start="195:20" pos:end="195:23"><expr pos:start="195:20" pos:end="195:23"><name pos:start="195:20" pos:end="195:23">errp</name></expr></argument>, <argument pos:start="195:26" pos:end="195:59"><expr pos:start="195:26" pos:end="195:59"><literal type="string" pos:start="195:26" pos:end="195:59">"VMDK version 3 must be read only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="197:9" pos:end="197:23">return <expr pos:start="197:16" pos:end="197:22"><operator pos:start="197:16" pos:end="197:16">-</operator><name pos:start="197:17" pos:end="197:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="203:5" pos:end="209:5"><if pos:start="203:5" pos:end="209:5">if <condition pos:start="203:8" pos:end="203:50">(<expr pos:start="203:9" pos:end="203:49"><call pos:start="203:9" pos:end="203:43"><name pos:start="203:9" pos:end="203:19">le32_to_cpu</name><argument_list pos:start="203:20" pos:end="203:43">(<argument pos:start="203:21" pos:end="203:42"><expr pos:start="203:21" pos:end="203:42"><name pos:start="203:21" pos:end="203:42"><name pos:start="203:21" pos:end="203:26">header</name><operator pos:start="203:27" pos:end="203:27">.</operator><name pos:start="203:28" pos:end="203:42">num_gtes_per_gt</name></name></expr></argument>)</argument_list></call> <operator pos:start="203:45" pos:end="203:45">&gt;</operator> <literal type="number" pos:start="203:47" pos:end="203:49">512</literal></expr>)</condition> <block pos:start="203:52" pos:end="209:5">{<block_content pos:start="205:9" pos:end="207:23">

        <expr_stmt pos:start="205:9" pos:end="205:50"><expr pos:start="205:9" pos:end="205:49"><call pos:start="205:9" pos:end="205:49"><name pos:start="205:9" pos:end="205:18">error_setg</name><argument_list pos:start="205:19" pos:end="205:49">(<argument pos:start="205:20" pos:end="205:23"><expr pos:start="205:20" pos:end="205:23"><name pos:start="205:20" pos:end="205:23">errp</name></expr></argument>, <argument pos:start="205:26" pos:end="205:48"><expr pos:start="205:26" pos:end="205:48"><literal type="string" pos:start="205:26" pos:end="205:48">"L2 table size too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="207:9" pos:end="207:23">return <expr pos:start="207:16" pos:end="207:22"><operator pos:start="207:16" pos:end="207:16">-</operator><name pos:start="207:17" pos:end="207:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="213:5" pos:end="215:58"><expr pos:start="213:5" pos:end="215:57"><name pos:start="213:5" pos:end="213:20">l1_entry_sectors</name> <operator pos:start="213:22" pos:end="213:22">=</operator> <call pos:start="213:24" pos:end="213:58"><name pos:start="213:24" pos:end="213:34">le32_to_cpu</name><argument_list pos:start="213:35" pos:end="213:58">(<argument pos:start="213:36" pos:end="213:57"><expr pos:start="213:36" pos:end="213:57"><name pos:start="213:36" pos:end="213:57"><name pos:start="213:36" pos:end="213:41">header</name><operator pos:start="213:42" pos:end="213:42">.</operator><name pos:start="213:43" pos:end="213:57">num_gtes_per_gt</name></name></expr></argument>)</argument_list></call>

                        <operator pos:start="215:25" pos:end="215:25">*</operator> <call pos:start="215:27" pos:end="215:57"><name pos:start="215:27" pos:end="215:37">le64_to_cpu</name><argument_list pos:start="215:38" pos:end="215:57">(<argument pos:start="215:39" pos:end="215:56"><expr pos:start="215:39" pos:end="215:56"><name pos:start="215:39" pos:end="215:56"><name pos:start="215:39" pos:end="215:44">header</name><operator pos:start="215:45" pos:end="215:45">.</operator><name pos:start="215:46" pos:end="215:56">granularity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="217:5" pos:end="223:5"><if pos:start="217:5" pos:end="223:5">if <condition pos:start="217:8" pos:end="217:30">(<expr pos:start="217:9" pos:end="217:29"><name pos:start="217:9" pos:end="217:24">l1_entry_sectors</name> <operator pos:start="217:26" pos:end="217:27">==</operator> <literal type="number" pos:start="217:29" pos:end="217:29">0</literal></expr>)</condition> <block pos:start="217:32" pos:end="223:5">{<block_content pos:start="219:9" pos:end="221:23">

        <expr_stmt pos:start="219:9" pos:end="219:53"><expr pos:start="219:9" pos:end="219:52"><call pos:start="219:9" pos:end="219:52"><name pos:start="219:9" pos:end="219:18">error_setg</name><argument_list pos:start="219:19" pos:end="219:52">(<argument pos:start="219:20" pos:end="219:23"><expr pos:start="219:20" pos:end="219:23"><name pos:start="219:20" pos:end="219:23">errp</name></expr></argument>, <argument pos:start="219:26" pos:end="219:51"><expr pos:start="219:26" pos:end="219:51"><literal type="string" pos:start="219:26" pos:end="219:51">"L1 entry size is invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="221:9" pos:end="221:23">return <expr pos:start="221:16" pos:end="221:22"><operator pos:start="221:16" pos:end="221:16">-</operator><name pos:start="221:17" pos:end="221:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="225:5" pos:end="227:35"><expr pos:start="225:5" pos:end="227:34"><name pos:start="225:5" pos:end="225:11">l1_size</name> <operator pos:start="225:13" pos:end="225:13">=</operator> <operator pos:start="225:15" pos:end="225:15">(</operator><call pos:start="225:16" pos:end="225:43"><name pos:start="225:16" pos:end="225:26">le64_to_cpu</name><argument_list pos:start="225:27" pos:end="225:43">(<argument pos:start="225:28" pos:end="225:42"><expr pos:start="225:28" pos:end="225:42"><name pos:start="225:28" pos:end="225:42"><name pos:start="225:28" pos:end="225:33">header</name><operator pos:start="225:34" pos:end="225:34">.</operator><name pos:start="225:35" pos:end="225:42">capacity</name></name></expr></argument>)</argument_list></call> <operator pos:start="225:45" pos:end="225:45">+</operator> <name pos:start="225:47" pos:end="225:62">l1_entry_sectors</name> <operator pos:start="225:64" pos:end="225:64">-</operator> <literal type="number" pos:start="225:66" pos:end="225:66">1</literal><operator pos:start="225:67" pos:end="225:67">)</operator>

                <operator pos:start="227:17" pos:end="227:17">/</operator> <name pos:start="227:19" pos:end="227:34">l1_entry_sectors</name></expr>;</expr_stmt>

    <if_stmt pos:start="229:5" pos:end="233:5"><if pos:start="229:5" pos:end="233:5">if <condition pos:start="229:8" pos:end="229:51">(<expr pos:start="229:9" pos:end="229:50"><call pos:start="229:9" pos:end="229:33"><name pos:start="229:9" pos:end="229:19">le32_to_cpu</name><argument_list pos:start="229:20" pos:end="229:33">(<argument pos:start="229:21" pos:end="229:32"><expr pos:start="229:21" pos:end="229:32"><name pos:start="229:21" pos:end="229:32"><name pos:start="229:21" pos:end="229:26">header</name><operator pos:start="229:27" pos:end="229:27">.</operator><name pos:start="229:28" pos:end="229:32">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="229:35" pos:end="229:35">&amp;</operator> <name pos:start="229:37" pos:end="229:50">VMDK4_FLAG_RGD</name></expr>)</condition> <block pos:start="229:53" pos:end="233:5">{<block_content pos:start="231:9" pos:end="231:63">

        <expr_stmt pos:start="231:9" pos:end="231:63"><expr pos:start="231:9" pos:end="231:62"><name pos:start="231:9" pos:end="231:24">l1_backup_offset</name> <operator pos:start="231:26" pos:end="231:26">=</operator> <call pos:start="231:28" pos:end="231:57"><name pos:start="231:28" pos:end="231:38">le64_to_cpu</name><argument_list pos:start="231:39" pos:end="231:57">(<argument pos:start="231:40" pos:end="231:56"><expr pos:start="231:40" pos:end="231:56"><name pos:start="231:40" pos:end="231:56"><name pos:start="231:40" pos:end="231:45">header</name><operator pos:start="231:46" pos:end="231:46">.</operator><name pos:start="231:47" pos:end="231:56">rgd_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="231:59" pos:end="231:60">&lt;&lt;</operator> <literal type="number" pos:start="231:62" pos:end="231:62">9</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="235:5" pos:end="245:5"><if pos:start="235:5" pos:end="245:5">if <condition pos:start="235:8" pos:end="235:65">(<expr pos:start="235:9" pos:end="235:64"><call pos:start="235:9" pos:end="235:29"><name pos:start="235:9" pos:end="235:23">bdrv_nb_sectors</name><argument_list pos:start="235:24" pos:end="235:29">(<argument pos:start="235:25" pos:end="235:28"><expr pos:start="235:25" pos:end="235:28"><name pos:start="235:25" pos:end="235:28">file</name></expr></argument>)</argument_list></call> <operator pos:start="235:31" pos:end="235:31">&lt;</operator> <call pos:start="235:33" pos:end="235:64"><name pos:start="235:33" pos:end="235:43">le64_to_cpu</name><argument_list pos:start="235:44" pos:end="235:64">(<argument pos:start="235:45" pos:end="235:63"><expr pos:start="235:45" pos:end="235:63"><name pos:start="235:45" pos:end="235:63"><name pos:start="235:45" pos:end="235:50">header</name><operator pos:start="235:51" pos:end="235:51">.</operator><name pos:start="235:52" pos:end="235:63">grain_offset</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="235:67" pos:end="245:5">{<block_content pos:start="237:9" pos:end="243:23">

        <expr_stmt pos:start="237:9" pos:end="241:50"><expr pos:start="237:9" pos:end="241:49"><call pos:start="237:9" pos:end="241:49"><name pos:start="237:9" pos:end="237:18">error_setg</name><argument_list pos:start="237:19" pos:end="241:49">(<argument pos:start="237:20" pos:end="237:23"><expr pos:start="237:20" pos:end="237:23"><name pos:start="237:20" pos:end="237:23">errp</name></expr></argument>, <argument pos:start="237:26" pos:end="237:79"><expr pos:start="237:26" pos:end="237:79"><literal type="string" pos:start="237:26" pos:end="237:63">"File truncated, expecting at least %"</literal> <name pos:start="237:65" pos:end="237:70">PRId64</name> <literal type="string" pos:start="237:72" pos:end="237:79">" bytes"</literal></expr></argument>,

                   <argument pos:start="239:20" pos:end="241:48"><expr pos:start="239:20" pos:end="241:48"><operator pos:start="239:20" pos:end="239:20">(</operator><name pos:start="239:21" pos:end="239:27">int64_t</name><operator pos:start="239:28" pos:end="239:28">)</operator><operator pos:start="239:29" pos:end="239:29">(</operator><call pos:start="239:30" pos:end="239:61"><name pos:start="239:30" pos:end="239:40">le64_to_cpu</name><argument_list pos:start="239:41" pos:end="239:61">(<argument pos:start="239:42" pos:end="239:60"><expr pos:start="239:42" pos:end="239:60"><name pos:start="239:42" pos:end="239:60"><name pos:start="239:42" pos:end="239:47">header</name><operator pos:start="239:48" pos:end="239:48">.</operator><name pos:start="239:49" pos:end="239:60">grain_offset</name></name></expr></argument>)</argument_list></call>

                             <operator pos:start="241:30" pos:end="241:30">*</operator> <name pos:start="241:32" pos:end="241:47">BDRV_SECTOR_SIZE</name><operator pos:start="241:48" pos:end="241:48">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="243:9" pos:end="243:23">return <expr pos:start="243:16" pos:end="243:22"><operator pos:start="243:16" pos:end="243:16">-</operator><name pos:start="243:17" pos:end="243:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="249:5" pos:end="265:32"><expr pos:start="249:5" pos:end="265:31"><name pos:start="249:5" pos:end="249:7">ret</name> <operator pos:start="249:9" pos:end="249:9">=</operator> <call pos:start="249:11" pos:end="265:31"><name pos:start="249:11" pos:end="249:25">vmdk_add_extent</name><argument_list pos:start="249:26" pos:end="265:31">(<argument pos:start="249:27" pos:end="249:28"><expr pos:start="249:27" pos:end="249:28"><name pos:start="249:27" pos:end="249:28">bs</name></expr></argument>, <argument pos:start="249:31" pos:end="249:34"><expr pos:start="249:31" pos:end="249:34"><name pos:start="249:31" pos:end="249:34">file</name></expr></argument>, <argument pos:start="249:37" pos:end="249:41"><expr pos:start="249:37" pos:end="249:41"><name pos:start="249:37" pos:end="249:41">false</name></expr></argument>,

                          <argument pos:start="251:27" pos:end="251:54"><expr pos:start="251:27" pos:end="251:54"><call pos:start="251:27" pos:end="251:54"><name pos:start="251:27" pos:end="251:37">le64_to_cpu</name><argument_list pos:start="251:38" pos:end="251:54">(<argument pos:start="251:39" pos:end="251:53"><expr pos:start="251:39" pos:end="251:53"><name pos:start="251:39" pos:end="251:53"><name pos:start="251:39" pos:end="251:44">header</name><operator pos:start="251:45" pos:end="251:45">.</operator><name pos:start="251:46" pos:end="251:53">capacity</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="253:27" pos:end="253:60"><expr pos:start="253:27" pos:end="253:60"><call pos:start="253:27" pos:end="253:55"><name pos:start="253:27" pos:end="253:37">le64_to_cpu</name><argument_list pos:start="253:38" pos:end="253:55">(<argument pos:start="253:39" pos:end="253:54"><expr pos:start="253:39" pos:end="253:54"><name pos:start="253:39" pos:end="253:54"><name pos:start="253:39" pos:end="253:44">header</name><operator pos:start="253:45" pos:end="253:45">.</operator><name pos:start="253:46" pos:end="253:54">gd_offset</name></name></expr></argument>)</argument_list></call> <operator pos:start="253:57" pos:end="253:58">&lt;&lt;</operator> <literal type="number" pos:start="253:60" pos:end="253:60">9</literal></expr></argument>,

                          <argument pos:start="255:27" pos:end="255:42"><expr pos:start="255:27" pos:end="255:42"><name pos:start="255:27" pos:end="255:42">l1_backup_offset</name></expr></argument>,

                          <argument pos:start="257:27" pos:end="257:33"><expr pos:start="257:27" pos:end="257:33"><name pos:start="257:27" pos:end="257:33">l1_size</name></expr></argument>,

                          <argument pos:start="259:27" pos:end="259:61"><expr pos:start="259:27" pos:end="259:61"><call pos:start="259:27" pos:end="259:61"><name pos:start="259:27" pos:end="259:37">le32_to_cpu</name><argument_list pos:start="259:38" pos:end="259:61">(<argument pos:start="259:39" pos:end="259:60"><expr pos:start="259:39" pos:end="259:60"><name pos:start="259:39" pos:end="259:60"><name pos:start="259:39" pos:end="259:44">header</name><operator pos:start="259:45" pos:end="259:45">.</operator><name pos:start="259:46" pos:end="259:60">num_gtes_per_gt</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="261:27" pos:end="261:57"><expr pos:start="261:27" pos:end="261:57"><call pos:start="261:27" pos:end="261:57"><name pos:start="261:27" pos:end="261:37">le64_to_cpu</name><argument_list pos:start="261:38" pos:end="261:57">(<argument pos:start="261:39" pos:end="261:56"><expr pos:start="261:39" pos:end="261:56"><name pos:start="261:39" pos:end="261:56"><name pos:start="261:39" pos:end="261:44">header</name><operator pos:start="261:45" pos:end="261:45">.</operator><name pos:start="261:46" pos:end="261:56">granularity</name></name></expr></argument>)</argument_list></call></expr></argument>,

                          <argument pos:start="263:27" pos:end="263:33"><expr pos:start="263:27" pos:end="263:33"><operator pos:start="263:27" pos:end="263:27">&amp;</operator><name pos:start="263:28" pos:end="263:33">extent</name></expr></argument>,

                          <argument pos:start="265:27" pos:end="265:30"><expr pos:start="265:27" pos:end="265:30"><name pos:start="265:27" pos:end="265:30">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="267:5" pos:end="271:5"><if pos:start="267:5" pos:end="271:5">if <condition pos:start="267:8" pos:end="267:16">(<expr pos:start="267:9" pos:end="267:15"><name pos:start="267:9" pos:end="267:11">ret</name> <operator pos:start="267:13" pos:end="267:13">&lt;</operator> <literal type="number" pos:start="267:15" pos:end="267:15">0</literal></expr>)</condition> <block pos:start="267:18" pos:end="271:5">{<block_content pos:start="269:9" pos:end="269:19">

        <return pos:start="269:9" pos:end="269:19">return <expr pos:start="269:16" pos:end="269:18"><name pos:start="269:16" pos:end="269:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="273:5" pos:end="275:75"><expr pos:start="273:5" pos:end="275:74"><name pos:start="273:5" pos:end="273:22"><name pos:start="273:5" pos:end="273:10">extent</name><operator pos:start="273:11" pos:end="273:12">-&gt;</operator><name pos:start="273:13" pos:end="273:22">compressed</name></name> <operator pos:start="273:24" pos:end="273:24">=</operator>

        <call pos:start="275:9" pos:end="275:45"><name pos:start="275:9" pos:end="275:19">le16_to_cpu</name><argument_list pos:start="275:20" pos:end="275:45">(<argument pos:start="275:21" pos:end="275:44"><expr pos:start="275:21" pos:end="275:44"><name pos:start="275:21" pos:end="275:44"><name pos:start="275:21" pos:end="275:26">header</name><operator pos:start="275:27" pos:end="275:27">.</operator><name pos:start="275:28" pos:end="275:44">compressAlgorithm</name></name></expr></argument>)</argument_list></call> <operator pos:start="275:47" pos:end="275:48">==</operator> <name pos:start="275:50" pos:end="275:74">VMDK4_COMPRESSION_DEFLATE</name></expr>;</expr_stmt>

    <if_stmt pos:start="277:5" pos:end="283:5"><if pos:start="277:5" pos:end="283:5">if <condition pos:start="277:8" pos:end="277:27">(<expr pos:start="277:9" pos:end="277:26"><name pos:start="277:9" pos:end="277:26"><name pos:start="277:9" pos:end="277:14">extent</name><operator pos:start="277:15" pos:end="277:16">-&gt;</operator><name pos:start="277:17" pos:end="277:26">compressed</name></name></expr>)</condition> <block pos:start="277:29" pos:end="283:5">{<block_content pos:start="279:9" pos:end="281:53">

        <expr_stmt pos:start="279:9" pos:end="279:31"><expr pos:start="279:9" pos:end="279:30"><call pos:start="279:9" pos:end="279:30"><name pos:start="279:9" pos:end="279:14">g_free</name><argument_list pos:start="279:15" pos:end="279:30">(<argument pos:start="279:16" pos:end="279:29"><expr pos:start="279:16" pos:end="279:29"><name pos:start="279:16" pos:end="279:29"><name pos:start="279:16" pos:end="279:16">s</name><operator pos:start="279:17" pos:end="279:18">-&gt;</operator><name pos:start="279:19" pos:end="279:29">create_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="281:9" pos:end="281:53"><expr pos:start="281:9" pos:end="281:52"><name pos:start="281:9" pos:end="281:22"><name pos:start="281:9" pos:end="281:9">s</name><operator pos:start="281:10" pos:end="281:11">-&gt;</operator><name pos:start="281:12" pos:end="281:22">create_type</name></name> <operator pos:start="281:24" pos:end="281:24">=</operator> <call pos:start="281:26" pos:end="281:52"><name pos:start="281:26" pos:end="281:33">g_strdup</name><argument_list pos:start="281:34" pos:end="281:52">(<argument pos:start="281:35" pos:end="281:51"><expr pos:start="281:35" pos:end="281:51"><literal type="string" pos:start="281:35" pos:end="281:51">"streamOptimized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="285:5" pos:end="285:71"><expr pos:start="285:5" pos:end="285:70"><name pos:start="285:5" pos:end="285:22"><name pos:start="285:5" pos:end="285:10">extent</name><operator pos:start="285:11" pos:end="285:12">-&gt;</operator><name pos:start="285:13" pos:end="285:22">has_marker</name></name> <operator pos:start="285:24" pos:end="285:24">=</operator> <call pos:start="285:26" pos:end="285:50"><name pos:start="285:26" pos:end="285:36">le32_to_cpu</name><argument_list pos:start="285:37" pos:end="285:50">(<argument pos:start="285:38" pos:end="285:49"><expr pos:start="285:38" pos:end="285:49"><name pos:start="285:38" pos:end="285:49"><name pos:start="285:38" pos:end="285:43">header</name><operator pos:start="285:44" pos:end="285:44">.</operator><name pos:start="285:45" pos:end="285:49">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="285:52" pos:end="285:52">&amp;</operator> <name pos:start="285:54" pos:end="285:70">VMDK4_FLAG_MARKER</name></expr>;</expr_stmt>

    <expr_stmt pos:start="287:5" pos:end="287:50"><expr pos:start="287:5" pos:end="287:49"><name pos:start="287:5" pos:end="287:19"><name pos:start="287:5" pos:end="287:10">extent</name><operator pos:start="287:11" pos:end="287:12">-&gt;</operator><name pos:start="287:13" pos:end="287:19">version</name></name> <operator pos:start="287:21" pos:end="287:21">=</operator> <call pos:start="287:23" pos:end="287:49"><name pos:start="287:23" pos:end="287:33">le32_to_cpu</name><argument_list pos:start="287:34" pos:end="287:49">(<argument pos:start="287:35" pos:end="287:48"><expr pos:start="287:35" pos:end="287:48"><name pos:start="287:35" pos:end="287:48"><name pos:start="287:35" pos:end="287:40">header</name><operator pos:start="287:41" pos:end="287:41">.</operator><name pos:start="287:42" pos:end="287:48">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:79"><expr pos:start="289:5" pos:end="289:78"><name pos:start="289:5" pos:end="289:26"><name pos:start="289:5" pos:end="289:10">extent</name><operator pos:start="289:11" pos:end="289:12">-&gt;</operator><name pos:start="289:13" pos:end="289:26">has_zero_grain</name></name> <operator pos:start="289:28" pos:end="289:28">=</operator> <call pos:start="289:30" pos:end="289:54"><name pos:start="289:30" pos:end="289:40">le32_to_cpu</name><argument_list pos:start="289:41" pos:end="289:54">(<argument pos:start="289:42" pos:end="289:53"><expr pos:start="289:42" pos:end="289:53"><name pos:start="289:42" pos:end="289:53"><name pos:start="289:42" pos:end="289:47">header</name><operator pos:start="289:48" pos:end="289:48">.</operator><name pos:start="289:49" pos:end="289:53">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="289:56" pos:end="289:56">&amp;</operator> <name pos:start="289:58" pos:end="289:78">VMDK4_FLAG_ZERO_GRAIN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:45"><expr pos:start="291:5" pos:end="291:44"><name pos:start="291:5" pos:end="291:7">ret</name> <operator pos:start="291:9" pos:end="291:9">=</operator> <call pos:start="291:11" pos:end="291:44"><name pos:start="291:11" pos:end="291:26">vmdk_init_tables</name><argument_list pos:start="291:27" pos:end="291:44">(<argument pos:start="291:28" pos:end="291:29"><expr pos:start="291:28" pos:end="291:29"><name pos:start="291:28" pos:end="291:29">bs</name></expr></argument>, <argument pos:start="291:32" pos:end="291:37"><expr pos:start="291:32" pos:end="291:37"><name pos:start="291:32" pos:end="291:37">extent</name></expr></argument>, <argument pos:start="291:40" pos:end="291:43"><expr pos:start="291:40" pos:end="291:43"><name pos:start="291:40" pos:end="291:43">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="293:5" pos:end="299:5"><if pos:start="293:5" pos:end="299:5">if <condition pos:start="293:8" pos:end="293:12">(<expr pos:start="293:9" pos:end="293:11"><name pos:start="293:9" pos:end="293:11">ret</name></expr>)</condition> <block pos:start="293:14" pos:end="299:5">{<block_content pos:start="297:9" pos:end="297:34">

        <comment type="block" pos:start="295:9" pos:end="295:54">/* free extent allocated by vmdk_add_extent */</comment>

        <expr_stmt pos:start="297:9" pos:end="297:34"><expr pos:start="297:9" pos:end="297:33"><call pos:start="297:9" pos:end="297:33"><name pos:start="297:9" pos:end="297:29">vmdk_free_last_extent</name><argument_list pos:start="297:30" pos:end="297:33">(<argument pos:start="297:31" pos:end="297:32"><expr pos:start="297:31" pos:end="297:32"><name pos:start="297:31" pos:end="297:32">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="301:5" pos:end="301:15">return <expr pos:start="301:12" pos:end="301:14"><name pos:start="301:12" pos:end="301:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
