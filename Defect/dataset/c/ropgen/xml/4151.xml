<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4151.c" pos:tabs="8"><function pos:start="1:1" pos:end="197:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:29">migration_thread</name><parameter_list pos:start="1:30" pos:end="1:43">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:36"><name pos:start="1:31" pos:end="1:34">void</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="197:1">{<block_content pos:start="5:5" pos:end="195:16">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MigrationState</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:55"><decl pos:start="7:5" pos:end="7:54"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:24">initial_time</name> <init pos:start="7:26" pos:end="7:54">= <expr pos:start="7:28" pos:end="7:54"><call pos:start="7:28" pos:end="7:54"><name pos:start="7:28" pos:end="7:44">qemu_get_clock_ms</name><argument_list pos:start="7:45" pos:end="7:54">(<argument pos:start="7:46" pos:end="7:53"><expr pos:start="7:46" pos:end="7:53"><name pos:start="7:46" pos:end="7:53">rt_clock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:25">initial_bytes</name> <init pos:start="9:27" pos:end="9:29">= <expr pos:start="9:29" pos:end="9:29"><literal type="number" pos:start="9:29" pos:end="9:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:20">max_size</name> <init pos:start="11:22" pos:end="11:24">= <expr pos:start="11:24" pos:end="11:24"><literal type="number" pos:start="11:24" pos:end="11:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:22">start_time</name> <init pos:start="13:24" pos:end="13:37">= <expr pos:start="13:26" pos:end="13:37"><name pos:start="13:26" pos:end="13:37">initial_time</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">bool</name></type> <name pos:start="15:10" pos:end="15:23">old_vm_running</name> <init pos:start="15:25" pos:end="15:31">= <expr pos:start="15:27" pos:end="15:31"><name pos:start="15:27" pos:end="15:31">false</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:34"><expr pos:start="19:5" pos:end="19:33"><call pos:start="19:5" pos:end="19:33"><name pos:start="19:5" pos:end="19:11">DPRINTF</name><argument_list pos:start="19:12" pos:end="19:33">(<argument pos:start="19:13" pos:end="19:32"><expr pos:start="19:13" pos:end="19:32"><literal type="string" pos:start="19:13" pos:end="19:32">"beginning savevm\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:49"><expr pos:start="21:5" pos:end="21:48"><call pos:start="21:5" pos:end="21:48"><name pos:start="21:5" pos:end="21:27">qemu_savevm_state_begin</name><argument_list pos:start="21:28" pos:end="21:48">(<argument pos:start="21:29" pos:end="21:35"><expr pos:start="21:29" pos:end="21:35"><name pos:start="21:29" pos:end="21:35"><name pos:start="21:29" pos:end="21:29">s</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:35">file</name></name></expr></argument>, <argument pos:start="21:38" pos:end="21:47"><expr pos:start="21:38" pos:end="21:47"><operator pos:start="21:38" pos:end="21:38">&amp;</operator><name pos:start="21:39" pos:end="21:47"><name pos:start="21:39" pos:end="21:39">s</name><operator pos:start="21:40" pos:end="21:41">-&gt;</operator><name pos:start="21:42" pos:end="21:47">params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="25:5" pos:end="163:5">while <condition pos:start="25:11" pos:end="25:40">(<expr pos:start="25:12" pos:end="25:39"><name pos:start="25:12" pos:end="25:19"><name pos:start="25:12" pos:end="25:12">s</name><operator pos:start="25:13" pos:end="25:14">-&gt;</operator><name pos:start="25:15" pos:end="25:19">state</name></name> <operator pos:start="25:21" pos:end="25:22">==</operator> <name pos:start="25:24" pos:end="25:39">MIG_STATE_ACTIVE</name></expr>)</condition> <block pos:start="25:42" pos:end="163:5">{<block_content pos:start="27:9" pos:end="161:9">

        <decl_stmt pos:start="27:9" pos:end="27:29"><decl pos:start="27:9" pos:end="27:28"><type pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:15">int64_t</name></type> <name pos:start="27:17" pos:end="27:28">current_time</name></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:30"><decl pos:start="29:9" pos:end="29:29"><type pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:16">uint64_t</name></type> <name pos:start="29:18" pos:end="29:29">pending_size</name></decl>;</decl_stmt>



        <if_stmt pos:start="33:9" pos:end="97:9"><if pos:start="33:9" pos:end="97:9">if <condition pos:start="33:12" pos:end="33:43">(<expr pos:start="33:13" pos:end="33:42"><operator pos:start="33:13" pos:end="33:13">!</operator><call pos:start="33:14" pos:end="33:42"><name pos:start="33:14" pos:end="33:33">qemu_file_rate_limit</name><argument_list pos:start="33:34" pos:end="33:42">(<argument pos:start="33:35" pos:end="33:41"><expr pos:start="33:35" pos:end="33:41"><name pos:start="33:35" pos:end="33:41"><name pos:start="33:35" pos:end="33:35">s</name><operator pos:start="33:36" pos:end="33:37">-&gt;</operator><name pos:start="33:38" pos:end="33:41">file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:45" pos:end="97:9">{<block_content pos:start="35:13" pos:end="95:13">

            <expr_stmt pos:start="35:13" pos:end="35:33"><expr pos:start="35:13" pos:end="35:32"><call pos:start="35:13" pos:end="35:32"><name pos:start="35:13" pos:end="35:19">DPRINTF</name><argument_list pos:start="35:20" pos:end="35:32">(<argument pos:start="35:21" pos:end="35:31"><expr pos:start="35:21" pos:end="35:31"><literal type="string" pos:start="35:21" pos:end="35:31">"iterate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:72"><expr pos:start="37:13" pos:end="37:71"><name pos:start="37:13" pos:end="37:24">pending_size</name> <operator pos:start="37:26" pos:end="37:26">=</operator> <call pos:start="37:28" pos:end="37:71"><name pos:start="37:28" pos:end="37:52">qemu_savevm_state_pending</name><argument_list pos:start="37:53" pos:end="37:71">(<argument pos:start="37:54" pos:end="37:60"><expr pos:start="37:54" pos:end="37:60"><name pos:start="37:54" pos:end="37:60"><name pos:start="37:54" pos:end="37:54">s</name><operator pos:start="37:55" pos:end="37:56">-&gt;</operator><name pos:start="37:57" pos:end="37:60">file</name></name></expr></argument>, <argument pos:start="37:63" pos:end="37:70"><expr pos:start="37:63" pos:end="37:70"><name pos:start="37:63" pos:end="37:70">max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:74"><expr pos:start="39:13" pos:end="39:73"><call pos:start="39:13" pos:end="39:73"><name pos:start="39:13" pos:end="39:19">DPRINTF</name><argument_list pos:start="39:20" pos:end="39:73">(<argument pos:start="39:21" pos:end="39:48"><expr pos:start="39:21" pos:end="39:48"><literal type="string" pos:start="39:21" pos:end="39:48">"pending size %lu max %lu\n"</literal></expr></argument>, <argument pos:start="39:51" pos:end="39:62"><expr pos:start="39:51" pos:end="39:62"><name pos:start="39:51" pos:end="39:62">pending_size</name></expr></argument>, <argument pos:start="39:65" pos:end="39:72"><expr pos:start="39:65" pos:end="39:72"><name pos:start="39:65" pos:end="39:72">max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="41:13" pos:end="95:13"><if pos:start="41:13" pos:end="45:13">if <condition pos:start="41:16" pos:end="41:57">(<expr pos:start="41:17" pos:end="41:56"><name pos:start="41:17" pos:end="41:28">pending_size</name> <operator pos:start="41:30" pos:end="41:31">&amp;&amp;</operator> <name pos:start="41:33" pos:end="41:44">pending_size</name> <operator pos:start="41:46" pos:end="41:47">&gt;=</operator> <name pos:start="41:49" pos:end="41:56">max_size</name></expr>)</condition> <block pos:start="41:59" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:51">

                <expr_stmt pos:start="43:17" pos:end="43:51"><expr pos:start="43:17" pos:end="43:50"><call pos:start="43:17" pos:end="43:50"><name pos:start="43:17" pos:end="43:41">qemu_savevm_state_iterate</name><argument_list pos:start="43:42" pos:end="43:50">(<argument pos:start="43:43" pos:end="43:49"><expr pos:start="43:43" pos:end="43:49"><name pos:start="43:43" pos:end="43:49"><name pos:start="43:43" pos:end="43:43">s</name><operator pos:start="43:44" pos:end="43:45">-&gt;</operator><name pos:start="43:46" pos:end="43:49">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="45:15" pos:end="95:13">else <block pos:start="45:20" pos:end="95:13">{<block_content pos:start="47:17" pos:end="93:17">

                <decl_stmt pos:start="47:17" pos:end="47:24"><decl pos:start="47:17" pos:end="47:23"><type pos:start="47:17" pos:end="47:19"><name pos:start="47:17" pos:end="47:19">int</name></type> <name pos:start="47:21" pos:end="47:23">ret</name></decl>;</decl_stmt>



                <expr_stmt pos:start="51:17" pos:end="51:44"><expr pos:start="51:17" pos:end="51:43"><call pos:start="51:17" pos:end="51:43"><name pos:start="51:17" pos:end="51:23">DPRINTF</name><argument_list pos:start="51:24" pos:end="51:43">(<argument pos:start="51:25" pos:end="51:42"><expr pos:start="51:25" pos:end="51:42"><literal type="string" pos:start="51:25" pos:end="51:42">"done iterating\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:43"><expr pos:start="53:17" pos:end="53:42"><call pos:start="53:17" pos:end="53:42"><name pos:start="53:17" pos:end="53:40">qemu_mutex_lock_iothread</name><argument_list pos:start="53:41" pos:end="53:42">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="55:17" pos:end="55:57"><expr pos:start="55:17" pos:end="55:56"><name pos:start="55:17" pos:end="55:26">start_time</name> <operator pos:start="55:28" pos:end="55:28">=</operator> <call pos:start="55:30" pos:end="55:56"><name pos:start="55:30" pos:end="55:46">qemu_get_clock_ms</name><argument_list pos:start="55:47" pos:end="55:56">(<argument pos:start="55:48" pos:end="55:55"><expr pos:start="55:48" pos:end="55:55"><name pos:start="55:48" pos:end="55:55">rt_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:69"><expr pos:start="57:17" pos:end="57:68"><call pos:start="57:17" pos:end="57:68"><name pos:start="57:17" pos:end="57:42">qemu_system_wakeup_request</name><argument_list pos:start="57:43" pos:end="57:68">(<argument pos:start="57:44" pos:end="57:67"><expr pos:start="57:44" pos:end="57:67"><name pos:start="57:44" pos:end="57:67">QEMU_WAKEUP_REASON_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:55"><expr pos:start="59:17" pos:end="59:54"><name pos:start="59:17" pos:end="59:30">old_vm_running</name> <operator pos:start="59:32" pos:end="59:32">=</operator> <call pos:start="59:34" pos:end="59:54"><name pos:start="59:34" pos:end="59:52">runstate_is_running</name><argument_list pos:start="59:53" pos:end="59:54">()</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="63:17" pos:end="63:68"><expr pos:start="63:17" pos:end="63:67"><name pos:start="63:17" pos:end="63:19">ret</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <call pos:start="63:23" pos:end="63:67"><name pos:start="63:23" pos:end="63:41">vm_stop_force_state</name><argument_list pos:start="63:42" pos:end="63:67">(<argument pos:start="63:43" pos:end="63:66"><expr pos:start="63:43" pos:end="63:66"><name pos:start="63:43" pos:end="63:66">RUN_STATE_FINISH_MIGRATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="65:17" pos:end="71:17"><if pos:start="65:17" pos:end="71:17">if <condition pos:start="65:20" pos:end="65:29">(<expr pos:start="65:21" pos:end="65:28"><name pos:start="65:21" pos:end="65:23">ret</name> <operator pos:start="65:25" pos:end="65:26">&gt;=</operator> <literal type="number" pos:start="65:28" pos:end="65:28">0</literal></expr>)</condition> <block pos:start="65:31" pos:end="71:17">{<block_content pos:start="67:21" pos:end="69:56">

                    <expr_stmt pos:start="67:21" pos:end="67:63"><expr pos:start="67:21" pos:end="67:62"><call pos:start="67:21" pos:end="67:62"><name pos:start="67:21" pos:end="67:44">qemu_file_set_rate_limit</name><argument_list pos:start="67:45" pos:end="67:62">(<argument pos:start="67:46" pos:end="67:52"><expr pos:start="67:46" pos:end="67:52"><name pos:start="67:46" pos:end="67:52"><name pos:start="67:46" pos:end="67:46">s</name><operator pos:start="67:47" pos:end="67:48">-&gt;</operator><name pos:start="67:49" pos:end="67:52">file</name></name></expr></argument>, <argument pos:start="67:55" pos:end="67:61"><expr pos:start="67:55" pos:end="67:61"><name pos:start="67:55" pos:end="67:61">INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="69:21" pos:end="69:56"><expr pos:start="69:21" pos:end="69:55"><call pos:start="69:21" pos:end="69:55"><name pos:start="69:21" pos:end="69:46">qemu_savevm_state_complete</name><argument_list pos:start="69:47" pos:end="69:55">(<argument pos:start="69:48" pos:end="69:54"><expr pos:start="69:48" pos:end="69:54"><name pos:start="69:48" pos:end="69:54"><name pos:start="69:48" pos:end="69:48">s</name><operator pos:start="69:49" pos:end="69:50">-&gt;</operator><name pos:start="69:51" pos:end="69:54">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:45"><expr pos:start="73:17" pos:end="73:44"><call pos:start="73:17" pos:end="73:44"><name pos:start="73:17" pos:end="73:42">qemu_mutex_unlock_iothread</name><argument_list pos:start="73:43" pos:end="73:44">()</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="77:17" pos:end="83:17"><if pos:start="77:17" pos:end="83:17">if <condition pos:start="77:20" pos:end="77:28">(<expr pos:start="77:21" pos:end="77:27"><name pos:start="77:21" pos:end="77:23">ret</name> <operator pos:start="77:25" pos:end="77:25">&lt;</operator> <literal type="number" pos:start="77:27" pos:end="77:27">0</literal></expr>)</condition> <block pos:start="77:30" pos:end="83:17">{<block_content pos:start="79:21" pos:end="81:26">

                    <expr_stmt pos:start="79:21" pos:end="79:65"><expr pos:start="79:21" pos:end="79:64"><call pos:start="79:21" pos:end="79:64"><name pos:start="79:21" pos:end="79:44">migrate_finish_set_state</name><argument_list pos:start="79:45" pos:end="79:64">(<argument pos:start="79:46" pos:end="79:46"><expr pos:start="79:46" pos:end="79:46"><name pos:start="79:46" pos:end="79:46">s</name></expr></argument>, <argument pos:start="79:49" pos:end="79:63"><expr pos:start="79:49" pos:end="79:63"><name pos:start="79:49" pos:end="79:63">MIG_STATE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="81:21" pos:end="81:26">break;</break>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="87:17" pos:end="93:17"><if pos:start="87:17" pos:end="93:17">if <condition pos:start="87:20" pos:end="87:50">(<expr pos:start="87:21" pos:end="87:49"><operator pos:start="87:21" pos:end="87:21">!</operator><call pos:start="87:22" pos:end="87:49"><name pos:start="87:22" pos:end="87:40">qemu_file_get_error</name><argument_list pos:start="87:41" pos:end="87:49">(<argument pos:start="87:42" pos:end="87:48"><expr pos:start="87:42" pos:end="87:48"><name pos:start="87:42" pos:end="87:48"><name pos:start="87:42" pos:end="87:42">s</name><operator pos:start="87:43" pos:end="87:44">-&gt;</operator><name pos:start="87:45" pos:end="87:48">file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="87:52" pos:end="93:17">{<block_content pos:start="89:21" pos:end="91:26">

                    <expr_stmt pos:start="89:21" pos:end="89:69"><expr pos:start="89:21" pos:end="89:68"><call pos:start="89:21" pos:end="89:68"><name pos:start="89:21" pos:end="89:44">migrate_finish_set_state</name><argument_list pos:start="89:45" pos:end="89:68">(<argument pos:start="89:46" pos:end="89:46"><expr pos:start="89:46" pos:end="89:46"><name pos:start="89:46" pos:end="89:46">s</name></expr></argument>, <argument pos:start="89:49" pos:end="89:67"><expr pos:start="89:49" pos:end="89:67"><name pos:start="89:49" pos:end="89:67">MIG_STATE_COMPLETED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="91:21" pos:end="91:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="101:9" pos:end="107:9"><if pos:start="101:9" pos:end="107:9">if <condition pos:start="101:12" pos:end="101:41">(<expr pos:start="101:13" pos:end="101:40"><call pos:start="101:13" pos:end="101:40"><name pos:start="101:13" pos:end="101:31">qemu_file_get_error</name><argument_list pos:start="101:32" pos:end="101:40">(<argument pos:start="101:33" pos:end="101:39"><expr pos:start="101:33" pos:end="101:39"><name pos:start="101:33" pos:end="101:39"><name pos:start="101:33" pos:end="101:33">s</name><operator pos:start="101:34" pos:end="101:35">-&gt;</operator><name pos:start="101:36" pos:end="101:39">file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:43" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:18">

            <expr_stmt pos:start="103:13" pos:end="103:57"><expr pos:start="103:13" pos:end="103:56"><call pos:start="103:13" pos:end="103:56"><name pos:start="103:13" pos:end="103:36">migrate_finish_set_state</name><argument_list pos:start="103:37" pos:end="103:56">(<argument pos:start="103:38" pos:end="103:38"><expr pos:start="103:38" pos:end="103:38"><name pos:start="103:38" pos:end="103:38">s</name></expr></argument>, <argument pos:start="103:41" pos:end="103:55"><expr pos:start="103:41" pos:end="103:55"><name pos:start="103:41" pos:end="103:55">MIG_STATE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:51"><expr pos:start="109:9" pos:end="109:50"><name pos:start="109:9" pos:end="109:20">current_time</name> <operator pos:start="109:22" pos:end="109:22">=</operator> <call pos:start="109:24" pos:end="109:50"><name pos:start="109:24" pos:end="109:40">qemu_get_clock_ms</name><argument_list pos:start="109:41" pos:end="109:50">(<argument pos:start="109:42" pos:end="109:49"><expr pos:start="109:42" pos:end="109:49"><name pos:start="109:42" pos:end="109:49">rt_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="153:9"><if pos:start="111:9" pos:end="153:9">if <condition pos:start="111:12" pos:end="111:56">(<expr pos:start="111:13" pos:end="111:55"><name pos:start="111:13" pos:end="111:24">current_time</name> <operator pos:start="111:26" pos:end="111:27">&gt;=</operator> <name pos:start="111:29" pos:end="111:40">initial_time</name> <operator pos:start="111:42" pos:end="111:42">+</operator> <name pos:start="111:44" pos:end="111:55">BUFFER_DELAY</name></expr>)</condition> <block pos:start="111:58" pos:end="153:9">{<block_content pos:start="113:13" pos:end="151:48">

            <decl_stmt pos:start="113:13" pos:end="113:77"><decl pos:start="113:13" pos:end="113:76"><type pos:start="113:13" pos:end="113:20"><name pos:start="113:13" pos:end="113:20">uint64_t</name></type> <name pos:start="113:22" pos:end="113:38">transferred_bytes</name> <init pos:start="113:40" pos:end="113:76">= <expr pos:start="113:42" pos:end="113:76"><call pos:start="113:42" pos:end="113:60"><name pos:start="113:42" pos:end="113:51">qemu_ftell</name><argument_list pos:start="113:52" pos:end="113:60">(<argument pos:start="113:53" pos:end="113:59"><expr pos:start="113:53" pos:end="113:59"><name pos:start="113:53" pos:end="113:59"><name pos:start="113:53" pos:end="113:53">s</name><operator pos:start="113:54" pos:end="113:55">-&gt;</operator><name pos:start="113:56" pos:end="113:59">file</name></name></expr></argument>)</argument_list></call> <operator pos:start="113:62" pos:end="113:62">-</operator> <name pos:start="113:64" pos:end="113:76">initial_bytes</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="115:13" pos:end="115:62"><decl pos:start="115:13" pos:end="115:61"><type pos:start="115:13" pos:end="115:20"><name pos:start="115:13" pos:end="115:20">uint64_t</name></type> <name pos:start="115:22" pos:end="115:31">time_spent</name> <init pos:start="115:33" pos:end="115:61">= <expr pos:start="115:35" pos:end="115:61"><name pos:start="115:35" pos:end="115:46">current_time</name> <operator pos:start="115:48" pos:end="115:48">-</operator> <name pos:start="115:50" pos:end="115:61">initial_time</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="117:13" pos:end="117:62"><decl pos:start="117:13" pos:end="117:61"><type pos:start="117:13" pos:end="117:18"><name pos:start="117:13" pos:end="117:18">double</name></type> <name pos:start="117:20" pos:end="117:28">bandwidth</name> <init pos:start="117:30" pos:end="117:61">= <expr pos:start="117:32" pos:end="117:61"><name pos:start="117:32" pos:end="117:48">transferred_bytes</name> <operator pos:start="117:50" pos:end="117:50">/</operator> <name pos:start="117:52" pos:end="117:61">time_spent</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:68"><expr pos:start="119:13" pos:end="119:67"><name pos:start="119:13" pos:end="119:20">max_size</name> <operator pos:start="119:22" pos:end="119:22">=</operator> <name pos:start="119:24" pos:end="119:32">bandwidth</name> <operator pos:start="119:34" pos:end="119:34">*</operator> <call pos:start="119:36" pos:end="119:57"><name pos:start="119:36" pos:end="119:55">migrate_max_downtime</name><argument_list pos:start="119:56" pos:end="119:57">()</argument_list></call> <operator pos:start="119:59" pos:end="119:59">/</operator> <literal type="number" pos:start="119:61" pos:end="119:67">1000000</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="123:13" pos:end="125:75"><expr pos:start="123:13" pos:end="125:74"><name pos:start="123:13" pos:end="123:19"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:19">mbps</name></name> <operator pos:start="123:21" pos:end="123:21">=</operator> <ternary pos:start="123:23" pos:end="125:74"><condition pos:start="123:23" pos:end="123:34"><expr pos:start="123:23" pos:end="123:32"><name pos:start="123:23" pos:end="123:32">time_spent</name></expr> ?</condition><then pos:start="123:36" pos:end="125:69"> <expr pos:start="123:36" pos:end="125:69"><operator pos:start="123:36" pos:end="123:36">(</operator><operator pos:start="123:37" pos:end="123:37">(</operator><operator pos:start="123:38" pos:end="123:38">(</operator><name pos:start="123:39" pos:end="123:44">double</name><operator pos:start="123:45" pos:end="123:45">)</operator> <name pos:start="123:47" pos:end="123:63">transferred_bytes</name> <operator pos:start="123:65" pos:end="123:65">*</operator> <literal type="number" pos:start="123:67" pos:end="123:69">8.0</literal><operator pos:start="123:70" pos:end="123:70">)</operator> <operator pos:start="123:72" pos:end="123:72">/</operator>

                    <operator pos:start="125:21" pos:end="125:21">(</operator><operator pos:start="125:22" pos:end="125:22">(</operator><name pos:start="125:23" pos:end="125:28">double</name><operator pos:start="125:29" pos:end="125:29">)</operator> <name pos:start="125:31" pos:end="125:40">time_spent</name> <operator pos:start="125:42" pos:end="125:42">/</operator> <literal type="number" pos:start="125:44" pos:end="125:49">1000.0</literal><operator pos:start="125:50" pos:end="125:50">)</operator><operator pos:start="125:51" pos:end="125:51">)</operator> <operator pos:start="125:53" pos:end="125:53">/</operator> <literal type="number" pos:start="125:55" pos:end="125:60">1000.0</literal> <operator pos:start="125:62" pos:end="125:62">/</operator> <literal type="number" pos:start="125:64" pos:end="125:69">1000.0</literal></expr> </then><else pos:start="125:71" pos:end="125:74">: <expr pos:start="125:73" pos:end="125:74"><operator pos:start="125:73" pos:end="125:73">-</operator><literal type="number" pos:start="125:74" pos:end="125:74">1</literal></expr></else></ternary></expr>;</expr_stmt>



            <expr_stmt pos:start="129:13" pos:end="133:72"><expr pos:start="129:13" pos:end="133:71"><call pos:start="129:13" pos:end="133:71"><name pos:start="129:13" pos:end="129:19">DPRINTF</name><argument_list pos:start="129:20" pos:end="133:71">(<argument pos:start="129:21" pos:end="131:58"><expr pos:start="129:21" pos:end="131:58"><literal type="string" pos:start="129:21" pos:end="129:35">"transferred %"</literal> <name pos:start="129:37" pos:end="129:42">PRIu64</name> <literal type="string" pos:start="129:44" pos:end="129:58">" time_spent %"</literal> <name pos:start="129:60" pos:end="129:65">PRIu64</name>

                    <literal type="string" pos:start="131:21" pos:end="131:46">" bandwidth %g max_size %"</literal> <name pos:start="131:48" pos:end="131:53">PRId64</name> <literal type="string" pos:start="131:55" pos:end="131:58">"\n"</literal></expr></argument>,

                    <argument pos:start="133:21" pos:end="133:37"><expr pos:start="133:21" pos:end="133:37"><name pos:start="133:21" pos:end="133:37">transferred_bytes</name></expr></argument>, <argument pos:start="133:40" pos:end="133:49"><expr pos:start="133:40" pos:end="133:49"><name pos:start="133:40" pos:end="133:49">time_spent</name></expr></argument>, <argument pos:start="133:52" pos:end="133:60"><expr pos:start="133:52" pos:end="133:60"><name pos:start="133:52" pos:end="133:60">bandwidth</name></expr></argument>, <argument pos:start="133:63" pos:end="133:70"><expr pos:start="133:63" pos:end="133:70"><name pos:start="133:63" pos:end="133:70">max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="135:13" pos:end="137:65">/* if we haven't sent anything, we don't want to recalculate

               10000 is a small enough number for our purposes */</comment>

            <if_stmt pos:start="139:13" pos:end="143:13"><if pos:start="139:13" pos:end="143:13">if <condition pos:start="139:16" pos:end="139:65">(<expr pos:start="139:17" pos:end="139:64"><name pos:start="139:17" pos:end="139:35"><name pos:start="139:17" pos:end="139:17">s</name><operator pos:start="139:18" pos:end="139:19">-&gt;</operator><name pos:start="139:20" pos:end="139:35">dirty_bytes_rate</name></name> <operator pos:start="139:37" pos:end="139:38">&amp;&amp;</operator> <name pos:start="139:40" pos:end="139:56">transferred_bytes</name> <operator pos:start="139:58" pos:end="139:58">&gt;</operator> <literal type="number" pos:start="139:60" pos:end="139:64">10000</literal></expr>)</condition> <block pos:start="139:67" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:71">

                <expr_stmt pos:start="141:17" pos:end="141:71"><expr pos:start="141:17" pos:end="141:70"><name pos:start="141:17" pos:end="141:36"><name pos:start="141:17" pos:end="141:17">s</name><operator pos:start="141:18" pos:end="141:19">-&gt;</operator><name pos:start="141:20" pos:end="141:36">expected_downtime</name></name> <operator pos:start="141:38" pos:end="141:38">=</operator> <name pos:start="141:40" pos:end="141:58"><name pos:start="141:40" pos:end="141:40">s</name><operator pos:start="141:41" pos:end="141:42">-&gt;</operator><name pos:start="141:43" pos:end="141:58">dirty_bytes_rate</name></name> <operator pos:start="141:60" pos:end="141:60">/</operator> <name pos:start="141:62" pos:end="141:70">bandwidth</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="147:13" pos:end="147:48"><expr pos:start="147:13" pos:end="147:47"><call pos:start="147:13" pos:end="147:47"><name pos:start="147:13" pos:end="147:38">qemu_file_reset_rate_limit</name><argument_list pos:start="147:39" pos:end="147:47">(<argument pos:start="147:40" pos:end="147:46"><expr pos:start="147:40" pos:end="147:46"><name pos:start="147:40" pos:end="147:46"><name pos:start="147:40" pos:end="147:40">s</name><operator pos:start="147:41" pos:end="147:42">-&gt;</operator><name pos:start="147:43" pos:end="147:46">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:40"><expr pos:start="149:13" pos:end="149:39"><name pos:start="149:13" pos:end="149:24">initial_time</name> <operator pos:start="149:26" pos:end="149:26">=</operator> <name pos:start="149:28" pos:end="149:39">current_time</name></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:48"><expr pos:start="151:13" pos:end="151:47"><name pos:start="151:13" pos:end="151:25">initial_bytes</name> <operator pos:start="151:27" pos:end="151:27">=</operator> <call pos:start="151:29" pos:end="151:47"><name pos:start="151:29" pos:end="151:38">qemu_ftell</name><argument_list pos:start="151:39" pos:end="151:47">(<argument pos:start="151:40" pos:end="151:46"><expr pos:start="151:40" pos:end="151:46"><name pos:start="151:40" pos:end="151:46"><name pos:start="151:40" pos:end="151:40">s</name><operator pos:start="151:41" pos:end="151:42">-&gt;</operator><name pos:start="151:43" pos:end="151:46">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="155:9" pos:end="161:9"><if pos:start="155:9" pos:end="161:9">if <condition pos:start="155:12" pos:end="155:42">(<expr pos:start="155:13" pos:end="155:41"><call pos:start="155:13" pos:end="155:41"><name pos:start="155:13" pos:end="155:32">qemu_file_rate_limit</name><argument_list pos:start="155:33" pos:end="155:41">(<argument pos:start="155:34" pos:end="155:40"><expr pos:start="155:34" pos:end="155:40"><name pos:start="155:34" pos:end="155:40"><name pos:start="155:34" pos:end="155:34">s</name><operator pos:start="155:35" pos:end="155:36">-&gt;</operator><name pos:start="155:37" pos:end="155:40">file</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="155:44" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:72">

            <comment type="block" pos:start="157:13" pos:end="157:45">/* usleep expects microseconds */</comment>

            <expr_stmt pos:start="159:13" pos:end="159:72"><expr pos:start="159:13" pos:end="159:71"><call pos:start="159:13" pos:end="159:71"><name pos:start="159:13" pos:end="159:20">g_usleep</name><argument_list pos:start="159:21" pos:end="159:71">(<argument pos:start="159:22" pos:end="159:70"><expr pos:start="159:22" pos:end="159:70"><operator pos:start="159:22" pos:end="159:22">(</operator><name pos:start="159:23" pos:end="159:34">initial_time</name> <operator pos:start="159:36" pos:end="159:36">+</operator> <name pos:start="159:38" pos:end="159:49">BUFFER_DELAY</name> <operator pos:start="159:51" pos:end="159:51">-</operator> <name pos:start="159:53" pos:end="159:64">current_time</name><operator pos:start="159:65" pos:end="159:65">)</operator><operator pos:start="159:66" pos:end="159:66">*</operator><literal type="number" pos:start="159:67" pos:end="159:70">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="167:5" pos:end="167:31"><expr pos:start="167:5" pos:end="167:30"><call pos:start="167:5" pos:end="167:30"><name pos:start="167:5" pos:end="167:28">qemu_mutex_lock_iothread</name><argument_list pos:start="167:29" pos:end="167:30">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="187:5"><if pos:start="169:5" pos:end="179:5">if <condition pos:start="169:8" pos:end="169:40">(<expr pos:start="169:9" pos:end="169:39"><name pos:start="169:9" pos:end="169:16"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:16">state</name></name> <operator pos:start="169:18" pos:end="169:19">==</operator> <name pos:start="169:21" pos:end="169:39">MIG_STATE_COMPLETED</name></expr>)</condition> <block pos:start="169:42" pos:end="179:5">{<block_content pos:start="171:9" pos:end="177:44">

        <decl_stmt pos:start="171:9" pos:end="171:55"><decl pos:start="171:9" pos:end="171:54"><type pos:start="171:9" pos:end="171:15"><name pos:start="171:9" pos:end="171:15">int64_t</name></type> <name pos:start="171:17" pos:end="171:24">end_time</name> <init pos:start="171:26" pos:end="171:54">= <expr pos:start="171:28" pos:end="171:54"><call pos:start="171:28" pos:end="171:54"><name pos:start="171:28" pos:end="171:44">qemu_get_clock_ms</name><argument_list pos:start="171:45" pos:end="171:54">(<argument pos:start="171:46" pos:end="171:53"><expr pos:start="171:46" pos:end="171:53"><name pos:start="171:46" pos:end="171:53">rt_clock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:49"><expr pos:start="173:9" pos:end="173:48"><name pos:start="173:9" pos:end="173:21"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:21">total_time</name></name> <operator pos:start="173:23" pos:end="173:23">=</operator> <name pos:start="173:25" pos:end="173:32">end_time</name> <operator pos:start="173:34" pos:end="173:34">-</operator> <name pos:start="173:36" pos:end="173:48"><name pos:start="173:36" pos:end="173:36">s</name><operator pos:start="173:37" pos:end="173:38">-&gt;</operator><name pos:start="173:39" pos:end="173:48">total_time</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:44"><expr pos:start="175:9" pos:end="175:43"><name pos:start="175:9" pos:end="175:19"><name pos:start="175:9" pos:end="175:9">s</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:19">downtime</name></name> <operator pos:start="175:21" pos:end="175:21">=</operator> <name pos:start="175:23" pos:end="175:30">end_time</name> <operator pos:start="175:32" pos:end="175:32">-</operator> <name pos:start="175:34" pos:end="175:43">start_time</name></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:44"><expr pos:start="177:9" pos:end="177:43"><call pos:start="177:9" pos:end="177:43"><name pos:start="177:9" pos:end="177:20">runstate_set</name><argument_list pos:start="177:21" pos:end="177:43">(<argument pos:start="177:22" pos:end="177:42"><expr pos:start="177:22" pos:end="177:42"><name pos:start="177:22" pos:end="177:42">RUN_STATE_POSTMIGRATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="179:7" pos:end="187:5">else <block pos:start="179:12" pos:end="187:5">{<block_content pos:start="181:9" pos:end="185:9">

        <if_stmt pos:start="181:9" pos:end="185:9"><if pos:start="181:9" pos:end="185:9">if <condition pos:start="181:12" pos:end="181:27">(<expr pos:start="181:13" pos:end="181:26"><name pos:start="181:13" pos:end="181:26">old_vm_running</name></expr>)</condition> <block pos:start="181:29" pos:end="185:9">{<block_content pos:start="183:13" pos:end="183:23">

            <expr_stmt pos:start="183:13" pos:end="183:23"><expr pos:start="183:13" pos:end="183:22"><call pos:start="183:13" pos:end="183:22"><name pos:start="183:13" pos:end="183:20">vm_start</name><argument_list pos:start="183:21" pos:end="183:22">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:36"><expr pos:start="189:5" pos:end="189:35"><call pos:start="189:5" pos:end="189:35"><name pos:start="189:5" pos:end="189:20">qemu_bh_schedule</name><argument_list pos:start="189:21" pos:end="189:35">(<argument pos:start="189:22" pos:end="189:34"><expr pos:start="189:22" pos:end="189:34"><name pos:start="189:22" pos:end="189:34"><name pos:start="189:22" pos:end="189:22">s</name><operator pos:start="189:23" pos:end="189:24">-&gt;</operator><name pos:start="189:25" pos:end="189:34">cleanup_bh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:33"><expr pos:start="191:5" pos:end="191:32"><call pos:start="191:5" pos:end="191:32"><name pos:start="191:5" pos:end="191:30">qemu_mutex_unlock_iothread</name><argument_list pos:start="191:31" pos:end="191:32">()</argument_list></call></expr>;</expr_stmt>



    <return pos:start="195:5" pos:end="195:16">return <expr pos:start="195:12" pos:end="195:15"><name pos:start="195:12" pos:end="195:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
