<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2377.c" pos:tabs="8"><function pos:start="1:1" pos:end="100:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">proxy_socket</name><parameter_list pos:start="1:24" pos:end="1:63">(<parameter pos:start="1:25" pos:end="1:40"><decl pos:start="1:25" pos:end="1:40"><type pos:start="1:25" pos:end="1:40"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:34">char</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:40">path</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:51"><decl pos:start="1:43" pos:end="1:51"><type pos:start="1:43" pos:end="1:51"><name pos:start="1:43" pos:end="1:47">uid_t</name></type> <name pos:start="1:49" pos:end="1:51">uid</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:62"><decl pos:start="1:54" pos:end="1:62"><type pos:start="1:54" pos:end="1:62"><name pos:start="1:54" pos:end="1:58">gid_t</name></type> <name pos:start="1:60" pos:end="1:62">gid</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="100:1">{<block_content pos:start="5:5" pos:end="98:14">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:12"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:12">sock</name></decl>, <decl pos:start="5:15" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:15" pos:end="5:20">client</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">sockaddr_un</name></name></type> <name pos:start="7:24" pos:end="7:28">proxy</name></decl>, <decl pos:start="7:31" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:22"/><name pos:start="7:31" pos:end="7:34">qemu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">socklen_t</name></type> <name pos:start="9:15" pos:end="9:18">size</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:58">/* requested socket already exists, refuse to start */</comment>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:28">(<expr pos:start="15:9" pos:end="15:27"><operator pos:start="15:9" pos:end="15:9">!</operator><call pos:start="15:10" pos:end="15:27"><name pos:start="15:10" pos:end="15:15">access</name><argument_list pos:start="15:16" pos:end="15:27">(<argument pos:start="15:17" pos:end="15:20"><expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">path</name></expr></argument>, <argument pos:start="15:23" pos:end="15:26"><expr pos:start="15:23" pos:end="15:26"><name pos:start="15:23" pos:end="15:26">F_OK</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:30" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:18">

        <expr_stmt pos:start="17:9" pos:end="17:52"><expr pos:start="17:9" pos:end="17:51"><call pos:start="17:9" pos:end="17:51"><name pos:start="17:9" pos:end="17:14">do_log</name><argument_list pos:start="17:15" pos:end="17:51">(<argument pos:start="17:16" pos:end="17:23"><expr pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:23">LOG_CRIT</name></expr></argument>, <argument pos:start="17:26" pos:end="17:50"><expr pos:start="17:26" pos:end="17:50"><literal type="string" pos:start="17:26" pos:end="17:50">"socket already exists\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:18">return <expr pos:start="19:16" pos:end="19:17"><operator pos:start="19:16" pos:end="19:16">-</operator><literal type="number" pos:start="19:17" pos:end="19:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>




    <expr_stmt pos:start="26:5" pos:end="26:43"><expr pos:start="26:5" pos:end="26:42"><name pos:start="26:5" pos:end="26:8">sock</name> <operator pos:start="26:10" pos:end="26:10">=</operator> <call pos:start="26:12" pos:end="26:42"><name pos:start="26:12" pos:end="26:17">socket</name><argument_list pos:start="26:18" pos:end="26:42">(<argument pos:start="26:19" pos:end="26:25"><expr pos:start="26:19" pos:end="26:25"><name pos:start="26:19" pos:end="26:25">AF_UNIX</name></expr></argument>, <argument pos:start="26:28" pos:end="26:38"><expr pos:start="26:28" pos:end="26:38"><name pos:start="26:28" pos:end="26:38">SOCK_STREAM</name></expr></argument>, <argument pos:start="26:41" pos:end="26:41"><expr pos:start="26:41" pos:end="26:41"><literal type="number" pos:start="26:41" pos:end="26:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="28:5" pos:end="34:5"><if pos:start="28:5" pos:end="34:5">if <condition pos:start="28:8" pos:end="28:17">(<expr pos:start="28:9" pos:end="28:16"><name pos:start="28:9" pos:end="28:12">sock</name> <operator pos:start="28:14" pos:end="28:14">&lt;</operator> <literal type="number" pos:start="28:16" pos:end="28:16">0</literal></expr>)</condition> <block pos:start="28:19" pos:end="34:5">{<block_content pos:start="30:9" pos:end="32:18">

        <expr_stmt pos:start="30:9" pos:end="30:28"><expr pos:start="30:9" pos:end="30:27"><call pos:start="30:9" pos:end="30:27"><name pos:start="30:9" pos:end="30:17">do_perror</name><argument_list pos:start="30:18" pos:end="30:27">(<argument pos:start="30:19" pos:end="30:26"><expr pos:start="30:19" pos:end="30:26"><literal type="string" pos:start="30:19" pos:end="30:26">"socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="32:9" pos:end="32:18">return <expr pos:start="32:16" pos:end="32:17"><operator pos:start="32:16" pos:end="32:16">-</operator><literal type="number" pos:start="32:17" pos:end="32:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="38:5" pos:end="38:38">/* mask other part of mode bits */</comment>

    <expr_stmt pos:start="40:5" pos:end="40:13"><expr pos:start="40:5" pos:end="40:12"><call pos:start="40:5" pos:end="40:12"><name pos:start="40:5" pos:end="40:9">umask</name><argument_list pos:start="40:10" pos:end="40:12">(<argument pos:start="40:11" pos:end="40:11"><expr pos:start="40:11" pos:end="40:11"><literal type="number" pos:start="40:11" pos:end="40:11">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="44:5" pos:end="44:31"><expr pos:start="44:5" pos:end="44:30"><name pos:start="44:5" pos:end="44:20"><name pos:start="44:5" pos:end="44:9">proxy</name><operator pos:start="44:10" pos:end="44:10">.</operator><name pos:start="44:11" pos:end="44:20">sun_family</name></name> <operator pos:start="44:22" pos:end="44:22">=</operator> <name pos:start="44:24" pos:end="44:30">AF_UNIX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="46:5" pos:end="46:33"><expr pos:start="46:5" pos:end="46:32"><call pos:start="46:5" pos:end="46:32"><name pos:start="46:5" pos:end="46:10">strcpy</name><argument_list pos:start="46:11" pos:end="46:32">(<argument pos:start="46:12" pos:end="46:25"><expr pos:start="46:12" pos:end="46:25"><name pos:start="46:12" pos:end="46:25"><name pos:start="46:12" pos:end="46:16">proxy</name><operator pos:start="46:17" pos:end="46:17">.</operator><name pos:start="46:18" pos:end="46:25">sun_path</name></name></expr></argument>, <argument pos:start="46:28" pos:end="46:31"><expr pos:start="46:28" pos:end="46:31"><name pos:start="46:28" pos:end="46:31">path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="48:5" pos:end="56:5"><if pos:start="48:5" pos:end="56:5">if <condition pos:start="48:8" pos:end="50:44">(<expr pos:start="48:9" pos:end="50:43"><call pos:start="48:9" pos:end="50:39"><name pos:start="48:9" pos:end="48:12">bind</name><argument_list pos:start="48:13" pos:end="50:39">(<argument pos:start="48:14" pos:end="48:17"><expr pos:start="48:14" pos:end="48:17"><name pos:start="48:14" pos:end="48:17">sock</name></expr></argument>, <argument pos:start="48:20" pos:end="48:44"><expr pos:start="48:20" pos:end="48:44"><operator pos:start="48:20" pos:end="48:20">(</operator>struct <name pos:start="48:28" pos:end="48:35">sockaddr</name> <operator pos:start="48:37" pos:end="48:37">*</operator><operator pos:start="48:38" pos:end="48:38">)</operator><operator pos:start="48:39" pos:end="48:39">&amp;</operator><name pos:start="48:40" pos:end="48:44">proxy</name></expr></argument>,

            <argument pos:start="50:13" pos:end="50:38"><expr pos:start="50:13" pos:end="50:38"><sizeof pos:start="50:13" pos:end="50:38">sizeof<argument_list pos:start="50:19" pos:end="50:38">(<argument pos:start="50:20" pos:end="50:37"><expr pos:start="50:20" pos:end="50:37">struct <name pos:start="50:27" pos:end="50:37">sockaddr_un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="50:41" pos:end="50:41">&lt;</operator> <literal type="number" pos:start="50:43" pos:end="50:43">0</literal></expr>)</condition> <block pos:start="50:46" pos:end="56:5">{<block_content pos:start="52:9" pos:end="54:19">

        <expr_stmt pos:start="52:9" pos:end="52:26"><expr pos:start="52:9" pos:end="52:25"><call pos:start="52:9" pos:end="52:25"><name pos:start="52:9" pos:end="52:17">do_perror</name><argument_list pos:start="52:18" pos:end="52:25">(<argument pos:start="52:19" pos:end="52:24"><expr pos:start="52:19" pos:end="52:24"><literal type="string" pos:start="52:19" pos:end="52:24">"bind"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="54:9" pos:end="54:19">goto <name pos:start="54:14" pos:end="54:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="58:5" pos:end="64:5"><if pos:start="58:5" pos:end="64:5">if <condition pos:start="58:8" pos:end="58:44">(<expr pos:start="58:9" pos:end="58:43"><call pos:start="58:9" pos:end="58:39"><name pos:start="58:9" pos:end="58:13">chown</name><argument_list pos:start="58:14" pos:end="58:39">(<argument pos:start="58:15" pos:end="58:28"><expr pos:start="58:15" pos:end="58:28"><name pos:start="58:15" pos:end="58:28"><name pos:start="58:15" pos:end="58:19">proxy</name><operator pos:start="58:20" pos:end="58:20">.</operator><name pos:start="58:21" pos:end="58:28">sun_path</name></name></expr></argument>, <argument pos:start="58:31" pos:end="58:33"><expr pos:start="58:31" pos:end="58:33"><name pos:start="58:31" pos:end="58:33">uid</name></expr></argument>, <argument pos:start="58:36" pos:end="58:38"><expr pos:start="58:36" pos:end="58:38"><name pos:start="58:36" pos:end="58:38">gid</name></expr></argument>)</argument_list></call> <operator pos:start="58:41" pos:end="58:41">&lt;</operator> <literal type="number" pos:start="58:43" pos:end="58:43">0</literal></expr>)</condition> <block pos:start="58:46" pos:end="64:5">{<block_content pos:start="60:9" pos:end="62:19">

        <expr_stmt pos:start="60:9" pos:end="60:27"><expr pos:start="60:9" pos:end="60:26"><call pos:start="60:9" pos:end="60:26"><name pos:start="60:9" pos:end="60:17">do_perror</name><argument_list pos:start="60:18" pos:end="60:26">(<argument pos:start="60:19" pos:end="60:25"><expr pos:start="60:19" pos:end="60:25"><literal type="string" pos:start="60:19" pos:end="60:25">"chown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="62:9" pos:end="62:19">goto <name pos:start="62:14" pos:end="62:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="66:5" pos:end="72:5"><if pos:start="66:5" pos:end="72:5">if <condition pos:start="66:8" pos:end="66:28">(<expr pos:start="66:9" pos:end="66:27"><call pos:start="66:9" pos:end="66:23"><name pos:start="66:9" pos:end="66:14">listen</name><argument_list pos:start="66:15" pos:end="66:23">(<argument pos:start="66:16" pos:end="66:19"><expr pos:start="66:16" pos:end="66:19"><name pos:start="66:16" pos:end="66:19">sock</name></expr></argument>, <argument pos:start="66:22" pos:end="66:22"><expr pos:start="66:22" pos:end="66:22"><literal type="number" pos:start="66:22" pos:end="66:22">1</literal></expr></argument>)</argument_list></call> <operator pos:start="66:25" pos:end="66:25">&lt;</operator> <literal type="number" pos:start="66:27" pos:end="66:27">0</literal></expr>)</condition> <block pos:start="66:30" pos:end="72:5">{<block_content pos:start="68:9" pos:end="70:19">

        <expr_stmt pos:start="68:9" pos:end="68:28"><expr pos:start="68:9" pos:end="68:27"><call pos:start="68:9" pos:end="68:27"><name pos:start="68:9" pos:end="68:17">do_perror</name><argument_list pos:start="68:18" pos:end="68:27">(<argument pos:start="68:19" pos:end="68:26"><expr pos:start="68:19" pos:end="68:26"><literal type="string" pos:start="68:19" pos:end="68:26">"listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="70:9" pos:end="70:19">goto <name pos:start="70:14" pos:end="70:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="76:5" pos:end="76:24"><expr pos:start="76:5" pos:end="76:23"><name pos:start="76:5" pos:end="76:8">size</name> <operator pos:start="76:10" pos:end="76:10">=</operator> <sizeof pos:start="76:12" pos:end="76:23">sizeof<argument_list pos:start="76:18" pos:end="76:23">(<argument pos:start="76:19" pos:end="76:22"><expr pos:start="76:19" pos:end="76:22"><name pos:start="76:19" pos:end="76:22">qemu</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="78:5" pos:end="78:59"><expr pos:start="78:5" pos:end="78:58"><name pos:start="78:5" pos:end="78:10">client</name> <operator pos:start="78:12" pos:end="78:12">=</operator> <call pos:start="78:14" pos:end="78:58"><name pos:start="78:14" pos:end="78:19">accept</name><argument_list pos:start="78:20" pos:end="78:58">(<argument pos:start="78:21" pos:end="78:24"><expr pos:start="78:21" pos:end="78:24"><name pos:start="78:21" pos:end="78:24">sock</name></expr></argument>, <argument pos:start="78:27" pos:end="78:50"><expr pos:start="78:27" pos:end="78:50"><operator pos:start="78:27" pos:end="78:27">(</operator>struct <name pos:start="78:35" pos:end="78:42">sockaddr</name> <operator pos:start="78:44" pos:end="78:44">*</operator><operator pos:start="78:45" pos:end="78:45">)</operator><operator pos:start="78:46" pos:end="78:46">&amp;</operator><name pos:start="78:47" pos:end="78:50">qemu</name></expr></argument>, <argument pos:start="78:53" pos:end="78:57"><expr pos:start="78:53" pos:end="78:57"><operator pos:start="78:53" pos:end="78:53">&amp;</operator><name pos:start="78:54" pos:end="78:57">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="80:5" pos:end="86:5"><if pos:start="80:5" pos:end="86:5">if <condition pos:start="80:8" pos:end="80:19">(<expr pos:start="80:9" pos:end="80:18"><name pos:start="80:9" pos:end="80:14">client</name> <operator pos:start="80:16" pos:end="80:16">&lt;</operator> <literal type="number" pos:start="80:18" pos:end="80:18">0</literal></expr>)</condition> <block pos:start="80:21" pos:end="86:5">{<block_content pos:start="82:9" pos:end="84:19">

        <expr_stmt pos:start="82:9" pos:end="82:28"><expr pos:start="82:9" pos:end="82:27"><call pos:start="82:9" pos:end="82:27"><name pos:start="82:9" pos:end="82:17">do_perror</name><argument_list pos:start="82:18" pos:end="82:27">(<argument pos:start="82:19" pos:end="82:26"><expr pos:start="82:19" pos:end="82:26"><literal type="string" pos:start="82:19" pos:end="82:26">"accept"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="84:9" pos:end="84:19">goto <name pos:start="84:14" pos:end="84:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="88:5" pos:end="88:16"><expr pos:start="88:5" pos:end="88:15"><call pos:start="88:5" pos:end="88:15"><name pos:start="88:5" pos:end="88:9">close</name><argument_list pos:start="88:10" pos:end="88:15">(<argument pos:start="88:11" pos:end="88:14"><expr pos:start="88:11" pos:end="88:14"><name pos:start="88:11" pos:end="88:14">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="90:5" pos:end="90:18">return <expr pos:start="90:12" pos:end="90:17"><name pos:start="90:12" pos:end="90:17">client</name></expr>;</return>



<label pos:start="94:1" pos:end="94:6"><name pos:start="94:1" pos:end="94:5">error</name>:</label>

    <expr_stmt pos:start="96:5" pos:end="96:16"><expr pos:start="96:5" pos:end="96:15"><call pos:start="96:5" pos:end="96:15"><name pos:start="96:5" pos:end="96:9">close</name><argument_list pos:start="96:10" pos:end="96:15">(<argument pos:start="96:11" pos:end="96:14"><expr pos:start="96:11" pos:end="96:14"><name pos:start="96:11" pos:end="96:14">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="98:5" pos:end="98:14">return <expr pos:start="98:12" pos:end="98:13"><operator pos:start="98:12" pos:end="98:12">-</operator><literal type="number" pos:start="98:13" pos:end="98:13">1</literal></expr>;</return>

</block_content>}</block></function></unit>
