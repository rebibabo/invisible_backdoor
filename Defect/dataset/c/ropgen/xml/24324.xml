<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24324.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:17">kvm_arch_init</name><parameter_list pos:start="1:18" pos:end="1:44">(<parameter pos:start="1:19" pos:end="1:29"><decl pos:start="1:19" pos:end="1:29"><type pos:start="1:19" pos:end="1:29"><name pos:start="1:19" pos:end="1:26">KVMState</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:29">s</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:34">int</name></type> <name pos:start="1:36" pos:end="1:43">smp_cpus</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:41">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:18">utsname</name></name></type> <name pos:start="9:20" pos:end="9:26">utsname</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:20"><expr pos:start="13:5" pos:end="13:19"><call pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:9">uname</name><argument_list pos:start="13:10" pos:end="13:19">(<argument pos:start="13:11" pos:end="13:18"><expr pos:start="13:11" pos:end="13:18"><operator pos:start="13:11" pos:end="13:11">&amp;</operator><name pos:start="13:12" pos:end="13:18">utsname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:63"><expr pos:start="15:5" pos:end="15:62"><name pos:start="15:5" pos:end="15:21">lm_capable_kernel</name> <operator pos:start="15:23" pos:end="15:23">=</operator> <call pos:start="15:25" pos:end="15:57"><name pos:start="15:25" pos:end="15:30">strcmp</name><argument_list pos:start="15:31" pos:end="15:57">(<argument pos:start="15:32" pos:end="15:46"><expr pos:start="15:32" pos:end="15:46"><name pos:start="15:32" pos:end="15:46"><name pos:start="15:32" pos:end="15:38">utsname</name><operator pos:start="15:39" pos:end="15:39">.</operator><name pos:start="15:40" pos:end="15:46">machine</name></name></expr></argument>, <argument pos:start="15:49" pos:end="15:56"><expr pos:start="15:49" pos:end="15:56"><literal type="string" pos:start="15:49" pos:end="15:56">"x86_64"</literal></expr></argument>)</argument_list></call> <operator pos:start="15:59" pos:end="15:60">==</operator> <literal type="number" pos:start="15:62" pos:end="15:62">0</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="29:58">/* create vm86 tss.  KVM uses vm86 mode to emulate 16-bit code

     * directly.  In order to use vm86 mode, a TSS is needed.  Since this

     * must be part of guest physical memory, we need to allocate it.  Older

     * versions of KVM just assumed that it would be at the end of physical

     * memory but that doesn't work with more than 4GB of memory.  We simply

     * refuse to work with those older versions of KVM. */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:55"><expr pos:start="31:5" pos:end="31:54"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:54"><name pos:start="31:11" pos:end="31:29">kvm_check_extension</name><argument_list pos:start="31:30" pos:end="31:54">(<argument pos:start="31:31" pos:end="31:31"><expr pos:start="31:31" pos:end="31:31"><name pos:start="31:31" pos:end="31:31">s</name></expr></argument>, <argument pos:start="31:34" pos:end="31:53"><expr pos:start="31:34" pos:end="31:53"><name pos:start="31:34" pos:end="31:53">KVM_CAP_SET_TSS_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:17">(<expr pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:14">&lt;=</operator> <literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>)</condition> <block pos:start="33:19" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:19">

        <expr_stmt pos:start="35:9" pos:end="35:71"><expr pos:start="35:9" pos:end="35:70"><call pos:start="35:9" pos:end="35:70"><name pos:start="35:9" pos:end="35:15">fprintf</name><argument_list pos:start="35:16" pos:end="35:70">(<argument pos:start="35:17" pos:end="35:22"><expr pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:22">stderr</name></expr></argument>, <argument pos:start="35:25" pos:end="35:69"><expr pos:start="35:25" pos:end="35:69"><literal type="string" pos:start="35:25" pos:end="35:69">"kvm does not support KVM_CAP_SET_TSS_ADDR\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:19">return <expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="49:7">/* this address is 3 pages before the bios, and the bios should present

     * as unavaible memory.  FIXME, need to ensure the e820 map deals with

     * this?

     */</comment>

    <comment type="block" pos:start="51:5" pos:end="55:7">/*

     * Tell fw_cfg to notify the BIOS to reserve the range.

     */</comment>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:62">(<expr pos:start="57:9" pos:end="57:61"><call pos:start="57:9" pos:end="57:57"><name pos:start="57:9" pos:end="57:22">e820_add_entry</name><argument_list pos:start="57:23" pos:end="57:57">(<argument pos:start="57:24" pos:end="57:33"><expr pos:start="57:24" pos:end="57:33"><literal type="number" pos:start="57:24" pos:end="57:33">0xfffbc000</literal></expr></argument>, <argument pos:start="57:36" pos:end="57:41"><expr pos:start="57:36" pos:end="57:41"><literal type="number" pos:start="57:36" pos:end="57:41">0x4000</literal></expr></argument>, <argument pos:start="57:44" pos:end="57:56"><expr pos:start="57:44" pos:end="57:56"><name pos:start="57:44" pos:end="57:56">E820_RESERVED</name></expr></argument>)</argument_list></call> <operator pos:start="57:59" pos:end="57:59">&lt;</operator> <literal type="number" pos:start="57:61" pos:end="57:61">0</literal></expr>)</condition> <block pos:start="57:64" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:16">

        <expr_stmt pos:start="59:9" pos:end="59:49"><expr pos:start="59:9" pos:end="59:48"><call pos:start="59:9" pos:end="59:48"><name pos:start="59:9" pos:end="59:14">perror</name><argument_list pos:start="59:15" pos:end="59:48">(<argument pos:start="59:16" pos:end="59:47"><expr pos:start="59:16" pos:end="59:47"><literal type="string" pos:start="59:16" pos:end="59:47">"e820_add_entry() table is full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:16"><expr pos:start="61:9" pos:end="61:15"><call pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:12">exit</name><argument_list pos:start="61:13" pos:end="61:15">(<argument pos:start="61:14" pos:end="61:14"><expr pos:start="61:14" pos:end="61:14"><literal type="number" pos:start="61:14" pos:end="61:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:56"><expr pos:start="65:5" pos:end="65:55"><name pos:start="65:5" pos:end="65:7">ret</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:55"><name pos:start="65:11" pos:end="65:22">kvm_vm_ioctl</name><argument_list pos:start="65:23" pos:end="65:55">(<argument pos:start="65:24" pos:end="65:24"><expr pos:start="65:24" pos:end="65:24"><name pos:start="65:24" pos:end="65:24">s</name></expr></argument>, <argument pos:start="65:27" pos:end="65:42"><expr pos:start="65:27" pos:end="65:42"><name pos:start="65:27" pos:end="65:42">KVM_SET_TSS_ADDR</name></expr></argument>, <argument pos:start="65:45" pos:end="65:54"><expr pos:start="65:45" pos:end="65:54"><literal type="number" pos:start="65:45" pos:end="65:54">0xfffbd000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:16">(<expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">&lt;</operator> <literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>)</condition> <block pos:start="67:18" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:19">

        <return pos:start="69:9" pos:end="69:19">return <expr pos:start="69:16" pos:end="69:18"><name pos:start="69:16" pos:end="69:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="75:5" pos:end="75:41">return <expr pos:start="75:12" pos:end="75:40"><call pos:start="75:12" pos:end="75:40"><name pos:start="75:12" pos:end="75:37">kvm_init_identity_map_page</name><argument_list pos:start="75:38" pos:end="75:40">(<argument pos:start="75:39" pos:end="75:39"><expr pos:start="75:39" pos:end="75:39"><name pos:start="75:39" pos:end="75:39">s</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
