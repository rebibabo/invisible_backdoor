<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10048.c" pos:tabs="8"><function pos:start="1:1" pos:end="211:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">oss_init_out</name> <parameter_list pos:start="1:25" pos:end="1:59">(<parameter pos:start="1:26" pos:end="1:39"><decl pos:start="1:26" pos:end="1:39"><type pos:start="1:26" pos:end="1:39"><name pos:start="1:26" pos:end="1:35">HWVoiceOut</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">hw</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:58"><decl pos:start="1:42" pos:end="1:58"><type pos:start="1:42" pos:end="1:58"><name pos:start="1:42" pos:end="1:54">audsettings_t</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:58">as</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="211:1">{<block_content pos:start="5:5" pos:end="209:13">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">OSSVoiceOut</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">oss</name> <init pos:start="5:22" pos:end="5:41">= <expr pos:start="5:24" pos:end="5:41"><operator pos:start="5:24" pos:end="5:24">(</operator><name pos:start="5:25" pos:end="5:35">OSSVoiceOut</name> <operator pos:start="5:37" pos:end="5:37">*</operator><operator pos:start="5:38" pos:end="5:38">)</operator> <name pos:start="5:40" pos:end="5:41">hw</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:25"><type pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:21">oss_params</name></name></type> <name pos:start="7:23" pos:end="7:25">req</name></decl>, <decl pos:start="7:28" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:21"/><name pos:start="7:28" pos:end="7:30">obt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:18">endianness</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:11"><decl pos:start="13:5" pos:end="13:10"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">audfmt_e</name></type> <name pos:start="15:14" pos:end="15:26">effective_fmt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:17">audsettings_t</name></type> <name pos:start="17:19" pos:end="17:24">obt_as</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:17"><expr pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:7">oss</name><operator pos:start="21:8" pos:end="21:9">-&gt;</operator><name pos:start="21:10" pos:end="21:11">fd</name></name> <operator pos:start="21:13" pos:end="21:13">=</operator> <operator pos:start="21:15" pos:end="21:15">-</operator><literal type="number" pos:start="21:16" pos:end="21:16">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:7">req</name><operator pos:start="25:8" pos:end="25:8">.</operator><name pos:start="25:9" pos:end="25:11">fmt</name></name> <operator pos:start="25:13" pos:end="25:13">=</operator> <call pos:start="25:15" pos:end="25:37"><name pos:start="25:15" pos:end="25:27">aud_to_ossfmt</name> <argument_list pos:start="25:29" pos:end="25:37">(<argument pos:start="25:30" pos:end="25:36"><expr pos:start="25:30" pos:end="25:36"><name pos:start="25:30" pos:end="25:36"><name pos:start="25:30" pos:end="25:31">as</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:36">fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:24"><expr pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:7">req</name><operator pos:start="27:8" pos:end="27:8">.</operator><name pos:start="27:9" pos:end="27:12">freq</name></name> <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:17">as</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:23">freq</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:34"><expr pos:start="29:5" pos:end="29:33"><name pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:7">req</name><operator pos:start="29:8" pos:end="29:8">.</operator><name pos:start="29:9" pos:end="29:17">nchannels</name></name> <operator pos:start="29:19" pos:end="29:19">=</operator> <name pos:start="29:21" pos:end="29:33"><name pos:start="29:21" pos:end="29:22">as</name><operator pos:start="29:23" pos:end="29:24">-&gt;</operator><name pos:start="29:25" pos:end="29:33">nchannels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:33"><expr pos:start="31:5" pos:end="31:32"><name pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:7">req</name><operator pos:start="31:8" pos:end="31:8">.</operator><name pos:start="31:9" pos:end="31:16">fragsize</name></name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:32"><name pos:start="31:20" pos:end="31:23">conf</name><operator pos:start="31:24" pos:end="31:24">.</operator><name pos:start="31:25" pos:end="31:32">fragsize</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:29"><expr pos:start="33:5" pos:end="33:28"><name pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:7">req</name><operator pos:start="33:8" pos:end="33:8">.</operator><name pos:start="33:9" pos:end="33:14">nfrags</name></name> <operator pos:start="33:16" pos:end="33:16">=</operator> <name pos:start="33:18" pos:end="33:28"><name pos:start="33:18" pos:end="33:21">conf</name><operator pos:start="33:22" pos:end="33:22">.</operator><name pos:start="33:23" pos:end="33:28">nfrags</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="41:5"><if pos:start="37:5" pos:end="41:5">if <condition pos:start="37:8" pos:end="37:38">(<expr pos:start="37:9" pos:end="37:37"><call pos:start="37:9" pos:end="37:37"><name pos:start="37:9" pos:end="37:16">oss_open</name> <argument_list pos:start="37:18" pos:end="37:37">(<argument pos:start="37:19" pos:end="37:19"><expr pos:start="37:19" pos:end="37:19"><literal type="number" pos:start="37:19" pos:end="37:19">0</literal></expr></argument>, <argument pos:start="37:22" pos:end="37:25"><expr pos:start="37:22" pos:end="37:25"><operator pos:start="37:22" pos:end="37:22">&amp;</operator><name pos:start="37:23" pos:end="37:25">req</name></expr></argument>, <argument pos:start="37:28" pos:end="37:31"><expr pos:start="37:28" pos:end="37:31"><operator pos:start="37:28" pos:end="37:28">&amp;</operator><name pos:start="37:29" pos:end="37:31">obt</name></expr></argument>, <argument pos:start="37:34" pos:end="37:36"><expr pos:start="37:34" pos:end="37:36"><operator pos:start="37:34" pos:end="37:34">&amp;</operator><name pos:start="37:35" pos:end="37:36">fd</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:40" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:18">

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:63"><expr pos:start="45:5" pos:end="45:62"><name pos:start="45:5" pos:end="45:7">err</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:62"><name pos:start="45:11" pos:end="45:23">oss_to_audfmt</name> <argument_list pos:start="45:25" pos:end="45:62">(<argument pos:start="45:26" pos:end="45:32"><expr pos:start="45:26" pos:end="45:32"><name pos:start="45:26" pos:end="45:32"><name pos:start="45:26" pos:end="45:28">obt</name><operator pos:start="45:29" pos:end="45:29">.</operator><name pos:start="45:30" pos:end="45:32">fmt</name></name></expr></argument>, <argument pos:start="45:35" pos:end="45:48"><expr pos:start="45:35" pos:end="45:48"><operator pos:start="45:35" pos:end="45:35">&amp;</operator><name pos:start="45:36" pos:end="45:48">effective_fmt</name></expr></argument>, <argument pos:start="45:51" pos:end="45:61"><expr pos:start="45:51" pos:end="45:61"><operator pos:start="45:51" pos:end="45:51">&amp;</operator><name pos:start="45:52" pos:end="45:61">endianness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:12">(<expr pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">err</name></expr>)</condition> <block pos:start="47:14" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:29"><expr pos:start="49:9" pos:end="49:28"><call pos:start="49:9" pos:end="49:28"><name pos:start="49:9" pos:end="49:22">oss_anal_close</name> <argument_list pos:start="49:24" pos:end="49:28">(<argument pos:start="49:25" pos:end="49:27"><expr pos:start="49:25" pos:end="49:27"><operator pos:start="49:25" pos:end="49:25">&amp;</operator><name pos:start="49:26" pos:end="49:27">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:27"><expr pos:start="57:5" pos:end="57:26"><name pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:10">obt_as</name><operator pos:start="57:11" pos:end="57:11">.</operator><name pos:start="57:12" pos:end="57:15">freq</name></name> <operator pos:start="57:17" pos:end="57:17">=</operator> <name pos:start="57:19" pos:end="57:26"><name pos:start="57:19" pos:end="57:21">obt</name><operator pos:start="57:22" pos:end="57:22">.</operator><name pos:start="57:23" pos:end="57:26">freq</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:37"><expr pos:start="59:5" pos:end="59:36"><name pos:start="59:5" pos:end="59:20"><name pos:start="59:5" pos:end="59:10">obt_as</name><operator pos:start="59:11" pos:end="59:11">.</operator><name pos:start="59:12" pos:end="59:20">nchannels</name></name> <operator pos:start="59:22" pos:end="59:22">=</operator> <name pos:start="59:24" pos:end="59:36"><name pos:start="59:24" pos:end="59:26">obt</name><operator pos:start="59:27" pos:end="59:27">.</operator><name pos:start="59:28" pos:end="59:36">nchannels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:31"><expr pos:start="61:5" pos:end="61:30"><name pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:10">obt_as</name><operator pos:start="61:11" pos:end="61:11">.</operator><name pos:start="61:12" pos:end="61:14">fmt</name></name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:30">effective_fmt</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:21"><name pos:start="63:5" pos:end="63:10">obt_as</name><operator pos:start="63:11" pos:end="63:11">.</operator><name pos:start="63:12" pos:end="63:21">endianness</name></name> <operator pos:start="63:23" pos:end="63:23">=</operator> <name pos:start="63:25" pos:end="63:34">endianness</name></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:45"><expr pos:start="67:5" pos:end="67:44"><call pos:start="67:5" pos:end="67:44"><name pos:start="67:5" pos:end="67:23">audio_pcm_init_info</name> <argument_list pos:start="67:25" pos:end="67:44">(<argument pos:start="67:26" pos:end="67:34"><expr pos:start="67:26" pos:end="67:34"><operator pos:start="67:26" pos:end="67:26">&amp;</operator><name pos:start="67:27" pos:end="67:34"><name pos:start="67:27" pos:end="67:28">hw</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:34">info</name></name></expr></argument>, <argument pos:start="67:37" pos:end="67:43"><expr pos:start="67:37" pos:end="67:43"><operator pos:start="67:37" pos:end="67:37">&amp;</operator><name pos:start="67:38" pos:end="67:43">obt_as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:29"><expr pos:start="69:5" pos:end="69:28"><name pos:start="69:5" pos:end="69:15"><name pos:start="69:5" pos:end="69:7">oss</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:15">nfrags</name></name> <operator pos:start="69:17" pos:end="69:17">=</operator> <name pos:start="69:19" pos:end="69:28"><name pos:start="69:19" pos:end="69:21">obt</name><operator pos:start="69:22" pos:end="69:22">.</operator><name pos:start="69:23" pos:end="69:28">nfrags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:33"><expr pos:start="71:5" pos:end="71:32"><name pos:start="71:5" pos:end="71:17"><name pos:start="71:5" pos:end="71:7">oss</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:17">fragsize</name></name> <operator pos:start="71:19" pos:end="71:19">=</operator> <name pos:start="71:21" pos:end="71:32"><name pos:start="71:21" pos:end="71:23">obt</name><operator pos:start="71:24" pos:end="71:24">.</operator><name pos:start="71:25" pos:end="71:32">fragsize</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:51">(<expr pos:start="75:9" pos:end="75:50"><name pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:11">obt</name><operator pos:start="75:12" pos:end="75:12">.</operator><name pos:start="75:13" pos:end="75:18">nfrags</name></name> <operator pos:start="75:20" pos:end="75:20">*</operator> <name pos:start="75:22" pos:end="75:33"><name pos:start="75:22" pos:end="75:24">obt</name><operator pos:start="75:25" pos:end="75:25">.</operator><name pos:start="75:26" pos:end="75:33">fragsize</name></name> <operator pos:start="75:35" pos:end="75:35">&amp;</operator> <name pos:start="75:37" pos:end="75:50"><name pos:start="75:37" pos:end="75:38">hw</name><operator pos:start="75:39" pos:end="75:40">-&gt;</operator><name pos:start="75:41" pos:end="75:44">info</name><operator pos:start="75:45" pos:end="75:45">.</operator><name pos:start="75:46" pos:end="75:50">align</name></name></expr>)</condition> <block pos:start="75:53" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:62">

        <expr_stmt pos:start="77:9" pos:end="79:62"><expr pos:start="77:9" pos:end="79:61"><call pos:start="77:9" pos:end="79:61"><name pos:start="77:9" pos:end="77:13">dolog</name> <argument_list pos:start="77:15" pos:end="79:61">(<argument pos:start="77:16" pos:end="77:72"><expr pos:start="77:16" pos:end="77:72"><literal type="string" pos:start="77:16" pos:end="77:72">"warning: Misaligned DAC buffer, size %d, alignment %d\n"</literal></expr></argument>,

               <argument pos:start="79:16" pos:end="79:40"><expr pos:start="79:16" pos:end="79:40"><name pos:start="79:16" pos:end="79:25"><name pos:start="79:16" pos:end="79:18">obt</name><operator pos:start="79:19" pos:end="79:19">.</operator><name pos:start="79:20" pos:end="79:25">nfrags</name></name> <operator pos:start="79:27" pos:end="79:27">*</operator> <name pos:start="79:29" pos:end="79:40"><name pos:start="79:29" pos:end="79:31">obt</name><operator pos:start="79:32" pos:end="79:32">.</operator><name pos:start="79:33" pos:end="79:40">fragsize</name></name></expr></argument>, <argument pos:start="79:43" pos:end="79:60"><expr pos:start="79:43" pos:end="79:60"><name pos:start="79:43" pos:end="79:56"><name pos:start="79:43" pos:end="79:44">hw</name><operator pos:start="79:45" pos:end="79:46">-&gt;</operator><name pos:start="79:47" pos:end="79:50">info</name><operator pos:start="79:51" pos:end="79:51">.</operator><name pos:start="79:52" pos:end="79:56">align</name></name> <operator pos:start="79:58" pos:end="79:58">+</operator> <literal type="number" pos:start="79:60" pos:end="79:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:64"><expr pos:start="85:5" pos:end="85:63"><name pos:start="85:5" pos:end="85:15"><name pos:start="85:5" pos:end="85:6">hw</name><operator pos:start="85:7" pos:end="85:8">-&gt;</operator><name pos:start="85:9" pos:end="85:15">samples</name></name> <operator pos:start="85:17" pos:end="85:17">=</operator> <operator pos:start="85:19" pos:end="85:19">(</operator><name pos:start="85:20" pos:end="85:29"><name pos:start="85:20" pos:end="85:22">obt</name><operator pos:start="85:23" pos:end="85:23">.</operator><name pos:start="85:24" pos:end="85:29">nfrags</name></name> <operator pos:start="85:31" pos:end="85:31">*</operator> <name pos:start="85:33" pos:end="85:44"><name pos:start="85:33" pos:end="85:35">obt</name><operator pos:start="85:36" pos:end="85:36">.</operator><name pos:start="85:37" pos:end="85:44">fragsize</name></name><operator pos:start="85:45" pos:end="85:45">)</operator> <operator pos:start="85:47" pos:end="85:48">&gt;&gt;</operator> <name pos:start="85:50" pos:end="85:63"><name pos:start="85:50" pos:end="85:51">hw</name><operator pos:start="85:52" pos:end="85:53">-&gt;</operator><name pos:start="85:54" pos:end="85:57">info</name><operator pos:start="85:58" pos:end="85:58">.</operator><name pos:start="85:59" pos:end="85:63">shift</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:21"><expr pos:start="89:5" pos:end="89:20"><name pos:start="89:5" pos:end="89:16"><name pos:start="89:5" pos:end="89:7">oss</name><operator pos:start="89:8" pos:end="89:9">-&gt;</operator><name pos:start="89:10" pos:end="89:16">mmapped</name></name> <operator pos:start="89:18" pos:end="89:18">=</operator> <literal type="number" pos:start="89:20" pos:end="89:20">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="169:5"><if pos:start="91:5" pos:end="169:5">if <condition pos:start="91:8" pos:end="91:22">(<expr pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:12">conf</name><operator pos:start="91:13" pos:end="91:13">.</operator><name pos:start="91:14" pos:end="91:21">try_mmap</name></name></expr>)</condition> <block pos:start="91:24" pos:end="169:5">{<block_content pos:start="93:9" pos:end="167:9">

        <expr_stmt pos:start="93:9" pos:end="107:14"><expr pos:start="93:9" pos:end="107:13"><name pos:start="93:9" pos:end="93:20"><name pos:start="93:9" pos:end="93:11">oss</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:20">pcm_buf</name></name> <operator pos:start="93:22" pos:end="93:22">=</operator> <call pos:start="93:24" pos:end="107:13"><name pos:start="93:24" pos:end="93:27">mmap</name> <argument_list pos:start="93:29" pos:end="107:13">(

            <argument pos:start="95:13" pos:end="95:13"><expr pos:start="95:13" pos:end="95:13"><literal type="number" pos:start="95:13" pos:end="95:13">0</literal></expr></argument>,

            <argument pos:start="97:13" pos:end="97:41"><expr pos:start="97:13" pos:end="97:41"><name pos:start="97:13" pos:end="97:23"><name pos:start="97:13" pos:end="97:14">hw</name><operator pos:start="97:15" pos:end="97:16">-&gt;</operator><name pos:start="97:17" pos:end="97:23">samples</name></name> <operator pos:start="97:25" pos:end="97:26">&lt;&lt;</operator> <name pos:start="97:28" pos:end="97:41"><name pos:start="97:28" pos:end="97:29">hw</name><operator pos:start="97:30" pos:end="97:31">-&gt;</operator><name pos:start="97:32" pos:end="97:35">info</name><operator pos:start="97:36" pos:end="97:36">.</operator><name pos:start="97:37" pos:end="97:41">shift</name></name></expr></argument>,

            <argument pos:start="99:13" pos:end="99:34"><expr pos:start="99:13" pos:end="99:34"><name pos:start="99:13" pos:end="99:21">PROT_READ</name> <operator pos:start="99:23" pos:end="99:23">|</operator> <name pos:start="99:25" pos:end="99:34">PROT_WRITE</name></expr></argument>,

            <argument pos:start="101:13" pos:end="101:22"><expr pos:start="101:13" pos:end="101:22"><name pos:start="101:13" pos:end="101:22">MAP_SHARED</name></expr></argument>,

            <argument pos:start="103:13" pos:end="103:14"><expr pos:start="103:13" pos:end="103:14"><name pos:start="103:13" pos:end="103:14">fd</name></expr></argument>,

            <argument pos:start="105:13" pos:end="105:13"><expr pos:start="105:13" pos:end="105:13"><literal type="number" pos:start="105:13" pos:end="105:13">0</literal></expr></argument>

            )</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="167:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:39">(<expr pos:start="109:13" pos:end="109:38"><name pos:start="109:13" pos:end="109:24"><name pos:start="109:13" pos:end="109:15">oss</name><operator pos:start="109:16" pos:end="109:17">-&gt;</operator><name pos:start="109:18" pos:end="109:24">pcm_buf</name></name> <operator pos:start="109:26" pos:end="109:27">==</operator> <name pos:start="109:29" pos:end="109:38">MAP_FAILED</name></expr>)</condition> <block pos:start="109:41" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:55">

            <expr_stmt pos:start="111:13" pos:end="113:55"><expr pos:start="111:13" pos:end="113:54"><call pos:start="111:13" pos:end="113:54"><name pos:start="111:13" pos:end="111:22">oss_logerr</name> <argument_list pos:start="111:24" pos:end="113:54">(<argument pos:start="111:25" pos:end="111:29"><expr pos:start="111:25" pos:end="111:29"><name pos:start="111:25" pos:end="111:29">errno</name></expr></argument>, <argument pos:start="111:32" pos:end="111:64"><expr pos:start="111:32" pos:end="111:64"><literal type="string" pos:start="111:32" pos:end="111:64">"Failed to map %d bytes of DAC\n"</literal></expr></argument>,

                        <argument pos:start="113:25" pos:end="113:53"><expr pos:start="113:25" pos:end="113:53"><name pos:start="113:25" pos:end="113:35"><name pos:start="113:25" pos:end="113:26">hw</name><operator pos:start="113:27" pos:end="113:28">-&gt;</operator><name pos:start="113:29" pos:end="113:35">samples</name></name> <operator pos:start="113:37" pos:end="113:38">&lt;&lt;</operator> <name pos:start="113:40" pos:end="113:53"><name pos:start="113:40" pos:end="113:41">hw</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:47">info</name><operator pos:start="113:48" pos:end="113:48">.</operator><name pos:start="113:49" pos:end="113:53">shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="115:11" pos:end="167:9">else <block pos:start="115:16" pos:end="167:9">{<block_content pos:start="117:13" pos:end="165:13">

            <decl_stmt pos:start="117:13" pos:end="117:20"><decl pos:start="117:13" pos:end="117:19"><type pos:start="117:13" pos:end="117:15"><name pos:start="117:13" pos:end="117:15">int</name></type> <name pos:start="117:17" pos:end="117:19">err</name></decl>;</decl_stmt>

            <decl_stmt pos:start="119:13" pos:end="119:25"><decl pos:start="119:13" pos:end="119:24"><type pos:start="119:13" pos:end="119:15"><name pos:start="119:13" pos:end="119:15">int</name></type> <name pos:start="119:17" pos:end="119:20">trig</name> <init pos:start="119:22" pos:end="119:24">= <expr pos:start="119:24" pos:end="119:24"><literal type="number" pos:start="119:24" pos:end="119:24">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="121:13" pos:end="149:13"><if pos:start="121:13" pos:end="125:13">if <condition pos:start="121:16" pos:end="121:61">(<expr pos:start="121:17" pos:end="121:60"><call pos:start="121:17" pos:end="121:56"><name pos:start="121:17" pos:end="121:21">ioctl</name> <argument_list pos:start="121:23" pos:end="121:56">(<argument pos:start="121:24" pos:end="121:25"><expr pos:start="121:24" pos:end="121:25"><name pos:start="121:24" pos:end="121:25">fd</name></expr></argument>, <argument pos:start="121:28" pos:end="121:48"><expr pos:start="121:28" pos:end="121:48"><name pos:start="121:28" pos:end="121:48">SNDCTL_DSP_SETTRIGGER</name></expr></argument>, <argument pos:start="121:51" pos:end="121:55"><expr pos:start="121:51" pos:end="121:55"><operator pos:start="121:51" pos:end="121:51">&amp;</operator><name pos:start="121:52" pos:end="121:55">trig</name></expr></argument>)</argument_list></call> <operator pos:start="121:58" pos:end="121:58">&lt;</operator> <literal type="number" pos:start="121:60" pos:end="121:60">0</literal></expr>)</condition> <block pos:start="121:63" pos:end="125:13">{<block_content pos:start="123:17" pos:end="123:71">

                <expr_stmt pos:start="123:17" pos:end="123:71"><expr pos:start="123:17" pos:end="123:70"><call pos:start="123:17" pos:end="123:70"><name pos:start="123:17" pos:end="123:26">oss_logerr</name> <argument_list pos:start="123:28" pos:end="123:70">(<argument pos:start="123:29" pos:end="123:33"><expr pos:start="123:29" pos:end="123:33"><name pos:start="123:29" pos:end="123:33">errno</name></expr></argument>, <argument pos:start="123:36" pos:end="123:69"><expr pos:start="123:36" pos:end="123:69"><literal type="string" pos:start="123:36" pos:end="123:69">"SNDCTL_DSP_SETTRIGGER 0 failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if>

            <else pos:start="127:13" pos:end="149:13">else <block pos:start="127:18" pos:end="149:13">{<block_content pos:start="129:17" pos:end="147:17">

                <expr_stmt pos:start="129:17" pos:end="129:41"><expr pos:start="129:17" pos:end="129:40"><name pos:start="129:17" pos:end="129:20">trig</name> <operator pos:start="129:22" pos:end="129:22">=</operator> <name pos:start="129:24" pos:end="129:40">PCM_ENABLE_OUTPUT</name></expr>;</expr_stmt>

                <if_stmt pos:start="131:17" pos:end="147:17"><if pos:start="131:17" pos:end="141:17">if <condition pos:start="131:20" pos:end="131:65">(<expr pos:start="131:21" pos:end="131:64"><call pos:start="131:21" pos:end="131:60"><name pos:start="131:21" pos:end="131:25">ioctl</name> <argument_list pos:start="131:27" pos:end="131:60">(<argument pos:start="131:28" pos:end="131:29"><expr pos:start="131:28" pos:end="131:29"><name pos:start="131:28" pos:end="131:29">fd</name></expr></argument>, <argument pos:start="131:32" pos:end="131:52"><expr pos:start="131:32" pos:end="131:52"><name pos:start="131:32" pos:end="131:52">SNDCTL_DSP_SETTRIGGER</name></expr></argument>, <argument pos:start="131:55" pos:end="131:59"><expr pos:start="131:55" pos:end="131:59"><operator pos:start="131:55" pos:end="131:55">&amp;</operator><name pos:start="131:56" pos:end="131:59">trig</name></expr></argument>)</argument_list></call> <operator pos:start="131:62" pos:end="131:62">&lt;</operator> <literal type="number" pos:start="131:64" pos:end="131:64">0</literal></expr>)</condition> <block pos:start="131:67" pos:end="141:17">{<block_content pos:start="133:21" pos:end="139:26">

                    <expr_stmt pos:start="133:21" pos:end="139:26"><expr pos:start="133:21" pos:end="139:25"><call pos:start="133:21" pos:end="139:25"><name pos:start="133:21" pos:end="133:30">oss_logerr</name> <argument_list pos:start="133:32" pos:end="139:25">(

                        <argument pos:start="135:25" pos:end="135:29"><expr pos:start="135:25" pos:end="135:29"><name pos:start="135:25" pos:end="135:29">errno</name></expr></argument>,

                        <argument pos:start="137:25" pos:end="137:74"><expr pos:start="137:25" pos:end="137:74"><literal type="string" pos:start="137:25" pos:end="137:74">"SNDCTL_DSP_SETTRIGGER PCM_ENABLE_OUTPUT failed\n"</literal></expr></argument>

                        )</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if>

                <else pos:start="143:17" pos:end="147:17">else <block pos:start="143:22" pos:end="147:17">{<block_content pos:start="145:21" pos:end="145:37">

                    <expr_stmt pos:start="145:21" pos:end="145:37"><expr pos:start="145:21" pos:end="145:36"><name pos:start="145:21" pos:end="145:32"><name pos:start="145:21" pos:end="145:23">oss</name><operator pos:start="145:24" pos:end="145:25">-&gt;</operator><name pos:start="145:26" pos:end="145:32">mmapped</name></name> <operator pos:start="145:34" pos:end="145:34">=</operator> <literal type="number" pos:start="145:36" pos:end="145:36">1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="153:13" pos:end="165:13"><if pos:start="153:13" pos:end="165:13">if <condition pos:start="153:16" pos:end="153:30">(<expr pos:start="153:17" pos:end="153:29"><operator pos:start="153:17" pos:end="153:17">!</operator><name pos:start="153:18" pos:end="153:29"><name pos:start="153:18" pos:end="153:20">oss</name><operator pos:start="153:21" pos:end="153:22">-&gt;</operator><name pos:start="153:23" pos:end="153:29">mmapped</name></name></expr>)</condition> <block pos:start="153:32" pos:end="165:13">{<block_content pos:start="155:17" pos:end="163:17">

                <expr_stmt pos:start="155:17" pos:end="155:75"><expr pos:start="155:17" pos:end="155:74"><name pos:start="155:17" pos:end="155:19">err</name> <operator pos:start="155:21" pos:end="155:21">=</operator> <call pos:start="155:23" pos:end="155:74"><name pos:start="155:23" pos:end="155:28">munmap</name> <argument_list pos:start="155:30" pos:end="155:74">(<argument pos:start="155:31" pos:end="155:42"><expr pos:start="155:31" pos:end="155:42"><name pos:start="155:31" pos:end="155:42"><name pos:start="155:31" pos:end="155:33">oss</name><operator pos:start="155:34" pos:end="155:35">-&gt;</operator><name pos:start="155:36" pos:end="155:42">pcm_buf</name></name></expr></argument>, <argument pos:start="155:45" pos:end="155:73"><expr pos:start="155:45" pos:end="155:73"><name pos:start="155:45" pos:end="155:55"><name pos:start="155:45" pos:end="155:46">hw</name><operator pos:start="155:47" pos:end="155:48">-&gt;</operator><name pos:start="155:49" pos:end="155:55">samples</name></name> <operator pos:start="155:57" pos:end="155:58">&lt;&lt;</operator> <name pos:start="155:60" pos:end="155:73"><name pos:start="155:60" pos:end="155:61">hw</name><operator pos:start="155:62" pos:end="155:63">-&gt;</operator><name pos:start="155:64" pos:end="155:67">info</name><operator pos:start="155:68" pos:end="155:68">.</operator><name pos:start="155:69" pos:end="155:73">shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="157:17" pos:end="163:17"><if pos:start="157:17" pos:end="163:17">if <condition pos:start="157:20" pos:end="157:24">(<expr pos:start="157:21" pos:end="157:23"><name pos:start="157:21" pos:end="157:23">err</name></expr>)</condition> <block pos:start="157:26" pos:end="163:17">{<block_content pos:start="159:21" pos:end="161:77">

                    <expr_stmt pos:start="159:21" pos:end="161:77"><expr pos:start="159:21" pos:end="161:76"><call pos:start="159:21" pos:end="161:76"><name pos:start="159:21" pos:end="159:30">oss_logerr</name> <argument_list pos:start="159:32" pos:end="161:76">(<argument pos:start="159:33" pos:end="159:37"><expr pos:start="159:33" pos:end="159:37"><name pos:start="159:33" pos:end="159:37">errno</name></expr></argument>, <argument pos:start="159:40" pos:end="159:76"><expr pos:start="159:40" pos:end="159:76"><literal type="string" pos:start="159:40" pos:end="159:76">"Failed to unmap buffer %p size %d\n"</literal></expr></argument>,

                                <argument pos:start="161:33" pos:end="161:44"><expr pos:start="161:33" pos:end="161:44"><name pos:start="161:33" pos:end="161:44"><name pos:start="161:33" pos:end="161:35">oss</name><operator pos:start="161:36" pos:end="161:37">-&gt;</operator><name pos:start="161:38" pos:end="161:44">pcm_buf</name></name></expr></argument>, <argument pos:start="161:47" pos:end="161:75"><expr pos:start="161:47" pos:end="161:75"><name pos:start="161:47" pos:end="161:57"><name pos:start="161:47" pos:end="161:48">hw</name><operator pos:start="161:49" pos:end="161:50">-&gt;</operator><name pos:start="161:51" pos:end="161:57">samples</name></name> <operator pos:start="161:59" pos:end="161:60">&lt;&lt;</operator> <name pos:start="161:62" pos:end="161:75"><name pos:start="161:62" pos:end="161:63">hw</name><operator pos:start="161:64" pos:end="161:65">-&gt;</operator><name pos:start="161:66" pos:end="161:69">info</name><operator pos:start="161:70" pos:end="161:70">.</operator><name pos:start="161:71" pos:end="161:75">shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="173:5" pos:end="203:5"><if pos:start="173:5" pos:end="203:5">if <condition pos:start="173:8" pos:end="173:22">(<expr pos:start="173:9" pos:end="173:21"><operator pos:start="173:9" pos:end="173:9">!</operator><name pos:start="173:10" pos:end="173:21"><name pos:start="173:10" pos:end="173:12">oss</name><operator pos:start="173:13" pos:end="173:14">-&gt;</operator><name pos:start="173:15" pos:end="173:21">mmapped</name></name></expr>)</condition> <block pos:start="173:24" pos:end="203:5">{<block_content pos:start="175:9" pos:end="201:9">

        <expr_stmt pos:start="175:9" pos:end="183:14"><expr pos:start="175:9" pos:end="183:13"><name pos:start="175:9" pos:end="175:20"><name pos:start="175:9" pos:end="175:11">oss</name><operator pos:start="175:12" pos:end="175:13">-&gt;</operator><name pos:start="175:14" pos:end="175:20">pcm_buf</name></name> <operator pos:start="175:22" pos:end="175:22">=</operator> <call pos:start="175:24" pos:end="183:13"><name pos:start="175:24" pos:end="175:35">audio_calloc</name> <argument_list pos:start="175:37" pos:end="183:13">(

            <argument pos:start="177:13" pos:end="177:22"><expr pos:start="177:13" pos:end="177:22"><name pos:start="177:13" pos:end="177:22">AUDIO_FUNC</name></expr></argument>,

            <argument pos:start="179:13" pos:end="179:23"><expr pos:start="179:13" pos:end="179:23"><name pos:start="179:13" pos:end="179:23"><name pos:start="179:13" pos:end="179:14">hw</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:23">samples</name></name></expr></argument>,

            <argument pos:start="181:13" pos:end="181:31"><expr pos:start="181:13" pos:end="181:31"><literal type="number" pos:start="181:13" pos:end="181:13">1</literal> <operator pos:start="181:15" pos:end="181:16">&lt;&lt;</operator> <name pos:start="181:18" pos:end="181:31"><name pos:start="181:18" pos:end="181:19">hw</name><operator pos:start="181:20" pos:end="181:21">-&gt;</operator><name pos:start="181:22" pos:end="181:25">info</name><operator pos:start="181:26" pos:end="181:26">.</operator><name pos:start="181:27" pos:end="181:31">shift</name></name></expr></argument>

            )</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="185:9" pos:end="201:9"><if pos:start="185:9" pos:end="201:9">if <condition pos:start="185:12" pos:end="185:26">(<expr pos:start="185:13" pos:end="185:25"><operator pos:start="185:13" pos:end="185:13">!</operator><name pos:start="185:14" pos:end="185:25"><name pos:start="185:14" pos:end="185:16">oss</name><operator pos:start="185:17" pos:end="185:18">-&gt;</operator><name pos:start="185:19" pos:end="185:25">pcm_buf</name></name></expr>)</condition> <block pos:start="185:28" pos:end="201:9">{<block_content pos:start="187:13" pos:end="199:22">

            <expr_stmt pos:start="187:13" pos:end="195:18"><expr pos:start="187:13" pos:end="195:17"><call pos:start="187:13" pos:end="195:17"><name pos:start="187:13" pos:end="187:17">dolog</name> <argument_list pos:start="187:19" pos:end="195:17">(

                <argument pos:start="189:17" pos:end="189:77"><expr pos:start="189:17" pos:end="189:77"><literal type="string" pos:start="189:17" pos:end="189:77">"Could not allocate DAC buffer (%d samples, each %d bytes)\n"</literal></expr></argument>,

                <argument pos:start="191:17" pos:end="191:27"><expr pos:start="191:17" pos:end="191:27"><name pos:start="191:17" pos:end="191:27"><name pos:start="191:17" pos:end="191:18">hw</name><operator pos:start="191:19" pos:end="191:20">-&gt;</operator><name pos:start="191:21" pos:end="191:27">samples</name></name></expr></argument>,

                <argument pos:start="193:17" pos:end="193:35"><expr pos:start="193:17" pos:end="193:35"><literal type="number" pos:start="193:17" pos:end="193:17">1</literal> <operator pos:start="193:19" pos:end="193:20">&lt;&lt;</operator> <name pos:start="193:22" pos:end="193:35"><name pos:start="193:22" pos:end="193:23">hw</name><operator pos:start="193:24" pos:end="193:25">-&gt;</operator><name pos:start="193:26" pos:end="193:29">info</name><operator pos:start="193:30" pos:end="193:30">.</operator><name pos:start="193:31" pos:end="193:35">shift</name></name></expr></argument>

                )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:33"><expr pos:start="197:13" pos:end="197:32"><call pos:start="197:13" pos:end="197:32"><name pos:start="197:13" pos:end="197:26">oss_anal_close</name> <argument_list pos:start="197:28" pos:end="197:32">(<argument pos:start="197:29" pos:end="197:31"><expr pos:start="197:29" pos:end="197:31"><operator pos:start="197:29" pos:end="197:29">&amp;</operator><name pos:start="197:30" pos:end="197:31">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="199:13" pos:end="199:22">return <expr pos:start="199:20" pos:end="199:21"><operator pos:start="199:20" pos:end="199:20">-</operator><literal type="number" pos:start="199:21" pos:end="199:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="207:5" pos:end="207:17"><expr pos:start="207:5" pos:end="207:16"><name pos:start="207:5" pos:end="207:11"><name pos:start="207:5" pos:end="207:7">oss</name><operator pos:start="207:8" pos:end="207:9">-&gt;</operator><name pos:start="207:10" pos:end="207:11">fd</name></name> <operator pos:start="207:13" pos:end="207:13">=</operator> <name pos:start="207:15" pos:end="207:16">fd</name></expr>;</expr_stmt>

    <return pos:start="209:5" pos:end="209:13">return <expr pos:start="209:12" pos:end="209:12"><literal type="number" pos:start="209:12" pos:end="209:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
