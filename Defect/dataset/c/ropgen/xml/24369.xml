<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24369.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">ff_init_elbg</name><parameter_list pos:start="1:18" pos:end="5:36">(<parameter pos:start="1:19" pos:end="1:29"><decl pos:start="1:19" pos:end="1:29"><type pos:start="1:19" pos:end="1:29"><name pos:start="1:19" pos:end="1:21">int</name> <modifier pos:start="1:23" pos:end="1:23">*</modifier></type><name pos:start="1:24" pos:end="1:29">points</name></decl></parameter>, <parameter pos:start="1:32" pos:end="1:38"><decl pos:start="1:32" pos:end="1:38"><type pos:start="1:32" pos:end="1:38"><name pos:start="1:32" pos:end="1:34">int</name></type> <name pos:start="1:36" pos:end="1:38">dim</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><name pos:start="1:41" pos:end="1:43">int</name></type> <name pos:start="1:45" pos:end="1:53">numpoints</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:68"><decl pos:start="1:56" pos:end="1:68"><type pos:start="1:56" pos:end="1:68"><name pos:start="1:56" pos:end="1:58">int</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:68">codebook</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:27"><decl pos:start="3:19" pos:end="3:27"><type pos:start="3:19" pos:end="3:27"><name pos:start="3:19" pos:end="3:21">int</name></type> <name pos:start="3:23" pos:end="3:27">numCB</name></decl></parameter>, <parameter pos:start="3:30" pos:end="3:42"><decl pos:start="3:30" pos:end="3:42"><type pos:start="3:30" pos:end="3:42"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:42">max_steps</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:59"><name pos:start="3:45" pos:end="3:47">int</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:59">closest_cb</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:35"><decl pos:start="5:19" pos:end="5:35"><type pos:start="5:19" pos:end="5:35"><name pos:start="5:19" pos:end="5:23">AVLFG</name> <modifier pos:start="5:25" pos:end="5:25">*</modifier></type><name pos:start="5:26" pos:end="5:35">rand_state</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="51:1">{<block_content pos:start="9:5" pos:end="47:36">

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">k</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="47:36"><if pos:start="13:5" pos:end="41:5">if <condition pos:start="13:8" pos:end="13:29">(<expr pos:start="13:9" pos:end="13:28"><name pos:start="13:9" pos:end="13:17">numpoints</name> <operator pos:start="13:19" pos:end="13:19">&gt;</operator> <literal type="number" pos:start="13:21" pos:end="13:22">24</literal><operator pos:start="13:23" pos:end="13:23">*</operator><name pos:start="13:24" pos:end="13:28">numCB</name></expr>)</condition> <block pos:start="13:31" pos:end="41:5">{<block_content pos:start="19:9" pos:end="37:29">

        <comment type="block" pos:start="15:9" pos:end="17:78">/* ELBG is very costly for a big number of points. So if we have a lot

           of them, get a good initial codebook to save on iterations       */</comment>

        <decl_stmt pos:start="19:9" pos:end="19:68"><decl pos:start="19:9" pos:end="19:67"><type pos:start="19:9" pos:end="19:13"><name pos:start="19:9" pos:end="19:11">int</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:24">temp_points</name> <init pos:start="19:26" pos:end="19:67">= <expr pos:start="19:28" pos:end="19:67"><call pos:start="19:28" pos:end="19:67"><name pos:start="19:28" pos:end="19:36">av_malloc</name><argument_list pos:start="19:37" pos:end="19:67">(<argument pos:start="19:38" pos:end="19:66"><expr pos:start="19:38" pos:end="19:66"><name pos:start="19:38" pos:end="19:40">dim</name><operator pos:start="19:41" pos:end="19:41">*</operator><operator pos:start="19:42" pos:end="19:42">(</operator><name pos:start="19:43" pos:end="19:51">numpoints</name><operator pos:start="19:52" pos:end="19:52">/</operator><literal type="number" pos:start="19:53" pos:end="19:53">8</literal><operator pos:start="19:54" pos:end="19:54">)</operator><operator pos:start="19:55" pos:end="19:55">*</operator><sizeof pos:start="19:56" pos:end="19:66">sizeof<argument_list pos:start="19:62" pos:end="19:66">(<argument pos:start="19:63" pos:end="19:65"><expr pos:start="19:63" pos:end="19:65"><name pos:start="19:63" pos:end="19:65">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for pos:start="21:9" pos:end="27:9">for <control pos:start="21:13" pos:end="21:37">(<init pos:start="21:14" pos:end="21:17"><expr pos:start="21:14" pos:end="21:16"><name pos:start="21:14" pos:end="21:14">i</name><operator pos:start="21:15" pos:end="21:15">=</operator><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</init> <condition pos:start="21:19" pos:end="21:32"><expr pos:start="21:19" pos:end="21:31"><name pos:start="21:19" pos:end="21:19">i</name><operator pos:start="21:20" pos:end="21:20">&lt;</operator><name pos:start="21:21" pos:end="21:29">numpoints</name><operator pos:start="21:30" pos:end="21:30">/</operator><literal type="number" pos:start="21:31" pos:end="21:31">8</literal></expr>;</condition> <incr pos:start="21:34" pos:end="21:36"><expr pos:start="21:34" pos:end="21:36"><name pos:start="21:34" pos:end="21:34">i</name><operator pos:start="21:35" pos:end="21:36">++</operator></expr></incr>)</control> <block pos:start="21:39" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:73">

            <expr_stmt pos:start="23:13" pos:end="23:42"><expr pos:start="23:13" pos:end="23:41"><name pos:start="23:13" pos:end="23:13">k</name> <operator pos:start="23:15" pos:end="23:15">=</operator> <operator pos:start="23:17" pos:end="23:17">(</operator><name pos:start="23:18" pos:end="23:18">i</name><operator pos:start="23:19" pos:end="23:19">*</operator><name pos:start="23:20" pos:end="23:28">BIG_PRIME</name><operator pos:start="23:29" pos:end="23:29">)</operator> <operator pos:start="23:31" pos:end="23:31">%</operator> <name pos:start="23:33" pos:end="23:41">numpoints</name></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:73"><expr pos:start="25:13" pos:end="25:72"><call pos:start="25:13" pos:end="25:72"><name pos:start="25:13" pos:end="25:18">memcpy</name><argument_list pos:start="25:19" pos:end="25:72">(<argument pos:start="25:20" pos:end="25:38"><expr pos:start="25:20" pos:end="25:38"><name pos:start="25:20" pos:end="25:30">temp_points</name> <operator pos:start="25:32" pos:end="25:32">+</operator> <name pos:start="25:34" pos:end="25:34">i</name><operator pos:start="25:35" pos:end="25:35">*</operator><name pos:start="25:36" pos:end="25:38">dim</name></expr></argument>, <argument pos:start="25:41" pos:end="25:54"><expr pos:start="25:41" pos:end="25:54"><name pos:start="25:41" pos:end="25:46">points</name> <operator pos:start="25:48" pos:end="25:48">+</operator> <name pos:start="25:50" pos:end="25:50">k</name><operator pos:start="25:51" pos:end="25:51">*</operator><name pos:start="25:52" pos:end="25:54">dim</name></expr></argument>, <argument pos:start="25:57" pos:end="25:71"><expr pos:start="25:57" pos:end="25:71"><name pos:start="25:57" pos:end="25:59">dim</name><operator pos:start="25:60" pos:end="25:60">*</operator><sizeof pos:start="25:61" pos:end="25:71">sizeof<argument_list pos:start="25:67" pos:end="25:71">(<argument pos:start="25:68" pos:end="25:70"><expr pos:start="25:68" pos:end="25:70"><name pos:start="25:68" pos:end="25:70">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="31:9" pos:end="31:106"><expr pos:start="31:9" pos:end="31:105"><call pos:start="31:9" pos:end="31:105"><name pos:start="31:9" pos:end="31:20">ff_init_elbg</name><argument_list pos:start="31:21" pos:end="31:105">(<argument pos:start="31:22" pos:end="31:32"><expr pos:start="31:22" pos:end="31:32"><name pos:start="31:22" pos:end="31:32">temp_points</name></expr></argument>, <argument pos:start="31:35" pos:end="31:37"><expr pos:start="31:35" pos:end="31:37"><name pos:start="31:35" pos:end="31:37">dim</name></expr></argument>, <argument pos:start="31:40" pos:end="31:50"><expr pos:start="31:40" pos:end="31:50"><name pos:start="31:40" pos:end="31:48">numpoints</name><operator pos:start="31:49" pos:end="31:49">/</operator><literal type="number" pos:start="31:50" pos:end="31:50">8</literal></expr></argument>, <argument pos:start="31:53" pos:end="31:60"><expr pos:start="31:53" pos:end="31:60"><name pos:start="31:53" pos:end="31:60">codebook</name></expr></argument>, <argument pos:start="31:63" pos:end="31:67"><expr pos:start="31:63" pos:end="31:67"><name pos:start="31:63" pos:end="31:67">numCB</name></expr></argument>, <argument pos:start="31:70" pos:end="31:80"><expr pos:start="31:70" pos:end="31:80"><literal type="number" pos:start="31:70" pos:end="31:70">2</literal><operator pos:start="31:71" pos:end="31:71">*</operator><name pos:start="31:72" pos:end="31:80">max_steps</name></expr></argument>, <argument pos:start="31:83" pos:end="31:92"><expr pos:start="31:83" pos:end="31:92"><name pos:start="31:83" pos:end="31:92">closest_cb</name></expr></argument>, <argument pos:start="31:95" pos:end="31:104"><expr pos:start="31:95" pos:end="31:104"><name pos:start="31:95" pos:end="31:104">rand_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:104"><expr pos:start="33:9" pos:end="33:103"><call pos:start="33:9" pos:end="33:103"><name pos:start="33:9" pos:end="33:18">ff_do_elbg</name><argument_list pos:start="33:19" pos:end="33:103">(<argument pos:start="33:20" pos:end="33:30"><expr pos:start="33:20" pos:end="33:30"><name pos:start="33:20" pos:end="33:30">temp_points</name></expr></argument>, <argument pos:start="33:33" pos:end="33:35"><expr pos:start="33:33" pos:end="33:35"><name pos:start="33:33" pos:end="33:35">dim</name></expr></argument>, <argument pos:start="33:38" pos:end="33:48"><expr pos:start="33:38" pos:end="33:48"><name pos:start="33:38" pos:end="33:46">numpoints</name><operator pos:start="33:47" pos:end="33:47">/</operator><literal type="number" pos:start="33:48" pos:end="33:48">8</literal></expr></argument>, <argument pos:start="33:51" pos:end="33:58"><expr pos:start="33:51" pos:end="33:58"><name pos:start="33:51" pos:end="33:58">codebook</name></expr></argument>, <argument pos:start="33:61" pos:end="33:65"><expr pos:start="33:61" pos:end="33:65"><name pos:start="33:61" pos:end="33:65">numCB</name></expr></argument>, <argument pos:start="33:68" pos:end="33:78"><expr pos:start="33:68" pos:end="33:78"><literal type="number" pos:start="33:68" pos:end="33:68">2</literal><operator pos:start="33:69" pos:end="33:69">*</operator><name pos:start="33:70" pos:end="33:78">max_steps</name></expr></argument>, <argument pos:start="33:81" pos:end="33:90"><expr pos:start="33:81" pos:end="33:90"><name pos:start="33:81" pos:end="33:90">closest_cb</name></expr></argument>, <argument pos:start="33:93" pos:end="33:102"><expr pos:start="33:93" pos:end="33:102"><name pos:start="33:93" pos:end="33:102">rand_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:29"><expr pos:start="37:9" pos:end="37:28"><call pos:start="37:9" pos:end="37:28"><name pos:start="37:9" pos:end="37:15">av_free</name><argument_list pos:start="37:16" pos:end="37:28">(<argument pos:start="37:17" pos:end="37:27"><expr pos:start="37:17" pos:end="37:27"><name pos:start="37:17" pos:end="37:27">temp_points</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="41:7" pos:end="47:36">else<block type="pseudo" pos:start="43:9" pos:end="47:36"><block_content pos:start="43:9" pos:end="47:36">  <comment type="line" pos:start="41:13" pos:end="41:68">// If not, initialize the codebook with random positions</comment>

        <for pos:start="43:9" pos:end="47:36">for <control pos:start="43:13" pos:end="43:33">(<init pos:start="43:14" pos:end="43:17"><expr pos:start="43:14" pos:end="43:16"><name pos:start="43:14" pos:end="43:14">i</name><operator pos:start="43:15" pos:end="43:15">=</operator><literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>;</init> <condition pos:start="43:19" pos:end="43:28"><expr pos:start="43:19" pos:end="43:27"><name pos:start="43:19" pos:end="43:19">i</name> <operator pos:start="43:21" pos:end="43:21">&lt;</operator> <name pos:start="43:23" pos:end="43:27">numCB</name></expr>;</condition> <incr pos:start="43:30" pos:end="43:32"><expr pos:start="43:30" pos:end="43:32"><name pos:start="43:30" pos:end="43:30">i</name><operator pos:start="43:31" pos:end="43:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="45:13" pos:end="47:36"><block_content pos:start="45:13" pos:end="47:36">

            <expr_stmt pos:start="45:13" pos:end="47:36"><expr pos:start="45:13" pos:end="47:35"><call pos:start="45:13" pos:end="47:35"><name pos:start="45:13" pos:end="45:18">memcpy</name><argument_list pos:start="45:19" pos:end="47:35">(<argument pos:start="45:20" pos:end="45:35"><expr pos:start="45:20" pos:end="45:35"><name pos:start="45:20" pos:end="45:27">codebook</name> <operator pos:start="45:29" pos:end="45:29">+</operator> <name pos:start="45:31" pos:end="45:31">i</name><operator pos:start="45:32" pos:end="45:32">*</operator><name pos:start="45:33" pos:end="45:35">dim</name></expr></argument>, <argument pos:start="45:38" pos:end="45:75"><expr pos:start="45:38" pos:end="45:75"><name pos:start="45:38" pos:end="45:43">points</name> <operator pos:start="45:45" pos:end="45:45">+</operator> <operator pos:start="45:47" pos:end="45:47">(</operator><operator pos:start="45:48" pos:end="45:48">(</operator><name pos:start="45:49" pos:end="45:49">i</name><operator pos:start="45:50" pos:end="45:50">*</operator><name pos:start="45:51" pos:end="45:59">BIG_PRIME</name><operator pos:start="45:60" pos:end="45:60">)</operator><operator pos:start="45:61" pos:end="45:61">%</operator><name pos:start="45:62" pos:end="45:70">numpoints</name><operator pos:start="45:71" pos:end="45:71">)</operator><operator pos:start="45:72" pos:end="45:72">*</operator><name pos:start="45:73" pos:end="45:75">dim</name></expr></argument>,

                   <argument pos:start="47:20" pos:end="47:34"><expr pos:start="47:20" pos:end="47:34"><name pos:start="47:20" pos:end="47:22">dim</name><operator pos:start="47:23" pos:end="47:23">*</operator><sizeof pos:start="47:24" pos:end="47:34">sizeof<argument_list pos:start="47:30" pos:end="47:34">(<argument pos:start="47:31" pos:end="47:33"><expr pos:start="47:31" pos:end="47:33"><name pos:start="47:31" pos:end="47:33">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>



</block_content>}</block></function>
</unit>
