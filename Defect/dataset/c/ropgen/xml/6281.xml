<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6281.c" pos:tabs="8"><function pos:start="1:1" pos:end="189:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">exynos4210_i2c_write</name><parameter_list pos:start="1:33" pos:end="3:60">(<parameter pos:start="1:34" pos:end="1:45"><decl pos:start="1:34" pos:end="1:45"><type pos:start="1:34" pos:end="1:45"><name pos:start="1:34" pos:end="1:37">void</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:45">opaque</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:72"><decl pos:start="1:48" pos:end="1:72"><type pos:start="1:48" pos:end="1:72"><name pos:start="1:48" pos:end="1:65">target_phys_addr_t</name></type> <name pos:start="1:67" pos:end="1:72">offset</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:44"><decl pos:start="3:31" pos:end="3:44"><type pos:start="3:31" pos:end="3:44"><name pos:start="3:31" pos:end="3:38">uint64_t</name></type> <name pos:start="3:40" pos:end="3:44">value</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:59"><decl pos:start="3:47" pos:end="3:59"><type pos:start="3:47" pos:end="3:59"><name pos:start="3:47" pos:end="3:54">unsigned</name></type> <name pos:start="3:56" pos:end="3:59">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="189:1">{<block_content pos:start="7:5" pos:end="187:5">

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">Exynos4210I2CState</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:25">s</name> <init pos:start="7:27" pos:end="7:56">= <expr pos:start="7:29" pos:end="7:56"><operator pos:start="7:29" pos:end="7:29">(</operator><name pos:start="7:30" pos:end="7:47">Exynos4210I2CState</name> <operator pos:start="7:49" pos:end="7:49">*</operator><operator pos:start="7:50" pos:end="7:50">)</operator><name pos:start="7:51" pos:end="7:56">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:13">v</name> <init pos:start="9:15" pos:end="9:28">= <expr pos:start="9:17" pos:end="9:28"><name pos:start="9:17" pos:end="9:21">value</name> <operator pos:start="9:23" pos:end="9:23">&amp;</operator> <literal type="number" pos:start="9:25" pos:end="9:28">0xff</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="15:37"><expr pos:start="13:5" pos:end="15:36"><call pos:start="13:5" pos:end="15:36"><name pos:start="13:5" pos:end="13:10">DPRINT</name><argument_list pos:start="13:11" pos:end="15:36">(<argument pos:start="13:12" pos:end="13:42"><expr pos:start="13:12" pos:end="13:42"><literal type="string" pos:start="13:12" pos:end="13:42">"write %s [0x%02x] &lt;- 0x%02x\n"</literal></expr></argument>, <argument pos:start="13:45" pos:end="13:75"><expr pos:start="13:45" pos:end="13:75"><call pos:start="13:45" pos:end="13:75"><name pos:start="13:45" pos:end="13:67">exynos4_i2c_get_regname</name><argument_list pos:start="13:68" pos:end="13:75">(<argument pos:start="13:69" pos:end="13:74"><expr pos:start="13:69" pos:end="13:74"><name pos:start="13:69" pos:end="13:74">offset</name></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="15:13" pos:end="15:32"><expr pos:start="15:13" pos:end="15:32"><operator pos:start="15:13" pos:end="15:13">(</operator><name pos:start="15:14" pos:end="15:21">unsigned</name> <name pos:start="15:23" pos:end="15:25">int</name><operator pos:start="15:26" pos:end="15:26">)</operator><name pos:start="15:27" pos:end="15:32">offset</name></expr></argument>, <argument pos:start="15:35" pos:end="15:35"><expr pos:start="15:35" pos:end="15:35"><name pos:start="15:35" pos:end="15:35">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="19:5" pos:end="187:5">switch <condition pos:start="19:12" pos:end="19:19">(<expr pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:18">offset</name></expr>)</condition> <block pos:start="19:21" pos:end="187:5">{<block_content pos:start="21:5" pos:end="185:14">

    <case pos:start="21:5" pos:end="21:21">case <expr pos:start="21:10" pos:end="21:20"><name pos:start="21:10" pos:end="21:20">I2CCON_ADDR</name></expr>:</case>

        <expr_stmt pos:start="23:9" pos:end="23:75"><expr pos:start="23:9" pos:end="23:74"><name pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:17">i2ccon</name></name> <operator pos:start="23:19" pos:end="23:19">=</operator> <operator pos:start="23:21" pos:end="23:21">(</operator><name pos:start="23:22" pos:end="23:22">v</name> <operator pos:start="23:24" pos:end="23:24">&amp;</operator> <operator pos:start="23:26" pos:end="23:26">~</operator><name pos:start="23:27" pos:end="23:41">I2CCON_INT_PEND</name><operator pos:start="23:42" pos:end="23:42">)</operator> <operator pos:start="23:44" pos:end="23:44">|</operator> <operator pos:start="23:46" pos:end="23:46">(</operator><name pos:start="23:47" pos:end="23:55"><name pos:start="23:47" pos:end="23:47">s</name><operator pos:start="23:48" pos:end="23:49">-&gt;</operator><name pos:start="23:50" pos:end="23:55">i2ccon</name></name> <operator pos:start="23:57" pos:end="23:57">&amp;</operator> <name pos:start="23:59" pos:end="23:73">I2CCON_INT_PEND</name><operator pos:start="23:74" pos:end="23:74">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="65:9"><if pos:start="25:9" pos:end="65:9">if <condition pos:start="25:12" pos:end="25:68">(<expr pos:start="25:13" pos:end="25:67"><operator pos:start="25:13" pos:end="25:13">(</operator><name pos:start="25:14" pos:end="25:22"><name pos:start="25:14" pos:end="25:14">s</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:22">i2ccon</name></name> <operator pos:start="25:24" pos:end="25:24">&amp;</operator> <name pos:start="25:26" pos:end="25:40">I2CCON_INT_PEND</name><operator pos:start="25:41" pos:end="25:41">)</operator> <operator pos:start="25:43" pos:end="25:44">&amp;&amp;</operator> <operator pos:start="25:46" pos:end="25:46">!</operator><operator pos:start="25:47" pos:end="25:47">(</operator><name pos:start="25:48" pos:end="25:48">v</name> <operator pos:start="25:50" pos:end="25:50">&amp;</operator> <name pos:start="25:52" pos:end="25:66">I2CCON_INT_PEND</name><operator pos:start="25:67" pos:end="25:67">)</operator></expr>)</condition> <block pos:start="25:70" pos:end="65:9">{<block_content pos:start="27:13" pos:end="63:13">

            <expr_stmt pos:start="27:13" pos:end="27:42"><expr pos:start="27:13" pos:end="27:41"><name pos:start="27:13" pos:end="27:21"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:21">i2ccon</name></name> <operator pos:start="27:23" pos:end="27:24">&amp;=</operator> <operator pos:start="27:26" pos:end="27:26">~</operator><name pos:start="27:27" pos:end="27:41">I2CCON_INT_PEND</name></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:35"><expr pos:start="29:13" pos:end="29:34"><call pos:start="29:13" pos:end="29:34"><name pos:start="29:13" pos:end="29:26">qemu_irq_lower</name><argument_list pos:start="29:27" pos:end="29:34">(<argument pos:start="29:28" pos:end="29:33"><expr pos:start="29:28" pos:end="29:33"><name pos:start="29:28" pos:end="29:33"><name pos:start="29:28" pos:end="29:28">s</name><operator pos:start="29:29" pos:end="29:30">-&gt;</operator><name pos:start="29:31" pos:end="29:33">irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="31:13" pos:end="35:13"><if pos:start="31:13" pos:end="35:13">if <condition pos:start="31:16" pos:end="31:47">(<expr pos:start="31:17" pos:end="31:46"><operator pos:start="31:17" pos:end="31:17">!</operator><operator pos:start="31:18" pos:end="31:18">(</operator><name pos:start="31:19" pos:end="31:27"><name pos:start="31:19" pos:end="31:19">s</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:27">i2ccon</name></name> <operator pos:start="31:29" pos:end="31:29">&amp;</operator> <name pos:start="31:31" pos:end="31:45">I2CCON_INTRS_EN</name><operator pos:start="31:46" pos:end="31:46">)</operator></expr>)</condition> <block pos:start="31:49" pos:end="35:13">{<block_content pos:start="33:17" pos:end="33:50">

                <expr_stmt pos:start="33:17" pos:end="33:50"><expr pos:start="33:17" pos:end="33:49"><name pos:start="33:17" pos:end="33:26"><name pos:start="33:17" pos:end="33:17">s</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:26">i2cstat</name></name> <operator pos:start="33:28" pos:end="33:29">&amp;=</operator> <operator pos:start="33:31" pos:end="33:31">~</operator><name pos:start="33:32" pos:end="33:49">I2CSTAT_START_BUSY</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="39:13" pos:end="63:13"><if pos:start="39:13" pos:end="63:13">if <condition pos:start="39:16" pos:end="39:48">(<expr pos:start="39:17" pos:end="39:47"><name pos:start="39:17" pos:end="39:26"><name pos:start="39:17" pos:end="39:17">s</name><operator pos:start="39:18" pos:end="39:19">-&gt;</operator><name pos:start="39:20" pos:end="39:26">i2cstat</name></name> <operator pos:start="39:28" pos:end="39:28">&amp;</operator> <name pos:start="39:30" pos:end="39:47">I2CSTAT_START_BUSY</name></expr>)</condition> <block pos:start="39:50" pos:end="63:13">{<block_content pos:start="41:17" pos:end="61:17">

                <if_stmt pos:start="41:17" pos:end="61:17"><if pos:start="41:17" pos:end="55:17">if <condition pos:start="41:20" pos:end="41:32">(<expr pos:start="41:21" pos:end="41:31"><name pos:start="41:21" pos:end="41:31"><name pos:start="41:21" pos:end="41:21">s</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:31">scl_free</name></name></expr>)</condition> <block pos:start="41:34" pos:end="55:17">{<block_content pos:start="43:21" pos:end="53:21">

                    <if_stmt pos:start="43:21" pos:end="53:21"><if pos:start="43:21" pos:end="47:21">if <condition pos:start="43:24" pos:end="43:74">(<expr pos:start="43:25" pos:end="43:73"><call pos:start="43:25" pos:end="43:52"><name pos:start="43:25" pos:end="43:40">EXYNOS4_I2C_MODE</name><argument_list pos:start="43:41" pos:end="43:52">(<argument pos:start="43:42" pos:end="43:51"><expr pos:start="43:42" pos:end="43:51"><name pos:start="43:42" pos:end="43:51"><name pos:start="43:42" pos:end="43:42">s</name><operator pos:start="43:43" pos:end="43:44">-&gt;</operator><name pos:start="43:45" pos:end="43:51">i2cstat</name></name></expr></argument>)</argument_list></call> <operator pos:start="43:54" pos:end="43:55">==</operator> <name pos:start="43:57" pos:end="43:73">I2CMODE_MASTER_Tx</name></expr>)</condition> <block pos:start="43:76" pos:end="47:21">{<block_content pos:start="45:25" pos:end="45:52">

                        <expr_stmt pos:start="45:25" pos:end="45:52"><expr pos:start="45:25" pos:end="45:51"><call pos:start="45:25" pos:end="45:51"><name pos:start="45:25" pos:end="45:48">exynos4210_i2c_data_send</name><argument_list pos:start="45:49" pos:end="45:51">(<argument pos:start="45:50" pos:end="45:50"><expr pos:start="45:50" pos:end="45:50"><name pos:start="45:50" pos:end="45:50">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="47:23" pos:end="53:21">else if <condition pos:start="47:31" pos:end="49:46">(<expr pos:start="47:32" pos:end="49:45"><call pos:start="47:32" pos:end="47:59"><name pos:start="47:32" pos:end="47:47">EXYNOS4_I2C_MODE</name><argument_list pos:start="47:48" pos:end="47:59">(<argument pos:start="47:49" pos:end="47:58"><expr pos:start="47:49" pos:end="47:58"><name pos:start="47:49" pos:end="47:58"><name pos:start="47:49" pos:end="47:49">s</name><operator pos:start="47:50" pos:end="47:51">-&gt;</operator><name pos:start="47:52" pos:end="47:58">i2cstat</name></name></expr></argument>)</argument_list></call> <operator pos:start="47:61" pos:end="47:62">==</operator>

                            <name pos:start="49:29" pos:end="49:45">I2CMODE_MASTER_Rx</name></expr>)</condition> <block pos:start="49:48" pos:end="53:21">{<block_content pos:start="51:25" pos:end="51:55">

                        <expr_stmt pos:start="51:25" pos:end="51:55"><expr pos:start="51:25" pos:end="51:54"><call pos:start="51:25" pos:end="51:54"><name pos:start="51:25" pos:end="51:51">exynos4210_i2c_data_receive</name><argument_list pos:start="51:52" pos:end="51:54">(<argument pos:start="51:53" pos:end="51:53"><expr pos:start="51:53" pos:end="51:53"><name pos:start="51:53" pos:end="51:53">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if> <else pos:start="55:19" pos:end="61:17">else <block pos:start="55:24" pos:end="61:17">{<block_content pos:start="57:21" pos:end="59:43">

                    <expr_stmt pos:start="57:21" pos:end="57:49"><expr pos:start="57:21" pos:end="57:48"><name pos:start="57:21" pos:end="57:29"><name pos:start="57:21" pos:end="57:21">s</name><operator pos:start="57:22" pos:end="57:23">-&gt;</operator><name pos:start="57:24" pos:end="57:29">i2ccon</name></name> <operator pos:start="57:31" pos:end="57:32">|=</operator> <name pos:start="57:34" pos:end="57:48">I2CCON_INT_PEND</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="59:21" pos:end="59:43"><expr pos:start="59:21" pos:end="59:42"><call pos:start="59:21" pos:end="59:42"><name pos:start="59:21" pos:end="59:34">qemu_irq_raise</name><argument_list pos:start="59:35" pos:end="59:42">(<argument pos:start="59:36" pos:end="59:41"><expr pos:start="59:36" pos:end="59:41"><name pos:start="59:36" pos:end="59:41"><name pos:start="59:36" pos:end="59:36">s</name><operator pos:start="59:37" pos:end="59:38">-&gt;</operator><name pos:start="59:39" pos:end="59:41">irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <case pos:start="69:5" pos:end="69:22">case <expr pos:start="69:10" pos:end="69:21"><name pos:start="69:10" pos:end="69:21">I2CSTAT_ADDR</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="73:78"><expr pos:start="71:9" pos:end="73:77"><name pos:start="71:9" pos:end="71:18"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:18">i2cstat</name></name> <operator pos:start="71:20" pos:end="71:20">=</operator>

                <operator pos:start="73:17" pos:end="73:17">(</operator><name pos:start="73:18" pos:end="73:27"><name pos:start="73:18" pos:end="73:18">s</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:27">i2cstat</name></name> <operator pos:start="73:29" pos:end="73:29">&amp;</operator> <name pos:start="73:31" pos:end="73:48">I2CSTAT_START_BUSY</name><operator pos:start="73:49" pos:end="73:49">)</operator> <operator pos:start="73:51" pos:end="73:51">|</operator> <operator pos:start="73:53" pos:end="73:53">(</operator><name pos:start="73:54" pos:end="73:54">v</name> <operator pos:start="73:56" pos:end="73:56">&amp;</operator> <operator pos:start="73:58" pos:end="73:58">~</operator><name pos:start="73:59" pos:end="73:76">I2CSTAT_START_BUSY</name><operator pos:start="73:77" pos:end="73:77">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="77:9" pos:end="87:9"><if pos:start="77:9" pos:end="87:9">if <condition pos:start="77:12" pos:end="77:46">(<expr pos:start="77:13" pos:end="77:45"><operator pos:start="77:13" pos:end="77:13">!</operator><operator pos:start="77:14" pos:end="77:14">(</operator><name pos:start="77:15" pos:end="77:24"><name pos:start="77:15" pos:end="77:15">s</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:24">i2cstat</name></name> <operator pos:start="77:26" pos:end="77:26">&amp;</operator> <name pos:start="77:28" pos:end="77:44">I2CSTAT_OUTPUT_EN</name><operator pos:start="77:45" pos:end="77:45">)</operator></expr>)</condition> <block pos:start="77:48" pos:end="87:9">{<block_content pos:start="79:13" pos:end="85:18">

            <expr_stmt pos:start="79:13" pos:end="79:46"><expr pos:start="79:13" pos:end="79:45"><name pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:13">s</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:22">i2cstat</name></name> <operator pos:start="79:24" pos:end="79:25">&amp;=</operator> <operator pos:start="79:27" pos:end="79:27">~</operator><name pos:start="79:28" pos:end="79:45">I2CSTAT_START_BUSY</name></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:31"><expr pos:start="81:13" pos:end="81:30"><name pos:start="81:13" pos:end="81:23"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:23">scl_free</name></name> <operator pos:start="81:25" pos:end="81:25">=</operator> <name pos:start="81:27" pos:end="81:30">true</name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:35"><expr pos:start="83:13" pos:end="83:34"><call pos:start="83:13" pos:end="83:34"><name pos:start="83:13" pos:end="83:26">qemu_irq_lower</name><argument_list pos:start="83:27" pos:end="83:34">(<argument pos:start="83:28" pos:end="83:33"><expr pos:start="83:28" pos:end="83:33"><name pos:start="83:28" pos:end="83:33"><name pos:start="83:28" pos:end="83:28">s</name><operator pos:start="83:29" pos:end="83:30">-&gt;</operator><name pos:start="83:31" pos:end="83:33">irq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="85:13" pos:end="85:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="91:9" pos:end="91:48">/* Nothing to do if in i2c slave mode */</comment>

        <if_stmt pos:start="93:9" pos:end="97:9"><if pos:start="93:9" pos:end="97:9">if <condition pos:start="93:12" pos:end="93:44">(<expr pos:start="93:13" pos:end="93:43"><operator pos:start="93:13" pos:end="93:13">!</operator><call pos:start="93:14" pos:end="93:43"><name pos:start="93:14" pos:end="93:31">I2C_IN_MASTER_MODE</name><argument_list pos:start="93:32" pos:end="93:43">(<argument pos:start="93:33" pos:end="93:42"><expr pos:start="93:33" pos:end="93:42"><name pos:start="93:33" pos:end="93:42"><name pos:start="93:33" pos:end="93:33">s</name><operator pos:start="93:34" pos:end="93:35">-&gt;</operator><name pos:start="93:36" pos:end="93:42">i2cstat</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:46" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:18">

            <break pos:start="95:13" pos:end="95:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="101:9" pos:end="139:9"><if pos:start="101:9" pos:end="127:9">if <condition pos:start="101:12" pos:end="101:35">(<expr pos:start="101:13" pos:end="101:34"><name pos:start="101:13" pos:end="101:13">v</name> <operator pos:start="101:15" pos:end="101:15">&amp;</operator> <name pos:start="101:17" pos:end="101:34">I2CSTAT_START_BUSY</name></expr>)</condition> <block pos:start="101:37" pos:end="127:9">{<block_content pos:start="103:13" pos:end="125:46">

            <expr_stmt pos:start="103:13" pos:end="103:44"><expr pos:start="103:13" pos:end="103:43"><name pos:start="103:13" pos:end="103:22"><name pos:start="103:13" pos:end="103:13">s</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:22">i2cstat</name></name> <operator pos:start="103:24" pos:end="103:25">&amp;=</operator> <operator pos:start="103:27" pos:end="103:27">~</operator><name pos:start="103:28" pos:end="103:43">I2CSTAT_LAST_BIT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:45"><expr pos:start="105:13" pos:end="105:44"><name pos:start="105:13" pos:end="105:22"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:22">i2cstat</name></name> <operator pos:start="105:24" pos:end="105:25">|=</operator> <name pos:start="105:27" pos:end="105:44">I2CSTAT_START_BUSY</name></expr>;</expr_stmt>    <comment type="block" pos:start="105:50" pos:end="105:67">/* Line is busy */</comment>

            <expr_stmt pos:start="107:13" pos:end="107:32"><expr pos:start="107:13" pos:end="107:31"><name pos:start="107:13" pos:end="107:23"><name pos:start="107:13" pos:end="107:13">s</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:23">scl_free</name></name> <operator pos:start="107:25" pos:end="107:25">=</operator> <name pos:start="107:27" pos:end="107:31">false</name></expr>;</expr_stmt>



            <comment type="block" pos:start="111:13" pos:end="111:59">/* Generate start bit and send slave address */</comment>

            <if_stmt pos:start="113:13" pos:end="123:13"><if pos:start="113:13" pos:end="119:13">if <condition pos:start="113:16" pos:end="115:49">(<expr pos:start="113:17" pos:end="115:48"><call pos:start="113:17" pos:end="113:73"><name pos:start="113:17" pos:end="113:34">i2c_start_transfer</name><argument_list pos:start="113:35" pos:end="113:73">(<argument pos:start="113:36" pos:end="113:41"><expr pos:start="113:36" pos:end="113:41"><name pos:start="113:36" pos:end="113:41"><name pos:start="113:36" pos:end="113:36">s</name><operator pos:start="113:37" pos:end="113:38">-&gt;</operator><name pos:start="113:39" pos:end="113:41">bus</name></name></expr></argument>, <argument pos:start="113:44" pos:end="113:56"><expr pos:start="113:44" pos:end="113:56"><name pos:start="113:44" pos:end="113:51"><name pos:start="113:44" pos:end="113:44">s</name><operator pos:start="113:45" pos:end="113:46">-&gt;</operator><name pos:start="113:47" pos:end="113:51">i2cds</name></name> <operator pos:start="113:53" pos:end="113:54">&gt;&gt;</operator> <literal type="number" pos:start="113:56" pos:end="113:56">1</literal></expr></argument>, <argument pos:start="113:59" pos:end="113:72"><expr pos:start="113:59" pos:end="113:72"><name pos:start="113:59" pos:end="113:66"><name pos:start="113:59" pos:end="113:59">s</name><operator pos:start="113:60" pos:end="113:61">-&gt;</operator><name pos:start="113:62" pos:end="113:66">i2cds</name></name> <operator pos:start="113:68" pos:end="113:68">&amp;</operator> <literal type="number" pos:start="113:70" pos:end="113:72">0x1</literal></expr></argument>)</argument_list></call> <operator pos:start="113:75" pos:end="113:76">&amp;&amp;</operator>

                    <operator pos:start="115:21" pos:end="115:21">(</operator><name pos:start="115:22" pos:end="115:30"><name pos:start="115:22" pos:end="115:22">s</name><operator pos:start="115:23" pos:end="115:24">-&gt;</operator><name pos:start="115:25" pos:end="115:30">i2ccon</name></name> <operator pos:start="115:32" pos:end="115:32">&amp;</operator> <name pos:start="115:34" pos:end="115:47">I2CCON_ACK_GEN</name><operator pos:start="115:48" pos:end="115:48">)</operator></expr>)</condition> <block pos:start="115:51" pos:end="119:13">{<block_content pos:start="117:17" pos:end="117:47">

                <expr_stmt pos:start="117:17" pos:end="117:47"><expr pos:start="117:17" pos:end="117:46"><name pos:start="117:17" pos:end="117:26"><name pos:start="117:17" pos:end="117:17">s</name><operator pos:start="117:18" pos:end="117:19">-&gt;</operator><name pos:start="117:20" pos:end="117:26">i2cstat</name></name> <operator pos:start="117:28" pos:end="117:29">|=</operator> <name pos:start="117:31" pos:end="117:46">I2CSTAT_LAST_BIT</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="119:15" pos:end="123:13">else if <condition pos:start="119:23" pos:end="119:73">(<expr pos:start="119:24" pos:end="119:72"><call pos:start="119:24" pos:end="119:51"><name pos:start="119:24" pos:end="119:39">EXYNOS4_I2C_MODE</name><argument_list pos:start="119:40" pos:end="119:51">(<argument pos:start="119:41" pos:end="119:50"><expr pos:start="119:41" pos:end="119:50"><name pos:start="119:41" pos:end="119:50"><name pos:start="119:41" pos:end="119:41">s</name><operator pos:start="119:42" pos:end="119:43">-&gt;</operator><name pos:start="119:44" pos:end="119:50">i2cstat</name></name></expr></argument>)</argument_list></call> <operator pos:start="119:53" pos:end="119:54">==</operator> <name pos:start="119:56" pos:end="119:72">I2CMODE_MASTER_Rx</name></expr>)</condition> <block pos:start="119:75" pos:end="123:13">{<block_content pos:start="121:17" pos:end="121:47">

                <expr_stmt pos:start="121:17" pos:end="121:47"><expr pos:start="121:17" pos:end="121:46"><call pos:start="121:17" pos:end="121:46"><name pos:start="121:17" pos:end="121:43">exynos4210_i2c_data_receive</name><argument_list pos:start="121:44" pos:end="121:46">(<argument pos:start="121:45" pos:end="121:45"><expr pos:start="121:45" pos:end="121:45"><name pos:start="121:45" pos:end="121:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:46"><expr pos:start="125:13" pos:end="125:45"><call pos:start="125:13" pos:end="125:45"><name pos:start="125:13" pos:end="125:42">exynos4210_i2c_raise_interrupt</name><argument_list pos:start="125:43" pos:end="125:45">(<argument pos:start="125:44" pos:end="125:44"><expr pos:start="125:44" pos:end="125:44"><name pos:start="125:44" pos:end="125:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="127:11" pos:end="139:9">else <block pos:start="127:16" pos:end="139:9">{<block_content pos:start="129:13" pos:end="137:31">

            <expr_stmt pos:start="129:13" pos:end="129:37"><expr pos:start="129:13" pos:end="129:36"><call pos:start="129:13" pos:end="129:36"><name pos:start="129:13" pos:end="129:28">i2c_end_transfer</name><argument_list pos:start="129:29" pos:end="129:36">(<argument pos:start="129:30" pos:end="129:35"><expr pos:start="129:30" pos:end="129:35"><name pos:start="129:30" pos:end="129:35"><name pos:start="129:30" pos:end="129:30">s</name><operator pos:start="129:31" pos:end="129:32">-&gt;</operator><name pos:start="129:33" pos:end="129:35">bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="131:13" pos:end="135:13"><if pos:start="131:13" pos:end="135:13">if <condition pos:start="131:16" pos:end="131:47">(<expr pos:start="131:17" pos:end="131:46"><operator pos:start="131:17" pos:end="131:17">!</operator><operator pos:start="131:18" pos:end="131:18">(</operator><name pos:start="131:19" pos:end="131:27"><name pos:start="131:19" pos:end="131:19">s</name><operator pos:start="131:20" pos:end="131:21">-&gt;</operator><name pos:start="131:22" pos:end="131:27">i2ccon</name></name> <operator pos:start="131:29" pos:end="131:29">&amp;</operator> <name pos:start="131:31" pos:end="131:45">I2CCON_INT_PEND</name><operator pos:start="131:46" pos:end="131:46">)</operator></expr>)</condition> <block pos:start="131:49" pos:end="135:13">{<block_content pos:start="133:17" pos:end="133:50">

                <expr_stmt pos:start="133:17" pos:end="133:50"><expr pos:start="133:17" pos:end="133:49"><name pos:start="133:17" pos:end="133:26"><name pos:start="133:17" pos:end="133:17">s</name><operator pos:start="133:18" pos:end="133:19">-&gt;</operator><name pos:start="133:20" pos:end="133:26">i2cstat</name></name> <operator pos:start="133:28" pos:end="133:29">&amp;=</operator> <operator pos:start="133:31" pos:end="133:31">~</operator><name pos:start="133:32" pos:end="133:49">I2CSTAT_START_BUSY</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:31"><expr pos:start="137:13" pos:end="137:30"><name pos:start="137:13" pos:end="137:23"><name pos:start="137:13" pos:end="137:13">s</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:23">scl_free</name></name> <operator pos:start="137:25" pos:end="137:25">=</operator> <name pos:start="137:27" pos:end="137:30">true</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="141:9" pos:end="141:14">break;</break>

    <case pos:start="143:5" pos:end="143:21">case <expr pos:start="143:10" pos:end="143:20"><name pos:start="143:10" pos:end="143:20">I2CADD_ADDR</name></expr>:</case>

        <if_stmt pos:start="145:9" pos:end="149:9"><if pos:start="145:9" pos:end="149:9">if <condition pos:start="145:12" pos:end="145:50">(<expr pos:start="145:13" pos:end="145:49"><operator pos:start="145:13" pos:end="145:13">(</operator><name pos:start="145:14" pos:end="145:23"><name pos:start="145:14" pos:end="145:14">s</name><operator pos:start="145:15" pos:end="145:16">-&gt;</operator><name pos:start="145:17" pos:end="145:23">i2cstat</name></name> <operator pos:start="145:25" pos:end="145:25">&amp;</operator> <name pos:start="145:27" pos:end="145:43">I2CSTAT_OUTPUT_EN</name><operator pos:start="145:44" pos:end="145:44">)</operator> <operator pos:start="145:46" pos:end="145:47">==</operator> <literal type="number" pos:start="145:49" pos:end="145:49">0</literal></expr>)</condition> <block pos:start="145:52" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:26">

            <expr_stmt pos:start="147:13" pos:end="147:26"><expr pos:start="147:13" pos:end="147:25"><name pos:start="147:13" pos:end="147:21"><name pos:start="147:13" pos:end="147:13">s</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:21">i2cadd</name></name> <operator pos:start="147:23" pos:end="147:23">=</operator> <name pos:start="147:25" pos:end="147:25">v</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="151:9" pos:end="151:14">break;</break>

    <case pos:start="153:5" pos:end="153:20">case <expr pos:start="153:10" pos:end="153:19"><name pos:start="153:10" pos:end="153:19">I2CDS_ADDR</name></expr>:</case>

        <if_stmt pos:start="155:9" pos:end="171:9"><if pos:start="155:9" pos:end="171:9">if <condition pos:start="155:12" pos:end="155:43">(<expr pos:start="155:13" pos:end="155:42"><name pos:start="155:13" pos:end="155:22"><name pos:start="155:13" pos:end="155:13">s</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:22">i2cstat</name></name> <operator pos:start="155:24" pos:end="155:24">&amp;</operator> <name pos:start="155:26" pos:end="155:42">I2CSTAT_OUTPUT_EN</name></expr>)</condition> <block pos:start="155:45" pos:end="171:9">{<block_content pos:start="157:13" pos:end="169:13">

            <expr_stmt pos:start="157:13" pos:end="157:25"><expr pos:start="157:13" pos:end="157:24"><name pos:start="157:13" pos:end="157:20"><name pos:start="157:13" pos:end="157:13">s</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:20">i2cds</name></name> <operator pos:start="157:22" pos:end="157:22">=</operator> <name pos:start="157:24" pos:end="157:24">v</name></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:31"><expr pos:start="159:13" pos:end="159:30"><name pos:start="159:13" pos:end="159:23"><name pos:start="159:13" pos:end="159:13">s</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:23">scl_free</name></name> <operator pos:start="159:25" pos:end="159:25">=</operator> <name pos:start="159:27" pos:end="159:30">true</name></expr>;</expr_stmt>

            <if_stmt pos:start="161:13" pos:end="169:13"><if pos:start="161:13" pos:end="169:13">if <condition pos:start="161:16" pos:end="165:51">(<expr pos:start="161:17" pos:end="165:50"><call pos:start="161:17" pos:end="161:44"><name pos:start="161:17" pos:end="161:32">EXYNOS4_I2C_MODE</name><argument_list pos:start="161:33" pos:end="161:44">(<argument pos:start="161:34" pos:end="161:43"><expr pos:start="161:34" pos:end="161:43"><name pos:start="161:34" pos:end="161:43"><name pos:start="161:34" pos:end="161:34">s</name><operator pos:start="161:35" pos:end="161:36">-&gt;</operator><name pos:start="161:37" pos:end="161:43">i2cstat</name></name></expr></argument>)</argument_list></call> <operator pos:start="161:46" pos:end="161:47">==</operator> <name pos:start="161:49" pos:end="161:65">I2CMODE_MASTER_Tx</name> <operator pos:start="161:67" pos:end="161:68">&amp;&amp;</operator>

                    <operator pos:start="163:21" pos:end="163:21">(</operator><name pos:start="163:22" pos:end="163:31"><name pos:start="163:22" pos:end="163:22">s</name><operator pos:start="163:23" pos:end="163:24">-&gt;</operator><name pos:start="163:25" pos:end="163:31">i2cstat</name></name> <operator pos:start="163:33" pos:end="163:33">&amp;</operator> <name pos:start="163:35" pos:end="163:52">I2CSTAT_START_BUSY</name><operator pos:start="163:53" pos:end="163:53">)</operator> <operator pos:start="163:55" pos:end="163:56">&amp;&amp;</operator>

                    <operator pos:start="165:21" pos:end="165:21">!</operator><operator pos:start="165:22" pos:end="165:22">(</operator><name pos:start="165:23" pos:end="165:31"><name pos:start="165:23" pos:end="165:23">s</name><operator pos:start="165:24" pos:end="165:25">-&gt;</operator><name pos:start="165:26" pos:end="165:31">i2ccon</name></name> <operator pos:start="165:33" pos:end="165:33">&amp;</operator> <name pos:start="165:35" pos:end="165:49">I2CCON_INT_PEND</name><operator pos:start="165:50" pos:end="165:50">)</operator></expr>)</condition> <block pos:start="165:53" pos:end="169:13">{<block_content pos:start="167:17" pos:end="167:44">

                <expr_stmt pos:start="167:17" pos:end="167:44"><expr pos:start="167:17" pos:end="167:43"><call pos:start="167:17" pos:end="167:43"><name pos:start="167:17" pos:end="167:40">exynos4210_i2c_data_send</name><argument_list pos:start="167:41" pos:end="167:43">(<argument pos:start="167:42" pos:end="167:42"><expr pos:start="167:42" pos:end="167:42"><name pos:start="167:42" pos:end="167:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="173:9" pos:end="173:14">break;</break>

    <case pos:start="175:5" pos:end="175:20">case <expr pos:start="175:10" pos:end="175:19"><name pos:start="175:10" pos:end="175:19">I2CLC_ADDR</name></expr>:</case>

        <expr_stmt pos:start="177:9" pos:end="177:21"><expr pos:start="177:9" pos:end="177:20"><name pos:start="177:9" pos:end="177:16"><name pos:start="177:9" pos:end="177:9">s</name><operator pos:start="177:10" pos:end="177:11">-&gt;</operator><name pos:start="177:12" pos:end="177:16">i2clc</name></name> <operator pos:start="177:18" pos:end="177:18">=</operator> <name pos:start="177:20" pos:end="177:20">v</name></expr>;</expr_stmt>

        <break pos:start="179:9" pos:end="179:14">break;</break>

    <default pos:start="181:5" pos:end="181:12">default:</default>

        <expr_stmt pos:start="183:9" pos:end="183:71"><expr pos:start="183:9" pos:end="183:70"><call pos:start="183:9" pos:end="183:70"><name pos:start="183:9" pos:end="183:14">DPRINT</name><argument_list pos:start="183:15" pos:end="183:70">(<argument pos:start="183:16" pos:end="183:47"><expr pos:start="183:16" pos:end="183:47"><literal type="string" pos:start="183:16" pos:end="183:47">"ERROR: Bad write offset 0x%x\n"</literal></expr></argument>, <argument pos:start="183:50" pos:end="183:69"><expr pos:start="183:50" pos:end="183:69"><operator pos:start="183:50" pos:end="183:50">(</operator><name pos:start="183:51" pos:end="183:58">unsigned</name> <name pos:start="183:60" pos:end="183:62">int</name><operator pos:start="183:63" pos:end="183:63">)</operator><name pos:start="183:64" pos:end="183:69">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="185:9" pos:end="185:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
