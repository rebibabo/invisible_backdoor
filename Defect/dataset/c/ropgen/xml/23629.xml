<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23629.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">pci_qdev_init</name><parameter_list pos:start="1:25" pos:end="1:61">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:42"><name pos:start="1:26" pos:end="1:36">DeviceState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:42">qdev</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:54">DeviceInfo</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:60">base</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:5" pos:end="47:13">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">PCIDevice</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:22">pci_dev</name> <init pos:start="5:24" pos:end="5:42">= <expr pos:start="5:26" pos:end="5:42"><operator pos:start="5:26" pos:end="5:26">(</operator><name pos:start="5:27" pos:end="5:35">PCIDevice</name> <operator pos:start="5:37" pos:end="5:37">*</operator><operator pos:start="5:38" pos:end="5:38">)</operator><name pos:start="5:39" pos:end="5:42">qdev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">PCIDeviceInfo</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:23">info</name> <init pos:start="7:25" pos:end="7:65">= <expr pos:start="7:27" pos:end="7:65"><call pos:start="7:27" pos:end="7:65"><name pos:start="7:27" pos:end="7:38">container_of</name><argument_list pos:start="7:39" pos:end="7:65">(<argument pos:start="7:40" pos:end="7:43"><expr pos:start="7:40" pos:end="7:43"><name pos:start="7:40" pos:end="7:43">base</name></expr></argument>, <argument pos:start="7:46" pos:end="7:58"><expr pos:start="7:46" pos:end="7:58"><name pos:start="7:46" pos:end="7:58">PCIDeviceInfo</name></expr></argument>, <argument pos:start="7:61" pos:end="7:64"><expr pos:start="7:61" pos:end="7:64"><name pos:start="7:61" pos:end="7:64">qdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">PCIBus</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:15">bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">devfn</name></decl>, <decl pos:start="11:16" pos:end="11:17"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:16" pos:end="11:17">rc</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:75">/* initialize cap_present for pci_is_express() and pci_config_size() */</comment>

    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:25">(<expr pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:24"><name pos:start="17:9" pos:end="17:12">info</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:24">is_express</name></name></expr>)</condition> <block pos:start="17:27" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:53">

        <expr_stmt pos:start="19:9" pos:end="19:53"><expr pos:start="19:9" pos:end="19:52"><name pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:15">pci_dev</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:28">cap_present</name></name> <operator pos:start="19:30" pos:end="19:31">|=</operator> <name pos:start="19:33" pos:end="19:52">QEMU_PCI_CAP_EXPRESS</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:55"><expr pos:start="25:5" pos:end="25:54"><name pos:start="25:5" pos:end="25:7">bus</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:54"><name pos:start="25:11" pos:end="25:19">FROM_QBUS</name><argument_list pos:start="25:20" pos:end="25:54">(<argument pos:start="25:21" pos:end="25:26"><expr pos:start="25:21" pos:end="25:26"><name pos:start="25:21" pos:end="25:26">PCIBus</name></expr></argument>, <argument pos:start="25:29" pos:end="25:53"><expr pos:start="25:29" pos:end="25:53"><call pos:start="25:29" pos:end="25:53"><name pos:start="25:29" pos:end="25:47">qdev_get_parent_bus</name><argument_list pos:start="25:48" pos:end="25:53">(<argument pos:start="25:49" pos:end="25:52"><expr pos:start="25:49" pos:end="25:52"><name pos:start="25:49" pos:end="25:52">qdev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:27"><expr pos:start="27:5" pos:end="27:26"><name pos:start="27:5" pos:end="27:9">devfn</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:26"><name pos:start="27:13" pos:end="27:19">pci_dev</name><operator pos:start="27:20" pos:end="27:21">-&gt;</operator><name pos:start="27:22" pos:end="27:26">devfn</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="33:56"><expr pos:start="29:5" pos:end="33:55"><name pos:start="29:5" pos:end="29:11">pci_dev</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="33:55"><name pos:start="29:15" pos:end="29:36">do_pci_register_device</name><argument_list pos:start="29:37" pos:end="33:55">(<argument pos:start="29:38" pos:end="29:44"><expr pos:start="29:38" pos:end="29:44"><name pos:start="29:38" pos:end="29:44">pci_dev</name></expr></argument>, <argument pos:start="29:47" pos:end="29:49"><expr pos:start="29:47" pos:end="29:49"><name pos:start="29:47" pos:end="29:49">bus</name></expr></argument>, <argument pos:start="29:52" pos:end="29:61"><expr pos:start="29:52" pos:end="29:61"><name pos:start="29:52" pos:end="29:61"><name pos:start="29:52" pos:end="29:55">base</name><operator pos:start="29:56" pos:end="29:57">-&gt;</operator><name pos:start="29:58" pos:end="29:61">name</name></name></expr></argument>, <argument pos:start="29:64" pos:end="29:68"><expr pos:start="29:64" pos:end="29:68"><name pos:start="29:64" pos:end="29:68">devfn</name></expr></argument>,

                                     <argument pos:start="31:38" pos:end="31:54"><expr pos:start="31:38" pos:end="31:54"><name pos:start="31:38" pos:end="31:54"><name pos:start="31:38" pos:end="31:41">info</name><operator pos:start="31:42" pos:end="31:43">-&gt;</operator><name pos:start="31:44" pos:end="31:54">config_read</name></name></expr></argument>, <argument pos:start="31:57" pos:end="31:74"><expr pos:start="31:57" pos:end="31:74"><name pos:start="31:57" pos:end="31:74"><name pos:start="31:57" pos:end="31:60">info</name><operator pos:start="31:61" pos:end="31:62">-&gt;</operator><name pos:start="31:63" pos:end="31:74">config_write</name></name></expr></argument>,

                                     <argument pos:start="33:38" pos:end="33:54"><expr pos:start="33:38" pos:end="33:54"><name pos:start="33:38" pos:end="33:54"><name pos:start="33:38" pos:end="33:41">info</name><operator pos:start="33:42" pos:end="33:43">-&gt;</operator><name pos:start="33:44" pos:end="33:54">header_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:20"><expr pos:start="35:5" pos:end="35:19"><call pos:start="35:5" pos:end="35:19"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:19">(<argument pos:start="35:12" pos:end="35:18"><expr pos:start="35:12" pos:end="35:18"><name pos:start="35:12" pos:end="35:18">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:6">rc</name> <operator pos:start="37:8" pos:end="37:8">=</operator> <call pos:start="37:10" pos:end="37:28"><name pos:start="37:10" pos:end="37:19"><name pos:start="37:10" pos:end="37:13">info</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:19">init</name></name><argument_list pos:start="37:20" pos:end="37:28">(<argument pos:start="37:21" pos:end="37:27"><expr pos:start="37:21" pos:end="37:27"><name pos:start="37:21" pos:end="37:27">pci_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:18"><if pos:start="39:5" pos:end="41:18">if <condition pos:start="39:8" pos:end="39:16">(<expr pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:10">rc</name> <operator pos:start="39:12" pos:end="39:13">!=</operator> <literal type="number" pos:start="39:15" pos:end="39:15">0</literal></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:18"><block_content pos:start="41:9" pos:end="41:18">

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><name pos:start="41:16" pos:end="41:17">rc</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="45:33"><if pos:start="43:5" pos:end="45:33">if <condition pos:start="43:8" pos:end="43:25">(<expr pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:12">qdev</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:24">hotplugged</name></name></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:33"><block_content pos:start="45:9" pos:end="45:33">

        <expr_stmt pos:start="45:9" pos:end="45:33"><expr pos:start="45:9" pos:end="45:32"><call pos:start="45:9" pos:end="45:32"><name pos:start="45:9" pos:end="45:20"><name pos:start="45:9" pos:end="45:11">bus</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:20">hotplug</name></name><argument_list pos:start="45:21" pos:end="45:32">(<argument pos:start="45:22" pos:end="45:28"><expr pos:start="45:22" pos:end="45:28"><name pos:start="45:22" pos:end="45:28">pci_dev</name></expr></argument>, <argument pos:start="45:31" pos:end="45:31"><expr pos:start="45:31" pos:end="45:31"><literal type="number" pos:start="45:31" pos:end="45:31">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="47:5" pos:end="47:13">return <expr pos:start="47:12" pos:end="47:12"><literal type="number" pos:start="47:12" pos:end="47:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
