<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6379.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:32">hb_count_between</name><parameter_list pos:start="1:33" pos:end="1:76">(<parameter pos:start="1:34" pos:end="1:44"><decl pos:start="1:34" pos:end="1:44"><type pos:start="1:34" pos:end="1:44"><name pos:start="1:34" pos:end="1:40">HBitmap</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">hb</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:60"><decl pos:start="1:47" pos:end="1:60"><type pos:start="1:47" pos:end="1:60"><name pos:start="1:47" pos:end="1:54">uint64_t</name></type> <name pos:start="1:56" pos:end="1:60">start</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:75"><decl pos:start="1:63" pos:end="1:75"><type pos:start="1:63" pos:end="1:75"><name pos:start="1:63" pos:end="1:70">uint64_t</name></type> <name pos:start="1:72" pos:end="1:75">last</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="51:1">{<block_content pos:start="5:5" pos:end="49:17">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:15">HBitmapIter</name></type> <name pos:start="5:17" pos:end="5:19">hbi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:18">count</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:16">end</name> <init pos:start="9:18" pos:end="9:27">= <expr pos:start="9:20" pos:end="9:27"><name pos:start="9:20" pos:end="9:23">last</name> <operator pos:start="9:25" pos:end="9:25">+</operator> <literal type="number" pos:start="9:27" pos:end="9:27">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:17">long</name></type> <name pos:start="11:19" pos:end="11:21">cur</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:14">pos</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:58"><expr pos:start="17:5" pos:end="17:57"><call pos:start="17:5" pos:end="17:57"><name pos:start="17:5" pos:end="17:21">hbitmap_iter_init</name><argument_list pos:start="17:22" pos:end="17:57">(<argument pos:start="17:23" pos:end="17:26"><expr pos:start="17:23" pos:end="17:26"><operator pos:start="17:23" pos:end="17:23">&amp;</operator><name pos:start="17:24" pos:end="17:26">hbi</name></expr></argument>, <argument pos:start="17:29" pos:end="17:30"><expr pos:start="17:29" pos:end="17:30"><name pos:start="17:29" pos:end="17:30">hb</name></expr></argument>, <argument pos:start="17:33" pos:end="17:56"><expr pos:start="17:33" pos:end="17:56"><name pos:start="17:33" pos:end="17:37">start</name> <operator pos:start="17:39" pos:end="17:40">&lt;&lt;</operator> <name pos:start="17:42" pos:end="17:56"><name pos:start="17:42" pos:end="17:43">hb</name><operator pos:start="17:44" pos:end="17:45">-&gt;</operator><name pos:start="17:46" pos:end="17:56">granularity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="19:5" pos:end="31:5">for <control pos:start="19:9" pos:end="19:12">(<init pos:start="19:10" pos:end="19:10">;</init><condition pos:start="19:11" pos:end="19:11">;</condition><incr/>)</control> <block pos:start="19:14" pos:end="31:5">{<block_content pos:start="21:9" pos:end="29:32">

        <expr_stmt pos:start="21:9" pos:end="21:49"><expr pos:start="21:9" pos:end="21:48"><name pos:start="21:9" pos:end="21:11">pos</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:48"><name pos:start="21:15" pos:end="21:36">hbitmap_iter_next_word</name><argument_list pos:start="21:37" pos:end="21:48">(<argument pos:start="21:38" pos:end="21:41"><expr pos:start="21:38" pos:end="21:41"><operator pos:start="21:38" pos:end="21:38">&amp;</operator><name pos:start="21:39" pos:end="21:41">hbi</name></expr></argument>, <argument pos:start="21:44" pos:end="21:47"><expr pos:start="21:44" pos:end="21:47"><operator pos:start="21:44" pos:end="21:44">&amp;</operator><name pos:start="21:45" pos:end="21:47">cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="27:9"><if pos:start="23:9" pos:end="27:9">if <condition pos:start="23:12" pos:end="23:43">(<expr pos:start="23:13" pos:end="23:42"><name pos:start="23:13" pos:end="23:15">pos</name> <operator pos:start="23:17" pos:end="23:18">&gt;=</operator> <operator pos:start="23:20" pos:end="23:20">(</operator><name pos:start="23:21" pos:end="23:23">end</name> <operator pos:start="23:25" pos:end="23:26">&gt;&gt;</operator> <name pos:start="23:28" pos:end="23:41">BITS_PER_LEVEL</name><operator pos:start="23:42" pos:end="23:42">)</operator></expr>)</condition> <block pos:start="23:45" pos:end="27:9">{<block_content pos:start="25:13" pos:end="25:18">

            <break pos:start="25:13" pos:end="25:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:32"><expr pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:13">count</name> <operator pos:start="29:15" pos:end="29:16">+=</operator> <call pos:start="29:18" pos:end="29:31"><name pos:start="29:18" pos:end="29:26">popcountl</name><argument_list pos:start="29:27" pos:end="29:31">(<argument pos:start="29:28" pos:end="29:30"><expr pos:start="29:28" pos:end="29:30"><name pos:start="29:28" pos:end="29:30">cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="35:5" pos:end="45:5"><if pos:start="35:5" pos:end="45:5">if <condition pos:start="35:8" pos:end="35:39">(<expr pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:11">pos</name> <operator pos:start="35:13" pos:end="35:14">==</operator> <operator pos:start="35:16" pos:end="35:16">(</operator><name pos:start="35:17" pos:end="35:19">end</name> <operator pos:start="35:21" pos:end="35:22">&gt;&gt;</operator> <name pos:start="35:24" pos:end="35:37">BITS_PER_LEVEL</name><operator pos:start="35:38" pos:end="35:38">)</operator></expr>)</condition> <block pos:start="35:41" pos:end="45:5">{<block_content pos:start="39:9" pos:end="43:32">

        <comment type="block" pos:start="37:9" pos:end="37:70">/* Drop bits representing the END-th and subsequent items.  */</comment>

        <decl_stmt pos:start="39:9" pos:end="39:44"><decl pos:start="39:9" pos:end="39:43"><type pos:start="39:9" pos:end="39:11"><name pos:start="39:9" pos:end="39:11">int</name></type> <name pos:start="39:13" pos:end="39:15">bit</name> <init pos:start="39:17" pos:end="39:43">= <expr pos:start="39:19" pos:end="39:43"><name pos:start="39:19" pos:end="39:21">end</name> <operator pos:start="39:23" pos:end="39:23">&amp;</operator> <operator pos:start="39:25" pos:end="39:25">(</operator><name pos:start="39:26" pos:end="39:38">BITS_PER_LONG</name> <operator pos:start="39:40" pos:end="39:40">-</operator> <literal type="number" pos:start="39:42" pos:end="39:42">1</literal><operator pos:start="39:43" pos:end="39:43">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:32"><expr pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:11">cur</name> <operator pos:start="41:13" pos:end="41:14">&amp;=</operator> <operator pos:start="41:16" pos:end="41:16">(</operator><literal type="number" pos:start="41:17" pos:end="41:19">1UL</literal> <operator pos:start="41:21" pos:end="41:22">&lt;&lt;</operator> <name pos:start="41:24" pos:end="41:26">bit</name><operator pos:start="41:27" pos:end="41:27">)</operator> <operator pos:start="41:29" pos:end="41:29">-</operator> <literal type="number" pos:start="41:31" pos:end="41:31">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:32"><expr pos:start="43:9" pos:end="43:31"><name pos:start="43:9" pos:end="43:13">count</name> <operator pos:start="43:15" pos:end="43:16">+=</operator> <call pos:start="43:18" pos:end="43:31"><name pos:start="43:18" pos:end="43:26">popcountl</name><argument_list pos:start="43:27" pos:end="43:31">(<argument pos:start="43:28" pos:end="43:30"><expr pos:start="43:28" pos:end="43:30"><name pos:start="43:28" pos:end="43:30">cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="49:5" pos:end="49:17">return <expr pos:start="49:12" pos:end="49:16"><name pos:start="49:12" pos:end="49:16">count</name></expr>;</return>

</block_content>}</block></function>
</unit>
