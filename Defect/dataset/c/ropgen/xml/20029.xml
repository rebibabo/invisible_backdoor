<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20029.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:28">gen_bcond</name><parameter_list pos:start="1:29" pos:end="1:57">(<parameter pos:start="1:30" pos:end="1:46"><decl pos:start="1:30" pos:end="1:46"><type pos:start="1:30" pos:end="1:46"><name pos:start="1:30" pos:end="1:41">DisasContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:46">ctx</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:56"><decl pos:start="1:49" pos:end="1:56"><type pos:start="1:49" pos:end="1:56"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:56">type</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="161:1">{<block_content pos:start="5:5" pos:end="159:5">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:15">bo</name> <init pos:start="5:17" pos:end="5:33">= <expr pos:start="5:19" pos:end="5:33"><call pos:start="5:19" pos:end="5:33"><name pos:start="5:19" pos:end="5:20">BO</name><argument_list pos:start="5:21" pos:end="5:33">(<argument pos:start="5:22" pos:end="5:32"><expr pos:start="5:22" pos:end="5:32"><name pos:start="5:22" pos:end="5:32"><name pos:start="5:22" pos:end="5:24">ctx</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:32">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:11"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">l1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">TCGv</name></type> <name pos:start="9:10" pos:end="9:15">target</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:41"><expr pos:start="13:5" pos:end="13:40"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:7">ctx</name><operator pos:start="13:8" pos:end="13:9">-&gt;</operator><name pos:start="13:10" pos:end="13:18">exception</name></name> <operator pos:start="13:20" pos:end="13:20">=</operator> <name pos:start="13:22" pos:end="13:40">POWERPC_EXCP_BRANCH</name></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="35:5"><if pos:start="15:5" pos:end="31:5">if <condition pos:start="15:8" pos:end="15:67">(<expr pos:start="15:9" pos:end="15:66"><name pos:start="15:9" pos:end="15:12">type</name> <operator pos:start="15:14" pos:end="15:15">==</operator> <name pos:start="15:17" pos:end="15:24">BCOND_LR</name> <operator pos:start="15:26" pos:end="15:27">||</operator> <name pos:start="15:29" pos:end="15:32">type</name> <operator pos:start="15:34" pos:end="15:35">==</operator> <name pos:start="15:37" pos:end="15:45">BCOND_CTR</name> <operator pos:start="15:47" pos:end="15:48">||</operator> <name pos:start="15:50" pos:end="15:53">type</name> <operator pos:start="15:55" pos:end="15:56">==</operator> <name pos:start="15:58" pos:end="15:66">BCOND_TAR</name></expr>)</condition> <block pos:start="15:69" pos:end="31:5">{<block_content pos:start="17:9" pos:end="29:43">

        <expr_stmt pos:start="17:9" pos:end="17:38"><expr pos:start="17:9" pos:end="17:37"><name pos:start="17:9" pos:end="17:14">target</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <call pos:start="17:18" pos:end="17:37"><name pos:start="17:18" pos:end="17:35">tcg_temp_local_new</name><argument_list pos:start="17:36" pos:end="17:37">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="19:9" pos:end="29:43"><if pos:start="19:9" pos:end="21:44">if <condition pos:start="19:12" pos:end="19:30">(<expr pos:start="19:13" pos:end="19:29"><name pos:start="19:13" pos:end="19:16">type</name> <operator pos:start="19:18" pos:end="19:19">==</operator> <name pos:start="19:21" pos:end="19:29">BCOND_CTR</name></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:44"><block_content pos:start="21:13" pos:end="21:44">

            <expr_stmt pos:start="21:13" pos:end="21:44"><expr pos:start="21:13" pos:end="21:43"><call pos:start="21:13" pos:end="21:43"><name pos:start="21:13" pos:end="21:26">tcg_gen_mov_tl</name><argument_list pos:start="21:27" pos:end="21:43">(<argument pos:start="21:28" pos:end="21:33"><expr pos:start="21:28" pos:end="21:33"><name pos:start="21:28" pos:end="21:33">target</name></expr></argument>, <argument pos:start="21:36" pos:end="21:42"><expr pos:start="21:36" pos:end="21:42"><name pos:start="21:36" pos:end="21:42">cpu_ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="23:9" pos:end="25:42">else if <condition pos:start="23:17" pos:end="23:35">(<expr pos:start="23:18" pos:end="23:34"><name pos:start="23:18" pos:end="23:21">type</name> <operator pos:start="23:23" pos:end="23:24">==</operator> <name pos:start="23:26" pos:end="23:34">BCOND_TAR</name></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:42"><block_content pos:start="25:13" pos:end="25:42">

            <expr_stmt pos:start="25:13" pos:end="25:42"><expr pos:start="25:13" pos:end="25:41"><call pos:start="25:13" pos:end="25:41"><name pos:start="25:13" pos:end="25:24">gen_load_spr</name><argument_list pos:start="25:25" pos:end="25:41">(<argument pos:start="25:26" pos:end="25:31"><expr pos:start="25:26" pos:end="25:31"><name pos:start="25:26" pos:end="25:31">target</name></expr></argument>, <argument pos:start="25:34" pos:end="25:40"><expr pos:start="25:34" pos:end="25:40"><name pos:start="25:34" pos:end="25:40">SPR_TAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="27:9" pos:end="29:43">else<block type="pseudo" pos:start="29:13" pos:end="29:43"><block_content pos:start="29:13" pos:end="29:43">

            <expr_stmt pos:start="29:13" pos:end="29:43"><expr pos:start="29:13" pos:end="29:42"><call pos:start="29:13" pos:end="29:42"><name pos:start="29:13" pos:end="29:26">tcg_gen_mov_tl</name><argument_list pos:start="29:27" pos:end="29:42">(<argument pos:start="29:28" pos:end="29:33"><expr pos:start="29:28" pos:end="29:33"><name pos:start="29:28" pos:end="29:33">target</name></expr></argument>, <argument pos:start="29:36" pos:end="29:41"><expr pos:start="29:36" pos:end="29:41"><name pos:start="29:36" pos:end="29:41">cpu_lr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="35:5">else <block pos:start="31:12" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:28">

        <expr_stmt pos:start="33:9" pos:end="33:28"><expr pos:start="33:9" pos:end="33:27"><call pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:19">TCGV_UNUSED</name><argument_list pos:start="33:20" pos:end="33:27">(<argument pos:start="33:21" pos:end="33:26"><expr pos:start="33:21" pos:end="33:26"><name pos:start="33:21" pos:end="33:26">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="37:5" pos:end="39:33"><if pos:start="37:5" pos:end="39:33">if <condition pos:start="37:8" pos:end="37:24">(<expr pos:start="37:9" pos:end="37:23"><call pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:10">LK</name><argument_list pos:start="37:11" pos:end="37:23">(<argument pos:start="37:12" pos:end="37:22"><expr pos:start="37:12" pos:end="37:22"><name pos:start="37:12" pos:end="37:22"><name pos:start="37:12" pos:end="37:14">ctx</name><operator pos:start="37:15" pos:end="37:16">-&gt;</operator><name pos:start="37:17" pos:end="37:22">opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="39:33"><block_content pos:start="39:9" pos:end="39:33">

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><call pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:17">gen_setlr</name><argument_list pos:start="39:18" pos:end="39:32">(<argument pos:start="39:19" pos:end="39:21"><expr pos:start="39:19" pos:end="39:21"><name pos:start="39:19" pos:end="39:21">ctx</name></expr></argument>, <argument pos:start="39:24" pos:end="39:31"><expr pos:start="39:24" pos:end="39:31"><name pos:start="39:24" pos:end="39:31"><name pos:start="39:24" pos:end="39:26">ctx</name><operator pos:start="39:27" pos:end="39:28">-&gt;</operator><name pos:start="39:29" pos:end="39:31">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:25"><expr pos:start="41:5" pos:end="41:24"><name pos:start="41:5" pos:end="41:6">l1</name> <operator pos:start="41:8" pos:end="41:8">=</operator> <call pos:start="41:10" pos:end="41:24"><name pos:start="41:10" pos:end="41:22">gen_new_label</name><argument_list pos:start="41:23" pos:end="41:24">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="81:5"><if pos:start="43:5" pos:end="81:5">if <condition pos:start="43:8" pos:end="43:24">(<expr pos:start="43:9" pos:end="43:23"><operator pos:start="43:9" pos:end="43:9">(</operator><name pos:start="43:10" pos:end="43:11">bo</name> <operator pos:start="43:13" pos:end="43:13">&amp;</operator> <literal type="number" pos:start="43:15" pos:end="43:17">0x4</literal><operator pos:start="43:18" pos:end="43:18">)</operator> <operator pos:start="43:20" pos:end="43:21">==</operator> <literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr>)</condition> <block pos:start="43:26" pos:end="81:5">{<block_content pos:start="47:9" pos:end="79:28">

        <comment type="block" pos:start="45:9" pos:end="45:36">/* Decrement and test CTR */</comment>

        <decl_stmt pos:start="47:9" pos:end="47:35"><decl pos:start="47:9" pos:end="47:34"><type pos:start="47:9" pos:end="47:12"><name pos:start="47:9" pos:end="47:12">TCGv</name></type> <name pos:start="47:14" pos:end="47:17">temp</name> <init pos:start="47:19" pos:end="47:34">= <expr pos:start="47:21" pos:end="47:34"><call pos:start="47:21" pos:end="47:34"><name pos:start="47:21" pos:end="47:32">tcg_temp_new</name><argument_list pos:start="47:33" pos:end="47:34">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:40">(<expr pos:start="49:13" pos:end="49:39"><call pos:start="49:13" pos:end="49:39"><name pos:start="49:13" pos:end="49:20">unlikely</name><argument_list pos:start="49:21" pos:end="49:39">(<argument pos:start="49:22" pos:end="49:38"><expr pos:start="49:22" pos:end="49:38"><name pos:start="49:22" pos:end="49:25">type</name> <operator pos:start="49:27" pos:end="49:28">==</operator> <name pos:start="49:30" pos:end="49:38">BCOND_CTR</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:42" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:19">

            <expr_stmt pos:start="51:13" pos:end="51:63"><expr pos:start="51:13" pos:end="51:62"><call pos:start="51:13" pos:end="51:62"><name pos:start="51:13" pos:end="51:31">gen_inval_exception</name><argument_list pos:start="51:32" pos:end="51:62">(<argument pos:start="51:33" pos:end="51:35"><expr pos:start="51:33" pos:end="51:35"><name pos:start="51:33" pos:end="51:35">ctx</name></expr></argument>, <argument pos:start="51:38" pos:end="51:61"><expr pos:start="51:38" pos:end="51:61"><name pos:start="51:38" pos:end="51:61">POWERPC_EXCP_INVAL_INVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="53:13" pos:end="53:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:45"><expr pos:start="57:9" pos:end="57:44"><call pos:start="57:9" pos:end="57:44"><name pos:start="57:9" pos:end="57:23">tcg_gen_subi_tl</name><argument_list pos:start="57:24" pos:end="57:44">(<argument pos:start="57:25" pos:end="57:31"><expr pos:start="57:25" pos:end="57:31"><name pos:start="57:25" pos:end="57:31">cpu_ctr</name></expr></argument>, <argument pos:start="57:34" pos:end="57:40"><expr pos:start="57:34" pos:end="57:40"><name pos:start="57:34" pos:end="57:40">cpu_ctr</name></expr></argument>, <argument pos:start="57:43" pos:end="57:43"><expr pos:start="57:43" pos:end="57:43"><literal type="number" pos:start="57:43" pos:end="57:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:29">(<expr pos:start="59:13" pos:end="59:28"><call pos:start="59:13" pos:end="59:28"><name pos:start="59:13" pos:end="59:23">NARROW_MODE</name><argument_list pos:start="59:24" pos:end="59:28">(<argument pos:start="59:25" pos:end="59:27"><expr pos:start="59:25" pos:end="59:27"><name pos:start="59:25" pos:end="59:27">ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:31" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:45">

            <expr_stmt pos:start="61:13" pos:end="61:45"><expr pos:start="61:13" pos:end="61:44"><call pos:start="61:13" pos:end="61:44"><name pos:start="61:13" pos:end="61:29">tcg_gen_ext32u_tl</name><argument_list pos:start="61:30" pos:end="61:44">(<argument pos:start="61:31" pos:end="61:34"><expr pos:start="61:31" pos:end="61:34"><name pos:start="61:31" pos:end="61:34">temp</name></expr></argument>, <argument pos:start="61:37" pos:end="61:43"><expr pos:start="61:37" pos:end="61:43"><name pos:start="61:37" pos:end="61:43">cpu_ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="67:9">else <block pos:start="63:16" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:42">

            <expr_stmt pos:start="65:13" pos:end="65:42"><expr pos:start="65:13" pos:end="65:41"><call pos:start="65:13" pos:end="65:41"><name pos:start="65:13" pos:end="65:26">tcg_gen_mov_tl</name><argument_list pos:start="65:27" pos:end="65:41">(<argument pos:start="65:28" pos:end="65:31"><expr pos:start="65:28" pos:end="65:31"><name pos:start="65:28" pos:end="65:31">temp</name></expr></argument>, <argument pos:start="65:34" pos:end="65:40"><expr pos:start="65:34" pos:end="65:40"><name pos:start="65:34" pos:end="65:40">cpu_ctr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="69:9" pos:end="77:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:21">(<expr pos:start="69:13" pos:end="69:20"><name pos:start="69:13" pos:end="69:14">bo</name> <operator pos:start="69:16" pos:end="69:16">&amp;</operator> <literal type="number" pos:start="69:18" pos:end="69:20">0x2</literal></expr>)</condition> <block pos:start="69:23" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:57">

            <expr_stmt pos:start="71:13" pos:end="71:57"><expr pos:start="71:13" pos:end="71:56"><call pos:start="71:13" pos:end="71:56"><name pos:start="71:13" pos:end="71:30">tcg_gen_brcondi_tl</name><argument_list pos:start="71:31" pos:end="71:56">(<argument pos:start="71:32" pos:end="71:42"><expr pos:start="71:32" pos:end="71:42"><name pos:start="71:32" pos:end="71:42">TCG_COND_NE</name></expr></argument>, <argument pos:start="71:45" pos:end="71:48"><expr pos:start="71:45" pos:end="71:48"><name pos:start="71:45" pos:end="71:48">temp</name></expr></argument>, <argument pos:start="71:51" pos:end="71:51"><expr pos:start="71:51" pos:end="71:51"><literal type="number" pos:start="71:51" pos:end="71:51">0</literal></expr></argument>, <argument pos:start="71:54" pos:end="71:55"><expr pos:start="71:54" pos:end="71:55"><name pos:start="71:54" pos:end="71:55">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="73:11" pos:end="77:9">else <block pos:start="73:16" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:57">

            <expr_stmt pos:start="75:13" pos:end="75:57"><expr pos:start="75:13" pos:end="75:56"><call pos:start="75:13" pos:end="75:56"><name pos:start="75:13" pos:end="75:30">tcg_gen_brcondi_tl</name><argument_list pos:start="75:31" pos:end="75:56">(<argument pos:start="75:32" pos:end="75:42"><expr pos:start="75:32" pos:end="75:42"><name pos:start="75:32" pos:end="75:42">TCG_COND_EQ</name></expr></argument>, <argument pos:start="75:45" pos:end="75:48"><expr pos:start="75:45" pos:end="75:48"><name pos:start="75:45" pos:end="75:48">temp</name></expr></argument>, <argument pos:start="75:51" pos:end="75:51"><expr pos:start="75:51" pos:end="75:51"><literal type="number" pos:start="75:51" pos:end="75:51">0</literal></expr></argument>, <argument pos:start="75:54" pos:end="75:55"><expr pos:start="75:54" pos:end="75:55"><name pos:start="75:54" pos:end="75:55">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:28"><expr pos:start="79:9" pos:end="79:27"><call pos:start="79:9" pos:end="79:27"><name pos:start="79:9" pos:end="79:21">tcg_temp_free</name><argument_list pos:start="79:22" pos:end="79:27">(<argument pos:start="79:23" pos:end="79:26"><expr pos:start="79:23" pos:end="79:26"><name pos:start="79:23" pos:end="79:26">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="83:5" pos:end="111:5"><if pos:start="83:5" pos:end="111:5">if <condition pos:start="83:8" pos:end="83:25">(<expr pos:start="83:9" pos:end="83:24"><operator pos:start="83:9" pos:end="83:9">(</operator><name pos:start="83:10" pos:end="83:11">bo</name> <operator pos:start="83:13" pos:end="83:13">&amp;</operator> <literal type="number" pos:start="83:15" pos:end="83:18">0x10</literal><operator pos:start="83:19" pos:end="83:19">)</operator> <operator pos:start="83:21" pos:end="83:22">==</operator> <literal type="number" pos:start="83:24" pos:end="83:24">0</literal></expr>)</condition> <block pos:start="83:27" pos:end="111:5">{<block_content pos:start="87:9" pos:end="109:32">

        <comment type="block" pos:start="85:9" pos:end="85:21">/* Test CR */</comment>

        <decl_stmt pos:start="87:9" pos:end="87:38"><decl pos:start="87:9" pos:end="87:37"><type pos:start="87:9" pos:end="87:16"><name pos:start="87:9" pos:end="87:16">uint32_t</name></type> <name pos:start="87:18" pos:end="87:19">bi</name> <init pos:start="87:21" pos:end="87:37">= <expr pos:start="87:23" pos:end="87:37"><call pos:start="87:23" pos:end="87:37"><name pos:start="87:23" pos:end="87:24">BI</name><argument_list pos:start="87:25" pos:end="87:37">(<argument pos:start="87:26" pos:end="87:36"><expr pos:start="87:26" pos:end="87:36"><name pos:start="87:26" pos:end="87:36"><name pos:start="87:26" pos:end="87:28">ctx</name><operator pos:start="87:29" pos:end="87:30">-&gt;</operator><name pos:start="87:31" pos:end="87:36">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="89:9" pos:end="89:47"><decl pos:start="89:9" pos:end="89:46"><type pos:start="89:9" pos:end="89:16"><name pos:start="89:9" pos:end="89:16">uint32_t</name></type> <name pos:start="89:18" pos:end="89:21">mask</name> <init pos:start="89:23" pos:end="89:46">= <expr pos:start="89:25" pos:end="89:46"><literal type="number" pos:start="89:25" pos:end="89:25">1</literal> <operator pos:start="89:27" pos:end="89:28">&lt;&lt;</operator> <operator pos:start="89:30" pos:end="89:30">(</operator><literal type="number" pos:start="89:31" pos:end="89:33">3</literal> <operator pos:start="89:33" pos:end="89:33">-</operator> <operator pos:start="89:35" pos:end="89:35">(</operator><name pos:start="89:36" pos:end="89:37">bi</name> <operator pos:start="89:39" pos:end="89:39">&amp;</operator> <literal type="number" pos:start="89:41" pos:end="89:44">0x03</literal><operator pos:start="89:45" pos:end="89:45">)</operator><operator pos:start="89:46" pos:end="89:46">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="91:9" pos:end="91:43"><decl pos:start="91:9" pos:end="91:42"><type pos:start="91:9" pos:end="91:16"><name pos:start="91:9" pos:end="91:16">TCGv_i32</name></type> <name pos:start="91:18" pos:end="91:21">temp</name> <init pos:start="91:23" pos:end="91:42">= <expr pos:start="91:25" pos:end="91:42"><call pos:start="91:25" pos:end="91:42"><name pos:start="91:25" pos:end="91:40">tcg_temp_new_i32</name><argument_list pos:start="91:41" pos:end="91:42">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="95:9" pos:end="107:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:21">(<expr pos:start="95:13" pos:end="95:20"><name pos:start="95:13" pos:end="95:14">bo</name> <operator pos:start="95:16" pos:end="95:16">&amp;</operator> <literal type="number" pos:start="95:18" pos:end="95:20">0x8</literal></expr>)</condition> <block pos:start="95:23" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:58">

            <expr_stmt pos:start="97:13" pos:end="97:59"><expr pos:start="97:13" pos:end="97:58"><call pos:start="97:13" pos:end="97:58"><name pos:start="97:13" pos:end="97:28">tcg_gen_andi_i32</name><argument_list pos:start="97:29" pos:end="97:58">(<argument pos:start="97:30" pos:end="97:33"><expr pos:start="97:30" pos:end="97:33"><name pos:start="97:30" pos:end="97:33">temp</name></expr></argument>, <argument pos:start="97:36" pos:end="97:51"><expr pos:start="97:36" pos:end="97:51"><name pos:start="97:36" pos:end="97:51"><name pos:start="97:36" pos:end="97:42">cpu_crf</name><index pos:start="97:43" pos:end="97:51">[<expr pos:start="97:44" pos:end="97:50"><name pos:start="97:44" pos:end="97:45">bi</name> <operator pos:start="97:47" pos:end="97:48">&gt;&gt;</operator> <literal type="number" pos:start="97:50" pos:end="97:50">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="97:54" pos:end="97:57"><expr pos:start="97:54" pos:end="97:57"><name pos:start="97:54" pos:end="97:57">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:58"><expr pos:start="99:13" pos:end="99:57"><call pos:start="99:13" pos:end="99:57"><name pos:start="99:13" pos:end="99:31">tcg_gen_brcondi_i32</name><argument_list pos:start="99:32" pos:end="99:57">(<argument pos:start="99:33" pos:end="99:43"><expr pos:start="99:33" pos:end="99:43"><name pos:start="99:33" pos:end="99:43">TCG_COND_EQ</name></expr></argument>, <argument pos:start="99:46" pos:end="99:49"><expr pos:start="99:46" pos:end="99:49"><name pos:start="99:46" pos:end="99:49">temp</name></expr></argument>, <argument pos:start="99:52" pos:end="99:52"><expr pos:start="99:52" pos:end="99:52"><literal type="number" pos:start="99:52" pos:end="99:52">0</literal></expr></argument>, <argument pos:start="99:55" pos:end="99:56"><expr pos:start="99:55" pos:end="99:56"><name pos:start="99:55" pos:end="99:56">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="101:11" pos:end="107:9">else <block pos:start="101:16" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:58">

            <expr_stmt pos:start="103:13" pos:end="103:59"><expr pos:start="103:13" pos:end="103:58"><call pos:start="103:13" pos:end="103:58"><name pos:start="103:13" pos:end="103:28">tcg_gen_andi_i32</name><argument_list pos:start="103:29" pos:end="103:58">(<argument pos:start="103:30" pos:end="103:33"><expr pos:start="103:30" pos:end="103:33"><name pos:start="103:30" pos:end="103:33">temp</name></expr></argument>, <argument pos:start="103:36" pos:end="103:51"><expr pos:start="103:36" pos:end="103:51"><name pos:start="103:36" pos:end="103:51"><name pos:start="103:36" pos:end="103:42">cpu_crf</name><index pos:start="103:43" pos:end="103:51">[<expr pos:start="103:44" pos:end="103:50"><name pos:start="103:44" pos:end="103:45">bi</name> <operator pos:start="103:47" pos:end="103:48">&gt;&gt;</operator> <literal type="number" pos:start="103:50" pos:end="103:50">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="103:54" pos:end="103:57"><expr pos:start="103:54" pos:end="103:57"><name pos:start="103:54" pos:end="103:57">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:58"><expr pos:start="105:13" pos:end="105:57"><call pos:start="105:13" pos:end="105:57"><name pos:start="105:13" pos:end="105:31">tcg_gen_brcondi_i32</name><argument_list pos:start="105:32" pos:end="105:57">(<argument pos:start="105:33" pos:end="105:43"><expr pos:start="105:33" pos:end="105:43"><name pos:start="105:33" pos:end="105:43">TCG_COND_NE</name></expr></argument>, <argument pos:start="105:46" pos:end="105:49"><expr pos:start="105:46" pos:end="105:49"><name pos:start="105:46" pos:end="105:49">temp</name></expr></argument>, <argument pos:start="105:52" pos:end="105:52"><expr pos:start="105:52" pos:end="105:52"><literal type="number" pos:start="105:52" pos:end="105:52">0</literal></expr></argument>, <argument pos:start="105:55" pos:end="105:56"><expr pos:start="105:55" pos:end="105:56"><name pos:start="105:55" pos:end="105:56">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:32"><expr pos:start="109:9" pos:end="109:31"><call pos:start="109:9" pos:end="109:31"><name pos:start="109:9" pos:end="109:25">tcg_temp_free_i32</name><argument_list pos:start="109:26" pos:end="109:31">(<argument pos:start="109:27" pos:end="109:30"><expr pos:start="109:27" pos:end="109:30"><name pos:start="109:27" pos:end="109:30">temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:35"><expr pos:start="113:5" pos:end="113:34"><call pos:start="113:5" pos:end="113:34"><name pos:start="113:5" pos:end="113:19">gen_update_cfar</name><argument_list pos:start="113:20" pos:end="113:34">(<argument pos:start="113:21" pos:end="113:23"><expr pos:start="113:21" pos:end="113:23"><name pos:start="113:21" pos:end="113:23">ctx</name></expr></argument>, <argument pos:start="113:26" pos:end="113:33"><expr pos:start="113:26" pos:end="113:33"><name pos:start="113:26" pos:end="113:33"><name pos:start="113:26" pos:end="113:28">ctx</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:33">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="153:5"><if pos:start="115:5" pos:end="133:5">if <condition pos:start="115:8" pos:end="115:25">(<expr pos:start="115:9" pos:end="115:24"><name pos:start="115:9" pos:end="115:12">type</name> <operator pos:start="115:14" pos:end="115:15">==</operator> <name pos:start="115:17" pos:end="115:24">BCOND_IM</name></expr>)</condition> <block pos:start="115:27" pos:end="133:5">{<block_content pos:start="117:9" pos:end="131:38">

        <decl_stmt pos:start="117:9" pos:end="117:68"><decl pos:start="117:9" pos:end="117:67"><type pos:start="117:9" pos:end="117:20"><name pos:start="117:9" pos:end="117:20">target_ulong</name></type> <name pos:start="117:22" pos:end="117:23">li</name> <init pos:start="117:25" pos:end="117:67">= <expr pos:start="117:27" pos:end="117:67"><operator pos:start="117:27" pos:end="117:27">(</operator><name pos:start="117:28" pos:end="117:38">target_long</name><operator pos:start="117:39" pos:end="117:39">)</operator><operator pos:start="117:40" pos:end="117:40">(</operator><operator pos:start="117:41" pos:end="117:41">(</operator><name pos:start="117:42" pos:end="117:48">int16_t</name><operator pos:start="117:49" pos:end="117:49">)</operator><operator pos:start="117:50" pos:end="117:50">(</operator><call pos:start="117:51" pos:end="117:65"><name pos:start="117:51" pos:end="117:52">BD</name><argument_list pos:start="117:53" pos:end="117:65">(<argument pos:start="117:54" pos:end="117:64"><expr pos:start="117:54" pos:end="117:64"><name pos:start="117:54" pos:end="117:64"><name pos:start="117:54" pos:end="117:56">ctx</name><operator pos:start="117:57" pos:end="117:58">-&gt;</operator><name pos:start="117:59" pos:end="117:64">opcode</name></name></expr></argument>)</argument_list></call><operator pos:start="117:66" pos:end="117:66">)</operator><operator pos:start="117:67" pos:end="117:67">)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="119:9" pos:end="127:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:41">(<expr pos:start="119:13" pos:end="119:40"><call pos:start="119:13" pos:end="119:40"><name pos:start="119:13" pos:end="119:18">likely</name><argument_list pos:start="119:19" pos:end="119:40">(<argument pos:start="119:20" pos:end="119:39"><expr pos:start="119:20" pos:end="119:39"><call pos:start="119:20" pos:end="119:34"><name pos:start="119:20" pos:end="119:21">AA</name><argument_list pos:start="119:22" pos:end="119:34">(<argument pos:start="119:23" pos:end="119:33"><expr pos:start="119:23" pos:end="119:33"><name pos:start="119:23" pos:end="119:33"><name pos:start="119:23" pos:end="119:25">ctx</name><operator pos:start="119:26" pos:end="119:27">-&gt;</operator><name pos:start="119:28" pos:end="119:33">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="119:36" pos:end="119:37">==</operator> <literal type="number" pos:start="119:39" pos:end="119:39">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:43" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:51">

            <expr_stmt pos:start="121:13" pos:end="121:51"><expr pos:start="121:13" pos:end="121:50"><call pos:start="121:13" pos:end="121:50"><name pos:start="121:13" pos:end="121:23">gen_goto_tb</name><argument_list pos:start="121:24" pos:end="121:50">(<argument pos:start="121:25" pos:end="121:27"><expr pos:start="121:25" pos:end="121:27"><name pos:start="121:25" pos:end="121:27">ctx</name></expr></argument>, <argument pos:start="121:30" pos:end="121:30"><expr pos:start="121:30" pos:end="121:30"><literal type="number" pos:start="121:30" pos:end="121:30">0</literal></expr></argument>, <argument pos:start="121:33" pos:end="121:49"><expr pos:start="121:33" pos:end="121:49"><name pos:start="121:33" pos:end="121:40"><name pos:start="121:33" pos:end="121:35">ctx</name><operator pos:start="121:36" pos:end="121:37">-&gt;</operator><name pos:start="121:38" pos:end="121:40">nip</name></name> <operator pos:start="121:42" pos:end="121:42">+</operator> <name pos:start="121:44" pos:end="121:45">li</name> <operator pos:start="121:47" pos:end="121:47">-</operator> <literal type="number" pos:start="121:49" pos:end="121:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="123:11" pos:end="127:9">else <block pos:start="123:16" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:36">

            <expr_stmt pos:start="125:13" pos:end="125:36"><expr pos:start="125:13" pos:end="125:35"><call pos:start="125:13" pos:end="125:35"><name pos:start="125:13" pos:end="125:23">gen_goto_tb</name><argument_list pos:start="125:24" pos:end="125:35">(<argument pos:start="125:25" pos:end="125:27"><expr pos:start="125:25" pos:end="125:27"><name pos:start="125:25" pos:end="125:27">ctx</name></expr></argument>, <argument pos:start="125:30" pos:end="125:30"><expr pos:start="125:30" pos:end="125:30"><literal type="number" pos:start="125:30" pos:end="125:30">0</literal></expr></argument>, <argument pos:start="125:33" pos:end="125:34"><expr pos:start="125:33" pos:end="125:34"><name pos:start="125:33" pos:end="125:34">li</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:26"><expr pos:start="129:9" pos:end="129:25"><call pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:21">gen_set_label</name><argument_list pos:start="129:22" pos:end="129:25">(<argument pos:start="129:23" pos:end="129:24"><expr pos:start="129:23" pos:end="129:24"><name pos:start="129:23" pos:end="129:24">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:38"><expr pos:start="131:9" pos:end="131:37"><call pos:start="131:9" pos:end="131:37"><name pos:start="131:9" pos:end="131:19">gen_goto_tb</name><argument_list pos:start="131:20" pos:end="131:37">(<argument pos:start="131:21" pos:end="131:23"><expr pos:start="131:21" pos:end="131:23"><name pos:start="131:21" pos:end="131:23">ctx</name></expr></argument>, <argument pos:start="131:26" pos:end="131:26"><expr pos:start="131:26" pos:end="131:26"><literal type="number" pos:start="131:26" pos:end="131:26">1</literal></expr></argument>, <argument pos:start="131:29" pos:end="131:36"><expr pos:start="131:29" pos:end="131:36"><name pos:start="131:29" pos:end="131:36"><name pos:start="131:29" pos:end="131:31">ctx</name><operator pos:start="131:32" pos:end="131:33">-&gt;</operator><name pos:start="131:34" pos:end="131:36">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="133:7" pos:end="153:5">else <block pos:start="133:12" pos:end="153:5">{<block_content pos:start="135:9" pos:end="151:27">

        <if_stmt pos:start="135:9" pos:end="143:9"><if pos:start="135:9" pos:end="139:9">if <condition pos:start="135:12" pos:end="135:29">(<expr pos:start="135:13" pos:end="135:28"><call pos:start="135:13" pos:end="135:28"><name pos:start="135:13" pos:end="135:23">NARROW_MODE</name><argument_list pos:start="135:24" pos:end="135:28">(<argument pos:start="135:25" pos:end="135:27"><expr pos:start="135:25" pos:end="135:27"><name pos:start="135:25" pos:end="135:27">ctx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:31" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:59">

            <expr_stmt pos:start="137:13" pos:end="137:59"><expr pos:start="137:13" pos:end="137:58"><call pos:start="137:13" pos:end="137:58"><name pos:start="137:13" pos:end="137:27">tcg_gen_andi_tl</name><argument_list pos:start="137:28" pos:end="137:58">(<argument pos:start="137:29" pos:end="137:35"><expr pos:start="137:29" pos:end="137:35"><name pos:start="137:29" pos:end="137:35">cpu_nip</name></expr></argument>, <argument pos:start="137:38" pos:end="137:43"><expr pos:start="137:38" pos:end="137:43"><name pos:start="137:38" pos:end="137:43">target</name></expr></argument>, <argument pos:start="137:46" pos:end="137:57"><expr pos:start="137:46" pos:end="137:57"><operator pos:start="137:46" pos:end="137:46">(</operator><name pos:start="137:47" pos:end="137:54">uint32_t</name><operator pos:start="137:55" pos:end="137:55">)</operator><operator pos:start="137:56" pos:end="137:56">~</operator><literal type="number" pos:start="137:57" pos:end="137:57">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="139:11" pos:end="143:9">else <block pos:start="139:16" pos:end="143:9">{<block_content pos:start="141:13" pos:end="141:49">

            <expr_stmt pos:start="141:13" pos:end="141:49"><expr pos:start="141:13" pos:end="141:48"><call pos:start="141:13" pos:end="141:48"><name pos:start="141:13" pos:end="141:27">tcg_gen_andi_tl</name><argument_list pos:start="141:28" pos:end="141:48">(<argument pos:start="141:29" pos:end="141:35"><expr pos:start="141:29" pos:end="141:35"><name pos:start="141:29" pos:end="141:35">cpu_nip</name></expr></argument>, <argument pos:start="141:38" pos:end="141:43"><expr pos:start="141:38" pos:end="141:43"><name pos:start="141:38" pos:end="141:43">target</name></expr></argument>, <argument pos:start="141:46" pos:end="141:47"><expr pos:start="141:46" pos:end="141:47"><operator pos:start="141:46" pos:end="141:46">~</operator><literal type="number" pos:start="141:47" pos:end="141:47">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:27"><expr pos:start="145:9" pos:end="145:26"><call pos:start="145:9" pos:end="145:26"><name pos:start="145:9" pos:end="145:23">tcg_gen_exit_tb</name><argument_list pos:start="145:24" pos:end="145:26">(<argument pos:start="145:25" pos:end="145:25"><expr pos:start="145:25" pos:end="145:25"><literal type="number" pos:start="145:25" pos:end="145:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:26"><expr pos:start="147:9" pos:end="147:25"><call pos:start="147:9" pos:end="147:25"><name pos:start="147:9" pos:end="147:21">gen_set_label</name><argument_list pos:start="147:22" pos:end="147:25">(<argument pos:start="147:23" pos:end="147:24"><expr pos:start="147:23" pos:end="147:24"><name pos:start="147:23" pos:end="147:24">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:38"><expr pos:start="149:9" pos:end="149:37"><call pos:start="149:9" pos:end="149:37"><name pos:start="149:9" pos:end="149:22">gen_update_nip</name><argument_list pos:start="149:23" pos:end="149:37">(<argument pos:start="149:24" pos:end="149:26"><expr pos:start="149:24" pos:end="149:26"><name pos:start="149:24" pos:end="149:26">ctx</name></expr></argument>, <argument pos:start="149:29" pos:end="149:36"><expr pos:start="149:29" pos:end="149:36"><name pos:start="149:29" pos:end="149:36"><name pos:start="149:29" pos:end="149:31">ctx</name><operator pos:start="149:32" pos:end="149:33">-&gt;</operator><name pos:start="149:34" pos:end="149:36">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:27"><expr pos:start="151:9" pos:end="151:26"><call pos:start="151:9" pos:end="151:26"><name pos:start="151:9" pos:end="151:23">tcg_gen_exit_tb</name><argument_list pos:start="151:24" pos:end="151:26">(<argument pos:start="151:25" pos:end="151:25"><expr pos:start="151:25" pos:end="151:25"><literal type="number" pos:start="151:25" pos:end="151:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="155:5" pos:end="159:5"><if pos:start="155:5" pos:end="159:5">if <condition pos:start="155:8" pos:end="155:46">(<expr pos:start="155:9" pos:end="155:45"><name pos:start="155:9" pos:end="155:12">type</name> <operator pos:start="155:14" pos:end="155:15">==</operator> <name pos:start="155:17" pos:end="155:24">BCOND_LR</name> <operator pos:start="155:26" pos:end="155:27">||</operator> <name pos:start="155:29" pos:end="155:32">type</name> <operator pos:start="155:34" pos:end="155:35">==</operator> <name pos:start="155:37" pos:end="155:45">BCOND_CTR</name></expr>)</condition> <block pos:start="155:48" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:30">

        <expr_stmt pos:start="157:9" pos:end="157:30"><expr pos:start="157:9" pos:end="157:29"><call pos:start="157:9" pos:end="157:29"><name pos:start="157:9" pos:end="157:21">tcg_temp_free</name><argument_list pos:start="157:22" pos:end="157:29">(<argument pos:start="157:23" pos:end="157:28"><expr pos:start="157:23" pos:end="157:28"><name pos:start="157:23" pos:end="157:28">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
