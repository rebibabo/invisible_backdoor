<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3485.c" pos:tabs="8"><function pos:start="1:1" pos:end="285:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">unpack_superblocks</name><parameter_list pos:start="1:30" pos:end="1:69">(<parameter pos:start="1:31" pos:end="1:49"><decl pos:start="1:31" pos:end="1:49"><type pos:start="1:31" pos:end="1:49"><name pos:start="1:31" pos:end="1:46">Vp3DecodeContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">s</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:68"><decl pos:start="1:52" pos:end="1:68"><type pos:start="1:52" pos:end="1:68"><name pos:start="1:52" pos:end="1:64">GetBitContext</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">gb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="285:1">{<block_content pos:start="5:5" pos:end="283:13">

    <decl_stmt pos:start="5:5" pos:end="5:83"><decl pos:start="5:5" pos:end="5:82"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:28"><name pos:start="5:9" pos:end="5:25">superblock_starts</name><index pos:start="5:26" pos:end="5:28">[<expr pos:start="5:27" pos:end="5:27"><literal type="number" pos:start="5:27" pos:end="5:27">3</literal></expr>]</index></name> <init pos:start="5:30" pos:end="5:82">= <expr pos:start="5:32" pos:end="5:82"><block pos:start="5:32" pos:end="5:82">{ <expr pos:start="5:34" pos:end="5:34"><literal type="number" pos:start="5:34" pos:end="5:34">0</literal></expr>, <expr pos:start="5:37" pos:end="5:57"><name pos:start="5:37" pos:end="5:57"><name pos:start="5:37" pos:end="5:37">s</name><operator pos:start="5:38" pos:end="5:39">-&gt;</operator><name pos:start="5:40" pos:end="5:57">u_superblock_start</name></name></expr>, <expr pos:start="5:60" pos:end="5:80"><name pos:start="5:60" pos:end="5:80"><name pos:start="5:60" pos:end="5:60">s</name><operator pos:start="5:61" pos:end="5:62">-&gt;</operator><name pos:start="5:63" pos:end="5:80">v_superblock_start</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">bit</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:26">current_superblock</name> <init pos:start="9:28" pos:end="9:30">= <expr pos:start="9:30" pos:end="9:30"><literal type="number" pos:start="9:30" pos:end="9:30">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:19">current_run</name> <init pos:start="11:21" pos:end="11:23">= <expr pos:start="11:23" pos:end="11:23"><literal type="number" pos:start="11:23" pos:end="11:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:31">num_partial_superblocks</name> <init pos:start="13:33" pos:end="13:35">= <expr pos:start="13:35" pos:end="13:35"><literal type="number" pos:start="13:35" pos:end="13:35">0</literal></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="17:5" pos:end="17:13"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:12"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:12">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:24">current_fragment</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:14"><decl pos:start="21:5" pos:end="21:13"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:13">plane</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="173:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:20">(<expr pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:19">keyframe</name></name></expr>)</condition> <block pos:start="25:22" pos:end="31:5">{<block_content pos:start="27:9" pos:end="27:74">

        <expr_stmt pos:start="27:9" pos:end="27:74"><expr pos:start="27:9" pos:end="27:73"><call pos:start="27:9" pos:end="27:73"><name pos:start="27:9" pos:end="27:14">memset</name><argument_list pos:start="27:15" pos:end="27:73">(<argument pos:start="27:16" pos:end="27:35"><expr pos:start="27:16" pos:end="27:35"><name pos:start="27:16" pos:end="27:35"><name pos:start="27:16" pos:end="27:16">s</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:35">superblock_coding</name></name></expr></argument>, <argument pos:start="27:38" pos:end="27:51"><expr pos:start="27:38" pos:end="27:51"><name pos:start="27:38" pos:end="27:51">SB_FULLY_CODED</name></expr></argument>, <argument pos:start="27:54" pos:end="27:72"><expr pos:start="27:54" pos:end="27:72"><name pos:start="27:54" pos:end="27:72"><name pos:start="27:54" pos:end="27:54">s</name><operator pos:start="27:55" pos:end="27:56">-&gt;</operator><name pos:start="27:57" pos:end="27:72">superblock_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="31:7" pos:end="173:5">else <block pos:start="31:12" pos:end="173:5">{<block_content pos:start="37:9" pos:end="171:9">



        <comment type="block" pos:start="35:9" pos:end="35:60">/* unpack the list of partially-coded superblocks */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:28"><expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:11">bit</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:27"><name pos:start="37:15" pos:end="37:23">get_bits1</name><argument_list pos:start="37:24" pos:end="37:27">(<argument pos:start="37:25" pos:end="37:26"><expr pos:start="37:25" pos:end="37:26"><name pos:start="37:25" pos:end="37:26">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while pos:start="39:9" pos:end="81:9">while <condition pos:start="39:15" pos:end="39:56">(<expr pos:start="39:16" pos:end="39:55"><name pos:start="39:16" pos:end="39:33">current_superblock</name> <operator pos:start="39:35" pos:end="39:35">&lt;</operator> <name pos:start="39:37" pos:end="39:55"><name pos:start="39:37" pos:end="39:37">s</name><operator pos:start="39:38" pos:end="39:39">-&gt;</operator><name pos:start="39:40" pos:end="39:55">superblock_count</name></name></expr>)</condition> <block pos:start="39:58" pos:end="81:9">{<block_content pos:start="41:17" pos:end="79:25">

                <expr_stmt pos:start="41:17" pos:end="43:66"><expr pos:start="41:17" pos:end="43:65"><name pos:start="41:17" pos:end="41:27">current_run</name> <operator pos:start="41:29" pos:end="41:29">=</operator> <call pos:start="41:31" pos:end="43:61"><name pos:start="41:31" pos:end="41:38">get_vlc2</name><argument_list pos:start="41:39" pos:end="43:61">(<argument pos:start="41:40" pos:end="41:41"><expr pos:start="41:40" pos:end="41:41"><name pos:start="41:40" pos:end="41:41">gb</name></expr></argument>,

                    <argument pos:start="43:21" pos:end="43:54"><expr pos:start="43:21" pos:end="43:54"><name pos:start="43:21" pos:end="43:54"><name pos:start="43:21" pos:end="43:21">s</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:48">superblock_run_length_vlc</name><operator pos:start="43:49" pos:end="43:49">.</operator><name pos:start="43:50" pos:end="43:54">table</name></name></expr></argument>, <argument pos:start="43:57" pos:end="43:57"><expr pos:start="43:57" pos:end="43:57"><literal type="number" pos:start="43:57" pos:end="43:57">6</literal></expr></argument>, <argument pos:start="43:60" pos:end="43:60"><expr pos:start="43:60" pos:end="43:60"><literal type="number" pos:start="43:60" pos:end="43:60">2</literal></expr></argument>)</argument_list></call> <operator pos:start="43:63" pos:end="43:63">+</operator> <literal type="number" pos:start="43:65" pos:end="43:65">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="45:17" pos:end="47:52"><if pos:start="45:17" pos:end="47:52">if <condition pos:start="45:20" pos:end="45:38">(<expr pos:start="45:21" pos:end="45:37"><name pos:start="45:21" pos:end="45:31">current_run</name> <operator pos:start="45:33" pos:end="45:34">==</operator> <literal type="number" pos:start="45:36" pos:end="45:37">34</literal></expr>)</condition><block type="pseudo" pos:start="47:21" pos:end="47:52"><block_content pos:start="47:21" pos:end="47:52">

                    <expr_stmt pos:start="47:21" pos:end="47:52"><expr pos:start="47:21" pos:end="47:51"><name pos:start="47:21" pos:end="47:31">current_run</name> <operator pos:start="47:33" pos:end="47:34">+=</operator> <call pos:start="47:36" pos:end="47:51"><name pos:start="47:36" pos:end="47:43">get_bits</name><argument_list pos:start="47:44" pos:end="47:51">(<argument pos:start="47:45" pos:end="47:46"><expr pos:start="47:45" pos:end="47:46"><name pos:start="47:45" pos:end="47:46">gb</name></expr></argument>, <argument pos:start="47:49" pos:end="47:50"><expr pos:start="47:49" pos:end="47:50"><literal type="number" pos:start="47:49" pos:end="47:50">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="51:13" pos:end="57:13"><if pos:start="51:13" pos:end="57:13">if <condition pos:start="51:16" pos:end="51:71">(<expr pos:start="51:17" pos:end="51:70"><name pos:start="51:17" pos:end="51:34">current_superblock</name> <operator pos:start="51:36" pos:end="51:36">+</operator> <name pos:start="51:38" pos:end="51:48">current_run</name> <operator pos:start="51:50" pos:end="51:50">&gt;</operator> <name pos:start="51:52" pos:end="51:70"><name pos:start="51:52" pos:end="51:52">s</name><operator pos:start="51:53" pos:end="51:54">-&gt;</operator><name pos:start="51:55" pos:end="51:70">superblock_count</name></name></expr>)</condition> <block pos:start="51:73" pos:end="57:13">{<block_content pos:start="53:17" pos:end="55:26">

                <expr_stmt pos:start="53:17" pos:end="53:98"><expr pos:start="53:17" pos:end="53:97"><call pos:start="53:17" pos:end="53:97"><name pos:start="53:17" pos:end="53:22">av_log</name><argument_list pos:start="53:23" pos:end="53:97">(<argument pos:start="53:24" pos:end="53:31"><expr pos:start="53:24" pos:end="53:31"><name pos:start="53:24" pos:end="53:31"><name pos:start="53:24" pos:end="53:24">s</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:31">avctx</name></name></expr></argument>, <argument pos:start="53:34" pos:end="53:45"><expr pos:start="53:34" pos:end="53:45"><name pos:start="53:34" pos:end="53:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="53:48" pos:end="53:96"><expr pos:start="53:48" pos:end="53:96"><literal type="string" pos:start="53:48" pos:end="53:96">"Invalid partially coded superblock run length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="55:17" pos:end="55:26">return <expr pos:start="55:24" pos:end="55:25"><operator pos:start="55:24" pos:end="55:24">-</operator><literal type="number" pos:start="55:25" pos:end="55:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="61:13" pos:end="61:80"><expr pos:start="61:13" pos:end="61:79"><call pos:start="61:13" pos:end="61:79"><name pos:start="61:13" pos:end="61:18">memset</name><argument_list pos:start="61:19" pos:end="61:79">(<argument pos:start="61:20" pos:end="61:60"><expr pos:start="61:20" pos:end="61:60"><name pos:start="61:20" pos:end="61:39"><name pos:start="61:20" pos:end="61:20">s</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:39">superblock_coding</name></name> <operator pos:start="61:41" pos:end="61:41">+</operator> <name pos:start="61:43" pos:end="61:60">current_superblock</name></expr></argument>, <argument pos:start="61:63" pos:end="61:65"><expr pos:start="61:63" pos:end="61:65"><name pos:start="61:63" pos:end="61:65">bit</name></expr></argument>, <argument pos:start="61:68" pos:end="61:78"><expr pos:start="61:68" pos:end="61:78"><name pos:start="61:68" pos:end="61:78">current_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="65:13" pos:end="65:46"><expr pos:start="65:13" pos:end="65:45"><name pos:start="65:13" pos:end="65:30">current_superblock</name> <operator pos:start="65:32" pos:end="65:33">+=</operator> <name pos:start="65:35" pos:end="65:45">current_run</name></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="69:55"><if pos:start="67:13" pos:end="69:55">if <condition pos:start="67:16" pos:end="67:20">(<expr pos:start="67:17" pos:end="67:19"><name pos:start="67:17" pos:end="67:19">bit</name></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:55"><block_content pos:start="69:17" pos:end="69:55">

                <expr_stmt pos:start="69:17" pos:end="69:55"><expr pos:start="69:17" pos:end="69:54"><name pos:start="69:17" pos:end="69:39">num_partial_superblocks</name> <operator pos:start="69:41" pos:end="69:42">+=</operator> <name pos:start="69:44" pos:end="69:54">current_run</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="73:13" pos:end="79:25"><if pos:start="73:13" pos:end="75:36">if <condition pos:start="73:16" pos:end="73:65">(<expr pos:start="73:17" pos:end="73:64"><name pos:start="73:17" pos:end="73:25"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:25">theora</name></name> <operator pos:start="73:27" pos:end="73:28">&amp;&amp;</operator> <name pos:start="73:30" pos:end="73:40">current_run</name> <operator pos:start="73:42" pos:end="73:43">==</operator> <name pos:start="73:45" pos:end="73:64">MAXIMUM_LONG_BIT_RUN</name></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="75:36"><block_content pos:start="75:17" pos:end="75:36">

                <expr_stmt pos:start="75:17" pos:end="75:36"><expr pos:start="75:17" pos:end="75:35"><name pos:start="75:17" pos:end="75:19">bit</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="75:35"><name pos:start="75:23" pos:end="75:31">get_bits1</name><argument_list pos:start="75:32" pos:end="75:35">(<argument pos:start="75:33" pos:end="75:34"><expr pos:start="75:33" pos:end="75:34"><name pos:start="75:33" pos:end="75:34">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="77:13" pos:end="79:25">else<block type="pseudo" pos:start="79:17" pos:end="79:25"><block_content pos:start="79:17" pos:end="79:25">

                <expr_stmt pos:start="79:17" pos:end="79:25"><expr pos:start="79:17" pos:end="79:24"><name pos:start="79:17" pos:end="79:19">bit</name> <operator pos:start="79:21" pos:end="79:22">^=</operator> <literal type="number" pos:start="79:24" pos:end="79:24">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></while>



        <comment type="block" pos:start="85:9" pos:end="87:64">/* unpack the list of fully coded superblocks if any of the blocks were

         * not marked as partially coded in the previous step */</comment>

        <if_stmt pos:start="89:9" pos:end="149:9"><if pos:start="89:9" pos:end="149:9">if <condition pos:start="89:12" pos:end="89:58">(<expr pos:start="89:13" pos:end="89:57"><name pos:start="89:13" pos:end="89:35">num_partial_superblocks</name> <operator pos:start="89:37" pos:end="89:37">&lt;</operator> <name pos:start="89:39" pos:end="89:57"><name pos:start="89:39" pos:end="89:39">s</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:57">superblock_count</name></name></expr>)</condition> <block pos:start="89:60" pos:end="149:9">{<block_content pos:start="91:13" pos:end="147:13">

            <decl_stmt pos:start="91:13" pos:end="91:40"><decl pos:start="91:13" pos:end="91:39"><type pos:start="91:13" pos:end="91:15"><name pos:start="91:13" pos:end="91:15">int</name></type> <name pos:start="91:17" pos:end="91:35">superblocks_decoded</name> <init pos:start="91:37" pos:end="91:39">= <expr pos:start="91:39" pos:end="91:39"><literal type="number" pos:start="91:39" pos:end="91:39">0</literal></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="95:13" pos:end="95:35"><expr pos:start="95:13" pos:end="95:34"><name pos:start="95:13" pos:end="95:30">current_superblock</name> <operator pos:start="95:32" pos:end="95:32">=</operator> <literal type="number" pos:start="95:34" pos:end="95:34">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:32"><expr pos:start="97:13" pos:end="97:31"><name pos:start="97:13" pos:end="97:15">bit</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <call pos:start="97:19" pos:end="97:31"><name pos:start="97:19" pos:end="97:27">get_bits1</name><argument_list pos:start="97:28" pos:end="97:31">(<argument pos:start="97:29" pos:end="97:30"><expr pos:start="97:29" pos:end="97:30"><name pos:start="97:29" pos:end="97:30">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while pos:start="99:13" pos:end="147:13">while <condition pos:start="99:19" pos:end="99:87">(<expr pos:start="99:20" pos:end="99:86"><name pos:start="99:20" pos:end="99:38">superblocks_decoded</name> <operator pos:start="99:40" pos:end="99:40">&lt;</operator> <name pos:start="99:42" pos:end="99:60"><name pos:start="99:42" pos:end="99:42">s</name><operator pos:start="99:43" pos:end="99:44">-&gt;</operator><name pos:start="99:45" pos:end="99:60">superblock_count</name></name> <operator pos:start="99:62" pos:end="99:62">-</operator> <name pos:start="99:64" pos:end="99:86">num_partial_superblocks</name></expr>)</condition> <block pos:start="99:89" pos:end="147:13">{<block_content pos:start="101:25" pos:end="145:29">

                        <expr_stmt pos:start="101:25" pos:end="103:74"><expr pos:start="101:25" pos:end="103:73"><name pos:start="101:25" pos:end="101:35">current_run</name> <operator pos:start="101:37" pos:end="101:37">=</operator> <call pos:start="101:39" pos:end="103:69"><name pos:start="101:39" pos:end="101:46">get_vlc2</name><argument_list pos:start="101:47" pos:end="103:69">(<argument pos:start="101:48" pos:end="101:49"><expr pos:start="101:48" pos:end="101:49"><name pos:start="101:48" pos:end="101:49">gb</name></expr></argument>,

                            <argument pos:start="103:29" pos:end="103:62"><expr pos:start="103:29" pos:end="103:62"><name pos:start="103:29" pos:end="103:62"><name pos:start="103:29" pos:end="103:29">s</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:56">superblock_run_length_vlc</name><operator pos:start="103:57" pos:end="103:57">.</operator><name pos:start="103:58" pos:end="103:62">table</name></name></expr></argument>, <argument pos:start="103:65" pos:end="103:65"><expr pos:start="103:65" pos:end="103:65"><literal type="number" pos:start="103:65" pos:end="103:65">6</literal></expr></argument>, <argument pos:start="103:68" pos:end="103:68"><expr pos:start="103:68" pos:end="103:68"><literal type="number" pos:start="103:68" pos:end="103:68">2</literal></expr></argument>)</argument_list></call> <operator pos:start="103:71" pos:end="103:71">+</operator> <literal type="number" pos:start="103:73" pos:end="103:73">1</literal></expr>;</expr_stmt>

                        <if_stmt pos:start="105:25" pos:end="107:60"><if pos:start="105:25" pos:end="107:60">if <condition pos:start="105:28" pos:end="105:46">(<expr pos:start="105:29" pos:end="105:45"><name pos:start="105:29" pos:end="105:39">current_run</name> <operator pos:start="105:41" pos:end="105:42">==</operator> <literal type="number" pos:start="105:44" pos:end="105:45">34</literal></expr>)</condition><block type="pseudo" pos:start="107:29" pos:end="107:60"><block_content pos:start="107:29" pos:end="107:60">

                            <expr_stmt pos:start="107:29" pos:end="107:60"><expr pos:start="107:29" pos:end="107:59"><name pos:start="107:29" pos:end="107:39">current_run</name> <operator pos:start="107:41" pos:end="107:42">+=</operator> <call pos:start="107:44" pos:end="107:59"><name pos:start="107:44" pos:end="107:51">get_bits</name><argument_list pos:start="107:52" pos:end="107:59">(<argument pos:start="107:53" pos:end="107:54"><expr pos:start="107:53" pos:end="107:54"><name pos:start="107:53" pos:end="107:54">gb</name></expr></argument>, <argument pos:start="107:57" pos:end="107:58"><expr pos:start="107:57" pos:end="107:58"><literal type="number" pos:start="107:57" pos:end="107:58">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <for pos:start="111:17" pos:end="133:17">for <control pos:start="111:21" pos:end="111:66">(<init pos:start="111:22" pos:end="111:27"><expr pos:start="111:22" pos:end="111:26"><name pos:start="111:22" pos:end="111:22">j</name> <operator pos:start="111:24" pos:end="111:24">=</operator> <literal type="number" pos:start="111:26" pos:end="111:26">0</literal></expr>;</init> <condition pos:start="111:29" pos:end="111:44"><expr pos:start="111:29" pos:end="111:43"><name pos:start="111:29" pos:end="111:29">j</name> <operator pos:start="111:31" pos:end="111:31">&lt;</operator> <name pos:start="111:33" pos:end="111:43">current_run</name></expr>;</condition> <incr pos:start="111:46" pos:end="111:65"><expr pos:start="111:46" pos:end="111:65"><name pos:start="111:46" pos:end="111:63">current_superblock</name><operator pos:start="111:64" pos:end="111:65">++</operator></expr></incr>)</control> <block pos:start="111:68" pos:end="133:17">{<block_content pos:start="113:21" pos:end="131:17">

                    <if_stmt pos:start="113:21" pos:end="119:21"><if pos:start="113:21" pos:end="119:21">if <condition pos:start="113:24" pos:end="113:66">(<expr pos:start="113:25" pos:end="113:65"><name pos:start="113:25" pos:end="113:42">current_superblock</name> <operator pos:start="113:44" pos:end="113:45">&gt;=</operator> <name pos:start="113:47" pos:end="113:65"><name pos:start="113:47" pos:end="113:47">s</name><operator pos:start="113:48" pos:end="113:49">-&gt;</operator><name pos:start="113:50" pos:end="113:65">superblock_count</name></name></expr>)</condition> <block pos:start="113:68" pos:end="119:21">{<block_content pos:start="115:25" pos:end="117:34">

                        <expr_stmt pos:start="115:25" pos:end="115:102"><expr pos:start="115:25" pos:end="115:101"><call pos:start="115:25" pos:end="115:101"><name pos:start="115:25" pos:end="115:30">av_log</name><argument_list pos:start="115:31" pos:end="115:101">(<argument pos:start="115:32" pos:end="115:39"><expr pos:start="115:32" pos:end="115:39"><name pos:start="115:32" pos:end="115:39"><name pos:start="115:32" pos:end="115:32">s</name><operator pos:start="115:33" pos:end="115:34">-&gt;</operator><name pos:start="115:35" pos:end="115:39">avctx</name></name></expr></argument>, <argument pos:start="115:42" pos:end="115:53"><expr pos:start="115:42" pos:end="115:53"><name pos:start="115:42" pos:end="115:53">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:56" pos:end="115:100"><expr pos:start="115:56" pos:end="115:100"><literal type="string" pos:start="115:56" pos:end="115:100">"Invalid fully coded superblock run length\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="117:25" pos:end="117:34">return <expr pos:start="117:32" pos:end="117:33"><operator pos:start="117:32" pos:end="117:32">-</operator><literal type="number" pos:start="117:33" pos:end="117:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="123:17" pos:end="123:76">/* skip any superblocks already marked as partially coded */</comment>

                <if_stmt pos:start="125:17" pos:end="131:17"><if pos:start="125:17" pos:end="131:17">if <condition pos:start="125:20" pos:end="125:77">(<expr pos:start="125:21" pos:end="125:76"><name pos:start="125:21" pos:end="125:60"><name pos:start="125:21" pos:end="125:21">s</name><operator pos:start="125:22" pos:end="125:23">-&gt;</operator><name pos:start="125:24" pos:end="125:40">superblock_coding</name><index pos:start="125:41" pos:end="125:60">[<expr pos:start="125:42" pos:end="125:59"><name pos:start="125:42" pos:end="125:59">current_superblock</name></expr>]</index></name> <operator pos:start="125:62" pos:end="125:63">==</operator> <name pos:start="125:65" pos:end="125:76">SB_NOT_CODED</name></expr>)</condition> <block pos:start="125:79" pos:end="131:17">{<block_content pos:start="127:21" pos:end="129:24">

                    <expr_stmt pos:start="127:21" pos:end="127:69"><expr pos:start="127:21" pos:end="127:68"><name pos:start="127:21" pos:end="127:60"><name pos:start="127:21" pos:end="127:21">s</name><operator pos:start="127:22" pos:end="127:23">-&gt;</operator><name pos:start="127:24" pos:end="127:40">superblock_coding</name><index pos:start="127:41" pos:end="127:60">[<expr pos:start="127:42" pos:end="127:59"><name pos:start="127:42" pos:end="127:59">current_superblock</name></expr>]</index></name> <operator pos:start="127:62" pos:end="127:62">=</operator> <literal type="number" pos:start="127:64" pos:end="127:64">2</literal><operator pos:start="127:65" pos:end="127:65">*</operator><name pos:start="127:66" pos:end="127:68">bit</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="129:21" pos:end="129:24"><expr pos:start="129:21" pos:end="129:23"><name pos:start="129:21" pos:end="129:21">j</name><operator pos:start="129:22" pos:end="129:23">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="135:17" pos:end="135:51"><expr pos:start="135:17" pos:end="135:50"><name pos:start="135:17" pos:end="135:35">superblocks_decoded</name> <operator pos:start="135:37" pos:end="135:38">+=</operator> <name pos:start="135:40" pos:end="135:50">current_run</name></expr>;</expr_stmt>



                <if_stmt pos:start="139:17" pos:end="145:29"><if pos:start="139:17" pos:end="141:40">if <condition pos:start="139:20" pos:end="139:69">(<expr pos:start="139:21" pos:end="139:68"><name pos:start="139:21" pos:end="139:29"><name pos:start="139:21" pos:end="139:21">s</name><operator pos:start="139:22" pos:end="139:23">-&gt;</operator><name pos:start="139:24" pos:end="139:29">theora</name></name> <operator pos:start="139:31" pos:end="139:32">&amp;&amp;</operator> <name pos:start="139:34" pos:end="139:44">current_run</name> <operator pos:start="139:46" pos:end="139:47">==</operator> <name pos:start="139:49" pos:end="139:68">MAXIMUM_LONG_BIT_RUN</name></expr>)</condition><block type="pseudo" pos:start="141:21" pos:end="141:40"><block_content pos:start="141:21" pos:end="141:40">

                    <expr_stmt pos:start="141:21" pos:end="141:40"><expr pos:start="141:21" pos:end="141:39"><name pos:start="141:21" pos:end="141:23">bit</name> <operator pos:start="141:25" pos:end="141:25">=</operator> <call pos:start="141:27" pos:end="141:39"><name pos:start="141:27" pos:end="141:35">get_bits1</name><argument_list pos:start="141:36" pos:end="141:39">(<argument pos:start="141:37" pos:end="141:38"><expr pos:start="141:37" pos:end="141:38"><name pos:start="141:37" pos:end="141:38">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="143:17" pos:end="145:29">else<block type="pseudo" pos:start="145:21" pos:end="145:29"><block_content pos:start="145:21" pos:end="145:29">

                    <expr_stmt pos:start="145:21" pos:end="145:29"><expr pos:start="145:21" pos:end="145:28"><name pos:start="145:21" pos:end="145:23">bit</name> <operator pos:start="145:25" pos:end="145:26">^=</operator> <literal type="number" pos:start="145:28" pos:end="145:28">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></while>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="153:9" pos:end="155:40">/* if there were partial blocks, initialize bitstream for

         * unpacking fragment codings */</comment>

        <if_stmt pos:start="157:9" pos:end="171:9"><if pos:start="157:9" pos:end="171:9">if <condition pos:start="157:12" pos:end="157:36">(<expr pos:start="157:13" pos:end="157:35"><name pos:start="157:13" pos:end="157:35">num_partial_superblocks</name></expr>)</condition> <block pos:start="157:38" pos:end="171:9">{<block_content pos:start="161:13" pos:end="169:21">



            <expr_stmt pos:start="161:13" pos:end="161:28"><expr pos:start="161:13" pos:end="161:27"><name pos:start="161:13" pos:end="161:23">current_run</name> <operator pos:start="161:25" pos:end="161:25">=</operator> <literal type="number" pos:start="161:27" pos:end="161:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:32"><expr pos:start="163:13" pos:end="163:31"><name pos:start="163:13" pos:end="163:15">bit</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <call pos:start="163:19" pos:end="163:31"><name pos:start="163:19" pos:end="163:27">get_bits1</name><argument_list pos:start="163:28" pos:end="163:31">(<argument pos:start="163:29" pos:end="163:30"><expr pos:start="163:29" pos:end="163:30"><name pos:start="163:29" pos:end="163:30">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="165:13" pos:end="167:55">/* toggle the bit because as soon as the first run length is

             * fetched the bit will be toggled again */</comment>

            <expr_stmt pos:start="169:13" pos:end="169:21"><expr pos:start="169:13" pos:end="169:20"><name pos:start="169:13" pos:end="169:15">bit</name> <operator pos:start="169:17" pos:end="169:18">^=</operator> <literal type="number" pos:start="169:20" pos:end="169:20">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="177:5" pos:end="179:33">/* figure out which fragments are coded; iterate through each

     * superblock (all planes) */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:33"><expr pos:start="181:5" pos:end="181:32"><name pos:start="181:5" pos:end="181:28"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:28">total_num_coded_frags</name></name> <operator pos:start="181:30" pos:end="181:30">=</operator> <literal type="number" pos:start="181:32" pos:end="181:32">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:65"><expr pos:start="183:5" pos:end="183:64"><call pos:start="183:5" pos:end="183:64"><name pos:start="183:5" pos:end="183:10">memset</name><argument_list pos:start="183:11" pos:end="183:64">(<argument pos:start="183:12" pos:end="183:31"><expr pos:start="183:12" pos:end="183:31"><name pos:start="183:12" pos:end="183:31"><name pos:start="183:12" pos:end="183:12">s</name><operator pos:start="183:13" pos:end="183:14">-&gt;</operator><name pos:start="183:15" pos:end="183:31">macroblock_coding</name></name></expr></argument>, <argument pos:start="183:34" pos:end="183:42"><expr pos:start="183:34" pos:end="183:42"><name pos:start="183:34" pos:end="183:42">MODE_COPY</name></expr></argument>, <argument pos:start="183:45" pos:end="183:63"><expr pos:start="183:45" pos:end="183:63"><name pos:start="183:45" pos:end="183:63"><name pos:start="183:45" pos:end="183:45">s</name><operator pos:start="183:46" pos:end="183:47">-&gt;</operator><name pos:start="183:48" pos:end="183:63">macroblock_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="187:5" pos:end="281:5">for <control pos:start="187:9" pos:end="187:39">(<init pos:start="187:10" pos:end="187:19"><expr pos:start="187:10" pos:end="187:18"><name pos:start="187:10" pos:end="187:14">plane</name> <operator pos:start="187:16" pos:end="187:16">=</operator> <literal type="number" pos:start="187:18" pos:end="187:18">0</literal></expr>;</init> <condition pos:start="187:21" pos:end="187:30"><expr pos:start="187:21" pos:end="187:29"><name pos:start="187:21" pos:end="187:25">plane</name> <operator pos:start="187:27" pos:end="187:27">&lt;</operator> <literal type="number" pos:start="187:29" pos:end="187:29">3</literal></expr>;</condition> <incr pos:start="187:32" pos:end="187:38"><expr pos:start="187:32" pos:end="187:38"><name pos:start="187:32" pos:end="187:36">plane</name><operator pos:start="187:37" pos:end="187:38">++</operator></expr></incr>)</control> <block pos:start="187:41" pos:end="281:5">{<block_content pos:start="189:9" pos:end="279:94">

        <decl_stmt pos:start="189:9" pos:end="189:48"><decl pos:start="189:9" pos:end="189:47"><type pos:start="189:9" pos:end="189:11"><name pos:start="189:9" pos:end="189:11">int</name></type> <name pos:start="189:13" pos:end="189:20">sb_start</name> <init pos:start="189:22" pos:end="189:47">= <expr pos:start="189:24" pos:end="189:47"><name pos:start="189:24" pos:end="189:47"><name pos:start="189:24" pos:end="189:40">superblock_starts</name><index pos:start="189:41" pos:end="189:47">[<expr pos:start="189:42" pos:end="189:46"><name pos:start="189:42" pos:end="189:46">plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="191:9" pos:end="191:88"><decl pos:start="191:9" pos:end="191:87"><type pos:start="191:9" pos:end="191:11"><name pos:start="191:9" pos:end="191:11">int</name></type> <name pos:start="191:13" pos:end="191:18">sb_end</name> <init pos:start="191:20" pos:end="191:87">= <expr pos:start="191:22" pos:end="191:87"><name pos:start="191:22" pos:end="191:29">sb_start</name> <operator pos:start="191:31" pos:end="191:31">+</operator> <operator pos:start="191:33" pos:end="191:33">(</operator><ternary pos:start="191:34" pos:end="191:86"><condition pos:start="191:34" pos:end="191:40"><expr pos:start="191:34" pos:end="191:38"><name pos:start="191:34" pos:end="191:38">plane</name></expr> ?</condition><then pos:start="191:42" pos:end="191:62"> <expr pos:start="191:42" pos:end="191:62"><name pos:start="191:42" pos:end="191:62"><name pos:start="191:42" pos:end="191:42">s</name><operator pos:start="191:43" pos:end="191:44">-&gt;</operator><name pos:start="191:45" pos:end="191:62">c_superblock_count</name></name></expr> </then><else pos:start="191:64" pos:end="191:86">: <expr pos:start="191:66" pos:end="191:86"><name pos:start="191:66" pos:end="191:86"><name pos:start="191:66" pos:end="191:66">s</name><operator pos:start="191:67" pos:end="191:68">-&gt;</operator><name pos:start="191:69" pos:end="191:86">y_superblock_count</name></name></expr></else></ternary><operator pos:start="191:87" pos:end="191:87">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="193:9" pos:end="193:32"><decl pos:start="193:9" pos:end="193:31"><type pos:start="193:9" pos:end="193:11"><name pos:start="193:9" pos:end="193:11">int</name></type> <name pos:start="193:13" pos:end="193:27">num_coded_frags</name> <init pos:start="193:29" pos:end="193:31">= <expr pos:start="193:31" pos:end="193:31"><literal type="number" pos:start="193:31" pos:end="193:31">0</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="197:5" pos:end="269:5">for <control pos:start="197:9" pos:end="197:39">(<init pos:start="197:10" pos:end="197:22"><expr pos:start="197:10" pos:end="197:21"><name pos:start="197:10" pos:end="197:10">i</name> <operator pos:start="197:12" pos:end="197:12">=</operator> <name pos:start="197:14" pos:end="197:21">sb_start</name></expr>;</init> <condition pos:start="197:24" pos:end="197:34"><expr pos:start="197:24" pos:end="197:33"><name pos:start="197:24" pos:end="197:24">i</name> <operator pos:start="197:26" pos:end="197:26">&lt;</operator> <name pos:start="197:28" pos:end="197:33">sb_end</name></expr>;</condition> <incr pos:start="197:36" pos:end="197:38"><expr pos:start="197:36" pos:end="197:38"><name pos:start="197:36" pos:end="197:36">i</name><operator pos:start="197:37" pos:end="197:38">++</operator></expr></incr>)</control> <block pos:start="197:41" pos:end="269:5">{<block_content pos:start="203:9" pos:end="267:9">



        <comment type="block" pos:start="201:9" pos:end="201:62">/* iterate through all 16 fragments in a superblock */</comment>

        <for pos:start="203:9" pos:end="267:9">for <control pos:start="203:13" pos:end="203:32">(<init pos:start="203:14" pos:end="203:19"><expr pos:start="203:14" pos:end="203:18"><name pos:start="203:14" pos:end="203:14">j</name> <operator pos:start="203:16" pos:end="203:16">=</operator> <literal type="number" pos:start="203:18" pos:end="203:18">0</literal></expr>;</init> <condition pos:start="203:21" pos:end="203:27"><expr pos:start="203:21" pos:end="203:26"><name pos:start="203:21" pos:end="203:21">j</name> <operator pos:start="203:23" pos:end="203:23">&lt;</operator> <literal type="number" pos:start="203:25" pos:end="203:26">16</literal></expr>;</condition> <incr pos:start="203:29" pos:end="203:31"><expr pos:start="203:29" pos:end="203:31"><name pos:start="203:29" pos:end="203:29">j</name><operator pos:start="203:30" pos:end="203:31">++</operator></expr></incr>)</control> <block pos:start="203:34" pos:end="267:9">{<block_content pos:start="209:13" pos:end="265:13">



            <comment type="block" pos:start="207:13" pos:end="207:71">/* if the fragment is in bounds, check its coding status */</comment>

            <expr_stmt pos:start="209:13" pos:end="209:67"><expr pos:start="209:13" pos:end="209:66"><name pos:start="209:13" pos:end="209:28">current_fragment</name> <operator pos:start="209:30" pos:end="209:30">=</operator> <name pos:start="209:32" pos:end="209:66"><name pos:start="209:32" pos:end="209:32">s</name><operator pos:start="209:33" pos:end="209:34">-&gt;</operator><name pos:start="209:35" pos:end="209:54">superblock_fragments</name><index pos:start="209:55" pos:end="209:66">[<expr pos:start="209:56" pos:end="209:65"><name pos:start="209:56" pos:end="209:56">i</name> <operator pos:start="209:58" pos:end="209:58">*</operator> <literal type="number" pos:start="209:60" pos:end="209:63">16</literal> <operator pos:start="209:63" pos:end="209:63">+</operator> <name pos:start="209:65" pos:end="209:65">j</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="211:13" pos:end="265:13"><if pos:start="211:13" pos:end="265:13">if <condition pos:start="211:16" pos:end="211:39">(<expr pos:start="211:17" pos:end="211:38"><name pos:start="211:17" pos:end="211:32">current_fragment</name> <operator pos:start="211:34" pos:end="211:35">!=</operator> <operator pos:start="211:37" pos:end="211:37">-</operator><literal type="number" pos:start="211:38" pos:end="211:38">1</literal></expr>)</condition> <block pos:start="211:41" pos:end="265:13">{<block_content pos:start="213:17" pos:end="263:21">

                <decl_stmt pos:start="213:17" pos:end="213:52"><decl pos:start="213:17" pos:end="213:51"><type pos:start="213:17" pos:end="213:19"><name pos:start="213:17" pos:end="213:19">int</name></type> <name pos:start="213:21" pos:end="213:25">coded</name> <init pos:start="213:27" pos:end="213:51">= <expr pos:start="213:29" pos:end="213:51"><name pos:start="213:29" pos:end="213:51"><name pos:start="213:29" pos:end="213:29">s</name><operator pos:start="213:30" pos:end="213:31">-&gt;</operator><name pos:start="213:32" pos:end="213:48">superblock_coding</name><index pos:start="213:49" pos:end="213:51">[<expr pos:start="213:50" pos:end="213:50"><name pos:start="213:50" pos:end="213:50">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="217:17" pos:end="237:17"><if pos:start="217:17" pos:end="237:17">if <condition pos:start="217:20" pos:end="217:66">(<expr pos:start="217:21" pos:end="217:65"><name pos:start="217:21" pos:end="217:43"><name pos:start="217:21" pos:end="217:21">s</name><operator pos:start="217:22" pos:end="217:23">-&gt;</operator><name pos:start="217:24" pos:end="217:40">superblock_coding</name><index pos:start="217:41" pos:end="217:43">[<expr pos:start="217:42" pos:end="217:42"><name pos:start="217:42" pos:end="217:42">i</name></expr>]</index></name> <operator pos:start="217:45" pos:end="217:46">==</operator> <name pos:start="217:48" pos:end="217:65">SB_PARTIALLY_CODED</name></expr>)</condition> <block pos:start="217:68" pos:end="237:17">{<block_content pos:start="225:21" pos:end="235:32">



                    <comment type="block" pos:start="221:21" pos:end="223:67">/* fragment may or may not be coded; this is the case

                     * that cares about the fragment coding runs */</comment>

                    <if_stmt pos:start="225:21" pos:end="233:21"><if pos:start="225:21" pos:end="233:21">if <condition pos:start="225:24" pos:end="225:43">(<expr pos:start="225:25" pos:end="225:42"><name pos:start="225:25" pos:end="225:35">current_run</name><operator pos:start="225:36" pos:end="225:37">--</operator> <operator pos:start="225:39" pos:end="225:40">==</operator> <literal type="number" pos:start="225:42" pos:end="225:42">0</literal></expr>)</condition> <block pos:start="225:45" pos:end="233:21">{<block_content pos:start="227:25" pos:end="231:68">

                        <expr_stmt pos:start="227:25" pos:end="227:33"><expr pos:start="227:25" pos:end="227:32"><name pos:start="227:25" pos:end="227:27">bit</name> <operator pos:start="227:29" pos:end="227:30">^=</operator> <literal type="number" pos:start="227:32" pos:end="227:32">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="229:25" pos:end="231:68"><expr pos:start="229:25" pos:end="231:67"><name pos:start="229:25" pos:end="229:35">current_run</name> <operator pos:start="229:37" pos:end="229:37">=</operator> <call pos:start="229:39" pos:end="231:67"><name pos:start="229:39" pos:end="229:46">get_vlc2</name><argument_list pos:start="229:47" pos:end="231:67">(<argument pos:start="229:48" pos:end="229:49"><expr pos:start="229:48" pos:end="229:49"><name pos:start="229:48" pos:end="229:49">gb</name></expr></argument>,

                            <argument pos:start="231:29" pos:end="231:60"><expr pos:start="231:29" pos:end="231:60"><name pos:start="231:29" pos:end="231:60"><name pos:start="231:29" pos:end="231:29">s</name><operator pos:start="231:30" pos:end="231:31">-&gt;</operator><name pos:start="231:32" pos:end="231:54">fragment_run_length_vlc</name><operator pos:start="231:55" pos:end="231:55">.</operator><name pos:start="231:56" pos:end="231:60">table</name></name></expr></argument>, <argument pos:start="231:63" pos:end="231:63"><expr pos:start="231:63" pos:end="231:63"><literal type="number" pos:start="231:63" pos:end="231:63">5</literal></expr></argument>, <argument pos:start="231:66" pos:end="231:66"><expr pos:start="231:66" pos:end="231:66"><literal type="number" pos:start="231:66" pos:end="231:66">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="235:21" pos:end="235:32"><expr pos:start="235:21" pos:end="235:31"><name pos:start="235:21" pos:end="235:25">coded</name> <operator pos:start="235:27" pos:end="235:27">=</operator> <name pos:start="235:29" pos:end="235:31">bit</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                    <if_stmt pos:start="241:21" pos:end="263:21"><if pos:start="241:21" pos:end="255:21">if <condition pos:start="241:24" pos:end="241:30">(<expr pos:start="241:25" pos:end="241:29"><name pos:start="241:25" pos:end="241:29">coded</name></expr>)</condition> <block pos:start="241:32" pos:end="255:21">{<block_content pos:start="247:25" pos:end="253:45">

                        <comment type="block" pos:start="243:25" pos:end="245:44">/* default mode; actual mode will be decoded in

                         * the next phase */</comment>

                        <expr_stmt pos:start="247:25" pos:end="249:45"><expr pos:start="247:25" pos:end="249:44"><name pos:start="247:25" pos:end="247:58"><name pos:start="247:25" pos:end="247:25">s</name><operator pos:start="247:26" pos:end="247:27">-&gt;</operator><name pos:start="247:28" pos:end="247:40">all_fragments</name><index pos:start="247:41" pos:end="247:58">[<expr pos:start="247:42" pos:end="247:57"><name pos:start="247:42" pos:end="247:57">current_fragment</name></expr>]</index></name><operator pos:start="247:59" pos:end="247:59">.</operator><name pos:start="247:60" pos:end="247:72">coding_method</name> <operator pos:start="247:74" pos:end="247:74">=</operator>

                            <name pos:start="249:29" pos:end="249:44">MODE_INTER_NO_MV</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="251:25" pos:end="253:45"><expr pos:start="251:25" pos:end="253:44"><name pos:start="251:25" pos:end="251:72"><name pos:start="251:25" pos:end="251:25">s</name><operator pos:start="251:26" pos:end="251:27">-&gt;</operator><name pos:start="251:28" pos:end="251:46">coded_fragment_list</name><index pos:start="251:47" pos:end="251:53">[<expr pos:start="251:48" pos:end="251:52"><name pos:start="251:48" pos:end="251:52">plane</name></expr>]</index><index pos:start="251:54" pos:end="251:72">[<expr pos:start="251:55" pos:end="251:71"><name pos:start="251:55" pos:end="251:69">num_coded_frags</name><operator pos:start="251:70" pos:end="251:71">++</operator></expr>]</index></name> <operator pos:start="251:74" pos:end="251:74">=</operator>

                            <name pos:start="253:29" pos:end="253:44">current_fragment</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="255:23" pos:end="263:21">else <block pos:start="255:28" pos:end="263:21">{<block_content pos:start="259:25" pos:end="261:38">

                        <comment type="block" pos:start="257:25" pos:end="257:80">/* not coded; copy this fragment from the prior frame */</comment>

                        <expr_stmt pos:start="259:25" pos:end="261:38"><expr pos:start="259:25" pos:end="261:37"><name pos:start="259:25" pos:end="259:58"><name pos:start="259:25" pos:end="259:25">s</name><operator pos:start="259:26" pos:end="259:27">-&gt;</operator><name pos:start="259:28" pos:end="259:40">all_fragments</name><index pos:start="259:41" pos:end="259:58">[<expr pos:start="259:42" pos:end="259:57"><name pos:start="259:42" pos:end="259:57">current_fragment</name></expr>]</index></name><operator pos:start="259:59" pos:end="259:59">.</operator><name pos:start="259:60" pos:end="259:72">coding_method</name> <operator pos:start="259:74" pos:end="259:74">=</operator>

                            <name pos:start="261:29" pos:end="261:37">MODE_COPY</name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

        <expr_stmt pos:start="271:9" pos:end="271:52"><expr pos:start="271:9" pos:end="271:51"><name pos:start="271:9" pos:end="271:32"><name pos:start="271:9" pos:end="271:9">s</name><operator pos:start="271:10" pos:end="271:11">-&gt;</operator><name pos:start="271:12" pos:end="271:32">total_num_coded_frags</name></name> <operator pos:start="271:34" pos:end="271:35">+=</operator> <name pos:start="271:37" pos:end="271:51">num_coded_frags</name></expr>;</expr_stmt>

        <for pos:start="273:9" pos:end="275:59">for <control pos:start="273:13" pos:end="273:32">(<init pos:start="273:14" pos:end="273:19"><expr pos:start="273:14" pos:end="273:18"><name pos:start="273:14" pos:end="273:14">i</name> <operator pos:start="273:16" pos:end="273:16">=</operator> <literal type="number" pos:start="273:18" pos:end="273:18">0</literal></expr>;</init> <condition pos:start="273:21" pos:end="273:27"><expr pos:start="273:21" pos:end="273:26"><name pos:start="273:21" pos:end="273:21">i</name> <operator pos:start="273:23" pos:end="273:23">&lt;</operator> <literal type="number" pos:start="273:25" pos:end="273:26">64</literal></expr>;</condition> <incr pos:start="273:29" pos:end="273:31"><expr pos:start="273:29" pos:end="273:31"><name pos:start="273:29" pos:end="273:29">i</name><operator pos:start="273:30" pos:end="273:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="275:13" pos:end="275:59"><block_content pos:start="275:13" pos:end="275:59">

            <expr_stmt pos:start="275:13" pos:end="275:59"><expr pos:start="275:13" pos:end="275:58"><name pos:start="275:13" pos:end="275:40"><name pos:start="275:13" pos:end="275:13">s</name><operator pos:start="275:14" pos:end="275:15">-&gt;</operator><name pos:start="275:16" pos:end="275:30">num_coded_frags</name><index pos:start="275:31" pos:end="275:37">[<expr pos:start="275:32" pos:end="275:36"><name pos:start="275:32" pos:end="275:36">plane</name></expr>]</index><index pos:start="275:38" pos:end="275:40">[<expr pos:start="275:39" pos:end="275:39"><name pos:start="275:39" pos:end="275:39">i</name></expr>]</index></name> <operator pos:start="275:42" pos:end="275:42">=</operator> <name pos:start="275:44" pos:end="275:58">num_coded_frags</name></expr>;</expr_stmt></block_content></block></for>

        <if_stmt pos:start="277:9" pos:end="279:94"><if pos:start="277:9" pos:end="279:94">if <condition pos:start="277:12" pos:end="277:22">(<expr pos:start="277:13" pos:end="277:21"><name pos:start="277:13" pos:end="277:17">plane</name> <operator pos:start="277:19" pos:end="277:19">&lt;</operator> <literal type="number" pos:start="277:21" pos:end="277:21">2</literal></expr>)</condition><block type="pseudo" pos:start="279:13" pos:end="279:94"><block_content pos:start="279:13" pos:end="279:94">

            <expr_stmt pos:start="279:13" pos:end="279:94"><expr pos:start="279:13" pos:end="279:93"><name pos:start="279:13" pos:end="279:43"><name pos:start="279:13" pos:end="279:13">s</name><operator pos:start="279:14" pos:end="279:15">-&gt;</operator><name pos:start="279:16" pos:end="279:34">coded_fragment_list</name><index pos:start="279:35" pos:end="279:43">[<expr pos:start="279:36" pos:end="279:42"><name pos:start="279:36" pos:end="279:40">plane</name><operator pos:start="279:41" pos:end="279:41">+</operator><literal type="number" pos:start="279:42" pos:end="279:42">1</literal></expr>]</index></name> <operator pos:start="279:45" pos:end="279:45">=</operator> <name pos:start="279:47" pos:end="279:75"><name pos:start="279:47" pos:end="279:47">s</name><operator pos:start="279:48" pos:end="279:49">-&gt;</operator><name pos:start="279:50" pos:end="279:68">coded_fragment_list</name><index pos:start="279:69" pos:end="279:75">[<expr pos:start="279:70" pos:end="279:74"><name pos:start="279:70" pos:end="279:74">plane</name></expr>]</index></name> <operator pos:start="279:77" pos:end="279:77">+</operator> <name pos:start="279:79" pos:end="279:93">num_coded_frags</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="283:5" pos:end="283:13">return <expr pos:start="283:12" pos:end="283:12"><literal type="number" pos:start="283:12" pos:end="283:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
