<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16712.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">r2d_init</name><parameter_list pos:start="1:21" pos:end="7:65">(<parameter pos:start="1:22" pos:end="1:40"><decl pos:start="1:22" pos:end="1:40"><type pos:start="1:22" pos:end="1:40"><name pos:start="1:22" pos:end="1:31">ram_addr_t</name></type> <name pos:start="1:33" pos:end="1:40">ram_size</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:58"><decl pos:start="1:43" pos:end="1:58"><type pos:start="1:43" pos:end="1:58"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:58">vga_ram_size</name></decl></parameter>,

              <parameter pos:start="3:15" pos:end="3:37"><decl pos:start="3:15" pos:end="3:37"><type pos:start="3:15" pos:end="3:37"><specifier pos:start="3:15" pos:end="3:19">const</specifier> <name pos:start="3:21" pos:end="3:24">char</name> <modifier pos:start="3:26" pos:end="3:26">*</modifier></type><name pos:start="3:27" pos:end="3:37">boot_device</name></decl></parameter>,

	      <parameter pos:start="5:15" pos:end="5:41"><decl pos:start="5:15" pos:end="5:41"><type pos:start="5:15" pos:end="5:41"><specifier pos:start="5:15" pos:end="5:19">const</specifier> <name pos:start="5:21" pos:end="5:24">char</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:41">kernel_filename</name></decl></parameter>, <parameter pos:start="5:44" pos:end="5:69"><decl pos:start="5:44" pos:end="5:69"><type pos:start="5:44" pos:end="5:69"><specifier pos:start="5:44" pos:end="5:48">const</specifier> <name pos:start="5:50" pos:end="5:53">char</name> <modifier pos:start="5:55" pos:end="5:55">*</modifier></type><name pos:start="5:56" pos:end="5:69">kernel_cmdline</name></decl></parameter>,

	      <parameter pos:start="7:15" pos:end="7:41"><decl pos:start="7:15" pos:end="7:41"><type pos:start="7:15" pos:end="7:41"><specifier pos:start="7:15" pos:end="7:19">const</specifier> <name pos:start="7:21" pos:end="7:24">char</name> <modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:41">initrd_filename</name></decl></parameter>, <parameter pos:start="7:44" pos:end="7:64"><decl pos:start="7:44" pos:end="7:64"><type pos:start="7:44" pos:end="7:64"><specifier pos:start="7:44" pos:end="7:48">const</specifier> <name pos:start="7:50" pos:end="7:53">char</name> <modifier pos:start="7:55" pos:end="7:55">*</modifier></type><name pos:start="7:56" pos:end="7:64">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="117:1">{<block_content pos:start="11:5" pos:end="115:5">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:22">SH7750State</name></name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:25">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:46"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">ram_addr_t</name></type> <name pos:start="15:16" pos:end="15:25">sdram_addr</name></decl>, <decl pos:start="15:28" pos:end="15:45"><type ref="prev" pos:start="15:5" pos:end="15:14"/><name pos:start="15:28" pos:end="15:45">sm501_vga_ram_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">qemu_irq</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:17">irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:16"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">PCIBus</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:15">pci</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="27:30"><if pos:start="25:5" pos:end="27:30">if <condition pos:start="25:8" pos:end="25:19">(<expr pos:start="25:9" pos:end="25:18"><operator pos:start="25:9" pos:end="25:9">!</operator><name pos:start="25:10" pos:end="25:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:30"><block_content pos:start="27:9" pos:end="27:30">

        <expr_stmt pos:start="27:9" pos:end="27:30"><expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:17">cpu_model</name> <operator pos:start="27:19" pos:end="27:19">=</operator> <literal type="string" pos:start="27:21" pos:end="27:29">"SH7751R"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:30"><expr pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:7">env</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:29"><name pos:start="31:11" pos:end="31:18">cpu_init</name><argument_list pos:start="31:19" pos:end="31:29">(<argument pos:start="31:20" pos:end="31:28"><expr pos:start="31:20" pos:end="31:28"><name pos:start="31:20" pos:end="31:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:13">(<expr pos:start="33:9" pos:end="33:12"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:12">env</name></expr>)</condition> <block pos:start="33:15" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:16">

        <expr_stmt pos:start="35:9" pos:end="35:59"><expr pos:start="35:9" pos:end="35:58"><call pos:start="35:9" pos:end="35:58"><name pos:start="35:9" pos:end="35:15">fprintf</name><argument_list pos:start="35:16" pos:end="35:58">(<argument pos:start="35:17" pos:end="35:22"><expr pos:start="35:17" pos:end="35:22"><name pos:start="35:17" pos:end="35:22">stderr</name></expr></argument>, <argument pos:start="35:25" pos:end="35:57"><expr pos:start="35:25" pos:end="35:57"><literal type="string" pos:start="35:25" pos:end="35:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:16"><expr pos:start="37:9" pos:end="37:15"><call pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:12">exit</name><argument_list pos:start="37:13" pos:end="37:15">(<argument pos:start="37:14" pos:end="37:14"><expr pos:start="37:14" pos:end="37:14"><literal type="number" pos:start="37:14" pos:end="37:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:31">/* Allocate memory space */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:44"><expr pos:start="45:5" pos:end="45:43"><name pos:start="45:5" pos:end="45:14">sdram_addr</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <call pos:start="45:18" pos:end="45:43"><name pos:start="45:18" pos:end="45:31">qemu_ram_alloc</name><argument_list pos:start="45:32" pos:end="45:43">(<argument pos:start="45:33" pos:end="45:42"><expr pos:start="45:33" pos:end="45:42"><name pos:start="45:33" pos:end="45:42">SDRAM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:69"><expr pos:start="47:5" pos:end="47:68"><call pos:start="47:5" pos:end="47:68"><name pos:start="47:5" pos:end="47:32">cpu_register_physical_memory</name><argument_list pos:start="47:33" pos:end="47:68">(<argument pos:start="47:34" pos:end="47:43"><expr pos:start="47:34" pos:end="47:43"><name pos:start="47:34" pos:end="47:43">SDRAM_BASE</name></expr></argument>, <argument pos:start="47:46" pos:end="47:55"><expr pos:start="47:46" pos:end="47:55"><name pos:start="47:46" pos:end="47:55">SDRAM_SIZE</name></expr></argument>, <argument pos:start="47:58" pos:end="47:67"><expr pos:start="47:58" pos:end="47:67"><name pos:start="47:58" pos:end="47:67">sdram_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="49:5" pos:end="49:30">/* Register peripherals */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:25"><expr pos:start="51:5" pos:end="51:24"><name pos:start="51:5" pos:end="51:5">s</name> <operator pos:start="51:7" pos:end="51:7">=</operator> <call pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:19">sh7750_init</name><argument_list pos:start="51:20" pos:end="51:24">(<argument pos:start="51:21" pos:end="51:23"><expr pos:start="51:21" pos:end="51:23"><name pos:start="51:21" pos:end="51:23">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:51"><expr pos:start="53:5" pos:end="53:50"><name pos:start="53:5" pos:end="53:7">irq</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:50"><name pos:start="53:11" pos:end="53:23">r2d_fpga_init</name><argument_list pos:start="53:24" pos:end="53:50">(<argument pos:start="53:25" pos:end="53:34"><expr pos:start="53:25" pos:end="53:34"><literal type="number" pos:start="53:25" pos:end="53:34">0x04000000</literal></expr></argument>, <argument pos:start="53:37" pos:end="53:49"><expr pos:start="53:37" pos:end="53:49"><call pos:start="53:37" pos:end="53:49"><name pos:start="53:37" pos:end="53:46">sh7750_irl</name><argument_list pos:start="53:47" pos:end="53:49">(<argument pos:start="53:48" pos:end="53:48"><expr pos:start="53:48" pos:end="53:48"><name pos:start="53:48" pos:end="53:48">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:75"><expr pos:start="55:5" pos:end="55:74"><name pos:start="55:5" pos:end="55:7">pci</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:74"><name pos:start="55:11" pos:end="55:29">sh_pci_register_bus</name><argument_list pos:start="55:30" pos:end="55:74">(<argument pos:start="55:31" pos:end="55:45"><expr pos:start="55:31" pos:end="55:45"><name pos:start="55:31" pos:end="55:45">r2d_pci_set_irq</name></expr></argument>, <argument pos:start="55:48" pos:end="55:62"><expr pos:start="55:48" pos:end="55:62"><name pos:start="55:48" pos:end="55:62">r2d_pci_map_irq</name></expr></argument>, <argument pos:start="55:65" pos:end="55:67"><expr pos:start="55:65" pos:end="55:67"><name pos:start="55:65" pos:end="55:67">irq</name></expr></argument>, <argument pos:start="55:70" pos:end="55:70"><expr pos:start="55:70" pos:end="55:70"><literal type="number" pos:start="55:70" pos:end="55:70">0</literal></expr></argument>, <argument pos:start="55:73" pos:end="55:73"><expr pos:start="55:73" pos:end="55:73"><literal type="number" pos:start="55:73" pos:end="55:73">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:57"><expr pos:start="59:5" pos:end="59:56"><name pos:start="59:5" pos:end="59:22">sm501_vga_ram_addr</name> <operator pos:start="59:24" pos:end="59:24">=</operator> <call pos:start="59:26" pos:end="59:56"><name pos:start="59:26" pos:end="59:39">qemu_ram_alloc</name><argument_list pos:start="59:40" pos:end="59:56">(<argument pos:start="59:41" pos:end="59:55"><expr pos:start="59:41" pos:end="59:55"><name pos:start="59:41" pos:end="59:55">SM501_VRAM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="63:30"><expr pos:start="61:5" pos:end="63:29"><call pos:start="61:5" pos:end="63:29"><name pos:start="61:5" pos:end="61:14">sm501_init</name><argument_list pos:start="61:15" pos:end="63:29">(<argument pos:start="61:16" pos:end="61:25"><expr pos:start="61:16" pos:end="61:25"><literal type="number" pos:start="61:16" pos:end="61:25">0x10000000</literal></expr></argument>, <argument pos:start="61:28" pos:end="61:45"><expr pos:start="61:28" pos:end="61:45"><name pos:start="61:28" pos:end="61:45">sm501_vga_ram_addr</name></expr></argument>, <argument pos:start="61:48" pos:end="61:62"><expr pos:start="61:48" pos:end="61:62"><name pos:start="61:48" pos:end="61:62">SM501_VRAM_SIZE</name></expr></argument>,

	       <argument pos:start="63:16" pos:end="63:28"><expr pos:start="63:16" pos:end="63:28"><name pos:start="63:16" pos:end="63:28"><name pos:start="63:16" pos:end="63:25">serial_hds</name><index pos:start="63:26" pos:end="63:28">[<expr pos:start="63:27" pos:end="63:27"><literal type="number" pos:start="63:27" pos:end="63:27">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:50">/* onboard CF (True IDE mode, Master only). */</comment>

    <expr_stmt pos:start="69:5" pos:end="71:64"><expr pos:start="69:5" pos:end="71:63"><call pos:start="69:5" pos:end="71:63"><name pos:start="69:5" pos:end="69:17">mmio_ide_init</name><argument_list pos:start="69:18" pos:end="71:63">(<argument pos:start="69:19" pos:end="69:28"><expr pos:start="69:19" pos:end="69:28"><literal type="number" pos:start="69:19" pos:end="69:28">0x14001000</literal></expr></argument>, <argument pos:start="69:31" pos:end="69:40"><expr pos:start="69:31" pos:end="69:40"><literal type="number" pos:start="69:31" pos:end="69:40">0x1400080c</literal></expr></argument>, <argument pos:start="69:43" pos:end="69:53"><expr pos:start="69:43" pos:end="69:53"><name pos:start="69:43" pos:end="69:53"><name pos:start="69:43" pos:end="69:45">irq</name><index pos:start="69:46" pos:end="69:53">[<expr pos:start="69:47" pos:end="69:52"><name pos:start="69:47" pos:end="69:52">CF_IDE</name></expr>]</index></name></expr></argument>, <argument pos:start="69:56" pos:end="69:56"><expr pos:start="69:56" pos:end="69:56"><literal type="number" pos:start="69:56" pos:end="69:56">1</literal></expr></argument>,

        <argument pos:start="71:9" pos:end="71:56"><expr pos:start="71:9" pos:end="71:56"><name pos:start="71:9" pos:end="71:51"><name pos:start="71:9" pos:end="71:20">drives_table</name><index pos:start="71:21" pos:end="71:51">[<expr pos:start="71:22" pos:end="71:50"><call pos:start="71:22" pos:end="71:50"><name pos:start="71:22" pos:end="71:36">drive_get_index</name><argument_list pos:start="71:37" pos:end="71:50">(<argument pos:start="71:38" pos:end="71:43"><expr pos:start="71:38" pos:end="71:43"><name pos:start="71:38" pos:end="71:43">IF_IDE</name></expr></argument>, <argument pos:start="71:46" pos:end="71:46"><expr pos:start="71:46" pos:end="71:46"><literal type="number" pos:start="71:46" pos:end="71:46">0</literal></expr></argument>, <argument pos:start="71:49" pos:end="71:49"><expr pos:start="71:49" pos:end="71:49"><literal type="number" pos:start="71:49" pos:end="71:49">0</literal></expr></argument>)</argument_list></call></expr>]</index></name><operator pos:start="71:52" pos:end="71:52">.</operator><name pos:start="71:53" pos:end="71:56">bdrv</name></expr></argument>, <argument pos:start="71:59" pos:end="71:62"><expr pos:start="71:59" pos:end="71:62"><name pos:start="71:59" pos:end="71:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:45">/* NIC: rtl8139 on-board, and 2 slots. */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:55"><expr pos:start="77:5" pos:end="77:54"><call pos:start="77:5" pos:end="77:54"><name pos:start="77:5" pos:end="77:16">pci_nic_init</name><argument_list pos:start="77:17" pos:end="77:54">(<argument pos:start="77:18" pos:end="77:20"><expr pos:start="77:18" pos:end="77:20"><name pos:start="77:18" pos:end="77:20">pci</name></expr></argument>, <argument pos:start="77:23" pos:end="77:34"><expr pos:start="77:23" pos:end="77:34"><operator pos:start="77:23" pos:end="77:23">&amp;</operator><name pos:start="77:24" pos:end="77:34"><name pos:start="77:24" pos:end="77:31">nd_table</name><index pos:start="77:32" pos:end="77:34">[<expr pos:start="77:33" pos:end="77:33"><literal type="number" pos:start="77:33" pos:end="77:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="77:37" pos:end="77:42"><expr pos:start="77:37" pos:end="77:42"><literal type="number" pos:start="77:37" pos:end="77:37">2</literal> <operator pos:start="77:39" pos:end="77:40">&lt;&lt;</operator> <literal type="number" pos:start="77:42" pos:end="77:42">3</literal></expr></argument>, <argument pos:start="77:45" pos:end="77:53"><expr pos:start="77:45" pos:end="77:53"><literal type="string" pos:start="77:45" pos:end="77:53">"rtl8139"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="79:5" pos:end="81:56">for <control pos:start="79:9" pos:end="79:33">(<init pos:start="79:10" pos:end="79:15"><expr pos:start="79:10" pos:end="79:14"><name pos:start="79:10" pos:end="79:10">i</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <literal type="number" pos:start="79:14" pos:end="79:14">1</literal></expr>;</init> <condition pos:start="79:17" pos:end="79:28"><expr pos:start="79:17" pos:end="79:27"><name pos:start="79:17" pos:end="79:17">i</name> <operator pos:start="79:19" pos:end="79:19">&lt;</operator> <name pos:start="79:21" pos:end="79:27">nb_nics</name></expr>;</condition> <incr pos:start="79:30" pos:end="79:32"><expr pos:start="79:30" pos:end="79:32"><name pos:start="79:30" pos:end="79:30">i</name><operator pos:start="79:31" pos:end="79:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="81:9" pos:end="81:56"><block_content pos:start="81:9" pos:end="81:56">

        <expr_stmt pos:start="81:9" pos:end="81:56"><expr pos:start="81:9" pos:end="81:55"><call pos:start="81:9" pos:end="81:55"><name pos:start="81:9" pos:end="81:20">pci_nic_init</name><argument_list pos:start="81:21" pos:end="81:55">(<argument pos:start="81:22" pos:end="81:24"><expr pos:start="81:22" pos:end="81:24"><name pos:start="81:22" pos:end="81:24">pci</name></expr></argument>, <argument pos:start="81:27" pos:end="81:38"><expr pos:start="81:27" pos:end="81:38"><operator pos:start="81:27" pos:end="81:27">&amp;</operator><name pos:start="81:28" pos:end="81:38"><name pos:start="81:28" pos:end="81:35">nd_table</name><index pos:start="81:36" pos:end="81:38">[<expr pos:start="81:37" pos:end="81:37"><name pos:start="81:37" pos:end="81:37">i</name></expr>]</index></name></expr></argument>, <argument pos:start="81:41" pos:end="81:42"><expr pos:start="81:41" pos:end="81:42"><operator pos:start="81:41" pos:end="81:41">-</operator><literal type="number" pos:start="81:42" pos:end="81:42">1</literal></expr></argument>, <argument pos:start="81:45" pos:end="81:54"><expr pos:start="81:45" pos:end="81:54"><literal type="string" pos:start="81:45" pos:end="81:54">"ne2k_pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="85:5" pos:end="85:43">/* Todo: register on board registers */</comment>

    <block pos:start="87:5" pos:end="115:5">{<block_content pos:start="89:7" pos:end="113:40">

      <decl_stmt pos:start="89:7" pos:end="89:22"><decl pos:start="89:7" pos:end="89:21"><type pos:start="89:7" pos:end="89:9"><name pos:start="89:7" pos:end="89:9">int</name></type> <name pos:start="89:11" pos:end="89:21">kernel_size</name></decl>;</decl_stmt>

      <comment type="block" pos:start="91:7" pos:end="91:59">/* initialization which should be done by firmware */</comment>

      <expr_stmt pos:start="93:7" pos:end="93:34"><expr pos:start="93:7" pos:end="93:33"><call pos:start="93:7" pos:end="93:33"><name pos:start="93:7" pos:end="93:14">stl_phys</name><argument_list pos:start="93:15" pos:end="93:33">(<argument pos:start="93:16" pos:end="93:26"><expr pos:start="93:16" pos:end="93:26"><name pos:start="93:16" pos:end="93:26">SH7750_BCR1</name></expr></argument>, <argument pos:start="93:29" pos:end="93:32"><expr pos:start="93:29" pos:end="93:32"><literal type="number" pos:start="93:29" pos:end="93:29">1</literal><operator pos:start="93:30" pos:end="93:31">&lt;&lt;</operator><literal type="number" pos:start="93:32" pos:end="93:32">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="93:36" pos:end="93:50">/* cs3 SDRAM */</comment>

      <expr_stmt pos:start="95:7" pos:end="95:38"><expr pos:start="95:7" pos:end="95:37"><call pos:start="95:7" pos:end="95:37"><name pos:start="95:7" pos:end="95:14">stw_phys</name><argument_list pos:start="95:15" pos:end="95:37">(<argument pos:start="95:16" pos:end="95:26"><expr pos:start="95:16" pos:end="95:26"><name pos:start="95:16" pos:end="95:26">SH7750_BCR2</name></expr></argument>, <argument pos:start="95:29" pos:end="95:36"><expr pos:start="95:29" pos:end="95:36"><literal type="number" pos:start="95:29" pos:end="95:29">3</literal><operator pos:start="95:30" pos:end="95:31">&lt;&lt;</operator><operator pos:start="95:32" pos:end="95:32">(</operator><literal type="number" pos:start="95:33" pos:end="95:33">3</literal><operator pos:start="95:34" pos:end="95:34">*</operator><literal type="number" pos:start="95:35" pos:end="95:35">2</literal><operator pos:start="95:36" pos:end="95:36">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="95:40" pos:end="95:54">/* cs3 32bit */</comment>



      <expr_stmt pos:start="99:7" pos:end="99:63"><expr pos:start="99:7" pos:end="99:62"><name pos:start="99:7" pos:end="99:17">kernel_size</name> <operator pos:start="99:19" pos:end="99:19">=</operator> <call pos:start="99:21" pos:end="99:62"><name pos:start="99:21" pos:end="99:30">load_image</name><argument_list pos:start="99:31" pos:end="99:62">(<argument pos:start="99:32" pos:end="99:46"><expr pos:start="99:32" pos:end="99:46"><name pos:start="99:32" pos:end="99:46">kernel_filename</name></expr></argument>, <argument pos:start="99:49" pos:end="99:61"><expr pos:start="99:49" pos:end="99:61"><name pos:start="99:49" pos:end="99:61">phys_ram_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



      <if_stmt pos:start="103:7" pos:end="109:7"><if pos:start="103:7" pos:end="109:7">if <condition pos:start="103:10" pos:end="103:26">(<expr pos:start="103:11" pos:end="103:25"><name pos:start="103:11" pos:end="103:21">kernel_size</name> <operator pos:start="103:23" pos:end="103:23">&lt;</operator> <literal type="number" pos:start="103:25" pos:end="103:25">0</literal></expr>)</condition> <block pos:start="103:28" pos:end="109:7">{<block_content pos:start="105:9" pos:end="107:16">

        <expr_stmt pos:start="105:9" pos:end="105:79"><expr pos:start="105:9" pos:end="105:78"><call pos:start="105:9" pos:end="105:78"><name pos:start="105:9" pos:end="105:15">fprintf</name><argument_list pos:start="105:16" pos:end="105:78">(<argument pos:start="105:17" pos:end="105:22"><expr pos:start="105:17" pos:end="105:22"><name pos:start="105:17" pos:end="105:22">stderr</name></expr></argument>, <argument pos:start="105:25" pos:end="105:60"><expr pos:start="105:25" pos:end="105:60"><literal type="string" pos:start="105:25" pos:end="105:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="105:63" pos:end="105:77"><expr pos:start="105:63" pos:end="105:77"><name pos:start="105:63" pos:end="105:77">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:16"><expr pos:start="107:9" pos:end="107:15"><call pos:start="107:9" pos:end="107:15"><name pos:start="107:9" pos:end="107:12">exit</name><argument_list pos:start="107:13" pos:end="107:15">(<argument pos:start="107:14" pos:end="107:14"><expr pos:start="107:14" pos:end="107:14"><literal type="number" pos:start="107:14" pos:end="107:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if></if_stmt>



      <expr_stmt pos:start="113:7" pos:end="113:40"><expr pos:start="113:7" pos:end="113:39"><name pos:start="113:7" pos:end="113:13"><name pos:start="113:7" pos:end="113:9">env</name><operator pos:start="113:10" pos:end="113:11">-&gt;</operator><name pos:start="113:12" pos:end="113:13">pc</name></name> <operator pos:start="113:15" pos:end="113:15">=</operator> <name pos:start="113:17" pos:end="113:26">SDRAM_BASE</name> <operator pos:start="113:28" pos:end="113:28">|</operator> <literal type="number" pos:start="113:30" pos:end="113:39">0xa0000000</literal></expr>;</expr_stmt> <comment type="block" pos:start="113:42" pos:end="113:65">/* Start from P2 area */</comment>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
