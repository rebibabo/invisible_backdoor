<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18678.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">qemu_opts_print</name><parameter_list pos:start="1:21" pos:end="1:59">(<parameter pos:start="1:22" pos:end="1:35"><decl pos:start="1:22" pos:end="1:35"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:29">QemuOpts</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:35">opts</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:58"><decl pos:start="1:38" pos:end="1:58"><type pos:start="1:38" pos:end="1:58"><specifier pos:start="1:38" pos:end="1:42">const</specifier> <name pos:start="1:44" pos:end="1:47">char</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:58">separator</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:5">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">QemuOpt</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">opt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">QemuOptDesc</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:21">desc</name> <init pos:start="7:23" pos:end="7:40">= <expr pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:28">opts</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:34">list</name><operator pos:start="7:35" pos:end="7:36">-&gt;</operator><name pos:start="7:37" pos:end="7:40">desc</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">sep</name> <init pos:start="9:21" pos:end="9:24">= <expr pos:start="9:23" pos:end="9:24"><literal type="string" pos:start="9:23" pos:end="9:24">""</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:17">(<expr pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:12">opts</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:16">id</name></name></expr>)</condition> <block pos:start="13:19" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:24">

        <expr_stmt pos:start="15:9" pos:end="15:34"><expr pos:start="15:9" pos:end="15:33"><call pos:start="15:9" pos:end="15:33"><name pos:start="15:9" pos:end="15:14">printf</name><argument_list pos:start="15:15" pos:end="15:33">(<argument pos:start="15:16" pos:end="15:22"><expr pos:start="15:16" pos:end="15:22"><literal type="string" pos:start="15:16" pos:end="15:22">"id=%s"</literal></expr></argument>, <argument pos:start="15:25" pos:end="15:32"><expr pos:start="15:25" pos:end="15:32"><name pos:start="15:25" pos:end="15:32"><name pos:start="15:25" pos:end="15:28">opts</name><operator pos:start="15:29" pos:end="15:30">-&gt;</operator><name pos:start="15:31" pos:end="15:32">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="15:36" pos:end="15:74">/* passed id_wellformed -&gt; no commas */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:24"><expr pos:start="17:9" pos:end="17:23"><name pos:start="17:9" pos:end="17:11">sep</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:23">separator</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="37:5"><if pos:start="23:5" pos:end="37:5">if <condition pos:start="23:8" pos:end="23:29">(<expr pos:start="23:9" pos:end="23:28"><name pos:start="23:9" pos:end="23:15"><name pos:start="23:9" pos:end="23:12">desc</name><index pos:start="23:13" pos:end="23:15">[<expr pos:start="23:14" pos:end="23:14"><literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>]</index></name><operator pos:start="23:16" pos:end="23:16">.</operator><name pos:start="23:17" pos:end="23:20">name</name> <operator pos:start="23:22" pos:end="23:23">==</operator> <name pos:start="23:25" pos:end="23:28">NULL</name></expr>)</condition> <block pos:start="23:31" pos:end="37:5">{<block_content pos:start="25:9" pos:end="35:15">

        <macro pos:start="25:9" pos:end="25:46"><name pos:start="25:9" pos:end="25:22">QTAILQ_FOREACH</name><argument_list pos:start="25:23" pos:end="25:46">(<argument pos:start="25:24" pos:end="25:26">opt</argument>, <argument pos:start="25:29" pos:end="25:39">&amp;opts-&gt;head</argument>, <argument pos:start="25:42" pos:end="25:45">next</argument>)</argument_list></macro> <block pos:start="25:48" pos:end="33:9">{<block_content pos:start="27:13" pos:end="31:28">

            <expr_stmt pos:start="27:13" pos:end="27:44"><expr pos:start="27:13" pos:end="27:43"><call pos:start="27:13" pos:end="27:43"><name pos:start="27:13" pos:end="27:18">printf</name><argument_list pos:start="27:19" pos:end="27:43">(<argument pos:start="27:20" pos:end="27:26"><expr pos:start="27:20" pos:end="27:26"><literal type="string" pos:start="27:20" pos:end="27:26">"%s%s="</literal></expr></argument>, <argument pos:start="27:29" pos:end="27:31"><expr pos:start="27:29" pos:end="27:31"><name pos:start="27:29" pos:end="27:31">sep</name></expr></argument>, <argument pos:start="27:34" pos:end="27:42"><expr pos:start="27:34" pos:end="27:42"><name pos:start="27:34" pos:end="27:42"><name pos:start="27:34" pos:end="27:36">opt</name><operator pos:start="27:37" pos:end="27:38">-&gt;</operator><name pos:start="27:39" pos:end="27:42">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:36"><expr pos:start="29:13" pos:end="29:35"><call pos:start="29:13" pos:end="29:35"><name pos:start="29:13" pos:end="29:25">escaped_print</name><argument_list pos:start="29:26" pos:end="29:35">(<argument pos:start="29:27" pos:end="29:34"><expr pos:start="29:27" pos:end="29:34"><name pos:start="29:27" pos:end="29:34"><name pos:start="29:27" pos:end="29:29">opt</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:34">str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:28"><expr pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:15">sep</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <name pos:start="31:19" pos:end="31:27">separator</name></expr>;</expr_stmt>

        </block_content>}</block>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <for pos:start="39:5" pos:end="75:5">for <control pos:start="39:9" pos:end="39:38">(<init pos:start="39:10" pos:end="39:10">;</init> <condition pos:start="39:12" pos:end="39:30"><expr pos:start="39:12" pos:end="39:29"><name pos:start="39:12" pos:end="39:15">desc</name> <operator pos:start="39:17" pos:end="39:18">&amp;&amp;</operator> <name pos:start="39:20" pos:end="39:29"><name pos:start="39:20" pos:end="39:23">desc</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:29">name</name></name></expr>;</condition> <incr pos:start="39:32" pos:end="39:37"><expr pos:start="39:32" pos:end="39:37"><name pos:start="39:32" pos:end="39:35">desc</name><operator pos:start="39:36" pos:end="39:37">++</operator></expr></incr>)</control> <block pos:start="39:40" pos:end="75:5">{<block_content pos:start="41:9" pos:end="73:24">

        <decl_stmt pos:start="41:9" pos:end="41:26"><decl pos:start="41:9" pos:end="41:25"><type pos:start="41:9" pos:end="41:20"><specifier pos:start="41:9" pos:end="41:13">const</specifier> <name pos:start="41:15" pos:end="41:18">char</name> <modifier pos:start="41:20" pos:end="41:20">*</modifier></type><name pos:start="41:21" pos:end="41:25">value</name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:55"><decl pos:start="43:9" pos:end="43:54"><type pos:start="43:9" pos:end="43:17"><name pos:start="43:9" pos:end="43:15">QemuOpt</name> <modifier pos:start="43:17" pos:end="43:17">*</modifier></type><name pos:start="43:18" pos:end="43:20">opt</name> <init pos:start="43:22" pos:end="43:54">= <expr pos:start="43:24" pos:end="43:54"><call pos:start="43:24" pos:end="43:54"><name pos:start="43:24" pos:end="43:36">qemu_opt_find</name><argument_list pos:start="43:37" pos:end="43:54">(<argument pos:start="43:38" pos:end="43:41"><expr pos:start="43:38" pos:end="43:41"><name pos:start="43:38" pos:end="43:41">opts</name></expr></argument>, <argument pos:start="43:44" pos:end="43:53"><expr pos:start="43:44" pos:end="43:53"><name pos:start="43:44" pos:end="43:53"><name pos:start="43:44" pos:end="43:47">desc</name><operator pos:start="43:48" pos:end="43:49">-&gt;</operator><name pos:start="43:50" pos:end="43:53">name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:53"><expr pos:start="47:9" pos:end="47:52"><name pos:start="47:9" pos:end="47:13">value</name> <operator pos:start="47:15" pos:end="47:15">=</operator> <ternary pos:start="47:17" pos:end="47:52"><condition pos:start="47:17" pos:end="47:21"><expr pos:start="47:17" pos:end="47:19"><name pos:start="47:17" pos:end="47:19">opt</name></expr> ?</condition><then pos:start="47:23" pos:end="47:30"> <expr pos:start="47:23" pos:end="47:30"><name pos:start="47:23" pos:end="47:30"><name pos:start="47:23" pos:end="47:25">opt</name><operator pos:start="47:26" pos:end="47:27">-&gt;</operator><name pos:start="47:28" pos:end="47:30">str</name></name></expr> </then><else pos:start="47:32" pos:end="47:52">: <expr pos:start="47:34" pos:end="47:52"><name pos:start="47:34" pos:end="47:52"><name pos:start="47:34" pos:end="47:37">desc</name><operator pos:start="47:38" pos:end="47:39">-&gt;</operator><name pos:start="47:40" pos:end="47:52">def_value_str</name></name></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:19">(<expr pos:start="49:13" pos:end="49:18"><operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:18">value</name></expr>)</condition> <block pos:start="49:21" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:21">

            <continue pos:start="51:13" pos:end="51:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="55:9" pos:end="71:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:42">(<expr pos:start="55:13" pos:end="55:41"><name pos:start="55:13" pos:end="55:22"><name pos:start="55:13" pos:end="55:16">desc</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:22">type</name></name> <operator pos:start="55:24" pos:end="55:25">==</operator> <name pos:start="55:27" pos:end="55:41">QEMU_OPT_STRING</name></expr>)</condition> <block pos:start="55:44" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:33">

            <expr_stmt pos:start="57:13" pos:end="57:45"><expr pos:start="57:13" pos:end="57:44"><call pos:start="57:13" pos:end="57:44"><name pos:start="57:13" pos:end="57:18">printf</name><argument_list pos:start="57:19" pos:end="57:44">(<argument pos:start="57:20" pos:end="57:26"><expr pos:start="57:20" pos:end="57:26"><literal type="string" pos:start="57:20" pos:end="57:26">"%s%s="</literal></expr></argument>, <argument pos:start="57:29" pos:end="57:31"><expr pos:start="57:29" pos:end="57:31"><name pos:start="57:29" pos:end="57:31">sep</name></expr></argument>, <argument pos:start="57:34" pos:end="57:43"><expr pos:start="57:34" pos:end="57:43"><name pos:start="57:34" pos:end="57:43"><name pos:start="57:34" pos:end="57:37">desc</name><operator pos:start="57:38" pos:end="57:39">-&gt;</operator><name pos:start="57:40" pos:end="57:43">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:33"><expr pos:start="59:13" pos:end="59:32"><call pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:25">escaped_print</name><argument_list pos:start="59:26" pos:end="59:32">(<argument pos:start="59:27" pos:end="59:31"><expr pos:start="59:27" pos:end="59:31"><name pos:start="59:27" pos:end="59:31">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="61:11" pos:end="67:9">else if <condition pos:start="61:19" pos:end="63:58">(<expr pos:start="61:20" pos:end="63:57"><operator pos:start="61:20" pos:end="61:20">(</operator><name pos:start="61:21" pos:end="61:30"><name pos:start="61:21" pos:end="61:24">desc</name><operator pos:start="61:25" pos:end="61:26">-&gt;</operator><name pos:start="61:27" pos:end="61:30">type</name></name> <operator pos:start="61:32" pos:end="61:33">==</operator> <name pos:start="61:35" pos:end="61:47">QEMU_OPT_SIZE</name> <operator pos:start="61:49" pos:end="61:50">||</operator>

                    <name pos:start="63:21" pos:end="63:30"><name pos:start="63:21" pos:end="63:24">desc</name><operator pos:start="63:25" pos:end="63:26">-&gt;</operator><name pos:start="63:27" pos:end="63:30">type</name></name> <operator pos:start="63:32" pos:end="63:33">==</operator> <name pos:start="63:35" pos:end="63:49">QEMU_OPT_NUMBER</name><operator pos:start="63:50" pos:end="63:50">)</operator> <operator pos:start="63:52" pos:end="63:53">&amp;&amp;</operator> <name pos:start="63:55" pos:end="63:57">opt</name></expr>)</condition> <block pos:start="63:60" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:70">

            <expr_stmt pos:start="65:13" pos:end="65:70"><expr pos:start="65:13" pos:end="65:69"><call pos:start="65:13" pos:end="65:69"><name pos:start="65:13" pos:end="65:18">printf</name><argument_list pos:start="65:19" pos:end="65:69">(<argument pos:start="65:20" pos:end="65:34"><expr pos:start="65:20" pos:end="65:34"><literal type="string" pos:start="65:20" pos:end="65:27">"%s%s=%"</literal> <name pos:start="65:29" pos:end="65:34">PRId64</name></expr></argument>, <argument pos:start="65:37" pos:end="65:39"><expr pos:start="65:37" pos:end="65:39"><name pos:start="65:37" pos:end="65:39">sep</name></expr></argument>, <argument pos:start="65:42" pos:end="65:51"><expr pos:start="65:42" pos:end="65:51"><name pos:start="65:42" pos:end="65:51"><name pos:start="65:42" pos:end="65:45">desc</name><operator pos:start="65:46" pos:end="65:47">-&gt;</operator><name pos:start="65:48" pos:end="65:51">name</name></name></expr></argument>, <argument pos:start="65:54" pos:end="65:68"><expr pos:start="65:54" pos:end="65:68"><name pos:start="65:54" pos:end="65:68"><name pos:start="65:54" pos:end="65:56">opt</name><operator pos:start="65:57" pos:end="65:58">-&gt;</operator><name pos:start="65:59" pos:end="65:63">value</name><operator pos:start="65:64" pos:end="65:64">.</operator><name pos:start="65:65" pos:end="65:68">uint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="67:11" pos:end="71:9">else <block pos:start="67:16" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:54">

            <expr_stmt pos:start="69:13" pos:end="69:54"><expr pos:start="69:13" pos:end="69:53"><call pos:start="69:13" pos:end="69:53"><name pos:start="69:13" pos:end="69:18">printf</name><argument_list pos:start="69:19" pos:end="69:53">(<argument pos:start="69:20" pos:end="69:28"><expr pos:start="69:20" pos:end="69:28"><literal type="string" pos:start="69:20" pos:end="69:28">"%s%s=%s"</literal></expr></argument>, <argument pos:start="69:31" pos:end="69:33"><expr pos:start="69:31" pos:end="69:33"><name pos:start="69:31" pos:end="69:33">sep</name></expr></argument>, <argument pos:start="69:36" pos:end="69:45"><expr pos:start="69:36" pos:end="69:45"><name pos:start="69:36" pos:end="69:45"><name pos:start="69:36" pos:end="69:39">desc</name><operator pos:start="69:40" pos:end="69:41">-&gt;</operator><name pos:start="69:42" pos:end="69:45">name</name></name></expr></argument>, <argument pos:start="69:48" pos:end="69:52"><expr pos:start="69:48" pos:end="69:52"><name pos:start="69:48" pos:end="69:52">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:24"><expr pos:start="73:9" pos:end="73:23"><name pos:start="73:9" pos:end="73:11">sep</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <name pos:start="73:15" pos:end="73:23">separator</name></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
