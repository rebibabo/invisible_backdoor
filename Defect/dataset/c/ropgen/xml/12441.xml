<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12441.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">tcg_prologue_init</name><parameter_list pos:start="1:23" pos:end="1:37">(<parameter pos:start="1:24" pos:end="1:36"><decl pos:start="1:24" pos:end="1:36"><type pos:start="1:24" pos:end="1:35"><name pos:start="1:24" pos:end="1:33">TCGContext</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:36">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="86:0">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">size_t</name></type> <name pos:start="5:12" pos:end="5:24">prologue_size</name></decl>, <decl pos:start="5:27" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:10"/><name pos:start="5:27" pos:end="5:36">total_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:14">buf0</name></decl>, <decl pos:start="7:17" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:21">buf1</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:64">/* Put the prologue at the beginning of code_gen_buffer.  */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:30"><expr pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:8">buf0</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <name pos:start="13:12" pos:end="13:29"><name pos:start="13:12" pos:end="13:12">s</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:29">code_gen_buffer</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:23"><expr pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:15">code_ptr</name></name> <operator pos:start="15:17" pos:end="15:17">=</operator> <name pos:start="15:19" pos:end="15:22">buf0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:23"><expr pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:15">code_buf</name></name> <operator pos:start="17:17" pos:end="17:17">=</operator> <name pos:start="17:19" pos:end="17:22">buf0</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:32"><expr pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:24">code_gen_prologue</name></name> <operator pos:start="19:26" pos:end="19:26">=</operator> <name pos:start="19:28" pos:end="19:31">buf0</name></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:33">/* Generate the prologue.  */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:32"><expr pos:start="25:5" pos:end="25:31"><call pos:start="25:5" pos:end="25:31"><name pos:start="25:5" pos:end="25:28">tcg_target_qemu_prologue</name><argument_list pos:start="25:29" pos:end="25:31">(<argument pos:start="25:30" pos:end="25:30"><expr pos:start="25:30" pos:end="25:30"><name pos:start="25:30" pos:end="25:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:23"><expr pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:8">buf1</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <name pos:start="27:12" pos:end="27:22"><name pos:start="27:12" pos:end="27:12">s</name><operator pos:start="27:13" pos:end="27:14">-&gt;</operator><name pos:start="27:15" pos:end="27:22">code_ptr</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:57"><expr pos:start="29:5" pos:end="29:56"><call pos:start="29:5" pos:end="29:56"><name pos:start="29:5" pos:end="29:22">flush_icache_range</name><argument_list pos:start="29:23" pos:end="29:56">(<argument pos:start="29:24" pos:end="29:38"><expr pos:start="29:24" pos:end="29:38"><operator pos:start="29:24" pos:end="29:24">(</operator><name pos:start="29:25" pos:end="29:33">uintptr_t</name><operator pos:start="29:34" pos:end="29:34">)</operator><name pos:start="29:35" pos:end="29:38">buf0</name></expr></argument>, <argument pos:start="29:41" pos:end="29:55"><expr pos:start="29:41" pos:end="29:55"><operator pos:start="29:41" pos:end="29:41">(</operator><name pos:start="29:42" pos:end="29:50">uintptr_t</name><operator pos:start="29:51" pos:end="29:51">)</operator><name pos:start="29:52" pos:end="29:55">buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:47">/* Deduct the prologue from the buffer.  */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:45"><expr pos:start="35:5" pos:end="35:44"><name pos:start="35:5" pos:end="35:17">prologue_size</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <call pos:start="35:21" pos:end="35:44"><name pos:start="35:21" pos:end="35:41">tcg_current_code_size</name><argument_list pos:start="35:42" pos:end="35:44">(<argument pos:start="35:43" pos:end="35:43"><expr pos:start="35:43" pos:end="35:43"><name pos:start="35:43" pos:end="35:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:27"><expr pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:19"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:19">code_gen_ptr</name></name> <operator pos:start="37:21" pos:end="37:21">=</operator> <name pos:start="37:23" pos:end="37:26">buf1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:22"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:22">code_gen_buffer</name></name> <operator pos:start="39:24" pos:end="39:24">=</operator> <name pos:start="39:26" pos:end="39:29">buf1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:23"><expr pos:start="41:5" pos:end="41:22"><name pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:15">code_buf</name></name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:22">buf1</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:57"><expr pos:start="43:5" pos:end="43:56"><name pos:start="43:5" pos:end="43:14">total_size</name> <operator pos:start="43:16" pos:end="43:16">=</operator> <name pos:start="43:18" pos:end="43:40"><name pos:start="43:18" pos:end="43:18">s</name><operator pos:start="43:19" pos:end="43:20">-&gt;</operator><name pos:start="43:21" pos:end="43:40">code_gen_buffer_size</name></name> <operator pos:start="43:42" pos:end="43:42">-</operator> <name pos:start="43:44" pos:end="43:56">prologue_size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:41"><expr pos:start="45:5" pos:end="45:40"><name pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:5">s</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:27">code_gen_buffer_size</name></name> <operator pos:start="45:29" pos:end="45:29">=</operator> <name pos:start="45:31" pos:end="45:40">total_size</name></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="53:76">/* Compute a high-water mark, at which we voluntarily flush the buffer

       and start over.  The size here is arbitrary, significantly larger

       than we expect the code generation for any one opcode to require.  */</comment>

    <comment type="block" pos:start="55:5" pos:end="61:53">/* ??? We currently have no good estimate for, or checks in,

       tcg_out_tb_finalize.  If there are quite a lot of guest memory ops,

       the number of out-of-line fragments could be quite high.  In the

       short-term, increase the highwater buffer.  */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:72"><expr pos:start="63:5" pos:end="63:71"><name pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:5">s</name><operator pos:start="63:6" pos:end="63:7">-&gt;</operator><name pos:start="63:8" pos:end="63:25">code_gen_highwater</name></name> <operator pos:start="63:27" pos:end="63:27">=</operator> <name pos:start="63:29" pos:end="63:46"><name pos:start="63:29" pos:end="63:29">s</name><operator pos:start="63:30" pos:end="63:31">-&gt;</operator><name pos:start="63:32" pos:end="63:46">code_gen_buffer</name></name> <operator pos:start="63:48" pos:end="63:48">+</operator> <operator pos:start="63:50" pos:end="63:50">(</operator><name pos:start="63:51" pos:end="63:60">total_size</name> <operator pos:start="63:62" pos:end="63:62">-</operator> <literal type="number" pos:start="63:64" pos:end="63:65">64</literal><operator pos:start="63:66" pos:end="63:66">*</operator><literal type="number" pos:start="63:67" pos:end="63:70">1024</literal><operator pos:start="63:71" pos:end="63:71">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="72:0"><expr pos:start="67:5" pos:end="67:52"><call pos:start="67:5" pos:end="67:52"><name pos:start="67:5" pos:end="67:20">tcg_register_jit</name><argument_list pos:start="67:21" pos:end="67:52">(<argument pos:start="67:22" pos:end="67:39"><expr pos:start="67:22" pos:end="67:39"><name pos:start="67:22" pos:end="67:39"><name pos:start="67:22" pos:end="67:22">s</name><operator pos:start="67:23" pos:end="67:24">-&gt;</operator><name pos:start="67:25" pos:end="67:39">code_gen_buffer</name></name></expr></argument>, <argument pos:start="67:42" pos:end="67:51"><expr pos:start="67:42" pos:end="67:51"><name pos:start="67:42" pos:end="67:51">total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="71:1" pos:end="71:18">#<cpp:directive pos:start="71:2" pos:end="71:6">ifdef</cpp:directive> <name pos:start="71:8" pos:end="71:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="73:5" pos:end="86:0"><if pos:start="73:5" pos:end="86:0">if <condition pos:start="73:8" pos:end="73:47">(<expr pos:start="73:9" pos:end="73:46"><call pos:start="73:9" pos:end="73:46"><name pos:start="73:9" pos:end="73:26">qemu_loglevel_mask</name><argument_list pos:start="73:27" pos:end="73:46">(<argument pos:start="73:28" pos:end="73:45"><expr pos:start="73:28" pos:end="73:45"><name pos:start="73:28" pos:end="73:45">CPU_LOG_TB_OUT_ASM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="73:49" pos:end="86:0">{<block_content pos:start="75:9" pos:end="81:25">

        <expr_stmt pos:start="75:9" pos:end="75:58"><expr pos:start="75:9" pos:end="75:57"><call pos:start="75:9" pos:end="75:57"><name pos:start="75:9" pos:end="75:16">qemu_log</name><argument_list pos:start="75:17" pos:end="75:57">(<argument pos:start="75:18" pos:end="75:41"><expr pos:start="75:18" pos:end="75:41"><literal type="string" pos:start="75:18" pos:end="75:41">"PROLOGUE: [size=%zu]\n"</literal></expr></argument>, <argument pos:start="75:44" pos:end="75:56"><expr pos:start="75:44" pos:end="75:56"><name pos:start="75:44" pos:end="75:56">prologue_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:39"><expr pos:start="77:9" pos:end="77:38"><call pos:start="77:9" pos:end="77:38"><name pos:start="77:9" pos:end="77:17">log_disas</name><argument_list pos:start="77:18" pos:end="77:38">(<argument pos:start="77:19" pos:end="77:22"><expr pos:start="77:19" pos:end="77:22"><name pos:start="77:19" pos:end="77:22">buf0</name></expr></argument>, <argument pos:start="77:25" pos:end="77:37"><expr pos:start="77:25" pos:end="77:37"><name pos:start="77:25" pos:end="77:37">prologue_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:23"><expr pos:start="79:9" pos:end="79:22"><call pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:16">qemu_log</name><argument_list pos:start="79:17" pos:end="79:22">(<argument pos:start="79:18" pos:end="79:21"><expr pos:start="79:18" pos:end="79:21"><literal type="string" pos:start="79:18" pos:end="79:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:25"><expr pos:start="81:9" pos:end="81:24"><call pos:start="81:9" pos:end="81:24"><name pos:start="81:9" pos:end="81:22">qemu_log_flush</name><argument_list pos:start="81:23" pos:end="81:24">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="85:1" pos:end="85:6">#<cpp:directive pos:start="85:2" pos:end="85:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
