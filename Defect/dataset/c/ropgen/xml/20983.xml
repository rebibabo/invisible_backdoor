<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20983.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">nbd_co_send_reply</name><parameter_list pos:start="1:29" pos:end="3:37">(<parameter pos:start="1:30" pos:end="1:44"><decl pos:start="1:30" pos:end="1:44"><type pos:start="1:30" pos:end="1:44"><name pos:start="1:30" pos:end="1:39">NBDRequest</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">req</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:69"><decl pos:start="1:47" pos:end="1:69"><type pos:start="1:47" pos:end="1:69"><name pos:start="1:47" pos:end="1:62"><name pos:start="1:47" pos:end="1:52">struct</name> <name pos:start="1:54" pos:end="1:62">nbd_reply</name></name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:69">reply</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:36"><decl pos:start="3:30" pos:end="3:36"><type pos:start="3:30" pos:end="3:36"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:36">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="73:1">{<block_content pos:start="7:5" pos:end="71:14">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">NBDClient</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:21">client</name> <init pos:start="7:23" pos:end="7:35">= <expr pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:27">req</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:35">client</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:28"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">csock</name> <init pos:start="9:15" pos:end="9:28">= <expr pos:start="9:17" pos:end="9:28"><name pos:start="9:17" pos:end="9:28"><name pos:start="9:17" pos:end="9:22">client</name><operator pos:start="9:23" pos:end="9:24">-&gt;</operator><name pos:start="9:25" pos:end="9:28">sock</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">rc</name></decl>, <decl pos:start="11:13" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:15">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:43"><expr pos:start="15:5" pos:end="15:42"><call pos:start="15:5" pos:end="15:42"><name pos:start="15:5" pos:end="15:22">qemu_co_mutex_lock</name><argument_list pos:start="15:23" pos:end="15:42">(<argument pos:start="15:24" pos:end="15:41"><expr pos:start="15:24" pos:end="15:41"><operator pos:start="15:24" pos:end="15:24">&amp;</operator><name pos:start="15:25" pos:end="15:41"><name pos:start="15:25" pos:end="15:30">client</name><operator pos:start="15:31" pos:end="15:32">-&gt;</operator><name pos:start="15:33" pos:end="15:41">send_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:75"><expr pos:start="17:5" pos:end="17:74"><call pos:start="17:5" pos:end="17:74"><name pos:start="17:5" pos:end="17:24">qemu_set_fd_handler2</name><argument_list pos:start="17:25" pos:end="17:74">(<argument pos:start="17:26" pos:end="17:30"><expr pos:start="17:26" pos:end="17:30"><name pos:start="17:26" pos:end="17:30">csock</name></expr></argument>, <argument pos:start="17:33" pos:end="17:36"><expr pos:start="17:33" pos:end="17:36"><name pos:start="17:33" pos:end="17:36">NULL</name></expr></argument>, <argument pos:start="17:39" pos:end="17:46"><expr pos:start="17:39" pos:end="17:46"><name pos:start="17:39" pos:end="17:46">nbd_read</name></expr></argument>, <argument pos:start="17:49" pos:end="17:65"><expr pos:start="17:49" pos:end="17:65"><name pos:start="17:49" pos:end="17:65">nbd_restart_write</name></expr></argument>, <argument pos:start="17:68" pos:end="17:73"><expr pos:start="17:68" pos:end="17:73"><name pos:start="17:68" pos:end="17:73">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:51"><expr pos:start="19:5" pos:end="19:50"><name pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:10">client</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:26">send_coroutine</name></name> <operator pos:start="19:28" pos:end="19:28">=</operator> <call pos:start="19:30" pos:end="19:50"><name pos:start="19:30" pos:end="19:48">qemu_coroutine_self</name><argument_list pos:start="19:49" pos:end="19:50">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="61:5"><if pos:start="23:5" pos:end="33:5">if <condition pos:start="23:8" pos:end="23:13">(<expr pos:start="23:9" pos:end="23:12"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:12">len</name></expr>)</condition> <block pos:start="23:15" pos:end="33:5">{<block_content pos:start="25:9" pos:end="31:9">

        <expr_stmt pos:start="25:9" pos:end="25:42"><expr pos:start="25:9" pos:end="25:41"><name pos:start="25:9" pos:end="25:10">rc</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="25:41"><name pos:start="25:14" pos:end="25:27">nbd_send_reply</name><argument_list pos:start="25:28" pos:end="25:41">(<argument pos:start="25:29" pos:end="25:33"><expr pos:start="25:29" pos:end="25:33"><name pos:start="25:29" pos:end="25:33">csock</name></expr></argument>, <argument pos:start="25:36" pos:end="25:40"><expr pos:start="25:36" pos:end="25:40"><name pos:start="25:36" pos:end="25:40">reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="31:9"><if pos:start="27:9" pos:end="31:9">if <condition pos:start="27:12" pos:end="27:21">(<expr pos:start="27:13" pos:end="27:20"><name pos:start="27:13" pos:end="27:14">rc</name> <operator pos:start="27:16" pos:end="27:17">==</operator> <operator pos:start="27:19" pos:end="27:19">-</operator><literal type="number" pos:start="27:20" pos:end="27:20">1</literal></expr>)</condition> <block pos:start="27:23" pos:end="31:9">{<block_content pos:start="29:13" pos:end="29:24">

            <expr_stmt pos:start="29:13" pos:end="29:24"><expr pos:start="29:13" pos:end="29:23"><name pos:start="29:13" pos:end="29:14">rc</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <operator pos:start="29:18" pos:end="29:18">-</operator><name pos:start="29:19" pos:end="29:23">errno</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="61:5">else <block pos:start="33:12" pos:end="61:5">{<block_content pos:start="35:9" pos:end="59:34">

        <expr_stmt pos:start="35:9" pos:end="35:34"><expr pos:start="35:9" pos:end="35:33"><call pos:start="35:9" pos:end="35:33"><name pos:start="35:9" pos:end="35:23">socket_set_cork</name><argument_list pos:start="35:24" pos:end="35:33">(<argument pos:start="35:25" pos:end="35:29"><expr pos:start="35:25" pos:end="35:29"><name pos:start="35:25" pos:end="35:29">csock</name></expr></argument>, <argument pos:start="35:32" pos:end="35:32"><expr pos:start="35:32" pos:end="35:32"><literal type="number" pos:start="35:32" pos:end="35:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:42"><expr pos:start="37:9" pos:end="37:41"><name pos:start="37:9" pos:end="37:10">rc</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:41"><name pos:start="37:14" pos:end="37:27">nbd_send_reply</name><argument_list pos:start="37:28" pos:end="37:41">(<argument pos:start="37:29" pos:end="37:33"><expr pos:start="37:29" pos:end="37:33"><name pos:start="37:29" pos:end="37:33">csock</name></expr></argument>, <argument pos:start="37:36" pos:end="37:40"><expr pos:start="37:36" pos:end="37:40"><name pos:start="37:36" pos:end="37:40">reply</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="39:9" pos:end="51:9"><if pos:start="39:9" pos:end="51:9">if <condition pos:start="39:12" pos:end="39:21">(<expr pos:start="39:13" pos:end="39:20"><name pos:start="39:13" pos:end="39:14">rc</name> <operator pos:start="39:16" pos:end="39:17">!=</operator> <operator pos:start="39:19" pos:end="39:19">-</operator><literal type="number" pos:start="39:20" pos:end="39:20">1</literal></expr>)</condition> <block pos:start="39:23" pos:end="51:9">{<block_content pos:start="41:13" pos:end="49:13">

            <expr_stmt pos:start="41:13" pos:end="41:54"><expr pos:start="41:13" pos:end="41:53"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:53"><name pos:start="41:19" pos:end="41:30">qemu_co_send</name><argument_list pos:start="41:31" pos:end="41:53">(<argument pos:start="41:32" pos:end="41:36"><expr pos:start="41:32" pos:end="41:36"><name pos:start="41:32" pos:end="41:36">csock</name></expr></argument>, <argument pos:start="41:39" pos:end="41:47"><expr pos:start="41:39" pos:end="41:47"><name pos:start="41:39" pos:end="41:47"><name pos:start="41:39" pos:end="41:41">req</name><operator pos:start="41:42" pos:end="41:43">-&gt;</operator><name pos:start="41:44" pos:end="41:47">data</name></name></expr></argument>, <argument pos:start="41:50" pos:end="41:52"><expr pos:start="41:50" pos:end="41:52"><name pos:start="41:50" pos:end="41:52">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="49:13"><if pos:start="43:13" pos:end="49:13">if <condition pos:start="43:16" pos:end="43:27">(<expr pos:start="43:17" pos:end="43:26"><name pos:start="43:17" pos:end="43:19">ret</name> <operator pos:start="43:21" pos:end="43:22">!=</operator> <name pos:start="43:24" pos:end="43:26">len</name></expr>)</condition> <block pos:start="43:29" pos:end="49:13">{<block_content pos:start="45:17" pos:end="47:24">

                <expr_stmt pos:start="45:17" pos:end="45:28"><expr pos:start="45:17" pos:end="45:27"><name pos:start="45:17" pos:end="45:21">errno</name> <operator pos:start="45:23" pos:end="45:23">=</operator> <name pos:start="45:25" pos:end="45:27">EIO</name></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:24"><expr pos:start="47:17" pos:end="47:23"><name pos:start="47:17" pos:end="47:18">rc</name> <operator pos:start="47:20" pos:end="47:20">=</operator> <operator pos:start="47:22" pos:end="47:22">-</operator><literal type="number" pos:start="47:23" pos:end="47:23">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="53:9" pos:end="57:9"><if pos:start="53:9" pos:end="57:9">if <condition pos:start="53:12" pos:end="53:21">(<expr pos:start="53:13" pos:end="53:20"><name pos:start="53:13" pos:end="53:14">rc</name> <operator pos:start="53:16" pos:end="53:17">==</operator> <operator pos:start="53:19" pos:end="53:19">-</operator><literal type="number" pos:start="53:20" pos:end="53:20">1</literal></expr>)</condition> <block pos:start="53:23" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:24">

            <expr_stmt pos:start="55:13" pos:end="55:24"><expr pos:start="55:13" pos:end="55:23"><name pos:start="55:13" pos:end="55:14">rc</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <operator pos:start="55:18" pos:end="55:18">-</operator><name pos:start="55:19" pos:end="55:23">errno</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><call pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:23">socket_set_cork</name><argument_list pos:start="59:24" pos:end="59:33">(<argument pos:start="59:25" pos:end="59:29"><expr pos:start="59:25" pos:end="59:29"><name pos:start="59:25" pos:end="59:29">csock</name></expr></argument>, <argument pos:start="59:32" pos:end="59:32"><expr pos:start="59:32" pos:end="59:32"><literal type="number" pos:start="59:32" pos:end="59:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:34"><expr pos:start="65:5" pos:end="65:33"><name pos:start="65:5" pos:end="65:26"><name pos:start="65:5" pos:end="65:10">client</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:26">send_coroutine</name></name> <operator pos:start="65:28" pos:end="65:28">=</operator> <name pos:start="65:30" pos:end="65:33">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:62"><expr pos:start="67:5" pos:end="67:61"><call pos:start="67:5" pos:end="67:61"><name pos:start="67:5" pos:end="67:24">qemu_set_fd_handler2</name><argument_list pos:start="67:25" pos:end="67:61">(<argument pos:start="67:26" pos:end="67:30"><expr pos:start="67:26" pos:end="67:30"><name pos:start="67:26" pos:end="67:30">csock</name></expr></argument>, <argument pos:start="67:33" pos:end="67:36"><expr pos:start="67:33" pos:end="67:36"><name pos:start="67:33" pos:end="67:36">NULL</name></expr></argument>, <argument pos:start="67:39" pos:end="67:46"><expr pos:start="67:39" pos:end="67:46"><name pos:start="67:39" pos:end="67:46">nbd_read</name></expr></argument>, <argument pos:start="67:49" pos:end="67:52"><expr pos:start="67:49" pos:end="67:52"><name pos:start="67:49" pos:end="67:52">NULL</name></expr></argument>, <argument pos:start="67:55" pos:end="67:60"><expr pos:start="67:55" pos:end="67:60"><name pos:start="67:55" pos:end="67:60">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:45"><expr pos:start="69:5" pos:end="69:44"><call pos:start="69:5" pos:end="69:44"><name pos:start="69:5" pos:end="69:24">qemu_co_mutex_unlock</name><argument_list pos:start="69:25" pos:end="69:44">(<argument pos:start="69:26" pos:end="69:43"><expr pos:start="69:26" pos:end="69:43"><operator pos:start="69:26" pos:end="69:26">&amp;</operator><name pos:start="69:27" pos:end="69:43"><name pos:start="69:27" pos:end="69:32">client</name><operator pos:start="69:33" pos:end="69:34">-&gt;</operator><name pos:start="69:35" pos:end="69:43">send_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="71:5" pos:end="71:14">return <expr pos:start="71:12" pos:end="71:13"><name pos:start="71:12" pos:end="71:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
