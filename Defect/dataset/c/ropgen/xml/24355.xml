<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24355.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:53"><name pos:start="1:1" pos:end="1:30">ivshmem_server_handle_new_conn</name><argument_list pos:start="1:31" pos:end="1:53">(<argument pos:start="1:32" pos:end="1:52">IvshmemServer *server</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="179:1">{<block_content pos:start="5:5" pos:end="177:14">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:21">IvshmemServerPeer</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:27">peer</name></decl>, <decl pos:start="5:30" pos:end="5:40"><type ref="prev" pos:start="5:5" pos:end="5:23"><modifier pos:start="5:30" pos:end="5:30">*</modifier></type><name pos:start="5:31" pos:end="5:40">other_peer</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:29"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:22">sockaddr_un</name></name></type> <name pos:start="7:24" pos:end="7:29">unaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">socklen_t</name></type> <name pos:start="9:15" pos:end="9:24">unaddr_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:13">newfd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type> <name pos:start="13:14" pos:end="13:14">i</name></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:40">/* accept the incoming connection */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:32"><expr pos:start="19:5" pos:end="19:31"><name pos:start="19:5" pos:end="19:14">unaddr_len</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <sizeof pos:start="19:18" pos:end="19:31">sizeof<argument_list pos:start="19:24" pos:end="19:31">(<argument pos:start="19:25" pos:end="19:30"><expr pos:start="19:25" pos:end="19:30"><name pos:start="19:25" pos:end="19:30">unaddr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="23:65"><expr pos:start="21:5" pos:end="23:64"><name pos:start="21:5" pos:end="21:9">newfd</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <call pos:start="21:13" pos:end="23:64"><name pos:start="21:13" pos:end="21:23">qemu_accept</name><argument_list pos:start="21:24" pos:end="23:64">(<argument pos:start="21:25" pos:end="21:39"><expr pos:start="21:25" pos:end="21:39"><name pos:start="21:25" pos:end="21:39"><name pos:start="21:25" pos:end="21:30">server</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:39">sock_fd</name></name></expr></argument>,

                        <argument pos:start="23:25" pos:end="23:50"><expr pos:start="23:25" pos:end="23:50"><operator pos:start="23:25" pos:end="23:25">(</operator>struct <name pos:start="23:33" pos:end="23:40">sockaddr</name> <operator pos:start="23:42" pos:end="23:42">*</operator><operator pos:start="23:43" pos:end="23:43">)</operator><operator pos:start="23:44" pos:end="23:44">&amp;</operator><name pos:start="23:45" pos:end="23:50">unaddr</name></expr></argument>, <argument pos:start="23:53" pos:end="23:63"><expr pos:start="23:53" pos:end="23:63"><operator pos:start="23:53" pos:end="23:53">&amp;</operator><name pos:start="23:54" pos:end="23:63">unaddr_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:18">(<expr pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:13">newfd</name> <operator pos:start="27:15" pos:end="27:15">&lt;</operator> <literal type="number" pos:start="27:17" pos:end="27:17">0</literal></expr>)</condition> <block pos:start="27:20" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:18">

        <expr_stmt pos:start="29:9" pos:end="29:78"><expr pos:start="29:9" pos:end="29:77"><call pos:start="29:9" pos:end="29:77"><name pos:start="29:9" pos:end="29:28">IVSHMEM_SERVER_DEBUG</name><argument_list pos:start="29:29" pos:end="29:77">(<argument pos:start="29:30" pos:end="29:35"><expr pos:start="29:30" pos:end="29:35"><name pos:start="29:30" pos:end="29:35">server</name></expr></argument>, <argument pos:start="29:38" pos:end="29:59"><expr pos:start="29:38" pos:end="29:59"><literal type="string" pos:start="29:38" pos:end="29:59">"cannot accept() %s\n"</literal></expr></argument>, <argument pos:start="29:62" pos:end="29:76"><expr pos:start="29:62" pos:end="29:76"><call pos:start="29:62" pos:end="29:76"><name pos:start="29:62" pos:end="29:69">strerror</name><argument_list pos:start="29:70" pos:end="29:76">(<argument pos:start="29:71" pos:end="29:75"><expr pos:start="29:71" pos:end="29:75"><name pos:start="29:71" pos:end="29:75">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:18">return <expr pos:start="31:16" pos:end="31:17"><operator pos:start="31:16" pos:end="31:16">-</operator><literal type="number" pos:start="31:17" pos:end="31:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><call pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:21">qemu_set_nonblock</name><argument_list pos:start="37:22" pos:end="37:28">(<argument pos:start="37:23" pos:end="37:27"><expr pos:start="37:23" pos:end="37:27"><name pos:start="37:23" pos:end="37:27">newfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:57"><expr pos:start="39:5" pos:end="39:56"><call pos:start="39:5" pos:end="39:56"><name pos:start="39:5" pos:end="39:24">IVSHMEM_SERVER_DEBUG</name><argument_list pos:start="39:25" pos:end="39:56">(<argument pos:start="39:26" pos:end="39:31"><expr pos:start="39:26" pos:end="39:31"><name pos:start="39:26" pos:end="39:31">server</name></expr></argument>, <argument pos:start="39:34" pos:end="39:48"><expr pos:start="39:34" pos:end="39:48"><literal type="string" pos:start="39:34" pos:end="39:48">"accept()=%d\n"</literal></expr></argument>, <argument pos:start="39:51" pos:end="39:55"><expr pos:start="39:51" pos:end="39:55"><name pos:start="39:51" pos:end="39:55">newfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:46">/* allocate new structure for this peer */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:36"><expr pos:start="45:5" pos:end="45:35"><name pos:start="45:5" pos:end="45:8">peer</name> <operator pos:start="45:10" pos:end="45:10">=</operator> <call pos:start="45:12" pos:end="45:35"><name pos:start="45:12" pos:end="45:20">g_malloc0</name><argument_list pos:start="45:21" pos:end="45:35">(<argument pos:start="45:22" pos:end="45:34"><expr pos:start="45:22" pos:end="45:34"><sizeof pos:start="45:22" pos:end="45:34">sizeof<argument_list pos:start="45:28" pos:end="45:34">(<argument pos:start="45:29" pos:end="45:33"><expr pos:start="45:29" pos:end="45:33"><operator pos:start="45:29" pos:end="45:29">*</operator><name pos:start="45:30" pos:end="45:33">peer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:26"><expr pos:start="47:5" pos:end="47:25"><name pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:8">peer</name><operator pos:start="47:9" pos:end="47:10">-&gt;</operator><name pos:start="47:11" pos:end="47:17">sock_fd</name></name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:25">newfd</name></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:31">/* get an unused peer id */</comment>

    <comment type="block" pos:start="53:5" pos:end="55:21">/* XXX: this could use id allocation such as Linux IDA, or simply

     * a free-list */</comment>

    <for pos:start="57:5" pos:end="67:5">for <control pos:start="57:9" pos:end="57:37">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:32"><expr pos:start="57:17" pos:end="57:31"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:31">G_MAXUINT16</name></expr>;</condition> <incr pos:start="57:34" pos:end="57:36"><expr pos:start="57:34" pos:end="57:36"><name pos:start="57:34" pos:end="57:34">i</name><operator pos:start="57:35" pos:end="57:36">++</operator></expr></incr>)</control> <block pos:start="57:39" pos:end="67:5">{<block_content pos:start="59:9" pos:end="65:25">

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:71">(<expr pos:start="59:13" pos:end="59:70"><call pos:start="59:13" pos:end="59:62"><name pos:start="59:13" pos:end="59:38">ivshmem_server_search_peer</name><argument_list pos:start="59:39" pos:end="59:62">(<argument pos:start="59:40" pos:end="59:45"><expr pos:start="59:40" pos:end="59:45"><name pos:start="59:40" pos:end="59:45">server</name></expr></argument>, <argument pos:start="59:48" pos:end="59:61"><expr pos:start="59:48" pos:end="59:61"><name pos:start="59:48" pos:end="59:61"><name pos:start="59:48" pos:end="59:53">server</name><operator pos:start="59:54" pos:end="59:55">-&gt;</operator><name pos:start="59:56" pos:end="59:61">cur_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="59:64" pos:end="59:65">==</operator> <name pos:start="59:67" pos:end="59:70">NULL</name></expr>)</condition> <block pos:start="59:73" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:18">

            <break pos:start="61:13" pos:end="61:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:25"><expr pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:14">server</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:22">cur_id</name></name><operator pos:start="65:23" pos:end="65:24">++</operator></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:25">(<expr pos:start="69:9" pos:end="69:24"><name pos:start="69:9" pos:end="69:9">i</name> <operator pos:start="69:11" pos:end="69:12">==</operator> <name pos:start="69:14" pos:end="69:24">G_MAXUINT16</name></expr>)</condition> <block pos:start="69:27" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:18">

        <expr_stmt pos:start="71:9" pos:end="71:72"><expr pos:start="71:9" pos:end="71:71"><call pos:start="71:9" pos:end="71:71"><name pos:start="71:9" pos:end="71:28">IVSHMEM_SERVER_DEBUG</name><argument_list pos:start="71:29" pos:end="71:71">(<argument pos:start="71:30" pos:end="71:35"><expr pos:start="71:30" pos:end="71:35"><name pos:start="71:30" pos:end="71:35">server</name></expr></argument>, <argument pos:start="71:38" pos:end="71:70"><expr pos:start="71:38" pos:end="71:70"><literal type="string" pos:start="71:38" pos:end="71:70">"cannot allocate new client id\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:18">goto <name pos:start="73:14" pos:end="73:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:32"><expr pos:start="77:5" pos:end="77:31"><name pos:start="77:5" pos:end="77:12"><name pos:start="77:5" pos:end="77:8">peer</name><operator pos:start="77:9" pos:end="77:10">-&gt;</operator><name pos:start="77:11" pos:end="77:12">id</name></name> <operator pos:start="77:14" pos:end="77:14">=</operator> <name pos:start="77:16" pos:end="77:29"><name pos:start="77:16" pos:end="77:21">server</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:29">cur_id</name></name><operator pos:start="77:30" pos:end="77:31">++</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="81:5" pos:end="81:40">/* create eventfd, one per vector */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:44"><expr pos:start="83:5" pos:end="83:43"><name pos:start="83:5" pos:end="83:23"><name pos:start="83:5" pos:end="83:8">peer</name><operator pos:start="83:9" pos:end="83:10">-&gt;</operator><name pos:start="83:11" pos:end="83:23">vectors_count</name></name> <operator pos:start="83:25" pos:end="83:25">=</operator> <name pos:start="83:27" pos:end="83:43"><name pos:start="83:27" pos:end="83:32">server</name><operator pos:start="83:33" pos:end="83:34">-&gt;</operator><name pos:start="83:35" pos:end="83:43">n_vectors</name></name></expr>;</expr_stmt>

    <for pos:start="85:5" pos:end="95:5">for <control pos:start="85:9" pos:end="85:45">(<init pos:start="85:10" pos:end="85:15"><expr pos:start="85:10" pos:end="85:14"><name pos:start="85:10" pos:end="85:10">i</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>;</init> <condition pos:start="85:17" pos:end="85:40"><expr pos:start="85:17" pos:end="85:39"><name pos:start="85:17" pos:end="85:17">i</name> <operator pos:start="85:19" pos:end="85:19">&lt;</operator> <name pos:start="85:21" pos:end="85:39"><name pos:start="85:21" pos:end="85:24">peer</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:39">vectors_count</name></name></expr>;</condition> <incr pos:start="85:42" pos:end="85:44"><expr pos:start="85:42" pos:end="85:44"><name pos:start="85:42" pos:end="85:42">i</name><operator pos:start="85:43" pos:end="85:44">++</operator></expr></incr>)</control> <block pos:start="85:47" pos:end="95:5">{<block_content pos:start="87:9" pos:end="93:9">

        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:62">(<expr pos:start="87:13" pos:end="87:61"><call pos:start="87:13" pos:end="87:57"><name pos:start="87:13" pos:end="87:31">event_notifier_init</name><argument_list pos:start="87:32" pos:end="87:57">(<argument pos:start="87:33" pos:end="87:49"><expr pos:start="87:33" pos:end="87:49"><operator pos:start="87:33" pos:end="87:33">&amp;</operator><name pos:start="87:34" pos:end="87:49"><name pos:start="87:34" pos:end="87:37">peer</name><operator pos:start="87:38" pos:end="87:39">-&gt;</operator><name pos:start="87:40" pos:end="87:46">vectors</name><index pos:start="87:47" pos:end="87:49">[<expr pos:start="87:48" pos:end="87:48"><name pos:start="87:48" pos:end="87:48">i</name></expr>]</index></name></expr></argument>, <argument pos:start="87:52" pos:end="87:56"><expr pos:start="87:52" pos:end="87:56"><name pos:start="87:52" pos:end="87:56">FALSE</name></expr></argument>)</argument_list></call> <operator pos:start="87:59" pos:end="87:59">&lt;</operator> <literal type="number" pos:start="87:61" pos:end="87:61">0</literal></expr>)</condition> <block pos:start="87:64" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:22">

            <expr_stmt pos:start="89:13" pos:end="89:68"><expr pos:start="89:13" pos:end="89:67"><call pos:start="89:13" pos:end="89:67"><name pos:start="89:13" pos:end="89:32">IVSHMEM_SERVER_DEBUG</name><argument_list pos:start="89:33" pos:end="89:67">(<argument pos:start="89:34" pos:end="89:39"><expr pos:start="89:34" pos:end="89:39"><name pos:start="89:34" pos:end="89:39">server</name></expr></argument>, <argument pos:start="89:42" pos:end="89:66"><expr pos:start="89:42" pos:end="89:66"><literal type="string" pos:start="89:42" pos:end="89:66">"cannot create eventfd\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="91:13" pos:end="91:22">goto <name pos:start="91:18" pos:end="91:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="99:5" pos:end="99:33">/* send peer id and shm fd */</comment>

    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:59">(<expr pos:start="101:9" pos:end="101:58"><call pos:start="101:9" pos:end="101:54"><name pos:start="101:9" pos:end="101:40">ivshmem_server_send_initial_info</name><argument_list pos:start="101:41" pos:end="101:54">(<argument pos:start="101:42" pos:end="101:47"><expr pos:start="101:42" pos:end="101:47"><name pos:start="101:42" pos:end="101:47">server</name></expr></argument>, <argument pos:start="101:50" pos:end="101:53"><expr pos:start="101:50" pos:end="101:53"><name pos:start="101:50" pos:end="101:53">peer</name></expr></argument>)</argument_list></call> <operator pos:start="101:56" pos:end="101:56">&lt;</operator> <literal type="number" pos:start="101:58" pos:end="101:58">0</literal></expr>)</condition> <block pos:start="101:61" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:18">

        <expr_stmt pos:start="103:9" pos:end="103:67"><expr pos:start="103:9" pos:end="103:66"><call pos:start="103:9" pos:end="103:66"><name pos:start="103:9" pos:end="103:28">IVSHMEM_SERVER_DEBUG</name><argument_list pos:start="103:29" pos:end="103:66">(<argument pos:start="103:30" pos:end="103:35"><expr pos:start="103:30" pos:end="103:35"><name pos:start="103:30" pos:end="103:35">server</name></expr></argument>, <argument pos:start="103:38" pos:end="103:65"><expr pos:start="103:38" pos:end="103:65"><literal type="string" pos:start="103:38" pos:end="103:65">"cannot send initial info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="105:9" pos:end="105:18">goto <name pos:start="105:14" pos:end="105:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:42">/* advertise the new peer to others */</comment>

    <macro pos:start="113:5" pos:end="113:56"><name pos:start="113:5" pos:end="113:18">QTAILQ_FOREACH</name><argument_list pos:start="113:19" pos:end="113:56">(<argument pos:start="113:20" pos:end="113:29">other_peer</argument>, <argument pos:start="113:32" pos:end="113:49">&amp;server-&gt;peer_list</argument>, <argument pos:start="113:52" pos:end="113:55">next</argument>)</argument_list></macro> <block pos:start="113:58" pos:end="123:5">{<block_content pos:start="115:9" pos:end="121:9">

        <for pos:start="115:9" pos:end="121:9">for <control pos:start="115:13" pos:end="115:49">(<init pos:start="115:14" pos:end="115:19"><expr pos:start="115:14" pos:end="115:18"><name pos:start="115:14" pos:end="115:14">i</name> <operator pos:start="115:16" pos:end="115:16">=</operator> <literal type="number" pos:start="115:18" pos:end="115:18">0</literal></expr>;</init> <condition pos:start="115:21" pos:end="115:44"><expr pos:start="115:21" pos:end="115:43"><name pos:start="115:21" pos:end="115:21">i</name> <operator pos:start="115:23" pos:end="115:23">&lt;</operator> <name pos:start="115:25" pos:end="115:43"><name pos:start="115:25" pos:end="115:28">peer</name><operator pos:start="115:29" pos:end="115:30">-&gt;</operator><name pos:start="115:31" pos:end="115:43">vectors_count</name></name></expr>;</condition> <incr pos:start="115:46" pos:end="115:48"><expr pos:start="115:46" pos:end="115:48"><name pos:start="115:46" pos:end="115:46">i</name><operator pos:start="115:47" pos:end="115:48">++</operator></expr></incr>)</control> <block pos:start="115:51" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:62">

            <expr_stmt pos:start="117:13" pos:end="119:62"><expr pos:start="117:13" pos:end="119:61"><call pos:start="117:13" pos:end="119:61"><name pos:start="117:13" pos:end="117:39">ivshmem_server_send_one_msg</name><argument_list pos:start="117:40" pos:end="119:61">(<argument pos:start="117:41" pos:end="117:59"><expr pos:start="117:41" pos:end="117:59"><name pos:start="117:41" pos:end="117:59"><name pos:start="117:41" pos:end="117:50">other_peer</name><operator pos:start="117:51" pos:end="117:52">-&gt;</operator><name pos:start="117:53" pos:end="117:59">sock_fd</name></name></expr></argument>, <argument pos:start="117:62" pos:end="117:69"><expr pos:start="117:62" pos:end="117:69"><name pos:start="117:62" pos:end="117:69"><name pos:start="117:62" pos:end="117:65">peer</name><operator pos:start="117:66" pos:end="117:67">-&gt;</operator><name pos:start="117:68" pos:end="117:69">id</name></name></expr></argument>,

                                        <argument pos:start="119:41" pos:end="119:60"><expr pos:start="119:41" pos:end="119:60"><name pos:start="119:41" pos:end="119:56"><name pos:start="119:41" pos:end="119:44">peer</name><operator pos:start="119:45" pos:end="119:46">-&gt;</operator><name pos:start="119:47" pos:end="119:53">vectors</name><index pos:start="119:54" pos:end="119:56">[<expr pos:start="119:55" pos:end="119:55"><name pos:start="119:55" pos:end="119:55">i</name></expr>]</index></name><operator pos:start="119:57" pos:end="119:57">.</operator><name pos:start="119:58" pos:end="119:60">wfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block>



    <comment type="block" pos:start="127:5" pos:end="127:50">/* advertise the other peers to the new one */</comment>

    <macro pos:start="129:5" pos:end="129:56"><name pos:start="129:5" pos:end="129:18">QTAILQ_FOREACH</name><argument_list pos:start="129:19" pos:end="129:56">(<argument pos:start="129:20" pos:end="129:29">other_peer</argument>, <argument pos:start="129:32" pos:end="129:49">&amp;server-&gt;peer_list</argument>, <argument pos:start="129:52" pos:end="129:55">next</argument>)</argument_list></macro> <block pos:start="129:58" pos:end="139:5">{<block_content pos:start="131:9" pos:end="137:9">

        <for pos:start="131:9" pos:end="137:9">for <control pos:start="131:13" pos:end="131:49">(<init pos:start="131:14" pos:end="131:19"><expr pos:start="131:14" pos:end="131:18"><name pos:start="131:14" pos:end="131:14">i</name> <operator pos:start="131:16" pos:end="131:16">=</operator> <literal type="number" pos:start="131:18" pos:end="131:18">0</literal></expr>;</init> <condition pos:start="131:21" pos:end="131:44"><expr pos:start="131:21" pos:end="131:43"><name pos:start="131:21" pos:end="131:21">i</name> <operator pos:start="131:23" pos:end="131:23">&lt;</operator> <name pos:start="131:25" pos:end="131:43"><name pos:start="131:25" pos:end="131:28">peer</name><operator pos:start="131:29" pos:end="131:30">-&gt;</operator><name pos:start="131:31" pos:end="131:43">vectors_count</name></name></expr>;</condition> <incr pos:start="131:46" pos:end="131:48"><expr pos:start="131:46" pos:end="131:48"><name pos:start="131:46" pos:end="131:46">i</name><operator pos:start="131:47" pos:end="131:48">++</operator></expr></incr>)</control> <block pos:start="131:51" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:68">

            <expr_stmt pos:start="133:13" pos:end="135:68"><expr pos:start="133:13" pos:end="135:67"><call pos:start="133:13" pos:end="135:67"><name pos:start="133:13" pos:end="133:39">ivshmem_server_send_one_msg</name><argument_list pos:start="133:40" pos:end="135:67">(<argument pos:start="133:41" pos:end="133:53"><expr pos:start="133:41" pos:end="133:53"><name pos:start="133:41" pos:end="133:53"><name pos:start="133:41" pos:end="133:44">peer</name><operator pos:start="133:45" pos:end="133:46">-&gt;</operator><name pos:start="133:47" pos:end="133:53">sock_fd</name></name></expr></argument>, <argument pos:start="133:56" pos:end="133:69"><expr pos:start="133:56" pos:end="133:69"><name pos:start="133:56" pos:end="133:69"><name pos:start="133:56" pos:end="133:65">other_peer</name><operator pos:start="133:66" pos:end="133:67">-&gt;</operator><name pos:start="133:68" pos:end="133:69">id</name></name></expr></argument>,

                                        <argument pos:start="135:41" pos:end="135:66"><expr pos:start="135:41" pos:end="135:66"><name pos:start="135:41" pos:end="135:62"><name pos:start="135:41" pos:end="135:50">other_peer</name><operator pos:start="135:51" pos:end="135:52">-&gt;</operator><name pos:start="135:53" pos:end="135:59">vectors</name><index pos:start="135:60" pos:end="135:62">[<expr pos:start="135:61" pos:end="135:61"><name pos:start="135:61" pos:end="135:61">i</name></expr>]</index></name><operator pos:start="135:63" pos:end="135:63">.</operator><name pos:start="135:64" pos:end="135:66">wfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block>



    <comment type="block" pos:start="143:5" pos:end="143:42">/* advertise the new peer to itself */</comment>

    <for pos:start="145:5" pos:end="151:5">for <control pos:start="145:9" pos:end="145:45">(<init pos:start="145:10" pos:end="145:15"><expr pos:start="145:10" pos:end="145:14"><name pos:start="145:10" pos:end="145:10">i</name> <operator pos:start="145:12" pos:end="145:12">=</operator> <literal type="number" pos:start="145:14" pos:end="145:14">0</literal></expr>;</init> <condition pos:start="145:17" pos:end="145:40"><expr pos:start="145:17" pos:end="145:39"><name pos:start="145:17" pos:end="145:17">i</name> <operator pos:start="145:19" pos:end="145:19">&lt;</operator> <name pos:start="145:21" pos:end="145:39"><name pos:start="145:21" pos:end="145:24">peer</name><operator pos:start="145:25" pos:end="145:26">-&gt;</operator><name pos:start="145:27" pos:end="145:39">vectors_count</name></name></expr>;</condition> <incr pos:start="145:42" pos:end="145:44"><expr pos:start="145:42" pos:end="145:44"><name pos:start="145:42" pos:end="145:42">i</name><operator pos:start="145:43" pos:end="145:44">++</operator></expr></incr>)</control> <block pos:start="145:47" pos:end="151:5">{<block_content pos:start="147:9" pos:end="149:78">

        <expr_stmt pos:start="147:9" pos:end="149:78"><expr pos:start="147:9" pos:end="149:77"><call pos:start="147:9" pos:end="149:77"><name pos:start="147:9" pos:end="147:35">ivshmem_server_send_one_msg</name><argument_list pos:start="147:36" pos:end="149:77">(<argument pos:start="147:37" pos:end="147:49"><expr pos:start="147:37" pos:end="147:49"><name pos:start="147:37" pos:end="147:49"><name pos:start="147:37" pos:end="147:40">peer</name><operator pos:start="147:41" pos:end="147:42">-&gt;</operator><name pos:start="147:43" pos:end="147:49">sock_fd</name></name></expr></argument>, <argument pos:start="147:52" pos:end="147:59"><expr pos:start="147:52" pos:end="147:59"><name pos:start="147:52" pos:end="147:59"><name pos:start="147:52" pos:end="147:55">peer</name><operator pos:start="147:56" pos:end="147:57">-&gt;</operator><name pos:start="147:58" pos:end="147:59">id</name></name></expr></argument>,

                                    <argument pos:start="149:37" pos:end="149:76"><expr pos:start="149:37" pos:end="149:76"><call pos:start="149:37" pos:end="149:76"><name pos:start="149:37" pos:end="149:57">event_notifier_get_fd</name><argument_list pos:start="149:58" pos:end="149:76">(<argument pos:start="149:59" pos:end="149:75"><expr pos:start="149:59" pos:end="149:75"><operator pos:start="149:59" pos:end="149:59">&amp;</operator><name pos:start="149:60" pos:end="149:75"><name pos:start="149:60" pos:end="149:63">peer</name><operator pos:start="149:64" pos:end="149:65">-&gt;</operator><name pos:start="149:66" pos:end="149:72">vectors</name><index pos:start="149:73" pos:end="149:75">[<expr pos:start="149:74" pos:end="149:74"><name pos:start="149:74" pos:end="149:74">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="155:5" pos:end="155:55"><expr pos:start="155:5" pos:end="155:54"><call pos:start="155:5" pos:end="155:54"><name pos:start="155:5" pos:end="155:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="155:23" pos:end="155:54">(<argument pos:start="155:24" pos:end="155:41"><expr pos:start="155:24" pos:end="155:41"><operator pos:start="155:24" pos:end="155:24">&amp;</operator><name pos:start="155:25" pos:end="155:41"><name pos:start="155:25" pos:end="155:30">server</name><operator pos:start="155:31" pos:end="155:32">-&gt;</operator><name pos:start="155:33" pos:end="155:41">peer_list</name></name></expr></argument>, <argument pos:start="155:44" pos:end="155:47"><expr pos:start="155:44" pos:end="155:47"><name pos:start="155:44" pos:end="155:47">peer</name></expr></argument>, <argument pos:start="155:50" pos:end="155:53"><expr pos:start="155:50" pos:end="155:53"><name pos:start="155:50" pos:end="155:53">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="159:35"><expr pos:start="157:5" pos:end="159:34"><call pos:start="157:5" pos:end="159:34"><name pos:start="157:5" pos:end="157:24">IVSHMEM_SERVER_DEBUG</name><argument_list pos:start="157:25" pos:end="159:34">(<argument pos:start="157:26" pos:end="157:31"><expr pos:start="157:26" pos:end="157:31"><name pos:start="157:26" pos:end="157:31">server</name></expr></argument>, <argument pos:start="157:34" pos:end="157:62"><expr pos:start="157:34" pos:end="157:62"><literal type="string" pos:start="157:34" pos:end="157:50">"new peer id = %"</literal> <name pos:start="157:52" pos:end="157:57">PRId64</name> <literal type="string" pos:start="157:59" pos:end="157:62">"\n"</literal></expr></argument>,

                         <argument pos:start="159:26" pos:end="159:33"><expr pos:start="159:26" pos:end="159:33"><name pos:start="159:26" pos:end="159:33"><name pos:start="159:26" pos:end="159:29">peer</name><operator pos:start="159:30" pos:end="159:31">-&gt;</operator><name pos:start="159:32" pos:end="159:33">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="161:5" pos:end="161:13">return <expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">0</literal></expr>;</return>



<label pos:start="165:1" pos:end="165:5"><name pos:start="165:1" pos:end="165:4">fail</name>:</label>

    <while pos:start="167:5" pos:end="171:5">while <condition pos:start="167:11" pos:end="167:15">(<expr pos:start="167:12" pos:end="167:14"><name pos:start="167:12" pos:end="167:12">i</name><operator pos:start="167:13" pos:end="167:14">--</operator></expr>)</condition> <block pos:start="167:17" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:50">

        <expr_stmt pos:start="169:9" pos:end="169:50"><expr pos:start="169:9" pos:end="169:49"><call pos:start="169:9" pos:end="169:49"><name pos:start="169:9" pos:end="169:30">event_notifier_cleanup</name><argument_list pos:start="169:31" pos:end="169:49">(<argument pos:start="169:32" pos:end="169:48"><expr pos:start="169:32" pos:end="169:48"><operator pos:start="169:32" pos:end="169:32">&amp;</operator><name pos:start="169:33" pos:end="169:48"><name pos:start="169:33" pos:end="169:36">peer</name><operator pos:start="169:37" pos:end="169:38">-&gt;</operator><name pos:start="169:39" pos:end="169:45">vectors</name><index pos:start="169:46" pos:end="169:48">[<expr pos:start="169:47" pos:end="169:47"><name pos:start="169:47" pos:end="169:47">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="173:5" pos:end="173:17"><expr pos:start="173:5" pos:end="173:16"><call pos:start="173:5" pos:end="173:16"><name pos:start="173:5" pos:end="173:9">close</name><argument_list pos:start="173:10" pos:end="173:16">(<argument pos:start="173:11" pos:end="173:15"><expr pos:start="173:11" pos:end="173:15"><name pos:start="173:11" pos:end="173:15">newfd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:17"><expr pos:start="175:5" pos:end="175:16"><call pos:start="175:5" pos:end="175:16"><name pos:start="175:5" pos:end="175:10">g_free</name><argument_list pos:start="175:11" pos:end="175:16">(<argument pos:start="175:12" pos:end="175:15"><expr pos:start="175:12" pos:end="175:15"><name pos:start="175:12" pos:end="175:15">peer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="177:5" pos:end="177:14">return <expr pos:start="177:12" pos:end="177:13"><operator pos:start="177:12" pos:end="177:12">-</operator><literal type="number" pos:start="177:13" pos:end="177:13">1</literal></expr>;</return>

</block_content>}</block>
</unit>
