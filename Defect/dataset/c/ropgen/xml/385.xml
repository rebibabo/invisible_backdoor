<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/385.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_block_commit</name><parameter_list pos:start="1:22" pos:end="7:35">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">device</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:35"><decl pos:start="3:23" pos:end="3:35"><type pos:start="3:23" pos:end="3:35"><name pos:start="3:23" pos:end="3:26">bool</name></type> <name pos:start="3:28" pos:end="3:35">has_base</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:53"><decl pos:start="3:38" pos:end="3:53"><type pos:start="3:38" pos:end="3:53"><specifier pos:start="3:38" pos:end="3:42">const</specifier> <name pos:start="3:44" pos:end="3:47">char</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:53">base</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:70"><decl pos:start="3:56" pos:end="3:70"><type pos:start="3:56" pos:end="3:70"><specifier pos:start="3:56" pos:end="3:60">const</specifier> <name pos:start="3:62" pos:end="3:65">char</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:70">top</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:36"><decl pos:start="5:23" pos:end="5:36"><type pos:start="5:23" pos:end="5:36"><name pos:start="5:23" pos:end="5:26">bool</name></type> <name pos:start="5:28" pos:end="5:36">has_speed</name></decl></parameter>, <parameter pos:start="5:39" pos:end="5:51"><decl pos:start="5:39" pos:end="5:51"><type pos:start="5:39" pos:end="5:51"><name pos:start="5:39" pos:end="5:45">int64_t</name></type> <name pos:start="5:47" pos:end="5:51">speed</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:34"><decl pos:start="7:23" pos:end="7:34"><type pos:start="7:23" pos:end="7:34"><name pos:start="7:23" pos:end="7:27">Error</name> <modifier pos:start="7:29" pos:end="7:29">*</modifier><modifier pos:start="7:30" pos:end="7:30">*</modifier></type><name pos:start="7:31" pos:end="7:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="113:1">{<block_content pos:start="11:5" pos:end="111:45">

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:29"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockDriverState</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:29">base_bs</name></decl>, <decl pos:start="13:32" pos:end="13:38"><type ref="prev" pos:start="13:5" pos:end="13:22"><modifier pos:start="13:32" pos:end="13:32">*</modifier></type><name pos:start="13:33" pos:end="13:38">top_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="17:5" pos:end="21:7">/* This will be part of the QMP command, if/when the

     * BlockdevOnError change for blkmirror makes it in

     */</comment>

    <decl_stmt pos:start="23:5" pos:end="23:56"><decl pos:start="23:5" pos:end="23:55"><type pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:19">BlockdevOnError</name></type> <name pos:start="23:21" pos:end="23:28">on_error</name> <init pos:start="23:30" pos:end="23:55">= <expr pos:start="23:32" pos:end="23:55"><name pos:start="23:32" pos:end="23:55">BLOCKDEV_ON_ERROR_REPORT</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:38">/* drain all i/o before commits */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:21"><expr pos:start="29:5" pos:end="29:20"><call pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:18">bdrv_drain_all</name><argument_list pos:start="29:19" pos:end="29:20">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:27"><expr pos:start="33:5" pos:end="33:26"><name pos:start="33:5" pos:end="33:6">bs</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:26"><name pos:start="33:10" pos:end="33:18">bdrv_find</name><argument_list pos:start="33:19" pos:end="33:26">(<argument pos:start="33:20" pos:end="33:25"><expr pos:start="33:20" pos:end="33:25"><name pos:start="33:20" pos:end="33:25">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:12">(<expr pos:start="35:9" pos:end="35:11"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:11">bs</name></expr>)</condition> <block pos:start="35:14" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:15">

        <expr_stmt pos:start="37:9" pos:end="37:55"><expr pos:start="37:9" pos:end="37:54"><call pos:start="37:9" pos:end="37:54"><name pos:start="37:9" pos:end="37:17">error_set</name><argument_list pos:start="37:18" pos:end="37:54">(<argument pos:start="37:19" pos:end="37:22"><expr pos:start="37:19" pos:end="37:22"><name pos:start="37:19" pos:end="37:22">errp</name></expr></argument>, <argument pos:start="37:25" pos:end="37:45"><expr pos:start="37:25" pos:end="37:45"><name pos:start="37:25" pos:end="37:45">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="37:48" pos:end="37:53"><expr pos:start="37:48" pos:end="37:53"><name pos:start="37:48" pos:end="37:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:25">(<expr pos:start="43:9" pos:end="43:24"><name pos:start="43:9" pos:end="43:12">base</name> <operator pos:start="43:14" pos:end="43:15">&amp;&amp;</operator> <name pos:start="43:17" pos:end="43:24">has_base</name></expr>)</condition> <block pos:start="43:27" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:52">

        <expr_stmt pos:start="45:9" pos:end="45:52"><expr pos:start="45:9" pos:end="45:51"><name pos:start="45:9" pos:end="45:15">base_bs</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <call pos:start="45:19" pos:end="45:51"><name pos:start="45:19" pos:end="45:41">bdrv_find_backing_image</name><argument_list pos:start="45:42" pos:end="45:51">(<argument pos:start="45:43" pos:end="45:44"><expr pos:start="45:43" pos:end="45:44"><name pos:start="45:43" pos:end="45:44">bs</name></expr></argument>, <argument pos:start="45:47" pos:end="45:50"><expr pos:start="45:47" pos:end="45:50"><name pos:start="45:47" pos:end="45:50">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="51:5">else <block pos:start="47:12" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:37">

        <expr_stmt pos:start="49:9" pos:end="49:37"><expr pos:start="49:9" pos:end="49:36"><name pos:start="49:9" pos:end="49:15">base_bs</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <call pos:start="49:19" pos:end="49:36"><name pos:start="49:19" pos:end="49:32">bdrv_find_base</name><argument_list pos:start="49:33" pos:end="49:36">(<argument pos:start="49:34" pos:end="49:35"><expr pos:start="49:34" pos:end="49:35"><name pos:start="49:34" pos:end="49:35">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:24">(<expr pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:15">base_bs</name> <operator pos:start="55:17" pos:end="55:18">==</operator> <name pos:start="55:20" pos:end="55:23">NULL</name></expr>)</condition> <block pos:start="55:26" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:15">

        <expr_stmt pos:start="57:9" pos:end="57:67"><expr pos:start="57:9" pos:end="57:66"><call pos:start="57:9" pos:end="57:66"><name pos:start="57:9" pos:end="57:17">error_set</name><argument_list pos:start="57:18" pos:end="57:66">(<argument pos:start="57:19" pos:end="57:22"><expr pos:start="57:19" pos:end="57:22"><name pos:start="57:19" pos:end="57:22">errp</name></expr></argument>, <argument pos:start="57:25" pos:end="57:43"><expr pos:start="57:25" pos:end="57:43"><name pos:start="57:25" pos:end="57:43">QERR_BASE_NOT_FOUND</name></expr></argument>, <argument pos:start="57:46" pos:end="57:65"><expr pos:start="57:46" pos:end="57:65"><ternary pos:start="57:46" pos:end="57:65"><condition pos:start="57:46" pos:end="57:51"><expr pos:start="57:46" pos:end="57:49"><name pos:start="57:46" pos:end="57:49">base</name></expr> ?</condition><then pos:start="57:53" pos:end="57:56"> <expr pos:start="57:53" pos:end="57:56"><name pos:start="57:53" pos:end="57:56">base</name></expr> </then><else pos:start="57:58" pos:end="57:65">: <expr pos:start="57:60" pos:end="57:65"><literal type="string" pos:start="57:60" pos:end="57:65">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:44">/* default top_bs is the active layer */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:16"><expr pos:start="67:5" pos:end="67:15"><name pos:start="67:5" pos:end="67:10">top_bs</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <name pos:start="67:14" pos:end="67:15">bs</name></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="79:5">if <condition pos:start="71:8" pos:end="71:12">(<expr pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">top</name></expr>)</condition> <block pos:start="71:14" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:9">

        <if_stmt pos:start="73:9" pos:end="77:9"><if pos:start="73:9" pos:end="77:9">if <condition pos:start="73:12" pos:end="73:43">(<expr pos:start="73:13" pos:end="73:42"><call pos:start="73:13" pos:end="73:37"><name pos:start="73:13" pos:end="73:18">strcmp</name><argument_list pos:start="73:19" pos:end="73:37">(<argument pos:start="73:20" pos:end="73:31"><expr pos:start="73:20" pos:end="73:31"><name pos:start="73:20" pos:end="73:31"><name pos:start="73:20" pos:end="73:21">bs</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:31">filename</name></name></expr></argument>, <argument pos:start="73:34" pos:end="73:36"><expr pos:start="73:34" pos:end="73:36"><name pos:start="73:34" pos:end="73:36">top</name></expr></argument>)</argument_list></call> <operator pos:start="73:39" pos:end="73:40">!=</operator> <literal type="number" pos:start="73:42" pos:end="73:42">0</literal></expr>)</condition> <block pos:start="73:45" pos:end="77:9">{<block_content pos:start="75:13" pos:end="75:54">

            <expr_stmt pos:start="75:13" pos:end="75:54"><expr pos:start="75:13" pos:end="75:53"><name pos:start="75:13" pos:end="75:18">top_bs</name> <operator pos:start="75:20" pos:end="75:20">=</operator> <call pos:start="75:22" pos:end="75:53"><name pos:start="75:22" pos:end="75:44">bdrv_find_backing_image</name><argument_list pos:start="75:45" pos:end="75:53">(<argument pos:start="75:46" pos:end="75:47"><expr pos:start="75:46" pos:end="75:47"><name pos:start="75:46" pos:end="75:47">bs</name></expr></argument>, <argument pos:start="75:50" pos:end="75:52"><expr pos:start="75:50" pos:end="75:52"><name pos:start="75:50" pos:end="75:52">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="89:5"><if pos:start="83:5" pos:end="89:5">if <condition pos:start="83:8" pos:end="83:23">(<expr pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:14">top_bs</name> <operator pos:start="83:16" pos:end="83:17">==</operator> <name pos:start="83:19" pos:end="83:22">NULL</name></expr>)</condition> <block pos:start="83:25" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:15">

        <expr_stmt pos:start="85:9" pos:end="85:76"><expr pos:start="85:9" pos:end="85:75"><call pos:start="85:9" pos:end="85:75"><name pos:start="85:9" pos:end="85:18">error_setg</name><argument_list pos:start="85:19" pos:end="85:75">(<argument pos:start="85:20" pos:end="85:23"><expr pos:start="85:20" pos:end="85:23"><name pos:start="85:20" pos:end="85:23">errp</name></expr></argument>, <argument pos:start="85:26" pos:end="85:54"><expr pos:start="85:26" pos:end="85:54"><literal type="string" pos:start="85:26" pos:end="85:54">"Top image file %s not found"</literal></expr></argument>, <argument pos:start="85:57" pos:end="85:74"><expr pos:start="85:57" pos:end="85:74"><ternary pos:start="85:57" pos:end="85:74"><condition pos:start="85:57" pos:end="85:61"><expr pos:start="85:57" pos:end="85:59"><name pos:start="85:57" pos:end="85:59">top</name></expr> ?</condition><then pos:start="85:63" pos:end="85:65"> <expr pos:start="85:63" pos:end="85:65"><name pos:start="85:63" pos:end="85:65">top</name></expr> </then><else pos:start="85:67" pos:end="85:74">: <expr pos:start="85:69" pos:end="85:74"><literal type="string" pos:start="85:69" pos:end="85:74">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="95:28"><expr pos:start="93:5" pos:end="95:27"><call pos:start="93:5" pos:end="95:27"><name pos:start="93:5" pos:end="93:16">commit_start</name><argument_list pos:start="93:17" pos:end="95:27">(<argument pos:start="93:18" pos:end="93:19"><expr pos:start="93:18" pos:end="93:19"><name pos:start="93:18" pos:end="93:19">bs</name></expr></argument>, <argument pos:start="93:22" pos:end="93:28"><expr pos:start="93:22" pos:end="93:28"><name pos:start="93:22" pos:end="93:28">base_bs</name></expr></argument>, <argument pos:start="93:31" pos:end="93:36"><expr pos:start="93:31" pos:end="93:36"><name pos:start="93:31" pos:end="93:36">top_bs</name></expr></argument>, <argument pos:start="93:39" pos:end="93:43"><expr pos:start="93:39" pos:end="93:43"><name pos:start="93:39" pos:end="93:43">speed</name></expr></argument>, <argument pos:start="93:46" pos:end="93:53"><expr pos:start="93:46" pos:end="93:53"><name pos:start="93:46" pos:end="93:53">on_error</name></expr></argument>, <argument pos:start="93:56" pos:end="93:67"><expr pos:start="93:56" pos:end="93:67"><name pos:start="93:56" pos:end="93:67">block_job_cb</name></expr></argument>, <argument pos:start="93:70" pos:end="93:71"><expr pos:start="93:70" pos:end="93:71"><name pos:start="93:70" pos:end="93:71">bs</name></expr></argument>,

                <argument pos:start="95:17" pos:end="95:26"><expr pos:start="95:17" pos:end="95:26"><operator pos:start="95:17" pos:end="95:17">&amp;</operator><name pos:start="95:18" pos:end="95:26">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:26">(<expr pos:start="97:9" pos:end="97:25"><name pos:start="97:9" pos:end="97:17">local_err</name> <operator pos:start="97:19" pos:end="97:20">!=</operator> <name pos:start="97:22" pos:end="97:25">NULL</name></expr>)</condition> <block pos:start="97:28" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:15">

        <expr_stmt pos:start="99:9" pos:end="99:41"><expr pos:start="99:9" pos:end="99:40"><call pos:start="99:9" pos:end="99:40"><name pos:start="99:9" pos:end="99:23">error_propagate</name><argument_list pos:start="99:24" pos:end="99:40">(<argument pos:start="99:25" pos:end="99:28"><expr pos:start="99:25" pos:end="99:28"><name pos:start="99:25" pos:end="99:28">errp</name></expr></argument>, <argument pos:start="99:31" pos:end="99:39"><expr pos:start="99:31" pos:end="99:39"><name pos:start="99:31" pos:end="99:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="105:5" pos:end="109:7">/* Grab a reference so hotplug does not delete the BlockDriverState from

     * underneath us.

     */</comment>

    <expr_stmt pos:start="111:5" pos:end="111:45"><expr pos:start="111:5" pos:end="111:44"><call pos:start="111:5" pos:end="111:44"><name pos:start="111:5" pos:end="111:17">drive_get_ref</name><argument_list pos:start="111:18" pos:end="111:44">(<argument pos:start="111:19" pos:end="111:43"><expr pos:start="111:19" pos:end="111:43"><call pos:start="111:19" pos:end="111:43"><name pos:start="111:19" pos:end="111:39">drive_get_by_blockdev</name><argument_list pos:start="111:40" pos:end="111:43">(<argument pos:start="111:41" pos:end="111:42"><expr pos:start="111:41" pos:end="111:42"><name pos:start="111:41" pos:end="111:42">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
