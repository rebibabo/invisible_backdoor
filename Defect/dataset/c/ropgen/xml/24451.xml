<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24451.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">raw_pread_aligned</name><parameter_list pos:start="1:29" pos:end="3:45">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:49"><name pos:start="1:30" pos:end="1:45">BlockDriverState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">bs</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:65"><decl pos:start="1:52" pos:end="1:65"><type pos:start="1:52" pos:end="1:65"><name pos:start="1:52" pos:end="1:58">int64_t</name></type> <name pos:start="1:60" pos:end="1:65">offset</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:28">uint8_t</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:33">buf</name></decl></parameter>, <parameter pos:start="3:36" pos:end="3:44"><decl pos:start="3:36" pos:end="3:44"><type pos:start="3:36" pos:end="3:44"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:44">count</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:37">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVRawState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:22"><expr pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:7">ret</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:21"><name pos:start="13:11" pos:end="13:17">fd_open</name><argument_list pos:start="13:18" pos:end="13:21">(<argument pos:start="13:19" pos:end="13:20"><expr pos:start="13:19" pos:end="13:20"><name pos:start="13:19" pos:end="13:20">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:19"><if pos:start="15:5" pos:end="17:19">if <condition pos:start="15:8" pos:end="15:16">(<expr pos:start="15:9" pos:end="15:15"><name pos:start="15:9" pos:end="15:11">ret</name> <operator pos:start="15:13" pos:end="15:13">&lt;</operator> <literal type="number" pos:start="15:15" pos:end="15:15">0</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:19"><block_content pos:start="17:9" pos:end="17:19">

        <return pos:start="17:9" pos:end="17:19">return <expr pos:start="17:16" pos:end="17:18"><name pos:start="17:16" pos:end="17:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:42"><name pos:start="21:11" pos:end="21:15">pread</name><argument_list pos:start="21:16" pos:end="21:42">(<argument pos:start="21:17" pos:end="21:21"><expr pos:start="21:17" pos:end="21:21"><name pos:start="21:17" pos:end="21:21"><name pos:start="21:17" pos:end="21:17">s</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:21">fd</name></name></expr></argument>, <argument pos:start="21:24" pos:end="21:26"><expr pos:start="21:24" pos:end="21:26"><name pos:start="21:24" pos:end="21:26">buf</name></expr></argument>, <argument pos:start="21:29" pos:end="21:33"><expr pos:start="21:29" pos:end="21:33"><name pos:start="21:29" pos:end="21:33">count</name></expr></argument>, <argument pos:start="21:36" pos:end="21:41"><expr pos:start="21:36" pos:end="21:41"><name pos:start="21:36" pos:end="21:41">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="25:38"><if pos:start="23:5" pos:end="25:38">if <condition pos:start="23:8" pos:end="23:21">(<expr pos:start="23:9" pos:end="23:20"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:14">==</operator> <name pos:start="23:16" pos:end="23:20">count</name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:38"><block_content pos:start="25:9" pos:end="25:38">

        <goto pos:start="25:9" pos:end="25:38">goto <name pos:start="25:14" pos:end="25:37">label__raw_read__success</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:56">/* Allow reads beyond the end (needed for pwrite) */</comment>

    <if_stmt pos:start="31:5" pos:end="45:5"><if pos:start="31:5" pos:end="45:5">if <condition pos:start="31:8" pos:end="31:35">(<expr pos:start="31:9" pos:end="31:34"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:12">ret</name> <operator pos:start="31:14" pos:end="31:15">==</operator> <literal type="number" pos:start="31:17" pos:end="31:17">0</literal><operator pos:start="31:18" pos:end="31:18">)</operator> <operator pos:start="31:20" pos:end="31:21">&amp;&amp;</operator> <name pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:24">bs</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:34">growable</name></name></expr>)</condition> <block pos:start="31:37" pos:end="45:5">{<block_content pos:start="33:9" pos:end="43:9">

        <decl_stmt pos:start="33:9" pos:end="33:41"><decl pos:start="33:9" pos:end="33:40"><type pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:15">int64_t</name></type> <name pos:start="33:17" pos:end="33:20">size</name> <init pos:start="33:22" pos:end="33:40">= <expr pos:start="33:24" pos:end="33:40"><call pos:start="33:24" pos:end="33:40"><name pos:start="33:24" pos:end="33:36">raw_getlength</name><argument_list pos:start="33:37" pos:end="33:40">(<argument pos:start="33:38" pos:end="33:39"><expr pos:start="33:38" pos:end="33:39"><name pos:start="33:38" pos:end="33:39">bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="35:9" pos:end="43:9"><if pos:start="35:9" pos:end="43:9">if <condition pos:start="35:12" pos:end="35:27">(<expr pos:start="35:13" pos:end="35:26"><name pos:start="35:13" pos:end="35:18">offset</name> <operator pos:start="35:20" pos:end="35:21">&gt;=</operator> <name pos:start="35:23" pos:end="35:26">size</name></expr>)</condition> <block pos:start="35:29" pos:end="43:9">{<block_content pos:start="37:13" pos:end="41:42">

            <expr_stmt pos:start="37:13" pos:end="37:34"><expr pos:start="37:13" pos:end="37:33"><call pos:start="37:13" pos:end="37:33"><name pos:start="37:13" pos:end="37:18">memset</name><argument_list pos:start="37:19" pos:end="37:33">(<argument pos:start="37:20" pos:end="37:22"><expr pos:start="37:20" pos:end="37:22"><name pos:start="37:20" pos:end="37:22">buf</name></expr></argument>, <argument pos:start="37:25" pos:end="37:25"><expr pos:start="37:25" pos:end="37:25"><literal type="number" pos:start="37:25" pos:end="37:25">0</literal></expr></argument>, <argument pos:start="37:28" pos:end="37:32"><expr pos:start="37:28" pos:end="37:32"><name pos:start="37:28" pos:end="37:32">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:24"><expr pos:start="39:13" pos:end="39:23"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <name pos:start="39:19" pos:end="39:23">count</name></expr>;</expr_stmt>

            <goto pos:start="41:13" pos:end="41:42">goto <name pos:start="41:18" pos:end="41:41">label__raw_read__success</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="55:70"><expr pos:start="49:5" pos:end="55:69"><call pos:start="49:5" pos:end="55:69"><name pos:start="49:5" pos:end="49:21">DEBUG_BLOCK_PRINT</name><argument_list pos:start="49:22" pos:end="55:69">(<argument pos:start="49:23" pos:end="51:52"><expr pos:start="49:23" pos:end="51:52"><literal type="string" pos:start="49:23" pos:end="49:42">"raw_pread(%d:%s, %"</literal> <name pos:start="49:44" pos:end="49:49">PRId64</name> <literal type="string" pos:start="49:51" pos:end="49:64">", %p, %d) [%"</literal> <name pos:start="49:66" pos:end="49:71">PRId64</name>

                      <literal type="string" pos:start="51:23" pos:end="51:52">"] read failed %d : %d = %s\n"</literal></expr></argument>,

                      <argument pos:start="53:23" pos:end="53:27"><expr pos:start="53:23" pos:end="53:27"><name pos:start="53:23" pos:end="53:27"><name pos:start="53:23" pos:end="53:23">s</name><operator pos:start="53:24" pos:end="53:25">-&gt;</operator><name pos:start="53:26" pos:end="53:27">fd</name></name></expr></argument>, <argument pos:start="53:30" pos:end="53:41"><expr pos:start="53:30" pos:end="53:41"><name pos:start="53:30" pos:end="53:41"><name pos:start="53:30" pos:end="53:31">bs</name><operator pos:start="53:32" pos:end="53:33">-&gt;</operator><name pos:start="53:34" pos:end="53:41">filename</name></name></expr></argument>, <argument pos:start="53:44" pos:end="53:49"><expr pos:start="53:44" pos:end="53:49"><name pos:start="53:44" pos:end="53:49">offset</name></expr></argument>, <argument pos:start="53:52" pos:end="53:54"><expr pos:start="53:52" pos:end="53:54"><name pos:start="53:52" pos:end="53:54">buf</name></expr></argument>, <argument pos:start="53:57" pos:end="53:61"><expr pos:start="53:57" pos:end="53:61"><name pos:start="53:57" pos:end="53:61">count</name></expr></argument>,

                      <argument pos:start="55:23" pos:end="55:39"><expr pos:start="55:23" pos:end="55:39"><name pos:start="55:23" pos:end="55:39"><name pos:start="55:23" pos:end="55:24">bs</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:39">total_sectors</name></name></expr></argument>, <argument pos:start="55:42" pos:end="55:44"><expr pos:start="55:42" pos:end="55:44"><name pos:start="55:42" pos:end="55:44">ret</name></expr></argument>, <argument pos:start="55:47" pos:end="55:51"><expr pos:start="55:47" pos:end="55:51"><name pos:start="55:47" pos:end="55:51">errno</name></expr></argument>, <argument pos:start="55:54" pos:end="55:68"><expr pos:start="55:54" pos:end="55:68"><call pos:start="55:54" pos:end="55:68"><name pos:start="55:54" pos:end="55:61">strerror</name><argument_list pos:start="55:62" pos:end="55:68">(<argument pos:start="55:63" pos:end="55:67"><expr pos:start="55:63" pos:end="55:67"><name pos:start="55:63" pos:end="55:67">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:31">/* Try harder for CDrom. */</comment>

    <if_stmt pos:start="61:5" pos:end="85:5"><if pos:start="61:5" pos:end="85:5">if <condition pos:start="61:8" pos:end="61:36">(<expr pos:start="61:9" pos:end="61:35"><name pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:10">bs</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:16">type</name></name> <operator pos:start="61:18" pos:end="61:19">==</operator> <name pos:start="61:21" pos:end="61:35">BDRV_TYPE_CDROM</name></expr>)</condition> <block pos:start="61:38" pos:end="85:5">{<block_content pos:start="63:9" pos:end="83:74">

        <expr_stmt pos:start="63:9" pos:end="63:47"><expr pos:start="63:9" pos:end="63:46"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">=</operator> <call pos:start="63:15" pos:end="63:46"><name pos:start="63:15" pos:end="63:19">pread</name><argument_list pos:start="63:20" pos:end="63:46">(<argument pos:start="63:21" pos:end="63:25"><expr pos:start="63:21" pos:end="63:25"><name pos:start="63:21" pos:end="63:25"><name pos:start="63:21" pos:end="63:21">s</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:25">fd</name></name></expr></argument>, <argument pos:start="63:28" pos:end="63:30"><expr pos:start="63:28" pos:end="63:30"><name pos:start="63:28" pos:end="63:30">buf</name></expr></argument>, <argument pos:start="63:33" pos:end="63:37"><expr pos:start="63:33" pos:end="63:37"><name pos:start="63:33" pos:end="63:37">count</name></expr></argument>, <argument pos:start="63:40" pos:end="63:45"><expr pos:start="63:40" pos:end="63:45"><name pos:start="63:40" pos:end="63:45">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="67:42"><if pos:start="65:9" pos:end="67:42">if <condition pos:start="65:12" pos:end="65:25">(<expr pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:15">ret</name> <operator pos:start="65:17" pos:end="65:18">==</operator> <name pos:start="65:20" pos:end="65:24">count</name></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:42"><block_content pos:start="67:13" pos:end="67:42">

            <goto pos:start="67:13" pos:end="67:42">goto <name pos:start="67:18" pos:end="67:41">label__raw_read__success</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:47"><expr pos:start="69:9" pos:end="69:46"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:46"><name pos:start="69:15" pos:end="69:19">pread</name><argument_list pos:start="69:20" pos:end="69:46">(<argument pos:start="69:21" pos:end="69:25"><expr pos:start="69:21" pos:end="69:25"><name pos:start="69:21" pos:end="69:25"><name pos:start="69:21" pos:end="69:21">s</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:25">fd</name></name></expr></argument>, <argument pos:start="69:28" pos:end="69:30"><expr pos:start="69:28" pos:end="69:30"><name pos:start="69:28" pos:end="69:30">buf</name></expr></argument>, <argument pos:start="69:33" pos:end="69:37"><expr pos:start="69:33" pos:end="69:37"><name pos:start="69:33" pos:end="69:37">count</name></expr></argument>, <argument pos:start="69:40" pos:end="69:45"><expr pos:start="69:40" pos:end="69:45"><name pos:start="69:40" pos:end="69:45">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="73:42"><if pos:start="71:9" pos:end="73:42">if <condition pos:start="71:12" pos:end="71:25">(<expr pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:15">ret</name> <operator pos:start="71:17" pos:end="71:18">==</operator> <name pos:start="71:20" pos:end="71:24">count</name></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:42"><block_content pos:start="73:13" pos:end="73:42">

            <goto pos:start="73:13" pos:end="73:42">goto <name pos:start="73:18" pos:end="73:41">label__raw_read__success</name>;</goto></block_content></block></if></if_stmt>



        <expr_stmt pos:start="77:9" pos:end="83:74"><expr pos:start="77:9" pos:end="83:73"><call pos:start="77:9" pos:end="83:73"><name pos:start="77:9" pos:end="77:25">DEBUG_BLOCK_PRINT</name><argument_list pos:start="77:26" pos:end="83:73">(<argument pos:start="77:27" pos:end="79:62"><expr pos:start="77:27" pos:end="79:62"><literal type="string" pos:start="77:27" pos:end="77:46">"raw_pread(%d:%s, %"</literal> <name pos:start="77:48" pos:end="77:53">PRId64</name> <literal type="string" pos:start="77:55" pos:end="77:68">", %p, %d) [%"</literal> <name pos:start="77:70" pos:end="77:75">PRId64</name>

                          <literal type="string" pos:start="79:27" pos:end="79:62">"] retry read failed %d : %d = %s\n"</literal></expr></argument>,

                          <argument pos:start="81:27" pos:end="81:31"><expr pos:start="81:27" pos:end="81:31"><name pos:start="81:27" pos:end="81:31"><name pos:start="81:27" pos:end="81:27">s</name><operator pos:start="81:28" pos:end="81:29">-&gt;</operator><name pos:start="81:30" pos:end="81:31">fd</name></name></expr></argument>, <argument pos:start="81:34" pos:end="81:45"><expr pos:start="81:34" pos:end="81:45"><name pos:start="81:34" pos:end="81:45"><name pos:start="81:34" pos:end="81:35">bs</name><operator pos:start="81:36" pos:end="81:37">-&gt;</operator><name pos:start="81:38" pos:end="81:45">filename</name></name></expr></argument>, <argument pos:start="81:48" pos:end="81:53"><expr pos:start="81:48" pos:end="81:53"><name pos:start="81:48" pos:end="81:53">offset</name></expr></argument>, <argument pos:start="81:56" pos:end="81:58"><expr pos:start="81:56" pos:end="81:58"><name pos:start="81:56" pos:end="81:58">buf</name></expr></argument>, <argument pos:start="81:61" pos:end="81:65"><expr pos:start="81:61" pos:end="81:65"><name pos:start="81:61" pos:end="81:65">count</name></expr></argument>,

                          <argument pos:start="83:27" pos:end="83:43"><expr pos:start="83:27" pos:end="83:43"><name pos:start="83:27" pos:end="83:43"><name pos:start="83:27" pos:end="83:28">bs</name><operator pos:start="83:29" pos:end="83:30">-&gt;</operator><name pos:start="83:31" pos:end="83:43">total_sectors</name></name></expr></argument>, <argument pos:start="83:46" pos:end="83:48"><expr pos:start="83:46" pos:end="83:48"><name pos:start="83:46" pos:end="83:48">ret</name></expr></argument>, <argument pos:start="83:51" pos:end="83:55"><expr pos:start="83:51" pos:end="83:55"><name pos:start="83:51" pos:end="83:55">errno</name></expr></argument>, <argument pos:start="83:58" pos:end="83:72"><expr pos:start="83:58" pos:end="83:72"><call pos:start="83:58" pos:end="83:72"><name pos:start="83:58" pos:end="83:65">strerror</name><argument_list pos:start="83:66" pos:end="83:72">(<argument pos:start="83:67" pos:end="83:71"><expr pos:start="83:67" pos:end="83:71"><name pos:start="83:67" pos:end="83:71">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="89:1" pos:end="89:25"><name pos:start="89:1" pos:end="89:24">label__raw_read__success</name>:</label>



    <return pos:start="93:5" pos:end="93:37">return  <expr pos:start="93:13" pos:end="93:36"><ternary pos:start="93:13" pos:end="93:36"><condition pos:start="93:13" pos:end="93:23"><expr pos:start="93:13" pos:end="93:21"><operator pos:start="93:13" pos:end="93:13">(</operator><name pos:start="93:14" pos:end="93:16">ret</name> <operator pos:start="93:18" pos:end="93:18">&lt;</operator> <literal type="number" pos:start="93:20" pos:end="93:20">0</literal><operator pos:start="93:21" pos:end="93:21">)</operator></expr> ?</condition><then pos:start="93:25" pos:end="93:30"> <expr pos:start="93:25" pos:end="93:30"><operator pos:start="93:25" pos:end="93:25">-</operator><name pos:start="93:26" pos:end="93:30">errno</name></expr> </then><else pos:start="93:32" pos:end="93:36">: <expr pos:start="93:34" pos:end="93:36"><name pos:start="93:34" pos:end="93:36">ret</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
