<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6936.c" pos:tabs="8"><function pos:start="1:1" pos:end="215:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">commit_start</name><parameter_list pos:start="1:18" pos:end="7:31">(<parameter pos:start="1:19" pos:end="1:36"><decl pos:start="1:19" pos:end="1:36"><type pos:start="1:19" pos:end="1:36"><specifier pos:start="1:19" pos:end="1:23">const</specifier> <name pos:start="1:25" pos:end="1:28">char</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">job_id</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:58"><decl pos:start="1:39" pos:end="1:58"><type pos:start="1:39" pos:end="1:58"><name pos:start="1:39" pos:end="1:54">BlockDriverState</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:58">bs</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:40"><decl pos:start="3:19" pos:end="3:40"><type pos:start="3:19" pos:end="3:40"><name pos:start="3:19" pos:end="3:34">BlockDriverState</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">base</name></decl></parameter>, <parameter pos:start="3:43" pos:end="3:63"><decl pos:start="3:43" pos:end="3:63"><type pos:start="3:43" pos:end="3:63"><name pos:start="3:43" pos:end="3:58">BlockDriverState</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:63">top</name></decl></parameter>, <parameter pos:start="3:66" pos:end="3:78"><decl pos:start="3:66" pos:end="3:78"><type pos:start="3:66" pos:end="3:78"><name pos:start="3:66" pos:end="3:72">int64_t</name></type> <name pos:start="3:74" pos:end="3:78">speed</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:42"><decl pos:start="5:19" pos:end="5:42"><type pos:start="5:19" pos:end="5:42"><name pos:start="5:19" pos:end="5:33">BlockdevOnError</name></type> <name pos:start="5:35" pos:end="5:42">on_error</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:72"><decl pos:start="5:45" pos:end="5:72"><type pos:start="5:45" pos:end="5:72"><specifier pos:start="5:45" pos:end="5:49">const</specifier> <name pos:start="5:51" pos:end="5:54">char</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:72">backing_file_str</name></decl></parameter>,

                  <parameter pos:start="7:19" pos:end="7:30"><decl pos:start="7:19" pos:end="7:30"><type pos:start="7:19" pos:end="7:30"><name pos:start="7:19" pos:end="7:23">Error</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier><modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:30">errp</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="215:1">{<block_content pos:start="11:5" pos:end="213:32">

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">CommitBlockJob</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">BlockReopenQueue</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:34">reopen_queue</name> <init pos:start="13:36" pos:end="13:41">= <expr pos:start="13:38" pos:end="13:41"><name pos:start="13:38" pos:end="13:41">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:27"><decl pos:start="15:5" pos:end="15:26"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:26">orig_overlay_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:23">orig_base_flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:20">BlockDriverState</name> <modifier pos:start="19:22" pos:end="19:22">*</modifier></type><name pos:start="19:23" pos:end="19:26">iter</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:33"><decl pos:start="21:5" pos:end="21:32"><type pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:20">BlockDriverState</name> <modifier pos:start="21:22" pos:end="21:22">*</modifier></type><name pos:start="21:23" pos:end="21:32">overlay_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">Error</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:20">local_err</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:12"><decl pos:start="25:5" pos:end="25:11"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:22"><expr pos:start="29:5" pos:end="29:21"><call pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:21">(<argument pos:start="29:12" pos:end="29:20"><expr pos:start="29:12" pos:end="29:20"><name pos:start="29:12" pos:end="29:14">top</name> <operator pos:start="29:16" pos:end="29:17">!=</operator> <name pos:start="29:19" pos:end="29:20">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:20">(<expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:11">top</name> <operator pos:start="31:13" pos:end="31:14">==</operator> <name pos:start="31:16" pos:end="31:19">base</name></expr>)</condition> <block pos:start="31:22" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:79"><expr pos:start="33:9" pos:end="33:78"><call pos:start="33:9" pos:end="33:78"><name pos:start="33:9" pos:end="33:18">error_setg</name><argument_list pos:start="33:19" pos:end="33:78">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">errp</name></expr></argument>, <argument pos:start="33:26" pos:end="33:77"><expr pos:start="33:26" pos:end="33:77"><literal type="string" pos:start="33:26" pos:end="33:77">"Invalid files for merge: top and base are the same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:44"><expr pos:start="41:5" pos:end="41:43"><name pos:start="41:5" pos:end="41:14">overlay_bs</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <call pos:start="41:18" pos:end="41:43"><name pos:start="41:18" pos:end="41:34">bdrv_find_overlay</name><argument_list pos:start="41:35" pos:end="41:43">(<argument pos:start="41:36" pos:end="41:37"><expr pos:start="41:36" pos:end="41:37"><name pos:start="41:36" pos:end="41:37">bs</name></expr></argument>, <argument pos:start="41:40" pos:end="41:42"><expr pos:start="41:40" pos:end="41:42"><name pos:start="41:40" pos:end="41:42">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:27">(<expr pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:18">overlay_bs</name> <operator pos:start="45:20" pos:end="45:21">==</operator> <name pos:start="45:23" pos:end="45:26">NULL</name></expr>)</condition> <block pos:start="45:29" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:15">

        <expr_stmt pos:start="47:9" pos:end="47:80"><expr pos:start="47:9" pos:end="47:79"><call pos:start="47:9" pos:end="47:79"><name pos:start="47:9" pos:end="47:18">error_setg</name><argument_list pos:start="47:19" pos:end="47:79">(<argument pos:start="47:20" pos:end="47:23"><expr pos:start="47:20" pos:end="47:23"><name pos:start="47:20" pos:end="47:23">errp</name></expr></argument>, <argument pos:start="47:26" pos:end="47:63"><expr pos:start="47:26" pos:end="47:63"><literal type="string" pos:start="47:26" pos:end="47:63">"Could not find overlay image for %s:"</literal></expr></argument>, <argument pos:start="47:66" pos:end="47:78"><expr pos:start="47:66" pos:end="47:78"><name pos:start="47:66" pos:end="47:78"><name pos:start="47:66" pos:end="47:68">top</name><operator pos:start="47:69" pos:end="47:70">-&gt;</operator><name pos:start="47:71" pos:end="47:78">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:36">/* FIXME Use real permissions */</comment>

    <expr_stmt pos:start="57:5" pos:end="59:69"><expr pos:start="57:5" pos:end="59:68"><name pos:start="57:5" pos:end="57:5">s</name> <operator pos:start="57:7" pos:end="57:7">=</operator> <call pos:start="57:9" pos:end="59:68"><name pos:start="57:9" pos:end="57:24">block_job_create</name><argument_list pos:start="57:25" pos:end="59:68">(<argument pos:start="57:26" pos:end="57:31"><expr pos:start="57:26" pos:end="57:31"><name pos:start="57:26" pos:end="57:31">job_id</name></expr></argument>, <argument pos:start="57:34" pos:end="57:51"><expr pos:start="57:34" pos:end="57:51"><operator pos:start="57:34" pos:end="57:34">&amp;</operator><name pos:start="57:35" pos:end="57:51">commit_job_driver</name></expr></argument>, <argument pos:start="57:54" pos:end="57:55"><expr pos:start="57:54" pos:end="57:55"><name pos:start="57:54" pos:end="57:55">bs</name></expr></argument>, <argument pos:start="57:58" pos:end="57:58"><expr pos:start="57:58" pos:end="57:58"><literal type="number" pos:start="57:58" pos:end="57:58">0</literal></expr></argument>, <argument pos:start="57:61" pos:end="57:72"><expr pos:start="57:61" pos:end="57:72"><name pos:start="57:61" pos:end="57:72">BLK_PERM_ALL</name></expr></argument>,

                         <argument pos:start="59:26" pos:end="59:30"><expr pos:start="59:26" pos:end="59:30"><name pos:start="59:26" pos:end="59:30">speed</name></expr></argument>, <argument pos:start="59:33" pos:end="59:49"><expr pos:start="59:33" pos:end="59:49"><name pos:start="59:33" pos:end="59:49">BLOCK_JOB_DEFAULT</name></expr></argument>, <argument pos:start="59:52" pos:end="59:55"><expr pos:start="59:52" pos:end="59:55"><name pos:start="59:52" pos:end="59:55">NULL</name></expr></argument>, <argument pos:start="59:58" pos:end="59:61"><expr pos:start="59:58" pos:end="59:61"><name pos:start="59:58" pos:end="59:61">NULL</name></expr></argument>, <argument pos:start="59:64" pos:end="59:67"><expr pos:start="59:64" pos:end="59:67"><name pos:start="59:64" pos:end="59:67">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:11">(<expr pos:start="61:9" pos:end="61:10"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:10">s</name></expr>)</condition> <block pos:start="61:13" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:15">

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:46"><expr pos:start="69:5" pos:end="69:45"><name pos:start="69:5" pos:end="69:19">orig_base_flags</name>    <operator pos:start="69:24" pos:end="69:24">=</operator> <call pos:start="69:26" pos:end="69:45"><name pos:start="69:26" pos:end="69:39">bdrv_get_flags</name><argument_list pos:start="69:40" pos:end="69:45">(<argument pos:start="69:41" pos:end="69:44"><expr pos:start="69:41" pos:end="69:44"><name pos:start="69:41" pos:end="69:44">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:52"><expr pos:start="71:5" pos:end="71:51"><name pos:start="71:5" pos:end="71:22">orig_overlay_flags</name> <operator pos:start="71:24" pos:end="71:24">=</operator> <call pos:start="71:26" pos:end="71:51"><name pos:start="71:26" pos:end="71:39">bdrv_get_flags</name><argument_list pos:start="71:40" pos:end="71:51">(<argument pos:start="71:41" pos:end="71:50"><expr pos:start="71:41" pos:end="71:50"><name pos:start="71:41" pos:end="71:50">overlay_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:56">/* convert base &amp; overlay_bs to r/w, if necessary */</comment>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:41">(<expr pos:start="77:9" pos:end="77:40"><operator pos:start="77:9" pos:end="77:9">!</operator><operator pos:start="77:10" pos:end="77:10">(</operator><name pos:start="77:11" pos:end="77:25">orig_base_flags</name> <operator pos:start="77:27" pos:end="77:27">&amp;</operator> <name pos:start="77:29" pos:end="77:39">BDRV_O_RDWR</name><operator pos:start="77:40" pos:end="77:40">)</operator></expr>)</condition> <block pos:start="77:43" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:72">

        <expr_stmt pos:start="79:9" pos:end="81:72"><expr pos:start="79:9" pos:end="81:71"><name pos:start="79:9" pos:end="79:20">reopen_queue</name> <operator pos:start="79:22" pos:end="79:22">=</operator> <call pos:start="79:24" pos:end="81:71"><name pos:start="79:24" pos:end="79:40">bdrv_reopen_queue</name><argument_list pos:start="79:41" pos:end="81:71">(<argument pos:start="79:42" pos:end="79:53"><expr pos:start="79:42" pos:end="79:53"><name pos:start="79:42" pos:end="79:53">reopen_queue</name></expr></argument>, <argument pos:start="79:56" pos:end="79:59"><expr pos:start="79:56" pos:end="79:59"><name pos:start="79:56" pos:end="79:59">base</name></expr></argument>, <argument pos:start="79:62" pos:end="79:65"><expr pos:start="79:62" pos:end="79:65"><name pos:start="79:62" pos:end="79:65">NULL</name></expr></argument>,

                                         <argument pos:start="81:42" pos:end="81:70"><expr pos:start="81:42" pos:end="81:70"><name pos:start="81:42" pos:end="81:56">orig_base_flags</name> <operator pos:start="81:58" pos:end="81:58">|</operator> <name pos:start="81:60" pos:end="81:70">BDRV_O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:44">(<expr pos:start="85:9" pos:end="85:43"><operator pos:start="85:9" pos:end="85:9">!</operator><operator pos:start="85:10" pos:end="85:10">(</operator><name pos:start="85:11" pos:end="85:28">orig_overlay_flags</name> <operator pos:start="85:30" pos:end="85:30">&amp;</operator> <name pos:start="85:32" pos:end="85:42">BDRV_O_RDWR</name><operator pos:start="85:43" pos:end="85:43">)</operator></expr>)</condition> <block pos:start="85:46" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:75">

        <expr_stmt pos:start="87:9" pos:end="89:75"><expr pos:start="87:9" pos:end="89:74"><name pos:start="87:9" pos:end="87:20">reopen_queue</name> <operator pos:start="87:22" pos:end="87:22">=</operator> <call pos:start="87:24" pos:end="89:74"><name pos:start="87:24" pos:end="87:40">bdrv_reopen_queue</name><argument_list pos:start="87:41" pos:end="89:74">(<argument pos:start="87:42" pos:end="87:53"><expr pos:start="87:42" pos:end="87:53"><name pos:start="87:42" pos:end="87:53">reopen_queue</name></expr></argument>, <argument pos:start="87:56" pos:end="87:65"><expr pos:start="87:56" pos:end="87:65"><name pos:start="87:56" pos:end="87:65">overlay_bs</name></expr></argument>, <argument pos:start="87:68" pos:end="87:71"><expr pos:start="87:68" pos:end="87:71"><name pos:start="87:68" pos:end="87:71">NULL</name></expr></argument>,

                                         <argument pos:start="89:42" pos:end="89:73"><expr pos:start="89:42" pos:end="89:73"><name pos:start="89:42" pos:end="89:59">orig_overlay_flags</name> <operator pos:start="89:61" pos:end="89:61">|</operator> <name pos:start="89:63" pos:end="89:73">BDRV_O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="93:5" pos:end="105:5"><if pos:start="93:5" pos:end="105:5">if <condition pos:start="93:8" pos:end="93:21">(<expr pos:start="93:9" pos:end="93:20"><name pos:start="93:9" pos:end="93:20">reopen_queue</name></expr>)</condition> <block pos:start="93:23" pos:end="105:5">{<block_content pos:start="95:9" pos:end="103:9">

        <expr_stmt pos:start="95:9" pos:end="95:81"><expr pos:start="95:9" pos:end="95:80"><call pos:start="95:9" pos:end="95:80"><name pos:start="95:9" pos:end="95:28">bdrv_reopen_multiple</name><argument_list pos:start="95:29" pos:end="95:80">(<argument pos:start="95:30" pos:end="95:53"><expr pos:start="95:30" pos:end="95:53"><call pos:start="95:30" pos:end="95:53"><name pos:start="95:30" pos:end="95:49">bdrv_get_aio_context</name><argument_list pos:start="95:50" pos:end="95:53">(<argument pos:start="95:51" pos:end="95:52"><expr pos:start="95:51" pos:end="95:52"><name pos:start="95:51" pos:end="95:52">bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:56" pos:end="95:67"><expr pos:start="95:56" pos:end="95:67"><name pos:start="95:56" pos:end="95:67">reopen_queue</name></expr></argument>, <argument pos:start="95:70" pos:end="95:79"><expr pos:start="95:70" pos:end="95:79"><operator pos:start="95:70" pos:end="95:70">&amp;</operator><name pos:start="95:71" pos:end="95:79">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:30">(<expr pos:start="97:13" pos:end="97:29"><name pos:start="97:13" pos:end="97:21">local_err</name> <operator pos:start="97:23" pos:end="97:24">!=</operator> <name pos:start="97:26" pos:end="97:29">NULL</name></expr>)</condition> <block pos:start="97:32" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:22">

            <expr_stmt pos:start="99:13" pos:end="99:45"><expr pos:start="99:13" pos:end="99:44"><call pos:start="99:13" pos:end="99:44"><name pos:start="99:13" pos:end="99:27">error_propagate</name><argument_list pos:start="99:28" pos:end="99:44">(<argument pos:start="99:29" pos:end="99:32"><expr pos:start="99:29" pos:end="99:32"><name pos:start="99:29" pos:end="99:32">errp</name></expr></argument>, <argument pos:start="99:35" pos:end="99:43"><expr pos:start="99:35" pos:end="99:43"><name pos:start="99:35" pos:end="99:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="101:13" pos:end="101:22">goto <name pos:start="101:18" pos:end="101:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>





    <comment type="block" pos:start="111:5" pos:end="113:56">/* Block all nodes between top and base, because they will

     * disappear from the chain after this operation. */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:43"><expr pos:start="115:5" pos:end="115:42"><call pos:start="115:5" pos:end="115:42"><name pos:start="115:5" pos:end="115:10">assert</name><argument_list pos:start="115:11" pos:end="115:42">(<argument pos:start="115:12" pos:end="115:41"><expr pos:start="115:12" pos:end="115:41"><call pos:start="115:12" pos:end="115:41"><name pos:start="115:12" pos:end="115:30">bdrv_chain_contains</name><argument_list pos:start="115:31" pos:end="115:41">(<argument pos:start="115:32" pos:end="115:34"><expr pos:start="115:32" pos:end="115:34"><name pos:start="115:32" pos:end="115:34">top</name></expr></argument>, <argument pos:start="115:37" pos:end="115:40"><expr pos:start="115:37" pos:end="115:40"><name pos:start="115:37" pos:end="115:40">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="117:5" pos:end="125:5">for <control pos:start="117:9" pos:end="117:71">(<init pos:start="117:10" pos:end="117:20"><expr pos:start="117:10" pos:end="117:19"><name pos:start="117:10" pos:end="117:13">iter</name> <operator pos:start="117:15" pos:end="117:15">=</operator> <name pos:start="117:17" pos:end="117:19">top</name></expr>;</init> <condition pos:start="117:22" pos:end="117:46"><expr pos:start="117:22" pos:end="117:45"><name pos:start="117:22" pos:end="117:25">iter</name> <operator pos:start="117:27" pos:end="117:28">!=</operator> <call pos:start="117:30" pos:end="117:45"><name pos:start="117:30" pos:end="117:39">backing_bs</name><argument_list pos:start="117:40" pos:end="117:45">(<argument pos:start="117:41" pos:end="117:44"><expr pos:start="117:41" pos:end="117:44"><name pos:start="117:41" pos:end="117:44">base</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="117:48" pos:end="117:70"><expr pos:start="117:48" pos:end="117:70"><name pos:start="117:48" pos:end="117:51">iter</name> <operator pos:start="117:53" pos:end="117:53">=</operator> <call pos:start="117:55" pos:end="117:70"><name pos:start="117:55" pos:end="117:64">backing_bs</name><argument_list pos:start="117:65" pos:end="117:70">(<argument pos:start="117:66" pos:end="117:69"><expr pos:start="117:66" pos:end="117:69"><name pos:start="117:66" pos:end="117:69">iter</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="117:73" pos:end="125:5">{<block_content pos:start="121:9" pos:end="123:55">

        <comment type="block" pos:start="119:9" pos:end="119:40">/* FIXME Use real permissions */</comment>

        <expr_stmt pos:start="121:9" pos:end="123:55"><expr pos:start="121:9" pos:end="123:54"><call pos:start="121:9" pos:end="123:54"><name pos:start="121:9" pos:end="121:26">block_job_add_bdrv</name><argument_list pos:start="121:27" pos:end="123:54">(<argument pos:start="121:28" pos:end="121:37"><expr pos:start="121:28" pos:end="121:37"><operator pos:start="121:28" pos:end="121:28">&amp;</operator><name pos:start="121:29" pos:end="121:37"><name pos:start="121:29" pos:end="121:29">s</name><operator pos:start="121:30" pos:end="121:31">-&gt;</operator><name pos:start="121:32" pos:end="121:37">common</name></name></expr></argument>, <argument pos:start="121:40" pos:end="121:58"><expr pos:start="121:40" pos:end="121:58"><literal type="string" pos:start="121:40" pos:end="121:58">"intermediate node"</literal></expr></argument>, <argument pos:start="121:61" pos:end="121:64"><expr pos:start="121:61" pos:end="121:64"><name pos:start="121:61" pos:end="121:64">iter</name></expr></argument>, <argument pos:start="121:67" pos:end="121:67"><expr pos:start="121:67" pos:end="121:67"><literal type="number" pos:start="121:67" pos:end="121:67">0</literal></expr></argument>,

                           <argument pos:start="123:28" pos:end="123:39"><expr pos:start="123:28" pos:end="123:39"><name pos:start="123:28" pos:end="123:39">BLK_PERM_ALL</name></expr></argument>, <argument pos:start="123:42" pos:end="123:53"><expr pos:start="123:42" pos:end="123:53"><operator pos:start="123:42" pos:end="123:42">&amp;</operator><name pos:start="123:43" pos:end="123:53">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <comment type="block" pos:start="127:5" pos:end="131:30">/* overlay_bs must be blocked because it needs to be modified to

     * update the backing image string, but if it's the root node then

     * don't block it again */</comment>

    <if_stmt pos:start="133:5" pos:end="141:5"><if pos:start="133:5" pos:end="141:5">if <condition pos:start="133:8" pos:end="133:25">(<expr pos:start="133:9" pos:end="133:24"><name pos:start="133:9" pos:end="133:10">bs</name> <operator pos:start="133:12" pos:end="133:13">!=</operator> <name pos:start="133:15" pos:end="133:24">overlay_bs</name></expr>)</condition> <block pos:start="133:27" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:55">

        <comment type="block" pos:start="135:9" pos:end="135:40">/* FIXME Use real permissions */</comment>

        <expr_stmt pos:start="137:9" pos:end="139:55"><expr pos:start="137:9" pos:end="139:54"><call pos:start="137:9" pos:end="139:54"><name pos:start="137:9" pos:end="137:26">block_job_add_bdrv</name><argument_list pos:start="137:27" pos:end="139:54">(<argument pos:start="137:28" pos:end="137:37"><expr pos:start="137:28" pos:end="137:37"><operator pos:start="137:28" pos:end="137:28">&amp;</operator><name pos:start="137:29" pos:end="137:37"><name pos:start="137:29" pos:end="137:29">s</name><operator pos:start="137:30" pos:end="137:31">-&gt;</operator><name pos:start="137:32" pos:end="137:37">common</name></name></expr></argument>, <argument pos:start="137:40" pos:end="137:55"><expr pos:start="137:40" pos:end="137:55"><literal type="string" pos:start="137:40" pos:end="137:55">"overlay of top"</literal></expr></argument>, <argument pos:start="137:58" pos:end="137:67"><expr pos:start="137:58" pos:end="137:67"><name pos:start="137:58" pos:end="137:67">overlay_bs</name></expr></argument>, <argument pos:start="137:70" pos:end="137:70"><expr pos:start="137:70" pos:end="137:70"><literal type="number" pos:start="137:70" pos:end="137:70">0</literal></expr></argument>,

                           <argument pos:start="139:28" pos:end="139:39"><expr pos:start="139:28" pos:end="139:39"><name pos:start="139:28" pos:end="139:39">BLK_PERM_ALL</name></expr></argument>, <argument pos:start="139:42" pos:end="139:53"><expr pos:start="139:42" pos:end="139:53"><operator pos:start="139:42" pos:end="139:42">&amp;</operator><name pos:start="139:43" pos:end="139:53">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:36">/* FIXME Use real permissions */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:39"><expr pos:start="147:5" pos:end="147:38"><name pos:start="147:5" pos:end="147:11"><name pos:start="147:5" pos:end="147:5">s</name><operator pos:start="147:6" pos:end="147:7">-&gt;</operator><name pos:start="147:8" pos:end="147:11">base</name></name> <operator pos:start="147:13" pos:end="147:13">=</operator> <call pos:start="147:15" pos:end="147:38"><name pos:start="147:15" pos:end="147:21">blk_new</name><argument_list pos:start="147:22" pos:end="147:38">(<argument pos:start="147:23" pos:end="147:23"><expr pos:start="147:23" pos:end="147:23"><literal type="number" pos:start="147:23" pos:end="147:23">0</literal></expr></argument>, <argument pos:start="147:26" pos:end="147:37"><expr pos:start="147:26" pos:end="147:37"><name pos:start="147:26" pos:end="147:37">BLK_PERM_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:45"><expr pos:start="149:5" pos:end="149:44"><name pos:start="149:5" pos:end="149:7">ret</name> <operator pos:start="149:9" pos:end="149:9">=</operator> <call pos:start="149:11" pos:end="149:44"><name pos:start="149:11" pos:end="149:23">blk_insert_bs</name><argument_list pos:start="149:24" pos:end="149:44">(<argument pos:start="149:25" pos:end="149:31"><expr pos:start="149:25" pos:end="149:31"><name pos:start="149:25" pos:end="149:31"><name pos:start="149:25" pos:end="149:25">s</name><operator pos:start="149:26" pos:end="149:27">-&gt;</operator><name pos:start="149:28" pos:end="149:31">base</name></name></expr></argument>, <argument pos:start="149:34" pos:end="149:37"><expr pos:start="149:34" pos:end="149:37"><name pos:start="149:34" pos:end="149:37">base</name></expr></argument>, <argument pos:start="149:40" pos:end="149:43"><expr pos:start="149:40" pos:end="149:43"><name pos:start="149:40" pos:end="149:43">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="151:5" pos:end="155:5"><if pos:start="151:5" pos:end="155:5">if <condition pos:start="151:8" pos:end="151:16">(<expr pos:start="151:9" pos:end="151:15"><name pos:start="151:9" pos:end="151:11">ret</name> <operator pos:start="151:13" pos:end="151:13">&lt;</operator> <literal type="number" pos:start="151:15" pos:end="151:15">0</literal></expr>)</condition> <block pos:start="151:18" pos:end="155:5">{<block_content pos:start="153:9" pos:end="153:18">

        <goto pos:start="153:9" pos:end="153:18">goto <name pos:start="153:14" pos:end="153:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="159:5" pos:end="159:36">/* FIXME Use real permissions */</comment>

    <expr_stmt pos:start="161:5" pos:end="161:38"><expr pos:start="161:5" pos:end="161:37"><name pos:start="161:5" pos:end="161:10"><name pos:start="161:5" pos:end="161:5">s</name><operator pos:start="161:6" pos:end="161:7">-&gt;</operator><name pos:start="161:8" pos:end="161:10">top</name></name> <operator pos:start="161:12" pos:end="161:12">=</operator> <call pos:start="161:14" pos:end="161:37"><name pos:start="161:14" pos:end="161:20">blk_new</name><argument_list pos:start="161:21" pos:end="161:37">(<argument pos:start="161:22" pos:end="161:22"><expr pos:start="161:22" pos:end="161:22"><literal type="number" pos:start="161:22" pos:end="161:22">0</literal></expr></argument>, <argument pos:start="161:25" pos:end="161:36"><expr pos:start="161:25" pos:end="161:36"><name pos:start="161:25" pos:end="161:36">BLK_PERM_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:43"><expr pos:start="163:5" pos:end="163:42"><name pos:start="163:5" pos:end="163:7">ret</name> <operator pos:start="163:9" pos:end="163:9">=</operator> <call pos:start="163:11" pos:end="163:42"><name pos:start="163:11" pos:end="163:23">blk_insert_bs</name><argument_list pos:start="163:24" pos:end="163:42">(<argument pos:start="163:25" pos:end="163:30"><expr pos:start="163:25" pos:end="163:30"><name pos:start="163:25" pos:end="163:30"><name pos:start="163:25" pos:end="163:25">s</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:30">top</name></name></expr></argument>, <argument pos:start="163:33" pos:end="163:35"><expr pos:start="163:33" pos:end="163:35"><name pos:start="163:33" pos:end="163:35">top</name></expr></argument>, <argument pos:start="163:38" pos:end="163:41"><expr pos:start="163:38" pos:end="163:41"><name pos:start="163:38" pos:end="163:41">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="165:5" pos:end="169:5"><if pos:start="165:5" pos:end="169:5">if <condition pos:start="165:8" pos:end="165:16">(<expr pos:start="165:9" pos:end="165:15"><name pos:start="165:9" pos:end="165:11">ret</name> <operator pos:start="165:13" pos:end="165:13">&lt;</operator> <literal type="number" pos:start="165:15" pos:end="165:15">0</literal></expr>)</condition> <block pos:start="165:18" pos:end="169:5">{<block_content pos:start="167:9" pos:end="167:18">

        <goto pos:start="167:9" pos:end="167:18">goto <name pos:start="167:14" pos:end="167:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="173:5" pos:end="173:19"><expr pos:start="173:5" pos:end="173:18"><name pos:start="173:5" pos:end="173:13"><name pos:start="173:5" pos:end="173:5">s</name><operator pos:start="173:6" pos:end="173:7">-&gt;</operator><name pos:start="173:8" pos:end="173:13">active</name></name> <operator pos:start="173:15" pos:end="173:15">=</operator> <name pos:start="173:17" pos:end="173:18">bs</name></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:45"><expr pos:start="177:5" pos:end="177:44"><name pos:start="177:5" pos:end="177:17"><name pos:start="177:5" pos:end="177:5">s</name><operator pos:start="177:6" pos:end="177:7">-&gt;</operator><name pos:start="177:8" pos:end="177:17">base_flags</name></name>          <operator pos:start="177:28" pos:end="177:28">=</operator> <name pos:start="177:30" pos:end="177:44">orig_base_flags</name></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:48"><expr pos:start="179:5" pos:end="179:47"><name pos:start="179:5" pos:end="179:25"><name pos:start="179:5" pos:end="179:5">s</name><operator pos:start="179:6" pos:end="179:7">-&gt;</operator><name pos:start="179:8" pos:end="179:25">orig_overlay_flags</name></name>  <operator pos:start="179:28" pos:end="179:28">=</operator> <name pos:start="179:30" pos:end="179:47">orig_overlay_flags</name></expr>;</expr_stmt>



    <expr_stmt pos:start="183:5" pos:end="183:53"><expr pos:start="183:5" pos:end="183:52"><name pos:start="183:5" pos:end="183:23"><name pos:start="183:5" pos:end="183:5">s</name><operator pos:start="183:6" pos:end="183:7">-&gt;</operator><name pos:start="183:8" pos:end="183:23">backing_file_str</name></name> <operator pos:start="183:25" pos:end="183:25">=</operator> <call pos:start="183:27" pos:end="183:52"><name pos:start="183:27" pos:end="183:34">g_strdup</name><argument_list pos:start="183:35" pos:end="183:52">(<argument pos:start="183:36" pos:end="183:51"><expr pos:start="183:36" pos:end="183:51"><name pos:start="183:36" pos:end="183:51">backing_file_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:27"><expr pos:start="187:5" pos:end="187:26"><name pos:start="187:5" pos:end="187:15"><name pos:start="187:5" pos:end="187:5">s</name><operator pos:start="187:6" pos:end="187:7">-&gt;</operator><name pos:start="187:8" pos:end="187:15">on_error</name></name> <operator pos:start="187:17" pos:end="187:17">=</operator> <name pos:start="187:19" pos:end="187:26">on_error</name></expr>;</expr_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:41"><expr pos:start="191:5" pos:end="191:40"><call pos:start="191:5" pos:end="191:40"><name pos:start="191:5" pos:end="191:22">trace_commit_start</name><argument_list pos:start="191:23" pos:end="191:40">(<argument pos:start="191:24" pos:end="191:25"><expr pos:start="191:24" pos:end="191:25"><name pos:start="191:24" pos:end="191:25">bs</name></expr></argument>, <argument pos:start="191:28" pos:end="191:31"><expr pos:start="191:28" pos:end="191:31"><name pos:start="191:28" pos:end="191:31">base</name></expr></argument>, <argument pos:start="191:34" pos:end="191:36"><expr pos:start="191:34" pos:end="191:36"><name pos:start="191:34" pos:end="191:36">top</name></expr></argument>, <argument pos:start="191:39" pos:end="191:39"><expr pos:start="191:39" pos:end="191:39"><name pos:start="191:39" pos:end="191:39">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:32"><expr pos:start="193:5" pos:end="193:31"><call pos:start="193:5" pos:end="193:31"><name pos:start="193:5" pos:end="193:19">block_job_start</name><argument_list pos:start="193:20" pos:end="193:31">(<argument pos:start="193:21" pos:end="193:30"><expr pos:start="193:21" pos:end="193:30"><operator pos:start="193:21" pos:end="193:21">&amp;</operator><name pos:start="193:22" pos:end="193:30"><name pos:start="193:22" pos:end="193:22">s</name><operator pos:start="193:23" pos:end="193:24">-&gt;</operator><name pos:start="193:25" pos:end="193:30">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="195:5" pos:end="195:11">return;</return>



<label pos:start="199:1" pos:end="199:5"><name pos:start="199:1" pos:end="199:4">fail</name>:</label>

    <if_stmt pos:start="201:5" pos:end="205:5"><if pos:start="201:5" pos:end="205:5">if <condition pos:start="201:8" pos:end="201:16">(<expr pos:start="201:9" pos:end="201:15"><name pos:start="201:9" pos:end="201:15"><name pos:start="201:9" pos:end="201:9">s</name><operator pos:start="201:10" pos:end="201:11">-&gt;</operator><name pos:start="201:12" pos:end="201:15">base</name></name></expr>)</condition> <block pos:start="201:18" pos:end="205:5">{<block_content pos:start="203:9" pos:end="203:27">

        <expr_stmt pos:start="203:9" pos:end="203:27"><expr pos:start="203:9" pos:end="203:26"><call pos:start="203:9" pos:end="203:26"><name pos:start="203:9" pos:end="203:17">blk_unref</name><argument_list pos:start="203:18" pos:end="203:26">(<argument pos:start="203:19" pos:end="203:25"><expr pos:start="203:19" pos:end="203:25"><name pos:start="203:19" pos:end="203:25"><name pos:start="203:19" pos:end="203:19">s</name><operator pos:start="203:20" pos:end="203:21">-&gt;</operator><name pos:start="203:22" pos:end="203:25">base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="207:5" pos:end="211:5"><if pos:start="207:5" pos:end="211:5">if <condition pos:start="207:8" pos:end="207:15">(<expr pos:start="207:9" pos:end="207:14"><name pos:start="207:9" pos:end="207:14"><name pos:start="207:9" pos:end="207:9">s</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:14">top</name></name></expr>)</condition> <block pos:start="207:17" pos:end="211:5">{<block_content pos:start="209:9" pos:end="209:26">

        <expr_stmt pos:start="209:9" pos:end="209:26"><expr pos:start="209:9" pos:end="209:25"><call pos:start="209:9" pos:end="209:25"><name pos:start="209:9" pos:end="209:17">blk_unref</name><argument_list pos:start="209:18" pos:end="209:25">(<argument pos:start="209:19" pos:end="209:24"><expr pos:start="209:19" pos:end="209:24"><name pos:start="209:19" pos:end="209:24"><name pos:start="209:19" pos:end="209:19">s</name><operator pos:start="209:20" pos:end="209:21">-&gt;</operator><name pos:start="209:22" pos:end="209:24">top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:32"><expr pos:start="213:5" pos:end="213:31"><call pos:start="213:5" pos:end="213:31"><name pos:start="213:5" pos:end="213:19">block_job_unref</name><argument_list pos:start="213:20" pos:end="213:31">(<argument pos:start="213:21" pos:end="213:30"><expr pos:start="213:21" pos:end="213:30"><operator pos:start="213:21" pos:end="213:21">&amp;</operator><name pos:start="213:22" pos:end="213:30"><name pos:start="213:22" pos:end="213:22">s</name><operator pos:start="213:23" pos:end="213:24">-&gt;</operator><name pos:start="213:25" pos:end="213:30">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
