<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3146.c" pos:tabs="8"><function pos:start="1:1" pos:end="333:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="5:56">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">data_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:41"><decl pos:start="5:30" pos:end="5:41"><type pos:start="5:30" pos:end="5:41"><name pos:start="5:30" pos:end="5:36">uint8_t</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:41">buf</name></decl></parameter>, <parameter pos:start="5:44" pos:end="5:55"><decl pos:start="5:44" pos:end="5:55"><type pos:start="5:44" pos:end="5:55"><name pos:start="5:44" pos:end="5:46">int</name></type> <name pos:start="5:48" pos:end="5:55">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="333:1">{<block_content pos:start="9:5" pos:end="331:54">

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15">H264Context</name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:18">h</name> <init pos:start="9:20" pos:end="9:37">= <expr pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:37"><name pos:start="9:22" pos:end="9:26">avctx</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:37">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">MpegEncContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:21">s</name> <init pos:start="11:23" pos:end="11:29">= <expr pos:start="11:25" pos:end="11:29"><operator pos:start="11:25" pos:end="11:25">&amp;</operator><name pos:start="11:26" pos:end="11:29"><name pos:start="11:26" pos:end="11:26">h</name><operator pos:start="11:27" pos:end="11:28">-&gt;</operator><name pos:start="11:29" pos:end="11:29">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">pict</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">buf_index</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:27"><expr pos:start="19:5" pos:end="19:26"><name pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:5">s</name><operator pos:start="19:6" pos:end="19:7">-&gt;</operator><name pos:start="19:8" pos:end="19:12">flags</name></name><operator pos:start="19:13" pos:end="19:13">=</operator> <name pos:start="19:15" pos:end="19:26"><name pos:start="19:15" pos:end="19:19">avctx</name><operator pos:start="19:20" pos:end="19:21">-&gt;</operator><name pos:start="19:22" pos:end="19:26">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:13"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:13">flags2</name></name><operator pos:start="21:14" pos:end="21:14">=</operator> <name pos:start="21:16" pos:end="21:28"><name pos:start="21:16" pos:end="21:20">avctx</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:28">flags2</name></name></expr>;</expr_stmt>



   <comment type="block" pos:start="25:4" pos:end="25:33">/* no supplementary picture */</comment>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:22">(<expr pos:start="27:9" pos:end="27:21"><name pos:start="27:9" pos:end="27:16">buf_size</name> <operator pos:start="27:18" pos:end="27:19">==</operator> <literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr>)</condition> <block pos:start="27:24" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:17">

        <return pos:start="29:9" pos:end="29:17">return <expr pos:start="29:16" pos:end="29:16"><literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="47:5"><if pos:start="35:5" pos:end="47:5">if<condition pos:start="35:7" pos:end="35:37">(<expr pos:start="35:8" pos:end="35:36"><name pos:start="35:8" pos:end="35:15"><name pos:start="35:8" pos:end="35:8">s</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:15">flags</name></name><operator pos:start="35:16" pos:end="35:16">&amp;</operator><name pos:start="35:17" pos:end="35:36">CODEC_FLAG_TRUNCATED</name></expr>)</condition><block pos:start="35:38" pos:end="47:5">{<block_content pos:start="37:9" pos:end="43:28">

        <decl_stmt pos:start="37:9" pos:end="37:51"><decl pos:start="37:9" pos:end="37:50"><type pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:11">int</name></type> <name pos:start="37:13" pos:end="37:16">next</name><init pos:start="37:17" pos:end="37:50">= <expr pos:start="37:19" pos:end="37:50"><call pos:start="37:19" pos:end="37:50"><name pos:start="37:19" pos:end="37:32">find_frame_end</name><argument_list pos:start="37:33" pos:end="37:50">(<argument pos:start="37:34" pos:end="37:34"><expr pos:start="37:34" pos:end="37:34"><name pos:start="37:34" pos:end="37:34">h</name></expr></argument>, <argument pos:start="37:37" pos:end="37:39"><expr pos:start="37:37" pos:end="37:39"><name pos:start="37:37" pos:end="37:39">buf</name></expr></argument>, <argument pos:start="37:42" pos:end="37:49"><expr pos:start="37:42" pos:end="37:49"><name pos:start="37:42" pos:end="37:49">buf_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="41:9" pos:end="43:28"><if pos:start="41:9" pos:end="43:28">if<condition pos:start="41:11" pos:end="41:76">( <expr pos:start="41:13" pos:end="41:74"><call pos:start="41:13" pos:end="41:70"><name pos:start="41:13" pos:end="41:28">ff_combine_frame</name><argument_list pos:start="41:29" pos:end="41:70">(<argument pos:start="41:30" pos:end="41:46"><expr pos:start="41:30" pos:end="41:46"><operator pos:start="41:30" pos:end="41:30">&amp;</operator><name pos:start="41:31" pos:end="41:46"><name pos:start="41:31" pos:end="41:31">s</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:46">parse_context</name></name></expr></argument>, <argument pos:start="41:49" pos:end="41:52"><expr pos:start="41:49" pos:end="41:52"><name pos:start="41:49" pos:end="41:52">next</name></expr></argument>, <argument pos:start="41:55" pos:end="41:58"><expr pos:start="41:55" pos:end="41:58"><operator pos:start="41:55" pos:end="41:55">&amp;</operator><name pos:start="41:56" pos:end="41:58">buf</name></expr></argument>, <argument pos:start="41:61" pos:end="41:69"><expr pos:start="41:61" pos:end="41:69"><operator pos:start="41:61" pos:end="41:61">&amp;</operator><name pos:start="41:62" pos:end="41:69">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="41:72" pos:end="41:72">&lt;</operator> <literal type="number" pos:start="41:74" pos:end="41:74">0</literal></expr> )</condition><block type="pseudo" pos:start="43:13" pos:end="43:28"><block_content pos:start="43:13" pos:end="43:28">

            <return pos:start="43:13" pos:end="43:28">return <expr pos:start="43:20" pos:end="43:27"><name pos:start="43:20" pos:end="43:27">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

<comment type="line" pos:start="45:1" pos:end="45:93">//printf("next:%d buf_size:%d last_index:%d\n", next, buf_size, s-&gt;parse_context.last_index);</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="51:5" pos:end="129:5"><if pos:start="51:5" pos:end="129:5">if<condition pos:start="51:7" pos:end="51:33">(<expr pos:start="51:8" pos:end="51:32"><name pos:start="51:8" pos:end="51:16"><name pos:start="51:8" pos:end="51:8">h</name><operator pos:start="51:9" pos:end="51:10">-&gt;</operator><name pos:start="51:11" pos:end="51:16">is_avc</name></name> <operator pos:start="51:18" pos:end="51:19">&amp;&amp;</operator> <operator pos:start="51:21" pos:end="51:21">!</operator><name pos:start="51:22" pos:end="51:32"><name pos:start="51:22" pos:end="51:22">h</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:32">got_avcC</name></name></expr>)</condition> <block pos:start="51:35" pos:end="129:5">{<block_content pos:start="53:9" pos:end="127:24">

        <decl_stmt pos:start="53:9" pos:end="53:28"><decl pos:start="53:9" pos:end="53:13"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:13">i</name></decl>, <decl pos:start="53:16" pos:end="53:18"><type ref="prev" pos:start="53:9" pos:end="53:11"/><name pos:start="53:16" pos:end="53:18">cnt</name></decl>, <decl pos:start="53:21" pos:end="53:27"><type ref="prev" pos:start="53:9" pos:end="53:11"/><name pos:start="53:21" pos:end="53:27">nalsize</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:44"><decl pos:start="55:9" pos:end="55:43"><type pos:start="55:9" pos:end="55:23"><name pos:start="55:9" pos:end="55:16">unsigned</name> <name pos:start="55:18" pos:end="55:21">char</name> <modifier pos:start="55:23" pos:end="55:23">*</modifier></type><name pos:start="55:24" pos:end="55:24">p</name> <init pos:start="55:26" pos:end="55:43">= <expr pos:start="55:28" pos:end="55:43"><name pos:start="55:28" pos:end="55:43"><name pos:start="55:28" pos:end="55:32">avctx</name><operator pos:start="55:33" pos:end="55:34">-&gt;</operator><name pos:start="55:35" pos:end="55:43">extradata</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if<condition pos:start="57:11" pos:end="57:37">(<expr pos:start="57:12" pos:end="57:36"><name pos:start="57:12" pos:end="57:32"><name pos:start="57:12" pos:end="57:16">avctx</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:32">extradata_size</name></name> <operator pos:start="57:34" pos:end="57:34">&lt;</operator> <literal type="number" pos:start="57:36" pos:end="57:36">7</literal></expr>)</condition> <block pos:start="57:39" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:22">

            <expr_stmt pos:start="59:13" pos:end="59:60"><expr pos:start="59:13" pos:end="59:59"><call pos:start="59:13" pos:end="59:59"><name pos:start="59:13" pos:end="59:18">av_log</name><argument_list pos:start="59:19" pos:end="59:59">(<argument pos:start="59:20" pos:end="59:24"><expr pos:start="59:20" pos:end="59:24"><name pos:start="59:20" pos:end="59:24">avctx</name></expr></argument>, <argument pos:start="59:27" pos:end="59:38"><expr pos:start="59:27" pos:end="59:38"><name pos:start="59:27" pos:end="59:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="59:41" pos:end="59:58"><expr pos:start="59:41" pos:end="59:58"><literal type="string" pos:start="59:41" pos:end="59:58">"avcC too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="61:13" pos:end="61:22">return <expr pos:start="61:20" pos:end="61:21"><operator pos:start="61:20" pos:end="61:20">-</operator><literal type="number" pos:start="61:21" pos:end="61:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="65:9" pos:end="71:9"><if pos:start="65:9" pos:end="71:9">if<condition pos:start="65:11" pos:end="65:19">(<expr pos:start="65:12" pos:end="65:18"><operator pos:start="65:12" pos:end="65:12">*</operator><name pos:start="65:13" pos:end="65:13">p</name> <operator pos:start="65:15" pos:end="65:16">!=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">1</literal></expr>)</condition> <block pos:start="65:21" pos:end="71:9">{<block_content pos:start="67:13" pos:end="69:22">

            <expr_stmt pos:start="67:13" pos:end="67:73"><expr pos:start="67:13" pos:end="67:72"><call pos:start="67:13" pos:end="67:72"><name pos:start="67:13" pos:end="67:18">av_log</name><argument_list pos:start="67:19" pos:end="67:72">(<argument pos:start="67:20" pos:end="67:24"><expr pos:start="67:20" pos:end="67:24"><name pos:start="67:20" pos:end="67:24">avctx</name></expr></argument>, <argument pos:start="67:27" pos:end="67:38"><expr pos:start="67:27" pos:end="67:38"><name pos:start="67:27" pos:end="67:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="67:41" pos:end="67:67"><expr pos:start="67:41" pos:end="67:67"><literal type="string" pos:start="67:41" pos:end="67:67">"Unknown avcC version %d\n"</literal></expr></argument>, <argument pos:start="67:70" pos:end="67:71"><expr pos:start="67:70" pos:end="67:71"><operator pos:start="67:70" pos:end="67:70">*</operator><name pos:start="67:71" pos:end="67:71">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:22">return <expr pos:start="69:20" pos:end="69:21"><operator pos:start="69:20" pos:end="69:20">-</operator><literal type="number" pos:start="69:21" pos:end="69:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="73:9" pos:end="75:66">/* sps and pps in the avcC always have length coded with 2 bytes,

           so put a fake nal_length_size = 2 while parsing them */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:31"><expr pos:start="77:9" pos:end="77:30"><name pos:start="77:9" pos:end="77:26"><name pos:start="77:9" pos:end="77:9">h</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:26">nal_length_size</name></name> <operator pos:start="77:28" pos:end="77:28">=</operator> <literal type="number" pos:start="77:30" pos:end="77:30">2</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="79:9" pos:end="79:31">// Decode sps from avcC</comment>

        <expr_stmt pos:start="81:9" pos:end="81:28"><expr pos:start="81:9" pos:end="81:27"><name pos:start="81:9" pos:end="81:11">cnt</name> <operator pos:start="81:13" pos:end="81:13">=</operator> <operator pos:start="81:15" pos:end="81:15">*</operator><operator pos:start="81:16" pos:end="81:16">(</operator><name pos:start="81:17" pos:end="81:17">p</name><operator pos:start="81:18" pos:end="81:18">+</operator><literal type="number" pos:start="81:19" pos:end="81:19">5</literal><operator pos:start="81:20" pos:end="81:20">)</operator> <operator pos:start="81:22" pos:end="81:22">&amp;</operator> <literal type="number" pos:start="81:24" pos:end="81:27">0x1f</literal></expr>;</expr_stmt> <comment type="line" pos:start="81:30" pos:end="81:45">// Number of sps</comment>

        <expr_stmt pos:start="83:9" pos:end="83:15"><expr pos:start="83:9" pos:end="83:14"><name pos:start="83:9" pos:end="83:9">p</name> <operator pos:start="83:11" pos:end="83:12">+=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">6</literal></expr>;</expr_stmt>

        <for pos:start="85:9" pos:end="99:9">for <control pos:start="85:13" pos:end="85:33">(<init pos:start="85:14" pos:end="85:19"><expr pos:start="85:14" pos:end="85:18"><name pos:start="85:14" pos:end="85:14">i</name> <operator pos:start="85:16" pos:end="85:16">=</operator> <literal type="number" pos:start="85:18" pos:end="85:18">0</literal></expr>;</init> <condition pos:start="85:21" pos:end="85:28"><expr pos:start="85:21" pos:end="85:27"><name pos:start="85:21" pos:end="85:21">i</name> <operator pos:start="85:23" pos:end="85:23">&lt;</operator> <name pos:start="85:25" pos:end="85:27">cnt</name></expr>;</condition> <incr pos:start="85:30" pos:end="85:32"><expr pos:start="85:30" pos:end="85:32"><name pos:start="85:30" pos:end="85:30">i</name><operator pos:start="85:31" pos:end="85:32">++</operator></expr></incr>)</control> <block pos:start="85:35" pos:end="99:9">{<block_content pos:start="87:13" pos:end="97:25">

            <expr_stmt pos:start="87:13" pos:end="87:35"><expr pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:19">nalsize</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <call pos:start="87:23" pos:end="87:30"><name pos:start="87:23" pos:end="87:27">BE_16</name><argument_list pos:start="87:28" pos:end="87:30">(<argument pos:start="87:29" pos:end="87:29"><expr pos:start="87:29" pos:end="87:29"><name pos:start="87:29" pos:end="87:29">p</name></expr></argument>)</argument_list></call> <operator pos:start="87:32" pos:end="87:32">+</operator> <literal type="number" pos:start="87:34" pos:end="87:34">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="89:13" pos:end="95:13"><if pos:start="89:13" pos:end="95:13">if<condition pos:start="89:15" pos:end="89:51">(<expr pos:start="89:16" pos:end="89:50"><call pos:start="89:16" pos:end="89:46"><name pos:start="89:16" pos:end="89:31">decode_nal_units</name><argument_list pos:start="89:32" pos:end="89:46">(<argument pos:start="89:33" pos:end="89:33"><expr pos:start="89:33" pos:end="89:33"><name pos:start="89:33" pos:end="89:33">h</name></expr></argument>, <argument pos:start="89:36" pos:end="89:36"><expr pos:start="89:36" pos:end="89:36"><name pos:start="89:36" pos:end="89:36">p</name></expr></argument>, <argument pos:start="89:39" pos:end="89:45"><expr pos:start="89:39" pos:end="89:45"><name pos:start="89:39" pos:end="89:45">nalsize</name></expr></argument>)</argument_list></call> <operator pos:start="89:48" pos:end="89:48">&lt;</operator> <literal type="number" pos:start="89:50" pos:end="89:50">0</literal></expr>)</condition> <block pos:start="89:53" pos:end="95:13">{<block_content pos:start="91:17" pos:end="93:26">

                <expr_stmt pos:start="91:17" pos:end="91:85"><expr pos:start="91:17" pos:end="91:84"><call pos:start="91:17" pos:end="91:84"><name pos:start="91:17" pos:end="91:22">av_log</name><argument_list pos:start="91:23" pos:end="91:84">(<argument pos:start="91:24" pos:end="91:28"><expr pos:start="91:24" pos:end="91:28"><name pos:start="91:24" pos:end="91:28">avctx</name></expr></argument>, <argument pos:start="91:31" pos:end="91:42"><expr pos:start="91:31" pos:end="91:42"><name pos:start="91:31" pos:end="91:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="91:45" pos:end="91:80"><expr pos:start="91:45" pos:end="91:80"><literal type="string" pos:start="91:45" pos:end="91:80">"Decoding sps %d from avcC failed\n"</literal></expr></argument>, <argument pos:start="91:83" pos:end="91:83"><expr pos:start="91:83" pos:end="91:83"><name pos:start="91:83" pos:end="91:83">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="93:17" pos:end="93:26">return <expr pos:start="93:24" pos:end="93:25"><operator pos:start="93:24" pos:end="93:24">-</operator><literal type="number" pos:start="93:25" pos:end="93:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:25"><expr pos:start="97:13" pos:end="97:24"><name pos:start="97:13" pos:end="97:13">p</name> <operator pos:start="97:15" pos:end="97:16">+=</operator> <name pos:start="97:18" pos:end="97:24">nalsize</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="line" pos:start="101:9" pos:end="101:31">// Decode pps from avcC</comment>

        <expr_stmt pos:start="103:9" pos:end="103:21"><expr pos:start="103:9" pos:end="103:20"><name pos:start="103:9" pos:end="103:11">cnt</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <operator pos:start="103:15" pos:end="103:15">*</operator><operator pos:start="103:16" pos:end="103:16">(</operator><name pos:start="103:17" pos:end="103:17">p</name><operator pos:start="103:18" pos:end="103:19">++</operator><operator pos:start="103:20" pos:end="103:20">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="103:23" pos:end="103:38">// Number of pps</comment>

        <for pos:start="105:9" pos:end="119:9">for <control pos:start="105:13" pos:end="105:33">(<init pos:start="105:14" pos:end="105:19"><expr pos:start="105:14" pos:end="105:18"><name pos:start="105:14" pos:end="105:14">i</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <literal type="number" pos:start="105:18" pos:end="105:18">0</literal></expr>;</init> <condition pos:start="105:21" pos:end="105:28"><expr pos:start="105:21" pos:end="105:27"><name pos:start="105:21" pos:end="105:21">i</name> <operator pos:start="105:23" pos:end="105:23">&lt;</operator> <name pos:start="105:25" pos:end="105:27">cnt</name></expr>;</condition> <incr pos:start="105:30" pos:end="105:32"><expr pos:start="105:30" pos:end="105:32"><name pos:start="105:30" pos:end="105:30">i</name><operator pos:start="105:31" pos:end="105:32">++</operator></expr></incr>)</control> <block pos:start="105:35" pos:end="119:9">{<block_content pos:start="107:13" pos:end="117:25">

            <expr_stmt pos:start="107:13" pos:end="107:35"><expr pos:start="107:13" pos:end="107:34"><name pos:start="107:13" pos:end="107:19">nalsize</name> <operator pos:start="107:21" pos:end="107:21">=</operator> <call pos:start="107:23" pos:end="107:30"><name pos:start="107:23" pos:end="107:27">BE_16</name><argument_list pos:start="107:28" pos:end="107:30">(<argument pos:start="107:29" pos:end="107:29"><expr pos:start="107:29" pos:end="107:29"><name pos:start="107:29" pos:end="107:29">p</name></expr></argument>)</argument_list></call> <operator pos:start="107:32" pos:end="107:32">+</operator> <literal type="number" pos:start="107:34" pos:end="107:34">2</literal></expr>;</expr_stmt>

            <if_stmt pos:start="109:13" pos:end="115:13"><if pos:start="109:13" pos:end="115:13">if<condition pos:start="109:15" pos:end="109:59">(<expr pos:start="109:16" pos:end="109:58"><call pos:start="109:16" pos:end="109:46"><name pos:start="109:16" pos:end="109:31">decode_nal_units</name><argument_list pos:start="109:32" pos:end="109:46">(<argument pos:start="109:33" pos:end="109:33"><expr pos:start="109:33" pos:end="109:33"><name pos:start="109:33" pos:end="109:33">h</name></expr></argument>, <argument pos:start="109:36" pos:end="109:36"><expr pos:start="109:36" pos:end="109:36"><name pos:start="109:36" pos:end="109:36">p</name></expr></argument>, <argument pos:start="109:39" pos:end="109:45"><expr pos:start="109:39" pos:end="109:45"><name pos:start="109:39" pos:end="109:45">nalsize</name></expr></argument>)</argument_list></call>  <operator pos:start="109:49" pos:end="109:50">!=</operator> <name pos:start="109:52" pos:end="109:58">nalsize</name></expr>)</condition> <block pos:start="109:61" pos:end="115:13">{<block_content pos:start="111:17" pos:end="113:26">

                <expr_stmt pos:start="111:17" pos:end="111:85"><expr pos:start="111:17" pos:end="111:84"><call pos:start="111:17" pos:end="111:84"><name pos:start="111:17" pos:end="111:22">av_log</name><argument_list pos:start="111:23" pos:end="111:84">(<argument pos:start="111:24" pos:end="111:28"><expr pos:start="111:24" pos:end="111:28"><name pos:start="111:24" pos:end="111:28">avctx</name></expr></argument>, <argument pos:start="111:31" pos:end="111:42"><expr pos:start="111:31" pos:end="111:42"><name pos:start="111:31" pos:end="111:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:45" pos:end="111:80"><expr pos:start="111:45" pos:end="111:80"><literal type="string" pos:start="111:45" pos:end="111:80">"Decoding pps %d from avcC failed\n"</literal></expr></argument>, <argument pos:start="111:83" pos:end="111:83"><expr pos:start="111:83" pos:end="111:83"><name pos:start="111:83" pos:end="111:83">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="113:17" pos:end="113:26">return <expr pos:start="113:24" pos:end="113:25"><operator pos:start="113:24" pos:end="113:24">-</operator><literal type="number" pos:start="113:25" pos:end="113:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:25"><expr pos:start="117:13" pos:end="117:24"><name pos:start="117:13" pos:end="117:13">p</name> <operator pos:start="117:15" pos:end="117:16">+=</operator> <name pos:start="117:18" pos:end="117:24">nalsize</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="line" pos:start="121:9" pos:end="121:84">// Now store right nal length size, that will be use to parse all other nals</comment>

        <expr_stmt pos:start="123:9" pos:end="123:73"><expr pos:start="123:9" pos:end="123:72"><name pos:start="123:9" pos:end="123:26"><name pos:start="123:9" pos:end="123:9">h</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:26">nal_length_size</name></name> <operator pos:start="123:28" pos:end="123:28">=</operator> <operator pos:start="123:30" pos:end="123:30">(</operator><operator pos:start="123:31" pos:end="123:31">(</operator><operator pos:start="123:32" pos:end="123:32">*</operator><operator pos:start="123:33" pos:end="123:33">(</operator><operator pos:start="123:34" pos:end="123:34">(</operator><operator pos:start="123:35" pos:end="123:35">(</operator><name pos:start="123:36" pos:end="123:39">char</name><operator pos:start="123:40" pos:end="123:40">*</operator><operator pos:start="123:41" pos:end="123:41">)</operator><operator pos:start="123:42" pos:end="123:42">(</operator><name pos:start="123:43" pos:end="123:58"><name pos:start="123:43" pos:end="123:47">avctx</name><operator pos:start="123:48" pos:end="123:49">-&gt;</operator><name pos:start="123:50" pos:end="123:58">extradata</name></name><operator pos:start="123:59" pos:end="123:59">)</operator><operator pos:start="123:60" pos:end="123:60">)</operator><operator pos:start="123:61" pos:end="123:61">+</operator><literal type="number" pos:start="123:62" pos:end="123:62">4</literal><operator pos:start="123:63" pos:end="123:63">)</operator><operator pos:start="123:64" pos:end="123:64">)</operator><operator pos:start="123:65" pos:end="123:65">&amp;</operator><literal type="number" pos:start="123:66" pos:end="123:69">0x03</literal><operator pos:start="123:70" pos:end="123:70">)</operator><operator pos:start="123:71" pos:end="123:71">+</operator><literal type="number" pos:start="123:72" pos:end="123:72">1</literal></expr>;</expr_stmt>

        <comment type="line" pos:start="125:9" pos:end="125:30">// Do not reparse avcC</comment>

        <expr_stmt pos:start="127:9" pos:end="127:24"><expr pos:start="127:9" pos:end="127:23"><name pos:start="127:9" pos:end="127:19"><name pos:start="127:9" pos:end="127:9">h</name><operator pos:start="127:10" pos:end="127:11">-&gt;</operator><name pos:start="127:12" pos:end="127:19">got_avcC</name></name> <operator pos:start="127:21" pos:end="127:21">=</operator> <literal type="number" pos:start="127:23" pos:end="127:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if<condition pos:start="133:7" pos:end="133:70">(<expr pos:start="133:8" pos:end="133:69"><operator pos:start="133:8" pos:end="133:8">!</operator><name pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:9">h</name><operator pos:start="133:10" pos:end="133:11">-&gt;</operator><name pos:start="133:12" pos:end="133:17">is_avc</name></name> <operator pos:start="133:19" pos:end="133:20">&amp;&amp;</operator> <name pos:start="133:22" pos:end="133:45"><name pos:start="133:22" pos:end="133:22">s</name><operator pos:start="133:23" pos:end="133:24">-&gt;</operator><name pos:start="133:25" pos:end="133:29">avctx</name><operator pos:start="133:30" pos:end="133:31">-&gt;</operator><name pos:start="133:32" pos:end="133:45">extradata_size</name></name> <operator pos:start="133:47" pos:end="133:48">&amp;&amp;</operator> <name pos:start="133:50" pos:end="133:66"><name pos:start="133:50" pos:end="133:50">s</name><operator pos:start="133:51" pos:end="133:52">-&gt;</operator><name pos:start="133:53" pos:end="133:66">picture_number</name></name><operator pos:start="133:67" pos:end="133:68">==</operator><literal type="number" pos:start="133:69" pos:end="133:69">0</literal></expr>)</condition><block pos:start="133:71" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:22">

        <if_stmt pos:start="135:9" pos:end="137:22"><if pos:start="135:9" pos:end="137:22">if<condition pos:start="135:11" pos:end="135:82">(<expr pos:start="135:12" pos:end="135:81"><call pos:start="135:12" pos:end="135:77"><name pos:start="135:12" pos:end="135:27">decode_nal_units</name><argument_list pos:start="135:28" pos:end="135:77">(<argument pos:start="135:29" pos:end="135:29"><expr pos:start="135:29" pos:end="135:29"><name pos:start="135:29" pos:end="135:29">h</name></expr></argument>, <argument pos:start="135:32" pos:end="135:50"><expr pos:start="135:32" pos:end="135:50"><name pos:start="135:32" pos:end="135:50"><name pos:start="135:32" pos:end="135:32">s</name><operator pos:start="135:33" pos:end="135:34">-&gt;</operator><name pos:start="135:35" pos:end="135:39">avctx</name><operator pos:start="135:40" pos:end="135:41">-&gt;</operator><name pos:start="135:42" pos:end="135:50">extradata</name></name></expr></argument>, <argument pos:start="135:53" pos:end="135:76"><expr pos:start="135:53" pos:end="135:76"><name pos:start="135:53" pos:end="135:76"><name pos:start="135:53" pos:end="135:53">s</name><operator pos:start="135:54" pos:end="135:55">-&gt;</operator><name pos:start="135:56" pos:end="135:60">avctx</name><operator pos:start="135:61" pos:end="135:62">-&gt;</operator><name pos:start="135:63" pos:end="135:76">extradata_size</name></name></expr></argument>)</argument_list></call> <operator pos:start="135:79" pos:end="135:79">&lt;</operator> <literal type="number" pos:start="135:81" pos:end="135:81">0</literal></expr>)</condition><block type="pseudo" pos:start="137:13" pos:end="137:22"><block_content pos:start="137:13" pos:end="137:22">

            <return pos:start="137:13" pos:end="137:22">return <expr pos:start="137:20" pos:end="137:21"><operator pos:start="137:20" pos:end="137:20">-</operator><literal type="number" pos:start="137:21" pos:end="137:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:49"><expr pos:start="143:5" pos:end="143:48"><name pos:start="143:5" pos:end="143:13">buf_index</name><operator pos:start="143:14" pos:end="143:14">=</operator><call pos:start="143:15" pos:end="143:48"><name pos:start="143:15" pos:end="143:30">decode_nal_units</name><argument_list pos:start="143:31" pos:end="143:48">(<argument pos:start="143:32" pos:end="143:32"><expr pos:start="143:32" pos:end="143:32"><name pos:start="143:32" pos:end="143:32">h</name></expr></argument>, <argument pos:start="143:35" pos:end="143:37"><expr pos:start="143:35" pos:end="143:37"><name pos:start="143:35" pos:end="143:37">buf</name></expr></argument>, <argument pos:start="143:40" pos:end="143:47"><expr pos:start="143:40" pos:end="143:47"><name pos:start="143:40" pos:end="143:47">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="145:5" pos:end="147:18"><if pos:start="145:5" pos:end="147:18">if<condition pos:start="145:7" pos:end="145:21">(<expr pos:start="145:8" pos:end="145:20"><name pos:start="145:8" pos:end="145:16">buf_index</name> <operator pos:start="145:18" pos:end="145:18">&lt;</operator> <literal type="number" pos:start="145:20" pos:end="145:20">0</literal></expr>)</condition><block type="pseudo" pos:start="147:9" pos:end="147:18"><block_content pos:start="147:9" pos:end="147:18">

        <return pos:start="147:9" pos:end="147:18">return <expr pos:start="147:16" pos:end="147:17"><operator pos:start="147:16" pos:end="147:16">-</operator><literal type="number" pos:start="147:17" pos:end="147:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="151:5" pos:end="151:58">//FIXME do something with unavailable reference frames</comment>



<comment type="line" pos:start="155:1" pos:end="155:79">//    if(ret==FRAME_SKIPPED) return get_consumed_bytes(s, buf_index, buf_size);</comment>

    <if_stmt pos:start="157:5" pos:end="163:5"><if pos:start="157:5" pos:end="163:5">if<condition pos:start="157:7" pos:end="157:31">(<expr pos:start="157:8" pos:end="157:30"><operator pos:start="157:8" pos:end="157:8">!</operator><name pos:start="157:9" pos:end="157:30"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:30">current_picture_ptr</name></name></expr>)</condition><block pos:start="157:32" pos:end="163:5">{<block_content pos:start="159:9" pos:end="161:18">

        <expr_stmt pos:start="159:9" pos:end="159:62"><expr pos:start="159:9" pos:end="159:61"><call pos:start="159:9" pos:end="159:61"><name pos:start="159:9" pos:end="159:14">av_log</name><argument_list pos:start="159:15" pos:end="159:61">(<argument pos:start="159:16" pos:end="159:25"><expr pos:start="159:16" pos:end="159:25"><name pos:start="159:16" pos:end="159:25"><name pos:start="159:16" pos:end="159:16">h</name><operator pos:start="159:17" pos:end="159:18">-&gt;</operator><name pos:start="159:19" pos:end="159:19">s</name><operator pos:start="159:20" pos:end="159:20">.</operator><name pos:start="159:21" pos:end="159:25">avctx</name></name></expr></argument>, <argument pos:start="159:28" pos:end="159:39"><expr pos:start="159:28" pos:end="159:39"><name pos:start="159:28" pos:end="159:39">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="159:42" pos:end="159:60"><expr pos:start="159:42" pos:end="159:60"><literal type="string" pos:start="159:42" pos:end="159:60">"error, NO frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="161:9" pos:end="161:18">return <expr pos:start="161:16" pos:end="161:17"><operator pos:start="161:16" pos:end="161:16">-</operator><literal type="number" pos:start="161:17" pos:end="161:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <block pos:start="167:5" pos:end="309:5">{<block_content pos:start="169:9" pos:end="307:56">

        <decl_stmt pos:start="169:9" pos:end="176:0"><decl pos:start="169:9" pos:end="169:45"><type pos:start="169:9" pos:end="169:17"><name pos:start="169:9" pos:end="169:15">Picture</name> <modifier pos:start="169:17" pos:end="169:17">*</modifier></type><name pos:start="169:18" pos:end="169:20">out</name> <init pos:start="169:22" pos:end="169:45">= <expr pos:start="169:24" pos:end="169:45"><name pos:start="169:24" pos:end="169:45"><name pos:start="169:24" pos:end="169:24">s</name><operator pos:start="169:25" pos:end="169:26">-&gt;</operator><name pos:start="169:27" pos:end="169:45">current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="171:1" pos:end="171:5">#<cpp:directive pos:start="171:2" pos:end="171:3">if</cpp:directive> <expr pos:start="171:5" pos:end="171:5"><literal type="number" pos:start="171:5" pos:end="171:5">0</literal></expr></cpp:if> <comment type="line" pos:start="171:7" pos:end="171:20">//decode order</comment>

        *data_size = sizeof(AVFrame);

<cpp:else pos:start="175:1" pos:end="175:5">#<cpp:directive pos:start="175:2" pos:end="175:5">else</cpp:directive></cpp:else>

        <comment type="block" pos:start="177:9" pos:end="177:46">/* Sort B-frames into display order */</comment>

        <decl_stmt pos:start="179:9" pos:end="179:46"><decl pos:start="179:9" pos:end="179:45"><type pos:start="179:9" pos:end="179:17"><name pos:start="179:9" pos:end="179:15">Picture</name> <modifier pos:start="179:17" pos:end="179:17">*</modifier></type><name pos:start="179:18" pos:end="179:20">cur</name> <init pos:start="179:22" pos:end="179:45">= <expr pos:start="179:24" pos:end="179:45"><name pos:start="179:24" pos:end="179:45"><name pos:start="179:24" pos:end="179:24">s</name><operator pos:start="179:25" pos:end="179:26">-&gt;</operator><name pos:start="179:27" pos:end="179:45">current_picture_ptr</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="181:9" pos:end="181:46"><decl pos:start="181:9" pos:end="181:45"><type pos:start="181:9" pos:end="181:17"><name pos:start="181:9" pos:end="181:15">Picture</name> <modifier pos:start="181:17" pos:end="181:17">*</modifier></type><name pos:start="181:18" pos:end="181:21">prev</name> <init pos:start="181:23" pos:end="181:45">= <expr pos:start="181:25" pos:end="181:45"><name pos:start="181:25" pos:end="181:45"><name pos:start="181:25" pos:end="181:25">h</name><operator pos:start="181:26" pos:end="181:27">-&gt;</operator><name pos:start="181:28" pos:end="181:45">delayed_output_pic</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="183:9" pos:end="183:24"><decl pos:start="183:9" pos:end="183:23"><type pos:start="183:9" pos:end="183:11"><name pos:start="183:9" pos:end="183:11">int</name></type> <name pos:start="183:13" pos:end="183:19">out_idx</name> <init pos:start="183:21" pos:end="183:23">= <expr pos:start="183:23" pos:end="183:23"><literal type="number" pos:start="183:23" pos:end="183:23">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="185:9" pos:end="185:21"><decl pos:start="185:9" pos:end="185:20"><type pos:start="185:9" pos:end="185:11"><name pos:start="185:9" pos:end="185:11">int</name></type> <name pos:start="185:13" pos:end="185:16">pics</name> <init pos:start="185:18" pos:end="185:20">= <expr pos:start="185:20" pos:end="185:20"><literal type="number" pos:start="185:20" pos:end="185:20">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="187:9" pos:end="187:25"><decl pos:start="187:9" pos:end="187:24"><type pos:start="187:9" pos:end="187:11"><name pos:start="187:9" pos:end="187:11">int</name></type> <name pos:start="187:13" pos:end="187:24">out_of_order</name></decl>;</decl_stmt>

        <decl_stmt pos:start="189:9" pos:end="189:26"><decl pos:start="189:9" pos:end="189:25"><type pos:start="189:9" pos:end="189:11"><name pos:start="189:9" pos:end="189:11">int</name></type> <name pos:start="189:13" pos:end="189:21">cross_idr</name> <init pos:start="189:23" pos:end="189:25">= <expr pos:start="189:25" pos:end="189:25"><literal type="number" pos:start="189:25" pos:end="189:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="191:9" pos:end="191:30"><decl pos:start="191:9" pos:end="191:29"><type pos:start="191:9" pos:end="191:11"><name pos:start="191:9" pos:end="191:11">int</name></type> <name pos:start="191:13" pos:end="191:25">dropped_frame</name> <init pos:start="191:27" pos:end="191:29">= <expr pos:start="191:29" pos:end="191:29"><literal type="number" pos:start="191:29" pos:end="191:29">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="193:9" pos:end="193:14"><decl pos:start="193:9" pos:end="193:13"><type pos:start="193:9" pos:end="193:11"><name pos:start="193:9" pos:end="193:11">int</name></type> <name pos:start="193:13" pos:end="193:13">i</name></decl>;</decl_stmt>



        <if_stmt pos:start="197:9" pos:end="205:9"><if pos:start="197:9" pos:end="205:9">if<condition pos:start="197:11" pos:end="199:65">(<expr pos:start="197:12" pos:end="199:64"><name pos:start="197:12" pos:end="197:44"><name pos:start="197:12" pos:end="197:12">h</name><operator pos:start="197:13" pos:end="197:14">-&gt;</operator><name pos:start="197:15" pos:end="197:17">sps</name><operator pos:start="197:18" pos:end="197:18">.</operator><name pos:start="197:19" pos:end="197:44">bitstream_restriction_flag</name></name>

           <operator pos:start="199:12" pos:end="199:13">&amp;&amp;</operator> <name pos:start="199:15" pos:end="199:36"><name pos:start="199:15" pos:end="199:15">s</name><operator pos:start="199:16" pos:end="199:17">-&gt;</operator><name pos:start="199:18" pos:end="199:22">avctx</name><operator pos:start="199:23" pos:end="199:24">-&gt;</operator><name pos:start="199:25" pos:end="199:36">has_b_frames</name></name> <operator pos:start="199:38" pos:end="199:38">&lt;</operator> <name pos:start="199:40" pos:end="199:64"><name pos:start="199:40" pos:end="199:40">h</name><operator pos:start="199:41" pos:end="199:42">-&gt;</operator><name pos:start="199:43" pos:end="199:45">sps</name><operator pos:start="199:46" pos:end="199:46">.</operator><name pos:start="199:47" pos:end="199:64">num_reorder_frames</name></name></expr>)</condition><block pos:start="199:66" pos:end="205:9">{<block_content pos:start="201:13" pos:end="203:29">

            <expr_stmt pos:start="201:13" pos:end="201:63"><expr pos:start="201:13" pos:end="201:62"><name pos:start="201:13" pos:end="201:34"><name pos:start="201:13" pos:end="201:13">s</name><operator pos:start="201:14" pos:end="201:15">-&gt;</operator><name pos:start="201:16" pos:end="201:20">avctx</name><operator pos:start="201:21" pos:end="201:22">-&gt;</operator><name pos:start="201:23" pos:end="201:34">has_b_frames</name></name> <operator pos:start="201:36" pos:end="201:36">=</operator> <name pos:start="201:38" pos:end="201:62"><name pos:start="201:38" pos:end="201:38">h</name><operator pos:start="201:39" pos:end="201:40">-&gt;</operator><name pos:start="201:41" pos:end="201:43">sps</name><operator pos:start="201:44" pos:end="201:44">.</operator><name pos:start="201:45" pos:end="201:62">num_reorder_frames</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:29"><expr pos:start="203:13" pos:end="203:28"><name pos:start="203:13" pos:end="203:24"><name pos:start="203:13" pos:end="203:13">s</name><operator pos:start="203:14" pos:end="203:15">-&gt;</operator><name pos:start="203:16" pos:end="203:24">low_delay</name></name> <operator pos:start="203:26" pos:end="203:26">=</operator> <literal type="number" pos:start="203:28" pos:end="203:28">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <while pos:start="209:9" pos:end="209:43">while<condition pos:start="209:14" pos:end="209:35">(<expr pos:start="209:15" pos:end="209:34"><name pos:start="209:15" pos:end="209:34"><name pos:start="209:15" pos:end="209:15">h</name><operator pos:start="209:16" pos:end="209:17">-&gt;</operator><name pos:start="209:18" pos:end="209:28">delayed_pic</name><index pos:start="209:29" pos:end="209:34">[<expr pos:start="209:30" pos:end="209:33"><name pos:start="209:30" pos:end="209:33">pics</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="209:37" pos:end="209:43"><block_content pos:start="209:37" pos:end="209:43"> <expr_stmt pos:start="209:37" pos:end="209:43"><expr pos:start="209:37" pos:end="209:42"><name pos:start="209:37" pos:end="209:40">pics</name><operator pos:start="209:41" pos:end="209:42">++</operator></expr>;</expr_stmt></block_content></block></while>

        <expr_stmt pos:start="211:9" pos:end="211:37"><expr pos:start="211:9" pos:end="211:36"><name pos:start="211:9" pos:end="211:30"><name pos:start="211:9" pos:end="211:9">h</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:22">delayed_pic</name><index pos:start="211:23" pos:end="211:30">[<expr pos:start="211:24" pos:end="211:29"><name pos:start="211:24" pos:end="211:27">pics</name><operator pos:start="211:28" pos:end="211:29">++</operator></expr>]</index></name> <operator pos:start="211:32" pos:end="211:32">=</operator> <name pos:start="211:34" pos:end="211:36">cur</name></expr>;</expr_stmt>

        <if_stmt pos:start="213:9" pos:end="215:31"><if pos:start="213:9" pos:end="215:31">if<condition pos:start="213:11" pos:end="213:31">(<expr pos:start="213:12" pos:end="213:30"><name pos:start="213:12" pos:end="213:25"><name pos:start="213:12" pos:end="213:14">cur</name><operator pos:start="213:15" pos:end="213:16">-&gt;</operator><name pos:start="213:17" pos:end="213:25">reference</name></name> <operator pos:start="213:27" pos:end="213:28">==</operator> <literal type="number" pos:start="213:30" pos:end="213:30">0</literal></expr>)</condition><block type="pseudo" pos:start="215:13" pos:end="215:31"><block_content pos:start="215:13" pos:end="215:31">

            <expr_stmt pos:start="215:13" pos:end="215:31"><expr pos:start="215:13" pos:end="215:30"><name pos:start="215:13" pos:end="215:26"><name pos:start="215:13" pos:end="215:15">cur</name><operator pos:start="215:16" pos:end="215:17">-&gt;</operator><name pos:start="215:18" pos:end="215:26">reference</name></name> <operator pos:start="215:28" pos:end="215:28">=</operator> <literal type="number" pos:start="215:30" pos:end="215:30">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="219:9" pos:end="223:30">for<control pos:start="219:12" pos:end="219:40">(<init pos:start="219:13" pos:end="219:16"><expr pos:start="219:13" pos:end="219:15"><name pos:start="219:13" pos:end="219:13">i</name><operator pos:start="219:14" pos:end="219:14">=</operator><literal type="number" pos:start="219:15" pos:end="219:15">0</literal></expr>;</init> <condition pos:start="219:18" pos:end="219:35"><expr pos:start="219:18" pos:end="219:34"><name pos:start="219:18" pos:end="219:34"><name pos:start="219:18" pos:end="219:18">h</name><operator pos:start="219:19" pos:end="219:20">-&gt;</operator><name pos:start="219:21" pos:end="219:31">delayed_pic</name><index pos:start="219:32" pos:end="219:34">[<expr pos:start="219:33" pos:end="219:33"><name pos:start="219:33" pos:end="219:33">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="219:37" pos:end="219:39"><expr pos:start="219:37" pos:end="219:39"><name pos:start="219:37" pos:end="219:37">i</name><operator pos:start="219:38" pos:end="219:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="221:13" pos:end="223:30"><block_content pos:start="221:13" pos:end="223:30">

            <if_stmt pos:start="221:13" pos:end="223:30"><if pos:start="221:13" pos:end="223:30">if<condition pos:start="221:15" pos:end="221:73">(<expr pos:start="221:16" pos:end="221:72"><name pos:start="221:16" pos:end="221:32"><name pos:start="221:16" pos:end="221:16">h</name><operator pos:start="221:17" pos:end="221:18">-&gt;</operator><name pos:start="221:19" pos:end="221:29">delayed_pic</name><index pos:start="221:30" pos:end="221:32">[<expr pos:start="221:31" pos:end="221:31"><name pos:start="221:31" pos:end="221:31">i</name></expr>]</index></name><operator pos:start="221:33" pos:end="221:34">-&gt;</operator><name pos:start="221:35" pos:end="221:43">key_frame</name> <operator pos:start="221:45" pos:end="221:46">||</operator> <name pos:start="221:48" pos:end="221:64"><name pos:start="221:48" pos:end="221:48">h</name><operator pos:start="221:49" pos:end="221:50">-&gt;</operator><name pos:start="221:51" pos:end="221:61">delayed_pic</name><index pos:start="221:62" pos:end="221:64">[<expr pos:start="221:63" pos:end="221:63"><name pos:start="221:63" pos:end="221:63">i</name></expr>]</index></name><operator pos:start="221:65" pos:end="221:66">-&gt;</operator><name pos:start="221:67" pos:end="221:69">poc</name><operator pos:start="221:70" pos:end="221:71">==</operator><literal type="number" pos:start="221:72" pos:end="221:72">0</literal></expr>)</condition><block type="pseudo" pos:start="223:17" pos:end="223:30"><block_content pos:start="223:17" pos:end="223:30">

                <expr_stmt pos:start="223:17" pos:end="223:30"><expr pos:start="223:17" pos:end="223:29"><name pos:start="223:17" pos:end="223:25">cross_idr</name> <operator pos:start="223:27" pos:end="223:27">=</operator> <literal type="number" pos:start="223:29" pos:end="223:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



        <expr_stmt pos:start="227:9" pos:end="227:32"><expr pos:start="227:9" pos:end="227:31"><name pos:start="227:9" pos:end="227:11">out</name> <operator pos:start="227:13" pos:end="227:13">=</operator> <name pos:start="227:15" pos:end="227:31"><name pos:start="227:15" pos:end="227:15">h</name><operator pos:start="227:16" pos:end="227:17">-&gt;</operator><name pos:start="227:18" pos:end="227:28">delayed_pic</name><index pos:start="227:29" pos:end="227:31">[<expr pos:start="227:30" pos:end="227:30"><literal type="number" pos:start="227:30" pos:end="227:30">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <for pos:start="229:9" pos:end="237:13">for<control pos:start="229:12" pos:end="229:73">(<init pos:start="229:13" pos:end="229:16"><expr pos:start="229:13" pos:end="229:15"><name pos:start="229:13" pos:end="229:13">i</name><operator pos:start="229:14" pos:end="229:14">=</operator><literal type="number" pos:start="229:15" pos:end="229:15">1</literal></expr>;</init> <condition pos:start="229:18" pos:end="229:68"><expr pos:start="229:18" pos:end="229:67"><name pos:start="229:18" pos:end="229:34"><name pos:start="229:18" pos:end="229:18">h</name><operator pos:start="229:19" pos:end="229:20">-&gt;</operator><name pos:start="229:21" pos:end="229:31">delayed_pic</name><index pos:start="229:32" pos:end="229:34">[<expr pos:start="229:33" pos:end="229:33"><name pos:start="229:33" pos:end="229:33">i</name></expr>]</index></name> <operator pos:start="229:36" pos:end="229:37">&amp;&amp;</operator> <operator pos:start="229:39" pos:end="229:39">!</operator><name pos:start="229:40" pos:end="229:56"><name pos:start="229:40" pos:end="229:40">h</name><operator pos:start="229:41" pos:end="229:42">-&gt;</operator><name pos:start="229:43" pos:end="229:53">delayed_pic</name><index pos:start="229:54" pos:end="229:56">[<expr pos:start="229:55" pos:end="229:55"><name pos:start="229:55" pos:end="229:55">i</name></expr>]</index></name><operator pos:start="229:57" pos:end="229:58">-&gt;</operator><name pos:start="229:59" pos:end="229:67">key_frame</name></expr>;</condition> <incr pos:start="229:70" pos:end="229:72"><expr pos:start="229:70" pos:end="229:72"><name pos:start="229:70" pos:end="229:70">i</name><operator pos:start="229:71" pos:end="229:72">++</operator></expr></incr>)</control><block type="pseudo" pos:start="231:13" pos:end="237:13"><block_content pos:start="231:13" pos:end="237:13">

            <if_stmt pos:start="231:13" pos:end="237:13"><if pos:start="231:13" pos:end="237:13">if<condition pos:start="231:15" pos:end="231:49">(<expr pos:start="231:16" pos:end="231:48"><name pos:start="231:16" pos:end="231:32"><name pos:start="231:16" pos:end="231:16">h</name><operator pos:start="231:17" pos:end="231:18">-&gt;</operator><name pos:start="231:19" pos:end="231:29">delayed_pic</name><index pos:start="231:30" pos:end="231:32">[<expr pos:start="231:31" pos:end="231:31"><name pos:start="231:31" pos:end="231:31">i</name></expr>]</index></name><operator pos:start="231:33" pos:end="231:34">-&gt;</operator><name pos:start="231:35" pos:end="231:37">poc</name> <operator pos:start="231:39" pos:end="231:39">&lt;</operator> <name pos:start="231:41" pos:end="231:48"><name pos:start="231:41" pos:end="231:43">out</name><operator pos:start="231:44" pos:end="231:45">-&gt;</operator><name pos:start="231:46" pos:end="231:48">poc</name></name></expr>)</condition><block pos:start="231:50" pos:end="237:13">{<block_content pos:start="233:17" pos:end="235:28">

                <expr_stmt pos:start="233:17" pos:end="233:40"><expr pos:start="233:17" pos:end="233:39"><name pos:start="233:17" pos:end="233:19">out</name> <operator pos:start="233:21" pos:end="233:21">=</operator> <name pos:start="233:23" pos:end="233:39"><name pos:start="233:23" pos:end="233:23">h</name><operator pos:start="233:24" pos:end="233:25">-&gt;</operator><name pos:start="233:26" pos:end="233:36">delayed_pic</name><index pos:start="233:37" pos:end="233:39">[<expr pos:start="233:38" pos:end="233:38"><name pos:start="233:38" pos:end="233:38">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:28"><expr pos:start="235:17" pos:end="235:27"><name pos:start="235:17" pos:end="235:23">out_idx</name> <operator pos:start="235:25" pos:end="235:25">=</operator> <name pos:start="235:27" pos:end="235:27">i</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt></block_content></block></for>



        <expr_stmt pos:start="241:9" pos:end="241:66"><expr pos:start="241:9" pos:end="241:65"><name pos:start="241:9" pos:end="241:20">out_of_order</name> <operator pos:start="241:22" pos:end="241:22">=</operator> <operator pos:start="241:24" pos:end="241:24">!</operator><name pos:start="241:25" pos:end="241:33">cross_idr</name> <operator pos:start="241:35" pos:end="241:36">&amp;&amp;</operator> <name pos:start="241:38" pos:end="241:41">prev</name> <operator pos:start="241:43" pos:end="241:44">&amp;&amp;</operator> <name pos:start="241:46" pos:end="241:53"><name pos:start="241:46" pos:end="241:48">out</name><operator pos:start="241:49" pos:end="241:50">-&gt;</operator><name pos:start="241:51" pos:end="241:53">poc</name></name> <operator pos:start="241:55" pos:end="241:55">&lt;</operator> <name pos:start="241:57" pos:end="241:65"><name pos:start="241:57" pos:end="241:60">prev</name><operator pos:start="241:61" pos:end="241:62">-&gt;</operator><name pos:start="241:63" pos:end="241:65">poc</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="243:9" pos:end="267:23"><if pos:start="243:9" pos:end="245:23">if<condition pos:start="243:11" pos:end="243:50">(<expr pos:start="243:12" pos:end="243:49"><name pos:start="243:12" pos:end="243:15">prev</name> <operator pos:start="243:17" pos:end="243:18">&amp;&amp;</operator> <name pos:start="243:20" pos:end="243:23">pics</name> <operator pos:start="243:25" pos:end="243:26">&lt;=</operator> <name pos:start="243:28" pos:end="243:49"><name pos:start="243:28" pos:end="243:28">s</name><operator pos:start="243:29" pos:end="243:30">-&gt;</operator><name pos:start="243:31" pos:end="243:35">avctx</name><operator pos:start="243:36" pos:end="243:37">-&gt;</operator><name pos:start="243:38" pos:end="243:49">has_b_frames</name></name></expr>)</condition><block type="pseudo" pos:start="245:13" pos:end="245:23"><block_content pos:start="245:13" pos:end="245:23">

            <expr_stmt pos:start="245:13" pos:end="245:23"><expr pos:start="245:13" pos:end="245:22"><name pos:start="245:13" pos:end="245:15">out</name> <operator pos:start="245:17" pos:end="245:17">=</operator> <name pos:start="245:19" pos:end="245:22">prev</name></expr>;</expr_stmt></block_content></block></if>

        <if type="elseif" pos:start="247:9" pos:end="263:9">else if<condition pos:start="247:16" pos:end="253:43">(<expr pos:start="247:17" pos:end="253:42"><operator pos:start="247:17" pos:end="247:17">(</operator><name pos:start="247:18" pos:end="247:29">out_of_order</name> <operator pos:start="247:31" pos:end="247:32">&amp;&amp;</operator> <name pos:start="247:34" pos:end="247:37">pics</name><operator pos:start="247:38" pos:end="247:38">-</operator><literal type="number" pos:start="247:39" pos:end="247:39">1</literal> <operator pos:start="247:41" pos:end="247:42">==</operator> <name pos:start="247:44" pos:end="247:65"><name pos:start="247:44" pos:end="247:44">s</name><operator pos:start="247:45" pos:end="247:46">-&gt;</operator><name pos:start="247:47" pos:end="247:51">avctx</name><operator pos:start="247:52" pos:end="247:53">-&gt;</operator><name pos:start="247:54" pos:end="247:65">has_b_frames</name></name> <operator pos:start="247:67" pos:end="247:68">&amp;&amp;</operator> <name pos:start="247:70" pos:end="247:73">pics</name> <operator pos:start="247:75" pos:end="247:75">&lt;</operator> <literal type="number" pos:start="247:77" pos:end="247:78">15</literal><operator pos:start="247:79" pos:end="247:79">)</operator>

           <operator pos:start="249:12" pos:end="249:13">||</operator> <operator pos:start="249:15" pos:end="249:15">(</operator><name pos:start="249:16" pos:end="249:27"><name pos:start="249:16" pos:end="249:16">s</name><operator pos:start="249:17" pos:end="249:18">-&gt;</operator><name pos:start="249:19" pos:end="249:27">low_delay</name></name> <operator pos:start="249:29" pos:end="249:30">&amp;&amp;</operator>

            <operator pos:start="251:13" pos:end="251:13">(</operator><operator pos:start="251:14" pos:end="251:14">(</operator><operator pos:start="251:15" pos:end="251:15">!</operator><name pos:start="251:16" pos:end="251:24">cross_idr</name> <operator pos:start="251:26" pos:end="251:27">&amp;&amp;</operator> <name pos:start="251:29" pos:end="251:32">prev</name> <operator pos:start="251:34" pos:end="251:35">&amp;&amp;</operator> <name pos:start="251:37" pos:end="251:44"><name pos:start="251:37" pos:end="251:39">out</name><operator pos:start="251:40" pos:end="251:41">-&gt;</operator><name pos:start="251:42" pos:end="251:44">poc</name></name> <operator pos:start="251:46" pos:end="251:46">&gt;</operator> <name pos:start="251:48" pos:end="251:56"><name pos:start="251:48" pos:end="251:51">prev</name><operator pos:start="251:52" pos:end="251:53">-&gt;</operator><name pos:start="251:54" pos:end="251:56">poc</name></name> <operator pos:start="251:58" pos:end="251:58">+</operator> <literal type="number" pos:start="251:60" pos:end="251:60">2</literal><operator pos:start="251:61" pos:end="251:61">)</operator>

             <operator pos:start="253:14" pos:end="253:15">||</operator> <name pos:start="253:17" pos:end="253:30"><name pos:start="253:17" pos:end="253:19">cur</name><operator pos:start="253:20" pos:end="253:21">-&gt;</operator><name pos:start="253:22" pos:end="253:30">pict_type</name></name> <operator pos:start="253:32" pos:end="253:33">==</operator> <name pos:start="253:35" pos:end="253:40">B_TYPE</name><operator pos:start="253:41" pos:end="253:41">)</operator><operator pos:start="253:42" pos:end="253:42">)</operator></expr>)</condition>

        <block pos:start="255:9" pos:end="263:9">{<block_content pos:start="257:13" pos:end="261:23">

            <expr_stmt pos:start="257:13" pos:end="257:29"><expr pos:start="257:13" pos:end="257:28"><name pos:start="257:13" pos:end="257:24"><name pos:start="257:13" pos:end="257:13">s</name><operator pos:start="257:14" pos:end="257:15">-&gt;</operator><name pos:start="257:16" pos:end="257:24">low_delay</name></name> <operator pos:start="257:26" pos:end="257:26">=</operator> <literal type="number" pos:start="257:28" pos:end="257:28">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:37"><expr pos:start="259:13" pos:end="259:36"><name pos:start="259:13" pos:end="259:34"><name pos:start="259:13" pos:end="259:13">s</name><operator pos:start="259:14" pos:end="259:15">-&gt;</operator><name pos:start="259:16" pos:end="259:20">avctx</name><operator pos:start="259:21" pos:end="259:22">-&gt;</operator><name pos:start="259:23" pos:end="259:34">has_b_frames</name></name><operator pos:start="259:35" pos:end="259:36">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:23"><expr pos:start="261:13" pos:end="261:22"><name pos:start="261:13" pos:end="261:15">out</name> <operator pos:start="261:17" pos:end="261:17">=</operator> <name pos:start="261:19" pos:end="261:22">prev</name></expr>;</expr_stmt>

        </block_content>}</block></if>

        <if type="elseif" pos:start="265:9" pos:end="267:23">else if<condition pos:start="265:16" pos:end="265:29">(<expr pos:start="265:17" pos:end="265:28"><name pos:start="265:17" pos:end="265:28">out_of_order</name></expr>)</condition><block type="pseudo" pos:start="267:13" pos:end="267:23"><block_content pos:start="267:13" pos:end="267:23">

            <expr_stmt pos:start="267:13" pos:end="267:23"><expr pos:start="267:13" pos:end="267:22"><name pos:start="267:13" pos:end="267:15">out</name> <operator pos:start="267:17" pos:end="267:17">=</operator> <name pos:start="267:19" pos:end="267:22">prev</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="271:9" pos:end="279:9"><if pos:start="271:9" pos:end="279:9">if<condition pos:start="271:11" pos:end="271:57">(<expr pos:start="271:12" pos:end="271:56"><name pos:start="271:12" pos:end="271:23">out_of_order</name> <operator pos:start="271:25" pos:end="271:26">||</operator> <name pos:start="271:28" pos:end="271:31">pics</name> <operator pos:start="271:33" pos:end="271:33">&gt;</operator> <name pos:start="271:35" pos:end="271:56"><name pos:start="271:35" pos:end="271:35">s</name><operator pos:start="271:36" pos:end="271:37">-&gt;</operator><name pos:start="271:38" pos:end="271:42">avctx</name><operator pos:start="271:43" pos:end="271:44">-&gt;</operator><name pos:start="271:45" pos:end="271:56">has_b_frames</name></name></expr>)</condition><block pos:start="271:58" pos:end="279:9">{<block_content pos:start="273:13" pos:end="277:56">

            <expr_stmt pos:start="273:13" pos:end="273:61"><expr pos:start="273:13" pos:end="273:60"><name pos:start="273:13" pos:end="273:25">dropped_frame</name> <operator pos:start="273:27" pos:end="273:27">=</operator> <operator pos:start="273:29" pos:end="273:29">(</operator><name pos:start="273:30" pos:end="273:32">out</name> <operator pos:start="273:34" pos:end="273:35">!=</operator> <name pos:start="273:37" pos:end="273:59"><name pos:start="273:37" pos:end="273:37">h</name><operator pos:start="273:38" pos:end="273:39">-&gt;</operator><name pos:start="273:40" pos:end="273:50">delayed_pic</name><index pos:start="273:51" pos:end="273:59">[<expr pos:start="273:52" pos:end="273:58"><name pos:start="273:52" pos:end="273:58">out_idx</name></expr>]</index></name><operator pos:start="273:60" pos:end="273:60">)</operator></expr>;</expr_stmt>

            <for pos:start="275:13" pos:end="277:56">for<control pos:start="275:16" pos:end="275:50">(<init pos:start="275:17" pos:end="275:26"><expr pos:start="275:17" pos:end="275:25"><name pos:start="275:17" pos:end="275:17">i</name><operator pos:start="275:18" pos:end="275:18">=</operator><name pos:start="275:19" pos:end="275:25">out_idx</name></expr>;</init> <condition pos:start="275:28" pos:end="275:45"><expr pos:start="275:28" pos:end="275:44"><name pos:start="275:28" pos:end="275:44"><name pos:start="275:28" pos:end="275:28">h</name><operator pos:start="275:29" pos:end="275:30">-&gt;</operator><name pos:start="275:31" pos:end="275:41">delayed_pic</name><index pos:start="275:42" pos:end="275:44">[<expr pos:start="275:43" pos:end="275:43"><name pos:start="275:43" pos:end="275:43">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="275:47" pos:end="275:49"><expr pos:start="275:47" pos:end="275:49"><name pos:start="275:47" pos:end="275:47">i</name><operator pos:start="275:48" pos:end="275:49">++</operator></expr></incr>)</control><block type="pseudo" pos:start="277:17" pos:end="277:56"><block_content pos:start="277:17" pos:end="277:56">

                <expr_stmt pos:start="277:17" pos:end="277:56"><expr pos:start="277:17" pos:end="277:55"><name pos:start="277:17" pos:end="277:33"><name pos:start="277:17" pos:end="277:17">h</name><operator pos:start="277:18" pos:end="277:19">-&gt;</operator><name pos:start="277:20" pos:end="277:30">delayed_pic</name><index pos:start="277:31" pos:end="277:33">[<expr pos:start="277:32" pos:end="277:32"><name pos:start="277:32" pos:end="277:32">i</name></expr>]</index></name> <operator pos:start="277:35" pos:end="277:35">=</operator> <name pos:start="277:37" pos:end="277:55"><name pos:start="277:37" pos:end="277:37">h</name><operator pos:start="277:38" pos:end="277:39">-&gt;</operator><name pos:start="277:40" pos:end="277:50">delayed_pic</name><index pos:start="277:51" pos:end="277:55">[<expr pos:start="277:52" pos:end="277:54"><name pos:start="277:52" pos:end="277:52">i</name><operator pos:start="277:53" pos:end="277:53">+</operator><literal type="number" pos:start="277:54" pos:end="277:54">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="283:9" pos:end="289:41"><if pos:start="283:9" pos:end="285:27">if<condition pos:start="283:11" pos:end="283:41">(<expr pos:start="283:12" pos:end="283:40"><name pos:start="283:12" pos:end="283:15">prev</name> <operator pos:start="283:17" pos:end="283:18">==</operator> <name pos:start="283:20" pos:end="283:22">out</name> <operator pos:start="283:24" pos:end="283:25">&amp;&amp;</operator> <operator pos:start="283:27" pos:end="283:27">!</operator><name pos:start="283:28" pos:end="283:40">dropped_frame</name></expr>)</condition><block type="pseudo" pos:start="285:13" pos:end="285:27"><block_content pos:start="285:13" pos:end="285:27">

            <expr_stmt pos:start="285:13" pos:end="285:27"><expr pos:start="285:13" pos:end="285:26"><operator pos:start="285:13" pos:end="285:13">*</operator><name pos:start="285:14" pos:end="285:22">data_size</name> <operator pos:start="285:24" pos:end="285:24">=</operator> <literal type="number" pos:start="285:26" pos:end="285:26">0</literal></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="287:9" pos:end="289:41">else<block type="pseudo" pos:start="289:13" pos:end="289:41"><block_content pos:start="289:13" pos:end="289:41">

            <expr_stmt pos:start="289:13" pos:end="289:41"><expr pos:start="289:13" pos:end="289:40"><operator pos:start="289:13" pos:end="289:13">*</operator><name pos:start="289:14" pos:end="289:22">data_size</name> <operator pos:start="289:24" pos:end="289:24">=</operator> <sizeof pos:start="289:26" pos:end="289:40">sizeof<argument_list pos:start="289:32" pos:end="289:40">(<argument pos:start="289:33" pos:end="289:39"><expr pos:start="289:33" pos:end="289:39"><name pos:start="289:33" pos:end="289:39">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="291:9" pos:end="293:32"><if pos:start="291:9" pos:end="293:32">if<condition pos:start="291:11" pos:end="291:55">(<expr pos:start="291:12" pos:end="291:54"><name pos:start="291:12" pos:end="291:15">prev</name> <operator pos:start="291:17" pos:end="291:18">&amp;&amp;</operator> <name pos:start="291:20" pos:end="291:23">prev</name> <operator pos:start="291:25" pos:end="291:26">!=</operator> <name pos:start="291:28" pos:end="291:30">out</name> <operator pos:start="291:32" pos:end="291:33">&amp;&amp;</operator> <name pos:start="291:35" pos:end="291:49"><name pos:start="291:35" pos:end="291:38">prev</name><operator pos:start="291:39" pos:end="291:40">-&gt;</operator><name pos:start="291:41" pos:end="291:49">reference</name></name> <operator pos:start="291:51" pos:end="291:52">==</operator> <literal type="number" pos:start="291:54" pos:end="291:54">1</literal></expr>)</condition><block type="pseudo" pos:start="293:13" pos:end="293:32"><block_content pos:start="293:13" pos:end="293:32">

            <expr_stmt pos:start="293:13" pos:end="293:32"><expr pos:start="293:13" pos:end="293:31"><name pos:start="293:13" pos:end="293:27"><name pos:start="293:13" pos:end="293:16">prev</name><operator pos:start="293:17" pos:end="293:18">-&gt;</operator><name pos:start="293:19" pos:end="293:27">reference</name></name> <operator pos:start="293:29" pos:end="293:29">=</operator> <literal type="number" pos:start="293:31" pos:end="293:31">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="295:9" pos:end="298:0"><expr pos:start="295:9" pos:end="295:35"><name pos:start="295:9" pos:end="295:29"><name pos:start="295:9" pos:end="295:9">h</name><operator pos:start="295:10" pos:end="295:11">-&gt;</operator><name pos:start="295:12" pos:end="295:29">delayed_output_pic</name></name> <operator pos:start="295:31" pos:end="295:31">=</operator> <name pos:start="295:33" pos:end="295:35">out</name></expr>;</expr_stmt>

<cpp:endif pos:start="297:1" pos:end="297:6">#<cpp:directive pos:start="297:2" pos:end="297:6">endif</cpp:directive></cpp:endif>



        <if_stmt pos:start="301:9" pos:end="307:56"><if pos:start="301:9" pos:end="303:34">if<condition pos:start="301:11" pos:end="301:15">(<expr pos:start="301:12" pos:end="301:14"><name pos:start="301:12" pos:end="301:14">out</name></expr>)</condition><block type="pseudo" pos:start="303:13" pos:end="303:34"><block_content pos:start="303:13" pos:end="303:34">

            <expr_stmt pos:start="303:13" pos:end="303:34"><expr pos:start="303:13" pos:end="303:33"><operator pos:start="303:13" pos:end="303:13">*</operator><name pos:start="303:14" pos:end="303:17">pict</name><operator pos:start="303:18" pos:end="303:18">=</operator> <operator pos:start="303:20" pos:end="303:20">*</operator><operator pos:start="303:21" pos:end="303:21">(</operator><name pos:start="303:22" pos:end="303:28">AVFrame</name><operator pos:start="303:29" pos:end="303:29">*</operator><operator pos:start="303:30" pos:end="303:30">)</operator><name pos:start="303:31" pos:end="303:33">out</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="305:9" pos:end="307:56">else<block type="pseudo" pos:start="307:13" pos:end="307:56"><block_content pos:start="307:13" pos:end="307:56">

            <expr_stmt pos:start="307:13" pos:end="307:56"><expr pos:start="307:13" pos:end="307:55"><call pos:start="307:13" pos:end="307:55"><name pos:start="307:13" pos:end="307:18">av_log</name><argument_list pos:start="307:19" pos:end="307:55">(<argument pos:start="307:20" pos:end="307:24"><expr pos:start="307:20" pos:end="307:24"><name pos:start="307:20" pos:end="307:24">avctx</name></expr></argument>, <argument pos:start="307:27" pos:end="307:38"><expr pos:start="307:27" pos:end="307:38"><name pos:start="307:27" pos:end="307:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="307:41" pos:end="307:54"><expr pos:start="307:41" pos:end="307:54"><literal type="string" pos:start="307:41" pos:end="307:54">"no picture\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="313:5" pos:end="313:41"><expr pos:start="313:5" pos:end="313:40"><call pos:start="313:5" pos:end="313:40"><name pos:start="313:5" pos:end="313:10">assert</name><argument_list pos:start="313:11" pos:end="313:40">(<argument pos:start="313:12" pos:end="313:39"><expr pos:start="313:12" pos:end="313:39"><name pos:start="313:12" pos:end="313:24"><name pos:start="313:12" pos:end="313:15">pict</name><operator pos:start="313:16" pos:end="313:17">-&gt;</operator><name pos:start="313:18" pos:end="313:21">data</name><index pos:start="313:22" pos:end="313:24">[<expr pos:start="313:23" pos:end="313:23"><literal type="number" pos:start="313:23" pos:end="313:23">0</literal></expr>]</index></name> <operator pos:start="313:26" pos:end="313:27">||</operator> <operator pos:start="313:29" pos:end="313:29">!</operator><operator pos:start="313:30" pos:end="313:30">*</operator><name pos:start="313:31" pos:end="313:39">data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="315:5" pos:end="330:0"><expr pos:start="315:5" pos:end="315:32"><call pos:start="315:5" pos:end="315:32"><name pos:start="315:5" pos:end="315:23">ff_print_debug_info</name><argument_list pos:start="315:24" pos:end="315:32">(<argument pos:start="315:25" pos:end="315:25"><expr pos:start="315:25" pos:end="315:25"><name pos:start="315:25" pos:end="315:25">s</name></expr></argument>, <argument pos:start="315:28" pos:end="315:31"><expr pos:start="315:28" pos:end="315:31"><name pos:start="315:28" pos:end="315:31">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="317:1" pos:end="317:41">//printf("out %d\n", (int)pict-&gt;data[0]);</comment>

<cpp:if pos:start="319:1" pos:end="319:5">#<cpp:directive pos:start="319:2" pos:end="319:3">if</cpp:directive> <expr pos:start="319:5" pos:end="319:5"><literal type="number" pos:start="319:5" pos:end="319:5">0</literal></expr></cpp:if> <comment type="line" pos:start="319:7" pos:end="319:9">//?</comment>



    <comment type="block" pos:start="323:5" pos:end="323:58">/* Return the Picture timestamp as the frame number */</comment>

    <comment type="block" pos:start="325:5" pos:end="325:58">/* we substract 1 because it is added on utils.c    */</comment>

    avctx-&gt;frame_number = s-&gt;picture_number - 1;

<cpp:endif pos:start="329:1" pos:end="329:6">#<cpp:directive pos:start="329:2" pos:end="329:6">endif</cpp:directive></cpp:endif>

    <return pos:start="331:5" pos:end="331:54">return <expr pos:start="331:12" pos:end="331:53"><call pos:start="331:12" pos:end="331:53"><name pos:start="331:12" pos:end="331:29">get_consumed_bytes</name><argument_list pos:start="331:30" pos:end="331:53">(<argument pos:start="331:31" pos:end="331:31"><expr pos:start="331:31" pos:end="331:31"><name pos:start="331:31" pos:end="331:31">s</name></expr></argument>, <argument pos:start="331:34" pos:end="331:42"><expr pos:start="331:34" pos:end="331:42"><name pos:start="331:34" pos:end="331:42">buf_index</name></expr></argument>, <argument pos:start="331:45" pos:end="331:52"><expr pos:start="331:45" pos:end="331:52"><name pos:start="331:45" pos:end="331:52">buf_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
