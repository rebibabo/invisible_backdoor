<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1566.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">test_visitor_in_errors</name><parameter_list pos:start="1:35" pos:end="3:54">(<parameter pos:start="1:36" pos:end="1:61"><decl pos:start="1:36" pos:end="1:61"><type pos:start="1:36" pos:end="1:61"><name pos:start="1:36" pos:end="1:55">TestInputVisitorData</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:53"><decl pos:start="3:36" pos:end="3:53"><type pos:start="3:36" pos:end="3:53"><specifier pos:start="3:36" pos:end="3:40">const</specifier> <name pos:start="3:42" pos:end="3:45">void</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:53">unused</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="63:1">{<block_content pos:start="7:5" pos:end="61:15">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">TestStruct</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">p</name> <init pos:start="7:19" pos:end="7:24">= <expr pos:start="7:21" pos:end="7:24"><name pos:start="7:21" pos:end="7:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">Visitor</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:14">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">strList</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:14">q</name> <init pos:start="13:16" pos:end="13:21">= <expr pos:start="13:18" pos:end="13:21"><name pos:start="13:18" pos:end="13:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:14">UserDefTwo</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:17">r</name> <init pos:start="15:19" pos:end="15:24">= <expr pos:start="15:21" pos:end="15:24"><name pos:start="15:21" pos:end="15:24">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">WrapAlternate</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:20">s</name> <init pos:start="17:22" pos:end="17:27">= <expr pos:start="17:24" pos:end="17:27"><name pos:start="17:24" pos:end="17:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="23:51"><expr pos:start="21:5" pos:end="23:50"><name pos:start="21:5" pos:end="21:5">v</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <call pos:start="21:9" pos:end="23:50"><name pos:start="21:9" pos:end="21:31">visitor_input_test_init</name><argument_list pos:start="21:32" pos:end="23:50">(<argument pos:start="21:33" pos:end="21:36"><expr pos:start="21:33" pos:end="21:36"><name pos:start="21:33" pos:end="21:36">data</name></expr></argument>, <argument pos:start="21:39" pos:end="23:49"><expr pos:start="21:39" pos:end="23:49"><literal type="string" pos:start="21:39" pos:end="21:78">"{ 'integer': false, 'boolean': 'foo', "</literal>

                                <literal type="string" pos:start="23:33" pos:end="23:49">"'string': -42 }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:45"><expr pos:start="27:5" pos:end="27:44"><call pos:start="27:5" pos:end="27:44"><name pos:start="27:5" pos:end="27:25">visit_type_TestStruct</name><argument_list pos:start="27:26" pos:end="27:44">(<argument pos:start="27:27" pos:end="27:27"><expr pos:start="27:27" pos:end="27:27"><name pos:start="27:27" pos:end="27:27">v</name></expr></argument>, <argument pos:start="27:30" pos:end="27:33"><expr pos:start="27:30" pos:end="27:33"><name pos:start="27:30" pos:end="27:33">NULL</name></expr></argument>, <argument pos:start="27:36" pos:end="27:37"><expr pos:start="27:36" pos:end="27:37"><operator pos:start="27:36" pos:end="27:36">&amp;</operator><name pos:start="27:37" pos:end="27:37">p</name></expr></argument>, <argument pos:start="27:40" pos:end="27:43"><expr pos:start="27:40" pos:end="27:43"><operator pos:start="27:40" pos:end="27:40">&amp;</operator><name pos:start="27:41" pos:end="27:43">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><call pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:23">error_free_or_abort</name><argument_list pos:start="29:24" pos:end="29:29">(<argument pos:start="29:25" pos:end="29:28"><expr pos:start="29:25" pos:end="29:28"><operator pos:start="29:25" pos:end="29:25">&amp;</operator><name pos:start="29:26" pos:end="29:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:17"><expr pos:start="31:5" pos:end="31:16"><call pos:start="31:5" pos:end="31:16"><name pos:start="31:5" pos:end="31:12">g_assert</name><argument_list pos:start="31:13" pos:end="31:16">(<argument pos:start="31:14" pos:end="31:15"><expr pos:start="31:14" pos:end="31:15"><operator pos:start="31:14" pos:end="31:14">!</operator><name pos:start="31:15" pos:end="31:15">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:66"><expr pos:start="35:5" pos:end="35:65"><name pos:start="35:5" pos:end="35:5">v</name> <operator pos:start="35:7" pos:end="35:7">=</operator> <call pos:start="35:9" pos:end="35:65"><name pos:start="35:9" pos:end="35:31">visitor_input_test_init</name><argument_list pos:start="35:32" pos:end="35:65">(<argument pos:start="35:33" pos:end="35:36"><expr pos:start="35:33" pos:end="35:36"><name pos:start="35:33" pos:end="35:36">data</name></expr></argument>, <argument pos:start="35:39" pos:end="35:64"><expr pos:start="35:39" pos:end="35:64"><literal type="string" pos:start="35:39" pos:end="35:64">"[ '1', '2', false, '3' ]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><call pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:22">visit_type_strList</name><argument_list pos:start="37:23" pos:end="37:41">(<argument pos:start="37:24" pos:end="37:24"><expr pos:start="37:24" pos:end="37:24"><name pos:start="37:24" pos:end="37:24">v</name></expr></argument>, <argument pos:start="37:27" pos:end="37:30"><expr pos:start="37:27" pos:end="37:30"><name pos:start="37:27" pos:end="37:30">NULL</name></expr></argument>, <argument pos:start="37:33" pos:end="37:34"><expr pos:start="37:33" pos:end="37:34"><operator pos:start="37:33" pos:end="37:33">&amp;</operator><name pos:start="37:34" pos:end="37:34">q</name></expr></argument>, <argument pos:start="37:37" pos:end="37:40"><expr pos:start="37:37" pos:end="37:40"><operator pos:start="37:37" pos:end="37:37">&amp;</operator><name pos:start="37:38" pos:end="37:40">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><call pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:23">error_free_or_abort</name><argument_list pos:start="39:24" pos:end="39:29">(<argument pos:start="39:25" pos:end="39:28"><expr pos:start="39:25" pos:end="39:28"><operator pos:start="39:25" pos:end="39:25">&amp;</operator><name pos:start="39:26" pos:end="39:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:15"><expr pos:start="41:5" pos:end="41:14"><call pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:10">assert</name><argument_list pos:start="41:11" pos:end="41:14">(<argument pos:start="41:12" pos:end="41:13"><expr pos:start="41:12" pos:end="41:13"><operator pos:start="41:12" pos:end="41:12">!</operator><name pos:start="41:13" pos:end="41:13">q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:56"><expr pos:start="45:5" pos:end="45:55"><name pos:start="45:5" pos:end="45:5">v</name> <operator pos:start="45:7" pos:end="45:7">=</operator> <call pos:start="45:9" pos:end="45:55"><name pos:start="45:9" pos:end="45:31">visitor_input_test_init</name><argument_list pos:start="45:32" pos:end="45:55">(<argument pos:start="45:33" pos:end="45:36"><expr pos:start="45:33" pos:end="45:36"><name pos:start="45:33" pos:end="45:36">data</name></expr></argument>, <argument pos:start="45:39" pos:end="45:54"><expr pos:start="45:39" pos:end="45:54"><literal type="string" pos:start="45:39" pos:end="45:54">"{ 'str':'hi' }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:45"><expr pos:start="47:5" pos:end="47:44"><call pos:start="47:5" pos:end="47:44"><name pos:start="47:5" pos:end="47:25">visit_type_UserDefTwo</name><argument_list pos:start="47:26" pos:end="47:44">(<argument pos:start="47:27" pos:end="47:27"><expr pos:start="47:27" pos:end="47:27"><name pos:start="47:27" pos:end="47:27">v</name></expr></argument>, <argument pos:start="47:30" pos:end="47:33"><expr pos:start="47:30" pos:end="47:33"><name pos:start="47:30" pos:end="47:33">NULL</name></expr></argument>, <argument pos:start="47:36" pos:end="47:37"><expr pos:start="47:36" pos:end="47:37"><operator pos:start="47:36" pos:end="47:36">&amp;</operator><name pos:start="47:37" pos:end="47:37">r</name></expr></argument>, <argument pos:start="47:40" pos:end="47:43"><expr pos:start="47:40" pos:end="47:43"><operator pos:start="47:40" pos:end="47:40">&amp;</operator><name pos:start="47:41" pos:end="47:43">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:30"><expr pos:start="49:5" pos:end="49:29"><call pos:start="49:5" pos:end="49:29"><name pos:start="49:5" pos:end="49:23">error_free_or_abort</name><argument_list pos:start="49:24" pos:end="49:29">(<argument pos:start="49:25" pos:end="49:28"><expr pos:start="49:25" pos:end="49:28"><operator pos:start="49:25" pos:end="49:25">&amp;</operator><name pos:start="49:26" pos:end="49:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:15"><expr pos:start="51:5" pos:end="51:14"><call pos:start="51:5" pos:end="51:14"><name pos:start="51:5" pos:end="51:10">assert</name><argument_list pos:start="51:11" pos:end="51:14">(<argument pos:start="51:12" pos:end="51:13"><expr pos:start="51:12" pos:end="51:13"><operator pos:start="51:12" pos:end="51:12">!</operator><name pos:start="51:13" pos:end="51:13">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:45"><expr pos:start="55:5" pos:end="55:44"><name pos:start="55:5" pos:end="55:5">v</name> <operator pos:start="55:7" pos:end="55:7">=</operator> <call pos:start="55:9" pos:end="55:44"><name pos:start="55:9" pos:end="55:31">visitor_input_test_init</name><argument_list pos:start="55:32" pos:end="55:44">(<argument pos:start="55:33" pos:end="55:36"><expr pos:start="55:33" pos:end="55:36"><name pos:start="55:33" pos:end="55:36">data</name></expr></argument>, <argument pos:start="55:39" pos:end="55:43"><expr pos:start="55:39" pos:end="55:43"><literal type="string" pos:start="55:39" pos:end="55:43">"{ }"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:48"><expr pos:start="57:5" pos:end="57:47"><call pos:start="57:5" pos:end="57:47"><name pos:start="57:5" pos:end="57:28">visit_type_WrapAlternate</name><argument_list pos:start="57:29" pos:end="57:47">(<argument pos:start="57:30" pos:end="57:30"><expr pos:start="57:30" pos:end="57:30"><name pos:start="57:30" pos:end="57:30">v</name></expr></argument>, <argument pos:start="57:33" pos:end="57:36"><expr pos:start="57:33" pos:end="57:36"><name pos:start="57:33" pos:end="57:36">NULL</name></expr></argument>, <argument pos:start="57:39" pos:end="57:40"><expr pos:start="57:39" pos:end="57:40"><operator pos:start="57:39" pos:end="57:39">&amp;</operator><name pos:start="57:40" pos:end="57:40">s</name></expr></argument>, <argument pos:start="57:43" pos:end="57:46"><expr pos:start="57:43" pos:end="57:46"><operator pos:start="57:43" pos:end="57:43">&amp;</operator><name pos:start="57:44" pos:end="57:46">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:30"><expr pos:start="59:5" pos:end="59:29"><call pos:start="59:5" pos:end="59:29"><name pos:start="59:5" pos:end="59:23">error_free_or_abort</name><argument_list pos:start="59:24" pos:end="59:29">(<argument pos:start="59:25" pos:end="59:28"><expr pos:start="59:25" pos:end="59:28"><operator pos:start="59:25" pos:end="59:25">&amp;</operator><name pos:start="59:26" pos:end="59:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:15"><expr pos:start="61:5" pos:end="61:14"><call pos:start="61:5" pos:end="61:14"><name pos:start="61:5" pos:end="61:10">assert</name><argument_list pos:start="61:11" pos:end="61:14">(<argument pos:start="61:12" pos:end="61:13"><expr pos:start="61:12" pos:end="61:13"><operator pos:start="61:12" pos:end="61:12">!</operator><name pos:start="61:13" pos:end="61:13">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
