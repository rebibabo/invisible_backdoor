<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8452.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">pc_isa_bios_init</name><parameter_list pos:start="1:29" pos:end="5:42">(<parameter pos:start="1:30" pos:end="1:53"><decl pos:start="1:30" pos:end="1:53"><type pos:start="1:30" pos:end="1:53"><name pos:start="1:30" pos:end="1:41">MemoryRegion</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:53">rom_memory</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:52"><decl pos:start="3:30" pos:end="3:52"><type pos:start="3:30" pos:end="3:52"><name pos:start="3:30" pos:end="3:41">MemoryRegion</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:52">flash_mem</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:41"><decl pos:start="5:30" pos:end="5:41"><type pos:start="5:30" pos:end="5:41"><name pos:start="5:30" pos:end="5:32">int</name></type> <name pos:start="5:34" pos:end="5:41">ram_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="65:1">{<block_content pos:start="9:5" pos:end="63:47">

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:21">isa_bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:26">isa_bios</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:23">flash_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:19">flash_ptr</name></decl>, <decl pos:start="15:22" pos:end="15:34"><type ref="prev" pos:start="15:5" pos:end="15:10"><modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:34">isa_bios_ptr</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:47"><expr pos:start="19:5" pos:end="19:46"><name pos:start="19:5" pos:end="19:14">flash_size</name> <operator pos:start="19:16" pos:end="19:16">=</operator> <call pos:start="19:18" pos:end="19:46"><name pos:start="19:18" pos:end="19:35">memory_region_size</name><argument_list pos:start="19:36" pos:end="19:46">(<argument pos:start="19:37" pos:end="19:45"><expr pos:start="19:37" pos:end="19:45"><name pos:start="19:37" pos:end="19:45">flash_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:53">/* map the last 128KB of the BIOS in ISA space */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:31"><expr pos:start="25:5" pos:end="25:30"><name pos:start="25:5" pos:end="25:17">isa_bios_size</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <name pos:start="25:21" pos:end="25:30">flash_size</name></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:37">(<expr pos:start="27:9" pos:end="27:36"><name pos:start="27:9" pos:end="27:21">isa_bios_size</name> <operator pos:start="27:23" pos:end="27:23">&gt;</operator> <operator pos:start="27:25" pos:end="27:25">(</operator><literal type="number" pos:start="27:26" pos:end="27:28">128</literal> <operator pos:start="27:30" pos:end="27:30">*</operator> <literal type="number" pos:start="27:32" pos:end="27:35">1024</literal><operator pos:start="27:36" pos:end="27:36">)</operator></expr>)</condition> <block pos:start="27:39" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:35">

        <expr_stmt pos:start="29:9" pos:end="29:35"><expr pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:21">isa_bios_size</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <literal type="number" pos:start="29:25" pos:end="29:27">128</literal> <operator pos:start="29:29" pos:end="29:29">*</operator> <literal type="number" pos:start="29:31" pos:end="29:34">1024</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:43"><expr pos:start="33:5" pos:end="33:42"><name pos:start="33:5" pos:end="33:12">isa_bios</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <call pos:start="33:16" pos:end="33:42"><name pos:start="33:16" pos:end="33:23">g_malloc</name><argument_list pos:start="33:24" pos:end="33:42">(<argument pos:start="33:25" pos:end="33:41"><expr pos:start="33:25" pos:end="33:41"><sizeof pos:start="33:25" pos:end="33:41">sizeof<argument_list pos:start="33:31" pos:end="33:41">(<argument pos:start="33:32" pos:end="33:40"><expr pos:start="33:32" pos:end="33:40"><operator pos:start="33:32" pos:end="33:32">*</operator><name pos:start="33:33" pos:end="33:40">isa_bios</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:70"><expr pos:start="35:5" pos:end="35:69"><call pos:start="35:5" pos:end="35:69"><name pos:start="35:5" pos:end="35:26">memory_region_init_ram</name><argument_list pos:start="35:27" pos:end="35:69">(<argument pos:start="35:28" pos:end="35:35"><expr pos:start="35:28" pos:end="35:35"><name pos:start="35:28" pos:end="35:35">isa_bios</name></expr></argument>, <argument pos:start="35:38" pos:end="35:41"><expr pos:start="35:38" pos:end="35:41"><name pos:start="35:38" pos:end="35:41">NULL</name></expr></argument>, <argument pos:start="35:44" pos:end="35:53"><expr pos:start="35:44" pos:end="35:53"><literal type="string" pos:start="35:44" pos:end="35:53">"isa-bios"</literal></expr></argument>, <argument pos:start="35:56" pos:end="35:68"><expr pos:start="35:56" pos:end="35:68"><name pos:start="35:56" pos:end="35:68">isa_bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><call pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:31">vmstate_register_ram_global</name><argument_list pos:start="37:32" pos:end="37:41">(<argument pos:start="37:33" pos:end="37:40"><expr pos:start="37:33" pos:end="37:40"><name pos:start="37:33" pos:end="37:40">isa_bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="45:43"><expr pos:start="39:5" pos:end="45:42"><call pos:start="39:5" pos:end="45:42"><name pos:start="39:5" pos:end="39:39">memory_region_add_subregion_overlap</name><argument_list pos:start="39:40" pos:end="45:42">(<argument pos:start="39:41" pos:end="39:50"><expr pos:start="39:41" pos:end="39:50"><name pos:start="39:41" pos:end="39:50">rom_memory</name></expr></argument>,

                                        <argument pos:start="41:41" pos:end="41:64"><expr pos:start="41:41" pos:end="41:64"><literal type="number" pos:start="41:41" pos:end="41:50">0x100000</literal> <operator pos:start="41:50" pos:end="41:50">-</operator> <name pos:start="41:52" pos:end="41:64">isa_bios_size</name></expr></argument>,

                                        <argument pos:start="43:41" pos:end="43:48"><expr pos:start="43:41" pos:end="43:48"><name pos:start="43:41" pos:end="43:48">isa_bios</name></expr></argument>,

                                        <argument pos:start="45:41" pos:end="45:41"><expr pos:start="45:41" pos:end="45:41"><literal type="number" pos:start="45:41" pos:end="45:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:53">/* copy ISA rom image from top of flash memory */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:53"><expr pos:start="51:5" pos:end="51:52"><name pos:start="51:5" pos:end="51:13">flash_ptr</name> <operator pos:start="51:15" pos:end="51:15">=</operator> <call pos:start="51:17" pos:end="51:52"><name pos:start="51:17" pos:end="51:41">memory_region_get_ram_ptr</name><argument_list pos:start="51:42" pos:end="51:52">(<argument pos:start="51:43" pos:end="51:51"><expr pos:start="51:43" pos:end="51:51"><name pos:start="51:43" pos:end="51:51">flash_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:55"><expr pos:start="53:5" pos:end="53:54"><name pos:start="53:5" pos:end="53:16">isa_bios_ptr</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <call pos:start="53:20" pos:end="53:54"><name pos:start="53:20" pos:end="53:44">memory_region_get_ram_ptr</name><argument_list pos:start="53:45" pos:end="53:54">(<argument pos:start="53:46" pos:end="53:53"><expr pos:start="53:46" pos:end="53:53"><name pos:start="53:46" pos:end="53:53">isa_bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="59:26"><expr pos:start="55:5" pos:end="59:25"><call pos:start="55:5" pos:end="59:25"><name pos:start="55:5" pos:end="55:10">memcpy</name><argument_list pos:start="55:11" pos:end="59:25">(<argument pos:start="55:12" pos:end="55:23"><expr pos:start="55:12" pos:end="55:23"><name pos:start="55:12" pos:end="55:23">isa_bios_ptr</name></expr></argument>,

           <argument pos:start="57:12" pos:end="57:63"><expr pos:start="57:12" pos:end="57:63"><operator pos:start="57:12" pos:end="57:12">(</operator><operator pos:start="57:13" pos:end="57:13">(</operator><name pos:start="57:14" pos:end="57:20">uint8_t</name><operator pos:start="57:21" pos:end="57:21">*</operator><operator pos:start="57:22" pos:end="57:22">)</operator><name pos:start="57:23" pos:end="57:31">flash_ptr</name><operator pos:start="57:32" pos:end="57:32">)</operator> <operator pos:start="57:34" pos:end="57:34">+</operator> <operator pos:start="57:36" pos:end="57:36">(</operator><name pos:start="57:37" pos:end="57:46">flash_size</name> <operator pos:start="57:48" pos:end="57:48">-</operator> <name pos:start="57:50" pos:end="57:62">isa_bios_size</name><operator pos:start="57:63" pos:end="57:63">)</operator></expr></argument>,

           <argument pos:start="59:12" pos:end="59:24"><expr pos:start="59:12" pos:end="59:24"><name pos:start="59:12" pos:end="59:24">isa_bios_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:47"><expr pos:start="63:5" pos:end="63:46"><call pos:start="63:5" pos:end="63:46"><name pos:start="63:5" pos:end="63:30">memory_region_set_readonly</name><argument_list pos:start="63:31" pos:end="63:46">(<argument pos:start="63:32" pos:end="63:39"><expr pos:start="63:32" pos:end="63:39"><name pos:start="63:32" pos:end="63:39">isa_bios</name></expr></argument>, <argument pos:start="63:42" pos:end="63:45"><expr pos:start="63:42" pos:end="63:45"><name pos:start="63:42" pos:end="63:45">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
