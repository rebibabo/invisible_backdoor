<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20710.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">spapr_memory_plug</name><parameter_list pos:start="1:30" pos:end="3:58">(<parameter pos:start="1:31" pos:end="1:57"><decl pos:start="1:31" pos:end="1:57"><type pos:start="1:31" pos:end="1:57"><name pos:start="1:31" pos:end="1:44">HotplugHandler</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:57">hotplug_dev</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:75"><decl pos:start="1:60" pos:end="1:75"><type pos:start="1:60" pos:end="1:75"><name pos:start="1:60" pos:end="1:70">DeviceState</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:75">dev</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:43"><decl pos:start="3:31" pos:end="3:43"><type pos:start="3:31" pos:end="3:43"><name pos:start="3:31" pos:end="3:38">uint32_t</name></type> <name pos:start="3:40" pos:end="3:43">node</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:57"><decl pos:start="3:46" pos:end="3:57"><type pos:start="3:46" pos:end="3:57"><name pos:start="3:46" pos:end="3:50">Error</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier><modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:57">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="67:1">{<block_content pos:start="7:5" pos:end="65:37">

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">Error</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:20">local_err</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:55"><decl pos:start="9:5" pos:end="9:54"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">sPAPRMachineState</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:25">ms</name> <init pos:start="9:27" pos:end="9:54">= <expr pos:start="9:29" pos:end="9:54"><call pos:start="9:29" pos:end="9:54"><name pos:start="9:29" pos:end="9:41">SPAPR_MACHINE</name><argument_list pos:start="9:42" pos:end="9:54">(<argument pos:start="9:43" pos:end="9:53"><expr pos:start="9:43" pos:end="9:53"><name pos:start="9:43" pos:end="9:53">hotplug_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">PCDIMMDevice</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:22">dimm</name> <init pos:start="11:24" pos:end="11:37">= <expr pos:start="11:26" pos:end="11:37"><call pos:start="11:26" pos:end="11:37"><name pos:start="11:26" pos:end="11:32">PC_DIMM</name><argument_list pos:start="11:33" pos:end="11:37">(<argument pos:start="11:34" pos:end="11:36"><expr pos:start="11:34" pos:end="11:36"><name pos:start="11:34" pos:end="11:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:53"><decl pos:start="13:5" pos:end="13:52"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21">PCDIMMDeviceClass</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:26">ddc</name> <init pos:start="13:28" pos:end="13:52">= <expr pos:start="13:30" pos:end="13:52"><call pos:start="13:30" pos:end="13:52"><name pos:start="13:30" pos:end="13:46">PC_DIMM_GET_CLASS</name><argument_list pos:start="13:47" pos:end="13:52">(<argument pos:start="13:48" pos:end="13:51"><expr pos:start="13:48" pos:end="13:51"><name pos:start="13:48" pos:end="13:51">dimm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:51"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:20">mr</name> <init pos:start="15:22" pos:end="15:51">= <expr pos:start="15:24" pos:end="15:51"><call pos:start="15:24" pos:end="15:51"><name pos:start="15:24" pos:end="15:45"><name pos:start="15:24" pos:end="15:26">ddc</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:45">get_memory_region</name></name><argument_list pos:start="15:46" pos:end="15:51">(<argument pos:start="15:47" pos:end="15:50"><expr pos:start="15:47" pos:end="15:50"><name pos:start="15:47" pos:end="15:50">dimm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:53"><decl pos:start="17:5" pos:end="17:52"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:18">align</name> <init pos:start="17:20" pos:end="17:52">= <expr pos:start="17:22" pos:end="17:52"><call pos:start="17:22" pos:end="17:52"><name pos:start="17:22" pos:end="17:48">memory_region_get_alignment</name><argument_list pos:start="17:49" pos:end="17:52">(<argument pos:start="17:50" pos:end="17:51"><expr pos:start="17:50" pos:end="17:51"><name pos:start="17:50" pos:end="17:51">mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:43"><decl pos:start="19:5" pos:end="19:42"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:17">size</name> <init pos:start="19:19" pos:end="19:42">= <expr pos:start="19:21" pos:end="19:42"><call pos:start="19:21" pos:end="19:42"><name pos:start="19:21" pos:end="19:38">memory_region_size</name><argument_list pos:start="19:39" pos:end="19:42">(<argument pos:start="19:40" pos:end="19:41"><expr pos:start="19:40" pos:end="19:41"><name pos:start="19:40" pos:end="19:41">mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:17">addr</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="33:5">if <condition pos:start="25:8" pos:end="25:39">(<expr pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:12">size</name> <operator pos:start="25:14" pos:end="25:14">%</operator> <name pos:start="25:16" pos:end="25:38">SPAPR_MEMORY_BLOCK_SIZE</name></expr>)</condition> <block pos:start="25:41" pos:end="33:5">{<block_content pos:start="27:9" pos:end="31:17">

        <expr_stmt pos:start="27:9" pos:end="29:65"><expr pos:start="27:9" pos:end="29:64"><call pos:start="27:9" pos:end="29:64"><name pos:start="27:9" pos:end="27:18">error_setg</name><argument_list pos:start="27:19" pos:end="29:64">(<argument pos:start="27:20" pos:end="27:29"><expr pos:start="27:20" pos:end="27:29"><operator pos:start="27:20" pos:end="27:20">&amp;</operator><name pos:start="27:21" pos:end="27:29">local_err</name></expr></argument>, <argument pos:start="27:32" pos:end="29:31"><expr pos:start="27:32" pos:end="29:31"><literal type="string" pos:start="27:32" pos:end="27:78">"Hotplugged memory size must be a multiple of "</literal>

                      <literal type="string" pos:start="29:23" pos:end="29:31">"%lld MB"</literal></expr></argument>, <argument pos:start="29:34" pos:end="29:63"><expr pos:start="29:34" pos:end="29:63"><name pos:start="29:34" pos:end="29:56">SPAPR_MEMORY_BLOCK_SIZE</name><operator pos:start="29:57" pos:end="29:57">/</operator><name pos:start="29:58" pos:end="29:63">M_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="31:9" pos:end="31:17">goto <name pos:start="31:14" pos:end="31:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:73"><expr pos:start="37:5" pos:end="37:72"><call pos:start="37:5" pos:end="37:72"><name pos:start="37:5" pos:end="37:23">pc_dimm_memory_plug</name><argument_list pos:start="37:24" pos:end="37:72">(<argument pos:start="37:25" pos:end="37:27"><expr pos:start="37:25" pos:end="37:27"><name pos:start="37:25" pos:end="37:27">dev</name></expr></argument>, <argument pos:start="37:30" pos:end="37:48"><expr pos:start="37:30" pos:end="37:48"><operator pos:start="37:30" pos:end="37:30">&amp;</operator><name pos:start="37:31" pos:end="37:48"><name pos:start="37:31" pos:end="37:32">ms</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:48">hotplug_memory</name></name></expr></argument>, <argument pos:start="37:51" pos:end="37:52"><expr pos:start="37:51" pos:end="37:52"><name pos:start="37:51" pos:end="37:52">mr</name></expr></argument>, <argument pos:start="37:55" pos:end="37:59"><expr pos:start="37:55" pos:end="37:59"><name pos:start="37:55" pos:end="37:59">align</name></expr></argument>, <argument pos:start="37:62" pos:end="37:71"><expr pos:start="37:62" pos:end="37:71"><operator pos:start="37:62" pos:end="37:62">&amp;</operator><name pos:start="37:63" pos:end="37:71">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:18">(<expr pos:start="39:9" pos:end="39:17"><name pos:start="39:9" pos:end="39:17">local_err</name></expr>)</condition> <block pos:start="39:20" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:17">

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:80"><expr pos:start="47:5" pos:end="47:79"><name pos:start="47:5" pos:end="47:8">addr</name> <operator pos:start="47:10" pos:end="47:10">=</operator> <call pos:start="47:12" pos:end="47:79"><name pos:start="47:12" pos:end="47:34">object_property_get_int</name><argument_list pos:start="47:35" pos:end="47:79">(<argument pos:start="47:36" pos:end="47:47"><expr pos:start="47:36" pos:end="47:47"><call pos:start="47:36" pos:end="47:47"><name pos:start="47:36" pos:end="47:41">OBJECT</name><argument_list pos:start="47:42" pos:end="47:47">(<argument pos:start="47:43" pos:end="47:46"><expr pos:start="47:43" pos:end="47:46"><name pos:start="47:43" pos:end="47:46">dimm</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:50" pos:end="47:66"><expr pos:start="47:50" pos:end="47:66"><name pos:start="47:50" pos:end="47:66">PC_DIMM_ADDR_PROP</name></expr></argument>, <argument pos:start="47:69" pos:end="47:78"><expr pos:start="47:69" pos:end="47:78"><operator pos:start="47:69" pos:end="47:69">&amp;</operator><name pos:start="47:70" pos:end="47:78">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:18">(<expr pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:17">local_err</name></expr>)</condition> <block pos:start="49:20" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:17">

        <expr_stmt pos:start="51:9" pos:end="51:60"><expr pos:start="51:9" pos:end="51:59"><call pos:start="51:9" pos:end="51:59"><name pos:start="51:9" pos:end="51:29">pc_dimm_memory_unplug</name><argument_list pos:start="51:30" pos:end="51:59">(<argument pos:start="51:31" pos:end="51:33"><expr pos:start="51:31" pos:end="51:33"><name pos:start="51:31" pos:end="51:33">dev</name></expr></argument>, <argument pos:start="51:36" pos:end="51:54"><expr pos:start="51:36" pos:end="51:54"><operator pos:start="51:36" pos:end="51:36">&amp;</operator><name pos:start="51:37" pos:end="51:54"><name pos:start="51:37" pos:end="51:38">ms</name><operator pos:start="51:39" pos:end="51:40">-&gt;</operator><name pos:start="51:41" pos:end="51:54">hotplug_memory</name></name></expr></argument>, <argument pos:start="51:57" pos:end="51:58"><expr pos:start="51:57" pos:end="51:58"><name pos:start="51:57" pos:end="51:58">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="53:9" pos:end="53:17">goto <name pos:start="53:14" pos:end="53:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:56"><expr pos:start="59:5" pos:end="59:55"><call pos:start="59:5" pos:end="59:55"><name pos:start="59:5" pos:end="59:18">spapr_add_lmbs</name><argument_list pos:start="59:19" pos:end="59:55">(<argument pos:start="59:20" pos:end="59:22"><expr pos:start="59:20" pos:end="59:22"><name pos:start="59:20" pos:end="59:22">dev</name></expr></argument>, <argument pos:start="59:25" pos:end="59:28"><expr pos:start="59:25" pos:end="59:28"><name pos:start="59:25" pos:end="59:28">addr</name></expr></argument>, <argument pos:start="59:31" pos:end="59:34"><expr pos:start="59:31" pos:end="59:34"><name pos:start="59:31" pos:end="59:34">size</name></expr></argument>, <argument pos:start="59:37" pos:end="59:40"><expr pos:start="59:37" pos:end="59:40"><name pos:start="59:37" pos:end="59:40">node</name></expr></argument>, <argument pos:start="59:43" pos:end="59:54"><expr pos:start="59:43" pos:end="59:54"><operator pos:start="59:43" pos:end="59:43">&amp;</operator><name pos:start="59:44" pos:end="59:54">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="63:1" pos:end="63:4"><name pos:start="63:1" pos:end="63:3">out</name>:</label>

    <expr_stmt pos:start="65:5" pos:end="65:37"><expr pos:start="65:5" pos:end="65:36"><call pos:start="65:5" pos:end="65:36"><name pos:start="65:5" pos:end="65:19">error_propagate</name><argument_list pos:start="65:20" pos:end="65:36">(<argument pos:start="65:21" pos:end="65:24"><expr pos:start="65:21" pos:end="65:24"><name pos:start="65:21" pos:end="65:24">errp</name></expr></argument>, <argument pos:start="65:27" pos:end="65:35"><expr pos:start="65:27" pos:end="65:35"><name pos:start="65:27" pos:end="65:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
