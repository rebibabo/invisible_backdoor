<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17638.c" pos:tabs="8"><function pos:start="1:1" pos:end="137:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:12">coroutine_fn</name></type> <name pos:start="1:14" pos:end="1:29">iscsi_co_discard</name><parameter_list pos:start="1:30" pos:end="3:50">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:70"><decl pos:start="1:53" pos:end="1:70"><type pos:start="1:53" pos:end="1:70"><name pos:start="1:53" pos:end="1:59">int64_t</name></type> <name pos:start="1:61" pos:end="1:70">sector_num</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:49"><decl pos:start="3:36" pos:end="3:49"><type pos:start="3:36" pos:end="3:49"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:49">nb_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="137:1">{<block_content pos:start="7:5" pos:end="135:13">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">IscsiLun</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:22">iscsilun</name> <init pos:start="7:24" pos:end="7:35">= <expr pos:start="7:26" pos:end="7:35"><name pos:start="7:26" pos:end="7:35"><name pos:start="7:26" pos:end="7:27">bs</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:20">IscsiTask</name></name></type> <name pos:start="9:22" pos:end="9:26">iTask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:21">unmap_list</name></name></type> <name pos:start="11:23" pos:end="11:26">list</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:22">nb_blocks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:22">max_unmap</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:66">(<expr pos:start="19:9" pos:end="19:65"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:65"><name pos:start="19:10" pos:end="19:31">is_request_lun_aligned</name><argument_list pos:start="19:32" pos:end="19:65">(<argument pos:start="19:33" pos:end="19:42"><expr pos:start="19:33" pos:end="19:42"><name pos:start="19:33" pos:end="19:42">sector_num</name></expr></argument>, <argument pos:start="19:45" pos:end="19:54"><expr pos:start="19:45" pos:end="19:54"><name pos:start="19:45" pos:end="19:54">nb_sectors</name></expr></argument>, <argument pos:start="19:57" pos:end="19:64"><expr pos:start="19:57" pos:end="19:64"><name pos:start="19:57" pos:end="19:64">iscsilun</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:68" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:23">

        <return pos:start="21:9" pos:end="21:23">return <expr pos:start="21:16" pos:end="21:22"><operator pos:start="21:16" pos:end="21:16">-</operator><name pos:start="21:17" pos:end="21:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:28">(<expr pos:start="27:9" pos:end="27:27"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:27"><name pos:start="27:10" pos:end="27:17">iscsilun</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:22">lbp</name><operator pos:start="27:23" pos:end="27:23">.</operator><name pos:start="27:24" pos:end="27:27">lbpu</name></name></expr>)</condition> <block pos:start="27:30" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:17">

        <comment type="block" pos:start="29:9" pos:end="29:50">/* UNMAP is not supported by the target */</comment>

        <return pos:start="31:9" pos:end="31:17">return <expr pos:start="31:16" pos:end="31:16"><literal type="number" pos:start="31:16" pos:end="31:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:53"><expr pos:start="37:5" pos:end="37:52"><name pos:start="37:5" pos:end="37:12"><name pos:start="37:5" pos:end="37:8">list</name><operator pos:start="37:9" pos:end="37:9">.</operator><name pos:start="37:10" pos:end="37:12">lba</name></name> <operator pos:start="37:14" pos:end="37:14">=</operator> <call pos:start="37:16" pos:end="37:52"><name pos:start="37:16" pos:end="37:30">sector_qemu2lun</name><argument_list pos:start="37:31" pos:end="37:52">(<argument pos:start="37:32" pos:end="37:41"><expr pos:start="37:32" pos:end="37:41"><name pos:start="37:32" pos:end="37:41">sector_num</name></expr></argument>, <argument pos:start="37:44" pos:end="37:51"><expr pos:start="37:44" pos:end="37:51"><name pos:start="37:44" pos:end="37:51">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:54"><expr pos:start="39:5" pos:end="39:53"><name pos:start="39:5" pos:end="39:13">nb_blocks</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:53"><name pos:start="39:17" pos:end="39:31">sector_qemu2lun</name><argument_list pos:start="39:32" pos:end="39:53">(<argument pos:start="39:33" pos:end="39:42"><expr pos:start="39:33" pos:end="39:42"><name pos:start="39:33" pos:end="39:42">nb_sectors</name></expr></argument>, <argument pos:start="39:45" pos:end="39:52"><expr pos:start="39:45" pos:end="39:52"><name pos:start="39:45" pos:end="39:52">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:39"><expr pos:start="43:5" pos:end="43:38"><name pos:start="43:5" pos:end="43:13">max_unmap</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <name pos:start="43:17" pos:end="43:38"><name pos:start="43:17" pos:end="43:24">iscsilun</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:28">bl</name><operator pos:start="43:29" pos:end="43:29">.</operator><name pos:start="43:30" pos:end="43:38">max_unmap</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:32">(<expr pos:start="45:9" pos:end="45:31"><name pos:start="45:9" pos:end="45:17">max_unmap</name> <operator pos:start="45:19" pos:end="45:20">==</operator> <literal type="number" pos:start="45:22" pos:end="45:31">0xffffffff</literal></expr>)</condition> <block pos:start="45:34" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:36">

        <expr_stmt pos:start="47:9" pos:end="47:36"><expr pos:start="47:9" pos:end="47:35"><name pos:start="47:9" pos:end="47:17">max_unmap</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <name pos:start="47:21" pos:end="47:35">ISCSI_MAX_UNMAP</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="53:5" pos:end="131:5">while <condition pos:start="53:11" pos:end="53:25">(<expr pos:start="53:12" pos:end="53:24"><name pos:start="53:12" pos:end="53:20">nb_blocks</name> <operator pos:start="53:22" pos:end="53:22">&gt;</operator> <literal type="number" pos:start="53:24" pos:end="53:24">0</literal></expr>)</condition> <block pos:start="53:27" pos:end="131:5">{<block_content pos:start="55:9" pos:end="129:30">

        <expr_stmt pos:start="55:9" pos:end="55:50"><expr pos:start="55:9" pos:end="55:49"><call pos:start="55:9" pos:end="55:49"><name pos:start="55:9" pos:end="55:31">iscsi_co_init_iscsitask</name><argument_list pos:start="55:32" pos:end="55:49">(<argument pos:start="55:33" pos:end="55:40"><expr pos:start="55:33" pos:end="55:40"><name pos:start="55:33" pos:end="55:40">iscsilun</name></expr></argument>, <argument pos:start="55:43" pos:end="55:48"><expr pos:start="55:43" pos:end="55:48"><operator pos:start="55:43" pos:end="55:43">&amp;</operator><name pos:start="55:44" pos:end="55:48">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:29"><expr pos:start="57:9" pos:end="57:28"><name pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:12">list</name><operator pos:start="57:13" pos:end="57:13">.</operator><name pos:start="57:14" pos:end="57:16">num</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:28">nb_blocks</name></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="63:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:33">(<expr pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:20"><name pos:start="59:13" pos:end="59:16">list</name><operator pos:start="59:17" pos:end="59:17">.</operator><name pos:start="59:18" pos:end="59:20">num</name></name> <operator pos:start="59:22" pos:end="59:22">&gt;</operator> <name pos:start="59:24" pos:end="59:32">max_unmap</name></expr>)</condition> <block pos:start="59:35" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:33">

            <expr_stmt pos:start="61:13" pos:end="61:33"><expr pos:start="61:13" pos:end="61:32"><name pos:start="61:13" pos:end="61:20"><name pos:start="61:13" pos:end="61:16">list</name><operator pos:start="61:17" pos:end="61:17">.</operator><name pos:start="61:18" pos:end="61:20">num</name></name> <operator pos:start="61:22" pos:end="61:22">=</operator> <name pos:start="61:24" pos:end="61:32">max_unmap</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<label pos:start="65:1" pos:end="65:6"><name pos:start="65:1" pos:end="65:5">retry</name>:</label>

        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="69:62">(<expr pos:start="67:13" pos:end="69:61"><call pos:start="67:13" pos:end="69:53"><name pos:start="67:13" pos:end="67:28">iscsi_unmap_task</name><argument_list pos:start="67:29" pos:end="69:53">(<argument pos:start="67:30" pos:end="67:44"><expr pos:start="67:30" pos:end="67:44"><name pos:start="67:30" pos:end="67:44"><name pos:start="67:30" pos:end="67:37">iscsilun</name><operator pos:start="67:38" pos:end="67:39">-&gt;</operator><name pos:start="67:40" pos:end="67:44">iscsi</name></name></expr></argument>, <argument pos:start="67:47" pos:end="67:59"><expr pos:start="67:47" pos:end="67:59"><name pos:start="67:47" pos:end="67:59"><name pos:start="67:47" pos:end="67:54">iscsilun</name><operator pos:start="67:55" pos:end="67:56">-&gt;</operator><name pos:start="67:57" pos:end="67:59">lun</name></name></expr></argument>, <argument pos:start="67:62" pos:end="67:62"><expr pos:start="67:62" pos:end="67:62"><literal type="number" pos:start="67:62" pos:end="67:62">0</literal></expr></argument>, <argument pos:start="67:65" pos:end="67:65"><expr pos:start="67:65" pos:end="67:65"><literal type="number" pos:start="67:65" pos:end="67:65">0</literal></expr></argument>, <argument pos:start="67:68" pos:end="67:72"><expr pos:start="67:68" pos:end="67:72"><operator pos:start="67:68" pos:end="67:68">&amp;</operator><name pos:start="67:69" pos:end="67:72">list</name></expr></argument>, <argument pos:start="67:75" pos:end="67:75"><expr pos:start="67:75" pos:end="67:75"><literal type="number" pos:start="67:75" pos:end="67:75">1</literal></expr></argument>,

                         <argument pos:start="69:26" pos:end="69:44"><expr pos:start="69:26" pos:end="69:44"><name pos:start="69:26" pos:end="69:44">iscsi_co_generic_cb</name></expr></argument>, <argument pos:start="69:47" pos:end="69:52"><expr pos:start="69:47" pos:end="69:52"><operator pos:start="69:47" pos:end="69:47">&amp;</operator><name pos:start="69:48" pos:end="69:52">iTask</name></expr></argument>)</argument_list></call> <operator pos:start="69:55" pos:end="69:56">==</operator> <name pos:start="69:58" pos:end="69:61">NULL</name></expr>)</condition> <block pos:start="69:64" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:24">

            <return pos:start="71:13" pos:end="71:24">return <expr pos:start="71:20" pos:end="71:23"><operator pos:start="71:20" pos:end="71:20">-</operator><name pos:start="71:21" pos:end="71:23">EIO</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <while pos:start="77:9" pos:end="83:9">while <condition pos:start="77:15" pos:end="77:31">(<expr pos:start="77:16" pos:end="77:30"><operator pos:start="77:16" pos:end="77:16">!</operator><name pos:start="77:17" pos:end="77:30"><name pos:start="77:17" pos:end="77:21">iTask</name><operator pos:start="77:22" pos:end="77:22">.</operator><name pos:start="77:23" pos:end="77:30">complete</name></name></expr>)</condition> <block pos:start="77:33" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:35">

            <expr_stmt pos:start="79:13" pos:end="79:39"><expr pos:start="79:13" pos:end="79:38"><call pos:start="79:13" pos:end="79:38"><name pos:start="79:13" pos:end="79:28">iscsi_set_events</name><argument_list pos:start="79:29" pos:end="79:38">(<argument pos:start="79:30" pos:end="79:37"><expr pos:start="79:30" pos:end="79:37"><name pos:start="79:30" pos:end="79:37">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:35"><expr pos:start="81:13" pos:end="81:34"><call pos:start="81:13" pos:end="81:34"><name pos:start="81:13" pos:end="81:32">qemu_coroutine_yield</name><argument_list pos:start="81:33" pos:end="81:34">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="87:9" pos:end="93:9"><if pos:start="87:9" pos:end="93:9">if <condition pos:start="87:12" pos:end="87:31">(<expr pos:start="87:13" pos:end="87:30"><name pos:start="87:13" pos:end="87:22"><name pos:start="87:13" pos:end="87:17">iTask</name><operator pos:start="87:18" pos:end="87:18">.</operator><name pos:start="87:19" pos:end="87:22">task</name></name> <operator pos:start="87:24" pos:end="87:25">!=</operator> <name pos:start="87:27" pos:end="87:30">NULL</name></expr>)</condition> <block pos:start="87:33" pos:end="93:9">{<block_content pos:start="89:13" pos:end="91:30">

            <expr_stmt pos:start="89:13" pos:end="89:44"><expr pos:start="89:13" pos:end="89:43"><call pos:start="89:13" pos:end="89:43"><name pos:start="89:13" pos:end="89:31">scsi_free_scsi_task</name><argument_list pos:start="89:32" pos:end="89:43">(<argument pos:start="89:33" pos:end="89:42"><expr pos:start="89:33" pos:end="89:42"><name pos:start="89:33" pos:end="89:42"><name pos:start="89:33" pos:end="89:37">iTask</name><operator pos:start="89:38" pos:end="89:38">.</operator><name pos:start="89:39" pos:end="89:42">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:30"><expr pos:start="91:13" pos:end="91:29"><name pos:start="91:13" pos:end="91:22"><name pos:start="91:13" pos:end="91:17">iTask</name><operator pos:start="91:18" pos:end="91:18">.</operator><name pos:start="91:19" pos:end="91:22">task</name></name> <operator pos:start="91:24" pos:end="91:24">=</operator> <name pos:start="91:26" pos:end="91:29">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="97:9" pos:end="101:9"><if pos:start="97:9" pos:end="101:9">if <condition pos:start="97:12" pos:end="97:27">(<expr pos:start="97:13" pos:end="97:26"><name pos:start="97:13" pos:end="97:26"><name pos:start="97:13" pos:end="97:17">iTask</name><operator pos:start="97:18" pos:end="97:18">.</operator><name pos:start="97:19" pos:end="97:26">do_retry</name></name></expr>)</condition> <block pos:start="97:29" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:23">

            <goto pos:start="99:13" pos:end="99:23">goto <name pos:start="99:18" pos:end="99:22">retry</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="105:9" pos:end="115:9"><if pos:start="105:9" pos:end="115:9">if <condition pos:start="105:12" pos:end="105:56">(<expr pos:start="105:13" pos:end="105:55"><name pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:17">iTask</name><operator pos:start="105:18" pos:end="105:18">.</operator><name pos:start="105:19" pos:end="105:24">status</name></name> <operator pos:start="105:26" pos:end="105:27">==</operator> <name pos:start="105:29" pos:end="105:55">SCSI_STATUS_CHECK_CONDITION</name></expr>)</condition> <block pos:start="105:58" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:21">

            <comment type="block" pos:start="107:13" pos:end="111:47">/* the target might fail with a check condition if it

               is not happy with the alignment of the UNMAP request

               we silently fail in this case */</comment>

            <return pos:start="113:13" pos:end="113:21">return <expr pos:start="113:20" pos:end="113:20"><literal type="number" pos:start="113:20" pos:end="113:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="119:9" pos:end="123:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:45">(<expr pos:start="119:13" pos:end="119:44"><name pos:start="119:13" pos:end="119:24"><name pos:start="119:13" pos:end="119:17">iTask</name><operator pos:start="119:18" pos:end="119:18">.</operator><name pos:start="119:19" pos:end="119:24">status</name></name> <operator pos:start="119:26" pos:end="119:27">!=</operator> <name pos:start="119:29" pos:end="119:44">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="119:47" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:24">

            <return pos:start="121:13" pos:end="121:24">return <expr pos:start="121:20" pos:end="121:23"><operator pos:start="121:20" pos:end="121:20">-</operator><name pos:start="121:21" pos:end="121:23">EIO</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:29"><expr pos:start="127:9" pos:end="127:28"><name pos:start="127:9" pos:end="127:16"><name pos:start="127:9" pos:end="127:12">list</name><operator pos:start="127:13" pos:end="127:13">.</operator><name pos:start="127:14" pos:end="127:16">lba</name></name> <operator pos:start="127:18" pos:end="127:19">+=</operator> <name pos:start="127:21" pos:end="127:28"><name pos:start="127:21" pos:end="127:24">list</name><operator pos:start="127:25" pos:end="127:25">.</operator><name pos:start="127:26" pos:end="127:28">num</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:30"><expr pos:start="129:9" pos:end="129:29"><name pos:start="129:9" pos:end="129:17">nb_blocks</name> <operator pos:start="129:19" pos:end="129:20">-=</operator> <name pos:start="129:22" pos:end="129:29"><name pos:start="129:22" pos:end="129:25">list</name><operator pos:start="129:26" pos:end="129:26">.</operator><name pos:start="129:27" pos:end="129:29">num</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="135:5" pos:end="135:13">return <expr pos:start="135:12" pos:end="135:12"><literal type="number" pos:start="135:12" pos:end="135:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
