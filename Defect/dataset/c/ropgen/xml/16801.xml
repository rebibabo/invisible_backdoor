<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16801.c" pos:tabs="8"><function pos:start="1:1" pos:end="41:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">qemu_account_warp_timer</name><parameter_list pos:start="1:36" pos:end="1:41">(<parameter pos:start="1:37" pos:end="1:40"><decl pos:start="1:37" pos:end="1:40"><type pos:start="1:37" pos:end="1:40"><name pos:start="1:37" pos:end="1:40">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="41:1">{<block_content pos:start="5:5" pos:end="39:21">

    <if_stmt pos:start="5:5" pos:end="9:5"><if pos:start="5:5" pos:end="9:5">if <condition pos:start="5:8" pos:end="5:37">(<expr pos:start="5:9" pos:end="5:36"><operator pos:start="5:9" pos:end="5:9">!</operator><name pos:start="5:10" pos:end="5:19">use_icount</name> <operator pos:start="5:21" pos:end="5:22">||</operator> <operator pos:start="5:24" pos:end="5:24">!</operator><name pos:start="5:25" pos:end="5:36">icount_sleep</name></expr>)</condition> <block pos:start="5:39" pos:end="9:5">{<block_content pos:start="7:9" pos:end="7:15">

        <return pos:start="7:9" pos:end="7:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="13:5" pos:end="17:7">/* Nothing to do if the VM is stopped: QEMU_CLOCK_VIRTUAL timers

     * do not fire, so computing the deadline does not make sense.

     */</comment>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:31">(<expr pos:start="19:9" pos:end="19:30"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:30"><name pos:start="19:10" pos:end="19:28">runstate_is_running</name><argument_list pos:start="19:29" pos:end="19:30">()</argument_list></call></expr>)</condition> <block pos:start="19:33" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:15">

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:60">/* warp clock deterministically in record/replay mode */</comment>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:58">(<expr pos:start="29:9" pos:end="29:57"><operator pos:start="29:9" pos:end="29:9">!</operator><call pos:start="29:10" pos:end="29:57"><name pos:start="29:10" pos:end="29:26">replay_checkpoint</name><argument_list pos:start="29:27" pos:end="29:57">(<argument pos:start="29:28" pos:end="29:56"><expr pos:start="29:28" pos:end="29:56"><name pos:start="29:28" pos:end="29:56">CHECKPOINT_CLOCK_WARP_ACCOUNT</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:60" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:15">

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><call pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:13">timer_del</name><argument_list pos:start="37:14" pos:end="37:32">(<argument pos:start="37:15" pos:end="37:31"><expr pos:start="37:15" pos:end="37:31"><name pos:start="37:15" pos:end="37:31">icount_warp_timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:21"><expr pos:start="39:5" pos:end="39:20"><call pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:18">icount_warp_rt</name><argument_list pos:start="39:19" pos:end="39:20">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
