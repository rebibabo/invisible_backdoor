<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4433.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:4">void</name> <name pos:start="1:6" pos:end="1:11">HELPER</name></type>(<name pos:start="1:13" pos:end="1:15">pka</name>)<parameter_list pos:start="1:17" pos:end="3:33">(<parameter pos:start="1:18" pos:end="1:35"><decl pos:start="1:18" pos:end="1:35"><type pos:start="1:18" pos:end="1:35"><name pos:start="1:18" pos:end="1:30">CPUS390XState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">env</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:50"><decl pos:start="1:38" pos:end="1:50"><type pos:start="1:38" pos:end="1:50"><name pos:start="1:38" pos:end="1:45">uint64_t</name></type> <name pos:start="1:47" pos:end="1:50">dest</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:60">uint64_t</name></type> <name pos:start="1:62" pos:end="1:64">src</name></decl></parameter>,

                 <parameter pos:start="3:18" pos:end="3:32"><decl pos:start="3:18" pos:end="3:32"><type pos:start="3:18" pos:end="3:32"><name pos:start="3:18" pos:end="3:25">uint32_t</name></type> <name pos:start="3:27" pos:end="3:32">srclen</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="67:1">{<block_content pos:start="7:5" pos:end="65:5">

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">uintptr_t</name></type> <name pos:start="7:15" pos:end="7:16">ra</name> <init pos:start="7:18" pos:end="7:26">= <expr pos:start="7:20" pos:end="7:26"><call pos:start="7:20" pos:end="7:26"><name pos:start="7:20" pos:end="7:24">GETPC</name><argument_list pos:start="7:25" pos:end="7:26">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <comment type="block" pos:start="11:5" pos:end="11:59">/* The destination operand is always 16 bytes long.  */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:13"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:13">int</name></type> <name pos:start="13:15" pos:end="13:21">destlen</name> <init pos:start="13:23" pos:end="13:26">= <expr pos:start="13:25" pos:end="13:26"><literal type="number" pos:start="13:25" pos:end="13:26">16</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:57">/* The operands are processed from right to left.  */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:7">src</name> <operator pos:start="19:9" pos:end="19:10">+=</operator> <name pos:start="19:12" pos:end="19:17">srclen</name> <operator pos:start="19:19" pos:end="19:19">-</operator> <literal type="number" pos:start="19:21" pos:end="19:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:24"><expr pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:8">dest</name> <operator pos:start="21:10" pos:end="21:11">+=</operator> <name pos:start="21:13" pos:end="21:19">destlen</name> <operator pos:start="21:21" pos:end="21:21">-</operator> <literal type="number" pos:start="21:23" pos:end="21:23">1</literal></expr>;</expr_stmt>



    <for pos:start="25:5" pos:end="65:5">for <control pos:start="25:9" pos:end="25:33">(<init pos:start="25:10" pos:end="25:15"><expr pos:start="25:10" pos:end="25:14"><name pos:start="25:10" pos:end="25:10">i</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>;</init> <condition pos:start="25:17" pos:end="25:28"><expr pos:start="25:17" pos:end="25:27"><name pos:start="25:17" pos:end="25:17">i</name> <operator pos:start="25:19" pos:end="25:19">&lt;</operator> <name pos:start="25:21" pos:end="25:27">destlen</name></expr>;</condition> <incr pos:start="25:30" pos:end="25:32"><expr pos:start="25:30" pos:end="25:32"><name pos:start="25:30" pos:end="25:30">i</name><operator pos:start="25:31" pos:end="25:32">++</operator></expr></incr>)</control> <block pos:start="25:35" pos:end="65:5">{<block_content pos:start="27:9" pos:end="63:15">

        <decl_stmt pos:start="27:9" pos:end="27:22"><decl pos:start="27:9" pos:end="27:21"><type pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:15">uint8_t</name></type> <name pos:start="27:17" pos:end="27:17">b</name> <init pos:start="27:19" pos:end="27:21">= <expr pos:start="27:21" pos:end="27:21"><literal type="number" pos:start="27:21" pos:end="27:21">0</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="31:9" pos:end="31:40">/* Start with a positive sign */</comment>

        <if_stmt pos:start="33:9" pos:end="45:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:19">(<expr pos:start="33:13" pos:end="33:18"><name pos:start="33:13" pos:end="33:13">i</name> <operator pos:start="33:15" pos:end="33:16">==</operator> <literal type="number" pos:start="33:18" pos:end="33:18">0</literal></expr>)</condition> <block pos:start="33:21" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:20">

            <expr_stmt pos:start="35:13" pos:end="35:20"><expr pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:13">b</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <literal type="number" pos:start="35:17" pos:end="35:19">0xc</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="37:11" pos:end="45:9">else if <condition pos:start="37:19" pos:end="37:30">(<expr pos:start="37:20" pos:end="37:29"><name pos:start="37:20" pos:end="37:25">srclen</name> <operator pos:start="37:27" pos:end="37:27">&gt;</operator> <literal type="number" pos:start="37:29" pos:end="37:29">1</literal></expr>)</condition> <block pos:start="37:32" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:21">

            <expr_stmt pos:start="39:13" pos:end="39:54"><expr pos:start="39:13" pos:end="39:53"><name pos:start="39:13" pos:end="39:13">b</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:46"><name pos:start="39:17" pos:end="39:32">cpu_ldub_data_ra</name><argument_list pos:start="39:33" pos:end="39:46">(<argument pos:start="39:34" pos:end="39:36"><expr pos:start="39:34" pos:end="39:36"><name pos:start="39:34" pos:end="39:36">env</name></expr></argument>, <argument pos:start="39:39" pos:end="39:41"><expr pos:start="39:39" pos:end="39:41"><name pos:start="39:39" pos:end="39:41">src</name></expr></argument>, <argument pos:start="39:44" pos:end="39:45"><expr pos:start="39:44" pos:end="39:45"><name pos:start="39:44" pos:end="39:45">ra</name></expr></argument>)</argument_list></call> <operator pos:start="39:48" pos:end="39:48">&amp;</operator> <literal type="number" pos:start="39:50" pos:end="39:53">0x0f</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:18"><expr pos:start="41:13" pos:end="41:17"><name pos:start="41:13" pos:end="41:15">src</name><operator pos:start="41:16" pos:end="41:17">--</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:21"><expr pos:start="43:13" pos:end="43:20"><name pos:start="43:13" pos:end="43:18">srclen</name><operator pos:start="43:19" pos:end="43:20">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:23">(<expr pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:18">srclen</name> <operator pos:start="49:20" pos:end="49:20">&gt;</operator> <literal type="number" pos:start="49:22" pos:end="49:22">1</literal></expr>)</condition> <block pos:start="49:25" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:21">

            <expr_stmt pos:start="51:13" pos:end="51:53"><expr pos:start="51:13" pos:end="51:52"><name pos:start="51:13" pos:end="51:13">b</name> <operator pos:start="51:15" pos:end="51:16">|=</operator> <call pos:start="51:18" pos:end="51:47"><name pos:start="51:18" pos:end="51:33">cpu_ldub_data_ra</name><argument_list pos:start="51:34" pos:end="51:47">(<argument pos:start="51:35" pos:end="51:37"><expr pos:start="51:35" pos:end="51:37"><name pos:start="51:35" pos:end="51:37">env</name></expr></argument>, <argument pos:start="51:40" pos:end="51:42"><expr pos:start="51:40" pos:end="51:42"><name pos:start="51:40" pos:end="51:42">src</name></expr></argument>, <argument pos:start="51:45" pos:end="51:46"><expr pos:start="51:45" pos:end="51:46"><name pos:start="51:45" pos:end="51:46">ra</name></expr></argument>)</argument_list></call> <operator pos:start="51:49" pos:end="51:50">&lt;&lt;</operator> <literal type="number" pos:start="51:52" pos:end="51:52">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:18"><expr pos:start="53:13" pos:end="53:17"><name pos:start="53:13" pos:end="53:15">src</name><operator pos:start="53:16" pos:end="53:17">--</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:21"><expr pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:18">srclen</name><operator pos:start="55:19" pos:end="55:20">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:42"><expr pos:start="61:9" pos:end="61:41"><call pos:start="61:9" pos:end="61:41"><name pos:start="61:9" pos:end="61:23">cpu_stb_data_ra</name><argument_list pos:start="61:24" pos:end="61:41">(<argument pos:start="61:25" pos:end="61:27"><expr pos:start="61:25" pos:end="61:27"><name pos:start="61:25" pos:end="61:27">env</name></expr></argument>, <argument pos:start="61:30" pos:end="61:33"><expr pos:start="61:30" pos:end="61:33"><name pos:start="61:30" pos:end="61:33">dest</name></expr></argument>, <argument pos:start="61:36" pos:end="61:36"><expr pos:start="61:36" pos:end="61:36"><name pos:start="61:36" pos:end="61:36">b</name></expr></argument>, <argument pos:start="61:39" pos:end="61:40"><expr pos:start="61:39" pos:end="61:40"><name pos:start="61:39" pos:end="61:40">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:15"><expr pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:12">dest</name><operator pos:start="63:13" pos:end="63:14">--</operator></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
