<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9007.c" pos:tabs="8"><function pos:start="1:1" pos:end="191:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_block_commit</name><parameter_list pos:start="1:22" pos:end="11:35">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><specifier pos:start="1:23" pos:end="1:27">const</specifier> <name pos:start="1:29" pos:end="1:32">char</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">device</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:35"><decl pos:start="3:23" pos:end="3:35"><type pos:start="3:23" pos:end="3:35"><name pos:start="3:23" pos:end="3:26">bool</name></type> <name pos:start="3:28" pos:end="3:35">has_base</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:53"><decl pos:start="3:38" pos:end="3:53"><type pos:start="3:38" pos:end="3:53"><specifier pos:start="3:38" pos:end="3:42">const</specifier> <name pos:start="3:44" pos:end="3:47">char</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:53">base</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:34"><decl pos:start="5:23" pos:end="5:34"><type pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:26">bool</name></type> <name pos:start="5:28" pos:end="5:34">has_top</name></decl></parameter>, <parameter pos:start="5:37" pos:end="5:51"><decl pos:start="5:37" pos:end="5:51"><type pos:start="5:37" pos:end="5:51"><specifier pos:start="5:37" pos:end="5:41">const</specifier> <name pos:start="5:43" pos:end="5:46">char</name> <modifier pos:start="5:48" pos:end="5:48">*</modifier></type><name pos:start="5:49" pos:end="5:51">top</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:43"><decl pos:start="7:23" pos:end="7:43"><type pos:start="7:23" pos:end="7:43"><name pos:start="7:23" pos:end="7:26">bool</name></type> <name pos:start="7:28" pos:end="7:43">has_backing_file</name></decl></parameter>, <parameter pos:start="7:46" pos:end="7:69"><decl pos:start="7:46" pos:end="7:69"><type pos:start="7:46" pos:end="7:69"><specifier pos:start="7:46" pos:end="7:50">const</specifier> <name pos:start="7:52" pos:end="7:55">char</name> <modifier pos:start="7:57" pos:end="7:57">*</modifier></type><name pos:start="7:58" pos:end="7:69">backing_file</name></decl></parameter>,

                      <parameter pos:start="9:23" pos:end="9:36"><decl pos:start="9:23" pos:end="9:36"><type pos:start="9:23" pos:end="9:36"><name pos:start="9:23" pos:end="9:26">bool</name></type> <name pos:start="9:28" pos:end="9:36">has_speed</name></decl></parameter>, <parameter pos:start="9:39" pos:end="9:51"><decl pos:start="9:39" pos:end="9:51"><type pos:start="9:39" pos:end="9:51"><name pos:start="9:39" pos:end="9:45">int64_t</name></type> <name pos:start="9:47" pos:end="9:51">speed</name></decl></parameter>,

                      <parameter pos:start="11:23" pos:end="11:34"><decl pos:start="11:23" pos:end="11:34"><type pos:start="11:23" pos:end="11:34"><name pos:start="11:23" pos:end="11:27">Error</name> <modifier pos:start="11:29" pos:end="11:29">*</modifier><modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="191:1">{<block_content pos:start="15:5" pos:end="189:37">

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">BlockDriverState</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:39"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:20">BlockDriverState</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:29">base_bs</name></decl>, <decl pos:start="17:32" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:22"><modifier pos:start="17:32" pos:end="17:32">*</modifier></type><name pos:start="17:33" pos:end="17:38">top_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:14">AioContext</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:27">aio_context</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Error</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:20">local_err</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="23:5" pos:end="27:7">/* This will be part of the QMP command, if/when the

     * BlockdevOnError change for blkmirror makes it in

     */</comment>

    <decl_stmt pos:start="29:5" pos:end="29:56"><decl pos:start="29:5" pos:end="29:55"><type pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:19">BlockdevOnError</name></type> <name pos:start="29:21" pos:end="29:28">on_error</name> <init pos:start="29:30" pos:end="29:55">= <expr pos:start="29:32" pos:end="29:55"><name pos:start="29:32" pos:end="29:55">BLOCKDEV_ON_ERROR_REPORT</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:19">(<expr pos:start="33:9" pos:end="33:18"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:18">has_speed</name></expr>)</condition> <block pos:start="33:21" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:18">

        <expr_stmt pos:start="35:9" pos:end="35:18"><expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:13">speed</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <literal type="number" pos:start="35:17" pos:end="35:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="49:64">/* Important Note:

     *  libvirt relies on the DeviceNotFound error class in order to probe for

     *  live commit feature versions; for this to work, we must make sure to

     *  perform the device lookup before any generic errors that may occur in a

     *  scenario in which all optional arguments are omitted. */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:27"><expr pos:start="51:5" pos:end="51:26"><name pos:start="51:5" pos:end="51:6">bs</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <call pos:start="51:10" pos:end="51:26"><name pos:start="51:10" pos:end="51:18">bdrv_find</name><argument_list pos:start="51:19" pos:end="51:26">(<argument pos:start="51:20" pos:end="51:25"><expr pos:start="51:20" pos:end="51:25"><name pos:start="51:20" pos:end="51:25">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:12">(<expr pos:start="53:9" pos:end="53:11"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:11">bs</name></expr>)</condition> <block pos:start="53:14" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:15">

        <expr_stmt pos:start="55:9" pos:end="55:55"><expr pos:start="55:9" pos:end="55:54"><call pos:start="55:9" pos:end="55:54"><name pos:start="55:9" pos:end="55:17">error_set</name><argument_list pos:start="55:18" pos:end="55:54">(<argument pos:start="55:19" pos:end="55:22"><expr pos:start="55:19" pos:end="55:22"><name pos:start="55:19" pos:end="55:22">errp</name></expr></argument>, <argument pos:start="55:25" pos:end="55:45"><expr pos:start="55:25" pos:end="55:45"><name pos:start="55:25" pos:end="55:45">QERR_DEVICE_NOT_FOUND</name></expr></argument>, <argument pos:start="55:48" pos:end="55:53"><expr pos:start="55:48" pos:end="55:53"><name pos:start="55:48" pos:end="55:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:43"><expr pos:start="63:5" pos:end="63:42"><name pos:start="63:5" pos:end="63:15">aio_context</name> <operator pos:start="63:17" pos:end="63:17">=</operator> <call pos:start="63:19" pos:end="63:42"><name pos:start="63:19" pos:end="63:38">bdrv_get_aio_context</name><argument_list pos:start="63:39" pos:end="63:42">(<argument pos:start="63:40" pos:end="63:41"><expr pos:start="63:40" pos:end="63:41"><name pos:start="63:40" pos:end="63:41">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:37"><expr pos:start="65:5" pos:end="65:36"><call pos:start="65:5" pos:end="65:36"><name pos:start="65:5" pos:end="65:23">aio_context_acquire</name><argument_list pos:start="65:24" pos:end="65:36">(<argument pos:start="65:25" pos:end="65:35"><expr pos:start="65:25" pos:end="65:35"><name pos:start="65:25" pos:end="65:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:38">/* drain all i/o before commits */</comment>

    <expr_stmt pos:start="71:5" pos:end="71:21"><expr pos:start="71:5" pos:end="71:20"><call pos:start="71:5" pos:end="71:20"><name pos:start="71:5" pos:end="71:18">bdrv_drain_all</name><argument_list pos:start="71:19" pos:end="71:20">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:59">(<expr pos:start="75:9" pos:end="75:58"><call pos:start="75:9" pos:end="75:58"><name pos:start="75:9" pos:end="75:26">bdrv_op_is_blocked</name><argument_list pos:start="75:27" pos:end="75:58">(<argument pos:start="75:28" pos:end="75:29"><expr pos:start="75:28" pos:end="75:29"><name pos:start="75:28" pos:end="75:29">bs</name></expr></argument>, <argument pos:start="75:32" pos:end="75:51"><expr pos:start="75:32" pos:end="75:51"><name pos:start="75:32" pos:end="75:51">BLOCK_OP_TYPE_COMMIT</name></expr></argument>, <argument pos:start="75:54" pos:end="75:57"><expr pos:start="75:54" pos:end="75:57"><name pos:start="75:54" pos:end="75:57">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:61" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:17">

        <goto pos:start="77:9" pos:end="77:17">goto <name pos:start="77:14" pos:end="77:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:44">/* default top_bs is the active layer */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:16"><expr pos:start="85:5" pos:end="85:15"><name pos:start="85:5" pos:end="85:10">top_bs</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <name pos:start="85:14" pos:end="85:15">bs</name></expr>;</expr_stmt>



    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="89:23">(<expr pos:start="89:9" pos:end="89:22"><name pos:start="89:9" pos:end="89:15">has_top</name> <operator pos:start="89:17" pos:end="89:18">&amp;&amp;</operator> <name pos:start="89:20" pos:end="89:22">top</name></expr>)</condition> <block pos:start="89:25" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:9">

        <if_stmt pos:start="91:9" pos:end="95:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:43">(<expr pos:start="91:13" pos:end="91:42"><call pos:start="91:13" pos:end="91:37"><name pos:start="91:13" pos:end="91:18">strcmp</name><argument_list pos:start="91:19" pos:end="91:37">(<argument pos:start="91:20" pos:end="91:31"><expr pos:start="91:20" pos:end="91:31"><name pos:start="91:20" pos:end="91:31"><name pos:start="91:20" pos:end="91:21">bs</name><operator pos:start="91:22" pos:end="91:23">-&gt;</operator><name pos:start="91:24" pos:end="91:31">filename</name></name></expr></argument>, <argument pos:start="91:34" pos:end="91:36"><expr pos:start="91:34" pos:end="91:36"><name pos:start="91:34" pos:end="91:36">top</name></expr></argument>)</argument_list></call> <operator pos:start="91:39" pos:end="91:40">!=</operator> <literal type="number" pos:start="91:42" pos:end="91:42">0</literal></expr>)</condition> <block pos:start="91:45" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:54">

            <expr_stmt pos:start="93:13" pos:end="93:54"><expr pos:start="93:13" pos:end="93:53"><name pos:start="93:13" pos:end="93:18">top_bs</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <call pos:start="93:22" pos:end="93:53"><name pos:start="93:22" pos:end="93:44">bdrv_find_backing_image</name><argument_list pos:start="93:45" pos:end="93:53">(<argument pos:start="93:46" pos:end="93:47"><expr pos:start="93:46" pos:end="93:47"><name pos:start="93:46" pos:end="93:47">bs</name></expr></argument>, <argument pos:start="93:50" pos:end="93:52"><expr pos:start="93:50" pos:end="93:52"><name pos:start="93:50" pos:end="93:52">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:23">(<expr pos:start="101:9" pos:end="101:22"><name pos:start="101:9" pos:end="101:14">top_bs</name> <operator pos:start="101:16" pos:end="101:17">==</operator> <name pos:start="101:19" pos:end="101:22">NULL</name></expr>)</condition> <block pos:start="101:25" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:17">

        <expr_stmt pos:start="103:9" pos:end="103:76"><expr pos:start="103:9" pos:end="103:75"><call pos:start="103:9" pos:end="103:75"><name pos:start="103:9" pos:end="103:18">error_setg</name><argument_list pos:start="103:19" pos:end="103:75">(<argument pos:start="103:20" pos:end="103:23"><expr pos:start="103:20" pos:end="103:23"><name pos:start="103:20" pos:end="103:23">errp</name></expr></argument>, <argument pos:start="103:26" pos:end="103:54"><expr pos:start="103:26" pos:end="103:54"><literal type="string" pos:start="103:26" pos:end="103:54">"Top image file %s not found"</literal></expr></argument>, <argument pos:start="103:57" pos:end="103:74"><expr pos:start="103:57" pos:end="103:74"><ternary pos:start="103:57" pos:end="103:74"><condition pos:start="103:57" pos:end="103:61"><expr pos:start="103:57" pos:end="103:59"><name pos:start="103:57" pos:end="103:59">top</name></expr> ?</condition><then pos:start="103:63" pos:end="103:65"> <expr pos:start="103:63" pos:end="103:65"><name pos:start="103:63" pos:end="103:65">top</name></expr> </then><else pos:start="103:67" pos:end="103:74">: <expr pos:start="103:69" pos:end="103:74"><literal type="string" pos:start="103:69" pos:end="103:74">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="105:9" pos:end="105:17">goto <name pos:start="105:14" pos:end="105:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:56"><expr pos:start="111:5" pos:end="111:55"><call pos:start="111:5" pos:end="111:55"><name pos:start="111:5" pos:end="111:10">assert</name><argument_list pos:start="111:11" pos:end="111:55">(<argument pos:start="111:12" pos:end="111:54"><expr pos:start="111:12" pos:end="111:54"><call pos:start="111:12" pos:end="111:39"><name pos:start="111:12" pos:end="111:31">bdrv_get_aio_context</name><argument_list pos:start="111:32" pos:end="111:39">(<argument pos:start="111:33" pos:end="111:38"><expr pos:start="111:33" pos:end="111:38"><name pos:start="111:33" pos:end="111:38">top_bs</name></expr></argument>)</argument_list></call> <operator pos:start="111:41" pos:end="111:42">==</operator> <name pos:start="111:44" pos:end="111:54">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="123:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:25">(<expr pos:start="115:9" pos:end="115:24"><name pos:start="115:9" pos:end="115:16">has_base</name> <operator pos:start="115:18" pos:end="115:19">&amp;&amp;</operator> <name pos:start="115:21" pos:end="115:24">base</name></expr>)</condition> <block pos:start="115:27" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:56">

        <expr_stmt pos:start="117:9" pos:end="117:56"><expr pos:start="117:9" pos:end="117:55"><name pos:start="117:9" pos:end="117:15">base_bs</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <call pos:start="117:19" pos:end="117:55"><name pos:start="117:19" pos:end="117:41">bdrv_find_backing_image</name><argument_list pos:start="117:42" pos:end="117:55">(<argument pos:start="117:43" pos:end="117:48"><expr pos:start="117:43" pos:end="117:48"><name pos:start="117:43" pos:end="117:48">top_bs</name></expr></argument>, <argument pos:start="117:51" pos:end="117:54"><expr pos:start="117:51" pos:end="117:54"><name pos:start="117:51" pos:end="117:54">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="119:7" pos:end="123:5">else <block pos:start="119:12" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:41">

        <expr_stmt pos:start="121:9" pos:end="121:41"><expr pos:start="121:9" pos:end="121:40"><name pos:start="121:9" pos:end="121:15">base_bs</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:40"><name pos:start="121:19" pos:end="121:32">bdrv_find_base</name><argument_list pos:start="121:33" pos:end="121:40">(<argument pos:start="121:34" pos:end="121:39"><expr pos:start="121:34" pos:end="121:39"><name pos:start="121:34" pos:end="121:39">top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:24">(<expr pos:start="127:9" pos:end="127:23"><name pos:start="127:9" pos:end="127:15">base_bs</name> <operator pos:start="127:17" pos:end="127:18">==</operator> <name pos:start="127:20" pos:end="127:23">NULL</name></expr>)</condition> <block pos:start="127:26" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:17">

        <expr_stmt pos:start="129:9" pos:end="129:67"><expr pos:start="129:9" pos:end="129:66"><call pos:start="129:9" pos:end="129:66"><name pos:start="129:9" pos:end="129:17">error_set</name><argument_list pos:start="129:18" pos:end="129:66">(<argument pos:start="129:19" pos:end="129:22"><expr pos:start="129:19" pos:end="129:22"><name pos:start="129:19" pos:end="129:22">errp</name></expr></argument>, <argument pos:start="129:25" pos:end="129:43"><expr pos:start="129:25" pos:end="129:43"><name pos:start="129:25" pos:end="129:43">QERR_BASE_NOT_FOUND</name></expr></argument>, <argument pos:start="129:46" pos:end="129:65"><expr pos:start="129:46" pos:end="129:65"><ternary pos:start="129:46" pos:end="129:65"><condition pos:start="129:46" pos:end="129:51"><expr pos:start="129:46" pos:end="129:49"><name pos:start="129:46" pos:end="129:49">base</name></expr> ?</condition><then pos:start="129:53" pos:end="129:56"> <expr pos:start="129:53" pos:end="129:56"><name pos:start="129:53" pos:end="129:56">base</name></expr> </then><else pos:start="129:58" pos:end="129:65">: <expr pos:start="129:60" pos:end="129:65"><literal type="string" pos:start="129:60" pos:end="129:65">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="131:9" pos:end="131:17">goto <name pos:start="131:14" pos:end="131:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:57"><expr pos:start="137:5" pos:end="137:56"><call pos:start="137:5" pos:end="137:56"><name pos:start="137:5" pos:end="137:10">assert</name><argument_list pos:start="137:11" pos:end="137:56">(<argument pos:start="137:12" pos:end="137:55"><expr pos:start="137:12" pos:end="137:55"><call pos:start="137:12" pos:end="137:40"><name pos:start="137:12" pos:end="137:31">bdrv_get_aio_context</name><argument_list pos:start="137:32" pos:end="137:40">(<argument pos:start="137:33" pos:end="137:39"><expr pos:start="137:33" pos:end="137:39"><name pos:start="137:33" pos:end="137:39">base_bs</name></expr></argument>)</argument_list></call> <operator pos:start="137:42" pos:end="137:43">==</operator> <name pos:start="137:45" pos:end="137:55">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="141:5" pos:end="141:62">/* Do not allow attempts to commit an image into itself */</comment>

    <if_stmt pos:start="143:5" pos:end="149:5"><if pos:start="143:5" pos:end="149:5">if <condition pos:start="143:8" pos:end="143:26">(<expr pos:start="143:9" pos:end="143:25"><name pos:start="143:9" pos:end="143:14">top_bs</name> <operator pos:start="143:16" pos:end="143:17">==</operator> <name pos:start="143:19" pos:end="143:25">base_bs</name></expr>)</condition> <block pos:start="143:28" pos:end="149:5">{<block_content pos:start="145:9" pos:end="147:17">

        <expr_stmt pos:start="145:9" pos:end="145:63"><expr pos:start="145:9" pos:end="145:62"><call pos:start="145:9" pos:end="145:62"><name pos:start="145:9" pos:end="145:18">error_setg</name><argument_list pos:start="145:19" pos:end="145:62">(<argument pos:start="145:20" pos:end="145:23"><expr pos:start="145:20" pos:end="145:23"><name pos:start="145:20" pos:end="145:23">errp</name></expr></argument>, <argument pos:start="145:26" pos:end="145:61"><expr pos:start="145:26" pos:end="145:61"><literal type="string" pos:start="145:26" pos:end="145:61">"cannot commit an image into itself"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="147:9" pos:end="147:17">goto <name pos:start="147:14" pos:end="147:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="153:5" pos:end="175:5"><if pos:start="153:5" pos:end="169:5">if <condition pos:start="153:8" pos:end="153:21">(<expr pos:start="153:9" pos:end="153:20"><name pos:start="153:9" pos:end="153:14">top_bs</name> <operator pos:start="153:16" pos:end="153:17">==</operator> <name pos:start="153:19" pos:end="153:20">bs</name></expr>)</condition> <block pos:start="153:23" pos:end="169:5">{<block_content pos:start="155:9" pos:end="167:44">

        <if_stmt pos:start="155:9" pos:end="163:9"><if pos:start="155:9" pos:end="163:9">if <condition pos:start="155:12" pos:end="155:29">(<expr pos:start="155:13" pos:end="155:28"><name pos:start="155:13" pos:end="155:28">has_backing_file</name></expr>)</condition> <block pos:start="155:31" pos:end="163:9">{<block_content pos:start="157:13" pos:end="161:21">

            <expr_stmt pos:start="157:13" pos:end="159:63"><expr pos:start="157:13" pos:end="159:62"><call pos:start="157:13" pos:end="159:62"><name pos:start="157:13" pos:end="157:22">error_setg</name><argument_list pos:start="157:23" pos:end="159:62">(<argument pos:start="157:24" pos:end="157:27"><expr pos:start="157:24" pos:end="157:27"><name pos:start="157:24" pos:end="157:27">errp</name></expr></argument>, <argument pos:start="157:30" pos:end="159:61"><expr pos:start="157:30" pos:end="159:61"><literal type="string" pos:start="157:30" pos:end="157:56">"'backing-file' specified,"</literal>

                             <literal type="string" pos:start="159:30" pos:end="159:61">" but 'top' is the active layer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="161:13" pos:end="161:21">goto <name pos:start="161:18" pos:end="161:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="165:9" pos:end="167:44"><expr pos:start="165:9" pos:end="167:43"><call pos:start="165:9" pos:end="167:43"><name pos:start="165:9" pos:end="165:27">commit_active_start</name><argument_list pos:start="165:28" pos:end="167:43">(<argument pos:start="165:29" pos:end="165:30"><expr pos:start="165:29" pos:end="165:30"><name pos:start="165:29" pos:end="165:30">bs</name></expr></argument>, <argument pos:start="165:33" pos:end="165:39"><expr pos:start="165:33" pos:end="165:39"><name pos:start="165:33" pos:end="165:39">base_bs</name></expr></argument>, <argument pos:start="165:42" pos:end="165:46"><expr pos:start="165:42" pos:end="165:46"><name pos:start="165:42" pos:end="165:46">speed</name></expr></argument>, <argument pos:start="165:49" pos:end="165:56"><expr pos:start="165:49" pos:end="165:56"><name pos:start="165:49" pos:end="165:56">on_error</name></expr></argument>, <argument pos:start="165:59" pos:end="165:70"><expr pos:start="165:59" pos:end="165:70"><name pos:start="165:59" pos:end="165:70">block_job_cb</name></expr></argument>,

                            <argument pos:start="167:29" pos:end="167:30"><expr pos:start="167:29" pos:end="167:30"><name pos:start="167:29" pos:end="167:30">bs</name></expr></argument>, <argument pos:start="167:33" pos:end="167:42"><expr pos:start="167:33" pos:end="167:42"><operator pos:start="167:33" pos:end="167:33">&amp;</operator><name pos:start="167:34" pos:end="167:42">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="169:7" pos:end="175:5">else <block pos:start="169:12" pos:end="175:5">{<block_content pos:start="171:9" pos:end="173:73">

        <expr_stmt pos:start="171:9" pos:end="173:73"><expr pos:start="171:9" pos:end="173:72"><call pos:start="171:9" pos:end="173:72"><name pos:start="171:9" pos:end="171:20">commit_start</name><argument_list pos:start="171:21" pos:end="173:72">(<argument pos:start="171:22" pos:end="171:23"><expr pos:start="171:22" pos:end="171:23"><name pos:start="171:22" pos:end="171:23">bs</name></expr></argument>, <argument pos:start="171:26" pos:end="171:32"><expr pos:start="171:26" pos:end="171:32"><name pos:start="171:26" pos:end="171:32">base_bs</name></expr></argument>, <argument pos:start="171:35" pos:end="171:40"><expr pos:start="171:35" pos:end="171:40"><name pos:start="171:35" pos:end="171:40">top_bs</name></expr></argument>, <argument pos:start="171:43" pos:end="171:47"><expr pos:start="171:43" pos:end="171:47"><name pos:start="171:43" pos:end="171:47">speed</name></expr></argument>, <argument pos:start="171:50" pos:end="171:57"><expr pos:start="171:50" pos:end="171:57"><name pos:start="171:50" pos:end="171:57">on_error</name></expr></argument>, <argument pos:start="171:60" pos:end="171:71"><expr pos:start="171:60" pos:end="171:71"><name pos:start="171:60" pos:end="171:71">block_job_cb</name></expr></argument>, <argument pos:start="171:74" pos:end="171:75"><expr pos:start="171:74" pos:end="171:75"><name pos:start="171:74" pos:end="171:75">bs</name></expr></argument>,

                     <argument pos:start="173:22" pos:end="173:59"><expr pos:start="173:22" pos:end="173:59"><ternary pos:start="173:22" pos:end="173:59"><condition pos:start="173:22" pos:end="173:39"><expr pos:start="173:22" pos:end="173:37"><name pos:start="173:22" pos:end="173:37">has_backing_file</name></expr> ?</condition><then pos:start="173:41" pos:end="173:52"> <expr pos:start="173:41" pos:end="173:52"><name pos:start="173:41" pos:end="173:52">backing_file</name></expr> </then><else pos:start="173:54" pos:end="173:59">: <expr pos:start="173:56" pos:end="173:59"><name pos:start="173:56" pos:end="173:59">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="173:62" pos:end="173:71"><expr pos:start="173:62" pos:end="173:71"><operator pos:start="173:62" pos:end="173:62">&amp;</operator><name pos:start="173:63" pos:end="173:71">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="177:5" pos:end="183:5"><if pos:start="177:5" pos:end="183:5">if <condition pos:start="177:8" pos:end="177:26">(<expr pos:start="177:9" pos:end="177:25"><name pos:start="177:9" pos:end="177:17">local_err</name> <operator pos:start="177:19" pos:end="177:20">!=</operator> <name pos:start="177:22" pos:end="177:25">NULL</name></expr>)</condition> <block pos:start="177:28" pos:end="183:5">{<block_content pos:start="179:9" pos:end="181:17">

        <expr_stmt pos:start="179:9" pos:end="179:41"><expr pos:start="179:9" pos:end="179:40"><call pos:start="179:9" pos:end="179:40"><name pos:start="179:9" pos:end="179:23">error_propagate</name><argument_list pos:start="179:24" pos:end="179:40">(<argument pos:start="179:25" pos:end="179:28"><expr pos:start="179:25" pos:end="179:28"><name pos:start="179:25" pos:end="179:28">errp</name></expr></argument>, <argument pos:start="179:31" pos:end="179:39"><expr pos:start="179:31" pos:end="179:39"><name pos:start="179:31" pos:end="179:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="181:9" pos:end="181:17">goto <name pos:start="181:14" pos:end="181:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="187:1" pos:end="187:4"><name pos:start="187:1" pos:end="187:3">out</name>:</label>

    <expr_stmt pos:start="189:5" pos:end="189:37"><expr pos:start="189:5" pos:end="189:36"><call pos:start="189:5" pos:end="189:36"><name pos:start="189:5" pos:end="189:23">aio_context_release</name><argument_list pos:start="189:24" pos:end="189:36">(<argument pos:start="189:25" pos:end="189:35"><expr pos:start="189:25" pos:end="189:35"><name pos:start="189:25" pos:end="189:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
