<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21632.c" pos:tabs="8"><function pos:start="1:1" pos:end="3951:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">long</name></type> <name pos:start="1:6" pos:end="1:15">disas_insn</name><parameter_list pos:start="1:16" pos:end="1:51">(<parameter pos:start="1:17" pos:end="1:31"><decl pos:start="1:17" pos:end="1:31"><type pos:start="1:17" pos:end="1:31"><name pos:start="1:17" pos:end="1:28">DisasContext</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:31">s</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:50"><name pos:start="1:34" pos:end="1:40">uint8_t</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:50">pc_start</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="3951:1">{<block_content pos:start="5:5" pos:end="3949:14">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">b</name></decl>, <decl pos:start="5:12" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:19">prefixes</name></decl>, <decl pos:start="5:22" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:26">aflag</name></decl>, <decl pos:start="5:29" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:29" pos:end="5:33">dflag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">shift</name></decl>, <decl pos:start="7:16" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:17">ot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:67"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">modrm</name></decl>, <decl pos:start="9:16" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:18">reg</name></decl>, <decl pos:start="9:21" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:22">rm</name></decl>, <decl pos:start="9:25" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:27">mod</name></decl>, <decl pos:start="9:30" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:30" pos:end="9:37">reg_addr</name></decl>, <decl pos:start="9:40" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:40" pos:end="9:41">op</name></decl>, <decl pos:start="9:44" pos:end="9:48"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:44" pos:end="9:48">opreg</name></decl>, <decl pos:start="9:51" pos:end="9:61"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:51" pos:end="9:61">offset_addr</name></decl>, <decl pos:start="9:64" pos:end="9:66"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:64" pos:end="9:66">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:25">next_eip</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:21"><expr pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:9">pc</name></name> <operator pos:start="15:11" pos:end="15:11">=</operator> <name pos:start="15:13" pos:end="15:20">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">prefixes</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:9">aflag</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <name pos:start="19:13" pos:end="19:21"><name pos:start="19:13" pos:end="19:13">s</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:21">code32</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:9">dflag</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <name pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:21">code32</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:21"><expr pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:15">override</name></name> <operator pos:start="23:17" pos:end="23:17">=</operator> <operator pos:start="23:19" pos:end="23:19">-</operator><literal type="number" pos:start="23:20" pos:end="23:20">1</literal></expr>;</expr_stmt>

 <label pos:start="25:2" pos:end="25:11"><name pos:start="25:2" pos:end="25:10">next_byte</name>:</label>

    <expr_stmt pos:start="27:5" pos:end="27:20"><expr pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:5">b</name> <operator pos:start="27:7" pos:end="27:7">=</operator> <call pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:12">ldub</name><argument_list pos:start="27:13" pos:end="27:19">(<argument pos:start="27:14" pos:end="27:18"><expr pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:14">s</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:18">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:12"><expr pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:9"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:9">pc</name></name><operator pos:start="29:10" pos:end="29:11">++</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:24">/* check prefixes */</comment>

    <switch pos:start="33:5" pos:end="107:5">switch <condition pos:start="33:12" pos:end="33:14">(<expr pos:start="33:13" pos:end="33:13"><name pos:start="33:13" pos:end="33:13">b</name></expr>)</condition> <block pos:start="33:16" pos:end="107:5">{<block_content pos:start="35:5" pos:end="105:23">

    <case pos:start="35:5" pos:end="35:14">case <expr pos:start="35:10" pos:end="35:13"><literal type="number" pos:start="35:10" pos:end="35:13">0xf3</literal></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:16">prefixes</name> <operator pos:start="37:18" pos:end="37:19">|=</operator> <name pos:start="37:21" pos:end="37:31">PREFIX_REPZ</name></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:23">goto <name pos:start="39:14" pos:end="39:22">next_byte</name>;</goto>

    <case pos:start="41:5" pos:end="41:14">case <expr pos:start="41:10" pos:end="41:13"><literal type="number" pos:start="41:10" pos:end="41:13">0xf2</literal></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:16">prefixes</name> <operator pos:start="43:18" pos:end="43:19">|=</operator> <name pos:start="43:21" pos:end="43:32">PREFIX_REPNZ</name></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:23">goto <name pos:start="45:14" pos:end="45:22">next_byte</name>;</goto>

    <case pos:start="47:5" pos:end="47:14">case <expr pos:start="47:10" pos:end="47:13"><literal type="number" pos:start="47:10" pos:end="47:13">0xf0</literal></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:32"><expr pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:16">prefixes</name> <operator pos:start="49:18" pos:end="49:19">|=</operator> <name pos:start="49:21" pos:end="49:31">PREFIX_LOCK</name></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:23">goto <name pos:start="51:14" pos:end="51:22">next_byte</name>;</goto>

    <case pos:start="53:5" pos:end="53:14">case <expr pos:start="53:10" pos:end="53:13"><literal type="number" pos:start="53:10" pos:end="53:13">0x2e</literal></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:27"><expr pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:19">override</name></name> <operator pos:start="55:21" pos:end="55:21">=</operator> <name pos:start="55:23" pos:end="55:26">R_CS</name></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:23">goto <name pos:start="57:14" pos:end="57:22">next_byte</name>;</goto>

    <case pos:start="59:5" pos:end="59:14">case <expr pos:start="59:10" pos:end="59:13"><literal type="number" pos:start="59:10" pos:end="59:13">0x36</literal></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:27"><expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:19"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:19">override</name></name> <operator pos:start="61:21" pos:end="61:21">=</operator> <name pos:start="61:23" pos:end="61:26">R_SS</name></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:23">goto <name pos:start="63:14" pos:end="63:22">next_byte</name>;</goto>

    <case pos:start="65:5" pos:end="65:14">case <expr pos:start="65:10" pos:end="65:13"><literal type="number" pos:start="65:10" pos:end="65:13">0x3e</literal></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:27"><expr pos:start="67:9" pos:end="67:26"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:19">override</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <name pos:start="67:23" pos:end="67:26">R_DS</name></expr>;</expr_stmt>

        <goto pos:start="69:9" pos:end="69:23">goto <name pos:start="69:14" pos:end="69:22">next_byte</name>;</goto>

    <case pos:start="71:5" pos:end="71:14">case <expr pos:start="71:10" pos:end="71:13"><literal type="number" pos:start="71:10" pos:end="71:13">0x26</literal></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:27"><expr pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:19"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:19">override</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:26">R_ES</name></expr>;</expr_stmt>

        <goto pos:start="75:9" pos:end="75:23">goto <name pos:start="75:14" pos:end="75:22">next_byte</name>;</goto>

    <case pos:start="77:5" pos:end="77:14">case <expr pos:start="77:10" pos:end="77:13"><literal type="number" pos:start="77:10" pos:end="77:13">0x64</literal></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:27"><expr pos:start="79:9" pos:end="79:26"><name pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:19">override</name></name> <operator pos:start="79:21" pos:end="79:21">=</operator> <name pos:start="79:23" pos:end="79:26">R_FS</name></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:23">goto <name pos:start="81:14" pos:end="81:22">next_byte</name>;</goto>

    <case pos:start="83:5" pos:end="83:14">case <expr pos:start="83:10" pos:end="83:13"><literal type="number" pos:start="83:10" pos:end="83:13">0x65</literal></expr>:</case>

        <expr_stmt pos:start="85:9" pos:end="85:27"><expr pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:19">override</name></name> <operator pos:start="85:21" pos:end="85:21">=</operator> <name pos:start="85:23" pos:end="85:26">R_GS</name></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:23">goto <name pos:start="87:14" pos:end="87:22">next_byte</name>;</goto>

    <case pos:start="89:5" pos:end="89:14">case <expr pos:start="89:10" pos:end="89:13"><literal type="number" pos:start="89:10" pos:end="89:13">0x66</literal></expr>:</case>

        <expr_stmt pos:start="91:9" pos:end="91:32"><expr pos:start="91:9" pos:end="91:31"><name pos:start="91:9" pos:end="91:16">prefixes</name> <operator pos:start="91:18" pos:end="91:19">|=</operator> <name pos:start="91:21" pos:end="91:31">PREFIX_DATA</name></expr>;</expr_stmt>

        <goto pos:start="93:9" pos:end="93:23">goto <name pos:start="93:14" pos:end="93:22">next_byte</name>;</goto>

    <case pos:start="95:5" pos:end="95:14">case <expr pos:start="95:10" pos:end="95:13"><literal type="number" pos:start="95:10" pos:end="95:13">0x67</literal></expr>:</case>

        <expr_stmt pos:start="97:9" pos:end="97:31"><expr pos:start="97:9" pos:end="97:30"><name pos:start="97:9" pos:end="97:16">prefixes</name> <operator pos:start="97:18" pos:end="97:19">|=</operator> <name pos:start="97:21" pos:end="97:30">PREFIX_ADR</name></expr>;</expr_stmt>

        <goto pos:start="99:9" pos:end="99:23">goto <name pos:start="99:14" pos:end="99:22">next_byte</name>;</goto>

    <case pos:start="101:5" pos:end="101:14">case <expr pos:start="101:10" pos:end="101:13"><literal type="number" pos:start="101:10" pos:end="101:13">0x9b</literal></expr>:</case>

        <expr_stmt pos:start="103:9" pos:end="103:33"><expr pos:start="103:9" pos:end="103:32"><name pos:start="103:9" pos:end="103:16">prefixes</name> <operator pos:start="103:18" pos:end="103:19">|=</operator> <name pos:start="103:21" pos:end="103:32">PREFIX_FWAIT</name></expr>;</expr_stmt>

        <goto pos:start="105:9" pos:end="105:23">goto <name pos:start="105:14" pos:end="105:22">next_byte</name>;</goto>

    </block_content>}</block></switch>



    <if_stmt pos:start="111:5" pos:end="113:19"><if pos:start="111:5" pos:end="113:19">if <condition pos:start="111:8" pos:end="111:31">(<expr pos:start="111:9" pos:end="111:30"><name pos:start="111:9" pos:end="111:16">prefixes</name> <operator pos:start="111:18" pos:end="111:18">&amp;</operator> <name pos:start="111:20" pos:end="111:30">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:19"><block_content pos:start="113:9" pos:end="113:19">

        <expr_stmt pos:start="113:9" pos:end="113:19"><expr pos:start="113:9" pos:end="113:18"><name pos:start="113:9" pos:end="113:13">dflag</name> <operator pos:start="113:15" pos:end="113:16">^=</operator> <literal type="number" pos:start="113:18" pos:end="113:18">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="115:5" pos:end="117:19"><if pos:start="115:5" pos:end="117:19">if <condition pos:start="115:8" pos:end="115:30">(<expr pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:16">prefixes</name> <operator pos:start="115:18" pos:end="115:18">&amp;</operator> <name pos:start="115:20" pos:end="115:29">PREFIX_ADR</name></expr>)</condition><block type="pseudo" pos:start="117:9" pos:end="117:19"><block_content pos:start="117:9" pos:end="117:19">

        <expr_stmt pos:start="117:9" pos:end="117:19"><expr pos:start="117:9" pos:end="117:18"><name pos:start="117:9" pos:end="117:13">aflag</name> <operator pos:start="117:15" pos:end="117:16">^=</operator> <literal type="number" pos:start="117:18" pos:end="117:18">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:25"><expr pos:start="121:5" pos:end="121:24"><name pos:start="121:5" pos:end="121:13"><name pos:start="121:5" pos:end="121:5">s</name><operator pos:start="121:6" pos:end="121:7">-&gt;</operator><name pos:start="121:8" pos:end="121:13">prefix</name></name> <operator pos:start="121:15" pos:end="121:15">=</operator> <name pos:start="121:17" pos:end="121:24">prefixes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:21"><expr pos:start="123:5" pos:end="123:20"><name pos:start="123:5" pos:end="123:12"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:12">aflag</name></name> <operator pos:start="123:14" pos:end="123:14">=</operator> <name pos:start="123:16" pos:end="123:20">aflag</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:21"><expr pos:start="125:5" pos:end="125:20"><name pos:start="125:5" pos:end="125:12"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:12">dflag</name></name> <operator pos:start="125:14" pos:end="125:14">=</operator> <name pos:start="125:16" pos:end="125:20">dflag</name></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:25">/* lock generation */</comment>

    <if_stmt pos:start="131:5" pos:end="133:22"><if pos:start="131:5" pos:end="133:22">if <condition pos:start="131:8" pos:end="131:31">(<expr pos:start="131:9" pos:end="131:30"><name pos:start="131:9" pos:end="131:16">prefixes</name> <operator pos:start="131:18" pos:end="131:18">&amp;</operator> <name pos:start="131:20" pos:end="131:30">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:22"><block_content pos:start="133:9" pos:end="133:22">

        <expr_stmt pos:start="133:9" pos:end="133:22"><expr pos:start="133:9" pos:end="133:21"><call pos:start="133:9" pos:end="133:21"><name pos:start="133:9" pos:end="133:19">gen_op_lock</name><argument_list pos:start="133:20" pos:end="133:21">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:27">/* now check op code */</comment>

 <label pos:start="139:2" pos:end="139:10"><name pos:start="139:2" pos:end="139:9">reswitch</name>:</label>

    <switch pos:start="141:5" pos:end="3935:5">switch<condition pos:start="141:11" pos:end="141:13">(<expr pos:start="141:12" pos:end="141:12"><name pos:start="141:12" pos:end="141:12">b</name></expr>)</condition> <block pos:start="141:15" pos:end="3935:5">{<block_content pos:start="143:5" pos:end="3933:24">

    <case pos:start="143:5" pos:end="143:14">case <expr pos:start="143:10" pos:end="143:13"><literal type="number" pos:start="143:10" pos:end="143:13">0x0f</literal></expr>:</case>

        <comment type="block" format="doxygen" pos:start="145:9" pos:end="145:36">/**************************/</comment>

        <comment type="block" pos:start="147:9" pos:end="147:30">/* extended op code */</comment>

        <expr_stmt pos:start="149:9" pos:end="149:34"><expr pos:start="149:9" pos:end="149:33"><name pos:start="149:9" pos:end="149:9">b</name> <operator pos:start="149:11" pos:end="149:11">=</operator> <call pos:start="149:13" pos:end="149:25"><name pos:start="149:13" pos:end="149:16">ldub</name><argument_list pos:start="149:17" pos:end="149:25">(<argument pos:start="149:18" pos:end="149:24"><expr pos:start="149:18" pos:end="149:24"><name pos:start="149:18" pos:end="149:22"><name pos:start="149:18" pos:end="149:18">s</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:22">pc</name></name><operator pos:start="149:23" pos:end="149:24">++</operator></expr></argument>)</argument_list></call> <operator pos:start="149:27" pos:end="149:27">|</operator> <literal type="number" pos:start="149:29" pos:end="149:33">0x100</literal></expr>;</expr_stmt>

        <goto pos:start="151:9" pos:end="151:22">goto <name pos:start="151:14" pos:end="151:21">reswitch</name>;</goto>

        

        <comment type="block" format="doxygen" pos:start="155:9" pos:end="155:36">/**************************/</comment>

        <comment type="block" pos:start="157:9" pos:end="157:27">/* arith &amp; logic */</comment>

    <case pos:start="159:5" pos:end="159:23">case <expr pos:start="159:10" pos:end="159:22"><literal type="number" pos:start="159:10" pos:end="159:13">0x00</literal> <operator pos:start="159:15" pos:end="159:17">...</operator> <literal type="number" pos:start="159:19" pos:end="159:22">0x05</literal></expr>:</case>

    <case pos:start="161:5" pos:end="161:23">case <expr pos:start="161:10" pos:end="161:22"><literal type="number" pos:start="161:10" pos:end="161:13">0x08</literal> <operator pos:start="161:15" pos:end="161:17">...</operator> <literal type="number" pos:start="161:19" pos:end="161:22">0x0d</literal></expr>:</case>

    <case pos:start="163:5" pos:end="163:23">case <expr pos:start="163:10" pos:end="163:22"><literal type="number" pos:start="163:10" pos:end="163:13">0x10</literal> <operator pos:start="163:15" pos:end="163:17">...</operator> <literal type="number" pos:start="163:19" pos:end="163:22">0x15</literal></expr>:</case>

    <case pos:start="165:5" pos:end="165:23">case <expr pos:start="165:10" pos:end="165:22"><literal type="number" pos:start="165:10" pos:end="165:13">0x18</literal> <operator pos:start="165:15" pos:end="165:17">...</operator> <literal type="number" pos:start="165:19" pos:end="165:22">0x1d</literal></expr>:</case>

    <case pos:start="167:5" pos:end="167:23">case <expr pos:start="167:10" pos:end="167:22"><literal type="number" pos:start="167:10" pos:end="167:13">0x20</literal> <operator pos:start="167:15" pos:end="167:17">...</operator> <literal type="number" pos:start="167:19" pos:end="167:22">0x25</literal></expr>:</case>

    <case pos:start="169:5" pos:end="169:23">case <expr pos:start="169:10" pos:end="169:22"><literal type="number" pos:start="169:10" pos:end="169:13">0x28</literal> <operator pos:start="169:15" pos:end="169:17">...</operator> <literal type="number" pos:start="169:19" pos:end="169:22">0x2d</literal></expr>:</case>

    <case pos:start="171:5" pos:end="171:23">case <expr pos:start="171:10" pos:end="171:22"><literal type="number" pos:start="171:10" pos:end="171:13">0x30</literal> <operator pos:start="171:15" pos:end="171:17">...</operator> <literal type="number" pos:start="171:19" pos:end="171:22">0x35</literal></expr>:</case>

    <case pos:start="173:5" pos:end="173:23">case <expr pos:start="173:10" pos:end="173:22"><literal type="number" pos:start="173:10" pos:end="173:13">0x38</literal> <operator pos:start="173:15" pos:end="173:17">...</operator> <literal type="number" pos:start="173:19" pos:end="173:22">0x3d</literal></expr>:</case>

        <block pos:start="175:9" pos:end="269:9">{<block_content pos:start="177:13" pos:end="267:13">

            <decl_stmt pos:start="177:13" pos:end="177:27"><decl pos:start="177:13" pos:end="177:18"><type pos:start="177:13" pos:end="177:15"><name pos:start="177:13" pos:end="177:15">int</name></type> <name pos:start="177:17" pos:end="177:18">op</name></decl>, <decl pos:start="177:21" pos:end="177:21"><type ref="prev" pos:start="177:13" pos:end="177:15"/><name pos:start="177:21" pos:end="177:21">f</name></decl>, <decl pos:start="177:24" pos:end="177:26"><type ref="prev" pos:start="177:13" pos:end="177:15"/><name pos:start="177:24" pos:end="177:26">val</name></decl>;</decl_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:30"><expr pos:start="179:13" pos:end="179:29"><name pos:start="179:13" pos:end="179:14">op</name> <operator pos:start="179:16" pos:end="179:16">=</operator> <operator pos:start="179:18" pos:end="179:18">(</operator><name pos:start="179:19" pos:end="179:19">b</name> <operator pos:start="179:21" pos:end="179:22">&gt;&gt;</operator> <literal type="number" pos:start="179:24" pos:end="179:24">3</literal><operator pos:start="179:25" pos:end="179:25">)</operator> <operator pos:start="179:27" pos:end="179:27">&amp;</operator> <literal type="number" pos:start="179:29" pos:end="179:29">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:29"><expr pos:start="181:13" pos:end="181:28"><name pos:start="181:13" pos:end="181:13">f</name> <operator pos:start="181:15" pos:end="181:15">=</operator> <operator pos:start="181:17" pos:end="181:17">(</operator><name pos:start="181:18" pos:end="181:18">b</name> <operator pos:start="181:20" pos:end="181:21">&gt;&gt;</operator> <literal type="number" pos:start="181:23" pos:end="181:23">1</literal><operator pos:start="181:24" pos:end="181:24">)</operator> <operator pos:start="181:26" pos:end="181:26">&amp;</operator> <literal type="number" pos:start="181:28" pos:end="181:28">3</literal></expr>;</expr_stmt>



            <if_stmt pos:start="185:13" pos:end="191:47"><if pos:start="185:13" pos:end="187:29">if <condition pos:start="185:16" pos:end="185:29">(<expr pos:start="185:17" pos:end="185:28"><operator pos:start="185:17" pos:end="185:17">(</operator><name pos:start="185:18" pos:end="185:18">b</name> <operator pos:start="185:20" pos:end="185:20">&amp;</operator> <literal type="number" pos:start="185:22" pos:end="185:22">1</literal><operator pos:start="185:23" pos:end="185:23">)</operator> <operator pos:start="185:25" pos:end="185:26">==</operator> <literal type="number" pos:start="185:28" pos:end="185:28">0</literal></expr>)</condition><block type="pseudo" pos:start="187:17" pos:end="187:29"><block_content pos:start="187:17" pos:end="187:29">

                <expr_stmt pos:start="187:17" pos:end="187:29"><expr pos:start="187:17" pos:end="187:28"><name pos:start="187:17" pos:end="187:18">ot</name> <operator pos:start="187:20" pos:end="187:20">=</operator> <name pos:start="187:22" pos:end="187:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="189:13" pos:end="191:47">else<block type="pseudo" pos:start="191:17" pos:end="191:47"><block_content pos:start="191:17" pos:end="191:47">

                <expr_stmt pos:start="191:17" pos:end="191:47"><expr pos:start="191:17" pos:end="191:46"><name pos:start="191:17" pos:end="191:18">ot</name> <operator pos:start="191:20" pos:end="191:20">=</operator> <ternary pos:start="191:22" pos:end="191:46"><condition pos:start="191:22" pos:end="191:28"><expr pos:start="191:22" pos:end="191:26"><name pos:start="191:22" pos:end="191:26">dflag</name></expr> ?</condition><then pos:start="191:30" pos:end="191:36"> <expr pos:start="191:30" pos:end="191:36"><name pos:start="191:30" pos:end="191:36">OT_LONG</name></expr> </then><else pos:start="191:38" pos:end="191:46">: <expr pos:start="191:40" pos:end="191:46"><name pos:start="191:40" pos:end="191:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            

            <switch pos:start="195:13" pos:end="267:13">switch<condition pos:start="195:19" pos:end="195:21">(<expr pos:start="195:20" pos:end="195:20"><name pos:start="195:20" pos:end="195:20">f</name></expr>)</condition> <block pos:start="195:23" pos:end="267:13">{<block_content pos:start="197:13" pos:end="265:22">

            <case pos:start="197:13" pos:end="197:19">case <expr pos:start="197:18" pos:end="197:18"><literal type="number" pos:start="197:18" pos:end="197:18">0</literal></expr>:</case> <comment type="block" pos:start="197:21" pos:end="197:35">/* OP Ev, Gv */</comment>

                <expr_stmt pos:start="199:17" pos:end="199:38"><expr pos:start="199:17" pos:end="199:37"><name pos:start="199:17" pos:end="199:21">modrm</name> <operator pos:start="199:23" pos:end="199:23">=</operator> <call pos:start="199:25" pos:end="199:37"><name pos:start="199:25" pos:end="199:28">ldub</name><argument_list pos:start="199:29" pos:end="199:37">(<argument pos:start="199:30" pos:end="199:36"><expr pos:start="199:30" pos:end="199:36"><name pos:start="199:30" pos:end="199:34"><name pos:start="199:30" pos:end="199:30">s</name><operator pos:start="199:31" pos:end="199:32">-&gt;</operator><name pos:start="199:33" pos:end="199:34">pc</name></name><operator pos:start="199:35" pos:end="199:36">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:50"><expr pos:start="201:17" pos:end="201:49"><name pos:start="201:17" pos:end="201:19">reg</name> <operator pos:start="201:21" pos:end="201:21">=</operator> <operator pos:start="201:23" pos:end="201:23">(</operator><operator pos:start="201:24" pos:end="201:24">(</operator><name pos:start="201:25" pos:end="201:29">modrm</name> <operator pos:start="201:31" pos:end="201:32">&gt;&gt;</operator> <literal type="number" pos:start="201:34" pos:end="201:34">3</literal><operator pos:start="201:35" pos:end="201:35">)</operator> <operator pos:start="201:37" pos:end="201:37">&amp;</operator> <literal type="number" pos:start="201:39" pos:end="201:39">7</literal><operator pos:start="201:40" pos:end="201:40">)</operator> <operator pos:start="201:42" pos:end="201:42">+</operator> <name pos:start="201:44" pos:end="201:49">OR_EAX</name></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:39"><expr pos:start="203:17" pos:end="203:38"><name pos:start="203:17" pos:end="203:19">mod</name> <operator pos:start="203:21" pos:end="203:21">=</operator> <operator pos:start="203:23" pos:end="203:23">(</operator><name pos:start="203:24" pos:end="203:28">modrm</name> <operator pos:start="203:30" pos:end="203:31">&gt;&gt;</operator> <literal type="number" pos:start="203:33" pos:end="203:33">6</literal><operator pos:start="203:34" pos:end="203:34">)</operator> <operator pos:start="203:36" pos:end="203:36">&amp;</operator> <literal type="number" pos:start="203:38" pos:end="203:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:31"><expr pos:start="205:17" pos:end="205:30"><name pos:start="205:17" pos:end="205:18">rm</name> <operator pos:start="205:20" pos:end="205:20">=</operator> <name pos:start="205:22" pos:end="205:26">modrm</name> <operator pos:start="205:28" pos:end="205:28">&amp;</operator> <literal type="number" pos:start="205:30" pos:end="205:30">7</literal></expr>;</expr_stmt>

                <if_stmt pos:start="207:17" pos:end="219:17"><if pos:start="207:17" pos:end="215:17">if <condition pos:start="207:20" pos:end="207:29">(<expr pos:start="207:21" pos:end="207:28"><name pos:start="207:21" pos:end="207:23">mod</name> <operator pos:start="207:25" pos:end="207:26">!=</operator> <literal type="number" pos:start="207:28" pos:end="207:28">3</literal></expr>)</condition> <block pos:start="207:31" pos:end="215:17">{<block_content pos:start="209:21" pos:end="213:36">

                    <expr_stmt pos:start="209:21" pos:end="209:69"><expr pos:start="209:21" pos:end="209:68"><call pos:start="209:21" pos:end="209:68"><name pos:start="209:21" pos:end="209:33">gen_lea_modrm</name><argument_list pos:start="209:34" pos:end="209:68">(<argument pos:start="209:35" pos:end="209:35"><expr pos:start="209:35" pos:end="209:35"><name pos:start="209:35" pos:end="209:35">s</name></expr></argument>, <argument pos:start="209:38" pos:end="209:42"><expr pos:start="209:38" pos:end="209:42"><name pos:start="209:38" pos:end="209:42">modrm</name></expr></argument>, <argument pos:start="209:45" pos:end="209:53"><expr pos:start="209:45" pos:end="209:53"><operator pos:start="209:45" pos:end="209:45">&amp;</operator><name pos:start="209:46" pos:end="209:53">reg_addr</name></expr></argument>, <argument pos:start="209:56" pos:end="209:67"><expr pos:start="209:56" pos:end="209:67"><operator pos:start="209:56" pos:end="209:56">&amp;</operator><name pos:start="209:57" pos:end="209:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="211:21" pos:end="211:42"><expr pos:start="211:21" pos:end="211:41"><name pos:start="211:21" pos:end="211:39"><name pos:start="211:21" pos:end="211:35">gen_op_ld_T0_A0</name><index pos:start="211:36" pos:end="211:39">[<expr pos:start="211:37" pos:end="211:38"><name pos:start="211:37" pos:end="211:38">ot</name></expr>]</index></name><operator pos:start="211:40" pos:end="211:40">(</operator><operator pos:start="211:41" pos:end="211:41">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="213:21" pos:end="213:36"><expr pos:start="213:21" pos:end="213:35"><name pos:start="213:21" pos:end="213:25">opreg</name> <operator pos:start="213:27" pos:end="213:27">=</operator> <name pos:start="213:29" pos:end="213:35">OR_TMP0</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="215:19" pos:end="219:17">else <block pos:start="215:24" pos:end="219:17">{<block_content pos:start="217:21" pos:end="217:40">

                    <expr_stmt pos:start="217:21" pos:end="217:40"><expr pos:start="217:21" pos:end="217:39"><name pos:start="217:21" pos:end="217:25">opreg</name> <operator pos:start="217:27" pos:end="217:27">=</operator> <name pos:start="217:29" pos:end="217:34">OR_EAX</name> <operator pos:start="217:36" pos:end="217:36">+</operator> <name pos:start="217:38" pos:end="217:39">rm</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:46"><expr pos:start="221:17" pos:end="221:45"><call pos:start="221:17" pos:end="221:45"><name pos:start="221:17" pos:end="221:22">gen_op</name><argument_list pos:start="221:23" pos:end="221:45">(<argument pos:start="221:24" pos:end="221:24"><expr pos:start="221:24" pos:end="221:24"><name pos:start="221:24" pos:end="221:24">s</name></expr></argument>, <argument pos:start="221:27" pos:end="221:28"><expr pos:start="221:27" pos:end="221:28"><name pos:start="221:27" pos:end="221:28">op</name></expr></argument>, <argument pos:start="221:31" pos:end="221:32"><expr pos:start="221:31" pos:end="221:32"><name pos:start="221:31" pos:end="221:32">ot</name></expr></argument>, <argument pos:start="221:35" pos:end="221:39"><expr pos:start="221:35" pos:end="221:39"><name pos:start="221:35" pos:end="221:39">opreg</name></expr></argument>, <argument pos:start="221:42" pos:end="221:44"><expr pos:start="221:42" pos:end="221:44"><name pos:start="221:42" pos:end="221:44">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="223:17" pos:end="227:17"><if pos:start="223:17" pos:end="227:17">if <condition pos:start="223:20" pos:end="223:40">(<expr pos:start="223:21" pos:end="223:39"><name pos:start="223:21" pos:end="223:23">mod</name> <operator pos:start="223:25" pos:end="223:26">!=</operator> <literal type="number" pos:start="223:28" pos:end="223:28">3</literal> <operator pos:start="223:30" pos:end="223:31">&amp;&amp;</operator> <name pos:start="223:33" pos:end="223:34">op</name> <operator pos:start="223:36" pos:end="223:37">!=</operator> <literal type="number" pos:start="223:39" pos:end="223:39">7</literal></expr>)</condition> <block pos:start="223:42" pos:end="227:17">{<block_content pos:start="225:21" pos:end="225:42">

                    <expr_stmt pos:start="225:21" pos:end="225:42"><expr pos:start="225:21" pos:end="225:41"><name pos:start="225:21" pos:end="225:39"><name pos:start="225:21" pos:end="225:35">gen_op_st_T0_A0</name><index pos:start="225:36" pos:end="225:39">[<expr pos:start="225:37" pos:end="225:38"><name pos:start="225:37" pos:end="225:38">ot</name></expr>]</index></name><operator pos:start="225:40" pos:end="225:40">(</operator><operator pos:start="225:41" pos:end="225:41">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="229:17" pos:end="229:22">break;</break>

            <case pos:start="231:13" pos:end="231:19">case <expr pos:start="231:18" pos:end="231:18"><literal type="number" pos:start="231:18" pos:end="231:18">1</literal></expr>:</case> <comment type="block" pos:start="231:21" pos:end="231:35">/* OP Gv, Ev */</comment>

                <expr_stmt pos:start="233:17" pos:end="233:38"><expr pos:start="233:17" pos:end="233:37"><name pos:start="233:17" pos:end="233:21">modrm</name> <operator pos:start="233:23" pos:end="233:23">=</operator> <call pos:start="233:25" pos:end="233:37"><name pos:start="233:25" pos:end="233:28">ldub</name><argument_list pos:start="233:29" pos:end="233:37">(<argument pos:start="233:30" pos:end="233:36"><expr pos:start="233:30" pos:end="233:36"><name pos:start="233:30" pos:end="233:34"><name pos:start="233:30" pos:end="233:30">s</name><operator pos:start="233:31" pos:end="233:32">-&gt;</operator><name pos:start="233:33" pos:end="233:34">pc</name></name><operator pos:start="233:35" pos:end="233:36">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:39"><expr pos:start="235:17" pos:end="235:38"><name pos:start="235:17" pos:end="235:19">mod</name> <operator pos:start="235:21" pos:end="235:21">=</operator> <operator pos:start="235:23" pos:end="235:23">(</operator><name pos:start="235:24" pos:end="235:28">modrm</name> <operator pos:start="235:30" pos:end="235:31">&gt;&gt;</operator> <literal type="number" pos:start="235:33" pos:end="235:33">6</literal><operator pos:start="235:34" pos:end="235:34">)</operator> <operator pos:start="235:36" pos:end="235:36">&amp;</operator> <literal type="number" pos:start="235:38" pos:end="235:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="237:17" pos:end="237:50"><expr pos:start="237:17" pos:end="237:49"><name pos:start="237:17" pos:end="237:19">reg</name> <operator pos:start="237:21" pos:end="237:21">=</operator> <operator pos:start="237:23" pos:end="237:23">(</operator><operator pos:start="237:24" pos:end="237:24">(</operator><name pos:start="237:25" pos:end="237:29">modrm</name> <operator pos:start="237:31" pos:end="237:32">&gt;&gt;</operator> <literal type="number" pos:start="237:34" pos:end="237:34">3</literal><operator pos:start="237:35" pos:end="237:35">)</operator> <operator pos:start="237:37" pos:end="237:37">&amp;</operator> <literal type="number" pos:start="237:39" pos:end="237:39">7</literal><operator pos:start="237:40" pos:end="237:40">)</operator> <operator pos:start="237:42" pos:end="237:42">+</operator> <name pos:start="237:44" pos:end="237:49">OR_EAX</name></expr>;</expr_stmt>

                <expr_stmt pos:start="239:17" pos:end="239:31"><expr pos:start="239:17" pos:end="239:30"><name pos:start="239:17" pos:end="239:18">rm</name> <operator pos:start="239:20" pos:end="239:20">=</operator> <name pos:start="239:22" pos:end="239:26">modrm</name> <operator pos:start="239:28" pos:end="239:28">&amp;</operator> <literal type="number" pos:start="239:30" pos:end="239:30">7</literal></expr>;</expr_stmt>

                <if_stmt pos:start="241:17" pos:end="253:17"><if pos:start="241:17" pos:end="249:17">if <condition pos:start="241:20" pos:end="241:29">(<expr pos:start="241:21" pos:end="241:28"><name pos:start="241:21" pos:end="241:23">mod</name> <operator pos:start="241:25" pos:end="241:26">!=</operator> <literal type="number" pos:start="241:28" pos:end="241:28">3</literal></expr>)</condition> <block pos:start="241:31" pos:end="249:17">{<block_content pos:start="243:21" pos:end="247:36">

                    <expr_stmt pos:start="243:21" pos:end="243:69"><expr pos:start="243:21" pos:end="243:68"><call pos:start="243:21" pos:end="243:68"><name pos:start="243:21" pos:end="243:33">gen_lea_modrm</name><argument_list pos:start="243:34" pos:end="243:68">(<argument pos:start="243:35" pos:end="243:35"><expr pos:start="243:35" pos:end="243:35"><name pos:start="243:35" pos:end="243:35">s</name></expr></argument>, <argument pos:start="243:38" pos:end="243:42"><expr pos:start="243:38" pos:end="243:42"><name pos:start="243:38" pos:end="243:42">modrm</name></expr></argument>, <argument pos:start="243:45" pos:end="243:53"><expr pos:start="243:45" pos:end="243:53"><operator pos:start="243:45" pos:end="243:45">&amp;</operator><name pos:start="243:46" pos:end="243:53">reg_addr</name></expr></argument>, <argument pos:start="243:56" pos:end="243:67"><expr pos:start="243:56" pos:end="243:67"><operator pos:start="243:56" pos:end="243:56">&amp;</operator><name pos:start="243:57" pos:end="243:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="245:21" pos:end="245:42"><expr pos:start="245:21" pos:end="245:41"><name pos:start="245:21" pos:end="245:39"><name pos:start="245:21" pos:end="245:35">gen_op_ld_T1_A0</name><index pos:start="245:36" pos:end="245:39">[<expr pos:start="245:37" pos:end="245:38"><name pos:start="245:37" pos:end="245:38">ot</name></expr>]</index></name><operator pos:start="245:40" pos:end="245:40">(</operator><operator pos:start="245:41" pos:end="245:41">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="247:21" pos:end="247:36"><expr pos:start="247:21" pos:end="247:35"><name pos:start="247:21" pos:end="247:25">opreg</name> <operator pos:start="247:27" pos:end="247:27">=</operator> <name pos:start="247:29" pos:end="247:35">OR_TMP1</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="249:19" pos:end="253:17">else <block pos:start="249:24" pos:end="253:17">{<block_content pos:start="251:21" pos:end="251:40">

                    <expr_stmt pos:start="251:21" pos:end="251:40"><expr pos:start="251:21" pos:end="251:39"><name pos:start="251:21" pos:end="251:25">opreg</name> <operator pos:start="251:27" pos:end="251:27">=</operator> <name pos:start="251:29" pos:end="251:34">OR_EAX</name> <operator pos:start="251:36" pos:end="251:36">+</operator> <name pos:start="251:38" pos:end="251:39">rm</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:46"><expr pos:start="255:17" pos:end="255:45"><call pos:start="255:17" pos:end="255:45"><name pos:start="255:17" pos:end="255:22">gen_op</name><argument_list pos:start="255:23" pos:end="255:45">(<argument pos:start="255:24" pos:end="255:24"><expr pos:start="255:24" pos:end="255:24"><name pos:start="255:24" pos:end="255:24">s</name></expr></argument>, <argument pos:start="255:27" pos:end="255:28"><expr pos:start="255:27" pos:end="255:28"><name pos:start="255:27" pos:end="255:28">op</name></expr></argument>, <argument pos:start="255:31" pos:end="255:32"><expr pos:start="255:31" pos:end="255:32"><name pos:start="255:31" pos:end="255:32">ot</name></expr></argument>, <argument pos:start="255:35" pos:end="255:37"><expr pos:start="255:35" pos:end="255:37"><name pos:start="255:35" pos:end="255:37">reg</name></expr></argument>, <argument pos:start="255:40" pos:end="255:44"><expr pos:start="255:40" pos:end="255:44"><name pos:start="255:40" pos:end="255:44">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="257:17" pos:end="257:22">break;</break>

            <case pos:start="259:13" pos:end="259:19">case <expr pos:start="259:18" pos:end="259:18"><literal type="number" pos:start="259:18" pos:end="259:18">2</literal></expr>:</case> <comment type="block" pos:start="259:21" pos:end="259:34">/* OP A, Iv */</comment>

                <expr_stmt pos:start="261:17" pos:end="261:38"><expr pos:start="261:17" pos:end="261:37"><name pos:start="261:17" pos:end="261:19">val</name> <operator pos:start="261:21" pos:end="261:21">=</operator> <call pos:start="261:23" pos:end="261:37"><name pos:start="261:23" pos:end="261:30">insn_get</name><argument_list pos:start="261:31" pos:end="261:37">(<argument pos:start="261:32" pos:end="261:32"><expr pos:start="261:32" pos:end="261:32"><name pos:start="261:32" pos:end="261:32">s</name></expr></argument>, <argument pos:start="261:35" pos:end="261:36"><expr pos:start="261:35" pos:end="261:36"><name pos:start="261:35" pos:end="261:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:48"><expr pos:start="263:17" pos:end="263:47"><call pos:start="263:17" pos:end="263:47"><name pos:start="263:17" pos:end="263:23">gen_opi</name><argument_list pos:start="263:24" pos:end="263:47">(<argument pos:start="263:25" pos:end="263:25"><expr pos:start="263:25" pos:end="263:25"><name pos:start="263:25" pos:end="263:25">s</name></expr></argument>, <argument pos:start="263:28" pos:end="263:29"><expr pos:start="263:28" pos:end="263:29"><name pos:start="263:28" pos:end="263:29">op</name></expr></argument>, <argument pos:start="263:32" pos:end="263:33"><expr pos:start="263:32" pos:end="263:33"><name pos:start="263:32" pos:end="263:33">ot</name></expr></argument>, <argument pos:start="263:36" pos:end="263:41"><expr pos:start="263:36" pos:end="263:41"><name pos:start="263:36" pos:end="263:41">OR_EAX</name></expr></argument>, <argument pos:start="263:44" pos:end="263:46"><expr pos:start="263:44" pos:end="263:46"><name pos:start="263:44" pos:end="263:46">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="265:17" pos:end="265:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block>

        <break pos:start="271:9" pos:end="271:14">break;</break>



    <case pos:start="275:5" pos:end="275:14">case <expr pos:start="275:10" pos:end="275:13"><literal type="number" pos:start="275:10" pos:end="275:13">0x80</literal></expr>:</case> <comment type="block" pos:start="275:16" pos:end="275:25">/* GRP1 */</comment>

    <case pos:start="277:5" pos:end="277:14">case <expr pos:start="277:10" pos:end="277:13"><literal type="number" pos:start="277:10" pos:end="277:13">0x81</literal></expr>:</case>

    <case pos:start="279:5" pos:end="279:14">case <expr pos:start="279:10" pos:end="279:13"><literal type="number" pos:start="279:10" pos:end="279:13">0x83</literal></expr>:</case>

        <block pos:start="281:9" pos:end="353:9">{<block_content pos:start="283:13" pos:end="351:13">

            <decl_stmt pos:start="283:13" pos:end="283:20"><decl pos:start="283:13" pos:end="283:19"><type pos:start="283:13" pos:end="283:15"><name pos:start="283:13" pos:end="283:15">int</name></type> <name pos:start="283:17" pos:end="283:19">val</name></decl>;</decl_stmt>



            <if_stmt pos:start="287:13" pos:end="293:47"><if pos:start="287:13" pos:end="289:29">if <condition pos:start="287:16" pos:end="287:29">(<expr pos:start="287:17" pos:end="287:28"><operator pos:start="287:17" pos:end="287:17">(</operator><name pos:start="287:18" pos:end="287:18">b</name> <operator pos:start="287:20" pos:end="287:20">&amp;</operator> <literal type="number" pos:start="287:22" pos:end="287:22">1</literal><operator pos:start="287:23" pos:end="287:23">)</operator> <operator pos:start="287:25" pos:end="287:26">==</operator> <literal type="number" pos:start="287:28" pos:end="287:28">0</literal></expr>)</condition><block type="pseudo" pos:start="289:17" pos:end="289:29"><block_content pos:start="289:17" pos:end="289:29">

                <expr_stmt pos:start="289:17" pos:end="289:29"><expr pos:start="289:17" pos:end="289:28"><name pos:start="289:17" pos:end="289:18">ot</name> <operator pos:start="289:20" pos:end="289:20">=</operator> <name pos:start="289:22" pos:end="289:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="291:13" pos:end="293:47">else<block type="pseudo" pos:start="293:17" pos:end="293:47"><block_content pos:start="293:17" pos:end="293:47">

                <expr_stmt pos:start="293:17" pos:end="293:47"><expr pos:start="293:17" pos:end="293:46"><name pos:start="293:17" pos:end="293:18">ot</name> <operator pos:start="293:20" pos:end="293:20">=</operator> <ternary pos:start="293:22" pos:end="293:46"><condition pos:start="293:22" pos:end="293:28"><expr pos:start="293:22" pos:end="293:26"><name pos:start="293:22" pos:end="293:26">dflag</name></expr> ?</condition><then pos:start="293:30" pos:end="293:36"> <expr pos:start="293:30" pos:end="293:36"><name pos:start="293:30" pos:end="293:36">OT_LONG</name></expr> </then><else pos:start="293:38" pos:end="293:46">: <expr pos:start="293:40" pos:end="293:46"><name pos:start="293:40" pos:end="293:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            

            <expr_stmt pos:start="297:13" pos:end="297:34"><expr pos:start="297:13" pos:end="297:33"><name pos:start="297:13" pos:end="297:17">modrm</name> <operator pos:start="297:19" pos:end="297:19">=</operator> <call pos:start="297:21" pos:end="297:33"><name pos:start="297:21" pos:end="297:24">ldub</name><argument_list pos:start="297:25" pos:end="297:33">(<argument pos:start="297:26" pos:end="297:32"><expr pos:start="297:26" pos:end="297:32"><name pos:start="297:26" pos:end="297:30"><name pos:start="297:26" pos:end="297:26">s</name><operator pos:start="297:27" pos:end="297:28">-&gt;</operator><name pos:start="297:29" pos:end="297:30">pc</name></name><operator pos:start="297:31" pos:end="297:32">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:35"><expr pos:start="299:13" pos:end="299:34"><name pos:start="299:13" pos:end="299:15">mod</name> <operator pos:start="299:17" pos:end="299:17">=</operator> <operator pos:start="299:19" pos:end="299:19">(</operator><name pos:start="299:20" pos:end="299:24">modrm</name> <operator pos:start="299:26" pos:end="299:27">&gt;&gt;</operator> <literal type="number" pos:start="299:29" pos:end="299:29">6</literal><operator pos:start="299:30" pos:end="299:30">)</operator> <operator pos:start="299:32" pos:end="299:32">&amp;</operator> <literal type="number" pos:start="299:34" pos:end="299:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:27"><expr pos:start="301:13" pos:end="301:26"><name pos:start="301:13" pos:end="301:14">rm</name> <operator pos:start="301:16" pos:end="301:16">=</operator> <name pos:start="301:18" pos:end="301:22">modrm</name> <operator pos:start="301:24" pos:end="301:24">&amp;</operator> <literal type="number" pos:start="301:26" pos:end="301:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:34"><expr pos:start="303:13" pos:end="303:33"><name pos:start="303:13" pos:end="303:14">op</name> <operator pos:start="303:16" pos:end="303:16">=</operator> <operator pos:start="303:18" pos:end="303:18">(</operator><name pos:start="303:19" pos:end="303:23">modrm</name> <operator pos:start="303:25" pos:end="303:26">&gt;&gt;</operator> <literal type="number" pos:start="303:28" pos:end="303:28">3</literal><operator pos:start="303:29" pos:end="303:29">)</operator> <operator pos:start="303:31" pos:end="303:31">&amp;</operator> <literal type="number" pos:start="303:33" pos:end="303:33">7</literal></expr>;</expr_stmt>

            

            <if_stmt pos:start="307:13" pos:end="319:13"><if pos:start="307:13" pos:end="315:13">if <condition pos:start="307:16" pos:end="307:25">(<expr pos:start="307:17" pos:end="307:24"><name pos:start="307:17" pos:end="307:19">mod</name> <operator pos:start="307:21" pos:end="307:22">!=</operator> <literal type="number" pos:start="307:24" pos:end="307:24">3</literal></expr>)</condition> <block pos:start="307:27" pos:end="315:13">{<block_content pos:start="309:17" pos:end="313:32">

                <expr_stmt pos:start="309:17" pos:end="309:65"><expr pos:start="309:17" pos:end="309:64"><call pos:start="309:17" pos:end="309:64"><name pos:start="309:17" pos:end="309:29">gen_lea_modrm</name><argument_list pos:start="309:30" pos:end="309:64">(<argument pos:start="309:31" pos:end="309:31"><expr pos:start="309:31" pos:end="309:31"><name pos:start="309:31" pos:end="309:31">s</name></expr></argument>, <argument pos:start="309:34" pos:end="309:38"><expr pos:start="309:34" pos:end="309:38"><name pos:start="309:34" pos:end="309:38">modrm</name></expr></argument>, <argument pos:start="309:41" pos:end="309:49"><expr pos:start="309:41" pos:end="309:49"><operator pos:start="309:41" pos:end="309:41">&amp;</operator><name pos:start="309:42" pos:end="309:49">reg_addr</name></expr></argument>, <argument pos:start="309:52" pos:end="309:63"><expr pos:start="309:52" pos:end="309:63"><operator pos:start="309:52" pos:end="309:52">&amp;</operator><name pos:start="309:53" pos:end="309:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="311:17" pos:end="311:38"><expr pos:start="311:17" pos:end="311:37"><name pos:start="311:17" pos:end="311:35"><name pos:start="311:17" pos:end="311:31">gen_op_ld_T0_A0</name><index pos:start="311:32" pos:end="311:35">[<expr pos:start="311:33" pos:end="311:34"><name pos:start="311:33" pos:end="311:34">ot</name></expr>]</index></name><operator pos:start="311:36" pos:end="311:36">(</operator><operator pos:start="311:37" pos:end="311:37">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="313:17" pos:end="313:32"><expr pos:start="313:17" pos:end="313:31"><name pos:start="313:17" pos:end="313:21">opreg</name> <operator pos:start="313:23" pos:end="313:23">=</operator> <name pos:start="313:25" pos:end="313:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="315:15" pos:end="319:13">else <block pos:start="315:20" pos:end="319:13">{<block_content pos:start="317:17" pos:end="317:36">

                <expr_stmt pos:start="317:17" pos:end="317:36"><expr pos:start="317:17" pos:end="317:35"><name pos:start="317:17" pos:end="317:21">opreg</name> <operator pos:start="317:23" pos:end="317:23">=</operator> <name pos:start="317:25" pos:end="317:26">rm</name> <operator pos:start="317:28" pos:end="317:28">+</operator> <name pos:start="317:30" pos:end="317:35">OR_EAX</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <switch pos:start="323:13" pos:end="341:13">switch<condition pos:start="323:19" pos:end="323:21">(<expr pos:start="323:20" pos:end="323:20"><name pos:start="323:20" pos:end="323:20">b</name></expr>)</condition> <block pos:start="323:23" pos:end="341:13">{<block_content pos:start="325:13" pos:end="339:22">

            <default pos:start="325:13" pos:end="325:20">default:</default>

            <case pos:start="327:13" pos:end="327:22">case <expr pos:start="327:18" pos:end="327:21"><literal type="number" pos:start="327:18" pos:end="327:21">0x80</literal></expr>:</case>

            <case pos:start="329:13" pos:end="329:22">case <expr pos:start="329:18" pos:end="329:21"><literal type="number" pos:start="329:18" pos:end="329:21">0x81</literal></expr>:</case>

                <expr_stmt pos:start="331:17" pos:end="331:38"><expr pos:start="331:17" pos:end="331:37"><name pos:start="331:17" pos:end="331:19">val</name> <operator pos:start="331:21" pos:end="331:21">=</operator> <call pos:start="331:23" pos:end="331:37"><name pos:start="331:23" pos:end="331:30">insn_get</name><argument_list pos:start="331:31" pos:end="331:37">(<argument pos:start="331:32" pos:end="331:32"><expr pos:start="331:32" pos:end="331:32"><name pos:start="331:32" pos:end="331:32">s</name></expr></argument>, <argument pos:start="331:35" pos:end="331:36"><expr pos:start="331:35" pos:end="331:36"><name pos:start="331:35" pos:end="331:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="333:17" pos:end="333:22">break;</break>

            <case pos:start="335:13" pos:end="335:22">case <expr pos:start="335:18" pos:end="335:21"><literal type="number" pos:start="335:18" pos:end="335:21">0x83</literal></expr>:</case>

                <expr_stmt pos:start="337:17" pos:end="337:51"><expr pos:start="337:17" pos:end="337:50"><name pos:start="337:17" pos:end="337:19">val</name> <operator pos:start="337:21" pos:end="337:21">=</operator> <operator pos:start="337:23" pos:end="337:23">(</operator><name pos:start="337:24" pos:end="337:29">int8_t</name><operator pos:start="337:30" pos:end="337:30">)</operator><call pos:start="337:31" pos:end="337:50"><name pos:start="337:31" pos:end="337:38">insn_get</name><argument_list pos:start="337:39" pos:end="337:50">(<argument pos:start="337:40" pos:end="337:40"><expr pos:start="337:40" pos:end="337:40"><name pos:start="337:40" pos:end="337:40">s</name></expr></argument>, <argument pos:start="337:43" pos:end="337:49"><expr pos:start="337:43" pos:end="337:49"><name pos:start="337:43" pos:end="337:49">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="339:17" pos:end="339:22">break;</break>

            </block_content>}</block></switch>



            <expr_stmt pos:start="345:13" pos:end="345:43"><expr pos:start="345:13" pos:end="345:42"><call pos:start="345:13" pos:end="345:42"><name pos:start="345:13" pos:end="345:19">gen_opi</name><argument_list pos:start="345:20" pos:end="345:42">(<argument pos:start="345:21" pos:end="345:21"><expr pos:start="345:21" pos:end="345:21"><name pos:start="345:21" pos:end="345:21">s</name></expr></argument>, <argument pos:start="345:24" pos:end="345:25"><expr pos:start="345:24" pos:end="345:25"><name pos:start="345:24" pos:end="345:25">op</name></expr></argument>, <argument pos:start="345:28" pos:end="345:29"><expr pos:start="345:28" pos:end="345:29"><name pos:start="345:28" pos:end="345:29">ot</name></expr></argument>, <argument pos:start="345:32" pos:end="345:36"><expr pos:start="345:32" pos:end="345:36"><name pos:start="345:32" pos:end="345:36">opreg</name></expr></argument>, <argument pos:start="345:39" pos:end="345:41"><expr pos:start="345:39" pos:end="345:41"><name pos:start="345:39" pos:end="345:41">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="347:13" pos:end="351:13"><if pos:start="347:13" pos:end="351:13">if <condition pos:start="347:16" pos:end="347:36">(<expr pos:start="347:17" pos:end="347:35"><name pos:start="347:17" pos:end="347:18">op</name> <operator pos:start="347:20" pos:end="347:21">!=</operator> <literal type="number" pos:start="347:23" pos:end="347:23">7</literal> <operator pos:start="347:25" pos:end="347:26">&amp;&amp;</operator> <name pos:start="347:28" pos:end="347:30">mod</name> <operator pos:start="347:32" pos:end="347:33">!=</operator> <literal type="number" pos:start="347:35" pos:end="347:35">3</literal></expr>)</condition> <block pos:start="347:38" pos:end="351:13">{<block_content pos:start="349:17" pos:end="349:38">

                <expr_stmt pos:start="349:17" pos:end="349:38"><expr pos:start="349:17" pos:end="349:37"><name pos:start="349:17" pos:end="349:35"><name pos:start="349:17" pos:end="349:31">gen_op_st_T0_A0</name><index pos:start="349:32" pos:end="349:35">[<expr pos:start="349:33" pos:end="349:34"><name pos:start="349:33" pos:end="349:34">ot</name></expr>]</index></name><operator pos:start="349:36" pos:end="349:36">(</operator><operator pos:start="349:37" pos:end="349:37">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="355:9" pos:end="355:14">break;</break>



        <comment type="block" format="doxygen" pos:start="359:9" pos:end="359:36">/**************************/</comment>

        <comment type="block" pos:start="361:9" pos:end="361:44">/* inc, dec, and other misc arith */</comment>

    <case pos:start="363:5" pos:end="363:23">case <expr pos:start="363:10" pos:end="363:22"><literal type="number" pos:start="363:10" pos:end="363:13">0x40</literal> <operator pos:start="363:15" pos:end="363:17">...</operator> <literal type="number" pos:start="363:19" pos:end="363:22">0x47</literal></expr>:</case> <comment type="block" pos:start="363:25" pos:end="363:36">/* inc Gv */</comment>

        <expr_stmt pos:start="365:9" pos:end="365:39"><expr pos:start="365:9" pos:end="365:38"><name pos:start="365:9" pos:end="365:10">ot</name> <operator pos:start="365:12" pos:end="365:12">=</operator> <ternary pos:start="365:14" pos:end="365:38"><condition pos:start="365:14" pos:end="365:20"><expr pos:start="365:14" pos:end="365:18"><name pos:start="365:14" pos:end="365:18">dflag</name></expr> ?</condition><then pos:start="365:22" pos:end="365:28"> <expr pos:start="365:22" pos:end="365:28"><name pos:start="365:22" pos:end="365:28">OT_LONG</name></expr> </then><else pos:start="365:30" pos:end="365:38">: <expr pos:start="365:32" pos:end="365:38"><name pos:start="365:32" pos:end="365:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="367:9" pos:end="367:44"><expr pos:start="367:9" pos:end="367:43"><call pos:start="367:9" pos:end="367:43"><name pos:start="367:9" pos:end="367:15">gen_inc</name><argument_list pos:start="367:16" pos:end="367:43">(<argument pos:start="367:17" pos:end="367:17"><expr pos:start="367:17" pos:end="367:17"><name pos:start="367:17" pos:end="367:17">s</name></expr></argument>, <argument pos:start="367:20" pos:end="367:21"><expr pos:start="367:20" pos:end="367:21"><name pos:start="367:20" pos:end="367:21">ot</name></expr></argument>, <argument pos:start="367:24" pos:end="367:39"><expr pos:start="367:24" pos:end="367:39"><name pos:start="367:24" pos:end="367:29">OR_EAX</name> <operator pos:start="367:31" pos:end="367:31">+</operator> <operator pos:start="367:33" pos:end="367:33">(</operator><name pos:start="367:34" pos:end="367:34">b</name> <operator pos:start="367:36" pos:end="367:36">&amp;</operator> <literal type="number" pos:start="367:38" pos:end="367:38">7</literal><operator pos:start="367:39" pos:end="367:39">)</operator></expr></argument>, <argument pos:start="367:42" pos:end="367:42"><expr pos:start="367:42" pos:end="367:42"><literal type="number" pos:start="367:42" pos:end="367:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="369:9" pos:end="369:14">break;</break>

    <case pos:start="371:5" pos:end="371:23">case <expr pos:start="371:10" pos:end="371:22"><literal type="number" pos:start="371:10" pos:end="371:13">0x48</literal> <operator pos:start="371:15" pos:end="371:17">...</operator> <literal type="number" pos:start="371:19" pos:end="371:22">0x4f</literal></expr>:</case> <comment type="block" pos:start="371:25" pos:end="371:36">/* dec Gv */</comment>

        <expr_stmt pos:start="373:9" pos:end="373:39"><expr pos:start="373:9" pos:end="373:38"><name pos:start="373:9" pos:end="373:10">ot</name> <operator pos:start="373:12" pos:end="373:12">=</operator> <ternary pos:start="373:14" pos:end="373:38"><condition pos:start="373:14" pos:end="373:20"><expr pos:start="373:14" pos:end="373:18"><name pos:start="373:14" pos:end="373:18">dflag</name></expr> ?</condition><then pos:start="373:22" pos:end="373:28"> <expr pos:start="373:22" pos:end="373:28"><name pos:start="373:22" pos:end="373:28">OT_LONG</name></expr> </then><else pos:start="373:30" pos:end="373:38">: <expr pos:start="373:32" pos:end="373:38"><name pos:start="373:32" pos:end="373:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:45"><expr pos:start="375:9" pos:end="375:44"><call pos:start="375:9" pos:end="375:44"><name pos:start="375:9" pos:end="375:15">gen_inc</name><argument_list pos:start="375:16" pos:end="375:44">(<argument pos:start="375:17" pos:end="375:17"><expr pos:start="375:17" pos:end="375:17"><name pos:start="375:17" pos:end="375:17">s</name></expr></argument>, <argument pos:start="375:20" pos:end="375:21"><expr pos:start="375:20" pos:end="375:21"><name pos:start="375:20" pos:end="375:21">ot</name></expr></argument>, <argument pos:start="375:24" pos:end="375:39"><expr pos:start="375:24" pos:end="375:39"><name pos:start="375:24" pos:end="375:29">OR_EAX</name> <operator pos:start="375:31" pos:end="375:31">+</operator> <operator pos:start="375:33" pos:end="375:33">(</operator><name pos:start="375:34" pos:end="375:34">b</name> <operator pos:start="375:36" pos:end="375:36">&amp;</operator> <literal type="number" pos:start="375:38" pos:end="375:38">7</literal><operator pos:start="375:39" pos:end="375:39">)</operator></expr></argument>, <argument pos:start="375:42" pos:end="375:43"><expr pos:start="375:42" pos:end="375:43"><operator pos:start="375:42" pos:end="375:42">-</operator><literal type="number" pos:start="375:43" pos:end="375:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="377:9" pos:end="377:14">break;</break>

    <case pos:start="379:5" pos:end="379:14">case <expr pos:start="379:10" pos:end="379:13"><literal type="number" pos:start="379:10" pos:end="379:13">0xf6</literal></expr>:</case> <comment type="block" pos:start="379:16" pos:end="379:25">/* GRP3 */</comment>

    <case pos:start="381:5" pos:end="381:14">case <expr pos:start="381:10" pos:end="381:13"><literal type="number" pos:start="381:10" pos:end="381:13">0xf7</literal></expr>:</case>

        <if_stmt pos:start="383:9" pos:end="389:43"><if pos:start="383:9" pos:end="385:25">if <condition pos:start="383:12" pos:end="383:25">(<expr pos:start="383:13" pos:end="383:24"><operator pos:start="383:13" pos:end="383:13">(</operator><name pos:start="383:14" pos:end="383:14">b</name> <operator pos:start="383:16" pos:end="383:16">&amp;</operator> <literal type="number" pos:start="383:18" pos:end="383:18">1</literal><operator pos:start="383:19" pos:end="383:19">)</operator> <operator pos:start="383:21" pos:end="383:22">==</operator> <literal type="number" pos:start="383:24" pos:end="383:24">0</literal></expr>)</condition><block type="pseudo" pos:start="385:13" pos:end="385:25"><block_content pos:start="385:13" pos:end="385:25">

            <expr_stmt pos:start="385:13" pos:end="385:25"><expr pos:start="385:13" pos:end="385:24"><name pos:start="385:13" pos:end="385:14">ot</name> <operator pos:start="385:16" pos:end="385:16">=</operator> <name pos:start="385:18" pos:end="385:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="387:9" pos:end="389:43">else<block type="pseudo" pos:start="389:13" pos:end="389:43"><block_content pos:start="389:13" pos:end="389:43">

            <expr_stmt pos:start="389:13" pos:end="389:43"><expr pos:start="389:13" pos:end="389:42"><name pos:start="389:13" pos:end="389:14">ot</name> <operator pos:start="389:16" pos:end="389:16">=</operator> <ternary pos:start="389:18" pos:end="389:42"><condition pos:start="389:18" pos:end="389:24"><expr pos:start="389:18" pos:end="389:22"><name pos:start="389:18" pos:end="389:22">dflag</name></expr> ?</condition><then pos:start="389:26" pos:end="389:32"> <expr pos:start="389:26" pos:end="389:32"><name pos:start="389:26" pos:end="389:32">OT_LONG</name></expr> </then><else pos:start="389:34" pos:end="389:42">: <expr pos:start="389:36" pos:end="389:42"><name pos:start="389:36" pos:end="389:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="393:9" pos:end="393:30"><expr pos:start="393:9" pos:end="393:29"><name pos:start="393:9" pos:end="393:13">modrm</name> <operator pos:start="393:15" pos:end="393:15">=</operator> <call pos:start="393:17" pos:end="393:29"><name pos:start="393:17" pos:end="393:20">ldub</name><argument_list pos:start="393:21" pos:end="393:29">(<argument pos:start="393:22" pos:end="393:28"><expr pos:start="393:22" pos:end="393:28"><name pos:start="393:22" pos:end="393:26"><name pos:start="393:22" pos:end="393:22">s</name><operator pos:start="393:23" pos:end="393:24">-&gt;</operator><name pos:start="393:25" pos:end="393:26">pc</name></name><operator pos:start="393:27" pos:end="393:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="395:9" pos:end="395:31"><expr pos:start="395:9" pos:end="395:30"><name pos:start="395:9" pos:end="395:11">mod</name> <operator pos:start="395:13" pos:end="395:13">=</operator> <operator pos:start="395:15" pos:end="395:15">(</operator><name pos:start="395:16" pos:end="395:20">modrm</name> <operator pos:start="395:22" pos:end="395:23">&gt;&gt;</operator> <literal type="number" pos:start="395:25" pos:end="395:25">6</literal><operator pos:start="395:26" pos:end="395:26">)</operator> <operator pos:start="395:28" pos:end="395:28">&amp;</operator> <literal type="number" pos:start="395:30" pos:end="395:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="397:9" pos:end="397:23"><expr pos:start="397:9" pos:end="397:22"><name pos:start="397:9" pos:end="397:10">rm</name> <operator pos:start="397:12" pos:end="397:12">=</operator> <name pos:start="397:14" pos:end="397:18">modrm</name> <operator pos:start="397:20" pos:end="397:20">&amp;</operator> <literal type="number" pos:start="397:22" pos:end="397:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:30"><expr pos:start="399:9" pos:end="399:29"><name pos:start="399:9" pos:end="399:10">op</name> <operator pos:start="399:12" pos:end="399:12">=</operator> <operator pos:start="399:14" pos:end="399:14">(</operator><name pos:start="399:15" pos:end="399:19">modrm</name> <operator pos:start="399:21" pos:end="399:22">&gt;&gt;</operator> <literal type="number" pos:start="399:24" pos:end="399:24">3</literal><operator pos:start="399:25" pos:end="399:25">)</operator> <operator pos:start="399:27" pos:end="399:27">&amp;</operator> <literal type="number" pos:start="399:29" pos:end="399:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="401:9" pos:end="411:9"><if pos:start="401:9" pos:end="407:9">if <condition pos:start="401:12" pos:end="401:21">(<expr pos:start="401:13" pos:end="401:20"><name pos:start="401:13" pos:end="401:15">mod</name> <operator pos:start="401:17" pos:end="401:18">!=</operator> <literal type="number" pos:start="401:20" pos:end="401:20">3</literal></expr>)</condition> <block pos:start="401:23" pos:end="407:9">{<block_content pos:start="403:13" pos:end="405:34">

            <expr_stmt pos:start="403:13" pos:end="403:61"><expr pos:start="403:13" pos:end="403:60"><call pos:start="403:13" pos:end="403:60"><name pos:start="403:13" pos:end="403:25">gen_lea_modrm</name><argument_list pos:start="403:26" pos:end="403:60">(<argument pos:start="403:27" pos:end="403:27"><expr pos:start="403:27" pos:end="403:27"><name pos:start="403:27" pos:end="403:27">s</name></expr></argument>, <argument pos:start="403:30" pos:end="403:34"><expr pos:start="403:30" pos:end="403:34"><name pos:start="403:30" pos:end="403:34">modrm</name></expr></argument>, <argument pos:start="403:37" pos:end="403:45"><expr pos:start="403:37" pos:end="403:45"><operator pos:start="403:37" pos:end="403:37">&amp;</operator><name pos:start="403:38" pos:end="403:45">reg_addr</name></expr></argument>, <argument pos:start="403:48" pos:end="403:59"><expr pos:start="403:48" pos:end="403:59"><operator pos:start="403:48" pos:end="403:48">&amp;</operator><name pos:start="403:49" pos:end="403:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="405:13" pos:end="405:34"><expr pos:start="405:13" pos:end="405:33"><name pos:start="405:13" pos:end="405:31"><name pos:start="405:13" pos:end="405:27">gen_op_ld_T0_A0</name><index pos:start="405:28" pos:end="405:31">[<expr pos:start="405:29" pos:end="405:30"><name pos:start="405:29" pos:end="405:30">ot</name></expr>]</index></name><operator pos:start="405:32" pos:end="405:32">(</operator><operator pos:start="405:33" pos:end="405:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="407:11" pos:end="411:9">else <block pos:start="407:16" pos:end="411:9">{<block_content pos:start="409:13" pos:end="409:43">

            <expr_stmt pos:start="409:13" pos:end="409:43"><expr pos:start="409:13" pos:end="409:42"><name pos:start="409:13" pos:end="409:40"><name pos:start="409:13" pos:end="409:29">gen_op_mov_TN_reg</name><index pos:start="409:30" pos:end="409:33">[<expr pos:start="409:31" pos:end="409:32"><name pos:start="409:31" pos:end="409:32">ot</name></expr>]</index><index pos:start="409:34" pos:end="409:36">[<expr pos:start="409:35" pos:end="409:35"><literal type="number" pos:start="409:35" pos:end="409:35">0</literal></expr>]</index><index pos:start="409:37" pos:end="409:40">[<expr pos:start="409:38" pos:end="409:39"><name pos:start="409:38" pos:end="409:39">rm</name></expr>]</index></name><operator pos:start="409:41" pos:end="409:41">(</operator><operator pos:start="409:42" pos:end="409:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="415:9" pos:end="583:9">switch<condition pos:start="415:15" pos:end="415:18">(<expr pos:start="415:16" pos:end="415:17"><name pos:start="415:16" pos:end="415:17">op</name></expr>)</condition> <block pos:start="415:20" pos:end="583:9">{<block_content pos:start="417:9" pos:end="581:28">

        <case pos:start="417:9" pos:end="417:15">case <expr pos:start="417:14" pos:end="417:14"><literal type="number" pos:start="417:14" pos:end="417:14">0</literal></expr>:</case> <comment type="block" pos:start="417:17" pos:end="417:26">/* test */</comment>

            <expr_stmt pos:start="419:13" pos:end="419:34"><expr pos:start="419:13" pos:end="419:33"><name pos:start="419:13" pos:end="419:15">val</name> <operator pos:start="419:17" pos:end="419:17">=</operator> <call pos:start="419:19" pos:end="419:33"><name pos:start="419:19" pos:end="419:26">insn_get</name><argument_list pos:start="419:27" pos:end="419:33">(<argument pos:start="419:28" pos:end="419:28"><expr pos:start="419:28" pos:end="419:28"><name pos:start="419:28" pos:end="419:28">s</name></expr></argument>, <argument pos:start="419:31" pos:end="419:32"><expr pos:start="419:31" pos:end="419:32"><name pos:start="419:31" pos:end="419:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="421:13" pos:end="421:35"><expr pos:start="421:13" pos:end="421:34"><call pos:start="421:13" pos:end="421:34"><name pos:start="421:13" pos:end="421:29">gen_op_movl_T1_im</name><argument_list pos:start="421:30" pos:end="421:34">(<argument pos:start="421:31" pos:end="421:33"><expr pos:start="421:31" pos:end="421:33"><name pos:start="421:31" pos:end="421:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="423:13" pos:end="423:36"><expr pos:start="423:13" pos:end="423:35"><call pos:start="423:13" pos:end="423:35"><name pos:start="423:13" pos:end="423:33">gen_op_testl_T0_T1_cc</name><argument_list pos:start="423:34" pos:end="423:35">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="425:13" pos:end="425:41"><expr pos:start="425:13" pos:end="425:40"><name pos:start="425:13" pos:end="425:20"><name pos:start="425:13" pos:end="425:13">s</name><operator pos:start="425:14" pos:end="425:15">-&gt;</operator><name pos:start="425:16" pos:end="425:20">cc_op</name></name> <operator pos:start="425:22" pos:end="425:22">=</operator> <name pos:start="425:24" pos:end="425:35">CC_OP_LOGICB</name> <operator pos:start="425:37" pos:end="425:37">+</operator> <name pos:start="425:39" pos:end="425:40">ot</name></expr>;</expr_stmt>

            <break pos:start="427:13" pos:end="427:18">break;</break>

        <case pos:start="429:9" pos:end="429:15">case <expr pos:start="429:14" pos:end="429:14"><literal type="number" pos:start="429:14" pos:end="429:14">2</literal></expr>:</case> <comment type="block" pos:start="429:17" pos:end="429:25">/* not */</comment>

            <expr_stmt pos:start="431:13" pos:end="431:29"><expr pos:start="431:13" pos:end="431:28"><call pos:start="431:13" pos:end="431:28"><name pos:start="431:13" pos:end="431:26">gen_op_notl_T0</name><argument_list pos:start="431:27" pos:end="431:28">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="433:13" pos:end="441:13"><if pos:start="433:13" pos:end="437:13">if <condition pos:start="433:16" pos:end="433:25">(<expr pos:start="433:17" pos:end="433:24"><name pos:start="433:17" pos:end="433:19">mod</name> <operator pos:start="433:21" pos:end="433:22">!=</operator> <literal type="number" pos:start="433:24" pos:end="433:24">3</literal></expr>)</condition> <block pos:start="433:27" pos:end="437:13">{<block_content pos:start="435:17" pos:end="435:38">

                <expr_stmt pos:start="435:17" pos:end="435:38"><expr pos:start="435:17" pos:end="435:37"><name pos:start="435:17" pos:end="435:35"><name pos:start="435:17" pos:end="435:31">gen_op_st_T0_A0</name><index pos:start="435:32" pos:end="435:35">[<expr pos:start="435:33" pos:end="435:34"><name pos:start="435:33" pos:end="435:34">ot</name></expr>]</index></name><operator pos:start="435:36" pos:end="435:36">(</operator><operator pos:start="435:37" pos:end="435:37">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="437:15" pos:end="441:13">else <block pos:start="437:20" pos:end="441:13">{<block_content pos:start="439:17" pos:end="439:44">

                <expr_stmt pos:start="439:17" pos:end="439:44"><expr pos:start="439:17" pos:end="439:43"><name pos:start="439:17" pos:end="439:41"><name pos:start="439:17" pos:end="439:33">gen_op_mov_reg_T0</name><index pos:start="439:34" pos:end="439:37">[<expr pos:start="439:35" pos:end="439:36"><name pos:start="439:35" pos:end="439:36">ot</name></expr>]</index><index pos:start="439:38" pos:end="439:41">[<expr pos:start="439:39" pos:end="439:40"><name pos:start="439:39" pos:end="439:40">rm</name></expr>]</index></name><operator pos:start="439:42" pos:end="439:42">(</operator><operator pos:start="439:43" pos:end="439:43">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="443:13" pos:end="443:18">break;</break>

        <case pos:start="445:9" pos:end="445:15">case <expr pos:start="445:14" pos:end="445:14"><literal type="number" pos:start="445:14" pos:end="445:14">3</literal></expr>:</case> <comment type="block" pos:start="445:17" pos:end="445:25">/* neg */</comment>

            <expr_stmt pos:start="447:13" pos:end="447:32"><expr pos:start="447:13" pos:end="447:31"><call pos:start="447:13" pos:end="447:31"><name pos:start="447:13" pos:end="447:29">gen_op_negl_T0_cc</name><argument_list pos:start="447:30" pos:end="447:31">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="449:13" pos:end="457:13"><if pos:start="449:13" pos:end="453:13">if <condition pos:start="449:16" pos:end="449:25">(<expr pos:start="449:17" pos:end="449:24"><name pos:start="449:17" pos:end="449:19">mod</name> <operator pos:start="449:21" pos:end="449:22">!=</operator> <literal type="number" pos:start="449:24" pos:end="449:24">3</literal></expr>)</condition> <block pos:start="449:27" pos:end="453:13">{<block_content pos:start="451:17" pos:end="451:38">

                <expr_stmt pos:start="451:17" pos:end="451:38"><expr pos:start="451:17" pos:end="451:37"><name pos:start="451:17" pos:end="451:35"><name pos:start="451:17" pos:end="451:31">gen_op_st_T0_A0</name><index pos:start="451:32" pos:end="451:35">[<expr pos:start="451:33" pos:end="451:34"><name pos:start="451:33" pos:end="451:34">ot</name></expr>]</index></name><operator pos:start="451:36" pos:end="451:36">(</operator><operator pos:start="451:37" pos:end="451:37">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="453:15" pos:end="457:13">else <block pos:start="453:20" pos:end="457:13">{<block_content pos:start="455:17" pos:end="455:44">

                <expr_stmt pos:start="455:17" pos:end="455:44"><expr pos:start="455:17" pos:end="455:43"><name pos:start="455:17" pos:end="455:41"><name pos:start="455:17" pos:end="455:33">gen_op_mov_reg_T0</name><index pos:start="455:34" pos:end="455:37">[<expr pos:start="455:35" pos:end="455:36"><name pos:start="455:35" pos:end="455:36">ot</name></expr>]</index><index pos:start="455:38" pos:end="455:41">[<expr pos:start="455:39" pos:end="455:40"><name pos:start="455:39" pos:end="455:40">rm</name></expr>]</index></name><operator pos:start="455:42" pos:end="455:42">(</operator><operator pos:start="455:43" pos:end="455:43">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="459:13" pos:end="459:39"><expr pos:start="459:13" pos:end="459:38"><name pos:start="459:13" pos:end="459:20"><name pos:start="459:13" pos:end="459:13">s</name><operator pos:start="459:14" pos:end="459:15">-&gt;</operator><name pos:start="459:16" pos:end="459:20">cc_op</name></name> <operator pos:start="459:22" pos:end="459:22">=</operator> <name pos:start="459:24" pos:end="459:33">CC_OP_SUBB</name> <operator pos:start="459:35" pos:end="459:35">+</operator> <name pos:start="459:37" pos:end="459:38">ot</name></expr>;</expr_stmt>

            <break pos:start="461:13" pos:end="461:18">break;</break>

        <case pos:start="463:9" pos:end="463:15">case <expr pos:start="463:14" pos:end="463:14"><literal type="number" pos:start="463:14" pos:end="463:14">4</literal></expr>:</case> <comment type="block" pos:start="463:17" pos:end="463:25">/* mul */</comment>

            <switch pos:start="465:13" pos:end="487:13">switch<condition pos:start="465:19" pos:end="465:22">(<expr pos:start="465:20" pos:end="465:21"><name pos:start="465:20" pos:end="465:21">ot</name></expr>)</condition> <block pos:start="465:24" pos:end="487:13">{<block_content pos:start="467:13" pos:end="485:22">

            <case pos:start="467:13" pos:end="467:25">case <expr pos:start="467:18" pos:end="467:24"><name pos:start="467:18" pos:end="467:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="469:17" pos:end="469:36"><expr pos:start="469:17" pos:end="469:35"><call pos:start="469:17" pos:end="469:35"><name pos:start="469:17" pos:end="469:33">gen_op_mulb_AL_T0</name><argument_list pos:start="469:34" pos:end="469:35">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="471:17" pos:end="471:22">break;</break>

            <case pos:start="473:13" pos:end="473:25">case <expr pos:start="473:18" pos:end="473:24"><name pos:start="473:18" pos:end="473:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="475:17" pos:end="475:36"><expr pos:start="475:17" pos:end="475:35"><call pos:start="475:17" pos:end="475:35"><name pos:start="475:17" pos:end="475:33">gen_op_mulw_AX_T0</name><argument_list pos:start="475:34" pos:end="475:35">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="477:17" pos:end="477:22">break;</break>

            <default pos:start="479:13" pos:end="479:20">default:</default>

            <case pos:start="481:13" pos:end="481:25">case <expr pos:start="481:18" pos:end="481:24"><name pos:start="481:18" pos:end="481:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="483:17" pos:end="483:37"><expr pos:start="483:17" pos:end="483:36"><call pos:start="483:17" pos:end="483:36"><name pos:start="483:17" pos:end="483:34">gen_op_mull_EAX_T0</name><argument_list pos:start="483:35" pos:end="483:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="485:17" pos:end="485:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="489:13" pos:end="489:33"><expr pos:start="489:13" pos:end="489:32"><name pos:start="489:13" pos:end="489:20"><name pos:start="489:13" pos:end="489:13">s</name><operator pos:start="489:14" pos:end="489:15">-&gt;</operator><name pos:start="489:16" pos:end="489:20">cc_op</name></name> <operator pos:start="489:22" pos:end="489:22">=</operator> <name pos:start="489:24" pos:end="489:32">CC_OP_MUL</name></expr>;</expr_stmt>

            <break pos:start="491:13" pos:end="491:18">break;</break>

        <case pos:start="493:9" pos:end="493:15">case <expr pos:start="493:14" pos:end="493:14"><literal type="number" pos:start="493:14" pos:end="493:14">5</literal></expr>:</case> <comment type="block" pos:start="493:17" pos:end="493:26">/* imul */</comment>

            <switch pos:start="495:13" pos:end="517:13">switch<condition pos:start="495:19" pos:end="495:22">(<expr pos:start="495:20" pos:end="495:21"><name pos:start="495:20" pos:end="495:21">ot</name></expr>)</condition> <block pos:start="495:24" pos:end="517:13">{<block_content pos:start="497:13" pos:end="515:22">

            <case pos:start="497:13" pos:end="497:25">case <expr pos:start="497:18" pos:end="497:24"><name pos:start="497:18" pos:end="497:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="499:17" pos:end="499:37"><expr pos:start="499:17" pos:end="499:36"><call pos:start="499:17" pos:end="499:36"><name pos:start="499:17" pos:end="499:34">gen_op_imulb_AL_T0</name><argument_list pos:start="499:35" pos:end="499:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="501:17" pos:end="501:22">break;</break>

            <case pos:start="503:13" pos:end="503:25">case <expr pos:start="503:18" pos:end="503:24"><name pos:start="503:18" pos:end="503:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="505:17" pos:end="505:37"><expr pos:start="505:17" pos:end="505:36"><call pos:start="505:17" pos:end="505:36"><name pos:start="505:17" pos:end="505:34">gen_op_imulw_AX_T0</name><argument_list pos:start="505:35" pos:end="505:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="507:17" pos:end="507:22">break;</break>

            <default pos:start="509:13" pos:end="509:20">default:</default>

            <case pos:start="511:13" pos:end="511:25">case <expr pos:start="511:18" pos:end="511:24"><name pos:start="511:18" pos:end="511:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="513:17" pos:end="513:38"><expr pos:start="513:17" pos:end="513:37"><call pos:start="513:17" pos:end="513:37"><name pos:start="513:17" pos:end="513:35">gen_op_imull_EAX_T0</name><argument_list pos:start="513:36" pos:end="513:37">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="515:17" pos:end="515:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="519:13" pos:end="519:33"><expr pos:start="519:13" pos:end="519:32"><name pos:start="519:13" pos:end="519:20"><name pos:start="519:13" pos:end="519:13">s</name><operator pos:start="519:14" pos:end="519:15">-&gt;</operator><name pos:start="519:16" pos:end="519:20">cc_op</name></name> <operator pos:start="519:22" pos:end="519:22">=</operator> <name pos:start="519:24" pos:end="519:32">CC_OP_MUL</name></expr>;</expr_stmt>

            <break pos:start="521:13" pos:end="521:18">break;</break>

        <case pos:start="523:9" pos:end="523:15">case <expr pos:start="523:14" pos:end="523:14"><literal type="number" pos:start="523:14" pos:end="523:14">6</literal></expr>:</case> <comment type="block" pos:start="523:17" pos:end="523:25">/* div */</comment>

            <switch pos:start="525:13" pos:end="547:13">switch<condition pos:start="525:19" pos:end="525:22">(<expr pos:start="525:20" pos:end="525:21"><name pos:start="525:20" pos:end="525:21">ot</name></expr>)</condition> <block pos:start="525:24" pos:end="547:13">{<block_content pos:start="527:13" pos:end="545:22">

            <case pos:start="527:13" pos:end="527:25">case <expr pos:start="527:18" pos:end="527:24"><name pos:start="527:18" pos:end="527:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="529:17" pos:end="529:36"><expr pos:start="529:17" pos:end="529:35"><call pos:start="529:17" pos:end="529:35"><name pos:start="529:17" pos:end="529:33">gen_op_divb_AL_T0</name><argument_list pos:start="529:34" pos:end="529:35">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="531:17" pos:end="531:22">break;</break>

            <case pos:start="533:13" pos:end="533:25">case <expr pos:start="533:18" pos:end="533:24"><name pos:start="533:18" pos:end="533:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="535:17" pos:end="535:36"><expr pos:start="535:17" pos:end="535:35"><call pos:start="535:17" pos:end="535:35"><name pos:start="535:17" pos:end="535:33">gen_op_divw_AX_T0</name><argument_list pos:start="535:34" pos:end="535:35">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="537:17" pos:end="537:22">break;</break>

            <default pos:start="539:13" pos:end="539:20">default:</default>

            <case pos:start="541:13" pos:end="541:25">case <expr pos:start="541:18" pos:end="541:24"><name pos:start="541:18" pos:end="541:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="543:17" pos:end="543:37"><expr pos:start="543:17" pos:end="543:36"><call pos:start="543:17" pos:end="543:36"><name pos:start="543:17" pos:end="543:34">gen_op_divl_EAX_T0</name><argument_list pos:start="543:35" pos:end="543:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="545:17" pos:end="545:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="549:13" pos:end="549:18">break;</break>

        <case pos:start="551:9" pos:end="551:15">case <expr pos:start="551:14" pos:end="551:14"><literal type="number" pos:start="551:14" pos:end="551:14">7</literal></expr>:</case> <comment type="block" pos:start="551:17" pos:end="551:26">/* idiv */</comment>

            <switch pos:start="553:13" pos:end="575:13">switch<condition pos:start="553:19" pos:end="553:22">(<expr pos:start="553:20" pos:end="553:21"><name pos:start="553:20" pos:end="553:21">ot</name></expr>)</condition> <block pos:start="553:24" pos:end="575:13">{<block_content pos:start="555:13" pos:end="573:22">

            <case pos:start="555:13" pos:end="555:25">case <expr pos:start="555:18" pos:end="555:24"><name pos:start="555:18" pos:end="555:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="557:17" pos:end="557:37"><expr pos:start="557:17" pos:end="557:36"><call pos:start="557:17" pos:end="557:36"><name pos:start="557:17" pos:end="557:34">gen_op_idivb_AL_T0</name><argument_list pos:start="557:35" pos:end="557:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="559:17" pos:end="559:22">break;</break>

            <case pos:start="561:13" pos:end="561:25">case <expr pos:start="561:18" pos:end="561:24"><name pos:start="561:18" pos:end="561:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="563:17" pos:end="563:37"><expr pos:start="563:17" pos:end="563:36"><call pos:start="563:17" pos:end="563:36"><name pos:start="563:17" pos:end="563:34">gen_op_idivw_AX_T0</name><argument_list pos:start="563:35" pos:end="563:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="565:17" pos:end="565:22">break;</break>

            <default pos:start="567:13" pos:end="567:20">default:</default>

            <case pos:start="569:13" pos:end="569:25">case <expr pos:start="569:18" pos:end="569:24"><name pos:start="569:18" pos:end="569:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="571:17" pos:end="571:38"><expr pos:start="571:17" pos:end="571:37"><call pos:start="571:17" pos:end="571:37"><name pos:start="571:17" pos:end="571:35">gen_op_idivl_EAX_T0</name><argument_list pos:start="571:36" pos:end="571:37">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="573:17" pos:end="573:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="577:13" pos:end="577:18">break;</break>

        <default pos:start="579:9" pos:end="579:16">default:</default>

            <goto pos:start="581:13" pos:end="581:28">goto <name pos:start="581:18" pos:end="581:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="585:9" pos:end="585:14">break;</break>



    <case pos:start="589:5" pos:end="589:14">case <expr pos:start="589:10" pos:end="589:13"><literal type="number" pos:start="589:10" pos:end="589:13">0xfe</literal></expr>:</case> <comment type="block" pos:start="589:16" pos:end="589:25">/* GRP4 */</comment>

    <case pos:start="591:5" pos:end="591:14">case <expr pos:start="591:10" pos:end="591:13"><literal type="number" pos:start="591:10" pos:end="591:13">0xff</literal></expr>:</case> <comment type="block" pos:start="591:16" pos:end="591:25">/* GRP5 */</comment>

        <if_stmt pos:start="593:9" pos:end="599:43"><if pos:start="593:9" pos:end="595:25">if <condition pos:start="593:12" pos:end="593:25">(<expr pos:start="593:13" pos:end="593:24"><operator pos:start="593:13" pos:end="593:13">(</operator><name pos:start="593:14" pos:end="593:14">b</name> <operator pos:start="593:16" pos:end="593:16">&amp;</operator> <literal type="number" pos:start="593:18" pos:end="593:18">1</literal><operator pos:start="593:19" pos:end="593:19">)</operator> <operator pos:start="593:21" pos:end="593:22">==</operator> <literal type="number" pos:start="593:24" pos:end="593:24">0</literal></expr>)</condition><block type="pseudo" pos:start="595:13" pos:end="595:25"><block_content pos:start="595:13" pos:end="595:25">

            <expr_stmt pos:start="595:13" pos:end="595:25"><expr pos:start="595:13" pos:end="595:24"><name pos:start="595:13" pos:end="595:14">ot</name> <operator pos:start="595:16" pos:end="595:16">=</operator> <name pos:start="595:18" pos:end="595:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="597:9" pos:end="599:43">else<block type="pseudo" pos:start="599:13" pos:end="599:43"><block_content pos:start="599:13" pos:end="599:43">

            <expr_stmt pos:start="599:13" pos:end="599:43"><expr pos:start="599:13" pos:end="599:42"><name pos:start="599:13" pos:end="599:14">ot</name> <operator pos:start="599:16" pos:end="599:16">=</operator> <ternary pos:start="599:18" pos:end="599:42"><condition pos:start="599:18" pos:end="599:24"><expr pos:start="599:18" pos:end="599:22"><name pos:start="599:18" pos:end="599:22">dflag</name></expr> ?</condition><then pos:start="599:26" pos:end="599:32"> <expr pos:start="599:26" pos:end="599:32"><name pos:start="599:26" pos:end="599:32">OT_LONG</name></expr> </then><else pos:start="599:34" pos:end="599:42">: <expr pos:start="599:36" pos:end="599:42"><name pos:start="599:36" pos:end="599:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="603:9" pos:end="603:30"><expr pos:start="603:9" pos:end="603:29"><name pos:start="603:9" pos:end="603:13">modrm</name> <operator pos:start="603:15" pos:end="603:15">=</operator> <call pos:start="603:17" pos:end="603:29"><name pos:start="603:17" pos:end="603:20">ldub</name><argument_list pos:start="603:21" pos:end="603:29">(<argument pos:start="603:22" pos:end="603:28"><expr pos:start="603:22" pos:end="603:28"><name pos:start="603:22" pos:end="603:26"><name pos:start="603:22" pos:end="603:22">s</name><operator pos:start="603:23" pos:end="603:24">-&gt;</operator><name pos:start="603:25" pos:end="603:26">pc</name></name><operator pos:start="603:27" pos:end="603:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="605:9" pos:end="605:31"><expr pos:start="605:9" pos:end="605:30"><name pos:start="605:9" pos:end="605:11">mod</name> <operator pos:start="605:13" pos:end="605:13">=</operator> <operator pos:start="605:15" pos:end="605:15">(</operator><name pos:start="605:16" pos:end="605:20">modrm</name> <operator pos:start="605:22" pos:end="605:23">&gt;&gt;</operator> <literal type="number" pos:start="605:25" pos:end="605:25">6</literal><operator pos:start="605:26" pos:end="605:26">)</operator> <operator pos:start="605:28" pos:end="605:28">&amp;</operator> <literal type="number" pos:start="605:30" pos:end="605:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="607:9" pos:end="607:23"><expr pos:start="607:9" pos:end="607:22"><name pos:start="607:9" pos:end="607:10">rm</name> <operator pos:start="607:12" pos:end="607:12">=</operator> <name pos:start="607:14" pos:end="607:18">modrm</name> <operator pos:start="607:20" pos:end="607:20">&amp;</operator> <literal type="number" pos:start="607:22" pos:end="607:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="609:9" pos:end="609:30"><expr pos:start="609:9" pos:end="609:29"><name pos:start="609:9" pos:end="609:10">op</name> <operator pos:start="609:12" pos:end="609:12">=</operator> <operator pos:start="609:14" pos:end="609:14">(</operator><name pos:start="609:15" pos:end="609:19">modrm</name> <operator pos:start="609:21" pos:end="609:22">&gt;&gt;</operator> <literal type="number" pos:start="609:24" pos:end="609:24">3</literal><operator pos:start="609:25" pos:end="609:25">)</operator> <operator pos:start="609:27" pos:end="609:27">&amp;</operator> <literal type="number" pos:start="609:29" pos:end="609:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="611:9" pos:end="615:9"><if pos:start="611:9" pos:end="615:9">if <condition pos:start="611:12" pos:end="611:33">(<expr pos:start="611:13" pos:end="611:32"><name pos:start="611:13" pos:end="611:14">op</name> <operator pos:start="611:16" pos:end="611:17">&gt;=</operator> <literal type="number" pos:start="611:19" pos:end="611:19">2</literal> <operator pos:start="611:21" pos:end="611:22">&amp;&amp;</operator> <name pos:start="611:24" pos:end="611:24">b</name> <operator pos:start="611:26" pos:end="611:27">==</operator> <literal type="number" pos:start="611:29" pos:end="611:32">0xfe</literal></expr>)</condition> <block pos:start="611:35" pos:end="615:9">{<block_content pos:start="613:13" pos:end="613:28">

            <goto pos:start="613:13" pos:end="613:28">goto <name pos:start="613:18" pos:end="613:27">illegal_op</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="617:9" pos:end="629:9"><if pos:start="617:9" pos:end="625:9">if <condition pos:start="617:12" pos:end="617:21">(<expr pos:start="617:13" pos:end="617:20"><name pos:start="617:13" pos:end="617:15">mod</name> <operator pos:start="617:17" pos:end="617:18">!=</operator> <literal type="number" pos:start="617:20" pos:end="617:20">3</literal></expr>)</condition> <block pos:start="617:23" pos:end="625:9">{<block_content pos:start="619:13" pos:end="623:38">

            <expr_stmt pos:start="619:13" pos:end="619:61"><expr pos:start="619:13" pos:end="619:60"><call pos:start="619:13" pos:end="619:60"><name pos:start="619:13" pos:end="619:25">gen_lea_modrm</name><argument_list pos:start="619:26" pos:end="619:60">(<argument pos:start="619:27" pos:end="619:27"><expr pos:start="619:27" pos:end="619:27"><name pos:start="619:27" pos:end="619:27">s</name></expr></argument>, <argument pos:start="619:30" pos:end="619:34"><expr pos:start="619:30" pos:end="619:34"><name pos:start="619:30" pos:end="619:34">modrm</name></expr></argument>, <argument pos:start="619:37" pos:end="619:45"><expr pos:start="619:37" pos:end="619:45"><operator pos:start="619:37" pos:end="619:37">&amp;</operator><name pos:start="619:38" pos:end="619:45">reg_addr</name></expr></argument>, <argument pos:start="619:48" pos:end="619:59"><expr pos:start="619:48" pos:end="619:59"><operator pos:start="619:48" pos:end="619:48">&amp;</operator><name pos:start="619:49" pos:end="619:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="621:13" pos:end="623:38"><if pos:start="621:13" pos:end="623:38">if <condition pos:start="621:16" pos:end="621:35">(<expr pos:start="621:17" pos:end="621:34"><name pos:start="621:17" pos:end="621:18">op</name> <operator pos:start="621:20" pos:end="621:21">!=</operator> <literal type="number" pos:start="621:23" pos:end="621:23">3</literal> <operator pos:start="621:25" pos:end="621:26">&amp;&amp;</operator> <name pos:start="621:28" pos:end="621:29">op</name> <operator pos:start="621:31" pos:end="621:32">!=</operator> <literal type="number" pos:start="621:34" pos:end="621:34">5</literal></expr>)</condition><block type="pseudo" pos:start="623:17" pos:end="623:38"><block_content pos:start="623:17" pos:end="623:38">

                <expr_stmt pos:start="623:17" pos:end="623:38"><expr pos:start="623:17" pos:end="623:37"><name pos:start="623:17" pos:end="623:35"><name pos:start="623:17" pos:end="623:31">gen_op_ld_T0_A0</name><index pos:start="623:32" pos:end="623:35">[<expr pos:start="623:33" pos:end="623:34"><name pos:start="623:33" pos:end="623:34">ot</name></expr>]</index></name><operator pos:start="623:36" pos:end="623:36">(</operator><operator pos:start="623:37" pos:end="623:37">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="625:11" pos:end="629:9">else <block pos:start="625:16" pos:end="629:9">{<block_content pos:start="627:13" pos:end="627:43">

            <expr_stmt pos:start="627:13" pos:end="627:43"><expr pos:start="627:13" pos:end="627:42"><name pos:start="627:13" pos:end="627:40"><name pos:start="627:13" pos:end="627:29">gen_op_mov_TN_reg</name><index pos:start="627:30" pos:end="627:33">[<expr pos:start="627:31" pos:end="627:32"><name pos:start="627:31" pos:end="627:32">ot</name></expr>]</index><index pos:start="627:34" pos:end="627:36">[<expr pos:start="627:35" pos:end="627:35"><literal type="number" pos:start="627:35" pos:end="627:35">0</literal></expr>]</index><index pos:start="627:37" pos:end="627:40">[<expr pos:start="627:38" pos:end="627:39"><name pos:start="627:38" pos:end="627:39">rm</name></expr>]</index></name><operator pos:start="627:41" pos:end="627:41">(</operator><operator pos:start="627:42" pos:end="627:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="633:9" pos:end="755:9">switch<condition pos:start="633:15" pos:end="633:18">(<expr pos:start="633:16" pos:end="633:17"><name pos:start="633:16" pos:end="633:17">op</name></expr>)</condition> <block pos:start="633:20" pos:end="755:9">{<block_content pos:start="635:9" pos:end="753:28">

        <case pos:start="635:9" pos:end="635:15">case <expr pos:start="635:14" pos:end="635:14"><literal type="number" pos:start="635:14" pos:end="635:14">0</literal></expr>:</case> <comment type="block" pos:start="635:17" pos:end="635:28">/* inc Ev */</comment>

            <expr_stmt pos:start="637:13" pos:end="637:39"><expr pos:start="637:13" pos:end="637:38"><call pos:start="637:13" pos:end="637:38"><name pos:start="637:13" pos:end="637:19">gen_inc</name><argument_list pos:start="637:20" pos:end="637:38">(<argument pos:start="637:21" pos:end="637:21"><expr pos:start="637:21" pos:end="637:21"><name pos:start="637:21" pos:end="637:21">s</name></expr></argument>, <argument pos:start="637:24" pos:end="637:25"><expr pos:start="637:24" pos:end="637:25"><name pos:start="637:24" pos:end="637:25">ot</name></expr></argument>, <argument pos:start="637:28" pos:end="637:34"><expr pos:start="637:28" pos:end="637:34"><name pos:start="637:28" pos:end="637:34">OR_TMP0</name></expr></argument>, <argument pos:start="637:37" pos:end="637:37"><expr pos:start="637:37" pos:end="637:37"><literal type="number" pos:start="637:37" pos:end="637:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="639:13" pos:end="645:44"><if pos:start="639:13" pos:end="641:38">if <condition pos:start="639:16" pos:end="639:25">(<expr pos:start="639:17" pos:end="639:24"><name pos:start="639:17" pos:end="639:19">mod</name> <operator pos:start="639:21" pos:end="639:22">!=</operator> <literal type="number" pos:start="639:24" pos:end="639:24">3</literal></expr>)</condition><block type="pseudo" pos:start="641:17" pos:end="641:38"><block_content pos:start="641:17" pos:end="641:38">

                <expr_stmt pos:start="641:17" pos:end="641:38"><expr pos:start="641:17" pos:end="641:37"><name pos:start="641:17" pos:end="641:35"><name pos:start="641:17" pos:end="641:31">gen_op_st_T0_A0</name><index pos:start="641:32" pos:end="641:35">[<expr pos:start="641:33" pos:end="641:34"><name pos:start="641:33" pos:end="641:34">ot</name></expr>]</index></name><operator pos:start="641:36" pos:end="641:36">(</operator><operator pos:start="641:37" pos:end="641:37">)</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="643:13" pos:end="645:44">else<block type="pseudo" pos:start="645:17" pos:end="645:44"><block_content pos:start="645:17" pos:end="645:44">

                <expr_stmt pos:start="645:17" pos:end="645:44"><expr pos:start="645:17" pos:end="645:43"><name pos:start="645:17" pos:end="645:41"><name pos:start="645:17" pos:end="645:33">gen_op_mov_reg_T0</name><index pos:start="645:34" pos:end="645:37">[<expr pos:start="645:35" pos:end="645:36"><name pos:start="645:35" pos:end="645:36">ot</name></expr>]</index><index pos:start="645:38" pos:end="645:41">[<expr pos:start="645:39" pos:end="645:40"><name pos:start="645:39" pos:end="645:40">rm</name></expr>]</index></name><operator pos:start="645:42" pos:end="645:42">(</operator><operator pos:start="645:43" pos:end="645:43">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="647:13" pos:end="647:18">break;</break>

        <case pos:start="649:9" pos:end="649:15">case <expr pos:start="649:14" pos:end="649:14"><literal type="number" pos:start="649:14" pos:end="649:14">1</literal></expr>:</case> <comment type="block" pos:start="649:17" pos:end="649:28">/* dec Ev */</comment>

            <expr_stmt pos:start="651:13" pos:end="651:40"><expr pos:start="651:13" pos:end="651:39"><call pos:start="651:13" pos:end="651:39"><name pos:start="651:13" pos:end="651:19">gen_inc</name><argument_list pos:start="651:20" pos:end="651:39">(<argument pos:start="651:21" pos:end="651:21"><expr pos:start="651:21" pos:end="651:21"><name pos:start="651:21" pos:end="651:21">s</name></expr></argument>, <argument pos:start="651:24" pos:end="651:25"><expr pos:start="651:24" pos:end="651:25"><name pos:start="651:24" pos:end="651:25">ot</name></expr></argument>, <argument pos:start="651:28" pos:end="651:34"><expr pos:start="651:28" pos:end="651:34"><name pos:start="651:28" pos:end="651:34">OR_TMP0</name></expr></argument>, <argument pos:start="651:37" pos:end="651:38"><expr pos:start="651:37" pos:end="651:38"><operator pos:start="651:37" pos:end="651:37">-</operator><literal type="number" pos:start="651:38" pos:end="651:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="653:13" pos:end="659:44"><if pos:start="653:13" pos:end="655:38">if <condition pos:start="653:16" pos:end="653:25">(<expr pos:start="653:17" pos:end="653:24"><name pos:start="653:17" pos:end="653:19">mod</name> <operator pos:start="653:21" pos:end="653:22">!=</operator> <literal type="number" pos:start="653:24" pos:end="653:24">3</literal></expr>)</condition><block type="pseudo" pos:start="655:17" pos:end="655:38"><block_content pos:start="655:17" pos:end="655:38">

                <expr_stmt pos:start="655:17" pos:end="655:38"><expr pos:start="655:17" pos:end="655:37"><name pos:start="655:17" pos:end="655:35"><name pos:start="655:17" pos:end="655:31">gen_op_st_T0_A0</name><index pos:start="655:32" pos:end="655:35">[<expr pos:start="655:33" pos:end="655:34"><name pos:start="655:33" pos:end="655:34">ot</name></expr>]</index></name><operator pos:start="655:36" pos:end="655:36">(</operator><operator pos:start="655:37" pos:end="655:37">)</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="657:13" pos:end="659:44">else<block type="pseudo" pos:start="659:17" pos:end="659:44"><block_content pos:start="659:17" pos:end="659:44">

                <expr_stmt pos:start="659:17" pos:end="659:44"><expr pos:start="659:17" pos:end="659:43"><name pos:start="659:17" pos:end="659:41"><name pos:start="659:17" pos:end="659:33">gen_op_mov_reg_T0</name><index pos:start="659:34" pos:end="659:37">[<expr pos:start="659:35" pos:end="659:36"><name pos:start="659:35" pos:end="659:36">ot</name></expr>]</index><index pos:start="659:38" pos:end="659:41">[<expr pos:start="659:39" pos:end="659:40"><name pos:start="659:39" pos:end="659:40">rm</name></expr>]</index></name><operator pos:start="659:42" pos:end="659:42">(</operator><operator pos:start="659:43" pos:end="659:43">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="661:13" pos:end="661:18">break;</break>

        <case pos:start="663:9" pos:end="663:15">case <expr pos:start="663:14" pos:end="663:14"><literal type="number" pos:start="663:14" pos:end="663:14">2</literal></expr>:</case> <comment type="block" pos:start="663:17" pos:end="663:29">/* call Ev */</comment>

            <comment type="block" pos:start="665:13" pos:end="665:63">/* XXX: optimize if memory (no and is necessary) */</comment>

            <if_stmt pos:start="667:13" pos:end="669:38"><if pos:start="667:13" pos:end="669:38">if <condition pos:start="667:16" pos:end="667:30">(<expr pos:start="667:17" pos:end="667:29"><name pos:start="667:17" pos:end="667:24"><name pos:start="667:17" pos:end="667:17">s</name><operator pos:start="667:18" pos:end="667:19">-&gt;</operator><name pos:start="667:20" pos:end="667:24">dflag</name></name> <operator pos:start="667:26" pos:end="667:27">==</operator> <literal type="number" pos:start="667:29" pos:end="667:29">0</literal></expr>)</condition><block type="pseudo" pos:start="669:17" pos:end="669:38"><block_content pos:start="669:17" pos:end="669:38">

                <expr_stmt pos:start="669:17" pos:end="669:38"><expr pos:start="669:17" pos:end="669:37"><call pos:start="669:17" pos:end="669:37"><name pos:start="669:17" pos:end="669:35">gen_op_andl_T0_ffff</name><argument_list pos:start="669:36" pos:end="669:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="671:13" pos:end="671:28"><expr pos:start="671:13" pos:end="671:27"><call pos:start="671:13" pos:end="671:27"><name pos:start="671:13" pos:end="671:25">gen_op_jmp_T0</name><argument_list pos:start="671:26" pos:end="671:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="673:13" pos:end="673:42"><expr pos:start="673:13" pos:end="673:41"><name pos:start="673:13" pos:end="673:20">next_eip</name> <operator pos:start="673:22" pos:end="673:22">=</operator> <name pos:start="673:24" pos:end="673:28"><name pos:start="673:24" pos:end="673:24">s</name><operator pos:start="673:25" pos:end="673:26">-&gt;</operator><name pos:start="673:27" pos:end="673:28">pc</name></name> <operator pos:start="673:30" pos:end="673:30">-</operator> <name pos:start="673:32" pos:end="673:41"><name pos:start="673:32" pos:end="673:32">s</name><operator pos:start="673:33" pos:end="673:34">-&gt;</operator><name pos:start="673:35" pos:end="673:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="675:13" pos:end="675:40"><expr pos:start="675:13" pos:end="675:39"><call pos:start="675:13" pos:end="675:39"><name pos:start="675:13" pos:end="675:29">gen_op_movl_T0_im</name><argument_list pos:start="675:30" pos:end="675:39">(<argument pos:start="675:31" pos:end="675:38"><expr pos:start="675:31" pos:end="675:38"><name pos:start="675:31" pos:end="675:38">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="677:13" pos:end="677:27"><expr pos:start="677:13" pos:end="677:26"><call pos:start="677:13" pos:end="677:26"><name pos:start="677:13" pos:end="677:23">gen_push_T0</name><argument_list pos:start="677:24" pos:end="677:26">(<argument pos:start="677:25" pos:end="677:25"><expr pos:start="677:25" pos:end="677:25"><name pos:start="677:25" pos:end="677:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="679:13" pos:end="679:26"><expr pos:start="679:13" pos:end="679:25"><name pos:start="679:13" pos:end="679:21"><name pos:start="679:13" pos:end="679:13">s</name><operator pos:start="679:14" pos:end="679:15">-&gt;</operator><name pos:start="679:16" pos:end="679:21">is_jmp</name></name> <operator pos:start="679:23" pos:end="679:23">=</operator> <literal type="number" pos:start="679:25" pos:end="679:25">1</literal></expr>;</expr_stmt>

            <break pos:start="681:13" pos:end="681:18">break;</break>

        <case pos:start="683:9" pos:end="683:15">case <expr pos:start="683:14" pos:end="683:14"><literal type="number" pos:start="683:14" pos:end="683:14">3</literal></expr>:</case> <comment type="block" pos:start="683:17" pos:end="683:30">/* lcall Ev */</comment>

            <comment type="block" pos:start="685:13" pos:end="685:46">/* push return segment + offset */</comment>

            <expr_stmt pos:start="687:13" pos:end="687:37"><expr pos:start="687:13" pos:end="687:36"><call pos:start="687:13" pos:end="687:36"><name pos:start="687:13" pos:end="687:30">gen_op_movl_T0_seg</name><argument_list pos:start="687:31" pos:end="687:36">(<argument pos:start="687:32" pos:end="687:35"><expr pos:start="687:32" pos:end="687:35"><name pos:start="687:32" pos:end="687:35">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="689:13" pos:end="689:27"><expr pos:start="689:13" pos:end="689:26"><call pos:start="689:13" pos:end="689:26"><name pos:start="689:13" pos:end="689:23">gen_push_T0</name><argument_list pos:start="689:24" pos:end="689:26">(<argument pos:start="689:25" pos:end="689:25"><expr pos:start="689:25" pos:end="689:25"><name pos:start="689:25" pos:end="689:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="691:13" pos:end="691:42"><expr pos:start="691:13" pos:end="691:41"><name pos:start="691:13" pos:end="691:20">next_eip</name> <operator pos:start="691:22" pos:end="691:22">=</operator> <name pos:start="691:24" pos:end="691:28"><name pos:start="691:24" pos:end="691:24">s</name><operator pos:start="691:25" pos:end="691:26">-&gt;</operator><name pos:start="691:27" pos:end="691:28">pc</name></name> <operator pos:start="691:30" pos:end="691:30">-</operator> <name pos:start="691:32" pos:end="691:41"><name pos:start="691:32" pos:end="691:32">s</name><operator pos:start="691:33" pos:end="691:34">-&gt;</operator><name pos:start="691:35" pos:end="691:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="693:13" pos:end="693:40"><expr pos:start="693:13" pos:end="693:39"><call pos:start="693:13" pos:end="693:39"><name pos:start="693:13" pos:end="693:29">gen_op_movl_T0_im</name><argument_list pos:start="693:30" pos:end="693:39">(<argument pos:start="693:31" pos:end="693:38"><expr pos:start="693:31" pos:end="693:38"><name pos:start="693:31" pos:end="693:38">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="695:13" pos:end="695:27"><expr pos:start="695:13" pos:end="695:26"><call pos:start="695:13" pos:end="695:26"><name pos:start="695:13" pos:end="695:23">gen_push_T0</name><argument_list pos:start="695:24" pos:end="695:26">(<argument pos:start="695:25" pos:end="695:25"><expr pos:start="695:25" pos:end="695:25"><name pos:start="695:25" pos:end="695:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="699:13" pos:end="699:34"><expr pos:start="699:13" pos:end="699:33"><name pos:start="699:13" pos:end="699:31"><name pos:start="699:13" pos:end="699:27">gen_op_ld_T1_A0</name><index pos:start="699:28" pos:end="699:31">[<expr pos:start="699:29" pos:end="699:30"><name pos:start="699:29" pos:end="699:30">ot</name></expr>]</index></name><operator pos:start="699:32" pos:end="699:32">(</operator><operator pos:start="699:33" pos:end="699:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="701:13" pos:end="701:55"><expr pos:start="701:13" pos:end="701:54"><call pos:start="701:13" pos:end="701:54"><name pos:start="701:13" pos:end="701:29">gen_op_addl_A0_im</name><argument_list pos:start="701:30" pos:end="701:54">(<argument pos:start="701:31" pos:end="701:53"><expr pos:start="701:31" pos:end="701:53"><literal type="number" pos:start="701:31" pos:end="701:31">1</literal> <operator pos:start="701:33" pos:end="701:34">&lt;&lt;</operator> <operator pos:start="701:36" pos:end="701:36">(</operator><name pos:start="701:37" pos:end="701:38">ot</name> <operator pos:start="701:40" pos:end="701:40">-</operator> <name pos:start="701:42" pos:end="701:48">OT_WORD</name> <operator pos:start="701:50" pos:end="701:50">+</operator> <literal type="number" pos:start="701:52" pos:end="701:52">1</literal><operator pos:start="701:53" pos:end="701:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="703:13" pos:end="703:32"><expr pos:start="703:13" pos:end="703:31"><call pos:start="703:13" pos:end="703:31"><name pos:start="703:13" pos:end="703:29">gen_op_lduw_T0_A0</name><argument_list pos:start="703:30" pos:end="703:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="705:13" pos:end="705:37"><expr pos:start="705:13" pos:end="705:36"><call pos:start="705:13" pos:end="705:36"><name pos:start="705:13" pos:end="705:27">gen_movl_seg_T0</name><argument_list pos:start="705:28" pos:end="705:36">(<argument pos:start="705:29" pos:end="705:29"><expr pos:start="705:29" pos:end="705:29"><name pos:start="705:29" pos:end="705:29">s</name></expr></argument>, <argument pos:start="705:32" pos:end="705:35"><expr pos:start="705:32" pos:end="705:35"><name pos:start="705:32" pos:end="705:35">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="707:13" pos:end="707:32"><expr pos:start="707:13" pos:end="707:31"><call pos:start="707:13" pos:end="707:31"><name pos:start="707:13" pos:end="707:29">gen_op_movl_T0_T1</name><argument_list pos:start="707:30" pos:end="707:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="709:13" pos:end="709:28"><expr pos:start="709:13" pos:end="709:27"><call pos:start="709:13" pos:end="709:27"><name pos:start="709:13" pos:end="709:25">gen_op_jmp_T0</name><argument_list pos:start="709:26" pos:end="709:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="711:13" pos:end="711:26"><expr pos:start="711:13" pos:end="711:25"><name pos:start="711:13" pos:end="711:21"><name pos:start="711:13" pos:end="711:13">s</name><operator pos:start="711:14" pos:end="711:15">-&gt;</operator><name pos:start="711:16" pos:end="711:21">is_jmp</name></name> <operator pos:start="711:23" pos:end="711:23">=</operator> <literal type="number" pos:start="711:25" pos:end="711:25">1</literal></expr>;</expr_stmt>

            <break pos:start="713:13" pos:end="713:18">break;</break>

        <case pos:start="715:9" pos:end="715:15">case <expr pos:start="715:14" pos:end="715:14"><literal type="number" pos:start="715:14" pos:end="715:14">4</literal></expr>:</case> <comment type="block" pos:start="715:17" pos:end="715:28">/* jmp Ev */</comment>

            <if_stmt pos:start="717:13" pos:end="719:38"><if pos:start="717:13" pos:end="719:38">if <condition pos:start="717:16" pos:end="717:30">(<expr pos:start="717:17" pos:end="717:29"><name pos:start="717:17" pos:end="717:24"><name pos:start="717:17" pos:end="717:17">s</name><operator pos:start="717:18" pos:end="717:19">-&gt;</operator><name pos:start="717:20" pos:end="717:24">dflag</name></name> <operator pos:start="717:26" pos:end="717:27">==</operator> <literal type="number" pos:start="717:29" pos:end="717:29">0</literal></expr>)</condition><block type="pseudo" pos:start="719:17" pos:end="719:38"><block_content pos:start="719:17" pos:end="719:38">

                <expr_stmt pos:start="719:17" pos:end="719:38"><expr pos:start="719:17" pos:end="719:37"><call pos:start="719:17" pos:end="719:37"><name pos:start="719:17" pos:end="719:35">gen_op_andl_T0_ffff</name><argument_list pos:start="719:36" pos:end="719:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="721:13" pos:end="721:28"><expr pos:start="721:13" pos:end="721:27"><call pos:start="721:13" pos:end="721:27"><name pos:start="721:13" pos:end="721:25">gen_op_jmp_T0</name><argument_list pos:start="721:26" pos:end="721:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="723:13" pos:end="723:26"><expr pos:start="723:13" pos:end="723:25"><name pos:start="723:13" pos:end="723:21"><name pos:start="723:13" pos:end="723:13">s</name><operator pos:start="723:14" pos:end="723:15">-&gt;</operator><name pos:start="723:16" pos:end="723:21">is_jmp</name></name> <operator pos:start="723:23" pos:end="723:23">=</operator> <literal type="number" pos:start="723:25" pos:end="723:25">1</literal></expr>;</expr_stmt>

            <break pos:start="725:13" pos:end="725:18">break;</break>

        <case pos:start="727:9" pos:end="727:15">case <expr pos:start="727:14" pos:end="727:14"><literal type="number" pos:start="727:14" pos:end="727:14">5</literal></expr>:</case> <comment type="block" pos:start="727:17" pos:end="727:29">/* ljmp Ev */</comment>

            <expr_stmt pos:start="729:13" pos:end="729:34"><expr pos:start="729:13" pos:end="729:33"><name pos:start="729:13" pos:end="729:31"><name pos:start="729:13" pos:end="729:27">gen_op_ld_T1_A0</name><index pos:start="729:28" pos:end="729:31">[<expr pos:start="729:29" pos:end="729:30"><name pos:start="729:29" pos:end="729:30">ot</name></expr>]</index></name><operator pos:start="729:32" pos:end="729:32">(</operator><operator pos:start="729:33" pos:end="729:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="731:13" pos:end="731:55"><expr pos:start="731:13" pos:end="731:54"><call pos:start="731:13" pos:end="731:54"><name pos:start="731:13" pos:end="731:29">gen_op_addl_A0_im</name><argument_list pos:start="731:30" pos:end="731:54">(<argument pos:start="731:31" pos:end="731:53"><expr pos:start="731:31" pos:end="731:53"><literal type="number" pos:start="731:31" pos:end="731:31">1</literal> <operator pos:start="731:33" pos:end="731:34">&lt;&lt;</operator> <operator pos:start="731:36" pos:end="731:36">(</operator><name pos:start="731:37" pos:end="731:38">ot</name> <operator pos:start="731:40" pos:end="731:40">-</operator> <name pos:start="731:42" pos:end="731:48">OT_WORD</name> <operator pos:start="731:50" pos:end="731:50">+</operator> <literal type="number" pos:start="731:52" pos:end="731:52">1</literal><operator pos:start="731:53" pos:end="731:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="733:13" pos:end="733:32"><expr pos:start="733:13" pos:end="733:31"><call pos:start="733:13" pos:end="733:31"><name pos:start="733:13" pos:end="733:29">gen_op_lduw_T0_A0</name><argument_list pos:start="733:30" pos:end="733:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="735:13" pos:end="735:37"><expr pos:start="735:13" pos:end="735:36"><call pos:start="735:13" pos:end="735:36"><name pos:start="735:13" pos:end="735:27">gen_movl_seg_T0</name><argument_list pos:start="735:28" pos:end="735:36">(<argument pos:start="735:29" pos:end="735:29"><expr pos:start="735:29" pos:end="735:29"><name pos:start="735:29" pos:end="735:29">s</name></expr></argument>, <argument pos:start="735:32" pos:end="735:35"><expr pos:start="735:32" pos:end="735:35"><name pos:start="735:32" pos:end="735:35">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="737:13" pos:end="737:32"><expr pos:start="737:13" pos:end="737:31"><call pos:start="737:13" pos:end="737:31"><name pos:start="737:13" pos:end="737:29">gen_op_movl_T0_T1</name><argument_list pos:start="737:30" pos:end="737:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="739:13" pos:end="739:28"><expr pos:start="739:13" pos:end="739:27"><call pos:start="739:13" pos:end="739:27"><name pos:start="739:13" pos:end="739:25">gen_op_jmp_T0</name><argument_list pos:start="739:26" pos:end="739:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="741:13" pos:end="741:26"><expr pos:start="741:13" pos:end="741:25"><name pos:start="741:13" pos:end="741:21"><name pos:start="741:13" pos:end="741:13">s</name><operator pos:start="741:14" pos:end="741:15">-&gt;</operator><name pos:start="741:16" pos:end="741:21">is_jmp</name></name> <operator pos:start="741:23" pos:end="741:23">=</operator> <literal type="number" pos:start="741:25" pos:end="741:25">1</literal></expr>;</expr_stmt>

            <break pos:start="743:13" pos:end="743:18">break;</break>

        <case pos:start="745:9" pos:end="745:15">case <expr pos:start="745:14" pos:end="745:14"><literal type="number" pos:start="745:14" pos:end="745:14">6</literal></expr>:</case> <comment type="block" pos:start="745:17" pos:end="745:29">/* push Ev */</comment>

            <expr_stmt pos:start="747:13" pos:end="747:27"><expr pos:start="747:13" pos:end="747:26"><call pos:start="747:13" pos:end="747:26"><name pos:start="747:13" pos:end="747:23">gen_push_T0</name><argument_list pos:start="747:24" pos:end="747:26">(<argument pos:start="747:25" pos:end="747:25"><expr pos:start="747:25" pos:end="747:25"><name pos:start="747:25" pos:end="747:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="749:13" pos:end="749:18">break;</break>

        <default pos:start="751:9" pos:end="751:16">default:</default>

            <goto pos:start="753:13" pos:end="753:28">goto <name pos:start="753:18" pos:end="753:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="757:9" pos:end="757:14">break;</break>



    <case pos:start="761:5" pos:end="761:14">case <expr pos:start="761:10" pos:end="761:13"><literal type="number" pos:start="761:10" pos:end="761:13">0x84</literal></expr>:</case> <comment type="block" pos:start="761:16" pos:end="761:32">/* test Ev, Gv */</comment>

    <case pos:start="763:5" pos:end="763:14">case <expr pos:start="763:10" pos:end="763:13"><literal type="number" pos:start="763:10" pos:end="763:13">0x85</literal></expr>:</case> 

        <if_stmt pos:start="765:9" pos:end="771:43"><if pos:start="765:9" pos:end="767:25">if <condition pos:start="765:12" pos:end="765:25">(<expr pos:start="765:13" pos:end="765:24"><operator pos:start="765:13" pos:end="765:13">(</operator><name pos:start="765:14" pos:end="765:14">b</name> <operator pos:start="765:16" pos:end="765:16">&amp;</operator> <literal type="number" pos:start="765:18" pos:end="765:18">1</literal><operator pos:start="765:19" pos:end="765:19">)</operator> <operator pos:start="765:21" pos:end="765:22">==</operator> <literal type="number" pos:start="765:24" pos:end="765:24">0</literal></expr>)</condition><block type="pseudo" pos:start="767:13" pos:end="767:25"><block_content pos:start="767:13" pos:end="767:25">

            <expr_stmt pos:start="767:13" pos:end="767:25"><expr pos:start="767:13" pos:end="767:24"><name pos:start="767:13" pos:end="767:14">ot</name> <operator pos:start="767:16" pos:end="767:16">=</operator> <name pos:start="767:18" pos:end="767:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="769:9" pos:end="771:43">else<block type="pseudo" pos:start="771:13" pos:end="771:43"><block_content pos:start="771:13" pos:end="771:43">

            <expr_stmt pos:start="771:13" pos:end="771:43"><expr pos:start="771:13" pos:end="771:42"><name pos:start="771:13" pos:end="771:14">ot</name> <operator pos:start="771:16" pos:end="771:16">=</operator> <ternary pos:start="771:18" pos:end="771:42"><condition pos:start="771:18" pos:end="771:24"><expr pos:start="771:18" pos:end="771:22"><name pos:start="771:18" pos:end="771:22">dflag</name></expr> ?</condition><then pos:start="771:26" pos:end="771:32"> <expr pos:start="771:26" pos:end="771:32"><name pos:start="771:26" pos:end="771:32">OT_LONG</name></expr> </then><else pos:start="771:34" pos:end="771:42">: <expr pos:start="771:36" pos:end="771:42"><name pos:start="771:36" pos:end="771:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="775:9" pos:end="775:30"><expr pos:start="775:9" pos:end="775:29"><name pos:start="775:9" pos:end="775:13">modrm</name> <operator pos:start="775:15" pos:end="775:15">=</operator> <call pos:start="775:17" pos:end="775:29"><name pos:start="775:17" pos:end="775:20">ldub</name><argument_list pos:start="775:21" pos:end="775:29">(<argument pos:start="775:22" pos:end="775:28"><expr pos:start="775:22" pos:end="775:28"><name pos:start="775:22" pos:end="775:26"><name pos:start="775:22" pos:end="775:22">s</name><operator pos:start="775:23" pos:end="775:24">-&gt;</operator><name pos:start="775:25" pos:end="775:26">pc</name></name><operator pos:start="775:27" pos:end="775:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="777:9" pos:end="777:31"><expr pos:start="777:9" pos:end="777:30"><name pos:start="777:9" pos:end="777:11">mod</name> <operator pos:start="777:13" pos:end="777:13">=</operator> <operator pos:start="777:15" pos:end="777:15">(</operator><name pos:start="777:16" pos:end="777:20">modrm</name> <operator pos:start="777:22" pos:end="777:23">&gt;&gt;</operator> <literal type="number" pos:start="777:25" pos:end="777:25">6</literal><operator pos:start="777:26" pos:end="777:26">)</operator> <operator pos:start="777:28" pos:end="777:28">&amp;</operator> <literal type="number" pos:start="777:30" pos:end="777:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="779:9" pos:end="779:23"><expr pos:start="779:9" pos:end="779:22"><name pos:start="779:9" pos:end="779:10">rm</name> <operator pos:start="779:12" pos:end="779:12">=</operator> <name pos:start="779:14" pos:end="779:18">modrm</name> <operator pos:start="779:20" pos:end="779:20">&amp;</operator> <literal type="number" pos:start="779:22" pos:end="779:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="781:9" pos:end="781:31"><expr pos:start="781:9" pos:end="781:30"><name pos:start="781:9" pos:end="781:11">reg</name> <operator pos:start="781:13" pos:end="781:13">=</operator> <operator pos:start="781:15" pos:end="781:15">(</operator><name pos:start="781:16" pos:end="781:20">modrm</name> <operator pos:start="781:22" pos:end="781:23">&gt;&gt;</operator> <literal type="number" pos:start="781:25" pos:end="781:25">3</literal><operator pos:start="781:26" pos:end="781:26">)</operator> <operator pos:start="781:28" pos:end="781:28">&amp;</operator> <literal type="number" pos:start="781:30" pos:end="781:30">7</literal></expr>;</expr_stmt>

        

        <expr_stmt pos:start="785:9" pos:end="785:49"><expr pos:start="785:9" pos:end="785:48"><call pos:start="785:9" pos:end="785:48"><name pos:start="785:9" pos:end="785:22">gen_ldst_modrm</name><argument_list pos:start="785:23" pos:end="785:48">(<argument pos:start="785:24" pos:end="785:24"><expr pos:start="785:24" pos:end="785:24"><name pos:start="785:24" pos:end="785:24">s</name></expr></argument>, <argument pos:start="785:27" pos:end="785:31"><expr pos:start="785:27" pos:end="785:31"><name pos:start="785:27" pos:end="785:31">modrm</name></expr></argument>, <argument pos:start="785:34" pos:end="785:35"><expr pos:start="785:34" pos:end="785:35"><name pos:start="785:34" pos:end="785:35">ot</name></expr></argument>, <argument pos:start="785:38" pos:end="785:44"><expr pos:start="785:38" pos:end="785:44"><name pos:start="785:38" pos:end="785:44">OR_TMP0</name></expr></argument>, <argument pos:start="785:47" pos:end="785:47"><expr pos:start="785:47" pos:end="785:47"><literal type="number" pos:start="785:47" pos:end="785:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="787:9" pos:end="787:49"><expr pos:start="787:9" pos:end="787:48"><name pos:start="787:9" pos:end="787:46"><name pos:start="787:9" pos:end="787:25">gen_op_mov_TN_reg</name><index pos:start="787:26" pos:end="787:29">[<expr pos:start="787:27" pos:end="787:28"><name pos:start="787:27" pos:end="787:28">ot</name></expr>]</index><index pos:start="787:30" pos:end="787:32">[<expr pos:start="787:31" pos:end="787:31"><literal type="number" pos:start="787:31" pos:end="787:31">1</literal></expr>]</index><index pos:start="787:33" pos:end="787:46">[<expr pos:start="787:34" pos:end="787:45"><name pos:start="787:34" pos:end="787:36">reg</name> <operator pos:start="787:38" pos:end="787:38">+</operator> <name pos:start="787:40" pos:end="787:45">OR_EAX</name></expr>]</index></name><operator pos:start="787:47" pos:end="787:47">(</operator><operator pos:start="787:48" pos:end="787:48">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="789:9" pos:end="789:32"><expr pos:start="789:9" pos:end="789:31"><call pos:start="789:9" pos:end="789:31"><name pos:start="789:9" pos:end="789:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="789:30" pos:end="789:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="791:9" pos:end="791:37"><expr pos:start="791:9" pos:end="791:36"><name pos:start="791:9" pos:end="791:16"><name pos:start="791:9" pos:end="791:9">s</name><operator pos:start="791:10" pos:end="791:11">-&gt;</operator><name pos:start="791:12" pos:end="791:16">cc_op</name></name> <operator pos:start="791:18" pos:end="791:18">=</operator> <name pos:start="791:20" pos:end="791:31">CC_OP_LOGICB</name> <operator pos:start="791:33" pos:end="791:33">+</operator> <name pos:start="791:35" pos:end="791:36">ot</name></expr>;</expr_stmt>

        <break pos:start="793:9" pos:end="793:14">break;</break>

        

    <case pos:start="797:5" pos:end="797:14">case <expr pos:start="797:10" pos:end="797:13"><literal type="number" pos:start="797:10" pos:end="797:13">0xa8</literal></expr>:</case> <comment type="block" pos:start="797:16" pos:end="797:33">/* test eAX, Iv */</comment>

    <case pos:start="799:5" pos:end="799:14">case <expr pos:start="799:10" pos:end="799:13"><literal type="number" pos:start="799:10" pos:end="799:13">0xa9</literal></expr>:</case>

        <if_stmt pos:start="801:9" pos:end="807:43"><if pos:start="801:9" pos:end="803:25">if <condition pos:start="801:12" pos:end="801:25">(<expr pos:start="801:13" pos:end="801:24"><operator pos:start="801:13" pos:end="801:13">(</operator><name pos:start="801:14" pos:end="801:14">b</name> <operator pos:start="801:16" pos:end="801:16">&amp;</operator> <literal type="number" pos:start="801:18" pos:end="801:18">1</literal><operator pos:start="801:19" pos:end="801:19">)</operator> <operator pos:start="801:21" pos:end="801:22">==</operator> <literal type="number" pos:start="801:24" pos:end="801:24">0</literal></expr>)</condition><block type="pseudo" pos:start="803:13" pos:end="803:25"><block_content pos:start="803:13" pos:end="803:25">

            <expr_stmt pos:start="803:13" pos:end="803:25"><expr pos:start="803:13" pos:end="803:24"><name pos:start="803:13" pos:end="803:14">ot</name> <operator pos:start="803:16" pos:end="803:16">=</operator> <name pos:start="803:18" pos:end="803:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="805:9" pos:end="807:43">else<block type="pseudo" pos:start="807:13" pos:end="807:43"><block_content pos:start="807:13" pos:end="807:43">

            <expr_stmt pos:start="807:13" pos:end="807:43"><expr pos:start="807:13" pos:end="807:42"><name pos:start="807:13" pos:end="807:14">ot</name> <operator pos:start="807:16" pos:end="807:16">=</operator> <ternary pos:start="807:18" pos:end="807:42"><condition pos:start="807:18" pos:end="807:24"><expr pos:start="807:18" pos:end="807:22"><name pos:start="807:18" pos:end="807:22">dflag</name></expr> ?</condition><then pos:start="807:26" pos:end="807:32"> <expr pos:start="807:26" pos:end="807:32"><name pos:start="807:26" pos:end="807:32">OT_LONG</name></expr> </then><else pos:start="807:34" pos:end="807:42">: <expr pos:start="807:36" pos:end="807:42"><name pos:start="807:36" pos:end="807:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="809:9" pos:end="809:30"><expr pos:start="809:9" pos:end="809:29"><name pos:start="809:9" pos:end="809:11">val</name> <operator pos:start="809:13" pos:end="809:13">=</operator> <call pos:start="809:15" pos:end="809:29"><name pos:start="809:15" pos:end="809:22">insn_get</name><argument_list pos:start="809:23" pos:end="809:29">(<argument pos:start="809:24" pos:end="809:24"><expr pos:start="809:24" pos:end="809:24"><name pos:start="809:24" pos:end="809:24">s</name></expr></argument>, <argument pos:start="809:27" pos:end="809:28"><expr pos:start="809:27" pos:end="809:28"><name pos:start="809:27" pos:end="809:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="813:9" pos:end="813:43"><expr pos:start="813:9" pos:end="813:42"><name pos:start="813:9" pos:end="813:40"><name pos:start="813:9" pos:end="813:25">gen_op_mov_TN_reg</name><index pos:start="813:26" pos:end="813:29">[<expr pos:start="813:27" pos:end="813:28"><name pos:start="813:27" pos:end="813:28">ot</name></expr>]</index><index pos:start="813:30" pos:end="813:32">[<expr pos:start="813:31" pos:end="813:31"><literal type="number" pos:start="813:31" pos:end="813:31">0</literal></expr>]</index><index pos:start="813:33" pos:end="813:40">[<expr pos:start="813:34" pos:end="813:39"><name pos:start="813:34" pos:end="813:39">OR_EAX</name></expr>]</index></name><operator pos:start="813:41" pos:end="813:41">(</operator><operator pos:start="813:42" pos:end="813:42">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="815:9" pos:end="815:31"><expr pos:start="815:9" pos:end="815:30"><call pos:start="815:9" pos:end="815:30"><name pos:start="815:9" pos:end="815:25">gen_op_movl_T1_im</name><argument_list pos:start="815:26" pos:end="815:30">(<argument pos:start="815:27" pos:end="815:29"><expr pos:start="815:27" pos:end="815:29"><name pos:start="815:27" pos:end="815:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="817:9" pos:end="817:32"><expr pos:start="817:9" pos:end="817:31"><call pos:start="817:9" pos:end="817:31"><name pos:start="817:9" pos:end="817:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="817:30" pos:end="817:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="819:9" pos:end="819:37"><expr pos:start="819:9" pos:end="819:36"><name pos:start="819:9" pos:end="819:16"><name pos:start="819:9" pos:end="819:9">s</name><operator pos:start="819:10" pos:end="819:11">-&gt;</operator><name pos:start="819:12" pos:end="819:16">cc_op</name></name> <operator pos:start="819:18" pos:end="819:18">=</operator> <name pos:start="819:20" pos:end="819:31">CC_OP_LOGICB</name> <operator pos:start="819:33" pos:end="819:33">+</operator> <name pos:start="819:35" pos:end="819:36">ot</name></expr>;</expr_stmt>

        <break pos:start="821:9" pos:end="821:14">break;</break>

        

    <case pos:start="825:5" pos:end="825:14">case <expr pos:start="825:10" pos:end="825:13"><literal type="number" pos:start="825:10" pos:end="825:13">0x98</literal></expr>:</case> <comment type="block" pos:start="825:16" pos:end="825:29">/* CWDE/CBW */</comment>

        <if_stmt pos:start="827:9" pos:end="833:34"><if pos:start="827:9" pos:end="829:35">if <condition pos:start="827:12" pos:end="827:18">(<expr pos:start="827:13" pos:end="827:17"><name pos:start="827:13" pos:end="827:17">dflag</name></expr>)</condition><block type="pseudo" pos:start="829:13" pos:end="829:35"><block_content pos:start="829:13" pos:end="829:35">

            <expr_stmt pos:start="829:13" pos:end="829:35"><expr pos:start="829:13" pos:end="829:34"><call pos:start="829:13" pos:end="829:34"><name pos:start="829:13" pos:end="829:32">gen_op_movswl_EAX_AX</name><argument_list pos:start="829:33" pos:end="829:34">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="831:9" pos:end="833:34">else<block type="pseudo" pos:start="833:13" pos:end="833:34"><block_content pos:start="833:13" pos:end="833:34">

            <expr_stmt pos:start="833:13" pos:end="833:34"><expr pos:start="833:13" pos:end="833:33"><call pos:start="833:13" pos:end="833:33"><name pos:start="833:13" pos:end="833:31">gen_op_movsbw_AX_AL</name><argument_list pos:start="833:32" pos:end="833:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="835:9" pos:end="835:14">break;</break>

    <case pos:start="837:5" pos:end="837:14">case <expr pos:start="837:10" pos:end="837:13"><literal type="number" pos:start="837:10" pos:end="837:13">0x99</literal></expr>:</case> <comment type="block" pos:start="837:16" pos:end="837:28">/* CDQ/CWD */</comment>

        <if_stmt pos:start="839:9" pos:end="845:34"><if pos:start="839:9" pos:end="841:36">if <condition pos:start="839:12" pos:end="839:18">(<expr pos:start="839:13" pos:end="839:17"><name pos:start="839:13" pos:end="839:17">dflag</name></expr>)</condition><block type="pseudo" pos:start="841:13" pos:end="841:36"><block_content pos:start="841:13" pos:end="841:36">

            <expr_stmt pos:start="841:13" pos:end="841:36"><expr pos:start="841:13" pos:end="841:35"><call pos:start="841:13" pos:end="841:35"><name pos:start="841:13" pos:end="841:33">gen_op_movslq_EDX_EAX</name><argument_list pos:start="841:34" pos:end="841:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="843:9" pos:end="845:34">else<block type="pseudo" pos:start="845:13" pos:end="845:34"><block_content pos:start="845:13" pos:end="845:34">

            <expr_stmt pos:start="845:13" pos:end="845:34"><expr pos:start="845:13" pos:end="845:33"><call pos:start="845:13" pos:end="845:33"><name pos:start="845:13" pos:end="845:31">gen_op_movswl_DX_AX</name><argument_list pos:start="845:32" pos:end="845:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="847:9" pos:end="847:14">break;</break>

    <case pos:start="849:5" pos:end="849:15">case <expr pos:start="849:10" pos:end="849:14"><literal type="number" pos:start="849:10" pos:end="849:14">0x1af</literal></expr>:</case> <comment type="block" pos:start="849:17" pos:end="849:33">/* imul Gv, Ev */</comment>

    <case pos:start="851:5" pos:end="851:14">case <expr pos:start="851:10" pos:end="851:13"><literal type="number" pos:start="851:10" pos:end="851:13">0x69</literal></expr>:</case> <comment type="block" pos:start="851:16" pos:end="851:35">/* imul Gv, Ev, I */</comment>

    <case pos:start="853:5" pos:end="853:14">case <expr pos:start="853:10" pos:end="853:13"><literal type="number" pos:start="853:10" pos:end="853:13">0x6b</literal></expr>:</case>

        <expr_stmt pos:start="855:9" pos:end="855:39"><expr pos:start="855:9" pos:end="855:38"><name pos:start="855:9" pos:end="855:10">ot</name> <operator pos:start="855:12" pos:end="855:12">=</operator> <ternary pos:start="855:14" pos:end="855:38"><condition pos:start="855:14" pos:end="855:20"><expr pos:start="855:14" pos:end="855:18"><name pos:start="855:14" pos:end="855:18">dflag</name></expr> ?</condition><then pos:start="855:22" pos:end="855:28"> <expr pos:start="855:22" pos:end="855:28"><name pos:start="855:22" pos:end="855:28">OT_LONG</name></expr> </then><else pos:start="855:30" pos:end="855:38">: <expr pos:start="855:32" pos:end="855:38"><name pos:start="855:32" pos:end="855:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="857:9" pos:end="857:30"><expr pos:start="857:9" pos:end="857:29"><name pos:start="857:9" pos:end="857:13">modrm</name> <operator pos:start="857:15" pos:end="857:15">=</operator> <call pos:start="857:17" pos:end="857:29"><name pos:start="857:17" pos:end="857:20">ldub</name><argument_list pos:start="857:21" pos:end="857:29">(<argument pos:start="857:22" pos:end="857:28"><expr pos:start="857:22" pos:end="857:28"><name pos:start="857:22" pos:end="857:26"><name pos:start="857:22" pos:end="857:22">s</name><operator pos:start="857:23" pos:end="857:24">-&gt;</operator><name pos:start="857:25" pos:end="857:26">pc</name></name><operator pos:start="857:27" pos:end="857:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="859:9" pos:end="859:42"><expr pos:start="859:9" pos:end="859:41"><name pos:start="859:9" pos:end="859:11">reg</name> <operator pos:start="859:13" pos:end="859:13">=</operator> <operator pos:start="859:15" pos:end="859:15">(</operator><operator pos:start="859:16" pos:end="859:16">(</operator><name pos:start="859:17" pos:end="859:21">modrm</name> <operator pos:start="859:23" pos:end="859:24">&gt;&gt;</operator> <literal type="number" pos:start="859:26" pos:end="859:26">3</literal><operator pos:start="859:27" pos:end="859:27">)</operator> <operator pos:start="859:29" pos:end="859:29">&amp;</operator> <literal type="number" pos:start="859:31" pos:end="859:31">7</literal><operator pos:start="859:32" pos:end="859:32">)</operator> <operator pos:start="859:34" pos:end="859:34">+</operator> <name pos:start="859:36" pos:end="859:41">OR_EAX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="861:9" pos:end="861:49"><expr pos:start="861:9" pos:end="861:48"><call pos:start="861:9" pos:end="861:48"><name pos:start="861:9" pos:end="861:22">gen_ldst_modrm</name><argument_list pos:start="861:23" pos:end="861:48">(<argument pos:start="861:24" pos:end="861:24"><expr pos:start="861:24" pos:end="861:24"><name pos:start="861:24" pos:end="861:24">s</name></expr></argument>, <argument pos:start="861:27" pos:end="861:31"><expr pos:start="861:27" pos:end="861:31"><name pos:start="861:27" pos:end="861:31">modrm</name></expr></argument>, <argument pos:start="861:34" pos:end="861:35"><expr pos:start="861:34" pos:end="861:35"><name pos:start="861:34" pos:end="861:35">ot</name></expr></argument>, <argument pos:start="861:38" pos:end="861:44"><expr pos:start="861:38" pos:end="861:44"><name pos:start="861:38" pos:end="861:44">OR_TMP0</name></expr></argument>, <argument pos:start="861:47" pos:end="861:47"><expr pos:start="861:47" pos:end="861:47"><literal type="number" pos:start="861:47" pos:end="861:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="863:9" pos:end="879:9"><if pos:start="863:9" pos:end="869:9">if <condition pos:start="863:12" pos:end="863:22">(<expr pos:start="863:13" pos:end="863:21"><name pos:start="863:13" pos:end="863:13">b</name> <operator pos:start="863:15" pos:end="863:16">==</operator> <literal type="number" pos:start="863:18" pos:end="863:21">0x69</literal></expr>)</condition> <block pos:start="863:24" pos:end="869:9">{<block_content pos:start="865:13" pos:end="867:35">

            <expr_stmt pos:start="865:13" pos:end="865:34"><expr pos:start="865:13" pos:end="865:33"><name pos:start="865:13" pos:end="865:15">val</name> <operator pos:start="865:17" pos:end="865:17">=</operator> <call pos:start="865:19" pos:end="865:33"><name pos:start="865:19" pos:end="865:26">insn_get</name><argument_list pos:start="865:27" pos:end="865:33">(<argument pos:start="865:28" pos:end="865:28"><expr pos:start="865:28" pos:end="865:28"><name pos:start="865:28" pos:end="865:28">s</name></expr></argument>, <argument pos:start="865:31" pos:end="865:32"><expr pos:start="865:31" pos:end="865:32"><name pos:start="865:31" pos:end="865:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="867:13" pos:end="867:35"><expr pos:start="867:13" pos:end="867:34"><call pos:start="867:13" pos:end="867:34"><name pos:start="867:13" pos:end="867:29">gen_op_movl_T1_im</name><argument_list pos:start="867:30" pos:end="867:34">(<argument pos:start="867:31" pos:end="867:33"><expr pos:start="867:31" pos:end="867:33"><name pos:start="867:31" pos:end="867:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="869:11" pos:end="875:9">else if <condition pos:start="869:19" pos:end="869:29">(<expr pos:start="869:20" pos:end="869:28"><name pos:start="869:20" pos:end="869:20">b</name> <operator pos:start="869:22" pos:end="869:23">==</operator> <literal type="number" pos:start="869:25" pos:end="869:28">0x6b</literal></expr>)</condition> <block pos:start="869:31" pos:end="875:9">{<block_content pos:start="871:13" pos:end="873:35">

            <expr_stmt pos:start="871:13" pos:end="871:39"><expr pos:start="871:13" pos:end="871:38"><name pos:start="871:13" pos:end="871:15">val</name> <operator pos:start="871:17" pos:end="871:17">=</operator> <call pos:start="871:19" pos:end="871:38"><name pos:start="871:19" pos:end="871:26">insn_get</name><argument_list pos:start="871:27" pos:end="871:38">(<argument pos:start="871:28" pos:end="871:28"><expr pos:start="871:28" pos:end="871:28"><name pos:start="871:28" pos:end="871:28">s</name></expr></argument>, <argument pos:start="871:31" pos:end="871:37"><expr pos:start="871:31" pos:end="871:37"><name pos:start="871:31" pos:end="871:37">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="873:13" pos:end="873:35"><expr pos:start="873:13" pos:end="873:34"><call pos:start="873:13" pos:end="873:34"><name pos:start="873:13" pos:end="873:29">gen_op_movl_T1_im</name><argument_list pos:start="873:30" pos:end="873:34">(<argument pos:start="873:31" pos:end="873:33"><expr pos:start="873:31" pos:end="873:33"><name pos:start="873:31" pos:end="873:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="875:11" pos:end="879:9">else <block pos:start="875:16" pos:end="879:9">{<block_content pos:start="877:13" pos:end="877:44">

            <expr_stmt pos:start="877:13" pos:end="877:44"><expr pos:start="877:13" pos:end="877:43"><name pos:start="877:13" pos:end="877:41"><name pos:start="877:13" pos:end="877:29">gen_op_mov_TN_reg</name><index pos:start="877:30" pos:end="877:33">[<expr pos:start="877:31" pos:end="877:32"><name pos:start="877:31" pos:end="877:32">ot</name></expr>]</index><index pos:start="877:34" pos:end="877:36">[<expr pos:start="877:35" pos:end="877:35"><literal type="number" pos:start="877:35" pos:end="877:35">1</literal></expr>]</index><index pos:start="877:37" pos:end="877:41">[<expr pos:start="877:38" pos:end="877:40"><name pos:start="877:38" pos:end="877:40">reg</name></expr>]</index></name><operator pos:start="877:42" pos:end="877:42">(</operator><operator pos:start="877:43" pos:end="877:43">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="883:9" pos:end="891:9"><if pos:start="883:9" pos:end="887:9">if <condition pos:start="883:12" pos:end="883:26">(<expr pos:start="883:13" pos:end="883:25"><name pos:start="883:13" pos:end="883:14">ot</name> <operator pos:start="883:16" pos:end="883:17">==</operator> <name pos:start="883:19" pos:end="883:25">OT_LONG</name></expr>)</condition> <block pos:start="883:28" pos:end="887:9">{<block_content pos:start="885:13" pos:end="885:33">

            <expr_stmt pos:start="885:13" pos:end="885:33"><expr pos:start="885:13" pos:end="885:32"><call pos:start="885:13" pos:end="885:32"><name pos:start="885:13" pos:end="885:30">gen_op_imull_T0_T1</name><argument_list pos:start="885:31" pos:end="885:32">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="887:11" pos:end="891:9">else <block pos:start="887:16" pos:end="891:9">{<block_content pos:start="889:13" pos:end="889:33">

            <expr_stmt pos:start="889:13" pos:end="889:33"><expr pos:start="889:13" pos:end="889:32"><call pos:start="889:13" pos:end="889:32"><name pos:start="889:13" pos:end="889:30">gen_op_imulw_T0_T1</name><argument_list pos:start="889:31" pos:end="889:32">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="893:9" pos:end="893:37"><expr pos:start="893:9" pos:end="893:36"><name pos:start="893:9" pos:end="893:34"><name pos:start="893:9" pos:end="893:25">gen_op_mov_reg_T0</name><index pos:start="893:26" pos:end="893:29">[<expr pos:start="893:27" pos:end="893:28"><name pos:start="893:27" pos:end="893:28">ot</name></expr>]</index><index pos:start="893:30" pos:end="893:34">[<expr pos:start="893:31" pos:end="893:33"><name pos:start="893:31" pos:end="893:33">reg</name></expr>]</index></name><operator pos:start="893:35" pos:end="893:35">(</operator><operator pos:start="893:36" pos:end="893:36">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="895:9" pos:end="895:29"><expr pos:start="895:9" pos:end="895:28"><name pos:start="895:9" pos:end="895:16"><name pos:start="895:9" pos:end="895:9">s</name><operator pos:start="895:10" pos:end="895:11">-&gt;</operator><name pos:start="895:12" pos:end="895:16">cc_op</name></name> <operator pos:start="895:18" pos:end="895:18">=</operator> <name pos:start="895:20" pos:end="895:28">CC_OP_MUL</name></expr>;</expr_stmt>

        <break pos:start="897:9" pos:end="897:14">break;</break>

    <case pos:start="899:5" pos:end="899:15">case <expr pos:start="899:10" pos:end="899:14"><literal type="number" pos:start="899:10" pos:end="899:14">0x1c0</literal></expr>:</case>

    <case pos:start="901:5" pos:end="901:15">case <expr pos:start="901:10" pos:end="901:14"><literal type="number" pos:start="901:10" pos:end="901:14">0x1c1</literal></expr>:</case> <comment type="block" pos:start="901:17" pos:end="901:33">/* xadd Ev, Gv */</comment>

        <if_stmt pos:start="903:9" pos:end="909:43"><if pos:start="903:9" pos:end="905:25">if <condition pos:start="903:12" pos:end="903:25">(<expr pos:start="903:13" pos:end="903:24"><operator pos:start="903:13" pos:end="903:13">(</operator><name pos:start="903:14" pos:end="903:14">b</name> <operator pos:start="903:16" pos:end="903:16">&amp;</operator> <literal type="number" pos:start="903:18" pos:end="903:18">1</literal><operator pos:start="903:19" pos:end="903:19">)</operator> <operator pos:start="903:21" pos:end="903:22">==</operator> <literal type="number" pos:start="903:24" pos:end="903:24">0</literal></expr>)</condition><block type="pseudo" pos:start="905:13" pos:end="905:25"><block_content pos:start="905:13" pos:end="905:25">

            <expr_stmt pos:start="905:13" pos:end="905:25"><expr pos:start="905:13" pos:end="905:24"><name pos:start="905:13" pos:end="905:14">ot</name> <operator pos:start="905:16" pos:end="905:16">=</operator> <name pos:start="905:18" pos:end="905:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="907:9" pos:end="909:43">else<block type="pseudo" pos:start="909:13" pos:end="909:43"><block_content pos:start="909:13" pos:end="909:43">

            <expr_stmt pos:start="909:13" pos:end="909:43"><expr pos:start="909:13" pos:end="909:42"><name pos:start="909:13" pos:end="909:14">ot</name> <operator pos:start="909:16" pos:end="909:16">=</operator> <ternary pos:start="909:18" pos:end="909:42"><condition pos:start="909:18" pos:end="909:24"><expr pos:start="909:18" pos:end="909:22"><name pos:start="909:18" pos:end="909:22">dflag</name></expr> ?</condition><then pos:start="909:26" pos:end="909:32"> <expr pos:start="909:26" pos:end="909:32"><name pos:start="909:26" pos:end="909:32">OT_LONG</name></expr> </then><else pos:start="909:34" pos:end="909:42">: <expr pos:start="909:36" pos:end="909:42"><name pos:start="909:36" pos:end="909:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="911:9" pos:end="911:30"><expr pos:start="911:9" pos:end="911:29"><name pos:start="911:9" pos:end="911:13">modrm</name> <operator pos:start="911:15" pos:end="911:15">=</operator> <call pos:start="911:17" pos:end="911:29"><name pos:start="911:17" pos:end="911:20">ldub</name><argument_list pos:start="911:21" pos:end="911:29">(<argument pos:start="911:22" pos:end="911:28"><expr pos:start="911:22" pos:end="911:28"><name pos:start="911:22" pos:end="911:26"><name pos:start="911:22" pos:end="911:22">s</name><operator pos:start="911:23" pos:end="911:24">-&gt;</operator><name pos:start="911:25" pos:end="911:26">pc</name></name><operator pos:start="911:27" pos:end="911:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="913:9" pos:end="913:31"><expr pos:start="913:9" pos:end="913:30"><name pos:start="913:9" pos:end="913:11">reg</name> <operator pos:start="913:13" pos:end="913:13">=</operator> <operator pos:start="913:15" pos:end="913:15">(</operator><name pos:start="913:16" pos:end="913:20">modrm</name> <operator pos:start="913:22" pos:end="913:23">&gt;&gt;</operator> <literal type="number" pos:start="913:25" pos:end="913:25">3</literal><operator pos:start="913:26" pos:end="913:26">)</operator> <operator pos:start="913:28" pos:end="913:28">&amp;</operator> <literal type="number" pos:start="913:30" pos:end="913:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="915:9" pos:end="915:31"><expr pos:start="915:9" pos:end="915:30"><name pos:start="915:9" pos:end="915:11">mod</name> <operator pos:start="915:13" pos:end="915:13">=</operator> <operator pos:start="915:15" pos:end="915:15">(</operator><name pos:start="915:16" pos:end="915:20">modrm</name> <operator pos:start="915:22" pos:end="915:23">&gt;&gt;</operator> <literal type="number" pos:start="915:25" pos:end="915:25">6</literal><operator pos:start="915:26" pos:end="915:26">)</operator> <operator pos:start="915:28" pos:end="915:28">&amp;</operator> <literal type="number" pos:start="915:30" pos:end="915:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="917:9" pos:end="945:9"><if pos:start="917:9" pos:end="931:9">if <condition pos:start="917:12" pos:end="917:21">(<expr pos:start="917:13" pos:end="917:20"><name pos:start="917:13" pos:end="917:15">mod</name> <operator pos:start="917:17" pos:end="917:18">==</operator> <literal type="number" pos:start="917:20" pos:end="917:20">3</literal></expr>)</condition> <block pos:start="917:23" pos:end="931:9">{<block_content pos:start="919:13" pos:end="929:41">

            <expr_stmt pos:start="919:13" pos:end="919:27"><expr pos:start="919:13" pos:end="919:26"><name pos:start="919:13" pos:end="919:14">rm</name> <operator pos:start="919:16" pos:end="919:16">=</operator> <name pos:start="919:18" pos:end="919:22">modrm</name> <operator pos:start="919:24" pos:end="919:24">&amp;</operator> <literal type="number" pos:start="919:26" pos:end="919:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="921:13" pos:end="921:44"><expr pos:start="921:13" pos:end="921:43"><name pos:start="921:13" pos:end="921:41"><name pos:start="921:13" pos:end="921:29">gen_op_mov_TN_reg</name><index pos:start="921:30" pos:end="921:33">[<expr pos:start="921:31" pos:end="921:32"><name pos:start="921:31" pos:end="921:32">ot</name></expr>]</index><index pos:start="921:34" pos:end="921:36">[<expr pos:start="921:35" pos:end="921:35"><literal type="number" pos:start="921:35" pos:end="921:35">0</literal></expr>]</index><index pos:start="921:37" pos:end="921:41">[<expr pos:start="921:38" pos:end="921:40"><name pos:start="921:38" pos:end="921:40">reg</name></expr>]</index></name><operator pos:start="921:42" pos:end="921:42">(</operator><operator pos:start="921:43" pos:end="921:43">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="923:13" pos:end="923:43"><expr pos:start="923:13" pos:end="923:42"><name pos:start="923:13" pos:end="923:40"><name pos:start="923:13" pos:end="923:29">gen_op_mov_TN_reg</name><index pos:start="923:30" pos:end="923:33">[<expr pos:start="923:31" pos:end="923:32"><name pos:start="923:31" pos:end="923:32">ot</name></expr>]</index><index pos:start="923:34" pos:end="923:36">[<expr pos:start="923:35" pos:end="923:35"><literal type="number" pos:start="923:35" pos:end="923:35">1</literal></expr>]</index><index pos:start="923:37" pos:end="923:40">[<expr pos:start="923:38" pos:end="923:39"><name pos:start="923:38" pos:end="923:39">rm</name></expr>]</index></name><operator pos:start="923:41" pos:end="923:41">(</operator><operator pos:start="923:42" pos:end="923:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="925:13" pos:end="925:35"><expr pos:start="925:13" pos:end="925:34"><call pos:start="925:13" pos:end="925:34"><name pos:start="925:13" pos:end="925:32">gen_op_addl_T0_T1_cc</name><argument_list pos:start="925:33" pos:end="925:34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="927:13" pos:end="927:40"><expr pos:start="927:13" pos:end="927:39"><name pos:start="927:13" pos:end="927:37"><name pos:start="927:13" pos:end="927:29">gen_op_mov_reg_T0</name><index pos:start="927:30" pos:end="927:33">[<expr pos:start="927:31" pos:end="927:32"><name pos:start="927:31" pos:end="927:32">ot</name></expr>]</index><index pos:start="927:34" pos:end="927:37">[<expr pos:start="927:35" pos:end="927:36"><name pos:start="927:35" pos:end="927:36">rm</name></expr>]</index></name><operator pos:start="927:38" pos:end="927:38">(</operator><operator pos:start="927:39" pos:end="927:39">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="929:13" pos:end="929:41"><expr pos:start="929:13" pos:end="929:40"><name pos:start="929:13" pos:end="929:38"><name pos:start="929:13" pos:end="929:29">gen_op_mov_reg_T1</name><index pos:start="929:30" pos:end="929:33">[<expr pos:start="929:31" pos:end="929:32"><name pos:start="929:31" pos:end="929:32">ot</name></expr>]</index><index pos:start="929:34" pos:end="929:38">[<expr pos:start="929:35" pos:end="929:37"><name pos:start="929:35" pos:end="929:37">reg</name></expr>]</index></name><operator pos:start="929:39" pos:end="929:39">(</operator><operator pos:start="929:40" pos:end="929:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="931:11" pos:end="945:9">else <block pos:start="931:16" pos:end="945:9">{<block_content pos:start="933:13" pos:end="943:41">

            <expr_stmt pos:start="933:13" pos:end="933:61"><expr pos:start="933:13" pos:end="933:60"><call pos:start="933:13" pos:end="933:60"><name pos:start="933:13" pos:end="933:25">gen_lea_modrm</name><argument_list pos:start="933:26" pos:end="933:60">(<argument pos:start="933:27" pos:end="933:27"><expr pos:start="933:27" pos:end="933:27"><name pos:start="933:27" pos:end="933:27">s</name></expr></argument>, <argument pos:start="933:30" pos:end="933:34"><expr pos:start="933:30" pos:end="933:34"><name pos:start="933:30" pos:end="933:34">modrm</name></expr></argument>, <argument pos:start="933:37" pos:end="933:45"><expr pos:start="933:37" pos:end="933:45"><operator pos:start="933:37" pos:end="933:37">&amp;</operator><name pos:start="933:38" pos:end="933:45">reg_addr</name></expr></argument>, <argument pos:start="933:48" pos:end="933:59"><expr pos:start="933:48" pos:end="933:59"><operator pos:start="933:48" pos:end="933:48">&amp;</operator><name pos:start="933:49" pos:end="933:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="935:13" pos:end="935:44"><expr pos:start="935:13" pos:end="935:43"><name pos:start="935:13" pos:end="935:41"><name pos:start="935:13" pos:end="935:29">gen_op_mov_TN_reg</name><index pos:start="935:30" pos:end="935:33">[<expr pos:start="935:31" pos:end="935:32"><name pos:start="935:31" pos:end="935:32">ot</name></expr>]</index><index pos:start="935:34" pos:end="935:36">[<expr pos:start="935:35" pos:end="935:35"><literal type="number" pos:start="935:35" pos:end="935:35">0</literal></expr>]</index><index pos:start="935:37" pos:end="935:41">[<expr pos:start="935:38" pos:end="935:40"><name pos:start="935:38" pos:end="935:40">reg</name></expr>]</index></name><operator pos:start="935:42" pos:end="935:42">(</operator><operator pos:start="935:43" pos:end="935:43">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="937:13" pos:end="937:34"><expr pos:start="937:13" pos:end="937:33"><name pos:start="937:13" pos:end="937:31"><name pos:start="937:13" pos:end="937:27">gen_op_ld_T1_A0</name><index pos:start="937:28" pos:end="937:31">[<expr pos:start="937:29" pos:end="937:30"><name pos:start="937:29" pos:end="937:30">ot</name></expr>]</index></name><operator pos:start="937:32" pos:end="937:32">(</operator><operator pos:start="937:33" pos:end="937:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="939:13" pos:end="939:35"><expr pos:start="939:13" pos:end="939:34"><call pos:start="939:13" pos:end="939:34"><name pos:start="939:13" pos:end="939:32">gen_op_addl_T0_T1_cc</name><argument_list pos:start="939:33" pos:end="939:34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="941:13" pos:end="941:34"><expr pos:start="941:13" pos:end="941:33"><name pos:start="941:13" pos:end="941:31"><name pos:start="941:13" pos:end="941:27">gen_op_st_T0_A0</name><index pos:start="941:28" pos:end="941:31">[<expr pos:start="941:29" pos:end="941:30"><name pos:start="941:29" pos:end="941:30">ot</name></expr>]</index></name><operator pos:start="941:32" pos:end="941:32">(</operator><operator pos:start="941:33" pos:end="941:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="943:13" pos:end="943:41"><expr pos:start="943:13" pos:end="943:40"><name pos:start="943:13" pos:end="943:38"><name pos:start="943:13" pos:end="943:29">gen_op_mov_reg_T1</name><index pos:start="943:30" pos:end="943:33">[<expr pos:start="943:31" pos:end="943:32"><name pos:start="943:31" pos:end="943:32">ot</name></expr>]</index><index pos:start="943:34" pos:end="943:38">[<expr pos:start="943:35" pos:end="943:37"><name pos:start="943:35" pos:end="943:37">reg</name></expr>]</index></name><operator pos:start="943:39" pos:end="943:39">(</operator><operator pos:start="943:40" pos:end="943:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="947:9" pos:end="947:35"><expr pos:start="947:9" pos:end="947:34"><name pos:start="947:9" pos:end="947:16"><name pos:start="947:9" pos:end="947:9">s</name><operator pos:start="947:10" pos:end="947:11">-&gt;</operator><name pos:start="947:12" pos:end="947:16">cc_op</name></name> <operator pos:start="947:18" pos:end="947:18">=</operator> <name pos:start="947:20" pos:end="947:29">CC_OP_ADDB</name> <operator pos:start="947:31" pos:end="947:31">+</operator> <name pos:start="947:33" pos:end="947:34">ot</name></expr>;</expr_stmt>

        <break pos:start="949:9" pos:end="949:14">break;</break>

    <case pos:start="951:5" pos:end="951:15">case <expr pos:start="951:10" pos:end="951:14"><literal type="number" pos:start="951:10" pos:end="951:14">0x1b0</literal></expr>:</case>

    <case pos:start="953:5" pos:end="953:15">case <expr pos:start="953:10" pos:end="953:14"><literal type="number" pos:start="953:10" pos:end="953:14">0x1b1</literal></expr>:</case> <comment type="block" pos:start="953:17" pos:end="953:36">/* cmpxchg Ev, Gv */</comment>

        <if_stmt pos:start="955:9" pos:end="961:43"><if pos:start="955:9" pos:end="957:25">if <condition pos:start="955:12" pos:end="955:25">(<expr pos:start="955:13" pos:end="955:24"><operator pos:start="955:13" pos:end="955:13">(</operator><name pos:start="955:14" pos:end="955:14">b</name> <operator pos:start="955:16" pos:end="955:16">&amp;</operator> <literal type="number" pos:start="955:18" pos:end="955:18">1</literal><operator pos:start="955:19" pos:end="955:19">)</operator> <operator pos:start="955:21" pos:end="955:22">==</operator> <literal type="number" pos:start="955:24" pos:end="955:24">0</literal></expr>)</condition><block type="pseudo" pos:start="957:13" pos:end="957:25"><block_content pos:start="957:13" pos:end="957:25">

            <expr_stmt pos:start="957:13" pos:end="957:25"><expr pos:start="957:13" pos:end="957:24"><name pos:start="957:13" pos:end="957:14">ot</name> <operator pos:start="957:16" pos:end="957:16">=</operator> <name pos:start="957:18" pos:end="957:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="959:9" pos:end="961:43">else<block type="pseudo" pos:start="961:13" pos:end="961:43"><block_content pos:start="961:13" pos:end="961:43">

            <expr_stmt pos:start="961:13" pos:end="961:43"><expr pos:start="961:13" pos:end="961:42"><name pos:start="961:13" pos:end="961:14">ot</name> <operator pos:start="961:16" pos:end="961:16">=</operator> <ternary pos:start="961:18" pos:end="961:42"><condition pos:start="961:18" pos:end="961:24"><expr pos:start="961:18" pos:end="961:22"><name pos:start="961:18" pos:end="961:22">dflag</name></expr> ?</condition><then pos:start="961:26" pos:end="961:32"> <expr pos:start="961:26" pos:end="961:32"><name pos:start="961:26" pos:end="961:32">OT_LONG</name></expr> </then><else pos:start="961:34" pos:end="961:42">: <expr pos:start="961:36" pos:end="961:42"><name pos:start="961:36" pos:end="961:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="963:9" pos:end="963:30"><expr pos:start="963:9" pos:end="963:29"><name pos:start="963:9" pos:end="963:13">modrm</name> <operator pos:start="963:15" pos:end="963:15">=</operator> <call pos:start="963:17" pos:end="963:29"><name pos:start="963:17" pos:end="963:20">ldub</name><argument_list pos:start="963:21" pos:end="963:29">(<argument pos:start="963:22" pos:end="963:28"><expr pos:start="963:22" pos:end="963:28"><name pos:start="963:22" pos:end="963:26"><name pos:start="963:22" pos:end="963:22">s</name><operator pos:start="963:23" pos:end="963:24">-&gt;</operator><name pos:start="963:25" pos:end="963:26">pc</name></name><operator pos:start="963:27" pos:end="963:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="965:9" pos:end="965:31"><expr pos:start="965:9" pos:end="965:30"><name pos:start="965:9" pos:end="965:11">reg</name> <operator pos:start="965:13" pos:end="965:13">=</operator> <operator pos:start="965:15" pos:end="965:15">(</operator><name pos:start="965:16" pos:end="965:20">modrm</name> <operator pos:start="965:22" pos:end="965:23">&gt;&gt;</operator> <literal type="number" pos:start="965:25" pos:end="965:25">3</literal><operator pos:start="965:26" pos:end="965:26">)</operator> <operator pos:start="965:28" pos:end="965:28">&amp;</operator> <literal type="number" pos:start="965:30" pos:end="965:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="967:9" pos:end="967:31"><expr pos:start="967:9" pos:end="967:30"><name pos:start="967:9" pos:end="967:11">mod</name> <operator pos:start="967:13" pos:end="967:13">=</operator> <operator pos:start="967:15" pos:end="967:15">(</operator><name pos:start="967:16" pos:end="967:20">modrm</name> <operator pos:start="967:22" pos:end="967:23">&gt;&gt;</operator> <literal type="number" pos:start="967:25" pos:end="967:25">6</literal><operator pos:start="967:26" pos:end="967:26">)</operator> <operator pos:start="967:28" pos:end="967:28">&amp;</operator> <literal type="number" pos:start="967:30" pos:end="967:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="969:9" pos:end="969:40"><expr pos:start="969:9" pos:end="969:39"><name pos:start="969:9" pos:end="969:37"><name pos:start="969:9" pos:end="969:25">gen_op_mov_TN_reg</name><index pos:start="969:26" pos:end="969:29">[<expr pos:start="969:27" pos:end="969:28"><name pos:start="969:27" pos:end="969:28">ot</name></expr>]</index><index pos:start="969:30" pos:end="969:32">[<expr pos:start="969:31" pos:end="969:31"><literal type="number" pos:start="969:31" pos:end="969:31">1</literal></expr>]</index><index pos:start="969:33" pos:end="969:37">[<expr pos:start="969:34" pos:end="969:36"><name pos:start="969:34" pos:end="969:36">reg</name></expr>]</index></name><operator pos:start="969:38" pos:end="969:38">(</operator><operator pos:start="969:39" pos:end="969:39">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="971:9" pos:end="991:9"><if pos:start="971:9" pos:end="981:9">if <condition pos:start="971:12" pos:end="971:21">(<expr pos:start="971:13" pos:end="971:20"><name pos:start="971:13" pos:end="971:15">mod</name> <operator pos:start="971:17" pos:end="971:18">==</operator> <literal type="number" pos:start="971:20" pos:end="971:20">3</literal></expr>)</condition> <block pos:start="971:23" pos:end="981:9">{<block_content pos:start="973:13" pos:end="979:40">

            <expr_stmt pos:start="973:13" pos:end="973:27"><expr pos:start="973:13" pos:end="973:26"><name pos:start="973:13" pos:end="973:14">rm</name> <operator pos:start="973:16" pos:end="973:16">=</operator> <name pos:start="973:18" pos:end="973:22">modrm</name> <operator pos:start="973:24" pos:end="973:24">&amp;</operator> <literal type="number" pos:start="973:26" pos:end="973:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="975:13" pos:end="975:43"><expr pos:start="975:13" pos:end="975:42"><name pos:start="975:13" pos:end="975:40"><name pos:start="975:13" pos:end="975:29">gen_op_mov_TN_reg</name><index pos:start="975:30" pos:end="975:33">[<expr pos:start="975:31" pos:end="975:32"><name pos:start="975:31" pos:end="975:32">ot</name></expr>]</index><index pos:start="975:34" pos:end="975:36">[<expr pos:start="975:35" pos:end="975:35"><literal type="number" pos:start="975:35" pos:end="975:35">0</literal></expr>]</index><index pos:start="975:37" pos:end="975:40">[<expr pos:start="975:38" pos:end="975:39"><name pos:start="975:38" pos:end="975:39">rm</name></expr>]</index></name><operator pos:start="975:41" pos:end="975:41">(</operator><operator pos:start="975:42" pos:end="975:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="977:13" pos:end="977:46"><expr pos:start="977:13" pos:end="977:45"><name pos:start="977:13" pos:end="977:43"><name pos:start="977:13" pos:end="977:39">gen_op_cmpxchg_T0_T1_EAX_cc</name><index pos:start="977:40" pos:end="977:43">[<expr pos:start="977:41" pos:end="977:42"><name pos:start="977:41" pos:end="977:42">ot</name></expr>]</index></name><operator pos:start="977:44" pos:end="977:44">(</operator><operator pos:start="977:45" pos:end="977:45">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="979:13" pos:end="979:40"><expr pos:start="979:13" pos:end="979:39"><name pos:start="979:13" pos:end="979:37"><name pos:start="979:13" pos:end="979:29">gen_op_mov_reg_T0</name><index pos:start="979:30" pos:end="979:33">[<expr pos:start="979:31" pos:end="979:32"><name pos:start="979:31" pos:end="979:32">ot</name></expr>]</index><index pos:start="979:34" pos:end="979:37">[<expr pos:start="979:35" pos:end="979:36"><name pos:start="979:35" pos:end="979:36">rm</name></expr>]</index></name><operator pos:start="979:38" pos:end="979:38">(</operator><operator pos:start="979:39" pos:end="979:39">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="981:11" pos:end="991:9">else <block pos:start="981:16" pos:end="991:9">{<block_content pos:start="983:13" pos:end="989:34">

            <expr_stmt pos:start="983:13" pos:end="983:61"><expr pos:start="983:13" pos:end="983:60"><call pos:start="983:13" pos:end="983:60"><name pos:start="983:13" pos:end="983:25">gen_lea_modrm</name><argument_list pos:start="983:26" pos:end="983:60">(<argument pos:start="983:27" pos:end="983:27"><expr pos:start="983:27" pos:end="983:27"><name pos:start="983:27" pos:end="983:27">s</name></expr></argument>, <argument pos:start="983:30" pos:end="983:34"><expr pos:start="983:30" pos:end="983:34"><name pos:start="983:30" pos:end="983:34">modrm</name></expr></argument>, <argument pos:start="983:37" pos:end="983:45"><expr pos:start="983:37" pos:end="983:45"><operator pos:start="983:37" pos:end="983:37">&amp;</operator><name pos:start="983:38" pos:end="983:45">reg_addr</name></expr></argument>, <argument pos:start="983:48" pos:end="983:59"><expr pos:start="983:48" pos:end="983:59"><operator pos:start="983:48" pos:end="983:48">&amp;</operator><name pos:start="983:49" pos:end="983:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="985:13" pos:end="985:34"><expr pos:start="985:13" pos:end="985:33"><name pos:start="985:13" pos:end="985:31"><name pos:start="985:13" pos:end="985:27">gen_op_ld_T0_A0</name><index pos:start="985:28" pos:end="985:31">[<expr pos:start="985:29" pos:end="985:30"><name pos:start="985:29" pos:end="985:30">ot</name></expr>]</index></name><operator pos:start="985:32" pos:end="985:32">(</operator><operator pos:start="985:33" pos:end="985:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="987:13" pos:end="987:46"><expr pos:start="987:13" pos:end="987:45"><name pos:start="987:13" pos:end="987:43"><name pos:start="987:13" pos:end="987:39">gen_op_cmpxchg_T0_T1_EAX_cc</name><index pos:start="987:40" pos:end="987:43">[<expr pos:start="987:41" pos:end="987:42"><name pos:start="987:41" pos:end="987:42">ot</name></expr>]</index></name><operator pos:start="987:44" pos:end="987:44">(</operator><operator pos:start="987:45" pos:end="987:45">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="989:13" pos:end="989:34"><expr pos:start="989:13" pos:end="989:33"><name pos:start="989:13" pos:end="989:31"><name pos:start="989:13" pos:end="989:27">gen_op_st_T0_A0</name><index pos:start="989:28" pos:end="989:31">[<expr pos:start="989:29" pos:end="989:30"><name pos:start="989:29" pos:end="989:30">ot</name></expr>]</index></name><operator pos:start="989:32" pos:end="989:32">(</operator><operator pos:start="989:33" pos:end="989:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="993:9" pos:end="993:35"><expr pos:start="993:9" pos:end="993:34"><name pos:start="993:9" pos:end="993:16"><name pos:start="993:9" pos:end="993:9">s</name><operator pos:start="993:10" pos:end="993:11">-&gt;</operator><name pos:start="993:12" pos:end="993:16">cc_op</name></name> <operator pos:start="993:18" pos:end="993:18">=</operator> <name pos:start="993:20" pos:end="993:29">CC_OP_SUBB</name> <operator pos:start="993:31" pos:end="993:31">+</operator> <name pos:start="993:33" pos:end="993:34">ot</name></expr>;</expr_stmt>

        <break pos:start="995:9" pos:end="995:14">break;</break>

    <case pos:start="997:5" pos:end="997:15">case <expr pos:start="997:10" pos:end="997:14"><literal type="number" pos:start="997:10" pos:end="997:14">0x1c7</literal></expr>:</case> <comment type="block" pos:start="997:17" pos:end="997:31">/* cmpxchg8b */</comment>

        <expr_stmt pos:start="999:9" pos:end="999:30"><expr pos:start="999:9" pos:end="999:29"><name pos:start="999:9" pos:end="999:13">modrm</name> <operator pos:start="999:15" pos:end="999:15">=</operator> <call pos:start="999:17" pos:end="999:29"><name pos:start="999:17" pos:end="999:20">ldub</name><argument_list pos:start="999:21" pos:end="999:29">(<argument pos:start="999:22" pos:end="999:28"><expr pos:start="999:22" pos:end="999:28"><name pos:start="999:22" pos:end="999:26"><name pos:start="999:22" pos:end="999:22">s</name><operator pos:start="999:23" pos:end="999:24">-&gt;</operator><name pos:start="999:25" pos:end="999:26">pc</name></name><operator pos:start="999:27" pos:end="999:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1001:9" pos:end="1001:31"><expr pos:start="1001:9" pos:end="1001:30"><name pos:start="1001:9" pos:end="1001:11">mod</name> <operator pos:start="1001:13" pos:end="1001:13">=</operator> <operator pos:start="1001:15" pos:end="1001:15">(</operator><name pos:start="1001:16" pos:end="1001:20">modrm</name> <operator pos:start="1001:22" pos:end="1001:23">&gt;&gt;</operator> <literal type="number" pos:start="1001:25" pos:end="1001:25">6</literal><operator pos:start="1001:26" pos:end="1001:26">)</operator> <operator pos:start="1001:28" pos:end="1001:28">&amp;</operator> <literal type="number" pos:start="1001:30" pos:end="1001:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1003:9" pos:end="1005:28"><if pos:start="1003:9" pos:end="1005:28">if <condition pos:start="1003:12" pos:end="1003:21">(<expr pos:start="1003:13" pos:end="1003:20"><name pos:start="1003:13" pos:end="1003:15">mod</name> <operator pos:start="1003:17" pos:end="1003:18">==</operator> <literal type="number" pos:start="1003:20" pos:end="1003:20">3</literal></expr>)</condition><block type="pseudo" pos:start="1005:13" pos:end="1005:28"><block_content pos:start="1005:13" pos:end="1005:28">

            <goto pos:start="1005:13" pos:end="1005:28">goto <name pos:start="1005:18" pos:end="1005:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="1007:9" pos:end="1009:39"><if pos:start="1007:9" pos:end="1009:39">if <condition pos:start="1007:12" pos:end="1007:38">(<expr pos:start="1007:13" pos:end="1007:37"><name pos:start="1007:13" pos:end="1007:20"><name pos:start="1007:13" pos:end="1007:13">s</name><operator pos:start="1007:14" pos:end="1007:15">-&gt;</operator><name pos:start="1007:16" pos:end="1007:20">cc_op</name></name> <operator pos:start="1007:22" pos:end="1007:23">!=</operator> <name pos:start="1007:25" pos:end="1007:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1009:13" pos:end="1009:39"><block_content pos:start="1009:13" pos:end="1009:39">

            <expr_stmt pos:start="1009:13" pos:end="1009:39"><expr pos:start="1009:13" pos:end="1009:38"><call pos:start="1009:13" pos:end="1009:38"><name pos:start="1009:13" pos:end="1009:28">gen_op_set_cc_op</name><argument_list pos:start="1009:29" pos:end="1009:38">(<argument pos:start="1009:30" pos:end="1009:37"><expr pos:start="1009:30" pos:end="1009:37"><name pos:start="1009:30" pos:end="1009:37"><name pos:start="1009:30" pos:end="1009:30">s</name><operator pos:start="1009:31" pos:end="1009:32">-&gt;</operator><name pos:start="1009:33" pos:end="1009:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1011:9" pos:end="1011:57"><expr pos:start="1011:9" pos:end="1011:56"><call pos:start="1011:9" pos:end="1011:56"><name pos:start="1011:9" pos:end="1011:21">gen_lea_modrm</name><argument_list pos:start="1011:22" pos:end="1011:56">(<argument pos:start="1011:23" pos:end="1011:23"><expr pos:start="1011:23" pos:end="1011:23"><name pos:start="1011:23" pos:end="1011:23">s</name></expr></argument>, <argument pos:start="1011:26" pos:end="1011:30"><expr pos:start="1011:26" pos:end="1011:30"><name pos:start="1011:26" pos:end="1011:30">modrm</name></expr></argument>, <argument pos:start="1011:33" pos:end="1011:41"><expr pos:start="1011:33" pos:end="1011:41"><operator pos:start="1011:33" pos:end="1011:33">&amp;</operator><name pos:start="1011:34" pos:end="1011:41">reg_addr</name></expr></argument>, <argument pos:start="1011:44" pos:end="1011:55"><expr pos:start="1011:44" pos:end="1011:55"><operator pos:start="1011:44" pos:end="1011:44">&amp;</operator><name pos:start="1011:45" pos:end="1011:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1013:9" pos:end="1013:27"><expr pos:start="1013:9" pos:end="1013:26"><call pos:start="1013:9" pos:end="1013:26"><name pos:start="1013:9" pos:end="1013:24">gen_op_cmpxchg8b</name><argument_list pos:start="1013:25" pos:end="1013:26">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1015:9" pos:end="1015:32"><expr pos:start="1015:9" pos:end="1015:31"><name pos:start="1015:9" pos:end="1015:16"><name pos:start="1015:9" pos:end="1015:9">s</name><operator pos:start="1015:10" pos:end="1015:11">-&gt;</operator><name pos:start="1015:12" pos:end="1015:16">cc_op</name></name> <operator pos:start="1015:18" pos:end="1015:18">=</operator> <name pos:start="1015:20" pos:end="1015:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="1017:9" pos:end="1017:14">break;</break>

        

        <comment type="block" format="doxygen" pos:start="1021:9" pos:end="1021:36">/**************************/</comment>

        <comment type="block" pos:start="1023:9" pos:end="1023:22">/* push/pop */</comment>

    <case pos:start="1025:5" pos:end="1025:23">case <expr pos:start="1025:10" pos:end="1025:22"><literal type="number" pos:start="1025:10" pos:end="1025:13">0x50</literal> <operator pos:start="1025:15" pos:end="1025:17">...</operator> <literal type="number" pos:start="1025:19" pos:end="1025:22">0x57</literal></expr>:</case> <comment type="block" pos:start="1025:25" pos:end="1025:34">/* push */</comment>

        <expr_stmt pos:start="1027:9" pos:end="1027:47"><expr pos:start="1027:9" pos:end="1027:46"><name pos:start="1027:9" pos:end="1027:44"><name pos:start="1027:9" pos:end="1027:25">gen_op_mov_TN_reg</name><index pos:start="1027:26" pos:end="1027:34">[<expr pos:start="1027:27" pos:end="1027:33"><name pos:start="1027:27" pos:end="1027:33">OT_LONG</name></expr>]</index><index pos:start="1027:35" pos:end="1027:37">[<expr pos:start="1027:36" pos:end="1027:36"><literal type="number" pos:start="1027:36" pos:end="1027:36">0</literal></expr>]</index><index pos:start="1027:38" pos:end="1027:44">[<expr pos:start="1027:39" pos:end="1027:43"><name pos:start="1027:39" pos:end="1027:39">b</name> <operator pos:start="1027:41" pos:end="1027:41">&amp;</operator> <literal type="number" pos:start="1027:43" pos:end="1027:43">7</literal></expr>]</index></name><operator pos:start="1027:45" pos:end="1027:45">(</operator><operator pos:start="1027:46" pos:end="1027:46">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1029:9" pos:end="1029:23"><expr pos:start="1029:9" pos:end="1029:22"><call pos:start="1029:9" pos:end="1029:22"><name pos:start="1029:9" pos:end="1029:19">gen_push_T0</name><argument_list pos:start="1029:20" pos:end="1029:22">(<argument pos:start="1029:21" pos:end="1029:21"><expr pos:start="1029:21" pos:end="1029:21"><name pos:start="1029:21" pos:end="1029:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1031:9" pos:end="1031:14">break;</break>

    <case pos:start="1033:5" pos:end="1033:23">case <expr pos:start="1033:10" pos:end="1033:22"><literal type="number" pos:start="1033:10" pos:end="1033:13">0x58</literal> <operator pos:start="1033:15" pos:end="1033:17">...</operator> <literal type="number" pos:start="1033:19" pos:end="1033:22">0x5f</literal></expr>:</case> <comment type="block" pos:start="1033:25" pos:end="1033:33">/* pop */</comment>

        <expr_stmt pos:start="1035:9" pos:end="1035:39"><expr pos:start="1035:9" pos:end="1035:38"><name pos:start="1035:9" pos:end="1035:10">ot</name> <operator pos:start="1035:12" pos:end="1035:12">=</operator> <ternary pos:start="1035:14" pos:end="1035:38"><condition pos:start="1035:14" pos:end="1035:20"><expr pos:start="1035:14" pos:end="1035:18"><name pos:start="1035:14" pos:end="1035:18">dflag</name></expr> ?</condition><then pos:start="1035:22" pos:end="1035:28"> <expr pos:start="1035:22" pos:end="1035:28"><name pos:start="1035:22" pos:end="1035:28">OT_LONG</name></expr> </then><else pos:start="1035:30" pos:end="1035:38">: <expr pos:start="1035:32" pos:end="1035:38"><name pos:start="1035:32" pos:end="1035:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1037:9" pos:end="1037:22"><expr pos:start="1037:9" pos:end="1037:21"><call pos:start="1037:9" pos:end="1037:21"><name pos:start="1037:9" pos:end="1037:18">gen_pop_T0</name><argument_list pos:start="1037:19" pos:end="1037:21">(<argument pos:start="1037:20" pos:end="1037:20"><expr pos:start="1037:20" pos:end="1037:20"><name pos:start="1037:20" pos:end="1037:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1039:9" pos:end="1039:39"><expr pos:start="1039:9" pos:end="1039:38"><name pos:start="1039:9" pos:end="1039:36"><name pos:start="1039:9" pos:end="1039:25">gen_op_mov_reg_T0</name><index pos:start="1039:26" pos:end="1039:29">[<expr pos:start="1039:27" pos:end="1039:28"><name pos:start="1039:27" pos:end="1039:28">ot</name></expr>]</index><index pos:start="1039:30" pos:end="1039:36">[<expr pos:start="1039:31" pos:end="1039:35"><name pos:start="1039:31" pos:end="1039:31">b</name> <operator pos:start="1039:33" pos:end="1039:33">&amp;</operator> <literal type="number" pos:start="1039:35" pos:end="1039:35">7</literal></expr>]</index></name><operator pos:start="1039:37" pos:end="1039:37">(</operator><operator pos:start="1039:38" pos:end="1039:38">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1041:9" pos:end="1041:26"><expr pos:start="1041:9" pos:end="1041:25"><call pos:start="1041:9" pos:end="1041:25"><name pos:start="1041:9" pos:end="1041:22">gen_pop_update</name><argument_list pos:start="1041:23" pos:end="1041:25">(<argument pos:start="1041:24" pos:end="1041:24"><expr pos:start="1041:24" pos:end="1041:24"><name pos:start="1041:24" pos:end="1041:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1043:9" pos:end="1043:14">break;</break>

    <case pos:start="1045:5" pos:end="1045:14">case <expr pos:start="1045:10" pos:end="1045:13"><literal type="number" pos:start="1045:10" pos:end="1045:13">0x60</literal></expr>:</case> <comment type="block" pos:start="1045:16" pos:end="1045:26">/* pusha */</comment>

        <expr_stmt pos:start="1047:9" pos:end="1047:21"><expr pos:start="1047:9" pos:end="1047:20"><call pos:start="1047:9" pos:end="1047:20"><name pos:start="1047:9" pos:end="1047:17">gen_pusha</name><argument_list pos:start="1047:18" pos:end="1047:20">(<argument pos:start="1047:19" pos:end="1047:19"><expr pos:start="1047:19" pos:end="1047:19"><name pos:start="1047:19" pos:end="1047:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1049:9" pos:end="1049:14">break;</break>

    <case pos:start="1051:5" pos:end="1051:14">case <expr pos:start="1051:10" pos:end="1051:13"><literal type="number" pos:start="1051:10" pos:end="1051:13">0x61</literal></expr>:</case> <comment type="block" pos:start="1051:16" pos:end="1051:25">/* popa */</comment>

        <expr_stmt pos:start="1053:9" pos:end="1053:20"><expr pos:start="1053:9" pos:end="1053:19"><call pos:start="1053:9" pos:end="1053:19"><name pos:start="1053:9" pos:end="1053:16">gen_popa</name><argument_list pos:start="1053:17" pos:end="1053:19">(<argument pos:start="1053:18" pos:end="1053:18"><expr pos:start="1053:18" pos:end="1053:18"><name pos:start="1053:18" pos:end="1053:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1055:9" pos:end="1055:14">break;</break>

    <case pos:start="1057:5" pos:end="1057:14">case <expr pos:start="1057:10" pos:end="1057:13"><literal type="number" pos:start="1057:10" pos:end="1057:13">0x68</literal></expr>:</case> <comment type="block" pos:start="1057:16" pos:end="1057:28">/* push Iv */</comment>

    <case pos:start="1059:5" pos:end="1059:14">case <expr pos:start="1059:10" pos:end="1059:13"><literal type="number" pos:start="1059:10" pos:end="1059:13">0x6a</literal></expr>:</case>

        <expr_stmt pos:start="1061:9" pos:end="1061:39"><expr pos:start="1061:9" pos:end="1061:38"><name pos:start="1061:9" pos:end="1061:10">ot</name> <operator pos:start="1061:12" pos:end="1061:12">=</operator> <ternary pos:start="1061:14" pos:end="1061:38"><condition pos:start="1061:14" pos:end="1061:20"><expr pos:start="1061:14" pos:end="1061:18"><name pos:start="1061:14" pos:end="1061:18">dflag</name></expr> ?</condition><then pos:start="1061:22" pos:end="1061:28"> <expr pos:start="1061:22" pos:end="1061:28"><name pos:start="1061:22" pos:end="1061:28">OT_LONG</name></expr> </then><else pos:start="1061:30" pos:end="1061:38">: <expr pos:start="1061:32" pos:end="1061:38"><name pos:start="1061:32" pos:end="1061:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="1063:9" pos:end="1069:47"><if pos:start="1063:9" pos:end="1065:34">if <condition pos:start="1063:12" pos:end="1063:22">(<expr pos:start="1063:13" pos:end="1063:21"><name pos:start="1063:13" pos:end="1063:13">b</name> <operator pos:start="1063:15" pos:end="1063:16">==</operator> <literal type="number" pos:start="1063:18" pos:end="1063:21">0x68</literal></expr>)</condition><block type="pseudo" pos:start="1065:13" pos:end="1065:34"><block_content pos:start="1065:13" pos:end="1065:34">

            <expr_stmt pos:start="1065:13" pos:end="1065:34"><expr pos:start="1065:13" pos:end="1065:33"><name pos:start="1065:13" pos:end="1065:15">val</name> <operator pos:start="1065:17" pos:end="1065:17">=</operator> <call pos:start="1065:19" pos:end="1065:33"><name pos:start="1065:19" pos:end="1065:26">insn_get</name><argument_list pos:start="1065:27" pos:end="1065:33">(<argument pos:start="1065:28" pos:end="1065:28"><expr pos:start="1065:28" pos:end="1065:28"><name pos:start="1065:28" pos:end="1065:28">s</name></expr></argument>, <argument pos:start="1065:31" pos:end="1065:32"><expr pos:start="1065:31" pos:end="1065:32"><name pos:start="1065:31" pos:end="1065:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1067:9" pos:end="1069:47">else<block type="pseudo" pos:start="1069:13" pos:end="1069:47"><block_content pos:start="1069:13" pos:end="1069:47">

            <expr_stmt pos:start="1069:13" pos:end="1069:47"><expr pos:start="1069:13" pos:end="1069:46"><name pos:start="1069:13" pos:end="1069:15">val</name> <operator pos:start="1069:17" pos:end="1069:17">=</operator> <operator pos:start="1069:19" pos:end="1069:19">(</operator><name pos:start="1069:20" pos:end="1069:25">int8_t</name><operator pos:start="1069:26" pos:end="1069:26">)</operator><call pos:start="1069:27" pos:end="1069:46"><name pos:start="1069:27" pos:end="1069:34">insn_get</name><argument_list pos:start="1069:35" pos:end="1069:46">(<argument pos:start="1069:36" pos:end="1069:36"><expr pos:start="1069:36" pos:end="1069:36"><name pos:start="1069:36" pos:end="1069:36">s</name></expr></argument>, <argument pos:start="1069:39" pos:end="1069:45"><expr pos:start="1069:39" pos:end="1069:45"><name pos:start="1069:39" pos:end="1069:45">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1071:9" pos:end="1071:31"><expr pos:start="1071:9" pos:end="1071:30"><call pos:start="1071:9" pos:end="1071:30"><name pos:start="1071:9" pos:end="1071:25">gen_op_movl_T0_im</name><argument_list pos:start="1071:26" pos:end="1071:30">(<argument pos:start="1071:27" pos:end="1071:29"><expr pos:start="1071:27" pos:end="1071:29"><name pos:start="1071:27" pos:end="1071:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1073:9" pos:end="1073:23"><expr pos:start="1073:9" pos:end="1073:22"><call pos:start="1073:9" pos:end="1073:22"><name pos:start="1073:9" pos:end="1073:19">gen_push_T0</name><argument_list pos:start="1073:20" pos:end="1073:22">(<argument pos:start="1073:21" pos:end="1073:21"><expr pos:start="1073:21" pos:end="1073:21"><name pos:start="1073:21" pos:end="1073:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1075:9" pos:end="1075:14">break;</break>

    <case pos:start="1077:5" pos:end="1077:14">case <expr pos:start="1077:10" pos:end="1077:13"><literal type="number" pos:start="1077:10" pos:end="1077:13">0x8f</literal></expr>:</case> <comment type="block" pos:start="1077:16" pos:end="1077:27">/* pop Ev */</comment>

        <expr_stmt pos:start="1079:9" pos:end="1079:39"><expr pos:start="1079:9" pos:end="1079:38"><name pos:start="1079:9" pos:end="1079:10">ot</name> <operator pos:start="1079:12" pos:end="1079:12">=</operator> <ternary pos:start="1079:14" pos:end="1079:38"><condition pos:start="1079:14" pos:end="1079:20"><expr pos:start="1079:14" pos:end="1079:18"><name pos:start="1079:14" pos:end="1079:18">dflag</name></expr> ?</condition><then pos:start="1079:22" pos:end="1079:28"> <expr pos:start="1079:22" pos:end="1079:28"><name pos:start="1079:22" pos:end="1079:28">OT_LONG</name></expr> </then><else pos:start="1079:30" pos:end="1079:38">: <expr pos:start="1079:32" pos:end="1079:38"><name pos:start="1079:32" pos:end="1079:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1081:9" pos:end="1081:30"><expr pos:start="1081:9" pos:end="1081:29"><name pos:start="1081:9" pos:end="1081:13">modrm</name> <operator pos:start="1081:15" pos:end="1081:15">=</operator> <call pos:start="1081:17" pos:end="1081:29"><name pos:start="1081:17" pos:end="1081:20">ldub</name><argument_list pos:start="1081:21" pos:end="1081:29">(<argument pos:start="1081:22" pos:end="1081:28"><expr pos:start="1081:22" pos:end="1081:28"><name pos:start="1081:22" pos:end="1081:26"><name pos:start="1081:22" pos:end="1081:22">s</name><operator pos:start="1081:23" pos:end="1081:24">-&gt;</operator><name pos:start="1081:25" pos:end="1081:26">pc</name></name><operator pos:start="1081:27" pos:end="1081:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1083:9" pos:end="1083:22"><expr pos:start="1083:9" pos:end="1083:21"><call pos:start="1083:9" pos:end="1083:21"><name pos:start="1083:9" pos:end="1083:18">gen_pop_T0</name><argument_list pos:start="1083:19" pos:end="1083:21">(<argument pos:start="1083:20" pos:end="1083:20"><expr pos:start="1083:20" pos:end="1083:20"><name pos:start="1083:20" pos:end="1083:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1085:9" pos:end="1085:49"><expr pos:start="1085:9" pos:end="1085:48"><call pos:start="1085:9" pos:end="1085:48"><name pos:start="1085:9" pos:end="1085:22">gen_ldst_modrm</name><argument_list pos:start="1085:23" pos:end="1085:48">(<argument pos:start="1085:24" pos:end="1085:24"><expr pos:start="1085:24" pos:end="1085:24"><name pos:start="1085:24" pos:end="1085:24">s</name></expr></argument>, <argument pos:start="1085:27" pos:end="1085:31"><expr pos:start="1085:27" pos:end="1085:31"><name pos:start="1085:27" pos:end="1085:31">modrm</name></expr></argument>, <argument pos:start="1085:34" pos:end="1085:35"><expr pos:start="1085:34" pos:end="1085:35"><name pos:start="1085:34" pos:end="1085:35">ot</name></expr></argument>, <argument pos:start="1085:38" pos:end="1085:44"><expr pos:start="1085:38" pos:end="1085:44"><name pos:start="1085:38" pos:end="1085:44">OR_TMP0</name></expr></argument>, <argument pos:start="1085:47" pos:end="1085:47"><expr pos:start="1085:47" pos:end="1085:47"><literal type="number" pos:start="1085:47" pos:end="1085:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1087:9" pos:end="1087:26"><expr pos:start="1087:9" pos:end="1087:25"><call pos:start="1087:9" pos:end="1087:25"><name pos:start="1087:9" pos:end="1087:22">gen_pop_update</name><argument_list pos:start="1087:23" pos:end="1087:25">(<argument pos:start="1087:24" pos:end="1087:24"><expr pos:start="1087:24" pos:end="1087:24"><name pos:start="1087:24" pos:end="1087:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1089:9" pos:end="1089:14">break;</break>

    <case pos:start="1091:5" pos:end="1091:14">case <expr pos:start="1091:10" pos:end="1091:13"><literal type="number" pos:start="1091:10" pos:end="1091:13">0xc8</literal></expr>:</case> <comment type="block" pos:start="1091:16" pos:end="1091:26">/* enter */</comment>

        <block pos:start="1093:9" pos:end="1105:9">{<block_content pos:start="1095:13" pos:end="1103:37">

            <decl_stmt pos:start="1095:13" pos:end="1095:22"><decl pos:start="1095:13" pos:end="1095:21"><type pos:start="1095:13" pos:end="1095:15"><name pos:start="1095:13" pos:end="1095:15">int</name></type> <name pos:start="1095:17" pos:end="1095:21">level</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1097:13" pos:end="1097:30"><expr pos:start="1097:13" pos:end="1097:29"><name pos:start="1097:13" pos:end="1097:15">val</name> <operator pos:start="1097:17" pos:end="1097:17">=</operator> <call pos:start="1097:19" pos:end="1097:29"><name pos:start="1097:19" pos:end="1097:22">lduw</name><argument_list pos:start="1097:23" pos:end="1097:29">(<argument pos:start="1097:24" pos:end="1097:28"><expr pos:start="1097:24" pos:end="1097:28"><name pos:start="1097:24" pos:end="1097:28"><name pos:start="1097:24" pos:end="1097:24">s</name><operator pos:start="1097:25" pos:end="1097:26">-&gt;</operator><name pos:start="1097:27" pos:end="1097:28">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1099:13" pos:end="1099:23"><expr pos:start="1099:13" pos:end="1099:22"><name pos:start="1099:13" pos:end="1099:17"><name pos:start="1099:13" pos:end="1099:13">s</name><operator pos:start="1099:14" pos:end="1099:15">-&gt;</operator><name pos:start="1099:16" pos:end="1099:17">pc</name></name> <operator pos:start="1099:19" pos:end="1099:20">+=</operator> <literal type="number" pos:start="1099:22" pos:end="1099:22">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1101:13" pos:end="1101:34"><expr pos:start="1101:13" pos:end="1101:33"><name pos:start="1101:13" pos:end="1101:17">level</name> <operator pos:start="1101:19" pos:end="1101:19">=</operator> <call pos:start="1101:21" pos:end="1101:33"><name pos:start="1101:21" pos:end="1101:24">ldub</name><argument_list pos:start="1101:25" pos:end="1101:33">(<argument pos:start="1101:26" pos:end="1101:32"><expr pos:start="1101:26" pos:end="1101:32"><name pos:start="1101:26" pos:end="1101:30"><name pos:start="1101:26" pos:end="1101:26">s</name><operator pos:start="1101:27" pos:end="1101:28">-&gt;</operator><name pos:start="1101:29" pos:end="1101:30">pc</name></name><operator pos:start="1101:31" pos:end="1101:32">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1103:13" pos:end="1103:37"><expr pos:start="1103:13" pos:end="1103:36"><call pos:start="1103:13" pos:end="1103:36"><name pos:start="1103:13" pos:end="1103:21">gen_enter</name><argument_list pos:start="1103:22" pos:end="1103:36">(<argument pos:start="1103:23" pos:end="1103:23"><expr pos:start="1103:23" pos:end="1103:23"><name pos:start="1103:23" pos:end="1103:23">s</name></expr></argument>, <argument pos:start="1103:26" pos:end="1103:28"><expr pos:start="1103:26" pos:end="1103:28"><name pos:start="1103:26" pos:end="1103:28">val</name></expr></argument>, <argument pos:start="1103:31" pos:end="1103:35"><expr pos:start="1103:31" pos:end="1103:35"><name pos:start="1103:31" pos:end="1103:35">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1107:9" pos:end="1107:14">break;</break>

    <case pos:start="1109:5" pos:end="1109:14">case <expr pos:start="1109:10" pos:end="1109:13"><literal type="number" pos:start="1109:10" pos:end="1109:13">0xc9</literal></expr>:</case> <comment type="block" pos:start="1109:16" pos:end="1109:26">/* leave */</comment>

        <comment type="block" pos:start="1111:9" pos:end="1111:83">/* XXX: exception not precise (ESP is update before potential exception) */</comment>

        <if_stmt pos:start="1113:9" pos:end="1125:9"><if pos:start="1113:9" pos:end="1119:9">if <condition pos:start="1113:12" pos:end="1113:20">(<expr pos:start="1113:13" pos:end="1113:19"><name pos:start="1113:13" pos:end="1113:19"><name pos:start="1113:13" pos:end="1113:13">s</name><operator pos:start="1113:14" pos:end="1113:15">-&gt;</operator><name pos:start="1113:16" pos:end="1113:19">ss32</name></name></expr>)</condition> <block pos:start="1113:22" pos:end="1119:9">{<block_content pos:start="1115:13" pos:end="1117:48">

            <expr_stmt pos:start="1115:13" pos:end="1115:51"><expr pos:start="1115:13" pos:end="1115:50"><name pos:start="1115:13" pos:end="1115:48"><name pos:start="1115:13" pos:end="1115:29">gen_op_mov_TN_reg</name><index pos:start="1115:30" pos:end="1115:38">[<expr pos:start="1115:31" pos:end="1115:37"><name pos:start="1115:31" pos:end="1115:37">OT_LONG</name></expr>]</index><index pos:start="1115:39" pos:end="1115:41">[<expr pos:start="1115:40" pos:end="1115:40"><literal type="number" pos:start="1115:40" pos:end="1115:40">0</literal></expr>]</index><index pos:start="1115:42" pos:end="1115:48">[<expr pos:start="1115:43" pos:end="1115:47"><name pos:start="1115:43" pos:end="1115:47">R_EBP</name></expr>]</index></name><operator pos:start="1115:49" pos:end="1115:49">(</operator><operator pos:start="1115:50" pos:end="1115:50">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1117:13" pos:end="1117:48"><expr pos:start="1117:13" pos:end="1117:47"><name pos:start="1117:13" pos:end="1117:45"><name pos:start="1117:13" pos:end="1117:29">gen_op_mov_reg_T0</name><index pos:start="1117:30" pos:end="1117:38">[<expr pos:start="1117:31" pos:end="1117:37"><name pos:start="1117:31" pos:end="1117:37">OT_LONG</name></expr>]</index><index pos:start="1117:39" pos:end="1117:45">[<expr pos:start="1117:40" pos:end="1117:44"><name pos:start="1117:40" pos:end="1117:44">R_ESP</name></expr>]</index></name><operator pos:start="1117:46" pos:end="1117:46">(</operator><operator pos:start="1117:47" pos:end="1117:47">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1119:11" pos:end="1125:9">else <block pos:start="1119:16" pos:end="1125:9">{<block_content pos:start="1121:13" pos:end="1123:48">

            <expr_stmt pos:start="1121:13" pos:end="1121:51"><expr pos:start="1121:13" pos:end="1121:50"><name pos:start="1121:13" pos:end="1121:48"><name pos:start="1121:13" pos:end="1121:29">gen_op_mov_TN_reg</name><index pos:start="1121:30" pos:end="1121:38">[<expr pos:start="1121:31" pos:end="1121:37"><name pos:start="1121:31" pos:end="1121:37">OT_WORD</name></expr>]</index><index pos:start="1121:39" pos:end="1121:41">[<expr pos:start="1121:40" pos:end="1121:40"><literal type="number" pos:start="1121:40" pos:end="1121:40">0</literal></expr>]</index><index pos:start="1121:42" pos:end="1121:48">[<expr pos:start="1121:43" pos:end="1121:47"><name pos:start="1121:43" pos:end="1121:47">R_EBP</name></expr>]</index></name><operator pos:start="1121:49" pos:end="1121:49">(</operator><operator pos:start="1121:50" pos:end="1121:50">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1123:13" pos:end="1123:48"><expr pos:start="1123:13" pos:end="1123:47"><name pos:start="1123:13" pos:end="1123:45"><name pos:start="1123:13" pos:end="1123:29">gen_op_mov_reg_T0</name><index pos:start="1123:30" pos:end="1123:38">[<expr pos:start="1123:31" pos:end="1123:37"><name pos:start="1123:31" pos:end="1123:37">OT_WORD</name></expr>]</index><index pos:start="1123:39" pos:end="1123:45">[<expr pos:start="1123:40" pos:end="1123:44"><name pos:start="1123:40" pos:end="1123:44">R_ESP</name></expr>]</index></name><operator pos:start="1123:46" pos:end="1123:46">(</operator><operator pos:start="1123:47" pos:end="1123:47">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1127:9" pos:end="1127:22"><expr pos:start="1127:9" pos:end="1127:21"><call pos:start="1127:9" pos:end="1127:21"><name pos:start="1127:9" pos:end="1127:18">gen_pop_T0</name><argument_list pos:start="1127:19" pos:end="1127:21">(<argument pos:start="1127:20" pos:end="1127:20"><expr pos:start="1127:20" pos:end="1127:20"><name pos:start="1127:20" pos:end="1127:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1129:9" pos:end="1129:39"><expr pos:start="1129:9" pos:end="1129:38"><name pos:start="1129:9" pos:end="1129:10">ot</name> <operator pos:start="1129:12" pos:end="1129:12">=</operator> <ternary pos:start="1129:14" pos:end="1129:38"><condition pos:start="1129:14" pos:end="1129:20"><expr pos:start="1129:14" pos:end="1129:18"><name pos:start="1129:14" pos:end="1129:18">dflag</name></expr> ?</condition><then pos:start="1129:22" pos:end="1129:28"> <expr pos:start="1129:22" pos:end="1129:28"><name pos:start="1129:22" pos:end="1129:28">OT_LONG</name></expr> </then><else pos:start="1129:30" pos:end="1129:38">: <expr pos:start="1129:32" pos:end="1129:38"><name pos:start="1129:32" pos:end="1129:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1131:9" pos:end="1131:39"><expr pos:start="1131:9" pos:end="1131:38"><name pos:start="1131:9" pos:end="1131:36"><name pos:start="1131:9" pos:end="1131:25">gen_op_mov_reg_T0</name><index pos:start="1131:26" pos:end="1131:29">[<expr pos:start="1131:27" pos:end="1131:28"><name pos:start="1131:27" pos:end="1131:28">ot</name></expr>]</index><index pos:start="1131:30" pos:end="1131:36">[<expr pos:start="1131:31" pos:end="1131:35"><name pos:start="1131:31" pos:end="1131:35">R_EBP</name></expr>]</index></name><operator pos:start="1131:37" pos:end="1131:37">(</operator><operator pos:start="1131:38" pos:end="1131:38">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1133:9" pos:end="1133:26"><expr pos:start="1133:9" pos:end="1133:25"><call pos:start="1133:9" pos:end="1133:25"><name pos:start="1133:9" pos:end="1133:22">gen_pop_update</name><argument_list pos:start="1133:23" pos:end="1133:25">(<argument pos:start="1133:24" pos:end="1133:24"><expr pos:start="1133:24" pos:end="1133:24"><name pos:start="1133:24" pos:end="1133:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1135:9" pos:end="1135:14">break;</break>

    <case pos:start="1137:5" pos:end="1137:14">case <expr pos:start="1137:10" pos:end="1137:13"><literal type="number" pos:start="1137:10" pos:end="1137:13">0x06</literal></expr>:</case> <comment type="block" pos:start="1137:16" pos:end="1137:28">/* push es */</comment>

    <case pos:start="1139:5" pos:end="1139:14">case <expr pos:start="1139:10" pos:end="1139:13"><literal type="number" pos:start="1139:10" pos:end="1139:13">0x0e</literal></expr>:</case> <comment type="block" pos:start="1139:16" pos:end="1139:28">/* push cs */</comment>

    <case pos:start="1141:5" pos:end="1141:14">case <expr pos:start="1141:10" pos:end="1141:13"><literal type="number" pos:start="1141:10" pos:end="1141:13">0x16</literal></expr>:</case> <comment type="block" pos:start="1141:16" pos:end="1141:28">/* push ss */</comment>

    <case pos:start="1143:5" pos:end="1143:14">case <expr pos:start="1143:10" pos:end="1143:13"><literal type="number" pos:start="1143:10" pos:end="1143:13">0x1e</literal></expr>:</case> <comment type="block" pos:start="1143:16" pos:end="1143:28">/* push ds */</comment>

        <expr_stmt pos:start="1145:9" pos:end="1145:35"><expr pos:start="1145:9" pos:end="1145:34"><call pos:start="1145:9" pos:end="1145:34"><name pos:start="1145:9" pos:end="1145:26">gen_op_movl_T0_seg</name><argument_list pos:start="1145:27" pos:end="1145:34">(<argument pos:start="1145:28" pos:end="1145:33"><expr pos:start="1145:28" pos:end="1145:33"><name pos:start="1145:28" pos:end="1145:28">b</name> <operator pos:start="1145:30" pos:end="1145:31">&gt;&gt;</operator> <literal type="number" pos:start="1145:33" pos:end="1145:33">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1147:9" pos:end="1147:23"><expr pos:start="1147:9" pos:end="1147:22"><call pos:start="1147:9" pos:end="1147:22"><name pos:start="1147:9" pos:end="1147:19">gen_push_T0</name><argument_list pos:start="1147:20" pos:end="1147:22">(<argument pos:start="1147:21" pos:end="1147:21"><expr pos:start="1147:21" pos:end="1147:21"><name pos:start="1147:21" pos:end="1147:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1149:9" pos:end="1149:14">break;</break>

    <case pos:start="1151:5" pos:end="1151:15">case <expr pos:start="1151:10" pos:end="1151:14"><literal type="number" pos:start="1151:10" pos:end="1151:14">0x1a0</literal></expr>:</case> <comment type="block" pos:start="1151:17" pos:end="1151:29">/* push fs */</comment>

    <case pos:start="1153:5" pos:end="1153:15">case <expr pos:start="1153:10" pos:end="1153:14"><literal type="number" pos:start="1153:10" pos:end="1153:14">0x1a8</literal></expr>:</case> <comment type="block" pos:start="1153:17" pos:end="1153:29">/* push gs */</comment>

        <expr_stmt pos:start="1155:9" pos:end="1155:41"><expr pos:start="1155:9" pos:end="1155:40"><call pos:start="1155:9" pos:end="1155:40"><name pos:start="1155:9" pos:end="1155:26">gen_op_movl_T0_seg</name><argument_list pos:start="1155:27" pos:end="1155:40">(<argument pos:start="1155:28" pos:end="1155:39"><expr pos:start="1155:28" pos:end="1155:39"><operator pos:start="1155:28" pos:end="1155:28">(</operator><name pos:start="1155:29" pos:end="1155:29">b</name> <operator pos:start="1155:31" pos:end="1155:32">&gt;&gt;</operator> <literal type="number" pos:start="1155:34" pos:end="1155:34">3</literal><operator pos:start="1155:35" pos:end="1155:35">)</operator> <operator pos:start="1155:37" pos:end="1155:37">&amp;</operator> <literal type="number" pos:start="1155:39" pos:end="1155:39">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1157:9" pos:end="1157:23"><expr pos:start="1157:9" pos:end="1157:22"><call pos:start="1157:9" pos:end="1157:22"><name pos:start="1157:9" pos:end="1157:19">gen_push_T0</name><argument_list pos:start="1157:20" pos:end="1157:22">(<argument pos:start="1157:21" pos:end="1157:21"><expr pos:start="1157:21" pos:end="1157:21"><name pos:start="1157:21" pos:end="1157:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1159:9" pos:end="1159:14">break;</break>

    <case pos:start="1161:5" pos:end="1161:14">case <expr pos:start="1161:10" pos:end="1161:13"><literal type="number" pos:start="1161:10" pos:end="1161:13">0x07</literal></expr>:</case> <comment type="block" pos:start="1161:16" pos:end="1161:27">/* pop es */</comment>

    <case pos:start="1163:5" pos:end="1163:14">case <expr pos:start="1163:10" pos:end="1163:13"><literal type="number" pos:start="1163:10" pos:end="1163:13">0x17</literal></expr>:</case> <comment type="block" pos:start="1163:16" pos:end="1163:27">/* pop ss */</comment>

    <case pos:start="1165:5" pos:end="1165:14">case <expr pos:start="1165:10" pos:end="1165:13"><literal type="number" pos:start="1165:10" pos:end="1165:13">0x1f</literal></expr>:</case> <comment type="block" pos:start="1165:16" pos:end="1165:27">/* pop ds */</comment>

        <expr_stmt pos:start="1167:9" pos:end="1167:22"><expr pos:start="1167:9" pos:end="1167:21"><call pos:start="1167:9" pos:end="1167:21"><name pos:start="1167:9" pos:end="1167:18">gen_pop_T0</name><argument_list pos:start="1167:19" pos:end="1167:21">(<argument pos:start="1167:20" pos:end="1167:20"><expr pos:start="1167:20" pos:end="1167:20"><name pos:start="1167:20" pos:end="1167:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1169:9" pos:end="1169:35"><expr pos:start="1169:9" pos:end="1169:34"><call pos:start="1169:9" pos:end="1169:34"><name pos:start="1169:9" pos:end="1169:23">gen_movl_seg_T0</name><argument_list pos:start="1169:24" pos:end="1169:34">(<argument pos:start="1169:25" pos:end="1169:25"><expr pos:start="1169:25" pos:end="1169:25"><name pos:start="1169:25" pos:end="1169:25">s</name></expr></argument>, <argument pos:start="1169:28" pos:end="1169:33"><expr pos:start="1169:28" pos:end="1169:33"><name pos:start="1169:28" pos:end="1169:28">b</name> <operator pos:start="1169:30" pos:end="1169:31">&gt;&gt;</operator> <literal type="number" pos:start="1169:33" pos:end="1169:33">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1171:9" pos:end="1171:26"><expr pos:start="1171:9" pos:end="1171:25"><call pos:start="1171:9" pos:end="1171:25"><name pos:start="1171:9" pos:end="1171:22">gen_pop_update</name><argument_list pos:start="1171:23" pos:end="1171:25">(<argument pos:start="1171:24" pos:end="1171:24"><expr pos:start="1171:24" pos:end="1171:24"><name pos:start="1171:24" pos:end="1171:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1173:9" pos:end="1173:14">break;</break>

    <case pos:start="1175:5" pos:end="1175:15">case <expr pos:start="1175:10" pos:end="1175:14"><literal type="number" pos:start="1175:10" pos:end="1175:14">0x1a1</literal></expr>:</case> <comment type="block" pos:start="1175:17" pos:end="1175:28">/* pop fs */</comment>

    <case pos:start="1177:5" pos:end="1177:15">case <expr pos:start="1177:10" pos:end="1177:14"><literal type="number" pos:start="1177:10" pos:end="1177:14">0x1a9</literal></expr>:</case> <comment type="block" pos:start="1177:17" pos:end="1177:28">/* pop gs */</comment>

        <expr_stmt pos:start="1179:9" pos:end="1179:22"><expr pos:start="1179:9" pos:end="1179:21"><call pos:start="1179:9" pos:end="1179:21"><name pos:start="1179:9" pos:end="1179:18">gen_pop_T0</name><argument_list pos:start="1179:19" pos:end="1179:21">(<argument pos:start="1179:20" pos:end="1179:20"><expr pos:start="1179:20" pos:end="1179:20"><name pos:start="1179:20" pos:end="1179:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1181:9" pos:end="1181:41"><expr pos:start="1181:9" pos:end="1181:40"><call pos:start="1181:9" pos:end="1181:40"><name pos:start="1181:9" pos:end="1181:23">gen_movl_seg_T0</name><argument_list pos:start="1181:24" pos:end="1181:40">(<argument pos:start="1181:25" pos:end="1181:25"><expr pos:start="1181:25" pos:end="1181:25"><name pos:start="1181:25" pos:end="1181:25">s</name></expr></argument>, <argument pos:start="1181:28" pos:end="1181:39"><expr pos:start="1181:28" pos:end="1181:39"><operator pos:start="1181:28" pos:end="1181:28">(</operator><name pos:start="1181:29" pos:end="1181:29">b</name> <operator pos:start="1181:31" pos:end="1181:32">&gt;&gt;</operator> <literal type="number" pos:start="1181:34" pos:end="1181:34">3</literal><operator pos:start="1181:35" pos:end="1181:35">)</operator> <operator pos:start="1181:37" pos:end="1181:37">&amp;</operator> <literal type="number" pos:start="1181:39" pos:end="1181:39">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1183:9" pos:end="1183:26"><expr pos:start="1183:9" pos:end="1183:25"><call pos:start="1183:9" pos:end="1183:25"><name pos:start="1183:9" pos:end="1183:22">gen_pop_update</name><argument_list pos:start="1183:23" pos:end="1183:25">(<argument pos:start="1183:24" pos:end="1183:24"><expr pos:start="1183:24" pos:end="1183:24"><name pos:start="1183:24" pos:end="1183:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1185:9" pos:end="1185:14">break;</break>



        <comment type="block" format="doxygen" pos:start="1189:9" pos:end="1189:36">/**************************/</comment>

        <comment type="block" pos:start="1191:9" pos:end="1191:17">/* mov */</comment>

    <case pos:start="1193:5" pos:end="1193:14">case <expr pos:start="1193:10" pos:end="1193:13"><literal type="number" pos:start="1193:10" pos:end="1193:13">0x88</literal></expr>:</case>

    <case pos:start="1195:5" pos:end="1195:14">case <expr pos:start="1195:10" pos:end="1195:13"><literal type="number" pos:start="1195:10" pos:end="1195:13">0x89</literal></expr>:</case> <comment type="block" pos:start="1195:16" pos:end="1195:31">/* mov Gv, Ev */</comment>

        <if_stmt pos:start="1197:9" pos:end="1203:43"><if pos:start="1197:9" pos:end="1199:25">if <condition pos:start="1197:12" pos:end="1197:25">(<expr pos:start="1197:13" pos:end="1197:24"><operator pos:start="1197:13" pos:end="1197:13">(</operator><name pos:start="1197:14" pos:end="1197:14">b</name> <operator pos:start="1197:16" pos:end="1197:16">&amp;</operator> <literal type="number" pos:start="1197:18" pos:end="1197:18">1</literal><operator pos:start="1197:19" pos:end="1197:19">)</operator> <operator pos:start="1197:21" pos:end="1197:22">==</operator> <literal type="number" pos:start="1197:24" pos:end="1197:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1199:13" pos:end="1199:25"><block_content pos:start="1199:13" pos:end="1199:25">

            <expr_stmt pos:start="1199:13" pos:end="1199:25"><expr pos:start="1199:13" pos:end="1199:24"><name pos:start="1199:13" pos:end="1199:14">ot</name> <operator pos:start="1199:16" pos:end="1199:16">=</operator> <name pos:start="1199:18" pos:end="1199:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1201:9" pos:end="1203:43">else<block type="pseudo" pos:start="1203:13" pos:end="1203:43"><block_content pos:start="1203:13" pos:end="1203:43">

            <expr_stmt pos:start="1203:13" pos:end="1203:43"><expr pos:start="1203:13" pos:end="1203:42"><name pos:start="1203:13" pos:end="1203:14">ot</name> <operator pos:start="1203:16" pos:end="1203:16">=</operator> <ternary pos:start="1203:18" pos:end="1203:42"><condition pos:start="1203:18" pos:end="1203:24"><expr pos:start="1203:18" pos:end="1203:22"><name pos:start="1203:18" pos:end="1203:22">dflag</name></expr> ?</condition><then pos:start="1203:26" pos:end="1203:32"> <expr pos:start="1203:26" pos:end="1203:32"><name pos:start="1203:26" pos:end="1203:32">OT_LONG</name></expr> </then><else pos:start="1203:34" pos:end="1203:42">: <expr pos:start="1203:36" pos:end="1203:42"><name pos:start="1203:36" pos:end="1203:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1205:9" pos:end="1205:30"><expr pos:start="1205:9" pos:end="1205:29"><name pos:start="1205:9" pos:end="1205:13">modrm</name> <operator pos:start="1205:15" pos:end="1205:15">=</operator> <call pos:start="1205:17" pos:end="1205:29"><name pos:start="1205:17" pos:end="1205:20">ldub</name><argument_list pos:start="1205:21" pos:end="1205:29">(<argument pos:start="1205:22" pos:end="1205:28"><expr pos:start="1205:22" pos:end="1205:28"><name pos:start="1205:22" pos:end="1205:26"><name pos:start="1205:22" pos:end="1205:22">s</name><operator pos:start="1205:23" pos:end="1205:24">-&gt;</operator><name pos:start="1205:25" pos:end="1205:26">pc</name></name><operator pos:start="1205:27" pos:end="1205:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1207:9" pos:end="1207:31"><expr pos:start="1207:9" pos:end="1207:30"><name pos:start="1207:9" pos:end="1207:11">reg</name> <operator pos:start="1207:13" pos:end="1207:13">=</operator> <operator pos:start="1207:15" pos:end="1207:15">(</operator><name pos:start="1207:16" pos:end="1207:20">modrm</name> <operator pos:start="1207:22" pos:end="1207:23">&gt;&gt;</operator> <literal type="number" pos:start="1207:25" pos:end="1207:25">3</literal><operator pos:start="1207:26" pos:end="1207:26">)</operator> <operator pos:start="1207:28" pos:end="1207:28">&amp;</operator> <literal type="number" pos:start="1207:30" pos:end="1207:30">7</literal></expr>;</expr_stmt>

        

        <comment type="block" pos:start="1211:9" pos:end="1211:38">/* generate a generic store */</comment>

        <expr_stmt pos:start="1213:9" pos:end="1213:54"><expr pos:start="1213:9" pos:end="1213:53"><call pos:start="1213:9" pos:end="1213:53"><name pos:start="1213:9" pos:end="1213:22">gen_ldst_modrm</name><argument_list pos:start="1213:23" pos:end="1213:53">(<argument pos:start="1213:24" pos:end="1213:24"><expr pos:start="1213:24" pos:end="1213:24"><name pos:start="1213:24" pos:end="1213:24">s</name></expr></argument>, <argument pos:start="1213:27" pos:end="1213:31"><expr pos:start="1213:27" pos:end="1213:31"><name pos:start="1213:27" pos:end="1213:31">modrm</name></expr></argument>, <argument pos:start="1213:34" pos:end="1213:35"><expr pos:start="1213:34" pos:end="1213:35"><name pos:start="1213:34" pos:end="1213:35">ot</name></expr></argument>, <argument pos:start="1213:38" pos:end="1213:49"><expr pos:start="1213:38" pos:end="1213:49"><name pos:start="1213:38" pos:end="1213:43">OR_EAX</name> <operator pos:start="1213:45" pos:end="1213:45">+</operator> <name pos:start="1213:47" pos:end="1213:49">reg</name></expr></argument>, <argument pos:start="1213:52" pos:end="1213:52"><expr pos:start="1213:52" pos:end="1213:52"><literal type="number" pos:start="1213:52" pos:end="1213:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1215:9" pos:end="1215:14">break;</break>

    <case pos:start="1217:5" pos:end="1217:14">case <expr pos:start="1217:10" pos:end="1217:13"><literal type="number" pos:start="1217:10" pos:end="1217:13">0xc6</literal></expr>:</case>

    <case pos:start="1219:5" pos:end="1219:14">case <expr pos:start="1219:10" pos:end="1219:13"><literal type="number" pos:start="1219:10" pos:end="1219:13">0xc7</literal></expr>:</case> <comment type="block" pos:start="1219:16" pos:end="1219:31">/* mov Ev, Iv */</comment>

        <if_stmt pos:start="1221:9" pos:end="1227:43"><if pos:start="1221:9" pos:end="1223:25">if <condition pos:start="1221:12" pos:end="1221:25">(<expr pos:start="1221:13" pos:end="1221:24"><operator pos:start="1221:13" pos:end="1221:13">(</operator><name pos:start="1221:14" pos:end="1221:14">b</name> <operator pos:start="1221:16" pos:end="1221:16">&amp;</operator> <literal type="number" pos:start="1221:18" pos:end="1221:18">1</literal><operator pos:start="1221:19" pos:end="1221:19">)</operator> <operator pos:start="1221:21" pos:end="1221:22">==</operator> <literal type="number" pos:start="1221:24" pos:end="1221:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1223:13" pos:end="1223:25"><block_content pos:start="1223:13" pos:end="1223:25">

            <expr_stmt pos:start="1223:13" pos:end="1223:25"><expr pos:start="1223:13" pos:end="1223:24"><name pos:start="1223:13" pos:end="1223:14">ot</name> <operator pos:start="1223:16" pos:end="1223:16">=</operator> <name pos:start="1223:18" pos:end="1223:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1225:9" pos:end="1227:43">else<block type="pseudo" pos:start="1227:13" pos:end="1227:43"><block_content pos:start="1227:13" pos:end="1227:43">

            <expr_stmt pos:start="1227:13" pos:end="1227:43"><expr pos:start="1227:13" pos:end="1227:42"><name pos:start="1227:13" pos:end="1227:14">ot</name> <operator pos:start="1227:16" pos:end="1227:16">=</operator> <ternary pos:start="1227:18" pos:end="1227:42"><condition pos:start="1227:18" pos:end="1227:24"><expr pos:start="1227:18" pos:end="1227:22"><name pos:start="1227:18" pos:end="1227:22">dflag</name></expr> ?</condition><then pos:start="1227:26" pos:end="1227:32"> <expr pos:start="1227:26" pos:end="1227:32"><name pos:start="1227:26" pos:end="1227:32">OT_LONG</name></expr> </then><else pos:start="1227:34" pos:end="1227:42">: <expr pos:start="1227:36" pos:end="1227:42"><name pos:start="1227:36" pos:end="1227:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1229:9" pos:end="1229:30"><expr pos:start="1229:9" pos:end="1229:29"><name pos:start="1229:9" pos:end="1229:13">modrm</name> <operator pos:start="1229:15" pos:end="1229:15">=</operator> <call pos:start="1229:17" pos:end="1229:29"><name pos:start="1229:17" pos:end="1229:20">ldub</name><argument_list pos:start="1229:21" pos:end="1229:29">(<argument pos:start="1229:22" pos:end="1229:28"><expr pos:start="1229:22" pos:end="1229:28"><name pos:start="1229:22" pos:end="1229:26"><name pos:start="1229:22" pos:end="1229:22">s</name><operator pos:start="1229:23" pos:end="1229:24">-&gt;</operator><name pos:start="1229:25" pos:end="1229:26">pc</name></name><operator pos:start="1229:27" pos:end="1229:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1231:9" pos:end="1231:31"><expr pos:start="1231:9" pos:end="1231:30"><name pos:start="1231:9" pos:end="1231:11">mod</name> <operator pos:start="1231:13" pos:end="1231:13">=</operator> <operator pos:start="1231:15" pos:end="1231:15">(</operator><name pos:start="1231:16" pos:end="1231:20">modrm</name> <operator pos:start="1231:22" pos:end="1231:23">&gt;&gt;</operator> <literal type="number" pos:start="1231:25" pos:end="1231:25">6</literal><operator pos:start="1231:26" pos:end="1231:26">)</operator> <operator pos:start="1231:28" pos:end="1231:28">&amp;</operator> <literal type="number" pos:start="1231:30" pos:end="1231:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1233:9" pos:end="1235:61"><if pos:start="1233:9" pos:end="1235:61">if <condition pos:start="1233:12" pos:end="1233:21">(<expr pos:start="1233:13" pos:end="1233:20"><name pos:start="1233:13" pos:end="1233:15">mod</name> <operator pos:start="1233:17" pos:end="1233:18">!=</operator> <literal type="number" pos:start="1233:20" pos:end="1233:20">3</literal></expr>)</condition><block type="pseudo" pos:start="1235:13" pos:end="1235:61"><block_content pos:start="1235:13" pos:end="1235:61">

            <expr_stmt pos:start="1235:13" pos:end="1235:61"><expr pos:start="1235:13" pos:end="1235:60"><call pos:start="1235:13" pos:end="1235:60"><name pos:start="1235:13" pos:end="1235:25">gen_lea_modrm</name><argument_list pos:start="1235:26" pos:end="1235:60">(<argument pos:start="1235:27" pos:end="1235:27"><expr pos:start="1235:27" pos:end="1235:27"><name pos:start="1235:27" pos:end="1235:27">s</name></expr></argument>, <argument pos:start="1235:30" pos:end="1235:34"><expr pos:start="1235:30" pos:end="1235:34"><name pos:start="1235:30" pos:end="1235:34">modrm</name></expr></argument>, <argument pos:start="1235:37" pos:end="1235:45"><expr pos:start="1235:37" pos:end="1235:45"><operator pos:start="1235:37" pos:end="1235:37">&amp;</operator><name pos:start="1235:38" pos:end="1235:45">reg_addr</name></expr></argument>, <argument pos:start="1235:48" pos:end="1235:59"><expr pos:start="1235:48" pos:end="1235:59"><operator pos:start="1235:48" pos:end="1235:48">&amp;</operator><name pos:start="1235:49" pos:end="1235:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1237:9" pos:end="1237:30"><expr pos:start="1237:9" pos:end="1237:29"><name pos:start="1237:9" pos:end="1237:11">val</name> <operator pos:start="1237:13" pos:end="1237:13">=</operator> <call pos:start="1237:15" pos:end="1237:29"><name pos:start="1237:15" pos:end="1237:22">insn_get</name><argument_list pos:start="1237:23" pos:end="1237:29">(<argument pos:start="1237:24" pos:end="1237:24"><expr pos:start="1237:24" pos:end="1237:24"><name pos:start="1237:24" pos:end="1237:24">s</name></expr></argument>, <argument pos:start="1237:27" pos:end="1237:28"><expr pos:start="1237:27" pos:end="1237:28"><name pos:start="1237:27" pos:end="1237:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1239:9" pos:end="1239:31"><expr pos:start="1239:9" pos:end="1239:30"><call pos:start="1239:9" pos:end="1239:30"><name pos:start="1239:9" pos:end="1239:25">gen_op_movl_T0_im</name><argument_list pos:start="1239:26" pos:end="1239:30">(<argument pos:start="1239:27" pos:end="1239:29"><expr pos:start="1239:27" pos:end="1239:29"><name pos:start="1239:27" pos:end="1239:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1241:9" pos:end="1247:47"><if pos:start="1241:9" pos:end="1243:34">if <condition pos:start="1241:12" pos:end="1241:21">(<expr pos:start="1241:13" pos:end="1241:20"><name pos:start="1241:13" pos:end="1241:15">mod</name> <operator pos:start="1241:17" pos:end="1241:18">!=</operator> <literal type="number" pos:start="1241:20" pos:end="1241:20">3</literal></expr>)</condition><block type="pseudo" pos:start="1243:13" pos:end="1243:34"><block_content pos:start="1243:13" pos:end="1243:34">

            <expr_stmt pos:start="1243:13" pos:end="1243:34"><expr pos:start="1243:13" pos:end="1243:33"><name pos:start="1243:13" pos:end="1243:31"><name pos:start="1243:13" pos:end="1243:27">gen_op_st_T0_A0</name><index pos:start="1243:28" pos:end="1243:31">[<expr pos:start="1243:29" pos:end="1243:30"><name pos:start="1243:29" pos:end="1243:30">ot</name></expr>]</index></name><operator pos:start="1243:32" pos:end="1243:32">(</operator><operator pos:start="1243:33" pos:end="1243:33">)</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1245:9" pos:end="1247:47">else<block type="pseudo" pos:start="1247:13" pos:end="1247:47"><block_content pos:start="1247:13" pos:end="1247:47">

            <expr_stmt pos:start="1247:13" pos:end="1247:47"><expr pos:start="1247:13" pos:end="1247:46"><name pos:start="1247:13" pos:end="1247:44"><name pos:start="1247:13" pos:end="1247:29">gen_op_mov_reg_T0</name><index pos:start="1247:30" pos:end="1247:33">[<expr pos:start="1247:31" pos:end="1247:32"><name pos:start="1247:31" pos:end="1247:32">ot</name></expr>]</index><index pos:start="1247:34" pos:end="1247:44">[<expr pos:start="1247:35" pos:end="1247:43"><name pos:start="1247:35" pos:end="1247:39">modrm</name> <operator pos:start="1247:41" pos:end="1247:41">&amp;</operator> <literal type="number" pos:start="1247:43" pos:end="1247:43">7</literal></expr>]</index></name><operator pos:start="1247:45" pos:end="1247:45">(</operator><operator pos:start="1247:46" pos:end="1247:46">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="1249:9" pos:end="1249:14">break;</break>

    <case pos:start="1251:5" pos:end="1251:14">case <expr pos:start="1251:10" pos:end="1251:13"><literal type="number" pos:start="1251:10" pos:end="1251:13">0x8a</literal></expr>:</case>

    <case pos:start="1253:5" pos:end="1253:14">case <expr pos:start="1253:10" pos:end="1253:13"><literal type="number" pos:start="1253:10" pos:end="1253:13">0x8b</literal></expr>:</case> <comment type="block" pos:start="1253:16" pos:end="1253:31">/* mov Ev, Gv */</comment>

        <if_stmt pos:start="1255:9" pos:end="1261:43"><if pos:start="1255:9" pos:end="1257:25">if <condition pos:start="1255:12" pos:end="1255:25">(<expr pos:start="1255:13" pos:end="1255:24"><operator pos:start="1255:13" pos:end="1255:13">(</operator><name pos:start="1255:14" pos:end="1255:14">b</name> <operator pos:start="1255:16" pos:end="1255:16">&amp;</operator> <literal type="number" pos:start="1255:18" pos:end="1255:18">1</literal><operator pos:start="1255:19" pos:end="1255:19">)</operator> <operator pos:start="1255:21" pos:end="1255:22">==</operator> <literal type="number" pos:start="1255:24" pos:end="1255:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1257:13" pos:end="1257:25"><block_content pos:start="1257:13" pos:end="1257:25">

            <expr_stmt pos:start="1257:13" pos:end="1257:25"><expr pos:start="1257:13" pos:end="1257:24"><name pos:start="1257:13" pos:end="1257:14">ot</name> <operator pos:start="1257:16" pos:end="1257:16">=</operator> <name pos:start="1257:18" pos:end="1257:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1259:9" pos:end="1261:43">else<block type="pseudo" pos:start="1261:13" pos:end="1261:43"><block_content pos:start="1261:13" pos:end="1261:43">

            <expr_stmt pos:start="1261:13" pos:end="1261:43"><expr pos:start="1261:13" pos:end="1261:42"><name pos:start="1261:13" pos:end="1261:14">ot</name> <operator pos:start="1261:16" pos:end="1261:16">=</operator> <ternary pos:start="1261:18" pos:end="1261:42"><condition pos:start="1261:18" pos:end="1261:24"><expr pos:start="1261:18" pos:end="1261:22"><name pos:start="1261:18" pos:end="1261:22">dflag</name></expr> ?</condition><then pos:start="1261:26" pos:end="1261:32"> <expr pos:start="1261:26" pos:end="1261:32"><name pos:start="1261:26" pos:end="1261:32">OT_LONG</name></expr> </then><else pos:start="1261:34" pos:end="1261:42">: <expr pos:start="1261:36" pos:end="1261:42"><name pos:start="1261:36" pos:end="1261:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1263:9" pos:end="1263:30"><expr pos:start="1263:9" pos:end="1263:29"><name pos:start="1263:9" pos:end="1263:13">modrm</name> <operator pos:start="1263:15" pos:end="1263:15">=</operator> <call pos:start="1263:17" pos:end="1263:29"><name pos:start="1263:17" pos:end="1263:20">ldub</name><argument_list pos:start="1263:21" pos:end="1263:29">(<argument pos:start="1263:22" pos:end="1263:28"><expr pos:start="1263:22" pos:end="1263:28"><name pos:start="1263:22" pos:end="1263:26"><name pos:start="1263:22" pos:end="1263:22">s</name><operator pos:start="1263:23" pos:end="1263:24">-&gt;</operator><name pos:start="1263:25" pos:end="1263:26">pc</name></name><operator pos:start="1263:27" pos:end="1263:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1265:9" pos:end="1265:31"><expr pos:start="1265:9" pos:end="1265:30"><name pos:start="1265:9" pos:end="1265:11">reg</name> <operator pos:start="1265:13" pos:end="1265:13">=</operator> <operator pos:start="1265:15" pos:end="1265:15">(</operator><name pos:start="1265:16" pos:end="1265:20">modrm</name> <operator pos:start="1265:22" pos:end="1265:23">&gt;&gt;</operator> <literal type="number" pos:start="1265:25" pos:end="1265:25">3</literal><operator pos:start="1265:26" pos:end="1265:26">)</operator> <operator pos:start="1265:28" pos:end="1265:28">&amp;</operator> <literal type="number" pos:start="1265:30" pos:end="1265:30">7</literal></expr>;</expr_stmt>

        

        <expr_stmt pos:start="1269:9" pos:end="1269:49"><expr pos:start="1269:9" pos:end="1269:48"><call pos:start="1269:9" pos:end="1269:48"><name pos:start="1269:9" pos:end="1269:22">gen_ldst_modrm</name><argument_list pos:start="1269:23" pos:end="1269:48">(<argument pos:start="1269:24" pos:end="1269:24"><expr pos:start="1269:24" pos:end="1269:24"><name pos:start="1269:24" pos:end="1269:24">s</name></expr></argument>, <argument pos:start="1269:27" pos:end="1269:31"><expr pos:start="1269:27" pos:end="1269:31"><name pos:start="1269:27" pos:end="1269:31">modrm</name></expr></argument>, <argument pos:start="1269:34" pos:end="1269:35"><expr pos:start="1269:34" pos:end="1269:35"><name pos:start="1269:34" pos:end="1269:35">ot</name></expr></argument>, <argument pos:start="1269:38" pos:end="1269:44"><expr pos:start="1269:38" pos:end="1269:44"><name pos:start="1269:38" pos:end="1269:44">OR_TMP0</name></expr></argument>, <argument pos:start="1269:47" pos:end="1269:47"><expr pos:start="1269:47" pos:end="1269:47"><literal type="number" pos:start="1269:47" pos:end="1269:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1271:9" pos:end="1271:37"><expr pos:start="1271:9" pos:end="1271:36"><name pos:start="1271:9" pos:end="1271:34"><name pos:start="1271:9" pos:end="1271:25">gen_op_mov_reg_T0</name><index pos:start="1271:26" pos:end="1271:29">[<expr pos:start="1271:27" pos:end="1271:28"><name pos:start="1271:27" pos:end="1271:28">ot</name></expr>]</index><index pos:start="1271:30" pos:end="1271:34">[<expr pos:start="1271:31" pos:end="1271:33"><name pos:start="1271:31" pos:end="1271:33">reg</name></expr>]</index></name><operator pos:start="1271:35" pos:end="1271:35">(</operator><operator pos:start="1271:36" pos:end="1271:36">)</operator></expr>;</expr_stmt>

        <break pos:start="1273:9" pos:end="1273:14">break;</break>

    <case pos:start="1275:5" pos:end="1275:14">case <expr pos:start="1275:10" pos:end="1275:13"><literal type="number" pos:start="1275:10" pos:end="1275:13">0x8e</literal></expr>:</case> <comment type="block" pos:start="1275:16" pos:end="1275:32">/* mov seg, Gv */</comment>

        <expr_stmt pos:start="1277:9" pos:end="1277:39"><expr pos:start="1277:9" pos:end="1277:38"><name pos:start="1277:9" pos:end="1277:10">ot</name> <operator pos:start="1277:12" pos:end="1277:12">=</operator> <ternary pos:start="1277:14" pos:end="1277:38"><condition pos:start="1277:14" pos:end="1277:20"><expr pos:start="1277:14" pos:end="1277:18"><name pos:start="1277:14" pos:end="1277:18">dflag</name></expr> ?</condition><then pos:start="1277:22" pos:end="1277:28"> <expr pos:start="1277:22" pos:end="1277:28"><name pos:start="1277:22" pos:end="1277:28">OT_LONG</name></expr> </then><else pos:start="1277:30" pos:end="1277:38">: <expr pos:start="1277:32" pos:end="1277:38"><name pos:start="1277:32" pos:end="1277:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1279:9" pos:end="1279:30"><expr pos:start="1279:9" pos:end="1279:29"><name pos:start="1279:9" pos:end="1279:13">modrm</name> <operator pos:start="1279:15" pos:end="1279:15">=</operator> <call pos:start="1279:17" pos:end="1279:29"><name pos:start="1279:17" pos:end="1279:20">ldub</name><argument_list pos:start="1279:21" pos:end="1279:29">(<argument pos:start="1279:22" pos:end="1279:28"><expr pos:start="1279:22" pos:end="1279:28"><name pos:start="1279:22" pos:end="1279:26"><name pos:start="1279:22" pos:end="1279:22">s</name><operator pos:start="1279:23" pos:end="1279:24">-&gt;</operator><name pos:start="1279:25" pos:end="1279:26">pc</name></name><operator pos:start="1279:27" pos:end="1279:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1281:9" pos:end="1281:31"><expr pos:start="1281:9" pos:end="1281:30"><name pos:start="1281:9" pos:end="1281:11">reg</name> <operator pos:start="1281:13" pos:end="1281:13">=</operator> <operator pos:start="1281:15" pos:end="1281:15">(</operator><name pos:start="1281:16" pos:end="1281:20">modrm</name> <operator pos:start="1281:22" pos:end="1281:23">&gt;&gt;</operator> <literal type="number" pos:start="1281:25" pos:end="1281:25">3</literal><operator pos:start="1281:26" pos:end="1281:26">)</operator> <operator pos:start="1281:28" pos:end="1281:28">&amp;</operator> <literal type="number" pos:start="1281:30" pos:end="1281:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1283:9" pos:end="1283:49"><expr pos:start="1283:9" pos:end="1283:48"><call pos:start="1283:9" pos:end="1283:48"><name pos:start="1283:9" pos:end="1283:22">gen_ldst_modrm</name><argument_list pos:start="1283:23" pos:end="1283:48">(<argument pos:start="1283:24" pos:end="1283:24"><expr pos:start="1283:24" pos:end="1283:24"><name pos:start="1283:24" pos:end="1283:24">s</name></expr></argument>, <argument pos:start="1283:27" pos:end="1283:31"><expr pos:start="1283:27" pos:end="1283:31"><name pos:start="1283:27" pos:end="1283:31">modrm</name></expr></argument>, <argument pos:start="1283:34" pos:end="1283:35"><expr pos:start="1283:34" pos:end="1283:35"><name pos:start="1283:34" pos:end="1283:35">ot</name></expr></argument>, <argument pos:start="1283:38" pos:end="1283:44"><expr pos:start="1283:38" pos:end="1283:44"><name pos:start="1283:38" pos:end="1283:44">OR_TMP0</name></expr></argument>, <argument pos:start="1283:47" pos:end="1283:47"><expr pos:start="1283:47" pos:end="1283:47"><literal type="number" pos:start="1283:47" pos:end="1283:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1285:9" pos:end="1287:28"><if pos:start="1285:9" pos:end="1287:28">if <condition pos:start="1285:12" pos:end="1285:36">(<expr pos:start="1285:13" pos:end="1285:35"><name pos:start="1285:13" pos:end="1285:15">reg</name> <operator pos:start="1285:17" pos:end="1285:18">&gt;=</operator> <literal type="number" pos:start="1285:20" pos:end="1285:20">6</literal> <operator pos:start="1285:22" pos:end="1285:23">||</operator> <name pos:start="1285:25" pos:end="1285:27">reg</name> <operator pos:start="1285:29" pos:end="1285:30">==</operator> <name pos:start="1285:32" pos:end="1285:35">R_CS</name></expr>)</condition><block type="pseudo" pos:start="1287:13" pos:end="1287:28"><block_content pos:start="1287:13" pos:end="1287:28">

            <goto pos:start="1287:13" pos:end="1287:28">goto <name pos:start="1287:18" pos:end="1287:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1289:9" pos:end="1289:32"><expr pos:start="1289:9" pos:end="1289:31"><call pos:start="1289:9" pos:end="1289:31"><name pos:start="1289:9" pos:end="1289:23">gen_movl_seg_T0</name><argument_list pos:start="1289:24" pos:end="1289:31">(<argument pos:start="1289:25" pos:end="1289:25"><expr pos:start="1289:25" pos:end="1289:25"><name pos:start="1289:25" pos:end="1289:25">s</name></expr></argument>, <argument pos:start="1289:28" pos:end="1289:30"><expr pos:start="1289:28" pos:end="1289:30"><name pos:start="1289:28" pos:end="1289:30">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1291:9" pos:end="1291:14">break;</break>

    <case pos:start="1293:5" pos:end="1293:14">case <expr pos:start="1293:10" pos:end="1293:13"><literal type="number" pos:start="1293:10" pos:end="1293:13">0x8c</literal></expr>:</case> <comment type="block" pos:start="1293:16" pos:end="1293:32">/* mov Gv, seg */</comment>

        <expr_stmt pos:start="1295:9" pos:end="1295:39"><expr pos:start="1295:9" pos:end="1295:38"><name pos:start="1295:9" pos:end="1295:10">ot</name> <operator pos:start="1295:12" pos:end="1295:12">=</operator> <ternary pos:start="1295:14" pos:end="1295:38"><condition pos:start="1295:14" pos:end="1295:20"><expr pos:start="1295:14" pos:end="1295:18"><name pos:start="1295:14" pos:end="1295:18">dflag</name></expr> ?</condition><then pos:start="1295:22" pos:end="1295:28"> <expr pos:start="1295:22" pos:end="1295:28"><name pos:start="1295:22" pos:end="1295:28">OT_LONG</name></expr> </then><else pos:start="1295:30" pos:end="1295:38">: <expr pos:start="1295:32" pos:end="1295:38"><name pos:start="1295:32" pos:end="1295:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1297:9" pos:end="1297:30"><expr pos:start="1297:9" pos:end="1297:29"><name pos:start="1297:9" pos:end="1297:13">modrm</name> <operator pos:start="1297:15" pos:end="1297:15">=</operator> <call pos:start="1297:17" pos:end="1297:29"><name pos:start="1297:17" pos:end="1297:20">ldub</name><argument_list pos:start="1297:21" pos:end="1297:29">(<argument pos:start="1297:22" pos:end="1297:28"><expr pos:start="1297:22" pos:end="1297:28"><name pos:start="1297:22" pos:end="1297:26"><name pos:start="1297:22" pos:end="1297:22">s</name><operator pos:start="1297:23" pos:end="1297:24">-&gt;</operator><name pos:start="1297:25" pos:end="1297:26">pc</name></name><operator pos:start="1297:27" pos:end="1297:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1299:9" pos:end="1299:31"><expr pos:start="1299:9" pos:end="1299:30"><name pos:start="1299:9" pos:end="1299:11">reg</name> <operator pos:start="1299:13" pos:end="1299:13">=</operator> <operator pos:start="1299:15" pos:end="1299:15">(</operator><name pos:start="1299:16" pos:end="1299:20">modrm</name> <operator pos:start="1299:22" pos:end="1299:23">&gt;&gt;</operator> <literal type="number" pos:start="1299:25" pos:end="1299:25">3</literal><operator pos:start="1299:26" pos:end="1299:26">)</operator> <operator pos:start="1299:28" pos:end="1299:28">&amp;</operator> <literal type="number" pos:start="1299:30" pos:end="1299:30">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1301:9" pos:end="1303:28"><if pos:start="1301:9" pos:end="1303:28">if <condition pos:start="1301:12" pos:end="1301:21">(<expr pos:start="1301:13" pos:end="1301:20"><name pos:start="1301:13" pos:end="1301:15">reg</name> <operator pos:start="1301:17" pos:end="1301:18">&gt;=</operator> <literal type="number" pos:start="1301:20" pos:end="1301:20">6</literal></expr>)</condition><block type="pseudo" pos:start="1303:13" pos:end="1303:28"><block_content pos:start="1303:13" pos:end="1303:28">

            <goto pos:start="1303:13" pos:end="1303:28">goto <name pos:start="1303:18" pos:end="1303:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1305:9" pos:end="1305:32"><expr pos:start="1305:9" pos:end="1305:31"><call pos:start="1305:9" pos:end="1305:31"><name pos:start="1305:9" pos:end="1305:26">gen_op_movl_T0_seg</name><argument_list pos:start="1305:27" pos:end="1305:31">(<argument pos:start="1305:28" pos:end="1305:30"><expr pos:start="1305:28" pos:end="1305:30"><name pos:start="1305:28" pos:end="1305:30">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1307:9" pos:end="1307:49"><expr pos:start="1307:9" pos:end="1307:48"><call pos:start="1307:9" pos:end="1307:48"><name pos:start="1307:9" pos:end="1307:22">gen_ldst_modrm</name><argument_list pos:start="1307:23" pos:end="1307:48">(<argument pos:start="1307:24" pos:end="1307:24"><expr pos:start="1307:24" pos:end="1307:24"><name pos:start="1307:24" pos:end="1307:24">s</name></expr></argument>, <argument pos:start="1307:27" pos:end="1307:31"><expr pos:start="1307:27" pos:end="1307:31"><name pos:start="1307:27" pos:end="1307:31">modrm</name></expr></argument>, <argument pos:start="1307:34" pos:end="1307:35"><expr pos:start="1307:34" pos:end="1307:35"><name pos:start="1307:34" pos:end="1307:35">ot</name></expr></argument>, <argument pos:start="1307:38" pos:end="1307:44"><expr pos:start="1307:38" pos:end="1307:44"><name pos:start="1307:38" pos:end="1307:44">OR_TMP0</name></expr></argument>, <argument pos:start="1307:47" pos:end="1307:47"><expr pos:start="1307:47" pos:end="1307:47"><literal type="number" pos:start="1307:47" pos:end="1307:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1309:9" pos:end="1309:14">break;</break>



    <case pos:start="1313:5" pos:end="1313:15">case <expr pos:start="1313:10" pos:end="1313:14"><literal type="number" pos:start="1313:10" pos:end="1313:14">0x1b6</literal></expr>:</case> <comment type="block" pos:start="1313:17" pos:end="1313:35">/* movzbS Gv, Eb */</comment>

    <case pos:start="1315:5" pos:end="1315:15">case <expr pos:start="1315:10" pos:end="1315:14"><literal type="number" pos:start="1315:10" pos:end="1315:14">0x1b7</literal></expr>:</case> <comment type="block" pos:start="1315:17" pos:end="1315:35">/* movzwS Gv, Eb */</comment>

    <case pos:start="1317:5" pos:end="1317:15">case <expr pos:start="1317:10" pos:end="1317:14"><literal type="number" pos:start="1317:10" pos:end="1317:14">0x1be</literal></expr>:</case> <comment type="block" pos:start="1317:17" pos:end="1317:35">/* movsbS Gv, Eb */</comment>

    <case pos:start="1319:5" pos:end="1319:15">case <expr pos:start="1319:10" pos:end="1319:14"><literal type="number" pos:start="1319:10" pos:end="1319:14">0x1bf</literal></expr>:</case> <comment type="block" pos:start="1319:17" pos:end="1319:35">/* movswS Gv, Eb */</comment>

        <block pos:start="1321:9" pos:end="1397:9">{<block_content pos:start="1323:13" pos:end="1395:13">

            <decl_stmt pos:start="1323:13" pos:end="1323:21"><decl pos:start="1323:13" pos:end="1323:20"><type pos:start="1323:13" pos:end="1323:15"><name pos:start="1323:13" pos:end="1323:15">int</name></type> <name pos:start="1323:17" pos:end="1323:20">d_ot</name></decl>;</decl_stmt>

            <comment type="block" pos:start="1325:13" pos:end="1325:49">/* d_ot is the size of destination */</comment>

            <expr_stmt pos:start="1327:13" pos:end="1327:35"><expr pos:start="1327:13" pos:end="1327:34"><name pos:start="1327:13" pos:end="1327:16">d_ot</name> <operator pos:start="1327:18" pos:end="1327:18">=</operator> <name pos:start="1327:20" pos:end="1327:24">dflag</name> <operator pos:start="1327:26" pos:end="1327:26">+</operator> <name pos:start="1327:28" pos:end="1327:34">OT_WORD</name></expr>;</expr_stmt>

            <comment type="block" pos:start="1329:13" pos:end="1329:42">/* ot is the size of source */</comment>

            <expr_stmt pos:start="1331:13" pos:end="1331:35"><expr pos:start="1331:13" pos:end="1331:34"><name pos:start="1331:13" pos:end="1331:14">ot</name> <operator pos:start="1331:16" pos:end="1331:16">=</operator> <operator pos:start="1331:18" pos:end="1331:18">(</operator><name pos:start="1331:19" pos:end="1331:19">b</name> <operator pos:start="1331:21" pos:end="1331:21">&amp;</operator> <literal type="number" pos:start="1331:23" pos:end="1331:23">1</literal><operator pos:start="1331:24" pos:end="1331:24">)</operator> <operator pos:start="1331:26" pos:end="1331:26">+</operator> <name pos:start="1331:28" pos:end="1331:34">OT_BYTE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1333:13" pos:end="1333:34"><expr pos:start="1333:13" pos:end="1333:33"><name pos:start="1333:13" pos:end="1333:17">modrm</name> <operator pos:start="1333:19" pos:end="1333:19">=</operator> <call pos:start="1333:21" pos:end="1333:33"><name pos:start="1333:21" pos:end="1333:24">ldub</name><argument_list pos:start="1333:25" pos:end="1333:33">(<argument pos:start="1333:26" pos:end="1333:32"><expr pos:start="1333:26" pos:end="1333:32"><name pos:start="1333:26" pos:end="1333:30"><name pos:start="1333:26" pos:end="1333:26">s</name><operator pos:start="1333:27" pos:end="1333:28">-&gt;</operator><name pos:start="1333:29" pos:end="1333:30">pc</name></name><operator pos:start="1333:31" pos:end="1333:32">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1335:13" pos:end="1335:46"><expr pos:start="1335:13" pos:end="1335:45"><name pos:start="1335:13" pos:end="1335:15">reg</name> <operator pos:start="1335:17" pos:end="1335:17">=</operator> <operator pos:start="1335:19" pos:end="1335:19">(</operator><operator pos:start="1335:20" pos:end="1335:20">(</operator><name pos:start="1335:21" pos:end="1335:25">modrm</name> <operator pos:start="1335:27" pos:end="1335:28">&gt;&gt;</operator> <literal type="number" pos:start="1335:30" pos:end="1335:30">3</literal><operator pos:start="1335:31" pos:end="1335:31">)</operator> <operator pos:start="1335:33" pos:end="1335:33">&amp;</operator> <literal type="number" pos:start="1335:35" pos:end="1335:35">7</literal><operator pos:start="1335:36" pos:end="1335:36">)</operator> <operator pos:start="1335:38" pos:end="1335:38">+</operator> <name pos:start="1335:40" pos:end="1335:45">OR_EAX</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1337:13" pos:end="1337:35"><expr pos:start="1337:13" pos:end="1337:34"><name pos:start="1337:13" pos:end="1337:15">mod</name> <operator pos:start="1337:17" pos:end="1337:17">=</operator> <operator pos:start="1337:19" pos:end="1337:19">(</operator><name pos:start="1337:20" pos:end="1337:24">modrm</name> <operator pos:start="1337:26" pos:end="1337:27">&gt;&gt;</operator> <literal type="number" pos:start="1337:29" pos:end="1337:29">6</literal><operator pos:start="1337:30" pos:end="1337:30">)</operator> <operator pos:start="1337:32" pos:end="1337:32">&amp;</operator> <literal type="number" pos:start="1337:34" pos:end="1337:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1339:13" pos:end="1339:27"><expr pos:start="1339:13" pos:end="1339:26"><name pos:start="1339:13" pos:end="1339:14">rm</name> <operator pos:start="1339:16" pos:end="1339:16">=</operator> <name pos:start="1339:18" pos:end="1339:22">modrm</name> <operator pos:start="1339:24" pos:end="1339:24">&amp;</operator> <literal type="number" pos:start="1339:26" pos:end="1339:26">7</literal></expr>;</expr_stmt>

            

            <if_stmt pos:start="1343:13" pos:end="1395:13"><if pos:start="1343:13" pos:end="1379:13">if <condition pos:start="1343:16" pos:end="1343:25">(<expr pos:start="1343:17" pos:end="1343:24"><name pos:start="1343:17" pos:end="1343:19">mod</name> <operator pos:start="1343:21" pos:end="1343:22">==</operator> <literal type="number" pos:start="1343:24" pos:end="1343:24">3</literal></expr>)</condition> <block pos:start="1343:27" pos:end="1379:13">{<block_content pos:start="1345:17" pos:end="1377:47">

                <expr_stmt pos:start="1345:17" pos:end="1345:47"><expr pos:start="1345:17" pos:end="1345:46"><name pos:start="1345:17" pos:end="1345:44"><name pos:start="1345:17" pos:end="1345:33">gen_op_mov_TN_reg</name><index pos:start="1345:34" pos:end="1345:37">[<expr pos:start="1345:35" pos:end="1345:36"><name pos:start="1345:35" pos:end="1345:36">ot</name></expr>]</index><index pos:start="1345:38" pos:end="1345:40">[<expr pos:start="1345:39" pos:end="1345:39"><literal type="number" pos:start="1345:39" pos:end="1345:39">0</literal></expr>]</index><index pos:start="1345:41" pos:end="1345:44">[<expr pos:start="1345:42" pos:end="1345:43"><name pos:start="1345:42" pos:end="1345:43">rm</name></expr>]</index></name><operator pos:start="1345:45" pos:end="1345:45">(</operator><operator pos:start="1345:46" pos:end="1345:46">)</operator></expr>;</expr_stmt>

                <switch pos:start="1347:17" pos:end="1375:17">switch<condition pos:start="1347:23" pos:end="1347:36">(<expr pos:start="1347:24" pos:end="1347:35"><name pos:start="1347:24" pos:end="1347:25">ot</name> <operator pos:start="1347:27" pos:end="1347:27">|</operator> <operator pos:start="1347:29" pos:end="1347:29">(</operator><name pos:start="1347:30" pos:end="1347:30">b</name> <operator pos:start="1347:32" pos:end="1347:32">&amp;</operator> <literal type="number" pos:start="1347:34" pos:end="1347:34">8</literal><operator pos:start="1347:35" pos:end="1347:35">)</operator></expr>)</condition> <block pos:start="1347:38" pos:end="1375:17">{<block_content pos:start="1349:17" pos:end="1373:26">

                <case pos:start="1349:17" pos:end="1349:29">case <expr pos:start="1349:22" pos:end="1349:28"><name pos:start="1349:22" pos:end="1349:28">OT_BYTE</name></expr>:</case>

                    <expr_stmt pos:start="1351:21" pos:end="1351:42"><expr pos:start="1351:21" pos:end="1351:41"><call pos:start="1351:21" pos:end="1351:41"><name pos:start="1351:21" pos:end="1351:39">gen_op_movzbl_T0_T0</name><argument_list pos:start="1351:40" pos:end="1351:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1353:21" pos:end="1353:26">break;</break>

                <case pos:start="1355:17" pos:end="1355:33">case <expr pos:start="1355:22" pos:end="1355:32"><name pos:start="1355:22" pos:end="1355:28">OT_BYTE</name> <operator pos:start="1355:30" pos:end="1355:30">|</operator> <literal type="number" pos:start="1355:32" pos:end="1355:32">8</literal></expr>:</case>

                    <expr_stmt pos:start="1357:21" pos:end="1357:42"><expr pos:start="1357:21" pos:end="1357:41"><call pos:start="1357:21" pos:end="1357:41"><name pos:start="1357:21" pos:end="1357:39">gen_op_movsbl_T0_T0</name><argument_list pos:start="1357:40" pos:end="1357:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1359:21" pos:end="1359:26">break;</break>

                <case pos:start="1361:17" pos:end="1361:29">case <expr pos:start="1361:22" pos:end="1361:28"><name pos:start="1361:22" pos:end="1361:28">OT_WORD</name></expr>:</case>

                    <expr_stmt pos:start="1363:21" pos:end="1363:42"><expr pos:start="1363:21" pos:end="1363:41"><call pos:start="1363:21" pos:end="1363:41"><name pos:start="1363:21" pos:end="1363:39">gen_op_movzwl_T0_T0</name><argument_list pos:start="1363:40" pos:end="1363:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1365:21" pos:end="1365:26">break;</break>

                <default pos:start="1367:17" pos:end="1367:24">default:</default>

                <case pos:start="1369:17" pos:end="1369:33">case <expr pos:start="1369:22" pos:end="1369:32"><name pos:start="1369:22" pos:end="1369:28">OT_WORD</name> <operator pos:start="1369:30" pos:end="1369:30">|</operator> <literal type="number" pos:start="1369:32" pos:end="1369:32">8</literal></expr>:</case>

                    <expr_stmt pos:start="1371:21" pos:end="1371:42"><expr pos:start="1371:21" pos:end="1371:41"><call pos:start="1371:21" pos:end="1371:41"><name pos:start="1371:21" pos:end="1371:39">gen_op_movswl_T0_T0</name><argument_list pos:start="1371:40" pos:end="1371:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1373:21" pos:end="1373:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="1377:17" pos:end="1377:47"><expr pos:start="1377:17" pos:end="1377:46"><name pos:start="1377:17" pos:end="1377:44"><name pos:start="1377:17" pos:end="1377:33">gen_op_mov_reg_T0</name><index pos:start="1377:34" pos:end="1377:39">[<expr pos:start="1377:35" pos:end="1377:38"><name pos:start="1377:35" pos:end="1377:38">d_ot</name></expr>]</index><index pos:start="1377:40" pos:end="1377:44">[<expr pos:start="1377:41" pos:end="1377:43"><name pos:start="1377:41" pos:end="1377:43">reg</name></expr>]</index></name><operator pos:start="1377:45" pos:end="1377:45">(</operator><operator pos:start="1377:46" pos:end="1377:46">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1379:15" pos:end="1395:13">else <block pos:start="1379:20" pos:end="1395:13">{<block_content pos:start="1381:17" pos:end="1393:47">

                <expr_stmt pos:start="1381:17" pos:end="1381:65"><expr pos:start="1381:17" pos:end="1381:64"><call pos:start="1381:17" pos:end="1381:64"><name pos:start="1381:17" pos:end="1381:29">gen_lea_modrm</name><argument_list pos:start="1381:30" pos:end="1381:64">(<argument pos:start="1381:31" pos:end="1381:31"><expr pos:start="1381:31" pos:end="1381:31"><name pos:start="1381:31" pos:end="1381:31">s</name></expr></argument>, <argument pos:start="1381:34" pos:end="1381:38"><expr pos:start="1381:34" pos:end="1381:38"><name pos:start="1381:34" pos:end="1381:38">modrm</name></expr></argument>, <argument pos:start="1381:41" pos:end="1381:49"><expr pos:start="1381:41" pos:end="1381:49"><operator pos:start="1381:41" pos:end="1381:41">&amp;</operator><name pos:start="1381:42" pos:end="1381:49">reg_addr</name></expr></argument>, <argument pos:start="1381:52" pos:end="1381:63"><expr pos:start="1381:52" pos:end="1381:63"><operator pos:start="1381:52" pos:end="1381:52">&amp;</operator><name pos:start="1381:53" pos:end="1381:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1383:17" pos:end="1391:17"><if pos:start="1383:17" pos:end="1387:17">if <condition pos:start="1383:20" pos:end="1383:26">(<expr pos:start="1383:21" pos:end="1383:25"><name pos:start="1383:21" pos:end="1383:21">b</name> <operator pos:start="1383:23" pos:end="1383:23">&amp;</operator> <literal type="number" pos:start="1383:25" pos:end="1383:25">8</literal></expr>)</condition> <block pos:start="1383:28" pos:end="1387:17">{<block_content pos:start="1385:21" pos:end="1385:43">

                    <expr_stmt pos:start="1385:21" pos:end="1385:43"><expr pos:start="1385:21" pos:end="1385:42"><name pos:start="1385:21" pos:end="1385:40"><name pos:start="1385:21" pos:end="1385:36">gen_op_lds_T0_A0</name><index pos:start="1385:37" pos:end="1385:40">[<expr pos:start="1385:38" pos:end="1385:39"><name pos:start="1385:38" pos:end="1385:39">ot</name></expr>]</index></name><operator pos:start="1385:41" pos:end="1385:41">(</operator><operator pos:start="1385:42" pos:end="1385:42">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1387:19" pos:end="1391:17">else <block pos:start="1387:24" pos:end="1391:17">{<block_content pos:start="1389:21" pos:end="1389:43">

                    <expr_stmt pos:start="1389:21" pos:end="1389:43"><expr pos:start="1389:21" pos:end="1389:42"><name pos:start="1389:21" pos:end="1389:40"><name pos:start="1389:21" pos:end="1389:36">gen_op_ldu_T0_A0</name><index pos:start="1389:37" pos:end="1389:40">[<expr pos:start="1389:38" pos:end="1389:39"><name pos:start="1389:38" pos:end="1389:39">ot</name></expr>]</index></name><operator pos:start="1389:41" pos:end="1389:41">(</operator><operator pos:start="1389:42" pos:end="1389:42">)</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1393:17" pos:end="1393:47"><expr pos:start="1393:17" pos:end="1393:46"><name pos:start="1393:17" pos:end="1393:44"><name pos:start="1393:17" pos:end="1393:33">gen_op_mov_reg_T0</name><index pos:start="1393:34" pos:end="1393:39">[<expr pos:start="1393:35" pos:end="1393:38"><name pos:start="1393:35" pos:end="1393:38">d_ot</name></expr>]</index><index pos:start="1393:40" pos:end="1393:44">[<expr pos:start="1393:41" pos:end="1393:43"><name pos:start="1393:41" pos:end="1393:43">reg</name></expr>]</index></name><operator pos:start="1393:45" pos:end="1393:45">(</operator><operator pos:start="1393:46" pos:end="1393:46">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="1399:9" pos:end="1399:14">break;</break>



    <case pos:start="1403:5" pos:end="1403:14">case <expr pos:start="1403:10" pos:end="1403:13"><literal type="number" pos:start="1403:10" pos:end="1403:13">0x8d</literal></expr>:</case> <comment type="block" pos:start="1403:16" pos:end="1403:24">/* lea */</comment>

        <expr_stmt pos:start="1405:9" pos:end="1405:39"><expr pos:start="1405:9" pos:end="1405:38"><name pos:start="1405:9" pos:end="1405:10">ot</name> <operator pos:start="1405:12" pos:end="1405:12">=</operator> <ternary pos:start="1405:14" pos:end="1405:38"><condition pos:start="1405:14" pos:end="1405:20"><expr pos:start="1405:14" pos:end="1405:18"><name pos:start="1405:14" pos:end="1405:18">dflag</name></expr> ?</condition><then pos:start="1405:22" pos:end="1405:28"> <expr pos:start="1405:22" pos:end="1405:28"><name pos:start="1405:22" pos:end="1405:28">OT_LONG</name></expr> </then><else pos:start="1405:30" pos:end="1405:38">: <expr pos:start="1405:32" pos:end="1405:38"><name pos:start="1405:32" pos:end="1405:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1407:9" pos:end="1407:30"><expr pos:start="1407:9" pos:end="1407:29"><name pos:start="1407:9" pos:end="1407:13">modrm</name> <operator pos:start="1407:15" pos:end="1407:15">=</operator> <call pos:start="1407:17" pos:end="1407:29"><name pos:start="1407:17" pos:end="1407:20">ldub</name><argument_list pos:start="1407:21" pos:end="1407:29">(<argument pos:start="1407:22" pos:end="1407:28"><expr pos:start="1407:22" pos:end="1407:28"><name pos:start="1407:22" pos:end="1407:26"><name pos:start="1407:22" pos:end="1407:22">s</name><operator pos:start="1407:23" pos:end="1407:24">-&gt;</operator><name pos:start="1407:25" pos:end="1407:26">pc</name></name><operator pos:start="1407:27" pos:end="1407:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1409:9" pos:end="1409:31"><expr pos:start="1409:9" pos:end="1409:30"><name pos:start="1409:9" pos:end="1409:11">reg</name> <operator pos:start="1409:13" pos:end="1409:13">=</operator> <operator pos:start="1409:15" pos:end="1409:15">(</operator><name pos:start="1409:16" pos:end="1409:20">modrm</name> <operator pos:start="1409:22" pos:end="1409:23">&gt;&gt;</operator> <literal type="number" pos:start="1409:25" pos:end="1409:25">3</literal><operator pos:start="1409:26" pos:end="1409:26">)</operator> <operator pos:start="1409:28" pos:end="1409:28">&amp;</operator> <literal type="number" pos:start="1409:30" pos:end="1409:30">7</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="1411:9" pos:end="1411:53">/* we must ensure that no segment is added */</comment>

        <expr_stmt pos:start="1413:9" pos:end="1413:25"><expr pos:start="1413:9" pos:end="1413:24"><name pos:start="1413:9" pos:end="1413:19"><name pos:start="1413:9" pos:end="1413:9">s</name><operator pos:start="1413:10" pos:end="1413:11">-&gt;</operator><name pos:start="1413:12" pos:end="1413:19">override</name></name> <operator pos:start="1413:21" pos:end="1413:21">=</operator> <operator pos:start="1413:23" pos:end="1413:23">-</operator><literal type="number" pos:start="1413:24" pos:end="1413:24">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1415:9" pos:end="1415:24"><expr pos:start="1415:9" pos:end="1415:23"><name pos:start="1415:9" pos:end="1415:11">val</name> <operator pos:start="1415:13" pos:end="1415:13">=</operator> <name pos:start="1415:15" pos:end="1415:23"><name pos:start="1415:15" pos:end="1415:15">s</name><operator pos:start="1415:16" pos:end="1415:17">-&gt;</operator><name pos:start="1415:18" pos:end="1415:23">addseg</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="1417:9" pos:end="1417:22"><expr pos:start="1417:9" pos:end="1417:21"><name pos:start="1417:9" pos:end="1417:17"><name pos:start="1417:9" pos:end="1417:9">s</name><operator pos:start="1417:10" pos:end="1417:11">-&gt;</operator><name pos:start="1417:12" pos:end="1417:17">addseg</name></name> <operator pos:start="1417:19" pos:end="1417:19">=</operator> <literal type="number" pos:start="1417:21" pos:end="1417:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1419:9" pos:end="1419:57"><expr pos:start="1419:9" pos:end="1419:56"><call pos:start="1419:9" pos:end="1419:56"><name pos:start="1419:9" pos:end="1419:21">gen_lea_modrm</name><argument_list pos:start="1419:22" pos:end="1419:56">(<argument pos:start="1419:23" pos:end="1419:23"><expr pos:start="1419:23" pos:end="1419:23"><name pos:start="1419:23" pos:end="1419:23">s</name></expr></argument>, <argument pos:start="1419:26" pos:end="1419:30"><expr pos:start="1419:26" pos:end="1419:30"><name pos:start="1419:26" pos:end="1419:30">modrm</name></expr></argument>, <argument pos:start="1419:33" pos:end="1419:41"><expr pos:start="1419:33" pos:end="1419:41"><operator pos:start="1419:33" pos:end="1419:33">&amp;</operator><name pos:start="1419:34" pos:end="1419:41">reg_addr</name></expr></argument>, <argument pos:start="1419:44" pos:end="1419:55"><expr pos:start="1419:44" pos:end="1419:55"><operator pos:start="1419:44" pos:end="1419:44">&amp;</operator><name pos:start="1419:45" pos:end="1419:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1421:9" pos:end="1421:24"><expr pos:start="1421:9" pos:end="1421:23"><name pos:start="1421:9" pos:end="1421:17"><name pos:start="1421:9" pos:end="1421:9">s</name><operator pos:start="1421:10" pos:end="1421:11">-&gt;</operator><name pos:start="1421:12" pos:end="1421:17">addseg</name></name> <operator pos:start="1421:19" pos:end="1421:19">=</operator> <name pos:start="1421:21" pos:end="1421:23">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1423:9" pos:end="1423:47"><expr pos:start="1423:9" pos:end="1423:46"><name pos:start="1423:9" pos:end="1423:44"><name pos:start="1423:9" pos:end="1423:25">gen_op_mov_reg_A0</name><index pos:start="1423:26" pos:end="1423:39">[<expr pos:start="1423:27" pos:end="1423:38"><name pos:start="1423:27" pos:end="1423:28">ot</name> <operator pos:start="1423:30" pos:end="1423:30">-</operator> <name pos:start="1423:32" pos:end="1423:38">OT_WORD</name></expr>]</index><index pos:start="1423:40" pos:end="1423:44">[<expr pos:start="1423:41" pos:end="1423:43"><name pos:start="1423:41" pos:end="1423:43">reg</name></expr>]</index></name><operator pos:start="1423:45" pos:end="1423:45">(</operator><operator pos:start="1423:46" pos:end="1423:46">)</operator></expr>;</expr_stmt>

        <break pos:start="1425:9" pos:end="1425:14">break;</break>

        

    <case pos:start="1429:5" pos:end="1429:14">case <expr pos:start="1429:10" pos:end="1429:13"><literal type="number" pos:start="1429:10" pos:end="1429:13">0xa0</literal></expr>:</case> <comment type="block" pos:start="1429:16" pos:end="1429:32">/* mov EAX, Ov */</comment>

    <case pos:start="1431:5" pos:end="1431:14">case <expr pos:start="1431:10" pos:end="1431:13"><literal type="number" pos:start="1431:10" pos:end="1431:13">0xa1</literal></expr>:</case>

    <case pos:start="1433:5" pos:end="1433:14">case <expr pos:start="1433:10" pos:end="1433:13"><literal type="number" pos:start="1433:10" pos:end="1433:13">0xa2</literal></expr>:</case> <comment type="block" pos:start="1433:16" pos:end="1433:32">/* mov Ov, EAX */</comment>

    <case pos:start="1435:5" pos:end="1435:14">case <expr pos:start="1435:10" pos:end="1435:13"><literal type="number" pos:start="1435:10" pos:end="1435:13">0xa3</literal></expr>:</case>

        <if_stmt pos:start="1437:9" pos:end="1443:43"><if pos:start="1437:9" pos:end="1439:25">if <condition pos:start="1437:12" pos:end="1437:25">(<expr pos:start="1437:13" pos:end="1437:24"><operator pos:start="1437:13" pos:end="1437:13">(</operator><name pos:start="1437:14" pos:end="1437:14">b</name> <operator pos:start="1437:16" pos:end="1437:16">&amp;</operator> <literal type="number" pos:start="1437:18" pos:end="1437:18">1</literal><operator pos:start="1437:19" pos:end="1437:19">)</operator> <operator pos:start="1437:21" pos:end="1437:22">==</operator> <literal type="number" pos:start="1437:24" pos:end="1437:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1439:13" pos:end="1439:25"><block_content pos:start="1439:13" pos:end="1439:25">

            <expr_stmt pos:start="1439:13" pos:end="1439:25"><expr pos:start="1439:13" pos:end="1439:24"><name pos:start="1439:13" pos:end="1439:14">ot</name> <operator pos:start="1439:16" pos:end="1439:16">=</operator> <name pos:start="1439:18" pos:end="1439:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1441:9" pos:end="1443:43">else<block type="pseudo" pos:start="1443:13" pos:end="1443:43"><block_content pos:start="1443:13" pos:end="1443:43">

            <expr_stmt pos:start="1443:13" pos:end="1443:43"><expr pos:start="1443:13" pos:end="1443:42"><name pos:start="1443:13" pos:end="1443:14">ot</name> <operator pos:start="1443:16" pos:end="1443:16">=</operator> <ternary pos:start="1443:18" pos:end="1443:42"><condition pos:start="1443:18" pos:end="1443:24"><expr pos:start="1443:18" pos:end="1443:22"><name pos:start="1443:18" pos:end="1443:22">dflag</name></expr> ?</condition><then pos:start="1443:26" pos:end="1443:32"> <expr pos:start="1443:26" pos:end="1443:32"><name pos:start="1443:26" pos:end="1443:32">OT_LONG</name></expr> </then><else pos:start="1443:34" pos:end="1443:42">: <expr pos:start="1443:36" pos:end="1443:42"><name pos:start="1443:36" pos:end="1443:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="1445:9" pos:end="1451:47"><if pos:start="1445:9" pos:end="1447:47">if <condition pos:start="1445:12" pos:end="1445:21">(<expr pos:start="1445:13" pos:end="1445:20"><name pos:start="1445:13" pos:end="1445:20"><name pos:start="1445:13" pos:end="1445:13">s</name><operator pos:start="1445:14" pos:end="1445:15">-&gt;</operator><name pos:start="1445:16" pos:end="1445:20">aflag</name></name></expr>)</condition><block type="pseudo" pos:start="1447:13" pos:end="1447:47"><block_content pos:start="1447:13" pos:end="1447:47">

            <expr_stmt pos:start="1447:13" pos:end="1447:47"><expr pos:start="1447:13" pos:end="1447:46"><name pos:start="1447:13" pos:end="1447:23">offset_addr</name> <operator pos:start="1447:25" pos:end="1447:25">=</operator> <call pos:start="1447:27" pos:end="1447:46"><name pos:start="1447:27" pos:end="1447:34">insn_get</name><argument_list pos:start="1447:35" pos:end="1447:46">(<argument pos:start="1447:36" pos:end="1447:36"><expr pos:start="1447:36" pos:end="1447:36"><name pos:start="1447:36" pos:end="1447:36">s</name></expr></argument>, <argument pos:start="1447:39" pos:end="1447:45"><expr pos:start="1447:39" pos:end="1447:45"><name pos:start="1447:39" pos:end="1447:45">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1449:9" pos:end="1451:47">else<block type="pseudo" pos:start="1451:13" pos:end="1451:47"><block_content pos:start="1451:13" pos:end="1451:47">

            <expr_stmt pos:start="1451:13" pos:end="1451:47"><expr pos:start="1451:13" pos:end="1451:46"><name pos:start="1451:13" pos:end="1451:23">offset_addr</name> <operator pos:start="1451:25" pos:end="1451:25">=</operator> <call pos:start="1451:27" pos:end="1451:46"><name pos:start="1451:27" pos:end="1451:34">insn_get</name><argument_list pos:start="1451:35" pos:end="1451:46">(<argument pos:start="1451:36" pos:end="1451:36"><expr pos:start="1451:36" pos:end="1451:36"><name pos:start="1451:36" pos:end="1451:36">s</name></expr></argument>, <argument pos:start="1451:39" pos:end="1451:45"><expr pos:start="1451:39" pos:end="1451:45"><name pos:start="1451:39" pos:end="1451:45">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1453:9" pos:end="1453:39"><expr pos:start="1453:9" pos:end="1453:38"><call pos:start="1453:9" pos:end="1453:38"><name pos:start="1453:9" pos:end="1453:25">gen_op_movl_A0_im</name><argument_list pos:start="1453:26" pos:end="1453:38">(<argument pos:start="1453:27" pos:end="1453:37"><expr pos:start="1453:27" pos:end="1453:37"><name pos:start="1453:27" pos:end="1453:37">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1455:9" pos:end="1455:29">/* handle override */</comment>

        <block pos:start="1457:9" pos:end="1481:9">{<block_content pos:start="1459:13" pos:end="1479:13">

            <decl_stmt pos:start="1459:13" pos:end="1459:39"><decl pos:start="1459:13" pos:end="1459:24"><type pos:start="1459:13" pos:end="1459:15"><name pos:start="1459:13" pos:end="1459:15">int</name></type> <name pos:start="1459:17" pos:end="1459:24">override</name></decl>, <decl pos:start="1459:27" pos:end="1459:38"><type ref="prev" pos:start="1459:13" pos:end="1459:15"/><name pos:start="1459:27" pos:end="1459:38">must_add_seg</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1461:13" pos:end="1461:37"><expr pos:start="1461:13" pos:end="1461:36"><name pos:start="1461:13" pos:end="1461:24">must_add_seg</name> <operator pos:start="1461:26" pos:end="1461:26">=</operator> <name pos:start="1461:28" pos:end="1461:36"><name pos:start="1461:28" pos:end="1461:28">s</name><operator pos:start="1461:29" pos:end="1461:30">-&gt;</operator><name pos:start="1461:31" pos:end="1461:36">addseg</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="1463:13" pos:end="1473:13"><if pos:start="1463:13" pos:end="1469:13">if <condition pos:start="1463:16" pos:end="1463:33">(<expr pos:start="1463:17" pos:end="1463:32"><name pos:start="1463:17" pos:end="1463:27"><name pos:start="1463:17" pos:end="1463:17">s</name><operator pos:start="1463:18" pos:end="1463:19">-&gt;</operator><name pos:start="1463:20" pos:end="1463:27">override</name></name> <operator pos:start="1463:29" pos:end="1463:30">&gt;=</operator> <literal type="number" pos:start="1463:32" pos:end="1463:32">0</literal></expr>)</condition> <block pos:start="1463:35" pos:end="1469:13">{<block_content pos:start="1465:17" pos:end="1467:33">

                <expr_stmt pos:start="1465:17" pos:end="1465:39"><expr pos:start="1465:17" pos:end="1465:38"><name pos:start="1465:17" pos:end="1465:24">override</name> <operator pos:start="1465:26" pos:end="1465:26">=</operator> <name pos:start="1465:28" pos:end="1465:38"><name pos:start="1465:28" pos:end="1465:28">s</name><operator pos:start="1465:29" pos:end="1465:30">-&gt;</operator><name pos:start="1465:31" pos:end="1465:38">override</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1467:17" pos:end="1467:33"><expr pos:start="1467:17" pos:end="1467:32"><name pos:start="1467:17" pos:end="1467:28">must_add_seg</name> <operator pos:start="1467:30" pos:end="1467:30">=</operator> <literal type="number" pos:start="1467:32" pos:end="1467:32">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1469:15" pos:end="1473:13">else <block pos:start="1469:20" pos:end="1473:13">{<block_content pos:start="1471:17" pos:end="1471:32">

                <expr_stmt pos:start="1471:17" pos:end="1471:32"><expr pos:start="1471:17" pos:end="1471:31"><name pos:start="1471:17" pos:end="1471:24">override</name> <operator pos:start="1471:26" pos:end="1471:26">=</operator> <name pos:start="1471:28" pos:end="1471:31">R_DS</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="1475:13" pos:end="1479:13"><if pos:start="1475:13" pos:end="1479:13">if <condition pos:start="1475:16" pos:end="1475:29">(<expr pos:start="1475:17" pos:end="1475:28"><name pos:start="1475:17" pos:end="1475:28">must_add_seg</name></expr>)</condition> <block pos:start="1475:31" pos:end="1479:13">{<block_content pos:start="1477:17" pos:end="1477:83">

                <expr_stmt pos:start="1477:17" pos:end="1477:83"><expr pos:start="1477:17" pos:end="1477:82"><call pos:start="1477:17" pos:end="1477:82"><name pos:start="1477:17" pos:end="1477:34">gen_op_addl_A0_seg</name><argument_list pos:start="1477:35" pos:end="1477:82">(<argument pos:start="1477:36" pos:end="1477:81"><expr pos:start="1477:36" pos:end="1477:81"><call pos:start="1477:36" pos:end="1477:81"><name pos:start="1477:36" pos:end="1477:43">offsetof</name><argument_list pos:start="1477:44" pos:end="1477:81">(<argument pos:start="1477:45" pos:end="1477:55"><expr pos:start="1477:45" pos:end="1477:55"><name pos:start="1477:45" pos:end="1477:55">CPUX86State</name></expr></argument>,<argument pos:start="1477:57" pos:end="1477:80"><expr pos:start="1477:57" pos:end="1477:80"><name pos:start="1477:57" pos:end="1477:75"><name pos:start="1477:57" pos:end="1477:65">seg_cache</name><index pos:start="1477:66" pos:end="1477:75">[<expr pos:start="1477:67" pos:end="1477:74"><name pos:start="1477:67" pos:end="1477:74">override</name></expr>]</index></name><operator pos:start="1477:76" pos:end="1477:76">.</operator><name pos:start="1477:77" pos:end="1477:80">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <if_stmt pos:start="1483:9" pos:end="1495:9"><if pos:start="1483:9" pos:end="1489:9">if <condition pos:start="1483:12" pos:end="1483:25">(<expr pos:start="1483:13" pos:end="1483:24"><operator pos:start="1483:13" pos:end="1483:13">(</operator><name pos:start="1483:14" pos:end="1483:14">b</name> <operator pos:start="1483:16" pos:end="1483:16">&amp;</operator> <literal type="number" pos:start="1483:18" pos:end="1483:18">2</literal><operator pos:start="1483:19" pos:end="1483:19">)</operator> <operator pos:start="1483:21" pos:end="1483:22">==</operator> <literal type="number" pos:start="1483:24" pos:end="1483:24">0</literal></expr>)</condition> <block pos:start="1483:27" pos:end="1489:9">{<block_content pos:start="1485:13" pos:end="1487:43">

            <expr_stmt pos:start="1485:13" pos:end="1485:34"><expr pos:start="1485:13" pos:end="1485:33"><name pos:start="1485:13" pos:end="1485:31"><name pos:start="1485:13" pos:end="1485:27">gen_op_ld_T0_A0</name><index pos:start="1485:28" pos:end="1485:31">[<expr pos:start="1485:29" pos:end="1485:30"><name pos:start="1485:29" pos:end="1485:30">ot</name></expr>]</index></name><operator pos:start="1485:32" pos:end="1485:32">(</operator><operator pos:start="1485:33" pos:end="1485:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1487:13" pos:end="1487:43"><expr pos:start="1487:13" pos:end="1487:42"><name pos:start="1487:13" pos:end="1487:40"><name pos:start="1487:13" pos:end="1487:29">gen_op_mov_reg_T0</name><index pos:start="1487:30" pos:end="1487:33">[<expr pos:start="1487:31" pos:end="1487:32"><name pos:start="1487:31" pos:end="1487:32">ot</name></expr>]</index><index pos:start="1487:34" pos:end="1487:40">[<expr pos:start="1487:35" pos:end="1487:39"><name pos:start="1487:35" pos:end="1487:39">R_EAX</name></expr>]</index></name><operator pos:start="1487:41" pos:end="1487:41">(</operator><operator pos:start="1487:42" pos:end="1487:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1489:11" pos:end="1495:9">else <block pos:start="1489:16" pos:end="1495:9">{<block_content pos:start="1491:13" pos:end="1493:34">

            <expr_stmt pos:start="1491:13" pos:end="1491:46"><expr pos:start="1491:13" pos:end="1491:45"><name pos:start="1491:13" pos:end="1491:43"><name pos:start="1491:13" pos:end="1491:29">gen_op_mov_TN_reg</name><index pos:start="1491:30" pos:end="1491:33">[<expr pos:start="1491:31" pos:end="1491:32"><name pos:start="1491:31" pos:end="1491:32">ot</name></expr>]</index><index pos:start="1491:34" pos:end="1491:36">[<expr pos:start="1491:35" pos:end="1491:35"><literal type="number" pos:start="1491:35" pos:end="1491:35">0</literal></expr>]</index><index pos:start="1491:37" pos:end="1491:43">[<expr pos:start="1491:38" pos:end="1491:42"><name pos:start="1491:38" pos:end="1491:42">R_EAX</name></expr>]</index></name><operator pos:start="1491:44" pos:end="1491:44">(</operator><operator pos:start="1491:45" pos:end="1491:45">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1493:13" pos:end="1493:34"><expr pos:start="1493:13" pos:end="1493:33"><name pos:start="1493:13" pos:end="1493:31"><name pos:start="1493:13" pos:end="1493:27">gen_op_st_T0_A0</name><index pos:start="1493:28" pos:end="1493:31">[<expr pos:start="1493:29" pos:end="1493:30"><name pos:start="1493:29" pos:end="1493:30">ot</name></expr>]</index></name><operator pos:start="1493:32" pos:end="1493:32">(</operator><operator pos:start="1493:33" pos:end="1493:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1497:9" pos:end="1497:14">break;</break>

    <case pos:start="1499:5" pos:end="1499:14">case <expr pos:start="1499:10" pos:end="1499:13"><literal type="number" pos:start="1499:10" pos:end="1499:13">0xd7</literal></expr>:</case> <comment type="block" pos:start="1499:16" pos:end="1499:25">/* xlat */</comment>

        <expr_stmt pos:start="1501:9" pos:end="1501:36"><expr pos:start="1501:9" pos:end="1501:35"><name pos:start="1501:9" pos:end="1501:33"><name pos:start="1501:9" pos:end="1501:26">gen_op_movl_A0_reg</name><index pos:start="1501:27" pos:end="1501:33">[<expr pos:start="1501:28" pos:end="1501:32"><name pos:start="1501:28" pos:end="1501:32">R_EBX</name></expr>]</index></name><operator pos:start="1501:34" pos:end="1501:34">(</operator><operator pos:start="1501:35" pos:end="1501:35">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1503:9" pos:end="1503:28"><expr pos:start="1503:9" pos:end="1503:27"><call pos:start="1503:9" pos:end="1503:27"><name pos:start="1503:9" pos:end="1503:25">gen_op_addl_A0_AL</name><argument_list pos:start="1503:26" pos:end="1503:27">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1505:9" pos:end="1507:34"><if pos:start="1505:9" pos:end="1507:34">if <condition pos:start="1505:12" pos:end="1505:26">(<expr pos:start="1505:13" pos:end="1505:25"><name pos:start="1505:13" pos:end="1505:20"><name pos:start="1505:13" pos:end="1505:13">s</name><operator pos:start="1505:14" pos:end="1505:15">-&gt;</operator><name pos:start="1505:16" pos:end="1505:20">aflag</name></name> <operator pos:start="1505:22" pos:end="1505:23">==</operator> <literal type="number" pos:start="1505:25" pos:end="1505:25">0</literal></expr>)</condition><block type="pseudo" pos:start="1507:13" pos:end="1507:34"><block_content pos:start="1507:13" pos:end="1507:34">

            <expr_stmt pos:start="1507:13" pos:end="1507:34"><expr pos:start="1507:13" pos:end="1507:33"><call pos:start="1507:13" pos:end="1507:33"><name pos:start="1507:13" pos:end="1507:31">gen_op_andl_A0_ffff</name><argument_list pos:start="1507:32" pos:end="1507:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="1509:9" pos:end="1509:29">/* handle override */</comment>

        <block pos:start="1511:9" pos:end="1537:9">{<block_content pos:start="1513:13" pos:end="1535:13">

            <decl_stmt pos:start="1513:13" pos:end="1513:39"><decl pos:start="1513:13" pos:end="1513:24"><type pos:start="1513:13" pos:end="1513:15"><name pos:start="1513:13" pos:end="1513:15">int</name></type> <name pos:start="1513:17" pos:end="1513:24">override</name></decl>, <decl pos:start="1513:27" pos:end="1513:38"><type ref="prev" pos:start="1513:13" pos:end="1513:15"/><name pos:start="1513:27" pos:end="1513:38">must_add_seg</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1515:13" pos:end="1515:37"><expr pos:start="1515:13" pos:end="1515:36"><name pos:start="1515:13" pos:end="1515:24">must_add_seg</name> <operator pos:start="1515:26" pos:end="1515:26">=</operator> <name pos:start="1515:28" pos:end="1515:36"><name pos:start="1515:28" pos:end="1515:28">s</name><operator pos:start="1515:29" pos:end="1515:30">-&gt;</operator><name pos:start="1515:31" pos:end="1515:36">addseg</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="1517:13" pos:end="1517:28"><expr pos:start="1517:13" pos:end="1517:27"><name pos:start="1517:13" pos:end="1517:20">override</name> <operator pos:start="1517:22" pos:end="1517:22">=</operator> <name pos:start="1517:24" pos:end="1517:27">R_DS</name></expr>;</expr_stmt>

            <if_stmt pos:start="1519:13" pos:end="1529:13"><if pos:start="1519:13" pos:end="1525:13">if <condition pos:start="1519:16" pos:end="1519:33">(<expr pos:start="1519:17" pos:end="1519:32"><name pos:start="1519:17" pos:end="1519:27"><name pos:start="1519:17" pos:end="1519:17">s</name><operator pos:start="1519:18" pos:end="1519:19">-&gt;</operator><name pos:start="1519:20" pos:end="1519:27">override</name></name> <operator pos:start="1519:29" pos:end="1519:30">&gt;=</operator> <literal type="number" pos:start="1519:32" pos:end="1519:32">0</literal></expr>)</condition> <block pos:start="1519:35" pos:end="1525:13">{<block_content pos:start="1521:17" pos:end="1523:33">

                <expr_stmt pos:start="1521:17" pos:end="1521:39"><expr pos:start="1521:17" pos:end="1521:38"><name pos:start="1521:17" pos:end="1521:24">override</name> <operator pos:start="1521:26" pos:end="1521:26">=</operator> <name pos:start="1521:28" pos:end="1521:38"><name pos:start="1521:28" pos:end="1521:28">s</name><operator pos:start="1521:29" pos:end="1521:30">-&gt;</operator><name pos:start="1521:31" pos:end="1521:38">override</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="1523:17" pos:end="1523:33"><expr pos:start="1523:17" pos:end="1523:32"><name pos:start="1523:17" pos:end="1523:28">must_add_seg</name> <operator pos:start="1523:30" pos:end="1523:30">=</operator> <literal type="number" pos:start="1523:32" pos:end="1523:32">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1525:15" pos:end="1529:13">else <block pos:start="1525:20" pos:end="1529:13">{<block_content pos:start="1527:17" pos:end="1527:32">

                <expr_stmt pos:start="1527:17" pos:end="1527:32"><expr pos:start="1527:17" pos:end="1527:31"><name pos:start="1527:17" pos:end="1527:24">override</name> <operator pos:start="1527:26" pos:end="1527:26">=</operator> <name pos:start="1527:28" pos:end="1527:31">R_DS</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="1531:13" pos:end="1535:13"><if pos:start="1531:13" pos:end="1535:13">if <condition pos:start="1531:16" pos:end="1531:29">(<expr pos:start="1531:17" pos:end="1531:28"><name pos:start="1531:17" pos:end="1531:28">must_add_seg</name></expr>)</condition> <block pos:start="1531:31" pos:end="1535:13">{<block_content pos:start="1533:17" pos:end="1533:83">

                <expr_stmt pos:start="1533:17" pos:end="1533:83"><expr pos:start="1533:17" pos:end="1533:82"><call pos:start="1533:17" pos:end="1533:82"><name pos:start="1533:17" pos:end="1533:34">gen_op_addl_A0_seg</name><argument_list pos:start="1533:35" pos:end="1533:82">(<argument pos:start="1533:36" pos:end="1533:81"><expr pos:start="1533:36" pos:end="1533:81"><call pos:start="1533:36" pos:end="1533:81"><name pos:start="1533:36" pos:end="1533:43">offsetof</name><argument_list pos:start="1533:44" pos:end="1533:81">(<argument pos:start="1533:45" pos:end="1533:55"><expr pos:start="1533:45" pos:end="1533:55"><name pos:start="1533:45" pos:end="1533:55">CPUX86State</name></expr></argument>,<argument pos:start="1533:57" pos:end="1533:80"><expr pos:start="1533:57" pos:end="1533:80"><name pos:start="1533:57" pos:end="1533:75"><name pos:start="1533:57" pos:end="1533:65">seg_cache</name><index pos:start="1533:66" pos:end="1533:75">[<expr pos:start="1533:67" pos:end="1533:74"><name pos:start="1533:67" pos:end="1533:74">override</name></expr>]</index></name><operator pos:start="1533:76" pos:end="1533:76">.</operator><name pos:start="1533:77" pos:end="1533:80">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="1539:9" pos:end="1539:28"><expr pos:start="1539:9" pos:end="1539:27"><call pos:start="1539:9" pos:end="1539:27"><name pos:start="1539:9" pos:end="1539:25">gen_op_ldub_T0_A0</name><argument_list pos:start="1539:26" pos:end="1539:27">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1541:9" pos:end="1541:44"><expr pos:start="1541:9" pos:end="1541:43"><name pos:start="1541:9" pos:end="1541:41"><name pos:start="1541:9" pos:end="1541:25">gen_op_mov_reg_T0</name><index pos:start="1541:26" pos:end="1541:34">[<expr pos:start="1541:27" pos:end="1541:33"><name pos:start="1541:27" pos:end="1541:33">OT_BYTE</name></expr>]</index><index pos:start="1541:35" pos:end="1541:41">[<expr pos:start="1541:36" pos:end="1541:40"><name pos:start="1541:36" pos:end="1541:40">R_EAX</name></expr>]</index></name><operator pos:start="1541:42" pos:end="1541:42">(</operator><operator pos:start="1541:43" pos:end="1541:43">)</operator></expr>;</expr_stmt>

        <break pos:start="1543:9" pos:end="1543:14">break;</break>

    <case pos:start="1545:5" pos:end="1545:23">case <expr pos:start="1545:10" pos:end="1545:22"><literal type="number" pos:start="1545:10" pos:end="1545:13">0xb0</literal> <operator pos:start="1545:15" pos:end="1545:17">...</operator> <literal type="number" pos:start="1545:19" pos:end="1545:22">0xb7</literal></expr>:</case> <comment type="block" pos:start="1545:25" pos:end="1545:39">/* mov R, Ib */</comment>

        <expr_stmt pos:start="1547:9" pos:end="1547:35"><expr pos:start="1547:9" pos:end="1547:34"><name pos:start="1547:9" pos:end="1547:11">val</name> <operator pos:start="1547:13" pos:end="1547:13">=</operator> <call pos:start="1547:15" pos:end="1547:34"><name pos:start="1547:15" pos:end="1547:22">insn_get</name><argument_list pos:start="1547:23" pos:end="1547:34">(<argument pos:start="1547:24" pos:end="1547:24"><expr pos:start="1547:24" pos:end="1547:24"><name pos:start="1547:24" pos:end="1547:24">s</name></expr></argument>, <argument pos:start="1547:27" pos:end="1547:33"><expr pos:start="1547:27" pos:end="1547:33"><name pos:start="1547:27" pos:end="1547:33">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1549:9" pos:end="1549:31"><expr pos:start="1549:9" pos:end="1549:30"><call pos:start="1549:9" pos:end="1549:30"><name pos:start="1549:9" pos:end="1549:25">gen_op_movl_T0_im</name><argument_list pos:start="1549:26" pos:end="1549:30">(<argument pos:start="1549:27" pos:end="1549:29"><expr pos:start="1549:27" pos:end="1549:29"><name pos:start="1549:27" pos:end="1549:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1551:9" pos:end="1551:44"><expr pos:start="1551:9" pos:end="1551:43"><name pos:start="1551:9" pos:end="1551:41"><name pos:start="1551:9" pos:end="1551:25">gen_op_mov_reg_T0</name><index pos:start="1551:26" pos:end="1551:34">[<expr pos:start="1551:27" pos:end="1551:33"><name pos:start="1551:27" pos:end="1551:33">OT_BYTE</name></expr>]</index><index pos:start="1551:35" pos:end="1551:41">[<expr pos:start="1551:36" pos:end="1551:40"><name pos:start="1551:36" pos:end="1551:36">b</name> <operator pos:start="1551:38" pos:end="1551:38">&amp;</operator> <literal type="number" pos:start="1551:40" pos:end="1551:40">7</literal></expr>]</index></name><operator pos:start="1551:42" pos:end="1551:42">(</operator><operator pos:start="1551:43" pos:end="1551:43">)</operator></expr>;</expr_stmt>

        <break pos:start="1553:9" pos:end="1553:14">break;</break>

    <case pos:start="1555:5" pos:end="1555:23">case <expr pos:start="1555:10" pos:end="1555:22"><literal type="number" pos:start="1555:10" pos:end="1555:13">0xb8</literal> <operator pos:start="1555:15" pos:end="1555:17">...</operator> <literal type="number" pos:start="1555:19" pos:end="1555:22">0xbf</literal></expr>:</case> <comment type="block" pos:start="1555:25" pos:end="1555:39">/* mov R, Iv */</comment>

        <expr_stmt pos:start="1557:9" pos:end="1557:39"><expr pos:start="1557:9" pos:end="1557:38"><name pos:start="1557:9" pos:end="1557:10">ot</name> <operator pos:start="1557:12" pos:end="1557:12">=</operator> <ternary pos:start="1557:14" pos:end="1557:38"><condition pos:start="1557:14" pos:end="1557:20"><expr pos:start="1557:14" pos:end="1557:18"><name pos:start="1557:14" pos:end="1557:18">dflag</name></expr> ?</condition><then pos:start="1557:22" pos:end="1557:28"> <expr pos:start="1557:22" pos:end="1557:28"><name pos:start="1557:22" pos:end="1557:28">OT_LONG</name></expr> </then><else pos:start="1557:30" pos:end="1557:38">: <expr pos:start="1557:32" pos:end="1557:38"><name pos:start="1557:32" pos:end="1557:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1559:9" pos:end="1559:30"><expr pos:start="1559:9" pos:end="1559:29"><name pos:start="1559:9" pos:end="1559:11">val</name> <operator pos:start="1559:13" pos:end="1559:13">=</operator> <call pos:start="1559:15" pos:end="1559:29"><name pos:start="1559:15" pos:end="1559:22">insn_get</name><argument_list pos:start="1559:23" pos:end="1559:29">(<argument pos:start="1559:24" pos:end="1559:24"><expr pos:start="1559:24" pos:end="1559:24"><name pos:start="1559:24" pos:end="1559:24">s</name></expr></argument>, <argument pos:start="1559:27" pos:end="1559:28"><expr pos:start="1559:27" pos:end="1559:28"><name pos:start="1559:27" pos:end="1559:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1561:9" pos:end="1561:31"><expr pos:start="1561:9" pos:end="1561:30"><name pos:start="1561:9" pos:end="1561:11">reg</name> <operator pos:start="1561:13" pos:end="1561:13">=</operator> <name pos:start="1561:15" pos:end="1561:20">OR_EAX</name> <operator pos:start="1561:22" pos:end="1561:22">+</operator> <operator pos:start="1561:24" pos:end="1561:24">(</operator><name pos:start="1561:25" pos:end="1561:25">b</name> <operator pos:start="1561:27" pos:end="1561:27">&amp;</operator> <literal type="number" pos:start="1561:29" pos:end="1561:29">7</literal><operator pos:start="1561:30" pos:end="1561:30">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1563:9" pos:end="1563:31"><expr pos:start="1563:9" pos:end="1563:30"><call pos:start="1563:9" pos:end="1563:30"><name pos:start="1563:9" pos:end="1563:25">gen_op_movl_T0_im</name><argument_list pos:start="1563:26" pos:end="1563:30">(<argument pos:start="1563:27" pos:end="1563:29"><expr pos:start="1563:27" pos:end="1563:29"><name pos:start="1563:27" pos:end="1563:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1565:9" pos:end="1565:37"><expr pos:start="1565:9" pos:end="1565:36"><name pos:start="1565:9" pos:end="1565:34"><name pos:start="1565:9" pos:end="1565:25">gen_op_mov_reg_T0</name><index pos:start="1565:26" pos:end="1565:29">[<expr pos:start="1565:27" pos:end="1565:28"><name pos:start="1565:27" pos:end="1565:28">ot</name></expr>]</index><index pos:start="1565:30" pos:end="1565:34">[<expr pos:start="1565:31" pos:end="1565:33"><name pos:start="1565:31" pos:end="1565:33">reg</name></expr>]</index></name><operator pos:start="1565:35" pos:end="1565:35">(</operator><operator pos:start="1565:36" pos:end="1565:36">)</operator></expr>;</expr_stmt>

        <break pos:start="1567:9" pos:end="1567:14">break;</break>



    <case pos:start="1571:5" pos:end="1571:23">case <expr pos:start="1571:10" pos:end="1571:22"><literal type="number" pos:start="1571:10" pos:end="1571:13">0x91</literal> <operator pos:start="1571:15" pos:end="1571:17">...</operator> <literal type="number" pos:start="1571:19" pos:end="1571:22">0x97</literal></expr>:</case> <comment type="block" pos:start="1571:25" pos:end="1571:41">/* xchg R, EAX */</comment>

        <expr_stmt pos:start="1573:9" pos:end="1573:39"><expr pos:start="1573:9" pos:end="1573:38"><name pos:start="1573:9" pos:end="1573:10">ot</name> <operator pos:start="1573:12" pos:end="1573:12">=</operator> <ternary pos:start="1573:14" pos:end="1573:38"><condition pos:start="1573:14" pos:end="1573:20"><expr pos:start="1573:14" pos:end="1573:18"><name pos:start="1573:14" pos:end="1573:18">dflag</name></expr> ?</condition><then pos:start="1573:22" pos:end="1573:28"> <expr pos:start="1573:22" pos:end="1573:28"><name pos:start="1573:22" pos:end="1573:28">OT_LONG</name></expr> </then><else pos:start="1573:30" pos:end="1573:38">: <expr pos:start="1573:32" pos:end="1573:38"><name pos:start="1573:32" pos:end="1573:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1575:9" pos:end="1575:20"><expr pos:start="1575:9" pos:end="1575:19"><name pos:start="1575:9" pos:end="1575:11">reg</name> <operator pos:start="1575:13" pos:end="1575:13">=</operator> <name pos:start="1575:15" pos:end="1575:15">b</name> <operator pos:start="1575:17" pos:end="1575:17">&amp;</operator> <literal type="number" pos:start="1575:19" pos:end="1575:19">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1577:9" pos:end="1577:19"><expr pos:start="1577:9" pos:end="1577:18"><name pos:start="1577:9" pos:end="1577:10">rm</name> <operator pos:start="1577:12" pos:end="1577:12">=</operator> <name pos:start="1577:14" pos:end="1577:18">R_EAX</name></expr>;</expr_stmt>

        <goto pos:start="1579:9" pos:end="1579:25">goto <name pos:start="1579:14" pos:end="1579:24">do_xchg_reg</name>;</goto>

    <case pos:start="1581:5" pos:end="1581:14">case <expr pos:start="1581:10" pos:end="1581:13"><literal type="number" pos:start="1581:10" pos:end="1581:13">0x86</literal></expr>:</case>

    <case pos:start="1583:5" pos:end="1583:14">case <expr pos:start="1583:10" pos:end="1583:13"><literal type="number" pos:start="1583:10" pos:end="1583:13">0x87</literal></expr>:</case> <comment type="block" pos:start="1583:16" pos:end="1583:32">/* xchg Ev, Gv */</comment>

        <if_stmt pos:start="1585:9" pos:end="1591:43"><if pos:start="1585:9" pos:end="1587:25">if <condition pos:start="1585:12" pos:end="1585:25">(<expr pos:start="1585:13" pos:end="1585:24"><operator pos:start="1585:13" pos:end="1585:13">(</operator><name pos:start="1585:14" pos:end="1585:14">b</name> <operator pos:start="1585:16" pos:end="1585:16">&amp;</operator> <literal type="number" pos:start="1585:18" pos:end="1585:18">1</literal><operator pos:start="1585:19" pos:end="1585:19">)</operator> <operator pos:start="1585:21" pos:end="1585:22">==</operator> <literal type="number" pos:start="1585:24" pos:end="1585:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1587:13" pos:end="1587:25"><block_content pos:start="1587:13" pos:end="1587:25">

            <expr_stmt pos:start="1587:13" pos:end="1587:25"><expr pos:start="1587:13" pos:end="1587:24"><name pos:start="1587:13" pos:end="1587:14">ot</name> <operator pos:start="1587:16" pos:end="1587:16">=</operator> <name pos:start="1587:18" pos:end="1587:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1589:9" pos:end="1591:43">else<block type="pseudo" pos:start="1591:13" pos:end="1591:43"><block_content pos:start="1591:13" pos:end="1591:43">

            <expr_stmt pos:start="1591:13" pos:end="1591:43"><expr pos:start="1591:13" pos:end="1591:42"><name pos:start="1591:13" pos:end="1591:14">ot</name> <operator pos:start="1591:16" pos:end="1591:16">=</operator> <ternary pos:start="1591:18" pos:end="1591:42"><condition pos:start="1591:18" pos:end="1591:24"><expr pos:start="1591:18" pos:end="1591:22"><name pos:start="1591:18" pos:end="1591:22">dflag</name></expr> ?</condition><then pos:start="1591:26" pos:end="1591:32"> <expr pos:start="1591:26" pos:end="1591:32"><name pos:start="1591:26" pos:end="1591:32">OT_LONG</name></expr> </then><else pos:start="1591:34" pos:end="1591:42">: <expr pos:start="1591:36" pos:end="1591:42"><name pos:start="1591:36" pos:end="1591:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1593:9" pos:end="1593:30"><expr pos:start="1593:9" pos:end="1593:29"><name pos:start="1593:9" pos:end="1593:13">modrm</name> <operator pos:start="1593:15" pos:end="1593:15">=</operator> <call pos:start="1593:17" pos:end="1593:29"><name pos:start="1593:17" pos:end="1593:20">ldub</name><argument_list pos:start="1593:21" pos:end="1593:29">(<argument pos:start="1593:22" pos:end="1593:28"><expr pos:start="1593:22" pos:end="1593:28"><name pos:start="1593:22" pos:end="1593:26"><name pos:start="1593:22" pos:end="1593:22">s</name><operator pos:start="1593:23" pos:end="1593:24">-&gt;</operator><name pos:start="1593:25" pos:end="1593:26">pc</name></name><operator pos:start="1593:27" pos:end="1593:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1595:9" pos:end="1595:31"><expr pos:start="1595:9" pos:end="1595:30"><name pos:start="1595:9" pos:end="1595:11">reg</name> <operator pos:start="1595:13" pos:end="1595:13">=</operator> <operator pos:start="1595:15" pos:end="1595:15">(</operator><name pos:start="1595:16" pos:end="1595:20">modrm</name> <operator pos:start="1595:22" pos:end="1595:23">&gt;&gt;</operator> <literal type="number" pos:start="1595:25" pos:end="1595:25">3</literal><operator pos:start="1595:26" pos:end="1595:26">)</operator> <operator pos:start="1595:28" pos:end="1595:28">&amp;</operator> <literal type="number" pos:start="1595:30" pos:end="1595:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1597:9" pos:end="1597:31"><expr pos:start="1597:9" pos:end="1597:30"><name pos:start="1597:9" pos:end="1597:11">mod</name> <operator pos:start="1597:13" pos:end="1597:13">=</operator> <operator pos:start="1597:15" pos:end="1597:15">(</operator><name pos:start="1597:16" pos:end="1597:20">modrm</name> <operator pos:start="1597:22" pos:end="1597:23">&gt;&gt;</operator> <literal type="number" pos:start="1597:25" pos:end="1597:25">6</literal><operator pos:start="1597:26" pos:end="1597:26">)</operator> <operator pos:start="1597:28" pos:end="1597:28">&amp;</operator> <literal type="number" pos:start="1597:30" pos:end="1597:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1599:9" pos:end="1635:9"><if pos:start="1599:9" pos:end="1613:9">if <condition pos:start="1599:12" pos:end="1599:21">(<expr pos:start="1599:13" pos:end="1599:20"><name pos:start="1599:13" pos:end="1599:15">mod</name> <operator pos:start="1599:17" pos:end="1599:18">==</operator> <literal type="number" pos:start="1599:20" pos:end="1599:20">3</literal></expr>)</condition> <block pos:start="1599:23" pos:end="1613:9">{<block_content pos:start="1601:13" pos:end="1611:41">

            <expr_stmt pos:start="1601:13" pos:end="1601:27"><expr pos:start="1601:13" pos:end="1601:26"><name pos:start="1601:13" pos:end="1601:14">rm</name> <operator pos:start="1601:16" pos:end="1601:16">=</operator> <name pos:start="1601:18" pos:end="1601:22">modrm</name> <operator pos:start="1601:24" pos:end="1601:24">&amp;</operator> <literal type="number" pos:start="1601:26" pos:end="1601:26">7</literal></expr>;</expr_stmt>

        <label pos:start="1603:9" pos:end="1603:20"><name pos:start="1603:9" pos:end="1603:19">do_xchg_reg</name>:</label>

            <expr_stmt pos:start="1605:13" pos:end="1605:44"><expr pos:start="1605:13" pos:end="1605:43"><name pos:start="1605:13" pos:end="1605:41"><name pos:start="1605:13" pos:end="1605:29">gen_op_mov_TN_reg</name><index pos:start="1605:30" pos:end="1605:33">[<expr pos:start="1605:31" pos:end="1605:32"><name pos:start="1605:31" pos:end="1605:32">ot</name></expr>]</index><index pos:start="1605:34" pos:end="1605:36">[<expr pos:start="1605:35" pos:end="1605:35"><literal type="number" pos:start="1605:35" pos:end="1605:35">0</literal></expr>]</index><index pos:start="1605:37" pos:end="1605:41">[<expr pos:start="1605:38" pos:end="1605:40"><name pos:start="1605:38" pos:end="1605:40">reg</name></expr>]</index></name><operator pos:start="1605:42" pos:end="1605:42">(</operator><operator pos:start="1605:43" pos:end="1605:43">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1607:13" pos:end="1607:43"><expr pos:start="1607:13" pos:end="1607:42"><name pos:start="1607:13" pos:end="1607:40"><name pos:start="1607:13" pos:end="1607:29">gen_op_mov_TN_reg</name><index pos:start="1607:30" pos:end="1607:33">[<expr pos:start="1607:31" pos:end="1607:32"><name pos:start="1607:31" pos:end="1607:32">ot</name></expr>]</index><index pos:start="1607:34" pos:end="1607:36">[<expr pos:start="1607:35" pos:end="1607:35"><literal type="number" pos:start="1607:35" pos:end="1607:35">1</literal></expr>]</index><index pos:start="1607:37" pos:end="1607:40">[<expr pos:start="1607:38" pos:end="1607:39"><name pos:start="1607:38" pos:end="1607:39">rm</name></expr>]</index></name><operator pos:start="1607:41" pos:end="1607:41">(</operator><operator pos:start="1607:42" pos:end="1607:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1609:13" pos:end="1609:40"><expr pos:start="1609:13" pos:end="1609:39"><name pos:start="1609:13" pos:end="1609:37"><name pos:start="1609:13" pos:end="1609:29">gen_op_mov_reg_T0</name><index pos:start="1609:30" pos:end="1609:33">[<expr pos:start="1609:31" pos:end="1609:32"><name pos:start="1609:31" pos:end="1609:32">ot</name></expr>]</index><index pos:start="1609:34" pos:end="1609:37">[<expr pos:start="1609:35" pos:end="1609:36"><name pos:start="1609:35" pos:end="1609:36">rm</name></expr>]</index></name><operator pos:start="1609:38" pos:end="1609:38">(</operator><operator pos:start="1609:39" pos:end="1609:39">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1611:13" pos:end="1611:41"><expr pos:start="1611:13" pos:end="1611:40"><name pos:start="1611:13" pos:end="1611:38"><name pos:start="1611:13" pos:end="1611:29">gen_op_mov_reg_T1</name><index pos:start="1611:30" pos:end="1611:33">[<expr pos:start="1611:31" pos:end="1611:32"><name pos:start="1611:31" pos:end="1611:32">ot</name></expr>]</index><index pos:start="1611:34" pos:end="1611:38">[<expr pos:start="1611:35" pos:end="1611:37"><name pos:start="1611:35" pos:end="1611:37">reg</name></expr>]</index></name><operator pos:start="1611:39" pos:end="1611:39">(</operator><operator pos:start="1611:40" pos:end="1611:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1613:11" pos:end="1635:9">else <block pos:start="1613:16" pos:end="1635:9">{<block_content pos:start="1615:13" pos:end="1633:41">

            <expr_stmt pos:start="1615:13" pos:end="1615:61"><expr pos:start="1615:13" pos:end="1615:60"><call pos:start="1615:13" pos:end="1615:60"><name pos:start="1615:13" pos:end="1615:25">gen_lea_modrm</name><argument_list pos:start="1615:26" pos:end="1615:60">(<argument pos:start="1615:27" pos:end="1615:27"><expr pos:start="1615:27" pos:end="1615:27"><name pos:start="1615:27" pos:end="1615:27">s</name></expr></argument>, <argument pos:start="1615:30" pos:end="1615:34"><expr pos:start="1615:30" pos:end="1615:34"><name pos:start="1615:30" pos:end="1615:34">modrm</name></expr></argument>, <argument pos:start="1615:37" pos:end="1615:45"><expr pos:start="1615:37" pos:end="1615:45"><operator pos:start="1615:37" pos:end="1615:37">&amp;</operator><name pos:start="1615:38" pos:end="1615:45">reg_addr</name></expr></argument>, <argument pos:start="1615:48" pos:end="1615:59"><expr pos:start="1615:48" pos:end="1615:59"><operator pos:start="1615:48" pos:end="1615:48">&amp;</operator><name pos:start="1615:49" pos:end="1615:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1617:13" pos:end="1617:44"><expr pos:start="1617:13" pos:end="1617:43"><name pos:start="1617:13" pos:end="1617:41"><name pos:start="1617:13" pos:end="1617:29">gen_op_mov_TN_reg</name><index pos:start="1617:30" pos:end="1617:33">[<expr pos:start="1617:31" pos:end="1617:32"><name pos:start="1617:31" pos:end="1617:32">ot</name></expr>]</index><index pos:start="1617:34" pos:end="1617:36">[<expr pos:start="1617:35" pos:end="1617:35"><literal type="number" pos:start="1617:35" pos:end="1617:35">0</literal></expr>]</index><index pos:start="1617:37" pos:end="1617:41">[<expr pos:start="1617:38" pos:end="1617:40"><name pos:start="1617:38" pos:end="1617:40">reg</name></expr>]</index></name><operator pos:start="1617:42" pos:end="1617:42">(</operator><operator pos:start="1617:43" pos:end="1617:43">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="1619:13" pos:end="1619:44">/* for xchg, lock is implicit */</comment>

            <if_stmt pos:start="1621:13" pos:end="1623:30"><if pos:start="1621:13" pos:end="1623:30">if <condition pos:start="1621:16" pos:end="1621:42">(<expr pos:start="1621:17" pos:end="1621:41"><operator pos:start="1621:17" pos:end="1621:17">!</operator><operator pos:start="1621:18" pos:end="1621:18">(</operator><name pos:start="1621:19" pos:end="1621:26">prefixes</name> <operator pos:start="1621:28" pos:end="1621:28">&amp;</operator> <name pos:start="1621:30" pos:end="1621:40">PREFIX_LOCK</name><operator pos:start="1621:41" pos:end="1621:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1623:17" pos:end="1623:30"><block_content pos:start="1623:17" pos:end="1623:30">

                <expr_stmt pos:start="1623:17" pos:end="1623:30"><expr pos:start="1623:17" pos:end="1623:29"><call pos:start="1623:17" pos:end="1623:29"><name pos:start="1623:17" pos:end="1623:27">gen_op_lock</name><argument_list pos:start="1623:28" pos:end="1623:29">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1625:13" pos:end="1625:34"><expr pos:start="1625:13" pos:end="1625:33"><name pos:start="1625:13" pos:end="1625:31"><name pos:start="1625:13" pos:end="1625:27">gen_op_ld_T1_A0</name><index pos:start="1625:28" pos:end="1625:31">[<expr pos:start="1625:29" pos:end="1625:30"><name pos:start="1625:29" pos:end="1625:30">ot</name></expr>]</index></name><operator pos:start="1625:32" pos:end="1625:32">(</operator><operator pos:start="1625:33" pos:end="1625:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1627:13" pos:end="1627:34"><expr pos:start="1627:13" pos:end="1627:33"><name pos:start="1627:13" pos:end="1627:31"><name pos:start="1627:13" pos:end="1627:27">gen_op_st_T0_A0</name><index pos:start="1627:28" pos:end="1627:31">[<expr pos:start="1627:29" pos:end="1627:30"><name pos:start="1627:29" pos:end="1627:30">ot</name></expr>]</index></name><operator pos:start="1627:32" pos:end="1627:32">(</operator><operator pos:start="1627:33" pos:end="1627:33">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="1629:13" pos:end="1631:32"><if pos:start="1629:13" pos:end="1631:32">if <condition pos:start="1629:16" pos:end="1629:42">(<expr pos:start="1629:17" pos:end="1629:41"><operator pos:start="1629:17" pos:end="1629:17">!</operator><operator pos:start="1629:18" pos:end="1629:18">(</operator><name pos:start="1629:19" pos:end="1629:26">prefixes</name> <operator pos:start="1629:28" pos:end="1629:28">&amp;</operator> <name pos:start="1629:30" pos:end="1629:40">PREFIX_LOCK</name><operator pos:start="1629:41" pos:end="1629:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1631:17" pos:end="1631:32"><block_content pos:start="1631:17" pos:end="1631:32">

                <expr_stmt pos:start="1631:17" pos:end="1631:32"><expr pos:start="1631:17" pos:end="1631:31"><call pos:start="1631:17" pos:end="1631:31"><name pos:start="1631:17" pos:end="1631:29">gen_op_unlock</name><argument_list pos:start="1631:30" pos:end="1631:31">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1633:13" pos:end="1633:41"><expr pos:start="1633:13" pos:end="1633:40"><name pos:start="1633:13" pos:end="1633:38"><name pos:start="1633:13" pos:end="1633:29">gen_op_mov_reg_T1</name><index pos:start="1633:30" pos:end="1633:33">[<expr pos:start="1633:31" pos:end="1633:32"><name pos:start="1633:31" pos:end="1633:32">ot</name></expr>]</index><index pos:start="1633:34" pos:end="1633:38">[<expr pos:start="1633:35" pos:end="1633:37"><name pos:start="1633:35" pos:end="1633:37">reg</name></expr>]</index></name><operator pos:start="1633:39" pos:end="1633:39">(</operator><operator pos:start="1633:40" pos:end="1633:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1637:9" pos:end="1637:14">break;</break>

    <case pos:start="1639:5" pos:end="1639:14">case <expr pos:start="1639:10" pos:end="1639:13"><literal type="number" pos:start="1639:10" pos:end="1639:13">0xc4</literal></expr>:</case> <comment type="block" pos:start="1639:16" pos:end="1639:27">/* les Gv */</comment>

        <expr_stmt pos:start="1641:9" pos:end="1641:18"><expr pos:start="1641:9" pos:end="1641:17"><name pos:start="1641:9" pos:end="1641:10">op</name> <operator pos:start="1641:12" pos:end="1641:12">=</operator> <name pos:start="1641:14" pos:end="1641:17">R_ES</name></expr>;</expr_stmt>

        <goto pos:start="1643:9" pos:end="1643:20">goto <name pos:start="1643:14" pos:end="1643:19">do_lxx</name>;</goto>

    <case pos:start="1645:5" pos:end="1645:14">case <expr pos:start="1645:10" pos:end="1645:13"><literal type="number" pos:start="1645:10" pos:end="1645:13">0xc5</literal></expr>:</case> <comment type="block" pos:start="1645:16" pos:end="1645:27">/* lds Gv */</comment>

        <expr_stmt pos:start="1647:9" pos:end="1647:18"><expr pos:start="1647:9" pos:end="1647:17"><name pos:start="1647:9" pos:end="1647:10">op</name> <operator pos:start="1647:12" pos:end="1647:12">=</operator> <name pos:start="1647:14" pos:end="1647:17">R_DS</name></expr>;</expr_stmt>

        <goto pos:start="1649:9" pos:end="1649:20">goto <name pos:start="1649:14" pos:end="1649:19">do_lxx</name>;</goto>

    <case pos:start="1651:5" pos:end="1651:15">case <expr pos:start="1651:10" pos:end="1651:14"><literal type="number" pos:start="1651:10" pos:end="1651:14">0x1b2</literal></expr>:</case> <comment type="block" pos:start="1651:17" pos:end="1651:28">/* lss Gv */</comment>

        <expr_stmt pos:start="1653:9" pos:end="1653:18"><expr pos:start="1653:9" pos:end="1653:17"><name pos:start="1653:9" pos:end="1653:10">op</name> <operator pos:start="1653:12" pos:end="1653:12">=</operator> <name pos:start="1653:14" pos:end="1653:17">R_SS</name></expr>;</expr_stmt>

        <goto pos:start="1655:9" pos:end="1655:20">goto <name pos:start="1655:14" pos:end="1655:19">do_lxx</name>;</goto>

    <case pos:start="1657:5" pos:end="1657:15">case <expr pos:start="1657:10" pos:end="1657:14"><literal type="number" pos:start="1657:10" pos:end="1657:14">0x1b4</literal></expr>:</case> <comment type="block" pos:start="1657:17" pos:end="1657:28">/* lfs Gv */</comment>

        <expr_stmt pos:start="1659:9" pos:end="1659:18"><expr pos:start="1659:9" pos:end="1659:17"><name pos:start="1659:9" pos:end="1659:10">op</name> <operator pos:start="1659:12" pos:end="1659:12">=</operator> <name pos:start="1659:14" pos:end="1659:17">R_FS</name></expr>;</expr_stmt>

        <goto pos:start="1661:9" pos:end="1661:20">goto <name pos:start="1661:14" pos:end="1661:19">do_lxx</name>;</goto>

    <case pos:start="1663:5" pos:end="1663:15">case <expr pos:start="1663:10" pos:end="1663:14"><literal type="number" pos:start="1663:10" pos:end="1663:14">0x1b5</literal></expr>:</case> <comment type="block" pos:start="1663:17" pos:end="1663:28">/* lgs Gv */</comment>

        <expr_stmt pos:start="1665:9" pos:end="1665:18"><expr pos:start="1665:9" pos:end="1665:17"><name pos:start="1665:9" pos:end="1665:10">op</name> <operator pos:start="1665:12" pos:end="1665:12">=</operator> <name pos:start="1665:14" pos:end="1665:17">R_GS</name></expr>;</expr_stmt>

    <label pos:start="1667:5" pos:end="1667:11"><name pos:start="1667:5" pos:end="1667:10">do_lxx</name>:</label>

        <expr_stmt pos:start="1669:9" pos:end="1669:39"><expr pos:start="1669:9" pos:end="1669:38"><name pos:start="1669:9" pos:end="1669:10">ot</name> <operator pos:start="1669:12" pos:end="1669:12">=</operator> <ternary pos:start="1669:14" pos:end="1669:38"><condition pos:start="1669:14" pos:end="1669:20"><expr pos:start="1669:14" pos:end="1669:18"><name pos:start="1669:14" pos:end="1669:18">dflag</name></expr> ?</condition><then pos:start="1669:22" pos:end="1669:28"> <expr pos:start="1669:22" pos:end="1669:28"><name pos:start="1669:22" pos:end="1669:28">OT_LONG</name></expr> </then><else pos:start="1669:30" pos:end="1669:38">: <expr pos:start="1669:32" pos:end="1669:38"><name pos:start="1669:32" pos:end="1669:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1671:9" pos:end="1671:30"><expr pos:start="1671:9" pos:end="1671:29"><name pos:start="1671:9" pos:end="1671:13">modrm</name> <operator pos:start="1671:15" pos:end="1671:15">=</operator> <call pos:start="1671:17" pos:end="1671:29"><name pos:start="1671:17" pos:end="1671:20">ldub</name><argument_list pos:start="1671:21" pos:end="1671:29">(<argument pos:start="1671:22" pos:end="1671:28"><expr pos:start="1671:22" pos:end="1671:28"><name pos:start="1671:22" pos:end="1671:26"><name pos:start="1671:22" pos:end="1671:22">s</name><operator pos:start="1671:23" pos:end="1671:24">-&gt;</operator><name pos:start="1671:25" pos:end="1671:26">pc</name></name><operator pos:start="1671:27" pos:end="1671:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1673:9" pos:end="1673:31"><expr pos:start="1673:9" pos:end="1673:30"><name pos:start="1673:9" pos:end="1673:11">reg</name> <operator pos:start="1673:13" pos:end="1673:13">=</operator> <operator pos:start="1673:15" pos:end="1673:15">(</operator><name pos:start="1673:16" pos:end="1673:20">modrm</name> <operator pos:start="1673:22" pos:end="1673:23">&gt;&gt;</operator> <literal type="number" pos:start="1673:25" pos:end="1673:25">3</literal><operator pos:start="1673:26" pos:end="1673:26">)</operator> <operator pos:start="1673:28" pos:end="1673:28">&amp;</operator> <literal type="number" pos:start="1673:30" pos:end="1673:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1675:9" pos:end="1675:31"><expr pos:start="1675:9" pos:end="1675:30"><name pos:start="1675:9" pos:end="1675:11">mod</name> <operator pos:start="1675:13" pos:end="1675:13">=</operator> <operator pos:start="1675:15" pos:end="1675:15">(</operator><name pos:start="1675:16" pos:end="1675:20">modrm</name> <operator pos:start="1675:22" pos:end="1675:23">&gt;&gt;</operator> <literal type="number" pos:start="1675:25" pos:end="1675:25">6</literal><operator pos:start="1675:26" pos:end="1675:26">)</operator> <operator pos:start="1675:28" pos:end="1675:28">&amp;</operator> <literal type="number" pos:start="1675:30" pos:end="1675:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1677:9" pos:end="1679:28"><if pos:start="1677:9" pos:end="1679:28">if <condition pos:start="1677:12" pos:end="1677:21">(<expr pos:start="1677:13" pos:end="1677:20"><name pos:start="1677:13" pos:end="1677:15">mod</name> <operator pos:start="1677:17" pos:end="1677:18">==</operator> <literal type="number" pos:start="1677:20" pos:end="1677:20">3</literal></expr>)</condition><block type="pseudo" pos:start="1679:13" pos:end="1679:28"><block_content pos:start="1679:13" pos:end="1679:28">

            <goto pos:start="1679:13" pos:end="1679:28">goto <name pos:start="1679:18" pos:end="1679:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1681:9" pos:end="1681:57"><expr pos:start="1681:9" pos:end="1681:56"><call pos:start="1681:9" pos:end="1681:56"><name pos:start="1681:9" pos:end="1681:21">gen_lea_modrm</name><argument_list pos:start="1681:22" pos:end="1681:56">(<argument pos:start="1681:23" pos:end="1681:23"><expr pos:start="1681:23" pos:end="1681:23"><name pos:start="1681:23" pos:end="1681:23">s</name></expr></argument>, <argument pos:start="1681:26" pos:end="1681:30"><expr pos:start="1681:26" pos:end="1681:30"><name pos:start="1681:26" pos:end="1681:30">modrm</name></expr></argument>, <argument pos:start="1681:33" pos:end="1681:41"><expr pos:start="1681:33" pos:end="1681:41"><operator pos:start="1681:33" pos:end="1681:33">&amp;</operator><name pos:start="1681:34" pos:end="1681:41">reg_addr</name></expr></argument>, <argument pos:start="1681:44" pos:end="1681:55"><expr pos:start="1681:44" pos:end="1681:55"><operator pos:start="1681:44" pos:end="1681:44">&amp;</operator><name pos:start="1681:45" pos:end="1681:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1683:9" pos:end="1683:30"><expr pos:start="1683:9" pos:end="1683:29"><name pos:start="1683:9" pos:end="1683:27"><name pos:start="1683:9" pos:end="1683:23">gen_op_ld_T1_A0</name><index pos:start="1683:24" pos:end="1683:27">[<expr pos:start="1683:25" pos:end="1683:26"><name pos:start="1683:25" pos:end="1683:26">ot</name></expr>]</index></name><operator pos:start="1683:28" pos:end="1683:28">(</operator><operator pos:start="1683:29" pos:end="1683:29">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1685:9" pos:end="1685:51"><expr pos:start="1685:9" pos:end="1685:50"><call pos:start="1685:9" pos:end="1685:50"><name pos:start="1685:9" pos:end="1685:25">gen_op_addl_A0_im</name><argument_list pos:start="1685:26" pos:end="1685:50">(<argument pos:start="1685:27" pos:end="1685:49"><expr pos:start="1685:27" pos:end="1685:49"><literal type="number" pos:start="1685:27" pos:end="1685:27">1</literal> <operator pos:start="1685:29" pos:end="1685:30">&lt;&lt;</operator> <operator pos:start="1685:32" pos:end="1685:32">(</operator><name pos:start="1685:33" pos:end="1685:34">ot</name> <operator pos:start="1685:36" pos:end="1685:36">-</operator> <name pos:start="1685:38" pos:end="1685:44">OT_WORD</name> <operator pos:start="1685:46" pos:end="1685:46">+</operator> <literal type="number" pos:start="1685:48" pos:end="1685:48">1</literal><operator pos:start="1685:49" pos:end="1685:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1687:9" pos:end="1687:66">/* load the segment first to handle exceptions properly */</comment>

        <expr_stmt pos:start="1689:9" pos:end="1689:28"><expr pos:start="1689:9" pos:end="1689:27"><call pos:start="1689:9" pos:end="1689:27"><name pos:start="1689:9" pos:end="1689:25">gen_op_lduw_T0_A0</name><argument_list pos:start="1689:26" pos:end="1689:27">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1691:9" pos:end="1691:31"><expr pos:start="1691:9" pos:end="1691:30"><call pos:start="1691:9" pos:end="1691:30"><name pos:start="1691:9" pos:end="1691:23">gen_movl_seg_T0</name><argument_list pos:start="1691:24" pos:end="1691:30">(<argument pos:start="1691:25" pos:end="1691:25"><expr pos:start="1691:25" pos:end="1691:25"><name pos:start="1691:25" pos:end="1691:25">s</name></expr></argument>, <argument pos:start="1691:28" pos:end="1691:29"><expr pos:start="1691:28" pos:end="1691:29"><name pos:start="1691:28" pos:end="1691:29">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1693:9" pos:end="1693:31">/* then put the data */</comment>

        <expr_stmt pos:start="1695:9" pos:end="1695:37"><expr pos:start="1695:9" pos:end="1695:36"><name pos:start="1695:9" pos:end="1695:34"><name pos:start="1695:9" pos:end="1695:25">gen_op_mov_reg_T1</name><index pos:start="1695:26" pos:end="1695:29">[<expr pos:start="1695:27" pos:end="1695:28"><name pos:start="1695:27" pos:end="1695:28">ot</name></expr>]</index><index pos:start="1695:30" pos:end="1695:34">[<expr pos:start="1695:31" pos:end="1695:33"><name pos:start="1695:31" pos:end="1695:33">reg</name></expr>]</index></name><operator pos:start="1695:35" pos:end="1695:35">(</operator><operator pos:start="1695:36" pos:end="1695:36">)</operator></expr>;</expr_stmt>

        <break pos:start="1697:9" pos:end="1697:14">break;</break>

        

        <comment type="block" format="doxygen" pos:start="1701:9" pos:end="1701:34">/************************/</comment>

        <comment type="block" pos:start="1703:9" pos:end="1703:20">/* shifts */</comment>

    <case pos:start="1705:5" pos:end="1705:14">case <expr pos:start="1705:10" pos:end="1705:13"><literal type="number" pos:start="1705:10" pos:end="1705:13">0xc0</literal></expr>:</case>

    <case pos:start="1707:5" pos:end="1707:14">case <expr pos:start="1707:10" pos:end="1707:13"><literal type="number" pos:start="1707:10" pos:end="1707:13">0xc1</literal></expr>:</case>

        <comment type="block" pos:start="1709:9" pos:end="1709:25">/* shift Ev,Ib */</comment>

        <expr_stmt pos:start="1711:9" pos:end="1711:18"><expr pos:start="1711:9" pos:end="1711:17"><name pos:start="1711:9" pos:end="1711:13">shift</name> <operator pos:start="1711:15" pos:end="1711:15">=</operator> <literal type="number" pos:start="1711:17" pos:end="1711:17">2</literal></expr>;</expr_stmt>

    <label pos:start="1713:5" pos:end="1713:9"><name pos:start="1713:5" pos:end="1713:8">grp2</name>:</label>

        <block pos:start="1715:9" pos:end="1779:9">{<block_content pos:start="1717:13" pos:end="1777:13">

            <if_stmt pos:start="1717:13" pos:end="1723:47"><if pos:start="1717:13" pos:end="1719:29">if <condition pos:start="1717:16" pos:end="1717:29">(<expr pos:start="1717:17" pos:end="1717:28"><operator pos:start="1717:17" pos:end="1717:17">(</operator><name pos:start="1717:18" pos:end="1717:18">b</name> <operator pos:start="1717:20" pos:end="1717:20">&amp;</operator> <literal type="number" pos:start="1717:22" pos:end="1717:22">1</literal><operator pos:start="1717:23" pos:end="1717:23">)</operator> <operator pos:start="1717:25" pos:end="1717:26">==</operator> <literal type="number" pos:start="1717:28" pos:end="1717:28">0</literal></expr>)</condition><block type="pseudo" pos:start="1719:17" pos:end="1719:29"><block_content pos:start="1719:17" pos:end="1719:29">

                <expr_stmt pos:start="1719:17" pos:end="1719:29"><expr pos:start="1719:17" pos:end="1719:28"><name pos:start="1719:17" pos:end="1719:18">ot</name> <operator pos:start="1719:20" pos:end="1719:20">=</operator> <name pos:start="1719:22" pos:end="1719:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1721:13" pos:end="1723:47">else<block type="pseudo" pos:start="1723:17" pos:end="1723:47"><block_content pos:start="1723:17" pos:end="1723:47">

                <expr_stmt pos:start="1723:17" pos:end="1723:47"><expr pos:start="1723:17" pos:end="1723:46"><name pos:start="1723:17" pos:end="1723:18">ot</name> <operator pos:start="1723:20" pos:end="1723:20">=</operator> <ternary pos:start="1723:22" pos:end="1723:46"><condition pos:start="1723:22" pos:end="1723:28"><expr pos:start="1723:22" pos:end="1723:26"><name pos:start="1723:22" pos:end="1723:26">dflag</name></expr> ?</condition><then pos:start="1723:30" pos:end="1723:36"> <expr pos:start="1723:30" pos:end="1723:36"><name pos:start="1723:30" pos:end="1723:36">OT_LONG</name></expr> </then><else pos:start="1723:38" pos:end="1723:46">: <expr pos:start="1723:40" pos:end="1723:46"><name pos:start="1723:40" pos:end="1723:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            

            <expr_stmt pos:start="1727:13" pos:end="1727:34"><expr pos:start="1727:13" pos:end="1727:33"><name pos:start="1727:13" pos:end="1727:17">modrm</name> <operator pos:start="1727:19" pos:end="1727:19">=</operator> <call pos:start="1727:21" pos:end="1727:33"><name pos:start="1727:21" pos:end="1727:24">ldub</name><argument_list pos:start="1727:25" pos:end="1727:33">(<argument pos:start="1727:26" pos:end="1727:32"><expr pos:start="1727:26" pos:end="1727:32"><name pos:start="1727:26" pos:end="1727:30"><name pos:start="1727:26" pos:end="1727:26">s</name><operator pos:start="1727:27" pos:end="1727:28">-&gt;</operator><name pos:start="1727:29" pos:end="1727:30">pc</name></name><operator pos:start="1727:31" pos:end="1727:32">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1729:13" pos:end="1729:35"><expr pos:start="1729:13" pos:end="1729:34"><name pos:start="1729:13" pos:end="1729:15">mod</name> <operator pos:start="1729:17" pos:end="1729:17">=</operator> <operator pos:start="1729:19" pos:end="1729:19">(</operator><name pos:start="1729:20" pos:end="1729:24">modrm</name> <operator pos:start="1729:26" pos:end="1729:27">&gt;&gt;</operator> <literal type="number" pos:start="1729:29" pos:end="1729:29">6</literal><operator pos:start="1729:30" pos:end="1729:30">)</operator> <operator pos:start="1729:32" pos:end="1729:32">&amp;</operator> <literal type="number" pos:start="1729:34" pos:end="1729:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1731:13" pos:end="1731:27"><expr pos:start="1731:13" pos:end="1731:26"><name pos:start="1731:13" pos:end="1731:14">rm</name> <operator pos:start="1731:16" pos:end="1731:16">=</operator> <name pos:start="1731:18" pos:end="1731:22">modrm</name> <operator pos:start="1731:24" pos:end="1731:24">&amp;</operator> <literal type="number" pos:start="1731:26" pos:end="1731:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1733:13" pos:end="1733:34"><expr pos:start="1733:13" pos:end="1733:33"><name pos:start="1733:13" pos:end="1733:14">op</name> <operator pos:start="1733:16" pos:end="1733:16">=</operator> <operator pos:start="1733:18" pos:end="1733:18">(</operator><name pos:start="1733:19" pos:end="1733:23">modrm</name> <operator pos:start="1733:25" pos:end="1733:26">&gt;&gt;</operator> <literal type="number" pos:start="1733:28" pos:end="1733:28">3</literal><operator pos:start="1733:29" pos:end="1733:29">)</operator> <operator pos:start="1733:31" pos:end="1733:31">&amp;</operator> <literal type="number" pos:start="1733:33" pos:end="1733:33">7</literal></expr>;</expr_stmt>

            

            <if_stmt pos:start="1737:13" pos:end="1749:13"><if pos:start="1737:13" pos:end="1745:13">if <condition pos:start="1737:16" pos:end="1737:25">(<expr pos:start="1737:17" pos:end="1737:24"><name pos:start="1737:17" pos:end="1737:19">mod</name> <operator pos:start="1737:21" pos:end="1737:22">!=</operator> <literal type="number" pos:start="1737:24" pos:end="1737:24">3</literal></expr>)</condition> <block pos:start="1737:27" pos:end="1745:13">{<block_content pos:start="1739:17" pos:end="1743:32">

                <expr_stmt pos:start="1739:17" pos:end="1739:65"><expr pos:start="1739:17" pos:end="1739:64"><call pos:start="1739:17" pos:end="1739:64"><name pos:start="1739:17" pos:end="1739:29">gen_lea_modrm</name><argument_list pos:start="1739:30" pos:end="1739:64">(<argument pos:start="1739:31" pos:end="1739:31"><expr pos:start="1739:31" pos:end="1739:31"><name pos:start="1739:31" pos:end="1739:31">s</name></expr></argument>, <argument pos:start="1739:34" pos:end="1739:38"><expr pos:start="1739:34" pos:end="1739:38"><name pos:start="1739:34" pos:end="1739:38">modrm</name></expr></argument>, <argument pos:start="1739:41" pos:end="1739:49"><expr pos:start="1739:41" pos:end="1739:49"><operator pos:start="1739:41" pos:end="1739:41">&amp;</operator><name pos:start="1739:42" pos:end="1739:49">reg_addr</name></expr></argument>, <argument pos:start="1739:52" pos:end="1739:63"><expr pos:start="1739:52" pos:end="1739:63"><operator pos:start="1739:52" pos:end="1739:52">&amp;</operator><name pos:start="1739:53" pos:end="1739:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1741:17" pos:end="1741:38"><expr pos:start="1741:17" pos:end="1741:37"><name pos:start="1741:17" pos:end="1741:35"><name pos:start="1741:17" pos:end="1741:31">gen_op_ld_T0_A0</name><index pos:start="1741:32" pos:end="1741:35">[<expr pos:start="1741:33" pos:end="1741:34"><name pos:start="1741:33" pos:end="1741:34">ot</name></expr>]</index></name><operator pos:start="1741:36" pos:end="1741:36">(</operator><operator pos:start="1741:37" pos:end="1741:37">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1743:17" pos:end="1743:32"><expr pos:start="1743:17" pos:end="1743:31"><name pos:start="1743:17" pos:end="1743:21">opreg</name> <operator pos:start="1743:23" pos:end="1743:23">=</operator> <name pos:start="1743:25" pos:end="1743:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1745:15" pos:end="1749:13">else <block pos:start="1745:20" pos:end="1749:13">{<block_content pos:start="1747:17" pos:end="1747:36">

                <expr_stmt pos:start="1747:17" pos:end="1747:36"><expr pos:start="1747:17" pos:end="1747:35"><name pos:start="1747:17" pos:end="1747:21">opreg</name> <operator pos:start="1747:23" pos:end="1747:23">=</operator> <name pos:start="1747:25" pos:end="1747:26">rm</name> <operator pos:start="1747:28" pos:end="1747:28">+</operator> <name pos:start="1747:30" pos:end="1747:35">OR_EAX</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="1753:13" pos:end="1753:28">/* simpler op */</comment>

            <if_stmt pos:start="1755:13" pos:end="1769:13"><if pos:start="1755:13" pos:end="1759:13">if <condition pos:start="1755:16" pos:end="1755:27">(<expr pos:start="1755:17" pos:end="1755:26"><name pos:start="1755:17" pos:end="1755:21">shift</name> <operator pos:start="1755:23" pos:end="1755:24">==</operator> <literal type="number" pos:start="1755:26" pos:end="1755:26">0</literal></expr>)</condition> <block pos:start="1755:29" pos:end="1759:13">{<block_content pos:start="1757:17" pos:end="1757:52">

                <expr_stmt pos:start="1757:17" pos:end="1757:52"><expr pos:start="1757:17" pos:end="1757:51"><call pos:start="1757:17" pos:end="1757:51"><name pos:start="1757:17" pos:end="1757:25">gen_shift</name><argument_list pos:start="1757:26" pos:end="1757:51">(<argument pos:start="1757:27" pos:end="1757:27"><expr pos:start="1757:27" pos:end="1757:27"><name pos:start="1757:27" pos:end="1757:27">s</name></expr></argument>, <argument pos:start="1757:30" pos:end="1757:31"><expr pos:start="1757:30" pos:end="1757:31"><name pos:start="1757:30" pos:end="1757:31">op</name></expr></argument>, <argument pos:start="1757:34" pos:end="1757:35"><expr pos:start="1757:34" pos:end="1757:35"><name pos:start="1757:34" pos:end="1757:35">ot</name></expr></argument>, <argument pos:start="1757:38" pos:end="1757:42"><expr pos:start="1757:38" pos:end="1757:42"><name pos:start="1757:38" pos:end="1757:42">opreg</name></expr></argument>, <argument pos:start="1757:45" pos:end="1757:50"><expr pos:start="1757:45" pos:end="1757:50"><name pos:start="1757:45" pos:end="1757:50">OR_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1759:15" pos:end="1769:13">else <block pos:start="1759:20" pos:end="1769:13">{<block_content pos:start="1761:17" pos:end="1767:52">

                <if_stmt pos:start="1761:17" pos:end="1765:17"><if pos:start="1761:17" pos:end="1765:17">if <condition pos:start="1761:20" pos:end="1761:31">(<expr pos:start="1761:21" pos:end="1761:30"><name pos:start="1761:21" pos:end="1761:25">shift</name> <operator pos:start="1761:27" pos:end="1761:28">==</operator> <literal type="number" pos:start="1761:30" pos:end="1761:30">2</literal></expr>)</condition> <block pos:start="1761:33" pos:end="1765:17">{<block_content pos:start="1763:21" pos:end="1763:42">

                    <expr_stmt pos:start="1763:21" pos:end="1763:42"><expr pos:start="1763:21" pos:end="1763:41"><name pos:start="1763:21" pos:end="1763:25">shift</name> <operator pos:start="1763:27" pos:end="1763:27">=</operator> <call pos:start="1763:29" pos:end="1763:41"><name pos:start="1763:29" pos:end="1763:32">ldub</name><argument_list pos:start="1763:33" pos:end="1763:41">(<argument pos:start="1763:34" pos:end="1763:40"><expr pos:start="1763:34" pos:end="1763:40"><name pos:start="1763:34" pos:end="1763:38"><name pos:start="1763:34" pos:end="1763:34">s</name><operator pos:start="1763:35" pos:end="1763:36">-&gt;</operator><name pos:start="1763:37" pos:end="1763:38">pc</name></name><operator pos:start="1763:39" pos:end="1763:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1767:17" pos:end="1767:52"><expr pos:start="1767:17" pos:end="1767:51"><call pos:start="1767:17" pos:end="1767:51"><name pos:start="1767:17" pos:end="1767:26">gen_shifti</name><argument_list pos:start="1767:27" pos:end="1767:51">(<argument pos:start="1767:28" pos:end="1767:28"><expr pos:start="1767:28" pos:end="1767:28"><name pos:start="1767:28" pos:end="1767:28">s</name></expr></argument>, <argument pos:start="1767:31" pos:end="1767:32"><expr pos:start="1767:31" pos:end="1767:32"><name pos:start="1767:31" pos:end="1767:32">op</name></expr></argument>, <argument pos:start="1767:35" pos:end="1767:36"><expr pos:start="1767:35" pos:end="1767:36"><name pos:start="1767:35" pos:end="1767:36">ot</name></expr></argument>, <argument pos:start="1767:39" pos:end="1767:43"><expr pos:start="1767:39" pos:end="1767:43"><name pos:start="1767:39" pos:end="1767:43">opreg</name></expr></argument>, <argument pos:start="1767:46" pos:end="1767:50"><expr pos:start="1767:46" pos:end="1767:50"><name pos:start="1767:46" pos:end="1767:50">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="1773:13" pos:end="1777:13"><if pos:start="1773:13" pos:end="1777:13">if <condition pos:start="1773:16" pos:end="1773:25">(<expr pos:start="1773:17" pos:end="1773:24"><name pos:start="1773:17" pos:end="1773:19">mod</name> <operator pos:start="1773:21" pos:end="1773:22">!=</operator> <literal type="number" pos:start="1773:24" pos:end="1773:24">3</literal></expr>)</condition> <block pos:start="1773:27" pos:end="1777:13">{<block_content pos:start="1775:17" pos:end="1775:38">

                <expr_stmt pos:start="1775:17" pos:end="1775:38"><expr pos:start="1775:17" pos:end="1775:37"><name pos:start="1775:17" pos:end="1775:35"><name pos:start="1775:17" pos:end="1775:31">gen_op_st_T0_A0</name><index pos:start="1775:32" pos:end="1775:35">[<expr pos:start="1775:33" pos:end="1775:34"><name pos:start="1775:33" pos:end="1775:34">ot</name></expr>]</index></name><operator pos:start="1775:36" pos:end="1775:36">(</operator><operator pos:start="1775:37" pos:end="1775:37">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="1781:9" pos:end="1781:14">break;</break>

    <case pos:start="1783:5" pos:end="1783:14">case <expr pos:start="1783:10" pos:end="1783:13"><literal type="number" pos:start="1783:10" pos:end="1783:13">0xd0</literal></expr>:</case>

    <case pos:start="1785:5" pos:end="1785:14">case <expr pos:start="1785:10" pos:end="1785:13"><literal type="number" pos:start="1785:10" pos:end="1785:13">0xd1</literal></expr>:</case>

        <comment type="block" pos:start="1787:9" pos:end="1787:24">/* shift Ev,1 */</comment>

        <expr_stmt pos:start="1789:9" pos:end="1789:18"><expr pos:start="1789:9" pos:end="1789:17"><name pos:start="1789:9" pos:end="1789:13">shift</name> <operator pos:start="1789:15" pos:end="1789:15">=</operator> <literal type="number" pos:start="1789:17" pos:end="1789:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="1791:9" pos:end="1791:18">goto <name pos:start="1791:14" pos:end="1791:17">grp2</name>;</goto>

    <case pos:start="1793:5" pos:end="1793:14">case <expr pos:start="1793:10" pos:end="1793:13"><literal type="number" pos:start="1793:10" pos:end="1793:13">0xd2</literal></expr>:</case>

    <case pos:start="1795:5" pos:end="1795:14">case <expr pos:start="1795:10" pos:end="1795:13"><literal type="number" pos:start="1795:10" pos:end="1795:13">0xd3</literal></expr>:</case>

        <comment type="block" pos:start="1797:9" pos:end="1797:25">/* shift Ev,cl */</comment>

        <expr_stmt pos:start="1799:9" pos:end="1799:18"><expr pos:start="1799:9" pos:end="1799:17"><name pos:start="1799:9" pos:end="1799:13">shift</name> <operator pos:start="1799:15" pos:end="1799:15">=</operator> <literal type="number" pos:start="1799:17" pos:end="1799:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="1801:9" pos:end="1801:18">goto <name pos:start="1801:14" pos:end="1801:17">grp2</name>;</goto>



    <case pos:start="1805:5" pos:end="1805:15">case <expr pos:start="1805:10" pos:end="1805:14"><literal type="number" pos:start="1805:10" pos:end="1805:14">0x1a4</literal></expr>:</case> <comment type="block" pos:start="1805:17" pos:end="1805:30">/* shld imm */</comment>

        <expr_stmt pos:start="1807:9" pos:end="1807:15"><expr pos:start="1807:9" pos:end="1807:14"><name pos:start="1807:9" pos:end="1807:10">op</name> <operator pos:start="1807:12" pos:end="1807:12">=</operator> <literal type="number" pos:start="1807:14" pos:end="1807:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1809:9" pos:end="1809:18"><expr pos:start="1809:9" pos:end="1809:17"><name pos:start="1809:9" pos:end="1809:13">shift</name> <operator pos:start="1809:15" pos:end="1809:15">=</operator> <literal type="number" pos:start="1809:17" pos:end="1809:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="1811:9" pos:end="1811:23">goto <name pos:start="1811:14" pos:end="1811:22">do_shiftd</name>;</goto>

    <case pos:start="1813:5" pos:end="1813:15">case <expr pos:start="1813:10" pos:end="1813:14"><literal type="number" pos:start="1813:10" pos:end="1813:14">0x1a5</literal></expr>:</case> <comment type="block" pos:start="1813:17" pos:end="1813:29">/* shld cl */</comment>

        <expr_stmt pos:start="1815:9" pos:end="1815:15"><expr pos:start="1815:9" pos:end="1815:14"><name pos:start="1815:9" pos:end="1815:10">op</name> <operator pos:start="1815:12" pos:end="1815:12">=</operator> <literal type="number" pos:start="1815:14" pos:end="1815:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1817:9" pos:end="1817:18"><expr pos:start="1817:9" pos:end="1817:17"><name pos:start="1817:9" pos:end="1817:13">shift</name> <operator pos:start="1817:15" pos:end="1817:15">=</operator> <literal type="number" pos:start="1817:17" pos:end="1817:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="1819:9" pos:end="1819:23">goto <name pos:start="1819:14" pos:end="1819:22">do_shiftd</name>;</goto>

    <case pos:start="1821:5" pos:end="1821:15">case <expr pos:start="1821:10" pos:end="1821:14"><literal type="number" pos:start="1821:10" pos:end="1821:14">0x1ac</literal></expr>:</case> <comment type="block" pos:start="1821:17" pos:end="1821:30">/* shrd imm */</comment>

        <expr_stmt pos:start="1823:9" pos:end="1823:15"><expr pos:start="1823:9" pos:end="1823:14"><name pos:start="1823:9" pos:end="1823:10">op</name> <operator pos:start="1823:12" pos:end="1823:12">=</operator> <literal type="number" pos:start="1823:14" pos:end="1823:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1825:9" pos:end="1825:18"><expr pos:start="1825:9" pos:end="1825:17"><name pos:start="1825:9" pos:end="1825:13">shift</name> <operator pos:start="1825:15" pos:end="1825:15">=</operator> <literal type="number" pos:start="1825:17" pos:end="1825:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="1827:9" pos:end="1827:23">goto <name pos:start="1827:14" pos:end="1827:22">do_shiftd</name>;</goto>

    <case pos:start="1829:5" pos:end="1829:15">case <expr pos:start="1829:10" pos:end="1829:14"><literal type="number" pos:start="1829:10" pos:end="1829:14">0x1ad</literal></expr>:</case> <comment type="block" pos:start="1829:17" pos:end="1829:29">/* shrd cl */</comment>

        <expr_stmt pos:start="1831:9" pos:end="1831:15"><expr pos:start="1831:9" pos:end="1831:14"><name pos:start="1831:9" pos:end="1831:10">op</name> <operator pos:start="1831:12" pos:end="1831:12">=</operator> <literal type="number" pos:start="1831:14" pos:end="1831:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1833:9" pos:end="1833:18"><expr pos:start="1833:9" pos:end="1833:17"><name pos:start="1833:9" pos:end="1833:13">shift</name> <operator pos:start="1833:15" pos:end="1833:15">=</operator> <literal type="number" pos:start="1833:17" pos:end="1833:17">0</literal></expr>;</expr_stmt>

    <label pos:start="1835:5" pos:end="1835:14"><name pos:start="1835:5" pos:end="1835:13">do_shiftd</name>:</label>

        <expr_stmt pos:start="1837:9" pos:end="1837:39"><expr pos:start="1837:9" pos:end="1837:38"><name pos:start="1837:9" pos:end="1837:10">ot</name> <operator pos:start="1837:12" pos:end="1837:12">=</operator> <ternary pos:start="1837:14" pos:end="1837:38"><condition pos:start="1837:14" pos:end="1837:20"><expr pos:start="1837:14" pos:end="1837:18"><name pos:start="1837:14" pos:end="1837:18">dflag</name></expr> ?</condition><then pos:start="1837:22" pos:end="1837:28"> <expr pos:start="1837:22" pos:end="1837:28"><name pos:start="1837:22" pos:end="1837:28">OT_LONG</name></expr> </then><else pos:start="1837:30" pos:end="1837:38">: <expr pos:start="1837:32" pos:end="1837:38"><name pos:start="1837:32" pos:end="1837:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1839:9" pos:end="1839:30"><expr pos:start="1839:9" pos:end="1839:29"><name pos:start="1839:9" pos:end="1839:13">modrm</name> <operator pos:start="1839:15" pos:end="1839:15">=</operator> <call pos:start="1839:17" pos:end="1839:29"><name pos:start="1839:17" pos:end="1839:20">ldub</name><argument_list pos:start="1839:21" pos:end="1839:29">(<argument pos:start="1839:22" pos:end="1839:28"><expr pos:start="1839:22" pos:end="1839:28"><name pos:start="1839:22" pos:end="1839:26"><name pos:start="1839:22" pos:end="1839:22">s</name><operator pos:start="1839:23" pos:end="1839:24">-&gt;</operator><name pos:start="1839:25" pos:end="1839:26">pc</name></name><operator pos:start="1839:27" pos:end="1839:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1841:9" pos:end="1841:31"><expr pos:start="1841:9" pos:end="1841:30"><name pos:start="1841:9" pos:end="1841:11">mod</name> <operator pos:start="1841:13" pos:end="1841:13">=</operator> <operator pos:start="1841:15" pos:end="1841:15">(</operator><name pos:start="1841:16" pos:end="1841:20">modrm</name> <operator pos:start="1841:22" pos:end="1841:23">&gt;&gt;</operator> <literal type="number" pos:start="1841:25" pos:end="1841:25">6</literal><operator pos:start="1841:26" pos:end="1841:26">)</operator> <operator pos:start="1841:28" pos:end="1841:28">&amp;</operator> <literal type="number" pos:start="1841:30" pos:end="1841:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1843:9" pos:end="1843:23"><expr pos:start="1843:9" pos:end="1843:22"><name pos:start="1843:9" pos:end="1843:10">rm</name> <operator pos:start="1843:12" pos:end="1843:12">=</operator> <name pos:start="1843:14" pos:end="1843:18">modrm</name> <operator pos:start="1843:20" pos:end="1843:20">&amp;</operator> <literal type="number" pos:start="1843:22" pos:end="1843:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1845:9" pos:end="1845:31"><expr pos:start="1845:9" pos:end="1845:30"><name pos:start="1845:9" pos:end="1845:11">reg</name> <operator pos:start="1845:13" pos:end="1845:13">=</operator> <operator pos:start="1845:15" pos:end="1845:15">(</operator><name pos:start="1845:16" pos:end="1845:20">modrm</name> <operator pos:start="1845:22" pos:end="1845:23">&gt;&gt;</operator> <literal type="number" pos:start="1845:25" pos:end="1845:25">3</literal><operator pos:start="1845:26" pos:end="1845:26">)</operator> <operator pos:start="1845:28" pos:end="1845:28">&amp;</operator> <literal type="number" pos:start="1845:30" pos:end="1845:30">7</literal></expr>;</expr_stmt>

        

        <if_stmt pos:start="1849:9" pos:end="1859:9"><if pos:start="1849:9" pos:end="1855:9">if <condition pos:start="1849:12" pos:end="1849:21">(<expr pos:start="1849:13" pos:end="1849:20"><name pos:start="1849:13" pos:end="1849:15">mod</name> <operator pos:start="1849:17" pos:end="1849:18">!=</operator> <literal type="number" pos:start="1849:20" pos:end="1849:20">3</literal></expr>)</condition> <block pos:start="1849:23" pos:end="1855:9">{<block_content pos:start="1851:13" pos:end="1853:34">

            <expr_stmt pos:start="1851:13" pos:end="1851:61"><expr pos:start="1851:13" pos:end="1851:60"><call pos:start="1851:13" pos:end="1851:60"><name pos:start="1851:13" pos:end="1851:25">gen_lea_modrm</name><argument_list pos:start="1851:26" pos:end="1851:60">(<argument pos:start="1851:27" pos:end="1851:27"><expr pos:start="1851:27" pos:end="1851:27"><name pos:start="1851:27" pos:end="1851:27">s</name></expr></argument>, <argument pos:start="1851:30" pos:end="1851:34"><expr pos:start="1851:30" pos:end="1851:34"><name pos:start="1851:30" pos:end="1851:34">modrm</name></expr></argument>, <argument pos:start="1851:37" pos:end="1851:45"><expr pos:start="1851:37" pos:end="1851:45"><operator pos:start="1851:37" pos:end="1851:37">&amp;</operator><name pos:start="1851:38" pos:end="1851:45">reg_addr</name></expr></argument>, <argument pos:start="1851:48" pos:end="1851:59"><expr pos:start="1851:48" pos:end="1851:59"><operator pos:start="1851:48" pos:end="1851:48">&amp;</operator><name pos:start="1851:49" pos:end="1851:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1853:13" pos:end="1853:34"><expr pos:start="1853:13" pos:end="1853:33"><name pos:start="1853:13" pos:end="1853:31"><name pos:start="1853:13" pos:end="1853:27">gen_op_ld_T0_A0</name><index pos:start="1853:28" pos:end="1853:31">[<expr pos:start="1853:29" pos:end="1853:30"><name pos:start="1853:29" pos:end="1853:30">ot</name></expr>]</index></name><operator pos:start="1853:32" pos:end="1853:32">(</operator><operator pos:start="1853:33" pos:end="1853:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1855:11" pos:end="1859:9">else <block pos:start="1855:16" pos:end="1859:9">{<block_content pos:start="1857:13" pos:end="1857:43">

            <expr_stmt pos:start="1857:13" pos:end="1857:43"><expr pos:start="1857:13" pos:end="1857:42"><name pos:start="1857:13" pos:end="1857:40"><name pos:start="1857:13" pos:end="1857:29">gen_op_mov_TN_reg</name><index pos:start="1857:30" pos:end="1857:33">[<expr pos:start="1857:31" pos:end="1857:32"><name pos:start="1857:31" pos:end="1857:32">ot</name></expr>]</index><index pos:start="1857:34" pos:end="1857:36">[<expr pos:start="1857:35" pos:end="1857:35"><literal type="number" pos:start="1857:35" pos:end="1857:35">0</literal></expr>]</index><index pos:start="1857:37" pos:end="1857:40">[<expr pos:start="1857:38" pos:end="1857:39"><name pos:start="1857:38" pos:end="1857:39">rm</name></expr>]</index></name><operator pos:start="1857:41" pos:end="1857:41">(</operator><operator pos:start="1857:42" pos:end="1857:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1861:9" pos:end="1861:40"><expr pos:start="1861:9" pos:end="1861:39"><name pos:start="1861:9" pos:end="1861:37"><name pos:start="1861:9" pos:end="1861:25">gen_op_mov_TN_reg</name><index pos:start="1861:26" pos:end="1861:29">[<expr pos:start="1861:27" pos:end="1861:28"><name pos:start="1861:27" pos:end="1861:28">ot</name></expr>]</index><index pos:start="1861:30" pos:end="1861:32">[<expr pos:start="1861:31" pos:end="1861:31"><literal type="number" pos:start="1861:31" pos:end="1861:31">1</literal></expr>]</index><index pos:start="1861:33" pos:end="1861:37">[<expr pos:start="1861:34" pos:end="1861:36"><name pos:start="1861:34" pos:end="1861:36">reg</name></expr>]</index></name><operator pos:start="1861:38" pos:end="1861:38">(</operator><operator pos:start="1861:39" pos:end="1861:39">)</operator></expr>;</expr_stmt>

        

        <if_stmt pos:start="1865:9" pos:end="1895:9"><if pos:start="1865:9" pos:end="1885:9">if <condition pos:start="1865:12" pos:end="1865:18">(<expr pos:start="1865:13" pos:end="1865:17"><name pos:start="1865:13" pos:end="1865:17">shift</name></expr>)</condition> <block pos:start="1865:20" pos:end="1885:9">{<block_content pos:start="1867:13" pos:end="1883:13">

            <expr_stmt pos:start="1867:13" pos:end="1867:32"><expr pos:start="1867:13" pos:end="1867:31"><name pos:start="1867:13" pos:end="1867:15">val</name> <operator pos:start="1867:17" pos:end="1867:17">=</operator> <call pos:start="1867:19" pos:end="1867:31"><name pos:start="1867:19" pos:end="1867:22">ldub</name><argument_list pos:start="1867:23" pos:end="1867:31">(<argument pos:start="1867:24" pos:end="1867:30"><expr pos:start="1867:24" pos:end="1867:30"><name pos:start="1867:24" pos:end="1867:28"><name pos:start="1867:24" pos:end="1867:24">s</name><operator pos:start="1867:25" pos:end="1867:26">-&gt;</operator><name pos:start="1867:27" pos:end="1867:28">pc</name></name><operator pos:start="1867:29" pos:end="1867:30">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1869:13" pos:end="1869:24"><expr pos:start="1869:13" pos:end="1869:23"><name pos:start="1869:13" pos:end="1869:15">val</name> <operator pos:start="1869:17" pos:end="1869:18">&amp;=</operator> <literal type="number" pos:start="1869:20" pos:end="1869:23">0x1f</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1871:13" pos:end="1883:13"><if pos:start="1871:13" pos:end="1883:13">if <condition pos:start="1871:16" pos:end="1871:20">(<expr pos:start="1871:17" pos:end="1871:19"><name pos:start="1871:17" pos:end="1871:19">val</name></expr>)</condition> <block pos:start="1871:22" pos:end="1883:13">{<block_content pos:start="1873:17" pos:end="1881:47">

                <expr_stmt pos:start="1873:17" pos:end="1873:65"><expr pos:start="1873:17" pos:end="1873:64"><name pos:start="1873:17" pos:end="1873:59"><name pos:start="1873:17" pos:end="1873:41">gen_op_shiftd_T0_T1_im_cc</name><index pos:start="1873:42" pos:end="1873:55">[<expr pos:start="1873:43" pos:end="1873:54"><name pos:start="1873:43" pos:end="1873:44">ot</name> <operator pos:start="1873:46" pos:end="1873:46">-</operator> <name pos:start="1873:48" pos:end="1873:54">OT_WORD</name></expr>]</index><index pos:start="1873:56" pos:end="1873:59">[<expr pos:start="1873:57" pos:end="1873:58"><name pos:start="1873:57" pos:end="1873:58">op</name></expr>]</index></name><operator pos:start="1873:60" pos:end="1873:60">(</operator><name pos:start="1873:61" pos:end="1873:63">val</name><operator pos:start="1873:64" pos:end="1873:64">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="1875:17" pos:end="1881:47"><if pos:start="1875:17" pos:end="1877:47">if <condition pos:start="1875:20" pos:end="1875:45">(<expr pos:start="1875:21" pos:end="1875:44"><name pos:start="1875:21" pos:end="1875:22">op</name> <operator pos:start="1875:24" pos:end="1875:25">==</operator> <literal type="number" pos:start="1875:27" pos:end="1875:27">0</literal> <operator pos:start="1875:29" pos:end="1875:30">&amp;&amp;</operator> <name pos:start="1875:32" pos:end="1875:33">ot</name> <operator pos:start="1875:35" pos:end="1875:36">!=</operator> <name pos:start="1875:38" pos:end="1875:44">OT_WORD</name></expr>)</condition><block type="pseudo" pos:start="1877:21" pos:end="1877:47"><block_content pos:start="1877:21" pos:end="1877:47">

                    <expr_stmt pos:start="1877:21" pos:end="1877:47"><expr pos:start="1877:21" pos:end="1877:46"><name pos:start="1877:21" pos:end="1877:28"><name pos:start="1877:21" pos:end="1877:21">s</name><operator pos:start="1877:22" pos:end="1877:23">-&gt;</operator><name pos:start="1877:24" pos:end="1877:28">cc_op</name></name> <operator pos:start="1877:30" pos:end="1877:30">=</operator> <name pos:start="1877:32" pos:end="1877:41">CC_OP_SHLB</name> <operator pos:start="1877:43" pos:end="1877:43">+</operator> <name pos:start="1877:45" pos:end="1877:46">ot</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1879:17" pos:end="1881:47">else<block type="pseudo" pos:start="1881:21" pos:end="1881:47"><block_content pos:start="1881:21" pos:end="1881:47">

                    <expr_stmt pos:start="1881:21" pos:end="1881:47"><expr pos:start="1881:21" pos:end="1881:46"><name pos:start="1881:21" pos:end="1881:28"><name pos:start="1881:21" pos:end="1881:21">s</name><operator pos:start="1881:22" pos:end="1881:23">-&gt;</operator><name pos:start="1881:24" pos:end="1881:28">cc_op</name></name> <operator pos:start="1881:30" pos:end="1881:30">=</operator> <name pos:start="1881:32" pos:end="1881:41">CC_OP_SARB</name> <operator pos:start="1881:43" pos:end="1881:43">+</operator> <name pos:start="1881:45" pos:end="1881:46">ot</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="1885:11" pos:end="1895:9">else <block pos:start="1885:16" pos:end="1895:9">{<block_content pos:start="1887:13" pos:end="1893:37">

            <if_stmt pos:start="1887:13" pos:end="1889:43"><if pos:start="1887:13" pos:end="1889:43">if <condition pos:start="1887:16" pos:end="1887:42">(<expr pos:start="1887:17" pos:end="1887:41"><name pos:start="1887:17" pos:end="1887:24"><name pos:start="1887:17" pos:end="1887:17">s</name><operator pos:start="1887:18" pos:end="1887:19">-&gt;</operator><name pos:start="1887:20" pos:end="1887:24">cc_op</name></name> <operator pos:start="1887:26" pos:end="1887:27">!=</operator> <name pos:start="1887:29" pos:end="1887:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1889:17" pos:end="1889:43"><block_content pos:start="1889:17" pos:end="1889:43">

                <expr_stmt pos:start="1889:17" pos:end="1889:43"><expr pos:start="1889:17" pos:end="1889:42"><call pos:start="1889:17" pos:end="1889:42"><name pos:start="1889:17" pos:end="1889:32">gen_op_set_cc_op</name><argument_list pos:start="1889:33" pos:end="1889:42">(<argument pos:start="1889:34" pos:end="1889:41"><expr pos:start="1889:34" pos:end="1889:41"><name pos:start="1889:34" pos:end="1889:41"><name pos:start="1889:34" pos:end="1889:34">s</name><operator pos:start="1889:35" pos:end="1889:36">-&gt;</operator><name pos:start="1889:37" pos:end="1889:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1891:13" pos:end="1891:59"><expr pos:start="1891:13" pos:end="1891:58"><name pos:start="1891:13" pos:end="1891:56"><name pos:start="1891:13" pos:end="1891:38">gen_op_shiftd_T0_T1_ECX_cc</name><index pos:start="1891:39" pos:end="1891:52">[<expr pos:start="1891:40" pos:end="1891:51"><name pos:start="1891:40" pos:end="1891:41">ot</name> <operator pos:start="1891:43" pos:end="1891:43">-</operator> <name pos:start="1891:45" pos:end="1891:51">OT_WORD</name></expr>]</index><index pos:start="1891:53" pos:end="1891:56">[<expr pos:start="1891:54" pos:end="1891:55"><name pos:start="1891:54" pos:end="1891:55">op</name></expr>]</index></name><operator pos:start="1891:57" pos:end="1891:57">(</operator><operator pos:start="1891:58" pos:end="1891:58">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1893:13" pos:end="1893:37"><expr pos:start="1893:13" pos:end="1893:36"><name pos:start="1893:13" pos:end="1893:20"><name pos:start="1893:13" pos:end="1893:13">s</name><operator pos:start="1893:14" pos:end="1893:15">-&gt;</operator><name pos:start="1893:16" pos:end="1893:20">cc_op</name></name> <operator pos:start="1893:22" pos:end="1893:22">=</operator> <name pos:start="1893:24" pos:end="1893:36">CC_OP_DYNAMIC</name></expr>;</expr_stmt> <comment type="block" pos:start="1893:39" pos:end="1893:70">/* cannot predict flags after */</comment>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="1897:9" pos:end="1905:9"><if pos:start="1897:9" pos:end="1901:9">if <condition pos:start="1897:12" pos:end="1897:21">(<expr pos:start="1897:13" pos:end="1897:20"><name pos:start="1897:13" pos:end="1897:15">mod</name> <operator pos:start="1897:17" pos:end="1897:18">!=</operator> <literal type="number" pos:start="1897:20" pos:end="1897:20">3</literal></expr>)</condition> <block pos:start="1897:23" pos:end="1901:9">{<block_content pos:start="1899:13" pos:end="1899:34">

            <expr_stmt pos:start="1899:13" pos:end="1899:34"><expr pos:start="1899:13" pos:end="1899:33"><name pos:start="1899:13" pos:end="1899:31"><name pos:start="1899:13" pos:end="1899:27">gen_op_st_T0_A0</name><index pos:start="1899:28" pos:end="1899:31">[<expr pos:start="1899:29" pos:end="1899:30"><name pos:start="1899:29" pos:end="1899:30">ot</name></expr>]</index></name><operator pos:start="1899:32" pos:end="1899:32">(</operator><operator pos:start="1899:33" pos:end="1899:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1901:11" pos:end="1905:9">else <block pos:start="1901:16" pos:end="1905:9">{<block_content pos:start="1903:13" pos:end="1903:40">

            <expr_stmt pos:start="1903:13" pos:end="1903:40"><expr pos:start="1903:13" pos:end="1903:39"><name pos:start="1903:13" pos:end="1903:37"><name pos:start="1903:13" pos:end="1903:29">gen_op_mov_reg_T0</name><index pos:start="1903:30" pos:end="1903:33">[<expr pos:start="1903:31" pos:end="1903:32"><name pos:start="1903:31" pos:end="1903:32">ot</name></expr>]</index><index pos:start="1903:34" pos:end="1903:37">[<expr pos:start="1903:35" pos:end="1903:36"><name pos:start="1903:35" pos:end="1903:36">rm</name></expr>]</index></name><operator pos:start="1903:38" pos:end="1903:38">(</operator><operator pos:start="1903:39" pos:end="1903:39">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1907:9" pos:end="1907:14">break;</break>



        <comment type="block" format="doxygen" pos:start="1911:9" pos:end="1911:34">/************************/</comment>

        <comment type="block" pos:start="1913:9" pos:end="1913:20">/* floats */</comment>

    <case pos:start="1915:5" pos:end="1915:23">case <expr pos:start="1915:10" pos:end="1915:22"><literal type="number" pos:start="1915:10" pos:end="1915:13">0xd8</literal> <operator pos:start="1915:15" pos:end="1915:17">...</operator> <literal type="number" pos:start="1915:19" pos:end="1915:22">0xdf</literal></expr>:</case> 

        <expr_stmt pos:start="1917:9" pos:end="1917:30"><expr pos:start="1917:9" pos:end="1917:29"><name pos:start="1917:9" pos:end="1917:13">modrm</name> <operator pos:start="1917:15" pos:end="1917:15">=</operator> <call pos:start="1917:17" pos:end="1917:29"><name pos:start="1917:17" pos:end="1917:20">ldub</name><argument_list pos:start="1917:21" pos:end="1917:29">(<argument pos:start="1917:22" pos:end="1917:28"><expr pos:start="1917:22" pos:end="1917:28"><name pos:start="1917:22" pos:end="1917:26"><name pos:start="1917:22" pos:end="1917:22">s</name><operator pos:start="1917:23" pos:end="1917:24">-&gt;</operator><name pos:start="1917:25" pos:end="1917:26">pc</name></name><operator pos:start="1917:27" pos:end="1917:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1919:9" pos:end="1919:31"><expr pos:start="1919:9" pos:end="1919:30"><name pos:start="1919:9" pos:end="1919:11">mod</name> <operator pos:start="1919:13" pos:end="1919:13">=</operator> <operator pos:start="1919:15" pos:end="1919:15">(</operator><name pos:start="1919:16" pos:end="1919:20">modrm</name> <operator pos:start="1919:22" pos:end="1919:23">&gt;&gt;</operator> <literal type="number" pos:start="1919:25" pos:end="1919:25">6</literal><operator pos:start="1919:26" pos:end="1919:26">)</operator> <operator pos:start="1919:28" pos:end="1919:28">&amp;</operator> <literal type="number" pos:start="1919:30" pos:end="1919:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1921:9" pos:end="1921:23"><expr pos:start="1921:9" pos:end="1921:22"><name pos:start="1921:9" pos:end="1921:10">rm</name> <operator pos:start="1921:12" pos:end="1921:12">=</operator> <name pos:start="1921:14" pos:end="1921:18">modrm</name> <operator pos:start="1921:20" pos:end="1921:20">&amp;</operator> <literal type="number" pos:start="1921:22" pos:end="1921:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1923:9" pos:end="1923:49"><expr pos:start="1923:9" pos:end="1923:48"><name pos:start="1923:9" pos:end="1923:10">op</name> <operator pos:start="1923:12" pos:end="1923:12">=</operator> <operator pos:start="1923:14" pos:end="1923:14">(</operator><operator pos:start="1923:15" pos:end="1923:15">(</operator><name pos:start="1923:16" pos:end="1923:16">b</name> <operator pos:start="1923:18" pos:end="1923:18">&amp;</operator> <literal type="number" pos:start="1923:20" pos:end="1923:20">7</literal><operator pos:start="1923:21" pos:end="1923:21">)</operator> <operator pos:start="1923:23" pos:end="1923:24">&lt;&lt;</operator> <literal type="number" pos:start="1923:26" pos:end="1923:26">3</literal><operator pos:start="1923:27" pos:end="1923:27">)</operator> <operator pos:start="1923:29" pos:end="1923:29">|</operator> <operator pos:start="1923:31" pos:end="1923:31">(</operator><operator pos:start="1923:32" pos:end="1923:32">(</operator><name pos:start="1923:33" pos:end="1923:37">modrm</name> <operator pos:start="1923:39" pos:end="1923:40">&gt;&gt;</operator> <literal type="number" pos:start="1923:42" pos:end="1923:42">3</literal><operator pos:start="1923:43" pos:end="1923:43">)</operator> <operator pos:start="1923:45" pos:end="1923:45">&amp;</operator> <literal type="number" pos:start="1923:47" pos:end="1923:47">7</literal><operator pos:start="1923:48" pos:end="1923:48">)</operator></expr>;</expr_stmt>

        

        <if_stmt pos:start="1927:9" pos:end="2621:9"><if pos:start="1927:9" pos:end="2175:9">if <condition pos:start="1927:12" pos:end="1927:21">(<expr pos:start="1927:13" pos:end="1927:20"><name pos:start="1927:13" pos:end="1927:15">mod</name> <operator pos:start="1927:17" pos:end="1927:18">!=</operator> <literal type="number" pos:start="1927:20" pos:end="1927:20">3</literal></expr>)</condition> <block pos:start="1927:23" pos:end="2175:9">{<block_content pos:start="1931:13" pos:end="2173:13">

            <comment type="block" pos:start="1929:13" pos:end="1929:27">/* memory op */</comment>

            <expr_stmt pos:start="1931:13" pos:end="1931:61"><expr pos:start="1931:13" pos:end="1931:60"><call pos:start="1931:13" pos:end="1931:60"><name pos:start="1931:13" pos:end="1931:25">gen_lea_modrm</name><argument_list pos:start="1931:26" pos:end="1931:60">(<argument pos:start="1931:27" pos:end="1931:27"><expr pos:start="1931:27" pos:end="1931:27"><name pos:start="1931:27" pos:end="1931:27">s</name></expr></argument>, <argument pos:start="1931:30" pos:end="1931:34"><expr pos:start="1931:30" pos:end="1931:34"><name pos:start="1931:30" pos:end="1931:34">modrm</name></expr></argument>, <argument pos:start="1931:37" pos:end="1931:45"><expr pos:start="1931:37" pos:end="1931:45"><operator pos:start="1931:37" pos:end="1931:37">&amp;</operator><name pos:start="1931:38" pos:end="1931:45">reg_addr</name></expr></argument>, <argument pos:start="1931:48" pos:end="1931:59"><expr pos:start="1931:48" pos:end="1931:59"><operator pos:start="1931:48" pos:end="1931:48">&amp;</operator><name pos:start="1931:49" pos:end="1931:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="1933:13" pos:end="2173:13">switch<condition pos:start="1933:19" pos:end="1933:22">(<expr pos:start="1933:20" pos:end="1933:21"><name pos:start="1933:20" pos:end="1933:21">op</name></expr>)</condition> <block pos:start="1933:24" pos:end="2173:13">{<block_content pos:start="1935:13" pos:end="2171:32">

            <case pos:start="1935:13" pos:end="1935:31">case <expr pos:start="1935:18" pos:end="1935:30"><literal type="number" pos:start="1935:18" pos:end="1935:21">0x00</literal> <operator pos:start="1935:23" pos:end="1935:25">...</operator> <literal type="number" pos:start="1935:27" pos:end="1935:30">0x07</literal></expr>:</case> <comment type="block" pos:start="1935:33" pos:end="1935:43">/* fxxxs */</comment>

            <case pos:start="1937:13" pos:end="1937:31">case <expr pos:start="1937:18" pos:end="1937:30"><literal type="number" pos:start="1937:18" pos:end="1937:21">0x10</literal> <operator pos:start="1937:23" pos:end="1937:25">...</operator> <literal type="number" pos:start="1937:27" pos:end="1937:30">0x17</literal></expr>:</case> <comment type="block" pos:start="1937:33" pos:end="1937:44">/* fixxxl */</comment>

            <case pos:start="1939:13" pos:end="1939:31">case <expr pos:start="1939:18" pos:end="1939:30"><literal type="number" pos:start="1939:18" pos:end="1939:21">0x20</literal> <operator pos:start="1939:23" pos:end="1939:25">...</operator> <literal type="number" pos:start="1939:27" pos:end="1939:30">0x27</literal></expr>:</case> <comment type="block" pos:start="1939:33" pos:end="1939:43">/* fxxxl */</comment>

            <case pos:start="1941:13" pos:end="1941:31">case <expr pos:start="1941:18" pos:end="1941:30"><literal type="number" pos:start="1941:18" pos:end="1941:21">0x30</literal> <operator pos:start="1941:23" pos:end="1941:25">...</operator> <literal type="number" pos:start="1941:27" pos:end="1941:30">0x37</literal></expr>:</case> <comment type="block" pos:start="1941:33" pos:end="1941:43">/* fixxx */</comment>

                <block pos:start="1943:17" pos:end="1993:17">{<block_content pos:start="1945:21" pos:end="1991:21">

                    <decl_stmt pos:start="1945:21" pos:end="1945:28"><decl pos:start="1945:21" pos:end="1945:27"><type pos:start="1945:21" pos:end="1945:23"><name pos:start="1945:21" pos:end="1945:23">int</name></type> <name pos:start="1945:25" pos:end="1945:27">op1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="1947:21" pos:end="1947:33"><expr pos:start="1947:21" pos:end="1947:32"><name pos:start="1947:21" pos:end="1947:23">op1</name> <operator pos:start="1947:25" pos:end="1947:25">=</operator> <name pos:start="1947:27" pos:end="1947:28">op</name> <operator pos:start="1947:30" pos:end="1947:30">&amp;</operator> <literal type="number" pos:start="1947:32" pos:end="1947:32">7</literal></expr>;</expr_stmt>



                    <switch pos:start="1951:21" pos:end="1979:21">switch<condition pos:start="1951:27" pos:end="1951:35">(<expr pos:start="1951:28" pos:end="1951:34"><name pos:start="1951:28" pos:end="1951:29">op</name> <operator pos:start="1951:31" pos:end="1951:32">&gt;&gt;</operator> <literal type="number" pos:start="1951:34" pos:end="1951:34">4</literal></expr>)</condition> <block pos:start="1951:37" pos:end="1979:21">{<block_content pos:start="1953:21" pos:end="1977:30">

                    <case pos:start="1953:21" pos:end="1953:27">case <expr pos:start="1953:26" pos:end="1953:26"><literal type="number" pos:start="1953:26" pos:end="1953:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="1955:25" pos:end="1955:45"><expr pos:start="1955:25" pos:end="1955:44"><call pos:start="1955:25" pos:end="1955:44"><name pos:start="1955:25" pos:end="1955:42">gen_op_flds_FT0_A0</name><argument_list pos:start="1955:43" pos:end="1955:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1957:25" pos:end="1957:30">break;</break>

                    <case pos:start="1959:21" pos:end="1959:27">case <expr pos:start="1959:26" pos:end="1959:26"><literal type="number" pos:start="1959:26" pos:end="1959:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="1961:25" pos:end="1961:46"><expr pos:start="1961:25" pos:end="1961:45"><call pos:start="1961:25" pos:end="1961:45"><name pos:start="1961:25" pos:end="1961:43">gen_op_fildl_FT0_A0</name><argument_list pos:start="1961:44" pos:end="1961:45">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1963:25" pos:end="1963:30">break;</break>

                    <case pos:start="1965:21" pos:end="1965:27">case <expr pos:start="1965:26" pos:end="1965:26"><literal type="number" pos:start="1965:26" pos:end="1965:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="1967:25" pos:end="1967:45"><expr pos:start="1967:25" pos:end="1967:44"><call pos:start="1967:25" pos:end="1967:44"><name pos:start="1967:25" pos:end="1967:42">gen_op_fldl_FT0_A0</name><argument_list pos:start="1967:43" pos:end="1967:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1969:25" pos:end="1969:30">break;</break>

                    <case pos:start="1971:21" pos:end="1971:27">case <expr pos:start="1971:26" pos:end="1971:26"><literal type="number" pos:start="1971:26" pos:end="1971:26">3</literal></expr>:</case>

                    <default pos:start="1973:21" pos:end="1973:28">default:</default>

                        <expr_stmt pos:start="1975:25" pos:end="1975:45"><expr pos:start="1975:25" pos:end="1975:44"><call pos:start="1975:25" pos:end="1975:44"><name pos:start="1975:25" pos:end="1975:42">gen_op_fild_FT0_A0</name><argument_list pos:start="1975:43" pos:end="1975:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1977:25" pos:end="1977:30">break;</break>

                    </block_content>}</block></switch>

                    

                    <expr_stmt pos:start="1983:21" pos:end="1983:51"><expr pos:start="1983:21" pos:end="1983:50"><name pos:start="1983:21" pos:end="1983:48"><name pos:start="1983:21" pos:end="1983:43">gen_op_fp_arith_ST0_FT0</name><index pos:start="1983:44" pos:end="1983:48">[<expr pos:start="1983:45" pos:end="1983:47"><name pos:start="1983:45" pos:end="1983:47">op1</name></expr>]</index></name><operator pos:start="1983:49" pos:end="1983:49">(</operator><operator pos:start="1983:50" pos:end="1983:50">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="1985:21" pos:end="1991:21"><if pos:start="1985:21" pos:end="1991:21">if <condition pos:start="1985:24" pos:end="1985:33">(<expr pos:start="1985:25" pos:end="1985:32"><name pos:start="1985:25" pos:end="1985:27">op1</name> <operator pos:start="1985:29" pos:end="1985:30">==</operator> <literal type="number" pos:start="1985:32" pos:end="1985:32">3</literal></expr>)</condition> <block pos:start="1985:35" pos:end="1991:21">{<block_content pos:start="1989:25" pos:end="1989:38">

                        <comment type="block" pos:start="1987:25" pos:end="1987:45">/* fcomp needs pop */</comment>

                        <expr_stmt pos:start="1989:25" pos:end="1989:38"><expr pos:start="1989:25" pos:end="1989:37"><call pos:start="1989:25" pos:end="1989:37"><name pos:start="1989:25" pos:end="1989:35">gen_op_fpop</name><argument_list pos:start="1989:36" pos:end="1989:37">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block>

                <break pos:start="1995:17" pos:end="1995:22">break;</break>

            <case pos:start="1997:13" pos:end="1997:22">case <expr pos:start="1997:18" pos:end="1997:21"><literal type="number" pos:start="1997:18" pos:end="1997:21">0x08</literal></expr>:</case> <comment type="block" pos:start="1997:24" pos:end="1997:33">/* flds */</comment>

            <case pos:start="1999:13" pos:end="1999:22">case <expr pos:start="1999:18" pos:end="1999:21"><literal type="number" pos:start="1999:18" pos:end="1999:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="1999:24" pos:end="1999:33">/* fsts */</comment>

            <case pos:start="2001:13" pos:end="2001:22">case <expr pos:start="2001:18" pos:end="2001:21"><literal type="number" pos:start="2001:18" pos:end="2001:21">0x0b</literal></expr>:</case> <comment type="block" pos:start="2001:24" pos:end="2001:34">/* fstps */</comment>

            <case pos:start="2003:13" pos:end="2003:22">case <expr pos:start="2003:18" pos:end="2003:21"><literal type="number" pos:start="2003:18" pos:end="2003:21">0x18</literal></expr>:</case> <comment type="block" pos:start="2003:24" pos:end="2003:34">/* fildl */</comment>

            <case pos:start="2005:13" pos:end="2005:22">case <expr pos:start="2005:18" pos:end="2005:21"><literal type="number" pos:start="2005:18" pos:end="2005:21">0x1a</literal></expr>:</case> <comment type="block" pos:start="2005:24" pos:end="2005:34">/* fistl */</comment>

            <case pos:start="2007:13" pos:end="2007:22">case <expr pos:start="2007:18" pos:end="2007:21"><literal type="number" pos:start="2007:18" pos:end="2007:21">0x1b</literal></expr>:</case> <comment type="block" pos:start="2007:24" pos:end="2007:35">/* fistpl */</comment>

            <case pos:start="2009:13" pos:end="2009:22">case <expr pos:start="2009:18" pos:end="2009:21"><literal type="number" pos:start="2009:18" pos:end="2009:21">0x28</literal></expr>:</case> <comment type="block" pos:start="2009:24" pos:end="2009:33">/* fldl */</comment>

            <case pos:start="2011:13" pos:end="2011:22">case <expr pos:start="2011:18" pos:end="2011:21"><literal type="number" pos:start="2011:18" pos:end="2011:21">0x2a</literal></expr>:</case> <comment type="block" pos:start="2011:24" pos:end="2011:33">/* fstl */</comment>

            <case pos:start="2013:13" pos:end="2013:22">case <expr pos:start="2013:18" pos:end="2013:21"><literal type="number" pos:start="2013:18" pos:end="2013:21">0x2b</literal></expr>:</case> <comment type="block" pos:start="2013:24" pos:end="2013:34">/* fstpl */</comment>

            <case pos:start="2015:13" pos:end="2015:22">case <expr pos:start="2015:18" pos:end="2015:21"><literal type="number" pos:start="2015:18" pos:end="2015:21">0x38</literal></expr>:</case> <comment type="block" pos:start="2015:24" pos:end="2015:34">/* filds */</comment>

            <case pos:start="2017:13" pos:end="2017:22">case <expr pos:start="2017:18" pos:end="2017:21"><literal type="number" pos:start="2017:18" pos:end="2017:21">0x3a</literal></expr>:</case> <comment type="block" pos:start="2017:24" pos:end="2017:34">/* fists */</comment>

            <case pos:start="2019:13" pos:end="2019:22">case <expr pos:start="2019:18" pos:end="2019:21"><literal type="number" pos:start="2019:18" pos:end="2019:21">0x3b</literal></expr>:</case> <comment type="block" pos:start="2019:24" pos:end="2019:35">/* fistps */</comment>

                

                <switch pos:start="2023:17" pos:end="2099:17">switch<condition pos:start="2023:23" pos:end="2023:30">(<expr pos:start="2023:24" pos:end="2023:29"><name pos:start="2023:24" pos:end="2023:25">op</name> <operator pos:start="2023:27" pos:end="2023:27">&amp;</operator> <literal type="number" pos:start="2023:29" pos:end="2023:29">7</literal></expr>)</condition> <block pos:start="2023:32" pos:end="2099:17">{<block_content pos:start="2025:17" pos:end="2097:26">

                <case pos:start="2025:17" pos:end="2025:23">case <expr pos:start="2025:22" pos:end="2025:22"><literal type="number" pos:start="2025:22" pos:end="2025:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="2027:21" pos:end="2027:35"><expr pos:start="2027:21" pos:end="2027:34"><call pos:start="2027:21" pos:end="2027:34"><name pos:start="2027:21" pos:end="2027:32">gen_op_fpush</name><argument_list pos:start="2027:33" pos:end="2027:34">()</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="2029:21" pos:end="2057:21">switch<condition pos:start="2029:27" pos:end="2029:35">(<expr pos:start="2029:28" pos:end="2029:34"><name pos:start="2029:28" pos:end="2029:29">op</name> <operator pos:start="2029:31" pos:end="2029:32">&gt;&gt;</operator> <literal type="number" pos:start="2029:34" pos:end="2029:34">4</literal></expr>)</condition> <block pos:start="2029:37" pos:end="2057:21">{<block_content pos:start="2031:21" pos:end="2055:30">

                    <case pos:start="2031:21" pos:end="2031:27">case <expr pos:start="2031:26" pos:end="2031:26"><literal type="number" pos:start="2031:26" pos:end="2031:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2033:25" pos:end="2033:45"><expr pos:start="2033:25" pos:end="2033:44"><call pos:start="2033:25" pos:end="2033:44"><name pos:start="2033:25" pos:end="2033:42">gen_op_flds_ST0_A0</name><argument_list pos:start="2033:43" pos:end="2033:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2035:25" pos:end="2035:30">break;</break>

                    <case pos:start="2037:21" pos:end="2037:27">case <expr pos:start="2037:26" pos:end="2037:26"><literal type="number" pos:start="2037:26" pos:end="2037:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2039:25" pos:end="2039:46"><expr pos:start="2039:25" pos:end="2039:45"><call pos:start="2039:25" pos:end="2039:45"><name pos:start="2039:25" pos:end="2039:43">gen_op_fildl_ST0_A0</name><argument_list pos:start="2039:44" pos:end="2039:45">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2041:25" pos:end="2041:30">break;</break>

                    <case pos:start="2043:21" pos:end="2043:27">case <expr pos:start="2043:26" pos:end="2043:26"><literal type="number" pos:start="2043:26" pos:end="2043:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2045:25" pos:end="2045:45"><expr pos:start="2045:25" pos:end="2045:44"><call pos:start="2045:25" pos:end="2045:44"><name pos:start="2045:25" pos:end="2045:42">gen_op_fldl_ST0_A0</name><argument_list pos:start="2045:43" pos:end="2045:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2047:25" pos:end="2047:30">break;</break>

                    <case pos:start="2049:21" pos:end="2049:27">case <expr pos:start="2049:26" pos:end="2049:26"><literal type="number" pos:start="2049:26" pos:end="2049:26">3</literal></expr>:</case>

                    <default pos:start="2051:21" pos:end="2051:28">default:</default>

                        <expr_stmt pos:start="2053:25" pos:end="2053:45"><expr pos:start="2053:25" pos:end="2053:44"><call pos:start="2053:25" pos:end="2053:44"><name pos:start="2053:25" pos:end="2053:42">gen_op_fild_ST0_A0</name><argument_list pos:start="2053:43" pos:end="2053:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2055:25" pos:end="2055:30">break;</break>

                    </block_content>}</block></switch>

                    <break pos:start="2059:21" pos:end="2059:26">break;</break>

                <default pos:start="2061:17" pos:end="2061:24">default:</default>

                    <switch pos:start="2063:21" pos:end="2091:21">switch<condition pos:start="2063:27" pos:end="2063:35">(<expr pos:start="2063:28" pos:end="2063:34"><name pos:start="2063:28" pos:end="2063:29">op</name> <operator pos:start="2063:31" pos:end="2063:32">&gt;&gt;</operator> <literal type="number" pos:start="2063:34" pos:end="2063:34">4</literal></expr>)</condition> <block pos:start="2063:37" pos:end="2091:21">{<block_content pos:start="2065:21" pos:end="2089:30">

                    <case pos:start="2065:21" pos:end="2065:27">case <expr pos:start="2065:26" pos:end="2065:26"><literal type="number" pos:start="2065:26" pos:end="2065:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2067:25" pos:end="2067:45"><expr pos:start="2067:25" pos:end="2067:44"><call pos:start="2067:25" pos:end="2067:44"><name pos:start="2067:25" pos:end="2067:42">gen_op_fsts_ST0_A0</name><argument_list pos:start="2067:43" pos:end="2067:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2069:25" pos:end="2069:30">break;</break>

                    <case pos:start="2071:21" pos:end="2071:27">case <expr pos:start="2071:26" pos:end="2071:26"><literal type="number" pos:start="2071:26" pos:end="2071:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2073:25" pos:end="2073:46"><expr pos:start="2073:25" pos:end="2073:45"><call pos:start="2073:25" pos:end="2073:45"><name pos:start="2073:25" pos:end="2073:43">gen_op_fistl_ST0_A0</name><argument_list pos:start="2073:44" pos:end="2073:45">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2075:25" pos:end="2075:30">break;</break>

                    <case pos:start="2077:21" pos:end="2077:27">case <expr pos:start="2077:26" pos:end="2077:26"><literal type="number" pos:start="2077:26" pos:end="2077:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2079:25" pos:end="2079:45"><expr pos:start="2079:25" pos:end="2079:44"><call pos:start="2079:25" pos:end="2079:44"><name pos:start="2079:25" pos:end="2079:42">gen_op_fstl_ST0_A0</name><argument_list pos:start="2079:43" pos:end="2079:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2081:25" pos:end="2081:30">break;</break>

                    <case pos:start="2083:21" pos:end="2083:27">case <expr pos:start="2083:26" pos:end="2083:26"><literal type="number" pos:start="2083:26" pos:end="2083:26">3</literal></expr>:</case>

                    <default pos:start="2085:21" pos:end="2085:28">default:</default>

                        <expr_stmt pos:start="2087:25" pos:end="2087:45"><expr pos:start="2087:25" pos:end="2087:44"><call pos:start="2087:25" pos:end="2087:44"><name pos:start="2087:25" pos:end="2087:42">gen_op_fist_ST0_A0</name><argument_list pos:start="2087:43" pos:end="2087:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2089:25" pos:end="2089:30">break;</break>

                    </block_content>}</block></switch>

                    <if_stmt pos:start="2093:21" pos:end="2095:38"><if pos:start="2093:21" pos:end="2095:38">if <condition pos:start="2093:24" pos:end="2093:38">(<expr pos:start="2093:25" pos:end="2093:37"><operator pos:start="2093:25" pos:end="2093:25">(</operator><name pos:start="2093:26" pos:end="2093:27">op</name> <operator pos:start="2093:29" pos:end="2093:29">&amp;</operator> <literal type="number" pos:start="2093:31" pos:end="2093:31">7</literal><operator pos:start="2093:32" pos:end="2093:32">)</operator> <operator pos:start="2093:34" pos:end="2093:35">==</operator> <literal type="number" pos:start="2093:37" pos:end="2093:37">3</literal></expr>)</condition><block type="pseudo" pos:start="2095:25" pos:end="2095:38"><block_content pos:start="2095:25" pos:end="2095:38">

                        <expr_stmt pos:start="2095:25" pos:end="2095:38"><expr pos:start="2095:25" pos:end="2095:37"><call pos:start="2095:25" pos:end="2095:37"><name pos:start="2095:25" pos:end="2095:35">gen_op_fpop</name><argument_list pos:start="2095:36" pos:end="2095:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="2097:21" pos:end="2097:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="2101:17" pos:end="2101:22">break;</break>

            <case pos:start="2103:13" pos:end="2103:22">case <expr pos:start="2103:18" pos:end="2103:21"><literal type="number" pos:start="2103:18" pos:end="2103:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="2103:24" pos:end="2103:38">/* fldcw mem */</comment>

                <expr_stmt pos:start="2105:17" pos:end="2105:34"><expr pos:start="2105:17" pos:end="2105:33"><call pos:start="2105:17" pos:end="2105:33"><name pos:start="2105:17" pos:end="2105:31">gen_op_fldcw_A0</name><argument_list pos:start="2105:32" pos:end="2105:33">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2107:17" pos:end="2107:22">break;</break>

            <case pos:start="2109:13" pos:end="2109:22">case <expr pos:start="2109:18" pos:end="2109:21"><literal type="number" pos:start="2109:18" pos:end="2109:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="2109:24" pos:end="2109:39">/* fnstcw mem */</comment>

                <expr_stmt pos:start="2111:17" pos:end="2111:35"><expr pos:start="2111:17" pos:end="2111:34"><call pos:start="2111:17" pos:end="2111:34"><name pos:start="2111:17" pos:end="2111:32">gen_op_fnstcw_A0</name><argument_list pos:start="2111:33" pos:end="2111:34">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2113:17" pos:end="2113:22">break;</break>

            <case pos:start="2115:13" pos:end="2115:22">case <expr pos:start="2115:18" pos:end="2115:21"><literal type="number" pos:start="2115:18" pos:end="2115:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="2115:24" pos:end="2115:37">/* fldt mem */</comment>

                <expr_stmt pos:start="2117:17" pos:end="2117:31"><expr pos:start="2117:17" pos:end="2117:30"><call pos:start="2117:17" pos:end="2117:30"><name pos:start="2117:17" pos:end="2117:28">gen_op_fpush</name><argument_list pos:start="2117:29" pos:end="2117:30">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2119:17" pos:end="2119:37"><expr pos:start="2119:17" pos:end="2119:36"><call pos:start="2119:17" pos:end="2119:36"><name pos:start="2119:17" pos:end="2119:34">gen_op_fldt_ST0_A0</name><argument_list pos:start="2119:35" pos:end="2119:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2121:17" pos:end="2121:22">break;</break>

            <case pos:start="2123:13" pos:end="2123:22">case <expr pos:start="2123:18" pos:end="2123:21"><literal type="number" pos:start="2123:18" pos:end="2123:21">0x1f</literal></expr>:</case> <comment type="block" pos:start="2123:24" pos:end="2123:38">/* fstpt mem */</comment>

                <expr_stmt pos:start="2125:17" pos:end="2125:37"><expr pos:start="2125:17" pos:end="2125:36"><call pos:start="2125:17" pos:end="2125:36"><name pos:start="2125:17" pos:end="2125:34">gen_op_fstt_ST0_A0</name><argument_list pos:start="2125:35" pos:end="2125:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2127:17" pos:end="2127:30"><expr pos:start="2127:17" pos:end="2127:29"><call pos:start="2127:17" pos:end="2127:29"><name pos:start="2127:17" pos:end="2127:27">gen_op_fpop</name><argument_list pos:start="2127:28" pos:end="2127:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2129:17" pos:end="2129:22">break;</break>

            <case pos:start="2131:13" pos:end="2131:22">case <expr pos:start="2131:18" pos:end="2131:21"><literal type="number" pos:start="2131:18" pos:end="2131:21">0x2f</literal></expr>:</case> <comment type="block" pos:start="2131:24" pos:end="2131:39">/* fnstsw mem */</comment>

                <expr_stmt pos:start="2133:17" pos:end="2133:35"><expr pos:start="2133:17" pos:end="2133:34"><call pos:start="2133:17" pos:end="2133:34"><name pos:start="2133:17" pos:end="2133:32">gen_op_fnstsw_A0</name><argument_list pos:start="2133:33" pos:end="2133:34">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2135:17" pos:end="2135:22">break;</break>

            <case pos:start="2137:13" pos:end="2137:22">case <expr pos:start="2137:18" pos:end="2137:21"><literal type="number" pos:start="2137:18" pos:end="2137:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="2137:24" pos:end="2137:33">/* fbld */</comment>

                <expr_stmt pos:start="2139:17" pos:end="2139:31"><expr pos:start="2139:17" pos:end="2139:30"><call pos:start="2139:17" pos:end="2139:30"><name pos:start="2139:17" pos:end="2139:28">gen_op_fpush</name><argument_list pos:start="2139:29" pos:end="2139:30">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2141:17" pos:end="2141:37"><expr pos:start="2141:17" pos:end="2141:36"><call pos:start="2141:17" pos:end="2141:36"><name pos:start="2141:17" pos:end="2141:34">gen_op_fbld_ST0_A0</name><argument_list pos:start="2141:35" pos:end="2141:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2143:17" pos:end="2143:22">break;</break>

            <case pos:start="2145:13" pos:end="2145:22">case <expr pos:start="2145:18" pos:end="2145:21"><literal type="number" pos:start="2145:18" pos:end="2145:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="2145:24" pos:end="2145:34">/* fbstp */</comment>

                <expr_stmt pos:start="2147:17" pos:end="2147:37"><expr pos:start="2147:17" pos:end="2147:36"><call pos:start="2147:17" pos:end="2147:36"><name pos:start="2147:17" pos:end="2147:34">gen_op_fbst_ST0_A0</name><argument_list pos:start="2147:35" pos:end="2147:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2149:17" pos:end="2149:30"><expr pos:start="2149:17" pos:end="2149:29"><call pos:start="2149:17" pos:end="2149:29"><name pos:start="2149:17" pos:end="2149:27">gen_op_fpop</name><argument_list pos:start="2149:28" pos:end="2149:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2151:17" pos:end="2151:22">break;</break>

            <case pos:start="2153:13" pos:end="2153:22">case <expr pos:start="2153:18" pos:end="2153:21"><literal type="number" pos:start="2153:18" pos:end="2153:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="2153:24" pos:end="2153:35">/* fildll */</comment>

                <expr_stmt pos:start="2155:17" pos:end="2155:31"><expr pos:start="2155:17" pos:end="2155:30"><call pos:start="2155:17" pos:end="2155:30"><name pos:start="2155:17" pos:end="2155:28">gen_op_fpush</name><argument_list pos:start="2155:29" pos:end="2155:30">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2157:17" pos:end="2157:39"><expr pos:start="2157:17" pos:end="2157:38"><call pos:start="2157:17" pos:end="2157:38"><name pos:start="2157:17" pos:end="2157:36">gen_op_fildll_ST0_A0</name><argument_list pos:start="2157:37" pos:end="2157:38">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2159:17" pos:end="2159:22">break;</break>

            <case pos:start="2161:13" pos:end="2161:22">case <expr pos:start="2161:18" pos:end="2161:21"><literal type="number" pos:start="2161:18" pos:end="2161:21">0x3f</literal></expr>:</case> <comment type="block" pos:start="2161:24" pos:end="2161:36">/* fistpll */</comment>

                <expr_stmt pos:start="2163:17" pos:end="2163:39"><expr pos:start="2163:17" pos:end="2163:38"><call pos:start="2163:17" pos:end="2163:38"><name pos:start="2163:17" pos:end="2163:36">gen_op_fistll_ST0_A0</name><argument_list pos:start="2163:37" pos:end="2163:38">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2165:17" pos:end="2165:30"><expr pos:start="2165:17" pos:end="2165:29"><call pos:start="2165:17" pos:end="2165:29"><name pos:start="2165:17" pos:end="2165:27">gen_op_fpop</name><argument_list pos:start="2165:28" pos:end="2165:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2167:17" pos:end="2167:22">break;</break>

            <default pos:start="2169:13" pos:end="2169:20">default:</default>

                <goto pos:start="2171:17" pos:end="2171:32">goto <name pos:start="2171:22" pos:end="2171:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="2175:11" pos:end="2621:9">else <block pos:start="2175:16" pos:end="2621:9">{<block_content pos:start="2179:13" pos:end="2619:13">

            <comment type="block" pos:start="2177:13" pos:end="2177:36">/* register float ops */</comment>

            <expr_stmt pos:start="2179:13" pos:end="2179:23"><expr pos:start="2179:13" pos:end="2179:22"><name pos:start="2179:13" pos:end="2179:17">opreg</name> <operator pos:start="2179:19" pos:end="2179:19">=</operator> <name pos:start="2179:21" pos:end="2179:22">rm</name></expr>;</expr_stmt>



            <switch pos:start="2183:13" pos:end="2619:13">switch<condition pos:start="2183:19" pos:end="2183:22">(<expr pos:start="2183:20" pos:end="2183:21"><name pos:start="2183:20" pos:end="2183:21">op</name></expr>)</condition> <block pos:start="2183:24" pos:end="2619:13">{<block_content pos:start="2185:13" pos:end="2617:32">

            <case pos:start="2185:13" pos:end="2185:22">case <expr pos:start="2185:18" pos:end="2185:21"><literal type="number" pos:start="2185:18" pos:end="2185:21">0x08</literal></expr>:</case> <comment type="block" pos:start="2185:24" pos:end="2185:36">/* fld sti */</comment>

                <expr_stmt pos:start="2187:17" pos:end="2187:31"><expr pos:start="2187:17" pos:end="2187:30"><call pos:start="2187:17" pos:end="2187:30"><name pos:start="2187:17" pos:end="2187:28">gen_op_fpush</name><argument_list pos:start="2187:29" pos:end="2187:30">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2189:17" pos:end="2189:53"><expr pos:start="2189:17" pos:end="2189:52"><call pos:start="2189:17" pos:end="2189:52"><name pos:start="2189:17" pos:end="2189:35">gen_op_fmov_ST0_STN</name><argument_list pos:start="2189:36" pos:end="2189:52">(<argument pos:start="2189:37" pos:end="2189:51"><expr pos:start="2189:37" pos:end="2189:51"><operator pos:start="2189:37" pos:end="2189:37">(</operator><name pos:start="2189:38" pos:end="2189:42">opreg</name> <operator pos:start="2189:44" pos:end="2189:44">+</operator> <literal type="number" pos:start="2189:46" pos:end="2189:46">1</literal><operator pos:start="2189:47" pos:end="2189:47">)</operator> <operator pos:start="2189:49" pos:end="2189:49">&amp;</operator> <literal type="number" pos:start="2189:51" pos:end="2189:51">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2191:17" pos:end="2191:22">break;</break>

            <case pos:start="2193:13" pos:end="2193:22">case <expr pos:start="2193:18" pos:end="2193:21"><literal type="number" pos:start="2193:18" pos:end="2193:21">0x09</literal></expr>:</case> <comment type="block" pos:start="2193:24" pos:end="2193:38">/* fxchg sti */</comment>

                <expr_stmt pos:start="2195:17" pos:end="2195:44"><expr pos:start="2195:17" pos:end="2195:43"><call pos:start="2195:17" pos:end="2195:43"><name pos:start="2195:17" pos:end="2195:36">gen_op_fxchg_ST0_STN</name><argument_list pos:start="2195:37" pos:end="2195:43">(<argument pos:start="2195:38" pos:end="2195:42"><expr pos:start="2195:38" pos:end="2195:42"><name pos:start="2195:38" pos:end="2195:42">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2197:17" pos:end="2197:22">break;</break>

            <case pos:start="2199:13" pos:end="2199:22">case <expr pos:start="2199:18" pos:end="2199:21"><literal type="number" pos:start="2199:18" pos:end="2199:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="2199:24" pos:end="2199:37">/* grp d9/2 */</comment>

                <switch pos:start="2201:17" pos:end="2211:17">switch<condition pos:start="2201:23" pos:end="2201:26">(<expr pos:start="2201:24" pos:end="2201:25"><name pos:start="2201:24" pos:end="2201:25">rm</name></expr>)</condition> <block pos:start="2201:28" pos:end="2211:17">{<block_content pos:start="2203:17" pos:end="2209:36">

                <case pos:start="2203:17" pos:end="2203:23">case <expr pos:start="2203:22" pos:end="2203:22"><literal type="number" pos:start="2203:22" pos:end="2203:22">0</literal></expr>:</case> <comment type="block" pos:start="2203:25" pos:end="2203:34">/* fnop */</comment>

                    <break pos:start="2205:21" pos:end="2205:26">break;</break>

                <default pos:start="2207:17" pos:end="2207:24">default:</default>

                    <goto pos:start="2209:21" pos:end="2209:36">goto <name pos:start="2209:26" pos:end="2209:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2213:17" pos:end="2213:22">break;</break>

            <case pos:start="2215:13" pos:end="2215:22">case <expr pos:start="2215:18" pos:end="2215:21"><literal type="number" pos:start="2215:18" pos:end="2215:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="2215:24" pos:end="2215:37">/* grp d9/4 */</comment>

                <switch pos:start="2217:17" pos:end="2249:17">switch<condition pos:start="2217:23" pos:end="2217:26">(<expr pos:start="2217:24" pos:end="2217:25"><name pos:start="2217:24" pos:end="2217:25">rm</name></expr>)</condition> <block pos:start="2217:28" pos:end="2249:17">{<block_content pos:start="2219:17" pos:end="2247:36">

                <case pos:start="2219:17" pos:end="2219:23">case <expr pos:start="2219:22" pos:end="2219:22"><literal type="number" pos:start="2219:22" pos:end="2219:22">0</literal></expr>:</case> <comment type="block" pos:start="2219:25" pos:end="2219:34">/* fchs */</comment>

                    <expr_stmt pos:start="2221:21" pos:end="2221:38"><expr pos:start="2221:21" pos:end="2221:37"><call pos:start="2221:21" pos:end="2221:37"><name pos:start="2221:21" pos:end="2221:35">gen_op_fchs_ST0</name><argument_list pos:start="2221:36" pos:end="2221:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2223:21" pos:end="2223:26">break;</break>

                <case pos:start="2225:17" pos:end="2225:23">case <expr pos:start="2225:22" pos:end="2225:22"><literal type="number" pos:start="2225:22" pos:end="2225:22">1</literal></expr>:</case> <comment type="block" pos:start="2225:25" pos:end="2225:34">/* fabs */</comment>

                    <expr_stmt pos:start="2227:21" pos:end="2227:38"><expr pos:start="2227:21" pos:end="2227:37"><call pos:start="2227:21" pos:end="2227:37"><name pos:start="2227:21" pos:end="2227:35">gen_op_fabs_ST0</name><argument_list pos:start="2227:36" pos:end="2227:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2229:21" pos:end="2229:26">break;</break>

                <case pos:start="2231:17" pos:end="2231:23">case <expr pos:start="2231:22" pos:end="2231:22"><literal type="number" pos:start="2231:22" pos:end="2231:22">4</literal></expr>:</case> <comment type="block" pos:start="2231:25" pos:end="2231:34">/* ftst */</comment>

                    <expr_stmt pos:start="2233:21" pos:end="2233:38"><expr pos:start="2233:21" pos:end="2233:37"><call pos:start="2233:21" pos:end="2233:37"><name pos:start="2233:21" pos:end="2233:35">gen_op_fldz_FT0</name><argument_list pos:start="2233:36" pos:end="2233:37">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2235:21" pos:end="2235:42"><expr pos:start="2235:21" pos:end="2235:41"><call pos:start="2235:21" pos:end="2235:41"><name pos:start="2235:21" pos:end="2235:39">gen_op_fcom_ST0_FT0</name><argument_list pos:start="2235:40" pos:end="2235:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2237:21" pos:end="2237:26">break;</break>

                <case pos:start="2239:17" pos:end="2239:23">case <expr pos:start="2239:22" pos:end="2239:22"><literal type="number" pos:start="2239:22" pos:end="2239:22">5</literal></expr>:</case> <comment type="block" pos:start="2239:25" pos:end="2239:34">/* fxam */</comment>

                    <expr_stmt pos:start="2241:21" pos:end="2241:38"><expr pos:start="2241:21" pos:end="2241:37"><call pos:start="2241:21" pos:end="2241:37"><name pos:start="2241:21" pos:end="2241:35">gen_op_fxam_ST0</name><argument_list pos:start="2241:36" pos:end="2241:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2243:21" pos:end="2243:26">break;</break>

                <default pos:start="2245:17" pos:end="2245:24">default:</default>

                    <goto pos:start="2247:21" pos:end="2247:36">goto <name pos:start="2247:26" pos:end="2247:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2251:17" pos:end="2251:22">break;</break>

            <case pos:start="2253:13" pos:end="2253:22">case <expr pos:start="2253:18" pos:end="2253:21"><literal type="number" pos:start="2253:18" pos:end="2253:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="2253:24" pos:end="2253:37">/* grp d9/5 */</comment>

                <block pos:start="2255:17" pos:end="2321:17">{<block_content pos:start="2257:21" pos:end="2319:21">

                    <switch pos:start="2257:21" pos:end="2319:21">switch<condition pos:start="2257:27" pos:end="2257:30">(<expr pos:start="2257:28" pos:end="2257:29"><name pos:start="2257:28" pos:end="2257:29">rm</name></expr>)</condition> <block pos:start="2257:32" pos:end="2319:21">{<block_content pos:start="2259:21" pos:end="2317:40">

                    <case pos:start="2259:21" pos:end="2259:27">case <expr pos:start="2259:26" pos:end="2259:26"><literal type="number" pos:start="2259:26" pos:end="2259:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2261:25" pos:end="2261:39"><expr pos:start="2261:25" pos:end="2261:38"><call pos:start="2261:25" pos:end="2261:38"><name pos:start="2261:25" pos:end="2261:36">gen_op_fpush</name><argument_list pos:start="2261:37" pos:end="2261:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2263:25" pos:end="2263:42"><expr pos:start="2263:25" pos:end="2263:41"><call pos:start="2263:25" pos:end="2263:41"><name pos:start="2263:25" pos:end="2263:39">gen_op_fld1_ST0</name><argument_list pos:start="2263:40" pos:end="2263:41">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2265:25" pos:end="2265:30">break;</break>

                    <case pos:start="2267:21" pos:end="2267:27">case <expr pos:start="2267:26" pos:end="2267:26"><literal type="number" pos:start="2267:26" pos:end="2267:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2269:25" pos:end="2269:39"><expr pos:start="2269:25" pos:end="2269:38"><call pos:start="2269:25" pos:end="2269:38"><name pos:start="2269:25" pos:end="2269:36">gen_op_fpush</name><argument_list pos:start="2269:37" pos:end="2269:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2271:25" pos:end="2271:44"><expr pos:start="2271:25" pos:end="2271:43"><call pos:start="2271:25" pos:end="2271:43"><name pos:start="2271:25" pos:end="2271:41">gen_op_fldl2t_ST0</name><argument_list pos:start="2271:42" pos:end="2271:43">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2273:25" pos:end="2273:30">break;</break>

                    <case pos:start="2275:21" pos:end="2275:27">case <expr pos:start="2275:26" pos:end="2275:26"><literal type="number" pos:start="2275:26" pos:end="2275:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2277:25" pos:end="2277:39"><expr pos:start="2277:25" pos:end="2277:38"><call pos:start="2277:25" pos:end="2277:38"><name pos:start="2277:25" pos:end="2277:36">gen_op_fpush</name><argument_list pos:start="2277:37" pos:end="2277:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2279:25" pos:end="2279:44"><expr pos:start="2279:25" pos:end="2279:43"><call pos:start="2279:25" pos:end="2279:43"><name pos:start="2279:25" pos:end="2279:41">gen_op_fldl2e_ST0</name><argument_list pos:start="2279:42" pos:end="2279:43">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2281:25" pos:end="2281:30">break;</break>

                    <case pos:start="2283:21" pos:end="2283:27">case <expr pos:start="2283:26" pos:end="2283:26"><literal type="number" pos:start="2283:26" pos:end="2283:26">3</literal></expr>:</case>

                        <expr_stmt pos:start="2285:25" pos:end="2285:39"><expr pos:start="2285:25" pos:end="2285:38"><call pos:start="2285:25" pos:end="2285:38"><name pos:start="2285:25" pos:end="2285:36">gen_op_fpush</name><argument_list pos:start="2285:37" pos:end="2285:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2287:25" pos:end="2287:43"><expr pos:start="2287:25" pos:end="2287:42"><call pos:start="2287:25" pos:end="2287:42"><name pos:start="2287:25" pos:end="2287:40">gen_op_fldpi_ST0</name><argument_list pos:start="2287:41" pos:end="2287:42">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2289:25" pos:end="2289:30">break;</break>

                    <case pos:start="2291:21" pos:end="2291:27">case <expr pos:start="2291:26" pos:end="2291:26"><literal type="number" pos:start="2291:26" pos:end="2291:26">4</literal></expr>:</case>

                        <expr_stmt pos:start="2293:25" pos:end="2293:39"><expr pos:start="2293:25" pos:end="2293:38"><call pos:start="2293:25" pos:end="2293:38"><name pos:start="2293:25" pos:end="2293:36">gen_op_fpush</name><argument_list pos:start="2293:37" pos:end="2293:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2295:25" pos:end="2295:44"><expr pos:start="2295:25" pos:end="2295:43"><call pos:start="2295:25" pos:end="2295:43"><name pos:start="2295:25" pos:end="2295:41">gen_op_fldlg2_ST0</name><argument_list pos:start="2295:42" pos:end="2295:43">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2297:25" pos:end="2297:30">break;</break>

                    <case pos:start="2299:21" pos:end="2299:27">case <expr pos:start="2299:26" pos:end="2299:26"><literal type="number" pos:start="2299:26" pos:end="2299:26">5</literal></expr>:</case>

                        <expr_stmt pos:start="2301:25" pos:end="2301:39"><expr pos:start="2301:25" pos:end="2301:38"><call pos:start="2301:25" pos:end="2301:38"><name pos:start="2301:25" pos:end="2301:36">gen_op_fpush</name><argument_list pos:start="2301:37" pos:end="2301:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2303:25" pos:end="2303:44"><expr pos:start="2303:25" pos:end="2303:43"><call pos:start="2303:25" pos:end="2303:43"><name pos:start="2303:25" pos:end="2303:41">gen_op_fldln2_ST0</name><argument_list pos:start="2303:42" pos:end="2303:43">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2305:25" pos:end="2305:30">break;</break>

                    <case pos:start="2307:21" pos:end="2307:27">case <expr pos:start="2307:26" pos:end="2307:26"><literal type="number" pos:start="2307:26" pos:end="2307:26">6</literal></expr>:</case>

                        <expr_stmt pos:start="2309:25" pos:end="2309:39"><expr pos:start="2309:25" pos:end="2309:38"><call pos:start="2309:25" pos:end="2309:38"><name pos:start="2309:25" pos:end="2309:36">gen_op_fpush</name><argument_list pos:start="2309:37" pos:end="2309:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2311:25" pos:end="2311:42"><expr pos:start="2311:25" pos:end="2311:41"><call pos:start="2311:25" pos:end="2311:41"><name pos:start="2311:25" pos:end="2311:39">gen_op_fldz_ST0</name><argument_list pos:start="2311:40" pos:end="2311:41">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2313:25" pos:end="2313:30">break;</break>

                    <default pos:start="2315:21" pos:end="2315:28">default:</default>

                        <goto pos:start="2317:25" pos:end="2317:40">goto <name pos:start="2317:30" pos:end="2317:39">illegal_op</name>;</goto>

                    </block_content>}</block></switch>

                </block_content>}</block>

                <break pos:start="2323:17" pos:end="2323:22">break;</break>

            <case pos:start="2325:13" pos:end="2325:22">case <expr pos:start="2325:18" pos:end="2325:21"><literal type="number" pos:start="2325:18" pos:end="2325:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="2325:24" pos:end="2325:37">/* grp d9/6 */</comment>

                <switch pos:start="2327:17" pos:end="2379:17">switch<condition pos:start="2327:23" pos:end="2327:26">(<expr pos:start="2327:24" pos:end="2327:25"><name pos:start="2327:24" pos:end="2327:25">rm</name></expr>)</condition> <block pos:start="2327:28" pos:end="2379:17">{<block_content pos:start="2329:17" pos:end="2377:26">

                <case pos:start="2329:17" pos:end="2329:23">case <expr pos:start="2329:22" pos:end="2329:22"><literal type="number" pos:start="2329:22" pos:end="2329:22">0</literal></expr>:</case> <comment type="block" pos:start="2329:25" pos:end="2329:35">/* f2xm1 */</comment>

                    <expr_stmt pos:start="2331:21" pos:end="2331:35"><expr pos:start="2331:21" pos:end="2331:34"><call pos:start="2331:21" pos:end="2331:34"><name pos:start="2331:21" pos:end="2331:32">gen_op_f2xm1</name><argument_list pos:start="2331:33" pos:end="2331:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2333:21" pos:end="2333:26">break;</break>

                <case pos:start="2335:17" pos:end="2335:23">case <expr pos:start="2335:22" pos:end="2335:22"><literal type="number" pos:start="2335:22" pos:end="2335:22">1</literal></expr>:</case> <comment type="block" pos:start="2335:25" pos:end="2335:35">/* fyl2x */</comment>

                    <expr_stmt pos:start="2337:21" pos:end="2337:35"><expr pos:start="2337:21" pos:end="2337:34"><call pos:start="2337:21" pos:end="2337:34"><name pos:start="2337:21" pos:end="2337:32">gen_op_fyl2x</name><argument_list pos:start="2337:33" pos:end="2337:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2339:21" pos:end="2339:26">break;</break>

                <case pos:start="2341:17" pos:end="2341:23">case <expr pos:start="2341:22" pos:end="2341:22"><literal type="number" pos:start="2341:22" pos:end="2341:22">2</literal></expr>:</case> <comment type="block" pos:start="2341:25" pos:end="2341:35">/* fptan */</comment>

                    <expr_stmt pos:start="2343:21" pos:end="2343:35"><expr pos:start="2343:21" pos:end="2343:34"><call pos:start="2343:21" pos:end="2343:34"><name pos:start="2343:21" pos:end="2343:32">gen_op_fptan</name><argument_list pos:start="2343:33" pos:end="2343:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2345:21" pos:end="2345:26">break;</break>

                <case pos:start="2347:17" pos:end="2347:23">case <expr pos:start="2347:22" pos:end="2347:22"><literal type="number" pos:start="2347:22" pos:end="2347:22">3</literal></expr>:</case> <comment type="block" pos:start="2347:25" pos:end="2347:36">/* fpatan */</comment>

                    <expr_stmt pos:start="2349:21" pos:end="2349:36"><expr pos:start="2349:21" pos:end="2349:35"><call pos:start="2349:21" pos:end="2349:35"><name pos:start="2349:21" pos:end="2349:33">gen_op_fpatan</name><argument_list pos:start="2349:34" pos:end="2349:35">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2351:21" pos:end="2351:26">break;</break>

                <case pos:start="2353:17" pos:end="2353:23">case <expr pos:start="2353:22" pos:end="2353:22"><literal type="number" pos:start="2353:22" pos:end="2353:22">4</literal></expr>:</case> <comment type="block" pos:start="2353:25" pos:end="2353:37">/* fxtract */</comment>

                    <expr_stmt pos:start="2355:21" pos:end="2355:37"><expr pos:start="2355:21" pos:end="2355:36"><call pos:start="2355:21" pos:end="2355:36"><name pos:start="2355:21" pos:end="2355:34">gen_op_fxtract</name><argument_list pos:start="2355:35" pos:end="2355:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2357:21" pos:end="2357:26">break;</break>

                <case pos:start="2359:17" pos:end="2359:23">case <expr pos:start="2359:22" pos:end="2359:22"><literal type="number" pos:start="2359:22" pos:end="2359:22">5</literal></expr>:</case> <comment type="block" pos:start="2359:25" pos:end="2359:36">/* fprem1 */</comment>

                    <expr_stmt pos:start="2361:21" pos:end="2361:36"><expr pos:start="2361:21" pos:end="2361:35"><call pos:start="2361:21" pos:end="2361:35"><name pos:start="2361:21" pos:end="2361:33">gen_op_fprem1</name><argument_list pos:start="2361:34" pos:end="2361:35">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2363:21" pos:end="2363:26">break;</break>

                <case pos:start="2365:17" pos:end="2365:23">case <expr pos:start="2365:22" pos:end="2365:22"><literal type="number" pos:start="2365:22" pos:end="2365:22">6</literal></expr>:</case> <comment type="block" pos:start="2365:25" pos:end="2365:37">/* fdecstp */</comment>

                    <expr_stmt pos:start="2367:21" pos:end="2367:37"><expr pos:start="2367:21" pos:end="2367:36"><call pos:start="2367:21" pos:end="2367:36"><name pos:start="2367:21" pos:end="2367:34">gen_op_fdecstp</name><argument_list pos:start="2367:35" pos:end="2367:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2369:21" pos:end="2369:26">break;</break>

                <default pos:start="2371:17" pos:end="2371:24">default:</default>

                <case pos:start="2373:17" pos:end="2373:23">case <expr pos:start="2373:22" pos:end="2373:22"><literal type="number" pos:start="2373:22" pos:end="2373:22">7</literal></expr>:</case> <comment type="block" pos:start="2373:25" pos:end="2373:37">/* fincstp */</comment>

                    <expr_stmt pos:start="2375:21" pos:end="2375:37"><expr pos:start="2375:21" pos:end="2375:36"><call pos:start="2375:21" pos:end="2375:36"><name pos:start="2375:21" pos:end="2375:34">gen_op_fincstp</name><argument_list pos:start="2375:35" pos:end="2375:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2377:21" pos:end="2377:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="2381:17" pos:end="2381:22">break;</break>

            <case pos:start="2383:13" pos:end="2383:22">case <expr pos:start="2383:18" pos:end="2383:21"><literal type="number" pos:start="2383:18" pos:end="2383:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="2383:24" pos:end="2383:37">/* grp d9/7 */</comment>

                <switch pos:start="2385:17" pos:end="2437:17">switch<condition pos:start="2385:23" pos:end="2385:26">(<expr pos:start="2385:24" pos:end="2385:25"><name pos:start="2385:24" pos:end="2385:25">rm</name></expr>)</condition> <block pos:start="2385:28" pos:end="2437:17">{<block_content pos:start="2387:17" pos:end="2435:26">

                <case pos:start="2387:17" pos:end="2387:23">case <expr pos:start="2387:22" pos:end="2387:22"><literal type="number" pos:start="2387:22" pos:end="2387:22">0</literal></expr>:</case> <comment type="block" pos:start="2387:25" pos:end="2387:35">/* fprem */</comment>

                    <expr_stmt pos:start="2389:21" pos:end="2389:35"><expr pos:start="2389:21" pos:end="2389:34"><call pos:start="2389:21" pos:end="2389:34"><name pos:start="2389:21" pos:end="2389:32">gen_op_fprem</name><argument_list pos:start="2389:33" pos:end="2389:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2391:21" pos:end="2391:26">break;</break>

                <case pos:start="2393:17" pos:end="2393:23">case <expr pos:start="2393:22" pos:end="2393:22"><literal type="number" pos:start="2393:22" pos:end="2393:22">1</literal></expr>:</case> <comment type="block" pos:start="2393:25" pos:end="2393:37">/* fyl2xp1 */</comment>

                    <expr_stmt pos:start="2395:21" pos:end="2395:37"><expr pos:start="2395:21" pos:end="2395:36"><call pos:start="2395:21" pos:end="2395:36"><name pos:start="2395:21" pos:end="2395:34">gen_op_fyl2xp1</name><argument_list pos:start="2395:35" pos:end="2395:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2397:21" pos:end="2397:26">break;</break>

                <case pos:start="2399:17" pos:end="2399:23">case <expr pos:start="2399:22" pos:end="2399:22"><literal type="number" pos:start="2399:22" pos:end="2399:22">2</literal></expr>:</case> <comment type="block" pos:start="2399:25" pos:end="2399:35">/* fsqrt */</comment>

                    <expr_stmt pos:start="2401:21" pos:end="2401:35"><expr pos:start="2401:21" pos:end="2401:34"><call pos:start="2401:21" pos:end="2401:34"><name pos:start="2401:21" pos:end="2401:32">gen_op_fsqrt</name><argument_list pos:start="2401:33" pos:end="2401:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2403:21" pos:end="2403:26">break;</break>

                <case pos:start="2405:17" pos:end="2405:23">case <expr pos:start="2405:22" pos:end="2405:22"><literal type="number" pos:start="2405:22" pos:end="2405:22">3</literal></expr>:</case> <comment type="block" pos:start="2405:25" pos:end="2405:37">/* fsincos */</comment>

                    <expr_stmt pos:start="2407:21" pos:end="2407:37"><expr pos:start="2407:21" pos:end="2407:36"><call pos:start="2407:21" pos:end="2407:36"><name pos:start="2407:21" pos:end="2407:34">gen_op_fsincos</name><argument_list pos:start="2407:35" pos:end="2407:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2409:21" pos:end="2409:26">break;</break>

                <case pos:start="2411:17" pos:end="2411:23">case <expr pos:start="2411:22" pos:end="2411:22"><literal type="number" pos:start="2411:22" pos:end="2411:22">5</literal></expr>:</case> <comment type="block" pos:start="2411:25" pos:end="2411:36">/* fscale */</comment>

                    <expr_stmt pos:start="2413:21" pos:end="2413:36"><expr pos:start="2413:21" pos:end="2413:35"><call pos:start="2413:21" pos:end="2413:35"><name pos:start="2413:21" pos:end="2413:33">gen_op_fscale</name><argument_list pos:start="2413:34" pos:end="2413:35">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2415:21" pos:end="2415:26">break;</break>

                <case pos:start="2417:17" pos:end="2417:23">case <expr pos:start="2417:22" pos:end="2417:22"><literal type="number" pos:start="2417:22" pos:end="2417:22">4</literal></expr>:</case> <comment type="block" pos:start="2417:25" pos:end="2417:37">/* frndint */</comment>

                    <expr_stmt pos:start="2419:21" pos:end="2419:37"><expr pos:start="2419:21" pos:end="2419:36"><call pos:start="2419:21" pos:end="2419:36"><name pos:start="2419:21" pos:end="2419:34">gen_op_frndint</name><argument_list pos:start="2419:35" pos:end="2419:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2421:21" pos:end="2421:26">break;</break>

                <case pos:start="2423:17" pos:end="2423:23">case <expr pos:start="2423:22" pos:end="2423:22"><literal type="number" pos:start="2423:22" pos:end="2423:22">6</literal></expr>:</case> <comment type="block" pos:start="2423:25" pos:end="2423:34">/* fsin */</comment>

                    <expr_stmt pos:start="2425:21" pos:end="2425:34"><expr pos:start="2425:21" pos:end="2425:33"><call pos:start="2425:21" pos:end="2425:33"><name pos:start="2425:21" pos:end="2425:31">gen_op_fsin</name><argument_list pos:start="2425:32" pos:end="2425:33">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2427:21" pos:end="2427:26">break;</break>

                <default pos:start="2429:17" pos:end="2429:24">default:</default>

                <case pos:start="2431:17" pos:end="2431:23">case <expr pos:start="2431:22" pos:end="2431:22"><literal type="number" pos:start="2431:22" pos:end="2431:22">7</literal></expr>:</case> <comment type="block" pos:start="2431:25" pos:end="2431:34">/* fcos */</comment>

                    <expr_stmt pos:start="2433:21" pos:end="2433:34"><expr pos:start="2433:21" pos:end="2433:33"><call pos:start="2433:21" pos:end="2433:33"><name pos:start="2433:21" pos:end="2433:31">gen_op_fcos</name><argument_list pos:start="2433:32" pos:end="2433:33">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2435:21" pos:end="2435:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="2439:17" pos:end="2439:22">break;</break>

            <case pos:start="2441:13" pos:end="2441:22">case <expr pos:start="2441:18" pos:end="2441:21"><literal type="number" pos:start="2441:18" pos:end="2441:21">0x00</literal></expr>:</case> <case pos:start="2441:24" pos:end="2441:33">case <expr pos:start="2441:29" pos:end="2441:32"><literal type="number" pos:start="2441:29" pos:end="2441:32">0x01</literal></expr>:</case> <case pos:start="2441:35" pos:end="2441:53">case <expr pos:start="2441:40" pos:end="2441:52"><literal type="number" pos:start="2441:40" pos:end="2441:43">0x04</literal> <operator pos:start="2441:45" pos:end="2441:47">...</operator> <literal type="number" pos:start="2441:49" pos:end="2441:52">0x07</literal></expr>:</case> <comment type="block" pos:start="2441:55" pos:end="2441:72">/* fxxx st, sti */</comment>

            <case pos:start="2443:13" pos:end="2443:22">case <expr pos:start="2443:18" pos:end="2443:21"><literal type="number" pos:start="2443:18" pos:end="2443:21">0x20</literal></expr>:</case> <case pos:start="2443:24" pos:end="2443:33">case <expr pos:start="2443:29" pos:end="2443:32"><literal type="number" pos:start="2443:29" pos:end="2443:32">0x21</literal></expr>:</case> <case pos:start="2443:35" pos:end="2443:53">case <expr pos:start="2443:40" pos:end="2443:52"><literal type="number" pos:start="2443:40" pos:end="2443:43">0x24</literal> <operator pos:start="2443:45" pos:end="2443:47">...</operator> <literal type="number" pos:start="2443:49" pos:end="2443:52">0x27</literal></expr>:</case> <comment type="block" pos:start="2443:55" pos:end="2443:72">/* fxxx sti, st */</comment>

            <case pos:start="2445:13" pos:end="2445:22">case <expr pos:start="2445:18" pos:end="2445:21"><literal type="number" pos:start="2445:18" pos:end="2445:21">0x30</literal></expr>:</case> <case pos:start="2445:24" pos:end="2445:33">case <expr pos:start="2445:29" pos:end="2445:32"><literal type="number" pos:start="2445:29" pos:end="2445:32">0x31</literal></expr>:</case> <case pos:start="2445:35" pos:end="2445:53">case <expr pos:start="2445:40" pos:end="2445:52"><literal type="number" pos:start="2445:40" pos:end="2445:43">0x34</literal> <operator pos:start="2445:45" pos:end="2445:47">...</operator> <literal type="number" pos:start="2445:49" pos:end="2445:52">0x37</literal></expr>:</case> <comment type="block" pos:start="2445:55" pos:end="2445:73">/* fxxxp sti, st */</comment>

                <block pos:start="2447:17" pos:end="2471:17">{<block_content pos:start="2449:21" pos:end="2469:21">

                    <decl_stmt pos:start="2449:21" pos:end="2449:28"><decl pos:start="2449:21" pos:end="2449:27"><type pos:start="2449:21" pos:end="2449:23"><name pos:start="2449:21" pos:end="2449:23">int</name></type> <name pos:start="2449:25" pos:end="2449:27">op1</name></decl>;</decl_stmt>

                    

                    <expr_stmt pos:start="2453:21" pos:end="2453:33"><expr pos:start="2453:21" pos:end="2453:32"><name pos:start="2453:21" pos:end="2453:23">op1</name> <operator pos:start="2453:25" pos:end="2453:25">=</operator> <name pos:start="2453:27" pos:end="2453:28">op</name> <operator pos:start="2453:30" pos:end="2453:30">&amp;</operator> <literal type="number" pos:start="2453:32" pos:end="2453:32">7</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="2455:21" pos:end="2469:21"><if pos:start="2455:21" pos:end="2463:21">if <condition pos:start="2455:24" pos:end="2455:35">(<expr pos:start="2455:25" pos:end="2455:34"><name pos:start="2455:25" pos:end="2455:26">op</name> <operator pos:start="2455:28" pos:end="2455:29">&gt;=</operator> <literal type="number" pos:start="2455:31" pos:end="2455:34">0x20</literal></expr>)</condition> <block pos:start="2455:37" pos:end="2463:21">{<block_content pos:start="2457:25" pos:end="2461:42">

                        <expr_stmt pos:start="2457:25" pos:end="2457:60"><expr pos:start="2457:25" pos:end="2457:59"><name pos:start="2457:25" pos:end="2457:52"><name pos:start="2457:25" pos:end="2457:47">gen_op_fp_arith_STN_ST0</name><index pos:start="2457:48" pos:end="2457:52">[<expr pos:start="2457:49" pos:end="2457:51"><name pos:start="2457:49" pos:end="2457:51">op1</name></expr>]</index></name><operator pos:start="2457:53" pos:end="2457:53">(</operator><name pos:start="2457:54" pos:end="2457:58">opreg</name><operator pos:start="2457:59" pos:end="2457:59">)</operator></expr>;</expr_stmt>

                        <if_stmt pos:start="2459:25" pos:end="2461:42"><if pos:start="2459:25" pos:end="2461:42">if <condition pos:start="2459:28" pos:end="2459:39">(<expr pos:start="2459:29" pos:end="2459:38"><name pos:start="2459:29" pos:end="2459:30">op</name> <operator pos:start="2459:32" pos:end="2459:33">&gt;=</operator> <literal type="number" pos:start="2459:35" pos:end="2459:38">0x30</literal></expr>)</condition><block type="pseudo" pos:start="2461:29" pos:end="2461:42"><block_content pos:start="2461:29" pos:end="2461:42">

                            <expr_stmt pos:start="2461:29" pos:end="2461:42"><expr pos:start="2461:29" pos:end="2461:41"><call pos:start="2461:29" pos:end="2461:41"><name pos:start="2461:29" pos:end="2461:39">gen_op_fpop</name><argument_list pos:start="2461:40" pos:end="2461:41">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="2463:23" pos:end="2469:21">else <block pos:start="2463:28" pos:end="2469:21">{<block_content pos:start="2465:25" pos:end="2467:55">

                        <expr_stmt pos:start="2465:25" pos:end="2465:51"><expr pos:start="2465:25" pos:end="2465:50"><call pos:start="2465:25" pos:end="2465:50"><name pos:start="2465:25" pos:end="2465:43">gen_op_fmov_FT0_STN</name><argument_list pos:start="2465:44" pos:end="2465:50">(<argument pos:start="2465:45" pos:end="2465:49"><expr pos:start="2465:45" pos:end="2465:49"><name pos:start="2465:45" pos:end="2465:49">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2467:25" pos:end="2467:55"><expr pos:start="2467:25" pos:end="2467:54"><name pos:start="2467:25" pos:end="2467:52"><name pos:start="2467:25" pos:end="2467:47">gen_op_fp_arith_ST0_FT0</name><index pos:start="2467:48" pos:end="2467:52">[<expr pos:start="2467:49" pos:end="2467:51"><name pos:start="2467:49" pos:end="2467:51">op1</name></expr>]</index></name><operator pos:start="2467:53" pos:end="2467:53">(</operator><operator pos:start="2467:54" pos:end="2467:54">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="2473:17" pos:end="2473:22">break;</break>

            <case pos:start="2475:13" pos:end="2475:22">case <expr pos:start="2475:18" pos:end="2475:21"><literal type="number" pos:start="2475:18" pos:end="2475:21">0x02</literal></expr>:</case> <comment type="block" pos:start="2475:24" pos:end="2475:33">/* fcom */</comment>

                <expr_stmt pos:start="2477:17" pos:end="2477:43"><expr pos:start="2477:17" pos:end="2477:42"><call pos:start="2477:17" pos:end="2477:42"><name pos:start="2477:17" pos:end="2477:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2477:36" pos:end="2477:42">(<argument pos:start="2477:37" pos:end="2477:41"><expr pos:start="2477:37" pos:end="2477:41"><name pos:start="2477:37" pos:end="2477:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2479:17" pos:end="2479:38"><expr pos:start="2479:17" pos:end="2479:37"><call pos:start="2479:17" pos:end="2479:37"><name pos:start="2479:17" pos:end="2479:35">gen_op_fcom_ST0_FT0</name><argument_list pos:start="2479:36" pos:end="2479:37">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2481:17" pos:end="2481:22">break;</break>

            <case pos:start="2483:13" pos:end="2483:22">case <expr pos:start="2483:18" pos:end="2483:21"><literal type="number" pos:start="2483:18" pos:end="2483:21">0x03</literal></expr>:</case> <comment type="block" pos:start="2483:24" pos:end="2483:34">/* fcomp */</comment>

                <expr_stmt pos:start="2485:17" pos:end="2485:43"><expr pos:start="2485:17" pos:end="2485:42"><call pos:start="2485:17" pos:end="2485:42"><name pos:start="2485:17" pos:end="2485:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2485:36" pos:end="2485:42">(<argument pos:start="2485:37" pos:end="2485:41"><expr pos:start="2485:37" pos:end="2485:41"><name pos:start="2485:37" pos:end="2485:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2487:17" pos:end="2487:38"><expr pos:start="2487:17" pos:end="2487:37"><call pos:start="2487:17" pos:end="2487:37"><name pos:start="2487:17" pos:end="2487:35">gen_op_fcom_ST0_FT0</name><argument_list pos:start="2487:36" pos:end="2487:37">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2489:17" pos:end="2489:30"><expr pos:start="2489:17" pos:end="2489:29"><call pos:start="2489:17" pos:end="2489:29"><name pos:start="2489:17" pos:end="2489:27">gen_op_fpop</name><argument_list pos:start="2489:28" pos:end="2489:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2491:17" pos:end="2491:22">break;</break>

            <case pos:start="2493:13" pos:end="2493:22">case <expr pos:start="2493:18" pos:end="2493:21"><literal type="number" pos:start="2493:18" pos:end="2493:21">0x15</literal></expr>:</case> <comment type="block" pos:start="2493:24" pos:end="2493:33">/* da/5 */</comment>

                <switch pos:start="2495:17" pos:end="2513:17">switch<condition pos:start="2495:23" pos:end="2495:26">(<expr pos:start="2495:24" pos:end="2495:25"><name pos:start="2495:24" pos:end="2495:25">rm</name></expr>)</condition> <block pos:start="2495:28" pos:end="2513:17">{<block_content pos:start="2497:17" pos:end="2511:36">

                <case pos:start="2497:17" pos:end="2497:23">case <expr pos:start="2497:22" pos:end="2497:22"><literal type="number" pos:start="2497:22" pos:end="2497:22">1</literal></expr>:</case> <comment type="block" pos:start="2497:25" pos:end="2497:37">/* fucompp */</comment>

                    <expr_stmt pos:start="2499:21" pos:end="2499:43"><expr pos:start="2499:21" pos:end="2499:42"><call pos:start="2499:21" pos:end="2499:42"><name pos:start="2499:21" pos:end="2499:39">gen_op_fmov_FT0_STN</name><argument_list pos:start="2499:40" pos:end="2499:42">(<argument pos:start="2499:41" pos:end="2499:41"><expr pos:start="2499:41" pos:end="2499:41"><literal type="number" pos:start="2499:41" pos:end="2499:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2501:21" pos:end="2501:43"><expr pos:start="2501:21" pos:end="2501:42"><call pos:start="2501:21" pos:end="2501:42"><name pos:start="2501:21" pos:end="2501:40">gen_op_fucom_ST0_FT0</name><argument_list pos:start="2501:41" pos:end="2501:42">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2503:21" pos:end="2503:34"><expr pos:start="2503:21" pos:end="2503:33"><call pos:start="2503:21" pos:end="2503:33"><name pos:start="2503:21" pos:end="2503:31">gen_op_fpop</name><argument_list pos:start="2503:32" pos:end="2503:33">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2505:21" pos:end="2505:34"><expr pos:start="2505:21" pos:end="2505:33"><call pos:start="2505:21" pos:end="2505:33"><name pos:start="2505:21" pos:end="2505:31">gen_op_fpop</name><argument_list pos:start="2505:32" pos:end="2505:33">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2507:21" pos:end="2507:26">break;</break>

                <default pos:start="2509:17" pos:end="2509:24">default:</default>

                    <goto pos:start="2511:21" pos:end="2511:36">goto <name pos:start="2511:26" pos:end="2511:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2515:17" pos:end="2515:22">break;</break>

            <case pos:start="2517:13" pos:end="2517:22">case <expr pos:start="2517:18" pos:end="2517:21"><literal type="number" pos:start="2517:18" pos:end="2517:21">0x1c</literal></expr>:</case>

                <switch pos:start="2519:17" pos:end="2537:17">switch<condition pos:start="2519:23" pos:end="2519:26">(<expr pos:start="2519:24" pos:end="2519:25"><name pos:start="2519:24" pos:end="2519:25">rm</name></expr>)</condition> <block pos:start="2519:28" pos:end="2537:17">{<block_content pos:start="2521:17" pos:end="2535:36">

                <case pos:start="2521:17" pos:end="2521:23">case <expr pos:start="2521:22" pos:end="2521:22"><literal type="number" pos:start="2521:22" pos:end="2521:22">2</literal></expr>:</case> <comment type="block" pos:start="2521:25" pos:end="2521:35">/* fclex */</comment>

                    <expr_stmt pos:start="2523:21" pos:end="2523:35"><expr pos:start="2523:21" pos:end="2523:34"><call pos:start="2523:21" pos:end="2523:34"><name pos:start="2523:21" pos:end="2523:32">gen_op_fclex</name><argument_list pos:start="2523:33" pos:end="2523:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2525:21" pos:end="2525:26">break;</break>

                <case pos:start="2527:17" pos:end="2527:23">case <expr pos:start="2527:22" pos:end="2527:22"><literal type="number" pos:start="2527:22" pos:end="2527:22">3</literal></expr>:</case> <comment type="block" pos:start="2527:25" pos:end="2527:36">/* fninit */</comment>

                    <expr_stmt pos:start="2529:21" pos:end="2529:36"><expr pos:start="2529:21" pos:end="2529:35"><call pos:start="2529:21" pos:end="2529:35"><name pos:start="2529:21" pos:end="2529:33">gen_op_fninit</name><argument_list pos:start="2529:34" pos:end="2529:35">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2531:21" pos:end="2531:26">break;</break>

                <default pos:start="2533:17" pos:end="2533:24">default:</default>

                    <goto pos:start="2535:21" pos:end="2535:36">goto <name pos:start="2535:26" pos:end="2535:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2539:17" pos:end="2539:22">break;</break>

            <case pos:start="2541:13" pos:end="2541:22">case <expr pos:start="2541:18" pos:end="2541:21"><literal type="number" pos:start="2541:18" pos:end="2541:21">0x2a</literal></expr>:</case> <comment type="block" pos:start="2541:24" pos:end="2541:36">/* fst sti */</comment>

                <expr_stmt pos:start="2543:17" pos:end="2543:43"><expr pos:start="2543:17" pos:end="2543:42"><call pos:start="2543:17" pos:end="2543:42"><name pos:start="2543:17" pos:end="2543:35">gen_op_fmov_STN_ST0</name><argument_list pos:start="2543:36" pos:end="2543:42">(<argument pos:start="2543:37" pos:end="2543:41"><expr pos:start="2543:37" pos:end="2543:41"><name pos:start="2543:37" pos:end="2543:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2545:17" pos:end="2545:22">break;</break>

            <case pos:start="2547:13" pos:end="2547:22">case <expr pos:start="2547:18" pos:end="2547:21"><literal type="number" pos:start="2547:18" pos:end="2547:21">0x2b</literal></expr>:</case> <comment type="block" pos:start="2547:24" pos:end="2547:37">/* fstp sti */</comment>

                <expr_stmt pos:start="2549:17" pos:end="2549:43"><expr pos:start="2549:17" pos:end="2549:42"><call pos:start="2549:17" pos:end="2549:42"><name pos:start="2549:17" pos:end="2549:35">gen_op_fmov_STN_ST0</name><argument_list pos:start="2549:36" pos:end="2549:42">(<argument pos:start="2549:37" pos:end="2549:41"><expr pos:start="2549:37" pos:end="2549:41"><name pos:start="2549:37" pos:end="2549:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2551:17" pos:end="2551:30"><expr pos:start="2551:17" pos:end="2551:29"><call pos:start="2551:17" pos:end="2551:29"><name pos:start="2551:17" pos:end="2551:27">gen_op_fpop</name><argument_list pos:start="2551:28" pos:end="2551:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2553:17" pos:end="2553:22">break;</break>

            <case pos:start="2555:13" pos:end="2555:22">case <expr pos:start="2555:18" pos:end="2555:21"><literal type="number" pos:start="2555:18" pos:end="2555:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="2555:24" pos:end="2555:40">/* fucom st(i) */</comment>

                <expr_stmt pos:start="2557:17" pos:end="2557:43"><expr pos:start="2557:17" pos:end="2557:42"><call pos:start="2557:17" pos:end="2557:42"><name pos:start="2557:17" pos:end="2557:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2557:36" pos:end="2557:42">(<argument pos:start="2557:37" pos:end="2557:41"><expr pos:start="2557:37" pos:end="2557:41"><name pos:start="2557:37" pos:end="2557:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2559:17" pos:end="2559:39"><expr pos:start="2559:17" pos:end="2559:38"><call pos:start="2559:17" pos:end="2559:38"><name pos:start="2559:17" pos:end="2559:36">gen_op_fucom_ST0_FT0</name><argument_list pos:start="2559:37" pos:end="2559:38">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2561:17" pos:end="2561:22">break;</break>

            <case pos:start="2563:13" pos:end="2563:22">case <expr pos:start="2563:18" pos:end="2563:21"><literal type="number" pos:start="2563:18" pos:end="2563:21">0x2d</literal></expr>:</case> <comment type="block" pos:start="2563:24" pos:end="2563:41">/* fucomp st(i) */</comment>

                <expr_stmt pos:start="2565:17" pos:end="2565:43"><expr pos:start="2565:17" pos:end="2565:42"><call pos:start="2565:17" pos:end="2565:42"><name pos:start="2565:17" pos:end="2565:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2565:36" pos:end="2565:42">(<argument pos:start="2565:37" pos:end="2565:41"><expr pos:start="2565:37" pos:end="2565:41"><name pos:start="2565:37" pos:end="2565:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2567:17" pos:end="2567:39"><expr pos:start="2567:17" pos:end="2567:38"><call pos:start="2567:17" pos:end="2567:38"><name pos:start="2567:17" pos:end="2567:36">gen_op_fucom_ST0_FT0</name><argument_list pos:start="2567:37" pos:end="2567:38">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2569:17" pos:end="2569:30"><expr pos:start="2569:17" pos:end="2569:29"><call pos:start="2569:17" pos:end="2569:29"><name pos:start="2569:17" pos:end="2569:27">gen_op_fpop</name><argument_list pos:start="2569:28" pos:end="2569:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2571:17" pos:end="2571:22">break;</break>

            <case pos:start="2573:13" pos:end="2573:22">case <expr pos:start="2573:18" pos:end="2573:21"><literal type="number" pos:start="2573:18" pos:end="2573:21">0x33</literal></expr>:</case> <comment type="block" pos:start="2573:24" pos:end="2573:33">/* de/3 */</comment>

                <switch pos:start="2575:17" pos:end="2593:17">switch<condition pos:start="2575:23" pos:end="2575:26">(<expr pos:start="2575:24" pos:end="2575:25"><name pos:start="2575:24" pos:end="2575:25">rm</name></expr>)</condition> <block pos:start="2575:28" pos:end="2593:17">{<block_content pos:start="2577:17" pos:end="2591:36">

                <case pos:start="2577:17" pos:end="2577:23">case <expr pos:start="2577:22" pos:end="2577:22"><literal type="number" pos:start="2577:22" pos:end="2577:22">1</literal></expr>:</case> <comment type="block" pos:start="2577:25" pos:end="2577:36">/* fcompp */</comment>

                    <expr_stmt pos:start="2579:21" pos:end="2579:43"><expr pos:start="2579:21" pos:end="2579:42"><call pos:start="2579:21" pos:end="2579:42"><name pos:start="2579:21" pos:end="2579:39">gen_op_fmov_FT0_STN</name><argument_list pos:start="2579:40" pos:end="2579:42">(<argument pos:start="2579:41" pos:end="2579:41"><expr pos:start="2579:41" pos:end="2579:41"><literal type="number" pos:start="2579:41" pos:end="2579:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2581:21" pos:end="2581:42"><expr pos:start="2581:21" pos:end="2581:41"><call pos:start="2581:21" pos:end="2581:41"><name pos:start="2581:21" pos:end="2581:39">gen_op_fcom_ST0_FT0</name><argument_list pos:start="2581:40" pos:end="2581:41">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2583:21" pos:end="2583:34"><expr pos:start="2583:21" pos:end="2583:33"><call pos:start="2583:21" pos:end="2583:33"><name pos:start="2583:21" pos:end="2583:31">gen_op_fpop</name><argument_list pos:start="2583:32" pos:end="2583:33">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2585:21" pos:end="2585:34"><expr pos:start="2585:21" pos:end="2585:33"><call pos:start="2585:21" pos:end="2585:33"><name pos:start="2585:21" pos:end="2585:31">gen_op_fpop</name><argument_list pos:start="2585:32" pos:end="2585:33">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2587:21" pos:end="2587:26">break;</break>

                <default pos:start="2589:17" pos:end="2589:24">default:</default>

                    <goto pos:start="2591:21" pos:end="2591:36">goto <name pos:start="2591:26" pos:end="2591:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2595:17" pos:end="2595:22">break;</break>

            <case pos:start="2597:13" pos:end="2597:22">case <expr pos:start="2597:18" pos:end="2597:21"><literal type="number" pos:start="2597:18" pos:end="2597:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="2597:24" pos:end="2597:33">/* df/4 */</comment>

                <switch pos:start="2599:17" pos:end="2611:17">switch<condition pos:start="2599:23" pos:end="2599:26">(<expr pos:start="2599:24" pos:end="2599:25"><name pos:start="2599:24" pos:end="2599:25">rm</name></expr>)</condition> <block pos:start="2599:28" pos:end="2611:17">{<block_content pos:start="2601:17" pos:end="2609:36">

                <case pos:start="2601:17" pos:end="2601:23">case <expr pos:start="2601:22" pos:end="2601:22"><literal type="number" pos:start="2601:22" pos:end="2601:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="2603:21" pos:end="2603:40"><expr pos:start="2603:21" pos:end="2603:39"><call pos:start="2603:21" pos:end="2603:39"><name pos:start="2603:21" pos:end="2603:37">gen_op_fnstsw_EAX</name><argument_list pos:start="2603:38" pos:end="2603:39">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2605:21" pos:end="2605:26">break;</break>

                <default pos:start="2607:17" pos:end="2607:24">default:</default>

                    <goto pos:start="2609:21" pos:end="2609:36">goto <name pos:start="2609:26" pos:end="2609:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2613:17" pos:end="2613:22">break;</break>

            <default pos:start="2615:13" pos:end="2615:20">default:</default>

                <goto pos:start="2617:17" pos:end="2617:32">goto <name pos:start="2617:22" pos:end="2617:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2623:9" pos:end="2623:14">break;</break>

        <comment type="block" format="doxygen" pos:start="2625:9" pos:end="2625:34">/************************/</comment>

        <comment type="block" pos:start="2627:9" pos:end="2627:24">/* string ops */</comment>



    <case pos:start="2631:5" pos:end="2631:14">case <expr pos:start="2631:10" pos:end="2631:13"><literal type="number" pos:start="2631:10" pos:end="2631:13">0xa4</literal></expr>:</case> <comment type="block" pos:start="2631:16" pos:end="2631:26">/* movsS */</comment>

    <case pos:start="2633:5" pos:end="2633:14">case <expr pos:start="2633:10" pos:end="2633:13"><literal type="number" pos:start="2633:10" pos:end="2633:13">0xa5</literal></expr>:</case>

        <if_stmt pos:start="2635:9" pos:end="2641:43"><if pos:start="2635:9" pos:end="2637:25">if <condition pos:start="2635:12" pos:end="2635:25">(<expr pos:start="2635:13" pos:end="2635:24"><operator pos:start="2635:13" pos:end="2635:13">(</operator><name pos:start="2635:14" pos:end="2635:14">b</name> <operator pos:start="2635:16" pos:end="2635:16">&amp;</operator> <literal type="number" pos:start="2635:18" pos:end="2635:18">1</literal><operator pos:start="2635:19" pos:end="2635:19">)</operator> <operator pos:start="2635:21" pos:end="2635:22">==</operator> <literal type="number" pos:start="2635:24" pos:end="2635:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2637:13" pos:end="2637:25"><block_content pos:start="2637:13" pos:end="2637:25">

            <expr_stmt pos:start="2637:13" pos:end="2637:25"><expr pos:start="2637:13" pos:end="2637:24"><name pos:start="2637:13" pos:end="2637:14">ot</name> <operator pos:start="2637:16" pos:end="2637:16">=</operator> <name pos:start="2637:18" pos:end="2637:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2639:9" pos:end="2641:43">else<block type="pseudo" pos:start="2641:13" pos:end="2641:43"><block_content pos:start="2641:13" pos:end="2641:43">

            <expr_stmt pos:start="2641:13" pos:end="2641:43"><expr pos:start="2641:13" pos:end="2641:42"><name pos:start="2641:13" pos:end="2641:14">ot</name> <operator pos:start="2641:16" pos:end="2641:16">=</operator> <ternary pos:start="2641:18" pos:end="2641:42"><condition pos:start="2641:18" pos:end="2641:24"><expr pos:start="2641:18" pos:end="2641:22"><name pos:start="2641:18" pos:end="2641:22">dflag</name></expr> ?</condition><then pos:start="2641:26" pos:end="2641:32"> <expr pos:start="2641:26" pos:end="2641:32"><name pos:start="2641:26" pos:end="2641:32">OT_LONG</name></expr> </then><else pos:start="2641:34" pos:end="2641:42">: <expr pos:start="2641:36" pos:end="2641:42"><name pos:start="2641:36" pos:end="2641:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="2645:9" pos:end="2653:9"><if pos:start="2645:9" pos:end="2649:9">if <condition pos:start="2645:12" pos:end="2645:35">(<expr pos:start="2645:13" pos:end="2645:34"><name pos:start="2645:13" pos:end="2645:20">prefixes</name> <operator pos:start="2645:22" pos:end="2645:22">&amp;</operator> <name pos:start="2645:24" pos:end="2645:34">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2645:37" pos:end="2649:9">{<block_content pos:start="2647:13" pos:end="2647:50">

            <expr_stmt pos:start="2647:13" pos:end="2647:50"><expr pos:start="2647:13" pos:end="2647:49"><call pos:start="2647:13" pos:end="2647:49"><name pos:start="2647:13" pos:end="2647:25">gen_string_ds</name><argument_list pos:start="2647:26" pos:end="2647:49">(<argument pos:start="2647:27" pos:end="2647:27"><expr pos:start="2647:27" pos:end="2647:27"><name pos:start="2647:27" pos:end="2647:27">s</name></expr></argument>, <argument pos:start="2647:30" pos:end="2647:31"><expr pos:start="2647:30" pos:end="2647:31"><name pos:start="2647:30" pos:end="2647:31">ot</name></expr></argument>, <argument pos:start="2647:34" pos:end="2647:48"><expr pos:start="2647:34" pos:end="2647:48"><name pos:start="2647:34" pos:end="2647:44">gen_op_movs</name> <operator pos:start="2647:46" pos:end="2647:46">+</operator> <literal type="number" pos:start="2647:48" pos:end="2647:48">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2649:11" pos:end="2653:9">else <block pos:start="2649:16" pos:end="2653:9">{<block_content pos:start="2651:13" pos:end="2651:46">

            <expr_stmt pos:start="2651:13" pos:end="2651:46"><expr pos:start="2651:13" pos:end="2651:45"><call pos:start="2651:13" pos:end="2651:45"><name pos:start="2651:13" pos:end="2651:25">gen_string_ds</name><argument_list pos:start="2651:26" pos:end="2651:45">(<argument pos:start="2651:27" pos:end="2651:27"><expr pos:start="2651:27" pos:end="2651:27"><name pos:start="2651:27" pos:end="2651:27">s</name></expr></argument>, <argument pos:start="2651:30" pos:end="2651:31"><expr pos:start="2651:30" pos:end="2651:31"><name pos:start="2651:30" pos:end="2651:31">ot</name></expr></argument>, <argument pos:start="2651:34" pos:end="2651:44"><expr pos:start="2651:34" pos:end="2651:44"><name pos:start="2651:34" pos:end="2651:44">gen_op_movs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2655:9" pos:end="2655:14">break;</break>

        

    <case pos:start="2659:5" pos:end="2659:14">case <expr pos:start="2659:10" pos:end="2659:13"><literal type="number" pos:start="2659:10" pos:end="2659:13">0xaa</literal></expr>:</case> <comment type="block" pos:start="2659:16" pos:end="2659:26">/* stosS */</comment>

    <case pos:start="2661:5" pos:end="2661:14">case <expr pos:start="2661:10" pos:end="2661:13"><literal type="number" pos:start="2661:10" pos:end="2661:13">0xab</literal></expr>:</case>

        <if_stmt pos:start="2663:9" pos:end="2669:43"><if pos:start="2663:9" pos:end="2665:25">if <condition pos:start="2663:12" pos:end="2663:25">(<expr pos:start="2663:13" pos:end="2663:24"><operator pos:start="2663:13" pos:end="2663:13">(</operator><name pos:start="2663:14" pos:end="2663:14">b</name> <operator pos:start="2663:16" pos:end="2663:16">&amp;</operator> <literal type="number" pos:start="2663:18" pos:end="2663:18">1</literal><operator pos:start="2663:19" pos:end="2663:19">)</operator> <operator pos:start="2663:21" pos:end="2663:22">==</operator> <literal type="number" pos:start="2663:24" pos:end="2663:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2665:13" pos:end="2665:25"><block_content pos:start="2665:13" pos:end="2665:25">

            <expr_stmt pos:start="2665:13" pos:end="2665:25"><expr pos:start="2665:13" pos:end="2665:24"><name pos:start="2665:13" pos:end="2665:14">ot</name> <operator pos:start="2665:16" pos:end="2665:16">=</operator> <name pos:start="2665:18" pos:end="2665:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2667:9" pos:end="2669:43">else<block type="pseudo" pos:start="2669:13" pos:end="2669:43"><block_content pos:start="2669:13" pos:end="2669:43">

            <expr_stmt pos:start="2669:13" pos:end="2669:43"><expr pos:start="2669:13" pos:end="2669:42"><name pos:start="2669:13" pos:end="2669:14">ot</name> <operator pos:start="2669:16" pos:end="2669:16">=</operator> <ternary pos:start="2669:18" pos:end="2669:42"><condition pos:start="2669:18" pos:end="2669:24"><expr pos:start="2669:18" pos:end="2669:22"><name pos:start="2669:18" pos:end="2669:22">dflag</name></expr> ?</condition><then pos:start="2669:26" pos:end="2669:32"> <expr pos:start="2669:26" pos:end="2669:32"><name pos:start="2669:26" pos:end="2669:32">OT_LONG</name></expr> </then><else pos:start="2669:34" pos:end="2669:42">: <expr pos:start="2669:36" pos:end="2669:42"><name pos:start="2669:36" pos:end="2669:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <if_stmt pos:start="2673:9" pos:end="2681:9"><if pos:start="2673:9" pos:end="2677:9">if <condition pos:start="2673:12" pos:end="2673:35">(<expr pos:start="2673:13" pos:end="2673:34"><name pos:start="2673:13" pos:end="2673:20">prefixes</name> <operator pos:start="2673:22" pos:end="2673:22">&amp;</operator> <name pos:start="2673:24" pos:end="2673:34">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2673:37" pos:end="2677:9">{<block_content pos:start="2675:13" pos:end="2675:50">

            <expr_stmt pos:start="2675:13" pos:end="2675:50"><expr pos:start="2675:13" pos:end="2675:49"><call pos:start="2675:13" pos:end="2675:49"><name pos:start="2675:13" pos:end="2675:25">gen_string_es</name><argument_list pos:start="2675:26" pos:end="2675:49">(<argument pos:start="2675:27" pos:end="2675:27"><expr pos:start="2675:27" pos:end="2675:27"><name pos:start="2675:27" pos:end="2675:27">s</name></expr></argument>, <argument pos:start="2675:30" pos:end="2675:31"><expr pos:start="2675:30" pos:end="2675:31"><name pos:start="2675:30" pos:end="2675:31">ot</name></expr></argument>, <argument pos:start="2675:34" pos:end="2675:48"><expr pos:start="2675:34" pos:end="2675:48"><name pos:start="2675:34" pos:end="2675:44">gen_op_stos</name> <operator pos:start="2675:46" pos:end="2675:46">+</operator> <literal type="number" pos:start="2675:48" pos:end="2675:48">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2677:11" pos:end="2681:9">else <block pos:start="2677:16" pos:end="2681:9">{<block_content pos:start="2679:13" pos:end="2679:46">

            <expr_stmt pos:start="2679:13" pos:end="2679:46"><expr pos:start="2679:13" pos:end="2679:45"><call pos:start="2679:13" pos:end="2679:45"><name pos:start="2679:13" pos:end="2679:25">gen_string_es</name><argument_list pos:start="2679:26" pos:end="2679:45">(<argument pos:start="2679:27" pos:end="2679:27"><expr pos:start="2679:27" pos:end="2679:27"><name pos:start="2679:27" pos:end="2679:27">s</name></expr></argument>, <argument pos:start="2679:30" pos:end="2679:31"><expr pos:start="2679:30" pos:end="2679:31"><name pos:start="2679:30" pos:end="2679:31">ot</name></expr></argument>, <argument pos:start="2679:34" pos:end="2679:44"><expr pos:start="2679:34" pos:end="2679:44"><name pos:start="2679:34" pos:end="2679:44">gen_op_stos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2683:9" pos:end="2683:14">break;</break>

    <case pos:start="2685:5" pos:end="2685:14">case <expr pos:start="2685:10" pos:end="2685:13"><literal type="number" pos:start="2685:10" pos:end="2685:13">0xac</literal></expr>:</case> <comment type="block" pos:start="2685:16" pos:end="2685:26">/* lodsS */</comment>

    <case pos:start="2687:5" pos:end="2687:14">case <expr pos:start="2687:10" pos:end="2687:13"><literal type="number" pos:start="2687:10" pos:end="2687:13">0xad</literal></expr>:</case>

        <if_stmt pos:start="2689:9" pos:end="2695:43"><if pos:start="2689:9" pos:end="2691:25">if <condition pos:start="2689:12" pos:end="2689:25">(<expr pos:start="2689:13" pos:end="2689:24"><operator pos:start="2689:13" pos:end="2689:13">(</operator><name pos:start="2689:14" pos:end="2689:14">b</name> <operator pos:start="2689:16" pos:end="2689:16">&amp;</operator> <literal type="number" pos:start="2689:18" pos:end="2689:18">1</literal><operator pos:start="2689:19" pos:end="2689:19">)</operator> <operator pos:start="2689:21" pos:end="2689:22">==</operator> <literal type="number" pos:start="2689:24" pos:end="2689:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2691:13" pos:end="2691:25"><block_content pos:start="2691:13" pos:end="2691:25">

            <expr_stmt pos:start="2691:13" pos:end="2691:25"><expr pos:start="2691:13" pos:end="2691:24"><name pos:start="2691:13" pos:end="2691:14">ot</name> <operator pos:start="2691:16" pos:end="2691:16">=</operator> <name pos:start="2691:18" pos:end="2691:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2693:9" pos:end="2695:43">else<block type="pseudo" pos:start="2695:13" pos:end="2695:43"><block_content pos:start="2695:13" pos:end="2695:43">

            <expr_stmt pos:start="2695:13" pos:end="2695:43"><expr pos:start="2695:13" pos:end="2695:42"><name pos:start="2695:13" pos:end="2695:14">ot</name> <operator pos:start="2695:16" pos:end="2695:16">=</operator> <ternary pos:start="2695:18" pos:end="2695:42"><condition pos:start="2695:18" pos:end="2695:24"><expr pos:start="2695:18" pos:end="2695:22"><name pos:start="2695:18" pos:end="2695:22">dflag</name></expr> ?</condition><then pos:start="2695:26" pos:end="2695:32"> <expr pos:start="2695:26" pos:end="2695:32"><name pos:start="2695:26" pos:end="2695:32">OT_LONG</name></expr> </then><else pos:start="2695:34" pos:end="2695:42">: <expr pos:start="2695:36" pos:end="2695:42"><name pos:start="2695:36" pos:end="2695:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="2697:9" pos:end="2705:9"><if pos:start="2697:9" pos:end="2701:9">if <condition pos:start="2697:12" pos:end="2697:35">(<expr pos:start="2697:13" pos:end="2697:34"><name pos:start="2697:13" pos:end="2697:20">prefixes</name> <operator pos:start="2697:22" pos:end="2697:22">&amp;</operator> <name pos:start="2697:24" pos:end="2697:34">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2697:37" pos:end="2701:9">{<block_content pos:start="2699:13" pos:end="2699:50">

            <expr_stmt pos:start="2699:13" pos:end="2699:50"><expr pos:start="2699:13" pos:end="2699:49"><call pos:start="2699:13" pos:end="2699:49"><name pos:start="2699:13" pos:end="2699:25">gen_string_ds</name><argument_list pos:start="2699:26" pos:end="2699:49">(<argument pos:start="2699:27" pos:end="2699:27"><expr pos:start="2699:27" pos:end="2699:27"><name pos:start="2699:27" pos:end="2699:27">s</name></expr></argument>, <argument pos:start="2699:30" pos:end="2699:31"><expr pos:start="2699:30" pos:end="2699:31"><name pos:start="2699:30" pos:end="2699:31">ot</name></expr></argument>, <argument pos:start="2699:34" pos:end="2699:48"><expr pos:start="2699:34" pos:end="2699:48"><name pos:start="2699:34" pos:end="2699:44">gen_op_lods</name> <operator pos:start="2699:46" pos:end="2699:46">+</operator> <literal type="number" pos:start="2699:48" pos:end="2699:48">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2701:11" pos:end="2705:9">else <block pos:start="2701:16" pos:end="2705:9">{<block_content pos:start="2703:13" pos:end="2703:46">

            <expr_stmt pos:start="2703:13" pos:end="2703:46"><expr pos:start="2703:13" pos:end="2703:45"><call pos:start="2703:13" pos:end="2703:45"><name pos:start="2703:13" pos:end="2703:25">gen_string_ds</name><argument_list pos:start="2703:26" pos:end="2703:45">(<argument pos:start="2703:27" pos:end="2703:27"><expr pos:start="2703:27" pos:end="2703:27"><name pos:start="2703:27" pos:end="2703:27">s</name></expr></argument>, <argument pos:start="2703:30" pos:end="2703:31"><expr pos:start="2703:30" pos:end="2703:31"><name pos:start="2703:30" pos:end="2703:31">ot</name></expr></argument>, <argument pos:start="2703:34" pos:end="2703:44"><expr pos:start="2703:34" pos:end="2703:44"><name pos:start="2703:34" pos:end="2703:44">gen_op_lods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2707:9" pos:end="2707:14">break;</break>

    <case pos:start="2709:5" pos:end="2709:14">case <expr pos:start="2709:10" pos:end="2709:13"><literal type="number" pos:start="2709:10" pos:end="2709:13">0xae</literal></expr>:</case> <comment type="block" pos:start="2709:16" pos:end="2709:26">/* scasS */</comment>

    <case pos:start="2711:5" pos:end="2711:14">case <expr pos:start="2711:10" pos:end="2711:13"><literal type="number" pos:start="2711:10" pos:end="2711:13">0xaf</literal></expr>:</case>

        <if_stmt pos:start="2713:9" pos:end="2719:47"><if pos:start="2713:9" pos:end="2715:25">if <condition pos:start="2713:12" pos:end="2713:25">(<expr pos:start="2713:13" pos:end="2713:24"><operator pos:start="2713:13" pos:end="2713:13">(</operator><name pos:start="2713:14" pos:end="2713:14">b</name> <operator pos:start="2713:16" pos:end="2713:16">&amp;</operator> <literal type="number" pos:start="2713:18" pos:end="2713:18">1</literal><operator pos:start="2713:19" pos:end="2713:19">)</operator> <operator pos:start="2713:21" pos:end="2713:22">==</operator> <literal type="number" pos:start="2713:24" pos:end="2713:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2715:13" pos:end="2715:25"><block_content pos:start="2715:13" pos:end="2715:25">

            <expr_stmt pos:start="2715:13" pos:end="2715:25"><expr pos:start="2715:13" pos:end="2715:24"><name pos:start="2715:13" pos:end="2715:14">ot</name> <operator pos:start="2715:16" pos:end="2715:16">=</operator> <name pos:start="2715:18" pos:end="2715:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2717:9" pos:end="2719:47">else<block type="pseudo" pos:start="2719:17" pos:end="2719:47"><block_content pos:start="2719:17" pos:end="2719:47">

                <expr_stmt pos:start="2719:17" pos:end="2719:47"><expr pos:start="2719:17" pos:end="2719:46"><name pos:start="2719:17" pos:end="2719:18">ot</name> <operator pos:start="2719:20" pos:end="2719:20">=</operator> <ternary pos:start="2719:22" pos:end="2719:46"><condition pos:start="2719:22" pos:end="2719:28"><expr pos:start="2719:22" pos:end="2719:26"><name pos:start="2719:22" pos:end="2719:26">dflag</name></expr> ?</condition><then pos:start="2719:30" pos:end="2719:36"> <expr pos:start="2719:30" pos:end="2719:36"><name pos:start="2719:30" pos:end="2719:36">OT_LONG</name></expr> </then><else pos:start="2719:38" pos:end="2719:46">: <expr pos:start="2719:40" pos:end="2719:46"><name pos:start="2719:40" pos:end="2719:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="2721:9" pos:end="2747:9"><if pos:start="2721:9" pos:end="2731:9">if <condition pos:start="2721:12" pos:end="2721:36">(<expr pos:start="2721:13" pos:end="2721:35"><name pos:start="2721:13" pos:end="2721:20">prefixes</name> <operator pos:start="2721:22" pos:end="2721:22">&amp;</operator> <name pos:start="2721:24" pos:end="2721:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="2721:38" pos:end="2731:9">{<block_content pos:start="2723:13" pos:end="2729:37">

            <if_stmt pos:start="2723:13" pos:end="2725:43"><if pos:start="2723:13" pos:end="2725:43">if <condition pos:start="2723:16" pos:end="2723:42">(<expr pos:start="2723:17" pos:end="2723:41"><name pos:start="2723:17" pos:end="2723:24"><name pos:start="2723:17" pos:end="2723:17">s</name><operator pos:start="2723:18" pos:end="2723:19">-&gt;</operator><name pos:start="2723:20" pos:end="2723:24">cc_op</name></name> <operator pos:start="2723:26" pos:end="2723:27">!=</operator> <name pos:start="2723:29" pos:end="2723:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="2725:17" pos:end="2725:43"><block_content pos:start="2725:17" pos:end="2725:43">

                <expr_stmt pos:start="2725:17" pos:end="2725:43"><expr pos:start="2725:17" pos:end="2725:42"><call pos:start="2725:17" pos:end="2725:42"><name pos:start="2725:17" pos:end="2725:32">gen_op_set_cc_op</name><argument_list pos:start="2725:33" pos:end="2725:42">(<argument pos:start="2725:34" pos:end="2725:41"><expr pos:start="2725:34" pos:end="2725:41"><name pos:start="2725:34" pos:end="2725:41"><name pos:start="2725:34" pos:end="2725:34">s</name><operator pos:start="2725:35" pos:end="2725:36">-&gt;</operator><name pos:start="2725:37" pos:end="2725:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2727:13" pos:end="2727:54"><expr pos:start="2727:13" pos:end="2727:53"><call pos:start="2727:13" pos:end="2727:53"><name pos:start="2727:13" pos:end="2727:25">gen_string_es</name><argument_list pos:start="2727:26" pos:end="2727:53">(<argument pos:start="2727:27" pos:end="2727:27"><expr pos:start="2727:27" pos:end="2727:27"><name pos:start="2727:27" pos:end="2727:27">s</name></expr></argument>, <argument pos:start="2727:30" pos:end="2727:31"><expr pos:start="2727:30" pos:end="2727:31"><name pos:start="2727:30" pos:end="2727:31">ot</name></expr></argument>, <argument pos:start="2727:34" pos:end="2727:52"><expr pos:start="2727:34" pos:end="2727:52"><name pos:start="2727:34" pos:end="2727:44">gen_op_scas</name> <operator pos:start="2727:46" pos:end="2727:46">+</operator> <literal type="number" pos:start="2727:48" pos:end="2727:48">9</literal> <operator pos:start="2727:50" pos:end="2727:50">*</operator> <literal type="number" pos:start="2727:52" pos:end="2727:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2729:13" pos:end="2729:37"><expr pos:start="2729:13" pos:end="2729:36"><name pos:start="2729:13" pos:end="2729:20"><name pos:start="2729:13" pos:end="2729:13">s</name><operator pos:start="2729:14" pos:end="2729:15">-&gt;</operator><name pos:start="2729:16" pos:end="2729:20">cc_op</name></name> <operator pos:start="2729:22" pos:end="2729:22">=</operator> <name pos:start="2729:24" pos:end="2729:36">CC_OP_DYNAMIC</name></expr>;</expr_stmt> <comment type="block" pos:start="2729:39" pos:end="2729:70">/* cannot predict flags after */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="2731:11" pos:end="2741:9">else if <condition pos:start="2731:19" pos:end="2731:42">(<expr pos:start="2731:20" pos:end="2731:41"><name pos:start="2731:20" pos:end="2731:27">prefixes</name> <operator pos:start="2731:29" pos:end="2731:29">&amp;</operator> <name pos:start="2731:31" pos:end="2731:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2731:44" pos:end="2741:9">{<block_content pos:start="2733:13" pos:end="2739:37">

            <if_stmt pos:start="2733:13" pos:end="2735:43"><if pos:start="2733:13" pos:end="2735:43">if <condition pos:start="2733:16" pos:end="2733:42">(<expr pos:start="2733:17" pos:end="2733:41"><name pos:start="2733:17" pos:end="2733:24"><name pos:start="2733:17" pos:end="2733:17">s</name><operator pos:start="2733:18" pos:end="2733:19">-&gt;</operator><name pos:start="2733:20" pos:end="2733:24">cc_op</name></name> <operator pos:start="2733:26" pos:end="2733:27">!=</operator> <name pos:start="2733:29" pos:end="2733:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="2735:17" pos:end="2735:43"><block_content pos:start="2735:17" pos:end="2735:43">

                <expr_stmt pos:start="2735:17" pos:end="2735:43"><expr pos:start="2735:17" pos:end="2735:42"><call pos:start="2735:17" pos:end="2735:42"><name pos:start="2735:17" pos:end="2735:32">gen_op_set_cc_op</name><argument_list pos:start="2735:33" pos:end="2735:42">(<argument pos:start="2735:34" pos:end="2735:41"><expr pos:start="2735:34" pos:end="2735:41"><name pos:start="2735:34" pos:end="2735:41"><name pos:start="2735:34" pos:end="2735:34">s</name><operator pos:start="2735:35" pos:end="2735:36">-&gt;</operator><name pos:start="2735:37" pos:end="2735:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2737:13" pos:end="2737:50"><expr pos:start="2737:13" pos:end="2737:49"><call pos:start="2737:13" pos:end="2737:49"><name pos:start="2737:13" pos:end="2737:25">gen_string_es</name><argument_list pos:start="2737:26" pos:end="2737:49">(<argument pos:start="2737:27" pos:end="2737:27"><expr pos:start="2737:27" pos:end="2737:27"><name pos:start="2737:27" pos:end="2737:27">s</name></expr></argument>, <argument pos:start="2737:30" pos:end="2737:31"><expr pos:start="2737:30" pos:end="2737:31"><name pos:start="2737:30" pos:end="2737:31">ot</name></expr></argument>, <argument pos:start="2737:34" pos:end="2737:48"><expr pos:start="2737:34" pos:end="2737:48"><name pos:start="2737:34" pos:end="2737:44">gen_op_scas</name> <operator pos:start="2737:46" pos:end="2737:46">+</operator> <literal type="number" pos:start="2737:48" pos:end="2737:48">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2739:13" pos:end="2739:37"><expr pos:start="2739:13" pos:end="2739:36"><name pos:start="2739:13" pos:end="2739:20"><name pos:start="2739:13" pos:end="2739:13">s</name><operator pos:start="2739:14" pos:end="2739:15">-&gt;</operator><name pos:start="2739:16" pos:end="2739:20">cc_op</name></name> <operator pos:start="2739:22" pos:end="2739:22">=</operator> <name pos:start="2739:24" pos:end="2739:36">CC_OP_DYNAMIC</name></expr>;</expr_stmt> <comment type="block" pos:start="2739:39" pos:end="2739:70">/* cannot predict flags after */</comment>

        </block_content>}</block></if> <else pos:start="2741:11" pos:end="2747:9">else <block pos:start="2741:16" pos:end="2747:9">{<block_content pos:start="2743:13" pos:end="2745:39">

            <expr_stmt pos:start="2743:13" pos:end="2743:46"><expr pos:start="2743:13" pos:end="2743:45"><call pos:start="2743:13" pos:end="2743:45"><name pos:start="2743:13" pos:end="2743:25">gen_string_es</name><argument_list pos:start="2743:26" pos:end="2743:45">(<argument pos:start="2743:27" pos:end="2743:27"><expr pos:start="2743:27" pos:end="2743:27"><name pos:start="2743:27" pos:end="2743:27">s</name></expr></argument>, <argument pos:start="2743:30" pos:end="2743:31"><expr pos:start="2743:30" pos:end="2743:31"><name pos:start="2743:30" pos:end="2743:31">ot</name></expr></argument>, <argument pos:start="2743:34" pos:end="2743:44"><expr pos:start="2743:34" pos:end="2743:44"><name pos:start="2743:34" pos:end="2743:44">gen_op_scas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2745:13" pos:end="2745:39"><expr pos:start="2745:13" pos:end="2745:38"><name pos:start="2745:13" pos:end="2745:20"><name pos:start="2745:13" pos:end="2745:13">s</name><operator pos:start="2745:14" pos:end="2745:15">-&gt;</operator><name pos:start="2745:16" pos:end="2745:20">cc_op</name></name> <operator pos:start="2745:22" pos:end="2745:22">=</operator> <name pos:start="2745:24" pos:end="2745:33">CC_OP_SUBB</name> <operator pos:start="2745:35" pos:end="2745:35">+</operator> <name pos:start="2745:37" pos:end="2745:38">ot</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2749:9" pos:end="2749:14">break;</break>



    <case pos:start="2753:5" pos:end="2753:14">case <expr pos:start="2753:10" pos:end="2753:13"><literal type="number" pos:start="2753:10" pos:end="2753:13">0xa6</literal></expr>:</case> <comment type="block" pos:start="2753:16" pos:end="2753:26">/* cmpsS */</comment>

    <case pos:start="2755:5" pos:end="2755:14">case <expr pos:start="2755:10" pos:end="2755:13"><literal type="number" pos:start="2755:10" pos:end="2755:13">0xa7</literal></expr>:</case>

        <if_stmt pos:start="2757:9" pos:end="2763:43"><if pos:start="2757:9" pos:end="2759:25">if <condition pos:start="2757:12" pos:end="2757:25">(<expr pos:start="2757:13" pos:end="2757:24"><operator pos:start="2757:13" pos:end="2757:13">(</operator><name pos:start="2757:14" pos:end="2757:14">b</name> <operator pos:start="2757:16" pos:end="2757:16">&amp;</operator> <literal type="number" pos:start="2757:18" pos:end="2757:18">1</literal><operator pos:start="2757:19" pos:end="2757:19">)</operator> <operator pos:start="2757:21" pos:end="2757:22">==</operator> <literal type="number" pos:start="2757:24" pos:end="2757:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2759:13" pos:end="2759:25"><block_content pos:start="2759:13" pos:end="2759:25">

            <expr_stmt pos:start="2759:13" pos:end="2759:25"><expr pos:start="2759:13" pos:end="2759:24"><name pos:start="2759:13" pos:end="2759:14">ot</name> <operator pos:start="2759:16" pos:end="2759:16">=</operator> <name pos:start="2759:18" pos:end="2759:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2761:9" pos:end="2763:43">else<block type="pseudo" pos:start="2763:13" pos:end="2763:43"><block_content pos:start="2763:13" pos:end="2763:43">

            <expr_stmt pos:start="2763:13" pos:end="2763:43"><expr pos:start="2763:13" pos:end="2763:42"><name pos:start="2763:13" pos:end="2763:14">ot</name> <operator pos:start="2763:16" pos:end="2763:16">=</operator> <ternary pos:start="2763:18" pos:end="2763:42"><condition pos:start="2763:18" pos:end="2763:24"><expr pos:start="2763:18" pos:end="2763:22"><name pos:start="2763:18" pos:end="2763:22">dflag</name></expr> ?</condition><then pos:start="2763:26" pos:end="2763:32"> <expr pos:start="2763:26" pos:end="2763:32"><name pos:start="2763:26" pos:end="2763:32">OT_LONG</name></expr> </then><else pos:start="2763:34" pos:end="2763:42">: <expr pos:start="2763:36" pos:end="2763:42"><name pos:start="2763:36" pos:end="2763:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="2765:9" pos:end="2791:9"><if pos:start="2765:9" pos:end="2775:9">if <condition pos:start="2765:12" pos:end="2765:36">(<expr pos:start="2765:13" pos:end="2765:35"><name pos:start="2765:13" pos:end="2765:20">prefixes</name> <operator pos:start="2765:22" pos:end="2765:22">&amp;</operator> <name pos:start="2765:24" pos:end="2765:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="2765:38" pos:end="2775:9">{<block_content pos:start="2767:13" pos:end="2773:37">

            <if_stmt pos:start="2767:13" pos:end="2769:43"><if pos:start="2767:13" pos:end="2769:43">if <condition pos:start="2767:16" pos:end="2767:42">(<expr pos:start="2767:17" pos:end="2767:41"><name pos:start="2767:17" pos:end="2767:24"><name pos:start="2767:17" pos:end="2767:17">s</name><operator pos:start="2767:18" pos:end="2767:19">-&gt;</operator><name pos:start="2767:20" pos:end="2767:24">cc_op</name></name> <operator pos:start="2767:26" pos:end="2767:27">!=</operator> <name pos:start="2767:29" pos:end="2767:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="2769:17" pos:end="2769:43"><block_content pos:start="2769:17" pos:end="2769:43">

                <expr_stmt pos:start="2769:17" pos:end="2769:43"><expr pos:start="2769:17" pos:end="2769:42"><call pos:start="2769:17" pos:end="2769:42"><name pos:start="2769:17" pos:end="2769:32">gen_op_set_cc_op</name><argument_list pos:start="2769:33" pos:end="2769:42">(<argument pos:start="2769:34" pos:end="2769:41"><expr pos:start="2769:34" pos:end="2769:41"><name pos:start="2769:34" pos:end="2769:41"><name pos:start="2769:34" pos:end="2769:34">s</name><operator pos:start="2769:35" pos:end="2769:36">-&gt;</operator><name pos:start="2769:37" pos:end="2769:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2771:13" pos:end="2771:54"><expr pos:start="2771:13" pos:end="2771:53"><call pos:start="2771:13" pos:end="2771:53"><name pos:start="2771:13" pos:end="2771:25">gen_string_ds</name><argument_list pos:start="2771:26" pos:end="2771:53">(<argument pos:start="2771:27" pos:end="2771:27"><expr pos:start="2771:27" pos:end="2771:27"><name pos:start="2771:27" pos:end="2771:27">s</name></expr></argument>, <argument pos:start="2771:30" pos:end="2771:31"><expr pos:start="2771:30" pos:end="2771:31"><name pos:start="2771:30" pos:end="2771:31">ot</name></expr></argument>, <argument pos:start="2771:34" pos:end="2771:52"><expr pos:start="2771:34" pos:end="2771:52"><name pos:start="2771:34" pos:end="2771:44">gen_op_cmps</name> <operator pos:start="2771:46" pos:end="2771:46">+</operator> <literal type="number" pos:start="2771:48" pos:end="2771:48">9</literal> <operator pos:start="2771:50" pos:end="2771:50">*</operator> <literal type="number" pos:start="2771:52" pos:end="2771:52">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2773:13" pos:end="2773:37"><expr pos:start="2773:13" pos:end="2773:36"><name pos:start="2773:13" pos:end="2773:20"><name pos:start="2773:13" pos:end="2773:13">s</name><operator pos:start="2773:14" pos:end="2773:15">-&gt;</operator><name pos:start="2773:16" pos:end="2773:20">cc_op</name></name> <operator pos:start="2773:22" pos:end="2773:22">=</operator> <name pos:start="2773:24" pos:end="2773:36">CC_OP_DYNAMIC</name></expr>;</expr_stmt> <comment type="block" pos:start="2773:39" pos:end="2773:70">/* cannot predict flags after */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="2775:11" pos:end="2785:9">else if <condition pos:start="2775:19" pos:end="2775:42">(<expr pos:start="2775:20" pos:end="2775:41"><name pos:start="2775:20" pos:end="2775:27">prefixes</name> <operator pos:start="2775:29" pos:end="2775:29">&amp;</operator> <name pos:start="2775:31" pos:end="2775:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2775:44" pos:end="2785:9">{<block_content pos:start="2777:13" pos:end="2783:37">

            <if_stmt pos:start="2777:13" pos:end="2779:43"><if pos:start="2777:13" pos:end="2779:43">if <condition pos:start="2777:16" pos:end="2777:42">(<expr pos:start="2777:17" pos:end="2777:41"><name pos:start="2777:17" pos:end="2777:24"><name pos:start="2777:17" pos:end="2777:17">s</name><operator pos:start="2777:18" pos:end="2777:19">-&gt;</operator><name pos:start="2777:20" pos:end="2777:24">cc_op</name></name> <operator pos:start="2777:26" pos:end="2777:27">!=</operator> <name pos:start="2777:29" pos:end="2777:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="2779:17" pos:end="2779:43"><block_content pos:start="2779:17" pos:end="2779:43">

                <expr_stmt pos:start="2779:17" pos:end="2779:43"><expr pos:start="2779:17" pos:end="2779:42"><call pos:start="2779:17" pos:end="2779:42"><name pos:start="2779:17" pos:end="2779:32">gen_op_set_cc_op</name><argument_list pos:start="2779:33" pos:end="2779:42">(<argument pos:start="2779:34" pos:end="2779:41"><expr pos:start="2779:34" pos:end="2779:41"><name pos:start="2779:34" pos:end="2779:41"><name pos:start="2779:34" pos:end="2779:34">s</name><operator pos:start="2779:35" pos:end="2779:36">-&gt;</operator><name pos:start="2779:37" pos:end="2779:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2781:13" pos:end="2781:50"><expr pos:start="2781:13" pos:end="2781:49"><call pos:start="2781:13" pos:end="2781:49"><name pos:start="2781:13" pos:end="2781:25">gen_string_ds</name><argument_list pos:start="2781:26" pos:end="2781:49">(<argument pos:start="2781:27" pos:end="2781:27"><expr pos:start="2781:27" pos:end="2781:27"><name pos:start="2781:27" pos:end="2781:27">s</name></expr></argument>, <argument pos:start="2781:30" pos:end="2781:31"><expr pos:start="2781:30" pos:end="2781:31"><name pos:start="2781:30" pos:end="2781:31">ot</name></expr></argument>, <argument pos:start="2781:34" pos:end="2781:48"><expr pos:start="2781:34" pos:end="2781:48"><name pos:start="2781:34" pos:end="2781:44">gen_op_cmps</name> <operator pos:start="2781:46" pos:end="2781:46">+</operator> <literal type="number" pos:start="2781:48" pos:end="2781:48">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2783:13" pos:end="2783:37"><expr pos:start="2783:13" pos:end="2783:36"><name pos:start="2783:13" pos:end="2783:20"><name pos:start="2783:13" pos:end="2783:13">s</name><operator pos:start="2783:14" pos:end="2783:15">-&gt;</operator><name pos:start="2783:16" pos:end="2783:20">cc_op</name></name> <operator pos:start="2783:22" pos:end="2783:22">=</operator> <name pos:start="2783:24" pos:end="2783:36">CC_OP_DYNAMIC</name></expr>;</expr_stmt> <comment type="block" pos:start="2783:39" pos:end="2783:70">/* cannot predict flags after */</comment>

        </block_content>}</block></if> <else pos:start="2785:11" pos:end="2791:9">else <block pos:start="2785:16" pos:end="2791:9">{<block_content pos:start="2787:13" pos:end="2789:39">

            <expr_stmt pos:start="2787:13" pos:end="2787:46"><expr pos:start="2787:13" pos:end="2787:45"><call pos:start="2787:13" pos:end="2787:45"><name pos:start="2787:13" pos:end="2787:25">gen_string_ds</name><argument_list pos:start="2787:26" pos:end="2787:45">(<argument pos:start="2787:27" pos:end="2787:27"><expr pos:start="2787:27" pos:end="2787:27"><name pos:start="2787:27" pos:end="2787:27">s</name></expr></argument>, <argument pos:start="2787:30" pos:end="2787:31"><expr pos:start="2787:30" pos:end="2787:31"><name pos:start="2787:30" pos:end="2787:31">ot</name></expr></argument>, <argument pos:start="2787:34" pos:end="2787:44"><expr pos:start="2787:34" pos:end="2787:44"><name pos:start="2787:34" pos:end="2787:44">gen_op_cmps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2789:13" pos:end="2789:39"><expr pos:start="2789:13" pos:end="2789:38"><name pos:start="2789:13" pos:end="2789:20"><name pos:start="2789:13" pos:end="2789:13">s</name><operator pos:start="2789:14" pos:end="2789:15">-&gt;</operator><name pos:start="2789:16" pos:end="2789:20">cc_op</name></name> <operator pos:start="2789:22" pos:end="2789:22">=</operator> <name pos:start="2789:24" pos:end="2789:33">CC_OP_SUBB</name> <operator pos:start="2789:35" pos:end="2789:35">+</operator> <name pos:start="2789:37" pos:end="2789:38">ot</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2793:9" pos:end="2793:14">break;</break>

    <case pos:start="2795:5" pos:end="2795:14">case <expr pos:start="2795:10" pos:end="2795:13"><literal type="number" pos:start="2795:10" pos:end="2795:13">0x6c</literal></expr>:</case> <comment type="block" pos:start="2795:16" pos:end="2795:25">/* insS */</comment>

    <case pos:start="2797:5" pos:end="2797:14">case <expr pos:start="2797:10" pos:end="2797:13"><literal type="number" pos:start="2797:10" pos:end="2797:13">0x6d</literal></expr>:</case>

        <if_stmt pos:start="2799:9" pos:end="2825:9"><if pos:start="2799:9" pos:end="2805:9">if <condition pos:start="2799:12" pos:end="2799:40">(<expr pos:start="2799:13" pos:end="2799:39"><name pos:start="2799:13" pos:end="2799:18"><name pos:start="2799:13" pos:end="2799:13">s</name><operator pos:start="2799:14" pos:end="2799:15">-&gt;</operator><name pos:start="2799:16" pos:end="2799:18">cpl</name></name> <operator pos:start="2799:20" pos:end="2799:20">&gt;</operator> <name pos:start="2799:22" pos:end="2799:28"><name pos:start="2799:22" pos:end="2799:22">s</name><operator pos:start="2799:23" pos:end="2799:24">-&gt;</operator><name pos:start="2799:25" pos:end="2799:28">iopl</name></name> <operator pos:start="2799:30" pos:end="2799:31">||</operator> <name pos:start="2799:33" pos:end="2799:39"><name pos:start="2799:33" pos:end="2799:33">s</name><operator pos:start="2799:34" pos:end="2799:35">-&gt;</operator><name pos:start="2799:36" pos:end="2799:39">vm86</name></name></expr>)</condition> <block pos:start="2799:42" pos:end="2805:9">{<block_content pos:start="2803:13" pos:end="2803:46">

            <comment type="block" pos:start="2801:13" pos:end="2801:66">/* NOTE: even for (E)CX = 0 the exception is raised */</comment>

            <expr_stmt pos:start="2803:13" pos:end="2803:46"><expr pos:start="2803:13" pos:end="2803:45"><call pos:start="2803:13" pos:end="2803:45"><name pos:start="2803:13" pos:end="2803:22">gen_op_gpf</name><argument_list pos:start="2803:23" pos:end="2803:45">(<argument pos:start="2803:24" pos:end="2803:44"><expr pos:start="2803:24" pos:end="2803:44"><name pos:start="2803:24" pos:end="2803:31">pc_start</name> <operator pos:start="2803:33" pos:end="2803:33">-</operator> <name pos:start="2803:35" pos:end="2803:44"><name pos:start="2803:35" pos:end="2803:35">s</name><operator pos:start="2803:36" pos:end="2803:37">-&gt;</operator><name pos:start="2803:38" pos:end="2803:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2805:11" pos:end="2825:9">else <block pos:start="2805:16" pos:end="2825:9">{<block_content pos:start="2807:13" pos:end="2823:13">

            <if_stmt pos:start="2807:13" pos:end="2813:47"><if pos:start="2807:13" pos:end="2809:29">if <condition pos:start="2807:16" pos:end="2807:29">(<expr pos:start="2807:17" pos:end="2807:28"><operator pos:start="2807:17" pos:end="2807:17">(</operator><name pos:start="2807:18" pos:end="2807:18">b</name> <operator pos:start="2807:20" pos:end="2807:20">&amp;</operator> <literal type="number" pos:start="2807:22" pos:end="2807:22">1</literal><operator pos:start="2807:23" pos:end="2807:23">)</operator> <operator pos:start="2807:25" pos:end="2807:26">==</operator> <literal type="number" pos:start="2807:28" pos:end="2807:28">0</literal></expr>)</condition><block type="pseudo" pos:start="2809:17" pos:end="2809:29"><block_content pos:start="2809:17" pos:end="2809:29">

                <expr_stmt pos:start="2809:17" pos:end="2809:29"><expr pos:start="2809:17" pos:end="2809:28"><name pos:start="2809:17" pos:end="2809:18">ot</name> <operator pos:start="2809:20" pos:end="2809:20">=</operator> <name pos:start="2809:22" pos:end="2809:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2811:13" pos:end="2813:47">else<block type="pseudo" pos:start="2813:17" pos:end="2813:47"><block_content pos:start="2813:17" pos:end="2813:47">

                <expr_stmt pos:start="2813:17" pos:end="2813:47"><expr pos:start="2813:17" pos:end="2813:46"><name pos:start="2813:17" pos:end="2813:18">ot</name> <operator pos:start="2813:20" pos:end="2813:20">=</operator> <ternary pos:start="2813:22" pos:end="2813:46"><condition pos:start="2813:22" pos:end="2813:28"><expr pos:start="2813:22" pos:end="2813:26"><name pos:start="2813:22" pos:end="2813:26">dflag</name></expr> ?</condition><then pos:start="2813:30" pos:end="2813:36"> <expr pos:start="2813:30" pos:end="2813:36"><name pos:start="2813:30" pos:end="2813:36">OT_LONG</name></expr> </then><else pos:start="2813:38" pos:end="2813:46">: <expr pos:start="2813:40" pos:end="2813:46"><name pos:start="2813:40" pos:end="2813:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="2815:13" pos:end="2823:13"><if pos:start="2815:13" pos:end="2819:13">if <condition pos:start="2815:16" pos:end="2815:39">(<expr pos:start="2815:17" pos:end="2815:38"><name pos:start="2815:17" pos:end="2815:24">prefixes</name> <operator pos:start="2815:26" pos:end="2815:26">&amp;</operator> <name pos:start="2815:28" pos:end="2815:38">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2815:41" pos:end="2819:13">{<block_content pos:start="2817:17" pos:end="2817:53">

                <expr_stmt pos:start="2817:17" pos:end="2817:53"><expr pos:start="2817:17" pos:end="2817:52"><call pos:start="2817:17" pos:end="2817:52"><name pos:start="2817:17" pos:end="2817:29">gen_string_es</name><argument_list pos:start="2817:30" pos:end="2817:52">(<argument pos:start="2817:31" pos:end="2817:31"><expr pos:start="2817:31" pos:end="2817:31"><name pos:start="2817:31" pos:end="2817:31">s</name></expr></argument>, <argument pos:start="2817:34" pos:end="2817:35"><expr pos:start="2817:34" pos:end="2817:35"><name pos:start="2817:34" pos:end="2817:35">ot</name></expr></argument>, <argument pos:start="2817:38" pos:end="2817:51"><expr pos:start="2817:38" pos:end="2817:51"><name pos:start="2817:38" pos:end="2817:47">gen_op_ins</name> <operator pos:start="2817:49" pos:end="2817:49">+</operator> <literal type="number" pos:start="2817:51" pos:end="2817:51">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2819:15" pos:end="2823:13">else <block pos:start="2819:20" pos:end="2823:13">{<block_content pos:start="2821:17" pos:end="2821:49">

                <expr_stmt pos:start="2821:17" pos:end="2821:49"><expr pos:start="2821:17" pos:end="2821:48"><call pos:start="2821:17" pos:end="2821:48"><name pos:start="2821:17" pos:end="2821:29">gen_string_es</name><argument_list pos:start="2821:30" pos:end="2821:48">(<argument pos:start="2821:31" pos:end="2821:31"><expr pos:start="2821:31" pos:end="2821:31"><name pos:start="2821:31" pos:end="2821:31">s</name></expr></argument>, <argument pos:start="2821:34" pos:end="2821:35"><expr pos:start="2821:34" pos:end="2821:35"><name pos:start="2821:34" pos:end="2821:35">ot</name></expr></argument>, <argument pos:start="2821:38" pos:end="2821:47"><expr pos:start="2821:38" pos:end="2821:47"><name pos:start="2821:38" pos:end="2821:47">gen_op_ins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2827:9" pos:end="2827:14">break;</break>

    <case pos:start="2829:5" pos:end="2829:14">case <expr pos:start="2829:10" pos:end="2829:13"><literal type="number" pos:start="2829:10" pos:end="2829:13">0x6e</literal></expr>:</case> <comment type="block" pos:start="2829:16" pos:end="2829:26">/* outsS */</comment>

    <case pos:start="2831:5" pos:end="2831:14">case <expr pos:start="2831:10" pos:end="2831:13"><literal type="number" pos:start="2831:10" pos:end="2831:13">0x6f</literal></expr>:</case>

        <if_stmt pos:start="2833:9" pos:end="2859:9"><if pos:start="2833:9" pos:end="2839:9">if <condition pos:start="2833:12" pos:end="2833:40">(<expr pos:start="2833:13" pos:end="2833:39"><name pos:start="2833:13" pos:end="2833:18"><name pos:start="2833:13" pos:end="2833:13">s</name><operator pos:start="2833:14" pos:end="2833:15">-&gt;</operator><name pos:start="2833:16" pos:end="2833:18">cpl</name></name> <operator pos:start="2833:20" pos:end="2833:20">&gt;</operator> <name pos:start="2833:22" pos:end="2833:28"><name pos:start="2833:22" pos:end="2833:22">s</name><operator pos:start="2833:23" pos:end="2833:24">-&gt;</operator><name pos:start="2833:25" pos:end="2833:28">iopl</name></name> <operator pos:start="2833:30" pos:end="2833:31">||</operator> <name pos:start="2833:33" pos:end="2833:39"><name pos:start="2833:33" pos:end="2833:33">s</name><operator pos:start="2833:34" pos:end="2833:35">-&gt;</operator><name pos:start="2833:36" pos:end="2833:39">vm86</name></name></expr>)</condition> <block pos:start="2833:42" pos:end="2839:9">{<block_content pos:start="2837:13" pos:end="2837:46">

            <comment type="block" pos:start="2835:13" pos:end="2835:66">/* NOTE: even for (E)CX = 0 the exception is raised */</comment>

            <expr_stmt pos:start="2837:13" pos:end="2837:46"><expr pos:start="2837:13" pos:end="2837:45"><call pos:start="2837:13" pos:end="2837:45"><name pos:start="2837:13" pos:end="2837:22">gen_op_gpf</name><argument_list pos:start="2837:23" pos:end="2837:45">(<argument pos:start="2837:24" pos:end="2837:44"><expr pos:start="2837:24" pos:end="2837:44"><name pos:start="2837:24" pos:end="2837:31">pc_start</name> <operator pos:start="2837:33" pos:end="2837:33">-</operator> <name pos:start="2837:35" pos:end="2837:44"><name pos:start="2837:35" pos:end="2837:35">s</name><operator pos:start="2837:36" pos:end="2837:37">-&gt;</operator><name pos:start="2837:38" pos:end="2837:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2839:11" pos:end="2859:9">else <block pos:start="2839:16" pos:end="2859:9">{<block_content pos:start="2841:13" pos:end="2857:13">

            <if_stmt pos:start="2841:13" pos:end="2847:47"><if pos:start="2841:13" pos:end="2843:29">if <condition pos:start="2841:16" pos:end="2841:29">(<expr pos:start="2841:17" pos:end="2841:28"><operator pos:start="2841:17" pos:end="2841:17">(</operator><name pos:start="2841:18" pos:end="2841:18">b</name> <operator pos:start="2841:20" pos:end="2841:20">&amp;</operator> <literal type="number" pos:start="2841:22" pos:end="2841:22">1</literal><operator pos:start="2841:23" pos:end="2841:23">)</operator> <operator pos:start="2841:25" pos:end="2841:26">==</operator> <literal type="number" pos:start="2841:28" pos:end="2841:28">0</literal></expr>)</condition><block type="pseudo" pos:start="2843:17" pos:end="2843:29"><block_content pos:start="2843:17" pos:end="2843:29">

                <expr_stmt pos:start="2843:17" pos:end="2843:29"><expr pos:start="2843:17" pos:end="2843:28"><name pos:start="2843:17" pos:end="2843:18">ot</name> <operator pos:start="2843:20" pos:end="2843:20">=</operator> <name pos:start="2843:22" pos:end="2843:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2845:13" pos:end="2847:47">else<block type="pseudo" pos:start="2847:17" pos:end="2847:47"><block_content pos:start="2847:17" pos:end="2847:47">

                <expr_stmt pos:start="2847:17" pos:end="2847:47"><expr pos:start="2847:17" pos:end="2847:46"><name pos:start="2847:17" pos:end="2847:18">ot</name> <operator pos:start="2847:20" pos:end="2847:20">=</operator> <ternary pos:start="2847:22" pos:end="2847:46"><condition pos:start="2847:22" pos:end="2847:28"><expr pos:start="2847:22" pos:end="2847:26"><name pos:start="2847:22" pos:end="2847:26">dflag</name></expr> ?</condition><then pos:start="2847:30" pos:end="2847:36"> <expr pos:start="2847:30" pos:end="2847:36"><name pos:start="2847:30" pos:end="2847:36">OT_LONG</name></expr> </then><else pos:start="2847:38" pos:end="2847:46">: <expr pos:start="2847:40" pos:end="2847:46"><name pos:start="2847:40" pos:end="2847:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="2849:13" pos:end="2857:13"><if pos:start="2849:13" pos:end="2853:13">if <condition pos:start="2849:16" pos:end="2849:39">(<expr pos:start="2849:17" pos:end="2849:38"><name pos:start="2849:17" pos:end="2849:24">prefixes</name> <operator pos:start="2849:26" pos:end="2849:26">&amp;</operator> <name pos:start="2849:28" pos:end="2849:38">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2849:41" pos:end="2853:13">{<block_content pos:start="2851:17" pos:end="2851:54">

                <expr_stmt pos:start="2851:17" pos:end="2851:54"><expr pos:start="2851:17" pos:end="2851:53"><call pos:start="2851:17" pos:end="2851:53"><name pos:start="2851:17" pos:end="2851:29">gen_string_ds</name><argument_list pos:start="2851:30" pos:end="2851:53">(<argument pos:start="2851:31" pos:end="2851:31"><expr pos:start="2851:31" pos:end="2851:31"><name pos:start="2851:31" pos:end="2851:31">s</name></expr></argument>, <argument pos:start="2851:34" pos:end="2851:35"><expr pos:start="2851:34" pos:end="2851:35"><name pos:start="2851:34" pos:end="2851:35">ot</name></expr></argument>, <argument pos:start="2851:38" pos:end="2851:52"><expr pos:start="2851:38" pos:end="2851:52"><name pos:start="2851:38" pos:end="2851:48">gen_op_outs</name> <operator pos:start="2851:50" pos:end="2851:50">+</operator> <literal type="number" pos:start="2851:52" pos:end="2851:52">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="2853:15" pos:end="2857:13">else <block pos:start="2853:20" pos:end="2857:13">{<block_content pos:start="2855:17" pos:end="2855:50">

                <expr_stmt pos:start="2855:17" pos:end="2855:50"><expr pos:start="2855:17" pos:end="2855:49"><call pos:start="2855:17" pos:end="2855:49"><name pos:start="2855:17" pos:end="2855:29">gen_string_ds</name><argument_list pos:start="2855:30" pos:end="2855:49">(<argument pos:start="2855:31" pos:end="2855:31"><expr pos:start="2855:31" pos:end="2855:31"><name pos:start="2855:31" pos:end="2855:31">s</name></expr></argument>, <argument pos:start="2855:34" pos:end="2855:35"><expr pos:start="2855:34" pos:end="2855:35"><name pos:start="2855:34" pos:end="2855:35">ot</name></expr></argument>, <argument pos:start="2855:38" pos:end="2855:48"><expr pos:start="2855:38" pos:end="2855:48"><name pos:start="2855:38" pos:end="2855:48">gen_op_outs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2861:9" pos:end="2861:14">break;</break>



        <comment type="block" format="doxygen" pos:start="2865:9" pos:end="2865:34">/************************/</comment>

        <comment type="block" pos:start="2867:9" pos:end="2867:22">/* port I/O */</comment>

    <case pos:start="2869:5" pos:end="2869:14">case <expr pos:start="2869:10" pos:end="2869:13"><literal type="number" pos:start="2869:10" pos:end="2869:13">0xe4</literal></expr>:</case>

    <case pos:start="2871:5" pos:end="2871:14">case <expr pos:start="2871:10" pos:end="2871:13"><literal type="number" pos:start="2871:10" pos:end="2871:13">0xe5</literal></expr>:</case>

        <if_stmt pos:start="2873:9" pos:end="2895:9"><if pos:start="2873:9" pos:end="2877:9">if <condition pos:start="2873:12" pos:end="2873:40">(<expr pos:start="2873:13" pos:end="2873:39"><name pos:start="2873:13" pos:end="2873:18"><name pos:start="2873:13" pos:end="2873:13">s</name><operator pos:start="2873:14" pos:end="2873:15">-&gt;</operator><name pos:start="2873:16" pos:end="2873:18">cpl</name></name> <operator pos:start="2873:20" pos:end="2873:20">&gt;</operator> <name pos:start="2873:22" pos:end="2873:28"><name pos:start="2873:22" pos:end="2873:22">s</name><operator pos:start="2873:23" pos:end="2873:24">-&gt;</operator><name pos:start="2873:25" pos:end="2873:28">iopl</name></name> <operator pos:start="2873:30" pos:end="2873:31">||</operator> <name pos:start="2873:33" pos:end="2873:39"><name pos:start="2873:33" pos:end="2873:33">s</name><operator pos:start="2873:34" pos:end="2873:35">-&gt;</operator><name pos:start="2873:36" pos:end="2873:39">vm86</name></name></expr>)</condition> <block pos:start="2873:42" pos:end="2877:9">{<block_content pos:start="2875:13" pos:end="2875:46">

            <expr_stmt pos:start="2875:13" pos:end="2875:46"><expr pos:start="2875:13" pos:end="2875:45"><call pos:start="2875:13" pos:end="2875:45"><name pos:start="2875:13" pos:end="2875:22">gen_op_gpf</name><argument_list pos:start="2875:23" pos:end="2875:45">(<argument pos:start="2875:24" pos:end="2875:44"><expr pos:start="2875:24" pos:end="2875:44"><name pos:start="2875:24" pos:end="2875:31">pc_start</name> <operator pos:start="2875:33" pos:end="2875:33">-</operator> <name pos:start="2875:35" pos:end="2875:44"><name pos:start="2875:35" pos:end="2875:35">s</name><operator pos:start="2875:36" pos:end="2875:37">-&gt;</operator><name pos:start="2875:38" pos:end="2875:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2877:11" pos:end="2895:9">else <block pos:start="2877:16" pos:end="2895:9">{<block_content pos:start="2879:13" pos:end="2893:43">

            <if_stmt pos:start="2879:13" pos:end="2885:47"><if pos:start="2879:13" pos:end="2881:29">if <condition pos:start="2879:16" pos:end="2879:29">(<expr pos:start="2879:17" pos:end="2879:28"><operator pos:start="2879:17" pos:end="2879:17">(</operator><name pos:start="2879:18" pos:end="2879:18">b</name> <operator pos:start="2879:20" pos:end="2879:20">&amp;</operator> <literal type="number" pos:start="2879:22" pos:end="2879:22">1</literal><operator pos:start="2879:23" pos:end="2879:23">)</operator> <operator pos:start="2879:25" pos:end="2879:26">==</operator> <literal type="number" pos:start="2879:28" pos:end="2879:28">0</literal></expr>)</condition><block type="pseudo" pos:start="2881:17" pos:end="2881:29"><block_content pos:start="2881:17" pos:end="2881:29">

                <expr_stmt pos:start="2881:17" pos:end="2881:29"><expr pos:start="2881:17" pos:end="2881:28"><name pos:start="2881:17" pos:end="2881:18">ot</name> <operator pos:start="2881:20" pos:end="2881:20">=</operator> <name pos:start="2881:22" pos:end="2881:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2883:13" pos:end="2885:47">else<block type="pseudo" pos:start="2885:17" pos:end="2885:47"><block_content pos:start="2885:17" pos:end="2885:47">

                <expr_stmt pos:start="2885:17" pos:end="2885:47"><expr pos:start="2885:17" pos:end="2885:46"><name pos:start="2885:17" pos:end="2885:18">ot</name> <operator pos:start="2885:20" pos:end="2885:20">=</operator> <ternary pos:start="2885:22" pos:end="2885:46"><condition pos:start="2885:22" pos:end="2885:28"><expr pos:start="2885:22" pos:end="2885:26"><name pos:start="2885:22" pos:end="2885:26">dflag</name></expr> ?</condition><then pos:start="2885:30" pos:end="2885:36"> <expr pos:start="2885:30" pos:end="2885:36"><name pos:start="2885:30" pos:end="2885:36">OT_LONG</name></expr> </then><else pos:start="2885:38" pos:end="2885:46">: <expr pos:start="2885:40" pos:end="2885:46"><name pos:start="2885:40" pos:end="2885:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2887:13" pos:end="2887:32"><expr pos:start="2887:13" pos:end="2887:31"><name pos:start="2887:13" pos:end="2887:15">val</name> <operator pos:start="2887:17" pos:end="2887:17">=</operator> <call pos:start="2887:19" pos:end="2887:31"><name pos:start="2887:19" pos:end="2887:22">ldub</name><argument_list pos:start="2887:23" pos:end="2887:31">(<argument pos:start="2887:24" pos:end="2887:30"><expr pos:start="2887:24" pos:end="2887:30"><name pos:start="2887:24" pos:end="2887:28"><name pos:start="2887:24" pos:end="2887:24">s</name><operator pos:start="2887:25" pos:end="2887:26">-&gt;</operator><name pos:start="2887:27" pos:end="2887:28">pc</name></name><operator pos:start="2887:29" pos:end="2887:30">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2889:13" pos:end="2889:35"><expr pos:start="2889:13" pos:end="2889:34"><call pos:start="2889:13" pos:end="2889:34"><name pos:start="2889:13" pos:end="2889:29">gen_op_movl_T0_im</name><argument_list pos:start="2889:30" pos:end="2889:34">(<argument pos:start="2889:31" pos:end="2889:33"><expr pos:start="2889:31" pos:end="2889:33"><name pos:start="2889:31" pos:end="2889:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2891:13" pos:end="2891:28"><expr pos:start="2891:13" pos:end="2891:27"><name pos:start="2891:13" pos:end="2891:25"><name pos:start="2891:13" pos:end="2891:21">gen_op_in</name><index pos:start="2891:22" pos:end="2891:25">[<expr pos:start="2891:23" pos:end="2891:24"><name pos:start="2891:23" pos:end="2891:24">ot</name></expr>]</index></name><operator pos:start="2891:26" pos:end="2891:26">(</operator><operator pos:start="2891:27" pos:end="2891:27">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2893:13" pos:end="2893:43"><expr pos:start="2893:13" pos:end="2893:42"><name pos:start="2893:13" pos:end="2893:40"><name pos:start="2893:13" pos:end="2893:29">gen_op_mov_reg_T1</name><index pos:start="2893:30" pos:end="2893:33">[<expr pos:start="2893:31" pos:end="2893:32"><name pos:start="2893:31" pos:end="2893:32">ot</name></expr>]</index><index pos:start="2893:34" pos:end="2893:40">[<expr pos:start="2893:35" pos:end="2893:39"><name pos:start="2893:35" pos:end="2893:39">R_EAX</name></expr>]</index></name><operator pos:start="2893:41" pos:end="2893:41">(</operator><operator pos:start="2893:42" pos:end="2893:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2897:9" pos:end="2897:14">break;</break>

    <case pos:start="2899:5" pos:end="2899:14">case <expr pos:start="2899:10" pos:end="2899:13"><literal type="number" pos:start="2899:10" pos:end="2899:13">0xe6</literal></expr>:</case>

    <case pos:start="2901:5" pos:end="2901:14">case <expr pos:start="2901:10" pos:end="2901:13"><literal type="number" pos:start="2901:10" pos:end="2901:13">0xe7</literal></expr>:</case>

        <if_stmt pos:start="2903:9" pos:end="2925:9"><if pos:start="2903:9" pos:end="2907:9">if <condition pos:start="2903:12" pos:end="2903:40">(<expr pos:start="2903:13" pos:end="2903:39"><name pos:start="2903:13" pos:end="2903:18"><name pos:start="2903:13" pos:end="2903:13">s</name><operator pos:start="2903:14" pos:end="2903:15">-&gt;</operator><name pos:start="2903:16" pos:end="2903:18">cpl</name></name> <operator pos:start="2903:20" pos:end="2903:20">&gt;</operator> <name pos:start="2903:22" pos:end="2903:28"><name pos:start="2903:22" pos:end="2903:22">s</name><operator pos:start="2903:23" pos:end="2903:24">-&gt;</operator><name pos:start="2903:25" pos:end="2903:28">iopl</name></name> <operator pos:start="2903:30" pos:end="2903:31">||</operator> <name pos:start="2903:33" pos:end="2903:39"><name pos:start="2903:33" pos:end="2903:33">s</name><operator pos:start="2903:34" pos:end="2903:35">-&gt;</operator><name pos:start="2903:36" pos:end="2903:39">vm86</name></name></expr>)</condition> <block pos:start="2903:42" pos:end="2907:9">{<block_content pos:start="2905:13" pos:end="2905:46">

            <expr_stmt pos:start="2905:13" pos:end="2905:46"><expr pos:start="2905:13" pos:end="2905:45"><call pos:start="2905:13" pos:end="2905:45"><name pos:start="2905:13" pos:end="2905:22">gen_op_gpf</name><argument_list pos:start="2905:23" pos:end="2905:45">(<argument pos:start="2905:24" pos:end="2905:44"><expr pos:start="2905:24" pos:end="2905:44"><name pos:start="2905:24" pos:end="2905:31">pc_start</name> <operator pos:start="2905:33" pos:end="2905:33">-</operator> <name pos:start="2905:35" pos:end="2905:44"><name pos:start="2905:35" pos:end="2905:35">s</name><operator pos:start="2905:36" pos:end="2905:37">-&gt;</operator><name pos:start="2905:38" pos:end="2905:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2907:11" pos:end="2925:9">else <block pos:start="2907:16" pos:end="2925:9">{<block_content pos:start="2909:13" pos:end="2923:29">

            <if_stmt pos:start="2909:13" pos:end="2915:47"><if pos:start="2909:13" pos:end="2911:29">if <condition pos:start="2909:16" pos:end="2909:29">(<expr pos:start="2909:17" pos:end="2909:28"><operator pos:start="2909:17" pos:end="2909:17">(</operator><name pos:start="2909:18" pos:end="2909:18">b</name> <operator pos:start="2909:20" pos:end="2909:20">&amp;</operator> <literal type="number" pos:start="2909:22" pos:end="2909:22">1</literal><operator pos:start="2909:23" pos:end="2909:23">)</operator> <operator pos:start="2909:25" pos:end="2909:26">==</operator> <literal type="number" pos:start="2909:28" pos:end="2909:28">0</literal></expr>)</condition><block type="pseudo" pos:start="2911:17" pos:end="2911:29"><block_content pos:start="2911:17" pos:end="2911:29">

                <expr_stmt pos:start="2911:17" pos:end="2911:29"><expr pos:start="2911:17" pos:end="2911:28"><name pos:start="2911:17" pos:end="2911:18">ot</name> <operator pos:start="2911:20" pos:end="2911:20">=</operator> <name pos:start="2911:22" pos:end="2911:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2913:13" pos:end="2915:47">else<block type="pseudo" pos:start="2915:17" pos:end="2915:47"><block_content pos:start="2915:17" pos:end="2915:47">

                <expr_stmt pos:start="2915:17" pos:end="2915:47"><expr pos:start="2915:17" pos:end="2915:46"><name pos:start="2915:17" pos:end="2915:18">ot</name> <operator pos:start="2915:20" pos:end="2915:20">=</operator> <ternary pos:start="2915:22" pos:end="2915:46"><condition pos:start="2915:22" pos:end="2915:28"><expr pos:start="2915:22" pos:end="2915:26"><name pos:start="2915:22" pos:end="2915:26">dflag</name></expr> ?</condition><then pos:start="2915:30" pos:end="2915:36"> <expr pos:start="2915:30" pos:end="2915:36"><name pos:start="2915:30" pos:end="2915:36">OT_LONG</name></expr> </then><else pos:start="2915:38" pos:end="2915:46">: <expr pos:start="2915:40" pos:end="2915:46"><name pos:start="2915:40" pos:end="2915:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2917:13" pos:end="2917:32"><expr pos:start="2917:13" pos:end="2917:31"><name pos:start="2917:13" pos:end="2917:15">val</name> <operator pos:start="2917:17" pos:end="2917:17">=</operator> <call pos:start="2917:19" pos:end="2917:31"><name pos:start="2917:19" pos:end="2917:22">ldub</name><argument_list pos:start="2917:23" pos:end="2917:31">(<argument pos:start="2917:24" pos:end="2917:30"><expr pos:start="2917:24" pos:end="2917:30"><name pos:start="2917:24" pos:end="2917:28"><name pos:start="2917:24" pos:end="2917:24">s</name><operator pos:start="2917:25" pos:end="2917:26">-&gt;</operator><name pos:start="2917:27" pos:end="2917:28">pc</name></name><operator pos:start="2917:29" pos:end="2917:30">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2919:13" pos:end="2919:35"><expr pos:start="2919:13" pos:end="2919:34"><call pos:start="2919:13" pos:end="2919:34"><name pos:start="2919:13" pos:end="2919:29">gen_op_movl_T0_im</name><argument_list pos:start="2919:30" pos:end="2919:34">(<argument pos:start="2919:31" pos:end="2919:33"><expr pos:start="2919:31" pos:end="2919:33"><name pos:start="2919:31" pos:end="2919:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="2921:13" pos:end="2921:46"><expr pos:start="2921:13" pos:end="2921:45"><name pos:start="2921:13" pos:end="2921:43"><name pos:start="2921:13" pos:end="2921:29">gen_op_mov_TN_reg</name><index pos:start="2921:30" pos:end="2921:33">[<expr pos:start="2921:31" pos:end="2921:32"><name pos:start="2921:31" pos:end="2921:32">ot</name></expr>]</index><index pos:start="2921:34" pos:end="2921:36">[<expr pos:start="2921:35" pos:end="2921:35"><literal type="number" pos:start="2921:35" pos:end="2921:35">1</literal></expr>]</index><index pos:start="2921:37" pos:end="2921:43">[<expr pos:start="2921:38" pos:end="2921:42"><name pos:start="2921:38" pos:end="2921:42">R_EAX</name></expr>]</index></name><operator pos:start="2921:44" pos:end="2921:44">(</operator><operator pos:start="2921:45" pos:end="2921:45">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2923:13" pos:end="2923:29"><expr pos:start="2923:13" pos:end="2923:28"><name pos:start="2923:13" pos:end="2923:26"><name pos:start="2923:13" pos:end="2923:22">gen_op_out</name><index pos:start="2923:23" pos:end="2923:26">[<expr pos:start="2923:24" pos:end="2923:25"><name pos:start="2923:24" pos:end="2923:25">ot</name></expr>]</index></name><operator pos:start="2923:27" pos:end="2923:27">(</operator><operator pos:start="2923:28" pos:end="2923:28">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2927:9" pos:end="2927:14">break;</break>

    <case pos:start="2929:5" pos:end="2929:14">case <expr pos:start="2929:10" pos:end="2929:13"><literal type="number" pos:start="2929:10" pos:end="2929:13">0xec</literal></expr>:</case>

    <case pos:start="2931:5" pos:end="2931:14">case <expr pos:start="2931:10" pos:end="2931:13"><literal type="number" pos:start="2931:10" pos:end="2931:13">0xed</literal></expr>:</case>

        <if_stmt pos:start="2933:9" pos:end="2953:9"><if pos:start="2933:9" pos:end="2937:9">if <condition pos:start="2933:12" pos:end="2933:40">(<expr pos:start="2933:13" pos:end="2933:39"><name pos:start="2933:13" pos:end="2933:18"><name pos:start="2933:13" pos:end="2933:13">s</name><operator pos:start="2933:14" pos:end="2933:15">-&gt;</operator><name pos:start="2933:16" pos:end="2933:18">cpl</name></name> <operator pos:start="2933:20" pos:end="2933:20">&gt;</operator> <name pos:start="2933:22" pos:end="2933:28"><name pos:start="2933:22" pos:end="2933:22">s</name><operator pos:start="2933:23" pos:end="2933:24">-&gt;</operator><name pos:start="2933:25" pos:end="2933:28">iopl</name></name> <operator pos:start="2933:30" pos:end="2933:31">||</operator> <name pos:start="2933:33" pos:end="2933:39"><name pos:start="2933:33" pos:end="2933:33">s</name><operator pos:start="2933:34" pos:end="2933:35">-&gt;</operator><name pos:start="2933:36" pos:end="2933:39">vm86</name></name></expr>)</condition> <block pos:start="2933:42" pos:end="2937:9">{<block_content pos:start="2935:13" pos:end="2935:46">

            <expr_stmt pos:start="2935:13" pos:end="2935:46"><expr pos:start="2935:13" pos:end="2935:45"><call pos:start="2935:13" pos:end="2935:45"><name pos:start="2935:13" pos:end="2935:22">gen_op_gpf</name><argument_list pos:start="2935:23" pos:end="2935:45">(<argument pos:start="2935:24" pos:end="2935:44"><expr pos:start="2935:24" pos:end="2935:44"><name pos:start="2935:24" pos:end="2935:31">pc_start</name> <operator pos:start="2935:33" pos:end="2935:33">-</operator> <name pos:start="2935:35" pos:end="2935:44"><name pos:start="2935:35" pos:end="2935:35">s</name><operator pos:start="2935:36" pos:end="2935:37">-&gt;</operator><name pos:start="2935:38" pos:end="2935:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2937:11" pos:end="2953:9">else <block pos:start="2937:16" pos:end="2953:9">{<block_content pos:start="2939:13" pos:end="2951:43">

            <if_stmt pos:start="2939:13" pos:end="2945:47"><if pos:start="2939:13" pos:end="2941:29">if <condition pos:start="2939:16" pos:end="2939:29">(<expr pos:start="2939:17" pos:end="2939:28"><operator pos:start="2939:17" pos:end="2939:17">(</operator><name pos:start="2939:18" pos:end="2939:18">b</name> <operator pos:start="2939:20" pos:end="2939:20">&amp;</operator> <literal type="number" pos:start="2939:22" pos:end="2939:22">1</literal><operator pos:start="2939:23" pos:end="2939:23">)</operator> <operator pos:start="2939:25" pos:end="2939:26">==</operator> <literal type="number" pos:start="2939:28" pos:end="2939:28">0</literal></expr>)</condition><block type="pseudo" pos:start="2941:17" pos:end="2941:29"><block_content pos:start="2941:17" pos:end="2941:29">

                <expr_stmt pos:start="2941:17" pos:end="2941:29"><expr pos:start="2941:17" pos:end="2941:28"><name pos:start="2941:17" pos:end="2941:18">ot</name> <operator pos:start="2941:20" pos:end="2941:20">=</operator> <name pos:start="2941:22" pos:end="2941:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2943:13" pos:end="2945:47">else<block type="pseudo" pos:start="2945:17" pos:end="2945:47"><block_content pos:start="2945:17" pos:end="2945:47">

                <expr_stmt pos:start="2945:17" pos:end="2945:47"><expr pos:start="2945:17" pos:end="2945:46"><name pos:start="2945:17" pos:end="2945:18">ot</name> <operator pos:start="2945:20" pos:end="2945:20">=</operator> <ternary pos:start="2945:22" pos:end="2945:46"><condition pos:start="2945:22" pos:end="2945:28"><expr pos:start="2945:22" pos:end="2945:26"><name pos:start="2945:22" pos:end="2945:26">dflag</name></expr> ?</condition><then pos:start="2945:30" pos:end="2945:36"> <expr pos:start="2945:30" pos:end="2945:36"><name pos:start="2945:30" pos:end="2945:36">OT_LONG</name></expr> </then><else pos:start="2945:38" pos:end="2945:46">: <expr pos:start="2945:40" pos:end="2945:46"><name pos:start="2945:40" pos:end="2945:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2947:13" pos:end="2947:51"><expr pos:start="2947:13" pos:end="2947:50"><name pos:start="2947:13" pos:end="2947:48"><name pos:start="2947:13" pos:end="2947:29">gen_op_mov_TN_reg</name><index pos:start="2947:30" pos:end="2947:38">[<expr pos:start="2947:31" pos:end="2947:37"><name pos:start="2947:31" pos:end="2947:37">OT_WORD</name></expr>]</index><index pos:start="2947:39" pos:end="2947:41">[<expr pos:start="2947:40" pos:end="2947:40"><literal type="number" pos:start="2947:40" pos:end="2947:40">0</literal></expr>]</index><index pos:start="2947:42" pos:end="2947:48">[<expr pos:start="2947:43" pos:end="2947:47"><name pos:start="2947:43" pos:end="2947:47">R_EDX</name></expr>]</index></name><operator pos:start="2947:49" pos:end="2947:49">(</operator><operator pos:start="2947:50" pos:end="2947:50">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2949:13" pos:end="2949:28"><expr pos:start="2949:13" pos:end="2949:27"><name pos:start="2949:13" pos:end="2949:25"><name pos:start="2949:13" pos:end="2949:21">gen_op_in</name><index pos:start="2949:22" pos:end="2949:25">[<expr pos:start="2949:23" pos:end="2949:24"><name pos:start="2949:23" pos:end="2949:24">ot</name></expr>]</index></name><operator pos:start="2949:26" pos:end="2949:26">(</operator><operator pos:start="2949:27" pos:end="2949:27">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2951:13" pos:end="2951:43"><expr pos:start="2951:13" pos:end="2951:42"><name pos:start="2951:13" pos:end="2951:40"><name pos:start="2951:13" pos:end="2951:29">gen_op_mov_reg_T1</name><index pos:start="2951:30" pos:end="2951:33">[<expr pos:start="2951:31" pos:end="2951:32"><name pos:start="2951:31" pos:end="2951:32">ot</name></expr>]</index><index pos:start="2951:34" pos:end="2951:40">[<expr pos:start="2951:35" pos:end="2951:39"><name pos:start="2951:35" pos:end="2951:39">R_EAX</name></expr>]</index></name><operator pos:start="2951:41" pos:end="2951:41">(</operator><operator pos:start="2951:42" pos:end="2951:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2955:9" pos:end="2955:14">break;</break>

    <case pos:start="2957:5" pos:end="2957:14">case <expr pos:start="2957:10" pos:end="2957:13"><literal type="number" pos:start="2957:10" pos:end="2957:13">0xee</literal></expr>:</case>

    <case pos:start="2959:5" pos:end="2959:14">case <expr pos:start="2959:10" pos:end="2959:13"><literal type="number" pos:start="2959:10" pos:end="2959:13">0xef</literal></expr>:</case>

        <if_stmt pos:start="2961:9" pos:end="2981:9"><if pos:start="2961:9" pos:end="2965:9">if <condition pos:start="2961:12" pos:end="2961:40">(<expr pos:start="2961:13" pos:end="2961:39"><name pos:start="2961:13" pos:end="2961:18"><name pos:start="2961:13" pos:end="2961:13">s</name><operator pos:start="2961:14" pos:end="2961:15">-&gt;</operator><name pos:start="2961:16" pos:end="2961:18">cpl</name></name> <operator pos:start="2961:20" pos:end="2961:20">&gt;</operator> <name pos:start="2961:22" pos:end="2961:28"><name pos:start="2961:22" pos:end="2961:22">s</name><operator pos:start="2961:23" pos:end="2961:24">-&gt;</operator><name pos:start="2961:25" pos:end="2961:28">iopl</name></name> <operator pos:start="2961:30" pos:end="2961:31">||</operator> <name pos:start="2961:33" pos:end="2961:39"><name pos:start="2961:33" pos:end="2961:33">s</name><operator pos:start="2961:34" pos:end="2961:35">-&gt;</operator><name pos:start="2961:36" pos:end="2961:39">vm86</name></name></expr>)</condition> <block pos:start="2961:42" pos:end="2965:9">{<block_content pos:start="2963:13" pos:end="2963:46">

            <expr_stmt pos:start="2963:13" pos:end="2963:46"><expr pos:start="2963:13" pos:end="2963:45"><call pos:start="2963:13" pos:end="2963:45"><name pos:start="2963:13" pos:end="2963:22">gen_op_gpf</name><argument_list pos:start="2963:23" pos:end="2963:45">(<argument pos:start="2963:24" pos:end="2963:44"><expr pos:start="2963:24" pos:end="2963:44"><name pos:start="2963:24" pos:end="2963:31">pc_start</name> <operator pos:start="2963:33" pos:end="2963:33">-</operator> <name pos:start="2963:35" pos:end="2963:44"><name pos:start="2963:35" pos:end="2963:35">s</name><operator pos:start="2963:36" pos:end="2963:37">-&gt;</operator><name pos:start="2963:38" pos:end="2963:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2965:11" pos:end="2981:9">else <block pos:start="2965:16" pos:end="2981:9">{<block_content pos:start="2967:13" pos:end="2979:29">

            <if_stmt pos:start="2967:13" pos:end="2973:47"><if pos:start="2967:13" pos:end="2969:29">if <condition pos:start="2967:16" pos:end="2967:29">(<expr pos:start="2967:17" pos:end="2967:28"><operator pos:start="2967:17" pos:end="2967:17">(</operator><name pos:start="2967:18" pos:end="2967:18">b</name> <operator pos:start="2967:20" pos:end="2967:20">&amp;</operator> <literal type="number" pos:start="2967:22" pos:end="2967:22">1</literal><operator pos:start="2967:23" pos:end="2967:23">)</operator> <operator pos:start="2967:25" pos:end="2967:26">==</operator> <literal type="number" pos:start="2967:28" pos:end="2967:28">0</literal></expr>)</condition><block type="pseudo" pos:start="2969:17" pos:end="2969:29"><block_content pos:start="2969:17" pos:end="2969:29">

                <expr_stmt pos:start="2969:17" pos:end="2969:29"><expr pos:start="2969:17" pos:end="2969:28"><name pos:start="2969:17" pos:end="2969:18">ot</name> <operator pos:start="2969:20" pos:end="2969:20">=</operator> <name pos:start="2969:22" pos:end="2969:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="2971:13" pos:end="2973:47">else<block type="pseudo" pos:start="2973:17" pos:end="2973:47"><block_content pos:start="2973:17" pos:end="2973:47">

                <expr_stmt pos:start="2973:17" pos:end="2973:47"><expr pos:start="2973:17" pos:end="2973:46"><name pos:start="2973:17" pos:end="2973:18">ot</name> <operator pos:start="2973:20" pos:end="2973:20">=</operator> <ternary pos:start="2973:22" pos:end="2973:46"><condition pos:start="2973:22" pos:end="2973:28"><expr pos:start="2973:22" pos:end="2973:26"><name pos:start="2973:22" pos:end="2973:26">dflag</name></expr> ?</condition><then pos:start="2973:30" pos:end="2973:36"> <expr pos:start="2973:30" pos:end="2973:36"><name pos:start="2973:30" pos:end="2973:36">OT_LONG</name></expr> </then><else pos:start="2973:38" pos:end="2973:46">: <expr pos:start="2973:40" pos:end="2973:46"><name pos:start="2973:40" pos:end="2973:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="2975:13" pos:end="2975:51"><expr pos:start="2975:13" pos:end="2975:50"><name pos:start="2975:13" pos:end="2975:48"><name pos:start="2975:13" pos:end="2975:29">gen_op_mov_TN_reg</name><index pos:start="2975:30" pos:end="2975:38">[<expr pos:start="2975:31" pos:end="2975:37"><name pos:start="2975:31" pos:end="2975:37">OT_WORD</name></expr>]</index><index pos:start="2975:39" pos:end="2975:41">[<expr pos:start="2975:40" pos:end="2975:40"><literal type="number" pos:start="2975:40" pos:end="2975:40">0</literal></expr>]</index><index pos:start="2975:42" pos:end="2975:48">[<expr pos:start="2975:43" pos:end="2975:47"><name pos:start="2975:43" pos:end="2975:47">R_EDX</name></expr>]</index></name><operator pos:start="2975:49" pos:end="2975:49">(</operator><operator pos:start="2975:50" pos:end="2975:50">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2977:13" pos:end="2977:46"><expr pos:start="2977:13" pos:end="2977:45"><name pos:start="2977:13" pos:end="2977:43"><name pos:start="2977:13" pos:end="2977:29">gen_op_mov_TN_reg</name><index pos:start="2977:30" pos:end="2977:33">[<expr pos:start="2977:31" pos:end="2977:32"><name pos:start="2977:31" pos:end="2977:32">ot</name></expr>]</index><index pos:start="2977:34" pos:end="2977:36">[<expr pos:start="2977:35" pos:end="2977:35"><literal type="number" pos:start="2977:35" pos:end="2977:35">1</literal></expr>]</index><index pos:start="2977:37" pos:end="2977:43">[<expr pos:start="2977:38" pos:end="2977:42"><name pos:start="2977:38" pos:end="2977:42">R_EAX</name></expr>]</index></name><operator pos:start="2977:44" pos:end="2977:44">(</operator><operator pos:start="2977:45" pos:end="2977:45">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2979:13" pos:end="2979:29"><expr pos:start="2979:13" pos:end="2979:28"><name pos:start="2979:13" pos:end="2979:26"><name pos:start="2979:13" pos:end="2979:22">gen_op_out</name><index pos:start="2979:23" pos:end="2979:26">[<expr pos:start="2979:24" pos:end="2979:25"><name pos:start="2979:24" pos:end="2979:25">ot</name></expr>]</index></name><operator pos:start="2979:27" pos:end="2979:27">(</operator><operator pos:start="2979:28" pos:end="2979:28">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2983:9" pos:end="2983:14">break;</break>



        <comment type="block" format="doxygen" pos:start="2987:9" pos:end="2987:34">/************************/</comment>

        <comment type="block" pos:start="2989:9" pos:end="2989:21">/* control */</comment>

    <case pos:start="2991:5" pos:end="2991:14">case <expr pos:start="2991:10" pos:end="2991:13"><literal type="number" pos:start="2991:10" pos:end="2991:13">0xc2</literal></expr>:</case> <comment type="block" pos:start="2991:16" pos:end="2991:27">/* ret im */</comment>

        <expr_stmt pos:start="2993:9" pos:end="2993:26"><expr pos:start="2993:9" pos:end="2993:25"><name pos:start="2993:9" pos:end="2993:11">val</name> <operator pos:start="2993:13" pos:end="2993:13">=</operator> <call pos:start="2993:15" pos:end="2993:25"><name pos:start="2993:15" pos:end="2993:18">ldsw</name><argument_list pos:start="2993:19" pos:end="2993:25">(<argument pos:start="2993:20" pos:end="2993:24"><expr pos:start="2993:20" pos:end="2993:24"><name pos:start="2993:20" pos:end="2993:24"><name pos:start="2993:20" pos:end="2993:20">s</name><operator pos:start="2993:21" pos:end="2993:22">-&gt;</operator><name pos:start="2993:23" pos:end="2993:24">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2995:9" pos:end="2995:19"><expr pos:start="2995:9" pos:end="2995:18"><name pos:start="2995:9" pos:end="2995:13"><name pos:start="2995:9" pos:end="2995:9">s</name><operator pos:start="2995:10" pos:end="2995:11">-&gt;</operator><name pos:start="2995:12" pos:end="2995:13">pc</name></name> <operator pos:start="2995:15" pos:end="2995:16">+=</operator> <literal type="number" pos:start="2995:18" pos:end="2995:18">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2997:9" pos:end="2997:22"><expr pos:start="2997:9" pos:end="2997:21"><call pos:start="2997:9" pos:end="2997:21"><name pos:start="2997:9" pos:end="2997:18">gen_pop_T0</name><argument_list pos:start="2997:19" pos:end="2997:21">(<argument pos:start="2997:20" pos:end="2997:20"><expr pos:start="2997:20" pos:end="2997:20"><name pos:start="2997:20" pos:end="2997:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2999:9" pos:end="3005:54"><if pos:start="2999:9" pos:end="3001:54">if <condition pos:start="2999:12" pos:end="2999:20">(<expr pos:start="2999:13" pos:end="2999:19"><name pos:start="2999:13" pos:end="2999:19"><name pos:start="2999:13" pos:end="2999:13">s</name><operator pos:start="2999:14" pos:end="2999:15">-&gt;</operator><name pos:start="2999:16" pos:end="2999:19">ss32</name></name></expr>)</condition><block type="pseudo" pos:start="3001:13" pos:end="3001:54"><block_content pos:start="3001:13" pos:end="3001:54">

            <expr_stmt pos:start="3001:13" pos:end="3001:54"><expr pos:start="3001:13" pos:end="3001:53"><call pos:start="3001:13" pos:end="3001:53"><name pos:start="3001:13" pos:end="3001:30">gen_op_addl_ESP_im</name><argument_list pos:start="3001:31" pos:end="3001:53">(<argument pos:start="3001:32" pos:end="3001:52"><expr pos:start="3001:32" pos:end="3001:52"><name pos:start="3001:32" pos:end="3001:34">val</name> <operator pos:start="3001:36" pos:end="3001:36">+</operator> <operator pos:start="3001:38" pos:end="3001:38">(</operator><literal type="number" pos:start="3001:39" pos:end="3001:39">2</literal> <operator pos:start="3001:41" pos:end="3001:42">&lt;&lt;</operator> <name pos:start="3001:44" pos:end="3001:51"><name pos:start="3001:44" pos:end="3001:44">s</name><operator pos:start="3001:45" pos:end="3001:46">-&gt;</operator><name pos:start="3001:47" pos:end="3001:51">dflag</name></name><operator pos:start="3001:52" pos:end="3001:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3003:9" pos:end="3005:54">else<block type="pseudo" pos:start="3005:13" pos:end="3005:54"><block_content pos:start="3005:13" pos:end="3005:54">

            <expr_stmt pos:start="3005:13" pos:end="3005:54"><expr pos:start="3005:13" pos:end="3005:53"><call pos:start="3005:13" pos:end="3005:53"><name pos:start="3005:13" pos:end="3005:30">gen_op_addw_ESP_im</name><argument_list pos:start="3005:31" pos:end="3005:53">(<argument pos:start="3005:32" pos:end="3005:52"><expr pos:start="3005:32" pos:end="3005:52"><name pos:start="3005:32" pos:end="3005:34">val</name> <operator pos:start="3005:36" pos:end="3005:36">+</operator> <operator pos:start="3005:38" pos:end="3005:38">(</operator><literal type="number" pos:start="3005:39" pos:end="3005:39">2</literal> <operator pos:start="3005:41" pos:end="3005:42">&lt;&lt;</operator> <name pos:start="3005:44" pos:end="3005:51"><name pos:start="3005:44" pos:end="3005:44">s</name><operator pos:start="3005:45" pos:end="3005:46">-&gt;</operator><name pos:start="3005:47" pos:end="3005:51">dflag</name></name><operator pos:start="3005:52" pos:end="3005:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="3007:9" pos:end="3009:34"><if pos:start="3007:9" pos:end="3009:34">if <condition pos:start="3007:12" pos:end="3007:26">(<expr pos:start="3007:13" pos:end="3007:25"><name pos:start="3007:13" pos:end="3007:20"><name pos:start="3007:13" pos:end="3007:13">s</name><operator pos:start="3007:14" pos:end="3007:15">-&gt;</operator><name pos:start="3007:16" pos:end="3007:20">dflag</name></name> <operator pos:start="3007:22" pos:end="3007:23">==</operator> <literal type="number" pos:start="3007:25" pos:end="3007:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3009:13" pos:end="3009:34"><block_content pos:start="3009:13" pos:end="3009:34">

            <expr_stmt pos:start="3009:13" pos:end="3009:34"><expr pos:start="3009:13" pos:end="3009:33"><call pos:start="3009:13" pos:end="3009:33"><name pos:start="3009:13" pos:end="3009:31">gen_op_andl_T0_ffff</name><argument_list pos:start="3009:32" pos:end="3009:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3011:9" pos:end="3011:24"><expr pos:start="3011:9" pos:end="3011:23"><call pos:start="3011:9" pos:end="3011:23"><name pos:start="3011:9" pos:end="3011:21">gen_op_jmp_T0</name><argument_list pos:start="3011:22" pos:end="3011:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3013:9" pos:end="3013:22"><expr pos:start="3013:9" pos:end="3013:21"><name pos:start="3013:9" pos:end="3013:17"><name pos:start="3013:9" pos:end="3013:9">s</name><operator pos:start="3013:10" pos:end="3013:11">-&gt;</operator><name pos:start="3013:12" pos:end="3013:17">is_jmp</name></name> <operator pos:start="3013:19" pos:end="3013:19">=</operator> <literal type="number" pos:start="3013:21" pos:end="3013:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3015:9" pos:end="3015:14">break;</break>

    <case pos:start="3017:5" pos:end="3017:14">case <expr pos:start="3017:10" pos:end="3017:13"><literal type="number" pos:start="3017:10" pos:end="3017:13">0xc3</literal></expr>:</case> <comment type="block" pos:start="3017:16" pos:end="3017:24">/* ret */</comment>

        <expr_stmt pos:start="3019:9" pos:end="3019:22"><expr pos:start="3019:9" pos:end="3019:21"><call pos:start="3019:9" pos:end="3019:21"><name pos:start="3019:9" pos:end="3019:18">gen_pop_T0</name><argument_list pos:start="3019:19" pos:end="3019:21">(<argument pos:start="3019:20" pos:end="3019:20"><expr pos:start="3019:20" pos:end="3019:20"><name pos:start="3019:20" pos:end="3019:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3021:9" pos:end="3021:26"><expr pos:start="3021:9" pos:end="3021:25"><call pos:start="3021:9" pos:end="3021:25"><name pos:start="3021:9" pos:end="3021:22">gen_pop_update</name><argument_list pos:start="3021:23" pos:end="3021:25">(<argument pos:start="3021:24" pos:end="3021:24"><expr pos:start="3021:24" pos:end="3021:24"><name pos:start="3021:24" pos:end="3021:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3023:9" pos:end="3025:34"><if pos:start="3023:9" pos:end="3025:34">if <condition pos:start="3023:12" pos:end="3023:26">(<expr pos:start="3023:13" pos:end="3023:25"><name pos:start="3023:13" pos:end="3023:20"><name pos:start="3023:13" pos:end="3023:13">s</name><operator pos:start="3023:14" pos:end="3023:15">-&gt;</operator><name pos:start="3023:16" pos:end="3023:20">dflag</name></name> <operator pos:start="3023:22" pos:end="3023:23">==</operator> <literal type="number" pos:start="3023:25" pos:end="3023:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3025:13" pos:end="3025:34"><block_content pos:start="3025:13" pos:end="3025:34">

            <expr_stmt pos:start="3025:13" pos:end="3025:34"><expr pos:start="3025:13" pos:end="3025:33"><call pos:start="3025:13" pos:end="3025:33"><name pos:start="3025:13" pos:end="3025:31">gen_op_andl_T0_ffff</name><argument_list pos:start="3025:32" pos:end="3025:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3027:9" pos:end="3027:24"><expr pos:start="3027:9" pos:end="3027:23"><call pos:start="3027:9" pos:end="3027:23"><name pos:start="3027:9" pos:end="3027:21">gen_op_jmp_T0</name><argument_list pos:start="3027:22" pos:end="3027:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3029:9" pos:end="3029:22"><expr pos:start="3029:9" pos:end="3029:21"><name pos:start="3029:9" pos:end="3029:17"><name pos:start="3029:9" pos:end="3029:9">s</name><operator pos:start="3029:10" pos:end="3029:11">-&gt;</operator><name pos:start="3029:12" pos:end="3029:17">is_jmp</name></name> <operator pos:start="3029:19" pos:end="3029:19">=</operator> <literal type="number" pos:start="3029:21" pos:end="3029:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3031:9" pos:end="3031:14">break;</break>

    <case pos:start="3033:5" pos:end="3033:14">case <expr pos:start="3033:10" pos:end="3033:13"><literal type="number" pos:start="3033:10" pos:end="3033:13">0xca</literal></expr>:</case> <comment type="block" pos:start="3033:16" pos:end="3033:28">/* lret im */</comment>

        <comment type="block" pos:start="3035:9" pos:end="3035:34">/* XXX: not restartable */</comment>

        <expr_stmt pos:start="3037:9" pos:end="3037:26"><expr pos:start="3037:9" pos:end="3037:25"><name pos:start="3037:9" pos:end="3037:11">val</name> <operator pos:start="3037:13" pos:end="3037:13">=</operator> <call pos:start="3037:15" pos:end="3037:25"><name pos:start="3037:15" pos:end="3037:18">ldsw</name><argument_list pos:start="3037:19" pos:end="3037:25">(<argument pos:start="3037:20" pos:end="3037:24"><expr pos:start="3037:20" pos:end="3037:24"><name pos:start="3037:20" pos:end="3037:24"><name pos:start="3037:20" pos:end="3037:20">s</name><operator pos:start="3037:21" pos:end="3037:22">-&gt;</operator><name pos:start="3037:23" pos:end="3037:24">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3039:9" pos:end="3039:19"><expr pos:start="3039:9" pos:end="3039:18"><name pos:start="3039:9" pos:end="3039:13"><name pos:start="3039:9" pos:end="3039:9">s</name><operator pos:start="3039:10" pos:end="3039:11">-&gt;</operator><name pos:start="3039:12" pos:end="3039:13">pc</name></name> <operator pos:start="3039:15" pos:end="3039:16">+=</operator> <literal type="number" pos:start="3039:18" pos:end="3039:18">2</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="3041:9" pos:end="3041:24">/* pop offset */</comment>

        <expr_stmt pos:start="3043:9" pos:end="3043:22"><expr pos:start="3043:9" pos:end="3043:21"><call pos:start="3043:9" pos:end="3043:21"><name pos:start="3043:9" pos:end="3043:18">gen_pop_T0</name><argument_list pos:start="3043:19" pos:end="3043:21">(<argument pos:start="3043:20" pos:end="3043:20"><expr pos:start="3043:20" pos:end="3043:20"><name pos:start="3043:20" pos:end="3043:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3045:9" pos:end="3047:34"><if pos:start="3045:9" pos:end="3047:34">if <condition pos:start="3045:12" pos:end="3045:26">(<expr pos:start="3045:13" pos:end="3045:25"><name pos:start="3045:13" pos:end="3045:20"><name pos:start="3045:13" pos:end="3045:13">s</name><operator pos:start="3045:14" pos:end="3045:15">-&gt;</operator><name pos:start="3045:16" pos:end="3045:20">dflag</name></name> <operator pos:start="3045:22" pos:end="3045:23">==</operator> <literal type="number" pos:start="3045:25" pos:end="3045:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3047:13" pos:end="3047:34"><block_content pos:start="3047:13" pos:end="3047:34">

            <expr_stmt pos:start="3047:13" pos:end="3047:34"><expr pos:start="3047:13" pos:end="3047:33"><call pos:start="3047:13" pos:end="3047:33"><name pos:start="3047:13" pos:end="3047:31">gen_op_andl_T0_ffff</name><argument_list pos:start="3047:32" pos:end="3047:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3049:9" pos:end="3049:24"><expr pos:start="3049:9" pos:end="3049:23"><call pos:start="3049:9" pos:end="3049:23"><name pos:start="3049:9" pos:end="3049:21">gen_op_jmp_T0</name><argument_list pos:start="3049:22" pos:end="3049:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3051:9" pos:end="3051:26"><expr pos:start="3051:9" pos:end="3051:25"><call pos:start="3051:9" pos:end="3051:25"><name pos:start="3051:9" pos:end="3051:22">gen_pop_update</name><argument_list pos:start="3051:23" pos:end="3051:25">(<argument pos:start="3051:24" pos:end="3051:24"><expr pos:start="3051:24" pos:end="3051:24"><name pos:start="3051:24" pos:end="3051:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="3053:9" pos:end="3053:26">/* pop selector */</comment>

        <expr_stmt pos:start="3055:9" pos:end="3055:22"><expr pos:start="3055:9" pos:end="3055:21"><call pos:start="3055:9" pos:end="3055:21"><name pos:start="3055:9" pos:end="3055:18">gen_pop_T0</name><argument_list pos:start="3055:19" pos:end="3055:21">(<argument pos:start="3055:20" pos:end="3055:20"><expr pos:start="3055:20" pos:end="3055:20"><name pos:start="3055:20" pos:end="3055:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3057:9" pos:end="3057:33"><expr pos:start="3057:9" pos:end="3057:32"><call pos:start="3057:9" pos:end="3057:32"><name pos:start="3057:9" pos:end="3057:23">gen_movl_seg_T0</name><argument_list pos:start="3057:24" pos:end="3057:32">(<argument pos:start="3057:25" pos:end="3057:25"><expr pos:start="3057:25" pos:end="3057:25"><name pos:start="3057:25" pos:end="3057:25">s</name></expr></argument>, <argument pos:start="3057:28" pos:end="3057:31"><expr pos:start="3057:28" pos:end="3057:31"><name pos:start="3057:28" pos:end="3057:31">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3059:9" pos:end="3059:26"><expr pos:start="3059:9" pos:end="3059:25"><call pos:start="3059:9" pos:end="3059:25"><name pos:start="3059:9" pos:end="3059:22">gen_pop_update</name><argument_list pos:start="3059:23" pos:end="3059:25">(<argument pos:start="3059:24" pos:end="3059:24"><expr pos:start="3059:24" pos:end="3059:24"><name pos:start="3059:24" pos:end="3059:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="3061:9" pos:end="3061:30">/* add stack offset */</comment>

        <if_stmt pos:start="3063:9" pos:end="3069:54"><if pos:start="3063:9" pos:end="3065:54">if <condition pos:start="3063:12" pos:end="3063:20">(<expr pos:start="3063:13" pos:end="3063:19"><name pos:start="3063:13" pos:end="3063:19"><name pos:start="3063:13" pos:end="3063:13">s</name><operator pos:start="3063:14" pos:end="3063:15">-&gt;</operator><name pos:start="3063:16" pos:end="3063:19">ss32</name></name></expr>)</condition><block type="pseudo" pos:start="3065:13" pos:end="3065:54"><block_content pos:start="3065:13" pos:end="3065:54">

            <expr_stmt pos:start="3065:13" pos:end="3065:54"><expr pos:start="3065:13" pos:end="3065:53"><call pos:start="3065:13" pos:end="3065:53"><name pos:start="3065:13" pos:end="3065:30">gen_op_addl_ESP_im</name><argument_list pos:start="3065:31" pos:end="3065:53">(<argument pos:start="3065:32" pos:end="3065:52"><expr pos:start="3065:32" pos:end="3065:52"><name pos:start="3065:32" pos:end="3065:34">val</name> <operator pos:start="3065:36" pos:end="3065:36">+</operator> <operator pos:start="3065:38" pos:end="3065:38">(</operator><literal type="number" pos:start="3065:39" pos:end="3065:39">2</literal> <operator pos:start="3065:41" pos:end="3065:42">&lt;&lt;</operator> <name pos:start="3065:44" pos:end="3065:51"><name pos:start="3065:44" pos:end="3065:44">s</name><operator pos:start="3065:45" pos:end="3065:46">-&gt;</operator><name pos:start="3065:47" pos:end="3065:51">dflag</name></name><operator pos:start="3065:52" pos:end="3065:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3067:9" pos:end="3069:54">else<block type="pseudo" pos:start="3069:13" pos:end="3069:54"><block_content pos:start="3069:13" pos:end="3069:54">

            <expr_stmt pos:start="3069:13" pos:end="3069:54"><expr pos:start="3069:13" pos:end="3069:53"><call pos:start="3069:13" pos:end="3069:53"><name pos:start="3069:13" pos:end="3069:30">gen_op_addw_ESP_im</name><argument_list pos:start="3069:31" pos:end="3069:53">(<argument pos:start="3069:32" pos:end="3069:52"><expr pos:start="3069:32" pos:end="3069:52"><name pos:start="3069:32" pos:end="3069:34">val</name> <operator pos:start="3069:36" pos:end="3069:36">+</operator> <operator pos:start="3069:38" pos:end="3069:38">(</operator><literal type="number" pos:start="3069:39" pos:end="3069:39">2</literal> <operator pos:start="3069:41" pos:end="3069:42">&lt;&lt;</operator> <name pos:start="3069:44" pos:end="3069:51"><name pos:start="3069:44" pos:end="3069:44">s</name><operator pos:start="3069:45" pos:end="3069:46">-&gt;</operator><name pos:start="3069:47" pos:end="3069:51">dflag</name></name><operator pos:start="3069:52" pos:end="3069:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3071:9" pos:end="3071:22"><expr pos:start="3071:9" pos:end="3071:21"><name pos:start="3071:9" pos:end="3071:17"><name pos:start="3071:9" pos:end="3071:9">s</name><operator pos:start="3071:10" pos:end="3071:11">-&gt;</operator><name pos:start="3071:12" pos:end="3071:17">is_jmp</name></name> <operator pos:start="3071:19" pos:end="3071:19">=</operator> <literal type="number" pos:start="3071:21" pos:end="3071:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3073:9" pos:end="3073:14">break;</break>

    <case pos:start="3075:5" pos:end="3075:14">case <expr pos:start="3075:10" pos:end="3075:13"><literal type="number" pos:start="3075:10" pos:end="3075:13">0xcb</literal></expr>:</case> <comment type="block" pos:start="3075:16" pos:end="3075:25">/* lret */</comment>

        <comment type="block" pos:start="3077:9" pos:end="3077:34">/* XXX: not restartable */</comment>

        <comment type="block" pos:start="3079:9" pos:end="3079:24">/* pop offset */</comment>

        <expr_stmt pos:start="3081:9" pos:end="3081:22"><expr pos:start="3081:9" pos:end="3081:21"><call pos:start="3081:9" pos:end="3081:21"><name pos:start="3081:9" pos:end="3081:18">gen_pop_T0</name><argument_list pos:start="3081:19" pos:end="3081:21">(<argument pos:start="3081:20" pos:end="3081:20"><expr pos:start="3081:20" pos:end="3081:20"><name pos:start="3081:20" pos:end="3081:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3083:9" pos:end="3085:34"><if pos:start="3083:9" pos:end="3085:34">if <condition pos:start="3083:12" pos:end="3083:26">(<expr pos:start="3083:13" pos:end="3083:25"><name pos:start="3083:13" pos:end="3083:20"><name pos:start="3083:13" pos:end="3083:13">s</name><operator pos:start="3083:14" pos:end="3083:15">-&gt;</operator><name pos:start="3083:16" pos:end="3083:20">dflag</name></name> <operator pos:start="3083:22" pos:end="3083:23">==</operator> <literal type="number" pos:start="3083:25" pos:end="3083:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3085:13" pos:end="3085:34"><block_content pos:start="3085:13" pos:end="3085:34">

            <expr_stmt pos:start="3085:13" pos:end="3085:34"><expr pos:start="3085:13" pos:end="3085:33"><call pos:start="3085:13" pos:end="3085:33"><name pos:start="3085:13" pos:end="3085:31">gen_op_andl_T0_ffff</name><argument_list pos:start="3085:32" pos:end="3085:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3087:9" pos:end="3087:24"><expr pos:start="3087:9" pos:end="3087:23"><call pos:start="3087:9" pos:end="3087:23"><name pos:start="3087:9" pos:end="3087:21">gen_op_jmp_T0</name><argument_list pos:start="3087:22" pos:end="3087:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3089:9" pos:end="3089:26"><expr pos:start="3089:9" pos:end="3089:25"><call pos:start="3089:9" pos:end="3089:25"><name pos:start="3089:9" pos:end="3089:22">gen_pop_update</name><argument_list pos:start="3089:23" pos:end="3089:25">(<argument pos:start="3089:24" pos:end="3089:24"><expr pos:start="3089:24" pos:end="3089:24"><name pos:start="3089:24" pos:end="3089:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="3091:9" pos:end="3091:26">/* pop selector */</comment>

        <expr_stmt pos:start="3093:9" pos:end="3093:22"><expr pos:start="3093:9" pos:end="3093:21"><call pos:start="3093:9" pos:end="3093:21"><name pos:start="3093:9" pos:end="3093:18">gen_pop_T0</name><argument_list pos:start="3093:19" pos:end="3093:21">(<argument pos:start="3093:20" pos:end="3093:20"><expr pos:start="3093:20" pos:end="3093:20"><name pos:start="3093:20" pos:end="3093:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3095:9" pos:end="3095:33"><expr pos:start="3095:9" pos:end="3095:32"><call pos:start="3095:9" pos:end="3095:32"><name pos:start="3095:9" pos:end="3095:23">gen_movl_seg_T0</name><argument_list pos:start="3095:24" pos:end="3095:32">(<argument pos:start="3095:25" pos:end="3095:25"><expr pos:start="3095:25" pos:end="3095:25"><name pos:start="3095:25" pos:end="3095:25">s</name></expr></argument>, <argument pos:start="3095:28" pos:end="3095:31"><expr pos:start="3095:28" pos:end="3095:31"><name pos:start="3095:28" pos:end="3095:31">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3097:9" pos:end="3097:26"><expr pos:start="3097:9" pos:end="3097:25"><call pos:start="3097:9" pos:end="3097:25"><name pos:start="3097:9" pos:end="3097:22">gen_pop_update</name><argument_list pos:start="3097:23" pos:end="3097:25">(<argument pos:start="3097:24" pos:end="3097:24"><expr pos:start="3097:24" pos:end="3097:24"><name pos:start="3097:24" pos:end="3097:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3099:9" pos:end="3099:22"><expr pos:start="3099:9" pos:end="3099:21"><name pos:start="3099:9" pos:end="3099:17"><name pos:start="3099:9" pos:end="3099:9">s</name><operator pos:start="3099:10" pos:end="3099:11">-&gt;</operator><name pos:start="3099:12" pos:end="3099:17">is_jmp</name></name> <operator pos:start="3099:19" pos:end="3099:19">=</operator> <literal type="number" pos:start="3099:21" pos:end="3099:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3101:9" pos:end="3101:14">break;</break>

    <case pos:start="3103:5" pos:end="3103:14">case <expr pos:start="3103:10" pos:end="3103:13"><literal type="number" pos:start="3103:10" pos:end="3103:13">0xcf</literal></expr>:</case> <comment type="block" pos:start="3103:16" pos:end="3103:25">/* iret */</comment>

        <comment type="block" pos:start="3105:9" pos:end="3105:34">/* XXX: not restartable */</comment>

        <comment type="block" pos:start="3107:9" pos:end="3107:24">/* pop offset */</comment>

        <expr_stmt pos:start="3109:9" pos:end="3109:22"><expr pos:start="3109:9" pos:end="3109:21"><call pos:start="3109:9" pos:end="3109:21"><name pos:start="3109:9" pos:end="3109:18">gen_pop_T0</name><argument_list pos:start="3109:19" pos:end="3109:21">(<argument pos:start="3109:20" pos:end="3109:20"><expr pos:start="3109:20" pos:end="3109:20"><name pos:start="3109:20" pos:end="3109:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3111:9" pos:end="3113:34"><if pos:start="3111:9" pos:end="3113:34">if <condition pos:start="3111:12" pos:end="3111:26">(<expr pos:start="3111:13" pos:end="3111:25"><name pos:start="3111:13" pos:end="3111:20"><name pos:start="3111:13" pos:end="3111:13">s</name><operator pos:start="3111:14" pos:end="3111:15">-&gt;</operator><name pos:start="3111:16" pos:end="3111:20">dflag</name></name> <operator pos:start="3111:22" pos:end="3111:23">==</operator> <literal type="number" pos:start="3111:25" pos:end="3111:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3113:13" pos:end="3113:34"><block_content pos:start="3113:13" pos:end="3113:34">

            <expr_stmt pos:start="3113:13" pos:end="3113:34"><expr pos:start="3113:13" pos:end="3113:33"><call pos:start="3113:13" pos:end="3113:33"><name pos:start="3113:13" pos:end="3113:31">gen_op_andl_T0_ffff</name><argument_list pos:start="3113:32" pos:end="3113:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3115:9" pos:end="3115:24"><expr pos:start="3115:9" pos:end="3115:23"><call pos:start="3115:9" pos:end="3115:23"><name pos:start="3115:9" pos:end="3115:21">gen_op_jmp_T0</name><argument_list pos:start="3115:22" pos:end="3115:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3117:9" pos:end="3117:26"><expr pos:start="3117:9" pos:end="3117:25"><call pos:start="3117:9" pos:end="3117:25"><name pos:start="3117:9" pos:end="3117:22">gen_pop_update</name><argument_list pos:start="3117:23" pos:end="3117:25">(<argument pos:start="3117:24" pos:end="3117:24"><expr pos:start="3117:24" pos:end="3117:24"><name pos:start="3117:24" pos:end="3117:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="3119:9" pos:end="3119:26">/* pop selector */</comment>

        <expr_stmt pos:start="3121:9" pos:end="3121:22"><expr pos:start="3121:9" pos:end="3121:21"><call pos:start="3121:9" pos:end="3121:21"><name pos:start="3121:9" pos:end="3121:18">gen_pop_T0</name><argument_list pos:start="3121:19" pos:end="3121:21">(<argument pos:start="3121:20" pos:end="3121:20"><expr pos:start="3121:20" pos:end="3121:20"><name pos:start="3121:20" pos:end="3121:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3123:9" pos:end="3123:33"><expr pos:start="3123:9" pos:end="3123:32"><call pos:start="3123:9" pos:end="3123:32"><name pos:start="3123:9" pos:end="3123:23">gen_movl_seg_T0</name><argument_list pos:start="3123:24" pos:end="3123:32">(<argument pos:start="3123:25" pos:end="3123:25"><expr pos:start="3123:25" pos:end="3123:25"><name pos:start="3123:25" pos:end="3123:25">s</name></expr></argument>, <argument pos:start="3123:28" pos:end="3123:31"><expr pos:start="3123:28" pos:end="3123:31"><name pos:start="3123:28" pos:end="3123:31">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3125:9" pos:end="3125:26"><expr pos:start="3125:9" pos:end="3125:25"><call pos:start="3125:9" pos:end="3125:25"><name pos:start="3125:9" pos:end="3125:22">gen_pop_update</name><argument_list pos:start="3125:23" pos:end="3125:25">(<argument pos:start="3125:24" pos:end="3125:24"><expr pos:start="3125:24" pos:end="3125:24"><name pos:start="3125:24" pos:end="3125:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="3127:9" pos:end="3127:24">/* pop eflags */</comment>

        <expr_stmt pos:start="3129:9" pos:end="3129:22"><expr pos:start="3129:9" pos:end="3129:21"><call pos:start="3129:9" pos:end="3129:21"><name pos:start="3129:9" pos:end="3129:18">gen_pop_T0</name><argument_list pos:start="3129:19" pos:end="3129:21">(<argument pos:start="3129:20" pos:end="3129:20"><expr pos:start="3129:20" pos:end="3129:20"><name pos:start="3129:20" pos:end="3129:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3131:9" pos:end="3151:9"><if pos:start="3131:9" pos:end="3141:9">if <condition pos:start="3131:12" pos:end="3131:21">(<expr pos:start="3131:13" pos:end="3131:20"><name pos:start="3131:13" pos:end="3131:20"><name pos:start="3131:13" pos:end="3131:13">s</name><operator pos:start="3131:14" pos:end="3131:15">-&gt;</operator><name pos:start="3131:16" pos:end="3131:20">dflag</name></name></expr>)</condition> <block pos:start="3131:23" pos:end="3141:9">{<block_content pos:start="3133:13" pos:end="3139:40">

            <if_stmt pos:start="3133:13" pos:end="3139:40"><if pos:start="3133:13" pos:end="3135:64">if <condition pos:start="3133:16" pos:end="3133:24">(<expr pos:start="3133:17" pos:end="3133:23"><name pos:start="3133:17" pos:end="3133:23"><name pos:start="3133:17" pos:end="3133:17">s</name><operator pos:start="3133:18" pos:end="3133:19">-&gt;</operator><name pos:start="3133:20" pos:end="3133:23">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="3135:17" pos:end="3135:64"><block_content pos:start="3135:17" pos:end="3135:64">

                <expr_stmt pos:start="3135:17" pos:end="3135:64"><expr pos:start="3135:17" pos:end="3135:63"><call pos:start="3135:17" pos:end="3135:63"><name pos:start="3135:17" pos:end="3135:40">gen_op_movl_eflags_T0_vm</name><argument_list pos:start="3135:41" pos:end="3135:63">(<argument pos:start="3135:42" pos:end="3135:62"><expr pos:start="3135:42" pos:end="3135:62"><name pos:start="3135:42" pos:end="3135:49">pc_start</name> <operator pos:start="3135:51" pos:end="3135:51">-</operator> <name pos:start="3135:53" pos:end="3135:62"><name pos:start="3135:53" pos:end="3135:53">s</name><operator pos:start="3135:54" pos:end="3135:55">-&gt;</operator><name pos:start="3135:56" pos:end="3135:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3137:13" pos:end="3139:40">else<block type="pseudo" pos:start="3139:17" pos:end="3139:40"><block_content pos:start="3139:17" pos:end="3139:40">

                <expr_stmt pos:start="3139:17" pos:end="3139:40"><expr pos:start="3139:17" pos:end="3139:39"><call pos:start="3139:17" pos:end="3139:39"><name pos:start="3139:17" pos:end="3139:37">gen_op_movl_eflags_T0</name><argument_list pos:start="3139:38" pos:end="3139:39">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="3141:11" pos:end="3151:9">else <block pos:start="3141:16" pos:end="3151:9">{<block_content pos:start="3143:13" pos:end="3149:40">

            <if_stmt pos:start="3143:13" pos:end="3149:40"><if pos:start="3143:13" pos:end="3145:64">if <condition pos:start="3143:16" pos:end="3143:24">(<expr pos:start="3143:17" pos:end="3143:23"><name pos:start="3143:17" pos:end="3143:23"><name pos:start="3143:17" pos:end="3143:17">s</name><operator pos:start="3143:18" pos:end="3143:19">-&gt;</operator><name pos:start="3143:20" pos:end="3143:23">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="3145:17" pos:end="3145:64"><block_content pos:start="3145:17" pos:end="3145:64">

                <expr_stmt pos:start="3145:17" pos:end="3145:64"><expr pos:start="3145:17" pos:end="3145:63"><call pos:start="3145:17" pos:end="3145:63"><name pos:start="3145:17" pos:end="3145:40">gen_op_movw_eflags_T0_vm</name><argument_list pos:start="3145:41" pos:end="3145:63">(<argument pos:start="3145:42" pos:end="3145:62"><expr pos:start="3145:42" pos:end="3145:62"><name pos:start="3145:42" pos:end="3145:49">pc_start</name> <operator pos:start="3145:51" pos:end="3145:51">-</operator> <name pos:start="3145:53" pos:end="3145:62"><name pos:start="3145:53" pos:end="3145:53">s</name><operator pos:start="3145:54" pos:end="3145:55">-&gt;</operator><name pos:start="3145:56" pos:end="3145:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3147:13" pos:end="3149:40">else<block type="pseudo" pos:start="3149:17" pos:end="3149:40"><block_content pos:start="3149:17" pos:end="3149:40">

                <expr_stmt pos:start="3149:17" pos:end="3149:40"><expr pos:start="3149:17" pos:end="3149:39"><call pos:start="3149:17" pos:end="3149:39"><name pos:start="3149:17" pos:end="3149:37">gen_op_movw_eflags_T0</name><argument_list pos:start="3149:38" pos:end="3149:39">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="3153:9" pos:end="3153:26"><expr pos:start="3153:9" pos:end="3153:25"><call pos:start="3153:9" pos:end="3153:25"><name pos:start="3153:9" pos:end="3153:22">gen_pop_update</name><argument_list pos:start="3153:23" pos:end="3153:25">(<argument pos:start="3153:24" pos:end="3153:24"><expr pos:start="3153:24" pos:end="3153:24"><name pos:start="3153:24" pos:end="3153:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3155:9" pos:end="3155:32"><expr pos:start="3155:9" pos:end="3155:31"><name pos:start="3155:9" pos:end="3155:16"><name pos:start="3155:9" pos:end="3155:9">s</name><operator pos:start="3155:10" pos:end="3155:11">-&gt;</operator><name pos:start="3155:12" pos:end="3155:16">cc_op</name></name> <operator pos:start="3155:18" pos:end="3155:18">=</operator> <name pos:start="3155:20" pos:end="3155:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="3157:9" pos:end="3157:22"><expr pos:start="3157:9" pos:end="3157:21"><name pos:start="3157:9" pos:end="3157:17"><name pos:start="3157:9" pos:end="3157:9">s</name><operator pos:start="3157:10" pos:end="3157:11">-&gt;</operator><name pos:start="3157:12" pos:end="3157:17">is_jmp</name></name> <operator pos:start="3157:19" pos:end="3157:19">=</operator> <literal type="number" pos:start="3157:21" pos:end="3157:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3159:9" pos:end="3159:14">break;</break>

    <case pos:start="3161:5" pos:end="3161:14">case <expr pos:start="3161:10" pos:end="3161:13"><literal type="number" pos:start="3161:10" pos:end="3161:13">0xe8</literal></expr>:</case> <comment type="block" pos:start="3161:16" pos:end="3161:28">/* call im */</comment>

        <block pos:start="3163:9" pos:end="3187:9">{<block_content pos:start="3165:13" pos:end="3185:26">

            <decl_stmt pos:start="3165:13" pos:end="3165:34"><decl pos:start="3165:13" pos:end="3165:33"><type pos:start="3165:13" pos:end="3165:24"><name pos:start="3165:13" pos:end="3165:20">unsigned</name> <name pos:start="3165:22" pos:end="3165:24">int</name></type> <name pos:start="3165:26" pos:end="3165:33">next_eip</name></decl>;</decl_stmt>

            <expr_stmt pos:start="3167:13" pos:end="3167:43"><expr pos:start="3167:13" pos:end="3167:42"><name pos:start="3167:13" pos:end="3167:14">ot</name> <operator pos:start="3167:16" pos:end="3167:16">=</operator> <ternary pos:start="3167:18" pos:end="3167:42"><condition pos:start="3167:18" pos:end="3167:24"><expr pos:start="3167:18" pos:end="3167:22"><name pos:start="3167:18" pos:end="3167:22">dflag</name></expr> ?</condition><then pos:start="3167:26" pos:end="3167:32"> <expr pos:start="3167:26" pos:end="3167:32"><name pos:start="3167:26" pos:end="3167:32">OT_LONG</name></expr> </then><else pos:start="3167:34" pos:end="3167:42">: <expr pos:start="3167:36" pos:end="3167:42"><name pos:start="3167:36" pos:end="3167:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="3169:13" pos:end="3169:34"><expr pos:start="3169:13" pos:end="3169:33"><name pos:start="3169:13" pos:end="3169:15">val</name> <operator pos:start="3169:17" pos:end="3169:17">=</operator> <call pos:start="3169:19" pos:end="3169:33"><name pos:start="3169:19" pos:end="3169:26">insn_get</name><argument_list pos:start="3169:27" pos:end="3169:33">(<argument pos:start="3169:28" pos:end="3169:28"><expr pos:start="3169:28" pos:end="3169:28"><name pos:start="3169:28" pos:end="3169:28">s</name></expr></argument>, <argument pos:start="3169:31" pos:end="3169:32"><expr pos:start="3169:31" pos:end="3169:32"><name pos:start="3169:31" pos:end="3169:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3171:13" pos:end="3171:42"><expr pos:start="3171:13" pos:end="3171:41"><name pos:start="3171:13" pos:end="3171:20">next_eip</name> <operator pos:start="3171:22" pos:end="3171:22">=</operator> <name pos:start="3171:24" pos:end="3171:28"><name pos:start="3171:24" pos:end="3171:24">s</name><operator pos:start="3171:25" pos:end="3171:26">-&gt;</operator><name pos:start="3171:27" pos:end="3171:28">pc</name></name> <operator pos:start="3171:30" pos:end="3171:30">-</operator> <name pos:start="3171:32" pos:end="3171:41"><name pos:start="3171:32" pos:end="3171:32">s</name><operator pos:start="3171:33" pos:end="3171:34">-&gt;</operator><name pos:start="3171:35" pos:end="3171:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="3173:13" pos:end="3173:28"><expr pos:start="3173:13" pos:end="3173:27"><name pos:start="3173:13" pos:end="3173:15">val</name> <operator pos:start="3173:17" pos:end="3173:18">+=</operator> <name pos:start="3173:20" pos:end="3173:27">next_eip</name></expr>;</expr_stmt>

            <if_stmt pos:start="3175:13" pos:end="3177:30"><if pos:start="3175:13" pos:end="3177:30">if <condition pos:start="3175:16" pos:end="3175:30">(<expr pos:start="3175:17" pos:end="3175:29"><name pos:start="3175:17" pos:end="3175:24"><name pos:start="3175:17" pos:end="3175:17">s</name><operator pos:start="3175:18" pos:end="3175:19">-&gt;</operator><name pos:start="3175:20" pos:end="3175:24">dflag</name></name> <operator pos:start="3175:26" pos:end="3175:27">==</operator> <literal type="number" pos:start="3175:29" pos:end="3175:29">0</literal></expr>)</condition><block type="pseudo" pos:start="3177:17" pos:end="3177:30"><block_content pos:start="3177:17" pos:end="3177:30">

                <expr_stmt pos:start="3177:17" pos:end="3177:30"><expr pos:start="3177:17" pos:end="3177:29"><name pos:start="3177:17" pos:end="3177:19">val</name> <operator pos:start="3177:21" pos:end="3177:22">&amp;=</operator> <literal type="number" pos:start="3177:24" pos:end="3177:29">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3179:13" pos:end="3179:40"><expr pos:start="3179:13" pos:end="3179:39"><call pos:start="3179:13" pos:end="3179:39"><name pos:start="3179:13" pos:end="3179:29">gen_op_movl_T0_im</name><argument_list pos:start="3179:30" pos:end="3179:39">(<argument pos:start="3179:31" pos:end="3179:38"><expr pos:start="3179:31" pos:end="3179:38"><name pos:start="3179:31" pos:end="3179:38">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3181:13" pos:end="3181:27"><expr pos:start="3181:13" pos:end="3181:26"><call pos:start="3181:13" pos:end="3181:26"><name pos:start="3181:13" pos:end="3181:23">gen_push_T0</name><argument_list pos:start="3181:24" pos:end="3181:26">(<argument pos:start="3181:25" pos:end="3181:25"><expr pos:start="3181:25" pos:end="3181:25"><name pos:start="3181:25" pos:end="3181:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3183:13" pos:end="3183:31"><expr pos:start="3183:13" pos:end="3183:30"><call pos:start="3183:13" pos:end="3183:30"><name pos:start="3183:13" pos:end="3183:25">gen_op_jmp_im</name><argument_list pos:start="3183:26" pos:end="3183:30">(<argument pos:start="3183:27" pos:end="3183:29"><expr pos:start="3183:27" pos:end="3183:29"><name pos:start="3183:27" pos:end="3183:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3185:13" pos:end="3185:26"><expr pos:start="3185:13" pos:end="3185:25"><name pos:start="3185:13" pos:end="3185:21"><name pos:start="3185:13" pos:end="3185:13">s</name><operator pos:start="3185:14" pos:end="3185:15">-&gt;</operator><name pos:start="3185:16" pos:end="3185:21">is_jmp</name></name> <operator pos:start="3185:23" pos:end="3185:23">=</operator> <literal type="number" pos:start="3185:25" pos:end="3185:25">1</literal></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="3189:9" pos:end="3189:14">break;</break>

    <case pos:start="3191:5" pos:end="3191:14">case <expr pos:start="3191:10" pos:end="3191:13"><literal type="number" pos:start="3191:10" pos:end="3191:13">0x9a</literal></expr>:</case> <comment type="block" pos:start="3191:16" pos:end="3191:29">/* lcall im */</comment>

        <block pos:start="3193:9" pos:end="3231:9">{<block_content pos:start="3195:13" pos:end="3229:26">

            <decl_stmt pos:start="3195:13" pos:end="3195:42"><decl pos:start="3195:13" pos:end="3195:33"><type pos:start="3195:13" pos:end="3195:24"><name pos:start="3195:13" pos:end="3195:20">unsigned</name> <name pos:start="3195:22" pos:end="3195:24">int</name></type> <name pos:start="3195:26" pos:end="3195:33">selector</name></decl>, <decl pos:start="3195:36" pos:end="3195:41"><type ref="prev" pos:start="3195:13" pos:end="3195:24"/><name pos:start="3195:36" pos:end="3195:41">offset</name></decl>;</decl_stmt>



            <expr_stmt pos:start="3199:13" pos:end="3199:43"><expr pos:start="3199:13" pos:end="3199:42"><name pos:start="3199:13" pos:end="3199:14">ot</name> <operator pos:start="3199:16" pos:end="3199:16">=</operator> <ternary pos:start="3199:18" pos:end="3199:42"><condition pos:start="3199:18" pos:end="3199:24"><expr pos:start="3199:18" pos:end="3199:22"><name pos:start="3199:18" pos:end="3199:22">dflag</name></expr> ?</condition><then pos:start="3199:26" pos:end="3199:32"> <expr pos:start="3199:26" pos:end="3199:32"><name pos:start="3199:26" pos:end="3199:32">OT_LONG</name></expr> </then><else pos:start="3199:34" pos:end="3199:42">: <expr pos:start="3199:36" pos:end="3199:42"><name pos:start="3199:36" pos:end="3199:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="3201:13" pos:end="3201:37"><expr pos:start="3201:13" pos:end="3201:36"><name pos:start="3201:13" pos:end="3201:18">offset</name> <operator pos:start="3201:20" pos:end="3201:20">=</operator> <call pos:start="3201:22" pos:end="3201:36"><name pos:start="3201:22" pos:end="3201:29">insn_get</name><argument_list pos:start="3201:30" pos:end="3201:36">(<argument pos:start="3201:31" pos:end="3201:31"><expr pos:start="3201:31" pos:end="3201:31"><name pos:start="3201:31" pos:end="3201:31">s</name></expr></argument>, <argument pos:start="3201:34" pos:end="3201:35"><expr pos:start="3201:34" pos:end="3201:35"><name pos:start="3201:34" pos:end="3201:35">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3203:13" pos:end="3203:44"><expr pos:start="3203:13" pos:end="3203:43"><name pos:start="3203:13" pos:end="3203:20">selector</name> <operator pos:start="3203:22" pos:end="3203:22">=</operator> <call pos:start="3203:24" pos:end="3203:43"><name pos:start="3203:24" pos:end="3203:31">insn_get</name><argument_list pos:start="3203:32" pos:end="3203:43">(<argument pos:start="3203:33" pos:end="3203:33"><expr pos:start="3203:33" pos:end="3203:33"><name pos:start="3203:33" pos:end="3203:33">s</name></expr></argument>, <argument pos:start="3203:36" pos:end="3203:42"><expr pos:start="3203:36" pos:end="3203:42"><name pos:start="3203:36" pos:end="3203:42">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <comment type="block" pos:start="3207:13" pos:end="3207:46">/* push return segment + offset */</comment>

            <expr_stmt pos:start="3209:13" pos:end="3209:37"><expr pos:start="3209:13" pos:end="3209:36"><call pos:start="3209:13" pos:end="3209:36"><name pos:start="3209:13" pos:end="3209:30">gen_op_movl_T0_seg</name><argument_list pos:start="3209:31" pos:end="3209:36">(<argument pos:start="3209:32" pos:end="3209:35"><expr pos:start="3209:32" pos:end="3209:35"><name pos:start="3209:32" pos:end="3209:35">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3211:13" pos:end="3211:27"><expr pos:start="3211:13" pos:end="3211:26"><call pos:start="3211:13" pos:end="3211:26"><name pos:start="3211:13" pos:end="3211:23">gen_push_T0</name><argument_list pos:start="3211:24" pos:end="3211:26">(<argument pos:start="3211:25" pos:end="3211:25"><expr pos:start="3211:25" pos:end="3211:25"><name pos:start="3211:25" pos:end="3211:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3213:13" pos:end="3213:42"><expr pos:start="3213:13" pos:end="3213:41"><name pos:start="3213:13" pos:end="3213:20">next_eip</name> <operator pos:start="3213:22" pos:end="3213:22">=</operator> <name pos:start="3213:24" pos:end="3213:28"><name pos:start="3213:24" pos:end="3213:24">s</name><operator pos:start="3213:25" pos:end="3213:26">-&gt;</operator><name pos:start="3213:27" pos:end="3213:28">pc</name></name> <operator pos:start="3213:30" pos:end="3213:30">-</operator> <name pos:start="3213:32" pos:end="3213:41"><name pos:start="3213:32" pos:end="3213:32">s</name><operator pos:start="3213:33" pos:end="3213:34">-&gt;</operator><name pos:start="3213:35" pos:end="3213:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="3215:13" pos:end="3215:40"><expr pos:start="3215:13" pos:end="3215:39"><call pos:start="3215:13" pos:end="3215:39"><name pos:start="3215:13" pos:end="3215:29">gen_op_movl_T0_im</name><argument_list pos:start="3215:30" pos:end="3215:39">(<argument pos:start="3215:31" pos:end="3215:38"><expr pos:start="3215:31" pos:end="3215:38"><name pos:start="3215:31" pos:end="3215:38">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3217:13" pos:end="3217:27"><expr pos:start="3217:13" pos:end="3217:26"><call pos:start="3217:13" pos:end="3217:26"><name pos:start="3217:13" pos:end="3217:23">gen_push_T0</name><argument_list pos:start="3217:24" pos:end="3217:26">(<argument pos:start="3217:25" pos:end="3217:25"><expr pos:start="3217:25" pos:end="3217:25"><name pos:start="3217:25" pos:end="3217:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="3221:13" pos:end="3221:34">/* change cs and pc */</comment>

            <expr_stmt pos:start="3223:13" pos:end="3223:40"><expr pos:start="3223:13" pos:end="3223:39"><call pos:start="3223:13" pos:end="3223:39"><name pos:start="3223:13" pos:end="3223:29">gen_op_movl_T0_im</name><argument_list pos:start="3223:30" pos:end="3223:39">(<argument pos:start="3223:31" pos:end="3223:38"><expr pos:start="3223:31" pos:end="3223:38"><name pos:start="3223:31" pos:end="3223:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3225:13" pos:end="3225:37"><expr pos:start="3225:13" pos:end="3225:36"><call pos:start="3225:13" pos:end="3225:36"><name pos:start="3225:13" pos:end="3225:27">gen_movl_seg_T0</name><argument_list pos:start="3225:28" pos:end="3225:36">(<argument pos:start="3225:29" pos:end="3225:29"><expr pos:start="3225:29" pos:end="3225:29"><name pos:start="3225:29" pos:end="3225:29">s</name></expr></argument>, <argument pos:start="3225:32" pos:end="3225:35"><expr pos:start="3225:32" pos:end="3225:35"><name pos:start="3225:32" pos:end="3225:35">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3227:13" pos:end="3227:49"><expr pos:start="3227:13" pos:end="3227:48"><call pos:start="3227:13" pos:end="3227:48"><name pos:start="3227:13" pos:end="3227:25">gen_op_jmp_im</name><argument_list pos:start="3227:26" pos:end="3227:48">(<argument pos:start="3227:27" pos:end="3227:47"><expr pos:start="3227:27" pos:end="3227:47"><operator pos:start="3227:27" pos:end="3227:27">(</operator><name pos:start="3227:28" pos:end="3227:35">unsigned</name> <name pos:start="3227:37" pos:end="3227:40">long</name><operator pos:start="3227:41" pos:end="3227:41">)</operator><name pos:start="3227:42" pos:end="3227:47">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3229:13" pos:end="3229:26"><expr pos:start="3229:13" pos:end="3229:25"><name pos:start="3229:13" pos:end="3229:21"><name pos:start="3229:13" pos:end="3229:13">s</name><operator pos:start="3229:14" pos:end="3229:15">-&gt;</operator><name pos:start="3229:16" pos:end="3229:21">is_jmp</name></name> <operator pos:start="3229:23" pos:end="3229:23">=</operator> <literal type="number" pos:start="3229:25" pos:end="3229:25">1</literal></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="3233:9" pos:end="3233:14">break;</break>

    <case pos:start="3235:5" pos:end="3235:14">case <expr pos:start="3235:10" pos:end="3235:13"><literal type="number" pos:start="3235:10" pos:end="3235:13">0xe9</literal></expr>:</case> <comment type="block" pos:start="3235:16" pos:end="3235:24">/* jmp */</comment>

        <expr_stmt pos:start="3237:9" pos:end="3237:39"><expr pos:start="3237:9" pos:end="3237:38"><name pos:start="3237:9" pos:end="3237:10">ot</name> <operator pos:start="3237:12" pos:end="3237:12">=</operator> <ternary pos:start="3237:14" pos:end="3237:38"><condition pos:start="3237:14" pos:end="3237:20"><expr pos:start="3237:14" pos:end="3237:18"><name pos:start="3237:14" pos:end="3237:18">dflag</name></expr> ?</condition><then pos:start="3237:22" pos:end="3237:28"> <expr pos:start="3237:22" pos:end="3237:28"><name pos:start="3237:22" pos:end="3237:28">OT_LONG</name></expr> </then><else pos:start="3237:30" pos:end="3237:38">: <expr pos:start="3237:32" pos:end="3237:38"><name pos:start="3237:32" pos:end="3237:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3239:9" pos:end="3239:30"><expr pos:start="3239:9" pos:end="3239:29"><name pos:start="3239:9" pos:end="3239:11">val</name> <operator pos:start="3239:13" pos:end="3239:13">=</operator> <call pos:start="3239:15" pos:end="3239:29"><name pos:start="3239:15" pos:end="3239:22">insn_get</name><argument_list pos:start="3239:23" pos:end="3239:29">(<argument pos:start="3239:24" pos:end="3239:24"><expr pos:start="3239:24" pos:end="3239:24"><name pos:start="3239:24" pos:end="3239:24">s</name></expr></argument>, <argument pos:start="3239:27" pos:end="3239:28"><expr pos:start="3239:27" pos:end="3239:28"><name pos:start="3239:27" pos:end="3239:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3241:9" pos:end="3241:34"><expr pos:start="3241:9" pos:end="3241:33"><name pos:start="3241:9" pos:end="3241:11">val</name> <operator pos:start="3241:13" pos:end="3241:14">+=</operator> <name pos:start="3241:16" pos:end="3241:20"><name pos:start="3241:16" pos:end="3241:16">s</name><operator pos:start="3241:17" pos:end="3241:18">-&gt;</operator><name pos:start="3241:19" pos:end="3241:20">pc</name></name> <operator pos:start="3241:22" pos:end="3241:22">-</operator> <name pos:start="3241:24" pos:end="3241:33"><name pos:start="3241:24" pos:end="3241:24">s</name><operator pos:start="3241:25" pos:end="3241:26">-&gt;</operator><name pos:start="3241:27" pos:end="3241:33">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="3243:9" pos:end="3245:31"><if pos:start="3243:9" pos:end="3245:31">if <condition pos:start="3243:12" pos:end="3243:26">(<expr pos:start="3243:13" pos:end="3243:25"><name pos:start="3243:13" pos:end="3243:20"><name pos:start="3243:13" pos:end="3243:13">s</name><operator pos:start="3243:14" pos:end="3243:15">-&gt;</operator><name pos:start="3243:16" pos:end="3243:20">dflag</name></name> <operator pos:start="3243:22" pos:end="3243:23">==</operator> <literal type="number" pos:start="3243:25" pos:end="3243:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3245:13" pos:end="3245:31"><block_content pos:start="3245:13" pos:end="3245:31">

            <expr_stmt pos:start="3245:13" pos:end="3245:31"><expr pos:start="3245:13" pos:end="3245:30"><name pos:start="3245:13" pos:end="3245:15">val</name> <operator pos:start="3245:17" pos:end="3245:17">=</operator> <name pos:start="3245:19" pos:end="3245:21">val</name> <operator pos:start="3245:23" pos:end="3245:23">&amp;</operator> <literal type="number" pos:start="3245:25" pos:end="3245:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3247:9" pos:end="3247:27"><expr pos:start="3247:9" pos:end="3247:26"><call pos:start="3247:9" pos:end="3247:26"><name pos:start="3247:9" pos:end="3247:21">gen_op_jmp_im</name><argument_list pos:start="3247:22" pos:end="3247:26">(<argument pos:start="3247:23" pos:end="3247:25"><expr pos:start="3247:23" pos:end="3247:25"><name pos:start="3247:23" pos:end="3247:25">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3249:9" pos:end="3249:22"><expr pos:start="3249:9" pos:end="3249:21"><name pos:start="3249:9" pos:end="3249:17"><name pos:start="3249:9" pos:end="3249:9">s</name><operator pos:start="3249:10" pos:end="3249:11">-&gt;</operator><name pos:start="3249:12" pos:end="3249:17">is_jmp</name></name> <operator pos:start="3249:19" pos:end="3249:19">=</operator> <literal type="number" pos:start="3249:21" pos:end="3249:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3251:9" pos:end="3251:14">break;</break>

    <case pos:start="3253:5" pos:end="3253:14">case <expr pos:start="3253:10" pos:end="3253:13"><literal type="number" pos:start="3253:10" pos:end="3253:13">0xea</literal></expr>:</case> <comment type="block" pos:start="3253:16" pos:end="3253:28">/* ljmp im */</comment>

        <block pos:start="3255:9" pos:end="3279:9">{<block_content pos:start="3257:13" pos:end="3277:26">

            <decl_stmt pos:start="3257:13" pos:end="3257:42"><decl pos:start="3257:13" pos:end="3257:33"><type pos:start="3257:13" pos:end="3257:24"><name pos:start="3257:13" pos:end="3257:20">unsigned</name> <name pos:start="3257:22" pos:end="3257:24">int</name></type> <name pos:start="3257:26" pos:end="3257:33">selector</name></decl>, <decl pos:start="3257:36" pos:end="3257:41"><type ref="prev" pos:start="3257:13" pos:end="3257:24"/><name pos:start="3257:36" pos:end="3257:41">offset</name></decl>;</decl_stmt>



            <expr_stmt pos:start="3261:13" pos:end="3261:43"><expr pos:start="3261:13" pos:end="3261:42"><name pos:start="3261:13" pos:end="3261:14">ot</name> <operator pos:start="3261:16" pos:end="3261:16">=</operator> <ternary pos:start="3261:18" pos:end="3261:42"><condition pos:start="3261:18" pos:end="3261:24"><expr pos:start="3261:18" pos:end="3261:22"><name pos:start="3261:18" pos:end="3261:22">dflag</name></expr> ?</condition><then pos:start="3261:26" pos:end="3261:32"> <expr pos:start="3261:26" pos:end="3261:32"><name pos:start="3261:26" pos:end="3261:32">OT_LONG</name></expr> </then><else pos:start="3261:34" pos:end="3261:42">: <expr pos:start="3261:36" pos:end="3261:42"><name pos:start="3261:36" pos:end="3261:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="3263:13" pos:end="3263:37"><expr pos:start="3263:13" pos:end="3263:36"><name pos:start="3263:13" pos:end="3263:18">offset</name> <operator pos:start="3263:20" pos:end="3263:20">=</operator> <call pos:start="3263:22" pos:end="3263:36"><name pos:start="3263:22" pos:end="3263:29">insn_get</name><argument_list pos:start="3263:30" pos:end="3263:36">(<argument pos:start="3263:31" pos:end="3263:31"><expr pos:start="3263:31" pos:end="3263:31"><name pos:start="3263:31" pos:end="3263:31">s</name></expr></argument>, <argument pos:start="3263:34" pos:end="3263:35"><expr pos:start="3263:34" pos:end="3263:35"><name pos:start="3263:34" pos:end="3263:35">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3265:13" pos:end="3265:44"><expr pos:start="3265:13" pos:end="3265:43"><name pos:start="3265:13" pos:end="3265:20">selector</name> <operator pos:start="3265:22" pos:end="3265:22">=</operator> <call pos:start="3265:24" pos:end="3265:43"><name pos:start="3265:24" pos:end="3265:31">insn_get</name><argument_list pos:start="3265:32" pos:end="3265:43">(<argument pos:start="3265:33" pos:end="3265:33"><expr pos:start="3265:33" pos:end="3265:33"><name pos:start="3265:33" pos:end="3265:33">s</name></expr></argument>, <argument pos:start="3265:36" pos:end="3265:42"><expr pos:start="3265:36" pos:end="3265:42"><name pos:start="3265:36" pos:end="3265:42">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <comment type="block" pos:start="3269:13" pos:end="3269:34">/* change cs and pc */</comment>

            <expr_stmt pos:start="3271:13" pos:end="3271:40"><expr pos:start="3271:13" pos:end="3271:39"><call pos:start="3271:13" pos:end="3271:39"><name pos:start="3271:13" pos:end="3271:29">gen_op_movl_T0_im</name><argument_list pos:start="3271:30" pos:end="3271:39">(<argument pos:start="3271:31" pos:end="3271:38"><expr pos:start="3271:31" pos:end="3271:38"><name pos:start="3271:31" pos:end="3271:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3273:13" pos:end="3273:37"><expr pos:start="3273:13" pos:end="3273:36"><call pos:start="3273:13" pos:end="3273:36"><name pos:start="3273:13" pos:end="3273:27">gen_movl_seg_T0</name><argument_list pos:start="3273:28" pos:end="3273:36">(<argument pos:start="3273:29" pos:end="3273:29"><expr pos:start="3273:29" pos:end="3273:29"><name pos:start="3273:29" pos:end="3273:29">s</name></expr></argument>, <argument pos:start="3273:32" pos:end="3273:35"><expr pos:start="3273:32" pos:end="3273:35"><name pos:start="3273:32" pos:end="3273:35">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3275:13" pos:end="3275:49"><expr pos:start="3275:13" pos:end="3275:48"><call pos:start="3275:13" pos:end="3275:48"><name pos:start="3275:13" pos:end="3275:25">gen_op_jmp_im</name><argument_list pos:start="3275:26" pos:end="3275:48">(<argument pos:start="3275:27" pos:end="3275:47"><expr pos:start="3275:27" pos:end="3275:47"><operator pos:start="3275:27" pos:end="3275:27">(</operator><name pos:start="3275:28" pos:end="3275:35">unsigned</name> <name pos:start="3275:37" pos:end="3275:40">long</name><operator pos:start="3275:41" pos:end="3275:41">)</operator><name pos:start="3275:42" pos:end="3275:47">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3277:13" pos:end="3277:26"><expr pos:start="3277:13" pos:end="3277:25"><name pos:start="3277:13" pos:end="3277:21"><name pos:start="3277:13" pos:end="3277:13">s</name><operator pos:start="3277:14" pos:end="3277:15">-&gt;</operator><name pos:start="3277:16" pos:end="3277:21">is_jmp</name></name> <operator pos:start="3277:23" pos:end="3277:23">=</operator> <literal type="number" pos:start="3277:25" pos:end="3277:25">1</literal></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="3281:9" pos:end="3281:14">break;</break>

    <case pos:start="3283:5" pos:end="3283:14">case <expr pos:start="3283:10" pos:end="3283:13"><literal type="number" pos:start="3283:10" pos:end="3283:13">0xeb</literal></expr>:</case> <comment type="block" pos:start="3283:16" pos:end="3283:27">/* jmp Jb */</comment>

        <expr_stmt pos:start="3285:9" pos:end="3285:43"><expr pos:start="3285:9" pos:end="3285:42"><name pos:start="3285:9" pos:end="3285:11">val</name> <operator pos:start="3285:13" pos:end="3285:13">=</operator> <operator pos:start="3285:15" pos:end="3285:15">(</operator><name pos:start="3285:16" pos:end="3285:21">int8_t</name><operator pos:start="3285:22" pos:end="3285:22">)</operator><call pos:start="3285:23" pos:end="3285:42"><name pos:start="3285:23" pos:end="3285:30">insn_get</name><argument_list pos:start="3285:31" pos:end="3285:42">(<argument pos:start="3285:32" pos:end="3285:32"><expr pos:start="3285:32" pos:end="3285:32"><name pos:start="3285:32" pos:end="3285:32">s</name></expr></argument>, <argument pos:start="3285:35" pos:end="3285:41"><expr pos:start="3285:35" pos:end="3285:41"><name pos:start="3285:35" pos:end="3285:41">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3287:9" pos:end="3287:34"><expr pos:start="3287:9" pos:end="3287:33"><name pos:start="3287:9" pos:end="3287:11">val</name> <operator pos:start="3287:13" pos:end="3287:14">+=</operator> <name pos:start="3287:16" pos:end="3287:20"><name pos:start="3287:16" pos:end="3287:16">s</name><operator pos:start="3287:17" pos:end="3287:18">-&gt;</operator><name pos:start="3287:19" pos:end="3287:20">pc</name></name> <operator pos:start="3287:22" pos:end="3287:22">-</operator> <name pos:start="3287:24" pos:end="3287:33"><name pos:start="3287:24" pos:end="3287:24">s</name><operator pos:start="3287:25" pos:end="3287:26">-&gt;</operator><name pos:start="3287:27" pos:end="3287:33">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="3289:9" pos:end="3291:31"><if pos:start="3289:9" pos:end="3291:31">if <condition pos:start="3289:12" pos:end="3289:26">(<expr pos:start="3289:13" pos:end="3289:25"><name pos:start="3289:13" pos:end="3289:20"><name pos:start="3289:13" pos:end="3289:13">s</name><operator pos:start="3289:14" pos:end="3289:15">-&gt;</operator><name pos:start="3289:16" pos:end="3289:20">dflag</name></name> <operator pos:start="3289:22" pos:end="3289:23">==</operator> <literal type="number" pos:start="3289:25" pos:end="3289:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3291:13" pos:end="3291:31"><block_content pos:start="3291:13" pos:end="3291:31">

            <expr_stmt pos:start="3291:13" pos:end="3291:31"><expr pos:start="3291:13" pos:end="3291:30"><name pos:start="3291:13" pos:end="3291:15">val</name> <operator pos:start="3291:17" pos:end="3291:17">=</operator> <name pos:start="3291:19" pos:end="3291:21">val</name> <operator pos:start="3291:23" pos:end="3291:23">&amp;</operator> <literal type="number" pos:start="3291:25" pos:end="3291:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3293:9" pos:end="3293:27"><expr pos:start="3293:9" pos:end="3293:26"><call pos:start="3293:9" pos:end="3293:26"><name pos:start="3293:9" pos:end="3293:21">gen_op_jmp_im</name><argument_list pos:start="3293:22" pos:end="3293:26">(<argument pos:start="3293:23" pos:end="3293:25"><expr pos:start="3293:23" pos:end="3293:25"><name pos:start="3293:23" pos:end="3293:25">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3295:9" pos:end="3295:22"><expr pos:start="3295:9" pos:end="3295:21"><name pos:start="3295:9" pos:end="3295:17"><name pos:start="3295:9" pos:end="3295:9">s</name><operator pos:start="3295:10" pos:end="3295:11">-&gt;</operator><name pos:start="3295:12" pos:end="3295:17">is_jmp</name></name> <operator pos:start="3295:19" pos:end="3295:19">=</operator> <literal type="number" pos:start="3295:21" pos:end="3295:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3297:9" pos:end="3297:14">break;</break>

    <case pos:start="3299:5" pos:end="3299:23">case <expr pos:start="3299:10" pos:end="3299:22"><literal type="number" pos:start="3299:10" pos:end="3299:13">0x70</literal> <operator pos:start="3299:15" pos:end="3299:17">...</operator> <literal type="number" pos:start="3299:19" pos:end="3299:22">0x7f</literal></expr>:</case> <comment type="block" pos:start="3299:25" pos:end="3299:36">/* jcc Jb */</comment>

        <expr_stmt pos:start="3301:9" pos:end="3301:43"><expr pos:start="3301:9" pos:end="3301:42"><name pos:start="3301:9" pos:end="3301:11">val</name> <operator pos:start="3301:13" pos:end="3301:13">=</operator> <operator pos:start="3301:15" pos:end="3301:15">(</operator><name pos:start="3301:16" pos:end="3301:21">int8_t</name><operator pos:start="3301:22" pos:end="3301:22">)</operator><call pos:start="3301:23" pos:end="3301:42"><name pos:start="3301:23" pos:end="3301:30">insn_get</name><argument_list pos:start="3301:31" pos:end="3301:42">(<argument pos:start="3301:32" pos:end="3301:32"><expr pos:start="3301:32" pos:end="3301:32"><name pos:start="3301:32" pos:end="3301:32">s</name></expr></argument>, <argument pos:start="3301:35" pos:end="3301:41"><expr pos:start="3301:35" pos:end="3301:41"><name pos:start="3301:35" pos:end="3301:41">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="3303:9" pos:end="3303:20">goto <name pos:start="3303:14" pos:end="3303:19">do_jcc</name>;</goto>

    <case pos:start="3305:5" pos:end="3305:25">case <expr pos:start="3305:10" pos:end="3305:24"><literal type="number" pos:start="3305:10" pos:end="3305:14">0x180</literal> <operator pos:start="3305:16" pos:end="3305:18">...</operator> <literal type="number" pos:start="3305:20" pos:end="3305:24">0x18f</literal></expr>:</case> <comment type="block" pos:start="3305:27" pos:end="3305:38">/* jcc Jv */</comment>

        <if_stmt pos:start="3307:9" pos:end="3315:9"><if pos:start="3307:9" pos:end="3311:9">if <condition pos:start="3307:12" pos:end="3307:18">(<expr pos:start="3307:13" pos:end="3307:17"><name pos:start="3307:13" pos:end="3307:17">dflag</name></expr>)</condition> <block pos:start="3307:20" pos:end="3311:9">{<block_content pos:start="3309:13" pos:end="3309:39">

            <expr_stmt pos:start="3309:13" pos:end="3309:39"><expr pos:start="3309:13" pos:end="3309:38"><name pos:start="3309:13" pos:end="3309:15">val</name> <operator pos:start="3309:17" pos:end="3309:17">=</operator> <call pos:start="3309:19" pos:end="3309:38"><name pos:start="3309:19" pos:end="3309:26">insn_get</name><argument_list pos:start="3309:27" pos:end="3309:38">(<argument pos:start="3309:28" pos:end="3309:28"><expr pos:start="3309:28" pos:end="3309:28"><name pos:start="3309:28" pos:end="3309:28">s</name></expr></argument>, <argument pos:start="3309:31" pos:end="3309:37"><expr pos:start="3309:31" pos:end="3309:37"><name pos:start="3309:31" pos:end="3309:37">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3311:11" pos:end="3315:9">else <block pos:start="3311:16" pos:end="3315:9">{<block_content pos:start="3313:13" pos:end="3313:48">

            <expr_stmt pos:start="3313:13" pos:end="3313:48"><expr pos:start="3313:13" pos:end="3313:47"><name pos:start="3313:13" pos:end="3313:15">val</name> <operator pos:start="3313:17" pos:end="3313:17">=</operator> <operator pos:start="3313:19" pos:end="3313:19">(</operator><name pos:start="3313:20" pos:end="3313:26">int16_t</name><operator pos:start="3313:27" pos:end="3313:27">)</operator><call pos:start="3313:28" pos:end="3313:47"><name pos:start="3313:28" pos:end="3313:35">insn_get</name><argument_list pos:start="3313:36" pos:end="3313:47">(<argument pos:start="3313:37" pos:end="3313:37"><expr pos:start="3313:37" pos:end="3313:37"><name pos:start="3313:37" pos:end="3313:37">s</name></expr></argument>, <argument pos:start="3313:40" pos:end="3313:46"><expr pos:start="3313:40" pos:end="3313:46"><name pos:start="3313:40" pos:end="3313:46">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

        </block_content>}</block></else></if_stmt>

    <label pos:start="3317:5" pos:end="3317:11"><name pos:start="3317:5" pos:end="3317:10">do_jcc</name>:</label>

        <expr_stmt pos:start="3319:9" pos:end="3319:38"><expr pos:start="3319:9" pos:end="3319:37"><name pos:start="3319:9" pos:end="3319:16">next_eip</name> <operator pos:start="3319:18" pos:end="3319:18">=</operator> <name pos:start="3319:20" pos:end="3319:24"><name pos:start="3319:20" pos:end="3319:20">s</name><operator pos:start="3319:21" pos:end="3319:22">-&gt;</operator><name pos:start="3319:23" pos:end="3319:24">pc</name></name> <operator pos:start="3319:26" pos:end="3319:26">-</operator> <name pos:start="3319:28" pos:end="3319:37"><name pos:start="3319:28" pos:end="3319:28">s</name><operator pos:start="3319:29" pos:end="3319:30">-&gt;</operator><name pos:start="3319:31" pos:end="3319:37">cs_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="3321:9" pos:end="3321:24"><expr pos:start="3321:9" pos:end="3321:23"><name pos:start="3321:9" pos:end="3321:11">val</name> <operator pos:start="3321:13" pos:end="3321:14">+=</operator> <name pos:start="3321:16" pos:end="3321:23">next_eip</name></expr>;</expr_stmt>

        <if_stmt pos:start="3323:9" pos:end="3325:26"><if pos:start="3323:9" pos:end="3325:26">if <condition pos:start="3323:12" pos:end="3323:26">(<expr pos:start="3323:13" pos:end="3323:25"><name pos:start="3323:13" pos:end="3323:20"><name pos:start="3323:13" pos:end="3323:13">s</name><operator pos:start="3323:14" pos:end="3323:15">-&gt;</operator><name pos:start="3323:16" pos:end="3323:20">dflag</name></name> <operator pos:start="3323:22" pos:end="3323:23">==</operator> <literal type="number" pos:start="3323:25" pos:end="3323:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3325:13" pos:end="3325:26"><block_content pos:start="3325:13" pos:end="3325:26">

            <expr_stmt pos:start="3325:13" pos:end="3325:26"><expr pos:start="3325:13" pos:end="3325:25"><name pos:start="3325:13" pos:end="3325:15">val</name> <operator pos:start="3325:17" pos:end="3325:18">&amp;=</operator> <literal type="number" pos:start="3325:20" pos:end="3325:25">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3327:9" pos:end="3327:37"><expr pos:start="3327:9" pos:end="3327:36"><call pos:start="3327:9" pos:end="3327:36"><name pos:start="3327:9" pos:end="3327:15">gen_jcc</name><argument_list pos:start="3327:16" pos:end="3327:36">(<argument pos:start="3327:17" pos:end="3327:17"><expr pos:start="3327:17" pos:end="3327:17"><name pos:start="3327:17" pos:end="3327:17">s</name></expr></argument>, <argument pos:start="3327:20" pos:end="3327:20"><expr pos:start="3327:20" pos:end="3327:20"><name pos:start="3327:20" pos:end="3327:20">b</name></expr></argument>, <argument pos:start="3327:23" pos:end="3327:25"><expr pos:start="3327:23" pos:end="3327:25"><name pos:start="3327:23" pos:end="3327:25">val</name></expr></argument>, <argument pos:start="3327:28" pos:end="3327:35"><expr pos:start="3327:28" pos:end="3327:35"><name pos:start="3327:28" pos:end="3327:35">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3329:9" pos:end="3329:22"><expr pos:start="3329:9" pos:end="3329:21"><name pos:start="3329:9" pos:end="3329:17"><name pos:start="3329:9" pos:end="3329:9">s</name><operator pos:start="3329:10" pos:end="3329:11">-&gt;</operator><name pos:start="3329:12" pos:end="3329:17">is_jmp</name></name> <operator pos:start="3329:19" pos:end="3329:19">=</operator> <literal type="number" pos:start="3329:21" pos:end="3329:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3331:9" pos:end="3331:14">break;</break>



    <case pos:start="3335:5" pos:end="3335:25">case <expr pos:start="3335:10" pos:end="3335:24"><literal type="number" pos:start="3335:10" pos:end="3335:14">0x190</literal> <operator pos:start="3335:16" pos:end="3335:18">...</operator> <literal type="number" pos:start="3335:20" pos:end="3335:24">0x19f</literal></expr>:</case> <comment type="block" pos:start="3335:27" pos:end="3335:40">/* setcc Gv */</comment>

        <expr_stmt pos:start="3337:9" pos:end="3337:30"><expr pos:start="3337:9" pos:end="3337:29"><name pos:start="3337:9" pos:end="3337:13">modrm</name> <operator pos:start="3337:15" pos:end="3337:15">=</operator> <call pos:start="3337:17" pos:end="3337:29"><name pos:start="3337:17" pos:end="3337:20">ldub</name><argument_list pos:start="3337:21" pos:end="3337:29">(<argument pos:start="3337:22" pos:end="3337:28"><expr pos:start="3337:22" pos:end="3337:28"><name pos:start="3337:22" pos:end="3337:26"><name pos:start="3337:22" pos:end="3337:22">s</name><operator pos:start="3337:23" pos:end="3337:24">-&gt;</operator><name pos:start="3337:25" pos:end="3337:26">pc</name></name><operator pos:start="3337:27" pos:end="3337:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3339:9" pos:end="3339:24"><expr pos:start="3339:9" pos:end="3339:23"><call pos:start="3339:9" pos:end="3339:23"><name pos:start="3339:9" pos:end="3339:17">gen_setcc</name><argument_list pos:start="3339:18" pos:end="3339:23">(<argument pos:start="3339:19" pos:end="3339:19"><expr pos:start="3339:19" pos:end="3339:19"><name pos:start="3339:19" pos:end="3339:19">s</name></expr></argument>, <argument pos:start="3339:22" pos:end="3339:22"><expr pos:start="3339:22" pos:end="3339:22"><name pos:start="3339:22" pos:end="3339:22">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3341:9" pos:end="3341:54"><expr pos:start="3341:9" pos:end="3341:53"><call pos:start="3341:9" pos:end="3341:53"><name pos:start="3341:9" pos:end="3341:22">gen_ldst_modrm</name><argument_list pos:start="3341:23" pos:end="3341:53">(<argument pos:start="3341:24" pos:end="3341:24"><expr pos:start="3341:24" pos:end="3341:24"><name pos:start="3341:24" pos:end="3341:24">s</name></expr></argument>, <argument pos:start="3341:27" pos:end="3341:31"><expr pos:start="3341:27" pos:end="3341:31"><name pos:start="3341:27" pos:end="3341:31">modrm</name></expr></argument>, <argument pos:start="3341:34" pos:end="3341:40"><expr pos:start="3341:34" pos:end="3341:40"><name pos:start="3341:34" pos:end="3341:40">OT_BYTE</name></expr></argument>, <argument pos:start="3341:43" pos:end="3341:49"><expr pos:start="3341:43" pos:end="3341:49"><name pos:start="3341:43" pos:end="3341:49">OR_TMP0</name></expr></argument>, <argument pos:start="3341:52" pos:end="3341:52"><expr pos:start="3341:52" pos:end="3341:52"><literal type="number" pos:start="3341:52" pos:end="3341:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3343:9" pos:end="3343:14">break;</break>

    <case pos:start="3345:5" pos:end="3345:25">case <expr pos:start="3345:10" pos:end="3345:24"><literal type="number" pos:start="3345:10" pos:end="3345:14">0x140</literal> <operator pos:start="3345:16" pos:end="3345:18">...</operator> <literal type="number" pos:start="3345:20" pos:end="3345:24">0x14f</literal></expr>:</case> <comment type="block" pos:start="3345:27" pos:end="3345:43">/* cmov Gv, Ev */</comment>

        <expr_stmt pos:start="3347:9" pos:end="3347:39"><expr pos:start="3347:9" pos:end="3347:38"><name pos:start="3347:9" pos:end="3347:10">ot</name> <operator pos:start="3347:12" pos:end="3347:12">=</operator> <ternary pos:start="3347:14" pos:end="3347:38"><condition pos:start="3347:14" pos:end="3347:20"><expr pos:start="3347:14" pos:end="3347:18"><name pos:start="3347:14" pos:end="3347:18">dflag</name></expr> ?</condition><then pos:start="3347:22" pos:end="3347:28"> <expr pos:start="3347:22" pos:end="3347:28"><name pos:start="3347:22" pos:end="3347:28">OT_LONG</name></expr> </then><else pos:start="3347:30" pos:end="3347:38">: <expr pos:start="3347:32" pos:end="3347:38"><name pos:start="3347:32" pos:end="3347:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3349:9" pos:end="3349:30"><expr pos:start="3349:9" pos:end="3349:29"><name pos:start="3349:9" pos:end="3349:13">modrm</name> <operator pos:start="3349:15" pos:end="3349:15">=</operator> <call pos:start="3349:17" pos:end="3349:29"><name pos:start="3349:17" pos:end="3349:20">ldub</name><argument_list pos:start="3349:21" pos:end="3349:29">(<argument pos:start="3349:22" pos:end="3349:28"><expr pos:start="3349:22" pos:end="3349:28"><name pos:start="3349:22" pos:end="3349:26"><name pos:start="3349:22" pos:end="3349:22">s</name><operator pos:start="3349:23" pos:end="3349:24">-&gt;</operator><name pos:start="3349:25" pos:end="3349:26">pc</name></name><operator pos:start="3349:27" pos:end="3349:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3351:9" pos:end="3351:31"><expr pos:start="3351:9" pos:end="3351:30"><name pos:start="3351:9" pos:end="3351:11">reg</name> <operator pos:start="3351:13" pos:end="3351:13">=</operator> <operator pos:start="3351:15" pos:end="3351:15">(</operator><name pos:start="3351:16" pos:end="3351:20">modrm</name> <operator pos:start="3351:22" pos:end="3351:23">&gt;&gt;</operator> <literal type="number" pos:start="3351:25" pos:end="3351:25">3</literal><operator pos:start="3351:26" pos:end="3351:26">)</operator> <operator pos:start="3351:28" pos:end="3351:28">&amp;</operator> <literal type="number" pos:start="3351:30" pos:end="3351:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3353:9" pos:end="3353:31"><expr pos:start="3353:9" pos:end="3353:30"><name pos:start="3353:9" pos:end="3353:11">mod</name> <operator pos:start="3353:13" pos:end="3353:13">=</operator> <operator pos:start="3353:15" pos:end="3353:15">(</operator><name pos:start="3353:16" pos:end="3353:20">modrm</name> <operator pos:start="3353:22" pos:end="3353:23">&gt;&gt;</operator> <literal type="number" pos:start="3353:25" pos:end="3353:25">6</literal><operator pos:start="3353:26" pos:end="3353:26">)</operator> <operator pos:start="3353:28" pos:end="3353:28">&amp;</operator> <literal type="number" pos:start="3353:30" pos:end="3353:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3355:9" pos:end="3355:24"><expr pos:start="3355:9" pos:end="3355:23"><call pos:start="3355:9" pos:end="3355:23"><name pos:start="3355:9" pos:end="3355:17">gen_setcc</name><argument_list pos:start="3355:18" pos:end="3355:23">(<argument pos:start="3355:19" pos:end="3355:19"><expr pos:start="3355:19" pos:end="3355:19"><name pos:start="3355:19" pos:end="3355:19">s</name></expr></argument>, <argument pos:start="3355:22" pos:end="3355:22"><expr pos:start="3355:22" pos:end="3355:22"><name pos:start="3355:22" pos:end="3355:22">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3357:9" pos:end="3369:9"><if pos:start="3357:9" pos:end="3363:9">if <condition pos:start="3357:12" pos:end="3357:21">(<expr pos:start="3357:13" pos:end="3357:20"><name pos:start="3357:13" pos:end="3357:15">mod</name> <operator pos:start="3357:17" pos:end="3357:18">!=</operator> <literal type="number" pos:start="3357:20" pos:end="3357:20">3</literal></expr>)</condition> <block pos:start="3357:23" pos:end="3363:9">{<block_content pos:start="3359:13" pos:end="3361:34">

            <expr_stmt pos:start="3359:13" pos:end="3359:61"><expr pos:start="3359:13" pos:end="3359:60"><call pos:start="3359:13" pos:end="3359:60"><name pos:start="3359:13" pos:end="3359:25">gen_lea_modrm</name><argument_list pos:start="3359:26" pos:end="3359:60">(<argument pos:start="3359:27" pos:end="3359:27"><expr pos:start="3359:27" pos:end="3359:27"><name pos:start="3359:27" pos:end="3359:27">s</name></expr></argument>, <argument pos:start="3359:30" pos:end="3359:34"><expr pos:start="3359:30" pos:end="3359:34"><name pos:start="3359:30" pos:end="3359:34">modrm</name></expr></argument>, <argument pos:start="3359:37" pos:end="3359:45"><expr pos:start="3359:37" pos:end="3359:45"><operator pos:start="3359:37" pos:end="3359:37">&amp;</operator><name pos:start="3359:38" pos:end="3359:45">reg_addr</name></expr></argument>, <argument pos:start="3359:48" pos:end="3359:59"><expr pos:start="3359:48" pos:end="3359:59"><operator pos:start="3359:48" pos:end="3359:48">&amp;</operator><name pos:start="3359:49" pos:end="3359:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3361:13" pos:end="3361:34"><expr pos:start="3361:13" pos:end="3361:33"><name pos:start="3361:13" pos:end="3361:31"><name pos:start="3361:13" pos:end="3361:27">gen_op_ld_T1_A0</name><index pos:start="3361:28" pos:end="3361:31">[<expr pos:start="3361:29" pos:end="3361:30"><name pos:start="3361:29" pos:end="3361:30">ot</name></expr>]</index></name><operator pos:start="3361:32" pos:end="3361:32">(</operator><operator pos:start="3361:33" pos:end="3361:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3363:11" pos:end="3369:9">else <block pos:start="3363:16" pos:end="3369:9">{<block_content pos:start="3365:13" pos:end="3367:43">

            <expr_stmt pos:start="3365:13" pos:end="3365:27"><expr pos:start="3365:13" pos:end="3365:26"><name pos:start="3365:13" pos:end="3365:14">rm</name> <operator pos:start="3365:16" pos:end="3365:16">=</operator> <name pos:start="3365:18" pos:end="3365:22">modrm</name> <operator pos:start="3365:24" pos:end="3365:24">&amp;</operator> <literal type="number" pos:start="3365:26" pos:end="3365:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="3367:13" pos:end="3367:43"><expr pos:start="3367:13" pos:end="3367:42"><name pos:start="3367:13" pos:end="3367:40"><name pos:start="3367:13" pos:end="3367:29">gen_op_mov_TN_reg</name><index pos:start="3367:30" pos:end="3367:33">[<expr pos:start="3367:31" pos:end="3367:32"><name pos:start="3367:31" pos:end="3367:32">ot</name></expr>]</index><index pos:start="3367:34" pos:end="3367:36">[<expr pos:start="3367:35" pos:end="3367:35"><literal type="number" pos:start="3367:35" pos:end="3367:35">1</literal></expr>]</index><index pos:start="3367:37" pos:end="3367:40">[<expr pos:start="3367:38" pos:end="3367:39"><name pos:start="3367:38" pos:end="3367:39">rm</name></expr>]</index></name><operator pos:start="3367:41" pos:end="3367:41">(</operator><operator pos:start="3367:42" pos:end="3367:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="3371:9" pos:end="3371:51"><expr pos:start="3371:9" pos:end="3371:50"><name pos:start="3371:9" pos:end="3371:48"><name pos:start="3371:9" pos:end="3371:29">gen_op_cmov_reg_T1_T0</name><index pos:start="3371:30" pos:end="3371:43">[<expr pos:start="3371:31" pos:end="3371:42"><name pos:start="3371:31" pos:end="3371:32">ot</name> <operator pos:start="3371:34" pos:end="3371:34">-</operator> <name pos:start="3371:36" pos:end="3371:42">OT_WORD</name></expr>]</index><index pos:start="3371:44" pos:end="3371:48">[<expr pos:start="3371:45" pos:end="3371:47"><name pos:start="3371:45" pos:end="3371:47">reg</name></expr>]</index></name><operator pos:start="3371:49" pos:end="3371:49">(</operator><operator pos:start="3371:50" pos:end="3371:50">)</operator></expr>;</expr_stmt>

        <break pos:start="3373:9" pos:end="3373:14">break;</break>

        

        <comment type="block" format="doxygen" pos:start="3377:9" pos:end="3377:34">/************************/</comment>

        <comment type="block" pos:start="3379:9" pos:end="3379:19">/* flags */</comment>

    <case pos:start="3381:5" pos:end="3381:14">case <expr pos:start="3381:10" pos:end="3381:13"><literal type="number" pos:start="3381:10" pos:end="3381:13">0x9c</literal></expr>:</case> <comment type="block" pos:start="3381:16" pos:end="3381:26">/* pushf */</comment>

        <if_stmt pos:start="3383:9" pos:end="3385:39"><if pos:start="3383:9" pos:end="3385:39">if <condition pos:start="3383:12" pos:end="3383:38">(<expr pos:start="3383:13" pos:end="3383:37"><name pos:start="3383:13" pos:end="3383:20"><name pos:start="3383:13" pos:end="3383:13">s</name><operator pos:start="3383:14" pos:end="3383:15">-&gt;</operator><name pos:start="3383:16" pos:end="3383:20">cc_op</name></name> <operator pos:start="3383:22" pos:end="3383:23">!=</operator> <name pos:start="3383:25" pos:end="3383:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3385:13" pos:end="3385:39"><block_content pos:start="3385:13" pos:end="3385:39">

            <expr_stmt pos:start="3385:13" pos:end="3385:39"><expr pos:start="3385:13" pos:end="3385:38"><call pos:start="3385:13" pos:end="3385:38"><name pos:start="3385:13" pos:end="3385:28">gen_op_set_cc_op</name><argument_list pos:start="3385:29" pos:end="3385:38">(<argument pos:start="3385:30" pos:end="3385:37"><expr pos:start="3385:30" pos:end="3385:37"><name pos:start="3385:30" pos:end="3385:37"><name pos:start="3385:30" pos:end="3385:30">s</name><operator pos:start="3385:31" pos:end="3385:32">-&gt;</operator><name pos:start="3385:33" pos:end="3385:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="3387:9" pos:end="3393:36"><if pos:start="3387:9" pos:end="3389:39">if <condition pos:start="3387:12" pos:end="3387:20">(<expr pos:start="3387:13" pos:end="3387:19"><name pos:start="3387:13" pos:end="3387:19"><name pos:start="3387:13" pos:end="3387:13">s</name><operator pos:start="3387:14" pos:end="3387:15">-&gt;</operator><name pos:start="3387:16" pos:end="3387:19">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="3389:13" pos:end="3389:39"><block_content pos:start="3389:13" pos:end="3389:39">

            <expr_stmt pos:start="3389:13" pos:end="3389:39"><expr pos:start="3389:13" pos:end="3389:38"><call pos:start="3389:13" pos:end="3389:38"><name pos:start="3389:13" pos:end="3389:36">gen_op_movl_T0_eflags_vm</name><argument_list pos:start="3389:37" pos:end="3389:38">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3391:9" pos:end="3393:36">else<block type="pseudo" pos:start="3393:13" pos:end="3393:36"><block_content pos:start="3393:13" pos:end="3393:36">

            <expr_stmt pos:start="3393:13" pos:end="3393:36"><expr pos:start="3393:13" pos:end="3393:35"><call pos:start="3393:13" pos:end="3393:35"><name pos:start="3393:13" pos:end="3393:33">gen_op_movl_T0_eflags</name><argument_list pos:start="3393:34" pos:end="3393:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3395:9" pos:end="3395:23"><expr pos:start="3395:9" pos:end="3395:22"><call pos:start="3395:9" pos:end="3395:22"><name pos:start="3395:9" pos:end="3395:19">gen_push_T0</name><argument_list pos:start="3395:20" pos:end="3395:22">(<argument pos:start="3395:21" pos:end="3395:21"><expr pos:start="3395:21" pos:end="3395:21"><name pos:start="3395:21" pos:end="3395:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3397:9" pos:end="3397:14">break;</break>

    <case pos:start="3399:5" pos:end="3399:14">case <expr pos:start="3399:10" pos:end="3399:13"><literal type="number" pos:start="3399:10" pos:end="3399:13">0x9d</literal></expr>:</case> <comment type="block" pos:start="3399:16" pos:end="3399:25">/* popf */</comment>

        <expr_stmt pos:start="3401:9" pos:end="3401:22"><expr pos:start="3401:9" pos:end="3401:21"><call pos:start="3401:9" pos:end="3401:21"><name pos:start="3401:9" pos:end="3401:18">gen_pop_T0</name><argument_list pos:start="3401:19" pos:end="3401:21">(<argument pos:start="3401:20" pos:end="3401:20"><expr pos:start="3401:20" pos:end="3401:20"><name pos:start="3401:20" pos:end="3401:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3403:9" pos:end="3423:9"><if pos:start="3403:9" pos:end="3413:9">if <condition pos:start="3403:12" pos:end="3403:21">(<expr pos:start="3403:13" pos:end="3403:20"><name pos:start="3403:13" pos:end="3403:20"><name pos:start="3403:13" pos:end="3403:13">s</name><operator pos:start="3403:14" pos:end="3403:15">-&gt;</operator><name pos:start="3403:16" pos:end="3403:20">dflag</name></name></expr>)</condition> <block pos:start="3403:23" pos:end="3413:9">{<block_content pos:start="3405:13" pos:end="3411:40">

            <if_stmt pos:start="3405:13" pos:end="3411:40"><if pos:start="3405:13" pos:end="3407:64">if <condition pos:start="3405:16" pos:end="3405:24">(<expr pos:start="3405:17" pos:end="3405:23"><name pos:start="3405:17" pos:end="3405:23"><name pos:start="3405:17" pos:end="3405:17">s</name><operator pos:start="3405:18" pos:end="3405:19">-&gt;</operator><name pos:start="3405:20" pos:end="3405:23">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="3407:17" pos:end="3407:64"><block_content pos:start="3407:17" pos:end="3407:64">

                <expr_stmt pos:start="3407:17" pos:end="3407:64"><expr pos:start="3407:17" pos:end="3407:63"><call pos:start="3407:17" pos:end="3407:63"><name pos:start="3407:17" pos:end="3407:40">gen_op_movl_eflags_T0_vm</name><argument_list pos:start="3407:41" pos:end="3407:63">(<argument pos:start="3407:42" pos:end="3407:62"><expr pos:start="3407:42" pos:end="3407:62"><name pos:start="3407:42" pos:end="3407:49">pc_start</name> <operator pos:start="3407:51" pos:end="3407:51">-</operator> <name pos:start="3407:53" pos:end="3407:62"><name pos:start="3407:53" pos:end="3407:53">s</name><operator pos:start="3407:54" pos:end="3407:55">-&gt;</operator><name pos:start="3407:56" pos:end="3407:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3409:13" pos:end="3411:40">else<block type="pseudo" pos:start="3411:17" pos:end="3411:40"><block_content pos:start="3411:17" pos:end="3411:40">

                <expr_stmt pos:start="3411:17" pos:end="3411:40"><expr pos:start="3411:17" pos:end="3411:39"><call pos:start="3411:17" pos:end="3411:39"><name pos:start="3411:17" pos:end="3411:37">gen_op_movl_eflags_T0</name><argument_list pos:start="3411:38" pos:end="3411:39">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="3413:11" pos:end="3423:9">else <block pos:start="3413:16" pos:end="3423:9">{<block_content pos:start="3415:13" pos:end="3421:40">

            <if_stmt pos:start="3415:13" pos:end="3421:40"><if pos:start="3415:13" pos:end="3417:64">if <condition pos:start="3415:16" pos:end="3415:24">(<expr pos:start="3415:17" pos:end="3415:23"><name pos:start="3415:17" pos:end="3415:23"><name pos:start="3415:17" pos:end="3415:17">s</name><operator pos:start="3415:18" pos:end="3415:19">-&gt;</operator><name pos:start="3415:20" pos:end="3415:23">vm86</name></name></expr>)</condition><block type="pseudo" pos:start="3417:17" pos:end="3417:64"><block_content pos:start="3417:17" pos:end="3417:64">

                <expr_stmt pos:start="3417:17" pos:end="3417:64"><expr pos:start="3417:17" pos:end="3417:63"><call pos:start="3417:17" pos:end="3417:63"><name pos:start="3417:17" pos:end="3417:40">gen_op_movw_eflags_T0_vm</name><argument_list pos:start="3417:41" pos:end="3417:63">(<argument pos:start="3417:42" pos:end="3417:62"><expr pos:start="3417:42" pos:end="3417:62"><name pos:start="3417:42" pos:end="3417:49">pc_start</name> <operator pos:start="3417:51" pos:end="3417:51">-</operator> <name pos:start="3417:53" pos:end="3417:62"><name pos:start="3417:53" pos:end="3417:53">s</name><operator pos:start="3417:54" pos:end="3417:55">-&gt;</operator><name pos:start="3417:56" pos:end="3417:62">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3419:13" pos:end="3421:40">else<block type="pseudo" pos:start="3421:17" pos:end="3421:40"><block_content pos:start="3421:17" pos:end="3421:40">

                <expr_stmt pos:start="3421:17" pos:end="3421:40"><expr pos:start="3421:17" pos:end="3421:39"><call pos:start="3421:17" pos:end="3421:39"><name pos:start="3421:17" pos:end="3421:37">gen_op_movw_eflags_T0</name><argument_list pos:start="3421:38" pos:end="3421:39">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="3425:9" pos:end="3425:26"><expr pos:start="3425:9" pos:end="3425:25"><call pos:start="3425:9" pos:end="3425:25"><name pos:start="3425:9" pos:end="3425:22">gen_pop_update</name><argument_list pos:start="3425:23" pos:end="3425:25">(<argument pos:start="3425:24" pos:end="3425:24"><expr pos:start="3425:24" pos:end="3425:24"><name pos:start="3425:24" pos:end="3425:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3427:9" pos:end="3427:32"><expr pos:start="3427:9" pos:end="3427:31"><name pos:start="3427:9" pos:end="3427:16"><name pos:start="3427:9" pos:end="3427:9">s</name><operator pos:start="3427:10" pos:end="3427:11">-&gt;</operator><name pos:start="3427:12" pos:end="3427:16">cc_op</name></name> <operator pos:start="3427:18" pos:end="3427:18">=</operator> <name pos:start="3427:20" pos:end="3427:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3429:9" pos:end="3429:14">break;</break>

    <case pos:start="3431:5" pos:end="3431:14">case <expr pos:start="3431:10" pos:end="3431:13"><literal type="number" pos:start="3431:10" pos:end="3431:13">0x9e</literal></expr>:</case> <comment type="block" pos:start="3431:16" pos:end="3431:25">/* sahf */</comment>

        <expr_stmt pos:start="3433:9" pos:end="3433:46"><expr pos:start="3433:9" pos:end="3433:45"><name pos:start="3433:9" pos:end="3433:43"><name pos:start="3433:9" pos:end="3433:25">gen_op_mov_TN_reg</name><index pos:start="3433:26" pos:end="3433:34">[<expr pos:start="3433:27" pos:end="3433:33"><name pos:start="3433:27" pos:end="3433:33">OT_BYTE</name></expr>]</index><index pos:start="3433:35" pos:end="3433:37">[<expr pos:start="3433:36" pos:end="3433:36"><literal type="number" pos:start="3433:36" pos:end="3433:36">0</literal></expr>]</index><index pos:start="3433:38" pos:end="3433:43">[<expr pos:start="3433:39" pos:end="3433:42"><name pos:start="3433:39" pos:end="3433:42">R_AH</name></expr>]</index></name><operator pos:start="3433:44" pos:end="3433:44">(</operator><operator pos:start="3433:45" pos:end="3433:45">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="3435:9" pos:end="3437:39"><if pos:start="3435:9" pos:end="3437:39">if <condition pos:start="3435:12" pos:end="3435:38">(<expr pos:start="3435:13" pos:end="3435:37"><name pos:start="3435:13" pos:end="3435:20"><name pos:start="3435:13" pos:end="3435:13">s</name><operator pos:start="3435:14" pos:end="3435:15">-&gt;</operator><name pos:start="3435:16" pos:end="3435:20">cc_op</name></name> <operator pos:start="3435:22" pos:end="3435:23">!=</operator> <name pos:start="3435:25" pos:end="3435:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3437:13" pos:end="3437:39"><block_content pos:start="3437:13" pos:end="3437:39">

            <expr_stmt pos:start="3437:13" pos:end="3437:39"><expr pos:start="3437:13" pos:end="3437:38"><call pos:start="3437:13" pos:end="3437:38"><name pos:start="3437:13" pos:end="3437:28">gen_op_set_cc_op</name><argument_list pos:start="3437:29" pos:end="3437:38">(<argument pos:start="3437:30" pos:end="3437:37"><expr pos:start="3437:30" pos:end="3437:37"><name pos:start="3437:30" pos:end="3437:37"><name pos:start="3437:30" pos:end="3437:30">s</name><operator pos:start="3437:31" pos:end="3437:32">-&gt;</operator><name pos:start="3437:33" pos:end="3437:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3439:9" pos:end="3439:32"><expr pos:start="3439:9" pos:end="3439:31"><call pos:start="3439:9" pos:end="3439:31"><name pos:start="3439:9" pos:end="3439:29">gen_op_movb_eflags_T0</name><argument_list pos:start="3439:30" pos:end="3439:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3441:9" pos:end="3441:32"><expr pos:start="3441:9" pos:end="3441:31"><name pos:start="3441:9" pos:end="3441:16"><name pos:start="3441:9" pos:end="3441:9">s</name><operator pos:start="3441:10" pos:end="3441:11">-&gt;</operator><name pos:start="3441:12" pos:end="3441:16">cc_op</name></name> <operator pos:start="3441:18" pos:end="3441:18">=</operator> <name pos:start="3441:20" pos:end="3441:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3443:9" pos:end="3443:14">break;</break>

    <case pos:start="3445:5" pos:end="3445:14">case <expr pos:start="3445:10" pos:end="3445:13"><literal type="number" pos:start="3445:10" pos:end="3445:13">0x9f</literal></expr>:</case> <comment type="block" pos:start="3445:16" pos:end="3445:25">/* lahf */</comment>

        <if_stmt pos:start="3447:9" pos:end="3449:39"><if pos:start="3447:9" pos:end="3449:39">if <condition pos:start="3447:12" pos:end="3447:38">(<expr pos:start="3447:13" pos:end="3447:37"><name pos:start="3447:13" pos:end="3447:20"><name pos:start="3447:13" pos:end="3447:13">s</name><operator pos:start="3447:14" pos:end="3447:15">-&gt;</operator><name pos:start="3447:16" pos:end="3447:20">cc_op</name></name> <operator pos:start="3447:22" pos:end="3447:23">!=</operator> <name pos:start="3447:25" pos:end="3447:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3449:13" pos:end="3449:39"><block_content pos:start="3449:13" pos:end="3449:39">

            <expr_stmt pos:start="3449:13" pos:end="3449:39"><expr pos:start="3449:13" pos:end="3449:38"><call pos:start="3449:13" pos:end="3449:38"><name pos:start="3449:13" pos:end="3449:28">gen_op_set_cc_op</name><argument_list pos:start="3449:29" pos:end="3449:38">(<argument pos:start="3449:30" pos:end="3449:37"><expr pos:start="3449:30" pos:end="3449:37"><name pos:start="3449:30" pos:end="3449:37"><name pos:start="3449:30" pos:end="3449:30">s</name><operator pos:start="3449:31" pos:end="3449:32">-&gt;</operator><name pos:start="3449:33" pos:end="3449:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3451:9" pos:end="3451:32"><expr pos:start="3451:9" pos:end="3451:31"><call pos:start="3451:9" pos:end="3451:31"><name pos:start="3451:9" pos:end="3451:29">gen_op_movl_T0_eflags</name><argument_list pos:start="3451:30" pos:end="3451:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3453:9" pos:end="3453:43"><expr pos:start="3453:9" pos:end="3453:42"><name pos:start="3453:9" pos:end="3453:40"><name pos:start="3453:9" pos:end="3453:25">gen_op_mov_reg_T0</name><index pos:start="3453:26" pos:end="3453:34">[<expr pos:start="3453:27" pos:end="3453:33"><name pos:start="3453:27" pos:end="3453:33">OT_BYTE</name></expr>]</index><index pos:start="3453:35" pos:end="3453:40">[<expr pos:start="3453:36" pos:end="3453:39"><name pos:start="3453:36" pos:end="3453:39">R_AH</name></expr>]</index></name><operator pos:start="3453:41" pos:end="3453:41">(</operator><operator pos:start="3453:42" pos:end="3453:42">)</operator></expr>;</expr_stmt>

        <break pos:start="3455:9" pos:end="3455:14">break;</break>

    <case pos:start="3457:5" pos:end="3457:14">case <expr pos:start="3457:10" pos:end="3457:13"><literal type="number" pos:start="3457:10" pos:end="3457:13">0xf5</literal></expr>:</case> <comment type="block" pos:start="3457:16" pos:end="3457:24">/* cmc */</comment>

        <if_stmt pos:start="3459:9" pos:end="3461:39"><if pos:start="3459:9" pos:end="3461:39">if <condition pos:start="3459:12" pos:end="3459:38">(<expr pos:start="3459:13" pos:end="3459:37"><name pos:start="3459:13" pos:end="3459:20"><name pos:start="3459:13" pos:end="3459:13">s</name><operator pos:start="3459:14" pos:end="3459:15">-&gt;</operator><name pos:start="3459:16" pos:end="3459:20">cc_op</name></name> <operator pos:start="3459:22" pos:end="3459:23">!=</operator> <name pos:start="3459:25" pos:end="3459:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3461:13" pos:end="3461:39"><block_content pos:start="3461:13" pos:end="3461:39">

            <expr_stmt pos:start="3461:13" pos:end="3461:39"><expr pos:start="3461:13" pos:end="3461:38"><call pos:start="3461:13" pos:end="3461:38"><name pos:start="3461:13" pos:end="3461:28">gen_op_set_cc_op</name><argument_list pos:start="3461:29" pos:end="3461:38">(<argument pos:start="3461:30" pos:end="3461:37"><expr pos:start="3461:30" pos:end="3461:37"><name pos:start="3461:30" pos:end="3461:37"><name pos:start="3461:30" pos:end="3461:30">s</name><operator pos:start="3461:31" pos:end="3461:32">-&gt;</operator><name pos:start="3461:33" pos:end="3461:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3463:9" pos:end="3463:21"><expr pos:start="3463:9" pos:end="3463:20"><call pos:start="3463:9" pos:end="3463:20"><name pos:start="3463:9" pos:end="3463:18">gen_op_cmc</name><argument_list pos:start="3463:19" pos:end="3463:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3465:9" pos:end="3465:32"><expr pos:start="3465:9" pos:end="3465:31"><name pos:start="3465:9" pos:end="3465:16"><name pos:start="3465:9" pos:end="3465:9">s</name><operator pos:start="3465:10" pos:end="3465:11">-&gt;</operator><name pos:start="3465:12" pos:end="3465:16">cc_op</name></name> <operator pos:start="3465:18" pos:end="3465:18">=</operator> <name pos:start="3465:20" pos:end="3465:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3467:9" pos:end="3467:14">break;</break>

    <case pos:start="3469:5" pos:end="3469:14">case <expr pos:start="3469:10" pos:end="3469:13"><literal type="number" pos:start="3469:10" pos:end="3469:13">0xf8</literal></expr>:</case> <comment type="block" pos:start="3469:16" pos:end="3469:24">/* clc */</comment>

        <if_stmt pos:start="3471:9" pos:end="3473:39"><if pos:start="3471:9" pos:end="3473:39">if <condition pos:start="3471:12" pos:end="3471:38">(<expr pos:start="3471:13" pos:end="3471:37"><name pos:start="3471:13" pos:end="3471:20"><name pos:start="3471:13" pos:end="3471:13">s</name><operator pos:start="3471:14" pos:end="3471:15">-&gt;</operator><name pos:start="3471:16" pos:end="3471:20">cc_op</name></name> <operator pos:start="3471:22" pos:end="3471:23">!=</operator> <name pos:start="3471:25" pos:end="3471:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3473:13" pos:end="3473:39"><block_content pos:start="3473:13" pos:end="3473:39">

            <expr_stmt pos:start="3473:13" pos:end="3473:39"><expr pos:start="3473:13" pos:end="3473:38"><call pos:start="3473:13" pos:end="3473:38"><name pos:start="3473:13" pos:end="3473:28">gen_op_set_cc_op</name><argument_list pos:start="3473:29" pos:end="3473:38">(<argument pos:start="3473:30" pos:end="3473:37"><expr pos:start="3473:30" pos:end="3473:37"><name pos:start="3473:30" pos:end="3473:37"><name pos:start="3473:30" pos:end="3473:30">s</name><operator pos:start="3473:31" pos:end="3473:32">-&gt;</operator><name pos:start="3473:33" pos:end="3473:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3475:9" pos:end="3475:21"><expr pos:start="3475:9" pos:end="3475:20"><call pos:start="3475:9" pos:end="3475:20"><name pos:start="3475:9" pos:end="3475:18">gen_op_clc</name><argument_list pos:start="3475:19" pos:end="3475:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3477:9" pos:end="3477:32"><expr pos:start="3477:9" pos:end="3477:31"><name pos:start="3477:9" pos:end="3477:16"><name pos:start="3477:9" pos:end="3477:9">s</name><operator pos:start="3477:10" pos:end="3477:11">-&gt;</operator><name pos:start="3477:12" pos:end="3477:16">cc_op</name></name> <operator pos:start="3477:18" pos:end="3477:18">=</operator> <name pos:start="3477:20" pos:end="3477:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3479:9" pos:end="3479:14">break;</break>

    <case pos:start="3481:5" pos:end="3481:14">case <expr pos:start="3481:10" pos:end="3481:13"><literal type="number" pos:start="3481:10" pos:end="3481:13">0xf9</literal></expr>:</case> <comment type="block" pos:start="3481:16" pos:end="3481:24">/* stc */</comment>

        <if_stmt pos:start="3483:9" pos:end="3485:39"><if pos:start="3483:9" pos:end="3485:39">if <condition pos:start="3483:12" pos:end="3483:38">(<expr pos:start="3483:13" pos:end="3483:37"><name pos:start="3483:13" pos:end="3483:20"><name pos:start="3483:13" pos:end="3483:13">s</name><operator pos:start="3483:14" pos:end="3483:15">-&gt;</operator><name pos:start="3483:16" pos:end="3483:20">cc_op</name></name> <operator pos:start="3483:22" pos:end="3483:23">!=</operator> <name pos:start="3483:25" pos:end="3483:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3485:13" pos:end="3485:39"><block_content pos:start="3485:13" pos:end="3485:39">

            <expr_stmt pos:start="3485:13" pos:end="3485:39"><expr pos:start="3485:13" pos:end="3485:38"><call pos:start="3485:13" pos:end="3485:38"><name pos:start="3485:13" pos:end="3485:28">gen_op_set_cc_op</name><argument_list pos:start="3485:29" pos:end="3485:38">(<argument pos:start="3485:30" pos:end="3485:37"><expr pos:start="3485:30" pos:end="3485:37"><name pos:start="3485:30" pos:end="3485:37"><name pos:start="3485:30" pos:end="3485:30">s</name><operator pos:start="3485:31" pos:end="3485:32">-&gt;</operator><name pos:start="3485:33" pos:end="3485:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3487:9" pos:end="3487:21"><expr pos:start="3487:9" pos:end="3487:20"><call pos:start="3487:9" pos:end="3487:20"><name pos:start="3487:9" pos:end="3487:18">gen_op_stc</name><argument_list pos:start="3487:19" pos:end="3487:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3489:9" pos:end="3489:32"><expr pos:start="3489:9" pos:end="3489:31"><name pos:start="3489:9" pos:end="3489:16"><name pos:start="3489:9" pos:end="3489:9">s</name><operator pos:start="3489:10" pos:end="3489:11">-&gt;</operator><name pos:start="3489:12" pos:end="3489:16">cc_op</name></name> <operator pos:start="3489:18" pos:end="3489:18">=</operator> <name pos:start="3489:20" pos:end="3489:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3491:9" pos:end="3491:14">break;</break>

    <case pos:start="3493:5" pos:end="3493:14">case <expr pos:start="3493:10" pos:end="3493:13"><literal type="number" pos:start="3493:10" pos:end="3493:13">0xfc</literal></expr>:</case> <comment type="block" pos:start="3493:16" pos:end="3493:24">/* cld */</comment>

        <expr_stmt pos:start="3495:9" pos:end="3495:21"><expr pos:start="3495:9" pos:end="3495:20"><call pos:start="3495:9" pos:end="3495:20"><name pos:start="3495:9" pos:end="3495:18">gen_op_cld</name><argument_list pos:start="3495:19" pos:end="3495:20">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3497:9" pos:end="3497:14">break;</break>

    <case pos:start="3499:5" pos:end="3499:14">case <expr pos:start="3499:10" pos:end="3499:13"><literal type="number" pos:start="3499:10" pos:end="3499:13">0xfd</literal></expr>:</case> <comment type="block" pos:start="3499:16" pos:end="3499:24">/* std */</comment>

        <expr_stmt pos:start="3501:9" pos:end="3501:21"><expr pos:start="3501:9" pos:end="3501:20"><call pos:start="3501:9" pos:end="3501:20"><name pos:start="3501:9" pos:end="3501:18">gen_op_std</name><argument_list pos:start="3501:19" pos:end="3501:20">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3503:9" pos:end="3503:14">break;</break>



        <comment type="block" format="doxygen" pos:start="3507:9" pos:end="3507:34">/************************/</comment>

        <comment type="block" pos:start="3509:9" pos:end="3509:28">/* bit operations */</comment>

    <case pos:start="3511:5" pos:end="3511:15">case <expr pos:start="3511:10" pos:end="3511:14"><literal type="number" pos:start="3511:10" pos:end="3511:14">0x1ba</literal></expr>:</case> <comment type="block" pos:start="3511:17" pos:end="3511:43">/* bt/bts/btr/btc Gv, im */</comment>

        <expr_stmt pos:start="3513:9" pos:end="3513:39"><expr pos:start="3513:9" pos:end="3513:38"><name pos:start="3513:9" pos:end="3513:10">ot</name> <operator pos:start="3513:12" pos:end="3513:12">=</operator> <ternary pos:start="3513:14" pos:end="3513:38"><condition pos:start="3513:14" pos:end="3513:20"><expr pos:start="3513:14" pos:end="3513:18"><name pos:start="3513:14" pos:end="3513:18">dflag</name></expr> ?</condition><then pos:start="3513:22" pos:end="3513:28"> <expr pos:start="3513:22" pos:end="3513:28"><name pos:start="3513:22" pos:end="3513:28">OT_LONG</name></expr> </then><else pos:start="3513:30" pos:end="3513:38">: <expr pos:start="3513:32" pos:end="3513:38"><name pos:start="3513:32" pos:end="3513:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3515:9" pos:end="3515:30"><expr pos:start="3515:9" pos:end="3515:29"><name pos:start="3515:9" pos:end="3515:13">modrm</name> <operator pos:start="3515:15" pos:end="3515:15">=</operator> <call pos:start="3515:17" pos:end="3515:29"><name pos:start="3515:17" pos:end="3515:20">ldub</name><argument_list pos:start="3515:21" pos:end="3515:29">(<argument pos:start="3515:22" pos:end="3515:28"><expr pos:start="3515:22" pos:end="3515:28"><name pos:start="3515:22" pos:end="3515:26"><name pos:start="3515:22" pos:end="3515:22">s</name><operator pos:start="3515:23" pos:end="3515:24">-&gt;</operator><name pos:start="3515:25" pos:end="3515:26">pc</name></name><operator pos:start="3515:27" pos:end="3515:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3517:9" pos:end="3517:30"><expr pos:start="3517:9" pos:end="3517:29"><name pos:start="3517:9" pos:end="3517:10">op</name> <operator pos:start="3517:12" pos:end="3517:12">=</operator> <operator pos:start="3517:14" pos:end="3517:14">(</operator><name pos:start="3517:15" pos:end="3517:19">modrm</name> <operator pos:start="3517:21" pos:end="3517:22">&gt;&gt;</operator> <literal type="number" pos:start="3517:24" pos:end="3517:24">3</literal><operator pos:start="3517:25" pos:end="3517:25">)</operator> <operator pos:start="3517:27" pos:end="3517:27">&amp;</operator> <literal type="number" pos:start="3517:29" pos:end="3517:29">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3519:9" pos:end="3519:31"><expr pos:start="3519:9" pos:end="3519:30"><name pos:start="3519:9" pos:end="3519:11">mod</name> <operator pos:start="3519:13" pos:end="3519:13">=</operator> <operator pos:start="3519:15" pos:end="3519:15">(</operator><name pos:start="3519:16" pos:end="3519:20">modrm</name> <operator pos:start="3519:22" pos:end="3519:23">&gt;&gt;</operator> <literal type="number" pos:start="3519:25" pos:end="3519:25">6</literal><operator pos:start="3519:26" pos:end="3519:26">)</operator> <operator pos:start="3519:28" pos:end="3519:28">&amp;</operator> <literal type="number" pos:start="3519:30" pos:end="3519:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3521:9" pos:end="3521:23"><expr pos:start="3521:9" pos:end="3521:22"><name pos:start="3521:9" pos:end="3521:10">rm</name> <operator pos:start="3521:12" pos:end="3521:12">=</operator> <name pos:start="3521:14" pos:end="3521:18">modrm</name> <operator pos:start="3521:20" pos:end="3521:20">&amp;</operator> <literal type="number" pos:start="3521:22" pos:end="3521:22">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="3523:9" pos:end="3533:9"><if pos:start="3523:9" pos:end="3529:9">if <condition pos:start="3523:12" pos:end="3523:21">(<expr pos:start="3523:13" pos:end="3523:20"><name pos:start="3523:13" pos:end="3523:15">mod</name> <operator pos:start="3523:17" pos:end="3523:18">!=</operator> <literal type="number" pos:start="3523:20" pos:end="3523:20">3</literal></expr>)</condition> <block pos:start="3523:23" pos:end="3529:9">{<block_content pos:start="3525:13" pos:end="3527:34">

            <expr_stmt pos:start="3525:13" pos:end="3525:61"><expr pos:start="3525:13" pos:end="3525:60"><call pos:start="3525:13" pos:end="3525:60"><name pos:start="3525:13" pos:end="3525:25">gen_lea_modrm</name><argument_list pos:start="3525:26" pos:end="3525:60">(<argument pos:start="3525:27" pos:end="3525:27"><expr pos:start="3525:27" pos:end="3525:27"><name pos:start="3525:27" pos:end="3525:27">s</name></expr></argument>, <argument pos:start="3525:30" pos:end="3525:34"><expr pos:start="3525:30" pos:end="3525:34"><name pos:start="3525:30" pos:end="3525:34">modrm</name></expr></argument>, <argument pos:start="3525:37" pos:end="3525:45"><expr pos:start="3525:37" pos:end="3525:45"><operator pos:start="3525:37" pos:end="3525:37">&amp;</operator><name pos:start="3525:38" pos:end="3525:45">reg_addr</name></expr></argument>, <argument pos:start="3525:48" pos:end="3525:59"><expr pos:start="3525:48" pos:end="3525:59"><operator pos:start="3525:48" pos:end="3525:48">&amp;</operator><name pos:start="3525:49" pos:end="3525:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3527:13" pos:end="3527:34"><expr pos:start="3527:13" pos:end="3527:33"><name pos:start="3527:13" pos:end="3527:31"><name pos:start="3527:13" pos:end="3527:27">gen_op_ld_T0_A0</name><index pos:start="3527:28" pos:end="3527:31">[<expr pos:start="3527:29" pos:end="3527:30"><name pos:start="3527:29" pos:end="3527:30">ot</name></expr>]</index></name><operator pos:start="3527:32" pos:end="3527:32">(</operator><operator pos:start="3527:33" pos:end="3527:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3529:11" pos:end="3533:9">else <block pos:start="3529:16" pos:end="3533:9">{<block_content pos:start="3531:13" pos:end="3531:43">

            <expr_stmt pos:start="3531:13" pos:end="3531:43"><expr pos:start="3531:13" pos:end="3531:42"><name pos:start="3531:13" pos:end="3531:40"><name pos:start="3531:13" pos:end="3531:29">gen_op_mov_TN_reg</name><index pos:start="3531:30" pos:end="3531:33">[<expr pos:start="3531:31" pos:end="3531:32"><name pos:start="3531:31" pos:end="3531:32">ot</name></expr>]</index><index pos:start="3531:34" pos:end="3531:36">[<expr pos:start="3531:35" pos:end="3531:35"><literal type="number" pos:start="3531:35" pos:end="3531:35">0</literal></expr>]</index><index pos:start="3531:37" pos:end="3531:40">[<expr pos:start="3531:38" pos:end="3531:39"><name pos:start="3531:38" pos:end="3531:39">rm</name></expr>]</index></name><operator pos:start="3531:41" pos:end="3531:41">(</operator><operator pos:start="3531:42" pos:end="3531:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="3535:9" pos:end="3535:24">/* load shift */</comment>

        <expr_stmt pos:start="3537:9" pos:end="3537:28"><expr pos:start="3537:9" pos:end="3537:27"><name pos:start="3537:9" pos:end="3537:11">val</name> <operator pos:start="3537:13" pos:end="3537:13">=</operator> <call pos:start="3537:15" pos:end="3537:27"><name pos:start="3537:15" pos:end="3537:18">ldub</name><argument_list pos:start="3537:19" pos:end="3537:27">(<argument pos:start="3537:20" pos:end="3537:26"><expr pos:start="3537:20" pos:end="3537:26"><name pos:start="3537:20" pos:end="3537:24"><name pos:start="3537:20" pos:end="3537:20">s</name><operator pos:start="3537:21" pos:end="3537:22">-&gt;</operator><name pos:start="3537:23" pos:end="3537:24">pc</name></name><operator pos:start="3537:25" pos:end="3537:26">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3539:9" pos:end="3539:31"><expr pos:start="3539:9" pos:end="3539:30"><call pos:start="3539:9" pos:end="3539:30"><name pos:start="3539:9" pos:end="3539:25">gen_op_movl_T1_im</name><argument_list pos:start="3539:26" pos:end="3539:30">(<argument pos:start="3539:27" pos:end="3539:29"><expr pos:start="3539:27" pos:end="3539:29"><name pos:start="3539:27" pos:end="3539:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3541:9" pos:end="3543:28"><if pos:start="3541:9" pos:end="3543:28">if <condition pos:start="3541:12" pos:end="3541:19">(<expr pos:start="3541:13" pos:end="3541:18"><name pos:start="3541:13" pos:end="3541:14">op</name> <operator pos:start="3541:16" pos:end="3541:16">&lt;</operator> <literal type="number" pos:start="3541:18" pos:end="3541:18">4</literal></expr>)</condition><block type="pseudo" pos:start="3543:13" pos:end="3543:28"><block_content pos:start="3543:13" pos:end="3543:28">

            <goto pos:start="3543:13" pos:end="3543:28">goto <name pos:start="3543:18" pos:end="3543:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3545:9" pos:end="3545:16"><expr pos:start="3545:9" pos:end="3545:15"><name pos:start="3545:9" pos:end="3545:10">op</name> <operator pos:start="3545:12" pos:end="3545:13">-=</operator> <literal type="number" pos:start="3545:15" pos:end="3545:15">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3547:9" pos:end="3547:48"><expr pos:start="3547:9" pos:end="3547:47"><name pos:start="3547:9" pos:end="3547:45"><name pos:start="3547:9" pos:end="3547:27">gen_op_btx_T0_T1_cc</name><index pos:start="3547:28" pos:end="3547:41">[<expr pos:start="3547:29" pos:end="3547:40"><name pos:start="3547:29" pos:end="3547:30">ot</name> <operator pos:start="3547:32" pos:end="3547:32">-</operator> <name pos:start="3547:34" pos:end="3547:40">OT_WORD</name></expr>]</index><index pos:start="3547:42" pos:end="3547:45">[<expr pos:start="3547:43" pos:end="3547:44"><name pos:start="3547:43" pos:end="3547:44">op</name></expr>]</index></name><operator pos:start="3547:46" pos:end="3547:46">(</operator><operator pos:start="3547:47" pos:end="3547:47">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3549:9" pos:end="3549:35"><expr pos:start="3549:9" pos:end="3549:34"><name pos:start="3549:9" pos:end="3549:16"><name pos:start="3549:9" pos:end="3549:9">s</name><operator pos:start="3549:10" pos:end="3549:11">-&gt;</operator><name pos:start="3549:12" pos:end="3549:16">cc_op</name></name> <operator pos:start="3549:18" pos:end="3549:18">=</operator> <name pos:start="3549:20" pos:end="3549:29">CC_OP_SARB</name> <operator pos:start="3549:31" pos:end="3549:31">+</operator> <name pos:start="3549:33" pos:end="3549:34">ot</name></expr>;</expr_stmt>

        <if_stmt pos:start="3551:9" pos:end="3561:9"><if pos:start="3551:9" pos:end="3561:9">if <condition pos:start="3551:12" pos:end="3551:20">(<expr pos:start="3551:13" pos:end="3551:19"><name pos:start="3551:13" pos:end="3551:14">op</name> <operator pos:start="3551:16" pos:end="3551:17">!=</operator> <literal type="number" pos:start="3551:19" pos:end="3551:19">0</literal></expr>)</condition> <block pos:start="3551:22" pos:end="3561:9">{<block_content pos:start="3553:13" pos:end="3559:44">

            <if_stmt pos:start="3553:13" pos:end="3559:44"><if pos:start="3553:13" pos:end="3555:38">if <condition pos:start="3553:16" pos:end="3553:25">(<expr pos:start="3553:17" pos:end="3553:24"><name pos:start="3553:17" pos:end="3553:19">mod</name> <operator pos:start="3553:21" pos:end="3553:22">!=</operator> <literal type="number" pos:start="3553:24" pos:end="3553:24">3</literal></expr>)</condition><block type="pseudo" pos:start="3555:17" pos:end="3555:38"><block_content pos:start="3555:17" pos:end="3555:38">

                <expr_stmt pos:start="3555:17" pos:end="3555:38"><expr pos:start="3555:17" pos:end="3555:37"><name pos:start="3555:17" pos:end="3555:35"><name pos:start="3555:17" pos:end="3555:31">gen_op_st_T0_A0</name><index pos:start="3555:32" pos:end="3555:35">[<expr pos:start="3555:33" pos:end="3555:34"><name pos:start="3555:33" pos:end="3555:34">ot</name></expr>]</index></name><operator pos:start="3555:36" pos:end="3555:36">(</operator><operator pos:start="3555:37" pos:end="3555:37">)</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3557:13" pos:end="3559:44">else<block type="pseudo" pos:start="3559:17" pos:end="3559:44"><block_content pos:start="3559:17" pos:end="3559:44">

                <expr_stmt pos:start="3559:17" pos:end="3559:44"><expr pos:start="3559:17" pos:end="3559:43"><name pos:start="3559:17" pos:end="3559:41"><name pos:start="3559:17" pos:end="3559:33">gen_op_mov_reg_T0</name><index pos:start="3559:34" pos:end="3559:37">[<expr pos:start="3559:35" pos:end="3559:36"><name pos:start="3559:35" pos:end="3559:36">ot</name></expr>]</index><index pos:start="3559:38" pos:end="3559:41">[<expr pos:start="3559:39" pos:end="3559:40"><name pos:start="3559:39" pos:end="3559:40">rm</name></expr>]</index></name><operator pos:start="3559:42" pos:end="3559:42">(</operator><operator pos:start="3559:43" pos:end="3559:43">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="3563:9" pos:end="3563:14">break;</break>

    <case pos:start="3565:5" pos:end="3565:15">case <expr pos:start="3565:10" pos:end="3565:14"><literal type="number" pos:start="3565:10" pos:end="3565:14">0x1a3</literal></expr>:</case> <comment type="block" pos:start="3565:17" pos:end="3565:31">/* bt Gv, Ev */</comment>

        <expr_stmt pos:start="3567:9" pos:end="3567:15"><expr pos:start="3567:9" pos:end="3567:14"><name pos:start="3567:9" pos:end="3567:10">op</name> <operator pos:start="3567:12" pos:end="3567:12">=</operator> <literal type="number" pos:start="3567:14" pos:end="3567:14">0</literal></expr>;</expr_stmt>

        <goto pos:start="3569:9" pos:end="3569:20">goto <name pos:start="3569:14" pos:end="3569:19">do_btx</name>;</goto>

    <case pos:start="3571:5" pos:end="3571:15">case <expr pos:start="3571:10" pos:end="3571:14"><literal type="number" pos:start="3571:10" pos:end="3571:14">0x1ab</literal></expr>:</case> <comment type="block" pos:start="3571:17" pos:end="3571:25">/* bts */</comment>

        <expr_stmt pos:start="3573:9" pos:end="3573:15"><expr pos:start="3573:9" pos:end="3573:14"><name pos:start="3573:9" pos:end="3573:10">op</name> <operator pos:start="3573:12" pos:end="3573:12">=</operator> <literal type="number" pos:start="3573:14" pos:end="3573:14">1</literal></expr>;</expr_stmt>

        <goto pos:start="3575:9" pos:end="3575:20">goto <name pos:start="3575:14" pos:end="3575:19">do_btx</name>;</goto>

    <case pos:start="3577:5" pos:end="3577:15">case <expr pos:start="3577:10" pos:end="3577:14"><literal type="number" pos:start="3577:10" pos:end="3577:14">0x1b3</literal></expr>:</case> <comment type="block" pos:start="3577:17" pos:end="3577:25">/* btr */</comment>

        <expr_stmt pos:start="3579:9" pos:end="3579:15"><expr pos:start="3579:9" pos:end="3579:14"><name pos:start="3579:9" pos:end="3579:10">op</name> <operator pos:start="3579:12" pos:end="3579:12">=</operator> <literal type="number" pos:start="3579:14" pos:end="3579:14">2</literal></expr>;</expr_stmt>

        <goto pos:start="3581:9" pos:end="3581:20">goto <name pos:start="3581:14" pos:end="3581:19">do_btx</name>;</goto>

    <case pos:start="3583:5" pos:end="3583:15">case <expr pos:start="3583:10" pos:end="3583:14"><literal type="number" pos:start="3583:10" pos:end="3583:14">0x1bb</literal></expr>:</case> <comment type="block" pos:start="3583:17" pos:end="3583:25">/* btc */</comment>

        <expr_stmt pos:start="3585:9" pos:end="3585:15"><expr pos:start="3585:9" pos:end="3585:14"><name pos:start="3585:9" pos:end="3585:10">op</name> <operator pos:start="3585:12" pos:end="3585:12">=</operator> <literal type="number" pos:start="3585:14" pos:end="3585:14">3</literal></expr>;</expr_stmt>

    <label pos:start="3587:5" pos:end="3587:11"><name pos:start="3587:5" pos:end="3587:10">do_btx</name>:</label>

        <expr_stmt pos:start="3589:9" pos:end="3589:39"><expr pos:start="3589:9" pos:end="3589:38"><name pos:start="3589:9" pos:end="3589:10">ot</name> <operator pos:start="3589:12" pos:end="3589:12">=</operator> <ternary pos:start="3589:14" pos:end="3589:38"><condition pos:start="3589:14" pos:end="3589:20"><expr pos:start="3589:14" pos:end="3589:18"><name pos:start="3589:14" pos:end="3589:18">dflag</name></expr> ?</condition><then pos:start="3589:22" pos:end="3589:28"> <expr pos:start="3589:22" pos:end="3589:28"><name pos:start="3589:22" pos:end="3589:28">OT_LONG</name></expr> </then><else pos:start="3589:30" pos:end="3589:38">: <expr pos:start="3589:32" pos:end="3589:38"><name pos:start="3589:32" pos:end="3589:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3591:9" pos:end="3591:30"><expr pos:start="3591:9" pos:end="3591:29"><name pos:start="3591:9" pos:end="3591:13">modrm</name> <operator pos:start="3591:15" pos:end="3591:15">=</operator> <call pos:start="3591:17" pos:end="3591:29"><name pos:start="3591:17" pos:end="3591:20">ldub</name><argument_list pos:start="3591:21" pos:end="3591:29">(<argument pos:start="3591:22" pos:end="3591:28"><expr pos:start="3591:22" pos:end="3591:28"><name pos:start="3591:22" pos:end="3591:26"><name pos:start="3591:22" pos:end="3591:22">s</name><operator pos:start="3591:23" pos:end="3591:24">-&gt;</operator><name pos:start="3591:25" pos:end="3591:26">pc</name></name><operator pos:start="3591:27" pos:end="3591:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3593:9" pos:end="3593:31"><expr pos:start="3593:9" pos:end="3593:30"><name pos:start="3593:9" pos:end="3593:11">reg</name> <operator pos:start="3593:13" pos:end="3593:13">=</operator> <operator pos:start="3593:15" pos:end="3593:15">(</operator><name pos:start="3593:16" pos:end="3593:20">modrm</name> <operator pos:start="3593:22" pos:end="3593:23">&gt;&gt;</operator> <literal type="number" pos:start="3593:25" pos:end="3593:25">3</literal><operator pos:start="3593:26" pos:end="3593:26">)</operator> <operator pos:start="3593:28" pos:end="3593:28">&amp;</operator> <literal type="number" pos:start="3593:30" pos:end="3593:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3595:9" pos:end="3595:31"><expr pos:start="3595:9" pos:end="3595:30"><name pos:start="3595:9" pos:end="3595:11">mod</name> <operator pos:start="3595:13" pos:end="3595:13">=</operator> <operator pos:start="3595:15" pos:end="3595:15">(</operator><name pos:start="3595:16" pos:end="3595:20">modrm</name> <operator pos:start="3595:22" pos:end="3595:23">&gt;&gt;</operator> <literal type="number" pos:start="3595:25" pos:end="3595:25">6</literal><operator pos:start="3595:26" pos:end="3595:26">)</operator> <operator pos:start="3595:28" pos:end="3595:28">&amp;</operator> <literal type="number" pos:start="3595:30" pos:end="3595:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3597:9" pos:end="3597:23"><expr pos:start="3597:9" pos:end="3597:22"><name pos:start="3597:9" pos:end="3597:10">rm</name> <operator pos:start="3597:12" pos:end="3597:12">=</operator> <name pos:start="3597:14" pos:end="3597:18">modrm</name> <operator pos:start="3597:20" pos:end="3597:20">&amp;</operator> <literal type="number" pos:start="3597:22" pos:end="3597:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3599:9" pos:end="3599:45"><expr pos:start="3599:9" pos:end="3599:44"><name pos:start="3599:9" pos:end="3599:42"><name pos:start="3599:9" pos:end="3599:25">gen_op_mov_TN_reg</name><index pos:start="3599:26" pos:end="3599:34">[<expr pos:start="3599:27" pos:end="3599:33"><name pos:start="3599:27" pos:end="3599:33">OT_LONG</name></expr>]</index><index pos:start="3599:35" pos:end="3599:37">[<expr pos:start="3599:36" pos:end="3599:36"><literal type="number" pos:start="3599:36" pos:end="3599:36">1</literal></expr>]</index><index pos:start="3599:38" pos:end="3599:42">[<expr pos:start="3599:39" pos:end="3599:41"><name pos:start="3599:39" pos:end="3599:41">reg</name></expr>]</index></name><operator pos:start="3599:43" pos:end="3599:43">(</operator><operator pos:start="3599:44" pos:end="3599:44">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="3601:9" pos:end="3621:9"><if pos:start="3601:9" pos:end="3617:9">if <condition pos:start="3601:12" pos:end="3601:21">(<expr pos:start="3601:13" pos:end="3601:20"><name pos:start="3601:13" pos:end="3601:15">mod</name> <operator pos:start="3601:17" pos:end="3601:18">!=</operator> <literal type="number" pos:start="3601:20" pos:end="3601:20">3</literal></expr>)</condition> <block pos:start="3601:23" pos:end="3617:9">{<block_content pos:start="3603:13" pos:end="3615:34">

            <expr_stmt pos:start="3603:13" pos:end="3603:61"><expr pos:start="3603:13" pos:end="3603:60"><call pos:start="3603:13" pos:end="3603:60"><name pos:start="3603:13" pos:end="3603:25">gen_lea_modrm</name><argument_list pos:start="3603:26" pos:end="3603:60">(<argument pos:start="3603:27" pos:end="3603:27"><expr pos:start="3603:27" pos:end="3603:27"><name pos:start="3603:27" pos:end="3603:27">s</name></expr></argument>, <argument pos:start="3603:30" pos:end="3603:34"><expr pos:start="3603:30" pos:end="3603:34"><name pos:start="3603:30" pos:end="3603:34">modrm</name></expr></argument>, <argument pos:start="3603:37" pos:end="3603:45"><expr pos:start="3603:37" pos:end="3603:45"><operator pos:start="3603:37" pos:end="3603:37">&amp;</operator><name pos:start="3603:38" pos:end="3603:45">reg_addr</name></expr></argument>, <argument pos:start="3603:48" pos:end="3603:59"><expr pos:start="3603:48" pos:end="3603:59"><operator pos:start="3603:48" pos:end="3603:48">&amp;</operator><name pos:start="3603:49" pos:end="3603:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="3605:13" pos:end="3605:62">/* specific case: we need to add a displacement */</comment>

            <if_stmt pos:start="3607:13" pos:end="3613:40"><if pos:start="3607:13" pos:end="3609:40">if <condition pos:start="3607:16" pos:end="3607:30">(<expr pos:start="3607:17" pos:end="3607:29"><name pos:start="3607:17" pos:end="3607:18">ot</name> <operator pos:start="3607:20" pos:end="3607:21">==</operator> <name pos:start="3607:23" pos:end="3607:29">OT_WORD</name></expr>)</condition><block type="pseudo" pos:start="3609:17" pos:end="3609:40"><block_content pos:start="3609:17" pos:end="3609:40">

                <expr_stmt pos:start="3609:17" pos:end="3609:40"><expr pos:start="3609:17" pos:end="3609:39"><call pos:start="3609:17" pos:end="3609:39"><name pos:start="3609:17" pos:end="3609:37">gen_op_add_bitw_A0_T1</name><argument_list pos:start="3609:38" pos:end="3609:39">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3611:13" pos:end="3613:40">else<block type="pseudo" pos:start="3613:17" pos:end="3613:40"><block_content pos:start="3613:17" pos:end="3613:40">

                <expr_stmt pos:start="3613:17" pos:end="3613:40"><expr pos:start="3613:17" pos:end="3613:39"><call pos:start="3613:17" pos:end="3613:39"><name pos:start="3613:17" pos:end="3613:37">gen_op_add_bitl_A0_T1</name><argument_list pos:start="3613:38" pos:end="3613:39">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="3615:13" pos:end="3615:34"><expr pos:start="3615:13" pos:end="3615:33"><name pos:start="3615:13" pos:end="3615:31"><name pos:start="3615:13" pos:end="3615:27">gen_op_ld_T0_A0</name><index pos:start="3615:28" pos:end="3615:31">[<expr pos:start="3615:29" pos:end="3615:30"><name pos:start="3615:29" pos:end="3615:30">ot</name></expr>]</index></name><operator pos:start="3615:32" pos:end="3615:32">(</operator><operator pos:start="3615:33" pos:end="3615:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3617:11" pos:end="3621:9">else <block pos:start="3617:16" pos:end="3621:9">{<block_content pos:start="3619:13" pos:end="3619:43">

            <expr_stmt pos:start="3619:13" pos:end="3619:43"><expr pos:start="3619:13" pos:end="3619:42"><name pos:start="3619:13" pos:end="3619:40"><name pos:start="3619:13" pos:end="3619:29">gen_op_mov_TN_reg</name><index pos:start="3619:30" pos:end="3619:33">[<expr pos:start="3619:31" pos:end="3619:32"><name pos:start="3619:31" pos:end="3619:32">ot</name></expr>]</index><index pos:start="3619:34" pos:end="3619:36">[<expr pos:start="3619:35" pos:end="3619:35"><literal type="number" pos:start="3619:35" pos:end="3619:35">0</literal></expr>]</index><index pos:start="3619:37" pos:end="3619:40">[<expr pos:start="3619:38" pos:end="3619:39"><name pos:start="3619:38" pos:end="3619:39">rm</name></expr>]</index></name><operator pos:start="3619:41" pos:end="3619:41">(</operator><operator pos:start="3619:42" pos:end="3619:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="3623:9" pos:end="3623:48"><expr pos:start="3623:9" pos:end="3623:47"><name pos:start="3623:9" pos:end="3623:45"><name pos:start="3623:9" pos:end="3623:27">gen_op_btx_T0_T1_cc</name><index pos:start="3623:28" pos:end="3623:41">[<expr pos:start="3623:29" pos:end="3623:40"><name pos:start="3623:29" pos:end="3623:30">ot</name> <operator pos:start="3623:32" pos:end="3623:32">-</operator> <name pos:start="3623:34" pos:end="3623:40">OT_WORD</name></expr>]</index><index pos:start="3623:42" pos:end="3623:45">[<expr pos:start="3623:43" pos:end="3623:44"><name pos:start="3623:43" pos:end="3623:44">op</name></expr>]</index></name><operator pos:start="3623:46" pos:end="3623:46">(</operator><operator pos:start="3623:47" pos:end="3623:47">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3625:9" pos:end="3625:35"><expr pos:start="3625:9" pos:end="3625:34"><name pos:start="3625:9" pos:end="3625:16"><name pos:start="3625:9" pos:end="3625:9">s</name><operator pos:start="3625:10" pos:end="3625:11">-&gt;</operator><name pos:start="3625:12" pos:end="3625:16">cc_op</name></name> <operator pos:start="3625:18" pos:end="3625:18">=</operator> <name pos:start="3625:20" pos:end="3625:29">CC_OP_SARB</name> <operator pos:start="3625:31" pos:end="3625:31">+</operator> <name pos:start="3625:33" pos:end="3625:34">ot</name></expr>;</expr_stmt>

        <if_stmt pos:start="3627:9" pos:end="3637:9"><if pos:start="3627:9" pos:end="3637:9">if <condition pos:start="3627:12" pos:end="3627:20">(<expr pos:start="3627:13" pos:end="3627:19"><name pos:start="3627:13" pos:end="3627:14">op</name> <operator pos:start="3627:16" pos:end="3627:17">!=</operator> <literal type="number" pos:start="3627:19" pos:end="3627:19">0</literal></expr>)</condition> <block pos:start="3627:22" pos:end="3637:9">{<block_content pos:start="3629:13" pos:end="3635:44">

            <if_stmt pos:start="3629:13" pos:end="3635:44"><if pos:start="3629:13" pos:end="3631:38">if <condition pos:start="3629:16" pos:end="3629:25">(<expr pos:start="3629:17" pos:end="3629:24"><name pos:start="3629:17" pos:end="3629:19">mod</name> <operator pos:start="3629:21" pos:end="3629:22">!=</operator> <literal type="number" pos:start="3629:24" pos:end="3629:24">3</literal></expr>)</condition><block type="pseudo" pos:start="3631:17" pos:end="3631:38"><block_content pos:start="3631:17" pos:end="3631:38">

                <expr_stmt pos:start="3631:17" pos:end="3631:38"><expr pos:start="3631:17" pos:end="3631:37"><name pos:start="3631:17" pos:end="3631:35"><name pos:start="3631:17" pos:end="3631:31">gen_op_st_T0_A0</name><index pos:start="3631:32" pos:end="3631:35">[<expr pos:start="3631:33" pos:end="3631:34"><name pos:start="3631:33" pos:end="3631:34">ot</name></expr>]</index></name><operator pos:start="3631:36" pos:end="3631:36">(</operator><operator pos:start="3631:37" pos:end="3631:37">)</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3633:13" pos:end="3635:44">else<block type="pseudo" pos:start="3635:17" pos:end="3635:44"><block_content pos:start="3635:17" pos:end="3635:44">

                <expr_stmt pos:start="3635:17" pos:end="3635:44"><expr pos:start="3635:17" pos:end="3635:43"><name pos:start="3635:17" pos:end="3635:41"><name pos:start="3635:17" pos:end="3635:33">gen_op_mov_reg_T0</name><index pos:start="3635:34" pos:end="3635:37">[<expr pos:start="3635:35" pos:end="3635:36"><name pos:start="3635:35" pos:end="3635:36">ot</name></expr>]</index><index pos:start="3635:38" pos:end="3635:41">[<expr pos:start="3635:39" pos:end="3635:40"><name pos:start="3635:39" pos:end="3635:40">rm</name></expr>]</index></name><operator pos:start="3635:42" pos:end="3635:42">(</operator><operator pos:start="3635:43" pos:end="3635:43">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="3639:9" pos:end="3639:14">break;</break>

    <case pos:start="3641:5" pos:end="3641:15">case <expr pos:start="3641:10" pos:end="3641:14"><literal type="number" pos:start="3641:10" pos:end="3641:14">0x1bc</literal></expr>:</case> <comment type="block" pos:start="3641:17" pos:end="3641:25">/* bsf */</comment>

    <case pos:start="3643:5" pos:end="3643:15">case <expr pos:start="3643:10" pos:end="3643:14"><literal type="number" pos:start="3643:10" pos:end="3643:14">0x1bd</literal></expr>:</case> <comment type="block" pos:start="3643:17" pos:end="3643:25">/* bsr */</comment>

        <expr_stmt pos:start="3645:9" pos:end="3645:39"><expr pos:start="3645:9" pos:end="3645:38"><name pos:start="3645:9" pos:end="3645:10">ot</name> <operator pos:start="3645:12" pos:end="3645:12">=</operator> <ternary pos:start="3645:14" pos:end="3645:38"><condition pos:start="3645:14" pos:end="3645:20"><expr pos:start="3645:14" pos:end="3645:18"><name pos:start="3645:14" pos:end="3645:18">dflag</name></expr> ?</condition><then pos:start="3645:22" pos:end="3645:28"> <expr pos:start="3645:22" pos:end="3645:28"><name pos:start="3645:22" pos:end="3645:28">OT_LONG</name></expr> </then><else pos:start="3645:30" pos:end="3645:38">: <expr pos:start="3645:32" pos:end="3645:38"><name pos:start="3645:32" pos:end="3645:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3647:9" pos:end="3647:30"><expr pos:start="3647:9" pos:end="3647:29"><name pos:start="3647:9" pos:end="3647:13">modrm</name> <operator pos:start="3647:15" pos:end="3647:15">=</operator> <call pos:start="3647:17" pos:end="3647:29"><name pos:start="3647:17" pos:end="3647:20">ldub</name><argument_list pos:start="3647:21" pos:end="3647:29">(<argument pos:start="3647:22" pos:end="3647:28"><expr pos:start="3647:22" pos:end="3647:28"><name pos:start="3647:22" pos:end="3647:26"><name pos:start="3647:22" pos:end="3647:22">s</name><operator pos:start="3647:23" pos:end="3647:24">-&gt;</operator><name pos:start="3647:25" pos:end="3647:26">pc</name></name><operator pos:start="3647:27" pos:end="3647:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3649:9" pos:end="3649:31"><expr pos:start="3649:9" pos:end="3649:30"><name pos:start="3649:9" pos:end="3649:11">reg</name> <operator pos:start="3649:13" pos:end="3649:13">=</operator> <operator pos:start="3649:15" pos:end="3649:15">(</operator><name pos:start="3649:16" pos:end="3649:20">modrm</name> <operator pos:start="3649:22" pos:end="3649:23">&gt;&gt;</operator> <literal type="number" pos:start="3649:25" pos:end="3649:25">3</literal><operator pos:start="3649:26" pos:end="3649:26">)</operator> <operator pos:start="3649:28" pos:end="3649:28">&amp;</operator> <literal type="number" pos:start="3649:30" pos:end="3649:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3651:9" pos:end="3651:49"><expr pos:start="3651:9" pos:end="3651:48"><call pos:start="3651:9" pos:end="3651:48"><name pos:start="3651:9" pos:end="3651:22">gen_ldst_modrm</name><argument_list pos:start="3651:23" pos:end="3651:48">(<argument pos:start="3651:24" pos:end="3651:24"><expr pos:start="3651:24" pos:end="3651:24"><name pos:start="3651:24" pos:end="3651:24">s</name></expr></argument>, <argument pos:start="3651:27" pos:end="3651:31"><expr pos:start="3651:27" pos:end="3651:31"><name pos:start="3651:27" pos:end="3651:31">modrm</name></expr></argument>, <argument pos:start="3651:34" pos:end="3651:35"><expr pos:start="3651:34" pos:end="3651:35"><name pos:start="3651:34" pos:end="3651:35">ot</name></expr></argument>, <argument pos:start="3651:38" pos:end="3651:44"><expr pos:start="3651:38" pos:end="3651:44"><name pos:start="3651:38" pos:end="3651:44">OR_TMP0</name></expr></argument>, <argument pos:start="3651:47" pos:end="3651:47"><expr pos:start="3651:47" pos:end="3651:47"><literal type="number" pos:start="3651:47" pos:end="3651:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3653:9" pos:end="3653:48"><expr pos:start="3653:9" pos:end="3653:47"><name pos:start="3653:9" pos:end="3653:45"><name pos:start="3653:9" pos:end="3653:24">gen_op_bsx_T0_cc</name><index pos:start="3653:25" pos:end="3653:38">[<expr pos:start="3653:26" pos:end="3653:37"><name pos:start="3653:26" pos:end="3653:27">ot</name> <operator pos:start="3653:29" pos:end="3653:29">-</operator> <name pos:start="3653:31" pos:end="3653:37">OT_WORD</name></expr>]</index><index pos:start="3653:39" pos:end="3653:45">[<expr pos:start="3653:40" pos:end="3653:44"><name pos:start="3653:40" pos:end="3653:40">b</name> <operator pos:start="3653:42" pos:end="3653:42">&amp;</operator> <literal type="number" pos:start="3653:44" pos:end="3653:44">1</literal></expr>]</index></name><operator pos:start="3653:46" pos:end="3653:46">(</operator><operator pos:start="3653:47" pos:end="3653:47">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="3655:9" pos:end="3657:34">/* NOTE: we always write back the result. Intel doc says it is

           undefined if T0 == 0 */</comment>

        <expr_stmt pos:start="3659:9" pos:end="3659:37"><expr pos:start="3659:9" pos:end="3659:36"><name pos:start="3659:9" pos:end="3659:34"><name pos:start="3659:9" pos:end="3659:25">gen_op_mov_reg_T0</name><index pos:start="3659:26" pos:end="3659:29">[<expr pos:start="3659:27" pos:end="3659:28"><name pos:start="3659:27" pos:end="3659:28">ot</name></expr>]</index><index pos:start="3659:30" pos:end="3659:34">[<expr pos:start="3659:31" pos:end="3659:33"><name pos:start="3659:31" pos:end="3659:33">reg</name></expr>]</index></name><operator pos:start="3659:35" pos:end="3659:35">(</operator><operator pos:start="3659:36" pos:end="3659:36">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3661:9" pos:end="3661:37"><expr pos:start="3661:9" pos:end="3661:36"><name pos:start="3661:9" pos:end="3661:16"><name pos:start="3661:9" pos:end="3661:9">s</name><operator pos:start="3661:10" pos:end="3661:11">-&gt;</operator><name pos:start="3661:12" pos:end="3661:16">cc_op</name></name> <operator pos:start="3661:18" pos:end="3661:18">=</operator> <name pos:start="3661:20" pos:end="3661:31">CC_OP_LOGICB</name> <operator pos:start="3661:33" pos:end="3661:33">+</operator> <name pos:start="3661:35" pos:end="3661:36">ot</name></expr>;</expr_stmt>

        <break pos:start="3663:9" pos:end="3663:14">break;</break>

        <comment type="block" format="doxygen" pos:start="3665:9" pos:end="3665:34">/************************/</comment>

        <comment type="block" pos:start="3667:9" pos:end="3667:17">/* bcd */</comment>

    <case pos:start="3669:5" pos:end="3669:14">case <expr pos:start="3669:10" pos:end="3669:13"><literal type="number" pos:start="3669:10" pos:end="3669:13">0x27</literal></expr>:</case> <comment type="block" pos:start="3669:16" pos:end="3669:24">/* daa */</comment>

        <if_stmt pos:start="3671:9" pos:end="3673:39"><if pos:start="3671:9" pos:end="3673:39">if <condition pos:start="3671:12" pos:end="3671:38">(<expr pos:start="3671:13" pos:end="3671:37"><name pos:start="3671:13" pos:end="3671:20"><name pos:start="3671:13" pos:end="3671:13">s</name><operator pos:start="3671:14" pos:end="3671:15">-&gt;</operator><name pos:start="3671:16" pos:end="3671:20">cc_op</name></name> <operator pos:start="3671:22" pos:end="3671:23">!=</operator> <name pos:start="3671:25" pos:end="3671:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3673:13" pos:end="3673:39"><block_content pos:start="3673:13" pos:end="3673:39">

            <expr_stmt pos:start="3673:13" pos:end="3673:39"><expr pos:start="3673:13" pos:end="3673:38"><call pos:start="3673:13" pos:end="3673:38"><name pos:start="3673:13" pos:end="3673:28">gen_op_set_cc_op</name><argument_list pos:start="3673:29" pos:end="3673:38">(<argument pos:start="3673:30" pos:end="3673:37"><expr pos:start="3673:30" pos:end="3673:37"><name pos:start="3673:30" pos:end="3673:37"><name pos:start="3673:30" pos:end="3673:30">s</name><operator pos:start="3673:31" pos:end="3673:32">-&gt;</operator><name pos:start="3673:33" pos:end="3673:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3675:9" pos:end="3675:21"><expr pos:start="3675:9" pos:end="3675:20"><call pos:start="3675:9" pos:end="3675:20"><name pos:start="3675:9" pos:end="3675:18">gen_op_daa</name><argument_list pos:start="3675:19" pos:end="3675:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3677:9" pos:end="3677:32"><expr pos:start="3677:9" pos:end="3677:31"><name pos:start="3677:9" pos:end="3677:16"><name pos:start="3677:9" pos:end="3677:9">s</name><operator pos:start="3677:10" pos:end="3677:11">-&gt;</operator><name pos:start="3677:12" pos:end="3677:16">cc_op</name></name> <operator pos:start="3677:18" pos:end="3677:18">=</operator> <name pos:start="3677:20" pos:end="3677:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3679:9" pos:end="3679:14">break;</break>

    <case pos:start="3681:5" pos:end="3681:14">case <expr pos:start="3681:10" pos:end="3681:13"><literal type="number" pos:start="3681:10" pos:end="3681:13">0x2f</literal></expr>:</case> <comment type="block" pos:start="3681:16" pos:end="3681:24">/* das */</comment>

        <if_stmt pos:start="3683:9" pos:end="3685:39"><if pos:start="3683:9" pos:end="3685:39">if <condition pos:start="3683:12" pos:end="3683:38">(<expr pos:start="3683:13" pos:end="3683:37"><name pos:start="3683:13" pos:end="3683:20"><name pos:start="3683:13" pos:end="3683:13">s</name><operator pos:start="3683:14" pos:end="3683:15">-&gt;</operator><name pos:start="3683:16" pos:end="3683:20">cc_op</name></name> <operator pos:start="3683:22" pos:end="3683:23">!=</operator> <name pos:start="3683:25" pos:end="3683:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3685:13" pos:end="3685:39"><block_content pos:start="3685:13" pos:end="3685:39">

            <expr_stmt pos:start="3685:13" pos:end="3685:39"><expr pos:start="3685:13" pos:end="3685:38"><call pos:start="3685:13" pos:end="3685:38"><name pos:start="3685:13" pos:end="3685:28">gen_op_set_cc_op</name><argument_list pos:start="3685:29" pos:end="3685:38">(<argument pos:start="3685:30" pos:end="3685:37"><expr pos:start="3685:30" pos:end="3685:37"><name pos:start="3685:30" pos:end="3685:37"><name pos:start="3685:30" pos:end="3685:30">s</name><operator pos:start="3685:31" pos:end="3685:32">-&gt;</operator><name pos:start="3685:33" pos:end="3685:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3687:9" pos:end="3687:21"><expr pos:start="3687:9" pos:end="3687:20"><call pos:start="3687:9" pos:end="3687:20"><name pos:start="3687:9" pos:end="3687:18">gen_op_das</name><argument_list pos:start="3687:19" pos:end="3687:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3689:9" pos:end="3689:32"><expr pos:start="3689:9" pos:end="3689:31"><name pos:start="3689:9" pos:end="3689:16"><name pos:start="3689:9" pos:end="3689:9">s</name><operator pos:start="3689:10" pos:end="3689:11">-&gt;</operator><name pos:start="3689:12" pos:end="3689:16">cc_op</name></name> <operator pos:start="3689:18" pos:end="3689:18">=</operator> <name pos:start="3689:20" pos:end="3689:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3691:9" pos:end="3691:14">break;</break>

    <case pos:start="3693:5" pos:end="3693:14">case <expr pos:start="3693:10" pos:end="3693:13"><literal type="number" pos:start="3693:10" pos:end="3693:13">0x37</literal></expr>:</case> <comment type="block" pos:start="3693:16" pos:end="3693:24">/* aaa */</comment>

        <if_stmt pos:start="3695:9" pos:end="3697:39"><if pos:start="3695:9" pos:end="3697:39">if <condition pos:start="3695:12" pos:end="3695:38">(<expr pos:start="3695:13" pos:end="3695:37"><name pos:start="3695:13" pos:end="3695:20"><name pos:start="3695:13" pos:end="3695:13">s</name><operator pos:start="3695:14" pos:end="3695:15">-&gt;</operator><name pos:start="3695:16" pos:end="3695:20">cc_op</name></name> <operator pos:start="3695:22" pos:end="3695:23">!=</operator> <name pos:start="3695:25" pos:end="3695:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3697:13" pos:end="3697:39"><block_content pos:start="3697:13" pos:end="3697:39">

            <expr_stmt pos:start="3697:13" pos:end="3697:39"><expr pos:start="3697:13" pos:end="3697:38"><call pos:start="3697:13" pos:end="3697:38"><name pos:start="3697:13" pos:end="3697:28">gen_op_set_cc_op</name><argument_list pos:start="3697:29" pos:end="3697:38">(<argument pos:start="3697:30" pos:end="3697:37"><expr pos:start="3697:30" pos:end="3697:37"><name pos:start="3697:30" pos:end="3697:37"><name pos:start="3697:30" pos:end="3697:30">s</name><operator pos:start="3697:31" pos:end="3697:32">-&gt;</operator><name pos:start="3697:33" pos:end="3697:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3699:9" pos:end="3699:21"><expr pos:start="3699:9" pos:end="3699:20"><call pos:start="3699:9" pos:end="3699:20"><name pos:start="3699:9" pos:end="3699:18">gen_op_aaa</name><argument_list pos:start="3699:19" pos:end="3699:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3701:9" pos:end="3701:32"><expr pos:start="3701:9" pos:end="3701:31"><name pos:start="3701:9" pos:end="3701:16"><name pos:start="3701:9" pos:end="3701:9">s</name><operator pos:start="3701:10" pos:end="3701:11">-&gt;</operator><name pos:start="3701:12" pos:end="3701:16">cc_op</name></name> <operator pos:start="3701:18" pos:end="3701:18">=</operator> <name pos:start="3701:20" pos:end="3701:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3703:9" pos:end="3703:14">break;</break>

    <case pos:start="3705:5" pos:end="3705:14">case <expr pos:start="3705:10" pos:end="3705:13"><literal type="number" pos:start="3705:10" pos:end="3705:13">0x3f</literal></expr>:</case> <comment type="block" pos:start="3705:16" pos:end="3705:24">/* aas */</comment>

        <if_stmt pos:start="3707:9" pos:end="3709:39"><if pos:start="3707:9" pos:end="3709:39">if <condition pos:start="3707:12" pos:end="3707:38">(<expr pos:start="3707:13" pos:end="3707:37"><name pos:start="3707:13" pos:end="3707:20"><name pos:start="3707:13" pos:end="3707:13">s</name><operator pos:start="3707:14" pos:end="3707:15">-&gt;</operator><name pos:start="3707:16" pos:end="3707:20">cc_op</name></name> <operator pos:start="3707:22" pos:end="3707:23">!=</operator> <name pos:start="3707:25" pos:end="3707:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3709:13" pos:end="3709:39"><block_content pos:start="3709:13" pos:end="3709:39">

            <expr_stmt pos:start="3709:13" pos:end="3709:39"><expr pos:start="3709:13" pos:end="3709:38"><call pos:start="3709:13" pos:end="3709:38"><name pos:start="3709:13" pos:end="3709:28">gen_op_set_cc_op</name><argument_list pos:start="3709:29" pos:end="3709:38">(<argument pos:start="3709:30" pos:end="3709:37"><expr pos:start="3709:30" pos:end="3709:37"><name pos:start="3709:30" pos:end="3709:37"><name pos:start="3709:30" pos:end="3709:30">s</name><operator pos:start="3709:31" pos:end="3709:32">-&gt;</operator><name pos:start="3709:33" pos:end="3709:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3711:9" pos:end="3711:21"><expr pos:start="3711:9" pos:end="3711:20"><call pos:start="3711:9" pos:end="3711:20"><name pos:start="3711:9" pos:end="3711:18">gen_op_aas</name><argument_list pos:start="3711:19" pos:end="3711:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3713:9" pos:end="3713:32"><expr pos:start="3713:9" pos:end="3713:31"><name pos:start="3713:9" pos:end="3713:16"><name pos:start="3713:9" pos:end="3713:9">s</name><operator pos:start="3713:10" pos:end="3713:11">-&gt;</operator><name pos:start="3713:12" pos:end="3713:16">cc_op</name></name> <operator pos:start="3713:18" pos:end="3713:18">=</operator> <name pos:start="3713:20" pos:end="3713:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3715:9" pos:end="3715:14">break;</break>

    <case pos:start="3717:5" pos:end="3717:14">case <expr pos:start="3717:10" pos:end="3717:13"><literal type="number" pos:start="3717:10" pos:end="3717:13">0xd4</literal></expr>:</case> <comment type="block" pos:start="3717:16" pos:end="3717:24">/* aam */</comment>

        <expr_stmt pos:start="3719:9" pos:end="3719:28"><expr pos:start="3719:9" pos:end="3719:27"><name pos:start="3719:9" pos:end="3719:11">val</name> <operator pos:start="3719:13" pos:end="3719:13">=</operator> <call pos:start="3719:15" pos:end="3719:27"><name pos:start="3719:15" pos:end="3719:18">ldub</name><argument_list pos:start="3719:19" pos:end="3719:27">(<argument pos:start="3719:20" pos:end="3719:26"><expr pos:start="3719:20" pos:end="3719:26"><name pos:start="3719:20" pos:end="3719:24"><name pos:start="3719:20" pos:end="3719:20">s</name><operator pos:start="3719:21" pos:end="3719:22">-&gt;</operator><name pos:start="3719:23" pos:end="3719:24">pc</name></name><operator pos:start="3719:25" pos:end="3719:26">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3721:9" pos:end="3721:24"><expr pos:start="3721:9" pos:end="3721:23"><call pos:start="3721:9" pos:end="3721:23"><name pos:start="3721:9" pos:end="3721:18">gen_op_aam</name><argument_list pos:start="3721:19" pos:end="3721:23">(<argument pos:start="3721:20" pos:end="3721:22"><expr pos:start="3721:20" pos:end="3721:22"><name pos:start="3721:20" pos:end="3721:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3723:9" pos:end="3723:32"><expr pos:start="3723:9" pos:end="3723:31"><name pos:start="3723:9" pos:end="3723:16"><name pos:start="3723:9" pos:end="3723:9">s</name><operator pos:start="3723:10" pos:end="3723:11">-&gt;</operator><name pos:start="3723:12" pos:end="3723:16">cc_op</name></name> <operator pos:start="3723:18" pos:end="3723:18">=</operator> <name pos:start="3723:20" pos:end="3723:31">CC_OP_LOGICB</name></expr>;</expr_stmt>

        <break pos:start="3725:9" pos:end="3725:14">break;</break>

    <case pos:start="3727:5" pos:end="3727:14">case <expr pos:start="3727:10" pos:end="3727:13"><literal type="number" pos:start="3727:10" pos:end="3727:13">0xd5</literal></expr>:</case> <comment type="block" pos:start="3727:16" pos:end="3727:24">/* aad */</comment>

        <expr_stmt pos:start="3729:9" pos:end="3729:28"><expr pos:start="3729:9" pos:end="3729:27"><name pos:start="3729:9" pos:end="3729:11">val</name> <operator pos:start="3729:13" pos:end="3729:13">=</operator> <call pos:start="3729:15" pos:end="3729:27"><name pos:start="3729:15" pos:end="3729:18">ldub</name><argument_list pos:start="3729:19" pos:end="3729:27">(<argument pos:start="3729:20" pos:end="3729:26"><expr pos:start="3729:20" pos:end="3729:26"><name pos:start="3729:20" pos:end="3729:24"><name pos:start="3729:20" pos:end="3729:20">s</name><operator pos:start="3729:21" pos:end="3729:22">-&gt;</operator><name pos:start="3729:23" pos:end="3729:24">pc</name></name><operator pos:start="3729:25" pos:end="3729:26">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3731:9" pos:end="3731:24"><expr pos:start="3731:9" pos:end="3731:23"><call pos:start="3731:9" pos:end="3731:23"><name pos:start="3731:9" pos:end="3731:18">gen_op_aad</name><argument_list pos:start="3731:19" pos:end="3731:23">(<argument pos:start="3731:20" pos:end="3731:22"><expr pos:start="3731:20" pos:end="3731:22"><name pos:start="3731:20" pos:end="3731:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3733:9" pos:end="3733:32"><expr pos:start="3733:9" pos:end="3733:31"><name pos:start="3733:9" pos:end="3733:16"><name pos:start="3733:9" pos:end="3733:9">s</name><operator pos:start="3733:10" pos:end="3733:11">-&gt;</operator><name pos:start="3733:12" pos:end="3733:16">cc_op</name></name> <operator pos:start="3733:18" pos:end="3733:18">=</operator> <name pos:start="3733:20" pos:end="3733:31">CC_OP_LOGICB</name></expr>;</expr_stmt>

        <break pos:start="3735:9" pos:end="3735:14">break;</break>

        <comment type="block" format="doxygen" pos:start="3737:9" pos:end="3737:34">/************************/</comment>

        <comment type="block" pos:start="3739:9" pos:end="3739:18">/* misc */</comment>

    <case pos:start="3741:5" pos:end="3741:14">case <expr pos:start="3741:10" pos:end="3741:13"><literal type="number" pos:start="3741:10" pos:end="3741:13">0x90</literal></expr>:</case> <comment type="block" pos:start="3741:16" pos:end="3741:24">/* nop */</comment>

        <break pos:start="3743:9" pos:end="3743:14">break;</break>

    <case pos:start="3745:5" pos:end="3745:14">case <expr pos:start="3745:10" pos:end="3745:13"><literal type="number" pos:start="3745:10" pos:end="3745:13">0xcc</literal></expr>:</case> <comment type="block" pos:start="3745:16" pos:end="3745:25">/* int3 */</comment>

        <expr_stmt pos:start="3747:9" pos:end="3747:36"><expr pos:start="3747:9" pos:end="3747:35"><call pos:start="3747:9" pos:end="3747:35"><name pos:start="3747:9" pos:end="3747:19">gen_op_int3</name><argument_list pos:start="3747:20" pos:end="3747:35">(<argument pos:start="3747:21" pos:end="3747:34"><expr pos:start="3747:21" pos:end="3747:34"><operator pos:start="3747:21" pos:end="3747:21">(</operator><name pos:start="3747:22" pos:end="3747:25">long</name><operator pos:start="3747:26" pos:end="3747:26">)</operator><name pos:start="3747:27" pos:end="3747:34">pc_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3749:9" pos:end="3749:22"><expr pos:start="3749:9" pos:end="3749:21"><name pos:start="3749:9" pos:end="3749:17"><name pos:start="3749:9" pos:end="3749:9">s</name><operator pos:start="3749:10" pos:end="3749:11">-&gt;</operator><name pos:start="3749:12" pos:end="3749:17">is_jmp</name></name> <operator pos:start="3749:19" pos:end="3749:19">=</operator> <literal type="number" pos:start="3749:21" pos:end="3749:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3751:9" pos:end="3751:14">break;</break>

    <case pos:start="3753:5" pos:end="3753:14">case <expr pos:start="3753:10" pos:end="3753:13"><literal type="number" pos:start="3753:10" pos:end="3753:13">0xcd</literal></expr>:</case> <comment type="block" pos:start="3753:16" pos:end="3753:26">/* int N */</comment>

        <expr_stmt pos:start="3755:9" pos:end="3755:28"><expr pos:start="3755:9" pos:end="3755:27"><name pos:start="3755:9" pos:end="3755:11">val</name> <operator pos:start="3755:13" pos:end="3755:13">=</operator> <call pos:start="3755:15" pos:end="3755:27"><name pos:start="3755:15" pos:end="3755:18">ldub</name><argument_list pos:start="3755:19" pos:end="3755:27">(<argument pos:start="3755:20" pos:end="3755:26"><expr pos:start="3755:20" pos:end="3755:26"><name pos:start="3755:20" pos:end="3755:24"><name pos:start="3755:20" pos:end="3755:20">s</name><operator pos:start="3755:21" pos:end="3755:22">-&gt;</operator><name pos:start="3755:23" pos:end="3755:24">pc</name></name><operator pos:start="3755:25" pos:end="3755:26">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3757:9" pos:end="3757:50"><expr pos:start="3757:9" pos:end="3757:49"><call pos:start="3757:9" pos:end="3757:49"><name pos:start="3757:9" pos:end="3757:21">gen_op_int_im</name><argument_list pos:start="3757:22" pos:end="3757:49">(<argument pos:start="3757:23" pos:end="3757:25"><expr pos:start="3757:23" pos:end="3757:25"><name pos:start="3757:23" pos:end="3757:25">val</name></expr></argument>, <argument pos:start="3757:28" pos:end="3757:48"><expr pos:start="3757:28" pos:end="3757:48"><name pos:start="3757:28" pos:end="3757:35">pc_start</name> <operator pos:start="3757:37" pos:end="3757:37">-</operator> <name pos:start="3757:39" pos:end="3757:48"><name pos:start="3757:39" pos:end="3757:39">s</name><operator pos:start="3757:40" pos:end="3757:41">-&gt;</operator><name pos:start="3757:42" pos:end="3757:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3759:9" pos:end="3759:22"><expr pos:start="3759:9" pos:end="3759:21"><name pos:start="3759:9" pos:end="3759:17"><name pos:start="3759:9" pos:end="3759:9">s</name><operator pos:start="3759:10" pos:end="3759:11">-&gt;</operator><name pos:start="3759:12" pos:end="3759:17">is_jmp</name></name> <operator pos:start="3759:19" pos:end="3759:19">=</operator> <literal type="number" pos:start="3759:21" pos:end="3759:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3761:9" pos:end="3761:14">break;</break>

    <case pos:start="3763:5" pos:end="3763:14">case <expr pos:start="3763:10" pos:end="3763:13"><literal type="number" pos:start="3763:10" pos:end="3763:13">0xce</literal></expr>:</case> <comment type="block" pos:start="3763:16" pos:end="3763:25">/* into */</comment>

        <if_stmt pos:start="3765:9" pos:end="3767:39"><if pos:start="3765:9" pos:end="3767:39">if <condition pos:start="3765:12" pos:end="3765:38">(<expr pos:start="3765:13" pos:end="3765:37"><name pos:start="3765:13" pos:end="3765:20"><name pos:start="3765:13" pos:end="3765:13">s</name><operator pos:start="3765:14" pos:end="3765:15">-&gt;</operator><name pos:start="3765:16" pos:end="3765:20">cc_op</name></name> <operator pos:start="3765:22" pos:end="3765:23">!=</operator> <name pos:start="3765:25" pos:end="3765:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3767:13" pos:end="3767:39"><block_content pos:start="3767:13" pos:end="3767:39">

            <expr_stmt pos:start="3767:13" pos:end="3767:39"><expr pos:start="3767:13" pos:end="3767:38"><call pos:start="3767:13" pos:end="3767:38"><name pos:start="3767:13" pos:end="3767:28">gen_op_set_cc_op</name><argument_list pos:start="3767:29" pos:end="3767:38">(<argument pos:start="3767:30" pos:end="3767:37"><expr pos:start="3767:30" pos:end="3767:37"><name pos:start="3767:30" pos:end="3767:37"><name pos:start="3767:30" pos:end="3767:30">s</name><operator pos:start="3767:31" pos:end="3767:32">-&gt;</operator><name pos:start="3767:33" pos:end="3767:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3769:9" pos:end="3769:22"><expr pos:start="3769:9" pos:end="3769:21"><call pos:start="3769:9" pos:end="3769:21"><name pos:start="3769:9" pos:end="3769:19">gen_op_into</name><argument_list pos:start="3769:20" pos:end="3769:21">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3771:9" pos:end="3771:14">break;</break>

    <case pos:start="3773:5" pos:end="3773:14">case <expr pos:start="3773:10" pos:end="3773:13"><literal type="number" pos:start="3773:10" pos:end="3773:13">0xfa</literal></expr>:</case> <comment type="block" pos:start="3773:16" pos:end="3773:24">/* cli */</comment>

        <if_stmt pos:start="3775:9" pos:end="3795:9"><if pos:start="3775:9" pos:end="3785:9">if <condition pos:start="3775:12" pos:end="3775:21">(<expr pos:start="3775:13" pos:end="3775:20"><operator pos:start="3775:13" pos:end="3775:13">!</operator><name pos:start="3775:14" pos:end="3775:20"><name pos:start="3775:14" pos:end="3775:14">s</name><operator pos:start="3775:15" pos:end="3775:16">-&gt;</operator><name pos:start="3775:17" pos:end="3775:20">vm86</name></name></expr>)</condition> <block pos:start="3775:23" pos:end="3785:9">{<block_content pos:start="3777:13" pos:end="3783:50">

            <if_stmt pos:start="3777:13" pos:end="3783:50"><if pos:start="3777:13" pos:end="3779:29">if <condition pos:start="3777:16" pos:end="3777:34">(<expr pos:start="3777:17" pos:end="3777:33"><name pos:start="3777:17" pos:end="3777:22"><name pos:start="3777:17" pos:end="3777:17">s</name><operator pos:start="3777:18" pos:end="3777:19">-&gt;</operator><name pos:start="3777:20" pos:end="3777:22">cpl</name></name> <operator pos:start="3777:24" pos:end="3777:25">&lt;=</operator> <name pos:start="3777:27" pos:end="3777:33"><name pos:start="3777:27" pos:end="3777:27">s</name><operator pos:start="3777:28" pos:end="3777:29">-&gt;</operator><name pos:start="3777:30" pos:end="3777:33">iopl</name></name></expr>)</condition><block type="pseudo" pos:start="3779:17" pos:end="3779:29"><block_content pos:start="3779:17" pos:end="3779:29">

                <expr_stmt pos:start="3779:17" pos:end="3779:29"><expr pos:start="3779:17" pos:end="3779:28"><call pos:start="3779:17" pos:end="3779:28"><name pos:start="3779:17" pos:end="3779:26">gen_op_cli</name><argument_list pos:start="3779:27" pos:end="3779:28">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3781:13" pos:end="3783:50">else<block type="pseudo" pos:start="3783:17" pos:end="3783:50"><block_content pos:start="3783:17" pos:end="3783:50">

                <expr_stmt pos:start="3783:17" pos:end="3783:50"><expr pos:start="3783:17" pos:end="3783:49"><call pos:start="3783:17" pos:end="3783:49"><name pos:start="3783:17" pos:end="3783:26">gen_op_gpf</name><argument_list pos:start="3783:27" pos:end="3783:49">(<argument pos:start="3783:28" pos:end="3783:48"><expr pos:start="3783:28" pos:end="3783:48"><name pos:start="3783:28" pos:end="3783:35">pc_start</name> <operator pos:start="3783:37" pos:end="3783:37">-</operator> <name pos:start="3783:39" pos:end="3783:48"><name pos:start="3783:39" pos:end="3783:39">s</name><operator pos:start="3783:40" pos:end="3783:41">-&gt;</operator><name pos:start="3783:42" pos:end="3783:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="3785:11" pos:end="3795:9">else <block pos:start="3785:16" pos:end="3795:9">{<block_content pos:start="3787:13" pos:end="3793:32">

            <if_stmt pos:start="3787:13" pos:end="3793:32"><if pos:start="3787:13" pos:end="3789:29">if <condition pos:start="3787:16" pos:end="3787:29">(<expr pos:start="3787:17" pos:end="3787:28"><name pos:start="3787:17" pos:end="3787:23"><name pos:start="3787:17" pos:end="3787:17">s</name><operator pos:start="3787:18" pos:end="3787:19">-&gt;</operator><name pos:start="3787:20" pos:end="3787:23">iopl</name></name> <operator pos:start="3787:25" pos:end="3787:26">==</operator> <literal type="number" pos:start="3787:28" pos:end="3787:28">3</literal></expr>)</condition><block type="pseudo" pos:start="3789:17" pos:end="3789:29"><block_content pos:start="3789:17" pos:end="3789:29">

                <expr_stmt pos:start="3789:17" pos:end="3789:29"><expr pos:start="3789:17" pos:end="3789:28"><call pos:start="3789:17" pos:end="3789:28"><name pos:start="3789:17" pos:end="3789:26">gen_op_cli</name><argument_list pos:start="3789:27" pos:end="3789:28">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3791:13" pos:end="3793:32">else<block type="pseudo" pos:start="3793:17" pos:end="3793:32"><block_content pos:start="3793:17" pos:end="3793:32">

                <expr_stmt pos:start="3793:17" pos:end="3793:32"><expr pos:start="3793:17" pos:end="3793:31"><call pos:start="3793:17" pos:end="3793:31"><name pos:start="3793:17" pos:end="3793:29">gen_op_cli_vm</name><argument_list pos:start="3793:30" pos:end="3793:31">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3797:9" pos:end="3797:14">break;</break>

    <case pos:start="3799:5" pos:end="3799:14">case <expr pos:start="3799:10" pos:end="3799:13"><literal type="number" pos:start="3799:10" pos:end="3799:13">0xfb</literal></expr>:</case> <comment type="block" pos:start="3799:16" pos:end="3799:24">/* sti */</comment>

        <if_stmt pos:start="3801:9" pos:end="3821:9"><if pos:start="3801:9" pos:end="3811:9">if <condition pos:start="3801:12" pos:end="3801:21">(<expr pos:start="3801:13" pos:end="3801:20"><operator pos:start="3801:13" pos:end="3801:13">!</operator><name pos:start="3801:14" pos:end="3801:20"><name pos:start="3801:14" pos:end="3801:14">s</name><operator pos:start="3801:15" pos:end="3801:16">-&gt;</operator><name pos:start="3801:17" pos:end="3801:20">vm86</name></name></expr>)</condition> <block pos:start="3801:23" pos:end="3811:9">{<block_content pos:start="3803:13" pos:end="3809:50">

            <if_stmt pos:start="3803:13" pos:end="3809:50"><if pos:start="3803:13" pos:end="3805:29">if <condition pos:start="3803:16" pos:end="3803:34">(<expr pos:start="3803:17" pos:end="3803:33"><name pos:start="3803:17" pos:end="3803:22"><name pos:start="3803:17" pos:end="3803:17">s</name><operator pos:start="3803:18" pos:end="3803:19">-&gt;</operator><name pos:start="3803:20" pos:end="3803:22">cpl</name></name> <operator pos:start="3803:24" pos:end="3803:25">&lt;=</operator> <name pos:start="3803:27" pos:end="3803:33"><name pos:start="3803:27" pos:end="3803:27">s</name><operator pos:start="3803:28" pos:end="3803:29">-&gt;</operator><name pos:start="3803:30" pos:end="3803:33">iopl</name></name></expr>)</condition><block type="pseudo" pos:start="3805:17" pos:end="3805:29"><block_content pos:start="3805:17" pos:end="3805:29">

                <expr_stmt pos:start="3805:17" pos:end="3805:29"><expr pos:start="3805:17" pos:end="3805:28"><call pos:start="3805:17" pos:end="3805:28"><name pos:start="3805:17" pos:end="3805:26">gen_op_sti</name><argument_list pos:start="3805:27" pos:end="3805:28">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3807:13" pos:end="3809:50">else<block type="pseudo" pos:start="3809:17" pos:end="3809:50"><block_content pos:start="3809:17" pos:end="3809:50">

                <expr_stmt pos:start="3809:17" pos:end="3809:50"><expr pos:start="3809:17" pos:end="3809:49"><call pos:start="3809:17" pos:end="3809:49"><name pos:start="3809:17" pos:end="3809:26">gen_op_gpf</name><argument_list pos:start="3809:27" pos:end="3809:49">(<argument pos:start="3809:28" pos:end="3809:48"><expr pos:start="3809:28" pos:end="3809:48"><name pos:start="3809:28" pos:end="3809:35">pc_start</name> <operator pos:start="3809:37" pos:end="3809:37">-</operator> <name pos:start="3809:39" pos:end="3809:48"><name pos:start="3809:39" pos:end="3809:39">s</name><operator pos:start="3809:40" pos:end="3809:41">-&gt;</operator><name pos:start="3809:42" pos:end="3809:48">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="3811:11" pos:end="3821:9">else <block pos:start="3811:16" pos:end="3821:9">{<block_content pos:start="3813:13" pos:end="3819:53">

            <if_stmt pos:start="3813:13" pos:end="3819:53"><if pos:start="3813:13" pos:end="3815:29">if <condition pos:start="3813:16" pos:end="3813:29">(<expr pos:start="3813:17" pos:end="3813:28"><name pos:start="3813:17" pos:end="3813:23"><name pos:start="3813:17" pos:end="3813:17">s</name><operator pos:start="3813:18" pos:end="3813:19">-&gt;</operator><name pos:start="3813:20" pos:end="3813:23">iopl</name></name> <operator pos:start="3813:25" pos:end="3813:26">==</operator> <literal type="number" pos:start="3813:28" pos:end="3813:28">3</literal></expr>)</condition><block type="pseudo" pos:start="3815:17" pos:end="3815:29"><block_content pos:start="3815:17" pos:end="3815:29">

                <expr_stmt pos:start="3815:17" pos:end="3815:29"><expr pos:start="3815:17" pos:end="3815:28"><call pos:start="3815:17" pos:end="3815:28"><name pos:start="3815:17" pos:end="3815:26">gen_op_sti</name><argument_list pos:start="3815:27" pos:end="3815:28">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3817:13" pos:end="3819:53">else<block type="pseudo" pos:start="3819:17" pos:end="3819:53"><block_content pos:start="3819:17" pos:end="3819:53">

                <expr_stmt pos:start="3819:17" pos:end="3819:53"><expr pos:start="3819:17" pos:end="3819:52"><call pos:start="3819:17" pos:end="3819:52"><name pos:start="3819:17" pos:end="3819:29">gen_op_sti_vm</name><argument_list pos:start="3819:30" pos:end="3819:52">(<argument pos:start="3819:31" pos:end="3819:51"><expr pos:start="3819:31" pos:end="3819:51"><name pos:start="3819:31" pos:end="3819:38">pc_start</name> <operator pos:start="3819:40" pos:end="3819:40">-</operator> <name pos:start="3819:42" pos:end="3819:51"><name pos:start="3819:42" pos:end="3819:42">s</name><operator pos:start="3819:43" pos:end="3819:44">-&gt;</operator><name pos:start="3819:45" pos:end="3819:51">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3823:9" pos:end="3823:14">break;</break>

    <case pos:start="3825:5" pos:end="3825:14">case <expr pos:start="3825:10" pos:end="3825:13"><literal type="number" pos:start="3825:10" pos:end="3825:13">0x62</literal></expr>:</case> <comment type="block" pos:start="3825:16" pos:end="3825:26">/* bound */</comment>

        <expr_stmt pos:start="3827:9" pos:end="3827:39"><expr pos:start="3827:9" pos:end="3827:38"><name pos:start="3827:9" pos:end="3827:10">ot</name> <operator pos:start="3827:12" pos:end="3827:12">=</operator> <ternary pos:start="3827:14" pos:end="3827:38"><condition pos:start="3827:14" pos:end="3827:20"><expr pos:start="3827:14" pos:end="3827:18"><name pos:start="3827:14" pos:end="3827:18">dflag</name></expr> ?</condition><then pos:start="3827:22" pos:end="3827:28"> <expr pos:start="3827:22" pos:end="3827:28"><name pos:start="3827:22" pos:end="3827:28">OT_LONG</name></expr> </then><else pos:start="3827:30" pos:end="3827:38">: <expr pos:start="3827:32" pos:end="3827:38"><name pos:start="3827:32" pos:end="3827:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3829:9" pos:end="3829:30"><expr pos:start="3829:9" pos:end="3829:29"><name pos:start="3829:9" pos:end="3829:13">modrm</name> <operator pos:start="3829:15" pos:end="3829:15">=</operator> <call pos:start="3829:17" pos:end="3829:29"><name pos:start="3829:17" pos:end="3829:20">ldub</name><argument_list pos:start="3829:21" pos:end="3829:29">(<argument pos:start="3829:22" pos:end="3829:28"><expr pos:start="3829:22" pos:end="3829:28"><name pos:start="3829:22" pos:end="3829:26"><name pos:start="3829:22" pos:end="3829:22">s</name><operator pos:start="3829:23" pos:end="3829:24">-&gt;</operator><name pos:start="3829:25" pos:end="3829:26">pc</name></name><operator pos:start="3829:27" pos:end="3829:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3831:9" pos:end="3831:31"><expr pos:start="3831:9" pos:end="3831:30"><name pos:start="3831:9" pos:end="3831:11">reg</name> <operator pos:start="3831:13" pos:end="3831:13">=</operator> <operator pos:start="3831:15" pos:end="3831:15">(</operator><name pos:start="3831:16" pos:end="3831:20">modrm</name> <operator pos:start="3831:22" pos:end="3831:23">&gt;&gt;</operator> <literal type="number" pos:start="3831:25" pos:end="3831:25">3</literal><operator pos:start="3831:26" pos:end="3831:26">)</operator> <operator pos:start="3831:28" pos:end="3831:28">&amp;</operator> <literal type="number" pos:start="3831:30" pos:end="3831:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3833:9" pos:end="3833:31"><expr pos:start="3833:9" pos:end="3833:30"><name pos:start="3833:9" pos:end="3833:11">mod</name> <operator pos:start="3833:13" pos:end="3833:13">=</operator> <operator pos:start="3833:15" pos:end="3833:15">(</operator><name pos:start="3833:16" pos:end="3833:20">modrm</name> <operator pos:start="3833:22" pos:end="3833:23">&gt;&gt;</operator> <literal type="number" pos:start="3833:25" pos:end="3833:25">6</literal><operator pos:start="3833:26" pos:end="3833:26">)</operator> <operator pos:start="3833:28" pos:end="3833:28">&amp;</operator> <literal type="number" pos:start="3833:30" pos:end="3833:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="3835:9" pos:end="3837:28"><if pos:start="3835:9" pos:end="3837:28">if <condition pos:start="3835:12" pos:end="3835:21">(<expr pos:start="3835:13" pos:end="3835:20"><name pos:start="3835:13" pos:end="3835:15">mod</name> <operator pos:start="3835:17" pos:end="3835:18">==</operator> <literal type="number" pos:start="3835:20" pos:end="3835:20">3</literal></expr>)</condition><block type="pseudo" pos:start="3837:13" pos:end="3837:28"><block_content pos:start="3837:13" pos:end="3837:28">

            <goto pos:start="3837:13" pos:end="3837:28">goto <name pos:start="3837:18" pos:end="3837:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3839:9" pos:end="3839:37"><expr pos:start="3839:9" pos:end="3839:36"><name pos:start="3839:9" pos:end="3839:34"><name pos:start="3839:9" pos:end="3839:25">gen_op_mov_reg_T0</name><index pos:start="3839:26" pos:end="3839:29">[<expr pos:start="3839:27" pos:end="3839:28"><name pos:start="3839:27" pos:end="3839:28">ot</name></expr>]</index><index pos:start="3839:30" pos:end="3839:34">[<expr pos:start="3839:31" pos:end="3839:33"><name pos:start="3839:31" pos:end="3839:33">reg</name></expr>]</index></name><operator pos:start="3839:35" pos:end="3839:35">(</operator><operator pos:start="3839:36" pos:end="3839:36">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3841:9" pos:end="3841:57"><expr pos:start="3841:9" pos:end="3841:56"><call pos:start="3841:9" pos:end="3841:56"><name pos:start="3841:9" pos:end="3841:21">gen_lea_modrm</name><argument_list pos:start="3841:22" pos:end="3841:56">(<argument pos:start="3841:23" pos:end="3841:23"><expr pos:start="3841:23" pos:end="3841:23"><name pos:start="3841:23" pos:end="3841:23">s</name></expr></argument>, <argument pos:start="3841:26" pos:end="3841:30"><expr pos:start="3841:26" pos:end="3841:30"><name pos:start="3841:26" pos:end="3841:30">modrm</name></expr></argument>, <argument pos:start="3841:33" pos:end="3841:41"><expr pos:start="3841:33" pos:end="3841:41"><operator pos:start="3841:33" pos:end="3841:33">&amp;</operator><name pos:start="3841:34" pos:end="3841:41">reg_addr</name></expr></argument>, <argument pos:start="3841:44" pos:end="3841:55"><expr pos:start="3841:44" pos:end="3841:55"><operator pos:start="3841:44" pos:end="3841:44">&amp;</operator><name pos:start="3841:45" pos:end="3841:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3843:9" pos:end="3849:28"><if pos:start="3843:9" pos:end="3845:28">if <condition pos:start="3843:12" pos:end="3843:26">(<expr pos:start="3843:13" pos:end="3843:25"><name pos:start="3843:13" pos:end="3843:14">ot</name> <operator pos:start="3843:16" pos:end="3843:17">==</operator> <name pos:start="3843:19" pos:end="3843:25">OT_WORD</name></expr>)</condition><block type="pseudo" pos:start="3845:13" pos:end="3845:28"><block_content pos:start="3845:13" pos:end="3845:28">

            <expr_stmt pos:start="3845:13" pos:end="3845:28"><expr pos:start="3845:13" pos:end="3845:27"><call pos:start="3845:13" pos:end="3845:27"><name pos:start="3845:13" pos:end="3845:25">gen_op_boundw</name><argument_list pos:start="3845:26" pos:end="3845:27">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3847:9" pos:end="3849:28">else<block type="pseudo" pos:start="3849:13" pos:end="3849:28"><block_content pos:start="3849:13" pos:end="3849:28">

            <expr_stmt pos:start="3849:13" pos:end="3849:28"><expr pos:start="3849:13" pos:end="3849:27"><call pos:start="3849:13" pos:end="3849:27"><name pos:start="3849:13" pos:end="3849:25">gen_op_boundl</name><argument_list pos:start="3849:26" pos:end="3849:27">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="3851:9" pos:end="3851:14">break;</break>

    <case pos:start="3853:5" pos:end="3853:25">case <expr pos:start="3853:10" pos:end="3853:24"><literal type="number" pos:start="3853:10" pos:end="3853:14">0x1c8</literal> <operator pos:start="3853:16" pos:end="3853:18">...</operator> <literal type="number" pos:start="3853:20" pos:end="3853:24">0x1cf</literal></expr>:</case> <comment type="block" pos:start="3853:27" pos:end="3853:41">/* bswap reg */</comment>

        <expr_stmt pos:start="3855:9" pos:end="3855:20"><expr pos:start="3855:9" pos:end="3855:19"><name pos:start="3855:9" pos:end="3855:11">reg</name> <operator pos:start="3855:13" pos:end="3855:13">=</operator> <name pos:start="3855:15" pos:end="3855:15">b</name> <operator pos:start="3855:17" pos:end="3855:17">&amp;</operator> <literal type="number" pos:start="3855:19" pos:end="3855:19">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3857:9" pos:end="3857:45"><expr pos:start="3857:9" pos:end="3857:44"><name pos:start="3857:9" pos:end="3857:42"><name pos:start="3857:9" pos:end="3857:25">gen_op_mov_TN_reg</name><index pos:start="3857:26" pos:end="3857:34">[<expr pos:start="3857:27" pos:end="3857:33"><name pos:start="3857:27" pos:end="3857:33">OT_LONG</name></expr>]</index><index pos:start="3857:35" pos:end="3857:37">[<expr pos:start="3857:36" pos:end="3857:36"><literal type="number" pos:start="3857:36" pos:end="3857:36">0</literal></expr>]</index><index pos:start="3857:38" pos:end="3857:42">[<expr pos:start="3857:39" pos:end="3857:41"><name pos:start="3857:39" pos:end="3857:41">reg</name></expr>]</index></name><operator pos:start="3857:43" pos:end="3857:43">(</operator><operator pos:start="3857:44" pos:end="3857:44">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3859:9" pos:end="3859:27"><expr pos:start="3859:9" pos:end="3859:26"><call pos:start="3859:9" pos:end="3859:26"><name pos:start="3859:9" pos:end="3859:24">gen_op_bswapl_T0</name><argument_list pos:start="3859:25" pos:end="3859:26">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3861:9" pos:end="3861:42"><expr pos:start="3861:9" pos:end="3861:41"><name pos:start="3861:9" pos:end="3861:39"><name pos:start="3861:9" pos:end="3861:25">gen_op_mov_reg_T0</name><index pos:start="3861:26" pos:end="3861:34">[<expr pos:start="3861:27" pos:end="3861:33"><name pos:start="3861:27" pos:end="3861:33">OT_LONG</name></expr>]</index><index pos:start="3861:35" pos:end="3861:39">[<expr pos:start="3861:36" pos:end="3861:38"><name pos:start="3861:36" pos:end="3861:38">reg</name></expr>]</index></name><operator pos:start="3861:40" pos:end="3861:40">(</operator><operator pos:start="3861:41" pos:end="3861:41">)</operator></expr>;</expr_stmt>

        <break pos:start="3863:9" pos:end="3863:14">break;</break>

    <case pos:start="3865:5" pos:end="3865:14">case <expr pos:start="3865:10" pos:end="3865:13"><literal type="number" pos:start="3865:10" pos:end="3865:13">0xd6</literal></expr>:</case> <comment type="block" pos:start="3865:16" pos:end="3865:25">/* salc */</comment>

        <if_stmt pos:start="3867:9" pos:end="3869:39"><if pos:start="3867:9" pos:end="3869:39">if <condition pos:start="3867:12" pos:end="3867:38">(<expr pos:start="3867:13" pos:end="3867:37"><name pos:start="3867:13" pos:end="3867:20"><name pos:start="3867:13" pos:end="3867:13">s</name><operator pos:start="3867:14" pos:end="3867:15">-&gt;</operator><name pos:start="3867:16" pos:end="3867:20">cc_op</name></name> <operator pos:start="3867:22" pos:end="3867:23">!=</operator> <name pos:start="3867:25" pos:end="3867:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3869:13" pos:end="3869:39"><block_content pos:start="3869:13" pos:end="3869:39">

            <expr_stmt pos:start="3869:13" pos:end="3869:39"><expr pos:start="3869:13" pos:end="3869:38"><call pos:start="3869:13" pos:end="3869:38"><name pos:start="3869:13" pos:end="3869:28">gen_op_set_cc_op</name><argument_list pos:start="3869:29" pos:end="3869:38">(<argument pos:start="3869:30" pos:end="3869:37"><expr pos:start="3869:30" pos:end="3869:37"><name pos:start="3869:30" pos:end="3869:37"><name pos:start="3869:30" pos:end="3869:30">s</name><operator pos:start="3869:31" pos:end="3869:32">-&gt;</operator><name pos:start="3869:33" pos:end="3869:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3871:9" pos:end="3871:22"><expr pos:start="3871:9" pos:end="3871:21"><call pos:start="3871:9" pos:end="3871:21"><name pos:start="3871:9" pos:end="3871:19">gen_op_salc</name><argument_list pos:start="3871:20" pos:end="3871:21">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3873:9" pos:end="3873:14">break;</break>

    <case pos:start="3875:5" pos:end="3875:14">case <expr pos:start="3875:10" pos:end="3875:13"><literal type="number" pos:start="3875:10" pos:end="3875:13">0xe0</literal></expr>:</case> <comment type="block" pos:start="3875:16" pos:end="3875:27">/* loopnz */</comment>

    <case pos:start="3877:5" pos:end="3877:14">case <expr pos:start="3877:10" pos:end="3877:13"><literal type="number" pos:start="3877:10" pos:end="3877:13">0xe1</literal></expr>:</case> <comment type="block" pos:start="3877:16" pos:end="3877:26">/* loopz */</comment>

        <if_stmt pos:start="3879:9" pos:end="3881:39"><if pos:start="3879:9" pos:end="3881:39">if <condition pos:start="3879:12" pos:end="3879:38">(<expr pos:start="3879:13" pos:end="3879:37"><name pos:start="3879:13" pos:end="3879:20"><name pos:start="3879:13" pos:end="3879:13">s</name><operator pos:start="3879:14" pos:end="3879:15">-&gt;</operator><name pos:start="3879:16" pos:end="3879:20">cc_op</name></name> <operator pos:start="3879:22" pos:end="3879:23">!=</operator> <name pos:start="3879:25" pos:end="3879:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3881:13" pos:end="3881:39"><block_content pos:start="3881:13" pos:end="3881:39">

            <expr_stmt pos:start="3881:13" pos:end="3881:39"><expr pos:start="3881:13" pos:end="3881:38"><call pos:start="3881:13" pos:end="3881:38"><name pos:start="3881:13" pos:end="3881:28">gen_op_set_cc_op</name><argument_list pos:start="3881:29" pos:end="3881:38">(<argument pos:start="3881:30" pos:end="3881:37"><expr pos:start="3881:30" pos:end="3881:37"><name pos:start="3881:30" pos:end="3881:37"><name pos:start="3881:30" pos:end="3881:30">s</name><operator pos:start="3881:31" pos:end="3881:32">-&gt;</operator><name pos:start="3881:33" pos:end="3881:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="3883:9" pos:end="3883:23">/* FALL THRU */</comment>

    <case pos:start="3885:5" pos:end="3885:14">case <expr pos:start="3885:10" pos:end="3885:13"><literal type="number" pos:start="3885:10" pos:end="3885:13">0xe2</literal></expr>:</case> <comment type="block" pos:start="3885:16" pos:end="3885:25">/* loop */</comment>

    <case pos:start="3887:5" pos:end="3887:14">case <expr pos:start="3887:10" pos:end="3887:13"><literal type="number" pos:start="3887:10" pos:end="3887:13">0xe3</literal></expr>:</case> <comment type="block" pos:start="3887:16" pos:end="3887:26">/* jecxz */</comment>

        <expr_stmt pos:start="3889:9" pos:end="3889:43"><expr pos:start="3889:9" pos:end="3889:42"><name pos:start="3889:9" pos:end="3889:11">val</name> <operator pos:start="3889:13" pos:end="3889:13">=</operator> <operator pos:start="3889:15" pos:end="3889:15">(</operator><name pos:start="3889:16" pos:end="3889:21">int8_t</name><operator pos:start="3889:22" pos:end="3889:22">)</operator><call pos:start="3889:23" pos:end="3889:42"><name pos:start="3889:23" pos:end="3889:30">insn_get</name><argument_list pos:start="3889:31" pos:end="3889:42">(<argument pos:start="3889:32" pos:end="3889:32"><expr pos:start="3889:32" pos:end="3889:32"><name pos:start="3889:32" pos:end="3889:32">s</name></expr></argument>, <argument pos:start="3889:35" pos:end="3889:41"><expr pos:start="3889:35" pos:end="3889:41"><name pos:start="3889:35" pos:end="3889:41">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3891:9" pos:end="3891:38"><expr pos:start="3891:9" pos:end="3891:37"><name pos:start="3891:9" pos:end="3891:16">next_eip</name> <operator pos:start="3891:18" pos:end="3891:18">=</operator> <name pos:start="3891:20" pos:end="3891:24"><name pos:start="3891:20" pos:end="3891:20">s</name><operator pos:start="3891:21" pos:end="3891:22">-&gt;</operator><name pos:start="3891:23" pos:end="3891:24">pc</name></name> <operator pos:start="3891:26" pos:end="3891:26">-</operator> <name pos:start="3891:28" pos:end="3891:37"><name pos:start="3891:28" pos:end="3891:28">s</name><operator pos:start="3891:29" pos:end="3891:30">-&gt;</operator><name pos:start="3891:31" pos:end="3891:37">cs_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="3893:9" pos:end="3893:24"><expr pos:start="3893:9" pos:end="3893:23"><name pos:start="3893:9" pos:end="3893:11">val</name> <operator pos:start="3893:13" pos:end="3893:14">+=</operator> <name pos:start="3893:16" pos:end="3893:23">next_eip</name></expr>;</expr_stmt>

        <if_stmt pos:start="3895:9" pos:end="3897:26"><if pos:start="3895:9" pos:end="3897:26">if <condition pos:start="3895:12" pos:end="3895:26">(<expr pos:start="3895:13" pos:end="3895:25"><name pos:start="3895:13" pos:end="3895:20"><name pos:start="3895:13" pos:end="3895:13">s</name><operator pos:start="3895:14" pos:end="3895:15">-&gt;</operator><name pos:start="3895:16" pos:end="3895:20">dflag</name></name> <operator pos:start="3895:22" pos:end="3895:23">==</operator> <literal type="number" pos:start="3895:25" pos:end="3895:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3897:13" pos:end="3897:26"><block_content pos:start="3897:13" pos:end="3897:26">

            <expr_stmt pos:start="3897:13" pos:end="3897:26"><expr pos:start="3897:13" pos:end="3897:25"><name pos:start="3897:13" pos:end="3897:15">val</name> <operator pos:start="3897:17" pos:end="3897:18">&amp;=</operator> <literal type="number" pos:start="3897:20" pos:end="3897:25">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3899:9" pos:end="3899:52"><expr pos:start="3899:9" pos:end="3899:51"><name pos:start="3899:9" pos:end="3899:36"><name pos:start="3899:9" pos:end="3899:19">gen_op_loop</name><index pos:start="3899:20" pos:end="3899:29">[<expr pos:start="3899:21" pos:end="3899:28"><name pos:start="3899:21" pos:end="3899:28"><name pos:start="3899:21" pos:end="3899:21">s</name><operator pos:start="3899:22" pos:end="3899:23">-&gt;</operator><name pos:start="3899:24" pos:end="3899:28">aflag</name></name></expr>]</index><index pos:start="3899:30" pos:end="3899:36">[<expr pos:start="3899:31" pos:end="3899:35"><name pos:start="3899:31" pos:end="3899:31">b</name> <operator pos:start="3899:33" pos:end="3899:33">&amp;</operator> <literal type="number" pos:start="3899:35" pos:end="3899:35">3</literal></expr>]</index></name><operator pos:start="3899:37" pos:end="3899:37">(</operator><name pos:start="3899:38" pos:end="3899:40">val</name><operator pos:start="3899:41" pos:end="3899:41">,</operator> <name pos:start="3899:43" pos:end="3899:50">next_eip</name><operator pos:start="3899:51" pos:end="3899:51">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3901:9" pos:end="3901:22"><expr pos:start="3901:9" pos:end="3901:21"><name pos:start="3901:9" pos:end="3901:17"><name pos:start="3901:9" pos:end="3901:9">s</name><operator pos:start="3901:10" pos:end="3901:11">-&gt;</operator><name pos:start="3901:12" pos:end="3901:17">is_jmp</name></name> <operator pos:start="3901:19" pos:end="3901:19">=</operator> <literal type="number" pos:start="3901:21" pos:end="3901:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3903:9" pos:end="3903:14">break;</break>

    <case pos:start="3905:5" pos:end="3905:15">case <expr pos:start="3905:10" pos:end="3905:14"><literal type="number" pos:start="3905:10" pos:end="3905:14">0x131</literal></expr>:</case> <comment type="block" pos:start="3905:17" pos:end="3905:27">/* rdtsc */</comment>

        <expr_stmt pos:start="3907:9" pos:end="3907:23"><expr pos:start="3907:9" pos:end="3907:22"><call pos:start="3907:9" pos:end="3907:22"><name pos:start="3907:9" pos:end="3907:20">gen_op_rdtsc</name><argument_list pos:start="3907:21" pos:end="3907:22">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3909:9" pos:end="3909:14">break;</break>

    <case pos:start="3911:5" pos:end="3911:15">case <expr pos:start="3911:10" pos:end="3911:14"><literal type="number" pos:start="3911:10" pos:end="3911:14">0x1a2</literal></expr>:</case> <comment type="block" pos:start="3911:17" pos:end="3911:27">/* cpuid */</comment>

        <expr_stmt pos:start="3913:9" pos:end="3913:23"><expr pos:start="3913:9" pos:end="3913:22"><call pos:start="3913:9" pos:end="3913:22"><name pos:start="3913:9" pos:end="3913:20">gen_op_cpuid</name><argument_list pos:start="3913:21" pos:end="3913:22">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3915:9" pos:end="3915:14">break;</break>

    <case pos:start="3917:5" pos:end="3917:14">case <expr pos:start="3917:10" pos:end="3917:13"><literal type="number" pos:start="3917:10" pos:end="3917:13">0xf4</literal></expr>:</case> <comment type="block" pos:start="3917:16" pos:end="3917:24">/* hlt */</comment>

        <if_stmt pos:start="3919:9" pos:end="3927:9"><if pos:start="3919:9" pos:end="3923:9">if <condition pos:start="3919:12" pos:end="3919:24">(<expr pos:start="3919:13" pos:end="3919:23"><name pos:start="3919:13" pos:end="3919:18"><name pos:start="3919:13" pos:end="3919:13">s</name><operator pos:start="3919:14" pos:end="3919:15">-&gt;</operator><name pos:start="3919:16" pos:end="3919:18">cpl</name></name> <operator pos:start="3919:20" pos:end="3919:21">==</operator> <literal type="number" pos:start="3919:23" pos:end="3919:23">0</literal></expr>)</condition> <block pos:start="3919:26" pos:end="3923:9">{<block_content>

            <comment type="block" pos:start="3921:13" pos:end="3921:25">/* ignored */</comment>

        </block_content>}</block></if> <else pos:start="3923:11" pos:end="3927:9">else <block pos:start="3923:16" pos:end="3927:9">{<block_content pos:start="3925:13" pos:end="3925:46">

            <expr_stmt pos:start="3925:13" pos:end="3925:46"><expr pos:start="3925:13" pos:end="3925:45"><call pos:start="3925:13" pos:end="3925:45"><name pos:start="3925:13" pos:end="3925:22">gen_op_gpf</name><argument_list pos:start="3925:23" pos:end="3925:45">(<argument pos:start="3925:24" pos:end="3925:44"><expr pos:start="3925:24" pos:end="3925:44"><name pos:start="3925:24" pos:end="3925:31">pc_start</name> <operator pos:start="3925:33" pos:end="3925:33">-</operator> <name pos:start="3925:35" pos:end="3925:44"><name pos:start="3925:35" pos:end="3925:35">s</name><operator pos:start="3925:36" pos:end="3925:37">-&gt;</operator><name pos:start="3925:38" pos:end="3925:44">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="3929:9" pos:end="3929:14">break;</break>

    <default pos:start="3931:5" pos:end="3931:12">default:</default>

        <goto pos:start="3933:9" pos:end="3933:24">goto <name pos:start="3933:14" pos:end="3933:23">illegal_op</name>;</goto>

    </block_content>}</block></switch>

    <comment type="block" pos:start="3937:5" pos:end="3937:25">/* lock generation */</comment>

    <if_stmt pos:start="3939:5" pos:end="3941:24"><if pos:start="3939:5" pos:end="3941:24">if <condition pos:start="3939:8" pos:end="3939:32">(<expr pos:start="3939:9" pos:end="3939:31"><name pos:start="3939:9" pos:end="3939:17"><name pos:start="3939:9" pos:end="3939:9">s</name><operator pos:start="3939:10" pos:end="3939:11">-&gt;</operator><name pos:start="3939:12" pos:end="3939:17">prefix</name></name> <operator pos:start="3939:19" pos:end="3939:19">&amp;</operator> <name pos:start="3939:21" pos:end="3939:31">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="3941:9" pos:end="3941:24"><block_content pos:start="3941:9" pos:end="3941:24">

        <expr_stmt pos:start="3941:9" pos:end="3941:24"><expr pos:start="3941:9" pos:end="3941:23"><call pos:start="3941:9" pos:end="3941:23"><name pos:start="3941:9" pos:end="3941:21">gen_op_unlock</name><argument_list pos:start="3941:22" pos:end="3941:23">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="3943:5" pos:end="3943:23">return <expr pos:start="3943:12" pos:end="3943:22"><operator pos:start="3943:12" pos:end="3943:12">(</operator><name pos:start="3943:13" pos:end="3943:16">long</name><operator pos:start="3943:17" pos:end="3943:17">)</operator><name pos:start="3943:18" pos:end="3943:22"><name pos:start="3943:18" pos:end="3943:18">s</name><operator pos:start="3943:19" pos:end="3943:20">-&gt;</operator><name pos:start="3943:21" pos:end="3943:22">pc</name></name></expr>;</return>

 <label pos:start="3945:2" pos:end="3945:12"><name pos:start="3945:2" pos:end="3945:11">illegal_op</name>:</label>

    <comment type="block" pos:start="3947:5" pos:end="3947:48">/* XXX: ensure that no lock was generated */</comment>

    <return pos:start="3949:5" pos:end="3949:14">return <expr pos:start="3949:12" pos:end="3949:13"><operator pos:start="3949:12" pos:end="3949:12">-</operator><literal type="number" pos:start="3949:13" pos:end="3949:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
