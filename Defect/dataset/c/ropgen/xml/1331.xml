<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1331.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:28">avcodec_decode_subtitle2</name><parameter_list pos:start="1:29" pos:end="5:45">(<parameter pos:start="1:30" pos:end="1:50"><decl pos:start="1:30" pos:end="1:50"><type pos:start="1:30" pos:end="1:50"><name pos:start="1:30" pos:end="1:43">AVCodecContext</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">avctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:67"><decl pos:start="1:53" pos:end="1:67"><type pos:start="1:53" pos:end="1:67"><name pos:start="1:53" pos:end="1:62">AVSubtitle</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">sub</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:45"><decl pos:start="3:30" pos:end="3:45"><type pos:start="3:30" pos:end="3:45"><name pos:start="3:30" pos:end="3:32">int</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:45">got_sub_ptr</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:44"><decl pos:start="5:30" pos:end="5:44"><type pos:start="5:30" pos:end="5:44"><name pos:start="5:30" pos:end="5:37">AVPacket</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="185:1">{<block_content pos:start="9:5" pos:end="183:15">

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:14">ret</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:36">(<expr pos:start="13:9" pos:end="13:35"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:20"><name pos:start="13:10" pos:end="13:14">avpkt</name><operator pos:start="13:15" pos:end="13:16">-&gt;</operator><name pos:start="13:17" pos:end="13:20">data</name></name> <operator pos:start="13:22" pos:end="13:23">&amp;&amp;</operator> <name pos:start="13:25" pos:end="13:35"><name pos:start="13:25" pos:end="13:29">avpkt</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:35">size</name></name></expr>)</condition> <block pos:start="13:38" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:31">

        <expr_stmt pos:start="15:9" pos:end="15:78"><expr pos:start="15:9" pos:end="15:77"><call pos:start="15:9" pos:end="15:77"><name pos:start="15:9" pos:end="15:14">av_log</name><argument_list pos:start="15:15" pos:end="15:77">(<argument pos:start="15:16" pos:end="15:20"><expr pos:start="15:16" pos:end="15:20"><name pos:start="15:16" pos:end="15:20">avctx</name></expr></argument>, <argument pos:start="15:23" pos:end="15:34"><expr pos:start="15:23" pos:end="15:34"><name pos:start="15:23" pos:end="15:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="15:37" pos:end="15:76"><expr pos:start="15:37" pos:end="15:76"><literal type="string" pos:start="15:37" pos:end="15:76">"invalid packet: NULL data, size != 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:31">return <expr pos:start="17:16" pos:end="17:30"><call pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:22">AVERROR</name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="23:31"><if pos:start="21:5" pos:end="23:31">if <condition pos:start="21:8" pos:end="21:22">(<expr pos:start="21:9" pos:end="21:21"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:21"><name pos:start="21:10" pos:end="21:14">avctx</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:21">codec</name></name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:31"><block_content pos:start="23:9" pos:end="23:31">

        <return pos:start="23:9" pos:end="23:31">return <expr pos:start="23:16" pos:end="23:30"><call pos:start="23:16" pos:end="23:30"><name pos:start="23:16" pos:end="23:22">AVERROR</name><argument_list pos:start="23:23" pos:end="23:30">(<argument pos:start="23:24" pos:end="23:29"><expr pos:start="23:24" pos:end="23:29"><name pos:start="23:24" pos:end="23:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:52">(<expr pos:start="25:9" pos:end="25:51"><name pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:13">avctx</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:20">codec</name><operator pos:start="25:21" pos:end="25:22">-&gt;</operator><name pos:start="25:23" pos:end="25:26">type</name></name> <operator pos:start="25:28" pos:end="25:29">!=</operator> <name pos:start="25:31" pos:end="25:51">AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block pos:start="25:54" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:31">

        <expr_stmt pos:start="27:9" pos:end="27:74"><expr pos:start="27:9" pos:end="27:73"><call pos:start="27:9" pos:end="27:73"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:73">(<argument pos:start="27:16" pos:end="27:20"><expr pos:start="27:16" pos:end="27:20"><name pos:start="27:16" pos:end="27:20">avctx</name></expr></argument>, <argument pos:start="27:23" pos:end="27:34"><expr pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:37" pos:end="27:72"><expr pos:start="27:37" pos:end="27:72"><literal type="string" pos:start="27:37" pos:end="27:72">"Invalid media type for subtitles\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:31">return <expr pos:start="29:16" pos:end="29:30"><call pos:start="29:16" pos:end="29:30"><name pos:start="29:16" pos:end="29:22">AVERROR</name><argument_list pos:start="29:23" pos:end="29:30">(<argument pos:start="29:24" pos:end="29:29"><expr pos:start="29:24" pos:end="29:29"><name pos:start="29:24" pos:end="29:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:21"><expr pos:start="35:5" pos:end="35:20"><operator pos:start="35:5" pos:end="35:5">*</operator><name pos:start="35:6" pos:end="35:16">got_sub_ptr</name> <operator pos:start="35:18" pos:end="35:18">=</operator> <literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:31"><expr pos:start="37:5" pos:end="37:30"><call pos:start="37:5" pos:end="37:30"><name pos:start="37:5" pos:end="37:25">get_subtitle_defaults</name><argument_list pos:start="37:26" pos:end="37:30">(<argument pos:start="37:27" pos:end="37:29"><expr pos:start="37:27" pos:end="37:29"><name pos:start="37:27" pos:end="37:29">sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="179:5"><if pos:start="41:5" pos:end="179:5">if <condition pos:start="41:8" pos:end="41:73">(<expr pos:start="41:9" pos:end="41:72"><operator pos:start="41:9" pos:end="41:9">(</operator><name pos:start="41:10" pos:end="41:35"><name pos:start="41:10" pos:end="41:14">avctx</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:21">codec</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:35">capabilities</name></name> <operator pos:start="41:37" pos:end="41:37">&amp;</operator> <name pos:start="41:39" pos:end="41:56">AV_CODEC_CAP_DELAY</name><operator pos:start="41:57" pos:end="41:57">)</operator> <operator pos:start="41:59" pos:end="41:60">||</operator> <name pos:start="41:62" pos:end="41:72"><name pos:start="41:62" pos:end="41:66">avpkt</name><operator pos:start="41:67" pos:end="41:68">-&gt;</operator><name pos:start="41:69" pos:end="41:72">size</name></name></expr>)</condition> <block pos:start="41:75" pos:end="179:5">{<block_content pos:start="43:9" pos:end="177:34">

        <decl_stmt pos:start="43:9" pos:end="43:29"><decl pos:start="43:9" pos:end="43:28"><type pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:16">AVPacket</name></type> <name pos:start="43:18" pos:end="43:28">pkt_recoded</name></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:30"><decl pos:start="45:9" pos:end="45:29"><type pos:start="45:9" pos:end="45:16"><name pos:start="45:9" pos:end="45:16">AVPacket</name></type> <name pos:start="45:18" pos:end="45:20">tmp</name> <init pos:start="45:22" pos:end="45:29">= <expr pos:start="45:24" pos:end="45:29"><operator pos:start="45:24" pos:end="45:24">*</operator><name pos:start="45:25" pos:end="45:29">avpkt</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:56"><decl pos:start="47:9" pos:end="47:55"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:21">did_split</name> <init pos:start="47:23" pos:end="47:55">= <expr pos:start="47:25" pos:end="47:55"><call pos:start="47:25" pos:end="47:55"><name pos:start="47:25" pos:end="47:49">av_packet_split_side_data</name><argument_list pos:start="47:50" pos:end="47:55">(<argument pos:start="47:51" pos:end="47:54"><expr pos:start="47:51" pos:end="47:54"><operator pos:start="47:51" pos:end="47:51">&amp;</operator><name pos:start="47:52" pos:end="47:54">tmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line" pos:start="49:9" pos:end="49:42">//apply_param_change(avctx, &amp;tmp);</comment>



        <if_stmt pos:start="53:9" pos:end="69:9"><if pos:start="53:9" pos:end="69:9">if <condition pos:start="53:12" pos:end="53:22">(<expr pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:21">did_split</name></expr>)</condition> <block pos:start="53:24" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:80">

            <comment type="block" pos:start="55:13" pos:end="63:52">/* FFMIN() prevents overflow in case the packet wasn't allocated with

             * proper padding.

             * If the side data is smaller than the buffer padding size, the

             * remaining bytes should have already been filled with zeros by the

             * original packet allocation anyway. */</comment>

            <expr_stmt pos:start="65:13" pos:end="67:80"><expr pos:start="65:13" pos:end="67:79"><call pos:start="65:13" pos:end="67:79"><name pos:start="65:13" pos:end="65:18">memset</name><argument_list pos:start="65:19" pos:end="67:79">(<argument pos:start="65:20" pos:end="65:38"><expr pos:start="65:20" pos:end="65:38"><name pos:start="65:20" pos:end="65:27"><name pos:start="65:20" pos:end="65:22">tmp</name><operator pos:start="65:23" pos:end="65:23">.</operator><name pos:start="65:24" pos:end="65:27">data</name></name> <operator pos:start="65:29" pos:end="65:29">+</operator> <name pos:start="65:31" pos:end="65:38"><name pos:start="65:31" pos:end="65:33">tmp</name><operator pos:start="65:34" pos:end="65:34">.</operator><name pos:start="65:35" pos:end="65:38">size</name></name></expr></argument>, <argument pos:start="65:41" pos:end="65:41"><expr pos:start="65:41" pos:end="65:41"><literal type="number" pos:start="65:41" pos:end="65:41">0</literal></expr></argument>,

                   <argument pos:start="67:20" pos:end="67:78"><expr pos:start="67:20" pos:end="67:78"><call pos:start="67:20" pos:end="67:78"><name pos:start="67:20" pos:end="67:24">FFMIN</name><argument_list pos:start="67:25" pos:end="67:78">(<argument pos:start="67:26" pos:end="67:47"><expr pos:start="67:26" pos:end="67:47"><name pos:start="67:26" pos:end="67:36"><name pos:start="67:26" pos:end="67:30">avpkt</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:36">size</name></name> <operator pos:start="67:38" pos:end="67:38">-</operator> <name pos:start="67:40" pos:end="67:47"><name pos:start="67:40" pos:end="67:42">tmp</name><operator pos:start="67:43" pos:end="67:43">.</operator><name pos:start="67:44" pos:end="67:47">size</name></name></expr></argument>, <argument pos:start="67:50" pos:end="67:77"><expr pos:start="67:50" pos:end="67:77"><name pos:start="67:50" pos:end="67:77">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:26"><expr pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:19">pkt_recoded</name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:25">tmp</name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:57"><expr pos:start="75:9" pos:end="75:56"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:56"><name pos:start="75:15" pos:end="75:29">recode_subtitle</name><argument_list pos:start="75:30" pos:end="75:56">(<argument pos:start="75:31" pos:end="75:35"><expr pos:start="75:31" pos:end="75:35"><name pos:start="75:31" pos:end="75:35">avctx</name></expr></argument>, <argument pos:start="75:38" pos:end="75:49"><expr pos:start="75:38" pos:end="75:49"><operator pos:start="75:38" pos:end="75:38">&amp;</operator><name pos:start="75:39" pos:end="75:49">pkt_recoded</name></expr></argument>, <argument pos:start="75:52" pos:end="75:55"><expr pos:start="75:52" pos:end="75:55"><operator pos:start="75:52" pos:end="75:52">&amp;</operator><name pos:start="75:53" pos:end="75:55">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="159:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:20">(<expr pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:15">ret</name> <operator pos:start="77:17" pos:end="77:17">&lt;</operator> <literal type="number" pos:start="77:19" pos:end="77:19">0</literal></expr>)</condition> <block pos:start="77:22" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:29">

            <expr_stmt pos:start="79:13" pos:end="79:29"><expr pos:start="79:13" pos:end="79:28"><operator pos:start="79:13" pos:end="79:13">*</operator><name pos:start="79:14" pos:end="79:24">got_sub_ptr</name> <operator pos:start="79:26" pos:end="79:26">=</operator> <literal type="number" pos:start="79:28" pos:end="79:28">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="81:11" pos:end="159:9">else <block pos:start="81:16" pos:end="159:9">{<block_content pos:start="83:13" pos:end="157:40">

            <expr_stmt pos:start="83:13" pos:end="83:48"><expr pos:start="83:13" pos:end="83:47"><name pos:start="83:13" pos:end="83:32"><name pos:start="83:13" pos:end="83:17">avctx</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:27">internal</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:32">pkt</name></name> <operator pos:start="83:34" pos:end="83:34">=</operator> <operator pos:start="83:36" pos:end="83:36">&amp;</operator><name pos:start="83:37" pos:end="83:47">pkt_recoded</name></expr>;</expr_stmt>



            <if_stmt pos:start="87:13" pos:end="91:77"><if pos:start="87:13" pos:end="91:77">if <condition pos:start="87:16" pos:end="87:72">(<expr pos:start="87:17" pos:end="87:71"><name pos:start="87:17" pos:end="87:39"><name pos:start="87:17" pos:end="87:21">avctx</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:35">pkt_timebase</name><operator pos:start="87:36" pos:end="87:36">.</operator><name pos:start="87:37" pos:end="87:39">den</name></name> <operator pos:start="87:41" pos:end="87:42">&amp;&amp;</operator> <name pos:start="87:44" pos:end="87:53"><name pos:start="87:44" pos:end="87:48">avpkt</name><operator pos:start="87:49" pos:end="87:50">-&gt;</operator><name pos:start="87:51" pos:end="87:53">pts</name></name> <operator pos:start="87:55" pos:end="87:56">!=</operator> <name pos:start="87:58" pos:end="87:71">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="89:17" pos:end="91:77"><block_content pos:start="89:17" pos:end="91:77">

                <expr_stmt pos:start="89:17" pos:end="91:77"><expr pos:start="89:17" pos:end="91:76"><name pos:start="89:17" pos:end="89:24"><name pos:start="89:17" pos:end="89:19">sub</name><operator pos:start="89:20" pos:end="89:21">-&gt;</operator><name pos:start="89:22" pos:end="89:24">pts</name></name> <operator pos:start="89:26" pos:end="89:26">=</operator> <call pos:start="89:28" pos:end="91:76"><name pos:start="89:28" pos:end="89:39">av_rescale_q</name><argument_list pos:start="89:40" pos:end="91:76">(<argument pos:start="89:41" pos:end="89:50"><expr pos:start="89:41" pos:end="89:50"><name pos:start="89:41" pos:end="89:50"><name pos:start="89:41" pos:end="89:45">avpkt</name><operator pos:start="89:46" pos:end="89:47">-&gt;</operator><name pos:start="89:48" pos:end="89:50">pts</name></name></expr></argument>,

                                        <argument pos:start="91:41" pos:end="91:59"><expr pos:start="91:41" pos:end="91:59"><name pos:start="91:41" pos:end="91:59"><name pos:start="91:41" pos:end="91:45">avctx</name><operator pos:start="91:46" pos:end="91:47">-&gt;</operator><name pos:start="91:48" pos:end="91:59">pkt_timebase</name></name></expr></argument>, <argument pos:start="91:62" pos:end="91:75"><expr pos:start="91:62" pos:end="91:75"><name pos:start="91:62" pos:end="91:75">AV_TIME_BASE_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:78"><expr pos:start="93:13" pos:end="93:77"><name pos:start="93:13" pos:end="93:15">ret</name> <operator pos:start="93:17" pos:end="93:17">=</operator> <call pos:start="93:19" pos:end="93:77"><name pos:start="93:19" pos:end="93:38"><name pos:start="93:19" pos:end="93:23">avctx</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:30">codec</name><operator pos:start="93:31" pos:end="93:32">-&gt;</operator><name pos:start="93:33" pos:end="93:38">decode</name></name><argument_list pos:start="93:39" pos:end="93:77">(<argument pos:start="93:40" pos:end="93:44"><expr pos:start="93:40" pos:end="93:44"><name pos:start="93:40" pos:end="93:44">avctx</name></expr></argument>, <argument pos:start="93:47" pos:end="93:49"><expr pos:start="93:47" pos:end="93:49"><name pos:start="93:47" pos:end="93:49">sub</name></expr></argument>, <argument pos:start="93:52" pos:end="93:62"><expr pos:start="93:52" pos:end="93:62"><name pos:start="93:52" pos:end="93:62">got_sub_ptr</name></expr></argument>, <argument pos:start="93:65" pos:end="93:76"><expr pos:start="93:65" pos:end="93:76"><operator pos:start="93:65" pos:end="93:65">&amp;</operator><name pos:start="93:66" pos:end="93:76">pkt_recoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="97:59"><expr pos:start="95:13" pos:end="97:58"><call pos:start="95:13" pos:end="97:58"><name pos:start="95:13" pos:end="95:22">av_assert1</name><argument_list pos:start="95:23" pos:end="97:58">(<argument pos:start="95:24" pos:end="97:57"><expr pos:start="95:24" pos:end="97:57"><operator pos:start="95:24" pos:end="95:24">(</operator><name pos:start="95:25" pos:end="95:27">ret</name> <operator pos:start="95:29" pos:end="95:30">&gt;=</operator> <literal type="number" pos:start="95:32" pos:end="95:32">0</literal><operator pos:start="95:33" pos:end="95:33">)</operator> <operator pos:start="95:35" pos:end="95:36">&gt;=</operator> <operator pos:start="95:38" pos:end="95:38">!</operator><operator pos:start="95:39" pos:end="95:39">!</operator><operator pos:start="95:40" pos:end="95:40">*</operator><name pos:start="95:41" pos:end="95:51">got_sub_ptr</name> <operator pos:start="95:53" pos:end="95:54">&amp;&amp;</operator>

                       <operator pos:start="97:24" pos:end="97:24">!</operator><operator pos:start="97:25" pos:end="97:25">!</operator><operator pos:start="97:26" pos:end="97:26">*</operator><name pos:start="97:27" pos:end="97:37">got_sub_ptr</name> <operator pos:start="97:39" pos:end="97:40">&gt;=</operator> <operator pos:start="97:42" pos:end="97:42">!</operator><operator pos:start="97:43" pos:end="97:43">!</operator><name pos:start="97:44" pos:end="97:57"><name pos:start="97:44" pos:end="97:46">sub</name><operator pos:start="97:47" pos:end="97:48">-&gt;</operator><name pos:start="97:49" pos:end="97:57">num_rects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="101:13" pos:end="111:13"><if pos:start="101:13" pos:end="111:13">if <condition pos:start="101:16" pos:end="103:40">(<expr pos:start="101:17" pos:end="103:39"><name pos:start="101:17" pos:end="101:30"><name pos:start="101:17" pos:end="101:19">sub</name><operator pos:start="101:20" pos:end="101:21">-&gt;</operator><name pos:start="101:22" pos:end="101:30">num_rects</name></name> <operator pos:start="101:32" pos:end="101:33">&amp;&amp;</operator> <operator pos:start="101:35" pos:end="101:35">!</operator><name pos:start="101:36" pos:end="101:56"><name pos:start="101:36" pos:end="101:38">sub</name><operator pos:start="101:39" pos:end="101:40">-&gt;</operator><name pos:start="101:41" pos:end="101:56">end_display_time</name></name> <operator pos:start="101:58" pos:end="101:59">&amp;&amp;</operator> <name pos:start="101:61" pos:end="101:75"><name pos:start="101:61" pos:end="101:65">avpkt</name><operator pos:start="101:66" pos:end="101:67">-&gt;</operator><name pos:start="101:68" pos:end="101:75">duration</name></name> <operator pos:start="101:77" pos:end="101:78">&amp;&amp;</operator>

                <name pos:start="103:17" pos:end="103:39"><name pos:start="103:17" pos:end="103:21">avctx</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:35">pkt_timebase</name><operator pos:start="103:36" pos:end="103:36">.</operator><name pos:start="103:37" pos:end="103:39">num</name></name></expr>)</condition> <block pos:start="103:42" pos:end="111:13">{<block_content pos:start="105:17" pos:end="109:78">

                <decl_stmt pos:start="105:17" pos:end="105:44"><decl pos:start="105:17" pos:end="105:43"><type pos:start="105:17" pos:end="105:26"><name pos:start="105:17" pos:end="105:26">AVRational</name></type> <name pos:start="105:28" pos:end="105:29">ms</name> <init pos:start="105:31" pos:end="105:43">= <expr pos:start="105:33" pos:end="105:43"><block pos:start="105:33" pos:end="105:43">{ <expr pos:start="105:35" pos:end="105:35"><literal type="number" pos:start="105:35" pos:end="105:35">1</literal></expr>, <expr pos:start="105:38" pos:end="105:41"><literal type="number" pos:start="105:38" pos:end="105:41">1000</literal></expr> }</block></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="107:17" pos:end="109:78"><expr pos:start="107:17" pos:end="109:77"><name pos:start="107:17" pos:end="107:37"><name pos:start="107:17" pos:end="107:19">sub</name><operator pos:start="107:20" pos:end="107:21">-&gt;</operator><name pos:start="107:22" pos:end="107:37">end_display_time</name></name> <operator pos:start="107:39" pos:end="107:39">=</operator> <call pos:start="107:41" pos:end="109:77"><name pos:start="107:41" pos:end="107:52">av_rescale_q</name><argument_list pos:start="107:53" pos:end="109:77">(<argument pos:start="107:54" pos:end="107:68"><expr pos:start="107:54" pos:end="107:68"><name pos:start="107:54" pos:end="107:68"><name pos:start="107:54" pos:end="107:58">avpkt</name><operator pos:start="107:59" pos:end="107:60">-&gt;</operator><name pos:start="107:61" pos:end="107:68">duration</name></name></expr></argument>,

                                                     <argument pos:start="109:54" pos:end="109:72"><expr pos:start="109:54" pos:end="109:72"><name pos:start="109:54" pos:end="109:72"><name pos:start="109:54" pos:end="109:58">avctx</name><operator pos:start="109:59" pos:end="109:60">-&gt;</operator><name pos:start="109:61" pos:end="109:72">pkt_timebase</name></name></expr></argument>, <argument pos:start="109:75" pos:end="109:76"><expr pos:start="109:75" pos:end="109:76"><name pos:start="109:75" pos:end="109:76">ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <for pos:start="115:13" pos:end="131:13">for <control pos:start="115:17" pos:end="115:48">(<init pos:start="115:18" pos:end="115:23"><expr pos:start="115:18" pos:end="115:22"><name pos:start="115:18" pos:end="115:18">i</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <literal type="number" pos:start="115:22" pos:end="115:22">0</literal></expr>;</init> <condition pos:start="115:25" pos:end="115:43"><expr pos:start="115:25" pos:end="115:42"><name pos:start="115:25" pos:end="115:25">i</name> <operator pos:start="115:27" pos:end="115:27">&lt;</operator> <name pos:start="115:29" pos:end="115:42"><name pos:start="115:29" pos:end="115:31">sub</name><operator pos:start="115:32" pos:end="115:33">-&gt;</operator><name pos:start="115:34" pos:end="115:42">num_rects</name></name></expr>;</condition> <incr pos:start="115:45" pos:end="115:47"><expr pos:start="115:45" pos:end="115:47"><name pos:start="115:45" pos:end="115:45">i</name><operator pos:start="115:46" pos:end="115:47">++</operator></expr></incr>)</control> <block pos:start="115:50" pos:end="131:13">{<block_content pos:start="117:17" pos:end="129:17">

                <if_stmt pos:start="117:17" pos:end="129:17"><if pos:start="117:17" pos:end="129:17">if <condition pos:start="117:20" pos:end="117:74">(<expr pos:start="117:21" pos:end="117:73"><name pos:start="117:21" pos:end="117:33"><name pos:start="117:21" pos:end="117:23">sub</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:30">rects</name><index pos:start="117:31" pos:end="117:33">[<expr pos:start="117:32" pos:end="117:32"><name pos:start="117:32" pos:end="117:32">i</name></expr>]</index></name><operator pos:start="117:34" pos:end="117:35">-&gt;</operator><name pos:start="117:36" pos:end="117:38">ass</name> <operator pos:start="117:40" pos:end="117:41">&amp;&amp;</operator> <operator pos:start="117:43" pos:end="117:43">!</operator><call pos:start="117:44" pos:end="117:73"><name pos:start="117:44" pos:end="117:53">utf8_check</name><argument_list pos:start="117:54" pos:end="117:73">(<argument pos:start="117:55" pos:end="117:72"><expr pos:start="117:55" pos:end="117:72"><name pos:start="117:55" pos:end="117:67"><name pos:start="117:55" pos:end="117:57">sub</name><operator pos:start="117:58" pos:end="117:59">-&gt;</operator><name pos:start="117:60" pos:end="117:64">rects</name><index pos:start="117:65" pos:end="117:67">[<expr pos:start="117:66" pos:end="117:66"><name pos:start="117:66" pos:end="117:66">i</name></expr>]</index></name><operator pos:start="117:68" pos:end="117:69">-&gt;</operator><name pos:start="117:70" pos:end="117:72">ass</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:76" pos:end="129:17">{<block_content pos:start="119:21" pos:end="127:47">

                    <expr_stmt pos:start="119:21" pos:end="123:66"><expr pos:start="119:21" pos:end="123:65"><call pos:start="119:21" pos:end="123:65"><name pos:start="119:21" pos:end="119:26">av_log</name><argument_list pos:start="119:27" pos:end="123:65">(<argument pos:start="119:28" pos:end="119:32"><expr pos:start="119:28" pos:end="119:32"><name pos:start="119:28" pos:end="119:32">avctx</name></expr></argument>, <argument pos:start="119:35" pos:end="119:46"><expr pos:start="119:35" pos:end="119:46"><name pos:start="119:35" pos:end="119:46">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="121:28" pos:end="123:64"><expr pos:start="121:28" pos:end="123:64"><literal type="string" pos:start="121:28" pos:end="121:70">"Invalid UTF-8 in decoded subtitles text; "</literal>

                           <literal type="string" pos:start="123:28" pos:end="123:64">"maybe missing -sub_charenc option\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="125:21" pos:end="125:41"><expr pos:start="125:21" pos:end="125:40"><call pos:start="125:21" pos:end="125:40"><name pos:start="125:21" pos:end="125:35">avsubtitle_free</name><argument_list pos:start="125:36" pos:end="125:40">(<argument pos:start="125:37" pos:end="125:39"><expr pos:start="125:37" pos:end="125:39"><name pos:start="125:37" pos:end="125:39">sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="127:21" pos:end="127:47">return <expr pos:start="127:28" pos:end="127:46"><name pos:start="127:28" pos:end="127:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>



            <if_stmt pos:start="135:13" pos:end="147:13"><if pos:start="135:13" pos:end="147:13">if <condition pos:start="135:16" pos:end="135:45">(<expr pos:start="135:17" pos:end="135:44"><name pos:start="135:17" pos:end="135:24"><name pos:start="135:17" pos:end="135:19">tmp</name><operator pos:start="135:20" pos:end="135:20">.</operator><name pos:start="135:21" pos:end="135:24">data</name></name> <operator pos:start="135:26" pos:end="135:27">!=</operator> <name pos:start="135:29" pos:end="135:44"><name pos:start="135:29" pos:end="135:39">pkt_recoded</name><operator pos:start="135:40" pos:end="135:40">.</operator><name pos:start="135:41" pos:end="135:44">data</name></name></expr>)</condition> <block pos:start="135:47" pos:end="147:13">{<block_content pos:start="139:17" pos:end="145:46"> <comment type="line" pos:start="135:49" pos:end="135:65">// did we recode?</comment>

                <comment type="block" pos:start="137:17" pos:end="137:76">/* prevent from destroying side data from original packet */</comment>

                <expr_stmt pos:start="139:17" pos:end="139:45"><expr pos:start="139:17" pos:end="139:44"><name pos:start="139:17" pos:end="139:37"><name pos:start="139:17" pos:end="139:27">pkt_recoded</name><operator pos:start="139:28" pos:end="139:28">.</operator><name pos:start="139:29" pos:end="139:37">side_data</name></name> <operator pos:start="139:39" pos:end="139:39">=</operator> <name pos:start="139:41" pos:end="139:44">NULL</name></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:48"><expr pos:start="141:17" pos:end="141:47"><name pos:start="141:17" pos:end="141:43"><name pos:start="141:17" pos:end="141:27">pkt_recoded</name><operator pos:start="141:28" pos:end="141:28">.</operator><name pos:start="141:29" pos:end="141:43">side_data_elems</name></name> <operator pos:start="141:45" pos:end="141:45">=</operator> <literal type="number" pos:start="141:47" pos:end="141:47">0</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="145:17" pos:end="145:46"><expr pos:start="145:17" pos:end="145:45"><call pos:start="145:17" pos:end="145:45"><name pos:start="145:17" pos:end="145:31">av_packet_unref</name><argument_list pos:start="145:32" pos:end="145:45">(<argument pos:start="145:33" pos:end="145:44"><expr pos:start="145:33" pos:end="145:44"><operator pos:start="145:33" pos:end="145:33">&amp;</operator><name pos:start="145:34" pos:end="145:44">pkt_recoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="149:13" pos:end="155:32"><if pos:start="149:13" pos:end="151:32">if <condition pos:start="149:16" pos:end="149:74">(<expr pos:start="149:17" pos:end="149:73"><name pos:start="149:17" pos:end="149:46"><name pos:start="149:17" pos:end="149:21">avctx</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:39">codec_descriptor</name><operator pos:start="149:40" pos:end="149:41">-&gt;</operator><name pos:start="149:42" pos:end="149:46">props</name></name> <operator pos:start="149:48" pos:end="149:48">&amp;</operator> <name pos:start="149:50" pos:end="149:73">AV_CODEC_PROP_BITMAP_SUB</name></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:32"><block_content pos:start="151:17" pos:end="151:32">

                <expr_stmt pos:start="151:17" pos:end="151:32"><expr pos:start="151:17" pos:end="151:31"><name pos:start="151:17" pos:end="151:27"><name pos:start="151:17" pos:end="151:19">sub</name><operator pos:start="151:20" pos:end="151:21">-&gt;</operator><name pos:start="151:22" pos:end="151:27">format</name></name> <operator pos:start="151:29" pos:end="151:29">=</operator> <literal type="number" pos:start="151:31" pos:end="151:31">0</literal></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="153:13" pos:end="155:32">else if <condition pos:start="153:21" pos:end="153:77">(<expr pos:start="153:22" pos:end="153:76"><name pos:start="153:22" pos:end="153:51"><name pos:start="153:22" pos:end="153:26">avctx</name><operator pos:start="153:27" pos:end="153:28">-&gt;</operator><name pos:start="153:29" pos:end="153:44">codec_descriptor</name><operator pos:start="153:45" pos:end="153:46">-&gt;</operator><name pos:start="153:47" pos:end="153:51">props</name></name> <operator pos:start="153:53" pos:end="153:53">&amp;</operator> <name pos:start="153:55" pos:end="153:76">AV_CODEC_PROP_TEXT_SUB</name></expr>)</condition><block type="pseudo" pos:start="155:17" pos:end="155:32"><block_content pos:start="155:17" pos:end="155:32">

                <expr_stmt pos:start="155:17" pos:end="155:32"><expr pos:start="155:17" pos:end="155:31"><name pos:start="155:17" pos:end="155:27"><name pos:start="155:17" pos:end="155:19">sub</name><operator pos:start="155:20" pos:end="155:21">-&gt;</operator><name pos:start="155:22" pos:end="155:27">format</name></name> <operator pos:start="155:29" pos:end="155:29">=</operator> <literal type="number" pos:start="155:31" pos:end="155:31">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:40"><expr pos:start="157:13" pos:end="157:39"><name pos:start="157:13" pos:end="157:32"><name pos:start="157:13" pos:end="157:17">avctx</name><operator pos:start="157:18" pos:end="157:19">-&gt;</operator><name pos:start="157:20" pos:end="157:27">internal</name><operator pos:start="157:28" pos:end="157:29">-&gt;</operator><name pos:start="157:30" pos:end="157:32">pkt</name></name> <operator pos:start="157:34" pos:end="157:34">=</operator> <name pos:start="157:36" pos:end="157:39">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="163:9" pos:end="171:9"><if pos:start="163:9" pos:end="171:9">if <condition pos:start="163:12" pos:end="163:22">(<expr pos:start="163:13" pos:end="163:21"><name pos:start="163:13" pos:end="163:21">did_split</name></expr>)</condition> <block pos:start="163:24" pos:end="171:9">{<block_content pos:start="165:13" pos:end="169:34">

            <expr_stmt pos:start="165:13" pos:end="165:43"><expr pos:start="165:13" pos:end="165:42"><call pos:start="165:13" pos:end="165:42"><name pos:start="165:13" pos:end="165:36">av_packet_free_side_data</name><argument_list pos:start="165:37" pos:end="165:42">(<argument pos:start="165:38" pos:end="165:41"><expr pos:start="165:38" pos:end="165:41"><operator pos:start="165:38" pos:end="165:38">&amp;</operator><name pos:start="165:39" pos:end="165:41">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="167:13" pos:end="169:34"><if pos:start="167:13" pos:end="169:34">if<condition pos:start="167:15" pos:end="167:31">(<expr pos:start="167:16" pos:end="167:30"><name pos:start="167:16" pos:end="167:18">ret</name> <operator pos:start="167:20" pos:end="167:21">==</operator> <name pos:start="167:23" pos:end="167:30"><name pos:start="167:23" pos:end="167:25">tmp</name><operator pos:start="167:26" pos:end="167:26">.</operator><name pos:start="167:27" pos:end="167:30">size</name></name></expr>)</condition><block type="pseudo" pos:start="169:17" pos:end="169:34"><block_content pos:start="169:17" pos:end="169:34">

                <expr_stmt pos:start="169:17" pos:end="169:34"><expr pos:start="169:17" pos:end="169:33"><name pos:start="169:17" pos:end="169:19">ret</name> <operator pos:start="169:21" pos:end="169:21">=</operator> <name pos:start="169:23" pos:end="169:33"><name pos:start="169:23" pos:end="169:27">avpkt</name><operator pos:start="169:28" pos:end="169:29">-&gt;</operator><name pos:start="169:30" pos:end="169:33">size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="175:9" pos:end="177:34"><if pos:start="175:9" pos:end="177:34">if <condition pos:start="175:12" pos:end="175:25">(<expr pos:start="175:13" pos:end="175:24"><operator pos:start="175:13" pos:end="175:13">*</operator><name pos:start="175:14" pos:end="175:24">got_sub_ptr</name></expr>)</condition><block type="pseudo" pos:start="177:13" pos:end="177:34"><block_content pos:start="177:13" pos:end="177:34">

            <expr_stmt pos:start="177:13" pos:end="177:34"><expr pos:start="177:13" pos:end="177:33"><name pos:start="177:13" pos:end="177:31"><name pos:start="177:13" pos:end="177:17">avctx</name><operator pos:start="177:18" pos:end="177:19">-&gt;</operator><name pos:start="177:20" pos:end="177:31">frame_number</name></name><operator pos:start="177:32" pos:end="177:33">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="183:5" pos:end="183:15">return <expr pos:start="183:12" pos:end="183:14"><name pos:start="183:12" pos:end="183:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
