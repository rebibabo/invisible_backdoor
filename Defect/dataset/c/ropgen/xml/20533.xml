<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20533.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">stdio_fclose</name><parameter_list pos:start="1:24" pos:end="1:37">(<parameter pos:start="1:25" pos:end="1:36"><decl pos:start="1:25" pos:end="1:36"><type pos:start="1:25" pos:end="1:30"><name pos:start="1:25" pos:end="1:28">void</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:36">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:15">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">QEMUFileStdio</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:29">= <expr pos:start="5:24" pos:end="5:29"><name pos:start="5:24" pos:end="5:29">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="43:5"><if pos:start="11:5" pos:end="43:5">if <condition pos:start="11:8" pos:end="11:64">(<expr pos:start="11:9" pos:end="11:63"><name pos:start="11:9" pos:end="11:32"><name pos:start="11:9" pos:end="11:9">s</name><operator pos:start="11:10" pos:end="11:11">-&gt;</operator><name pos:start="11:12" pos:end="11:15">file</name><operator pos:start="11:16" pos:end="11:17">-&gt;</operator><name pos:start="11:18" pos:end="11:20">ops</name><operator pos:start="11:21" pos:end="11:22">-&gt;</operator><name pos:start="11:23" pos:end="11:32">put_buffer</name></name> <operator pos:start="11:34" pos:end="11:35">||</operator> <name pos:start="11:37" pos:end="11:63"><name pos:start="11:37" pos:end="11:37">s</name><operator pos:start="11:38" pos:end="11:39">-&gt;</operator><name pos:start="11:40" pos:end="11:43">file</name><operator pos:start="11:44" pos:end="11:45">-&gt;</operator><name pos:start="11:46" pos:end="11:48">ops</name><operator pos:start="11:49" pos:end="11:50">-&gt;</operator><name pos:start="11:51" pos:end="11:63">writev_buffer</name></name></expr>)</condition> <block pos:start="11:66" pos:end="43:5">{<block_content pos:start="13:9" pos:end="41:9">

        <decl_stmt pos:start="13:9" pos:end="13:39"><decl pos:start="13:9" pos:end="13:38"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:14">fd</name> <init pos:start="13:16" pos:end="13:38">= <expr pos:start="13:18" pos:end="13:38"><call pos:start="13:18" pos:end="13:38"><name pos:start="13:18" pos:end="13:23">fileno</name><argument_list pos:start="13:24" pos:end="13:38">(<argument pos:start="13:25" pos:end="13:37"><expr pos:start="13:25" pos:end="13:37"><name pos:start="13:25" pos:end="13:37"><name pos:start="13:25" pos:end="13:25">s</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:37">stdio_file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:23"><decl pos:start="15:9" pos:end="15:22"><type pos:start="15:9" pos:end="15:19"><name pos:start="15:9" pos:end="15:19"><name pos:start="15:9" pos:end="15:14">struct</name> <name pos:start="15:16" pos:end="15:19">stat</name></name></type> <name pos:start="15:21" pos:end="15:22">st</name></decl>;</decl_stmt>



        <expr_stmt pos:start="19:9" pos:end="19:29"><expr pos:start="19:9" pos:end="19:28"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:28"><name pos:start="19:15" pos:end="19:19">fstat</name><argument_list pos:start="19:20" pos:end="19:28">(<argument pos:start="19:21" pos:end="19:22"><expr pos:start="19:21" pos:end="19:22"><name pos:start="19:21" pos:end="19:22">fd</name></expr></argument>, <argument pos:start="19:25" pos:end="19:27"><expr pos:start="19:25" pos:end="19:27"><operator pos:start="19:25" pos:end="19:25">&amp;</operator><name pos:start="19:26" pos:end="19:27">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="21:9" pos:end="41:9"><if pos:start="21:9" pos:end="41:9">if <condition pos:start="21:12" pos:end="21:44">(<expr pos:start="21:13" pos:end="21:43"><name pos:start="21:13" pos:end="21:15">ret</name> <operator pos:start="21:17" pos:end="21:18">==</operator> <literal type="number" pos:start="21:20" pos:end="21:20">0</literal> <operator pos:start="21:22" pos:end="21:23">&amp;&amp;</operator> <call pos:start="21:25" pos:end="21:43"><name pos:start="21:25" pos:end="21:31">S_ISREG</name><argument_list pos:start="21:32" pos:end="21:43">(<argument pos:start="21:33" pos:end="21:42"><expr pos:start="21:33" pos:end="21:42"><name pos:start="21:33" pos:end="21:42"><name pos:start="21:33" pos:end="21:34">st</name><operator pos:start="21:35" pos:end="21:35">.</operator><name pos:start="21:36" pos:end="21:42">st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="21:46" pos:end="41:9">{<block_content pos:start="31:13" pos:end="39:13">

            <comment type="block" pos:start="23:13" pos:end="29:15">/*

             * If the file handle is a regular file make sure the

             * data is flushed to disk before signaling success.

             */</comment>

            <expr_stmt pos:start="31:13" pos:end="31:28"><expr pos:start="31:13" pos:end="31:27"><name pos:start="31:13" pos:end="31:15">ret</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:27"><name pos:start="31:19" pos:end="31:23">fsync</name><argument_list pos:start="31:24" pos:end="31:27">(<argument pos:start="31:25" pos:end="31:26"><expr pos:start="31:25" pos:end="31:26"><name pos:start="31:25" pos:end="31:26">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="33:13" pos:end="39:13"><if pos:start="33:13" pos:end="39:13">if <condition pos:start="33:16" pos:end="33:25">(<expr pos:start="33:17" pos:end="33:24"><name pos:start="33:17" pos:end="33:19">ret</name> <operator pos:start="33:21" pos:end="33:22">!=</operator> <literal type="number" pos:start="33:24" pos:end="33:24">0</literal></expr>)</condition> <block pos:start="33:27" pos:end="39:13">{<block_content pos:start="35:17" pos:end="37:27">

                <expr_stmt pos:start="35:17" pos:end="35:29"><expr pos:start="35:17" pos:end="35:28"><name pos:start="35:17" pos:end="35:19">ret</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <operator pos:start="35:23" pos:end="35:23">-</operator><name pos:start="35:24" pos:end="35:28">errno</name></expr>;</expr_stmt>

                <return pos:start="37:17" pos:end="37:27">return <expr pos:start="37:24" pos:end="37:26"><name pos:start="37:24" pos:end="37:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:37">(<expr pos:start="45:9" pos:end="45:36"><call pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:14">fclose</name><argument_list pos:start="45:15" pos:end="45:29">(<argument pos:start="45:16" pos:end="45:28"><expr pos:start="45:16" pos:end="45:28"><name pos:start="45:16" pos:end="45:28"><name pos:start="45:16" pos:end="45:16">s</name><operator pos:start="45:17" pos:end="45:18">-&gt;</operator><name pos:start="45:19" pos:end="45:28">stdio_file</name></name></expr></argument>)</argument_list></call> <operator pos:start="45:31" pos:end="45:32">==</operator> <name pos:start="45:34" pos:end="45:36">EOF</name></expr>)</condition> <block pos:start="45:39" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:21">

        <expr_stmt pos:start="47:9" pos:end="47:21"><expr pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <operator pos:start="47:15" pos:end="47:15">-</operator><name pos:start="47:16" pos:end="47:20">errno</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:14"><expr pos:start="51:5" pos:end="51:13"><call pos:start="51:5" pos:end="51:13"><name pos:start="51:5" pos:end="51:10">g_free</name><argument_list pos:start="51:11" pos:end="51:13">(<argument pos:start="51:12" pos:end="51:12"><expr pos:start="51:12" pos:end="51:12"><name pos:start="51:12" pos:end="51:12">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="53:5" pos:end="53:15">return <expr pos:start="53:12" pos:end="53:14"><name pos:start="53:12" pos:end="53:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
