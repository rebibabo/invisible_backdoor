<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22836.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:38">json_message_process_token</name><parameter_list pos:start="1:39" pos:end="3:72">(<parameter pos:start="1:40" pos:end="1:55"><decl pos:start="1:40" pos:end="1:55"><type pos:start="1:40" pos:end="1:55"><name pos:start="1:40" pos:end="1:48">JSONLexer</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:55">lexer</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:71"><decl pos:start="1:58" pos:end="1:71"><type pos:start="1:58" pos:end="1:71"><name pos:start="1:58" pos:end="1:64">GString</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:71">input</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:57"><decl pos:start="3:40" pos:end="3:57"><type pos:start="3:40" pos:end="3:57"><name pos:start="3:40" pos:end="3:52">JSONTokenType</name></type> <name pos:start="3:54" pos:end="3:57">type</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:64"><decl pos:start="3:60" pos:end="3:64"><type pos:start="3:60" pos:end="3:64"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:64">x</name></decl></parameter>, <parameter pos:start="3:67" pos:end="3:71"><decl pos:start="3:67" pos:end="3:71"><type pos:start="3:67" pos:end="3:71"><name pos:start="3:67" pos:end="3:69">int</name></type> <name pos:start="3:71" pos:end="3:71">y</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="133:1">{<block_content pos:start="7:5" pos:end="131:27">

    <decl_stmt pos:start="7:5" pos:end="7:78"><decl pos:start="7:5" pos:end="7:77"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">JSONMessageParser</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:29">parser</name> <init pos:start="7:31" pos:end="7:77">= <expr pos:start="7:33" pos:end="7:77"><call pos:start="7:33" pos:end="7:77"><name pos:start="7:33" pos:end="7:44">container_of</name><argument_list pos:start="7:45" pos:end="7:77">(<argument pos:start="7:46" pos:end="7:50"><expr pos:start="7:46" pos:end="7:50"><name pos:start="7:46" pos:end="7:50">lexer</name></expr></argument>, <argument pos:start="7:53" pos:end="7:69"><expr pos:start="7:53" pos:end="7:69"><name pos:start="7:53" pos:end="7:69">JSONMessageParser</name></expr></argument>, <argument pos:start="7:72" pos:end="7:76"><expr pos:start="7:72" pos:end="7:76"><name pos:start="7:72" pos:end="7:76">lexer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">JSONToken</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:20">token</name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="43:5">switch <condition pos:start="13:12" pos:end="13:17">(<expr pos:start="13:13" pos:end="13:16"><name pos:start="13:13" pos:end="13:16">type</name></expr>)</condition> <block pos:start="13:19" pos:end="43:5">{<block_content pos:start="15:5" pos:end="41:14">

    <case pos:start="15:5" pos:end="15:21">case <expr pos:start="15:10" pos:end="15:20"><name pos:start="15:10" pos:end="15:20">JSON_LCURLY</name></expr>:</case>

        <expr_stmt pos:start="17:9" pos:end="17:30"><expr pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:14">parser</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:27">brace_count</name></name><operator pos:start="17:28" pos:end="17:29">++</operator></expr>;</expr_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>

    <case pos:start="21:5" pos:end="21:21">case <expr pos:start="21:10" pos:end="21:20"><name pos:start="21:10" pos:end="21:20">JSON_RCURLY</name></expr>:</case>

        <expr_stmt pos:start="23:9" pos:end="23:30"><expr pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:14">parser</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:27">brace_count</name></name><operator pos:start="23:28" pos:end="23:29">--</operator></expr>;</expr_stmt>

        <break pos:start="25:9" pos:end="25:14">break;</break>

    <case pos:start="27:5" pos:end="27:22">case <expr pos:start="27:10" pos:end="27:21"><name pos:start="27:10" pos:end="27:21">JSON_LSQUARE</name></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:32"><expr pos:start="29:9" pos:end="29:31"><name pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:14">parser</name><operator pos:start="29:15" pos:end="29:16">-&gt;</operator><name pos:start="29:17" pos:end="29:29">bracket_count</name></name><operator pos:start="29:30" pos:end="29:31">++</operator></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:22">case <expr pos:start="33:10" pos:end="33:21"><name pos:start="33:10" pos:end="33:21">JSON_RSQUARE</name></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:32"><expr pos:start="35:9" pos:end="35:31"><name pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:14">parser</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:29">bracket_count</name></name><operator pos:start="35:30" pos:end="35:31">--</operator></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>

    <default pos:start="39:5" pos:end="39:12">default:</default>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    </block_content>}</block></switch>



    <expr_stmt pos:start="47:5" pos:end="47:57"><expr pos:start="47:5" pos:end="47:56"><name pos:start="47:5" pos:end="47:9">token</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <call pos:start="47:13" pos:end="47:56"><name pos:start="47:13" pos:end="47:20">g_malloc</name><argument_list pos:start="47:21" pos:end="47:56">(<argument pos:start="47:22" pos:end="47:55"><expr pos:start="47:22" pos:end="47:55"><sizeof pos:start="47:22" pos:end="47:38">sizeof<argument_list pos:start="47:28" pos:end="47:38">(<argument pos:start="47:29" pos:end="47:37"><expr pos:start="47:29" pos:end="47:37"><name pos:start="47:29" pos:end="47:37">JSONToken</name></expr></argument>)</argument_list></sizeof> <operator pos:start="47:40" pos:end="47:40">+</operator> <name pos:start="47:42" pos:end="47:51"><name pos:start="47:42" pos:end="47:46">input</name><operator pos:start="47:47" pos:end="47:48">-&gt;</operator><name pos:start="47:49" pos:end="47:51">len</name></name> <operator pos:start="47:53" pos:end="47:53">+</operator> <literal type="number" pos:start="47:55" pos:end="47:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:23"><expr pos:start="49:5" pos:end="49:22"><name pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:9">token</name><operator pos:start="49:10" pos:end="49:11">-&gt;</operator><name pos:start="49:12" pos:end="49:15">type</name></name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:22">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:47"><expr pos:start="51:5" pos:end="51:46"><call pos:start="51:5" pos:end="51:46"><name pos:start="51:5" pos:end="51:10">memcpy</name><argument_list pos:start="51:11" pos:end="51:46">(<argument pos:start="51:12" pos:end="51:21"><expr pos:start="51:12" pos:end="51:21"><name pos:start="51:12" pos:end="51:21"><name pos:start="51:12" pos:end="51:16">token</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:21">str</name></name></expr></argument>, <argument pos:start="51:24" pos:end="51:33"><expr pos:start="51:24" pos:end="51:33"><name pos:start="51:24" pos:end="51:33"><name pos:start="51:24" pos:end="51:28">input</name><operator pos:start="51:29" pos:end="51:30">-&gt;</operator><name pos:start="51:31" pos:end="51:33">str</name></name></expr></argument>, <argument pos:start="51:36" pos:end="51:45"><expr pos:start="51:36" pos:end="51:45"><name pos:start="51:36" pos:end="51:45"><name pos:start="51:36" pos:end="51:40">input</name><operator pos:start="51:41" pos:end="51:42">-&gt;</operator><name pos:start="51:43" pos:end="51:45">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:31"><expr pos:start="53:5" pos:end="53:30"><name pos:start="53:5" pos:end="53:26"><name pos:start="53:5" pos:end="53:9">token</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:14">str</name><index pos:start="53:15" pos:end="53:26">[<expr pos:start="53:16" pos:end="53:25"><name pos:start="53:16" pos:end="53:25"><name pos:start="53:16" pos:end="53:20">input</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:25">len</name></name></expr>]</index></name> <operator pos:start="53:28" pos:end="53:28">=</operator> <literal type="number" pos:start="53:30" pos:end="53:30">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:17"><expr pos:start="55:5" pos:end="55:16"><name pos:start="55:5" pos:end="55:12"><name pos:start="55:5" pos:end="55:9">token</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:12">x</name></name> <operator pos:start="55:14" pos:end="55:14">=</operator> <name pos:start="55:16" pos:end="55:16">x</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:17"><expr pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:12"><name pos:start="57:5" pos:end="57:9">token</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:12">y</name></name> <operator pos:start="57:14" pos:end="57:14">=</operator> <name pos:start="57:16" pos:end="57:16">y</name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:37"><expr pos:start="61:5" pos:end="61:36"><name pos:start="61:5" pos:end="61:22"><name pos:start="61:5" pos:end="61:10">parser</name><operator pos:start="61:11" pos:end="61:12">-&gt;</operator><name pos:start="61:13" pos:end="61:22">token_size</name></name> <operator pos:start="61:24" pos:end="61:25">+=</operator> <name pos:start="61:27" pos:end="61:36"><name pos:start="61:27" pos:end="61:31">input</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:36">len</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:45"><expr pos:start="65:5" pos:end="65:44"><call pos:start="65:5" pos:end="65:44"><name pos:start="65:5" pos:end="65:21">g_queue_push_tail</name><argument_list pos:start="65:22" pos:end="65:44">(<argument pos:start="65:23" pos:end="65:36"><expr pos:start="65:23" pos:end="65:36"><name pos:start="65:23" pos:end="65:36"><name pos:start="65:23" pos:end="65:28">parser</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:36">tokens</name></name></expr></argument>, <argument pos:start="65:39" pos:end="65:43"><expr pos:start="65:39" pos:end="65:43"><name pos:start="65:39" pos:end="65:43">token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="97:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:27">(<expr pos:start="69:9" pos:end="69:26"><name pos:start="69:9" pos:end="69:12">type</name> <operator pos:start="69:14" pos:end="69:15">==</operator> <name pos:start="69:17" pos:end="69:26">JSON_ERROR</name></expr>)</condition> <block pos:start="69:29" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:26">

        <goto pos:start="71:9" pos:end="71:26">goto <name pos:start="71:14" pos:end="71:25">out_emit_bad</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="73:7" pos:end="83:5">else if <condition pos:start="73:15" pos:end="79:37">(<expr pos:start="73:16" pos:end="79:36"><name pos:start="73:16" pos:end="73:34"><name pos:start="73:16" pos:end="73:21">parser</name><operator pos:start="73:22" pos:end="73:23">-&gt;</operator><name pos:start="73:24" pos:end="73:34">brace_count</name></name> <operator pos:start="73:36" pos:end="73:36">&lt;</operator> <literal type="number" pos:start="73:38" pos:end="73:38">0</literal> <operator pos:start="73:40" pos:end="73:41">||</operator>

        <name pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:14">parser</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:29">bracket_count</name></name> <operator pos:start="75:31" pos:end="75:31">&lt;</operator> <literal type="number" pos:start="75:33" pos:end="75:33">0</literal> <operator pos:start="75:35" pos:end="75:36">||</operator>

        <operator pos:start="77:9" pos:end="77:9">(</operator><name pos:start="77:10" pos:end="77:28"><name pos:start="77:10" pos:end="77:15">parser</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:28">brace_count</name></name> <operator pos:start="77:30" pos:end="77:31">==</operator> <literal type="number" pos:start="77:33" pos:end="77:33">0</literal> <operator pos:start="77:35" pos:end="77:36">&amp;&amp;</operator>

         <name pos:start="79:10" pos:end="79:30"><name pos:start="79:10" pos:end="79:15">parser</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:30">bracket_count</name></name> <operator pos:start="79:32" pos:end="79:33">==</operator> <literal type="number" pos:start="79:35" pos:end="79:35">0</literal><operator pos:start="79:36" pos:end="79:36">)</operator></expr>)</condition> <block pos:start="79:39" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:22">

        <goto pos:start="81:9" pos:end="81:22">goto <name pos:start="81:14" pos:end="81:21">out_emit</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="83:7" pos:end="97:5">else if <condition pos:start="83:15" pos:end="87:73">(<expr pos:start="83:16" pos:end="87:72"><name pos:start="83:16" pos:end="83:33"><name pos:start="83:16" pos:end="83:21">parser</name><operator pos:start="83:22" pos:end="83:23">-&gt;</operator><name pos:start="83:24" pos:end="83:33">token_size</name></name> <operator pos:start="83:35" pos:end="83:35">&gt;</operator> <name pos:start="83:37" pos:end="83:50">MAX_TOKEN_SIZE</name> <operator pos:start="83:52" pos:end="83:53">||</operator>

               <call pos:start="85:16" pos:end="85:49"><name pos:start="85:16" pos:end="85:33">g_queue_get_length</name><argument_list pos:start="85:34" pos:end="85:49">(<argument pos:start="85:35" pos:end="85:48"><expr pos:start="85:35" pos:end="85:48"><name pos:start="85:35" pos:end="85:48"><name pos:start="85:35" pos:end="85:40">parser</name><operator pos:start="85:41" pos:end="85:42">-&gt;</operator><name pos:start="85:43" pos:end="85:48">tokens</name></name></expr></argument>)</argument_list></call> <operator pos:start="85:51" pos:end="85:51">&gt;</operator> <name pos:start="85:53" pos:end="85:67">MAX_TOKEN_COUNT</name> <operator pos:start="85:69" pos:end="85:70">||</operator>

               <name pos:start="87:16" pos:end="87:36"><name pos:start="87:16" pos:end="87:21">parser</name><operator pos:start="87:22" pos:end="87:23">-&gt;</operator><name pos:start="87:24" pos:end="87:36">bracket_count</name></name> <operator pos:start="87:38" pos:end="87:38">+</operator> <name pos:start="87:40" pos:end="87:58"><name pos:start="87:40" pos:end="87:45">parser</name><operator pos:start="87:46" pos:end="87:47">-&gt;</operator><name pos:start="87:48" pos:end="87:58">brace_count</name></name> <operator pos:start="87:60" pos:end="87:60">&gt;</operator> <name pos:start="87:62" pos:end="87:72">MAX_NESTING</name></expr>)</condition> <block pos:start="87:75" pos:end="97:5">{<block_content pos:start="95:9" pos:end="95:26">

        <comment type="block" pos:start="89:9" pos:end="93:11">/* Security consideration, we limit total memory allocated per object

         * and the maximum recursion depth that a message can force.

         */</comment>

        <goto pos:start="95:9" pos:end="95:26">goto <name pos:start="95:14" pos:end="95:25">out_emit_bad</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="101:5" pos:end="101:11">return;</return>



<label pos:start="105:1" pos:end="105:13"><name pos:start="105:1" pos:end="105:12">out_emit_bad</name>:</label>

    <comment type="block" pos:start="107:5" pos:end="113:7">/*

     * Clear out token list and tell the parser to emit an error

     * indication by passing it a NULL list

     */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:37"><expr pos:start="115:5" pos:end="115:36"><call pos:start="115:5" pos:end="115:36"><name pos:start="115:5" pos:end="115:28">json_message_free_tokens</name><argument_list pos:start="115:29" pos:end="115:36">(<argument pos:start="115:30" pos:end="115:35"><expr pos:start="115:30" pos:end="115:35"><name pos:start="115:30" pos:end="115:35">parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="117:1" pos:end="117:9"><name pos:start="117:1" pos:end="117:8">out_emit</name>:</label>

    <comment type="block" pos:start="119:5" pos:end="119:67">/* send current list of tokens to parser and reset tokenizer */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:28"><expr pos:start="121:5" pos:end="121:27"><name pos:start="121:5" pos:end="121:23"><name pos:start="121:5" pos:end="121:10">parser</name><operator pos:start="121:11" pos:end="121:12">-&gt;</operator><name pos:start="121:13" pos:end="121:23">brace_count</name></name> <operator pos:start="121:25" pos:end="121:25">=</operator> <literal type="number" pos:start="121:27" pos:end="121:27">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:30"><expr pos:start="123:5" pos:end="123:29"><name pos:start="123:5" pos:end="123:25"><name pos:start="123:5" pos:end="123:10">parser</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:25">bracket_count</name></name> <operator pos:start="123:27" pos:end="123:27">=</operator> <literal type="number" pos:start="123:29" pos:end="123:29">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="125:5" pos:end="125:58">/* parser-&gt;emit takes ownership of parser-&gt;tokens.  */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:41"><expr pos:start="127:5" pos:end="127:40"><call pos:start="127:5" pos:end="127:40"><name pos:start="127:5" pos:end="127:16"><name pos:start="127:5" pos:end="127:10">parser</name><operator pos:start="127:11" pos:end="127:12">-&gt;</operator><name pos:start="127:13" pos:end="127:16">emit</name></name><argument_list pos:start="127:17" pos:end="127:40">(<argument pos:start="127:18" pos:end="127:23"><expr pos:start="127:18" pos:end="127:23"><name pos:start="127:18" pos:end="127:23">parser</name></expr></argument>, <argument pos:start="127:26" pos:end="127:39"><expr pos:start="127:26" pos:end="127:39"><name pos:start="127:26" pos:end="127:39"><name pos:start="127:26" pos:end="127:31">parser</name><operator pos:start="127:32" pos:end="127:33">-&gt;</operator><name pos:start="127:34" pos:end="127:39">tokens</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:35"><expr pos:start="129:5" pos:end="129:34"><name pos:start="129:5" pos:end="129:18"><name pos:start="129:5" pos:end="129:10">parser</name><operator pos:start="129:11" pos:end="129:12">-&gt;</operator><name pos:start="129:13" pos:end="129:18">tokens</name></name> <operator pos:start="129:20" pos:end="129:20">=</operator> <call pos:start="129:22" pos:end="129:34"><name pos:start="129:22" pos:end="129:32">g_queue_new</name><argument_list pos:start="129:33" pos:end="129:34">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:27"><expr pos:start="131:5" pos:end="131:26"><name pos:start="131:5" pos:end="131:22"><name pos:start="131:5" pos:end="131:10">parser</name><operator pos:start="131:11" pos:end="131:12">-&gt;</operator><name pos:start="131:13" pos:end="131:22">token_size</name></name> <operator pos:start="131:24" pos:end="131:24">=</operator> <literal type="number" pos:start="131:26" pos:end="131:26">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
