<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24856.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">ivshmem_io_write</name><parameter_list pos:start="1:29" pos:end="3:57">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:66"><decl pos:start="1:44" pos:end="1:66"><type pos:start="1:44" pos:end="1:66"><name pos:start="1:44" pos:end="1:61">target_phys_addr_t</name></type> <name pos:start="1:63" pos:end="1:66">addr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:41"><decl pos:start="3:30" pos:end="3:41"><type pos:start="3:30" pos:end="3:41"><name pos:start="3:30" pos:end="3:37">uint64_t</name></type> <name pos:start="3:39" pos:end="3:41">val</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:56"><decl pos:start="3:44" pos:end="3:56"><type pos:start="3:44" pos:end="3:56"><name pos:start="3:44" pos:end="3:51">unsigned</name></type> <name pos:start="3:53" pos:end="3:56">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="75:1">{<block_content pos:start="7:5" pos:end="73:5">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">IVShmemState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:28">= <expr pos:start="7:23" pos:end="7:28"><name pos:start="7:23" pos:end="7:28">opaque</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:17">dest</name> <init pos:start="11:19" pos:end="11:29">= <expr pos:start="11:21" pos:end="11:29"><name pos:start="11:21" pos:end="11:23">val</name> <operator pos:start="11:25" pos:end="11:26">&gt;&gt;</operator> <literal type="number" pos:start="11:28" pos:end="11:29">16</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint16_t</name></type> <name pos:start="13:14" pos:end="13:19">vector</name> <init pos:start="13:21" pos:end="13:32">= <expr pos:start="13:23" pos:end="13:32"><name pos:start="13:23" pos:end="13:25">val</name> <operator pos:start="13:27" pos:end="13:27">&amp;</operator> <literal type="number" pos:start="13:29" pos:end="13:32">0xff</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:8">addr</name> <operator pos:start="17:10" pos:end="17:11">&amp;=</operator> <literal type="number" pos:start="17:13" pos:end="17:16">0xfc</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:66"><expr pos:start="21:5" pos:end="21:65"><call pos:start="21:5" pos:end="21:65"><name pos:start="21:5" pos:end="21:19">IVSHMEM_DPRINTF</name><argument_list pos:start="21:20" pos:end="21:65">(<argument pos:start="21:21" pos:end="21:58"><expr pos:start="21:21" pos:end="21:58"><literal type="string" pos:start="21:21" pos:end="21:38">"writing to addr "</literal> <name pos:start="21:40" pos:end="21:53">TARGET_FMT_plx</name> <literal type="string" pos:start="21:55" pos:end="21:58">"\n"</literal></expr></argument>, <argument pos:start="21:61" pos:end="21:64"><expr pos:start="21:61" pos:end="21:64"><name pos:start="21:61" pos:end="21:64">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="23:5" pos:end="73:5">switch <condition pos:start="23:12" pos:end="23:17">(<expr pos:start="23:13" pos:end="23:16"><name pos:start="23:13" pos:end="23:16">addr</name></expr>)</condition>

    <block pos:start="25:5" pos:end="73:5">{<block_content pos:start="27:9" pos:end="71:65">

        <case pos:start="27:9" pos:end="27:22">case <expr pos:start="27:14" pos:end="27:21"><name pos:start="27:14" pos:end="27:21">INTRMASK</name></expr>:</case>

            <expr_stmt pos:start="29:13" pos:end="29:43"><expr pos:start="29:13" pos:end="29:42"><call pos:start="29:13" pos:end="29:42"><name pos:start="29:13" pos:end="29:34">ivshmem_IntrMask_write</name><argument_list pos:start="29:35" pos:end="29:42">(<argument pos:start="29:36" pos:end="29:36"><expr pos:start="29:36" pos:end="29:36"><name pos:start="29:36" pos:end="29:36">s</name></expr></argument>, <argument pos:start="29:39" pos:end="29:41"><expr pos:start="29:39" pos:end="29:41"><name pos:start="29:39" pos:end="29:41">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="31:13" pos:end="31:18">break;</break>



        <case pos:start="35:9" pos:end="35:24">case <expr pos:start="35:14" pos:end="35:23"><name pos:start="35:14" pos:end="35:23">INTRSTATUS</name></expr>:</case>

            <expr_stmt pos:start="37:13" pos:end="37:45"><expr pos:start="37:13" pos:end="37:44"><call pos:start="37:13" pos:end="37:44"><name pos:start="37:13" pos:end="37:36">ivshmem_IntrStatus_write</name><argument_list pos:start="37:37" pos:end="37:44">(<argument pos:start="37:38" pos:end="37:38"><expr pos:start="37:38" pos:end="37:38"><name pos:start="37:38" pos:end="37:38">s</name></expr></argument>, <argument pos:start="37:41" pos:end="37:43"><expr pos:start="37:41" pos:end="37:43"><name pos:start="37:41" pos:end="37:43">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="39:13" pos:end="39:18">break;</break>



        <case pos:start="43:9" pos:end="43:22">case <expr pos:start="43:14" pos:end="43:21"><name pos:start="43:14" pos:end="43:21">DOORBELL</name></expr>:</case>

            <comment type="block" pos:start="45:13" pos:end="45:53">/* check that dest VM ID is reasonable */</comment>

            <if_stmt pos:start="47:13" pos:end="53:13"><if pos:start="47:13" pos:end="53:13">if <condition pos:start="47:16" pos:end="47:35">(<expr pos:start="47:17" pos:end="47:34"><name pos:start="47:17" pos:end="47:20">dest</name> <operator pos:start="47:22" pos:end="47:22">&gt;</operator> <name pos:start="47:24" pos:end="47:34"><name pos:start="47:24" pos:end="47:24">s</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:34">max_peer</name></name></expr>)</condition> <block pos:start="47:37" pos:end="53:13">{<block_content pos:start="49:17" pos:end="51:22">

                <expr_stmt pos:start="49:17" pos:end="49:74"><expr pos:start="49:17" pos:end="49:73"><call pos:start="49:17" pos:end="49:73"><name pos:start="49:17" pos:end="49:31">IVSHMEM_DPRINTF</name><argument_list pos:start="49:32" pos:end="49:73">(<argument pos:start="49:33" pos:end="49:66"><expr pos:start="49:33" pos:end="49:66"><literal type="string" pos:start="49:33" pos:end="49:66">"Invalid destination VM ID (%d)\n"</literal></expr></argument>, <argument pos:start="49:69" pos:end="49:72"><expr pos:start="49:69" pos:end="49:72"><name pos:start="49:69" pos:end="49:72">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="51:17" pos:end="51:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="57:13" pos:end="57:38">/* check doorbell range */</comment>

            <if_stmt pos:start="59:13" pos:end="65:13"><if pos:start="59:13" pos:end="65:13">if <condition pos:start="59:16" pos:end="59:52">(<expr pos:start="59:17" pos:end="59:51"><name pos:start="59:17" pos:end="59:22">vector</name> <operator pos:start="59:24" pos:end="59:24">&lt;</operator> <name pos:start="59:26" pos:end="59:39"><name pos:start="59:26" pos:end="59:26">s</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:33">peers</name><index pos:start="59:34" pos:end="59:39">[<expr pos:start="59:35" pos:end="59:38"><name pos:start="59:35" pos:end="59:38">dest</name></expr>]</index></name><operator pos:start="59:40" pos:end="59:40">.</operator><name pos:start="59:41" pos:end="59:51">nb_eventfds</name></expr>)</condition> <block pos:start="59:54" pos:end="65:13">{<block_content pos:start="61:17" pos:end="63:69">

                <expr_stmt pos:start="61:17" pos:end="61:80"><expr pos:start="61:17" pos:end="61:79"><call pos:start="61:17" pos:end="61:79"><name pos:start="61:17" pos:end="61:31">IVSHMEM_DPRINTF</name><argument_list pos:start="61:32" pos:end="61:79">(<argument pos:start="61:33" pos:end="61:64"><expr pos:start="61:33" pos:end="61:64"><literal type="string" pos:start="61:33" pos:end="61:64">"Notifying VM %d on vector %d\n"</literal></expr></argument>, <argument pos:start="61:67" pos:end="61:70"><expr pos:start="61:67" pos:end="61:70"><name pos:start="61:67" pos:end="61:70">dest</name></expr></argument>, <argument pos:start="61:73" pos:end="61:78"><expr pos:start="61:73" pos:end="61:78"><name pos:start="61:73" pos:end="61:78">vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:69"><expr pos:start="63:17" pos:end="63:68"><call pos:start="63:17" pos:end="63:68"><name pos:start="63:17" pos:end="63:34">event_notifier_set</name><argument_list pos:start="63:35" pos:end="63:68">(<argument pos:start="63:36" pos:end="63:67"><expr pos:start="63:36" pos:end="63:67"><operator pos:start="63:36" pos:end="63:36">&amp;</operator><name pos:start="63:37" pos:end="63:50"><name pos:start="63:37" pos:end="63:37">s</name><operator pos:start="63:38" pos:end="63:39">-&gt;</operator><name pos:start="63:40" pos:end="63:44">peers</name><index pos:start="63:45" pos:end="63:50">[<expr pos:start="63:46" pos:end="63:49"><name pos:start="63:46" pos:end="63:49">dest</name></expr>]</index></name><operator pos:start="63:51" pos:end="63:51">.</operator><name pos:start="63:52" pos:end="63:67"><name pos:start="63:52" pos:end="63:59">eventfds</name><index pos:start="63:60" pos:end="63:67">[<expr pos:start="63:61" pos:end="63:66"><name pos:start="63:61" pos:end="63:66">vector</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <default pos:start="69:9" pos:end="69:16">default:</default>

            <expr_stmt pos:start="71:13" pos:end="71:65"><expr pos:start="71:13" pos:end="71:64"><call pos:start="71:13" pos:end="71:64"><name pos:start="71:13" pos:end="71:27">IVSHMEM_DPRINTF</name><argument_list pos:start="71:28" pos:end="71:64">(<argument pos:start="71:29" pos:end="71:57"><expr pos:start="71:29" pos:end="71:57"><literal type="string" pos:start="71:29" pos:end="71:57">"Invalid VM Doorbell VM %d\n"</literal></expr></argument>, <argument pos:start="71:60" pos:end="71:63"><expr pos:start="71:60" pos:end="71:63"><name pos:start="71:60" pos:end="71:63">dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
