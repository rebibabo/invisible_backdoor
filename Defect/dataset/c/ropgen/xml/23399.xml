<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23399.c" pos:tabs="8"><function pos:start="1:1" pos:end="69:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">bool</name></type> <name pos:start="1:6" pos:end="1:27">write_list_to_kvmstate</name><parameter_list pos:start="1:28" pos:end="1:40">(<parameter pos:start="1:29" pos:end="1:39"><decl pos:start="1:29" pos:end="1:39"><type pos:start="1:29" pos:end="1:36"><name pos:start="1:29" pos:end="1:34">ARMCPU</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="69:1">{<block_content pos:start="5:5" pos:end="67:14">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">cs</name> <init pos:start="5:18" pos:end="5:27">= <expr pos:start="5:20" pos:end="5:27"><call pos:start="5:20" pos:end="5:27"><name pos:start="5:20" pos:end="5:22">CPU</name><argument_list pos:start="5:23" pos:end="5:27">(<argument pos:start="5:24" pos:end="5:26"><expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:11">ok</name> <init pos:start="9:13" pos:end="9:18">= <expr pos:start="9:15" pos:end="9:18"><name pos:start="9:15" pos:end="9:18">true</name></expr></init></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="65:5">for <control pos:start="13:9" pos:end="13:46">(<init pos:start="13:10" pos:end="13:15"><expr pos:start="13:10" pos:end="13:14"><name pos:start="13:10" pos:end="13:10">i</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>;</init> <condition pos:start="13:17" pos:end="13:41"><expr pos:start="13:17" pos:end="13:40"><name pos:start="13:17" pos:end="13:17">i</name> <operator pos:start="13:19" pos:end="13:19">&lt;</operator> <name pos:start="13:21" pos:end="13:40"><name pos:start="13:21" pos:end="13:23">cpu</name><operator pos:start="13:24" pos:end="13:25">-&gt;</operator><name pos:start="13:26" pos:end="13:40">cpreg_array_len</name></name></expr>;</condition> <incr pos:start="13:43" pos:end="13:45"><expr pos:start="13:43" pos:end="13:45"><name pos:start="13:43" pos:end="13:43">i</name><operator pos:start="13:44" pos:end="13:45">++</operator></expr></incr>)</control> <block pos:start="13:48" pos:end="65:5">{<block_content pos:start="15:9" pos:end="63:9">

        <decl_stmt pos:start="15:9" pos:end="15:29"><decl pos:start="15:9" pos:end="15:28"><type pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:26"><name pos:start="15:9" pos:end="15:14">struct</name> <name pos:start="15:16" pos:end="15:26">kvm_one_reg</name></name></type> <name pos:start="15:28" pos:end="15:28">r</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:48"><decl pos:start="17:9" pos:end="17:47"><type pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:16">uint64_t</name></type> <name pos:start="17:18" pos:end="17:23">regidx</name> <init pos:start="17:25" pos:end="17:47">= <expr pos:start="17:27" pos:end="17:47"><name pos:start="17:27" pos:end="17:47"><name pos:start="17:27" pos:end="17:29">cpu</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:44">cpreg_indexes</name><index pos:start="17:45" pos:end="17:47">[<expr pos:start="17:46" pos:end="17:46"><name pos:start="17:46" pos:end="17:46">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:21"><decl pos:start="19:9" pos:end="19:20"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint32_t</name></type> <name pos:start="19:18" pos:end="19:20">v32</name></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:16"><decl pos:start="21:9" pos:end="21:15"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:15">ret</name></decl>;</decl_stmt>



        <expr_stmt pos:start="25:9" pos:end="25:22"><expr pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:12"><name pos:start="25:9" pos:end="25:9">r</name><operator pos:start="25:10" pos:end="25:10">.</operator><name pos:start="25:11" pos:end="25:12">id</name></name> <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:21">regidx</name></expr>;</expr_stmt>

        <switch pos:start="27:9" pos:end="47:9">switch <condition pos:start="27:16" pos:end="27:43">(<expr pos:start="27:17" pos:end="27:42"><name pos:start="27:17" pos:end="27:22">regidx</name> <operator pos:start="27:24" pos:end="27:24">&amp;</operator> <name pos:start="27:26" pos:end="27:42">KVM_REG_SIZE_MASK</name></expr>)</condition> <block pos:start="27:45" pos:end="47:9">{<block_content pos:start="29:9" pos:end="45:20">

        <case pos:start="29:9" pos:end="29:30">case <expr pos:start="29:14" pos:end="29:29"><name pos:start="29:14" pos:end="29:29">KVM_REG_SIZE_U32</name></expr>:</case>

            <expr_stmt pos:start="31:13" pos:end="31:39"><expr pos:start="31:13" pos:end="31:38"><name pos:start="31:13" pos:end="31:15">v32</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <name pos:start="31:19" pos:end="31:38"><name pos:start="31:19" pos:end="31:21">cpu</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:35">cpreg_values</name><index pos:start="31:36" pos:end="31:38">[<expr pos:start="31:37" pos:end="31:37"><name pos:start="31:37" pos:end="31:37">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:37"><expr pos:start="33:13" pos:end="33:36"><name pos:start="33:13" pos:end="33:18"><name pos:start="33:13" pos:end="33:13">r</name><operator pos:start="33:14" pos:end="33:14">.</operator><name pos:start="33:15" pos:end="33:18">addr</name></name> <operator pos:start="33:20" pos:end="33:20">=</operator> <operator pos:start="33:22" pos:end="33:22">(</operator><name pos:start="33:23" pos:end="33:31">uintptr_t</name><operator pos:start="33:32" pos:end="33:32">)</operator><operator pos:start="33:33" pos:end="33:33">&amp;</operator><name pos:start="33:34" pos:end="33:36">v32</name></expr>;</expr_stmt>

            <break pos:start="35:13" pos:end="35:18">break;</break>

        <case pos:start="37:9" pos:end="37:30">case <expr pos:start="37:14" pos:end="37:29"><name pos:start="37:14" pos:end="37:29">KVM_REG_SIZE_U64</name></expr>:</case>

            <expr_stmt pos:start="39:13" pos:end="39:56"><expr pos:start="39:13" pos:end="39:55"><name pos:start="39:13" pos:end="39:18"><name pos:start="39:13" pos:end="39:13">r</name><operator pos:start="39:14" pos:end="39:14">.</operator><name pos:start="39:15" pos:end="39:18">addr</name></name> <operator pos:start="39:20" pos:end="39:20">=</operator> <operator pos:start="39:22" pos:end="39:22">(</operator><name pos:start="39:23" pos:end="39:31">uintptr_t</name><operator pos:start="39:32" pos:end="39:32">)</operator><operator pos:start="39:33" pos:end="39:33">(</operator><name pos:start="39:34" pos:end="39:50"><name pos:start="39:34" pos:end="39:36">cpu</name><operator pos:start="39:37" pos:end="39:38">-&gt;</operator><name pos:start="39:39" pos:end="39:50">cpreg_values</name></name> <operator pos:start="39:52" pos:end="39:52">+</operator> <name pos:start="39:54" pos:end="39:54">i</name><operator pos:start="39:55" pos:end="39:55">)</operator></expr>;</expr_stmt>

            <break pos:start="41:13" pos:end="41:18">break;</break>

        <default pos:start="43:9" pos:end="43:16">default:</default>

            <expr_stmt pos:start="45:13" pos:end="45:20"><expr pos:start="45:13" pos:end="45:19"><call pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:17">abort</name><argument_list pos:start="45:18" pos:end="45:19">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <expr_stmt pos:start="49:9" pos:end="49:54"><expr pos:start="49:9" pos:end="49:53"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:53"><name pos:start="49:15" pos:end="49:28">kvm_vcpu_ioctl</name><argument_list pos:start="49:29" pos:end="49:53">(<argument pos:start="49:30" pos:end="49:31"><expr pos:start="49:30" pos:end="49:31"><name pos:start="49:30" pos:end="49:31">cs</name></expr></argument>, <argument pos:start="49:34" pos:end="49:48"><expr pos:start="49:34" pos:end="49:48"><name pos:start="49:34" pos:end="49:48">KVM_SET_ONE_REG</name></expr></argument>, <argument pos:start="49:51" pos:end="49:52"><expr pos:start="49:51" pos:end="49:52"><operator pos:start="49:51" pos:end="49:51">&amp;</operator><name pos:start="49:52" pos:end="49:52">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="63:9"><if pos:start="51:9" pos:end="63:9">if <condition pos:start="51:12" pos:end="51:16">(<expr pos:start="51:13" pos:end="51:15"><name pos:start="51:13" pos:end="51:15">ret</name></expr>)</condition> <block pos:start="51:18" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:23">

            <comment type="block" pos:start="53:13" pos:end="59:15">/* We might fail for "unknown register" and also for

             * "you tried to set a register which is constant with

             * a different value from what it actually contains".

             */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:23"><expr pos:start="61:13" pos:end="61:22"><name pos:start="61:13" pos:end="61:14">ok</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <name pos:start="61:18" pos:end="61:22">false</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="67:5" pos:end="67:14">return <expr pos:start="67:12" pos:end="67:13"><name pos:start="67:12" pos:end="67:13">ok</name></expr>;</return>

</block_content>}</block></function>
</unit>
