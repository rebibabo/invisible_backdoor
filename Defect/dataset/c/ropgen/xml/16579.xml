<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16579.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:29">cpu_cris_handle_mmu_fault</name> <parameter_list pos:start="1:31" pos:end="3:59">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:39">CPUState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:66"><decl pos:start="1:47" pos:end="1:66"><type pos:start="1:47" pos:end="1:66"><name pos:start="1:47" pos:end="1:58">target_ulong</name></type> <name pos:start="1:60" pos:end="1:66">address</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:74"><decl pos:start="1:69" pos:end="1:74"><type pos:start="1:69" pos:end="1:74"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:74">rw</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:42"><decl pos:start="3:32" pos:end="3:42"><type pos:start="3:32" pos:end="3:42"><name pos:start="3:32" pos:end="3:34">int</name></type> <name pos:start="3:36" pos:end="3:42">mmu_idx</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:58"><decl pos:start="3:45" pos:end="3:58"><type pos:start="3:45" pos:end="3:58"><name pos:start="3:45" pos:end="3:47">int</name></type> <name pos:start="3:49" pos:end="3:58">is_softmmu</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="85:1">{<block_content pos:start="7:9" pos:end="83:17">

	<decl_stmt pos:start="7:9" pos:end="7:35"><decl pos:start="7:9" pos:end="7:34"><type pos:start="7:9" pos:end="7:30"><name pos:start="7:9" pos:end="7:30"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:30">cris_mmu_result</name></name></type> <name pos:start="7:32" pos:end="7:34">res</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:23"><decl pos:start="9:9" pos:end="9:16"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:16">prot</name></decl>, <decl pos:start="9:19" pos:end="9:22"><type ref="prev" pos:start="9:9" pos:end="9:11"/><name pos:start="9:19" pos:end="9:22">miss</name></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:19"><decl pos:start="11:9" pos:end="11:18"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:13">r</name> <init pos:start="11:15" pos:end="11:18">= <expr pos:start="11:17" pos:end="11:18"><operator pos:start="11:17" pos:end="11:17">-</operator><literal type="number" pos:start="11:18" pos:end="11:18">1</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="13:9" pos:end="13:25"><decl pos:start="13:9" pos:end="13:24"><type pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:20">target_ulong</name></type> <name pos:start="13:22" pos:end="13:24">phy</name></decl>;</decl_stmt>



	<expr_stmt pos:start="17:9" pos:end="17:79"><expr pos:start="17:9" pos:end="17:78"><call pos:start="17:9" pos:end="17:78"><name pos:start="17:9" pos:end="17:9">D</name><argument_list pos:start="17:10" pos:end="17:78">(<argument pos:start="17:11" pos:end="17:77"><expr pos:start="17:11" pos:end="17:77"><call pos:start="17:11" pos:end="17:77"><name pos:start="17:11" pos:end="17:16">printf</name> <argument_list pos:start="17:18" pos:end="17:77">(<argument pos:start="17:19" pos:end="17:44"><expr pos:start="17:19" pos:end="17:44"><literal type="string" pos:start="17:19" pos:end="17:44">"%s addr=%x pc=%x rw=%x\n"</literal></expr></argument>, <argument pos:start="17:47" pos:end="17:54"><expr pos:start="17:47" pos:end="17:54"><name pos:start="17:47" pos:end="17:54">__func__</name></expr></argument>, <argument pos:start="17:57" pos:end="17:63"><expr pos:start="17:57" pos:end="17:63"><name pos:start="17:57" pos:end="17:63">address</name></expr></argument>, <argument pos:start="17:66" pos:end="17:72"><expr pos:start="17:66" pos:end="17:72"><name pos:start="17:66" pos:end="17:72"><name pos:start="17:66" pos:end="17:68">env</name><operator pos:start="17:69" pos:end="17:70">-&gt;</operator><name pos:start="17:71" pos:end="17:72">pc</name></name></expr></argument>, <argument pos:start="17:75" pos:end="17:76"><expr pos:start="17:75" pos:end="17:76"><name pos:start="17:75" pos:end="17:76">rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="19:9" pos:end="21:50"><expr pos:start="19:9" pos:end="21:49"><name pos:start="19:9" pos:end="19:12">miss</name> <operator pos:start="19:14" pos:end="19:14">=</operator> <call pos:start="19:16" pos:end="21:49"><name pos:start="19:16" pos:end="19:33">cris_mmu_translate</name><argument_list pos:start="19:34" pos:end="21:49">(<argument pos:start="19:35" pos:end="19:38"><expr pos:start="19:35" pos:end="19:38"><operator pos:start="19:35" pos:end="19:35">&amp;</operator><name pos:start="19:36" pos:end="19:38">res</name></expr></argument>, <argument pos:start="19:41" pos:end="19:43"><expr pos:start="19:41" pos:end="19:43"><name pos:start="19:41" pos:end="19:43">env</name></expr></argument>, <argument pos:start="19:46" pos:end="19:71"><expr pos:start="19:46" pos:end="19:71"><name pos:start="19:46" pos:end="19:52">address</name> <operator pos:start="19:54" pos:end="19:54">&amp;</operator> <name pos:start="19:56" pos:end="19:71">TARGET_PAGE_MASK</name></expr></argument>,

				  <argument pos:start="21:35" pos:end="21:36"><expr pos:start="21:35" pos:end="21:36"><name pos:start="21:35" pos:end="21:36">rw</name></expr></argument>, <argument pos:start="21:39" pos:end="21:45"><expr pos:start="21:39" pos:end="21:45"><name pos:start="21:39" pos:end="21:45">mmu_idx</name></expr></argument>, <argument pos:start="21:48" pos:end="21:48"><expr pos:start="21:48" pos:end="21:48"><literal type="number" pos:start="21:48" pos:end="21:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="23:9" pos:end="71:9"><if pos:start="23:9" pos:end="47:9">if <condition pos:start="23:12" pos:end="23:17">(<expr pos:start="23:13" pos:end="23:16"><name pos:start="23:13" pos:end="23:16">miss</name></expr>)</condition>

	<block pos:start="25:9" pos:end="47:9">{<block_content pos:start="27:17" pos:end="45:22">

		<if_stmt pos:start="27:17" pos:end="35:46"><if pos:start="27:17" pos:end="35:46">if <condition pos:start="27:20" pos:end="27:58">(<expr pos:start="27:21" pos:end="27:57"><name pos:start="27:21" pos:end="27:40"><name pos:start="27:21" pos:end="27:23">env</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:40">exception_index</name></name> <operator pos:start="27:42" pos:end="27:43">==</operator> <name pos:start="27:45" pos:end="27:57">EXCP_BUSFAULT</name></expr>)</condition><block type="pseudo" pos:start="29:25" pos:end="35:46"><block_content pos:start="29:25" pos:end="35:46">

			<expr_stmt pos:start="29:25" pos:end="35:46"><expr pos:start="29:25" pos:end="35:45"><call pos:start="29:25" pos:end="35:45"><name pos:start="29:25" pos:end="29:33">cpu_abort</name><argument_list pos:start="29:34" pos:end="35:45">(<argument pos:start="29:35" pos:end="29:37"><expr pos:start="29:35" pos:end="29:37"><name pos:start="29:35" pos:end="29:37">env</name></expr></argument>,

				  <argument pos:start="31:35" pos:end="33:50"><expr pos:start="31:35" pos:end="33:50"><literal type="string" pos:start="31:35" pos:end="31:70">"CRIS: Illegal recursive bus fault."</literal>

				 <literal type="string" pos:start="33:34" pos:end="33:50">"addr=%x rw=%d\n"</literal></expr></argument>,

				 <argument pos:start="35:34" pos:end="35:40"><expr pos:start="35:34" pos:end="35:40"><name pos:start="35:34" pos:end="35:40">address</name></expr></argument>, <argument pos:start="35:43" pos:end="35:44"><expr pos:start="35:43" pos:end="35:44"><name pos:start="35:43" pos:end="35:44">rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



		<expr_stmt pos:start="39:17" pos:end="39:45"><expr pos:start="39:17" pos:end="39:44"><name pos:start="39:17" pos:end="39:34"><name pos:start="39:17" pos:end="39:19">env</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:26">pregs</name><index pos:start="39:27" pos:end="39:34">[<expr pos:start="39:28" pos:end="39:33"><name pos:start="39:28" pos:end="39:33">PR_EDA</name></expr>]</index></name> <operator pos:start="39:36" pos:end="39:36">=</operator> <name pos:start="39:38" pos:end="39:44">address</name></expr>;</expr_stmt>

		<expr_stmt pos:start="41:17" pos:end="41:53"><expr pos:start="41:17" pos:end="41:52"><name pos:start="41:17" pos:end="41:36"><name pos:start="41:17" pos:end="41:19">env</name><operator pos:start="41:20" pos:end="41:21">-&gt;</operator><name pos:start="41:22" pos:end="41:36">exception_index</name></name> <operator pos:start="41:38" pos:end="41:38">=</operator> <name pos:start="41:40" pos:end="41:52">EXCP_BUSFAULT</name></expr>;</expr_stmt>

		<expr_stmt pos:start="43:17" pos:end="43:47"><expr pos:start="43:17" pos:end="43:46"><name pos:start="43:17" pos:end="43:33"><name pos:start="43:17" pos:end="43:19">env</name><operator pos:start="43:20" pos:end="43:21">-&gt;</operator><name pos:start="43:22" pos:end="43:33">fault_vector</name></name> <operator pos:start="43:35" pos:end="43:35">=</operator> <name pos:start="43:37" pos:end="43:46"><name pos:start="43:37" pos:end="43:39">res</name><operator pos:start="43:40" pos:end="43:40">.</operator><name pos:start="43:41" pos:end="43:46">bf_vec</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="45:17" pos:end="45:22"><expr pos:start="45:17" pos:end="45:21"><name pos:start="45:17" pos:end="45:17">r</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <literal type="number" pos:start="45:21" pos:end="45:21">1</literal></expr>;</expr_stmt>

	</block_content>}</block></if>

	<else pos:start="49:9" pos:end="71:9">else

	<block pos:start="51:9" pos:end="71:9">{<block_content pos:start="61:17" pos:end="69:22">

		<comment type="block" pos:start="53:17" pos:end="59:19">/*

		 * Mask off the cache selection bit. The ETRAX busses do not

		 * see the top bit.

		 */</comment>

		<expr_stmt pos:start="61:17" pos:end="61:44"><expr pos:start="61:17" pos:end="61:43"><name pos:start="61:17" pos:end="61:19">phy</name> <operator pos:start="61:21" pos:end="61:21">=</operator> <name pos:start="61:23" pos:end="61:29"><name pos:start="61:23" pos:end="61:25">res</name><operator pos:start="61:26" pos:end="61:26">.</operator><name pos:start="61:27" pos:end="61:29">phy</name></name> <operator pos:start="61:31" pos:end="61:31">&amp;</operator> <operator pos:start="61:33" pos:end="61:33">~</operator><literal type="number" pos:start="61:34" pos:end="61:43">0x80000000</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="63:17" pos:end="63:32"><expr pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:20">prot</name> <operator pos:start="63:22" pos:end="63:22">=</operator> <name pos:start="63:24" pos:end="63:31"><name pos:start="63:24" pos:end="63:26">res</name><operator pos:start="63:27" pos:end="63:27">.</operator><name pos:start="63:28" pos:end="63:31">prot</name></name></expr>;</expr_stmt>

		<expr_stmt pos:start="65:17" pos:end="67:74"><expr pos:start="65:17" pos:end="67:73"><call pos:start="65:17" pos:end="67:73"><name pos:start="65:17" pos:end="65:28">tlb_set_page</name><argument_list pos:start="65:29" pos:end="67:73">(<argument pos:start="65:30" pos:end="65:32"><expr pos:start="65:30" pos:end="65:32"><name pos:start="65:30" pos:end="65:32">env</name></expr></argument>, <argument pos:start="65:35" pos:end="65:60"><expr pos:start="65:35" pos:end="65:60"><name pos:start="65:35" pos:end="65:41">address</name> <operator pos:start="65:43" pos:end="65:43">&amp;</operator> <name pos:start="65:45" pos:end="65:60">TARGET_PAGE_MASK</name></expr></argument>, <argument pos:start="65:63" pos:end="65:65"><expr pos:start="65:63" pos:end="65:65"><name pos:start="65:63" pos:end="65:65">phy</name></expr></argument>,

                             <argument pos:start="67:30" pos:end="67:45"><expr pos:start="67:30" pos:end="67:45"><name pos:start="67:30" pos:end="67:33">prot</name> <operator pos:start="67:35" pos:end="67:35">|</operator> <name pos:start="67:37" pos:end="67:45">PAGE_EXEC</name></expr></argument>, <argument pos:start="67:48" pos:end="67:54"><expr pos:start="67:48" pos:end="67:54"><name pos:start="67:48" pos:end="67:54">mmu_idx</name></expr></argument>, <argument pos:start="67:57" pos:end="67:72"><expr pos:start="67:57" pos:end="67:72"><name pos:start="67:57" pos:end="67:72">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="69:17" pos:end="69:22"><expr pos:start="69:17" pos:end="69:21"><name pos:start="69:17" pos:end="69:17">r</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <literal type="number" pos:start="69:21" pos:end="69:21">0</literal></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

	<if_stmt pos:start="73:9" pos:end="81:77"><if pos:start="73:9" pos:end="81:77">if <condition pos:start="73:12" pos:end="73:18">(<expr pos:start="73:13" pos:end="73:17"><name pos:start="73:13" pos:end="73:13">r</name> <operator pos:start="73:15" pos:end="73:15">&gt;</operator> <literal type="number" pos:start="73:17" pos:end="73:17">0</literal></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="81:77"><block_content pos:start="75:17" pos:end="81:77">

		<expr_stmt pos:start="75:17" pos:end="81:77"><expr pos:start="75:17" pos:end="81:76"><call pos:start="75:17" pos:end="81:76"><name pos:start="75:17" pos:end="75:21">D_LOG</name><argument_list pos:start="75:22" pos:end="81:76">(<argument pos:start="75:23" pos:end="77:59"><expr pos:start="75:23" pos:end="77:59"><literal type="string" pos:start="75:23" pos:end="75:55">"%s returns %d irqreq=%x addr=%x"</literal>

			  <literal type="string" pos:start="77:27" pos:end="77:59">" phy=%x ismmu=%d vec=%x pc=%x\n"</literal></expr></argument>, 

			  <argument pos:start="79:27" pos:end="79:34"><expr pos:start="79:27" pos:end="79:34"><name pos:start="79:27" pos:end="79:34">__func__</name></expr></argument>, <argument pos:start="79:37" pos:end="79:37"><expr pos:start="79:37" pos:end="79:37"><name pos:start="79:37" pos:end="79:37">r</name></expr></argument>, <argument pos:start="79:40" pos:end="79:61"><expr pos:start="79:40" pos:end="79:61"><name pos:start="79:40" pos:end="79:61"><name pos:start="79:40" pos:end="79:42">env</name><operator pos:start="79:43" pos:end="79:44">-&gt;</operator><name pos:start="79:45" pos:end="79:61">interrupt_request</name></name></expr></argument>, 

			  <argument pos:start="81:27" pos:end="81:33"><expr pos:start="81:27" pos:end="81:33"><name pos:start="81:27" pos:end="81:33">address</name></expr></argument>, <argument pos:start="81:36" pos:end="81:42"><expr pos:start="81:36" pos:end="81:42"><name pos:start="81:36" pos:end="81:42"><name pos:start="81:36" pos:end="81:38">res</name><operator pos:start="81:39" pos:end="81:39">.</operator><name pos:start="81:40" pos:end="81:42">phy</name></name></expr></argument>, <argument pos:start="81:45" pos:end="81:54"><expr pos:start="81:45" pos:end="81:54"><name pos:start="81:45" pos:end="81:54">is_softmmu</name></expr></argument>, <argument pos:start="81:57" pos:end="81:66"><expr pos:start="81:57" pos:end="81:66"><name pos:start="81:57" pos:end="81:66"><name pos:start="81:57" pos:end="81:59">res</name><operator pos:start="81:60" pos:end="81:60">.</operator><name pos:start="81:61" pos:end="81:66">bf_vec</name></name></expr></argument>, <argument pos:start="81:69" pos:end="81:75"><expr pos:start="81:69" pos:end="81:75"><name pos:start="81:69" pos:end="81:75"><name pos:start="81:69" pos:end="81:71">env</name><operator pos:start="81:72" pos:end="81:73">-&gt;</operator><name pos:start="81:74" pos:end="81:75">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return pos:start="83:9" pos:end="83:17">return <expr pos:start="83:16" pos:end="83:16"><name pos:start="83:16" pos:end="83:16">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
