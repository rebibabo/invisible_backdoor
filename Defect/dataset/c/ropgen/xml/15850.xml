<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15850.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">disas_ldst_reg_imm9</name><parameter_list pos:start="1:32" pos:end="1:63">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:44">DisasContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">uint32_t</name></type> <name pos:start="1:59" pos:end="1:62">insn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="193:1">{<block_content pos:start="5:5" pos:end="191:5">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">rt</name> <init pos:start="5:12" pos:end="5:34">= <expr pos:start="5:14" pos:end="5:34"><call pos:start="5:14" pos:end="5:34"><name pos:start="5:14" pos:end="5:22">extract32</name><argument_list pos:start="5:23" pos:end="5:34">(<argument pos:start="5:24" pos:end="5:27"><expr pos:start="5:24" pos:end="5:27"><name pos:start="5:24" pos:end="5:27">insn</name></expr></argument>, <argument pos:start="5:30" pos:end="5:30"><expr pos:start="5:30" pos:end="5:30"><literal type="number" pos:start="5:30" pos:end="5:30">0</literal></expr></argument>, <argument pos:start="5:33" pos:end="5:33"><expr pos:start="5:33" pos:end="5:33"><literal type="number" pos:start="5:33" pos:end="5:33">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">rn</name> <init pos:start="7:12" pos:end="7:34">= <expr pos:start="7:14" pos:end="7:34"><call pos:start="7:14" pos:end="7:34"><name pos:start="7:14" pos:end="7:22">extract32</name><argument_list pos:start="7:23" pos:end="7:34">(<argument pos:start="7:24" pos:end="7:27"><expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">insn</name></expr></argument>, <argument pos:start="7:30" pos:end="7:30"><expr pos:start="7:30" pos:end="7:30"><literal type="number" pos:start="7:30" pos:end="7:30">5</literal></expr></argument>, <argument pos:start="7:33" pos:end="7:33"><expr pos:start="7:33" pos:end="7:33"><literal type="number" pos:start="7:33" pos:end="7:33">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">imm9</name> <init pos:start="9:14" pos:end="9:38">= <expr pos:start="9:16" pos:end="9:38"><call pos:start="9:16" pos:end="9:38"><name pos:start="9:16" pos:end="9:25">sextract32</name><argument_list pos:start="9:26" pos:end="9:38">(<argument pos:start="9:27" pos:end="9:30"><expr pos:start="9:27" pos:end="9:30"><name pos:start="9:27" pos:end="9:30">insn</name></expr></argument>, <argument pos:start="9:33" pos:end="9:34"><expr pos:start="9:33" pos:end="9:34"><literal type="number" pos:start="9:33" pos:end="9:34">12</literal></expr></argument>, <argument pos:start="9:37" pos:end="9:37"><expr pos:start="9:37" pos:end="9:37"><literal type="number" pos:start="9:37" pos:end="9:37">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:36"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">opc</name> <init pos:start="11:13" pos:end="11:36">= <expr pos:start="11:15" pos:end="11:36"><call pos:start="11:15" pos:end="11:36"><name pos:start="11:15" pos:end="11:23">extract32</name><argument_list pos:start="11:24" pos:end="11:36">(<argument pos:start="11:25" pos:end="11:28"><expr pos:start="11:25" pos:end="11:28"><name pos:start="11:25" pos:end="11:28">insn</name></expr></argument>, <argument pos:start="11:31" pos:end="11:32"><expr pos:start="11:31" pos:end="11:32"><literal type="number" pos:start="11:31" pos:end="11:32">22</literal></expr></argument>, <argument pos:start="11:35" pos:end="11:35"><expr pos:start="11:35" pos:end="11:35"><literal type="number" pos:start="11:35" pos:end="11:35">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">size</name> <init pos:start="13:14" pos:end="13:37">= <expr pos:start="13:16" pos:end="13:37"><call pos:start="13:16" pos:end="13:37"><name pos:start="13:16" pos:end="13:24">extract32</name><argument_list pos:start="13:25" pos:end="13:37">(<argument pos:start="13:26" pos:end="13:29"><expr pos:start="13:26" pos:end="13:29"><name pos:start="13:26" pos:end="13:29">insn</name></expr></argument>, <argument pos:start="13:32" pos:end="13:33"><expr pos:start="13:32" pos:end="13:33"><literal type="number" pos:start="13:32" pos:end="13:33">30</literal></expr></argument>, <argument pos:start="13:36" pos:end="13:36"><expr pos:start="13:36" pos:end="13:36"><literal type="number" pos:start="13:36" pos:end="13:36">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:37"><decl pos:start="15:5" pos:end="15:36"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">idx</name> <init pos:start="15:13" pos:end="15:36">= <expr pos:start="15:15" pos:end="15:36"><call pos:start="15:15" pos:end="15:36"><name pos:start="15:15" pos:end="15:23">extract32</name><argument_list pos:start="15:24" pos:end="15:36">(<argument pos:start="15:25" pos:end="15:28"><expr pos:start="15:25" pos:end="15:28"><name pos:start="15:25" pos:end="15:28">insn</name></expr></argument>, <argument pos:start="15:31" pos:end="15:32"><expr pos:start="15:31" pos:end="15:32"><literal type="number" pos:start="15:31" pos:end="15:32">10</literal></expr></argument>, <argument pos:start="15:35" pos:end="15:35"><expr pos:start="15:35" pos:end="15:35"><literal type="number" pos:start="15:35" pos:end="15:35">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:8"><name pos:start="17:5" pos:end="17:8">bool</name></type> <name pos:start="17:10" pos:end="17:18">is_signed</name> <init pos:start="17:20" pos:end="17:26">= <expr pos:start="17:22" pos:end="17:26"><name pos:start="17:22" pos:end="17:26">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:8"><name pos:start="19:5" pos:end="19:8">bool</name></type> <name pos:start="19:10" pos:end="19:17">is_store</name> <init pos:start="19:19" pos:end="19:25">= <expr pos:start="19:21" pos:end="19:25"><name pos:start="19:21" pos:end="19:25">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:29"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">bool</name></type> <name pos:start="21:10" pos:end="21:20">is_extended</name> <init pos:start="21:22" pos:end="21:28">= <expr pos:start="21:24" pos:end="21:28"><name pos:start="21:24" pos:end="21:28">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:32"><decl pos:start="23:5" pos:end="23:31"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:18">is_unpriv</name> <init pos:start="23:20" pos:end="23:31">= <expr pos:start="23:22" pos:end="23:31"><operator pos:start="23:22" pos:end="23:22">(</operator><name pos:start="23:23" pos:end="23:25">idx</name> <operator pos:start="23:27" pos:end="23:28">==</operator> <literal type="number" pos:start="23:30" pos:end="23:30">2</literal><operator pos:start="23:31" pos:end="23:31">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:44"><decl pos:start="25:5" pos:end="25:43"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:18">is_vector</name> <init pos:start="25:20" pos:end="25:43">= <expr pos:start="25:22" pos:end="25:43"><call pos:start="25:22" pos:end="25:43"><name pos:start="25:22" pos:end="25:30">extract32</name><argument_list pos:start="25:31" pos:end="25:43">(<argument pos:start="25:32" pos:end="25:35"><expr pos:start="25:32" pos:end="25:35"><name pos:start="25:32" pos:end="25:35">insn</name></expr></argument>, <argument pos:start="25:38" pos:end="25:39"><expr pos:start="25:38" pos:end="25:39"><literal type="number" pos:start="25:38" pos:end="25:39">26</literal></expr></argument>, <argument pos:start="25:42" pos:end="25:42"><expr pos:start="25:42" pos:end="25:42"><literal type="number" pos:start="25:42" pos:end="25:42">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">bool</name></type> <name pos:start="27:10" pos:end="27:19">post_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">bool</name></type> <name pos:start="29:10" pos:end="29:18">writeback</name></decl>;</decl_stmt>



    <decl_stmt pos:start="33:5" pos:end="33:22"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:12">TCGv_i64</name></type> <name pos:start="33:14" pos:end="33:21">tcg_addr</name></decl>;</decl_stmt>



    <if_stmt pos:start="37:5" pos:end="89:5"><if pos:start="37:5" pos:end="57:5">if <condition pos:start="37:8" pos:end="37:18">(<expr pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:17">is_vector</name></expr>)</condition> <block pos:start="37:20" pos:end="57:5">{<block_content pos:start="39:9" pos:end="55:9">

        <expr_stmt pos:start="39:9" pos:end="39:31"><expr pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:12">size</name> <operator pos:start="39:14" pos:end="39:15">|=</operator> <operator pos:start="39:17" pos:end="39:17">(</operator><name pos:start="39:18" pos:end="39:20">opc</name> <operator pos:start="39:22" pos:end="39:22">&amp;</operator> <literal type="number" pos:start="39:24" pos:end="39:24">2</literal><operator pos:start="39:25" pos:end="39:25">)</operator> <operator pos:start="39:27" pos:end="39:28">&lt;&lt;</operator> <literal type="number" pos:start="39:30" pos:end="39:30">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:34">(<expr pos:start="41:13" pos:end="41:33"><name pos:start="41:13" pos:end="41:16">size</name> <operator pos:start="41:18" pos:end="41:18">&gt;</operator> <literal type="number" pos:start="41:20" pos:end="41:20">4</literal> <operator pos:start="41:22" pos:end="41:23">||</operator> <name pos:start="41:25" pos:end="41:33">is_unpriv</name></expr>)</condition> <block pos:start="41:36" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:19">

            <expr_stmt pos:start="43:13" pos:end="43:36"><expr pos:start="43:13" pos:end="43:35"><call pos:start="43:13" pos:end="43:35"><name pos:start="43:13" pos:end="43:32">unallocated_encoding</name><argument_list pos:start="43:33" pos:end="43:35">(<argument pos:start="43:34" pos:end="43:34"><expr pos:start="43:34" pos:end="43:34"><name pos:start="43:34" pos:end="43:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:36"><expr pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:16">is_store</name> <operator pos:start="49:18" pos:end="49:18">=</operator> <operator pos:start="49:20" pos:end="49:20">(</operator><operator pos:start="49:21" pos:end="49:21">(</operator><name pos:start="49:22" pos:end="49:24">opc</name> <operator pos:start="49:26" pos:end="49:26">&amp;</operator> <literal type="number" pos:start="49:28" pos:end="49:28">1</literal><operator pos:start="49:29" pos:end="49:29">)</operator> <operator pos:start="49:31" pos:end="49:32">==</operator> <literal type="number" pos:start="49:34" pos:end="49:34">0</literal><operator pos:start="49:35" pos:end="49:35">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:32">(<expr pos:start="51:13" pos:end="51:31"><operator pos:start="51:13" pos:end="51:13">!</operator><call pos:start="51:14" pos:end="51:31"><name pos:start="51:14" pos:end="51:28">fp_access_check</name><argument_list pos:start="51:29" pos:end="51:31">(<argument pos:start="51:30" pos:end="51:30"><expr pos:start="51:30" pos:end="51:30"><name pos:start="51:30" pos:end="51:30">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:34" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:19">

            <return pos:start="53:13" pos:end="53:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="89:5">else <block pos:start="57:12" pos:end="89:5">{<block_content pos:start="59:9" pos:end="87:46">

        <if_stmt pos:start="59:9" pos:end="73:9"><if pos:start="59:9" pos:end="73:9">if <condition pos:start="59:12" pos:end="59:34">(<expr pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:16">size</name> <operator pos:start="59:18" pos:end="59:19">==</operator> <literal type="number" pos:start="59:21" pos:end="59:21">3</literal> <operator pos:start="59:23" pos:end="59:24">&amp;&amp;</operator> <name pos:start="59:26" pos:end="59:28">opc</name> <operator pos:start="59:30" pos:end="59:31">==</operator> <literal type="number" pos:start="59:33" pos:end="59:33">2</literal></expr>)</condition> <block pos:start="59:36" pos:end="73:9">{<block_content pos:start="63:13" pos:end="71:19">

            <comment type="block" pos:start="61:13" pos:end="61:33">/* PRFM - prefetch */</comment>

            <if_stmt pos:start="63:13" pos:end="69:13"><if pos:start="63:13" pos:end="69:13">if <condition pos:start="63:16" pos:end="63:26">(<expr pos:start="63:17" pos:end="63:25"><name pos:start="63:17" pos:end="63:25">is_unpriv</name></expr>)</condition> <block pos:start="63:28" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:23">

                <expr_stmt pos:start="65:17" pos:end="65:40"><expr pos:start="65:17" pos:end="65:39"><call pos:start="65:17" pos:end="65:39"><name pos:start="65:17" pos:end="65:36">unallocated_encoding</name><argument_list pos:start="65:37" pos:end="65:39">(<argument pos:start="65:38" pos:end="65:38"><expr pos:start="65:38" pos:end="65:38"><name pos:start="65:38" pos:end="65:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="67:17" pos:end="67:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <return pos:start="71:13" pos:end="71:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="75:9" pos:end="81:9"><if pos:start="75:9" pos:end="81:9">if <condition pos:start="75:12" pos:end="75:33">(<expr pos:start="75:13" pos:end="75:32"><name pos:start="75:13" pos:end="75:15">opc</name> <operator pos:start="75:17" pos:end="75:18">==</operator> <literal type="number" pos:start="75:20" pos:end="75:20">3</literal> <operator pos:start="75:22" pos:end="75:23">&amp;&amp;</operator> <name pos:start="75:25" pos:end="75:28">size</name> <operator pos:start="75:30" pos:end="75:30">&gt;</operator> <literal type="number" pos:start="75:32" pos:end="75:32">1</literal></expr>)</condition> <block pos:start="75:35" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:19">

            <expr_stmt pos:start="77:13" pos:end="77:36"><expr pos:start="77:13" pos:end="77:35"><call pos:start="77:13" pos:end="77:35"><name pos:start="77:13" pos:end="77:32">unallocated_encoding</name><argument_list pos:start="77:33" pos:end="77:35">(<argument pos:start="77:34" pos:end="77:34"><expr pos:start="77:34" pos:end="77:34"><name pos:start="77:34" pos:end="77:34">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="79:13" pos:end="79:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:30"><expr pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:16">is_store</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <operator pos:start="83:20" pos:end="83:20">(</operator><name pos:start="83:21" pos:end="83:23">opc</name> <operator pos:start="83:25" pos:end="83:26">==</operator> <literal type="number" pos:start="83:28" pos:end="83:28">0</literal><operator pos:start="83:29" pos:end="83:29">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:33"><expr pos:start="85:9" pos:end="85:32"><name pos:start="85:9" pos:end="85:17">is_signed</name> <operator pos:start="85:19" pos:end="85:19">=</operator> <name pos:start="85:21" pos:end="85:23">opc</name> <operator pos:start="85:25" pos:end="85:25">&amp;</operator> <operator pos:start="85:27" pos:end="85:27">(</operator><literal type="number" pos:start="85:28" pos:end="85:28">1</literal><operator pos:start="85:29" pos:end="85:30">&lt;&lt;</operator><literal type="number" pos:start="85:31" pos:end="85:31">1</literal><operator pos:start="85:32" pos:end="85:32">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:46"><expr pos:start="87:9" pos:end="87:45"><name pos:start="87:9" pos:end="87:19">is_extended</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <operator pos:start="87:23" pos:end="87:23">(</operator><name pos:start="87:24" pos:end="87:27">size</name> <operator pos:start="87:29" pos:end="87:29">&lt;</operator> <literal type="number" pos:start="87:31" pos:end="87:31">3</literal><operator pos:start="87:32" pos:end="87:32">)</operator> <operator pos:start="87:34" pos:end="87:35">&amp;&amp;</operator> <operator pos:start="87:37" pos:end="87:37">(</operator><name pos:start="87:38" pos:end="87:40">opc</name> <operator pos:start="87:42" pos:end="87:42">&amp;</operator> <literal type="number" pos:start="87:44" pos:end="87:44">1</literal><operator pos:start="87:45" pos:end="87:45">)</operator></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <switch pos:start="93:5" pos:end="121:5">switch <condition pos:start="93:12" pos:end="93:16">(<expr pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">idx</name></expr>)</condition> <block pos:start="93:18" pos:end="121:5">{<block_content pos:start="95:5" pos:end="119:14">

    <case pos:start="95:5" pos:end="95:11">case <expr pos:start="95:10" pos:end="95:10"><literal type="number" pos:start="95:10" pos:end="95:10">0</literal></expr>:</case>

    <case pos:start="97:5" pos:end="97:11">case <expr pos:start="97:10" pos:end="97:10"><literal type="number" pos:start="97:10" pos:end="97:10">2</literal></expr>:</case>

        <expr_stmt pos:start="99:9" pos:end="99:27"><expr pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:18">post_index</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <name pos:start="99:22" pos:end="99:26">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:26"><expr pos:start="101:9" pos:end="101:25"><name pos:start="101:9" pos:end="101:17">writeback</name> <operator pos:start="101:19" pos:end="101:19">=</operator> <name pos:start="101:21" pos:end="101:25">false</name></expr>;</expr_stmt>

        <break pos:start="103:9" pos:end="103:14">break;</break>

    <case pos:start="105:5" pos:end="105:11">case <expr pos:start="105:10" pos:end="105:10"><literal type="number" pos:start="105:10" pos:end="105:10">1</literal></expr>:</case>

        <expr_stmt pos:start="107:9" pos:end="107:26"><expr pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:18">post_index</name> <operator pos:start="107:20" pos:end="107:20">=</operator> <name pos:start="107:22" pos:end="107:25">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:25"><expr pos:start="109:9" pos:end="109:24"><name pos:start="109:9" pos:end="109:17">writeback</name> <operator pos:start="109:19" pos:end="109:19">=</operator> <name pos:start="109:21" pos:end="109:24">true</name></expr>;</expr_stmt>

        <break pos:start="111:9" pos:end="111:14">break;</break>

    <case pos:start="113:5" pos:end="113:11">case <expr pos:start="113:10" pos:end="113:10"><literal type="number" pos:start="113:10" pos:end="113:10">3</literal></expr>:</case>

        <expr_stmt pos:start="115:9" pos:end="115:27"><expr pos:start="115:9" pos:end="115:26"><name pos:start="115:9" pos:end="115:18">post_index</name> <operator pos:start="115:20" pos:end="115:20">=</operator> <name pos:start="115:22" pos:end="115:26">false</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:25"><expr pos:start="117:9" pos:end="117:24"><name pos:start="117:9" pos:end="117:17">writeback</name> <operator pos:start="117:19" pos:end="117:19">=</operator> <name pos:start="117:21" pos:end="117:24">true</name></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:17">(<expr pos:start="125:9" pos:end="125:16"><name pos:start="125:9" pos:end="125:10">rn</name> <operator pos:start="125:12" pos:end="125:13">==</operator> <literal type="number" pos:start="125:15" pos:end="125:16">31</literal></expr>)</condition> <block pos:start="125:19" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:34">

        <expr_stmt pos:start="127:9" pos:end="127:34"><expr pos:start="127:9" pos:end="127:33"><call pos:start="127:9" pos:end="127:33"><name pos:start="127:9" pos:end="127:30">gen_check_sp_alignment</name><argument_list pos:start="127:31" pos:end="127:33">(<argument pos:start="127:32" pos:end="127:32"><expr pos:start="127:32" pos:end="127:32"><name pos:start="127:32" pos:end="127:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:41"><expr pos:start="131:5" pos:end="131:40"><name pos:start="131:5" pos:end="131:12">tcg_addr</name> <operator pos:start="131:14" pos:end="131:14">=</operator> <call pos:start="131:16" pos:end="131:40"><name pos:start="131:16" pos:end="131:30">read_cpu_reg_sp</name><argument_list pos:start="131:31" pos:end="131:40">(<argument pos:start="131:32" pos:end="131:32"><expr pos:start="131:32" pos:end="131:32"><name pos:start="131:32" pos:end="131:32">s</name></expr></argument>, <argument pos:start="131:35" pos:end="131:36"><expr pos:start="131:35" pos:end="131:36"><name pos:start="131:35" pos:end="131:36">rn</name></expr></argument>, <argument pos:start="131:39" pos:end="131:39"><expr pos:start="131:39" pos:end="131:39"><literal type="number" pos:start="131:39" pos:end="131:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="135:5" pos:end="139:5"><if pos:start="135:5" pos:end="139:5">if <condition pos:start="135:8" pos:end="135:20">(<expr pos:start="135:9" pos:end="135:19"><operator pos:start="135:9" pos:end="135:9">!</operator><name pos:start="135:10" pos:end="135:19">post_index</name></expr>)</condition> <block pos:start="135:22" pos:end="139:5">{<block_content pos:start="137:9" pos:end="137:51">

        <expr_stmt pos:start="137:9" pos:end="137:51"><expr pos:start="137:9" pos:end="137:50"><call pos:start="137:9" pos:end="137:50"><name pos:start="137:9" pos:end="137:24">tcg_gen_addi_i64</name><argument_list pos:start="137:25" pos:end="137:50">(<argument pos:start="137:26" pos:end="137:33"><expr pos:start="137:26" pos:end="137:33"><name pos:start="137:26" pos:end="137:33">tcg_addr</name></expr></argument>, <argument pos:start="137:36" pos:end="137:43"><expr pos:start="137:36" pos:end="137:43"><name pos:start="137:36" pos:end="137:43">tcg_addr</name></expr></argument>, <argument pos:start="137:46" pos:end="137:49"><expr pos:start="137:46" pos:end="137:49"><name pos:start="137:46" pos:end="137:49">imm9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="143:5" pos:end="175:5"><if pos:start="143:5" pos:end="155:5">if <condition pos:start="143:8" pos:end="143:18">(<expr pos:start="143:9" pos:end="143:17"><name pos:start="143:9" pos:end="143:17">is_vector</name></expr>)</condition> <block pos:start="143:20" pos:end="155:5">{<block_content pos:start="145:9" pos:end="153:9">

        <if_stmt pos:start="145:9" pos:end="153:9"><if pos:start="145:9" pos:end="149:9">if <condition pos:start="145:12" pos:end="145:21">(<expr pos:start="145:13" pos:end="145:20"><name pos:start="145:13" pos:end="145:20">is_store</name></expr>)</condition> <block pos:start="145:23" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:44">

            <expr_stmt pos:start="147:13" pos:end="147:44"><expr pos:start="147:13" pos:end="147:43"><call pos:start="147:13" pos:end="147:43"><name pos:start="147:13" pos:end="147:20">do_fp_st</name><argument_list pos:start="147:21" pos:end="147:43">(<argument pos:start="147:22" pos:end="147:22"><expr pos:start="147:22" pos:end="147:22"><name pos:start="147:22" pos:end="147:22">s</name></expr></argument>, <argument pos:start="147:25" pos:end="147:26"><expr pos:start="147:25" pos:end="147:26"><name pos:start="147:25" pos:end="147:26">rt</name></expr></argument>, <argument pos:start="147:29" pos:end="147:36"><expr pos:start="147:29" pos:end="147:36"><name pos:start="147:29" pos:end="147:36">tcg_addr</name></expr></argument>, <argument pos:start="147:39" pos:end="147:42"><expr pos:start="147:39" pos:end="147:42"><name pos:start="147:39" pos:end="147:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="149:11" pos:end="153:9">else <block pos:start="149:16" pos:end="153:9">{<block_content pos:start="151:13" pos:end="151:44">

            <expr_stmt pos:start="151:13" pos:end="151:44"><expr pos:start="151:13" pos:end="151:43"><call pos:start="151:13" pos:end="151:43"><name pos:start="151:13" pos:end="151:20">do_fp_ld</name><argument_list pos:start="151:21" pos:end="151:43">(<argument pos:start="151:22" pos:end="151:22"><expr pos:start="151:22" pos:end="151:22"><name pos:start="151:22" pos:end="151:22">s</name></expr></argument>, <argument pos:start="151:25" pos:end="151:26"><expr pos:start="151:25" pos:end="151:26"><name pos:start="151:25" pos:end="151:26">rt</name></expr></argument>, <argument pos:start="151:29" pos:end="151:36"><expr pos:start="151:29" pos:end="151:36"><name pos:start="151:29" pos:end="151:36">tcg_addr</name></expr></argument>, <argument pos:start="151:39" pos:end="151:42"><expr pos:start="151:39" pos:end="151:42"><name pos:start="151:39" pos:end="151:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="155:7" pos:end="175:5">else <block pos:start="155:12" pos:end="175:5">{<block_content pos:start="157:9" pos:end="173:9">

        <decl_stmt pos:start="157:9" pos:end="157:41"><decl pos:start="157:9" pos:end="157:40"><type pos:start="157:9" pos:end="157:16"><name pos:start="157:9" pos:end="157:16">TCGv_i64</name></type> <name pos:start="157:18" pos:end="157:23">tcg_rt</name> <init pos:start="157:25" pos:end="157:40">= <expr pos:start="157:27" pos:end="157:40"><call pos:start="157:27" pos:end="157:40"><name pos:start="157:27" pos:end="157:33">cpu_reg</name><argument_list pos:start="157:34" pos:end="157:40">(<argument pos:start="157:35" pos:end="157:35"><expr pos:start="157:35" pos:end="157:35"><name pos:start="157:35" pos:end="157:35">s</name></expr></argument>, <argument pos:start="157:38" pos:end="157:39"><expr pos:start="157:38" pos:end="157:39"><name pos:start="157:38" pos:end="157:39">rt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="159:9" pos:end="159:54"><decl pos:start="159:9" pos:end="159:53"><type pos:start="159:9" pos:end="159:11"><name pos:start="159:9" pos:end="159:11">int</name></type> <name pos:start="159:13" pos:end="159:18">memidx</name> <init pos:start="159:20" pos:end="159:53">= <expr pos:start="159:22" pos:end="159:53"><ternary pos:start="159:22" pos:end="159:53"><condition pos:start="159:22" pos:end="159:32"><expr pos:start="159:22" pos:end="159:30"><name pos:start="159:22" pos:end="159:30">is_unpriv</name></expr> ?</condition><then pos:start="159:34" pos:end="159:34"> <expr pos:start="159:34" pos:end="159:34"><literal type="number" pos:start="159:34" pos:end="159:34">1</literal></expr> </then><else pos:start="159:36" pos:end="159:53">: <expr pos:start="159:38" pos:end="159:53"><call pos:start="159:38" pos:end="159:53"><name pos:start="159:38" pos:end="159:50">get_mem_index</name><argument_list pos:start="159:51" pos:end="159:53">(<argument pos:start="159:52" pos:end="159:52"><expr pos:start="159:52" pos:end="159:52"><name pos:start="159:52" pos:end="159:52">s</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="163:9" pos:end="173:9"><if pos:start="163:9" pos:end="167:9">if <condition pos:start="163:12" pos:end="163:21">(<expr pos:start="163:13" pos:end="163:20"><name pos:start="163:13" pos:end="163:20">is_store</name></expr>)</condition> <block pos:start="163:23" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:64">

            <expr_stmt pos:start="165:13" pos:end="165:64"><expr pos:start="165:13" pos:end="165:63"><call pos:start="165:13" pos:end="165:63"><name pos:start="165:13" pos:end="165:28">do_gpr_st_memidx</name><argument_list pos:start="165:29" pos:end="165:63">(<argument pos:start="165:30" pos:end="165:30"><expr pos:start="165:30" pos:end="165:30"><name pos:start="165:30" pos:end="165:30">s</name></expr></argument>, <argument pos:start="165:33" pos:end="165:38"><expr pos:start="165:33" pos:end="165:38"><name pos:start="165:33" pos:end="165:38">tcg_rt</name></expr></argument>, <argument pos:start="165:41" pos:end="165:48"><expr pos:start="165:41" pos:end="165:48"><name pos:start="165:41" pos:end="165:48">tcg_addr</name></expr></argument>, <argument pos:start="165:51" pos:end="165:54"><expr pos:start="165:51" pos:end="165:54"><name pos:start="165:51" pos:end="165:54">size</name></expr></argument>, <argument pos:start="165:57" pos:end="165:62"><expr pos:start="165:57" pos:end="165:62"><name pos:start="165:57" pos:end="165:62">memidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="167:11" pos:end="173:9">else <block pos:start="167:16" pos:end="173:9">{<block_content pos:start="169:13" pos:end="171:61">

            <expr_stmt pos:start="169:13" pos:end="171:61"><expr pos:start="169:13" pos:end="171:60"><call pos:start="169:13" pos:end="171:60"><name pos:start="169:13" pos:end="169:28">do_gpr_ld_memidx</name><argument_list pos:start="169:29" pos:end="171:60">(<argument pos:start="169:30" pos:end="169:30"><expr pos:start="169:30" pos:end="169:30"><name pos:start="169:30" pos:end="169:30">s</name></expr></argument>, <argument pos:start="169:33" pos:end="169:38"><expr pos:start="169:33" pos:end="169:38"><name pos:start="169:33" pos:end="169:38">tcg_rt</name></expr></argument>, <argument pos:start="169:41" pos:end="169:48"><expr pos:start="169:41" pos:end="169:48"><name pos:start="169:41" pos:end="169:48">tcg_addr</name></expr></argument>, <argument pos:start="169:51" pos:end="169:54"><expr pos:start="169:51" pos:end="169:54"><name pos:start="169:51" pos:end="169:54">size</name></expr></argument>,

                             <argument pos:start="171:30" pos:end="171:38"><expr pos:start="171:30" pos:end="171:38"><name pos:start="171:30" pos:end="171:38">is_signed</name></expr></argument>, <argument pos:start="171:41" pos:end="171:51"><expr pos:start="171:41" pos:end="171:51"><name pos:start="171:41" pos:end="171:51">is_extended</name></expr></argument>, <argument pos:start="171:54" pos:end="171:59"><expr pos:start="171:54" pos:end="171:59"><name pos:start="171:54" pos:end="171:59">memidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="179:5" pos:end="191:5"><if pos:start="179:5" pos:end="191:5">if <condition pos:start="179:8" pos:end="179:18">(<expr pos:start="179:9" pos:end="179:17"><name pos:start="179:9" pos:end="179:17">writeback</name></expr>)</condition> <block pos:start="179:20" pos:end="191:5">{<block_content pos:start="181:9" pos:end="189:42">

        <decl_stmt pos:start="181:9" pos:end="181:44"><decl pos:start="181:9" pos:end="181:43"><type pos:start="181:9" pos:end="181:16"><name pos:start="181:9" pos:end="181:16">TCGv_i64</name></type> <name pos:start="181:18" pos:end="181:23">tcg_rn</name> <init pos:start="181:25" pos:end="181:43">= <expr pos:start="181:27" pos:end="181:43"><call pos:start="181:27" pos:end="181:43"><name pos:start="181:27" pos:end="181:36">cpu_reg_sp</name><argument_list pos:start="181:37" pos:end="181:43">(<argument pos:start="181:38" pos:end="181:38"><expr pos:start="181:38" pos:end="181:38"><name pos:start="181:38" pos:end="181:38">s</name></expr></argument>, <argument pos:start="181:41" pos:end="181:42"><expr pos:start="181:41" pos:end="181:42"><name pos:start="181:41" pos:end="181:42">rn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="183:9" pos:end="187:9"><if pos:start="183:9" pos:end="187:9">if <condition pos:start="183:12" pos:end="183:23">(<expr pos:start="183:13" pos:end="183:22"><name pos:start="183:13" pos:end="183:22">post_index</name></expr>)</condition> <block pos:start="183:25" pos:end="187:9">{<block_content pos:start="185:13" pos:end="185:55">

            <expr_stmt pos:start="185:13" pos:end="185:55"><expr pos:start="185:13" pos:end="185:54"><call pos:start="185:13" pos:end="185:54"><name pos:start="185:13" pos:end="185:28">tcg_gen_addi_i64</name><argument_list pos:start="185:29" pos:end="185:54">(<argument pos:start="185:30" pos:end="185:37"><expr pos:start="185:30" pos:end="185:37"><name pos:start="185:30" pos:end="185:37">tcg_addr</name></expr></argument>, <argument pos:start="185:40" pos:end="185:47"><expr pos:start="185:40" pos:end="185:47"><name pos:start="185:40" pos:end="185:47">tcg_addr</name></expr></argument>, <argument pos:start="185:50" pos:end="185:53"><expr pos:start="185:50" pos:end="185:53"><name pos:start="185:50" pos:end="185:53">imm9</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:42"><expr pos:start="189:9" pos:end="189:41"><call pos:start="189:9" pos:end="189:41"><name pos:start="189:9" pos:end="189:23">tcg_gen_mov_i64</name><argument_list pos:start="189:24" pos:end="189:41">(<argument pos:start="189:25" pos:end="189:30"><expr pos:start="189:25" pos:end="189:30"><name pos:start="189:25" pos:end="189:30">tcg_rn</name></expr></argument>, <argument pos:start="189:33" pos:end="189:40"><expr pos:start="189:33" pos:end="189:40"><name pos:start="189:33" pos:end="189:40">tcg_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
