<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13439.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint32_t</name></type> <name pos:start="1:17" pos:end="1:34">serial_ioport_read</name><parameter_list pos:start="1:35" pos:end="1:63">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:39">void</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">opaque</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:62"><decl pos:start="1:50" pos:end="1:62"><type pos:start="1:50" pos:end="1:62"><name pos:start="1:50" pos:end="1:57">uint32_t</name></type> <name pos:start="1:59" pos:end="1:62">addr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="127:1">{<block_content pos:start="5:5" pos:end="125:15">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SerialState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">s</name> <init pos:start="5:20" pos:end="5:27">= <expr pos:start="5:22" pos:end="5:27"><name pos:start="5:22" pos:end="5:27">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:14"><expr pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:8">addr</name> <operator pos:start="11:10" pos:end="11:11">&amp;=</operator> <literal type="number" pos:start="11:13" pos:end="11:13">7</literal></expr>;</expr_stmt>

    <switch pos:start="13:5" pos:end="120:0">switch<condition pos:start="13:11" pos:end="13:16">(<expr pos:start="13:12" pos:end="13:15"><name pos:start="13:12" pos:end="13:15">addr</name></expr>)</condition> <block pos:start="13:18" pos:end="120:0">{<block_content pos:start="15:5" pos:end="115:14">

    <default pos:start="15:5" pos:end="15:12">default:</default>

    <case pos:start="17:5" pos:end="17:11">case <expr pos:start="17:10" pos:end="17:10"><literal type="number" pos:start="17:10" pos:end="17:10">0</literal></expr>:</case>

        <if_stmt pos:start="19:9" pos:end="39:9"><if pos:start="19:9" pos:end="23:9">if <condition pos:start="19:12" pos:end="19:35">(<expr pos:start="19:13" pos:end="19:34"><name pos:start="19:13" pos:end="19:18"><name pos:start="19:13" pos:end="19:13">s</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:18">lcr</name></name> <operator pos:start="19:20" pos:end="19:20">&amp;</operator> <name pos:start="19:22" pos:end="19:34">UART_LCR_DLAB</name></expr>)</condition> <block pos:start="19:37" pos:end="23:9">{<block_content pos:start="21:13" pos:end="21:36">

            <expr_stmt pos:start="21:13" pos:end="21:36"><expr pos:start="21:13" pos:end="21:35"><name pos:start="21:13" pos:end="21:15">ret</name> <operator pos:start="21:17" pos:end="21:17">=</operator> <name pos:start="21:19" pos:end="21:28"><name pos:start="21:19" pos:end="21:19">s</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:28">divider</name></name> <operator pos:start="21:30" pos:end="21:30">&amp;</operator> <literal type="number" pos:start="21:32" pos:end="21:35">0xff</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="23:11" pos:end="39:9">else <block pos:start="23:16" pos:end="39:9">{<block_content pos:start="25:13" pos:end="37:13">

            <expr_stmt pos:start="25:13" pos:end="25:25"><expr pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:24"><name pos:start="25:19" pos:end="25:19">s</name><operator pos:start="25:20" pos:end="25:21">-&gt;</operator><name pos:start="25:22" pos:end="25:24">rbr</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="27:13" pos:end="27:51"><expr pos:start="27:13" pos:end="27:50"><name pos:start="27:13" pos:end="27:18"><name pos:start="27:13" pos:end="27:13">s</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:18">lsr</name></name> <operator pos:start="27:20" pos:end="27:21">&amp;=</operator> <operator pos:start="27:23" pos:end="27:23">~</operator><operator pos:start="27:24" pos:end="27:24">(</operator><name pos:start="27:25" pos:end="27:35">UART_LSR_DR</name> <operator pos:start="27:37" pos:end="27:37">|</operator> <name pos:start="27:39" pos:end="27:49">UART_LSR_BI</name><operator pos:start="27:50" pos:end="27:50">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:33"><expr pos:start="29:13" pos:end="29:32"><call pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:29">serial_update_irq</name><argument_list pos:start="29:30" pos:end="29:32">(<argument pos:start="29:31" pos:end="29:31"><expr pos:start="29:31" pos:end="29:31"><name pos:start="29:31" pos:end="29:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="31:13" pos:end="37:13"><if pos:start="31:13" pos:end="37:13">if <condition pos:start="31:16" pos:end="31:42">(<expr pos:start="31:17" pos:end="31:41"><operator pos:start="31:17" pos:end="31:17">!</operator><operator pos:start="31:18" pos:end="31:18">(</operator><name pos:start="31:19" pos:end="31:24"><name pos:start="31:19" pos:end="31:19">s</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:24">mcr</name></name> <operator pos:start="31:26" pos:end="31:26">&amp;</operator> <name pos:start="31:28" pos:end="31:40">UART_MCR_LOOP</name><operator pos:start="31:41" pos:end="31:41">)</operator></expr>)</condition> <block pos:start="31:44" pos:end="37:13">{<block_content pos:start="35:17" pos:end="35:46">

                <comment type="block" pos:start="33:17" pos:end="33:62">/* in loopback mode, don't receive any data */</comment>

                <expr_stmt pos:start="35:17" pos:end="35:46"><expr pos:start="35:17" pos:end="35:45"><call pos:start="35:17" pos:end="35:45"><name pos:start="35:17" pos:end="35:37">qemu_chr_accept_input</name><argument_list pos:start="35:38" pos:end="35:45">(<argument pos:start="35:39" pos:end="35:44"><expr pos:start="35:39" pos:end="35:44"><name pos:start="35:39" pos:end="35:44"><name pos:start="35:39" pos:end="35:39">s</name><operator pos:start="35:40" pos:end="35:41">-&gt;</operator><name pos:start="35:42" pos:end="35:44">chr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:11">case <expr pos:start="43:10" pos:end="43:10"><literal type="number" pos:start="43:10" pos:end="43:10">1</literal></expr>:</case>

        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:35">(<expr pos:start="45:13" pos:end="45:34"><name pos:start="45:13" pos:end="45:18"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:18">lcr</name></name> <operator pos:start="45:20" pos:end="45:20">&amp;</operator> <name pos:start="45:22" pos:end="45:34">UART_LCR_DLAB</name></expr>)</condition> <block pos:start="45:37" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:43">

            <expr_stmt pos:start="47:13" pos:end="47:43"><expr pos:start="47:13" pos:end="47:42"><name pos:start="47:13" pos:end="47:15">ret</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <operator pos:start="47:19" pos:end="47:19">(</operator><name pos:start="47:20" pos:end="47:29"><name pos:start="47:20" pos:end="47:20">s</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:29">divider</name></name> <operator pos:start="47:31" pos:end="47:32">&gt;&gt;</operator> <literal type="number" pos:start="47:34" pos:end="47:34">8</literal><operator pos:start="47:35" pos:end="47:35">)</operator> <operator pos:start="47:37" pos:end="47:37">&amp;</operator> <literal type="number" pos:start="47:39" pos:end="47:42">0xff</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="49:11" pos:end="53:9">else <block pos:start="49:16" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:25">

            <expr_stmt pos:start="51:13" pos:end="51:25"><expr pos:start="51:13" pos:end="51:24"><name pos:start="51:13" pos:end="51:15">ret</name> <operator pos:start="51:17" pos:end="51:17">=</operator> <name pos:start="51:19" pos:end="51:24"><name pos:start="51:19" pos:end="51:19">s</name><operator pos:start="51:20" pos:end="51:21">-&gt;</operator><name pos:start="51:22" pos:end="51:24">ier</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="57:11">case <expr pos:start="57:10" pos:end="57:10"><literal type="number" pos:start="57:10" pos:end="57:10">2</literal></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="59:21"><expr pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <name pos:start="59:15" pos:end="59:20"><name pos:start="59:15" pos:end="59:15">s</name><operator pos:start="59:16" pos:end="59:17">-&gt;</operator><name pos:start="59:18" pos:end="59:20">iir</name></name></expr>;</expr_stmt>

        <comment type="block" pos:start="61:9" pos:end="61:35">/* reset THR pending bit */</comment>

        <if_stmt pos:start="63:9" pos:end="65:32"><if pos:start="63:9" pos:end="65:32">if <condition pos:start="63:12" pos:end="63:41">(<expr pos:start="63:13" pos:end="63:40"><operator pos:start="63:13" pos:end="63:13">(</operator><name pos:start="63:14" pos:end="63:16">ret</name> <operator pos:start="63:18" pos:end="63:18">&amp;</operator> <literal type="number" pos:start="63:20" pos:end="63:22">0x7</literal><operator pos:start="63:23" pos:end="63:23">)</operator> <operator pos:start="63:25" pos:end="63:26">==</operator> <name pos:start="63:28" pos:end="63:40">UART_IIR_THRI</name></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:32"><block_content pos:start="65:13" pos:end="65:32">

            <expr_stmt pos:start="65:13" pos:end="65:32"><expr pos:start="65:13" pos:end="65:31"><name pos:start="65:13" pos:end="65:27"><name pos:start="65:13" pos:end="65:13">s</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:27">thr_ipending</name></name> <operator pos:start="65:29" pos:end="65:29">=</operator> <literal type="number" pos:start="65:31" pos:end="65:31">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:29"><expr pos:start="67:9" pos:end="67:28"><call pos:start="67:9" pos:end="67:28"><name pos:start="67:9" pos:end="67:25">serial_update_irq</name><argument_list pos:start="67:26" pos:end="67:28">(<argument pos:start="67:27" pos:end="67:27"><expr pos:start="67:27" pos:end="67:27"><name pos:start="67:27" pos:end="67:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="69:9" pos:end="69:14">break;</break>

    <case pos:start="71:5" pos:end="71:11">case <expr pos:start="71:10" pos:end="71:10"><literal type="number" pos:start="71:10" pos:end="71:10">3</literal></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:21"><expr pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:11">ret</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <name pos:start="73:15" pos:end="73:20"><name pos:start="73:15" pos:end="73:15">s</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:20">lcr</name></name></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:11">case <expr pos:start="77:10" pos:end="77:10"><literal type="number" pos:start="77:10" pos:end="77:10">4</literal></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:21"><expr pos:start="79:9" pos:end="79:20"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:20"><name pos:start="79:15" pos:end="79:15">s</name><operator pos:start="79:16" pos:end="79:17">-&gt;</operator><name pos:start="79:18" pos:end="79:20">mcr</name></name></expr>;</expr_stmt>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:11">case <expr pos:start="83:10" pos:end="83:10"><literal type="number" pos:start="83:10" pos:end="83:10">5</literal></expr>:</case>

        <expr_stmt pos:start="85:9" pos:end="85:21"><expr pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <name pos:start="85:15" pos:end="85:20"><name pos:start="85:15" pos:end="85:15">s</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:20">lsr</name></name></expr>;</expr_stmt>

        <break pos:start="87:9" pos:end="87:14">break;</break>

    <case pos:start="89:5" pos:end="89:11">case <expr pos:start="89:10" pos:end="89:10"><literal type="number" pos:start="89:10" pos:end="89:10">6</literal></expr>:</case>

        <if_stmt pos:start="91:9" pos:end="107:9"><if pos:start="91:9" pos:end="103:9">if <condition pos:start="91:12" pos:end="91:35">(<expr pos:start="91:13" pos:end="91:34"><name pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:18">mcr</name></name> <operator pos:start="91:20" pos:end="91:20">&amp;</operator> <name pos:start="91:22" pos:end="91:34">UART_MCR_LOOP</name></expr>)</condition> <block pos:start="91:37" pos:end="103:9">{<block_content pos:start="97:13" pos:end="101:40">

            <comment type="block" pos:start="93:13" pos:end="95:24">/* in loopback, the modem output pins are connected to the

               inputs */</comment>

            <expr_stmt pos:start="97:13" pos:end="97:39"><expr pos:start="97:13" pos:end="97:38"><name pos:start="97:13" pos:end="97:15">ret</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <operator pos:start="97:19" pos:end="97:19">(</operator><name pos:start="97:20" pos:end="97:25"><name pos:start="97:20" pos:end="97:20">s</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:25">mcr</name></name> <operator pos:start="97:27" pos:end="97:27">&amp;</operator> <literal type="number" pos:start="97:29" pos:end="97:32">0x0c</literal><operator pos:start="97:33" pos:end="97:33">)</operator> <operator pos:start="97:35" pos:end="97:36">&lt;&lt;</operator> <literal type="number" pos:start="97:38" pos:end="97:38">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:40"><expr pos:start="99:13" pos:end="99:39"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:18">|=</operator> <operator pos:start="99:20" pos:end="99:20">(</operator><name pos:start="99:21" pos:end="99:26"><name pos:start="99:21" pos:end="99:21">s</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:26">mcr</name></name> <operator pos:start="99:28" pos:end="99:28">&amp;</operator> <literal type="number" pos:start="99:30" pos:end="99:33">0x02</literal><operator pos:start="99:34" pos:end="99:34">)</operator> <operator pos:start="99:36" pos:end="99:37">&lt;&lt;</operator> <literal type="number" pos:start="99:39" pos:end="99:39">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:40"><expr pos:start="101:13" pos:end="101:39"><name pos:start="101:13" pos:end="101:15">ret</name> <operator pos:start="101:17" pos:end="101:18">|=</operator> <operator pos:start="101:20" pos:end="101:20">(</operator><name pos:start="101:21" pos:end="101:26"><name pos:start="101:21" pos:end="101:21">s</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:26">mcr</name></name> <operator pos:start="101:28" pos:end="101:28">&amp;</operator> <literal type="number" pos:start="101:30" pos:end="101:33">0x01</literal><operator pos:start="101:34" pos:end="101:34">)</operator> <operator pos:start="101:36" pos:end="101:37">&lt;&lt;</operator> <literal type="number" pos:start="101:39" pos:end="101:39">5</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="103:11" pos:end="107:9">else <block pos:start="103:16" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:25">

            <expr_stmt pos:start="105:13" pos:end="105:25"><expr pos:start="105:13" pos:end="105:24"><name pos:start="105:13" pos:end="105:15">ret</name> <operator pos:start="105:17" pos:end="105:17">=</operator> <name pos:start="105:19" pos:end="105:24"><name pos:start="105:19" pos:end="105:19">s</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:24">msr</name></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    <case pos:start="111:5" pos:end="111:11">case <expr pos:start="111:10" pos:end="111:10"><literal type="number" pos:start="111:10" pos:end="111:10">7</literal></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:21"><expr pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <name pos:start="113:15" pos:end="113:20"><name pos:start="113:15" pos:end="113:15">s</name><operator pos:start="113:16" pos:end="113:17">-&gt;</operator><name pos:start="113:18" pos:end="113:20">scr</name></name></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    </block_content>}</block></switch>

<cpp:ifdef pos:start="119:1" pos:end="119:19">#<cpp:directive pos:start="119:2" pos:end="119:6">ifdef</cpp:directive> <name pos:start="119:8" pos:end="119:19">DEBUG_SERIAL</name></cpp:ifdef>

    <expr_stmt pos:start="121:5" pos:end="124:0"><expr pos:start="121:5" pos:end="121:62"><call pos:start="121:5" pos:end="121:62"><name pos:start="121:5" pos:end="121:10">printf</name><argument_list pos:start="121:11" pos:end="121:62">(<argument pos:start="121:12" pos:end="121:50"><expr pos:start="121:12" pos:end="121:50"><literal type="string" pos:start="121:12" pos:end="121:50">"serial: read addr=0x%02x val=0x%02x\n"</literal></expr></argument>, <argument pos:start="121:53" pos:end="121:56"><expr pos:start="121:53" pos:end="121:56"><name pos:start="121:53" pos:end="121:56">addr</name></expr></argument>, <argument pos:start="121:59" pos:end="121:61"><expr pos:start="121:59" pos:end="121:61"><name pos:start="121:59" pos:end="121:61">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>

    <return pos:start="125:5" pos:end="125:15">return <expr pos:start="125:12" pos:end="125:14"><name pos:start="125:12" pos:end="125:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
