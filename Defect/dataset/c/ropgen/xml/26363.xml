<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26363.c" pos:tabs="8"><function pos:start="1:1" pos:end="82:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">mov_text_decode_frame</name><parameter_list pos:start="1:33" pos:end="2:74">(<parameter pos:start="1:34" pos:end="1:54"><decl pos:start="1:34" pos:end="1:54"><type pos:start="1:34" pos:end="1:54"><name pos:start="1:34" pos:end="1:47">AVCodecContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">avctx</name></decl></parameter>,
                            <parameter pos:start="2:29" pos:end="2:38"><decl pos:start="2:29" pos:end="2:38"><type pos:start="2:29" pos:end="2:38"><name pos:start="2:29" pos:end="2:32">void</name> <modifier pos:start="2:34" pos:end="2:34">*</modifier></type><name pos:start="2:35" pos:end="2:38">data</name></decl></parameter>, <parameter pos:start="2:41" pos:end="2:56"><decl pos:start="2:41" pos:end="2:56"><type pos:start="2:41" pos:end="2:56"><name pos:start="2:41" pos:end="2:43">int</name> <modifier pos:start="2:45" pos:end="2:45">*</modifier></type><name pos:start="2:46" pos:end="2:56">got_sub_ptr</name></decl></parameter>, <parameter pos:start="2:59" pos:end="2:73"><decl pos:start="2:59" pos:end="2:73"><type pos:start="2:59" pos:end="2:73"><name pos:start="2:59" pos:end="2:66">AVPacket</name> <modifier pos:start="2:68" pos:end="2:68">*</modifier></type><name pos:start="2:69" pos:end="2:73">avpkt</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="82:1">{<block_content pos:start="4:5" pos:end="81:23">
    <decl_stmt pos:start="4:5" pos:end="4:27"><decl pos:start="4:5" pos:end="4:26"><type pos:start="4:5" pos:end="4:16"><name pos:start="4:5" pos:end="4:14">AVSubtitle</name> <modifier pos:start="4:16" pos:end="4:16">*</modifier></type><name pos:start="4:17" pos:end="4:19">sub</name> <init pos:start="4:21" pos:end="4:26">= <expr pos:start="4:23" pos:end="4:26"><name pos:start="4:23" pos:end="4:26">data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MovTextContext</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">m</name> <init pos:start="5:23" pos:end="5:40">= <expr pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:40"><name pos:start="5:25" pos:end="5:29">avctx</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:40">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:12"><decl pos:start="6:5" pos:end="6:11"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">AVBPrint</name></type> <name pos:start="7:14" pos:end="7:16">buf</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:28"><decl pos:start="8:5" pos:end="8:27"><type pos:start="8:5" pos:end="8:10"><name pos:start="8:5" pos:end="8:8">char</name> <modifier pos:start="8:10" pos:end="8:10">*</modifier></type><name pos:start="8:11" pos:end="8:13">ptr</name> <init pos:start="8:15" pos:end="8:27">= <expr pos:start="8:17" pos:end="8:27"><name pos:start="8:17" pos:end="8:27"><name pos:start="8:17" pos:end="8:21">avpkt</name><operator pos:start="8:22" pos:end="8:23">-&gt;</operator><name pos:start="8:24" pos:end="8:27">data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">end</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:41"><decl pos:start="10:5" pos:end="10:19"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:19">text_length</name></decl>, <decl pos:start="10:22" pos:end="10:30"><type ref="prev" pos:start="10:5" pos:end="10:7"/><name pos:start="10:22" pos:end="10:30">tsmb_type</name></decl>, <decl pos:start="10:33" pos:end="10:40"><type ref="prev" pos:start="10:5" pos:end="10:7"/><name pos:start="10:33" pos:end="10:40">ret_tsmb</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:22">tsmb_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:24"><decl pos:start="12:5" pos:end="12:23"><type pos:start="12:5" pos:end="12:19"><specifier pos:start="12:5" pos:end="12:9">const</specifier> <name pos:start="12:11" pos:end="12:17">uint8_t</name> <modifier pos:start="12:19" pos:end="12:19">*</modifier></type><name pos:start="12:20" pos:end="12:23">tsmb</name></decl>;</decl_stmt>
    <if_stmt pos:start="13:5" pos:end="14:35"><if pos:start="13:5" pos:end="14:35">if <condition pos:start="13:8" pos:end="13:32">(<expr pos:start="13:9" pos:end="13:31"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:12">ptr</name> <operator pos:start="13:14" pos:end="13:15">||</operator> <name pos:start="13:17" pos:end="13:27"><name pos:start="13:17" pos:end="13:21">avpkt</name><operator pos:start="13:22" pos:end="13:23">-&gt;</operator><name pos:start="13:24" pos:end="13:27">size</name></name> <operator pos:start="13:29" pos:end="13:29">&lt;</operator> <literal type="number" pos:start="13:31" pos:end="13:31">2</literal></expr>)</condition><block type="pseudo" pos:start="14:9" pos:end="14:35"><block_content pos:start="14:9" pos:end="14:35">
        <return pos:start="14:9" pos:end="14:35">return <expr pos:start="14:16" pos:end="14:34"><name pos:start="14:16" pos:end="14:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block" pos:start="15:5" pos:end="21:7">/*
     * A packet of size two with value zero is an empty subtitle
     * used to mark the end of the previous non-empty subtitle.
     * We can just drop them here as we have duration information
     * already. If the value is non-zero, then it's technically a
     * bad packet.
     */</comment>
    <if_stmt pos:start="22:5" pos:end="23:59"><if pos:start="22:5" pos:end="23:59">if <condition pos:start="22:8" pos:end="22:25">(<expr pos:start="22:9" pos:end="22:24"><name pos:start="22:9" pos:end="22:19"><name pos:start="22:9" pos:end="22:13">avpkt</name><operator pos:start="22:14" pos:end="22:15">-&gt;</operator><name pos:start="22:16" pos:end="22:19">size</name></name> <operator pos:start="22:21" pos:end="22:22">==</operator> <literal type="number" pos:start="22:24" pos:end="22:24">2</literal></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:59"><block_content pos:start="23:9" pos:end="23:59">
        <return pos:start="23:9" pos:end="23:59">return <expr pos:start="23:16" pos:end="23:58"><ternary pos:start="23:16" pos:end="23:58"><condition pos:start="23:16" pos:end="23:34"><expr pos:start="23:16" pos:end="23:32"><call pos:start="23:16" pos:end="23:27"><name pos:start="23:16" pos:end="23:22">AV_RB16</name><argument_list pos:start="23:23" pos:end="23:27">(<argument pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:26">ptr</name></expr></argument>)</argument_list></call> <operator pos:start="23:29" pos:end="23:30">==</operator> <literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr> ?</condition><then pos:start="23:36" pos:end="23:36"> <expr pos:start="23:36" pos:end="23:36"><literal type="number" pos:start="23:36" pos:end="23:36">0</literal></expr> </then><else pos:start="23:38" pos:end="23:58">: <expr pos:start="23:40" pos:end="23:58"><name pos:start="23:40" pos:end="23:58">AVERROR_INVALIDDATA</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
    <comment type="block" pos:start="24:5" pos:end="28:7">/*
     * The first two bytes of the packet are the length of the text string
     * In complex cases, there are style descriptors appended to the string
     * so we can't just assume the packet size is the string size.
     */</comment>
    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:15">text_length</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:30"><name pos:start="29:19" pos:end="29:25">AV_RB16</name><argument_list pos:start="29:26" pos:end="29:30">(<argument pos:start="29:27" pos:end="29:29"><expr pos:start="29:27" pos:end="29:29"><name pos:start="29:27" pos:end="29:29">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="30:5" pos:end="30:52"><expr pos:start="30:5" pos:end="30:51"><name pos:start="30:5" pos:end="30:7">end</name> <operator pos:start="30:9" pos:end="30:9">=</operator> <name pos:start="30:11" pos:end="30:13">ptr</name> <operator pos:start="30:15" pos:end="30:15">+</operator> <call pos:start="30:17" pos:end="30:51"><name pos:start="30:17" pos:end="30:21">FFMIN</name><argument_list pos:start="30:22" pos:end="30:51">(<argument pos:start="30:23" pos:end="30:37"><expr pos:start="30:23" pos:end="30:37"><literal type="number" pos:start="30:23" pos:end="30:25">2</literal> <operator pos:start="30:25" pos:end="30:25">+</operator> <name pos:start="30:27" pos:end="30:37">text_length</name></expr></argument>, <argument pos:start="30:40" pos:end="30:50"><expr pos:start="30:40" pos:end="30:50"><name pos:start="30:40" pos:end="30:50"><name pos:start="30:40" pos:end="30:44">avpkt</name><operator pos:start="30:45" pos:end="30:46">-&gt;</operator><name pos:start="30:47" pos:end="30:50">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="31:5" pos:end="31:13"><expr pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:7">ptr</name> <operator pos:start="31:9" pos:end="31:10">+=</operator> <literal type="number" pos:start="31:12" pos:end="31:12">2</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="32:5" pos:end="32:18"><expr pos:start="32:5" pos:end="32:17"><name pos:start="32:5" pos:end="32:13">tsmb_size</name> <operator pos:start="32:15" pos:end="32:15">=</operator> <literal type="number" pos:start="32:17" pos:end="32:17">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="33:5" pos:end="33:35"><expr pos:start="33:5" pos:end="33:34"><name pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:5">m</name><operator pos:start="33:6" pos:end="33:7">-&gt;</operator><name pos:start="33:8" pos:end="33:16">tracksize</name></name> <operator pos:start="33:18" pos:end="33:18">=</operator> <literal type="number" pos:start="33:20" pos:end="33:22">2</literal> <operator pos:start="33:22" pos:end="33:22">+</operator> <name pos:start="33:24" pos:end="33:34">text_length</name></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:25"><expr pos:start="34:5" pos:end="34:24"><name pos:start="34:5" pos:end="34:20"><name pos:start="34:5" pos:end="34:5">m</name><operator pos:start="34:6" pos:end="34:7">-&gt;</operator><name pos:start="34:8" pos:end="34:20">style_entries</name></name> <operator pos:start="34:22" pos:end="34:22">=</operator> <literal type="number" pos:start="34:24" pos:end="34:24">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="35:5" pos:end="35:21"><expr pos:start="35:5" pos:end="35:20"><name pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:5">m</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:16">box_flags</name></name> <operator pos:start="35:18" pos:end="35:18">=</operator> <literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="36:5" pos:end="36:19"><expr pos:start="36:5" pos:end="36:18"><name pos:start="36:5" pos:end="36:14"><name pos:start="36:5" pos:end="36:5">m</name><operator pos:start="36:6" pos:end="36:7">-&gt;</operator><name pos:start="36:8" pos:end="36:14">count_s</name></name> <operator pos:start="36:16" pos:end="36:16">=</operator> <literal type="number" pos:start="36:18" pos:end="36:18">0</literal></expr>;</expr_stmt>
    <comment type="line" pos:start="37:5" pos:end="37:77">// Note that the spec recommends lines be no longer than 2048 characters.</comment>
    <expr_stmt pos:start="38:5" pos:end="38:54"><expr pos:start="38:5" pos:end="38:53"><call pos:start="38:5" pos:end="38:53"><name pos:start="38:5" pos:end="38:18">av_bprint_init</name><argument_list pos:start="38:19" pos:end="38:53">(<argument pos:start="38:20" pos:end="38:23"><expr pos:start="38:20" pos:end="38:23"><operator pos:start="38:20" pos:end="38:20">&amp;</operator><name pos:start="38:21" pos:end="38:23">buf</name></expr></argument>, <argument pos:start="38:26" pos:end="38:26"><expr pos:start="38:26" pos:end="38:26"><literal type="number" pos:start="38:26" pos:end="38:26">0</literal></expr></argument>, <argument pos:start="38:29" pos:end="38:52"><expr pos:start="38:29" pos:end="38:52"><name pos:start="38:29" pos:end="38:52">AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="39:5" pos:end="75:39"><if pos:start="39:5" pos:end="74:5">if <condition pos:start="39:8" pos:end="39:39">(<expr pos:start="39:9" pos:end="39:38"><name pos:start="39:9" pos:end="39:19">text_length</name> <operator pos:start="39:21" pos:end="39:21">+</operator> <literal type="number" pos:start="39:23" pos:end="39:23">2</literal> <operator pos:start="39:25" pos:end="39:26">!=</operator> <name pos:start="39:28" pos:end="39:38"><name pos:start="39:28" pos:end="39:32">avpkt</name><operator pos:start="39:33" pos:end="39:34">-&gt;</operator><name pos:start="39:35" pos:end="39:38">size</name></name></expr>)</condition> <block pos:start="39:41" pos:end="74:5">{<block_content pos:start="40:9" pos:end="73:39">
        <while pos:start="40:9" pos:end="72:9">while <condition pos:start="40:15" pos:end="40:47">(<expr pos:start="40:16" pos:end="40:46"><name pos:start="40:16" pos:end="40:27"><name pos:start="40:16" pos:end="40:16">m</name><operator pos:start="40:17" pos:end="40:18">-&gt;</operator><name pos:start="40:19" pos:end="40:27">tracksize</name></name> <operator pos:start="40:29" pos:end="40:29">+</operator> <literal type="number" pos:start="40:31" pos:end="40:31">8</literal> <operator pos:start="40:33" pos:end="40:34">&lt;=</operator> <name pos:start="40:36" pos:end="40:46"><name pos:start="40:36" pos:end="40:40">avpkt</name><operator pos:start="40:41" pos:end="40:42">-&gt;</operator><name pos:start="40:43" pos:end="40:46">size</name></name></expr>)</condition> <block pos:start="40:49" pos:end="72:9">{<block_content pos:start="42:13" pos:end="71:52">
            <comment type="line" pos:start="41:13" pos:end="41:45">// A box is a minimum of 8 bytes.</comment>
            <expr_stmt pos:start="42:13" pos:end="42:42"><expr pos:start="42:13" pos:end="42:41"><name pos:start="42:13" pos:end="42:16">tsmb</name> <operator pos:start="42:18" pos:end="42:18">=</operator> <name pos:start="42:20" pos:end="42:22">ptr</name> <operator pos:start="42:24" pos:end="42:24">+</operator> <name pos:start="42:26" pos:end="42:37"><name pos:start="42:26" pos:end="42:26">m</name><operator pos:start="42:27" pos:end="42:28">-&gt;</operator><name pos:start="42:29" pos:end="42:37">tracksize</name></name> <operator pos:start="42:39" pos:end="42:39">-</operator> <literal type="number" pos:start="42:41" pos:end="42:41">2</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="43:13" pos:end="43:38"><expr pos:start="43:13" pos:end="43:37"><name pos:start="43:13" pos:end="43:21">tsmb_size</name> <operator pos:start="43:23" pos:end="43:23">=</operator> <call pos:start="43:25" pos:end="43:37"><name pos:start="43:25" pos:end="43:31">AV_RB32</name><argument_list pos:start="43:32" pos:end="43:37">(<argument pos:start="43:33" pos:end="43:36"><expr pos:start="43:33" pos:end="43:36"><name pos:start="43:33" pos:end="43:36">tsmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="44:13" pos:end="44:22"><expr pos:start="44:13" pos:end="44:21"><name pos:start="44:13" pos:end="44:16">tsmb</name> <operator pos:start="44:18" pos:end="44:19">+=</operator> <literal type="number" pos:start="44:21" pos:end="44:21">4</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="45:13" pos:end="45:38"><expr pos:start="45:13" pos:end="45:37"><name pos:start="45:13" pos:end="45:21">tsmb_type</name> <operator pos:start="45:23" pos:end="45:23">=</operator> <call pos:start="45:25" pos:end="45:37"><name pos:start="45:25" pos:end="45:31">AV_RB32</name><argument_list pos:start="45:32" pos:end="45:37">(<argument pos:start="45:33" pos:end="45:36"><expr pos:start="45:33" pos:end="45:36"><name pos:start="45:33" pos:end="45:36">tsmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="46:13" pos:end="46:22"><expr pos:start="46:13" pos:end="46:21"><name pos:start="46:13" pos:end="46:16">tsmb</name> <operator pos:start="46:18" pos:end="46:19">+=</operator> <literal type="number" pos:start="46:21" pos:end="46:21">4</literal></expr>;</expr_stmt>
            <if_stmt pos:start="47:13" pos:end="54:32"><if pos:start="47:13" pos:end="53:13">if <condition pos:start="47:16" pos:end="47:31">(<expr pos:start="47:17" pos:end="47:30"><name pos:start="47:17" pos:end="47:25">tsmb_size</name> <operator pos:start="47:27" pos:end="47:28">==</operator> <literal type="number" pos:start="47:30" pos:end="47:30">1</literal></expr>)</condition> <block pos:start="47:33" pos:end="53:13">{<block_content pos:start="48:17" pos:end="52:33">
                <if_stmt pos:start="48:17" pos:end="49:26"><if pos:start="48:17" pos:end="49:26">if <condition pos:start="48:20" pos:end="48:52">(<expr pos:start="48:21" pos:end="48:51"><name pos:start="48:21" pos:end="48:32"><name pos:start="48:21" pos:end="48:21">m</name><operator pos:start="48:22" pos:end="48:23">-&gt;</operator><name pos:start="48:24" pos:end="48:32">tracksize</name></name> <operator pos:start="48:34" pos:end="48:34">+</operator> <literal type="number" pos:start="48:36" pos:end="48:37">16</literal> <operator pos:start="48:39" pos:end="48:39">&gt;</operator> <name pos:start="48:41" pos:end="48:51"><name pos:start="48:41" pos:end="48:45">avpkt</name><operator pos:start="48:46" pos:end="48:47">-&gt;</operator><name pos:start="48:48" pos:end="48:51">size</name></name></expr>)</condition><block type="pseudo" pos:start="49:21" pos:end="49:26"><block_content pos:start="49:21" pos:end="49:26">
                    <break pos:start="49:21" pos:end="49:26">break;</break></block_content></block></if></if_stmt>
                <expr_stmt pos:start="50:17" pos:end="50:42"><expr pos:start="50:17" pos:end="50:41"><name pos:start="50:17" pos:end="50:25">tsmb_size</name> <operator pos:start="50:27" pos:end="50:27">=</operator> <call pos:start="50:29" pos:end="50:41"><name pos:start="50:29" pos:end="50:35">AV_RB64</name><argument_list pos:start="50:36" pos:end="50:41">(<argument pos:start="50:37" pos:end="50:40"><expr pos:start="50:37" pos:end="50:40"><name pos:start="50:37" pos:end="50:40">tsmb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="51:17" pos:end="51:26"><expr pos:start="51:17" pos:end="51:25"><name pos:start="51:17" pos:end="51:20">tsmb</name> <operator pos:start="51:22" pos:end="51:23">+=</operator> <literal type="number" pos:start="51:25" pos:end="51:25">8</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="52:17" pos:end="52:33"><expr pos:start="52:17" pos:end="52:32"><name pos:start="52:17" pos:end="52:27"><name pos:start="52:17" pos:end="52:17">m</name><operator pos:start="52:18" pos:end="52:19">-&gt;</operator><name pos:start="52:20" pos:end="52:27">size_var</name></name> <operator pos:start="52:29" pos:end="52:29">=</operator> <literal type="number" pos:start="52:31" pos:end="52:32">16</literal></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="53:15" pos:end="54:32">else<block type="pseudo" pos:start="54:17" pos:end="54:32"><block_content pos:start="54:17" pos:end="54:32">
                <expr_stmt pos:start="54:17" pos:end="54:32"><expr pos:start="54:17" pos:end="54:31"><name pos:start="54:17" pos:end="54:27"><name pos:start="54:17" pos:end="54:17">m</name><operator pos:start="54:18" pos:end="54:19">-&gt;</operator><name pos:start="54:20" pos:end="54:27">size_var</name></name> <operator pos:start="54:29" pos:end="54:29">=</operator> <literal type="number" pos:start="54:31" pos:end="54:31">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <comment type="line" pos:start="55:13" pos:end="55:71">//size_var is equal to 8 or 16 depending on the size of box</comment>
            <if_stmt pos:start="56:13" pos:end="59:13"><if pos:start="56:13" pos:end="59:13">if <condition pos:start="56:16" pos:end="56:31">(<expr pos:start="56:17" pos:end="56:30"><name pos:start="56:17" pos:end="56:25">tsmb_size</name> <operator pos:start="56:27" pos:end="56:28">==</operator> <literal type="number" pos:start="56:30" pos:end="56:30">0</literal></expr>)</condition> <block pos:start="56:33" pos:end="59:13">{<block_content pos:start="57:17" pos:end="58:43">
                <expr_stmt pos:start="57:17" pos:end="57:64"><expr pos:start="57:17" pos:end="57:63"><call pos:start="57:17" pos:end="57:63"><name pos:start="57:17" pos:end="57:22">av_log</name><argument_list pos:start="57:23" pos:end="57:63">(<argument pos:start="57:24" pos:end="57:28"><expr pos:start="57:24" pos:end="57:28"><name pos:start="57:24" pos:end="57:28">avctx</name></expr></argument>, <argument pos:start="57:31" pos:end="57:42"><expr pos:start="57:31" pos:end="57:42"><name pos:start="57:31" pos:end="57:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:45" pos:end="57:62"><expr pos:start="57:45" pos:end="57:62"><literal type="string" pos:start="57:45" pos:end="57:62">"tsmb_size is 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="58:17" pos:end="58:43">return <expr pos:start="58:24" pos:end="58:42"><name pos:start="58:24" pos:end="58:42">AVERROR_INVALIDDATA</name></expr>;</return>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="60:13" pos:end="61:22"><if pos:start="60:13" pos:end="61:22">if <condition pos:start="60:16" pos:end="60:55">(<expr pos:start="60:17" pos:end="60:54"><name pos:start="60:17" pos:end="60:25">tsmb_size</name> <operator pos:start="60:27" pos:end="60:27">&gt;</operator> <name pos:start="60:29" pos:end="60:39"><name pos:start="60:29" pos:end="60:33">avpkt</name><operator pos:start="60:34" pos:end="60:35">-&gt;</operator><name pos:start="60:36" pos:end="60:39">size</name></name> <operator pos:start="60:41" pos:end="60:41">-</operator> <name pos:start="60:43" pos:end="60:54"><name pos:start="60:43" pos:end="60:43">m</name><operator pos:start="60:44" pos:end="60:45">-&gt;</operator><name pos:start="60:46" pos:end="60:54">tracksize</name></name></expr>)</condition><block type="pseudo" pos:start="61:17" pos:end="61:22"><block_content pos:start="61:17" pos:end="61:22">
                <break pos:start="61:17" pos:end="61:22">break;</break></block_content></block></if></if_stmt>
            <for pos:start="62:13" pos:end="70:13">for <control pos:start="62:17" pos:end="62:50">(<init pos:start="62:18" pos:end="62:30"><decl pos:start="62:18" pos:end="62:29"><type pos:start="62:18" pos:end="62:23"><name pos:start="62:18" pos:end="62:23">size_t</name></type> <name pos:start="62:25" pos:end="62:25">i</name> <init pos:start="62:27" pos:end="62:29">= <expr pos:start="62:29" pos:end="62:29"><literal type="number" pos:start="62:29" pos:end="62:29">0</literal></expr></init></decl>;</init> <condition pos:start="62:32" pos:end="62:45"><expr pos:start="62:32" pos:end="62:44"><name pos:start="62:32" pos:end="62:32">i</name> <operator pos:start="62:34" pos:end="62:34">&lt;</operator> <name pos:start="62:36" pos:end="62:44">box_count</name></expr>;</condition> <incr pos:start="62:47" pos:end="62:49"><expr pos:start="62:47" pos:end="62:49"><name pos:start="62:47" pos:end="62:47">i</name><operator pos:start="62:48" pos:end="62:49">++</operator></expr></incr>)</control> <block pos:start="62:52" pos:end="70:13">{<block_content pos:start="63:17" pos:end="69:17">
                <if_stmt pos:start="63:17" pos:end="69:17"><if pos:start="63:17" pos:end="69:17">if <condition pos:start="63:20" pos:end="63:51">(<expr pos:start="63:21" pos:end="63:50"><name pos:start="63:21" pos:end="63:29">tsmb_type</name> <operator pos:start="63:31" pos:end="63:32">==</operator> <name pos:start="63:34" pos:end="63:45"><name pos:start="63:34" pos:end="63:42">box_types</name><index pos:start="63:43" pos:end="63:45">[<expr pos:start="63:44" pos:end="63:44"><name pos:start="63:44" pos:end="63:44">i</name></expr>]</index></name><operator pos:start="63:46" pos:end="63:46">.</operator><name pos:start="63:47" pos:end="63:50">type</name></expr>)</condition> <block pos:start="63:53" pos:end="69:17">{<block_content pos:start="64:21" pos:end="68:30">
                    <if_stmt pos:start="64:21" pos:end="65:30"><if pos:start="64:21" pos:end="65:30">if <condition pos:start="64:24" pos:end="64:90">(<expr pos:start="64:25" pos:end="64:89"><name pos:start="64:25" pos:end="64:36"><name pos:start="64:25" pos:end="64:25">m</name><operator pos:start="64:26" pos:end="64:27">-&gt;</operator><name pos:start="64:28" pos:end="64:36">tracksize</name></name> <operator pos:start="64:38" pos:end="64:38">+</operator> <name pos:start="64:40" pos:end="64:50"><name pos:start="64:40" pos:end="64:40">m</name><operator pos:start="64:41" pos:end="64:42">-&gt;</operator><name pos:start="64:43" pos:end="64:50">size_var</name></name> <operator pos:start="64:52" pos:end="64:52">+</operator> <name pos:start="64:54" pos:end="64:65"><name pos:start="64:54" pos:end="64:62">box_types</name><index pos:start="64:63" pos:end="64:65">[<expr pos:start="64:64" pos:end="64:64"><name pos:start="64:64" pos:end="64:64">i</name></expr>]</index></name><operator pos:start="64:66" pos:end="64:66">.</operator><name pos:start="64:67" pos:end="64:75">base_size</name> <operator pos:start="64:77" pos:end="64:77">&gt;</operator> <name pos:start="64:79" pos:end="64:89"><name pos:start="64:79" pos:end="64:83">avpkt</name><operator pos:start="64:84" pos:end="64:85">-&gt;</operator><name pos:start="64:86" pos:end="64:89">size</name></name></expr>)</condition><block type="pseudo" pos:start="65:25" pos:end="65:30"><block_content pos:start="65:25" pos:end="65:30">
                        <break pos:start="65:25" pos:end="65:30">break;</break></block_content></block></if></if_stmt>
                    <expr_stmt pos:start="66:21" pos:end="66:67"><expr pos:start="66:21" pos:end="66:66"><name pos:start="66:21" pos:end="66:28">ret_tsmb</name> <operator pos:start="66:30" pos:end="66:30">=</operator> <name pos:start="66:32" pos:end="66:43"><name pos:start="66:32" pos:end="66:40">box_types</name><index pos:start="66:41" pos:end="66:43">[<expr pos:start="66:42" pos:end="66:42"><name pos:start="66:42" pos:end="66:42">i</name></expr>]</index></name><operator pos:start="66:44" pos:end="66:44">.</operator><call pos:start="66:45" pos:end="66:66"><name pos:start="66:45" pos:end="66:50">decode</name><argument_list pos:start="66:51" pos:end="66:66">(<argument pos:start="66:52" pos:end="66:55"><expr pos:start="66:52" pos:end="66:55"><name pos:start="66:52" pos:end="66:55">tsmb</name></expr></argument>, <argument pos:start="66:58" pos:end="66:58"><expr pos:start="66:58" pos:end="66:58"><name pos:start="66:58" pos:end="66:58">m</name></expr></argument>, <argument pos:start="66:61" pos:end="66:65"><expr pos:start="66:61" pos:end="66:65"><name pos:start="66:61" pos:end="66:65">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt pos:start="67:21" pos:end="68:30"><if pos:start="67:21" pos:end="68:30">if <condition pos:start="67:24" pos:end="67:39">(<expr pos:start="67:25" pos:end="67:38"><name pos:start="67:25" pos:end="67:32">ret_tsmb</name> <operator pos:start="67:34" pos:end="67:35">==</operator> <operator pos:start="67:37" pos:end="67:37">-</operator><literal type="number" pos:start="67:38" pos:end="67:38">1</literal></expr>)</condition><block type="pseudo" pos:start="68:25" pos:end="68:30"><block_content pos:start="68:25" pos:end="68:30">
                        <break pos:start="68:25" pos:end="68:30">break;</break></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt pos:start="71:13" pos:end="71:52"><expr pos:start="71:13" pos:end="71:51"><name pos:start="71:13" pos:end="71:24"><name pos:start="71:13" pos:end="71:13">m</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:24">tracksize</name></name> <operator pos:start="71:26" pos:end="71:26">=</operator> <name pos:start="71:28" pos:end="71:39"><name pos:start="71:28" pos:end="71:28">m</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:39">tracksize</name></name> <operator pos:start="71:41" pos:end="71:41">+</operator> <name pos:start="71:43" pos:end="71:51">tsmb_size</name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt pos:start="73:9" pos:end="73:39"><expr pos:start="73:9" pos:end="73:38"><call pos:start="73:9" pos:end="73:38"><name pos:start="73:9" pos:end="73:19">text_to_ass</name><argument_list pos:start="73:20" pos:end="73:38">(<argument pos:start="73:21" pos:end="73:24"><expr pos:start="73:21" pos:end="73:24"><operator pos:start="73:21" pos:end="73:21">&amp;</operator><name pos:start="73:22" pos:end="73:24">buf</name></expr></argument>, <argument pos:start="73:27" pos:end="73:29"><expr pos:start="73:27" pos:end="73:29"><name pos:start="73:27" pos:end="73:29">ptr</name></expr></argument>, <argument pos:start="73:32" pos:end="73:34"><expr pos:start="73:32" pos:end="73:34"><name pos:start="73:32" pos:end="73:34">end</name></expr></argument>, <argument pos:start="73:37" pos:end="73:37"><expr pos:start="73:37" pos:end="73:37"><name pos:start="73:37" pos:end="73:37">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="74:7" pos:end="75:39">else<block type="pseudo" pos:start="75:9" pos:end="75:39"><block_content pos:start="75:9" pos:end="75:39">
        <expr_stmt pos:start="75:9" pos:end="75:39"><expr pos:start="75:9" pos:end="75:38"><call pos:start="75:9" pos:end="75:38"><name pos:start="75:9" pos:end="75:19">text_to_ass</name><argument_list pos:start="75:20" pos:end="75:38">(<argument pos:start="75:21" pos:end="75:24"><expr pos:start="75:21" pos:end="75:24"><operator pos:start="75:21" pos:end="75:21">&amp;</operator><name pos:start="75:22" pos:end="75:24">buf</name></expr></argument>, <argument pos:start="75:27" pos:end="75:29"><expr pos:start="75:27" pos:end="75:29"><name pos:start="75:27" pos:end="75:29">ptr</name></expr></argument>, <argument pos:start="75:32" pos:end="75:34"><expr pos:start="75:32" pos:end="75:34"><name pos:start="75:32" pos:end="75:34">end</name></expr></argument>, <argument pos:start="75:37" pos:end="75:37"><expr pos:start="75:37" pos:end="75:37"><name pos:start="75:37" pos:end="75:37">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt pos:start="76:5" pos:end="76:71"><expr pos:start="76:5" pos:end="76:70"><name pos:start="76:5" pos:end="76:7">ret</name> <operator pos:start="76:9" pos:end="76:9">=</operator> <call pos:start="76:11" pos:end="76:70"><name pos:start="76:11" pos:end="76:25">ff_ass_add_rect</name><argument_list pos:start="76:26" pos:end="76:70">(<argument pos:start="76:27" pos:end="76:29"><expr pos:start="76:27" pos:end="76:29"><name pos:start="76:27" pos:end="76:29">sub</name></expr></argument>, <argument pos:start="76:32" pos:end="76:38"><expr pos:start="76:32" pos:end="76:38"><name pos:start="76:32" pos:end="76:38"><name pos:start="76:32" pos:end="76:34">buf</name><operator pos:start="76:35" pos:end="76:35">.</operator><name pos:start="76:36" pos:end="76:38">str</name></name></expr></argument>, <argument pos:start="76:41" pos:end="76:54"><expr pos:start="76:41" pos:end="76:54"><name pos:start="76:41" pos:end="76:52"><name pos:start="76:41" pos:end="76:41">m</name><operator pos:start="76:42" pos:end="76:43">-&gt;</operator><name pos:start="76:44" pos:end="76:52">readorder</name></name><operator pos:start="76:53" pos:end="76:54">++</operator></expr></argument>, <argument pos:start="76:57" pos:end="76:57"><expr pos:start="76:57" pos:end="76:57"><literal type="number" pos:start="76:57" pos:end="76:57">0</literal></expr></argument>, <argument pos:start="76:60" pos:end="76:63"><expr pos:start="76:60" pos:end="76:63"><name pos:start="76:60" pos:end="76:63">NULL</name></expr></argument>, <argument pos:start="76:66" pos:end="76:69"><expr pos:start="76:66" pos:end="76:69"><name pos:start="76:66" pos:end="76:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="77:5" pos:end="77:35"><expr pos:start="77:5" pos:end="77:34"><call pos:start="77:5" pos:end="77:34"><name pos:start="77:5" pos:end="77:22">av_bprint_finalize</name><argument_list pos:start="77:23" pos:end="77:34">(<argument pos:start="77:24" pos:end="77:27"><expr pos:start="77:24" pos:end="77:27"><operator pos:start="77:24" pos:end="77:24">&amp;</operator><name pos:start="77:25" pos:end="77:27">buf</name></expr></argument>, <argument pos:start="77:30" pos:end="77:33"><expr pos:start="77:30" pos:end="77:33"><name pos:start="77:30" pos:end="77:33">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="78:5" pos:end="79:19"><if pos:start="78:5" pos:end="79:19">if <condition pos:start="78:8" pos:end="78:16">(<expr pos:start="78:9" pos:end="78:15"><name pos:start="78:9" pos:end="78:11">ret</name> <operator pos:start="78:13" pos:end="78:13">&lt;</operator> <literal type="number" pos:start="78:15" pos:end="78:15">0</literal></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:19"><block_content pos:start="79:9" pos:end="79:19">
        <return pos:start="79:9" pos:end="79:19">return <expr pos:start="79:16" pos:end="79:18"><name pos:start="79:16" pos:end="79:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="80:5" pos:end="80:38"><expr pos:start="80:5" pos:end="80:37"><operator pos:start="80:5" pos:end="80:5">*</operator><name pos:start="80:6" pos:end="80:16">got_sub_ptr</name> <operator pos:start="80:18" pos:end="80:18">=</operator> <name pos:start="80:20" pos:end="80:33"><name pos:start="80:20" pos:end="80:22">sub</name><operator pos:start="80:23" pos:end="80:24">-&gt;</operator><name pos:start="80:25" pos:end="80:33">num_rects</name></name> <operator pos:start="80:35" pos:end="80:35">&gt;</operator> <literal type="number" pos:start="80:37" pos:end="80:37">0</literal></expr>;</expr_stmt>
    <return pos:start="81:5" pos:end="81:23">return <expr pos:start="81:12" pos:end="81:22"><name pos:start="81:12" pos:end="81:22"><name pos:start="81:12" pos:end="81:16">avpkt</name><operator pos:start="81:17" pos:end="81:18">-&gt;</operator><name pos:start="81:19" pos:end="81:22">size</name></name></expr>;</return>
</block_content>}</block></function></unit>
