<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19884.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:42">vmxnet3_rx_need_csum_calculate</name><parameter_list pos:start="1:43" pos:end="5:58">(<parameter pos:start="1:44" pos:end="1:63"><decl pos:start="1:44" pos:end="1:63"><type pos:start="1:44" pos:end="1:63"><name pos:start="1:44" pos:end="1:58"><name pos:start="1:44" pos:end="1:49">struct</name> <name pos:start="1:51" pos:end="1:58">NetRxPkt</name></name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">pkt</name></decl></parameter>,

                                           <parameter pos:start="3:44" pos:end="3:63"><decl pos:start="3:44" pos:end="3:63"><type pos:start="3:44" pos:end="3:63"><specifier pos:start="3:44" pos:end="3:48">const</specifier> <name pos:start="3:50" pos:end="3:53">void</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:63">pkt_data</name></decl></parameter>,

                                           <parameter pos:start="5:44" pos:end="5:57"><decl pos:start="5:44" pos:end="5:57"><type pos:start="5:44" pos:end="5:57"><name pos:start="5:44" pos:end="5:49">size_t</name></type> <name pos:start="5:51" pos:end="5:57">pkt_len</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="81:1">{<block_content pos:start="9:5" pos:end="79:47">

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:31"><type pos:start="9:5" pos:end="9:27"><name pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:25">virtio_net_hdr</name></name> <modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:31">vhdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:14">isip4</name></decl>, <decl pos:start="11:17" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:17" pos:end="11:21">isip6</name></decl>, <decl pos:start="11:24" pos:end="11:28"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:24" pos:end="11:28">istcp</name></decl>, <decl pos:start="11:31" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:31" pos:end="11:35">isudp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:17">data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">len</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:38">(<expr pos:start="19:9" pos:end="19:37"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:37"><name pos:start="19:10" pos:end="19:32">net_rx_pkt_has_virt_hdr</name><argument_list pos:start="19:33" pos:end="19:37">(<argument pos:start="19:34" pos:end="19:36"><expr pos:start="19:34" pos:end="19:36"><name pos:start="19:34" pos:end="19:36">pkt</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:40" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:15">

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:36"><expr pos:start="27:5" pos:end="27:35"><name pos:start="27:5" pos:end="27:8">vhdr</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:35"><name pos:start="27:12" pos:end="27:30">net_rx_pkt_get_vhdr</name><argument_list pos:start="27:31" pos:end="27:35">(<argument pos:start="27:32" pos:end="27:34"><expr pos:start="27:32" pos:end="27:34"><name pos:start="27:32" pos:end="27:34">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:70">(<expr pos:start="29:9" pos:end="29:69"><operator pos:start="29:9" pos:end="29:9">!</operator><call pos:start="29:10" pos:end="29:69"><name pos:start="29:10" pos:end="29:27">VMXNET_FLAG_IS_SET</name><argument_list pos:start="29:28" pos:end="29:69">(<argument pos:start="29:29" pos:end="29:39"><expr pos:start="29:29" pos:end="29:39"><name pos:start="29:29" pos:end="29:39"><name pos:start="29:29" pos:end="29:32">vhdr</name><operator pos:start="29:33" pos:end="29:34">-&gt;</operator><name pos:start="29:35" pos:end="29:39">flags</name></name></expr></argument>, <argument pos:start="29:42" pos:end="29:68"><expr pos:start="29:42" pos:end="29:68"><name pos:start="29:42" pos:end="29:68">VIRTIO_NET_HDR_F_NEEDS_CSUM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:72" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:15">

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:66"><expr pos:start="37:5" pos:end="37:65"><call pos:start="37:5" pos:end="37:65"><name pos:start="37:5" pos:end="37:28">net_rx_pkt_get_protocols</name><argument_list pos:start="37:29" pos:end="37:65">(<argument pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><name pos:start="37:30" pos:end="37:32">pkt</name></expr></argument>, <argument pos:start="37:35" pos:end="37:40"><expr pos:start="37:35" pos:end="37:40"><operator pos:start="37:35" pos:end="37:35">&amp;</operator><name pos:start="37:36" pos:end="37:40">isip4</name></expr></argument>, <argument pos:start="37:43" pos:end="37:48"><expr pos:start="37:43" pos:end="37:48"><operator pos:start="37:43" pos:end="37:43">&amp;</operator><name pos:start="37:44" pos:end="37:48">isip6</name></expr></argument>, <argument pos:start="37:51" pos:end="37:56"><expr pos:start="37:51" pos:end="37:56"><operator pos:start="37:51" pos:end="37:51">&amp;</operator><name pos:start="37:52" pos:end="37:56">isudp</name></expr></argument>, <argument pos:start="37:59" pos:end="37:64"><expr pos:start="37:59" pos:end="37:64"><operator pos:start="37:59" pos:end="37:59">&amp;</operator><name pos:start="37:60" pos:end="37:64">istcp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:47">(<expr pos:start="39:9" pos:end="39:46"><operator pos:start="39:9" pos:end="39:9">!</operator><operator pos:start="39:10" pos:end="39:10">(</operator><name pos:start="39:11" pos:end="39:15">isip4</name> <operator pos:start="39:17" pos:end="39:18">||</operator> <name pos:start="39:20" pos:end="39:24">isip6</name><operator pos:start="39:25" pos:end="39:25">)</operator> <operator pos:start="39:27" pos:end="39:28">||</operator> <operator pos:start="39:30" pos:end="39:30">!</operator><operator pos:start="39:31" pos:end="39:31">(</operator><name pos:start="39:32" pos:end="39:36">istcp</name> <operator pos:start="39:38" pos:end="39:39">||</operator> <name pos:start="39:41" pos:end="39:45">isudp</name><operator pos:start="39:46" pos:end="39:46">)</operator></expr>)</condition> <block pos:start="39:49" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:15">

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:32"><expr pos:start="47:5" pos:end="47:31"><call pos:start="47:5" pos:end="47:31"><name pos:start="47:5" pos:end="47:25">vmxnet3_dump_virt_hdr</name><argument_list pos:start="47:26" pos:end="47:31">(<argument pos:start="47:27" pos:end="47:30"><expr pos:start="47:27" pos:end="47:30"><name pos:start="47:27" pos:end="47:30">vhdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:78">/* Validate packet len: csum_start + scum_offset + length of csum field */</comment>

    <if_stmt pos:start="53:5" pos:end="63:5"><if pos:start="53:5" pos:end="63:5">if <condition pos:start="53:8" pos:end="53:61">(<expr pos:start="53:9" pos:end="53:60"><name pos:start="53:9" pos:end="53:15">pkt_len</name> <operator pos:start="53:17" pos:end="53:17">&lt;</operator> <operator pos:start="53:19" pos:end="53:19">(</operator><name pos:start="53:20" pos:end="53:35"><name pos:start="53:20" pos:end="53:23">vhdr</name><operator pos:start="53:24" pos:end="53:25">-&gt;</operator><name pos:start="53:26" pos:end="53:35">csum_start</name></name> <operator pos:start="53:37" pos:end="53:37">+</operator> <name pos:start="53:39" pos:end="53:55"><name pos:start="53:39" pos:end="53:42">vhdr</name><operator pos:start="53:43" pos:end="53:44">-&gt;</operator><name pos:start="53:45" pos:end="53:55">csum_offset</name></name> <operator pos:start="53:57" pos:end="53:57">+</operator> <literal type="number" pos:start="53:59" pos:end="53:59">2</literal><operator pos:start="53:60" pos:end="53:60">)</operator></expr>)</condition> <block pos:start="53:63" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:15">

        <expr_stmt pos:start="55:9" pos:end="59:64"><expr pos:start="55:9" pos:end="59:63"><call pos:start="55:9" pos:end="59:63"><name pos:start="55:9" pos:end="55:17">VMW_PKPRN</name><argument_list pos:start="55:18" pos:end="59:63">(<argument pos:start="55:19" pos:end="57:45"><expr pos:start="55:19" pos:end="57:45"><literal type="string" pos:start="55:19" pos:end="55:75">"packet len:%zu &lt; csum_start(%d) + csum_offset(%d) + 2, "</literal>

                  <literal type="string" pos:start="57:19" pos:end="57:45">"cannot calculate checksum"</literal></expr></argument>,

                  <argument pos:start="59:19" pos:end="59:25"><expr pos:start="59:19" pos:end="59:25"><name pos:start="59:19" pos:end="59:25">pkt_len</name></expr></argument>, <argument pos:start="59:28" pos:end="59:43"><expr pos:start="59:28" pos:end="59:43"><name pos:start="59:28" pos:end="59:43"><name pos:start="59:28" pos:end="59:31">vhdr</name><operator pos:start="59:32" pos:end="59:33">-&gt;</operator><name pos:start="59:34" pos:end="59:43">csum_start</name></name></expr></argument>, <argument pos:start="59:46" pos:end="59:62"><expr pos:start="59:46" pos:end="59:62"><name pos:start="59:46" pos:end="59:62"><name pos:start="59:46" pos:end="59:49">vhdr</name><operator pos:start="59:50" pos:end="59:51">-&gt;</operator><name pos:start="59:52" pos:end="59:62">csum_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:50"><expr pos:start="67:5" pos:end="67:49"><name pos:start="67:5" pos:end="67:8">data</name> <operator pos:start="67:10" pos:end="67:10">=</operator> <operator pos:start="67:12" pos:end="67:12">(</operator><name pos:start="67:13" pos:end="67:19">uint8_t</name> <operator pos:start="67:21" pos:end="67:21">*</operator><operator pos:start="67:22" pos:end="67:22">)</operator><name pos:start="67:23" pos:end="67:30">pkt_data</name> <operator pos:start="67:32" pos:end="67:32">+</operator> <name pos:start="67:34" pos:end="67:49"><name pos:start="67:34" pos:end="67:37">vhdr</name><operator pos:start="67:38" pos:end="67:39">-&gt;</operator><name pos:start="67:40" pos:end="67:49">csum_start</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:37"><expr pos:start="69:5" pos:end="69:36"><name pos:start="69:5" pos:end="69:7">len</name> <operator pos:start="69:9" pos:end="69:9">=</operator> <name pos:start="69:11" pos:end="69:17">pkt_len</name> <operator pos:start="69:19" pos:end="69:19">-</operator> <name pos:start="69:21" pos:end="69:36"><name pos:start="69:21" pos:end="69:24">vhdr</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:36">csum_start</name></name></expr>;</expr_stmt>

    <comment type="block" pos:start="71:5" pos:end="71:51">/* Put the checksum obtained into the packet */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:68"><expr pos:start="73:5" pos:end="73:67"><call pos:start="73:5" pos:end="73:67"><name pos:start="73:5" pos:end="73:12">stw_be_p</name><argument_list pos:start="73:13" pos:end="73:67">(<argument pos:start="73:14" pos:end="73:37"><expr pos:start="73:14" pos:end="73:37"><name pos:start="73:14" pos:end="73:17">data</name> <operator pos:start="73:19" pos:end="73:19">+</operator> <name pos:start="73:21" pos:end="73:37"><name pos:start="73:21" pos:end="73:24">vhdr</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:37">csum_offset</name></name></expr></argument>, <argument pos:start="73:40" pos:end="73:66"><expr pos:start="73:40" pos:end="73:66"><call pos:start="73:40" pos:end="73:66"><name pos:start="73:40" pos:end="73:55">net_raw_checksum</name><argument_list pos:start="73:56" pos:end="73:66">(<argument pos:start="73:57" pos:end="73:60"><expr pos:start="73:57" pos:end="73:60"><name pos:start="73:57" pos:end="73:60">data</name></expr></argument>, <argument pos:start="73:63" pos:end="73:65"><expr pos:start="73:63" pos:end="73:65"><name pos:start="73:63" pos:end="73:65">len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:48"><expr pos:start="77:5" pos:end="77:47"><name pos:start="77:5" pos:end="77:15"><name pos:start="77:5" pos:end="77:8">vhdr</name><operator pos:start="77:9" pos:end="77:10">-&gt;</operator><name pos:start="77:11" pos:end="77:15">flags</name></name> <operator pos:start="77:17" pos:end="77:18">&amp;=</operator> <operator pos:start="77:20" pos:end="77:20">~</operator><name pos:start="77:21" pos:end="77:47">VIRTIO_NET_HDR_F_NEEDS_CSUM</name></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:47"><expr pos:start="79:5" pos:end="79:46"><name pos:start="79:5" pos:end="79:15"><name pos:start="79:5" pos:end="79:8">vhdr</name><operator pos:start="79:9" pos:end="79:10">-&gt;</operator><name pos:start="79:11" pos:end="79:15">flags</name></name> <operator pos:start="79:17" pos:end="79:18">|=</operator> <name pos:start="79:20" pos:end="79:46">VIRTIO_NET_HDR_F_DATA_VALID</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
