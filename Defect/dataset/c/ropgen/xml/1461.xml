<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1461.c" pos:tabs="8"><function pos:start="1:1" pos:end="412:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">gic_dist_writeb</name><parameter_list pos:start="1:28" pos:end="3:61">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">opaque</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:55"><decl pos:start="1:43" pos:end="1:55"><type pos:start="1:43" pos:end="1:55"><name pos:start="1:43" pos:end="1:48">hwaddr</name></type> <name pos:start="1:50" pos:end="1:55">offset</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:36">uint32_t</name></type> <name pos:start="3:38" pos:end="3:42">value</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:60"><decl pos:start="3:45" pos:end="3:60"><type pos:start="3:45" pos:end="3:60"><name pos:start="3:45" pos:end="3:54">MemTxAttrs</name></type> <name pos:start="3:56" pos:end="3:60">attrs</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="412:1">{<block_content pos:start="7:5" pos:end="410:67">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">GICState</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">s</name> <init pos:start="7:17" pos:end="7:36">= <expr pos:start="7:19" pos:end="7:36"><operator pos:start="7:19" pos:end="7:19">(</operator><name pos:start="7:20" pos:end="7:27">GICState</name> <operator pos:start="7:29" pos:end="7:29">*</operator><operator pos:start="7:30" pos:end="7:30">)</operator><name pos:start="7:31" pos:end="7:36">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">cpu</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:33"><expr pos:start="17:5" pos:end="17:32"><name pos:start="17:5" pos:end="17:7">cpu</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:32"><name pos:start="17:11" pos:end="17:29">gic_get_current_cpu</name><argument_list pos:start="17:30" pos:end="17:32">(<argument pos:start="17:31" pos:end="17:31"><expr pos:start="17:31" pos:end="17:31"><name pos:start="17:31" pos:end="17:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="400:5"><if pos:start="19:5" pos:end="99:5">if <condition pos:start="19:8" pos:end="19:23">(<expr pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:14">offset</name> <operator pos:start="19:16" pos:end="19:16">&lt;</operator> <literal type="number" pos:start="19:18" pos:end="19:22">0x100</literal></expr>)</condition> <block pos:start="19:25" pos:end="99:5">{<block_content pos:start="21:9" pos:end="97:9">

        <if_stmt pos:start="21:9" pos:end="97:9"><if pos:start="21:9" pos:end="45:9">if <condition pos:start="21:12" pos:end="21:24">(<expr pos:start="21:13" pos:end="21:23"><name pos:start="21:13" pos:end="21:18">offset</name> <operator pos:start="21:20" pos:end="21:21">==</operator> <literal type="number" pos:start="21:23" pos:end="21:23">0</literal></expr>)</condition> <block pos:start="21:26" pos:end="45:9">{<block_content pos:start="23:13" pos:end="43:64">

            <if_stmt pos:start="23:13" pos:end="37:13"><if pos:start="23:13" pos:end="29:13">if <condition pos:start="23:16" pos:end="23:50">(<expr pos:start="23:17" pos:end="23:49"><name pos:start="23:17" pos:end="23:32"><name pos:start="23:17" pos:end="23:17">s</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:32">security_extn</name></name> <operator pos:start="23:34" pos:end="23:35">&amp;&amp;</operator> <operator pos:start="23:37" pos:end="23:37">!</operator><name pos:start="23:38" pos:end="23:49"><name pos:start="23:38" pos:end="23:42">attrs</name><operator pos:start="23:43" pos:end="23:43">.</operator><name pos:start="23:44" pos:end="23:49">secure</name></name></expr>)</condition> <block pos:start="23:52" pos:end="29:13">{<block_content pos:start="27:17" pos:end="27:58">

                <comment type="block" pos:start="25:17" pos:end="25:74">/* NS version is just an alias of the S version's bit 1 */</comment>

                <expr_stmt pos:start="27:17" pos:end="27:58"><expr pos:start="27:17" pos:end="27:57"><name pos:start="27:17" pos:end="27:23"><name pos:start="27:17" pos:end="27:17">s</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:23">ctlr</name></name> <operator pos:start="27:25" pos:end="27:25">=</operator> <call pos:start="27:27" pos:end="27:57"><name pos:start="27:27" pos:end="27:35">deposit32</name><argument_list pos:start="27:36" pos:end="27:57">(<argument pos:start="27:37" pos:end="27:43"><expr pos:start="27:37" pos:end="27:43"><name pos:start="27:37" pos:end="27:43"><name pos:start="27:37" pos:end="27:37">s</name><operator pos:start="27:38" pos:end="27:39">-&gt;</operator><name pos:start="27:40" pos:end="27:43">ctlr</name></name></expr></argument>, <argument pos:start="27:46" pos:end="27:46"><expr pos:start="27:46" pos:end="27:46"><literal type="number" pos:start="27:46" pos:end="27:46">1</literal></expr></argument>, <argument pos:start="27:49" pos:end="27:49"><expr pos:start="27:49" pos:end="27:49"><literal type="number" pos:start="27:49" pos:end="27:49">1</literal></expr></argument>, <argument pos:start="27:52" pos:end="27:56"><expr pos:start="27:52" pos:end="27:56"><name pos:start="27:52" pos:end="27:56">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="29:15" pos:end="33:13">else if <condition pos:start="29:23" pos:end="29:41">(<expr pos:start="29:24" pos:end="29:40"><call pos:start="29:24" pos:end="29:40"><name pos:start="29:24" pos:end="29:37">gic_has_groups</name><argument_list pos:start="29:38" pos:end="29:40">(<argument pos:start="29:39" pos:end="29:39"><expr pos:start="29:39" pos:end="29:39"><name pos:start="29:39" pos:end="29:39">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:43" pos:end="33:13">{<block_content pos:start="31:17" pos:end="31:74">

                <expr_stmt pos:start="31:17" pos:end="31:74"><expr pos:start="31:17" pos:end="31:73"><name pos:start="31:17" pos:end="31:23"><name pos:start="31:17" pos:end="31:17">s</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:23">ctlr</name></name> <operator pos:start="31:25" pos:end="31:25">=</operator> <name pos:start="31:27" pos:end="31:31">value</name> <operator pos:start="31:33" pos:end="31:33">&amp;</operator> <operator pos:start="31:35" pos:end="31:35">(</operator><name pos:start="31:36" pos:end="31:52">GICD_CTLR_EN_GRP0</name> <operator pos:start="31:54" pos:end="31:54">|</operator> <name pos:start="31:56" pos:end="31:72">GICD_CTLR_EN_GRP1</name><operator pos:start="31:73" pos:end="31:73">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="33:15" pos:end="37:13">else <block pos:start="33:20" pos:end="37:13">{<block_content pos:start="35:17" pos:end="35:52">

                <expr_stmt pos:start="35:17" pos:end="35:52"><expr pos:start="35:17" pos:end="35:51"><name pos:start="35:17" pos:end="35:23"><name pos:start="35:17" pos:end="35:17">s</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:23">ctlr</name></name> <operator pos:start="35:25" pos:end="35:25">=</operator> <name pos:start="35:27" pos:end="35:31">value</name> <operator pos:start="35:33" pos:end="35:33">&amp;</operator> <name pos:start="35:35" pos:end="35:51">GICD_CTLR_EN_GRP0</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="39:13" pos:end="43:64"><expr pos:start="39:13" pos:end="43:63"><call pos:start="39:13" pos:end="43:63"><name pos:start="39:13" pos:end="39:19">DPRINTF</name><argument_list pos:start="39:20" pos:end="43:63">(<argument pos:start="39:21" pos:end="39:68"><expr pos:start="39:21" pos:end="39:68"><literal type="string" pos:start="39:21" pos:end="39:68">"Distributor: Group0 %sabled; Group 1 %sabled\n"</literal></expr></argument>,

                    <argument pos:start="41:21" pos:end="41:62"><expr pos:start="41:21" pos:end="41:62"><ternary pos:start="41:21" pos:end="41:62"><condition pos:start="41:21" pos:end="41:49"><expr pos:start="41:21" pos:end="41:47"><name pos:start="41:21" pos:end="41:27"><name pos:start="41:21" pos:end="41:21">s</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:27">ctlr</name></name> <operator pos:start="41:29" pos:end="41:29">&amp;</operator> <name pos:start="41:31" pos:end="41:47">GICD_CTLR_EN_GRP0</name></expr> ?</condition><then pos:start="41:51" pos:end="41:54"> <expr pos:start="41:51" pos:end="41:54"><literal type="string" pos:start="41:51" pos:end="41:54">"En"</literal></expr> </then><else pos:start="41:56" pos:end="41:62">: <expr pos:start="41:58" pos:end="41:62"><literal type="string" pos:start="41:58" pos:end="41:62">"Dis"</literal></expr></else></ternary></expr></argument>,

                    <argument pos:start="43:21" pos:end="43:62"><expr pos:start="43:21" pos:end="43:62"><ternary pos:start="43:21" pos:end="43:62"><condition pos:start="43:21" pos:end="43:49"><expr pos:start="43:21" pos:end="43:47"><name pos:start="43:21" pos:end="43:27"><name pos:start="43:21" pos:end="43:21">s</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:27">ctlr</name></name> <operator pos:start="43:29" pos:end="43:29">&amp;</operator> <name pos:start="43:31" pos:end="43:47">GICD_CTLR_EN_GRP1</name></expr> ?</condition><then pos:start="43:51" pos:end="43:54"> <expr pos:start="43:51" pos:end="43:54"><literal type="string" pos:start="43:51" pos:end="43:54">"En"</literal></expr> </then><else pos:start="43:56" pos:end="43:62">: <expr pos:start="43:58" pos:end="43:62"><literal type="string" pos:start="43:58" pos:end="43:62">"Dis"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="45:11" pos:end="49:9">else if <condition pos:start="45:19" pos:end="45:30">(<expr pos:start="45:20" pos:end="45:29"><name pos:start="45:20" pos:end="45:25">offset</name> <operator pos:start="45:27" pos:end="45:27">&lt;</operator> <literal type="number" pos:start="45:29" pos:end="45:29">4</literal></expr>)</condition> <block pos:start="45:32" pos:end="49:9">{<block_content>

            <comment type="block" pos:start="47:13" pos:end="47:27">/* ignored.  */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="49:11" pos:end="93:9">else if <condition pos:start="49:19" pos:end="49:34">(<expr pos:start="49:20" pos:end="49:33"><name pos:start="49:20" pos:end="49:25">offset</name> <operator pos:start="49:27" pos:end="49:28">&gt;=</operator> <literal type="number" pos:start="49:30" pos:end="49:33">0x80</literal></expr>)</condition> <block pos:start="49:36" pos:end="93:9">{<block_content pos:start="57:13" pos:end="91:13">

            <comment type="block" pos:start="51:13" pos:end="55:15">/* Interrupt Group Registers: RAZ/WI for NS access to secure

             * GIC, or for GICs without groups.

             */</comment>

            <if_stmt pos:start="57:13" pos:end="91:13"><if pos:start="57:13" pos:end="91:13">if <condition pos:start="57:16" pos:end="57:74">(<expr pos:start="57:17" pos:end="57:73"><operator pos:start="57:17" pos:end="57:17">!</operator><operator pos:start="57:18" pos:end="57:18">(</operator><name pos:start="57:19" pos:end="57:34"><name pos:start="57:19" pos:end="57:19">s</name><operator pos:start="57:20" pos:end="57:21">-&gt;</operator><name pos:start="57:22" pos:end="57:34">security_extn</name></name> <operator pos:start="57:36" pos:end="57:37">&amp;&amp;</operator> <operator pos:start="57:39" pos:end="57:39">!</operator><name pos:start="57:40" pos:end="57:51"><name pos:start="57:40" pos:end="57:44">attrs</name><operator pos:start="57:45" pos:end="57:45">.</operator><name pos:start="57:46" pos:end="57:51">secure</name></name><operator pos:start="57:52" pos:end="57:52">)</operator> <operator pos:start="57:54" pos:end="57:55">&amp;&amp;</operator> <call pos:start="57:57" pos:end="57:73"><name pos:start="57:57" pos:end="57:70">gic_has_groups</name><argument_list pos:start="57:71" pos:end="57:73">(<argument pos:start="57:72" pos:end="57:72"><expr pos:start="57:72" pos:end="57:72"><name pos:start="57:72" pos:end="57:72">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:76" pos:end="91:13">{<block_content pos:start="61:17" pos:end="89:17">

                <comment type="block" pos:start="59:17" pos:end="59:65">/* Every byte offset holds 8 group status bits */</comment>

                <expr_stmt pos:start="61:17" pos:end="61:57"><expr pos:start="61:17" pos:end="61:56"><name pos:start="61:17" pos:end="61:19">irq</name> <operator pos:start="61:21" pos:end="61:21">=</operator> <operator pos:start="61:23" pos:end="61:23">(</operator><name pos:start="61:24" pos:end="61:29">offset</name> <operator pos:start="61:31" pos:end="61:31">-</operator> <literal type="number" pos:start="61:33" pos:end="61:36">0x80</literal><operator pos:start="61:37" pos:end="61:37">)</operator> <operator pos:start="61:39" pos:end="61:39">*</operator> <literal type="number" pos:start="61:41" pos:end="61:43">8</literal> <operator pos:start="61:43" pos:end="61:43">+</operator> <name pos:start="61:45" pos:end="61:56">GIC_BASE_IRQ</name></expr>;</expr_stmt>

                <if_stmt pos:start="63:17" pos:end="67:17"><if pos:start="63:17" pos:end="67:17">if <condition pos:start="63:20" pos:end="63:38">(<expr pos:start="63:21" pos:end="63:37"><name pos:start="63:21" pos:end="63:23">irq</name> <operator pos:start="63:25" pos:end="63:26">&gt;=</operator> <name pos:start="63:28" pos:end="63:37"><name pos:start="63:28" pos:end="63:28">s</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:37">num_irq</name></name></expr>)</condition> <block pos:start="63:40" pos:end="67:17">{<block_content pos:start="65:21" pos:end="65:33">

                    <goto pos:start="65:21" pos:end="65:33">goto <name pos:start="65:26" pos:end="65:32">bad_reg</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <for pos:start="69:17" pos:end="89:17">for <control pos:start="69:21" pos:end="69:39">(<init pos:start="69:22" pos:end="69:27"><expr pos:start="69:22" pos:end="69:26"><name pos:start="69:22" pos:end="69:22">i</name> <operator pos:start="69:24" pos:end="69:24">=</operator> <literal type="number" pos:start="69:26" pos:end="69:26">0</literal></expr>;</init> <condition pos:start="69:29" pos:end="69:34"><expr pos:start="69:29" pos:end="69:33"><name pos:start="69:29" pos:end="69:29">i</name> <operator pos:start="69:31" pos:end="69:31">&lt;</operator> <literal type="number" pos:start="69:33" pos:end="69:33">8</literal></expr>;</condition> <incr pos:start="69:36" pos:end="69:38"><expr pos:start="69:36" pos:end="69:38"><name pos:start="69:36" pos:end="69:36">i</name><operator pos:start="69:37" pos:end="69:38">++</operator></expr></incr>)</control> <block pos:start="69:41" pos:end="89:17">{<block_content pos:start="73:21" pos:end="87:21">

                    <comment type="block" pos:start="71:21" pos:end="71:70">/* Group bits are banked for private interrupts */</comment>

                    <decl_stmt pos:start="73:21" pos:end="73:78"><decl pos:start="73:21" pos:end="73:77"><type pos:start="73:21" pos:end="73:23"><name pos:start="73:21" pos:end="73:23">int</name></type> <name pos:start="73:25" pos:end="73:26">cm</name> <init pos:start="73:28" pos:end="73:77">= <expr pos:start="73:30" pos:end="73:77"><ternary pos:start="73:30" pos:end="73:77"><condition pos:start="73:30" pos:end="73:51"><expr pos:start="73:30" pos:end="73:49"><operator pos:start="73:30" pos:end="73:30">(</operator><name pos:start="73:31" pos:end="73:33">irq</name> <operator pos:start="73:35" pos:end="73:35">&lt;</operator> <name pos:start="73:37" pos:end="73:48">GIC_INTERNAL</name><operator pos:start="73:49" pos:end="73:49">)</operator></expr> ?</condition><then pos:start="73:53" pos:end="73:62"> <expr pos:start="73:53" pos:end="73:62"><operator pos:start="73:53" pos:end="73:53">(</operator><literal type="number" pos:start="73:54" pos:end="73:54">1</literal> <operator pos:start="73:56" pos:end="73:57">&lt;&lt;</operator> <name pos:start="73:59" pos:end="73:61">cpu</name><operator pos:start="73:62" pos:end="73:62">)</operator></expr> </then><else pos:start="73:64" pos:end="73:77">: <expr pos:start="73:66" pos:end="73:77"><name pos:start="73:66" pos:end="73:77">ALL_CPU_MASK</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="75:21" pos:end="87:21"><if pos:start="75:21" pos:end="81:21">if <condition pos:start="75:24" pos:end="75:41">(<expr pos:start="75:25" pos:end="75:40"><name pos:start="75:25" pos:end="75:29">value</name> <operator pos:start="75:31" pos:end="75:31">&amp;</operator> <operator pos:start="75:33" pos:end="75:33">(</operator><literal type="number" pos:start="75:34" pos:end="75:34">1</literal> <operator pos:start="75:36" pos:end="75:37">&lt;&lt;</operator> <name pos:start="75:39" pos:end="75:39">i</name><operator pos:start="75:40" pos:end="75:40">)</operator></expr>)</condition> <block pos:start="75:43" pos:end="81:21">{<block_content pos:start="79:25" pos:end="79:51">

                        <comment type="block" pos:start="77:25" pos:end="77:49">/* Group1 (Non-secure) */</comment>

                        <expr_stmt pos:start="79:25" pos:end="79:51"><expr pos:start="79:25" pos:end="79:50"><call pos:start="79:25" pos:end="79:50"><name pos:start="79:25" pos:end="79:37">GIC_SET_GROUP</name><argument_list pos:start="79:38" pos:end="79:50">(<argument pos:start="79:39" pos:end="79:45"><expr pos:start="79:39" pos:end="79:45"><name pos:start="79:39" pos:end="79:41">irq</name> <operator pos:start="79:43" pos:end="79:43">+</operator> <name pos:start="79:45" pos:end="79:45">i</name></expr></argument>, <argument pos:start="79:48" pos:end="79:49"><expr pos:start="79:48" pos:end="79:49"><name pos:start="79:48" pos:end="79:49">cm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="81:23" pos:end="87:21">else <block pos:start="81:28" pos:end="87:21">{<block_content pos:start="85:25" pos:end="85:53">

                        <comment type="block" pos:start="83:25" pos:end="83:45">/* Group0 (Secure) */</comment>

                        <expr_stmt pos:start="85:25" pos:end="85:53"><expr pos:start="85:25" pos:end="85:52"><call pos:start="85:25" pos:end="85:52"><name pos:start="85:25" pos:end="85:39">GIC_CLEAR_GROUP</name><argument_list pos:start="85:40" pos:end="85:52">(<argument pos:start="85:41" pos:end="85:47"><expr pos:start="85:41" pos:end="85:47"><name pos:start="85:41" pos:end="85:43">irq</name> <operator pos:start="85:45" pos:end="85:45">+</operator> <name pos:start="85:47" pos:end="85:47">i</name></expr></argument>, <argument pos:start="85:50" pos:end="85:51"><expr pos:start="85:50" pos:end="85:51"><name pos:start="85:50" pos:end="85:51">cm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="93:11" pos:end="97:9">else <block pos:start="93:16" pos:end="97:9">{<block_content pos:start="95:13" pos:end="95:25">

            <goto pos:start="95:13" pos:end="95:25">goto <name pos:start="95:18" pos:end="95:24">bad_reg</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="99:7" pos:end="156:5">else if <condition pos:start="99:15" pos:end="99:30">(<expr pos:start="99:16" pos:end="99:29"><name pos:start="99:16" pos:end="99:21">offset</name> <operator pos:start="99:23" pos:end="99:23">&lt;</operator> <literal type="number" pos:start="99:25" pos:end="99:29">0x180</literal></expr>)</condition> <block pos:start="99:32" pos:end="156:5">{<block_content pos:start="103:9" pos:end="154:9">

        <comment type="block" pos:start="101:9" pos:end="101:36">/* Interrupt Set Enable.  */</comment>

        <expr_stmt pos:start="103:9" pos:end="103:50"><expr pos:start="103:9" pos:end="103:49"><name pos:start="103:9" pos:end="103:11">irq</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <operator pos:start="103:15" pos:end="103:15">(</operator><name pos:start="103:16" pos:end="103:21">offset</name> <operator pos:start="103:23" pos:end="103:23">-</operator> <literal type="number" pos:start="103:25" pos:end="103:29">0x100</literal><operator pos:start="103:30" pos:end="103:30">)</operator> <operator pos:start="103:32" pos:end="103:32">*</operator> <literal type="number" pos:start="103:34" pos:end="103:36">8</literal> <operator pos:start="103:36" pos:end="103:36">+</operator> <name pos:start="103:38" pos:end="103:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="107:25"><if pos:start="105:9" pos:end="107:25">if <condition pos:start="105:12" pos:end="105:30">(<expr pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:15">irq</name> <operator pos:start="105:17" pos:end="105:18">&gt;=</operator> <name pos:start="105:20" pos:end="105:29"><name pos:start="105:20" pos:end="105:20">s</name><operator pos:start="105:21" pos:end="105:22">-&gt;</operator><name pos:start="105:23" pos:end="105:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:25"><block_content pos:start="107:13" pos:end="107:25">

            <goto pos:start="107:13" pos:end="107:25">goto <name pos:start="107:18" pos:end="107:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="109:9" pos:end="113:9"><if pos:start="109:9" pos:end="113:9">if <condition pos:start="109:12" pos:end="109:30">(<expr pos:start="109:13" pos:end="109:29"><name pos:start="109:13" pos:end="109:15">irq</name> <operator pos:start="109:17" pos:end="109:17">&lt;</operator> <name pos:start="109:19" pos:end="109:29">GIC_NR_SGIS</name></expr>)</condition> <block pos:start="109:32" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:25">

            <expr_stmt pos:start="111:13" pos:end="111:25"><expr pos:start="111:13" pos:end="111:24"><name pos:start="111:13" pos:end="111:17">value</name> <operator pos:start="111:19" pos:end="111:19">=</operator> <literal type="number" pos:start="111:21" pos:end="111:24">0xff</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="117:9" pos:end="154:9">for <control pos:start="117:13" pos:end="117:31">(<init pos:start="117:14" pos:end="117:19"><expr pos:start="117:14" pos:end="117:18"><name pos:start="117:14" pos:end="117:14">i</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <literal type="number" pos:start="117:18" pos:end="117:18">0</literal></expr>;</init> <condition pos:start="117:21" pos:end="117:26"><expr pos:start="117:21" pos:end="117:25"><name pos:start="117:21" pos:end="117:21">i</name> <operator pos:start="117:23" pos:end="117:23">&lt;</operator> <literal type="number" pos:start="117:25" pos:end="117:25">8</literal></expr>;</condition> <incr pos:start="117:28" pos:end="117:30"><expr pos:start="117:28" pos:end="117:30"><name pos:start="117:28" pos:end="117:28">i</name><operator pos:start="117:29" pos:end="117:30">++</operator></expr></incr>)</control> <block pos:start="117:33" pos:end="154:9">{<block_content pos:start="119:13" pos:end="152:13">

            <if_stmt pos:start="119:13" pos:end="152:13"><if pos:start="119:13" pos:end="152:13">if <condition pos:start="119:16" pos:end="119:33">(<expr pos:start="119:17" pos:end="119:32"><name pos:start="119:17" pos:end="119:21">value</name> <operator pos:start="119:23" pos:end="119:23">&amp;</operator> <operator pos:start="119:25" pos:end="119:25">(</operator><literal type="number" pos:start="119:26" pos:end="119:26">1</literal> <operator pos:start="119:28" pos:end="119:29">&lt;&lt;</operator> <name pos:start="119:31" pos:end="119:31">i</name><operator pos:start="119:32" pos:end="119:32">)</operator></expr>)</condition> <block pos:start="119:35" pos:end="152:13">{<block_content pos:start="121:17" pos:end="150:17">

                <decl_stmt pos:start="121:17" pos:end="123:76"><decl pos:start="121:17" pos:end="123:75"><type pos:start="121:17" pos:end="121:19"><name pos:start="121:17" pos:end="121:19">int</name></type> <name pos:start="121:21" pos:end="121:24">mask</name> <init pos:start="121:26" pos:end="123:75">=

                    <expr pos:start="123:21" pos:end="123:75"><ternary pos:start="123:21" pos:end="123:75"><condition pos:start="123:21" pos:end="123:42"><expr pos:start="123:21" pos:end="123:40"><operator pos:start="123:21" pos:end="123:21">(</operator><name pos:start="123:22" pos:end="123:24">irq</name> <operator pos:start="123:26" pos:end="123:26">&lt;</operator> <name pos:start="123:28" pos:end="123:39">GIC_INTERNAL</name><operator pos:start="123:40" pos:end="123:40">)</operator></expr> ?</condition><then pos:start="123:44" pos:end="123:53"> <expr pos:start="123:44" pos:end="123:53"><operator pos:start="123:44" pos:end="123:44">(</operator><literal type="number" pos:start="123:45" pos:end="123:45">1</literal> <operator pos:start="123:47" pos:end="123:48">&lt;&lt;</operator> <name pos:start="123:50" pos:end="123:52">cpu</name><operator pos:start="123:53" pos:end="123:53">)</operator></expr> </then><else pos:start="123:55" pos:end="123:75">: <expr pos:start="123:57" pos:end="123:75"><call pos:start="123:57" pos:end="123:75"><name pos:start="123:57" pos:end="123:66">GIC_TARGET</name><argument_list pos:start="123:67" pos:end="123:75">(<argument pos:start="123:68" pos:end="123:74"><expr pos:start="123:68" pos:end="123:74"><name pos:start="123:68" pos:end="123:70">irq</name> <operator pos:start="123:72" pos:end="123:72">+</operator> <name pos:start="123:74" pos:end="123:74">i</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="125:17" pos:end="125:74"><decl pos:start="125:17" pos:end="125:73"><type pos:start="125:17" pos:end="125:19"><name pos:start="125:17" pos:end="125:19">int</name></type> <name pos:start="125:21" pos:end="125:22">cm</name> <init pos:start="125:24" pos:end="125:73">= <expr pos:start="125:26" pos:end="125:73"><ternary pos:start="125:26" pos:end="125:73"><condition pos:start="125:26" pos:end="125:47"><expr pos:start="125:26" pos:end="125:45"><operator pos:start="125:26" pos:end="125:26">(</operator><name pos:start="125:27" pos:end="125:29">irq</name> <operator pos:start="125:31" pos:end="125:31">&lt;</operator> <name pos:start="125:33" pos:end="125:44">GIC_INTERNAL</name><operator pos:start="125:45" pos:end="125:45">)</operator></expr> ?</condition><then pos:start="125:49" pos:end="125:58"> <expr pos:start="125:49" pos:end="125:58"><operator pos:start="125:49" pos:end="125:49">(</operator><literal type="number" pos:start="125:50" pos:end="125:50">1</literal> <operator pos:start="125:52" pos:end="125:53">&lt;&lt;</operator> <name pos:start="125:55" pos:end="125:57">cpu</name><operator pos:start="125:58" pos:end="125:58">)</operator></expr> </then><else pos:start="125:60" pos:end="125:73">: <expr pos:start="125:62" pos:end="125:73"><name pos:start="125:62" pos:end="125:73">ALL_CPU_MASK</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="129:17" pos:end="134:17"><if pos:start="129:17" pos:end="134:17">if <condition pos:start="129:20" pos:end="129:51">(<expr pos:start="129:21" pos:end="129:50"><operator pos:start="129:21" pos:end="129:21">!</operator><call pos:start="129:22" pos:end="129:50"><name pos:start="129:22" pos:end="129:37">GIC_TEST_ENABLED</name><argument_list pos:start="129:38" pos:end="129:50">(<argument pos:start="129:39" pos:end="129:45"><expr pos:start="129:39" pos:end="129:45"><name pos:start="129:39" pos:end="129:41">irq</name> <operator pos:start="129:43" pos:end="129:43">+</operator> <name pos:start="129:45" pos:end="129:45">i</name></expr></argument>, <argument pos:start="129:48" pos:end="129:49"><expr pos:start="129:48" pos:end="129:49"><name pos:start="129:48" pos:end="129:49">cm</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:53" pos:end="134:17">{<block_content pos:start="131:21" pos:end="131:57">

                    <expr_stmt pos:start="131:21" pos:end="131:57"><expr pos:start="131:21" pos:end="131:56"><call pos:start="131:21" pos:end="131:56"><name pos:start="131:21" pos:end="131:27">DPRINTF</name><argument_list pos:start="131:28" pos:end="131:56">(<argument pos:start="131:29" pos:end="131:46"><expr pos:start="131:29" pos:end="131:46"><literal type="string" pos:start="131:29" pos:end="131:46">"Enabled IRQ %d\n"</literal></expr></argument>, <argument pos:start="131:49" pos:end="131:55"><expr pos:start="131:49" pos:end="131:55"><name pos:start="131:49" pos:end="131:51">irq</name> <operator pos:start="131:53" pos:end="131:53">+</operator> <name pos:start="131:55" pos:end="131:55">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="136:17" pos:end="136:45"><expr pos:start="136:17" pos:end="136:44"><call pos:start="136:17" pos:end="136:44"><name pos:start="136:17" pos:end="136:31">GIC_SET_ENABLED</name><argument_list pos:start="136:32" pos:end="136:44">(<argument pos:start="136:33" pos:end="136:39"><expr pos:start="136:33" pos:end="136:39"><name pos:start="136:33" pos:end="136:35">irq</name> <operator pos:start="136:37" pos:end="136:37">+</operator> <name pos:start="136:39" pos:end="136:39">i</name></expr></argument>, <argument pos:start="136:42" pos:end="136:43"><expr pos:start="136:42" pos:end="136:43"><name pos:start="136:42" pos:end="136:43">cm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="138:17" pos:end="140:37">/* If a raised level triggered IRQ enabled then mark

                   is as pending.  */</comment>

                <if_stmt pos:start="142:17" pos:end="150:17"><if pos:start="142:17" pos:end="150:17">if <condition pos:start="142:20" pos:end="144:59">(<expr pos:start="142:21" pos:end="144:58"><call pos:start="142:21" pos:end="142:49"><name pos:start="142:21" pos:end="142:34">GIC_TEST_LEVEL</name><argument_list pos:start="142:35" pos:end="142:49">(<argument pos:start="142:36" pos:end="142:42"><expr pos:start="142:36" pos:end="142:42"><name pos:start="142:36" pos:end="142:38">irq</name> <operator pos:start="142:40" pos:end="142:40">+</operator> <name pos:start="142:42" pos:end="142:42">i</name></expr></argument>, <argument pos:start="142:45" pos:end="142:48"><expr pos:start="142:45" pos:end="142:48"><name pos:start="142:45" pos:end="142:48">mask</name></expr></argument>)</argument_list></call>

                        <operator pos:start="144:25" pos:end="144:26">&amp;&amp;</operator> <operator pos:start="144:28" pos:end="144:28">!</operator><call pos:start="144:29" pos:end="144:58"><name pos:start="144:29" pos:end="144:49">GIC_TEST_EDGE_TRIGGER</name><argument_list pos:start="144:50" pos:end="144:58">(<argument pos:start="144:51" pos:end="144:57"><expr pos:start="144:51" pos:end="144:57"><name pos:start="144:51" pos:end="144:53">irq</name> <operator pos:start="144:55" pos:end="144:55">+</operator> <name pos:start="144:57" pos:end="144:57">i</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="144:61" pos:end="150:17">{<block_content pos:start="146:21" pos:end="148:51">

                    <expr_stmt pos:start="146:21" pos:end="146:71"><expr pos:start="146:21" pos:end="146:70"><call pos:start="146:21" pos:end="146:70"><name pos:start="146:21" pos:end="146:27">DPRINTF</name><argument_list pos:start="146:28" pos:end="146:70">(<argument pos:start="146:29" pos:end="146:54"><expr pos:start="146:29" pos:end="146:54"><literal type="string" pos:start="146:29" pos:end="146:54">"Set %d pending mask %x\n"</literal></expr></argument>, <argument pos:start="146:57" pos:end="146:63"><expr pos:start="146:57" pos:end="146:63"><name pos:start="146:57" pos:end="146:59">irq</name> <operator pos:start="146:61" pos:end="146:61">+</operator> <name pos:start="146:63" pos:end="146:63">i</name></expr></argument>, <argument pos:start="146:66" pos:end="146:69"><expr pos:start="146:66" pos:end="146:69"><name pos:start="146:66" pos:end="146:69">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="148:21" pos:end="148:51"><expr pos:start="148:21" pos:end="148:50"><call pos:start="148:21" pos:end="148:50"><name pos:start="148:21" pos:end="148:35">GIC_SET_PENDING</name><argument_list pos:start="148:36" pos:end="148:50">(<argument pos:start="148:37" pos:end="148:43"><expr pos:start="148:37" pos:end="148:43"><name pos:start="148:37" pos:end="148:39">irq</name> <operator pos:start="148:41" pos:end="148:41">+</operator> <name pos:start="148:43" pos:end="148:43">i</name></expr></argument>, <argument pos:start="148:46" pos:end="148:49"><expr pos:start="148:46" pos:end="148:49"><name pos:start="148:46" pos:end="148:49">mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="156:7" pos:end="196:5">else if <condition pos:start="156:15" pos:end="156:30">(<expr pos:start="156:16" pos:end="156:29"><name pos:start="156:16" pos:end="156:21">offset</name> <operator pos:start="156:23" pos:end="156:23">&lt;</operator> <literal type="number" pos:start="156:25" pos:end="156:29">0x200</literal></expr>)</condition> <block pos:start="156:32" pos:end="196:5">{<block_content pos:start="160:9" pos:end="194:9">

        <comment type="block" pos:start="158:9" pos:end="158:38">/* Interrupt Clear Enable.  */</comment>

        <expr_stmt pos:start="160:9" pos:end="160:50"><expr pos:start="160:9" pos:end="160:49"><name pos:start="160:9" pos:end="160:11">irq</name> <operator pos:start="160:13" pos:end="160:13">=</operator> <operator pos:start="160:15" pos:end="160:15">(</operator><name pos:start="160:16" pos:end="160:21">offset</name> <operator pos:start="160:23" pos:end="160:23">-</operator> <literal type="number" pos:start="160:25" pos:end="160:29">0x180</literal><operator pos:start="160:30" pos:end="160:30">)</operator> <operator pos:start="160:32" pos:end="160:32">*</operator> <literal type="number" pos:start="160:34" pos:end="160:36">8</literal> <operator pos:start="160:36" pos:end="160:36">+</operator> <name pos:start="160:38" pos:end="160:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="162:9" pos:end="164:25"><if pos:start="162:9" pos:end="164:25">if <condition pos:start="162:12" pos:end="162:30">(<expr pos:start="162:13" pos:end="162:29"><name pos:start="162:13" pos:end="162:15">irq</name> <operator pos:start="162:17" pos:end="162:18">&gt;=</operator> <name pos:start="162:20" pos:end="162:29"><name pos:start="162:20" pos:end="162:20">s</name><operator pos:start="162:21" pos:end="162:22">-&gt;</operator><name pos:start="162:23" pos:end="162:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="164:13" pos:end="164:25"><block_content pos:start="164:13" pos:end="164:25">

            <goto pos:start="164:13" pos:end="164:25">goto <name pos:start="164:18" pos:end="164:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="166:9" pos:end="170:9"><if pos:start="166:9" pos:end="170:9">if <condition pos:start="166:12" pos:end="166:30">(<expr pos:start="166:13" pos:end="166:29"><name pos:start="166:13" pos:end="166:15">irq</name> <operator pos:start="166:17" pos:end="166:17">&lt;</operator> <name pos:start="166:19" pos:end="166:29">GIC_NR_SGIS</name></expr>)</condition> <block pos:start="166:32" pos:end="170:9">{<block_content pos:start="168:13" pos:end="168:22">

            <expr_stmt pos:start="168:13" pos:end="168:22"><expr pos:start="168:13" pos:end="168:21"><name pos:start="168:13" pos:end="168:17">value</name> <operator pos:start="168:19" pos:end="168:19">=</operator> <literal type="number" pos:start="168:21" pos:end="168:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="174:9" pos:end="194:9">for <control pos:start="174:13" pos:end="174:31">(<init pos:start="174:14" pos:end="174:19"><expr pos:start="174:14" pos:end="174:18"><name pos:start="174:14" pos:end="174:14">i</name> <operator pos:start="174:16" pos:end="174:16">=</operator> <literal type="number" pos:start="174:18" pos:end="174:18">0</literal></expr>;</init> <condition pos:start="174:21" pos:end="174:26"><expr pos:start="174:21" pos:end="174:25"><name pos:start="174:21" pos:end="174:21">i</name> <operator pos:start="174:23" pos:end="174:23">&lt;</operator> <literal type="number" pos:start="174:25" pos:end="174:25">8</literal></expr>;</condition> <incr pos:start="174:28" pos:end="174:30"><expr pos:start="174:28" pos:end="174:30"><name pos:start="174:28" pos:end="174:28">i</name><operator pos:start="174:29" pos:end="174:30">++</operator></expr></incr>)</control> <block pos:start="174:33" pos:end="194:9">{<block_content pos:start="176:13" pos:end="192:13">

            <if_stmt pos:start="176:13" pos:end="192:13"><if pos:start="176:13" pos:end="192:13">if <condition pos:start="176:16" pos:end="176:33">(<expr pos:start="176:17" pos:end="176:32"><name pos:start="176:17" pos:end="176:21">value</name> <operator pos:start="176:23" pos:end="176:23">&amp;</operator> <operator pos:start="176:25" pos:end="176:25">(</operator><literal type="number" pos:start="176:26" pos:end="176:26">1</literal> <operator pos:start="176:28" pos:end="176:29">&lt;&lt;</operator> <name pos:start="176:31" pos:end="176:31">i</name><operator pos:start="176:32" pos:end="176:32">)</operator></expr>)</condition> <block pos:start="176:35" pos:end="192:13">{<block_content pos:start="178:17" pos:end="190:47">

                <decl_stmt pos:start="178:17" pos:end="178:74"><decl pos:start="178:17" pos:end="178:73"><type pos:start="178:17" pos:end="178:19"><name pos:start="178:17" pos:end="178:19">int</name></type> <name pos:start="178:21" pos:end="178:22">cm</name> <init pos:start="178:24" pos:end="178:73">= <expr pos:start="178:26" pos:end="178:73"><ternary pos:start="178:26" pos:end="178:73"><condition pos:start="178:26" pos:end="178:47"><expr pos:start="178:26" pos:end="178:45"><operator pos:start="178:26" pos:end="178:26">(</operator><name pos:start="178:27" pos:end="178:29">irq</name> <operator pos:start="178:31" pos:end="178:31">&lt;</operator> <name pos:start="178:33" pos:end="178:44">GIC_INTERNAL</name><operator pos:start="178:45" pos:end="178:45">)</operator></expr> ?</condition><then pos:start="178:49" pos:end="178:58"> <expr pos:start="178:49" pos:end="178:58"><operator pos:start="178:49" pos:end="178:49">(</operator><literal type="number" pos:start="178:50" pos:end="178:50">1</literal> <operator pos:start="178:52" pos:end="178:53">&lt;&lt;</operator> <name pos:start="178:55" pos:end="178:57">cpu</name><operator pos:start="178:58" pos:end="178:58">)</operator></expr> </then><else pos:start="178:60" pos:end="178:73">: <expr pos:start="178:62" pos:end="178:73"><name pos:start="178:62" pos:end="178:73">ALL_CPU_MASK</name></expr></else></ternary></expr></init></decl>;</decl_stmt>



                <if_stmt pos:start="182:17" pos:end="188:17"><if pos:start="182:17" pos:end="188:17">if <condition pos:start="182:20" pos:end="182:50">(<expr pos:start="182:21" pos:end="182:49"><call pos:start="182:21" pos:end="182:49"><name pos:start="182:21" pos:end="182:36">GIC_TEST_ENABLED</name><argument_list pos:start="182:37" pos:end="182:49">(<argument pos:start="182:38" pos:end="182:44"><expr pos:start="182:38" pos:end="182:44"><name pos:start="182:38" pos:end="182:40">irq</name> <operator pos:start="182:42" pos:end="182:42">+</operator> <name pos:start="182:44" pos:end="182:44">i</name></expr></argument>, <argument pos:start="182:47" pos:end="182:48"><expr pos:start="182:47" pos:end="182:48"><name pos:start="182:47" pos:end="182:48">cm</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="182:52" pos:end="188:17">{<block_content pos:start="184:21" pos:end="186:51">

                    <expr_stmt pos:start="184:21" pos:end="184:58"><expr pos:start="184:21" pos:end="184:57"><call pos:start="184:21" pos:end="184:57"><name pos:start="184:21" pos:end="184:27">DPRINTF</name><argument_list pos:start="184:28" pos:end="184:57">(<argument pos:start="184:29" pos:end="184:47"><expr pos:start="184:29" pos:end="184:47"><literal type="string" pos:start="184:29" pos:end="184:47">"Disabled IRQ %d\n"</literal></expr></argument>, <argument pos:start="184:50" pos:end="184:56"><expr pos:start="184:50" pos:end="184:56"><name pos:start="184:50" pos:end="184:52">irq</name> <operator pos:start="184:54" pos:end="184:54">+</operator> <name pos:start="184:56" pos:end="184:56">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="186:21" pos:end="186:51"><expr pos:start="186:21" pos:end="186:50"><call pos:start="186:21" pos:end="186:50"><name pos:start="186:21" pos:end="186:41">trace_gic_disable_irq</name><argument_list pos:start="186:42" pos:end="186:50">(<argument pos:start="186:43" pos:end="186:49"><expr pos:start="186:43" pos:end="186:49"><name pos:start="186:43" pos:end="186:45">irq</name> <operator pos:start="186:47" pos:end="186:47">+</operator> <name pos:start="186:49" pos:end="186:49">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="190:17" pos:end="190:47"><expr pos:start="190:17" pos:end="190:46"><call pos:start="190:17" pos:end="190:46"><name pos:start="190:17" pos:end="190:33">GIC_CLEAR_ENABLED</name><argument_list pos:start="190:34" pos:end="190:46">(<argument pos:start="190:35" pos:end="190:41"><expr pos:start="190:35" pos:end="190:41"><name pos:start="190:35" pos:end="190:37">irq</name> <operator pos:start="190:39" pos:end="190:39">+</operator> <name pos:start="190:41" pos:end="190:41">i</name></expr></argument>, <argument pos:start="190:44" pos:end="190:45"><expr pos:start="190:44" pos:end="190:45"><name pos:start="190:44" pos:end="190:45">cm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="196:7" pos:end="224:5">else if <condition pos:start="196:15" pos:end="196:30">(<expr pos:start="196:16" pos:end="196:29"><name pos:start="196:16" pos:end="196:21">offset</name> <operator pos:start="196:23" pos:end="196:23">&lt;</operator> <literal type="number" pos:start="196:25" pos:end="196:29">0x280</literal></expr>)</condition> <block pos:start="196:32" pos:end="224:5">{<block_content pos:start="200:9" pos:end="222:9">

        <comment type="block" pos:start="198:9" pos:end="198:37">/* Interrupt Set Pending.  */</comment>

        <expr_stmt pos:start="200:9" pos:end="200:50"><expr pos:start="200:9" pos:end="200:49"><name pos:start="200:9" pos:end="200:11">irq</name> <operator pos:start="200:13" pos:end="200:13">=</operator> <operator pos:start="200:15" pos:end="200:15">(</operator><name pos:start="200:16" pos:end="200:21">offset</name> <operator pos:start="200:23" pos:end="200:23">-</operator> <literal type="number" pos:start="200:25" pos:end="200:29">0x200</literal><operator pos:start="200:30" pos:end="200:30">)</operator> <operator pos:start="200:32" pos:end="200:32">*</operator> <literal type="number" pos:start="200:34" pos:end="200:36">8</literal> <operator pos:start="200:36" pos:end="200:36">+</operator> <name pos:start="200:38" pos:end="200:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="202:9" pos:end="204:25"><if pos:start="202:9" pos:end="204:25">if <condition pos:start="202:12" pos:end="202:30">(<expr pos:start="202:13" pos:end="202:29"><name pos:start="202:13" pos:end="202:15">irq</name> <operator pos:start="202:17" pos:end="202:18">&gt;=</operator> <name pos:start="202:20" pos:end="202:29"><name pos:start="202:20" pos:end="202:20">s</name><operator pos:start="202:21" pos:end="202:22">-&gt;</operator><name pos:start="202:23" pos:end="202:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="204:13" pos:end="204:25"><block_content pos:start="204:13" pos:end="204:25">

            <goto pos:start="204:13" pos:end="204:25">goto <name pos:start="204:18" pos:end="204:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="206:9" pos:end="210:9"><if pos:start="206:9" pos:end="210:9">if <condition pos:start="206:12" pos:end="206:30">(<expr pos:start="206:13" pos:end="206:29"><name pos:start="206:13" pos:end="206:15">irq</name> <operator pos:start="206:17" pos:end="206:17">&lt;</operator> <name pos:start="206:19" pos:end="206:29">GIC_NR_SGIS</name></expr>)</condition> <block pos:start="206:32" pos:end="210:9">{<block_content pos:start="208:13" pos:end="208:22">

            <expr_stmt pos:start="208:13" pos:end="208:22"><expr pos:start="208:13" pos:end="208:21"><name pos:start="208:13" pos:end="208:17">value</name> <operator pos:start="208:19" pos:end="208:19">=</operator> <literal type="number" pos:start="208:21" pos:end="208:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="214:9" pos:end="222:9">for <control pos:start="214:13" pos:end="214:31">(<init pos:start="214:14" pos:end="214:19"><expr pos:start="214:14" pos:end="214:18"><name pos:start="214:14" pos:end="214:14">i</name> <operator pos:start="214:16" pos:end="214:16">=</operator> <literal type="number" pos:start="214:18" pos:end="214:18">0</literal></expr>;</init> <condition pos:start="214:21" pos:end="214:26"><expr pos:start="214:21" pos:end="214:25"><name pos:start="214:21" pos:end="214:21">i</name> <operator pos:start="214:23" pos:end="214:23">&lt;</operator> <literal type="number" pos:start="214:25" pos:end="214:25">8</literal></expr>;</condition> <incr pos:start="214:28" pos:end="214:30"><expr pos:start="214:28" pos:end="214:30"><name pos:start="214:28" pos:end="214:28">i</name><operator pos:start="214:29" pos:end="214:30">++</operator></expr></incr>)</control> <block pos:start="214:33" pos:end="222:9">{<block_content pos:start="216:13" pos:end="220:13">

            <if_stmt pos:start="216:13" pos:end="220:13"><if pos:start="216:13" pos:end="220:13">if <condition pos:start="216:16" pos:end="216:33">(<expr pos:start="216:17" pos:end="216:32"><name pos:start="216:17" pos:end="216:21">value</name> <operator pos:start="216:23" pos:end="216:23">&amp;</operator> <operator pos:start="216:25" pos:end="216:25">(</operator><literal type="number" pos:start="216:26" pos:end="216:26">1</literal> <operator pos:start="216:28" pos:end="216:29">&lt;&lt;</operator> <name pos:start="216:31" pos:end="216:31">i</name><operator pos:start="216:32" pos:end="216:32">)</operator></expr>)</condition> <block pos:start="216:35" pos:end="220:13">{<block_content pos:start="218:17" pos:end="218:62">

                <expr_stmt pos:start="218:17" pos:end="218:62"><expr pos:start="218:17" pos:end="218:61"><call pos:start="218:17" pos:end="218:61"><name pos:start="218:17" pos:end="218:31">GIC_SET_PENDING</name><argument_list pos:start="218:32" pos:end="218:61">(<argument pos:start="218:33" pos:end="218:39"><expr pos:start="218:33" pos:end="218:39"><name pos:start="218:33" pos:end="218:35">irq</name> <operator pos:start="218:37" pos:end="218:37">+</operator> <name pos:start="218:39" pos:end="218:39">i</name></expr></argument>, <argument pos:start="218:42" pos:end="218:60"><expr pos:start="218:42" pos:end="218:60"><call pos:start="218:42" pos:end="218:60"><name pos:start="218:42" pos:end="218:51">GIC_TARGET</name><argument_list pos:start="218:52" pos:end="218:60">(<argument pos:start="218:53" pos:end="218:59"><expr pos:start="218:53" pos:end="218:59"><name pos:start="218:53" pos:end="218:55">irq</name> <operator pos:start="218:57" pos:end="218:57">+</operator> <name pos:start="218:59" pos:end="218:59">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="224:7" pos:end="258:5">else if <condition pos:start="224:15" pos:end="224:30">(<expr pos:start="224:16" pos:end="224:29"><name pos:start="224:16" pos:end="224:21">offset</name> <operator pos:start="224:23" pos:end="224:23">&lt;</operator> <literal type="number" pos:start="224:25" pos:end="224:29">0x300</literal></expr>)</condition> <block pos:start="224:32" pos:end="258:5">{<block_content pos:start="228:9" pos:end="256:9">

        <comment type="block" pos:start="226:9" pos:end="226:39">/* Interrupt Clear Pending.  */</comment>

        <expr_stmt pos:start="228:9" pos:end="228:50"><expr pos:start="228:9" pos:end="228:49"><name pos:start="228:9" pos:end="228:11">irq</name> <operator pos:start="228:13" pos:end="228:13">=</operator> <operator pos:start="228:15" pos:end="228:15">(</operator><name pos:start="228:16" pos:end="228:21">offset</name> <operator pos:start="228:23" pos:end="228:23">-</operator> <literal type="number" pos:start="228:25" pos:end="228:29">0x280</literal><operator pos:start="228:30" pos:end="228:30">)</operator> <operator pos:start="228:32" pos:end="228:32">*</operator> <literal type="number" pos:start="228:34" pos:end="228:36">8</literal> <operator pos:start="228:36" pos:end="228:36">+</operator> <name pos:start="228:38" pos:end="228:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="230:9" pos:end="232:25"><if pos:start="230:9" pos:end="232:25">if <condition pos:start="230:12" pos:end="230:30">(<expr pos:start="230:13" pos:end="230:29"><name pos:start="230:13" pos:end="230:15">irq</name> <operator pos:start="230:17" pos:end="230:18">&gt;=</operator> <name pos:start="230:20" pos:end="230:29"><name pos:start="230:20" pos:end="230:20">s</name><operator pos:start="230:21" pos:end="230:22">-&gt;</operator><name pos:start="230:23" pos:end="230:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="232:13" pos:end="232:25"><block_content pos:start="232:13" pos:end="232:25">

            <goto pos:start="232:13" pos:end="232:25">goto <name pos:start="232:18" pos:end="232:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="234:9" pos:end="238:9"><if pos:start="234:9" pos:end="238:9">if <condition pos:start="234:12" pos:end="234:30">(<expr pos:start="234:13" pos:end="234:29"><name pos:start="234:13" pos:end="234:15">irq</name> <operator pos:start="234:17" pos:end="234:17">&lt;</operator> <name pos:start="234:19" pos:end="234:29">GIC_NR_SGIS</name></expr>)</condition> <block pos:start="234:32" pos:end="238:9">{<block_content pos:start="236:13" pos:end="236:22">

            <expr_stmt pos:start="236:13" pos:end="236:22"><expr pos:start="236:13" pos:end="236:21"><name pos:start="236:13" pos:end="236:17">value</name> <operator pos:start="236:19" pos:end="236:19">=</operator> <literal type="number" pos:start="236:21" pos:end="236:21">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <for pos:start="242:9" pos:end="256:9">for <control pos:start="242:13" pos:end="242:31">(<init pos:start="242:14" pos:end="242:19"><expr pos:start="242:14" pos:end="242:18"><name pos:start="242:14" pos:end="242:14">i</name> <operator pos:start="242:16" pos:end="242:16">=</operator> <literal type="number" pos:start="242:18" pos:end="242:18">0</literal></expr>;</init> <condition pos:start="242:21" pos:end="242:26"><expr pos:start="242:21" pos:end="242:25"><name pos:start="242:21" pos:end="242:21">i</name> <operator pos:start="242:23" pos:end="242:23">&lt;</operator> <literal type="number" pos:start="242:25" pos:end="242:25">8</literal></expr>;</condition> <incr pos:start="242:28" pos:end="242:30"><expr pos:start="242:28" pos:end="242:30"><name pos:start="242:28" pos:end="242:28">i</name><operator pos:start="242:29" pos:end="242:30">++</operator></expr></incr>)</control> <block pos:start="242:33" pos:end="256:9">{<block_content pos:start="250:13" pos:end="254:13">

            <comment type="block" pos:start="244:13" pos:end="248:35">/* ??? This currently clears the pending bit for all CPUs, even

               for per-CPU interrupts.  It's unclear whether this is the

               corect behavior.  */</comment>

            <if_stmt pos:start="250:13" pos:end="254:13"><if pos:start="250:13" pos:end="254:13">if <condition pos:start="250:16" pos:end="250:33">(<expr pos:start="250:17" pos:end="250:32"><name pos:start="250:17" pos:end="250:21">value</name> <operator pos:start="250:23" pos:end="250:23">&amp;</operator> <operator pos:start="250:25" pos:end="250:25">(</operator><literal type="number" pos:start="250:26" pos:end="250:26">1</literal> <operator pos:start="250:28" pos:end="250:29">&lt;&lt;</operator> <name pos:start="250:31" pos:end="250:31">i</name><operator pos:start="250:32" pos:end="250:32">)</operator></expr>)</condition> <block pos:start="250:35" pos:end="254:13">{<block_content pos:start="252:17" pos:end="252:57">

                <expr_stmt pos:start="252:17" pos:end="252:57"><expr pos:start="252:17" pos:end="252:56"><call pos:start="252:17" pos:end="252:56"><name pos:start="252:17" pos:end="252:33">GIC_CLEAR_PENDING</name><argument_list pos:start="252:34" pos:end="252:56">(<argument pos:start="252:35" pos:end="252:41"><expr pos:start="252:35" pos:end="252:41"><name pos:start="252:35" pos:end="252:37">irq</name> <operator pos:start="252:39" pos:end="252:39">+</operator> <name pos:start="252:41" pos:end="252:41">i</name></expr></argument>, <argument pos:start="252:44" pos:end="252:55"><expr pos:start="252:44" pos:end="252:55"><name pos:start="252:44" pos:end="252:55">ALL_CPU_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="258:7" pos:end="264:5">else if <condition pos:start="258:15" pos:end="258:30">(<expr pos:start="258:16" pos:end="258:29"><name pos:start="258:16" pos:end="258:21">offset</name> <operator pos:start="258:23" pos:end="258:23">&lt;</operator> <literal type="number" pos:start="258:25" pos:end="258:29">0x400</literal></expr>)</condition> <block pos:start="258:32" pos:end="264:5">{<block_content pos:start="262:9" pos:end="262:21">

        <comment type="block" pos:start="260:9" pos:end="260:32">/* Interrupt Active.  */</comment>

        <goto pos:start="262:9" pos:end="262:21">goto <name pos:start="262:14" pos:end="262:20">bad_reg</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="264:7" pos:end="276:5">else if <condition pos:start="264:15" pos:end="264:30">(<expr pos:start="264:16" pos:end="264:29"><name pos:start="264:16" pos:end="264:21">offset</name> <operator pos:start="264:23" pos:end="264:23">&lt;</operator> <literal type="number" pos:start="264:25" pos:end="264:29">0x800</literal></expr>)</condition> <block pos:start="264:32" pos:end="276:5">{<block_content pos:start="268:9" pos:end="274:52">

        <comment type="block" pos:start="266:9" pos:end="266:34">/* Interrupt Priority.  */</comment>

        <expr_stmt pos:start="268:9" pos:end="268:46"><expr pos:start="268:9" pos:end="268:45"><name pos:start="268:9" pos:end="268:11">irq</name> <operator pos:start="268:13" pos:end="268:13">=</operator> <operator pos:start="268:15" pos:end="268:15">(</operator><name pos:start="268:16" pos:end="268:21">offset</name> <operator pos:start="268:23" pos:end="268:23">-</operator> <literal type="number" pos:start="268:25" pos:end="268:29">0x400</literal><operator pos:start="268:30" pos:end="268:30">)</operator> <operator pos:start="268:32" pos:end="268:32">+</operator> <name pos:start="268:34" pos:end="268:45">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="270:9" pos:end="272:25"><if pos:start="270:9" pos:end="272:25">if <condition pos:start="270:12" pos:end="270:30">(<expr pos:start="270:13" pos:end="270:29"><name pos:start="270:13" pos:end="270:15">irq</name> <operator pos:start="270:17" pos:end="270:18">&gt;=</operator> <name pos:start="270:20" pos:end="270:29"><name pos:start="270:20" pos:end="270:20">s</name><operator pos:start="270:21" pos:end="270:22">-&gt;</operator><name pos:start="270:23" pos:end="270:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="272:13" pos:end="272:25"><block_content pos:start="272:13" pos:end="272:25">

            <goto pos:start="272:13" pos:end="272:25">goto <name pos:start="272:18" pos:end="272:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="274:9" pos:end="274:52"><expr pos:start="274:9" pos:end="274:51"><call pos:start="274:9" pos:end="274:51"><name pos:start="274:9" pos:end="274:24">gic_set_priority</name><argument_list pos:start="274:25" pos:end="274:51">(<argument pos:start="274:26" pos:end="274:26"><expr pos:start="274:26" pos:end="274:26"><name pos:start="274:26" pos:end="274:26">s</name></expr></argument>, <argument pos:start="274:29" pos:end="274:31"><expr pos:start="274:29" pos:end="274:31"><name pos:start="274:29" pos:end="274:31">cpu</name></expr></argument>, <argument pos:start="274:34" pos:end="274:36"><expr pos:start="274:34" pos:end="274:36"><name pos:start="274:34" pos:end="274:36">irq</name></expr></argument>, <argument pos:start="274:39" pos:end="274:43"><expr pos:start="274:39" pos:end="274:43"><name pos:start="274:39" pos:end="274:43">value</name></expr></argument>, <argument pos:start="274:46" pos:end="274:50"><expr pos:start="274:46" pos:end="274:50"><name pos:start="274:46" pos:end="274:50">attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="276:7" pos:end="308:5">else if <condition pos:start="276:15" pos:end="276:30">(<expr pos:start="276:16" pos:end="276:29"><name pos:start="276:16" pos:end="276:21">offset</name> <operator pos:start="276:23" pos:end="276:23">&lt;</operator> <literal type="number" pos:start="276:25" pos:end="276:29">0xc00</literal></expr>)</condition> <block pos:start="276:32" pos:end="308:5">{<block_content pos:start="284:9" pos:end="306:9">

        <comment type="block" pos:start="278:9" pos:end="282:11">/* Interrupt CPU Target. RAZ/WI on uniprocessor GICs, with the

         * annoying exception of the 11MPCore's GIC.

         */</comment>

        <if_stmt pos:start="284:9" pos:end="306:9"><if pos:start="284:9" pos:end="306:9">if <condition pos:start="284:12" pos:end="284:59">(<expr pos:start="284:13" pos:end="284:58"><name pos:start="284:13" pos:end="284:22"><name pos:start="284:13" pos:end="284:13">s</name><operator pos:start="284:14" pos:end="284:15">-&gt;</operator><name pos:start="284:16" pos:end="284:22">num_cpu</name></name> <operator pos:start="284:24" pos:end="284:25">!=</operator> <literal type="number" pos:start="284:27" pos:end="284:27">1</literal> <operator pos:start="284:29" pos:end="284:30">||</operator> <name pos:start="284:32" pos:end="284:42"><name pos:start="284:32" pos:end="284:32">s</name><operator pos:start="284:33" pos:end="284:34">-&gt;</operator><name pos:start="284:35" pos:end="284:42">revision</name></name> <operator pos:start="284:44" pos:end="284:45">==</operator> <name pos:start="284:47" pos:end="284:58">REV_11MPCORE</name></expr>)</condition> <block pos:start="284:61" pos:end="306:9">{<block_content pos:start="286:13" pos:end="304:54">

            <expr_stmt pos:start="286:13" pos:end="286:50"><expr pos:start="286:13" pos:end="286:49"><name pos:start="286:13" pos:end="286:15">irq</name> <operator pos:start="286:17" pos:end="286:17">=</operator> <operator pos:start="286:19" pos:end="286:19">(</operator><name pos:start="286:20" pos:end="286:25">offset</name> <operator pos:start="286:27" pos:end="286:27">-</operator> <literal type="number" pos:start="286:29" pos:end="286:33">0x800</literal><operator pos:start="286:34" pos:end="286:34">)</operator> <operator pos:start="286:36" pos:end="286:36">+</operator> <name pos:start="286:38" pos:end="286:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

            <if_stmt pos:start="288:13" pos:end="292:13"><if pos:start="288:13" pos:end="292:13">if <condition pos:start="288:16" pos:end="288:34">(<expr pos:start="288:17" pos:end="288:33"><name pos:start="288:17" pos:end="288:19">irq</name> <operator pos:start="288:21" pos:end="288:22">&gt;=</operator> <name pos:start="288:24" pos:end="288:33"><name pos:start="288:24" pos:end="288:24">s</name><operator pos:start="288:25" pos:end="288:26">-&gt;</operator><name pos:start="288:27" pos:end="288:33">num_irq</name></name></expr>)</condition> <block pos:start="288:36" pos:end="292:13">{<block_content pos:start="290:17" pos:end="290:29">

                <goto pos:start="290:17" pos:end="290:29">goto <name pos:start="290:22" pos:end="290:28">bad_reg</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="294:13" pos:end="302:13"><if pos:start="294:13" pos:end="298:13">if <condition pos:start="294:16" pos:end="294:25">(<expr pos:start="294:17" pos:end="294:24"><name pos:start="294:17" pos:end="294:19">irq</name> <operator pos:start="294:21" pos:end="294:21">&lt;</operator> <literal type="number" pos:start="294:23" pos:end="294:24">29</literal></expr>)</condition> <block pos:start="294:27" pos:end="298:13">{<block_content pos:start="296:17" pos:end="296:26">

                <expr_stmt pos:start="296:17" pos:end="296:26"><expr pos:start="296:17" pos:end="296:25"><name pos:start="296:17" pos:end="296:21">value</name> <operator pos:start="296:23" pos:end="296:23">=</operator> <literal type="number" pos:start="296:25" pos:end="296:25">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="298:15" pos:end="302:13">else if <condition pos:start="298:23" pos:end="298:42">(<expr pos:start="298:24" pos:end="298:41"><name pos:start="298:24" pos:end="298:26">irq</name> <operator pos:start="298:28" pos:end="298:28">&lt;</operator> <name pos:start="298:30" pos:end="298:41">GIC_INTERNAL</name></expr>)</condition> <block pos:start="298:44" pos:end="302:13">{<block_content pos:start="300:17" pos:end="300:37">

                <expr_stmt pos:start="300:17" pos:end="300:37"><expr pos:start="300:17" pos:end="300:36"><name pos:start="300:17" pos:end="300:21">value</name> <operator pos:start="300:23" pos:end="300:23">=</operator> <name pos:start="300:25" pos:end="300:36">ALL_CPU_MASK</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="304:13" pos:end="304:54"><expr pos:start="304:13" pos:end="304:53"><name pos:start="304:13" pos:end="304:30"><name pos:start="304:13" pos:end="304:13">s</name><operator pos:start="304:14" pos:end="304:15">-&gt;</operator><name pos:start="304:16" pos:end="304:25">irq_target</name><index pos:start="304:26" pos:end="304:30">[<expr pos:start="304:27" pos:end="304:29"><name pos:start="304:27" pos:end="304:29">irq</name></expr>]</index></name> <operator pos:start="304:32" pos:end="304:32">=</operator> <name pos:start="304:34" pos:end="304:38">value</name> <operator pos:start="304:40" pos:end="304:40">&amp;</operator> <name pos:start="304:42" pos:end="304:53">ALL_CPU_MASK</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="308:7" pos:end="350:5">else if <condition pos:start="308:15" pos:end="308:30">(<expr pos:start="308:16" pos:end="308:29"><name pos:start="308:16" pos:end="308:21">offset</name> <operator pos:start="308:23" pos:end="308:23">&lt;</operator> <literal type="number" pos:start="308:25" pos:end="308:29">0xf00</literal></expr>)</condition> <block pos:start="308:32" pos:end="350:5">{<block_content pos:start="312:9" pos:end="348:9">

        <comment type="block" pos:start="310:9" pos:end="310:39">/* Interrupt Configuration.  */</comment>

        <expr_stmt pos:start="312:9" pos:end="312:50"><expr pos:start="312:9" pos:end="312:49"><name pos:start="312:9" pos:end="312:11">irq</name> <operator pos:start="312:13" pos:end="312:13">=</operator> <operator pos:start="312:15" pos:end="312:15">(</operator><name pos:start="312:16" pos:end="312:21">offset</name> <operator pos:start="312:23" pos:end="312:23">-</operator> <literal type="number" pos:start="312:25" pos:end="312:29">0xc00</literal><operator pos:start="312:30" pos:end="312:30">)</operator> <operator pos:start="312:32" pos:end="312:32">*</operator> <literal type="number" pos:start="312:34" pos:end="312:36">4</literal> <operator pos:start="312:36" pos:end="312:36">+</operator> <name pos:start="312:38" pos:end="312:49">GIC_BASE_IRQ</name></expr>;</expr_stmt>

        <if_stmt pos:start="314:9" pos:end="316:25"><if pos:start="314:9" pos:end="316:25">if <condition pos:start="314:12" pos:end="314:30">(<expr pos:start="314:13" pos:end="314:29"><name pos:start="314:13" pos:end="314:15">irq</name> <operator pos:start="314:17" pos:end="314:18">&gt;=</operator> <name pos:start="314:20" pos:end="314:29"><name pos:start="314:20" pos:end="314:20">s</name><operator pos:start="314:21" pos:end="314:22">-&gt;</operator><name pos:start="314:23" pos:end="314:29">num_irq</name></name></expr>)</condition><block type="pseudo" pos:start="316:13" pos:end="316:25"><block_content pos:start="316:13" pos:end="316:25">

            <goto pos:start="316:13" pos:end="316:25">goto <name pos:start="316:18" pos:end="316:24">bad_reg</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt pos:start="318:9" pos:end="320:26"><if pos:start="318:9" pos:end="320:26">if <condition pos:start="318:12" pos:end="318:30">(<expr pos:start="318:13" pos:end="318:29"><name pos:start="318:13" pos:end="318:15">irq</name> <operator pos:start="318:17" pos:end="318:17">&lt;</operator> <name pos:start="318:19" pos:end="318:29">GIC_NR_SGIS</name></expr>)</condition><block type="pseudo" pos:start="320:13" pos:end="320:26"><block_content pos:start="320:13" pos:end="320:26">

            <expr_stmt pos:start="320:13" pos:end="320:26"><expr pos:start="320:13" pos:end="320:25"><name pos:start="320:13" pos:end="320:17">value</name> <operator pos:start="320:19" pos:end="320:20">|=</operator> <literal type="number" pos:start="320:22" pos:end="320:25">0xaa</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <for pos:start="322:9" pos:end="348:9">for <control pos:start="322:13" pos:end="322:31">(<init pos:start="322:14" pos:end="322:19"><expr pos:start="322:14" pos:end="322:18"><name pos:start="322:14" pos:end="322:14">i</name> <operator pos:start="322:16" pos:end="322:16">=</operator> <literal type="number" pos:start="322:18" pos:end="322:18">0</literal></expr>;</init> <condition pos:start="322:21" pos:end="322:26"><expr pos:start="322:21" pos:end="322:25"><name pos:start="322:21" pos:end="322:21">i</name> <operator pos:start="322:23" pos:end="322:23">&lt;</operator> <literal type="number" pos:start="322:25" pos:end="322:25">4</literal></expr>;</condition> <incr pos:start="322:28" pos:end="322:30"><expr pos:start="322:28" pos:end="322:30"><name pos:start="322:28" pos:end="322:28">i</name><operator pos:start="322:29" pos:end="322:30">++</operator></expr></incr>)</control> <block pos:start="322:33" pos:end="348:9">{<block_content pos:start="324:13" pos:end="346:13">

            <if_stmt pos:start="324:13" pos:end="336:13"><if pos:start="324:13" pos:end="336:13">if <condition pos:start="324:16" pos:end="324:71">(<expr pos:start="324:17" pos:end="324:70"><name pos:start="324:17" pos:end="324:27"><name pos:start="324:17" pos:end="324:17">s</name><operator pos:start="324:18" pos:end="324:19">-&gt;</operator><name pos:start="324:20" pos:end="324:27">revision</name></name> <operator pos:start="324:29" pos:end="324:30">==</operator> <name pos:start="324:32" pos:end="324:43">REV_11MPCORE</name> <operator pos:start="324:45" pos:end="324:46">||</operator> <name pos:start="324:48" pos:end="324:58"><name pos:start="324:48" pos:end="324:48">s</name><operator pos:start="324:49" pos:end="324:50">-&gt;</operator><name pos:start="324:51" pos:end="324:58">revision</name></name> <operator pos:start="324:60" pos:end="324:61">==</operator> <name pos:start="324:63" pos:end="324:70">REV_NVIC</name></expr>)</condition> <block pos:start="324:73" pos:end="336:13">{<block_content pos:start="326:17" pos:end="334:17">

                <if_stmt pos:start="326:17" pos:end="334:17"><if pos:start="326:17" pos:end="330:17">if <condition pos:start="326:20" pos:end="326:43">(<expr pos:start="326:21" pos:end="326:42"><name pos:start="326:21" pos:end="326:25">value</name> <operator pos:start="326:27" pos:end="326:27">&amp;</operator> <operator pos:start="326:29" pos:end="326:29">(</operator><literal type="number" pos:start="326:30" pos:end="326:30">1</literal> <operator pos:start="326:32" pos:end="326:33">&lt;&lt;</operator> <operator pos:start="326:35" pos:end="326:35">(</operator><name pos:start="326:36" pos:end="326:36">i</name> <operator pos:start="326:38" pos:end="326:38">*</operator> <literal type="number" pos:start="326:40" pos:end="326:40">2</literal><operator pos:start="326:41" pos:end="326:41">)</operator><operator pos:start="326:42" pos:end="326:42">)</operator></expr>)</condition> <block pos:start="326:45" pos:end="330:17">{<block_content pos:start="328:21" pos:end="328:43">

                    <expr_stmt pos:start="328:21" pos:end="328:43"><expr pos:start="328:21" pos:end="328:42"><call pos:start="328:21" pos:end="328:42"><name pos:start="328:21" pos:end="328:33">GIC_SET_MODEL</name><argument_list pos:start="328:34" pos:end="328:42">(<argument pos:start="328:35" pos:end="328:41"><expr pos:start="328:35" pos:end="328:41"><name pos:start="328:35" pos:end="328:37">irq</name> <operator pos:start="328:39" pos:end="328:39">+</operator> <name pos:start="328:41" pos:end="328:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="330:19" pos:end="334:17">else <block pos:start="330:24" pos:end="334:17">{<block_content pos:start="332:21" pos:end="332:45">

                    <expr_stmt pos:start="332:21" pos:end="332:45"><expr pos:start="332:21" pos:end="332:44"><call pos:start="332:21" pos:end="332:44"><name pos:start="332:21" pos:end="332:35">GIC_CLEAR_MODEL</name><argument_list pos:start="332:36" pos:end="332:44">(<argument pos:start="332:37" pos:end="332:43"><expr pos:start="332:37" pos:end="332:43"><name pos:start="332:37" pos:end="332:39">irq</name> <operator pos:start="332:41" pos:end="332:41">+</operator> <name pos:start="332:43" pos:end="332:43">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="338:13" pos:end="346:13"><if pos:start="338:13" pos:end="342:13">if <condition pos:start="338:16" pos:end="338:39">(<expr pos:start="338:17" pos:end="338:38"><name pos:start="338:17" pos:end="338:21">value</name> <operator pos:start="338:23" pos:end="338:23">&amp;</operator> <operator pos:start="338:25" pos:end="338:25">(</operator><literal type="number" pos:start="338:26" pos:end="338:26">2</literal> <operator pos:start="338:28" pos:end="338:29">&lt;&lt;</operator> <operator pos:start="338:31" pos:end="338:31">(</operator><name pos:start="338:32" pos:end="338:32">i</name> <operator pos:start="338:34" pos:end="338:34">*</operator> <literal type="number" pos:start="338:36" pos:end="338:36">2</literal><operator pos:start="338:37" pos:end="338:37">)</operator><operator pos:start="338:38" pos:end="338:38">)</operator></expr>)</condition> <block pos:start="338:41" pos:end="342:13">{<block_content pos:start="340:17" pos:end="340:46">

                <expr_stmt pos:start="340:17" pos:end="340:46"><expr pos:start="340:17" pos:end="340:45"><call pos:start="340:17" pos:end="340:45"><name pos:start="340:17" pos:end="340:36">GIC_SET_EDGE_TRIGGER</name><argument_list pos:start="340:37" pos:end="340:45">(<argument pos:start="340:38" pos:end="340:44"><expr pos:start="340:38" pos:end="340:44"><name pos:start="340:38" pos:end="340:40">irq</name> <operator pos:start="340:42" pos:end="340:42">+</operator> <name pos:start="340:44" pos:end="340:44">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="342:15" pos:end="346:13">else <block pos:start="342:20" pos:end="346:13">{<block_content pos:start="344:17" pos:end="344:48">

                <expr_stmt pos:start="344:17" pos:end="344:48"><expr pos:start="344:17" pos:end="344:47"><call pos:start="344:17" pos:end="344:47"><name pos:start="344:17" pos:end="344:38">GIC_CLEAR_EDGE_TRIGGER</name><argument_list pos:start="344:39" pos:end="344:47">(<argument pos:start="344:40" pos:end="344:46"><expr pos:start="344:40" pos:end="344:46"><name pos:start="344:40" pos:end="344:42">irq</name> <operator pos:start="344:44" pos:end="344:44">+</operator> <name pos:start="344:46" pos:end="344:46">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if> <if type="elseif" pos:start="350:7" pos:end="356:5">else if <condition pos:start="350:15" pos:end="350:30">(<expr pos:start="350:16" pos:end="350:29"><name pos:start="350:16" pos:end="350:21">offset</name> <operator pos:start="350:23" pos:end="350:23">&lt;</operator> <literal type="number" pos:start="350:25" pos:end="350:29">0xf10</literal></expr>)</condition> <block pos:start="350:32" pos:end="356:5">{<block_content pos:start="354:9" pos:end="354:21">

        <comment type="block" pos:start="352:9" pos:end="352:55">/* 0xf00 is only handled for 32-bit writes.  */</comment>

        <goto pos:start="354:9" pos:end="354:21">goto <name pos:start="354:14" pos:end="354:20">bad_reg</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="356:7" pos:end="378:5">else if <condition pos:start="356:15" pos:end="356:30">(<expr pos:start="356:16" pos:end="356:29"><name pos:start="356:16" pos:end="356:21">offset</name> <operator pos:start="356:23" pos:end="356:23">&lt;</operator> <literal type="number" pos:start="356:25" pos:end="356:29">0xf20</literal></expr>)</condition> <block pos:start="356:32" pos:end="378:5">{<block_content pos:start="360:9" pos:end="376:9">

        <comment type="block" pos:start="358:9" pos:end="358:29">/* GICD_CPENDSGIRn */</comment>

        <if_stmt pos:start="360:9" pos:end="364:9"><if pos:start="360:9" pos:end="364:9">if <condition pos:start="360:12" pos:end="360:67">(<expr pos:start="360:13" pos:end="360:66"><name pos:start="360:13" pos:end="360:23"><name pos:start="360:13" pos:end="360:13">s</name><operator pos:start="360:14" pos:end="360:15">-&gt;</operator><name pos:start="360:16" pos:end="360:23">revision</name></name> <operator pos:start="360:25" pos:end="360:26">==</operator> <name pos:start="360:28" pos:end="360:39">REV_11MPCORE</name> <operator pos:start="360:41" pos:end="360:42">||</operator> <name pos:start="360:44" pos:end="360:54"><name pos:start="360:44" pos:end="360:44">s</name><operator pos:start="360:45" pos:end="360:46">-&gt;</operator><name pos:start="360:47" pos:end="360:54">revision</name></name> <operator pos:start="360:56" pos:end="360:57">==</operator> <name pos:start="360:59" pos:end="360:66">REV_NVIC</name></expr>)</condition> <block pos:start="360:69" pos:end="364:9">{<block_content pos:start="362:13" pos:end="362:25">

            <goto pos:start="362:13" pos:end="362:25">goto <name pos:start="362:18" pos:end="362:24">bad_reg</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="366:9" pos:end="366:31"><expr pos:start="366:9" pos:end="366:30"><name pos:start="366:9" pos:end="366:11">irq</name> <operator pos:start="366:13" pos:end="366:13">=</operator> <operator pos:start="366:15" pos:end="366:15">(</operator><name pos:start="366:16" pos:end="366:21">offset</name> <operator pos:start="366:23" pos:end="366:23">-</operator> <literal type="number" pos:start="366:25" pos:end="366:29">0xf10</literal><operator pos:start="366:30" pos:end="366:30">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="370:9" pos:end="370:43"><expr pos:start="370:9" pos:end="370:42"><name pos:start="370:9" pos:end="370:32"><name pos:start="370:9" pos:end="370:9">s</name><operator pos:start="370:10" pos:end="370:11">-&gt;</operator><name pos:start="370:12" pos:end="370:22">sgi_pending</name><index pos:start="370:23" pos:end="370:27">[<expr pos:start="370:24" pos:end="370:26"><name pos:start="370:24" pos:end="370:26">irq</name></expr>]</index><index pos:start="370:28" pos:end="370:32">[<expr pos:start="370:29" pos:end="370:31"><name pos:start="370:29" pos:end="370:31">cpu</name></expr>]</index></name> <operator pos:start="370:34" pos:end="370:35">&amp;=</operator> <operator pos:start="370:37" pos:end="370:37">~</operator><name pos:start="370:38" pos:end="370:42">value</name></expr>;</expr_stmt>

        <if_stmt pos:start="372:9" pos:end="376:9"><if pos:start="372:9" pos:end="376:9">if <condition pos:start="372:12" pos:end="372:42">(<expr pos:start="372:13" pos:end="372:41"><name pos:start="372:13" pos:end="372:36"><name pos:start="372:13" pos:end="372:13">s</name><operator pos:start="372:14" pos:end="372:15">-&gt;</operator><name pos:start="372:16" pos:end="372:26">sgi_pending</name><index pos:start="372:27" pos:end="372:31">[<expr pos:start="372:28" pos:end="372:30"><name pos:start="372:28" pos:end="372:30">irq</name></expr>]</index><index pos:start="372:32" pos:end="372:36">[<expr pos:start="372:33" pos:end="372:35"><name pos:start="372:33" pos:end="372:35">cpu</name></expr>]</index></name> <operator pos:start="372:38" pos:end="372:39">==</operator> <literal type="number" pos:start="372:41" pos:end="372:41">0</literal></expr>)</condition> <block pos:start="372:44" pos:end="376:9">{<block_content pos:start="374:13" pos:end="374:45">

            <expr_stmt pos:start="374:13" pos:end="374:45"><expr pos:start="374:13" pos:end="374:44"><call pos:start="374:13" pos:end="374:44"><name pos:start="374:13" pos:end="374:29">GIC_CLEAR_PENDING</name><argument_list pos:start="374:30" pos:end="374:44">(<argument pos:start="374:31" pos:end="374:33"><expr pos:start="374:31" pos:end="374:33"><name pos:start="374:31" pos:end="374:33">irq</name></expr></argument>, <argument pos:start="374:36" pos:end="374:43"><expr pos:start="374:36" pos:end="374:43"><literal type="number" pos:start="374:36" pos:end="374:36">1</literal> <operator pos:start="374:38" pos:end="374:39">&lt;&lt;</operator> <name pos:start="374:41" pos:end="374:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="378:7" pos:end="396:5">else if <condition pos:start="378:15" pos:end="378:30">(<expr pos:start="378:16" pos:end="378:29"><name pos:start="378:16" pos:end="378:21">offset</name> <operator pos:start="378:23" pos:end="378:23">&lt;</operator> <literal type="number" pos:start="378:25" pos:end="378:29">0xf30</literal></expr>)</condition> <block pos:start="378:32" pos:end="396:5">{<block_content pos:start="382:9" pos:end="394:42">

        <comment type="block" pos:start="380:9" pos:end="380:29">/* GICD_SPENDSGIRn */</comment>

        <if_stmt pos:start="382:9" pos:end="386:9"><if pos:start="382:9" pos:end="386:9">if <condition pos:start="382:12" pos:end="382:67">(<expr pos:start="382:13" pos:end="382:66"><name pos:start="382:13" pos:end="382:23"><name pos:start="382:13" pos:end="382:13">s</name><operator pos:start="382:14" pos:end="382:15">-&gt;</operator><name pos:start="382:16" pos:end="382:23">revision</name></name> <operator pos:start="382:25" pos:end="382:26">==</operator> <name pos:start="382:28" pos:end="382:39">REV_11MPCORE</name> <operator pos:start="382:41" pos:end="382:42">||</operator> <name pos:start="382:44" pos:end="382:54"><name pos:start="382:44" pos:end="382:44">s</name><operator pos:start="382:45" pos:end="382:46">-&gt;</operator><name pos:start="382:47" pos:end="382:54">revision</name></name> <operator pos:start="382:56" pos:end="382:57">==</operator> <name pos:start="382:59" pos:end="382:66">REV_NVIC</name></expr>)</condition> <block pos:start="382:69" pos:end="386:9">{<block_content pos:start="384:13" pos:end="384:25">

            <goto pos:start="384:13" pos:end="384:25">goto <name pos:start="384:18" pos:end="384:24">bad_reg</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="388:9" pos:end="388:31"><expr pos:start="388:9" pos:end="388:30"><name pos:start="388:9" pos:end="388:11">irq</name> <operator pos:start="388:13" pos:end="388:13">=</operator> <operator pos:start="388:15" pos:end="388:15">(</operator><name pos:start="388:16" pos:end="388:21">offset</name> <operator pos:start="388:23" pos:end="388:23">-</operator> <literal type="number" pos:start="388:25" pos:end="388:29">0xf20</literal><operator pos:start="388:30" pos:end="388:30">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="392:9" pos:end="392:39"><expr pos:start="392:9" pos:end="392:38"><call pos:start="392:9" pos:end="392:38"><name pos:start="392:9" pos:end="392:23">GIC_SET_PENDING</name><argument_list pos:start="392:24" pos:end="392:38">(<argument pos:start="392:25" pos:end="392:27"><expr pos:start="392:25" pos:end="392:27"><name pos:start="392:25" pos:end="392:27">irq</name></expr></argument>, <argument pos:start="392:30" pos:end="392:37"><expr pos:start="392:30" pos:end="392:37"><literal type="number" pos:start="392:30" pos:end="392:30">1</literal> <operator pos:start="392:32" pos:end="392:33">&lt;&lt;</operator> <name pos:start="392:35" pos:end="392:37">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="394:9" pos:end="394:42"><expr pos:start="394:9" pos:end="394:41"><name pos:start="394:9" pos:end="394:32"><name pos:start="394:9" pos:end="394:9">s</name><operator pos:start="394:10" pos:end="394:11">-&gt;</operator><name pos:start="394:12" pos:end="394:22">sgi_pending</name><index pos:start="394:23" pos:end="394:27">[<expr pos:start="394:24" pos:end="394:26"><name pos:start="394:24" pos:end="394:26">irq</name></expr>]</index><index pos:start="394:28" pos:end="394:32">[<expr pos:start="394:29" pos:end="394:31"><name pos:start="394:29" pos:end="394:31">cpu</name></expr>]</index></name> <operator pos:start="394:34" pos:end="394:35">|=</operator> <name pos:start="394:37" pos:end="394:41">value</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="396:7" pos:end="400:5">else <block pos:start="396:12" pos:end="400:5">{<block_content pos:start="398:9" pos:end="398:21">

        <goto pos:start="398:9" pos:end="398:21">goto <name pos:start="398:14" pos:end="398:20">bad_reg</name>;</goto>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="402:5" pos:end="402:18"><expr pos:start="402:5" pos:end="402:17"><call pos:start="402:5" pos:end="402:17"><name pos:start="402:5" pos:end="402:14">gic_update</name><argument_list pos:start="402:15" pos:end="402:17">(<argument pos:start="402:16" pos:end="402:16"><expr pos:start="402:16" pos:end="402:16"><name pos:start="402:16" pos:end="402:16">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="404:5" pos:end="404:11">return;</return>

<label pos:start="406:1" pos:end="406:8"><name pos:start="406:1" pos:end="406:7">bad_reg</name>:</label>

    <expr_stmt pos:start="408:5" pos:end="410:67"><expr pos:start="408:5" pos:end="410:66"><call pos:start="408:5" pos:end="410:66"><name pos:start="408:5" pos:end="408:17">qemu_log_mask</name><argument_list pos:start="408:18" pos:end="410:66">(<argument pos:start="408:19" pos:end="408:33"><expr pos:start="408:19" pos:end="408:33"><name pos:start="408:19" pos:end="408:33">LOG_GUEST_ERROR</name></expr></argument>,

                  <argument pos:start="410:19" pos:end="410:52"><expr pos:start="410:19" pos:end="410:52"><literal type="string" pos:start="410:19" pos:end="410:52">"gic_dist_writeb: Bad offset %x\n"</literal></expr></argument>, <argument pos:start="410:55" pos:end="410:65"><expr pos:start="410:55" pos:end="410:65"><operator pos:start="410:55" pos:end="410:55">(</operator><name pos:start="410:56" pos:end="410:58">int</name><operator pos:start="410:59" pos:end="410:59">)</operator><name pos:start="410:60" pos:end="410:65">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
