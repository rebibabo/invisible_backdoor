<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17635.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:40">loadvm_postcopy_handle_advise</name><parameter_list pos:start="1:41" pos:end="1:69">(<parameter pos:start="1:42" pos:end="1:68"><decl pos:start="1:42" pos:end="1:68"><type pos:start="1:42" pos:end="1:65"><name pos:start="1:42" pos:end="1:63">MigrationIncomingState</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">mis</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:13">

    <decl_stmt pos:start="5:5" pos:end="5:68"><decl pos:start="5:5" pos:end="5:67"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17">PostcopyState</name></type> <name pos:start="5:19" pos:end="5:20">ps</name> <init pos:start="5:22" pos:end="5:67">= <expr pos:start="5:24" pos:end="5:67"><call pos:start="5:24" pos:end="5:67"><name pos:start="5:24" pos:end="5:41">postcopy_state_set</name><argument_list pos:start="5:42" pos:end="5:67">(<argument pos:start="5:43" pos:end="5:66"><expr pos:start="5:43" pos:end="5:66"><name pos:start="5:43" pos:end="5:66">POSTCOPY_INCOMING_ADVISE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:73"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:36">remote_pagesize_summary</name></decl>, <decl pos:start="7:39" pos:end="7:60"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:39" pos:end="7:60">local_pagesize_summary</name></decl>, <decl pos:start="7:63" pos:end="7:72"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:63" pos:end="7:72">remote_tps</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:42"><expr pos:start="11:5" pos:end="11:41"><call pos:start="11:5" pos:end="11:41"><name pos:start="11:5" pos:end="11:39">trace_loadvm_postcopy_handle_advise</name><argument_list pos:start="11:40" pos:end="11:41">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:37">(<expr pos:start="13:9" pos:end="13:36"><name pos:start="13:9" pos:end="13:10">ps</name> <operator pos:start="13:12" pos:end="13:13">!=</operator> <name pos:start="13:15" pos:end="13:36">POSTCOPY_INCOMING_NONE</name></expr>)</condition> <block pos:start="13:39" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:18">

        <expr_stmt pos:start="15:9" pos:end="15:77"><expr pos:start="15:9" pos:end="15:76"><call pos:start="15:9" pos:end="15:76"><name pos:start="15:9" pos:end="15:20">error_report</name><argument_list pos:start="15:21" pos:end="15:76">(<argument pos:start="15:22" pos:end="15:71"><expr pos:start="15:22" pos:end="15:71"><literal type="string" pos:start="15:22" pos:end="15:71">"CMD_POSTCOPY_ADVISE in wrong postcopy state (%d)"</literal></expr></argument>, <argument pos:start="15:74" pos:end="15:75"><expr pos:start="15:74" pos:end="15:75"><name pos:start="15:74" pos:end="15:75">ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:32">(<expr pos:start="23:9" pos:end="23:31"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:31"><name pos:start="23:10" pos:end="23:29">migrate_postcopy_ram</name><argument_list pos:start="23:30" pos:end="23:31">()</argument_list></call></expr>)</condition> <block pos:start="23:34" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:17">

        <return pos:start="25:9" pos:end="25:17">return <expr pos:start="25:16" pos:end="25:16"><literal type="number" pos:start="25:16" pos:end="25:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:42">(<expr pos:start="31:9" pos:end="31:41"><operator pos:start="31:9" pos:end="31:9">!</operator><call pos:start="31:10" pos:end="31:41"><name pos:start="31:10" pos:end="31:39">postcopy_ram_supported_by_host</name><argument_list pos:start="31:40" pos:end="31:41">()</argument_list></call></expr>)</condition> <block pos:start="31:44" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:18">

        <expr_stmt pos:start="33:9" pos:end="33:51"><expr pos:start="33:9" pos:end="33:50"><call pos:start="33:9" pos:end="33:50"><name pos:start="33:9" pos:end="33:26">postcopy_state_set</name><argument_list pos:start="33:27" pos:end="33:50">(<argument pos:start="33:28" pos:end="33:49"><expr pos:start="33:28" pos:end="33:49"><name pos:start="33:28" pos:end="33:49">POSTCOPY_INCOMING_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:64"><expr pos:start="41:5" pos:end="41:63"><name pos:start="41:5" pos:end="41:27">remote_pagesize_summary</name> <operator pos:start="41:29" pos:end="41:29">=</operator> <call pos:start="41:31" pos:end="41:63"><name pos:start="41:31" pos:end="41:43">qemu_get_be64</name><argument_list pos:start="41:44" pos:end="41:63">(<argument pos:start="41:45" pos:end="41:62"><expr pos:start="41:45" pos:end="41:62"><name pos:start="41:45" pos:end="41:62"><name pos:start="41:45" pos:end="41:47">mis</name><operator pos:start="41:48" pos:end="41:49">-&gt;</operator><name pos:start="41:50" pos:end="41:62">from_src_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:52"><expr pos:start="43:5" pos:end="43:51"><name pos:start="43:5" pos:end="43:26">local_pagesize_summary</name> <operator pos:start="43:28" pos:end="43:28">=</operator> <call pos:start="43:30" pos:end="43:51"><name pos:start="43:30" pos:end="43:49">ram_pagesize_summary</name><argument_list pos:start="43:50" pos:end="43:51">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="85:5"><if pos:start="47:5" pos:end="85:5">if <condition pos:start="47:8" pos:end="47:58">(<expr pos:start="47:9" pos:end="47:57"><name pos:start="47:9" pos:end="47:31">remote_pagesize_summary</name> <operator pos:start="47:33" pos:end="47:34">!=</operator> <name pos:start="47:36" pos:end="47:57">local_pagesize_summary</name></expr>)</condition>  <block pos:start="47:61" pos:end="85:5">{<block_content pos:start="77:9" pos:end="83:18">

        <comment type="block" pos:start="49:9" pos:end="75:11">/*

         * This detects two potential causes of mismatch:

         *   a) A mismatch in host page sizes

         *      Some combinations of mismatch are probably possible but it gets

         *      a bit more complicated.  In particular we need to place whole

         *      host pages on the dest at once, and we need to ensure that we

         *      handle dirtying to make sure we never end up sending part of

         *      a hostpage on it's own.

         *   b) The use of different huge page sizes on source/destination

         *      a more fine grain test is performed during RAM block migration

         *      but this test here causes a nice early clear failure, and

         *      also fails when passed to an older qemu that doesn't

         *      do huge pages.

         */</comment>

        <expr_stmt pos:start="77:9" pos:end="81:70"><expr pos:start="77:9" pos:end="81:69"><call pos:start="77:9" pos:end="81:69"><name pos:start="77:9" pos:end="77:20">error_report</name><argument_list pos:start="77:21" pos:end="81:69">(<argument pos:start="77:22" pos:end="79:78"><expr pos:start="77:22" pos:end="79:78"><literal type="string" pos:start="77:22" pos:end="77:66">"Postcopy needs matching RAM page sizes (s=%"</literal> <name pos:start="77:68" pos:end="77:73">PRIx64</name>

                                                             <literal type="string" pos:start="79:62" pos:end="79:67">" d=%"</literal> <name pos:start="79:69" pos:end="79:74">PRIx64</name> <literal type="string" pos:start="79:76" pos:end="79:78">")"</literal></expr></argument>,

                     <argument pos:start="81:22" pos:end="81:44"><expr pos:start="81:22" pos:end="81:44"><name pos:start="81:22" pos:end="81:44">remote_pagesize_summary</name></expr></argument>, <argument pos:start="81:47" pos:end="81:68"><expr pos:start="81:47" pos:end="81:68"><name pos:start="81:47" pos:end="81:68">local_pagesize_summary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="83:9" pos:end="83:18">return <expr pos:start="83:16" pos:end="83:17"><operator pos:start="83:16" pos:end="83:16">-</operator><literal type="number" pos:start="83:17" pos:end="83:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:51"><expr pos:start="89:5" pos:end="89:50"><name pos:start="89:5" pos:end="89:14">remote_tps</name> <operator pos:start="89:16" pos:end="89:16">=</operator> <call pos:start="89:18" pos:end="89:50"><name pos:start="89:18" pos:end="89:30">qemu_get_be64</name><argument_list pos:start="89:31" pos:end="89:50">(<argument pos:start="89:32" pos:end="89:49"><expr pos:start="89:32" pos:end="89:49"><name pos:start="89:32" pos:end="89:49"><name pos:start="89:32" pos:end="89:34">mis</name><operator pos:start="89:35" pos:end="89:36">-&gt;</operator><name pos:start="89:37" pos:end="89:49">from_src_file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="107:5"><if pos:start="91:5" pos:end="107:5">if <condition pos:start="91:8" pos:end="91:46">(<expr pos:start="91:9" pos:end="91:45"><name pos:start="91:9" pos:end="91:18">remote_tps</name> <operator pos:start="91:20" pos:end="91:21">!=</operator> <call pos:start="91:23" pos:end="91:45"><name pos:start="91:23" pos:end="91:43">qemu_target_page_size</name><argument_list pos:start="91:44" pos:end="91:45">()</argument_list></call></expr>)</condition> <block pos:start="91:48" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:18">

        <comment type="block" pos:start="93:9" pos:end="99:11">/*

         * Again, some differences could be dealt with, but for now keep it

         * simple.

         */</comment>

        <expr_stmt pos:start="101:9" pos:end="103:63"><expr pos:start="101:9" pos:end="103:62"><call pos:start="101:9" pos:end="103:62"><name pos:start="101:9" pos:end="101:20">error_report</name><argument_list pos:start="101:21" pos:end="103:62">(<argument pos:start="101:22" pos:end="101:77"><expr pos:start="101:22" pos:end="101:77"><literal type="string" pos:start="101:22" pos:end="101:77">"Postcopy needs matching target page sizes (s=%d d=%zd)"</literal></expr></argument>,

                     <argument pos:start="103:22" pos:end="103:36"><expr pos:start="103:22" pos:end="103:36"><operator pos:start="103:22" pos:end="103:22">(</operator><name pos:start="103:23" pos:end="103:25">int</name><operator pos:start="103:26" pos:end="103:26">)</operator><name pos:start="103:27" pos:end="103:36">remote_tps</name></expr></argument>, <argument pos:start="103:39" pos:end="103:61"><expr pos:start="103:39" pos:end="103:61"><call pos:start="103:39" pos:end="103:61"><name pos:start="103:39" pos:end="103:59">qemu_target_page_size</name><argument_list pos:start="103:60" pos:end="103:61">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:18">return <expr pos:start="105:16" pos:end="105:17"><operator pos:start="105:16" pos:end="105:16">-</operator><literal type="number" pos:start="105:17" pos:end="105:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="111:5" pos:end="115:5"><if pos:start="111:5" pos:end="115:5">if <condition pos:start="111:8" pos:end="111:40">(<expr pos:start="111:9" pos:end="111:39"><call pos:start="111:9" pos:end="111:39"><name pos:start="111:9" pos:end="111:34">ram_postcopy_incoming_init</name><argument_list pos:start="111:35" pos:end="111:39">(<argument pos:start="111:36" pos:end="111:38"><expr pos:start="111:36" pos:end="111:38"><name pos:start="111:36" pos:end="111:38">mis</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="111:42" pos:end="115:5">{<block_content pos:start="113:9" pos:end="113:18">

        <return pos:start="113:9" pos:end="113:18">return <expr pos:start="113:16" pos:end="113:17"><operator pos:start="113:16" pos:end="113:16">-</operator><literal type="number" pos:start="113:17" pos:end="113:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:49"><expr pos:start="119:5" pos:end="119:48"><call pos:start="119:5" pos:end="119:48"><name pos:start="119:5" pos:end="119:22">postcopy_state_set</name><argument_list pos:start="119:23" pos:end="119:48">(<argument pos:start="119:24" pos:end="119:47"><expr pos:start="119:24" pos:end="119:47"><name pos:start="119:24" pos:end="119:47">POSTCOPY_INCOMING_ADVISE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="123:5" pos:end="123:13">return <expr pos:start="123:12" pos:end="123:12"><literal type="number" pos:start="123:12" pos:end="123:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
