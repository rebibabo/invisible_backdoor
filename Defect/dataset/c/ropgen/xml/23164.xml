<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23164.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:36">vnc_display_get_addresses</name><parameter_list pos:start="1:37" pos:end="13:50">(<parameter pos:start="1:38" pos:end="1:51"><decl pos:start="1:38" pos:end="1:51"><type pos:start="1:38" pos:end="1:51"><name pos:start="1:38" pos:end="1:45">QemuOpts</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">opts</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:49"><decl pos:start="3:38" pos:end="3:49"><type pos:start="3:38" pos:end="3:49"><name pos:start="3:38" pos:end="3:41">bool</name></type> <name pos:start="3:43" pos:end="3:49">reverse</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:62"><decl pos:start="5:38" pos:end="5:62"><type pos:start="5:38" pos:end="5:62"><name pos:start="5:38" pos:end="5:50">SocketAddress</name> <modifier pos:start="5:52" pos:end="5:52">*</modifier><modifier pos:start="5:53" pos:end="5:53">*</modifier><modifier pos:start="5:54" pos:end="5:54">*</modifier></type><name pos:start="5:55" pos:end="5:62">retsaddr</name></decl></parameter>,

                                     <parameter pos:start="7:38" pos:end="7:54"><decl pos:start="7:38" pos:end="7:54"><type pos:start="7:38" pos:end="7:54"><name pos:start="7:38" pos:end="7:43">size_t</name> <modifier pos:start="7:45" pos:end="7:45">*</modifier></type><name pos:start="7:46" pos:end="7:54">retnsaddr</name></decl></parameter>,

                                     <parameter pos:start="9:38" pos:end="9:63"><decl pos:start="9:38" pos:end="9:63"><type pos:start="9:38" pos:end="9:63"><name pos:start="9:38" pos:end="9:50">SocketAddress</name> <modifier pos:start="9:52" pos:end="9:52">*</modifier><modifier pos:start="9:53" pos:end="9:53">*</modifier><modifier pos:start="9:54" pos:end="9:54">*</modifier></type><name pos:start="9:55" pos:end="9:63">retwsaddr</name></decl></parameter>,

                                     <parameter pos:start="11:38" pos:end="11:55"><decl pos:start="11:38" pos:end="11:55"><type pos:start="11:38" pos:end="11:55"><name pos:start="11:38" pos:end="11:43">size_t</name> <modifier pos:start="11:45" pos:end="11:45">*</modifier></type><name pos:start="11:46" pos:end="11:55">retnwsaddr</name></decl></parameter>,

                                     <parameter pos:start="13:38" pos:end="13:49"><decl pos:start="13:38" pos:end="13:49"><type pos:start="13:38" pos:end="13:49"><name pos:start="13:38" pos:end="13:42">Error</name> <modifier pos:start="13:44" pos:end="13:44">*</modifier><modifier pos:start="13:45" pos:end="13:45">*</modifier></type><name pos:start="13:46" pos:end="13:49">errp</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="213:1">{<block_content pos:start="17:5" pos:end="211:15">

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:19"><name pos:start="17:5" pos:end="17:17">SocketAddress</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:24">saddr</name> <init pos:start="17:26" pos:end="17:31">= <expr pos:start="17:28" pos:end="17:31"><name pos:start="17:28" pos:end="17:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:17">SocketAddress</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:25">wsaddr</name> <init pos:start="19:27" pos:end="19:32">= <expr pos:start="19:29" pos:end="19:32"><name pos:start="19:29" pos:end="19:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:16">QemuOptsIter</name></type> <name pos:start="21:18" pos:end="21:25">addriter</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:21"><decl pos:start="23:5" pos:end="23:20"><type pos:start="23:5" pos:end="23:16"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:14">char</name> <modifier pos:start="23:16" pos:end="23:16">*</modifier></type><name pos:start="23:17" pos:end="23:20">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:48"><decl pos:start="25:5" pos:end="25:47"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:10">to</name> <init pos:start="25:12" pos:end="25:47">= <expr pos:start="25:14" pos:end="25:47"><call pos:start="25:14" pos:end="25:47"><name pos:start="25:14" pos:end="25:32">qemu_opt_get_number</name><argument_list pos:start="25:33" pos:end="25:47">(<argument pos:start="25:34" pos:end="25:37"><expr pos:start="25:34" pos:end="25:37"><name pos:start="25:34" pos:end="25:37">opts</name></expr></argument>, <argument pos:start="25:40" pos:end="25:43"><expr pos:start="25:40" pos:end="25:43"><literal type="string" pos:start="25:40" pos:end="25:43">"to"</literal></expr></argument>, <argument pos:start="25:46" pos:end="25:46"><expr pos:start="25:46" pos:end="25:46"><literal type="number" pos:start="25:46" pos:end="25:46">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:47"><decl pos:start="27:5" pos:end="27:46"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">bool</name></type> <name pos:start="27:10" pos:end="27:17">has_ipv4</name> <init pos:start="27:19" pos:end="27:46">= <expr pos:start="27:21" pos:end="27:46"><call pos:start="27:21" pos:end="27:46"><name pos:start="27:21" pos:end="27:32">qemu_opt_get</name><argument_list pos:start="27:33" pos:end="27:46">(<argument pos:start="27:34" pos:end="27:37"><expr pos:start="27:34" pos:end="27:37"><name pos:start="27:34" pos:end="27:37">opts</name></expr></argument>, <argument pos:start="27:40" pos:end="27:45"><expr pos:start="27:40" pos:end="27:45"><literal type="string" pos:start="27:40" pos:end="27:45">"ipv4"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:47"><decl pos:start="29:5" pos:end="29:46"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">bool</name></type> <name pos:start="29:10" pos:end="29:17">has_ipv6</name> <init pos:start="29:19" pos:end="29:46">= <expr pos:start="29:21" pos:end="29:46"><call pos:start="29:21" pos:end="29:46"><name pos:start="29:21" pos:end="29:32">qemu_opt_get</name><argument_list pos:start="29:33" pos:end="29:46">(<argument pos:start="29:34" pos:end="29:37"><expr pos:start="29:34" pos:end="29:37"><name pos:start="29:34" pos:end="29:37">opts</name></expr></argument>, <argument pos:start="29:40" pos:end="29:45"><expr pos:start="29:40" pos:end="29:45"><literal type="string" pos:start="29:40" pos:end="29:45">"ipv6"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:55"><decl pos:start="31:5" pos:end="31:54"><type pos:start="31:5" pos:end="31:8"><name pos:start="31:5" pos:end="31:8">bool</name></type> <name pos:start="31:10" pos:end="31:13">ipv4</name> <init pos:start="31:15" pos:end="31:54">= <expr pos:start="31:17" pos:end="31:54"><call pos:start="31:17" pos:end="31:54"><name pos:start="31:17" pos:end="31:33">qemu_opt_get_bool</name><argument_list pos:start="31:34" pos:end="31:54">(<argument pos:start="31:35" pos:end="31:38"><expr pos:start="31:35" pos:end="31:38"><name pos:start="31:35" pos:end="31:38">opts</name></expr></argument>, <argument pos:start="31:41" pos:end="31:46"><expr pos:start="31:41" pos:end="31:46"><literal type="string" pos:start="31:41" pos:end="31:46">"ipv4"</literal></expr></argument>, <argument pos:start="31:49" pos:end="31:53"><expr pos:start="31:49" pos:end="31:53"><name pos:start="31:49" pos:end="31:53">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:55"><decl pos:start="33:5" pos:end="33:54"><type pos:start="33:5" pos:end="33:8"><name pos:start="33:5" pos:end="33:8">bool</name></type> <name pos:start="33:10" pos:end="33:13">ipv6</name> <init pos:start="33:15" pos:end="33:54">= <expr pos:start="33:17" pos:end="33:54"><call pos:start="33:17" pos:end="33:54"><name pos:start="33:17" pos:end="33:33">qemu_opt_get_bool</name><argument_list pos:start="33:34" pos:end="33:54">(<argument pos:start="33:35" pos:end="33:38"><expr pos:start="33:35" pos:end="33:38"><name pos:start="33:35" pos:end="33:38">opts</name></expr></argument>, <argument pos:start="33:41" pos:end="33:46"><expr pos:start="33:41" pos:end="33:46"><literal type="string" pos:start="33:41" pos:end="33:46">"ipv6"</literal></expr></argument>, <argument pos:start="33:49" pos:end="33:53"><expr pos:start="33:49" pos:end="33:53"><name pos:start="33:49" pos:end="33:53">false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:13"><decl pos:start="35:5" pos:end="35:12"><type pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:10">size_t</name></type> <name pos:start="35:12" pos:end="35:12">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:24"><decl pos:start="37:5" pos:end="37:23"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:18">displaynum</name> <init pos:start="37:20" pos:end="37:23">= <expr pos:start="37:22" pos:end="37:23"><operator pos:start="37:22" pos:end="37:22">-</operator><literal type="number" pos:start="37:23" pos:end="37:23">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:17"><decl pos:start="39:5" pos:end="39:16"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:11">ret</name> <init pos:start="39:13" pos:end="39:16">= <expr pos:start="39:15" pos:end="39:16"><operator pos:start="39:15" pos:end="39:15">-</operator><literal type="number" pos:start="39:16" pos:end="39:16">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:21"><expr pos:start="43:5" pos:end="43:20"><operator pos:start="43:5" pos:end="43:5">*</operator><name pos:start="43:6" pos:end="43:13">retsaddr</name> <operator pos:start="43:15" pos:end="43:15">=</operator> <name pos:start="43:17" pos:end="43:20">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:19"><expr pos:start="45:5" pos:end="45:18"><operator pos:start="45:5" pos:end="45:5">*</operator><name pos:start="45:6" pos:end="45:14">retnsaddr</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:22"><expr pos:start="47:5" pos:end="47:21"><operator pos:start="47:5" pos:end="47:5">*</operator><name pos:start="47:6" pos:end="47:14">retwsaddr</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:21">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:20"><expr pos:start="49:5" pos:end="49:19"><operator pos:start="49:5" pos:end="49:5">*</operator><name pos:start="49:6" pos:end="49:15">retnwsaddr</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <literal type="number" pos:start="49:19" pos:end="49:19">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:37"><expr pos:start="53:5" pos:end="53:36"><name pos:start="53:5" pos:end="53:8">addr</name> <operator pos:start="53:10" pos:end="53:10">=</operator> <call pos:start="53:12" pos:end="53:36"><name pos:start="53:12" pos:end="53:23">qemu_opt_get</name><argument_list pos:start="53:24" pos:end="53:36">(<argument pos:start="53:25" pos:end="53:28"><expr pos:start="53:25" pos:end="53:28"><name pos:start="53:25" pos:end="53:28">opts</name></expr></argument>, <argument pos:start="53:31" pos:end="53:35"><expr pos:start="53:31" pos:end="53:35"><literal type="string" pos:start="53:31" pos:end="53:35">"vnc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:50">(<expr pos:start="55:9" pos:end="55:49"><name pos:start="55:9" pos:end="55:12">addr</name> <operator pos:start="55:14" pos:end="55:15">==</operator> <name pos:start="55:17" pos:end="55:20">NULL</name> <operator pos:start="55:22" pos:end="55:23">||</operator> <call pos:start="55:25" pos:end="55:49"><name pos:start="55:25" pos:end="55:35">g_str_equal</name><argument_list pos:start="55:36" pos:end="55:49">(<argument pos:start="55:37" pos:end="55:40"><expr pos:start="55:37" pos:end="55:40"><name pos:start="55:37" pos:end="55:40">addr</name></expr></argument>, <argument pos:start="55:43" pos:end="55:48"><expr pos:start="55:43" pos:end="55:48"><literal type="string" pos:start="55:43" pos:end="55:48">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:52" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:21">

        <expr_stmt pos:start="57:9" pos:end="57:16"><expr pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <literal type="number" pos:start="57:15" pos:end="57:15">0</literal></expr>;</expr_stmt>

        <goto pos:start="59:9" pos:end="59:21">goto <name pos:start="59:14" pos:end="59:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="73:5">if <condition pos:start="63:8" pos:end="65:54">(<expr pos:start="63:9" pos:end="65:53"><call pos:start="63:9" pos:end="63:39"><name pos:start="63:9" pos:end="63:20">qemu_opt_get</name><argument_list pos:start="63:21" pos:end="63:39">(<argument pos:start="63:22" pos:end="63:25"><expr pos:start="63:22" pos:end="63:25"><name pos:start="63:22" pos:end="63:25">opts</name></expr></argument>, <argument pos:start="63:28" pos:end="63:38"><expr pos:start="63:28" pos:end="63:38"><literal type="string" pos:start="63:28" pos:end="63:38">"websocket"</literal></expr></argument>)</argument_list></call> <operator pos:start="63:41" pos:end="63:42">&amp;&amp;</operator>

        <operator pos:start="65:9" pos:end="65:9">!</operator><call pos:start="65:10" pos:end="65:53"><name pos:start="65:10" pos:end="65:30">qcrypto_hash_supports</name><argument_list pos:start="65:31" pos:end="65:53">(<argument pos:start="65:32" pos:end="65:52"><expr pos:start="65:32" pos:end="65:52"><name pos:start="65:32" pos:end="65:52">QCRYPTO_HASH_ALG_SHA1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:56" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:21">

        <expr_stmt pos:start="67:9" pos:end="69:67"><expr pos:start="67:9" pos:end="69:66"><call pos:start="67:9" pos:end="69:66"><name pos:start="67:9" pos:end="67:18">error_setg</name><argument_list pos:start="67:19" pos:end="69:66">(<argument pos:start="67:20" pos:end="67:23"><expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">errp</name></expr></argument>,

                   <argument pos:start="69:20" pos:end="69:65"><expr pos:start="69:20" pos:end="69:65"><literal type="string" pos:start="69:20" pos:end="69:65">"SHA1 hash support is required for websockets"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:21">goto <name pos:start="71:14" pos:end="71:20">cleanup</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:47"><expr pos:start="77:5" pos:end="77:46"><call pos:start="77:5" pos:end="77:46"><name pos:start="77:5" pos:end="77:22">qemu_opt_iter_init</name><argument_list pos:start="77:23" pos:end="77:46">(<argument pos:start="77:24" pos:end="77:32"><expr pos:start="77:24" pos:end="77:32"><operator pos:start="77:24" pos:end="77:24">&amp;</operator><name pos:start="77:25" pos:end="77:32">addriter</name></expr></argument>, <argument pos:start="77:35" pos:end="77:38"><expr pos:start="77:35" pos:end="77:38"><name pos:start="77:35" pos:end="77:38">opts</name></expr></argument>, <argument pos:start="77:41" pos:end="77:45"><expr pos:start="77:41" pos:end="77:45"><literal type="string" pos:start="77:41" pos:end="77:45">"vnc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="79:5" pos:end="113:5">while <condition pos:start="79:11" pos:end="79:58">(<expr pos:start="79:12" pos:end="79:57"><operator pos:start="79:12" pos:end="79:12">(</operator><name pos:start="79:13" pos:end="79:16">addr</name> <operator pos:start="79:18" pos:end="79:18">=</operator> <call pos:start="79:20" pos:end="79:48"><name pos:start="79:20" pos:end="79:37">qemu_opt_iter_next</name><argument_list pos:start="79:38" pos:end="79:48">(<argument pos:start="79:39" pos:end="79:47"><expr pos:start="79:39" pos:end="79:47"><operator pos:start="79:39" pos:end="79:39">&amp;</operator><name pos:start="79:40" pos:end="79:47">addriter</name></expr></argument>)</argument_list></call><operator pos:start="79:49" pos:end="79:49">)</operator> <operator pos:start="79:51" pos:end="79:52">!=</operator> <name pos:start="79:54" pos:end="79:57">NULL</name></expr>)</condition> <block pos:start="79:60" pos:end="113:5">{<block_content pos:start="81:9" pos:end="111:44">

        <decl_stmt pos:start="81:9" pos:end="81:15"><decl pos:start="81:9" pos:end="81:14"><type pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">int</name></type> <name pos:start="81:13" pos:end="81:14">rv</name></decl>;</decl_stmt>

        <expr_stmt pos:start="83:9" pos:end="89:51"><expr pos:start="83:9" pos:end="89:50"><name pos:start="83:9" pos:end="83:10">rv</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <call pos:start="83:14" pos:end="89:50"><name pos:start="83:14" pos:end="83:36">vnc_display_get_address</name><argument_list pos:start="83:37" pos:end="89:50">(<argument pos:start="83:38" pos:end="83:41"><expr pos:start="83:38" pos:end="83:41"><name pos:start="83:38" pos:end="83:41">addr</name></expr></argument>, <argument pos:start="83:44" pos:end="83:48"><expr pos:start="83:44" pos:end="83:48"><name pos:start="83:44" pos:end="83:48">false</name></expr></argument>, <argument pos:start="83:51" pos:end="83:57"><expr pos:start="83:51" pos:end="83:57"><name pos:start="83:51" pos:end="83:57">reverse</name></expr></argument>, <argument pos:start="83:60" pos:end="83:60"><expr pos:start="83:60" pos:end="83:60"><literal type="number" pos:start="83:60" pos:end="83:60">0</literal></expr></argument>, <argument pos:start="83:63" pos:end="83:64"><expr pos:start="83:63" pos:end="83:64"><name pos:start="83:63" pos:end="83:64">to</name></expr></argument>,

                                     <argument pos:start="85:38" pos:end="85:45"><expr pos:start="85:38" pos:end="85:45"><name pos:start="85:38" pos:end="85:45">has_ipv4</name></expr></argument>, <argument pos:start="85:48" pos:end="85:55"><expr pos:start="85:48" pos:end="85:55"><name pos:start="85:48" pos:end="85:55">has_ipv6</name></expr></argument>,

                                     <argument pos:start="87:38" pos:end="87:41"><expr pos:start="87:38" pos:end="87:41"><name pos:start="87:38" pos:end="87:41">ipv4</name></expr></argument>, <argument pos:start="87:44" pos:end="87:47"><expr pos:start="87:44" pos:end="87:47"><name pos:start="87:44" pos:end="87:47">ipv6</name></expr></argument>,

                                     <argument pos:start="89:38" pos:end="89:43"><expr pos:start="89:38" pos:end="89:43"><operator pos:start="89:38" pos:end="89:38">&amp;</operator><name pos:start="89:39" pos:end="89:43">saddr</name></expr></argument>, <argument pos:start="89:46" pos:end="89:49"><expr pos:start="89:46" pos:end="89:49"><name pos:start="89:46" pos:end="89:49">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="95:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:19">(<expr pos:start="91:13" pos:end="91:18"><name pos:start="91:13" pos:end="91:14">rv</name> <operator pos:start="91:16" pos:end="91:16">&lt;</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr>)</condition> <block pos:start="91:21" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:25">

            <goto pos:start="93:13" pos:end="93:25">goto <name pos:start="93:18" pos:end="93:24">cleanup</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="97:9" pos:end="101:11">/* Historical compat - first listen address can be used

         * to set the default websocket port

         */</comment>

        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:29">(<expr pos:start="103:13" pos:end="103:28"><name pos:start="103:13" pos:end="103:22">displaynum</name> <operator pos:start="103:24" pos:end="103:25">==</operator> <operator pos:start="103:27" pos:end="103:27">-</operator><literal type="number" pos:start="103:28" pos:end="103:28">1</literal></expr>)</condition> <block pos:start="103:31" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:28">

            <expr_stmt pos:start="105:13" pos:end="105:28"><expr pos:start="105:13" pos:end="105:27"><name pos:start="105:13" pos:end="105:22">displaynum</name> <operator pos:start="105:24" pos:end="105:24">=</operator> <name pos:start="105:26" pos:end="105:27">rv</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:72"><expr pos:start="109:9" pos:end="109:71"><operator pos:start="109:9" pos:end="109:9">*</operator><name pos:start="109:10" pos:end="109:17">retsaddr</name> <operator pos:start="109:19" pos:end="109:19">=</operator> <call pos:start="109:21" pos:end="109:71"><name pos:start="109:21" pos:end="109:27">g_renew</name><argument_list pos:start="109:28" pos:end="109:71">(<argument pos:start="109:29" pos:end="109:43"><expr pos:start="109:29" pos:end="109:43"><name pos:start="109:29" pos:end="109:41">SocketAddress</name> <operator pos:start="109:43" pos:end="109:43">*</operator></expr></argument>, <argument pos:start="109:46" pos:end="109:54"><expr pos:start="109:46" pos:end="109:54"><operator pos:start="109:46" pos:end="109:46">*</operator><name pos:start="109:47" pos:end="109:54">retsaddr</name></expr></argument>, <argument pos:start="109:57" pos:end="109:70"><expr pos:start="109:57" pos:end="109:70"><operator pos:start="109:57" pos:end="109:57">*</operator><name pos:start="109:58" pos:end="109:66">retnsaddr</name> <operator pos:start="109:68" pos:end="109:68">+</operator> <literal type="number" pos:start="109:70" pos:end="109:70">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:44"><expr pos:start="111:9" pos:end="111:43"><operator pos:start="111:9" pos:end="111:9">(</operator><operator pos:start="111:10" pos:end="111:10">*</operator><name pos:start="111:11" pos:end="111:18">retsaddr</name><operator pos:start="111:19" pos:end="111:19">)</operator><index pos:start="111:20" pos:end="111:35">[<expr pos:start="111:21" pos:end="111:34"><operator pos:start="111:21" pos:end="111:21">(</operator><operator pos:start="111:22" pos:end="111:22">*</operator><name pos:start="111:23" pos:end="111:31">retnsaddr</name><operator pos:start="111:32" pos:end="111:32">)</operator><operator pos:start="111:33" pos:end="111:34">++</operator></expr>]</index> <operator pos:start="111:37" pos:end="111:37">=</operator> <name pos:start="111:39" pos:end="111:43">saddr</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="117:5" pos:end="119:61">/* If we had multiple primary displays, we don't do defaults

     * for websocket, and require explicit config instead. */</comment>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:23">(<expr pos:start="121:9" pos:end="121:22"><operator pos:start="121:9" pos:end="121:9">*</operator><name pos:start="121:10" pos:end="121:18">retnsaddr</name> <operator pos:start="121:20" pos:end="121:20">&gt;</operator> <literal type="number" pos:start="121:22" pos:end="121:22">1</literal></expr>)</condition> <block pos:start="121:25" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:24">

        <expr_stmt pos:start="123:9" pos:end="123:24"><expr pos:start="123:9" pos:end="123:23"><name pos:start="123:9" pos:end="123:18">displaynum</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <operator pos:start="123:22" pos:end="123:22">-</operator><literal type="number" pos:start="123:23" pos:end="123:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:53"><expr pos:start="129:5" pos:end="129:52"><call pos:start="129:5" pos:end="129:52"><name pos:start="129:5" pos:end="129:22">qemu_opt_iter_init</name><argument_list pos:start="129:23" pos:end="129:52">(<argument pos:start="129:24" pos:end="129:32"><expr pos:start="129:24" pos:end="129:32"><operator pos:start="129:24" pos:end="129:24">&amp;</operator><name pos:start="129:25" pos:end="129:32">addriter</name></expr></argument>, <argument pos:start="129:35" pos:end="129:38"><expr pos:start="129:35" pos:end="129:38"><name pos:start="129:35" pos:end="129:38">opts</name></expr></argument>, <argument pos:start="129:41" pos:end="129:51"><expr pos:start="129:41" pos:end="129:51"><literal type="string" pos:start="129:41" pos:end="129:51">"websocket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="131:5" pos:end="179:5">while <condition pos:start="131:11" pos:end="131:58">(<expr pos:start="131:12" pos:end="131:57"><operator pos:start="131:12" pos:end="131:12">(</operator><name pos:start="131:13" pos:end="131:16">addr</name> <operator pos:start="131:18" pos:end="131:18">=</operator> <call pos:start="131:20" pos:end="131:48"><name pos:start="131:20" pos:end="131:37">qemu_opt_iter_next</name><argument_list pos:start="131:38" pos:end="131:48">(<argument pos:start="131:39" pos:end="131:47"><expr pos:start="131:39" pos:end="131:47"><operator pos:start="131:39" pos:end="131:39">&amp;</operator><name pos:start="131:40" pos:end="131:47">addriter</name></expr></argument>)</argument_list></call><operator pos:start="131:49" pos:end="131:49">)</operator> <operator pos:start="131:51" pos:end="131:52">!=</operator> <name pos:start="131:54" pos:end="131:57">NULL</name></expr>)</condition> <block pos:start="131:60" pos:end="179:5">{<block_content pos:start="133:9" pos:end="177:47">

        <if_stmt pos:start="133:9" pos:end="143:9"><if pos:start="133:9" pos:end="143:9">if <condition pos:start="133:12" pos:end="139:55">(<expr pos:start="133:13" pos:end="139:54"><call pos:start="133:13" pos:end="139:50"><name pos:start="133:13" pos:end="133:35">vnc_display_get_address</name><argument_list pos:start="133:36" pos:end="139:50">(<argument pos:start="133:37" pos:end="133:40"><expr pos:start="133:37" pos:end="133:40"><name pos:start="133:37" pos:end="133:40">addr</name></expr></argument>, <argument pos:start="133:43" pos:end="133:46"><expr pos:start="133:43" pos:end="133:46"><name pos:start="133:43" pos:end="133:46">true</name></expr></argument>, <argument pos:start="133:49" pos:end="133:55"><expr pos:start="133:49" pos:end="133:55"><name pos:start="133:49" pos:end="133:55">reverse</name></expr></argument>, <argument pos:start="133:58" pos:end="133:67"><expr pos:start="133:58" pos:end="133:67"><name pos:start="133:58" pos:end="133:67">displaynum</name></expr></argument>, <argument pos:start="133:70" pos:end="133:71"><expr pos:start="133:70" pos:end="133:71"><name pos:start="133:70" pos:end="133:71">to</name></expr></argument>,

                                    <argument pos:start="135:37" pos:end="135:44"><expr pos:start="135:37" pos:end="135:44"><name pos:start="135:37" pos:end="135:44">has_ipv4</name></expr></argument>, <argument pos:start="135:47" pos:end="135:54"><expr pos:start="135:47" pos:end="135:54"><name pos:start="135:47" pos:end="135:54">has_ipv6</name></expr></argument>,

                                    <argument pos:start="137:37" pos:end="137:40"><expr pos:start="137:37" pos:end="137:40"><name pos:start="137:37" pos:end="137:40">ipv4</name></expr></argument>, <argument pos:start="137:43" pos:end="137:46"><expr pos:start="137:43" pos:end="137:46"><name pos:start="137:43" pos:end="137:46">ipv6</name></expr></argument>,

                                    <argument pos:start="139:37" pos:end="139:43"><expr pos:start="139:37" pos:end="139:43"><operator pos:start="139:37" pos:end="139:37">&amp;</operator><name pos:start="139:38" pos:end="139:43">wsaddr</name></expr></argument>, <argument pos:start="139:46" pos:end="139:49"><expr pos:start="139:46" pos:end="139:49"><name pos:start="139:46" pos:end="139:49">errp</name></expr></argument>)</argument_list></call> <operator pos:start="139:52" pos:end="139:52">&lt;</operator> <literal type="number" pos:start="139:54" pos:end="139:54">0</literal></expr>)</condition> <block pos:start="139:57" pos:end="143:9">{<block_content pos:start="141:13" pos:end="141:25">

            <goto pos:start="141:13" pos:end="141:25">goto <name pos:start="141:18" pos:end="141:24">cleanup</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="147:9" pos:end="153:11">/* Historical compat - if only a single listen address was

         * provided, then this is used to set the default listen

         * address for websocket too

         */</comment>

        <if_stmt pos:start="155:9" pos:end="171:9"><if pos:start="155:9" pos:end="171:9">if <condition pos:start="155:12" pos:end="163:64">(<expr pos:start="155:13" pos:end="163:63"><operator pos:start="155:13" pos:end="155:13">*</operator><name pos:start="155:14" pos:end="155:22">retnsaddr</name> <operator pos:start="155:24" pos:end="155:25">==</operator> <literal type="number" pos:start="155:27" pos:end="155:27">1</literal> <operator pos:start="155:29" pos:end="155:30">&amp;&amp;</operator>

            <operator pos:start="157:13" pos:end="157:13">(</operator><operator pos:start="157:14" pos:end="157:14">*</operator><name pos:start="157:15" pos:end="157:22">retsaddr</name><operator pos:start="157:23" pos:end="157:23">)</operator><index pos:start="157:24" pos:end="157:26">[<expr pos:start="157:25" pos:end="157:25"><literal type="number" pos:start="157:25" pos:end="157:25">0</literal></expr>]</index><operator pos:start="157:27" pos:end="157:28">-&gt;</operator><name pos:start="157:29" pos:end="157:32">type</name> <operator pos:start="157:34" pos:end="157:35">==</operator> <name pos:start="157:37" pos:end="157:60">SOCKET_ADDRESS_KIND_INET</name> <operator pos:start="157:62" pos:end="157:63">&amp;&amp;</operator>

            <name pos:start="159:13" pos:end="159:24"><name pos:start="159:13" pos:end="159:18">wsaddr</name><operator pos:start="159:19" pos:end="159:20">-&gt;</operator><name pos:start="159:21" pos:end="159:24">type</name></name> <operator pos:start="159:26" pos:end="159:27">==</operator> <name pos:start="159:29" pos:end="159:52">SOCKET_ADDRESS_KIND_INET</name> <operator pos:start="159:54" pos:end="159:55">&amp;&amp;</operator>

            <call pos:start="161:13" pos:end="161:54"><name pos:start="161:13" pos:end="161:23">g_str_equal</name><argument_list pos:start="161:24" pos:end="161:54">(<argument pos:start="161:25" pos:end="161:49"><expr pos:start="161:25" pos:end="161:49"><name pos:start="161:25" pos:end="161:49"><name pos:start="161:25" pos:end="161:30">wsaddr</name><operator pos:start="161:31" pos:end="161:32">-&gt;</operator><name pos:start="161:33" pos:end="161:33">u</name><operator pos:start="161:34" pos:end="161:34">.</operator><name pos:start="161:35" pos:end="161:38">inet</name><operator pos:start="161:39" pos:end="161:39">.</operator><name pos:start="161:40" pos:end="161:43">data</name><operator pos:start="161:44" pos:end="161:45">-&gt;</operator><name pos:start="161:46" pos:end="161:49">host</name></name></expr></argument>, <argument pos:start="161:52" pos:end="161:53"><expr pos:start="161:52" pos:end="161:53"><literal type="string" pos:start="161:52" pos:end="161:53">""</literal></expr></argument>)</argument_list></call> <operator pos:start="161:56" pos:end="161:57">&amp;&amp;</operator>

            <operator pos:start="163:13" pos:end="163:13">!</operator><call pos:start="163:14" pos:end="163:63"><name pos:start="163:14" pos:end="163:24">g_str_equal</name><argument_list pos:start="163:25" pos:end="163:63">(<argument pos:start="163:26" pos:end="163:58"><expr pos:start="163:26" pos:end="163:58"><operator pos:start="163:26" pos:end="163:26">(</operator><operator pos:start="163:27" pos:end="163:27">*</operator><name pos:start="163:28" pos:end="163:35">retsaddr</name><operator pos:start="163:36" pos:end="163:36">)</operator><index pos:start="163:37" pos:end="163:39">[<expr pos:start="163:38" pos:end="163:38"><literal type="number" pos:start="163:38" pos:end="163:38">0</literal></expr>]</index><operator pos:start="163:40" pos:end="163:41">-&gt;</operator><name pos:start="163:42" pos:end="163:58"><name pos:start="163:42" pos:end="163:42">u</name><operator pos:start="163:43" pos:end="163:43">.</operator><name pos:start="163:44" pos:end="163:47">inet</name><operator pos:start="163:48" pos:end="163:48">.</operator><name pos:start="163:49" pos:end="163:52">data</name><operator pos:start="163:53" pos:end="163:54">-&gt;</operator><name pos:start="163:55" pos:end="163:58">host</name></name></expr></argument>, <argument pos:start="163:61" pos:end="163:62"><expr pos:start="163:61" pos:end="163:62"><literal type="string" pos:start="163:61" pos:end="163:62">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="163:66" pos:end="171:9">{<block_content pos:start="165:13" pos:end="169:60">

            <expr_stmt pos:start="165:13" pos:end="165:46"><expr pos:start="165:13" pos:end="165:45"><call pos:start="165:13" pos:end="165:45"><name pos:start="165:13" pos:end="165:18">g_free</name><argument_list pos:start="165:19" pos:end="165:45">(<argument pos:start="165:20" pos:end="165:44"><expr pos:start="165:20" pos:end="165:44"><name pos:start="165:20" pos:end="165:44"><name pos:start="165:20" pos:end="165:25">wsaddr</name><operator pos:start="165:26" pos:end="165:27">-&gt;</operator><name pos:start="165:28" pos:end="165:28">u</name><operator pos:start="165:29" pos:end="165:29">.</operator><name pos:start="165:30" pos:end="165:33">inet</name><operator pos:start="165:34" pos:end="165:34">.</operator><name pos:start="165:35" pos:end="165:38">data</name><operator pos:start="165:39" pos:end="165:40">-&gt;</operator><name pos:start="165:41" pos:end="165:44">host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="169:60"><expr pos:start="167:13" pos:end="169:59"><name pos:start="167:13" pos:end="167:37"><name pos:start="167:13" pos:end="167:18">wsaddr</name><operator pos:start="167:19" pos:end="167:20">-&gt;</operator><name pos:start="167:21" pos:end="167:21">u</name><operator pos:start="167:22" pos:end="167:22">.</operator><name pos:start="167:23" pos:end="167:26">inet</name><operator pos:start="167:27" pos:end="167:27">.</operator><name pos:start="167:28" pos:end="167:31">data</name><operator pos:start="167:32" pos:end="167:33">-&gt;</operator><name pos:start="167:34" pos:end="167:37">host</name></name> <operator pos:start="167:39" pos:end="167:39">=</operator>

                <call pos:start="169:17" pos:end="169:59"><name pos:start="169:17" pos:end="169:24">g_strdup</name><argument_list pos:start="169:25" pos:end="169:59">(<argument pos:start="169:26" pos:end="169:58"><expr pos:start="169:26" pos:end="169:58"><operator pos:start="169:26" pos:end="169:26">(</operator><operator pos:start="169:27" pos:end="169:27">*</operator><name pos:start="169:28" pos:end="169:35">retsaddr</name><operator pos:start="169:36" pos:end="169:36">)</operator><index pos:start="169:37" pos:end="169:39">[<expr pos:start="169:38" pos:end="169:38"><literal type="number" pos:start="169:38" pos:end="169:38">0</literal></expr>]</index><operator pos:start="169:40" pos:end="169:41">-&gt;</operator><name pos:start="169:42" pos:end="169:58"><name pos:start="169:42" pos:end="169:42">u</name><operator pos:start="169:43" pos:end="169:43">.</operator><name pos:start="169:44" pos:end="169:47">inet</name><operator pos:start="169:48" pos:end="169:48">.</operator><name pos:start="169:49" pos:end="169:52">data</name><operator pos:start="169:53" pos:end="169:54">-&gt;</operator><name pos:start="169:55" pos:end="169:58">host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:75"><expr pos:start="175:9" pos:end="175:74"><operator pos:start="175:9" pos:end="175:9">*</operator><name pos:start="175:10" pos:end="175:18">retwsaddr</name> <operator pos:start="175:20" pos:end="175:20">=</operator> <call pos:start="175:22" pos:end="175:74"><name pos:start="175:22" pos:end="175:28">g_renew</name><argument_list pos:start="175:29" pos:end="175:74">(<argument pos:start="175:30" pos:end="175:44"><expr pos:start="175:30" pos:end="175:44"><name pos:start="175:30" pos:end="175:42">SocketAddress</name> <operator pos:start="175:44" pos:end="175:44">*</operator></expr></argument>, <argument pos:start="175:47" pos:end="175:56"><expr pos:start="175:47" pos:end="175:56"><operator pos:start="175:47" pos:end="175:47">*</operator><name pos:start="175:48" pos:end="175:56">retwsaddr</name></expr></argument>, <argument pos:start="175:59" pos:end="175:73"><expr pos:start="175:59" pos:end="175:73"><operator pos:start="175:59" pos:end="175:59">*</operator><name pos:start="175:60" pos:end="175:69">retnwsaddr</name> <operator pos:start="175:71" pos:end="175:71">+</operator> <literal type="number" pos:start="175:73" pos:end="175:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:47"><expr pos:start="177:9" pos:end="177:46"><operator pos:start="177:9" pos:end="177:9">(</operator><operator pos:start="177:10" pos:end="177:10">*</operator><name pos:start="177:11" pos:end="177:19">retwsaddr</name><operator pos:start="177:20" pos:end="177:20">)</operator><index pos:start="177:21" pos:end="177:37">[<expr pos:start="177:22" pos:end="177:36"><operator pos:start="177:22" pos:end="177:22">(</operator><operator pos:start="177:23" pos:end="177:23">*</operator><name pos:start="177:24" pos:end="177:33">retnwsaddr</name><operator pos:start="177:34" pos:end="177:34">)</operator><operator pos:start="177:35" pos:end="177:36">++</operator></expr>]</index> <operator pos:start="177:39" pos:end="177:39">=</operator> <name pos:start="177:41" pos:end="177:46">wsaddr</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="183:5" pos:end="183:12"><expr pos:start="183:5" pos:end="183:11"><name pos:start="183:5" pos:end="183:7">ret</name> <operator pos:start="183:9" pos:end="183:9">=</operator> <literal type="number" pos:start="183:11" pos:end="183:11">0</literal></expr>;</expr_stmt>

 <label pos:start="185:2" pos:end="185:9"><name pos:start="185:2" pos:end="185:8">cleanup</name>:</label>

    <if_stmt pos:start="187:5" pos:end="209:5"><if pos:start="187:5" pos:end="209:5">if <condition pos:start="187:8" pos:end="187:16">(<expr pos:start="187:9" pos:end="187:15"><name pos:start="187:9" pos:end="187:11">ret</name> <operator pos:start="187:13" pos:end="187:13">&lt;</operator> <literal type="number" pos:start="187:15" pos:end="187:15">0</literal></expr>)</condition> <block pos:start="187:18" pos:end="209:5">{<block_content pos:start="189:9" pos:end="207:37">

        <for pos:start="189:9" pos:end="193:9">for <control pos:start="189:13" pos:end="189:40">(<init pos:start="189:14" pos:end="189:19"><expr pos:start="189:14" pos:end="189:18"><name pos:start="189:14" pos:end="189:14">i</name> <operator pos:start="189:16" pos:end="189:16">=</operator> <literal type="number" pos:start="189:18" pos:end="189:18">0</literal></expr>;</init> <condition pos:start="189:21" pos:end="189:35"><expr pos:start="189:21" pos:end="189:34"><name pos:start="189:21" pos:end="189:21">i</name> <operator pos:start="189:23" pos:end="189:23">&lt;</operator> <operator pos:start="189:25" pos:end="189:25">*</operator><name pos:start="189:26" pos:end="189:34">retnsaddr</name></expr>;</condition> <incr pos:start="189:37" pos:end="189:39"><expr pos:start="189:37" pos:end="189:39"><name pos:start="189:37" pos:end="189:37">i</name><operator pos:start="189:38" pos:end="189:39">++</operator></expr></incr>)</control> <block pos:start="189:42" pos:end="193:9">{<block_content pos:start="191:13" pos:end="191:52">

            <expr_stmt pos:start="191:13" pos:end="191:52"><expr pos:start="191:13" pos:end="191:51"><call pos:start="191:13" pos:end="191:51"><name pos:start="191:13" pos:end="191:35">qapi_free_SocketAddress</name><argument_list pos:start="191:36" pos:end="191:51">(<argument pos:start="191:37" pos:end="191:50"><expr pos:start="191:37" pos:end="191:50"><operator pos:start="191:37" pos:end="191:37">(</operator><operator pos:start="191:38" pos:end="191:38">*</operator><name pos:start="191:39" pos:end="191:46">retsaddr</name><operator pos:start="191:47" pos:end="191:47">)</operator><index pos:start="191:48" pos:end="191:50">[<expr pos:start="191:49" pos:end="191:49"><name pos:start="191:49" pos:end="191:49">i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="195:9" pos:end="195:26"><expr pos:start="195:9" pos:end="195:25"><call pos:start="195:9" pos:end="195:25"><name pos:start="195:9" pos:end="195:14">g_free</name><argument_list pos:start="195:15" pos:end="195:25">(<argument pos:start="195:16" pos:end="195:24"><expr pos:start="195:16" pos:end="195:24"><operator pos:start="195:16" pos:end="195:16">*</operator><name pos:start="195:17" pos:end="195:24">retsaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="197:9" pos:end="201:9">for <control pos:start="197:13" pos:end="197:41">(<init pos:start="197:14" pos:end="197:19"><expr pos:start="197:14" pos:end="197:18"><name pos:start="197:14" pos:end="197:14">i</name> <operator pos:start="197:16" pos:end="197:16">=</operator> <literal type="number" pos:start="197:18" pos:end="197:18">0</literal></expr>;</init> <condition pos:start="197:21" pos:end="197:36"><expr pos:start="197:21" pos:end="197:35"><name pos:start="197:21" pos:end="197:21">i</name> <operator pos:start="197:23" pos:end="197:23">&lt;</operator> <operator pos:start="197:25" pos:end="197:25">*</operator><name pos:start="197:26" pos:end="197:35">retnwsaddr</name></expr>;</condition> <incr pos:start="197:38" pos:end="197:40"><expr pos:start="197:38" pos:end="197:40"><name pos:start="197:38" pos:end="197:38">i</name><operator pos:start="197:39" pos:end="197:40">++</operator></expr></incr>)</control> <block pos:start="197:43" pos:end="201:9">{<block_content pos:start="199:13" pos:end="199:53">

            <expr_stmt pos:start="199:13" pos:end="199:53"><expr pos:start="199:13" pos:end="199:52"><call pos:start="199:13" pos:end="199:52"><name pos:start="199:13" pos:end="199:35">qapi_free_SocketAddress</name><argument_list pos:start="199:36" pos:end="199:52">(<argument pos:start="199:37" pos:end="199:51"><expr pos:start="199:37" pos:end="199:51"><operator pos:start="199:37" pos:end="199:37">(</operator><operator pos:start="199:38" pos:end="199:38">*</operator><name pos:start="199:39" pos:end="199:47">retwsaddr</name><operator pos:start="199:48" pos:end="199:48">)</operator><index pos:start="199:49" pos:end="199:51">[<expr pos:start="199:50" pos:end="199:50"><name pos:start="199:50" pos:end="199:50">i</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="203:9" pos:end="203:27"><expr pos:start="203:9" pos:end="203:26"><call pos:start="203:9" pos:end="203:26"><name pos:start="203:9" pos:end="203:14">g_free</name><argument_list pos:start="203:15" pos:end="203:26">(<argument pos:start="203:16" pos:end="203:25"><expr pos:start="203:16" pos:end="203:25"><operator pos:start="203:16" pos:end="203:16">*</operator><name pos:start="203:17" pos:end="203:25">retwsaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:38"><expr pos:start="205:9" pos:end="205:37"><operator pos:start="205:9" pos:end="205:9">*</operator><name pos:start="205:10" pos:end="205:17">retsaddr</name> <operator pos:start="205:19" pos:end="205:19">=</operator> <operator pos:start="205:21" pos:end="205:21">*</operator><name pos:start="205:22" pos:end="205:30">retwsaddr</name> <operator pos:start="205:32" pos:end="205:32">=</operator> <name pos:start="205:34" pos:end="205:37">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:37"><expr pos:start="207:9" pos:end="207:36"><operator pos:start="207:9" pos:end="207:9">*</operator><name pos:start="207:10" pos:end="207:18">retnsaddr</name> <operator pos:start="207:20" pos:end="207:20">=</operator> <operator pos:start="207:22" pos:end="207:22">*</operator><name pos:start="207:23" pos:end="207:32">retnwsaddr</name> <operator pos:start="207:34" pos:end="207:34">=</operator> <literal type="number" pos:start="207:36" pos:end="207:36">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="211:5" pos:end="211:15">return <expr pos:start="211:12" pos:end="211:14"><name pos:start="211:12" pos:end="211:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
