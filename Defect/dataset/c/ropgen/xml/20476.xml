<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20476.c" pos:tabs="8"><function pos:start="1:1" pos:end="185:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:22">GuestPCIAddress</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:36">get_pci_info</name><parameter_list pos:start="1:37" pos:end="1:62">(<parameter pos:start="1:38" pos:end="1:47"><decl pos:start="1:38" pos:end="1:47"><type pos:start="1:38" pos:end="1:47"><name pos:start="1:38" pos:end="1:41">char</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">guid</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:61"><decl pos:start="1:50" pos:end="1:61"><type pos:start="1:50" pos:end="1:61"><name pos:start="1:50" pos:end="1:54">Error</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier><modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="185:1">{<block_content pos:start="5:5" pos:end="183:15">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">HDEVINFO</name></type> <name pos:start="5:14" pos:end="5:21">dev_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:19">SP_DEVINFO_DATA</name></type> <name pos:start="7:21" pos:end="7:33">dev_info_data</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:9">DWORD</name></type> <name pos:start="9:11" pos:end="9:14">size</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:27"><name pos:start="13:10" pos:end="13:17">dev_name</name><index pos:start="13:18" pos:end="13:27">[<expr pos:start="13:19" pos:end="13:26"><name pos:start="13:19" pos:end="13:26">MAX_PATH</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:16">buffer</name> <init pos:start="15:18" pos:end="15:23">= <expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:19">GuestPCIAddress</name> <modifier pos:start="17:21" pos:end="17:21">*</modifier></type><name pos:start="17:22" pos:end="17:24">pci</name> <init pos:start="17:26" pos:end="17:31">= <expr pos:start="17:28" pos:end="17:31"><name pos:start="17:28" pos:end="17:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">char</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:14">name</name> <init pos:start="19:16" pos:end="19:35">= <expr pos:start="19:18" pos:end="19:35"><call pos:start="19:18" pos:end="19:35"><name pos:start="19:18" pos:end="19:25">g_strdup</name><argument_list pos:start="19:26" pos:end="19:35">(<argument pos:start="19:27" pos:end="19:34"><expr pos:start="19:27" pos:end="19:34"><operator pos:start="19:27" pos:end="19:27">&amp;</operator><name pos:start="19:28" pos:end="19:34"><name pos:start="19:28" pos:end="19:31">guid</name><index pos:start="19:32" pos:end="19:34">[<expr pos:start="19:33" pos:end="19:33"><literal type="number" pos:start="19:33" pos:end="19:33">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:62">(<expr pos:start="23:9" pos:end="23:61"><operator pos:start="23:9" pos:end="23:9">!</operator><call pos:start="23:10" pos:end="23:61"><name pos:start="23:10" pos:end="23:23">QueryDosDevice</name><argument_list pos:start="23:24" pos:end="23:61">(<argument pos:start="23:25" pos:end="23:28"><expr pos:start="23:25" pos:end="23:28"><name pos:start="23:25" pos:end="23:28">name</name></expr></argument>, <argument pos:start="23:31" pos:end="23:38"><expr pos:start="23:31" pos:end="23:38"><name pos:start="23:31" pos:end="23:38">dev_name</name></expr></argument>, <argument pos:start="23:41" pos:end="23:60"><expr pos:start="23:41" pos:end="23:60"><call pos:start="23:41" pos:end="23:60"><name pos:start="23:41" pos:end="23:50">ARRAY_SIZE</name><argument_list pos:start="23:51" pos:end="23:60">(<argument pos:start="23:52" pos:end="23:59"><expr pos:start="23:52" pos:end="23:59"><name pos:start="23:52" pos:end="23:59">dev_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:64" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:17">

        <expr_stmt pos:start="25:9" pos:end="25:80"><expr pos:start="25:9" pos:end="25:79"><call pos:start="25:9" pos:end="25:79"><name pos:start="25:9" pos:end="25:24">error_setg_win32</name><argument_list pos:start="25:25" pos:end="25:79">(<argument pos:start="25:26" pos:end="25:29"><expr pos:start="25:26" pos:end="25:29"><name pos:start="25:26" pos:end="25:29">errp</name></expr></argument>, <argument pos:start="25:32" pos:end="25:45"><expr pos:start="25:32" pos:end="25:45"><call pos:start="25:32" pos:end="25:45"><name pos:start="25:32" pos:end="25:43">GetLastError</name><argument_list pos:start="25:44" pos:end="25:45">()</argument_list></call></expr></argument>, <argument pos:start="25:48" pos:end="25:78"><expr pos:start="25:48" pos:end="25:78"><literal type="string" pos:start="25:48" pos:end="25:78">"failed to get dos device name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="27:9" pos:end="27:17">goto <name pos:start="27:14" pos:end="27:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="35:74"><expr pos:start="33:5" pos:end="35:73"><name pos:start="33:5" pos:end="33:12">dev_info</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <call pos:start="33:16" pos:end="35:73"><name pos:start="33:16" pos:end="33:34">SetupDiGetClassDevs</name><argument_list pos:start="33:35" pos:end="35:73">(<argument pos:start="33:36" pos:end="33:60"><expr pos:start="33:36" pos:end="33:60"><operator pos:start="33:36" pos:end="33:36">&amp;</operator><name pos:start="33:37" pos:end="33:60">GUID_DEVINTERFACE_VOLUME</name></expr></argument>, <argument pos:start="33:63" pos:end="33:63"><expr pos:start="33:63" pos:end="33:63"><literal type="number" pos:start="33:63" pos:end="33:63">0</literal></expr></argument>, <argument pos:start="33:66" pos:end="33:66"><expr pos:start="33:66" pos:end="33:66"><literal type="number" pos:start="33:66" pos:end="33:66">0</literal></expr></argument>,

                                   <argument pos:start="35:36" pos:end="35:72"><expr pos:start="35:36" pos:end="35:72"><name pos:start="35:36" pos:end="35:48">DIGCF_PRESENT</name> <operator pos:start="35:50" pos:end="35:50">|</operator> <name pos:start="35:52" pos:end="35:72">DIGCF_DEVICEINTERFACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:41">(<expr pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:16">dev_info</name> <operator pos:start="37:18" pos:end="37:19">==</operator> <name pos:start="37:21" pos:end="37:40">INVALID_HANDLE_VALUE</name></expr>)</condition> <block pos:start="37:43" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:17">

        <expr_stmt pos:start="39:9" pos:end="39:77"><expr pos:start="39:9" pos:end="39:76"><call pos:start="39:9" pos:end="39:76"><name pos:start="39:9" pos:end="39:24">error_setg_win32</name><argument_list pos:start="39:25" pos:end="39:76">(<argument pos:start="39:26" pos:end="39:29"><expr pos:start="39:26" pos:end="39:29"><name pos:start="39:26" pos:end="39:29">errp</name></expr></argument>, <argument pos:start="39:32" pos:end="39:45"><expr pos:start="39:32" pos:end="39:45"><call pos:start="39:32" pos:end="39:45"><name pos:start="39:32" pos:end="39:43">GetLastError</name><argument_list pos:start="39:44" pos:end="39:45">()</argument_list></call></expr></argument>, <argument pos:start="39:48" pos:end="39:75"><expr pos:start="39:48" pos:end="39:75"><literal type="string" pos:start="39:48" pos:end="39:75">"failed to get devices tree"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:51"><expr pos:start="47:5" pos:end="47:50"><name pos:start="47:5" pos:end="47:24"><name pos:start="47:5" pos:end="47:17">dev_info_data</name><operator pos:start="47:18" pos:end="47:18">.</operator><name pos:start="47:19" pos:end="47:24">cbSize</name></name> <operator pos:start="47:26" pos:end="47:26">=</operator> <sizeof pos:start="47:28" pos:end="47:50">sizeof<argument_list pos:start="47:34" pos:end="47:50">(<argument pos:start="47:35" pos:end="47:49"><expr pos:start="47:35" pos:end="47:49"><name pos:start="47:35" pos:end="47:49">SP_DEVINFO_DATA</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <for pos:start="49:5" pos:end="175:5">for <control pos:start="49:9" pos:end="49:72">(<init pos:start="49:10" pos:end="49:15"><expr pos:start="49:10" pos:end="49:14"><name pos:start="49:10" pos:end="49:10">i</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <literal type="number" pos:start="49:14" pos:end="49:14">0</literal></expr>;</init> <condition pos:start="49:17" pos:end="49:67"><expr pos:start="49:17" pos:end="49:66"><call pos:start="49:17" pos:end="49:66"><name pos:start="49:17" pos:end="49:37">SetupDiEnumDeviceInfo</name><argument_list pos:start="49:38" pos:end="49:66">(<argument pos:start="49:39" pos:end="49:46"><expr pos:start="49:39" pos:end="49:46"><name pos:start="49:39" pos:end="49:46">dev_info</name></expr></argument>, <argument pos:start="49:49" pos:end="49:49"><expr pos:start="49:49" pos:end="49:49"><name pos:start="49:49" pos:end="49:49">i</name></expr></argument>, <argument pos:start="49:52" pos:end="49:65"><expr pos:start="49:52" pos:end="49:65"><operator pos:start="49:52" pos:end="49:52">&amp;</operator><name pos:start="49:53" pos:end="49:65">dev_info_data</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="49:69" pos:end="49:71"><expr pos:start="49:69" pos:end="49:71"><name pos:start="49:69" pos:end="49:69">i</name><operator pos:start="49:70" pos:end="49:71">++</operator></expr></incr>)</control> <block pos:start="49:74" pos:end="175:5">{<block_content pos:start="51:9" pos:end="173:14">

        <decl_stmt pos:start="51:9" pos:end="51:54"><decl pos:start="51:9" pos:end="51:18"><type pos:start="51:9" pos:end="51:13"><name pos:start="51:9" pos:end="51:13">DWORD</name></type> <name pos:start="51:15" pos:end="51:18">addr</name></decl>, <decl pos:start="51:21" pos:end="51:23"><type ref="prev" pos:start="51:9" pos:end="51:13"/><name pos:start="51:21" pos:end="51:23">bus</name></decl>, <decl pos:start="51:26" pos:end="51:29"><type ref="prev" pos:start="51:9" pos:end="51:13"/><name pos:start="51:26" pos:end="51:29">slot</name></decl>, <decl pos:start="51:32" pos:end="51:35"><type ref="prev" pos:start="51:9" pos:end="51:13"/><name pos:start="51:32" pos:end="51:35">func</name></decl>, <decl pos:start="51:38" pos:end="51:40"><type ref="prev" pos:start="51:9" pos:end="51:13"/><name pos:start="51:38" pos:end="51:40">dev</name></decl>, <decl pos:start="51:43" pos:end="51:46"><type ref="prev" pos:start="51:9" pos:end="51:13"/><name pos:start="51:43" pos:end="51:46">data</name></decl>, <decl pos:start="51:49" pos:end="51:53"><type ref="prev" pos:start="51:9" pos:end="51:13"/><name pos:start="51:49" pos:end="51:53">size2</name></decl>;</decl_stmt>

        <while pos:start="53:9" pos:end="85:9">while <condition pos:start="53:15" pos:end="59:52">(<expr pos:start="53:16" pos:end="59:51"><operator pos:start="53:16" pos:end="53:16">!</operator><call pos:start="53:17" pos:end="59:51"><name pos:start="53:17" pos:end="53:48">SetupDiGetDeviceRegistryProperty</name><argument_list pos:start="53:49" pos:end="59:51">(<argument pos:start="53:50" pos:end="53:57"><expr pos:start="53:50" pos:end="53:57"><name pos:start="53:50" pos:end="53:57">dev_info</name></expr></argument>, <argument pos:start="53:60" pos:end="53:73"><expr pos:start="53:60" pos:end="53:73"><operator pos:start="53:60" pos:end="53:60">&amp;</operator><name pos:start="53:61" pos:end="53:73">dev_info_data</name></expr></argument>,

                                            <argument pos:start="55:45" pos:end="55:77"><expr pos:start="55:45" pos:end="55:77"><name pos:start="55:45" pos:end="55:77">SPDRP_PHYSICAL_DEVICE_OBJECT_NAME</name></expr></argument>,

                                            <argument pos:start="57:45" pos:end="57:49"><expr pos:start="57:45" pos:end="57:49"><operator pos:start="57:45" pos:end="57:45">&amp;</operator><name pos:start="57:46" pos:end="57:49">data</name></expr></argument>, <argument pos:start="57:52" pos:end="57:64"><expr pos:start="57:52" pos:end="57:64"><operator pos:start="57:52" pos:end="57:52">(</operator><name pos:start="57:53" pos:end="57:57">PBYTE</name><operator pos:start="57:58" pos:end="57:58">)</operator><name pos:start="57:59" pos:end="57:64">buffer</name></expr></argument>, <argument pos:start="57:67" pos:end="57:70"><expr pos:start="57:67" pos:end="57:70"><name pos:start="57:67" pos:end="57:70">size</name></expr></argument>,

                                            <argument pos:start="59:45" pos:end="59:50"><expr pos:start="59:45" pos:end="59:50"><operator pos:start="59:45" pos:end="59:45">&amp;</operator><name pos:start="59:46" pos:end="59:50">size2</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:54" pos:end="85:9">{<block_content pos:start="61:13" pos:end="83:13">

            <expr_stmt pos:start="61:13" pos:end="61:36"><expr pos:start="61:13" pos:end="61:35"><name pos:start="61:13" pos:end="61:16">size</name> <operator pos:start="61:18" pos:end="61:18">=</operator> <call pos:start="61:20" pos:end="61:35"><name pos:start="61:20" pos:end="61:22">MAX</name><argument_list pos:start="61:23" pos:end="61:35">(<argument pos:start="61:24" pos:end="61:27"><expr pos:start="61:24" pos:end="61:27"><name pos:start="61:24" pos:end="61:27">size</name></expr></argument>, <argument pos:start="61:30" pos:end="61:34"><expr pos:start="61:30" pos:end="61:34"><name pos:start="61:30" pos:end="61:34">size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="83:13"><if pos:start="63:13" pos:end="75:13">if <condition pos:start="63:16" pos:end="63:60">(<expr pos:start="63:17" pos:end="63:59"><call pos:start="63:17" pos:end="63:30"><name pos:start="63:17" pos:end="63:28">GetLastError</name><argument_list pos:start="63:29" pos:end="63:30">()</argument_list></call> <operator pos:start="63:32" pos:end="63:33">==</operator> <name pos:start="63:35" pos:end="63:59">ERROR_INSUFFICIENT_BUFFER</name></expr>)</condition> <block pos:start="63:62" pos:end="75:13">{<block_content pos:start="65:17" pos:end="73:44">

                <expr_stmt pos:start="65:17" pos:end="65:31"><expr pos:start="65:17" pos:end="65:30"><call pos:start="65:17" pos:end="65:30"><name pos:start="65:17" pos:end="65:22">g_free</name><argument_list pos:start="65:23" pos:end="65:30">(<argument pos:start="65:24" pos:end="65:29"><expr pos:start="65:24" pos:end="65:29"><name pos:start="65:24" pos:end="65:29">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="67:17" pos:end="71:67">/* Double the size to avoid problems on

                 * W2k MBCS systems per KB 888609.

                 * https://support.microsoft.com/en-us/kb/259695 */</comment>

                <expr_stmt pos:start="73:17" pos:end="73:44"><expr pos:start="73:17" pos:end="73:43"><name pos:start="73:17" pos:end="73:22">buffer</name> <operator pos:start="73:24" pos:end="73:24">=</operator> <call pos:start="73:26" pos:end="73:43"><name pos:start="73:26" pos:end="73:33">g_malloc</name><argument_list pos:start="73:34" pos:end="73:43">(<argument pos:start="73:35" pos:end="73:42"><expr pos:start="73:35" pos:end="73:42"><name pos:start="73:35" pos:end="73:38">size</name> <operator pos:start="73:40" pos:end="73:40">*</operator> <literal type="number" pos:start="73:42" pos:end="73:42">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="75:15" pos:end="83:13">else <block pos:start="75:20" pos:end="83:13">{<block_content pos:start="77:17" pos:end="81:25">

                <expr_stmt pos:start="77:17" pos:end="79:53"><expr pos:start="77:17" pos:end="79:52"><call pos:start="77:17" pos:end="79:52"><name pos:start="77:17" pos:end="77:32">error_setg_win32</name><argument_list pos:start="77:33" pos:end="79:52">(<argument pos:start="77:34" pos:end="77:37"><expr pos:start="77:34" pos:end="77:37"><name pos:start="77:34" pos:end="77:37">errp</name></expr></argument>, <argument pos:start="77:40" pos:end="77:53"><expr pos:start="77:40" pos:end="77:53"><call pos:start="77:40" pos:end="77:53"><name pos:start="77:40" pos:end="77:51">GetLastError</name><argument_list pos:start="77:52" pos:end="77:53">()</argument_list></call></expr></argument>,

                        <argument pos:start="79:25" pos:end="79:51"><expr pos:start="79:25" pos:end="79:51"><literal type="string" pos:start="79:25" pos:end="79:51">"failed to get device name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="81:17" pos:end="81:25">goto <name pos:start="81:22" pos:end="81:24">out</name>;</goto>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>



        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:40">(<expr pos:start="89:13" pos:end="89:39"><call pos:start="89:13" pos:end="89:39"><name pos:start="89:13" pos:end="89:21">g_strcmp0</name><argument_list pos:start="89:22" pos:end="89:39">(<argument pos:start="89:23" pos:end="89:28"><expr pos:start="89:23" pos:end="89:28"><name pos:start="89:23" pos:end="89:28">buffer</name></expr></argument>, <argument pos:start="89:31" pos:end="89:38"><expr pos:start="89:31" pos:end="89:38"><name pos:start="89:31" pos:end="89:38">dev_name</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="89:42" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:21">

            <continue pos:start="91:13" pos:end="91:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="97:9" pos:end="105:11">/* There is no need to allocate buffer in the next functions. The size

         * is known and ULONG according to

         * https://support.microsoft.com/en-us/kb/253232

         * https://msdn.microsoft.com/en-us/library/windows/hardware/ff543095(v=vs.85).aspx

         */</comment>

        <if_stmt pos:start="107:9" pos:end="113:9"><if pos:start="107:9" pos:end="113:9">if <condition pos:start="107:12" pos:end="109:68">(<expr pos:start="107:13" pos:end="109:67"><operator pos:start="107:13" pos:end="107:13">!</operator><call pos:start="107:14" pos:end="109:67"><name pos:start="107:14" pos:end="107:45">SetupDiGetDeviceRegistryProperty</name><argument_list pos:start="107:46" pos:end="109:67">(<argument pos:start="107:47" pos:end="107:54"><expr pos:start="107:47" pos:end="107:54"><name pos:start="107:47" pos:end="107:54">dev_info</name></expr></argument>, <argument pos:start="107:57" pos:end="107:70"><expr pos:start="107:57" pos:end="107:70"><operator pos:start="107:57" pos:end="107:57">&amp;</operator><name pos:start="107:58" pos:end="107:70">dev_info_data</name></expr></argument>,

                   <argument pos:start="109:20" pos:end="109:34"><expr pos:start="109:20" pos:end="109:34"><name pos:start="109:20" pos:end="109:34">SPDRP_BUSNUMBER</name></expr></argument>, <argument pos:start="109:37" pos:end="109:41"><expr pos:start="109:37" pos:end="109:41"><operator pos:start="109:37" pos:end="109:37">&amp;</operator><name pos:start="109:38" pos:end="109:41">data</name></expr></argument>, <argument pos:start="109:44" pos:end="109:54"><expr pos:start="109:44" pos:end="109:54"><operator pos:start="109:44" pos:end="109:44">(</operator><name pos:start="109:45" pos:end="109:49">PBYTE</name><operator pos:start="109:50" pos:end="109:50">)</operator><operator pos:start="109:51" pos:end="109:51">&amp;</operator><name pos:start="109:52" pos:end="109:54">bus</name></expr></argument>, <argument pos:start="109:57" pos:end="109:60"><expr pos:start="109:57" pos:end="109:60"><name pos:start="109:57" pos:end="109:60">size</name></expr></argument>, <argument pos:start="109:63" pos:end="109:66"><expr pos:start="109:63" pos:end="109:66"><name pos:start="109:63" pos:end="109:66">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:70" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:18">

            <break pos:start="111:13" pos:end="111:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="117:9" pos:end="119:57">/* The function retrieves the device's address. This value will be

         * transformed into device function and number */</comment>

        <if_stmt pos:start="121:9" pos:end="127:9"><if pos:start="121:9" pos:end="127:9">if <condition pos:start="121:12" pos:end="123:67">(<expr pos:start="121:13" pos:end="123:66"><operator pos:start="121:13" pos:end="121:13">!</operator><call pos:start="121:14" pos:end="123:66"><name pos:start="121:14" pos:end="121:45">SetupDiGetDeviceRegistryProperty</name><argument_list pos:start="121:46" pos:end="123:66">(<argument pos:start="121:47" pos:end="121:54"><expr pos:start="121:47" pos:end="121:54"><name pos:start="121:47" pos:end="121:54">dev_info</name></expr></argument>, <argument pos:start="121:57" pos:end="121:70"><expr pos:start="121:57" pos:end="121:70"><operator pos:start="121:57" pos:end="121:57">&amp;</operator><name pos:start="121:58" pos:end="121:70">dev_info_data</name></expr></argument>,

                   <argument pos:start="123:20" pos:end="123:32"><expr pos:start="123:20" pos:end="123:32"><name pos:start="123:20" pos:end="123:32">SPDRP_ADDRESS</name></expr></argument>, <argument pos:start="123:35" pos:end="123:39"><expr pos:start="123:35" pos:end="123:39"><operator pos:start="123:35" pos:end="123:35">&amp;</operator><name pos:start="123:36" pos:end="123:39">data</name></expr></argument>, <argument pos:start="123:42" pos:end="123:53"><expr pos:start="123:42" pos:end="123:53"><operator pos:start="123:42" pos:end="123:42">(</operator><name pos:start="123:43" pos:end="123:47">PBYTE</name><operator pos:start="123:48" pos:end="123:48">)</operator><operator pos:start="123:49" pos:end="123:49">&amp;</operator><name pos:start="123:50" pos:end="123:53">addr</name></expr></argument>, <argument pos:start="123:56" pos:end="123:59"><expr pos:start="123:56" pos:end="123:59"><name pos:start="123:56" pos:end="123:59">size</name></expr></argument>, <argument pos:start="123:62" pos:end="123:65"><expr pos:start="123:62" pos:end="123:65"><name pos:start="123:62" pos:end="123:65">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="123:69" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:18">

            <break pos:start="125:13" pos:end="125:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="131:9" pos:end="133:68">/* This call returns UINumber of DEVICE_CAPABILITIES structure.

         * This number is typically a user-perceived slot number. */</comment>

        <if_stmt pos:start="135:9" pos:end="141:9"><if pos:start="135:9" pos:end="141:9">if <condition pos:start="135:12" pos:end="137:69">(<expr pos:start="135:13" pos:end="137:68"><operator pos:start="135:13" pos:end="135:13">!</operator><call pos:start="135:14" pos:end="137:68"><name pos:start="135:14" pos:end="135:45">SetupDiGetDeviceRegistryProperty</name><argument_list pos:start="135:46" pos:end="137:68">(<argument pos:start="135:47" pos:end="135:54"><expr pos:start="135:47" pos:end="135:54"><name pos:start="135:47" pos:end="135:54">dev_info</name></expr></argument>, <argument pos:start="135:57" pos:end="135:70"><expr pos:start="135:57" pos:end="135:70"><operator pos:start="135:57" pos:end="135:57">&amp;</operator><name pos:start="135:58" pos:end="135:70">dev_info_data</name></expr></argument>,

                   <argument pos:start="137:20" pos:end="137:34"><expr pos:start="137:20" pos:end="137:34"><name pos:start="137:20" pos:end="137:34">SPDRP_UI_NUMBER</name></expr></argument>, <argument pos:start="137:37" pos:end="137:41"><expr pos:start="137:37" pos:end="137:41"><operator pos:start="137:37" pos:end="137:37">&amp;</operator><name pos:start="137:38" pos:end="137:41">data</name></expr></argument>, <argument pos:start="137:44" pos:end="137:55"><expr pos:start="137:44" pos:end="137:55"><operator pos:start="137:44" pos:end="137:44">(</operator><name pos:start="137:45" pos:end="137:49">PBYTE</name><operator pos:start="137:50" pos:end="137:50">)</operator><operator pos:start="137:51" pos:end="137:51">&amp;</operator><name pos:start="137:52" pos:end="137:55">slot</name></expr></argument>, <argument pos:start="137:58" pos:end="137:61"><expr pos:start="137:58" pos:end="137:61"><name pos:start="137:58" pos:end="137:61">size</name></expr></argument>, <argument pos:start="137:64" pos:end="137:67"><expr pos:start="137:64" pos:end="137:67"><name pos:start="137:64" pos:end="137:67">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="137:71" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:18">

            <break pos:start="139:13" pos:end="139:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="145:9" pos:end="155:65">/* SetupApi gives us the same information as driver with

         * IoGetDeviceProperty. According to Microsoft

         * https://support.microsoft.com/en-us/kb/253232

         * FunctionNumber = (USHORT)((propertyAddress) &amp; 0x0000FFFF);

         * DeviceNumber = (USHORT)(((propertyAddress) &gt;&gt; 16) &amp; 0x0000FFFF);

         * SPDRP_ADDRESS is propertyAddress, so we do the same.*/</comment>



        <expr_stmt pos:start="159:9" pos:end="159:33"><expr pos:start="159:9" pos:end="159:32"><name pos:start="159:9" pos:end="159:12">func</name> <operator pos:start="159:14" pos:end="159:14">=</operator> <name pos:start="159:16" pos:end="159:19">addr</name> <operator pos:start="159:21" pos:end="159:21">&amp;</operator> <literal type="number" pos:start="159:23" pos:end="159:32">0x0000FFFF</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:40"><expr pos:start="161:9" pos:end="161:39"><name pos:start="161:9" pos:end="161:11">dev</name> <operator pos:start="161:13" pos:end="161:13">=</operator> <operator pos:start="161:15" pos:end="161:15">(</operator><name pos:start="161:16" pos:end="161:19">addr</name> <operator pos:start="161:21" pos:end="161:22">&gt;&gt;</operator> <literal type="number" pos:start="161:24" pos:end="161:25">16</literal><operator pos:start="161:26" pos:end="161:26">)</operator> <operator pos:start="161:28" pos:end="161:28">&amp;</operator> <literal type="number" pos:start="161:30" pos:end="161:39">0x0000FFFF</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:38"><expr pos:start="163:9" pos:end="163:37"><name pos:start="163:9" pos:end="163:11">pci</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <call pos:start="163:15" pos:end="163:37"><name pos:start="163:15" pos:end="163:23">g_malloc0</name><argument_list pos:start="163:24" pos:end="163:37">(<argument pos:start="163:25" pos:end="163:36"><expr pos:start="163:25" pos:end="163:36"><sizeof pos:start="163:25" pos:end="163:36">sizeof<argument_list pos:start="163:31" pos:end="163:36">(<argument pos:start="163:32" pos:end="163:35"><expr pos:start="163:32" pos:end="163:35"><operator pos:start="163:32" pos:end="163:32">*</operator><name pos:start="163:33" pos:end="163:35">pci</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:26"><expr pos:start="165:9" pos:end="165:25"><name pos:start="165:9" pos:end="165:19"><name pos:start="165:9" pos:end="165:11">pci</name><operator pos:start="165:12" pos:end="165:13">-&gt;</operator><name pos:start="165:14" pos:end="165:19">domain</name></name> <operator pos:start="165:21" pos:end="165:21">=</operator> <name pos:start="165:23" pos:end="165:25">dev</name></expr>;</expr_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:25"><expr pos:start="167:9" pos:end="167:24"><name pos:start="167:9" pos:end="167:17"><name pos:start="167:9" pos:end="167:11">pci</name><operator pos:start="167:12" pos:end="167:13">-&gt;</operator><name pos:start="167:14" pos:end="167:17">slot</name></name> <operator pos:start="167:19" pos:end="167:19">=</operator> <name pos:start="167:21" pos:end="167:24">slot</name></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="169:29"><expr pos:start="169:9" pos:end="169:28"><name pos:start="169:9" pos:end="169:21"><name pos:start="169:9" pos:end="169:11">pci</name><operator pos:start="169:12" pos:end="169:13">-&gt;</operator><name pos:start="169:14" pos:end="169:21">function</name></name> <operator pos:start="169:23" pos:end="169:23">=</operator> <name pos:start="169:25" pos:end="169:28">func</name></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:23"><expr pos:start="171:9" pos:end="171:22"><name pos:start="171:9" pos:end="171:16"><name pos:start="171:9" pos:end="171:11">pci</name><operator pos:start="171:12" pos:end="171:13">-&gt;</operator><name pos:start="171:14" pos:end="171:16">bus</name></name> <operator pos:start="171:18" pos:end="171:18">=</operator> <name pos:start="171:20" pos:end="171:22">bus</name></expr>;</expr_stmt>

        <break pos:start="173:9" pos:end="173:14">break;</break>

    </block_content>}</block></for>

<label pos:start="177:1" pos:end="177:4"><name pos:start="177:1" pos:end="177:3">out</name>:</label>

    <expr_stmt pos:start="179:5" pos:end="179:19"><expr pos:start="179:5" pos:end="179:18"><call pos:start="179:5" pos:end="179:18"><name pos:start="179:5" pos:end="179:10">g_free</name><argument_list pos:start="179:11" pos:end="179:18">(<argument pos:start="179:12" pos:end="179:17"><expr pos:start="179:12" pos:end="179:17"><name pos:start="179:12" pos:end="179:17">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:17"><expr pos:start="181:5" pos:end="181:16"><call pos:start="181:5" pos:end="181:16"><name pos:start="181:5" pos:end="181:10">g_free</name><argument_list pos:start="181:11" pos:end="181:16">(<argument pos:start="181:12" pos:end="181:15"><expr pos:start="181:12" pos:end="181:15"><name pos:start="181:12" pos:end="181:15">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="183:5" pos:end="183:15">return <expr pos:start="183:12" pos:end="183:14"><name pos:start="183:12" pos:end="183:14">pci</name></expr>;</return>

</block_content>}</block></function>
</unit>
