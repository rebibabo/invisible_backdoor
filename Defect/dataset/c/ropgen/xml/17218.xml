<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17218.c" pos:tabs="8"><function pos:start="1:1" pos:end="267:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">r2d_init</name><parameter_list pos:start="1:21" pos:end="1:43">(<parameter pos:start="1:22" pos:end="1:42"><decl pos:start="1:22" pos:end="1:42"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:33">MachineState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:42">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="267:1">{<block_content pos:start="5:5" pos:end="265:56">

    <decl_stmt pos:start="5:5" pos:end="5:47"><decl pos:start="5:5" pos:end="5:46"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:25">cpu_model</name> <init pos:start="5:27" pos:end="5:46">= <expr pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:46"><name pos:start="5:29" pos:end="5:35">machine</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:59"><decl pos:start="7:5" pos:end="7:58"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">kernel_filename</name> <init pos:start="7:33" pos:end="7:58">= <expr pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:58"><name pos:start="7:35" pos:end="7:41">machine</name><operator pos:start="7:42" pos:end="7:43">-&gt;</operator><name pos:start="7:44" pos:end="7:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:57"><decl pos:start="9:5" pos:end="9:56"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:30">kernel_cmdline</name> <init pos:start="9:32" pos:end="9:56">= <expr pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:40">machine</name><operator pos:start="9:41" pos:end="9:42">-&gt;</operator><name pos:start="9:43" pos:end="9:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:59"><decl pos:start="11:5" pos:end="11:58"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:31">initrd_filename</name> <init pos:start="11:33" pos:end="11:58">= <expr pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:58"><name pos:start="11:35" pos:end="11:41">machine</name><operator pos:start="11:42" pos:end="11:43">-&gt;</operator><name pos:start="11:44" pos:end="11:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">SuperHCPU</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:18">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">CPUSH4State</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:20">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">ResetData</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:25">reset_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:10">struct</name> <name pos:start="19:12" pos:end="19:22">SH7750State</name></name> <modifier pos:start="19:24" pos:end="19:24">*</modifier></type><name pos:start="19:25" pos:end="19:25">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:49"><decl pos:start="21:5" pos:end="21:48"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:23">sdram</name> <init pos:start="21:25" pos:end="21:48">= <expr pos:start="21:27" pos:end="21:48"><call pos:start="21:27" pos:end="21:48"><name pos:start="21:27" pos:end="21:31">g_new</name><argument_list pos:start="21:32" pos:end="21:48">(<argument pos:start="21:33" pos:end="21:44"><expr pos:start="21:33" pos:end="21:44"><name pos:start="21:33" pos:end="21:44">MemoryRegion</name></expr></argument>, <argument pos:start="21:47" pos:end="21:47"><expr pos:start="21:47" pos:end="21:47"><literal type="number" pos:start="21:47" pos:end="21:47">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:12">qemu_irq</name> <modifier pos:start="23:14" pos:end="23:14">*</modifier></type><name pos:start="23:15" pos:end="23:17">irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:13">DriveInfo</name> <modifier pos:start="25:15" pos:end="25:15">*</modifier></type><name pos:start="25:16" pos:end="25:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:10"><decl pos:start="27:5" pos:end="27:9"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:21"><decl pos:start="29:5" pos:end="29:20"><type pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:15">DeviceState</name> <modifier pos:start="29:17" pos:end="29:17">*</modifier></type><name pos:start="29:18" pos:end="29:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:25"><decl pos:start="31:5" pos:end="31:24"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">SysBusDevice</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:24">busdev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:58"><decl pos:start="33:5" pos:end="33:57"><type pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:16">MemoryRegion</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:35">address_space_mem</name> <init pos:start="33:37" pos:end="33:57">= <expr pos:start="33:39" pos:end="33:57"><call pos:start="33:39" pos:end="33:57"><name pos:start="33:39" pos:end="33:55">get_system_memory</name><argument_list pos:start="33:56" pos:end="33:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:20"><decl pos:start="35:5" pos:end="35:19"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:10">PCIBus</name> <modifier pos:start="35:12" pos:end="35:12">*</modifier></type><name pos:start="35:13" pos:end="35:19">pci_bus</name></decl>;</decl_stmt>



    <if_stmt pos:start="39:5" pos:end="43:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:26">(<expr pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:17">cpu_model</name> <operator pos:start="39:19" pos:end="39:20">==</operator> <name pos:start="39:22" pos:end="39:25">NULL</name></expr>)</condition> <block pos:start="39:28" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:30">

        <expr_stmt pos:start="41:9" pos:end="41:30"><expr pos:start="41:9" pos:end="41:29"><name pos:start="41:9" pos:end="41:17">cpu_model</name> <operator pos:start="41:19" pos:end="41:19">=</operator> <literal type="string" pos:start="41:21" pos:end="41:29">"SH7751R"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:34"><expr pos:start="47:5" pos:end="47:33"><name pos:start="47:5" pos:end="47:7">cpu</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:33"><name pos:start="47:11" pos:end="47:22">cpu_sh4_init</name><argument_list pos:start="47:23" pos:end="47:33">(<argument pos:start="47:24" pos:end="47:32"><expr pos:start="47:24" pos:end="47:32"><name pos:start="47:24" pos:end="47:32">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:20">(<expr pos:start="49:9" pos:end="49:19"><name pos:start="49:9" pos:end="49:11">cpu</name> <operator pos:start="49:13" pos:end="49:14">==</operator> <name pos:start="49:16" pos:end="49:19">NULL</name></expr>)</condition> <block pos:start="49:22" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:16">

        <expr_stmt pos:start="51:9" pos:end="51:59"><expr pos:start="51:9" pos:end="51:58"><call pos:start="51:9" pos:end="51:58"><name pos:start="51:9" pos:end="51:15">fprintf</name><argument_list pos:start="51:16" pos:end="51:58">(<argument pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:22">stderr</name></expr></argument>, <argument pos:start="51:25" pos:end="51:57"><expr pos:start="51:25" pos:end="51:57"><literal type="string" pos:start="51:25" pos:end="51:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:16"><expr pos:start="53:9" pos:end="53:15"><call pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:12">exit</name><argument_list pos:start="53:13" pos:end="53:15">(<argument pos:start="53:14" pos:end="53:14"><expr pos:start="53:14" pos:end="53:14"><literal type="number" pos:start="53:14" pos:end="53:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:20"><expr pos:start="57:5" pos:end="57:19"><name pos:start="57:5" pos:end="57:7">env</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <operator pos:start="57:11" pos:end="57:11">&amp;</operator><name pos:start="57:12" pos:end="57:19"><name pos:start="57:12" pos:end="57:14">cpu</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:19">env</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:46"><expr pos:start="61:5" pos:end="61:45"><name pos:start="61:5" pos:end="61:14">reset_info</name> <operator pos:start="61:16" pos:end="61:16">=</operator> <call pos:start="61:18" pos:end="61:45"><name pos:start="61:18" pos:end="61:26">g_malloc0</name><argument_list pos:start="61:27" pos:end="61:45">(<argument pos:start="61:28" pos:end="61:44"><expr pos:start="61:28" pos:end="61:44"><sizeof pos:start="61:28" pos:end="61:44">sizeof<argument_list pos:start="61:34" pos:end="61:44">(<argument pos:start="61:35" pos:end="61:43"><expr pos:start="61:35" pos:end="61:43"><name pos:start="61:35" pos:end="61:43">ResetData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:26"><expr pos:start="63:5" pos:end="63:25"><name pos:start="63:5" pos:end="63:19"><name pos:start="63:5" pos:end="63:14">reset_info</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:19">cpu</name></name> <operator pos:start="63:21" pos:end="63:21">=</operator> <name pos:start="63:23" pos:end="63:25">cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:33"><expr pos:start="65:5" pos:end="65:32"><name pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:14">reset_info</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:22">vector</name></name> <operator pos:start="65:24" pos:end="65:24">=</operator> <name pos:start="65:26" pos:end="65:32"><name pos:start="65:26" pos:end="65:28">env</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:32">pc</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:52"><expr pos:start="67:5" pos:end="67:51"><call pos:start="67:5" pos:end="67:51"><name pos:start="67:5" pos:end="67:23">qemu_register_reset</name><argument_list pos:start="67:24" pos:end="67:51">(<argument pos:start="67:25" pos:end="67:38"><expr pos:start="67:25" pos:end="67:38"><name pos:start="67:25" pos:end="67:38">main_cpu_reset</name></expr></argument>, <argument pos:start="67:41" pos:end="67:50"><expr pos:start="67:41" pos:end="67:50"><name pos:start="67:41" pos:end="67:50">reset_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:31">/* Allocate memory space */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:79"><expr pos:start="73:5" pos:end="73:78"><call pos:start="73:5" pos:end="73:78"><name pos:start="73:5" pos:end="73:26">memory_region_init_ram</name><argument_list pos:start="73:27" pos:end="73:78">(<argument pos:start="73:28" pos:end="73:32"><expr pos:start="73:28" pos:end="73:32"><name pos:start="73:28" pos:end="73:32">sdram</name></expr></argument>, <argument pos:start="73:35" pos:end="73:38"><expr pos:start="73:35" pos:end="73:38"><name pos:start="73:35" pos:end="73:38">NULL</name></expr></argument>, <argument pos:start="73:41" pos:end="73:51"><expr pos:start="73:41" pos:end="73:51"><literal type="string" pos:start="73:41" pos:end="73:51">"r2d.sdram"</literal></expr></argument>, <argument pos:start="73:54" pos:end="73:63"><expr pos:start="73:54" pos:end="73:63"><name pos:start="73:54" pos:end="73:63">SDRAM_SIZE</name></expr></argument>, <argument pos:start="73:66" pos:end="73:77"><expr pos:start="73:66" pos:end="73:77"><operator pos:start="73:66" pos:end="73:66">&amp;</operator><name pos:start="73:67" pos:end="73:77">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:39"><expr pos:start="75:5" pos:end="75:38"><call pos:start="75:5" pos:end="75:38"><name pos:start="75:5" pos:end="75:31">vmstate_register_ram_global</name><argument_list pos:start="75:32" pos:end="75:38">(<argument pos:start="75:33" pos:end="75:37"><expr pos:start="75:33" pos:end="75:37"><name pos:start="75:33" pos:end="75:37">sdram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:70"><expr pos:start="77:5" pos:end="77:69"><call pos:start="77:5" pos:end="77:69"><name pos:start="77:5" pos:end="77:31">memory_region_add_subregion</name><argument_list pos:start="77:32" pos:end="77:69">(<argument pos:start="77:33" pos:end="77:49"><expr pos:start="77:33" pos:end="77:49"><name pos:start="77:33" pos:end="77:49">address_space_mem</name></expr></argument>, <argument pos:start="77:52" pos:end="77:61"><expr pos:start="77:52" pos:end="77:61"><name pos:start="77:52" pos:end="77:61">SDRAM_BASE</name></expr></argument>, <argument pos:start="77:64" pos:end="77:68"><expr pos:start="77:64" pos:end="77:68"><name pos:start="77:64" pos:end="77:68">sdram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="79:5" pos:end="79:30">/* Register peripherals */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:44"><expr pos:start="81:5" pos:end="81:43"><name pos:start="81:5" pos:end="81:5">s</name> <operator pos:start="81:7" pos:end="81:7">=</operator> <call pos:start="81:9" pos:end="81:43"><name pos:start="81:9" pos:end="81:19">sh7750_init</name><argument_list pos:start="81:20" pos:end="81:43">(<argument pos:start="81:21" pos:end="81:23"><expr pos:start="81:21" pos:end="81:23"><name pos:start="81:21" pos:end="81:23">cpu</name></expr></argument>, <argument pos:start="81:26" pos:end="81:42"><expr pos:start="81:26" pos:end="81:42"><name pos:start="81:26" pos:end="81:42">address_space_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:70"><expr pos:start="83:5" pos:end="83:69"><name pos:start="83:5" pos:end="83:7">irq</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <call pos:start="83:11" pos:end="83:69"><name pos:start="83:11" pos:end="83:23">r2d_fpga_init</name><argument_list pos:start="83:24" pos:end="83:69">(<argument pos:start="83:25" pos:end="83:41"><expr pos:start="83:25" pos:end="83:41"><name pos:start="83:25" pos:end="83:41">address_space_mem</name></expr></argument>, <argument pos:start="83:44" pos:end="83:53"><expr pos:start="83:44" pos:end="83:53"><literal type="number" pos:start="83:44" pos:end="83:53">0x04000000</literal></expr></argument>, <argument pos:start="83:56" pos:end="83:68"><expr pos:start="83:56" pos:end="83:68"><call pos:start="83:56" pos:end="83:68"><name pos:start="83:56" pos:end="83:65">sh7750_irl</name><argument_list pos:start="83:66" pos:end="83:68">(<argument pos:start="83:67" pos:end="83:67"><expr pos:start="83:67" pos:end="83:67"><name pos:start="83:67" pos:end="83:67">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:38"><expr pos:start="87:5" pos:end="87:37"><name pos:start="87:5" pos:end="87:7">dev</name> <operator pos:start="87:9" pos:end="87:9">=</operator> <call pos:start="87:11" pos:end="87:37"><name pos:start="87:11" pos:end="87:21">qdev_create</name><argument_list pos:start="87:22" pos:end="87:37">(<argument pos:start="87:23" pos:end="87:26"><expr pos:start="87:23" pos:end="87:26"><name pos:start="87:23" pos:end="87:26">NULL</name></expr></argument>, <argument pos:start="87:29" pos:end="87:36"><expr pos:start="87:29" pos:end="87:36"><literal type="string" pos:start="87:29" pos:end="87:36">"sh_pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:33"><expr pos:start="89:5" pos:end="89:32"><name pos:start="89:5" pos:end="89:10">busdev</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <call pos:start="89:14" pos:end="89:32"><name pos:start="89:14" pos:end="89:27">SYS_BUS_DEVICE</name><argument_list pos:start="89:28" pos:end="89:32">(<argument pos:start="89:29" pos:end="89:31"><expr pos:start="89:29" pos:end="89:31"><name pos:start="89:29" pos:end="89:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:26"><expr pos:start="91:5" pos:end="91:25"><call pos:start="91:5" pos:end="91:25"><name pos:start="91:5" pos:end="91:20">qdev_init_nofail</name><argument_list pos:start="91:21" pos:end="91:25">(<argument pos:start="91:22" pos:end="91:24"><expr pos:start="91:22" pos:end="91:24"><name pos:start="91:22" pos:end="91:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:54"><expr pos:start="93:5" pos:end="93:53"><name pos:start="93:5" pos:end="93:11">pci_bus</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <call pos:start="93:15" pos:end="93:53"><name pos:start="93:15" pos:end="93:21">PCI_BUS</name><argument_list pos:start="93:22" pos:end="93:53">(<argument pos:start="93:23" pos:end="93:52"><expr pos:start="93:23" pos:end="93:52"><call pos:start="93:23" pos:end="93:52"><name pos:start="93:23" pos:end="93:40">qdev_get_child_bus</name><argument_list pos:start="93:41" pos:end="93:52">(<argument pos:start="93:42" pos:end="93:44"><expr pos:start="93:42" pos:end="93:44"><name pos:start="93:42" pos:end="93:44">dev</name></expr></argument>, <argument pos:start="93:47" pos:end="93:51"><expr pos:start="93:47" pos:end="93:51"><literal type="string" pos:start="93:47" pos:end="93:51">"pci"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:51"><expr pos:start="95:5" pos:end="95:50"><call pos:start="95:5" pos:end="95:50"><name pos:start="95:5" pos:end="95:19">sysbus_mmio_map</name><argument_list pos:start="95:20" pos:end="95:50">(<argument pos:start="95:21" pos:end="95:26"><expr pos:start="95:21" pos:end="95:26"><name pos:start="95:21" pos:end="95:26">busdev</name></expr></argument>, <argument pos:start="95:29" pos:end="95:29"><expr pos:start="95:29" pos:end="95:29"><literal type="number" pos:start="95:29" pos:end="95:29">0</literal></expr></argument>, <argument pos:start="95:32" pos:end="95:49"><expr pos:start="95:32" pos:end="95:49"><call pos:start="95:32" pos:end="95:49"><name pos:start="95:32" pos:end="95:37">P4ADDR</name><argument_list pos:start="95:38" pos:end="95:49">(<argument pos:start="95:39" pos:end="95:48"><expr pos:start="95:39" pos:end="95:48"><literal type="number" pos:start="95:39" pos:end="95:48">0x1e200000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:51"><expr pos:start="97:5" pos:end="97:50"><call pos:start="97:5" pos:end="97:50"><name pos:start="97:5" pos:end="97:19">sysbus_mmio_map</name><argument_list pos:start="97:20" pos:end="97:50">(<argument pos:start="97:21" pos:end="97:26"><expr pos:start="97:21" pos:end="97:26"><name pos:start="97:21" pos:end="97:26">busdev</name></expr></argument>, <argument pos:start="97:29" pos:end="97:29"><expr pos:start="97:29" pos:end="97:29"><literal type="number" pos:start="97:29" pos:end="97:29">1</literal></expr></argument>, <argument pos:start="97:32" pos:end="97:49"><expr pos:start="97:32" pos:end="97:49"><call pos:start="97:32" pos:end="97:49"><name pos:start="97:32" pos:end="97:37">A7ADDR</name><argument_list pos:start="97:38" pos:end="97:49">(<argument pos:start="97:39" pos:end="97:48"><expr pos:start="97:39" pos:end="97:48"><literal type="number" pos:start="97:39" pos:end="97:48">0x1e200000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:49"><expr pos:start="99:5" pos:end="99:48"><call pos:start="99:5" pos:end="99:48"><name pos:start="99:5" pos:end="99:22">sysbus_connect_irq</name><argument_list pos:start="99:23" pos:end="99:48">(<argument pos:start="99:24" pos:end="99:29"><expr pos:start="99:24" pos:end="99:29"><name pos:start="99:24" pos:end="99:29">busdev</name></expr></argument>, <argument pos:start="99:32" pos:end="99:32"><expr pos:start="99:32" pos:end="99:32"><literal type="number" pos:start="99:32" pos:end="99:32">0</literal></expr></argument>, <argument pos:start="99:35" pos:end="99:47"><expr pos:start="99:35" pos:end="99:47"><name pos:start="99:35" pos:end="99:47"><name pos:start="99:35" pos:end="99:37">irq</name><index pos:start="99:38" pos:end="99:47">[<expr pos:start="99:39" pos:end="99:46"><name pos:start="99:39" pos:end="99:46">PCI_INTA</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:49"><expr pos:start="101:5" pos:end="101:48"><call pos:start="101:5" pos:end="101:48"><name pos:start="101:5" pos:end="101:22">sysbus_connect_irq</name><argument_list pos:start="101:23" pos:end="101:48">(<argument pos:start="101:24" pos:end="101:29"><expr pos:start="101:24" pos:end="101:29"><name pos:start="101:24" pos:end="101:29">busdev</name></expr></argument>, <argument pos:start="101:32" pos:end="101:32"><expr pos:start="101:32" pos:end="101:32"><literal type="number" pos:start="101:32" pos:end="101:32">1</literal></expr></argument>, <argument pos:start="101:35" pos:end="101:47"><expr pos:start="101:35" pos:end="101:47"><name pos:start="101:35" pos:end="101:47"><name pos:start="101:35" pos:end="101:37">irq</name><index pos:start="101:38" pos:end="101:47">[<expr pos:start="101:39" pos:end="101:46"><name pos:start="101:39" pos:end="101:46">PCI_INTB</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:49"><expr pos:start="103:5" pos:end="103:48"><call pos:start="103:5" pos:end="103:48"><name pos:start="103:5" pos:end="103:22">sysbus_connect_irq</name><argument_list pos:start="103:23" pos:end="103:48">(<argument pos:start="103:24" pos:end="103:29"><expr pos:start="103:24" pos:end="103:29"><name pos:start="103:24" pos:end="103:29">busdev</name></expr></argument>, <argument pos:start="103:32" pos:end="103:32"><expr pos:start="103:32" pos:end="103:32"><literal type="number" pos:start="103:32" pos:end="103:32">2</literal></expr></argument>, <argument pos:start="103:35" pos:end="103:47"><expr pos:start="103:35" pos:end="103:47"><name pos:start="103:35" pos:end="103:47"><name pos:start="103:35" pos:end="103:37">irq</name><index pos:start="103:38" pos:end="103:47">[<expr pos:start="103:39" pos:end="103:46"><name pos:start="103:39" pos:end="103:46">PCI_INTC</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:49"><expr pos:start="105:5" pos:end="105:48"><call pos:start="105:5" pos:end="105:48"><name pos:start="105:5" pos:end="105:22">sysbus_connect_irq</name><argument_list pos:start="105:23" pos:end="105:48">(<argument pos:start="105:24" pos:end="105:29"><expr pos:start="105:24" pos:end="105:29"><name pos:start="105:24" pos:end="105:29">busdev</name></expr></argument>, <argument pos:start="105:32" pos:end="105:32"><expr pos:start="105:32" pos:end="105:32"><literal type="number" pos:start="105:32" pos:end="105:32">3</literal></expr></argument>, <argument pos:start="105:35" pos:end="105:47"><expr pos:start="105:35" pos:end="105:47"><name pos:start="105:35" pos:end="105:47"><name pos:start="105:35" pos:end="105:37">irq</name><index pos:start="105:38" pos:end="105:47">[<expr pos:start="105:39" pos:end="105:46"><name pos:start="105:39" pos:end="105:46">PCI_INTD</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="111:42"><expr pos:start="109:5" pos:end="111:41"><call pos:start="109:5" pos:end="111:41"><name pos:start="109:5" pos:end="109:14">sm501_init</name><argument_list pos:start="109:15" pos:end="111:41">(<argument pos:start="109:16" pos:end="109:32"><expr pos:start="109:16" pos:end="109:32"><name pos:start="109:16" pos:end="109:32">address_space_mem</name></expr></argument>, <argument pos:start="109:35" pos:end="109:44"><expr pos:start="109:35" pos:end="109:44"><literal type="number" pos:start="109:35" pos:end="109:44">0x10000000</literal></expr></argument>, <argument pos:start="109:47" pos:end="109:61"><expr pos:start="109:47" pos:end="109:61"><name pos:start="109:47" pos:end="109:61">SM501_VRAM_SIZE</name></expr></argument>,

               <argument pos:start="111:16" pos:end="111:25"><expr pos:start="111:16" pos:end="111:25"><name pos:start="111:16" pos:end="111:25"><name pos:start="111:16" pos:end="111:18">irq</name><index pos:start="111:19" pos:end="111:25">[<expr pos:start="111:20" pos:end="111:24"><name pos:start="111:20" pos:end="111:24">SM501</name></expr>]</index></name></expr></argument>, <argument pos:start="111:28" pos:end="111:40"><expr pos:start="111:28" pos:end="111:40"><name pos:start="111:28" pos:end="111:40"><name pos:start="111:28" pos:end="111:37">serial_hds</name><index pos:start="111:38" pos:end="111:40">[<expr pos:start="111:39" pos:end="111:39"><literal type="number" pos:start="111:39" pos:end="111:39">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:50">/* onboard CF (True IDE mode, Master only). */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:36"><expr pos:start="117:5" pos:end="117:35"><name pos:start="117:5" pos:end="117:9">dinfo</name> <operator pos:start="117:11" pos:end="117:11">=</operator> <call pos:start="117:13" pos:end="117:35"><name pos:start="117:13" pos:end="117:21">drive_get</name><argument_list pos:start="117:22" pos:end="117:35">(<argument pos:start="117:23" pos:end="117:28"><expr pos:start="117:23" pos:end="117:28"><name pos:start="117:23" pos:end="117:28">IF_IDE</name></expr></argument>, <argument pos:start="117:31" pos:end="117:31"><expr pos:start="117:31" pos:end="117:31"><literal type="number" pos:start="117:31" pos:end="117:31">0</literal></expr></argument>, <argument pos:start="117:34" pos:end="117:34"><expr pos:start="117:34" pos:end="117:34"><literal type="number" pos:start="117:34" pos:end="117:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:40"><expr pos:start="119:5" pos:end="119:39"><name pos:start="119:5" pos:end="119:7">dev</name> <operator pos:start="119:9" pos:end="119:9">=</operator> <call pos:start="119:11" pos:end="119:39"><name pos:start="119:11" pos:end="119:21">qdev_create</name><argument_list pos:start="119:22" pos:end="119:39">(<argument pos:start="119:23" pos:end="119:26"><expr pos:start="119:23" pos:end="119:26"><name pos:start="119:23" pos:end="119:26">NULL</name></expr></argument>, <argument pos:start="119:29" pos:end="119:38"><expr pos:start="119:29" pos:end="119:38"><literal type="string" pos:start="119:29" pos:end="119:38">"mmio-ide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:33"><expr pos:start="121:5" pos:end="121:32"><name pos:start="121:5" pos:end="121:10">busdev</name> <operator pos:start="121:12" pos:end="121:12">=</operator> <call pos:start="121:14" pos:end="121:32"><name pos:start="121:14" pos:end="121:27">SYS_BUS_DEVICE</name><argument_list pos:start="121:28" pos:end="121:32">(<argument pos:start="121:29" pos:end="121:31"><expr pos:start="121:29" pos:end="121:31"><name pos:start="121:29" pos:end="121:31">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:47"><expr pos:start="123:5" pos:end="123:46"><call pos:start="123:5" pos:end="123:46"><name pos:start="123:5" pos:end="123:22">sysbus_connect_irq</name><argument_list pos:start="123:23" pos:end="123:46">(<argument pos:start="123:24" pos:end="123:29"><expr pos:start="123:24" pos:end="123:29"><name pos:start="123:24" pos:end="123:29">busdev</name></expr></argument>, <argument pos:start="123:32" pos:end="123:32"><expr pos:start="123:32" pos:end="123:32"><literal type="number" pos:start="123:32" pos:end="123:32">0</literal></expr></argument>, <argument pos:start="123:35" pos:end="123:45"><expr pos:start="123:35" pos:end="123:45"><name pos:start="123:35" pos:end="123:45"><name pos:start="123:35" pos:end="123:37">irq</name><index pos:start="123:38" pos:end="123:45">[<expr pos:start="123:39" pos:end="123:44"><name pos:start="123:39" pos:end="123:44">CF_IDE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:42"><expr pos:start="125:5" pos:end="125:41"><call pos:start="125:5" pos:end="125:41"><name pos:start="125:5" pos:end="125:24">qdev_prop_set_uint32</name><argument_list pos:start="125:25" pos:end="125:41">(<argument pos:start="125:26" pos:end="125:28"><expr pos:start="125:26" pos:end="125:28"><name pos:start="125:26" pos:end="125:28">dev</name></expr></argument>, <argument pos:start="125:31" pos:end="125:37"><expr pos:start="125:31" pos:end="125:37"><literal type="string" pos:start="125:31" pos:end="125:37">"shift"</literal></expr></argument>, <argument pos:start="125:40" pos:end="125:40"><expr pos:start="125:40" pos:end="125:40"><literal type="number" pos:start="125:40" pos:end="125:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:26"><expr pos:start="127:5" pos:end="127:25"><call pos:start="127:5" pos:end="127:25"><name pos:start="127:5" pos:end="127:20">qdev_init_nofail</name><argument_list pos:start="127:21" pos:end="127:25">(<argument pos:start="127:22" pos:end="127:24"><expr pos:start="127:22" pos:end="127:24"><name pos:start="127:22" pos:end="127:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:43"><expr pos:start="129:5" pos:end="129:42"><call pos:start="129:5" pos:end="129:42"><name pos:start="129:5" pos:end="129:19">sysbus_mmio_map</name><argument_list pos:start="129:20" pos:end="129:42">(<argument pos:start="129:21" pos:end="129:26"><expr pos:start="129:21" pos:end="129:26"><name pos:start="129:21" pos:end="129:26">busdev</name></expr></argument>, <argument pos:start="129:29" pos:end="129:29"><expr pos:start="129:29" pos:end="129:29"><literal type="number" pos:start="129:29" pos:end="129:29">0</literal></expr></argument>, <argument pos:start="129:32" pos:end="129:41"><expr pos:start="129:32" pos:end="129:41"><literal type="number" pos:start="129:32" pos:end="129:41">0x14001000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:43"><expr pos:start="131:5" pos:end="131:42"><call pos:start="131:5" pos:end="131:42"><name pos:start="131:5" pos:end="131:19">sysbus_mmio_map</name><argument_list pos:start="131:20" pos:end="131:42">(<argument pos:start="131:21" pos:end="131:26"><expr pos:start="131:21" pos:end="131:26"><name pos:start="131:21" pos:end="131:26">busdev</name></expr></argument>, <argument pos:start="131:29" pos:end="131:29"><expr pos:start="131:29" pos:end="131:29"><literal type="number" pos:start="131:29" pos:end="131:29">1</literal></expr></argument>, <argument pos:start="131:32" pos:end="131:41"><expr pos:start="131:32" pos:end="131:41"><literal type="number" pos:start="131:32" pos:end="131:41">0x1400080c</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:43"><expr pos:start="133:5" pos:end="133:42"><call pos:start="133:5" pos:end="133:42"><name pos:start="133:5" pos:end="133:24">mmio_ide_init_drives</name><argument_list pos:start="133:25" pos:end="133:42">(<argument pos:start="133:26" pos:end="133:28"><expr pos:start="133:26" pos:end="133:28"><name pos:start="133:26" pos:end="133:28">dev</name></expr></argument>, <argument pos:start="133:31" pos:end="133:35"><expr pos:start="133:31" pos:end="133:35"><name pos:start="133:31" pos:end="133:35">dinfo</name></expr></argument>, <argument pos:start="133:38" pos:end="133:41"><expr pos:start="133:38" pos:end="133:41"><name pos:start="133:38" pos:end="133:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:30">/* onboard flash memory */</comment>

    <expr_stmt pos:start="139:5" pos:end="139:39"><expr pos:start="139:5" pos:end="139:38"><name pos:start="139:5" pos:end="139:9">dinfo</name> <operator pos:start="139:11" pos:end="139:11">=</operator> <call pos:start="139:13" pos:end="139:38"><name pos:start="139:13" pos:end="139:21">drive_get</name><argument_list pos:start="139:22" pos:end="139:38">(<argument pos:start="139:23" pos:end="139:31"><expr pos:start="139:23" pos:end="139:31"><name pos:start="139:23" pos:end="139:31">IF_PFLASH</name></expr></argument>, <argument pos:start="139:34" pos:end="139:34"><expr pos:start="139:34" pos:end="139:34"><literal type="number" pos:start="139:34" pos:end="139:34">0</literal></expr></argument>, <argument pos:start="139:37" pos:end="139:37"><expr pos:start="139:37" pos:end="139:37"><literal type="number" pos:start="139:37" pos:end="139:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="149:43"><expr pos:start="141:5" pos:end="149:42"><call pos:start="141:5" pos:end="149:42"><name pos:start="141:5" pos:end="141:25">pflash_cfi02_register</name><argument_list pos:start="141:26" pos:end="149:42">(<argument pos:start="141:27" pos:end="141:29"><expr pos:start="141:27" pos:end="141:29"><literal type="number" pos:start="141:27" pos:end="141:29">0x0</literal></expr></argument>, <argument pos:start="141:32" pos:end="141:35"><expr pos:start="141:32" pos:end="141:35"><name pos:start="141:32" pos:end="141:35">NULL</name></expr></argument>, <argument pos:start="141:38" pos:end="141:48"><expr pos:start="141:38" pos:end="141:48"><literal type="string" pos:start="141:38" pos:end="141:48">"r2d.flash"</literal></expr></argument>, <argument pos:start="141:51" pos:end="141:60"><expr pos:start="141:51" pos:end="141:60"><name pos:start="141:51" pos:end="141:60">FLASH_SIZE</name></expr></argument>,

                          <argument pos:start="143:27" pos:end="143:67"><expr pos:start="143:27" pos:end="143:67"><ternary pos:start="143:27" pos:end="143:67"><condition pos:start="143:27" pos:end="143:33"><expr pos:start="143:27" pos:end="143:31"><name pos:start="143:27" pos:end="143:31">dinfo</name></expr> ?</condition><then pos:start="143:35" pos:end="143:60"> <expr pos:start="143:35" pos:end="143:60"><call pos:start="143:35" pos:end="143:60"><name pos:start="143:35" pos:end="143:53">blk_by_legacy_dinfo</name><argument_list pos:start="143:54" pos:end="143:60">(<argument pos:start="143:55" pos:end="143:59"><expr pos:start="143:55" pos:end="143:59"><name pos:start="143:55" pos:end="143:59">dinfo</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="143:62" pos:end="143:67">: <expr pos:start="143:64" pos:end="143:67"><name pos:start="143:64" pos:end="143:67">NULL</name></expr></else></ternary></expr></argument>,

                          <argument pos:start="145:27" pos:end="145:37"><expr pos:start="145:27" pos:end="145:37"><operator pos:start="145:27" pos:end="145:27">(</operator><literal type="number" pos:start="145:28" pos:end="145:29">16</literal> <operator pos:start="145:31" pos:end="145:31">*</operator> <literal type="number" pos:start="145:33" pos:end="145:36">1024</literal><operator pos:start="145:37" pos:end="145:37">)</operator></expr></argument>, <argument pos:start="145:40" pos:end="145:55"><expr pos:start="145:40" pos:end="145:55"><name pos:start="145:40" pos:end="145:49">FLASH_SIZE</name> <operator pos:start="145:51" pos:end="145:52">&gt;&gt;</operator> <literal type="number" pos:start="145:54" pos:end="145:55">16</literal></expr></argument>,

                          <argument pos:start="147:27" pos:end="147:27"><expr pos:start="147:27" pos:end="147:27"><literal type="number" pos:start="147:27" pos:end="147:27">1</literal></expr></argument>, <argument pos:start="147:30" pos:end="147:30"><expr pos:start="147:30" pos:end="147:30"><literal type="number" pos:start="147:30" pos:end="147:30">4</literal></expr></argument>, <argument pos:start="147:33" pos:end="147:38"><expr pos:start="147:33" pos:end="147:38"><literal type="number" pos:start="147:33" pos:end="147:38">0x0000</literal></expr></argument>, <argument pos:start="147:41" pos:end="147:46"><expr pos:start="147:41" pos:end="147:46"><literal type="number" pos:start="147:41" pos:end="147:46">0x0000</literal></expr></argument>, <argument pos:start="147:49" pos:end="147:54"><expr pos:start="147:49" pos:end="147:54"><literal type="number" pos:start="147:49" pos:end="147:54">0x0000</literal></expr></argument>, <argument pos:start="147:57" pos:end="147:62"><expr pos:start="147:57" pos:end="147:62"><literal type="number" pos:start="147:57" pos:end="147:62">0x0000</literal></expr></argument>,

                          <argument pos:start="149:27" pos:end="149:31"><expr pos:start="149:27" pos:end="149:31"><literal type="number" pos:start="149:27" pos:end="149:31">0x555</literal></expr></argument>, <argument pos:start="149:34" pos:end="149:38"><expr pos:start="149:34" pos:end="149:38"><literal type="number" pos:start="149:34" pos:end="149:38">0x2aa</literal></expr></argument>, <argument pos:start="149:41" pos:end="149:41"><expr pos:start="149:41" pos:end="149:41"><literal type="number" pos:start="149:41" pos:end="149:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:45">/* NIC: rtl8139 on-board, and 2 slots. */</comment>

    <for pos:start="155:5" pos:end="159:58">for <control pos:start="155:9" pos:end="155:33">(<init pos:start="155:10" pos:end="155:15"><expr pos:start="155:10" pos:end="155:14"><name pos:start="155:10" pos:end="155:10">i</name> <operator pos:start="155:12" pos:end="155:12">=</operator> <literal type="number" pos:start="155:14" pos:end="155:14">0</literal></expr>;</init> <condition pos:start="155:17" pos:end="155:28"><expr pos:start="155:17" pos:end="155:27"><name pos:start="155:17" pos:end="155:17">i</name> <operator pos:start="155:19" pos:end="155:19">&lt;</operator> <name pos:start="155:21" pos:end="155:27">nb_nics</name></expr>;</condition> <incr pos:start="155:30" pos:end="155:32"><expr pos:start="155:30" pos:end="155:32"><name pos:start="155:30" pos:end="155:30">i</name><operator pos:start="155:31" pos:end="155:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="157:9" pos:end="159:58"><block_content pos:start="157:9" pos:end="159:58">

        <expr_stmt pos:start="157:9" pos:end="159:58"><expr pos:start="157:9" pos:end="159:57"><call pos:start="157:9" pos:end="159:57"><name pos:start="157:9" pos:end="157:27">pci_nic_init_nofail</name><argument_list pos:start="157:28" pos:end="159:57">(<argument pos:start="157:29" pos:end="157:40"><expr pos:start="157:29" pos:end="157:40"><operator pos:start="157:29" pos:end="157:29">&amp;</operator><name pos:start="157:30" pos:end="157:40"><name pos:start="157:30" pos:end="157:37">nd_table</name><index pos:start="157:38" pos:end="157:40">[<expr pos:start="157:39" pos:end="157:39"><name pos:start="157:39" pos:end="157:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="157:43" pos:end="157:49"><expr pos:start="157:43" pos:end="157:49"><name pos:start="157:43" pos:end="157:49">pci_bus</name></expr></argument>,

                            <argument pos:start="159:29" pos:end="159:37"><expr pos:start="159:29" pos:end="159:37"><literal type="string" pos:start="159:29" pos:end="159:37">"rtl8139"</literal></expr></argument>, <argument pos:start="159:40" pos:end="159:56"><expr pos:start="159:40" pos:end="159:56"><ternary pos:start="159:40" pos:end="159:56"><condition pos:start="159:40" pos:end="159:45"><expr pos:start="159:40" pos:end="159:43"><name pos:start="159:40" pos:end="159:40">i</name><operator pos:start="159:41" pos:end="159:42">==</operator><literal type="number" pos:start="159:43" pos:end="159:43">0</literal></expr> ?</condition><then pos:start="159:47" pos:end="159:49"> <expr pos:start="159:47" pos:end="159:49"><literal type="string" pos:start="159:47" pos:end="159:49">"2"</literal></expr> </then><else pos:start="159:51" pos:end="159:56">: <expr pos:start="159:53" pos:end="159:56"><name pos:start="159:53" pos:end="159:56">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="163:5" pos:end="163:22">/* USB keyboard */</comment>

    <expr_stmt pos:start="165:5" pos:end="165:51"><expr pos:start="165:5" pos:end="165:50"><call pos:start="165:5" pos:end="165:50"><name pos:start="165:5" pos:end="165:21">usb_create_simple</name><argument_list pos:start="165:22" pos:end="165:50">(<argument pos:start="165:23" pos:end="165:38"><expr pos:start="165:23" pos:end="165:38"><call pos:start="165:23" pos:end="165:38"><name pos:start="165:23" pos:end="165:34">usb_bus_find</name><argument_list pos:start="165:35" pos:end="165:38">(<argument pos:start="165:36" pos:end="165:37"><expr pos:start="165:36" pos:end="165:37"><operator pos:start="165:36" pos:end="165:36">-</operator><literal type="number" pos:start="165:37" pos:end="165:37">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="165:41" pos:end="165:49"><expr pos:start="165:41" pos:end="165:49"><literal type="string" pos:start="165:41" pos:end="165:49">"usb-kbd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="169:5" pos:end="169:43">/* Todo: register on board registers */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:49"><expr pos:start="171:5" pos:end="171:48"><call pos:start="171:5" pos:end="171:48"><name pos:start="171:5" pos:end="171:10">memset</name><argument_list pos:start="171:11" pos:end="171:48">(<argument pos:start="171:12" pos:end="171:23"><expr pos:start="171:12" pos:end="171:23"><operator pos:start="171:12" pos:end="171:12">&amp;</operator><name pos:start="171:13" pos:end="171:23">boot_params</name></expr></argument>, <argument pos:start="171:26" pos:end="171:26"><expr pos:start="171:26" pos:end="171:26"><literal type="number" pos:start="171:26" pos:end="171:26">0</literal></expr></argument>, <argument pos:start="171:29" pos:end="171:47"><expr pos:start="171:29" pos:end="171:47"><sizeof pos:start="171:29" pos:end="171:47">sizeof<argument_list pos:start="171:35" pos:end="171:47">(<argument pos:start="171:36" pos:end="171:46"><expr pos:start="171:36" pos:end="171:46"><name pos:start="171:36" pos:end="171:46">boot_params</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="175:5" pos:end="209:5"><if pos:start="175:5" pos:end="209:5">if <condition pos:start="175:8" pos:end="175:24">(<expr pos:start="175:9" pos:end="175:23"><name pos:start="175:9" pos:end="175:23">kernel_filename</name></expr>)</condition> <block pos:start="175:26" pos:end="209:5">{<block_content pos:start="177:9" pos:end="207:75">

        <decl_stmt pos:start="177:9" pos:end="177:24"><decl pos:start="177:9" pos:end="177:23"><type pos:start="177:9" pos:end="177:11"><name pos:start="177:9" pos:end="177:11">int</name></type> <name pos:start="177:13" pos:end="177:23">kernel_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="181:9" pos:end="185:82"><expr pos:start="181:9" pos:end="185:81"><name pos:start="181:9" pos:end="181:19">kernel_size</name> <operator pos:start="181:21" pos:end="181:21">=</operator> <call pos:start="181:23" pos:end="185:81"><name pos:start="181:23" pos:end="181:41">load_image_targphys</name><argument_list pos:start="181:42" pos:end="185:81">(<argument pos:start="181:43" pos:end="181:57"><expr pos:start="181:43" pos:end="181:57"><name pos:start="181:43" pos:end="181:57">kernel_filename</name></expr></argument>,

                                          <argument pos:start="183:43" pos:end="183:72"><expr pos:start="183:43" pos:end="183:72"><name pos:start="183:43" pos:end="183:52">SDRAM_BASE</name> <operator pos:start="183:54" pos:end="183:54">+</operator> <name pos:start="183:56" pos:end="183:72">LINUX_LOAD_OFFSET</name></expr></argument>,

                                          <argument pos:start="185:43" pos:end="185:80"><expr pos:start="185:43" pos:end="185:80"><name pos:start="185:43" pos:end="185:60">INITRD_LOAD_OFFSET</name> <operator pos:start="185:62" pos:end="185:62">-</operator> <name pos:start="185:64" pos:end="185:80">LINUX_LOAD_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="187:9" pos:end="193:9"><if pos:start="187:9" pos:end="193:9">if <condition pos:start="187:12" pos:end="187:28">(<expr pos:start="187:13" pos:end="187:27"><name pos:start="187:13" pos:end="187:23">kernel_size</name> <operator pos:start="187:25" pos:end="187:25">&lt;</operator> <literal type="number" pos:start="187:27" pos:end="187:27">0</literal></expr>)</condition> <block pos:start="187:30" pos:end="193:9">{<block_content pos:start="189:11" pos:end="191:18">

          <expr_stmt pos:start="189:11" pos:end="189:81"><expr pos:start="189:11" pos:end="189:80"><call pos:start="189:11" pos:end="189:80"><name pos:start="189:11" pos:end="189:17">fprintf</name><argument_list pos:start="189:18" pos:end="189:80">(<argument pos:start="189:19" pos:end="189:24"><expr pos:start="189:19" pos:end="189:24"><name pos:start="189:19" pos:end="189:24">stderr</name></expr></argument>, <argument pos:start="189:27" pos:end="189:62"><expr pos:start="189:27" pos:end="189:62"><literal type="string" pos:start="189:27" pos:end="189:62">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="189:65" pos:end="189:79"><expr pos:start="189:65" pos:end="189:79"><name pos:start="189:65" pos:end="189:79">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="191:11" pos:end="191:18"><expr pos:start="191:11" pos:end="191:17"><call pos:start="191:11" pos:end="191:17"><name pos:start="191:11" pos:end="191:14">exit</name><argument_list pos:start="191:15" pos:end="191:17">(<argument pos:start="191:16" pos:end="191:16"><expr pos:start="191:16" pos:end="191:16"><literal type="number" pos:start="191:16" pos:end="191:16">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="197:9" pos:end="197:61">/* initialization which should be done by firmware */</comment>

        <expr_stmt pos:start="199:9" pos:end="201:56"><expr pos:start="199:9" pos:end="201:55"><call pos:start="199:9" pos:end="201:55"><name pos:start="199:9" pos:end="199:25">address_space_stl</name><argument_list pos:start="199:26" pos:end="201:55">(<argument pos:start="199:27" pos:end="199:47"><expr pos:start="199:27" pos:end="199:47"><operator pos:start="199:27" pos:end="199:27">&amp;</operator><name pos:start="199:28" pos:end="199:47">address_space_memory</name></expr></argument>, <argument pos:start="199:50" pos:end="199:60"><expr pos:start="199:50" pos:end="199:60"><name pos:start="199:50" pos:end="199:60">SH7750_BCR1</name></expr></argument>, <argument pos:start="199:63" pos:end="199:68"><expr pos:start="199:63" pos:end="199:68"><literal type="number" pos:start="199:63" pos:end="199:63">1</literal> <operator pos:start="199:65" pos:end="199:66">&lt;&lt;</operator> <literal type="number" pos:start="199:68" pos:end="199:68">3</literal></expr></argument>,

                          <argument pos:start="201:27" pos:end="201:48"><expr pos:start="201:27" pos:end="201:48"><name pos:start="201:27" pos:end="201:48">MEMTXATTRS_UNSPECIFIED</name></expr></argument>, <argument pos:start="201:51" pos:end="201:54"><expr pos:start="201:51" pos:end="201:54"><name pos:start="201:51" pos:end="201:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="201:58" pos:end="201:72">/* cs3 SDRAM */</comment>

        <expr_stmt pos:start="203:9" pos:end="205:56"><expr pos:start="203:9" pos:end="205:55"><call pos:start="203:9" pos:end="205:55"><name pos:start="203:9" pos:end="203:25">address_space_stw</name><argument_list pos:start="203:26" pos:end="205:55">(<argument pos:start="203:27" pos:end="203:47"><expr pos:start="203:27" pos:end="203:47"><operator pos:start="203:27" pos:end="203:27">&amp;</operator><name pos:start="203:28" pos:end="203:47">address_space_memory</name></expr></argument>, <argument pos:start="203:50" pos:end="203:60"><expr pos:start="203:50" pos:end="203:60"><name pos:start="203:50" pos:end="203:60">SH7750_BCR2</name></expr></argument>, <argument pos:start="203:63" pos:end="203:74"><expr pos:start="203:63" pos:end="203:74"><literal type="number" pos:start="203:63" pos:end="203:63">3</literal> <operator pos:start="203:65" pos:end="203:66">&lt;&lt;</operator> <operator pos:start="203:68" pos:end="203:68">(</operator><literal type="number" pos:start="203:69" pos:end="203:69">3</literal> <operator pos:start="203:71" pos:end="203:71">*</operator> <literal type="number" pos:start="203:73" pos:end="203:73">2</literal><operator pos:start="203:74" pos:end="203:74">)</operator></expr></argument>,

                          <argument pos:start="205:27" pos:end="205:48"><expr pos:start="205:27" pos:end="205:48"><name pos:start="205:27" pos:end="205:48">MEMTXATTRS_UNSPECIFIED</name></expr></argument>, <argument pos:start="205:51" pos:end="205:54"><expr pos:start="205:51" pos:end="205:54"><name pos:start="205:51" pos:end="205:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="205:58" pos:end="205:72">/* cs3 32bit */</comment>

        <expr_stmt pos:start="207:9" pos:end="207:75"><expr pos:start="207:9" pos:end="207:74"><name pos:start="207:9" pos:end="207:26"><name pos:start="207:9" pos:end="207:18">reset_info</name><operator pos:start="207:19" pos:end="207:20">-&gt;</operator><name pos:start="207:21" pos:end="207:26">vector</name></name> <operator pos:start="207:28" pos:end="207:28">=</operator> <operator pos:start="207:30" pos:end="207:30">(</operator><name pos:start="207:31" pos:end="207:40">SDRAM_BASE</name> <operator pos:start="207:42" pos:end="207:42">+</operator> <name pos:start="207:44" pos:end="207:60">LINUX_LOAD_OFFSET</name><operator pos:start="207:61" pos:end="207:61">)</operator> <operator pos:start="207:63" pos:end="207:63">|</operator> <literal type="number" pos:start="207:65" pos:end="207:74">0xa0000000</literal></expr>;</expr_stmt> <comment type="block" pos:start="207:77" pos:end="207:100">/* Start from P2 area */</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="213:5" pos:end="245:5"><if pos:start="213:5" pos:end="245:5">if <condition pos:start="213:8" pos:end="213:24">(<expr pos:start="213:9" pos:end="213:23"><name pos:start="213:9" pos:end="213:23">initrd_filename</name></expr>)</condition> <block pos:start="213:26" pos:end="245:5">{<block_content pos:start="215:9" pos:end="243:55">

        <decl_stmt pos:start="215:9" pos:end="215:24"><decl pos:start="215:9" pos:end="215:23"><type pos:start="215:9" pos:end="215:11"><name pos:start="215:9" pos:end="215:11">int</name></type> <name pos:start="215:13" pos:end="215:23">initrd_size</name></decl>;</decl_stmt>



        <expr_stmt pos:start="219:9" pos:end="223:75"><expr pos:start="219:9" pos:end="223:74"><name pos:start="219:9" pos:end="219:19">initrd_size</name> <operator pos:start="219:21" pos:end="219:21">=</operator> <call pos:start="219:23" pos:end="223:74"><name pos:start="219:23" pos:end="219:41">load_image_targphys</name><argument_list pos:start="219:42" pos:end="223:74">(<argument pos:start="219:43" pos:end="219:57"><expr pos:start="219:43" pos:end="219:57"><name pos:start="219:43" pos:end="219:57">initrd_filename</name></expr></argument>,

                                          <argument pos:start="221:43" pos:end="221:73"><expr pos:start="221:43" pos:end="221:73"><name pos:start="221:43" pos:end="221:52">SDRAM_BASE</name> <operator pos:start="221:54" pos:end="221:54">+</operator> <name pos:start="221:56" pos:end="221:73">INITRD_LOAD_OFFSET</name></expr></argument>,

                                          <argument pos:start="223:43" pos:end="223:73"><expr pos:start="223:43" pos:end="223:73"><name pos:start="223:43" pos:end="223:52">SDRAM_SIZE</name> <operator pos:start="223:54" pos:end="223:54">-</operator> <name pos:start="223:56" pos:end="223:73">INITRD_LOAD_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="227:9" pos:end="233:9"><if pos:start="227:9" pos:end="233:9">if <condition pos:start="227:12" pos:end="227:28">(<expr pos:start="227:13" pos:end="227:27"><name pos:start="227:13" pos:end="227:23">initrd_size</name> <operator pos:start="227:25" pos:end="227:25">&lt;</operator> <literal type="number" pos:start="227:27" pos:end="227:27">0</literal></expr>)</condition> <block pos:start="227:30" pos:end="233:9">{<block_content pos:start="229:11" pos:end="231:18">

          <expr_stmt pos:start="229:11" pos:end="229:81"><expr pos:start="229:11" pos:end="229:80"><call pos:start="229:11" pos:end="229:80"><name pos:start="229:11" pos:end="229:17">fprintf</name><argument_list pos:start="229:18" pos:end="229:80">(<argument pos:start="229:19" pos:end="229:24"><expr pos:start="229:19" pos:end="229:24"><name pos:start="229:19" pos:end="229:24">stderr</name></expr></argument>, <argument pos:start="229:27" pos:end="229:62"><expr pos:start="229:27" pos:end="229:62"><literal type="string" pos:start="229:27" pos:end="229:62">"qemu: could not load initrd '%s'\n"</literal></expr></argument>, <argument pos:start="229:65" pos:end="229:79"><expr pos:start="229:65" pos:end="229:79"><name pos:start="229:65" pos:end="229:79">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt pos:start="231:11" pos:end="231:18"><expr pos:start="231:11" pos:end="231:17"><call pos:start="231:11" pos:end="231:17"><name pos:start="231:11" pos:end="231:14">exit</name><argument_list pos:start="231:15" pos:end="231:17">(<argument pos:start="231:16" pos:end="231:16"><expr pos:start="231:16" pos:end="231:16"><literal type="number" pos:start="231:16" pos:end="231:16">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="237:9" pos:end="237:61">/* initialization which should be done by firmware */</comment>

        <expr_stmt pos:start="239:9" pos:end="239:45"><expr pos:start="239:9" pos:end="239:44"><name pos:start="239:9" pos:end="239:31"><name pos:start="239:9" pos:end="239:19">boot_params</name><operator pos:start="239:20" pos:end="239:20">.</operator><name pos:start="239:21" pos:end="239:31">loader_type</name></name> <operator pos:start="239:33" pos:end="239:33">=</operator> <call pos:start="239:35" pos:end="239:44"><name pos:start="239:35" pos:end="239:41">tswap32</name><argument_list pos:start="239:42" pos:end="239:44">(<argument pos:start="239:43" pos:end="239:43"><expr pos:start="239:43" pos:end="239:43"><literal type="number" pos:start="239:43" pos:end="239:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:63"><expr pos:start="241:9" pos:end="241:62"><name pos:start="241:9" pos:end="241:32"><name pos:start="241:9" pos:end="241:19">boot_params</name><operator pos:start="241:20" pos:end="241:20">.</operator><name pos:start="241:21" pos:end="241:32">initrd_start</name></name> <operator pos:start="241:34" pos:end="241:34">=</operator> <call pos:start="241:36" pos:end="241:62"><name pos:start="241:36" pos:end="241:42">tswap32</name><argument_list pos:start="241:43" pos:end="241:62">(<argument pos:start="241:44" pos:end="241:61"><expr pos:start="241:44" pos:end="241:61"><name pos:start="241:44" pos:end="241:61">INITRD_LOAD_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:55"><expr pos:start="243:9" pos:end="243:54"><name pos:start="243:9" pos:end="243:31"><name pos:start="243:9" pos:end="243:19">boot_params</name><operator pos:start="243:20" pos:end="243:20">.</operator><name pos:start="243:21" pos:end="243:31">initrd_size</name></name> <operator pos:start="243:33" pos:end="243:33">=</operator> <call pos:start="243:35" pos:end="243:54"><name pos:start="243:35" pos:end="243:41">tswap32</name><argument_list pos:start="243:42" pos:end="243:54">(<argument pos:start="243:43" pos:end="243:53"><expr pos:start="243:43" pos:end="243:53"><name pos:start="243:43" pos:end="243:53">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="249:5" pos:end="259:5"><if pos:start="249:5" pos:end="259:5">if <condition pos:start="249:8" pos:end="249:23">(<expr pos:start="249:9" pos:end="249:22"><name pos:start="249:9" pos:end="249:22">kernel_cmdline</name></expr>)</condition> <block pos:start="249:25" pos:end="259:5">{<block_content pos:start="255:9" pos:end="257:52">

        <comment type="block" pos:start="251:9" pos:end="253:61">/* I see no evidence that this .kernel_cmdline buffer requires

           NUL-termination, so using strncpy should be ok. */</comment>

        <expr_stmt pos:start="255:9" pos:end="257:52"><expr pos:start="255:9" pos:end="257:51"><call pos:start="255:9" pos:end="257:51"><name pos:start="255:9" pos:end="255:15">strncpy</name><argument_list pos:start="255:16" pos:end="257:51">(<argument pos:start="255:17" pos:end="255:42"><expr pos:start="255:17" pos:end="255:42"><name pos:start="255:17" pos:end="255:42"><name pos:start="255:17" pos:end="255:27">boot_params</name><operator pos:start="255:28" pos:end="255:28">.</operator><name pos:start="255:29" pos:end="255:42">kernel_cmdline</name></name></expr></argument>, <argument pos:start="255:45" pos:end="255:58"><expr pos:start="255:45" pos:end="255:58"><name pos:start="255:45" pos:end="255:58">kernel_cmdline</name></expr></argument>,

                <argument pos:start="257:17" pos:end="257:50"><expr pos:start="257:17" pos:end="257:50"><sizeof pos:start="257:17" pos:end="257:50">sizeof<argument_list pos:start="257:23" pos:end="257:50">(<argument pos:start="257:24" pos:end="257:49"><expr pos:start="257:24" pos:end="257:49"><name pos:start="257:24" pos:end="257:49"><name pos:start="257:24" pos:end="257:34">boot_params</name><operator pos:start="257:35" pos:end="257:35">.</operator><name pos:start="257:36" pos:end="257:49">kernel_cmdline</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="263:5" pos:end="265:56"><expr pos:start="263:5" pos:end="265:55"><call pos:start="263:5" pos:end="265:55"><name pos:start="263:5" pos:end="263:22">rom_add_blob_fixed</name><argument_list pos:start="263:23" pos:end="265:55">(<argument pos:start="263:24" pos:end="263:36"><expr pos:start="263:24" pos:end="263:36"><literal type="string" pos:start="263:24" pos:end="263:36">"boot_params"</literal></expr></argument>, <argument pos:start="263:39" pos:end="263:50"><expr pos:start="263:39" pos:end="263:50"><operator pos:start="263:39" pos:end="263:39">&amp;</operator><name pos:start="263:40" pos:end="263:50">boot_params</name></expr></argument>, <argument pos:start="263:53" pos:end="263:71"><expr pos:start="263:53" pos:end="263:71"><sizeof pos:start="263:53" pos:end="263:71">sizeof<argument_list pos:start="263:59" pos:end="263:71">(<argument pos:start="263:60" pos:end="263:70"><expr pos:start="263:60" pos:end="263:70"><name pos:start="263:60" pos:end="263:70">boot_params</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                       <argument pos:start="265:24" pos:end="265:54"><expr pos:start="265:24" pos:end="265:54"><name pos:start="265:24" pos:end="265:33">SDRAM_BASE</name> <operator pos:start="265:35" pos:end="265:35">+</operator> <name pos:start="265:37" pos:end="265:54">BOOT_PARAMS_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
