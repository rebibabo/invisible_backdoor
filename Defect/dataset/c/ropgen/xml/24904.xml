<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24904.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:39"><name pos:start="1:1" pos:end="1:10">ogm_header</name><argument_list pos:start="1:11" pos:end="1:39">(<argument pos:start="1:12" pos:end="1:29">AVFormatContext *s</argument>, <argument pos:start="1:32" pos:end="1:38">int idx</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="153:1">{<block_content pos:start="5:5" pos:end="151:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:14">ogg</name></name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">ogg</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:21">ogg_stream</name></name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:25">os</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:40"><name pos:start="7:29" pos:end="7:31">ogg</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:40">streams</name></name> <operator pos:start="7:42" pos:end="7:42">+</operator> <name pos:start="7:44" pos:end="7:46">idx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">AVStream</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">st</name> <init pos:start="9:18" pos:end="9:34">= <expr pos:start="9:20" pos:end="9:34"><name pos:start="9:20" pos:end="9:34"><name pos:start="9:20" pos:end="9:20">s</name><operator pos:start="9:21" pos:end="9:22">-&gt;</operator><name pos:start="9:23" pos:end="9:29">streams</name><index pos:start="9:30" pos:end="9:34">[<expr pos:start="9:31" pos:end="9:33"><name pos:start="9:31" pos:end="9:33">idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:43"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">p</name> <init pos:start="11:22" pos:end="11:43">= <expr pos:start="11:24" pos:end="11:43"><name pos:start="11:24" pos:end="11:30"><name pos:start="11:24" pos:end="11:25">os</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:30">buf</name></name> <operator pos:start="11:32" pos:end="11:32">+</operator> <name pos:start="11:34" pos:end="11:43"><name pos:start="11:34" pos:end="11:35">os</name><operator pos:start="11:36" pos:end="11:37">-&gt;</operator><name pos:start="11:38" pos:end="11:43">pstart</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:22">time_unit</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:16">spu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:18"><decl pos:start="17:5" pos:end="17:17"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:17">size</name></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="23:17"><if pos:start="21:5" pos:end="23:17">if<condition pos:start="21:7" pos:end="21:17">(<expr pos:start="21:8" pos:end="21:16"><operator pos:start="21:8" pos:end="21:8">!</operator><operator pos:start="21:9" pos:end="21:9">(</operator><operator pos:start="21:10" pos:end="21:10">*</operator><name pos:start="21:11" pos:end="21:11">p</name> <operator pos:start="21:13" pos:end="21:13">&amp;</operator> <literal type="number" pos:start="21:15" pos:end="21:15">1</literal><operator pos:start="21:16" pos:end="21:16">)</operator></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:17"><block_content pos:start="23:9" pos:end="23:17">

        <return pos:start="23:9" pos:end="23:17">return <expr pos:start="23:16" pos:end="23:16"><literal type="number" pos:start="23:16" pos:end="23:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="147:5"><if pos:start="27:5" pos:end="141:5">if<condition pos:start="27:7" pos:end="27:15">(<expr pos:start="27:8" pos:end="27:14"><operator pos:start="27:8" pos:end="27:8">*</operator><name pos:start="27:9" pos:end="27:9">p</name> <operator pos:start="27:11" pos:end="27:12">==</operator> <literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr>)</condition> <block pos:start="27:17" pos:end="141:5">{<block_content pos:start="29:9" pos:end="139:9">

        <expr_stmt pos:start="29:9" pos:end="29:12"><expr pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:9">p</name><operator pos:start="29:10" pos:end="29:11">++</operator></expr>;</expr_stmt>



        <if_stmt pos:start="33:9" pos:end="79:9"><if pos:start="33:9" pos:end="47:9">if<condition pos:start="33:11" pos:end="33:21">(<expr pos:start="33:12" pos:end="33:20"><operator pos:start="33:12" pos:end="33:12">*</operator><name pos:start="33:13" pos:end="33:13">p</name> <operator pos:start="33:15" pos:end="33:16">==</operator> <literal type="char" pos:start="33:18" pos:end="33:20">'v'</literal></expr>)</condition><block pos:start="33:22" pos:end="47:9">{<block_content pos:start="35:13" pos:end="45:39">

            <decl_stmt pos:start="35:13" pos:end="35:20"><decl pos:start="35:13" pos:end="35:19"><type pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">int</name></type> <name pos:start="35:17" pos:end="35:19">tag</name></decl>;</decl_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:55"><expr pos:start="37:13" pos:end="37:54"><name pos:start="37:13" pos:end="37:33"><name pos:start="37:13" pos:end="37:14">st</name><operator pos:start="37:15" pos:end="37:16">-&gt;</operator><name pos:start="37:17" pos:end="37:21">codec</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:33">codec_type</name></name> <operator pos:start="37:35" pos:end="37:35">=</operator> <name pos:start="37:37" pos:end="37:54">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:19"><expr pos:start="39:13" pos:end="39:18"><name pos:start="39:13" pos:end="39:13">p</name> <operator pos:start="39:15" pos:end="39:16">+=</operator> <literal type="number" pos:start="39:18" pos:end="39:18">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:42"><expr pos:start="41:13" pos:end="41:41"><name pos:start="41:13" pos:end="41:15">tag</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:41"><name pos:start="41:19" pos:end="41:37">bytestream_get_le32</name><argument_list pos:start="41:38" pos:end="41:41">(<argument pos:start="41:39" pos:end="41:40"><expr pos:start="41:39" pos:end="41:40"><operator pos:start="41:39" pos:end="41:39">&amp;</operator><name pos:start="41:40" pos:end="41:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:74"><expr pos:start="43:13" pos:end="43:73"><name pos:start="43:13" pos:end="43:31"><name pos:start="43:13" pos:end="43:14">st</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:21">codec</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:31">codec_id</name></name> <operator pos:start="43:33" pos:end="43:33">=</operator> <call pos:start="43:35" pos:end="43:73"><name pos:start="43:35" pos:end="43:49">ff_codec_get_id</name><argument_list pos:start="43:50" pos:end="43:73">(<argument pos:start="43:51" pos:end="43:67"><expr pos:start="43:51" pos:end="43:67"><name pos:start="43:51" pos:end="43:67">ff_codec_bmp_tags</name></expr></argument>, <argument pos:start="43:70" pos:end="43:72"><expr pos:start="43:70" pos:end="43:72"><name pos:start="43:70" pos:end="43:72">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:39"><expr pos:start="45:13" pos:end="45:38"><name pos:start="45:13" pos:end="45:32"><name pos:start="45:13" pos:end="45:14">st</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:21">codec</name><operator pos:start="45:22" pos:end="45:23">-&gt;</operator><name pos:start="45:24" pos:end="45:32">codec_tag</name></name> <operator pos:start="45:34" pos:end="45:34">=</operator> <name pos:start="45:36" pos:end="45:38">tag</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="47:11" pos:end="55:9">else if <condition pos:start="47:19" pos:end="47:29">(<expr pos:start="47:20" pos:end="47:28"><operator pos:start="47:20" pos:end="47:20">*</operator><name pos:start="47:21" pos:end="47:21">p</name> <operator pos:start="47:23" pos:end="47:24">==</operator> <literal type="char" pos:start="47:26" pos:end="47:28">'t'</literal></expr>)</condition> <block pos:start="47:31" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:20">

            <expr_stmt pos:start="49:13" pos:end="49:58"><expr pos:start="49:13" pos:end="49:57"><name pos:start="49:13" pos:end="49:33"><name pos:start="49:13" pos:end="49:14">st</name><operator pos:start="49:15" pos:end="49:16">-&gt;</operator><name pos:start="49:17" pos:end="49:21">codec</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:33">codec_type</name></name> <operator pos:start="49:35" pos:end="49:35">=</operator> <name pos:start="49:37" pos:end="49:57">AVMEDIA_TYPE_SUBTITLE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:48"><expr pos:start="51:13" pos:end="51:47"><name pos:start="51:13" pos:end="51:31"><name pos:start="51:13" pos:end="51:14">st</name><operator pos:start="51:15" pos:end="51:16">-&gt;</operator><name pos:start="51:17" pos:end="51:21">codec</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:31">codec_id</name></name> <operator pos:start="51:33" pos:end="51:33">=</operator> <name pos:start="51:35" pos:end="51:47">CODEC_ID_TEXT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:20"><expr pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:13">p</name> <operator pos:start="53:15" pos:end="53:16">+=</operator> <literal type="number" pos:start="53:18" pos:end="53:19">12</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="55:11" pos:end="79:9">else <block pos:start="55:16" pos:end="79:9">{<block_content pos:start="57:13" pos:end="77:55">

            <decl_stmt pos:start="57:13" pos:end="57:28"><decl pos:start="57:13" pos:end="57:27"><type pos:start="57:13" pos:end="57:19"><name pos:start="57:13" pos:end="57:19">uint8_t</name></type> <name pos:start="57:21" pos:end="57:27"><name pos:start="57:21" pos:end="57:24">acid</name><index pos:start="57:25" pos:end="57:27">[<expr pos:start="57:26" pos:end="57:26"><literal type="number" pos:start="57:26" pos:end="57:26">5</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="59:13" pos:end="59:20"><decl pos:start="59:13" pos:end="59:19"><type pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">int</name></type> <name pos:start="59:17" pos:end="59:19">cid</name></decl>;</decl_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:55"><expr pos:start="61:13" pos:end="61:54"><name pos:start="61:13" pos:end="61:33"><name pos:start="61:13" pos:end="61:14">st</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:21">codec</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:33">codec_type</name></name> <operator pos:start="61:35" pos:end="61:35">=</operator> <name pos:start="61:37" pos:end="61:54">AVMEDIA_TYPE_AUDIO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:19"><expr pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:13">p</name> <operator pos:start="63:15" pos:end="63:16">+=</operator> <literal type="number" pos:start="63:18" pos:end="63:18">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:47"><expr pos:start="65:13" pos:end="65:46"><call pos:start="65:13" pos:end="65:46"><name pos:start="65:13" pos:end="65:33">bytestream_get_buffer</name><argument_list pos:start="65:34" pos:end="65:46">(<argument pos:start="65:35" pos:end="65:36"><expr pos:start="65:35" pos:end="65:36"><operator pos:start="65:35" pos:end="65:35">&amp;</operator><name pos:start="65:36" pos:end="65:36">p</name></expr></argument>, <argument pos:start="65:39" pos:end="65:42"><expr pos:start="65:39" pos:end="65:42"><name pos:start="65:39" pos:end="65:42">acid</name></expr></argument>, <argument pos:start="65:45" pos:end="65:45"><expr pos:start="65:45" pos:end="65:45"><literal type="number" pos:start="65:45" pos:end="65:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:24"><expr pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:19"><name pos:start="67:13" pos:end="67:16">acid</name><index pos:start="67:17" pos:end="67:19">[<expr pos:start="67:18" pos:end="67:18"><literal type="number" pos:start="67:18" pos:end="67:18">4</literal></expr>]</index></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <literal type="number" pos:start="67:23" pos:end="67:23">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:41"><expr pos:start="69:13" pos:end="69:40"><name pos:start="69:13" pos:end="69:15">cid</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <call pos:start="69:19" pos:end="69:40"><name pos:start="69:19" pos:end="69:24">strtol</name><argument_list pos:start="69:25" pos:end="69:40">(<argument pos:start="69:26" pos:end="69:29"><expr pos:start="69:26" pos:end="69:29"><name pos:start="69:26" pos:end="69:29">acid</name></expr></argument>, <argument pos:start="69:32" pos:end="69:35"><expr pos:start="69:32" pos:end="69:35"><name pos:start="69:32" pos:end="69:35">NULL</name></expr></argument>, <argument pos:start="69:38" pos:end="69:39"><expr pos:start="69:38" pos:end="69:39"><literal type="number" pos:start="69:38" pos:end="69:39">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:74"><expr pos:start="71:13" pos:end="71:73"><name pos:start="71:13" pos:end="71:31"><name pos:start="71:13" pos:end="71:14">st</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:21">codec</name><operator pos:start="71:22" pos:end="71:23">-&gt;</operator><name pos:start="71:24" pos:end="71:31">codec_id</name></name> <operator pos:start="71:33" pos:end="71:33">=</operator> <call pos:start="71:35" pos:end="71:73"><name pos:start="71:35" pos:end="71:49">ff_codec_get_id</name><argument_list pos:start="71:50" pos:end="71:73">(<argument pos:start="71:51" pos:end="71:67"><expr pos:start="71:51" pos:end="71:67"><name pos:start="71:51" pos:end="71:67">ff_codec_wav_tags</name></expr></argument>, <argument pos:start="71:70" pos:end="71:72"><expr pos:start="71:70" pos:end="71:72"><name pos:start="71:70" pos:end="71:72">cid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line" pos:start="73:13" pos:end="73:54">// our parser completely breaks AAC in Ogg</comment>

            <if_stmt pos:start="75:13" pos:end="77:55"><if pos:start="75:13" pos:end="77:55">if <condition pos:start="75:16" pos:end="75:52">(<expr pos:start="75:17" pos:end="75:51"><name pos:start="75:17" pos:end="75:35"><name pos:start="75:17" pos:end="75:18">st</name><operator pos:start="75:19" pos:end="75:20">-&gt;</operator><name pos:start="75:21" pos:end="75:25">codec</name><operator pos:start="75:26" pos:end="75:27">-&gt;</operator><name pos:start="75:28" pos:end="75:35">codec_id</name></name> <operator pos:start="75:37" pos:end="75:38">!=</operator> <name pos:start="75:40" pos:end="75:51">CODEC_ID_AAC</name></expr>)</condition><block type="pseudo" pos:start="77:17" pos:end="77:55"><block_content pos:start="77:17" pos:end="77:55">

                <expr_stmt pos:start="77:17" pos:end="77:55"><expr pos:start="77:17" pos:end="77:54"><name pos:start="77:17" pos:end="77:32"><name pos:start="77:17" pos:end="77:18">st</name><operator pos:start="77:19" pos:end="77:20">-&gt;</operator><name pos:start="77:21" pos:end="77:32">need_parsing</name></name> <operator pos:start="77:34" pos:end="77:34">=</operator> <name pos:start="77:36" pos:end="77:54">AVSTREAM_PARSE_FULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="83:9" pos:end="83:46"><expr pos:start="83:9" pos:end="83:45"><name pos:start="83:9" pos:end="83:12">size</name>        <operator pos:start="83:21" pos:end="83:21">=</operator> <call pos:start="83:23" pos:end="83:45"><name pos:start="83:23" pos:end="83:41">bytestream_get_le32</name><argument_list pos:start="83:42" pos:end="83:45">(<argument pos:start="83:43" pos:end="83:44"><expr pos:start="83:43" pos:end="83:44"><operator pos:start="83:43" pos:end="83:43">&amp;</operator><name pos:start="83:44" pos:end="83:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:45"><expr pos:start="85:9" pos:end="85:44"><name pos:start="85:9" pos:end="85:12">size</name>        <operator pos:start="85:21" pos:end="85:21">=</operator> <call pos:start="85:23" pos:end="85:44"><name pos:start="85:23" pos:end="85:27">FFMIN</name><argument_list pos:start="85:28" pos:end="85:44">(<argument pos:start="85:29" pos:end="85:32"><expr pos:start="85:29" pos:end="85:32"><name pos:start="85:29" pos:end="85:32">size</name></expr></argument>, <argument pos:start="85:35" pos:end="85:43"><expr pos:start="85:35" pos:end="85:43"><name pos:start="85:35" pos:end="85:43"><name pos:start="85:35" pos:end="85:36">os</name><operator pos:start="85:37" pos:end="85:38">-&gt;</operator><name pos:start="85:39" pos:end="85:43">psize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:46"><expr pos:start="87:9" pos:end="87:45"><name pos:start="87:9" pos:end="87:17">time_unit</name>   <operator pos:start="87:21" pos:end="87:21">=</operator> <call pos:start="87:23" pos:end="87:45"><name pos:start="87:23" pos:end="87:41">bytestream_get_le64</name><argument_list pos:start="87:42" pos:end="87:45">(<argument pos:start="87:43" pos:end="87:44"><expr pos:start="87:43" pos:end="87:44"><operator pos:start="87:43" pos:end="87:43">&amp;</operator><name pos:start="87:44" pos:end="87:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:46"><expr pos:start="89:9" pos:end="89:45"><name pos:start="89:9" pos:end="89:11">spu</name>         <operator pos:start="89:21" pos:end="89:21">=</operator> <call pos:start="89:23" pos:end="89:45"><name pos:start="89:23" pos:end="89:41">bytestream_get_le64</name><argument_list pos:start="89:42" pos:end="89:45">(<argument pos:start="89:43" pos:end="89:44"><expr pos:start="89:43" pos:end="89:44"><operator pos:start="89:43" pos:end="89:43">&amp;</operator><name pos:start="89:44" pos:end="89:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:15"><expr pos:start="91:9" pos:end="91:14"><name pos:start="91:9" pos:end="91:9">p</name> <operator pos:start="91:11" pos:end="91:12">+=</operator> <literal type="number" pos:start="91:14" pos:end="91:14">4</literal></expr>;</expr_stmt>                     <comment type="block" pos:start="91:37" pos:end="91:53">/* default_len */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:15"><expr pos:start="93:9" pos:end="93:14"><name pos:start="93:9" pos:end="93:9">p</name> <operator pos:start="93:11" pos:end="93:12">+=</operator> <literal type="number" pos:start="93:14" pos:end="93:14">8</literal></expr>;</expr_stmt>                     <comment type="block" pos:start="93:37" pos:end="93:70">/* buffersize + bits_per_sample */</comment>



        <if_stmt pos:start="97:9" pos:end="139:9"><if pos:start="97:9" pos:end="105:9">if<condition pos:start="97:11" pos:end="97:55">(<expr pos:start="97:12" pos:end="97:54"><name pos:start="97:12" pos:end="97:32"><name pos:start="97:12" pos:end="97:13">st</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:20">codec</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:32">codec_type</name></name> <operator pos:start="97:34" pos:end="97:35">==</operator> <name pos:start="97:37" pos:end="97:54">AVMEDIA_TYPE_VIDEO</name></expr>)</condition><block pos:start="97:56" pos:end="105:9">{<block_content pos:start="99:13" pos:end="103:67">

            <expr_stmt pos:start="99:13" pos:end="99:55"><expr pos:start="99:13" pos:end="99:54"><name pos:start="99:13" pos:end="99:28"><name pos:start="99:13" pos:end="99:14">st</name><operator pos:start="99:15" pos:end="99:16">-&gt;</operator><name pos:start="99:17" pos:end="99:21">codec</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:28">width</name></name> <operator pos:start="99:30" pos:end="99:30">=</operator> <call pos:start="99:32" pos:end="99:54"><name pos:start="99:32" pos:end="99:50">bytestream_get_le32</name><argument_list pos:start="99:51" pos:end="99:54">(<argument pos:start="99:52" pos:end="99:53"><expr pos:start="99:52" pos:end="99:53"><operator pos:start="99:52" pos:end="99:52">&amp;</operator><name pos:start="99:53" pos:end="99:53">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:56"><expr pos:start="101:13" pos:end="101:55"><name pos:start="101:13" pos:end="101:29"><name pos:start="101:13" pos:end="101:14">st</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:21">codec</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:29">height</name></name> <operator pos:start="101:31" pos:end="101:31">=</operator> <call pos:start="101:33" pos:end="101:55"><name pos:start="101:33" pos:end="101:51">bytestream_get_le32</name><argument_list pos:start="101:52" pos:end="101:55">(<argument pos:start="101:53" pos:end="101:54"><expr pos:start="101:53" pos:end="101:54"><operator pos:start="101:53" pos:end="101:53">&amp;</operator><name pos:start="101:54" pos:end="101:54">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:67"><expr pos:start="103:13" pos:end="103:66"><call pos:start="103:13" pos:end="103:66"><name pos:start="103:13" pos:end="103:31">avpriv_set_pts_info</name><argument_list pos:start="103:32" pos:end="103:66">(<argument pos:start="103:33" pos:end="103:34"><expr pos:start="103:33" pos:end="103:34"><name pos:start="103:33" pos:end="103:34">st</name></expr></argument>, <argument pos:start="103:37" pos:end="103:38"><expr pos:start="103:37" pos:end="103:38"><literal type="number" pos:start="103:37" pos:end="103:38">64</literal></expr></argument>, <argument pos:start="103:41" pos:end="103:49"><expr pos:start="103:41" pos:end="103:49"><name pos:start="103:41" pos:end="103:49">time_unit</name></expr></argument>, <argument pos:start="103:52" pos:end="103:65"><expr pos:start="103:52" pos:end="103:65"><name pos:start="103:52" pos:end="103:54">spu</name> <operator pos:start="103:56" pos:end="103:56">*</operator> <literal type="number" pos:start="103:58" pos:end="103:65">10000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="105:11" pos:end="139:9">else <block pos:start="105:16" pos:end="139:9">{<block_content pos:start="107:13" pos:end="137:13">

            <expr_stmt pos:start="107:13" pos:end="107:58"><expr pos:start="107:13" pos:end="107:57"><name pos:start="107:13" pos:end="107:31"><name pos:start="107:13" pos:end="107:14">st</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:21">codec</name><operator pos:start="107:22" pos:end="107:23">-&gt;</operator><name pos:start="107:24" pos:end="107:31">channels</name></name> <operator pos:start="107:33" pos:end="107:33">=</operator> <call pos:start="107:35" pos:end="107:57"><name pos:start="107:35" pos:end="107:53">bytestream_get_le16</name><argument_list pos:start="107:54" pos:end="107:57">(<argument pos:start="107:55" pos:end="107:56"><expr pos:start="107:55" pos:end="107:56"><operator pos:start="107:55" pos:end="107:55">&amp;</operator><name pos:start="107:56" pos:end="107:56">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:19"><expr pos:start="109:13" pos:end="109:18"><name pos:start="109:13" pos:end="109:13">p</name> <operator pos:start="109:15" pos:end="109:16">+=</operator> <literal type="number" pos:start="109:18" pos:end="109:18">2</literal></expr>;</expr_stmt>                 <comment type="block" pos:start="109:37" pos:end="109:53">/* block_align */</comment>

            <expr_stmt pos:start="111:13" pos:end="111:62"><expr pos:start="111:13" pos:end="111:61"><name pos:start="111:13" pos:end="111:31"><name pos:start="111:13" pos:end="111:14">st</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:21">codec</name><operator pos:start="111:22" pos:end="111:23">-&gt;</operator><name pos:start="111:24" pos:end="111:31">bit_rate</name></name> <operator pos:start="111:33" pos:end="111:33">=</operator> <call pos:start="111:35" pos:end="111:57"><name pos:start="111:35" pos:end="111:53">bytestream_get_le32</name><argument_list pos:start="111:54" pos:end="111:57">(<argument pos:start="111:55" pos:end="111:56"><expr pos:start="111:55" pos:end="111:56"><operator pos:start="111:55" pos:end="111:55">&amp;</operator><name pos:start="111:56" pos:end="111:56">p</name></expr></argument>)</argument_list></call> <operator pos:start="111:59" pos:end="111:59">*</operator> <literal type="number" pos:start="111:61" pos:end="111:61">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:64"><expr pos:start="113:13" pos:end="113:63"><name pos:start="113:13" pos:end="113:34"><name pos:start="113:13" pos:end="113:14">st</name><operator pos:start="113:15" pos:end="113:16">-&gt;</operator><name pos:start="113:17" pos:end="113:21">codec</name><operator pos:start="113:22" pos:end="113:23">-&gt;</operator><name pos:start="113:24" pos:end="113:34">sample_rate</name></name> <operator pos:start="113:36" pos:end="113:36">=</operator> <name pos:start="113:38" pos:end="113:40">spu</name> <operator pos:start="113:42" pos:end="113:42">*</operator> <literal type="number" pos:start="113:44" pos:end="113:51">10000000</literal> <operator pos:start="113:53" pos:end="113:53">/</operator> <name pos:start="113:55" pos:end="113:63">time_unit</name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:67"><expr pos:start="115:13" pos:end="115:66"><call pos:start="115:13" pos:end="115:66"><name pos:start="115:13" pos:end="115:31">avpriv_set_pts_info</name><argument_list pos:start="115:32" pos:end="115:66">(<argument pos:start="115:33" pos:end="115:34"><expr pos:start="115:33" pos:end="115:34"><name pos:start="115:33" pos:end="115:34">st</name></expr></argument>, <argument pos:start="115:37" pos:end="115:38"><expr pos:start="115:37" pos:end="115:38"><literal type="number" pos:start="115:37" pos:end="115:38">64</literal></expr></argument>, <argument pos:start="115:41" pos:end="115:41"><expr pos:start="115:41" pos:end="115:41"><literal type="number" pos:start="115:41" pos:end="115:41">1</literal></expr></argument>, <argument pos:start="115:44" pos:end="115:65"><expr pos:start="115:44" pos:end="115:65"><name pos:start="115:44" pos:end="115:65"><name pos:start="115:44" pos:end="115:45">st</name><operator pos:start="115:46" pos:end="115:47">-&gt;</operator><name pos:start="115:48" pos:end="115:52">codec</name><operator pos:start="115:53" pos:end="115:54">-&gt;</operator><name pos:start="115:55" pos:end="115:65">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="123:13"><if pos:start="117:13" pos:end="123:13">if <condition pos:start="117:16" pos:end="117:66">(<expr pos:start="117:17" pos:end="117:65"><name pos:start="117:17" pos:end="117:20">size</name> <operator pos:start="117:22" pos:end="117:23">&gt;=</operator> <literal type="number" pos:start="117:25" pos:end="117:26">56</literal> <operator pos:start="117:28" pos:end="117:29">&amp;&amp;</operator> <name pos:start="117:31" pos:end="117:49"><name pos:start="117:31" pos:end="117:32">st</name><operator pos:start="117:33" pos:end="117:34">-&gt;</operator><name pos:start="117:35" pos:end="117:39">codec</name><operator pos:start="117:40" pos:end="117:41">-&gt;</operator><name pos:start="117:42" pos:end="117:49">codec_id</name></name> <operator pos:start="117:51" pos:end="117:52">==</operator> <name pos:start="117:54" pos:end="117:65">CODEC_ID_AAC</name></expr>)</condition> <block pos:start="117:68" pos:end="123:13">{<block_content pos:start="119:17" pos:end="121:26">

                <expr_stmt pos:start="119:17" pos:end="119:23"><expr pos:start="119:17" pos:end="119:22"><name pos:start="119:17" pos:end="119:17">p</name> <operator pos:start="119:19" pos:end="119:20">+=</operator> <literal type="number" pos:start="119:22" pos:end="119:22">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="121:26"><expr pos:start="121:17" pos:end="121:25"><name pos:start="121:17" pos:end="121:20">size</name> <operator pos:start="121:22" pos:end="121:23">-=</operator> <literal type="number" pos:start="121:25" pos:end="121:25">4</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="125:13" pos:end="137:13"><if pos:start="125:13" pos:end="137:13">if <condition pos:start="125:16" pos:end="125:26">(<expr pos:start="125:17" pos:end="125:25"><name pos:start="125:17" pos:end="125:20">size</name> <operator pos:start="125:22" pos:end="125:22">&gt;</operator> <literal type="number" pos:start="125:24" pos:end="125:25">52</literal></expr>)</condition> <block pos:start="125:28" pos:end="137:13">{<block_content pos:start="127:17" pos:end="135:70">

                <expr_stmt pos:start="127:17" pos:end="127:63"><expr pos:start="127:17" pos:end="127:62"><call pos:start="127:17" pos:end="127:62"><name pos:start="127:17" pos:end="127:26">av_assert0</name><argument_list pos:start="127:27" pos:end="127:62">(<argument pos:start="127:28" pos:end="127:61"><expr pos:start="127:28" pos:end="127:61"><name pos:start="127:28" pos:end="127:55">FF_INPUT_BUFFER_PADDING_SIZE</name> <operator pos:start="127:57" pos:end="127:58">&lt;=</operator> <literal type="number" pos:start="127:60" pos:end="127:61">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:27"><expr pos:start="129:17" pos:end="129:26"><name pos:start="129:17" pos:end="129:20">size</name> <operator pos:start="129:22" pos:end="129:23">-=</operator> <literal type="number" pos:start="129:25" pos:end="129:26">52</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:49"><expr pos:start="131:17" pos:end="131:48"><name pos:start="131:17" pos:end="131:41"><name pos:start="131:17" pos:end="131:18">st</name><operator pos:start="131:19" pos:end="131:20">-&gt;</operator><name pos:start="131:21" pos:end="131:25">codec</name><operator pos:start="131:26" pos:end="131:27">-&gt;</operator><name pos:start="131:28" pos:end="131:41">extradata_size</name></name> <operator pos:start="131:43" pos:end="131:43">=</operator> <name pos:start="131:45" pos:end="131:48">size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:86"><expr pos:start="133:17" pos:end="133:85"><name pos:start="133:17" pos:end="133:36"><name pos:start="133:17" pos:end="133:18">st</name><operator pos:start="133:19" pos:end="133:20">-&gt;</operator><name pos:start="133:21" pos:end="133:25">codec</name><operator pos:start="133:26" pos:end="133:27">-&gt;</operator><name pos:start="133:28" pos:end="133:36">extradata</name></name> <operator pos:start="133:38" pos:end="133:38">=</operator> <call pos:start="133:40" pos:end="133:85"><name pos:start="133:40" pos:end="133:48">av_malloc</name><argument_list pos:start="133:49" pos:end="133:85">(<argument pos:start="133:50" pos:end="133:84"><expr pos:start="133:50" pos:end="133:84"><name pos:start="133:50" pos:end="133:53">size</name> <operator pos:start="133:55" pos:end="133:55">+</operator> <name pos:start="133:57" pos:end="133:84">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:70"><expr pos:start="135:17" pos:end="135:69"><call pos:start="135:17" pos:end="135:69"><name pos:start="135:17" pos:end="135:37">bytestream_get_buffer</name><argument_list pos:start="135:38" pos:end="135:69">(<argument pos:start="135:39" pos:end="135:40"><expr pos:start="135:39" pos:end="135:40"><operator pos:start="135:39" pos:end="135:39">&amp;</operator><name pos:start="135:40" pos:end="135:40">p</name></expr></argument>, <argument pos:start="135:43" pos:end="135:62"><expr pos:start="135:43" pos:end="135:62"><name pos:start="135:43" pos:end="135:62"><name pos:start="135:43" pos:end="135:44">st</name><operator pos:start="135:45" pos:end="135:46">-&gt;</operator><name pos:start="135:47" pos:end="135:51">codec</name><operator pos:start="135:52" pos:end="135:53">-&gt;</operator><name pos:start="135:54" pos:end="135:62">extradata</name></name></expr></argument>, <argument pos:start="135:65" pos:end="135:68"><expr pos:start="135:65" pos:end="135:68"><name pos:start="135:65" pos:end="135:68">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="141:7" pos:end="147:5">else if <condition pos:start="141:15" pos:end="141:23">(<expr pos:start="141:16" pos:end="141:22"><operator pos:start="141:16" pos:end="141:16">*</operator><name pos:start="141:17" pos:end="141:17">p</name> <operator pos:start="141:19" pos:end="141:20">==</operator> <literal type="number" pos:start="141:22" pos:end="141:22">3</literal></expr>)</condition> <block pos:start="141:25" pos:end="147:5">{<block_content pos:start="143:9" pos:end="145:66">

        <if_stmt pos:start="143:9" pos:end="145:66"><if pos:start="143:9" pos:end="145:66">if <condition pos:start="143:12" pos:end="143:26">(<expr pos:start="143:13" pos:end="143:25"><name pos:start="143:13" pos:end="143:21"><name pos:start="143:13" pos:end="143:14">os</name><operator pos:start="143:15" pos:end="143:16">-&gt;</operator><name pos:start="143:17" pos:end="143:21">psize</name></name> <operator pos:start="143:23" pos:end="143:23">&gt;</operator> <literal type="number" pos:start="143:25" pos:end="143:25">8</literal></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:66"><block_content pos:start="145:13" pos:end="145:66">

            <expr_stmt pos:start="145:13" pos:end="145:66"><expr pos:start="145:13" pos:end="145:65"><call pos:start="145:13" pos:end="145:65"><name pos:start="145:13" pos:end="145:29">ff_vorbis_comment</name><argument_list pos:start="145:30" pos:end="145:65">(<argument pos:start="145:31" pos:end="145:31"><expr pos:start="145:31" pos:end="145:31"><name pos:start="145:31" pos:end="145:31">s</name></expr></argument>, <argument pos:start="145:34" pos:end="145:46"><expr pos:start="145:34" pos:end="145:46"><operator pos:start="145:34" pos:end="145:34">&amp;</operator><name pos:start="145:35" pos:end="145:46"><name pos:start="145:35" pos:end="145:36">st</name><operator pos:start="145:37" pos:end="145:38">-&gt;</operator><name pos:start="145:39" pos:end="145:46">metadata</name></name></expr></argument>, <argument pos:start="145:49" pos:end="145:51"><expr pos:start="145:49" pos:end="145:51"><name pos:start="145:49" pos:end="145:49">p</name><operator pos:start="145:50" pos:end="145:50">+</operator><literal type="number" pos:start="145:51" pos:end="145:51">7</literal></expr></argument>, <argument pos:start="145:54" pos:end="145:64"><expr pos:start="145:54" pos:end="145:64"><name pos:start="145:54" pos:end="145:62"><name pos:start="145:54" pos:end="145:55">os</name><operator pos:start="145:56" pos:end="145:57">-&gt;</operator><name pos:start="145:58" pos:end="145:62">psize</name></name><operator pos:start="145:63" pos:end="145:63">-</operator><literal type="number" pos:start="145:64" pos:end="145:64">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="151:5" pos:end="151:13">return <expr pos:start="151:12" pos:end="151:12"><literal type="number" pos:start="151:12" pos:end="151:12">1</literal></expr>;</return>

</block_content>}</block>
</unit>
