<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20694.c" pos:tabs="8"><function pos:start="1:1" pos:end="118:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">vnc_display_listen_addr</name><parameter_list pos:start="1:35" pos:end="13:48">(<parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:45">VncDisplay</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:49">vd</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:54"><decl pos:start="3:36" pos:end="3:54"><type pos:start="3:36" pos:end="3:54"><name pos:start="3:36" pos:end="3:48">SocketAddress</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:54">addr</name></decl></parameter>,

                                   <parameter pos:start="5:36" pos:end="5:51"><decl pos:start="5:36" pos:end="5:51"><type pos:start="5:36" pos:end="5:51"><specifier pos:start="5:36" pos:end="5:40">const</specifier> <name pos:start="5:42" pos:end="5:45">char</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:51">name</name></decl></parameter>,

                                   <parameter pos:start="7:36" pos:end="7:60"><decl pos:start="7:36" pos:end="7:60"><type pos:start="7:36" pos:end="7:60"><name pos:start="7:36" pos:end="7:51">QIOChannelSocket</name> <modifier pos:start="7:53" pos:end="7:53">*</modifier><modifier pos:start="7:54" pos:end="7:54">*</modifier><modifier pos:start="7:55" pos:end="7:55">*</modifier></type><name pos:start="7:56" pos:end="7:60">lsock</name></decl></parameter>,

                                   <parameter pos:start="9:36" pos:end="9:52"><decl pos:start="9:36" pos:end="9:52"><type pos:start="9:36" pos:end="9:52"><name pos:start="9:36" pos:end="9:40">guint</name> <modifier pos:start="9:42" pos:end="9:42">*</modifier><modifier pos:start="9:43" pos:end="9:43">*</modifier></type><name pos:start="9:44" pos:end="9:52">lsock_tag</name></decl></parameter>,

                                   <parameter pos:start="11:36" pos:end="11:49"><decl pos:start="11:36" pos:end="11:49"><type pos:start="11:36" pos:end="11:49"><name pos:start="11:36" pos:end="11:41">size_t</name> <modifier pos:start="11:43" pos:end="11:43">*</modifier></type><name pos:start="11:44" pos:end="11:49">nlsock</name></decl></parameter>,

                                   <parameter pos:start="13:36" pos:end="13:47"><decl pos:start="13:36" pos:end="13:47"><type pos:start="13:36" pos:end="13:47"><name pos:start="13:36" pos:end="13:40">Error</name> <modifier pos:start="13:42" pos:end="13:42">*</modifier><modifier pos:start="13:43" pos:end="13:43">*</modifier></type><name pos:start="13:44" pos:end="13:47">errp</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="118:1">{<block_content pos:start="17:5" pos:end="116:13">

    <decl_stmt pos:start="17:5" pos:end="17:63"><decl pos:start="17:5" pos:end="17:62"><type pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:18">QIODNSResolver</name> <modifier pos:start="17:20" pos:end="17:20">*</modifier></type><name pos:start="17:21" pos:end="17:28">resolver</name> <init pos:start="17:30" pos:end="17:62">= <expr pos:start="17:32" pos:end="17:62"><call pos:start="17:32" pos:end="17:62"><name pos:start="17:32" pos:end="17:60">qio_dns_resolver_get_instance</name><argument_list pos:start="17:61" pos:end="17:62">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:20"><name pos:start="19:5" pos:end="19:17">SocketAddress</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier><modifier pos:start="19:20" pos:end="19:20">*</modifier></type><name pos:start="19:21" pos:end="19:28">rawaddrs</name> <init pos:start="19:30" pos:end="19:35">= <expr pos:start="19:32" pos:end="19:35"><name pos:start="19:32" pos:end="19:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:10">size_t</name></type> <name pos:start="21:12" pos:end="21:20">nrawaddrs</name> <init pos:start="21:22" pos:end="21:24">= <expr pos:start="21:24" pos:end="21:24"><literal type="number" pos:start="21:24" pos:end="21:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:9">Error</name> <modifier pos:start="23:11" pos:end="23:11">*</modifier></type><name pos:start="23:12" pos:end="23:20">listenerr</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:27"><decl pos:start="25:5" pos:end="25:26"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:18">listening</name> <init pos:start="25:20" pos:end="25:26">= <expr pos:start="25:22" pos:end="25:26"><name pos:start="25:22" pos:end="25:26">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:13"><decl pos:start="27:5" pos:end="27:12"><type pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:10">size_t</name></type> <name pos:start="27:12" pos:end="27:12">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="33:58">(<expr pos:start="31:9" pos:end="33:57"><call pos:start="31:9" pos:end="33:53"><name pos:start="31:9" pos:end="31:36">qio_dns_resolver_lookup_sync</name><argument_list pos:start="31:37" pos:end="33:53">(<argument pos:start="31:38" pos:end="31:45"><expr pos:start="31:38" pos:end="31:45"><name pos:start="31:38" pos:end="31:45">resolver</name></expr></argument>, <argument pos:start="31:48" pos:end="31:51"><expr pos:start="31:48" pos:end="31:51"><name pos:start="31:48" pos:end="31:51">addr</name></expr></argument>, <argument pos:start="31:54" pos:end="31:63"><expr pos:start="31:54" pos:end="31:63"><operator pos:start="31:54" pos:end="31:54">&amp;</operator><name pos:start="31:55" pos:end="31:63">nrawaddrs</name></expr></argument>,

                                     <argument pos:start="33:38" pos:end="33:46"><expr pos:start="33:38" pos:end="33:46"><operator pos:start="33:38" pos:end="33:38">&amp;</operator><name pos:start="33:39" pos:end="33:46">rawaddrs</name></expr></argument>, <argument pos:start="33:49" pos:end="33:52"><expr pos:start="33:49" pos:end="33:52"><name pos:start="33:49" pos:end="33:52">errp</name></expr></argument>)</argument_list></call> <operator pos:start="33:55" pos:end="33:55">&lt;</operator> <literal type="number" pos:start="33:57" pos:end="33:57">0</literal></expr>)</condition> <block pos:start="33:60" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:18">

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="41:5" pos:end="72:5">for <control pos:start="41:9" pos:end="41:35">(<init pos:start="41:10" pos:end="41:15"><expr pos:start="41:10" pos:end="41:14"><name pos:start="41:10" pos:end="41:10">i</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <literal type="number" pos:start="41:14" pos:end="41:14">0</literal></expr>;</init> <condition pos:start="41:17" pos:end="41:30"><expr pos:start="41:17" pos:end="41:29"><name pos:start="41:17" pos:end="41:17">i</name> <operator pos:start="41:19" pos:end="41:19">&lt;</operator> <name pos:start="41:21" pos:end="41:29">nrawaddrs</name></expr>;</condition> <incr pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><name pos:start="41:32" pos:end="41:32">i</name><operator pos:start="41:33" pos:end="41:34">++</operator></expr></incr>)</control> <block pos:start="41:37" pos:end="72:5">{<block_content pos:start="43:9" pos:end="70:38">

        <decl_stmt pos:start="43:9" pos:end="43:58"><decl pos:start="43:9" pos:end="43:57"><type pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:24">QIOChannelSocket</name> <modifier pos:start="43:26" pos:end="43:26">*</modifier></type><name pos:start="43:27" pos:end="43:30">sioc</name> <init pos:start="43:32" pos:end="43:57">= <expr pos:start="43:34" pos:end="43:57"><call pos:start="43:34" pos:end="43:57"><name pos:start="43:34" pos:end="43:55">qio_channel_socket_new</name><argument_list pos:start="43:56" pos:end="43:57">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:54"><expr pos:start="47:9" pos:end="47:53"><call pos:start="47:9" pos:end="47:53"><name pos:start="47:9" pos:end="47:28">qio_channel_set_name</name><argument_list pos:start="47:29" pos:end="47:53">(<argument pos:start="47:30" pos:end="47:46"><expr pos:start="47:30" pos:end="47:46"><call pos:start="47:30" pos:end="47:46"><name pos:start="47:30" pos:end="47:40">QIO_CHANNEL</name><argument_list pos:start="47:41" pos:end="47:46">(<argument pos:start="47:42" pos:end="47:45"><expr pos:start="47:42" pos:end="47:45"><name pos:start="47:42" pos:end="47:45">sioc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="47:49" pos:end="47:52"><expr pos:start="47:49" pos:end="47:52"><name pos:start="47:49" pos:end="47:52">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="56:9"><if pos:start="49:9" pos:end="56:9">if <condition pos:start="49:12" pos:end="51:78">(<expr pos:start="49:13" pos:end="51:77"><call pos:start="49:13" pos:end="51:73"><name pos:start="49:13" pos:end="49:42">qio_channel_socket_listen_sync</name><argument_list pos:start="49:43" pos:end="51:73">(

                <argument pos:start="51:17" pos:end="51:20"><expr pos:start="51:17" pos:end="51:20"><name pos:start="51:17" pos:end="51:20">sioc</name></expr></argument>, <argument pos:start="51:23" pos:end="51:33"><expr pos:start="51:23" pos:end="51:33"><name pos:start="51:23" pos:end="51:33"><name pos:start="51:23" pos:end="51:30">rawaddrs</name><index pos:start="51:31" pos:end="51:33">[<expr pos:start="51:32" pos:end="51:32"><name pos:start="51:32" pos:end="51:32">i</name></expr>]</index></name></expr></argument>, <argument pos:start="51:36" pos:end="51:72"><expr pos:start="51:36" pos:end="51:72"><ternary pos:start="51:36" pos:end="51:72"><condition pos:start="51:36" pos:end="51:54"><expr pos:start="51:36" pos:end="51:52"><name pos:start="51:36" pos:end="51:44">listenerr</name> <operator pos:start="51:46" pos:end="51:47">==</operator> <name pos:start="51:49" pos:end="51:52">NULL</name></expr> ?</condition><then pos:start="51:56" pos:end="51:65"> <expr pos:start="51:56" pos:end="51:65"><operator pos:start="51:56" pos:end="51:56">&amp;</operator><name pos:start="51:57" pos:end="51:65">listenerr</name></expr> </then><else pos:start="51:67" pos:end="51:72">: <expr pos:start="51:69" pos:end="51:72"><name pos:start="51:69" pos:end="51:72">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator pos:start="51:75" pos:end="51:75">&lt;</operator> <literal type="number" pos:start="51:77" pos:end="51:77">0</literal></expr>)</condition> <block pos:start="51:80" pos:end="56:9">{<block_content pos:start="54:13" pos:end="54:21">


            <continue pos:start="54:13" pos:end="54:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="58:9" pos:end="58:25"><expr pos:start="58:9" pos:end="58:24"><name pos:start="58:9" pos:end="58:17">listening</name> <operator pos:start="58:19" pos:end="58:19">=</operator> <name pos:start="58:21" pos:end="58:24">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="60:9" pos:end="60:20"><expr pos:start="60:9" pos:end="60:19"><operator pos:start="60:9" pos:end="60:9">(</operator><operator pos:start="60:10" pos:end="60:10">*</operator><name pos:start="60:11" pos:end="60:16">nlsock</name><operator pos:start="60:17" pos:end="60:17">)</operator><operator pos:start="60:18" pos:end="60:19">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="62:9" pos:end="62:62"><expr pos:start="62:9" pos:end="62:61"><operator pos:start="62:9" pos:end="62:9">*</operator><name pos:start="62:10" pos:end="62:14">lsock</name> <operator pos:start="62:16" pos:end="62:16">=</operator> <call pos:start="62:18" pos:end="62:61"><name pos:start="62:18" pos:end="62:24">g_renew</name><argument_list pos:start="62:25" pos:end="62:61">(<argument pos:start="62:26" pos:end="62:43"><expr pos:start="62:26" pos:end="62:43"><name pos:start="62:26" pos:end="62:41">QIOChannelSocket</name> <operator pos:start="62:43" pos:end="62:43">*</operator></expr></argument>, <argument pos:start="62:46" pos:end="62:51"><expr pos:start="62:46" pos:end="62:51"><operator pos:start="62:46" pos:end="62:46">*</operator><name pos:start="62:47" pos:end="62:51">lsock</name></expr></argument>, <argument pos:start="62:54" pos:end="62:60"><expr pos:start="62:54" pos:end="62:60"><operator pos:start="62:54" pos:end="62:54">*</operator><name pos:start="62:55" pos:end="62:60">nlsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="64:9" pos:end="64:57"><expr pos:start="64:9" pos:end="64:56"><operator pos:start="64:9" pos:end="64:9">*</operator><name pos:start="64:10" pos:end="64:18">lsock_tag</name> <operator pos:start="64:20" pos:end="64:20">=</operator> <call pos:start="64:22" pos:end="64:56"><name pos:start="64:22" pos:end="64:28">g_renew</name><argument_list pos:start="64:29" pos:end="64:56">(<argument pos:start="64:30" pos:end="64:34"><expr pos:start="64:30" pos:end="64:34"><name pos:start="64:30" pos:end="64:34">guint</name></expr></argument>, <argument pos:start="64:37" pos:end="64:46"><expr pos:start="64:37" pos:end="64:46"><operator pos:start="64:37" pos:end="64:37">*</operator><name pos:start="64:38" pos:end="64:46">lsock_tag</name></expr></argument>, <argument pos:start="64:49" pos:end="64:55"><expr pos:start="64:49" pos:end="64:55"><operator pos:start="64:49" pos:end="64:49">*</operator><name pos:start="64:50" pos:end="64:55">nlsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="68:9" pos:end="68:37"><expr pos:start="68:9" pos:end="68:36"><operator pos:start="68:9" pos:end="68:9">(</operator><operator pos:start="68:10" pos:end="68:10">*</operator><name pos:start="68:11" pos:end="68:15">lsock</name><operator pos:start="68:16" pos:end="68:16">)</operator><index pos:start="68:17" pos:end="68:29">[<expr pos:start="68:18" pos:end="68:28"><operator pos:start="68:18" pos:end="68:18">*</operator><name pos:start="68:19" pos:end="68:24">nlsock</name> <operator pos:start="68:26" pos:end="68:26">-</operator> <literal type="number" pos:start="68:28" pos:end="68:28">1</literal></expr>]</index> <operator pos:start="68:31" pos:end="68:31">=</operator> <name pos:start="68:33" pos:end="68:36">sioc</name></expr>;</expr_stmt>

        <expr_stmt pos:start="70:9" pos:end="70:38"><expr pos:start="70:9" pos:end="70:37"><operator pos:start="70:9" pos:end="70:9">(</operator><operator pos:start="70:10" pos:end="70:10">*</operator><name pos:start="70:11" pos:end="70:19">lsock_tag</name><operator pos:start="70:20" pos:end="70:20">)</operator><index pos:start="70:21" pos:end="70:33">[<expr pos:start="70:22" pos:end="70:32"><operator pos:start="70:22" pos:end="70:22">*</operator><name pos:start="70:23" pos:end="70:28">nlsock</name> <operator pos:start="70:30" pos:end="70:30">-</operator> <literal type="number" pos:start="70:32" pos:end="70:32">1</literal></expr>]</index> <operator pos:start="70:35" pos:end="70:35">=</operator> <literal type="number" pos:start="70:37" pos:end="70:37">0</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <for pos:start="76:5" pos:end="80:5">for <control pos:start="76:9" pos:end="76:35">(<init pos:start="76:10" pos:end="76:15"><expr pos:start="76:10" pos:end="76:14"><name pos:start="76:10" pos:end="76:10">i</name> <operator pos:start="76:12" pos:end="76:12">=</operator> <literal type="number" pos:start="76:14" pos:end="76:14">0</literal></expr>;</init> <condition pos:start="76:17" pos:end="76:30"><expr pos:start="76:17" pos:end="76:29"><name pos:start="76:17" pos:end="76:17">i</name> <operator pos:start="76:19" pos:end="76:19">&lt;</operator> <name pos:start="76:21" pos:end="76:29">nrawaddrs</name></expr>;</condition> <incr pos:start="76:32" pos:end="76:34"><expr pos:start="76:32" pos:end="76:34"><name pos:start="76:32" pos:end="76:32">i</name><operator pos:start="76:33" pos:end="76:34">++</operator></expr></incr>)</control> <block pos:start="76:37" pos:end="80:5">{<block_content pos:start="78:9" pos:end="78:45">

        <expr_stmt pos:start="78:9" pos:end="78:45"><expr pos:start="78:9" pos:end="78:44"><call pos:start="78:9" pos:end="78:44"><name pos:start="78:9" pos:end="78:31">qapi_free_SocketAddress</name><argument_list pos:start="78:32" pos:end="78:44">(<argument pos:start="78:33" pos:end="78:43"><expr pos:start="78:33" pos:end="78:43"><name pos:start="78:33" pos:end="78:43"><name pos:start="78:33" pos:end="78:40">rawaddrs</name><index pos:start="78:41" pos:end="78:43">[<expr pos:start="78:42" pos:end="78:42"><name pos:start="78:42" pos:end="78:42">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="82:5" pos:end="82:21"><expr pos:start="82:5" pos:end="82:20"><call pos:start="82:5" pos:end="82:20"><name pos:start="82:5" pos:end="82:10">g_free</name><argument_list pos:start="82:11" pos:end="82:20">(<argument pos:start="82:12" pos:end="82:19"><expr pos:start="82:12" pos:end="82:19"><name pos:start="82:12" pos:end="82:19">rawaddrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="86:5" pos:end="100:5"><if pos:start="86:5" pos:end="100:5">if <condition pos:start="86:8" pos:end="86:18">(<expr pos:start="86:9" pos:end="86:17"><name pos:start="86:9" pos:end="86:17">listenerr</name></expr>)</condition> <block pos:start="86:20" pos:end="100:5">{<block_content pos:start="88:9" pos:end="98:9">

        <if_stmt pos:start="88:9" pos:end="98:9"><if pos:start="88:9" pos:end="94:9">if <condition pos:start="88:12" pos:end="88:23">(<expr pos:start="88:13" pos:end="88:22"><operator pos:start="88:13" pos:end="88:13">!</operator><name pos:start="88:14" pos:end="88:22">listening</name></expr>)</condition> <block pos:start="88:25" pos:end="94:9">{<block_content pos:start="90:13" pos:end="92:22">

            <expr_stmt pos:start="90:13" pos:end="90:45"><expr pos:start="90:13" pos:end="90:44"><call pos:start="90:13" pos:end="90:44"><name pos:start="90:13" pos:end="90:27">error_propagate</name><argument_list pos:start="90:28" pos:end="90:44">(<argument pos:start="90:29" pos:end="90:32"><expr pos:start="90:29" pos:end="90:32"><name pos:start="90:29" pos:end="90:32">errp</name></expr></argument>, <argument pos:start="90:35" pos:end="90:43"><expr pos:start="90:35" pos:end="90:43"><name pos:start="90:35" pos:end="90:43">listenerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="92:13" pos:end="92:22">return <expr pos:start="92:20" pos:end="92:21"><operator pos:start="92:20" pos:end="92:20">-</operator><literal type="number" pos:start="92:21" pos:end="92:21">1</literal></expr>;</return>

        </block_content>}</block></if> <else pos:start="94:11" pos:end="98:9">else <block pos:start="94:16" pos:end="98:9">{<block_content pos:start="96:13" pos:end="96:34">

            <expr_stmt pos:start="96:13" pos:end="96:34"><expr pos:start="96:13" pos:end="96:33"><call pos:start="96:13" pos:end="96:33"><name pos:start="96:13" pos:end="96:22">error_free</name><argument_list pos:start="96:23" pos:end="96:33">(<argument pos:start="96:24" pos:end="96:32"><expr pos:start="96:24" pos:end="96:32"><name pos:start="96:24" pos:end="96:32">listenerr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="104:5" pos:end="112:5">for <control pos:start="104:9" pos:end="104:33">(<init pos:start="104:10" pos:end="104:15"><expr pos:start="104:10" pos:end="104:14"><name pos:start="104:10" pos:end="104:10">i</name> <operator pos:start="104:12" pos:end="104:12">=</operator> <literal type="number" pos:start="104:14" pos:end="104:14">0</literal></expr>;</init> <condition pos:start="104:17" pos:end="104:28"><expr pos:start="104:17" pos:end="104:27"><name pos:start="104:17" pos:end="104:17">i</name> <operator pos:start="104:19" pos:end="104:19">&lt;</operator> <operator pos:start="104:21" pos:end="104:21">*</operator><name pos:start="104:22" pos:end="104:27">nlsock</name></expr>;</condition> <incr pos:start="104:30" pos:end="104:32"><expr pos:start="104:30" pos:end="104:32"><name pos:start="104:30" pos:end="104:30">i</name><operator pos:start="104:31" pos:end="104:32">++</operator></expr></incr>)</control> <block pos:start="104:35" pos:end="112:5">{<block_content pos:start="106:9" pos:end="110:46">

        <expr_stmt pos:start="106:9" pos:end="110:46"><expr pos:start="106:9" pos:end="110:45"><operator pos:start="106:9" pos:end="106:9">(</operator><operator pos:start="106:10" pos:end="106:10">*</operator><name pos:start="106:11" pos:end="106:19">lsock_tag</name><operator pos:start="106:20" pos:end="106:20">)</operator><index pos:start="106:21" pos:end="106:23">[<expr pos:start="106:22" pos:end="106:22"><name pos:start="106:22" pos:end="106:22">i</name></expr>]</index> <operator pos:start="106:25" pos:end="106:25">=</operator> <call pos:start="106:27" pos:end="110:45"><name pos:start="106:27" pos:end="106:47">qio_channel_add_watch</name><argument_list pos:start="106:48" pos:end="110:45">(

            <argument pos:start="108:13" pos:end="108:36"><expr pos:start="108:13" pos:end="108:36"><call pos:start="108:13" pos:end="108:36"><name pos:start="108:13" pos:end="108:23">QIO_CHANNEL</name><argument_list pos:start="108:24" pos:end="108:36">(<argument pos:start="108:25" pos:end="108:35"><expr pos:start="108:25" pos:end="108:35"><operator pos:start="108:25" pos:end="108:25">(</operator><operator pos:start="108:26" pos:end="108:26">*</operator><name pos:start="108:27" pos:end="108:31">lsock</name><operator pos:start="108:32" pos:end="108:32">)</operator><index pos:start="108:33" pos:end="108:35">[<expr pos:start="108:34" pos:end="108:34"><name pos:start="108:34" pos:end="108:34">i</name></expr>]</index></expr></argument>)</argument_list></call></expr></argument>,

            <argument pos:start="110:13" pos:end="110:19"><expr pos:start="110:13" pos:end="110:19"><name pos:start="110:13" pos:end="110:19">G_IO_IN</name></expr></argument>, <argument pos:start="110:22" pos:end="110:34"><expr pos:start="110:22" pos:end="110:34"><name pos:start="110:22" pos:end="110:34">vnc_listen_io</name></expr></argument>, <argument pos:start="110:37" pos:end="110:38"><expr pos:start="110:37" pos:end="110:38"><name pos:start="110:37" pos:end="110:38">vd</name></expr></argument>, <argument pos:start="110:41" pos:end="110:44"><expr pos:start="110:41" pos:end="110:44"><name pos:start="110:41" pos:end="110:44">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="116:5" pos:end="116:13">return <expr pos:start="116:12" pos:end="116:12"><literal type="number" pos:start="116:12" pos:end="116:12">0</literal></expr>;</return>

</block_content>}</block></function></unit>
