<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4466.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">local_symlink</name><parameter_list pos:start="1:25" pos:end="3:43">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:42"><name pos:start="1:26" pos:end="1:34">FsContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:42">fs_ctx</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:63"><decl pos:start="1:45" pos:end="1:63"><type pos:start="1:45" pos:end="1:63"><specifier pos:start="1:45" pos:end="1:49">const</specifier> <name pos:start="1:51" pos:end="1:54">char</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:63">oldpath</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:27"><decl pos:start="3:9" pos:end="3:27"><type pos:start="3:9" pos:end="3:27"><specifier pos:start="3:9" pos:end="3:13">const</specifier> <name pos:start="3:15" pos:end="3:18">char</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier></type><name pos:start="3:21" pos:end="3:27">newpath</name></decl></parameter>, <parameter pos:start="3:30" pos:end="3:42"><decl pos:start="3:30" pos:end="3:42"><type pos:start="3:30" pos:end="3:42"><name pos:start="3:30" pos:end="3:35">FsCred</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier></type><name pos:start="3:38" pos:end="3:42">credp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="121:1">{<block_content pos:start="7:5" pos:end="119:15">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">err</name> <init pos:start="7:13" pos:end="7:16">= <expr pos:start="7:15" pos:end="7:16"><operator pos:start="7:15" pos:end="7:15">-</operator><literal type="number" pos:start="7:16" pos:end="7:16">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">serrno</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:38">/* Determine the security model */</comment>

    <if_stmt pos:start="15:5" pos:end="107:5"><if pos:start="15:5" pos:end="71:5">if <condition pos:start="15:8" pos:end="15:35">(<expr pos:start="15:9" pos:end="15:34"><name pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:14">fs_ctx</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:21">fs_sm</name></name> <operator pos:start="15:23" pos:end="15:24">==</operator> <name pos:start="15:26" pos:end="15:34">SM_MAPPED</name></expr>)</condition> <block pos:start="15:37" pos:end="71:5">{<block_content pos:start="17:9" pos:end="69:9">

        <decl_stmt pos:start="17:9" pos:end="17:15"><decl pos:start="17:9" pos:end="17:14"><type pos:start="17:9" pos:end="17:11"><name pos:start="17:9" pos:end="17:11">int</name></type> <name pos:start="17:13" pos:end="17:14">fd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:41"><decl pos:start="19:9" pos:end="19:28"><type pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:15">ssize_t</name></type> <name pos:start="19:17" pos:end="19:28">oldpath_size</name></decl>, <decl pos:start="19:31" pos:end="19:40"><type ref="prev" pos:start="19:9" pos:end="19:15"/><name pos:start="19:31" pos:end="19:40">write_size</name></decl>;</decl_stmt>

        <expr_stmt pos:start="21:9" pos:end="23:36"><expr pos:start="21:9" pos:end="23:35"><name pos:start="21:9" pos:end="21:10">fd</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <call pos:start="21:14" pos:end="23:35"><name pos:start="21:14" pos:end="21:17">open</name><argument_list pos:start="21:18" pos:end="23:35">(<argument pos:start="21:19" pos:end="21:40"><expr pos:start="21:19" pos:end="21:40"><call pos:start="21:19" pos:end="21:40"><name pos:start="21:19" pos:end="21:23">rpath</name><argument_list pos:start="21:24" pos:end="21:40">(<argument pos:start="21:25" pos:end="21:30"><expr pos:start="21:25" pos:end="21:30"><name pos:start="21:25" pos:end="21:30">fs_ctx</name></expr></argument>, <argument pos:start="21:33" pos:end="21:39"><expr pos:start="21:33" pos:end="21:39"><name pos:start="21:33" pos:end="21:39">newpath</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="21:43" pos:end="21:63"><expr pos:start="21:43" pos:end="21:63"><name pos:start="21:43" pos:end="21:49">O_CREAT</name><operator pos:start="21:50" pos:end="21:50">|</operator><name pos:start="21:51" pos:end="21:56">O_EXCL</name><operator pos:start="21:57" pos:end="21:57">|</operator><name pos:start="21:58" pos:end="21:63">O_RDWR</name></expr></argument>,

                <argument pos:start="23:17" pos:end="23:34"><expr pos:start="23:17" pos:end="23:34"><name pos:start="23:17" pos:end="23:34">SM_LOCAL_MODE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="29:9"><if pos:start="25:9" pos:end="29:9">if <condition pos:start="25:12" pos:end="25:21">(<expr pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:14">fd</name> <operator pos:start="25:16" pos:end="25:17">==</operator> <operator pos:start="25:19" pos:end="25:19">-</operator><literal type="number" pos:start="25:20" pos:end="25:20">1</literal></expr>)</condition> <block pos:start="25:23" pos:end="29:9">{<block_content pos:start="27:13" pos:end="27:22">

            <return pos:start="27:13" pos:end="27:22">return <expr pos:start="27:20" pos:end="27:21"><name pos:start="27:20" pos:end="27:21">fd</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="31:9" pos:end="31:53">/* Write the oldpath (target) to the file. */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:43"><expr pos:start="33:9" pos:end="33:42"><name pos:start="33:9" pos:end="33:20">oldpath_size</name> <operator pos:start="33:22" pos:end="33:22">=</operator> <call pos:start="33:24" pos:end="33:38"><name pos:start="33:24" pos:end="33:29">strlen</name><argument_list pos:start="33:30" pos:end="33:38">(<argument pos:start="33:31" pos:end="33:37"><expr pos:start="33:31" pos:end="33:37"><name pos:start="33:31" pos:end="33:37">oldpath</name></expr></argument>)</argument_list></call> <operator pos:start="33:40" pos:end="33:40">+</operator> <literal type="number" pos:start="33:42" pos:end="33:42">1</literal></expr>;</expr_stmt>

        <do pos:start="35:9" pos:end="39:53">do <block pos:start="35:12" pos:end="39:9">{<block_content pos:start="37:13" pos:end="37:66">

            <expr_stmt pos:start="37:13" pos:end="37:66"><expr pos:start="37:13" pos:end="37:65"><name pos:start="37:13" pos:end="37:22">write_size</name> <operator pos:start="37:24" pos:end="37:24">=</operator> <call pos:start="37:26" pos:end="37:65"><name pos:start="37:26" pos:end="37:30">write</name><argument_list pos:start="37:31" pos:end="37:65">(<argument pos:start="37:32" pos:end="37:33"><expr pos:start="37:32" pos:end="37:33"><name pos:start="37:32" pos:end="37:33">fd</name></expr></argument>, <argument pos:start="37:36" pos:end="37:50"><expr pos:start="37:36" pos:end="37:50"><operator pos:start="37:36" pos:end="37:36">(</operator><name pos:start="37:37" pos:end="37:40">void</name> <operator pos:start="37:42" pos:end="37:42">*</operator><operator pos:start="37:43" pos:end="37:43">)</operator><name pos:start="37:44" pos:end="37:50">oldpath</name></expr></argument>, <argument pos:start="37:53" pos:end="37:64"><expr pos:start="37:53" pos:end="37:64"><name pos:start="37:53" pos:end="37:64">oldpath_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="39:17" pos:end="39:52">(<expr pos:start="39:18" pos:end="39:51"><name pos:start="39:18" pos:end="39:27">write_size</name> <operator pos:start="39:29" pos:end="39:30">==</operator> <operator pos:start="39:32" pos:end="39:32">-</operator><literal type="number" pos:start="39:33" pos:end="39:33">1</literal> <operator pos:start="39:35" pos:end="39:36">&amp;&amp;</operator> <name pos:start="39:38" pos:end="39:42">errno</name> <operator pos:start="39:44" pos:end="39:45">==</operator> <name pos:start="39:47" pos:end="39:51">EINTR</name></expr>)</condition>;</do>



        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="53:9">if <condition pos:start="43:12" pos:end="43:39">(<expr pos:start="43:13" pos:end="43:38"><name pos:start="43:13" pos:end="43:22">write_size</name> <operator pos:start="43:24" pos:end="43:25">!=</operator> <name pos:start="43:27" pos:end="43:38">oldpath_size</name></expr>)</condition> <block pos:start="43:41" pos:end="53:9">{<block_content pos:start="45:13" pos:end="51:25">

            <expr_stmt pos:start="45:13" pos:end="45:27"><expr pos:start="45:13" pos:end="45:26"><name pos:start="45:13" pos:end="45:18">serrno</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:26">errno</name></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:22"><expr pos:start="47:13" pos:end="47:21"><call pos:start="47:13" pos:end="47:21"><name pos:start="47:13" pos:end="47:17">close</name><argument_list pos:start="47:18" pos:end="47:21">(<argument pos:start="47:19" pos:end="47:20"><expr pos:start="47:19" pos:end="47:20"><name pos:start="47:19" pos:end="47:20">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:21"><expr pos:start="49:13" pos:end="49:20"><name pos:start="49:13" pos:end="49:15">err</name> <operator pos:start="49:17" pos:end="49:17">=</operator> <operator pos:start="49:19" pos:end="49:19">-</operator><literal type="number" pos:start="49:20" pos:end="49:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="51:13" pos:end="51:25">goto <name pos:start="51:18" pos:end="51:24">err_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:18"><expr pos:start="55:9" pos:end="55:17"><call pos:start="55:9" pos:end="55:17"><name pos:start="55:9" pos:end="55:13">close</name><argument_list pos:start="55:14" pos:end="55:17">(<argument pos:start="55:15" pos:end="55:16"><expr pos:start="55:15" pos:end="55:16"><name pos:start="55:15" pos:end="55:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="57:9" pos:end="57:55">/* Set cleint credentials in symlink's xattr */</comment>

        <expr_stmt pos:start="59:9" pos:end="59:48"><expr pos:start="59:9" pos:end="59:47"><name pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:13">credp</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:22">fc_mode</name></name> <operator pos:start="59:24" pos:end="59:24">=</operator> <name pos:start="59:26" pos:end="59:39"><name pos:start="59:26" pos:end="59:30">credp</name><operator pos:start="59:31" pos:end="59:32">-&gt;</operator><name pos:start="59:33" pos:end="59:39">fc_mode</name></name><operator pos:start="59:40" pos:end="59:40">|</operator><name pos:start="59:41" pos:end="59:47">S_IFLNK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:61"><expr pos:start="61:9" pos:end="61:60"><name pos:start="61:9" pos:end="61:11">err</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:60"><name pos:start="61:15" pos:end="61:29">local_set_xattr</name><argument_list pos:start="61:30" pos:end="61:60">(<argument pos:start="61:31" pos:end="61:52"><expr pos:start="61:31" pos:end="61:52"><call pos:start="61:31" pos:end="61:52"><name pos:start="61:31" pos:end="61:35">rpath</name><argument_list pos:start="61:36" pos:end="61:52">(<argument pos:start="61:37" pos:end="61:42"><expr pos:start="61:37" pos:end="61:42"><name pos:start="61:37" pos:end="61:42">fs_ctx</name></expr></argument>, <argument pos:start="61:45" pos:end="61:51"><expr pos:start="61:45" pos:end="61:51"><name pos:start="61:45" pos:end="61:51">newpath</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="61:55" pos:end="61:59"><expr pos:start="61:55" pos:end="61:59"><name pos:start="61:55" pos:end="61:59">credp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:22">(<expr pos:start="63:13" pos:end="63:21"><name pos:start="63:13" pos:end="63:15">err</name> <operator pos:start="63:17" pos:end="63:18">==</operator> <operator pos:start="63:20" pos:end="63:20">-</operator><literal type="number" pos:start="63:21" pos:end="63:21">1</literal></expr>)</condition> <block pos:start="63:24" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:25">

            <expr_stmt pos:start="65:13" pos:end="65:27"><expr pos:start="65:13" pos:end="65:26"><name pos:start="65:13" pos:end="65:18">serrno</name> <operator pos:start="65:20" pos:end="65:20">=</operator> <name pos:start="65:22" pos:end="65:26">errno</name></expr>;</expr_stmt>

            <goto pos:start="67:13" pos:end="67:25">goto <name pos:start="67:18" pos:end="67:24">err_end</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="71:7" pos:end="107:5">else if <condition pos:start="71:15" pos:end="73:42">(<expr pos:start="71:16" pos:end="73:41"><operator pos:start="71:16" pos:end="71:16">(</operator><name pos:start="71:17" pos:end="71:29"><name pos:start="71:17" pos:end="71:22">fs_ctx</name><operator pos:start="71:23" pos:end="71:24">-&gt;</operator><name pos:start="71:25" pos:end="71:29">fs_sm</name></name> <operator pos:start="71:31" pos:end="71:32">==</operator> <name pos:start="71:34" pos:end="71:47">SM_PASSTHROUGH</name><operator pos:start="71:48" pos:end="71:48">)</operator> <operator pos:start="71:50" pos:end="71:51">||</operator>

               <operator pos:start="73:16" pos:end="73:16">(</operator><name pos:start="73:17" pos:end="73:29"><name pos:start="73:17" pos:end="73:22">fs_ctx</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:29">fs_sm</name></name> <operator pos:start="73:31" pos:end="73:32">==</operator> <name pos:start="73:34" pos:end="73:40">SM_NONE</name><operator pos:start="73:41" pos:end="73:41">)</operator></expr>)</condition> <block pos:start="73:44" pos:end="107:5">{<block_content pos:start="75:9" pos:end="105:9">

        <expr_stmt pos:start="75:9" pos:end="75:55"><expr pos:start="75:9" pos:end="75:54"><name pos:start="75:9" pos:end="75:11">err</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:54"><name pos:start="75:15" pos:end="75:21">symlink</name><argument_list pos:start="75:22" pos:end="75:54">(<argument pos:start="75:23" pos:end="75:29"><expr pos:start="75:23" pos:end="75:29"><name pos:start="75:23" pos:end="75:29">oldpath</name></expr></argument>, <argument pos:start="75:32" pos:end="75:53"><expr pos:start="75:32" pos:end="75:53"><call pos:start="75:32" pos:end="75:53"><name pos:start="75:32" pos:end="75:36">rpath</name><argument_list pos:start="75:37" pos:end="75:53">(<argument pos:start="75:38" pos:end="75:43"><expr pos:start="75:38" pos:end="75:43"><name pos:start="75:38" pos:end="75:43">fs_ctx</name></expr></argument>, <argument pos:start="75:46" pos:end="75:52"><expr pos:start="75:46" pos:end="75:52"><name pos:start="75:46" pos:end="75:52">newpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:16">(<expr pos:start="77:13" pos:end="77:15"><name pos:start="77:13" pos:end="77:15">err</name></expr>)</condition> <block pos:start="77:18" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:23">

            <return pos:start="79:13" pos:end="79:23">return <expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">err</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:75"><expr pos:start="83:9" pos:end="83:74"><name pos:start="83:9" pos:end="83:11">err</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:74"><name pos:start="83:15" pos:end="83:20">lchown</name><argument_list pos:start="83:21" pos:end="83:74">(<argument pos:start="83:22" pos:end="83:43"><expr pos:start="83:22" pos:end="83:43"><call pos:start="83:22" pos:end="83:43"><name pos:start="83:22" pos:end="83:26">rpath</name><argument_list pos:start="83:27" pos:end="83:43">(<argument pos:start="83:28" pos:end="83:33"><expr pos:start="83:28" pos:end="83:33"><name pos:start="83:28" pos:end="83:33">fs_ctx</name></expr></argument>, <argument pos:start="83:36" pos:end="83:42"><expr pos:start="83:36" pos:end="83:42"><name pos:start="83:36" pos:end="83:42">newpath</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="83:46" pos:end="83:58"><expr pos:start="83:46" pos:end="83:58"><name pos:start="83:46" pos:end="83:58"><name pos:start="83:46" pos:end="83:50">credp</name><operator pos:start="83:51" pos:end="83:52">-&gt;</operator><name pos:start="83:53" pos:end="83:58">fc_uid</name></name></expr></argument>, <argument pos:start="83:61" pos:end="83:73"><expr pos:start="83:61" pos:end="83:73"><name pos:start="83:61" pos:end="83:73"><name pos:start="83:61" pos:end="83:65">credp</name><operator pos:start="83:66" pos:end="83:67">-&gt;</operator><name pos:start="83:68" pos:end="83:73">fc_gid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="105:9"><if pos:start="85:9" pos:end="105:9">if <condition pos:start="85:12" pos:end="85:22">(<expr pos:start="85:13" pos:end="85:21"><name pos:start="85:13" pos:end="85:15">err</name> <operator pos:start="85:17" pos:end="85:18">==</operator> <operator pos:start="85:20" pos:end="85:20">-</operator><literal type="number" pos:start="85:21" pos:end="85:21">1</literal></expr>)</condition> <block pos:start="85:24" pos:end="105:9">{<block_content pos:start="95:13" pos:end="103:24">

            <comment type="block" pos:start="87:13" pos:end="93:15">/*

             * If we fail to change ownership and if we are

             * using security model none. Ignore the error

             */</comment>

            <if_stmt pos:start="95:13" pos:end="103:24"><if pos:start="95:13" pos:end="101:13">if <condition pos:start="95:16" pos:end="95:41">(<expr pos:start="95:17" pos:end="95:40"><name pos:start="95:17" pos:end="95:29"><name pos:start="95:17" pos:end="95:22">fs_ctx</name><operator pos:start="95:23" pos:end="95:24">-&gt;</operator><name pos:start="95:25" pos:end="95:29">fs_sm</name></name> <operator pos:start="95:31" pos:end="95:32">!=</operator> <name pos:start="95:34" pos:end="95:40">SM_NONE</name></expr>)</condition> <block pos:start="95:43" pos:end="101:13">{<block_content pos:start="97:17" pos:end="99:29">

                <expr_stmt pos:start="97:17" pos:end="97:31"><expr pos:start="97:17" pos:end="97:30"><name pos:start="97:17" pos:end="97:22">serrno</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <name pos:start="97:26" pos:end="97:30">errno</name></expr>;</expr_stmt>

                <goto pos:start="99:17" pos:end="99:29">goto <name pos:start="99:22" pos:end="99:28">err_end</name>;</goto>

            </block_content>}</block></if> <else pos:start="101:15" pos:end="103:24">else<block type="pseudo" pos:start="103:17" pos:end="103:24"><block_content pos:start="103:17" pos:end="103:24">

                <expr_stmt pos:start="103:17" pos:end="103:24"><expr pos:start="103:17" pos:end="103:23"><name pos:start="103:17" pos:end="103:19">err</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <literal type="number" pos:start="103:23" pos:end="103:23">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="109:5" pos:end="109:15">return <expr pos:start="109:12" pos:end="109:14"><name pos:start="109:12" pos:end="109:14">err</name></expr>;</return>



<label pos:start="113:1" pos:end="113:8"><name pos:start="113:1" pos:end="113:7">err_end</name>:</label>

    <expr_stmt pos:start="115:5" pos:end="115:35"><expr pos:start="115:5" pos:end="115:34"><call pos:start="115:5" pos:end="115:34"><name pos:start="115:5" pos:end="115:10">remove</name><argument_list pos:start="115:11" pos:end="115:34">(<argument pos:start="115:12" pos:end="115:33"><expr pos:start="115:12" pos:end="115:33"><call pos:start="115:12" pos:end="115:33"><name pos:start="115:12" pos:end="115:16">rpath</name><argument_list pos:start="115:17" pos:end="115:33">(<argument pos:start="115:18" pos:end="115:23"><expr pos:start="115:18" pos:end="115:23"><name pos:start="115:18" pos:end="115:23">fs_ctx</name></expr></argument>, <argument pos:start="115:26" pos:end="115:32"><expr pos:start="115:26" pos:end="115:32"><name pos:start="115:26" pos:end="115:32">newpath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:19"><expr pos:start="117:5" pos:end="117:18"><name pos:start="117:5" pos:end="117:9">errno</name> <operator pos:start="117:11" pos:end="117:11">=</operator> <name pos:start="117:13" pos:end="117:18">serrno</name></expr>;</expr_stmt>

    <return pos:start="119:5" pos:end="119:15">return <expr pos:start="119:12" pos:end="119:14"><name pos:start="119:12" pos:end="119:14">err</name></expr>;</return>

</block_content>}</block></function>
</unit>
