<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5843.c" pos:tabs="8"><function pos:start="1:1" pos:end="349:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:19">coroutine_fn</name> <name pos:start="1:21" pos:end="1:24">void</name></type> <name pos:start="1:26" pos:end="1:33">nbd_trip</name><parameter_list pos:start="1:34" pos:end="1:47">(<parameter pos:start="1:35" pos:end="1:46"><decl pos:start="1:35" pos:end="1:46"><type pos:start="1:35" pos:end="1:40"><name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:46">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="349:1">{<block_content pos:start="5:5" pos:end="347:27">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">NBDClient</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:21">client</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><name pos:start="5:25" pos:end="5:30">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">NBDExport</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:18">exp</name> <init pos:start="7:20" pos:end="7:32">= <expr pos:start="7:22" pos:end="7:32"><name pos:start="7:22" pos:end="7:32"><name pos:start="7:22" pos:end="7:27">client</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:32">exp</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">NBDRequestData</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:23">req</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:14">NBDRequest</name></type> <name pos:start="11:16" pos:end="11:22">request</name> <init pos:start="11:24" pos:end="11:30">= <expr pos:start="11:26" pos:end="11:30"><block pos:start="11:26" pos:end="11:30">{ <expr pos:start="11:28" pos:end="11:28"><literal type="number" pos:start="11:28" pos:end="11:28">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>    <comment type="block" pos:start="11:36" pos:end="11:80">/* GCC thinks it can be used uninitialized */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:22">reply_data_len</name> <init pos:start="17:24" pos:end="17:26">= <expr pos:start="17:26" pos:end="17:26"><literal type="number" pos:start="17:26" pos:end="17:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:11"><name pos:start="19:5" pos:end="19:9">Error</name> <modifier pos:start="19:11" pos:end="19:11">*</modifier></type><name pos:start="19:12" pos:end="19:20">local_err</name> <init pos:start="19:22" pos:end="19:27">= <expr pos:start="19:24" pos:end="19:27"><name pos:start="19:24" pos:end="19:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:10"><name pos:start="21:5" pos:end="21:8">char</name> <modifier pos:start="21:10" pos:end="21:10">*</modifier></type><name pos:start="21:11" pos:end="21:13">msg</name> <init pos:start="21:15" pos:end="21:20">= <expr pos:start="21:17" pos:end="21:20"><name pos:start="21:17" pos:end="21:20">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:21"><expr pos:start="25:5" pos:end="25:20"><call pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:18">trace_nbd_trip</name><argument_list pos:start="25:19" pos:end="25:20">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:24">(<expr pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:23"><name pos:start="27:9" pos:end="27:14">client</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:23">closing</name></name></expr>)</condition> <block pos:start="27:26" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:15">

        <expr_stmt pos:start="29:9" pos:end="29:31"><expr pos:start="29:9" pos:end="29:30"><call pos:start="29:9" pos:end="29:30"><name pos:start="29:9" pos:end="29:22">nbd_client_put</name><argument_list pos:start="29:23" pos:end="29:30">(<argument pos:start="29:24" pos:end="29:29"><expr pos:start="29:24" pos:end="29:29"><name pos:start="29:24" pos:end="29:29">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:34"><expr pos:start="37:5" pos:end="37:33"><name pos:start="37:5" pos:end="37:7">req</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:33"><name pos:start="37:11" pos:end="37:25">nbd_request_get</name><argument_list pos:start="37:26" pos:end="37:33">(<argument pos:start="37:27" pos:end="37:32"><expr pos:start="37:27" pos:end="37:32"><name pos:start="37:27" pos:end="37:32">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:60"><expr pos:start="39:5" pos:end="39:59"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:59"><name pos:start="39:11" pos:end="39:32">nbd_co_receive_request</name><argument_list pos:start="39:33" pos:end="39:59">(<argument pos:start="39:34" pos:end="39:36"><expr pos:start="39:34" pos:end="39:36"><name pos:start="39:34" pos:end="39:36">req</name></expr></argument>, <argument pos:start="39:39" pos:end="39:46"><expr pos:start="39:39" pos:end="39:46"><operator pos:start="39:39" pos:end="39:39">&amp;</operator><name pos:start="39:40" pos:end="39:46">request</name></expr></argument>, <argument pos:start="39:49" pos:end="39:58"><expr pos:start="39:49" pos:end="39:58"><operator pos:start="39:49" pos:end="39:49">&amp;</operator><name pos:start="39:50" pos:end="39:58">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:34"><expr pos:start="41:5" pos:end="41:33"><name pos:start="41:5" pos:end="41:26"><name pos:start="41:5" pos:end="41:10">client</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:26">recv_coroutine</name></name> <operator pos:start="41:28" pos:end="41:28">=</operator> <name pos:start="41:30" pos:end="41:33">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:44"><expr pos:start="43:5" pos:end="43:43"><call pos:start="43:5" pos:end="43:43"><name pos:start="43:5" pos:end="43:35">nbd_client_receive_next_request</name><argument_list pos:start="43:36" pos:end="43:43">(<argument pos:start="43:37" pos:end="43:42"><expr pos:start="43:37" pos:end="43:42"><name pos:start="43:37" pos:end="43:42">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:20">(<expr pos:start="45:9" pos:end="45:19"><name pos:start="45:9" pos:end="45:11">ret</name> <operator pos:start="45:13" pos:end="45:14">==</operator> <operator pos:start="45:16" pos:end="45:16">-</operator><name pos:start="45:17" pos:end="45:19">EIO</name></expr>)</condition> <block pos:start="45:22" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:24">

        <goto pos:start="47:9" pos:end="47:24">goto <name pos:start="47:14" pos:end="47:23">disconnect</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="53:5" pos:end="57:5"><if pos:start="53:5" pos:end="57:5">if <condition pos:start="53:8" pos:end="53:16">(<expr pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">&lt;</operator> <literal type="number" pos:start="53:15" pos:end="53:15">0</literal></expr>)</condition> <block pos:start="53:18" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:19">

        <goto pos:start="55:9" pos:end="55:19">goto <name pos:start="55:14" pos:end="55:18">reply</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="61:5" pos:end="73:5"><if pos:start="61:5" pos:end="73:5">if <condition pos:start="61:8" pos:end="61:24">(<expr pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:23"><name pos:start="61:9" pos:end="61:14">client</name><operator pos:start="61:15" pos:end="61:16">-&gt;</operator><name pos:start="61:17" pos:end="61:23">closing</name></name></expr>)</condition> <block pos:start="61:26" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:18">

        <comment type="block" pos:start="63:9" pos:end="69:11">/*

         * The client may be closed when we are blocked in

         * nbd_co_receive_request()

         */</comment>

        <goto pos:start="71:9" pos:end="71:18">goto <name pos:start="71:14" pos:end="71:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="77:5" pos:end="243:5">switch <condition pos:start="77:12" pos:end="77:25">(<expr pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:24"><name pos:start="77:13" pos:end="77:19">request</name><operator pos:start="77:20" pos:end="77:20">.</operator><name pos:start="77:21" pos:end="77:24">type</name></name></expr>)</condition> <block pos:start="77:27" pos:end="243:5">{<block_content pos:start="79:5" pos:end="241:22">

    <case pos:start="79:5" pos:end="79:22">case <expr pos:start="79:10" pos:end="79:21"><name pos:start="79:10" pos:end="79:21">NBD_CMD_READ</name></expr>:</case>

        <comment type="block" pos:start="81:9" pos:end="81:68">/* XXX: NBD Protocol only documents use of FUA with WRITE */</comment>

        <if_stmt pos:start="83:9" pos:end="95:9"><if pos:start="83:9" pos:end="95:9">if <condition pos:start="83:12" pos:end="83:45">(<expr pos:start="83:13" pos:end="83:44"><name pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:19">request</name><operator pos:start="83:20" pos:end="83:20">.</operator><name pos:start="83:21" pos:end="83:25">flags</name></name> <operator pos:start="83:27" pos:end="83:27">&amp;</operator> <name pos:start="83:29" pos:end="83:44">NBD_CMD_FLAG_FUA</name></expr>)</condition> <block pos:start="83:47" pos:end="95:9">{<block_content pos:start="85:13" pos:end="93:13">

            <expr_stmt pos:start="85:13" pos:end="85:41"><expr pos:start="85:13" pos:end="85:40"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <call pos:start="85:19" pos:end="85:40"><name pos:start="85:19" pos:end="85:30">blk_co_flush</name><argument_list pos:start="85:31" pos:end="85:40">(<argument pos:start="85:32" pos:end="85:39"><expr pos:start="85:32" pos:end="85:39"><name pos:start="85:32" pos:end="85:39"><name pos:start="85:32" pos:end="85:34">exp</name><operator pos:start="85:35" pos:end="85:36">-&gt;</operator><name pos:start="85:37" pos:end="85:39">blk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="87:13" pos:end="93:13"><if pos:start="87:13" pos:end="93:13">if <condition pos:start="87:16" pos:end="87:24">(<expr pos:start="87:17" pos:end="87:23"><name pos:start="87:17" pos:end="87:19">ret</name> <operator pos:start="87:21" pos:end="87:21">&lt;</operator> <literal type="number" pos:start="87:23" pos:end="87:23">0</literal></expr>)</condition> <block pos:start="87:26" pos:end="93:13">{<block_content pos:start="89:17" pos:end="91:22">

                <expr_stmt pos:start="89:17" pos:end="89:67"><expr pos:start="89:17" pos:end="89:66"><call pos:start="89:17" pos:end="89:66"><name pos:start="89:17" pos:end="89:32">error_setg_errno</name><argument_list pos:start="89:33" pos:end="89:66">(<argument pos:start="89:34" pos:end="89:43"><expr pos:start="89:34" pos:end="89:43"><operator pos:start="89:34" pos:end="89:34">&amp;</operator><name pos:start="89:35" pos:end="89:43">local_err</name></expr></argument>, <argument pos:start="89:46" pos:end="89:49"><expr pos:start="89:46" pos:end="89:49"><operator pos:start="89:46" pos:end="89:46">-</operator><name pos:start="89:47" pos:end="89:49">ret</name></expr></argument>, <argument pos:start="89:52" pos:end="89:65"><expr pos:start="89:52" pos:end="89:65"><literal type="string" pos:start="89:52" pos:end="89:65">"flush failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="91:17" pos:end="91:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="99:9" pos:end="101:48"><expr pos:start="99:9" pos:end="101:47"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <call pos:start="99:15" pos:end="101:47"><name pos:start="99:15" pos:end="99:23">blk_pread</name><argument_list pos:start="99:24" pos:end="101:47">(<argument pos:start="99:25" pos:end="99:32"><expr pos:start="99:25" pos:end="99:32"><name pos:start="99:25" pos:end="99:32"><name pos:start="99:25" pos:end="99:27">exp</name><operator pos:start="99:28" pos:end="99:29">-&gt;</operator><name pos:start="99:30" pos:end="99:32">blk</name></name></expr></argument>, <argument pos:start="99:35" pos:end="99:64"><expr pos:start="99:35" pos:end="99:64"><name pos:start="99:35" pos:end="99:46"><name pos:start="99:35" pos:end="99:41">request</name><operator pos:start="99:42" pos:end="99:42">.</operator><name pos:start="99:43" pos:end="99:46">from</name></name> <operator pos:start="99:48" pos:end="99:48">+</operator> <name pos:start="99:50" pos:end="99:64"><name pos:start="99:50" pos:end="99:52">exp</name><operator pos:start="99:53" pos:end="99:54">-&gt;</operator><name pos:start="99:55" pos:end="99:64">dev_offset</name></name></expr></argument>,

                        <argument pos:start="101:25" pos:end="101:33"><expr pos:start="101:25" pos:end="101:33"><name pos:start="101:25" pos:end="101:33"><name pos:start="101:25" pos:end="101:27">req</name><operator pos:start="101:28" pos:end="101:29">-&gt;</operator><name pos:start="101:30" pos:end="101:33">data</name></name></expr></argument>, <argument pos:start="101:36" pos:end="101:46"><expr pos:start="101:36" pos:end="101:46"><name pos:start="101:36" pos:end="101:46"><name pos:start="101:36" pos:end="101:42">request</name><operator pos:start="101:43" pos:end="101:43">.</operator><name pos:start="101:44" pos:end="101:46">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="109:9"><if pos:start="103:9" pos:end="109:9">if <condition pos:start="103:12" pos:end="103:20">(<expr pos:start="103:13" pos:end="103:19"><name pos:start="103:13" pos:end="103:15">ret</name> <operator pos:start="103:17" pos:end="103:17">&lt;</operator> <literal type="number" pos:start="103:19" pos:end="103:19">0</literal></expr>)</condition> <block pos:start="103:22" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:18">

            <expr_stmt pos:start="105:13" pos:end="105:75"><expr pos:start="105:13" pos:end="105:74"><call pos:start="105:13" pos:end="105:74"><name pos:start="105:13" pos:end="105:28">error_setg_errno</name><argument_list pos:start="105:29" pos:end="105:74">(<argument pos:start="105:30" pos:end="105:39"><expr pos:start="105:30" pos:end="105:39"><operator pos:start="105:30" pos:end="105:30">&amp;</operator><name pos:start="105:31" pos:end="105:39">local_err</name></expr></argument>, <argument pos:start="105:42" pos:end="105:45"><expr pos:start="105:42" pos:end="105:45"><operator pos:start="105:42" pos:end="105:42">-</operator><name pos:start="105:43" pos:end="105:45">ret</name></expr></argument>, <argument pos:start="105:48" pos:end="105:73"><expr pos:start="105:48" pos:end="105:73"><literal type="string" pos:start="105:48" pos:end="105:73">"reading from file failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:37"><expr pos:start="113:9" pos:end="113:36"><name pos:start="113:9" pos:end="113:22">reply_data_len</name> <operator pos:start="113:24" pos:end="113:24">=</operator> <name pos:start="113:26" pos:end="113:36"><name pos:start="113:26" pos:end="113:32">request</name><operator pos:start="113:33" pos:end="113:33">.</operator><name pos:start="113:34" pos:end="113:36">len</name></name></expr>;</expr_stmt>



        <break pos:start="117:9" pos:end="117:14">break;</break>

    <case pos:start="119:5" pos:end="119:23">case <expr pos:start="119:10" pos:end="119:22"><name pos:start="119:10" pos:end="119:22">NBD_CMD_WRITE</name></expr>:</case>

        <if_stmt pos:start="121:9" pos:end="129:9"><if pos:start="121:9" pos:end="129:9">if <condition pos:start="121:12" pos:end="121:47">(<expr pos:start="121:13" pos:end="121:46"><name pos:start="121:13" pos:end="121:25"><name pos:start="121:13" pos:end="121:15">exp</name><operator pos:start="121:16" pos:end="121:17">-&gt;</operator><name pos:start="121:18" pos:end="121:25">nbdflags</name></name> <operator pos:start="121:27" pos:end="121:27">&amp;</operator> <name pos:start="121:29" pos:end="121:46">NBD_FLAG_READ_ONLY</name></expr>)</condition> <block pos:start="121:49" pos:end="129:9">{<block_content pos:start="123:13" pos:end="127:18">

            <expr_stmt pos:start="123:13" pos:end="123:58"><expr pos:start="123:13" pos:end="123:57"><call pos:start="123:13" pos:end="123:57"><name pos:start="123:13" pos:end="123:22">error_setg</name><argument_list pos:start="123:23" pos:end="123:57">(<argument pos:start="123:24" pos:end="123:33"><expr pos:start="123:24" pos:end="123:33"><operator pos:start="123:24" pos:end="123:24">&amp;</operator><name pos:start="123:25" pos:end="123:33">local_err</name></expr></argument>, <argument pos:start="123:36" pos:end="123:56"><expr pos:start="123:36" pos:end="123:56"><literal type="string" pos:start="123:36" pos:end="123:56">"Export is read-only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:25"><expr pos:start="125:13" pos:end="125:24"><name pos:start="125:13" pos:end="125:15">ret</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <operator pos:start="125:19" pos:end="125:19">-</operator><name pos:start="125:20" pos:end="125:24">EROFS</name></expr>;</expr_stmt>

            <break pos:start="127:13" pos:end="127:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="133:9" pos:end="133:18"><expr pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:13">flags</name> <operator pos:start="133:15" pos:end="133:15">=</operator> <literal type="number" pos:start="133:17" pos:end="133:17">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="139:9"><if pos:start="135:9" pos:end="139:9">if <condition pos:start="135:12" pos:end="135:45">(<expr pos:start="135:13" pos:end="135:44"><name pos:start="135:13" pos:end="135:25"><name pos:start="135:13" pos:end="135:19">request</name><operator pos:start="135:20" pos:end="135:20">.</operator><name pos:start="135:21" pos:end="135:25">flags</name></name> <operator pos:start="135:27" pos:end="135:27">&amp;</operator> <name pos:start="135:29" pos:end="135:44">NBD_CMD_FLAG_FUA</name></expr>)</condition> <block pos:start="135:47" pos:end="139:9">{<block_content pos:start="137:13" pos:end="137:34">

            <expr_stmt pos:start="137:13" pos:end="137:34"><expr pos:start="137:13" pos:end="137:33"><name pos:start="137:13" pos:end="137:17">flags</name> <operator pos:start="137:19" pos:end="137:20">|=</operator> <name pos:start="137:22" pos:end="137:33">BDRV_REQ_FUA</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="141:9" pos:end="143:56"><expr pos:start="141:9" pos:end="143:55"><name pos:start="141:9" pos:end="141:11">ret</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <call pos:start="141:15" pos:end="143:55"><name pos:start="141:15" pos:end="141:24">blk_pwrite</name><argument_list pos:start="141:25" pos:end="143:55">(<argument pos:start="141:26" pos:end="141:33"><expr pos:start="141:26" pos:end="141:33"><name pos:start="141:26" pos:end="141:33"><name pos:start="141:26" pos:end="141:28">exp</name><operator pos:start="141:29" pos:end="141:30">-&gt;</operator><name pos:start="141:31" pos:end="141:33">blk</name></name></expr></argument>, <argument pos:start="141:36" pos:end="141:65"><expr pos:start="141:36" pos:end="141:65"><name pos:start="141:36" pos:end="141:47"><name pos:start="141:36" pos:end="141:42">request</name><operator pos:start="141:43" pos:end="141:43">.</operator><name pos:start="141:44" pos:end="141:47">from</name></name> <operator pos:start="141:49" pos:end="141:49">+</operator> <name pos:start="141:51" pos:end="141:65"><name pos:start="141:51" pos:end="141:53">exp</name><operator pos:start="141:54" pos:end="141:55">-&gt;</operator><name pos:start="141:56" pos:end="141:65">dev_offset</name></name></expr></argument>,

                         <argument pos:start="143:26" pos:end="143:34"><expr pos:start="143:26" pos:end="143:34"><name pos:start="143:26" pos:end="143:34"><name pos:start="143:26" pos:end="143:28">req</name><operator pos:start="143:29" pos:end="143:30">-&gt;</operator><name pos:start="143:31" pos:end="143:34">data</name></name></expr></argument>, <argument pos:start="143:37" pos:end="143:47"><expr pos:start="143:37" pos:end="143:47"><name pos:start="143:37" pos:end="143:47"><name pos:start="143:37" pos:end="143:43">request</name><operator pos:start="143:44" pos:end="143:44">.</operator><name pos:start="143:45" pos:end="143:47">len</name></name></expr></argument>, <argument pos:start="143:50" pos:end="143:54"><expr pos:start="143:50" pos:end="143:54"><name pos:start="143:50" pos:end="143:54">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="145:9" pos:end="149:9"><if pos:start="145:9" pos:end="149:9">if <condition pos:start="145:12" pos:end="145:20">(<expr pos:start="145:13" pos:end="145:19"><name pos:start="145:13" pos:end="145:15">ret</name> <operator pos:start="145:17" pos:end="145:17">&lt;</operator> <literal type="number" pos:start="145:19" pos:end="145:19">0</literal></expr>)</condition> <block pos:start="145:22" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:73">

            <expr_stmt pos:start="147:13" pos:end="147:73"><expr pos:start="147:13" pos:end="147:72"><call pos:start="147:13" pos:end="147:72"><name pos:start="147:13" pos:end="147:28">error_setg_errno</name><argument_list pos:start="147:29" pos:end="147:72">(<argument pos:start="147:30" pos:end="147:39"><expr pos:start="147:30" pos:end="147:39"><operator pos:start="147:30" pos:end="147:30">&amp;</operator><name pos:start="147:31" pos:end="147:39">local_err</name></expr></argument>, <argument pos:start="147:42" pos:end="147:45"><expr pos:start="147:42" pos:end="147:45"><operator pos:start="147:42" pos:end="147:42">-</operator><name pos:start="147:43" pos:end="147:45">ret</name></expr></argument>, <argument pos:start="147:48" pos:end="147:71"><expr pos:start="147:48" pos:end="147:71"><literal type="string" pos:start="147:48" pos:end="147:71">"writing to file failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <break pos:start="153:9" pos:end="153:14">break;</break>

    <case pos:start="155:5" pos:end="155:30">case <expr pos:start="155:10" pos:end="155:29"><name pos:start="155:10" pos:end="155:29">NBD_CMD_WRITE_ZEROES</name></expr>:</case>

        <if_stmt pos:start="157:9" pos:end="165:9"><if pos:start="157:9" pos:end="165:9">if <condition pos:start="157:12" pos:end="157:47">(<expr pos:start="157:13" pos:end="157:46"><name pos:start="157:13" pos:end="157:25"><name pos:start="157:13" pos:end="157:15">exp</name><operator pos:start="157:16" pos:end="157:17">-&gt;</operator><name pos:start="157:18" pos:end="157:25">nbdflags</name></name> <operator pos:start="157:27" pos:end="157:27">&amp;</operator> <name pos:start="157:29" pos:end="157:46">NBD_FLAG_READ_ONLY</name></expr>)</condition> <block pos:start="157:49" pos:end="165:9">{<block_content pos:start="159:13" pos:end="163:18">

            <expr_stmt pos:start="159:13" pos:end="159:58"><expr pos:start="159:13" pos:end="159:57"><call pos:start="159:13" pos:end="159:57"><name pos:start="159:13" pos:end="159:22">error_setg</name><argument_list pos:start="159:23" pos:end="159:57">(<argument pos:start="159:24" pos:end="159:33"><expr pos:start="159:24" pos:end="159:33"><operator pos:start="159:24" pos:end="159:24">&amp;</operator><name pos:start="159:25" pos:end="159:33">local_err</name></expr></argument>, <argument pos:start="159:36" pos:end="159:56"><expr pos:start="159:36" pos:end="159:56"><literal type="string" pos:start="159:36" pos:end="159:56">"Export is read-only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:25"><expr pos:start="161:13" pos:end="161:24"><name pos:start="161:13" pos:end="161:15">ret</name> <operator pos:start="161:17" pos:end="161:17">=</operator> <operator pos:start="161:19" pos:end="161:19">-</operator><name pos:start="161:20" pos:end="161:24">EROFS</name></expr>;</expr_stmt>

            <break pos:start="163:13" pos:end="163:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:18"><expr pos:start="169:9" pos:end="169:17"><name pos:start="169:9" pos:end="169:13">flags</name> <operator pos:start="169:15" pos:end="169:15">=</operator> <literal type="number" pos:start="169:17" pos:end="169:17">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="171:9" pos:end="175:9"><if pos:start="171:9" pos:end="175:9">if <condition pos:start="171:12" pos:end="171:45">(<expr pos:start="171:13" pos:end="171:44"><name pos:start="171:13" pos:end="171:25"><name pos:start="171:13" pos:end="171:19">request</name><operator pos:start="171:20" pos:end="171:20">.</operator><name pos:start="171:21" pos:end="171:25">flags</name></name> <operator pos:start="171:27" pos:end="171:27">&amp;</operator> <name pos:start="171:29" pos:end="171:44">NBD_CMD_FLAG_FUA</name></expr>)</condition> <block pos:start="171:47" pos:end="175:9">{<block_content pos:start="173:13" pos:end="173:34">

            <expr_stmt pos:start="173:13" pos:end="173:34"><expr pos:start="173:13" pos:end="173:33"><name pos:start="173:13" pos:end="173:17">flags</name> <operator pos:start="173:19" pos:end="173:20">|=</operator> <name pos:start="173:22" pos:end="173:33">BDRV_REQ_FUA</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="177:9" pos:end="181:9"><if pos:start="177:9" pos:end="181:9">if <condition pos:start="177:12" pos:end="177:52">(<expr pos:start="177:13" pos:end="177:51"><operator pos:start="177:13" pos:end="177:13">!</operator><operator pos:start="177:14" pos:end="177:14">(</operator><name pos:start="177:15" pos:end="177:27"><name pos:start="177:15" pos:end="177:21">request</name><operator pos:start="177:22" pos:end="177:22">.</operator><name pos:start="177:23" pos:end="177:27">flags</name></name> <operator pos:start="177:29" pos:end="177:29">&amp;</operator> <name pos:start="177:31" pos:end="177:50">NBD_CMD_FLAG_NO_HOLE</name><operator pos:start="177:51" pos:end="177:51">)</operator></expr>)</condition> <block pos:start="177:54" pos:end="181:9">{<block_content pos:start="179:13" pos:end="179:40">

            <expr_stmt pos:start="179:13" pos:end="179:40"><expr pos:start="179:13" pos:end="179:39"><name pos:start="179:13" pos:end="179:17">flags</name> <operator pos:start="179:19" pos:end="179:20">|=</operator> <name pos:start="179:22" pos:end="179:39">BDRV_REQ_MAY_UNMAP</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="183:9" pos:end="185:52"><expr pos:start="183:9" pos:end="185:51"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <call pos:start="183:15" pos:end="185:51"><name pos:start="183:15" pos:end="183:31">blk_pwrite_zeroes</name><argument_list pos:start="183:32" pos:end="185:51">(<argument pos:start="183:33" pos:end="183:40"><expr pos:start="183:33" pos:end="183:40"><name pos:start="183:33" pos:end="183:40"><name pos:start="183:33" pos:end="183:35">exp</name><operator pos:start="183:36" pos:end="183:37">-&gt;</operator><name pos:start="183:38" pos:end="183:40">blk</name></name></expr></argument>, <argument pos:start="183:43" pos:end="183:72"><expr pos:start="183:43" pos:end="183:72"><name pos:start="183:43" pos:end="183:54"><name pos:start="183:43" pos:end="183:49">request</name><operator pos:start="183:50" pos:end="183:50">.</operator><name pos:start="183:51" pos:end="183:54">from</name></name> <operator pos:start="183:56" pos:end="183:56">+</operator> <name pos:start="183:58" pos:end="183:72"><name pos:start="183:58" pos:end="183:60">exp</name><operator pos:start="183:61" pos:end="183:62">-&gt;</operator><name pos:start="183:63" pos:end="183:72">dev_offset</name></name></expr></argument>,

                                <argument pos:start="185:33" pos:end="185:43"><expr pos:start="185:33" pos:end="185:43"><name pos:start="185:33" pos:end="185:43"><name pos:start="185:33" pos:end="185:39">request</name><operator pos:start="185:40" pos:end="185:40">.</operator><name pos:start="185:41" pos:end="185:43">len</name></name></expr></argument>, <argument pos:start="185:46" pos:end="185:50"><expr pos:start="185:46" pos:end="185:50"><name pos:start="185:46" pos:end="185:50">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="187:9" pos:end="191:9"><if pos:start="187:9" pos:end="191:9">if <condition pos:start="187:12" pos:end="187:20">(<expr pos:start="187:13" pos:end="187:19"><name pos:start="187:13" pos:end="187:15">ret</name> <operator pos:start="187:17" pos:end="187:17">&lt;</operator> <literal type="number" pos:start="187:19" pos:end="187:19">0</literal></expr>)</condition> <block pos:start="187:22" pos:end="191:9">{<block_content pos:start="189:13" pos:end="189:73">

            <expr_stmt pos:start="189:13" pos:end="189:73"><expr pos:start="189:13" pos:end="189:72"><call pos:start="189:13" pos:end="189:72"><name pos:start="189:13" pos:end="189:28">error_setg_errno</name><argument_list pos:start="189:29" pos:end="189:72">(<argument pos:start="189:30" pos:end="189:39"><expr pos:start="189:30" pos:end="189:39"><operator pos:start="189:30" pos:end="189:30">&amp;</operator><name pos:start="189:31" pos:end="189:39">local_err</name></expr></argument>, <argument pos:start="189:42" pos:end="189:45"><expr pos:start="189:42" pos:end="189:45"><operator pos:start="189:42" pos:end="189:42">-</operator><name pos:start="189:43" pos:end="189:45">ret</name></expr></argument>, <argument pos:start="189:48" pos:end="189:71"><expr pos:start="189:48" pos:end="189:71"><literal type="string" pos:start="189:48" pos:end="189:71">"writing to file failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <break pos:start="195:9" pos:end="195:14">break;</break>

    <case pos:start="197:5" pos:end="197:22">case <expr pos:start="197:10" pos:end="197:21"><name pos:start="197:10" pos:end="197:21">NBD_CMD_DISC</name></expr>:</case>

        <comment type="block" pos:start="199:9" pos:end="199:77">/* unreachable, thanks to special case in nbd_co_receive_request() */</comment>

        <expr_stmt pos:start="201:9" pos:end="201:16"><expr pos:start="201:9" pos:end="201:15"><call pos:start="201:9" pos:end="201:15"><name pos:start="201:9" pos:end="201:13">abort</name><argument_list pos:start="201:14" pos:end="201:15">()</argument_list></call></expr>;</expr_stmt>



    <case pos:start="205:5" pos:end="205:23">case <expr pos:start="205:10" pos:end="205:22"><name pos:start="205:10" pos:end="205:22">NBD_CMD_FLUSH</name></expr>:</case>

        <expr_stmt pos:start="207:9" pos:end="207:37"><expr pos:start="207:9" pos:end="207:36"><name pos:start="207:9" pos:end="207:11">ret</name> <operator pos:start="207:13" pos:end="207:13">=</operator> <call pos:start="207:15" pos:end="207:36"><name pos:start="207:15" pos:end="207:26">blk_co_flush</name><argument_list pos:start="207:27" pos:end="207:36">(<argument pos:start="207:28" pos:end="207:35"><expr pos:start="207:28" pos:end="207:35"><name pos:start="207:28" pos:end="207:35"><name pos:start="207:28" pos:end="207:30">exp</name><operator pos:start="207:31" pos:end="207:32">-&gt;</operator><name pos:start="207:33" pos:end="207:35">blk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="209:9" pos:end="213:9"><if pos:start="209:9" pos:end="213:9">if <condition pos:start="209:12" pos:end="209:20">(<expr pos:start="209:13" pos:end="209:19"><name pos:start="209:13" pos:end="209:15">ret</name> <operator pos:start="209:17" pos:end="209:17">&lt;</operator> <literal type="number" pos:start="209:19" pos:end="209:19">0</literal></expr>)</condition> <block pos:start="209:22" pos:end="213:9">{<block_content pos:start="211:13" pos:end="211:63">

            <expr_stmt pos:start="211:13" pos:end="211:63"><expr pos:start="211:13" pos:end="211:62"><call pos:start="211:13" pos:end="211:62"><name pos:start="211:13" pos:end="211:28">error_setg_errno</name><argument_list pos:start="211:29" pos:end="211:62">(<argument pos:start="211:30" pos:end="211:39"><expr pos:start="211:30" pos:end="211:39"><operator pos:start="211:30" pos:end="211:30">&amp;</operator><name pos:start="211:31" pos:end="211:39">local_err</name></expr></argument>, <argument pos:start="211:42" pos:end="211:45"><expr pos:start="211:42" pos:end="211:45"><operator pos:start="211:42" pos:end="211:42">-</operator><name pos:start="211:43" pos:end="211:45">ret</name></expr></argument>, <argument pos:start="211:48" pos:end="211:61"><expr pos:start="211:48" pos:end="211:61"><literal type="string" pos:start="211:48" pos:end="211:61">"flush failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <break pos:start="217:9" pos:end="217:14">break;</break>

    <case pos:start="219:5" pos:end="219:22">case <expr pos:start="219:10" pos:end="219:21"><name pos:start="219:10" pos:end="219:21">NBD_CMD_TRIM</name></expr>:</case>

        <expr_stmt pos:start="221:9" pos:end="223:43"><expr pos:start="221:9" pos:end="223:42"><name pos:start="221:9" pos:end="221:11">ret</name> <operator pos:start="221:13" pos:end="221:13">=</operator> <call pos:start="221:15" pos:end="223:42"><name pos:start="221:15" pos:end="221:29">blk_co_pdiscard</name><argument_list pos:start="221:30" pos:end="223:42">(<argument pos:start="221:31" pos:end="221:38"><expr pos:start="221:31" pos:end="221:38"><name pos:start="221:31" pos:end="221:38"><name pos:start="221:31" pos:end="221:33">exp</name><operator pos:start="221:34" pos:end="221:35">-&gt;</operator><name pos:start="221:36" pos:end="221:38">blk</name></name></expr></argument>, <argument pos:start="221:41" pos:end="221:70"><expr pos:start="221:41" pos:end="221:70"><name pos:start="221:41" pos:end="221:52"><name pos:start="221:41" pos:end="221:47">request</name><operator pos:start="221:48" pos:end="221:48">.</operator><name pos:start="221:49" pos:end="221:52">from</name></name> <operator pos:start="221:54" pos:end="221:54">+</operator> <name pos:start="221:56" pos:end="221:70"><name pos:start="221:56" pos:end="221:58">exp</name><operator pos:start="221:59" pos:end="221:60">-&gt;</operator><name pos:start="221:61" pos:end="221:70">dev_offset</name></name></expr></argument>,

                              <argument pos:start="223:31" pos:end="223:41"><expr pos:start="223:31" pos:end="223:41"><name pos:start="223:31" pos:end="223:41"><name pos:start="223:31" pos:end="223:37">request</name><operator pos:start="223:38" pos:end="223:38">.</operator><name pos:start="223:39" pos:end="223:41">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="225:9" pos:end="229:9"><if pos:start="225:9" pos:end="229:9">if <condition pos:start="225:12" pos:end="225:20">(<expr pos:start="225:13" pos:end="225:19"><name pos:start="225:13" pos:end="225:15">ret</name> <operator pos:start="225:17" pos:end="225:17">&lt;</operator> <literal type="number" pos:start="225:19" pos:end="225:19">0</literal></expr>)</condition> <block pos:start="225:22" pos:end="229:9">{<block_content pos:start="227:13" pos:end="227:65">

            <expr_stmt pos:start="227:13" pos:end="227:65"><expr pos:start="227:13" pos:end="227:64"><call pos:start="227:13" pos:end="227:64"><name pos:start="227:13" pos:end="227:28">error_setg_errno</name><argument_list pos:start="227:29" pos:end="227:64">(<argument pos:start="227:30" pos:end="227:39"><expr pos:start="227:30" pos:end="227:39"><operator pos:start="227:30" pos:end="227:30">&amp;</operator><name pos:start="227:31" pos:end="227:39">local_err</name></expr></argument>, <argument pos:start="227:42" pos:end="227:45"><expr pos:start="227:42" pos:end="227:45"><operator pos:start="227:42" pos:end="227:42">-</operator><name pos:start="227:43" pos:end="227:45">ret</name></expr></argument>, <argument pos:start="227:48" pos:end="227:63"><expr pos:start="227:48" pos:end="227:63"><literal type="string" pos:start="227:48" pos:end="227:63">"discard failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <break pos:start="233:9" pos:end="233:14">break;</break>

    <default pos:start="235:5" pos:end="235:12">default:</default>

        <expr_stmt pos:start="237:9" pos:end="239:33"><expr pos:start="237:9" pos:end="239:32"><call pos:start="237:9" pos:end="239:32"><name pos:start="237:9" pos:end="237:18">error_setg</name><argument_list pos:start="237:19" pos:end="239:32">(<argument pos:start="237:20" pos:end="237:29"><expr pos:start="237:20" pos:end="237:29"><operator pos:start="237:20" pos:end="237:20">&amp;</operator><name pos:start="237:21" pos:end="237:29">local_err</name></expr></argument>, <argument pos:start="237:32" pos:end="237:76"><expr pos:start="237:32" pos:end="237:76"><literal type="string" pos:start="237:32" pos:end="237:56">"invalid request type (%"</literal> <name pos:start="237:58" pos:end="237:63">PRIu32</name> <literal type="string" pos:start="237:65" pos:end="237:76">") received"</literal></expr></argument>,

                   <argument pos:start="239:20" pos:end="239:31"><expr pos:start="239:20" pos:end="239:31"><name pos:start="239:20" pos:end="239:31"><name pos:start="239:20" pos:end="239:26">request</name><operator pos:start="239:27" pos:end="239:27">.</operator><name pos:start="239:28" pos:end="239:31">type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:22"><expr pos:start="241:9" pos:end="241:21"><name pos:start="241:9" pos:end="241:11">ret</name> <operator pos:start="241:13" pos:end="241:13">=</operator> <operator pos:start="241:15" pos:end="241:15">-</operator><name pos:start="241:16" pos:end="241:21">EINVAL</name></expr>;</expr_stmt>

    </block_content>}</block></switch>



<label pos:start="247:1" pos:end="247:6"><name pos:start="247:1" pos:end="247:5">reply</name>:</label>

    <if_stmt pos:start="249:5" pos:end="263:5"><if pos:start="249:5" pos:end="263:5">if <condition pos:start="249:8" pos:end="249:18">(<expr pos:start="249:9" pos:end="249:17"><name pos:start="249:9" pos:end="249:17">local_err</name></expr>)</condition> <block pos:start="249:20" pos:end="263:5">{<block_content pos:start="255:9" pos:end="261:25">

        <comment type="block" pos:start="251:9" pos:end="253:28">/* If we get here, local_err was not a fatal error, and should be sent

         * to the client. */</comment>

        <expr_stmt pos:start="255:9" pos:end="255:24"><expr pos:start="255:9" pos:end="255:23"><call pos:start="255:9" pos:end="255:23"><name pos:start="255:9" pos:end="255:14">assert</name><argument_list pos:start="255:15" pos:end="255:23">(<argument pos:start="255:16" pos:end="255:22"><expr pos:start="255:16" pos:end="255:22"><name pos:start="255:16" pos:end="255:18">ret</name> <operator pos:start="255:20" pos:end="255:20">&lt;</operator> <literal type="number" pos:start="255:22" pos:end="255:22">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:52"><expr pos:start="257:9" pos:end="257:51"><name pos:start="257:9" pos:end="257:11">msg</name> <operator pos:start="257:13" pos:end="257:13">=</operator> <call pos:start="257:15" pos:end="257:51"><name pos:start="257:15" pos:end="257:22">g_strdup</name><argument_list pos:start="257:23" pos:end="257:51">(<argument pos:start="257:24" pos:end="257:50"><expr pos:start="257:24" pos:end="257:50"><call pos:start="257:24" pos:end="257:50"><name pos:start="257:24" pos:end="257:39">error_get_pretty</name><argument_list pos:start="257:40" pos:end="257:50">(<argument pos:start="257:41" pos:end="257:49"><expr pos:start="257:41" pos:end="257:49"><name pos:start="257:41" pos:end="257:49">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:36"><expr pos:start="259:9" pos:end="259:35"><call pos:start="259:9" pos:end="259:35"><name pos:start="259:9" pos:end="259:24">error_report_err</name><argument_list pos:start="259:25" pos:end="259:35">(<argument pos:start="259:26" pos:end="259:34"><expr pos:start="259:26" pos:end="259:34"><name pos:start="259:26" pos:end="259:34">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:25"><expr pos:start="261:9" pos:end="261:24"><name pos:start="261:9" pos:end="261:17">local_err</name> <operator pos:start="261:19" pos:end="261:19">=</operator> <name pos:start="261:21" pos:end="261:24">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="267:5" pos:end="295:5"><if pos:start="267:5" pos:end="287:5">if <condition pos:start="267:8" pos:end="269:50">(<expr pos:start="267:9" pos:end="269:49"><name pos:start="267:9" pos:end="267:32"><name pos:start="267:9" pos:end="267:14">client</name><operator pos:start="267:15" pos:end="267:16">-&gt;</operator><name pos:start="267:17" pos:end="267:32">structured_reply</name></name> <operator pos:start="267:34" pos:end="267:35">&amp;&amp;</operator>

        <operator pos:start="269:9" pos:end="269:9">(</operator><name pos:start="269:10" pos:end="269:12">ret</name> <operator pos:start="269:14" pos:end="269:14">&lt;</operator> <literal type="number" pos:start="269:16" pos:end="269:16">0</literal> <operator pos:start="269:18" pos:end="269:19">||</operator> <name pos:start="269:21" pos:end="269:32"><name pos:start="269:21" pos:end="269:27">request</name><operator pos:start="269:28" pos:end="269:28">.</operator><name pos:start="269:29" pos:end="269:32">type</name></name> <operator pos:start="269:34" pos:end="269:35">==</operator> <name pos:start="269:37" pos:end="269:48">NBD_CMD_READ</name><operator pos:start="269:49" pos:end="269:49">)</operator></expr>)</condition> <block pos:start="269:52" pos:end="287:5">{<block_content pos:start="271:9" pos:end="285:9">

        <if_stmt pos:start="271:9" pos:end="285:9"><if pos:start="271:9" pos:end="277:9">if <condition pos:start="271:12" pos:end="271:20">(<expr pos:start="271:13" pos:end="271:19"><name pos:start="271:13" pos:end="271:15">ret</name> <operator pos:start="271:17" pos:end="271:17">&lt;</operator> <literal type="number" pos:start="271:19" pos:end="271:19">0</literal></expr>)</condition> <block pos:start="271:22" pos:end="277:9">{<block_content pos:start="273:13" pos:end="275:70">

            <expr_stmt pos:start="273:13" pos:end="275:70"><expr pos:start="273:13" pos:end="275:69"><name pos:start="273:13" pos:end="273:15">ret</name> <operator pos:start="273:17" pos:end="273:17">=</operator> <call pos:start="273:19" pos:end="275:69"><name pos:start="273:19" pos:end="273:46">nbd_co_send_structured_error</name><argument_list pos:start="273:47" pos:end="275:69">(<argument pos:start="273:48" pos:end="273:58"><expr pos:start="273:48" pos:end="273:58"><name pos:start="273:48" pos:end="273:58"><name pos:start="273:48" pos:end="273:50">req</name><operator pos:start="273:51" pos:end="273:52">-&gt;</operator><name pos:start="273:53" pos:end="273:58">client</name></name></expr></argument>, <argument pos:start="273:61" pos:end="273:74"><expr pos:start="273:61" pos:end="273:74"><name pos:start="273:61" pos:end="273:74"><name pos:start="273:61" pos:end="273:67">request</name><operator pos:start="273:68" pos:end="273:68">.</operator><name pos:start="273:69" pos:end="273:74">handle</name></name></expr></argument>,

                                               <argument pos:start="275:48" pos:end="275:51"><expr pos:start="275:48" pos:end="275:51"><operator pos:start="275:48" pos:end="275:48">-</operator><name pos:start="275:49" pos:end="275:51">ret</name></expr></argument>, <argument pos:start="275:54" pos:end="275:56"><expr pos:start="275:54" pos:end="275:56"><name pos:start="275:54" pos:end="275:56">msg</name></expr></argument>, <argument pos:start="275:59" pos:end="275:68"><expr pos:start="275:59" pos:end="275:68"><operator pos:start="275:59" pos:end="275:59">&amp;</operator><name pos:start="275:60" pos:end="275:68">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="277:11" pos:end="285:9">else <block pos:start="277:16" pos:end="285:9">{<block_content pos:start="279:13" pos:end="283:74">

            <expr_stmt pos:start="279:13" pos:end="283:74"><expr pos:start="279:13" pos:end="283:73"><name pos:start="279:13" pos:end="279:15">ret</name> <operator pos:start="279:17" pos:end="279:17">=</operator> <call pos:start="279:19" pos:end="283:73"><name pos:start="279:19" pos:end="279:45">nbd_co_send_structured_read</name><argument_list pos:start="279:46" pos:end="283:73">(<argument pos:start="279:47" pos:end="279:57"><expr pos:start="279:47" pos:end="279:57"><name pos:start="279:47" pos:end="279:57"><name pos:start="279:47" pos:end="279:49">req</name><operator pos:start="279:50" pos:end="279:51">-&gt;</operator><name pos:start="279:52" pos:end="279:57">client</name></name></expr></argument>, <argument pos:start="279:60" pos:end="279:73"><expr pos:start="279:60" pos:end="279:73"><name pos:start="279:60" pos:end="279:73"><name pos:start="279:60" pos:end="279:66">request</name><operator pos:start="279:67" pos:end="279:67">.</operator><name pos:start="279:68" pos:end="279:73">handle</name></name></expr></argument>,

                                              <argument pos:start="281:47" pos:end="281:58"><expr pos:start="281:47" pos:end="281:58"><name pos:start="281:47" pos:end="281:58"><name pos:start="281:47" pos:end="281:53">request</name><operator pos:start="281:54" pos:end="281:54">.</operator><name pos:start="281:55" pos:end="281:58">from</name></name></expr></argument>, <argument pos:start="281:61" pos:end="281:69"><expr pos:start="281:61" pos:end="281:69"><name pos:start="281:61" pos:end="281:69"><name pos:start="281:61" pos:end="281:63">req</name><operator pos:start="281:64" pos:end="281:65">-&gt;</operator><name pos:start="281:66" pos:end="281:69">data</name></name></expr></argument>,

                                              <argument pos:start="283:47" pos:end="283:60"><expr pos:start="283:47" pos:end="283:60"><name pos:start="283:47" pos:end="283:60">reply_data_len</name></expr></argument>, <argument pos:start="283:63" pos:end="283:72"><expr pos:start="283:63" pos:end="283:72"><operator pos:start="283:63" pos:end="283:63">&amp;</operator><name pos:start="283:64" pos:end="283:72">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="287:7" pos:end="295:5">else <block pos:start="287:12" pos:end="295:5">{<block_content pos:start="289:9" pos:end="293:78">

        <expr_stmt pos:start="289:9" pos:end="293:78"><expr pos:start="289:9" pos:end="293:77"><name pos:start="289:9" pos:end="289:11">ret</name> <operator pos:start="289:13" pos:end="289:13">=</operator> <call pos:start="289:15" pos:end="293:77"><name pos:start="289:15" pos:end="289:38">nbd_co_send_simple_reply</name><argument_list pos:start="289:39" pos:end="293:77">(<argument pos:start="289:40" pos:end="289:50"><expr pos:start="289:40" pos:end="289:50"><name pos:start="289:40" pos:end="289:50"><name pos:start="289:40" pos:end="289:42">req</name><operator pos:start="289:43" pos:end="289:44">-&gt;</operator><name pos:start="289:45" pos:end="289:50">client</name></name></expr></argument>, <argument pos:start="289:53" pos:end="289:66"><expr pos:start="289:53" pos:end="289:66"><name pos:start="289:53" pos:end="289:66"><name pos:start="289:53" pos:end="289:59">request</name><operator pos:start="289:60" pos:end="289:60">.</operator><name pos:start="289:61" pos:end="289:66">handle</name></name></expr></argument>,

                                       <argument pos:start="291:40" pos:end="291:57"><expr pos:start="291:40" pos:end="291:57"><ternary pos:start="291:40" pos:end="291:57"><condition pos:start="291:40" pos:end="291:48"><expr pos:start="291:40" pos:end="291:46"><name pos:start="291:40" pos:end="291:42">ret</name> <operator pos:start="291:44" pos:end="291:44">&lt;</operator> <literal type="number" pos:start="291:46" pos:end="291:46">0</literal></expr> ?</condition><then pos:start="291:50" pos:end="291:53"> <expr pos:start="291:50" pos:end="291:53"><operator pos:start="291:50" pos:end="291:50">-</operator><name pos:start="291:51" pos:end="291:53">ret</name></expr> </then><else pos:start="291:55" pos:end="291:57">: <expr pos:start="291:57" pos:end="291:57"><literal type="number" pos:start="291:57" pos:end="291:57">0</literal></expr></else></ternary></expr></argument>,

                                       <argument pos:start="293:40" pos:end="293:48"><expr pos:start="293:40" pos:end="293:48"><name pos:start="293:40" pos:end="293:48"><name pos:start="293:40" pos:end="293:42">req</name><operator pos:start="293:43" pos:end="293:44">-&gt;</operator><name pos:start="293:45" pos:end="293:48">data</name></name></expr></argument>, <argument pos:start="293:51" pos:end="293:64"><expr pos:start="293:51" pos:end="293:64"><name pos:start="293:51" pos:end="293:64">reply_data_len</name></expr></argument>, <argument pos:start="293:67" pos:end="293:76"><expr pos:start="293:67" pos:end="293:76"><operator pos:start="293:67" pos:end="293:67">&amp;</operator><name pos:start="293:68" pos:end="293:76">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="297:5" pos:end="297:16"><expr pos:start="297:5" pos:end="297:15"><call pos:start="297:5" pos:end="297:15"><name pos:start="297:5" pos:end="297:10">g_free</name><argument_list pos:start="297:11" pos:end="297:15">(<argument pos:start="297:12" pos:end="297:14"><expr pos:start="297:12" pos:end="297:14"><name pos:start="297:12" pos:end="297:14">msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="299:5" pos:end="305:5"><if pos:start="299:5" pos:end="305:5">if <condition pos:start="299:8" pos:end="299:16">(<expr pos:start="299:9" pos:end="299:15"><name pos:start="299:9" pos:end="299:11">ret</name> <operator pos:start="299:13" pos:end="299:13">&lt;</operator> <literal type="number" pos:start="299:15" pos:end="299:15">0</literal></expr>)</condition> <block pos:start="299:18" pos:end="305:5">{<block_content pos:start="301:9" pos:end="303:24">

        <expr_stmt pos:start="301:9" pos:end="301:60"><expr pos:start="301:9" pos:end="301:59"><call pos:start="301:9" pos:end="301:59"><name pos:start="301:9" pos:end="301:21">error_prepend</name><argument_list pos:start="301:22" pos:end="301:59">(<argument pos:start="301:23" pos:end="301:32"><expr pos:start="301:23" pos:end="301:32"><operator pos:start="301:23" pos:end="301:23">&amp;</operator><name pos:start="301:24" pos:end="301:32">local_err</name></expr></argument>, <argument pos:start="301:35" pos:end="301:58"><expr pos:start="301:35" pos:end="301:58"><literal type="string" pos:start="301:35" pos:end="301:58">"Failed to send reply: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="303:9" pos:end="303:24">goto <name pos:start="303:14" pos:end="303:23">disconnect</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="309:5" pos:end="313:7">/* We must disconnect after NBD_CMD_WRITE if we did not

     * read the payload.

     */</comment>

    <if_stmt pos:start="315:5" pos:end="321:5"><if pos:start="315:5" pos:end="321:5">if <condition pos:start="315:8" pos:end="315:23">(<expr pos:start="315:9" pos:end="315:22"><operator pos:start="315:9" pos:end="315:9">!</operator><name pos:start="315:10" pos:end="315:22"><name pos:start="315:10" pos:end="315:12">req</name><operator pos:start="315:13" pos:end="315:14">-&gt;</operator><name pos:start="315:15" pos:end="315:22">complete</name></name></expr>)</condition> <block pos:start="315:25" pos:end="321:5">{<block_content pos:start="317:9" pos:end="319:24">

        <expr_stmt pos:start="317:9" pos:end="317:80"><expr pos:start="317:9" pos:end="317:79"><call pos:start="317:9" pos:end="317:79"><name pos:start="317:9" pos:end="317:18">error_setg</name><argument_list pos:start="317:19" pos:end="317:79">(<argument pos:start="317:20" pos:end="317:29"><expr pos:start="317:20" pos:end="317:29"><operator pos:start="317:20" pos:end="317:20">&amp;</operator><name pos:start="317:21" pos:end="317:29">local_err</name></expr></argument>, <argument pos:start="317:32" pos:end="317:78"><expr pos:start="317:32" pos:end="317:78"><literal type="string" pos:start="317:32" pos:end="317:78">"Request handling failed in intermediate state"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="319:9" pos:end="319:24">goto <name pos:start="319:14" pos:end="319:23">disconnect</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="325:1" pos:end="325:5"><name pos:start="325:1" pos:end="325:4">done</name>:</label>

    <expr_stmt pos:start="327:5" pos:end="327:25"><expr pos:start="327:5" pos:end="327:24"><call pos:start="327:5" pos:end="327:24"><name pos:start="327:5" pos:end="327:19">nbd_request_put</name><argument_list pos:start="327:20" pos:end="327:24">(<argument pos:start="327:21" pos:end="327:23"><expr pos:start="327:21" pos:end="327:23"><name pos:start="327:21" pos:end="327:23">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="329:5" pos:end="329:27"><expr pos:start="329:5" pos:end="329:26"><call pos:start="329:5" pos:end="329:26"><name pos:start="329:5" pos:end="329:18">nbd_client_put</name><argument_list pos:start="329:19" pos:end="329:26">(<argument pos:start="329:20" pos:end="329:25"><expr pos:start="329:20" pos:end="329:25"><name pos:start="329:20" pos:end="329:25">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="331:5" pos:end="331:11">return;</return>



<label pos:start="335:1" pos:end="335:11"><name pos:start="335:1" pos:end="335:10">disconnect</name>:</label>

    <if_stmt pos:start="337:5" pos:end="341:5"><if pos:start="337:5" pos:end="341:5">if <condition pos:start="337:8" pos:end="337:18">(<expr pos:start="337:9" pos:end="337:17"><name pos:start="337:9" pos:end="337:17">local_err</name></expr>)</condition> <block pos:start="337:20" pos:end="341:5">{<block_content pos:start="339:9" pos:end="339:68">

        <expr_stmt pos:start="339:9" pos:end="339:68"><expr pos:start="339:9" pos:end="339:67"><call pos:start="339:9" pos:end="339:67"><name pos:start="339:9" pos:end="339:25">error_reportf_err</name><argument_list pos:start="339:26" pos:end="339:67">(<argument pos:start="339:27" pos:end="339:35"><expr pos:start="339:27" pos:end="339:35"><name pos:start="339:27" pos:end="339:35">local_err</name></expr></argument>, <argument pos:start="339:38" pos:end="339:66"><expr pos:start="339:38" pos:end="339:66"><literal type="string" pos:start="339:38" pos:end="339:66">"Disconnect client, due to: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="343:5" pos:end="343:25"><expr pos:start="343:5" pos:end="343:24"><call pos:start="343:5" pos:end="343:24"><name pos:start="343:5" pos:end="343:19">nbd_request_put</name><argument_list pos:start="343:20" pos:end="343:24">(<argument pos:start="343:21" pos:end="343:23"><expr pos:start="343:21" pos:end="343:23"><name pos:start="343:21" pos:end="343:23">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="345:5" pos:end="345:31"><expr pos:start="345:5" pos:end="345:30"><call pos:start="345:5" pos:end="345:30"><name pos:start="345:5" pos:end="345:16">client_close</name><argument_list pos:start="345:17" pos:end="345:30">(<argument pos:start="345:18" pos:end="345:23"><expr pos:start="345:18" pos:end="345:23"><name pos:start="345:18" pos:end="345:23">client</name></expr></argument>, <argument pos:start="345:26" pos:end="345:29"><expr pos:start="345:26" pos:end="345:29"><name pos:start="345:26" pos:end="345:29">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="347:5" pos:end="347:27"><expr pos:start="347:5" pos:end="347:26"><call pos:start="347:5" pos:end="347:26"><name pos:start="347:5" pos:end="347:18">nbd_client_put</name><argument_list pos:start="347:19" pos:end="347:26">(<argument pos:start="347:20" pos:end="347:25"><expr pos:start="347:20" pos:end="347:25"><name pos:start="347:20" pos:end="347:25">client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
