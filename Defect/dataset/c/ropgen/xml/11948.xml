<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11948.c" pos:tabs="8"><function pos:start="1:1" pos:end="1533:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">adpcm_decode_frame</name><parameter_list pos:start="1:30" pos:end="3:66">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:63"><decl pos:start="1:54" pos:end="1:63"><type pos:start="1:54" pos:end="1:63"><name pos:start="1:54" pos:end="1:57">void</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:63">data</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:48"><decl pos:start="3:31" pos:end="3:48"><type pos:start="3:31" pos:end="3:48"><name pos:start="3:31" pos:end="3:33">int</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:48">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:65"><decl pos:start="3:51" pos:end="3:65"><type pos:start="3:51" pos:end="3:65"><name pos:start="3:51" pos:end="3:58">AVPacket</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:65">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="1533:1">{<block_content pos:start="7:5" pos:end="1531:33">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:22">ADPCMDecodeContext</name> <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:25">c</name> <init pos:start="11:27" pos:end="11:44">= <expr pos:start="11:29" pos:end="11:44"><name pos:start="11:29" pos:end="11:44"><name pos:start="11:29" pos:end="11:33">avctx</name><operator pos:start="11:34" pos:end="11:35">-&gt;</operator><name pos:start="11:36" pos:end="11:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22">ADPCMChannelStatus</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:26">cs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">n</name></decl>, <decl pos:start="15:12" pos:end="15:12"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:12">m</name></decl>, <decl pos:start="15:15" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:21">channel</name></decl>, <decl pos:start="15:24" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:24" pos:end="15:24">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:19"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:9">short</name> <modifier pos:start="17:11" pos:end="17:11">*</modifier></type><name pos:start="17:12" pos:end="17:18">samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:11">int16_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier><modifier pos:start="19:14" pos:end="19:14">*</modifier></type><name pos:start="19:15" pos:end="19:23">samples_p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:11"><decl pos:start="21:5" pos:end="21:10"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:10">st</name></decl>;</decl_stmt> <comment type="block" pos:start="21:13" pos:end="21:24">/* stereo */</comment>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:14"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:14">count1</name></decl>, <decl pos:start="23:17" pos:end="23:22"><type ref="prev" pos:start="23:5" pos:end="23:7"/><name pos:start="23:17" pos:end="23:22">count2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:39"><decl pos:start="25:5" pos:end="25:18"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:18">nb_samples</name></decl>, <decl pos:start="25:21" pos:end="25:33"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:21" pos:end="25:33">coded_samples</name></decl>, <decl pos:start="25:36" pos:end="25:38"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:36" pos:end="25:38">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:21"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:18">GetByteContext</name></type> <name pos:start="27:20" pos:end="27:21">gb</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:41"><expr pos:start="31:5" pos:end="31:40"><call pos:start="31:5" pos:end="31:40"><name pos:start="31:5" pos:end="31:20">bytestream2_init</name><argument_list pos:start="31:21" pos:end="31:40">(<argument pos:start="31:22" pos:end="31:24"><expr pos:start="31:22" pos:end="31:24"><operator pos:start="31:22" pos:end="31:22">&amp;</operator><name pos:start="31:23" pos:end="31:24">gb</name></expr></argument>, <argument pos:start="31:27" pos:end="31:29"><expr pos:start="31:27" pos:end="31:29"><name pos:start="31:27" pos:end="31:29">buf</name></expr></argument>, <argument pos:start="31:32" pos:end="31:39"><expr pos:start="31:32" pos:end="31:39"><name pos:start="31:32" pos:end="31:39">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:70"><expr pos:start="33:5" pos:end="33:69"><name pos:start="33:5" pos:end="33:14">nb_samples</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:69"><name pos:start="33:18" pos:end="33:31">get_nb_samples</name><argument_list pos:start="33:32" pos:end="33:69">(<argument pos:start="33:33" pos:end="33:37"><expr pos:start="33:33" pos:end="33:37"><name pos:start="33:33" pos:end="33:37">avctx</name></expr></argument>, <argument pos:start="33:40" pos:end="33:42"><expr pos:start="33:40" pos:end="33:42"><operator pos:start="33:40" pos:end="33:40">&amp;</operator><name pos:start="33:41" pos:end="33:42">gb</name></expr></argument>, <argument pos:start="33:45" pos:end="33:52"><expr pos:start="33:45" pos:end="33:52"><name pos:start="33:45" pos:end="33:52">buf_size</name></expr></argument>, <argument pos:start="33:55" pos:end="33:68"><expr pos:start="33:55" pos:end="33:68"><operator pos:start="33:55" pos:end="33:55">&amp;</operator><name pos:start="33:56" pos:end="33:68">coded_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:24">(<expr pos:start="35:9" pos:end="35:23"><name pos:start="35:9" pos:end="35:18">nb_samples</name> <operator pos:start="35:20" pos:end="35:21">&lt;=</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>)</condition> <block pos:start="35:26" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:35">

        <expr_stmt pos:start="37:9" pos:end="37:77"><expr pos:start="37:9" pos:end="37:76"><call pos:start="37:9" pos:end="37:76"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:76">(<argument pos:start="37:16" pos:end="37:20"><expr pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:20">avctx</name></expr></argument>, <argument pos:start="37:23" pos:end="37:34"><expr pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="37:37" pos:end="37:75"><expr pos:start="37:37" pos:end="37:75"><literal type="string" pos:start="37:37" pos:end="37:75">"invalid number of samples in packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:35">return <expr pos:start="39:16" pos:end="39:34"><name pos:start="39:16" pos:end="39:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:27">/* get output buffer */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:37"><expr pos:start="47:5" pos:end="47:36"><name pos:start="47:5" pos:end="47:23"><name pos:start="47:5" pos:end="47:5">c</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:12">frame</name><operator pos:start="47:13" pos:end="47:13">.</operator><name pos:start="47:14" pos:end="47:23">nb_samples</name></name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:36">nb_samples</name></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:52">(<expr pos:start="49:9" pos:end="49:51"><operator pos:start="49:9" pos:end="49:9">(</operator><name pos:start="49:10" pos:end="49:12">ret</name> <operator pos:start="49:14" pos:end="49:14">=</operator> <call pos:start="49:16" pos:end="49:46"><name pos:start="49:16" pos:end="49:28">ff_get_buffer</name><argument_list pos:start="49:29" pos:end="49:46">(<argument pos:start="49:30" pos:end="49:34"><expr pos:start="49:30" pos:end="49:34"><name pos:start="49:30" pos:end="49:34">avctx</name></expr></argument>, <argument pos:start="49:37" pos:end="49:45"><expr pos:start="49:37" pos:end="49:45"><operator pos:start="49:37" pos:end="49:37">&amp;</operator><name pos:start="49:38" pos:end="49:45"><name pos:start="49:38" pos:end="49:38">c</name><operator pos:start="49:39" pos:end="49:40">-&gt;</operator><name pos:start="49:41" pos:end="49:45">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="49:47" pos:end="49:47">)</operator> <operator pos:start="49:49" pos:end="49:49">&lt;</operator> <literal type="number" pos:start="49:51" pos:end="49:51">0</literal></expr>)</condition> <block pos:start="49:54" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:19">

        <expr_stmt pos:start="51:9" pos:end="51:61"><expr pos:start="51:9" pos:end="51:60"><call pos:start="51:9" pos:end="51:60"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="51:60">(<argument pos:start="51:16" pos:end="51:20"><expr pos:start="51:16" pos:end="51:20"><name pos:start="51:16" pos:end="51:20">avctx</name></expr></argument>, <argument pos:start="51:23" pos:end="51:34"><expr pos:start="51:23" pos:end="51:34"><name pos:start="51:23" pos:end="51:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:37" pos:end="51:59"><expr pos:start="51:37" pos:end="51:59"><literal type="string" pos:start="51:37" pos:end="51:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:19">return <expr pos:start="53:16" pos:end="53:18"><name pos:start="53:16" pos:end="53:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:40"><expr pos:start="57:5" pos:end="57:39"><name pos:start="57:5" pos:end="57:11">samples</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <operator pos:start="57:15" pos:end="57:15">(</operator><name pos:start="57:16" pos:end="57:20">short</name> <operator pos:start="57:22" pos:end="57:22">*</operator><operator pos:start="57:23" pos:end="57:23">)</operator><name pos:start="57:24" pos:end="57:39"><name pos:start="57:24" pos:end="57:24">c</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:31">frame</name><operator pos:start="57:32" pos:end="57:32">.</operator><name pos:start="57:33" pos:end="57:36">data</name><index pos:start="57:37" pos:end="57:39">[<expr pos:start="57:38" pos:end="57:38"><literal type="number" pos:start="57:38" pos:end="57:38">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:51"><expr pos:start="59:5" pos:end="59:50"><name pos:start="59:5" pos:end="59:13">samples_p</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <operator pos:start="59:17" pos:end="59:17">(</operator><name pos:start="59:18" pos:end="59:24">int16_t</name> <operator pos:start="59:26" pos:end="59:26">*</operator><operator pos:start="59:27" pos:end="59:27">*</operator><operator pos:start="59:28" pos:end="59:28">)</operator><name pos:start="59:29" pos:end="59:50"><name pos:start="59:29" pos:end="59:29">c</name><operator pos:start="59:30" pos:end="59:31">-&gt;</operator><name pos:start="59:32" pos:end="59:36">frame</name><operator pos:start="59:37" pos:end="59:37">.</operator><name pos:start="59:38" pos:end="59:50">extended_data</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:43">/* use coded_samples when applicable */</comment>

    <comment type="block" pos:start="65:5" pos:end="65:79">/* it is always &lt;= nb_samples, so the output buffer will be large enough */</comment>

    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:22">(<expr pos:start="67:9" pos:end="67:21"><name pos:start="67:9" pos:end="67:21">coded_samples</name></expr>)</condition> <block pos:start="67:24" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:57">

        <if_stmt pos:start="69:9" pos:end="71:78"><if pos:start="69:9" pos:end="71:78">if <condition pos:start="69:12" pos:end="69:40">(<expr pos:start="69:13" pos:end="69:39"><name pos:start="69:13" pos:end="69:25">coded_samples</name> <operator pos:start="69:27" pos:end="69:28">!=</operator> <name pos:start="69:30" pos:end="69:39">nb_samples</name></expr>)</condition><block type="pseudo" pos:start="71:13" pos:end="71:78"><block_content pos:start="71:13" pos:end="71:78">

            <expr_stmt pos:start="71:13" pos:end="71:78"><expr pos:start="71:13" pos:end="71:77"><call pos:start="71:13" pos:end="71:77"><name pos:start="71:13" pos:end="71:18">av_log</name><argument_list pos:start="71:19" pos:end="71:77">(<argument pos:start="71:20" pos:end="71:24"><expr pos:start="71:20" pos:end="71:24"><name pos:start="71:20" pos:end="71:24">avctx</name></expr></argument>, <argument pos:start="71:27" pos:end="71:40"><expr pos:start="71:27" pos:end="71:40"><name pos:start="71:27" pos:end="71:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="71:43" pos:end="71:76"><expr pos:start="71:43" pos:end="71:76"><literal type="string" pos:start="71:43" pos:end="71:76">"mismatch in coded sample count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:57"><expr pos:start="73:9" pos:end="73:56"><name pos:start="73:9" pos:end="73:27"><name pos:start="73:9" pos:end="73:9">c</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:16">frame</name><operator pos:start="73:17" pos:end="73:17">.</operator><name pos:start="73:18" pos:end="73:27">nb_samples</name></name> <operator pos:start="73:29" pos:end="73:29">=</operator> <name pos:start="73:31" pos:end="73:40">nb_samples</name> <operator pos:start="73:42" pos:end="73:42">=</operator> <name pos:start="73:44" pos:end="73:56">coded_samples</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:38"><expr pos:start="79:5" pos:end="79:37"><name pos:start="79:5" pos:end="79:6">st</name> <operator pos:start="79:8" pos:end="79:8">=</operator> <ternary pos:start="79:10" pos:end="79:37"><condition pos:start="79:10" pos:end="79:31"><expr pos:start="79:10" pos:end="79:29"><name pos:start="79:10" pos:end="79:24"><name pos:start="79:10" pos:end="79:14">avctx</name><operator pos:start="79:15" pos:end="79:16">-&gt;</operator><name pos:start="79:17" pos:end="79:24">channels</name></name> <operator pos:start="79:26" pos:end="79:27">==</operator> <literal type="number" pos:start="79:29" pos:end="79:29">2</literal></expr> ?</condition><then pos:start="79:33" pos:end="79:33"> <expr pos:start="79:33" pos:end="79:33"><literal type="number" pos:start="79:33" pos:end="79:33">1</literal></expr> </then><else pos:start="79:35" pos:end="79:37">: <expr pos:start="79:37" pos:end="79:37"><literal type="number" pos:start="79:37" pos:end="79:37">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <switch pos:start="83:5" pos:end="1511:5">switch<condition pos:start="83:11" pos:end="83:28">(<expr pos:start="83:12" pos:end="83:27"><name pos:start="83:12" pos:end="83:27"><name pos:start="83:12" pos:end="83:16">avctx</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:23">codec</name><operator pos:start="83:24" pos:end="83:25">-&gt;</operator><name pos:start="83:26" pos:end="83:27">id</name></name></expr>)</condition> <block pos:start="83:30" pos:end="1511:5">{<block_content pos:start="85:5" pos:end="1509:18">

    <case pos:start="85:5" pos:end="85:34">case <expr pos:start="85:10" pos:end="85:33"><name pos:start="85:10" pos:end="85:33">AV_CODEC_ID_ADPCM_IMA_QT</name></expr>:</case>

        <comment type="block" pos:start="87:9" pos:end="89:52">/* In QuickTime, IMA is encoded by chunks of 34 bytes (=64 samples).

           Channel data is interleaved per-chunk. */</comment>

        <for pos:start="91:9" pos:end="163:9">for <control pos:start="91:13" pos:end="91:63">(<init pos:start="91:14" pos:end="91:25"><expr pos:start="91:14" pos:end="91:24"><name pos:start="91:14" pos:end="91:20">channel</name> <operator pos:start="91:22" pos:end="91:22">=</operator> <literal type="number" pos:start="91:24" pos:end="91:24">0</literal></expr>;</init> <condition pos:start="91:27" pos:end="91:52"><expr pos:start="91:27" pos:end="91:51"><name pos:start="91:27" pos:end="91:33">channel</name> <operator pos:start="91:35" pos:end="91:35">&lt;</operator> <name pos:start="91:37" pos:end="91:51"><name pos:start="91:37" pos:end="91:41">avctx</name><operator pos:start="91:42" pos:end="91:43">-&gt;</operator><name pos:start="91:44" pos:end="91:51">channels</name></name></expr>;</condition> <incr pos:start="91:54" pos:end="91:62"><expr pos:start="91:54" pos:end="91:62"><name pos:start="91:54" pos:end="91:60">channel</name><operator pos:start="91:61" pos:end="91:62">++</operator></expr></incr>)</control> <block pos:start="91:65" pos:end="163:9">{<block_content pos:start="93:13" pos:end="161:13">

            <decl_stmt pos:start="93:13" pos:end="93:26"><decl pos:start="93:13" pos:end="93:25"><type pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">int</name></type> <name pos:start="93:17" pos:end="93:25">predictor</name></decl>;</decl_stmt>

            <decl_stmt pos:start="95:13" pos:end="95:27"><decl pos:start="95:13" pos:end="95:26"><type pos:start="95:13" pos:end="95:15"><name pos:start="95:13" pos:end="95:15">int</name></type> <name pos:start="95:17" pos:end="95:26">step_index</name></decl>;</decl_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:39"><expr pos:start="97:13" pos:end="97:38"><name pos:start="97:13" pos:end="97:14">cs</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <operator pos:start="97:18" pos:end="97:18">&amp;</operator><operator pos:start="97:19" pos:end="97:19">(</operator><name pos:start="97:20" pos:end="97:37"><name pos:start="97:20" pos:end="97:20">c</name><operator pos:start="97:21" pos:end="97:22">-&gt;</operator><name pos:start="97:23" pos:end="97:28">status</name><index pos:start="97:29" pos:end="97:37">[<expr pos:start="97:30" pos:end="97:36"><name pos:start="97:30" pos:end="97:36">channel</name></expr>]</index></name><operator pos:start="97:38" pos:end="97:38">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="99:13" pos:end="99:37">/* (pppppp) (piiiiiii) */</comment>



            <comment type="block" pos:start="103:13" pos:end="103:86">/* Bits 15-7 are the _top_ 9 bits of the 16-bit initial predictor value */</comment>

            <expr_stmt pos:start="105:13" pos:end="105:68"><expr pos:start="105:13" pos:end="105:67"><name pos:start="105:13" pos:end="105:21">predictor</name> <operator pos:start="105:23" pos:end="105:23">=</operator> <call pos:start="105:25" pos:end="105:67"><name pos:start="105:25" pos:end="105:35">sign_extend</name><argument_list pos:start="105:36" pos:end="105:67">(<argument pos:start="105:37" pos:end="105:62"><expr pos:start="105:37" pos:end="105:62"><call pos:start="105:37" pos:end="105:62"><name pos:start="105:37" pos:end="105:57">bytestream2_get_be16u</name><argument_list pos:start="105:58" pos:end="105:62">(<argument pos:start="105:59" pos:end="105:61"><expr pos:start="105:59" pos:end="105:61"><operator pos:start="105:59" pos:end="105:59">&amp;</operator><name pos:start="105:60" pos:end="105:61">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="105:65" pos:end="105:66"><expr pos:start="105:65" pos:end="105:66"><literal type="number" pos:start="105:65" pos:end="105:66">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="107:13" pos:end="107:42"><expr pos:start="107:13" pos:end="107:41"><name pos:start="107:13" pos:end="107:22">step_index</name> <operator pos:start="107:24" pos:end="107:24">=</operator> <name pos:start="107:26" pos:end="107:34">predictor</name> <operator pos:start="107:36" pos:end="107:36">&amp;</operator> <literal type="number" pos:start="107:38" pos:end="107:41">0x7F</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="109:13" pos:end="109:31"><expr pos:start="109:13" pos:end="109:30"><name pos:start="109:13" pos:end="109:21">predictor</name> <operator pos:start="109:23" pos:end="109:24">&amp;=</operator> <operator pos:start="109:26" pos:end="109:26">~</operator><literal type="number" pos:start="109:27" pos:end="109:30">0x7F</literal></expr>;</expr_stmt>



            <if_stmt pos:start="113:13" pos:end="133:13"><if pos:start="113:13" pos:end="125:13">if <condition pos:start="113:16" pos:end="113:45">(<expr pos:start="113:17" pos:end="113:44"><name pos:start="113:17" pos:end="113:30"><name pos:start="113:17" pos:end="113:18">cs</name><operator pos:start="113:19" pos:end="113:20">-&gt;</operator><name pos:start="113:21" pos:end="113:30">step_index</name></name> <operator pos:start="113:32" pos:end="113:33">==</operator> <name pos:start="113:35" pos:end="113:44">step_index</name></expr>)</condition> <block pos:start="113:47" pos:end="125:13">{<block_content pos:start="115:17" pos:end="123:32">

                <decl_stmt pos:start="115:17" pos:end="115:53"><decl pos:start="115:17" pos:end="115:52"><type pos:start="115:17" pos:end="115:19"><name pos:start="115:17" pos:end="115:19">int</name></type> <name pos:start="115:21" pos:end="115:24">diff</name> <init pos:start="115:26" pos:end="115:52">= <expr pos:start="115:28" pos:end="115:52"><name pos:start="115:28" pos:end="115:36">predictor</name> <operator pos:start="115:38" pos:end="115:38">-</operator> <name pos:start="115:40" pos:end="115:52"><name pos:start="115:40" pos:end="115:41">cs</name><operator pos:start="115:42" pos:end="115:43">-&gt;</operator><name pos:start="115:44" pos:end="115:52">predictor</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="117:17" pos:end="119:34"><if pos:start="117:17" pos:end="119:34">if <condition pos:start="117:20" pos:end="117:29">(<expr pos:start="117:21" pos:end="117:28"><name pos:start="117:21" pos:end="117:24">diff</name> <operator pos:start="117:26" pos:end="117:26">&lt;</operator> <literal type="number" pos:start="117:28" pos:end="117:28">0</literal></expr>)</condition><block type="pseudo" pos:start="119:21" pos:end="119:34"><block_content pos:start="119:21" pos:end="119:34">

                    <expr_stmt pos:start="119:21" pos:end="119:34"><expr pos:start="119:21" pos:end="119:33"><name pos:start="119:21" pos:end="119:24">diff</name> <operator pos:start="119:26" pos:end="119:26">=</operator> <operator pos:start="119:28" pos:end="119:28">-</operator> <name pos:start="119:30" pos:end="119:33">diff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="121:17" pos:end="123:32"><if pos:start="121:17" pos:end="123:32">if <condition pos:start="121:20" pos:end="121:32">(<expr pos:start="121:21" pos:end="121:31"><name pos:start="121:21" pos:end="121:24">diff</name> <operator pos:start="121:26" pos:end="121:26">&gt;</operator> <literal type="number" pos:start="121:28" pos:end="121:31">0x7f</literal></expr>)</condition><block type="pseudo" pos:start="123:21" pos:end="123:32"><block_content pos:start="123:21" pos:end="123:32">

                    <goto pos:start="123:21" pos:end="123:32">goto <name pos:start="123:26" pos:end="123:31">update</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="125:15" pos:end="133:13">else <block pos:start="125:20" pos:end="133:13">{<block_content pos:start="127:13" pos:end="131:42">

            <label pos:start="127:13" pos:end="127:19"><name pos:start="127:13" pos:end="127:18">update</name>:</label>

                <expr_stmt pos:start="129:17" pos:end="129:44"><expr pos:start="129:17" pos:end="129:43"><name pos:start="129:17" pos:end="129:30"><name pos:start="129:17" pos:end="129:18">cs</name><operator pos:start="129:19" pos:end="129:20">-&gt;</operator><name pos:start="129:21" pos:end="129:30">step_index</name></name> <operator pos:start="129:32" pos:end="129:32">=</operator> <name pos:start="129:34" pos:end="129:43">step_index</name></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:42"><expr pos:start="131:17" pos:end="131:41"><name pos:start="131:17" pos:end="131:29"><name pos:start="131:17" pos:end="131:18">cs</name><operator pos:start="131:19" pos:end="131:20">-&gt;</operator><name pos:start="131:21" pos:end="131:29">predictor</name></name> <operator pos:start="131:31" pos:end="131:31">=</operator> <name pos:start="131:33" pos:end="131:41">predictor</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="137:13" pos:end="145:13"><if pos:start="137:13" pos:end="145:13">if <condition pos:start="137:16" pos:end="137:37">(<expr pos:start="137:17" pos:end="137:36"><name pos:start="137:17" pos:end="137:30"><name pos:start="137:17" pos:end="137:18">cs</name><operator pos:start="137:19" pos:end="137:20">-&gt;</operator><name pos:start="137:21" pos:end="137:30">step_index</name></name> <operator pos:start="137:32" pos:end="137:32">&gt;</operator> <literal type="number" pos:start="137:34" pos:end="137:36">88u</literal></expr>)</condition><block pos:start="137:38" pos:end="145:13">{<block_content pos:start="139:17" pos:end="143:43">

                <expr_stmt pos:start="139:17" pos:end="141:48"><expr pos:start="139:17" pos:end="141:47"><call pos:start="139:17" pos:end="141:47"><name pos:start="139:17" pos:end="139:22">av_log</name><argument_list pos:start="139:23" pos:end="141:47">(<argument pos:start="139:24" pos:end="139:28"><expr pos:start="139:24" pos:end="139:28"><name pos:start="139:24" pos:end="139:28">avctx</name></expr></argument>, <argument pos:start="139:31" pos:end="139:42"><expr pos:start="139:31" pos:end="139:42"><name pos:start="139:31" pos:end="139:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="139:45" pos:end="139:74"><expr pos:start="139:45" pos:end="139:74"><literal type="string" pos:start="139:45" pos:end="139:74">"ERROR: step_index[%d] = %i\n"</literal></expr></argument>,

                       <argument pos:start="141:24" pos:end="141:30"><expr pos:start="141:24" pos:end="141:30"><name pos:start="141:24" pos:end="141:30">channel</name></expr></argument>, <argument pos:start="141:33" pos:end="141:46"><expr pos:start="141:33" pos:end="141:46"><name pos:start="141:33" pos:end="141:46"><name pos:start="141:33" pos:end="141:34">cs</name><operator pos:start="141:35" pos:end="141:36">-&gt;</operator><name pos:start="141:37" pos:end="141:46">step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="143:17" pos:end="143:43">return <expr pos:start="143:24" pos:end="143:42"><name pos:start="143:24" pos:end="143:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="149:13" pos:end="149:41"><expr pos:start="149:13" pos:end="149:40"><name pos:start="149:13" pos:end="149:19">samples</name> <operator pos:start="149:21" pos:end="149:21">=</operator> <name pos:start="149:23" pos:end="149:40"><name pos:start="149:23" pos:end="149:31">samples_p</name><index pos:start="149:32" pos:end="149:40">[<expr pos:start="149:33" pos:end="149:39"><name pos:start="149:33" pos:end="149:39">channel</name></expr>]</index></name></expr>;</expr_stmt>



            <for pos:start="153:13" pos:end="161:13">for <control pos:start="153:17" pos:end="153:39">(<init pos:start="153:18" pos:end="153:23"><expr pos:start="153:18" pos:end="153:22"><name pos:start="153:18" pos:end="153:18">m</name> <operator pos:start="153:20" pos:end="153:20">=</operator> <literal type="number" pos:start="153:22" pos:end="153:22">0</literal></expr>;</init> <condition pos:start="153:25" pos:end="153:31"><expr pos:start="153:25" pos:end="153:30"><name pos:start="153:25" pos:end="153:25">m</name> <operator pos:start="153:27" pos:end="153:27">&lt;</operator> <literal type="number" pos:start="153:29" pos:end="153:30">64</literal></expr>;</condition> <incr pos:start="153:33" pos:end="153:38"><expr pos:start="153:33" pos:end="153:38"><name pos:start="153:33" pos:end="153:33">m</name> <operator pos:start="153:35" pos:end="153:36">+=</operator> <literal type="number" pos:start="153:38" pos:end="153:38">2</literal></expr></incr>)</control> <block pos:start="153:41" pos:end="161:13">{<block_content pos:start="155:17" pos:end="159:80">

                <decl_stmt pos:start="155:17" pos:end="155:54"><decl pos:start="155:17" pos:end="155:53"><type pos:start="155:17" pos:end="155:19"><name pos:start="155:17" pos:end="155:19">int</name></type> <name pos:start="155:21" pos:end="155:24">byte</name> <init pos:start="155:26" pos:end="155:53">= <expr pos:start="155:28" pos:end="155:53"><call pos:start="155:28" pos:end="155:53"><name pos:start="155:28" pos:end="155:48">bytestream2_get_byteu</name><argument_list pos:start="155:49" pos:end="155:53">(<argument pos:start="155:50" pos:end="155:52"><expr pos:start="155:50" pos:end="155:52"><operator pos:start="155:50" pos:end="155:50">&amp;</operator><name pos:start="155:51" pos:end="155:52">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:80"><expr pos:start="157:17" pos:end="157:79"><name pos:start="157:17" pos:end="157:30"><name pos:start="157:17" pos:end="157:23">samples</name><index pos:start="157:24" pos:end="157:30">[<expr pos:start="157:25" pos:end="157:25"><name pos:start="157:25" pos:end="157:25">m</name></expr>    ]</index></name> <operator pos:start="157:32" pos:end="157:32">=</operator> <call pos:start="157:34" pos:end="157:79"><name pos:start="157:34" pos:end="157:59">adpcm_ima_qt_expand_nibble</name><argument_list pos:start="157:60" pos:end="157:79">(<argument pos:start="157:61" pos:end="157:62"><expr pos:start="157:61" pos:end="157:62"><name pos:start="157:61" pos:end="157:62">cs</name></expr></argument>, <argument pos:start="157:65" pos:end="157:75"><expr pos:start="157:65" pos:end="157:75"><name pos:start="157:65" pos:end="157:68">byte</name> <operator pos:start="157:70" pos:end="157:70">&amp;</operator> <literal type="number" pos:start="157:72" pos:end="157:75">0x0F</literal></expr></argument>, <argument pos:start="157:78" pos:end="157:78"><expr pos:start="157:78" pos:end="157:78"><literal type="number" pos:start="157:78" pos:end="157:78">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:80"><expr pos:start="159:17" pos:end="159:79"><name pos:start="159:17" pos:end="159:30"><name pos:start="159:17" pos:end="159:23">samples</name><index pos:start="159:24" pos:end="159:30">[<expr pos:start="159:25" pos:end="159:29"><name pos:start="159:25" pos:end="159:25">m</name> <operator pos:start="159:27" pos:end="159:27">+</operator> <literal type="number" pos:start="159:29" pos:end="159:29">1</literal></expr>]</index></name> <operator pos:start="159:32" pos:end="159:32">=</operator> <call pos:start="159:34" pos:end="159:79"><name pos:start="159:34" pos:end="159:59">adpcm_ima_qt_expand_nibble</name><argument_list pos:start="159:60" pos:end="159:79">(<argument pos:start="159:61" pos:end="159:62"><expr pos:start="159:61" pos:end="159:62"><name pos:start="159:61" pos:end="159:62">cs</name></expr></argument>, <argument pos:start="159:65" pos:end="159:73"><expr pos:start="159:65" pos:end="159:73"><name pos:start="159:65" pos:end="159:68">byte</name> <operator pos:start="159:70" pos:end="159:71">&gt;&gt;</operator> <literal type="number" pos:start="159:73" pos:end="159:73">4</literal></expr></argument>  , <argument pos:start="159:78" pos:end="159:78"><expr pos:start="159:78" pos:end="159:78"><literal type="number" pos:start="159:78" pos:end="159:78">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <break pos:start="165:9" pos:end="165:14">break;</break>

    <case pos:start="167:5" pos:end="167:35">case <expr pos:start="167:10" pos:end="167:34"><name pos:start="167:10" pos:end="167:34">AV_CODEC_ID_ADPCM_IMA_WAV</name></expr>:</case>

        <for pos:start="169:9" pos:end="189:9">for<control pos:start="169:12" pos:end="169:40">(<init pos:start="169:13" pos:end="169:16"><expr pos:start="169:13" pos:end="169:15"><name pos:start="169:13" pos:end="169:13">i</name><operator pos:start="169:14" pos:end="169:14">=</operator><literal type="number" pos:start="169:15" pos:end="169:15">0</literal></expr>;</init> <condition pos:start="169:18" pos:end="169:35"><expr pos:start="169:18" pos:end="169:34"><name pos:start="169:18" pos:end="169:18">i</name><operator pos:start="169:19" pos:end="169:19">&lt;</operator><name pos:start="169:20" pos:end="169:34"><name pos:start="169:20" pos:end="169:24">avctx</name><operator pos:start="169:25" pos:end="169:26">-&gt;</operator><name pos:start="169:27" pos:end="169:34">channels</name></name></expr>;</condition> <incr pos:start="169:37" pos:end="169:39"><expr pos:start="169:37" pos:end="169:39"><name pos:start="169:37" pos:end="169:37">i</name><operator pos:start="169:38" pos:end="169:39">++</operator></expr></incr>)</control><block pos:start="169:41" pos:end="189:9">{<block_content pos:start="171:13" pos:end="187:13">

            <expr_stmt pos:start="171:13" pos:end="171:33"><expr pos:start="171:13" pos:end="171:32"><name pos:start="171:13" pos:end="171:14">cs</name> <operator pos:start="171:16" pos:end="171:16">=</operator> <operator pos:start="171:18" pos:end="171:18">&amp;</operator><operator pos:start="171:19" pos:end="171:19">(</operator><name pos:start="171:20" pos:end="171:31"><name pos:start="171:20" pos:end="171:20">c</name><operator pos:start="171:21" pos:end="171:22">-&gt;</operator><name pos:start="171:23" pos:end="171:28">status</name><index pos:start="171:29" pos:end="171:31">[<expr pos:start="171:30" pos:end="171:30"><name pos:start="171:30" pos:end="171:30">i</name></expr>]</index></name><operator pos:start="171:32" pos:end="171:32">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:90"><expr pos:start="173:13" pos:end="173:89"><name pos:start="173:13" pos:end="173:25"><name pos:start="173:13" pos:end="173:14">cs</name><operator pos:start="173:15" pos:end="173:16">-&gt;</operator><name pos:start="173:17" pos:end="173:25">predictor</name></name> <operator pos:start="173:27" pos:end="173:27">=</operator> <name pos:start="173:29" pos:end="173:43"><name pos:start="173:29" pos:end="173:37">samples_p</name><index pos:start="173:38" pos:end="173:40">[<expr pos:start="173:39" pos:end="173:39"><name pos:start="173:39" pos:end="173:39">i</name></expr>]</index><index pos:start="173:41" pos:end="173:43">[<expr pos:start="173:42" pos:end="173:42"><literal type="number" pos:start="173:42" pos:end="173:42">0</literal></expr>]</index></name> <operator pos:start="173:45" pos:end="173:45">=</operator> <call pos:start="173:47" pos:end="173:89"><name pos:start="173:47" pos:end="173:57">sign_extend</name><argument_list pos:start="173:58" pos:end="173:89">(<argument pos:start="173:59" pos:end="173:84"><expr pos:start="173:59" pos:end="173:84"><call pos:start="173:59" pos:end="173:84"><name pos:start="173:59" pos:end="173:79">bytestream2_get_le16u</name><argument_list pos:start="173:80" pos:end="173:84">(<argument pos:start="173:81" pos:end="173:83"><expr pos:start="173:81" pos:end="173:83"><operator pos:start="173:81" pos:end="173:81">&amp;</operator><name pos:start="173:82" pos:end="173:83">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="173:87" pos:end="173:88"><expr pos:start="173:87" pos:end="173:88"><literal type="number" pos:start="173:87" pos:end="173:88">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="177:13" pos:end="177:73"><expr pos:start="177:13" pos:end="177:72"><name pos:start="177:13" pos:end="177:26"><name pos:start="177:13" pos:end="177:14">cs</name><operator pos:start="177:15" pos:end="177:16">-&gt;</operator><name pos:start="177:17" pos:end="177:26">step_index</name></name> <operator pos:start="177:28" pos:end="177:28">=</operator> <call pos:start="177:30" pos:end="177:72"><name pos:start="177:30" pos:end="177:40">sign_extend</name><argument_list pos:start="177:41" pos:end="177:72">(<argument pos:start="177:42" pos:end="177:67"><expr pos:start="177:42" pos:end="177:67"><call pos:start="177:42" pos:end="177:67"><name pos:start="177:42" pos:end="177:62">bytestream2_get_le16u</name><argument_list pos:start="177:63" pos:end="177:67">(<argument pos:start="177:64" pos:end="177:66"><expr pos:start="177:64" pos:end="177:66"><operator pos:start="177:64" pos:end="177:64">&amp;</operator><name pos:start="177:65" pos:end="177:66">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="177:70" pos:end="177:71"><expr pos:start="177:70" pos:end="177:71"><literal type="number" pos:start="177:70" pos:end="177:71">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="179:13" pos:end="187:13"><if pos:start="179:13" pos:end="187:13">if <condition pos:start="179:16" pos:end="179:37">(<expr pos:start="179:17" pos:end="179:36"><name pos:start="179:17" pos:end="179:30"><name pos:start="179:17" pos:end="179:18">cs</name><operator pos:start="179:19" pos:end="179:20">-&gt;</operator><name pos:start="179:21" pos:end="179:30">step_index</name></name> <operator pos:start="179:32" pos:end="179:32">&gt;</operator> <literal type="number" pos:start="179:34" pos:end="179:36">88u</literal></expr>)</condition><block pos:start="179:38" pos:end="187:13">{<block_content pos:start="181:17" pos:end="185:43">

                <expr_stmt pos:start="181:17" pos:end="183:42"><expr pos:start="181:17" pos:end="183:41"><call pos:start="181:17" pos:end="183:41"><name pos:start="181:17" pos:end="181:22">av_log</name><argument_list pos:start="181:23" pos:end="183:41">(<argument pos:start="181:24" pos:end="181:28"><expr pos:start="181:24" pos:end="181:28"><name pos:start="181:24" pos:end="181:28">avctx</name></expr></argument>, <argument pos:start="181:31" pos:end="181:42"><expr pos:start="181:31" pos:end="181:42"><name pos:start="181:31" pos:end="181:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="181:45" pos:end="181:74"><expr pos:start="181:45" pos:end="181:74"><literal type="string" pos:start="181:45" pos:end="181:74">"ERROR: step_index[%d] = %i\n"</literal></expr></argument>,

                       <argument pos:start="183:24" pos:end="183:24"><expr pos:start="183:24" pos:end="183:24"><name pos:start="183:24" pos:end="183:24">i</name></expr></argument>, <argument pos:start="183:27" pos:end="183:40"><expr pos:start="183:27" pos:end="183:40"><name pos:start="183:27" pos:end="183:40"><name pos:start="183:27" pos:end="183:28">cs</name><operator pos:start="183:29" pos:end="183:30">-&gt;</operator><name pos:start="183:31" pos:end="183:40">step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="185:17" pos:end="185:43">return <expr pos:start="185:24" pos:end="185:42"><name pos:start="185:24" pos:end="185:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <for pos:start="193:9" pos:end="213:9">for <control pos:start="193:13" pos:end="193:50">(<init pos:start="193:14" pos:end="193:19"><expr pos:start="193:14" pos:end="193:18"><name pos:start="193:14" pos:end="193:14">n</name> <operator pos:start="193:16" pos:end="193:16">=</operator> <literal type="number" pos:start="193:18" pos:end="193:18">0</literal></expr>;</init> <condition pos:start="193:21" pos:end="193:45"><expr pos:start="193:21" pos:end="193:44"><name pos:start="193:21" pos:end="193:21">n</name> <operator pos:start="193:23" pos:end="193:23">&lt;</operator> <operator pos:start="193:25" pos:end="193:25">(</operator><name pos:start="193:26" pos:end="193:35">nb_samples</name> <operator pos:start="193:37" pos:end="193:37">-</operator> <literal type="number" pos:start="193:39" pos:end="193:39">1</literal><operator pos:start="193:40" pos:end="193:40">)</operator> <operator pos:start="193:42" pos:end="193:42">/</operator> <literal type="number" pos:start="193:44" pos:end="193:44">8</literal></expr>;</condition> <incr pos:start="193:47" pos:end="193:49"><expr pos:start="193:47" pos:end="193:49"><name pos:start="193:47" pos:end="193:47">n</name><operator pos:start="193:48" pos:end="193:49">++</operator></expr></incr>)</control> <block pos:start="193:52" pos:end="213:9">{<block_content pos:start="195:13" pos:end="211:13">

            <for pos:start="195:13" pos:end="211:13">for <control pos:start="195:17" pos:end="195:49">(<init pos:start="195:18" pos:end="195:23"><expr pos:start="195:18" pos:end="195:22"><name pos:start="195:18" pos:end="195:18">i</name> <operator pos:start="195:20" pos:end="195:20">=</operator> <literal type="number" pos:start="195:22" pos:end="195:22">0</literal></expr>;</init> <condition pos:start="195:25" pos:end="195:44"><expr pos:start="195:25" pos:end="195:43"><name pos:start="195:25" pos:end="195:25">i</name> <operator pos:start="195:27" pos:end="195:27">&lt;</operator> <name pos:start="195:29" pos:end="195:43"><name pos:start="195:29" pos:end="195:33">avctx</name><operator pos:start="195:34" pos:end="195:35">-&gt;</operator><name pos:start="195:36" pos:end="195:43">channels</name></name></expr>;</condition> <incr pos:start="195:46" pos:end="195:48"><expr pos:start="195:46" pos:end="195:48"><name pos:start="195:46" pos:end="195:46">i</name><operator pos:start="195:47" pos:end="195:48">++</operator></expr></incr>)</control> <block pos:start="195:51" pos:end="211:13">{<block_content pos:start="197:17" pos:end="209:17">

                <expr_stmt pos:start="197:17" pos:end="197:35"><expr pos:start="197:17" pos:end="197:34"><name pos:start="197:17" pos:end="197:18">cs</name> <operator pos:start="197:20" pos:end="197:20">=</operator> <operator pos:start="197:22" pos:end="197:22">&amp;</operator><name pos:start="197:23" pos:end="197:34"><name pos:start="197:23" pos:end="197:23">c</name><operator pos:start="197:24" pos:end="197:25">-&gt;</operator><name pos:start="197:26" pos:end="197:31">status</name><index pos:start="197:32" pos:end="197:34">[<expr pos:start="197:33" pos:end="197:33"><name pos:start="197:33" pos:end="197:33">i</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:51"><expr pos:start="199:17" pos:end="199:50"><name pos:start="199:17" pos:end="199:23">samples</name> <operator pos:start="199:25" pos:end="199:25">=</operator> <operator pos:start="199:27" pos:end="199:27">&amp;</operator><name pos:start="199:28" pos:end="199:50"><name pos:start="199:28" pos:end="199:36">samples_p</name><index pos:start="199:37" pos:end="199:39">[<expr pos:start="199:38" pos:end="199:38"><name pos:start="199:38" pos:end="199:38">i</name></expr>]</index><index pos:start="199:40" pos:end="199:50">[<expr pos:start="199:41" pos:end="199:49"><literal type="number" pos:start="199:41" pos:end="199:43">1</literal> <operator pos:start="199:43" pos:end="199:43">+</operator> <name pos:start="199:45" pos:end="199:45">n</name> <operator pos:start="199:47" pos:end="199:47">*</operator> <literal type="number" pos:start="199:49" pos:end="199:49">8</literal></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="201:17" pos:end="209:17">for <control pos:start="201:21" pos:end="201:42">(<init pos:start="201:22" pos:end="201:27"><expr pos:start="201:22" pos:end="201:26"><name pos:start="201:22" pos:end="201:22">m</name> <operator pos:start="201:24" pos:end="201:24">=</operator> <literal type="number" pos:start="201:26" pos:end="201:26">0</literal></expr>;</init> <condition pos:start="201:29" pos:end="201:34"><expr pos:start="201:29" pos:end="201:33"><name pos:start="201:29" pos:end="201:29">m</name> <operator pos:start="201:31" pos:end="201:31">&lt;</operator> <literal type="number" pos:start="201:33" pos:end="201:33">8</literal></expr>;</condition> <incr pos:start="201:36" pos:end="201:41"><expr pos:start="201:36" pos:end="201:41"><name pos:start="201:36" pos:end="201:36">m</name> <operator pos:start="201:38" pos:end="201:39">+=</operator> <literal type="number" pos:start="201:41" pos:end="201:41">2</literal></expr></incr>)</control> <block pos:start="201:44" pos:end="209:17">{<block_content pos:start="203:21" pos:end="207:78">

                    <decl_stmt pos:start="203:21" pos:end="203:55"><decl pos:start="203:21" pos:end="203:54"><type pos:start="203:21" pos:end="203:23"><name pos:start="203:21" pos:end="203:23">int</name></type> <name pos:start="203:25" pos:end="203:25">v</name> <init pos:start="203:27" pos:end="203:54">= <expr pos:start="203:29" pos:end="203:54"><call pos:start="203:29" pos:end="203:54"><name pos:start="203:29" pos:end="203:49">bytestream2_get_byteu</name><argument_list pos:start="203:50" pos:end="203:54">(<argument pos:start="203:51" pos:end="203:53"><expr pos:start="203:51" pos:end="203:53"><operator pos:start="203:51" pos:end="203:51">&amp;</operator><name pos:start="203:52" pos:end="203:53">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="205:21" pos:end="205:78"><expr pos:start="205:21" pos:end="205:77"><name pos:start="205:21" pos:end="205:34"><name pos:start="205:21" pos:end="205:27">samples</name><index pos:start="205:28" pos:end="205:34">[<expr pos:start="205:29" pos:end="205:29"><name pos:start="205:29" pos:end="205:29">m</name></expr>    ]</index></name> <operator pos:start="205:36" pos:end="205:36">=</operator> <call pos:start="205:38" pos:end="205:77"><name pos:start="205:38" pos:end="205:60">adpcm_ima_expand_nibble</name><argument_list pos:start="205:61" pos:end="205:77">(<argument pos:start="205:62" pos:end="205:63"><expr pos:start="205:62" pos:end="205:63"><name pos:start="205:62" pos:end="205:63">cs</name></expr></argument>, <argument pos:start="205:66" pos:end="205:73"><expr pos:start="205:66" pos:end="205:73"><name pos:start="205:66" pos:end="205:66">v</name> <operator pos:start="205:68" pos:end="205:68">&amp;</operator> <literal type="number" pos:start="205:70" pos:end="205:73">0x0F</literal></expr></argument>, <argument pos:start="205:76" pos:end="205:76"><expr pos:start="205:76" pos:end="205:76"><literal type="number" pos:start="205:76" pos:end="205:76">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="207:21" pos:end="207:78"><expr pos:start="207:21" pos:end="207:77"><name pos:start="207:21" pos:end="207:34"><name pos:start="207:21" pos:end="207:27">samples</name><index pos:start="207:28" pos:end="207:34">[<expr pos:start="207:29" pos:end="207:33"><name pos:start="207:29" pos:end="207:29">m</name> <operator pos:start="207:31" pos:end="207:31">+</operator> <literal type="number" pos:start="207:33" pos:end="207:33">1</literal></expr>]</index></name> <operator pos:start="207:36" pos:end="207:36">=</operator> <call pos:start="207:38" pos:end="207:77"><name pos:start="207:38" pos:end="207:60">adpcm_ima_expand_nibble</name><argument_list pos:start="207:61" pos:end="207:77">(<argument pos:start="207:62" pos:end="207:63"><expr pos:start="207:62" pos:end="207:63"><name pos:start="207:62" pos:end="207:63">cs</name></expr></argument>, <argument pos:start="207:66" pos:end="207:71"><expr pos:start="207:66" pos:end="207:71"><name pos:start="207:66" pos:end="207:66">v</name> <operator pos:start="207:68" pos:end="207:69">&gt;&gt;</operator> <literal type="number" pos:start="207:71" pos:end="207:71">4</literal></expr></argument>  , <argument pos:start="207:76" pos:end="207:76"><expr pos:start="207:76" pos:end="207:76"><literal type="number" pos:start="207:76" pos:end="207:76">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <break pos:start="215:9" pos:end="215:14">break;</break>

    <case pos:start="217:5" pos:end="217:31">case <expr pos:start="217:10" pos:end="217:30"><name pos:start="217:10" pos:end="217:30">AV_CODEC_ID_ADPCM_4XM</name></expr>:</case>

        <for pos:start="219:9" pos:end="221:81">for <control pos:start="219:13" pos:end="219:45">(<init pos:start="219:14" pos:end="219:19"><expr pos:start="219:14" pos:end="219:18"><name pos:start="219:14" pos:end="219:14">i</name> <operator pos:start="219:16" pos:end="219:16">=</operator> <literal type="number" pos:start="219:18" pos:end="219:18">0</literal></expr>;</init> <condition pos:start="219:21" pos:end="219:40"><expr pos:start="219:21" pos:end="219:39"><name pos:start="219:21" pos:end="219:21">i</name> <operator pos:start="219:23" pos:end="219:23">&lt;</operator> <name pos:start="219:25" pos:end="219:39"><name pos:start="219:25" pos:end="219:29">avctx</name><operator pos:start="219:30" pos:end="219:31">-&gt;</operator><name pos:start="219:32" pos:end="219:39">channels</name></name></expr>;</condition> <incr pos:start="219:42" pos:end="219:44"><expr pos:start="219:42" pos:end="219:44"><name pos:start="219:42" pos:end="219:42">i</name><operator pos:start="219:43" pos:end="219:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="221:13" pos:end="221:81"><block_content pos:start="221:13" pos:end="221:81">

            <expr_stmt pos:start="221:13" pos:end="221:81"><expr pos:start="221:13" pos:end="221:80"><name pos:start="221:13" pos:end="221:24"><name pos:start="221:13" pos:end="221:13">c</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:21">status</name><index pos:start="221:22" pos:end="221:24">[<expr pos:start="221:23" pos:end="221:23"><name pos:start="221:23" pos:end="221:23">i</name></expr>]</index></name><operator pos:start="221:25" pos:end="221:25">.</operator><name pos:start="221:26" pos:end="221:34">predictor</name> <operator pos:start="221:36" pos:end="221:36">=</operator> <call pos:start="221:38" pos:end="221:80"><name pos:start="221:38" pos:end="221:48">sign_extend</name><argument_list pos:start="221:49" pos:end="221:80">(<argument pos:start="221:50" pos:end="221:75"><expr pos:start="221:50" pos:end="221:75"><call pos:start="221:50" pos:end="221:75"><name pos:start="221:50" pos:end="221:70">bytestream2_get_le16u</name><argument_list pos:start="221:71" pos:end="221:75">(<argument pos:start="221:72" pos:end="221:74"><expr pos:start="221:72" pos:end="221:74"><operator pos:start="221:72" pos:end="221:72">&amp;</operator><name pos:start="221:73" pos:end="221:74">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="221:78" pos:end="221:79"><expr pos:start="221:78" pos:end="221:79"><literal type="number" pos:start="221:78" pos:end="221:79">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="225:9" pos:end="239:9">for <control pos:start="225:13" pos:end="225:45">(<init pos:start="225:14" pos:end="225:19"><expr pos:start="225:14" pos:end="225:18"><name pos:start="225:14" pos:end="225:14">i</name> <operator pos:start="225:16" pos:end="225:16">=</operator> <literal type="number" pos:start="225:18" pos:end="225:18">0</literal></expr>;</init> <condition pos:start="225:21" pos:end="225:40"><expr pos:start="225:21" pos:end="225:39"><name pos:start="225:21" pos:end="225:21">i</name> <operator pos:start="225:23" pos:end="225:23">&lt;</operator> <name pos:start="225:25" pos:end="225:39"><name pos:start="225:25" pos:end="225:29">avctx</name><operator pos:start="225:30" pos:end="225:31">-&gt;</operator><name pos:start="225:32" pos:end="225:39">channels</name></name></expr>;</condition> <incr pos:start="225:42" pos:end="225:44"><expr pos:start="225:42" pos:end="225:44"><name pos:start="225:42" pos:end="225:42">i</name><operator pos:start="225:43" pos:end="225:44">++</operator></expr></incr>)</control> <block pos:start="225:47" pos:end="239:9">{<block_content pos:start="227:13" pos:end="237:13">

            <expr_stmt pos:start="227:13" pos:end="227:82"><expr pos:start="227:13" pos:end="227:81"><name pos:start="227:13" pos:end="227:24"><name pos:start="227:13" pos:end="227:13">c</name><operator pos:start="227:14" pos:end="227:15">-&gt;</operator><name pos:start="227:16" pos:end="227:21">status</name><index pos:start="227:22" pos:end="227:24">[<expr pos:start="227:23" pos:end="227:23"><name pos:start="227:23" pos:end="227:23">i</name></expr>]</index></name><operator pos:start="227:25" pos:end="227:25">.</operator><name pos:start="227:26" pos:end="227:35">step_index</name> <operator pos:start="227:37" pos:end="227:37">=</operator> <call pos:start="227:39" pos:end="227:81"><name pos:start="227:39" pos:end="227:49">sign_extend</name><argument_list pos:start="227:50" pos:end="227:81">(<argument pos:start="227:51" pos:end="227:76"><expr pos:start="227:51" pos:end="227:76"><call pos:start="227:51" pos:end="227:76"><name pos:start="227:51" pos:end="227:71">bytestream2_get_le16u</name><argument_list pos:start="227:72" pos:end="227:76">(<argument pos:start="227:73" pos:end="227:75"><expr pos:start="227:73" pos:end="227:75"><operator pos:start="227:73" pos:end="227:73">&amp;</operator><name pos:start="227:74" pos:end="227:75">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="227:79" pos:end="227:80"><expr pos:start="227:79" pos:end="227:80"><literal type="number" pos:start="227:79" pos:end="227:80">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="229:13" pos:end="237:13"><if pos:start="229:13" pos:end="237:13">if <condition pos:start="229:16" pos:end="229:46">(<expr pos:start="229:17" pos:end="229:45"><name pos:start="229:17" pos:end="229:28"><name pos:start="229:17" pos:end="229:17">c</name><operator pos:start="229:18" pos:end="229:19">-&gt;</operator><name pos:start="229:20" pos:end="229:25">status</name><index pos:start="229:26" pos:end="229:28">[<expr pos:start="229:27" pos:end="229:27"><name pos:start="229:27" pos:end="229:27">i</name></expr>]</index></name><operator pos:start="229:29" pos:end="229:29">.</operator><name pos:start="229:30" pos:end="229:39">step_index</name> <operator pos:start="229:41" pos:end="229:41">&gt;</operator> <literal type="number" pos:start="229:43" pos:end="229:45">88u</literal></expr>)</condition> <block pos:start="229:48" pos:end="237:13">{<block_content pos:start="231:17" pos:end="235:43">

                <expr_stmt pos:start="231:17" pos:end="233:51"><expr pos:start="231:17" pos:end="233:50"><call pos:start="231:17" pos:end="233:50"><name pos:start="231:17" pos:end="231:22">av_log</name><argument_list pos:start="231:23" pos:end="233:50">(<argument pos:start="231:24" pos:end="231:28"><expr pos:start="231:24" pos:end="231:28"><name pos:start="231:24" pos:end="231:28">avctx</name></expr></argument>, <argument pos:start="231:31" pos:end="231:42"><expr pos:start="231:31" pos:end="231:42"><name pos:start="231:31" pos:end="231:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="231:45" pos:end="231:74"><expr pos:start="231:45" pos:end="231:74"><literal type="string" pos:start="231:45" pos:end="231:74">"ERROR: step_index[%d] = %i\n"</literal></expr></argument>,

                       <argument pos:start="233:24" pos:end="233:24"><expr pos:start="233:24" pos:end="233:24"><name pos:start="233:24" pos:end="233:24">i</name></expr></argument>, <argument pos:start="233:27" pos:end="233:49"><expr pos:start="233:27" pos:end="233:49"><name pos:start="233:27" pos:end="233:38"><name pos:start="233:27" pos:end="233:27">c</name><operator pos:start="233:28" pos:end="233:29">-&gt;</operator><name pos:start="233:30" pos:end="233:35">status</name><index pos:start="233:36" pos:end="233:38">[<expr pos:start="233:37" pos:end="233:37"><name pos:start="233:37" pos:end="233:37">i</name></expr>]</index></name><operator pos:start="233:39" pos:end="233:39">.</operator><name pos:start="233:40" pos:end="233:49">step_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="235:17" pos:end="235:43">return <expr pos:start="235:24" pos:end="235:42"><name pos:start="235:24" pos:end="235:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <for pos:start="243:9" pos:end="259:9">for <control pos:start="243:13" pos:end="243:45">(<init pos:start="243:14" pos:end="243:19"><expr pos:start="243:14" pos:end="243:18"><name pos:start="243:14" pos:end="243:14">i</name> <operator pos:start="243:16" pos:end="243:16">=</operator> <literal type="number" pos:start="243:18" pos:end="243:18">0</literal></expr>;</init> <condition pos:start="243:21" pos:end="243:40"><expr pos:start="243:21" pos:end="243:39"><name pos:start="243:21" pos:end="243:21">i</name> <operator pos:start="243:23" pos:end="243:23">&lt;</operator> <name pos:start="243:25" pos:end="243:39"><name pos:start="243:25" pos:end="243:29">avctx</name><operator pos:start="243:30" pos:end="243:31">-&gt;</operator><name pos:start="243:32" pos:end="243:39">channels</name></name></expr>;</condition> <incr pos:start="243:42" pos:end="243:44"><expr pos:start="243:42" pos:end="243:44"><name pos:start="243:42" pos:end="243:42">i</name><operator pos:start="243:43" pos:end="243:44">++</operator></expr></incr>)</control> <block pos:start="243:47" pos:end="259:9">{<block_content pos:start="245:13" pos:end="257:13">

            <expr_stmt pos:start="245:13" pos:end="245:50"><expr pos:start="245:13" pos:end="245:49"><name pos:start="245:13" pos:end="245:19">samples</name> <operator pos:start="245:21" pos:end="245:21">=</operator> <operator pos:start="245:23" pos:end="245:23">(</operator><name pos:start="245:24" pos:end="245:30">int16_t</name> <operator pos:start="245:32" pos:end="245:32">*</operator><operator pos:start="245:33" pos:end="245:33">)</operator><name pos:start="245:34" pos:end="245:49"><name pos:start="245:34" pos:end="245:34">c</name><operator pos:start="245:35" pos:end="245:36">-&gt;</operator><name pos:start="245:37" pos:end="245:41">frame</name><operator pos:start="245:42" pos:end="245:42">.</operator><name pos:start="245:43" pos:end="245:46">data</name><index pos:start="245:47" pos:end="245:49">[<expr pos:start="245:48" pos:end="245:48"><name pos:start="245:48" pos:end="245:48">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:31"><expr pos:start="247:13" pos:end="247:30"><name pos:start="247:13" pos:end="247:14">cs</name> <operator pos:start="247:16" pos:end="247:16">=</operator> <operator pos:start="247:18" pos:end="247:18">&amp;</operator><name pos:start="247:19" pos:end="247:30"><name pos:start="247:19" pos:end="247:19">c</name><operator pos:start="247:20" pos:end="247:21">-&gt;</operator><name pos:start="247:22" pos:end="247:27">status</name><index pos:start="247:28" pos:end="247:30">[<expr pos:start="247:29" pos:end="247:29"><name pos:start="247:29" pos:end="247:29">i</name></expr>]</index></name></expr>;</expr_stmt>

            <for pos:start="249:13" pos:end="257:13">for <control pos:start="249:17" pos:end="249:49">(<init pos:start="249:18" pos:end="249:37"><expr pos:start="249:18" pos:end="249:36"><name pos:start="249:18" pos:end="249:18">n</name> <operator pos:start="249:20" pos:end="249:20">=</operator> <name pos:start="249:22" pos:end="249:31">nb_samples</name> <operator pos:start="249:33" pos:end="249:34">&gt;&gt;</operator> <literal type="number" pos:start="249:36" pos:end="249:36">1</literal></expr>;</init> <condition pos:start="249:39" pos:end="249:44"><expr pos:start="249:39" pos:end="249:43"><name pos:start="249:39" pos:end="249:39">n</name> <operator pos:start="249:41" pos:end="249:41">&gt;</operator> <literal type="number" pos:start="249:43" pos:end="249:43">0</literal></expr>;</condition> <incr pos:start="249:46" pos:end="249:48"><expr pos:start="249:46" pos:end="249:48"><name pos:start="249:46" pos:end="249:46">n</name><operator pos:start="249:47" pos:end="249:48">--</operator></expr></incr>)</control> <block pos:start="249:51" pos:end="257:13">{<block_content pos:start="251:17" pos:end="255:70">

                <decl_stmt pos:start="251:17" pos:end="251:51"><decl pos:start="251:17" pos:end="251:50"><type pos:start="251:17" pos:end="251:19"><name pos:start="251:17" pos:end="251:19">int</name></type> <name pos:start="251:21" pos:end="251:21">v</name> <init pos:start="251:23" pos:end="251:50">= <expr pos:start="251:25" pos:end="251:50"><call pos:start="251:25" pos:end="251:50"><name pos:start="251:25" pos:end="251:45">bytestream2_get_byteu</name><argument_list pos:start="251:46" pos:end="251:50">(<argument pos:start="251:47" pos:end="251:49"><expr pos:start="251:47" pos:end="251:49"><operator pos:start="251:47" pos:end="251:47">&amp;</operator><name pos:start="251:48" pos:end="251:49">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:70"><expr pos:start="253:17" pos:end="253:69"><operator pos:start="253:17" pos:end="253:17">*</operator><name pos:start="253:18" pos:end="253:24">samples</name><operator pos:start="253:25" pos:end="253:26">++</operator> <operator pos:start="253:28" pos:end="253:28">=</operator> <call pos:start="253:30" pos:end="253:69"><name pos:start="253:30" pos:end="253:52">adpcm_ima_expand_nibble</name><argument_list pos:start="253:53" pos:end="253:69">(<argument pos:start="253:54" pos:end="253:55"><expr pos:start="253:54" pos:end="253:55"><name pos:start="253:54" pos:end="253:55">cs</name></expr></argument>, <argument pos:start="253:58" pos:end="253:65"><expr pos:start="253:58" pos:end="253:65"><name pos:start="253:58" pos:end="253:58">v</name> <operator pos:start="253:60" pos:end="253:60">&amp;</operator> <literal type="number" pos:start="253:62" pos:end="253:65">0x0F</literal></expr></argument>, <argument pos:start="253:68" pos:end="253:68"><expr pos:start="253:68" pos:end="253:68"><literal type="number" pos:start="253:68" pos:end="253:68">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:70"><expr pos:start="255:17" pos:end="255:69"><operator pos:start="255:17" pos:end="255:17">*</operator><name pos:start="255:18" pos:end="255:24">samples</name><operator pos:start="255:25" pos:end="255:26">++</operator> <operator pos:start="255:28" pos:end="255:28">=</operator> <call pos:start="255:30" pos:end="255:69"><name pos:start="255:30" pos:end="255:52">adpcm_ima_expand_nibble</name><argument_list pos:start="255:53" pos:end="255:69">(<argument pos:start="255:54" pos:end="255:55"><expr pos:start="255:54" pos:end="255:55"><name pos:start="255:54" pos:end="255:55">cs</name></expr></argument>, <argument pos:start="255:58" pos:end="255:63"><expr pos:start="255:58" pos:end="255:63"><name pos:start="255:58" pos:end="255:58">v</name> <operator pos:start="255:60" pos:end="255:61">&gt;&gt;</operator> <literal type="number" pos:start="255:63" pos:end="255:63">4</literal></expr></argument>  , <argument pos:start="255:68" pos:end="255:68"><expr pos:start="255:68" pos:end="255:68"><literal type="number" pos:start="255:68" pos:end="255:68">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <break pos:start="261:9" pos:end="261:14">break;</break>

    <case pos:start="263:5" pos:end="263:30">case <expr pos:start="263:10" pos:end="263:29"><name pos:start="263:10" pos:end="263:29">AV_CODEC_ID_ADPCM_MS</name></expr>:</case>

    <block pos:start="265:5" pos:end="347:5">{<block_content pos:start="267:9" pos:end="345:14">

        <decl_stmt pos:start="267:9" pos:end="267:28"><decl pos:start="267:9" pos:end="267:27"><type pos:start="267:9" pos:end="267:11"><name pos:start="267:9" pos:end="267:11">int</name></type> <name pos:start="267:13" pos:end="267:27">block_predictor</name></decl>;</decl_stmt>



        <expr_stmt pos:start="271:9" pos:end="271:53"><expr pos:start="271:9" pos:end="271:52"><name pos:start="271:9" pos:end="271:23">block_predictor</name> <operator pos:start="271:25" pos:end="271:25">=</operator> <call pos:start="271:27" pos:end="271:52"><name pos:start="271:27" pos:end="271:47">bytestream2_get_byteu</name><argument_list pos:start="271:48" pos:end="271:52">(<argument pos:start="271:49" pos:end="271:51"><expr pos:start="271:49" pos:end="271:51"><operator pos:start="271:49" pos:end="271:49">&amp;</operator><name pos:start="271:50" pos:end="271:51">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="273:9" pos:end="281:9"><if pos:start="273:9" pos:end="281:9">if <condition pos:start="273:12" pos:end="273:32">(<expr pos:start="273:13" pos:end="273:31"><name pos:start="273:13" pos:end="273:27">block_predictor</name> <operator pos:start="273:29" pos:end="273:29">&gt;</operator> <literal type="number" pos:start="273:31" pos:end="273:31">6</literal></expr>)</condition> <block pos:start="273:34" pos:end="281:9">{<block_content pos:start="275:13" pos:end="279:39">

            <expr_stmt pos:start="275:13" pos:end="277:36"><expr pos:start="275:13" pos:end="277:35"><call pos:start="275:13" pos:end="277:35"><name pos:start="275:13" pos:end="275:18">av_log</name><argument_list pos:start="275:19" pos:end="277:35">(<argument pos:start="275:20" pos:end="275:24"><expr pos:start="275:20" pos:end="275:24"><name pos:start="275:20" pos:end="275:24">avctx</name></expr></argument>, <argument pos:start="275:27" pos:end="275:38"><expr pos:start="275:27" pos:end="275:38"><name pos:start="275:27" pos:end="275:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="275:41" pos:end="275:74"><expr pos:start="275:41" pos:end="275:74"><literal type="string" pos:start="275:41" pos:end="275:74">"ERROR: block_predictor[0] = %d\n"</literal></expr></argument>,

                   <argument pos:start="277:20" pos:end="277:34"><expr pos:start="277:20" pos:end="277:34"><name pos:start="277:20" pos:end="277:34">block_predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="279:13" pos:end="279:39">return <expr pos:start="279:20" pos:end="279:38"><name pos:start="279:20" pos:end="279:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="283:9" pos:end="283:68"><expr pos:start="283:9" pos:end="283:67"><name pos:start="283:9" pos:end="283:20"><name pos:start="283:9" pos:end="283:9">c</name><operator pos:start="283:10" pos:end="283:11">-&gt;</operator><name pos:start="283:12" pos:end="283:17">status</name><index pos:start="283:18" pos:end="283:20">[<expr pos:start="283:19" pos:end="283:19"><literal type="number" pos:start="283:19" pos:end="283:19">0</literal></expr>]</index></name><operator pos:start="283:21" pos:end="283:21">.</operator><name pos:start="283:22" pos:end="283:27">coeff1</name> <operator pos:start="283:29" pos:end="283:29">=</operator> <name pos:start="283:31" pos:end="283:67"><name pos:start="283:31" pos:end="283:50">ff_adpcm_AdaptCoeff1</name><index pos:start="283:51" pos:end="283:67">[<expr pos:start="283:52" pos:end="283:66"><name pos:start="283:52" pos:end="283:66">block_predictor</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:68"><expr pos:start="285:9" pos:end="285:67"><name pos:start="285:9" pos:end="285:20"><name pos:start="285:9" pos:end="285:9">c</name><operator pos:start="285:10" pos:end="285:11">-&gt;</operator><name pos:start="285:12" pos:end="285:17">status</name><index pos:start="285:18" pos:end="285:20">[<expr pos:start="285:19" pos:end="285:19"><literal type="number" pos:start="285:19" pos:end="285:19">0</literal></expr>]</index></name><operator pos:start="285:21" pos:end="285:21">.</operator><name pos:start="285:22" pos:end="285:27">coeff2</name> <operator pos:start="285:29" pos:end="285:29">=</operator> <name pos:start="285:31" pos:end="285:67"><name pos:start="285:31" pos:end="285:50">ff_adpcm_AdaptCoeff2</name><index pos:start="285:51" pos:end="285:67">[<expr pos:start="285:52" pos:end="285:66"><name pos:start="285:52" pos:end="285:66">block_predictor</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="287:9" pos:end="305:9"><if pos:start="287:9" pos:end="305:9">if <condition pos:start="287:12" pos:end="287:15">(<expr pos:start="287:13" pos:end="287:14"><name pos:start="287:13" pos:end="287:14">st</name></expr>)</condition> <block pos:start="287:17" pos:end="305:9">{<block_content pos:start="289:13" pos:end="303:72">

            <expr_stmt pos:start="289:13" pos:end="289:57"><expr pos:start="289:13" pos:end="289:56"><name pos:start="289:13" pos:end="289:27">block_predictor</name> <operator pos:start="289:29" pos:end="289:29">=</operator> <call pos:start="289:31" pos:end="289:56"><name pos:start="289:31" pos:end="289:51">bytestream2_get_byteu</name><argument_list pos:start="289:52" pos:end="289:56">(<argument pos:start="289:53" pos:end="289:55"><expr pos:start="289:53" pos:end="289:55"><operator pos:start="289:53" pos:end="289:53">&amp;</operator><name pos:start="289:54" pos:end="289:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="291:13" pos:end="299:13"><if pos:start="291:13" pos:end="299:13">if <condition pos:start="291:16" pos:end="291:36">(<expr pos:start="291:17" pos:end="291:35"><name pos:start="291:17" pos:end="291:31">block_predictor</name> <operator pos:start="291:33" pos:end="291:33">&gt;</operator> <literal type="number" pos:start="291:35" pos:end="291:35">6</literal></expr>)</condition> <block pos:start="291:38" pos:end="299:13">{<block_content pos:start="293:17" pos:end="297:43">

                <expr_stmt pos:start="293:17" pos:end="295:40"><expr pos:start="293:17" pos:end="295:39"><call pos:start="293:17" pos:end="295:39"><name pos:start="293:17" pos:end="293:22">av_log</name><argument_list pos:start="293:23" pos:end="295:39">(<argument pos:start="293:24" pos:end="293:28"><expr pos:start="293:24" pos:end="293:28"><name pos:start="293:24" pos:end="293:28">avctx</name></expr></argument>, <argument pos:start="293:31" pos:end="293:42"><expr pos:start="293:31" pos:end="293:42"><name pos:start="293:31" pos:end="293:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="293:45" pos:end="293:78"><expr pos:start="293:45" pos:end="293:78"><literal type="string" pos:start="293:45" pos:end="293:78">"ERROR: block_predictor[1] = %d\n"</literal></expr></argument>,

                       <argument pos:start="295:24" pos:end="295:38"><expr pos:start="295:24" pos:end="295:38"><name pos:start="295:24" pos:end="295:38">block_predictor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="297:17" pos:end="297:43">return <expr pos:start="297:24" pos:end="297:42"><name pos:start="297:24" pos:end="297:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:72"><expr pos:start="301:13" pos:end="301:71"><name pos:start="301:13" pos:end="301:24"><name pos:start="301:13" pos:end="301:13">c</name><operator pos:start="301:14" pos:end="301:15">-&gt;</operator><name pos:start="301:16" pos:end="301:21">status</name><index pos:start="301:22" pos:end="301:24">[<expr pos:start="301:23" pos:end="301:23"><literal type="number" pos:start="301:23" pos:end="301:23">1</literal></expr>]</index></name><operator pos:start="301:25" pos:end="301:25">.</operator><name pos:start="301:26" pos:end="301:31">coeff1</name> <operator pos:start="301:33" pos:end="301:33">=</operator> <name pos:start="301:35" pos:end="301:71"><name pos:start="301:35" pos:end="301:54">ff_adpcm_AdaptCoeff1</name><index pos:start="301:55" pos:end="301:71">[<expr pos:start="301:56" pos:end="301:70"><name pos:start="301:56" pos:end="301:70">block_predictor</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:72"><expr pos:start="303:13" pos:end="303:71"><name pos:start="303:13" pos:end="303:24"><name pos:start="303:13" pos:end="303:13">c</name><operator pos:start="303:14" pos:end="303:15">-&gt;</operator><name pos:start="303:16" pos:end="303:21">status</name><index pos:start="303:22" pos:end="303:24">[<expr pos:start="303:23" pos:end="303:23"><literal type="number" pos:start="303:23" pos:end="303:23">1</literal></expr>]</index></name><operator pos:start="303:25" pos:end="303:25">.</operator><name pos:start="303:26" pos:end="303:31">coeff2</name> <operator pos:start="303:33" pos:end="303:33">=</operator> <name pos:start="303:35" pos:end="303:71"><name pos:start="303:35" pos:end="303:54">ff_adpcm_AdaptCoeff2</name><index pos:start="303:55" pos:end="303:71">[<expr pos:start="303:56" pos:end="303:70"><name pos:start="303:56" pos:end="303:70">block_predictor</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="307:9" pos:end="307:74"><expr pos:start="307:9" pos:end="307:73"><name pos:start="307:9" pos:end="307:20"><name pos:start="307:9" pos:end="307:9">c</name><operator pos:start="307:10" pos:end="307:11">-&gt;</operator><name pos:start="307:12" pos:end="307:17">status</name><index pos:start="307:18" pos:end="307:20">[<expr pos:start="307:19" pos:end="307:19"><literal type="number" pos:start="307:19" pos:end="307:19">0</literal></expr>]</index></name><operator pos:start="307:21" pos:end="307:21">.</operator><name pos:start="307:22" pos:end="307:27">idelta</name> <operator pos:start="307:29" pos:end="307:29">=</operator> <call pos:start="307:31" pos:end="307:73"><name pos:start="307:31" pos:end="307:41">sign_extend</name><argument_list pos:start="307:42" pos:end="307:73">(<argument pos:start="307:43" pos:end="307:68"><expr pos:start="307:43" pos:end="307:68"><call pos:start="307:43" pos:end="307:68"><name pos:start="307:43" pos:end="307:63">bytestream2_get_le16u</name><argument_list pos:start="307:64" pos:end="307:68">(<argument pos:start="307:65" pos:end="307:67"><expr pos:start="307:65" pos:end="307:67"><operator pos:start="307:65" pos:end="307:65">&amp;</operator><name pos:start="307:66" pos:end="307:67">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="307:71" pos:end="307:72"><expr pos:start="307:71" pos:end="307:72"><literal type="number" pos:start="307:71" pos:end="307:72">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="309:9" pos:end="313:9"><if pos:start="309:9" pos:end="313:9">if <condition pos:start="309:12" pos:end="309:15">(<expr pos:start="309:13" pos:end="309:14"><name pos:start="309:13" pos:end="309:14">st</name></expr>)</condition><block pos:start="309:16" pos:end="313:9">{<block_content pos:start="311:13" pos:end="311:78">

            <expr_stmt pos:start="311:13" pos:end="311:78"><expr pos:start="311:13" pos:end="311:77"><name pos:start="311:13" pos:end="311:24"><name pos:start="311:13" pos:end="311:13">c</name><operator pos:start="311:14" pos:end="311:15">-&gt;</operator><name pos:start="311:16" pos:end="311:21">status</name><index pos:start="311:22" pos:end="311:24">[<expr pos:start="311:23" pos:end="311:23"><literal type="number" pos:start="311:23" pos:end="311:23">1</literal></expr>]</index></name><operator pos:start="311:25" pos:end="311:25">.</operator><name pos:start="311:26" pos:end="311:31">idelta</name> <operator pos:start="311:33" pos:end="311:33">=</operator> <call pos:start="311:35" pos:end="311:77"><name pos:start="311:35" pos:end="311:45">sign_extend</name><argument_list pos:start="311:46" pos:end="311:77">(<argument pos:start="311:47" pos:end="311:72"><expr pos:start="311:47" pos:end="311:72"><call pos:start="311:47" pos:end="311:72"><name pos:start="311:47" pos:end="311:67">bytestream2_get_le16u</name><argument_list pos:start="311:68" pos:end="311:72">(<argument pos:start="311:69" pos:end="311:71"><expr pos:start="311:69" pos:end="311:71"><operator pos:start="311:69" pos:end="311:69">&amp;</operator><name pos:start="311:70" pos:end="311:71">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="311:75" pos:end="311:76"><expr pos:start="311:75" pos:end="311:76"><literal type="number" pos:start="311:75" pos:end="311:76">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="317:9" pos:end="317:75"><expr pos:start="317:9" pos:end="317:74"><name pos:start="317:9" pos:end="317:20"><name pos:start="317:9" pos:end="317:9">c</name><operator pos:start="317:10" pos:end="317:11">-&gt;</operator><name pos:start="317:12" pos:end="317:17">status</name><index pos:start="317:18" pos:end="317:20">[<expr pos:start="317:19" pos:end="317:19"><literal type="number" pos:start="317:19" pos:end="317:19">0</literal></expr>]</index></name><operator pos:start="317:21" pos:end="317:21">.</operator><name pos:start="317:22" pos:end="317:28">sample1</name> <operator pos:start="317:30" pos:end="317:30">=</operator> <call pos:start="317:32" pos:end="317:74"><name pos:start="317:32" pos:end="317:42">sign_extend</name><argument_list pos:start="317:43" pos:end="317:74">(<argument pos:start="317:44" pos:end="317:69"><expr pos:start="317:44" pos:end="317:69"><call pos:start="317:44" pos:end="317:69"><name pos:start="317:44" pos:end="317:64">bytestream2_get_le16u</name><argument_list pos:start="317:65" pos:end="317:69">(<argument pos:start="317:66" pos:end="317:68"><expr pos:start="317:66" pos:end="317:68"><operator pos:start="317:66" pos:end="317:66">&amp;</operator><name pos:start="317:67" pos:end="317:68">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="317:72" pos:end="317:73"><expr pos:start="317:72" pos:end="317:73"><literal type="number" pos:start="317:72" pos:end="317:73">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="319:9" pos:end="319:83"><if pos:start="319:9" pos:end="319:83">if <condition pos:start="319:12" pos:end="319:15">(<expr pos:start="319:13" pos:end="319:14"><name pos:start="319:13" pos:end="319:14">st</name></expr>)</condition><block type="pseudo" pos:start="319:17" pos:end="319:83"><block_content pos:start="319:17" pos:end="319:83"> <expr_stmt pos:start="319:17" pos:end="319:83"><expr pos:start="319:17" pos:end="319:82"><name pos:start="319:17" pos:end="319:28"><name pos:start="319:17" pos:end="319:17">c</name><operator pos:start="319:18" pos:end="319:19">-&gt;</operator><name pos:start="319:20" pos:end="319:25">status</name><index pos:start="319:26" pos:end="319:28">[<expr pos:start="319:27" pos:end="319:27"><literal type="number" pos:start="319:27" pos:end="319:27">1</literal></expr>]</index></name><operator pos:start="319:29" pos:end="319:29">.</operator><name pos:start="319:30" pos:end="319:36">sample1</name> <operator pos:start="319:38" pos:end="319:38">=</operator> <call pos:start="319:40" pos:end="319:82"><name pos:start="319:40" pos:end="319:50">sign_extend</name><argument_list pos:start="319:51" pos:end="319:82">(<argument pos:start="319:52" pos:end="319:77"><expr pos:start="319:52" pos:end="319:77"><call pos:start="319:52" pos:end="319:77"><name pos:start="319:52" pos:end="319:72">bytestream2_get_le16u</name><argument_list pos:start="319:73" pos:end="319:77">(<argument pos:start="319:74" pos:end="319:76"><expr pos:start="319:74" pos:end="319:76"><operator pos:start="319:74" pos:end="319:74">&amp;</operator><name pos:start="319:75" pos:end="319:76">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="319:80" pos:end="319:81"><expr pos:start="319:80" pos:end="319:81"><literal type="number" pos:start="319:80" pos:end="319:81">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="321:9" pos:end="321:75"><expr pos:start="321:9" pos:end="321:74"><name pos:start="321:9" pos:end="321:20"><name pos:start="321:9" pos:end="321:9">c</name><operator pos:start="321:10" pos:end="321:11">-&gt;</operator><name pos:start="321:12" pos:end="321:17">status</name><index pos:start="321:18" pos:end="321:20">[<expr pos:start="321:19" pos:end="321:19"><literal type="number" pos:start="321:19" pos:end="321:19">0</literal></expr>]</index></name><operator pos:start="321:21" pos:end="321:21">.</operator><name pos:start="321:22" pos:end="321:28">sample2</name> <operator pos:start="321:30" pos:end="321:30">=</operator> <call pos:start="321:32" pos:end="321:74"><name pos:start="321:32" pos:end="321:42">sign_extend</name><argument_list pos:start="321:43" pos:end="321:74">(<argument pos:start="321:44" pos:end="321:69"><expr pos:start="321:44" pos:end="321:69"><call pos:start="321:44" pos:end="321:69"><name pos:start="321:44" pos:end="321:64">bytestream2_get_le16u</name><argument_list pos:start="321:65" pos:end="321:69">(<argument pos:start="321:66" pos:end="321:68"><expr pos:start="321:66" pos:end="321:68"><operator pos:start="321:66" pos:end="321:66">&amp;</operator><name pos:start="321:67" pos:end="321:68">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="321:72" pos:end="321:73"><expr pos:start="321:72" pos:end="321:73"><literal type="number" pos:start="321:72" pos:end="321:73">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="323:9" pos:end="323:83"><if pos:start="323:9" pos:end="323:83">if <condition pos:start="323:12" pos:end="323:15">(<expr pos:start="323:13" pos:end="323:14"><name pos:start="323:13" pos:end="323:14">st</name></expr>)</condition><block type="pseudo" pos:start="323:17" pos:end="323:83"><block_content pos:start="323:17" pos:end="323:83"> <expr_stmt pos:start="323:17" pos:end="323:83"><expr pos:start="323:17" pos:end="323:82"><name pos:start="323:17" pos:end="323:28"><name pos:start="323:17" pos:end="323:17">c</name><operator pos:start="323:18" pos:end="323:19">-&gt;</operator><name pos:start="323:20" pos:end="323:25">status</name><index pos:start="323:26" pos:end="323:28">[<expr pos:start="323:27" pos:end="323:27"><literal type="number" pos:start="323:27" pos:end="323:27">1</literal></expr>]</index></name><operator pos:start="323:29" pos:end="323:29">.</operator><name pos:start="323:30" pos:end="323:36">sample2</name> <operator pos:start="323:38" pos:end="323:38">=</operator> <call pos:start="323:40" pos:end="323:82"><name pos:start="323:40" pos:end="323:50">sign_extend</name><argument_list pos:start="323:51" pos:end="323:82">(<argument pos:start="323:52" pos:end="323:77"><expr pos:start="323:52" pos:end="323:77"><call pos:start="323:52" pos:end="323:77"><name pos:start="323:52" pos:end="323:72">bytestream2_get_le16u</name><argument_list pos:start="323:73" pos:end="323:77">(<argument pos:start="323:74" pos:end="323:76"><expr pos:start="323:74" pos:end="323:76"><operator pos:start="323:74" pos:end="323:74">&amp;</operator><name pos:start="323:75" pos:end="323:76">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="323:80" pos:end="323:81"><expr pos:start="323:80" pos:end="323:81"><literal type="number" pos:start="323:80" pos:end="323:81">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="327:9" pos:end="327:42"><expr pos:start="327:9" pos:end="327:41"><operator pos:start="327:9" pos:end="327:9">*</operator><name pos:start="327:10" pos:end="327:16">samples</name><operator pos:start="327:17" pos:end="327:18">++</operator> <operator pos:start="327:20" pos:end="327:20">=</operator> <name pos:start="327:22" pos:end="327:33"><name pos:start="327:22" pos:end="327:22">c</name><operator pos:start="327:23" pos:end="327:24">-&gt;</operator><name pos:start="327:25" pos:end="327:30">status</name><index pos:start="327:31" pos:end="327:33">[<expr pos:start="327:32" pos:end="327:32"><literal type="number" pos:start="327:32" pos:end="327:32">0</literal></expr>]</index></name><operator pos:start="327:34" pos:end="327:34">.</operator><name pos:start="327:35" pos:end="327:41">sample2</name></expr>;</expr_stmt>

        <if_stmt pos:start="329:9" pos:end="329:50"><if pos:start="329:9" pos:end="329:50">if <condition pos:start="329:12" pos:end="329:15">(<expr pos:start="329:13" pos:end="329:14"><name pos:start="329:13" pos:end="329:14">st</name></expr>)</condition><block type="pseudo" pos:start="329:17" pos:end="329:50"><block_content pos:start="329:17" pos:end="329:50"> <expr_stmt pos:start="329:17" pos:end="329:50"><expr pos:start="329:17" pos:end="329:49"><operator pos:start="329:17" pos:end="329:17">*</operator><name pos:start="329:18" pos:end="329:24">samples</name><operator pos:start="329:25" pos:end="329:26">++</operator> <operator pos:start="329:28" pos:end="329:28">=</operator> <name pos:start="329:30" pos:end="329:41"><name pos:start="329:30" pos:end="329:30">c</name><operator pos:start="329:31" pos:end="329:32">-&gt;</operator><name pos:start="329:33" pos:end="329:38">status</name><index pos:start="329:39" pos:end="329:41">[<expr pos:start="329:40" pos:end="329:40"><literal type="number" pos:start="329:40" pos:end="329:40">1</literal></expr>]</index></name><operator pos:start="329:42" pos:end="329:42">.</operator><name pos:start="329:43" pos:end="329:49">sample2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:42"><expr pos:start="331:9" pos:end="331:41"><operator pos:start="331:9" pos:end="331:9">*</operator><name pos:start="331:10" pos:end="331:16">samples</name><operator pos:start="331:17" pos:end="331:18">++</operator> <operator pos:start="331:20" pos:end="331:20">=</operator> <name pos:start="331:22" pos:end="331:33"><name pos:start="331:22" pos:end="331:22">c</name><operator pos:start="331:23" pos:end="331:24">-&gt;</operator><name pos:start="331:25" pos:end="331:30">status</name><index pos:start="331:31" pos:end="331:33">[<expr pos:start="331:32" pos:end="331:32"><literal type="number" pos:start="331:32" pos:end="331:32">0</literal></expr>]</index></name><operator pos:start="331:34" pos:end="331:34">.</operator><name pos:start="331:35" pos:end="331:41">sample1</name></expr>;</expr_stmt>

        <if_stmt pos:start="333:9" pos:end="333:50"><if pos:start="333:9" pos:end="333:50">if <condition pos:start="333:12" pos:end="333:15">(<expr pos:start="333:13" pos:end="333:14"><name pos:start="333:13" pos:end="333:14">st</name></expr>)</condition><block type="pseudo" pos:start="333:17" pos:end="333:50"><block_content pos:start="333:17" pos:end="333:50"> <expr_stmt pos:start="333:17" pos:end="333:50"><expr pos:start="333:17" pos:end="333:49"><operator pos:start="333:17" pos:end="333:17">*</operator><name pos:start="333:18" pos:end="333:24">samples</name><operator pos:start="333:25" pos:end="333:26">++</operator> <operator pos:start="333:28" pos:end="333:28">=</operator> <name pos:start="333:30" pos:end="333:41"><name pos:start="333:30" pos:end="333:30">c</name><operator pos:start="333:31" pos:end="333:32">-&gt;</operator><name pos:start="333:33" pos:end="333:38">status</name><index pos:start="333:39" pos:end="333:41">[<expr pos:start="333:40" pos:end="333:40"><literal type="number" pos:start="333:40" pos:end="333:40">1</literal></expr>]</index></name><operator pos:start="333:42" pos:end="333:42">.</operator><name pos:start="333:43" pos:end="333:49">sample1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <for pos:start="335:9" pos:end="343:9">for<control pos:start="335:12" pos:end="335:57">(<init pos:start="335:13" pos:end="335:45"><expr pos:start="335:13" pos:end="335:44"><name pos:start="335:13" pos:end="335:13">n</name> <operator pos:start="335:15" pos:end="335:15">=</operator> <operator pos:start="335:17" pos:end="335:17">(</operator><name pos:start="335:18" pos:end="335:27">nb_samples</name> <operator pos:start="335:29" pos:end="335:29">-</operator> <literal type="number" pos:start="335:31" pos:end="335:31">2</literal><operator pos:start="335:32" pos:end="335:32">)</operator> <operator pos:start="335:34" pos:end="335:35">&gt;&gt;</operator> <operator pos:start="335:37" pos:end="335:37">(</operator><literal type="number" pos:start="335:38" pos:end="335:40">1</literal> <operator pos:start="335:40" pos:end="335:40">-</operator> <name pos:start="335:42" pos:end="335:43">st</name><operator pos:start="335:44" pos:end="335:44">)</operator></expr>;</init> <condition pos:start="335:47" pos:end="335:52"><expr pos:start="335:47" pos:end="335:51"><name pos:start="335:47" pos:end="335:47">n</name> <operator pos:start="335:49" pos:end="335:49">&gt;</operator> <literal type="number" pos:start="335:51" pos:end="335:51">0</literal></expr>;</condition> <incr pos:start="335:54" pos:end="335:56"><expr pos:start="335:54" pos:end="335:56"><name pos:start="335:54" pos:end="335:54">n</name><operator pos:start="335:55" pos:end="335:56">--</operator></expr></incr>)</control> <block pos:start="335:59" pos:end="343:9">{<block_content pos:start="337:13" pos:end="341:77">

            <decl_stmt pos:start="337:13" pos:end="337:50"><decl pos:start="337:13" pos:end="337:49"><type pos:start="337:13" pos:end="337:15"><name pos:start="337:13" pos:end="337:15">int</name></type> <name pos:start="337:17" pos:end="337:20">byte</name> <init pos:start="337:22" pos:end="337:49">= <expr pos:start="337:24" pos:end="337:49"><call pos:start="337:24" pos:end="337:49"><name pos:start="337:24" pos:end="337:44">bytestream2_get_byteu</name><argument_list pos:start="337:45" pos:end="337:49">(<argument pos:start="337:46" pos:end="337:48"><expr pos:start="337:46" pos:end="337:48"><operator pos:start="337:46" pos:end="337:46">&amp;</operator><name pos:start="337:47" pos:end="337:48">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:77"><expr pos:start="339:13" pos:end="339:76"><operator pos:start="339:13" pos:end="339:13">*</operator><name pos:start="339:14" pos:end="339:20">samples</name><operator pos:start="339:21" pos:end="339:22">++</operator> <operator pos:start="339:24" pos:end="339:24">=</operator> <call pos:start="339:26" pos:end="339:76"><name pos:start="339:26" pos:end="339:47">adpcm_ms_expand_nibble</name><argument_list pos:start="339:48" pos:end="339:76">(<argument pos:start="339:49" pos:end="339:62"><expr pos:start="339:49" pos:end="339:62"><operator pos:start="339:49" pos:end="339:49">&amp;</operator><name pos:start="339:50" pos:end="339:62"><name pos:start="339:50" pos:end="339:50">c</name><operator pos:start="339:51" pos:end="339:52">-&gt;</operator><name pos:start="339:53" pos:end="339:58">status</name><index pos:start="339:59" pos:end="339:62">[<expr pos:start="339:60" pos:end="339:60"><literal type="number" pos:start="339:60" pos:end="339:60">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="339:65" pos:end="339:73"><expr pos:start="339:65" pos:end="339:73"><name pos:start="339:65" pos:end="339:68">byte</name> <operator pos:start="339:70" pos:end="339:71">&gt;&gt;</operator> <literal type="number" pos:start="339:73" pos:end="339:73">4</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="341:13" pos:end="341:77"><expr pos:start="341:13" pos:end="341:76"><operator pos:start="341:13" pos:end="341:13">*</operator><name pos:start="341:14" pos:end="341:20">samples</name><operator pos:start="341:21" pos:end="341:22">++</operator> <operator pos:start="341:24" pos:end="341:24">=</operator> <call pos:start="341:26" pos:end="341:76"><name pos:start="341:26" pos:end="341:47">adpcm_ms_expand_nibble</name><argument_list pos:start="341:48" pos:end="341:76">(<argument pos:start="341:49" pos:end="341:62"><expr pos:start="341:49" pos:end="341:62"><operator pos:start="341:49" pos:end="341:49">&amp;</operator><name pos:start="341:50" pos:end="341:62"><name pos:start="341:50" pos:end="341:50">c</name><operator pos:start="341:51" pos:end="341:52">-&gt;</operator><name pos:start="341:53" pos:end="341:58">status</name><index pos:start="341:59" pos:end="341:62">[<expr pos:start="341:60" pos:end="341:61"><name pos:start="341:60" pos:end="341:61">st</name></expr>]</index></name></expr></argument>, <argument pos:start="341:65" pos:end="341:75"><expr pos:start="341:65" pos:end="341:75"><name pos:start="341:65" pos:end="341:68">byte</name> <operator pos:start="341:70" pos:end="341:70">&amp;</operator> <literal type="number" pos:start="341:72" pos:end="341:75">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="345:9" pos:end="345:14">break;</break>

    </block_content>}</block>

    <case pos:start="349:5" pos:end="349:35">case <expr pos:start="349:10" pos:end="349:34"><name pos:start="349:10" pos:end="349:34">AV_CODEC_ID_ADPCM_IMA_DK4</name></expr>:</case>

        <for pos:start="351:9" pos:end="369:9">for <control pos:start="351:13" pos:end="351:63">(<init pos:start="351:14" pos:end="351:25"><expr pos:start="351:14" pos:end="351:24"><name pos:start="351:14" pos:end="351:20">channel</name> <operator pos:start="351:22" pos:end="351:22">=</operator> <literal type="number" pos:start="351:24" pos:end="351:24">0</literal></expr>;</init> <condition pos:start="351:27" pos:end="351:52"><expr pos:start="351:27" pos:end="351:51"><name pos:start="351:27" pos:end="351:33">channel</name> <operator pos:start="351:35" pos:end="351:35">&lt;</operator> <name pos:start="351:37" pos:end="351:51"><name pos:start="351:37" pos:end="351:41">avctx</name><operator pos:start="351:42" pos:end="351:43">-&gt;</operator><name pos:start="351:44" pos:end="351:51">channels</name></name></expr>;</condition> <incr pos:start="351:54" pos:end="351:62"><expr pos:start="351:54" pos:end="351:62"><name pos:start="351:54" pos:end="351:60">channel</name><operator pos:start="351:61" pos:end="351:62">++</operator></expr></incr>)</control> <block pos:start="351:65" pos:end="369:9">{<block_content pos:start="353:13" pos:end="367:13">

            <expr_stmt pos:start="353:13" pos:end="353:37"><expr pos:start="353:13" pos:end="353:36"><name pos:start="353:13" pos:end="353:14">cs</name> <operator pos:start="353:16" pos:end="353:16">=</operator> <operator pos:start="353:18" pos:end="353:18">&amp;</operator><name pos:start="353:19" pos:end="353:36"><name pos:start="353:19" pos:end="353:19">c</name><operator pos:start="353:20" pos:end="353:21">-&gt;</operator><name pos:start="353:22" pos:end="353:27">status</name><index pos:start="353:28" pos:end="353:36">[<expr pos:start="353:29" pos:end="353:35"><name pos:start="353:29" pos:end="353:35">channel</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:86"><expr pos:start="355:13" pos:end="355:85"><name pos:start="355:13" pos:end="355:25"><name pos:start="355:13" pos:end="355:14">cs</name><operator pos:start="355:15" pos:end="355:16">-&gt;</operator><name pos:start="355:17" pos:end="355:25">predictor</name></name>  <operator pos:start="355:28" pos:end="355:28">=</operator> <operator pos:start="355:30" pos:end="355:30">*</operator><name pos:start="355:31" pos:end="355:37">samples</name><operator pos:start="355:38" pos:end="355:39">++</operator> <operator pos:start="355:41" pos:end="355:41">=</operator> <call pos:start="355:43" pos:end="355:85"><name pos:start="355:43" pos:end="355:53">sign_extend</name><argument_list pos:start="355:54" pos:end="355:85">(<argument pos:start="355:55" pos:end="355:80"><expr pos:start="355:55" pos:end="355:80"><call pos:start="355:55" pos:end="355:80"><name pos:start="355:55" pos:end="355:75">bytestream2_get_le16u</name><argument_list pos:start="355:76" pos:end="355:80">(<argument pos:start="355:77" pos:end="355:79"><expr pos:start="355:77" pos:end="355:79"><operator pos:start="355:77" pos:end="355:77">&amp;</operator><name pos:start="355:78" pos:end="355:79">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="355:83" pos:end="355:84"><expr pos:start="355:83" pos:end="355:84"><literal type="number" pos:start="355:83" pos:end="355:84">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="357:13" pos:end="357:73"><expr pos:start="357:13" pos:end="357:72"><name pos:start="357:13" pos:end="357:26"><name pos:start="357:13" pos:end="357:14">cs</name><operator pos:start="357:15" pos:end="357:16">-&gt;</operator><name pos:start="357:17" pos:end="357:26">step_index</name></name> <operator pos:start="357:28" pos:end="357:28">=</operator> <call pos:start="357:30" pos:end="357:72"><name pos:start="357:30" pos:end="357:40">sign_extend</name><argument_list pos:start="357:41" pos:end="357:72">(<argument pos:start="357:42" pos:end="357:67"><expr pos:start="357:42" pos:end="357:67"><call pos:start="357:42" pos:end="357:67"><name pos:start="357:42" pos:end="357:62">bytestream2_get_le16u</name><argument_list pos:start="357:63" pos:end="357:67">(<argument pos:start="357:64" pos:end="357:66"><expr pos:start="357:64" pos:end="357:66"><operator pos:start="357:64" pos:end="357:64">&amp;</operator><name pos:start="357:65" pos:end="357:66">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="357:70" pos:end="357:71"><expr pos:start="357:70" pos:end="357:71"><literal type="number" pos:start="357:70" pos:end="357:71">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="359:13" pos:end="367:13"><if pos:start="359:13" pos:end="367:13">if <condition pos:start="359:16" pos:end="359:37">(<expr pos:start="359:17" pos:end="359:36"><name pos:start="359:17" pos:end="359:30"><name pos:start="359:17" pos:end="359:18">cs</name><operator pos:start="359:19" pos:end="359:20">-&gt;</operator><name pos:start="359:21" pos:end="359:30">step_index</name></name> <operator pos:start="359:32" pos:end="359:32">&gt;</operator> <literal type="number" pos:start="359:34" pos:end="359:36">88u</literal></expr>)</condition><block pos:start="359:38" pos:end="367:13">{<block_content pos:start="361:17" pos:end="365:43">

                <expr_stmt pos:start="361:17" pos:end="363:48"><expr pos:start="361:17" pos:end="363:47"><call pos:start="361:17" pos:end="363:47"><name pos:start="361:17" pos:end="361:22">av_log</name><argument_list pos:start="361:23" pos:end="363:47">(<argument pos:start="361:24" pos:end="361:28"><expr pos:start="361:24" pos:end="361:28"><name pos:start="361:24" pos:end="361:28">avctx</name></expr></argument>, <argument pos:start="361:31" pos:end="361:42"><expr pos:start="361:31" pos:end="361:42"><name pos:start="361:31" pos:end="361:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="361:45" pos:end="361:74"><expr pos:start="361:45" pos:end="361:74"><literal type="string" pos:start="361:45" pos:end="361:74">"ERROR: step_index[%d] = %i\n"</literal></expr></argument>,

                       <argument pos:start="363:24" pos:end="363:30"><expr pos:start="363:24" pos:end="363:30"><name pos:start="363:24" pos:end="363:30">channel</name></expr></argument>, <argument pos:start="363:33" pos:end="363:46"><expr pos:start="363:33" pos:end="363:46"><name pos:start="363:33" pos:end="363:46"><name pos:start="363:33" pos:end="363:34">cs</name><operator pos:start="363:35" pos:end="363:36">-&gt;</operator><name pos:start="363:37" pos:end="363:46">step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="365:17" pos:end="365:43">return <expr pos:start="365:24" pos:end="365:42"><name pos:start="365:24" pos:end="365:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <for pos:start="371:9" pos:end="379:9">for <control pos:start="371:13" pos:end="371:52">(<init pos:start="371:14" pos:end="371:40"><expr pos:start="371:14" pos:end="371:39"><name pos:start="371:14" pos:end="371:14">n</name> <operator pos:start="371:16" pos:end="371:16">=</operator> <name pos:start="371:18" pos:end="371:27">nb_samples</name> <operator pos:start="371:29" pos:end="371:30">&gt;&gt;</operator> <operator pos:start="371:32" pos:end="371:32">(</operator><literal type="number" pos:start="371:33" pos:end="371:35">1</literal> <operator pos:start="371:35" pos:end="371:35">-</operator> <name pos:start="371:37" pos:end="371:38">st</name><operator pos:start="371:39" pos:end="371:39">)</operator></expr>;</init> <condition pos:start="371:42" pos:end="371:47"><expr pos:start="371:42" pos:end="371:46"><name pos:start="371:42" pos:end="371:42">n</name> <operator pos:start="371:44" pos:end="371:44">&gt;</operator> <literal type="number" pos:start="371:46" pos:end="371:46">0</literal></expr>;</condition> <incr pos:start="371:49" pos:end="371:51"><expr pos:start="371:49" pos:end="371:51"><name pos:start="371:49" pos:end="371:49">n</name><operator pos:start="371:50" pos:end="371:51">--</operator></expr></incr>)</control> <block pos:start="371:54" pos:end="379:9">{<block_content pos:start="373:13" pos:end="377:78">

            <decl_stmt pos:start="373:13" pos:end="373:47"><decl pos:start="373:13" pos:end="373:46"><type pos:start="373:13" pos:end="373:15"><name pos:start="373:13" pos:end="373:15">int</name></type> <name pos:start="373:17" pos:end="373:17">v</name> <init pos:start="373:19" pos:end="373:46">= <expr pos:start="373:21" pos:end="373:46"><call pos:start="373:21" pos:end="373:46"><name pos:start="373:21" pos:end="373:41">bytestream2_get_byteu</name><argument_list pos:start="373:42" pos:end="373:46">(<argument pos:start="373:43" pos:end="373:45"><expr pos:start="373:43" pos:end="373:45"><operator pos:start="373:43" pos:end="373:43">&amp;</operator><name pos:start="373:44" pos:end="373:45">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="375:13" pos:end="375:78"><expr pos:start="375:13" pos:end="375:77"><operator pos:start="375:13" pos:end="375:13">*</operator><name pos:start="375:14" pos:end="375:20">samples</name><operator pos:start="375:21" pos:end="375:22">++</operator> <operator pos:start="375:24" pos:end="375:24">=</operator> <call pos:start="375:26" pos:end="375:77"><name pos:start="375:26" pos:end="375:48">adpcm_ima_expand_nibble</name><argument_list pos:start="375:49" pos:end="375:77">(<argument pos:start="375:50" pos:end="375:63"><expr pos:start="375:50" pos:end="375:63"><operator pos:start="375:50" pos:end="375:50">&amp;</operator><name pos:start="375:51" pos:end="375:63"><name pos:start="375:51" pos:end="375:51">c</name><operator pos:start="375:52" pos:end="375:53">-&gt;</operator><name pos:start="375:54" pos:end="375:59">status</name><index pos:start="375:60" pos:end="375:63">[<expr pos:start="375:61" pos:end="375:61"><literal type="number" pos:start="375:61" pos:end="375:61">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="375:66" pos:end="375:71"><expr pos:start="375:66" pos:end="375:71"><name pos:start="375:66" pos:end="375:66">v</name> <operator pos:start="375:68" pos:end="375:69">&gt;&gt;</operator> <literal type="number" pos:start="375:71" pos:end="375:71">4</literal></expr></argument>  , <argument pos:start="375:76" pos:end="375:76"><expr pos:start="375:76" pos:end="375:76"><literal type="number" pos:start="375:76" pos:end="375:76">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="377:13" pos:end="377:78"><expr pos:start="377:13" pos:end="377:77"><operator pos:start="377:13" pos:end="377:13">*</operator><name pos:start="377:14" pos:end="377:20">samples</name><operator pos:start="377:21" pos:end="377:22">++</operator> <operator pos:start="377:24" pos:end="377:24">=</operator> <call pos:start="377:26" pos:end="377:77"><name pos:start="377:26" pos:end="377:48">adpcm_ima_expand_nibble</name><argument_list pos:start="377:49" pos:end="377:77">(<argument pos:start="377:50" pos:end="377:63"><expr pos:start="377:50" pos:end="377:63"><operator pos:start="377:50" pos:end="377:50">&amp;</operator><name pos:start="377:51" pos:end="377:63"><name pos:start="377:51" pos:end="377:51">c</name><operator pos:start="377:52" pos:end="377:53">-&gt;</operator><name pos:start="377:54" pos:end="377:59">status</name><index pos:start="377:60" pos:end="377:63">[<expr pos:start="377:61" pos:end="377:62"><name pos:start="377:61" pos:end="377:62">st</name></expr>]</index></name></expr></argument>, <argument pos:start="377:66" pos:end="377:73"><expr pos:start="377:66" pos:end="377:73"><name pos:start="377:66" pos:end="377:66">v</name> <operator pos:start="377:68" pos:end="377:68">&amp;</operator> <literal type="number" pos:start="377:70" pos:end="377:73">0x0F</literal></expr></argument>, <argument pos:start="377:76" pos:end="377:76"><expr pos:start="377:76" pos:end="377:76"><literal type="number" pos:start="377:76" pos:end="377:76">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="381:9" pos:end="381:14">break;</break>

    <case pos:start="383:5" pos:end="383:35">case <expr pos:start="383:10" pos:end="383:34"><name pos:start="383:10" pos:end="383:34">AV_CODEC_ID_ADPCM_IMA_DK3</name></expr>:</case>

    <block pos:start="385:5" pos:end="503:5">{<block_content pos:start="387:9" pos:end="501:14">

        <decl_stmt pos:start="387:9" pos:end="387:26"><decl pos:start="387:9" pos:end="387:25"><type pos:start="387:9" pos:end="387:11"><name pos:start="387:9" pos:end="387:11">int</name></type> <name pos:start="387:13" pos:end="387:21">last_byte</name> <init pos:start="387:23" pos:end="387:25">= <expr pos:start="387:25" pos:end="387:25"><literal type="number" pos:start="387:25" pos:end="387:25">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="389:9" pos:end="389:19"><decl pos:start="389:9" pos:end="389:18"><type pos:start="389:9" pos:end="389:11"><name pos:start="389:9" pos:end="389:11">int</name></type> <name pos:start="389:13" pos:end="389:18">nibble</name></decl>;</decl_stmt>

        <decl_stmt pos:start="391:9" pos:end="391:39"><decl pos:start="391:9" pos:end="391:38"><type pos:start="391:9" pos:end="391:11"><name pos:start="391:9" pos:end="391:11">int</name></type> <name pos:start="391:13" pos:end="391:34">decode_top_nibble_next</name> <init pos:start="391:36" pos:end="391:38">= <expr pos:start="391:38" pos:end="391:38"><literal type="number" pos:start="391:38" pos:end="391:38">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="393:9" pos:end="393:25"><decl pos:start="393:9" pos:end="393:24"><type pos:start="393:9" pos:end="393:11"><name pos:start="393:9" pos:end="393:11">int</name></type> <name pos:start="393:13" pos:end="393:24">diff_channel</name></decl>;</decl_stmt>

        <decl_stmt pos:start="395:9" pos:end="395:76"><decl pos:start="395:9" pos:end="395:75"><type pos:start="395:9" pos:end="395:23"><specifier pos:start="395:9" pos:end="395:13">const</specifier> <name pos:start="395:15" pos:end="395:21">int16_t</name> <modifier pos:start="395:23" pos:end="395:23">*</modifier></type><name pos:start="395:24" pos:end="395:34">samples_end</name> <init pos:start="395:36" pos:end="395:75">= <expr pos:start="395:38" pos:end="395:75"><name pos:start="395:38" pos:end="395:44">samples</name> <operator pos:start="395:46" pos:end="395:46">+</operator> <name pos:start="395:48" pos:end="395:62"><name pos:start="395:48" pos:end="395:52">avctx</name><operator pos:start="395:53" pos:end="395:54">-&gt;</operator><name pos:start="395:55" pos:end="395:62">channels</name></name> <operator pos:start="395:64" pos:end="395:64">*</operator> <name pos:start="395:66" pos:end="395:75">nb_samples</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="399:9" pos:end="399:35"><expr pos:start="399:9" pos:end="399:34"><call pos:start="399:9" pos:end="399:34"><name pos:start="399:9" pos:end="399:25">bytestream2_skipu</name><argument_list pos:start="399:26" pos:end="399:34">(<argument pos:start="399:27" pos:end="399:29"><expr pos:start="399:27" pos:end="399:29"><operator pos:start="399:27" pos:end="399:27">&amp;</operator><name pos:start="399:28" pos:end="399:29">gb</name></expr></argument>, <argument pos:start="399:32" pos:end="399:33"><expr pos:start="399:32" pos:end="399:33"><literal type="number" pos:start="399:32" pos:end="399:33">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:78"><expr pos:start="401:9" pos:end="401:77"><name pos:start="401:9" pos:end="401:20"><name pos:start="401:9" pos:end="401:9">c</name><operator pos:start="401:10" pos:end="401:11">-&gt;</operator><name pos:start="401:12" pos:end="401:17">status</name><index pos:start="401:18" pos:end="401:20">[<expr pos:start="401:19" pos:end="401:19"><literal type="number" pos:start="401:19" pos:end="401:19">0</literal></expr>]</index></name><operator pos:start="401:21" pos:end="401:21">.</operator><name pos:start="401:22" pos:end="401:30">predictor</name>  <operator pos:start="401:33" pos:end="401:33">=</operator> <call pos:start="401:35" pos:end="401:77"><name pos:start="401:35" pos:end="401:45">sign_extend</name><argument_list pos:start="401:46" pos:end="401:77">(<argument pos:start="401:47" pos:end="401:72"><expr pos:start="401:47" pos:end="401:72"><call pos:start="401:47" pos:end="401:72"><name pos:start="401:47" pos:end="401:67">bytestream2_get_le16u</name><argument_list pos:start="401:68" pos:end="401:72">(<argument pos:start="401:69" pos:end="401:71"><expr pos:start="401:69" pos:end="401:71"><operator pos:start="401:69" pos:end="401:69">&amp;</operator><name pos:start="401:70" pos:end="401:71">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="401:75" pos:end="401:76"><expr pos:start="401:75" pos:end="401:76"><literal type="number" pos:start="401:75" pos:end="401:76">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="403:9" pos:end="403:78"><expr pos:start="403:9" pos:end="403:77"><name pos:start="403:9" pos:end="403:20"><name pos:start="403:9" pos:end="403:9">c</name><operator pos:start="403:10" pos:end="403:11">-&gt;</operator><name pos:start="403:12" pos:end="403:17">status</name><index pos:start="403:18" pos:end="403:20">[<expr pos:start="403:19" pos:end="403:19"><literal type="number" pos:start="403:19" pos:end="403:19">1</literal></expr>]</index></name><operator pos:start="403:21" pos:end="403:21">.</operator><name pos:start="403:22" pos:end="403:30">predictor</name>  <operator pos:start="403:33" pos:end="403:33">=</operator> <call pos:start="403:35" pos:end="403:77"><name pos:start="403:35" pos:end="403:45">sign_extend</name><argument_list pos:start="403:46" pos:end="403:77">(<argument pos:start="403:47" pos:end="403:72"><expr pos:start="403:47" pos:end="403:72"><call pos:start="403:47" pos:end="403:72"><name pos:start="403:47" pos:end="403:67">bytestream2_get_le16u</name><argument_list pos:start="403:68" pos:end="403:72">(<argument pos:start="403:69" pos:end="403:71"><expr pos:start="403:69" pos:end="403:71"><operator pos:start="403:69" pos:end="403:69">&amp;</operator><name pos:start="403:70" pos:end="403:71">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="403:75" pos:end="403:76"><expr pos:start="403:75" pos:end="403:76"><literal type="number" pos:start="403:75" pos:end="403:76">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="405:9" pos:end="405:61"><expr pos:start="405:9" pos:end="405:60"><name pos:start="405:9" pos:end="405:20"><name pos:start="405:9" pos:end="405:9">c</name><operator pos:start="405:10" pos:end="405:11">-&gt;</operator><name pos:start="405:12" pos:end="405:17">status</name><index pos:start="405:18" pos:end="405:20">[<expr pos:start="405:19" pos:end="405:19"><literal type="number" pos:start="405:19" pos:end="405:19">0</literal></expr>]</index></name><operator pos:start="405:21" pos:end="405:21">.</operator><name pos:start="405:22" pos:end="405:31">step_index</name> <operator pos:start="405:33" pos:end="405:33">=</operator> <call pos:start="405:35" pos:end="405:60"><name pos:start="405:35" pos:end="405:55">bytestream2_get_byteu</name><argument_list pos:start="405:56" pos:end="405:60">(<argument pos:start="405:57" pos:end="405:59"><expr pos:start="405:57" pos:end="405:59"><operator pos:start="405:57" pos:end="405:57">&amp;</operator><name pos:start="405:58" pos:end="405:59">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="407:9" pos:end="407:61"><expr pos:start="407:9" pos:end="407:60"><name pos:start="407:9" pos:end="407:20"><name pos:start="407:9" pos:end="407:9">c</name><operator pos:start="407:10" pos:end="407:11">-&gt;</operator><name pos:start="407:12" pos:end="407:17">status</name><index pos:start="407:18" pos:end="407:20">[<expr pos:start="407:19" pos:end="407:19"><literal type="number" pos:start="407:19" pos:end="407:19">1</literal></expr>]</index></name><operator pos:start="407:21" pos:end="407:21">.</operator><name pos:start="407:22" pos:end="407:31">step_index</name> <operator pos:start="407:33" pos:end="407:33">=</operator> <call pos:start="407:35" pos:end="407:60"><name pos:start="407:35" pos:end="407:55">bytestream2_get_byteu</name><argument_list pos:start="407:56" pos:end="407:60">(<argument pos:start="407:57" pos:end="407:59"><expr pos:start="407:57" pos:end="407:59"><operator pos:start="407:57" pos:end="407:57">&amp;</operator><name pos:start="407:58" pos:end="407:59">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="409:9" pos:end="417:9"><if pos:start="409:9" pos:end="417:9">if <condition pos:start="409:12" pos:end="409:75">(<expr pos:start="409:13" pos:end="409:74"><name pos:start="409:13" pos:end="409:24"><name pos:start="409:13" pos:end="409:13">c</name><operator pos:start="409:14" pos:end="409:15">-&gt;</operator><name pos:start="409:16" pos:end="409:21">status</name><index pos:start="409:22" pos:end="409:24">[<expr pos:start="409:23" pos:end="409:23"><literal type="number" pos:start="409:23" pos:end="409:23">0</literal></expr>]</index></name><operator pos:start="409:25" pos:end="409:25">.</operator><name pos:start="409:26" pos:end="409:35">step_index</name> <operator pos:start="409:37" pos:end="409:37">&gt;</operator> <literal type="number" pos:start="409:39" pos:end="409:41">88u</literal> <operator pos:start="409:43" pos:end="409:44">||</operator> <name pos:start="409:46" pos:end="409:57"><name pos:start="409:46" pos:end="409:46">c</name><operator pos:start="409:47" pos:end="409:48">-&gt;</operator><name pos:start="409:49" pos:end="409:54">status</name><index pos:start="409:55" pos:end="409:57">[<expr pos:start="409:56" pos:end="409:56"><literal type="number" pos:start="409:56" pos:end="409:56">1</literal></expr>]</index></name><operator pos:start="409:58" pos:end="409:58">.</operator><name pos:start="409:59" pos:end="409:68">step_index</name> <operator pos:start="409:70" pos:end="409:70">&gt;</operator> <literal type="number" pos:start="409:72" pos:end="409:74">88u</literal></expr>)</condition><block pos:start="409:76" pos:end="417:9">{<block_content pos:start="411:13" pos:end="415:39">

            <expr_stmt pos:start="411:13" pos:end="413:69"><expr pos:start="411:13" pos:end="413:68"><call pos:start="411:13" pos:end="413:68"><name pos:start="411:13" pos:end="411:18">av_log</name><argument_list pos:start="411:19" pos:end="413:68">(<argument pos:start="411:20" pos:end="411:24"><expr pos:start="411:20" pos:end="411:24"><name pos:start="411:20" pos:end="411:24">avctx</name></expr></argument>, <argument pos:start="411:27" pos:end="411:38"><expr pos:start="411:27" pos:end="411:38"><name pos:start="411:27" pos:end="411:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="411:41" pos:end="411:69"><expr pos:start="411:41" pos:end="411:69"><literal type="string" pos:start="411:41" pos:end="411:69">"ERROR: step_index = %i/%i\n"</literal></expr></argument>,

                   <argument pos:start="413:20" pos:end="413:42"><expr pos:start="413:20" pos:end="413:42"><name pos:start="413:20" pos:end="413:31"><name pos:start="413:20" pos:end="413:20">c</name><operator pos:start="413:21" pos:end="413:22">-&gt;</operator><name pos:start="413:23" pos:end="413:28">status</name><index pos:start="413:29" pos:end="413:31">[<expr pos:start="413:30" pos:end="413:30"><literal type="number" pos:start="413:30" pos:end="413:30">0</literal></expr>]</index></name><operator pos:start="413:32" pos:end="413:32">.</operator><name pos:start="413:33" pos:end="413:42">step_index</name></expr></argument>, <argument pos:start="413:45" pos:end="413:67"><expr pos:start="413:45" pos:end="413:67"><name pos:start="413:45" pos:end="413:56"><name pos:start="413:45" pos:end="413:45">c</name><operator pos:start="413:46" pos:end="413:47">-&gt;</operator><name pos:start="413:48" pos:end="413:53">status</name><index pos:start="413:54" pos:end="413:56">[<expr pos:start="413:55" pos:end="413:55"><literal type="number" pos:start="413:55" pos:end="413:55">1</literal></expr>]</index></name><operator pos:start="413:57" pos:end="413:57">.</operator><name pos:start="413:58" pos:end="413:67">step_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="415:13" pos:end="415:39">return <expr pos:start="415:20" pos:end="415:38"><name pos:start="415:20" pos:end="415:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="419:9" pos:end="419:40">/* sign extend the predictors */</comment>

        <expr_stmt pos:start="421:9" pos:end="444:0"><expr pos:start="421:9" pos:end="421:45"><name pos:start="421:9" pos:end="421:20">diff_channel</name> <operator pos:start="421:22" pos:end="421:22">=</operator> <name pos:start="421:24" pos:end="421:35"><name pos:start="421:24" pos:end="421:24">c</name><operator pos:start="421:25" pos:end="421:26">-&gt;</operator><name pos:start="421:27" pos:end="421:32">status</name><index pos:start="421:33" pos:end="421:35">[<expr pos:start="421:34" pos:end="421:34"><literal type="number" pos:start="421:34" pos:end="421:34">1</literal></expr>]</index></name><operator pos:start="421:36" pos:end="421:36">.</operator><name pos:start="421:37" pos:end="421:45">predictor</name></expr>;</expr_stmt>



        <comment type="block" pos:start="425:9" pos:end="425:37">/* DK3 ADPCM support macro */</comment>

<cpp:define pos:start="427:1" pos:end="443:5">#<cpp:directive pos:start="427:2" pos:end="427:7">define</cpp:directive> <cpp:macro pos:start="427:9" pos:end="427:29"><name pos:start="427:9" pos:end="427:27">DK3_GET_NEXT_NIBBLE</name><parameter_list pos:start="427:28" pos:end="427:29">()</parameter_list></cpp:macro> \

    <cpp:value pos:start="429:5" pos:end="443:5">if (decode_top_nibble_next) { \

        nibble = last_byte &gt;&gt; 4; \

        decode_top_nibble_next = 0; \

    } else { \

        last_byte = bytestream2_get_byteu(&amp;gb); \

        nibble = last_byte &amp; 0x0F; \

        decode_top_nibble_next = 1; \

    }</cpp:value></cpp:define>



        <while pos:start="447:9" pos:end="499:9">while <condition pos:start="447:15" pos:end="447:37">(<expr pos:start="447:16" pos:end="447:36"><name pos:start="447:16" pos:end="447:22">samples</name> <operator pos:start="447:24" pos:end="447:24">&lt;</operator> <name pos:start="447:26" pos:end="447:36">samples_end</name></expr>)</condition> <block pos:start="447:39" pos:end="499:9">{<block_content pos:start="459:13" pos:end="497:73">



            <comment type="block" pos:start="451:13" pos:end="453:50">/* for this algorithm, c-&gt;status[0] is the sum channel and

             * c-&gt;status[1] is the diff channel */</comment>



            <comment type="block" pos:start="457:13" pos:end="457:64">/* process the first predictor of the sum channel */</comment>

            <expr_stmt pos:start="459:13" pos:end="459:34"><expr pos:start="459:13" pos:end="459:33"><call pos:start="459:13" pos:end="459:33"><name pos:start="459:13" pos:end="459:31">DK3_GET_NEXT_NIBBLE</name><argument_list pos:start="459:32" pos:end="459:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="461:13" pos:end="461:62"><expr pos:start="461:13" pos:end="461:61"><call pos:start="461:13" pos:end="461:61"><name pos:start="461:13" pos:end="461:35">adpcm_ima_expand_nibble</name><argument_list pos:start="461:36" pos:end="461:61">(<argument pos:start="461:37" pos:end="461:49"><expr pos:start="461:37" pos:end="461:49"><operator pos:start="461:37" pos:end="461:37">&amp;</operator><name pos:start="461:38" pos:end="461:49"><name pos:start="461:38" pos:end="461:38">c</name><operator pos:start="461:39" pos:end="461:40">-&gt;</operator><name pos:start="461:41" pos:end="461:46">status</name><index pos:start="461:47" pos:end="461:49">[<expr pos:start="461:48" pos:end="461:48"><literal type="number" pos:start="461:48" pos:end="461:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="461:52" pos:end="461:57"><expr pos:start="461:52" pos:end="461:57"><name pos:start="461:52" pos:end="461:57">nibble</name></expr></argument>, <argument pos:start="461:60" pos:end="461:60"><expr pos:start="461:60" pos:end="461:60"><literal type="number" pos:start="461:60" pos:end="461:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="465:13" pos:end="465:52">/* process the diff channel predictor */</comment>

            <expr_stmt pos:start="467:13" pos:end="467:34"><expr pos:start="467:13" pos:end="467:33"><call pos:start="467:13" pos:end="467:33"><name pos:start="467:13" pos:end="467:31">DK3_GET_NEXT_NIBBLE</name><argument_list pos:start="467:32" pos:end="467:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="469:13" pos:end="469:62"><expr pos:start="469:13" pos:end="469:61"><call pos:start="469:13" pos:end="469:61"><name pos:start="469:13" pos:end="469:35">adpcm_ima_expand_nibble</name><argument_list pos:start="469:36" pos:end="469:61">(<argument pos:start="469:37" pos:end="469:49"><expr pos:start="469:37" pos:end="469:49"><operator pos:start="469:37" pos:end="469:37">&amp;</operator><name pos:start="469:38" pos:end="469:49"><name pos:start="469:38" pos:end="469:38">c</name><operator pos:start="469:39" pos:end="469:40">-&gt;</operator><name pos:start="469:41" pos:end="469:46">status</name><index pos:start="469:47" pos:end="469:49">[<expr pos:start="469:48" pos:end="469:48"><literal type="number" pos:start="469:48" pos:end="469:48">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="469:52" pos:end="469:57"><expr pos:start="469:52" pos:end="469:57"><name pos:start="469:52" pos:end="469:57">nibble</name></expr></argument>, <argument pos:start="469:60" pos:end="469:60"><expr pos:start="469:60" pos:end="469:60"><literal type="number" pos:start="469:60" pos:end="469:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="473:13" pos:end="473:62">/* process the first pair of stereo PCM samples */</comment>

            <expr_stmt pos:start="475:13" pos:end="475:71"><expr pos:start="475:13" pos:end="475:70"><name pos:start="475:13" pos:end="475:24">diff_channel</name> <operator pos:start="475:26" pos:end="475:26">=</operator> <operator pos:start="475:28" pos:end="475:28">(</operator><name pos:start="475:29" pos:end="475:40">diff_channel</name> <operator pos:start="475:42" pos:end="475:42">+</operator> <name pos:start="475:44" pos:end="475:55"><name pos:start="475:44" pos:end="475:44">c</name><operator pos:start="475:45" pos:end="475:46">-&gt;</operator><name pos:start="475:47" pos:end="475:52">status</name><index pos:start="475:53" pos:end="475:55">[<expr pos:start="475:54" pos:end="475:54"><literal type="number" pos:start="475:54" pos:end="475:54">1</literal></expr>]</index></name><operator pos:start="475:56" pos:end="475:56">.</operator><name pos:start="475:57" pos:end="475:65">predictor</name><operator pos:start="475:66" pos:end="475:66">)</operator> <operator pos:start="475:68" pos:end="475:68">/</operator> <literal type="number" pos:start="475:70" pos:end="475:70">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="477:13" pos:end="477:73"><expr pos:start="477:13" pos:end="477:72"><operator pos:start="477:13" pos:end="477:13">*</operator><name pos:start="477:14" pos:end="477:20">samples</name><operator pos:start="477:21" pos:end="477:22">++</operator> <operator pos:start="477:24" pos:end="477:24">=</operator> <name pos:start="477:26" pos:end="477:37"><name pos:start="477:26" pos:end="477:26">c</name><operator pos:start="477:27" pos:end="477:28">-&gt;</operator><name pos:start="477:29" pos:end="477:34">status</name><index pos:start="477:35" pos:end="477:37">[<expr pos:start="477:36" pos:end="477:36"><literal type="number" pos:start="477:36" pos:end="477:36">0</literal></expr>]</index></name><operator pos:start="477:38" pos:end="477:38">.</operator><name pos:start="477:39" pos:end="477:47">predictor</name> <operator pos:start="477:49" pos:end="477:49">+</operator> <name pos:start="477:51" pos:end="477:62"><name pos:start="477:51" pos:end="477:51">c</name><operator pos:start="477:52" pos:end="477:53">-&gt;</operator><name pos:start="477:54" pos:end="477:59">status</name><index pos:start="477:60" pos:end="477:62">[<expr pos:start="477:61" pos:end="477:61"><literal type="number" pos:start="477:61" pos:end="477:61">1</literal></expr>]</index></name><operator pos:start="477:63" pos:end="477:63">.</operator><name pos:start="477:64" pos:end="477:72">predictor</name></expr>;</expr_stmt>

            <expr_stmt pos:start="479:13" pos:end="479:73"><expr pos:start="479:13" pos:end="479:72"><operator pos:start="479:13" pos:end="479:13">*</operator><name pos:start="479:14" pos:end="479:20">samples</name><operator pos:start="479:21" pos:end="479:22">++</operator> <operator pos:start="479:24" pos:end="479:24">=</operator> <name pos:start="479:26" pos:end="479:37"><name pos:start="479:26" pos:end="479:26">c</name><operator pos:start="479:27" pos:end="479:28">-&gt;</operator><name pos:start="479:29" pos:end="479:34">status</name><index pos:start="479:35" pos:end="479:37">[<expr pos:start="479:36" pos:end="479:36"><literal type="number" pos:start="479:36" pos:end="479:36">0</literal></expr>]</index></name><operator pos:start="479:38" pos:end="479:38">.</operator><name pos:start="479:39" pos:end="479:47">predictor</name> <operator pos:start="479:49" pos:end="479:49">-</operator> <name pos:start="479:51" pos:end="479:62"><name pos:start="479:51" pos:end="479:51">c</name><operator pos:start="479:52" pos:end="479:53">-&gt;</operator><name pos:start="479:54" pos:end="479:59">status</name><index pos:start="479:60" pos:end="479:62">[<expr pos:start="479:61" pos:end="479:61"><literal type="number" pos:start="479:61" pos:end="479:61">1</literal></expr>]</index></name><operator pos:start="479:63" pos:end="479:63">.</operator><name pos:start="479:64" pos:end="479:72">predictor</name></expr>;</expr_stmt>



            <comment type="block" pos:start="483:13" pos:end="483:65">/* process the second predictor of the sum channel */</comment>

            <expr_stmt pos:start="485:13" pos:end="485:34"><expr pos:start="485:13" pos:end="485:33"><call pos:start="485:13" pos:end="485:33"><name pos:start="485:13" pos:end="485:31">DK3_GET_NEXT_NIBBLE</name><argument_list pos:start="485:32" pos:end="485:33">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="487:13" pos:end="487:62"><expr pos:start="487:13" pos:end="487:61"><call pos:start="487:13" pos:end="487:61"><name pos:start="487:13" pos:end="487:35">adpcm_ima_expand_nibble</name><argument_list pos:start="487:36" pos:end="487:61">(<argument pos:start="487:37" pos:end="487:49"><expr pos:start="487:37" pos:end="487:49"><operator pos:start="487:37" pos:end="487:37">&amp;</operator><name pos:start="487:38" pos:end="487:49"><name pos:start="487:38" pos:end="487:38">c</name><operator pos:start="487:39" pos:end="487:40">-&gt;</operator><name pos:start="487:41" pos:end="487:46">status</name><index pos:start="487:47" pos:end="487:49">[<expr pos:start="487:48" pos:end="487:48"><literal type="number" pos:start="487:48" pos:end="487:48">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="487:52" pos:end="487:57"><expr pos:start="487:52" pos:end="487:57"><name pos:start="487:52" pos:end="487:57">nibble</name></expr></argument>, <argument pos:start="487:60" pos:end="487:60"><expr pos:start="487:60" pos:end="487:60"><literal type="number" pos:start="487:60" pos:end="487:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="491:13" pos:end="491:63">/* process the second pair of stereo PCM samples */</comment>

            <expr_stmt pos:start="493:13" pos:end="493:71"><expr pos:start="493:13" pos:end="493:70"><name pos:start="493:13" pos:end="493:24">diff_channel</name> <operator pos:start="493:26" pos:end="493:26">=</operator> <operator pos:start="493:28" pos:end="493:28">(</operator><name pos:start="493:29" pos:end="493:40">diff_channel</name> <operator pos:start="493:42" pos:end="493:42">+</operator> <name pos:start="493:44" pos:end="493:55"><name pos:start="493:44" pos:end="493:44">c</name><operator pos:start="493:45" pos:end="493:46">-&gt;</operator><name pos:start="493:47" pos:end="493:52">status</name><index pos:start="493:53" pos:end="493:55">[<expr pos:start="493:54" pos:end="493:54"><literal type="number" pos:start="493:54" pos:end="493:54">1</literal></expr>]</index></name><operator pos:start="493:56" pos:end="493:56">.</operator><name pos:start="493:57" pos:end="493:65">predictor</name><operator pos:start="493:66" pos:end="493:66">)</operator> <operator pos:start="493:68" pos:end="493:68">/</operator> <literal type="number" pos:start="493:70" pos:end="493:70">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="495:13" pos:end="495:73"><expr pos:start="495:13" pos:end="495:72"><operator pos:start="495:13" pos:end="495:13">*</operator><name pos:start="495:14" pos:end="495:20">samples</name><operator pos:start="495:21" pos:end="495:22">++</operator> <operator pos:start="495:24" pos:end="495:24">=</operator> <name pos:start="495:26" pos:end="495:37"><name pos:start="495:26" pos:end="495:26">c</name><operator pos:start="495:27" pos:end="495:28">-&gt;</operator><name pos:start="495:29" pos:end="495:34">status</name><index pos:start="495:35" pos:end="495:37">[<expr pos:start="495:36" pos:end="495:36"><literal type="number" pos:start="495:36" pos:end="495:36">0</literal></expr>]</index></name><operator pos:start="495:38" pos:end="495:38">.</operator><name pos:start="495:39" pos:end="495:47">predictor</name> <operator pos:start="495:49" pos:end="495:49">+</operator> <name pos:start="495:51" pos:end="495:62"><name pos:start="495:51" pos:end="495:51">c</name><operator pos:start="495:52" pos:end="495:53">-&gt;</operator><name pos:start="495:54" pos:end="495:59">status</name><index pos:start="495:60" pos:end="495:62">[<expr pos:start="495:61" pos:end="495:61"><literal type="number" pos:start="495:61" pos:end="495:61">1</literal></expr>]</index></name><operator pos:start="495:63" pos:end="495:63">.</operator><name pos:start="495:64" pos:end="495:72">predictor</name></expr>;</expr_stmt>

            <expr_stmt pos:start="497:13" pos:end="497:73"><expr pos:start="497:13" pos:end="497:72"><operator pos:start="497:13" pos:end="497:13">*</operator><name pos:start="497:14" pos:end="497:20">samples</name><operator pos:start="497:21" pos:end="497:22">++</operator> <operator pos:start="497:24" pos:end="497:24">=</operator> <name pos:start="497:26" pos:end="497:37"><name pos:start="497:26" pos:end="497:26">c</name><operator pos:start="497:27" pos:end="497:28">-&gt;</operator><name pos:start="497:29" pos:end="497:34">status</name><index pos:start="497:35" pos:end="497:37">[<expr pos:start="497:36" pos:end="497:36"><literal type="number" pos:start="497:36" pos:end="497:36">0</literal></expr>]</index></name><operator pos:start="497:38" pos:end="497:38">.</operator><name pos:start="497:39" pos:end="497:47">predictor</name> <operator pos:start="497:49" pos:end="497:49">-</operator> <name pos:start="497:51" pos:end="497:62"><name pos:start="497:51" pos:end="497:51">c</name><operator pos:start="497:52" pos:end="497:53">-&gt;</operator><name pos:start="497:54" pos:end="497:59">status</name><index pos:start="497:60" pos:end="497:62">[<expr pos:start="497:61" pos:end="497:61"><literal type="number" pos:start="497:61" pos:end="497:61">1</literal></expr>]</index></name><operator pos:start="497:63" pos:end="497:63">.</operator><name pos:start="497:64" pos:end="497:72">predictor</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="501:9" pos:end="501:14">break;</break>

    </block_content>}</block>

    <case pos:start="505:5" pos:end="505:35">case <expr pos:start="505:10" pos:end="505:34"><name pos:start="505:10" pos:end="505:34">AV_CODEC_ID_ADPCM_IMA_ISS</name></expr>:</case>

        <for pos:start="507:9" pos:end="525:9">for <control pos:start="507:13" pos:end="507:63">(<init pos:start="507:14" pos:end="507:25"><expr pos:start="507:14" pos:end="507:24"><name pos:start="507:14" pos:end="507:20">channel</name> <operator pos:start="507:22" pos:end="507:22">=</operator> <literal type="number" pos:start="507:24" pos:end="507:24">0</literal></expr>;</init> <condition pos:start="507:27" pos:end="507:52"><expr pos:start="507:27" pos:end="507:51"><name pos:start="507:27" pos:end="507:33">channel</name> <operator pos:start="507:35" pos:end="507:35">&lt;</operator> <name pos:start="507:37" pos:end="507:51"><name pos:start="507:37" pos:end="507:41">avctx</name><operator pos:start="507:42" pos:end="507:43">-&gt;</operator><name pos:start="507:44" pos:end="507:51">channels</name></name></expr>;</condition> <incr pos:start="507:54" pos:end="507:62"><expr pos:start="507:54" pos:end="507:62"><name pos:start="507:54" pos:end="507:60">channel</name><operator pos:start="507:61" pos:end="507:62">++</operator></expr></incr>)</control> <block pos:start="507:65" pos:end="525:9">{<block_content pos:start="509:13" pos:end="523:13">

            <expr_stmt pos:start="509:13" pos:end="509:37"><expr pos:start="509:13" pos:end="509:36"><name pos:start="509:13" pos:end="509:14">cs</name> <operator pos:start="509:16" pos:end="509:16">=</operator> <operator pos:start="509:18" pos:end="509:18">&amp;</operator><name pos:start="509:19" pos:end="509:36"><name pos:start="509:19" pos:end="509:19">c</name><operator pos:start="509:20" pos:end="509:21">-&gt;</operator><name pos:start="509:22" pos:end="509:27">status</name><index pos:start="509:28" pos:end="509:36">[<expr pos:start="509:29" pos:end="509:35"><name pos:start="509:29" pos:end="509:35">channel</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="511:13" pos:end="511:73"><expr pos:start="511:13" pos:end="511:72"><name pos:start="511:13" pos:end="511:25"><name pos:start="511:13" pos:end="511:14">cs</name><operator pos:start="511:15" pos:end="511:16">-&gt;</operator><name pos:start="511:17" pos:end="511:25">predictor</name></name>  <operator pos:start="511:28" pos:end="511:28">=</operator> <call pos:start="511:30" pos:end="511:72"><name pos:start="511:30" pos:end="511:40">sign_extend</name><argument_list pos:start="511:41" pos:end="511:72">(<argument pos:start="511:42" pos:end="511:67"><expr pos:start="511:42" pos:end="511:67"><call pos:start="511:42" pos:end="511:67"><name pos:start="511:42" pos:end="511:62">bytestream2_get_le16u</name><argument_list pos:start="511:63" pos:end="511:67">(<argument pos:start="511:64" pos:end="511:66"><expr pos:start="511:64" pos:end="511:66"><operator pos:start="511:64" pos:end="511:64">&amp;</operator><name pos:start="511:65" pos:end="511:66">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="511:70" pos:end="511:71"><expr pos:start="511:70" pos:end="511:71"><literal type="number" pos:start="511:70" pos:end="511:71">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="513:13" pos:end="513:73"><expr pos:start="513:13" pos:end="513:72"><name pos:start="513:13" pos:end="513:26"><name pos:start="513:13" pos:end="513:14">cs</name><operator pos:start="513:15" pos:end="513:16">-&gt;</operator><name pos:start="513:17" pos:end="513:26">step_index</name></name> <operator pos:start="513:28" pos:end="513:28">=</operator> <call pos:start="513:30" pos:end="513:72"><name pos:start="513:30" pos:end="513:40">sign_extend</name><argument_list pos:start="513:41" pos:end="513:72">(<argument pos:start="513:42" pos:end="513:67"><expr pos:start="513:42" pos:end="513:67"><call pos:start="513:42" pos:end="513:67"><name pos:start="513:42" pos:end="513:62">bytestream2_get_le16u</name><argument_list pos:start="513:63" pos:end="513:67">(<argument pos:start="513:64" pos:end="513:66"><expr pos:start="513:64" pos:end="513:66"><operator pos:start="513:64" pos:end="513:64">&amp;</operator><name pos:start="513:65" pos:end="513:66">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="513:70" pos:end="513:71"><expr pos:start="513:70" pos:end="513:71"><literal type="number" pos:start="513:70" pos:end="513:71">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="515:13" pos:end="523:13"><if pos:start="515:13" pos:end="523:13">if <condition pos:start="515:16" pos:end="515:37">(<expr pos:start="515:17" pos:end="515:36"><name pos:start="515:17" pos:end="515:30"><name pos:start="515:17" pos:end="515:18">cs</name><operator pos:start="515:19" pos:end="515:20">-&gt;</operator><name pos:start="515:21" pos:end="515:30">step_index</name></name> <operator pos:start="515:32" pos:end="515:32">&gt;</operator> <literal type="number" pos:start="515:34" pos:end="515:36">88u</literal></expr>)</condition><block pos:start="515:38" pos:end="523:13">{<block_content pos:start="517:17" pos:end="521:43">

                <expr_stmt pos:start="517:17" pos:end="519:48"><expr pos:start="517:17" pos:end="519:47"><call pos:start="517:17" pos:end="519:47"><name pos:start="517:17" pos:end="517:22">av_log</name><argument_list pos:start="517:23" pos:end="519:47">(<argument pos:start="517:24" pos:end="517:28"><expr pos:start="517:24" pos:end="517:28"><name pos:start="517:24" pos:end="517:28">avctx</name></expr></argument>, <argument pos:start="517:31" pos:end="517:42"><expr pos:start="517:31" pos:end="517:42"><name pos:start="517:31" pos:end="517:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="517:45" pos:end="517:74"><expr pos:start="517:45" pos:end="517:74"><literal type="string" pos:start="517:45" pos:end="517:74">"ERROR: step_index[%d] = %i\n"</literal></expr></argument>,

                       <argument pos:start="519:24" pos:end="519:30"><expr pos:start="519:24" pos:end="519:30"><name pos:start="519:24" pos:end="519:30">channel</name></expr></argument>, <argument pos:start="519:33" pos:end="519:46"><expr pos:start="519:33" pos:end="519:46"><name pos:start="519:33" pos:end="519:46"><name pos:start="519:33" pos:end="519:34">cs</name><operator pos:start="519:35" pos:end="519:36">-&gt;</operator><name pos:start="519:37" pos:end="519:46">step_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="521:17" pos:end="521:43">return <expr pos:start="521:24" pos:end="521:42"><name pos:start="521:24" pos:end="521:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <for pos:start="529:9" pos:end="555:9">for <control pos:start="529:13" pos:end="529:52">(<init pos:start="529:14" pos:end="529:40"><expr pos:start="529:14" pos:end="529:39"><name pos:start="529:14" pos:end="529:14">n</name> <operator pos:start="529:16" pos:end="529:16">=</operator> <name pos:start="529:18" pos:end="529:27">nb_samples</name> <operator pos:start="529:29" pos:end="529:30">&gt;&gt;</operator> <operator pos:start="529:32" pos:end="529:32">(</operator><literal type="number" pos:start="529:33" pos:end="529:35">1</literal> <operator pos:start="529:35" pos:end="529:35">-</operator> <name pos:start="529:37" pos:end="529:38">st</name><operator pos:start="529:39" pos:end="529:39">)</operator></expr>;</init> <condition pos:start="529:42" pos:end="529:47"><expr pos:start="529:42" pos:end="529:46"><name pos:start="529:42" pos:end="529:42">n</name> <operator pos:start="529:44" pos:end="529:44">&gt;</operator> <literal type="number" pos:start="529:46" pos:end="529:46">0</literal></expr>;</condition> <incr pos:start="529:49" pos:end="529:51"><expr pos:start="529:49" pos:end="529:51"><name pos:start="529:49" pos:end="529:49">n</name><operator pos:start="529:50" pos:end="529:51">--</operator></expr></incr>)</control> <block pos:start="529:54" pos:end="555:9">{<block_content pos:start="531:13" pos:end="553:72">

            <decl_stmt pos:start="531:13" pos:end="531:23"><decl pos:start="531:13" pos:end="531:18"><type pos:start="531:13" pos:end="531:15"><name pos:start="531:13" pos:end="531:15">int</name></type> <name pos:start="531:17" pos:end="531:18">v1</name></decl>, <decl pos:start="531:21" pos:end="531:22"><type ref="prev" pos:start="531:13" pos:end="531:15"/><name pos:start="531:21" pos:end="531:22">v2</name></decl>;</decl_stmt>

            <decl_stmt pos:start="533:13" pos:end="533:47"><decl pos:start="533:13" pos:end="533:46"><type pos:start="533:13" pos:end="533:15"><name pos:start="533:13" pos:end="533:15">int</name></type> <name pos:start="533:17" pos:end="533:17">v</name> <init pos:start="533:19" pos:end="533:46">= <expr pos:start="533:21" pos:end="533:46"><call pos:start="533:21" pos:end="533:46"><name pos:start="533:21" pos:end="533:41">bytestream2_get_byteu</name><argument_list pos:start="533:42" pos:end="533:46">(<argument pos:start="533:43" pos:end="533:45"><expr pos:start="533:43" pos:end="533:45"><operator pos:start="533:43" pos:end="533:43">&amp;</operator><name pos:start="533:44" pos:end="533:45">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="535:13" pos:end="535:46">/* nibbles are swapped for mono */</comment>

            <if_stmt pos:start="537:13" pos:end="549:13"><if pos:start="537:13" pos:end="543:13">if <condition pos:start="537:16" pos:end="537:19">(<expr pos:start="537:17" pos:end="537:18"><name pos:start="537:17" pos:end="537:18">st</name></expr>)</condition> <block pos:start="537:21" pos:end="543:13">{<block_content pos:start="539:17" pos:end="541:30">

                <expr_stmt pos:start="539:17" pos:end="539:28"><expr pos:start="539:17" pos:end="539:27"><name pos:start="539:17" pos:end="539:18">v1</name> <operator pos:start="539:20" pos:end="539:20">=</operator> <name pos:start="539:22" pos:end="539:22">v</name> <operator pos:start="539:24" pos:end="539:25">&gt;&gt;</operator> <literal type="number" pos:start="539:27" pos:end="539:27">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="541:17" pos:end="541:30"><expr pos:start="541:17" pos:end="541:29"><name pos:start="541:17" pos:end="541:18">v2</name> <operator pos:start="541:20" pos:end="541:20">=</operator> <name pos:start="541:22" pos:end="541:22">v</name> <operator pos:start="541:24" pos:end="541:24">&amp;</operator> <literal type="number" pos:start="541:26" pos:end="541:29">0x0F</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="543:15" pos:end="549:13">else <block pos:start="543:20" pos:end="549:13">{<block_content pos:start="545:17" pos:end="547:30">

                <expr_stmt pos:start="545:17" pos:end="545:28"><expr pos:start="545:17" pos:end="545:27"><name pos:start="545:17" pos:end="545:18">v2</name> <operator pos:start="545:20" pos:end="545:20">=</operator> <name pos:start="545:22" pos:end="545:22">v</name> <operator pos:start="545:24" pos:end="545:25">&gt;&gt;</operator> <literal type="number" pos:start="545:27" pos:end="545:27">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="547:17" pos:end="547:30"><expr pos:start="547:17" pos:end="547:29"><name pos:start="547:17" pos:end="547:18">v1</name> <operator pos:start="547:20" pos:end="547:20">=</operator> <name pos:start="547:22" pos:end="547:22">v</name> <operator pos:start="547:24" pos:end="547:24">&amp;</operator> <literal type="number" pos:start="547:26" pos:end="547:29">0x0F</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="551:13" pos:end="551:72"><expr pos:start="551:13" pos:end="551:71"><operator pos:start="551:13" pos:end="551:13">*</operator><name pos:start="551:14" pos:end="551:20">samples</name><operator pos:start="551:21" pos:end="551:22">++</operator> <operator pos:start="551:24" pos:end="551:24">=</operator> <call pos:start="551:26" pos:end="551:71"><name pos:start="551:26" pos:end="551:48">adpcm_ima_expand_nibble</name><argument_list pos:start="551:49" pos:end="551:71">(<argument pos:start="551:50" pos:end="551:63"><expr pos:start="551:50" pos:end="551:63"><operator pos:start="551:50" pos:end="551:50">&amp;</operator><name pos:start="551:51" pos:end="551:63"><name pos:start="551:51" pos:end="551:51">c</name><operator pos:start="551:52" pos:end="551:53">-&gt;</operator><name pos:start="551:54" pos:end="551:59">status</name><index pos:start="551:60" pos:end="551:63">[<expr pos:start="551:61" pos:end="551:61"><literal type="number" pos:start="551:61" pos:end="551:61">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="551:66" pos:end="551:67"><expr pos:start="551:66" pos:end="551:67"><name pos:start="551:66" pos:end="551:67">v1</name></expr></argument>, <argument pos:start="551:70" pos:end="551:70"><expr pos:start="551:70" pos:end="551:70"><literal type="number" pos:start="551:70" pos:end="551:70">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="553:13" pos:end="553:72"><expr pos:start="553:13" pos:end="553:71"><operator pos:start="553:13" pos:end="553:13">*</operator><name pos:start="553:14" pos:end="553:20">samples</name><operator pos:start="553:21" pos:end="553:22">++</operator> <operator pos:start="553:24" pos:end="553:24">=</operator> <call pos:start="553:26" pos:end="553:71"><name pos:start="553:26" pos:end="553:48">adpcm_ima_expand_nibble</name><argument_list pos:start="553:49" pos:end="553:71">(<argument pos:start="553:50" pos:end="553:63"><expr pos:start="553:50" pos:end="553:63"><operator pos:start="553:50" pos:end="553:50">&amp;</operator><name pos:start="553:51" pos:end="553:63"><name pos:start="553:51" pos:end="553:51">c</name><operator pos:start="553:52" pos:end="553:53">-&gt;</operator><name pos:start="553:54" pos:end="553:59">status</name><index pos:start="553:60" pos:end="553:63">[<expr pos:start="553:61" pos:end="553:62"><name pos:start="553:61" pos:end="553:62">st</name></expr>]</index></name></expr></argument>, <argument pos:start="553:66" pos:end="553:67"><expr pos:start="553:66" pos:end="553:67"><name pos:start="553:66" pos:end="553:67">v2</name></expr></argument>, <argument pos:start="553:70" pos:end="553:70"><expr pos:start="553:70" pos:end="553:70"><literal type="number" pos:start="553:70" pos:end="553:70">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="557:9" pos:end="557:14">break;</break>

    <case pos:start="559:5" pos:end="559:35">case <expr pos:start="559:10" pos:end="559:34"><name pos:start="559:10" pos:end="559:34">AV_CODEC_ID_ADPCM_IMA_APC</name></expr>:</case>

        <while pos:start="561:9" pos:end="569:9">while <condition pos:start="561:15" pos:end="561:51">(<expr pos:start="561:16" pos:end="561:50"><call pos:start="561:16" pos:end="561:46"><name pos:start="561:16" pos:end="561:41">bytestream2_get_bytes_left</name><argument_list pos:start="561:42" pos:end="561:46">(<argument pos:start="561:43" pos:end="561:45"><expr pos:start="561:43" pos:end="561:45"><operator pos:start="561:43" pos:end="561:43">&amp;</operator><name pos:start="561:44" pos:end="561:45">gb</name></expr></argument>)</argument_list></call> <operator pos:start="561:48" pos:end="561:48">&gt;</operator> <literal type="number" pos:start="561:50" pos:end="561:50">0</literal></expr>)</condition> <block pos:start="561:53" pos:end="569:9">{<block_content pos:start="563:13" pos:end="567:78">

            <decl_stmt pos:start="563:13" pos:end="563:47"><decl pos:start="563:13" pos:end="563:46"><type pos:start="563:13" pos:end="563:15"><name pos:start="563:13" pos:end="563:15">int</name></type> <name pos:start="563:17" pos:end="563:17">v</name> <init pos:start="563:19" pos:end="563:46">= <expr pos:start="563:21" pos:end="563:46"><call pos:start="563:21" pos:end="563:46"><name pos:start="563:21" pos:end="563:41">bytestream2_get_byteu</name><argument_list pos:start="563:42" pos:end="563:46">(<argument pos:start="563:43" pos:end="563:45"><expr pos:start="563:43" pos:end="563:45"><operator pos:start="563:43" pos:end="563:43">&amp;</operator><name pos:start="563:44" pos:end="563:45">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="565:13" pos:end="565:78"><expr pos:start="565:13" pos:end="565:77"><operator pos:start="565:13" pos:end="565:13">*</operator><name pos:start="565:14" pos:end="565:20">samples</name><operator pos:start="565:21" pos:end="565:22">++</operator> <operator pos:start="565:24" pos:end="565:24">=</operator> <call pos:start="565:26" pos:end="565:77"><name pos:start="565:26" pos:end="565:48">adpcm_ima_expand_nibble</name><argument_list pos:start="565:49" pos:end="565:77">(<argument pos:start="565:50" pos:end="565:62"><expr pos:start="565:50" pos:end="565:62"><operator pos:start="565:50" pos:end="565:50">&amp;</operator><name pos:start="565:51" pos:end="565:62"><name pos:start="565:51" pos:end="565:51">c</name><operator pos:start="565:52" pos:end="565:53">-&gt;</operator><name pos:start="565:54" pos:end="565:59">status</name><index pos:start="565:60" pos:end="565:62">[<expr pos:start="565:61" pos:end="565:61"><literal type="number" pos:start="565:61" pos:end="565:61">0</literal></expr>]</index></name></expr></argument>,  <argument pos:start="565:66" pos:end="565:71"><expr pos:start="565:66" pos:end="565:71"><name pos:start="565:66" pos:end="565:66">v</name> <operator pos:start="565:68" pos:end="565:69">&gt;&gt;</operator> <literal type="number" pos:start="565:71" pos:end="565:71">4</literal></expr></argument>  , <argument pos:start="565:76" pos:end="565:76"><expr pos:start="565:76" pos:end="565:76"><literal type="number" pos:start="565:76" pos:end="565:76">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="567:13" pos:end="567:78"><expr pos:start="567:13" pos:end="567:77"><operator pos:start="567:13" pos:end="567:13">*</operator><name pos:start="567:14" pos:end="567:20">samples</name><operator pos:start="567:21" pos:end="567:22">++</operator> <operator pos:start="567:24" pos:end="567:24">=</operator> <call pos:start="567:26" pos:end="567:77"><name pos:start="567:26" pos:end="567:48">adpcm_ima_expand_nibble</name><argument_list pos:start="567:49" pos:end="567:77">(<argument pos:start="567:50" pos:end="567:63"><expr pos:start="567:50" pos:end="567:63"><operator pos:start="567:50" pos:end="567:50">&amp;</operator><name pos:start="567:51" pos:end="567:63"><name pos:start="567:51" pos:end="567:51">c</name><operator pos:start="567:52" pos:end="567:53">-&gt;</operator><name pos:start="567:54" pos:end="567:59">status</name><index pos:start="567:60" pos:end="567:63">[<expr pos:start="567:61" pos:end="567:62"><name pos:start="567:61" pos:end="567:62">st</name></expr>]</index></name></expr></argument>, <argument pos:start="567:66" pos:end="567:73"><expr pos:start="567:66" pos:end="567:73"><name pos:start="567:66" pos:end="567:66">v</name> <operator pos:start="567:68" pos:end="567:68">&amp;</operator> <literal type="number" pos:start="567:70" pos:end="567:73">0x0F</literal></expr></argument>, <argument pos:start="567:76" pos:end="567:76"><expr pos:start="567:76" pos:end="567:76"><literal type="number" pos:start="567:76" pos:end="567:76">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="571:9" pos:end="571:14">break;</break>

    <case pos:start="573:5" pos:end="573:35">case <expr pos:start="573:10" pos:end="573:34"><name pos:start="573:10" pos:end="573:34">AV_CODEC_ID_ADPCM_IMA_OKI</name></expr>:</case>

        <while pos:start="575:9" pos:end="583:9">while <condition pos:start="575:15" pos:end="575:51">(<expr pos:start="575:16" pos:end="575:50"><call pos:start="575:16" pos:end="575:46"><name pos:start="575:16" pos:end="575:41">bytestream2_get_bytes_left</name><argument_list pos:start="575:42" pos:end="575:46">(<argument pos:start="575:43" pos:end="575:45"><expr pos:start="575:43" pos:end="575:45"><operator pos:start="575:43" pos:end="575:43">&amp;</operator><name pos:start="575:44" pos:end="575:45">gb</name></expr></argument>)</argument_list></call> <operator pos:start="575:48" pos:end="575:48">&gt;</operator> <literal type="number" pos:start="575:50" pos:end="575:50">0</literal></expr>)</condition> <block pos:start="575:53" pos:end="583:9">{<block_content pos:start="577:13" pos:end="581:79">

            <decl_stmt pos:start="577:13" pos:end="577:47"><decl pos:start="577:13" pos:end="577:46"><type pos:start="577:13" pos:end="577:15"><name pos:start="577:13" pos:end="577:15">int</name></type> <name pos:start="577:17" pos:end="577:17">v</name> <init pos:start="577:19" pos:end="577:46">= <expr pos:start="577:21" pos:end="577:46"><call pos:start="577:21" pos:end="577:46"><name pos:start="577:21" pos:end="577:41">bytestream2_get_byteu</name><argument_list pos:start="577:42" pos:end="577:46">(<argument pos:start="577:43" pos:end="577:45"><expr pos:start="577:43" pos:end="577:45"><operator pos:start="577:43" pos:end="577:43">&amp;</operator><name pos:start="577:44" pos:end="577:45">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="579:13" pos:end="579:79"><expr pos:start="579:13" pos:end="579:78"><operator pos:start="579:13" pos:end="579:13">*</operator><name pos:start="579:14" pos:end="579:20">samples</name><operator pos:start="579:21" pos:end="579:22">++</operator> <operator pos:start="579:24" pos:end="579:24">=</operator> <call pos:start="579:26" pos:end="579:78"><name pos:start="579:26" pos:end="579:52">adpcm_ima_oki_expand_nibble</name><argument_list pos:start="579:53" pos:end="579:78">(<argument pos:start="579:54" pos:end="579:66"><expr pos:start="579:54" pos:end="579:66"><operator pos:start="579:54" pos:end="579:54">&amp;</operator><name pos:start="579:55" pos:end="579:66"><name pos:start="579:55" pos:end="579:55">c</name><operator pos:start="579:56" pos:end="579:57">-&gt;</operator><name pos:start="579:58" pos:end="579:63">status</name><index pos:start="579:64" pos:end="579:66">[<expr pos:start="579:65" pos:end="579:65"><literal type="number" pos:start="579:65" pos:end="579:65">0</literal></expr>]</index></name></expr></argument>,  <argument pos:start="579:70" pos:end="579:75"><expr pos:start="579:70" pos:end="579:75"><name pos:start="579:70" pos:end="579:70">v</name> <operator pos:start="579:72" pos:end="579:73">&gt;&gt;</operator> <literal type="number" pos:start="579:75" pos:end="579:75">4</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="581:13" pos:end="581:79"><expr pos:start="581:13" pos:end="581:78"><operator pos:start="581:13" pos:end="581:13">*</operator><name pos:start="581:14" pos:end="581:20">samples</name><operator pos:start="581:21" pos:end="581:22">++</operator> <operator pos:start="581:24" pos:end="581:24">=</operator> <call pos:start="581:26" pos:end="581:78"><name pos:start="581:26" pos:end="581:52">adpcm_ima_oki_expand_nibble</name><argument_list pos:start="581:53" pos:end="581:78">(<argument pos:start="581:54" pos:end="581:67"><expr pos:start="581:54" pos:end="581:67"><operator pos:start="581:54" pos:end="581:54">&amp;</operator><name pos:start="581:55" pos:end="581:67"><name pos:start="581:55" pos:end="581:55">c</name><operator pos:start="581:56" pos:end="581:57">-&gt;</operator><name pos:start="581:58" pos:end="581:63">status</name><index pos:start="581:64" pos:end="581:67">[<expr pos:start="581:65" pos:end="581:66"><name pos:start="581:65" pos:end="581:66">st</name></expr>]</index></name></expr></argument>, <argument pos:start="581:70" pos:end="581:77"><expr pos:start="581:70" pos:end="581:77"><name pos:start="581:70" pos:end="581:70">v</name> <operator pos:start="581:72" pos:end="581:72">&amp;</operator> <literal type="number" pos:start="581:74" pos:end="581:77">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="585:9" pos:end="585:14">break;</break>

    <case pos:start="587:5" pos:end="587:34">case <expr pos:start="587:10" pos:end="587:33"><name pos:start="587:10" pos:end="587:33">AV_CODEC_ID_ADPCM_IMA_WS</name></expr>:</case>

        <if_stmt pos:start="589:9" pos:end="627:9"><if pos:start="589:9" pos:end="609:9">if <condition pos:start="589:12" pos:end="589:32">(<expr pos:start="589:13" pos:end="589:31"><name pos:start="589:13" pos:end="589:26"><name pos:start="589:13" pos:end="589:13">c</name><operator pos:start="589:14" pos:end="589:15">-&gt;</operator><name pos:start="589:16" pos:end="589:26">vqa_version</name></name> <operator pos:start="589:28" pos:end="589:29">==</operator> <literal type="number" pos:start="589:31" pos:end="589:31">3</literal></expr>)</condition> <block pos:start="589:34" pos:end="609:9">{<block_content pos:start="591:13" pos:end="607:13">

            <for pos:start="591:13" pos:end="607:13">for <control pos:start="591:17" pos:end="591:67">(<init pos:start="591:18" pos:end="591:29"><expr pos:start="591:18" pos:end="591:28"><name pos:start="591:18" pos:end="591:24">channel</name> <operator pos:start="591:26" pos:end="591:26">=</operator> <literal type="number" pos:start="591:28" pos:end="591:28">0</literal></expr>;</init> <condition pos:start="591:31" pos:end="591:56"><expr pos:start="591:31" pos:end="591:55"><name pos:start="591:31" pos:end="591:37">channel</name> <operator pos:start="591:39" pos:end="591:39">&lt;</operator> <name pos:start="591:41" pos:end="591:55"><name pos:start="591:41" pos:end="591:45">avctx</name><operator pos:start="591:46" pos:end="591:47">-&gt;</operator><name pos:start="591:48" pos:end="591:55">channels</name></name></expr>;</condition> <incr pos:start="591:58" pos:end="591:66"><expr pos:start="591:58" pos:end="591:66"><name pos:start="591:58" pos:end="591:64">channel</name><operator pos:start="591:65" pos:end="591:66">++</operator></expr></incr>)</control> <block pos:start="591:69" pos:end="607:13">{<block_content pos:start="593:17" pos:end="605:17">

                <decl_stmt pos:start="593:17" pos:end="593:50"><decl pos:start="593:17" pos:end="593:49"><type pos:start="593:17" pos:end="593:25"><name pos:start="593:17" pos:end="593:23">int16_t</name> <modifier pos:start="593:25" pos:end="593:25">*</modifier></type><name pos:start="593:26" pos:end="593:28">smp</name> <init pos:start="593:30" pos:end="593:49">= <expr pos:start="593:32" pos:end="593:49"><name pos:start="593:32" pos:end="593:49"><name pos:start="593:32" pos:end="593:40">samples_p</name><index pos:start="593:41" pos:end="593:49">[<expr pos:start="593:42" pos:end="593:48"><name pos:start="593:42" pos:end="593:48">channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



                <for pos:start="597:17" pos:end="605:17">for <control pos:start="597:21" pos:end="597:52">(<init pos:start="597:22" pos:end="597:40"><expr pos:start="597:22" pos:end="597:39"><name pos:start="597:22" pos:end="597:22">n</name> <operator pos:start="597:24" pos:end="597:24">=</operator> <name pos:start="597:26" pos:end="597:35">nb_samples</name> <operator pos:start="597:37" pos:end="597:37">/</operator> <literal type="number" pos:start="597:39" pos:end="597:39">2</literal></expr>;</init> <condition pos:start="597:42" pos:end="597:47"><expr pos:start="597:42" pos:end="597:46"><name pos:start="597:42" pos:end="597:42">n</name> <operator pos:start="597:44" pos:end="597:44">&gt;</operator> <literal type="number" pos:start="597:46" pos:end="597:46">0</literal></expr>;</condition> <incr pos:start="597:49" pos:end="597:51"><expr pos:start="597:49" pos:end="597:51"><name pos:start="597:49" pos:end="597:49">n</name><operator pos:start="597:50" pos:end="597:51">--</operator></expr></incr>)</control> <block pos:start="597:54" pos:end="605:17">{<block_content pos:start="599:21" pos:end="603:87">

                    <decl_stmt pos:start="599:21" pos:end="599:55"><decl pos:start="599:21" pos:end="599:54"><type pos:start="599:21" pos:end="599:23"><name pos:start="599:21" pos:end="599:23">int</name></type> <name pos:start="599:25" pos:end="599:25">v</name> <init pos:start="599:27" pos:end="599:54">= <expr pos:start="599:29" pos:end="599:54"><call pos:start="599:29" pos:end="599:54"><name pos:start="599:29" pos:end="599:49">bytestream2_get_byteu</name><argument_list pos:start="599:50" pos:end="599:54">(<argument pos:start="599:51" pos:end="599:53"><expr pos:start="599:51" pos:end="599:53"><operator pos:start="599:51" pos:end="599:51">&amp;</operator><name pos:start="599:52" pos:end="599:53">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="601:21" pos:end="601:87"><expr pos:start="601:21" pos:end="601:86"><operator pos:start="601:21" pos:end="601:21">*</operator><name pos:start="601:22" pos:end="601:24">smp</name><operator pos:start="601:25" pos:end="601:26">++</operator> <operator pos:start="601:28" pos:end="601:28">=</operator> <call pos:start="601:30" pos:end="601:86"><name pos:start="601:30" pos:end="601:52">adpcm_ima_expand_nibble</name><argument_list pos:start="601:53" pos:end="601:86">(<argument pos:start="601:54" pos:end="601:72"><expr pos:start="601:54" pos:end="601:72"><operator pos:start="601:54" pos:end="601:54">&amp;</operator><name pos:start="601:55" pos:end="601:72"><name pos:start="601:55" pos:end="601:55">c</name><operator pos:start="601:56" pos:end="601:57">-&gt;</operator><name pos:start="601:58" pos:end="601:63">status</name><index pos:start="601:64" pos:end="601:72">[<expr pos:start="601:65" pos:end="601:71"><name pos:start="601:65" pos:end="601:71">channel</name></expr>]</index></name></expr></argument>, <argument pos:start="601:75" pos:end="601:80"><expr pos:start="601:75" pos:end="601:80"><name pos:start="601:75" pos:end="601:75">v</name> <operator pos:start="601:77" pos:end="601:78">&gt;&gt;</operator> <literal type="number" pos:start="601:80" pos:end="601:80">4</literal></expr></argument>  , <argument pos:start="601:85" pos:end="601:85"><expr pos:start="601:85" pos:end="601:85"><literal type="number" pos:start="601:85" pos:end="601:85">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="603:21" pos:end="603:87"><expr pos:start="603:21" pos:end="603:86"><operator pos:start="603:21" pos:end="603:21">*</operator><name pos:start="603:22" pos:end="603:24">smp</name><operator pos:start="603:25" pos:end="603:26">++</operator> <operator pos:start="603:28" pos:end="603:28">=</operator> <call pos:start="603:30" pos:end="603:86"><name pos:start="603:30" pos:end="603:52">adpcm_ima_expand_nibble</name><argument_list pos:start="603:53" pos:end="603:86">(<argument pos:start="603:54" pos:end="603:72"><expr pos:start="603:54" pos:end="603:72"><operator pos:start="603:54" pos:end="603:54">&amp;</operator><name pos:start="603:55" pos:end="603:72"><name pos:start="603:55" pos:end="603:55">c</name><operator pos:start="603:56" pos:end="603:57">-&gt;</operator><name pos:start="603:58" pos:end="603:63">status</name><index pos:start="603:64" pos:end="603:72">[<expr pos:start="603:65" pos:end="603:71"><name pos:start="603:65" pos:end="603:71">channel</name></expr>]</index></name></expr></argument>, <argument pos:start="603:75" pos:end="603:82"><expr pos:start="603:75" pos:end="603:82"><name pos:start="603:75" pos:end="603:75">v</name> <operator pos:start="603:77" pos:end="603:77">&amp;</operator> <literal type="number" pos:start="603:79" pos:end="603:82">0x0F</literal></expr></argument>, <argument pos:start="603:85" pos:end="603:85"><expr pos:start="603:85" pos:end="603:85"><literal type="number" pos:start="603:85" pos:end="603:85">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="609:11" pos:end="627:9">else <block pos:start="609:16" pos:end="627:9">{<block_content pos:start="611:13" pos:end="625:13">

            <for pos:start="611:13" pos:end="625:13">for <control pos:start="611:17" pos:end="611:48">(<init pos:start="611:18" pos:end="611:36"><expr pos:start="611:18" pos:end="611:35"><name pos:start="611:18" pos:end="611:18">n</name> <operator pos:start="611:20" pos:end="611:20">=</operator> <name pos:start="611:22" pos:end="611:31">nb_samples</name> <operator pos:start="611:33" pos:end="611:33">/</operator> <literal type="number" pos:start="611:35" pos:end="611:35">2</literal></expr>;</init> <condition pos:start="611:38" pos:end="611:43"><expr pos:start="611:38" pos:end="611:42"><name pos:start="611:38" pos:end="611:38">n</name> <operator pos:start="611:40" pos:end="611:40">&gt;</operator> <literal type="number" pos:start="611:42" pos:end="611:42">0</literal></expr>;</condition> <incr pos:start="611:45" pos:end="611:47"><expr pos:start="611:45" pos:end="611:47"><name pos:start="611:45" pos:end="611:45">n</name><operator pos:start="611:46" pos:end="611:47">--</operator></expr></incr>)</control> <block pos:start="611:50" pos:end="625:13">{<block_content pos:start="613:17" pos:end="623:43">

                <for pos:start="613:17" pos:end="621:17">for <control pos:start="613:21" pos:end="613:71">(<init pos:start="613:22" pos:end="613:33"><expr pos:start="613:22" pos:end="613:32"><name pos:start="613:22" pos:end="613:28">channel</name> <operator pos:start="613:30" pos:end="613:30">=</operator> <literal type="number" pos:start="613:32" pos:end="613:32">0</literal></expr>;</init> <condition pos:start="613:35" pos:end="613:60"><expr pos:start="613:35" pos:end="613:59"><name pos:start="613:35" pos:end="613:41">channel</name> <operator pos:start="613:43" pos:end="613:43">&lt;</operator> <name pos:start="613:45" pos:end="613:59"><name pos:start="613:45" pos:end="613:49">avctx</name><operator pos:start="613:50" pos:end="613:51">-&gt;</operator><name pos:start="613:52" pos:end="613:59">channels</name></name></expr>;</condition> <incr pos:start="613:62" pos:end="613:70"><expr pos:start="613:62" pos:end="613:70"><name pos:start="613:62" pos:end="613:68">channel</name><operator pos:start="613:69" pos:end="613:70">++</operator></expr></incr>)</control> <block pos:start="613:73" pos:end="621:17">{<block_content pos:start="615:21" pos:end="619:92">

                    <decl_stmt pos:start="615:21" pos:end="615:55"><decl pos:start="615:21" pos:end="615:54"><type pos:start="615:21" pos:end="615:23"><name pos:start="615:21" pos:end="615:23">int</name></type> <name pos:start="615:25" pos:end="615:25">v</name> <init pos:start="615:27" pos:end="615:54">= <expr pos:start="615:29" pos:end="615:54"><call pos:start="615:29" pos:end="615:54"><name pos:start="615:29" pos:end="615:49">bytestream2_get_byteu</name><argument_list pos:start="615:50" pos:end="615:54">(<argument pos:start="615:51" pos:end="615:53"><expr pos:start="615:51" pos:end="615:53"><operator pos:start="615:51" pos:end="615:51">&amp;</operator><name pos:start="615:52" pos:end="615:53">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="617:21" pos:end="617:92"><expr pos:start="617:21" pos:end="617:91"><operator pos:start="617:21" pos:end="617:21">*</operator><name pos:start="617:22" pos:end="617:28">samples</name><operator pos:start="617:29" pos:end="617:30">++</operator>  <operator pos:start="617:33" pos:end="617:33">=</operator> <call pos:start="617:35" pos:end="617:91"><name pos:start="617:35" pos:end="617:57">adpcm_ima_expand_nibble</name><argument_list pos:start="617:58" pos:end="617:91">(<argument pos:start="617:59" pos:end="617:77"><expr pos:start="617:59" pos:end="617:77"><operator pos:start="617:59" pos:end="617:59">&amp;</operator><name pos:start="617:60" pos:end="617:77"><name pos:start="617:60" pos:end="617:60">c</name><operator pos:start="617:61" pos:end="617:62">-&gt;</operator><name pos:start="617:63" pos:end="617:68">status</name><index pos:start="617:69" pos:end="617:77">[<expr pos:start="617:70" pos:end="617:76"><name pos:start="617:70" pos:end="617:76">channel</name></expr>]</index></name></expr></argument>, <argument pos:start="617:80" pos:end="617:85"><expr pos:start="617:80" pos:end="617:85"><name pos:start="617:80" pos:end="617:80">v</name> <operator pos:start="617:82" pos:end="617:83">&gt;&gt;</operator> <literal type="number" pos:start="617:85" pos:end="617:85">4</literal></expr></argument>  , <argument pos:start="617:90" pos:end="617:90"><expr pos:start="617:90" pos:end="617:90"><literal type="number" pos:start="617:90" pos:end="617:90">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="619:21" pos:end="619:92"><expr pos:start="619:21" pos:end="619:91"><name pos:start="619:21" pos:end="619:31"><name pos:start="619:21" pos:end="619:27">samples</name><index pos:start="619:28" pos:end="619:31">[<expr pos:start="619:29" pos:end="619:30"><name pos:start="619:29" pos:end="619:30">st</name></expr>]</index></name> <operator pos:start="619:33" pos:end="619:33">=</operator> <call pos:start="619:35" pos:end="619:91"><name pos:start="619:35" pos:end="619:57">adpcm_ima_expand_nibble</name><argument_list pos:start="619:58" pos:end="619:91">(<argument pos:start="619:59" pos:end="619:77"><expr pos:start="619:59" pos:end="619:77"><operator pos:start="619:59" pos:end="619:59">&amp;</operator><name pos:start="619:60" pos:end="619:77"><name pos:start="619:60" pos:end="619:60">c</name><operator pos:start="619:61" pos:end="619:62">-&gt;</operator><name pos:start="619:63" pos:end="619:68">status</name><index pos:start="619:69" pos:end="619:77">[<expr pos:start="619:70" pos:end="619:76"><name pos:start="619:70" pos:end="619:76">channel</name></expr>]</index></name></expr></argument>, <argument pos:start="619:80" pos:end="619:87"><expr pos:start="619:80" pos:end="619:87"><name pos:start="619:80" pos:end="619:80">v</name> <operator pos:start="619:82" pos:end="619:82">&amp;</operator> <literal type="number" pos:start="619:84" pos:end="619:87">0x0F</literal></expr></argument>, <argument pos:start="619:90" pos:end="619:90"><expr pos:start="619:90" pos:end="619:90"><literal type="number" pos:start="619:90" pos:end="619:90">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="623:17" pos:end="623:43"><expr pos:start="623:17" pos:end="623:42"><name pos:start="623:17" pos:end="623:23">samples</name> <operator pos:start="623:25" pos:end="623:26">+=</operator> <name pos:start="623:28" pos:end="623:42"><name pos:start="623:28" pos:end="623:32">avctx</name><operator pos:start="623:33" pos:end="623:34">-&gt;</operator><name pos:start="623:35" pos:end="623:42">channels</name></name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="629:9" pos:end="629:43"><expr pos:start="629:9" pos:end="629:42"><call pos:start="629:9" pos:end="629:42"><name pos:start="629:9" pos:end="629:24">bytestream2_seek</name><argument_list pos:start="629:25" pos:end="629:42">(<argument pos:start="629:26" pos:end="629:28"><expr pos:start="629:26" pos:end="629:28"><operator pos:start="629:26" pos:end="629:26">&amp;</operator><name pos:start="629:27" pos:end="629:28">gb</name></expr></argument>, <argument pos:start="629:31" pos:end="629:31"><expr pos:start="629:31" pos:end="629:31"><literal type="number" pos:start="629:31" pos:end="629:31">0</literal></expr></argument>, <argument pos:start="629:34" pos:end="629:41"><expr pos:start="629:34" pos:end="629:41"><name pos:start="629:34" pos:end="629:41">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="631:9" pos:end="631:14">break;</break>

    <case pos:start="633:5" pos:end="633:30">case <expr pos:start="633:10" pos:end="633:29"><name pos:start="633:10" pos:end="633:29">AV_CODEC_ID_ADPCM_XA</name></expr>:</case>

    <block pos:start="635:5" pos:end="663:5">{<block_content pos:start="637:9" pos:end="661:14">

        <decl_stmt pos:start="637:9" pos:end="637:37"><decl pos:start="637:9" pos:end="637:36"><type pos:start="637:9" pos:end="637:17"><name pos:start="637:9" pos:end="637:15">int16_t</name> <modifier pos:start="637:17" pos:end="637:17">*</modifier></type><name pos:start="637:18" pos:end="637:21">out0</name> <init pos:start="637:23" pos:end="637:36">= <expr pos:start="637:25" pos:end="637:36"><name pos:start="637:25" pos:end="637:36"><name pos:start="637:25" pos:end="637:33">samples_p</name><index pos:start="637:34" pos:end="637:36">[<expr pos:start="637:35" pos:end="637:35"><literal type="number" pos:start="637:35" pos:end="637:35">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="639:9" pos:end="639:37"><decl pos:start="639:9" pos:end="639:36"><type pos:start="639:9" pos:end="639:17"><name pos:start="639:9" pos:end="639:15">int16_t</name> <modifier pos:start="639:17" pos:end="639:17">*</modifier></type><name pos:start="639:18" pos:end="639:21">out1</name> <init pos:start="639:23" pos:end="639:36">= <expr pos:start="639:25" pos:end="639:36"><name pos:start="639:25" pos:end="639:36"><name pos:start="639:25" pos:end="639:33">samples_p</name><index pos:start="639:34" pos:end="639:36">[<expr pos:start="639:35" pos:end="639:35"><literal type="number" pos:start="639:35" pos:end="639:35">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="641:9" pos:end="641:63"><decl pos:start="641:9" pos:end="641:62"><type pos:start="641:9" pos:end="641:11"><name pos:start="641:9" pos:end="641:11">int</name></type> <name pos:start="641:13" pos:end="641:29">samples_per_block</name> <init pos:start="641:31" pos:end="641:62">= <expr pos:start="641:33" pos:end="641:62"><literal type="number" pos:start="641:33" pos:end="641:34">28</literal> <operator pos:start="641:36" pos:end="641:36">*</operator> <operator pos:start="641:38" pos:end="641:38">(</operator><literal type="number" pos:start="641:39" pos:end="641:41">3</literal> <operator pos:start="641:41" pos:end="641:41">-</operator> <name pos:start="641:43" pos:end="641:57"><name pos:start="641:43" pos:end="641:47">avctx</name><operator pos:start="641:48" pos:end="641:49">-&gt;</operator><name pos:start="641:50" pos:end="641:57">channels</name></name><operator pos:start="641:58" pos:end="641:58">)</operator> <operator pos:start="641:60" pos:end="641:60">*</operator> <literal type="number" pos:start="641:62" pos:end="641:62">4</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="643:9" pos:end="643:30"><decl pos:start="643:9" pos:end="643:29"><type pos:start="643:9" pos:end="643:11"><name pos:start="643:9" pos:end="643:11">int</name></type> <name pos:start="643:13" pos:end="643:25">sample_offset</name> <init pos:start="643:27" pos:end="643:29">= <expr pos:start="643:29" pos:end="643:29"><literal type="number" pos:start="643:29" pos:end="643:29">0</literal></expr></init></decl>;</decl_stmt>

        <while pos:start="645:9" pos:end="659:9">while <condition pos:start="645:15" pos:end="645:54">(<expr pos:start="645:16" pos:end="645:53"><call pos:start="645:16" pos:end="645:46"><name pos:start="645:16" pos:end="645:41">bytestream2_get_bytes_left</name><argument_list pos:start="645:42" pos:end="645:46">(<argument pos:start="645:43" pos:end="645:45"><expr pos:start="645:43" pos:end="645:45"><operator pos:start="645:43" pos:end="645:43">&amp;</operator><name pos:start="645:44" pos:end="645:45">gb</name></expr></argument>)</argument_list></call> <operator pos:start="645:48" pos:end="645:49">&gt;=</operator> <literal type="number" pos:start="645:51" pos:end="645:53">128</literal></expr>)</condition> <block pos:start="645:56" pos:end="659:9">{<block_content pos:start="647:13" pos:end="657:47">

            <if_stmt pos:start="647:13" pos:end="653:27"><if pos:start="647:13" pos:end="653:27">if <condition pos:start="647:16" pos:end="651:70">(<expr pos:start="647:17" pos:end="651:69"><operator pos:start="647:17" pos:end="647:17">(</operator><name pos:start="647:18" pos:end="647:20">ret</name> <operator pos:start="647:22" pos:end="647:22">=</operator> <call pos:start="647:24" pos:end="651:64"><name pos:start="647:24" pos:end="647:32">xa_decode</name><argument_list pos:start="647:33" pos:end="651:64">(<argument pos:start="647:34" pos:end="647:38"><expr pos:start="647:34" pos:end="647:38"><name pos:start="647:34" pos:end="647:38">avctx</name></expr></argument>, <argument pos:start="647:41" pos:end="647:44"><expr pos:start="647:41" pos:end="647:44"><name pos:start="647:41" pos:end="647:44">out0</name></expr></argument>, <argument pos:start="647:47" pos:end="647:50"><expr pos:start="647:47" pos:end="647:50"><name pos:start="647:47" pos:end="647:50">out1</name></expr></argument>, <argument pos:start="647:53" pos:end="647:79"><expr pos:start="647:53" pos:end="647:79"><name pos:start="647:53" pos:end="647:55">buf</name> <operator pos:start="647:57" pos:end="647:57">+</operator> <call pos:start="647:59" pos:end="647:79"><name pos:start="647:59" pos:end="647:74">bytestream2_tell</name><argument_list pos:start="647:75" pos:end="647:79">(<argument pos:start="647:76" pos:end="647:78"><expr pos:start="647:76" pos:end="647:78"><operator pos:start="647:76" pos:end="647:76">&amp;</operator><name pos:start="647:77" pos:end="647:78">gb</name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="649:34" pos:end="649:46"><expr pos:start="649:34" pos:end="649:46"><operator pos:start="649:34" pos:end="649:34">&amp;</operator><name pos:start="649:35" pos:end="649:46"><name pos:start="649:35" pos:end="649:35">c</name><operator pos:start="649:36" pos:end="649:37">-&gt;</operator><name pos:start="649:38" pos:end="649:43">status</name><index pos:start="649:44" pos:end="649:46">[<expr pos:start="649:45" pos:end="649:45"><literal type="number" pos:start="649:45" pos:end="649:45">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="649:49" pos:end="649:61"><expr pos:start="649:49" pos:end="649:61"><operator pos:start="649:49" pos:end="649:49">&amp;</operator><name pos:start="649:50" pos:end="649:61"><name pos:start="649:50" pos:end="649:50">c</name><operator pos:start="649:51" pos:end="649:52">-&gt;</operator><name pos:start="649:53" pos:end="649:58">status</name><index pos:start="649:59" pos:end="649:61">[<expr pos:start="649:60" pos:end="649:60"><literal type="number" pos:start="649:60" pos:end="649:60">1</literal></expr>]</index></name></expr></argument>,

                                 <argument pos:start="651:34" pos:end="651:48"><expr pos:start="651:34" pos:end="651:48"><name pos:start="651:34" pos:end="651:48"><name pos:start="651:34" pos:end="651:38">avctx</name><operator pos:start="651:39" pos:end="651:40">-&gt;</operator><name pos:start="651:41" pos:end="651:48">channels</name></name></expr></argument>, <argument pos:start="651:51" pos:end="651:63"><expr pos:start="651:51" pos:end="651:63"><name pos:start="651:51" pos:end="651:63">sample_offset</name></expr></argument>)</argument_list></call><operator pos:start="651:65" pos:end="651:65">)</operator> <operator pos:start="651:67" pos:end="651:67">&lt;</operator> <literal type="number" pos:start="651:69" pos:end="651:69">0</literal></expr>)</condition><block type="pseudo" pos:start="653:17" pos:end="653:27"><block_content pos:start="653:17" pos:end="653:27">

                <return pos:start="653:17" pos:end="653:27">return <expr pos:start="653:24" pos:end="653:26"><name pos:start="653:24" pos:end="653:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="655:13" pos:end="655:40"><expr pos:start="655:13" pos:end="655:39"><call pos:start="655:13" pos:end="655:39"><name pos:start="655:13" pos:end="655:29">bytestream2_skipu</name><argument_list pos:start="655:30" pos:end="655:39">(<argument pos:start="655:31" pos:end="655:33"><expr pos:start="655:31" pos:end="655:33"><operator pos:start="655:31" pos:end="655:31">&amp;</operator><name pos:start="655:32" pos:end="655:33">gb</name></expr></argument>, <argument pos:start="655:36" pos:end="655:38"><expr pos:start="655:36" pos:end="655:38"><literal type="number" pos:start="655:36" pos:end="655:38">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="657:13" pos:end="657:47"><expr pos:start="657:13" pos:end="657:46"><name pos:start="657:13" pos:end="657:25">sample_offset</name> <operator pos:start="657:27" pos:end="657:28">+=</operator> <name pos:start="657:30" pos:end="657:46">samples_per_block</name></expr>;</expr_stmt>

        </block_content>}</block></while>

        <break pos:start="661:9" pos:end="661:14">break;</break>

    </block_content>}</block>

    <case pos:start="665:5" pos:end="665:39">case <expr pos:start="665:10" pos:end="665:38"><name pos:start="665:10" pos:end="665:38">AV_CODEC_ID_ADPCM_IMA_EA_EACS</name></expr>:</case>

        <for pos:start="667:9" pos:end="681:9">for <control pos:start="667:13" pos:end="667:29">(<init pos:start="667:14" pos:end="667:17"><expr pos:start="667:14" pos:end="667:16"><name pos:start="667:14" pos:end="667:14">i</name><operator pos:start="667:15" pos:end="667:15">=</operator><literal type="number" pos:start="667:16" pos:end="667:16">0</literal></expr>;</init> <condition pos:start="667:19" pos:end="667:24"><expr pos:start="667:19" pos:end="667:23"><name pos:start="667:19" pos:end="667:19">i</name><operator pos:start="667:20" pos:end="667:21">&lt;=</operator><name pos:start="667:22" pos:end="667:23">st</name></expr>;</condition> <incr pos:start="667:26" pos:end="667:28"><expr pos:start="667:26" pos:end="667:28"><name pos:start="667:26" pos:end="667:26">i</name><operator pos:start="667:27" pos:end="667:28">++</operator></expr></incr>)</control> <block pos:start="667:31" pos:end="681:9">{<block_content pos:start="669:13" pos:end="679:13">

            <expr_stmt pos:start="669:13" pos:end="669:65"><expr pos:start="669:13" pos:end="669:64"><name pos:start="669:13" pos:end="669:24"><name pos:start="669:13" pos:end="669:13">c</name><operator pos:start="669:14" pos:end="669:15">-&gt;</operator><name pos:start="669:16" pos:end="669:21">status</name><index pos:start="669:22" pos:end="669:24">[<expr pos:start="669:23" pos:end="669:23"><name pos:start="669:23" pos:end="669:23">i</name></expr>]</index></name><operator pos:start="669:25" pos:end="669:25">.</operator><name pos:start="669:26" pos:end="669:35">step_index</name> <operator pos:start="669:37" pos:end="669:37">=</operator> <call pos:start="669:39" pos:end="669:64"><name pos:start="669:39" pos:end="669:59">bytestream2_get_le32u</name><argument_list pos:start="669:60" pos:end="669:64">(<argument pos:start="669:61" pos:end="669:63"><expr pos:start="669:61" pos:end="669:63"><operator pos:start="669:61" pos:end="669:61">&amp;</operator><name pos:start="669:62" pos:end="669:63">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="671:13" pos:end="679:13"><if pos:start="671:13" pos:end="679:13">if <condition pos:start="671:16" pos:end="671:46">(<expr pos:start="671:17" pos:end="671:45"><name pos:start="671:17" pos:end="671:28"><name pos:start="671:17" pos:end="671:17">c</name><operator pos:start="671:18" pos:end="671:19">-&gt;</operator><name pos:start="671:20" pos:end="671:25">status</name><index pos:start="671:26" pos:end="671:28">[<expr pos:start="671:27" pos:end="671:27"><name pos:start="671:27" pos:end="671:27">i</name></expr>]</index></name><operator pos:start="671:29" pos:end="671:29">.</operator><name pos:start="671:30" pos:end="671:39">step_index</name> <operator pos:start="671:41" pos:end="671:41">&gt;</operator> <literal type="number" pos:start="671:43" pos:end="671:45">88u</literal></expr>)</condition> <block pos:start="671:48" pos:end="679:13">{<block_content pos:start="673:17" pos:end="677:43">

                <expr_stmt pos:start="673:17" pos:end="675:51"><expr pos:start="673:17" pos:end="675:50"><call pos:start="673:17" pos:end="675:50"><name pos:start="673:17" pos:end="673:22">av_log</name><argument_list pos:start="673:23" pos:end="675:50">(<argument pos:start="673:24" pos:end="673:28"><expr pos:start="673:24" pos:end="673:28"><name pos:start="673:24" pos:end="673:28">avctx</name></expr></argument>, <argument pos:start="673:31" pos:end="673:42"><expr pos:start="673:31" pos:end="673:42"><name pos:start="673:31" pos:end="673:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="673:45" pos:end="673:74"><expr pos:start="673:45" pos:end="673:74"><literal type="string" pos:start="673:45" pos:end="673:74">"ERROR: step_index[%d] = %i\n"</literal></expr></argument>,

                       <argument pos:start="675:24" pos:end="675:24"><expr pos:start="675:24" pos:end="675:24"><name pos:start="675:24" pos:end="675:24">i</name></expr></argument>, <argument pos:start="675:27" pos:end="675:49"><expr pos:start="675:27" pos:end="675:49"><name pos:start="675:27" pos:end="675:38"><name pos:start="675:27" pos:end="675:27">c</name><operator pos:start="675:28" pos:end="675:29">-&gt;</operator><name pos:start="675:30" pos:end="675:35">status</name><index pos:start="675:36" pos:end="675:38">[<expr pos:start="675:37" pos:end="675:37"><name pos:start="675:37" pos:end="675:37">i</name></expr>]</index></name><operator pos:start="675:39" pos:end="675:39">.</operator><name pos:start="675:40" pos:end="675:49">step_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="677:17" pos:end="677:43">return <expr pos:start="677:24" pos:end="677:42"><name pos:start="677:24" pos:end="677:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <for pos:start="683:9" pos:end="685:65">for <control pos:start="683:13" pos:end="683:29">(<init pos:start="683:14" pos:end="683:17"><expr pos:start="683:14" pos:end="683:16"><name pos:start="683:14" pos:end="683:14">i</name><operator pos:start="683:15" pos:end="683:15">=</operator><literal type="number" pos:start="683:16" pos:end="683:16">0</literal></expr>;</init> <condition pos:start="683:19" pos:end="683:24"><expr pos:start="683:19" pos:end="683:23"><name pos:start="683:19" pos:end="683:19">i</name><operator pos:start="683:20" pos:end="683:21">&lt;=</operator><name pos:start="683:22" pos:end="683:23">st</name></expr>;</condition> <incr pos:start="683:26" pos:end="683:28"><expr pos:start="683:26" pos:end="683:28"><name pos:start="683:26" pos:end="683:26">i</name><operator pos:start="683:27" pos:end="683:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="685:13" pos:end="685:65"><block_content pos:start="685:13" pos:end="685:65">

            <expr_stmt pos:start="685:13" pos:end="685:65"><expr pos:start="685:13" pos:end="685:64"><name pos:start="685:13" pos:end="685:24"><name pos:start="685:13" pos:end="685:13">c</name><operator pos:start="685:14" pos:end="685:15">-&gt;</operator><name pos:start="685:16" pos:end="685:21">status</name><index pos:start="685:22" pos:end="685:24">[<expr pos:start="685:23" pos:end="685:23"><name pos:start="685:23" pos:end="685:23">i</name></expr>]</index></name><operator pos:start="685:25" pos:end="685:25">.</operator><name pos:start="685:26" pos:end="685:34">predictor</name>  <operator pos:start="685:37" pos:end="685:37">=</operator> <call pos:start="685:39" pos:end="685:64"><name pos:start="685:39" pos:end="685:59">bytestream2_get_le32u</name><argument_list pos:start="685:60" pos:end="685:64">(<argument pos:start="685:61" pos:end="685:63"><expr pos:start="685:61" pos:end="685:63"><operator pos:start="685:61" pos:end="685:61">&amp;</operator><name pos:start="685:62" pos:end="685:63">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="689:9" pos:end="697:9">for <control pos:start="689:13" pos:end="689:52">(<init pos:start="689:14" pos:end="689:40"><expr pos:start="689:14" pos:end="689:39"><name pos:start="689:14" pos:end="689:14">n</name> <operator pos:start="689:16" pos:end="689:16">=</operator> <name pos:start="689:18" pos:end="689:27">nb_samples</name> <operator pos:start="689:29" pos:end="689:30">&gt;&gt;</operator> <operator pos:start="689:32" pos:end="689:32">(</operator><literal type="number" pos:start="689:33" pos:end="689:35">1</literal> <operator pos:start="689:35" pos:end="689:35">-</operator> <name pos:start="689:37" pos:end="689:38">st</name><operator pos:start="689:39" pos:end="689:39">)</operator></expr>;</init> <condition pos:start="689:42" pos:end="689:47"><expr pos:start="689:42" pos:end="689:46"><name pos:start="689:42" pos:end="689:42">n</name> <operator pos:start="689:44" pos:end="689:44">&gt;</operator> <literal type="number" pos:start="689:46" pos:end="689:46">0</literal></expr>;</condition> <incr pos:start="689:49" pos:end="689:51"><expr pos:start="689:49" pos:end="689:51"><name pos:start="689:49" pos:end="689:49">n</name><operator pos:start="689:50" pos:end="689:51">--</operator></expr></incr>)</control> <block pos:start="689:54" pos:end="697:9">{<block_content pos:start="691:13" pos:end="695:81">

            <decl_stmt pos:start="691:13" pos:end="691:52"><decl pos:start="691:13" pos:end="691:51"><type pos:start="691:13" pos:end="691:15"><name pos:start="691:13" pos:end="691:15">int</name></type> <name pos:start="691:17" pos:end="691:20">byte</name>   <init pos:start="691:24" pos:end="691:51">= <expr pos:start="691:26" pos:end="691:51"><call pos:start="691:26" pos:end="691:51"><name pos:start="691:26" pos:end="691:46">bytestream2_get_byteu</name><argument_list pos:start="691:47" pos:end="691:51">(<argument pos:start="691:48" pos:end="691:50"><expr pos:start="691:48" pos:end="691:50"><operator pos:start="691:48" pos:end="691:48">&amp;</operator><name pos:start="691:49" pos:end="691:50">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="693:13" pos:end="693:81"><expr pos:start="693:13" pos:end="693:80"><operator pos:start="693:13" pos:end="693:13">*</operator><name pos:start="693:14" pos:end="693:20">samples</name><operator pos:start="693:21" pos:end="693:22">++</operator> <operator pos:start="693:24" pos:end="693:24">=</operator> <call pos:start="693:26" pos:end="693:80"><name pos:start="693:26" pos:end="693:48">adpcm_ima_expand_nibble</name><argument_list pos:start="693:49" pos:end="693:80">(<argument pos:start="693:50" pos:end="693:62"><expr pos:start="693:50" pos:end="693:62"><operator pos:start="693:50" pos:end="693:50">&amp;</operator><name pos:start="693:51" pos:end="693:62"><name pos:start="693:51" pos:end="693:51">c</name><operator pos:start="693:52" pos:end="693:53">-&gt;</operator><name pos:start="693:54" pos:end="693:59">status</name><index pos:start="693:60" pos:end="693:62">[<expr pos:start="693:61" pos:end="693:61"><literal type="number" pos:start="693:61" pos:end="693:61">0</literal></expr>]</index></name></expr></argument>,  <argument pos:start="693:66" pos:end="693:74"><expr pos:start="693:66" pos:end="693:74"><name pos:start="693:66" pos:end="693:69">byte</name> <operator pos:start="693:71" pos:end="693:72">&gt;&gt;</operator> <literal type="number" pos:start="693:74" pos:end="693:74">4</literal></expr></argument>,   <argument pos:start="693:79" pos:end="693:79"><expr pos:start="693:79" pos:end="693:79"><literal type="number" pos:start="693:79" pos:end="693:79">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="695:13" pos:end="695:81"><expr pos:start="695:13" pos:end="695:80"><operator pos:start="695:13" pos:end="695:13">*</operator><name pos:start="695:14" pos:end="695:20">samples</name><operator pos:start="695:21" pos:end="695:22">++</operator> <operator pos:start="695:24" pos:end="695:24">=</operator> <call pos:start="695:26" pos:end="695:80"><name pos:start="695:26" pos:end="695:48">adpcm_ima_expand_nibble</name><argument_list pos:start="695:49" pos:end="695:80">(<argument pos:start="695:50" pos:end="695:63"><expr pos:start="695:50" pos:end="695:63"><operator pos:start="695:50" pos:end="695:50">&amp;</operator><name pos:start="695:51" pos:end="695:63"><name pos:start="695:51" pos:end="695:51">c</name><operator pos:start="695:52" pos:end="695:53">-&gt;</operator><name pos:start="695:54" pos:end="695:59">status</name><index pos:start="695:60" pos:end="695:63">[<expr pos:start="695:61" pos:end="695:62"><name pos:start="695:61" pos:end="695:62">st</name></expr>]</index></name></expr></argument>, <argument pos:start="695:66" pos:end="695:76"><expr pos:start="695:66" pos:end="695:76"><name pos:start="695:66" pos:end="695:69">byte</name> <operator pos:start="695:71" pos:end="695:71">&amp;</operator> <literal type="number" pos:start="695:73" pos:end="695:76">0x0F</literal></expr></argument>, <argument pos:start="695:79" pos:end="695:79"><expr pos:start="695:79" pos:end="695:79"><literal type="number" pos:start="695:79" pos:end="695:79">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="699:9" pos:end="699:14">break;</break>

    <case pos:start="701:5" pos:end="701:39">case <expr pos:start="701:10" pos:end="701:38"><name pos:start="701:10" pos:end="701:38">AV_CODEC_ID_ADPCM_IMA_EA_SEAD</name></expr>:</case>

        <for pos:start="703:9" pos:end="711:9">for <control pos:start="703:13" pos:end="703:52">(<init pos:start="703:14" pos:end="703:40"><expr pos:start="703:14" pos:end="703:39"><name pos:start="703:14" pos:end="703:14">n</name> <operator pos:start="703:16" pos:end="703:16">=</operator> <name pos:start="703:18" pos:end="703:27">nb_samples</name> <operator pos:start="703:29" pos:end="703:30">&gt;&gt;</operator> <operator pos:start="703:32" pos:end="703:32">(</operator><literal type="number" pos:start="703:33" pos:end="703:35">1</literal> <operator pos:start="703:35" pos:end="703:35">-</operator> <name pos:start="703:37" pos:end="703:38">st</name><operator pos:start="703:39" pos:end="703:39">)</operator></expr>;</init> <condition pos:start="703:42" pos:end="703:47"><expr pos:start="703:42" pos:end="703:46"><name pos:start="703:42" pos:end="703:42">n</name> <operator pos:start="703:44" pos:end="703:44">&gt;</operator> <literal type="number" pos:start="703:46" pos:end="703:46">0</literal></expr>;</condition> <incr pos:start="703:49" pos:end="703:51"><expr pos:start="703:49" pos:end="703:51"><name pos:start="703:49" pos:end="703:49">n</name><operator pos:start="703:50" pos:end="703:51">--</operator></expr></incr>)</control> <block pos:start="703:54" pos:end="711:9">{<block_content pos:start="705:13" pos:end="709:81">

            <decl_stmt pos:start="705:13" pos:end="705:50"><decl pos:start="705:13" pos:end="705:49"><type pos:start="705:13" pos:end="705:15"><name pos:start="705:13" pos:end="705:15">int</name></type> <name pos:start="705:17" pos:end="705:20">byte</name> <init pos:start="705:22" pos:end="705:49">= <expr pos:start="705:24" pos:end="705:49"><call pos:start="705:24" pos:end="705:49"><name pos:start="705:24" pos:end="705:44">bytestream2_get_byteu</name><argument_list pos:start="705:45" pos:end="705:49">(<argument pos:start="705:46" pos:end="705:48"><expr pos:start="705:46" pos:end="705:48"><operator pos:start="705:46" pos:end="705:46">&amp;</operator><name pos:start="705:47" pos:end="705:48">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="707:13" pos:end="707:81"><expr pos:start="707:13" pos:end="707:80"><operator pos:start="707:13" pos:end="707:13">*</operator><name pos:start="707:14" pos:end="707:20">samples</name><operator pos:start="707:21" pos:end="707:22">++</operator> <operator pos:start="707:24" pos:end="707:24">=</operator> <call pos:start="707:26" pos:end="707:80"><name pos:start="707:26" pos:end="707:48">adpcm_ima_expand_nibble</name><argument_list pos:start="707:49" pos:end="707:80">(<argument pos:start="707:50" pos:end="707:62"><expr pos:start="707:50" pos:end="707:62"><operator pos:start="707:50" pos:end="707:50">&amp;</operator><name pos:start="707:51" pos:end="707:62"><name pos:start="707:51" pos:end="707:51">c</name><operator pos:start="707:52" pos:end="707:53">-&gt;</operator><name pos:start="707:54" pos:end="707:59">status</name><index pos:start="707:60" pos:end="707:62">[<expr pos:start="707:61" pos:end="707:61"><literal type="number" pos:start="707:61" pos:end="707:61">0</literal></expr>]</index></name></expr></argument>,  <argument pos:start="707:66" pos:end="707:74"><expr pos:start="707:66" pos:end="707:74"><name pos:start="707:66" pos:end="707:69">byte</name> <operator pos:start="707:71" pos:end="707:72">&gt;&gt;</operator> <literal type="number" pos:start="707:74" pos:end="707:74">4</literal></expr></argument>,   <argument pos:start="707:79" pos:end="707:79"><expr pos:start="707:79" pos:end="707:79"><literal type="number" pos:start="707:79" pos:end="707:79">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="709:13" pos:end="709:81"><expr pos:start="709:13" pos:end="709:80"><operator pos:start="709:13" pos:end="709:13">*</operator><name pos:start="709:14" pos:end="709:20">samples</name><operator pos:start="709:21" pos:end="709:22">++</operator> <operator pos:start="709:24" pos:end="709:24">=</operator> <call pos:start="709:26" pos:end="709:80"><name pos:start="709:26" pos:end="709:48">adpcm_ima_expand_nibble</name><argument_list pos:start="709:49" pos:end="709:80">(<argument pos:start="709:50" pos:end="709:63"><expr pos:start="709:50" pos:end="709:63"><operator pos:start="709:50" pos:end="709:50">&amp;</operator><name pos:start="709:51" pos:end="709:63"><name pos:start="709:51" pos:end="709:51">c</name><operator pos:start="709:52" pos:end="709:53">-&gt;</operator><name pos:start="709:54" pos:end="709:59">status</name><index pos:start="709:60" pos:end="709:63">[<expr pos:start="709:61" pos:end="709:62"><name pos:start="709:61" pos:end="709:62">st</name></expr>]</index></name></expr></argument>, <argument pos:start="709:66" pos:end="709:76"><expr pos:start="709:66" pos:end="709:76"><name pos:start="709:66" pos:end="709:69">byte</name> <operator pos:start="709:71" pos:end="709:71">&amp;</operator> <literal type="number" pos:start="709:73" pos:end="709:76">0x0F</literal></expr></argument>, <argument pos:start="709:79" pos:end="709:79"><expr pos:start="709:79" pos:end="709:79"><literal type="number" pos:start="709:79" pos:end="709:79">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="713:9" pos:end="713:14">break;</break>

    <case pos:start="715:5" pos:end="715:30">case <expr pos:start="715:10" pos:end="715:29"><name pos:start="715:10" pos:end="715:29">AV_CODEC_ID_ADPCM_EA</name></expr>:</case>

    <block pos:start="717:5" pos:end="823:5">{<block_content pos:start="719:9" pos:end="821:14">

        <decl_stmt pos:start="719:9" pos:end="719:56"><decl pos:start="719:9" pos:end="719:32"><type pos:start="719:9" pos:end="719:11"><name pos:start="719:9" pos:end="719:11">int</name></type> <name pos:start="719:13" pos:end="719:32">previous_left_sample</name></decl>, <decl pos:start="719:35" pos:end="719:55"><type ref="prev" pos:start="719:9" pos:end="719:11"/><name pos:start="719:35" pos:end="719:55">previous_right_sample</name></decl>;</decl_stmt>

        <decl_stmt pos:start="721:9" pos:end="721:54"><decl pos:start="721:9" pos:end="721:31"><type pos:start="721:9" pos:end="721:11"><name pos:start="721:9" pos:end="721:11">int</name></type> <name pos:start="721:13" pos:end="721:31">current_left_sample</name></decl>, <decl pos:start="721:34" pos:end="721:53"><type ref="prev" pos:start="721:9" pos:end="721:11"/><name pos:start="721:34" pos:end="721:53">current_right_sample</name></decl>;</decl_stmt>

        <decl_stmt pos:start="723:9" pos:end="723:48"><decl pos:start="723:9" pos:end="723:28"><type pos:start="723:9" pos:end="723:11"><name pos:start="723:9" pos:end="723:11">int</name></type> <name pos:start="723:13" pos:end="723:28">next_left_sample</name></decl>, <decl pos:start="723:31" pos:end="723:47"><type ref="prev" pos:start="723:9" pos:end="723:11"/><name pos:start="723:31" pos:end="723:47">next_right_sample</name></decl>;</decl_stmt>

        <decl_stmt pos:start="725:9" pos:end="725:47"><decl pos:start="725:9" pos:end="725:19"><type pos:start="725:9" pos:end="725:11"><name pos:start="725:9" pos:end="725:11">int</name></type> <name pos:start="725:13" pos:end="725:19">coeff1l</name></decl>, <decl pos:start="725:22" pos:end="725:28"><type ref="prev" pos:start="725:9" pos:end="725:11"/><name pos:start="725:22" pos:end="725:28">coeff2l</name></decl>, <decl pos:start="725:31" pos:end="725:37"><type ref="prev" pos:start="725:9" pos:end="725:11"/><name pos:start="725:31" pos:end="725:37">coeff1r</name></decl>, <decl pos:start="725:40" pos:end="725:46"><type ref="prev" pos:start="725:9" pos:end="725:11"/><name pos:start="725:40" pos:end="725:46">coeff2r</name></decl>;</decl_stmt>

        <decl_stmt pos:start="727:9" pos:end="727:36"><decl pos:start="727:9" pos:end="727:22"><type pos:start="727:9" pos:end="727:11"><name pos:start="727:9" pos:end="727:11">int</name></type> <name pos:start="727:13" pos:end="727:22">shift_left</name></decl>, <decl pos:start="727:25" pos:end="727:35"><type ref="prev" pos:start="727:9" pos:end="727:11"/><name pos:start="727:25" pos:end="727:35">shift_right</name></decl>;</decl_stmt>



        <comment type="block" pos:start="731:9" pos:end="733:44">/* Each EA ADPCM frame has a 12-byte header followed by 30-byte pieces,

           each coding 28 stereo samples. */</comment>



        <if_stmt pos:start="737:9" pos:end="739:39"><if pos:start="737:9" pos:end="739:39">if<condition pos:start="737:11" pos:end="737:32">(<expr pos:start="737:12" pos:end="737:31"><name pos:start="737:12" pos:end="737:26"><name pos:start="737:12" pos:end="737:16">avctx</name><operator pos:start="737:17" pos:end="737:18">-&gt;</operator><name pos:start="737:19" pos:end="737:26">channels</name></name> <operator pos:start="737:28" pos:end="737:29">!=</operator> <literal type="number" pos:start="737:31" pos:end="737:31">2</literal></expr>)</condition><block type="pseudo" pos:start="739:13" pos:end="739:39"><block_content pos:start="739:13" pos:end="739:39">

            <return pos:start="739:13" pos:end="739:39">return <expr pos:start="739:20" pos:end="739:38"><name pos:start="739:20" pos:end="739:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="743:9" pos:end="743:76"><expr pos:start="743:9" pos:end="743:75"><name pos:start="743:9" pos:end="743:27">current_left_sample</name>   <operator pos:start="743:31" pos:end="743:31">=</operator> <call pos:start="743:33" pos:end="743:75"><name pos:start="743:33" pos:end="743:43">sign_extend</name><argument_list pos:start="743:44" pos:end="743:75">(<argument pos:start="743:45" pos:end="743:70"><expr pos:start="743:45" pos:end="743:70"><call pos:start="743:45" pos:end="743:70"><name pos:start="743:45" pos:end="743:65">bytestream2_get_le16u</name><argument_list pos:start="743:66" pos:end="743:70">(<argument pos:start="743:67" pos:end="743:69"><expr pos:start="743:67" pos:end="743:69"><operator pos:start="743:67" pos:end="743:67">&amp;</operator><name pos:start="743:68" pos:end="743:69">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="743:73" pos:end="743:74"><expr pos:start="743:73" pos:end="743:74"><literal type="number" pos:start="743:73" pos:end="743:74">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="745:9" pos:end="745:76"><expr pos:start="745:9" pos:end="745:75"><name pos:start="745:9" pos:end="745:28">previous_left_sample</name>  <operator pos:start="745:31" pos:end="745:31">=</operator> <call pos:start="745:33" pos:end="745:75"><name pos:start="745:33" pos:end="745:43">sign_extend</name><argument_list pos:start="745:44" pos:end="745:75">(<argument pos:start="745:45" pos:end="745:70"><expr pos:start="745:45" pos:end="745:70"><call pos:start="745:45" pos:end="745:70"><name pos:start="745:45" pos:end="745:65">bytestream2_get_le16u</name><argument_list pos:start="745:66" pos:end="745:70">(<argument pos:start="745:67" pos:end="745:69"><expr pos:start="745:67" pos:end="745:69"><operator pos:start="745:67" pos:end="745:67">&amp;</operator><name pos:start="745:68" pos:end="745:69">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="745:73" pos:end="745:74"><expr pos:start="745:73" pos:end="745:74"><literal type="number" pos:start="745:73" pos:end="745:74">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="747:9" pos:end="747:76"><expr pos:start="747:9" pos:end="747:75"><name pos:start="747:9" pos:end="747:28">current_right_sample</name>  <operator pos:start="747:31" pos:end="747:31">=</operator> <call pos:start="747:33" pos:end="747:75"><name pos:start="747:33" pos:end="747:43">sign_extend</name><argument_list pos:start="747:44" pos:end="747:75">(<argument pos:start="747:45" pos:end="747:70"><expr pos:start="747:45" pos:end="747:70"><call pos:start="747:45" pos:end="747:70"><name pos:start="747:45" pos:end="747:65">bytestream2_get_le16u</name><argument_list pos:start="747:66" pos:end="747:70">(<argument pos:start="747:67" pos:end="747:69"><expr pos:start="747:67" pos:end="747:69"><operator pos:start="747:67" pos:end="747:67">&amp;</operator><name pos:start="747:68" pos:end="747:69">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="747:73" pos:end="747:74"><expr pos:start="747:73" pos:end="747:74"><literal type="number" pos:start="747:73" pos:end="747:74">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="749:9" pos:end="749:76"><expr pos:start="749:9" pos:end="749:75"><name pos:start="749:9" pos:end="749:29">previous_right_sample</name> <operator pos:start="749:31" pos:end="749:31">=</operator> <call pos:start="749:33" pos:end="749:75"><name pos:start="749:33" pos:end="749:43">sign_extend</name><argument_list pos:start="749:44" pos:end="749:75">(<argument pos:start="749:45" pos:end="749:70"><expr pos:start="749:45" pos:end="749:70"><call pos:start="749:45" pos:end="749:70"><name pos:start="749:45" pos:end="749:65">bytestream2_get_le16u</name><argument_list pos:start="749:66" pos:end="749:70">(<argument pos:start="749:67" pos:end="749:69"><expr pos:start="749:67" pos:end="749:69"><operator pos:start="749:67" pos:end="749:67">&amp;</operator><name pos:start="749:68" pos:end="749:69">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="749:73" pos:end="749:74"><expr pos:start="749:73" pos:end="749:74"><literal type="number" pos:start="749:73" pos:end="749:74">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <for pos:start="753:9" pos:end="813:9">for <control pos:start="753:13" pos:end="753:60">(<init pos:start="753:14" pos:end="753:24"><expr pos:start="753:14" pos:end="753:23"><name pos:start="753:14" pos:end="753:19">count1</name> <operator pos:start="753:21" pos:end="753:21">=</operator> <literal type="number" pos:start="753:23" pos:end="753:23">0</literal></expr>;</init> <condition pos:start="753:26" pos:end="753:50"><expr pos:start="753:26" pos:end="753:49"><name pos:start="753:26" pos:end="753:31">count1</name> <operator pos:start="753:33" pos:end="753:33">&lt;</operator> <name pos:start="753:35" pos:end="753:44">nb_samples</name> <operator pos:start="753:46" pos:end="753:46">/</operator> <literal type="number" pos:start="753:48" pos:end="753:49">28</literal></expr>;</condition> <incr pos:start="753:52" pos:end="753:59"><expr pos:start="753:52" pos:end="753:59"><name pos:start="753:52" pos:end="753:57">count1</name><operator pos:start="753:58" pos:end="753:59">++</operator></expr></incr>)</control> <block pos:start="753:62" pos:end="813:9">{<block_content pos:start="755:13" pos:end="811:13">

            <decl_stmt pos:start="755:13" pos:end="755:50"><decl pos:start="755:13" pos:end="755:49"><type pos:start="755:13" pos:end="755:15"><name pos:start="755:13" pos:end="755:15">int</name></type> <name pos:start="755:17" pos:end="755:20">byte</name> <init pos:start="755:22" pos:end="755:49">= <expr pos:start="755:24" pos:end="755:49"><call pos:start="755:24" pos:end="755:49"><name pos:start="755:24" pos:end="755:44">bytestream2_get_byteu</name><argument_list pos:start="755:45" pos:end="755:49">(<argument pos:start="755:46" pos:end="755:48"><expr pos:start="755:46" pos:end="755:48"><operator pos:start="755:46" pos:end="755:46">&amp;</operator><name pos:start="755:47" pos:end="755:48">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="757:13" pos:end="757:56"><expr pos:start="757:13" pos:end="757:55"><name pos:start="757:13" pos:end="757:19">coeff1l</name> <operator pos:start="757:21" pos:end="757:21">=</operator> <name pos:start="757:23" pos:end="757:55"><name pos:start="757:23" pos:end="757:36">ea_adpcm_table</name><index pos:start="757:37" pos:end="757:55">[ <expr pos:start="757:39" pos:end="757:47"><name pos:start="757:39" pos:end="757:42">byte</name> <operator pos:start="757:44" pos:end="757:45">&gt;&gt;</operator> <literal type="number" pos:start="757:47" pos:end="757:47">4</literal></expr>       ]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="759:13" pos:end="759:56"><expr pos:start="759:13" pos:end="759:55"><name pos:start="759:13" pos:end="759:19">coeff2l</name> <operator pos:start="759:21" pos:end="759:21">=</operator> <name pos:start="759:23" pos:end="759:55"><name pos:start="759:23" pos:end="759:36">ea_adpcm_table</name><index pos:start="759:37" pos:end="759:55">[<expr pos:start="759:38" pos:end="759:54"><operator pos:start="759:38" pos:end="759:38">(</operator><name pos:start="759:39" pos:end="759:42">byte</name> <operator pos:start="759:44" pos:end="759:45">&gt;&gt;</operator> <literal type="number" pos:start="759:47" pos:end="759:47">4</literal>  <operator pos:start="759:50" pos:end="759:50">)</operator> <operator pos:start="759:52" pos:end="759:52">+</operator> <literal type="number" pos:start="759:54" pos:end="759:54">4</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="761:13" pos:end="761:51"><expr pos:start="761:13" pos:end="761:50"><name pos:start="761:13" pos:end="761:19">coeff1r</name> <operator pos:start="761:21" pos:end="761:21">=</operator> <name pos:start="761:23" pos:end="761:50"><name pos:start="761:23" pos:end="761:36">ea_adpcm_table</name><index pos:start="761:37" pos:end="761:50">[ <expr pos:start="761:39" pos:end="761:49"><name pos:start="761:39" pos:end="761:42">byte</name> <operator pos:start="761:44" pos:end="761:44">&amp;</operator> <literal type="number" pos:start="761:46" pos:end="761:49">0x0F</literal></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="763:13" pos:end="763:56"><expr pos:start="763:13" pos:end="763:55"><name pos:start="763:13" pos:end="763:19">coeff2r</name> <operator pos:start="763:21" pos:end="763:21">=</operator> <name pos:start="763:23" pos:end="763:55"><name pos:start="763:23" pos:end="763:36">ea_adpcm_table</name><index pos:start="763:37" pos:end="763:55">[<expr pos:start="763:38" pos:end="763:54"><operator pos:start="763:38" pos:end="763:38">(</operator><name pos:start="763:39" pos:end="763:42">byte</name> <operator pos:start="763:44" pos:end="763:44">&amp;</operator> <literal type="number" pos:start="763:46" pos:end="763:49">0x0F</literal><operator pos:start="763:50" pos:end="763:50">)</operator> <operator pos:start="763:52" pos:end="763:52">+</operator> <literal type="number" pos:start="763:54" pos:end="763:54">4</literal></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="767:13" pos:end="767:46"><expr pos:start="767:13" pos:end="767:45"><name pos:start="767:13" pos:end="767:16">byte</name> <operator pos:start="767:18" pos:end="767:18">=</operator> <call pos:start="767:20" pos:end="767:45"><name pos:start="767:20" pos:end="767:40">bytestream2_get_byteu</name><argument_list pos:start="767:41" pos:end="767:45">(<argument pos:start="767:42" pos:end="767:44"><expr pos:start="767:42" pos:end="767:44"><operator pos:start="767:42" pos:end="767:42">&amp;</operator><name pos:start="767:43" pos:end="767:44">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="769:13" pos:end="769:43"><expr pos:start="769:13" pos:end="769:42"><name pos:start="769:13" pos:end="769:22">shift_left</name>  <operator pos:start="769:25" pos:end="769:25">=</operator> <literal type="number" pos:start="769:27" pos:end="769:30">20</literal> <operator pos:start="769:30" pos:end="769:30">-</operator> <operator pos:start="769:32" pos:end="769:32">(</operator><name pos:start="769:33" pos:end="769:36">byte</name> <operator pos:start="769:38" pos:end="769:39">&gt;&gt;</operator> <literal type="number" pos:start="769:41" pos:end="769:41">4</literal><operator pos:start="769:42" pos:end="769:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="771:13" pos:end="771:45"><expr pos:start="771:13" pos:end="771:44"><name pos:start="771:13" pos:end="771:23">shift_right</name> <operator pos:start="771:25" pos:end="771:25">=</operator> <literal type="number" pos:start="771:27" pos:end="771:30">20</literal> <operator pos:start="771:30" pos:end="771:30">-</operator> <operator pos:start="771:32" pos:end="771:32">(</operator><name pos:start="771:33" pos:end="771:36">byte</name> <operator pos:start="771:38" pos:end="771:38">&amp;</operator> <literal type="number" pos:start="771:40" pos:end="771:43">0x0F</literal><operator pos:start="771:44" pos:end="771:44">)</operator></expr>;</expr_stmt>



            <for pos:start="775:13" pos:end="811:13">for <control pos:start="775:17" pos:end="775:51">(<init pos:start="775:18" pos:end="775:28"><expr pos:start="775:18" pos:end="775:27"><name pos:start="775:18" pos:end="775:23">count2</name> <operator pos:start="775:25" pos:end="775:25">=</operator> <literal type="number" pos:start="775:27" pos:end="775:27">0</literal></expr>;</init> <condition pos:start="775:30" pos:end="775:41"><expr pos:start="775:30" pos:end="775:40"><name pos:start="775:30" pos:end="775:35">count2</name> <operator pos:start="775:37" pos:end="775:37">&lt;</operator> <literal type="number" pos:start="775:39" pos:end="775:40">28</literal></expr>;</condition> <incr pos:start="775:43" pos:end="775:50"><expr pos:start="775:43" pos:end="775:50"><name pos:start="775:43" pos:end="775:48">count2</name><operator pos:start="775:49" pos:end="775:50">++</operator></expr></incr>)</control> <block pos:start="775:53" pos:end="811:13">{<block_content pos:start="777:17" pos:end="809:50">

                <expr_stmt pos:start="777:17" pos:end="777:50"><expr pos:start="777:17" pos:end="777:49"><name pos:start="777:17" pos:end="777:20">byte</name> <operator pos:start="777:22" pos:end="777:22">=</operator> <call pos:start="777:24" pos:end="777:49"><name pos:start="777:24" pos:end="777:44">bytestream2_get_byteu</name><argument_list pos:start="777:45" pos:end="777:49">(<argument pos:start="777:46" pos:end="777:48"><expr pos:start="777:46" pos:end="777:48"><operator pos:start="777:46" pos:end="777:46">&amp;</operator><name pos:start="777:47" pos:end="777:48">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="779:17" pos:end="779:76"><expr pos:start="779:17" pos:end="779:75"><name pos:start="779:17" pos:end="779:32">next_left_sample</name>  <operator pos:start="779:35" pos:end="779:35">=</operator> <call pos:start="779:37" pos:end="779:61"><name pos:start="779:37" pos:end="779:47">sign_extend</name><argument_list pos:start="779:48" pos:end="779:61">(<argument pos:start="779:49" pos:end="779:57"><expr pos:start="779:49" pos:end="779:57"><name pos:start="779:49" pos:end="779:52">byte</name> <operator pos:start="779:54" pos:end="779:55">&gt;&gt;</operator> <literal type="number" pos:start="779:57" pos:end="779:57">4</literal></expr></argument>, <argument pos:start="779:60" pos:end="779:60"><expr pos:start="779:60" pos:end="779:60"><literal type="number" pos:start="779:60" pos:end="779:60">4</literal></expr></argument>)</argument_list></call> <operator pos:start="779:63" pos:end="779:64">&lt;&lt;</operator> <name pos:start="779:66" pos:end="779:75">shift_left</name></expr>;</expr_stmt>

                <expr_stmt pos:start="781:17" pos:end="781:77"><expr pos:start="781:17" pos:end="781:76"><name pos:start="781:17" pos:end="781:33">next_right_sample</name> <operator pos:start="781:35" pos:end="781:35">=</operator> <call pos:start="781:37" pos:end="781:61"><name pos:start="781:37" pos:end="781:47">sign_extend</name><argument_list pos:start="781:48" pos:end="781:61">(<argument pos:start="781:49" pos:end="781:52"><expr pos:start="781:49" pos:end="781:52"><name pos:start="781:49" pos:end="781:52">byte</name></expr></argument>,      <argument pos:start="781:60" pos:end="781:60"><expr pos:start="781:60" pos:end="781:60"><literal type="number" pos:start="781:60" pos:end="781:60">4</literal></expr></argument>)</argument_list></call> <operator pos:start="781:63" pos:end="781:64">&lt;&lt;</operator> <name pos:start="781:66" pos:end="781:76">shift_right</name></expr>;</expr_stmt>



                <expr_stmt pos:start="785:17" pos:end="789:66"><expr pos:start="785:17" pos:end="789:65"><name pos:start="785:17" pos:end="785:32">next_left_sample</name> <operator pos:start="785:34" pos:end="785:34">=</operator> <operator pos:start="785:36" pos:end="785:36">(</operator><name pos:start="785:37" pos:end="785:52">next_left_sample</name> <operator pos:start="785:54" pos:end="785:54">+</operator>

                    <operator pos:start="787:21" pos:end="787:21">(</operator><name pos:start="787:22" pos:end="787:40">current_left_sample</name> <operator pos:start="787:42" pos:end="787:42">*</operator> <name pos:start="787:44" pos:end="787:50">coeff1l</name><operator pos:start="787:51" pos:end="787:51">)</operator> <operator pos:start="787:53" pos:end="787:53">+</operator>

                    <operator pos:start="789:21" pos:end="789:21">(</operator><name pos:start="789:22" pos:end="789:41">previous_left_sample</name> <operator pos:start="789:43" pos:end="789:43">*</operator> <name pos:start="789:45" pos:end="789:51">coeff2l</name><operator pos:start="789:52" pos:end="789:52">)</operator> <operator pos:start="789:54" pos:end="789:54">+</operator> <literal type="number" pos:start="789:56" pos:end="789:59">0x80</literal><operator pos:start="789:60" pos:end="789:60">)</operator> <operator pos:start="789:62" pos:end="789:63">&gt;&gt;</operator> <literal type="number" pos:start="789:65" pos:end="789:65">8</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="791:17" pos:end="795:67"><expr pos:start="791:17" pos:end="795:66"><name pos:start="791:17" pos:end="791:33">next_right_sample</name> <operator pos:start="791:35" pos:end="791:35">=</operator> <operator pos:start="791:37" pos:end="791:37">(</operator><name pos:start="791:38" pos:end="791:54">next_right_sample</name> <operator pos:start="791:56" pos:end="791:56">+</operator>

                    <operator pos:start="793:21" pos:end="793:21">(</operator><name pos:start="793:22" pos:end="793:41">current_right_sample</name> <operator pos:start="793:43" pos:end="793:43">*</operator> <name pos:start="793:45" pos:end="793:51">coeff1r</name><operator pos:start="793:52" pos:end="793:52">)</operator> <operator pos:start="793:54" pos:end="793:54">+</operator>

                    <operator pos:start="795:21" pos:end="795:21">(</operator><name pos:start="795:22" pos:end="795:42">previous_right_sample</name> <operator pos:start="795:44" pos:end="795:44">*</operator> <name pos:start="795:46" pos:end="795:52">coeff2r</name><operator pos:start="795:53" pos:end="795:53">)</operator> <operator pos:start="795:55" pos:end="795:55">+</operator> <literal type="number" pos:start="795:57" pos:end="795:60">0x80</literal><operator pos:start="795:61" pos:end="795:61">)</operator> <operator pos:start="795:63" pos:end="795:64">&gt;&gt;</operator> <literal type="number" pos:start="795:66" pos:end="795:66">8</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="799:17" pos:end="799:59"><expr pos:start="799:17" pos:end="799:58"><name pos:start="799:17" pos:end="799:36">previous_left_sample</name> <operator pos:start="799:38" pos:end="799:38">=</operator> <name pos:start="799:40" pos:end="799:58">current_left_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="801:17" pos:end="801:70"><expr pos:start="801:17" pos:end="801:69"><name pos:start="801:17" pos:end="801:35">current_left_sample</name> <operator pos:start="801:37" pos:end="801:37">=</operator> <call pos:start="801:39" pos:end="801:69"><name pos:start="801:39" pos:end="801:51">av_clip_int16</name><argument_list pos:start="801:52" pos:end="801:69">(<argument pos:start="801:53" pos:end="801:68"><expr pos:start="801:53" pos:end="801:68"><name pos:start="801:53" pos:end="801:68">next_left_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="803:17" pos:end="803:61"><expr pos:start="803:17" pos:end="803:60"><name pos:start="803:17" pos:end="803:37">previous_right_sample</name> <operator pos:start="803:39" pos:end="803:39">=</operator> <name pos:start="803:41" pos:end="803:60">current_right_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="805:17" pos:end="805:72"><expr pos:start="805:17" pos:end="805:71"><name pos:start="805:17" pos:end="805:36">current_right_sample</name> <operator pos:start="805:38" pos:end="805:38">=</operator> <call pos:start="805:40" pos:end="805:71"><name pos:start="805:40" pos:end="805:52">av_clip_int16</name><argument_list pos:start="805:53" pos:end="805:71">(<argument pos:start="805:54" pos:end="805:70"><expr pos:start="805:54" pos:end="805:70"><name pos:start="805:54" pos:end="805:70">next_right_sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="807:17" pos:end="807:49"><expr pos:start="807:17" pos:end="807:48"><operator pos:start="807:17" pos:end="807:17">*</operator><name pos:start="807:18" pos:end="807:24">samples</name><operator pos:start="807:25" pos:end="807:26">++</operator> <operator pos:start="807:28" pos:end="807:28">=</operator> <name pos:start="807:30" pos:end="807:48">current_left_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="809:17" pos:end="809:50"><expr pos:start="809:17" pos:end="809:49"><operator pos:start="809:17" pos:end="809:17">*</operator><name pos:start="809:18" pos:end="809:24">samples</name><operator pos:start="809:25" pos:end="809:26">++</operator> <operator pos:start="809:28" pos:end="809:28">=</operator> <name pos:start="809:30" pos:end="809:49">current_right_sample</name></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>



        <expr_stmt pos:start="817:9" pos:end="817:33"><expr pos:start="817:9" pos:end="817:32"><call pos:start="817:9" pos:end="817:32"><name pos:start="817:9" pos:end="817:24">bytestream2_skip</name><argument_list pos:start="817:25" pos:end="817:32">(<argument pos:start="817:26" pos:end="817:28"><expr pos:start="817:26" pos:end="817:28"><operator pos:start="817:26" pos:end="817:26">&amp;</operator><name pos:start="817:27" pos:end="817:28">gb</name></expr></argument>, <argument pos:start="817:31" pos:end="817:31"><expr pos:start="817:31" pos:end="817:31"><literal type="number" pos:start="817:31" pos:end="817:31">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="817:35" pos:end="817:60">// Skip terminating 0x0000</comment>



        <break pos:start="821:9" pos:end="821:14">break;</break>

    </block_content>}</block>

    <case pos:start="825:5" pos:end="825:39">case <expr pos:start="825:10" pos:end="825:38"><name pos:start="825:10" pos:end="825:38">AV_CODEC_ID_ADPCM_EA_MAXIS_XA</name></expr>:</case>

    <block pos:start="827:5" pos:end="883:5">{<block_content pos:start="829:9" pos:end="881:14">

        <decl_stmt pos:start="829:9" pos:end="829:34"><decl pos:start="829:9" pos:end="829:23"><type pos:start="829:9" pos:end="829:11"><name pos:start="829:9" pos:end="829:11">int</name></type> <name pos:start="829:13" pos:end="829:23"><name pos:start="829:13" pos:end="829:17">coeff</name><index pos:start="829:18" pos:end="829:20">[<expr pos:start="829:19" pos:end="829:19"><literal type="number" pos:start="829:19" pos:end="829:19">2</literal></expr>]</index><index pos:start="829:21" pos:end="829:23">[<expr pos:start="829:22" pos:end="829:22"><literal type="number" pos:start="829:22" pos:end="829:22">2</literal></expr>]</index></name></decl>, <decl pos:start="829:26" pos:end="829:33"><type ref="prev" pos:start="829:9" pos:end="829:11"/><name pos:start="829:26" pos:end="829:33"><name pos:start="829:26" pos:end="829:30">shift</name><index pos:start="829:31" pos:end="829:33">[<expr pos:start="829:32" pos:end="829:32"><literal type="number" pos:start="829:32" pos:end="829:32">2</literal></expr>]</index></name></decl>;</decl_stmt>



        <for pos:start="833:9" pos:end="843:9">for<control pos:start="833:12" pos:end="833:62">(<init pos:start="833:13" pos:end="833:24"><expr pos:start="833:13" pos:end="833:23"><name pos:start="833:13" pos:end="833:19">channel</name> <operator pos:start="833:21" pos:end="833:21">=</operator> <literal type="number" pos:start="833:23" pos:end="833:23">0</literal></expr>;</init> <condition pos:start="833:26" pos:end="833:51"><expr pos:start="833:26" pos:end="833:50"><name pos:start="833:26" pos:end="833:32">channel</name> <operator pos:start="833:34" pos:end="833:34">&lt;</operator> <name pos:start="833:36" pos:end="833:50"><name pos:start="833:36" pos:end="833:40">avctx</name><operator pos:start="833:41" pos:end="833:42">-&gt;</operator><name pos:start="833:43" pos:end="833:50">channels</name></name></expr>;</condition> <incr pos:start="833:53" pos:end="833:61"><expr pos:start="833:53" pos:end="833:61"><name pos:start="833:53" pos:end="833:59">channel</name><operator pos:start="833:60" pos:end="833:61">++</operator></expr></incr>)</control> <block pos:start="833:64" pos:end="843:9">{<block_content pos:start="835:13" pos:end="841:48">

            <decl_stmt pos:start="835:13" pos:end="835:50"><decl pos:start="835:13" pos:end="835:49"><type pos:start="835:13" pos:end="835:15"><name pos:start="835:13" pos:end="835:15">int</name></type> <name pos:start="835:17" pos:end="835:20">byte</name> <init pos:start="835:22" pos:end="835:49">= <expr pos:start="835:24" pos:end="835:49"><call pos:start="835:24" pos:end="835:49"><name pos:start="835:24" pos:end="835:44">bytestream2_get_byteu</name><argument_list pos:start="835:45" pos:end="835:49">(<argument pos:start="835:46" pos:end="835:48"><expr pos:start="835:46" pos:end="835:48"><operator pos:start="835:46" pos:end="835:46">&amp;</operator><name pos:start="835:47" pos:end="835:48">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for pos:start="837:13" pos:end="839:70">for <control pos:start="837:17" pos:end="837:31">(<init pos:start="837:18" pos:end="837:21"><expr pos:start="837:18" pos:end="837:20"><name pos:start="837:18" pos:end="837:18">i</name><operator pos:start="837:19" pos:end="837:19">=</operator><literal type="number" pos:start="837:20" pos:end="837:20">0</literal></expr>;</init> <condition pos:start="837:23" pos:end="837:26"><expr pos:start="837:23" pos:end="837:25"><name pos:start="837:23" pos:end="837:23">i</name><operator pos:start="837:24" pos:end="837:24">&lt;</operator><literal type="number" pos:start="837:25" pos:end="837:25">2</literal></expr>;</condition> <incr pos:start="837:28" pos:end="837:30"><expr pos:start="837:28" pos:end="837:30"><name pos:start="837:28" pos:end="837:28">i</name><operator pos:start="837:29" pos:end="837:30">++</operator></expr></incr>)</control><block type="pseudo" pos:start="839:17" pos:end="839:70"><block_content pos:start="839:17" pos:end="839:70">

                <expr_stmt pos:start="839:17" pos:end="839:70"><expr pos:start="839:17" pos:end="839:69"><name pos:start="839:17" pos:end="839:33"><name pos:start="839:17" pos:end="839:21">coeff</name><index pos:start="839:22" pos:end="839:30">[<expr pos:start="839:23" pos:end="839:29"><name pos:start="839:23" pos:end="839:29">channel</name></expr>]</index><index pos:start="839:31" pos:end="839:33">[<expr pos:start="839:32" pos:end="839:32"><name pos:start="839:32" pos:end="839:32">i</name></expr>]</index></name> <operator pos:start="839:35" pos:end="839:35">=</operator> <name pos:start="839:37" pos:end="839:69"><name pos:start="839:37" pos:end="839:50">ea_adpcm_table</name><index pos:start="839:51" pos:end="839:69">[<expr pos:start="839:52" pos:end="839:68"><operator pos:start="839:52" pos:end="839:52">(</operator><name pos:start="839:53" pos:end="839:56">byte</name> <operator pos:start="839:58" pos:end="839:59">&gt;&gt;</operator> <literal type="number" pos:start="839:61" pos:end="839:61">4</literal><operator pos:start="839:62" pos:end="839:62">)</operator> <operator pos:start="839:64" pos:end="839:64">+</operator> <literal type="number" pos:start="839:66" pos:end="839:66">4</literal><operator pos:start="839:67" pos:end="839:67">*</operator><name pos:start="839:68" pos:end="839:68">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="841:13" pos:end="841:48"><expr pos:start="841:13" pos:end="841:47"><name pos:start="841:13" pos:end="841:26"><name pos:start="841:13" pos:end="841:17">shift</name><index pos:start="841:18" pos:end="841:26">[<expr pos:start="841:19" pos:end="841:25"><name pos:start="841:19" pos:end="841:25">channel</name></expr>]</index></name> <operator pos:start="841:28" pos:end="841:28">=</operator> <literal type="number" pos:start="841:30" pos:end="841:33">20</literal> <operator pos:start="841:33" pos:end="841:33">-</operator> <operator pos:start="841:35" pos:end="841:35">(</operator><name pos:start="841:36" pos:end="841:39">byte</name> <operator pos:start="841:41" pos:end="841:41">&amp;</operator> <literal type="number" pos:start="841:43" pos:end="841:46">0x0F</literal><operator pos:start="841:47" pos:end="841:47">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <for pos:start="845:9" pos:end="877:9">for <control pos:start="845:13" pos:end="845:59">(<init pos:start="845:14" pos:end="845:24"><expr pos:start="845:14" pos:end="845:23"><name pos:start="845:14" pos:end="845:19">count1</name> <operator pos:start="845:21" pos:end="845:21">=</operator> <literal type="number" pos:start="845:23" pos:end="845:23">0</literal></expr>;</init> <condition pos:start="845:26" pos:end="845:49"><expr pos:start="845:26" pos:end="845:48"><name pos:start="845:26" pos:end="845:31">count1</name> <operator pos:start="845:33" pos:end="845:33">&lt;</operator> <name pos:start="845:35" pos:end="845:44">nb_samples</name> <operator pos:start="845:46" pos:end="845:46">/</operator> <literal type="number" pos:start="845:48" pos:end="845:48">2</literal></expr>;</condition> <incr pos:start="845:51" pos:end="845:58"><expr pos:start="845:51" pos:end="845:58"><name pos:start="845:51" pos:end="845:56">count1</name><operator pos:start="845:57" pos:end="845:58">++</operator></expr></incr>)</control> <block pos:start="845:61" pos:end="877:9">{<block_content pos:start="847:13" pos:end="875:13">

            <decl_stmt pos:start="847:13" pos:end="847:24"><decl pos:start="847:13" pos:end="847:23"><type pos:start="847:13" pos:end="847:15"><name pos:start="847:13" pos:end="847:15">int</name></type> <name pos:start="847:17" pos:end="847:23"><name pos:start="847:17" pos:end="847:20">byte</name><index pos:start="847:21" pos:end="847:23">[<expr pos:start="847:22" pos:end="847:22"><literal type="number" pos:start="847:22" pos:end="847:22">2</literal></expr>]</index></name></decl>;</decl_stmt>



            <expr_stmt pos:start="851:13" pos:end="851:49"><expr pos:start="851:13" pos:end="851:48"><name pos:start="851:13" pos:end="851:19"><name pos:start="851:13" pos:end="851:16">byte</name><index pos:start="851:17" pos:end="851:19">[<expr pos:start="851:18" pos:end="851:18"><literal type="number" pos:start="851:18" pos:end="851:18">0</literal></expr>]</index></name> <operator pos:start="851:21" pos:end="851:21">=</operator> <call pos:start="851:23" pos:end="851:48"><name pos:start="851:23" pos:end="851:43">bytestream2_get_byteu</name><argument_list pos:start="851:44" pos:end="851:48">(<argument pos:start="851:45" pos:end="851:47"><expr pos:start="851:45" pos:end="851:47"><operator pos:start="851:45" pos:end="851:45">&amp;</operator><name pos:start="851:46" pos:end="851:47">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="853:13" pos:end="853:57"><if pos:start="853:13" pos:end="853:57">if <condition pos:start="853:16" pos:end="853:19">(<expr pos:start="853:17" pos:end="853:18"><name pos:start="853:17" pos:end="853:18">st</name></expr>)</condition><block type="pseudo" pos:start="853:21" pos:end="853:57"><block_content pos:start="853:21" pos:end="853:57"> <expr_stmt pos:start="853:21" pos:end="853:57"><expr pos:start="853:21" pos:end="853:56"><name pos:start="853:21" pos:end="853:27"><name pos:start="853:21" pos:end="853:24">byte</name><index pos:start="853:25" pos:end="853:27">[<expr pos:start="853:26" pos:end="853:26"><literal type="number" pos:start="853:26" pos:end="853:26">1</literal></expr>]</index></name> <operator pos:start="853:29" pos:end="853:29">=</operator> <call pos:start="853:31" pos:end="853:56"><name pos:start="853:31" pos:end="853:51">bytestream2_get_byteu</name><argument_list pos:start="853:52" pos:end="853:56">(<argument pos:start="853:53" pos:end="853:55"><expr pos:start="853:53" pos:end="853:55"><operator pos:start="853:53" pos:end="853:53">&amp;</operator><name pos:start="853:54" pos:end="853:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <for pos:start="855:13" pos:end="875:13">for<control pos:start="855:16" pos:end="855:36">(<init pos:start="855:17" pos:end="855:22"><expr pos:start="855:17" pos:end="855:21"><name pos:start="855:17" pos:end="855:17">i</name> <operator pos:start="855:19" pos:end="855:19">=</operator> <literal type="number" pos:start="855:21" pos:end="855:21">4</literal></expr>;</init> <condition pos:start="855:24" pos:end="855:30"><expr pos:start="855:24" pos:end="855:29"><name pos:start="855:24" pos:end="855:24">i</name> <operator pos:start="855:26" pos:end="855:27">&gt;=</operator> <literal type="number" pos:start="855:29" pos:end="855:29">0</literal></expr>;</condition> <incr pos:start="855:32" pos:end="855:35"><expr pos:start="855:32" pos:end="855:35"><name pos:start="855:32" pos:end="855:32">i</name><operator pos:start="855:33" pos:end="855:34">-=</operator><literal type="number" pos:start="855:35" pos:end="855:35">4</literal></expr></incr>)</control> <block pos:start="855:38" pos:end="875:13">{<block_content pos:start="857:17" pos:end="873:17"> <comment type="block" pos:start="855:40" pos:end="855:88">/* Pairwise samples LL RR (st) or LL LL (mono) */</comment>

                <for pos:start="857:17" pos:end="873:17">for<control pos:start="857:20" pos:end="857:70">(<init pos:start="857:21" pos:end="857:32"><expr pos:start="857:21" pos:end="857:31"><name pos:start="857:21" pos:end="857:27">channel</name> <operator pos:start="857:29" pos:end="857:29">=</operator> <literal type="number" pos:start="857:31" pos:end="857:31">0</literal></expr>;</init> <condition pos:start="857:34" pos:end="857:59"><expr pos:start="857:34" pos:end="857:58"><name pos:start="857:34" pos:end="857:40">channel</name> <operator pos:start="857:42" pos:end="857:42">&lt;</operator> <name pos:start="857:44" pos:end="857:58"><name pos:start="857:44" pos:end="857:48">avctx</name><operator pos:start="857:49" pos:end="857:50">-&gt;</operator><name pos:start="857:51" pos:end="857:58">channels</name></name></expr>;</condition> <incr pos:start="857:61" pos:end="857:69"><expr pos:start="857:61" pos:end="857:69"><name pos:start="857:61" pos:end="857:67">channel</name><operator pos:start="857:68" pos:end="857:69">++</operator></expr></incr>)</control> <block pos:start="857:72" pos:end="873:17">{<block_content pos:start="859:21" pos:end="871:60">

                    <decl_stmt pos:start="859:21" pos:end="859:86"><decl pos:start="859:21" pos:end="859:85"><type pos:start="859:21" pos:end="859:23"><name pos:start="859:21" pos:end="859:23">int</name></type> <name pos:start="859:25" pos:end="859:30">sample</name> <init pos:start="859:32" pos:end="859:85">= <expr pos:start="859:34" pos:end="859:85"><call pos:start="859:34" pos:end="859:67"><name pos:start="859:34" pos:end="859:44">sign_extend</name><argument_list pos:start="859:45" pos:end="859:67">(<argument pos:start="859:46" pos:end="859:63"><expr pos:start="859:46" pos:end="859:63"><name pos:start="859:46" pos:end="859:58"><name pos:start="859:46" pos:end="859:49">byte</name><index pos:start="859:50" pos:end="859:58">[<expr pos:start="859:51" pos:end="859:57"><name pos:start="859:51" pos:end="859:57">channel</name></expr>]</index></name> <operator pos:start="859:60" pos:end="859:61">&gt;&gt;</operator> <name pos:start="859:63" pos:end="859:63">i</name></expr></argument>, <argument pos:start="859:66" pos:end="859:66"><expr pos:start="859:66" pos:end="859:66"><literal type="number" pos:start="859:66" pos:end="859:66">4</literal></expr></argument>)</argument_list></call> <operator pos:start="859:69" pos:end="859:70">&lt;&lt;</operator> <name pos:start="859:72" pos:end="859:85"><name pos:start="859:72" pos:end="859:76">shift</name><index pos:start="859:77" pos:end="859:85">[<expr pos:start="859:78" pos:end="859:84"><name pos:start="859:78" pos:end="859:84">channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="861:21" pos:end="865:89"><expr pos:start="861:21" pos:end="865:88"><name pos:start="861:21" pos:end="861:26">sample</name> <operator pos:start="861:28" pos:end="861:28">=</operator> <operator pos:start="861:30" pos:end="861:30">(</operator><name pos:start="861:31" pos:end="861:36">sample</name> <operator pos:start="861:38" pos:end="861:38">+</operator>

                             <name pos:start="863:30" pos:end="863:47"><name pos:start="863:30" pos:end="863:30">c</name><operator pos:start="863:31" pos:end="863:32">-&gt;</operator><name pos:start="863:33" pos:end="863:38">status</name><index pos:start="863:39" pos:end="863:47">[<expr pos:start="863:40" pos:end="863:46"><name pos:start="863:40" pos:end="863:46">channel</name></expr>]</index></name><operator pos:start="863:48" pos:end="863:48">.</operator><name pos:start="863:49" pos:end="863:55">sample1</name> <operator pos:start="863:57" pos:end="863:57">*</operator> <name pos:start="863:59" pos:end="863:75"><name pos:start="863:59" pos:end="863:63">coeff</name><index pos:start="863:64" pos:end="863:72">[<expr pos:start="863:65" pos:end="863:71"><name pos:start="863:65" pos:end="863:71">channel</name></expr>]</index><index pos:start="863:73" pos:end="863:75">[<expr pos:start="863:74" pos:end="863:74"><literal type="number" pos:start="863:74" pos:end="863:74">0</literal></expr>]</index></name> <operator pos:start="863:77" pos:end="863:77">+</operator>

                             <name pos:start="865:30" pos:end="865:47"><name pos:start="865:30" pos:end="865:30">c</name><operator pos:start="865:31" pos:end="865:32">-&gt;</operator><name pos:start="865:33" pos:end="865:38">status</name><index pos:start="865:39" pos:end="865:47">[<expr pos:start="865:40" pos:end="865:46"><name pos:start="865:40" pos:end="865:46">channel</name></expr>]</index></name><operator pos:start="865:48" pos:end="865:48">.</operator><name pos:start="865:49" pos:end="865:55">sample2</name> <operator pos:start="865:57" pos:end="865:57">*</operator> <name pos:start="865:59" pos:end="865:75"><name pos:start="865:59" pos:end="865:63">coeff</name><index pos:start="865:64" pos:end="865:72">[<expr pos:start="865:65" pos:end="865:71"><name pos:start="865:65" pos:end="865:71">channel</name></expr>]</index><index pos:start="865:73" pos:end="865:75">[<expr pos:start="865:74" pos:end="865:74"><literal type="number" pos:start="865:74" pos:end="865:74">1</literal></expr>]</index></name> <operator pos:start="865:77" pos:end="865:77">+</operator> <literal type="number" pos:start="865:79" pos:end="865:82">0x80</literal><operator pos:start="865:83" pos:end="865:83">)</operator> <operator pos:start="865:85" pos:end="865:86">&gt;&gt;</operator> <literal type="number" pos:start="865:88" pos:end="865:88">8</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="867:21" pos:end="867:76"><expr pos:start="867:21" pos:end="867:75"><name pos:start="867:21" pos:end="867:38"><name pos:start="867:21" pos:end="867:21">c</name><operator pos:start="867:22" pos:end="867:23">-&gt;</operator><name pos:start="867:24" pos:end="867:29">status</name><index pos:start="867:30" pos:end="867:38">[<expr pos:start="867:31" pos:end="867:37"><name pos:start="867:31" pos:end="867:37">channel</name></expr>]</index></name><operator pos:start="867:39" pos:end="867:39">.</operator><name pos:start="867:40" pos:end="867:46">sample2</name> <operator pos:start="867:48" pos:end="867:48">=</operator> <name pos:start="867:50" pos:end="867:67"><name pos:start="867:50" pos:end="867:50">c</name><operator pos:start="867:51" pos:end="867:52">-&gt;</operator><name pos:start="867:53" pos:end="867:58">status</name><index pos:start="867:59" pos:end="867:67">[<expr pos:start="867:60" pos:end="867:66"><name pos:start="867:60" pos:end="867:66">channel</name></expr>]</index></name><operator pos:start="867:68" pos:end="867:68">.</operator><name pos:start="867:69" pos:end="867:75">sample1</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="869:21" pos:end="869:71"><expr pos:start="869:21" pos:end="869:70"><name pos:start="869:21" pos:end="869:38"><name pos:start="869:21" pos:end="869:21">c</name><operator pos:start="869:22" pos:end="869:23">-&gt;</operator><name pos:start="869:24" pos:end="869:29">status</name><index pos:start="869:30" pos:end="869:38">[<expr pos:start="869:31" pos:end="869:37"><name pos:start="869:31" pos:end="869:37">channel</name></expr>]</index></name><operator pos:start="869:39" pos:end="869:39">.</operator><name pos:start="869:40" pos:end="869:46">sample1</name> <operator pos:start="869:48" pos:end="869:48">=</operator> <call pos:start="869:50" pos:end="869:70"><name pos:start="869:50" pos:end="869:62">av_clip_int16</name><argument_list pos:start="869:63" pos:end="869:70">(<argument pos:start="869:64" pos:end="869:69"><expr pos:start="869:64" pos:end="869:69"><name pos:start="869:64" pos:end="869:69">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="871:21" pos:end="871:60"><expr pos:start="871:21" pos:end="871:59"><operator pos:start="871:21" pos:end="871:21">*</operator><name pos:start="871:22" pos:end="871:28">samples</name><operator pos:start="871:29" pos:end="871:30">++</operator> <operator pos:start="871:32" pos:end="871:32">=</operator> <name pos:start="871:34" pos:end="871:51"><name pos:start="871:34" pos:end="871:34">c</name><operator pos:start="871:35" pos:end="871:36">-&gt;</operator><name pos:start="871:37" pos:end="871:42">status</name><index pos:start="871:43" pos:end="871:51">[<expr pos:start="871:44" pos:end="871:50"><name pos:start="871:44" pos:end="871:50">channel</name></expr>]</index></name><operator pos:start="871:52" pos:end="871:52">.</operator><name pos:start="871:53" pos:end="871:59">sample1</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <expr_stmt pos:start="879:9" pos:end="879:43"><expr pos:start="879:9" pos:end="879:42"><call pos:start="879:9" pos:end="879:42"><name pos:start="879:9" pos:end="879:24">bytestream2_seek</name><argument_list pos:start="879:25" pos:end="879:42">(<argument pos:start="879:26" pos:end="879:28"><expr pos:start="879:26" pos:end="879:28"><operator pos:start="879:26" pos:end="879:26">&amp;</operator><name pos:start="879:27" pos:end="879:28">gb</name></expr></argument>, <argument pos:start="879:31" pos:end="879:31"><expr pos:start="879:31" pos:end="879:31"><literal type="number" pos:start="879:31" pos:end="879:31">0</literal></expr></argument>, <argument pos:start="879:34" pos:end="879:41"><expr pos:start="879:34" pos:end="879:41"><name pos:start="879:34" pos:end="879:41">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="881:9" pos:end="881:14">break;</break>

    </block_content>}</block>

    <case pos:start="885:5" pos:end="885:33">case <expr pos:start="885:10" pos:end="885:32"><name pos:start="885:10" pos:end="885:32">AV_CODEC_ID_ADPCM_EA_R1</name></expr>:</case>

    <case pos:start="887:5" pos:end="887:33">case <expr pos:start="887:10" pos:end="887:32"><name pos:start="887:10" pos:end="887:32">AV_CODEC_ID_ADPCM_EA_R2</name></expr>:</case>

    <case pos:start="889:5" pos:end="889:33">case <expr pos:start="889:10" pos:end="889:32"><name pos:start="889:10" pos:end="889:32">AV_CODEC_ID_ADPCM_EA_R3</name></expr>:</case> <block pos:start="889:35" pos:end="1045:5">{<block_content pos:start="899:9" pos:end="1043:14">

        <comment type="block" pos:start="891:9" pos:end="897:57">/* channel numbering

           2chan: 0=fl, 1=fr

           4chan: 0=fl, 1=rl, 2=fr, 3=rr

           6chan: 0=fl, 1=c,  2=fr, 3=rl,  4=rr, 5=sub */</comment>

        <decl_stmt pos:start="899:9" pos:end="899:75"><decl pos:start="899:9" pos:end="899:74"><type pos:start="899:9" pos:end="899:17"><specifier pos:start="899:9" pos:end="899:13">const</specifier> <name pos:start="899:15" pos:end="899:17">int</name></type> <name pos:start="899:19" pos:end="899:28">big_endian</name> <init pos:start="899:30" pos:end="899:74">= <expr pos:start="899:32" pos:end="899:74"><name pos:start="899:32" pos:end="899:47"><name pos:start="899:32" pos:end="899:36">avctx</name><operator pos:start="899:37" pos:end="899:38">-&gt;</operator><name pos:start="899:39" pos:end="899:43">codec</name><operator pos:start="899:44" pos:end="899:45">-&gt;</operator><name pos:start="899:46" pos:end="899:47">id</name></name> <operator pos:start="899:49" pos:end="899:50">==</operator> <name pos:start="899:52" pos:end="899:74">AV_CODEC_ID_ADPCM_EA_R3</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="901:9" pos:end="901:57"><decl pos:start="901:9" pos:end="901:27"><type pos:start="901:9" pos:end="901:11"><name pos:start="901:9" pos:end="901:11">int</name></type> <name pos:start="901:13" pos:end="901:27">previous_sample</name></decl>, <decl pos:start="901:30" pos:end="901:43"><type ref="prev" pos:start="901:9" pos:end="901:11"/><name pos:start="901:30" pos:end="901:43">current_sample</name></decl>, <decl pos:start="901:46" pos:end="901:56"><type ref="prev" pos:start="901:9" pos:end="901:11"/><name pos:start="901:46" pos:end="901:56">next_sample</name></decl>;</decl_stmt>

        <decl_stmt pos:start="903:9" pos:end="903:27"><decl pos:start="903:9" pos:end="903:18"><type pos:start="903:9" pos:end="903:11"><name pos:start="903:9" pos:end="903:11">int</name></type> <name pos:start="903:13" pos:end="903:18">coeff1</name></decl>, <decl pos:start="903:21" pos:end="903:26"><type ref="prev" pos:start="903:9" pos:end="903:11"/><name pos:start="903:21" pos:end="903:26">coeff2</name></decl>;</decl_stmt>

        <decl_stmt pos:start="905:9" pos:end="905:18"><decl pos:start="905:9" pos:end="905:17"><type pos:start="905:9" pos:end="905:11"><name pos:start="905:9" pos:end="905:11">int</name></type> <name pos:start="905:13" pos:end="905:17">shift</name></decl>;</decl_stmt>

        <decl_stmt pos:start="907:9" pos:end="907:29"><decl pos:start="907:9" pos:end="907:28"><type pos:start="907:9" pos:end="907:20"><name pos:start="907:9" pos:end="907:16">unsigned</name> <name pos:start="907:18" pos:end="907:20">int</name></type> <name pos:start="907:22" pos:end="907:28">channel</name></decl>;</decl_stmt>

        <decl_stmt pos:start="909:9" pos:end="909:27"><decl pos:start="909:9" pos:end="909:26"><type pos:start="909:9" pos:end="909:18"><name pos:start="909:9" pos:end="909:16">uint16_t</name> <modifier pos:start="909:18" pos:end="909:18">*</modifier></type><name pos:start="909:19" pos:end="909:26">samplesC</name></decl>;</decl_stmt>

        <decl_stmt pos:start="911:9" pos:end="911:22"><decl pos:start="911:9" pos:end="911:21"><type pos:start="911:9" pos:end="911:11"><name pos:start="911:9" pos:end="911:11">int</name></type> <name pos:start="911:13" pos:end="911:17">count</name> <init pos:start="911:19" pos:end="911:21">= <expr pos:start="911:21" pos:end="911:21"><literal type="number" pos:start="911:21" pos:end="911:21">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="913:9" pos:end="913:23"><decl pos:start="913:9" pos:end="913:22"><type pos:start="913:9" pos:end="913:11"><name pos:start="913:9" pos:end="913:11">int</name></type> <name pos:start="913:13" pos:end="913:22"><name pos:start="913:13" pos:end="913:19">offsets</name><index pos:start="913:20" pos:end="913:22">[<expr pos:start="913:21" pos:end="913:21"><literal type="number" pos:start="913:21" pos:end="913:21">6</literal></expr>]</index></name></decl>;</decl_stmt>



        <for pos:start="917:9" pos:end="923:57">for <control pos:start="917:13" pos:end="917:59">(<init pos:start="917:14" pos:end="917:23"><expr pos:start="917:14" pos:end="917:22"><name pos:start="917:14" pos:end="917:20">channel</name><operator pos:start="917:21" pos:end="917:21">=</operator><literal type="number" pos:start="917:22" pos:end="917:22">0</literal></expr>;</init> <condition pos:start="917:25" pos:end="917:48"><expr pos:start="917:25" pos:end="917:47"><name pos:start="917:25" pos:end="917:31">channel</name><operator pos:start="917:32" pos:end="917:32">&lt;</operator><name pos:start="917:33" pos:end="917:47"><name pos:start="917:33" pos:end="917:37">avctx</name><operator pos:start="917:38" pos:end="917:39">-&gt;</operator><name pos:start="917:40" pos:end="917:47">channels</name></name></expr>;</condition> <incr pos:start="917:50" pos:end="917:58"><expr pos:start="917:50" pos:end="917:58"><name pos:start="917:50" pos:end="917:56">channel</name><operator pos:start="917:57" pos:end="917:58">++</operator></expr></incr>)</control><block type="pseudo" pos:start="919:13" pos:end="923:57"><block_content pos:start="919:13" pos:end="923:57">

            <expr_stmt pos:start="919:13" pos:end="923:57"><expr pos:start="919:13" pos:end="923:56"><name pos:start="919:13" pos:end="919:28"><name pos:start="919:13" pos:end="919:19">offsets</name><index pos:start="919:20" pos:end="919:28">[<expr pos:start="919:21" pos:end="919:27"><name pos:start="919:21" pos:end="919:27">channel</name></expr>]</index></name> <operator pos:start="919:30" pos:end="919:30">=</operator> <operator pos:start="919:32" pos:end="919:32">(</operator><ternary pos:start="919:33" pos:end="921:70"><condition pos:start="919:33" pos:end="919:44"><expr pos:start="919:33" pos:end="919:42"><name pos:start="919:33" pos:end="919:42">big_endian</name></expr> ?</condition><then pos:start="919:46" pos:end="919:70"> <expr pos:start="919:46" pos:end="919:70"><call pos:start="919:46" pos:end="919:70"><name pos:start="919:46" pos:end="919:65">bytestream2_get_be32</name><argument_list pos:start="919:66" pos:end="919:70">(<argument pos:start="919:67" pos:end="919:69"><expr pos:start="919:67" pos:end="919:69"><operator pos:start="919:67" pos:end="919:67">&amp;</operator><name pos:start="919:68" pos:end="919:69">gb</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="919:72" pos:end="921:70">:

                                             <expr pos:start="921:46" pos:end="921:70"><call pos:start="921:46" pos:end="921:70"><name pos:start="921:46" pos:end="921:65">bytestream2_get_le32</name><argument_list pos:start="921:66" pos:end="921:70">(<argument pos:start="921:67" pos:end="921:69"><expr pos:start="921:67" pos:end="921:69"><operator pos:start="921:67" pos:end="921:67">&amp;</operator><name pos:start="921:68" pos:end="921:69">gb</name></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="921:71" pos:end="921:71">)</operator> <operator pos:start="921:73" pos:end="921:73">+</operator>

                               <operator pos:start="923:32" pos:end="923:32">(</operator><name pos:start="923:33" pos:end="923:47"><name pos:start="923:33" pos:end="923:37">avctx</name><operator pos:start="923:38" pos:end="923:39">-&gt;</operator><name pos:start="923:40" pos:end="923:47">channels</name></name> <operator pos:start="923:49" pos:end="923:49">+</operator> <literal type="number" pos:start="923:51" pos:end="923:51">1</literal><operator pos:start="923:52" pos:end="923:52">)</operator> <operator pos:start="923:54" pos:end="923:54">*</operator> <literal type="number" pos:start="923:56" pos:end="923:56">4</literal></expr>;</expr_stmt></block_content></block></for>



        <for pos:start="927:9" pos:end="1035:9">for <control pos:start="927:13" pos:end="927:59">(<init pos:start="927:14" pos:end="927:23"><expr pos:start="927:14" pos:end="927:22"><name pos:start="927:14" pos:end="927:20">channel</name><operator pos:start="927:21" pos:end="927:21">=</operator><literal type="number" pos:start="927:22" pos:end="927:22">0</literal></expr>;</init> <condition pos:start="927:25" pos:end="927:48"><expr pos:start="927:25" pos:end="927:47"><name pos:start="927:25" pos:end="927:31">channel</name><operator pos:start="927:32" pos:end="927:32">&lt;</operator><name pos:start="927:33" pos:end="927:47"><name pos:start="927:33" pos:end="927:37">avctx</name><operator pos:start="927:38" pos:end="927:39">-&gt;</operator><name pos:start="927:40" pos:end="927:47">channels</name></name></expr>;</condition> <incr pos:start="927:50" pos:end="927:58"><expr pos:start="927:50" pos:end="927:58"><name pos:start="927:50" pos:end="927:56">channel</name><operator pos:start="927:57" pos:end="927:58">++</operator></expr></incr>)</control> <block pos:start="927:61" pos:end="1035:9">{<block_content pos:start="929:13" pos:end="1033:13">

            <expr_stmt pos:start="929:13" pos:end="929:62"><expr pos:start="929:13" pos:end="929:61"><call pos:start="929:13" pos:end="929:61"><name pos:start="929:13" pos:end="929:28">bytestream2_seek</name><argument_list pos:start="929:29" pos:end="929:61">(<argument pos:start="929:30" pos:end="929:32"><expr pos:start="929:30" pos:end="929:32"><operator pos:start="929:30" pos:end="929:30">&amp;</operator><name pos:start="929:31" pos:end="929:32">gb</name></expr></argument>, <argument pos:start="929:35" pos:end="929:50"><expr pos:start="929:35" pos:end="929:50"><name pos:start="929:35" pos:end="929:50"><name pos:start="929:35" pos:end="929:41">offsets</name><index pos:start="929:42" pos:end="929:50">[<expr pos:start="929:43" pos:end="929:49"><name pos:start="929:43" pos:end="929:49">channel</name></expr>]</index></name></expr></argument>, <argument pos:start="929:53" pos:end="929:60"><expr pos:start="929:53" pos:end="929:60"><name pos:start="929:53" pos:end="929:60">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="931:13" pos:end="931:42"><expr pos:start="931:13" pos:end="931:41"><name pos:start="931:13" pos:end="931:20">samplesC</name> <operator pos:start="931:22" pos:end="931:22">=</operator> <name pos:start="931:24" pos:end="931:41"><name pos:start="931:24" pos:end="931:32">samples_p</name><index pos:start="931:33" pos:end="931:41">[<expr pos:start="931:34" pos:end="931:40"><name pos:start="931:34" pos:end="931:40">channel</name></expr>]</index></name></expr>;</expr_stmt>



            <if_stmt pos:start="935:13" pos:end="947:13"><if pos:start="935:13" pos:end="941:13">if <condition pos:start="935:16" pos:end="935:60">(<expr pos:start="935:17" pos:end="935:59"><name pos:start="935:17" pos:end="935:32"><name pos:start="935:17" pos:end="935:21">avctx</name><operator pos:start="935:22" pos:end="935:23">-&gt;</operator><name pos:start="935:24" pos:end="935:28">codec</name><operator pos:start="935:29" pos:end="935:30">-&gt;</operator><name pos:start="935:31" pos:end="935:32">id</name></name> <operator pos:start="935:34" pos:end="935:35">==</operator> <name pos:start="935:37" pos:end="935:59">AV_CODEC_ID_ADPCM_EA_R1</name></expr>)</condition> <block pos:start="935:62" pos:end="941:13">{<block_content pos:start="937:17" pos:end="939:77">

                <expr_stmt pos:start="937:17" pos:end="937:77"><expr pos:start="937:17" pos:end="937:76"><name pos:start="937:17" pos:end="937:30">current_sample</name>  <operator pos:start="937:33" pos:end="937:33">=</operator> <call pos:start="937:35" pos:end="937:76"><name pos:start="937:35" pos:end="937:45">sign_extend</name><argument_list pos:start="937:46" pos:end="937:76">(<argument pos:start="937:47" pos:end="937:71"><expr pos:start="937:47" pos:end="937:71"><call pos:start="937:47" pos:end="937:71"><name pos:start="937:47" pos:end="937:66">bytestream2_get_le16</name><argument_list pos:start="937:67" pos:end="937:71">(<argument pos:start="937:68" pos:end="937:70"><expr pos:start="937:68" pos:end="937:70"><operator pos:start="937:68" pos:end="937:68">&amp;</operator><name pos:start="937:69" pos:end="937:70">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="937:74" pos:end="937:75"><expr pos:start="937:74" pos:end="937:75"><literal type="number" pos:start="937:74" pos:end="937:75">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="939:17" pos:end="939:77"><expr pos:start="939:17" pos:end="939:76"><name pos:start="939:17" pos:end="939:31">previous_sample</name> <operator pos:start="939:33" pos:end="939:33">=</operator> <call pos:start="939:35" pos:end="939:76"><name pos:start="939:35" pos:end="939:45">sign_extend</name><argument_list pos:start="939:46" pos:end="939:76">(<argument pos:start="939:47" pos:end="939:71"><expr pos:start="939:47" pos:end="939:71"><call pos:start="939:47" pos:end="939:71"><name pos:start="939:47" pos:end="939:66">bytestream2_get_le16</name><argument_list pos:start="939:67" pos:end="939:71">(<argument pos:start="939:68" pos:end="939:70"><expr pos:start="939:68" pos:end="939:70"><operator pos:start="939:68" pos:end="939:68">&amp;</operator><name pos:start="939:69" pos:end="939:70">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="939:74" pos:end="939:75"><expr pos:start="939:74" pos:end="939:75"><literal type="number" pos:start="939:74" pos:end="939:75">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="941:15" pos:end="947:13">else <block pos:start="941:20" pos:end="947:13">{<block_content pos:start="943:17" pos:end="945:65">

                <expr_stmt pos:start="943:17" pos:end="943:63"><expr pos:start="943:17" pos:end="943:62"><name pos:start="943:17" pos:end="943:30">current_sample</name>  <operator pos:start="943:33" pos:end="943:33">=</operator> <name pos:start="943:35" pos:end="943:52"><name pos:start="943:35" pos:end="943:35">c</name><operator pos:start="943:36" pos:end="943:37">-&gt;</operator><name pos:start="943:38" pos:end="943:43">status</name><index pos:start="943:44" pos:end="943:52">[<expr pos:start="943:45" pos:end="943:51"><name pos:start="943:45" pos:end="943:51">channel</name></expr>]</index></name><operator pos:start="943:53" pos:end="943:53">.</operator><name pos:start="943:54" pos:end="943:62">predictor</name></expr>;</expr_stmt>

                <expr_stmt pos:start="945:17" pos:end="945:65"><expr pos:start="945:17" pos:end="945:64"><name pos:start="945:17" pos:end="945:31">previous_sample</name> <operator pos:start="945:33" pos:end="945:33">=</operator> <name pos:start="945:35" pos:end="945:52"><name pos:start="945:35" pos:end="945:35">c</name><operator pos:start="945:36" pos:end="945:37">-&gt;</operator><name pos:start="945:38" pos:end="945:43">status</name><index pos:start="945:44" pos:end="945:52">[<expr pos:start="945:45" pos:end="945:51"><name pos:start="945:45" pos:end="945:51">channel</name></expr>]</index></name><operator pos:start="945:53" pos:end="945:53">.</operator><name pos:start="945:54" pos:end="945:64">prev_sample</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <for pos:start="951:13" pos:end="1011:13">for <control pos:start="951:17" pos:end="951:64">(<init pos:start="951:18" pos:end="951:28"><expr pos:start="951:18" pos:end="951:27"><name pos:start="951:18" pos:end="951:23">count1</name> <operator pos:start="951:25" pos:end="951:25">=</operator> <literal type="number" pos:start="951:27" pos:end="951:27">0</literal></expr>;</init> <condition pos:start="951:30" pos:end="951:54"><expr pos:start="951:30" pos:end="951:53"><name pos:start="951:30" pos:end="951:35">count1</name> <operator pos:start="951:37" pos:end="951:37">&lt;</operator> <name pos:start="951:39" pos:end="951:48">nb_samples</name> <operator pos:start="951:50" pos:end="951:50">/</operator> <literal type="number" pos:start="951:52" pos:end="951:53">28</literal></expr>;</condition> <incr pos:start="951:56" pos:end="951:63"><expr pos:start="951:56" pos:end="951:63"><name pos:start="951:56" pos:end="951:61">count1</name><operator pos:start="951:62" pos:end="951:63">++</operator></expr></incr>)</control> <block pos:start="951:66" pos:end="1011:13">{<block_content pos:start="953:17" pos:end="1009:17">

                <decl_stmt pos:start="953:17" pos:end="953:53"><decl pos:start="953:17" pos:end="953:52"><type pos:start="953:17" pos:end="953:19"><name pos:start="953:17" pos:end="953:19">int</name></type> <name pos:start="953:21" pos:end="953:24">byte</name> <init pos:start="953:26" pos:end="953:52">= <expr pos:start="953:28" pos:end="953:52"><call pos:start="953:28" pos:end="953:52"><name pos:start="953:28" pos:end="953:47">bytestream2_get_byte</name><argument_list pos:start="953:48" pos:end="953:52">(<argument pos:start="953:49" pos:end="953:51"><expr pos:start="953:49" pos:end="953:51"><operator pos:start="953:49" pos:end="953:49">&amp;</operator><name pos:start="953:50" pos:end="953:51">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="955:17" pos:end="1009:17"><if pos:start="955:17" pos:end="967:17">if <condition pos:start="955:20" pos:end="955:33">(<expr pos:start="955:21" pos:end="955:32"><name pos:start="955:21" pos:end="955:24">byte</name> <operator pos:start="955:26" pos:end="955:27">==</operator> <literal type="number" pos:start="955:29" pos:end="955:32">0xEE</literal></expr>)</condition> <block pos:start="955:35" pos:end="967:17">{<block_content pos:start="957:21" pos:end="965:81">  <comment type="block" pos:start="955:38" pos:end="955:65">/* only seen in R2 and R3 */</comment>

                    <expr_stmt pos:start="957:21" pos:end="957:81"><expr pos:start="957:21" pos:end="957:80"><name pos:start="957:21" pos:end="957:34">current_sample</name>  <operator pos:start="957:37" pos:end="957:37">=</operator> <call pos:start="957:39" pos:end="957:80"><name pos:start="957:39" pos:end="957:49">sign_extend</name><argument_list pos:start="957:50" pos:end="957:80">(<argument pos:start="957:51" pos:end="957:75"><expr pos:start="957:51" pos:end="957:75"><call pos:start="957:51" pos:end="957:75"><name pos:start="957:51" pos:end="957:70">bytestream2_get_be16</name><argument_list pos:start="957:71" pos:end="957:75">(<argument pos:start="957:72" pos:end="957:74"><expr pos:start="957:72" pos:end="957:74"><operator pos:start="957:72" pos:end="957:72">&amp;</operator><name pos:start="957:73" pos:end="957:74">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="957:78" pos:end="957:79"><expr pos:start="957:78" pos:end="957:79"><literal type="number" pos:start="957:78" pos:end="957:79">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="959:21" pos:end="959:81"><expr pos:start="959:21" pos:end="959:80"><name pos:start="959:21" pos:end="959:35">previous_sample</name> <operator pos:start="959:37" pos:end="959:37">=</operator> <call pos:start="959:39" pos:end="959:80"><name pos:start="959:39" pos:end="959:49">sign_extend</name><argument_list pos:start="959:50" pos:end="959:80">(<argument pos:start="959:51" pos:end="959:75"><expr pos:start="959:51" pos:end="959:75"><call pos:start="959:51" pos:end="959:75"><name pos:start="959:51" pos:end="959:70">bytestream2_get_be16</name><argument_list pos:start="959:71" pos:end="959:75">(<argument pos:start="959:72" pos:end="959:74"><expr pos:start="959:72" pos:end="959:74"><operator pos:start="959:72" pos:end="959:72">&amp;</operator><name pos:start="959:73" pos:end="959:74">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="959:78" pos:end="959:79"><expr pos:start="959:78" pos:end="959:79"><literal type="number" pos:start="959:78" pos:end="959:79">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <for pos:start="963:21" pos:end="965:81">for <control pos:start="963:25" pos:end="963:55">(<init pos:start="963:26" pos:end="963:34"><expr pos:start="963:26" pos:end="963:33"><name pos:start="963:26" pos:end="963:31">count2</name><operator pos:start="963:32" pos:end="963:32">=</operator><literal type="number" pos:start="963:33" pos:end="963:33">0</literal></expr>;</init> <condition pos:start="963:36" pos:end="963:45"><expr pos:start="963:36" pos:end="963:44"><name pos:start="963:36" pos:end="963:41">count2</name><operator pos:start="963:42" pos:end="963:42">&lt;</operator><literal type="number" pos:start="963:43" pos:end="963:44">28</literal></expr>;</condition> <incr pos:start="963:47" pos:end="963:54"><expr pos:start="963:47" pos:end="963:54"><name pos:start="963:47" pos:end="963:52">count2</name><operator pos:start="963:53" pos:end="963:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="965:25" pos:end="965:81"><block_content pos:start="965:25" pos:end="965:81">

                        <expr_stmt pos:start="965:25" pos:end="965:81"><expr pos:start="965:25" pos:end="965:80"><operator pos:start="965:25" pos:end="965:25">*</operator><name pos:start="965:26" pos:end="965:33">samplesC</name><operator pos:start="965:34" pos:end="965:35">++</operator> <operator pos:start="965:37" pos:end="965:37">=</operator> <call pos:start="965:39" pos:end="965:80"><name pos:start="965:39" pos:end="965:49">sign_extend</name><argument_list pos:start="965:50" pos:end="965:80">(<argument pos:start="965:51" pos:end="965:75"><expr pos:start="965:51" pos:end="965:75"><call pos:start="965:51" pos:end="965:75"><name pos:start="965:51" pos:end="965:70">bytestream2_get_be16</name><argument_list pos:start="965:71" pos:end="965:75">(<argument pos:start="965:72" pos:end="965:74"><expr pos:start="965:72" pos:end="965:74"><operator pos:start="965:72" pos:end="965:72">&amp;</operator><name pos:start="965:73" pos:end="965:74">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="965:78" pos:end="965:79"><expr pos:start="965:78" pos:end="965:79"><literal type="number" pos:start="965:78" pos:end="965:79">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if> <else pos:start="967:19" pos:end="1009:17">else <block pos:start="967:24" pos:end="1009:17">{<block_content pos:start="969:21" pos:end="1007:21">

                    <expr_stmt pos:start="969:21" pos:end="969:61"><expr pos:start="969:21" pos:end="969:60"><name pos:start="969:21" pos:end="969:26">coeff1</name> <operator pos:start="969:28" pos:end="969:28">=</operator> <name pos:start="969:30" pos:end="969:60"><name pos:start="969:30" pos:end="969:43">ea_adpcm_table</name><index pos:start="969:44" pos:end="969:60">[ <expr pos:start="969:46" pos:end="969:54"><name pos:start="969:46" pos:end="969:49">byte</name> <operator pos:start="969:51" pos:end="969:52">&gt;&gt;</operator> <literal type="number" pos:start="969:54" pos:end="969:54">4</literal></expr>     ]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="971:21" pos:end="971:61"><expr pos:start="971:21" pos:end="971:60"><name pos:start="971:21" pos:end="971:26">coeff2</name> <operator pos:start="971:28" pos:end="971:28">=</operator> <name pos:start="971:30" pos:end="971:60"><name pos:start="971:30" pos:end="971:43">ea_adpcm_table</name><index pos:start="971:44" pos:end="971:60">[<expr pos:start="971:45" pos:end="971:59"><operator pos:start="971:45" pos:end="971:45">(</operator><name pos:start="971:46" pos:end="971:49">byte</name> <operator pos:start="971:51" pos:end="971:52">&gt;&gt;</operator> <literal type="number" pos:start="971:54" pos:end="971:54">4</literal><operator pos:start="971:55" pos:end="971:55">)</operator> <operator pos:start="971:57" pos:end="971:57">+</operator> <literal type="number" pos:start="971:59" pos:end="971:59">4</literal></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="973:21" pos:end="973:47"><expr pos:start="973:21" pos:end="973:46"><name pos:start="973:21" pos:end="973:25">shift</name> <operator pos:start="973:27" pos:end="973:27">=</operator> <literal type="number" pos:start="973:29" pos:end="973:32">20</literal> <operator pos:start="973:32" pos:end="973:32">-</operator> <operator pos:start="973:34" pos:end="973:34">(</operator><name pos:start="973:35" pos:end="973:38">byte</name> <operator pos:start="973:40" pos:end="973:40">&amp;</operator> <literal type="number" pos:start="973:42" pos:end="973:45">0x0F</literal><operator pos:start="973:46" pos:end="973:46">)</operator></expr>;</expr_stmt>



                    <for pos:start="977:21" pos:end="1007:21">for <control pos:start="977:25" pos:end="977:55">(<init pos:start="977:26" pos:end="977:34"><expr pos:start="977:26" pos:end="977:33"><name pos:start="977:26" pos:end="977:31">count2</name><operator pos:start="977:32" pos:end="977:32">=</operator><literal type="number" pos:start="977:33" pos:end="977:33">0</literal></expr>;</init> <condition pos:start="977:36" pos:end="977:45"><expr pos:start="977:36" pos:end="977:44"><name pos:start="977:36" pos:end="977:41">count2</name><operator pos:start="977:42" pos:end="977:42">&lt;</operator><literal type="number" pos:start="977:43" pos:end="977:44">28</literal></expr>;</condition> <incr pos:start="977:47" pos:end="977:54"><expr pos:start="977:47" pos:end="977:54"><name pos:start="977:47" pos:end="977:52">count2</name><operator pos:start="977:53" pos:end="977:54">++</operator></expr></incr>)</control> <block pos:start="977:57" pos:end="1007:21">{<block_content pos:start="979:25" pos:end="1005:53">

                        <if_stmt pos:start="979:25" pos:end="989:25"><if pos:start="979:25" pos:end="981:75">if <condition pos:start="979:28" pos:end="979:39">(<expr pos:start="979:29" pos:end="979:38"><name pos:start="979:29" pos:end="979:34">count2</name> <operator pos:start="979:36" pos:end="979:36">&amp;</operator> <literal type="number" pos:start="979:38" pos:end="979:38">1</literal></expr>)</condition><block type="pseudo" pos:start="981:29" pos:end="981:75"><block_content pos:start="981:29" pos:end="981:75">

                            <expr_stmt pos:start="981:29" pos:end="981:75"><expr pos:start="981:29" pos:end="981:74"><name pos:start="981:29" pos:end="981:39">next_sample</name> <operator pos:start="981:41" pos:end="981:41">=</operator> <call pos:start="981:43" pos:end="981:65"><name pos:start="981:43" pos:end="981:53">sign_extend</name><argument_list pos:start="981:54" pos:end="981:65">(<argument pos:start="981:55" pos:end="981:58"><expr pos:start="981:55" pos:end="981:58"><name pos:start="981:55" pos:end="981:58">byte</name></expr></argument>,    <argument pos:start="981:64" pos:end="981:64"><expr pos:start="981:64" pos:end="981:64"><literal type="number" pos:start="981:64" pos:end="981:64">4</literal></expr></argument>)</argument_list></call> <operator pos:start="981:67" pos:end="981:68">&lt;&lt;</operator> <name pos:start="981:70" pos:end="981:74">shift</name></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="983:25" pos:end="989:25">else <block pos:start="983:30" pos:end="989:25">{<block_content pos:start="985:29" pos:end="987:77">

                            <expr_stmt pos:start="985:29" pos:end="985:61"><expr pos:start="985:29" pos:end="985:60"><name pos:start="985:29" pos:end="985:32">byte</name> <operator pos:start="985:34" pos:end="985:34">=</operator> <call pos:start="985:36" pos:end="985:60"><name pos:start="985:36" pos:end="985:55">bytestream2_get_byte</name><argument_list pos:start="985:56" pos:end="985:60">(<argument pos:start="985:57" pos:end="985:59"><expr pos:start="985:57" pos:end="985:59"><operator pos:start="985:57" pos:end="985:57">&amp;</operator><name pos:start="985:58" pos:end="985:59">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt pos:start="987:29" pos:end="987:77"><expr pos:start="987:29" pos:end="987:76"><name pos:start="987:29" pos:end="987:39">next_sample</name> <operator pos:start="987:41" pos:end="987:41">=</operator> <call pos:start="987:43" pos:end="987:67"><name pos:start="987:43" pos:end="987:53">sign_extend</name><argument_list pos:start="987:54" pos:end="987:67">(<argument pos:start="987:55" pos:end="987:63"><expr pos:start="987:55" pos:end="987:63"><name pos:start="987:55" pos:end="987:58">byte</name> <operator pos:start="987:60" pos:end="987:61">&gt;&gt;</operator> <literal type="number" pos:start="987:63" pos:end="987:63">4</literal></expr></argument>, <argument pos:start="987:66" pos:end="987:66"><expr pos:start="987:66" pos:end="987:66"><literal type="number" pos:start="987:66" pos:end="987:66">4</literal></expr></argument>)</argument_list></call> <operator pos:start="987:69" pos:end="987:70">&lt;&lt;</operator> <name pos:start="987:72" pos:end="987:76">shift</name></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>



                        <expr_stmt pos:start="993:25" pos:end="995:66"><expr pos:start="993:25" pos:end="995:65"><name pos:start="993:25" pos:end="993:35">next_sample</name> <operator pos:start="993:37" pos:end="993:38">+=</operator> <operator pos:start="993:40" pos:end="993:40">(</operator><name pos:start="993:41" pos:end="993:54">current_sample</name>  <operator pos:start="993:57" pos:end="993:57">*</operator> <name pos:start="993:59" pos:end="993:64">coeff1</name><operator pos:start="993:65" pos:end="993:65">)</operator> <operator pos:start="993:67" pos:end="993:67">+</operator>

                                       <operator pos:start="995:40" pos:end="995:40">(</operator><name pos:start="995:41" pos:end="995:55">previous_sample</name> <operator pos:start="995:57" pos:end="995:57">*</operator> <name pos:start="995:59" pos:end="995:64">coeff2</name><operator pos:start="995:65" pos:end="995:65">)</operator></expr>;</expr_stmt>

                        <expr_stmt pos:start="997:25" pos:end="997:70"><expr pos:start="997:25" pos:end="997:69"><name pos:start="997:25" pos:end="997:35">next_sample</name> <operator pos:start="997:37" pos:end="997:37">=</operator> <call pos:start="997:39" pos:end="997:69"><name pos:start="997:39" pos:end="997:51">av_clip_int16</name><argument_list pos:start="997:52" pos:end="997:69">(<argument pos:start="997:53" pos:end="997:68"><expr pos:start="997:53" pos:end="997:68"><name pos:start="997:53" pos:end="997:63">next_sample</name> <operator pos:start="997:65" pos:end="997:66">&gt;&gt;</operator> <literal type="number" pos:start="997:68" pos:end="997:68">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                        <expr_stmt pos:start="1001:25" pos:end="1001:57"><expr pos:start="1001:25" pos:end="1001:56"><name pos:start="1001:25" pos:end="1001:39">previous_sample</name> <operator pos:start="1001:41" pos:end="1001:41">=</operator> <name pos:start="1001:43" pos:end="1001:56">current_sample</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1003:25" pos:end="1003:54"><expr pos:start="1003:25" pos:end="1003:53"><name pos:start="1003:25" pos:end="1003:38">current_sample</name>  <operator pos:start="1003:41" pos:end="1003:41">=</operator> <name pos:start="1003:43" pos:end="1003:53">next_sample</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1005:25" pos:end="1005:53"><expr pos:start="1005:25" pos:end="1005:52"><operator pos:start="1005:25" pos:end="1005:25">*</operator><name pos:start="1005:26" pos:end="1005:33">samplesC</name><operator pos:start="1005:34" pos:end="1005:35">++</operator> <operator pos:start="1005:37" pos:end="1005:37">=</operator> <name pos:start="1005:39" pos:end="1005:52">current_sample</name></expr>;</expr_stmt>

                    </block_content>}</block></for>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="1013:13" pos:end="1023:13"><if pos:start="1013:13" pos:end="1017:13">if <condition pos:start="1013:16" pos:end="1013:23">(<expr pos:start="1013:17" pos:end="1013:22"><operator pos:start="1013:17" pos:end="1013:17">!</operator><name pos:start="1013:18" pos:end="1013:22">count</name></expr>)</condition> <block pos:start="1013:25" pos:end="1017:13">{<block_content pos:start="1015:17" pos:end="1015:31">

                <expr_stmt pos:start="1015:17" pos:end="1015:31"><expr pos:start="1015:17" pos:end="1015:30"><name pos:start="1015:17" pos:end="1015:21">count</name> <operator pos:start="1015:23" pos:end="1015:23">=</operator> <name pos:start="1015:25" pos:end="1015:30">count1</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1017:15" pos:end="1023:13">else if <condition pos:start="1017:23" pos:end="1017:39">(<expr pos:start="1017:24" pos:end="1017:38"><name pos:start="1017:24" pos:end="1017:28">count</name> <operator pos:start="1017:30" pos:end="1017:31">!=</operator> <name pos:start="1017:33" pos:end="1017:38">count1</name></expr>)</condition> <block pos:start="1017:41" pos:end="1023:13">{<block_content pos:start="1019:17" pos:end="1021:45">

                <expr_stmt pos:start="1019:17" pos:end="1019:85"><expr pos:start="1019:17" pos:end="1019:84"><call pos:start="1019:17" pos:end="1019:84"><name pos:start="1019:17" pos:end="1019:22">av_log</name><argument_list pos:start="1019:23" pos:end="1019:84">(<argument pos:start="1019:24" pos:end="1019:28"><expr pos:start="1019:24" pos:end="1019:28"><name pos:start="1019:24" pos:end="1019:28">avctx</name></expr></argument>, <argument pos:start="1019:31" pos:end="1019:44"><expr pos:start="1019:31" pos:end="1019:44"><name pos:start="1019:31" pos:end="1019:44">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="1019:47" pos:end="1019:83"><expr pos:start="1019:47" pos:end="1019:83"><literal type="string" pos:start="1019:47" pos:end="1019:83">"per-channel sample count mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1021:17" pos:end="1021:45"><expr pos:start="1021:17" pos:end="1021:44"><name pos:start="1021:17" pos:end="1021:21">count</name> <operator pos:start="1021:23" pos:end="1021:23">=</operator> <call pos:start="1021:25" pos:end="1021:44"><name pos:start="1021:25" pos:end="1021:29">FFMAX</name><argument_list pos:start="1021:30" pos:end="1021:44">(<argument pos:start="1021:31" pos:end="1021:35"><expr pos:start="1021:31" pos:end="1021:35"><name pos:start="1021:31" pos:end="1021:35">count</name></expr></argument>, <argument pos:start="1021:38" pos:end="1021:43"><expr pos:start="1021:38" pos:end="1021:43"><name pos:start="1021:38" pos:end="1021:43">count1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="1027:13" pos:end="1033:13"><if pos:start="1027:13" pos:end="1033:13">if <condition pos:start="1027:16" pos:end="1027:60">(<expr pos:start="1027:17" pos:end="1027:59"><name pos:start="1027:17" pos:end="1027:32"><name pos:start="1027:17" pos:end="1027:21">avctx</name><operator pos:start="1027:22" pos:end="1027:23">-&gt;</operator><name pos:start="1027:24" pos:end="1027:28">codec</name><operator pos:start="1027:29" pos:end="1027:30">-&gt;</operator><name pos:start="1027:31" pos:end="1027:32">id</name></name> <operator pos:start="1027:34" pos:end="1027:35">!=</operator> <name pos:start="1027:37" pos:end="1027:59">AV_CODEC_ID_ADPCM_EA_R1</name></expr>)</condition> <block pos:start="1027:62" pos:end="1033:13">{<block_content pos:start="1029:17" pos:end="1031:65">

                <expr_stmt pos:start="1029:17" pos:end="1029:64"><expr pos:start="1029:17" pos:end="1029:63"><name pos:start="1029:17" pos:end="1029:34"><name pos:start="1029:17" pos:end="1029:17">c</name><operator pos:start="1029:18" pos:end="1029:19">-&gt;</operator><name pos:start="1029:20" pos:end="1029:25">status</name><index pos:start="1029:26" pos:end="1029:34">[<expr pos:start="1029:27" pos:end="1029:33"><name pos:start="1029:27" pos:end="1029:33">channel</name></expr>]</index></name><operator pos:start="1029:35" pos:end="1029:35">.</operator><name pos:start="1029:36" pos:end="1029:44">predictor</name>   <operator pos:start="1029:48" pos:end="1029:48">=</operator> <name pos:start="1029:50" pos:end="1029:63">current_sample</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1031:17" pos:end="1031:65"><expr pos:start="1031:17" pos:end="1031:64"><name pos:start="1031:17" pos:end="1031:34"><name pos:start="1031:17" pos:end="1031:17">c</name><operator pos:start="1031:18" pos:end="1031:19">-&gt;</operator><name pos:start="1031:20" pos:end="1031:25">status</name><index pos:start="1031:26" pos:end="1031:34">[<expr pos:start="1031:27" pos:end="1031:33"><name pos:start="1031:27" pos:end="1031:33">channel</name></expr>]</index></name><operator pos:start="1031:35" pos:end="1031:35">.</operator><name pos:start="1031:36" pos:end="1031:46">prev_sample</name> <operator pos:start="1031:48" pos:end="1031:48">=</operator> <name pos:start="1031:50" pos:end="1031:64">previous_sample</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="1039:9" pos:end="1039:41"><expr pos:start="1039:9" pos:end="1039:40"><name pos:start="1039:9" pos:end="1039:27"><name pos:start="1039:9" pos:end="1039:9">c</name><operator pos:start="1039:10" pos:end="1039:11">-&gt;</operator><name pos:start="1039:12" pos:end="1039:16">frame</name><operator pos:start="1039:17" pos:end="1039:17">.</operator><name pos:start="1039:18" pos:end="1039:27">nb_samples</name></name> <operator pos:start="1039:29" pos:end="1039:29">=</operator> <name pos:start="1039:31" pos:end="1039:35">count</name> <operator pos:start="1039:37" pos:end="1039:37">*</operator> <literal type="number" pos:start="1039:39" pos:end="1039:40">28</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1041:9" pos:end="1041:43"><expr pos:start="1041:9" pos:end="1041:42"><call pos:start="1041:9" pos:end="1041:42"><name pos:start="1041:9" pos:end="1041:24">bytestream2_seek</name><argument_list pos:start="1041:25" pos:end="1041:42">(<argument pos:start="1041:26" pos:end="1041:28"><expr pos:start="1041:26" pos:end="1041:28"><operator pos:start="1041:26" pos:end="1041:26">&amp;</operator><name pos:start="1041:27" pos:end="1041:28">gb</name></expr></argument>, <argument pos:start="1041:31" pos:end="1041:31"><expr pos:start="1041:31" pos:end="1041:31"><literal type="number" pos:start="1041:31" pos:end="1041:31">0</literal></expr></argument>, <argument pos:start="1041:34" pos:end="1041:41"><expr pos:start="1041:34" pos:end="1041:41"><name pos:start="1041:34" pos:end="1041:41">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1043:9" pos:end="1043:14">break;</break>

    </block_content>}</block>

    <case pos:start="1047:5" pos:end="1047:34">case <expr pos:start="1047:10" pos:end="1047:33"><name pos:start="1047:10" pos:end="1047:33">AV_CODEC_ID_ADPCM_EA_XAS</name></expr>:</case>

        <for pos:start="1049:9" pos:end="1107:9">for <control pos:start="1049:13" pos:end="1049:59">(<init pos:start="1049:14" pos:end="1049:23"><expr pos:start="1049:14" pos:end="1049:22"><name pos:start="1049:14" pos:end="1049:20">channel</name><operator pos:start="1049:21" pos:end="1049:21">=</operator><literal type="number" pos:start="1049:22" pos:end="1049:22">0</literal></expr>;</init> <condition pos:start="1049:25" pos:end="1049:48"><expr pos:start="1049:25" pos:end="1049:47"><name pos:start="1049:25" pos:end="1049:31">channel</name><operator pos:start="1049:32" pos:end="1049:32">&lt;</operator><name pos:start="1049:33" pos:end="1049:47"><name pos:start="1049:33" pos:end="1049:37">avctx</name><operator pos:start="1049:38" pos:end="1049:39">-&gt;</operator><name pos:start="1049:40" pos:end="1049:47">channels</name></name></expr>;</condition> <incr pos:start="1049:50" pos:end="1049:58"><expr pos:start="1049:50" pos:end="1049:58"><name pos:start="1049:50" pos:end="1049:56">channel</name><operator pos:start="1049:57" pos:end="1049:58">++</operator></expr></incr>)</control> <block pos:start="1049:61" pos:end="1107:9">{<block_content pos:start="1051:13" pos:end="1105:13">

            <decl_stmt pos:start="1051:13" pos:end="1051:38"><decl pos:start="1051:13" pos:end="1051:27"><type pos:start="1051:13" pos:end="1051:15"><name pos:start="1051:13" pos:end="1051:15">int</name></type> <name pos:start="1051:17" pos:end="1051:27"><name pos:start="1051:17" pos:end="1051:21">coeff</name><index pos:start="1051:22" pos:end="1051:24">[<expr pos:start="1051:23" pos:end="1051:23"><literal type="number" pos:start="1051:23" pos:end="1051:23">2</literal></expr>]</index><index pos:start="1051:25" pos:end="1051:27">[<expr pos:start="1051:26" pos:end="1051:26"><literal type="number" pos:start="1051:26" pos:end="1051:26">4</literal></expr>]</index></name></decl>, <decl pos:start="1051:30" pos:end="1051:37"><type ref="prev" pos:start="1051:13" pos:end="1051:15"/><name pos:start="1051:30" pos:end="1051:37"><name pos:start="1051:30" pos:end="1051:34">shift</name><index pos:start="1051:35" pos:end="1051:37">[<expr pos:start="1051:36" pos:end="1051:36"><literal type="number" pos:start="1051:36" pos:end="1051:36">4</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="1053:13" pos:end="1053:44"><decl pos:start="1053:13" pos:end="1053:43"><type pos:start="1053:13" pos:end="1053:21"><name pos:start="1053:13" pos:end="1053:19">int16_t</name> <modifier pos:start="1053:21" pos:end="1053:21">*</modifier></type><name pos:start="1053:22" pos:end="1053:22">s</name> <init pos:start="1053:24" pos:end="1053:43">= <expr pos:start="1053:26" pos:end="1053:43"><name pos:start="1053:26" pos:end="1053:43"><name pos:start="1053:26" pos:end="1053:34">samples_p</name><index pos:start="1053:35" pos:end="1053:43">[<expr pos:start="1053:36" pos:end="1053:42"><name pos:start="1053:36" pos:end="1053:42">channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <for pos:start="1055:13" pos:end="1073:13">for <control pos:start="1055:17" pos:end="1055:44">(<init pos:start="1055:18" pos:end="1055:23"><expr pos:start="1055:18" pos:end="1055:22"><name pos:start="1055:18" pos:end="1055:18">n</name> <operator pos:start="1055:20" pos:end="1055:20">=</operator> <literal type="number" pos:start="1055:22" pos:end="1055:22">0</literal></expr>;</init> <condition pos:start="1055:25" pos:end="1055:30"><expr pos:start="1055:25" pos:end="1055:29"><name pos:start="1055:25" pos:end="1055:25">n</name> <operator pos:start="1055:27" pos:end="1055:27">&lt;</operator> <literal type="number" pos:start="1055:29" pos:end="1055:29">4</literal></expr>;</condition> <incr pos:start="1055:32" pos:end="1055:43"><expr pos:start="1055:32" pos:end="1055:34"><name pos:start="1055:32" pos:end="1055:32">n</name><operator pos:start="1055:33" pos:end="1055:34">++</operator></expr><operator pos:start="1055:35" pos:end="1055:35">,</operator> <expr pos:start="1055:37" pos:end="1055:43"><name pos:start="1055:37" pos:end="1055:37">s</name> <operator pos:start="1055:39" pos:end="1055:40">+=</operator> <literal type="number" pos:start="1055:42" pos:end="1055:43">32</literal></expr></incr>)</control> <block pos:start="1055:46" pos:end="1073:13">{<block_content pos:start="1057:17" pos:end="1071:35">

                <decl_stmt pos:start="1057:17" pos:end="1057:70"><decl pos:start="1057:17" pos:end="1057:69"><type pos:start="1057:17" pos:end="1057:19"><name pos:start="1057:17" pos:end="1057:19">int</name></type> <name pos:start="1057:21" pos:end="1057:23">val</name> <init pos:start="1057:25" pos:end="1057:69">= <expr pos:start="1057:27" pos:end="1057:69"><call pos:start="1057:27" pos:end="1057:69"><name pos:start="1057:27" pos:end="1057:37">sign_extend</name><argument_list pos:start="1057:38" pos:end="1057:69">(<argument pos:start="1057:39" pos:end="1057:64"><expr pos:start="1057:39" pos:end="1057:64"><call pos:start="1057:39" pos:end="1057:64"><name pos:start="1057:39" pos:end="1057:59">bytestream2_get_le16u</name><argument_list pos:start="1057:60" pos:end="1057:64">(<argument pos:start="1057:61" pos:end="1057:63"><expr pos:start="1057:61" pos:end="1057:63"><operator pos:start="1057:61" pos:end="1057:61">&amp;</operator><name pos:start="1057:62" pos:end="1057:63">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1057:67" pos:end="1057:68"><expr pos:start="1057:67" pos:end="1057:68"><literal type="number" pos:start="1057:67" pos:end="1057:68">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <for pos:start="1059:17" pos:end="1061:65">for <control pos:start="1059:21" pos:end="1059:35">(<init pos:start="1059:22" pos:end="1059:25"><expr pos:start="1059:22" pos:end="1059:24"><name pos:start="1059:22" pos:end="1059:22">i</name><operator pos:start="1059:23" pos:end="1059:23">=</operator><literal type="number" pos:start="1059:24" pos:end="1059:24">0</literal></expr>;</init> <condition pos:start="1059:27" pos:end="1059:30"><expr pos:start="1059:27" pos:end="1059:29"><name pos:start="1059:27" pos:end="1059:27">i</name><operator pos:start="1059:28" pos:end="1059:28">&lt;</operator><literal type="number" pos:start="1059:29" pos:end="1059:29">2</literal></expr>;</condition> <incr pos:start="1059:32" pos:end="1059:34"><expr pos:start="1059:32" pos:end="1059:34"><name pos:start="1059:32" pos:end="1059:32">i</name><operator pos:start="1059:33" pos:end="1059:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1061:21" pos:end="1061:65"><block_content pos:start="1061:21" pos:end="1061:65">

                    <expr_stmt pos:start="1061:21" pos:end="1061:65"><expr pos:start="1061:21" pos:end="1061:64"><name pos:start="1061:21" pos:end="1061:31"><name pos:start="1061:21" pos:end="1061:25">coeff</name><index pos:start="1061:26" pos:end="1061:28">[<expr pos:start="1061:27" pos:end="1061:27"><name pos:start="1061:27" pos:end="1061:27">i</name></expr>]</index><index pos:start="1061:29" pos:end="1061:31">[<expr pos:start="1061:30" pos:end="1061:30"><name pos:start="1061:30" pos:end="1061:30">n</name></expr>]</index></name> <operator pos:start="1061:33" pos:end="1061:33">=</operator> <name pos:start="1061:35" pos:end="1061:64"><name pos:start="1061:35" pos:end="1061:48">ea_adpcm_table</name><index pos:start="1061:49" pos:end="1061:64">[<expr pos:start="1061:50" pos:end="1061:63"><operator pos:start="1061:50" pos:end="1061:50">(</operator><name pos:start="1061:51" pos:end="1061:53">val</name><operator pos:start="1061:54" pos:end="1061:54">&amp;</operator><literal type="number" pos:start="1061:55" pos:end="1061:58">0x0F</literal><operator pos:start="1061:59" pos:end="1061:59">)</operator><operator pos:start="1061:60" pos:end="1061:60">+</operator><literal type="number" pos:start="1061:61" pos:end="1061:61">4</literal><operator pos:start="1061:62" pos:end="1061:62">*</operator><name pos:start="1061:63" pos:end="1061:63">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="1063:17" pos:end="1063:35"><expr pos:start="1063:17" pos:end="1063:34"><name pos:start="1063:17" pos:end="1063:20"><name pos:start="1063:17" pos:end="1063:17">s</name><index pos:start="1063:18" pos:end="1063:20">[<expr pos:start="1063:19" pos:end="1063:19"><literal type="number" pos:start="1063:19" pos:end="1063:19">0</literal></expr>]</index></name> <operator pos:start="1063:22" pos:end="1063:22">=</operator> <name pos:start="1063:24" pos:end="1063:26">val</name> <operator pos:start="1063:28" pos:end="1063:28">&amp;</operator> <operator pos:start="1063:30" pos:end="1063:30">~</operator><literal type="number" pos:start="1063:31" pos:end="1063:34">0x0F</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="1067:17" pos:end="1067:66"><expr pos:start="1067:17" pos:end="1067:65"><name pos:start="1067:17" pos:end="1067:19">val</name> <operator pos:start="1067:21" pos:end="1067:21">=</operator> <call pos:start="1067:23" pos:end="1067:65"><name pos:start="1067:23" pos:end="1067:33">sign_extend</name><argument_list pos:start="1067:34" pos:end="1067:65">(<argument pos:start="1067:35" pos:end="1067:60"><expr pos:start="1067:35" pos:end="1067:60"><call pos:start="1067:35" pos:end="1067:60"><name pos:start="1067:35" pos:end="1067:55">bytestream2_get_le16u</name><argument_list pos:start="1067:56" pos:end="1067:60">(<argument pos:start="1067:57" pos:end="1067:59"><expr pos:start="1067:57" pos:end="1067:59"><operator pos:start="1067:57" pos:end="1067:57">&amp;</operator><name pos:start="1067:58" pos:end="1067:59">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1067:63" pos:end="1067:64"><expr pos:start="1067:63" pos:end="1067:64"><literal type="number" pos:start="1067:63" pos:end="1067:64">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1069:17" pos:end="1069:45"><expr pos:start="1069:17" pos:end="1069:44"><name pos:start="1069:17" pos:end="1069:24"><name pos:start="1069:17" pos:end="1069:21">shift</name><index pos:start="1069:22" pos:end="1069:24">[<expr pos:start="1069:23" pos:end="1069:23"><name pos:start="1069:23" pos:end="1069:23">n</name></expr>]</index></name> <operator pos:start="1069:26" pos:end="1069:26">=</operator> <literal type="number" pos:start="1069:28" pos:end="1069:31">20</literal> <operator pos:start="1069:31" pos:end="1069:31">-</operator> <operator pos:start="1069:33" pos:end="1069:33">(</operator><name pos:start="1069:34" pos:end="1069:36">val</name> <operator pos:start="1069:38" pos:end="1069:38">&amp;</operator> <literal type="number" pos:start="1069:40" pos:end="1069:43">0x0F</literal><operator pos:start="1069:44" pos:end="1069:44">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1071:17" pos:end="1071:35"><expr pos:start="1071:17" pos:end="1071:34"><name pos:start="1071:17" pos:end="1071:20"><name pos:start="1071:17" pos:end="1071:17">s</name><index pos:start="1071:18" pos:end="1071:20">[<expr pos:start="1071:19" pos:end="1071:19"><literal type="number" pos:start="1071:19" pos:end="1071:19">1</literal></expr>]</index></name> <operator pos:start="1071:22" pos:end="1071:22">=</operator> <name pos:start="1071:24" pos:end="1071:26">val</name> <operator pos:start="1071:28" pos:end="1071:28">&amp;</operator> <operator pos:start="1071:30" pos:end="1071:30">~</operator><literal type="number" pos:start="1071:31" pos:end="1071:34">0x0F</literal></expr>;</expr_stmt>

            </block_content>}</block></for>



            <for pos:start="1077:13" pos:end="1105:13">for <control pos:start="1077:17" pos:end="1077:33">(<init pos:start="1077:18" pos:end="1077:21"><expr pos:start="1077:18" pos:end="1077:20"><name pos:start="1077:18" pos:end="1077:18">m</name><operator pos:start="1077:19" pos:end="1077:19">=</operator><literal type="number" pos:start="1077:20" pos:end="1077:20">2</literal></expr>;</init> <condition pos:start="1077:23" pos:end="1077:27"><expr pos:start="1077:23" pos:end="1077:26"><name pos:start="1077:23" pos:end="1077:23">m</name><operator pos:start="1077:24" pos:end="1077:24">&lt;</operator><literal type="number" pos:start="1077:25" pos:end="1077:26">32</literal></expr>;</condition> <incr pos:start="1077:29" pos:end="1077:32"><expr pos:start="1077:29" pos:end="1077:32"><name pos:start="1077:29" pos:end="1077:29">m</name><operator pos:start="1077:30" pos:end="1077:31">+=</operator><literal type="number" pos:start="1077:32" pos:end="1077:32">2</literal></expr></incr>)</control> <block pos:start="1077:35" pos:end="1105:13">{<block_content pos:start="1079:17" pos:end="1103:17">

                <expr_stmt pos:start="1079:17" pos:end="1079:43"><expr pos:start="1079:17" pos:end="1079:42"><name pos:start="1079:17" pos:end="1079:17">s</name> <operator pos:start="1079:19" pos:end="1079:19">=</operator> <operator pos:start="1079:21" pos:end="1079:21">&amp;</operator><name pos:start="1079:22" pos:end="1079:42"><name pos:start="1079:22" pos:end="1079:30">samples_p</name><index pos:start="1079:31" pos:end="1079:39">[<expr pos:start="1079:32" pos:end="1079:38"><name pos:start="1079:32" pos:end="1079:38">channel</name></expr>]</index><index pos:start="1079:40" pos:end="1079:42">[<expr pos:start="1079:41" pos:end="1079:41"><name pos:start="1079:41" pos:end="1079:41">m</name></expr>]</index></name></expr>;</expr_stmt>

                <for pos:start="1081:17" pos:end="1103:17">for <control pos:start="1081:21" pos:end="1081:48">(<init pos:start="1081:22" pos:end="1081:27"><expr pos:start="1081:22" pos:end="1081:26"><name pos:start="1081:22" pos:end="1081:22">n</name> <operator pos:start="1081:24" pos:end="1081:24">=</operator> <literal type="number" pos:start="1081:26" pos:end="1081:26">0</literal></expr>;</init> <condition pos:start="1081:29" pos:end="1081:34"><expr pos:start="1081:29" pos:end="1081:33"><name pos:start="1081:29" pos:end="1081:29">n</name> <operator pos:start="1081:31" pos:end="1081:31">&lt;</operator> <literal type="number" pos:start="1081:33" pos:end="1081:33">4</literal></expr>;</condition> <incr pos:start="1081:36" pos:end="1081:47"><expr pos:start="1081:36" pos:end="1081:38"><name pos:start="1081:36" pos:end="1081:36">n</name><operator pos:start="1081:37" pos:end="1081:38">++</operator></expr><operator pos:start="1081:39" pos:end="1081:39">,</operator> <expr pos:start="1081:41" pos:end="1081:47"><name pos:start="1081:41" pos:end="1081:41">s</name> <operator pos:start="1081:43" pos:end="1081:44">+=</operator> <literal type="number" pos:start="1081:46" pos:end="1081:47">32</literal></expr></incr>)</control> <block pos:start="1081:50" pos:end="1103:17">{<block_content pos:start="1083:21" pos:end="1101:70">

                    <decl_stmt pos:start="1083:21" pos:end="1083:36"><decl pos:start="1083:21" pos:end="1083:29"><type pos:start="1083:21" pos:end="1083:23"><name pos:start="1083:21" pos:end="1083:23">int</name></type> <name pos:start="1083:25" pos:end="1083:29">level</name></decl>, <decl pos:start="1083:32" pos:end="1083:35"><type ref="prev" pos:start="1083:21" pos:end="1083:23"/><name pos:start="1083:32" pos:end="1083:35">pred</name></decl>;</decl_stmt>

                    <decl_stmt pos:start="1085:21" pos:end="1085:58"><decl pos:start="1085:21" pos:end="1085:57"><type pos:start="1085:21" pos:end="1085:23"><name pos:start="1085:21" pos:end="1085:23">int</name></type> <name pos:start="1085:25" pos:end="1085:28">byte</name> <init pos:start="1085:30" pos:end="1085:57">= <expr pos:start="1085:32" pos:end="1085:57"><call pos:start="1085:32" pos:end="1085:57"><name pos:start="1085:32" pos:end="1085:52">bytestream2_get_byteu</name><argument_list pos:start="1085:53" pos:end="1085:57">(<argument pos:start="1085:54" pos:end="1085:56"><expr pos:start="1085:54" pos:end="1085:56"><operator pos:start="1085:54" pos:end="1085:54">&amp;</operator><name pos:start="1085:55" pos:end="1085:56">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="1089:21" pos:end="1089:66"><expr pos:start="1089:21" pos:end="1089:65"><name pos:start="1089:21" pos:end="1089:25">level</name> <operator pos:start="1089:27" pos:end="1089:27">=</operator> <call pos:start="1089:29" pos:end="1089:53"><name pos:start="1089:29" pos:end="1089:39">sign_extend</name><argument_list pos:start="1089:40" pos:end="1089:53">(<argument pos:start="1089:41" pos:end="1089:49"><expr pos:start="1089:41" pos:end="1089:49"><name pos:start="1089:41" pos:end="1089:44">byte</name> <operator pos:start="1089:46" pos:end="1089:47">&gt;&gt;</operator> <literal type="number" pos:start="1089:49" pos:end="1089:49">4</literal></expr></argument>, <argument pos:start="1089:52" pos:end="1089:52"><expr pos:start="1089:52" pos:end="1089:52"><literal type="number" pos:start="1089:52" pos:end="1089:52">4</literal></expr></argument>)</argument_list></call> <operator pos:start="1089:55" pos:end="1089:56">&lt;&lt;</operator> <name pos:start="1089:58" pos:end="1089:65"><name pos:start="1089:58" pos:end="1089:62">shift</name><index pos:start="1089:63" pos:end="1089:65">[<expr pos:start="1089:64" pos:end="1089:64"><name pos:start="1089:64" pos:end="1089:64">n</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1091:21" pos:end="1091:70"><expr pos:start="1091:21" pos:end="1091:69"><name pos:start="1091:21" pos:end="1091:24">pred</name>  <operator pos:start="1091:27" pos:end="1091:27">=</operator> <name pos:start="1091:29" pos:end="1091:33"><name pos:start="1091:29" pos:end="1091:29">s</name><index pos:start="1091:30" pos:end="1091:33">[<expr pos:start="1091:31" pos:end="1091:32"><operator pos:start="1091:31" pos:end="1091:31">-</operator><literal type="number" pos:start="1091:32" pos:end="1091:32">1</literal></expr>]</index></name> <operator pos:start="1091:35" pos:end="1091:35">*</operator> <name pos:start="1091:37" pos:end="1091:47"><name pos:start="1091:37" pos:end="1091:41">coeff</name><index pos:start="1091:42" pos:end="1091:44">[<expr pos:start="1091:43" pos:end="1091:43"><literal type="number" pos:start="1091:43" pos:end="1091:43">0</literal></expr>]</index><index pos:start="1091:45" pos:end="1091:47">[<expr pos:start="1091:46" pos:end="1091:46"><name pos:start="1091:46" pos:end="1091:46">n</name></expr>]</index></name> <operator pos:start="1091:49" pos:end="1091:49">+</operator> <name pos:start="1091:51" pos:end="1091:55"><name pos:start="1091:51" pos:end="1091:51">s</name><index pos:start="1091:52" pos:end="1091:55">[<expr pos:start="1091:53" pos:end="1091:54"><operator pos:start="1091:53" pos:end="1091:53">-</operator><literal type="number" pos:start="1091:54" pos:end="1091:54">2</literal></expr>]</index></name> <operator pos:start="1091:57" pos:end="1091:57">*</operator> <name pos:start="1091:59" pos:end="1091:69"><name pos:start="1091:59" pos:end="1091:63">coeff</name><index pos:start="1091:64" pos:end="1091:66">[<expr pos:start="1091:65" pos:end="1091:65"><literal type="number" pos:start="1091:65" pos:end="1091:65">1</literal></expr>]</index><index pos:start="1091:67" pos:end="1091:69">[<expr pos:start="1091:68" pos:end="1091:68"><name pos:start="1091:68" pos:end="1091:68">n</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1093:21" pos:end="1093:70"><expr pos:start="1093:21" pos:end="1093:69"><name pos:start="1093:21" pos:end="1093:24"><name pos:start="1093:21" pos:end="1093:21">s</name><index pos:start="1093:22" pos:end="1093:24">[<expr pos:start="1093:23" pos:end="1093:23"><literal type="number" pos:start="1093:23" pos:end="1093:23">0</literal></expr>]</index></name>  <operator pos:start="1093:27" pos:end="1093:27">=</operator> <call pos:start="1093:29" pos:end="1093:69"><name pos:start="1093:29" pos:end="1093:41">av_clip_int16</name><argument_list pos:start="1093:42" pos:end="1093:69">(<argument pos:start="1093:43" pos:end="1093:68"><expr pos:start="1093:43" pos:end="1093:68"><operator pos:start="1093:43" pos:end="1093:43">(</operator><name pos:start="1093:44" pos:end="1093:48">level</name> <operator pos:start="1093:50" pos:end="1093:50">+</operator> <name pos:start="1093:52" pos:end="1093:55">pred</name> <operator pos:start="1093:57" pos:end="1093:57">+</operator> <literal type="number" pos:start="1093:59" pos:end="1093:62">0x80</literal><operator pos:start="1093:63" pos:end="1093:63">)</operator> <operator pos:start="1093:65" pos:end="1093:66">&gt;&gt;</operator> <literal type="number" pos:start="1093:68" pos:end="1093:68">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="1097:21" pos:end="1097:61"><expr pos:start="1097:21" pos:end="1097:60"><name pos:start="1097:21" pos:end="1097:25">level</name> <operator pos:start="1097:27" pos:end="1097:27">=</operator> <call pos:start="1097:29" pos:end="1097:48"><name pos:start="1097:29" pos:end="1097:39">sign_extend</name><argument_list pos:start="1097:40" pos:end="1097:48">(<argument pos:start="1097:41" pos:end="1097:44"><expr pos:start="1097:41" pos:end="1097:44"><name pos:start="1097:41" pos:end="1097:44">byte</name></expr></argument>, <argument pos:start="1097:47" pos:end="1097:47"><expr pos:start="1097:47" pos:end="1097:47"><literal type="number" pos:start="1097:47" pos:end="1097:47">4</literal></expr></argument>)</argument_list></call> <operator pos:start="1097:50" pos:end="1097:51">&lt;&lt;</operator> <name pos:start="1097:53" pos:end="1097:60"><name pos:start="1097:53" pos:end="1097:57">shift</name><index pos:start="1097:58" pos:end="1097:60">[<expr pos:start="1097:59" pos:end="1097:59"><name pos:start="1097:59" pos:end="1097:59">n</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1099:21" pos:end="1099:69"><expr pos:start="1099:21" pos:end="1099:68"><name pos:start="1099:21" pos:end="1099:24">pred</name>  <operator pos:start="1099:27" pos:end="1099:27">=</operator> <name pos:start="1099:29" pos:end="1099:32"><name pos:start="1099:29" pos:end="1099:29">s</name><index pos:start="1099:30" pos:end="1099:32">[<expr pos:start="1099:31" pos:end="1099:31"><literal type="number" pos:start="1099:31" pos:end="1099:31">0</literal></expr>]</index></name> <operator pos:start="1099:34" pos:end="1099:34">*</operator> <name pos:start="1099:36" pos:end="1099:46"><name pos:start="1099:36" pos:end="1099:40">coeff</name><index pos:start="1099:41" pos:end="1099:43">[<expr pos:start="1099:42" pos:end="1099:42"><literal type="number" pos:start="1099:42" pos:end="1099:42">0</literal></expr>]</index><index pos:start="1099:44" pos:end="1099:46">[<expr pos:start="1099:45" pos:end="1099:45"><name pos:start="1099:45" pos:end="1099:45">n</name></expr>]</index></name> <operator pos:start="1099:48" pos:end="1099:48">+</operator> <name pos:start="1099:50" pos:end="1099:54"><name pos:start="1099:50" pos:end="1099:50">s</name><index pos:start="1099:51" pos:end="1099:54">[<expr pos:start="1099:52" pos:end="1099:53"><operator pos:start="1099:52" pos:end="1099:52">-</operator><literal type="number" pos:start="1099:53" pos:end="1099:53">1</literal></expr>]</index></name> <operator pos:start="1099:56" pos:end="1099:56">*</operator> <name pos:start="1099:58" pos:end="1099:68"><name pos:start="1099:58" pos:end="1099:62">coeff</name><index pos:start="1099:63" pos:end="1099:65">[<expr pos:start="1099:64" pos:end="1099:64"><literal type="number" pos:start="1099:64" pos:end="1099:64">1</literal></expr>]</index><index pos:start="1099:66" pos:end="1099:68">[<expr pos:start="1099:67" pos:end="1099:67"><name pos:start="1099:67" pos:end="1099:67">n</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1101:21" pos:end="1101:70"><expr pos:start="1101:21" pos:end="1101:69"><name pos:start="1101:21" pos:end="1101:24"><name pos:start="1101:21" pos:end="1101:21">s</name><index pos:start="1101:22" pos:end="1101:24">[<expr pos:start="1101:23" pos:end="1101:23"><literal type="number" pos:start="1101:23" pos:end="1101:23">1</literal></expr>]</index></name>  <operator pos:start="1101:27" pos:end="1101:27">=</operator> <call pos:start="1101:29" pos:end="1101:69"><name pos:start="1101:29" pos:end="1101:41">av_clip_int16</name><argument_list pos:start="1101:42" pos:end="1101:69">(<argument pos:start="1101:43" pos:end="1101:68"><expr pos:start="1101:43" pos:end="1101:68"><operator pos:start="1101:43" pos:end="1101:43">(</operator><name pos:start="1101:44" pos:end="1101:48">level</name> <operator pos:start="1101:50" pos:end="1101:50">+</operator> <name pos:start="1101:52" pos:end="1101:55">pred</name> <operator pos:start="1101:57" pos:end="1101:57">+</operator> <literal type="number" pos:start="1101:59" pos:end="1101:62">0x80</literal><operator pos:start="1101:63" pos:end="1101:63">)</operator> <operator pos:start="1101:65" pos:end="1101:66">&gt;&gt;</operator> <literal type="number" pos:start="1101:68" pos:end="1101:68">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <break pos:start="1109:9" pos:end="1109:14">break;</break>

    <case pos:start="1111:5" pos:end="1111:35">case <expr pos:start="1111:10" pos:end="1111:34"><name pos:start="1111:10" pos:end="1111:34">AV_CODEC_ID_ADPCM_IMA_AMV</name></expr>:</case>

        <expr_stmt pos:start="1113:9" pos:end="1113:77"><expr pos:start="1113:9" pos:end="1113:76"><name pos:start="1113:9" pos:end="1113:20"><name pos:start="1113:9" pos:end="1113:9">c</name><operator pos:start="1113:10" pos:end="1113:11">-&gt;</operator><name pos:start="1113:12" pos:end="1113:17">status</name><index pos:start="1113:18" pos:end="1113:20">[<expr pos:start="1113:19" pos:end="1113:19"><literal type="number" pos:start="1113:19" pos:end="1113:19">0</literal></expr>]</index></name><operator pos:start="1113:21" pos:end="1113:21">.</operator><name pos:start="1113:22" pos:end="1113:30">predictor</name> <operator pos:start="1113:32" pos:end="1113:32">=</operator> <call pos:start="1113:34" pos:end="1113:76"><name pos:start="1113:34" pos:end="1113:44">sign_extend</name><argument_list pos:start="1113:45" pos:end="1113:76">(<argument pos:start="1113:46" pos:end="1113:71"><expr pos:start="1113:46" pos:end="1113:71"><call pos:start="1113:46" pos:end="1113:71"><name pos:start="1113:46" pos:end="1113:66">bytestream2_get_le16u</name><argument_list pos:start="1113:67" pos:end="1113:71">(<argument pos:start="1113:68" pos:end="1113:70"><expr pos:start="1113:68" pos:end="1113:70"><operator pos:start="1113:68" pos:end="1113:68">&amp;</operator><name pos:start="1113:69" pos:end="1113:70">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1113:74" pos:end="1113:75"><expr pos:start="1113:74" pos:end="1113:75"><literal type="number" pos:start="1113:74" pos:end="1113:75">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1115:9" pos:end="1115:61"><expr pos:start="1115:9" pos:end="1115:60"><name pos:start="1115:9" pos:end="1115:20"><name pos:start="1115:9" pos:end="1115:9">c</name><operator pos:start="1115:10" pos:end="1115:11">-&gt;</operator><name pos:start="1115:12" pos:end="1115:17">status</name><index pos:start="1115:18" pos:end="1115:20">[<expr pos:start="1115:19" pos:end="1115:19"><literal type="number" pos:start="1115:19" pos:end="1115:19">0</literal></expr>]</index></name><operator pos:start="1115:21" pos:end="1115:21">.</operator><name pos:start="1115:22" pos:end="1115:31">step_index</name> <operator pos:start="1115:33" pos:end="1115:33">=</operator> <call pos:start="1115:35" pos:end="1115:60"><name pos:start="1115:35" pos:end="1115:55">bytestream2_get_le16u</name><argument_list pos:start="1115:56" pos:end="1115:60">(<argument pos:start="1115:57" pos:end="1115:59"><expr pos:start="1115:57" pos:end="1115:59"><operator pos:start="1115:57" pos:end="1115:57">&amp;</operator><name pos:start="1115:58" pos:end="1115:59">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1117:9" pos:end="1117:34"><expr pos:start="1117:9" pos:end="1117:33"><call pos:start="1117:9" pos:end="1117:33"><name pos:start="1117:9" pos:end="1117:25">bytestream2_skipu</name><argument_list pos:start="1117:26" pos:end="1117:33">(<argument pos:start="1117:27" pos:end="1117:29"><expr pos:start="1117:27" pos:end="1117:29"><operator pos:start="1117:27" pos:end="1117:27">&amp;</operator><name pos:start="1117:28" pos:end="1117:29">gb</name></expr></argument>, <argument pos:start="1117:32" pos:end="1117:32"><expr pos:start="1117:32" pos:end="1117:32"><literal type="number" pos:start="1117:32" pos:end="1117:32">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1119:9" pos:end="1127:9"><if pos:start="1119:9" pos:end="1127:9">if <condition pos:start="1119:12" pos:end="1119:42">(<expr pos:start="1119:13" pos:end="1119:41"><name pos:start="1119:13" pos:end="1119:24"><name pos:start="1119:13" pos:end="1119:13">c</name><operator pos:start="1119:14" pos:end="1119:15">-&gt;</operator><name pos:start="1119:16" pos:end="1119:21">status</name><index pos:start="1119:22" pos:end="1119:24">[<expr pos:start="1119:23" pos:end="1119:23"><literal type="number" pos:start="1119:23" pos:end="1119:23">0</literal></expr>]</index></name><operator pos:start="1119:25" pos:end="1119:25">.</operator><name pos:start="1119:26" pos:end="1119:35">step_index</name> <operator pos:start="1119:37" pos:end="1119:37">&gt;</operator> <literal type="number" pos:start="1119:39" pos:end="1119:41">88u</literal></expr>)</condition> <block pos:start="1119:44" pos:end="1127:9">{<block_content pos:start="1121:13" pos:end="1125:39">

            <expr_stmt pos:start="1121:13" pos:end="1123:44"><expr pos:start="1121:13" pos:end="1123:43"><call pos:start="1121:13" pos:end="1123:43"><name pos:start="1121:13" pos:end="1121:18">av_log</name><argument_list pos:start="1121:19" pos:end="1123:43">(<argument pos:start="1121:20" pos:end="1121:24"><expr pos:start="1121:20" pos:end="1121:24"><name pos:start="1121:20" pos:end="1121:24">avctx</name></expr></argument>, <argument pos:start="1121:27" pos:end="1121:38"><expr pos:start="1121:27" pos:end="1121:38"><name pos:start="1121:27" pos:end="1121:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1121:41" pos:end="1121:66"><expr pos:start="1121:41" pos:end="1121:66"><literal type="string" pos:start="1121:41" pos:end="1121:66">"ERROR: step_index = %i\n"</literal></expr></argument>,

                   <argument pos:start="1123:20" pos:end="1123:42"><expr pos:start="1123:20" pos:end="1123:42"><name pos:start="1123:20" pos:end="1123:31"><name pos:start="1123:20" pos:end="1123:20">c</name><operator pos:start="1123:21" pos:end="1123:22">-&gt;</operator><name pos:start="1123:23" pos:end="1123:28">status</name><index pos:start="1123:29" pos:end="1123:31">[<expr pos:start="1123:30" pos:end="1123:30"><literal type="number" pos:start="1123:30" pos:end="1123:30">0</literal></expr>]</index></name><operator pos:start="1123:32" pos:end="1123:32">.</operator><name pos:start="1123:33" pos:end="1123:42">step_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="1125:13" pos:end="1125:39">return <expr pos:start="1125:20" pos:end="1125:38"><name pos:start="1125:20" pos:end="1125:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <for pos:start="1131:9" pos:end="1141:9">for <control pos:start="1131:13" pos:end="1131:52">(<init pos:start="1131:14" pos:end="1131:40"><expr pos:start="1131:14" pos:end="1131:39"><name pos:start="1131:14" pos:end="1131:14">n</name> <operator pos:start="1131:16" pos:end="1131:16">=</operator> <name pos:start="1131:18" pos:end="1131:27">nb_samples</name> <operator pos:start="1131:29" pos:end="1131:30">&gt;&gt;</operator> <operator pos:start="1131:32" pos:end="1131:32">(</operator><literal type="number" pos:start="1131:33" pos:end="1131:35">1</literal> <operator pos:start="1131:35" pos:end="1131:35">-</operator> <name pos:start="1131:37" pos:end="1131:38">st</name><operator pos:start="1131:39" pos:end="1131:39">)</operator></expr>;</init> <condition pos:start="1131:42" pos:end="1131:47"><expr pos:start="1131:42" pos:end="1131:46"><name pos:start="1131:42" pos:end="1131:42">n</name> <operator pos:start="1131:44" pos:end="1131:44">&gt;</operator> <literal type="number" pos:start="1131:46" pos:end="1131:46">0</literal></expr>;</condition> <incr pos:start="1131:49" pos:end="1131:51"><expr pos:start="1131:49" pos:end="1131:51"><name pos:start="1131:49" pos:end="1131:49">n</name><operator pos:start="1131:50" pos:end="1131:51">--</operator></expr></incr>)</control> <block pos:start="1131:54" pos:end="1141:9">{<block_content pos:start="1133:13" pos:end="1139:76">

            <decl_stmt pos:start="1133:13" pos:end="1133:47"><decl pos:start="1133:13" pos:end="1133:46"><type pos:start="1133:13" pos:end="1133:15"><name pos:start="1133:13" pos:end="1133:15">int</name></type> <name pos:start="1133:17" pos:end="1133:17">v</name> <init pos:start="1133:19" pos:end="1133:46">= <expr pos:start="1133:21" pos:end="1133:46"><call pos:start="1133:21" pos:end="1133:46"><name pos:start="1133:21" pos:end="1133:41">bytestream2_get_byteu</name><argument_list pos:start="1133:42" pos:end="1133:46">(<argument pos:start="1133:43" pos:end="1133:45"><expr pos:start="1133:43" pos:end="1133:45"><operator pos:start="1133:43" pos:end="1133:43">&amp;</operator><name pos:start="1133:44" pos:end="1133:45">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="1137:13" pos:end="1137:75"><expr pos:start="1137:13" pos:end="1137:74"><operator pos:start="1137:13" pos:end="1137:13">*</operator><name pos:start="1137:14" pos:end="1137:20">samples</name><operator pos:start="1137:21" pos:end="1137:22">++</operator> <operator pos:start="1137:24" pos:end="1137:24">=</operator> <call pos:start="1137:26" pos:end="1137:74"><name pos:start="1137:26" pos:end="1137:48">adpcm_ima_expand_nibble</name><argument_list pos:start="1137:49" pos:end="1137:74">(<argument pos:start="1137:50" pos:end="1137:62"><expr pos:start="1137:50" pos:end="1137:62"><operator pos:start="1137:50" pos:end="1137:50">&amp;</operator><name pos:start="1137:51" pos:end="1137:62"><name pos:start="1137:51" pos:end="1137:51">c</name><operator pos:start="1137:52" pos:end="1137:53">-&gt;</operator><name pos:start="1137:54" pos:end="1137:59">status</name><index pos:start="1137:60" pos:end="1137:62">[<expr pos:start="1137:61" pos:end="1137:61"><literal type="number" pos:start="1137:61" pos:end="1137:61">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1137:65" pos:end="1137:70"><expr pos:start="1137:65" pos:end="1137:70"><name pos:start="1137:65" pos:end="1137:65">v</name> <operator pos:start="1137:67" pos:end="1137:68">&gt;&gt;</operator> <literal type="number" pos:start="1137:70" pos:end="1137:70">4</literal></expr></argument>, <argument pos:start="1137:73" pos:end="1137:73"><expr pos:start="1137:73" pos:end="1137:73"><literal type="number" pos:start="1137:73" pos:end="1137:73">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1139:13" pos:end="1139:76"><expr pos:start="1139:13" pos:end="1139:75"><operator pos:start="1139:13" pos:end="1139:13">*</operator><name pos:start="1139:14" pos:end="1139:20">samples</name><operator pos:start="1139:21" pos:end="1139:22">++</operator> <operator pos:start="1139:24" pos:end="1139:24">=</operator> <call pos:start="1139:26" pos:end="1139:75"><name pos:start="1139:26" pos:end="1139:48">adpcm_ima_expand_nibble</name><argument_list pos:start="1139:49" pos:end="1139:75">(<argument pos:start="1139:50" pos:end="1139:62"><expr pos:start="1139:50" pos:end="1139:62"><operator pos:start="1139:50" pos:end="1139:50">&amp;</operator><name pos:start="1139:51" pos:end="1139:62"><name pos:start="1139:51" pos:end="1139:51">c</name><operator pos:start="1139:52" pos:end="1139:53">-&gt;</operator><name pos:start="1139:54" pos:end="1139:59">status</name><index pos:start="1139:60" pos:end="1139:62">[<expr pos:start="1139:61" pos:end="1139:61"><literal type="number" pos:start="1139:61" pos:end="1139:61">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="1139:65" pos:end="1139:71"><expr pos:start="1139:65" pos:end="1139:71"><name pos:start="1139:65" pos:end="1139:65">v</name> <operator pos:start="1139:67" pos:end="1139:67">&amp;</operator> <literal type="number" pos:start="1139:69" pos:end="1139:71">0xf</literal></expr></argument>, <argument pos:start="1139:74" pos:end="1139:74"><expr pos:start="1139:74" pos:end="1139:74"><literal type="number" pos:start="1139:74" pos:end="1139:74">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="1143:9" pos:end="1143:14">break;</break>

    <case pos:start="1145:5" pos:end="1145:38">case <expr pos:start="1145:10" pos:end="1145:37"><name pos:start="1145:10" pos:end="1145:37">AV_CODEC_ID_ADPCM_IMA_SMJPEG</name></expr>:</case>

        <for pos:start="1147:9" pos:end="1165:9">for <control pos:start="1147:13" pos:end="1147:45">(<init pos:start="1147:14" pos:end="1147:19"><expr pos:start="1147:14" pos:end="1147:18"><name pos:start="1147:14" pos:end="1147:14">i</name> <operator pos:start="1147:16" pos:end="1147:16">=</operator> <literal type="number" pos:start="1147:18" pos:end="1147:18">0</literal></expr>;</init> <condition pos:start="1147:21" pos:end="1147:40"><expr pos:start="1147:21" pos:end="1147:39"><name pos:start="1147:21" pos:end="1147:21">i</name> <operator pos:start="1147:23" pos:end="1147:23">&lt;</operator> <name pos:start="1147:25" pos:end="1147:39"><name pos:start="1147:25" pos:end="1147:29">avctx</name><operator pos:start="1147:30" pos:end="1147:31">-&gt;</operator><name pos:start="1147:32" pos:end="1147:39">channels</name></name></expr>;</condition> <incr pos:start="1147:42" pos:end="1147:44"><expr pos:start="1147:42" pos:end="1147:44"><name pos:start="1147:42" pos:end="1147:42">i</name><operator pos:start="1147:43" pos:end="1147:44">++</operator></expr></incr>)</control> <block pos:start="1147:47" pos:end="1165:9">{<block_content pos:start="1149:13" pos:end="1163:13">

            <expr_stmt pos:start="1149:13" pos:end="1149:81"><expr pos:start="1149:13" pos:end="1149:80"><name pos:start="1149:13" pos:end="1149:24"><name pos:start="1149:13" pos:end="1149:13">c</name><operator pos:start="1149:14" pos:end="1149:15">-&gt;</operator><name pos:start="1149:16" pos:end="1149:21">status</name><index pos:start="1149:22" pos:end="1149:24">[<expr pos:start="1149:23" pos:end="1149:23"><name pos:start="1149:23" pos:end="1149:23">i</name></expr>]</index></name><operator pos:start="1149:25" pos:end="1149:25">.</operator><name pos:start="1149:26" pos:end="1149:34">predictor</name> <operator pos:start="1149:36" pos:end="1149:36">=</operator> <call pos:start="1149:38" pos:end="1149:80"><name pos:start="1149:38" pos:end="1149:48">sign_extend</name><argument_list pos:start="1149:49" pos:end="1149:80">(<argument pos:start="1149:50" pos:end="1149:75"><expr pos:start="1149:50" pos:end="1149:75"><call pos:start="1149:50" pos:end="1149:75"><name pos:start="1149:50" pos:end="1149:70">bytestream2_get_be16u</name><argument_list pos:start="1149:71" pos:end="1149:75">(<argument pos:start="1149:72" pos:end="1149:74"><expr pos:start="1149:72" pos:end="1149:74"><operator pos:start="1149:72" pos:end="1149:72">&amp;</operator><name pos:start="1149:73" pos:end="1149:74">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1149:78" pos:end="1149:79"><expr pos:start="1149:78" pos:end="1149:79"><literal type="number" pos:start="1149:78" pos:end="1149:79">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1151:13" pos:end="1151:65"><expr pos:start="1151:13" pos:end="1151:64"><name pos:start="1151:13" pos:end="1151:24"><name pos:start="1151:13" pos:end="1151:13">c</name><operator pos:start="1151:14" pos:end="1151:15">-&gt;</operator><name pos:start="1151:16" pos:end="1151:21">status</name><index pos:start="1151:22" pos:end="1151:24">[<expr pos:start="1151:23" pos:end="1151:23"><name pos:start="1151:23" pos:end="1151:23">i</name></expr>]</index></name><operator pos:start="1151:25" pos:end="1151:25">.</operator><name pos:start="1151:26" pos:end="1151:35">step_index</name> <operator pos:start="1151:37" pos:end="1151:37">=</operator> <call pos:start="1151:39" pos:end="1151:64"><name pos:start="1151:39" pos:end="1151:59">bytestream2_get_byteu</name><argument_list pos:start="1151:60" pos:end="1151:64">(<argument pos:start="1151:61" pos:end="1151:63"><expr pos:start="1151:61" pos:end="1151:63"><operator pos:start="1151:61" pos:end="1151:61">&amp;</operator><name pos:start="1151:62" pos:end="1151:63">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1153:13" pos:end="1153:38"><expr pos:start="1153:13" pos:end="1153:37"><call pos:start="1153:13" pos:end="1153:37"><name pos:start="1153:13" pos:end="1153:29">bytestream2_skipu</name><argument_list pos:start="1153:30" pos:end="1153:37">(<argument pos:start="1153:31" pos:end="1153:33"><expr pos:start="1153:31" pos:end="1153:33"><operator pos:start="1153:31" pos:end="1153:31">&amp;</operator><name pos:start="1153:32" pos:end="1153:33">gb</name></expr></argument>, <argument pos:start="1153:36" pos:end="1153:36"><expr pos:start="1153:36" pos:end="1153:36"><literal type="number" pos:start="1153:36" pos:end="1153:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1155:13" pos:end="1163:13"><if pos:start="1155:13" pos:end="1163:13">if <condition pos:start="1155:16" pos:end="1155:46">(<expr pos:start="1155:17" pos:end="1155:45"><name pos:start="1155:17" pos:end="1155:28"><name pos:start="1155:17" pos:end="1155:17">c</name><operator pos:start="1155:18" pos:end="1155:19">-&gt;</operator><name pos:start="1155:20" pos:end="1155:25">status</name><index pos:start="1155:26" pos:end="1155:28">[<expr pos:start="1155:27" pos:end="1155:27"><name pos:start="1155:27" pos:end="1155:27">i</name></expr>]</index></name><operator pos:start="1155:29" pos:end="1155:29">.</operator><name pos:start="1155:30" pos:end="1155:39">step_index</name> <operator pos:start="1155:41" pos:end="1155:41">&gt;</operator> <literal type="number" pos:start="1155:43" pos:end="1155:45">88u</literal></expr>)</condition> <block pos:start="1155:48" pos:end="1163:13">{<block_content pos:start="1157:17" pos:end="1161:43">

                <expr_stmt pos:start="1157:17" pos:end="1159:48"><expr pos:start="1157:17" pos:end="1159:47"><call pos:start="1157:17" pos:end="1159:47"><name pos:start="1157:17" pos:end="1157:22">av_log</name><argument_list pos:start="1157:23" pos:end="1159:47">(<argument pos:start="1157:24" pos:end="1157:28"><expr pos:start="1157:24" pos:end="1157:28"><name pos:start="1157:24" pos:end="1157:28">avctx</name></expr></argument>, <argument pos:start="1157:31" pos:end="1157:42"><expr pos:start="1157:31" pos:end="1157:42"><name pos:start="1157:31" pos:end="1157:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1157:45" pos:end="1157:70"><expr pos:start="1157:45" pos:end="1157:70"><literal type="string" pos:start="1157:45" pos:end="1157:70">"ERROR: step_index = %i\n"</literal></expr></argument>,

                       <argument pos:start="1159:24" pos:end="1159:46"><expr pos:start="1159:24" pos:end="1159:46"><name pos:start="1159:24" pos:end="1159:35"><name pos:start="1159:24" pos:end="1159:24">c</name><operator pos:start="1159:25" pos:end="1159:26">-&gt;</operator><name pos:start="1159:27" pos:end="1159:32">status</name><index pos:start="1159:33" pos:end="1159:35">[<expr pos:start="1159:34" pos:end="1159:34"><name pos:start="1159:34" pos:end="1159:34">i</name></expr>]</index></name><operator pos:start="1159:36" pos:end="1159:36">.</operator><name pos:start="1159:37" pos:end="1159:46">step_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="1161:17" pos:end="1161:43">return <expr pos:start="1161:24" pos:end="1161:42"><name pos:start="1161:24" pos:end="1161:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>



        <for pos:start="1169:9" pos:end="1179:9">for <control pos:start="1169:13" pos:end="1169:52">(<init pos:start="1169:14" pos:end="1169:40"><expr pos:start="1169:14" pos:end="1169:39"><name pos:start="1169:14" pos:end="1169:14">n</name> <operator pos:start="1169:16" pos:end="1169:16">=</operator> <name pos:start="1169:18" pos:end="1169:27">nb_samples</name> <operator pos:start="1169:29" pos:end="1169:30">&gt;&gt;</operator> <operator pos:start="1169:32" pos:end="1169:32">(</operator><literal type="number" pos:start="1169:33" pos:end="1169:35">1</literal> <operator pos:start="1169:35" pos:end="1169:35">-</operator> <name pos:start="1169:37" pos:end="1169:38">st</name><operator pos:start="1169:39" pos:end="1169:39">)</operator></expr>;</init> <condition pos:start="1169:42" pos:end="1169:47"><expr pos:start="1169:42" pos:end="1169:46"><name pos:start="1169:42" pos:end="1169:42">n</name> <operator pos:start="1169:44" pos:end="1169:44">&gt;</operator> <literal type="number" pos:start="1169:46" pos:end="1169:46">0</literal></expr>;</condition> <incr pos:start="1169:49" pos:end="1169:51"><expr pos:start="1169:49" pos:end="1169:51"><name pos:start="1169:49" pos:end="1169:49">n</name><operator pos:start="1169:50" pos:end="1169:51">--</operator></expr></incr>)</control> <block pos:start="1169:54" pos:end="1179:9">{<block_content pos:start="1171:13" pos:end="1177:80">

            <decl_stmt pos:start="1171:13" pos:end="1171:47"><decl pos:start="1171:13" pos:end="1171:46"><type pos:start="1171:13" pos:end="1171:15"><name pos:start="1171:13" pos:end="1171:15">int</name></type> <name pos:start="1171:17" pos:end="1171:17">v</name> <init pos:start="1171:19" pos:end="1171:46">= <expr pos:start="1171:21" pos:end="1171:46"><call pos:start="1171:21" pos:end="1171:46"><name pos:start="1171:21" pos:end="1171:41">bytestream2_get_byteu</name><argument_list pos:start="1171:42" pos:end="1171:46">(<argument pos:start="1171:43" pos:end="1171:45"><expr pos:start="1171:43" pos:end="1171:45"><operator pos:start="1171:43" pos:end="1171:43">&amp;</operator><name pos:start="1171:44" pos:end="1171:45">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="1175:13" pos:end="1175:79"><expr pos:start="1175:13" pos:end="1175:78"><operator pos:start="1175:13" pos:end="1175:13">*</operator><name pos:start="1175:14" pos:end="1175:20">samples</name><operator pos:start="1175:21" pos:end="1175:22">++</operator> <operator pos:start="1175:24" pos:end="1175:24">=</operator> <call pos:start="1175:26" pos:end="1175:78"><name pos:start="1175:26" pos:end="1175:51">adpcm_ima_qt_expand_nibble</name><argument_list pos:start="1175:52" pos:end="1175:78">(<argument pos:start="1175:53" pos:end="1175:66"><expr pos:start="1175:53" pos:end="1175:66"><operator pos:start="1175:53" pos:end="1175:53">&amp;</operator><name pos:start="1175:54" pos:end="1175:66"><name pos:start="1175:54" pos:end="1175:54">c</name><operator pos:start="1175:55" pos:end="1175:56">-&gt;</operator><name pos:start="1175:57" pos:end="1175:62">status</name><index pos:start="1175:63" pos:end="1175:66">[<expr pos:start="1175:64" pos:end="1175:64"><literal type="number" pos:start="1175:64" pos:end="1175:64">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="1175:69" pos:end="1175:74"><expr pos:start="1175:69" pos:end="1175:74"><name pos:start="1175:69" pos:end="1175:69">v</name> <operator pos:start="1175:71" pos:end="1175:72">&gt;&gt;</operator> <literal type="number" pos:start="1175:74" pos:end="1175:74">4</literal></expr></argument>, <argument pos:start="1175:77" pos:end="1175:77"><expr pos:start="1175:77" pos:end="1175:77"><literal type="number" pos:start="1175:77" pos:end="1175:77">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1177:13" pos:end="1177:80"><expr pos:start="1177:13" pos:end="1177:79"><operator pos:start="1177:13" pos:end="1177:13">*</operator><name pos:start="1177:14" pos:end="1177:20">samples</name><operator pos:start="1177:21" pos:end="1177:22">++</operator> <operator pos:start="1177:24" pos:end="1177:24">=</operator> <call pos:start="1177:26" pos:end="1177:79"><name pos:start="1177:26" pos:end="1177:51">adpcm_ima_qt_expand_nibble</name><argument_list pos:start="1177:52" pos:end="1177:79">(<argument pos:start="1177:53" pos:end="1177:66"><expr pos:start="1177:53" pos:end="1177:66"><operator pos:start="1177:53" pos:end="1177:53">&amp;</operator><name pos:start="1177:54" pos:end="1177:66"><name pos:start="1177:54" pos:end="1177:54">c</name><operator pos:start="1177:55" pos:end="1177:56">-&gt;</operator><name pos:start="1177:57" pos:end="1177:62">status</name><index pos:start="1177:63" pos:end="1177:66">[<expr pos:start="1177:64" pos:end="1177:65"><name pos:start="1177:64" pos:end="1177:65">st</name></expr>]</index></name></expr></argument>, <argument pos:start="1177:69" pos:end="1177:75"><expr pos:start="1177:69" pos:end="1177:75"><name pos:start="1177:69" pos:end="1177:69">v</name> <operator pos:start="1177:71" pos:end="1177:71">&amp;</operator> <literal type="number" pos:start="1177:73" pos:end="1177:75">0xf</literal></expr></argument>, <argument pos:start="1177:78" pos:end="1177:78"><expr pos:start="1177:78" pos:end="1177:78"><literal type="number" pos:start="1177:78" pos:end="1177:78">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="1181:9" pos:end="1181:14">break;</break>

    <case pos:start="1183:5" pos:end="1183:30">case <expr pos:start="1183:10" pos:end="1183:29"><name pos:start="1183:10" pos:end="1183:29">AV_CODEC_ID_ADPCM_CT</name></expr>:</case>

        <for pos:start="1185:9" pos:end="1193:9">for <control pos:start="1185:13" pos:end="1185:52">(<init pos:start="1185:14" pos:end="1185:40"><expr pos:start="1185:14" pos:end="1185:39"><name pos:start="1185:14" pos:end="1185:14">n</name> <operator pos:start="1185:16" pos:end="1185:16">=</operator> <name pos:start="1185:18" pos:end="1185:27">nb_samples</name> <operator pos:start="1185:29" pos:end="1185:30">&gt;&gt;</operator> <operator pos:start="1185:32" pos:end="1185:32">(</operator><literal type="number" pos:start="1185:33" pos:end="1185:35">1</literal> <operator pos:start="1185:35" pos:end="1185:35">-</operator> <name pos:start="1185:37" pos:end="1185:38">st</name><operator pos:start="1185:39" pos:end="1185:39">)</operator></expr>;</init> <condition pos:start="1185:42" pos:end="1185:47"><expr pos:start="1185:42" pos:end="1185:46"><name pos:start="1185:42" pos:end="1185:42">n</name> <operator pos:start="1185:44" pos:end="1185:44">&gt;</operator> <literal type="number" pos:start="1185:46" pos:end="1185:46">0</literal></expr>;</condition> <incr pos:start="1185:49" pos:end="1185:51"><expr pos:start="1185:49" pos:end="1185:51"><name pos:start="1185:49" pos:end="1185:49">n</name><operator pos:start="1185:50" pos:end="1185:51">--</operator></expr></incr>)</control> <block pos:start="1185:54" pos:end="1193:9">{<block_content pos:start="1187:13" pos:end="1191:74">

            <decl_stmt pos:start="1187:13" pos:end="1187:47"><decl pos:start="1187:13" pos:end="1187:46"><type pos:start="1187:13" pos:end="1187:15"><name pos:start="1187:13" pos:end="1187:15">int</name></type> <name pos:start="1187:17" pos:end="1187:17">v</name> <init pos:start="1187:19" pos:end="1187:46">= <expr pos:start="1187:21" pos:end="1187:46"><call pos:start="1187:21" pos:end="1187:46"><name pos:start="1187:21" pos:end="1187:41">bytestream2_get_byteu</name><argument_list pos:start="1187:42" pos:end="1187:46">(<argument pos:start="1187:43" pos:end="1187:45"><expr pos:start="1187:43" pos:end="1187:45"><operator pos:start="1187:43" pos:end="1187:43">&amp;</operator><name pos:start="1187:44" pos:end="1187:45">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="1189:13" pos:end="1189:74"><expr pos:start="1189:13" pos:end="1189:73"><operator pos:start="1189:13" pos:end="1189:13">*</operator><name pos:start="1189:14" pos:end="1189:20">samples</name><operator pos:start="1189:21" pos:end="1189:22">++</operator> <operator pos:start="1189:24" pos:end="1189:24">=</operator> <call pos:start="1189:26" pos:end="1189:73"><name pos:start="1189:26" pos:end="1189:47">adpcm_ct_expand_nibble</name><argument_list pos:start="1189:48" pos:end="1189:73">(<argument pos:start="1189:49" pos:end="1189:62"><expr pos:start="1189:49" pos:end="1189:62"><operator pos:start="1189:49" pos:end="1189:49">&amp;</operator><name pos:start="1189:50" pos:end="1189:62"><name pos:start="1189:50" pos:end="1189:50">c</name><operator pos:start="1189:51" pos:end="1189:52">-&gt;</operator><name pos:start="1189:53" pos:end="1189:58">status</name><index pos:start="1189:59" pos:end="1189:62">[<expr pos:start="1189:60" pos:end="1189:60"><literal type="number" pos:start="1189:60" pos:end="1189:60">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="1189:65" pos:end="1189:70"><expr pos:start="1189:65" pos:end="1189:70"><name pos:start="1189:65" pos:end="1189:65">v</name> <operator pos:start="1189:67" pos:end="1189:68">&gt;&gt;</operator> <literal type="number" pos:start="1189:70" pos:end="1189:70">4</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1191:13" pos:end="1191:74"><expr pos:start="1191:13" pos:end="1191:73"><operator pos:start="1191:13" pos:end="1191:13">*</operator><name pos:start="1191:14" pos:end="1191:20">samples</name><operator pos:start="1191:21" pos:end="1191:22">++</operator> <operator pos:start="1191:24" pos:end="1191:24">=</operator> <call pos:start="1191:26" pos:end="1191:73"><name pos:start="1191:26" pos:end="1191:47">adpcm_ct_expand_nibble</name><argument_list pos:start="1191:48" pos:end="1191:73">(<argument pos:start="1191:49" pos:end="1191:62"><expr pos:start="1191:49" pos:end="1191:62"><operator pos:start="1191:49" pos:end="1191:49">&amp;</operator><name pos:start="1191:50" pos:end="1191:62"><name pos:start="1191:50" pos:end="1191:50">c</name><operator pos:start="1191:51" pos:end="1191:52">-&gt;</operator><name pos:start="1191:53" pos:end="1191:58">status</name><index pos:start="1191:59" pos:end="1191:62">[<expr pos:start="1191:60" pos:end="1191:61"><name pos:start="1191:60" pos:end="1191:61">st</name></expr>]</index></name></expr></argument>, <argument pos:start="1191:65" pos:end="1191:72"><expr pos:start="1191:65" pos:end="1191:72"><name pos:start="1191:65" pos:end="1191:65">v</name> <operator pos:start="1191:67" pos:end="1191:67">&amp;</operator> <literal type="number" pos:start="1191:69" pos:end="1191:72">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="1195:9" pos:end="1195:14">break;</break>

    <case pos:start="1197:5" pos:end="1197:35">case <expr pos:start="1197:10" pos:end="1197:34"><name pos:start="1197:10" pos:end="1197:34">AV_CODEC_ID_ADPCM_SBPRO_4</name></expr>:</case>

    <case pos:start="1199:5" pos:end="1199:35">case <expr pos:start="1199:10" pos:end="1199:34"><name pos:start="1199:10" pos:end="1199:34">AV_CODEC_ID_ADPCM_SBPRO_3</name></expr>:</case>

    <case pos:start="1201:5" pos:end="1201:35">case <expr pos:start="1201:10" pos:end="1201:34"><name pos:start="1201:10" pos:end="1201:34">AV_CODEC_ID_ADPCM_SBPRO_2</name></expr>:</case>

        <if_stmt pos:start="1203:9" pos:end="1217:9"><if pos:start="1203:9" pos:end="1217:9">if <condition pos:start="1203:12" pos:end="1203:37">(<expr pos:start="1203:13" pos:end="1203:36"><operator pos:start="1203:13" pos:end="1203:13">!</operator><name pos:start="1203:14" pos:end="1203:25"><name pos:start="1203:14" pos:end="1203:14">c</name><operator pos:start="1203:15" pos:end="1203:16">-&gt;</operator><name pos:start="1203:17" pos:end="1203:22">status</name><index pos:start="1203:23" pos:end="1203:25">[<expr pos:start="1203:24" pos:end="1203:24"><literal type="number" pos:start="1203:24" pos:end="1203:24">0</literal></expr>]</index></name><operator pos:start="1203:26" pos:end="1203:26">.</operator><name pos:start="1203:27" pos:end="1203:36">step_index</name></expr>)</condition> <block pos:start="1203:39" pos:end="1217:9">{<block_content pos:start="1207:13" pos:end="1215:25">

            <comment type="block" pos:start="1205:13" pos:end="1205:48">/* the first byte is a raw sample */</comment>

            <expr_stmt pos:start="1207:13" pos:end="1207:67"><expr pos:start="1207:13" pos:end="1207:66"><operator pos:start="1207:13" pos:end="1207:13">*</operator><name pos:start="1207:14" pos:end="1207:20">samples</name><operator pos:start="1207:21" pos:end="1207:22">++</operator> <operator pos:start="1207:24" pos:end="1207:24">=</operator> <literal type="number" pos:start="1207:26" pos:end="1207:28">128</literal> <operator pos:start="1207:30" pos:end="1207:30">*</operator> <operator pos:start="1207:32" pos:end="1207:32">(</operator><call pos:start="1207:33" pos:end="1207:58"><name pos:start="1207:33" pos:end="1207:53">bytestream2_get_byteu</name><argument_list pos:start="1207:54" pos:end="1207:58">(<argument pos:start="1207:55" pos:end="1207:57"><expr pos:start="1207:55" pos:end="1207:57"><operator pos:start="1207:55" pos:end="1207:55">&amp;</operator><name pos:start="1207:56" pos:end="1207:57">gb</name></expr></argument>)</argument_list></call> <operator pos:start="1207:60" pos:end="1207:60">-</operator> <literal type="number" pos:start="1207:62" pos:end="1207:65">0x80</literal><operator pos:start="1207:66" pos:end="1207:66">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="1209:13" pos:end="1211:71"><if pos:start="1209:13" pos:end="1211:71">if <condition pos:start="1209:16" pos:end="1209:19">(<expr pos:start="1209:17" pos:end="1209:18"><name pos:start="1209:17" pos:end="1209:18">st</name></expr>)</condition><block type="pseudo" pos:start="1211:17" pos:end="1211:71"><block_content pos:start="1211:17" pos:end="1211:71">

                <expr_stmt pos:start="1211:17" pos:end="1211:71"><expr pos:start="1211:17" pos:end="1211:70"><operator pos:start="1211:17" pos:end="1211:17">*</operator><name pos:start="1211:18" pos:end="1211:24">samples</name><operator pos:start="1211:25" pos:end="1211:26">++</operator> <operator pos:start="1211:28" pos:end="1211:28">=</operator> <literal type="number" pos:start="1211:30" pos:end="1211:32">128</literal> <operator pos:start="1211:34" pos:end="1211:34">*</operator> <operator pos:start="1211:36" pos:end="1211:36">(</operator><call pos:start="1211:37" pos:end="1211:62"><name pos:start="1211:37" pos:end="1211:57">bytestream2_get_byteu</name><argument_list pos:start="1211:58" pos:end="1211:62">(<argument pos:start="1211:59" pos:end="1211:61"><expr pos:start="1211:59" pos:end="1211:61"><operator pos:start="1211:59" pos:end="1211:59">&amp;</operator><name pos:start="1211:60" pos:end="1211:61">gb</name></expr></argument>)</argument_list></call> <operator pos:start="1211:64" pos:end="1211:64">-</operator> <literal type="number" pos:start="1211:66" pos:end="1211:69">0x80</literal><operator pos:start="1211:70" pos:end="1211:70">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1213:13" pos:end="1213:40"><expr pos:start="1213:13" pos:end="1213:39"><name pos:start="1213:13" pos:end="1213:24"><name pos:start="1213:13" pos:end="1213:13">c</name><operator pos:start="1213:14" pos:end="1213:15">-&gt;</operator><name pos:start="1213:16" pos:end="1213:21">status</name><index pos:start="1213:22" pos:end="1213:24">[<expr pos:start="1213:23" pos:end="1213:23"><literal type="number" pos:start="1213:23" pos:end="1213:23">0</literal></expr>]</index></name><operator pos:start="1213:25" pos:end="1213:25">.</operator><name pos:start="1213:26" pos:end="1213:35">step_index</name> <operator pos:start="1213:37" pos:end="1213:37">=</operator> <literal type="number" pos:start="1213:39" pos:end="1213:39">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1215:13" pos:end="1215:25"><expr pos:start="1215:13" pos:end="1215:24"><name pos:start="1215:13" pos:end="1215:22">nb_samples</name><operator pos:start="1215:23" pos:end="1215:24">--</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="1219:9" pos:end="1279:9"><if pos:start="1219:9" pos:end="1235:9">if <condition pos:start="1219:12" pos:end="1219:58">(<expr pos:start="1219:13" pos:end="1219:57"><name pos:start="1219:13" pos:end="1219:28"><name pos:start="1219:13" pos:end="1219:17">avctx</name><operator pos:start="1219:18" pos:end="1219:19">-&gt;</operator><name pos:start="1219:20" pos:end="1219:24">codec</name><operator pos:start="1219:25" pos:end="1219:26">-&gt;</operator><name pos:start="1219:27" pos:end="1219:28">id</name></name> <operator pos:start="1219:30" pos:end="1219:31">==</operator> <name pos:start="1219:33" pos:end="1219:57">AV_CODEC_ID_ADPCM_SBPRO_4</name></expr>)</condition> <block pos:start="1219:60" pos:end="1235:9">{<block_content pos:start="1221:13" pos:end="1233:13">

            <for pos:start="1221:13" pos:end="1233:13">for <control pos:start="1221:17" pos:end="1221:56">(<init pos:start="1221:18" pos:end="1221:44"><expr pos:start="1221:18" pos:end="1221:43"><name pos:start="1221:18" pos:end="1221:18">n</name> <operator pos:start="1221:20" pos:end="1221:20">=</operator> <name pos:start="1221:22" pos:end="1221:31">nb_samples</name> <operator pos:start="1221:33" pos:end="1221:34">&gt;&gt;</operator> <operator pos:start="1221:36" pos:end="1221:36">(</operator><literal type="number" pos:start="1221:37" pos:end="1221:39">1</literal> <operator pos:start="1221:39" pos:end="1221:39">-</operator> <name pos:start="1221:41" pos:end="1221:42">st</name><operator pos:start="1221:43" pos:end="1221:43">)</operator></expr>;</init> <condition pos:start="1221:46" pos:end="1221:51"><expr pos:start="1221:46" pos:end="1221:50"><name pos:start="1221:46" pos:end="1221:46">n</name> <operator pos:start="1221:48" pos:end="1221:48">&gt;</operator> <literal type="number" pos:start="1221:50" pos:end="1221:50">0</literal></expr>;</condition> <incr pos:start="1221:53" pos:end="1221:55"><expr pos:start="1221:53" pos:end="1221:55"><name pos:start="1221:53" pos:end="1221:53">n</name><operator pos:start="1221:54" pos:end="1221:55">--</operator></expr></incr>)</control> <block pos:start="1221:58" pos:end="1233:13">{<block_content pos:start="1223:17" pos:end="1231:74">

                <decl_stmt pos:start="1223:17" pos:end="1223:54"><decl pos:start="1223:17" pos:end="1223:53"><type pos:start="1223:17" pos:end="1223:19"><name pos:start="1223:17" pos:end="1223:19">int</name></type> <name pos:start="1223:21" pos:end="1223:24">byte</name> <init pos:start="1223:26" pos:end="1223:53">= <expr pos:start="1223:28" pos:end="1223:53"><call pos:start="1223:28" pos:end="1223:53"><name pos:start="1223:28" pos:end="1223:48">bytestream2_get_byteu</name><argument_list pos:start="1223:49" pos:end="1223:53">(<argument pos:start="1223:50" pos:end="1223:52"><expr pos:start="1223:50" pos:end="1223:52"><operator pos:start="1223:50" pos:end="1223:50">&amp;</operator><name pos:start="1223:51" pos:end="1223:52">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1225:17" pos:end="1227:74"><expr pos:start="1225:17" pos:end="1227:73"><operator pos:start="1225:17" pos:end="1225:17">*</operator><name pos:start="1225:18" pos:end="1225:24">samples</name><operator pos:start="1225:25" pos:end="1225:26">++</operator> <operator pos:start="1225:28" pos:end="1225:28">=</operator> <call pos:start="1225:30" pos:end="1227:73"><name pos:start="1225:30" pos:end="1225:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1225:55" pos:end="1227:73">(<argument pos:start="1225:56" pos:end="1225:68"><expr pos:start="1225:56" pos:end="1225:68"><operator pos:start="1225:56" pos:end="1225:56">&amp;</operator><name pos:start="1225:57" pos:end="1225:68"><name pos:start="1225:57" pos:end="1225:57">c</name><operator pos:start="1225:58" pos:end="1225:59">-&gt;</operator><name pos:start="1225:60" pos:end="1225:65">status</name><index pos:start="1225:66" pos:end="1225:68">[<expr pos:start="1225:67" pos:end="1225:67"><literal type="number" pos:start="1225:67" pos:end="1225:67">0</literal></expr>]</index></name></expr></argument>,

                                                       <argument pos:start="1227:56" pos:end="1227:64"><expr pos:start="1227:56" pos:end="1227:64"><name pos:start="1227:56" pos:end="1227:59">byte</name> <operator pos:start="1227:61" pos:end="1227:62">&gt;&gt;</operator> <literal type="number" pos:start="1227:64" pos:end="1227:64">4</literal></expr></argument>,   <argument pos:start="1227:69" pos:end="1227:69"><expr pos:start="1227:69" pos:end="1227:69"><literal type="number" pos:start="1227:69" pos:end="1227:69">4</literal></expr></argument>, <argument pos:start="1227:72" pos:end="1227:72"><expr pos:start="1227:72" pos:end="1227:72"><literal type="number" pos:start="1227:72" pos:end="1227:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1229:17" pos:end="1231:74"><expr pos:start="1229:17" pos:end="1231:73"><operator pos:start="1229:17" pos:end="1229:17">*</operator><name pos:start="1229:18" pos:end="1229:24">samples</name><operator pos:start="1229:25" pos:end="1229:26">++</operator> <operator pos:start="1229:28" pos:end="1229:28">=</operator> <call pos:start="1229:30" pos:end="1231:73"><name pos:start="1229:30" pos:end="1229:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1229:55" pos:end="1231:73">(<argument pos:start="1229:56" pos:end="1229:69"><expr pos:start="1229:56" pos:end="1229:69"><operator pos:start="1229:56" pos:end="1229:56">&amp;</operator><name pos:start="1229:57" pos:end="1229:69"><name pos:start="1229:57" pos:end="1229:57">c</name><operator pos:start="1229:58" pos:end="1229:59">-&gt;</operator><name pos:start="1229:60" pos:end="1229:65">status</name><index pos:start="1229:66" pos:end="1229:69">[<expr pos:start="1229:67" pos:end="1229:68"><name pos:start="1229:67" pos:end="1229:68">st</name></expr>]</index></name></expr></argument>,

                                                       <argument pos:start="1231:56" pos:end="1231:66"><expr pos:start="1231:56" pos:end="1231:66"><name pos:start="1231:56" pos:end="1231:59">byte</name> <operator pos:start="1231:61" pos:end="1231:61">&amp;</operator> <literal type="number" pos:start="1231:63" pos:end="1231:66">0x0F</literal></expr></argument>, <argument pos:start="1231:69" pos:end="1231:69"><expr pos:start="1231:69" pos:end="1231:69"><literal type="number" pos:start="1231:69" pos:end="1231:69">4</literal></expr></argument>, <argument pos:start="1231:72" pos:end="1231:72"><expr pos:start="1231:72" pos:end="1231:72"><literal type="number" pos:start="1231:72" pos:end="1231:72">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <if type="elseif" pos:start="1235:11" pos:end="1255:9">else if <condition pos:start="1235:19" pos:end="1235:65">(<expr pos:start="1235:20" pos:end="1235:64"><name pos:start="1235:20" pos:end="1235:35"><name pos:start="1235:20" pos:end="1235:24">avctx</name><operator pos:start="1235:25" pos:end="1235:26">-&gt;</operator><name pos:start="1235:27" pos:end="1235:31">codec</name><operator pos:start="1235:32" pos:end="1235:33">-&gt;</operator><name pos:start="1235:34" pos:end="1235:35">id</name></name> <operator pos:start="1235:37" pos:end="1235:38">==</operator> <name pos:start="1235:40" pos:end="1235:64">AV_CODEC_ID_ADPCM_SBPRO_3</name></expr>)</condition> <block pos:start="1235:67" pos:end="1255:9">{<block_content pos:start="1237:13" pos:end="1253:13">

            <for pos:start="1237:13" pos:end="1253:13">for <control pos:start="1237:17" pos:end="1237:48">(<init pos:start="1237:18" pos:end="1237:36"><expr pos:start="1237:18" pos:end="1237:35"><name pos:start="1237:18" pos:end="1237:18">n</name> <operator pos:start="1237:20" pos:end="1237:20">=</operator> <name pos:start="1237:22" pos:end="1237:31">nb_samples</name> <operator pos:start="1237:33" pos:end="1237:33">/</operator> <literal type="number" pos:start="1237:35" pos:end="1237:35">3</literal></expr>;</init> <condition pos:start="1237:38" pos:end="1237:43"><expr pos:start="1237:38" pos:end="1237:42"><name pos:start="1237:38" pos:end="1237:38">n</name> <operator pos:start="1237:40" pos:end="1237:40">&gt;</operator> <literal type="number" pos:start="1237:42" pos:end="1237:42">0</literal></expr>;</condition> <incr pos:start="1237:45" pos:end="1237:47"><expr pos:start="1237:45" pos:end="1237:47"><name pos:start="1237:45" pos:end="1237:45">n</name><operator pos:start="1237:46" pos:end="1237:47">--</operator></expr></incr>)</control> <block pos:start="1237:50" pos:end="1253:13">{<block_content pos:start="1239:17" pos:end="1251:81">

                <decl_stmt pos:start="1239:17" pos:end="1239:54"><decl pos:start="1239:17" pos:end="1239:53"><type pos:start="1239:17" pos:end="1239:19"><name pos:start="1239:17" pos:end="1239:19">int</name></type> <name pos:start="1239:21" pos:end="1239:24">byte</name> <init pos:start="1239:26" pos:end="1239:53">= <expr pos:start="1239:28" pos:end="1239:53"><call pos:start="1239:28" pos:end="1239:53"><name pos:start="1239:28" pos:end="1239:48">bytestream2_get_byteu</name><argument_list pos:start="1239:49" pos:end="1239:53">(<argument pos:start="1239:50" pos:end="1239:52"><expr pos:start="1239:50" pos:end="1239:52"><operator pos:start="1239:50" pos:end="1239:50">&amp;</operator><name pos:start="1239:51" pos:end="1239:52">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1241:17" pos:end="1243:81"><expr pos:start="1241:17" pos:end="1243:80"><operator pos:start="1241:17" pos:end="1241:17">*</operator><name pos:start="1241:18" pos:end="1241:24">samples</name><operator pos:start="1241:25" pos:end="1241:26">++</operator> <operator pos:start="1241:28" pos:end="1241:28">=</operator> <call pos:start="1241:30" pos:end="1243:80"><name pos:start="1241:30" pos:end="1241:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1241:55" pos:end="1243:80">(<argument pos:start="1241:56" pos:end="1241:68"><expr pos:start="1241:56" pos:end="1241:68"><operator pos:start="1241:56" pos:end="1241:56">&amp;</operator><name pos:start="1241:57" pos:end="1241:68"><name pos:start="1241:57" pos:end="1241:57">c</name><operator pos:start="1241:58" pos:end="1241:59">-&gt;</operator><name pos:start="1241:60" pos:end="1241:65">status</name><index pos:start="1241:66" pos:end="1241:68">[<expr pos:start="1241:67" pos:end="1241:67"><literal type="number" pos:start="1241:67" pos:end="1241:67">0</literal></expr>]</index></name></expr></argument>,

                                                        <argument pos:start="1243:57" pos:end="1243:65"><expr pos:start="1243:57" pos:end="1243:65"><name pos:start="1243:57" pos:end="1243:60">byte</name> <operator pos:start="1243:62" pos:end="1243:63">&gt;&gt;</operator> <literal type="number" pos:start="1243:65" pos:end="1243:65">5</literal></expr></argument>        , <argument pos:start="1243:76" pos:end="1243:76"><expr pos:start="1243:76" pos:end="1243:76"><literal type="number" pos:start="1243:76" pos:end="1243:76">3</literal></expr></argument>, <argument pos:start="1243:79" pos:end="1243:79"><expr pos:start="1243:79" pos:end="1243:79"><literal type="number" pos:start="1243:79" pos:end="1243:79">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1245:17" pos:end="1247:81"><expr pos:start="1245:17" pos:end="1247:80"><operator pos:start="1245:17" pos:end="1245:17">*</operator><name pos:start="1245:18" pos:end="1245:24">samples</name><operator pos:start="1245:25" pos:end="1245:26">++</operator> <operator pos:start="1245:28" pos:end="1245:28">=</operator> <call pos:start="1245:30" pos:end="1247:80"><name pos:start="1245:30" pos:end="1245:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1245:55" pos:end="1247:80">(<argument pos:start="1245:56" pos:end="1245:68"><expr pos:start="1245:56" pos:end="1245:68"><operator pos:start="1245:56" pos:end="1245:56">&amp;</operator><name pos:start="1245:57" pos:end="1245:68"><name pos:start="1245:57" pos:end="1245:57">c</name><operator pos:start="1245:58" pos:end="1245:59">-&gt;</operator><name pos:start="1245:60" pos:end="1245:65">status</name><index pos:start="1245:66" pos:end="1245:68">[<expr pos:start="1245:67" pos:end="1245:67"><literal type="number" pos:start="1245:67" pos:end="1245:67">0</literal></expr>]</index></name></expr></argument>,

                                                       <argument pos:start="1247:56" pos:end="1247:73"><expr pos:start="1247:56" pos:end="1247:73"><operator pos:start="1247:56" pos:end="1247:56">(</operator><name pos:start="1247:57" pos:end="1247:60">byte</name> <operator pos:start="1247:62" pos:end="1247:63">&gt;&gt;</operator> <literal type="number" pos:start="1247:65" pos:end="1247:65">2</literal><operator pos:start="1247:66" pos:end="1247:66">)</operator> <operator pos:start="1247:68" pos:end="1247:68">&amp;</operator> <literal type="number" pos:start="1247:70" pos:end="1247:73">0x07</literal></expr></argument>, <argument pos:start="1247:76" pos:end="1247:76"><expr pos:start="1247:76" pos:end="1247:76"><literal type="number" pos:start="1247:76" pos:end="1247:76">3</literal></expr></argument>, <argument pos:start="1247:79" pos:end="1247:79"><expr pos:start="1247:79" pos:end="1247:79"><literal type="number" pos:start="1247:79" pos:end="1247:79">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1249:17" pos:end="1251:81"><expr pos:start="1249:17" pos:end="1251:80"><operator pos:start="1249:17" pos:end="1249:17">*</operator><name pos:start="1249:18" pos:end="1249:24">samples</name><operator pos:start="1249:25" pos:end="1249:26">++</operator> <operator pos:start="1249:28" pos:end="1249:28">=</operator> <call pos:start="1249:30" pos:end="1251:80"><name pos:start="1249:30" pos:end="1249:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1249:55" pos:end="1251:80">(<argument pos:start="1249:56" pos:end="1249:68"><expr pos:start="1249:56" pos:end="1249:68"><operator pos:start="1249:56" pos:end="1249:56">&amp;</operator><name pos:start="1249:57" pos:end="1249:68"><name pos:start="1249:57" pos:end="1249:57">c</name><operator pos:start="1249:58" pos:end="1249:59">-&gt;</operator><name pos:start="1249:60" pos:end="1249:65">status</name><index pos:start="1249:66" pos:end="1249:68">[<expr pos:start="1249:67" pos:end="1249:67"><literal type="number" pos:start="1249:67" pos:end="1249:67">0</literal></expr>]</index></name></expr></argument>,

                                                        <argument pos:start="1251:57" pos:end="1251:67"><expr pos:start="1251:57" pos:end="1251:67"><name pos:start="1251:57" pos:end="1251:60">byte</name> <operator pos:start="1251:62" pos:end="1251:62">&amp;</operator> <literal type="number" pos:start="1251:64" pos:end="1251:67">0x03</literal></expr></argument>,       <argument pos:start="1251:76" pos:end="1251:76"><expr pos:start="1251:76" pos:end="1251:76"><literal type="number" pos:start="1251:76" pos:end="1251:76">2</literal></expr></argument>, <argument pos:start="1251:79" pos:end="1251:79"><expr pos:start="1251:79" pos:end="1251:79"><literal type="number" pos:start="1251:79" pos:end="1251:79">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="1255:11" pos:end="1279:9">else <block pos:start="1255:16" pos:end="1279:9">{<block_content pos:start="1257:13" pos:end="1277:13">

            <for pos:start="1257:13" pos:end="1277:13">for <control pos:start="1257:17" pos:end="1257:56">(<init pos:start="1257:18" pos:end="1257:44"><expr pos:start="1257:18" pos:end="1257:43"><name pos:start="1257:18" pos:end="1257:18">n</name> <operator pos:start="1257:20" pos:end="1257:20">=</operator> <name pos:start="1257:22" pos:end="1257:31">nb_samples</name> <operator pos:start="1257:33" pos:end="1257:34">&gt;&gt;</operator> <operator pos:start="1257:36" pos:end="1257:36">(</operator><literal type="number" pos:start="1257:37" pos:end="1257:39">2</literal> <operator pos:start="1257:39" pos:end="1257:39">-</operator> <name pos:start="1257:41" pos:end="1257:42">st</name><operator pos:start="1257:43" pos:end="1257:43">)</operator></expr>;</init> <condition pos:start="1257:46" pos:end="1257:51"><expr pos:start="1257:46" pos:end="1257:50"><name pos:start="1257:46" pos:end="1257:46">n</name> <operator pos:start="1257:48" pos:end="1257:48">&gt;</operator> <literal type="number" pos:start="1257:50" pos:end="1257:50">0</literal></expr>;</condition> <incr pos:start="1257:53" pos:end="1257:55"><expr pos:start="1257:53" pos:end="1257:55"><name pos:start="1257:53" pos:end="1257:53">n</name><operator pos:start="1257:54" pos:end="1257:55">--</operator></expr></incr>)</control> <block pos:start="1257:58" pos:end="1277:13">{<block_content pos:start="1259:17" pos:end="1275:81">

                <decl_stmt pos:start="1259:17" pos:end="1259:54"><decl pos:start="1259:17" pos:end="1259:53"><type pos:start="1259:17" pos:end="1259:19"><name pos:start="1259:17" pos:end="1259:19">int</name></type> <name pos:start="1259:21" pos:end="1259:24">byte</name> <init pos:start="1259:26" pos:end="1259:53">= <expr pos:start="1259:28" pos:end="1259:53"><call pos:start="1259:28" pos:end="1259:53"><name pos:start="1259:28" pos:end="1259:48">bytestream2_get_byteu</name><argument_list pos:start="1259:49" pos:end="1259:53">(<argument pos:start="1259:50" pos:end="1259:52"><expr pos:start="1259:50" pos:end="1259:52"><operator pos:start="1259:50" pos:end="1259:50">&amp;</operator><name pos:start="1259:51" pos:end="1259:52">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1261:17" pos:end="1263:81"><expr pos:start="1261:17" pos:end="1263:80"><operator pos:start="1261:17" pos:end="1261:17">*</operator><name pos:start="1261:18" pos:end="1261:24">samples</name><operator pos:start="1261:25" pos:end="1261:26">++</operator> <operator pos:start="1261:28" pos:end="1261:28">=</operator> <call pos:start="1261:30" pos:end="1263:80"><name pos:start="1261:30" pos:end="1261:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1261:55" pos:end="1263:80">(<argument pos:start="1261:56" pos:end="1261:68"><expr pos:start="1261:56" pos:end="1261:68"><operator pos:start="1261:56" pos:end="1261:56">&amp;</operator><name pos:start="1261:57" pos:end="1261:68"><name pos:start="1261:57" pos:end="1261:57">c</name><operator pos:start="1261:58" pos:end="1261:59">-&gt;</operator><name pos:start="1261:60" pos:end="1261:65">status</name><index pos:start="1261:66" pos:end="1261:68">[<expr pos:start="1261:67" pos:end="1261:67"><literal type="number" pos:start="1261:67" pos:end="1261:67">0</literal></expr>]</index></name></expr></argument>,

                                                        <argument pos:start="1263:57" pos:end="1263:65"><expr pos:start="1263:57" pos:end="1263:65"><name pos:start="1263:57" pos:end="1263:60">byte</name> <operator pos:start="1263:62" pos:end="1263:63">&gt;&gt;</operator> <literal type="number" pos:start="1263:65" pos:end="1263:65">6</literal></expr></argument>        , <argument pos:start="1263:76" pos:end="1263:76"><expr pos:start="1263:76" pos:end="1263:76"><literal type="number" pos:start="1263:76" pos:end="1263:76">2</literal></expr></argument>, <argument pos:start="1263:79" pos:end="1263:79"><expr pos:start="1263:79" pos:end="1263:79"><literal type="number" pos:start="1263:79" pos:end="1263:79">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1265:17" pos:end="1267:81"><expr pos:start="1265:17" pos:end="1267:80"><operator pos:start="1265:17" pos:end="1265:17">*</operator><name pos:start="1265:18" pos:end="1265:24">samples</name><operator pos:start="1265:25" pos:end="1265:26">++</operator> <operator pos:start="1265:28" pos:end="1265:28">=</operator> <call pos:start="1265:30" pos:end="1267:80"><name pos:start="1265:30" pos:end="1265:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1265:55" pos:end="1267:80">(<argument pos:start="1265:56" pos:end="1265:69"><expr pos:start="1265:56" pos:end="1265:69"><operator pos:start="1265:56" pos:end="1265:56">&amp;</operator><name pos:start="1265:57" pos:end="1265:69"><name pos:start="1265:57" pos:end="1265:57">c</name><operator pos:start="1265:58" pos:end="1265:59">-&gt;</operator><name pos:start="1265:60" pos:end="1265:65">status</name><index pos:start="1265:66" pos:end="1265:69">[<expr pos:start="1265:67" pos:end="1265:68"><name pos:start="1265:67" pos:end="1265:68">st</name></expr>]</index></name></expr></argument>,

                                                       <argument pos:start="1267:56" pos:end="1267:73"><expr pos:start="1267:56" pos:end="1267:73"><operator pos:start="1267:56" pos:end="1267:56">(</operator><name pos:start="1267:57" pos:end="1267:60">byte</name> <operator pos:start="1267:62" pos:end="1267:63">&gt;&gt;</operator> <literal type="number" pos:start="1267:65" pos:end="1267:65">4</literal><operator pos:start="1267:66" pos:end="1267:66">)</operator> <operator pos:start="1267:68" pos:end="1267:68">&amp;</operator> <literal type="number" pos:start="1267:70" pos:end="1267:73">0x03</literal></expr></argument>, <argument pos:start="1267:76" pos:end="1267:76"><expr pos:start="1267:76" pos:end="1267:76"><literal type="number" pos:start="1267:76" pos:end="1267:76">2</literal></expr></argument>, <argument pos:start="1267:79" pos:end="1267:79"><expr pos:start="1267:79" pos:end="1267:79"><literal type="number" pos:start="1267:79" pos:end="1267:79">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1269:17" pos:end="1271:81"><expr pos:start="1269:17" pos:end="1271:80"><operator pos:start="1269:17" pos:end="1269:17">*</operator><name pos:start="1269:18" pos:end="1269:24">samples</name><operator pos:start="1269:25" pos:end="1269:26">++</operator> <operator pos:start="1269:28" pos:end="1269:28">=</operator> <call pos:start="1269:30" pos:end="1271:80"><name pos:start="1269:30" pos:end="1269:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1269:55" pos:end="1271:80">(<argument pos:start="1269:56" pos:end="1269:68"><expr pos:start="1269:56" pos:end="1269:68"><operator pos:start="1269:56" pos:end="1269:56">&amp;</operator><name pos:start="1269:57" pos:end="1269:68"><name pos:start="1269:57" pos:end="1269:57">c</name><operator pos:start="1269:58" pos:end="1269:59">-&gt;</operator><name pos:start="1269:60" pos:end="1269:65">status</name><index pos:start="1269:66" pos:end="1269:68">[<expr pos:start="1269:67" pos:end="1269:67"><literal type="number" pos:start="1269:67" pos:end="1269:67">0</literal></expr>]</index></name></expr></argument>,

                                                       <argument pos:start="1271:56" pos:end="1271:73"><expr pos:start="1271:56" pos:end="1271:73"><operator pos:start="1271:56" pos:end="1271:56">(</operator><name pos:start="1271:57" pos:end="1271:60">byte</name> <operator pos:start="1271:62" pos:end="1271:63">&gt;&gt;</operator> <literal type="number" pos:start="1271:65" pos:end="1271:65">2</literal><operator pos:start="1271:66" pos:end="1271:66">)</operator> <operator pos:start="1271:68" pos:end="1271:68">&amp;</operator> <literal type="number" pos:start="1271:70" pos:end="1271:73">0x03</literal></expr></argument>, <argument pos:start="1271:76" pos:end="1271:76"><expr pos:start="1271:76" pos:end="1271:76"><literal type="number" pos:start="1271:76" pos:end="1271:76">2</literal></expr></argument>, <argument pos:start="1271:79" pos:end="1271:79"><expr pos:start="1271:79" pos:end="1271:79"><literal type="number" pos:start="1271:79" pos:end="1271:79">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1273:17" pos:end="1275:81"><expr pos:start="1273:17" pos:end="1275:80"><operator pos:start="1273:17" pos:end="1273:17">*</operator><name pos:start="1273:18" pos:end="1273:24">samples</name><operator pos:start="1273:25" pos:end="1273:26">++</operator> <operator pos:start="1273:28" pos:end="1273:28">=</operator> <call pos:start="1273:30" pos:end="1275:80"><name pos:start="1273:30" pos:end="1273:54">adpcm_sbpro_expand_nibble</name><argument_list pos:start="1273:55" pos:end="1275:80">(<argument pos:start="1273:56" pos:end="1273:69"><expr pos:start="1273:56" pos:end="1273:69"><operator pos:start="1273:56" pos:end="1273:56">&amp;</operator><name pos:start="1273:57" pos:end="1273:69"><name pos:start="1273:57" pos:end="1273:57">c</name><operator pos:start="1273:58" pos:end="1273:59">-&gt;</operator><name pos:start="1273:60" pos:end="1273:65">status</name><index pos:start="1273:66" pos:end="1273:69">[<expr pos:start="1273:67" pos:end="1273:68"><name pos:start="1273:67" pos:end="1273:68">st</name></expr>]</index></name></expr></argument>,

                                                        <argument pos:start="1275:57" pos:end="1275:67"><expr pos:start="1275:57" pos:end="1275:67"><name pos:start="1275:57" pos:end="1275:60">byte</name> <operator pos:start="1275:62" pos:end="1275:62">&amp;</operator> <literal type="number" pos:start="1275:64" pos:end="1275:67">0x03</literal></expr></argument>,       <argument pos:start="1275:76" pos:end="1275:76"><expr pos:start="1275:76" pos:end="1275:76"><literal type="number" pos:start="1275:76" pos:end="1275:76">2</literal></expr></argument>, <argument pos:start="1275:79" pos:end="1275:79"><expr pos:start="1275:79" pos:end="1275:79"><literal type="number" pos:start="1275:79" pos:end="1275:79">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1281:9" pos:end="1281:14">break;</break>

    <case pos:start="1283:5" pos:end="1283:31">case <expr pos:start="1283:10" pos:end="1283:30"><name pos:start="1283:10" pos:end="1283:30">AV_CODEC_ID_ADPCM_SWF</name></expr>:</case>

        <expr_stmt pos:start="1285:9" pos:end="1285:56"><expr pos:start="1285:9" pos:end="1285:55"><call pos:start="1285:9" pos:end="1285:55"><name pos:start="1285:9" pos:end="1285:24">adpcm_swf_decode</name><argument_list pos:start="1285:25" pos:end="1285:55">(<argument pos:start="1285:26" pos:end="1285:30"><expr pos:start="1285:26" pos:end="1285:30"><name pos:start="1285:26" pos:end="1285:30">avctx</name></expr></argument>, <argument pos:start="1285:33" pos:end="1285:35"><expr pos:start="1285:33" pos:end="1285:35"><name pos:start="1285:33" pos:end="1285:35">buf</name></expr></argument>, <argument pos:start="1285:38" pos:end="1285:45"><expr pos:start="1285:38" pos:end="1285:45"><name pos:start="1285:38" pos:end="1285:45">buf_size</name></expr></argument>, <argument pos:start="1285:48" pos:end="1285:54"><expr pos:start="1285:48" pos:end="1285:54"><name pos:start="1285:48" pos:end="1285:54">samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1287:9" pos:end="1287:43"><expr pos:start="1287:9" pos:end="1287:42"><call pos:start="1287:9" pos:end="1287:42"><name pos:start="1287:9" pos:end="1287:24">bytestream2_seek</name><argument_list pos:start="1287:25" pos:end="1287:42">(<argument pos:start="1287:26" pos:end="1287:28"><expr pos:start="1287:26" pos:end="1287:28"><operator pos:start="1287:26" pos:end="1287:26">&amp;</operator><name pos:start="1287:27" pos:end="1287:28">gb</name></expr></argument>, <argument pos:start="1287:31" pos:end="1287:31"><expr pos:start="1287:31" pos:end="1287:31"><literal type="number" pos:start="1287:31" pos:end="1287:31">0</literal></expr></argument>, <argument pos:start="1287:34" pos:end="1287:41"><expr pos:start="1287:34" pos:end="1287:41"><name pos:start="1287:34" pos:end="1287:41">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1289:9" pos:end="1289:14">break;</break>

    <case pos:start="1291:5" pos:end="1291:34">case <expr pos:start="1291:10" pos:end="1291:33"><name pos:start="1291:10" pos:end="1291:33">AV_CODEC_ID_ADPCM_YAMAHA</name></expr>:</case>

        <for pos:start="1293:9" pos:end="1301:9">for <control pos:start="1293:13" pos:end="1293:52">(<init pos:start="1293:14" pos:end="1293:40"><expr pos:start="1293:14" pos:end="1293:39"><name pos:start="1293:14" pos:end="1293:14">n</name> <operator pos:start="1293:16" pos:end="1293:16">=</operator> <name pos:start="1293:18" pos:end="1293:27">nb_samples</name> <operator pos:start="1293:29" pos:end="1293:30">&gt;&gt;</operator> <operator pos:start="1293:32" pos:end="1293:32">(</operator><literal type="number" pos:start="1293:33" pos:end="1293:35">1</literal> <operator pos:start="1293:35" pos:end="1293:35">-</operator> <name pos:start="1293:37" pos:end="1293:38">st</name><operator pos:start="1293:39" pos:end="1293:39">)</operator></expr>;</init> <condition pos:start="1293:42" pos:end="1293:47"><expr pos:start="1293:42" pos:end="1293:46"><name pos:start="1293:42" pos:end="1293:42">n</name> <operator pos:start="1293:44" pos:end="1293:44">&gt;</operator> <literal type="number" pos:start="1293:46" pos:end="1293:46">0</literal></expr>;</condition> <incr pos:start="1293:49" pos:end="1293:51"><expr pos:start="1293:49" pos:end="1293:51"><name pos:start="1293:49" pos:end="1293:49">n</name><operator pos:start="1293:50" pos:end="1293:51">--</operator></expr></incr>)</control> <block pos:start="1293:54" pos:end="1301:9">{<block_content pos:start="1295:13" pos:end="1299:78">

            <decl_stmt pos:start="1295:13" pos:end="1295:47"><decl pos:start="1295:13" pos:end="1295:46"><type pos:start="1295:13" pos:end="1295:15"><name pos:start="1295:13" pos:end="1295:15">int</name></type> <name pos:start="1295:17" pos:end="1295:17">v</name> <init pos:start="1295:19" pos:end="1295:46">= <expr pos:start="1295:21" pos:end="1295:46"><call pos:start="1295:21" pos:end="1295:46"><name pos:start="1295:21" pos:end="1295:41">bytestream2_get_byteu</name><argument_list pos:start="1295:42" pos:end="1295:46">(<argument pos:start="1295:43" pos:end="1295:45"><expr pos:start="1295:43" pos:end="1295:45"><operator pos:start="1295:43" pos:end="1295:43">&amp;</operator><name pos:start="1295:44" pos:end="1295:45">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="1297:13" pos:end="1297:78"><expr pos:start="1297:13" pos:end="1297:77"><operator pos:start="1297:13" pos:end="1297:13">*</operator><name pos:start="1297:14" pos:end="1297:20">samples</name><operator pos:start="1297:21" pos:end="1297:22">++</operator> <operator pos:start="1297:24" pos:end="1297:24">=</operator> <call pos:start="1297:26" pos:end="1297:77"><name pos:start="1297:26" pos:end="1297:51">adpcm_yamaha_expand_nibble</name><argument_list pos:start="1297:52" pos:end="1297:77">(<argument pos:start="1297:53" pos:end="1297:66"><expr pos:start="1297:53" pos:end="1297:66"><operator pos:start="1297:53" pos:end="1297:53">&amp;</operator><name pos:start="1297:54" pos:end="1297:66"><name pos:start="1297:54" pos:end="1297:54">c</name><operator pos:start="1297:55" pos:end="1297:56">-&gt;</operator><name pos:start="1297:57" pos:end="1297:62">status</name><index pos:start="1297:63" pos:end="1297:66">[<expr pos:start="1297:64" pos:end="1297:64"><literal type="number" pos:start="1297:64" pos:end="1297:64">0</literal></expr> ]</index></name></expr></argument>, <argument pos:start="1297:69" pos:end="1297:76"><expr pos:start="1297:69" pos:end="1297:76"><name pos:start="1297:69" pos:end="1297:69">v</name> <operator pos:start="1297:71" pos:end="1297:71">&amp;</operator> <literal type="number" pos:start="1297:73" pos:end="1297:76">0x0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1299:13" pos:end="1299:78"><expr pos:start="1299:13" pos:end="1299:77"><operator pos:start="1299:13" pos:end="1299:13">*</operator><name pos:start="1299:14" pos:end="1299:20">samples</name><operator pos:start="1299:21" pos:end="1299:22">++</operator> <operator pos:start="1299:24" pos:end="1299:24">=</operator> <call pos:start="1299:26" pos:end="1299:77"><name pos:start="1299:26" pos:end="1299:51">adpcm_yamaha_expand_nibble</name><argument_list pos:start="1299:52" pos:end="1299:77">(<argument pos:start="1299:53" pos:end="1299:66"><expr pos:start="1299:53" pos:end="1299:66"><operator pos:start="1299:53" pos:end="1299:53">&amp;</operator><name pos:start="1299:54" pos:end="1299:66"><name pos:start="1299:54" pos:end="1299:54">c</name><operator pos:start="1299:55" pos:end="1299:56">-&gt;</operator><name pos:start="1299:57" pos:end="1299:62">status</name><index pos:start="1299:63" pos:end="1299:66">[<expr pos:start="1299:64" pos:end="1299:65"><name pos:start="1299:64" pos:end="1299:65">st</name></expr>]</index></name></expr></argument>, <argument pos:start="1299:69" pos:end="1299:74"><expr pos:start="1299:69" pos:end="1299:74"><name pos:start="1299:69" pos:end="1299:69">v</name> <operator pos:start="1299:71" pos:end="1299:72">&gt;&gt;</operator> <literal type="number" pos:start="1299:74" pos:end="1299:74">4</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="1303:9" pos:end="1303:14">break;</break>

    <case pos:start="1305:5" pos:end="1305:31">case <expr pos:start="1305:10" pos:end="1305:30"><name pos:start="1305:10" pos:end="1305:30">AV_CODEC_ID_ADPCM_AFC</name></expr>:</case>

    <block pos:start="1307:5" pos:end="1409:5">{<block_content pos:start="1309:9" pos:end="1407:14">

        <decl_stmt pos:start="1309:9" pos:end="1309:30"><decl pos:start="1309:9" pos:end="1309:29"><type pos:start="1309:9" pos:end="1309:11"><name pos:start="1309:9" pos:end="1309:11">int</name></type> <name pos:start="1309:13" pos:end="1309:29">samples_per_block</name></decl>;</decl_stmt>

        <decl_stmt pos:start="1311:9" pos:end="1311:19"><decl pos:start="1311:9" pos:end="1311:18"><type pos:start="1311:9" pos:end="1311:11"><name pos:start="1311:9" pos:end="1311:11">int</name></type> <name pos:start="1311:13" pos:end="1311:18">blocks</name></decl>;</decl_stmt>



        <if_stmt pos:start="1315:9" pos:end="1327:9"><if pos:start="1315:9" pos:end="1321:9">if <condition pos:start="1315:12" pos:end="1315:82">(<expr pos:start="1315:13" pos:end="1315:81"><name pos:start="1315:13" pos:end="1315:28"><name pos:start="1315:13" pos:end="1315:17">avctx</name><operator pos:start="1315:18" pos:end="1315:19">-&gt;</operator><name pos:start="1315:20" pos:end="1315:28">extradata</name></name> <operator pos:start="1315:30" pos:end="1315:31">&amp;&amp;</operator> <name pos:start="1315:33" pos:end="1315:53"><name pos:start="1315:33" pos:end="1315:37">avctx</name><operator pos:start="1315:38" pos:end="1315:39">-&gt;</operator><name pos:start="1315:40" pos:end="1315:53">extradata_size</name></name> <operator pos:start="1315:55" pos:end="1315:56">==</operator> <literal type="number" pos:start="1315:58" pos:end="1315:58">1</literal> <operator pos:start="1315:60" pos:end="1315:61">&amp;&amp;</operator> <name pos:start="1315:63" pos:end="1315:81"><name pos:start="1315:63" pos:end="1315:67">avctx</name><operator pos:start="1315:68" pos:end="1315:69">-&gt;</operator><name pos:start="1315:70" pos:end="1315:78">extradata</name><index pos:start="1315:79" pos:end="1315:81">[<expr pos:start="1315:80" pos:end="1315:80"><literal type="number" pos:start="1315:80" pos:end="1315:80">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="1315:84" pos:end="1321:9">{<block_content pos:start="1317:13" pos:end="1319:54">

            <expr_stmt pos:start="1317:13" pos:end="1317:57"><expr pos:start="1317:13" pos:end="1317:56"><name pos:start="1317:13" pos:end="1317:29">samples_per_block</name> <operator pos:start="1317:31" pos:end="1317:31">=</operator> <name pos:start="1317:33" pos:end="1317:51"><name pos:start="1317:33" pos:end="1317:37">avctx</name><operator pos:start="1317:38" pos:end="1317:39">-&gt;</operator><name pos:start="1317:40" pos:end="1317:48">extradata</name><index pos:start="1317:49" pos:end="1317:51">[<expr pos:start="1317:50" pos:end="1317:50"><literal type="number" pos:start="1317:50" pos:end="1317:50">0</literal></expr>]</index></name> <operator pos:start="1317:53" pos:end="1317:53">/</operator> <literal type="number" pos:start="1317:55" pos:end="1317:56">16</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1319:13" pos:end="1319:54"><expr pos:start="1319:13" pos:end="1319:53"><name pos:start="1319:13" pos:end="1319:18">blocks</name> <operator pos:start="1319:20" pos:end="1319:20">=</operator> <name pos:start="1319:22" pos:end="1319:31">nb_samples</name> <operator pos:start="1319:33" pos:end="1319:33">/</operator> <name pos:start="1319:35" pos:end="1319:53"><name pos:start="1319:35" pos:end="1319:39">avctx</name><operator pos:start="1319:40" pos:end="1319:41">-&gt;</operator><name pos:start="1319:42" pos:end="1319:50">extradata</name><index pos:start="1319:51" pos:end="1319:53">[<expr pos:start="1319:52" pos:end="1319:52"><literal type="number" pos:start="1319:52" pos:end="1319:52">0</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1321:11" pos:end="1327:9">else <block pos:start="1321:16" pos:end="1327:9">{<block_content pos:start="1323:13" pos:end="1325:23">

            <expr_stmt pos:start="1323:13" pos:end="1323:48"><expr pos:start="1323:13" pos:end="1323:47"><name pos:start="1323:13" pos:end="1323:29">samples_per_block</name> <operator pos:start="1323:31" pos:end="1323:31">=</operator> <name pos:start="1323:33" pos:end="1323:42">nb_samples</name> <operator pos:start="1323:44" pos:end="1323:44">/</operator> <literal type="number" pos:start="1323:46" pos:end="1323:47">16</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1325:13" pos:end="1325:23"><expr pos:start="1325:13" pos:end="1325:22"><name pos:start="1325:13" pos:end="1325:18">blocks</name> <operator pos:start="1325:20" pos:end="1325:20">=</operator> <literal type="number" pos:start="1325:22" pos:end="1325:22">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <for pos:start="1331:9" pos:end="1403:9">for <control pos:start="1331:13" pos:end="1331:36">(<init pos:start="1331:14" pos:end="1331:19"><expr pos:start="1331:14" pos:end="1331:18"><name pos:start="1331:14" pos:end="1331:14">m</name> <operator pos:start="1331:16" pos:end="1331:16">=</operator> <literal type="number" pos:start="1331:18" pos:end="1331:18">0</literal></expr>;</init> <condition pos:start="1331:21" pos:end="1331:31"><expr pos:start="1331:21" pos:end="1331:30"><name pos:start="1331:21" pos:end="1331:21">m</name> <operator pos:start="1331:23" pos:end="1331:23">&lt;</operator> <name pos:start="1331:25" pos:end="1331:30">blocks</name></expr>;</condition> <incr pos:start="1331:33" pos:end="1331:35"><expr pos:start="1331:33" pos:end="1331:35"><name pos:start="1331:33" pos:end="1331:33">m</name><operator pos:start="1331:34" pos:end="1331:35">++</operator></expr></incr>)</control> <block pos:start="1331:38" pos:end="1403:9">{<block_content pos:start="1333:9" pos:end="1401:9">

        <for pos:start="1333:9" pos:end="1401:9">for <control pos:start="1333:13" pos:end="1333:63">(<init pos:start="1333:14" pos:end="1333:25"><expr pos:start="1333:14" pos:end="1333:24"><name pos:start="1333:14" pos:end="1333:20">channel</name> <operator pos:start="1333:22" pos:end="1333:22">=</operator> <literal type="number" pos:start="1333:24" pos:end="1333:24">0</literal></expr>;</init> <condition pos:start="1333:27" pos:end="1333:52"><expr pos:start="1333:27" pos:end="1333:51"><name pos:start="1333:27" pos:end="1333:33">channel</name> <operator pos:start="1333:35" pos:end="1333:35">&lt;</operator> <name pos:start="1333:37" pos:end="1333:51"><name pos:start="1333:37" pos:end="1333:41">avctx</name><operator pos:start="1333:42" pos:end="1333:43">-&gt;</operator><name pos:start="1333:44" pos:end="1333:51">channels</name></name></expr>;</condition> <incr pos:start="1333:54" pos:end="1333:62"><expr pos:start="1333:54" pos:end="1333:62"><name pos:start="1333:54" pos:end="1333:60">channel</name><operator pos:start="1333:61" pos:end="1333:62">++</operator></expr></incr>)</control> <block pos:start="1333:65" pos:end="1401:9">{<block_content pos:start="1335:13" pos:end="1399:47">

            <decl_stmt pos:start="1335:13" pos:end="1335:51"><decl pos:start="1335:13" pos:end="1335:50"><type pos:start="1335:13" pos:end="1335:15"><name pos:start="1335:13" pos:end="1335:15">int</name></type> <name pos:start="1335:17" pos:end="1335:21">prev1</name> <init pos:start="1335:23" pos:end="1335:50">= <expr pos:start="1335:25" pos:end="1335:50"><name pos:start="1335:25" pos:end="1335:42"><name pos:start="1335:25" pos:end="1335:25">c</name><operator pos:start="1335:26" pos:end="1335:27">-&gt;</operator><name pos:start="1335:28" pos:end="1335:33">status</name><index pos:start="1335:34" pos:end="1335:42">[<expr pos:start="1335:35" pos:end="1335:41"><name pos:start="1335:35" pos:end="1335:41">channel</name></expr>]</index></name><operator pos:start="1335:43" pos:end="1335:43">.</operator><name pos:start="1335:44" pos:end="1335:50">sample1</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="1337:13" pos:end="1337:51"><decl pos:start="1337:13" pos:end="1337:50"><type pos:start="1337:13" pos:end="1337:15"><name pos:start="1337:13" pos:end="1337:15">int</name></type> <name pos:start="1337:17" pos:end="1337:21">prev2</name> <init pos:start="1337:23" pos:end="1337:50">= <expr pos:start="1337:25" pos:end="1337:50"><name pos:start="1337:25" pos:end="1337:42"><name pos:start="1337:25" pos:end="1337:25">c</name><operator pos:start="1337:26" pos:end="1337:27">-&gt;</operator><name pos:start="1337:28" pos:end="1337:33">status</name><index pos:start="1337:34" pos:end="1337:42">[<expr pos:start="1337:35" pos:end="1337:41"><name pos:start="1337:35" pos:end="1337:41">channel</name></expr>]</index></name><operator pos:start="1337:43" pos:end="1337:43">.</operator><name pos:start="1337:44" pos:end="1337:50">sample2</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="1341:13" pos:end="1341:50"><expr pos:start="1341:13" pos:end="1341:49"><name pos:start="1341:13" pos:end="1341:19">samples</name> <operator pos:start="1341:21" pos:end="1341:21">=</operator> <name pos:start="1341:23" pos:end="1341:40"><name pos:start="1341:23" pos:end="1341:31">samples_p</name><index pos:start="1341:32" pos:end="1341:40">[<expr pos:start="1341:33" pos:end="1341:39"><name pos:start="1341:33" pos:end="1341:39">channel</name></expr>]</index></name> <operator pos:start="1341:42" pos:end="1341:42">+</operator> <name pos:start="1341:44" pos:end="1341:44">m</name> <operator pos:start="1341:46" pos:end="1341:46">*</operator> <literal type="number" pos:start="1341:48" pos:end="1341:49">16</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="1343:13" pos:end="1343:57">/* Read in every sample for this channel.  */</comment>

            <for pos:start="1345:13" pos:end="1393:13">for <control pos:start="1345:17" pos:end="1345:51">(<init pos:start="1345:18" pos:end="1345:23"><expr pos:start="1345:18" pos:end="1345:22"><name pos:start="1345:18" pos:end="1345:18">i</name> <operator pos:start="1345:20" pos:end="1345:20">=</operator> <literal type="number" pos:start="1345:22" pos:end="1345:22">0</literal></expr>;</init> <condition pos:start="1345:25" pos:end="1345:46"><expr pos:start="1345:25" pos:end="1345:45"><name pos:start="1345:25" pos:end="1345:25">i</name> <operator pos:start="1345:27" pos:end="1345:27">&lt;</operator> <name pos:start="1345:29" pos:end="1345:45">samples_per_block</name></expr>;</condition> <incr pos:start="1345:48" pos:end="1345:50"><expr pos:start="1345:48" pos:end="1345:50"><name pos:start="1345:48" pos:end="1345:48">i</name><operator pos:start="1345:49" pos:end="1345:50">++</operator></expr></incr>)</control> <block pos:start="1345:53" pos:end="1393:13">{<block_content pos:start="1347:17" pos:end="1391:17">

                <decl_stmt pos:start="1347:17" pos:end="1347:54"><decl pos:start="1347:17" pos:end="1347:53"><type pos:start="1347:17" pos:end="1347:19"><name pos:start="1347:17" pos:end="1347:19">int</name></type> <name pos:start="1347:21" pos:end="1347:24">byte</name> <init pos:start="1347:26" pos:end="1347:53">= <expr pos:start="1347:28" pos:end="1347:53"><call pos:start="1347:28" pos:end="1347:53"><name pos:start="1347:28" pos:end="1347:48">bytestream2_get_byteu</name><argument_list pos:start="1347:49" pos:end="1347:53">(<argument pos:start="1347:50" pos:end="1347:52"><expr pos:start="1347:50" pos:end="1347:52"><operator pos:start="1347:50" pos:end="1347:50">&amp;</operator><name pos:start="1347:51" pos:end="1347:52">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1349:17" pos:end="1349:45"><decl pos:start="1349:17" pos:end="1349:44"><type pos:start="1349:17" pos:end="1349:19"><name pos:start="1349:17" pos:end="1349:19">int</name></type> <name pos:start="1349:21" pos:end="1349:25">scale</name> <init pos:start="1349:27" pos:end="1349:44">= <expr pos:start="1349:29" pos:end="1349:44"><literal type="number" pos:start="1349:29" pos:end="1349:29">1</literal> <operator pos:start="1349:31" pos:end="1349:32">&lt;&lt;</operator> <operator pos:start="1349:34" pos:end="1349:34">(</operator><name pos:start="1349:35" pos:end="1349:38">byte</name> <operator pos:start="1349:40" pos:end="1349:41">&gt;&gt;</operator> <literal type="number" pos:start="1349:43" pos:end="1349:43">4</literal><operator pos:start="1349:44" pos:end="1349:44">)</operator></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1351:17" pos:end="1351:39"><decl pos:start="1351:17" pos:end="1351:38"><type pos:start="1351:17" pos:end="1351:19"><name pos:start="1351:17" pos:end="1351:19">int</name></type> <name pos:start="1351:21" pos:end="1351:25">index</name> <init pos:start="1351:27" pos:end="1351:38">= <expr pos:start="1351:29" pos:end="1351:38"><name pos:start="1351:29" pos:end="1351:32">byte</name> <operator pos:start="1351:34" pos:end="1351:34">&amp;</operator> <literal type="number" pos:start="1351:36" pos:end="1351:38">0xf</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1353:17" pos:end="1353:60"><decl pos:start="1353:17" pos:end="1353:59"><type pos:start="1353:17" pos:end="1353:19"><name pos:start="1353:17" pos:end="1353:19">int</name></type> <name pos:start="1353:21" pos:end="1353:27">factor1</name> <init pos:start="1353:29" pos:end="1353:59">= <expr pos:start="1353:31" pos:end="1353:59"><name pos:start="1353:31" pos:end="1353:59"><name pos:start="1353:31" pos:end="1353:49">ff_adpcm_afc_coeffs</name><index pos:start="1353:50" pos:end="1353:52">[<expr pos:start="1353:51" pos:end="1353:51"><literal type="number" pos:start="1353:51" pos:end="1353:51">0</literal></expr>]</index><index pos:start="1353:53" pos:end="1353:59">[<expr pos:start="1353:54" pos:end="1353:58"><name pos:start="1353:54" pos:end="1353:58">index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1355:17" pos:end="1355:60"><decl pos:start="1355:17" pos:end="1355:59"><type pos:start="1355:17" pos:end="1355:19"><name pos:start="1355:17" pos:end="1355:19">int</name></type> <name pos:start="1355:21" pos:end="1355:27">factor2</name> <init pos:start="1355:29" pos:end="1355:59">= <expr pos:start="1355:31" pos:end="1355:59"><name pos:start="1355:31" pos:end="1355:59"><name pos:start="1355:31" pos:end="1355:49">ff_adpcm_afc_coeffs</name><index pos:start="1355:50" pos:end="1355:52">[<expr pos:start="1355:51" pos:end="1355:51"><literal type="number" pos:start="1355:51" pos:end="1355:51">1</literal></expr>]</index><index pos:start="1355:53" pos:end="1355:59">[<expr pos:start="1355:54" pos:end="1355:58"><name pos:start="1355:54" pos:end="1355:58">index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



                <comment type="block" pos:start="1359:17" pos:end="1359:41">/* Decode 16 samples.  */</comment>

                <for pos:start="1361:17" pos:end="1391:17">for <control pos:start="1361:21" pos:end="1361:40">(<init pos:start="1361:22" pos:end="1361:27"><expr pos:start="1361:22" pos:end="1361:26"><name pos:start="1361:22" pos:end="1361:22">n</name> <operator pos:start="1361:24" pos:end="1361:24">=</operator> <literal type="number" pos:start="1361:26" pos:end="1361:26">0</literal></expr>;</init> <condition pos:start="1361:29" pos:end="1361:35"><expr pos:start="1361:29" pos:end="1361:34"><name pos:start="1361:29" pos:end="1361:29">n</name> <operator pos:start="1361:31" pos:end="1361:31">&lt;</operator> <literal type="number" pos:start="1361:33" pos:end="1361:34">16</literal></expr>;</condition> <incr pos:start="1361:37" pos:end="1361:39"><expr pos:start="1361:37" pos:end="1361:39"><name pos:start="1361:37" pos:end="1361:37">n</name><operator pos:start="1361:38" pos:end="1361:39">++</operator></expr></incr>)</control> <block pos:start="1361:42" pos:end="1391:17">{<block_content pos:start="1363:21" pos:end="1389:39">

                    <decl_stmt pos:start="1363:21" pos:end="1363:38"><decl pos:start="1363:21" pos:end="1363:37"><type pos:start="1363:21" pos:end="1363:27"><name pos:start="1363:21" pos:end="1363:27">int32_t</name></type> <name pos:start="1363:29" pos:end="1363:37">sampledat</name></decl>;</decl_stmt>



                    <if_stmt pos:start="1367:21" pos:end="1377:21"><if pos:start="1367:21" pos:end="1371:21">if <condition pos:start="1367:24" pos:end="1367:30">(<expr pos:start="1367:25" pos:end="1367:29"><name pos:start="1367:25" pos:end="1367:25">n</name> <operator pos:start="1367:27" pos:end="1367:27">&amp;</operator> <literal type="number" pos:start="1367:29" pos:end="1367:29">1</literal></expr>)</condition> <block pos:start="1367:32" pos:end="1371:21">{<block_content pos:start="1369:25" pos:end="1369:57">

                        <expr_stmt pos:start="1369:25" pos:end="1369:57"><expr pos:start="1369:25" pos:end="1369:56"><name pos:start="1369:25" pos:end="1369:33">sampledat</name> <operator pos:start="1369:35" pos:end="1369:35">=</operator> <call pos:start="1369:37" pos:end="1369:56"><name pos:start="1369:37" pos:end="1369:47">sign_extend</name><argument_list pos:start="1369:48" pos:end="1369:56">(<argument pos:start="1369:49" pos:end="1369:52"><expr pos:start="1369:49" pos:end="1369:52"><name pos:start="1369:49" pos:end="1369:52">byte</name></expr></argument>, <argument pos:start="1369:55" pos:end="1369:55"><expr pos:start="1369:55" pos:end="1369:55"><literal type="number" pos:start="1369:55" pos:end="1369:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1371:23" pos:end="1377:21">else <block pos:start="1371:28" pos:end="1377:21">{<block_content pos:start="1373:25" pos:end="1375:62">

                        <expr_stmt pos:start="1373:25" pos:end="1373:58"><expr pos:start="1373:25" pos:end="1373:57"><name pos:start="1373:25" pos:end="1373:28">byte</name> <operator pos:start="1373:30" pos:end="1373:30">=</operator> <call pos:start="1373:32" pos:end="1373:57"><name pos:start="1373:32" pos:end="1373:52">bytestream2_get_byteu</name><argument_list pos:start="1373:53" pos:end="1373:57">(<argument pos:start="1373:54" pos:end="1373:56"><expr pos:start="1373:54" pos:end="1373:56"><operator pos:start="1373:54" pos:end="1373:54">&amp;</operator><name pos:start="1373:55" pos:end="1373:56">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1375:25" pos:end="1375:62"><expr pos:start="1375:25" pos:end="1375:61"><name pos:start="1375:25" pos:end="1375:33">sampledat</name> <operator pos:start="1375:35" pos:end="1375:35">=</operator> <call pos:start="1375:37" pos:end="1375:61"><name pos:start="1375:37" pos:end="1375:47">sign_extend</name><argument_list pos:start="1375:48" pos:end="1375:61">(<argument pos:start="1375:49" pos:end="1375:57"><expr pos:start="1375:49" pos:end="1375:57"><name pos:start="1375:49" pos:end="1375:52">byte</name> <operator pos:start="1375:54" pos:end="1375:55">&gt;&gt;</operator> <literal type="number" pos:start="1375:57" pos:end="1375:57">4</literal></expr></argument>, <argument pos:start="1375:60" pos:end="1375:60"><expr pos:start="1375:60" pos:end="1375:60"><literal type="number" pos:start="1375:60" pos:end="1375:60">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>



                    <expr_stmt pos:start="1381:21" pos:end="1383:68"><expr pos:start="1381:21" pos:end="1383:67"><name pos:start="1381:21" pos:end="1381:29">sampledat</name> <operator pos:start="1381:31" pos:end="1381:31">=</operator> <operator pos:start="1381:33" pos:end="1381:33">(</operator><operator pos:start="1381:34" pos:end="1381:34">(</operator><name pos:start="1381:35" pos:end="1381:39">prev1</name> <operator pos:start="1381:41" pos:end="1381:41">*</operator> <name pos:start="1381:43" pos:end="1381:49">factor1</name> <operator pos:start="1381:51" pos:end="1381:51">+</operator> <name pos:start="1381:53" pos:end="1381:57">prev2</name> <operator pos:start="1381:59" pos:end="1381:59">*</operator> <name pos:start="1381:61" pos:end="1381:67">factor2</name><operator pos:start="1381:68" pos:end="1381:68">)</operator> <operator pos:start="1381:70" pos:end="1381:70">+</operator>

                                 <operator pos:start="1383:34" pos:end="1383:34">(</operator><operator pos:start="1383:35" pos:end="1383:35">(</operator><name pos:start="1383:36" pos:end="1383:44">sampledat</name> <operator pos:start="1383:46" pos:end="1383:46">*</operator> <name pos:start="1383:48" pos:end="1383:52">scale</name><operator pos:start="1383:53" pos:end="1383:53">)</operator> <operator pos:start="1383:55" pos:end="1383:56">&lt;&lt;</operator> <literal type="number" pos:start="1383:58" pos:end="1383:59">11</literal><operator pos:start="1383:60" pos:end="1383:60">)</operator><operator pos:start="1383:61" pos:end="1383:61">)</operator> <operator pos:start="1383:63" pos:end="1383:64">&gt;&gt;</operator> <literal type="number" pos:start="1383:66" pos:end="1383:67">11</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="1385:21" pos:end="1385:56"><expr pos:start="1385:21" pos:end="1385:55"><operator pos:start="1385:21" pos:end="1385:21">*</operator><name pos:start="1385:22" pos:end="1385:28">samples</name> <operator pos:start="1385:30" pos:end="1385:30">=</operator> <call pos:start="1385:32" pos:end="1385:55"><name pos:start="1385:32" pos:end="1385:44">av_clip_int16</name><argument_list pos:start="1385:45" pos:end="1385:55">(<argument pos:start="1385:46" pos:end="1385:54"><expr pos:start="1385:46" pos:end="1385:54"><name pos:start="1385:46" pos:end="1385:54">sampledat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1387:21" pos:end="1387:34"><expr pos:start="1387:21" pos:end="1387:33"><name pos:start="1387:21" pos:end="1387:25">prev2</name> <operator pos:start="1387:27" pos:end="1387:27">=</operator> <name pos:start="1387:29" pos:end="1387:33">prev1</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1389:21" pos:end="1389:39"><expr pos:start="1389:21" pos:end="1389:38"><name pos:start="1389:21" pos:end="1389:25">prev1</name> <operator pos:start="1389:27" pos:end="1389:27">=</operator> <operator pos:start="1389:29" pos:end="1389:29">*</operator><name pos:start="1389:30" pos:end="1389:36">samples</name><operator pos:start="1389:37" pos:end="1389:38">++</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>



            <expr_stmt pos:start="1397:13" pos:end="1397:47"><expr pos:start="1397:13" pos:end="1397:46"><name pos:start="1397:13" pos:end="1397:30"><name pos:start="1397:13" pos:end="1397:13">c</name><operator pos:start="1397:14" pos:end="1397:15">-&gt;</operator><name pos:start="1397:16" pos:end="1397:21">status</name><index pos:start="1397:22" pos:end="1397:30">[<expr pos:start="1397:23" pos:end="1397:29"><name pos:start="1397:23" pos:end="1397:29">channel</name></expr>]</index></name><operator pos:start="1397:31" pos:end="1397:31">.</operator><name pos:start="1397:32" pos:end="1397:38">sample1</name> <operator pos:start="1397:40" pos:end="1397:40">=</operator> <name pos:start="1397:42" pos:end="1397:46">prev1</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1399:13" pos:end="1399:47"><expr pos:start="1399:13" pos:end="1399:46"><name pos:start="1399:13" pos:end="1399:30"><name pos:start="1399:13" pos:end="1399:13">c</name><operator pos:start="1399:14" pos:end="1399:15">-&gt;</operator><name pos:start="1399:16" pos:end="1399:21">status</name><index pos:start="1399:22" pos:end="1399:30">[<expr pos:start="1399:23" pos:end="1399:29"><name pos:start="1399:23" pos:end="1399:29">channel</name></expr>]</index></name><operator pos:start="1399:31" pos:end="1399:31">.</operator><name pos:start="1399:32" pos:end="1399:38">sample2</name> <operator pos:start="1399:40" pos:end="1399:40">=</operator> <name pos:start="1399:42" pos:end="1399:46">prev2</name></expr>;</expr_stmt>

        </block_content>}</block></for>

        </block_content>}</block></for>

        <expr_stmt pos:start="1405:9" pos:end="1405:43"><expr pos:start="1405:9" pos:end="1405:42"><call pos:start="1405:9" pos:end="1405:42"><name pos:start="1405:9" pos:end="1405:24">bytestream2_seek</name><argument_list pos:start="1405:25" pos:end="1405:42">(<argument pos:start="1405:26" pos:end="1405:28"><expr pos:start="1405:26" pos:end="1405:28"><operator pos:start="1405:26" pos:end="1405:26">&amp;</operator><name pos:start="1405:27" pos:end="1405:28">gb</name></expr></argument>, <argument pos:start="1405:31" pos:end="1405:31"><expr pos:start="1405:31" pos:end="1405:31"><literal type="number" pos:start="1405:31" pos:end="1405:31">0</literal></expr></argument>, <argument pos:start="1405:34" pos:end="1405:41"><expr pos:start="1405:34" pos:end="1405:41"><name pos:start="1405:34" pos:end="1405:41">SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1407:9" pos:end="1407:14">break;</break>

    </block_content>}</block>

    <case pos:start="1411:5" pos:end="1411:31">case <expr pos:start="1411:10" pos:end="1411:30"><name pos:start="1411:10" pos:end="1411:30">AV_CODEC_ID_ADPCM_THP</name></expr>:</case>

    <block pos:start="1413:5" pos:end="1503:5">{<block_content pos:start="1415:9" pos:end="1501:14">

        <decl_stmt pos:start="1415:9" pos:end="1415:25"><decl pos:start="1415:9" pos:end="1415:24"><type pos:start="1415:9" pos:end="1415:11"><name pos:start="1415:9" pos:end="1415:11">int</name></type> <name pos:start="1415:13" pos:end="1415:24"><name pos:start="1415:13" pos:end="1415:17">table</name><index pos:start="1415:18" pos:end="1415:20">[<expr pos:start="1415:19" pos:end="1415:19"><literal type="number" pos:start="1415:19" pos:end="1415:19">6</literal></expr>]</index><index pos:start="1415:21" pos:end="1415:24">[<expr pos:start="1415:22" pos:end="1415:23"><literal type="number" pos:start="1415:22" pos:end="1415:23">16</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="1417:9" pos:end="1417:15"><decl pos:start="1417:9" pos:end="1417:14"><type pos:start="1417:9" pos:end="1417:11"><name pos:start="1417:9" pos:end="1417:11">int</name></type> <name pos:start="1417:13" pos:end="1417:14">ch</name></decl>;</decl_stmt>



        <for pos:start="1421:9" pos:end="1425:74">for <control pos:start="1421:13" pos:end="1421:45">(<init pos:start="1421:14" pos:end="1421:19"><expr pos:start="1421:14" pos:end="1421:18"><name pos:start="1421:14" pos:end="1421:14">i</name> <operator pos:start="1421:16" pos:end="1421:16">=</operator> <literal type="number" pos:start="1421:18" pos:end="1421:18">0</literal></expr>;</init> <condition pos:start="1421:21" pos:end="1421:40"><expr pos:start="1421:21" pos:end="1421:39"><name pos:start="1421:21" pos:end="1421:21">i</name> <operator pos:start="1421:23" pos:end="1421:23">&lt;</operator> <name pos:start="1421:25" pos:end="1421:39"><name pos:start="1421:25" pos:end="1421:29">avctx</name><operator pos:start="1421:30" pos:end="1421:31">-&gt;</operator><name pos:start="1421:32" pos:end="1421:39">channels</name></name></expr>;</condition> <incr pos:start="1421:42" pos:end="1421:44"><expr pos:start="1421:42" pos:end="1421:44"><name pos:start="1421:42" pos:end="1421:42">i</name><operator pos:start="1421:43" pos:end="1421:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1423:13" pos:end="1425:74"><block_content pos:start="1423:13" pos:end="1425:74">

            <for pos:start="1423:13" pos:end="1425:74">for <control pos:start="1423:17" pos:end="1423:36">(<init pos:start="1423:18" pos:end="1423:23"><expr pos:start="1423:18" pos:end="1423:22"><name pos:start="1423:18" pos:end="1423:18">n</name> <operator pos:start="1423:20" pos:end="1423:20">=</operator> <literal type="number" pos:start="1423:22" pos:end="1423:22">0</literal></expr>;</init> <condition pos:start="1423:25" pos:end="1423:31"><expr pos:start="1423:25" pos:end="1423:30"><name pos:start="1423:25" pos:end="1423:25">n</name> <operator pos:start="1423:27" pos:end="1423:27">&lt;</operator> <literal type="number" pos:start="1423:29" pos:end="1423:30">16</literal></expr>;</condition> <incr pos:start="1423:33" pos:end="1423:35"><expr pos:start="1423:33" pos:end="1423:35"><name pos:start="1423:33" pos:end="1423:33">n</name><operator pos:start="1423:34" pos:end="1423:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="1425:17" pos:end="1425:74"><block_content pos:start="1425:17" pos:end="1425:74">

                <expr_stmt pos:start="1425:17" pos:end="1425:74"><expr pos:start="1425:17" pos:end="1425:73"><name pos:start="1425:17" pos:end="1425:27"><name pos:start="1425:17" pos:end="1425:21">table</name><index pos:start="1425:22" pos:end="1425:24">[<expr pos:start="1425:23" pos:end="1425:23"><name pos:start="1425:23" pos:end="1425:23">i</name></expr>]</index><index pos:start="1425:25" pos:end="1425:27">[<expr pos:start="1425:26" pos:end="1425:26"><name pos:start="1425:26" pos:end="1425:26">n</name></expr>]</index></name> <operator pos:start="1425:29" pos:end="1425:29">=</operator> <call pos:start="1425:31" pos:end="1425:73"><name pos:start="1425:31" pos:end="1425:41">sign_extend</name><argument_list pos:start="1425:42" pos:end="1425:73">(<argument pos:start="1425:43" pos:end="1425:68"><expr pos:start="1425:43" pos:end="1425:68"><call pos:start="1425:43" pos:end="1425:68"><name pos:start="1425:43" pos:end="1425:63">bytestream2_get_be16u</name><argument_list pos:start="1425:64" pos:end="1425:68">(<argument pos:start="1425:65" pos:end="1425:67"><expr pos:start="1425:65" pos:end="1425:67"><operator pos:start="1425:65" pos:end="1425:65">&amp;</operator><name pos:start="1425:66" pos:end="1425:67">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1425:71" pos:end="1425:72"><expr pos:start="1425:71" pos:end="1425:72"><literal type="number" pos:start="1425:71" pos:end="1425:72">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>



        <comment type="block" pos:start="1429:9" pos:end="1429:46">/* Initialize the previous sample.  */</comment>

        <for pos:start="1431:9" pos:end="1437:9">for <control pos:start="1431:13" pos:end="1431:45">(<init pos:start="1431:14" pos:end="1431:19"><expr pos:start="1431:14" pos:end="1431:18"><name pos:start="1431:14" pos:end="1431:14">i</name> <operator pos:start="1431:16" pos:end="1431:16">=</operator> <literal type="number" pos:start="1431:18" pos:end="1431:18">0</literal></expr>;</init> <condition pos:start="1431:21" pos:end="1431:40"><expr pos:start="1431:21" pos:end="1431:39"><name pos:start="1431:21" pos:end="1431:21">i</name> <operator pos:start="1431:23" pos:end="1431:23">&lt;</operator> <name pos:start="1431:25" pos:end="1431:39"><name pos:start="1431:25" pos:end="1431:29">avctx</name><operator pos:start="1431:30" pos:end="1431:31">-&gt;</operator><name pos:start="1431:32" pos:end="1431:39">channels</name></name></expr>;</condition> <incr pos:start="1431:42" pos:end="1431:44"><expr pos:start="1431:42" pos:end="1431:44"><name pos:start="1431:42" pos:end="1431:42">i</name><operator pos:start="1431:43" pos:end="1431:44">++</operator></expr></incr>)</control> <block pos:start="1431:47" pos:end="1437:9">{<block_content pos:start="1433:13" pos:end="1435:79">

            <expr_stmt pos:start="1433:13" pos:end="1433:79"><expr pos:start="1433:13" pos:end="1433:78"><name pos:start="1433:13" pos:end="1433:24"><name pos:start="1433:13" pos:end="1433:13">c</name><operator pos:start="1433:14" pos:end="1433:15">-&gt;</operator><name pos:start="1433:16" pos:end="1433:21">status</name><index pos:start="1433:22" pos:end="1433:24">[<expr pos:start="1433:23" pos:end="1433:23"><name pos:start="1433:23" pos:end="1433:23">i</name></expr>]</index></name><operator pos:start="1433:25" pos:end="1433:25">.</operator><name pos:start="1433:26" pos:end="1433:32">sample1</name> <operator pos:start="1433:34" pos:end="1433:34">=</operator> <call pos:start="1433:36" pos:end="1433:78"><name pos:start="1433:36" pos:end="1433:46">sign_extend</name><argument_list pos:start="1433:47" pos:end="1433:78">(<argument pos:start="1433:48" pos:end="1433:73"><expr pos:start="1433:48" pos:end="1433:73"><call pos:start="1433:48" pos:end="1433:73"><name pos:start="1433:48" pos:end="1433:68">bytestream2_get_be16u</name><argument_list pos:start="1433:69" pos:end="1433:73">(<argument pos:start="1433:70" pos:end="1433:72"><expr pos:start="1433:70" pos:end="1433:72"><operator pos:start="1433:70" pos:end="1433:70">&amp;</operator><name pos:start="1433:71" pos:end="1433:72">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1433:76" pos:end="1433:77"><expr pos:start="1433:76" pos:end="1433:77"><literal type="number" pos:start="1433:76" pos:end="1433:77">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1435:13" pos:end="1435:79"><expr pos:start="1435:13" pos:end="1435:78"><name pos:start="1435:13" pos:end="1435:24"><name pos:start="1435:13" pos:end="1435:13">c</name><operator pos:start="1435:14" pos:end="1435:15">-&gt;</operator><name pos:start="1435:16" pos:end="1435:21">status</name><index pos:start="1435:22" pos:end="1435:24">[<expr pos:start="1435:23" pos:end="1435:23"><name pos:start="1435:23" pos:end="1435:23">i</name></expr>]</index></name><operator pos:start="1435:25" pos:end="1435:25">.</operator><name pos:start="1435:26" pos:end="1435:32">sample2</name> <operator pos:start="1435:34" pos:end="1435:34">=</operator> <call pos:start="1435:36" pos:end="1435:78"><name pos:start="1435:36" pos:end="1435:46">sign_extend</name><argument_list pos:start="1435:47" pos:end="1435:78">(<argument pos:start="1435:48" pos:end="1435:73"><expr pos:start="1435:48" pos:end="1435:73"><call pos:start="1435:48" pos:end="1435:73"><name pos:start="1435:48" pos:end="1435:68">bytestream2_get_be16u</name><argument_list pos:start="1435:69" pos:end="1435:73">(<argument pos:start="1435:70" pos:end="1435:72"><expr pos:start="1435:70" pos:end="1435:72"><operator pos:start="1435:70" pos:end="1435:70">&amp;</operator><name pos:start="1435:71" pos:end="1435:72">gb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="1435:76" pos:end="1435:77"><expr pos:start="1435:76" pos:end="1435:77"><literal type="number" pos:start="1435:76" pos:end="1435:77">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <for pos:start="1441:9" pos:end="1499:9">for <control pos:start="1441:13" pos:end="1441:48">(<init pos:start="1441:14" pos:end="1441:20"><expr pos:start="1441:14" pos:end="1441:19"><name pos:start="1441:14" pos:end="1441:15">ch</name> <operator pos:start="1441:17" pos:end="1441:17">=</operator> <literal type="number" pos:start="1441:19" pos:end="1441:19">0</literal></expr>;</init> <condition pos:start="1441:22" pos:end="1441:42"><expr pos:start="1441:22" pos:end="1441:41"><name pos:start="1441:22" pos:end="1441:23">ch</name> <operator pos:start="1441:25" pos:end="1441:25">&lt;</operator> <name pos:start="1441:27" pos:end="1441:41"><name pos:start="1441:27" pos:end="1441:31">avctx</name><operator pos:start="1441:32" pos:end="1441:33">-&gt;</operator><name pos:start="1441:34" pos:end="1441:41">channels</name></name></expr>;</condition> <incr pos:start="1441:44" pos:end="1441:47"><expr pos:start="1441:44" pos:end="1441:47"><name pos:start="1441:44" pos:end="1441:45">ch</name><operator pos:start="1441:46" pos:end="1441:47">++</operator></expr></incr>)</control> <block pos:start="1441:50" pos:end="1499:9">{<block_content pos:start="1443:13" pos:end="1497:13">

            <expr_stmt pos:start="1443:13" pos:end="1443:36"><expr pos:start="1443:13" pos:end="1443:35"><name pos:start="1443:13" pos:end="1443:19">samples</name> <operator pos:start="1443:21" pos:end="1443:21">=</operator> <name pos:start="1443:23" pos:end="1443:35"><name pos:start="1443:23" pos:end="1443:31">samples_p</name><index pos:start="1443:32" pos:end="1443:35">[<expr pos:start="1443:33" pos:end="1443:34"><name pos:start="1443:33" pos:end="1443:34">ch</name></expr>]</index></name></expr>;</expr_stmt>



            <comment type="block" pos:start="1447:13" pos:end="1447:57">/* Read in every sample for this channel.  */</comment>

            <for pos:start="1449:13" pos:end="1497:13">for <control pos:start="1449:17" pos:end="1449:49">(<init pos:start="1449:18" pos:end="1449:23"><expr pos:start="1449:18" pos:end="1449:22"><name pos:start="1449:18" pos:end="1449:18">i</name> <operator pos:start="1449:20" pos:end="1449:20">=</operator> <literal type="number" pos:start="1449:22" pos:end="1449:22">0</literal></expr>;</init> <condition pos:start="1449:25" pos:end="1449:44"><expr pos:start="1449:25" pos:end="1449:43"><name pos:start="1449:25" pos:end="1449:25">i</name> <operator pos:start="1449:27" pos:end="1449:27">&lt;</operator> <name pos:start="1449:29" pos:end="1449:38">nb_samples</name> <operator pos:start="1449:40" pos:end="1449:40">/</operator> <literal type="number" pos:start="1449:42" pos:end="1449:43">14</literal></expr>;</condition> <incr pos:start="1449:46" pos:end="1449:48"><expr pos:start="1449:46" pos:end="1449:48"><name pos:start="1449:46" pos:end="1449:46">i</name><operator pos:start="1449:47" pos:end="1449:48">++</operator></expr></incr>)</control> <block pos:start="1449:51" pos:end="1497:13">{<block_content pos:start="1451:17" pos:end="1495:17">

                <decl_stmt pos:start="1451:17" pos:end="1451:54"><decl pos:start="1451:17" pos:end="1451:53"><type pos:start="1451:17" pos:end="1451:19"><name pos:start="1451:17" pos:end="1451:19">int</name></type> <name pos:start="1451:21" pos:end="1451:24">byte</name> <init pos:start="1451:26" pos:end="1451:53">= <expr pos:start="1451:28" pos:end="1451:53"><call pos:start="1451:28" pos:end="1451:53"><name pos:start="1451:28" pos:end="1451:48">bytestream2_get_byteu</name><argument_list pos:start="1451:49" pos:end="1451:53">(<argument pos:start="1451:50" pos:end="1451:52"><expr pos:start="1451:50" pos:end="1451:52"><operator pos:start="1451:50" pos:end="1451:50">&amp;</operator><name pos:start="1451:51" pos:end="1451:52">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1453:17" pos:end="1453:44"><decl pos:start="1453:17" pos:end="1453:43"><type pos:start="1453:17" pos:end="1453:19"><name pos:start="1453:17" pos:end="1453:19">int</name></type> <name pos:start="1453:21" pos:end="1453:25">index</name> <init pos:start="1453:27" pos:end="1453:43">= <expr pos:start="1453:29" pos:end="1453:43"><operator pos:start="1453:29" pos:end="1453:29">(</operator><name pos:start="1453:30" pos:end="1453:33">byte</name> <operator pos:start="1453:35" pos:end="1453:36">&gt;&gt;</operator> <literal type="number" pos:start="1453:38" pos:end="1453:38">4</literal><operator pos:start="1453:39" pos:end="1453:39">)</operator> <operator pos:start="1453:41" pos:end="1453:41">&amp;</operator> <literal type="number" pos:start="1453:43" pos:end="1453:43">7</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1455:17" pos:end="1455:47"><decl pos:start="1455:17" pos:end="1455:46"><type pos:start="1455:17" pos:end="1455:28"><name pos:start="1455:17" pos:end="1455:24">unsigned</name> <name pos:start="1455:26" pos:end="1455:28">int</name></type> <name pos:start="1455:30" pos:end="1455:32">exp</name> <init pos:start="1455:34" pos:end="1455:46">= <expr pos:start="1455:36" pos:end="1455:46"><name pos:start="1455:36" pos:end="1455:39">byte</name> <operator pos:start="1455:41" pos:end="1455:41">&amp;</operator> <literal type="number" pos:start="1455:43" pos:end="1455:46">0x0F</literal></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1457:17" pos:end="1457:51"><decl pos:start="1457:17" pos:end="1457:50"><type pos:start="1457:17" pos:end="1457:19"><name pos:start="1457:17" pos:end="1457:19">int</name></type> <name pos:start="1457:21" pos:end="1457:27">factor1</name> <init pos:start="1457:29" pos:end="1457:50">= <expr pos:start="1457:31" pos:end="1457:50"><name pos:start="1457:31" pos:end="1457:50"><name pos:start="1457:31" pos:end="1457:35">table</name><index pos:start="1457:36" pos:end="1457:39">[<expr pos:start="1457:37" pos:end="1457:38"><name pos:start="1457:37" pos:end="1457:38">ch</name></expr>]</index><index pos:start="1457:40" pos:end="1457:50">[<expr pos:start="1457:41" pos:end="1457:49"><name pos:start="1457:41" pos:end="1457:45">index</name> <operator pos:start="1457:47" pos:end="1457:47">*</operator> <literal type="number" pos:start="1457:49" pos:end="1457:49">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1459:17" pos:end="1459:55"><decl pos:start="1459:17" pos:end="1459:54"><type pos:start="1459:17" pos:end="1459:19"><name pos:start="1459:17" pos:end="1459:19">int</name></type> <name pos:start="1459:21" pos:end="1459:27">factor2</name> <init pos:start="1459:29" pos:end="1459:54">= <expr pos:start="1459:31" pos:end="1459:54"><name pos:start="1459:31" pos:end="1459:54"><name pos:start="1459:31" pos:end="1459:35">table</name><index pos:start="1459:36" pos:end="1459:39">[<expr pos:start="1459:37" pos:end="1459:38"><name pos:start="1459:37" pos:end="1459:38">ch</name></expr>]</index><index pos:start="1459:40" pos:end="1459:54">[<expr pos:start="1459:41" pos:end="1459:53"><name pos:start="1459:41" pos:end="1459:45">index</name> <operator pos:start="1459:47" pos:end="1459:47">*</operator> <literal type="number" pos:start="1459:49" pos:end="1459:51">2</literal> <operator pos:start="1459:51" pos:end="1459:51">+</operator> <literal type="number" pos:start="1459:53" pos:end="1459:53">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



                <comment type="block" pos:start="1463:17" pos:end="1463:41">/* Decode 14 samples.  */</comment>

                <for pos:start="1465:17" pos:end="1495:17">for <control pos:start="1465:21" pos:end="1465:40">(<init pos:start="1465:22" pos:end="1465:27"><expr pos:start="1465:22" pos:end="1465:26"><name pos:start="1465:22" pos:end="1465:22">n</name> <operator pos:start="1465:24" pos:end="1465:24">=</operator> <literal type="number" pos:start="1465:26" pos:end="1465:26">0</literal></expr>;</init> <condition pos:start="1465:29" pos:end="1465:35"><expr pos:start="1465:29" pos:end="1465:34"><name pos:start="1465:29" pos:end="1465:29">n</name> <operator pos:start="1465:31" pos:end="1465:31">&lt;</operator> <literal type="number" pos:start="1465:33" pos:end="1465:34">14</literal></expr>;</condition> <incr pos:start="1465:37" pos:end="1465:39"><expr pos:start="1465:37" pos:end="1465:39"><name pos:start="1465:37" pos:end="1465:37">n</name><operator pos:start="1465:38" pos:end="1465:39">++</operator></expr></incr>)</control> <block pos:start="1465:42" pos:end="1495:17">{<block_content pos:start="1467:21" pos:end="1493:55">

                    <decl_stmt pos:start="1467:21" pos:end="1467:38"><decl pos:start="1467:21" pos:end="1467:37"><type pos:start="1467:21" pos:end="1467:27"><name pos:start="1467:21" pos:end="1467:27">int32_t</name></type> <name pos:start="1467:29" pos:end="1467:37">sampledat</name></decl>;</decl_stmt>



                    <if_stmt pos:start="1471:21" pos:end="1481:21"><if pos:start="1471:21" pos:end="1475:21">if <condition pos:start="1471:24" pos:end="1471:30">(<expr pos:start="1471:25" pos:end="1471:29"><name pos:start="1471:25" pos:end="1471:25">n</name> <operator pos:start="1471:27" pos:end="1471:27">&amp;</operator> <literal type="number" pos:start="1471:29" pos:end="1471:29">1</literal></expr>)</condition> <block pos:start="1471:32" pos:end="1475:21">{<block_content pos:start="1473:25" pos:end="1473:57">

                        <expr_stmt pos:start="1473:25" pos:end="1473:57"><expr pos:start="1473:25" pos:end="1473:56"><name pos:start="1473:25" pos:end="1473:33">sampledat</name> <operator pos:start="1473:35" pos:end="1473:35">=</operator> <call pos:start="1473:37" pos:end="1473:56"><name pos:start="1473:37" pos:end="1473:47">sign_extend</name><argument_list pos:start="1473:48" pos:end="1473:56">(<argument pos:start="1473:49" pos:end="1473:52"><expr pos:start="1473:49" pos:end="1473:52"><name pos:start="1473:49" pos:end="1473:52">byte</name></expr></argument>, <argument pos:start="1473:55" pos:end="1473:55"><expr pos:start="1473:55" pos:end="1473:55"><literal type="number" pos:start="1473:55" pos:end="1473:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1475:23" pos:end="1481:21">else <block pos:start="1475:28" pos:end="1481:21">{<block_content pos:start="1477:25" pos:end="1479:62">

                        <expr_stmt pos:start="1477:25" pos:end="1477:58"><expr pos:start="1477:25" pos:end="1477:57"><name pos:start="1477:25" pos:end="1477:28">byte</name> <operator pos:start="1477:30" pos:end="1477:30">=</operator> <call pos:start="1477:32" pos:end="1477:57"><name pos:start="1477:32" pos:end="1477:52">bytestream2_get_byteu</name><argument_list pos:start="1477:53" pos:end="1477:57">(<argument pos:start="1477:54" pos:end="1477:56"><expr pos:start="1477:54" pos:end="1477:56"><operator pos:start="1477:54" pos:end="1477:54">&amp;</operator><name pos:start="1477:55" pos:end="1477:56">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1479:25" pos:end="1479:62"><expr pos:start="1479:25" pos:end="1479:61"><name pos:start="1479:25" pos:end="1479:33">sampledat</name> <operator pos:start="1479:35" pos:end="1479:35">=</operator> <call pos:start="1479:37" pos:end="1479:61"><name pos:start="1479:37" pos:end="1479:47">sign_extend</name><argument_list pos:start="1479:48" pos:end="1479:61">(<argument pos:start="1479:49" pos:end="1479:57"><expr pos:start="1479:49" pos:end="1479:57"><name pos:start="1479:49" pos:end="1479:52">byte</name> <operator pos:start="1479:54" pos:end="1479:55">&gt;&gt;</operator> <literal type="number" pos:start="1479:57" pos:end="1479:57">4</literal></expr></argument>, <argument pos:start="1479:60" pos:end="1479:60"><expr pos:start="1479:60" pos:end="1479:60"><literal type="number" pos:start="1479:60" pos:end="1479:60">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>



                    <expr_stmt pos:start="1485:21" pos:end="1487:95"><expr pos:start="1485:21" pos:end="1487:94"><name pos:start="1485:21" pos:end="1485:29">sampledat</name> <operator pos:start="1485:31" pos:end="1485:31">=</operator> <operator pos:start="1485:33" pos:end="1485:33">(</operator><operator pos:start="1485:34" pos:end="1485:34">(</operator><name pos:start="1485:35" pos:end="1485:47"><name pos:start="1485:35" pos:end="1485:35">c</name><operator pos:start="1485:36" pos:end="1485:37">-&gt;</operator><name pos:start="1485:38" pos:end="1485:43">status</name><index pos:start="1485:44" pos:end="1485:47">[<expr pos:start="1485:45" pos:end="1485:46"><name pos:start="1485:45" pos:end="1485:46">ch</name></expr>]</index></name><operator pos:start="1485:48" pos:end="1485:48">.</operator><name pos:start="1485:49" pos:end="1485:55">sample1</name> <operator pos:start="1485:57" pos:end="1485:57">*</operator> <name pos:start="1485:59" pos:end="1485:65">factor1</name>

                                <operator pos:start="1487:33" pos:end="1487:33">+</operator> <name pos:start="1487:35" pos:end="1487:47"><name pos:start="1487:35" pos:end="1487:35">c</name><operator pos:start="1487:36" pos:end="1487:37">-&gt;</operator><name pos:start="1487:38" pos:end="1487:43">status</name><index pos:start="1487:44" pos:end="1487:47">[<expr pos:start="1487:45" pos:end="1487:46"><name pos:start="1487:45" pos:end="1487:46">ch</name></expr>]</index></name><operator pos:start="1487:48" pos:end="1487:48">.</operator><name pos:start="1487:49" pos:end="1487:55">sample2</name> <operator pos:start="1487:57" pos:end="1487:57">*</operator> <name pos:start="1487:59" pos:end="1487:65">factor2</name><operator pos:start="1487:66" pos:end="1487:66">)</operator> <operator pos:start="1487:68" pos:end="1487:69">&gt;&gt;</operator> <literal type="number" pos:start="1487:71" pos:end="1487:72">11</literal><operator pos:start="1487:73" pos:end="1487:73">)</operator> <operator pos:start="1487:75" pos:end="1487:75">+</operator> <operator pos:start="1487:77" pos:end="1487:77">(</operator><name pos:start="1487:78" pos:end="1487:86">sampledat</name> <operator pos:start="1487:88" pos:end="1487:89">&lt;&lt;</operator> <name pos:start="1487:91" pos:end="1487:93">exp</name><operator pos:start="1487:94" pos:end="1487:94">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="1489:21" pos:end="1489:56"><expr pos:start="1489:21" pos:end="1489:55"><operator pos:start="1489:21" pos:end="1489:21">*</operator><name pos:start="1489:22" pos:end="1489:28">samples</name> <operator pos:start="1489:30" pos:end="1489:30">=</operator> <call pos:start="1489:32" pos:end="1489:55"><name pos:start="1489:32" pos:end="1489:44">av_clip_int16</name><argument_list pos:start="1489:45" pos:end="1489:55">(<argument pos:start="1489:46" pos:end="1489:54"><expr pos:start="1489:46" pos:end="1489:54"><name pos:start="1489:46" pos:end="1489:54">sampledat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1491:21" pos:end="1491:66"><expr pos:start="1491:21" pos:end="1491:65"><name pos:start="1491:21" pos:end="1491:33"><name pos:start="1491:21" pos:end="1491:21">c</name><operator pos:start="1491:22" pos:end="1491:23">-&gt;</operator><name pos:start="1491:24" pos:end="1491:29">status</name><index pos:start="1491:30" pos:end="1491:33">[<expr pos:start="1491:31" pos:end="1491:32"><name pos:start="1491:31" pos:end="1491:32">ch</name></expr>]</index></name><operator pos:start="1491:34" pos:end="1491:34">.</operator><name pos:start="1491:35" pos:end="1491:41">sample2</name> <operator pos:start="1491:43" pos:end="1491:43">=</operator> <name pos:start="1491:45" pos:end="1491:57"><name pos:start="1491:45" pos:end="1491:45">c</name><operator pos:start="1491:46" pos:end="1491:47">-&gt;</operator><name pos:start="1491:48" pos:end="1491:53">status</name><index pos:start="1491:54" pos:end="1491:57">[<expr pos:start="1491:55" pos:end="1491:56"><name pos:start="1491:55" pos:end="1491:56">ch</name></expr>]</index></name><operator pos:start="1491:58" pos:end="1491:58">.</operator><name pos:start="1491:59" pos:end="1491:65">sample1</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="1493:21" pos:end="1493:55"><expr pos:start="1493:21" pos:end="1493:54"><name pos:start="1493:21" pos:end="1493:33"><name pos:start="1493:21" pos:end="1493:21">c</name><operator pos:start="1493:22" pos:end="1493:23">-&gt;</operator><name pos:start="1493:24" pos:end="1493:29">status</name><index pos:start="1493:30" pos:end="1493:33">[<expr pos:start="1493:31" pos:end="1493:32"><name pos:start="1493:31" pos:end="1493:32">ch</name></expr>]</index></name><operator pos:start="1493:34" pos:end="1493:34">.</operator><name pos:start="1493:35" pos:end="1493:41">sample1</name> <operator pos:start="1493:43" pos:end="1493:43">=</operator> <operator pos:start="1493:45" pos:end="1493:45">*</operator><name pos:start="1493:46" pos:end="1493:52">samples</name><operator pos:start="1493:53" pos:end="1493:54">++</operator></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <break pos:start="1501:9" pos:end="1501:14">break;</break>

    </block_content>}</block>



    <default pos:start="1507:5" pos:end="1507:12">default:</default>

        <return pos:start="1509:9" pos:end="1509:18">return <expr pos:start="1509:16" pos:end="1509:17"><operator pos:start="1509:16" pos:end="1509:16">-</operator><literal type="number" pos:start="1509:17" pos:end="1509:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="1515:5" pos:end="1521:5"><if pos:start="1515:5" pos:end="1521:5">if <condition pos:start="1515:8" pos:end="1515:50">(<expr pos:start="1515:9" pos:end="1515:49"><name pos:start="1515:9" pos:end="1515:19"><name pos:start="1515:9" pos:end="1515:13">avpkt</name><operator pos:start="1515:14" pos:end="1515:15">-&gt;</operator><name pos:start="1515:16" pos:end="1515:19">size</name></name> <operator pos:start="1515:21" pos:end="1515:22">&amp;&amp;</operator> <call pos:start="1515:24" pos:end="1515:44"><name pos:start="1515:24" pos:end="1515:39">bytestream2_tell</name><argument_list pos:start="1515:40" pos:end="1515:44">(<argument pos:start="1515:41" pos:end="1515:43"><expr pos:start="1515:41" pos:end="1515:43"><operator pos:start="1515:41" pos:end="1515:41">&amp;</operator><name pos:start="1515:42" pos:end="1515:43">gb</name></expr></argument>)</argument_list></call> <operator pos:start="1515:46" pos:end="1515:47">==</operator> <literal type="number" pos:start="1515:49" pos:end="1515:49">0</literal></expr>)</condition> <block pos:start="1515:52" pos:end="1521:5">{<block_content pos:start="1517:9" pos:end="1519:35">

        <expr_stmt pos:start="1517:9" pos:end="1517:58"><expr pos:start="1517:9" pos:end="1517:57"><call pos:start="1517:9" pos:end="1517:57"><name pos:start="1517:9" pos:end="1517:14">av_log</name><argument_list pos:start="1517:15" pos:end="1517:57">(<argument pos:start="1517:16" pos:end="1517:20"><expr pos:start="1517:16" pos:end="1517:20"><name pos:start="1517:16" pos:end="1517:20">avctx</name></expr></argument>, <argument pos:start="1517:23" pos:end="1517:34"><expr pos:start="1517:23" pos:end="1517:34"><name pos:start="1517:23" pos:end="1517:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="1517:37" pos:end="1517:56"><expr pos:start="1517:37" pos:end="1517:56"><literal type="string" pos:start="1517:37" pos:end="1517:56">"Nothing consumed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="1519:9" pos:end="1519:35">return <expr pos:start="1519:16" pos:end="1519:34"><name pos:start="1519:16" pos:end="1519:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="1525:5" pos:end="1525:25"><expr pos:start="1525:5" pos:end="1525:24"><operator pos:start="1525:5" pos:end="1525:5">*</operator><name pos:start="1525:6" pos:end="1525:18">got_frame_ptr</name>   <operator pos:start="1525:22" pos:end="1525:22">=</operator> <literal type="number" pos:start="1525:24" pos:end="1525:24">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="1527:5" pos:end="1527:32"><expr pos:start="1527:5" pos:end="1527:31"><operator pos:start="1527:5" pos:end="1527:5">*</operator><operator pos:start="1527:6" pos:end="1527:6">(</operator><name pos:start="1527:7" pos:end="1527:13">AVFrame</name> <operator pos:start="1527:15" pos:end="1527:15">*</operator><operator pos:start="1527:16" pos:end="1527:16">)</operator><name pos:start="1527:17" pos:end="1527:20">data</name> <operator pos:start="1527:22" pos:end="1527:22">=</operator> <name pos:start="1527:24" pos:end="1527:31"><name pos:start="1527:24" pos:end="1527:24">c</name><operator pos:start="1527:25" pos:end="1527:26">-&gt;</operator><name pos:start="1527:27" pos:end="1527:31">frame</name></name></expr>;</expr_stmt>



    <return pos:start="1531:5" pos:end="1531:33">return <expr pos:start="1531:12" pos:end="1531:32"><call pos:start="1531:12" pos:end="1531:32"><name pos:start="1531:12" pos:end="1531:27">bytestream2_tell</name><argument_list pos:start="1531:28" pos:end="1531:32">(<argument pos:start="1531:29" pos:end="1531:31"><expr pos:start="1531:29" pos:end="1531:31"><operator pos:start="1531:29" pos:end="1531:29">&amp;</operator><name pos:start="1531:30" pos:end="1531:31">gb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
