<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/77.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">rndis_set_response</name><parameter_list pos:start="1:30" pos:end="3:61">(<parameter pos:start="1:31" pos:end="1:44"><decl pos:start="1:31" pos:end="1:44"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:41">USBNetState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>,

                <parameter pos:start="3:17" pos:end="3:39"><decl pos:start="3:17" pos:end="3:39"><type pos:start="3:17" pos:end="3:39"><name pos:start="3:17" pos:end="3:34">rndis_set_msg_type</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">buf</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:60"><decl pos:start="3:42" pos:end="3:60"><type pos:start="3:42" pos:end="3:60"><name pos:start="3:42" pos:end="3:49">unsigned</name> <name pos:start="3:51" pos:end="3:53">int</name></type> <name pos:start="3:55" pos:end="3:60">length</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:13">

    <decl_stmt pos:start="7:5" pos:end="9:66"><decl pos:start="7:5" pos:end="9:65"><type pos:start="7:5" pos:end="7:26"><name pos:start="7:5" pos:end="7:24">rndis_set_cmplt_type</name> <modifier pos:start="7:26" pos:end="7:26">*</modifier></type><name pos:start="7:27" pos:end="7:30">resp</name> <init pos:start="7:32" pos:end="9:65">=

            <expr pos:start="9:13" pos:end="9:65"><call pos:start="9:13" pos:end="9:65"><name pos:start="9:13" pos:end="9:32">rndis_queue_response</name><argument_list pos:start="9:33" pos:end="9:65">(<argument pos:start="9:34" pos:end="9:34"><expr pos:start="9:34" pos:end="9:34"><name pos:start="9:34" pos:end="9:34">s</name></expr></argument>, <argument pos:start="9:37" pos:end="9:64"><expr pos:start="9:37" pos:end="9:64"><sizeof pos:start="9:37" pos:end="9:64">sizeof<argument_list pos:start="9:43" pos:end="9:64">(<argument pos:start="9:44" pos:end="9:63"><expr pos:start="9:44" pos:end="9:63"><name pos:start="9:44" pos:end="9:63">rndis_set_cmplt_type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:20">bufoffs</name></decl>, <decl pos:start="11:23" pos:end="11:28"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:23" pos:end="11:28">buflen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="19:29"><if pos:start="17:5" pos:end="19:29">if <condition pos:start="17:8" pos:end="17:14">(<expr pos:start="17:9" pos:end="17:13"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:13">resp</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:29"><block_content pos:start="19:9" pos:end="19:29">

        <return pos:start="19:9" pos:end="19:29">return <expr pos:start="19:16" pos:end="19:28"><name pos:start="19:16" pos:end="19:28">USB_RET_STALL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:60"><expr pos:start="23:5" pos:end="23:59"><name pos:start="23:5" pos:end="23:11">bufoffs</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:55"><name pos:start="23:15" pos:end="23:25">le32_to_cpu</name><argument_list pos:start="23:26" pos:end="23:55">(<argument pos:start="23:27" pos:end="23:54"><expr pos:start="23:27" pos:end="23:54"><name pos:start="23:27" pos:end="23:54"><name pos:start="23:27" pos:end="23:29">buf</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:54">InformationBufferOffset</name></name></expr></argument>)</argument_list></call> <operator pos:start="23:57" pos:end="23:57">+</operator> <literal type="number" pos:start="23:59" pos:end="23:59">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:55"><expr pos:start="25:5" pos:end="25:54"><name pos:start="25:5" pos:end="25:10">buflen</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <call pos:start="25:14" pos:end="25:54"><name pos:start="25:14" pos:end="25:24">le32_to_cpu</name><argument_list pos:start="25:25" pos:end="25:54">(<argument pos:start="25:26" pos:end="25:53"><expr pos:start="25:26" pos:end="25:53"><name pos:start="25:26" pos:end="25:53"><name pos:start="25:26" pos:end="25:28">buf</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:53">InformationBufferLength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="29:29"><if pos:start="27:5" pos:end="29:29">if <condition pos:start="27:8" pos:end="27:34">(<expr pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:15">bufoffs</name> <operator pos:start="27:17" pos:end="27:17">+</operator> <name pos:start="27:19" pos:end="27:24">buflen</name> <operator pos:start="27:26" pos:end="27:26">&gt;</operator> <name pos:start="27:28" pos:end="27:33">length</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:29"><block_content pos:start="29:9" pos:end="29:29">

        <return pos:start="29:9" pos:end="29:29">return <expr pos:start="29:16" pos:end="29:28"><name pos:start="29:16" pos:end="29:28">USB_RET_STALL</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="35:55"><expr pos:start="33:5" pos:end="35:54"><name pos:start="33:5" pos:end="33:7">ret</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="35:54"><name pos:start="33:11" pos:end="33:18">ndis_set</name><argument_list pos:start="33:19" pos:end="35:54">(<argument pos:start="33:20" pos:end="33:20"><expr pos:start="33:20" pos:end="33:20"><name pos:start="33:20" pos:end="33:20">s</name></expr></argument>, <argument pos:start="33:23" pos:end="33:43"><expr pos:start="33:23" pos:end="33:43"><call pos:start="33:23" pos:end="33:43"><name pos:start="33:23" pos:end="33:33">le32_to_cpu</name><argument_list pos:start="33:34" pos:end="33:43">(<argument pos:start="33:35" pos:end="33:42"><expr pos:start="33:35" pos:end="33:42"><name pos:start="33:35" pos:end="33:42"><name pos:start="33:35" pos:end="33:37">buf</name><operator pos:start="33:38" pos:end="33:39">-&gt;</operator><name pos:start="33:40" pos:end="33:42">OID</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="35:21" pos:end="35:45"><expr pos:start="35:21" pos:end="35:45"><name pos:start="35:21" pos:end="35:27">bufoffs</name> <operator pos:start="35:29" pos:end="35:29">+</operator> <operator pos:start="35:31" pos:end="35:31">(</operator><name pos:start="35:32" pos:end="35:38">uint8_t</name> <operator pos:start="35:40" pos:end="35:40">*</operator><operator pos:start="35:41" pos:end="35:41">)</operator> <name pos:start="35:43" pos:end="35:45">buf</name></expr></argument>, <argument pos:start="35:48" pos:end="35:53"><expr pos:start="35:48" pos:end="35:53"><name pos:start="35:48" pos:end="35:53">buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:53"><expr pos:start="37:5" pos:end="37:52"><name pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:8">resp</name><operator pos:start="37:9" pos:end="37:10">-&gt;</operator><name pos:start="37:11" pos:end="37:21">MessageType</name></name> <operator pos:start="37:23" pos:end="37:23">=</operator> <call pos:start="37:25" pos:end="37:52"><name pos:start="37:25" pos:end="37:35">cpu_to_le32</name><argument_list pos:start="37:36" pos:end="37:52">(<argument pos:start="37:37" pos:end="37:51"><expr pos:start="37:37" pos:end="37:51"><name pos:start="37:37" pos:end="37:51">RNDIS_SET_CMPLT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:19"><name pos:start="39:5" pos:end="39:8">resp</name><operator pos:start="39:9" pos:end="39:10">-&gt;</operator><name pos:start="39:11" pos:end="39:19">RequestID</name></name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:36"><name pos:start="39:23" pos:end="39:25">buf</name><operator pos:start="39:26" pos:end="39:27">-&gt;</operator><name pos:start="39:28" pos:end="39:36">RequestID</name></name></expr>;</expr_stmt> <comment type="block" pos:start="39:39" pos:end="39:66">/* Still LE in msg buffer */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:68"><expr pos:start="41:5" pos:end="41:67"><name pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:8">resp</name><operator pos:start="41:9" pos:end="41:10">-&gt;</operator><name pos:start="41:11" pos:end="41:23">MessageLength</name></name> <operator pos:start="41:25" pos:end="41:25">=</operator> <call pos:start="41:27" pos:end="41:67"><name pos:start="41:27" pos:end="41:37">cpu_to_le32</name><argument_list pos:start="41:38" pos:end="41:67">(<argument pos:start="41:39" pos:end="41:66"><expr pos:start="41:39" pos:end="41:66"><sizeof pos:start="41:39" pos:end="41:66">sizeof<argument_list pos:start="41:45" pos:end="41:66">(<argument pos:start="41:46" pos:end="41:65"><expr pos:start="41:46" pos:end="41:65"><name pos:start="41:46" pos:end="41:65">rndis_set_cmplt_type</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition> <block pos:start="43:18" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:17">

        <comment type="block" pos:start="45:9" pos:end="45:31">/* OID not supported */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:63"><expr pos:start="47:9" pos:end="47:62"><name pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:12">resp</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:20">Status</name></name> <operator pos:start="47:22" pos:end="47:22">=</operator> <call pos:start="47:24" pos:end="47:62"><name pos:start="47:24" pos:end="47:34">cpu_to_le32</name><argument_list pos:start="47:35" pos:end="47:62">(<argument pos:start="47:36" pos:end="47:61"><expr pos:start="47:36" pos:end="47:61"><name pos:start="47:36" pos:end="47:61">RNDIS_STATUS_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:17">return <expr pos:start="49:16" pos:end="49:16"><literal type="number" pos:start="49:16" pos:end="49:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:53"><expr pos:start="53:5" pos:end="53:52"><name pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:8">resp</name><operator pos:start="53:9" pos:end="53:10">-&gt;</operator><name pos:start="53:11" pos:end="53:16">Status</name></name> <operator pos:start="53:18" pos:end="53:18">=</operator> <call pos:start="53:20" pos:end="53:52"><name pos:start="53:20" pos:end="53:30">cpu_to_le32</name><argument_list pos:start="53:31" pos:end="53:52">(<argument pos:start="53:32" pos:end="53:51"><expr pos:start="53:32" pos:end="53:51"><name pos:start="53:32" pos:end="53:51">RNDIS_STATUS_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><literal type="number" pos:start="57:12" pos:end="57:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
