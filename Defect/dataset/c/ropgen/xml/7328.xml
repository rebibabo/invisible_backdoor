<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7328.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">patch_instruction</name><parameter_list pos:start="1:30" pos:end="1:82">(<parameter pos:start="1:31" pos:end="1:46"><decl pos:start="1:31" pos:end="1:46"><type pos:start="1:31" pos:end="1:46"><name pos:start="1:31" pos:end="1:43">VAPICROMState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:46">s</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:64"><decl pos:start="1:49" pos:end="1:64"><type pos:start="1:49" pos:end="1:64"><name pos:start="1:49" pos:end="1:59">CPUX86State</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">env</name></decl></parameter>, <parameter pos:start="1:67" pos:end="1:81"><decl pos:start="1:67" pos:end="1:81"><type pos:start="1:67" pos:end="1:81"><name pos:start="1:67" pos:end="1:78">target_ulong</name></type> <name pos:start="1:80" pos:end="1:81">ip</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:55">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:22">target_phys_addr_t</name></type> <name pos:start="5:24" pos:end="5:28">paddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">VAPICHandlers</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:27">handlers</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:21"><name pos:start="9:13" pos:end="9:18">opcode</name><index pos:start="9:19" pos:end="9:21">[<expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">imm32</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:22">(<expr pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:16">smp_cpus</name> <operator pos:start="15:18" pos:end="15:19">==</operator> <literal type="number" pos:start="15:21" pos:end="15:21">1</literal></expr>)</condition> <block pos:start="15:24" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:36">

        <expr_stmt pos:start="17:9" pos:end="17:36"><expr pos:start="17:9" pos:end="17:35"><name pos:start="17:9" pos:end="17:16">handlers</name> <operator pos:start="17:18" pos:end="17:18">=</operator> <operator pos:start="17:20" pos:end="17:20">&amp;</operator><name pos:start="17:21" pos:end="17:35"><name pos:start="17:21" pos:end="17:21">s</name><operator pos:start="17:22" pos:end="17:23">-&gt;</operator><name pos:start="17:24" pos:end="17:32">rom_state</name><operator pos:start="17:33" pos:end="17:33">.</operator><name pos:start="17:34" pos:end="17:35">up</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="19:7" pos:end="23:5">else <block pos:start="19:12" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:36">

        <expr_stmt pos:start="21:9" pos:end="21:36"><expr pos:start="21:9" pos:end="21:35"><name pos:start="21:9" pos:end="21:16">handlers</name> <operator pos:start="21:18" pos:end="21:18">=</operator> <operator pos:start="21:20" pos:end="21:20">&amp;</operator><name pos:start="21:21" pos:end="21:35"><name pos:start="21:21" pos:end="21:21">s</name><operator pos:start="21:22" pos:end="21:23">-&gt;</operator><name pos:start="21:24" pos:end="21:32">rom_state</name><operator pos:start="21:33" pos:end="21:33">.</operator><name pos:start="21:34" pos:end="21:35">mp</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:22"><expr pos:start="27:5" pos:end="27:21"><call pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:19">pause_all_vcpus</name><argument_list pos:start="27:20" pos:end="27:21">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:60"><expr pos:start="31:5" pos:end="31:59"><call pos:start="31:5" pos:end="31:59"><name pos:start="31:5" pos:end="31:23">cpu_memory_rw_debug</name><argument_list pos:start="31:24" pos:end="31:59">(<argument pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:27">env</name></expr></argument>, <argument pos:start="31:30" pos:end="31:31"><expr pos:start="31:30" pos:end="31:31"><name pos:start="31:30" pos:end="31:31">ip</name></expr></argument>, <argument pos:start="31:34" pos:end="31:39"><expr pos:start="31:34" pos:end="31:39"><name pos:start="31:34" pos:end="31:39">opcode</name></expr></argument>, <argument pos:start="31:42" pos:end="31:55"><expr pos:start="31:42" pos:end="31:55"><sizeof pos:start="31:42" pos:end="31:55">sizeof<argument_list pos:start="31:48" pos:end="31:55">(<argument pos:start="31:49" pos:end="31:54"><expr pos:start="31:49" pos:end="31:54"><name pos:start="31:49" pos:end="31:54">opcode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="31:58" pos:end="31:58"><expr pos:start="31:58" pos:end="31:58"><literal type="number" pos:start="31:58" pos:end="31:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="35:5" pos:end="89:5">switch <condition pos:start="35:12" pos:end="35:22">(<expr pos:start="35:13" pos:end="35:21"><name pos:start="35:13" pos:end="35:21"><name pos:start="35:13" pos:end="35:18">opcode</name><index pos:start="35:19" pos:end="35:21">[<expr pos:start="35:20" pos:end="35:20"><literal type="number" pos:start="35:20" pos:end="35:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="35:24" pos:end="89:5">{<block_content pos:start="37:5" pos:end="87:16">

    <case pos:start="37:5" pos:end="37:14">case <expr pos:start="37:10" pos:end="37:13"><literal type="number" pos:start="37:10" pos:end="37:13">0x89</literal></expr>:</case> <comment type="block" pos:start="37:16" pos:end="37:37">/* mov r32 to r/m32 */</comment>

        <expr_stmt pos:start="39:9" pos:end="39:57"><expr pos:start="39:9" pos:end="39:56"><call pos:start="39:9" pos:end="39:56"><name pos:start="39:9" pos:end="39:18">patch_byte</name><argument_list pos:start="39:19" pos:end="39:56">(<argument pos:start="39:20" pos:end="39:22"><expr pos:start="39:20" pos:end="39:22"><name pos:start="39:20" pos:end="39:22">env</name></expr></argument>, <argument pos:start="39:25" pos:end="39:26"><expr pos:start="39:25" pos:end="39:26"><name pos:start="39:25" pos:end="39:26">ip</name></expr></argument>, <argument pos:start="39:29" pos:end="39:55"><expr pos:start="39:29" pos:end="39:55"><literal type="number" pos:start="39:29" pos:end="39:34">0x50</literal> <operator pos:start="39:34" pos:end="39:34">+</operator> <call pos:start="39:36" pos:end="39:55"><name pos:start="39:36" pos:end="39:44">modrm_reg</name><argument_list pos:start="39:45" pos:end="39:55">(<argument pos:start="39:46" pos:end="39:54"><expr pos:start="39:46" pos:end="39:54"><name pos:start="39:46" pos:end="39:54"><name pos:start="39:46" pos:end="39:51">opcode</name><index pos:start="39:52" pos:end="39:54">[<expr pos:start="39:53" pos:end="39:53"><literal type="number" pos:start="39:53" pos:end="39:53">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="39:60" pos:end="39:73">/* push reg */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:54"><expr pos:start="41:9" pos:end="41:53"><call pos:start="41:9" pos:end="41:53"><name pos:start="41:9" pos:end="41:18">patch_call</name><argument_list pos:start="41:19" pos:end="41:53">(<argument pos:start="41:20" pos:end="41:20"><expr pos:start="41:20" pos:end="41:20"><name pos:start="41:20" pos:end="41:20">s</name></expr></argument>, <argument pos:start="41:23" pos:end="41:25"><expr pos:start="41:23" pos:end="41:25"><name pos:start="41:23" pos:end="41:25">env</name></expr></argument>, <argument pos:start="41:28" pos:end="41:33"><expr pos:start="41:28" pos:end="41:33"><name pos:start="41:28" pos:end="41:29">ip</name> <operator pos:start="41:31" pos:end="41:31">+</operator> <literal type="number" pos:start="41:33" pos:end="41:33">1</literal></expr></argument>, <argument pos:start="41:36" pos:end="41:52"><expr pos:start="41:36" pos:end="41:52"><name pos:start="41:36" pos:end="41:52"><name pos:start="41:36" pos:end="41:43">handlers</name><operator pos:start="41:44" pos:end="41:45">-&gt;</operator><name pos:start="41:46" pos:end="41:52">set_tpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:14">case <expr pos:start="45:10" pos:end="45:13"><literal type="number" pos:start="45:10" pos:end="45:13">0x8b</literal></expr>:</case> <comment type="block" pos:start="45:16" pos:end="45:37">/* mov r/m32 to r32 */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:34"><expr pos:start="47:9" pos:end="47:33"><call pos:start="47:9" pos:end="47:33"><name pos:start="47:9" pos:end="47:18">patch_byte</name><argument_list pos:start="47:19" pos:end="47:33">(<argument pos:start="47:20" pos:end="47:22"><expr pos:start="47:20" pos:end="47:22"><name pos:start="47:20" pos:end="47:22">env</name></expr></argument>, <argument pos:start="47:25" pos:end="47:26"><expr pos:start="47:25" pos:end="47:26"><name pos:start="47:25" pos:end="47:26">ip</name></expr></argument>, <argument pos:start="47:29" pos:end="47:32"><expr pos:start="47:29" pos:end="47:32"><literal type="number" pos:start="47:29" pos:end="47:32">0x90</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:76"><expr pos:start="49:9" pos:end="49:75"><call pos:start="49:9" pos:end="49:75"><name pos:start="49:9" pos:end="49:18">patch_call</name><argument_list pos:start="49:19" pos:end="49:75">(<argument pos:start="49:20" pos:end="49:20"><expr pos:start="49:20" pos:end="49:20"><name pos:start="49:20" pos:end="49:20">s</name></expr></argument>, <argument pos:start="49:23" pos:end="49:25"><expr pos:start="49:23" pos:end="49:25"><name pos:start="49:23" pos:end="49:25">env</name></expr></argument>, <argument pos:start="49:28" pos:end="49:33"><expr pos:start="49:28" pos:end="49:33"><name pos:start="49:28" pos:end="49:29">ip</name> <operator pos:start="49:31" pos:end="49:31">+</operator> <literal type="number" pos:start="49:33" pos:end="49:33">1</literal></expr></argument>, <argument pos:start="49:36" pos:end="49:74"><expr pos:start="49:36" pos:end="49:74"><name pos:start="49:36" pos:end="49:74"><name pos:start="49:36" pos:end="49:43">handlers</name><operator pos:start="49:44" pos:end="49:45">-&gt;</operator><name pos:start="49:46" pos:end="49:52">get_tpr</name><index pos:start="49:53" pos:end="49:74">[<expr pos:start="49:54" pos:end="49:73"><call pos:start="49:54" pos:end="49:73"><name pos:start="49:54" pos:end="49:62">modrm_reg</name><argument_list pos:start="49:63" pos:end="49:73">(<argument pos:start="49:64" pos:end="49:72"><expr pos:start="49:64" pos:end="49:72"><name pos:start="49:64" pos:end="49:72"><name pos:start="49:64" pos:end="49:69">opcode</name><index pos:start="49:70" pos:end="49:72">[<expr pos:start="49:71" pos:end="49:71"><literal type="number" pos:start="49:71" pos:end="49:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="51:9" pos:end="51:14">break;</break>

    <case pos:start="53:5" pos:end="53:14">case <expr pos:start="53:10" pos:end="53:13"><literal type="number" pos:start="53:10" pos:end="53:13">0xa1</literal></expr>:</case> <comment type="block" pos:start="53:16" pos:end="53:35">/* mov abs to eax */</comment>

        <expr_stmt pos:start="55:9" pos:end="55:53"><expr pos:start="55:9" pos:end="55:52"><call pos:start="55:9" pos:end="55:52"><name pos:start="55:9" pos:end="55:18">patch_call</name><argument_list pos:start="55:19" pos:end="55:52">(<argument pos:start="55:20" pos:end="55:20"><expr pos:start="55:20" pos:end="55:20"><name pos:start="55:20" pos:end="55:20">s</name></expr></argument>, <argument pos:start="55:23" pos:end="55:25"><expr pos:start="55:23" pos:end="55:25"><name pos:start="55:23" pos:end="55:25">env</name></expr></argument>, <argument pos:start="55:28" pos:end="55:29"><expr pos:start="55:28" pos:end="55:29"><name pos:start="55:28" pos:end="55:29">ip</name></expr></argument>, <argument pos:start="55:32" pos:end="55:51"><expr pos:start="55:32" pos:end="55:51"><name pos:start="55:32" pos:end="55:51"><name pos:start="55:32" pos:end="55:39">handlers</name><operator pos:start="55:40" pos:end="55:41">-&gt;</operator><name pos:start="55:42" pos:end="55:48">get_tpr</name><index pos:start="55:49" pos:end="55:51">[<expr pos:start="55:50" pos:end="55:50"><literal type="number" pos:start="55:50" pos:end="55:50">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:14">case <expr pos:start="59:10" pos:end="59:13"><literal type="number" pos:start="59:10" pos:end="59:13">0xa3</literal></expr>:</case> <comment type="block" pos:start="59:16" pos:end="59:35">/* mov eax to abs */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:54"><expr pos:start="61:9" pos:end="61:53"><call pos:start="61:9" pos:end="61:53"><name pos:start="61:9" pos:end="61:18">patch_call</name><argument_list pos:start="61:19" pos:end="61:53">(<argument pos:start="61:20" pos:end="61:20"><expr pos:start="61:20" pos:end="61:20"><name pos:start="61:20" pos:end="61:20">s</name></expr></argument>, <argument pos:start="61:23" pos:end="61:25"><expr pos:start="61:23" pos:end="61:25"><name pos:start="61:23" pos:end="61:25">env</name></expr></argument>, <argument pos:start="61:28" pos:end="61:29"><expr pos:start="61:28" pos:end="61:29"><name pos:start="61:28" pos:end="61:29">ip</name></expr></argument>, <argument pos:start="61:32" pos:end="61:52"><expr pos:start="61:32" pos:end="61:52"><name pos:start="61:32" pos:end="61:52"><name pos:start="61:32" pos:end="61:39">handlers</name><operator pos:start="61:40" pos:end="61:41">-&gt;</operator><name pos:start="61:42" pos:end="61:52">set_tpr_eax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="63:9" pos:end="63:14">break;</break>

    <case pos:start="65:5" pos:end="65:14">case <expr pos:start="65:10" pos:end="65:13"><literal type="number" pos:start="65:10" pos:end="65:13">0xc7</literal></expr>:</case> <comment type="block" pos:start="65:16" pos:end="65:44">/* mov imm32, r/m32 (c7/0) */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:34"><expr pos:start="67:9" pos:end="67:33"><call pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:18">patch_byte</name><argument_list pos:start="67:19" pos:end="67:33">(<argument pos:start="67:20" pos:end="67:22"><expr pos:start="67:20" pos:end="67:22"><name pos:start="67:20" pos:end="67:22">env</name></expr></argument>, <argument pos:start="67:25" pos:end="67:26"><expr pos:start="67:25" pos:end="67:26"><name pos:start="67:25" pos:end="67:26">ip</name></expr></argument>, <argument pos:start="67:29" pos:end="67:32"><expr pos:start="67:29" pos:end="67:32"><literal type="number" pos:start="67:29" pos:end="67:32">0x68</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="67:37" pos:end="67:52">/* push imm32 */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:75"><expr pos:start="69:9" pos:end="69:74"><call pos:start="69:9" pos:end="69:74"><name pos:start="69:9" pos:end="69:27">cpu_memory_rw_debug</name><argument_list pos:start="69:28" pos:end="69:74">(<argument pos:start="69:29" pos:end="69:31"><expr pos:start="69:29" pos:end="69:31"><name pos:start="69:29" pos:end="69:31">env</name></expr></argument>, <argument pos:start="69:34" pos:end="69:39"><expr pos:start="69:34" pos:end="69:39"><name pos:start="69:34" pos:end="69:35">ip</name> <operator pos:start="69:37" pos:end="69:37">+</operator> <literal type="number" pos:start="69:39" pos:end="69:39">6</literal></expr></argument>, <argument pos:start="69:42" pos:end="69:55"><expr pos:start="69:42" pos:end="69:55"><operator pos:start="69:42" pos:end="69:42">(</operator><name pos:start="69:43" pos:end="69:46">void</name> <operator pos:start="69:48" pos:end="69:48">*</operator><operator pos:start="69:49" pos:end="69:49">)</operator><operator pos:start="69:50" pos:end="69:50">&amp;</operator><name pos:start="69:51" pos:end="69:55">imm32</name></expr></argument>, <argument pos:start="69:58" pos:end="69:70"><expr pos:start="69:58" pos:end="69:70"><sizeof pos:start="69:58" pos:end="69:70">sizeof<argument_list pos:start="69:64" pos:end="69:70">(<argument pos:start="69:65" pos:end="69:69"><expr pos:start="69:65" pos:end="69:69"><name pos:start="69:65" pos:end="69:69">imm32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="69:73" pos:end="69:73"><expr pos:start="69:73" pos:end="69:73"><literal type="number" pos:start="69:73" pos:end="69:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:75"><expr pos:start="71:9" pos:end="71:74"><call pos:start="71:9" pos:end="71:74"><name pos:start="71:9" pos:end="71:27">cpu_memory_rw_debug</name><argument_list pos:start="71:28" pos:end="71:74">(<argument pos:start="71:29" pos:end="71:31"><expr pos:start="71:29" pos:end="71:31"><name pos:start="71:29" pos:end="71:31">env</name></expr></argument>, <argument pos:start="71:34" pos:end="71:39"><expr pos:start="71:34" pos:end="71:39"><name pos:start="71:34" pos:end="71:35">ip</name> <operator pos:start="71:37" pos:end="71:37">+</operator> <literal type="number" pos:start="71:39" pos:end="71:39">1</literal></expr></argument>, <argument pos:start="71:42" pos:end="71:55"><expr pos:start="71:42" pos:end="71:55"><operator pos:start="71:42" pos:end="71:42">(</operator><name pos:start="71:43" pos:end="71:46">void</name> <operator pos:start="71:48" pos:end="71:48">*</operator><operator pos:start="71:49" pos:end="71:49">)</operator><operator pos:start="71:50" pos:end="71:50">&amp;</operator><name pos:start="71:51" pos:end="71:55">imm32</name></expr></argument>, <argument pos:start="71:58" pos:end="71:70"><expr pos:start="71:58" pos:end="71:70"><sizeof pos:start="71:58" pos:end="71:70">sizeof<argument_list pos:start="71:64" pos:end="71:70">(<argument pos:start="71:65" pos:end="71:69"><expr pos:start="71:65" pos:end="71:69"><name pos:start="71:65" pos:end="71:69">imm32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="71:73" pos:end="71:73"><expr pos:start="71:73" pos:end="71:73"><literal type="number" pos:start="71:73" pos:end="71:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:54"><expr pos:start="73:9" pos:end="73:53"><call pos:start="73:9" pos:end="73:53"><name pos:start="73:9" pos:end="73:18">patch_call</name><argument_list pos:start="73:19" pos:end="73:53">(<argument pos:start="73:20" pos:end="73:20"><expr pos:start="73:20" pos:end="73:20"><name pos:start="73:20" pos:end="73:20">s</name></expr></argument>, <argument pos:start="73:23" pos:end="73:25"><expr pos:start="73:23" pos:end="73:25"><name pos:start="73:23" pos:end="73:25">env</name></expr></argument>, <argument pos:start="73:28" pos:end="73:33"><expr pos:start="73:28" pos:end="73:33"><name pos:start="73:28" pos:end="73:29">ip</name> <operator pos:start="73:31" pos:end="73:31">+</operator> <literal type="number" pos:start="73:33" pos:end="73:33">5</literal></expr></argument>, <argument pos:start="73:36" pos:end="73:52"><expr pos:start="73:36" pos:end="73:52"><name pos:start="73:36" pos:end="73:52"><name pos:start="73:36" pos:end="73:43">handlers</name><operator pos:start="73:44" pos:end="73:45">-&gt;</operator><name pos:start="73:46" pos:end="73:52">set_tpr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:14">case <expr pos:start="77:10" pos:end="77:13"><literal type="number" pos:start="77:10" pos:end="77:13">0xff</literal></expr>:</case> <comment type="block" pos:start="77:16" pos:end="77:31">/* push r/m32 */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:34"><expr pos:start="79:9" pos:end="79:33"><call pos:start="79:9" pos:end="79:33"><name pos:start="79:9" pos:end="79:18">patch_byte</name><argument_list pos:start="79:19" pos:end="79:33">(<argument pos:start="79:20" pos:end="79:22"><expr pos:start="79:20" pos:end="79:22"><name pos:start="79:20" pos:end="79:22">env</name></expr></argument>, <argument pos:start="79:25" pos:end="79:26"><expr pos:start="79:25" pos:end="79:26"><name pos:start="79:25" pos:end="79:26">ip</name></expr></argument>, <argument pos:start="79:29" pos:end="79:32"><expr pos:start="79:29" pos:end="79:32"><literal type="number" pos:start="79:29" pos:end="79:32">0x50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="79:36" pos:end="79:49">/* push eax */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:60"><expr pos:start="81:9" pos:end="81:59"><call pos:start="81:9" pos:end="81:59"><name pos:start="81:9" pos:end="81:18">patch_call</name><argument_list pos:start="81:19" pos:end="81:59">(<argument pos:start="81:20" pos:end="81:20"><expr pos:start="81:20" pos:end="81:20"><name pos:start="81:20" pos:end="81:20">s</name></expr></argument>, <argument pos:start="81:23" pos:end="81:25"><expr pos:start="81:23" pos:end="81:25"><name pos:start="81:23" pos:end="81:25">env</name></expr></argument>, <argument pos:start="81:28" pos:end="81:33"><expr pos:start="81:28" pos:end="81:33"><name pos:start="81:28" pos:end="81:29">ip</name> <operator pos:start="81:31" pos:end="81:31">+</operator> <literal type="number" pos:start="81:33" pos:end="81:33">1</literal></expr></argument>, <argument pos:start="81:36" pos:end="81:58"><expr pos:start="81:36" pos:end="81:58"><name pos:start="81:36" pos:end="81:58"><name pos:start="81:36" pos:end="81:43">handlers</name><operator pos:start="81:44" pos:end="81:45">-&gt;</operator><name pos:start="81:46" pos:end="81:58">get_tpr_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <default pos:start="85:5" pos:end="85:12">default:</default>

        <expr_stmt pos:start="87:9" pos:end="87:16"><expr pos:start="87:9" pos:end="87:15"><call pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:13">abort</name><argument_list pos:start="87:14" pos:end="87:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="93:5" pos:end="93:23"><expr pos:start="93:5" pos:end="93:22"><call pos:start="93:5" pos:end="93:22"><name pos:start="93:5" pos:end="93:20">resume_all_vcpus</name><argument_list pos:start="93:21" pos:end="93:22">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:45"><expr pos:start="97:5" pos:end="97:44"><name pos:start="97:5" pos:end="97:9">paddr</name> <operator pos:start="97:11" pos:end="97:11">=</operator> <call pos:start="97:13" pos:end="97:44"><name pos:start="97:13" pos:end="97:35">cpu_get_phys_page_debug</name><argument_list pos:start="97:36" pos:end="97:44">(<argument pos:start="97:37" pos:end="97:39"><expr pos:start="97:37" pos:end="97:39"><name pos:start="97:37" pos:end="97:39">env</name></expr></argument>, <argument pos:start="97:42" pos:end="97:43"><expr pos:start="97:42" pos:end="97:43"><name pos:start="97:42" pos:end="97:43">ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:36"><expr pos:start="99:5" pos:end="99:35"><name pos:start="99:5" pos:end="99:9">paddr</name> <operator pos:start="99:11" pos:end="99:12">+=</operator> <name pos:start="99:14" pos:end="99:15">ip</name> <operator pos:start="99:17" pos:end="99:17">&amp;</operator> <operator pos:start="99:19" pos:end="99:19">~</operator><name pos:start="99:20" pos:end="99:35">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:55"><expr pos:start="101:5" pos:end="101:54"><call pos:start="101:5" pos:end="101:54"><name pos:start="101:5" pos:end="101:33">tb_invalidate_phys_page_range</name><argument_list pos:start="101:34" pos:end="101:54">(<argument pos:start="101:35" pos:end="101:39"><expr pos:start="101:35" pos:end="101:39"><name pos:start="101:35" pos:end="101:39">paddr</name></expr></argument>, <argument pos:start="101:42" pos:end="101:50"><expr pos:start="101:42" pos:end="101:50"><name pos:start="101:42" pos:end="101:46">paddr</name> <operator pos:start="101:48" pos:end="101:48">+</operator> <literal type="number" pos:start="101:50" pos:end="101:50">1</literal></expr></argument>, <argument pos:start="101:53" pos:end="101:53"><expr pos:start="101:53" pos:end="101:53"><literal type="number" pos:start="101:53" pos:end="101:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
