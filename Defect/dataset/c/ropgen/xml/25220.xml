<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25220.c" pos:tabs="8"><function pos:start="1:1" pos:end="451:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:33">build_legacy_cpu_hotplug_aml</name><parameter_list pos:start="1:34" pos:end="3:51">(<parameter pos:start="1:35" pos:end="1:42"><decl pos:start="1:35" pos:end="1:42"><type pos:start="1:35" pos:end="1:42"><name pos:start="1:35" pos:end="1:37">Aml</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">ctx</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:65"><decl pos:start="1:45" pos:end="1:65"><type pos:start="1:45" pos:end="1:65"><name pos:start="1:45" pos:end="1:56">MachineState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:65">machine</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:50"><decl pos:start="3:35" pos:end="3:50"><type pos:start="3:35" pos:end="3:50"><name pos:start="3:35" pos:end="3:42">uint16_t</name></type> <name pos:start="3:44" pos:end="3:50">io_base</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="451:1">{<block_content pos:start="7:5" pos:end="449:28">

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:7">Aml</name> <modifier pos:start="7:9" pos:end="7:9">*</modifier></type><name pos:start="7:10" pos:end="7:12">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:7">Aml</name> <modifier pos:start="9:9" pos:end="9:9">*</modifier></type><name pos:start="9:10" pos:end="9:12">crs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:9"><name pos:start="11:5" pos:end="11:7">Aml</name> <modifier pos:start="11:9" pos:end="11:9">*</modifier></type><name pos:start="11:10" pos:end="11:12">pkg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:7">Aml</name> <modifier pos:start="13:9" pos:end="13:9">*</modifier></type><name pos:start="13:10" pos:end="13:14">field</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:7">Aml</name> <modifier pos:start="15:9" pos:end="15:9">*</modifier></type><name pos:start="15:10" pos:end="15:15">method</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:9"><name pos:start="17:5" pos:end="17:7">Aml</name> <modifier pos:start="17:9" pos:end="17:9">*</modifier></type><name pos:start="17:10" pos:end="17:15">if_ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:18"><decl pos:start="19:5" pos:end="19:17"><type pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:7">Aml</name> <modifier pos:start="19:9" pos:end="19:9">*</modifier></type><name pos:start="19:10" pos:end="19:17">else_ctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>, <decl pos:start="21:12" pos:end="21:19"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:12" pos:end="21:19">apic_idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:37"><decl pos:start="23:5" pos:end="23:36"><type pos:start="23:5" pos:end="23:9"><name pos:start="23:5" pos:end="23:7">Aml</name> <modifier pos:start="23:9" pos:end="23:9">*</modifier></type><name pos:start="23:10" pos:end="23:17">sb_scope</name> <init pos:start="23:19" pos:end="23:36">= <expr pos:start="23:21" pos:end="23:36"><call pos:start="23:21" pos:end="23:36"><name pos:start="23:21" pos:end="23:29">aml_scope</name><argument_list pos:start="23:30" pos:end="23:36">(<argument pos:start="23:31" pos:end="23:35"><expr pos:start="23:31" pos:end="23:35"><literal type="string" pos:start="23:31" pos:end="23:35">"_SB"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:67"><decl pos:start="25:5" pos:end="25:66"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">uint8_t</name></type> <name pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:21">madt_tmpl</name><index pos:start="25:22" pos:end="25:24">[<expr pos:start="25:23" pos:end="25:23"><literal type="number" pos:start="25:23" pos:end="25:23">8</literal></expr>]</index></name> <init pos:start="25:26" pos:end="25:66">= <expr pos:start="25:28" pos:end="25:66"><block pos:start="25:28" pos:end="25:66">{<expr pos:start="25:29" pos:end="25:32"><literal type="number" pos:start="25:29" pos:end="25:32">0x00</literal></expr>, <expr pos:start="25:35" pos:end="25:38"><literal type="number" pos:start="25:35" pos:end="25:38">0x08</literal></expr>, <expr pos:start="25:41" pos:end="25:44"><literal type="number" pos:start="25:41" pos:end="25:44">0x00</literal></expr>, <expr pos:start="25:47" pos:end="25:50"><literal type="number" pos:start="25:47" pos:end="25:50">0x00</literal></expr>, <expr pos:start="25:53" pos:end="25:56"><literal type="number" pos:start="25:53" pos:end="25:56">0x00</literal></expr>, <expr pos:start="25:59" pos:end="25:59"><literal type="number" pos:start="25:59" pos:end="25:59">0</literal></expr>, <expr pos:start="25:62" pos:end="25:62"><literal type="number" pos:start="25:62" pos:end="25:62">0</literal></expr>, <expr pos:start="25:65" pos:end="25:65"><literal type="number" pos:start="25:65" pos:end="25:65">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:29"><decl pos:start="27:5" pos:end="27:28"><type pos:start="27:5" pos:end="27:9"><name pos:start="27:5" pos:end="27:7">Aml</name> <modifier pos:start="27:9" pos:end="27:9">*</modifier></type><name pos:start="27:10" pos:end="27:15">cpu_id</name> <init pos:start="27:17" pos:end="27:28">= <expr pos:start="27:19" pos:end="27:28"><call pos:start="27:19" pos:end="27:28"><name pos:start="27:19" pos:end="27:25">aml_arg</name><argument_list pos:start="27:26" pos:end="27:28">(<argument pos:start="27:27" pos:end="27:27"><expr pos:start="27:27" pos:end="27:27"><literal type="number" pos:start="27:27" pos:end="27:27">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:30"><decl pos:start="29:5" pos:end="29:29"><type pos:start="29:5" pos:end="29:9"><name pos:start="29:5" pos:end="29:7">Aml</name> <modifier pos:start="29:9" pos:end="29:9">*</modifier></type><name pos:start="29:10" pos:end="29:16">apic_id</name> <init pos:start="29:18" pos:end="29:29">= <expr pos:start="29:20" pos:end="29:29"><call pos:start="29:20" pos:end="29:29"><name pos:start="29:20" pos:end="29:26">aml_arg</name><argument_list pos:start="29:27" pos:end="29:29">(<argument pos:start="29:28" pos:end="29:28"><expr pos:start="29:28" pos:end="29:28"><literal type="number" pos:start="29:28" pos:end="29:28">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:31"><decl pos:start="31:5" pos:end="31:30"><type pos:start="31:5" pos:end="31:9"><name pos:start="31:5" pos:end="31:7">Aml</name> <modifier pos:start="31:9" pos:end="31:9">*</modifier></type><name pos:start="31:10" pos:end="31:15">cpu_on</name> <init pos:start="31:17" pos:end="31:30">= <expr pos:start="31:19" pos:end="31:30"><call pos:start="31:19" pos:end="31:30"><name pos:start="31:19" pos:end="31:27">aml_local</name><argument_list pos:start="31:28" pos:end="31:30">(<argument pos:start="31:29" pos:end="31:29"><expr pos:start="31:29" pos:end="31:29"><literal type="number" pos:start="31:29" pos:end="31:29">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:29"><decl pos:start="33:5" pos:end="33:28"><type pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:7">Aml</name> <modifier pos:start="33:9" pos:end="33:9">*</modifier></type><name pos:start="33:10" pos:end="33:13">madt</name> <init pos:start="33:15" pos:end="33:28">= <expr pos:start="33:17" pos:end="33:28"><call pos:start="33:17" pos:end="33:28"><name pos:start="33:17" pos:end="33:25">aml_local</name><argument_list pos:start="33:26" pos:end="33:28">(<argument pos:start="33:27" pos:end="33:27"><expr pos:start="33:27" pos:end="33:27"><literal type="number" pos:start="33:27" pos:end="33:27">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:44"><decl pos:start="35:5" pos:end="35:43"><type pos:start="35:5" pos:end="35:9"><name pos:start="35:5" pos:end="35:7">Aml</name> <modifier pos:start="35:9" pos:end="35:9">*</modifier></type><name pos:start="35:10" pos:end="35:17">cpus_map</name> <init pos:start="35:19" pos:end="35:43">= <expr pos:start="35:21" pos:end="35:43"><call pos:start="35:21" pos:end="35:43"><name pos:start="35:21" pos:end="35:28">aml_name</name><argument_list pos:start="35:29" pos:end="35:43">(<argument pos:start="35:30" pos:end="35:42"><expr pos:start="35:30" pos:end="35:42"><name pos:start="35:30" pos:end="35:42">CPU_ON_BITMAP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:27"><decl pos:start="37:5" pos:end="37:26"><type pos:start="37:5" pos:end="37:9"><name pos:start="37:5" pos:end="37:7">Aml</name> <modifier pos:start="37:9" pos:end="37:9">*</modifier></type><name pos:start="37:10" pos:end="37:13">zero</name> <init pos:start="37:15" pos:end="37:26">= <expr pos:start="37:17" pos:end="37:26"><call pos:start="37:17" pos:end="37:26"><name pos:start="37:17" pos:end="37:23">aml_int</name><argument_list pos:start="37:24" pos:end="37:26">(<argument pos:start="37:25" pos:end="37:25"><expr pos:start="37:25" pos:end="37:25"><literal type="number" pos:start="37:25" pos:end="37:25">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:26"><decl pos:start="39:5" pos:end="39:25"><type pos:start="39:5" pos:end="39:9"><name pos:start="39:5" pos:end="39:7">Aml</name> <modifier pos:start="39:9" pos:end="39:9">*</modifier></type><name pos:start="39:10" pos:end="39:12">one</name> <init pos:start="39:14" pos:end="39:25">= <expr pos:start="39:16" pos:end="39:25"><call pos:start="39:16" pos:end="39:25"><name pos:start="39:16" pos:end="39:22">aml_int</name><argument_list pos:start="39:23" pos:end="39:25">(<argument pos:start="39:24" pos:end="39:24"><expr pos:start="39:24" pos:end="39:24"><literal type="number" pos:start="39:24" pos:end="39:24">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:50"><decl pos:start="41:5" pos:end="41:49"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:16">MachineClass</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:20">mc</name> <init pos:start="41:22" pos:end="41:49">= <expr pos:start="41:24" pos:end="41:49"><call pos:start="41:24" pos:end="41:49"><name pos:start="41:24" pos:end="41:40">MACHINE_GET_CLASS</name><argument_list pos:start="41:41" pos:end="41:49">(<argument pos:start="41:42" pos:end="41:48"><expr pos:start="41:42" pos:end="41:48"><name pos:start="41:42" pos:end="41:48">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:65"><decl pos:start="43:5" pos:end="43:64"><type pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:17">CPUArchIdList</name> <modifier pos:start="43:19" pos:end="43:19">*</modifier></type><name pos:start="43:20" pos:end="43:27">apic_ids</name> <init pos:start="43:29" pos:end="43:64">= <expr pos:start="43:31" pos:end="43:64"><call pos:start="43:31" pos:end="43:64"><name pos:start="43:31" pos:end="43:55"><name pos:start="43:31" pos:end="43:32">mc</name><operator pos:start="43:33" pos:end="43:34">-&gt;</operator><name pos:start="43:35" pos:end="43:55">possible_cpu_arch_ids</name></name><argument_list pos:start="43:56" pos:end="43:64">(<argument pos:start="43:57" pos:end="43:63"><expr pos:start="43:57" pos:end="43:63"><name pos:start="43:57" pos:end="43:63">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:47"><decl pos:start="45:5" pos:end="45:46"><type pos:start="45:5" pos:end="45:20"><name pos:start="45:5" pos:end="45:18">PCMachineState</name> <modifier pos:start="45:20" pos:end="45:20">*</modifier></type><name pos:start="45:21" pos:end="45:24">pcms</name> <init pos:start="45:26" pos:end="45:46">= <expr pos:start="45:28" pos:end="45:46"><call pos:start="45:28" pos:end="45:46"><name pos:start="45:28" pos:end="45:37">PC_MACHINE</name><argument_list pos:start="45:38" pos:end="45:46">(<argument pos:start="45:39" pos:end="45:45"><expr pos:start="45:39" pos:end="45:45"><name pos:start="45:39" pos:end="45:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="49:5" pos:end="61:7">/*

     * _MAT method - creates an madt apic buffer

     * apic_id = Arg0 = Local APIC ID

     * cpu_id  = Arg1 = Processor ID

     * cpu_on = Local0 = CPON flag for this cpu

     * madt = Local1 = Buffer (in madt apic form) to return

     */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:62"><expr pos:start="63:5" pos:end="63:61"><name pos:start="63:5" pos:end="63:10">method</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <call pos:start="63:14" pos:end="63:61"><name pos:start="63:14" pos:end="63:23">aml_method</name><argument_list pos:start="63:24" pos:end="63:61">(<argument pos:start="63:25" pos:end="63:38"><expr pos:start="63:25" pos:end="63:38"><name pos:start="63:25" pos:end="63:38">CPU_MAT_METHOD</name></expr></argument>, <argument pos:start="63:41" pos:end="63:41"><expr pos:start="63:41" pos:end="63:41"><literal type="number" pos:start="63:41" pos:end="63:41">2</literal></expr></argument>, <argument pos:start="63:44" pos:end="63:60"><expr pos:start="63:44" pos:end="63:60"><name pos:start="63:44" pos:end="63:60">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="67:70"><expr pos:start="65:5" pos:end="67:69"><call pos:start="65:5" pos:end="67:69"><name pos:start="65:5" pos:end="65:14">aml_append</name><argument_list pos:start="65:15" pos:end="67:69">(<argument pos:start="65:16" pos:end="65:21"><expr pos:start="65:16" pos:end="65:21"><name pos:start="65:16" pos:end="65:21">method</name></expr></argument>,

        <argument pos:start="67:9" pos:end="67:68"><expr pos:start="67:9" pos:end="67:68"><call pos:start="67:9" pos:end="67:68"><name pos:start="67:9" pos:end="67:17">aml_store</name><argument_list pos:start="67:18" pos:end="67:68">(<argument pos:start="67:19" pos:end="67:59"><expr pos:start="67:19" pos:end="67:59"><call pos:start="67:19" pos:end="67:59"><name pos:start="67:19" pos:end="67:29">aml_derefof</name><argument_list pos:start="67:30" pos:end="67:59">(<argument pos:start="67:31" pos:end="67:58"><expr pos:start="67:31" pos:end="67:58"><call pos:start="67:31" pos:end="67:58"><name pos:start="67:31" pos:end="67:39">aml_index</name><argument_list pos:start="67:40" pos:end="67:58">(<argument pos:start="67:41" pos:end="67:48"><expr pos:start="67:41" pos:end="67:48"><name pos:start="67:41" pos:end="67:48">cpus_map</name></expr></argument>, <argument pos:start="67:51" pos:end="67:57"><expr pos:start="67:51" pos:end="67:57"><name pos:start="67:51" pos:end="67:57">apic_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="67:62" pos:end="67:67"><expr pos:start="67:62" pos:end="67:67"><name pos:start="67:62" pos:end="67:67">cpu_on</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="71:67"><expr pos:start="69:5" pos:end="71:66"><call pos:start="69:5" pos:end="71:66"><name pos:start="69:5" pos:end="69:14">aml_append</name><argument_list pos:start="69:15" pos:end="71:66">(<argument pos:start="69:16" pos:end="69:21"><expr pos:start="69:16" pos:end="69:21"><name pos:start="69:16" pos:end="69:21">method</name></expr></argument>,

        <argument pos:start="71:9" pos:end="71:65"><expr pos:start="71:9" pos:end="71:65"><call pos:start="71:9" pos:end="71:65"><name pos:start="71:9" pos:end="71:17">aml_store</name><argument_list pos:start="71:18" pos:end="71:65">(<argument pos:start="71:19" pos:end="71:58"><expr pos:start="71:19" pos:end="71:58"><call pos:start="71:19" pos:end="71:58"><name pos:start="71:19" pos:end="71:28">aml_buffer</name><argument_list pos:start="71:29" pos:end="71:58">(<argument pos:start="71:30" pos:end="71:46"><expr pos:start="71:30" pos:end="71:46"><sizeof pos:start="71:30" pos:end="71:46">sizeof<argument_list pos:start="71:36" pos:end="71:46">(<argument pos:start="71:37" pos:end="71:45"><expr pos:start="71:37" pos:end="71:45"><name pos:start="71:37" pos:end="71:45">madt_tmpl</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="71:49" pos:end="71:57"><expr pos:start="71:49" pos:end="71:57"><name pos:start="71:49" pos:end="71:57">madt_tmpl</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="71:61" pos:end="71:64"><expr pos:start="71:61" pos:end="71:64"><name pos:start="71:61" pos:end="71:64">madt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="73:5" pos:end="73:70">/* Update the processor id, lapic id, and enable/disable status */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:71"><expr pos:start="75:5" pos:end="75:70"><call pos:start="75:5" pos:end="75:70"><name pos:start="75:5" pos:end="75:14">aml_append</name><argument_list pos:start="75:15" pos:end="75:70">(<argument pos:start="75:16" pos:end="75:21"><expr pos:start="75:16" pos:end="75:21"><name pos:start="75:16" pos:end="75:21">method</name></expr></argument>, <argument pos:start="75:24" pos:end="75:69"><expr pos:start="75:24" pos:end="75:69"><call pos:start="75:24" pos:end="75:69"><name pos:start="75:24" pos:end="75:32">aml_store</name><argument_list pos:start="75:33" pos:end="75:69">(<argument pos:start="75:34" pos:end="75:39"><expr pos:start="75:34" pos:end="75:39"><name pos:start="75:34" pos:end="75:39">cpu_id</name></expr></argument>, <argument pos:start="75:42" pos:end="75:68"><expr pos:start="75:42" pos:end="75:68"><call pos:start="75:42" pos:end="75:68"><name pos:start="75:42" pos:end="75:50">aml_index</name><argument_list pos:start="75:51" pos:end="75:68">(<argument pos:start="75:52" pos:end="75:55"><expr pos:start="75:52" pos:end="75:55"><name pos:start="75:52" pos:end="75:55">madt</name></expr></argument>, <argument pos:start="75:58" pos:end="75:67"><expr pos:start="75:58" pos:end="75:67"><call pos:start="75:58" pos:end="75:67"><name pos:start="75:58" pos:end="75:64">aml_int</name><argument_list pos:start="75:65" pos:end="75:67">(<argument pos:start="75:66" pos:end="75:66"><expr pos:start="75:66" pos:end="75:66"><literal type="number" pos:start="75:66" pos:end="75:66">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:72"><expr pos:start="77:5" pos:end="77:71"><call pos:start="77:5" pos:end="77:71"><name pos:start="77:5" pos:end="77:14">aml_append</name><argument_list pos:start="77:15" pos:end="77:71">(<argument pos:start="77:16" pos:end="77:21"><expr pos:start="77:16" pos:end="77:21"><name pos:start="77:16" pos:end="77:21">method</name></expr></argument>, <argument pos:start="77:24" pos:end="77:70"><expr pos:start="77:24" pos:end="77:70"><call pos:start="77:24" pos:end="77:70"><name pos:start="77:24" pos:end="77:32">aml_store</name><argument_list pos:start="77:33" pos:end="77:70">(<argument pos:start="77:34" pos:end="77:40"><expr pos:start="77:34" pos:end="77:40"><name pos:start="77:34" pos:end="77:40">apic_id</name></expr></argument>, <argument pos:start="77:43" pos:end="77:69"><expr pos:start="77:43" pos:end="77:69"><call pos:start="77:43" pos:end="77:69"><name pos:start="77:43" pos:end="77:51">aml_index</name><argument_list pos:start="77:52" pos:end="77:69">(<argument pos:start="77:53" pos:end="77:56"><expr pos:start="77:53" pos:end="77:56"><name pos:start="77:53" pos:end="77:56">madt</name></expr></argument>, <argument pos:start="77:59" pos:end="77:68"><expr pos:start="77:59" pos:end="77:68"><call pos:start="77:59" pos:end="77:68"><name pos:start="77:59" pos:end="77:65">aml_int</name><argument_list pos:start="77:66" pos:end="77:68">(<argument pos:start="77:67" pos:end="77:67"><expr pos:start="77:67" pos:end="77:67"><literal type="number" pos:start="77:67" pos:end="77:67">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:71"><expr pos:start="79:5" pos:end="79:70"><call pos:start="79:5" pos:end="79:70"><name pos:start="79:5" pos:end="79:14">aml_append</name><argument_list pos:start="79:15" pos:end="79:70">(<argument pos:start="79:16" pos:end="79:21"><expr pos:start="79:16" pos:end="79:21"><name pos:start="79:16" pos:end="79:21">method</name></expr></argument>, <argument pos:start="79:24" pos:end="79:69"><expr pos:start="79:24" pos:end="79:69"><call pos:start="79:24" pos:end="79:69"><name pos:start="79:24" pos:end="79:32">aml_store</name><argument_list pos:start="79:33" pos:end="79:69">(<argument pos:start="79:34" pos:end="79:39"><expr pos:start="79:34" pos:end="79:39"><name pos:start="79:34" pos:end="79:39">cpu_on</name></expr></argument>, <argument pos:start="79:42" pos:end="79:68"><expr pos:start="79:42" pos:end="79:68"><call pos:start="79:42" pos:end="79:68"><name pos:start="79:42" pos:end="79:50">aml_index</name><argument_list pos:start="79:51" pos:end="79:68">(<argument pos:start="79:52" pos:end="79:55"><expr pos:start="79:52" pos:end="79:55"><name pos:start="79:52" pos:end="79:55">madt</name></expr></argument>, <argument pos:start="79:58" pos:end="79:67"><expr pos:start="79:58" pos:end="79:67"><call pos:start="79:58" pos:end="79:67"><name pos:start="79:58" pos:end="79:64">aml_int</name><argument_list pos:start="79:65" pos:end="79:67">(<argument pos:start="79:66" pos:end="79:66"><expr pos:start="79:66" pos:end="79:66"><literal type="number" pos:start="79:66" pos:end="79:66">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:41"><expr pos:start="81:5" pos:end="81:40"><call pos:start="81:5" pos:end="81:40"><name pos:start="81:5" pos:end="81:14">aml_append</name><argument_list pos:start="81:15" pos:end="81:40">(<argument pos:start="81:16" pos:end="81:21"><expr pos:start="81:16" pos:end="81:21"><name pos:start="81:16" pos:end="81:21">method</name></expr></argument>, <argument pos:start="81:24" pos:end="81:39"><expr pos:start="81:24" pos:end="81:39"><call pos:start="81:24" pos:end="81:39"><name pos:start="81:24" pos:end="81:33">aml_return</name><argument_list pos:start="81:34" pos:end="81:39">(<argument pos:start="81:35" pos:end="81:38"><expr pos:start="81:35" pos:end="81:38"><name pos:start="81:35" pos:end="81:38">madt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:33"><expr pos:start="83:5" pos:end="83:32"><call pos:start="83:5" pos:end="83:32"><name pos:start="83:5" pos:end="83:14">aml_append</name><argument_list pos:start="83:15" pos:end="83:32">(<argument pos:start="83:16" pos:end="83:23"><expr pos:start="83:16" pos:end="83:23"><name pos:start="83:16" pos:end="83:23">sb_scope</name></expr></argument>, <argument pos:start="83:26" pos:end="83:31"><expr pos:start="83:26" pos:end="83:31"><name pos:start="83:26" pos:end="83:31">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="95:7">/*

     * _STA method - return ON status of cpu

     * apic_id = Arg0 = Local APIC ID

     * cpu_on = Local0 = CPON flag for this cpu

     */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:65"><expr pos:start="97:5" pos:end="97:64"><name pos:start="97:5" pos:end="97:10">method</name> <operator pos:start="97:12" pos:end="97:12">=</operator> <call pos:start="97:14" pos:end="97:64"><name pos:start="97:14" pos:end="97:23">aml_method</name><argument_list pos:start="97:24" pos:end="97:64">(<argument pos:start="97:25" pos:end="97:41"><expr pos:start="97:25" pos:end="97:41"><name pos:start="97:25" pos:end="97:41">CPU_STATUS_METHOD</name></expr></argument>, <argument pos:start="97:44" pos:end="97:44"><expr pos:start="97:44" pos:end="97:44"><literal type="number" pos:start="97:44" pos:end="97:44">1</literal></expr></argument>, <argument pos:start="97:47" pos:end="97:63"><expr pos:start="97:47" pos:end="97:63"><name pos:start="97:47" pos:end="97:63">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="101:70"><expr pos:start="99:5" pos:end="101:69"><call pos:start="99:5" pos:end="101:69"><name pos:start="99:5" pos:end="99:14">aml_append</name><argument_list pos:start="99:15" pos:end="101:69">(<argument pos:start="99:16" pos:end="99:21"><expr pos:start="99:16" pos:end="99:21"><name pos:start="99:16" pos:end="99:21">method</name></expr></argument>,

        <argument pos:start="101:9" pos:end="101:68"><expr pos:start="101:9" pos:end="101:68"><call pos:start="101:9" pos:end="101:68"><name pos:start="101:9" pos:end="101:17">aml_store</name><argument_list pos:start="101:18" pos:end="101:68">(<argument pos:start="101:19" pos:end="101:59"><expr pos:start="101:19" pos:end="101:59"><call pos:start="101:19" pos:end="101:59"><name pos:start="101:19" pos:end="101:29">aml_derefof</name><argument_list pos:start="101:30" pos:end="101:59">(<argument pos:start="101:31" pos:end="101:58"><expr pos:start="101:31" pos:end="101:58"><call pos:start="101:31" pos:end="101:58"><name pos:start="101:31" pos:end="101:39">aml_index</name><argument_list pos:start="101:40" pos:end="101:58">(<argument pos:start="101:41" pos:end="101:48"><expr pos:start="101:41" pos:end="101:48"><name pos:start="101:41" pos:end="101:48">cpus_map</name></expr></argument>, <argument pos:start="101:51" pos:end="101:57"><expr pos:start="101:51" pos:end="101:57"><name pos:start="101:51" pos:end="101:57">apic_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="101:62" pos:end="101:67"><expr pos:start="101:62" pos:end="101:67"><name pos:start="101:62" pos:end="101:67">cpu_on</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:28"><expr pos:start="103:5" pos:end="103:27"><name pos:start="103:5" pos:end="103:10">if_ctx</name> <operator pos:start="103:12" pos:end="103:12">=</operator> <call pos:start="103:14" pos:end="103:27"><name pos:start="103:14" pos:end="103:19">aml_if</name><argument_list pos:start="103:20" pos:end="103:27">(<argument pos:start="103:21" pos:end="103:26"><expr pos:start="103:21" pos:end="103:26"><name pos:start="103:21" pos:end="103:26">cpu_on</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="105:5" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:53">

        <expr_stmt pos:start="107:9" pos:end="107:53"><expr pos:start="107:9" pos:end="107:52"><call pos:start="107:9" pos:end="107:52"><name pos:start="107:9" pos:end="107:18">aml_append</name><argument_list pos:start="107:19" pos:end="107:52">(<argument pos:start="107:20" pos:end="107:25"><expr pos:start="107:20" pos:end="107:25"><name pos:start="107:20" pos:end="107:25">if_ctx</name></expr></argument>, <argument pos:start="107:28" pos:end="107:51"><expr pos:start="107:28" pos:end="107:51"><call pos:start="107:28" pos:end="107:51"><name pos:start="107:28" pos:end="107:37">aml_return</name><argument_list pos:start="107:38" pos:end="107:51">(<argument pos:start="107:39" pos:end="107:50"><expr pos:start="107:39" pos:end="107:50"><call pos:start="107:39" pos:end="107:50"><name pos:start="107:39" pos:end="107:45">aml_int</name><argument_list pos:start="107:46" pos:end="107:50">(<argument pos:start="107:47" pos:end="107:49"><expr pos:start="107:47" pos:end="107:49"><literal type="number" pos:start="107:47" pos:end="107:49">0xF</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="111:5" pos:end="111:31"><expr pos:start="111:5" pos:end="111:30"><call pos:start="111:5" pos:end="111:30"><name pos:start="111:5" pos:end="111:14">aml_append</name><argument_list pos:start="111:15" pos:end="111:30">(<argument pos:start="111:16" pos:end="111:21"><expr pos:start="111:16" pos:end="111:21"><name pos:start="111:16" pos:end="111:21">method</name></expr></argument>, <argument pos:start="111:24" pos:end="111:29"><expr pos:start="111:24" pos:end="111:29"><name pos:start="111:24" pos:end="111:29">if_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:26"><expr pos:start="113:5" pos:end="113:25"><name pos:start="113:5" pos:end="113:12">else_ctx</name> <operator pos:start="113:14" pos:end="113:14">=</operator> <call pos:start="113:16" pos:end="113:25"><name pos:start="113:16" pos:end="113:23">aml_else</name><argument_list pos:start="113:24" pos:end="113:25">()</argument_list></call></expr>;</expr_stmt>

    <block pos:start="115:5" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:47">

        <expr_stmt pos:start="117:9" pos:end="117:47"><expr pos:start="117:9" pos:end="117:46"><call pos:start="117:9" pos:end="117:46"><name pos:start="117:9" pos:end="117:18">aml_append</name><argument_list pos:start="117:19" pos:end="117:46">(<argument pos:start="117:20" pos:end="117:27"><expr pos:start="117:20" pos:end="117:27"><name pos:start="117:20" pos:end="117:27">else_ctx</name></expr></argument>, <argument pos:start="117:30" pos:end="117:45"><expr pos:start="117:30" pos:end="117:45"><call pos:start="117:30" pos:end="117:45"><name pos:start="117:30" pos:end="117:39">aml_return</name><argument_list pos:start="117:40" pos:end="117:45">(<argument pos:start="117:41" pos:end="117:44"><expr pos:start="117:41" pos:end="117:44"><name pos:start="117:41" pos:end="117:44">zero</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="121:5" pos:end="121:33"><expr pos:start="121:5" pos:end="121:32"><call pos:start="121:5" pos:end="121:32"><name pos:start="121:5" pos:end="121:14">aml_append</name><argument_list pos:start="121:15" pos:end="121:32">(<argument pos:start="121:16" pos:end="121:21"><expr pos:start="121:16" pos:end="121:21"><name pos:start="121:16" pos:end="121:21">method</name></expr></argument>, <argument pos:start="121:24" pos:end="121:31"><expr pos:start="121:24" pos:end="121:31"><name pos:start="121:24" pos:end="121:31">else_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:33"><expr pos:start="123:5" pos:end="123:32"><call pos:start="123:5" pos:end="123:32"><name pos:start="123:5" pos:end="123:14">aml_append</name><argument_list pos:start="123:15" pos:end="123:32">(<argument pos:start="123:16" pos:end="123:23"><expr pos:start="123:16" pos:end="123:23"><name pos:start="123:16" pos:end="123:23">sb_scope</name></expr></argument>, <argument pos:start="123:26" pos:end="123:31"><expr pos:start="123:26" pos:end="123:31"><name pos:start="123:26" pos:end="123:31">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:64"><expr pos:start="127:5" pos:end="127:63"><name pos:start="127:5" pos:end="127:10">method</name> <operator pos:start="127:12" pos:end="127:12">=</operator> <call pos:start="127:14" pos:end="127:63"><name pos:start="127:14" pos:end="127:23">aml_method</name><argument_list pos:start="127:24" pos:end="127:63">(<argument pos:start="127:25" pos:end="127:40"><expr pos:start="127:25" pos:end="127:40"><name pos:start="127:25" pos:end="127:40">CPU_EJECT_METHOD</name></expr></argument>, <argument pos:start="127:43" pos:end="127:43"><expr pos:start="127:43" pos:end="127:43"><literal type="number" pos:start="127:43" pos:end="127:43">2</literal></expr></argument>, <argument pos:start="127:46" pos:end="127:62"><expr pos:start="127:46" pos:end="127:62"><name pos:start="127:46" pos:end="127:62">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:39"><expr pos:start="129:5" pos:end="129:38"><call pos:start="129:5" pos:end="129:38"><name pos:start="129:5" pos:end="129:14">aml_append</name><argument_list pos:start="129:15" pos:end="129:38">(<argument pos:start="129:16" pos:end="129:21"><expr pos:start="129:16" pos:end="129:21"><name pos:start="129:16" pos:end="129:21">method</name></expr></argument>, <argument pos:start="129:24" pos:end="129:37"><expr pos:start="129:24" pos:end="129:37"><call pos:start="129:24" pos:end="129:37"><name pos:start="129:24" pos:end="129:32">aml_sleep</name><argument_list pos:start="129:33" pos:end="129:37">(<argument pos:start="129:34" pos:end="129:36"><expr pos:start="129:34" pos:end="129:36"><literal type="number" pos:start="129:34" pos:end="129:36">200</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:33"><expr pos:start="131:5" pos:end="131:32"><call pos:start="131:5" pos:end="131:32"><name pos:start="131:5" pos:end="131:14">aml_append</name><argument_list pos:start="131:15" pos:end="131:32">(<argument pos:start="131:16" pos:end="131:23"><expr pos:start="131:16" pos:end="131:23"><name pos:start="131:16" pos:end="131:23">sb_scope</name></expr></argument>, <argument pos:start="131:26" pos:end="131:31"><expr pos:start="131:26" pos:end="131:31"><name pos:start="131:26" pos:end="131:31">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:63"><expr pos:start="135:5" pos:end="135:62"><name pos:start="135:5" pos:end="135:10">method</name> <operator pos:start="135:12" pos:end="135:12">=</operator> <call pos:start="135:14" pos:end="135:62"><name pos:start="135:14" pos:end="135:23">aml_method</name><argument_list pos:start="135:24" pos:end="135:62">(<argument pos:start="135:25" pos:end="135:39"><expr pos:start="135:25" pos:end="135:39"><name pos:start="135:25" pos:end="135:39">CPU_SCAN_METHOD</name></expr></argument>, <argument pos:start="135:42" pos:end="135:42"><expr pos:start="135:42" pos:end="135:42"><literal type="number" pos:start="135:42" pos:end="135:42">0</literal></expr></argument>, <argument pos:start="135:45" pos:end="135:61"><expr pos:start="135:45" pos:end="135:61"><name pos:start="135:45" pos:end="135:61">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <block pos:start="137:5" pos:end="249:5">{<block_content pos:start="139:9" pos:end="247:38">

        <decl_stmt pos:start="139:9" pos:end="139:45"><decl pos:start="139:9" pos:end="139:22"><type pos:start="139:9" pos:end="139:13"><name pos:start="139:9" pos:end="139:11">Aml</name> <modifier pos:start="139:13" pos:end="139:13">*</modifier></type><name pos:start="139:14" pos:end="139:22">while_ctx</name></decl>, <decl pos:start="139:25" pos:end="139:32"><type ref="prev" pos:start="139:9" pos:end="139:13"><modifier pos:start="139:25" pos:end="139:25">*</modifier></type><name pos:start="139:26" pos:end="139:32">if_ctx2</name></decl>, <decl pos:start="139:35" pos:end="139:44"><type ref="prev" pos:start="139:9" pos:end="139:13"><modifier pos:start="139:35" pos:end="139:35">*</modifier></type><name pos:start="139:36" pos:end="139:44">else_ctx2</name></decl>;</decl_stmt>

        <decl_stmt pos:start="141:9" pos:end="141:40"><decl pos:start="141:9" pos:end="141:39"><type pos:start="141:9" pos:end="141:13"><name pos:start="141:9" pos:end="141:11">Aml</name> <modifier pos:start="141:13" pos:end="141:13">*</modifier></type><name pos:start="141:14" pos:end="141:26">bus_check_evt</name> <init pos:start="141:28" pos:end="141:39">= <expr pos:start="141:30" pos:end="141:39"><call pos:start="141:30" pos:end="141:39"><name pos:start="141:30" pos:end="141:36">aml_int</name><argument_list pos:start="141:37" pos:end="141:39">(<argument pos:start="141:38" pos:end="141:38"><expr pos:start="141:38" pos:end="141:38"><literal type="number" pos:start="141:38" pos:end="141:38">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="143:9" pos:end="143:37"><decl pos:start="143:9" pos:end="143:36"><type pos:start="143:9" pos:end="143:13"><name pos:start="143:9" pos:end="143:11">Aml</name> <modifier pos:start="143:13" pos:end="143:13">*</modifier></type><name pos:start="143:14" pos:end="143:23">remove_evt</name> <init pos:start="143:25" pos:end="143:36">= <expr pos:start="143:27" pos:end="143:36"><call pos:start="143:27" pos:end="143:36"><name pos:start="143:27" pos:end="143:33">aml_int</name><argument_list pos:start="143:34" pos:end="143:36">(<argument pos:start="143:35" pos:end="143:35"><expr pos:start="143:35" pos:end="143:35"><literal type="number" pos:start="143:35" pos:end="143:35">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="145:9" pos:end="145:39"><decl pos:start="145:9" pos:end="145:38"><type pos:start="145:9" pos:end="145:13"><name pos:start="145:9" pos:end="145:11">Aml</name> <modifier pos:start="145:13" pos:end="145:13">*</modifier></type><name pos:start="145:14" pos:end="145:23">status_map</name> <init pos:start="145:25" pos:end="145:38">= <expr pos:start="145:27" pos:end="145:38"><call pos:start="145:27" pos:end="145:38"><name pos:start="145:27" pos:end="145:35">aml_local</name><argument_list pos:start="145:36" pos:end="145:38">(<argument pos:start="145:37" pos:end="145:37"><expr pos:start="145:37" pos:end="145:37"><literal type="number" pos:start="145:37" pos:end="145:37">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="145:41" pos:end="145:72">/* Local5 = active cpu bitmap */</comment>

        <decl_stmt pos:start="147:9" pos:end="147:33"><decl pos:start="147:9" pos:end="147:32"><type pos:start="147:9" pos:end="147:13"><name pos:start="147:9" pos:end="147:11">Aml</name> <modifier pos:start="147:13" pos:end="147:13">*</modifier></type><name pos:start="147:14" pos:end="147:17">byte</name> <init pos:start="147:19" pos:end="147:32">= <expr pos:start="147:21" pos:end="147:32"><call pos:start="147:21" pos:end="147:32"><name pos:start="147:21" pos:end="147:29">aml_local</name><argument_list pos:start="147:30" pos:end="147:32">(<argument pos:start="147:31" pos:end="147:31"><expr pos:start="147:31" pos:end="147:31"><literal type="number" pos:start="147:31" pos:end="147:31">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="147:35" pos:end="147:75">/* Local2 = last read byte from bitmap */</comment>

        <decl_stmt pos:start="149:9" pos:end="149:32"><decl pos:start="149:9" pos:end="149:31"><type pos:start="149:9" pos:end="149:13"><name pos:start="149:9" pos:end="149:11">Aml</name> <modifier pos:start="149:13" pos:end="149:13">*</modifier></type><name pos:start="149:14" pos:end="149:16">idx</name> <init pos:start="149:18" pos:end="149:31">= <expr pos:start="149:20" pos:end="149:31"><call pos:start="149:20" pos:end="149:31"><name pos:start="149:20" pos:end="149:28">aml_local</name><argument_list pos:start="149:29" pos:end="149:31">(<argument pos:start="149:30" pos:end="149:30"><expr pos:start="149:30" pos:end="149:30"><literal type="number" pos:start="149:30" pos:end="149:30">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="149:34" pos:end="149:70">/* Processor ID / APIC ID iterator */</comment>

        <decl_stmt pos:start="151:9" pos:end="151:38"><decl pos:start="151:9" pos:end="151:37"><type pos:start="151:9" pos:end="151:13"><name pos:start="151:9" pos:end="151:11">Aml</name> <modifier pos:start="151:13" pos:end="151:13">*</modifier></type><name pos:start="151:14" pos:end="151:22">is_cpu_on</name> <init pos:start="151:24" pos:end="151:37">= <expr pos:start="151:26" pos:end="151:37"><call pos:start="151:26" pos:end="151:37"><name pos:start="151:26" pos:end="151:34">aml_local</name><argument_list pos:start="151:35" pos:end="151:37">(<argument pos:start="151:36" pos:end="151:36"><expr pos:start="151:36" pos:end="151:36"><literal type="number" pos:start="151:36" pos:end="151:36">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="151:40" pos:end="151:71">/* Local1 = CPON flag for cpu */</comment>

        <decl_stmt pos:start="153:9" pos:end="153:35"><decl pos:start="153:9" pos:end="153:34"><type pos:start="153:9" pos:end="153:13"><name pos:start="153:9" pos:end="153:11">Aml</name> <modifier pos:start="153:13" pos:end="153:13">*</modifier></type><name pos:start="153:14" pos:end="153:19">status</name> <init pos:start="153:21" pos:end="153:34">= <expr pos:start="153:23" pos:end="153:34"><call pos:start="153:23" pos:end="153:34"><name pos:start="153:23" pos:end="153:31">aml_local</name><argument_list pos:start="153:32" pos:end="153:34">(<argument pos:start="153:33" pos:end="153:33"><expr pos:start="153:33" pos:end="153:33"><literal type="number" pos:start="153:33" pos:end="153:33">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="153:37" pos:end="153:71">/* Local3 = active state for cpu */</comment>



        <expr_stmt pos:start="157:9" pos:end="157:76"><expr pos:start="157:9" pos:end="157:75"><call pos:start="157:9" pos:end="157:75"><name pos:start="157:9" pos:end="157:18">aml_append</name><argument_list pos:start="157:19" pos:end="157:75">(<argument pos:start="157:20" pos:end="157:25"><expr pos:start="157:20" pos:end="157:25"><name pos:start="157:20" pos:end="157:25">method</name></expr></argument>, <argument pos:start="157:28" pos:end="157:74"><expr pos:start="157:28" pos:end="157:74"><call pos:start="157:28" pos:end="157:74"><name pos:start="157:28" pos:end="157:36">aml_store</name><argument_list pos:start="157:37" pos:end="157:74">(<argument pos:start="157:38" pos:end="157:61"><expr pos:start="157:38" pos:end="157:61"><call pos:start="157:38" pos:end="157:61"><name pos:start="157:38" pos:end="157:45">aml_name</name><argument_list pos:start="157:46" pos:end="157:61">(<argument pos:start="157:47" pos:end="157:60"><expr pos:start="157:47" pos:end="157:60"><name pos:start="157:47" pos:end="157:60">CPU_STATUS_MAP</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="157:64" pos:end="157:73"><expr pos:start="157:64" pos:end="157:73"><name pos:start="157:64" pos:end="157:73">status_map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:50"><expr pos:start="159:9" pos:end="159:49"><call pos:start="159:9" pos:end="159:49"><name pos:start="159:9" pos:end="159:18">aml_append</name><argument_list pos:start="159:19" pos:end="159:49">(<argument pos:start="159:20" pos:end="159:25"><expr pos:start="159:20" pos:end="159:25"><name pos:start="159:20" pos:end="159:25">method</name></expr></argument>, <argument pos:start="159:28" pos:end="159:48"><expr pos:start="159:28" pos:end="159:48"><call pos:start="159:28" pos:end="159:48"><name pos:start="159:28" pos:end="159:36">aml_store</name><argument_list pos:start="159:37" pos:end="159:48">(<argument pos:start="159:38" pos:end="159:41"><expr pos:start="159:38" pos:end="159:41"><name pos:start="159:38" pos:end="159:41">zero</name></expr></argument>, <argument pos:start="159:44" pos:end="159:47"><expr pos:start="159:44" pos:end="159:47"><name pos:start="159:44" pos:end="159:47">byte</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:49"><expr pos:start="161:9" pos:end="161:48"><call pos:start="161:9" pos:end="161:48"><name pos:start="161:9" pos:end="161:18">aml_append</name><argument_list pos:start="161:19" pos:end="161:48">(<argument pos:start="161:20" pos:end="161:25"><expr pos:start="161:20" pos:end="161:25"><name pos:start="161:20" pos:end="161:25">method</name></expr></argument>, <argument pos:start="161:28" pos:end="161:47"><expr pos:start="161:28" pos:end="161:47"><call pos:start="161:28" pos:end="161:47"><name pos:start="161:28" pos:end="161:36">aml_store</name><argument_list pos:start="161:37" pos:end="161:47">(<argument pos:start="161:38" pos:end="161:41"><expr pos:start="161:38" pos:end="161:41"><name pos:start="161:38" pos:end="161:41">zero</name></expr></argument>, <argument pos:start="161:44" pos:end="161:46"><expr pos:start="161:44" pos:end="161:46"><name pos:start="161:44" pos:end="161:46">idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="165:9" pos:end="165:40">/* While (idx &lt; SizeOf(CPON)) */</comment>

        <expr_stmt pos:start="167:9" pos:end="167:68"><expr pos:start="167:9" pos:end="167:67"><name pos:start="167:9" pos:end="167:17">while_ctx</name> <operator pos:start="167:19" pos:end="167:19">=</operator> <call pos:start="167:21" pos:end="167:67"><name pos:start="167:21" pos:end="167:29">aml_while</name><argument_list pos:start="167:30" pos:end="167:67">(<argument pos:start="167:31" pos:end="167:66"><expr pos:start="167:31" pos:end="167:66"><call pos:start="167:31" pos:end="167:66"><name pos:start="167:31" pos:end="167:39">aml_lless</name><argument_list pos:start="167:40" pos:end="167:66">(<argument pos:start="167:41" pos:end="167:43"><expr pos:start="167:41" pos:end="167:43"><name pos:start="167:41" pos:end="167:43">idx</name></expr></argument>, <argument pos:start="167:46" pos:end="167:65"><expr pos:start="167:46" pos:end="167:65"><call pos:start="167:46" pos:end="167:65"><name pos:start="167:46" pos:end="167:55">aml_sizeof</name><argument_list pos:start="167:56" pos:end="167:65">(<argument pos:start="167:57" pos:end="167:64"><expr pos:start="167:57" pos:end="167:64"><name pos:start="167:57" pos:end="167:64">cpus_map</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="171:73"><expr pos:start="169:9" pos:end="171:72"><call pos:start="169:9" pos:end="171:72"><name pos:start="169:9" pos:end="169:18">aml_append</name><argument_list pos:start="169:19" pos:end="171:72">(<argument pos:start="169:20" pos:end="169:28"><expr pos:start="169:20" pos:end="169:28"><name pos:start="169:20" pos:end="169:28">while_ctx</name></expr></argument>,

            <argument pos:start="171:13" pos:end="171:71"><expr pos:start="171:13" pos:end="171:71"><call pos:start="171:13" pos:end="171:71"><name pos:start="171:13" pos:end="171:21">aml_store</name><argument_list pos:start="171:22" pos:end="171:71">(<argument pos:start="171:23" pos:end="171:59"><expr pos:start="171:23" pos:end="171:59"><call pos:start="171:23" pos:end="171:59"><name pos:start="171:23" pos:end="171:33">aml_derefof</name><argument_list pos:start="171:34" pos:end="171:59">(<argument pos:start="171:35" pos:end="171:58"><expr pos:start="171:35" pos:end="171:58"><call pos:start="171:35" pos:end="171:58"><name pos:start="171:35" pos:end="171:43">aml_index</name><argument_list pos:start="171:44" pos:end="171:58">(<argument pos:start="171:45" pos:end="171:52"><expr pos:start="171:45" pos:end="171:52"><name pos:start="171:45" pos:end="171:52">cpus_map</name></expr></argument>, <argument pos:start="171:55" pos:end="171:57"><expr pos:start="171:55" pos:end="171:57"><name pos:start="171:55" pos:end="171:57">idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="171:62" pos:end="171:70"><expr pos:start="171:62" pos:end="171:70"><name pos:start="171:62" pos:end="171:70">is_cpu_on</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="175:9" pos:end="175:59"><expr pos:start="175:9" pos:end="175:58"><name pos:start="175:9" pos:end="175:14">if_ctx</name> <operator pos:start="175:16" pos:end="175:16">=</operator> <call pos:start="175:18" pos:end="175:58"><name pos:start="175:18" pos:end="175:23">aml_if</name><argument_list pos:start="175:24" pos:end="175:58">(<argument pos:start="175:25" pos:end="175:57"><expr pos:start="175:25" pos:end="175:57"><call pos:start="175:25" pos:end="175:57"><name pos:start="175:25" pos:end="175:31">aml_and</name><argument_list pos:start="175:32" pos:end="175:57">(<argument pos:start="175:33" pos:end="175:35"><expr pos:start="175:33" pos:end="175:35"><name pos:start="175:33" pos:end="175:35">idx</name></expr></argument>, <argument pos:start="175:38" pos:end="175:50"><expr pos:start="175:38" pos:end="175:50"><call pos:start="175:38" pos:end="175:50"><name pos:start="175:38" pos:end="175:44">aml_int</name><argument_list pos:start="175:45" pos:end="175:50">(<argument pos:start="175:46" pos:end="175:49"><expr pos:start="175:46" pos:end="175:49"><literal type="number" pos:start="175:46" pos:end="175:49">0x07</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="175:53" pos:end="175:56"><expr pos:start="175:53" pos:end="175:56"><name pos:start="175:53" pos:end="175:56">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="177:9" pos:end="183:9">{<block_content pos:start="181:13" pos:end="181:64">

            <comment type="block" pos:start="179:13" pos:end="179:56">/* Shift down previously read bitmap byte */</comment>

            <expr_stmt pos:start="181:13" pos:end="181:64"><expr pos:start="181:13" pos:end="181:63"><call pos:start="181:13" pos:end="181:63"><name pos:start="181:13" pos:end="181:22">aml_append</name><argument_list pos:start="181:23" pos:end="181:63">(<argument pos:start="181:24" pos:end="181:29"><expr pos:start="181:24" pos:end="181:29"><name pos:start="181:24" pos:end="181:29">if_ctx</name></expr></argument>, <argument pos:start="181:32" pos:end="181:62"><expr pos:start="181:32" pos:end="181:62"><call pos:start="181:32" pos:end="181:62"><name pos:start="181:32" pos:end="181:45">aml_shiftright</name><argument_list pos:start="181:46" pos:end="181:62">(<argument pos:start="181:47" pos:end="181:50"><expr pos:start="181:47" pos:end="181:50"><name pos:start="181:47" pos:end="181:50">byte</name></expr></argument>, <argument pos:start="181:53" pos:end="181:55"><expr pos:start="181:53" pos:end="181:55"><name pos:start="181:53" pos:end="181:55">one</name></expr></argument>, <argument pos:start="181:58" pos:end="181:61"><expr pos:start="181:58" pos:end="181:61"><name pos:start="181:58" pos:end="181:61">byte</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="185:9" pos:end="185:38"><expr pos:start="185:9" pos:end="185:37"><call pos:start="185:9" pos:end="185:37"><name pos:start="185:9" pos:end="185:18">aml_append</name><argument_list pos:start="185:19" pos:end="185:37">(<argument pos:start="185:20" pos:end="185:28"><expr pos:start="185:20" pos:end="185:28"><name pos:start="185:20" pos:end="185:28">while_ctx</name></expr></argument>, <argument pos:start="185:31" pos:end="185:36"><expr pos:start="185:31" pos:end="185:36"><name pos:start="185:31" pos:end="185:36">if_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="189:9" pos:end="189:30"><expr pos:start="189:9" pos:end="189:29"><name pos:start="189:9" pos:end="189:16">else_ctx</name> <operator pos:start="189:18" pos:end="189:18">=</operator> <call pos:start="189:20" pos:end="189:29"><name pos:start="189:20" pos:end="189:27">aml_else</name><argument_list pos:start="189:28" pos:end="189:29">()</argument_list></call></expr>;</expr_stmt>

        <block pos:start="191:9" pos:end="199:9">{<block_content pos:start="195:13" pos:end="197:71">

            <comment type="block" pos:start="193:13" pos:end="193:48">/* Read next byte from cpu bitmap */</comment>

            <expr_stmt pos:start="195:13" pos:end="197:71"><expr pos:start="195:13" pos:end="197:70"><call pos:start="195:13" pos:end="197:70"><name pos:start="195:13" pos:end="195:22">aml_append</name><argument_list pos:start="195:23" pos:end="197:70">(<argument pos:start="195:24" pos:end="195:31"><expr pos:start="195:24" pos:end="195:31"><name pos:start="195:24" pos:end="195:31">else_ctx</name></expr></argument>, <argument pos:start="195:34" pos:end="197:69"><expr pos:start="195:34" pos:end="197:69"><call pos:start="195:34" pos:end="197:69"><name pos:start="195:34" pos:end="195:42">aml_store</name><argument_list pos:start="195:43" pos:end="197:69">(<argument pos:start="195:44" pos:end="197:62"><expr pos:start="195:44" pos:end="197:62"><call pos:start="195:44" pos:end="197:62"><name pos:start="195:44" pos:end="195:54">aml_derefof</name><argument_list pos:start="195:55" pos:end="197:62">(<argument pos:start="195:56" pos:end="197:61"><expr pos:start="195:56" pos:end="197:61"><call pos:start="195:56" pos:end="197:61"><name pos:start="195:56" pos:end="195:64">aml_index</name><argument_list pos:start="195:65" pos:end="197:61">(<argument pos:start="195:66" pos:end="195:75"><expr pos:start="195:66" pos:end="195:75"><name pos:start="195:66" pos:end="195:75">status_map</name></expr></argument>,

                       <argument pos:start="197:24" pos:end="197:60"><expr pos:start="197:24" pos:end="197:60"><call pos:start="197:24" pos:end="197:60"><name pos:start="197:24" pos:end="197:37">aml_shiftright</name><argument_list pos:start="197:38" pos:end="197:60">(<argument pos:start="197:39" pos:end="197:41"><expr pos:start="197:39" pos:end="197:41"><name pos:start="197:39" pos:end="197:41">idx</name></expr></argument>, <argument pos:start="197:44" pos:end="197:53"><expr pos:start="197:44" pos:end="197:53"><call pos:start="197:44" pos:end="197:53"><name pos:start="197:44" pos:end="197:50">aml_int</name><argument_list pos:start="197:51" pos:end="197:53">(<argument pos:start="197:52" pos:end="197:52"><expr pos:start="197:52" pos:end="197:52"><literal type="number" pos:start="197:52" pos:end="197:52">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="197:56" pos:end="197:59"><expr pos:start="197:56" pos:end="197:59"><name pos:start="197:56" pos:end="197:59">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="197:65" pos:end="197:68"><expr pos:start="197:65" pos:end="197:68"><name pos:start="197:65" pos:end="197:68">byte</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="201:9" pos:end="201:40"><expr pos:start="201:9" pos:end="201:39"><call pos:start="201:9" pos:end="201:39"><name pos:start="201:9" pos:end="201:18">aml_append</name><argument_list pos:start="201:19" pos:end="201:39">(<argument pos:start="201:20" pos:end="201:28"><expr pos:start="201:20" pos:end="201:28"><name pos:start="201:20" pos:end="201:28">while_ctx</name></expr></argument>, <argument pos:start="201:31" pos:end="201:38"><expr pos:start="201:31" pos:end="201:38"><name pos:start="201:31" pos:end="201:38">else_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="205:9" pos:end="205:75"><expr pos:start="205:9" pos:end="205:74"><call pos:start="205:9" pos:end="205:74"><name pos:start="205:9" pos:end="205:18">aml_append</name><argument_list pos:start="205:19" pos:end="205:74">(<argument pos:start="205:20" pos:end="205:28"><expr pos:start="205:20" pos:end="205:28"><name pos:start="205:20" pos:end="205:28">while_ctx</name></expr></argument>, <argument pos:start="205:31" pos:end="205:73"><expr pos:start="205:31" pos:end="205:73"><call pos:start="205:31" pos:end="205:73"><name pos:start="205:31" pos:end="205:39">aml_store</name><argument_list pos:start="205:40" pos:end="205:73">(<argument pos:start="205:41" pos:end="205:64"><expr pos:start="205:41" pos:end="205:64"><call pos:start="205:41" pos:end="205:64"><name pos:start="205:41" pos:end="205:47">aml_and</name><argument_list pos:start="205:48" pos:end="205:64">(<argument pos:start="205:49" pos:end="205:52"><expr pos:start="205:49" pos:end="205:52"><name pos:start="205:49" pos:end="205:52">byte</name></expr></argument>, <argument pos:start="205:55" pos:end="205:57"><expr pos:start="205:55" pos:end="205:57"><name pos:start="205:55" pos:end="205:57">one</name></expr></argument>, <argument pos:start="205:60" pos:end="205:63"><expr pos:start="205:60" pos:end="205:63"><name pos:start="205:60" pos:end="205:63">NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="205:67" pos:end="205:72"><expr pos:start="205:67" pos:end="205:72"><name pos:start="205:67" pos:end="205:72">status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:64"><expr pos:start="207:9" pos:end="207:63"><name pos:start="207:9" pos:end="207:14">if_ctx</name> <operator pos:start="207:16" pos:end="207:16">=</operator> <call pos:start="207:18" pos:end="207:63"><name pos:start="207:18" pos:end="207:23">aml_if</name><argument_list pos:start="207:24" pos:end="207:63">(<argument pos:start="207:25" pos:end="207:62"><expr pos:start="207:25" pos:end="207:62"><call pos:start="207:25" pos:end="207:62"><name pos:start="207:25" pos:end="207:32">aml_lnot</name><argument_list pos:start="207:33" pos:end="207:62">(<argument pos:start="207:34" pos:end="207:61"><expr pos:start="207:34" pos:end="207:61"><call pos:start="207:34" pos:end="207:61"><name pos:start="207:34" pos:end="207:42">aml_equal</name><argument_list pos:start="207:43" pos:end="207:61">(<argument pos:start="207:44" pos:end="207:52"><expr pos:start="207:44" pos:end="207:52"><name pos:start="207:44" pos:end="207:52">is_cpu_on</name></expr></argument>, <argument pos:start="207:55" pos:end="207:60"><expr pos:start="207:55" pos:end="207:60"><name pos:start="207:55" pos:end="207:60">status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="209:9" pos:end="237:9">{<block_content pos:start="213:13" pos:end="235:13">

            <comment type="block" pos:start="211:13" pos:end="211:59">/* State change - update CPON with new state */</comment>

            <expr_stmt pos:start="213:13" pos:end="213:76"><expr pos:start="213:13" pos:end="213:75"><call pos:start="213:13" pos:end="213:75"><name pos:start="213:13" pos:end="213:22">aml_append</name><argument_list pos:start="213:23" pos:end="213:75">(<argument pos:start="213:24" pos:end="213:29"><expr pos:start="213:24" pos:end="213:29"><name pos:start="213:24" pos:end="213:29">if_ctx</name></expr></argument>, <argument pos:start="213:32" pos:end="213:74"><expr pos:start="213:32" pos:end="213:74"><call pos:start="213:32" pos:end="213:74"><name pos:start="213:32" pos:end="213:40">aml_store</name><argument_list pos:start="213:41" pos:end="213:74">(<argument pos:start="213:42" pos:end="213:47"><expr pos:start="213:42" pos:end="213:47"><name pos:start="213:42" pos:end="213:47">status</name></expr></argument>, <argument pos:start="213:50" pos:end="213:73"><expr pos:start="213:50" pos:end="213:73"><call pos:start="213:50" pos:end="213:73"><name pos:start="213:50" pos:end="213:58">aml_index</name><argument_list pos:start="213:59" pos:end="213:73">(<argument pos:start="213:60" pos:end="213:67"><expr pos:start="213:60" pos:end="213:67"><name pos:start="213:60" pos:end="213:67">cpus_map</name></expr></argument>, <argument pos:start="213:70" pos:end="213:72"><expr pos:start="213:70" pos:end="213:72"><name pos:start="213:70" pos:end="213:72">idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:53"><expr pos:start="215:13" pos:end="215:52"><name pos:start="215:13" pos:end="215:19">if_ctx2</name> <operator pos:start="215:21" pos:end="215:21">=</operator> <call pos:start="215:23" pos:end="215:52"><name pos:start="215:23" pos:end="215:28">aml_if</name><argument_list pos:start="215:29" pos:end="215:52">(<argument pos:start="215:30" pos:end="215:51"><expr pos:start="215:30" pos:end="215:51"><call pos:start="215:30" pos:end="215:51"><name pos:start="215:30" pos:end="215:38">aml_equal</name><argument_list pos:start="215:39" pos:end="215:51">(<argument pos:start="215:40" pos:end="215:45"><expr pos:start="215:40" pos:end="215:45"><name pos:start="215:40" pos:end="215:45">status</name></expr></argument>, <argument pos:start="215:48" pos:end="215:50"><expr pos:start="215:48" pos:end="215:50"><name pos:start="215:48" pos:end="215:50">one</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <block pos:start="217:13" pos:end="223:13">{<block_content pos:start="219:17" pos:end="221:70">

                <expr_stmt pos:start="219:17" pos:end="221:70"><expr pos:start="219:17" pos:end="221:69"><call pos:start="219:17" pos:end="221:69"><name pos:start="219:17" pos:end="219:26">aml_append</name><argument_list pos:start="219:27" pos:end="221:69">(<argument pos:start="219:28" pos:end="219:34"><expr pos:start="219:28" pos:end="219:34"><name pos:start="219:28" pos:end="219:34">if_ctx2</name></expr></argument>,

                    <argument pos:start="221:21" pos:end="221:68"><expr pos:start="221:21" pos:end="221:68"><call pos:start="221:21" pos:end="221:68"><name pos:start="221:21" pos:end="221:29">aml_call2</name><argument_list pos:start="221:30" pos:end="221:68">(<argument pos:start="221:31" pos:end="221:47"><expr pos:start="221:31" pos:end="221:47"><name pos:start="221:31" pos:end="221:47">AML_NOTIFY_METHOD</name></expr></argument>, <argument pos:start="221:50" pos:end="221:52"><expr pos:start="221:50" pos:end="221:52"><name pos:start="221:50" pos:end="221:52">idx</name></expr></argument>, <argument pos:start="221:55" pos:end="221:67"><expr pos:start="221:55" pos:end="221:67"><name pos:start="221:55" pos:end="221:67">bus_check_evt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

            <expr_stmt pos:start="225:13" pos:end="225:40"><expr pos:start="225:13" pos:end="225:39"><call pos:start="225:13" pos:end="225:39"><name pos:start="225:13" pos:end="225:22">aml_append</name><argument_list pos:start="225:23" pos:end="225:39">(<argument pos:start="225:24" pos:end="225:29"><expr pos:start="225:24" pos:end="225:29"><name pos:start="225:24" pos:end="225:29">if_ctx</name></expr></argument>, <argument pos:start="225:32" pos:end="225:38"><expr pos:start="225:32" pos:end="225:38"><name pos:start="225:32" pos:end="225:38">if_ctx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:35"><expr pos:start="227:13" pos:end="227:34"><name pos:start="227:13" pos:end="227:21">else_ctx2</name> <operator pos:start="227:23" pos:end="227:23">=</operator> <call pos:start="227:25" pos:end="227:34"><name pos:start="227:25" pos:end="227:32">aml_else</name><argument_list pos:start="227:33" pos:end="227:34">()</argument_list></call></expr>;</expr_stmt>

            <block pos:start="229:13" pos:end="235:13">{<block_content pos:start="231:17" pos:end="233:67">

                <expr_stmt pos:start="231:17" pos:end="233:67"><expr pos:start="231:17" pos:end="233:66"><call pos:start="231:17" pos:end="233:66"><name pos:start="231:17" pos:end="231:26">aml_append</name><argument_list pos:start="231:27" pos:end="233:66">(<argument pos:start="231:28" pos:end="231:36"><expr pos:start="231:28" pos:end="231:36"><name pos:start="231:28" pos:end="231:36">else_ctx2</name></expr></argument>,

                    <argument pos:start="233:21" pos:end="233:65"><expr pos:start="233:21" pos:end="233:65"><call pos:start="233:21" pos:end="233:65"><name pos:start="233:21" pos:end="233:29">aml_call2</name><argument_list pos:start="233:30" pos:end="233:65">(<argument pos:start="233:31" pos:end="233:47"><expr pos:start="233:31" pos:end="233:47"><name pos:start="233:31" pos:end="233:47">AML_NOTIFY_METHOD</name></expr></argument>, <argument pos:start="233:50" pos:end="233:52"><expr pos:start="233:50" pos:end="233:52"><name pos:start="233:50" pos:end="233:52">idx</name></expr></argument>, <argument pos:start="233:55" pos:end="233:64"><expr pos:start="233:55" pos:end="233:64"><name pos:start="233:55" pos:end="233:64">remove_evt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

        </block_content>}</block>

        <expr_stmt pos:start="239:9" pos:end="239:38"><expr pos:start="239:9" pos:end="239:37"><call pos:start="239:9" pos:end="239:37"><name pos:start="239:9" pos:end="239:18">aml_append</name><argument_list pos:start="239:19" pos:end="239:37">(<argument pos:start="239:20" pos:end="239:25"><expr pos:start="239:20" pos:end="239:25"><name pos:start="239:20" pos:end="239:25">if_ctx</name></expr></argument>, <argument pos:start="239:28" pos:end="239:36"><expr pos:start="239:28" pos:end="239:36"><name pos:start="239:28" pos:end="239:36">else_ctx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="241:9" pos:end="241:38"><expr pos:start="241:9" pos:end="241:37"><call pos:start="241:9" pos:end="241:37"><name pos:start="241:9" pos:end="241:18">aml_append</name><argument_list pos:start="241:19" pos:end="241:37">(<argument pos:start="241:20" pos:end="241:28"><expr pos:start="241:20" pos:end="241:28"><name pos:start="241:20" pos:end="241:28">while_ctx</name></expr></argument>, <argument pos:start="241:31" pos:end="241:36"><expr pos:start="241:31" pos:end="241:36"><name pos:start="241:31" pos:end="241:36">if_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="245:9" pos:end="245:50"><expr pos:start="245:9" pos:end="245:49"><call pos:start="245:9" pos:end="245:49"><name pos:start="245:9" pos:end="245:18">aml_append</name><argument_list pos:start="245:19" pos:end="245:49">(<argument pos:start="245:20" pos:end="245:28"><expr pos:start="245:20" pos:end="245:28"><name pos:start="245:20" pos:end="245:28">while_ctx</name></expr></argument>, <argument pos:start="245:31" pos:end="245:48"><expr pos:start="245:31" pos:end="245:48"><call pos:start="245:31" pos:end="245:48"><name pos:start="245:31" pos:end="245:43">aml_increment</name><argument_list pos:start="245:44" pos:end="245:48">(<argument pos:start="245:45" pos:end="245:47"><expr pos:start="245:45" pos:end="245:47"><name pos:start="245:45" pos:end="245:47">idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="245:52" pos:end="245:71">/* go to next cpu */</comment>

        <expr_stmt pos:start="247:9" pos:end="247:38"><expr pos:start="247:9" pos:end="247:37"><call pos:start="247:9" pos:end="247:37"><name pos:start="247:9" pos:end="247:18">aml_append</name><argument_list pos:start="247:19" pos:end="247:37">(<argument pos:start="247:20" pos:end="247:25"><expr pos:start="247:20" pos:end="247:25"><name pos:start="247:20" pos:end="247:25">method</name></expr></argument>, <argument pos:start="247:28" pos:end="247:36"><expr pos:start="247:28" pos:end="247:36"><name pos:start="247:28" pos:end="247:36">while_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="251:5" pos:end="251:33"><expr pos:start="251:5" pos:end="251:32"><call pos:start="251:5" pos:end="251:32"><name pos:start="251:5" pos:end="251:14">aml_append</name><argument_list pos:start="251:15" pos:end="251:32">(<argument pos:start="251:16" pos:end="251:23"><expr pos:start="251:16" pos:end="251:23"><name pos:start="251:16" pos:end="251:23">sb_scope</name></expr></argument>, <argument pos:start="251:26" pos:end="251:31"><expr pos:start="251:26" pos:end="251:31"><name pos:start="251:26" pos:end="251:31">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="255:5" pos:end="257:38">/* The current AML generator can cover the APIC ID range [0..255],

     * inclusive, for VCPU hotplug. */</comment>

    <expr_stmt pos:start="259:5" pos:end="259:55"><expr pos:start="259:5" pos:end="259:54"><call pos:start="259:5" pos:end="259:54"><name pos:start="259:5" pos:end="259:21">QEMU_BUILD_BUG_ON</name><argument_list pos:start="259:22" pos:end="259:54">(<argument pos:start="259:23" pos:end="259:53"><expr pos:start="259:23" pos:end="259:53"><name pos:start="259:23" pos:end="259:47">ACPI_CPU_HOTPLUG_ID_LIMIT</name> <operator pos:start="259:49" pos:end="259:49">&gt;</operator> <literal type="number" pos:start="259:51" pos:end="259:53">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:63"><expr pos:start="261:5" pos:end="261:62"><call pos:start="261:5" pos:end="261:62"><name pos:start="261:5" pos:end="261:12">g_assert</name><argument_list pos:start="261:13" pos:end="261:62">(<argument pos:start="261:14" pos:end="261:61"><expr pos:start="261:14" pos:end="261:61"><name pos:start="261:14" pos:end="261:32"><name pos:start="261:14" pos:end="261:17">pcms</name><operator pos:start="261:18" pos:end="261:19">-&gt;</operator><name pos:start="261:20" pos:end="261:32">apic_id_limit</name></name> <operator pos:start="261:34" pos:end="261:35">&lt;=</operator> <name pos:start="261:37" pos:end="261:61">ACPI_CPU_HOTPLUG_ID_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="265:5" pos:end="265:74">/* create PCI0.PRES device and its _CRS to reserve CPU hotplug MMIO */</comment>

    <expr_stmt pos:start="267:5" pos:end="267:69"><expr pos:start="267:5" pos:end="267:68"><name pos:start="267:5" pos:end="267:7">dev</name> <operator pos:start="267:9" pos:end="267:9">=</operator> <call pos:start="267:11" pos:end="267:68"><name pos:start="267:11" pos:end="267:20">aml_device</name><argument_list pos:start="267:21" pos:end="267:68">(<argument pos:start="267:22" pos:end="267:67"><expr pos:start="267:22" pos:end="267:67"><literal type="string" pos:start="267:22" pos:end="267:28">"PCI0."</literal> <call pos:start="267:30" pos:end="267:67"><name pos:start="267:30" pos:end="267:38">stringify</name><argument_list pos:start="267:39" pos:end="267:67">(<argument pos:start="267:40" pos:end="267:66"><expr pos:start="267:40" pos:end="267:66"><name pos:start="267:40" pos:end="267:66">CPU_HOTPLUG_RESOURCE_DEVICE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="269:5" pos:end="269:66"><expr pos:start="269:5" pos:end="269:65"><call pos:start="269:5" pos:end="269:65"><name pos:start="269:5" pos:end="269:14">aml_append</name><argument_list pos:start="269:15" pos:end="269:65">(<argument pos:start="269:16" pos:end="269:18"><expr pos:start="269:16" pos:end="269:18"><name pos:start="269:16" pos:end="269:18">dev</name></expr></argument>, <argument pos:start="269:21" pos:end="269:64"><expr pos:start="269:21" pos:end="269:64"><call pos:start="269:21" pos:end="269:64"><name pos:start="269:21" pos:end="269:33">aml_name_decl</name><argument_list pos:start="269:34" pos:end="269:64">(<argument pos:start="269:35" pos:end="269:40"><expr pos:start="269:35" pos:end="269:40"><literal type="string" pos:start="269:35" pos:end="269:40">"_HID"</literal></expr></argument>, <argument pos:start="269:43" pos:end="269:63"><expr pos:start="269:43" pos:end="269:63"><call pos:start="269:43" pos:end="269:63"><name pos:start="269:43" pos:end="269:52">aml_eisaid</name><argument_list pos:start="269:53" pos:end="269:63">(<argument pos:start="269:54" pos:end="269:62"><expr pos:start="269:54" pos:end="269:62"><literal type="string" pos:start="269:54" pos:end="269:62">"PNP0A06"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="275:6"><expr pos:start="271:5" pos:end="275:5"><call pos:start="271:5" pos:end="275:5"><name pos:start="271:5" pos:end="271:14">aml_append</name><argument_list pos:start="271:15" pos:end="275:5">(<argument pos:start="271:16" pos:end="271:18"><expr pos:start="271:16" pos:end="271:18"><name pos:start="271:16" pos:end="271:18">dev</name></expr></argument>,

        <argument pos:start="273:9" pos:end="273:66"><expr pos:start="273:9" pos:end="273:66"><call pos:start="273:9" pos:end="273:66"><name pos:start="273:9" pos:end="273:21">aml_name_decl</name><argument_list pos:start="273:22" pos:end="273:66">(<argument pos:start="273:23" pos:end="273:28"><expr pos:start="273:23" pos:end="273:28"><literal type="string" pos:start="273:23" pos:end="273:28">"_UID"</literal></expr></argument>, <argument pos:start="273:31" pos:end="273:65"><expr pos:start="273:31" pos:end="273:65"><call pos:start="273:31" pos:end="273:65"><name pos:start="273:31" pos:end="273:40">aml_string</name><argument_list pos:start="273:41" pos:end="273:65">(<argument pos:start="273:42" pos:end="273:64"><expr pos:start="273:42" pos:end="273:64"><literal type="string" pos:start="273:42" pos:end="273:64">"CPU Hotplug resources"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

    )</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="277:5" pos:end="277:64">/* device present, functioning, decoding, not shown in UI */</comment>

    <expr_stmt pos:start="279:5" pos:end="279:57"><expr pos:start="279:5" pos:end="279:56"><call pos:start="279:5" pos:end="279:56"><name pos:start="279:5" pos:end="279:14">aml_append</name><argument_list pos:start="279:15" pos:end="279:56">(<argument pos:start="279:16" pos:end="279:18"><expr pos:start="279:16" pos:end="279:18"><name pos:start="279:16" pos:end="279:18">dev</name></expr></argument>, <argument pos:start="279:21" pos:end="279:55"><expr pos:start="279:21" pos:end="279:55"><call pos:start="279:21" pos:end="279:55"><name pos:start="279:21" pos:end="279:33">aml_name_decl</name><argument_list pos:start="279:34" pos:end="279:55">(<argument pos:start="279:35" pos:end="279:40"><expr pos:start="279:35" pos:end="279:40"><literal type="string" pos:start="279:35" pos:end="279:40">"_STA"</literal></expr></argument>, <argument pos:start="279:43" pos:end="279:54"><expr pos:start="279:43" pos:end="279:54"><call pos:start="279:43" pos:end="279:54"><name pos:start="279:43" pos:end="279:49">aml_int</name><argument_list pos:start="279:50" pos:end="279:54">(<argument pos:start="279:51" pos:end="279:53"><expr pos:start="279:51" pos:end="279:53"><literal type="number" pos:start="279:51" pos:end="279:53">0xB</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:34"><expr pos:start="281:5" pos:end="281:33"><name pos:start="281:5" pos:end="281:7">crs</name> <operator pos:start="281:9" pos:end="281:9">=</operator> <call pos:start="281:11" pos:end="281:33"><name pos:start="281:11" pos:end="281:31">aml_resource_template</name><argument_list pos:start="281:32" pos:end="281:33">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="283:5" pos:end="287:6"><expr pos:start="283:5" pos:end="287:5"><call pos:start="283:5" pos:end="287:5"><name pos:start="283:5" pos:end="283:14">aml_append</name><argument_list pos:start="283:15" pos:end="287:5">(<argument pos:start="283:16" pos:end="283:18"><expr pos:start="283:16" pos:end="283:18"><name pos:start="283:16" pos:end="283:18">crs</name></expr></argument>,

        <argument pos:start="285:9" pos:end="285:68"><expr pos:start="285:9" pos:end="285:68"><call pos:start="285:9" pos:end="285:68"><name pos:start="285:9" pos:end="285:14">aml_io</name><argument_list pos:start="285:15" pos:end="285:68">(<argument pos:start="285:16" pos:end="285:27"><expr pos:start="285:16" pos:end="285:27"><name pos:start="285:16" pos:end="285:27">AML_DECODE16</name></expr></argument>, <argument pos:start="285:30" pos:end="285:36"><expr pos:start="285:30" pos:end="285:36"><name pos:start="285:30" pos:end="285:36">io_base</name></expr></argument>, <argument pos:start="285:39" pos:end="285:45"><expr pos:start="285:39" pos:end="285:45"><name pos:start="285:39" pos:end="285:45">io_base</name></expr></argument>, <argument pos:start="285:48" pos:end="285:48"><expr pos:start="285:48" pos:end="285:48"><literal type="number" pos:start="285:48" pos:end="285:48">1</literal></expr></argument>, <argument pos:start="285:51" pos:end="285:67"><expr pos:start="285:51" pos:end="285:67"><name pos:start="285:51" pos:end="285:67">ACPI_GPE_PROC_LEN</name></expr></argument>)</argument_list></call></expr></argument>

    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:48"><expr pos:start="289:5" pos:end="289:47"><call pos:start="289:5" pos:end="289:47"><name pos:start="289:5" pos:end="289:14">aml_append</name><argument_list pos:start="289:15" pos:end="289:47">(<argument pos:start="289:16" pos:end="289:18"><expr pos:start="289:16" pos:end="289:18"><name pos:start="289:16" pos:end="289:18">dev</name></expr></argument>, <argument pos:start="289:21" pos:end="289:46"><expr pos:start="289:21" pos:end="289:46"><call pos:start="289:21" pos:end="289:46"><name pos:start="289:21" pos:end="289:33">aml_name_decl</name><argument_list pos:start="289:34" pos:end="289:46">(<argument pos:start="289:35" pos:end="289:40"><expr pos:start="289:35" pos:end="289:40"><literal type="string" pos:start="289:35" pos:end="289:40">"_CRS"</literal></expr></argument>, <argument pos:start="289:43" pos:end="289:45"><expr pos:start="289:43" pos:end="289:45"><name pos:start="289:43" pos:end="289:45">crs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="291:5" pos:end="291:30"><expr pos:start="291:5" pos:end="291:29"><call pos:start="291:5" pos:end="291:29"><name pos:start="291:5" pos:end="291:14">aml_append</name><argument_list pos:start="291:15" pos:end="291:29">(<argument pos:start="291:16" pos:end="291:23"><expr pos:start="291:16" pos:end="291:23"><name pos:start="291:16" pos:end="291:23">sb_scope</name></expr></argument>, <argument pos:start="291:26" pos:end="291:28"><expr pos:start="291:26" pos:end="291:28"><name pos:start="291:26" pos:end="291:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="293:5" pos:end="293:68">/* declare CPU hotplug MMIO region and PRS field to access it */</comment>

    <expr_stmt pos:start="295:5" pos:end="297:69"><expr pos:start="295:5" pos:end="297:68"><call pos:start="295:5" pos:end="297:68"><name pos:start="295:5" pos:end="295:14">aml_append</name><argument_list pos:start="295:15" pos:end="297:68">(<argument pos:start="295:16" pos:end="295:23"><expr pos:start="295:16" pos:end="295:23"><name pos:start="295:16" pos:end="295:23">sb_scope</name></expr></argument>, <argument pos:start="295:26" pos:end="297:67"><expr pos:start="295:26" pos:end="297:67"><call pos:start="295:26" pos:end="297:67"><name pos:start="295:26" pos:end="295:45">aml_operation_region</name><argument_list pos:start="295:46" pos:end="297:67">(

        <argument pos:start="297:9" pos:end="297:14"><expr pos:start="297:9" pos:end="297:14"><literal type="string" pos:start="297:9" pos:end="297:14">"PRST"</literal></expr></argument>, <argument pos:start="297:17" pos:end="297:29"><expr pos:start="297:17" pos:end="297:29"><name pos:start="297:17" pos:end="297:29">AML_SYSTEM_IO</name></expr></argument>, <argument pos:start="297:32" pos:end="297:47"><expr pos:start="297:32" pos:end="297:47"><call pos:start="297:32" pos:end="297:47"><name pos:start="297:32" pos:end="297:38">aml_int</name><argument_list pos:start="297:39" pos:end="297:47">(<argument pos:start="297:40" pos:end="297:46"><expr pos:start="297:40" pos:end="297:46"><name pos:start="297:40" pos:end="297:46">io_base</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="297:50" pos:end="297:66"><expr pos:start="297:50" pos:end="297:66"><name pos:start="297:50" pos:end="297:66">ACPI_GPE_PROC_LEN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:70"><expr pos:start="299:5" pos:end="299:69"><name pos:start="299:5" pos:end="299:9">field</name> <operator pos:start="299:11" pos:end="299:11">=</operator> <call pos:start="299:13" pos:end="299:69"><name pos:start="299:13" pos:end="299:21">aml_field</name><argument_list pos:start="299:22" pos:end="299:69">(<argument pos:start="299:23" pos:end="299:28"><expr pos:start="299:23" pos:end="299:28"><literal type="string" pos:start="299:23" pos:end="299:28">"PRST"</literal></expr></argument>, <argument pos:start="299:31" pos:end="299:42"><expr pos:start="299:31" pos:end="299:42"><name pos:start="299:31" pos:end="299:42">AML_BYTE_ACC</name></expr></argument>, <argument pos:start="299:45" pos:end="299:54"><expr pos:start="299:45" pos:end="299:54"><name pos:start="299:45" pos:end="299:54">AML_NOLOCK</name></expr></argument>, <argument pos:start="299:57" pos:end="299:68"><expr pos:start="299:57" pos:end="299:68"><name pos:start="299:57" pos:end="299:68">AML_PRESERVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="301:5" pos:end="301:51"><expr pos:start="301:5" pos:end="301:50"><call pos:start="301:5" pos:end="301:50"><name pos:start="301:5" pos:end="301:14">aml_append</name><argument_list pos:start="301:15" pos:end="301:50">(<argument pos:start="301:16" pos:end="301:20"><expr pos:start="301:16" pos:end="301:20"><name pos:start="301:16" pos:end="301:20">field</name></expr></argument>, <argument pos:start="301:23" pos:end="301:49"><expr pos:start="301:23" pos:end="301:49"><call pos:start="301:23" pos:end="301:49"><name pos:start="301:23" pos:end="301:37">aml_named_field</name><argument_list pos:start="301:38" pos:end="301:49">(<argument pos:start="301:39" pos:end="301:43"><expr pos:start="301:39" pos:end="301:43"><literal type="string" pos:start="301:39" pos:end="301:43">"PRS"</literal></expr></argument>, <argument pos:start="301:46" pos:end="301:48"><expr pos:start="301:46" pos:end="301:48"><literal type="number" pos:start="301:46" pos:end="301:48">256</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:32"><expr pos:start="303:5" pos:end="303:31"><call pos:start="303:5" pos:end="303:31"><name pos:start="303:5" pos:end="303:14">aml_append</name><argument_list pos:start="303:15" pos:end="303:31">(<argument pos:start="303:16" pos:end="303:23"><expr pos:start="303:16" pos:end="303:23"><name pos:start="303:16" pos:end="303:23">sb_scope</name></expr></argument>, <argument pos:start="303:26" pos:end="303:30"><expr pos:start="303:26" pos:end="303:30"><name pos:start="303:26" pos:end="303:30">field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="307:5" pos:end="307:51">/* build Processor object for each processor */</comment>

    <for pos:start="309:5" pos:end="361:5">for <control pos:start="309:9" pos:end="309:39">(<init pos:start="309:10" pos:end="309:15"><expr pos:start="309:10" pos:end="309:14"><name pos:start="309:10" pos:end="309:10">i</name> <operator pos:start="309:12" pos:end="309:12">=</operator> <literal type="number" pos:start="309:14" pos:end="309:14">0</literal></expr>;</init> <condition pos:start="309:17" pos:end="309:34"><expr pos:start="309:17" pos:end="309:33"><name pos:start="309:17" pos:end="309:17">i</name> <operator pos:start="309:19" pos:end="309:19">&lt;</operator> <name pos:start="309:21" pos:end="309:33"><name pos:start="309:21" pos:end="309:28">apic_ids</name><operator pos:start="309:29" pos:end="309:30">-&gt;</operator><name pos:start="309:31" pos:end="309:33">len</name></name></expr>;</condition> <incr pos:start="309:36" pos:end="309:38"><expr pos:start="309:36" pos:end="309:38"><name pos:start="309:36" pos:end="309:36">i</name><operator pos:start="309:37" pos:end="309:38">++</operator></expr></incr>)</control> <block pos:start="309:41" pos:end="361:5">{<block_content pos:start="311:9" pos:end="359:34">

        <decl_stmt pos:start="311:9" pos:end="311:48"><decl pos:start="311:9" pos:end="311:47"><type pos:start="311:9" pos:end="311:11"><name pos:start="311:9" pos:end="311:11">int</name></type> <name pos:start="311:13" pos:end="311:19">apic_id</name> <init pos:start="311:21" pos:end="311:47">= <expr pos:start="311:23" pos:end="311:47"><name pos:start="311:23" pos:end="311:39"><name pos:start="311:23" pos:end="311:30">apic_ids</name><operator pos:start="311:31" pos:end="311:32">-&gt;</operator><name pos:start="311:33" pos:end="311:36">cpus</name><index pos:start="311:37" pos:end="311:39">[<expr pos:start="311:38" pos:end="311:38"><name pos:start="311:38" pos:end="311:38">i</name></expr>]</index></name><operator pos:start="311:40" pos:end="311:40">.</operator><name pos:start="311:41" pos:end="311:47">arch_id</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="315:9" pos:end="315:52"><expr pos:start="315:9" pos:end="315:51"><call pos:start="315:9" pos:end="315:51"><name pos:start="315:9" pos:end="315:14">assert</name><argument_list pos:start="315:15" pos:end="315:51">(<argument pos:start="315:16" pos:end="315:50"><expr pos:start="315:16" pos:end="315:50"><name pos:start="315:16" pos:end="315:22">apic_id</name> <operator pos:start="315:24" pos:end="315:24">&lt;</operator> <name pos:start="315:26" pos:end="315:50">ACPI_CPU_HOTPLUG_ID_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="319:9" pos:end="319:57"><expr pos:start="319:9" pos:end="319:56"><name pos:start="319:9" pos:end="319:11">dev</name> <operator pos:start="319:13" pos:end="319:13">=</operator> <call pos:start="319:15" pos:end="319:56"><name pos:start="319:15" pos:end="319:27">aml_processor</name><argument_list pos:start="319:28" pos:end="319:56">(<argument pos:start="319:29" pos:end="319:29"><expr pos:start="319:29" pos:end="319:29"><name pos:start="319:29" pos:end="319:29">i</name></expr></argument>, <argument pos:start="319:32" pos:end="319:32"><expr pos:start="319:32" pos:end="319:32"><literal type="number" pos:start="319:32" pos:end="319:32">0</literal></expr></argument>, <argument pos:start="319:35" pos:end="319:35"><expr pos:start="319:35" pos:end="319:35"><literal type="number" pos:start="319:35" pos:end="319:35">0</literal></expr></argument>, <argument pos:start="319:38" pos:end="319:46"><expr pos:start="319:38" pos:end="319:46"><literal type="string" pos:start="319:38" pos:end="319:46">"CP%.02X"</literal></expr></argument>, <argument pos:start="319:49" pos:end="319:55"><expr pos:start="319:49" pos:end="319:55"><name pos:start="319:49" pos:end="319:55">apic_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="323:9" pos:end="323:58"><expr pos:start="323:9" pos:end="323:57"><name pos:start="323:9" pos:end="323:14">method</name> <operator pos:start="323:16" pos:end="323:16">=</operator> <call pos:start="323:18" pos:end="323:57"><name pos:start="323:18" pos:end="323:27">aml_method</name><argument_list pos:start="323:28" pos:end="323:57">(<argument pos:start="323:29" pos:end="323:34"><expr pos:start="323:29" pos:end="323:34"><literal type="string" pos:start="323:29" pos:end="323:34">"_MAT"</literal></expr></argument>, <argument pos:start="323:37" pos:end="323:37"><expr pos:start="323:37" pos:end="323:37"><literal type="number" pos:start="323:37" pos:end="323:37">0</literal></expr></argument>, <argument pos:start="323:40" pos:end="323:56"><expr pos:start="323:40" pos:end="323:56"><name pos:start="323:40" pos:end="323:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="325:9" pos:end="329:11"><expr pos:start="325:9" pos:end="329:10"><call pos:start="325:9" pos:end="329:10"><name pos:start="325:9" pos:end="325:18">aml_append</name><argument_list pos:start="325:19" pos:end="329:10">(<argument pos:start="325:20" pos:end="325:25"><expr pos:start="325:20" pos:end="325:25"><name pos:start="325:20" pos:end="325:25">method</name></expr></argument>,

            <argument pos:start="327:13" pos:end="329:9"><expr pos:start="327:13" pos:end="329:9"><call pos:start="327:13" pos:end="329:9"><name pos:start="327:13" pos:end="327:22">aml_return</name><argument_list pos:start="327:23" pos:end="329:9">(<argument pos:start="327:24" pos:end="327:78"><expr pos:start="327:24" pos:end="327:78"><call pos:start="327:24" pos:end="327:78"><name pos:start="327:24" pos:end="327:32">aml_call2</name><argument_list pos:start="327:33" pos:end="327:78">(<argument pos:start="327:34" pos:end="327:47"><expr pos:start="327:34" pos:end="327:47"><name pos:start="327:34" pos:end="327:47">CPU_MAT_METHOD</name></expr></argument>, <argument pos:start="327:50" pos:end="327:65"><expr pos:start="327:50" pos:end="327:65"><call pos:start="327:50" pos:end="327:65"><name pos:start="327:50" pos:end="327:56">aml_int</name><argument_list pos:start="327:57" pos:end="327:65">(<argument pos:start="327:58" pos:end="327:64"><expr pos:start="327:58" pos:end="327:64"><name pos:start="327:58" pos:end="327:64">apic_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="327:68" pos:end="327:77"><expr pos:start="327:68" pos:end="327:77"><call pos:start="327:68" pos:end="327:77"><name pos:start="327:68" pos:end="327:74">aml_int</name><argument_list pos:start="327:75" pos:end="327:77">(<argument pos:start="327:76" pos:end="327:76"><expr pos:start="327:76" pos:end="327:76"><name pos:start="327:76" pos:end="327:76">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:32"><expr pos:start="331:9" pos:end="331:31"><call pos:start="331:9" pos:end="331:31"><name pos:start="331:9" pos:end="331:18">aml_append</name><argument_list pos:start="331:19" pos:end="331:31">(<argument pos:start="331:20" pos:end="331:22"><expr pos:start="331:20" pos:end="331:22"><name pos:start="331:20" pos:end="331:22">dev</name></expr></argument>, <argument pos:start="331:25" pos:end="331:30"><expr pos:start="331:25" pos:end="331:30"><name pos:start="331:25" pos:end="331:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="335:9" pos:end="335:58"><expr pos:start="335:9" pos:end="335:57"><name pos:start="335:9" pos:end="335:14">method</name> <operator pos:start="335:16" pos:end="335:16">=</operator> <call pos:start="335:18" pos:end="335:57"><name pos:start="335:18" pos:end="335:27">aml_method</name><argument_list pos:start="335:28" pos:end="335:57">(<argument pos:start="335:29" pos:end="335:34"><expr pos:start="335:29" pos:end="335:34"><literal type="string" pos:start="335:29" pos:end="335:34">"_STA"</literal></expr></argument>, <argument pos:start="335:37" pos:end="335:37"><expr pos:start="335:37" pos:end="335:37"><literal type="number" pos:start="335:37" pos:end="335:37">0</literal></expr></argument>, <argument pos:start="335:40" pos:end="335:56"><expr pos:start="335:40" pos:end="335:56"><name pos:start="335:40" pos:end="335:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="339:72"><expr pos:start="337:9" pos:end="339:71"><call pos:start="337:9" pos:end="339:71"><name pos:start="337:9" pos:end="337:18">aml_append</name><argument_list pos:start="337:19" pos:end="339:71">(<argument pos:start="337:20" pos:end="337:25"><expr pos:start="337:20" pos:end="337:25"><name pos:start="337:20" pos:end="337:25">method</name></expr></argument>,

            <argument pos:start="339:13" pos:end="339:70"><expr pos:start="339:13" pos:end="339:70"><call pos:start="339:13" pos:end="339:70"><name pos:start="339:13" pos:end="339:22">aml_return</name><argument_list pos:start="339:23" pos:end="339:70">(<argument pos:start="339:24" pos:end="339:69"><expr pos:start="339:24" pos:end="339:69"><call pos:start="339:24" pos:end="339:69"><name pos:start="339:24" pos:end="339:32">aml_call1</name><argument_list pos:start="339:33" pos:end="339:69">(<argument pos:start="339:34" pos:end="339:50"><expr pos:start="339:34" pos:end="339:50"><name pos:start="339:34" pos:end="339:50">CPU_STATUS_METHOD</name></expr></argument>, <argument pos:start="339:53" pos:end="339:68"><expr pos:start="339:53" pos:end="339:68"><call pos:start="339:53" pos:end="339:68"><name pos:start="339:53" pos:end="339:59">aml_int</name><argument_list pos:start="339:60" pos:end="339:68">(<argument pos:start="339:61" pos:end="339:67"><expr pos:start="339:61" pos:end="339:67"><name pos:start="339:61" pos:end="339:67">apic_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="341:9" pos:end="341:32"><expr pos:start="341:9" pos:end="341:31"><call pos:start="341:9" pos:end="341:31"><name pos:start="341:9" pos:end="341:18">aml_append</name><argument_list pos:start="341:19" pos:end="341:31">(<argument pos:start="341:20" pos:end="341:22"><expr pos:start="341:20" pos:end="341:22"><name pos:start="341:20" pos:end="341:22">dev</name></expr></argument>, <argument pos:start="341:25" pos:end="341:30"><expr pos:start="341:25" pos:end="341:30"><name pos:start="341:25" pos:end="341:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="345:9" pos:end="345:58"><expr pos:start="345:9" pos:end="345:57"><name pos:start="345:9" pos:end="345:14">method</name> <operator pos:start="345:16" pos:end="345:16">=</operator> <call pos:start="345:18" pos:end="345:57"><name pos:start="345:18" pos:end="345:27">aml_method</name><argument_list pos:start="345:28" pos:end="345:57">(<argument pos:start="345:29" pos:end="345:34"><expr pos:start="345:29" pos:end="345:34"><literal type="string" pos:start="345:29" pos:end="345:34">"_EJ0"</literal></expr></argument>, <argument pos:start="345:37" pos:end="345:37"><expr pos:start="345:37" pos:end="345:37"><literal type="number" pos:start="345:37" pos:end="345:37">1</literal></expr></argument>, <argument pos:start="345:40" pos:end="345:56"><expr pos:start="345:40" pos:end="345:56"><name pos:start="345:40" pos:end="345:56">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="347:9" pos:end="353:10"><expr pos:start="347:9" pos:end="353:9"><call pos:start="347:9" pos:end="353:9"><name pos:start="347:9" pos:end="347:18">aml_append</name><argument_list pos:start="347:19" pos:end="353:9">(<argument pos:start="347:20" pos:end="347:25"><expr pos:start="347:20" pos:end="347:25"><name pos:start="347:20" pos:end="347:25">method</name></expr></argument>,

            <argument pos:start="349:13" pos:end="351:28"><expr pos:start="349:13" pos:end="351:28"><call pos:start="349:13" pos:end="351:28"><name pos:start="349:13" pos:end="349:22">aml_return</name><argument_list pos:start="349:23" pos:end="351:28">(<argument pos:start="349:24" pos:end="351:27"><expr pos:start="349:24" pos:end="351:27"><call pos:start="349:24" pos:end="351:27"><name pos:start="349:24" pos:end="349:32">aml_call2</name><argument_list pos:start="349:33" pos:end="351:27">(<argument pos:start="349:34" pos:end="349:49"><expr pos:start="349:34" pos:end="349:49"><name pos:start="349:34" pos:end="349:49">CPU_EJECT_METHOD</name></expr></argument>, <argument pos:start="349:52" pos:end="349:67"><expr pos:start="349:52" pos:end="349:67"><call pos:start="349:52" pos:end="349:67"><name pos:start="349:52" pos:end="349:58">aml_int</name><argument_list pos:start="349:59" pos:end="349:67">(<argument pos:start="349:60" pos:end="349:66"><expr pos:start="349:60" pos:end="349:66"><name pos:start="349:60" pos:end="349:66">apic_id</name></expr></argument>)</argument_list></call></expr></argument>,

                <argument pos:start="351:17" pos:end="351:26"><expr pos:start="351:17" pos:end="351:26"><call pos:start="351:17" pos:end="351:26"><name pos:start="351:17" pos:end="351:23">aml_arg</name><argument_list pos:start="351:24" pos:end="351:26">(<argument pos:start="351:25" pos:end="351:25"><expr pos:start="351:25" pos:end="351:25"><literal type="number" pos:start="351:25" pos:end="351:25">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="355:9" pos:end="355:32"><expr pos:start="355:9" pos:end="355:31"><call pos:start="355:9" pos:end="355:31"><name pos:start="355:9" pos:end="355:18">aml_append</name><argument_list pos:start="355:19" pos:end="355:31">(<argument pos:start="355:20" pos:end="355:22"><expr pos:start="355:20" pos:end="355:22"><name pos:start="355:20" pos:end="355:22">dev</name></expr></argument>, <argument pos:start="355:25" pos:end="355:30"><expr pos:start="355:25" pos:end="355:30"><name pos:start="355:25" pos:end="355:30">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="359:9" pos:end="359:34"><expr pos:start="359:9" pos:end="359:33"><call pos:start="359:9" pos:end="359:33"><name pos:start="359:9" pos:end="359:18">aml_append</name><argument_list pos:start="359:19" pos:end="359:33">(<argument pos:start="359:20" pos:end="359:27"><expr pos:start="359:20" pos:end="359:27"><name pos:start="359:20" pos:end="359:27">sb_scope</name></expr></argument>, <argument pos:start="359:30" pos:end="359:32"><expr pos:start="359:30" pos:end="359:32"><name pos:start="359:30" pos:end="359:32">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="365:5" pos:end="369:7">/* build this code:

     *   Method(NTFY, 2) {If (LEqual(Arg0, 0x00)) {Notify(CP00, Arg1)} ...}

     */</comment>

    <comment type="block" pos:start="371:5" pos:end="371:24">/* Arg0 = APIC ID */</comment>

    <expr_stmt pos:start="373:5" pos:end="373:65"><expr pos:start="373:5" pos:end="373:64"><name pos:start="373:5" pos:end="373:10">method</name> <operator pos:start="373:12" pos:end="373:12">=</operator> <call pos:start="373:14" pos:end="373:64"><name pos:start="373:14" pos:end="373:23">aml_method</name><argument_list pos:start="373:24" pos:end="373:64">(<argument pos:start="373:25" pos:end="373:41"><expr pos:start="373:25" pos:end="373:41"><name pos:start="373:25" pos:end="373:41">AML_NOTIFY_METHOD</name></expr></argument>, <argument pos:start="373:44" pos:end="373:44"><expr pos:start="373:44" pos:end="373:44"><literal type="number" pos:start="373:44" pos:end="373:44">2</literal></expr></argument>, <argument pos:start="373:47" pos:end="373:63"><expr pos:start="373:47" pos:end="373:63"><name pos:start="373:47" pos:end="373:63">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="375:5" pos:end="391:5">for <control pos:start="375:9" pos:end="375:39">(<init pos:start="375:10" pos:end="375:15"><expr pos:start="375:10" pos:end="375:14"><name pos:start="375:10" pos:end="375:10">i</name> <operator pos:start="375:12" pos:end="375:12">=</operator> <literal type="number" pos:start="375:14" pos:end="375:14">0</literal></expr>;</init> <condition pos:start="375:17" pos:end="375:34"><expr pos:start="375:17" pos:end="375:33"><name pos:start="375:17" pos:end="375:17">i</name> <operator pos:start="375:19" pos:end="375:19">&lt;</operator> <name pos:start="375:21" pos:end="375:33"><name pos:start="375:21" pos:end="375:28">apic_ids</name><operator pos:start="375:29" pos:end="375:30">-&gt;</operator><name pos:start="375:31" pos:end="375:33">len</name></name></expr>;</condition> <incr pos:start="375:36" pos:end="375:38"><expr pos:start="375:36" pos:end="375:38"><name pos:start="375:36" pos:end="375:36">i</name><operator pos:start="375:37" pos:end="375:38">++</operator></expr></incr>)</control> <block pos:start="375:41" pos:end="391:5">{<block_content pos:start="377:9" pos:end="389:35">

        <decl_stmt pos:start="377:9" pos:end="377:48"><decl pos:start="377:9" pos:end="377:47"><type pos:start="377:9" pos:end="377:11"><name pos:start="377:9" pos:end="377:11">int</name></type> <name pos:start="377:13" pos:end="377:19">apic_id</name> <init pos:start="377:21" pos:end="377:47">= <expr pos:start="377:23" pos:end="377:47"><name pos:start="377:23" pos:end="377:39"><name pos:start="377:23" pos:end="377:30">apic_ids</name><operator pos:start="377:31" pos:end="377:32">-&gt;</operator><name pos:start="377:33" pos:end="377:36">cpus</name><index pos:start="377:37" pos:end="377:39">[<expr pos:start="377:38" pos:end="377:38"><name pos:start="377:38" pos:end="377:38">i</name></expr>]</index></name><operator pos:start="377:40" pos:end="377:40">.</operator><name pos:start="377:41" pos:end="377:47">arch_id</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="381:9" pos:end="381:65"><expr pos:start="381:9" pos:end="381:64"><name pos:start="381:9" pos:end="381:14">if_ctx</name> <operator pos:start="381:16" pos:end="381:16">=</operator> <call pos:start="381:18" pos:end="381:64"><name pos:start="381:18" pos:end="381:23">aml_if</name><argument_list pos:start="381:24" pos:end="381:64">(<argument pos:start="381:25" pos:end="381:63"><expr pos:start="381:25" pos:end="381:63"><call pos:start="381:25" pos:end="381:63"><name pos:start="381:25" pos:end="381:33">aml_equal</name><argument_list pos:start="381:34" pos:end="381:63">(<argument pos:start="381:35" pos:end="381:44"><expr pos:start="381:35" pos:end="381:44"><call pos:start="381:35" pos:end="381:44"><name pos:start="381:35" pos:end="381:41">aml_arg</name><argument_list pos:start="381:42" pos:end="381:44">(<argument pos:start="381:43" pos:end="381:43"><expr pos:start="381:43" pos:end="381:43"><literal type="number" pos:start="381:43" pos:end="381:43">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="381:47" pos:end="381:62"><expr pos:start="381:47" pos:end="381:62"><call pos:start="381:47" pos:end="381:62"><name pos:start="381:47" pos:end="381:53">aml_int</name><argument_list pos:start="381:54" pos:end="381:62">(<argument pos:start="381:55" pos:end="381:61"><expr pos:start="381:55" pos:end="381:61"><name pos:start="381:55" pos:end="381:61">apic_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="387:10"><expr pos:start="383:9" pos:end="387:9"><call pos:start="383:9" pos:end="387:9"><name pos:start="383:9" pos:end="383:18">aml_append</name><argument_list pos:start="383:19" pos:end="387:9">(<argument pos:start="383:20" pos:end="383:25"><expr pos:start="383:20" pos:end="383:25"><name pos:start="383:20" pos:end="383:25">if_ctx</name></expr></argument>,

            <argument pos:start="385:13" pos:end="385:64"><expr pos:start="385:13" pos:end="385:64"><call pos:start="385:13" pos:end="385:64"><name pos:start="385:13" pos:end="385:22">aml_notify</name><argument_list pos:start="385:23" pos:end="385:64">(<argument pos:start="385:24" pos:end="385:51"><expr pos:start="385:24" pos:end="385:51"><call pos:start="385:24" pos:end="385:51"><name pos:start="385:24" pos:end="385:31">aml_name</name><argument_list pos:start="385:32" pos:end="385:51">(<argument pos:start="385:33" pos:end="385:41"><expr pos:start="385:33" pos:end="385:41"><literal type="string" pos:start="385:33" pos:end="385:41">"CP%.02X"</literal></expr></argument>, <argument pos:start="385:44" pos:end="385:50"><expr pos:start="385:44" pos:end="385:50"><name pos:start="385:44" pos:end="385:50">apic_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="385:54" pos:end="385:63"><expr pos:start="385:54" pos:end="385:63"><call pos:start="385:54" pos:end="385:63"><name pos:start="385:54" pos:end="385:60">aml_arg</name><argument_list pos:start="385:61" pos:end="385:63">(<argument pos:start="385:62" pos:end="385:62"><expr pos:start="385:62" pos:end="385:62"><literal type="number" pos:start="385:62" pos:end="385:62">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>

        )</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:35"><expr pos:start="389:9" pos:end="389:34"><call pos:start="389:9" pos:end="389:34"><name pos:start="389:9" pos:end="389:18">aml_append</name><argument_list pos:start="389:19" pos:end="389:34">(<argument pos:start="389:20" pos:end="389:25"><expr pos:start="389:20" pos:end="389:25"><name pos:start="389:20" pos:end="389:25">method</name></expr></argument>, <argument pos:start="389:28" pos:end="389:33"><expr pos:start="389:28" pos:end="389:33"><name pos:start="389:28" pos:end="389:33">if_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="393:5" pos:end="393:33"><expr pos:start="393:5" pos:end="393:32"><call pos:start="393:5" pos:end="393:32"><name pos:start="393:5" pos:end="393:14">aml_append</name><argument_list pos:start="393:15" pos:end="393:32">(<argument pos:start="393:16" pos:end="393:23"><expr pos:start="393:16" pos:end="393:23"><name pos:start="393:16" pos:end="393:23">sb_scope</name></expr></argument>, <argument pos:start="393:26" pos:end="393:31"><expr pos:start="393:26" pos:end="393:31"><name pos:start="393:26" pos:end="393:31">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="397:5" pos:end="409:7">/* build "Name(CPON, Package() { One, One, ..., Zero, Zero, ... })"

     *

     * Note: The ability to create variable-sized packages was first

     * introduced in ACPI 2.0. ACPI 1.0 only allowed fixed-size packages

     * ith up to 255 elements. Windows guests up to win2k8 fail when

     * VarPackageOp is used.

     */</comment>

    <expr_stmt pos:start="411:5" pos:end="413:75"><expr pos:start="411:5" pos:end="413:74"><name pos:start="411:5" pos:end="411:7">pkg</name> <operator pos:start="411:9" pos:end="411:9">=</operator> <ternary pos:start="411:11" pos:end="413:74"><condition pos:start="411:11" pos:end="411:38"><expr pos:start="411:11" pos:end="411:36"><name pos:start="411:11" pos:end="411:29"><name pos:start="411:11" pos:end="411:14">pcms</name><operator pos:start="411:15" pos:end="411:16">-&gt;</operator><name pos:start="411:17" pos:end="411:29">apic_id_limit</name></name> <operator pos:start="411:31" pos:end="411:32">&lt;=</operator> <literal type="number" pos:start="411:34" pos:end="411:36">255</literal></expr> ?</condition><then pos:start="411:40" pos:end="411:71"> <expr pos:start="411:40" pos:end="411:71"><call pos:start="411:40" pos:end="411:71"><name pos:start="411:40" pos:end="411:50">aml_package</name><argument_list pos:start="411:51" pos:end="411:71">(<argument pos:start="411:52" pos:end="411:70"><expr pos:start="411:52" pos:end="411:70"><name pos:start="411:52" pos:end="411:70"><name pos:start="411:52" pos:end="411:55">pcms</name><operator pos:start="411:56" pos:end="411:57">-&gt;</operator><name pos:start="411:58" pos:end="411:70">apic_id_limit</name></name></expr></argument>)</argument_list></call></expr> </then><else pos:start="411:73" pos:end="413:74">:

                                       <expr pos:start="413:40" pos:end="413:74"><call pos:start="413:40" pos:end="413:74"><name pos:start="413:40" pos:end="413:53">aml_varpackage</name><argument_list pos:start="413:54" pos:end="413:74">(<argument pos:start="413:55" pos:end="413:73"><expr pos:start="413:55" pos:end="413:73"><name pos:start="413:55" pos:end="413:73"><name pos:start="413:55" pos:end="413:58">pcms</name><operator pos:start="413:59" pos:end="413:60">-&gt;</operator><name pos:start="413:61" pos:end="413:73">apic_id_limit</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>



    <for pos:start="417:5" pos:end="433:5">for <control pos:start="417:9" pos:end="417:53">(<init pos:start="417:10" pos:end="417:29"><expr pos:start="417:10" pos:end="417:14"><name pos:start="417:10" pos:end="417:10">i</name> <operator pos:start="417:12" pos:end="417:12">=</operator> <literal type="number" pos:start="417:14" pos:end="417:14">0</literal></expr><operator pos:start="417:15" pos:end="417:15">,</operator> <expr pos:start="417:17" pos:end="417:28"><name pos:start="417:17" pos:end="417:24">apic_idx</name> <operator pos:start="417:26" pos:end="417:26">=</operator> <literal type="number" pos:start="417:28" pos:end="417:28">0</literal></expr>;</init> <condition pos:start="417:31" pos:end="417:48"><expr pos:start="417:31" pos:end="417:47"><name pos:start="417:31" pos:end="417:31">i</name> <operator pos:start="417:33" pos:end="417:33">&lt;</operator> <name pos:start="417:35" pos:end="417:47"><name pos:start="417:35" pos:end="417:42">apic_ids</name><operator pos:start="417:43" pos:end="417:44">-&gt;</operator><name pos:start="417:45" pos:end="417:47">len</name></name></expr>;</condition> <incr pos:start="417:50" pos:end="417:52"><expr pos:start="417:50" pos:end="417:52"><name pos:start="417:50" pos:end="417:50">i</name><operator pos:start="417:51" pos:end="417:52">++</operator></expr></incr>)</control> <block pos:start="417:55" pos:end="433:5">{<block_content pos:start="419:9" pos:end="431:31">

        <decl_stmt pos:start="419:9" pos:end="419:48"><decl pos:start="419:9" pos:end="419:47"><type pos:start="419:9" pos:end="419:11"><name pos:start="419:9" pos:end="419:11">int</name></type> <name pos:start="419:13" pos:end="419:19">apic_id</name> <init pos:start="419:21" pos:end="419:47">= <expr pos:start="419:23" pos:end="419:47"><name pos:start="419:23" pos:end="419:39"><name pos:start="419:23" pos:end="419:30">apic_ids</name><operator pos:start="419:31" pos:end="419:32">-&gt;</operator><name pos:start="419:33" pos:end="419:36">cpus</name><index pos:start="419:37" pos:end="419:39">[<expr pos:start="419:38" pos:end="419:38"><name pos:start="419:38" pos:end="419:38">i</name></expr>]</index></name><operator pos:start="419:40" pos:end="419:40">.</operator><name pos:start="419:41" pos:end="419:47">arch_id</name></expr></init></decl>;</decl_stmt>



        <for pos:start="423:9" pos:end="427:9">for <control pos:start="423:13" pos:end="423:46">(<init pos:start="423:14" pos:end="423:14">;</init> <condition pos:start="423:16" pos:end="423:34"><expr pos:start="423:16" pos:end="423:33"><name pos:start="423:16" pos:end="423:23">apic_idx</name> <operator pos:start="423:25" pos:end="423:25">&lt;</operator> <name pos:start="423:27" pos:end="423:33">apic_id</name></expr>;</condition> <incr pos:start="423:36" pos:end="423:45"><expr pos:start="423:36" pos:end="423:45"><name pos:start="423:36" pos:end="423:43">apic_idx</name><operator pos:start="423:44" pos:end="423:45">++</operator></expr></incr>)</control> <block pos:start="423:48" pos:end="427:9">{<block_content pos:start="425:13" pos:end="425:40">

            <expr_stmt pos:start="425:13" pos:end="425:40"><expr pos:start="425:13" pos:end="425:39"><call pos:start="425:13" pos:end="425:39"><name pos:start="425:13" pos:end="425:22">aml_append</name><argument_list pos:start="425:23" pos:end="425:39">(<argument pos:start="425:24" pos:end="425:26"><expr pos:start="425:24" pos:end="425:26"><name pos:start="425:24" pos:end="425:26">pkg</name></expr></argument>, <argument pos:start="425:29" pos:end="425:38"><expr pos:start="425:29" pos:end="425:38"><call pos:start="425:29" pos:end="425:38"><name pos:start="425:29" pos:end="425:35">aml_int</name><argument_list pos:start="425:36" pos:end="425:38">(<argument pos:start="425:37" pos:end="425:37"><expr pos:start="425:37" pos:end="425:37"><literal type="number" pos:start="425:37" pos:end="425:37">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="429:9" pos:end="429:64"><expr pos:start="429:9" pos:end="429:63"><call pos:start="429:9" pos:end="429:63"><name pos:start="429:9" pos:end="429:18">aml_append</name><argument_list pos:start="429:19" pos:end="429:63">(<argument pos:start="429:20" pos:end="429:22"><expr pos:start="429:20" pos:end="429:22"><name pos:start="429:20" pos:end="429:22">pkg</name></expr></argument>, <argument pos:start="429:25" pos:end="429:62"><expr pos:start="429:25" pos:end="429:62"><call pos:start="429:25" pos:end="429:62"><name pos:start="429:25" pos:end="429:31">aml_int</name><argument_list pos:start="429:32" pos:end="429:62">(<argument pos:start="429:33" pos:end="429:61"><expr pos:start="429:33" pos:end="429:61"><ternary pos:start="429:33" pos:end="429:61"><condition pos:start="429:33" pos:end="429:55"><expr pos:start="429:33" pos:end="429:53"><name pos:start="429:33" pos:end="429:49"><name pos:start="429:33" pos:end="429:40">apic_ids</name><operator pos:start="429:41" pos:end="429:42">-&gt;</operator><name pos:start="429:43" pos:end="429:46">cpus</name><index pos:start="429:47" pos:end="429:49">[<expr pos:start="429:48" pos:end="429:48"><name pos:start="429:48" pos:end="429:48">i</name></expr>]</index></name><operator pos:start="429:50" pos:end="429:50">.</operator><name pos:start="429:51" pos:end="429:53">cpu</name></expr> ?</condition><then pos:start="429:57" pos:end="429:57"> <expr pos:start="429:57" pos:end="429:57"><literal type="number" pos:start="429:57" pos:end="429:57">1</literal></expr> </then><else pos:start="429:59" pos:end="429:61">: <expr pos:start="429:61" pos:end="429:61"><literal type="number" pos:start="429:61" pos:end="429:61">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="431:9" pos:end="431:31"><expr pos:start="431:9" pos:end="431:30"><name pos:start="431:9" pos:end="431:16">apic_idx</name> <operator pos:start="431:18" pos:end="431:18">=</operator> <name pos:start="431:20" pos:end="431:26">apic_id</name> <operator pos:start="431:28" pos:end="431:28">+</operator> <literal type="number" pos:start="431:30" pos:end="431:30">1</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="435:5" pos:end="435:60"><expr pos:start="435:5" pos:end="435:59"><call pos:start="435:5" pos:end="435:59"><name pos:start="435:5" pos:end="435:14">aml_append</name><argument_list pos:start="435:15" pos:end="435:59">(<argument pos:start="435:16" pos:end="435:23"><expr pos:start="435:16" pos:end="435:23"><name pos:start="435:16" pos:end="435:23">sb_scope</name></expr></argument>, <argument pos:start="435:26" pos:end="435:58"><expr pos:start="435:26" pos:end="435:58"><call pos:start="435:26" pos:end="435:58"><name pos:start="435:26" pos:end="435:38">aml_name_decl</name><argument_list pos:start="435:39" pos:end="435:58">(<argument pos:start="435:40" pos:end="435:52"><expr pos:start="435:40" pos:end="435:52"><name pos:start="435:40" pos:end="435:52">CPU_ON_BITMAP</name></expr></argument>, <argument pos:start="435:55" pos:end="435:57"><expr pos:start="435:55" pos:end="435:57"><name pos:start="435:55" pos:end="435:57">pkg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="437:5" pos:end="437:21"><expr pos:start="437:5" pos:end="437:20"><call pos:start="437:5" pos:end="437:20"><name pos:start="437:5" pos:end="437:10">g_free</name><argument_list pos:start="437:11" pos:end="437:20">(<argument pos:start="437:12" pos:end="437:19"><expr pos:start="437:12" pos:end="437:19"><name pos:start="437:12" pos:end="437:19">apic_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="441:5" pos:end="441:30"><expr pos:start="441:5" pos:end="441:29"><call pos:start="441:5" pos:end="441:29"><name pos:start="441:5" pos:end="441:14">aml_append</name><argument_list pos:start="441:15" pos:end="441:29">(<argument pos:start="441:16" pos:end="441:18"><expr pos:start="441:16" pos:end="441:18"><name pos:start="441:16" pos:end="441:18">ctx</name></expr></argument>, <argument pos:start="441:21" pos:end="441:28"><expr pos:start="441:21" pos:end="441:28"><name pos:start="441:21" pos:end="441:28">sb_scope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="445:5" pos:end="445:61"><expr pos:start="445:5" pos:end="445:60"><name pos:start="445:5" pos:end="445:10">method</name> <operator pos:start="445:12" pos:end="445:12">=</operator> <call pos:start="445:14" pos:end="445:60"><name pos:start="445:14" pos:end="445:23">aml_method</name><argument_list pos:start="445:24" pos:end="445:60">(<argument pos:start="445:25" pos:end="445:37"><expr pos:start="445:25" pos:end="445:37"><literal type="string" pos:start="445:25" pos:end="445:37">"\\_GPE._E02"</literal></expr></argument>, <argument pos:start="445:40" pos:end="445:40"><expr pos:start="445:40" pos:end="445:40"><literal type="number" pos:start="445:40" pos:end="445:40">0</literal></expr></argument>, <argument pos:start="445:43" pos:end="445:59"><expr pos:start="445:43" pos:end="445:59"><name pos:start="445:43" pos:end="445:59">AML_NOTSERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="447:5" pos:end="447:60"><expr pos:start="447:5" pos:end="447:59"><call pos:start="447:5" pos:end="447:59"><name pos:start="447:5" pos:end="447:14">aml_append</name><argument_list pos:start="447:15" pos:end="447:59">(<argument pos:start="447:16" pos:end="447:21"><expr pos:start="447:16" pos:end="447:21"><name pos:start="447:16" pos:end="447:21">method</name></expr></argument>, <argument pos:start="447:24" pos:end="447:58"><expr pos:start="447:24" pos:end="447:58"><call pos:start="447:24" pos:end="447:58"><name pos:start="447:24" pos:end="447:32">aml_call0</name><argument_list pos:start="447:33" pos:end="447:58">(<argument pos:start="447:34" pos:end="447:57"><expr pos:start="447:34" pos:end="447:57"><literal type="string" pos:start="447:34" pos:end="447:41">"\\_SB."</literal> <name pos:start="447:43" pos:end="447:57">CPU_SCAN_METHOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="449:5" pos:end="449:28"><expr pos:start="449:5" pos:end="449:27"><call pos:start="449:5" pos:end="449:27"><name pos:start="449:5" pos:end="449:14">aml_append</name><argument_list pos:start="449:15" pos:end="449:27">(<argument pos:start="449:16" pos:end="449:18"><expr pos:start="449:16" pos:end="449:18"><name pos:start="449:16" pos:end="449:18">ctx</name></expr></argument>, <argument pos:start="449:21" pos:end="449:26"><expr pos:start="449:21" pos:end="449:26"><name pos:start="449:21" pos:end="449:26">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
