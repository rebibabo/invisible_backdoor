<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21310.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">uint64_t</name></type> <name pos:start="1:17" pos:end="1:30">omap_tcmi_read</name><parameter_list pos:start="1:31" pos:end="3:45">(<parameter pos:start="1:32" pos:end="1:43"><decl pos:start="1:32" pos:end="1:43"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:35">void</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:43">opaque</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:68"><decl pos:start="1:46" pos:end="1:68"><type pos:start="1:46" pos:end="1:68"><name pos:start="1:46" pos:end="1:63">target_phys_addr_t</name></type> <name pos:start="1:65" pos:end="1:68">addr</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:44"><decl pos:start="3:32" pos:end="3:44"><type pos:start="3:32" pos:end="3:44"><name pos:start="3:32" pos:end="3:39">unsigned</name></type> <name pos:start="3:41" pos:end="3:44">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="73:1">{<block_content pos:start="7:5" pos:end="71:13">

    <decl_stmt pos:start="7:5" pos:end="7:68"><decl pos:start="7:5" pos:end="7:67"><type pos:start="7:5" pos:end="7:29"><name pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:27">omap_mpu_state_s</name></name> <modifier pos:start="7:29" pos:end="7:29">*</modifier></type><name pos:start="7:30" pos:end="7:30">s</name> <init pos:start="7:32" pos:end="7:67">= <expr pos:start="7:34" pos:end="7:67"><operator pos:start="7:34" pos:end="7:34">(</operator>struct <name pos:start="7:42" pos:end="7:57">omap_mpu_state_s</name> <operator pos:start="7:59" pos:end="7:59">*</operator><operator pos:start="7:60" pos:end="7:60">)</operator> <name pos:start="7:62" pos:end="7:67">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="17:5"><if pos:start="13:5" pos:end="17:5">if <condition pos:start="13:8" pos:end="13:18">(<expr pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:12">size</name> <operator pos:start="13:14" pos:end="13:15">!=</operator> <literal type="number" pos:start="13:17" pos:end="13:17">4</literal></expr>)</condition> <block pos:start="13:20" pos:end="17:5">{<block_content pos:start="15:9" pos:end="15:50">

        <return pos:start="15:9" pos:end="15:50">return <expr pos:start="15:16" pos:end="15:49"><call pos:start="15:16" pos:end="15:49"><name pos:start="15:16" pos:end="15:35">omap_badwidth_read32</name><argument_list pos:start="15:36" pos:end="15:49">(<argument pos:start="15:37" pos:end="15:42"><expr pos:start="15:37" pos:end="15:42"><name pos:start="15:37" pos:end="15:42">opaque</name></expr></argument>, <argument pos:start="15:45" pos:end="15:48"><expr pos:start="15:45" pos:end="15:48"><name pos:start="15:45" pos:end="15:48">addr</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="21:5" pos:end="65:5">switch <condition pos:start="21:12" pos:end="21:17">(<expr pos:start="21:13" pos:end="21:16"><name pos:start="21:13" pos:end="21:16">addr</name></expr>)</condition> <block pos:start="21:19" pos:end="65:5">{<block_content pos:start="23:5" pos:end="63:19">

    <case pos:start="23:5" pos:end="23:14">case <expr pos:start="23:10" pos:end="23:13"><literal type="number" pos:start="23:10" pos:end="23:13">0x00</literal></expr>:</case>	<comment type="block" pos:start="23:17" pos:end="23:31">/* IMIF_PRIO */</comment>

    <case pos:start="25:5" pos:end="25:14">case <expr pos:start="25:10" pos:end="25:13"><literal type="number" pos:start="25:10" pos:end="25:13">0x04</literal></expr>:</case>	<comment type="block" pos:start="25:17" pos:end="25:32">/* EMIFS_PRIO */</comment>

    <case pos:start="27:5" pos:end="27:14">case <expr pos:start="27:10" pos:end="27:13"><literal type="number" pos:start="27:10" pos:end="27:13">0x08</literal></expr>:</case>	<comment type="block" pos:start="27:17" pos:end="27:32">/* EMIFF_PRIO */</comment>

    <case pos:start="29:5" pos:end="29:14">case <expr pos:start="29:10" pos:end="29:13"><literal type="number" pos:start="29:10" pos:end="29:13">0x0c</literal></expr>:</case>	<comment type="block" pos:start="29:17" pos:end="29:34">/* EMIFS_CONFIG */</comment>

    <case pos:start="31:5" pos:end="31:14">case <expr pos:start="31:10" pos:end="31:13"><literal type="number" pos:start="31:10" pos:end="31:13">0x10</literal></expr>:</case>	<comment type="block" pos:start="31:17" pos:end="31:38">/* EMIFS_CS0_CONFIG */</comment>

    <case pos:start="33:5" pos:end="33:14">case <expr pos:start="33:10" pos:end="33:13"><literal type="number" pos:start="33:10" pos:end="33:13">0x14</literal></expr>:</case>	<comment type="block" pos:start="33:17" pos:end="33:38">/* EMIFS_CS1_CONFIG */</comment>

    <case pos:start="35:5" pos:end="35:14">case <expr pos:start="35:10" pos:end="35:13"><literal type="number" pos:start="35:10" pos:end="35:13">0x18</literal></expr>:</case>	<comment type="block" pos:start="35:17" pos:end="35:38">/* EMIFS_CS2_CONFIG */</comment>

    <case pos:start="37:5" pos:end="37:14">case <expr pos:start="37:10" pos:end="37:13"><literal type="number" pos:start="37:10" pos:end="37:13">0x1c</literal></expr>:</case>	<comment type="block" pos:start="37:17" pos:end="37:38">/* EMIFS_CS3_CONFIG */</comment>

    <case pos:start="39:5" pos:end="39:14">case <expr pos:start="39:10" pos:end="39:13"><literal type="number" pos:start="39:10" pos:end="39:13">0x24</literal></expr>:</case>	<comment type="block" pos:start="39:17" pos:end="39:31">/* EMIFF_MRS */</comment>

    <case pos:start="41:5" pos:end="41:14">case <expr pos:start="41:10" pos:end="41:13"><literal type="number" pos:start="41:10" pos:end="41:13">0x28</literal></expr>:</case>	<comment type="block" pos:start="41:17" pos:end="41:30">/* TIMEOUT1 */</comment>

    <case pos:start="43:5" pos:end="43:14">case <expr pos:start="43:10" pos:end="43:13"><literal type="number" pos:start="43:10" pos:end="43:13">0x2c</literal></expr>:</case>	<comment type="block" pos:start="43:17" pos:end="43:30">/* TIMEOUT2 */</comment>

    <case pos:start="45:5" pos:end="45:14">case <expr pos:start="45:10" pos:end="45:13"><literal type="number" pos:start="45:10" pos:end="45:13">0x30</literal></expr>:</case>	<comment type="block" pos:start="45:17" pos:end="45:30">/* TIMEOUT3 */</comment>

    <case pos:start="47:5" pos:end="47:14">case <expr pos:start="47:10" pos:end="47:13"><literal type="number" pos:start="47:10" pos:end="47:13">0x3c</literal></expr>:</case>	<comment type="block" pos:start="47:17" pos:end="47:42">/* EMIFF_SDRAM_CONFIG_2 */</comment>

    <case pos:start="49:5" pos:end="49:14">case <expr pos:start="49:10" pos:end="49:13"><literal type="number" pos:start="49:10" pos:end="49:13">0x40</literal></expr>:</case>	<comment type="block" pos:start="49:17" pos:end="49:40">/* EMIFS_CFG_DYN_WAIT */</comment>

        <return pos:start="51:9" pos:end="51:39">return <expr pos:start="51:16" pos:end="51:38"><name pos:start="51:16" pos:end="51:38"><name pos:start="51:16" pos:end="51:16">s</name><operator pos:start="51:17" pos:end="51:18">-&gt;</operator><name pos:start="51:19" pos:end="51:27">tcmi_regs</name><index pos:start="51:28" pos:end="51:38">[<expr pos:start="51:29" pos:end="51:37"><name pos:start="51:29" pos:end="51:32">addr</name> <operator pos:start="51:34" pos:end="51:35">&gt;&gt;</operator> <literal type="number" pos:start="51:37" pos:end="51:37">2</literal></expr>]</index></name></expr>;</return>



    <case pos:start="55:5" pos:end="55:14">case <expr pos:start="55:10" pos:end="55:13"><literal type="number" pos:start="55:10" pos:end="55:13">0x20</literal></expr>:</case>	<comment type="block" pos:start="55:17" pos:end="55:40">/* EMIFF_SDRAM_CONFIG */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:38"><expr pos:start="57:9" pos:end="57:37"><name pos:start="57:9" pos:end="57:11">ret</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <name pos:start="57:15" pos:end="57:37"><name pos:start="57:15" pos:end="57:15">s</name><operator pos:start="57:16" pos:end="57:17">-&gt;</operator><name pos:start="57:18" pos:end="57:26">tcmi_regs</name><index pos:start="57:27" pos:end="57:37">[<expr pos:start="57:28" pos:end="57:36"><name pos:start="57:28" pos:end="57:31">addr</name> <operator pos:start="57:33" pos:end="57:34">&gt;&gt;</operator> <literal type="number" pos:start="57:36" pos:end="57:36">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:38"><expr pos:start="59:9" pos:end="59:37"><name pos:start="59:9" pos:end="59:31"><name pos:start="59:9" pos:end="59:9">s</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:20">tcmi_regs</name><index pos:start="59:21" pos:end="59:31">[<expr pos:start="59:22" pos:end="59:30"><name pos:start="59:22" pos:end="59:25">addr</name> <operator pos:start="59:27" pos:end="59:28">&gt;&gt;</operator> <literal type="number" pos:start="59:30" pos:end="59:30">2</literal></expr>]</index></name> <operator pos:start="59:33" pos:end="59:34">&amp;=</operator> <operator pos:start="59:36" pos:end="59:36">~</operator><literal type="number" pos:start="59:37" pos:end="59:37">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="59:40" pos:end="59:76">/* XXX: Clear SLRF on SDRAM access */</comment>

        <comment type="block" pos:start="61:9" pos:end="61:63">/* XXX: We can try using the VGA_DIRTY flag for this */</comment>

        <return pos:start="63:9" pos:end="63:19">return <expr pos:start="63:16" pos:end="63:18"><name pos:start="63:16" pos:end="63:18">ret</name></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="69:5" pos:end="69:23"><expr pos:start="69:5" pos:end="69:22"><call pos:start="69:5" pos:end="69:22"><name pos:start="69:5" pos:end="69:16">OMAP_BAD_REG</name><argument_list pos:start="69:17" pos:end="69:22">(<argument pos:start="69:18" pos:end="69:21"><expr pos:start="69:18" pos:end="69:21"><name pos:start="69:18" pos:end="69:21">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="71:5" pos:end="71:13">return <expr pos:start="71:12" pos:end="71:12"><literal type="number" pos:start="71:12" pos:end="71:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
