<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6398.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:38">MP3lame_encode_init</name><parameter_list pos:start="1:39" pos:end="1:61">(<parameter pos:start="1:40" pos:end="1:60"><decl pos:start="1:40" pos:end="1:60"><type pos:start="1:40" pos:end="1:55"><name pos:start="1:40" pos:end="1:53">AVCodecContext</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:60">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="125:1">{<block_content pos:start="5:5" pos:end="123:14">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">Mp3AudioContext</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:22">s</name> <init pos:start="5:24" pos:end="5:41">= <expr pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:41"><name pos:start="5:26" pos:end="5:30">avctx</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:41">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:18"><if pos:start="9:5" pos:end="11:18">if <condition pos:start="9:8" pos:end="9:28">(<expr pos:start="9:9" pos:end="9:27"><name pos:start="9:9" pos:end="9:23"><name pos:start="9:9" pos:end="9:13">avctx</name><operator pos:start="9:14" pos:end="9:15">-&gt;</operator><name pos:start="9:16" pos:end="9:23">channels</name></name> <operator pos:start="9:25" pos:end="9:25">&gt;</operator> <literal type="number" pos:start="9:27" pos:end="9:27">2</literal></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:18"><block_content pos:start="11:9" pos:end="11:18">

        <return pos:start="11:9" pos:end="11:18">return <expr pos:start="11:16" pos:end="11:17"><operator pos:start="11:16" pos:end="11:16">-</operator><literal type="number" pos:start="11:17" pos:end="11:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:44"><expr pos:start="15:5" pos:end="15:43"><name pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:13">stereo</name></name> <operator pos:start="15:15" pos:end="15:15">=</operator> <ternary pos:start="15:17" pos:end="15:43"><condition pos:start="15:17" pos:end="15:37"><expr pos:start="15:17" pos:end="15:35"><name pos:start="15:17" pos:end="15:31"><name pos:start="15:17" pos:end="15:21">avctx</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:31">channels</name></name> <operator pos:start="15:33" pos:end="15:33">&gt;</operator> <literal type="number" pos:start="15:35" pos:end="15:35">1</literal></expr> ?</condition><then pos:start="15:39" pos:end="15:39"> <expr pos:start="15:39" pos:end="15:39"><literal type="number" pos:start="15:39" pos:end="15:39">1</literal></expr> </then><else pos:start="15:41" pos:end="15:43">: <expr pos:start="15:43" pos:end="15:43"><literal type="number" pos:start="15:43" pos:end="15:43">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="21:17"><if pos:start="19:5" pos:end="21:17">if <condition pos:start="19:8" pos:end="19:39">(<expr pos:start="19:9" pos:end="19:38"><operator pos:start="19:9" pos:end="19:9">(</operator><name pos:start="19:10" pos:end="19:15"><name pos:start="19:10" pos:end="19:10">s</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:15">gfp</name></name> <operator pos:start="19:17" pos:end="19:17">=</operator> <call pos:start="19:19" pos:end="19:29"><name pos:start="19:19" pos:end="19:27">lame_init</name><argument_list pos:start="19:28" pos:end="19:29">()</argument_list></call><operator pos:start="19:30" pos:end="19:30">)</operator> <operator pos:start="19:32" pos:end="19:33">==</operator> <name pos:start="19:35" pos:end="19:38">NULL</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:17"><block_content pos:start="21:9" pos:end="21:17">

        <goto pos:start="21:9" pos:end="21:17">goto <name pos:start="21:14" pos:end="21:16">err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:55"><expr pos:start="23:5" pos:end="23:54"><call pos:start="23:5" pos:end="23:54"><name pos:start="23:5" pos:end="23:26">lame_set_in_samplerate</name><argument_list pos:start="23:27" pos:end="23:54">(<argument pos:start="23:28" pos:end="23:33"><expr pos:start="23:28" pos:end="23:33"><name pos:start="23:28" pos:end="23:33"><name pos:start="23:28" pos:end="23:28">s</name><operator pos:start="23:29" pos:end="23:30">-&gt;</operator><name pos:start="23:31" pos:end="23:33">gfp</name></name></expr></argument>, <argument pos:start="23:36" pos:end="23:53"><expr pos:start="23:36" pos:end="23:53"><name pos:start="23:36" pos:end="23:53"><name pos:start="23:36" pos:end="23:40">avctx</name><operator pos:start="23:41" pos:end="23:42">-&gt;</operator><name pos:start="23:43" pos:end="23:53">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:56"><expr pos:start="25:5" pos:end="25:55"><call pos:start="25:5" pos:end="25:55"><name pos:start="25:5" pos:end="25:27">lame_set_out_samplerate</name><argument_list pos:start="25:28" pos:end="25:55">(<argument pos:start="25:29" pos:end="25:34"><expr pos:start="25:29" pos:end="25:34"><name pos:start="25:29" pos:end="25:34"><name pos:start="25:29" pos:end="25:29">s</name><operator pos:start="25:30" pos:end="25:31">-&gt;</operator><name pos:start="25:32" pos:end="25:34">gfp</name></name></expr></argument>, <argument pos:start="25:37" pos:end="25:54"><expr pos:start="25:37" pos:end="25:54"><name pos:start="25:37" pos:end="25:54"><name pos:start="25:37" pos:end="25:41">avctx</name><operator pos:start="25:42" pos:end="25:43">-&gt;</operator><name pos:start="25:44" pos:end="25:54">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:51"><expr pos:start="27:5" pos:end="27:50"><call pos:start="27:5" pos:end="27:50"><name pos:start="27:5" pos:end="27:25">lame_set_num_channels</name><argument_list pos:start="27:26" pos:end="27:50">(<argument pos:start="27:27" pos:end="27:32"><expr pos:start="27:27" pos:end="27:32"><name pos:start="27:27" pos:end="27:32"><name pos:start="27:27" pos:end="27:27">s</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:32">gfp</name></name></expr></argument>, <argument pos:start="27:35" pos:end="27:49"><expr pos:start="27:35" pos:end="27:49"><name pos:start="27:35" pos:end="27:49"><name pos:start="27:35" pos:end="27:39">avctx</name><operator pos:start="27:40" pos:end="27:41">-&gt;</operator><name pos:start="27:42" pos:end="27:49">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="33:5">if<condition pos:start="29:7" pos:end="29:58">(<expr pos:start="29:8" pos:end="29:57"><name pos:start="29:8" pos:end="29:31"><name pos:start="29:8" pos:end="29:12">avctx</name><operator pos:start="29:13" pos:end="29:14">-&gt;</operator><name pos:start="29:15" pos:end="29:31">compression_level</name></name> <operator pos:start="29:33" pos:end="29:34">==</operator> <name pos:start="29:36" pos:end="29:57">FF_COMPRESSION_DEFAULT</name></expr>)</condition> <block pos:start="29:60" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:36">

        <expr_stmt pos:start="31:9" pos:end="31:36"><expr pos:start="31:9" pos:end="31:35"><call pos:start="31:9" pos:end="31:35"><name pos:start="31:9" pos:end="31:24">lame_set_quality</name><argument_list pos:start="31:25" pos:end="31:35">(<argument pos:start="31:26" pos:end="31:31"><expr pos:start="31:26" pos:end="31:31"><name pos:start="31:26" pos:end="31:31"><name pos:start="31:26" pos:end="31:26">s</name><operator pos:start="31:27" pos:end="31:28">-&gt;</operator><name pos:start="31:29" pos:end="31:31">gfp</name></name></expr></argument>, <argument pos:start="31:34" pos:end="31:34"><expr pos:start="31:34" pos:end="31:34"><literal type="number" pos:start="31:34" pos:end="31:34">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="33:7" pos:end="37:5">else <block pos:start="33:12" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:59">

        <expr_stmt pos:start="35:9" pos:end="35:59"><expr pos:start="35:9" pos:end="35:58"><call pos:start="35:9" pos:end="35:58"><name pos:start="35:9" pos:end="35:24">lame_set_quality</name><argument_list pos:start="35:25" pos:end="35:58">(<argument pos:start="35:26" pos:end="35:31"><expr pos:start="35:26" pos:end="35:31"><name pos:start="35:26" pos:end="35:31"><name pos:start="35:26" pos:end="35:26">s</name><operator pos:start="35:27" pos:end="35:28">-&gt;</operator><name pos:start="35:29" pos:end="35:31">gfp</name></name></expr></argument>, <argument pos:start="35:34" pos:end="35:57"><expr pos:start="35:34" pos:end="35:57"><name pos:start="35:34" pos:end="35:57"><name pos:start="35:34" pos:end="35:38">avctx</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:57">compression_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:59"><expr pos:start="39:5" pos:end="39:58"><call pos:start="39:5" pos:end="39:58"><name pos:start="39:5" pos:end="39:17">lame_set_mode</name><argument_list pos:start="39:18" pos:end="39:58">(<argument pos:start="39:19" pos:end="39:24"><expr pos:start="39:19" pos:end="39:24"><name pos:start="39:19" pos:end="39:24"><name pos:start="39:19" pos:end="39:19">s</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:24">gfp</name></name></expr></argument>, <argument pos:start="39:27" pos:end="39:57"><expr pos:start="39:27" pos:end="39:57"><ternary pos:start="39:27" pos:end="39:57"><condition pos:start="39:27" pos:end="39:37"><expr pos:start="39:27" pos:end="39:35"><name pos:start="39:27" pos:end="39:35"><name pos:start="39:27" pos:end="39:27">s</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:35">stereo</name></name></expr> ?</condition><then pos:start="39:39" pos:end="39:50"> <expr pos:start="39:39" pos:end="39:50"><name pos:start="39:39" pos:end="39:50">JOINT_STEREO</name></expr> </then><else pos:start="39:52" pos:end="39:57">: <expr pos:start="39:54" pos:end="39:57"><name pos:start="39:54" pos:end="39:57">MONO</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:49"><expr pos:start="41:5" pos:end="41:48"><call pos:start="41:5" pos:end="41:48"><name pos:start="41:5" pos:end="41:18">lame_set_brate</name><argument_list pos:start="41:19" pos:end="41:48">(<argument pos:start="41:20" pos:end="41:25"><expr pos:start="41:20" pos:end="41:25"><name pos:start="41:20" pos:end="41:25"><name pos:start="41:20" pos:end="41:20">s</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:25">gfp</name></name></expr></argument>, <argument pos:start="41:28" pos:end="41:47"><expr pos:start="41:28" pos:end="41:47"><name pos:start="41:28" pos:end="41:42"><name pos:start="41:28" pos:end="41:32">avctx</name><operator pos:start="41:33" pos:end="41:34">-&gt;</operator><name pos:start="41:35" pos:end="41:42">bit_rate</name></name><operator pos:start="41:43" pos:end="41:43">/</operator><literal type="number" pos:start="41:44" pos:end="41:47">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if<condition pos:start="43:7" pos:end="43:40">(<expr pos:start="43:8" pos:end="43:39"><name pos:start="43:8" pos:end="43:19"><name pos:start="43:8" pos:end="43:12">avctx</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:19">flags</name></name> <operator pos:start="43:21" pos:end="43:21">&amp;</operator> <name pos:start="43:23" pos:end="43:39">CODEC_FLAG_QSCALE</name></expr>)</condition> <block pos:start="43:42" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:80">

        <expr_stmt pos:start="45:9" pos:end="45:34"><expr pos:start="45:9" pos:end="45:33"><call pos:start="45:9" pos:end="45:33"><name pos:start="45:9" pos:end="45:22">lame_set_brate</name><argument_list pos:start="45:23" pos:end="45:33">(<argument pos:start="45:24" pos:end="45:29"><expr pos:start="45:24" pos:end="45:29"><name pos:start="45:24" pos:end="45:29"><name pos:start="45:24" pos:end="45:24">s</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:29">gfp</name></name></expr></argument>, <argument pos:start="45:32" pos:end="45:32"><expr pos:start="45:32" pos:end="45:32"><literal type="number" pos:start="45:32" pos:end="45:32">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:42"><expr pos:start="47:9" pos:end="47:41"><call pos:start="47:9" pos:end="47:41"><name pos:start="47:9" pos:end="47:20">lame_set_VBR</name><argument_list pos:start="47:21" pos:end="47:41">(<argument pos:start="47:22" pos:end="47:27"><expr pos:start="47:22" pos:end="47:27"><name pos:start="47:22" pos:end="47:27"><name pos:start="47:22" pos:end="47:22">s</name><operator pos:start="47:23" pos:end="47:24">-&gt;</operator><name pos:start="47:25" pos:end="47:27">gfp</name></name></expr></argument>, <argument pos:start="47:30" pos:end="47:40"><expr pos:start="47:30" pos:end="47:40"><name pos:start="47:30" pos:end="47:40">vbr_default</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:80"><expr pos:start="49:9" pos:end="49:79"><call pos:start="49:9" pos:end="49:79"><name pos:start="49:9" pos:end="49:28">lame_set_VBR_quality</name><argument_list pos:start="49:29" pos:end="49:79">(<argument pos:start="49:30" pos:end="49:35"><expr pos:start="49:30" pos:end="49:35"><name pos:start="49:30" pos:end="49:35"><name pos:start="49:30" pos:end="49:30">s</name><operator pos:start="49:31" pos:end="49:32">-&gt;</operator><name pos:start="49:33" pos:end="49:35">gfp</name></name></expr></argument>, <argument pos:start="49:38" pos:end="49:78"><expr pos:start="49:38" pos:end="49:78"><name pos:start="49:38" pos:end="49:58"><name pos:start="49:38" pos:end="49:42">avctx</name><operator pos:start="49:43" pos:end="49:44">-&gt;</operator><name pos:start="49:45" pos:end="49:58">global_quality</name></name><operator pos:start="49:59" pos:end="49:59">/</operator><operator pos:start="49:60" pos:end="49:60">(</operator><name pos:start="49:61" pos:end="49:65">float</name><operator pos:start="49:66" pos:end="49:66">)</operator><name pos:start="49:67" pos:end="49:78">FF_QP2LAMBDA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="56:0"><expr pos:start="53:5" pos:end="53:35"><call pos:start="53:5" pos:end="53:35"><name pos:start="53:5" pos:end="53:25">lame_set_bWriteVbrTag</name><argument_list pos:start="53:26" pos:end="53:35">(<argument pos:start="53:27" pos:end="53:32"><expr pos:start="53:27" pos:end="53:32"><name pos:start="53:27" pos:end="53:32"><name pos:start="53:27" pos:end="53:27">s</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:32">gfp</name></name></expr></argument>,<argument pos:start="53:34" pos:end="53:34"><expr pos:start="53:34" pos:end="53:34"><literal type="number" pos:start="53:34" pos:end="53:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="55:1" pos:end="55:27">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:27"><name pos:start="55:5" pos:end="55:27">FF_API_LAME_GLOBAL_OPTS</name></expr></cpp:if>

    <expr_stmt pos:start="57:5" pos:end="60:0"><expr pos:start="57:5" pos:end="57:60"><name pos:start="57:5" pos:end="57:16"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:16">reservoir</name></name> <operator pos:start="57:18" pos:end="57:18">=</operator> <name pos:start="57:20" pos:end="57:32"><name pos:start="57:20" pos:end="57:24">avctx</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:32">flags2</name></name> <operator pos:start="57:34" pos:end="57:34">&amp;</operator> <name pos:start="57:36" pos:end="57:60">CODEC_FLAG2_BIT_RESERVOIR</name></expr>;</expr_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="61:5" pos:end="61:54"><expr pos:start="61:5" pos:end="61:53"><call pos:start="61:5" pos:end="61:53"><name pos:start="61:5" pos:end="61:30">lame_set_disable_reservoir</name><argument_list pos:start="61:31" pos:end="61:53">(<argument pos:start="61:32" pos:end="61:37"><expr pos:start="61:32" pos:end="61:37"><name pos:start="61:32" pos:end="61:37"><name pos:start="61:32" pos:end="61:32">s</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:37">gfp</name></name></expr></argument>, <argument pos:start="61:40" pos:end="61:52"><expr pos:start="61:40" pos:end="61:52"><operator pos:start="61:40" pos:end="61:40">!</operator><name pos:start="61:41" pos:end="61:52"><name pos:start="61:41" pos:end="61:41">s</name><operator pos:start="61:42" pos:end="61:43">-&gt;</operator><name pos:start="61:44" pos:end="61:52">reservoir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="65:23"><if pos:start="63:5" pos:end="65:23">if <condition pos:start="63:8" pos:end="63:37">(<expr pos:start="63:9" pos:end="63:36"><call pos:start="63:9" pos:end="63:32"><name pos:start="63:9" pos:end="63:24">lame_init_params</name><argument_list pos:start="63:25" pos:end="63:32">(<argument pos:start="63:26" pos:end="63:31"><expr pos:start="63:26" pos:end="63:31"><name pos:start="63:26" pos:end="63:31"><name pos:start="63:26" pos:end="63:26">s</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:31">gfp</name></name></expr></argument>)</argument_list></call> <operator pos:start="63:34" pos:end="63:34">&lt;</operator> <literal type="number" pos:start="63:36" pos:end="63:36">0</literal></expr>)</condition><block type="pseudo" pos:start="65:9" pos:end="65:23"><block_content pos:start="65:9" pos:end="65:23">

        <goto pos:start="65:9" pos:end="65:23">goto <name pos:start="65:14" pos:end="65:22">err_close</name>;</goto></block_content></block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:51"><expr pos:start="69:5" pos:end="69:50"><name pos:start="69:5" pos:end="69:21"><name pos:start="69:5" pos:end="69:9">avctx</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:21">frame_size</name></name> <operator pos:start="69:23" pos:end="69:23">=</operator> <call pos:start="69:25" pos:end="69:50"><name pos:start="69:25" pos:end="69:42">lame_get_framesize</name><argument_list pos:start="69:43" pos:end="69:50">(<argument pos:start="69:44" pos:end="69:49"><expr pos:start="69:44" pos:end="69:49"><name pos:start="69:44" pos:end="69:49"><name pos:start="69:44" pos:end="69:44">s</name><operator pos:start="69:45" pos:end="69:46">-&gt;</operator><name pos:start="69:47" pos:end="69:49">gfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="73:5" pos:end="81:5"><if pos:start="73:5" pos:end="81:5">if<condition pos:start="73:7" pos:end="73:52">(<expr pos:start="73:8" pos:end="73:51"><operator pos:start="73:8" pos:end="73:8">!</operator><operator pos:start="73:9" pos:end="73:9">(</operator><name pos:start="73:10" pos:end="73:27"><name pos:start="73:10" pos:end="73:14">avctx</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:27">coded_frame</name></name><operator pos:start="73:28" pos:end="73:28">=</operator> <call pos:start="73:30" pos:end="73:50"><name pos:start="73:30" pos:end="73:48">avcodec_alloc_frame</name><argument_list pos:start="73:49" pos:end="73:50">()</argument_list></call><operator pos:start="73:51" pos:end="73:51">)</operator></expr>)</condition> <block pos:start="73:54" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:31">

        <expr_stmt pos:start="75:9" pos:end="75:27"><expr pos:start="75:9" pos:end="75:26"><call pos:start="75:9" pos:end="75:26"><name pos:start="75:9" pos:end="75:18">lame_close</name><argument_list pos:start="75:19" pos:end="75:26">(<argument pos:start="75:20" pos:end="75:25"><expr pos:start="75:20" pos:end="75:25"><name pos:start="75:20" pos:end="75:25"><name pos:start="75:20" pos:end="75:20">s</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:25">gfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="79:9" pos:end="79:31">return <expr pos:start="79:16" pos:end="79:30"><call pos:start="79:16" pos:end="79:30"><name pos:start="79:16" pos:end="79:22">AVERROR</name><argument_list pos:start="79:23" pos:end="79:30">(<argument pos:start="79:24" pos:end="79:29"><expr pos:start="79:24" pos:end="79:29"><name pos:start="79:24" pos:end="79:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:37"><expr pos:start="83:5" pos:end="83:36"><name pos:start="83:5" pos:end="83:33"><name pos:start="83:5" pos:end="83:9">avctx</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:22">coded_frame</name><operator pos:start="83:23" pos:end="83:24">-&gt;</operator><name pos:start="83:25" pos:end="83:33">key_frame</name></name><operator pos:start="83:34" pos:end="83:34">=</operator> <literal type="number" pos:start="83:36" pos:end="83:36">1</literal></expr>;</expr_stmt>



    <if_stmt pos:start="87:5" pos:end="109:5"><if pos:start="87:5" pos:end="109:5">if<condition pos:start="87:7" pos:end="87:59">(<expr pos:start="87:8" pos:end="87:58"><name pos:start="87:8" pos:end="87:24">AV_SAMPLE_FMT_S32</name> <operator pos:start="87:26" pos:end="87:27">==</operator> <name pos:start="87:29" pos:end="87:45"><name pos:start="87:29" pos:end="87:33">avctx</name><operator pos:start="87:34" pos:end="87:35">-&gt;</operator><name pos:start="87:36" pos:end="87:45">sample_fmt</name></name> <operator pos:start="87:47" pos:end="87:48">&amp;&amp;</operator> <name pos:start="87:50" pos:end="87:58"><name pos:start="87:50" pos:end="87:50">s</name><operator pos:start="87:51" pos:end="87:52">-&gt;</operator><name pos:start="87:53" pos:end="87:58">stereo</name></name></expr>)</condition> <block pos:start="87:61" pos:end="109:5">{<block_content pos:start="89:9" pos:end="107:65">

        <decl_stmt pos:start="89:9" pos:end="89:42"><decl pos:start="89:9" pos:end="89:41"><type pos:start="89:9" pos:end="89:11"><name pos:start="89:9" pos:end="89:11">int</name></type> <name pos:start="89:13" pos:end="89:17">nelem</name> <init pos:start="89:19" pos:end="89:41">= <expr pos:start="89:21" pos:end="89:41"><literal type="number" pos:start="89:21" pos:end="89:21">2</literal> <operator pos:start="89:23" pos:end="89:23">*</operator> <name pos:start="89:25" pos:end="89:41"><name pos:start="89:25" pos:end="89:29">avctx</name><operator pos:start="89:30" pos:end="89:31">-&gt;</operator><name pos:start="89:32" pos:end="89:41">frame_size</name></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="93:9" pos:end="103:9"><if pos:start="93:9" pos:end="103:9">if<condition pos:start="93:11" pos:end="93:65">(<expr pos:start="93:12" pos:end="93:64"><operator pos:start="93:12" pos:end="93:12">!</operator> <operator pos:start="93:14" pos:end="93:14">(</operator><name pos:start="93:15" pos:end="93:30"><name pos:start="93:15" pos:end="93:15">s</name><operator pos:start="93:16" pos:end="93:17">-&gt;</operator><name pos:start="93:18" pos:end="93:25">s32_data</name><operator pos:start="93:26" pos:end="93:26">.</operator><name pos:start="93:27" pos:end="93:30">left</name></name> <operator pos:start="93:32" pos:end="93:32">=</operator> <call pos:start="93:34" pos:end="93:63"><name pos:start="93:34" pos:end="93:42">av_malloc</name><argument_list pos:start="93:43" pos:end="93:63">(<argument pos:start="93:44" pos:end="93:62"><expr pos:start="93:44" pos:end="93:62"><name pos:start="93:44" pos:end="93:48">nelem</name> <operator pos:start="93:50" pos:end="93:50">*</operator> <sizeof pos:start="93:52" pos:end="93:62">sizeof<argument_list pos:start="93:58" pos:end="93:62">(<argument pos:start="93:59" pos:end="93:61"><expr pos:start="93:59" pos:end="93:61"><name pos:start="93:59" pos:end="93:61">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator pos:start="93:64" pos:end="93:64">)</operator></expr>)</condition> <block pos:start="93:67" pos:end="103:9">{<block_content pos:start="95:13" pos:end="101:35">

            <expr_stmt pos:start="95:13" pos:end="95:42"><expr pos:start="95:13" pos:end="95:41"><call pos:start="95:13" pos:end="95:41"><name pos:start="95:13" pos:end="95:20">av_freep</name><argument_list pos:start="95:21" pos:end="95:41">(<argument pos:start="95:22" pos:end="95:40"><expr pos:start="95:22" pos:end="95:40"><operator pos:start="95:22" pos:end="95:22">&amp;</operator><name pos:start="95:23" pos:end="95:40"><name pos:start="95:23" pos:end="95:27">avctx</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:40">coded_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:31"><expr pos:start="97:13" pos:end="97:30"><call pos:start="97:13" pos:end="97:30"><name pos:start="97:13" pos:end="97:22">lame_close</name><argument_list pos:start="97:23" pos:end="97:30">(<argument pos:start="97:24" pos:end="97:29"><expr pos:start="97:24" pos:end="97:29"><name pos:start="97:24" pos:end="97:29"><name pos:start="97:24" pos:end="97:24">s</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:29">gfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <return pos:start="101:13" pos:end="101:35">return <expr pos:start="101:20" pos:end="101:34"><call pos:start="101:20" pos:end="101:34"><name pos:start="101:20" pos:end="101:26">AVERROR</name><argument_list pos:start="101:27" pos:end="101:34">(<argument pos:start="101:28" pos:end="101:33"><expr pos:start="101:28" pos:end="101:33"><name pos:start="101:28" pos:end="101:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:65"><expr pos:start="107:9" pos:end="107:64"><name pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:9">s</name><operator pos:start="107:10" pos:end="107:11">-&gt;</operator><name pos:start="107:12" pos:end="107:19">s32_data</name><operator pos:start="107:20" pos:end="107:20">.</operator><name pos:start="107:21" pos:end="107:25">right</name></name> <operator pos:start="107:27" pos:end="107:27">=</operator> <name pos:start="107:29" pos:end="107:44"><name pos:start="107:29" pos:end="107:29">s</name><operator pos:start="107:30" pos:end="107:31">-&gt;</operator><name pos:start="107:32" pos:end="107:39">s32_data</name><operator pos:start="107:40" pos:end="107:40">.</operator><name pos:start="107:41" pos:end="107:44">left</name></name> <operator pos:start="107:46" pos:end="107:46">+</operator> <name pos:start="107:48" pos:end="107:64"><name pos:start="107:48" pos:end="107:52">avctx</name><operator pos:start="107:53" pos:end="107:54">-&gt;</operator><name pos:start="107:55" pos:end="107:64">frame_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="113:5" pos:end="113:13">return <expr pos:start="113:12" pos:end="113:12"><literal type="number" pos:start="113:12" pos:end="113:12">0</literal></expr>;</return>



<label pos:start="117:1" pos:end="117:10"><name pos:start="117:1" pos:end="117:9">err_close</name>:</label>

    <expr_stmt pos:start="119:5" pos:end="119:23"><expr pos:start="119:5" pos:end="119:22"><call pos:start="119:5" pos:end="119:22"><name pos:start="119:5" pos:end="119:14">lame_close</name><argument_list pos:start="119:15" pos:end="119:22">(<argument pos:start="119:16" pos:end="119:21"><expr pos:start="119:16" pos:end="119:21"><name pos:start="119:16" pos:end="119:21"><name pos:start="119:16" pos:end="119:16">s</name><operator pos:start="119:17" pos:end="119:18">-&gt;</operator><name pos:start="119:19" pos:end="119:21">gfp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="121:1" pos:end="121:4"><name pos:start="121:1" pos:end="121:3">err</name>:</label>

    <return pos:start="123:5" pos:end="123:14">return <expr pos:start="123:12" pos:end="123:13"><operator pos:start="123:12" pos:end="123:12">-</operator><literal type="number" pos:start="123:13" pos:end="123:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
