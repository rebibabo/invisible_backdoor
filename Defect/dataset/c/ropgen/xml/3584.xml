<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3584.c" pos:tabs="8"><function pos:start="1:1" pos:end="285:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">rtp_parse_packet</name><parameter_list pos:start="1:21" pos:end="3:49">(<parameter pos:start="1:22" pos:end="1:39"><decl pos:start="1:22" pos:end="1:39"><type pos:start="1:22" pos:end="1:39"><name pos:start="1:22" pos:end="1:36">RTPDemuxContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:39">s</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:54"><decl pos:start="1:42" pos:end="1:54"><type pos:start="1:42" pos:end="1:54"><name pos:start="1:42" pos:end="1:49">AVPacket</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:54">pkt</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:39"><decl pos:start="3:22" pos:end="3:39"><type pos:start="3:22" pos:end="3:39"><specifier pos:start="3:22" pos:end="3:26">const</specifier> <name pos:start="3:28" pos:end="3:34">uint8_t</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:39">buf</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:48"><decl pos:start="3:42" pos:end="3:48"><type pos:start="3:42" pos:end="3:48"><name pos:start="3:42" pos:end="3:44">int</name></type> <name pos:start="3:46" pos:end="3:48">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="285:1">{<block_content pos:start="7:5" pos:end="283:14">

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:21">ssrc</name></decl>, <decl pos:start="7:24" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:16"/><name pos:start="7:24" pos:end="7:24">h</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">payload_type</name></decl>, <decl pos:start="9:23" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:23" pos:end="9:25">seq</name></decl>, <decl pos:start="9:28" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:30">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">AVStream</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:22">timestamp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">rv</name><init pos:start="15:11" pos:end="15:13">= <expr pos:start="15:13" pos:end="15:13"><literal type="number" pos:start="15:13" pos:end="15:13">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="61:5"><if pos:start="19:5" pos:end="61:5">if <condition pos:start="19:8" pos:end="19:13">(<expr pos:start="19:9" pos:end="19:12"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:12">buf</name></expr>)</condition> <block pos:start="19:15" pos:end="61:5">{<block_content pos:start="23:9" pos:end="59:9">

        <comment type="block" pos:start="21:9" pos:end="21:45">/* return the next packets, if any */</comment>

        <if_stmt pos:start="23:9" pos:end="59:9"><if pos:start="23:9" pos:end="33:9">if<condition pos:start="23:11" pos:end="23:36">(<expr pos:start="23:12" pos:end="23:35"><name pos:start="23:12" pos:end="23:16"><name pos:start="23:12" pos:end="23:12">s</name><operator pos:start="23:13" pos:end="23:14">-&gt;</operator><name pos:start="23:15" pos:end="23:16">st</name></name> <operator pos:start="23:18" pos:end="23:19">&amp;&amp;</operator> <name pos:start="23:21" pos:end="23:35"><name pos:start="23:21" pos:end="23:21">s</name><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:35">parse_packet</name></name></expr>)</condition> <block pos:start="23:38" pos:end="33:9">{<block_content pos:start="25:13" pos:end="31:22">

            <expr_stmt pos:start="25:13" pos:end="25:25"><expr pos:start="25:13" pos:end="25:24"><name pos:start="25:13" pos:end="25:21">timestamp</name><operator pos:start="25:22" pos:end="25:22">=</operator> <literal type="number" pos:start="25:24" pos:end="25:24">0</literal></expr>;</expr_stmt> <comment type="line" format="doxygen" pos:start="25:27" pos:end="25:127">///&lt; Should not be used if buf is NULL, but should be set to the timestamp of the packet returned....</comment>

            <expr_stmt pos:start="27:13" pos:end="27:61"><expr pos:start="27:13" pos:end="27:60"><name pos:start="27:13" pos:end="27:14">rv</name><operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:60"><name pos:start="27:17" pos:end="27:31"><name pos:start="27:17" pos:end="27:17">s</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:31">parse_packet</name></name><argument_list pos:start="27:32" pos:end="27:60">(<argument pos:start="27:33" pos:end="27:33"><expr pos:start="27:33" pos:end="27:33"><name pos:start="27:33" pos:end="27:33">s</name></expr></argument>, <argument pos:start="27:36" pos:end="27:38"><expr pos:start="27:36" pos:end="27:38"><name pos:start="27:36" pos:end="27:38">pkt</name></expr></argument>, <argument pos:start="27:41" pos:end="27:50"><expr pos:start="27:41" pos:end="27:50"><operator pos:start="27:41" pos:end="27:41">&amp;</operator><name pos:start="27:42" pos:end="27:50">timestamp</name></expr></argument>, <argument pos:start="27:53" pos:end="27:56"><expr pos:start="27:53" pos:end="27:56"><name pos:start="27:53" pos:end="27:56">NULL</name></expr></argument>, <argument pos:start="27:59" pos:end="27:59"><expr pos:start="27:59" pos:end="27:59"><literal type="number" pos:start="27:59" pos:end="27:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="29:13" pos:end="29:47"><expr pos:start="29:13" pos:end="29:46"><call pos:start="29:13" pos:end="29:46"><name pos:start="29:13" pos:end="29:27">finalize_packet</name><argument_list pos:start="29:28" pos:end="29:46">(<argument pos:start="29:29" pos:end="29:29"><expr pos:start="29:29" pos:end="29:29"><name pos:start="29:29" pos:end="29:29">s</name></expr></argument>, <argument pos:start="29:32" pos:end="29:34"><expr pos:start="29:32" pos:end="29:34"><name pos:start="29:32" pos:end="29:34">pkt</name></expr></argument>, <argument pos:start="29:37" pos:end="29:45"><expr pos:start="29:37" pos:end="29:45"><name pos:start="29:37" pos:end="29:45">timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="31:13" pos:end="31:22">return <expr pos:start="31:20" pos:end="31:21"><name pos:start="31:20" pos:end="31:21">rv</name></expr>;</return>

        </block_content>}</block></if> <else pos:start="33:11" pos:end="59:9">else <block pos:start="33:16" pos:end="59:9">{<block_content pos:start="37:13" pos:end="57:25">

            <comment type="line" pos:start="35:13" pos:end="35:66">// TODO: Move to a dynamic packet handler (like above)</comment>

            <if_stmt pos:start="37:13" pos:end="39:26"><if pos:start="37:13" pos:end="39:26">if <condition pos:start="37:16" pos:end="37:54">(<expr pos:start="37:17" pos:end="37:53"><name pos:start="37:17" pos:end="37:33"><name pos:start="37:17" pos:end="37:17">s</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:33">read_buf_index</name></name> <operator pos:start="37:35" pos:end="37:36">&gt;=</operator> <name pos:start="37:38" pos:end="37:53"><name pos:start="37:38" pos:end="37:38">s</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:53">read_buf_size</name></name></expr>)</condition><block type="pseudo" pos:start="39:17" pos:end="39:26"><block_content pos:start="39:17" pos:end="39:26">

                <return pos:start="39:17" pos:end="39:26">return <expr pos:start="39:24" pos:end="39:25"><operator pos:start="39:24" pos:end="39:24">-</operator><literal type="number" pos:start="39:25" pos:end="39:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="41:13" pos:end="43:76"><expr pos:start="41:13" pos:end="43:75"><name pos:start="41:13" pos:end="41:15">ret</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="43:75"><name pos:start="41:19" pos:end="41:37">mpegts_parse_packet</name><argument_list pos:start="41:38" pos:end="43:75">(<argument pos:start="41:39" pos:end="41:43"><expr pos:start="41:39" pos:end="41:43"><name pos:start="41:39" pos:end="41:43"><name pos:start="41:39" pos:end="41:39">s</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:43">ts</name></name></expr></argument>, <argument pos:start="41:46" pos:end="41:48"><expr pos:start="41:46" pos:end="41:48"><name pos:start="41:46" pos:end="41:48">pkt</name></expr></argument>, <argument pos:start="41:51" pos:end="41:76"><expr pos:start="41:51" pos:end="41:76"><name pos:start="41:51" pos:end="41:56"><name pos:start="41:51" pos:end="41:51">s</name><operator pos:start="41:52" pos:end="41:53">-&gt;</operator><name pos:start="41:54" pos:end="41:56">buf</name></name> <operator pos:start="41:58" pos:end="41:58">+</operator> <name pos:start="41:60" pos:end="41:76"><name pos:start="41:60" pos:end="41:60">s</name><operator pos:start="41:61" pos:end="41:62">-&gt;</operator><name pos:start="41:63" pos:end="41:76">read_buf_index</name></name></expr></argument>,

                                      <argument pos:start="43:39" pos:end="43:74"><expr pos:start="43:39" pos:end="43:74"><name pos:start="43:39" pos:end="43:54"><name pos:start="43:39" pos:end="43:39">s</name><operator pos:start="43:40" pos:end="43:41">-&gt;</operator><name pos:start="43:42" pos:end="43:54">read_buf_size</name></name> <operator pos:start="43:56" pos:end="43:56">-</operator> <name pos:start="43:58" pos:end="43:74"><name pos:start="43:58" pos:end="43:58">s</name><operator pos:start="43:59" pos:end="43:60">-&gt;</operator><name pos:start="43:61" pos:end="43:74">read_buf_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="45:13" pos:end="47:26"><if pos:start="45:13" pos:end="47:26">if <condition pos:start="45:16" pos:end="45:24">(<expr pos:start="45:17" pos:end="45:23"><name pos:start="45:17" pos:end="45:19">ret</name> <operator pos:start="45:21" pos:end="45:21">&lt;</operator> <literal type="number" pos:start="45:23" pos:end="45:23">0</literal></expr>)</condition><block type="pseudo" pos:start="47:17" pos:end="47:26"><block_content pos:start="47:17" pos:end="47:26">

                <return pos:start="47:17" pos:end="47:26">return <expr pos:start="47:24" pos:end="47:25"><operator pos:start="47:24" pos:end="47:24">-</operator><literal type="number" pos:start="47:25" pos:end="47:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:37"><expr pos:start="49:13" pos:end="49:36"><name pos:start="49:13" pos:end="49:29"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:29">read_buf_index</name></name> <operator pos:start="49:31" pos:end="49:32">+=</operator> <name pos:start="49:34" pos:end="49:36">ret</name></expr>;</expr_stmt>

            <if_stmt pos:start="51:13" pos:end="57:25"><if pos:start="51:13" pos:end="53:25">if <condition pos:start="51:16" pos:end="51:53">(<expr pos:start="51:17" pos:end="51:52"><name pos:start="51:17" pos:end="51:33"><name pos:start="51:17" pos:end="51:17">s</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:33">read_buf_index</name></name> <operator pos:start="51:35" pos:end="51:35">&lt;</operator> <name pos:start="51:37" pos:end="51:52"><name pos:start="51:37" pos:end="51:37">s</name><operator pos:start="51:38" pos:end="51:39">-&gt;</operator><name pos:start="51:40" pos:end="51:52">read_buf_size</name></name></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:25"><block_content pos:start="53:17" pos:end="53:25">

                <return pos:start="53:17" pos:end="53:25">return <expr pos:start="53:24" pos:end="53:24"><literal type="number" pos:start="53:24" pos:end="53:24">1</literal></expr>;</return></block_content></block></if>

            <else pos:start="55:13" pos:end="57:25">else<block type="pseudo" pos:start="57:17" pos:end="57:25"><block_content pos:start="57:17" pos:end="57:25">

                <return pos:start="57:17" pos:end="57:25">return <expr pos:start="57:24" pos:end="57:24"><literal type="number" pos:start="57:24" pos:end="57:24">0</literal></expr>;</return></block_content></block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="65:5" pos:end="67:18"><if pos:start="65:5" pos:end="67:18">if <condition pos:start="65:8" pos:end="65:17">(<expr pos:start="65:9" pos:end="65:16"><name pos:start="65:9" pos:end="65:11">len</name> <operator pos:start="65:13" pos:end="65:13">&lt;</operator> <literal type="number" pos:start="65:15" pos:end="65:16">12</literal></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:18"><block_content pos:start="67:9" pos:end="67:18">

        <return pos:start="67:9" pos:end="67:18">return <expr pos:start="67:16" pos:end="67:17"><operator pos:start="67:16" pos:end="67:16">-</operator><literal type="number" pos:start="67:17" pos:end="67:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="73:18"><if pos:start="71:5" pos:end="73:18">if <condition pos:start="71:8" pos:end="71:46">(<expr pos:start="71:9" pos:end="71:45"><operator pos:start="71:9" pos:end="71:9">(</operator><name pos:start="71:10" pos:end="71:15"><name pos:start="71:10" pos:end="71:12">buf</name><index pos:start="71:13" pos:end="71:15">[<expr pos:start="71:14" pos:end="71:14"><literal type="number" pos:start="71:14" pos:end="71:14">0</literal></expr>]</index></name> <operator pos:start="71:17" pos:end="71:17">&amp;</operator> <literal type="number" pos:start="71:19" pos:end="71:22">0xc0</literal><operator pos:start="71:23" pos:end="71:23">)</operator> <operator pos:start="71:25" pos:end="71:26">!=</operator> <operator pos:start="71:28" pos:end="71:28">(</operator><name pos:start="71:29" pos:end="71:39">RTP_VERSION</name> <operator pos:start="71:41" pos:end="71:42">&lt;&lt;</operator> <literal type="number" pos:start="71:44" pos:end="71:44">6</literal><operator pos:start="71:45" pos:end="71:45">)</operator></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:18"><block_content pos:start="73:9" pos:end="73:18">

        <return pos:start="73:9" pos:end="73:18">return <expr pos:start="73:16" pos:end="73:17"><operator pos:start="73:16" pos:end="73:16">-</operator><literal type="number" pos:start="73:17" pos:end="73:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="81:5"><if pos:start="75:5" pos:end="81:5">if <condition pos:start="75:8" pos:end="75:39">(<expr pos:start="75:9" pos:end="75:38"><name pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:11">buf</name><index pos:start="75:12" pos:end="75:14">[<expr pos:start="75:13" pos:end="75:13"><literal type="number" pos:start="75:13" pos:end="75:13">1</literal></expr>]</index></name> <operator pos:start="75:16" pos:end="75:17">&gt;=</operator> <literal type="number" pos:start="75:19" pos:end="75:21">200</literal> <operator pos:start="75:23" pos:end="75:24">&amp;&amp;</operator> <name pos:start="75:26" pos:end="75:31"><name pos:start="75:26" pos:end="75:28">buf</name><index pos:start="75:29" pos:end="75:31">[<expr pos:start="75:30" pos:end="75:30"><literal type="number" pos:start="75:30" pos:end="75:30">1</literal></expr>]</index></name> <operator pos:start="75:33" pos:end="75:34">&lt;=</operator> <literal type="number" pos:start="75:36" pos:end="75:38">204</literal></expr>)</condition> <block pos:start="75:41" pos:end="81:5">{<block_content pos:start="77:9" pos:end="79:18">

        <expr_stmt pos:start="77:9" pos:end="77:39"><expr pos:start="77:9" pos:end="77:38"><call pos:start="77:9" pos:end="77:38"><name pos:start="77:9" pos:end="77:25">rtcp_parse_packet</name><argument_list pos:start="77:26" pos:end="77:38">(<argument pos:start="77:27" pos:end="77:27"><expr pos:start="77:27" pos:end="77:27"><name pos:start="77:27" pos:end="77:27">s</name></expr></argument>, <argument pos:start="77:30" pos:end="77:32"><expr pos:start="77:30" pos:end="77:32"><name pos:start="77:30" pos:end="77:32">buf</name></expr></argument>, <argument pos:start="77:35" pos:end="77:37"><expr pos:start="77:35" pos:end="77:37"><name pos:start="77:35" pos:end="77:37">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:18">return <expr pos:start="79:16" pos:end="79:17"><operator pos:start="79:16" pos:end="79:16">-</operator><literal type="number" pos:start="79:17" pos:end="79:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:33"><expr pos:start="83:5" pos:end="83:32"><name pos:start="83:5" pos:end="83:16">payload_type</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <name pos:start="83:20" pos:end="83:25"><name pos:start="83:20" pos:end="83:22">buf</name><index pos:start="83:23" pos:end="83:25">[<expr pos:start="83:24" pos:end="83:24"><literal type="number" pos:start="83:24" pos:end="83:24">1</literal></expr>]</index></name> <operator pos:start="83:27" pos:end="83:27">&amp;</operator> <literal type="number" pos:start="83:29" pos:end="83:32">0x7f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:34"><expr pos:start="85:5" pos:end="85:33"><name pos:start="85:5" pos:end="85:7">seq</name>  <operator pos:start="85:10" pos:end="85:10">=</operator> <operator pos:start="85:12" pos:end="85:12">(</operator><name pos:start="85:13" pos:end="85:18"><name pos:start="85:13" pos:end="85:15">buf</name><index pos:start="85:16" pos:end="85:18">[<expr pos:start="85:17" pos:end="85:17"><literal type="number" pos:start="85:17" pos:end="85:17">2</literal></expr>]</index></name> <operator pos:start="85:20" pos:end="85:21">&lt;&lt;</operator> <literal type="number" pos:start="85:23" pos:end="85:23">8</literal><operator pos:start="85:24" pos:end="85:24">)</operator> <operator pos:start="85:26" pos:end="85:26">|</operator> <name pos:start="85:28" pos:end="85:33"><name pos:start="85:28" pos:end="85:30">buf</name><index pos:start="85:31" pos:end="85:33">[<expr pos:start="85:32" pos:end="85:32"><literal type="number" pos:start="85:32" pos:end="85:32">3</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:37"><expr pos:start="87:5" pos:end="87:36"><name pos:start="87:5" pos:end="87:13">timestamp</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <call pos:start="87:17" pos:end="87:36"><name pos:start="87:17" pos:end="87:27">decode_be32</name><argument_list pos:start="87:28" pos:end="87:36">(<argument pos:start="87:29" pos:end="87:35"><expr pos:start="87:29" pos:end="87:35"><name pos:start="87:29" pos:end="87:31">buf</name> <operator pos:start="87:33" pos:end="87:33">+</operator> <literal type="number" pos:start="87:35" pos:end="87:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:32"><expr pos:start="89:5" pos:end="89:31"><name pos:start="89:5" pos:end="89:8">ssrc</name> <operator pos:start="89:10" pos:end="89:10">=</operator> <call pos:start="89:12" pos:end="89:31"><name pos:start="89:12" pos:end="89:22">decode_be32</name><argument_list pos:start="89:23" pos:end="89:31">(<argument pos:start="89:24" pos:end="89:30"><expr pos:start="89:24" pos:end="89:30"><name pos:start="89:24" pos:end="89:26">buf</name> <operator pos:start="89:28" pos:end="89:28">+</operator> <literal type="number" pos:start="89:30" pos:end="89:30">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="91:5" pos:end="91:47">/* store the ssrc in the RTPDemuxContext */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:19"><expr pos:start="93:5" pos:end="93:18"><name pos:start="93:5" pos:end="93:11"><name pos:start="93:5" pos:end="93:5">s</name><operator pos:start="93:6" pos:end="93:7">-&gt;</operator><name pos:start="93:8" pos:end="93:11">ssrc</name></name> <operator pos:start="93:13" pos:end="93:13">=</operator> <name pos:start="93:15" pos:end="93:18">ssrc</name></expr>;</expr_stmt>



    <comment type="block" pos:start="97:5" pos:end="97:51">/* NOTE: we can handle only one payload type */</comment>

    <if_stmt pos:start="99:5" pos:end="101:18"><if pos:start="99:5" pos:end="101:18">if <condition pos:start="99:8" pos:end="99:40">(<expr pos:start="99:9" pos:end="99:39"><name pos:start="99:9" pos:end="99:23"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:23">payload_type</name></name> <operator pos:start="99:25" pos:end="99:26">!=</operator> <name pos:start="99:28" pos:end="99:39">payload_type</name></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:18"><block_content pos:start="101:9" pos:end="101:18">

        <return pos:start="101:9" pos:end="101:18">return <expr pos:start="101:16" pos:end="101:17"><operator pos:start="101:16" pos:end="101:16">-</operator><literal type="number" pos:start="101:17" pos:end="101:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="108:0"><expr pos:start="105:5" pos:end="105:14"><name pos:start="105:5" pos:end="105:6">st</name> <operator pos:start="105:8" pos:end="105:8">=</operator> <name pos:start="105:10" pos:end="105:14"><name pos:start="105:10" pos:end="105:10">s</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:14">st</name></name></expr>;</expr_stmt>

<cpp:if pos:start="107:1" pos:end="107:23">#<cpp:directive pos:start="107:2" pos:end="107:3">if</cpp:directive> <expr pos:start="107:5" pos:end="107:23"><call pos:start="107:5" pos:end="107:18"><name pos:start="107:5" pos:end="107:11">defined</name><argument_list pos:start="107:12" pos:end="107:18">(<argument pos:start="107:13" pos:end="107:17"><expr pos:start="107:13" pos:end="107:17"><name pos:start="107:13" pos:end="107:17">DEBUG</name></expr></argument>)</argument_list></call> <operator pos:start="107:20" pos:end="107:21">||</operator> <literal type="number" pos:start="107:23" pos:end="107:23">1</literal></expr></cpp:if>

    <if_stmt pos:start="109:5" pos:end="118:0"><if pos:start="109:5" pos:end="118:0">if <condition pos:start="109:8" pos:end="109:39">(<expr pos:start="109:9" pos:end="109:38"><name pos:start="109:9" pos:end="109:11">seq</name> <operator pos:start="109:13" pos:end="109:14">!=</operator> <operator pos:start="109:16" pos:end="109:16">(</operator><operator pos:start="109:17" pos:end="109:17">(</operator><name pos:start="109:18" pos:end="109:23"><name pos:start="109:18" pos:end="109:18">s</name><operator pos:start="109:19" pos:end="109:20">-&gt;</operator><name pos:start="109:21" pos:end="109:23">seq</name></name> <operator pos:start="109:25" pos:end="109:25">+</operator> <literal type="number" pos:start="109:27" pos:end="109:27">1</literal><operator pos:start="109:28" pos:end="109:28">)</operator> <operator pos:start="109:30" pos:end="109:30">&amp;</operator> <literal type="number" pos:start="109:32" pos:end="109:37">0xffff</literal><operator pos:start="109:38" pos:end="109:38">)</operator></expr>)</condition> <block pos:start="109:41" pos:end="118:0">{<block_content pos:start="111:9" pos:end="113:59">

        <expr_stmt pos:start="111:9" pos:end="113:59"><expr pos:start="111:9" pos:end="113:58"><call pos:start="111:9" pos:end="113:58"><name pos:start="111:9" pos:end="111:14">av_log</name><argument_list pos:start="111:15" pos:end="113:58">(<argument pos:start="111:16" pos:end="111:32"><expr pos:start="111:16" pos:end="111:32"><ternary pos:start="111:16" pos:end="111:32"><condition pos:start="111:16" pos:end="111:18"><expr pos:start="111:16" pos:end="111:17"><name pos:start="111:16" pos:end="111:17">st</name></expr>?</condition><then pos:start="111:19" pos:end="111:27"><expr pos:start="111:19" pos:end="111:27"><name pos:start="111:19" pos:end="111:27"><name pos:start="111:19" pos:end="111:20">st</name><operator pos:start="111:21" pos:end="111:22">-&gt;</operator><name pos:start="111:23" pos:end="111:27">codec</name></name></expr></then><else pos:start="111:28" pos:end="111:32">:<expr pos:start="111:29" pos:end="111:32"><name pos:start="111:29" pos:end="111:32">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="111:35" pos:end="111:46"><expr pos:start="111:35" pos:end="111:46"><name pos:start="111:35" pos:end="111:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="111:49" pos:end="111:93"><expr pos:start="111:49" pos:end="111:93"><literal type="string" pos:start="111:49" pos:end="111:93">"RTP: PT=%02x: bad cseq %04x expected=%04x\n"</literal></expr></argument>,

               <argument pos:start="113:16" pos:end="113:27"><expr pos:start="113:16" pos:end="113:27"><name pos:start="113:16" pos:end="113:27">payload_type</name></expr></argument>, <argument pos:start="113:30" pos:end="113:32"><expr pos:start="113:30" pos:end="113:32"><name pos:start="113:30" pos:end="113:32">seq</name></expr></argument>, <argument pos:start="113:35" pos:end="113:57"><expr pos:start="113:35" pos:end="113:57"><operator pos:start="113:35" pos:end="113:35">(</operator><operator pos:start="113:36" pos:end="113:36">(</operator><name pos:start="113:37" pos:end="113:42"><name pos:start="113:37" pos:end="113:37">s</name><operator pos:start="113:38" pos:end="113:39">-&gt;</operator><name pos:start="113:40" pos:end="113:42">seq</name></name> <operator pos:start="113:44" pos:end="113:44">+</operator> <literal type="number" pos:start="113:46" pos:end="113:46">1</literal><operator pos:start="113:47" pos:end="113:47">)</operator> <operator pos:start="113:49" pos:end="113:49">&amp;</operator> <literal type="number" pos:start="113:51" pos:end="113:56">0xffff</literal><operator pos:start="113:57" pos:end="113:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="119:5" pos:end="119:17"><expr pos:start="119:5" pos:end="119:16"><name pos:start="119:5" pos:end="119:10"><name pos:start="119:5" pos:end="119:5">s</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:10">seq</name></name> <operator pos:start="119:12" pos:end="119:12">=</operator> <name pos:start="119:14" pos:end="119:16">seq</name></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:14"><expr pos:start="121:5" pos:end="121:13"><name pos:start="121:5" pos:end="121:7">len</name> <operator pos:start="121:9" pos:end="121:10">-=</operator> <literal type="number" pos:start="121:12" pos:end="121:13">12</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:14"><expr pos:start="123:5" pos:end="123:13"><name pos:start="123:5" pos:end="123:7">buf</name> <operator pos:start="123:9" pos:end="123:10">+=</operator> <literal type="number" pos:start="123:12" pos:end="123:13">12</literal></expr>;</expr_stmt>



    <if_stmt pos:start="127:5" pos:end="281:5"><if pos:start="127:5" pos:end="149:5">if <condition pos:start="127:8" pos:end="127:12">(<expr pos:start="127:9" pos:end="127:11"><operator pos:start="127:9" pos:end="127:9">!</operator><name pos:start="127:10" pos:end="127:11">st</name></expr>)</condition> <block pos:start="127:14" pos:end="149:5">{<block_content pos:start="131:9" pos:end="147:9">

        <comment type="block" pos:start="129:9" pos:end="129:44">/* specific MPEG2TS demux support */</comment>

        <expr_stmt pos:start="131:9" pos:end="131:56"><expr pos:start="131:9" pos:end="131:55"><name pos:start="131:9" pos:end="131:11">ret</name> <operator pos:start="131:13" pos:end="131:13">=</operator> <call pos:start="131:15" pos:end="131:55"><name pos:start="131:15" pos:end="131:33">mpegts_parse_packet</name><argument_list pos:start="131:34" pos:end="131:55">(<argument pos:start="131:35" pos:end="131:39"><expr pos:start="131:35" pos:end="131:39"><name pos:start="131:35" pos:end="131:39"><name pos:start="131:35" pos:end="131:35">s</name><operator pos:start="131:36" pos:end="131:37">-&gt;</operator><name pos:start="131:38" pos:end="131:39">ts</name></name></expr></argument>, <argument pos:start="131:42" pos:end="131:44"><expr pos:start="131:42" pos:end="131:44"><name pos:start="131:42" pos:end="131:44">pkt</name></expr></argument>, <argument pos:start="131:47" pos:end="131:49"><expr pos:start="131:47" pos:end="131:49"><name pos:start="131:47" pos:end="131:49">buf</name></expr></argument>, <argument pos:start="131:52" pos:end="131:54"><expr pos:start="131:52" pos:end="131:54"><name pos:start="131:52" pos:end="131:54">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="135:22"><if pos:start="133:9" pos:end="135:22">if <condition pos:start="133:12" pos:end="133:20">(<expr pos:start="133:13" pos:end="133:19"><name pos:start="133:13" pos:end="133:15">ret</name> <operator pos:start="133:17" pos:end="133:17">&lt;</operator> <literal type="number" pos:start="133:19" pos:end="133:19">0</literal></expr>)</condition><block type="pseudo" pos:start="135:13" pos:end="135:22"><block_content pos:start="135:13" pos:end="135:22">

            <return pos:start="135:13" pos:end="135:22">return <expr pos:start="135:20" pos:end="135:21"><operator pos:start="135:20" pos:end="135:20">-</operator><literal type="number" pos:start="135:21" pos:end="135:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="137:9" pos:end="147:9"><if pos:start="137:9" pos:end="147:9">if <condition pos:start="137:12" pos:end="137:22">(<expr pos:start="137:13" pos:end="137:21"><name pos:start="137:13" pos:end="137:15">ret</name> <operator pos:start="137:17" pos:end="137:17">&lt;</operator> <name pos:start="137:19" pos:end="137:21">len</name></expr>)</condition> <block pos:start="137:24" pos:end="147:9">{<block_content pos:start="139:13" pos:end="145:21">

            <expr_stmt pos:start="139:13" pos:end="139:41"><expr pos:start="139:13" pos:end="139:40"><name pos:start="139:13" pos:end="139:28"><name pos:start="139:13" pos:end="139:13">s</name><operator pos:start="139:14" pos:end="139:15">-&gt;</operator><name pos:start="139:16" pos:end="139:28">read_buf_size</name></name> <operator pos:start="139:30" pos:end="139:30">=</operator> <name pos:start="139:32" pos:end="139:34">len</name> <operator pos:start="139:36" pos:end="139:36">-</operator> <name pos:start="139:38" pos:end="139:40">ret</name></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:56"><expr pos:start="141:13" pos:end="141:55"><call pos:start="141:13" pos:end="141:55"><name pos:start="141:13" pos:end="141:18">memcpy</name><argument_list pos:start="141:19" pos:end="141:55">(<argument pos:start="141:20" pos:end="141:25"><expr pos:start="141:20" pos:end="141:25"><name pos:start="141:20" pos:end="141:25"><name pos:start="141:20" pos:end="141:20">s</name><operator pos:start="141:21" pos:end="141:22">-&gt;</operator><name pos:start="141:23" pos:end="141:25">buf</name></name></expr></argument>, <argument pos:start="141:28" pos:end="141:36"><expr pos:start="141:28" pos:end="141:36"><name pos:start="141:28" pos:end="141:30">buf</name> <operator pos:start="141:32" pos:end="141:32">+</operator> <name pos:start="141:34" pos:end="141:36">ret</name></expr></argument>, <argument pos:start="141:39" pos:end="141:54"><expr pos:start="141:39" pos:end="141:54"><name pos:start="141:39" pos:end="141:54"><name pos:start="141:39" pos:end="141:39">s</name><operator pos:start="141:40" pos:end="141:41">-&gt;</operator><name pos:start="141:42" pos:end="141:54">read_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:34"><expr pos:start="143:13" pos:end="143:33"><name pos:start="143:13" pos:end="143:29"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:29">read_buf_index</name></name> <operator pos:start="143:31" pos:end="143:31">=</operator> <literal type="number" pos:start="143:33" pos:end="143:33">0</literal></expr>;</expr_stmt>

            <return pos:start="145:13" pos:end="145:21">return <expr pos:start="145:20" pos:end="145:20"><literal type="number" pos:start="145:20" pos:end="145:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="149:7" pos:end="281:5">else <block pos:start="149:12" pos:end="281:5">{<block_content pos:start="153:9" pos:end="279:43">

        <comment type="line" pos:start="151:9" pos:end="151:121">// at this point, the RTP header has been stripped;  This is ASSUMING that there is only 1 CSRC, which in't wise.</comment>

        <switch pos:start="153:9" pos:end="273:9">switch<condition pos:start="153:15" pos:end="153:35">(<expr pos:start="153:16" pos:end="153:34"><name pos:start="153:16" pos:end="153:34"><name pos:start="153:16" pos:end="153:17">st</name><operator pos:start="153:18" pos:end="153:19">-&gt;</operator><name pos:start="153:20" pos:end="153:24">codec</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:34">codec_id</name></name></expr>)</condition> <block pos:start="153:37" pos:end="273:9">{<block_content pos:start="155:9" pos:end="271:18">

        <case pos:start="155:9" pos:end="155:26">case <expr pos:start="155:14" pos:end="155:25"><name pos:start="155:14" pos:end="155:25">CODEC_ID_MP2</name></expr>:</case>

            <comment type="block" pos:start="157:13" pos:end="157:65">/* better than nothing: skip mpeg audio RTP header */</comment>

            <if_stmt pos:start="159:13" pos:end="161:26"><if pos:start="159:13" pos:end="161:26">if <condition pos:start="159:16" pos:end="159:25">(<expr pos:start="159:17" pos:end="159:24"><name pos:start="159:17" pos:end="159:19">len</name> <operator pos:start="159:21" pos:end="159:22">&lt;=</operator> <literal type="number" pos:start="159:24" pos:end="159:24">4</literal></expr>)</condition><block type="pseudo" pos:start="161:17" pos:end="161:26"><block_content pos:start="161:17" pos:end="161:26">

                <return pos:start="161:17" pos:end="161:26">return <expr pos:start="161:24" pos:end="161:25"><operator pos:start="161:24" pos:end="161:24">-</operator><literal type="number" pos:start="161:25" pos:end="161:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:33"><expr pos:start="163:13" pos:end="163:32"><name pos:start="163:13" pos:end="163:13">h</name> <operator pos:start="163:15" pos:end="163:15">=</operator> <call pos:start="163:17" pos:end="163:32"><name pos:start="163:17" pos:end="163:27">decode_be32</name><argument_list pos:start="163:28" pos:end="163:32">(<argument pos:start="163:29" pos:end="163:31"><expr pos:start="163:29" pos:end="163:31"><name pos:start="163:29" pos:end="163:31">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:21"><expr pos:start="165:13" pos:end="165:20"><name pos:start="165:13" pos:end="165:15">len</name> <operator pos:start="165:17" pos:end="165:18">-=</operator> <literal type="number" pos:start="165:20" pos:end="165:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:21"><expr pos:start="167:13" pos:end="167:20"><name pos:start="167:13" pos:end="167:15">buf</name> <operator pos:start="167:17" pos:end="167:18">+=</operator> <literal type="number" pos:start="167:20" pos:end="167:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:36"><expr pos:start="169:13" pos:end="169:35"><call pos:start="169:13" pos:end="169:35"><name pos:start="169:13" pos:end="169:25">av_new_packet</name><argument_list pos:start="169:26" pos:end="169:35">(<argument pos:start="169:27" pos:end="169:29"><expr pos:start="169:27" pos:end="169:29"><name pos:start="169:27" pos:end="169:29">pkt</name></expr></argument>, <argument pos:start="169:32" pos:end="169:34"><expr pos:start="169:32" pos:end="169:34"><name pos:start="169:32" pos:end="169:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:40"><expr pos:start="171:13" pos:end="171:39"><call pos:start="171:13" pos:end="171:39"><name pos:start="171:13" pos:end="171:18">memcpy</name><argument_list pos:start="171:19" pos:end="171:39">(<argument pos:start="171:20" pos:end="171:28"><expr pos:start="171:20" pos:end="171:28"><name pos:start="171:20" pos:end="171:28"><name pos:start="171:20" pos:end="171:22">pkt</name><operator pos:start="171:23" pos:end="171:24">-&gt;</operator><name pos:start="171:25" pos:end="171:28">data</name></name></expr></argument>, <argument pos:start="171:31" pos:end="171:33"><expr pos:start="171:31" pos:end="171:33"><name pos:start="171:31" pos:end="171:33">buf</name></expr></argument>, <argument pos:start="171:36" pos:end="171:38"><expr pos:start="171:36" pos:end="171:38"><name pos:start="171:36" pos:end="171:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="173:13" pos:end="173:18">break;</break>

        <case pos:start="175:9" pos:end="175:33">case <expr pos:start="175:14" pos:end="175:32"><name pos:start="175:14" pos:end="175:32">CODEC_ID_MPEG1VIDEO</name></expr>:</case>

            <comment type="block" pos:start="177:13" pos:end="177:65">/* better than nothing: skip mpeg video RTP header */</comment>

            <if_stmt pos:start="179:13" pos:end="181:26"><if pos:start="179:13" pos:end="181:26">if <condition pos:start="179:16" pos:end="179:25">(<expr pos:start="179:17" pos:end="179:24"><name pos:start="179:17" pos:end="179:19">len</name> <operator pos:start="179:21" pos:end="179:22">&lt;=</operator> <literal type="number" pos:start="179:24" pos:end="179:24">4</literal></expr>)</condition><block type="pseudo" pos:start="181:17" pos:end="181:26"><block_content pos:start="181:17" pos:end="181:26">

                <return pos:start="181:17" pos:end="181:26">return <expr pos:start="181:24" pos:end="181:25"><operator pos:start="181:24" pos:end="181:24">-</operator><literal type="number" pos:start="181:25" pos:end="181:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:33"><expr pos:start="183:13" pos:end="183:32"><name pos:start="183:13" pos:end="183:13">h</name> <operator pos:start="183:15" pos:end="183:15">=</operator> <call pos:start="183:17" pos:end="183:32"><name pos:start="183:17" pos:end="183:27">decode_be32</name><argument_list pos:start="183:28" pos:end="183:32">(<argument pos:start="183:29" pos:end="183:31"><expr pos:start="183:29" pos:end="183:31"><name pos:start="183:29" pos:end="183:31">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:21"><expr pos:start="185:13" pos:end="185:20"><name pos:start="185:13" pos:end="185:15">buf</name> <operator pos:start="185:17" pos:end="185:18">+=</operator> <literal type="number" pos:start="185:20" pos:end="185:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:21"><expr pos:start="187:13" pos:end="187:20"><name pos:start="187:13" pos:end="187:15">len</name> <operator pos:start="187:17" pos:end="187:18">-=</operator> <literal type="number" pos:start="187:20" pos:end="187:20">4</literal></expr>;</expr_stmt>

            <if_stmt pos:start="189:13" pos:end="201:13"><if pos:start="189:13" pos:end="201:13">if <condition pos:start="189:16" pos:end="189:30">(<expr pos:start="189:17" pos:end="189:29"><name pos:start="189:17" pos:end="189:17">h</name> <operator pos:start="189:19" pos:end="189:19">&amp;</operator> <operator pos:start="189:21" pos:end="189:21">(</operator><literal type="number" pos:start="189:22" pos:end="189:22">1</literal> <operator pos:start="189:24" pos:end="189:25">&lt;&lt;</operator> <literal type="number" pos:start="189:27" pos:end="189:28">26</literal><operator pos:start="189:29" pos:end="189:29">)</operator></expr>)</condition> <block pos:start="189:32" pos:end="201:13">{<block_content pos:start="193:17" pos:end="199:25">

                <comment type="block" pos:start="191:17" pos:end="191:27">/* mpeg2 */</comment>

                <if_stmt pos:start="193:17" pos:end="195:30"><if pos:start="193:17" pos:end="195:30">if <condition pos:start="193:20" pos:end="193:29">(<expr pos:start="193:21" pos:end="193:28"><name pos:start="193:21" pos:end="193:23">len</name> <operator pos:start="193:25" pos:end="193:26">&lt;=</operator> <literal type="number" pos:start="193:28" pos:end="193:28">4</literal></expr>)</condition><block type="pseudo" pos:start="195:21" pos:end="195:30"><block_content pos:start="195:21" pos:end="195:30">

                    <return pos:start="195:21" pos:end="195:30">return <expr pos:start="195:28" pos:end="195:29"><operator pos:start="195:28" pos:end="195:28">-</operator><literal type="number" pos:start="195:29" pos:end="195:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:25"><expr pos:start="197:17" pos:end="197:24"><name pos:start="197:17" pos:end="197:19">buf</name> <operator pos:start="197:21" pos:end="197:22">+=</operator> <literal type="number" pos:start="197:24" pos:end="197:24">4</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:25"><expr pos:start="199:17" pos:end="199:24"><name pos:start="199:17" pos:end="199:19">len</name> <operator pos:start="199:21" pos:end="199:22">-=</operator> <literal type="number" pos:start="199:24" pos:end="199:24">4</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:36"><expr pos:start="203:13" pos:end="203:35"><call pos:start="203:13" pos:end="203:35"><name pos:start="203:13" pos:end="203:25">av_new_packet</name><argument_list pos:start="203:26" pos:end="203:35">(<argument pos:start="203:27" pos:end="203:29"><expr pos:start="203:27" pos:end="203:29"><name pos:start="203:27" pos:end="203:29">pkt</name></expr></argument>, <argument pos:start="203:32" pos:end="203:34"><expr pos:start="203:32" pos:end="203:34"><name pos:start="203:32" pos:end="203:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:40"><expr pos:start="205:13" pos:end="205:39"><call pos:start="205:13" pos:end="205:39"><name pos:start="205:13" pos:end="205:18">memcpy</name><argument_list pos:start="205:19" pos:end="205:39">(<argument pos:start="205:20" pos:end="205:28"><expr pos:start="205:20" pos:end="205:28"><name pos:start="205:20" pos:end="205:28"><name pos:start="205:20" pos:end="205:22">pkt</name><operator pos:start="205:23" pos:end="205:24">-&gt;</operator><name pos:start="205:25" pos:end="205:28">data</name></name></expr></argument>, <argument pos:start="205:31" pos:end="205:33"><expr pos:start="205:31" pos:end="205:33"><name pos:start="205:31" pos:end="205:33">buf</name></expr></argument>, <argument pos:start="205:36" pos:end="205:38"><expr pos:start="205:36" pos:end="205:38"><name pos:start="205:36" pos:end="205:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="207:13" pos:end="207:18">break;</break>

            <comment type="line" pos:start="209:13" pos:end="209:118">// moved from below, verbatim.  this is because this section handles packets, and the lower switch handles</comment>

            <comment type="line" pos:start="211:13" pos:end="211:26">// timestamps.</comment>

            <comment type="line" pos:start="213:13" pos:end="213:62">// TODO: Put this into a dynamic packet handler...</comment>

        <case pos:start="215:9" pos:end="215:31">case <expr pos:start="215:14" pos:end="215:30"><name pos:start="215:14" pos:end="215:30">CODEC_ID_MPEG4AAC</name></expr>:</case>

            <if_stmt pos:start="217:13" pos:end="219:26"><if pos:start="217:13" pos:end="219:26">if <condition pos:start="217:16" pos:end="217:41">(<expr pos:start="217:17" pos:end="217:40"><call pos:start="217:17" pos:end="217:40"><name pos:start="217:17" pos:end="217:32">rtp_parse_mp4_au</name><argument_list pos:start="217:33" pos:end="217:40">(<argument pos:start="217:34" pos:end="217:34"><expr pos:start="217:34" pos:end="217:34"><name pos:start="217:34" pos:end="217:34">s</name></expr></argument>, <argument pos:start="217:37" pos:end="217:39"><expr pos:start="217:37" pos:end="217:39"><name pos:start="217:37" pos:end="217:39">buf</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="219:17" pos:end="219:26"><block_content pos:start="219:17" pos:end="219:26">

                <return pos:start="219:17" pos:end="219:26">return <expr pos:start="219:24" pos:end="219:25"><operator pos:start="219:24" pos:end="219:24">-</operator><literal type="number" pos:start="219:25" pos:end="219:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <block pos:start="221:13" pos:end="247:13">{<block_content pos:start="223:17" pos:end="245:49">

                <decl_stmt pos:start="223:17" pos:end="223:64"><decl pos:start="223:17" pos:end="223:63"><type pos:start="223:17" pos:end="223:36"><name pos:start="223:17" pos:end="223:34">rtp_payload_data_t</name> <modifier pos:start="223:36" pos:end="223:36">*</modifier></type><name pos:start="223:37" pos:end="223:41">infos</name> <init pos:start="223:43" pos:end="223:63">= <expr pos:start="223:45" pos:end="223:63"><name pos:start="223:45" pos:end="223:63"><name pos:start="223:45" pos:end="223:45">s</name><operator pos:start="223:46" pos:end="223:47">-&gt;</operator><name pos:start="223:48" pos:end="223:63">rtp_payload_data</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="225:17" pos:end="227:30"><if pos:start="225:17" pos:end="227:30">if <condition pos:start="225:20" pos:end="225:34">(<expr pos:start="225:21" pos:end="225:33"><name pos:start="225:21" pos:end="225:25">infos</name> <operator pos:start="225:27" pos:end="225:28">==</operator> <name pos:start="225:30" pos:end="225:33">NULL</name></expr>)</condition><block type="pseudo" pos:start="227:21" pos:end="227:30"><block_content pos:start="227:21" pos:end="227:30">

                    <return pos:start="227:21" pos:end="227:30">return <expr pos:start="227:28" pos:end="227:29"><operator pos:start="227:28" pos:end="227:28">-</operator><literal type="number" pos:start="227:29" pos:end="227:29">1</literal></expr>;</return></block_content></block></if></if_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:58"><expr pos:start="229:17" pos:end="229:57"><name pos:start="229:17" pos:end="229:19">buf</name> <operator pos:start="229:21" pos:end="229:22">+=</operator> <name pos:start="229:24" pos:end="229:53"><name pos:start="229:24" pos:end="229:28">infos</name><operator pos:start="229:29" pos:end="229:30">-&gt;</operator><name pos:start="229:31" pos:end="229:53">au_headers_length_bytes</name></name> <operator pos:start="229:55" pos:end="229:55">+</operator> <literal type="number" pos:start="229:57" pos:end="229:57">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="231:17" pos:end="231:58"><expr pos:start="231:17" pos:end="231:57"><name pos:start="231:17" pos:end="231:19">len</name> <operator pos:start="231:21" pos:end="231:22">-=</operator> <name pos:start="231:24" pos:end="231:53"><name pos:start="231:24" pos:end="231:28">infos</name><operator pos:start="231:29" pos:end="231:30">-&gt;</operator><name pos:start="231:31" pos:end="231:53">au_headers_length_bytes</name></name> <operator pos:start="231:55" pos:end="231:55">+</operator> <literal type="number" pos:start="231:57" pos:end="231:57">2</literal></expr>;</expr_stmt>



                <comment type="block" pos:start="235:17" pos:end="237:36">/* XXX: Fixme we only handle the case where rtp_parse_mp4_au define

                    one au_header */</comment>

                <expr_stmt pos:start="239:17" pos:end="239:62"><expr pos:start="239:17" pos:end="239:61"><call pos:start="239:17" pos:end="239:61"><name pos:start="239:17" pos:end="239:29">av_new_packet</name><argument_list pos:start="239:30" pos:end="239:61">(<argument pos:start="239:31" pos:end="239:33"><expr pos:start="239:31" pos:end="239:33"><name pos:start="239:31" pos:end="239:33">pkt</name></expr></argument>, <argument pos:start="239:36" pos:end="239:60"><expr pos:start="239:36" pos:end="239:60"><name pos:start="239:36" pos:end="239:55"><name pos:start="239:36" pos:end="239:40">infos</name><operator pos:start="239:41" pos:end="239:42">-&gt;</operator><name pos:start="239:43" pos:end="239:52">au_headers</name><index pos:start="239:53" pos:end="239:55">[<expr pos:start="239:54" pos:end="239:54"><literal type="number" pos:start="239:54" pos:end="239:54">0</literal></expr>]</index></name><operator pos:start="239:56" pos:end="239:56">.</operator><name pos:start="239:57" pos:end="239:60">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="241:17" pos:end="241:66"><expr pos:start="241:17" pos:end="241:65"><call pos:start="241:17" pos:end="241:65"><name pos:start="241:17" pos:end="241:22">memcpy</name><argument_list pos:start="241:23" pos:end="241:65">(<argument pos:start="241:24" pos:end="241:32"><expr pos:start="241:24" pos:end="241:32"><name pos:start="241:24" pos:end="241:32"><name pos:start="241:24" pos:end="241:26">pkt</name><operator pos:start="241:27" pos:end="241:28">-&gt;</operator><name pos:start="241:29" pos:end="241:32">data</name></name></expr></argument>, <argument pos:start="241:35" pos:end="241:37"><expr pos:start="241:35" pos:end="241:37"><name pos:start="241:35" pos:end="241:37">buf</name></expr></argument>, <argument pos:start="241:40" pos:end="241:64"><expr pos:start="241:40" pos:end="241:64"><name pos:start="241:40" pos:end="241:59"><name pos:start="241:40" pos:end="241:44">infos</name><operator pos:start="241:45" pos:end="241:46">-&gt;</operator><name pos:start="241:47" pos:end="241:56">au_headers</name><index pos:start="241:57" pos:end="241:59">[<expr pos:start="241:58" pos:end="241:58"><literal type="number" pos:start="241:58" pos:end="241:58">0</literal></expr>]</index></name><operator pos:start="241:60" pos:end="241:60">.</operator><name pos:start="241:61" pos:end="241:64">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:49"><expr pos:start="243:17" pos:end="243:48"><name pos:start="243:17" pos:end="243:19">buf</name> <operator pos:start="243:21" pos:end="243:22">+=</operator> <name pos:start="243:24" pos:end="243:43"><name pos:start="243:24" pos:end="243:28">infos</name><operator pos:start="243:29" pos:end="243:30">-&gt;</operator><name pos:start="243:31" pos:end="243:40">au_headers</name><index pos:start="243:41" pos:end="243:43">[<expr pos:start="243:42" pos:end="243:42"><literal type="number" pos:start="243:42" pos:end="243:42">0</literal></expr>]</index></name><operator pos:start="243:44" pos:end="243:44">.</operator><name pos:start="243:45" pos:end="243:48">size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="245:17" pos:end="245:49"><expr pos:start="245:17" pos:end="245:48"><name pos:start="245:17" pos:end="245:19">len</name> <operator pos:start="245:21" pos:end="245:22">-=</operator> <name pos:start="245:24" pos:end="245:43"><name pos:start="245:24" pos:end="245:28">infos</name><operator pos:start="245:29" pos:end="245:30">-&gt;</operator><name pos:start="245:31" pos:end="245:40">au_headers</name><index pos:start="245:41" pos:end="245:43">[<expr pos:start="245:42" pos:end="245:42"><literal type="number" pos:start="245:42" pos:end="245:42">0</literal></expr>]</index></name><operator pos:start="245:44" pos:end="245:44">.</operator><name pos:start="245:45" pos:end="245:48">size</name></expr>;</expr_stmt>

            </block_content>}</block>

            <expr_stmt pos:start="249:13" pos:end="249:35"><expr pos:start="249:13" pos:end="249:34"><name pos:start="249:13" pos:end="249:28"><name pos:start="249:13" pos:end="249:13">s</name><operator pos:start="249:14" pos:end="249:15">-&gt;</operator><name pos:start="249:16" pos:end="249:28">read_buf_size</name></name> <operator pos:start="249:30" pos:end="249:30">=</operator> <name pos:start="249:32" pos:end="249:34">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:29"><expr pos:start="251:13" pos:end="251:28"><name pos:start="251:13" pos:end="251:22"><name pos:start="251:13" pos:end="251:13">s</name><operator pos:start="251:14" pos:end="251:15">-&gt;</operator><name pos:start="251:16" pos:end="251:22">buf_ptr</name></name> <operator pos:start="251:24" pos:end="251:24">=</operator> <name pos:start="251:26" pos:end="251:28">buf</name></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:18"><expr pos:start="253:13" pos:end="253:17"><name pos:start="253:13" pos:end="253:14">rv</name><operator pos:start="253:15" pos:end="253:15">=</operator> <literal type="number" pos:start="253:17" pos:end="253:17">0</literal></expr>;</expr_stmt>

            <break pos:start="255:13" pos:end="255:18">break;</break>

        <default pos:start="257:9" pos:end="257:16">default:</default>

            <if_stmt pos:start="259:13" pos:end="269:13"><if pos:start="259:13" pos:end="263:13">if<condition pos:start="259:15" pos:end="259:31">(<expr pos:start="259:16" pos:end="259:30"><name pos:start="259:16" pos:end="259:30"><name pos:start="259:16" pos:end="259:16">s</name><operator pos:start="259:17" pos:end="259:18">-&gt;</operator><name pos:start="259:19" pos:end="259:30">parse_packet</name></name></expr>)</condition> <block pos:start="259:33" pos:end="263:13">{<block_content pos:start="261:17" pos:end="261:66">

                <expr_stmt pos:start="261:17" pos:end="261:66"><expr pos:start="261:17" pos:end="261:65"><name pos:start="261:17" pos:end="261:18">rv</name><operator pos:start="261:19" pos:end="261:19">=</operator> <call pos:start="261:21" pos:end="261:65"><name pos:start="261:21" pos:end="261:35"><name pos:start="261:21" pos:end="261:21">s</name><operator pos:start="261:22" pos:end="261:23">-&gt;</operator><name pos:start="261:24" pos:end="261:35">parse_packet</name></name><argument_list pos:start="261:36" pos:end="261:65">(<argument pos:start="261:37" pos:end="261:37"><expr pos:start="261:37" pos:end="261:37"><name pos:start="261:37" pos:end="261:37">s</name></expr></argument>, <argument pos:start="261:40" pos:end="261:42"><expr pos:start="261:40" pos:end="261:42"><name pos:start="261:40" pos:end="261:42">pkt</name></expr></argument>, <argument pos:start="261:45" pos:end="261:54"><expr pos:start="261:45" pos:end="261:54"><operator pos:start="261:45" pos:end="261:45">&amp;</operator><name pos:start="261:46" pos:end="261:54">timestamp</name></expr></argument>, <argument pos:start="261:57" pos:end="261:59"><expr pos:start="261:57" pos:end="261:59"><name pos:start="261:57" pos:end="261:59">buf</name></expr></argument>, <argument pos:start="261:62" pos:end="261:64"><expr pos:start="261:62" pos:end="261:64"><name pos:start="261:62" pos:end="261:64">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="263:15" pos:end="269:13">else <block pos:start="263:20" pos:end="269:13">{<block_content pos:start="265:17" pos:end="267:44">

                <expr_stmt pos:start="265:17" pos:end="265:40"><expr pos:start="265:17" pos:end="265:39"><call pos:start="265:17" pos:end="265:39"><name pos:start="265:17" pos:end="265:29">av_new_packet</name><argument_list pos:start="265:30" pos:end="265:39">(<argument pos:start="265:31" pos:end="265:33"><expr pos:start="265:31" pos:end="265:33"><name pos:start="265:31" pos:end="265:33">pkt</name></expr></argument>, <argument pos:start="265:36" pos:end="265:38"><expr pos:start="265:36" pos:end="265:38"><name pos:start="265:36" pos:end="265:38">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="267:17" pos:end="267:44"><expr pos:start="267:17" pos:end="267:43"><call pos:start="267:17" pos:end="267:43"><name pos:start="267:17" pos:end="267:22">memcpy</name><argument_list pos:start="267:23" pos:end="267:43">(<argument pos:start="267:24" pos:end="267:32"><expr pos:start="267:24" pos:end="267:32"><name pos:start="267:24" pos:end="267:32"><name pos:start="267:24" pos:end="267:26">pkt</name><operator pos:start="267:27" pos:end="267:28">-&gt;</operator><name pos:start="267:29" pos:end="267:32">data</name></name></expr></argument>, <argument pos:start="267:35" pos:end="267:37"><expr pos:start="267:35" pos:end="267:37"><name pos:start="267:35" pos:end="267:37">buf</name></expr></argument>, <argument pos:start="267:40" pos:end="267:42"><expr pos:start="267:40" pos:end="267:42"><name pos:start="267:40" pos:end="267:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="271:13" pos:end="271:18">break;</break>

        </block_content>}</block></switch>



        <comment type="line" pos:start="277:9" pos:end="277:43">// now perform timestamp things....</comment>

        <expr_stmt pos:start="279:9" pos:end="279:43"><expr pos:start="279:9" pos:end="279:42"><call pos:start="279:9" pos:end="279:42"><name pos:start="279:9" pos:end="279:23">finalize_packet</name><argument_list pos:start="279:24" pos:end="279:42">(<argument pos:start="279:25" pos:end="279:25"><expr pos:start="279:25" pos:end="279:25"><name pos:start="279:25" pos:end="279:25">s</name></expr></argument>, <argument pos:start="279:28" pos:end="279:30"><expr pos:start="279:28" pos:end="279:30"><name pos:start="279:28" pos:end="279:30">pkt</name></expr></argument>, <argument pos:start="279:33" pos:end="279:41"><expr pos:start="279:33" pos:end="279:41"><name pos:start="279:33" pos:end="279:41">timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="283:5" pos:end="283:14">return <expr pos:start="283:12" pos:end="283:13"><name pos:start="283:12" pos:end="283:13">rv</name></expr>;</return>

</block_content>}</block></function>
</unit>
