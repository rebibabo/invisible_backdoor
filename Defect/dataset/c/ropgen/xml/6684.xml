<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6684.c" pos:tabs="8"><function pos:start="1:1" pos:end="95:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_block</name><parameter_list pos:start="1:24" pos:end="3:75">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:42">MJpegDecodeContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:61"><decl pos:start="1:48" pos:end="1:61"><type pos:start="1:48" pos:end="1:61"><name pos:start="1:48" pos:end="1:54">int16_t</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:61">block</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:76"><decl pos:start="1:64" pos:end="1:76"><type pos:start="1:64" pos:end="1:76"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:76">component</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:36"><decl pos:start="3:25" pos:end="3:36"><type pos:start="3:25" pos:end="3:36"><name pos:start="3:25" pos:end="3:27">int</name></type> <name pos:start="3:29" pos:end="3:36">dc_index</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:50"><decl pos:start="3:39" pos:end="3:50"><type pos:start="3:39" pos:end="3:50"><name pos:start="3:39" pos:end="3:41">int</name></type> <name pos:start="3:43" pos:end="3:50">ac_index</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:74"><decl pos:start="3:53" pos:end="3:74"><type pos:start="3:53" pos:end="3:74"><name pos:start="3:53" pos:end="3:60">uint16_t</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:74">quant_matrix</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:13">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">code</name></decl>, <decl pos:start="7:15" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:15">i</name></decl>, <decl pos:start="7:18" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:18">j</name></decl>, <decl pos:start="7:21" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:25">level</name></decl>, <decl pos:start="7:28" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:28" pos:end="7:30">val</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:17">/* DC coef */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:39"><expr pos:start="13:5" pos:end="13:38"><name pos:start="13:5" pos:end="13:7">val</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:38"><name pos:start="13:11" pos:end="13:25">mjpeg_decode_dc</name><argument_list pos:start="13:26" pos:end="13:38">(<argument pos:start="13:27" pos:end="13:27"><expr pos:start="13:27" pos:end="13:27"><name pos:start="13:27" pos:end="13:27">s</name></expr></argument>, <argument pos:start="13:30" pos:end="13:37"><expr pos:start="13:30" pos:end="13:37"><name pos:start="13:30" pos:end="13:37">dc_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><name pos:start="15:9" pos:end="15:11">val</name> <operator pos:start="15:13" pos:end="15:14">==</operator> <literal type="number" pos:start="15:16" pos:end="15:22">0xfffff</literal></expr>)</condition> <block pos:start="15:25" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:35">

        <expr_stmt pos:start="17:9" pos:end="17:53"><expr pos:start="17:9" pos:end="17:52"><call pos:start="17:9" pos:end="17:52"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:52">(<argument pos:start="17:16" pos:end="17:23"><expr pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:23"><name pos:start="17:16" pos:end="17:16">s</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:23">avctx</name></name></expr></argument>, <argument pos:start="17:26" pos:end="17:37"><expr pos:start="17:26" pos:end="17:37"><name pos:start="17:26" pos:end="17:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:40" pos:end="17:51"><expr pos:start="17:40" pos:end="17:51"><literal type="string" pos:start="17:40" pos:end="17:51">"error dc\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:35">return <expr pos:start="19:16" pos:end="19:34"><name pos:start="19:16" pos:end="19:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:56"><expr pos:start="23:5" pos:end="23:55"><name pos:start="23:5" pos:end="23:7">val</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <name pos:start="23:11" pos:end="23:13">val</name> <operator pos:start="23:15" pos:end="23:15">*</operator> <name pos:start="23:17" pos:end="23:31"><name pos:start="23:17" pos:end="23:28">quant_matrix</name><index pos:start="23:29" pos:end="23:31">[<expr pos:start="23:30" pos:end="23:30"><literal type="number" pos:start="23:30" pos:end="23:30">0</literal></expr>]</index></name> <operator pos:start="23:33" pos:end="23:33">+</operator> <name pos:start="23:35" pos:end="23:55"><name pos:start="23:35" pos:end="23:35">s</name><operator pos:start="23:36" pos:end="23:37">-&gt;</operator><name pos:start="23:38" pos:end="23:44">last_dc</name><index pos:start="23:45" pos:end="23:55">[<expr pos:start="23:46" pos:end="23:54"><name pos:start="23:46" pos:end="23:54">component</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:28"><expr pos:start="25:5" pos:end="25:27"><name pos:start="25:5" pos:end="25:7">val</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:27"><name pos:start="25:11" pos:end="25:15">FFMIN</name><argument_list pos:start="25:16" pos:end="25:27">(<argument pos:start="25:17" pos:end="25:19"><expr pos:start="25:17" pos:end="25:19"><name pos:start="25:17" pos:end="25:19">val</name></expr></argument>, <argument pos:start="25:22" pos:end="25:26"><expr pos:start="25:22" pos:end="25:26"><literal type="number" pos:start="25:22" pos:end="25:26">32767</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:32"><expr pos:start="27:5" pos:end="27:31"><name pos:start="27:5" pos:end="27:25"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:14">last_dc</name><index pos:start="27:15" pos:end="27:25">[<expr pos:start="27:16" pos:end="27:24"><name pos:start="27:16" pos:end="27:24">component</name></expr>]</index></name> <operator pos:start="27:27" pos:end="27:27">=</operator> <name pos:start="27:29" pos:end="27:31">val</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:19"><expr pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:12"><name pos:start="29:5" pos:end="29:9">block</name><index pos:start="29:10" pos:end="29:12">[<expr pos:start="29:11" pos:end="29:11"><literal type="number" pos:start="29:11" pos:end="29:11">0</literal></expr>]</index></name> <operator pos:start="29:14" pos:end="29:14">=</operator> <name pos:start="29:16" pos:end="29:18">val</name></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:18">/* AC coefs */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:10"><expr pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:5">i</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <literal type="number" pos:start="33:9" pos:end="33:9">0</literal></expr>;</expr_stmt>

    <block pos:start="35:5" pos:end="89:30">{<block_content pos:start="35:6" pos:end="89:29"><expr_stmt pos:start="35:6" pos:end="35:29"><expr pos:start="35:6" pos:end="35:28"><call pos:start="35:6" pos:end="35:28"><name pos:start="35:6" pos:end="35:16">OPEN_READER</name><argument_list pos:start="35:17" pos:end="35:28">(<argument pos:start="35:18" pos:end="35:19"><expr pos:start="35:18" pos:end="35:19"><name pos:start="35:18" pos:end="35:19">re</name></expr></argument>, <argument pos:start="35:22" pos:end="35:27"><expr pos:start="35:22" pos:end="35:27"><operator pos:start="35:22" pos:end="35:22">&amp;</operator><name pos:start="35:23" pos:end="35:27"><name pos:start="35:23" pos:end="35:23">s</name><operator pos:start="35:24" pos:end="35:25">-&gt;</operator><name pos:start="35:26" pos:end="35:27">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <do pos:start="37:5" pos:end="87:21">do <block pos:start="37:8" pos:end="87:5">{<block_content pos:start="39:9" pos:end="85:9">

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><call pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:20">UPDATE_CACHE</name><argument_list pos:start="39:21" pos:end="39:32">(<argument pos:start="39:22" pos:end="39:23"><expr pos:start="39:22" pos:end="39:23"><name pos:start="39:22" pos:end="39:23">re</name></expr></argument>, <argument pos:start="39:26" pos:end="39:31"><expr pos:start="39:26" pos:end="39:31"><operator pos:start="39:26" pos:end="39:26">&amp;</operator><name pos:start="39:27" pos:end="39:31"><name pos:start="39:27" pos:end="39:27">s</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:68"><expr pos:start="41:9" pos:end="41:67"><call pos:start="41:9" pos:end="41:67"><name pos:start="41:9" pos:end="41:15">GET_VLC</name><argument_list pos:start="41:16" pos:end="41:67">(<argument pos:start="41:17" pos:end="41:20"><expr pos:start="41:17" pos:end="41:20"><name pos:start="41:17" pos:end="41:20">code</name></expr></argument>, <argument pos:start="41:23" pos:end="41:24"><expr pos:start="41:23" pos:end="41:24"><name pos:start="41:23" pos:end="41:24">re</name></expr></argument>, <argument pos:start="41:27" pos:end="41:32"><expr pos:start="41:27" pos:end="41:32"><operator pos:start="41:27" pos:end="41:27">&amp;</operator><name pos:start="41:28" pos:end="41:32"><name pos:start="41:28" pos:end="41:28">s</name><operator pos:start="41:29" pos:end="41:30">-&gt;</operator><name pos:start="41:31" pos:end="41:32">gb</name></name></expr></argument>, <argument pos:start="41:35" pos:end="41:60"><expr pos:start="41:35" pos:end="41:60"><name pos:start="41:35" pos:end="41:54"><name pos:start="41:35" pos:end="41:35">s</name><operator pos:start="41:36" pos:end="41:37">-&gt;</operator><name pos:start="41:38" pos:end="41:41">vlcs</name><index pos:start="41:42" pos:end="41:44">[<expr pos:start="41:43" pos:end="41:43"><literal type="number" pos:start="41:43" pos:end="41:43">1</literal></expr>]</index><index pos:start="41:45" pos:end="41:54">[<expr pos:start="41:46" pos:end="41:53"><name pos:start="41:46" pos:end="41:53">ac_index</name></expr>]</index></name><operator pos:start="41:55" pos:end="41:55">.</operator><name pos:start="41:56" pos:end="41:60">table</name></expr></argument>, <argument pos:start="41:63" pos:end="41:63"><expr pos:start="41:63" pos:end="41:63"><literal type="number" pos:start="41:63" pos:end="41:63">9</literal></expr></argument>, <argument pos:start="41:66" pos:end="41:66"><expr pos:start="41:66" pos:end="41:66"><literal type="number" pos:start="41:66" pos:end="41:66">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="45:9" pos:end="45:35"><expr pos:start="45:9" pos:end="45:34"><name pos:start="45:9" pos:end="45:9">i</name> <operator pos:start="45:11" pos:end="45:12">+=</operator> <operator pos:start="45:14" pos:end="45:14">(</operator><operator pos:start="45:15" pos:end="45:15">(</operator><name pos:start="45:16" pos:end="45:23">unsigned</name><operator pos:start="45:24" pos:end="45:24">)</operator><name pos:start="45:25" pos:end="45:28">code</name><operator pos:start="45:29" pos:end="45:29">)</operator> <operator pos:start="45:31" pos:end="45:32">&gt;&gt;</operator> <literal type="number" pos:start="45:34" pos:end="45:34">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:24"><expr pos:start="47:13" pos:end="47:23"><name pos:start="47:13" pos:end="47:16">code</name> <operator pos:start="47:18" pos:end="47:19">&amp;=</operator> <literal type="number" pos:start="47:21" pos:end="47:23">0xf</literal></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="85:9"><if pos:start="49:9" pos:end="85:9">if <condition pos:start="49:12" pos:end="49:17">(<expr pos:start="49:13" pos:end="49:16"><name pos:start="49:13" pos:end="49:16">code</name></expr>)</condition> <block pos:start="49:19" pos:end="85:9">{<block_content pos:start="51:13" pos:end="83:47">

            <if_stmt pos:start="51:13" pos:end="53:41"><if pos:start="51:13" pos:end="53:41">if <condition pos:start="51:16" pos:end="51:43">(<expr pos:start="51:17" pos:end="51:42"><name pos:start="51:17" pos:end="51:20">code</name> <operator pos:start="51:22" pos:end="51:22">&gt;</operator> <name pos:start="51:24" pos:end="51:37">MIN_CACHE_BITS</name> <operator pos:start="51:39" pos:end="51:39">-</operator> <literal type="number" pos:start="51:41" pos:end="51:42">16</literal></expr>)</condition><block type="pseudo" pos:start="53:17" pos:end="53:41"><block_content pos:start="53:17" pos:end="53:41">

                <expr_stmt pos:start="53:17" pos:end="53:41"><expr pos:start="53:17" pos:end="53:40"><call pos:start="53:17" pos:end="53:40"><name pos:start="53:17" pos:end="53:28">UPDATE_CACHE</name><argument_list pos:start="53:29" pos:end="53:40">(<argument pos:start="53:30" pos:end="53:31"><expr pos:start="53:30" pos:end="53:31"><name pos:start="53:30" pos:end="53:31">re</name></expr></argument>, <argument pos:start="53:34" pos:end="53:39"><expr pos:start="53:34" pos:end="53:39"><operator pos:start="53:34" pos:end="53:34">&amp;</operator><name pos:start="53:35" pos:end="53:39"><name pos:start="53:35" pos:end="53:35">s</name><operator pos:start="53:36" pos:end="53:37">-&gt;</operator><name pos:start="53:38" pos:end="53:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <block pos:start="57:13" pos:end="65:13">{<block_content pos:start="59:17" pos:end="63:73">

                <decl_stmt pos:start="59:17" pos:end="59:50"><decl pos:start="59:17" pos:end="59:49"><type pos:start="59:17" pos:end="59:19"><name pos:start="59:17" pos:end="59:19">int</name></type> <name pos:start="59:21" pos:end="59:25">cache</name> <init pos:start="59:27" pos:end="59:49">= <expr pos:start="59:29" pos:end="59:49"><call pos:start="59:29" pos:end="59:49"><name pos:start="59:29" pos:end="59:37">GET_CACHE</name><argument_list pos:start="59:38" pos:end="59:49">(<argument pos:start="59:39" pos:end="59:40"><expr pos:start="59:39" pos:end="59:40"><name pos:start="59:39" pos:end="59:40">re</name></expr></argument>, <argument pos:start="59:43" pos:end="59:48"><expr pos:start="59:43" pos:end="59:48"><operator pos:start="59:43" pos:end="59:43">&amp;</operator><name pos:start="59:44" pos:end="59:48"><name pos:start="59:44" pos:end="59:44">s</name><operator pos:start="59:45" pos:end="59:46">-&gt;</operator><name pos:start="59:47" pos:end="59:48">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="61:17" pos:end="61:43"><decl pos:start="61:17" pos:end="61:42"><type pos:start="61:17" pos:end="61:19"><name pos:start="61:17" pos:end="61:19">int</name></type> <name pos:start="61:21" pos:end="61:24">sign</name>  <init pos:start="61:27" pos:end="61:42">= <expr pos:start="61:29" pos:end="61:42"><operator pos:start="61:29" pos:end="61:29">(</operator><operator pos:start="61:30" pos:end="61:30">~</operator><name pos:start="61:31" pos:end="61:35">cache</name><operator pos:start="61:36" pos:end="61:36">)</operator> <operator pos:start="61:38" pos:end="61:39">&gt;&gt;</operator> <literal type="number" pos:start="61:41" pos:end="61:42">31</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:73"><expr pos:start="63:17" pos:end="63:72"><name pos:start="63:17" pos:end="63:21">level</name>     <operator pos:start="63:27" pos:end="63:27">=</operator> <operator pos:start="63:29" pos:end="63:29">(</operator><call pos:start="63:30" pos:end="63:57"><name pos:start="63:30" pos:end="63:38">NEG_USR32</name><argument_list pos:start="63:39" pos:end="63:57">(<argument pos:start="63:40" pos:end="63:51"><expr pos:start="63:40" pos:end="63:51"><name pos:start="63:40" pos:end="63:43">sign</name> <operator pos:start="63:45" pos:end="63:45">^</operator> <name pos:start="63:47" pos:end="63:51">cache</name></expr></argument>,<argument pos:start="63:53" pos:end="63:56"><expr pos:start="63:53" pos:end="63:56"><name pos:start="63:53" pos:end="63:56">code</name></expr></argument>)</argument_list></call> <operator pos:start="63:59" pos:end="63:59">^</operator> <name pos:start="63:61" pos:end="63:64">sign</name><operator pos:start="63:65" pos:end="63:65">)</operator> <operator pos:start="63:67" pos:end="63:67">-</operator> <name pos:start="63:69" pos:end="63:72">sign</name></expr>;</expr_stmt>

            </block_content>}</block>



            <expr_stmt pos:start="69:13" pos:end="69:45"><expr pos:start="69:13" pos:end="69:44"><call pos:start="69:13" pos:end="69:44"><name pos:start="69:13" pos:end="69:26">LAST_SKIP_BITS</name><argument_list pos:start="69:27" pos:end="69:44">(<argument pos:start="69:28" pos:end="69:29"><expr pos:start="69:28" pos:end="69:29"><name pos:start="69:28" pos:end="69:29">re</name></expr></argument>, <argument pos:start="69:32" pos:end="69:37"><expr pos:start="69:32" pos:end="69:37"><operator pos:start="69:32" pos:end="69:32">&amp;</operator><name pos:start="69:33" pos:end="69:37"><name pos:start="69:33" pos:end="69:33">s</name><operator pos:start="69:34" pos:end="69:35">-&gt;</operator><name pos:start="69:36" pos:end="69:37">gb</name></name></expr></argument>, <argument pos:start="69:40" pos:end="69:43"><expr pos:start="69:40" pos:end="69:43"><name pos:start="69:40" pos:end="69:43">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="73:13" pos:end="79:13"><if pos:start="73:13" pos:end="79:13">if <condition pos:start="73:16" pos:end="73:23">(<expr pos:start="73:17" pos:end="73:22"><name pos:start="73:17" pos:end="73:17">i</name> <operator pos:start="73:19" pos:end="73:19">&gt;</operator> <literal type="number" pos:start="73:21" pos:end="73:22">63</literal></expr>)</condition> <block pos:start="73:25" pos:end="79:13">{<block_content pos:start="75:17" pos:end="77:43">

                <expr_stmt pos:start="75:17" pos:end="75:71"><expr pos:start="75:17" pos:end="75:70"><call pos:start="75:17" pos:end="75:70"><name pos:start="75:17" pos:end="75:22">av_log</name><argument_list pos:start="75:23" pos:end="75:70">(<argument pos:start="75:24" pos:end="75:31"><expr pos:start="75:24" pos:end="75:31"><name pos:start="75:24" pos:end="75:31"><name pos:start="75:24" pos:end="75:24">s</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:31">avctx</name></name></expr></argument>, <argument pos:start="75:34" pos:end="75:45"><expr pos:start="75:34" pos:end="75:45"><name pos:start="75:34" pos:end="75:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:48" pos:end="75:66"><expr pos:start="75:48" pos:end="75:66"><literal type="string" pos:start="75:48" pos:end="75:66">"error count: %d\n"</literal></expr></argument>, <argument pos:start="75:69" pos:end="75:69"><expr pos:start="75:69" pos:end="75:69"><name pos:start="75:69" pos:end="75:69">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="77:17" pos:end="77:43">return <expr pos:start="77:24" pos:end="77:42"><name pos:start="77:24" pos:end="77:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:50"><expr pos:start="81:13" pos:end="81:49"><name pos:start="81:13" pos:end="81:13">j</name>        <operator pos:start="81:22" pos:end="81:22">=</operator> <name pos:start="81:24" pos:end="81:49"><name pos:start="81:24" pos:end="81:24">s</name><operator pos:start="81:25" pos:end="81:26">-&gt;</operator><name pos:start="81:27" pos:end="81:35">scantable</name><operator pos:start="81:36" pos:end="81:36">.</operator><name pos:start="81:37" pos:end="81:46">permutated</name><index pos:start="81:47" pos:end="81:49">[<expr pos:start="81:48" pos:end="81:48"><name pos:start="81:48" pos:end="81:48">i</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:47"><expr pos:start="83:13" pos:end="83:46"><name pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:17">block</name><index pos:start="83:18" pos:end="83:20">[<expr pos:start="83:19" pos:end="83:19"><name pos:start="83:19" pos:end="83:19">j</name></expr>]</index></name> <operator pos:start="83:22" pos:end="83:22">=</operator> <name pos:start="83:24" pos:end="83:28">level</name> <operator pos:start="83:30" pos:end="83:30">*</operator> <name pos:start="83:32" pos:end="83:46"><name pos:start="83:32" pos:end="83:43">quant_matrix</name><index pos:start="83:44" pos:end="83:46">[<expr pos:start="83:45" pos:end="83:45"><name pos:start="83:45" pos:end="83:45">i</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="87:13" pos:end="87:20">(<expr pos:start="87:14" pos:end="87:19"><name pos:start="87:14" pos:end="87:14">i</name> <operator pos:start="87:16" pos:end="87:16">&lt;</operator> <literal type="number" pos:start="87:18" pos:end="87:19">63</literal></expr>)</condition>;</do>

    <expr_stmt pos:start="89:5" pos:end="89:29"><expr pos:start="89:5" pos:end="89:28"><call pos:start="89:5" pos:end="89:28"><name pos:start="89:5" pos:end="89:16">CLOSE_READER</name><argument_list pos:start="89:17" pos:end="89:28">(<argument pos:start="89:18" pos:end="89:19"><expr pos:start="89:18" pos:end="89:19"><name pos:start="89:18" pos:end="89:19">re</name></expr></argument>, <argument pos:start="89:22" pos:end="89:27"><expr pos:start="89:22" pos:end="89:27"><operator pos:start="89:22" pos:end="89:22">&amp;</operator><name pos:start="89:23" pos:end="89:27"><name pos:start="89:23" pos:end="89:23">s</name><operator pos:start="89:24" pos:end="89:25">-&gt;</operator><name pos:start="89:26" pos:end="89:27">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block>



    <return pos:start="93:5" pos:end="93:13">return <expr pos:start="93:12" pos:end="93:12"><literal type="number" pos:start="93:12" pos:end="93:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
