<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15793.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:13">TCGReg</name></type> <name pos:start="1:15" pos:end="1:30">tcg_out_tlb_read</name><parameter_list pos:start="1:31" pos:end="5:59">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:41">TCGContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:58"><decl pos:start="1:47" pos:end="1:58"><type pos:start="1:47" pos:end="1:58"><name pos:start="1:47" pos:end="1:54">TCGMemOp</name></type> <name pos:start="1:56" pos:end="1:58">opc</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:44"><decl pos:start="3:32" pos:end="3:44"><type pos:start="3:32" pos:end="3:44"><name pos:start="3:32" pos:end="3:37">TCGReg</name></type> <name pos:start="3:39" pos:end="3:44">addrlo</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:59"><decl pos:start="3:47" pos:end="3:59"><type pos:start="3:47" pos:end="3:59"><name pos:start="3:47" pos:end="3:52">TCGReg</name></type> <name pos:start="3:54" pos:end="3:59">addrhi</name></decl></parameter>,

                               <parameter pos:start="5:32" pos:end="5:44"><decl pos:start="5:32" pos:end="5:44"><type pos:start="5:32" pos:end="5:44"><name pos:start="5:32" pos:end="5:34">int</name></type> <name pos:start="5:36" pos:end="5:44">mem_index</name></decl></parameter>, <parameter pos:start="5:47" pos:end="5:58"><decl pos:start="5:47" pos:end="5:58"><type pos:start="5:47" pos:end="5:58"><name pos:start="5:47" pos:end="5:50">bool</name></type> <name pos:start="5:52" pos:end="5:58">is_read</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="213:1">{<block_content pos:start="9:5" pos:end="211:18">

    <decl_stmt pos:start="9:5" pos:end="15:73"><decl pos:start="9:5" pos:end="15:72"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">cmp_off</name>

        <init pos:start="11:9" pos:end="15:72">= <expr pos:start="11:11" pos:end="15:72"><operator pos:start="11:11" pos:end="11:11">(</operator><ternary pos:start="11:12" pos:end="15:71"><condition pos:start="11:12" pos:end="13:12"><expr pos:start="11:12" pos:end="11:18"><name pos:start="11:12" pos:end="11:18">is_read</name></expr>

           ?</condition><then pos:start="13:14" pos:end="13:70"> <expr pos:start="13:14" pos:end="13:70"><call pos:start="13:14" pos:end="13:70"><name pos:start="13:14" pos:end="13:21">offsetof</name><argument_list pos:start="13:22" pos:end="13:70">(<argument pos:start="13:23" pos:end="13:34"><expr pos:start="13:23" pos:end="13:34"><name pos:start="13:23" pos:end="13:34">CPUArchState</name></expr></argument>, <argument pos:start="13:37" pos:end="13:69"><expr pos:start="13:37" pos:end="13:69"><name pos:start="13:37" pos:end="13:59"><name pos:start="13:37" pos:end="13:45">tlb_table</name><index pos:start="13:46" pos:end="13:56">[<expr pos:start="13:47" pos:end="13:55"><name pos:start="13:47" pos:end="13:55">mem_index</name></expr>]</index><index pos:start="13:57" pos:end="13:59">[<expr pos:start="13:58" pos:end="13:58"><literal type="number" pos:start="13:58" pos:end="13:58">0</literal></expr>]</index></name><operator pos:start="13:60" pos:end="13:60">.</operator><name pos:start="13:61" pos:end="13:69">addr_read</name></expr></argument>)</argument_list></call></expr>

           </then><else pos:start="15:12" pos:end="15:71">: <expr pos:start="15:14" pos:end="15:71"><call pos:start="15:14" pos:end="15:71"><name pos:start="15:14" pos:end="15:21">offsetof</name><argument_list pos:start="15:22" pos:end="15:71">(<argument pos:start="15:23" pos:end="15:34"><expr pos:start="15:23" pos:end="15:34"><name pos:start="15:23" pos:end="15:34">CPUArchState</name></expr></argument>, <argument pos:start="15:37" pos:end="15:70"><expr pos:start="15:37" pos:end="15:70"><name pos:start="15:37" pos:end="15:59"><name pos:start="15:37" pos:end="15:45">tlb_table</name><index pos:start="15:46" pos:end="15:56">[<expr pos:start="15:47" pos:end="15:55"><name pos:start="15:47" pos:end="15:55">mem_index</name></expr>]</index><index pos:start="15:57" pos:end="15:59">[<expr pos:start="15:58" pos:end="15:58"><literal type="number" pos:start="15:58" pos:end="15:58">0</literal></expr>]</index></name><operator pos:start="15:60" pos:end="15:60">.</operator><name pos:start="15:61" pos:end="15:70">addr_write</name></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="15:72" pos:end="15:72">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:73"><decl pos:start="17:5" pos:end="17:72"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:15">add_off</name> <init pos:start="17:17" pos:end="17:72">= <expr pos:start="17:19" pos:end="17:72"><call pos:start="17:19" pos:end="17:72"><name pos:start="17:19" pos:end="17:26">offsetof</name><argument_list pos:start="17:27" pos:end="17:72">(<argument pos:start="17:28" pos:end="17:39"><expr pos:start="17:28" pos:end="17:39"><name pos:start="17:28" pos:end="17:39">CPUArchState</name></expr></argument>, <argument pos:start="17:42" pos:end="17:71"><expr pos:start="17:42" pos:end="17:71"><name pos:start="17:42" pos:end="17:64"><name pos:start="17:42" pos:end="17:50">tlb_table</name><index pos:start="17:51" pos:end="17:61">[<expr pos:start="17:52" pos:end="17:60"><name pos:start="17:52" pos:end="17:60">mem_index</name></expr>]</index><index pos:start="17:62" pos:end="17:64">[<expr pos:start="17:63" pos:end="17:63"><literal type="number" pos:start="17:63" pos:end="17:63">0</literal></expr>]</index></name><operator pos:start="17:65" pos:end="17:65">.</operator><name pos:start="17:66" pos:end="17:71">addend</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">TCGReg</name></type> <name pos:start="19:12" pos:end="19:15">base</name> <init pos:start="19:17" pos:end="19:27">= <expr pos:start="19:19" pos:end="19:27"><name pos:start="19:19" pos:end="19:27">TCG_AREG0</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:36"><decl pos:start="21:5" pos:end="21:35"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">TCGMemOp</name></type> <name pos:start="21:14" pos:end="21:19">s_bits</name> <init pos:start="21:21" pos:end="21:35">= <expr pos:start="21:23" pos:end="21:35"><name pos:start="21:23" pos:end="21:25">opc</name> <operator pos:start="21:27" pos:end="21:27">&amp;</operator> <name pos:start="21:29" pos:end="21:35">MO_SIZE</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:68">/* Extract the page index, shifted into place for tlb index.  */</comment>

    <if_stmt pos:start="27:5" pos:end="45:5"><if pos:start="27:5" pos:end="45:5">if <condition pos:start="27:8" pos:end="27:34">(<expr pos:start="27:9" pos:end="27:33"><name pos:start="27:9" pos:end="27:27">TCG_TARGET_REG_BITS</name> <operator pos:start="27:29" pos:end="27:30">==</operator> <literal type="number" pos:start="27:32" pos:end="27:33">64</literal></expr>)</condition> <block pos:start="27:36" pos:end="45:5">{<block_content pos:start="29:9" pos:end="43:9">

        <if_stmt pos:start="29:9" pos:end="43:9"><if pos:start="29:9" pos:end="37:9">if <condition pos:start="29:12" pos:end="29:35">(<expr pos:start="29:13" pos:end="29:34"><name pos:start="29:13" pos:end="29:28">TARGET_LONG_BITS</name> <operator pos:start="29:30" pos:end="29:31">==</operator> <literal type="number" pos:start="29:33" pos:end="29:34">32</literal></expr>)</condition> <block pos:start="29:37" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:32">

            <comment type="block" pos:start="31:13" pos:end="31:79">/* Zero-extend the address into a place helpful for further use. */</comment>

            <expr_stmt pos:start="33:13" pos:end="33:50"><expr pos:start="33:13" pos:end="33:49"><call pos:start="33:13" pos:end="33:49"><name pos:start="33:13" pos:end="33:26">tcg_out_ext32u</name><argument_list pos:start="33:27" pos:end="33:49">(<argument pos:start="33:28" pos:end="33:28"><expr pos:start="33:28" pos:end="33:28"><name pos:start="33:28" pos:end="33:28">s</name></expr></argument>, <argument pos:start="33:31" pos:end="33:40"><expr pos:start="33:31" pos:end="33:40"><name pos:start="33:31" pos:end="33:40">TCG_REG_R4</name></expr></argument>, <argument pos:start="33:43" pos:end="33:48"><expr pos:start="33:43" pos:end="33:48"><name pos:start="33:43" pos:end="33:48">addrlo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:32"><expr pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:18">addrlo</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <name pos:start="35:22" pos:end="35:31">TCG_REG_R4</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="43:9">else <block pos:start="37:16" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:66">

            <expr_stmt pos:start="39:13" pos:end="41:66"><expr pos:start="39:13" pos:end="41:65"><call pos:start="39:13" pos:end="41:65"><name pos:start="39:13" pos:end="39:23">tcg_out_rld</name><argument_list pos:start="39:24" pos:end="41:65">(<argument pos:start="39:25" pos:end="39:25"><expr pos:start="39:25" pos:end="39:25"><name pos:start="39:25" pos:end="39:25">s</name></expr></argument>, <argument pos:start="39:28" pos:end="39:33"><expr pos:start="39:28" pos:end="39:33"><name pos:start="39:28" pos:end="39:33">RLDICL</name></expr></argument>, <argument pos:start="39:36" pos:end="39:45"><expr pos:start="39:36" pos:end="39:45"><name pos:start="39:36" pos:end="39:45">TCG_REG_R3</name></expr></argument>, <argument pos:start="39:48" pos:end="39:53"><expr pos:start="39:48" pos:end="39:53"><name pos:start="39:48" pos:end="39:53">addrlo</name></expr></argument>,

                        <argument pos:start="41:25" pos:end="41:45"><expr pos:start="41:25" pos:end="41:45"><literal type="number" pos:start="41:25" pos:end="41:28">64</literal> <operator pos:start="41:28" pos:end="41:28">-</operator> <name pos:start="41:30" pos:end="41:45">TARGET_PAGE_BITS</name></expr></argument>, <argument pos:start="41:48" pos:end="41:64"><expr pos:start="41:48" pos:end="41:64"><literal type="number" pos:start="41:48" pos:end="41:51">64</literal> <operator pos:start="41:51" pos:end="41:51">-</operator> <name pos:start="41:53" pos:end="41:64">CPU_TLB_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:45">/* Compensate for very large offsets.  */</comment>

    <if_stmt pos:start="51:5" pos:end="73:5"><if pos:start="51:5" pos:end="73:5">if <condition pos:start="51:8" pos:end="51:26">(<expr pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:15">add_off</name> <operator pos:start="51:17" pos:end="51:18">&gt;=</operator> <literal type="number" pos:start="51:20" pos:end="51:25">0x8000</literal></expr>)</condition> <block pos:start="51:28" pos:end="73:5">{<block_content pos:start="59:9" pos:end="71:26">

        <comment type="block" pos:start="53:9" pos:end="57:61">/* Most target env are smaller than 32k; none are larger than 64k.

           Simplify the logic here merely to offset by 0x7ff0, giving us a

           range just shy of 64k.  Check this assumption.  */</comment>

        <expr_stmt pos:start="59:9" pos:end="63:45"><expr pos:start="59:9" pos:end="63:44"><call pos:start="59:9" pos:end="63:44"><name pos:start="59:9" pos:end="59:25">QEMU_BUILD_BUG_ON</name><argument_list pos:start="59:26" pos:end="63:44">(<argument pos:start="59:27" pos:end="63:43"><expr pos:start="59:27" pos:end="63:43"><call pos:start="59:27" pos:end="61:66"><name pos:start="59:27" pos:end="59:34">offsetof</name><argument_list pos:start="59:35" pos:end="61:66">(<argument pos:start="59:36" pos:end="59:47"><expr pos:start="59:36" pos:end="59:47"><name pos:start="59:36" pos:end="59:47">CPUArchState</name></expr></argument>,

                                   <argument pos:start="61:36" pos:end="61:65"><expr pos:start="61:36" pos:end="61:65"><name pos:start="61:36" pos:end="61:65"><name pos:start="61:36" pos:end="61:44">tlb_table</name><index pos:start="61:45" pos:end="61:62">[<expr pos:start="61:46" pos:end="61:61"><name pos:start="61:46" pos:end="61:57">NB_MMU_MODES</name> <operator pos:start="61:59" pos:end="61:59">-</operator> <literal type="number" pos:start="61:61" pos:end="61:61">1</literal></expr>]</index><index pos:start="61:63" pos:end="61:65">[<expr pos:start="61:64" pos:end="61:64"><literal type="number" pos:start="61:64" pos:end="61:64">1</literal></expr>]</index></name></expr></argument>)</argument_list></call>

                          <operator pos:start="63:27" pos:end="63:27">&gt;</operator> <literal type="number" pos:start="63:29" pos:end="63:36">0x7ff0</literal> <operator pos:start="63:36" pos:end="63:36">+</operator> <literal type="number" pos:start="63:38" pos:end="63:43">0x7fff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:61"><expr pos:start="65:9" pos:end="65:60"><call pos:start="65:9" pos:end="65:60"><name pos:start="65:9" pos:end="65:17">tcg_out32</name><argument_list pos:start="65:18" pos:end="65:60">(<argument pos:start="65:19" pos:end="65:19"><expr pos:start="65:19" pos:end="65:19"><name pos:start="65:19" pos:end="65:19">s</name></expr></argument>, <argument pos:start="65:22" pos:end="65:59"><expr pos:start="65:22" pos:end="65:59"><name pos:start="65:22" pos:end="65:25">ADDI</name> <operator pos:start="65:27" pos:end="65:27">|</operator> <call pos:start="65:29" pos:end="65:59"><name pos:start="65:29" pos:end="65:31">TAI</name><argument_list pos:start="65:32" pos:end="65:59">(<argument pos:start="65:33" pos:end="65:44"><expr pos:start="65:33" pos:end="65:44"><name pos:start="65:33" pos:end="65:44">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="65:47" pos:end="65:50"><expr pos:start="65:47" pos:end="65:50"><name pos:start="65:47" pos:end="65:50">base</name></expr></argument>, <argument pos:start="65:53" pos:end="65:58"><expr pos:start="65:53" pos:end="65:58"><literal type="number" pos:start="65:53" pos:end="65:58">0x7ff0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:28"><expr pos:start="67:9" pos:end="67:27"><name pos:start="67:9" pos:end="67:12">base</name> <operator pos:start="67:14" pos:end="67:14">=</operator> <name pos:start="67:16" pos:end="67:27">TCG_REG_TMP1</name></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:26"><expr pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:15">cmp_off</name> <operator pos:start="69:17" pos:end="69:18">-=</operator> <literal type="number" pos:start="69:20" pos:end="69:25">0x7ff0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:26"><expr pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:15">add_off</name> <operator pos:start="71:17" pos:end="71:18">-=</operator> <literal type="number" pos:start="71:20" pos:end="71:25">0x7ff0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:43">/* Extraction and shifting, part 2.  */</comment>

    <if_stmt pos:start="79:5" pos:end="93:5"><if pos:start="79:5" pos:end="89:5">if <condition pos:start="79:8" pos:end="79:60">(<expr pos:start="79:9" pos:end="79:59"><name pos:start="79:9" pos:end="79:27">TCG_TARGET_REG_BITS</name> <operator pos:start="79:29" pos:end="79:30">==</operator> <literal type="number" pos:start="79:32" pos:end="79:33">32</literal> <operator pos:start="79:35" pos:end="79:36">||</operator> <name pos:start="79:38" pos:end="79:53">TARGET_LONG_BITS</name> <operator pos:start="79:55" pos:end="79:56">==</operator> <literal type="number" pos:start="79:58" pos:end="79:59">32</literal></expr>)</condition> <block pos:start="79:62" pos:end="89:5">{<block_content pos:start="81:9" pos:end="87:45">

        <expr_stmt pos:start="81:9" pos:end="87:45"><expr pos:start="81:9" pos:end="87:44"><call pos:start="81:9" pos:end="87:44"><name pos:start="81:9" pos:end="81:19">tcg_out_rlw</name><argument_list pos:start="81:20" pos:end="87:44">(<argument pos:start="81:21" pos:end="81:21"><expr pos:start="81:21" pos:end="81:21"><name pos:start="81:21" pos:end="81:21">s</name></expr></argument>, <argument pos:start="81:24" pos:end="81:29"><expr pos:start="81:24" pos:end="81:29"><name pos:start="81:24" pos:end="81:29">RLWINM</name></expr></argument>, <argument pos:start="81:32" pos:end="81:41"><expr pos:start="81:32" pos:end="81:41"><name pos:start="81:32" pos:end="81:41">TCG_REG_R3</name></expr></argument>, <argument pos:start="81:44" pos:end="81:49"><expr pos:start="81:44" pos:end="81:49"><name pos:start="81:44" pos:end="81:49">addrlo</name></expr></argument>,

                    <argument pos:start="83:21" pos:end="83:64"><expr pos:start="83:21" pos:end="83:64"><literal type="number" pos:start="83:21" pos:end="83:24">32</literal> <operator pos:start="83:24" pos:end="83:24">-</operator> <operator pos:start="83:26" pos:end="83:26">(</operator><name pos:start="83:27" pos:end="83:42">TARGET_PAGE_BITS</name> <operator pos:start="83:44" pos:end="83:44">-</operator> <name pos:start="83:46" pos:end="83:63">CPU_TLB_ENTRY_BITS</name><operator pos:start="83:64" pos:end="83:64">)</operator></expr></argument>,

                    <argument pos:start="85:21" pos:end="85:60"><expr pos:start="85:21" pos:end="85:60"><literal type="number" pos:start="85:21" pos:end="85:24">32</literal> <operator pos:start="85:24" pos:end="85:24">-</operator> <operator pos:start="85:26" pos:end="85:26">(</operator><name pos:start="85:27" pos:end="85:38">CPU_TLB_BITS</name> <operator pos:start="85:40" pos:end="85:40">+</operator> <name pos:start="85:42" pos:end="85:59">CPU_TLB_ENTRY_BITS</name><operator pos:start="85:60" pos:end="85:60">)</operator></expr></argument>,

                    <argument pos:start="87:21" pos:end="87:43"><expr pos:start="87:21" pos:end="87:43"><literal type="number" pos:start="87:21" pos:end="87:24">31</literal> <operator pos:start="87:24" pos:end="87:24">-</operator> <name pos:start="87:26" pos:end="87:43">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="93:5">else <block pos:start="89:12" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:70">

        <expr_stmt pos:start="91:9" pos:end="91:70"><expr pos:start="91:9" pos:end="91:69"><call pos:start="91:9" pos:end="91:69"><name pos:start="91:9" pos:end="91:22">tcg_out_shli64</name><argument_list pos:start="91:23" pos:end="91:69">(<argument pos:start="91:24" pos:end="91:24"><expr pos:start="91:24" pos:end="91:24"><name pos:start="91:24" pos:end="91:24">s</name></expr></argument>, <argument pos:start="91:27" pos:end="91:36"><expr pos:start="91:27" pos:end="91:36"><name pos:start="91:27" pos:end="91:36">TCG_REG_R3</name></expr></argument>, <argument pos:start="91:39" pos:end="91:48"><expr pos:start="91:39" pos:end="91:48"><name pos:start="91:39" pos:end="91:48">TCG_REG_R3</name></expr></argument>, <argument pos:start="91:51" pos:end="91:68"><expr pos:start="91:51" pos:end="91:68"><name pos:start="91:51" pos:end="91:68">CPU_TLB_ENTRY_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:58"><expr pos:start="97:5" pos:end="97:57"><call pos:start="97:5" pos:end="97:57"><name pos:start="97:5" pos:end="97:13">tcg_out32</name><argument_list pos:start="97:14" pos:end="97:57">(<argument pos:start="97:15" pos:end="97:15"><expr pos:start="97:15" pos:end="97:15"><name pos:start="97:15" pos:end="97:15">s</name></expr></argument>, <argument pos:start="97:18" pos:end="97:56"><expr pos:start="97:18" pos:end="97:56"><name pos:start="97:18" pos:end="97:20">ADD</name> <operator pos:start="97:22" pos:end="97:22">|</operator> <call pos:start="97:24" pos:end="97:56"><name pos:start="97:24" pos:end="97:26">TAB</name><argument_list pos:start="97:27" pos:end="97:56">(<argument pos:start="97:28" pos:end="97:37"><expr pos:start="97:28" pos:end="97:37"><name pos:start="97:28" pos:end="97:37">TCG_REG_R3</name></expr></argument>, <argument pos:start="97:40" pos:end="97:49"><expr pos:start="97:40" pos:end="97:49"><name pos:start="97:40" pos:end="97:49">TCG_REG_R3</name></expr></argument>, <argument pos:start="97:52" pos:end="97:55"><expr pos:start="97:52" pos:end="97:55"><name pos:start="97:52" pos:end="97:55">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:35">/* Load the tlb comparator.  */</comment>

    <if_stmt pos:start="103:5" pos:end="113:5"><if pos:start="103:5" pos:end="109:5">if <condition pos:start="103:8" pos:end="103:47">(<expr pos:start="103:9" pos:end="103:46"><name pos:start="103:9" pos:end="103:27">TCG_TARGET_REG_BITS</name> <operator pos:start="103:29" pos:end="103:29">&lt;</operator> <name pos:start="103:31" pos:end="103:46">TARGET_LONG_BITS</name></expr>)</condition> <block pos:start="103:49" pos:end="109:5">{<block_content pos:start="105:9" pos:end="107:75">

        <expr_stmt pos:start="105:9" pos:end="105:69"><expr pos:start="105:9" pos:end="105:68"><call pos:start="105:9" pos:end="105:68"><name pos:start="105:9" pos:end="105:18">tcg_out_ld</name><argument_list pos:start="105:19" pos:end="105:68">(<argument pos:start="105:20" pos:end="105:20"><expr pos:start="105:20" pos:end="105:20"><name pos:start="105:20" pos:end="105:20">s</name></expr></argument>, <argument pos:start="105:23" pos:end="105:34"><expr pos:start="105:23" pos:end="105:34"><name pos:start="105:23" pos:end="105:34">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="105:37" pos:end="105:46"><expr pos:start="105:37" pos:end="105:46"><name pos:start="105:37" pos:end="105:46">TCG_REG_R4</name></expr></argument>, <argument pos:start="105:49" pos:end="105:58"><expr pos:start="105:49" pos:end="105:58"><name pos:start="105:49" pos:end="105:58">TCG_REG_R3</name></expr></argument>, <argument pos:start="105:61" pos:end="105:67"><expr pos:start="105:61" pos:end="105:67"><name pos:start="105:61" pos:end="105:67">cmp_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:75"><expr pos:start="107:9" pos:end="107:74"><call pos:start="107:9" pos:end="107:74"><name pos:start="107:9" pos:end="107:18">tcg_out_ld</name><argument_list pos:start="107:19" pos:end="107:74">(<argument pos:start="107:20" pos:end="107:20"><expr pos:start="107:20" pos:end="107:20"><name pos:start="107:20" pos:end="107:20">s</name></expr></argument>, <argument pos:start="107:23" pos:end="107:34"><expr pos:start="107:23" pos:end="107:34"><name pos:start="107:23" pos:end="107:34">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="107:37" pos:end="107:48"><expr pos:start="107:37" pos:end="107:48"><name pos:start="107:37" pos:end="107:48">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="107:51" pos:end="107:60"><expr pos:start="107:51" pos:end="107:60"><name pos:start="107:51" pos:end="107:60">TCG_REG_R3</name></expr></argument>, <argument pos:start="107:63" pos:end="107:73"><expr pos:start="107:63" pos:end="107:73"><name pos:start="107:63" pos:end="107:69">cmp_off</name> <operator pos:start="107:71" pos:end="107:71">+</operator> <literal type="number" pos:start="107:73" pos:end="107:73">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="109:7" pos:end="113:5">else <block pos:start="109:12" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:70">

        <expr_stmt pos:start="111:9" pos:end="111:70"><expr pos:start="111:9" pos:end="111:69"><call pos:start="111:9" pos:end="111:69"><name pos:start="111:9" pos:end="111:18">tcg_out_ld</name><argument_list pos:start="111:19" pos:end="111:69">(<argument pos:start="111:20" pos:end="111:20"><expr pos:start="111:20" pos:end="111:20"><name pos:start="111:20" pos:end="111:20">s</name></expr></argument>, <argument pos:start="111:23" pos:end="111:33"><expr pos:start="111:23" pos:end="111:33"><name pos:start="111:23" pos:end="111:33">TCG_TYPE_TL</name></expr></argument>, <argument pos:start="111:36" pos:end="111:47"><expr pos:start="111:36" pos:end="111:47"><name pos:start="111:36" pos:end="111:47">TCG_REG_TMP1</name></expr></argument>, <argument pos:start="111:50" pos:end="111:59"><expr pos:start="111:50" pos:end="111:59"><name pos:start="111:50" pos:end="111:59">TCG_REG_R3</name></expr></argument>, <argument pos:start="111:62" pos:end="111:68"><expr pos:start="111:62" pos:end="111:68"><name pos:start="111:62" pos:end="111:68">cmp_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="117:5" pos:end="119:42">/* Load the TLB addend for use on the fast path.  Do this asap

       to minimize any load use delay.  */</comment>

    <expr_stmt pos:start="121:5" pos:end="121:65"><expr pos:start="121:5" pos:end="121:64"><call pos:start="121:5" pos:end="121:64"><name pos:start="121:5" pos:end="121:14">tcg_out_ld</name><argument_list pos:start="121:15" pos:end="121:64">(<argument pos:start="121:16" pos:end="121:16"><expr pos:start="121:16" pos:end="121:16"><name pos:start="121:16" pos:end="121:16">s</name></expr></argument>, <argument pos:start="121:19" pos:end="121:30"><expr pos:start="121:19" pos:end="121:30"><name pos:start="121:19" pos:end="121:30">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="121:33" pos:end="121:42"><expr pos:start="121:33" pos:end="121:42"><name pos:start="121:33" pos:end="121:42">TCG_REG_R3</name></expr></argument>, <argument pos:start="121:45" pos:end="121:54"><expr pos:start="121:45" pos:end="121:54"><name pos:start="121:45" pos:end="121:54">TCG_REG_R3</name></expr></argument>, <argument pos:start="121:57" pos:end="121:63"><expr pos:start="121:57" pos:end="121:63"><name pos:start="121:57" pos:end="121:63">add_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:65">/* Clear the non-page, non-alignment bits from the address */</comment>

    <if_stmt pos:start="127:5" pos:end="187:5"><if pos:start="127:5" pos:end="141:5">if <condition pos:start="127:8" pos:end="127:60">(<expr pos:start="127:9" pos:end="127:59"><name pos:start="127:9" pos:end="127:27">TCG_TARGET_REG_BITS</name> <operator pos:start="127:29" pos:end="127:30">==</operator> <literal type="number" pos:start="127:32" pos:end="127:33">32</literal> <operator pos:start="127:35" pos:end="127:36">||</operator> <name pos:start="127:38" pos:end="127:53">TARGET_LONG_BITS</name> <operator pos:start="127:55" pos:end="127:56">==</operator> <literal type="number" pos:start="127:58" pos:end="127:59">32</literal></expr>)</condition> <block pos:start="127:62" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:63">

        <comment type="block" pos:start="129:9" pos:end="135:11">/* We don't support unaligned accesses on 32-bits, preserve

         * the bottom bits and thus trigger a comparison failure on

         * unaligned accesses

         */</comment>

        <expr_stmt pos:start="137:9" pos:end="139:63"><expr pos:start="137:9" pos:end="139:62"><call pos:start="137:9" pos:end="139:62"><name pos:start="137:9" pos:end="137:19">tcg_out_rlw</name><argument_list pos:start="137:20" pos:end="139:62">(<argument pos:start="137:21" pos:end="137:21"><expr pos:start="137:21" pos:end="137:21"><name pos:start="137:21" pos:end="137:21">s</name></expr></argument>, <argument pos:start="137:24" pos:end="137:29"><expr pos:start="137:24" pos:end="137:29"><name pos:start="137:24" pos:end="137:29">RLWINM</name></expr></argument>, <argument pos:start="137:32" pos:end="137:41"><expr pos:start="137:32" pos:end="137:41"><name pos:start="137:32" pos:end="137:41">TCG_REG_R0</name></expr></argument>, <argument pos:start="137:44" pos:end="137:49"><expr pos:start="137:44" pos:end="137:49"><name pos:start="137:44" pos:end="137:49">addrlo</name></expr></argument>, <argument pos:start="137:52" pos:end="137:52"><expr pos:start="137:52" pos:end="137:52"><literal type="number" pos:start="137:52" pos:end="137:52">0</literal></expr></argument>,

                    <argument pos:start="139:21" pos:end="139:38"><expr pos:start="139:21" pos:end="139:38"><operator pos:start="139:21" pos:end="139:21">(</operator><literal type="number" pos:start="139:22" pos:end="139:25">32</literal> <operator pos:start="139:25" pos:end="139:25">-</operator> <name pos:start="139:27" pos:end="139:32">s_bits</name><operator pos:start="139:33" pos:end="139:33">)</operator> <operator pos:start="139:35" pos:end="139:35">&amp;</operator> <literal type="number" pos:start="139:37" pos:end="139:38">31</literal></expr></argument>, <argument pos:start="139:41" pos:end="139:61"><expr pos:start="139:41" pos:end="139:61"><literal type="number" pos:start="139:41" pos:end="139:44">31</literal> <operator pos:start="139:44" pos:end="139:44">-</operator> <name pos:start="139:46" pos:end="139:61">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="141:7" pos:end="181:5">else if <condition pos:start="141:15" pos:end="141:22">(<expr pos:start="141:16" pos:end="141:21"><name pos:start="141:16" pos:end="141:21">s_bits</name></expr>)</condition> <block pos:start="141:24" pos:end="181:5">{<block_content pos:start="145:9" pos:end="179:9">

        <comment type="block" pos:start="143:9" pos:end="143:56">/* &gt; byte access, we need to handle alignment */</comment>

        <if_stmt pos:start="145:9" pos:end="179:9"><if pos:start="145:9" pos:end="155:8">if <condition pos:start="145:12" pos:end="145:41">(<expr pos:start="145:13" pos:end="145:40"><operator pos:start="145:13" pos:end="145:13">(</operator><name pos:start="145:14" pos:end="145:16">opc</name> <operator pos:start="145:18" pos:end="145:18">&amp;</operator> <name pos:start="145:20" pos:end="145:27">MO_AMASK</name><operator pos:start="145:28" pos:end="145:28">)</operator> <operator pos:start="145:30" pos:end="145:31">==</operator> <name pos:start="145:33" pos:end="145:40">MO_ALIGN</name></expr>)</condition> <block pos:start="145:43" pos:end="155:8">{<block_content pos:start="149:13" pos:end="153:80">

            <comment type="block" pos:start="147:13" pos:end="147:70">/* Alignment required by the front-end, same as 32-bits */</comment>

            <expr_stmt pos:start="149:13" pos:end="151:74"><expr pos:start="149:13" pos:end="151:73"><call pos:start="149:13" pos:end="151:73"><name pos:start="149:13" pos:end="149:23">tcg_out_rld</name><argument_list pos:start="149:24" pos:end="151:73">(<argument pos:start="149:25" pos:end="149:25"><expr pos:start="149:25" pos:end="149:25"><name pos:start="149:25" pos:end="149:25">s</name></expr></argument>, <argument pos:start="149:28" pos:end="149:33"><expr pos:start="149:28" pos:end="149:33"><name pos:start="149:28" pos:end="149:33">RLDICL</name></expr></argument>, <argument pos:start="149:36" pos:end="149:45"><expr pos:start="149:36" pos:end="149:45"><name pos:start="149:36" pos:end="149:45">TCG_REG_R0</name></expr></argument>, <argument pos:start="149:48" pos:end="149:53"><expr pos:start="149:48" pos:end="149:53"><name pos:start="149:48" pos:end="149:53">addrlo</name></expr></argument>,

                        <argument pos:start="151:25" pos:end="151:45"><expr pos:start="151:25" pos:end="151:45"><literal type="number" pos:start="151:25" pos:end="151:28">64</literal> <operator pos:start="151:28" pos:end="151:28">-</operator> <name pos:start="151:30" pos:end="151:45">TARGET_PAGE_BITS</name></expr></argument>, <argument pos:start="151:48" pos:end="151:72"><expr pos:start="151:48" pos:end="151:72"><name pos:start="151:48" pos:end="151:63">TARGET_PAGE_BITS</name> <operator pos:start="151:65" pos:end="151:65">-</operator> <name pos:start="151:67" pos:end="151:72">s_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:80"><expr pos:start="153:13" pos:end="153:79"><call pos:start="153:13" pos:end="153:79"><name pos:start="153:13" pos:end="153:23">tcg_out_rld</name><argument_list pos:start="153:24" pos:end="153:79">(<argument pos:start="153:25" pos:end="153:25"><expr pos:start="153:25" pos:end="153:25"><name pos:start="153:25" pos:end="153:25">s</name></expr></argument>, <argument pos:start="153:28" pos:end="153:33"><expr pos:start="153:28" pos:end="153:33"><name pos:start="153:28" pos:end="153:33">RLDICL</name></expr></argument>, <argument pos:start="153:36" pos:end="153:45"><expr pos:start="153:36" pos:end="153:45"><name pos:start="153:36" pos:end="153:45">TCG_REG_R0</name></expr></argument>, <argument pos:start="153:48" pos:end="153:57"><expr pos:start="153:48" pos:end="153:57"><name pos:start="153:48" pos:end="153:57">TCG_REG_R0</name></expr></argument>, <argument pos:start="153:60" pos:end="153:75"><expr pos:start="153:60" pos:end="153:75"><name pos:start="153:60" pos:end="153:75">TARGET_PAGE_BITS</name></expr></argument>, <argument pos:start="153:78" pos:end="153:78"><expr pos:start="153:78" pos:end="153:78"><literal type="number" pos:start="153:78" pos:end="153:78">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       </block_content>}</block></if> <else pos:start="155:10" pos:end="179:9">else <block pos:start="155:15" pos:end="179:9">{<block_content pos:start="173:13" pos:end="177:50">

           <comment type="block" pos:start="157:12" pos:end="171:14">/* We support unaligned accesses, we need to make sure we fail

            * if we cross a page boundary. The trick is to add the

            * access_size-1 to the address before masking the low bits.

            * That will make the address overflow to the next page if we

            * cross a page boundary which will then force a mismatch of

            * the TLB compare since the next page cannot possibly be in

            * the same TLB index.

            */</comment>

            <expr_stmt pos:start="173:13" pos:end="173:76"><expr pos:start="173:13" pos:end="173:75"><call pos:start="173:13" pos:end="173:75"><name pos:start="173:13" pos:end="173:21">tcg_out32</name><argument_list pos:start="173:22" pos:end="173:75">(<argument pos:start="173:23" pos:end="173:23"><expr pos:start="173:23" pos:end="173:23"><name pos:start="173:23" pos:end="173:23">s</name></expr></argument>, <argument pos:start="173:26" pos:end="173:74"><expr pos:start="173:26" pos:end="173:74"><name pos:start="173:26" pos:end="173:29">ADDI</name> <operator pos:start="173:31" pos:end="173:31">|</operator> <call pos:start="173:33" pos:end="173:74"><name pos:start="173:33" pos:end="173:35">TAI</name><argument_list pos:start="173:36" pos:end="173:74">(<argument pos:start="173:37" pos:end="173:46"><expr pos:start="173:37" pos:end="173:46"><name pos:start="173:37" pos:end="173:46">TCG_REG_R0</name></expr></argument>, <argument pos:start="173:49" pos:end="173:54"><expr pos:start="173:49" pos:end="173:54"><name pos:start="173:49" pos:end="173:54">addrlo</name></expr></argument>, <argument pos:start="173:57" pos:end="173:73"><expr pos:start="173:57" pos:end="173:73"><operator pos:start="173:57" pos:end="173:57">(</operator><literal type="number" pos:start="173:58" pos:end="173:58">1</literal> <operator pos:start="173:60" pos:end="173:61">&lt;&lt;</operator> <name pos:start="173:63" pos:end="173:68">s_bits</name><operator pos:start="173:69" pos:end="173:69">)</operator> <operator pos:start="173:71" pos:end="173:71">-</operator> <literal type="number" pos:start="173:73" pos:end="173:73">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="177:50"><expr pos:start="175:13" pos:end="177:49"><call pos:start="175:13" pos:end="177:49"><name pos:start="175:13" pos:end="175:23">tcg_out_rld</name><argument_list pos:start="175:24" pos:end="177:49">(<argument pos:start="175:25" pos:end="175:25"><expr pos:start="175:25" pos:end="175:25"><name pos:start="175:25" pos:end="175:25">s</name></expr></argument>, <argument pos:start="175:28" pos:end="175:33"><expr pos:start="175:28" pos:end="175:33"><name pos:start="175:28" pos:end="175:33">RLDICR</name></expr></argument>, <argument pos:start="175:36" pos:end="175:45"><expr pos:start="175:36" pos:end="175:45"><name pos:start="175:36" pos:end="175:45">TCG_REG_R0</name></expr></argument>, <argument pos:start="175:48" pos:end="175:57"><expr pos:start="175:48" pos:end="175:57"><name pos:start="175:48" pos:end="175:57">TCG_REG_R0</name></expr></argument>,

                        <argument pos:start="177:25" pos:end="177:25"><expr pos:start="177:25" pos:end="177:25"><literal type="number" pos:start="177:25" pos:end="177:25">0</literal></expr></argument>, <argument pos:start="177:28" pos:end="177:48"><expr pos:start="177:28" pos:end="177:48"><literal type="number" pos:start="177:28" pos:end="177:31">63</literal> <operator pos:start="177:31" pos:end="177:31">-</operator> <name pos:start="177:33" pos:end="177:48">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="181:7" pos:end="187:5">else <block pos:start="181:12" pos:end="187:5">{<block_content pos:start="185:9" pos:end="185:77">

        <comment type="block" pos:start="183:9" pos:end="183:70">/* Byte access, just chop off the bits below the page index */</comment>

        <expr_stmt pos:start="185:9" pos:end="185:77"><expr pos:start="185:9" pos:end="185:76"><call pos:start="185:9" pos:end="185:76"><name pos:start="185:9" pos:end="185:19">tcg_out_rld</name><argument_list pos:start="185:20" pos:end="185:76">(<argument pos:start="185:21" pos:end="185:21"><expr pos:start="185:21" pos:end="185:21"><name pos:start="185:21" pos:end="185:21">s</name></expr></argument>, <argument pos:start="185:24" pos:end="185:29"><expr pos:start="185:24" pos:end="185:29"><name pos:start="185:24" pos:end="185:29">RLDICR</name></expr></argument>, <argument pos:start="185:32" pos:end="185:41"><expr pos:start="185:32" pos:end="185:41"><name pos:start="185:32" pos:end="185:41">TCG_REG_R0</name></expr></argument>, <argument pos:start="185:44" pos:end="185:49"><expr pos:start="185:44" pos:end="185:49"><name pos:start="185:44" pos:end="185:49">addrlo</name></expr></argument>, <argument pos:start="185:52" pos:end="185:52"><expr pos:start="185:52" pos:end="185:52"><literal type="number" pos:start="185:52" pos:end="185:52">0</literal></expr></argument>, <argument pos:start="185:55" pos:end="185:75"><expr pos:start="185:55" pos:end="185:75"><literal type="number" pos:start="185:55" pos:end="185:58">63</literal> <operator pos:start="185:58" pos:end="185:58">-</operator> <name pos:start="185:60" pos:end="185:75">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="191:5" pos:end="207:5"><if pos:start="191:5" pos:end="201:5">if <condition pos:start="191:8" pos:end="191:47">(<expr pos:start="191:9" pos:end="191:46"><name pos:start="191:9" pos:end="191:27">TCG_TARGET_REG_BITS</name> <operator pos:start="191:29" pos:end="191:29">&lt;</operator> <name pos:start="191:31" pos:end="191:46">TARGET_LONG_BITS</name></expr>)</condition> <block pos:start="191:49" pos:end="201:5">{<block_content pos:start="193:9" pos:end="199:73">

        <expr_stmt pos:start="193:9" pos:end="195:40"><expr pos:start="193:9" pos:end="195:39"><call pos:start="193:9" pos:end="195:39"><name pos:start="193:9" pos:end="193:19">tcg_out_cmp</name><argument_list pos:start="193:20" pos:end="195:39">(<argument pos:start="193:21" pos:end="193:21"><expr pos:start="193:21" pos:end="193:21"><name pos:start="193:21" pos:end="193:21">s</name></expr></argument>, <argument pos:start="193:24" pos:end="193:34"><expr pos:start="193:24" pos:end="193:34"><name pos:start="193:24" pos:end="193:34">TCG_COND_EQ</name></expr></argument>, <argument pos:start="193:37" pos:end="193:46"><expr pos:start="193:37" pos:end="193:46"><name pos:start="193:37" pos:end="193:46">TCG_REG_R0</name></expr></argument>, <argument pos:start="193:49" pos:end="193:60"><expr pos:start="193:49" pos:end="193:60"><name pos:start="193:49" pos:end="193:60">TCG_REG_TMP1</name></expr></argument>,

                    <argument pos:start="195:21" pos:end="195:21"><expr pos:start="195:21" pos:end="195:21"><literal type="number" pos:start="195:21" pos:end="195:21">0</literal></expr></argument>, <argument pos:start="195:24" pos:end="195:24"><expr pos:start="195:24" pos:end="195:24"><literal type="number" pos:start="195:24" pos:end="195:24">7</literal></expr></argument>, <argument pos:start="195:27" pos:end="195:38"><expr pos:start="195:27" pos:end="195:38"><name pos:start="195:27" pos:end="195:38">TCG_TYPE_I32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:76"><expr pos:start="197:9" pos:end="197:75"><call pos:start="197:9" pos:end="197:75"><name pos:start="197:9" pos:end="197:19">tcg_out_cmp</name><argument_list pos:start="197:20" pos:end="197:75">(<argument pos:start="197:21" pos:end="197:21"><expr pos:start="197:21" pos:end="197:21"><name pos:start="197:21" pos:end="197:21">s</name></expr></argument>, <argument pos:start="197:24" pos:end="197:34"><expr pos:start="197:24" pos:end="197:34"><name pos:start="197:24" pos:end="197:34">TCG_COND_EQ</name></expr></argument>, <argument pos:start="197:37" pos:end="197:42"><expr pos:start="197:37" pos:end="197:42"><name pos:start="197:37" pos:end="197:42">addrhi</name></expr></argument>, <argument pos:start="197:45" pos:end="197:54"><expr pos:start="197:45" pos:end="197:54"><name pos:start="197:45" pos:end="197:54">TCG_REG_R4</name></expr></argument>, <argument pos:start="197:57" pos:end="197:57"><expr pos:start="197:57" pos:end="197:57"><literal type="number" pos:start="197:57" pos:end="197:57">0</literal></expr></argument>, <argument pos:start="197:60" pos:end="197:60"><expr pos:start="197:60" pos:end="197:60"><literal type="number" pos:start="197:60" pos:end="197:60">6</literal></expr></argument>, <argument pos:start="197:63" pos:end="197:74"><expr pos:start="197:63" pos:end="197:74"><name pos:start="197:63" pos:end="197:74">TCG_TYPE_I32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:73"><expr pos:start="199:9" pos:end="199:72"><call pos:start="199:9" pos:end="199:72"><name pos:start="199:9" pos:end="199:17">tcg_out32</name><argument_list pos:start="199:18" pos:end="199:72">(<argument pos:start="199:19" pos:end="199:19"><expr pos:start="199:19" pos:end="199:19"><name pos:start="199:19" pos:end="199:19">s</name></expr></argument>, <argument pos:start="199:22" pos:end="199:71"><expr pos:start="199:22" pos:end="199:71"><name pos:start="199:22" pos:end="199:26">CRAND</name> <operator pos:start="199:28" pos:end="199:28">|</operator> <call pos:start="199:30" pos:end="199:41"><name pos:start="199:30" pos:end="199:31">BT</name><argument_list pos:start="199:32" pos:end="199:41">(<argument pos:start="199:33" pos:end="199:33"><expr pos:start="199:33" pos:end="199:33"><literal type="number" pos:start="199:33" pos:end="199:33">7</literal></expr></argument>, <argument pos:start="199:36" pos:end="199:40"><expr pos:start="199:36" pos:end="199:40"><name pos:start="199:36" pos:end="199:40">CR_EQ</name></expr></argument>)</argument_list></call> <operator pos:start="199:43" pos:end="199:43">|</operator> <call pos:start="199:45" pos:end="199:56"><name pos:start="199:45" pos:end="199:46">BA</name><argument_list pos:start="199:47" pos:end="199:56">(<argument pos:start="199:48" pos:end="199:48"><expr pos:start="199:48" pos:end="199:48"><literal type="number" pos:start="199:48" pos:end="199:48">6</literal></expr></argument>, <argument pos:start="199:51" pos:end="199:55"><expr pos:start="199:51" pos:end="199:55"><name pos:start="199:51" pos:end="199:55">CR_EQ</name></expr></argument>)</argument_list></call> <operator pos:start="199:58" pos:end="199:58">|</operator> <call pos:start="199:60" pos:end="199:71"><name pos:start="199:60" pos:end="199:61">BB</name><argument_list pos:start="199:62" pos:end="199:71">(<argument pos:start="199:63" pos:end="199:63"><expr pos:start="199:63" pos:end="199:63"><literal type="number" pos:start="199:63" pos:end="199:63">7</literal></expr></argument>, <argument pos:start="199:66" pos:end="199:70"><expr pos:start="199:66" pos:end="199:70"><name pos:start="199:66" pos:end="199:70">CR_EQ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="201:7" pos:end="207:5">else <block pos:start="201:12" pos:end="207:5">{<block_content pos:start="203:9" pos:end="205:39">

        <expr_stmt pos:start="203:9" pos:end="205:39"><expr pos:start="203:9" pos:end="205:38"><call pos:start="203:9" pos:end="205:38"><name pos:start="203:9" pos:end="203:19">tcg_out_cmp</name><argument_list pos:start="203:20" pos:end="205:38">(<argument pos:start="203:21" pos:end="203:21"><expr pos:start="203:21" pos:end="203:21"><name pos:start="203:21" pos:end="203:21">s</name></expr></argument>, <argument pos:start="203:24" pos:end="203:34"><expr pos:start="203:24" pos:end="203:34"><name pos:start="203:24" pos:end="203:34">TCG_COND_EQ</name></expr></argument>, <argument pos:start="203:37" pos:end="203:46"><expr pos:start="203:37" pos:end="203:46"><name pos:start="203:37" pos:end="203:46">TCG_REG_R0</name></expr></argument>, <argument pos:start="203:49" pos:end="203:60"><expr pos:start="203:49" pos:end="203:60"><name pos:start="203:49" pos:end="203:60">TCG_REG_TMP1</name></expr></argument>,

                    <argument pos:start="205:21" pos:end="205:21"><expr pos:start="205:21" pos:end="205:21"><literal type="number" pos:start="205:21" pos:end="205:21">0</literal></expr></argument>, <argument pos:start="205:24" pos:end="205:24"><expr pos:start="205:24" pos:end="205:24"><literal type="number" pos:start="205:24" pos:end="205:24">7</literal></expr></argument>, <argument pos:start="205:27" pos:end="205:37"><expr pos:start="205:27" pos:end="205:37"><name pos:start="205:27" pos:end="205:37">TCG_TYPE_TL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="211:5" pos:end="211:18">return <expr pos:start="211:12" pos:end="211:17"><name pos:start="211:12" pos:end="211:17">addrlo</name></expr>;</return>

</block_content>}</block></function>
</unit>
