<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8004.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:42">test_visitor_out_struct_errors</name><parameter_list pos:start="1:43" pos:end="3:62">(<parameter pos:start="1:44" pos:end="1:70"><decl pos:start="1:44" pos:end="1:70"><type pos:start="1:44" pos:end="1:70"><name pos:start="1:44" pos:end="1:64">TestOutputVisitorData</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:70">data</name></decl></parameter>,

                                           <parameter pos:start="3:44" pos:end="3:61"><decl pos:start="3:44" pos:end="3:61"><type pos:start="3:44" pos:end="3:61"><specifier pos:start="3:44" pos:end="3:48">const</specifier> <name pos:start="3:50" pos:end="3:53">void</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:61">unused</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="35:1">{<block_content pos:start="7:5" pos:end="33:5">

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">EnumOne</name></type> <name pos:start="7:13" pos:end="7:24"><name pos:start="7:13" pos:end="7:22">bad_values</name><index pos:start="7:23" pos:end="7:24">[]</index></name> <init pos:start="7:26" pos:end="7:47">= <expr pos:start="7:28" pos:end="7:47"><block pos:start="7:28" pos:end="7:47">{ <expr pos:start="7:30" pos:end="7:41"><name pos:start="7:30" pos:end="7:41">ENUM_ONE_MAX</name></expr>, <expr pos:start="7:44" pos:end="7:45"><operator pos:start="7:44" pos:end="7:44">-</operator><literal type="number" pos:start="7:45" pos:end="7:45">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:15">UserDefZero</name></type> <name pos:start="9:17" pos:end="9:17">b</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:44"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:14">UserDefOne</name></type> <name pos:start="11:16" pos:end="11:16">u</name> <init pos:start="11:18" pos:end="11:33">= <expr pos:start="11:20" pos:end="11:33"><block pos:start="11:20" pos:end="11:33">{ <expr pos:start="11:22" pos:end="11:31"><operator pos:start="11:22" pos:end="11:22">.</operator><name pos:start="11:23" pos:end="11:26">base</name> <operator pos:start="11:28" pos:end="11:28">=</operator> <operator pos:start="11:30" pos:end="11:30">&amp;</operator><name pos:start="11:31" pos:end="11:31">b</name></expr> }</block></expr></init></decl>, <decl pos:start="11:36" pos:end="11:43"><type ref="prev" pos:start="11:5" pos:end="11:14"><modifier pos:start="11:36" pos:end="11:36">*</modifier></type><name pos:start="11:37" pos:end="11:38">pu</name> <init pos:start="11:40" pos:end="11:43">= <expr pos:start="11:42" pos:end="11:43"><operator pos:start="11:42" pos:end="11:42">&amp;</operator><name pos:start="11:43" pos:end="11:43">u</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:9">Error</name> <modifier pos:start="13:11" pos:end="13:11">*</modifier></type><name pos:start="13:12" pos:end="13:14">err</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <for pos:start="19:5" pos:end="33:5">for <control pos:start="19:9" pos:end="19:49">(<init pos:start="19:10" pos:end="19:15"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">i</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:44"><expr pos:start="19:17" pos:end="19:42"><name pos:start="19:17" pos:end="19:17">i</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <call pos:start="19:21" pos:end="19:42"><name pos:start="19:21" pos:end="19:30">ARRAY_SIZE</name><argument_list pos:start="19:31" pos:end="19:42">(<argument pos:start="19:32" pos:end="19:41"><expr pos:start="19:32" pos:end="19:41"><name pos:start="19:32" pos:end="19:41">bad_values</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr pos:start="19:46" pos:end="19:48"><expr pos:start="19:46" pos:end="19:48"><name pos:start="19:46" pos:end="19:46">i</name><operator pos:start="19:47" pos:end="19:48">++</operator></expr></incr>)</control> <block pos:start="19:51" pos:end="33:5">{<block_content pos:start="21:9" pos:end="31:24">

        <expr_stmt pos:start="21:9" pos:end="21:19"><expr pos:start="21:9" pos:end="21:18"><name pos:start="21:9" pos:end="21:11">err</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:18">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:27"><expr pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:19"><name pos:start="23:9" pos:end="23:9">u</name><operator pos:start="23:10" pos:end="23:10">.</operator><name pos:start="23:11" pos:end="23:19">has_enum1</name></name> <operator pos:start="23:21" pos:end="23:21">=</operator> <name pos:start="23:23" pos:end="23:26">true</name></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:32"><expr pos:start="25:9" pos:end="25:31"><name pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:9">u</name><operator pos:start="25:10" pos:end="25:10">.</operator><name pos:start="25:11" pos:end="25:15">enum1</name></name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:31"><name pos:start="25:19" pos:end="25:28">bad_values</name><index pos:start="25:29" pos:end="25:31">[<expr pos:start="25:30" pos:end="25:30"><name pos:start="25:30" pos:end="25:30">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:61"><expr pos:start="27:9" pos:end="27:60"><call pos:start="27:9" pos:end="27:60"><name pos:start="27:9" pos:end="27:29">visit_type_UserDefOne</name><argument_list pos:start="27:30" pos:end="27:60">(<argument pos:start="27:31" pos:end="27:38"><expr pos:start="27:31" pos:end="27:38"><name pos:start="27:31" pos:end="27:38"><name pos:start="27:31" pos:end="27:34">data</name><operator pos:start="27:35" pos:end="27:36">-&gt;</operator><name pos:start="27:37" pos:end="27:38">ov</name></name></expr></argument>, <argument pos:start="27:41" pos:end="27:43"><expr pos:start="27:41" pos:end="27:43"><operator pos:start="27:41" pos:end="27:41">&amp;</operator><name pos:start="27:42" pos:end="27:43">pu</name></expr></argument>, <argument pos:start="27:46" pos:end="27:53"><expr pos:start="27:46" pos:end="27:53"><literal type="string" pos:start="27:46" pos:end="27:53">"unused"</literal></expr></argument>, <argument pos:start="27:56" pos:end="27:59"><expr pos:start="27:56" pos:end="27:59"><operator pos:start="27:56" pos:end="27:56">&amp;</operator><name pos:start="27:57" pos:end="27:59">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:22"><expr pos:start="29:9" pos:end="29:21"><call pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:16">g_assert</name><argument_list pos:start="29:17" pos:end="29:21">(<argument pos:start="29:18" pos:end="29:20"><expr pos:start="29:18" pos:end="29:20"><name pos:start="29:18" pos:end="29:20">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:24"><expr pos:start="31:9" pos:end="31:23"><call pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:18">error_free</name><argument_list pos:start="31:19" pos:end="31:23">(<argument pos:start="31:20" pos:end="31:22"><expr pos:start="31:20" pos:end="31:22"><name pos:start="31:20" pos:end="31:22">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
