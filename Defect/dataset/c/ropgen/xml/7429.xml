<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7429.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:33"><name pos:start="1:1" pos:end="1:10">aio_read_f</name><argument_list pos:start="1:11" pos:end="1:33">(<argument pos:start="1:12" pos:end="1:19">int argc</argument>, <argument pos:start="1:22" pos:end="1:32">char **argv</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="121:1">{<block_content pos:start="5:9" pos:end="119:17">

	<decl_stmt pos:start="5:9" pos:end="5:22"><decl pos:start="5:9" pos:end="5:18"><type pos:start="5:9" pos:end="5:11"><name pos:start="5:9" pos:end="5:11">int</name></type> <name pos:start="5:13" pos:end="5:18">nr_iov</name></decl>, <decl pos:start="5:21" pos:end="5:21"><type ref="prev" pos:start="5:9" pos:end="5:11"/><name pos:start="5:21" pos:end="5:21">c</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:64"><decl pos:start="7:9" pos:end="7:63"><type pos:start="7:9" pos:end="7:24"><name pos:start="7:9" pos:end="7:22"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:22">aio_ctx</name></name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:27">ctx</name> <init pos:start="7:29" pos:end="7:63">= <expr pos:start="7:31" pos:end="7:63"><call pos:start="7:31" pos:end="7:63"><name pos:start="7:31" pos:end="7:36">calloc</name><argument_list pos:start="7:37" pos:end="7:63">(<argument pos:start="7:38" pos:end="7:38"><expr pos:start="7:38" pos:end="7:38"><literal type="number" pos:start="7:38" pos:end="7:38">1</literal></expr></argument>, <argument pos:start="7:41" pos:end="7:62"><expr pos:start="7:41" pos:end="7:62"><sizeof pos:start="7:41" pos:end="7:62">sizeof<argument_list pos:start="7:47" pos:end="7:62">(<argument pos:start="7:48" pos:end="7:61"><expr pos:start="7:48" pos:end="7:61">struct <name pos:start="7:55" pos:end="7:61">aio_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:30"><decl pos:start="9:9" pos:end="9:29"><type pos:start="9:9" pos:end="9:26"><name pos:start="9:9" pos:end="9:24">BlockDriverAIOCB</name> <modifier pos:start="9:26" pos:end="9:26">*</modifier></type><name pos:start="9:27" pos:end="9:29">acb</name></decl>;</decl_stmt>



	<while pos:start="13:9" pos:end="51:9">while <condition pos:start="13:15" pos:end="13:56">(<expr pos:start="13:16" pos:end="13:55"><operator pos:start="13:16" pos:end="13:16">(</operator><name pos:start="13:17" pos:end="13:17">c</name> <operator pos:start="13:19" pos:end="13:19">=</operator> <call pos:start="13:21" pos:end="13:47"><name pos:start="13:21" pos:end="13:26">getopt</name><argument_list pos:start="13:27" pos:end="13:47">(<argument pos:start="13:28" pos:end="13:31"><expr pos:start="13:28" pos:end="13:31"><name pos:start="13:28" pos:end="13:31">argc</name></expr></argument>, <argument pos:start="13:34" pos:end="13:37"><expr pos:start="13:34" pos:end="13:37"><name pos:start="13:34" pos:end="13:37">argv</name></expr></argument>, <argument pos:start="13:40" pos:end="13:46"><expr pos:start="13:40" pos:end="13:46"><literal type="string" pos:start="13:40" pos:end="13:46">"CP:qv"</literal></expr></argument>)</argument_list></call><operator pos:start="13:48" pos:end="13:48">)</operator> <operator pos:start="13:50" pos:end="13:51">!=</operator> <name pos:start="13:53" pos:end="13:55">EOF</name></expr>)</condition> <block pos:start="13:58" pos:end="51:9">{<block_content pos:start="15:17" pos:end="49:17">

		<switch pos:start="15:17" pos:end="49:17">switch <condition pos:start="15:24" pos:end="15:26">(<expr pos:start="15:25" pos:end="15:25"><name pos:start="15:25" pos:end="15:25">c</name></expr>)</condition> <block pos:start="15:28" pos:end="49:17">{<block_content pos:start="17:17" pos:end="47:60">

		<case pos:start="17:17" pos:end="17:25">case <expr pos:start="17:22" pos:end="17:24"><literal type="char" pos:start="17:22" pos:end="17:24">'C'</literal></expr>:</case>

			<expr_stmt pos:start="19:25" pos:end="19:39"><expr pos:start="19:25" pos:end="19:38"><name pos:start="19:25" pos:end="19:34"><name pos:start="19:25" pos:end="19:27">ctx</name><operator pos:start="19:28" pos:end="19:29">-&gt;</operator><name pos:start="19:30" pos:end="19:34">Cflag</name></name> <operator pos:start="19:36" pos:end="19:36">=</operator> <literal type="number" pos:start="19:38" pos:end="19:38">1</literal></expr>;</expr_stmt>

			<break pos:start="21:25" pos:end="21:30">break;</break>

		<case pos:start="23:17" pos:end="23:25">case <expr pos:start="23:22" pos:end="23:24"><literal type="char" pos:start="23:22" pos:end="23:24">'P'</literal></expr>:</case>

			<expr_stmt pos:start="25:25" pos:end="25:39"><expr pos:start="25:25" pos:end="25:38"><name pos:start="25:25" pos:end="25:34"><name pos:start="25:25" pos:end="25:27">ctx</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:34">Pflag</name></name> <operator pos:start="25:36" pos:end="25:36">=</operator> <literal type="number" pos:start="25:38" pos:end="25:38">1</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="27:25" pos:end="27:52"><expr pos:start="27:25" pos:end="27:51"><name pos:start="27:25" pos:end="27:36"><name pos:start="27:25" pos:end="27:27">ctx</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:36">pattern</name></name> <operator pos:start="27:38" pos:end="27:38">=</operator> <call pos:start="27:40" pos:end="27:51"><name pos:start="27:40" pos:end="27:43">atoi</name><argument_list pos:start="27:44" pos:end="27:51">(<argument pos:start="27:45" pos:end="27:50"><expr pos:start="27:45" pos:end="27:50"><name pos:start="27:45" pos:end="27:50">optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break pos:start="29:25" pos:end="29:30">break;</break>

		<case pos:start="31:17" pos:end="31:25">case <expr pos:start="31:22" pos:end="31:24"><literal type="char" pos:start="31:22" pos:end="31:24">'q'</literal></expr>:</case>

			<expr_stmt pos:start="33:25" pos:end="33:39"><expr pos:start="33:25" pos:end="33:38"><name pos:start="33:25" pos:end="33:34"><name pos:start="33:25" pos:end="33:27">ctx</name><operator pos:start="33:28" pos:end="33:29">-&gt;</operator><name pos:start="33:30" pos:end="33:34">qflag</name></name> <operator pos:start="33:36" pos:end="33:36">=</operator> <literal type="number" pos:start="33:38" pos:end="33:38">1</literal></expr>;</expr_stmt>

			<break pos:start="35:25" pos:end="35:30">break;</break>

		<case pos:start="37:17" pos:end="37:25">case <expr pos:start="37:22" pos:end="37:24"><literal type="char" pos:start="37:22" pos:end="37:24">'v'</literal></expr>:</case>

			<expr_stmt pos:start="39:25" pos:end="39:39"><expr pos:start="39:25" pos:end="39:38"><name pos:start="39:25" pos:end="39:34"><name pos:start="39:25" pos:end="39:27">ctx</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:34">vflag</name></name> <operator pos:start="39:36" pos:end="39:36">=</operator> <literal type="number" pos:start="39:38" pos:end="39:38">1</literal></expr>;</expr_stmt>

			<break pos:start="41:25" pos:end="41:30">break;</break>

		<default pos:start="43:17" pos:end="43:24">default:</default>

			<expr_stmt pos:start="45:25" pos:end="45:34"><expr pos:start="45:25" pos:end="45:33"><call pos:start="45:25" pos:end="45:33"><name pos:start="45:25" pos:end="45:28">free</name><argument_list pos:start="45:29" pos:end="45:33">(<argument pos:start="45:30" pos:end="45:32"><expr pos:start="45:30" pos:end="45:32"><name pos:start="45:30" pos:end="45:32">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return pos:start="47:25" pos:end="47:60">return <expr pos:start="47:32" pos:end="47:59"><call pos:start="47:32" pos:end="47:59"><name pos:start="47:32" pos:end="47:44">command_usage</name><argument_list pos:start="47:45" pos:end="47:59">(<argument pos:start="47:46" pos:end="47:58"><expr pos:start="47:46" pos:end="47:58"><operator pos:start="47:46" pos:end="47:46">&amp;</operator><name pos:start="47:47" pos:end="47:58">aio_read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

		</block_content>}</block></switch>

	</block_content>}</block></while>



	<if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:30">(<expr pos:start="55:13" pos:end="55:29"><name pos:start="55:13" pos:end="55:18">optind</name> <operator pos:start="55:20" pos:end="55:20">&gt;</operator> <name pos:start="55:22" pos:end="55:25">argc</name> <operator pos:start="55:27" pos:end="55:27">-</operator> <literal type="number" pos:start="55:29" pos:end="55:29">2</literal></expr>)</condition> <block pos:start="55:32" pos:end="61:9">{<block_content pos:start="57:17" pos:end="59:52">

		<expr_stmt pos:start="57:17" pos:end="57:26"><expr pos:start="57:17" pos:end="57:25"><call pos:start="57:17" pos:end="57:25"><name pos:start="57:17" pos:end="57:20">free</name><argument_list pos:start="57:21" pos:end="57:25">(<argument pos:start="57:22" pos:end="57:24"><expr pos:start="57:22" pos:end="57:24"><name pos:start="57:22" pos:end="57:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="59:17" pos:end="59:52">return <expr pos:start="59:24" pos:end="59:51"><call pos:start="59:24" pos:end="59:51"><name pos:start="59:24" pos:end="59:36">command_usage</name><argument_list pos:start="59:37" pos:end="59:51">(<argument pos:start="59:38" pos:end="59:50"><expr pos:start="59:38" pos:end="59:50"><operator pos:start="59:38" pos:end="59:38">&amp;</operator><name pos:start="59:39" pos:end="59:50">aio_read_cmd</name></expr></argument>)</argument_list></call></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="65:9" pos:end="65:43"><expr pos:start="65:9" pos:end="65:42"><name pos:start="65:9" pos:end="65:19"><name pos:start="65:9" pos:end="65:11">ctx</name><operator pos:start="65:12" pos:end="65:13">-&gt;</operator><name pos:start="65:14" pos:end="65:19">offset</name></name> <operator pos:start="65:21" pos:end="65:21">=</operator> <call pos:start="65:23" pos:end="65:42"><name pos:start="65:23" pos:end="65:28">cvtnum</name><argument_list pos:start="65:29" pos:end="65:42">(<argument pos:start="65:30" pos:end="65:41"><expr pos:start="65:30" pos:end="65:41"><name pos:start="65:30" pos:end="65:41"><name pos:start="65:30" pos:end="65:33">argv</name><index pos:start="65:34" pos:end="65:41">[<expr pos:start="65:35" pos:end="65:40"><name pos:start="65:35" pos:end="65:40">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="67:9" pos:end="75:9"><if pos:start="67:9" pos:end="75:9">if <condition pos:start="67:12" pos:end="67:28">(<expr pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:15">ctx</name><operator pos:start="67:16" pos:end="67:17">-&gt;</operator><name pos:start="67:18" pos:end="67:23">offset</name></name> <operator pos:start="67:25" pos:end="67:25">&lt;</operator> <literal type="number" pos:start="67:27" pos:end="67:27">0</literal></expr>)</condition> <block pos:start="67:30" pos:end="75:9">{<block_content pos:start="69:17" pos:end="73:25">

		<expr_stmt pos:start="69:17" pos:end="69:76"><expr pos:start="69:17" pos:end="69:75"><call pos:start="69:17" pos:end="69:75"><name pos:start="69:17" pos:end="69:22">printf</name><argument_list pos:start="69:23" pos:end="69:75">(<argument pos:start="69:24" pos:end="69:60"><expr pos:start="69:24" pos:end="69:60"><literal type="string" pos:start="69:24" pos:end="69:60">"non-numeric length argument -- %s\n"</literal></expr></argument>, <argument pos:start="69:63" pos:end="69:74"><expr pos:start="69:63" pos:end="69:74"><name pos:start="69:63" pos:end="69:74"><name pos:start="69:63" pos:end="69:66">argv</name><index pos:start="69:67" pos:end="69:74">[<expr pos:start="69:68" pos:end="69:73"><name pos:start="69:68" pos:end="69:73">optind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="71:17" pos:end="71:26"><expr pos:start="71:17" pos:end="71:25"><call pos:start="71:17" pos:end="71:25"><name pos:start="71:17" pos:end="71:20">free</name><argument_list pos:start="71:21" pos:end="71:25">(<argument pos:start="71:22" pos:end="71:24"><expr pos:start="71:22" pos:end="71:24"><name pos:start="71:22" pos:end="71:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="73:17" pos:end="73:25">return <expr pos:start="73:24" pos:end="73:24"><literal type="number" pos:start="73:24" pos:end="73:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>

	<expr_stmt pos:start="77:9" pos:end="77:17"><expr pos:start="77:9" pos:end="77:16"><name pos:start="77:9" pos:end="77:14">optind</name><operator pos:start="77:15" pos:end="77:16">++</operator></expr>;</expr_stmt>



	<if_stmt pos:start="81:9" pos:end="91:9"><if pos:start="81:9" pos:end="91:9">if <condition pos:start="81:12" pos:end="81:32">(<expr pos:start="81:13" pos:end="81:31"><name pos:start="81:13" pos:end="81:23"><name pos:start="81:13" pos:end="81:15">ctx</name><operator pos:start="81:16" pos:end="81:17">-&gt;</operator><name pos:start="81:18" pos:end="81:23">offset</name></name> <operator pos:start="81:25" pos:end="81:25">&amp;</operator> <literal type="number" pos:start="81:27" pos:end="81:31">0x1ff</literal></expr>)</condition> <block pos:start="81:34" pos:end="91:9">{<block_content pos:start="83:17" pos:end="89:25">

		<expr_stmt pos:start="83:17" pos:end="85:48"><expr pos:start="83:17" pos:end="85:47"><call pos:start="83:17" pos:end="85:47"><name pos:start="83:17" pos:end="83:22">printf</name><argument_list pos:start="83:23" pos:end="85:47">(<argument pos:start="83:24" pos:end="83:60"><expr pos:start="83:24" pos:end="83:60"><literal type="string" pos:start="83:24" pos:end="83:60">"offset %lld is not sector aligned\n"</literal></expr></argument>,

			<argument pos:start="85:25" pos:end="85:46"><expr pos:start="85:25" pos:end="85:46"><operator pos:start="85:25" pos:end="85:25">(</operator><name pos:start="85:26" pos:end="85:29">long</name> <name pos:start="85:31" pos:end="85:34">long</name><operator pos:start="85:35" pos:end="85:35">)</operator><name pos:start="85:36" pos:end="85:46"><name pos:start="85:36" pos:end="85:38">ctx</name><operator pos:start="85:39" pos:end="85:40">-&gt;</operator><name pos:start="85:41" pos:end="85:46">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="87:17" pos:end="87:26"><expr pos:start="87:17" pos:end="87:25"><call pos:start="87:17" pos:end="87:25"><name pos:start="87:17" pos:end="87:20">free</name><argument_list pos:start="87:21" pos:end="87:25">(<argument pos:start="87:22" pos:end="87:24"><expr pos:start="87:22" pos:end="87:24"><name pos:start="87:22" pos:end="87:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="89:17" pos:end="89:25">return <expr pos:start="89:24" pos:end="89:24"><literal type="number" pos:start="89:24" pos:end="89:24">0</literal></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<expr_stmt pos:start="95:9" pos:end="95:31"><expr pos:start="95:9" pos:end="95:30"><name pos:start="95:9" pos:end="95:14">nr_iov</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <name pos:start="95:18" pos:end="95:21">argc</name> <operator pos:start="95:23" pos:end="95:23">-</operator> <name pos:start="95:25" pos:end="95:30">optind</name></expr>;</expr_stmt>

	<expr_stmt pos:start="97:9" pos:end="97:73"><expr pos:start="97:9" pos:end="97:72"><name pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:11">ctx</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:16">buf</name></name> <operator pos:start="97:18" pos:end="97:18">=</operator> <call pos:start="97:20" pos:end="97:72"><name pos:start="97:20" pos:end="97:31">create_iovec</name><argument_list pos:start="97:32" pos:end="97:72">(<argument pos:start="97:33" pos:end="97:42"><expr pos:start="97:33" pos:end="97:42"><operator pos:start="97:33" pos:end="97:33">&amp;</operator><name pos:start="97:34" pos:end="97:42"><name pos:start="97:34" pos:end="97:36">ctx</name><operator pos:start="97:37" pos:end="97:38">-&gt;</operator><name pos:start="97:39" pos:end="97:42">qiov</name></name></expr></argument>, <argument pos:start="97:45" pos:end="97:57"><expr pos:start="97:45" pos:end="97:57"><operator pos:start="97:45" pos:end="97:45">&amp;</operator><name pos:start="97:46" pos:end="97:57"><name pos:start="97:46" pos:end="97:49">argv</name><index pos:start="97:50" pos:end="97:57">[<expr pos:start="97:51" pos:end="97:56"><name pos:start="97:51" pos:end="97:56">optind</name></expr>]</index></name></expr></argument>, <argument pos:start="97:60" pos:end="97:65"><expr pos:start="97:60" pos:end="97:65"><name pos:start="97:60" pos:end="97:65">nr_iov</name></expr></argument>, <argument pos:start="97:68" pos:end="97:71"><expr pos:start="97:68" pos:end="97:71"><literal type="number" pos:start="97:68" pos:end="97:71">0xab</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<expr_stmt pos:start="101:9" pos:end="101:37"><expr pos:start="101:9" pos:end="101:36"><call pos:start="101:9" pos:end="101:36"><name pos:start="101:9" pos:end="101:20">gettimeofday</name><argument_list pos:start="101:21" pos:end="101:36">(<argument pos:start="101:22" pos:end="101:29"><expr pos:start="101:22" pos:end="101:29"><operator pos:start="101:22" pos:end="101:22">&amp;</operator><name pos:start="101:23" pos:end="101:29"><name pos:start="101:23" pos:end="101:25">ctx</name><operator pos:start="101:26" pos:end="101:27">-&gt;</operator><name pos:start="101:28" pos:end="101:29">t1</name></name></expr></argument>, <argument pos:start="101:32" pos:end="101:35"><expr pos:start="101:32" pos:end="101:35"><name pos:start="101:32" pos:end="101:35">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="103:9" pos:end="105:71"><expr pos:start="103:9" pos:end="105:70"><name pos:start="103:9" pos:end="103:11">acb</name> <operator pos:start="103:13" pos:end="103:13">=</operator> <call pos:start="103:15" pos:end="105:70"><name pos:start="103:15" pos:end="103:28">bdrv_aio_readv</name><argument_list pos:start="103:29" pos:end="105:70">(<argument pos:start="103:30" pos:end="103:31"><expr pos:start="103:30" pos:end="103:31"><name pos:start="103:30" pos:end="103:31">bs</name></expr></argument>, <argument pos:start="103:34" pos:end="103:49"><expr pos:start="103:34" pos:end="103:49"><name pos:start="103:34" pos:end="103:44"><name pos:start="103:34" pos:end="103:36">ctx</name><operator pos:start="103:37" pos:end="103:38">-&gt;</operator><name pos:start="103:39" pos:end="103:44">offset</name></name> <operator pos:start="103:46" pos:end="103:47">&gt;&gt;</operator> <literal type="number" pos:start="103:49" pos:end="103:49">9</literal></expr></argument>, <argument pos:start="103:52" pos:end="103:61"><expr pos:start="103:52" pos:end="103:61"><operator pos:start="103:52" pos:end="103:52">&amp;</operator><name pos:start="103:53" pos:end="103:61"><name pos:start="103:53" pos:end="103:55">ctx</name><operator pos:start="103:56" pos:end="103:57">-&gt;</operator><name pos:start="103:58" pos:end="103:61">qiov</name></name></expr></argument>,

			      <argument pos:start="105:31" pos:end="105:49"><expr pos:start="105:31" pos:end="105:49"><name pos:start="105:31" pos:end="105:44"><name pos:start="105:31" pos:end="105:33">ctx</name><operator pos:start="105:34" pos:end="105:35">-&gt;</operator><name pos:start="105:36" pos:end="105:39">qiov</name><operator pos:start="105:40" pos:end="105:40">.</operator><name pos:start="105:41" pos:end="105:44">size</name></name> <operator pos:start="105:46" pos:end="105:47">&gt;&gt;</operator> <literal type="number" pos:start="105:49" pos:end="105:49">9</literal></expr></argument>, <argument pos:start="105:52" pos:end="105:64"><expr pos:start="105:52" pos:end="105:64"><name pos:start="105:52" pos:end="105:64">aio_read_done</name></expr></argument>, <argument pos:start="105:67" pos:end="105:69"><expr pos:start="105:67" pos:end="105:69"><name pos:start="105:67" pos:end="105:69">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt pos:start="107:9" pos:end="115:9"><if pos:start="107:9" pos:end="115:9">if <condition pos:start="107:12" pos:end="107:17">(<expr pos:start="107:13" pos:end="107:16"><operator pos:start="107:13" pos:end="107:13">!</operator><name pos:start="107:14" pos:end="107:16">acb</name></expr>)</condition> <block pos:start="107:19" pos:end="115:9">{<block_content pos:start="109:17" pos:end="113:28">

		<expr_stmt pos:start="109:17" pos:end="109:31"><expr pos:start="109:17" pos:end="109:30"><call pos:start="109:17" pos:end="109:30"><name pos:start="109:17" pos:end="109:20">free</name><argument_list pos:start="109:21" pos:end="109:30">(<argument pos:start="109:22" pos:end="109:29"><expr pos:start="109:22" pos:end="109:29"><name pos:start="109:22" pos:end="109:29"><name pos:start="109:22" pos:end="109:24">ctx</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:29">buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="111:17" pos:end="111:26"><expr pos:start="111:17" pos:end="111:25"><call pos:start="111:17" pos:end="111:25"><name pos:start="111:17" pos:end="111:20">free</name><argument_list pos:start="111:21" pos:end="111:25">(<argument pos:start="111:22" pos:end="111:24"><expr pos:start="111:22" pos:end="111:24"><name pos:start="111:22" pos:end="111:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return pos:start="113:17" pos:end="113:28">return <expr pos:start="113:24" pos:end="113:27"><operator pos:start="113:24" pos:end="113:24">-</operator><name pos:start="113:25" pos:end="113:27">EIO</name></expr>;</return>

	</block_content>}</block></if></if_stmt>



	<return pos:start="119:9" pos:end="119:17">return <expr pos:start="119:16" pos:end="119:16"><literal type="number" pos:start="119:16" pos:end="119:16">0</literal></expr>;</return>

</block_content>}</block>
</unit>
